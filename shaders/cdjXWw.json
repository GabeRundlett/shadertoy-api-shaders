{
    "Shader": {
        "info": {
            "date": "1670408317",
            "description": "Take four complex numbers as roots of a quartic equation, compute the equation, then solve and compare with the original roots. The solved roots are marked by rings and the contours show the roots of the equation directly.\n\nUse mouse to drag roots around.",
            "flags": 48,
            "hasliked": 0,
            "id": "cdjXWw",
            "likes": 21,
            "name": "Complex Quartic Equation Solver",
            "published": 3,
            "tags": [
                "function",
                "complex",
                "quartic",
                "equation",
                "rational"
            ],
            "usePreview": 1,
            "username": "mla",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Complex Quartic Equations, mla, 2022.\n//\n// Take four complex numbers as roots of a quartic equation, compute the equation,\n// then solve and compare with the original roots. The solved roots are marked\n// by rings and the contours show the roots of the equation directly.\n//\n// The roots of the resolvent cubic are shown as solid points.\n//\n// Use mouse to drag roots around.\n// 'a': hide axes\n// 'r': rotation\n// 'h': hide hud\n// 's': clamp roots to real line\n// 'n': apply final Newton-Raphson correction to roots\n//\n// Quartic solver is from Hall and Knight, Higher Algebra (1887) and\n// is a version of Ferrari's solution from 1540:\n//\n// Given x⁴+2px³+qx²+2rx+s = 0, rewrite as (x²+px+k)² = (ax+b)², so the\n// quartic roots are the roots of quadratics: x² + (p±a)x + (k±b) = 0\n//\n// Comparing coefficients and simplifying, we get:\n// p² + 2k = q + a²\n// pk = r + ab\n// k² = s + b²\n// \n// Now eliminate a and b (using a² = p² + 2k - q, a²b² = (pk-r)², b² = k² - s)\n// to get cubic in k:\n//\n// 2k³ - qk² + 2(pr-s)k - p²s + qs - r² = 0\n//\n// Solve cubic to get k, then a² and a (the sign of a is immaterial), then\n// finally b from b = (pk-r)/a\n//\n// This is the same as the Lanczos solution, except he constructs a cubic in a\n// rather than k (possibly this is superior - he didn't reveal reasons for\n// doing it this way).\n//\n// Tricks for accuracy: use Newton-Raphson to improve root of resolvent cubic\n// (we only need one root, so we pick the first, a more intelligent strategy\n// might be better), and also to improve the result of complex square root.\n// We can also apply NR to refine the final roots, but this is less necessary\n// if the previous refinements have been done (and there is always the\n// possiblity of being led astray).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec2 csqrt(vec2 z) {\n  if (z == vec2(0)) return vec2(0);\n  float t = carg(z)/2.0;\n  vec2 u = vec2(cos(t),sin(t));\n  float r = length(z);\n  z /= r;\n  u -= cdiv(cmul(u,u)-z,2.0*u); // NR step\n  return sqrt(r)*u;\n}\n\nvec2 ccuberoot(vec2 z) {\n  float t = carg(z)/3.0;\n  vec2 u = vec2(cos(t),sin(t));\n  float r = length(z);\n  z /= r;\n  if (false) {\n    vec2 u2 = cmul(u,u);\n    u -= cdiv(cmul(u,u2)-z,3.0*u2); // NR step\n  }\n  return pow(r,1.0/3.0)*u;\n}\n\nmat2 solvequadratic(vec2 B, vec2 C) {\n  vec2 D = csqrt(cmul(B,B)-4.0*C);\n  return 0.5*mat2(-B+D,-B-D);\n}\n\nmat3x2 solvecubic(vec2 p, vec2 q) {\n  // Solve depressed cubic: x³+3px+q = 0 - note factor of 3!\n  // Put x = u+v and get x³ = u³+v³+3xuv\n  // Substitute in original equation and get:\n  // u³+v³+(3uv+3p)x + q = 0\n  // Now let's constrain u,v so that uv+p = 0, and then:\n  // uv = -p ie. u³v³ = -p³ and u³+v³ = -q\n  // This gives a quadratic equation in t with roots u³ and v³:\n  // t²+qt-p³ = 0 so try to solve as:\n  // u³ = -q + sqrt(q²+4p³), v³ = -q - sqrt(q²+4p³)\n  // and take cube roots to get solution x = u+v.\n  //\n  // HOWEVER, we can't just combine any cube roots of the\n  // quadratic solutions, the condition uv+p = 0 above must also\n  // hold, so what we do is take either one of the quadratic\n  // solutions with its three cube roots as the three values\n  // of u, and derive the corresponding v's directly as v = -p/u.\n  // As with solving a real quadratic equation, it seems prudent\n  // to use the quadratic root with the largest absolute magnitude,\n  // and given one cube root, we can easily find the others by\n  // multiplying by the cube roots of unity, ω and ω².\n  vec2 q2 = cmul(q,q);\n  vec2 p3 = cmul(p,cmul(p,p));\n  vec2 s = csqrt(q2+4.0*p3);\n  float sign = dot(q,s) > 0.0 ? -1.0 : 1.0; // Get largest magnitude root\n  vec2 u3 = 0.5*(-q+sign*s);\n  vec2 u = ccuberoot(u3);\n  vec2 u1 = cmul(u,omega); // Get other cuberoots by multiplying by ω and ω².\n  vec2 u2 = cmul(u,omega2);\n  return mat3x2(u-cdiv(p,u), u1-cdiv(p,u1), u2-cdiv(p,u2));\n}\n\nmat3x2 solvecubic(vec2 B, vec2 C, vec2 D) {\n  // Solve x³+Bx²+Cx+D = 0\n  B /= 3.0; C /= 3.0;  // Simplifies sums\n  vec2 B2 = cmul(B,B); // Depress with x->x+B\n  // p = c-b*b\n  vec2 p = C-B2;\n  // q = 2.0*b*b*b - 3.0*b*c + d\n  vec2 q = cmul(B,2.0*B2-3.0*C) + D;\n  mat3x2 res = solvecubic(p,q);\n  // Undepress by subtracting B\n  return mat3x2(res[0]-B,res[1]-B,res[2]-B);\n}\n\nmat3x2 croots;\n\nvec2 qcubic(vec2 B, vec2 C, vec2 D) {\n  croots = solvecubic(B,C,D);\n  vec2 k = croots[0]; // Any root will do - use 'best' one somehow?\n  k -= cdiv(D+cmul(k,C+cmul(k,B+k)),C+cmul(k,2.0*B+3.0*k)); // Refine cubic root\n  return k;\n}\n\nmat4x2 solvequartic(vec2 p, vec2 q, vec2 r, vec2 s) {\n  p *= 0.5; r *= 0.5;\n  vec2 B = -0.5*q;\n  vec2 C = cmul(p,r)-s;\n  vec2 D = 0.5*(cmul(q-cmul(p,p),s)-cmul(r,r));\n  vec2 k = qcubic(B,C,D);\n  vec2 a = csqrt(cmul(p,p)+2.0*k-q); // The sign is immaterial\n  vec2 b = cdiv(cmul(p,k)-r,a); // Get b from a directly\n  mat2 roots0 = solvequadratic(p-a,k-b);\n  mat2 roots1 = solvequadratic(p+a,k+b);\n  return mat4x2(roots0[0],roots0[1],roots1[0],roots1[1]);\n}\n\n// The Lanczos quartic method\nmat4x2 solvequartic0(vec2 c1, vec2 c2, vec2 c3, vec2 c4) {\n  vec2 alpha = 0.5*c1;\n  vec2 A = c2-cmul(alpha,alpha);\n  vec2 B = c3-cmul(alpha,A);\n  vec2 a,b,beta;\n  vec2 psi = qcubic(2.0*A-cmul(alpha,alpha),\n                    cmul(A,A)+2.0*cmul(B,alpha)-4.0*c4,\n                    -cmul(B,B));\n  a = csqrt(psi);\n  beta = 0.5*(A + psi);\n  b = 0.5*cmul(a,alpha-cdiv(B,psi));\n  mat2 roots0 = solvequadratic(alpha+a,beta+b);\n  mat2 roots1 = solvequadratic(alpha-a,beta-b); \n  return mat4x2(roots0[0],roots0[1],roots1[0],roots1[1]);  \n}\n\nvec2 evalcubic(vec2 a, vec2 b, vec2 c, vec2 z) {\n  // (x-a)(x-b)(x-c)\n  vec2 res = z-a;\n  res = cmul(res,z-b);\n  res = cmul(res,z-c);\n  return res;\n}\n\nvec2 eval(vec2 a, vec2 b, vec2 c, vec2 d, vec2 z) {\n  //(x-a)(x-b)(x-c)\n  vec2 res = z-a;\n  res = cmul(res,z-b);\n  res = cmul(res,z-c);\n  res = cmul(res,z-d);\n  return res;\n}\n\nvec2 eval(mat4x2 coeffs, vec2 z) {\n return eval(coeffs[0],coeffs[1],coeffs[2],coeffs[3],z);\n}\n\nint NROOTS = 4;\n\nfloat hud(vec2 fragCoord, mat4x2 rootsin, mat4x2 rootsout) {\n  const int digits = 7;\n  const int nrows = 16, ncols = 4;\n  // Table structure\n  vec2 cellsize = iResolution.xy/vec2(ncols,nrows);\n  ivec2 cellindex = ivec2(fragCoord/cellsize);\n  float fsize = cellsize.y; // \"Font size\" = line height in pixels\n  int column = cellindex.x;\n  int row = nrows-cellindex.y-1;\n  vec2 p = mod(fragCoord,cellsize)/fsize;\n  float x = 1.234;\n  if (row >= NROOTS) return 0.0;\n  for (int i = 0; i < NROOTS; i++) {\n    if (row == i) {\n      if (column == 0) x = rootsin[i].x;\n      if (column == 1) x = rootsin[i].y;\n      if (column == 2) x = rootsout[i].x;\n      if (column == 3) x = rootsout[i].y;\n      //if (column == 4) x = length(eval(rootsin,rootsout[i]));\n    }\n  }\n  // Draw the character\n  vec4 metrics = vec4(0.25,0.75,0,1);\n  float charwidth = metrics.y-metrics.x;\n  float colwidth = cellsize.x/fsize-1.0; // Cell width in chars, with padding\n  int charpos = int(p.x/charwidth);\n  vec2 uv = vec2(0);\n  int c = floatchar(x,digits,charpos); // Get character at charpos, 0 if out of range\n  if (c < 0) return 0.0;\n  float charstart = charwidth*float(charpos); // character start\n  uv = char(vec2(p.x-charstart+metrics.x,p.y),c);\n  float uvscale = 0.5/(16.0*fsize);   // 0.5 to sharpen a little\n  vec2 dx = vec2(uvscale,0), dy = vec2(0,uvscale);\n  vec4 t = textureGrad(iChannel0,uv,dx,dy);\n  return t.x;  \n}\n\nvoid swap(inout vec2 x, inout vec2 y) {\n  vec2 t = x; x = y; y = t;\n}\n\nmat4x2 sort(mat4x2 a) {\n  if (a[0].x > a[1].x) swap(a[0],a[1]); //tmp = a[0], a[0] = a[1], a[1] = tmp;\n  if (a[1].x > a[2].x) swap(a[1],a[2]); //tmp = a[1], a[1] = a[2], a[2] = tmp;\n  if (a[0].x > a[1].x) swap(a[0],a[1]); //tmp = a[0], a[0] = a[1], a[1] = tmp;\n  if (a[2].x > a[3].x) swap(a[2],a[3]); //tmp = a[2], a[2] = a[3], a[3] = tmp;\n  if (a[0].x > a[1].x) swap(a[0],a[1]); //tmp = a[0], a[0] = a[1], a[1] = tmp;\n  if (a[1].x > a[2].x) swap(a[1],a[2]); //tmp = a[1], a[1] = a[2], a[2] = tmp;\n  if (a[0].x > a[1].x) swap(a[0],a[1]); //tmp = a[0], a[0] = a[1], a[1] = tmp;\n  return a;\n}\n\nfloat showkeys(vec2 fragCoord) {\n  float K = 30.0;\n  if (fragCoord.y > K) return 0.0;\n  int box = int(fragCoord.x/K);\n  bool t = false;\n  if (box == 0 && key(CHAR_N)) t = true;\n  //if (box == 1 && key(CHAR_C)) t = true;\n  if (!t) return 0.0;\n  vec2 boxcoord = mod(fragCoord,K)/K-0.5;\n  float px = 0.5/K;\n  return 1.0-smoothstep(-px,px,length(boxcoord)-0.4);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec3 col1 = vec3(1,1,0);\n    vec3 col2 = vec3(0,1,1);\n    vec3 neutral = vec3(1,0,0);\n\n    setscale();\n    vec2 z = map(fragCoord);\n    vec2 a = getselection(0);\n    vec2 b = getselection(1);\n    vec2 c = getselection(2);\n    vec2 d = getselection(3);\n    if (key(CHAR_S)) a.y = b.y = c.y = d.y = 0.0; \n    mat4x2 rootsin = mat4x2(a,b,c,d);\n\n    vec2 w = eval(rootsin,z);\n    if (!key(CHAR_R)) {\n      float t = 0.25*iTime;\n      w = cmul(w,vec2(cos(t),sin(t)));\n    }\n    w = clog(w);\n    float alpha = w.y/PI;\n    vec3 basecol = alpha < 0.0 ? col1 : col2;\n    vec3 color = mix(neutral,basecol,abs(alpha));\n    \n    float px = fwidth(length(z));\n    if (!key(CHAR_A)) {\n      // Draw axes\n      float eps = 0.05;\n      float d = min(abs(z.x),abs(z.y));\n      float x = z.x-round(z.x);\n      float y = z.y-round(z.y);\n      d = min(d,segment(vec2(x,z.y),vec2(0,-eps),vec2(0,eps)));\n      d = min(d,segment(vec2(z.x,y),vec2(-eps,0),vec2(eps,0)));\n      color = mix(vec3(0),color,smoothstep(0.0,px,d));\n    }\n    float t = 0.5+atan(w.x)/PI;\n    vec2 uv = 10.0*w/PI;\n    float px2 = fwidth(uv.x);// fwidth for function result\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    color = mix(vec3(t),color,smoothstep(0.0,px2,min(uv.x,uv.y)));\n    // Now let's solve the quartic and see if we get the original roots back.\n    // x⁴+Ax³+Bx²+Cx+D = 0\n    vec2 ab = cmul(a,b), ac = cmul(a,c), ad = cmul(a,d);\n    vec2 bc = cmul(b,c), bd = cmul(b,d), cd = cmul(c,d);\n    vec2 A = -(a+b+c+d);\n    vec2 B = ab+ac+ad+bc+bd+cd;\n    vec2 C = -(cmul(ab,c)+cmul(ab,d)+cmul(a,cd)+cmul(b,cd));\n    vec2 D = cmul(ab,cd);\n    mat4x2 roots = solvequartic(A,B,C,D);\n    if (key(CHAR_N)) {\n     for (int i = 0; i < NROOTS; i++) {\n        vec2 z = roots[i];\n        z -= cdiv(D+cmul(z,C+cmul(z,B+cmul(z,A+z))),C+cmul(z,2.0*B+cmul(z,3.0*A+4.0*z)));\n        roots[i] = z;\n      }\n    }\n    float de = 1e8;\n    for (int i = 0; i < NROOTS; i++) {\n      // Draw a little circle around each root.\n      de = min(de,abs(distance(z,roots[i])-0.05));\n      // Roots of resolvent cubic, just out of interest\n      if (i < 3) de = min(de,distance(z,croots[i])-0.05);\n    }\n    color *= smoothstep(0.0,px,de);\n    if (!key(CHAR_H)) {\n      color = mix(color,vec3(0),hud(fragCoord,sort(rootsin),sort(roots)));\n      color = mix(color,vec3(0),showkeys(fragCoord));\n    }\n    \n    color = pow(color,vec3(0.4545));\n    if (alert) color.r = 1.0;\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\n#define SELECTIONS\nconst int nselections = 4;\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define map(screenpos) (scale*(2.0*(screenpos)-iResolution.xy)/iResolution.y)\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-sqrt(3.0),1);\n  if (i == 1) return vec2( sqrt(3.0),1);\n  if (i == 2) return vec2(0,-2);\n  return vec2(0);\n}\n\nconst float PI = 3.14159265;\nconst float TWOPI = 2.0*PI;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x-z.y*w.y,z.x*w.y+z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z1, vec2 z2) {\n  return cmul(z1,cinv(z2));\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nfloat carg(vec2 z) {\n  return atan(z.y,z.x);\n}\n\nvec2 ccbrt0(vec2 z) {\n  // Trigless Newton Raphson verson\n  float r = length(z);\n  z /= r; // Normalize z\n  vec2 u = z+vec2(1,0); // First approximation (when normalized)\n  for (int i = 0; i < 4; i++) {\n    u = normalize(u);\n    vec2 u2 = cmul(u,u);\n    u -= cdiv(cmul(u,u2)-z,3.0*u2);\n  }\n  return pow(r,1.0/3.0)*u;\n}\n\n// cuberoots of 1.\nconst vec2 omega = 0.5*vec2(-1,sqrt(3.0));\nconst vec2 omega2 = omega*vec2(1,-1);\n\n\nfloat scale = 1.0;\nvoid setscale() {\n  scale = 2.5;\n}\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\nconst int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// https://www.shadertoy.com/view/4sBfRd\nvec2 char(vec2 p, int c) {\n  // Compute uv for font texture.\n  // p is [0,1] coordinates in square character\n  return (p + vec2(c,15-c/16))/16.0;\n}\n\n// Wrapper for division to allow emulation of GPU style division\n// on CPU, not that this makes much difference to result.\nfloat fdiv(float x, float y) { return x/y; }\n\n// If we've found the character for the target index, return it.\n#define CHAR(c) { if (index++ == cindex) return(c); }\n#define SIGN(x) { if ((x) < 0.0) CHAR(MINUS) else CHAR(SPACE) } \n\n// Format x to digits precision and return the character at cindex,\n// or -1 if cindex is out of range.\nint floatchar(float x, int digits, int cindex) {\n  if (cindex < 0 || cindex > digits+6) return -1;\n  int index = 0;\n  const float pmax = 1e15; //  Large power of 10 with a nice representation\n  const int emax = 15; // Exponent of pmax\n  const float pow10[] = float[]( 1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8 );\n  const int SPACE = 0x20, ZERO = 0x30, POINT = 0x2e, MINUS = 0x2d, PLUS = 0x2b;\n  const int A = 0x61, E = 0x65, F = 0x66, I = 0x69, N = 0x6e;\n  if (isinf(x)) {\n    SIGN(x);\n    CHAR(I); CHAR(N); CHAR(F);\n  } else if (isnan(x)) {\n    // Maybe show the bits\n    if (floatBitsToInt(x) < 0) CHAR(MINUS);\n    CHAR(N); CHAR(A); CHAR(N);\n  } else if (x == 0.0) {\n    SIGN(x);\n    CHAR(ZERO);\n  } else {\n    SIGN(x);\n    x = abs(x);\n    int exp = 0; // Compute exponent here\n    float llimit = pow10[digits-2], ulimit = 10.0*llimit;\n    // Now put x in the range llimit <= x <= ulimit\n    // This is a delicate business if we aren't to\n    // lose too much precision\n    while (x > llimit*pmax) { x /= pmax; exp += emax; }\n    while (x < fdiv(ulimit,pmax)) { x *= pmax; exp -= emax; }\n    if (x >= ulimit) {\n      float p = 1.0;\n      while (fdiv(x,p) > ulimit) {\n        exp++; p *= 10.0;\n      }\n      x = fdiv(x,p);\n    } else if (x < llimit) {\n      float p = 1.0;\n      while (x*p < llimit) {\n        exp--;  p *= 10.0;\n      }\n      x *= p;\n    }\n    assert(!isinf(x));\n    assert(!isnan(x));\n    assert(x >= llimit);\n    assert(x <= ulimit); // Equality is possible!\n    // Round to an integer which has exactly the significant figures we want.\n    int n = int(round(x));\n    if (n == int(ulimit)) {\n      // Just in case the round has taken us the wrong way\n      n /= 10; exp++;\n    }\n    assert(n >= int(llimit));\n    assert(n < int(ulimit));\n    // Now we have a correctly rounded integer representation together\n    // with the correct exponent. The rest is just formatting.\n\n    // See if we want to use exponent notation\n    int e = 0;\n    if (exp <= -digits-4) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    } else if (exp > 0) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    }\n    while(n%10 == 0 && exp < 0) {\n      // Remove trailing zeros\n      n /= 10; exp++;\n    }\n    int m = 1, i = exp+1;\n    while (10*m <= n) { m *= 10; i++; }\n    // i is number of characters in front of decimal point\n    if (i <= 0) {\n      CHAR(ZERO);\n      CHAR(POINT);\n      // Add leading digits for 0 < x < 1\n      while(i < 0) {\n        CHAR(ZERO); i++;\n      }\n    }\n    while(m != 0) {\n      CHAR(ZERO+n/m%10);\n      m /= 10; i--;\n      // Don't print trailing point!\n      if (i == 0 && m != 0) CHAR(POINT);\n    }\n    if (e != 0) {\n      CHAR(E);\n      CHAR(e < 0 ? MINUS : PLUS);\n      e = abs(e);\n      CHAR(ZERO+e/10); CHAR(ZERO+e%10); \n    }\n  }\n  return -1;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0 && iFrame != 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.z = 1234.0;\n      t.xy = initselection(i-1); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}