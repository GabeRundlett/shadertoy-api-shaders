{
    "Shader": {
        "info": {
            "date": "1553339407",
            "description": "infinite noise",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlSDf",
            "likes": 5,
            "name": "infinite noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Danielhu",
            "viewed": 916
        },
        "renderpass": [
            {
                "code": "vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  \n                      0.366025403784439, \n                     -0.577350269189626,\n                      0.024390243902439); \n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  i = mod289(i);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// Above noise is from https://github.com/hughsk/glsl-noise/blob/master/simplex/2d.glsl\n\n#define MAX_ITER 1\n\nvec2 trans(vec2 uv) {\n    // float timeF = pow(2.0, iTime * 0.7);\n    float timeF = pow(2.0, mod(iTime * 0.7, float(MAX_ITER)) + float(MAX_ITER) * 4.0);\n    vec2 m = (iMouse.xy - iResolution.xy / 2.0) / iResolution.xx;\n    if (iMouse.xy==vec2(0) ) m = vec2(0);\n    return (uv - m) * timeF + m;\n}\n\nfloat infNoise(vec2 uv_raw, float baseFreq, vec2 eye_raw, float lodSpeed) {\n    \n\tvec2 uv = trans(uv_raw);\n    vec2 eye = trans(eye_raw);\n    \n    float lodLevel = length(eye - uv) * lodSpeed;\n    uv *= baseFreq;\n    float f = 0.0;\n    float t = 3.0 -(log(lodLevel) / log(2.0));\n    int i = int(floor(t)) - MAX_ITER;\n    int rou = 0;\n    float l = t - floor(t);\n    f += (1.0 - l) * snoise(uv * pow(2.0, float(i - 1)));\n    for (; i < int(floor(t)); ++i) {\n        f += snoise(uv * pow(2.0, float(i)));\n        rou++;\n    }\n    f += l * snoise(uv * pow(2.0, float(i)));\n    return f / float(MAX_ITER);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.xx;\n    vec2 m = (iMouse.xy - iResolution.xy / 2.0) / iResolution.xx;\n    if (iMouse.xy==vec2(0) ) m = vec2(0);\n    fragColor.xyz = vec3(infNoise(uv, 2.0 , m, 1.0) * 0.5 + 0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}