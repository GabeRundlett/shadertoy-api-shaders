{
    "Shader": {
        "info": {
            "date": "1589396395",
            "description": "Useful primitive for texturing.",
            "flags": 0,
            "hasliked": 0,
            "id": "td2BRR",
            "likes": 3,
            "name": "Value Noise Example",
            "published": 3,
            "tags": [
                "noise2d"
            ],
            "usePreview": 0,
            "username": "peterekepeter",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// Defines\n\n#define COLOR_SKY vec3(.1,.2,.6)\n#define COLOR_CLOUDS vec3(.98,.96,.92)\n#define COLOR_DARK_SOMETHING vec3(.1,.01,.1)\n#define SCREEN_GAMMA 2.2\n\n// Function prototypes\n\nfloat hash(float value); // Produces random values\nfloat hash(vec2 value); // Produces random values\nfloat noise(vec2 position); // A single layer of noise\nfloat value_noise(vec2 position, int octaves); // Multiple layers of noise\nmat2 rotate2D(float a); // Returns 2D rotation matrix\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.yy;\n    vec2 position = uv;\n    \n\t// Rotate and translate the camera using some random sine waves\n\tposition*=rotate2D(iTime*.1)*pow(2.0,sin(iTime*.1));\n\tposition = position*7.0+sin(vec2(iTime, iTime+2.0));\n    \n    // Add some distorsion, often used for chaging the texture\n\tfloat distort_amount = sin(iTime*.3)*.5+.5; // set to 0 to disable distorsion\n    position = position + distort_amount*vec2(\n        2.0*value_noise(position*.23+iTime*.1, 8),\n        4.0*value_noise(position*.14-iTime*.1, 8));\n    \n    // This is where the texture is sampled.\n\tfloat noise_value = value_noise(position, 16);\n\tnoise_value=mix(noise_value, value_noise(position*.2+4.0, 16),.5);\n\n    // Apply gradient 1 which makes it look like clouds\n    vec3 col = mix(COLOR_CLOUDS, COLOR_SKY, smoothstep(.2,.7,noise_value));\n\n    // Apply another gradient\n    vec3 col2 = mix(COLOR_CLOUDS, COLOR_DARK_SOMETHING, pow(abs(noise_value-(sin(iTime*2.0)*.1+.5))*2.0,.2));\n    \n    // Mix between the two gradients\n\tcol=mix(col,col2, smoothstep(-.2,.2, sin(iTime+uv.x*.2))); // cooment out for clouds only\n    \n    // Gamma correction\n\tcol=pow(col, vec3(1.0/SCREEN_GAMMA));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nmat2 rotate2D(float a){\n\tfloat c=cos(a), s=sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\n// https://en.wikipedia.org/wiki/Value_noise\nfloat value_noise(vec2 position, int octaves){\n\tfloat value = 0.0;\n    // Sum together various layers of noise\n\tfor (int i=1; i<octaves; i++)\n\t{\n\t\tfloat scale = pow(2.0,float(i)); // At different scales\n\t\tfloat contrib = 1.0/scale; // Weighted accordint to scale\n\t\tvalue += noise(position*scale)*contrib;\n\t}\n\treturn value;\n}\n\nfloat noise(vec2 position){\n    // Fractional part is used for interpolation\n\tvec2 fractional_part = fract(position);\n    // Integral part is used for sampling the hash function\n\tvec2 integral_part = position-fractional_part;\n    \n    // Generate 4 sample points\n\tfloat sample_00=hash(integral_part);\n\tfloat sample_10=hash(integral_part+vec2(1,0));\n\tfloat sample_11=hash(integral_part+vec2(1,1));\n\tfloat sample_01=hash(integral_part+vec2(0,1));\n    \n    // Interpolate them so we have nice and stable continuous texture\n\treturn mix(\n\t\tmix(sample_00, sample_10, fractional_part.x),\n\t\tmix(sample_01, sample_11, fractional_part.x),\n\t\tfractional_part.y\n\t);\n}\n\nfloat hash(vec2 v) \n{ \n    // Random numbers thrown together to produce other random numbers\n    return fract(hash(v.x*.97+v.y*.98)*143.94213); \n}\n\nfloat hash(float v) \n{ \n    // Even more pseudo randomness\n    return fract(fract(v*11.3334)*fract(v*91.73362341)*43.123*429.32234643);  \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}