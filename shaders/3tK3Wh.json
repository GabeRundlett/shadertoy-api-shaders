{
    "Shader": {
        "info": {
            "date": "1578810837",
            "description": "I'm new to shader programming and was trying to get an infinite repetition effect with spheres. After playing around with some of the numbers I got this effect and thought it looked interesting.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tK3Wh",
            "likes": 10,
            "name": "Infinite Repetition Glitch",
            "published": 3,
            "tags": [
                "raymarch",
                "glitch",
                "infinite"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 673
        },
        "renderpass": [
            {
                "code": "const float EPSI = 0.01;\n\nfloat SDF(vec3 p){\n    \n    float c = 99.;\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n\treturn length(q)-0.5;\n}\n\nfloat marcher(vec3 ro, vec3 rd){\n    \n\tfloat totalDst = 0.;\n    for(int i =0;i<100;i++){\n    \tvec3 p = ro+totalDst*rd;\n        float dst = SDF(p);\n        totalDst+=dst;\n        if(totalDst>1000. || dst < EPSI)break;\n    }\n    return totalDst;\n}\n\nvec3 normal(vec3 p ){\n    \n\tvec3 norm = normalize(vec3(SDF(vec3(p.x+EPSI,p.y,p.z))-SDF(vec3(p.x-EPSI,p.y,p.z)),\n                               SDF(vec3(p.x,p.y+EPSI,p.z))-SDF(vec3(p.x,p.y-EPSI,p.z)),\n                               SDF(vec3(p.x,p.y,p.z+EPSI))-SDF(vec3(p.x,p.y,p.z-EPSI))));\n    return norm;\n}\n\nfloat lighting(vec3 p){\n    \n    vec3 lightPos= vec3(1,4,9);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = normal(p);\n    float diff = clamp(dot(n,l),0.,1.);\n\treturn diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 uv =(fragCoord-.5*iResolution.xy)/iResolution.x;\n    vec3 ro = vec3(40.+(0.*iTime),70.*iTime,70.*iTime);\n    vec3 rd = normalize(vec3(uv,1));\n    vec3 col = vec3(lighting(ro+rd*vec3(marcher(ro,rd))));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}