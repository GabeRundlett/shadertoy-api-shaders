{
    "Shader": {
        "info": {
            "date": "1625629171",
            "description": "For the weekly creative coding challenge by @Sableraph, the prompt being \"Rotation\"",
            "flags": 32,
            "hasliked": 0,
            "id": "7llSD8",
            "likes": 21,
            "name": "Rotation Migration",
            "published": 3,
            "tags": [
                "2d",
                "motionblur",
                "rotation"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 539
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvNorm = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    //matching time function but not increasing\n    float smoothTime = smoothstep(0.0,1.0,fract(iTime));\n    \n    //Chrome ab increases further out and is synced to movement\n    float ca = sqrt(length(uvNorm))*0.005*sin(fract(iTime*speed)*pi);\n    \n    //Sample texture with offset for chrome ab\n    col.r = texture(iChannel0,uv+ca).r;\n    col.g = texture(iChannel0,uv).g;\n    col.b = texture(iChannel0,uv-ca).b;\n    \n    col+=vec3(0.1);\n    \n    fragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(uv) texture(iChannel0,(uv)/iResolution.xy).xyz\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x) - (x)*0.5)\nvoid mainImage( out vec4 fragColor, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    float t=iTime*speed;\n    //t = (floor(iTime*60.0)/60.0)*speed; //Testing how it looks at 60fps\n    vec2 uv = (U-0.5*R.xy)/R.y; \n    vec3 col = vec3(0);\n    \n    float aa = 1.0/R.y; //aa constant based on resolution\n    \n    float wdth = 0.011;//cross size (nice value to play with)\n    float lngth = wdth*9.0;//cross length\n    \n    //Warp edges of screen \n    float screenWarp = 1.0+pow(length(uv),10.0)*0.3;\n    uv*=screenWarp;\n    aa*=screenWarp;\n    \n    //domain repitition IDs and size\n    float rep = lngth*2.5;\n    vec2 id = floor(uv/rep);\n    \n    //4 cycle uv shifting based on ID\n    float cycle = floor(mod(t,4.0));\n    float smoothTime = smoothstep(0.0,1.0,fract(t))+floor(t);\n    if(cycle == 0.0)uv.x+=(id.y+2.0)*rep*smoothTime;\n    if(cycle == 1.0)uv.y+=(id.x+4.0)*rep*smoothTime;\n    if(cycle == 2.0)uv.x+=(id.y-1.0)*rep*smoothTime;\n    if(cycle == 3.0)uv.y+=(id.x-3.0)*rep*smoothTime;\n    \n    //Infinite crosses\n    uv = pmod(uv,rep);\n\n    //Rotate crosses but alternate direction every other time\n    uv*=rot(smoothTime*pi*sign(sin(t*pi)));\n\n    //Making 2 lines to form a cross\n    float crs = smoothstep(wdth+aa,wdth-aa,abs(uv.x));\n    crs = max(crs,smoothstep(wdth+aa,wdth-aa,abs(uv.y)));\n    \n    //cutting it after a certain distance from center\n    float dist = max(abs(uv.x),abs(uv.y));\n    crs*=smoothstep(lngth+aa,lngth-aa,dist);\n    \n    //Stack this frame with the previous for motion blur \n    //It's perhaps unrealistcally high but I like the effect\n    col=T(U)*0.75 + vec3(crs);\n   \n    col = clamp(col,0.0,1.0);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.1415926535\n#define speed 0.85",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}