{
    "Shader": {
        "info": {
            "date": "1554236628",
            "description": "kerning,2tap,4tap,interval,optimization,mod,fract,integral,hash,polynom,analysis,euler,euclid,calculus,polynomial,set\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3s2Szy",
            "likes": 3,
            "name": "4tap kerning for euler & euclid",
            "published": 3,
            "tags": [
                "mod",
                "optimization",
                "fract",
                "integral",
                "set",
                "hash",
                "polynomial",
                "analysis",
                "euler",
                "interval",
                "euclid",
                "calculus",
                "polynom",
                "kerning",
                "2tap",
                "4tap"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "vec4 iMouseZwFix(vec4 m,bool NewCoke\n ){if(m.z>0.){ //while mouse down\n    if(m.w>0.)return m;//mouse was clicked in THIS     iFrame \n    else m.w=-m.w      //mosue was clicked in previous iFrame\n    //remember, MouseDrag advances the iFrame Count, even while paused !!\n ;}else{if(!NewCoke||m.w>0.)return m.xyxy; //OPTIONAL onMouseUp (fold or whatever)\n    m.zw=-m.zw;}\n  return m;}\n\n/* start.Head_UI:\n\nyou may want to pause time\nyou may want to remove the line; //#define noNoise\nyou may want to do; #define ViewSvivel  //to rotate swap .x and .y of the view.\n\nMouse sets.xyzw coefficients, as a simple way to degine a continuous curve\nMouse.x sets cubic    ==cubic         change over x\nMouse.y sets null     ==baseline      height.y at x=0;\nMouse.z sets linear   ==linear        change\nMouse.w sets quadratic==quadratic a*a change\n*/\n\n//named [euler and euclid] for a fictional argument about infinitessimals\n//this is not intended as graph plotter, though it can be used as a bad one\n//this explores 2tap and 4tap of boxes along time.x, of different height.y\n//this is intended to draw glyphs, that are composed of up to 3 combined note-symbols\n//it is only slighly trickier in its .y scaling than its parent, that does circles\n//and it extends his parent to optional 4tap-ping\n\n/* start.Head:hash_for_Euler+Euclid\nkerning,2tap,4tap,interval,optimization,mod,fract,integral,hash,polynom,analysis,euler,euclid,calculus,polynomial,set\n\nparent     : https://www.shadertoy.com/view/MlscWn\ngrandfather: https://www.shadertoy.com/view/4llcWn\ngrandmother: https://www.shadertoy.com/view/Xtscz7\n replaced a hash with a Polynomial_3rd_deg,then mixed the hash back in.\n*/\n\n/* end__.Head_UI\n   start.Manual\n/*\n\nFor hashed bands of [bounding volumes] to be filled with dots, moons, noteGlyphs\nthis variant one makes boxes, for sake of simplicity\n\nBy using multi-tapping along one domain, this turns any y=f(x)curve(including HASH,noise)into a dotted/boxed line.\n of any(homogeneous)period.x,interval.x \n WITHOUT A LOOP,by using fract()\np4()returns y=f(x)where f(x)is a (general) cubic polynomial.\n\nThis generalization blurs some lines between analysis,hashes and RNG.LCG.PCG\n ==Random/Linear/Permuted Number/Congruential/Congruential Generator\nThis makes me wonder what loops can be converted into single passes with fract()\n And what the constrains to types of loops are that can be turned to fract().\n And when it is worth it,and when not.\n\nthis still only works for a regular interval.x\n, needs a piececise bijection (+inverse) to tretch some parts of this regular interval into an irregular interval\n- this would then do non-monospace-glyph kerning\n\nThe gradient is good within the mod()interval,\nJust make sure that the visible parts(dots)are within boundingVolume==interval==[i]\nthis safe zone is shown as [c.xy] boxes.\nc.w goes outside of this bound, chich is mostly fine, as long as it implies c0-continuity of its higher context.\nLeonard Euler: The best inverval is [i]==0;\n...\n*/\n\n/* end__.Manual\n   start.Manual.Parameters\n*/\n//2tap (or 4tap) along 1 domain.x for overlapping notes\n//4tap is often uneccessary, but a reasonable upper bound for opengl vec4 types.\n#define do4taps\n//with [do4taps], this is not too different from a [fibonacci sphere]\n\n#define noNoise\n\n//sub-pixel blur\n#define bokeh 14./min(iResolution.x,iResolution.y)\n\n//swivel view,make .y horizontal,more horizontal ScreenSpace for higher exponents.\n//#define ViewSvivel\n\n//with intervals, we always have the near-asymptotic case of invervals being too close to a length of 0.\n//this then divides by 0, or by a very small number.\n//we have various ways to envelope this tobe more worksafe:\n\n//  set period,interval==[i]~0,not just VERY small,but actually divide by 0.\n//   Just to screw with(or implement basiccalculus)analysis on a fundamental level!\n//   TestDivideByZeroCase==0 will calculate;.0*vec2(fract(a/.0),floor(a/.0));\n//  Effects of settings depend on implementation:\n//     Leonard Euler : ==0 This is fine,I define this as being fine, as long as your function is c0 continuous!\n//fract(Congruental Generator): ==0 ; No it is not fine! Null-State equals death!\n//    Low IEEE precision: ==1 ; Where is my hash! Screw you,all of you!\n//  Heuristic large epsilon: ==2 ;Whatever,this is as close as we can get!\n//    Euclidean Unit circle: ==-1 ;Null-State-death only affects me tangentially\n#define TestDivideByZeroCase -1\n\n//control speed of time,to make time static or negative.\n#define TimeS (iTime-1.)\n//-1. offsetmakes a better thumbnail for the first frame\n//-1. also offsets from [the initial VOID-state]:\n// Because Shadertoy has the PATHETIC error that iTime and iGlobalTime are not initialized.\n// iTime and iGlobalTime are initially ==NullPointer!=0. \n// This confuses many webgl implementations,eg: when using i=cos(acos(-1.)+iTime);\n// cos(acos(-1.)+0.)==-1. is fine.\n//(NullPointer +0.)!=0. confuses many implementations. ->black screen on iTime==0.\n\n\n/* end__.Manual.Parameters\n   start.Lib.Frame.8 (reduced,as this is a simple (mostly 1d) demo)\n//this is based on a 2017-ish library.\n*/\n//  HasMix linear interpolates between a hasn and a PolynomialWithExponent3\n#define MixHashPoly3 u5(cos(TimeS*0.61))\n//#define MixHashPoly3 .0\n\n\n//View.Frame\n#define fra(u)(u-.5*iResolution.xy)*ViewZoom/iResolution.y\n\n//2d zoom\n#define ViewZoom 6.\n//divide by/aa for hairline drawing and sharp smoothstep()\n#define Aa (min(iResolution.x,iResolution.y)/ViewZoom)\n#define fra(u)(u-.5*iResolution.xy)*ViewZoom/iResolution.y//usually first function of mainImage(),not typecast.\n\n\n//library of often used functions: //ounting,index starts at 0!\n#define v0 float\n#define v1 vec2\n#define v2 vec3\n#define v3 vec4\n//triangle wave //euclidean grid\n#define tri(a)abs(u2(fract(a)))\n#define grid(a)mav(tri(a))\n#define u5(a) ((a)*.5+.5)\nv0 sat2(v0 a,v1 m){a=.5*(sign(a)+m.x)*a+m.y;a=(sign(2.-a)+1.)*(a-2.)+2.;return a*.5;}\n#define dd(a)dot(a,a)\n//perpendicular ==90deg rotation\nv1 perp(v1 a){return v1(-a.y,a.x);}\n//---trigonometry,rotations and(distance to)Quadratic functions.\n//(distance to quadratic is a cubic with less than 2 intersections==roots)\n#define cs(a)vec2(cos(a),sin(a))\n//mirror p at half rotated axis==cheap SINGLE 2d rotation.\n#define rs(r)mat2(sin(r+vec4(1,0,0,-1)*asin(1.)))\n//golden ratios are the best factors for hashes because;phi.xy-1.=1/phi.xy\n\n#define hs vec4(1031,.1030,.0973,.1099)\nv0 h11(v0 p){\n #ifdef noNoise \n  return 0.;//no hash, its just noisy\n #endif\n v2 f=fract(v2(p)*hs.y);f+=dot(f,f.yzx+19.19);\n return fract((f.x+f.y)*f.z);}\n \nv0 p3(v0 a,v3 m//eval polynomial a=.x return .y;  [m]=coefficients\n){//return m.x+a*m.y+a*a*m.z+a*a*a*m.w;//lazy,worst\n //return dot(vec4(1),m*vec4(1.,a*vec3(1,a*vec2(1.,a))));//overly explicit vector processor\n return dot(vec4(1),m*vec4(1.,a,a*a,a*a*a));//explicit vector processor\n return m.x+a*(m.y+a*(m.z+a* m.w));//explixit MAD()(better precision)\n ;}//#define p3(u,f)(f.x+u*f.y+(u*u)*f.z+(u*u*u)*f.w)\n\n//a mix(interpolate between)a polynom.y and a hash.y\nfloat ph(float a,vec4 m){return mix(h11(a),p3(a,m),MixHashPoly3);}\n\n//assert a=abs(a)\n#define boxN(a,b) max(a,abs(b))\n\nvoid mainImage(out vec4 O,in vec2 U\n){vec4 mouse=iMouseZwFix(iMouse,true)\n ;vec2 u =fra(U);vec4 m=vec4(fra(mouse.xy),fra(mouse.zw))\n #ifdef ViewSvivel\n  ;u=u.yx;m=m.yxwz;//swivel view,use horizontal space to show higher exponentials.\n #endif\n ;float t=TimeS\n ;float i=u5(cos(acos(-1.)+t))\n //i=interval of dots,goes all the way to 0,maybe not on linux.\n //testing limited precision(of IEEE float)\n #if   TestDivideByZeroCase==0\n  ;i=.000000;\n #elif TestDivideByZeroCase==1 \n  ;i=.000001;\n #elif TestDivideByZeroCase==2\n  ;i=.000020;\n #endif\n ;vec2 x=i*vec2(fract(u.x/i),floor(u.x/i));//dividing by 0,or very small values,here.\n //and then multiplying by the same(asmall number).\n \n //m=vec4(-1);//static debug overwrite\n ;m.xyzw=m.ywzx;//swivel coefficients to something that makes more sense \n      // for mouse.xy inputs.\n ;vec4 a=vec4(ph(x.y,m),ph(x.y+i,m),ph(x.y-i,m),ph(x.y+i*2.,m))//position.y of \n ;a=u.y-a\n #ifdef do4taps\n  ;a=abs(a)+i //make slimmer than wide (brick shape)\n #else\n  ;a=abs(a)+i*(1.-1./4) //make slimmer than wide (brick shape)\n #endif\n #if 1\n  //below is the 2tap\n  ;float f=min(boxN(a.x,x.x) //halfDot on the left  side of a period.\n               ,boxN(a.y,x.x-i));//halfDot on the right side of a period.\n  //above is 2tap, below is +2taps:\n  #ifdef do4taps\n   ;f=min(f,boxN(a.z,x.x+i))\n   ;f=min(f,boxN(a.w,x.x-i*2.))\n   ;i*=2.//optionally we can nor double note didth\n  #endif\n #else\n  //same as above, but crunched (always does 4tap)\n  ;vec4 n=x.x-vec4(0,1,-1,2)*i\n  ;n=boxN(a,n)\n  ;float f=min(min(n.x,n.y),min(n.z,n.w))//min of 4 distances\n  ;i*=2.\n #endif\n ;vec4 c=vec4(0)\n ;c.x=smoothstep(bokeh,-bokeh,abs(f-i+bokeh*2.)-bokeh)//red shows a box-outline of [safe space]\n ;c.y=smoothstep(bokeh,-bokeh,   (f-i+bokeh*2.)-bokeh)//green is red, but filled in\n //red and green scale by *i, which can scale the size (close to) 0.\n ;c.w=smoothstep(bokeh,-bokeh,   (f  +bokeh*2.)-bokeh-.5*i-.2)//yellow has some minimum tickness\n  ;c.z=fract(f)//blue is base field (f), without scaling\n  //;c=mix(c,c.xxxx,u5(sin(iTime*acos(-1.))));//oscillate between showing;c.x;or;c\n ;c.rg=mix(c.rg,c.aa,.5)//mix a as yellow;\n ;O=vec4(c.xyz,1);}\n/* End__.Main\n   Start.Bisymmetry.4\n*/\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}