{
    "Shader": {
        "info": {
            "date": "1466337680",
            "description": "As warm up for July competition I rewritten my shader done for the sig15 and it should now works but I wonder how improve it in a performance point of view and looking forward for tips and advices.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dKSWG",
            "likes": 14,
            "name": "[SIG15] Furyroad2",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Makio64",
            "viewed": 1245
        },
        "renderpass": [
            {
                "code": "/*\n\t  _______  _______  ______     _______  _______\n\t(       )(  ___  )(  __  \\   (       )(  ___  )|\\     /|\n\t| () () || (   ) || (  \\  )  | () () || (   ) |( \\   / )\n\t| || || || (___) || |   ) |  | || || || (___) | \\ (_) /\n\t| |(_)| ||  ___  || |   | |  | |(_)| ||  ___  |  ) _ (\n\t| |   | || (   ) || |   ) |  | |   | || (   ) | / ( ) \\\n\t| )   ( || )   ( || (__/  )  | )   ( || )   ( |( /   \\ )\n\t|/     \\||/     \\|(______/   |/     \\||/     \\||/     \\|\n\n*/\n\n// SIG2015 : Mad Max Fury Road\n// By David Ronai / @Makio64\n\n//------------------------------------------------------------------ VISUAL QUALITY\n#define POSTPROCESS\n//#define DUST\n#define RAYMARCHING_STEP 36\n\n//------------------------------------------------------------------ DEBUG\n// #define RENDER_DEPTH\n// #define RENDER_NORMAL\n// #define RENDER_AO\n\n//------------------------------------------------------------------ MATERIALS\n\nprecision lowp float;\n\nvec3 material = vec3(1.);\nvec3 tmpMaterial = vec3(1.);\nbool isDone = false;\n\nconst vec3 wheelColor = vec3(.4,.36,.036);\nconst vec3 truckColor = vec3(.8,.72,.48);\n\nvoid setMaterial(inout vec3 mat, in vec3 color1, in vec3 color2, in float d1, in float d2){\n\tif(isDone){return;}\n\tmat = mix(color1,color2,step(0.,d1-d2));\n}\n//------------------------------------------------------------------  BASIC & SIGNED PRIMITIVES\n\nconst float PI = 3.14159265359;\n#define MOD2 vec2(3.07965, 7.4235)\n#define MOD3 vec3(3.07965, 7.1235, 4.998784)\nfloat sgn(float x) { return (x<0.)?-1.:1.; }\nvec2 sgn(vec2 v) { return vec2((v.x<0.)?-1.:1., (v.y<0.)?-1.:1.); }\nfloat square (float x) { return x*x; }\nvec2 square (vec2 x) { return x*x; }\nvec3 square (vec3 x) { return x*x; }\nfloat lengthSqr(vec3 x) { return dot(x, x); }\nfloat Hash11( float n ){ return fract(sin(n)*1751.5453); }\nfloat Hash12(vec2 p) {\n\tp  = fract(p / MOD2);\n\tp += dot(p.xy, p.yx+19.19);\n\treturn fract(p.x * p.y);\n}\nvec2 Hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) / MOD3);\n\tp3 += dot(p3.zxy, p3.yxz+19.19);\n\treturn fract(vec2(p3.x * p3.y, p3.z*p3.x));\n}\nfloat Hash21( float p ) {\n\tvec2 p2 = fract(vec2(p) * MOD2);\n\tp2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y);\n}\nfloat Hash33(vec3 p) {\n\tp  = fract(p * MOD3);\n\tp += dot(p.xyz, p.yzx + 19.19);\n\treturn fract(p.x * p.y * p.z);\n}\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\nfloat opS( float a, float b ) { return max( a, -b ); }\nfloat fCheapBox(vec3 p, vec3 b) { return vmax(abs(p) - b);}\nvoid pR(inout vec2 p, float a) { p = cos(a)*p + sin(a)*vec2(p.y, -p.x); }\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\nfloat fOpUnionRound(float a, float b, float r) {\n\tlowp vec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\nfloat pMirror (inout float p, float dist) {\n\tlowp float s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tlowp float halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n//------------------------------------------------------------------ NOISES\n\n#define X .211324865405187\n#define Y .36602540378443\nvec3 permute(in vec3 x) { return mod( x*x*34.+x, 289.); }\nfloat snoise(in vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i,\n       j = step(x0.yx, x0),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n\nfloat nse3d(in vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture(iChannel1, (uv + 0.5) / 256.0, -100.0).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\nfloat fbm(vec3 p)\n{\n\tvec3 q = p;\n\tp += (nse3d(p * 3.0) - 0.5) * 0.3;\n\tfloat mtn = iTime * 0.15;\n\tfloat v = 0.0;\n\tfloat fq = 1.0, am = 0.5;\n\tfor(int i = 0; i < 6; i++)\n\t{\n\t\tv += nse3d(p * fq + mtn * fq) * am;\n\t\tfq *= 2.0;\n\t\tam *= 0.5;\n\t}\n\treturn v;\n}\n\n//------------------------------------------------------------------ VEHICLES\n\nfloat sdWheel( vec3 p, float height ) {\n\tfloat d = length(p.xy)-1.;\n\td = max(d, abs(p.z) - height);\n\tpR(p.xy,iTime*-4.);\n\tpModPolar(p.xy,16.);\n\tp.x -= 1.;\n\tfloat d2 = length(p.xy*1.1)-.15;\n\td2 = max(d2, abs(p.z) - height);\n\treturn opS(d,d2);\n}\n\nfloat sdTruck( in vec3 p ){\n\n\t//cockpit\n\tvec3 q = p - vec3(0.,0.5,0.);\n\tfloat d = fCheapBox(q, vec3(2.,1.7,2.) );\n\n\t//Base of cockpit\n\tq = p-vec3(1.,0.,0.);\n\tpR(q.xy,-.1);\n\td = min( d, fCheapBox(q, vec3(4.,1.3,1.6) ));\n\n\t// TODO : made it follow the truck with a easing\n\t//citern\n\tq = p-vec3(-9.,1.,0.);\n\tpR(q.xy,(1.57) );\n\td = min( d, fCylinder(q,2.3,6.));\n\n\t// Wheels\n\tq = p - vec3(-7.,-1.5,0.);\n\tfloat s = pMirror(q.x, 6.);\n\tq.x*=s;\n\tpModInterval1(q.x, 2.3, 0., 2.);\n\tfloat d2 = sdWheel(q,2.3);\n\n\t// Details\n\tq = p;\n\tpR(q.xy,0.4);\n\tq = q-vec3(-1.,2.1,0.);\n\tpMirror(q.z, 2.);\n\tpMirror(q.x, .2);\n\td = min(d, fCylinder(q, 0.2,1.3 ));\n\n\tsetMaterial(tmpMaterial,truckColor,wheelColor,d,d2);\n\td = min(d,d2);\n\treturn d;\n}\n\nfloat sdCar1( in vec3 p ){\n\tp/=0.8;\n\n\t// cockpit\n\tvec3 q = p-vec3(0.,1.3,0.);\n\tpR(q.xy,.05);\n\tfloat d = fCheapBox(q, vec3(2.,.5,1.4) );\n\n\t// Cutting the front of the cockpit\n\tq = p-vec3(3.5,0.,0.);\n\tpR(q.xy,-0.9);\n\td = opS(d,fCheapBox(q, vec3(3.5,.7,2.) ));\n\n\t// Base of the car\n\tq = p-vec3(1.,0.,0.);\n\tpR( q.xy, -0.05 );\n\td = min(d,fCheapBox(q, vec3(4.5,.7,1.8) ));\n\n\t// Cutting front of the car\n\tq = p-vec3(6.2,0.,0.);\n\tpR(q.xy,-.9);\n\td = opS(d, fCheapBox(q, vec3(4.,.7,3.) ));\n\n\t// Front motor\n\tq = p - vec3(3.,0.9,0.);\n\td = min( d, fCheapBox(q, vec3(1.,.2,0.8) ));\n\n\t// Wheels\n\tq = p - vec3(1.,-0.5,0.);\n\tq.x *= pMirror(q.x,2.8);\n\tpMirror(q.z,2.);\n\tfloat d2 = sdWheel(q, .5);\n\tsetMaterial(tmpMaterial,truckColor,wheelColor,d,d2);\n\treturn min(d,d2);\n}\n\nfloat sdCar2( in vec3 p){\n\t//cockpit\n\tp/=0.85;\n\tvec3 q = p - vec3(0.,.8,0.);\n\tpR(q.xy, -0.08);\n\tfloat d = fCheapBox(q, vec3(1.3,.3,1.05) );\n\n\t//Base of the car\n\tq = p - vec3(1.,0.,0.);\n\tpR(q.xy,-0.05);\n\td = min(d, fCheapBox(q, vec3(3.5,.4,1.2)));\n\n\t//Front motor\n\tq = p - vec3(3.,0.5,0.);\n\td = min( d, fCheapBox(q, vec3(1.,.2,0.8) ));\n\n\t// details\n\tq = p - vec3(-1.9, 1., 0.);\n\tpR(q.xy,1.1);\n\tpMirror(q.z,1.4);\n\td = min( d, fCylinder(q, 0.19,1.4 ));\n\n\t// Spears\n\tq = p - vec3(-2.5,2.8,1.3);\n\tpR(q.xy,.2);\n\tpR(q.zy,-.1);\n\td = min( d,fCylinder(q, 0.05,2.4) );\n\n\t// Spears 2\n\tq = p - vec3(-2.6,2.8,.3);\n\tpR(q.xy,.2);\n\tpR(q.zy,.1);\n\td = min( d,fCylinder(q, 0.05,3.4) );\n\n\t// Spears 3\n\tq = p - vec3(-2.5,2.8,-1.6);\n\tpR(q.xy,.26);\n\tpR(q.zy,.25);\n\td = min( d,fCylinder(q, 0.05,2.5) );\n\n\t// wheels\n\tq = p - vec3(1.1,-1.,0.);\n\tq.x *= pMirror(q.x,3.);\n\tpMirror(q.z,1.6);\n\tfloat d2 = sdWheel(q, .6);\n\tsetMaterial(tmpMaterial,truckColor,wheelColor,d,d2);\n\td = min(d,d2);\n\treturn min(d,d2);\n}\n\n//------------------------------------------------------------------ TORNADO\n\nfloat sdTornado( in vec3 p ){\n\tvec3 q = p;\n\tfloat radius = 0.2 + snoise(p.xz)*0.1;\n\tfloat angle = p.y*4.+iTime*20.;\n\n\tq.x += sin(angle)*radius;\n\tq.z += cos(angle)*radius;\n\n\t// curve the tornado\n\tq.x += sin(p.y/2.+iTime*2.5);\n\tq+=sin(p.x+snoise(p.yy+iTime)*9.+iTime)*0.25;\n\tfloat d = fCylinder(q, p.y/8.+4.,50.);\n\n\treturn d;\n}\n\nfloat sdTempest2( in vec3 p ){\n\tvec3 q = p;\n\tfloat x = pow(1.045,p.y*3.3)+20.;\n\tfloat d = fCylinder(q, x, 45.);\n\tq = p - vec3(0.,-1.5,0.);\n\td = min(d,fCylinder(q, 28.,.4));\n\td = min(d,fCheapBox(q,vec3(100.,.4,20.)));\n\td-=fbm(q/10.+iTime/1.5)*15.;\n\treturn d;\n}\n\n//------------------------------------------------------------------ MAP\nfloat map( in vec3 pos ) {\n\tfloat time = iTime;\n\n\t// // Car\n\tvec3 q = pos - vec3(5.+cos(time*2.)*2.5+cos(time/3.)*10.,1.2,12.+4.*sin(time/2.));\n\tfloat d = sdCar2(q);\n\tmaterial = tmpMaterial;\n\n\t// Truck\n\tq = pos - vec3(6.+cos(time*0.3)*9.,2.6,cos(time*0.9));\n\tfloat d2 = sdTruck(q);\n\tsetMaterial(tmpMaterial,material,tmpMaterial,d,d2);\n\tmaterial = tmpMaterial;\n\td = min(d,d2);\n\n\t// Car2\n\tq = pos - vec3(-4.+sin(time/2.)*7.,1.7,-10.-cos(time/3.)*2.);\n\td2 = sdCar1(q);\n\tsetMaterial(tmpMaterial,material,tmpMaterial,d,d2);\n\tmaterial = tmpMaterial;\n\td = min(d,d2);\n\n\t// ground\n\tsetMaterial(tmpMaterial,material,vec3(1.,0.,0.),d,pos.y);\n\td = min(pos.y,d);\n\n\t// Tornado\n\tq = pos+vec3(-40.,15.,-20.);\n\tpR(q.xz,time);\n\td2 = sdTornado(q);\n\tsetMaterial(tmpMaterial,material,vec3(0.,0.,1.),d,d2);\n\tmaterial = tmpMaterial;\n\td = fOpUnionRound(d,d2,7.);\n\n\td2 = sdTempest2(pos-vec3(15.,0.,-57.));\n\td = fOpUnionRound(d,d2,7.);\n\treturn d;\n}\n\n//------------------------------------------------------------------ RAYMARCHING / RENDER\nfloat fogmap(in vec3 p, in float d)\n{\n\tp.x += iTime*50.;\n\treturn nse3d(p*1.1)*.02;\n}\n\n#ifdef RENDER_DEPTH\nfloat castRay( in vec3 ro, in vec3 rd, inout float dust, inout float depth )\n#else\nfloat castRay( in vec3 ro, in vec3 rd, inout float dust )\n#endif\n{\n\tfloat t = 0.0;\n\tfloat res;\n\tfor( int i=0; i<RAYMARCHING_STEP; i++ )\n\t{\n\t\tvec3 pos = ro+rd*t;\n\t\tres = map( pos );\n\t\tif( pos.z>50. || res < 0.01 || t > 90. ) break;\n\t\tt += res;\n\n\t\t#ifdef RENDER_DEPTH\n\t\tdepth += 1./float(RAYMARCHING_STEP);\n\t\t#endif\n\n\t\t#ifdef DUST\n\t\tdust += fogmap(pos, t);\n\t\t#endif\n\t}\n\tisDone = true;\n\treturn t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tconst vec2 e = vec2(0.001,-0.001);\n\treturn normalize( e.xyy*map( pos + e.xyy ) +\n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) +\n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) +\n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nfloat hash( float n ){\n\treturn fract(sin(n)*3538.5453);\n}\n\nfloat calcAO( in vec3 p, in vec3 n, float maxDist, float falloff ){\n\tfloat ao = 0.0;\n\tconst int nbIte = 6;\n\tfor( int i=0; i<nbIte; i++ )\n\t{\n\t\tfloat l = hash(float(i))*maxDist;\n\t\tvec3 rd = n*l;\n\t\tao += (l - map( p + rd )) / pow(1.+l, falloff);\n\t}\n\treturn clamp( 1.-ao/float(nbIte), 0., 1.);\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv )\n{\n\tfloat dust = 0.0;\n\n\t#ifdef RENDER_DEPTH\n\tfloat depth = 0.;\n\tfloat t = castRay(ro,rd,dust,depth);\n\t#else\n\tfloat t = castRay(ro,rd,dust);\n\t#endif\n\n\t#ifdef RENDER_DEPTH\n\treturn vec3(depth/10.,depth/5.,depth);\n\t#endif\n\n\tvec3 pos = ro + t * rd;\n\tvec3 nor = calcNormal(pos);\n\n\t#ifdef RENDER_NORMAL\n\treturn nor;\n\t#endif\n\n\tfloat ao = calcAO(pos,nor,3.,2.);\n\t#ifdef RENDER_AO\n\treturn vec3(ao);\n\t#endif\n\n\tvec3 bgCol = vec3(fbm(pos/10.+iTime)+fbm(pos/3.+iTime)*.3)*vec3(.5,.2,.02);\n\tbgCol *= t/40.;\n\tbgCol += vec3((1.-uv.y+.4)*(1.-uv.x+.2))*1.5;\n\n\tvec2 groundUv = vec2(pos.x/200.+iTime*.5,pos.z/100.);\n\tvec3 groundCol = texture( iChannel0, groundUv, 0.0 ).rgb;\n\tgroundCol = groundCol*vec3(max(.4,(pos.x+18.)/15.))*vec3(.6,.3,0.02);\n\n\tvec3 col = material*ao*ao*dot(nor,vec3(.5+cos(iTime)*.2,.5,.5+cos(iTime/1.5)*.2))*(texture( iChannel0, pos.yy/vec2(5.,30.), 0.0 ).rgb*1.4)*(1.3+.3*sin(iTime*2.));\n\tcol = mix( groundCol, col, smoothstep(0., 2.+smoothstep(30., 60., t)*30., pos.y));\n\tcol = mix( col, bgCol, smoothstep(70., 100., t));\n\n\t#ifdef DUST\n\t\tvec3 dustCol = vec3(3.,3.,3.)*dust*vec3(smoothstep(0.01,5.,max(0.,12.-pos.y))*(1.-smoothstep(1.,20.,max(0.,12.-pos.y))));\n\t\tcol += mix(col,dustCol,dust);\n\t#endif\n\n\treturn col;\n}\n\n//------------------------------------------------------------------ POSTEFFECTS\n\n#ifdef POSTPROCESS\n\nvec3 bw( in vec3 col ) { return vec3(0.299*col.r + 0.587*col.g + 0.114*col.b); }\n\nvoid postEffects( inout vec3 col, in vec2 uv, in float time )\n{\n\t// vigneting\n\tcol *= 0.25+0.75*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.15 );\n\n\t// noise\n\tcol -= snoise((uv+time)*500.)*.1;\n\n\t// lightning\n\tfloat lightning = 0.0;\n\tfloat f = mod(time+1.5, 2.);\n\tif( f < .8){\n\t\tf = smoothstep(1., .0, f)* 1.5;\n\t\tlightning = mod(-time*(1.5-Hash21(time*.5)*.002), 1.0) * f*1.2;\n\t}\n\tcol = mix(col,bw(col+lightning),lightning);\n}\n#endif\n\n//------------------------------------------------------------------ CAMERA\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cu = normalize( cross(cw,vec3(sin(cr), cos(cr),0.0)) );\n\treturn mat3( cu, normalize( cross(cu,cw) ), cw );\n}\n\nvec3 orbit(float phi, float theta, float radius)\n{\n\treturn vec3(\n\t\tradius * sin( phi ) * cos( theta ),\n\t\tradius * cos( phi ),\n\t\tradius * sin( phi ) * sin( theta )\n\t);\n}\n\n//------------------------------------------------------------------ MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y /= iResolution.x/iResolution.y;\n\n    // Camera\n    float phi = 1.25;\n    float theta = 2.4+sin(iTime/2.)*1.3;\n    float radius = 30.+cos(iTime*.8)*5.;\n    //shaking\n    phi += +sin(iTime*123132.)*0.005;\n    theta += +sin(iTime*3132.)*0.005;\n    \n    \n\tvec3 ro = orbit(phi,theta,radius);\n\tmat3 ca = setCamera( ro, vec3(0.,10.,0.), 0. );\n\tvec3 rd = ca * normalize( vec3(2.*uv-1.,1.0) );\n\n\t// Raymarching\n\tvec3 color = render( ro, rd, uv );\n\n\t#ifdef POSTPROCESS\n\tpostEffects( color, uv, iTime );\n\t#endif\n\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}