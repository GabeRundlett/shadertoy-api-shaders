{
    "Shader": {
        "info": {
            "date": "1722453485",
            "description": "https://www.shadertoy.com/view/XsXXDH https://www.shadertoy.com/view/XlfcRj",
            "flags": 0,
            "hasliked": 0,
            "id": "XcSyRG",
            "likes": 0,
            "name": "twist remake ",
            "published": 3,
            "tags": [
                "twist"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265;\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\n#define N 16.0\n\n// Constants\n#define pi 3.14159265358979323846\n#define sin_60 0.8660254037844386\n#define rot_90 mat2(0.0, -1.0, 1.0, 0.0)\n\n// Hex directions\n#define hv_1 vec2(1.0, 0.0)\n#define hv_2 vec2(0.5, -sin_60)\n#define hv_3 vec2(0.5,  sin_60)\n\n// Mod directions 90 degrees to Hex directions\n#define mv_1 vec2(0.0, 1.0)\n#define mv_2 vec2(-sin_60, -0.5)\n#define mv_3 vec2( sin_60, -0.5)\n\nfloat d_hexagon(vec2 uv, float a){\n    return length(uv - hv_1*clamp( dot(uv, hv_1), -a, a) \n                     - hv_2*clamp( dot(uv, hv_2), -a, a) \n                     - hv_3*clamp( dot(uv, hv_3), -a, a) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv *= 1.5;\n\t\n    float blurAmount = -0.005 * 1080.0 / iResolution.y;\n    \n\tfloat period = 2.0;\n\tfloat time = -iTime / period;\n\ttime = mod(-time, 1.0);\n\ttime = smootheststep(0.0, 1.0, time);\n\tvec2 uv3 = 2.0*(fragCoord.xy / iResolution.xy) - 1.0;\n    uv3.x *= iResolution.x/iResolution.y;    \n    \n    // Global scaling and rotation transformation\n    float p_time = clamp(1.0 - 2.3*sin(iTime/3.0), 0.0, 4.0);\n    float scale_f = abs( N / (p_time + dot(uv,uv)) );\n    uv3*= scale_f; // scale_f = 5.0; // Try scale_f = 5.0;\n    float ct = cos(0.2*p_time); float st = sin(0.2*p_time);\n    uv3 *= mat2(ct, -st, st, ct);\n      \n    // Modding for repeated hexagons\n    uv3 = + mv_1 * mod(dot(uv3, mv_1), 2.0)\n         + mv_2 * mod(dot(uv3, mv_2), 2.0) \n         + mv_3 * mod(dot(uv3, mv_3), 2.0);\n    \n    //uv*= rot_90; // uncomment to get stars\n    float size = 0.5 + 0.0025*sin(15.0*iTime);\n    float dist = d_hexagon(uv+uv3, size);\n\n\t\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\tfor (int i = 0; i < 5; i++) {\n\t\tfloat n = float(i)+dist;\n\t\tfloat size = 1.0 - n / 3.+dist;\n\t\tfloat rotateAmount = (n * 1.5 + .25) * PI * 2.0; \n\t\tfragColor.rgb = mix(fragColor.rgb, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * time), size)));\n\t\tfloat blackOffset = mix(1.0 / 1.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\tfragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * time), size - blackOffset)));\n    }\n    \n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}