{
    "Shader": {
        "info": {
            "date": "1612269891",
            "description": "Creating the evil moving snake",
            "flags": 0,
            "hasliked": 0,
            "id": "wtdfz8",
            "likes": 2,
            "name": "Serpents ",
            "published": 3,
            "tags": [
                "noise",
                "texture",
                "evil",
                "snake",
                "truchet",
                "flow",
                "floor",
                "mask",
                "angle",
                "fract",
                "width"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "// created by Yiting Liu 2021\n// www.yitingliu.com\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(234.34,435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n\n\n\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col =vec3(0);\n    \n    uv*=4.;\n    uv+=iTime*0.5;\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);//checking each box \n    \n    float n = Hash21(id);// random number between 0 to 1 \n    \n    float width =0.3*UV.y;\n    \n    if(n<.5) gv.x*=-1.;//reverse tiling depending on the random num\n    float d = abs(abs(gv.x+gv.y));\n    vec2 cUv =gv-0.5*sign(gv.x+gv.y+0.001); // give -PI to PI \n    d = length(cUv);\n    // sign returns 1 when x is positive, -1 when x is negative, 0 when x is 0\n    \n    float mask = smoothstep(.01,-.01,abs(d-.5)-width);\n    float angle = atan(cUv.x, cUv.y);\n    float checker = mod(id.x+id.y,2.)*2.-1.;\n    float flow = sin( iTime+checker*angle*10.);\n    //col+=flow*mask;// checker allows it to flow consistently - works with quart truchet\n    //col+=n;\n    \n    float x = fract(checker*angle/1.57-iTime*0.5); //divide by half PI - get the range from 0 to 1 by using fract \n    float y = (d-(.5-width))/(2.*width);\n    y = abs(y-.5)*2.;\n    vec2 tUv = vec2(x,y);\n    col.rb+=1.-tUv/mask;\n    \n    // apply any texture\n    col *=texture(iChannel0,tUv).rgb*mask;\n\n    col +=texture(iChannel1,tUv).rgb-mask;\n    col +=1.-tUv.y;\n    //if(gv.x>.48||gv.y>.48) col=vec3(1,0,0);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}