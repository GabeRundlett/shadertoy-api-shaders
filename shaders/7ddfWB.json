{
    "Shader": {
        "info": {
            "date": "1657150013",
            "description": "Strandbeest leg mechanism. My first shader in a while!",
            "flags": 0,
            "hasliked": 0,
            "id": "7ddfWB",
            "likes": 32,
            "name": "Jansen's Linkage",
            "published": 3,
            "tags": [
                "automaton",
                "strandbeest",
                "leg",
                "linkage",
                "theojansen"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "// Reference: https://en.wikipedia.org/wiki/Jansen%27s_linkage\n\n#define PI 3.1415926536\n#define TAU 6.2831853072\n\nvec2 solveJoint(in vec2 a, in vec2 b, in float ra, in float rb, in float config) {\n    vec2 ba = b - a;\n    float d2 = dot(ba, ba), d = sqrt(d2);\n    float offs = (d2 + ra * ra - rb * rb) / (2.0 * ra * d);\n    return a + (ba * offs + vec2(-ba.y, ba.x) * sqrt(1.0 - offs * offs) * config) * ra / d;\n}\n\nmat2 Rotate2D(in float angle) {\n    float co = cos(angle), si = sin(angle);\n    return mat2(co, si, -si, co);\n}\n\nfloat sdLine(in vec2 a, in vec2 b, in vec2 p) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdGear(in float r, in float h, in float n, in vec2 uv) {\n    float teeth = (0.5 + 0.5 * cos(atan(uv.y, uv.x) * n)) * h;\n    return length(uv) - r - teeth;\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 200.0;\n    float unit = 400.0 / iResolution.y;\n    vec3 color = vec3(0.0, 0.0, 0.3);\n\n    // Moving track with black and yellow stripes\n    vec2 trackUv = uv;\n    trackUv += vec2(iTime * 60.0, 84.0);\n    trackUv.x += trackUv.y;\n    vec3 stripes = vec3(1.0, 1.0, 0.0) * mod(floor(trackUv.x / 20.0), 2.0);\n    drawSDF(trackUv.y, stripes);\n\n    // Driver gear\n    vec2 driverGearUv = uv - vec2(0.0, 7.8);\n    float motorAngle = iTime * 5.0;\n    driverGearUv *= Rotate2D(motorAngle + TAU / 20.0);\n    drawSDF(sdGear(9.0, 4.0, 10.0, driverGearUv), vec3(0.3));\n    drawSDF(length(uv - vec2(0.0, 7.8)) - 2.0, vec3(0.0));\n\n    float crankAngle = motorAngle / 2.0;\n    if (uv.x < 0.0) crankAngle = PI - crankAngle; // Offset back leg\n    uv.x = 75.0 - abs(uv.x);\n\n    // Crank gears (the ones moving the legs)\n    vec2 crankGearUv = uv - vec2(38.0, 7.8);\n    crankGearUv *= Rotate2D(crankAngle);\n    drawSDF(sdGear(23.0, 4.0, 20.0, crankGearUv), vec3(0.5));\n\n    vec2 crankShaft = vec2(38.0, 7.8);\n    vec2 crank = crankShaft + vec2(cos(crankAngle), sin(crankAngle)) * 15.0;\n    drawSDF(length(uv - crankShaft) - 2.0, vec3(0.0));\n\n    vec2 fixedPivot = vec2(0.0);\n    vec2 top = solveJoint(crank, fixedPivot, 50.0, 41.5, -1.0);\n    drawSDF(sdLine(crank, top, uv), vec3(1.0));\n    drawSDF(sdLine(top, fixedPivot, uv), vec3(1.0));\n\n    vec2 hangPivot = solveJoint(crank, fixedPivot, 61.9, 39.3, 1.0);\n    drawSDF(sdLine(crank, hangPivot, uv), vec3(1.0));\n    drawSDF(sdLine(fixedPivot, hangPivot, uv), vec3(1.0));\n\n    // Draw the main control point\n    drawSDF(length(uv - crank) - 2.0, vec3(0.0));\n\n    vec2 swingPivot = solveJoint(top, fixedPivot, 55.8, 40.1, -1.0);\n    drawSDF(sdLine(top, swingPivot, uv), vec3(1.0));\n    drawSDF(sdLine(fixedPivot, swingPivot, uv), vec3(1.0));\n\n    // Draw the fixed pivot\n    drawSDF(length(uv - fixedPivot) - 2.0, vec3(0.0));\n\n    vec2 knee = solveJoint(swingPivot, hangPivot, 39.4, 36.7, -1.0);\n    drawSDF(sdLine(swingPivot, knee, uv), vec3(1.0));\n    drawSDF(sdLine(knee, hangPivot, uv), vec3(1.0));\n\n    vec2 tip = solveJoint(hangPivot, knee, 49.0, 65.7, 1.0);\n    drawSDF(sdLine(hangPivot, tip, uv), vec3(1.0));\n    drawSDF(sdLine(knee, tip, uv), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}