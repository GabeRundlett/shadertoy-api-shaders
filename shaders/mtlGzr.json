{
    "Shader": {
        "info": {
            "date": "1671214935",
            "description": "Inspired by Cosmic by Xor: https://www.shadertoy.com/view/msjXRK\nI am a big fan of high saturated glowin colors.\nSo I really liked Cosmic by Xor.\nThis is my untweetable take on it :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mtlGzr",
            "likes": 24,
            "name": "Untweetable Cosmic ",
            "published": 3,
            "tags": [
                "2d",
                "saturation"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 661
        },
        "renderpass": [
            {
                "code": "// CC0: Untweetable Cosmic \n//  Inspired by Cosmic by Xor: https://www.shadertoy.com/view/msjXRK\n//  I am a big fan of high saturated glowin colors.\n//  So I really liked Cosmic by Xor.\n//  Making short shaders isn't part of my skill set but I was \n//  thinking I could maybe remove the need to loop for each ring.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n\n// We like the rings to interact with each other so create 4 \"frisbees\"\n// and add their colors together\nconst float overSample  = 4.0;\nconst float ringDistance= 0.075*overSample/4.0;\nconst float noOfRings   = 20.0*4.0/overSample;\nconst float glowFactor  = 0.05;\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan_approx(p.y, p.x));\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec3 glow(vec2 pp, float h) {\n  float hh = fract(h*8677.0);\n  float b = TAU*h+0.5*TIME*(hh > 0.5 ? 1.0 : -1.0);\n  float a = pp.y+b;\n  float d = max(abs(pp.x)-0.001, 0.00125);\n  return \n    (   smoothstep(0.667*ringDistance, 0.2*ringDistance, d)\n      * smoothstep(0.1, 1.0, cos(a))\n      * glowFactor\n      * ringDistance\n      / d\n    )\n    * (cos(a+b+vec3(0,1,2))+vec3(1.0))\n    ;\n}\n\nvec3 effect(vec2 p) {\n  p += -0.1;\n  // Didn't really understand how the original Cosmic produced the fake projection.\n  // Took part of the code and tinkered\n  p = (p*mat2(1,-1, 2, 2));\n  p += vec2(0.0, 0.33)*length(p);\n  vec2 pp = toPolar(p);\n\n  vec3 col = vec3(0.0);\n  float h = 1.0;\n  const float nr = 1.0/overSample;\n\n  for (float i = 0.0; i < overSample; ++i) {\n    vec2 ipp = pp;\n    ipp.x -= ringDistance*(nr*i);\n    float rn = mod1(ipp.x, ringDistance); \n    h = hash(rn+123.0*i);\n    col += glow(ipp, h)*step(rn, noOfRings);\n  }\n  \n  col += (0.01*vec3(1.0, 0.25, 0.0))/length(p);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}