{
    "Shader": {
        "info": {
            "date": "1514581297",
            "description": "A tribute to Phenomena - raytraced scene from 1991 Amiga demo \"Enigma\". Today in real-time inside your browser. Time goes fast.",
            "flags": 64,
            "hasliked": 0,
            "id": "4t2Bzh",
            "likes": 12,
            "name": "Enigma",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "demoscene",
                "spheres",
                "amiga",
                "enigma",
                "phenomena",
                "1991",
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "KK",
            "viewed": 1289
        },
        "renderpass": [
            {
                "code": "\nfloat sph(vec3 pos,float y)\n{\n\tpos.y -= y;\n\tpos.z += 3.0*sin((y/1.5+iTime*4.0-1.0)*0.5);\n\treturn length(pos)-1.0;\n}\n\nfloat sphs(vec3 pos)\n{\n\tpos.y -= iTime*(1.5*4.0);\n\tpos.z = abs(pos.z);\n    float s = 0.8;\n\treturn min(\n\t\tmin( sph(pos,floor(pos.y*s    )/s),\n\t\t     sph(pos,floor(pos.y*s+1.0)/s) ),1.0);\n}\n\nfloat FieldFn(vec3 pos)\n{\n\tfloat h = pos.z+0.5;\n\tpos.y -= iTime*6.0;\n\treturn min(\n\t\tmin( sph(pos,floor(pos.y    )),\n\t\t     sph(pos,floor(pos.y+1.0)) ),min(h,1.0));\n}\n\nvec4 fractal(vec2 cx)\n{\n\tcx.x += 0.1;\n\tcx.y += 0.1;\n\tvec2 z = cx;\n\tfloat cc = 1.0;\n\tfor(int i=0;i<22;i++)\n\t{\n\t\tvec2 z1;\n\t\tz1.x = z.x*z.x - z.y*z.y + cx.x;\n\t\tz1.y = 2.0*z.x*z.y + cx.y;\n\t\tz = z1;\n        if(dot(z,z)>4.0)\n        {\n            cc = float(i)/21.0;\n            break;\n        }\n\t\t//cc += clamp((dot(z,z)-4.0)*10.0,0.0,1.0)/21.0;\n\t}\n    if(cc>1.0-0.2) return vec4(0,0,0.1,0);\n    cc *= 2.5;\n    cc += 0.5;\n    cc /= 1.0+length(cx);\n    return vec4(cc,cc,cc*2.0,0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vpos = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tvpos.x *= iResolution.x/iResolution.y;\n\tvpos *= .8;\n\t\n    \n\tvec2 mpos = iMouse.xy / iResolution.xy*2. - 1.;\n\tvec3 front = normalize(vec3(-1.,-mpos.x,mpos.y-.5));\n\tvec3 pos = vec3(0,0,1.2)-front*6.0;\n    \n    \n\tfront = normalize(vec3(-1,-0.7,0));\n\tvec3 up = vec3(0,0,1);\n\tvec3 right = cross(up,front);\n\tpos = vec3(1,-2,1.2)-front*4.0;\n\t\n\tvec3 vdir = normalize(front + vpos.x*right + vpos.y*up);\n\tvec3 tdir = normalize(vdir);\n\tvec3 tpos = pos;\n\tfloat g = 0.0;\n\tvec4 c = vec4(0.0);\n\tfloat d, m=0.0;\n\tvec3 lpos = vec3(10,10,0);\n\n\tfor(int i=0;i<150;i++)\n\t{\n\t\tif(g>=1.0) break;\n\t\td = sphs(tpos);\n\t\tif(d<0.002) break;\n\t\ttpos += d*tdir;\n\t\tg += d*0.02;\n\t}\n\n\tif(d<0.002)\n\t{\n\t\tvec3 normal, ld = normalize(vec3(4,-2,4));\n\t\tnormal.x = sphs(tpos+vec3(0.01,0,0)) - d;\n\t\tnormal.y = sphs(tpos+vec3(0,0.01,0)) - d;\n\t\tnormal.z = sphs(tpos+vec3(0,0,0.01)) - d;\n\t\tnormal = normalize(normal);\n\t\tc = vec4(clamp(dot(normal,ld),0.0,1.0));\n\t\tc *= vec4(0.2,1,0.3,0.0);\n\t\tc += c.y*pow(clamp(dot(ld,reflect(tdir,normal)),0.0,1.0),64.0);\n\t}\n\tfloat a = 0.41*2.0*3.141593;\n\tfloat ss = sin(a);\n\tfloat cc = cos(a);\n\tif(tdir.z<0.0 && (d>=0.002 || tpos.z<0.0))\n\t{\n\t\tfloat t = -pos.z/tdir.z;\n\t\ttpos = pos + tdir*t;\n\t\ttpos.xy *= 0.3;\n\t\t//tpos.x += 6.0;\n\t\t//tpos.y += 13.5;\n\t\ttpos.xy *= 0.5;\n        tpos.x -= 0.3;\n\t\ttpos = vec3(tpos.x*cc-tpos.y*ss,tpos.y*cc+tpos.x*ss,tpos.z);\n\t\ttpos.x -= 0.7+0.65;\n\t\ttpos.y -= 0.27;\n\t\tc *= 0.3;\n\t\tc += fractal(tpos.xy);\n\t\tc += mix(vec4(1,0,0.5,0),vec4(0.0),pow(-tdir.z*2.0,0.1));\n\t}\n\telse if(d>=0.002)\n\t{\n\t\tc = mix(vec4(1,0,0,0),vec4(0,0,0.7,0),sqrt(tdir.z*1.5));\n\t}\n\n\t\n\tfragColor = floor(c*32.0)/32.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 12919,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/firefox-amigamusician/hyperbased"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}