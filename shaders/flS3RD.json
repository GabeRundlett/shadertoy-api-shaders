{
    "Shader": {
        "info": {
            "date": "1623406648",
            "description": "shorter version of my other gradient utility",
            "flags": 0,
            "hasliked": 0,
            "id": "flS3RD",
            "likes": 1,
            "name": "Gradient Utility 2",
            "published": 3,
            "tags": [
                "color",
                "gradient"
            ],
            "usePreview": 0,
            "username": "Krabcode",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "\nfloat map(float n, float start1, float stop1, float start2, float stop2){\n    return ((n-start1)/(stop1-start1))*(stop2-start2)+start2;\n}\n\nvec3 hexToRgb(int color)\n{\n    float rValue = float(color / 256 / 256);\n    float gValue = float(color / 256 - int(rValue * 256.0));\n    float bValue = float(color - int(rValue * 256.0 * 256.0) - int(gValue * 256.0));\n    return vec3(rValue / 255.0, gValue / 255.0, bValue / 255.0);\n}\n\nconst int COLORS_PER_GRADIENT = 5;\nvec3 gradientColorAt(vec4[COLORS_PER_GRADIENT] gradient, float pct){\n    pct = clamp(pct, 0., 1.);\n    for (int i = 0; i < COLORS_PER_GRADIENT-1; i++){\n        // find which two positions pct is between\n        if (gradient[i].a <= pct && gradient[i+1].a >= pct){\n            // normalize the position between the two closest color positions\n            float norm = map(pct, gradient[i].a, gradient[i+1].a, 0., 1.);\n            // mix the two neighbouring colors in the usual way\n            return mix(gradient[i].rgb, gradient[i+1].rgb, norm);\n        }\n    }\n    // throw red exception \n    return vec3(1, 0, 0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // https://colorhunt.co/\n    vec4[] gradient = vec4[](\n        vec4(hexToRgb(0xd9d9d9), 0.),\n        vec4(hexToRgb(0xe88a1a), 0.25),\n        vec4(hexToRgb(0xcf3030), 0.5),\n        vec4(hexToRgb(0x141414), 0.95),\n        vec4(vec3(0), 1.)\n    );\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = gradientColorAt(gradient, fract(uv.y + iTime));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}