{
    "Shader": {
        "info": {
            "date": "1677901420",
            "description": "Continuing experiments with procedural wood textures. Five different wood types are provided, but many more can be generated by playing with the various parameters hardcoded into the shader.\n\nPrevious shader: https://www.shadertoy.com/view/7tjBW3",
            "flags": 0,
            "hasliked": 0,
            "id": "dsdGWM",
            "likes": 5,
            "name": "Procedural wood textures v2",
            "published": 3,
            "tags": [
                "2d",
                "fbm",
                "wood",
                "proceduraltexture"
            ],
            "usePreview": 0,
            "username": "clauswilke",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "// Procedural wood textures v2\n// Written by Claus O. Wilke, 2023\n// Noise functions were adapted from code written by Inigo Quilez\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Building on earlier wood texture experiments: https://www.shadertoy.com/view/7tjBW3\n\n// Wood type: choose a number between 1 and 5\n#define WOOD_TYPE 5\n\nfloat hash(in vec2 p) {\n    ivec2 texp = ivec2(\n        int(mod(p.x, 256.)),\n        int(mod(p.y, 256.))\n    );\n    // return number between -1 and 1\n    return -1.0 + 2.0*texelFetch(iChannel0, texp, 0).x;\n}\n\nvec2 hash2(in vec2 p)\n{\n    // return numbers between -1 and 1\n    return vec2(hash(p), hash(p + vec2(32., 18.)));\n}\n\n\n// value noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise1(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\t\n\tvec2 u = f*f*(3.0 - 2.0*f);\n\n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// gradient noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/XdXGW8\n\nfloat noise2(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    #if 1\n    // quintic smoothstep\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    #else\n    // cubic smoothstep\n    vec2 u = f*f*(3.0-2.0*f);\n    #endif    \n\n    return mix(mix(dot(hash2(i + vec2(0.0, 0.0)), f - vec2(0.0, 0.0)), \n                   dot(hash2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0)), u.x),\n               mix(dot(hash2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0)), \n                   dot(hash2(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\n\n// simplex noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/Msf3WH\nfloat noise3(in vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor(p + (p.x+p.y)*K1);\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max(0.5-vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n\tvec3  n = h*h*h*h*vec3(dot(a, hash2(i+0.0)), dot(b, hash2(i+o)), dot(c, hash2(i+1.0)));\n    return dot(n, vec3(70.0));\n}\n\nfloat fbm1(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise1(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise1(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nfloat fbm2(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise2(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise2(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nfloat fbm3(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise3(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise3(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\n// red yellow\nvec3 stripescol1(in float f)\n{\n    return .47 + .4 * sin(1.3*f*f + vec3(2.3) + vec3(0., .55, 1.4));\n}\n\n// deep red\nvec3 stripescol2(in float f)\n{\n    return .5 + .4 * sin(1.4*f*f + vec3(2.5) + vec3(0., .6, .9));\n}\n\n// light yellow\nvec3 stripescol3(in float f)\n{\n    return .7 + .3 * sin(1.4*f*f + vec3(1.7) + vec3(0., .5, .8));\n}\n\nvec3 discoloration(in vec2 uv)\n{\n    float i = floor(uv.x); // panel index\n    vec2 p = .2*vec2(2., 1.)*uv + i * vec2(234., 123.);\n    float f = fbm2(p, 2);\n    return .5 + .5 * sin(2.3*f + vec3(1.4) + vec3(0., .4, 1.));\n}\n\nfloat finegrain(in vec2 uv, in float tr)\n{\n    vec2 p = 3.*vec2(50., 4.)*uv;\n    float f = fbm3(0.5*p, 4) - 0.2*tr;\n    return 1. - .4*f*(1. - smoothstep(.35, .45, f));\n}\n\nfloat panelgap(in vec2 uv)\n{\n    \n    float i = floor(uv.x);\n    float s = fract(uv.x) - 0.5;\n    \n    float gapw = .002;\n    \n    float w = smoothstep(.5, .5 - gapw, abs(s));\n    float f = fbm3(uv + i*vec2(15, 27), 0);\n    w = mix(sqrt(f), 1., w);\n    \n    return w;\n}\n\nfloat treerings1(in vec2 p, in float a, in float b, in float c, in float d)\n{\n    float i = floor(p.x);\n    float x = fract(p.x) - 0.5;\n    \n    float n1 = 0.5*noise1(5.*vec2(x, p.y) + vec2(10.*i, 0)) + 0.5;\n    float n2 = 0.5*noise1(0.4*vec2(0, p.y) + vec2(0, 5.*i)) + 0.5;\n    float f = .5 + 0.5*cos(a*x*x + b*n1 + c*p.y + d*n2);\n    f *= f; \n    return f;\n}\n\nfloat treerings2(in vec2 p, in float a, in float b, in float c, in float d)\n{\n    float i = floor(p.x);\n    float x = fract(p.x);\n    \n    float n1 = 0.5*noise1(5.*vec2(x, p.y) + vec2(10.*i, 0)) + 0.5;\n    float n2 = 0.5*noise2(0.7*vec2(4.*x, p.y) + vec2(0, 5.*i)) + 0.5;\n    float f = .5 + 0.5*cos(a*x + b*n1 + c*p.y + d*n2);\n    f *= f; \n    return f;\n}\n\nvec3 wood1(in vec2 p, in float lightness, in float discolor)\n{\n    float tr = treerings1(p, 160., 1.5, 10., 3.);\n    vec3 col = stripescol1(0.3 + 0.3*tr);\n    col *= finegrain(p, tr);\n    col *= mix(vec3(lightness), discoloration(p), discolor);\n    //col *= panelgap(p);\n    return col;\n}\n\nvec3 wood2(in vec2 p, in float lightness, in float discolor)\n{\n    float tr = treerings2(p, 120., 4., 10., 60.);\n    vec3 col = stripescol3(0.2 + 0.5*tr);\n    col *= finegrain(p, tr);\n    col *= mix(vec3(lightness), discoloration(p), discolor);\n    col *= panelgap(p);\n    return col;\n}\n\nvec3 wood4(in vec2 p, in float lightness, in float discolor)\n{\n    float tr = treerings2(p, 100., 1., 2., 130.);\n    vec3 col = stripescol2(0. + 0.7*tr);\n    col *= finegrain(p, tr);\n    col *= mix(vec3(lightness), discoloration(p), discolor);\n    col *= panelgap(p);\n    return col;\n}\n\nvec3 wood5(in vec2 p, in float lightness, in float discolor)\n{\n    p *= vec2(1, 0.9);\n    float tr = treerings1(p, 130., 1., 2., 4.);\n    vec3 col = stripescol1(0.2 + 0.35*tr);\n    col *= finegrain(p, tr);\n    col *= mix(vec3(lightness), discoloration(p), discolor);\n    //col *= panelgap(p);\n    return col;\n}\n\n\nvec3 makeWood(in vec2 p)\n{\n    #if WOOD_TYPE == 1\n    return wood1(p, 1.2, 0.5);\n    #endif\n    \n    #if WOOD_TYPE == 2\n    return wood2(1.2*p, 0.6, 0.5) * vec3(1, .95, .7);\n    #endif\n    \n    #if WOOD_TYPE == 3\n    return wood1(0.9*p, 0.6, 0.3);\n    #endif\n    \n    #if WOOD_TYPE == 4\n    return wood4(p, 0.3, 0.8);\n    #endif\n    \n    return wood5(1.2*p, 0.2, 0.9) * vec3(.7, .72, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 p = 1.5*uv + .05*iTime*vec2(4., 2.);\n\n    vec3 col = makeWood(p);\n\n    // tone map\n    col = s_curve(col);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// -----------------------------------------------\n\n// color correction\n// Taken from Matt Ebb (MIT license): https://www.shadertoy.com/view/fsSfDW\n// Originally from: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n\nvec3 s_curve(vec3 x)\n{\n    const float a = 2.51f;\n    const float b = 0.03f;\n    const float c = 2.43f;\n    const float d = 0.59f;\n    const float e = 0.14f;\n    x = max(x, 0.0);\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}