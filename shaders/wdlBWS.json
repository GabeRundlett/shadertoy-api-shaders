{
    "Shader": {
        "info": {
            "date": "1589010238",
            "description": "I was wondering if you could decode data from soundcloud audio, and it looks like DTMF decoding is possible!\nif you're on mac or linux, change SAMPLE_RATE in buffer A to be 44100. this is a workaround to a bug in shadertoy.",
            "flags": 96,
            "hasliked": 0,
            "id": "wdlBWS",
            "likes": 3,
            "name": "DTMF Decoder",
            "published": 3,
            "tags": [
                "dtmf",
                "dsp"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "// ^^^^^^^^^^ make sure soundcloud is playing in Buffer A!\n// if you're on mac or linux, change SAMPLE_RATE in buffer A to be 44100. this is a workaround to a bug in shadertoy.\n\n//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat seven_segment(vec2 uv, mat3 char) {\n    float mx = 1000.;\n    for (int i = -1; i < 2; i++) {\n        for (int j = -1; j < 2; j++) {\n            if (char[j+1][i+1] == 0.) continue;\n            vec2 a;\n            vec2 b;\n            if (i==0) {\n                a = vec2(i-1,j);\n                b = vec2(i+1,j);\n            } else {\n                a = vec2(i,j);\n                b = vec2(i,0);\n            }\n            float ln = linedist(uv, a*vec2(1.,2.), b*vec2(1.,2.));\n            mx = min(ln, mx);\n        }\n    }\n    return smoothstep(0.5,0.0,mx);\n}\n\nconst int CHARS[112] = int[112](\n    0,0,1, 0, 0,0,1, //1\n    0,1,1, 1, 1,1,0, //2\n    0,1,1, 1, 0,1,1, //3\n    1,1,1, 1, 1,0,1, //A\n    1,0,1, 1, 0,0,1, //4\n    1,1,0, 1, 0,1,1, //5\n    1,1,0, 1, 1,1,1, //6\n    1,0,0, 1, 1,1,1, //B\n    0,1,1, 0, 0,0,1, //7\n    1,1,1, 1, 1,1,1, //8\n    1,1,1, 1, 0,1,1, //9\n    1,1,0, 0, 1,1,0, //C\n    0,0,0, 1, 0,0,0, //*\n    1,1,1, 0, 1,1,1, //0\n    0,1,0, 1, 0,1,0, //#\n    0,0,1, 1, 1,1,1  //D\n);\n\nfloat bayer_dither(vec2 fragCoord) {\n    return texelFetch(iChannel1, ivec2(fragCoord) % 8, 0).x/128.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y*vec2(1,-1);\n    vec2 corner = vec2(-0.4);\n    vec2 scale = vec2(20.,15.);\n    uv -= corner;\n    ivec2 id = ivec2(floor(uv*scale));\n    ivec2 res = ivec2(16,12);\n    \n    if (id.x < 0 || id.y < 0 || id.x >= res.x || id.y >= res.y) {\n        fragColor = vec4(smoothstep(2.,0.,length(uv))*0.1+0.1) + bayer_dither(fragCoord);\n        return;\n    }\n    int place = id.x + id.y*res.x + 1;\n    ivec2 datares = ivec2(iChannelResolution[0]);\n    ivec2 datacrds = ivec2(place % datares.x, place / datares.x);\n\n    vec2 crds = (fract(uv*scale)-0.5)/scale*scale.y;\n    \n    vec4 data = texelFetch(iChannel0, datacrds, 0);\n    \n    mat3 char = mat3(0);\n    if (data.z > 0.) {\n        int d = int(data.x*16.);\n        char = mat3(CHARS[d*7],CHARS[d*7+1],CHARS[d*7+2],0,CHARS[d*7+3],0,CHARS[d*7+4],CHARS[d*7+5],CHARS[d*7+6]);\n    }\n    fragColor = vec4(1,0,0,0)*seven_segment(crds*8.,char);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//note: on linux and mac SAMPLE_RATE must be 44100\n#define SAMPLE_RATE 48000.\n#define NO_UNROLL(k) (k+min(0,iFrame))\n\nfloat freq(float fq) {\n    float cs = 0.;\n    float sn = 0.;\n    for (int i = 0; i < NO_UNROLL(64); i++) {\n        float smp = texelFetch( iChannel0, ivec2(i*8,1), 0 ).x - 0.5;\n        float t = float(i*8)/SAMPLE_RATE;\n        float window = float(i)/64.;\n        smp *= pow((1.-window)*window*4.,2.);\n        cs += cos(t*fq*3.1415*2.)*smp;\n        sn += sin(t*fq*3.1415*2.)*smp;\n    }\n    return length(vec2(cs,sn))/4.;\n}\n\nint max_index(vec4 p) {\n    float m = p.x;\n    int mi = 0;\n    for (int i = 1; i < 4; i++) {\n        if (p[i] > m) {\n            m = p[i];\n            mi = i;\n        }\n    }\n    return mi;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int place = int(fragCoord.x) + int(fragCoord.y)*512;\n    vec4 state = texelFetch(iChannel1, ivec2(0,0), 0);\n    vec4 data = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\n    bool is_state = place == 0;\n    bool is_active = int(state.x) == 1;\n    int next_idx = int(state.y);\n    \n    if (!is_state && place != next_idx+1) {\n    \tfragColor = data;\n        return;\n    }\n\n    vec4 low = vec4(freq(697.), freq(770.), freq(852.), freq(941.));\n    vec4 high = vec4(freq(1209.), freq(1336.), freq(1447.), freq(1633.));\n    bool trigger = length(low) + length(high) > 1.;\n\n    if (!is_active && trigger) {\n        next_idx += 1;\n        if (place == next_idx) {\n            int low_idx = max_index(low);\n            int high_idx = max_index(high);\n            int decoded = low_idx*4 + high_idx;\n            data = vec4(float(decoded)/16., 0, 1, 0);\n        }\n    }\n\n\tis_active = trigger;\n    if (is_state) {\n        data = vec4(float(is_active), float(next_idx), 0, 0);\n    }\n\n    if (iFrame < 10) {\n        data = vec4(0);\n    }\n\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22555,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/blackle-mori/dtmf-interesting"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}