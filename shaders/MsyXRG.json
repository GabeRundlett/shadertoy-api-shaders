{
    "Shader": {
        "info": {
            "date": "1464960130",
            "description": "Shadertoy port of [url=&amp;amp;amp;quot;https://eheitzresearch.wordpress.com/415-2/&amp;amp;amp;quot;]Real-Time Polygonal-Light Shading with Linearly Transformed Cosines WebGLDemo by Eric Heitz[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "MsyXRG",
            "likes": 75,
            "name": "Linearly Transformed Cosines",
            "published": 3,
            "tags": [
                "light",
                "shading",
                "arealight",
                "polygonal",
                "ltc",
                "linearlytransformedcosines"
            ],
            "usePreview": 1,
            "username": "XT95",
            "viewed": 4202
        },
        "renderpass": [
            {
                "code": "// -- Real-Time Polygonal-Light Shading with Linearly Transformed Cosines --\n// All the code by Eric Heitz's : https://eheitzresearch.wordpress.com/415-2/\n// A really fast area light solution with great results\n\n// Ugly port of LUT textures : precomputed low res arrays. If you have a better idea..!\n// In fact the low resolution totally breaks the visual :/\n\n#define USE_LUT8\n//#define USE_LUT16\n\n\nfloat uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy).r;}\nvec3 uiColor(int id){return texture(iChannel0, vec2(float(id)+.5,1.5)/iResolution.xy).rgb;}\nfloat roughness;\nvec3  dcolor;\nvec3  scolor;\n\nfloat intensity;\nfloat width;\nfloat height;\nfloat roty;\nfloat rotz;\nbool twoSided = false;\n\nconst float pi = 3.14159265;\n\n// Tracing and intersection\n///////////////////////////\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 dir;\n};\n\nstruct Rect\n{\n    vec3  center;\n    vec3  dirx;\n    vec3  diry;\n    float halfx;\n    float halfy;\n\n    vec4  plane;\n};\n\nbool RayPlaneIntersect(Ray ray, vec4 plane, out float t)\n{\n    t = -dot(plane, vec4(ray.origin, 1.0))/dot(plane.xyz, ray.dir);\n    return t > 0.0;\n}\n\nbool RayRectIntersect(Ray ray, Rect rect, out float t)\n{\n    bool intersect = RayPlaneIntersect(ray, rect.plane, t);\n    if (intersect)\n    {\n        vec3 pos  = ray.origin + ray.dir*t;\n        vec3 lpos = pos - rect.center;\n        \n        float x = dot(lpos, rect.dirx);\n        float y = dot(lpos, rect.diry);    \n\n        if (abs(x) > rect.halfx || abs(y) > rect.halfy)\n            intersect = false;\n    }\n\n    return intersect;\n}\n\n// Camera functions\n///////////////////\nmat3 rotate( in vec3 v, in float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\n\nRay GenerateCameraRay(vec2 uv, float u1, float u2)\n{\n    Ray ray;\n\n    // Random jitter within pixel for AA\n    vec2 xy = 2.0*(uv)/iResolution.xy - vec2(1.0);\n\txy.x *= iResolution.x/iResolution.y;\n    ray.dir = normalize(vec3(xy, 2.0));\n\n    float focalDistance = 2.0;\n    float ft = focalDistance/ray.dir.z;\n    vec3 pFocus = ray.dir*ft;\n\n    ray.origin = vec3(0);\n    ray.dir    = normalize(pFocus - ray.origin);\n\n    // Apply camera transform\n    ray.origin = vec3(0.,6.,10.);\n    ray.dir = rotate(vec3(1.,0.,0.), -0.1745) * ray.dir;\n\n    return ray;\n}\n\nvec3 mul(mat3 m, vec3 v)\n{\n    return m * v;\n}\n\nmat3 mul(mat3 m1, mat3 m2)\n{\n    return m1 * m2;\n}\n\nvec3 rotation_y(vec3 v, float a)\n{\n    vec3 r;\n    r.x =  v.x*cos(a) + v.z*sin(a);\n    r.y =  v.y;\n    r.z = -v.x*sin(a) + v.z*cos(a);\n    return r;\n}\n\nvec3 rotation_z(vec3 v, float a)\n{\n    vec3 r;\n    r.x =  v.x*cos(a) - v.y*sin(a);\n    r.y =  v.x*sin(a) + v.y*cos(a);\n    r.z =  v.z;\n    return r;\n}\n\nvec3 rotation_yz(vec3 v, float ay, float az)\n{\n    return rotation_z(rotation_y(v, ay), az);\n}\n\n// Linearly Transformed Cosines\n///////////////////////////////\n\nfloat IntegrateEdge(vec3 v1, vec3 v2)\n{\n    float cosTheta = dot(v1, v2);\n    float theta = acos(cosTheta);    \n    float res = cross(v1, v2).z * ((theta > 0.001) ? theta/sin(theta) : 1.0);\n\n    return res;\n}\n\nvoid ClipQuadToHorizon(inout vec3 L[5], out int n)\n{\n    // detect clipping config\n    int config = 0;\n    if (L[0].z > 0.0) config += 1;\n    if (L[1].z > 0.0) config += 2;\n    if (L[2].z > 0.0) config += 4;\n    if (L[3].z > 0.0) config += 8;\n\n    // clip\n    n = 0;\n\n    if (config == 0)\n    {\n        // clip all\n    }\n    else if (config == 1) // V1 clip V2 V3 V4\n    {\n        n = 3;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 2) // V2 clip V1 V3 V4\n    {\n        n = 3;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 3) // V1 V2 clip V3 V4\n    {\n        n = 4;\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n        L[3] = -L[3].z * L[0] + L[0].z * L[3];\n    }\n    else if (config == 4) // V3 clip V1 V2 V4\n    {\n        n = 3;\n        L[0] = -L[3].z * L[2] + L[2].z * L[3];\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n    }\n    else if (config == 5) // V1 V3 clip V2 V4) impossible\n    {\n        n = 0;\n    }\n    else if (config == 6) // V2 V3 clip V1 V4\n    {\n        n = 4;\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 7) // V1 V2 V3 clip V4\n    {\n        n = 5;\n        L[4] = -L[3].z * L[0] + L[0].z * L[3];\n        L[3] = -L[3].z * L[2] + L[2].z * L[3];\n    }\n    else if (config == 8) // V4 clip V1 V2 V3\n    {\n        n = 3;\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n        L[1] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] =  L[3];\n    }\n    else if (config == 9) // V1 V4 clip V2 V3\n    {\n        n = 4;\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n        L[2] = -L[2].z * L[3] + L[3].z * L[2];\n    }\n    else if (config == 10) // V2 V4 clip V1 V3) impossible\n    {\n        n = 0;\n    }\n    else if (config == 11) // V1 V2 V4 clip V3\n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = -L[2].z * L[3] + L[3].z * L[2];\n        L[2] = -L[2].z * L[1] + L[1].z * L[2];\n    }\n    else if (config == 12) // V3 V4 clip V1 V2\n    {\n        n = 4;\n        L[1] = -L[1].z * L[2] + L[2].z * L[1];\n        L[0] = -L[0].z * L[3] + L[3].z * L[0];\n    }\n    else if (config == 13) // V1 V3 V4 clip V2\n    {\n        n = 5;\n        L[4] = L[3];\n        L[3] = L[2];\n        L[2] = -L[1].z * L[2] + L[2].z * L[1];\n        L[1] = -L[1].z * L[0] + L[0].z * L[1];\n    }\n    else if (config == 14) // V2 V3 V4 clip V1\n    {\n        n = 5;\n        L[4] = -L[0].z * L[3] + L[3].z * L[0];\n        L[0] = -L[0].z * L[1] + L[1].z * L[0];\n    }\n    else if (config == 15) // V1 V2 V3 V4\n    {\n        n = 4;\n    }\n    \n    if (n == 3)\n        L[3] = L[0];\n    if (n == 4)\n        L[4] = L[0];\n}\n\n\nvec3 LTC_Evaluate(\n    vec3 N, vec3 V, vec3 P, mat3 Minv, vec3 points[4], bool twoSided)\n{\n    // construct orthonormal basis around N\n    vec3 T1, T2;\n    T1 = normalize(V - N*dot(V, N));\n    T2 = cross(N, T1);\n\n    // rotate area light in (T1, T2, N) basis\n    Minv = mul(Minv, transpose(mat3(T1, T2, N)));\n\n    // polygon (allocate 5 vertices for clipping)\n    vec3 L[5];\n    L[0] = mul(Minv, points[0] - P);\n    L[1] = mul(Minv, points[1] - P);\n    L[2] = mul(Minv, points[2] - P);\n    L[3] = mul(Minv, points[3] - P);\n\n    int n;\n    ClipQuadToHorizon(L, n);\n    \n    if (n == 0)\n        return vec3(0, 0, 0);\n\n    // project onto sphere\n    L[0] = normalize(L[0]);\n    L[1] = normalize(L[1]);\n    L[2] = normalize(L[2]);\n    L[3] = normalize(L[3]);\n    L[4] = normalize(L[4]);\n\n    // integrate\n    float sum = 0.0;\n\n    sum += IntegrateEdge(L[0], L[1]);\n    sum += IntegrateEdge(L[1], L[2]);\n    sum += IntegrateEdge(L[2], L[3]);\n    if (n >= 4)\n        sum += IntegrateEdge(L[3], L[4]);\n    if (n == 5)\n        sum += IntegrateEdge(L[4], L[0]);\n\n    sum = twoSided ? abs(sum) : max(0.0, sum);\n\n    vec3 Lo_i = vec3(sum, sum, sum);\n\n    return Lo_i;\n}\n\n// Scene helpers\n////////////////\n\nvoid InitRect(out Rect rect)\n{\n    rect.dirx = rotation_yz(vec3(1, 0, 0), roty*2.0*pi, rotz*2.0*pi);\n    rect.diry = rotation_yz(vec3(0, 1, 0), roty*2.0*pi, rotz*2.0*pi);\n\n    rect.center = vec3(0, 6, 32);\n    rect.halfx  = 0.5*width;\n    rect.halfy  = 0.5*height;\n\n    vec3 rectNormal = cross(rect.dirx, rect.diry);\n    rect.plane = vec4(rectNormal, -dot(rectNormal, rect.center));\n}\n\nvoid InitRectPoints(Rect rect, out vec3 points[4])\n{\n    vec3 ex = rect.halfx*rect.dirx;\n    vec3 ey = rect.halfy*rect.diry;\n\n    points[0] = rect.center - ex - ey;\n    points[1] = rect.center + ex - ey;\n    points[2] = rect.center + ex + ey;\n    points[3] = rect.center - ex + ey;\n}\n\n// Misc. helpers\n////////////////\n\nfloat saturate(float v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nvec3 PowVec3(vec3 v, float p)\n{\n    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));\n}\n\nconst float gamma = 2.2;\n\nvec3 ToLinear(vec3 v) { return PowVec3(v,     gamma); }\nvec3 ToSRGB(vec3 v)   { return PowVec3(v, 1.0/gamma); }\n\n//UGLY CODE\n#ifdef USE_LUT8\n\t#define LUTSIZE 8\n#endif\n#ifdef USE_LUT16\n\t#define LUTSIZE 16\n#endif\nvec4 ltc_mat[LUTSIZE*LUTSIZE]; float ltc_mag[LUTSIZE*LUTSIZE];\nvoid computeLUT();\n\n\nvec4 getLUTMat( vec2 p )\n{\n    for(int x=0; x<LUTSIZE; x++)\n    for(int y=0; y<LUTSIZE; y++)\n    {\n        if( x == int(p.x) && y == int(p.y) )\n        {\n            vec4 a = mix( ltc_mat[y*LUTSIZE+x], ltc_mat[y*LUTSIZE+x+1], fract(p.x));\n            vec4 b = mix( ltc_mat[(y+1)*LUTSIZE+x], ltc_mat[(y+1)*LUTSIZE+x+1], fract(p.x));\n            return mix(a,b,fract(p.y));\n        }\n    }\n    return vec4(0.);\n}\nfloat getLUTMag( vec2 p )\n{\n    for(int x=0; x<LUTSIZE; x++)\n    for(int y=0; y<LUTSIZE; y++)\n    {\n        if( x == int(p.x) && y == int(p.y) )\n        {\n            float a = mix( ltc_mag[y*LUTSIZE+x], ltc_mag[y*LUTSIZE+x+1], fract(p.x));\n            float b = mix( ltc_mag[(y+1)*LUTSIZE+x], ltc_mag[(y+1)*LUTSIZE+x+1], fract(p.x));\n            return mix(a,b,fract(p.y));\n        }\n    }\n    return 0.;\n}\n//END\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    computeLUT();\n    \n    //Get UI data\n    roughness = uiSlider(0);\n    dcolor = uiColor(0);\n    scolor = uiColor(1);\n\n    intensity = uiSlider(1)*10.;\n    width = uiSlider(2)*15.;\n    height = uiSlider(4)*15.;\n    roty = uiSlider(5);\n    rotz = uiSlider(10);\n    \n    Rect rect;\n    InitRect(rect);\n\n    vec3 points[4];\n    InitRectPoints(rect, points);\n\n    vec4 floorPlane = vec4(0, 1, 0, 0);\n\n    vec3 lcol = vec3(intensity);\n    vec3 dcol = ToLinear(dcolor);\n    vec3 scol = ToLinear(scolor);\n    \n    vec3 col = vec3(0);\n\n    Ray ray = GenerateCameraRay(fragCoord, 0.0, 0.0);\n\n    float distToFloor;\n    bool hitFloor = RayPlaneIntersect(ray, floorPlane, distToFloor);\n    if (hitFloor)\n    {\n        vec3 pos = ray.origin + ray.dir*distToFloor;\n\n        vec3 N = floorPlane.xyz;\n        vec3 V = -ray.dir;\n        \n        float theta = acos(dot(N, V));\n        vec2 uv = vec2(roughness, theta/(0.5*pi)) * float(LUTSIZE-1);        \n        vec4 t = getLUTMat(uv);\n        mat3 Minv = mat3(\n            vec3(  1,   0, t.y),\n            vec3(  0, t.z,   0),\n            vec3(t.w,   0, t.x)\n        );\n        \n        vec3 spec = LTC_Evaluate(N, V, pos, Minv, points, twoSided);\n        spec *= getLUTMag(uv);\n        \n        vec3 diff = LTC_Evaluate(N, V, pos, mat3(1), points, twoSided); \n        \n        col  = lcol*(scol*spec + dcol*diff);\n        col /= 2.0*pi;\n    }\n\n    float distToRect;\n    if (RayRectIntersect(ray, rect, distToRect))\n        if ((distToRect < distToFloor) || !hitFloor)\n            col = lcol;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 ui = texture(iChannel0,uv);\n    col = mix(col, ui.rgb, ui.a);\n    \n    fragColor = vec4(col, 1.0);\n}\n\n\nvoid computeLUT()\n{\n#ifdef USE_LUT8\n    ltc_mag[0] = 1.000000;ltc_mag[1] = 1.000000;ltc_mag[2] = 0.999138;ltc_mag[3] = 0.953919;ltc_mag[4] = 0.855017;ltc_mag[5] = 0.677721;ltc_mag[6] = 0.475624;ltc_mag[7] = 0.306905;ltc_mag[8] = 1.000000;ltc_mag[9] = 0.999990;ltc_mag[10] = 0.995492;ltc_mag[11] = 0.955938;ltc_mag[12] = 0.852346;ltc_mag[13] = 0.676815;ltc_mag[14] = 0.478562;ltc_mag[15] = 0.311751;ltc_mag[16] = 1.000000;ltc_mag[17] = 0.999952;ltc_mag[18] = 0.993337;ltc_mag[19] = 0.950365;ltc_mag[20] = 0.844905;ltc_mag[21] = 0.674537;ltc_mag[22] = 0.487632;ltc_mag[23] = 0.327273;ltc_mag[24] = 1.000000;ltc_mag[25] = 0.999865;ltc_mag[26] = 0.991766;ltc_mag[27] = 0.942684;ltc_mag[28] = 0.831852;ltc_mag[29] = 0.673589;ltc_mag[30] = 0.505564;ltc_mag[31] = 0.355949;ltc_mag[32] = 1.000000;ltc_mag[33] = 0.999665;ltc_mag[34] = 0.986371;ltc_mag[35] = 0.930421;ltc_mag[36] = 0.813602;ltc_mag[37] = 0.678975;ltc_mag[38] = 0.537882;ltc_mag[39] = 0.403271;ltc_mag[40] = 1.000000;ltc_mag[41] = 0.999025;ltc_mag[42] = 0.973317;ltc_mag[43] = 0.900245;ltc_mag[44] = 0.804126;ltc_mag[45] = 0.703751;ltc_mag[46] = 0.594890;ltc_mag[47] = 0.481143;ltc_mag[48] = 1.000000;ltc_mag[49] = 0.992850;ltc_mag[50] = 0.926124;ltc_mag[51] = 0.860745;ltc_mag[52] = 0.833379;ltc_mag[53] = 0.782873;ltc_mag[54] = 0.703637;ltc_mag[55] = 0.620129;ltc_mag[56] = 0.987461;ltc_mag[57] = 0.938899;ltc_mag[58] = 0.942983;ltc_mag[59] = 0.943682;ltc_mag[60] = 0.943818;ltc_mag[61] = 0.943681;ltc_mag[62] = 0.943351;ltc_mag[63] = 0.942877;\t\n    ltc_mat[0] = vec4(0.000200, -0.000000, 1.000000, -0.000000);ltc_mat[1] = vec4(0.040821, -0.000000, 1.000000, -0.000000);ltc_mat[2] = vec4(0.163499, -0.000000, 1.000000, -0.000000);ltc_mat[3] = vec4(0.359810, -0.000000, 1.000000, -0.000000);ltc_mat[4] = vec4(0.608219, -0.000000, 1.000000, -0.000000);ltc_mat[5] = vec4(0.849327, -0.000000, 1.000000, -0.000000);ltc_mat[6] = vec4(1.026876, -0.000000, 1.000000, -0.000000);ltc_mat[7] = vec4(1.127918, -0.000000, 1.000000, -0.000000);ltc_mat[8] = vec4(0.000200, -0.000046, 1.052217, 0.228243);ltc_mat[9] = vec4(0.040821, -0.009316, 1.052066, 0.228242);ltc_mat[10] = vec4(0.163218, -0.036566, 1.051517, 0.228141);ltc_mat[11] = vec4(0.360871, -0.077435, 1.049110, 0.226851);ltc_mat[12] = vec4(0.608870, -0.112986, 1.040456, 0.216178);ltc_mat[13] = vec4(0.850681, -0.110371, 1.022363, 0.171798);ltc_mat[14] = vec4(1.033758, -0.063836, 1.011022, 0.089896);ltc_mat[15] = vec4(1.130218, 0.000062, 1.000010, -0.000080);ltc_mat[16] = vec4(0.000200, -0.000096, 1.232269, 0.481573);ltc_mat[17] = vec4(0.040829, -0.019653, 1.232083, 0.481559);ltc_mat[18] = vec4(0.163323, -0.077152, 1.229494, 0.481157);ltc_mat[19] = vec4(0.361362, -0.161748, 1.215935, 0.476966);ltc_mat[20] = vec4(0.602530, -0.224893, 1.149731, 0.444834);ltc_mat[21] = vec4(0.832866, -0.211716, 1.066321, 0.339254);ltc_mat[22] = vec4(1.033638, -0.123274, 1.025543, 0.170803);ltc_mat[23] = vec4(1.137644, 0.000154, 0.999953, -0.000082);ltc_mat[24] = vec4(0.000199, -0.000159, 1.627474, 0.797472);ltc_mat[25] = vec4(0.040836, -0.032524, 1.635685, 0.797401);ltc_mat[26] = vec4(0.164108, -0.127318, 1.628042, 0.795956);ltc_mat[27] = vec4(0.365844, -0.258932, 1.575327, 0.783120);ltc_mat[28] = vec4(0.602895, -0.339455, 1.372632, 0.710306);ltc_mat[29] = vec4(0.825683, -0.302224, 1.158343, 0.512880);ltc_mat[30] = vec4(1.030563, -0.173519, 1.049980, 0.243539);ltc_mat[31] = vec4(1.151713, 0.000105, 0.999957, -0.000055);ltc_mat[32] = vec4(0.000198, -0.000248, 2.529443, 1.253956);ltc_mat[33] = vec4(0.040880, -0.051100, 2.570697, 1.253684);ltc_mat[34] = vec4(0.166706, -0.198049, 2.542881, 1.248409);ltc_mat[35] = vec4(0.380361, -0.384441, 2.334701, 1.206127);ltc_mat[36] = vec4(0.617299, -0.459699, 1.772357, 1.025249);ltc_mat[37] = vec4(0.835445, -0.380695, 1.304201, 0.680722);ltc_mat[38] = vec4(1.040850, -0.213042, 1.089431, 0.306573);ltc_mat[39] = vec4(1.176060, 0.000010, 1.000023, -0.000021);ltc_mat[40] = vec4(0.000187, -0.000388, 4.301116, 2.076506);ltc_mat[41] = vec4(0.041070, -0.084546, 5.305590, 2.075270);ltc_mat[42] = vec4(0.175521, -0.321638, 5.161014, 2.051541);ltc_mat[43] = vec4(0.413187, -0.560077, 4.055352, 1.869406);ltc_mat[44] = vec4(0.665130, -0.580464, 2.432246, 1.376237);ltc_mat[45] = vec4(0.870094, -0.441204, 1.506300, 0.819691);ltc_mat[46] = vec4(1.068578, -0.241436, 1.137736, 0.354430);ltc_mat[47] = vec4(1.219174, -0.000534, 1.000063, 0.000162);ltc_mat[48] = vec4(0.000144, -0.000631, 6.468958, 4.381222);ltc_mat[49] = vec4(0.042200, -0.177353, 20.085962, 4.369584);ltc_mat[50] = vec4(0.209979, -0.606367, 16.868328, 4.106197);ltc_mat[51] = vec4(0.500901, -0.795643, 8.099620, 2.893355);ltc_mat[52] = vec4(0.769693, -0.688227, 3.439625, 1.659662);ltc_mat[53] = vec4(0.955036, -0.470746, 1.760819, 0.883184);ltc_mat[54] = vec4(1.134532, -0.254869, 1.190455, 0.377490);ltc_mat[55] = vec4(1.308330, -0.002944, 0.999844, 0.001275);ltc_mat[56] = vec4(0.000102, -0.118482, 1184.816772, 1184.816284);ltc_mat[57] = vec4(0.319603, -3.097308, 7133.888672, 23.645655);ltc_mat[58] = vec4(0.546638, -1.442077, 133.966263, 8.593670);ltc_mat[59] = vec4(0.837342, -1.129903, 20.226521, 3.658263);ltc_mat[60] = vec4(1.004258, -0.809128, 5.700182, 1.768790);ltc_mat[61] = vec4(1.117055, -0.531464, 2.269246, 0.923613);ltc_mat[62] = vec4(1.336692, -0.312752, 1.241618, 0.414403);ltc_mat[63] = vec4(1.670654, -0.056394, 0.998759, 0.033416);\n#endif\n#ifdef USE_LUT16\n    ltc_mag[0] = 1.000000;ltc_mag[1] = 1.000000;ltc_mag[2] = 1.000000;ltc_mag[3] = 0.999995;ltc_mag[4] = 0.999717;ltc_mag[5] = 0.979309;ltc_mag[6] = 0.970877;ltc_mag[7] = 0.938201;ltc_mag[8] = 0.889932;ltc_mag[9] = 0.824544;ltc_mag[10] = 0.743058;ltc_mag[11] = 0.650845;ltc_mag[12] = 0.554957;ltc_mag[13] = 0.463155;ltc_mag[14] = 0.379312;ltc_mag[15] = 0.306905;ltc_mag[16] = 1.000000;ltc_mag[17] = 1.000000;ltc_mag[18] = 0.999998;ltc_mag[19] = 0.999977;ltc_mag[20] = 0.999655;ltc_mag[21] = 0.979310;ltc_mag[22] = 0.968313;ltc_mag[23] = 0.937060;ltc_mag[24] = 0.889471;ltc_mag[25] = 0.824075;ltc_mag[26] = 0.742592;ltc_mag[27] = 0.650615;ltc_mag[28] = 0.555398;ltc_mag[29] = 0.463696;ltc_mag[30] = 0.380333;ltc_mag[31] = 0.307881;ltc_mag[32] = 1.000000;ltc_mag[33] = 1.000000;ltc_mag[34] = 0.999993;ltc_mag[35] = 0.999948;ltc_mag[36] = 0.999420;ltc_mag[37] = 0.984176;ltc_mag[38] = 0.967133;ltc_mag[39] = 0.935012;ltc_mag[40] = 0.887660;ltc_mag[41] = 0.822522;ltc_mag[42] = 0.741349;ltc_mag[43] = 0.650340;ltc_mag[44] = 0.556263;ltc_mag[45] = 0.465640;ltc_mag[46] = 0.383098;ltc_mag[47] = 0.311128;ltc_mag[48] = 1.000000;ltc_mag[49] = 0.999999;ltc_mag[50] = 0.999982;ltc_mag[51] = 0.999897;ltc_mag[52] = 0.998274;ltc_mag[53] = 0.986417;ltc_mag[54] = 0.965250;ltc_mag[55] = 0.934238;ltc_mag[56] = 0.885653;ltc_mag[57] = 0.819686;ltc_mag[58] = 0.739402;ltc_mag[59] = 0.649857;ltc_mag[60] = 0.557797;ltc_mag[61] = 0.469017;ltc_mag[62] = 0.387811;ltc_mag[63] = 0.316611;ltc_mag[64] = 1.000000;ltc_mag[65] = 0.999998;ltc_mag[66] = 0.999967;ltc_mag[67] = 0.999817;ltc_mag[68] = 0.995607;ltc_mag[69] = 0.986465;ltc_mag[70] = 0.961843;ltc_mag[71] = 0.931931;ltc_mag[72] = 0.881713;ltc_mag[73] = 0.815883;ltc_mag[74] = 0.736814;ltc_mag[75] = 0.649441;ltc_mag[76] = 0.560136;ltc_mag[77] = 0.473984;ltc_mag[78] = 0.394722;ltc_mag[79] = 0.324550;ltc_mag[80] = 1.000000;ltc_mag[81] = 0.999997;ltc_mag[82] = 0.999947;ltc_mag[83] = 0.999704;ltc_mag[84] = 0.994666;ltc_mag[85] = 0.985101;ltc_mag[86] = 0.960790;ltc_mag[87] = 0.927560;ltc_mag[88] = 0.876611;ltc_mag[89] = 0.811246;ltc_mag[90] = 0.733686;ltc_mag[91] = 0.649431;ltc_mag[92] = 0.563766;ltc_mag[93] = 0.480872;ltc_mag[94] = 0.404021;ltc_mag[95] = 0.335182;ltc_mag[96] = 1.000000;ltc_mag[97] = 0.999993;ltc_mag[98] = 0.999918;ltc_mag[99] = 0.999524;ltc_mag[100] = 0.993965;ltc_mag[101] = 0.983847;ltc_mag[102] = 0.960105;ltc_mag[103] = 0.920983;ltc_mag[104] = 0.871218;ltc_mag[105] = 0.805245;ltc_mag[106] = 0.730155;ltc_mag[107] = 0.650095;ltc_mag[108] = 0.568976;ltc_mag[109] = 0.490011;ltc_mag[110] = 0.416071;ltc_mag[111] = 0.348950;ltc_mag[112] = 1.000000;ltc_mag[113] = 0.999993;ltc_mag[114] = 0.999871;ltc_mag[115] = 0.999216;ltc_mag[116] = 0.993285;ltc_mag[117] = 0.981230;ltc_mag[118] = 0.957149;ltc_mag[119] = 0.912841;ltc_mag[120] = 0.863026;ltc_mag[121] = 0.798812;ltc_mag[122] = 0.727721;ltc_mag[123] = 0.652386;ltc_mag[124] = 0.576345;ltc_mag[125] = 0.502021;ltc_mag[126] = 0.431459;ltc_mag[127] = 0.366428;ltc_mag[128] = 1.000000;ltc_mag[129] = 0.999988;ltc_mag[130] = 0.999799;ltc_mag[131] = 0.997368;ltc_mag[132] = 0.990993;ltc_mag[133] = 0.977585;ltc_mag[134] = 0.951576;ltc_mag[135] = 0.907513;ltc_mag[136] = 0.852047;ltc_mag[137] = 0.792675;ltc_mag[138] = 0.725179;ltc_mag[139] = 0.656814;ltc_mag[140] = 0.586781;ltc_mag[141] = 0.517674;ltc_mag[142] = 0.451016;ltc_mag[143] = 0.388326;ltc_mag[144] = 1.000000;ltc_mag[145] = 0.999983;ltc_mag[146] = 0.999697;ltc_mag[147] = 0.995895;ltc_mag[148] = 0.988571;ltc_mag[149] = 0.971928;ltc_mag[150] = 0.942828;ltc_mag[151] = 0.899020;ltc_mag[152] = 0.840963;ltc_mag[153] = 0.785548;ltc_mag[154] = 0.726594;ltc_mag[155] = 0.663778;ltc_mag[156] = 0.601271;ltc_mag[157] = 0.537922;ltc_mag[158] = 0.475569;ltc_mag[159] = 0.415940;ltc_mag[160] = 1.000000;ltc_mag[161] = 0.999970;ltc_mag[162] = 0.999514;ltc_mag[163] = 0.994886;ltc_mag[164] = 0.984282;ltc_mag[165] = 0.963160;ltc_mag[166] = 0.929981;ltc_mag[167] = 0.886619;ltc_mag[168] = 0.835011;ltc_mag[169] = 0.779061;ltc_mag[170] = 0.730448;ltc_mag[171] = 0.677540;ltc_mag[172] = 0.620700;ltc_mag[173] = 0.564181;ltc_mag[174] = 0.506662;ltc_mag[175] = 0.450645;ltc_mag[176] = 1.000000;ltc_mag[177] = 0.999952;ltc_mag[178] = 0.999163;ltc_mag[179] = 0.991924;ltc_mag[180] = 0.976946;ltc_mag[181] = 0.948976;ltc_mag[182] = 0.911852;ltc_mag[183] = 0.871720;ltc_mag[184] = 0.830537;ltc_mag[185] = 0.785688;ltc_mag[186] = 0.738647;ltc_mag[187] = 0.696321;ltc_mag[188] = 0.649759;ltc_mag[189] = 0.598576;ltc_mag[190] = 0.546948;ltc_mag[191] = 0.495355;ltc_mag[192] = 1.000000;ltc_mag[193] = 0.999905;ltc_mag[194] = 0.996815;ltc_mag[195] = 0.986701;ltc_mag[196] = 0.962382;ltc_mag[197] = 0.925918;ltc_mag[198] = 0.888385;ltc_mag[199] = 0.857635;ltc_mag[200] = 0.831095;ltc_mag[201] = 0.802060;ltc_mag[202] = 0.766993;ltc_mag[203] = 0.726743;ltc_mag[204] = 0.685065;ltc_mag[205] = 0.644827;ltc_mag[206] = 0.600405;ltc_mag[207] = 0.553886;ltc_mag[208] = 1.000000;ltc_mag[209] = 0.999780;ltc_mag[210] = 0.993959;ltc_mag[211] = 0.972777;ltc_mag[212] = 0.932627;ltc_mag[213] = 0.891746;ltc_mag[214] = 0.866246;ltc_mag[215] = 0.853629;ltc_mag[216] = 0.844259;ltc_mag[217] = 0.831159;ltc_mag[218] = 0.810666;ltc_mag[219] = 0.782735;ltc_mag[220] = 0.748451;ltc_mag[221] = 0.710160;ltc_mag[222] = 0.669797;ltc_mag[223] = 0.632054;ltc_mag[224] = 1.000000;ltc_mag[225] = 0.999071;ltc_mag[226] = 0.978305;ltc_mag[227] = 0.923456;ltc_mag[228] = 0.878693;ltc_mag[229] = 0.866629;ltc_mag[230] = 0.870987;ltc_mag[231] = 0.877527;ltc_mag[232] = 0.880450;ltc_mag[233] = 0.878156;ltc_mag[234] = 0.869582;ltc_mag[235] = 0.855647;ltc_mag[236] = 0.837287;ltc_mag[237] = 0.815034;ltc_mag[238] = 0.789895;ltc_mag[239] = 0.762613;ltc_mag[240] = 0.987461;ltc_mag[241] = 0.919155;ltc_mag[242] = 0.938078;ltc_mag[243] = 0.941585;ltc_mag[244] = 0.942787;ltc_mag[245] = 0.943329;ltc_mag[246] = 0.943609;ltc_mag[247] = 0.943753;ltc_mag[248] = 0.943813;ltc_mag[249] = 0.943809;ltc_mag[250] = 0.943751;ltc_mag[251] = 0.943646;ltc_mag[252] = 0.943503;ltc_mag[253] = 0.943324;ltc_mag[254] = 0.943113;ltc_mag[255] = 0.942877;\n    ltc_mat[0] = vec4(0.000200, -0.000000, 1.000000, -0.000000);ltc_mat[1] = vec4(0.008889, -0.000000, 1.000000, -0.000000);ltc_mat[2] = vec4(0.035559, -0.000000, 1.000000, -0.000000);ltc_mat[3] = vec4(0.080038, -0.000000, 1.000000, -0.000000);ltc_mat[4] = vec4(0.142411, -0.000000, 1.000000, -0.000000);ltc_mat[5] = vec4(0.220033, -0.000000, 1.000000, -0.000000);ltc_mat[6] = vec4(0.316278, -0.000000, 1.000000, -0.000000);ltc_mat[7] = vec4(0.423690, -0.000000, 1.000000, -0.000000);ltc_mat[8] = vec4(0.539870, -0.000000, 1.000000, -0.000000);ltc_mat[9] = vec4(0.659130, -0.000000, 1.000000, -0.000000);ltc_mat[10] = vec4(0.773957, -0.000000, 1.000000, -0.000000);ltc_mat[11] = vec4(0.877617, -0.000000, 1.000000, -0.000000);ltc_mat[12] = vec4(0.965329, -0.000000, 1.000000, -0.000000);ltc_mat[13] = vec4(1.036009, -0.000000, 1.000000, -0.000000);ltc_mat[14] = vec4(1.089483, -0.000000, 1.000000, -0.000000);ltc_mat[15] = vec4(1.127918, -0.000000, 1.000000, -0.000000);ltc_mat[16] = vec4(0.000200, -0.000021, 1.010198, 0.105104);ltc_mat[17] = vec4(0.008889, -0.000934, 1.011053, 0.105104);ltc_mat[18] = vec4(0.035558, -0.003737, 1.011059, 0.105104);ltc_mat[19] = vec4(0.080038, -0.008411, 1.011020, 0.105103);ltc_mat[20] = vec4(0.142402, -0.014951, 1.010968, 0.105098);ltc_mat[21] = vec4(0.220021, -0.023060, 1.010840, 0.105076);ltc_mat[22] = vec4(0.315854, -0.031374, 1.010587, 0.104709);ltc_mat[23] = vec4(0.423539, -0.040928, 1.010182, 0.104002);ltc_mat[24] = vec4(0.540085, -0.049016, 1.009474, 0.102065);ltc_mat[25] = vec4(0.659616, -0.054144, 1.008563, 0.097708);ltc_mat[26] = vec4(0.775103, -0.054571, 1.007611, 0.089324);ltc_mat[27] = vec4(0.879842, -0.050065, 1.006683, 0.076483);ltc_mat[28] = vec4(0.968356, -0.040660, 1.005082, 0.059225);ltc_mat[29] = vec4(1.038468, -0.027956, 1.003079, 0.039444);ltc_mat[30] = vec4(1.090680, -0.013968, 1.001058, 0.019119);ltc_mat[31] = vec4(1.128415, 0.000027, 1.000054, 0.000016);ltc_mat[32] = vec4(0.000200, -0.000042, 1.043132, 0.212556);ltc_mat[33] = vec4(0.008888, -0.001889, 1.045141, 0.212553);ltc_mat[34] = vec4(0.035560, -0.007558, 1.045255, 0.212554);ltc_mat[35] = vec4(0.080034, -0.017006, 1.045084, 0.212550);ltc_mat[36] = vec4(0.142377, -0.030196, 1.044834, 0.212529);ltc_mat[37] = vec4(0.220904, -0.045718, 1.044263, 0.212328);ltc_mat[38] = vec4(0.315788, -0.064371, 1.043310, 0.211852);ltc_mat[39] = vec4(0.423366, -0.083475, 1.041445, 0.210375);ltc_mat[40] = vec4(0.540176, -0.099041, 1.037930, 0.206062);ltc_mat[41] = vec4(0.659997, -0.108477, 1.032911, 0.196592);ltc_mat[42] = vec4(0.775012, -0.108985, 1.025381, 0.178991);ltc_mat[43] = vec4(0.879518, -0.099376, 1.018116, 0.151882);ltc_mat[44] = vec4(0.970072, -0.080849, 1.013279, 0.117308);ltc_mat[45] = vec4(1.042446, -0.055893, 1.009345, 0.078317);ltc_mat[46] = vec4(1.093981, -0.027785, 1.004134, 0.038049);ltc_mat[47] = vec4(1.129939, 0.000089, 0.999986, -0.000029);ltc_mat[48] = vec4(0.000200, -0.000065, 1.106594, 0.324918);ltc_mat[49] = vec4(0.008889, -0.002888, 1.105498, 0.324918);ltc_mat[50] = vec4(0.035558, -0.011552, 1.105520, 0.324914);ltc_mat[51] = vec4(0.080032, -0.025983, 1.105361, 0.324897);ltc_mat[52] = vec4(0.142314, -0.045947, 1.104717, 0.324829);ltc_mat[53] = vec4(0.221455, -0.069973, 1.103424, 0.324476);ltc_mat[54] = vec4(0.315699, -0.098456, 1.100968, 0.323651);ltc_mat[55] = vec4(0.424268, -0.125858, 1.096258, 0.320723);ltc_mat[56] = vec4(0.540688, -0.149040, 1.086388, 0.313357);ltc_mat[57] = vec4(0.657380, -0.162319, 1.068415, 0.297043);ltc_mat[58] = vec4(0.768810, -0.161556, 1.046659, 0.266948);ltc_mat[59] = vec4(0.873065, -0.146802, 1.030547, 0.224205);ltc_mat[60] = vec4(0.967024, -0.119456, 1.021017, 0.172057);ltc_mat[61] = vec4(1.044423, -0.082918, 1.015845, 0.115585);ltc_mat[62] = vec4(1.098636, -0.041315, 1.008504, 0.056612);ltc_mat[63] = vec4(1.132608, 0.000070, 1.000057, -0.000099);ltc_mat[64] = vec4(0.000200, -0.000089, 1.197685, 0.445227);ltc_mat[65] = vec4(0.008889, -0.003957, 1.198210, 0.445226);ltc_mat[66] = vec4(0.035559, -0.015827, 1.198197, 0.445217);ltc_mat[67] = vec4(0.080031, -0.035579, 1.197705, 0.445175);ltc_mat[68] = vec4(0.142264, -0.062487, 1.196664, 0.444993);ltc_mat[69] = vec4(0.221849, -0.095749, 1.194123, 0.444390);ltc_mat[70] = vec4(0.315691, -0.133989, 1.189136, 0.442917);ltc_mat[71] = vec4(0.424895, -0.170191, 1.177294, 0.437793);ltc_mat[72] = vec4(0.538516, -0.199766, 1.151034, 0.425284);ltc_mat[73] = vec4(0.651697, -0.214708, 1.114753, 0.400110);ltc_mat[74] = vec4(0.760693, -0.211752, 1.078880, 0.357627);ltc_mat[75] = vec4(0.863433, -0.191412, 1.050120, 0.297620);ltc_mat[76] = vec4(0.959872, -0.155709, 1.031110, 0.224926);ltc_mat[77] = vec4(1.044851, -0.108544, 1.022578, 0.150121);ltc_mat[78] = vec4(1.104064, -0.054450, 1.013592, 0.074418);ltc_mat[79] = vec4(1.136289, 0.000158, 0.999997, -0.000024);ltc_mat[80] = vec4(0.000200, -0.000115, 1.333168, 0.577350);ltc_mat[81] = vec4(0.008889, -0.005132, 1.333357, 0.577347);ltc_mat[82] = vec4(0.035562, -0.020521, 1.333256, 0.577326);ltc_mat[83] = vec4(0.080061, -0.046108, 1.332649, 0.577240);ltc_mat[84] = vec4(0.142399, -0.080897, 1.330840, 0.576904);ltc_mat[85] = vec4(0.222394, -0.123651, 1.326271, 0.575823);ltc_mat[86] = vec4(0.316991, -0.171541, 1.315336, 0.572991);ltc_mat[87] = vec4(0.425000, -0.217053, 1.289993, 0.564857);ltc_mat[88] = vec4(0.537294, -0.251374, 1.242604, 0.546624);ltc_mat[89] = vec4(0.648553, -0.266626, 1.182411, 0.510690);ltc_mat[90] = vec4(0.755627, -0.260509, 1.125525, 0.452347);ltc_mat[91] = vec4(0.857208, -0.233678, 1.079633, 0.372433);ltc_mat[92] = vec4(0.953742, -0.189188, 1.048268, 0.278375);ltc_mat[93] = vec4(1.044680, -0.132424, 1.030346, 0.182196);ltc_mat[94] = vec4(1.110309, -0.066805, 1.019193, 0.091049);ltc_mat[95] = vec4(1.141452, 0.000114, 0.999929, -0.000066);ltc_mat[96] = vec4(0.000200, -0.000145, 1.518584, 0.726544);ltc_mat[97] = vec4(0.008889, -0.006458, 1.527746, 0.726536);ltc_mat[98] = vec4(0.035562, -0.025816, 1.527342, 0.726500);ltc_mat[99] = vec4(0.080101, -0.057967, 1.526773, 0.726327);ltc_mat[100] = vec4(0.142658, -0.101633, 1.523286, 0.725710);ltc_mat[101] = vec4(0.223284, -0.155053, 1.515425, 0.723851);ltc_mat[102] = vec4(0.319826, -0.213091, 1.496106, 0.718798);ltc_mat[103] = vec4(0.426167, -0.267494, 1.448783, 0.707159);ltc_mat[104] = vec4(0.539127, -0.304774, 1.369640, 0.679365);ltc_mat[105] = vec4(0.648133, -0.319235, 1.275229, 0.628699);ltc_mat[106] = vec4(0.753290, -0.308002, 1.187951, 0.549834);ltc_mat[107] = vec4(0.853423, -0.273227, 1.117805, 0.447358);ltc_mat[108] = vec4(0.949891, -0.220011, 1.069607, 0.330918);ltc_mat[109] = vec4(1.043926, -0.154424, 1.040714, 0.212954);ltc_mat[110] = vec4(1.117527, -0.078402, 1.025177, 0.106607);ltc_mat[111] = vec4(1.148244, 0.000154, 0.999912, -0.000094);ltc_mat[112] = vec4(0.000200, -0.000180, 1.808295, 0.900398);ltc_mat[113] = vec4(0.008890, -0.008004, 1.810867, 0.900395);ltc_mat[114] = vec4(0.035568, -0.031986, 1.809942, 0.900323);ltc_mat[115] = vec4(0.080172, -0.071745, 1.808488, 0.899995);ltc_mat[116] = vec4(0.143115, -0.125699, 1.802430, 0.898880);ltc_mat[117] = vec4(0.224742, -0.190926, 1.788151, 0.895635);ltc_mat[118] = vec4(0.323459, -0.260464, 1.753135, 0.887096);ltc_mat[119] = vec4(0.429709, -0.322673, 1.671908, 0.868820);ltc_mat[120] = vec4(0.542848, -0.361458, 1.542328, 0.826512);ltc_mat[121] = vec4(0.651105, -0.371741, 1.397676, 0.753429);ltc_mat[122] = vec4(0.755288, -0.352921, 1.267091, 0.648577);ltc_mat[123] = vec4(0.854131, -0.309892, 1.166239, 0.520298);ltc_mat[124] = vec4(0.950567, -0.248426, 1.097868, 0.380820);ltc_mat[125] = vec4(1.045393, -0.173791, 1.054109, 0.242284);ltc_mat[126] = vec4(1.126261, -0.088985, 1.031606, 0.120863);ltc_mat[127] = vec4(1.157047, 0.000134, 1.000057, -0.000106);ltc_mat[128] = vec4(0.000205, -0.000228, 2.319357, 1.110603);ltc_mat[129] = vec4(0.008891, -0.009873, 2.233277, 1.110594);ltc_mat[130] = vec4(0.035590, -0.039453, 2.233160, 1.110467);ltc_mat[131] = vec4(0.080335, -0.088217, 2.228793, 1.109843);ltc_mat[132] = vec4(0.143925, -0.154357, 2.218054, 1.107816);ltc_mat[133] = vec4(0.227220, -0.233620, 2.192165, 1.102112);ltc_mat[134] = vec4(0.328663, -0.315496, 2.124780, 1.087479);ltc_mat[135] = vec4(0.438073, -0.382681, 1.977735, 1.055260);ltc_mat[136] = vec4(0.548584, -0.421597, 1.772177, 0.991389);ltc_mat[137] = vec4(0.658463, -0.423809, 1.552600, 0.885680);ltc_mat[138] = vec4(0.760458, -0.397037, 1.366707, 0.749323);ltc_mat[139] = vec4(0.858841, -0.343659, 1.224969, 0.590730);ltc_mat[140] = vec4(0.953790, -0.273399, 1.129419, 0.427225);ltc_mat[141] = vec4(1.050723, -0.191173, 1.070699, 0.269484);ltc_mat[142] = vec4(1.136994, -0.098301, 1.038687, 0.133390);ltc_mat[143] = vec4(1.168201, 0.000092, 0.999988, -0.000023);ltc_mat[144] = vec4(0.000207, -0.000285, 3.035475, 1.376369);ltc_mat[145] = vec4(0.008890, -0.012234, 2.894652, 1.376351);ltc_mat[146] = vec4(0.035503, -0.048724, 2.877935, 1.376254);ltc_mat[147] = vec4(0.080635, -0.109069, 2.885150, 1.374925);ltc_mat[148] = vec4(0.145345, -0.190477, 2.865479, 1.371136);ltc_mat[149] = vec4(0.231360, -0.286312, 2.813700, 1.360647);ltc_mat[150] = vec4(0.336535, -0.380943, 2.675665, 1.334194);ltc_mat[151] = vec4(0.449809, -0.450381, 2.404360, 1.276167);ltc_mat[152] = vec4(0.559352, -0.483702, 2.071935, 1.175233);ltc_mat[153] = vec4(0.669162, -0.476676, 1.747295, 1.025267);ltc_mat[154] = vec4(0.772178, -0.436382, 1.483158, 0.845947);ltc_mat[155] = vec4(0.867520, -0.375043, 1.293919, 0.657185);ltc_mat[156] = vec4(0.961683, -0.295233, 1.166830, 0.468837);ltc_mat[157] = vec4(1.058525, -0.205999, 1.088960, 0.293683);ltc_mat[158] = vec4(1.150910, -0.106602, 1.046242, 0.144024);ltc_mat[159] = vec4(1.182903, 0.000219, 1.000051, -0.000066);ltc_mat[160] = vec4(0.000205, -0.000354, 4.090361, 1.732025);ltc_mat[161] = vec4(0.008891, -0.015395, 3.999569, 1.731999);ltc_mat[162] = vec4(0.035651, -0.061466, 3.994824, 1.731529);ltc_mat[163] = vec4(0.081183, -0.137048, 3.982212, 1.729159);ltc_mat[164] = vec4(0.147890, -0.238222, 3.940577, 1.721663);ltc_mat[165] = vec4(0.238393, -0.354396, 3.825064, 1.700962);ltc_mat[166] = vec4(0.348459, -0.460080, 3.513971, 1.649010);ltc_mat[167] = vec4(0.466917, -0.527502, 3.008729, 1.541454);ltc_mat[168] = vec4(0.581798, -0.548104, 2.462442, 1.374466);ltc_mat[169] = vec4(0.684965, -0.528665, 1.987500, 1.169501);ltc_mat[170] = vec4(0.788480, -0.474403, 1.622773, 0.939095);ltc_mat[171] = vec4(0.883373, -0.399648, 1.371290, 0.713688);ltc_mat[172] = vec4(0.972402, -0.314310, 1.207963, 0.505745);ltc_mat[173] = vec4(1.070508, -0.217952, 1.108812, 0.314264);ltc_mat[174] = vec4(1.167783, -0.113897, 1.052839, 0.153430);ltc_mat[175] = vec4(1.201838, -0.000175, 1.000102, 0.000122);ltc_mat[176] = vec4(0.000182, -0.000408, 4.465641, 2.246014);ltc_mat[177] = vec4(0.008894, -0.019965, 6.053748, 2.245986);ltc_mat[178] = vec4(0.035761, -0.079704, 6.037868, 2.244851);ltc_mat[179] = vec4(0.082244, -0.177153, 6.004071, 2.239702);ltc_mat[180] = vec4(0.152629, -0.305967, 5.901763, 2.223206);ltc_mat[181] = vec4(0.250076, -0.445606, 5.572710, 2.176924);ltc_mat[182] = vec4(0.367232, -0.557046, 4.828013, 2.062868);ltc_mat[183] = vec4(0.491527, -0.613045, 3.855389, 1.857274);ltc_mat[184] = vec4(0.612133, -0.614251, 2.963375, 1.585410);ltc_mat[185] = vec4(0.718322, -0.573696, 2.270186, 1.297383);ltc_mat[186] = vec4(0.810408, -0.509045, 1.786037, 1.022843);ltc_mat[187] = vec4(0.902686, -0.422909, 1.459304, 0.764157);ltc_mat[188] = vec4(0.993908, -0.327291, 1.255075, 0.533327);ltc_mat[189] = vec4(1.088057, -0.228315, 1.129535, 0.330989);ltc_mat[190] = vec4(1.190195, -0.119510, 1.059789, 0.160637);ltc_mat[191] = vec4(1.227317, 0.000235, 0.999851, 0.000016);ltc_mat[192] = vec4(0.000164, -0.000503, 5.293105, 3.077621);ltc_mat[193] = vec4(0.008895, -0.027352, 10.469983, 3.077425);ltc_mat[194] = vec4(0.035984, -0.108966, 10.448308, 3.074616);ltc_mat[195] = vec4(0.084496, -0.241460, 10.348615, 3.061411);ltc_mat[196] = vec4(0.162047, -0.410303, 9.980741, 3.017045);ltc_mat[197] = vec4(0.269924, -0.570517, 8.791401, 2.887105);ltc_mat[198] = vec4(0.397298, -0.673387, 6.906163, 2.610143);ltc_mat[199] = vec4(0.529570, -0.705743, 5.040496, 2.214274);ltc_mat[200] = vec4(0.655350, -0.680781, 3.601354, 1.791052);ltc_mat[201] = vec4(0.764641, -0.616027, 2.610109, 1.404757);ltc_mat[202] = vec4(0.854902, -0.530548, 1.965555, 1.074764);ltc_mat[203] = vec4(0.932581, -0.438693, 1.557097, 0.799008);ltc_mat[204] = vec4(1.012808, -0.343260, 1.304194, 0.560047);ltc_mat[205] = vec4(1.114602, -0.236086, 1.151705, 0.343508);ltc_mat[206] = vec4(1.221350, -0.121970, 1.065982, 0.165171);ltc_mat[207] = vec4(1.263520, 0.000235, 1.000070, -0.000162);ltc_mat[208] = vec4(0.000140, -0.000661, 6.755595, 4.704470);ltc_mat[209] = vec4(0.008917, -0.041859, 23.185562, 4.703964);ltc_mat[210] = vec4(0.036622, -0.166130, 23.023041, 4.693710);ltc_mat[211] = vec4(0.090453, -0.363370, 22.487141, 4.644106);ltc_mat[212] = vec4(0.182204, -0.583942, 19.991449, 4.460125);ltc_mat[213] = vec4(0.307022, -0.739456, 15.005686, 3.982741);ltc_mat[214] = vec4(0.449611, -0.807855, 10.181218, 3.280072);ltc_mat[215] = vec4(0.591065, -0.802528, 6.677411, 2.568557);ltc_mat[216] = vec4(0.716057, -0.742778, 4.401914, 1.962837);ltc_mat[217] = vec4(0.822156, -0.653710, 3.013064, 1.480438);ltc_mat[218] = vec4(0.908317, -0.548941, 2.167578, 1.103301);ltc_mat[219] = vec4(0.983767, -0.441434, 1.659860, 0.804935);ltc_mat[220] = vec4(1.062802, -0.337561, 1.357608, 0.558419);ltc_mat[221] = vec4(1.159019, -0.237893, 1.172514, 0.347479);ltc_mat[222] = vec4(1.266213, -0.133130, 1.071717, 0.171611);ltc_mat[223] = vec4(1.317598, -0.006755, 0.999856, 0.003237);ltc_mat[224] = vec4(0.000111, -0.001053, 10.587459, 9.513545);ltc_mat[225] = vec4(0.008481, -0.079989, 74.611252, 9.446982);ltc_mat[226] = vec4(0.038485, -0.320126, 85.505035, 9.380105);ltc_mat[227] = vec4(0.111758, -0.653930, 75.570328, 8.882535);ltc_mat[228] = vec4(0.233975, -0.865266, 47.568932, 7.306486);ltc_mat[229] = vec4(0.393141, -0.962179, 27.331427, 5.425194);ltc_mat[230] = vec4(0.553720, -0.963848, 15.483647, 3.911389);ltc_mat[231] = vec4(0.689320, -0.895885, 8.935380, 2.827276);ltc_mat[232] = vec4(0.804318, -0.800475, 5.462428, 2.064344);ltc_mat[233] = vec4(0.889640, -0.683606, 3.500154, 1.523521);ltc_mat[234] = vec4(0.962199, -0.565514, 2.402228, 1.122033);ltc_mat[235] = vec4(1.038259, -0.453896, 1.780805, 0.811347);ltc_mat[236] = vec4(1.115567, -0.342479, 1.403633, 0.559417);ltc_mat[237] = vec4(1.230412, -0.234388, 1.182233, 0.342490);ltc_mat[238] = vec4(1.356005, -0.114106, 1.077392, 0.163457);ltc_mat[239] = vec4(1.416097, 0.020396, 1.000096, -0.010603);ltc_mat[240] = vec4(0.000101, -0.117111, 1171.109863, 1171.109375);ltc_mat[241] = vec4(0.025775, -1.183993, 11842.732422, 200.885010);ltc_mat[242] = vec4(0.200461, -2.229295, 7482.495117, 14.348876);ltc_mat[243] = vec4(0.306880, -1.543576, 474.435883, 21.472698);ltc_mat[244] = vec4(0.473047, -1.406313, 149.314774, 10.531585);ltc_mat[245] = vec4(0.633393, -1.290295, 57.961525, 6.486299);ltc_mat[246] = vec4(0.781742, -1.181989, 27.042383, 4.300042);ltc_mat[247] = vec4(0.889530, -1.039685, 13.823654, 2.970346);ltc_mat[248] = vec4(0.967213, -0.890533, 7.678234, 2.121588);ltc_mat[249] = vec4(1.022426, -0.745031, 4.588925, 1.550315);ltc_mat[250] = vec4(1.053039, -0.602697, 2.901296, 1.149385);ltc_mat[251] = vec4(1.127651, -0.496024, 2.047898, 0.845075);ltc_mat[252] = vec4(1.191029, -0.385807, 1.503557, 0.600781);ltc_mat[253] = vec4(1.350495, -0.296642, 1.207134, 0.384524);ltc_mat[254] = vec4(1.488451, -0.184153, 1.055333, 0.200477);ltc_mat[255] = vec4(1.670859, -0.056400, 0.999631, 0.033783);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by anatole duprat - XT95/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Thx to :\n// Smooth HSV - iq : https://www.shadertoy.com/view/MsS3Wc\n// Rounded box - iq : https://www.shadertoy.com/view/4llXD7\n// 96-Bit 8x12 font - Flyguy : https://www.shadertoy.com/view/Mt2GWD\n\n#define MAX_DIGIT 2\n#define FLOAT_PRECISION 2\n#define SLIDER_LENGTH 128.\n#define WIDGET_COLOR vec3(.5)\n\n/* global var */  vec4  col = vec4(0.); vec2 pos = vec2(0.);  vec2 uv = vec2(0.);\n/* char sprite */ vec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000); vec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000); vec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000); vec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000); vec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000); vec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000); vec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000); vec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000); vec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000); vec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000); vec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000); vec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000); vec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000); vec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000); vec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000); vec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000); vec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000); vec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000); vec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000); vec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000); vec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000); vec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000); vec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000); vec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000); vec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000); vec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000); vec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000); vec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000); vec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000); vec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000); vec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000); vec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000); vec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000); vec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000); vec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000); vec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000); vec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000); vec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000); vec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000); vec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000); vec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000); vec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000); vec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000); vec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000); vec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000); vec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000); vec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000); vec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000); vec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000); vec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00); vec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000); vec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000); vec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000); vec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000); vec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000); vec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000); vec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000); vec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000); vec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000); vec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000); vec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000); vec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000); vec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000); vec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00); vec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000); vec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000); vec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000); vec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000); vec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000); vec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000); vec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78); vec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000); vec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000); vec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78); vec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000); vec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000); vec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000); vec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000); vec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000); vec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0); vec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E); vec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000); vec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000); vec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000); vec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000); vec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000); vec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000); vec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000); vec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0); vec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000); vec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000); vec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000); vec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000); vec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000); vec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n#define _a  col += vec4( char(ch_a) );\n#define _b  col += vec4( char(ch_b) );\n#define _c  col += vec4( char(ch_c) );\n#define _d  col += vec4( char(ch_d) );\n#define _e  col += vec4( char(ch_e) );\n#define _f  col += vec4( char(ch_f) );\n#define _g  col += vec4( char(ch_g) );\n#define _h  col += vec4( char(ch_h) );\n#define _i  col += vec4( char(ch_i) );\n#define _j  col += vec4( char(ch_j) );\n#define _k  col += vec4( char(ch_k) );\n#define _l  col += vec4( char(ch_l) );\n#define _m  col += vec4( char(ch_m) );\n#define _n  col += vec4( char(ch_n) );\n#define _o  col += vec4( char(ch_o) );\n#define _p  col += vec4( char(ch_p) );\n#define _q  col += vec4( char(ch_q) );\n#define _r  col += vec4( char(ch_r) );\n#define _s  col += vec4( char(ch_s) );\n#define _t  col += vec4( char(ch_t) );\n#define _u  col += vec4( char(ch_u) );\n#define _v  col += vec4( char(ch_v) );\n#define _w  col += vec4( char(ch_w) );\n#define _x  col += vec4( char(ch_x) );\n#define _y  col += vec4( char(ch_y) );\n#define _z  col += vec4( char(ch_z) );\n#define _A  col += vec4( char(ch_A) );\n#define _B  col += vec4( char(ch_B) );\n#define _C  col += vec4( char(ch_C) );\n#define _D  col += vec4( char(ch_D) );\n#define _E  col += vec4( char(ch_E) );\n#define _F  col += vec4( char(ch_F) );\n#define _G  col += vec4( char(ch_G) );\n#define _H  col += vec4( char(ch_H) );\n#define _I  col += vec4( char(ch_I) );\n#define _J  col += vec4( char(ch_J) );\n#define _K  col += vec4( char(ch_K) );\n#define _L  col += vec4( char(ch_L) );\n#define _M  col += vec4( char(ch_M) );\n#define _N  col += vec4( char(ch_N) );\n#define _O  col += vec4( char(ch_O) );\n#define _P  col += vec4( char(ch_P) );\n#define _Q  col += vec4( char(ch_Q) );\n#define _R  col += vec4( char(ch_R) );\n#define _S  col += vec4( char(ch_S) );\n#define _T  col += vec4( char(ch_T) );\n#define _U  col += vec4( char(ch_U) );\n#define _V  col += vec4( char(ch_V) );\n#define _W  col += vec4( char(ch_W) );\n#define _X  col += vec4( char(ch_X) );\n#define _Y  col += vec4( char(ch_Y) );\n#define _Z  col += vec4( char(ch_Z) );\n#define _spc  col += vec4( char(ch_spc) );\n#define _float(a)  col += vec4(print_float(a));\n#define _int(a)  col += vec4(print_int(a));\n#define _slider(x,y,id,v) setCursor(x,y);print_slider(id,v);\n#define _color(x,y,id,v) setCursor(x,y);print_color(id,v);\n#define _box(p,s,c) print_box(p,s,c);\n#define _cursor(x,y)  setCursor(x,y);\n/* gfx func */ void setCursor(int x, int y){pos = vec2(float(x),iResolution.y-float(y));}float extract_bit(float n, float b){    b = clamp(b,-1.0,24.0);    return floor(mod(floor(n / pow(2.0,floor(b))),2.0));   }float sprite(vec4 spr, vec2 size, vec2 uv){    uv = floor(uv);    float bit = (size.x-uv.x-1.0) + uv.y * size.x;    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));        float pixels = 0.0;    pixels += extract_bit(spr.x, bit - 72.0);    pixels += extract_bit(spr.y, bit - 48.0);    pixels += extract_bit(spr.z, bit - 24.0);    pixels += extract_bit(spr.w, bit - 00.0);        return bounds ? pixels : 0.0;}float char(vec4 ch){    float px = sprite(ch, vec2(8, 12), uv - pos);    pos.x += 8.;    return px;}vec4 get_digit(float d){    d = floor(d);    if(d == 0.0) return ch_0;    if(d == 1.0) return ch_1;    if(d == 2.0) return ch_2;    if(d == 3.0) return ch_3;    if(d == 4.0) return ch_4;    if(d == 5.0) return ch_5;    if(d == 6.0) return ch_6;    if(d == 7.0) return ch_7;    if(d == 8.0) return ch_8;    if(d == 9.0) return ch_9;    return ch_0;}float print_float(float number){    float result = 0.0;        for(int i = MAX_DIGIT-1; i >= -FLOAT_PRECISION;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);                if(i == -1)        {            result += char(ch_per);        }                if((abs(number) > pow(10.0, float(i))) || i <= 0)        {            result += char(get_digit(digit));        }    }     return result;}float print_int(float number){    float result = 0.0;        for(int i = MAX_DIGIT;i >= 0;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);        if(abs(number) > pow(10.0, float(i)) || i == 0)        {            result += char(get_digit(digit));        }    }       return result;}vec3 hsv2rgb( in vec3 c ){vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );rgb = rgb*rgb*(3.0-2.0*rgb);return c.z * mix( vec3(1.0), rgb, c.y);}vec3 widgetSelected(){    return texture(iChannel0, vec2(.5,2.5)/iResolution.xy).rgb;}vec4 uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy);}vec4 uiColor(int id){return texture(iChannel0, vec2(float(id)+.5,1.5)/iResolution.xy);}float roundBox( in vec2 p, in vec2 b, in float r ) {    vec2 q = abs(p) - b;    vec2 m = vec2( min(q.x,q.y), max(q.x,q.y) );    float d = (m.x > 0.0) ? length(q) : m.y;     return d - r;}void print_slider( int id, float v ){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 value = uiSlider(id);    if(value.a == 0.)        value.r = v;        bool selected = ( select.r == .1 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tvalue.r = clamp((iMouse.x-pos.x-2.)/SLIDER_LENGTH,0.,1.);    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3((clamp( 1.3-abs(d) , 0., 2.))*max(.0,-sign(uv.x-pos.x-value.r*SLIDER_LENGTH))*.5 );    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        float oldx = pos.x;    pos.x += SLIDER_LENGTH-8.*4.;    _float(value.r)    pos.x = oldx;        if(puv.x == float(id) && puv.y==0.)        col = vec4(value.r,0.,0.,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.1,float(id)/255.,0.,0.);    }}void print_color( int id, vec3 v){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 color = uiColor(id);    if(color.a == 0.)        color.rgb = v;        bool selected = ( select.r == .2 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tcolor.rgb = hsv2rgb( vec3( (iMouse.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3( layer*color*max(.0,sign(uv.x-pos.x-SLIDER_LENGTH*.9)));    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        if((mouseAndNoSelect || selected) && uv.x-pos.x-SLIDER_LENGTH*.9<0.)        col.rgb += layer*hsv2rgb( vec3( (uv.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );            if(puv.x == float(id) && puv.y==1.)        col = vec4(color.rgb,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.2,float(id)/255.,0.,0.);    }}void print_box(vec2 p, vec2 s, vec4 c){    if(uv.x>p.x && uv.x <p.x+s.x && uv.y>p.y && uv.y<p.y+s.y)        col += c;}\n\n\n//FUNCTIONS :\n// _cursor(x,y) : define the cursor (0,0) == top-left\n// _slider(x,y,id,v) : define a slider at the position x,y with an ID and a default value float v\n// _color(x,y,id,v) : define a color picker at the position x,y with an ID and a default value vec3 v\n// _box(x,y,sx,sy,c) : define a layout box at the position x,y with the size sx,sy and a color vec4 c\n//_[a..Z] : write a character at the position of the cursor\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy;\n    if(uv.x-.5 == 0. && uv.y-.5 == 2.)\n        col = vec4(widgetSelected(),0.);\n    \n    _slider(20,30, 0, 0.147) _R _o _u _g _h _n _e _s _s\n        \n    _color(20,60, 0, vec3(1.,0.,0.)) _D _i _f _f _u _s _e _spc  _c _o _l _o _r\n    _color(20,90, 1, vec3(1.,.7,0.) ) _S _p _e _c _u _l _a _r _spc  _c _o _l _o _r\n        \n    _slider(20,120, 1, .4) _I _n _t _e _n _s _i _t _y\n    _slider(20,150, 2, .42) _W _i _d _t _h\n    _slider(20,180, 4, .42) _H _e _i _g _h _t\n    _slider(20,210, 5, 0.88) _R _o _t _a _t _e _spc _X\n    _slider(20,240, 10, 0.) _R _o _t _a _t _e _spc _Z\n        \n        \n    fragColor = min(col.rgba,1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}