{
    "Shader": {
        "info": {
            "date": "1580063516",
            "description": "Background of an old video game.",
            "flags": 0,
            "hasliked": 0,
            "id": "wty3Wc",
            "likes": 2,
            "name": "Comet Wars Background",
            "published": 3,
            "tags": [
                "background",
                "comet",
                "wars"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "\n        \n        \nfloat PI = 3.14159265359;\n#define GR 1.61803398875\n#define EPS .001\n#define INFINITY 1E32     \n\n\n\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat saw(float x)\n{\n    return acos(cos(x))/3.14;\n}\nvec2 saw(vec2 x)\n{\n    return acos(cos(x))/3.14;\n}\nfloat jag(float x)\n{\n    return mod(x, 1.0);\n}\nvec2 jag(vec2 x)\n{\n    return vec2(jag(x.x), jag(x.y));\n}\n\nfloat stair(float x)\n{\n    return float(int(x));\n}\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross2( g, f );\n    float k1 = cross2( e, f ) + cross2( h, g );\n    float k0 = cross2( h, e );\n    \n    float w = k1*k1 - 4.0*k0*k2;\n    \n\n    w = sqrt(abs( w ));\n    \n    float v1 = ((-k1 - w)/(2.0*k2));\n    float v2 = ((-k1 + w)/(2.0*k2));\n    float u1 = ((h.x - f.x*v1)/(e.x + g.x*v1));\n    float u2 = ((h.x - f.x*v2)/(e.x + g.x*v2));\n    bool  b1a = v1>0.0 && v1<1.0;\n    bool  b1b = u1>0.0 && u1<1.0;\n    bool  b2a = v2>0.0 && v2<1.0;\n    bool  b2b = u2>0.0 && u2<1.0;\n    \n\n    vec2 res = vec2(min(abs(u1), abs(u2)), min(abs(v1), abs(v2)));\n    return saw(res*1.0*PI);\n}\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\nvec3 RotateZ( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateZ( vPos, SinCos(fAngle) );\n}\nvec2 RotateZ( const in vec2 vPos, const in float fAngle )\n{\n\treturn RotateZ( vec3(vPos, 0.0), SinCos(fAngle) ).xy;\n}\nmat4 RotateZ( const in mat4 vPos, const in float fAngle )\n{\n\treturn mat4(RotateZ( vec3(vPos[0].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[1].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[2].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[3].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0);\n}\nmat4 translate( const in mat4 vPos, vec2 offset )\n{\n\treturn mat4(vPos[0].xy+offset, 0.0, 0.0,\n                vPos[1].xy+offset, 0.0, 0.0,\n                vPos[2].xy+offset, 0.0, 0.0,\n                vPos[3].xy+offset, 0.0, 0.0);\n} \nmat4 scale( const in mat4 vPos, vec2 factor )\n{\n\treturn mat4(vPos[0].xy*factor, 0.0, 0.0,\n                vPos[1].xy*factor, 0.0, 0.0,\n                vPos[2].xy*factor, 0.0, 0.0,\n                vPos[3].xy*factor, 0.0, 0.0);\n} \n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i = floor(v + dot(v, C.yyy) );\n  vec3 x0 = v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  // x0 = x0 - 0.0 + 0.0 * C.xxx;\n  // x1 = x0 - i1 + 1.0 * C.xxx;\n  // x2 = x0 - i2 + 2.0 * C.xxx;\n  // x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3 ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec3 flux(float x)\n{\n    return vec3(cos(x*1.0)*.5+.5,\n                cos(x*1.0+4.0*PI/3.0)*.5+.5,\n                cos(x*1.0+2.0*PI/3.0)*.5+.5);\n}\nvec4 cometwars(vec2 uv)\n{\n    uv.y = uv.y*3.0-1.5;\n    uv.x = uv.x*2.0-.5;\n    \n    uv.x *= uv.x > 0.0 ? .65 : 1.0;\n    uv.x = uv.x < 0.0 ? uv.x*1.5 : pow(uv.x, .75)*1.25;\n    \n    float turns = 32.0;//uv.x < 0.0 ? 24.0: 32.0;\n    float theta = atan(uv.y, uv.x);\n    float r = length(uv)+sin(theta*turns)*.05;\n    \n    float spikyness = .75;\n    \n    float tailyness = clamp(uv.x+1.0, 0.0, 2.0)/2.5;\n    float shortenyness = clamp(-uv.x, 0.0, 1.0);\n    float bendsign = (theta > PI || theta < 0.0) ? -1.0: 1.0;\n    \n    theta += (tailyness+iTime*1.1375)*bendsign;\n    \n    r += saw(theta*turns)*spikyness+shortenyness;\n    \n    float edgefade = pow(saw(clamp(r/2.0-1.0, -0.5, .5)/.5*PI), .125);\n    float rockyness = pow(clamp(1.0-length(uv)*GR, 0.0, 1.0), .75);\n    float comet = rockyness+edgefade;//*saw(sin(atan(uv.y, uv.x)*turns/2.0-iTime*bendsign*15.6789)+pow(length(uv), 2.75)*turns*2.0-iTime*PI*15.0);\n    \n    vec4 specs = vec4(flux(2.0*PI*snoise(vec3(r*length(uv)-iTime*PI, theta*2.0, 0.0))), 1.0);\n    if(1.0 > r)\n        return vec4(0.3, 0.5, specs.b, specs.b)*comet+rockyness;//vec4(, 1.0)+clamp(.75-comet, 0.0, 1.0);\n    else \n        return vec4(1.0-saw(clamp(r-.85, 0.0, .5)/.5*PI));\n}\n\nvec2 hash( vec2 p )\n{\n    p = vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3)));\n    return fract(sin(p)*43458.3453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 persp = uv*2.0-1.0;\n    persp.x *=  iResolution.x/iResolution.y;\n    persp += vec2(cos(iTime*1.123456789)*.35-.35, cos(iTime*1.6789)*.25);\n    \n    vec2 crosshair = vec2(-0.75, 0.0);\n    \n    vec2 duv = persp-crosshair;\n    \n    duv = RotateZ(duv, cos(iTime*.25)*PI);\n    \n    float theta = atan(duv.y, duv.x);\n    float section = mod(theta, PI/2.0)/(PI/2.0);\n    section = section < .15 || section >.85 ? 1.0-(1.0-abs(section-.5)/.5)/.3: 0.0;\n    section = pow(section, .125);\n \tfloat r = length(duv);\n   \t\n    float d = .45;\n    float outerscalar = 1.25;\n    float outerw = .05;\n    \n    float outer = r > d*outerscalar && r < d*outerscalar+outerw ? section*cos(clamp(r-d*outerscalar, 0.0, outerw)/outerw*PI-PI/2.0): 0.0;\n    float grid = r > d ? outer : pow(cos(r/d*PI*9.0)*.5+.5, 2.0);\n    grid += (1.0-clamp(abs(duv.x/outerw*2.0), 0.0, 1.0))*pow(clamp(d*1.75-abs(duv.y), 0.0, 1.0)/d, .125)+\n        \t(1.0-clamp(abs(duv.y/outerw*2.0), 0.0, 1.0))*pow(clamp(d*1.75-abs(duv.x), 0.0, 1.0)/d, .125);\n    grid = pow(grid, 2.0);\n    \n    uv += vec2(cos(iTime*1.234), cos(iTime*1.456))*.05;\n    vec4 c = cometwars(uv);\n    uv -= vec2(iTime*.5, 0.0);\n    float scale = 40.;\n    float radius = 1.5;\n    vec2 gridPosition = floor(uv * scale) / scale;\n    vec2 randomOffset = hash(gridPosition) * 2. - 1.;\n    vec2 localGridPositionCenter = fract(uv * scale) - .5;\n    float stars = mix(0., 1., step(length(localGridPositionCenter + randomOffset * .5), .1));\n    \n    fragColor = vec4(0.3, 0.5, 1.0, 1.0)*c.b*(1.0-grid)+vec4(1.0, 0.0, 0.0, 1.0)*grid;\n    fragColor += clamp(1.0-length(fragColor), 0.0, 1.0)*stars;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}