{
    "Shader": {
        "info": {
            "date": "1668642313",
            "description": "Fuzzy signed distance fields in 1D visualization.\nAverages multiple signed distance fields over time where the inside-outside boundary varies from 0 to 1.\nClick and drag to draw the source curve.\nThis process produces erosion heightmaps in 2D.",
            "flags": 32,
            "hasliked": 0,
            "id": "ddfXz7",
            "likes": 6,
            "name": "1D Fuzzy SDF Visualizer",
            "published": 3,
            "tags": [
                "sdf",
                "visualizer",
                "1d",
                "graph",
                "fuzzy"
            ],
            "usePreview": 0,
            "username": "Hatchling",
            "viewed": 242
        },
        "renderpass": [
            {
                "code": "// 1D visualization of a fuzzy signed distance field.\n// A fuzzy signed distance field is one that averages\n// multiple regular signed distance fields, but where for each sample,\n// the threshold that separates inside from outside is different.\n\n// The threshold is is uniformly distributed between 0-1.\n// It's basically integrating \"signedDist(x, threshold)\" as \"threshold\" changes from 0 to 1.\n// Where \"signedDist(x, threshold)\" is the minimum distance along the x-axis \n// from \"x\" to any point (within the range 0-1 along the x axis)\n// in a function \"F()\" that is greater than or equal to \"threshold\".\n\n// Legend: ----------------------------------\n// Orange curve : The function F() described above.\n//   Blue curve : The resulting fuzzy SDF.\n\n// Controls: ----------------------------------\n// Mouse Click + Drag: Change the value of the orange graph \n//                     at and around the given point.\n\n// Notice: ----------------------------------\n//\n// - It takes a while for the fuzzy SDF to resolve, but starts out\n//   low-resolution and gradually gets sharper. \n//   It takes a couple seconds to get a good result.\n//\n// - It resets if you draw a different orange curve,\n//   but once you stop drawing, it will converge again.\n//   Until then, you'll see a rough preview.\n//\n// - This isn't optimized, the search function is brute force,\n//   but it is 1D so this should be fine.\n\n// I'm not sure there is a simpler way to interpret what this process does,\n// but perhaps one can get an intuition for it by playing with it in 1-D.\n\nfloat sampleGraph( in float graphHeight, in vec2 fragCoord )\n{\n\n    //fragColor.rgb *= scale;\n    \n    float pixelHeight = fragCoord.y;   \n    \n    float range = (1.0 + abs(dFdx(graphHeight))) * 2.0;\n    \n    float upper = graphHeight + range;\n    float lower = graphHeight - range;\n    \n    float value = (pixelHeight - lower) / (upper - lower);\n    \n    // Convert to a line instead of a solid graph.\n    // Increase the range's multiplier from 1.0 to 2.0 to use this.\n    value = abs(value - 0.5) * 2.0;\n    \n    return 1.0 - smoothstep(0., 1., value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float graphHeight1;\n    {\n        // Determine mip level to try and have uniform samples per texel.\n        float densityPerFrag = texelFetch(iChannel0, ivec2(fragCoord.x, 0), 0).a; \n        float tgtDensityPerFrag = float(1 << 13);\n        float mipLevel = log(tgtDensityPerFrag/densityPerFrag)/log(2.0);\n        mipLevel = clamp(mipLevel, 0.0, 7.0);\n        \n        float scale = pow(2.0, mipLevel);\n        vec4 f = texture(iChannel0, vec2(fragCoord.x / iResolution.x, 0), mipLevel);\n        f /= f.a;\n        graphHeight1 = f.x * iResolution.y;\n    }\n\n    float graph1 = sampleGraph(graphHeight1, fragCoord);\n    \n    float graphHeight2;\n    {\n        // Determine mip level to try and have uniform samples per texel.\n        float f = texelFetch(iChannel1, ivec2(fragCoord.x, 0), 0).a; \n        graphHeight2 = f * iResolution.y;\n    }\n\n    float graph2 = sampleGraph(graphHeight2, fragCoord);\n    \n    fragColor = vec4(0,0,0,1);\n    \n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.7, 0.3), graph2);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.3, 0.7, 1.0), graph1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Contains the function to display.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y > 0.5)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    if(iFrame == 0)\n    {\n        fragColor = texture(iChannel1, fragCoord * 0.125 / iChannelResolution[1].xy).rrrr;\n    }\n    else\n    {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    \n    \n    if(iMouse.z > 0.0)\n    {\n        float distanceToMouse = abs(iMouse.x - fragCoord.x) / iResolution.x;\n        \n        float weight = exp2(-distanceToMouse * 100.0);\n        weight = smoothstep(0., 1., weight);\n    \n        fragColor = mix(fragColor, vec4(iMouse.y / iResolution.y), weight);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Contains the function to display.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 intFragCoord = ivec2(fragCoord);\n    \n    if(fragCoord.y > 0.5)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec4 prev = iMouse.z > 0.5 ? vec4(0) : texelFetch(iChannel1, intFragCoord, 0);\n    fragColor = prev;\n    \n    // The X center of \"my\" pixel (the current one being drawn).\n    float myCenter = float(intFragCoord.x) + 0.5;\n    float myHeight = texelFetch(iChannel0, ivec2(fragCoord.x, 0), 0).y;\n    \n    float distSum = 0.0;\n    \n    ivec2 intResolution = ivec2(iResolution.xy);\n    //float dither = fragColor.a * 0.56984029 + fragCoord.x * 0.7548776662;\n    float dither = fragColor.a * 0.7548776662 + fragCoord.x * 1.61803398875;\n    dither -= floor(dither);\n    \n\n    vec4 thresh = (vec4(0, 1, 2, 3) + vec4(dither)) / 4.0;\n    float maxDist = iResolution.x;\n    vec4 dist = vec4(maxDist);\n    bvec4 mySign = greaterThan(vec4(myHeight), thresh);\n\n    for(int iNeighbor = 0; iNeighbor < intResolution.x; iNeighbor++)\n    {\n        // This doesn't work for some reasosn.\n        /*int neighborX = (iNeighbor / 2) + 1;\n        if((iNeighbor % 2) == 0)\n            neighborX = -neighborX;\n            \n        neighborX += intFragCoord.x;\n        \n        if(neighborX > intResolution.x-1) neighborX = intResolution.x-1;\n        if(neighborX < 0) neighborX = 0;*/\n        \n        // Can't break early, I guess. Brute force it is. -shrug-\n        int neighborX = iNeighbor;\n            \n        // The X center of the neighbor pixel.\n        float neighborCenter = float(neighborX) + 0.5;\n        float neighborNearestEdge = neighborCenter + sign(myCenter - neighborCenter) * 0.5;\n\n        float distMeToNeighbor = abs(myCenter - neighborNearestEdge);\n\n        float neighborHeight = texelFetch(iChannel0, ivec2(neighborX, 0), 0).y;\n\n\n        bvec4 neighborSign = greaterThan(vec4(neighborHeight), thresh);\n\n        bvec4 signEquals = equal(mySign, neighborSign);\n        bvec4 neighborFurther = greaterThanEqual(vec4(distMeToNeighbor), dist);\n        \n        dist.x = signEquals.x || neighborFurther.x ? dist.x : distMeToNeighbor;\n        dist.y = signEquals.y || neighborFurther.y ? dist.y : distMeToNeighbor;\n        dist.z = signEquals.z || neighborFurther.z ? dist.z : distMeToNeighbor;\n        dist.w = signEquals.w || neighborFurther.w ? dist.w : distMeToNeighbor;\n    }\n\n    dist *= vec4(mySign) * 2.0 - vec4(1.0);\n\n    distSum += dist.x + dist.y + dist.z + dist.w;\n    \n    distSum /= (4.0 * maxDist);\n    distSum = distSum * 0.5 + 0.5;\n    \n    fragColor += vec4(distSum, distSum, distSum, 1) * 4.0;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}