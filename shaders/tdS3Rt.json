{
    "Shader": {
        "info": {
            "date": "1549664988",
            "description": "Fractal Experiment 31",
            "flags": 32,
            "hasliked": 0,
            "id": "tdS3Rt",
            "likes": 6,
            "name": "Fractal Experiment 31",
            "published": 3,
            "tags": [
                "fractal",
                "experiment",
                "31"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 get(sampler2D sam, vec2 g, vec2 s, float x, float y)\n{\n    vec2 v = g + vec2(x,y);\n    if (v.x < 0.) v.x = s.x;\n    if (v.y < 0.) v.y = s.y;\n    if (v.x > s.x) v.x = 0.;\n    if (v.y > s.y) v.y = 0.;\n\treturn texture(sam, v / s);\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    vec2 s = iResolution.xy;\n    vec2 v = (g+g-s)/s.y;\n    vec4 tex = texture(iChannel1, g / s);\n    vec2 z = tex.xy;\n    vec2 zz = tex.zw;\n    float a = atan(z.x,z.y) + dot(z,zz) * 2.5 * sign(z.x) * sign(z.y) + iTime * 20.;\n    vec4 cc = 1.-get(iChannel0, g, s, 0., 0.);\n    vec4 cc2 = 1.-get(iChannel0, g, s, cos(a)*.8, sin(a)*.8);\n    f = vec4(cc*cc);\n    f += vec4(.3, .5, .1,1)*max(cc2*cc2*1.25 - cc*cc*cc*2., 0.0)*100.;\n    f = f * .2 + f.gbra * .3;\n}\n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via NoodlesPlate\n\n//uniform vec2(0.0:1.0:0.924,0.) _c;\n//uniform int(0:200:50) _niter;\n//uniform float(0.0:1.0:0.48) _k;\n//uniform float(0.0:5.0:2.2) _scale;\n//uniform float(0.0:.5:0.03) _limit;\n//uniform float(0.0:100.0:8.) _dist;\n//uniform vec3(color:1,0,1) _color;\n//uniform vec2(0:5:3,2) _colorVar;\n\n#define _c vec2(0.9240,0)\n#define _niter 50\n#define _k 0.25912\n#define _scale 2.2\n#define _limit 0.03\n#define _dist 8.\n#define _color vec3(1,0,1)\n#define _colorVar vec2(3,1.51)\n\nvec2 zmul(vec2 a, vec2 b){return mat2(a,-a.y,a.x)*b;} // z * z \nvec2 zinv(vec2 a){return vec2(a.x, -a.y) / dot(a,a);} // 1 / z\n\nconst float AA = 2.;\n    \nfloat shape(vec2 z)\n{\n\t//return max(abs(z.x), abs(z.y)) * 0.8 + dot(z,z) * 0.2;\n\t//return max(abs(z.x)-z.y,z.y);\n\treturn dot(z,z);\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    f = vec4(0);\n    \n\tvec2 si = iResolution.xy;\n        \n    vec2 uv = ((g)*2.-si)/min(si.x,si.y) * _scale;\n    vec2 z = uv, zz;\n    vec2 c = _c;\n\tc.y += sin(iTime) * _limit;\n    float it = 0.;\n    for (int i=0;i<_niter;i++)\n    {\n\t\tzz = z;\n        z = zinv( _k * zmul(z, z) - c);\n\t\tif( shape(z) > _dist ) break;\n        it++;\n    }\n\n\tvec4 sec = _colorVar.x + it * _colorVar.y + vec4(_color,1);\n\t\t\n\tf = .5 + .5 * sin(sec - shape(zz) / shape(z));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via NoodlesPlate\n\n//uniform vec2(0.0:1.0:0.924,0.) _c;\n//uniform int(0:200:50) _niter;\n//uniform float(0.0:1.0:0.48) _k;\n//uniform float(0.0:5.0:2.2) _scale;\n//uniform float(0.0:.5:0.03) _limit;\n//uniform float(0.0:100.0:8.) _dist;\n//uniform vec3(color:1,0,1) _color;\n//uniform vec2(0:5:3,2) _colorVar;\n\n#define _c vec2(0.9240,0)\n#define _niter 10\n#define _k 0.25912\n#define _scale 2.2\n#define _limit 0.03\n#define _dist 8.\n#define _color vec3(1,0,1)\n#define _colorVar vec2(3,1.51)\n\nvec2 zmul(vec2 a, vec2 b){return mat2(a,-a.y,a.x)*b;} // z * z \nvec2 zinv(vec2 a){return vec2(a.x, -a.y) / dot(a,a);} // 1 / z\n\nconst float AA = 2.;\n    \nfloat shape(vec2 z)\n{\n\t//return max(abs(z.x), abs(z.y)) * 0.8 + dot(z,z) * 0.2;\n\t//return max(abs(z.x)-z.y,z.y);\n\treturn dot(z,z);\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    f = vec4(0);\n    \n\tvec2 si = iResolution.xy;\n        \n    vec2 uv = ((g)*2.-si)/min(si.x,si.y) * _scale;\n    vec2 z = uv, zz;\n    vec2 c = _c;\n\tc.y += sin(iTime) * _limit;\n    float it = 0.;\n    for (int i=0;i<_niter;i++)\n    {\n\t\tzz = z;\n        z = zinv( _k * zmul(z, z) - c);\n\t\tif( shape(z) > _dist ) break;\n        it++;\n    }\n\n\tvec4 sec = _colorVar.x + it * _colorVar.y + vec4(_color,1);\n\t\t\n\tf = vec4(z,zz);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}