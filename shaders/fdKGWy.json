{
    "Shader": {
        "info": {
            "date": "1632104056",
            "description": "Forces creating snirklets.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdKGWy",
            "likes": 12,
            "name": "Organic Snirklets",
            "published": 3,
            "tags": [
                "forces",
                "snirklets"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 color = texture(iChannel0, uv);\n    color.r = mod(color.r, 1.0);\n    \n    // Output to screen\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define M_PI 3.1415926\n#define T(U) texture(iChannel0, (U)/iResolution.xy)\n\nconst float density = 6.0; \nconst float k = 3.0;\nconst float startspeed = 0.0;\nconst float anglespeed = 0.3;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iTime >= 4.0 && mod(iTime, 4.0) < 0.1) {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    vec2 xy = floor(fragCoord);\n    \n    vec2 center = iResolution.xy * 0.5;\n    \n    if (distance(fragCoord, center) < 1.0) {\n        fragColor = vec4(sin(iTime * 1.0), 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    vec4 color = T(fragCoord);\n    fragColor = color;       \n    \n    bool done = false;\n    float nonEmpty = 0.0;\n    for (float dx = -k; dx <= k; dx++) {\n        for (float dy = -k; dy <= k; dy++) {\n            vec2 fc = fragCoord + vec2(dx, dy);\n            vec4 previous = T(fc);\n            float rawAngle = previous.x;\n            float angle = rawAngle * 2.0 * M_PI;\n            if (angle > 0.0) {\n                nonEmpty++;\n            }\n            if (!done && angle != 0.0) {\n                for (float speed = startspeed; speed <= k; speed += 1.0) {\n                    vec2 xy2 = floor(fc) + speed * vec2(cos(angle), sin(angle));\n                    if (distance(xy, xy2) < 1.0) {\n                        float a = rawAngle + anglespeed * (rand(sin(iTime) * fc) - 0.5);\n                        color += vec4(fract(a), 0.25, 0.0, 0.0);\n                    }\n                }\n                done = true;\n            }\n        }\n    }\n    if (nonEmpty <= density) {\n        fragColor = color;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}