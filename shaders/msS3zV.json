{
    "Shader": {
        "info": {
            "date": "1667872840",
            "description": "Creating an algorithm to get the nearest neighbor to an occupied pixel.\nPart of that involves getting the range of distances a given block of pixels occupies to see if they can be skipped.\nUse the mouse to test this part of the algorithm.",
            "flags": 0,
            "hasliked": 0,
            "id": "msS3zV",
            "likes": 1,
            "name": "Min/Max Distance to Pixel",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "field"
            ],
            "usePreview": 0,
            "username": "Hatchling",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "// Returns the minimum and maximum distance from\n// a given coordinate to a square whose minimum\n// is coord, and whose maximum is coord+(1,1).\nvec2 getMinMaxDistSqr(vec2 point, ivec2 coord)\n{\n    vec2 squareCenter = vec2(coord) + vec2(0.5);\n    \n    vec2 dirToCenter = squareCenter - point;\n    \n    vec2 minOffset = clamp(dirToCenter, vec2(-0.5), vec2(0.5)) * -1.0;\n    \n    vec2 maxOffset = vec2\n    (\n        dirToCenter.x < 0. ? -0.5 : 0.5,\n        dirToCenter.y < 0. ? -0.5 : 0.5\n    );\n    \n    vec2 distances = vec2\n    (\n        lengthSqr(dirToCenter + minOffset),\n        lengthSqr(dirToCenter + maxOffset)\n    );\n    \n    return distances;\n}\n\n\nconst ivec2 TestImageSize = ivec2(16,9);\nconst ivec2 TestImagePixel = ivec2(8, 5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fragUV = fragCoord / iResolution.xy;\n    vec2 fragTestCoord = fragUV * vec2(TestImageSize);\n    bool fragInTestPixel = floorToInt(fragTestCoord) == TestImagePixel;\n    \n    fragColor = fragInTestPixel ? vec4(1) : vec4(0);\n    \n    \n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    vec2 mouseTestCoord = mouseUV * vec2(TestImageSize);\n    \n    vec2 distancesToPixelSqr = getMinMaxDistSqr(mouseTestCoord, TestImagePixel);\n    \n    float distanceToMouseSqr = distSqr(fragTestCoord, mouseTestCoord);\n    \n    vec2 circles = clamp\n    (\n        vec2(1.0) - abs(sqrt(distancesToPixelSqr) - sqrt(vec2(distanceToMouseSqr))) * 25.0, \n        vec2(0.0), \n        vec2(1.0)\n    );\n    \n    fragColor.xy = circles;\n\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float dot2(vec2 a, vec2 b) { return a.x * b.x + a.y * b.y; }\nfloat dot2(vec3 a, vec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }\nfloat dot2(vec4 a, vec4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }\nint dot2(ivec2 a, ivec2 b) { return a.x * b.x + a.y * b.y; }\nint dot2(ivec3 a, ivec3 b) { return a.x * b.x + a.y * b.y + a.z * b.z; }\nint dot2(ivec4 a, ivec4 b) { return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w; }\n\n#define decl_lengthSqr(retType, type) retType lengthSqr(type a) { type t = a; return dot2(t,t); }\ndecl_lengthSqr(float, vec2)\ndecl_lengthSqr(float, vec3)\ndecl_lengthSqr(float, vec4)\ndecl_lengthSqr(int, ivec2)\ndecl_lengthSqr(int, ivec3)\ndecl_lengthSqr(int, ivec4)\n\n#define decl_distSqr(retType, type) retType distSqr(type a, type b) { type diff = a-b; return lengthSqr(diff); }\ndecl_distSqr(float, vec2)\ndecl_distSqr(float, vec3)\ndecl_distSqr(float, vec4)\ndecl_distSqr(int, ivec2)\ndecl_distSqr(int, ivec3)\ndecl_distSqr(int, ivec4)\n\n#define decl_floorToInt(retType, type) retType floorToInt(type a) { return retType(floor(a) + sign(a) * type(0.5)); }\ndecl_floorToInt(int, float)\ndecl_floorToInt(ivec2, vec2)\ndecl_floorToInt(ivec3, vec3)\ndecl_floorToInt(ivec4, vec4)\n    \n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}