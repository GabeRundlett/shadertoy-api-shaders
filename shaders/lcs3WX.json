{
    "Shader": {
        "info": {
            "date": "1703632273",
            "description": "A really stupid idea I had, turns out it's not hard at all to adapt a fragment shader into a generic function plotter, it looks very similar to the mechanism for mandelbrot visualization.",
            "flags": 0,
            "hasliked": 0,
            "id": "lcs3WX",
            "likes": 4,
            "name": "Rolling Function plot",
            "published": 3,
            "tags": [
                "basic",
                "function",
                "plot"
            ],
            "usePreview": 0,
            "username": "Neervana",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "#define FOO(X) cos(X + iTime) + exp(X)/10.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    uv *= 10.0;\n    float u = uv.x;\n    float v = uv.y;\n    \n    float ratio = iResolution.x / iResolution.y;\n    u *= ratio;\n    \n    fragColor = vec4(0.0f);\n    \n    if(abs(FOO(u) - v) <= 2e-2) { \n        fragColor += vec4(1.0, 0.0, 0.0, 1.0); // plot the func\n    } else if (dot(vec2(u,v),vec2(u,v)) <= 2.5e-3) { \n        fragColor += vec4(1.0, 1.0, 0.0, 1.0); // plot the origin\n    } else if(abs(u) <= 2e-2) { \n        fragColor += vec4(1.0); // plot the Y axis\n    } else if(abs(v) <= 2e-2) {\n        fragColor += vec4(1.0); // plot the X axis\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}