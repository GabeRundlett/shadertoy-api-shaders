{
    "Shader": {
        "info": {
            "date": "1695785072",
            "description": "isohedron",
            "flags": 32,
            "hasliked": 0,
            "id": "msGyz1",
            "likes": 35,
            "name": "Isohedron",
            "published": 3,
            "tags": [
                "isohedron"
            ],
            "usePreview": 1,
            "username": "wyatt",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "#define AA 0.\nfloat scene (vec3 p, vec3 d, out vec3 no, int j, vec3 m, mat3 o) {\n    float x = 1e9;\n    for (int i = 0; i < 20; i++) {\n        vec3 a = verts[tris[i][0]]*(1.-W)*o+m;\n        vec3 b = verts[tris[i][1]]*(1.-W)*o+m;\n        vec3 c = verts[tris[i][2]]*(1.-W)*o+m;\n        vec3 n = normalize(cross(b-a,c-a));\n        vec2 y;\n        y.x = iTriangle(p,d,a+W*n,b+W*n,c+W*n);\n        if (y.x > 0. && y.x < x) {\n            x = y.x;\n            no = n;\n        }\n        y = iSegment(p,d,a,b,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-a,n)>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(a+W*n-m,b+W*n-m)))<0.) {\n                x = y[j];\n                no = normal_segment(q,a,b);\n            }\n                \n        }\n        y = iSegment(p,d,b,c,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-b,n)>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(b+W*n-m,c+W*n-m)))<0.) {\n                x = y[j];\n                no = normal_segment(q,b,c);\n            }\n                \n        }\n        y = iSegment(p,d,c,a,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-c,n)>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(c+W*n-m,a+W*n-m)))<0.) {\n                x = y[j];\n                no = normal_segment(q,c,a);\n            }\n                \n        }\n        \n        y = iSphere(p,d,a,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-a,b-a)<0.&&dot(q-a,c-a)<0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.) {\n                x = y[j];\n                no = normalize(q-a);\n            } \n        }\n        y = iSphere(p,d,b,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-b,c-b)<0.&&dot(q-b,a-b)<0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.&&dot(q-m,normalize(cross(a-m,b-m)))>0.) {\n                x = y[j];\n                no = normalize(q-b);\n            } \n        }\n        y = iSphere(p,d,c,W);\n        if (y[j] > 0. && y[j] < x) {\n            vec3 q = p+d*y[j];\n            if (dot(q-c,a-c)<0.&&dot(q-c,b-c)<0.&&dot(q-m,normalize(cross(c-m,a-m)))>0.&&dot(q-m,normalize(cross(b-m,c-m)))>0.) {\n                x = y[j];\n                no = normalize(q-c);\n            } \n        }\n    }\n    no *= -(float(j)*2.-1.);\n    return x;\n}\n/*float map (vec3 p) {\n    float d = length(p)-1.-W;\n    for (int i = 0; i < 20; i++) {\n        vec3 a = verts[tris[i][0]];\n        vec3 b = verts[tris[i][1]];\n        vec3 c = verts[tris[i][2]];\n        vec3 m = 1./3.*(a+b+c);\n        vec3 no = normalize(cross(b-a,c-a));\n        m += W*no;\n        d = max(d,dot(p-m,no));\n    }\n    return d;\n\n}\nvec3 normal (vec3 p) {\n    vec2 e = vec2(1e-4,0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n    ));\n}*/\nvec4 background(vec3 p,vec3 d) {\n    float x = iPlane(p-vec3(0,-1,0),d,vec3(0,1,0));\n    vec3 q = p+d*x;\n    \n    if (x < 0.) {\n        float x = iPlane(p-vec3(0,1,0),d,vec3(0,-1,0));\n        vec3 q = p+d*x;\n        vec2 u = abs(sin(vec2(5,10)*q.xz));\n        float s = min(u.x,u.y);\n        return vec4(2)*smoothstep(0.1,0.2,s)*exp(-.2*x);\n    }\n    \n    vec2 u = abs(sin(vec2(5,10)*q.xz));\n    float s = min(u.x,u.y);\n    return vec4(3)*smoothstep(.1+.03*x,0.,s)*exp(-.3*x);\n}\nvec4 scene (vec3 p, vec3 d, float x, vec3 n, float f, vec3 m, mat3 o) {\n    vec4 Q = vec4(0);\n    d = refract(d,n,eta(f));\n    vec4 c = col(f);\n    for (float i = 0.; i < 2.; i++) {\n        c.xyz *= .9-.4*n;\n        p = p+d*x;\n        p += .01*d;\n        x = scene(p,d,n,1,m,o);\n        if (x > 1e5) {\n            Q += c*background(p,d);\n            break;\n        }\n        d = refract(d,n,eta(f));\n    }\n    return Q;\n}\nMain {\n    vec3 m = texelFetch(iChannel0,ivec2(0,0),0).xyz;\n    mat3 o = mat3(\n        texelFetch(iChannel0,ivec2(2,0),0).xyz,\n        texelFetch(iChannel0,ivec2(3,0),0).xyz,\n        texelFetch(iChannel0,ivec2(4,0),0).xyz);\n\n   \n        Q = vec4(0);\n      \n      for (float x = -AA; x <= AA; x++)\n      for (float y = -AA; y <= AA; y++) {\n        vec3 p = vec3(m.x,0,-2.3+m.z);\n        vec3 d = normalize(vec3(2.*(U-.5*R+.5/(AA==0.?1.:AA)*vec2(x,y))/R.y,1));\n        float t = -.2;\n        d.yz *= mat2(cos(t),sin(t),-sin(t),cos(t));\n        \n\n        vec3 n;\n        float x = scene(p,d,n,0,m,o);\n        if (x < 1e7) {\n            Q += .3*background(p,reflect(d,n));\n            for (float f = 0.; f < 1.; f+=.33) \n                Q += scene(p,d,x,n,f,m,o);\n\n        } else {\n            Q += background(p,d);\n            float x = iPlane(p-vec3(0,-1,0),d,vec3(0,1,0));\n            if (x > 0.) {\n                p += d*x;\n                d = reflect(d,vec3(0,1,0));\n                p += .001*d;\n                x = scene(p,d,n,0,m,o);\n                if (x < 1e7) {\n                    Q += .2*background(p,reflect(d,n));\n                    for (float f = 0.; f < 1.; f+=.5) \n                        Q += .1*scene(p,d,x,n,f,m,o);\n                } else {\n                    Q += .1*background(p,reflect(d,n));\n                }\n            } \n        }\n    }\n    Q /= (AA*2.+1.)*(AA*2.+1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define Main void mainImage(out vec4 Q, in vec2 U)\n\n#define W (.1)\n\n#define eta(f) (.8-.02*(f))\n//(.7-.02*f)\n#define col(f)  max(sin(-2.+3.1*(f)+vec4(1,2,3,4)),0.)\n//sin(-2.+3.2*(f-380.)/300.+vec4(1,2,3,4))\n\n#define phi 1.618033988749895\n#define rho 0.5257311121191336\n#define tau 0.85065080835204\n\n\n#define verts vec3[12] (\\\n    vec3(tau,rho,0), \\\n    vec3(-tau,rho,0), \\\n    vec3(tau,-rho,0), \\\n    vec3(-tau,-rho,0), \\\n    vec3(rho,0,tau), \\\n    vec3(rho,0,-tau), \\\n    vec3(-rho,0,tau), \\\n    vec3(-rho,0,-tau), \\\n    vec3(0,tau,rho), \\\n    vec3(0,-tau,rho), \\\n    vec3(0,tau,-rho), \\\n    vec3(0,-tau,-rho)) \n\n#define tris ivec3[20] (\\\n    ivec3(0,8,4), \\\n    ivec3(0,5,10), \\\n    ivec3(2,4,9),  \\\n    ivec3(2,11,5), \\\n    ivec3(1,6,8),  \\\n    ivec3(1,10,7), \\\n    ivec3(3,9,6),  \\\n    ivec3(3,7,11), \\\n    ivec3(0,10,8), \\\n    ivec3(1,8,10), \\\n    ivec3(11,2,9), \\\n    ivec3(9,3,11), \\\n    ivec3(4,2,0),  \\\n    ivec3(5,0,2),  \\\n    ivec3(6,1,3),  \\\n    ivec3(7,3,1),  \\\n    ivec3(8,6,4),  \\\n    ivec3(9,4,6),  \\\n    ivec3(10,5,7), \\\n    ivec3(11,7,5))\n   \nmat3 matrix (vec3 r) { \n   if (length(r)==0.) return mat3(1);\n   float a = length(r);\n   vec3 o = normalize(r);\n   float c = cos(a), t = 1.-c;\n   float s = sin(a);\n   return mat3(\n       t*o.x*o.x+c,t*o.x*o.y-o.z*s,t*o.x*o.z+o.y*s,\n       t*o.x*o.y+o.z*s,t*o.y*o.y+c,t*o.y*o.z-o.x*s,\n       t*o.x*o.z-o.y*s,t*o.y*o.z+o.x*s,t*o.z*o.z+c\n   \n   );\n}\n    \nvec2 iSphere (vec3 p, vec3 d, vec3 m, float r) {\n\n    p -= m;\n    \n    float b = 2.*dot(p,d);\n    float c = dot(p,p)-r*r;\n    float s = (b*b-4.*c);\n    if (s < 0.) return vec2(1e9);\n    else return vec2(.5*(-b-sqrt(s)),.5*(-b+sqrt(s)));\n\n}\nvec3 normal_segment (vec3 q, vec3 a, vec3 b) {\n    return normalize(q - a - (b-a)*clamp(dot(q-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec2 iSegment (vec3 p, vec3 d, vec3 a, vec3 b, float r) {    \n    vec3 q = p-a;\n    vec3 u = b-a;\n    float du = dot(d,u);\n    float uu = dot(u,u);\n    float qu = dot(q,u);\n    float dq = dot(d,q);\n    float qq = dot(q,q);\n    float a_ = 1. - du*du/uu;\n    float b_ = 2.*(dq - qu*du/uu);\n    float c_ = qq - qu*qu/uu - r*r;\n    float s = b_*b_-4.*a_*c_;\n    if (s < 0.) return vec2(1e9);\n    vec2 i = vec2(\n        (-b_-sqrt(s))/(2.*a_),\n        (-b_+sqrt(s))/(2.*a_));\n    float x = dot(p+d*i.x-a,u)/uu;\n    if (x < 0. || x > 1.) i.x = 1e9;\n    x = dot(p+d*i.y-a,u)/uu;\n    if (x < 0. || x > 1.) i.y = 1e9;\n    return i;\n}\nfloat iPlane (vec3 p, vec3 d, vec3 n) {\n    return -dot(p,n)/dot(d,n);\n}\nfloat iTriangle (vec3 p, vec3 d, vec3 a, vec3 b, vec3 c) {\n    vec3 n = normalize(cross(b-a,c-a));\n    float i = -dot(p-a,n)/dot(d,n);\n    vec3 x = p + d*i;\n    float ab = dot(x-a,cross(n,normalize(b-a)));\n    float bc = dot(x-b,cross(n,normalize(c-b)));\n    float ca = dot(x-c,cross(n,normalize(a-c)));\n    if (ab<0.||bc<0.||ca<0.) return 1e9;\n    return i;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n    int x = int(U.x);\n    int y = int(U.y);\n    if (x>5 || y > 0) discard;\n    \n    vec3 m = texelFetch(iChannel0,ivec2(0,0),0).xyz;\n    vec3 v = texelFetch(iChannel0,ivec2(1,0),0).xyz;\n    mat3 o = mat3(\n        texelFetch(iChannel0,ivec2(2,0),0).xyz,\n        texelFetch(iChannel0,ivec2(3,0),0).xyz,\n        texelFetch(iChannel0,ivec2(4,0),0).xyz);\n    vec3 s =  texelFetch(iChannel0,ivec2(5,0),0).xyz;\n    for (float i = 0.; i < 100.; i++) {\n        vec3 f = vec3(0,-1e-4,0);\n        vec3 t = vec3(0);\n\n        for (int i = 0; i < 12; i++) {\n            vec3 q = verts[i]*(1.-W)*o+m;\n            vec3 p = q-vec3(0,-W-1.,0);\n            if (p.y < 0.) {\n                vec3 df = vec3(0,p.y,0);\n                vec3 dv = v + cross(s,p-m);\n                df += .01*dv;\n                f += df * dot(normalize(df),normalize(p-m));\n                t += cross(df,p-m);\n            }\n        }\n        #define dt .05\n        #define da 0.5\n        v += dt*f;\n        m += dt*(da*f+v);\n        s += dt*t;\n        o *= matrix(dt*(da*t+s));\n        o[0] = normalize(cross(o[1],o[2]));\n        o[1] = normalize(cross(o[2],o[0]));\n        o[2] = normalize(cross(o[0],o[1]));\n    }\n    \n    if (iFrame < 1) {\n        m = vec3(0,1,0);\n        v = vec3(.01,0,-.01);\n        o = mat3(1);\n        s = vec3(-.02);\n    }\n    \n    if (x == 0) Q = vec4(m,1);\n    if (x == 1) Q = vec4(v,1);\n    if (x == 2) Q = vec4(o[0],1);\n    if (x == 3) Q = vec4(o[1],1);\n    if (x == 4) Q = vec4(o[2],1);\n    if (x == 5) Q = vec4(s,1);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}