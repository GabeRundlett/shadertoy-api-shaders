{
    "Shader": {
        "info": {
            "date": "1546781889",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "tdl3RB",
            "likes": 0,
            "name": "CGK b",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "FrostHard",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat Rectangle(vec2 uv, vec2 pos, float width, float height) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn t;\n}\n\n\nfloat Circle(vec2 uv, vec2 p, float r, float blur)\n{\n    float d = length(uv-p);\n    float c = smoothstep(r, r-blur, d);\n    return c;\n}\n\nfloat Triangle(vec2 p, vec2 rp)\n{\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    p = p *2.-1.;\n\n    int N = 3;\n\n    float a = atan(p.x,p.y)+PI;\n    float r = TWO_PI/float(N);\n\n\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    return 1.0-step(.14,d);\n}\n\nfloat SecTriangle(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    p = p *2.-1.;\n    \n    int N = 3;\n\n    float a = atan(p.x,p.y)+PI;\n    float r = TWO_PI/float(N);\n\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    return 1.0-step(.125,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    \n    float CircleFill = Circle(uv, vec2(0.4, 0.75), 0.16, 0.001); \t//fill circle\n   \n    float CircleUnfill = Circle(uv, vec2(0.4, 0.3), 0.16, 0.001);   //no-fill circle\n    CircleUnfill -= Circle(uv, vec2(0.4, 0.3), 0.15, 0.01);\n    \n    CircleUnfill += CircleFill;\n\n    \n    float RectangleFill = Rectangle(uv, vec2(0.9, 0.75), 0.3, 0.3); //fill rectangle\n    \n    float RectangleUnfill = Rectangle(uv, vec2(0.9, 0.3), 0.3, 0.3); //no-fill rectangle\n\tRectangleUnfill -= Rectangle(uv, vec2(0.9, 0.3), 0.28, 0.28);\n    \n    RectangleUnfill += RectangleFill;\n\n    \n\tfloat TriangleFill = Triangle(uv, vec2(0.9, -0.11)); \t\t\t//fill tirangle\n    \n    float TriangleUnfill = Triangle(uv, vec2(0.9, -0.355));  \t\t//no-fill triangle\n\tTriangleUnfill -= SecTriangle(uv, vec2(0.9, -0.355));\n    \n    TriangleUnfill += TriangleFill;\n    \n    col = vec3(1.0, 0., 0.) * RectangleUnfill;\n    col += vec3(1.0, 0., 0.) * CircleUnfill;\n\tcol += vec3(1.0, 0., 0.) * TriangleFill;\n    col += vec3(1.0, 0., 0.) * TriangleUnfill;\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}