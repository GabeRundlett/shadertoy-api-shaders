{
    "Shader": {
        "info": {
            "date": "1586117581",
            "description": "A version of the night skyline shader. This is essentially a mash-up of three different shaders with some tweaks:\nSkyline: https://www.shadertoy.com/view/4tXSRM\nRays: https://www.shadertoy.com/view/4djBDR\nHexagon: https://www.shadertoy.com/view/lsBfRc",
            "flags": 96,
            "hasliked": 0,
            "id": "ws2yRh",
            "likes": 7,
            "name": "Night Skyline Buffered",
            "published": 3,
            "tags": [
                "night",
                "buffer",
                "skyline"
            ],
            "usePreview": 0,
            "username": "unclenorton",
            "viewed": 499
        },
        "renderpass": [
            {
                "code": "// Based off https://www.shadertoy.com/view/4tXSRM\n\n#define MAX_DEPTH 20\n\n// Courtesy of http://www.science-and-fiction.org/rendering/noise.html\nfloat noise(vec2 p) {\n\treturn fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 456367.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Scale coordinates to [0, 1]\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    vec4 vCol = vec4(0.);\n    vec4 peaks = vec4(1.);\n    \n    // Start from the back buildings and work forward, so buildings in the front cover the ones in the back\n    \n    int shootingLevel = int(floor(noise(vec2(float(iFrame))) * float(MAX_DEPTH)));\n    \n\tfor (int i = 1; i < MAX_DEPTH; i++) {\n        // This is really \"inverse\" depth since we start from the back\n\t\tfloat depth = float(i);\n        \n        // Create a step function where the width of each step is constant at each depth, but increases as\n        // the depth increases (as we move forward). We will get the same step value for multiple p.x\n        // values, which will give our building width. iTime creates the scrolling effect.\n\t\tfloat step = floor(400. * p.x / depth + 100. * depth + iTime);\n        \n        // Use the noise function to get the y coordinate of the top of the building, and decrease this\n        // height the closer we are to the front. If our pixel is below this height, we set its color\n        // depending on it's depth. \n        float threshold = noise(vec2(step)) - depth * .04;\n\t\tif (p.y <= threshold) {\n            if (threshold - p.y < 0.001) {\n                // Draw the lights on top\n                vCol = vec4(1., 0.9, 0.2, 1.0) * noise(vec2(p.y));\n            } else {\n                // Generate a randomised base color\n                vec4 randomColor = vec4(noise(vec2(step / 50.))*.7, 0.1, noise(vec2(step / 10.))*1.25, 1.0);\n                // Apply the color as a gradient\n\t\t\t\tvCol = randomColor * vec4(depth / 6. * p.y) * noise(vec2(step));\n            }\n\t\t}\n\n        if (i == 7) {\n            vec4 triangle = texelFetch(iChannel1, ivec2(fragCoord),0);\n            vCol += vec4(triangle.x / 1.5 + 0.01, triangle.y / 1.2, triangle.z + 0.05, 0.);\n        }\n        \n        if (i == shootingLevel - 5) {\n        \tpeaks = texelFetch(iChannel0, ivec2(fragCoord),0);\n        \tvCol += vec4(peaks.x, peaks.y * noise(vec2(step/10.)), peaks.z * 0.15, 1.);\n        }\n\t}\n    \n    //fragColor = vec4(vCol, 1.);\n    fragColor = vec4(vCol.x, vCol.y, vCol.z, 1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Based on https://www.shadertoy.com/view/4djBDR\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    f.xyz = iResolution;\n    vec2 v = (g+g-f.xy)/f.y*10.;\n    f *= texture(iChannel0, g/f.xy) / length(f);\n    g = vec2(iFrame/50 + 10, iFrame/5);\n    g = v - sin(g) * fract(iTime*.1 + 10.*sin(g))*50.;\n    f += .05 / max(abs(g.x), g.y);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Based on https://www.shadertoy.com/view/lsBfRc\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat getTriangle(vec2 p, vec2 rp) {\n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n    \n    // the sound texture is 512x2\n    int tx = int(p.y*512.0);\n    \n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n\n    // Number of sides of your shape\n    // FIXME: this is not achieving the result intended\n    int N = int(5. + smoothstep(wave, wave + 0.1, 1.) * 1.);\n\n    // Angle and radius from the current pixel\n    float a = atan(p.x,p.y)+PI * abs(sin(wave/16.)) - iTime / 1.5;\n    float r = TWO_PI/float(N);\n\n    // Shaping function that modulate the distance\n    d = cos(floor(sin(iTime)+a/r)*r-a)*length(p);\n\n    return smoothstep(.15,d,0.)-smoothstep(.144,d, 0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ctr = uv - vec2(0.5,0.65);\n    // Make it a circle by applying the aspect ratio\n    ctr.x *= iResolution.x / iResolution.y;\n\n    float triangle = getTriangle(ctr, vec2(0.0, -0.25 + sin(iTime)/10.));\n    fragColor = vec4(triangle);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21792,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/subroomerrecords/cihangir-aslan-rituel"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}