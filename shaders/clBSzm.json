{
    "Shader": {
        "info": {
            "date": "1675807724",
            "description": "8 rank convolution. WASD QE and mouse to move. Press R to stop movement.",
            "flags": 48,
            "hasliked": 0,
            "id": "clBSzm",
            "likes": 19,
            "name": "JWST diffraction kernel",
            "published": 3,
            "tags": [
                "camera",
                "svd"
            ],
            "usePreview": 1,
            "username": "michael0884",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "#define exposure 2.5\n#define sqrexposure 0.5\n#define gamma 1.3\n#define bloom 10.0\n\nvec3 expose(vec3 c)\n{\n    return 1.0 - exp(-exposure*(1.0+sqrexposure*c)*c);\n}\n\nvec3 saturate(vec3 c)\n{\n    return pow(expose(c),vec3(1.0/gamma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 convol = texture(iChannel1, 0.5*fragCoord/iResolution.xy);\n    \n    vec3 col = 1.0*acc.xyz/acc.w + bloom*convol.xyz;\n\n    fragColor = vec4(saturate(col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force = 10.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = get(CamP).w;\n    if(pressed(keyR)) mode = 1.0 - mode;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        mode = 1.0;\n        cp =  vec3(6,6,5);\n        ca = aa2q( normalize(vec3(0.0,1,0.)), -1.15);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv + 5.0*iTimeDelta*vec3(1,0,0)*mode;\n    cv += -cv*tanh(1.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 0.8\n#define MAX_STEPS 256\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nfloat CAM_ANGLE = 0.003;\n\n// basic parameters\nfloat R = 2.1;\t\t\t\t\t\t\t\t// planet radius\nfloat H = 0.1;\t\t\t\t\t\t\t// density scale-height of atmosphere (not pressure scale height)\n\nvec3 light = normalize(vec3(1,0.8,-0.6));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\nvec4 project(mat3 cam_mat, vec3 cam_pos, vec2 iRes, vec3 p)\n{\n    float td = distance(cam_pos, p);\n    vec3 dir = (p - cam_pos)/td;\n    vec3 screen = dir*cam_mat;\n    return vec4(screen.xy*iRes.y/(FOV*screen.z) + 0.5*iRes.xy, screen.z, td);\n}\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n//center of the convolution \nint Nc = 128; \n//number of ranks \nint Nr = 8; \n//convolution size \nint N = 257; \n\n\n\n\n\nvec3 pack2vec3(vec3 a, vec3 b) \n{\n    uvec3 packed = uvec3(packHalf2x16(vec2(a.x,b.x)), packHalf2x16(vec2(a.y,b.y)), packHalf2x16(vec2(a.z,b.z)));\n    return vec3(uintBitsToFloat(packed.x), uintBitsToFloat(packed.y), uintBitsToFloat(packed.z));\n}\n\nvoid unpack2vec3(vec3 packed, out vec3 a, out vec3 b) \n{\n    uvec3 unpacked = uvec3(floatBitsToUint(packed.x), floatBitsToUint(packed.y), floatBitsToUint(packed.z));\n    vec2 unpackedA = unpackHalf2x16(unpacked.x);\n    vec2 unpackedB = unpackHalf2x16(unpacked.y);\n    vec2 unpackedC = unpackHalf2x16(unpacked.z);\n    a = vec3(unpackedA.x, unpackedB.x, unpackedC.x);\n    b = vec3(unpackedA.y, unpackedB.y, unpackedC.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SLICES 150.0\n\nvec2 pixPos;\nmat3 cammat;\nvec3 campos;\n\nfloat k1(vec2 dx) //quadratic kernel\n{\n    vec2 f = max(1.5 - abs(dx), 0.0);\n    vec2 k = min(max(0.75 - dx*dx, 0.5), 0.5*f*f);\n    return k.x*k.y;\n}\n\nfloat minimum_distance(vec3 v, vec3 w, vec3 p) \n{\n  vec3 dx = w - v;\n  float l2 = dot(dx, dx);  \n  if (l2 == 0.0) return distance(p, v);   \n  float t = max(0.0, min(1.0, dot(p - v, w - v) / l2));\n  vec3 projection = v + t * (w - v);\n  return distance(p, projection);\n}\n\nvec3 blackBody(float T)\n{\n    vec3 O = vec3(0.0);\n    for (float i=0.; i<3.; i++) \n    { \n        float f = 1.+.5*i; \n        O[int(i)] += 10. * (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    return O;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat region(vec3 pos)\n{\n    return texture(iChannel1, pos/200.0).x;\n}\n\n//vec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n//{\n//    float r = region(pos);\n//    if(r < 0.5) return vec3(0.0);\n//    float temp = hash13(pos);\n//    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n//    vec3 spos = hash33(pos) + pos;\n//    vec4 screenPos = project(cammat, campos, iResolution.xy, spos);\n//    if(screenPos.z < 0.0) return vec3(0.0);\n//    float distr = k1(screenPos.xy - pixPos);\n//    return 100.0*heat * distr / (screenPos.w*screenPos.w);\n//}\n//\n\nvec3 sampleVoxel(vec3 ro, vec3 rd, vec3 pos)\n{\n    float r = region(pos);\n    if(r < 0.5) return vec3(0.0);\n    float temp = hash13(pos);\n    vec3 heat = pow(blackBody(temp*temp*temp*20000.), vec3(1.0));\n    vec3 spos = hash33(pos) + pos;\n    float mdist = minimum_distance(ro, ro + rd*100.0, spos);\n    float camdist = distance(ro, spos);\n    float mindist = 1.25*CAM_ANGLE*camdist;\n    float dec = smoothstep(SLICES, SLICES*0.8, camdist);\n    float bright = min(1000.0, 20.0 * dec * pow(camdist, -2.25));\n    bright /= 1e5 * CAM_ANGLE * CAM_ANGLE;\n    return bright * smoothstep(mindist, 0.0, mdist) * heat;\n}\n\nvec3 VoxelRaycast(vec3 ro, vec3 rd, float maxt)\n{\n\tvec3 voxelPos = floor(ro);\n\t\n    vec3 rayInv = 1.0/rd;\n    vec3 rayMask = vec3(greaterThan(rd, vec3(0.0)));\n\tvec3 rayStep = rayMask * 2.0 - 1.0;          \n\tvec3 offset = (rayMask - ro) * rayInv;\n\n\tvec3 mask = vec3(0.0);\n    vec3 sideLength = vec3(0.0);\n    \n    float traveled = 0.0;\n    vec3 col = vec3(0.0);\n\tfor(int i = 0; i < MAX_STEPS; i++) \n\t{\n        col += sampleVoxel(ro, rd, voxelPos);\n        \n        sideLength = voxelPos * rayInv + offset;\n        mask = vec3(lessThanEqual(sideLength.xyz, min(sideLength.yzx, sideLength.zxy)));\n        voxelPos += mask * rayStep;\n        traveled = dot(sideLength, mask);\n        \n        if(traveled > maxt) break;\n\t}\n    \n    ro = ro + rd*traveled;\n\treturn col;\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    cammat = cam;\n    \n    ro = get(CamP).xyz;\n    campos = ro;\n   \n    rd = normalize(cam*vec3(FOV*uv, 1.0));\n    \n    return true;\n}\n\nvec4 render(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    return vec4(VoxelRaycast(cp, rd, SLICES), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAM_ANGLE = 1.5 * FOV / iResolution.y;\n    fragColor = vec4(0.0);   \n    pixPos = floor(fragCoord);\n\n    fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//The first 8 columns of the U matrix: \nfloat U[2056] = float[](-9.3064E-09, -6.2540E-08, -1.5059E-07, -2.3127E-07, -2.7403E-07, -5.2400E-07, -5.5717E-07, -9.1952E-07, -1.0750E-06, -1.4150E-06, -2.2412E-06, -1.9396E-06, -2.9631E-06, -2.9163E-06, -4.3048E-06, -4.1777E-06, -4.5402E-06, -6.0569E-06, -6.0295E-06, -5.7045E-06, -6.9944E-06, -7.1242E-06, -1.0138E-05, -8.6457E-06, -9.6396E-06, -9.9045E-06, -1.0078E-05, -1.2042E-05, -1.1283E-05, -1.5585E-05, -1.7810E-05, -2.2608E-05, -1.9362E-05, -2.0662E-05, -2.4483E-05, -2.3685E-05, -2.9598E-05, -2.7160E-05, -2.7089E-05, -3.0545E-05, -2.7670E-05, -3.2719E-05, -3.4402E-05, -3.9286E-05, -4.5235E-05, -3.8583E-05, -5.2800E-05, -5.3293E-05, -6.6001E-05, -7.1495E-05, -8.0322E-05, -1.1989E-04, -1.3727E-04, -1.9703E-04, -2.1405E-04, -1.6042E-04, -1.1367E-04, -8.8173E-05, -8.8935E-05, -9.0152E-05, -7.5974E-05, -7.2682E-05, -7.1070E-05, -8.7405E-05, -7.8979E-05, -8.4043E-05, -9.3202E-05, -8.5261E-05, -1.1158E-04, -1.0233E-04, -1.2993E-04, -1.4479E-04, -1.3892E-04, -1.3907E-04, -1.4622E-04, -1.6743E-04, -1.4466E-04, -1.2868E-04, -1.3772E-04, -1.1461E-04, -1.6713E-04, -1.4149E-04, -1.5203E-04, -1.8411E-04, -1.5997E-04, -2.2362E-04, -1.7661E-04, -2.0551E-04, -2.2219E-04, -2.0751E-04, -3.0568E-04, -2.3044E-04, -3.3501E-04, -3.1015E-04, -2.9176E-04, -3.8539E-04, -2.9827E-04, -4.7527E-04, -3.8477E-04, -4.4127E-04, -5.5885E-04, -4.2880E-04, -6.8351E-04, -5.3125E-04, -7.4962E-04, -7.8321E-04, -6.7458E-04, -1.0590E-03, -8.9178E-04, -1.2075E-03, -1.1826E-03, -1.3100E-03, -1.8179E-03, -1.3229E-03, -2.2260E-03, -2.0777E-03, -2.5748E-03, -3.3302E-03, -2.7391E-03, -5.1881E-03, -4.5199E-03, -6.4976E-03, -8.4863E-03, -1.0205E-02, -1.8293E-02, -2.0276E-02, -5.1332E-02, -1.0302E-01, -3.8991E-01, -8.9230E-01, -1.7511E-01, -7.1701E-02, -2.8345E-02, -1.9877E-02, -1.4541E-02, -8.4724E-03, -8.3735E-03, -4.5405E-03, -5.2439E-03, -4.1029E-03, -2.7074E-03, -3.2085E-03, -2.0085E-03, -2.2688E-03, -1.6377E-03, -1.5444E-03, -1.7023E-03, -1.0290E-03, -1.3318E-03, -9.2632E-04, -9.6685E-04, -8.7533E-04, -6.4284E-04, -8.5999E-04, -5.4536E-04, -6.2960E-04, -5.2681E-04, -4.5685E-04, -5.6283E-04, -3.0901E-04, -4.6167E-04, -3.6283E-04, -3.4338E-04, -3.7569E-04, -2.6645E-04, -3.4781E-04, -2.5711E-04, -2.6070E-04, -2.5827E-04, -2.0279E-04, -2.2348E-04, -1.6857E-04, -1.9412E-04, -1.8988E-04, -1.5623E-04, -1.9587E-04, -1.3820E-04, -1.4906E-04, -1.2022E-04, -1.2726E-04, -1.4707E-04, -1.2261E-04, -1.5475E-04, -1.4258E-04, -1.4259E-04, -1.6048E-04, -1.2518E-04, -1.3455E-04, -9.9203E-05, -1.0236E-04, -9.0931E-05, -8.7813E-05, -9.0421E-05, -7.1139E-05, -7.7971E-05, -7.5347E-05, -8.5782E-05, -7.8262E-05, -6.8164E-05, -8.1663E-05, -8.1907E-05, -1.0434E-04, -1.4692E-04, -1.7910E-04, -1.6772E-04, -1.6669E-04, -1.3029E-04, -9.7845E-05, -6.0614E-05, -7.3569E-05, -4.4654E-05, -5.4878E-05, -4.2640E-05, -3.6700E-05, -4.3361E-05, -3.2807E-05, -3.4691E-05, -2.7142E-05, -2.6248E-05, -2.7811E-05, -2.4929E-05, -2.8542E-05, -2.5334E-05, -2.3407E-05, -1.9489E-05, -1.7362E-05, -1.8950E-05, -1.7667E-05, -1.7138E-05, -1.1694E-05, -1.0025E-05, -1.0489E-05, -6.5946E-06, -9.9687E-06, -7.1640E-06, -7.7112E-06, -7.9783E-06, -5.5467E-06, -5.7275E-06, -4.8617E-06, -4.2642E-06, -4.4404E-06, -3.7847E-06, -3.6126E-06, -2.3716E-06, -2.2540E-06, -1.9219E-06, -1.2920E-06, -1.3847E-06, -8.3414E-07, -7.3553E-07, -3.8079E-07, -3.0459E-07, -2.1531E-07, -8.8954E-08, -4.9293E-08, -4.3864E-09, 3.5171E-08, 4.2677E-07, 1.2969E-06, 2.5588E-06, 3.3606E-06, 5.4889E-06, 5.2288E-06, 8.8158E-06, 8.7014E-06, 1.1632E-05, 1.3313E-05, 1.5837E-05, 2.2171E-05, 1.9731E-05, 2.0717E-05, 2.9061E-05, 2.8519E-05, 4.0770E-05, 3.3416E-05, 5.0070E-05, 5.5039E-05, 5.2224E-05, 5.6117E-05, 4.9213E-05, 7.7858E-05, 7.8831E-05, 8.8486E-05, 1.0404E-04, 9.7901E-05, 1.1819E-04, 9.1643E-05, 9.9139E-05, 1.4181E-04, 1.4605E-04, 1.5715E-04, 1.2900E-04, 1.6623E-04, 1.7490E-04, 2.0336E-04, 2.5294E-04, 2.5845E-04, 3.0347E-04, 2.4645E-04, 2.7118E-04, 3.4176E-04, 3.3835E-04, 5.1916E-04, 5.1435E-04, 6.6496E-04, 8.0565E-04, 8.2884E-04, 9.1205E-04, 7.7707E-04, 2.6753E-04, 3.2313E-04, 7.0171E-04, 1.2009E-03, 1.0483E-03, 1.0909E-03, 9.4828E-04, 7.9332E-04, 7.0330E-04, 5.8185E-04, 6.4055E-04, 6.6651E-04, 6.5904E-04, 7.1506E-04, 6.7243E-04, 7.8931E-04, 7.2041E-04, 8.7447E-04, 7.2110E-04, 7.1315E-04, 8.6362E-04, 9.1776E-04, 8.9942E-04, 1.0028E-03, 1.0883E-03, 1.0873E-03, 8.5473E-04, 1.1839E-03, 1.0135E-03, 1.1057E-03, 1.1591E-03, 9.2415E-04, 1.4324E-03, 1.2111E-03, 1.4952E-03, 1.5789E-03, 1.4688E-03, 1.8758E-03, 1.4014E-03, 2.0951E-03, 2.0425E-03, 2.0373E-03, 2.7273E-03, 2.0167E-03, 3.2796E-03, 2.5827E-03, 3.0799E-03, 3.7594E-03, 2.9366E-03, 4.9786E-03, 3.9050E-03, 5.1299E-03, 5.7414E-03, 4.7616E-03, 7.8634E-03, 6.1746E-03, 8.7676E-03, 8.5059E-03, 9.7180E-03, 1.3732E-02, 1.0752E-02, 1.8192E-02, 1.6915E-02, 2.1593E-02, 2.8166E-02, 2.5810E-02, 4.7912E-02, 4.4558E-02, 6.9142E-02, 8.9637E-02, 1.2760E-01, 2.0665E-01, 2.7686E-01, 4.1574E-01, 3.6093E-01, 1.7203E-01, -2.5734E-01, 2.5116E-01, 3.8555E-01, 3.4884E-01, 2.3459E-01, 1.7246E-01, 9.9997E-02, 8.5828E-02, 5.1922E-02, 4.8119E-02, 3.7009E-02, 2.4275E-02, 2.7718E-02, 1.6803E-02, 1.8347E-02, 1.3145E-02, 1.1765E-02, 1.2657E-02, 7.8493E-03, 9.6836E-03, 6.9086E-03, 6.9126E-03, 6.7425E-03, 4.5163E-03, 6.1017E-03, 3.8587E-03, 4.4799E-03, 3.7681E-03, 3.2232E-03, 3.9917E-03, 2.2282E-03, 3.2221E-03, 2.4925E-03, 2.2692E-03, 2.5132E-03, 1.6852E-03, 2.2603E-03, 1.5006E-03, 1.6700E-03, 1.7988E-03, 1.4164E-03, 1.7099E-03, 1.1904E-03, 1.4134E-03, 1.1733E-03, 8.8708E-04, 1.2537E-03, 9.3735E-04, 1.0841E-03, 9.4647E-04, 1.0039E-03, 1.2043E-03, 8.8995E-04, 1.0127E-03, 7.6837E-04, 7.8775E-04, 7.7903E-04, 6.8945E-04, 8.4129E-04, 7.4891E-04, 7.8360E-04, 7.3610E-04, 6.4501E-04, 7.3493E-04, 5.6729E-04, 6.1499E-04, 5.8573E-04, 6.6431E-04, 7.8332E-04, 7.4000E-04, 8.8023E-04, 1.0607E-03, 1.0868E-03, 9.4641E-04, 5.6601E-04, 4.2500E-04, 5.0860E-04, 7.0311E-04, 8.3651E-04, 7.9226E-04, 6.8295E-04, 5.4530E-04, 5.0992E-04, 4.0465E-04, 3.4238E-04, 3.2407E-04, 2.3603E-04, 2.6421E-04, 2.2088E-04, 2.1665E-04, 2.2914E-04, 1.4495E-04, 1.6772E-04, 1.4397E-04, 1.3976E-04, 1.6064E-04, 1.1765E-04, 1.2956E-04, 8.9347E-05, 7.8016E-05, 1.0216E-04, 8.8248E-05, 8.5440E-05, 7.0123E-05, 7.4126E-05, 5.6697E-05, 5.4190E-05, 4.0393E-05, 3.6508E-05, 3.9030E-05, 3.3597E-05, 3.0583E-05, 3.0322E-05, 2.3019E-05, 2.1637E-05, 1.8472E-05, 1.7127E-05, 1.2944E-05, 1.0308E-05, 9.5219E-06, 5.6610E-06, 6.4478E-06, 3.8970E-06, 3.3005E-06, 1.9147E-06, 1.1174E-06, 4.7539E-07, 4.5651E-08, -9.2334E-10, 2.4972E-07, 1.1577E-06, 2.9916E-06, 5.5214E-06, 1.0271E-05, 1.2051E-05, 1.6849E-05, 1.4339E-05, 1.9313E-05, 2.5745E-05, 2.4405E-05, 2.6430E-05, 3.1941E-05, 3.3786E-05, 4.3321E-05, 3.3970E-05, 6.2722E-05, 5.2148E-05, 7.0326E-05, 5.9120E-05, 7.7766E-05, 1.0390E-04, 9.1284E-05, 9.6064E-05, 1.3979E-04, 1.5955E-04, 1.6420E-04, 1.2613E-04, 1.1183E-04, 1.6481E-04, 2.0535E-04, 1.6224E-04, 1.3142E-04, 2.5674E-04, 1.8007E-04, 2.7414E-04, 2.6782E-04, 2.5547E-04, 4.0871E-04, 4.3607E-04, 5.1930E-04, 4.7116E-04, 5.9741E-04, 7.2474E-04, 7.5999E-04, 1.0295E-03, 1.1771E-03, 1.0837E-03, 9.9629E-04, 6.3170E-04, 4.8577E-05, -1.9636E-04, 3.6019E-04, 3.3921E-04, -2.3040E-04, 3.0531E-04, 9.9825E-04, 1.9631E-03, 1.6888E-03, 1.7386E-03, 1.6564E-03, 1.4702E-03, 1.4198E-03, 1.3383E-03, 1.3160E-03, 1.3540E-03, 1.3840E-03, 1.2461E-03, 1.1557E-03, 1.1063E-03, 1.0708E-03, 1.0255E-03, 8.5328E-04, 5.5944E-04, 1.3049E-03, 1.3507E-03, 1.3797E-03, 1.6403E-03, 1.4701E-03, 2.0467E-03, 1.6485E-03, 1.6534E-03, 1.9465E-03, 1.8042E-03, 2.2215E-03, 1.9918E-03, 2.3378E-03, 2.4119E-03, 2.1647E-03, 3.0505E-03, 2.2893E-03, 3.1362E-03, 3.2091E-03, 3.0542E-03, 4.1399E-03, 3.5876E-03, 5.1739E-03, 4.4485E-03, 4.8818E-03, 6.2791E-03, 5.7110E-03, 7.7495E-03, 7.0872E-03, 8.6215E-03, 9.8857E-03, 9.2615E-03, 1.2612E-02, 1.1844E-02, 1.6150E-02, 1.6484E-02, 1.8616E-02, 2.5363E-02, 2.3757E-02, 3.4678E-02, 3.6735E-02, 4.8014E-02, 6.1698E-02, 6.6640E-02, 1.0356E-01, 1.1416E-01, 1.5730E-01, 1.9516E-01, 2.8001E-01, 2.7381E-01, 2.4274E-01, -1.4101E-01, -2.9951E-01, -1.2069E-01, 1.5289E-01, -4.0340E-01, -2.2966E-01, 8.6873E-02, 2.9394E-01, 2.9900E-01, 2.3692E-01, 1.7412E-01, 1.3967E-01, 1.1032E-01, 8.5725E-02, 5.9477E-02, 5.7403E-02, 3.9256E-02, 3.6738E-02, 2.7286E-02, 2.3159E-02, 2.3113E-02, 1.5533E-02, 1.7433E-02, 1.2490E-02, 1.2371E-02, 1.0811E-02, 8.3322E-03, 1.0572E-02, 6.4294E-03, 7.4343E-03, 6.2322E-03, 5.5555E-03, 6.3506E-03, 3.8667E-03, 5.1382E-03, 3.9190E-03, 3.6786E-03, 3.9425E-03, 2.8186E-03, 3.3337E-03, 2.5706E-03, 2.5569E-03, 2.5981E-03, 1.9889E-03, 2.5687E-03, 1.8076E-03, 2.1021E-03, 1.8949E-03, 1.6327E-03, 1.9549E-03, 1.5103E-03, 1.6732E-03, 1.7306E-03, 1.8637E-03, 1.9140E-03, 1.2145E-03, 1.1094E-03, 9.7197E-04, 9.3136E-04, 9.2626E-04, 8.8649E-04, 1.0207E-03, 9.7676E-04, 1.1313E-03, 1.2131E-03, 1.2489E-03, 1.3805E-03, 1.1343E-03, 1.2767E-03, 1.1708E-03, 1.3963E-03, 1.6928E-03, 1.7217E-03, 1.7350E-03, 1.0668E-03, 5.6205E-04, 4.0940E-05, 5.2843E-05, 1.3265E-04, -1.6447E-04, 1.1861E-04, 3.9343E-04, 6.8418E-04, 1.0386E-03, 1.1351E-03, 9.8810E-04, 8.7034E-04, 6.6820E-04, 6.6167E-04, 5.3432E-04, 5.1216E-04, 4.1117E-04, 3.2392E-04, 3.4715E-04, 2.6009E-04, 2.8756E-04, 1.8877E-04, 2.1460E-04, 1.4377E-04, 1.3760E-04, 1.5953E-04, 1.4757E-04, 1.5888E-04, 1.2631E-04, 1.1680E-04, 1.4293E-04, 1.2183E-04, 1.2673E-04, 8.1653E-05, 7.1054E-05, 8.9659E-05, 6.5717E-05, 6.8444E-05, 4.6072E-05, 4.5492E-05, 4.1313E-05, 3.3751E-05, 3.6720E-05, 2.1536E-05, 2.3924E-05, 2.0777E-05, 1.6075E-05, 1.6894E-05, 1.4028E-05, 1.1773E-05, 8.0451E-06, 6.4432E-06, 3.6616E-06, 1.7800E-06, 3.1056E-07, 2.1444E-08, -8.8101E-09, -2.2756E-07, 4.6411E-07, 1.2807E-06, 4.1841E-06, 7.9251E-06, 1.7628E-05, 2.6259E-05, 3.8596E-05, 4.3385E-05, 5.1168E-05, 5.2854E-05, 6.3953E-05, 6.3430E-05, 6.8681E-05, 8.3864E-05, 8.6535E-05, 8.7790E-05, 7.9514E-05, 1.0879E-04, 1.0899E-04, 1.5809E-04, 1.9008E-04, 1.8245E-04, 2.2666E-04, 2.3982E-04, 2.5071E-04, 2.5390E-04, 2.4480E-04, 3.6244E-04, 3.2275E-04, 3.1738E-04, 3.6860E-04, 3.9775E-04, 4.2472E-04, 4.3661E-04, 5.8366E-04, 6.6332E-04, 7.4143E-04, 9.2564E-04, 9.2342E-04, 1.2071E-03, 1.2268E-03, 1.4801E-03, 1.4443E-03, 1.6231E-03, 1.4959E-03, 1.2040E-03, 5.8495E-04, 1.2413E-04, 7.2497E-05, 4.6259E-04, 8.4334E-04, 6.9141E-04, 6.7295E-04, 1.0937E-03, 5.3340E-04, -1.7564E-05, 4.9219E-04, 1.3039E-03, 2.1616E-03, 3.0120E-03, 2.8946E-03, 3.2499E-03, 2.9212E-03, 3.1728E-03, 2.9056E-03, 2.5295E-03, 2.5521E-03, 2.1127E-03, 2.1166E-03, 1.8397E-03, 1.7552E-03, 2.7901E-03, 2.4227E-03, 2.4577E-03, 2.1084E-03, 2.3626E-03, 3.0292E-03, 2.6149E-03, 3.9396E-03, 3.3457E-03, 3.8261E-03, 4.1267E-03, 3.4000E-03, 4.8985E-03, 3.8333E-03, 4.7271E-03, 4.6330E-03, 4.3704E-03, 6.3240E-03, 4.6709E-03, 7.0922E-03, 6.6197E-03, 6.5756E-03, 8.7853E-03, 6.8967E-03, 1.0703E-02, 8.7443E-03, 1.0635E-02, 1.3315E-02, 1.1592E-02, 1.8020E-02, 1.4701E-02, 2.0235E-02, 2.1313E-02, 1.9775E-02, 3.0414E-02, 2.6955E-02, 3.8480E-02, 3.9797E-02, 4.6232E-02, 6.3149E-02, 5.8938E-02, 8.7446E-02, 9.3647E-02, 1.2513E-01, 1.5622E-01, 1.6269E-01, 2.2568E-01, 2.2302E-01, 2.2316E-01, 1.9658E-01, 6.4868E-02, -1.0923E-01, -3.5163E-01, -1.2023E-01, 1.5397E-01, 1.4572E-01, -1.1821E-01, 2.7519E-01, -5.6538E-02, -2.9575E-01, -1.8133E-01, -1.1217E-02, 1.5282E-01, 1.9593E-01, 2.3669E-01, 2.3138E-01, 2.0761E-01, 1.5538E-01, 1.4527E-01, 9.9884E-02, 9.1384E-02, 7.0122E-02, 5.8259E-02, 5.7991E-02, 3.7245E-02, 4.2492E-02, 3.0393E-02, 2.8376E-02, 2.5949E-02, 1.8399E-02, 2.2978E-02, 1.4790E-02, 1.6982E-02, 1.3780E-02, 1.1650E-02, 1.3801E-02, 8.1905E-03, 1.0700E-02, 8.3567E-03, 7.2818E-03, 8.5373E-03, 5.6566E-03, 7.4336E-03, 5.3546E-03, 5.4180E-03, 5.5853E-03, 4.3490E-03, 4.8514E-03, 3.7742E-03, 4.7217E-03, 4.3272E-03, 3.4628E-03, 4.2947E-03, 3.1924E-03, 3.5560E-03, 2.7687E-03, 2.7858E-03, 2.7246E-03, 2.0674E-03, 2.5675E-03, 2.1552E-03, 2.2536E-03, 2.2229E-03, 1.8680E-03, 2.2247E-03, 1.9784E-03, 2.2158E-03, 2.5880E-03, 2.5553E-03, 2.9983E-03, 2.7295E-03, 3.1104E-03, 2.7202E-03, 2.7523E-03, 2.8764E-03, 1.5798E-03, 1.3146E-03, 1.8712E-04, 1.5540E-04, 6.5237E-04, 7.2087E-04, 9.7966E-04, 8.7939E-04, 4.1581E-04, -2.4604E-05, 1.3591E-04, 4.0142E-04, 8.1882E-04, 1.3075E-03, 1.4718E-03, 1.4260E-03, 1.5658E-03, 1.2874E-03, 1.1984E-03, 9.5446E-04, 9.0106E-04, 8.4878E-04, 6.0796E-04, 6.0722E-04, 4.1755E-04, 4.6013E-04, 3.7166E-04, 3.4249E-04, 3.9207E-04, 2.7025E-04, 2.8964E-04, 2.6777E-04, 2.4366E-04, 2.1834E-04, 1.8977E-04, 2.1554E-04, 2.2477E-04, 1.5949E-04, 1.4614E-04, 9.0117E-05, 1.2767E-04, 7.5529E-05, 8.8249E-05, 7.1817E-05, 6.2848E-05, 6.3391E-05, 5.4169E-05, 5.6920E-05, 3.8482E-05, 3.9208E-05, 3.5734E-05, 2.7798E-05, 2.1934E-05, 1.4290E-05, 7.8982E-06, 2.6637E-06, 9.0213E-07, 1.9295E-07, -1.5802E-08, -2.4188E-08, -7.3835E-07, -4.3153E-07, -8.7460E-07, -1.0859E-06, -1.5803E-06, -4.4074E-06, -1.2864E-05, -2.6212E-05, -4.0420E-05, -5.8206E-05, -6.8652E-05, -8.2212E-05, -8.5482E-05, -9.0082E-05, -8.7927E-05, -9.0481E-05, -1.3452E-04, -1.4291E-04, -1.6357E-04, -1.6781E-04, -1.5708E-04, -1.9335E-04, -1.9022E-04, -2.4980E-04, -2.0592E-04, -2.5769E-04, -3.3474E-04, -2.7930E-04, -2.7028E-04, -3.2150E-04, -4.5014E-04, -5.2487E-04, -5.3976E-04, -6.8844E-04, -6.2301E-04, -6.4918E-04, -7.8105E-04, -9.2496E-04, -1.3102E-03, -1.4727E-03, -1.6166E-03, -1.2302E-03, -1.3994E-03, -8.8545E-04, -8.2773E-04, -1.0660E-04, 4.5803E-04, 1.7505E-04, -5.7535E-04, -8.4157E-04, -9.4865E-04, -5.2534E-04, -9.1958E-04, -1.0725E-03, -4.6711E-04, -1.5774E-03, -1.4196E-03, -5.5599E-04, 1.0558E-04, 1.8017E-04, -1.1930E-03, -1.7370E-03, -2.6782E-03, -2.5477E-03, -3.1993E-03, -3.3630E-03, -3.3035E-03, -3.3910E-03, -2.8470E-03, -2.8905E-03, -3.0288E-03, -3.1638E-03, -2.6400E-03, -2.3090E-03, -3.4216E-03, -3.6494E-03, -2.6341E-03, -2.8342E-03, -2.7271E-03, -4.1691E-03, -3.7576E-03, -3.7277E-03, -4.5053E-03, -3.8450E-03, -5.3454E-03, -5.2098E-03, -5.9160E-03, -5.9606E-03, -5.4395E-03, -7.1150E-03, -6.4252E-03, -8.2009E-03, -8.7050E-03, -8.7938E-03, -1.0690E-02, -9.1284E-03, -1.3134E-02, -1.2766E-02, -1.3157E-02, -1.7613E-02, -1.6293E-02, -2.2117E-02, -2.1528E-02, -2.5346E-02, -3.1292E-02, -3.0950E-02, -4.1981E-02, -4.4165E-02, -5.5585E-02, -6.3730E-02, -7.1901E-02, -9.3784E-02, -1.0024E-01, -1.2273E-01, -1.4643E-01, -1.7554E-01, -1.9688E-01, -1.9644E-01, -1.4609E-01, -9.1483E-02, 6.8272E-02, 1.3920E-01, 3.1196E-01, 1.7008E-01, -1.9392E-01, -1.0833E-01, 4.9890E-02, 4.4655E-02, -6.7094E-02, 3.0366E-01, -7.6022E-02, -3.0954E-01, 5.7384E-02, 2.5960E-01, 2.7809E-01, 1.2754E-01, -1.7945E-02, -1.3976E-01, -1.9341E-01, -2.0466E-01, -1.7982E-01, -1.5583E-01, -1.3067E-01, -1.0902E-01, -9.3421E-02, -8.4720E-02, -6.2989E-02, -6.1001E-02, -4.7012E-02, -4.3131E-02, -3.6666E-02, -2.8960E-02, -2.9586E-02, -2.0971E-02, -2.1883E-02, -1.8504E-02, -1.6334E-02, -1.6452E-02, -1.1487E-02, -1.3144E-02, -1.0323E-02, -1.0054E-02, -1.0208E-02, -7.8524E-03, -8.7974E-03, -6.2892E-03, -6.6838E-03, -6.1593E-03, -5.3996E-03, -6.2299E-03, -4.6065E-03, -5.0204E-03, -4.6892E-03, -4.1784E-03, -4.7330E-03, -3.3089E-03, -3.5640E-03, -2.7259E-03, -2.4185E-03, -2.9865E-03, -2.2220E-03, -2.9719E-03, -3.1866E-03, -3.0627E-03, -3.1295E-03, -2.7323E-03, -2.9423E-03, -2.5137E-03, -2.6725E-03, -3.2073E-03, -2.8031E-03, -3.2548E-03, -2.9575E-03, -2.8407E-03, -1.7510E-03, -8.5153E-04, -5.5866E-04, -3.0649E-05, 6.7777E-05, -8.6631E-04, -1.4123E-03, -1.5117E-03, -6.5281E-04, -6.7598E-04, -2.9935E-04, -1.1486E-03, -1.2802E-03, -5.1937E-04, 3.3339E-05, 2.5477E-04, 2.1581E-04, -2.9193E-04, -9.9897E-04, -1.1860E-03, -1.3519E-03, -1.5134E-03, -1.3185E-03, -1.3040E-03, -9.4230E-04, -8.5052E-04, -7.7073E-04, -5.4663E-04, -5.5305E-04, -5.4973E-04, -4.7326E-04, -4.5481E-04, -2.8566E-04, -2.9689E-04, -2.7553E-04, -2.5745E-04, -2.4041E-04, -1.9354E-04, -2.2222E-04, -1.6539E-04, -1.4211E-04, -1.5576E-04, -1.1591E-04, -1.4394E-04, -1.0673E-04, -1.0403E-04, -9.3137E-05, -8.2967E-05, -8.2343E-05, -6.3690E-05, -6.2441E-05, -5.4256E-05, -4.6291E-05, -3.5837E-05, -2.4631E-05, -1.3463E-05, -3.4976E-06, 3.0105E-07, -1.5272E-06, -3.4766E-07, -1.4042E-07, 1.0193E-08, -1.8406E-08, 1.5183E-07, 2.2465E-06, 5.4294E-06, 4.3465E-06, 7.7640E-06, 4.2840E-06, 5.9783E-06, 1.7010E-06, 1.9681E-05, 4.0971E-05, 8.0211E-05, 9.6322E-05, 1.2117E-04, 1.3033E-04, 1.8834E-04, 2.0666E-04, 2.3358E-04, 2.0986E-04, 2.1969E-04, 2.0621E-04, 2.5988E-04, 3.1199E-04, 2.5281E-04, 3.2439E-04, 3.4411E-04, 4.3010E-04, 4.0173E-04, 4.7923E-04, 6.7744E-04, 6.8096E-04, 8.1218E-04, 8.9108E-04, 9.6619E-04, 1.1691E-03, 1.1723E-03, 1.4073E-03, 1.4956E-03, 1.6053E-03, 1.8764E-03, 1.6677E-03, 1.4061E-03, 9.3458E-04, 7.5994E-05, -3.4453E-04, -5.1228E-04, -6.8311E-05, 7.1925E-04, 1.4094E-03, 1.4476E-03, 1.3499E-03, 1.2731E-03, 1.2864E-03, 1.3732E-03, 1.2045E-03, 1.6636E-03, 1.4474E-03, 1.7616E-03, 2.6518E-03, 2.4818E-03, 1.0929E-03, 1.9037E-04, -9.1962E-04, 4.7707E-04, 4.0780E-04, 2.1933E-03, 3.6562E-03, 3.9674E-03, 5.5404E-03, 5.0292E-03, 5.8068E-03, 5.1993E-03, 5.4362E-03, 5.9839E-03, 5.5119E-03, 5.0625E-03, 5.4163E-03, 5.7327E-03, 5.9974E-03, 4.5724E-03, 6.0731E-03, 5.0719E-03, 5.9859E-03, 6.9389E-03, 6.0226E-03, 9.4420E-03, 7.9760E-03, 1.0259E-02, 1.0437E-02, 1.0106E-02, 1.3386E-02, 1.1118E-02, 1.4911E-02, 1.4670E-02, 1.5650E-02, 1.9874E-02, 1.6715E-02, 2.5125E-02, 2.2705E-02, 2.7471E-02, 3.1895E-02, 3.0788E-02, 4.2506E-02, 4.0398E-02, 5.4033E-02, 6.0373E-02, 6.3216E-02, 8.2943E-02, 8.6609E-02, 1.1231E-01, 1.2142E-01, 1.4173E-01, 1.6557E-01, 1.6420E-01, 1.6781E-01, 1.6925E-01, 1.6202E-01, 1.0656E-01, -3.0691E-03, -1.7467E-01, -2.9632E-01, -1.8493E-01, -1.2939E-01, 1.6997E-01, 1.4019E-01, -2.8555E-02, -8.2589E-02, 1.1109E-02, 8.2213E-02, -5.8571E-02, 1.7681E-01, -1.2881E-01, -1.8514E-01, 1.5667E-01, 2.1267E-01, -2.3335E-02, -1.6137E-01, -3.0452E-01, -1.9662E-01, -7.8923E-02, 4.6960E-02, 1.1665E-01, 1.6483E-01, 1.6841E-01, 1.6691E-01, 1.5635E-01, 1.5687E-01, 1.2178E-01, 1.2047E-01, 9.6754E-02, 8.3192E-02, 7.4149E-02, 5.6177E-02, 6.0913E-02, 4.1672E-02, 4.2699E-02, 3.5313E-02, 2.8213E-02, 3.1580E-02, 2.0547E-02, 2.5674E-02, 2.0198E-02, 1.8467E-02, 1.8660E-02, 1.3199E-02, 1.5895E-02, 1.2381E-02, 1.1731E-02, 1.2182E-02, 9.5936E-03, 1.0493E-02, 8.0734E-03, 9.0711E-03, 7.2574E-03, 5.9585E-03, 7.2041E-03, 5.0030E-03, 5.8524E-03, 4.8615E-03, 5.5387E-03, 6.1588E-03, 5.0668E-03, 5.8132E-03, 4.8175E-03, 5.1830E-03, 5.2177E-03, 4.9881E-03, 5.9621E-03, 4.7385E-03, 5.1785E-03, 4.8460E-03, 3.8550E-03, 3.2215E-03, 1.1994E-03, 6.2399E-04, 2.3007E-04, 2.6484E-04, 8.2023E-04, 1.7806E-03, 2.8011E-03, 2.0783E-03, 1.3119E-03, 1.0751E-03, 1.3286E-03, 1.6007E-03, 1.5000E-03, 9.5319E-04, 8.5697E-04, 1.3825E-03, 1.6156E-03, 1.0193E-03, 3.4825E-04, -3.6509E-04, -3.6979E-04, -3.3350E-05, 6.9051E-04, 1.0085E-03, 1.5530E-03, 1.7214E-03, 1.6841E-03, 1.5437E-03, 1.2737E-03, 1.2239E-03, 1.1436E-03, 9.0815E-04, 8.6467E-04, 8.8093E-04, 6.5198E-04, 6.0117E-04, 4.6745E-04, 4.0589E-04, 4.5147E-04, 2.7633E-04, 3.1580E-04, 2.3424E-04, 2.4795E-04, 2.3410E-04, 2.3281E-04, 2.0476E-04, 2.0423E-04, 1.8214E-04, 1.7907E-04, 1.5389E-04, 1.4577E-04, 1.2824E-04, 9.2279E-05, 6.7409E-05, 4.8341E-05, 2.2500E-05, 7.8938E-06, -2.1064E-06, 1.7007E-06, 5.4564E-06, 3.3123E-06, 1.7245E-06, 2.8743E-07, 2.0286E-08, -2.8677E-08, 5.7521E-07, 5.9769E-07, 2.2196E-06, 7.2750E-06, 6.8045E-06, 1.7720E-05, 2.0077E-05, 1.5370E-05, 7.0031E-06, -6.8486E-06, 1.5333E-05, 4.4472E-05, 1.0362E-04, 1.5217E-04, 1.9236E-04, 2.4783E-04, 2.7856E-04, 2.7791E-04, 3.3397E-04, 3.3261E-04, 2.8040E-04, 4.1842E-04, 4.1098E-04, 5.2398E-04, 4.6004E-04, 4.9931E-04, 7.0996E-04, 7.6996E-04, 9.1640E-04, 9.1652E-04, 1.1609E-03, 1.2710E-03, 1.4272E-03, 1.5338E-03, 1.6199E-03, 1.5142E-03, 1.6492E-03, 1.6002E-03, 1.1004E-03, 3.5135E-04, -6.4882E-04, -4.1137E-04, -4.0564E-04, 7.7435E-04, 1.1350E-03, 2.0380E-03, 1.4011E-03, 1.2210E-03, 1.2612E-03, 8.4446E-04, 1.4830E-03, 1.5934E-03, 1.9099E-03, 2.0600E-03, 1.6683E-03, 1.9246E-03, 1.3984E-03, 1.5931E-03, 1.9010E-03, 2.0521E-03, 2.6194E-03, 1.3511E-03, 1.3233E-03, 6.1651E-04, 1.6559E-05, 5.5518E-04, 1.6730E-03, 4.8388E-03, 4.9006E-03, 6.5397E-03, 7.1693E-03, 7.5553E-03, 8.2124E-03, 6.9341E-03, 8.4653E-03, 7.8960E-03, 7.6121E-03, 7.7779E-03, 7.4745E-03, 9.3924E-03, 7.7790E-03, 7.9995E-03, 1.0177E-02, 8.9700E-03, 1.2423E-02, 1.0152E-02, 1.2646E-02, 1.4159E-02, 1.4110E-02, 1.9243E-02, 1.6747E-02, 2.1747E-02, 2.1665E-02, 2.2688E-02, 2.8434E-02, 2.4623E-02, 3.6595E-02, 3.5031E-02, 4.0566E-02, 4.9503E-02, 4.9062E-02, 6.7304E-02, 6.5556E-02, 8.2133E-02, 9.3807E-02, 9.8095E-02, 1.2194E-01, 1.2992E-01, 1.5357E-01, 1.6364E-01, 1.6858E-01, 1.6186E-01, 1.1836E-01, 5.0038E-02, -1.0990E-02, -1.2613E-01, -1.9018E-01, -2.6407E-01, -1.5307E-01, 4.2984E-02, 1.8721E-01, 1.9224E-01, -3.4262E-02, -1.5774E-01, -5.8977E-02, 3.7819E-02, 5.6464E-02, 1.2263E-02, 2.0456E-02, -2.0292E-01, 6.9586E-02, 1.7109E-01, -1.6167E-01, -1.5502E-01, 1.7408E-01, 1.2378E-01, 1.6143E-01, -8.1899E-02, -2.2311E-01, -2.4695E-01, -1.6975E-01, -7.3950E-02, 3.3631E-02, 8.5489E-02, 1.3934E-01, 1.6608E-01, 1.5962E-01, 1.6071E-01, 1.4048E-01, 1.2435E-01, 1.1084E-01, 8.9810E-02, 9.1479E-02, 6.7054E-02, 6.7067E-02, 5.5869E-02, 4.6191E-02, 4.7694E-02, 3.3200E-02, 3.7153E-02, 3.0172E-02, 2.7113E-02, 2.5721E-02, 1.9531E-02, 2.2817E-02, 1.7937E-02, 1.7559E-02, 1.6429E-02, 1.2480E-02, 1.4496E-02, 1.0394E-02, 1.0693E-02, 9.7361E-03, 8.6476E-03, 1.0087E-02, 7.3303E-03, 7.8001E-03, 7.5198E-03, 7.5927E-03, 8.1774E-03, 5.9772E-03, 7.9994E-03, 7.7444E-03, 7.8100E-03, 8.1547E-03, 6.2159E-03, 6.9251E-03, 4.8376E-03, 4.7829E-03, 2.9392E-03, 7.8812E-04, 8.2795E-04, -7.5202E-04, 6.1194E-04, 1.2040E-03, 1.5671E-03, 2.6110E-03, 1.9740E-03, 1.5335E-03, 1.1812E-03, 2.3152E-03, 2.0861E-03, 1.4495E-03, 1.5227E-03, 1.0555E-03, 1.8405E-03, 1.9089E-03, 9.5243E-04, 9.0305E-04, 1.3064E-03, 1.7584E-03, 1.2497E-03, 6.5306E-04, 3.1593E-04, -6.9819E-04, -7.6465E-04, -1.6168E-04, 6.4373E-04, 1.4168E-03, 1.5788E-03, 1.6995E-03, 1.2627E-03, 1.3861E-03, 1.2560E-03, 1.1771E-03, 1.1437E-03, 9.1661E-04, 8.4885E-04, 7.5969E-04, 6.6146E-04, 5.0093E-04, 4.0076E-04, 4.7936E-04, 3.6521E-04, 3.5314E-04, 3.1811E-04, 2.5377E-04, 2.8983E-04, 2.0799E-04, 2.4147E-04, 2.2216E-04, 2.0613E-04, 1.4865E-04, 1.0056E-04, 4.9694E-05, 2.4099E-05, -2.1922E-06, 3.0430E-07, 1.0787E-05, 1.7251E-05, 1.1732E-05, 5.6731E-06, 3.0951E-06, 1.6316E-06, 4.6512E-07, -4.9214E-08, 1.2290E-08, -2.0533E-07, 1.5901E-06, 4.9155E-06, 5.1703E-06, 9.9450E-06, 1.1770E-05, 2.3786E-05, 4.5728E-05, 4.8195E-05, 5.3247E-05, 1.6478E-05, 1.0558E-06, 1.9870E-05, 4.2171E-05, 6.8219E-05, 1.5674E-04, 1.8426E-04, 2.8187E-04, 2.8586E-04, 3.6271E-04, 3.7931E-04, 4.1985E-04, 3.9036E-04, 5.1143E-04, 6.5835E-04, 7.8737E-04, 7.2276E-04, 7.6204E-04, 9.2306E-04, 9.2722E-04, 1.2492E-03, 1.2921E-03, 1.2920E-03, 1.1487E-03, 1.0932E-03, 1.1256E-03, 5.7056E-04, 2.2952E-04, -8.6934E-04, -9.7523E-04, 1.7960E-05, 8.1206E-04, 1.4573E-03, 1.7263E-03, 1.2533E-03, 8.5324E-04, 7.2682E-04, 5.0629E-04, 1.3869E-03, 1.8593E-03, 1.4351E-03, 1.6854E-03, 1.5591E-03, 1.4450E-03, 1.6545E-03, 1.5715E-03, 2.1386E-03, 1.5389E-03, -7.3481E-04, 3.5000E-04, 2.5276E-03, 3.0137E-03, 3.6279E-03, 2.5718E-03, 1.1810E-03, 1.5477E-05, -8.6273E-04, 2.8560E-04, 1.0304E-03, 3.3517E-03, 4.6008E-03, 4.8954E-03, 8.7152E-03, 7.1401E-03, 8.7765E-03, 7.4217E-03, 6.9331E-03, 7.8226E-03, 6.5465E-03, 9.2401E-03, 8.7006E-03, 8.7817E-03, 1.0664E-02, 8.8599E-03, 1.2509E-02, 1.0926E-02, 1.2418E-02, 1.4602E-02, 1.3324E-02, 1.8489E-02, 1.6667E-02, 2.2561E-02, 2.3826E-02, 2.5043E-02, 3.0769E-02, 2.7661E-02, 4.0761E-02, 4.1236E-02, 4.5957E-02, 5.9033E-02, 5.9547E-02, 7.5324E-02, 7.5484E-02, 9.1880E-02, 1.0440E-01, 1.0452E-01, 1.1677E-01, 1.1977E-01, 1.2120E-01, 1.1185E-01, 7.3645E-02, 2.5817E-02, -6.0448E-02, -1.2945E-01, -1.9974E-01, -2.1875E-01, -1.2954E-01, 5.7783E-02, 1.8895E-01, 2.1768E-01, -1.2033E-01, -1.2229E-01, -1.2823E-01, 1.0955E-01, 1.5159E-01, -7.1778E-02, -4.6038E-02, 5.8517E-03, -2.9538E-02, 2.1797E-01, -1.1686E-01, -1.7547E-01, 2.4076E-01, 8.8138E-02, -3.0982E-01, -1.0236E-01, 6.0228E-02, 2.3647E-01, 1.6227E-01, -6.5948E-02, -1.6491E-01, -2.2615E-01, -1.3411E-01, -9.9514E-02, -1.1467E-02, 4.5239E-02, 9.3097E-02, 1.1863E-01, 1.2216E-01, 1.1954E-01, 1.1150E-01, 9.8786E-02, 1.0166E-01, 7.3634E-02, 7.4662E-02, 6.6220E-02, 5.5019E-02, 5.4044E-02, 3.8981E-02, 4.1954E-02, 3.3165E-02, 3.0061E-02, 2.8766E-02, 2.0880E-02, 2.4333E-02, 1.7867E-02, 1.7454E-02, 1.6789E-02, 1.2734E-02, 1.4283E-02, 1.0885E-02, 1.1811E-02, 1.0637E-02, 9.7365E-03, 1.0800E-02, 8.7678E-03, 9.0376E-03, 8.3916E-03, 6.7899E-03, 7.6198E-03, 7.9563E-03, 9.0669E-03, 7.4874E-03, 6.6214E-03, 6.0130E-03, 4.7266E-03, 5.1329E-03, 1.6123E-03, 5.0141E-04, -5.1786E-04, -5.3121E-04, 1.1928E-03, 2.1037E-03, 4.1933E-03, 2.7245E-03, 2.0509E-03, 5.4707E-04, -4.7034E-04, 1.4575E-03, 1.9547E-03, 1.2244E-03, 1.1824E-03, 1.4227E-03, 1.8357E-03, 1.9369E-03, 1.0688E-03, 8.5031E-04, 1.3245E-03, 1.6577E-03, 3.6975E-04, 1.6310E-04, 1.1219E-03, 1.5133E-03, 1.7496E-03, 1.0518E-03, 3.4487E-04, -1.0260E-03, -7.4791E-04, -3.6687E-04, 2.0206E-04, 8.9646E-04, 8.5999E-04, 1.2433E-03, 1.0724E-03, 1.1732E-03, 1.2343E-03, 1.0046E-03, 8.4068E-04, 5.6815E-04, 6.2368E-04, 7.1946E-04, 5.8102E-04, 4.9735E-04, 4.3755E-04, 3.8226E-04, 3.5751E-04, 2.8821E-04, 3.0837E-04, 2.0877E-04, 2.2116E-04, 1.2897E-04, 8.7713E-05, 5.4304E-05, 3.6013E-05, 2.6342E-06, 1.7462E-05, 1.9344E-05, 2.6850E-05, 2.9932E-05, 1.5890E-05, 1.1509E-05, 6.9733E-06, 3.5756E-06, 2.6067E-07, 7.0793E-08, 4.8272E-08); \n\n\n//first pass of separable convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //do a convolution in the x direction on iChannel0\n    //since we have 6 ranks and we can only store 2 in a vec3 we need to do the partial sums in 1/2 resolution chunks in a single buffer(which means max 8 ranks)\n    ivec2 coord = ivec2(fragCoord.xy) % ivec2(iResolution.xy/2.0);\n    ivec2 block = ivec2(fragCoord.xy) / ivec2(iResolution.xy/2.0);\n    int rank_offset = 2 * (block.x + block.y * 2);\n\n    if(rank_offset >= Nr)\n        discard;\n\n    vec3 sum0 = vec3(0.0);\n    vec3 sum1 = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        //since we are doing it at 1/2 resolution we need to use 1 mip level higher\n        vec4 pixel = texelFetch(iChannel0, coord + ivec2(0, i), 1);\n        vec3 pcolor = min(pow(pixel.xyz/(pixel.w+1e-6),vec3(1.3)), 5.0);\n        \n        //get the rank index\n        int offset = i + Nc;\n        sum0 += pcolor * U[offset + rank_offset * N];\n        sum1 += pcolor * U[offset + (rank_offset + 1) * N];\n    }\n\n    //write the sum packed to the output\n    fragColor = vec4(pack2vec3(sum0, sum1), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//The first 8 rows of the V matrix: \nfloat V[2056] = float[](-4.9513E-09, -1.1082E-07, -1.1752E-07, -5.9194E-07, -3.6003E-07, -1.4258E-06, -7.0721E-07, -2.6143E-06, -1.2033E-06, -4.1467E-06, -2.1732E-06, -6.0526E-06, -3.3301E-06, -8.3675E-06, -4.6040E-06, -1.1125E-05, -5.6975E-06, -1.4494E-05, -6.4909E-06, -1.8317E-05, -8.4517E-06, -2.2368E-05, -6.6061E-06, -2.6330E-05, -6.7854E-06, -3.0005E-05, -8.4715E-06, -3.4425E-05, -1.3100E-05, -3.9120E-05, -1.7447E-05, -4.4387E-05, -2.0783E-05, -5.0899E-05, -2.1869E-05, -5.7920E-05, -2.1116E-05, -6.6068E-05, -1.7062E-05, -7.4997E-05, -1.1285E-05, -8.2377E-05, -1.0679E-05, -8.8145E-05, -1.9250E-05, -9.5500E-05, -3.1254E-05, -1.0347E-04, -4.1336E-05, -1.1209E-04, -4.8405E-05, -1.2216E-04, -4.9920E-05, -1.3352E-04, -4.6951E-05, -1.4612E-04, -3.7353E-05, -1.6157E-04, -2.2285E-05, -1.8168E-04, -1.8411E-05, -1.8854E-04, -3.5338E-05, -1.9744E-04, -5.9285E-05, -2.0909E-04, -7.8940E-05, -2.2152E-04, -9.1072E-05, -2.3740E-04, -9.5998E-05, -2.5402E-04, -9.1400E-05, -2.7388E-04, -7.3974E-05, -2.9759E-04, -4.3653E-05, -3.2539E-04, -3.5507E-05, -3.5660E-04, -6.2764E-05, -3.7291E-04, -1.0910E-04, -3.8948E-04, -1.4770E-04, -4.1087E-04, -1.7602E-04, -4.3766E-04, -1.8329E-04, -4.6493E-04, -1.8522E-04, -5.0403E-04, -1.5500E-04, -5.4641E-04, -1.1203E-04, -5.9838E-04, -1.2863E-04, -6.5832E-04, -1.5740E-04, -7.2787E-04, -2.2719E-04, -7.6957E-04, -3.1092E-04, -8.2413E-04, -3.7923E-04, -8.8880E-04, -4.2237E-04, -9.7563E-04, -4.3409E-04, -1.0842E-03, -3.9943E-04, -1.2246E-03, -4.0794E-04, -1.4103E-03, -4.9410E-04, -1.6569E-03, -6.1732E-04, -1.9987E-03, -8.0774E-04, -2.4639E-03, -1.2064E-03, -3.0779E-03, -1.7831E-03, -4.1712E-03, -2.7161E-03, -6.8102E-03, -5.4036E-03, -1.9836E-02, -8.9709E-02, -3.8285E-02, -7.1713E-03, -8.0395E-03, -2.6908E-03, -4.5444E-03, -1.7302E-03, -3.1950E-03, -1.3098E-03, -2.4829E-03, -1.1008E-03, -2.0113E-03, -9.9723E-04, -1.6229E-03, -8.8239E-04, -1.3554E-03, -7.3415E-04, -1.1563E-03, -6.1247E-04, -1.0092E-03, -5.4829E-04, -8.9457E-04, -5.0031E-04, -8.0672E-04, -4.6303E-04, -7.3613E-04, -4.3440E-04, -6.7970E-04, -4.1238E-04, -6.3158E-04, -3.9558E-04, -5.7428E-04, -3.8423E-04, -5.1277E-04, -3.4595E-04, -4.6038E-04, -3.1965E-04, -4.1882E-04, -2.9865E-04, -3.8187E-04, -2.8623E-04, -3.6029E-04, -2.6248E-04, -3.3189E-04, -2.4929E-04, -3.1010E-04, -2.3903E-04, -2.9126E-04, -2.3209E-04, -2.7499E-04, -2.2648E-04, -2.5269E-04, -2.1133E-04, -2.2717E-04, -1.9543E-04, -2.0557E-04, -1.8241E-04, -1.8800E-04, -1.7030E-04, -1.7302E-04, -1.6012E-04, -1.6072E-04, -1.5046E-04, -1.4892E-04, -1.4342E-04, -1.3916E-04, -1.3693E-04, -1.3030E-04, -1.3387E-04, -1.2416E-04, -1.2965E-04, -1.1107E-04, -1.1709E-04, -9.8575E-05, -1.0728E-04, -8.8174E-05, -9.8548E-05, -7.9488E-05, -9.1131E-05, -7.2894E-05, -8.4078E-05, -6.5918E-05, -7.7791E-05, -5.9716E-05, -7.2433E-05, -5.4574E-05, -6.7486E-05, -5.0474E-05, -6.3732E-05, -4.5310E-05, -5.9117E-05, -3.9264E-05, -5.2200E-05, -3.3520E-05, -4.6250E-05, -2.9023E-05, -4.0676E-05, -2.4768E-05, -3.6074E-05, -2.1538E-05, -3.1851E-05, -1.8797E-05, -2.7835E-05, -1.6237E-05, -2.4298E-05, -1.4780E-05, -2.1270E-05, -1.2906E-05, -1.7646E-05, -9.1881E-06, -1.5716E-05, -7.5655E-06, -1.2036E-05, -5.4110E-06, -9.1777E-06, -3.9933E-06, -6.8019E-06, -2.8299E-06, -4.8109E-06, -1.9327E-06, -3.2133E-06, -1.2631E-06, -1.8982E-06, -7.3855E-07, -9.3053E-07, -3.0330E-07, -2.9777E-07, -5.3082E-08, -1.2116E-08, 4.8784E-10, 1.4840E-08, 2.0516E-08, 8.4015E-08, 7.1405E-08, 2.0152E-07, 1.6680E-07, 4.1239E-07, 3.3916E-07, 7.4036E-07, 5.4288E-07, 1.0625E-06, 8.1972E-07, 1.4763E-06, 1.1960E-06, 2.4553E-06, 2.2830E-06, 4.3586E-06, 5.4173E-06, 5.5930E-06, 4.7529E-06, 5.8124E-06, 6.0541E-06, 6.0450E-06, 3.8992E-06, 5.3251E-06, 3.3435E-06, 5.8055E-06, 3.0818E-06, 5.7150E-06, 3.7668E-06, 7.1295E-06, 4.1801E-06, 7.8012E-06, 4.0070E-06, 8.6940E-06, 4.1212E-06, 1.0022E-05, 4.5104E-06, 1.0555E-05, 3.5700E-06, 1.0811E-05, 4.4520E-06, 1.2997E-05, 5.4533E-06, 1.5287E-05, 8.5564E-06, 1.7313E-05, 9.2086E-06, 1.7957E-05, 1.1044E-05, 1.8874E-05, 1.0889E-05, 1.9678E-05, 9.9970E-06, 2.0503E-05, 1.0593E-05, 2.5092E-05, 1.4539E-05, 2.5014E-05, 1.0088E-05, 3.2247E-05, 1.3748E-05, 3.1706E-05, 1.3008E-05, 3.0836E-05, 1.3733E-05, 3.1572E-05, 1.4814E-05, 3.1626E-05, 1.5690E-05, 3.5964E-05, 1.5917E-05, 3.9959E-05, 1.4593E-05, 4.3964E-05, 1.2455E-05, 4.9365E-05, 1.1641E-05, 4.8538E-05, 1.5797E-05, 5.4167E-05, 2.0499E-05, 5.6080E-05, 2.9650E-05, 6.2559E-05, 3.9237E-05, 7.4864E-05, 3.6381E-05, 7.0251E-05, 4.8921E-05, 7.6114E-05, 3.8492E-05, 8.3288E-05, 3.1787E-05, 8.5083E-05, 2.6357E-05, 8.8021E-05, 3.6472E-05, 1.1137E-04, 3.9332E-05, 1.1593E-04, 5.2346E-05, 1.2584E-04, 5.8791E-05, 1.3120E-04, 7.4114E-05, 1.4760E-04, 7.5735E-05, 1.5967E-04, 9.5588E-05, 1.9476E-04, 9.3241E-05, 2.2699E-04, 1.1330E-04, 2.7133E-04, 1.5556E-04, 3.5731E-04, 1.8077E-04, 4.3763E-04, 3.5531E-04, 7.0284E-04, 5.4522E-04, 1.0686E-03, 1.4681E-03, 2.9842E-03, 5.2828E-03, 8.7086E-03, -6.0637E-03, 5.1659E-03, 7.8877E-03, 3.8412E-03, 2.0333E-03, 1.3369E-03, 7.5476E-04, 7.2354E-04, 3.7722E-04, 4.6938E-04, 2.8898E-04, 3.6659E-04, 1.8021E-04, 2.5758E-04, 1.8461E-04, 2.2647E-04, 1.2890E-04, 1.7614E-04, 1.2520E-04, 1.6106E-04, 9.3484E-05, 1.3086E-04, 8.4313E-05, 1.2145E-04, 7.9978E-05, 1.0633E-04, 7.0350E-05, 1.0302E-04, 7.5987E-05, 1.0057E-04, 5.6223E-05, 8.3257E-05, 5.5768E-05, 7.2508E-05, 5.6724E-05, 7.0752E-05, 5.4078E-05, 7.0389E-05, 5.7732E-05, 6.3639E-05, 3.9524E-05, 5.2112E-05, 5.3424E-05, 5.6019E-05, 4.1344E-05, 4.5847E-05, 3.9147E-05, 4.3462E-05, 3.5004E-05, 3.8795E-05, 3.6049E-05, 3.5182E-05, 3.2945E-05, 3.4270E-05, 2.9511E-05, 3.0729E-05, 2.7702E-05, 2.7377E-05, 2.5865E-05, 2.5573E-05, 2.2770E-05, 2.1786E-05, 2.4630E-05, 2.2233E-05, 2.3352E-05, 2.2245E-05, 2.4446E-05, 2.3819E-05, 2.4980E-05, 2.3513E-05, 1.4874E-05, 1.9195E-05, 1.8457E-05, 1.7256E-05, 1.6497E-05, 1.3513E-05, 1.6690E-05, 1.5016E-05, 1.5433E-05, 1.1617E-05, 1.4267E-05, 1.1863E-05, 1.4514E-05, 1.1359E-05, 1.1731E-05, 9.6548E-06, 9.7401E-06, 7.3529E-06, 9.1673E-06, 6.6912E-06, 9.4642E-06, 6.0302E-06, 8.4475E-06, 5.4868E-06, 7.4922E-06, 5.0513E-06, 6.7298E-06, 5.0419E-06, 5.3534E-06, 3.8977E-06, 5.2190E-06, 3.6249E-06, 4.9212E-06, 3.8666E-06, 4.9592E-06, 4.4395E-06, 5.6875E-06, 6.7412E-06, 6.5217E-06, 3.7056E-06, 5.5861E-06, 4.5917E-06, 3.1389E-06, 1.9783E-06, 1.6332E-06, 1.1295E-06, 1.1684E-06, 7.0476E-07, 8.3134E-07, 4.9221E-07, 5.2510E-07, 2.8066E-07, 2.6725E-07, 1.3683E-07, 1.3264E-07, 5.3823E-08, 4.0303E-08, 8.9860E-09, 1.2225E-09, 8.1528E-11, 2.1023E-09, 9.6316E-09, 2.5325E-08, 4.2204E-08, 9.0841E-08, 1.0846E-07, 1.9666E-07, 1.8098E-07, 2.6718E-07, 3.4399E-07, 5.2549E-07, 6.9212E-07, 9.7823E-07, 1.2237E-06, 1.9772E-06, 2.8229E-06, 3.8639E-06, 1.5294E-06, -3.9524E-07, -1.0537E-06, 2.4697E-06, 5.5029E-06, 6.1585E-06, 4.5912E-06, 4.1524E-06, 3.4208E-06, 3.2792E-06, 2.6369E-06, 3.3365E-06, 2.0180E-06, 3.0069E-06, 2.4784E-06, 4.0784E-06, 2.4145E-06, 4.3024E-06, 3.1125E-06, 4.3430E-06, 2.6896E-06, 4.6802E-06, 3.4581E-06, 5.3675E-06, 3.5845E-06, 5.2209E-06, 4.5103E-06, 8.3187E-06, 6.2418E-06, 6.2603E-06, 2.8885E-06, 5.9334E-06, 4.5056E-06, 8.7766E-06, 8.3026E-06, 9.7588E-06, 8.1521E-06, 9.5747E-06, 1.0721E-05, 9.3065E-06, 3.3449E-06, 1.1802E-05, 2.0139E-06, 1.1088E-05, 1.1096E-05, 1.5693E-05, 9.3272E-06, 1.3954E-05, 8.5014E-06, 1.3836E-05, 8.5966E-06, 1.3022E-05, 5.6565E-06, 1.4878E-05, 9.6913E-06, 1.5197E-05, 1.0327E-05, 1.8679E-05, 9.7773E-06, 1.9146E-05, 7.1270E-06, 2.2688E-05, 8.3142E-06, 2.2282E-05, 1.5780E-05, 2.7886E-05, 2.2716E-05, 3.2599E-05, 2.4946E-05, 2.1948E-05, 8.3273E-06, 2.3157E-05, 1.2921E-05, 3.1003E-05, 3.6951E-05, 4.0474E-05, 2.7012E-05, 3.8069E-05, 2.4896E-05, 4.3142E-05, 1.9942E-05, 4.2244E-05, 2.5811E-05, 5.2111E-05, 2.1846E-05, 6.1340E-05, 3.0026E-05, 5.4184E-05, 3.8313E-05, 6.6893E-05, 4.6861E-05, 7.3347E-05, 6.0808E-05, 9.2745E-05, 6.8734E-05, 1.1717E-04, 1.0079E-04, 1.3588E-04, 1.1905E-04, 2.0976E-04, 1.9450E-04, 2.8729E-04, 3.2989E-04, 5.5319E-04, 6.9888E-04, 1.0914E-03, 1.7635E-03, 2.8916E-03, 3.3328E-03, -3.1904E-03, 1.4778E-03, -4.6144E-03, 9.4329E-04, 3.4622E-03, 2.3732E-03, 1.4101E-03, 8.4854E-04, 6.4464E-04, 4.1001E-04, 3.2948E-04, 2.1637E-04, 2.2504E-04, 1.3331E-04, 1.4757E-04, 1.0870E-04, 1.2089E-04, 7.5175E-05, 8.7718E-05, 6.7685E-05, 7.7435E-05, 4.8906E-05, 6.1257E-05, 4.4197E-05, 5.2125E-05, 4.2410E-05, 5.0237E-05, 3.7383E-05, 4.9011E-05, 2.7380E-05, 3.9969E-05, 2.7564E-05, 3.9502E-05, 2.8394E-05, 3.1448E-05, 2.9365E-05, 3.6630E-05, 2.9686E-05, 3.2786E-05, 2.6181E-05, 2.0399E-05, 1.4891E-05, 1.6486E-05, 2.3429E-05, 3.4881E-05, 2.4510E-05, 2.6366E-05, 1.8329E-05, 2.0565E-05, 1.6835E-05, 1.6137E-05, 1.5699E-05, 1.7364E-05, 1.3968E-05, 1.4471E-05, 1.4765E-05, 1.5728E-05, 1.1223E-05, 1.2234E-05, 1.0371E-05, 1.0975E-05, 1.0975E-05, 1.0074E-05, 1.1037E-05, 1.1438E-05, 1.1838E-05, 1.2779E-05, 1.3784E-05, 1.0186E-05, 3.4141E-06, 6.0080E-06, 1.1045E-05, 1.1737E-05, 7.5660E-06, 1.0152E-05, 9.3692E-06, 9.4953E-06, 9.7007E-06, 7.2853E-06, 8.4853E-06, 4.1779E-06, 5.5260E-06, 4.3803E-06, 6.7543E-06, 7.9174E-06, 5.7639E-06, 5.2478E-06, 4.5585E-06, 4.6275E-06, 3.7338E-06, 2.3659E-06, 3.9523E-06, 2.5091E-06, 4.1950E-06, 3.3326E-06, 3.1115E-06, 3.0454E-06, 2.7964E-06, 2.7255E-06, 2.7575E-06, 2.6531E-06, 2.5149E-06, 2.5591E-06, 3.3358E-06, 3.4781E-06, 3.8373E-06, 5.3391E-06, 5.6217E-06, 2.8012E-06, -1.1281E-07, -4.7257E-07, 4.5813E-07, 2.8030E-06, 3.5311E-06, 2.3615E-06, 1.3607E-06, 1.0633E-06, 8.1577E-07, 5.6676E-07, 4.1238E-07, 2.5320E-07, 1.7309E-07, 1.6999E-07, 1.3152E-07, 7.9085E-08, 4.3735E-08, 2.7853E-08, 1.4313E-08, 2.4992E-09, -1.3956E-11, -2.2830E-11, 3.5606E-09, 9.4078E-09, 2.7118E-08, 5.9865E-08, 1.3159E-07, 1.0557E-07, 1.7710E-07, 2.1424E-07, 4.0869E-07, 3.9927E-07, 8.3650E-07, 1.0995E-06, 1.6911E-06, 2.3215E-06, 3.2328E-06, 2.7754E-06, 6.6856E-07, -2.2196E-07, 2.0171E-06, 2.1403E-06, -7.2090E-08, -2.6639E-07, 4.5090E-06, 6.1423E-06, 7.4324E-06, 5.8982E-06, 5.4014E-06, 4.5746E-06, 4.1942E-06, 3.8518E-06, 4.5288E-06, 3.3190E-06, 4.2465E-06, 3.6981E-06, 5.3787E-06, 3.6135E-06, 5.6009E-06, 3.6751E-06, 5.3716E-06, 3.8654E-06, 6.9346E-06, 5.3262E-06, 7.3830E-06, 7.1851E-06, 8.0382E-06, 4.7517E-06, 7.4363E-06, 4.6470E-06, 8.8355E-06, 5.5400E-06, 8.6858E-06, 1.0543E-05, 1.2816E-05, 1.2611E-05, 1.0733E-05, 9.7938E-06, 1.2865E-05, 3.8705E-06, 1.0421E-05, 5.6014E-06, 1.1197E-05, 5.6970E-06, 1.3994E-05, 1.5586E-05, 1.8198E-05, 1.2430E-05, 1.8099E-05, 1.0860E-05, 1.7130E-05, 1.2257E-05, 1.7284E-05, 1.2069E-05, 1.9032E-05, 1.3021E-05, 2.0354E-05, 1.2023E-05, 2.3973E-05, 1.2057E-05, 2.7257E-05, 1.7162E-05, 2.9224E-05, 2.3971E-05, 3.5316E-05, 3.4759E-05, 3.4673E-05, 1.2742E-05, 2.0486E-05, 2.0263E-05, 3.0817E-05, 9.9819E-06, 3.2904E-05, 3.0536E-05, 4.6633E-05, 4.3954E-05, 5.5978E-05, 3.3810E-05, 5.3320E-05, 2.8182E-05, 5.8884E-05, 2.4868E-05, 5.4100E-05, 4.0137E-05, 7.2417E-05, 3.5765E-05, 7.2929E-05, 5.7860E-05, 8.4536E-05, 6.0071E-05, 9.7264E-05, 8.2960E-05, 1.2053E-04, 9.6468E-05, 1.5458E-04, 1.4137E-04, 2.0736E-04, 1.9563E-04, 3.2320E-04, 3.3944E-04, 4.7322E-04, 5.9176E-04, 9.5009E-04, 1.3183E-03, 1.8092E-03, 2.0514E-03, 9.8879E-04, -2.0535E-03, -1.9312E-04, -1.0118E-03, 1.9142E-03, -2.7346E-03, -4.1082E-04, 1.8441E-03, 1.9633E-03, 1.5560E-03, 1.1373E-03, 7.5471E-04, 5.4853E-04, 3.7833E-04, 3.5636E-04, 2.2595E-04, 2.1151E-04, 1.6218E-04, 1.6319E-04, 1.0929E-04, 1.1717E-04, 9.4568E-05, 1.0117E-04, 6.8173E-05, 7.7908E-05, 6.5113E-05, 6.9417E-05, 5.3431E-05, 5.7475E-05, 4.4787E-05, 5.8015E-05, 3.6578E-05, 5.1137E-05, 3.2346E-05, 4.3387E-05, 4.4289E-05, 5.2038E-05, 3.6405E-05, 5.0085E-05, 3.2455E-05, 2.8105E-05, 1.6910E-05, 2.2402E-05, 2.2558E-05, 2.5013E-05, 1.3238E-05, 2.2080E-05, 2.8270E-05, 3.4997E-05, 2.8525E-05, 2.5073E-05, 2.3029E-05, 2.2631E-05, 1.9850E-05, 1.8994E-05, 1.6566E-05, 1.8120E-05, 1.6781E-05, 1.5405E-05, 1.6556E-05, 1.5196E-05, 1.3357E-05, 1.2569E-05, 1.4408E-05, 1.3903E-05, 1.5281E-05, 1.6232E-05, 1.5901E-05, 1.5806E-05, 1.0947E-05, 9.7081E-06, 1.0870E-05, 1.1780E-05, 6.6661E-06, 7.0082E-06, 1.0171E-05, 1.2887E-05, 1.2502E-05, 1.3946E-05, 1.3119E-05, 6.7599E-06, 8.1177E-06, 6.3632E-06, 7.2847E-06, 5.1250E-06, 5.9462E-06, 5.7386E-06, 8.2716E-06, 8.4423E-06, 6.7281E-06, 4.8891E-06, 6.1691E-06, 5.1922E-06, 5.5538E-06, 3.7136E-06, 5.0837E-06, 4.3967E-06, 4.5495E-06, 3.9158E-06, 3.7866E-06, 3.4826E-06, 4.2739E-06, 3.9118E-06, 4.4079E-06, 4.7144E-06, 5.4224E-06, 5.9711E-06, 7.1895E-06, 5.5792E-06, 2.7474E-06, -8.9676E-07, 1.8383E-06, 1.8724E-06, 5.3080E-07, -7.9414E-07, 1.8515E-06, 2.7163E-06, 2.4392E-06, 1.8333E-06, 1.2212E-06, 8.4706E-07, 5.5191E-07, 3.5316E-07, 2.8614E-07, 1.6945E-07, 1.6609E-07, 9.1216E-08, 5.3449E-08, 3.2917E-08, 1.0869E-08, 4.3213E-10, -1.8717E-11, 6.1533E-11, 1.2991E-09, -5.8708E-09, -4.2357E-09, -1.2452E-08, -5.0910E-08, -6.0104E-08, -1.4715E-07, -2.0390E-07, -3.6002E-07, -5.3592E-07, -6.8298E-07, -1.1789E-06, -1.5987E-06, -1.8391E-06, -1.3244E-06, 5.2685E-07, 9.7286E-07, -1.1228E-06, -1.7867E-07, 2.2605E-07, -1.8640E-06, 2.5591E-07, 1.6294E-06, -1.5339E-06, -5.1601E-06, -5.5788E-06, -5.7602E-06, -4.7974E-06, -4.1008E-06, -3.4018E-06, -3.5695E-06, -2.8717E-06, -2.7884E-06, -2.8523E-06, -3.0185E-06, -2.7549E-06, -4.0589E-06, -3.3771E-06, -3.9101E-06, -3.6772E-06, -5.3478E-06, -5.2563E-06, -4.3532E-06, -3.9628E-06, -3.4893E-06, -3.0617E-06, -3.9828E-06, -4.6266E-06, -5.6473E-06, -5.0519E-06, -6.5493E-06, -5.1815E-06, -5.7766E-06, -8.0137E-06, -7.0227E-06, -1.4961E-06, -5.8024E-06, -8.0390E-06, -7.4876E-06, -5.2893E-06, -1.0786E-05, -2.4158E-06, -3.6289E-06, -8.1131E-06, -1.1981E-05, -1.1124E-05, -1.1948E-05, -9.5624E-06, -1.1018E-05, -9.1885E-06, -1.1372E-05, -7.6452E-06, -1.1105E-05, -8.6823E-06, -1.1338E-05, -8.8285E-06, -1.6094E-05, -1.1844E-05, -1.5206E-05, -1.3298E-05, -2.1610E-05, -2.1702E-05, -1.7426E-05, -1.1924E-05, -6.3542E-06, -4.8452E-06, -1.9534E-05, -1.0141E-05, -2.0023E-05, -1.7330E-05, -1.3117E-05, 2.2053E-06, -1.6655E-05, -3.2950E-05, -4.2052E-05, -2.7104E-05, -2.8653E-05, -2.6089E-05, -3.2725E-05, -2.8162E-05, -3.1063E-05, -3.0192E-05, -3.7295E-05, -3.1577E-05, -4.6686E-05, -4.4357E-05, -5.5462E-05, -4.8215E-05, -6.3925E-05, -7.0743E-05, -8.5849E-05, -8.6910E-05, -1.2061E-04, -1.4689E-04, -1.7305E-04, -2.0413E-04, -3.0539E-04, -3.9489E-04, -5.0561E-04, -6.6935E-04, -9.7045E-04, -1.2843E-03, -1.1346E-03, 5.9590E-05, 2.0157E-03, 4.1665E-05, -5.2105E-04, -4.2862E-04, 1.5337E-03, -1.7623E-03, 1.7027E-03, 1.0650E-03, -5.5323E-04, -1.3052E-03, -1.1201E-03, -8.6138E-04, -5.7793E-04, -4.2546E-04, -3.4650E-04, -2.5839E-04, -1.8819E-04, -1.4757E-04, -1.3480E-04, -9.7776E-05, -8.3040E-05, -7.6527E-05, -7.2034E-05, -5.4755E-05, -5.3037E-05, -5.1797E-05, -4.5046E-05, -3.3855E-05, -3.7765E-05, -2.5234E-05, -2.9066E-05, -2.9975E-05, -3.4577E-05, -2.6316E-05, -3.2703E-05, -2.6721E-05, -3.6426E-05, -2.0352E-05, -2.8598E-05, -1.4884E-05, -1.2514E-05, -1.0855E-05, -1.7281E-05, -9.4859E-06, -1.2837E-05, -8.1050E-06, -2.7219E-07, -9.0622E-06, -1.8135E-05, -2.0655E-05, -2.1705E-05, -1.8329E-05, -1.8121E-05, -1.2390E-05, -1.5110E-05, -1.0375E-05, -1.0586E-05, -6.6428E-06, -7.1157E-06, -1.1214E-05, -1.0075E-05, -9.7636E-06, -8.4767E-06, -1.1177E-05, -1.2226E-05, -1.1226E-05, -1.3016E-05, -7.8657E-06, -5.5672E-06, -2.4001E-06, -6.3194E-06, -5.5162E-06, -5.7641E-06, -7.7907E-06, -6.2246E-06, -6.0965E-06, -4.7383E-06, -7.0705E-06, -8.2743E-06, -7.3793E-06, -5.8829E-06, -5.4177E-06, -4.7990E-06, -5.1447E-06, -4.8396E-06, -3.0433E-06, -2.3252E-06, -3.9051E-06, -4.7957E-06, -5.0508E-06, -4.5699E-06, -4.1983E-06, -3.0883E-06, -4.1200E-06, -3.1742E-06, -3.4958E-06, -2.9071E-06, -2.6738E-06, -2.6019E-06, -3.0951E-06, -2.8572E-06, -3.2514E-06, -3.4974E-06, -4.0648E-06, -4.6210E-06, -5.7915E-06, -4.9244E-06, -3.7557E-06, 5.1332E-07, 1.7045E-06, -9.6923E-07, -8.5780E-07, -3.9157E-07, -8.7256E-07, -5.4556E-07, 9.4858E-07, -4.6040E-08, -1.7104E-06, -1.6452E-06, -1.2180E-06, -8.4395E-07, -5.3433E-07, -4.0497E-07, -1.9973E-07, -1.1638E-07, -6.0703E-08, -2.4006E-08, -3.7968E-08, -1.5143E-08, -4.2549E-09, -3.4466E-10, 2.1698E-10, -4.9333E-11, 6.2706E-10, 2.2918E-09, 1.9685E-08, 6.7310E-09, 2.0991E-08, 8.8654E-08, 1.7592E-07, 3.1513E-07, 4.9182E-07, 8.0186E-07, 1.0813E-06, 1.2183E-06, 1.1656E-06, 6.3110E-08, -1.4829E-06, -5.4983E-07, 1.6354E-06, 7.3958E-07, 1.1164E-06, 1.1998E-06, 4.0440E-07, 2.0542E-06, 9.6992E-08, -2.9924E-06, -5.9824E-07, 3.8733E-06, 5.8122E-06, 6.4949E-06, 6.0734E-06, 5.5832E-06, 4.9567E-06, 4.5996E-06, 4.4341E-06, 4.1519E-06, 3.7698E-06, 3.3082E-06, 5.1309E-06, 4.5365E-06, 5.2499E-06, 5.0284E-06, 4.9393E-06, 5.1057E-06, 4.0323E-06, 2.6317E-06, 4.1144E-06, 4.5275E-06, 5.0717E-06, 5.5528E-06, 6.8801E-06, 7.5074E-06, 8.7213E-06, 7.0018E-06, 5.3145E-06, 8.0122E-07, 8.0938E-06, 7.6599E-06, 9.5225E-06, 6.4186E-06, 8.4534E-06, 8.6273E-06, 8.0489E-06, 6.0227E-06, 7.3030E-06, 2.4201E-06, 8.4975E-06, 1.2224E-05, 1.6746E-05, 1.3338E-05, 1.6361E-05, 1.2241E-05, 1.5728E-05, 1.0809E-05, 1.3464E-05, 8.9819E-06, 1.4178E-05, 1.4205E-05, 1.8755E-05, 1.4752E-05, 2.6160E-05, 2.2426E-05, 2.5192E-05, 1.5871E-05, 1.4524E-05, -9.6862E-06, 1.2114E-05, 1.5729E-05, 1.6286E-05, 1.5337E-05, 1.6383E-05, 1.3838E-05, 2.4807E-05, 1.4891E-05, 1.7872E-05, 9.3162E-06, 3.2419E-05, 3.0288E-05, 4.1885E-05, 3.5735E-05, 4.9572E-05, 3.2399E-05, 4.8144E-05, 3.3893E-05, 4.8780E-05, 4.5573E-05, 5.5857E-05, 5.5944E-05, 7.4767E-05, 7.0724E-05, 9.2713E-05, 9.7740E-05, 1.2448E-04, 1.2974E-04, 1.8471E-04, 2.1517E-04, 2.6725E-04, 3.2376E-04, 4.7893E-04, 6.1396E-04, 7.5733E-04, 8.5467E-04, 8.8340E-04, 5.4713E-04, -6.7201E-04, -1.5280E-03, 2.9027E-04, 5.5140E-04, -4.8345E-04, -3.0327E-04, 6.4353E-04, -8.6714E-04, 1.1203E-03, -8.0768E-04, -1.3394E-03, -3.4047E-05, 7.4167E-04, 9.2681E-04, 8.2239E-04, 6.7248E-04, 5.3957E-04, 3.9826E-04, 2.9751E-04, 2.3478E-04, 2.0388E-04, 1.4594E-04, 1.2601E-04, 1.0719E-04, 9.7618E-05, 7.6605E-05, 7.3093E-05, 6.3926E-05, 6.1632E-05, 4.1427E-05, 5.2552E-05, 3.9932E-05, 4.4726E-05, 3.8963E-05, 4.5394E-05, 3.4963E-05, 3.6489E-05, 3.5908E-05, 2.9238E-05, 1.5313E-05, 1.0221E-05, 1.6144E-05, 2.5938E-05, 2.2192E-05, 1.5933E-05, 1.8898E-05, 1.7522E-05, 1.9969E-05, 1.9607E-05, 3.9887E-06, 4.1491E-06, 1.1426E-05, 2.0212E-05, 2.2934E-05, 2.3300E-05, 1.9970E-05, 1.7264E-05, 1.6539E-05, 1.6368E-05, 1.2722E-05, 1.1649E-05, 1.2074E-05, 1.4088E-05, 1.4099E-05, 1.4252E-05, 1.4486E-05, 1.4884E-05, 1.2299E-05, 1.1988E-05, 4.3364E-06, 2.7764E-06, 8.3319E-06, 6.7026E-06, 8.3539E-06, 9.1982E-06, 8.2299E-06, 1.0595E-05, 8.6144E-06, 4.1839E-06, 3.0368E-06, 2.7565E-06, 5.9393E-06, 8.1862E-06, 8.4320E-06, 7.0979E-06, 5.9001E-06, 4.8576E-06, 5.8669E-06, 4.1265E-06, 3.0227E-06, 2.2316E-06, 6.0278E-06, 5.7625E-06, 5.4358E-06, 5.5285E-06, 5.1461E-06, 5.0030E-06, 3.4533E-06, 3.2877E-06, 3.5762E-06, 3.4841E-06, 4.7492E-06, 4.5612E-06, 5.4180E-06, 5.7536E-06, 6.4253E-06, 6.0605E-06, 5.4326E-06, 1.9902E-06, -2.5215E-06, -1.8636E-06, 1.5677E-06, 1.0872E-06, 1.0218E-06, 8.0659E-07, 4.1820E-07, 8.7168E-07, 9.2890E-07, -1.2980E-06, -4.0810E-07, 6.3723E-07, 1.1328E-06, 1.0486E-06, 8.7283E-07, 5.5453E-07, 3.6315E-07, 1.7913E-07, 9.5006E-08, 4.4857E-08, 1.3513E-08, 6.1687E-09, 6.1727E-10, 1.1493E-10, 8.9331E-11, 8.6779E-11, -4.9088E-10, -1.5559E-10, 3.2004E-09, 1.9564E-08, 5.7434E-08, 8.3142E-08, 2.1167E-07, 3.3890E-07, 5.8747E-07, 7.9716E-07, 8.7475E-07, 4.2982E-07, -5.1425E-07, -1.1524E-06, 2.8640E-07, 1.1732E-06, -4.5722E-08, 4.6123E-07, 2.5670E-07, 3.1696E-07, 1.0474E-06, -1.7629E-07, 2.4468E-06, 2.0674E-06, -2.3171E-06, -2.5279E-06, 1.2873E-06, 4.6410E-06, 6.2566E-06, 6.4562E-06, 6.3763E-06, 5.5014E-06, 5.0578E-06, 4.2640E-06, 4.2002E-06, 4.2005E-06, 3.7177E-06, 4.7260E-06, 5.6700E-06, 5.0867E-06, 4.6390E-06, 2.0919E-06, 3.8345E-06, 3.2028E-06, 4.9369E-06, 5.1533E-06, 5.5749E-06, 6.0118E-06, 7.2121E-06, 7.3535E-06, 6.5496E-06, 2.4438E-06, 4.1923E-06, -6.4625E-07, 4.3965E-06, 4.7554E-06, 6.3679E-06, 8.6713E-06, 1.1512E-05, 6.2732E-06, 8.1995E-06, 7.1793E-06, 1.0226E-05, 4.1524E-06, 3.6916E-06, 3.1230E-06, 1.0786E-05, 1.3940E-05, 1.4780E-05, 1.1838E-05, 1.4805E-05, 1.0809E-05, 1.6001E-05, 1.1225E-05, 1.6984E-05, 1.4550E-05, 1.9545E-05, 1.8689E-05, 2.1878E-05, 1.7402E-05, 9.1390E-06, -3.4162E-06, 6.7292E-06, 1.2270E-05, 2.1855E-05, 9.7585E-06, 1.6679E-05, 1.5131E-05, 2.2680E-05, 1.4567E-05, 1.9587E-05, 2.6199E-05, 2.3327E-05, -2.9465E-06, 5.9396E-06, 1.7595E-05, 3.4617E-05, 3.8928E-05, 4.1641E-05, 3.8357E-05, 4.4762E-05, 4.1341E-05, 5.4158E-05, 4.2601E-05, 5.4102E-05, 6.0706E-05, 7.6599E-05, 7.7799E-05, 1.0359E-04, 1.1596E-04, 1.3970E-04, 1.5833E-04, 2.2812E-04, 2.7518E-04, 3.3183E-04, 4.1665E-04, 5.5976E-04, 6.9161E-04, 7.1829E-04, 4.9071E-04, -1.5094E-04, -9.0961E-04, -8.4379E-04, 6.4663E-04, 2.9255E-04, -7.0809E-04, 4.5376E-04, 1.3053E-04, -6.1320E-04, 3.9455E-04, -7.0834E-04, 9.3288E-04, -6.0277E-05, -1.1385E-03, -5.6461E-04, 2.6101E-04, 6.1788E-04, 7.2059E-04, 6.2824E-04, 5.0646E-04, 3.6851E-04, 2.9390E-04, 2.4522E-04, 1.8706E-04, 1.4809E-04, 1.2770E-04, 1.0977E-04, 8.8556E-05, 8.0368E-05, 6.2793E-05, 6.3224E-05, 4.9255E-05, 4.7814E-05, 4.8389E-05, 4.6420E-05, 4.0171E-05, 4.4839E-05, 4.1754E-05, 3.9347E-05, 2.9073E-05, 1.9935E-05, 1.3297E-05, 1.2647E-05, 1.8328E-05, 1.8676E-05, 1.1933E-05, 2.0949E-05, 1.1837E-05, 1.2971E-05, 1.2153E-05, 1.3939E-05, 1.7795E-05, 6.2361E-06, 2.1885E-06, 3.4411E-06, 1.4580E-05, 2.1357E-05, 2.0194E-05, 2.0381E-05, 1.6193E-05, 1.5874E-05, 1.5358E-05, 1.2929E-05, 1.2228E-05, 1.0643E-05, 1.4912E-05, 1.3655E-05, 1.4422E-05, 1.2343E-05, 6.3112E-06, 3.5151E-06, 3.7949E-06, 9.1489E-06, 5.1843E-06, 8.2558E-06, 7.7578E-06, 8.3555E-06, 9.9648E-06, 4.8101E-06, 6.8158E-06, 5.0532E-06, 2.3190E-06, 1.8312E-07, 1.4920E-06, 4.6478E-06, 6.6372E-06, 8.1242E-06, 6.2813E-06, 5.5032E-06, 5.7015E-06, 4.2188E-06, 3.7896E-06, 2.5520E-06, 2.6092E-06, 2.8814E-06, 5.1117E-06, 5.5395E-06, 5.2149E-06, 3.8158E-06, 4.1536E-06, 4.5145E-06, 4.2874E-06, 4.6071E-06, 4.9139E-06, 5.3411E-06, 6.1229E-06, 5.8846E-06, 5.7326E-06, 2.6630E-06, -5.4897E-07, -2.7910E-06, 4.7700E-07, 3.0066E-06, 1.1248E-06, -2.4596E-08, 1.0215E-06, 5.9188E-07, 4.8281E-07, -3.1781E-09, 6.5029E-07, 1.0899E-06, -7.3618E-07, -1.0384E-06, -4.7718E-08, 6.2262E-07, 7.7841E-07, 6.2100E-07, 3.8803E-07, 2.3541E-07, 1.0460E-07, 4.6962E-08, 7.4441E-09, -3.6249E-09, -3.7066E-11, -5.2372E-10, 5.6248E-11, -7.6271E-11, 7.2302E-11, -4.0397E-09, -9.3469E-09, 4.0655E-09, 2.7794E-08, 8.1791E-08, 1.5044E-07, 3.0742E-07, 3.7727E-07, 3.8762E-07, -5.0195E-08, -6.7138E-07, -8.6669E-07, 3.8450E-07, 1.2139E-06, -8.9148E-07, 1.5161E-07, 6.4578E-07, 7.2612E-07, 8.5279E-07, 2.2806E-08, 1.4569E-06, -1.0990E-06, 1.6829E-06, 2.8495E-06, -1.6534E-06, -2.3796E-06, -1.5511E-07, 2.6544E-06, 4.5856E-06, 5.0039E-06, 5.1309E-06, 4.1022E-06, 4.2867E-06, 3.7176E-06, 4.3219E-06, 3.8239E-06, 3.7659E-06, 2.7119E-06, 2.3091E-06, 1.7713E-06, 1.5185E-06, 2.1978E-06, 3.3006E-06, 4.0713E-06, 3.5932E-06, 3.9792E-06, 4.7081E-06, 3.8032E-06, 3.0338E-06, 1.3067E-06, -8.3386E-07, 6.0807E-07, 4.6074E-06, 1.0884E-06, -2.0469E-06, 2.1479E-06, 3.2344E-06, 2.2924E-06, 4.2900E-06, 4.2646E-06, 4.2921E-06, 4.9102E-06, 8.5761E-06, 6.1453E-06, 5.6739E-07, 2.0704E-06, 5.3064E-06, 8.0538E-06, 9.6334E-06, 9.4842E-06, 1.0619E-05, 1.1334E-05, 1.0767E-05, 1.2439E-05, 1.2885E-05, 1.5042E-05, 1.1511E-05, 8.4103E-06, 2.0716E-06, 3.8458E-07, -1.2483E-06, 8.1225E-06, 1.5734E-05, 7.1102E-06, 6.2680E-06, 1.1625E-05, 1.1102E-05, 8.9504E-06, 1.3206E-05, 1.2393E-05, -6.5486E-09, 9.6248E-06, 1.5422E-05, 8.4653E-06, 3.7927E-06, 1.3529E-05, 2.4241E-05, 2.9483E-05, 3.2779E-05, 3.5677E-05, 3.6121E-05, 4.0840E-05, 3.7885E-05, 4.6014E-05, 5.1540E-05, 5.8716E-05, 6.3532E-05, 8.8276E-05, 1.0475E-04, 1.2300E-04, 1.5863E-04, 2.0866E-04, 2.6538E-04, 3.1568E-04, 3.8689E-04, 4.3170E-04, 4.3369E-04, 2.3548E-04, -2.1341E-04, -7.9574E-04, -5.5308E-04, 7.6324E-04, 2.3974E-04, -8.7691E-04, 7.7450E-04, -5.1636E-04, -1.5939E-04, 5.0922E-04, -3.0749E-04, 3.9064E-04, -7.6837E-04, 7.5001E-04, 1.0088E-04, -7.6236E-04, -5.1717E-04, -1.6859E-05, 3.5002E-04, 4.6181E-04, 4.3723E-04, 3.3927E-04, 2.7531E-04, 2.3423E-04, 1.8426E-04, 1.3628E-04, 1.1232E-04, 9.9975E-05, 7.3351E-05, 6.2129E-05, 5.0498E-05, 4.8109E-05, 4.1987E-05, 3.8093E-05, 3.9992E-05, 3.2867E-05, 3.2573E-05, 3.3010E-05, 3.0635E-05, 1.2811E-05, 4.3472E-06, 3.4567E-06, 1.0559E-05, 1.6581E-05, 7.1199E-06, 9.1188E-06, 1.4300E-05, 8.1685E-06, 1.3511E-05, 9.6381E-06, 1.0638E-05, 3.0308E-06, 8.3118E-06, 1.6003E-05, 6.3918E-06, 3.0966E-06, -1.0836E-06, 6.5664E-06, 1.2291E-05, 1.3734E-05, 1.4363E-05, 9.7526E-06, 1.1615E-05, 1.1514E-05, 1.2405E-05, 1.1063E-05, 8.3982E-06, 8.6608E-06, 6.4118E-06, 5.7327E-06, -2.4104E-07, 1.6373E-06, 5.6608E-06, 6.8946E-06, 5.3889E-06, 5.1352E-06, 5.9627E-06, 5.0677E-06, 3.3460E-06, 3.9050E-06, 1.3445E-06, 1.4309E-07, 2.8707E-06, 3.0944E-06, -1.6632E-08, 8.6962E-07, 1.9677E-06, 3.7269E-06, 5.0849E-06, 4.5791E-06, 2.8646E-06, 3.8781E-06, 4.5755E-06, 3.1862E-06, 1.6089E-06, 1.8025E-06, 1.7232E-06, 3.0324E-06, 2.6906E-06, 4.1475E-06, 4.0347E-06, 3.7478E-06, 3.3696E-06, 4.7095E-06, 4.4020E-06, 5.2298E-06, 4.6892E-06, 3.7225E-06, 1.2182E-06, -1.4559E-06, -3.0458E-06, -3.1261E-08, 3.1078E-06, -3.2668E-07, -2.4480E-07, 1.3664E-06, 1.3277E-07, 1.0316E-06, 6.1777E-07, 5.0784E-07, -5.6459E-07, 5.9133E-08, 1.0310E-06, -4.0869E-07, -6.6624E-07, -3.3181E-07, 2.8273E-07, 3.4484E-07, 3.0234E-07, 1.9591E-07, 8.2853E-08, 5.0977E-08, 1.2856E-08, 2.4141E-09, -5.5037E-10, -7.7381E-11, -2.0559E-11); \n\n//second pass: do the convolution in the y direction\n//and write the result to the output    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //do a convolution in the y direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy/2.0);\n    ivec2 coord = ivec2(fragCoord.xy) % resol;\n    ivec2 block = ivec2(fragCoord.xy) / resol;\n\n    //we only need 1 block, since we can sum all the ranks here\n    if(block.x + block.y * 2 >= 1)\n        discard;\n\n    vec3 sum = vec3(0.0);\n    for (int i = -Nc; i < Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        ivec2 pos = ivec2(coord.x + i, coord.y);\n\n        //skip if the coordinate is outside the image\n        if(pos.x < 0 || pos.x >= resol.x || pos.y < 0 || pos.y >= resol.y)\n            continue;\n        \n        //loop over pairs of ranks\n        for(int j = 0; j < Nr; j += 2)\n        {\n            int block_id = j / 2;\n            ivec2 block_offset = ivec2(block_id % 2, block_id / 2);\n            vec4 pixel = texelFetch(iChannel0, pos + block_offset * resol, 0);\n\n            //unpack the values\n            vec3 val1, val2;\n            unpack2vec3(pixel.xyz, val1, val2);\n\n            //add the values to the sum\n            sum += val1 * V[i + Nc + j * N];\n            sum += val2 * V[i + Nc + (j + 1) * N];\n        }\n    }\n\n    //return the sum\n    fragColor = vec4(sum, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}