{
    "Shader": {
        "info": {
            "date": "1650995789",
            "description": "1: Poisson random distribution.    mouse.y = lambda = average ( and variance )\n2: normalized by lambda\n3: ( p - average ) / stddev ( i.e. show fluctuations )\n4: uniform ( approx of white noise )",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsBDM",
            "likes": 6,
            "name": "Poisson distribution",
            "published": 3,
            "tags": [
                "random",
                "poisson",
                "statistics",
                "probabilities"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 517
        },
        "renderpass": [
            {
                "code": "// https://en.wikipedia.org/wiki/Poisson_distribution\n//#define hash2(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 4375.85453) // float hash\n//#define hash2(p)  hash(vec3(p,0)).x                                      // integer hash\n  #define hash2(p)  ( U.y/R.y < .5 ?  fract(sin(dot(p, vec2(12.9898, 78.233))) * 4375.85453) : hash(vec3(p,0)).x ) // bottom/top \n\n//#define hash1(f)  hash2(vec2(f,1))                         // float hash\n//#define hash1(f)  hash(vec3(f)).x                          // integer hash\n  #define hash1(f)  ( U.y/R.y < .5 ? hash2(vec2(f,1)) : hash(vec3(f)).x ) // bottom/top\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    float lambda = iMouse.z>0. ? exp2(5.*iMouse.y/R.y) : 3., // average ( and variance )\n            seed = hash2(U),\n          x = 0., p = exp(-lambda), s = p,S;\n    while( ( seed = hash1(seed) ) > s )\n        s += p *= lambda/ ++x;\n    \n    s = 4.*U.x/R.x; \n    x =   s<1. ? x/10.                             // Poisson distrib with 3 different normalizations\n        : s<2. ? .5*x/lambda\n        : s<3. ? .5+.5*(x-lambda)/sqrt(lambda)\n        :        hash1(seed);                      // Uniform\n    O = vec4( sqrt(x) );                           // to sRGB\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 20170906U;    // Today's date (use three days ago's dateif you want a prime)\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 uhash3( uvec3 x )         // iq version\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)/float(0xffffffffU);\n}\n\nvec3 hash( vec3 f )            // vec3 to vec3. any scaling. f.z=0 seed is ok.\n{ \n    return uhash3( uvec3( floatBitsToUint(f.x),\n                          floatBitsToUint(f.y),\n                          floatBitsToUint(f.z) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}