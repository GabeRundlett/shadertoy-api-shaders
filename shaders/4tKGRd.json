{
    "Shader": {
        "info": {
            "date": "1476217399",
            "description": "displace on xz of [url=https://www.shadertoy.com/view/4lG3Rd]Rosace 5[/url] with a time inversion according to the sign of the y axis. so there is an artifact near the domain limit :) it can be possible to remove it with a special normal calcul. but how ?",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKGRd",
            "likes": 4,
            "name": "Ray Marching Experiment 58",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "58"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nvec3 Effect2D( vec2 uv, float sens)\n{\n\tuv = vec2(atan(uv.x/uv.y)/atan(-1.), length(uv));\n\tuv.x += uv.y;\n    if ( sens > 0.)\tuv.y -= iTime * 0.5;\n    else uv.y -= iTime * -0.5 + 0.62;\n\tuv = abs(fract(uv)-0.5);\n\tfloat r = length(uv)*2.;\n\tuv += vec2(cos(r),sin(r))*r;\n\treturn 1.2 - vec3(max(uv.x, uv.y));\n}\n\nvec4 df(vec3 p)\n{\n    vec2 g = p.xz * .2;\n    vec3 tex = Effect2D(g, sign(p.y));\n    float disp = dot(tex, vec3(0.1));\n\tfloat l = length(p) - 4.;\n    l = max(-l + 0.1 , l) - smoothstep(0., 1., disp);\n    return vec4(l, tex.rgb);\n}\n\nvec3 nor( in vec3 p, vec3 prec )\n{\n\tvec3 e = vec3( 0.03, 0., 0. );\n\tvec3 n = vec3(\n\t    df(p+e.xyy).x - df(p-e.xyy).x,\n\t    df(p+e.yxy).x - df(p-e.yxy).x,\n\t    df(p+e.yyx).x - df(p-e.yyx).x );\n\treturn normalize(n);\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t\n\tvec3 n = nor(p, vec3( 0.001, 0, 0));\t\t\t\t\t\t\t\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\n\tvec3 tex = df(p).yzw;\n\treturn (diff * 0.4 + fre * 0.1 + spe * 0.3 + tex * .8) * li;\t\t\t\t\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    \n    float time = iTime*0.25;\n    \n    float cam_a = 0.; \n    \n    float cam_e = 5.; \n    float cam_d = 1.2; \n    \n    vec2 uv = (fragCoord * 2.-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n\t\n  \tvec3 cu = vec3(0,1,0);\n  \tvec3 cv = vec3(0,0,0); \n    \n\tvec3 rov = normalize(cv-ro);\n    vec3 u = normalize(cross(cu,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n\tfloat md = 12.;\n\t\n    float s = 1., d = 0.;\n    for(int i=0;i<150;i++)\n    {      \n        if (log(d*d/s/1e5)>0.||s>md) break;\n        d += s = df(ro+rd*d).x;\n    }\n    \n    if (d<md)\n    {\n\t\tcol = shade(ro, rd, d, ro, 1.);\n    }\n    else\n    {\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}