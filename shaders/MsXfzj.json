{
    "Shader": {
        "info": {
            "date": "1497025372",
            "description": "Used as visuals in cooperation of polish demoscene musicians. \nReleased in wild compo at Decrunch copy party, 3 June 2017\n \nhttp://www.pouet.net/prod.php?which=70247",
            "flags": 64,
            "hasliked": 0,
            "id": "MsXfzj",
            "likes": 32,
            "name": "â™« Power Packed Alliance 5",
            "published": 3,
            "tags": [
                "tunnel",
                "demoscene"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 1659
        },
        "renderpass": [
            {
                "code": "/*\n\n\tTunnel5 a.k.a \"IFSerno\"\n    for cooperation of polish demoscene musicians, called:\n    \n    \n    \"Power Packed Alliance\".\n    -----------------------------------\n\n\thttps://www.youtube.com/watch?v=_lSReW7eRI4\n    http://www.pouet.net/prod.php?which=70247\n\n\t\n    \n    also check my chrome extension for Shadertoy:\n    https://chrome.google.com/webstore/detail/shadertoy-unofficial-plug/ohicbclhdmkhoabobgppffepcopomhgl?hl=pl\n\n*/\n\n#define getNormal getNormalHex\n\n#define FAR 150.\n#define INFINITY 1e32\n\n#define mt iChannelTime[1]\n#define FOV 130.0\n#define FOG .06\n\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (1.618033988749895)\n\nfloat vol = 0.;\n\nvec3 fromRGB(int r, int g, int b) {\n \treturn vec3(float(r), float(g), float(b)) / 255.;   \n}\n    \nconst vec3 \n    light = vec3(0., 0., 2.)\n\t;\n\nvec3 lightColour = normalize(vec3(0.1, .0, .4)); \nvec3 saturate(vec3 a) { return clamp(a, 0.0, 1.0); }\nvec2 saturate(vec2 a) { return clamp(a, 0.0, 1.0); }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n// Repeat only a few times: from indices <start> to <stop> (similar to above, but more flexible)\nfloat pModInterval1(inout float p, float size, float start, float stop) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p+halfsize, size) - halfsize;\n\tif (c > stop) { //yes, this might not be the best thing numerically.\n\t\tp += size*(c - stop);\n\t\tc = stop;\n\t}\n\tif (c <start) {\n\t\tp += size*(c - start);\n\t\tc = start;\n\t}\n\treturn c;\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat opU2( float d1, float d2 ) {\n    if (d1 < d2) return d1;\n    return d2;\n}\n\nvec3 opU2( vec3 d1, vec3 d2 ) {\n    if (d1.x < d2.x) return d1;\n    return d2;\n}\n\nstruct geometry {\n    float dist;\n    vec3 space;\n    vec3 hit;\n    vec3 sn;\n    vec2 material;\n    int iterations;\n    float glow;\n};\n\ngeometry geoU(geometry g1, geometry g2) {\n    if (g1.dist < g2.dist) return g1;\n    return g2;\n}\n\ngeometry geoI(geometry g1, geometry g2) {\n    if (g1.dist > g2.dist) return g1;\n    return g2;\n}\n\nvec3 opS2( vec3 d1, vec3 d2 )\n{\t\n    if (-d2.x > d1.x) return -d2;\n    return d1;\n}\n\nvec3 opI2( vec3 d1, vec3 d2 ) {\n \tif (d1.x > d2.x) return d1;\n    return d2;\n}\n\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat vmax(vec4 v) {\n\treturn max(max(v.x, v.y), max(v.z, v.w));\n}\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x<0.)?-1.:1.;\n}\n\nvec2 sgn(vec2 v) {\n\treturn vec2((v.x<0.)?-1.:1., (v.y<0.)?-1.:1.);\n}\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\n\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\nfloat fBox2Cheap(vec2 p, vec2 b) {\n\treturn vmax(abs(p)-b);\n}\n\nfloat fCross(vec3 p, vec3 size) {\n    float obj = fBox(p, size);\n    obj = opU2(obj, fBox(p, size.zxy));\n    obj = opU2(obj, fBox(p, size.yzx));\n    return obj;\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\ngeometry DE(vec3 p)\n{\n    float scale = 2.1;\n\tconst float offset = 6.0;\n    const int FRACTALITERATIONS = 5;\n    vec3 modifier = vec3(1.43 , 2.01, 1.);\n\tvec3 orgp = p;\n    \n    for(int n = 0; n< FRACTALITERATIONS; n++)\n\t{\n\n        p = abs(p);\n        \n\t\tp.xy = (p.x - p.y < 0.0) ? p.yx : p.xy;\n\t\tp.xz = (p.x - p.z < 0.0) ? p.zx : p.xz;\n\t\tp.zy = (p.y - p.z < 0.0) ? p.yz : p.zy;\n\n\t\tp.x -= 12.9;\n        p.z += -2.3;\n\n        pR(p.xz, -.20645);\n        \n        if (orgp.y < 5.) p.y += orgp.x;\n        if (p.z > 0.5 * scale - 1.) p.z -= scale - 3.;\n        \n        p.xyz = scale* p.xyz - offset*(scale-1.0) * modifier.xyz;\n\t}\n    \n \tgeometry obj;\n    obj.dist = length(p.xz) * (pow(scale, -float(FRACTALITERATIONS))) - 0.03; \n\tobj.space = p;\n    return obj;\n}\n\n\ngeometry map(vec3 p) {\n    \n    vec3 bp = p;\n    \n    p.z = mod(p.z, 30.) - 65.;\n\n    pMirrorOctant(p.zy, vec2(110., 15.));        \n\tpMirrorOctant(p.xy, vec2(20.,  12.));        \n    \n    vec3 floor_p = p;\n\n    pR(p.xz, -1.5);\n        \n    p.x += 1.5;\n   \n    float pM = pModPolar(p.zx, 4.);\n\n    pMirrorOctant(p.xy, vec2(12.1, 8.)) ;\n    pMirrorOctant(p.xz, vec2(12.5, 64.));\n    \n    p.x += 10.;\n    p.yx += 3.;\n\n    geometry obj;\n    \n    obj = DE(p);\n    obj.material = vec2(1., 0.);\n\n    return obj;\n}\n\nfloat t_min = 0.01;\nfloat t_max = FAR;\nconst int MAX_ITERATIONS = 60;\n\ngeometry trace(vec3 o, vec3 d) {\n    float omega = 1.2;\n    float t = t_min;\n    float candidate_error = INFINITY;\n    float candidate_t = t_min;\n    float previousRadius = 0.;\n    float stepLength = 0.;\n    float pixelRadius = 1./ 90.;\n    \n    geometry mp = map(o);\n    mp.glow = 0.;\n    \n    float functionSign = mp.dist < 0. ? -1. : +1.;\n    float minDist = 140.;\n    \n    for (int i = 0; i < MAX_ITERATIONS; ++i) {\n\n        mp = map(d * t + o);\n\t\tmp.iterations = i;\n        \n        minDist = min(minDist, mp.dist);\n        if (i < 110) mp.glow = pow( 1. / minDist, 1.12);\n        \n        float signedRadius = functionSign * mp.dist;\n        float radius = abs(signedRadius);\n        bool sorFail = omega > 1. &&\n        (radius + previousRadius) < stepLength;\n        if (sorFail) {\n            stepLength -= omega * stepLength;\n            omega = 1.;\n        } else {\n        stepLength = signedRadius * omega;\n        }\n        previousRadius = radius;\n        float error = radius / t;\n        if (!sorFail && error < candidate_error) {\n            candidate_t = t;\n            candidate_error = error;\n        }\n        if (!sorFail && error < pixelRadius || t > t_max) break;\n        t += stepLength;\n   \t}\n    \n    mp.dist = candidate_t;\n    \n    if (\n        (t > t_max || candidate_error > pixelRadius)\n    \t) mp.dist = INFINITY;\n    \n    return mp;\n}\n\n\nfloat softShadow(vec3 ro, vec3 lp, float k) {\n    const int maxIterationsShad = 8;\n    vec3 rd = (lp - ro); // Unnormalized direction ray.\n\n    float shade = 4.;\n    float dist = 4.5;\n    float end = max(length(rd), 0.01);\n    float stepDist = end / float(maxIterationsShad);\n\n    rd /= end;\n    for (int i = 0; i < maxIterationsShad; i++) {\n        float h = map(ro + rd * dist).dist;\n        shade = min(shade, k*h/dist);\n        dist += min(h, stepDist * 2.); \n        if (h < 0.001 || dist > end) break;\n    }\n    return min(max(shade, 0.0), 1.0);\n}\n\n#define EPSILON .001\nvec3 getNormalHex(vec3 pos)\n{\n\tfloat d=map(pos).dist;\n\treturn normalize(\n        vec3(\n            map(\n                pos+vec3(EPSILON,0,0)).dist-d,\n                map(pos+vec3(0,EPSILON,0)).dist-d,\n                map(pos+vec3(0,0,EPSILON)).dist-d \n        \t)\n    \t);\n}\n\nfloat getAO(vec3 hitp, vec3 normal, float dist)\n{\n    vec3 spos = hitp + normal * dist;\n    float sdist = map(spos).dist;\n    return clamp(sdist / dist, 0.0, 1.0);\n}\n\nvec3 getObjectColor(vec3 p, vec3 n, geometry obj) {\n    vec3 col = vec3(0.0);\n        \n    if (obj.material.x == 1.0) { \n        col += 1.;\n    }\n    \n    return col ;\n}\n\nvec3 doColor( in vec3 sp, in vec3 rd, in vec3 sn, in vec3 lp, geometry obj) {\n\tvec3 sceneCol = vec3(0.0);\n    lp = sp + lp;\n    vec3 ld = lp - sp; \n    float lDist = max(length(ld / 2.), 0.001); \n    ld /= lDist; \n    float diff = max(dot(sn, ld), 1.);\n    float spec = pow(max(dot(reflect(-ld, sn), -rd), .0), 1.);\n    vec3 objCol = getObjectColor(sp, sn, obj);\n    sceneCol += (objCol * (diff + .15) * spec * .4);\n\n    return sceneCol;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 ouv = fragCoord.xy / iResolution.xy;\n    vec2 uv = ouv - .5;\n    \n    vol = length(texture(iChannel0, vec2(.42, .25)).rgb);\n    \n    uv *= tan(radians (FOV) / 2.0);\n    \n    if (abs(uv.y) > .75) {\n    \tfragColor *= 0.;\n        return;\n    }\n\n    float t2 = iTime - 35.;\n    float \n        sk = sin(-t2 * .04) * 16.0, \n        ck = cos(-t2 * .107) * 12.0 - sk,\n        \n        mat = 0.;    \n\n    \n    //light = vec3(0., 0., 2.);        \n    \n    float speed = min(7., iTime / 20.); \n\n    \n    vec3 \n        vuv = vec3(cos(iTime / 17. * speed), sin(iTime / 4.), 0.), // up\n    \tro = vec3(-1., 0.5, iTime * speed);\n    \n    vec3\n        vrp =  vec3(0., 0., 10. + iTime * speed); \n\t\n\n    vrp.x += sin(ro.z / 12.) * 1.;\n    vrp.y += sin(ro.z / 10.) * 10.;\n     \n    vec3 \n    \tvpn = normalize(vrp - ro),\n    \tu = normalize(cross(vuv, vpn)),\n    \tv = cross(vpn, u),\n    \tvcv = (ro + vpn),\n    \tscrCoord = (vcv + uv.x * u * iResolution.x/iResolution.y + uv.y * v),\n    \trd = normalize(scrCoord - ro);\n                \n\t\n    vec3 sceneColor = vec3(0.);\n  \n    vec3 lp = light + ro;\n\t//lightDir = lp;\n\t\n    geometry tr = trace(ro, rd);    \n    \n    float fog = smoothstep(FAR * FOG, 0., tr.dist / 6.);\n    tr.hit = ro + rd * tr.dist;\n    \n    tr.sn = getNormal(tr.hit);\t\n    \n    float sh = softShadow(tr.hit, light, 15.);\n    \n    float \n        ao = getAO(tr.hit, tr.sn, 9.);\n  \n    if (tr.dist < FAR) { \n        \n        vec3 col = (doColor(tr.hit, rd, tr.sn, light, tr) * 1.) * 1.;\n        \n        sceneColor = col;\n        sceneColor *= ao; \n        sceneColor *= sh;\n     \n        sceneColor += texture(iChannel0, vec2(120. - length(tr.hit.xy) / 8., 0.25)).rrr / tr.dist / 4.; \n    }    \n    \n    sceneColor = mix(sceneColor, lightColour, 0.15); \n    sceneColor += pow(sin(float(tr.iterations) / 70.), 2.9) * 5.55 * vec3(1., 0.5, 0.);\n    sceneColor += (pow((sin(PI * fract(iTime * 0.1 +  (sin(tr.hit.y + iTime * 0.1) - sin(tr.hit.x)) / 10. + iTime / 3.)) + 1.), 5.) / 10.) / 20.;\n    \n    fragColor = vec4(clamp(sceneColor * (1. - length(uv) / 2.5), 0.0, 1.0), 1.0);\n    fragColor *= 1. + pow(vol * 1.,  13.2) / 10.;\n    fragColor = pow(fragColor, vec4(1.4));\n    \n\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 9941,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/decrunch/power-packed-alliance"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}