{
    "Shader": {
        "info": {
            "date": "1554366212",
            "description": "Tanks, tracks, fire and smoke",
            "flags": 0,
            "hasliked": 0,
            "id": "WsjXRK",
            "likes": 15,
            "name": "Tank Patrol",
            "published": 3,
            "tags": [
                "fire",
                "smoke",
                "track"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 597
        },
        "renderpass": [
            {
                "code": "// \"Tank Patrol\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar, canEl, canAz, canLen, smkRadEx, smkRadIn, smkPhs, flmLen, whlSpc, whlRad,\n   bltThk, bltWid, veGap;\nint idObj;\nconst float pi = 3.14159;\nconst int idBelt = 1, idWhl = 2, idAxl = 3, idBase = 4, idTur = 5, idCan = 6;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, qx, qz, r, xLim;\n  dMin = dstFar;\n  xLim = abs (p.x) - 1.5 * veGap;\n  p.x = mod (p.x + 0.5 * veGap, veGap) - 0.5 * veGap;\n  q = p;\n  q.y -= whlRad + 2. * bltThk;\n  qx = q.x;\n  q.x = abs (q.x) - 0.8 * whlSpc;\n  d = PrFlatCylAnDf (q.zyx, whlSpc, whlRad + bltThk, bltThk, bltWid);\n  DMINQ (idBelt);\n  qz = q.z;\n  q.z = mod (q.z + 0.5 * whlSpc, whlSpc) - 0.5 * whlSpc;\n  d = max (min (PrCylAnDf (q.yzx, 0.9 * whlRad, 0.1 * whlRad, 1.2 * bltWid),\n     PrCylDf (q.yzx, 0.8 * whlRad, 0.5 * bltWid)), abs (qz) - whlSpc - whlRad);\n  DMINQ (idWhl);\n  q.x = qx;\n  d = max (PrCylDf (q.yzx, 0.2 * whlRad, 0.9 * whlSpc), abs (qz) - whlSpc - whlRad);\n  DMINQ (idAxl);\n  q = p;\n  q.y -= 1.4 * whlRad + 2. * bltThk;\n  d = 0.8 * PrFlatCylDf (q.zyx, whlSpc + whlRad, 0.9 * whlRad * (1. - 0.5 * q.x * q.x),\n     0.8 * whlSpc - 1.5 * bltWid);\n  DMINQ (idBase);\n  r = 1.1 * (0.8 * whlSpc - 1.5 * bltWid);\n  q.xz = Rot2D (q.xz, canAz);\n  q.y -= 0.9 * whlRad - 0.5 * r;\n  d = max (PrSphDf (q, r), - (q.y - 0.5 * r));\n  DMINQ (idTur);\n  q.y -= 0.58 * r;\n  q.yz = Rot2D (q.yz, canEl);\n  q.z -= canLen;\n  d = PrCylAnDf (q, 0.12 * whlRad, 0.04 * whlRad, canLen);\n  DMINQ (idCan);\n  dMin = max (0.9 * dMin, xLim);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SmokeDens (vec3 p)\n{\n  mat2 rMat;\n  vec3 q, u;\n  float f;\n  f = PrTorusDf (p.xzy, smkRadIn, smkRadEx);\n  if (f < 0.) {\n    q = p.xzy / smkRadEx;\n    u = normalize (vec3 (q.xy, 0.));\n    q -= u;\n    rMat = mat2 (vec2 (u.x, - u.y), u.yx);\n    q.xy = rMat * q.xy;\n    q.xz = Rot2D (q.xz, 2.5 * tCur);\n    q.xy = q.xy * rMat;\n    q += u;\n    q.xy = Rot2D (q.xy, 0.2 * tCur);\n    f = smoothstep (0., smkRadIn, - f) * Fbm3 (16. * q);\n  } else f = 0.;\n  return f;\n}\n\nvec4 SmokeCol (vec3 ro, vec3 rd, float dstObj)\n{\n  vec4 col4;\n  vec3 smkPos, p;\n  float densFac, d, h, xLim;\n  smkPos = vec3 (0., 0., 2. * canLen + smkPhs);\n  smkPos.yz = Rot2D (smkPos.yz, - canEl);\n  smkPos.xz = Rot2D (smkPos.xz, - canAz);\n  smkPos.y += 1.4 * whlRad + 2. * bltThk + 0.58 * 1.1 * (0.8 * whlSpc - 1.5 * bltWid);\n  smkRadIn = 0.005 + 0.045 * smoothstep (0.02, 0.15, smkPhs);\n  smkRadEx = (2.5 + 3. * smoothstep (0.1, 0.4, smkPhs)) * smkRadIn;\n  smkRadIn *= 1. - 0.3 * smoothstep (0.7, 1., smkPhs);\n  d = 0.;\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd - smkPos;\n    xLim = abs (p.x) - 1.5 * veGap;\n    p.x = mod (p.x + 0.5 * veGap, veGap) - 0.5 * veGap;\n    p.xz = Rot2D (p.xz, canAz);\n    p.yz = Rot2D (p.yz, 0.5 * pi + canEl);\n    h = max (PrTorusDf (p.xzy, smkRadIn, smkRadEx), xLim);\n    d += h;\n    if (h < 0.001 || d > dstFar) break;\n  }\n  col4 = vec4 (0.);\n  if (d < min (dstObj, dstFar)) {\n    densFac = 1.5 * max (1.1 - pow (smkPhs, 1.5), 0.);\n    for (int j = 0; j < 16; j ++) {\n      p = ro + d * rd - smkPos;\n      p.x = mod (p.x + 0.5 * veGap, veGap) - 0.5 * veGap;\n      p.xz = Rot2D (p.xz, canAz);\n      p.yz = Rot2D (p.yz, 0.5 * pi + canEl);\n      col4 += densFac * SmokeDens (p) * (1. - col4.w) * vec4 (vec3 (0.9) - col4.rgb, 0.1);\n      d += 2.2 * smkRadIn / 16.;\n      if (col4.w > 0.99 || d > dstFar) break;\n    }\n  }\n  return col4;\n}\n\nvec4 FlameCol (vec3 ro, vec3 rd, float dstObj)\n{\n  vec3 flmPos, p;\n  float d, h, xLim;\n  flmPos = vec3 (0., 0., 2. * canLen + flmLen);\n  flmPos.yz = Rot2D (flmPos.yz, - canEl);\n  flmPos.xz = Rot2D (flmPos.xz, - canAz);\n  flmPos.y += 1.4 * whlRad + 2. * bltThk + 0.58 * 1.1 * (0.8 * whlSpc - 1.5 * bltWid);\n  d = 0.;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + d * rd - flmPos;\n    xLim = abs (p.x) - 1.5 * veGap;\n    p.x = mod (p.x + 0.5 * veGap, veGap) - 0.5 * veGap;\n    p.xz = Rot2D (p.xz, canAz);\n    p.yz = Rot2D (p.yz, 0.5 * pi + canEl);\n    p.y -= flmLen;\n    h = max (0.9 * PrCylDf (p.xzy, 0.12 * whlRad * clamp (0.7 + 0.3 * p.y / flmLen, 0., 1.),\n       flmLen), xLim);\n    d += h;\n    if (h < 0.001 || d > dstFar) break;\n  }\n  return (d < min (dstObj, dstFar)) ? vec4 (1., 0.4, 0.1,\n     1. - 0.9 * smoothstep (0.2, 0.25, smkPhs)) : vec4 (0.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, smkCol4, flmCol4;\n  vec3 q, col, vn, gPos, roo;\n  float dstObj, dstGrnd, tCyc, spd, dMove, s, t, f, nSegR, bGap, r, nDotS, sh;\n  nSegR = 16.;\n  whlRad = 0.29;\n  bltWid = 0.1;\n  bltThk = 0.03;\n  bGap = 2. * pi * whlRad / nSegR;\n  whlSpc = floor (0.8 / bGap) * bGap;\n  canLen = 0.8 * whlSpc;\n  veGap = 3.5 * whlSpc;\n  tCyc = 8.;\n  spd = 3.;\n  t = mod (tCur / tCyc, 1.);\n  dMove = spd * (floor (tCur / tCyc) + smoothstep (0.5, 1., t));\n  canEl = pi * (0.05 + 0.15 * SmoothBump (0.1, 0.4, 0.1, t));\n  s = floor (mod (tCur / tCyc, 4.));\n  canAz = (mod (s, 2.) == 1.) ? pi * 0.2 * SmoothBump (0.1, 0.4, 0.1, t) * sign (s - 2.) : 0.;\n  smkPhs = clamp (t, 0.15, 0.5) / 0.15 - 1.;\n  dstObj = ObjRay (ro, rd);\n  if (smkPhs > 0.) smkCol4 = SmokeCol (ro, rd, dstObj);\n  flmLen = 0.7 * whlRad * SmoothBump (0.03, 0.32, 0.02, smkPhs);\n  if (flmLen > 0.) flmCol4 = FlameCol (ro, rd, dstObj);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idBase || idObj == idTur) {\n      col4 = mix (vec4 (0.1, 0.4, 0.1, 0.1), vec4 (0.4, 0.4, 0.1, 0.05),\n         smoothstep (0.45, 0.5, Fbm2 (8. * qHit.xz + 11. * floor (ro.x / veGap + 0.5))));\n      r = abs (qHit.x) / (0.8 * whlSpc - 1.5 * bltWid);\n      if (idObj == idBase) {\n        col4 *= 1. - 0.5 * SmoothBump (0.8, 0.85, 0.01, r);\n        if (r < 0.75) {\n          if (qHit.z < -1.65 * whlSpc)\n             col4 *= 1. - 0.7 * SmoothBump (0.3, 0.7, 0.02, mod (8. * r, 1.));\n          else if (qHit.z > 1.6 * whlSpc)\n             col4 *= 1. - 0.7 * SmoothBump (0.3, 0.7, 0.02, mod (16. * qHit.y, 1.));\n        }\n      } else if (idObj == idTur) {\n        col4 *= 1. - 0.5 * SmoothBump (0.8, 0.85, 0.01, r);\n        col4 *= 1. - 0.7 * SmoothBump (0.17, 0.2, 0.01, r);\n        if (qHit.z > 0. && abs (qHit.y - 0.43) < 0.07) col4 *= 1. - 0.5 * step (r, 0.08);\n      }\n    } else if (idObj == idCan) {\n      col4 = vec4 (0.3, 0.5, 0.3, 0.1) * (1. - 0.5 * SmoothBump (0.03, 0.06, 0.01,\n         abs (qHit.z - 0.3))) * (1. - 0.8 * step (length (qHit.xy), 0.1 * whlRad));\n    } else if (idObj == idWhl) {\n      col4 = (abs (qHit.x) < bltWid) ? vec4 (0.2, 0.3, 0.2, 0.) : vec4 (0.1, 0.4, 0.1, 0.1);\n      q = qHit;\n      q.yz = Rot2D (q.yz, - dMove / whlRad);\n      r = length (q.yz) / whlRad;\n      col4.rgb *= 1. - 0.9 * max (step (0.5, r) * SmoothBump (0.45, 0.55, 0.03,\n         mod (nSegR * atan (q.z, - q.y) / (2. * pi), 1.)),\n         SmoothBump (0.48, 0.52, 0.01, abs (r)));\n    } else if (idObj == idAxl) {\n      col4 = vec4 (0.2, 0.3, 0.2, 0.05);\n    } else if (idObj == idBelt) {\n      col4 = vec4 (0.4, 0.3, 0.1, 0.);\n      if (abs (qHit.z) < whlSpc) {\n        col4.rgb *= 1. - 0.7 * SmoothBump (0.42, 0.58, 0.05,\n           mod ((qHit.z - sign (qHit.y) * dMove) / bGap, 1.));\n      } else {\n        q = qHit;\n        q.z -= sign (q.z) * whlSpc;\n        q.yz = Rot2D (q.yz, - dMove / whlRad);\n        col4.rgb *= 1. - 0.7 * SmoothBump (0.42, 0.58, 0.05,\n           mod (nSegR * atan (q.z, - q.y) / (2. * pi), 1.));\n      }\n    }\n    sh = ObjSShadow (ro, sunDir);\n    nDotS = max (dot (vn, sunDir), 0.);\n    if (idObj != idBelt) nDotS *= nDotS;\n    col = col4.rgb * (0.3 + 0.7 * sh * nDotS) + smoothstep (0.8, 0.9, sh) * sh *\n       col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else if (rd.y < 0.) {\n    roo = ro;\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n    sh = (dstGrnd < dstFar) ? ObjSShadow (ro, sunDir) : 1.;\n    gPos = ro + vec3 (0., 0., dMove);\n    r = (ro.z < whlSpc && abs (ro.x) < 1.5 * veGap) ? 1. - smoothstep (1., 1.8,\n       abs (abs (mod (ro.x + 0.5 * veGap, veGap) - 0.5 * veGap) - 0.8 * whlSpc) / bltWid) : 0.;\n    s = 1. - smoothstep (0.3, 0.8, dstGrnd / dstFar);\n    f = 1. - Fbm2 (0.5 * gPos.xz);\n    vn = VaryNf (4. * gPos, vn, (4. * f * f + 2. * r) * s);\n    col = mix (vec3 (0.4, 0.5, 0.3), vec3 (0.4, 0.3, 0.2),\n       smoothstep (0.2, 0.8, Fbm2 (2. * gPos.xz)));\n    col = mix (vec3 (0.33, 0.45, 0.15), col, s);\n    if (r > 0.) col *= 1. - (0.1 + 0.05 * sin ((2. * pi / bGap) * gPos.z)) * r * s;\n    col *= sh * max (dot (vn, sunDir), 0.);\n    col = mix (0.8 * col, vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  if (flmLen > 0.) col = mix (col, flmCol4.rgb, flmCol4.a);\n  if (smkPhs > 0.) col = mix (col, smkCol4.rgb, smkCol4.a);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el += 0.12 * pi * sin (0.023 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.03 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -18.);\n  dstFar = 80.;\n  sunDir = normalize (vec3 (0., 1., -0.7));\n  sunDir.xz = Rot2D (sunDir.xz, 0.005 * pi * tCur);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 6.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h)\n{\n  return max (abs (length (p.xy - vec2 (clamp (p.x, - rhi, rhi), 0.)) - rlo) - w, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}