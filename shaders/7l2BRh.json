{
    "Shader": {
        "info": {
            "date": "1651793841",
            "description": "wish me luck.\n\nv2: added smoothTexture",
            "flags": 2,
            "hasliked": 0,
            "id": "7l2BRh",
            "likes": 6,
            "name": "MyFirstRayMarcher",
            "published": 3,
            "tags": [
                "raymarching",
                "metaballs",
                "reflections"
            ],
            "usePreview": 0,
            "username": "TheKraai",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "// yes, I know things like Camera Matrices and Quaternions exist..\n// but this is just how the math lives in my head..\n\nconst float CAM_FOV = 2.0;        // field of view\nconst vec3 CAM_POS = vec3(0);     // coordinates of camera\nconst vec3 CAM_DIR = vec3(0,0,-1); // unit vector pointing in cam direction\nconst vec3 CAM_UP  = vec3(0,1,0); // unit vector pointing up\nconst vec3 CAM_RIGHT = cross(CAM_DIR, CAM_UP);\n\nfloat sceneSDF( vec3 pos ) {\n   float sdf = 1e10;\n\n   //sdf = min(sdf, sphereSDF(pos, vec3(0,0,-10), 4.));\n   //sdf = min(sdf, sphereSDF(pos, vec3(3,0,-5), 1.));\n   \n   const int balls = 12;\n   for (int i=0; i<balls; i++) {\n       float seed = mod(float(i)/float(balls) + 0.003 * iTime, 6.28318);\n       vec2 seedvec = 0.4 * vec2(cos(seed), sin(seed)) + vec2(0.5);\n       //vec3 r = texture(iChannel0, seedvec).xyz; // very choppy on slow speeds!\n       vec3 r = smoothTexture(iChannel0, iChannelResolution[0].xy, seedvec).xyz;\n       r.x = mix(-8.,8.,r.x);\n       r.y = mix(-8.,8.,r.y);\n       r.z = -mix(5.,20.,r.z);\n       sdf = smin(sdf, sphereSDF(pos, r, 1.5), 2.);\n   }\n\n   return sdf;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n\n    // CALCULATE DIRECTION OF RAY\n\n    vec2 angle_offset = CAM_FOV * (fragCoord - iResolution.xy / 2.) / iResolution.xx; \n    vec3 ray  = CAM_DIR;\n         ray += angle_offset.x * CAM_RIGHT;\n         ray += angle_offset.y * CAM_UP;\n    ray = normalize(ray);\n    \n    \n    vec3 pos = CAM_POS;\n    vec3 normal;\n    fragColor = vec4(0,0,0,1);\n    \n    float part = 1.;\n\n\n    for (int i=0; i<40; i++) {\n\n        // MARCH FORWARD\n        float dist = sceneSDF(pos);\n        pos += ray * dist;\n\n        if (dist < 0.01) {\n            // GET NORMAL\n\n            vec2 eps = vec2(0.01,0);\n\n            normal.x = sceneSDF( pos + eps.xyy ) - sceneSDF( pos - eps.xyy );\n            normal.y = sceneSDF( pos + eps.yxy ) - sceneSDF( pos - eps.yxy );\n            normal.z = sceneSDF( pos + eps.yyx ) - sceneSDF( pos - eps.yyx );\n            normal = normalize(normal);\n\n            // REFLECT\n\n            vec3 color = (normal + 1.) / 2.;\n            // color = texture(iChannel1, color.xy).xyz; // use your camera!\n            fragColor.rgb += part * color;\n\n            ray = reflect(ray, normal);\n            pos += 0.02 * ray;\n            \n            part *= 0.3;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sphereSDF( vec3 pos, vec3 center, float radius )\n{\n    return length(center - pos) - radius;\n}\n\n// this function is from https://iquilezles.org/articles/distfunctions/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n// like 'texture', but with my own interpolation filter based on smoothstep.\nvec4 smoothTexture(sampler2D channel, vec2 res, vec2 pos) {\n  ivec2 ipos = ivec2(pos * res - vec2(.5));\n  vec4 tl = texelFetch(channel, ipos + ivec2(0,0), 0);\n  vec4 tr = texelFetch(channel, ipos + ivec2(1,0), 0);\n  vec4 bl = texelFetch(channel, ipos + ivec2(0,1), 0);\n  vec4 br = texelFetch(channel, ipos + ivec2(1,1), 0);\n  vec2 d = smoothstep(0., 1., fract(pos * res - vec2(.5)));\n  vec4 a = mix(tl, tr, d.x);\n  vec4 b = mix(bl, br, d.x);\n  vec4 c = mix(a, b, d.y);\n  return c;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}