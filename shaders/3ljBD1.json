{
    "Shader": {
        "info": {
            "date": "1598850644",
            "description": "Raymarched torus with fresnel reflectance, blinn-phong specular model, shadows, and reflections. 2.2 gamma corrected. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljBD1",
            "likes": 9,
            "name": "Spinning Torus",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "shadows",
                "reflections",
                "fresnel",
                "blinnphongspecularity"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 537
        },
        "renderpass": [
            {
                "code": "#define s sin(iTime)\n#define c cos(iTime)\n#define dist 4.0\n\nfloat sd(vec3 pos, float d) {\n    vec3 p = pos - vec3(0, 0, d);\n    float py = p.y;\n    p.y = p.y * c - p.z * s;\n    p.z = p.z * c + py * s;\n    vec2 t = vec2(1.0, .4);\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 ambient = vec3(0.4, 0.7, 1.0) / 5.0;\n    vec3 light = normalize(vec3(0.8, 0.5, -0.5));\n    vec2 uv = (fragCoord - iResolution.xy / 2.0) / iResolution.x;\n    int iters = 0;\n    float raylength = 0.0;\n    vec3 incoming = normalize(vec3(uv, 1));\n    float SDE = 1.0;\n    vec3 z = vec3(0.0);\n    \n    while(iters < 5000 && abs(raylength) < 100.0 && abs(SDE) > 0.00001) {\n        z = raylength * incoming;\n        SDE = sd(z, dist);\n        raylength += SDE;\n        iters++;\n    }\n    \n    vec3 col = ambient;\n    if(abs(SDE) <= 0.00001) {\n        vec3 inVec = incoming;\n        vec3 z1 = z;\n        raylength = 0.0;\n        incoming = normalize(vec3(uv.x + 0.0001, uv.y, 1));\n        SDE = 1.0;\n        z = vec3(0.0);\n        iters = 0;\n        \n        while(iters < 5000 && abs(raylength) < 100.0 && abs(SDE) > 0.00001) {\n            z = raylength * incoming;\n            SDE = sd(z, dist);\n            raylength += SDE;\n            iters++;\n        }\n        \n        vec3 z2 = z;\n        raylength = 0.0;\n        incoming = normalize(vec3(uv.x, uv.y + 0.0001, 1));\n        SDE = 1.0;\n        iters = 0;\n        while(iters < 5000 && abs(raylength) < 100.0 && abs(SDE) > 0.00001) {\n            z = raylength * incoming;\n            SDE = sd(z, dist);\n            raylength += SDE;\n            iters++;\n        }\n        \n        vec3 z3 = z;\n        raylength = 0.0001;\n        incoming = light;\n        SDE = 1.0;\n        z = vec3(0.0);\n        iters = 0;\n        while(iters < 5000 && abs(raylength) < 100.0 && abs(SDE) > 0.00001) {\n            z = raylength * incoming;\n            SDE = sd(z + z1, dist);\n            raylength += SDE;\n            iters++;\n        }\n        \n        vec3 a = z3 - z1;\n        vec3 b = z2 - z1;\n        vec3 color = vec3(1.5, 1.0, 0.5);\n        vec3 normal = normalize(vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x));\n        vec3 reflection = normal * 2.0 * dot(normal, inVec) - inVec;\n        raylength = 0.01;\n        incoming = -reflection;\n        SDE = 1.0;\n        z = vec3(0.0);\n        iters = 0;\n        while(iters < 5000 && abs(raylength) < 100.0 && abs(SDE) > 0.00001) {\n            z = raylength * incoming;\n            SDE = sd(z + z1, dist);\n            raylength += SDE;\n            iters++;\n        }\n        \n        vec3 diffuse = (vec3(max(dot(normal, light) * 5.0, 0.0) * color) + ambient) * 0.1;\n        vec3 specular = pow(max(dot(normalize(light - inVec), normal), 0.0), 200.1) * 9.0 + ambient;\n        if(abs(SDE) <= 0.00001) {\n            specular = ((1.0 * color) + ambient) * 0.1;\n        }\n        float fresnel = 0.05 + 0.95 * pow(1.0 + dot(inVec, normal), 5.0);\n        col = diffuse * (1.0 - fresnel) + specular * fresnel;\n    }\n\n    fragColor = vec4(pow(col.x, 0.4545), pow(col.y, 0.4545), pow(col.z, 0.4545), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}