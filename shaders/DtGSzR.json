{
    "Shader": {
        "info": {
            "date": "1685887426",
            "description": "Saw a tweet: https://twitter.com/kamoshika_vrc/status/1665017981875924992?s=20\nThought the code for the braided pattern was quite clever but couldn't decipher it\nSo wrote this version inspired by it.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DtGSzR",
            "likes": 20,
            "name": "Braided truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "// CC0: Braided truchet\n//  Saw a tweet: https://twitter.com/kamoshika_vrc/status/1665017981875924992?s=20\n//  Thought the code for the braided pattern was quite clever but couldn't decipher it\n//  So wrote this version inspired by it.\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = TAU/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec3 braid(vec3 col, vec2 p, vec2 cp, float z, float aa) {\n  const float reps  = 24.0;\n  const float a     = TAU/reps;\n  const float bsz0  = a*0.3;\n  const vec2 bsz    = vec2(bsz0);\n  const float br0   = sqrt(2.0)*bsz0;\n  const mat2 rot2   = ROT(a*0.5);\n  const mat2 rot45  = ROT(PI/4.0);\n\n  float cd = length(cp)-0.5;\n  vec2 pp = cp;\n\n  pp *= rot2;\n  float n = modPolar(pp, reps);\n\n  float bf0 = clamp((texture(iChannel0, 0.005*p).x-0.1)*1.2, 0.0, 1.0);\n  float br = br0*bf0;\n  float bw = 0.02;\n\n  vec2 bp0 = pp;\n  bp0 *= transpose(rot2);\n  bp0.x -= 0.5;\n  bp0 *= rot45;\n  float bd0 = box(bp0, bsz-sqrt(0.5)*br)-br;\n  bd0 = abs(bd0) - bw;\n\n  vec2 bp1 = pp;\n  bp1 *= rot2;\n  bp1.x -= 0.5;\n  bp1 *= rot45;\n  float bd1 = box(bp1, bsz-sqrt(0.5)*br)-br;\n  bd1 = abs(bd1) - bw;\n\n  if (cd > 0.0) {\n    float tmp = bd0;\n    bd0 = bd1;\n    bd1 = tmp;\n  }\n  col *= 1.0-exp(-200.0/z*max(bd0, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, bd0));\n  col *= 1.0-exp(-200.0/z*max(bd1, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, bd1));\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const float pr = 10.0;\n  float z = mix(0.5, 1.5, smoothstep(-0.5, 0.5, -cos(TIME*TAU/30.0)));\n  p /= z;\n  p += pr*sin(0.5*vec2(1.0, sqrt(0.5))*TIME/pr);\n  vec3 col = vec3(0.0);\n  float aa = 4.0/(z*RESOLUTION.y);\n\n\n  vec2 cp = p;\n  vec2 np = round(cp);\n  float nh0 = hash(np+123.4);\n  cp -= np;\n  if (nh0 > 0.5) cp = cp*ROT(PI/2.0);\n\n  vec2 bp = cp;\n  float bn = ref(bp, normalize(vec2(1.0)));\n  bp -= 0.5;\n  col = braid(col, p, bp, z, aa);\n  col = sqrt(col);\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}