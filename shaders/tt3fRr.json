{
    "Shader": {
        "info": {
            "date": "1612111745",
            "description": "pot",
            "flags": 32,
            "hasliked": 0,
            "id": "tt3fRr",
            "likes": 6,
            "name": "Day 411",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 408\" by jeyko. https://shadertoy.com/view/WlKyW3\n// 2021-01-31 09:55:41\n\n// thx to wyatt for teaching me storing voronoi particle tracking stuff in different buffers and packing!\n\n// cyclic noise by nimitz\n\n// int packing from somewhere on shadertoy\n\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 pPntr = T1(U);\n    vec4 p = T(pPntr.xy);\n    vec2 pos = unpackU16(p.x);\n    \n    C = texture(iChannel0,U/R);\n    \n        \n    C.xyz *= vec3(1.4,0.5,0.4);\n        \n    vec2 uv = (U - 0.5*R)/R.y;\n    \n    //C *= 1. - smoothstep(0.3,0.,pow( cyclicNoisePap(vec3(uv*90.,1.),false,0.),1.))*0.5;\n    \n    \n    C = 1. - C*2.5;\n    \n    \n    C = max(C,0.);\n    C = pow(C,vec4(0.4545));  \n    //C -= texture(iChannel3,U/R);\n    \n    //C = texture(iChannel2,U/R);\n    \n    //C *= 1. - smoothstep(0.,1.,dot(uv,uv))*0.;\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ------------------------------- //\n//           Movement              //\n// ------------------------------- //\n\nint neighborsCnt = 0;\nvec4 neighborPtrs[] = vec4[8](vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0));\n\n//#define steps  floor(particleSz*iResolution.x*8.)\n\nfloat steps = 20.;\nfloat stepSz = 2.;\nvoid findNeighbors( vec4 me, vec2 mePos, vec2 dir){\n\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = TF1( mePos.xy * R + dir * i*stepSz );\n        vec4 otherP    = T( otherPntr.xy );\n        \n        //if ( otherP.x != me.x){\n        //if ( unpackU16(otherP.x) != me.xy ){\n        if ( unpackU16(otherP.x).x != mePos.x && unpackU16(otherP.x).y != mePos.y ){\n            for(int i = 0; i < neighborsCnt; i++){\n                if (neighborPtrs[i] == otherPntr)\n                    return;\n            }\n            neighborPtrs[neighborsCnt++] = otherPntr;\n            return;\n        }\n    }\n\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\n    if (iFrame < 3){\n        \n        float pc = floor(sqrt(particleCount));\n        vec2 id = floor(U/R*pc) + 0.0001;\n        vec2 cellSz = R/(pc + 1.);\n        \n        vec2 pos = id*cellSz/R + cellSz/R;\n\n        vec2 vel = r24(id).xy*2. - 1.;\n\n        C.x = packU16(pos);\n        C.y = packS8(vel.xyxy);    \n        C.z = packU8(r24(id));\n        \n    } else {\n        C = T(U);\n        \n        vec4 pPtr = T1(C.xy*R);\n        \n        if (iFrame > startOffs){\n            \n            //C = T( pPtr.xy );\n            \n            vec2 pos = unpackU16(C.x);\n            vec2 vel = unpackS8(C.y).xy;\n            vec4 data = unpackU8(C.z);\n    \n            \n            findNeighbors( C, pos, vec2(1,0));\n            findNeighbors( C, pos, vec2(-1,0));\n            findNeighbors( C, pos, vec2(0,1));\n            findNeighbors( C, pos, vec2(0,-1));\n            \n            findNeighbors( C, pos, vec2(1,1));\n            findNeighbors( C, pos, vec2(1,-1));\n            findNeighbors( C, pos, vec2(-1,1));\n            findNeighbors( C, pos, vec2(-1,-1));\n            \n\n            //  collisions\n            for(int i = 0; i < neighborsCnt; i++){    \n                vec4 otherPtr = neighborPtrs[i];\n                vec4 other = T(otherPtr.xy);\n                vec2 otherVel = unpackS8(other.y).xy;\n                vec4 otherData = unpackU8(other.z);\n                \n                other.xy = unpackU16(other.x);\n                vec2 meToOther = (other.xy - pos.xy)*resFact.xy;\n                \n                //pos -= normalize(meToOther)*(abs(distBetween - sizes));\n                  \n                vel -= 11.*normalize(meToOther)*smoothstep(0.04,0.,length(meToOther));\n                \n\n\n\n            }\n            \n            \n            vec2 meToMouse = iMouse.xy/iResolution.xy-pos;\n            meToMouse *= resFact;\n            \n            if(iMouse.z > 0.)\n                vel -= 1.*normalize(meToMouse)*smoothstep(0.34,0.,length(meToMouse));\n                \n        \n            if (abs(pos.x - 0.5) > 0.5 - particleSz*0.5){\n                vel.x *= -1.;\n                if ( sign(vel.x) != sign(-pos.x + 0.5) )\n                    vel.x *= -1.;\n            }\n            if (abs(pos.y - 0.5) > 0.5 - particleSz*0.5){\n                vel.y *= -1.;\n                if ( sign(vel.y) != sign(-pos.y + 0.5) )\n                    vel.y *= -1.;            \n            }\n\n            \n            //vel.y -= 0.03;\n            //float n = cyclicNoise(vec3( pos/resFact*0.5, iTime*0.5), false, iTime*0.2);\n            vec3 n = texture(iChannel3,pos).xyz;\n            /*\n            if (iFrame > 0)\n                vel = mix(vel,n.yz*110.5,0.1 + data.y*0.6);\n            */\n            float lvel = length(vel);\n            vel = mix(vel,n.yz*110.5,0.0 + data.y*0.2);\n            \n            vel = normalize(vel)*lvel;\n            \n            //float dfn = fwidth(n);\n            \n            \n            //vel *= rot(n.x); \n            \n            //vel = length(vel);\n            //vel = vel*rot(atan(n.y,n.z)/pi);\n            \n            //vel *= rot(0.05 + sin(iTime*0.4 + data.x)*0.4); \n            \n            //vel *= rot(((n)*2. - 1.)*0.2);\n            \n            //vel = vel*rot(atan(dNoise.y,dNoise.x)*120.);\n            //vel = mix(vel, *length(vel), 0.1);\n            pos += vel/resFact*0.004;\n            \n            \n            C.x = packU16(pos);\n            C.y = packS8(vel.xyxy);\n            //C.x = packSnorm(vec4(pos,vel));\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R (iResolution.xy)\n#define T(u) texture(iChannel0,(u)/R)\n#define T1(u) texture(iChannel1,(u)/R)\n#define T2(u) texture(iChannel2,(u)/R)\n#define T3(u) texture(iChannel3,(u)/R)\n#define TF(u)  texelFetch(iChannel0,ivec2(u), 0)\n#define TF1(u) texelFetch(iChannel1,ivec2(u), 0)\n#define TF2(u) texelFetch(iChannel2,ivec2(u), 0)\n#define TF3(u) texelFetch(iChannel3,ivec2(u), 0)\n\n#define pi acos(-1.)\n\n#define startOffs 5\n\n\n#define particleCount 1432.\n\n#define particleSz 0.001\n\n//#define getSize(idx) particleSz*(sin(idx*26. + iTime)*0.5 + 0.5)\n#define getSize(idx) particleSz\n\n\n#define resFact vec2(R.x/R.y,1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define getIdx(a) vec2(mod(a,R.x), floor((a+R.x)/R.x)-1.)\n\n// 8bit\nhighp uint packU8(mediump uvec4 a) {\n    return uint( (a.x << 24)\n               | (a.y << 16)\n               | (a.z << 8 )\n               | (a.w << 0 ) ); }\nmediump uvec4 unpackU8(highp uint a) {\n    return uvec4( (a & 0xFF000000u) >> 24\n                , (a & 0x00FF0000u) >> 16\n                , (a & 0x0000FF00u) >> 8\n                , (a & 0x000000FFu) >> 0   ); }\nfloat packU8(  vec4  a) { return uintBitsToFloat(packU8(uvec4(round(clamp(a, 0., 1.)*255.)))); }\nvec4  unpackU8(float a) { return vec4(unpackU8(floatBitsToUint(a))) / 255.; }\nfloat packS8(  vec4  a) { return uintBitsToFloat(packU8(uvec4(round(clamp(a, -1., 1.)*127.5+127.5)))); }\nvec4  unpackS8(float a) { return clamp((vec4(unpackU8(floatBitsToUint(a))) - 127.5) / 127.5, -1., 1.); }\n\n\n// 16bit\nhighp uint packU16(highp uvec2 a) {\n    return uint( (a.x << 16)\n               | (a.y << 0)); }\nmediump uvec2 unpackU16(highp uint a) {\n    return uvec2( (a & 0xFFFF0000u) >> 16\n                , (a & 0x0000FFFFu) >> 0   ); }\nfloat packU16(  vec2  a) { return uintBitsToFloat(packU16(uvec2(round(clamp(a, 0., 1.)* (pow(2.,16.) - 1.))))); }\nvec2  unpackU16(float a) { return vec2(unpackU16(floatBitsToUint(a))) / (pow(2.,16.) - 1.); }\n\n\n\nvec4 r24(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n\nfloat hash13(vec3 p3){\n    p3 = fract((p3)*0.1031);\n    p3 += dot(p3, p3.yzx  + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\n\n\nfloat cyclicNoise(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(1.1);\n    float amp = 1.;\n    const float gain = 0.9;\n    const float lacunarity = 1.5;\n    const int octaves = 4;\n    \n    const float warp = 1.2;    \n    float warpTrk = 1.5 ;\n    const float warpTrkGain = .1;\n    \n    vec3 seed = vec3(-2,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p += sin(p.zxy*warpTrk + vec3(0,-time*5.,0) - 2.*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.3,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ------------------------------- //\n//           Tracking              //\n// ------------------------------- //\n\nfloat steps = 15.;\nfloat stepSz = 2.;\nvoid findMe( inout vec4 pPntr, inout vec2 pos, vec2 U, vec2 dir){\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = T1(U + dir*i);\n        vec4 otherP = T(otherPntr.xy);\n        vec2 otherPos = unpackU16(otherP.x);\n        \n        if (length( (U/R - otherPos.xy)/resFact.yx ) < length( (U/R - pos.xy)/resFact.yx )){\n            pos = otherPos;\n            pPntr = otherPntr;\n        }\n        \n    }\n\n}\n        \n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\n    if (iFrame < 3) {\n        //C = r24(U);\n        C.xy = U;\n        C.zw -= C.zw;\n    } else {        \n        C = T1(U);\n        \n        if (iFrame < startOffs){\n            steps = 100.;\n        }\n        \n        \n        vec4 pPntr = C;\n        vec4 p = T(pPntr.xy);\n        vec2 pos = unpackU16(p.x);\n        \n        findMe(pPntr,pos,U,vec2(0,1));\n        findMe(pPntr,pos,U,vec2(0,-1));\n        findMe(pPntr,pos,U,vec2(1,0));\n        findMe(pPntr,pos,U,vec2(-1,0));\n        findMe(pPntr,pos,U,vec2(1,1));\n        findMe(pPntr,pos,U,vec2(1,-1));\n        findMe(pPntr,pos,U,vec2(-1,1));\n        findMe(pPntr,pos,U,vec2(-1,-1));\n        \n        C = pPntr;\n        \n        if (iFrame == startOffs-1){\n            C.zw = 1. + floor(r24(C.xy).xy*2.99);\n        }\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ------------------------------- //\n//           Painting              //\n// ------------------------------- //\n\n\nint neighborsCnt = 0;\nvec4 neighborPtrs[] = vec4[8](vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0),vec4(0));\n\nfloat steps = 1.;\nvoid findNeighbors( vec2 p, vec2 dir){\n    float stepSz = 1. + mod(float(iFrame),2.);\n    for(float i = 1.; i < steps; i++){\n        vec4 otherPntr = TF1( p.xy * R + dir * i*stepSz );\n        vec4 otherP    = T( otherPntr.xy );\n        vec2 otherPos = unpackU16(otherP.x);\n        \n        // TODO: don't unpack here\n        if ( otherPos.x != p.x ){\n            for(int i = 0; i < neighborsCnt; i++){\n                if (neighborPtrs[i] == otherPntr)\n                    return;\n            }\n            neighborPtrs[neighborsCnt++] = otherPntr;\n            return;\n        }\n    }\n\n}\n\nfloat sdSq(vec2 p, float s){p = abs(p) - s; return max(p.x,p.y);}\n\n#define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e)))\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 uv = U/R;\n    float pixelSize = dFdx(uv.x)*3.;\n    \n    vec4 mePntr = T1(U);\n    vec4 me = T(mePntr.xy);\n    \n    vec2 mePos = unpackU16(me.x);\n    vec4 meData = unpackU8(me.z);\n    \n    \n    C = texture(iChannel2,U/R);\n    findNeighbors( mePos, vec2(1,0));\n    findNeighbors( mePos, vec2(-1,0));\n    findNeighbors( mePos, vec2(0,1));\n    findNeighbors( mePos, vec2(0,-1));\n    \n    findNeighbors( mePos, vec2(1,1));\n    findNeighbors( mePos, vec2(1,-1));\n    findNeighbors( mePos, vec2(-1,1));\n    findNeighbors( mePos, vec2(-1,-1));\n    \n    for(int i = -1; i < neighborsCnt; i++){\n        vec4 otherPtr;\n        vec4 otherP;\n        if (i == -1){\n            otherPtr = mePntr;\n            otherP = me;\n        } else {\n            otherPtr= neighborPtrs[i];\n            otherP = T(otherPtr.xy);\n        }\n        \n        \n        vec2 pos = unpackU16(otherP.x);\n        vec4 data = unpackU8(otherP.z);\n    \n        float size = data.x;\n    \n    \n        //vec3 col = pal(0.5,vec3(0.5,1.6,0.5),vec3(5,1,1),5. + sin(data.z), 0. + data.w*6. + iTime); \n    \n        //vec3 col = pal(0.5,vec3(0.5,1.6,0.5),vec3(5,1,1),5. + sin(data.z), 0. + data.w*6. + iTime); \n        \n        vec3 col = pal(0.5,vec3(0.5,1.6,0.5),vec3(5,1,1),5. + sin(data.z), 0. + data.w*6. + iTime); \n    \n        col *= 0.9;\n        float dFill = length((pos.xy - uv)*resFact.xy) - getSize(size) ;\n        float dOutline = abs(dFill) - 0.0000;\n        \n        \n        C.xyz *= C.w;\n        C.xyzw = mix(C.xyzw,vec4(1),smoothstep(pixelSize*1.,0.,dFill));\n        \n        C.w *= 0.9995;\n        \n        \n        if (data.y >= meData.y){\n        \n        \n        }\n        //return;\n        //C = mix(C,pal(0.5,0.5,vec4(3,2,1,1.),1.,otherPtr.z*1.*14. + 0.*otherPtr.w ),smoothstep(dFdx(uv.x),0.,length((otherP.xy - uv)*resFact.xy) - particleSz));\n    }\n\n    \n    \n    if(iFrame < 4)\n        C = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// noise buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragColor.x = cyclicNoise(vec3(fragCoord/iResolution.y*6., iTime*0.5), false, iTime*0.05);\n    \n    fragColor.yz = vec2(dFdx(fragColor.x), dFdy(fragColor.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}