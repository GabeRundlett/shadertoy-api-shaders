{
    "Shader": {
        "info": {
            "date": "1681146843",
            "description": "All infos are in the Image description!",
            "flags": 32,
            "hasliked": 0,
            "id": "msVXWD",
            "likes": 264,
            "name": "Handwritten Digit Recognizer CNN",
            "published": 3,
            "tags": [
                "number",
                "convolution",
                "learning",
                "digit",
                "linear",
                "model",
                "ai",
                "machine",
                "neural",
                "recognition",
                "network",
                "convolutional",
                "prediction",
                "ml"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 11564
        },
        "renderpass": [
            {
                "code": "/* CNN Digit Recognizer by @kishimisu (2023) - https://www.shadertoy.com/view/msVXWD\n\n    A Convolutional Neural Network implementation pre-trained on the MNIST dataset.\n\n    - Draw digits between 0-9 in the right square\n    - It can take some time to compile\n    - Exactly 2023 trainable parameters!\n    \n    Python notebook created for this project: \n    - https://colab.research.google.com/drive/1bOAI1xb8Z4D5LoNd_lAm6BIuLJ3OYjNi\n    \n    ***\n    \n    I wasn't very satisfied with my previous version (see fork) that was using a\n    very basic network containing one hidden layer only. It achieved 92% accuracy\n    during training but translated poorly in shaders.\n\n    This time I've used a more efficient approach for this kind of task: a basic CNN\n    with only 2 convolution + max pooling layers, and only one fully connected layer.\n    It achieved a 98% accuracy during training, and it seems to make better predictions\n    in shadertoy despite having half less parameters (2023 vs 4120).\n    \n    Note that it seem to struggle to predict the '6' and '9', and also if the digits\n    are too off-centered. I couldn't augment the data for such a tiny network size!\n   \n  ### Technical issues ###\n  \n    The first CNN architecture I tried to implement was very similar to this one, but\n    instead of having 8 and 5 feature maps respectively, I had 10 and 10.\n    Increasing the number of feature map exponentially increases the number of weights,\n    thus the amount of computations, characters and compilation time.\n\n    Here the computational intensity doesn't seem to be a problem, but the compilation\n    time is what really made me struggle with this project.\n\n    If you look around in the code, you will see that there are no loops for the network\n    calculation, despite the fact that a CNN heavily relies on loops and nested loops.\n    When using loops, the compilation time went to the moon and it was very impractical,\n    this is why I preferred to decompose every calculation, at the cost of a big increase\n    in the character count (this shader could be twice as short) and degraded readability.\n  \n  ### Network Architecture ###\n  \n  (Buffer A)\n  * Input layer\n   - 28x28 = 784 inputs\n  \n  (Buffer B)\n  * First convolution group (8 feature maps):\n   - Convolution Layer (kernel size=5x5, stride=1)   : 28x28 => 8x24x24\n   - ReLU activation function\n   - Max Pooling Layer (kernel size=2x2, stride=2x2) : 8x24x24 => 8x12x12\n  \n  (Buffer C)\n  * Second convolution group (5 feature maps):\n   - Convolution Layer (kernel size=5x5, stride=1)   : 8x12x12 => 5x8x8\n   - ReLU activation function\n   - Max Pooling Layer (kernel size=2x2, stride=2x2) : 5x8x8 => 5x4x4\n  \n  (Buffer D)\n  * Fully connected layer\n   - 5x4x4 = 80 => 10\n   \n  (Image)\n  * Softmax function\n  \n   Total number of parameters: 2,023!\n*/\n\n// Text utilities\nfloat char(vec2 u, vec2 p) {\n    return texture(iChannel3, (u + p) / 16.).r * step(0., min(u.x,u.y)) * step(max(u.x,u.y), 1.);\n}\nfloat printInputLayer(vec2 u) {\n    print _I _n _p _u _t _sp _L _a _y _e _r _end\n}\nfloat printConv(vec2 u, int i) {\n    print _C _o _n _v _o _l _u _t _i _o _n _sp _dig(i) _end\n}\nfloat printMaxPooling(vec2 u, int i) {\n    print _M _a _x _sp _P _o _o _l _i _n _g _sp _dig(i) _end\n}\nfloat printFullyConnected(vec2 u) {\n    print _F _u _l _l _y _sp _C _o _n _n _e _c _t _e _d _end\n}\nfloat printOutputLayer(vec2 u) {\n    print _O _u _t _p _u _t _sp _L _a _y _e _r _end\n}\nfloat printPrediction(vec2 u) {\n    print _P _r _e _d _i _c _t _i _o _n _dd _end\n}\n\nfloat rect(vec2 p) {\n    vec2 d = abs(p-.5)-.5;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\n\n// Color\nfloat sigmoid(float x) {\n  return 2.0 / (1.0 + exp(-x)) - 1.0;\n}\nvec3 pal(float x) {\n    x /= 8.;\n    x = 1.-x;\n    return cos( 6.28318*(vec3(1.258, 0.838, 0.708)*x+vec3(0.5)) )*.5+.5;\n}\n\n// Calculates the denominator part for the softmax function,\n// And take advantage of the loop to store the predicted outcome\nfloat getExpSumAndPrediction(inout vec2 prediction) {\n    float sum = 0.;\n    float upp = -1e7;\n\n    for (float i = 0.; i < num_classes; i++) {\n        float val = texture(iChannel2, vec2(i+.5,.5) / R).r;\n        if (val > upp) {\n            upp = val;\n            prediction = vec2(i, exp(val));\n        }\n        sum += exp(val);\n    }\n    return sum;\n}\n\n// Displays a portion of a texture containing feature map data\n// p : normalized uv coordinates (0-1)\n// s : scaling factor\n// r.xy : x/y start (in pixels)\n// r.zw : x/y end   (in pixels)\nvec3 displayFeatureMaps(vec2 p, vec2 s, vec4 r, float feature_maps, sampler2D smp) { \n    p = p*s + vec2(1.-s.x,0)/2.; // scale and center uvs\n    \n    float fp = 1./feature_maps;\n    float id = floor(p.x*feature_maps); // current feature map id\n    float m = 1.1; // border width\n    \n    //check bounds\n    if (min(p.x,p.y) < 0. || max(p.x,p.y) > 1. || abs(mod(p.x, fp) - fp*.5) > fp/m/2. || abs(p.y-.5) > 1./m/2.) \n        return vec3(0);\n    \n    m *= .999;               // fix overflow issue\n    p *= m;                  // scale down\n    p.x -= (m-1.) * id * fp; // offset x from id\n    p.x -= (m-1.) * .5 * fp; // re-center x\n    p.y -= (m-1.) * .5;      // re-center y\n    p *= r.zw / R;           // crop\n    p.xy += r.xy/R;          // offset origin\n    \n    float val = texture(smp, p).r;             // Get value\n    if (r.y > .0) val = 1. - sigmoid(val)*1.3; // Change color map for convolution (as it can go negative)\n    return pal(val); // Return mapped color\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / R;\n    vec3 col;\n\n    vec2 prediction; // index, confidence\n    float exp_sum = getExpSumAndPrediction(prediction);\n\n    uv.x *= iAspect;\n\n    // Left part of the screen (visualizations)\n    if (uv.x < iAspect - 1.) {\n        uv.x += 1.;\n        // Prediction panel\n        if(uv.y < .12) {            \n            uv = vec2(uv.x - 1.05, uv.y) * 10.;\n            col += printPrediction(uv);\n            col += vec3(1,0,0) * char(uv*.7 - vec2(3.5,-.1), vec2(prediction.x,12));\n            col = mix(pal(prediction.y/exp_sum*3.), col, length(col));\n        }\n        // Output panel\n        else if (uv.y < .47) {\n            // Transform to upper right area\n            vec2 tuv = vec2( (uv.x - 1.) / (iAspect - 1.), (uv.y-.12) /(.43-.12));\n            // Current output index\n            float idx = floor(tuv.x * num_classes);\n            \n            // Output value for the current index\n            float val = texture(iChannel2, vec2(idx+.5,.5) / R).r;\n            // Apply the softmax function\n            val = exp(val) / exp_sum; \n\n            // Draw bars\n            col = mix(vec3(1,0,0), vec3(0,1,0), val) * smoothstep(0., .01, val - tuv.y);   \n            col = pal(val*2.5) * smoothstep(0., .01, val - tuv.y);\n\n            // Draw \"output\" text\n            uv = vec2(uv.x - .98, uv.y-.41) * 22.;\n            col += printOutputLayer(uv);\n            \n            // Draw digits\n            tuv = vec2(fract(tuv.x*num_classes), tuv.y*4.);\n            col += vec3(char(tuv, vec2(idx,12))); \n        }\n        // Fully connected layer\n        else if (uv.y < .5) {\n            vec2 tuv = vec2( (uv.x - 1.) / (iAspect - 1.), (uv.y-.47) /(.48-.47));\n            float id = floor(tuv.x * 16. * feature_maps_2);\n            float x = mod(id, 4.*feature_maps_2);\n            float y = floor(id / (4.*feature_maps_2));\n            \n            col = pal(texelFetch(iChannel1, ivec2(x,y), 0).r);\n        }\n        // Feature maps\n        else {\n            // Display texts\n            uv = (uv - vec2(.98,.96)) * 24.;\n            col += printConv(uv, 1);\n            \n            uv.y += 3.;\n            col += printMaxPooling(uv, 1);\n            \n            uv.y += 2.85;\n            col += printConv(uv, 2);\n            \n            uv.y += 2.5;\n            col += printMaxPooling(uv, 2);\n            \n            uv.y += 2.4;\n            col += printFullyConnected(uv);\n            \n            // Remap uv\n            uv  = fragCoord / R;\n            uv.x = uv.x / (1. - R.y/R.x);\n            \n            // Display feature maps\n            uv.y -= .88;\n            col += displayFeatureMaps(uv, vec2(10./feature_maps_1,12), vec4(0, 12, 24.*feature_maps_1, 24), feature_maps_1, iChannel0);\n\n            uv.y += .115;\n            col += displayFeatureMaps(uv, vec2(1.2*10./feature_maps_1,1.2*12.), vec4(0, 0, 12.*feature_maps_1, 12), feature_maps_1, iChannel0);\n\n            uv.y += .11;\n            col += displayFeatureMaps(uv, vec2(1.95*10./feature_maps_1,1.95*8.), vec4(0, 4, 8.*feature_maps_2, 8), feature_maps_2, iChannel1);\n            \n            uv.y += .1;\n            col += displayFeatureMaps(uv, vec2(2.5*10./feature_maps_1,2.5*8.), vec4(0, 0, 4.*feature_maps_2, 4), feature_maps_2, iChannel1);\n        }\n    }\n    // Display drawing\n    else {\n        uv.x = uv.x - iAspect + 1.;\n        col += printInputLayer((uv-vec2(0,.9))*15.);\n        col += vec3(0.14,1,0.51) * smoothstep(.015, 0.004, abs(rect(uv)));           \n        col += texture(iChannel0, fragCoord / R).r;\n    }\n         \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* This buffer handles the drawing part */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / R;\n    vec2 m = (iMouse.xy - fragCoord) / R.y;\n    \n    float d = smoothstep(.06, 0., length(m)); // \"Pen\" intensity\n    d *= step(0., iMouse.z);                  // Only draw on mouse press\n        \n    // Accumulate values and keep them in the [0-1] range\n    vec3 col = texture(iChannel0, uv).rgb;\n    col = clamp(col + d, 0., 1.);\n    \n    col *= step(iMouse.w,0.); // Reset on new click\n        \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/* This buffer is responsible for:\n   - Convolution Layer 1 (kernel size=5x5, stride=1)   : 28x28 => 8x24x24\n   - ReLU activation function\n   - Max Pooling Layer 1 (kernel size=2x2, stride=2x2) : 8x24x24 => 8x12x12\n   \n   This is done as a 2-frame process: first the Convolution feature maps \n   are calculated and stored in Buffer B, which is then read again to \n   calculate and store the Max Pooling feature maps.\n   It also draws the (pixelated) input layer on the right.\n*/  \n\n#define pool_size 12.\n\n// Get normalized input pixel\n// p: [0, input_res-1]\nfloat i(vec2 p) {  \n    p = vec2((p.x+.5) / iAspect, p.y+.5) / input_res;\n    p.x += 1. - 1./iAspect;\n    float val = textureLod(iChannel0, p, log2(iResolution.y/input_res)).r;\n    return (val - mean) / std; // Normalize\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    vec2 uv = fragCoord / R;\n    vec3 col = vec3(0);\n    \n    vec2 f = fragCoord - .5;\n    ivec2 F = ivec2(f);\n    \n    // Max Pooling\n    if (F.x < int(pool_size * feature_maps_1) && F.y < int(pool_size)) {\n        ivec2 p = ivec2(f*2.) + ivec2(0, pool_size);\n        \n        float x = max(texelFetch(iChannel1, p, 0).r,\n                  max(texelFetch(iChannel1, p + ivec2(0,1), 0).r,\n                  max(texelFetch(iChannel1, p + ivec2(1,0), 0).r,\n                      texelFetch(iChannel1, p + ivec2(1,1), 0).r)));\n                      \n        // ReLU activation function\n        x = max(0., x); \n        \n        col = vec3(x);\n    }\n    // Convolution\n    else if (F.x < int(pool_size * feature_maps_1 * 2.) && F.y >= int(pool_size) && F.y < int(pool_size*3.)) {\n        int fmap = int(f.x / (pool_size*2.));\n        vec2 p = mod(f - vec2(0,pool_size), pool_size*2.);\n        float x;\n        \n        if (fmap == 0) x = -.256220*i(p) - .263963*i(p+vec2(1,0)) - .222650*i(p+vec2(2,0)) - .121450*i(p+vec2(3,0)) + .008962*i(p+vec2(4,0)) - .286535*i(p+vec2(0,1)) - .128346*i(p+vec2(1,1)) - .119005*i(p+vec2(2,1)) - .105653*i(p+vec2(3,1)) + .106190*i(p+vec2(4,1)) - .196784*i(p+vec2(0,2)) + .015316*i(p+vec2(1,2)) + .154883*i(p+vec2(2,2)) + .169439*i(p+vec2(3,2)) + .155174*i(p+vec2(4,2)) - .088119*i(p+vec2(0,3)) + .207242*i(p+vec2(1,3)) + .153355*i(p+vec2(2,3)) + .170941*i(p+vec2(3,3)) + .058379*i(p+vec2(4,3)) + .179226*i(p+vec2(0,4)) + .170095*i(p+vec2(1,4)) + .187621*i(p+vec2(2,4)) + .115604*i(p+vec2(3,4)) + .211174*i(p+vec2(4,4)) + .026794;\n        else if (fmap == 1) x = -.208491*i(p) - .246941*i(p+vec2(1,0)) - .118710*i(p+vec2(2,0)) + .029216*i(p+vec2(3,0)) + .134078*i(p+vec2(4,0)) + .175747*i(p+vec2(0,1)) + .050075*i(p+vec2(1,1)) - .259553*i(p+vec2(2,1)) - .155585*i(p+vec2(3,1)) - .184678*i(p+vec2(4,1)) + .216247*i(p+vec2(0,2)) + .372172*i(p+vec2(1,2)) + .049592*i(p+vec2(2,2)) - .160362*i(p+vec2(3,2)) + .087013*i(p+vec2(4,2)) - .088406*i(p+vec2(0,3)) + .108477*i(p+vec2(1,3)) + .387428*i(p+vec2(2,3)) + .045766*i(p+vec2(3,3)) + .116031*i(p+vec2(4,3)) - .219892*i(p+vec2(0,4)) - .266197*i(p+vec2(1,4)) + .089884*i(p+vec2(2,4)) + .015118*i(p+vec2(3,4)) + .100712*i(p+vec2(4,4)) + .024362;\n        else if (fmap == 2) x = -.152888*i(p) + .072108*i(p+vec2(1,0)) + .141602*i(p+vec2(2,0)) + .300121*i(p+vec2(3,0)) - .126745*i(p+vec2(4,0)) - .232032*i(p+vec2(0,1)) - .066877*i(p+vec2(1,1)) + .099079*i(p+vec2(2,1)) + .214114*i(p+vec2(3,1)) + .106322*i(p+vec2(4,1)) - .143861*i(p+vec2(0,2)) - .108627*i(p+vec2(1,2)) + .071171*i(p+vec2(2,2)) + .197545*i(p+vec2(3,2)) + .184703*i(p+vec2(4,2)) - .112155*i(p+vec2(0,3)) - .106069*i(p+vec2(1,3)) - .093000*i(p+vec2(2,3)) + .101620*i(p+vec2(3,3)) + .161687*i(p+vec2(4,3)) - .083832*i(p+vec2(0,4)) - .058263*i(p+vec2(1,4)) - .031437*i(p+vec2(2,4)) + .034528*i(p+vec2(3,4)) + .223640*i(p+vec2(4,4)) - .389324;\n        else if (fmap == 3) x =  .127065*i(p) + .067651*i(p+vec2(1,0)) + .237392*i(p+vec2(2,0)) + .122720*i(p+vec2(3,0)) + .263380*i(p+vec2(4,0)) + .272143*i(p+vec2(0,1)) + .229455*i(p+vec2(1,1)) + .201271*i(p+vec2(2,1)) + .158494*i(p+vec2(3,1)) + .083364*i(p+vec2(4,1)) + .087063*i(p+vec2(0,2)) + .005914*i(p+vec2(1,2)) - .107822*i(p+vec2(2,2)) + .037689*i(p+vec2(3,2)) - .241690*i(p+vec2(4,2)) - .144014*i(p+vec2(0,3)) - .320903*i(p+vec2(1,3)) - .222353*i(p+vec2(2,3)) - .283808*i(p+vec2(3,3)) - .332431*i(p+vec2(4,3)) - .049706*i(p+vec2(0,4)) - .170751*i(p+vec2(1,4)) - .223001*i(p+vec2(2,4)) - .079481*i(p+vec2(3,4)) + .056033*i(p+vec2(4,4)) - .100076;\n        else if (fmap == 4) x =  .033839*i(p) + .143132*i(p+vec2(1,0)) - .216749*i(p+vec2(2,0)) - .075409*i(p+vec2(3,0)) - .010285*i(p+vec2(4,0)) + .097860*i(p+vec2(0,1)) + .241089*i(p+vec2(1,1)) + .214650*i(p+vec2(2,1)) - .225313*i(p+vec2(3,1)) - .184724*i(p+vec2(4,1)) - .270974*i(p+vec2(0,2)) - .187646*i(p+vec2(1,2)) + .235756*i(p+vec2(2,2)) + .272372*i(p+vec2(3,2)) - .101422*i(p+vec2(4,2)) - .151017*i(p+vec2(0,3)) + .042975*i(p+vec2(1,3)) - .064422*i(p+vec2(2,3)) + .240397*i(p+vec2(3,3)) - .020506*i(p+vec2(4,3)) + .119857*i(p+vec2(0,4)) - .080291*i(p+vec2(1,4)) - .152493*i(p+vec2(2,4)) - .076686*i(p+vec2(3,4)) + .018775*i(p+vec2(4,4)) - .021946;\n        else if (fmap == 5) x = -.408473*i(p) - .134044*i(p+vec2(1,0)) - .069418*i(p+vec2(2,0)) + .135106*i(p+vec2(3,0)) + .173311*i(p+vec2(4,0)) - .176028*i(p+vec2(0,1)) - .379614*i(p+vec2(1,1)) - .162828*i(p+vec2(2,1)) - .082388*i(p+vec2(3,1)) - .015580*i(p+vec2(4,1)) - .027795*i(p+vec2(0,2)) - .173466*i(p+vec2(1,2)) - .435070*i(p+vec2(2,2)) - .292225*i(p+vec2(3,2)) - .234535*i(p+vec2(4,2)) + .202488*i(p+vec2(0,3)) + .089885*i(p+vec2(1,3)) - .082089*i(p+vec2(2,3)) - .095222*i(p+vec2(3,3)) - .332411*i(p+vec2(4,3)) + .152386*i(p+vec2(0,4)) + .277061*i(p+vec2(1,4)) + .114890*i(p+vec2(2,4)) + .061884*i(p+vec2(3,4)) - .197509*i(p+vec2(4,4)) + .094496;\n        else if (fmap == 6) x = -.160558*i(p) - .262113*i(p+vec2(1,0)) + .070456*i(p+vec2(2,0)) + .071991*i(p+vec2(3,0)) + .223662*i(p+vec2(4,0)) - .250266*i(p+vec2(0,1)) - .110144*i(p+vec2(1,1)) - .006879*i(p+vec2(2,1)) + .095233*i(p+vec2(3,1)) + .134715*i(p+vec2(4,1)) - .217089*i(p+vec2(0,2)) - .253514*i(p+vec2(1,2)) - .046932*i(p+vec2(2,2)) + .212780*i(p+vec2(3,2)) + .138915*i(p+vec2(4,2)) - .067716*i(p+vec2(0,3)) - .162607*i(p+vec2(1,3)) - .162463*i(p+vec2(2,3)) - .006180*i(p+vec2(3,3)) + .204881*i(p+vec2(4,3)) - .164372*i(p+vec2(0,4)) - .196290*i(p+vec2(1,4)) - .336171*i(p+vec2(2,4)) - .003429*i(p+vec2(3,4)) + .090525*i(p+vec2(4,4)) - .214098;\n        else if (fmap == 7) x =  .314642*i(p) + .069870*i(p+vec2(1,0)) - .232515*i(p+vec2(2,0)) - .196920*i(p+vec2(3,0)) - .258605*i(p+vec2(4,0)) + .182785*i(p+vec2(0,1)) - .227795*i(p+vec2(1,1)) - .121011*i(p+vec2(2,1)) - .160892*i(p+vec2(3,1)) - .082476*i(p+vec2(4,1)) + .000842*i(p+vec2(0,2)) - .182144*i(p+vec2(1,2)) - .192695*i(p+vec2(2,2)) - .022503*i(p+vec2(3,2)) - .187570*i(p+vec2(4,2)) - .158919*i(p+vec2(0,3)) - .226402*i(p+vec2(1,3)) - .036234*i(p+vec2(2,3)) + .014082*i(p+vec2(3,3)) - .162542*i(p+vec2(4,3)) - .310638*i(p+vec2(0,4)) - .177386*i(p+vec2(1,4)) - .002980*i(p+vec2(2,4)) - .114051*i(p+vec2(3,4)) - .113300*i(p+vec2(4,4)) + .144752;\n              \n        //x = max(0., x);\n        col = vec3(x);\n    }   \n    // Displays the pixelated version of the input (on the right)\n    else {\n        uv.x -= 1. - 1./iAspect;\n        uv.x *= iAspect;\n        uv = floor(uv * input_res);\n        col = vec3(i(uv)*std+mean);\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/* This buffer is responsible for:\n   - Convolution Layer 2 (kernel size=5x5, stride=1)   : 8x12x12 => 5x8x8\n   - ReLU activation function\n   - Max Pooling Layer 2 (kernel size=2x2, stride=2x2) : 5x8x8 => 5x4x4\n   \n   This is done as a 2-frame process: first the Convolution feature maps \n   are calculated and stored in Buffer C, which is then read again to \n   calculate and store the Max Pooling feature maps.\n*/\n   \n#define pool_size 4.\n\nfloat i(vec2 p) { \n    return texelFetch(iChannel0, ivec2(p), 0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    vec2 uv = fragCoord / R;\n    vec3 col = vec3(0);\n    \n    vec2 f = fragCoord - .5;\n    ivec2 F = ivec2(f);\n    \n    // Max Pooling\n    if (F.x < int(pool_size * feature_maps_2) && F.y < int(pool_size)) {\n        ivec2 p = ivec2(f*2.) + ivec2(0, pool_size);\n        \n        float x = max(texelFetch(iChannel1, p, 0).r,\n                  max(texelFetch(iChannel1, p + ivec2(0,1), 0).r,\n                  max(texelFetch(iChannel1, p + ivec2(1,0), 0).r,\n                      texelFetch(iChannel1, p + ivec2(1,1), 0).r)));\n        \n        // ReLU activation function\n        x = max(0., x); \n        \n        col = vec3(x);\n    }\n    // Convolution\n    else if (F.x < int(pool_size * feature_maps_2 * 2.) && F.y >= int(pool_size) && F.y < int(pool_size*3.)) {\n        int fmap = int(f.x / (pool_size*2.));\n        vec2 p = mod(f - vec2(0,pool_size), pool_size*2.);\n        float x;\n\n        if (fmap == 0) {\n            x = -.046534*i(p+vec2(0,0)) - .073340*i(p+vec2(1,0)) - .104696*i(p+vec2(2,0)) - .128232*i(p+vec2(3,0)) - .058648*i(p+vec2(4,0)) - .096220*i(p+vec2(0,1)) - .058887*i(p+vec2(1,1)) - .051275*i(p+vec2(2,1)) - .135895*i(p+vec2(3,1)) - .095000*i(p+vec2(4,1)) + .021992*i(p+vec2(0,2)) + .008313*i(p+vec2(1,2)) - .001602*i(p+vec2(2,2)) - .100098*i(p+vec2(3,2)) - .076632*i(p+vec2(4,2)) + .074367*i(p+vec2(0,3)) + .046224*i(p+vec2(1,3)) + .047301*i(p+vec2(2,3)) - .039357*i(p+vec2(3,3)) - .088746*i(p+vec2(4,3)) - .022489*i(p+vec2(0,4)) - .013636*i(p+vec2(1,4)) + .026681*i(p+vec2(2,4)) - .035710*i(p+vec2(3,4)) - .047739*i(p+vec2(4,4)) ;\n            x +=  .164134*i(p+vec2(12,0)) + .110662*i(p+vec2(13,0)) - .037616*i(p+vec2(14,0)) - .125064*i(p+vec2(15,0)) - .127855*i(p+vec2(16,0)) + .073158*i(p+vec2(12,1)) + .050712*i(p+vec2(13,1)) - .040878*i(p+vec2(14,1)) - .127835*i(p+vec2(15,1)) - .127839*i(p+vec2(16,1)) - .017567*i(p+vec2(12,2)) - .023066*i(p+vec2(13,2)) - .121369*i(p+vec2(14,2)) - .149846*i(p+vec2(15,2)) - .128354*i(p+vec2(16,2)) - .002525*i(p+vec2(12,3)) - .038398*i(p+vec2(13,3)) - .063718*i(p+vec2(14,3)) - .087393*i(p+vec2(15,3)) - .119930*i(p+vec2(16,3)) - .008945*i(p+vec2(12,4)) + .011088*i(p+vec2(13,4)) - .008347*i(p+vec2(14,4)) - .025335*i(p+vec2(15,4)) - .090066*i(p+vec2(16,4)) ;\n            x +=  .105954*i(p+vec2(24,0)) + .068219*i(p+vec2(25,0)) + .052490*i(p+vec2(26,0)) + .059224*i(p+vec2(27,0)) + .077750*i(p+vec2(28,0)) + .096263*i(p+vec2(24,1)) + .074264*i(p+vec2(25,1)) + .048235*i(p+vec2(26,1)) + .092739*i(p+vec2(27,1)) + .073469*i(p+vec2(28,1)) + .032869*i(p+vec2(24,2)) + .095552*i(p+vec2(25,2)) + .097416*i(p+vec2(26,2)) + .096990*i(p+vec2(27,2)) + .111675*i(p+vec2(28,2)) + .016135*i(p+vec2(24,3)) + .048912*i(p+vec2(25,3)) + .076057*i(p+vec2(26,3)) + .040083*i(p+vec2(27,3)) + .111671*i(p+vec2(28,3)) + .062053*i(p+vec2(24,4)) + .030614*i(p+vec2(25,4)) + .042673*i(p+vec2(26,4)) + .015659*i(p+vec2(27,4)) - .054323*i(p+vec2(28,4)) ;\n            x +=  .004916*i(p+vec2(36,0)) - .063013*i(p+vec2(37,0)) - .071405*i(p+vec2(38,0)) - .037116*i(p+vec2(39,0)) + .002900*i(p+vec2(40,0)) - .057140*i(p+vec2(36,1)) - .132976*i(p+vec2(37,1)) - .109345*i(p+vec2(38,1)) - .126376*i(p+vec2(39,1)) - .090146*i(p+vec2(40,1)) - .072674*i(p+vec2(36,2)) - .033938*i(p+vec2(37,2)) - .056043*i(p+vec2(38,2)) - .173670*i(p+vec2(39,2)) - .207806*i(p+vec2(40,2)) - .030818*i(p+vec2(36,3)) + .016815*i(p+vec2(37,3)) - .042149*i(p+vec2(38,3)) - .167785*i(p+vec2(39,3)) - .189784*i(p+vec2(40,3)) - .013633*i(p+vec2(36,4)) + .030919*i(p+vec2(37,4)) - .033668*i(p+vec2(38,4)) - .096383*i(p+vec2(39,4)) - .144897*i(p+vec2(40,4)) ;\n            x +=  .133044*i(p+vec2(48,0)) + .078342*i(p+vec2(49,0)) - .021171*i(p+vec2(50,0)) - .039290*i(p+vec2(51,0)) - .146281*i(p+vec2(52,0)) + .059153*i(p+vec2(48,1)) + .065948*i(p+vec2(49,1)) - .078621*i(p+vec2(50,1)) - .080518*i(p+vec2(51,1)) - .103001*i(p+vec2(52,1)) + .026036*i(p+vec2(48,2)) + .026372*i(p+vec2(49,2)) - .058402*i(p+vec2(50,2)) - .017815*i(p+vec2(51,2)) - .025400*i(p+vec2(52,2)) + .019300*i(p+vec2(48,3)) + .019241*i(p+vec2(49,3)) - .021274*i(p+vec2(50,3)) + .035523*i(p+vec2(51,3)) + .018338*i(p+vec2(52,3)) + .083902*i(p+vec2(48,4)) - .007695*i(p+vec2(49,4)) - .036464*i(p+vec2(50,4)) - .009007*i(p+vec2(51,4)) - .055234*i(p+vec2(52,4)) ;\n            x +=  .192597*i(p+vec2(60,0)) + .108261*i(p+vec2(61,0)) + .024767*i(p+vec2(62,0)) + .030960*i(p+vec2(63,0)) - .021334*i(p+vec2(64,0)) + .024290*i(p+vec2(60,1)) + .086279*i(p+vec2(61,1)) - .003715*i(p+vec2(62,1)) - .018433*i(p+vec2(63,1)) - .032012*i(p+vec2(64,1)) - .074780*i(p+vec2(60,2)) + .007053*i(p+vec2(61,2)) - .009388*i(p+vec2(62,2)) + .038558*i(p+vec2(63,2)) + .067052*i(p+vec2(64,2)) - .160614*i(p+vec2(60,3)) - .032528*i(p+vec2(61,3)) + .063304*i(p+vec2(62,3)) + .005934*i(p+vec2(63,3)) + .048658*i(p+vec2(64,3)) - .018971*i(p+vec2(60,4)) + .061493*i(p+vec2(61,4)) + .078854*i(p+vec2(62,4)) + .110024*i(p+vec2(63,4)) + .083818*i(p+vec2(64,4)) ;\n            x +=  .003607*i(p+vec2(72,0)) + .026321*i(p+vec2(73,0)) + .060368*i(p+vec2(74,0)) + .036074*i(p+vec2(75,0)) + .171541*i(p+vec2(76,0)) + .032160*i(p+vec2(72,1)) + .089552*i(p+vec2(73,1)) + .114002*i(p+vec2(74,1)) + .135316*i(p+vec2(75,1)) + .164947*i(p+vec2(76,1)) + .029636*i(p+vec2(72,2)) + .102024*i(p+vec2(73,2)) + .157455*i(p+vec2(74,2)) + .134793*i(p+vec2(75,2)) + .202357*i(p+vec2(76,2)) + .053904*i(p+vec2(72,3)) + .043092*i(p+vec2(73,3)) + .043481*i(p+vec2(74,3)) + .042083*i(p+vec2(75,3)) + .038933*i(p+vec2(76,3)) + .065984*i(p+vec2(72,4)) + .022676*i(p+vec2(73,4)) - .006638*i(p+vec2(74,4)) - .040437*i(p+vec2(75,4)) - .006689*i(p+vec2(76,4)) ;\n            x += -.148014*i(p+vec2(84,0)) - .131265*i(p+vec2(85,0)) - .006657*i(p+vec2(86,0)) + .028222*i(p+vec2(87,0)) + .059049*i(p+vec2(88,0)) - .088015*i(p+vec2(84,1)) - .044709*i(p+vec2(85,1)) + .008072*i(p+vec2(86,1)) + .089204*i(p+vec2(87,1)) + .032808*i(p+vec2(88,1)) + .034581*i(p+vec2(84,2)) + .050597*i(p+vec2(85,2)) + .079305*i(p+vec2(86,2)) + .068517*i(p+vec2(87,2)) - .010634*i(p+vec2(88,2)) + .015563*i(p+vec2(84,3)) + .152927*i(p+vec2(85,3)) + .181252*i(p+vec2(86,3)) + .039751*i(p+vec2(87,3)) + .100112*i(p+vec2(88,3)) + .027230*i(p+vec2(84,4)) + .100313*i(p+vec2(85,4)) + .128368*i(p+vec2(86,4)) + .128317*i(p+vec2(87,4)) + .169261*i(p+vec2(88,4)) + .015435;\n        }\n        else if (fmap == 1) {\n            x =  .168473*i(p+vec2(0,0)) + .032020*i(p+vec2(1,0)) + .080606*i(p+vec2(2,0)) + .144209*i(p+vec2(3,0)) + .231596*i(p+vec2(4,0)) + .079855*i(p+vec2(0,1)) + .003243*i(p+vec2(1,1)) - .009647*i(p+vec2(2,1)) + .048977*i(p+vec2(3,1)) + .097265*i(p+vec2(4,1)) - .072842*i(p+vec2(0,2)) - .098611*i(p+vec2(1,2)) - .112680*i(p+vec2(2,2)) - .060538*i(p+vec2(3,2)) - .056511*i(p+vec2(4,2)) - .103706*i(p+vec2(0,3)) - .094244*i(p+vec2(1,3)) - .127457*i(p+vec2(2,3)) - .089937*i(p+vec2(3,3)) - .037145*i(p+vec2(4,3)) + .136340*i(p+vec2(0,4)) + .058937*i(p+vec2(1,4)) - .078355*i(p+vec2(2,4)) - .123603*i(p+vec2(3,4)) - .098124*i(p+vec2(4,4)) ;\n            x += -.024345*i(p+vec2(12,0)) - .065386*i(p+vec2(13,0)) - .066836*i(p+vec2(14,0)) + .031687*i(p+vec2(15,0)) + .098069*i(p+vec2(16,0)) + .086487*i(p+vec2(12,1)) + .033651*i(p+vec2(13,1)) + .040699*i(p+vec2(14,1)) + .055580*i(p+vec2(15,1)) + .070794*i(p+vec2(16,1)) + .086650*i(p+vec2(12,2)) + .063994*i(p+vec2(13,2)) + .065869*i(p+vec2(14,2)) + .089419*i(p+vec2(15,2)) + .060025*i(p+vec2(16,2)) - .023042*i(p+vec2(12,3)) - .027093*i(p+vec2(13,3)) + .019867*i(p+vec2(14,3)) + .046299*i(p+vec2(15,3)) + .117471*i(p+vec2(16,3)) + .039959*i(p+vec2(12,4)) - .012688*i(p+vec2(13,4)) - .050492*i(p+vec2(14,4)) + .038449*i(p+vec2(15,4)) + .067053*i(p+vec2(16,4)) ;\n            x += -.027017*i(p+vec2(24,0)) - .127440*i(p+vec2(25,0)) - .171092*i(p+vec2(26,0)) - .129185*i(p+vec2(27,0)) - .076406*i(p+vec2(28,0)) - .017304*i(p+vec2(24,1)) + .018061*i(p+vec2(25,1)) - .080205*i(p+vec2(26,1)) - .125497*i(p+vec2(27,1)) - .040958*i(p+vec2(28,1)) + .052195*i(p+vec2(24,2)) + .109802*i(p+vec2(25,2)) + .033683*i(p+vec2(26,2)) + .025611*i(p+vec2(27,2)) - .034670*i(p+vec2(28,2)) + .028702*i(p+vec2(24,3)) + .125819*i(p+vec2(25,3)) + .089908*i(p+vec2(26,3)) + .069893*i(p+vec2(27,3)) - .003656*i(p+vec2(28,3)) - .058450*i(p+vec2(24,4)) - .017720*i(p+vec2(25,4)) + .019981*i(p+vec2(26,4)) - .024931*i(p+vec2(27,4)) - .032475*i(p+vec2(28,4)) ;\n            x += -.061035*i(p+vec2(36,0)) + .061276*i(p+vec2(37,0)) + .113922*i(p+vec2(38,0)) + .197254*i(p+vec2(39,0)) + .130410*i(p+vec2(40,0)) - .031010*i(p+vec2(36,1)) - .154345*i(p+vec2(37,1)) - .095403*i(p+vec2(38,1)) + .088329*i(p+vec2(39,1)) + .161673*i(p+vec2(40,1)) - .033375*i(p+vec2(36,2)) - .160063*i(p+vec2(37,2)) - .197056*i(p+vec2(38,2)) - .179653*i(p+vec2(39,2)) - .062698*i(p+vec2(40,2)) + .046245*i(p+vec2(36,3)) - .054445*i(p+vec2(37,3)) - .112475*i(p+vec2(38,3)) - .129480*i(p+vec2(39,3)) - .065540*i(p+vec2(40,3)) + .007957*i(p+vec2(36,4)) + .003427*i(p+vec2(37,4)) + .009232*i(p+vec2(38,4)) - .005896*i(p+vec2(39,4)) + .022805*i(p+vec2(40,4)) ;\n            x += -.070249*i(p+vec2(48,0)) - .085293*i(p+vec2(49,0)) - .033846*i(p+vec2(50,0)) - .002253*i(p+vec2(51,0)) + .170257*i(p+vec2(52,0)) + .021667*i(p+vec2(48,1)) + .018398*i(p+vec2(49,1)) - .070920*i(p+vec2(50,1)) + .013574*i(p+vec2(51,1)) + .094702*i(p+vec2(52,1)) + .098059*i(p+vec2(48,2)) + .163548*i(p+vec2(49,2)) + .151802*i(p+vec2(50,2)) + .081656*i(p+vec2(51,2)) + .102940*i(p+vec2(52,2)) + .051876*i(p+vec2(48,3)) + .170479*i(p+vec2(49,3)) + .141152*i(p+vec2(50,3)) + .148914*i(p+vec2(51,3)) + .167806*i(p+vec2(52,3)) + .011094*i(p+vec2(48,4)) + .130688*i(p+vec2(49,4)) + .115504*i(p+vec2(50,4)) + .151504*i(p+vec2(51,4)) + .114944*i(p+vec2(52,4)) ;\n            x +=  .040850*i(p+vec2(60,0)) - .090765*i(p+vec2(61,0)) - .123967*i(p+vec2(62,0)) - .145776*i(p+vec2(63,0)) - .089269*i(p+vec2(64,0)) + .041644*i(p+vec2(60,1)) + .016847*i(p+vec2(61,1)) - .085726*i(p+vec2(62,1)) - .143723*i(p+vec2(63,1)) - .142347*i(p+vec2(64,1)) + .055868*i(p+vec2(60,2)) + .071702*i(p+vec2(61,2)) + .010950*i(p+vec2(62,2)) - .033863*i(p+vec2(63,2)) - .115396*i(p+vec2(64,2)) - .034491*i(p+vec2(60,3)) - .016859*i(p+vec2(61,3)) - .003221*i(p+vec2(62,3)) + .029593*i(p+vec2(63,3)) + .055885*i(p+vec2(64,3)) - .021719*i(p+vec2(60,4)) - .088430*i(p+vec2(61,4)) - .045182*i(p+vec2(62,4)) - .036528*i(p+vec2(63,4)) - .000889*i(p+vec2(64,4)) ;\n            x += -.045231*i(p+vec2(72,0)) - .020948*i(p+vec2(73,0)) - .155331*i(p+vec2(74,0)) - .198503*i(p+vec2(75,0)) - .212880*i(p+vec2(76,0)) - .022472*i(p+vec2(72,1)) + .073340*i(p+vec2(73,1)) + .054503*i(p+vec2(74,1)) - .092496*i(p+vec2(75,1)) - .186318*i(p+vec2(76,1)) - .016517*i(p+vec2(72,2)) + .083499*i(p+vec2(73,2)) + .099173*i(p+vec2(74,2)) + .082856*i(p+vec2(75,2)) - .058938*i(p+vec2(76,2)) - .026629*i(p+vec2(72,3)) + .041044*i(p+vec2(73,3)) + .056476*i(p+vec2(74,3)) + .039056*i(p+vec2(75,3)) + .017643*i(p+vec2(76,3)) - .082308*i(p+vec2(72,4)) - .057666*i(p+vec2(73,4)) - .053039*i(p+vec2(74,4)) - .028161*i(p+vec2(75,4)) - .017550*i(p+vec2(76,4)) ;\n            x +=  .057026*i(p+vec2(84,0)) + .055334*i(p+vec2(85,0)) + .153768*i(p+vec2(86,0)) + .078982*i(p+vec2(87,0)) + .143101*i(p+vec2(88,0)) - .047424*i(p+vec2(84,1)) - .015665*i(p+vec2(85,1)) - .013397*i(p+vec2(86,1)) + .002743*i(p+vec2(87,1)) + .061596*i(p+vec2(88,1)) - .063201*i(p+vec2(84,2)) - .017605*i(p+vec2(85,2)) - .060343*i(p+vec2(86,2)) - .056431*i(p+vec2(87,2)) - .013590*i(p+vec2(88,2)) - .022667*i(p+vec2(84,3)) + .011825*i(p+vec2(85,3)) - .042425*i(p+vec2(86,3)) - .148410*i(p+vec2(87,3)) - .080338*i(p+vec2(88,3)) - .044272*i(p+vec2(84,4)) + .107271*i(p+vec2(85,4)) + .148680*i(p+vec2(86,4)) + .082134*i(p+vec2(87,4)) - .009649*i(p+vec2(88,4)) + .035864;\n        }\n        else if (fmap == 2) {\n            x =  .064619*i(p+vec2(0,0)) - .002426*i(p+vec2(1,0)) + .033947*i(p+vec2(2,0)) + .044316*i(p+vec2(3,0)) + .115687*i(p+vec2(4,0)) + .053022*i(p+vec2(0,1)) + .065041*i(p+vec2(1,1)) + .066363*i(p+vec2(2,1)) + .073362*i(p+vec2(3,1)) + .040481*i(p+vec2(4,1)) - .053032*i(p+vec2(0,2)) + .086060*i(p+vec2(1,2)) + .069675*i(p+vec2(2,2)) + .034031*i(p+vec2(3,2)) + .030123*i(p+vec2(4,2)) + .021665*i(p+vec2(0,3)) - .060047*i(p+vec2(1,3)) - .090843*i(p+vec2(2,3)) + .005910*i(p+vec2(3,3)) + .192376*i(p+vec2(4,3)) - .167963*i(p+vec2(0,4)) - .160012*i(p+vec2(1,4)) - .120027*i(p+vec2(2,4)) + .010712*i(p+vec2(3,4)) + .100215*i(p+vec2(4,4)) ;\n            x +=  .031789*i(p+vec2(12,0)) + .080503*i(p+vec2(13,0)) + .040288*i(p+vec2(14,0)) + .009264*i(p+vec2(15,0)) + .049026*i(p+vec2(16,0)) + .095390*i(p+vec2(12,1)) + .100852*i(p+vec2(13,1)) + .003961*i(p+vec2(14,1)) - .014274*i(p+vec2(15,1)) - .038138*i(p+vec2(16,1)) + .061696*i(p+vec2(12,2)) + .101006*i(p+vec2(13,2)) + .027643*i(p+vec2(14,2)) - .047844*i(p+vec2(15,2)) - .048016*i(p+vec2(16,2)) - .077837*i(p+vec2(12,3)) - .095082*i(p+vec2(13,3)) - .145615*i(p+vec2(14,3)) - .099213*i(p+vec2(15,3)) - .044476*i(p+vec2(16,3)) - .134099*i(p+vec2(12,4)) - .114614*i(p+vec2(13,4)) - .105741*i(p+vec2(14,4)) - .051032*i(p+vec2(15,4)) + .076231*i(p+vec2(16,4)) ;\n            x += -.033284*i(p+vec2(24,0)) - .048057*i(p+vec2(25,0)) - .050669*i(p+vec2(26,0)) - .023352*i(p+vec2(27,0)) - .044807*i(p+vec2(28,0)) - .032219*i(p+vec2(24,1)) - .009562*i(p+vec2(25,1)) + .003693*i(p+vec2(26,1)) + .044597*i(p+vec2(27,1)) + .040209*i(p+vec2(28,1)) - .022571*i(p+vec2(24,2)) - .045959*i(p+vec2(25,2)) - .114624*i(p+vec2(26,2)) - .064666*i(p+vec2(27,2)) - .033394*i(p+vec2(28,2)) - .060179*i(p+vec2(24,3)) - .132713*i(p+vec2(25,3)) - .120706*i(p+vec2(26,3)) - .112588*i(p+vec2(27,3)) - .064358*i(p+vec2(28,3)) - .137772*i(p+vec2(24,4)) - .115105*i(p+vec2(25,4)) - .073647*i(p+vec2(26,4)) - .000281*i(p+vec2(27,4)) + .030574*i(p+vec2(28,4)) ;\n            x += -.118146*i(p+vec2(36,0)) - .095420*i(p+vec2(37,0)) - .058021*i(p+vec2(38,0)) - .016661*i(p+vec2(39,0)) - .014902*i(p+vec2(40,0)) + .040134*i(p+vec2(36,1)) + .011013*i(p+vec2(37,1)) + .116889*i(p+vec2(38,1)) + .098456*i(p+vec2(39,1)) + .146382*i(p+vec2(40,1)) + .115527*i(p+vec2(36,2)) + .098948*i(p+vec2(37,2)) + .132890*i(p+vec2(38,2)) + .074907*i(p+vec2(39,2)) + .059989*i(p+vec2(40,2)) + .067840*i(p+vec2(36,3)) - .003165*i(p+vec2(37,3)) + .103561*i(p+vec2(38,3)) + .104807*i(p+vec2(39,3)) + .111656*i(p+vec2(40,3)) + .156925*i(p+vec2(36,4)) + .045268*i(p+vec2(37,4)) + .018593*i(p+vec2(38,4)) - .069436*i(p+vec2(39,4)) - .049523*i(p+vec2(40,4)) ;\n            x +=  .011728*i(p+vec2(48,0)) + .040852*i(p+vec2(49,0)) + .000240*i(p+vec2(50,0)) - .038427*i(p+vec2(51,0)) - .041976*i(p+vec2(52,0)) - .004255*i(p+vec2(48,1)) + .019583*i(p+vec2(49,1)) + .026010*i(p+vec2(50,1)) + .004745*i(p+vec2(51,1)) - .038317*i(p+vec2(52,1)) + .002854*i(p+vec2(48,2)) - .036712*i(p+vec2(49,2)) + .026922*i(p+vec2(50,2)) - .005803*i(p+vec2(51,2)) - .110613*i(p+vec2(52,2)) - .035845*i(p+vec2(48,3)) + .022496*i(p+vec2(49,3)) - .012490*i(p+vec2(50,3)) - .087088*i(p+vec2(51,3)) - .068759*i(p+vec2(52,3)) - .026644*i(p+vec2(48,4)) - .063738*i(p+vec2(49,4)) - .021046*i(p+vec2(50,4)) - .010263*i(p+vec2(51,4)) - .051859*i(p+vec2(52,4)) ;\n            x +=  .110702*i(p+vec2(60,0)) + .117118*i(p+vec2(61,0)) + .138851*i(p+vec2(62,0)) + .014485*i(p+vec2(63,0)) - .029469*i(p+vec2(64,0)) + .102581*i(p+vec2(60,1)) + .112743*i(p+vec2(61,1)) + .125491*i(p+vec2(62,1)) + .069034*i(p+vec2(63,1)) + .028476*i(p+vec2(64,1)) + .019210*i(p+vec2(60,2)) - .007038*i(p+vec2(61,2)) - .054246*i(p+vec2(62,2)) - .028243*i(p+vec2(63,2)) - .069148*i(p+vec2(64,2)) + .042524*i(p+vec2(60,3)) - .052357*i(p+vec2(61,3)) - .005603*i(p+vec2(62,3)) - .055190*i(p+vec2(63,3)) - .034142*i(p+vec2(64,3)) - .022592*i(p+vec2(60,4)) + .026197*i(p+vec2(61,4)) + .019640*i(p+vec2(62,4)) - .063740*i(p+vec2(63,4)) + .017314*i(p+vec2(64,4)) ;\n            x +=  .003538*i(p+vec2(72,0)) - .035311*i(p+vec2(73,0)) - .035084*i(p+vec2(74,0)) - .022011*i(p+vec2(75,0)) - .042928*i(p+vec2(76,0)) - .008708*i(p+vec2(72,1)) + .019993*i(p+vec2(73,1)) - .008411*i(p+vec2(74,1)) - .053142*i(p+vec2(75,1)) - .093495*i(p+vec2(76,1)) - .087310*i(p+vec2(72,2)) - .042563*i(p+vec2(73,2)) - .083762*i(p+vec2(74,2)) - .084108*i(p+vec2(75,2)) - .095313*i(p+vec2(76,2)) - .109650*i(p+vec2(72,3)) - .156403*i(p+vec2(73,3)) - .100507*i(p+vec2(74,3)) - .030987*i(p+vec2(75,3)) - .052391*i(p+vec2(76,3)) - .115120*i(p+vec2(72,4)) - .115170*i(p+vec2(73,4)) + .005497*i(p+vec2(74,4)) + .009972*i(p+vec2(75,4)) + .064793*i(p+vec2(76,4)) ;\n            x += -.029818*i(p+vec2(84,0)) - .073513*i(p+vec2(85,0)) - .021365*i(p+vec2(86,0)) + .038191*i(p+vec2(87,0)) - .053594*i(p+vec2(88,0)) + .001866*i(p+vec2(84,1)) - .106707*i(p+vec2(85,1)) - .135535*i(p+vec2(86,1)) - .090814*i(p+vec2(87,1)) + .005511*i(p+vec2(88,1)) - .072168*i(p+vec2(84,2)) - .092473*i(p+vec2(85,2)) + .030897*i(p+vec2(86,2)) + .044974*i(p+vec2(87,2)) + .017658*i(p+vec2(88,2)) + .098985*i(p+vec2(84,3)) + .078218*i(p+vec2(85,3)) + .025579*i(p+vec2(86,3)) + .027096*i(p+vec2(87,3)) + .056002*i(p+vec2(88,3)) + .109690*i(p+vec2(84,4)) + .114611*i(p+vec2(85,4)) + .064988*i(p+vec2(86,4)) + .029201*i(p+vec2(87,4)) - .029181*i(p+vec2(88,4)) + .044618;\n        }\n        else if (fmap == 3) {\n            x = -.065041*i(p+vec2(0,0)) - .044827*i(p+vec2(1,0)) - .045408*i(p+vec2(2,0)) - .027479*i(p+vec2(3,0)) - .016581*i(p+vec2(4,0)) - .113267*i(p+vec2(0,1)) - .034325*i(p+vec2(1,1)) - .067802*i(p+vec2(2,1)) - .019938*i(p+vec2(3,1)) - .008703*i(p+vec2(4,1)) - .003708*i(p+vec2(0,2)) + .025421*i(p+vec2(1,2)) + .018985*i(p+vec2(2,2)) + .013058*i(p+vec2(3,2)) - .022186*i(p+vec2(4,2)) + .074049*i(p+vec2(0,3)) + .122886*i(p+vec2(1,3)) + .084369*i(p+vec2(2,3)) + .107888*i(p+vec2(3,3)) + .004665*i(p+vec2(4,3)) + .177412*i(p+vec2(0,4)) + .168101*i(p+vec2(1,4)) + .157727*i(p+vec2(2,4)) + .035967*i(p+vec2(3,4)) - .169895*i(p+vec2(4,4)) ;\n            x +=  .094543*i(p+vec2(12,0)) + .121074*i(p+vec2(13,0)) + .071699*i(p+vec2(14,0)) + .048749*i(p+vec2(15,0)) + .077483*i(p+vec2(16,0)) + .050495*i(p+vec2(12,1)) + .062031*i(p+vec2(13,1)) + .092835*i(p+vec2(14,1)) + .042366*i(p+vec2(15,1)) - .018972*i(p+vec2(16,1)) + .031505*i(p+vec2(12,2)) + .065801*i(p+vec2(13,2)) + .005604*i(p+vec2(14,2)) - .043289*i(p+vec2(15,2)) - .050872*i(p+vec2(16,2)) - .012502*i(p+vec2(12,3)) + .039254*i(p+vec2(13,3)) + .035616*i(p+vec2(14,3)) - .093267*i(p+vec2(15,3)) - .114860*i(p+vec2(16,3)) + .109167*i(p+vec2(12,4)) + .041145*i(p+vec2(13,4)) + .025472*i(p+vec2(14,4)) - .034760*i(p+vec2(15,4)) - .068790*i(p+vec2(16,4)) ;\n            x +=  .074297*i(p+vec2(24,0)) + .107164*i(p+vec2(25,0)) + .038573*i(p+vec2(26,0)) + .018497*i(p+vec2(27,0)) - .066989*i(p+vec2(28,0)) + .045576*i(p+vec2(24,1)) + .043657*i(p+vec2(25,1)) + .064087*i(p+vec2(26,1)) + .037835*i(p+vec2(27,1)) - .016352*i(p+vec2(28,1)) - .004218*i(p+vec2(24,2)) + .015408*i(p+vec2(25,2)) + .042173*i(p+vec2(26,2)) + .078353*i(p+vec2(27,2)) + .014127*i(p+vec2(28,2)) + .021499*i(p+vec2(24,3)) - .003591*i(p+vec2(25,3)) + .021562*i(p+vec2(26,3)) + .030094*i(p+vec2(27,3)) - .077727*i(p+vec2(28,3)) - .043636*i(p+vec2(24,4)) - .038942*i(p+vec2(25,4)) + .041748*i(p+vec2(26,4)) + .021877*i(p+vec2(27,4)) - .089420*i(p+vec2(28,4)) ;\n            x += -.025842*i(p+vec2(36,0)) - .024335*i(p+vec2(37,0)) - .034287*i(p+vec2(38,0)) - .035360*i(p+vec2(39,0)) + .001802*i(p+vec2(40,0)) + .018795*i(p+vec2(36,1)) + .002706*i(p+vec2(37,1)) - .062916*i(p+vec2(38,1)) - .121407*i(p+vec2(39,1)) - .060586*i(p+vec2(40,1)) - .051345*i(p+vec2(36,2)) - .001345*i(p+vec2(37,2)) - .131490*i(p+vec2(38,2)) - .040997*i(p+vec2(39,2)) - .003273*i(p+vec2(40,2)) - .048635*i(p+vec2(36,3)) + .047884*i(p+vec2(37,3)) + .027771*i(p+vec2(38,3)) + .022292*i(p+vec2(39,3)) + .015396*i(p+vec2(40,3)) - .082129*i(p+vec2(36,4)) + .025646*i(p+vec2(37,4)) + .064377*i(p+vec2(38,4)) + .022169*i(p+vec2(39,4)) + .098010*i(p+vec2(40,4)) ;\n            x +=  .023513*i(p+vec2(48,0)) + .081035*i(p+vec2(49,0)) + .050733*i(p+vec2(50,0)) + .038003*i(p+vec2(51,0)) - .023454*i(p+vec2(52,0)) + .021369*i(p+vec2(48,1)) + .075130*i(p+vec2(49,1)) + .023919*i(p+vec2(50,1)) + .010114*i(p+vec2(51,1)) - .046117*i(p+vec2(52,1)) + .038494*i(p+vec2(48,2)) + .071608*i(p+vec2(49,2)) + .054695*i(p+vec2(50,2)) + .017425*i(p+vec2(51,2)) - .019284*i(p+vec2(52,2)) - .024073*i(p+vec2(48,3)) - .025879*i(p+vec2(49,3)) - .032753*i(p+vec2(50,3)) - .007604*i(p+vec2(51,3)) - .005919*i(p+vec2(52,3)) - .022793*i(p+vec2(48,4)) - .027887*i(p+vec2(49,4)) + .023217*i(p+vec2(50,4)) + .056594*i(p+vec2(51,4)) - .005012*i(p+vec2(52,4)) ;\n            x +=  .145032*i(p+vec2(60,0)) + .115085*i(p+vec2(61,0)) + .068654*i(p+vec2(62,0)) - .015920*i(p+vec2(63,0)) + .008778*i(p+vec2(64,0)) + .137004*i(p+vec2(60,1)) + .114580*i(p+vec2(61,1)) + .112755*i(p+vec2(62,1)) - .015727*i(p+vec2(63,1)) - .019876*i(p+vec2(64,1)) + .114773*i(p+vec2(60,2)) + .001262*i(p+vec2(61,2)) - .060381*i(p+vec2(62,2)) - .203856*i(p+vec2(63,2)) - .173244*i(p+vec2(64,2)) - .027702*i(p+vec2(60,3)) - .130193*i(p+vec2(61,3)) - .220279*i(p+vec2(62,3)) - .297398*i(p+vec2(63,3)) - .198849*i(p+vec2(64,3)) + .036194*i(p+vec2(60,4)) - .086494*i(p+vec2(61,4)) - .231162*i(p+vec2(62,4)) - .261053*i(p+vec2(63,4)) - .139979*i(p+vec2(64,4)) ;\n            x +=  .051161*i(p+vec2(72,0)) + .028729*i(p+vec2(73,0)) + .026783*i(p+vec2(74,0)) + .109775*i(p+vec2(75,0)) + .048805*i(p+vec2(76,0)) - .032467*i(p+vec2(72,1)) - .027144*i(p+vec2(73,1)) + .034998*i(p+vec2(74,1)) + .090104*i(p+vec2(75,1)) + .017593*i(p+vec2(76,1)) - .070456*i(p+vec2(72,2)) - .112503*i(p+vec2(73,2)) - .021751*i(p+vec2(74,2)) + .052960*i(p+vec2(75,2)) - .030093*i(p+vec2(76,2)) + .041898*i(p+vec2(72,3)) - .083327*i(p+vec2(73,3)) - .084202*i(p+vec2(74,3)) - .028898*i(p+vec2(75,3)) - .085812*i(p+vec2(76,3)) + .006779*i(p+vec2(72,4)) - .005748*i(p+vec2(73,4)) + .023357*i(p+vec2(74,4)) - .028606*i(p+vec2(75,4)) - .105384*i(p+vec2(76,4)) ;\n            x +=  .077756*i(p+vec2(84,0)) - .054394*i(p+vec2(85,0)) - .055692*i(p+vec2(86,0)) - .035044*i(p+vec2(87,0)) - .019320*i(p+vec2(88,0)) + .055786*i(p+vec2(84,1)) + .011287*i(p+vec2(85,1)) - .020608*i(p+vec2(86,1)) - .057911*i(p+vec2(87,1)) - .028529*i(p+vec2(88,1)) + .066594*i(p+vec2(84,2)) + .144801*i(p+vec2(85,2)) + .038596*i(p+vec2(86,2)) + .021778*i(p+vec2(87,2)) + .012389*i(p+vec2(88,2)) + .015986*i(p+vec2(84,3)) + .062553*i(p+vec2(85,3)) + .152408*i(p+vec2(86,3)) + .034392*i(p+vec2(87,3)) + .143995*i(p+vec2(88,3)) - .057195*i(p+vec2(84,4)) - .097240*i(p+vec2(85,4)) + .051983*i(p+vec2(86,4)) + .045353*i(p+vec2(87,4)) + .025535*i(p+vec2(88,4)) + .005539;\n        }\n        else if (fmap == 4) {\n            x = -.151024*i(p+vec2(0,0)) - .085353*i(p+vec2(1,0)) - .020371*i(p+vec2(2,0)) + .038760*i(p+vec2(3,0)) - .017698*i(p+vec2(4,0)) - .146046*i(p+vec2(0,1)) - .083711*i(p+vec2(1,1)) - .046654*i(p+vec2(2,1)) + .045819*i(p+vec2(3,1)) + .086094*i(p+vec2(4,1)) - .099861*i(p+vec2(0,2)) - .173572*i(p+vec2(1,2)) - .204014*i(p+vec2(2,2)) - .150274*i(p+vec2(3,2)) - .153582*i(p+vec2(4,2)) - .139883*i(p+vec2(0,3)) - .050268*i(p+vec2(1,3)) + .151440*i(p+vec2(2,3)) + .127305*i(p+vec2(3,3)) - .059448*i(p+vec2(4,3)) - .017022*i(p+vec2(0,4)) + .141502*i(p+vec2(1,4)) + .131710*i(p+vec2(2,4)) + .131854*i(p+vec2(3,4)) + .132665*i(p+vec2(4,4)) ;\n            x +=  .028596*i(p+vec2(12,0)) + .001047*i(p+vec2(13,0)) - .036430*i(p+vec2(14,0)) - .042759*i(p+vec2(15,0)) - .047757*i(p+vec2(16,0)) + .008165*i(p+vec2(12,1)) - .015975*i(p+vec2(13,1)) - .116590*i(p+vec2(14,1)) - .035810*i(p+vec2(15,1)) - .025485*i(p+vec2(16,1)) - .116234*i(p+vec2(12,2)) - .083054*i(p+vec2(13,2)) - .144707*i(p+vec2(14,2)) - .098301*i(p+vec2(15,2)) - .066349*i(p+vec2(16,2)) - .088110*i(p+vec2(12,3)) - .064091*i(p+vec2(13,3)) - .054771*i(p+vec2(14,3)) + .074695*i(p+vec2(15,3)) + .067527*i(p+vec2(16,3)) - .006192*i(p+vec2(12,4)) + .032544*i(p+vec2(13,4)) + .078078*i(p+vec2(14,4)) + .200340*i(p+vec2(15,4)) + .234686*i(p+vec2(16,4)) ;\n            x +=  .113024*i(p+vec2(24,0)) + .110267*i(p+vec2(25,0)) + .063846*i(p+vec2(26,0)) + .049881*i(p+vec2(27,0)) + .009695*i(p+vec2(28,0)) + .100619*i(p+vec2(24,1)) + .063978*i(p+vec2(25,1)) + .018875*i(p+vec2(26,1)) + .029239*i(p+vec2(27,1)) + .006424*i(p+vec2(28,1)) - .139673*i(p+vec2(24,2)) - .104241*i(p+vec2(25,2)) - .064975*i(p+vec2(26,2)) - .035013*i(p+vec2(27,2)) - .037164*i(p+vec2(28,2)) - .241233*i(p+vec2(24,3)) - .229522*i(p+vec2(25,3)) - .180526*i(p+vec2(26,3)) - .114720*i(p+vec2(27,3)) - .077498*i(p+vec2(28,3)) - .180585*i(p+vec2(24,4)) - .059412*i(p+vec2(25,4)) - .062612*i(p+vec2(26,4)) + .002683*i(p+vec2(27,4)) + .002933*i(p+vec2(28,4)) ;\n            x +=  .025844*i(p+vec2(36,0)) - .008108*i(p+vec2(37,0)) + .030224*i(p+vec2(38,0)) + .084082*i(p+vec2(39,0)) - .035616*i(p+vec2(40,0)) + .042340*i(p+vec2(36,1)) - .088508*i(p+vec2(37,1)) - .012998*i(p+vec2(38,1)) + .068494*i(p+vec2(39,1)) + .095155*i(p+vec2(40,1)) + .089146*i(p+vec2(36,2)) + .034854*i(p+vec2(37,2)) + .112012*i(p+vec2(38,2)) + .107305*i(p+vec2(39,2)) + .146836*i(p+vec2(40,2)) + .077914*i(p+vec2(36,3)) + .031680*i(p+vec2(37,3)) + .100960*i(p+vec2(38,3)) + .038912*i(p+vec2(39,3)) - .046642*i(p+vec2(40,3)) - .052792*i(p+vec2(36,4)) - .119617*i(p+vec2(37,4)) + .066024*i(p+vec2(38,4)) + .048530*i(p+vec2(39,4)) - .066909*i(p+vec2(40,4)) ;\n            x +=  .132893*i(p+vec2(48,0)) + .075638*i(p+vec2(49,0)) - .040484*i(p+vec2(50,0)) - .002135*i(p+vec2(51,0)) - .011319*i(p+vec2(52,0)) + .073798*i(p+vec2(48,1)) - .033863*i(p+vec2(49,1)) + .013071*i(p+vec2(50,1)) - .068327*i(p+vec2(51,1)) - .034962*i(p+vec2(52,1)) - .018041*i(p+vec2(48,2)) + .051831*i(p+vec2(49,2)) - .003209*i(p+vec2(50,2)) + .045083*i(p+vec2(51,2)) - .023776*i(p+vec2(52,2)) - .010383*i(p+vec2(48,3)) - .048997*i(p+vec2(49,3)) - .023641*i(p+vec2(50,3)) - .003945*i(p+vec2(51,3)) + .008028*i(p+vec2(52,3)) - .041111*i(p+vec2(48,4)) + .000938*i(p+vec2(49,4)) - .051027*i(p+vec2(50,4)) - .017615*i(p+vec2(51,4)) + .055404*i(p+vec2(52,4)) ;\n            x += -.004129*i(p+vec2(60,0)) - .031338*i(p+vec2(61,0)) - .051943*i(p+vec2(62,0)) - .041951*i(p+vec2(63,0)) - .032597*i(p+vec2(64,0)) - .048305*i(p+vec2(60,1)) - .066592*i(p+vec2(61,1)) - .038255*i(p+vec2(62,1)) - .064113*i(p+vec2(63,1)) + .055801*i(p+vec2(64,1)) - .074688*i(p+vec2(60,2)) - .049016*i(p+vec2(61,2)) + .044922*i(p+vec2(62,2)) + .068887*i(p+vec2(63,2)) + .146106*i(p+vec2(64,2)) + .030208*i(p+vec2(60,3)) - .076818*i(p+vec2(61,3)) + .027783*i(p+vec2(62,3)) + .140470*i(p+vec2(63,3)) + .144964*i(p+vec2(64,3)) + .049108*i(p+vec2(60,4)) + .020163*i(p+vec2(61,4)) + .121420*i(p+vec2(62,4)) + .205076*i(p+vec2(63,4)) + .226896*i(p+vec2(64,4)) ;\n            x +=  .091393*i(p+vec2(72,0)) + .126330*i(p+vec2(73,0)) + .095413*i(p+vec2(74,0)) - .014538*i(p+vec2(75,0)) - .030099*i(p+vec2(76,0)) + .013168*i(p+vec2(72,1)) + .041257*i(p+vec2(73,1)) + .029750*i(p+vec2(74,1)) + .073070*i(p+vec2(75,1)) - .086262*i(p+vec2(76,1)) - .078126*i(p+vec2(72,2)) - .132817*i(p+vec2(73,2)) - .086798*i(p+vec2(74,2)) - .036953*i(p+vec2(75,2)) - .040775*i(p+vec2(76,2)) - .191780*i(p+vec2(72,3)) - .112947*i(p+vec2(73,3)) - .109343*i(p+vec2(74,3)) - .150807*i(p+vec2(75,3)) - .148036*i(p+vec2(76,3)) - .017872*i(p+vec2(72,4)) - .029193*i(p+vec2(73,4)) - .024341*i(p+vec2(74,4)) + .008525*i(p+vec2(75,4)) - .054663*i(p+vec2(76,4)) ;\n            x += -.080706*i(p+vec2(84,0)) - .014936*i(p+vec2(85,0)) + .009476*i(p+vec2(86,0)) + .022717*i(p+vec2(87,0)) + .089186*i(p+vec2(88,0)) - .055918*i(p+vec2(84,1)) + .047336*i(p+vec2(85,1)) + .101627*i(p+vec2(86,1)) + .111755*i(p+vec2(87,1)) + .058078*i(p+vec2(88,1)) + .085592*i(p+vec2(84,2)) + .116362*i(p+vec2(85,2)) + .077001*i(p+vec2(86,2)) + .119588*i(p+vec2(87,2)) + .047873*i(p+vec2(88,2)) + .111052*i(p+vec2(84,3)) + .068810*i(p+vec2(85,3)) + .062873*i(p+vec2(86,3)) + .089996*i(p+vec2(87,3)) + .017395*i(p+vec2(88,3)) - .049681*i(p+vec2(84,4)) - .073608*i(p+vec2(85,4)) - .052349*i(p+vec2(86,4)) - .055716*i(p+vec2(87,4)) - .013794*i(p+vec2(88,4)) - .083093;\n        }\n        \n        //x = max(0., x);\n        col = vec3(x);\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R              (iResolution.xy)\n#define iAspect        (iResolution.x/iResolution.y)\n\n// Input image dimension (28*28 = 784 input nodes)\n#define input_res      28.\n\n// Number of feature maps in the first layer\n#define feature_maps_1 8.\n\n// Number of feature maps in the second layer\n#define feature_maps_2 5.\n\n// Number of output nodes (10 digits: 0-9)\n#define num_classes    10.\n\n// Mean and variance that was used to normalize the input dataset\n#define mean           0.1307\n#define std            0.3081\n\n// Quick hack to display text easily\n#define print float d = 0.; (0\n#define _end  ); return d;\n#define _     ); u.x -= .4; d += char(u, \n#define _sp   ); u.x -= .4; (0\n#define _dig(i) _ vec2(i,12)\n#define _dd _ vec2(10, 12)\n#define _C _ vec2(3, 11)\n#define _F _ vec2(6,11)\n#define _H _ vec2(8,11)\n#define _I _ vec2(9,11)\n#define _L _ vec2(12,11)\n#define _M _ vec2(13,11)\n#define _O _ vec2(15,11)\n#define _P _ vec2(0,10)\n#define _a _ vec2(1,9)\n#define _c _ vec2(3,9)\n#define _d _ vec2(4,9)\n#define _e _ vec2(5,9)\n#define _f _ vec2(6,9)\n#define _g _ vec2(7,9)\n#define _i _ vec2(9)\n#define _l _ vec2(12,9)\n#define _n _ vec2(14,9)\n#define _o _ vec2(15,9)\n#define _p _ vec2(0,8)\n#define _r _ vec2(2,8)\n#define _s _ vec2(3,8)\n#define _t _ vec2(4,8)\n#define _u _ vec2(5,8)\n#define _v _ vec2(6,8)\n#define _x _ vec2(8)\n#define _y _ vec2(9,8)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/* This buffer acts as the fully connected layer and is responsible\n   for the output node calculations (predictions)\n*/\n\nfloat i(int x, int y) {\n    return texelFetch(iChannel0, ivec2(x,y), 0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / R;\n    vec3 col = vec3(0);\n\n    ivec2 F = ivec2(fragCoord - .5);\n    \n    if (F.x < int(num_classes)  && F.y == 0) {        \n        float x;\n        \n        // Each if/else correspond to an output node (classes predictions)\n        if (F.x == 0) x = -.075143*i(0,0) - .056622*i(1,0) - .121313*i(2,0) + .038140*i(3,0) + .107850*i(0,1) + .188001*i(1,1) + .055559*i(2,1) - .006876*i(3,1) + .001238*i(0,2) + .081469*i(1,2) + .061499*i(2,2) - .014917*i(3,2) + .090366*i(0,3) - .058191*i(1,3) + .039274*i(2,3) - .097306*i(3,3) + .152312*i(4,0) - .003635*i(5,0) + .084143*i(6,0) + .125680*i(7,0) + .092808*i(4,1) - .042792*i(5,1) - .217296*i(6,1) - .008191*i(7,1) - .016148*i(4,2) + .040513*i(5,2) - .097174*i(6,2) - .288848*i(7,2) - .039060*i(4,3) + .055375*i(5,3) + .026479*i(6,3) - .100895*i(7,3) - .080106*i(8,0) + .108912*i(9,0) + .155070*i(10,0) + .070415*i(11,0) - .210549*i(8,1) - .061629*i(9,1) + .051988*i(10,1) - .081011*i(11,1) - .035969*i(8,2) - .020141*i(9,2) - .061554*i(10,2) + .046853*i(11,2) - .003657*i(8,3) + .052620*i(9,3) + .024415*i(10,3) + .029756*i(11,3) + .145766*i(12,0) - .123348*i(13,0) - .211711*i(14,0) - .090868*i(15,0) + .052405*i(12,1) - .168870*i(13,1) + .045629*i(14,1) + .150798*i(15,1) - .015225*i(12,2) + .010330*i(13,2) + .044918*i(14,2) + .157409*i(15,2) - .025917*i(12,3) + .003875*i(13,3) + .003508*i(14,3) + .108845*i(15,3) - .289601*i(16,0) + .004226*i(17,0) - .055828*i(18,0) - .068674*i(19,0) - .291888*i(16,1) + .052395*i(17,1) + .014539*i(18,1) - .073194*i(19,1) - .017768*i(16,2) - .024752*i(17,2) + .010479*i(18,2) - .106618*i(19,2) + .088511*i(16,3) + .022097*i(17,3) + .028473*i(18,3) + .014830*i(19,3) + .053830;\n        else if (F.x == 1) x =  .118176*i(0,0) + .307418*i(1,0) + .035010*i(2,0) - .127493*i(3,0) + .127779*i(0,1) + .149029*i(1,1) + .094610*i(2,1) - .073976*i(3,1) + .010956*i(0,2) + .078971*i(1,2) + .082320*i(2,2) + .008612*i(3,2) + .076737*i(0,3) + .168552*i(1,3) + .186871*i(2,3) - .035339*i(3,3) - .015820*i(4,0) + .036516*i(5,0) - .146051*i(6,0) - .180930*i(7,0) - .170593*i(4,1) - .077640*i(5,1) + .025629*i(6,1) - .123664*i(7,1) - .165897*i(4,2) - .227003*i(5,2) - .072458*i(6,2) - .017666*i(7,2) - .102989*i(4,3) - .030075*i(5,3) - .088207*i(6,3) + .055515*i(7,3) + .137357*i(8,0) + .228489*i(9,0) + .022315*i(10,0) + .254441*i(11,0) - .020429*i(8,1) + .017245*i(9,1) - .087207*i(10,1) + .008994*i(11,1) + .023044*i(8,2) + .044528*i(9,2) + .069337*i(10,2) - .039198*i(11,2) + .076846*i(8,3) - .057162*i(9,3) - .143618*i(10,3) - .169474*i(11,3) - .177619*i(12,0) + .025151*i(13,0) + .033428*i(14,0) - .101687*i(15,0) - .147556*i(12,1) + .020280*i(13,1) - .051744*i(14,1) - .066299*i(15,1) + .011121*i(12,2) + .083689*i(13,2) - .029114*i(14,2) - .205382*i(15,2) + .036833*i(12,3) + .025825*i(13,3) - .043088*i(14,3) - .131485*i(15,3) + .181081*i(16,0) - .172405*i(17,0) - .000713*i(18,0) + .102880*i(19,0) + .141426*i(16,1) + .051331*i(17,1) - .106324*i(18,1) + .047509*i(19,1) + .093582*i(16,2) - .000411*i(17,2) - .079680*i(18,2) - .056620*i(19,2) - .060069*i(16,3) + .054039*i(17,3) - .072068*i(18,3) - .033597*i(19,3) + .074264;\n        else if (F.x == 2) x =  .075104*i(0,0) - .062261*i(1,0) - .243282*i(2,0) - .211665*i(3,0) + .067593*i(0,1) + .049483*i(1,1) + .006165*i(2,1) - .104614*i(3,1) - .070173*i(0,2) + .056063*i(1,2) + .041839*i(2,2) + .022482*i(3,2) - .044319*i(0,3) - .037660*i(1,3) + .098334*i(2,3) + .088488*i(3,3) + .187212*i(4,0) + .098346*i(5,0) + .135175*i(6,0) + .002778*i(7,0) - .002911*i(4,1) + .052746*i(5,1) + .057234*i(6,1) + .060808*i(7,1) - .081446*i(4,2) - .102199*i(5,2) - .116797*i(6,2) + .039287*i(7,2) + .031106*i(4,3) + .081425*i(5,3) - .057470*i(6,3) - .228619*i(7,3) - .065109*i(8,0) - .080685*i(9,0) + .095244*i(10,0) + .107105*i(11,0) + .127165*i(8,1) + .022375*i(9,1) + .155364*i(10,1) + .155487*i(11,1) + .190379*i(8,2) + .096634*i(9,2) - .021882*i(10,2) + .098712*i(11,2) + .026928*i(8,3) + .034139*i(9,3) + .019663*i(10,3) - .052137*i(11,3) - .153903*i(12,0) - .100958*i(13,0) + .056287*i(14,0) - .086529*i(15,0) - .207472*i(12,1) - .086102*i(13,1) + .039555*i(14,1) - .094216*i(15,1) - .018086*i(12,2) + .023409*i(13,2) + .064830*i(14,2) + .066338*i(15,2) + .020448*i(12,3) + .145752*i(13,3) + .130498*i(14,3) + .108338*i(15,3) + .000179*i(16,0) - .044342*i(17,0) + .028753*i(18,0) + .132895*i(19,0) + .120966*i(16,1) + .090906*i(17,1) - .047338*i(18,1) - .036944*i(19,1) + .201408*i(16,2) + .132772*i(17,2) + .001545*i(18,2) - .074028*i(19,2) + .065345*i(16,3) + .026543*i(17,3) + .014589*i(18,3) + .012444*i(19,3) + .001615;\n        else if (F.x == 3) x = -.090207*i(0,0) - .089532*i(1,0) + .088258*i(2,0) + .058080*i(3,0) + .064625*i(0,1) - .119222*i(1,1) + .018076*i(2,1) + .064042*i(3,1) - .006809*i(0,2) - .155456*i(1,2) - .149699*i(2,2) - .041605*i(3,2) - .170260*i(0,3) - .177147*i(1,3) + .018428*i(2,3) + .047750*i(3,3) - .046373*i(4,0) - .095485*i(5,0) + .008783*i(6,0) + .175543*i(7,0) - .130315*i(4,1) - .002828*i(5,1) + .037634*i(6,1) - .033963*i(7,1) - .169322*i(4,2) - .005636*i(5,2) + .071235*i(6,2) + .205786*i(7,2) - .126502*i(4,3) - .006692*i(5,3) + .101685*i(6,3) + .008342*i(7,3) + .274166*i(8,0) + .024771*i(9,0) + .013405*i(10,0) + .056795*i(11,0) + .131263*i(8,1) - .104002*i(9,1) - .045315*i(10,1) - .075801*i(11,1) + .045826*i(8,2) - .047754*i(9,2) - .018996*i(10,2) + .083615*i(11,2) + .138966*i(8,3) + .088836*i(9,3) + .012930*i(10,3) + .001248*i(11,3) - .091140*i(12,0) + .022401*i(13,0) + .068219*i(14,0) + .065187*i(15,0) - .133591*i(12,1) - .033201*i(13,1) + .030706*i(14,1) + .058613*i(15,1) - .068666*i(12,2) + .005972*i(13,2) + .027504*i(14,2) - .062614*i(15,2) + .031467*i(12,3) + .142602*i(13,3) + .144359*i(14,3) + .099213*i(15,3) + .154107*i(16,0) + .130326*i(17,0) + .009151*i(18,0) - .029851*i(19,0) + .053593*i(16,1) + .070038*i(17,1) - .052174*i(18,1) + .128651*i(19,1) + .163541*i(16,2) + .085602*i(17,2) - .060960*i(18,2) - .008063*i(19,2) - .071249*i(16,3) - .036413*i(17,3) - .015864*i(18,3) + .027310*i(19,3) - .104617;\n        else if (F.x == 4) x =  .136695*i(0,0) + .182818*i(1,0) + .088052*i(2,0) - .039925*i(3,0) - .075844*i(0,1) - .063367*i(1,1) - .108014*i(2,1) - .018086*i(3,1) - .016628*i(0,2) + .062744*i(1,2) - .095771*i(2,2) + .023198*i(3,2) + .095606*i(0,3) + .207663*i(1,3) + .257984*i(2,3) + .050648*i(3,3) - .120700*i(4,0) - .035294*i(5,0) - .000187*i(6,0) - .263116*i(7,0) + .238731*i(4,1) - .057893*i(5,1) - .049301*i(6,1) + .094419*i(7,1) + .145201*i(4,2) + .049918*i(5,2) + .015038*i(6,2) + .188535*i(7,2) + .033250*i(4,3) + .025587*i(5,3) + .010658*i(6,3) + .094547*i(7,3) - .208576*i(8,0) - .017720*i(9,0) + .027217*i(10,0) - .136156*i(11,0) + .057621*i(8,1) + .095122*i(9,1) + .049686*i(10,1) - .050623*i(11,1) + .057528*i(8,2) + .102234*i(9,2) - .040277*i(10,2) - .056215*i(11,2) - .068852*i(8,3) - .109990*i(9,3) - .117830*i(10,3) - .144675*i(11,3) + .127953*i(12,0) + .057657*i(13,0) + .086862*i(14,0) - .095754*i(15,0) + .144894*i(12,1) + .062875*i(13,1) + .099320*i(14,1) - .072185*i(15,1) + .162736*i(12,2) - .058694*i(13,2) - .002515*i(14,2) - .135430*i(15,2) + .072161*i(12,3) - .046754*i(13,3) - .110878*i(14,3) - .080166*i(15,3) + .154885*i(16,0) + .071826*i(17,0) - .033267*i(18,0) + .041170*i(19,0) - .037779*i(16,1) + .082510*i(17,1) - .084086*i(18,1) - .254560*i(19,1) - .260250*i(16,2) - .118318*i(17,2) - .200516*i(18,2) - .217559*i(19,2) + .004250*i(16,3) + .052013*i(17,3) - .009852*i(18,3) - .003096*i(19,3) + .031150;\n        else if (F.x == 5) x = -.178578*i(0,0) - .033715*i(1,0) + .062495*i(2,0) + .123911*i(3,0) - .079341*i(0,1) + .031328*i(1,1) + .149985*i(2,1) + .108790*i(3,1) + .038392*i(0,2) + .003860*i(1,2) - .044916*i(2,2) - .071479*i(3,2) + .076275*i(0,3) - .004897*i(1,3) - .237388*i(2,3) - .230086*i(3,3) - .031948*i(4,0) - .050418*i(5,0) - .017694*i(6,0) + .111659*i(7,0) - .039834*i(4,1) - .025885*i(5,1) - .176076*i(6,1) - .183601*i(7,1) + .027238*i(4,2) - .043208*i(5,2) - .044587*i(6,2) - .167072*i(7,2) + .077036*i(4,3) + .070081*i(5,3) + .041857*i(6,3) + .004037*i(7,3) + .214419*i(8,0) + .019067*i(9,0) + .095564*i(10,0) + .148249*i(11,0) + .134796*i(8,1) - .039023*i(9,1) + .041526*i(10,1) + .005519*i(11,1) - .112477*i(8,2) + .055217*i(9,2) + .067744*i(10,2) + .044419*i(11,2) - .122010*i(8,3) + .016899*i(9,3) + .044329*i(10,3) + .063331*i(11,3) - .001170*i(12,0) - .028405*i(13,0) + .030677*i(14,0) + .049971*i(15,0) + .042898*i(12,1) - .076075*i(13,1) + .022667*i(14,1) + .100927*i(15,1) + .034227*i(12,2) - .115852*i(13,2) - .045271*i(14,2) - .131120*i(15,2) - .008138*i(12,3) - .096292*i(13,3) - .225341*i(14,3) - .307498*i(15,3) + .201879*i(16,0) + .121726*i(17,0) + .031848*i(18,0) + .067965*i(19,0) + .023252*i(16,1) + .037581*i(17,1) + .023188*i(18,1) + .232835*i(19,1) - .031391*i(16,2) + .004997*i(17,2) + .187920*i(18,2) + .183176*i(19,2) - .064285*i(16,3) - .002638*i(17,3) + .052543*i(18,3) - .082024*i(19,3) - .017540;\n        else if (F.x == 6) x = -.057050*i(0,0) - .134399*i(1,0) - .122724*i(2,0) + .064394*i(3,0) + .152000*i(0,1) + .019556*i(1,1) - .031776*i(2,1) + .052156*i(3,1) + .120772*i(0,2) + .019357*i(1,2) - .115102*i(2,2) - .147379*i(3,2) + .144365*i(0,3) + .184400*i(1,3) + .120577*i(2,3) - .019055*i(3,3) + .079528*i(4,0) + .057769*i(5,0) + .057480*i(6,0) + .174716*i(7,0) + .053453*i(4,1) + .056713*i(5,1) + .046551*i(6,1) + .032610*i(7,1) - .024766*i(4,2) + .009873*i(5,2) + .027833*i(6,2) - .121777*i(7,2) + .013510*i(4,3) + .102499*i(5,3) + .162073*i(6,3) + .072631*i(7,3) - .205622*i(8,0) + .027753*i(9,0) + .091037*i(10,0) + .137706*i(11,0) - .183732*i(8,1) - .047233*i(9,1) + .046830*i(10,1) + .028960*i(11,1) - .140672*i(8,2) - .056614*i(9,2) + .043881*i(10,2) + .193260*i(11,2) - .102161*i(8,3) - .208817*i(9,3) - .029989*i(10,3) - .065135*i(11,3) + .217860*i(12,0) - .006298*i(13,0) - .055235*i(14,0) - .113672*i(15,0) + .057800*i(12,1) - .220906*i(13,1) - .069267*i(14,1) + .140712*i(15,1) - .056603*i(12,2) - .370280*i(13,2) - .220436*i(14,2) + .038400*i(15,2) + .030640*i(12,3) - .147402*i(13,3) - .168191*i(14,3) - .072018*i(15,3) - .313547*i(16,0) - .158284*i(17,0) - .113741*i(18,0) - .166187*i(19,0) - .227553*i(16,1) - .054454*i(17,1) - .016922*i(18,1) + .154416*i(19,1) - .079466*i(16,2) + .002345*i(17,2) + .173209*i(18,2) + .188420*i(19,2) - .089767*i(16,3) - .142408*i(17,3) + .083195*i(18,3) + .138831*i(19,3) + .062103;\n        else if (F.x == 7) x =  .147193*i(0,0) + .231966*i(1,0) + .095020*i(2,0) - .021941*i(3,0) - .015895*i(0,1) + .098792*i(1,1) - .064944*i(2,1) + .028368*i(3,1) - .136790*i(0,2) + .175537*i(1,2) + .016196*i(2,2) - .011436*i(3,2) - .031492*i(0,3) - .118787*i(1,3) - .043338*i(2,3) + .017880*i(3,3) - .221716*i(4,0) - .069914*i(5,0) - .040570*i(6,0) - .206222*i(7,0) - .126974*i(4,1) - .234906*i(5,1) + .035792*i(6,1) + .030831*i(7,1) - .134563*i(4,2) - .213465*i(5,2) + .049959*i(6,2) + .099537*i(7,2) - .079816*i(4,3) - .178674*i(5,3) - .040387*i(6,3) + .037523*i(7,3) - .199892*i(8,0) - .095019*i(9,0) - .164849*i(10,0) - .186725*i(11,0) + .029778*i(8,1) - .013067*i(9,1) - .014325*i(10,1) + .173757*i(11,1) + .129778*i(8,2) + .101528*i(9,2) - .001108*i(10,2) - .035187*i(11,2) + .130584*i(8,3) + .126925*i(9,3) + .099189*i(10,3) + .093081*i(11,3) - .153988*i(12,0) + .038824*i(13,0) - .056654*i(14,0) - .262340*i(15,0) - .112262*i(12,1) - .117450*i(13,1) + .019426*i(14,1) + .059725*i(15,1) + .094022*i(12,2) + .049326*i(13,2) + .097184*i(14,2) + .059849*i(15,2) - .030705*i(12,3) + .048778*i(13,3) + .043639*i(14,3) + .007166*i(15,3) + .163268*i(16,0) - .075866*i(17,0) - .079359*i(18,0) + .009316*i(19,0) + .137176*i(16,1) + .078078*i(17,1) + .059982*i(18,1) - .152829*i(19,1) + .149950*i(16,2) + .121865*i(17,2) + .041333*i(18,2) - .092270*i(19,2) + .027952*i(16,3) + .119484*i(17,3) + .015529*i(18,3) + .022465*i(19,3) + .095845;\n        else if (F.x == 8) x =  .101581*i(0,0) - .153697*i(1,0) + .087488*i(2,0) + .134878*i(3,0) + .058520*i(0,1) - .103262*i(1,1) - .027637*i(2,1) + .025659*i(3,1) + .027267*i(0,2) - .168094*i(1,2) - .074472*i(2,2) - .056747*i(3,2) + .033896*i(0,3) - .106226*i(1,3) - .103624*i(2,3) + .036806*i(3,3) + .270243*i(4,0) + .123119*i(5,0) - .034506*i(6,0) + .101094*i(7,0) - .030633*i(4,1) + .001415*i(5,1) + .058839*i(6,1) + .056024*i(7,1) + .130417*i(4,2) - .075567*i(5,2) + .055068*i(6,2) + .210288*i(7,2) + .208224*i(4,3) + .107936*i(5,3) + .080834*i(6,3) - .075402*i(7,3) - .089749*i(8,0) - .095844*i(9,0) - .007633*i(10,0) + .024116*i(11,0) - .082534*i(8,1) - .040337*i(9,1) - .038216*i(10,1) - .191360*i(11,1) + .058365*i(8,2) - .010573*i(9,2) - .021778*i(10,2) + .023169*i(11,2) - .005684*i(8,3) + .035098*i(9,3) + .000621*i(10,3) + .043171*i(11,3) + .036995*i(12,0) - .024414*i(13,0) - .004137*i(14,0) + .111172*i(15,0) + .171594*i(12,1) + .115655*i(13,1) - .067570*i(14,1) + .011079*i(15,1) + .106235*i(12,2) + .140141*i(13,2) - .012020*i(14,2) + .082657*i(15,2) - .097238*i(12,3) + .019621*i(13,3) + .036329*i(14,3) + .020079*i(15,3) - .133260*i(16,0) - .044889*i(17,0) + .119676*i(18,0) + .152850*i(19,0) - .176713*i(16,1) - .128383*i(17,1) - .056316*i(18,1) + .203849*i(19,1) - .098394*i(16,2) - .037967*i(17,2) + .070011*i(18,2) + .007828*i(19,2) - .077018*i(16,3) - .069563*i(17,3) - .126146*i(18,3) - .001432*i(19,3) - .044117;\n        else if (F.x == 9) x = -.015266*i(0,0) + .220139*i(1,0) + .158281*i(2,0) - .043156*i(3,0) - .140757*i(0,1) - .192276*i(1,1) + .099127*i(2,1) + .100479*i(3,1) + .083019*i(0,2) - .081278*i(1,2) + .040925*i(2,2) + .026422*i(3,2) - .016084*i(0,3) - .155025*i(1,3) - .070794*i(2,3) + .061902*i(3,3) - .219633*i(4,0) - .134163*i(5,0) - .024233*i(6,0) - .090113*i(7,0) + .140044*i(4,1) - .128167*i(5,1) + .021798*i(6,1) - .015829*i(7,1) + .158091*i(4,2) + .027792*i(5,2) - .006498*i(6,2) + .047264*i(7,2) + .129774*i(4,3) + .055528*i(5,3) + .042968*i(6,3) - .199966*i(7,3) + .003728*i(8,0) + .077743*i(9,0) - .039579*i(10,0) - .318130*i(11,0) - .104920*i(8,1) + .012678*i(9,1) + .015643*i(10,1) - .261913*i(11,1) - .115093*i(8,2) - .157660*i(9,2) - .109066*i(10,2) + .067627*i(11,2) - .031246*i(8,3) + .082480*i(9,3) + .064080*i(10,3) + .034145*i(11,3) + .079449*i(12,0) + .015166*i(13,0) + .038041*i(14,0) - .036254*i(15,0) + .080809*i(12,1) + .096782*i(13,1) + .078773*i(14,1) - .034160*i(15,1) - .155258*i(12,2) + .041642*i(13,2) + .051072*i(14,2) + .096575*i(15,2) - .323720*i(12,3) - .105083*i(13,3) + .060075*i(14,3) + .020082*i(15,3) + .161809*i(16,0) + .179472*i(17,0) - .093735*i(18,0) - .048794*i(19,0) - .066893*i(16,1) + .111825*i(17,1) - .136923*i(18,1) - .050122*i(19,1) - .233065*i(16,2) - .025723*i(17,2) + .110846*i(18,2) + .062413*i(19,2) - .007978*i(16,3) + .001238*i(17,3) - .011578*i(18,3) + .110131*i(19,3) + .050840;\n\n        col = vec3(x);\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}