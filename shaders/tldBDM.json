{
    "Shader": {
        "info": {
            "date": "1612886920",
            "description": "Blue noise by mutually-repulsing Worley dots.\n- Red: Worley dots    \n- Blue: average of 8 neighbor dots\n- Green: mouse.x interpolate between\nIndeed, 100% average (=blue) is too ordered for blue noise ! best=50%.  Or better (and cheaper) on triangle grid ?",
            "flags": 32,
            "hasliked": 0,
            "id": "tldBDM",
            "likes": 6,
            "name": "Worley blue noise spectrum",
            "published": 3,
            "tags": [
                "worley",
                "sampling",
                "bluenoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// reuse workbench of \"3 Sub-Samples Pattern Spectrum\" by TinyTexel. https://shadertoy.com/view/WltfDM\n// on buffA: my Worley \"blue noise\" https://www.shadertoy.com/view/3ldfD7\n\nvoid mainImage(out vec4 outCol, in vec2 uv0)\n{\n    float b = (iResolution.y - SIZE)*0.5;\n    \n    if(uv0.y < b || uv0.y > iResolution.y-b) { outCol = vec4(0.11); return; }\n    \n    uv0.y -= b;\n    \n    vec2 tc = uv0/iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    \n    if (tc.x > 0.5)\n    {\n        // spectrum 2d plot\n        vec2 dft = texelFetch(iChannel1, ivec2(uv0-0.5-vec2(SIZE,0.0)), 0).xy;\n        \n        float amp = length(dft); \n        \n        float s = 0.01;\n        amp *= s;\n        \n        col = vec3(amp);\n\n        if(amp <= exp2(-13.0)) col = vec3(1.0, 0.0, 0.0)*0.25;\n        if(amp <= exp2(-16.0)) col = vec3(1.0, 0.5, 0.0)*0.25;\n        \n        col = clamp01(col);\n    }\t\n    else\n    {\n        // kernel 2d plot\n        float n = textureLod(iChannel0, tc, 0.).r;\n        col = vec3(abs(n));\n        if(n < 0.0) col *= vec3(1.0, 0., 0.0);\n        \n        col = pow(clamp01(col), vec3(1.0/2.2));\n    }\n    \n\n    outCol = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n  #define SIZE (floor(iResolution.y/2.25)*2.)\n\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\n\nvec2 cossin(float x) { return vec2(cos(x), sin(x)); }\n\nvec2 cmul(vec2 c0, vec2 c1)\n{\n\treturn vec2(c0.x * c1.x - c0.y * c1.y, \n\t\t        c0.y * c1.x + c0.x * c1.y);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\n\n\nvec4 Worley0(vec2 U) {\n    vec2 I = floor(U), P,I1,N;\n    \n    float m = 1e5, l;\n    int k,c;\n    for ( k=0; k<9; k++) {\n        I1 = I + vec2(k%3,k/3)-1.;   \n        P = I1 + hash2(I1)-.5;                      // random dot in the current neighbor cell\n        l = dot(P-U,P-U);\n        if (l<m)  m=l, c=k, N=P;\n      }\n    return vec4(m, N, k);                           // closest point, its coordinates, its local id\n}\n\n\nvec4 Worley(vec2 U, float a) {\n    vec2 I = floor(U), P,P0, N, I1,I2;\n    \n    float m = 1e5, l;\n    int k,c;\n    for ( k=0; k<9; k++) {\n        I1 = I + vec2(k%3,k/3)-1.;\n#if 0                                               // classical Worley:\n        P = I1 + hash2(I1)-.5;                      // random dot in the current neighbor cell\n#else\n        P-=P;                                       // averaged Worley:\n        for (int j=0; j<9; j += j==3?2:1 ) {\n            I2 = I1+vec2(j%3,j/3)-1.;\n            P += I2 +hash2(I2)-.5;                  // dot = average neighbor random dots\n        }\n        P /= 8.;\n#  if 1    \n        P0 = I1 + hash2(I1)-.5;\n     // P = mix( P0, P,  a);                        // interpolates between both.\n        P = P0  + a*( P - P0 );                     // neighbors apply force a ( equivalent !)\n     // P = P0  + a*( P - P0 )*smoothstep(1.,0.,length(P-P0)); // increasing force. best seems 50%\n     // P = P0  + a*( P - P0 )*smoothstep(0.,1.,length(P-P0)); // decreasing force. seems better (i.e. like (2) with auto clamp)\n     // P = P   + a*( P - P0 );                     // strangely better than (1)\n#  endif\n#endif\n        l = dot(P-U,P-U);\n        if (l<m)  m=l, c=k, N=P;\n      }\n    return vec4(m, N, k);                           // closest point, its coordinates, its local id\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if(u.x > SIZE || u.y > SIZE)  discard;\n\n    float s = 40.;\n    vec2 R = iResolution.xy,\n         U = s * ( u - .5*R ) / R.y;\n         \n    float  a = iMouse.x==0. ? .5+.5*sin(iTime) : iMouse.x/iResolution.x,\n          d0 = sqrt( Worley(U,0.).x ),              // classical Worley\n          d2 = sqrt( Worley(U,1.).x ),              // average of 8-neighborh\n          d1 = sqrt( Worley(U,a ).x );              // interpolation between both\n\n    O = smoothstep(s*1.5/R.y,0., vec4( d0,d1,d2,0 ) - .03 ) *vec4(.5,1,1,1);\n  //O = 5. - vec4( d0,d1,d2,0 ) *R.y/15. ;\n  \n   O = vec4(O.g, 0,0,0);                            // Fourier transform acts on O.r\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Horizontal + Vertical Discrete Fourier Transform of the input \n//adapted from FabriceNeyret2's https://www.shadertoy.com/view/XtScWt\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord )\n{\n   \tfragColor = vec4(0);\n    \n    vec2 uv = fragCoord.xy - 0.5;\n    \n    if(fragCoord.x >= SIZE || fragCoord.y >= SIZE) {fragColor = vec4(0.01); return;}\n    \n    for(float i = 0.; i < SIZE; i++)  \n\t{\n\t\tvec2 xn = texelFetch(iChannel0, ivec2(i, uv.y), 0).rg;\n        vec2 yn = texelFetch(iChannel1, ivec2(uv.x, i), 0).ba;\n\t\tvec2 ang = - 6.2831853 * (uv -SIZE/2.) * i/SIZE;\n\t\tfragColor.zw += cmul(xn, ang.x);\n\t\tfragColor.xy += cmul(yn, ang.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}