{
    "Shader": {
        "info": {
            "date": "1673773505",
            "description": "Just a test while messing with something else",
            "flags": 0,
            "hasliked": 0,
            "id": "mljGRy",
            "likes": 1,
            "name": "Rotate Square :)",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "JB_0x0003",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize with a single constant instead of two to ensure\n    // the squares are square in all resolutions\n    vec2 uv = fragCoord/iResolution.y;\n    // The recorded center is then offset on the x axis by \n    // the ratio of the constant w/ the true x-resolution\n    vec2 center = vec2(iResolution.x/iResolution.y * 0.5, 0.5);\n    \n    \n    mat2 rotation = mat2(cos(iTime) ,-sin(iTime),sin(iTime),cos(iTime));\n    //rotation = mat2(cos(iTime * 0.7853+ vec4(0,33,11,0)));\n    mat2 inverted = mat2(cos(-iTime) ,-sin(-iTime),sin(-iTime),cos(-iTime));\n    \n    uv= fract((uv - (center) ) * 3.0 * rotation);\n    uv = (uv - 0.5) * inverted ;\n    \n    // Time varying pixel color\n    vec3 hue = vec3(0.2,1.2,2.);\n    hue = cos(hue + uv.y * 5.0 - 1.0);\n    \n    //hue = vec3(uv.y + 0.2);\n\n    // Output to screen\n    fragColor = vec4(hue,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}