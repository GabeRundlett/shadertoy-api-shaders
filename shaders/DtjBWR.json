{
    "Shader": {
        "info": {
            "date": "1693942416",
            "description": "This a snake or spiral formula. It's a function that takes 2d coordinates and maps it to a 1d spiral around a square. I added interactivity, click to reposition the snake. Increase the size and speed with the levers on the side.",
            "flags": 32,
            "hasliked": 0,
            "id": "DtjBWR",
            "likes": 7,
            "name": "Super Logic Snake",
            "published": 3,
            "tags": [
                "2d",
                "interactive",
                "spiral",
                "snake",
                "experiments"
            ],
            "usePreview": 0,
            "username": "martymarty",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "#define minSize 3.0\n#define maxSize 20.0\n\n\nfloat superLogicSnake(vec2 pos, float size){\n    float center = (size-1.0)*0.5;\n    float ring =  min(center-abs(pos.x-center),center-abs(pos.y-center));\n    if(pos.x == (size-ring-1.0) || pos.y == ring){\n        return 4.0*ring*(size-ring)+pos.x+pos.y-2.0*ring;\n    }\n    else {\n        return 4.0*(ring+1.0)*(size-(ring+1.0))-(pos.x+pos.y-2.0*ring);\n    }  \n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 size_rate_time = fetchData(iChannel0, COMMON_SIZE_RATE_TIME).xyz;\n    \n    fragCoord.x = fragCoord.x -0.5*(iResolution.x-iResolution.y);\n    vec2 relMouse = iMouse.xy;\n    relMouse.x = relMouse.x - 0.5*(iResolution.x-iResolution.y);\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float xMask = 1.0-abs(floor(uv.x));\n    relMouse = relMouse/iResolution.y;\n    relMouse *= xMask;\n    vec3 col = vec3(0.0);\n    float size = floor(minSize + size_rate_time.x*(maxSize-minSize));\n    float area = size*size;\n    float rate = 1.6;\n    vec2 mosPos = floor(relMouse.xy*size);\n    float mousesnake = -superLogicSnake(mosPos,size)-1.0;\n    if( uv.x < 0.0){\n        float pct = 1.0 - abs(uv.y-size_rate_time.x)*50.0;\n        \n        col = vec3(.6*pct,1.0*pct,0.0);\n    }\n    else if(uv.x > 1.0){\n        float pct = 1.0 - abs(uv.y-size_rate_time.y)*50.0;\n\n        col = vec3(0.75*pct,0.6*pct,0.0);\n    }\n    else{\n        vec2 tilePos = floor(uv*size);\n        float snake = superLogicSnake(tilePos,size);\n        float time = floor(size_rate_time.z*rate*size);\n        snake = mod(snake-time+mousesnake, area)/(area-1.0);\n        col = vec3(pal(snake, vec3(-0.672, 0.728, 0.098),vec3(1.418, -0.381, 0.198),\n                              vec3(1.568, 2.588, 1.000), vec3(0.008, 0.838, 0.667)));\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* Took and modified code for common variables from \n        https://www.shadertoy.com/view/tdGBDG\n   \n*/\nconst ivec2 COMMON_SIZE_RATE_TIME = ivec2(0, 0);\n\n\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n\n\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (storeData(fragCoord, COMMON_SIZE_RATE_TIME)) {\n        fragColor = vec4(0.15, 0.15, 0.5, 1.0); // Initial value\n    }\n\n    if (iFrame > 0) { // After initialization\n        if (storeData(fragCoord, COMMON_SIZE_RATE_TIME)) {\n            fragColor = fetchData(iChannel0, COMMON_SIZE_RATE_TIME); // Load value from previous frame\n\n            // Update:\n            if (iMouse.z > 0.0) {\n            \n                float x = (iMouse.x - 0.5*(iResolution.x-iResolution.y))/iResolution.y;\n                if( x < 0.0) {\n                    fragColor.x = (iMouse.y-1.0)/iResolution.y;\n                    fragColor.z += iTimeDelta*(0.1+3.0*fragColor.y);\n                }\n                else if(x > 1.0){\n                    fragColor.y = (iMouse.y-1.0)/iResolution.y;\n                    fragColor.z += iTimeDelta*(0.1+3.0*fragColor.y);\n                }\n                else{\n                    if(fragColor.w == 1.0){\n                        fragColor.z = 0.0;\n                        fragColor.w = 0.0;\n                    }\n                    else{\n                        fragColor.z += iTimeDelta*(0.1+3.0*fragColor.y);;\n                    }\n                }\n            }\n\n            else {\n                // Otherwise fade back to blue\n                fragColor.w = 1.0;\n                fragColor.z +=iTimeDelta*(0.1+3.0*fragColor.y);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}