{
    "Shader": {
        "info": {
            "date": "1717288089",
            "description": "Heart Slasher Animation <3\n                                                                                                                                                                                 Heart for Heart :)  ^^^",
            "flags": 8,
            "hasliked": 0,
            "id": "l3G3R1",
            "likes": 13,
            "name": "Heart Slasher",
            "published": 3,
            "tags": [
                "effect",
                "animation",
                "heart",
                "arrow",
                "slasher"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "float fbm(float p, int octaves) {\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n\tfor(int i = 0; i < octaves; i++) {\n\t\ts += a * noise(p);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tp *= 1.8;\n\t}\n\treturn s / m;\n}\n\nfloat fbm2d(vec2 p, int octaves) {\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n\tfor(int i = 0; i < octaves; i++) {\n\t\ts += a * noise2d(p);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tp *= 1.8;\n\t}\n\treturn s / m;\n}\n\nfloat heart(vec2 p) {\n    p.y += 0.5;\n    p.x = abs(p.x);\n    if (p.y + p.x > 1.0)\n        return sqrt(dot2(p - vec2(0.25,0.75))) - sqrt(2.0) / 4.0;\n    return sqrt(min(dot2(p - vec2(0.00,1.00)),\n                    dot2(p - 0.5 * max(p.x + p.y, 0.0)))) * sign(p.x-p.y);\n}\n\nfloat shake(float t) {\n    t = clamp(t, 0.0, 1.0);\n    return (fbm(pow(t, 0.3) * 8.0, 3) * (1.0 + cos(t * HPI)) - sin(t * HPI)) * (1.0 - t) * pow(t, 0.7);\n}\n\nfloat line(vec2 p, vec2 p1, vec2 p2) {\n    vec2 center = (p1 + p2) * 0.5;\n    float len = length(p2 - p1);\n    vec2 dir = (p2 - p1) / len;\n    vec2 rel_p = p - center;\n    return dot(rel_p, vec2(dir.y, -dir.x));\n}\n\nfloat segment(vec2 p, vec2 p1, vec2 p2) {\n    vec2 center = (p1 + p2) * 0.5;\n    float len = length(p2 - p1);\n    vec2 dir = (p2 - p1) / len;\n    vec2 rel_p = p - center;\n    float dist1 = abs(dot(rel_p, vec2(dir.y, -dir.x)));\n    float dist2 = abs(dot(rel_p, dir)) - 0.5 * len;\n    return max(dist1, dist2);\n}\n\nfloat arrow(vec2 uv) {\n    const float outline = 0.01;\n    const float line_width = 1.8;\n    float height = 0.2 * max(0.5, sqrt(uv.x));\n    const float head_size = 0.2;\n    const float size = 0.02;\n    uv.x -= line_width * 0.45 + head_size * 0.5;\n\n    float a1 = line(uv, -head_size * vec2(1, -height), vec2(0));\n    float a2 = line(uv, -head_size * vec2(1, -height), -vec2(3.0 * head_size / 4.0, 0));\n    float a3 = line(uv, -head_size * vec2(1, height), vec2(0));\n    float a4 = line(uv, -head_size * vec2(1, height), -vec2(3.0 * head_size / 4.0, 0));\n    float head = max(max(-a1, a3), -max(-a2, a4));\n    \n    uv.y = abs(uv.y);\n    vec2 n = vec2(0,(fbm(uv.x * 5.0 + iTime * 0.5, 3) * 2.0 - 1.0) * 0.03);\n    float tail = segment(uv - n, vec2(-line_width*0.9, 0), vec2(-line_width - head_size * 0.9, head_size * 0.5));\n    tail = min(tail, segment(uv - n, vec2(-line_width*0.85 - head_size , 0), vec2(-line_width - head_size * 1.4, head_size * 0.4)));\n    tail = min(tail, segment(uv - n, vec2(-line_width*0.93 - head_size , 0), vec2(-line_width - head_size * 1.7, head_size * 0.3)));\n    \n    float stick = segment(uv, - vec2((head_size * 1.5 + line_width), 0), vec2(-0.2, 0));\n    stick = min(stick, tail);\n    \n    return min(abs(head - size) - outline, mix(stick - outline * smoothstep(-1.9, -1.2, uv.x), max(outline, head - outline), step(head, size)));\n}\n\nfloat shoot_arrow(vec2 uv, float t, float id) {\n    t = clamp(t - id, 0.0, 1.0);\n    float f = length(fwidth(uv));\n    vec2 auv = uv;\n    float a = noise(-id * 5.0  - 0.05);\n    auv = cos(a * TAU) * auv + sin(a * TAU) * vec2(-auv.y, auv.x);\n    auv.x -= (smoothstep(0.0, 0.8, t * 2.0) - 1.0) * 7.0;\n    return arrow(auv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float mr = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / mr * 1.5;\n    float f = length(fwidth(uv));\n    float t = mod(iTime * 2.0, ARROWS + VANISH_TIME);\n    float ft = floor(t);\n\n    float a = noise(-ft * 5.0  - 0.05);\n    vec2 dir = vec2(cos(-a * TAU), sin(-a * TAU));\n    float ts = fract(min(t, ARROWS));\n    float s = shake((ts * 2.0 - 0.65) * 2.5) * 0.7;\n    uv -= dir * s;\n    \n\n    float d = heart(uv);\n    \n    float m = smoothstep(0.0 + f, 0.0 - f, d);\n    vec3 col = vec3(m) * vec3(1, 0, 0);\n    col += sqrt(max(0.0, -d * 4.0)) - m;\n    col = abs(col);\n    \n    float arrw = shoot_arrow(uv, t, 0.0);\n    for (float i = 1.0; i < ARROWS; ++i)\n        arrw = min(arrw, shoot_arrow(uv, t, i));\n    arrw += fbm2d(uv * 4.0, 4) * smoothstep(ARROWS, ARROWS + VANISH_TIME, t) * 0.5;\n    col = mix(vec3(smoothstep(f, -f, arrw)), col, m);\n    \n    float flash = (1.0 - smoothstep(0.0, 1.0, ts)) * smoothstep(0.5, 0.9, ts * 2.0) * (1.0 + abs(s) * 6.0) * 0.7;\n    float g = (1.0 - m) * exp(-sqrt(max(0.0, d)) * 3.0);\n    col += g * sin(g * vec3(1.000, 0.922, 0.078) + vec3(0.5, 0.0, 0.0));\n    col.rb += (col.g + col.b) * vec2(1.0 / g, g + flash) - vec2(col.r, col.r);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fbm(float p, int octaves) {\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n    float c = 1.8 - 0.5 * sin(p * sqrt(p) * 0.02);\n\tfor(float i = 0.0; i < float(octaves); i++) {\n\t\ts += exp(-p * sqrt(p) * sqrt(c) * 0.003) * a * noise(p);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tp *= 1.7 * c;\n\t}\n\treturn s / m;\n}\n\nvec2 mainSound(int samp, float t) {\n    t = mod(t * 2.0, ARROWS + VANISH_TIME);\n    t = fract(min(t, ARROWS));\n    float s = fbm(t * 256.0, 8);\n    return vec2(s);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const float ARROWS = 5.0;\nconst float VANISH_TIME = 1.5;\n\nconst float PI = 3.1415926;\nconst float TAU = PI * 2.0;\nconst float HPI = PI * 0.5;\n\nfloat dot2(vec2 x) {\n    return dot(x, x);\n}\n\nfloat hash11(float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    return fract(p * p * 2.0);\n}\n\nfloat noise(float p) {\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n    fc *= fc * (3.0 - 2.0 * fc);\n\treturn mix(hash11(fl), hash11(fl + 1.0), fc);\n}\n\nfloat hash12(vec2 p) {\n\tvec3 p3 = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise2d(vec2 p) {\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u * u * (3.0 - 2.0 * u);\n\tfloat res = mix(\n\t\tmix(hash12(ip), hash12(ip + vec2(1, 0)), u.x),\n\t\tmix(hash12(ip + vec2(0, 1)), hash12(ip + vec2(1)), u.x), u.y);\n\treturn res * res;\t\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}