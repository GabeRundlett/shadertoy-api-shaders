{
    "Shader": {
        "info": {
            "date": "1643177406",
            "description": "ISPH on left vs SPH on right. Updated to use a smaller and faster Poisson solver, plus some other param tweaks for better performance. Speed up 8x with the shadertoy browser plugin",
            "flags": 32,
            "hasliked": 0,
            "id": "NdjyRh",
            "likes": 15,
            "name": "ISPH + separable Poisson filters",
            "published": 3,
            "tags": [
                "filter",
                "fluid",
                "particles",
                "poisson",
                "gaussian",
                "ca",
                "sph",
                "separable",
                "divergence",
                "svd"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 594
        },
        "renderpass": [
            {
                "code": "/*\n\nBuffer A implements the reintegration tracking algorithm, and calculates velocity divergence\n\nBuffers B and C calculate fluid pressure using the two-pass Poisson solver described in\n    \"Fast Eulerian Fluid Simulation In Games Using Poisson Filters\"\n    https://www.shahinrabbani.ca/torch2pd.html\n\nSolutions are initialised with a Gaussian blur of the previous solution\n\nIt's essentially a less accurate version (uses only a single SVD component) of the method used in\n    \"Fast Separable Poisson SVD\"\n    https://www.shadertoy.com/view/wsVyzD\n\nBuffer D implements incompressible SPH, by adding additional forces based on the pressure gradient, loosely based on:\n- ISPH: https://doi.org/10.1016/j.cpc.2018.01.005\n- IISPH: https://interactivecomputergraphics.github.io/SPH-Tutorial/slides/02_incompressibility.pdf\n\n*/\n\n//#define DEBUG\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n\tR = iResolution.xy; time = iTime;\n    ivec2 p = ivec2(pos);\n    \n    vec4 data = texel(ch0, pos);\n    particle P = getParticle(data, pos);\n    \n    col = hue(P.M.x) * P.M.x / fluid_rho;\n    \n#ifdef DEBUG\n    col *= .5;\n    if(pos.x < .25*R.x) {\n        float divV = P.divV;\n        float d = 100. * divV;\n        if (divV == 0. && P.M.x > 0.) col.b = 1.;\n        if (d > 0.) col.g += abs(d);\n        if (d < 0.) col.r += abs(d);\n    } else if(pos.x < .5*R.x) {\n        float p = 300. * texel(ch1, pos).x;\n        if (p > 0.) col.g += abs(p);\n        if (p < 0.) col.r += abs(p);\n        if (P.divV == 0. && P.M.x > 0.) col.b = 1.;\n    }\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926536\n\n// https://youtu.be/_3eyPUyqluc?t=355\nconst float poisson_filter[7] = float[](\n    .57843719174,\n    .36519596949,\n    .23187988879,\n    .14529589353,\n    .08816487385,\n    .05184872885,\n    .02906462467\n);\n\nfloat gaussian(float w, float s) {\n    return exp(-(w*w) / (2.*s*s)) / (s * sqrt(2.*PI));\n}\n\n\n// reintegration tracking stuff\n#define Bf(p) p\n#define Bi(p) ivec2(p)\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 1.\n\n#define border_h 5.\nvec2 R;\nvec4 Mouse;\nfloat time;\n\n#define mass 1.\n\n#define fluid_rho .52\n\nfloat Pf(vec2 rho)\n{\n    return 0.05*rho.x*(pow(rho.x/(fluid_rho - .02), 2.) - 1.); //water pressure\n}\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat border(vec2 p)\n{\n    vec2 r = R * vec2(.5,1);\n    p = mod(p,r);\n    float bound = -sdBox(p - r*0.5, r*vec2(0.49, 0.49));\n    float box = sdBox(Rot(0.*time)*(p - r*vec2(0.5, 0.6)) , r*vec2(0.05, 0.01));\n    float drain = -sdBox(p - r*vec2(0.5, 0.7), r*vec2(1.5, 0.5));\n    return max(drain,min(bound, box));\n}\n\n#define h 1.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nstruct particle\n{\n    vec2 X;\n    vec2 V;\n    vec2 M;\n    float divV; // not a property of the particle, but the centre of the cell the particle is in\n};\n    \nparticle getParticle(vec4 data, vec2 pos)\n{\n    particle P; \n    P.X = decode(data.x) + pos;\n    P.V = decode(data.y);\n    P.M.x = data.z;\n    P.M.y = 1.;\n    P.divV = data.w;\n    return P;\n}\n\nvec4 saveParticle(particle P, vec2 pos)\n{\n    P.X = clamp(P.X - pos, vec2(-0.5), vec2(0.5));\n    P.V = clamp(P.V, vec2(-0.5), vec2(0.5));\n    return vec4(encode(P.X), encode(P.V), P.M.x, P.divV);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat G(vec2 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x)\n{\n    return exp(-length(x));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//diffusion amount\n#define dif 1.12\n\nvec3 distribution(vec2 x, vec2 p, float K)\n{\n    vec4 aabb0 = vec4(p - 0.5, p + 0.5);\n    vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);\n    vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));\n    vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n    vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n    float m = size.x*size.y/(K*K); //relative amount\n    //if any of the dimensions are 0 then the mass is 0\n    return vec3(center, m);\n}\n\n//diffusion and advection basically\nvoid Reintegration(sampler2D ch, inout particle P, vec2 pos)\n{\n    float divV = 0., divX = 0.;\n    //basically integral over all updated neighbor distributions\n    //that fall inside of this pixel\n    //this makes the tracking conservative\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n       \n        particle P0 = getParticle(data, tpos);\n       \n        P0.X += P0.V*dt; //integrate position\n\n        float difR = 0.9 + 0.21*smoothstep(fluid_rho*0., fluid_rho*0.333, P0.M.x);\n        vec3 D = distribution(P0.X, pos, difR);\n        //the deposited mass into this cell\n        float m = P0.M.x*D.z;\n        \n        //add weighted by mass\n        P.X += D.xy*m;\n        P.V += P0.V*m;\n        P.M.y += P0.M.y*m;\n        \n        //add mass\n        P.M.x += m;\n        \n        // compute divergence\n        vec2 dx = P0.X - pos;\n        vec2 gradG = G(dx) * dx;\n        divV += P0.M.x * dot(P0.V, gradG); // velocity divergence\n        divX += P0.M.x * dot(dx, gradG); // position divergence\n    }\n    \n    if(divX < 1.6) { // free surface\n        P.divV = 0.;\n    } else {\n        P.divV = divV;\n    }\n    \n    //normalization\n    if(P.M.x != 0.)\n    {\n        P.X /= P.M.x;\n        P.V /= P.M.x;\n        P.M.y /= P.M.x;\n    }\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n\n    vec4 data = texel(ch0, pos); \n    \n    particle P;// = getParticle(data, pos);\n       \n    Reintegration(ch0, P, pos);\n   \n    //initial condition\n    if(iFrame < 1)\n    {\n        P.X = pos;\n        P.V = vec2(0);\n        P.M = vec2(0);\n        if(pos.y < .2*R.y) P.M = vec2(fluid_rho, 1);\n    }\n    \n    U = saveParticle(P, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Poisson solver - horizontal pass\n\nfloat rhs(vec2 pos) { // rhs of the poisson equation\n    vec4 data = texelFetch(iChannel0, ivec2(pos), 0);\n    particle P0 = getParticle(data, pos);\n    if (P0.divV == 0.) return 0.;\n    return -mix(P0.divV, fluid_rho - P0.M.x, .05);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float p = 0., g = 0.;\n    for (int i = -6; i <= 6; i++) {\n        vec2 pos = fragCoord + vec2(i,0);\n        p += poisson_filter[abs(i)] * rhs(pos);\n        g += gaussian(float(i), 3.) * texelFetch(iChannel2, ivec2(pos), 0).x;\n    }\n\tfragColor = vec4(p, g, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Poisson solver - vertical pass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float p = 0., g = 0.;\n    for (int j = -6; j <= 6; j++) {\n        vec4 pass1 = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(0,j), 0);\n        p += poisson_filter[abs(j)] * pass1.x;\n        g += gaussian(float(j), 3.) * pass1.y;\n    }\n\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    particle P = getParticle(data, fragCoord);\n    if(P.M.x == 0. || P.divV == 0.) {\n        // Dirichlet boundary condition\n        fragColor = vec4(0);\n    } else {\n        fragColor = vec4(g + p);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define COMPRESSIBLE (pos.x > .5*R.x)\n\n//force calculation and integration\nvoid Simulation(sampler2D ch, inout particle P, vec2 pos)\n{\n    float pressure = texture(iChannel2, P.X/R).x;\n    \n    //Compute the SPH force\n    vec2 F = vec2(0);\n    range(i, -3, 3) range(j, -3, 3)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n        particle P0 = getParticle(data, tpos);\n        vec2 dx = P0.X - P.X;\n        dx /= 2.;\n        \n        float pressure0 = texture(iChannel2, P0.X/R).x;\n        vec2 gradG = G(dx) * dx / 4.;\n        F -= mix(Pf(P.M) + Pf(P0.M), pressure0 - pressure, COMPRESSIBLE ? 0. : .5) * gradG;\n    }\n    \n    //gravity\n    F.y -= .0015 * P.M.x;\n\n    if(Mouse.z > 0.)\n    {\n        vec2 r = R * vec2(.5,1);\n        Mouse = mod(Mouse, r.xyxy);\n        vec2 dm = (Mouse.xy - Mouse.zw) / R.y; \n        vec2 dx = (mod(P.X, r) - Mouse.xy) / (R.y/100.);\n        F += dm * G(dx);\n    }\n    \n    //integrate\n    P.V += F*dt/P.M.x;\n\n    //border \n    vec3 N = bN(P.X);\n    float vdotN = step(N.z, border_h)*dot(-N.xy, P.V);\n    if(vdotN > 0.) P.V += N.xy * abs(vdotN);\n\n    if(N.z < 0. || pos.x < 2. || pos.x > R.x-2. || abs(pos.x - .5*R.x) < 2.)\n        P.M = P.V = vec2(0);\n    \n    //velocity limit\n    float v = length(P.V);\n    P.V /= (v > 1.) ? v : 1.;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n        \n    vec4 data = texel(ch0, pos);\n    particle P = getParticle(data, pos);\n    \n    if(P.M.x != 0.) //not vacuum\n    {\n        Simulation(ch0, P, pos);\n    }\n    \n    if(length(pos - R*vec2(.1 + .3*hash32(vec2(iFrame)).z, 0.9)) < 50e-3*R.y && iFrame%500 < 1) \n    {\n        P.X = pos;\n        P.V = vec2(0, -1);\n        P.M = vec2(fluid_rho, 0.);\n    }\n    \n    if(length(pos - R*vec2(.6 + .3*hash32(vec2(iFrame)).z, 0.9)) < 50e-3*R.y && iFrame%500 < 1) \n    {\n        P.X = pos;\n        P.V = vec2(0, -1);\n        P.M = vec2(fluid_rho, 0.);\n    }\n\n    U = saveParticle(P, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}