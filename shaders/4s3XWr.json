{
    "Shader": {
        "info": {
            "date": "1458612151",
            "description": "* Press Space to clean the blackboard\n* Draw your artwork dragging the mouse inside the blackboard! ;)",
            "flags": 48,
            "hasliked": 0,
            "id": "4s3XWr",
            "likes": 13,
            "name": "Blackboard",
            "published": 3,
            "tags": [
                "2d",
                "drawing",
                "blackboard"
            ],
            "usePreview": 0,
            "username": "ciberxtrem",
            "viewed": 978
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159;\n\nvec3 l;\nvec3 v;\n\nfloat dsBox(vec2 p, vec2 b, float r)\n{\n    return length(max(abs(p)-b, 0.)) -r;\n}\n\nvec3 Shade(vec3 color, vec3 n, vec3 v, vec3 l, float specFactor)\n{\n    float diff = pow(max(dot(n, l), 0.), 7.);\n    vec3 refl = reflect(v, n);\n    float spec = pow(max(dot(refl, l), 0.), 55.);\n\treturn color*diff + vec3(1.)*spec*specFactor;\n}\n\nmat3 RotX(float rad)\n{\n    float s = sin(rad);\n    float c = cos(rad);\n    return mat3(\n        1., 0., 0.,\n        0., c, s,\n        0., -s, c\n    );\n}\n\nmat3 RotY(float rad)\n{\n    float s = sin(rad);\n    float c = cos(rad);\n    return mat3(\n        c,  0., s,\n        0, 1.,  0.,\n        -s, 0., c\n    );\n}\n\nvec3 GetNormal(vec3 color)\n{\n    vec3 n = vec3(0., 0., -1.);\n    float lum = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    n.z = -lum;\n    n *= RotX(((1.-color.r)*2.-1.)*PI*0.5);\n    n *= RotY(((1.-color.g)*2.-1.)*PI*0.5);\n    \n    return normalize(n);\n}\n\nvec3 DrawFrame(vec2 p, vec3 bgColor)\n{\n    vec3 flatN = vec3(0., 0., -1.);\n    vec3 color = bgColor;\n    float d;\n    \n    vec3 colorCenter = texture(iChannel1, p.yx*vec2(1., 0.8)).rgb;\n    vec3 n = normalize(flatN + GetNormal(colorCenter));\n    color = Shade(color, n, v, l, 0.02);\n    \n    vec3 colorLeft = texture(iChannel1, p.yx).rgb;\n    n = normalize(flatN + GetNormal(colorLeft));\n    colorLeft = Shade(colorLeft, n, v, l, 1.);\n    d = dsBox(p-vec2(-1.65, 0.), vec2(0.095, 0.97), 0.025);\n    color = mix(colorLeft, color, smoothstep(0., 0.001, d));\n    \n    vec3 colorRight = texture(iChannel1, p.yx).rgb;\n    n = normalize(flatN + GetNormal(colorRight));\n    colorRight = Shade(colorRight, n, v, l, 1.);\n    d = dsBox(p-vec2(+1.65, 0.), vec2(0.095, 0.97), 0.025);\n    color = mix(colorRight, color, smoothstep(0., 0.001, d));\n    \n    vec3 colorTop = texture(iChannel1, p.xy).rgb;\n    n = normalize(flatN + GetNormal(colorTop));\n    colorTop = Shade(colorTop, n, v, l, 1.);\n    d = dsBox(p-vec2(+0., 0.87), vec2(1.5, 0.095), 0.025);\n    color = mix(colorTop, color, smoothstep(0., 0.001, d));\n    \n    vec3 colorBottom = texture(iChannel1, p.xy).rgb;\n    n = normalize(flatN + GetNormal(colorBottom));\n    colorBottom = Shade(colorBottom, n, v, l, 1.);\n    d = dsBox(p-vec2(+0., -0.87), vec2(1.5, 0.095), 0.025);\n    color = mix(colorBottom, color, smoothstep(0., 0.001, d));\n    \n    d = length(p-vec2(0., 0.88)+vec2(sin(p.y*50.)*0.0025))-0.05;\n    color = mix(vec3(0.), color, smoothstep(0., 0.01, d));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * 0.3;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (fragCoord.xy*2. - iResolution.xy)/iResolution.y;\n    l = normalize(vec3(vec2(2., 2.0)*p.xy, -10.) + vec3(sin(t)*2., cos(t)*4., 0.));\n    v = normalize(vec3(2.0, -1.0, 4.));\n    \n    vec4 bb = texture(iChannel0, uv);\n    vec3 color = DrawFrame(p, bb.rgb);\n    \n\tfragColor = vec4(pow(color, vec3(1./2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float KEY_SPACE = 32.5/255.0;\n\nfloat dsBox(vec2 p, vec2 b, float r)\n{\n    p.x -= p.y*0.5;\n    return length(max(abs(p)-b, 0.)) -r;\n}\n\nvec2 Rotate(vec2 p, float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec2(p.x*c-p.y*s, p.y*c+p.x*s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    \n    float t = iTime*1.;\n    \n    if(iFrame == 0)\n    {\n        color = vec4(0.);\n    }\n    \n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    float mouseClick = iMouse.z;\n    \n    if(t < 2.)\n    {\n        mouseClick = 1.;\n        float tn = pow((t/3.), 2.0);\n        mousePos = vec2(0.40,0.3) + Rotate(vec2(0.25, 0.0)*pow((1.-tn*0.4), 8.), -tn*6.2831*1.0);\n    }\n    \n    if(t > 3. && t < 4.)\n    {\n        mouseClick = 1.;\n        float tn = pow((max(t-3., 0.)/1.), 2.0);\n        mousePos = vec2(0.4, 0.55) + Rotate(vec2(0.05, 0.0)*pow((1.-tn), 1.), -tn*6.2831*2.);\n    }\n    \n    if(t > 4. && t < 5.)\n    {\n        mouseClick = 1.;\n        float tn = pow((max(t-4., 0.)/1.), 2.0);\n        mousePos = vec2(0.6, 0.55) + Rotate(vec2(0.05, 0.0)*pow((1.-tn), 1.), tn*6.2831*2.);\n    }\n    \n    if(t > 5. && t < 6.)\n    {\n        mouseClick = 1.;\n        float tn = pow((max(t-5., 0.)/1.), 2.0);\n        mousePos = vec2(0.5, 0.35) + Rotate(vec2(0.0, 0.05)*pow((1.-tn), 1.), tn*6.2831*0.5);\n    }\n    \n    if(t > 6. && t < 8.)\n    {\n        mouseClick = 1.;\n        float tn = pow((max(t-6., 0.)/1.), 2.0);\n        mousePos = vec2(0.5, 0.3)+vec2(cos(t), sin(t))*0.1+vec2(cos(t*30.), sin(t*25.))*0.01 + Rotate(vec2(0.0, 0.5)*pow((1.-tn*0.1), 1.), tn*6.2831*0.05);\n    }\n    \n    if(t > 8. && t < 10.)\n    {\n        mouseClick = 1.;\n        float tn = pow((max(t-8., 0.)/1.), 2.0);\n        mousePos = vec2(0.55, 0.32)+vec2(sin(t), cos(t))*0.1+vec2(cos(-t*35.), sin(-t*26.))*0.012 + Rotate(vec2(0.0, 0.5)*pow((1.-tn*0.1), 1.), -tn*6.2831*0.05);\n    }\n    \n    if(mouseClick > 0.5)\n    {\n        float d = dsBox(uv-mousePos, vec2(0.001, 0.012), 0.01);\n        color = mix(color+vec4(0.6), color, smoothstep(0., 0.001, d));\n    }\n    \n    if(texture(iChannel3, vec2(KEY_SPACE, 0.2)).r > 0.5)\n    {\n        color = vec4(0.);\n    }\n    \n    fragColor = color;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}