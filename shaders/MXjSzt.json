{
    "Shader": {
        "info": {
            "date": "1710986241",
            "description": "A first attempt at a Ray Marcher. This was a great lesson for me in many ways. My erroneous thinking is in the comments below.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXjSzt",
            "likes": 1,
            "name": "Three Spheres Ray Marching",
            "published": 3,
            "tags": [
                "raymarching",
                "aliasing",
                "spheres",
                "checkerboard"
            ],
            "usePreview": 0,
            "username": "randomOrder",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415926535897932;\nconst float epsilon = 0.0001;\nconst float fieldOfView = 90.0;\n\nfloat sdf_sphere(vec3 origin, vec3 center, float radius) {\n    return length(center-origin) - radius;\n}\n\nfloat sdf_surface(vec3 origin) {\n    return abs(origin.y + 1.0);\n}\n\n\nvec3 center = vec3(0.0, 0.0, 0.0);\nvec3 red_center = vec3(1.0, 0.0, 1.1);\nvec3 blue_center = vec3(-1.2, 0.0, -0.3);\nvec3 green_center = vec3(1.0, 0.0, -1.2);\nvec3 light_1 = vec3(-3.0, 3.0, 3.0);\nvec3 light_2 = vec3(3.0, 3.0, -3.0);\nvec3 background = vec3(0.6, 0.7, 0.8);\nvec3 black = vec3(0.0, 0.0, 0.0);\nvec3 red = vec3(1.0, 0.0, 0.0);\nvec3 blue = vec3(0.0, 0.0, 1.0);\nvec3 green = vec3(0.0, 1.0, 0.0);\nvec3 white = vec3(1.0, 1.0, 1.0);\nfloat red_size = 1.0;\nfloat blue_size = 1.0;\nfloat green_size = 1.0;\n\n// Function to define the scene.\nfloat sceneSDF(vec3 p) {\n  float d1 = sdf_sphere(p, red_center, red_size);\n  float d2 = sdf_sphere(p, blue_center, blue_size);\n  float d3 = sdf_sphere(p, green_center, green_size);\n  float d4 = sdf_surface(p); // A surface that will soon be checkered\n  return min(d1, min(d2, min(d3, d4))); \n}\n\nstruct RayHitInfo {\n  bool hit;          // Did the ray hit something?\n  vec3 position;     // Position of the hit\n  vec3 color;        // Immediate color of the object. No shadows or reflections.\n  float distance;    // Distance from the ray origin to the hit\n};\n\n// Ray marching function\nRayHitInfo rayMarch(vec3 ro, vec3 rd, float maxDist) {\n  float t = 0.0; \n  for (int i = 0; i < 1000; i++) { // Adjust max iterations if needed\n    vec3 p = ro + t * rd;\n    float dist = sceneSDF(p);\n    if (dist < epsilon) { \n      // We hit a surface!\n      vec3 color = black;\n      float candidate = sdf_surface(p);\n      if(candidate < epsilon) {\n        if ((fract(p.x) < 0.5 && fract(p.z) < 0.5) ||\n            (fract(p.x) >= 0.5 && fract(p.z) >= 0.5)) {\n            color = white;\n        }\n      }\n      candidate = sdf_sphere(p, blue_center, blue_size);\n      if (candidate < epsilon) {\n        color = blue;\n      }\n      candidate = sdf_sphere(p, red_center, red_size);\n      if (candidate < epsilon) {\n        color = red;\n      }\n      candidate = sdf_sphere(p, green_center, green_size);\n      if (candidate < epsilon) {\n        color = green;\n      }\n      return RayHitInfo(true, p, color, dist);\n        \n    }\n    t += dist;\n    if (t > maxDist) break; \n  }\n  return RayHitInfo(false, center, center, 0.0); // Background\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy - 0.5; // Center and scale UV\n  uv.x *= iResolution.x / iResolution.y; // Adjust aspect ratio\n  vec3 camPos = vec3(4.0*cos(iTime*0.25), 0.0, 4.0*sin(iTime*0.25)); // Camera position \n  vec3 forward = normalize(center - camPos); // Start by shooting rays towards the center\n  vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward)); // Approximate 'right' vector\n  vec3 up = cross(forward, right); // Approximate 'up' vector\n  float aspectRatio = iResolution.x / iResolution.y;\n  vec3 rayDir = normalize(forward +  // Thinking about this, up and right serve as getters here\n    (uv.x * aspectRatio) * right + \n    uv.y * up * tan(fieldOfView * 0.5));\n  RayHitInfo ray = rayMarch(camPos, rayDir, 20.0); \n  vec3 col = background; //background;\n  if (ray.hit) {\n    col = ray.color;\n    vec3 shadowDirection = normalize(light_1 - ray.position);\n    float bias = 0.01 * length(ray.position - light_1); // Adjust 0.01 as needed \n    RayHitInfo shadow1 = rayMarch(ray.position + shadowDirection*bias, shadowDirection, 20.0);\n    if(shadow1.hit) {\n        col*=0.4;\n    }\n    shadowDirection = normalize(light_2 - ray.position);\n    bias = 0.01 * length(ray.position - light_2);\n    RayHitInfo shadow2 = rayMarch(ray.position + shadowDirection*bias, shadowDirection, 20.0);\n    if(shadow2.hit) {\n        col*=0.4;\n    }      \n  }\n  fragColor = vec4(col, 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}