{
    "Shader": {
        "info": {
            "date": "1706715386",
            "description": "colorful, neon, text",
            "flags": 0,
            "hasliked": 0,
            "id": "McjXRt",
            "likes": 5,
            "name": "fancytext",
            "published": 3,
            "tags": [
                "text",
                "colorful",
                "neon"
            ],
            "usePreview": 0,
            "username": "sevenlabs",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "/*originals https://glslsandbox.com/e#107605.0 https://glslsandbox.com/e#107652.0*/\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nvec2 uv;\n\nuniform float time;\nuniform vec2 resolution;\n\nconst vec2 ch_size  = vec2(1.0, 2.0);              // character size (X,Y)\nconst vec2 ch_space = ch_size + vec2(1.0, 1.0);    // character distance Vector(X,Y)\nconst vec2 ch_start = vec2 (ch_space.x * -6., 4.); // start position\n      vec2 ch_pos   = vec2 (0.0, 2.0);             // character position(X,Y)\n//      vec3 ch_color = vec3 (1.5, 0.75, 0.5);        // character color (R,G,B)\n//const vec3 bg_color = vec3 (0.2, 0.2, 0.2);        // background color (R,G,B)\n\n#define REPEAT_SIGN false // True/False; True=Multiple, False=Single\n\n/* 16 segment display...Akin to LED Display.\n\nSegment bit positions:\n  __2__ __1__\n |\\    |    /|\n | \\   |   / |\n 3  11 10 9  0\n |   \\ | /   |\n |    \\|/    |\n  _12__ __8__\n |           |\n |    /|\\    |\n 4   / | \\   7\n | 13 14  15 |\n | /   |   \\ |\n  __5__|__6__\n\n15 12 11 8 7  4 3  0\n |  | |  | |  | |  |\n 0000 0000 0000 0000\n\nexample: letter F\n\n   12    8 7  4 3210\n    |    | |  | ||||\n 0001 0001 1001 1111\n\n binary to hex -> 0x119F\n*/\n\n#define n0 ddigit(0x22FF);\n#define n1 ddigit(0x0281);\n#define n2 ddigit(0x1177);\n#define n3 ddigit(0x11E7);\n#define n4 ddigit(0x5508);\n#define n5 ddigit(0x11EE);\n#define n6 ddigit(0x11FE);\n#define n7 ddigit(0x2206);\n#define n8 ddigit(0x11FF);\n#define n9 ddigit(0x11EF);\n\n#define A ddigit(0x119F);\n#define B ddigit(0x927E);\n#define C ddigit(0x007E);\n#define D ddigit(0x44E7);\n#define E ddigit(0x107E);\n#define F ddigit(0x101E);\n#define G ddigit(0x807E);\n#define H ddigit(0x1199);\n#define I ddigit(0x4466);\n#define J ddigit(0x4436);\n#define K ddigit(0x9218);\n#define L ddigit(0x0078);\n#define M ddigit(0x0A99);\n#define N ddigit(0x8899);\n#define O ddigit(0x00FF);\n#define P ddigit(0x111F);\n#define Q ddigit(0x80FF);\n#define R ddigit(0x911F);\n#define S ddigit(0x8866);\n#define T ddigit(0x4406);\n#define U ddigit(0x00F9);\n#define V ddigit(0x2218);\n#define W ddigit(0xA099);\n#define X ddigit(0xAA00);\n#define Y ddigit(0x4A00);\n#define Z ddigit(0x2266);\n#define _ ch_pos.x += ch_space.x;\n#define s_dot     ddigit(0);\n#define s_minus   ddigit(0x1100);\n#define s_plus    ddigit(0x5500);\n#define s_greater ddigit(0x2800);\n#define s_less    ddigit(0x8200);\n#define s_sqrt    ddigit(0x0C02);\n#define nl1 ch_pos = ch_start;  ch_pos.y -= 3.0;\n#define nl2 ch_pos = ch_start;  ch_pos.y -= 6.0;\n#define nl3 ch_pos = ch_start;\tch_pos.y -= 9.0;\n\nfloat dseg(vec2 p0, vec2 p1)\n{\n\tvec2 dir = normalize(p1 - p0);\n\tvec2 cp = (uv - ch_pos - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\n\treturn distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));   \n}\n\nbool bit(int n, int b)\n{\n\treturn mod(floor(float(n) / exp2(floor(float(b)))), 2.0) != 0.0;\n}\n\nfloat d = 1e6;\n\nvoid ddigit(int n)\n{\n\tfloat v = 1e6;\t\n\tvec2 cp = uv - ch_pos;\n\tif (n == 0)     v = min(v, dseg(vec2(-0.405*cos(iTime), -1.000), vec2(-0.500*cos(iTime), -1.000*cos(iTime))));\n\tif (bit(n,  0)) v = min(v, dseg(vec2( 0.500,  0.063*cos(iTime)), vec2( 0.500,  0.937)));\n\tif (bit(n,  1)) v = min(v, dseg(vec2( 0.438,  1.000), vec2( 0.063*sin(iTime),  1.000)));\n\tif (bit(n,  2)) v = min(v, dseg(vec2(-0.063*cos(iTime),  1.000), vec2(-0.438*cos(iTime),  1.000)));\n\tif (bit(n,  3)) v = min(v, dseg(vec2(-0.500,  0.937), vec2(-0.500,  0.062)));\n\tif (bit(n,  4)) v = min(v, dseg(vec2(-0.500, -0.063), vec2(-0.500, -0.938)));\n\tif (bit(n,  5)) v = min(v, dseg(vec2(-0.438*cos(iTime), -1.000), vec2(-0.063, -1.000)));\n\tif (bit(n,  6)) v = min(v, dseg(vec2( 0.063, -1.000), vec2( 0.438*cos(iTime), -1.000*cos(iTime))));\n\tif (bit(n,  7)) v = min(v, dseg(vec2( 0.500, -0.938), vec2( 0.500, -0.063*cos(iTime))));\n\tif (bit(n,  8)) v = min(v, dseg(vec2( 0.063,  0.000), vec2( 0.438*cos(iTime), -0.000)));\n\tif (bit(n,  9)) v = min(v, dseg(vec2( 0.063*cos(iTime),  0.063), vec2( 0.438*cos(iTime),  0.938*cos(iTime))));\n\tif (bit(n, 10)) v = min(v, dseg(vec2( 0.000,  0.063), vec2( 0.000,  0.937*cos(iTime))));\n\tif (bit(n, 11)) v = min(v, dseg(vec2(-0.063*sin(iTime),  0.063), vec2(-0.438*cos(iTime),  0.938*sin(iTime))));\n\tif (bit(n, 12)) v = min(v, dseg(vec2(-0.438,  0.000), vec2(-0.063*cos(iTime), -0.000)));\n\tif (bit(n, 13)) v = min(v, dseg(vec2(-0.063*cos(iTime), -0.063), vec2(-0.438*cos(iTime), -0.938*cos(iTime))));\n\tif (bit(n, 14)) v = min(v, dseg(vec2( 0.000, -0.938), vec2( 0.000, -0.063*cos(iTime))));\n\tif (bit(n, 15)) v = min(v, dseg(vec2( 0.063, -0.063*cos(iTime)), vec2( 0.438*cos(iTime), -0.938*cos(iTime))));\n\tch_pos.x += ch_space.y+cos(iTime);\n\td = min(d, v);\n}\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(4.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 resolution= iResolution.xy;\n    float time = iTime;\n\tvec2 aspect = resolution.xy / resolution.y;\n\tuv = ( gl_FragCoord.xy / resolution.y ) - aspect / 2.0;\n\tfloat _d =  1.0-length(uv);\n\tuv *= 19.0 ;\n\n\n\tvec3 ch_color = hsv2rgb_smooth(vec3(time*0.4+(uv.x+uv.y)*0.05,0.75,1.0));\n\n\t_d = _d*_d;\n\tvec3 bg_color = vec3(_d*0.14, _d*0.14, _d*0.21);\n\tch_pos = ch_start;\n\n\t         _ _ _ C H E E R S nl1\n            _ _ _ N A N O   \n            nl3\n            _ _ _ L O V E nl1\n\t\t\n\t\t\n        \n        \n\tvec3 color = mix(ch_color, bg_color, 1.0- (0.08 / d*2.0));  // shading\n    \n    vec4 O2 = vec4(0.0);\n\tfloat maxCoord = max(resolution.x, resolution.y);\n\tfloat ratio = resolution.y / resolution.x;\n\t\n\tvec2 u = gl_FragCoord.xy/maxCoord - vec2(0.5, ratio * 0.5);\n\tu *= 4.0;\n\tfloat T2 = time;\n\tfor (float i = 0.; i < 100.0; i += .5) {\n\tO2 += .001/abs(length(u + vec2(tan(i/4. + T2), sin(i*.45 + T2)) * sin(T2*.5+i*.76)) - sin(i+T2*.5) / 60. - .01) * (1. + cos(i*.7 + T2 + length(u)*6. + vec4(0,1,2,0)));\n\t}\n\t\n\tvec4 fragColor2 = O2;\n\t\n\t\n    \n    \n\tfragColor = vec4(color+fragColor2.xyz , 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}