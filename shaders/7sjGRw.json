{
    "Shader": {
        "info": {
            "date": "1617186620",
            "description": "click in different places for different colors",
            "flags": 0,
            "hasliked": 0,
            "id": "7sjGRw",
            "likes": 1,
            "name": "mandelbrot zooming",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "colors",
                "zoom",
                "animated",
                "animation"
            ],
            "usePreview": 0,
            "username": "grevel",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "\nfloat mandelbrot(vec2 c, float it)  // check if a point belongs to the mandelbrot set\n{\n    vec2 z = c;\n    float i = 0.;\n    \n    float maxDist = 0.;\n    \n    while (i < it && length(z) < 3.)\n    {\n        vec2 zn = vec2(z.x * z.x - z.y*z.y, 2.*z.x*z.y) + c;\n        z = zn;\n        \n        float dist = length(c-z);\n        \n        if(dist > maxDist) maxDist = dist;\n        \n        i++;\n    }\n    //return smoothstep(1.3, 2.7, length(z));\n    //return i/it * maxDist*.1;\n    //return i/it;\n    return maxDist*.1;\n}\n\nfloat interpolate(float a, float b, float d)\n{\n    return -(a-b)*d+a;\n}\n\nfloat map(float v, float a1, float a2, float b1, float b2)\n{\n    return (v-a1)/(a2-a1)*(b2-b1)+b1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv;\n    //uv.x = map(fragCoord.x, 0., 800., -3., 1.4);\n    //uv.y = map(fragCoord.y, 0., 450., -1.3, 1.3);\n    \n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n    if(iMouse.xy == vec2(0.)) mouseUV = vec2(.7);\n    \n    \n    float interpolation = 1.-pow(0.5+0.5*sin(iTime/3.), 3.); // 0-zoom out 1-zoom in\n    float zoom = .00003; // smaller = closer\n    \n    // calculate current camera position based on zoom and interpolation value\n    uv.x = map(fragCoord.x, 0., iResolution.x, interpolate(-3., -0.761574-zoom, interpolation), interpolate(1.4, -0.761574+zoom, interpolation));\n    uv.y = map(fragCoord.y, 0., iResolution.y, interpolate(-1.3, -0.0847596-zoom, interpolation), interpolate(1.3, -0.0847596+zoom, interpolation));\n    \n    float r = 1.-mandelbrot(uv, mouseUV.x*750.);\n    float g = 1.-mandelbrot(uv, mouseUV.y*300.);\n    float b = mandelbrot(uv, 10.);\n\n    fragColor = vec4(r, g, b, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}