{
    "Shader": {
        "info": {
            "date": "1547437944",
            "description": "Kalo Nyontek Dosa ",
            "flags": 0,
            "hasliked": 0,
            "id": "wssGWB",
            "likes": 2,
            "name": "Nyontek Dosa",
            "published": 3,
            "tags": [
                "tai"
            ],
            "usePreview": 0,
            "username": "beefburrito",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "float Band (float t, float start, float end, float blur) {\n    float step1 = smoothstep(start - blur, start + blur, t);\n    float step2 = smoothstep( end + blur, end - blur,t );\n    return step1 * step2;\n}\n\nfloat Rectangle (vec2 uv, float blur, float left, float right, float bottom, float top) {\n    float r;\n    r = Band(uv.x, left, right, blur);\n    r *= Band(uv.y, bottom, top, blur);\n    return r;\n}\n\nfloat line ( vec2 uv, vec2 p, float len, float thick, float m) {\n    float c, x ,y;\n    uv -= p;\n    x = uv.x;\n    y = uv.y;\n    y += m*x;\n    c += Rectangle( vec2(x,y), 0.001,-len,len,-thick,thick);\n    return c;\n}\n\nfloat Square (vec2 uv, float blur, float point) {\n    return Rectangle(uv, blur, -point, point, -point,point);\n}\n\nfloat Triangle (vec2 uv, float blur, float point) {\n    float t = uv.y;\n    return Rectangle( uv, blur, -point + t, point -t ,-point - t , point + t);\n}\n\nfloat Circle (vec2 uv, float blur, float r) {\n    float d = length(uv);\n    float c = smoothstep(r,r-blur,d);\n    return c;\n}\n\nfloat Circle_line(vec2 uv, float r, int num_segments){\n    float x = uv.x;\n    float y = uv.y;\n    float c = 0., len = 0.1, thick=0.001;\n    \n    r/= float(num_segments);\n    \n    for (int i = 0; i < num_segments;i++) {\n        float theta = 2.0f * 3.1415926f * float(i) / float (num_segments);\n        x += r * cos(theta);\n        y += r * sin(theta);\n        c += Circle(vec2(x,y-0.1),.001,.005);\n    }\n    return c;\n}\nfloat Rect_line(vec2 uv, float len, float thick) {\n    float c = 0.;\n    c += line(uv, vec2(.0,.1),len,thick,0.0);\n    c += line(uv, vec2(.0,-.1),len,thick,0.0);\n    c += line(uv, vec2(-.1,.0),thick,len,.0);\n    c += line(uv, vec2(.1,.0),thick,len,-.0);\n    \n    return c;\n}\n\nfloat Triangle_line(vec2 uv, float len, float thick) {\n    float c = 0.;\n    c += line(uv, vec2(.1,.0),len,thick,1.);\n    c += line(uv, vec2(-.1,.0),len,thick,-1.);\n    c += line(uv, vec2(-.0,-.1),len*2.,thick,0.);\n    return c;\n}\n\nfloat point(vec2 uv, vec2 p, float blur, float r) {\n    float c = 0.;\n    return c = Circle(uv - p , blur, r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col;\n    float x = uv.x;\n    float y = uv.y;\n    float c, row;\n    \n    vec2 pos;\n    \n    row = 0.3;\n    pos = vec2(-0.5,row);\n    c = Circle(uv -pos,.001,.1);\n    pos = vec2(-.0,row);\n    c += Square(uv-pos, .001,.1);\n    pos=vec2(.5,row);\n    c += Triangle(uv -pos , .001,.1);\n    \n    row = .0;\n    pos = vec2(-.5,row);\n    c+= Circle(uv-pos,.001,.1);\n    c -= Circle(uv-pos,.001,.09);\n    pos = vec2(-.0,row);\n    \n    c += Square(uv - pos,.001,.1);\n    c-= Square(uv-pos,.001,.09);\n    \n    pos = vec2(.5,row);\n    \n    c+= Triangle(uv-pos,.001,.1);\n    c-= Triangle(uv-pos,.001,.09);\n    \n    row = -.3;\n    pos= vec2(.5,row);\n    c+= Triangle_line(uv-pos,.1,.003);\n    \n    pos= vec2(.0,row);\n    c+= Rect_line(uv -pos, .1,.003);\n    \n    pos = vec2(-.5,row);\n    c += Circle_line(vec2(x,y)-pos,.6, 100);\n    //c += Circle_line(uv-pos,.3,.5,.6,10);\n    \n    col = vec3(1.,0.,1.)*c;\n    fragColor = vec4(col,1.);\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}