{
    "Shader": {
        "info": {
            "date": "1568211582",
            "description": "Practicing for drawing dragon ball",
            "flags": 0,
            "hasliked": 0,
            "id": "tlSSzc",
            "likes": 22,
            "name": "Dragon Ball Collections",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "tobia88",
            "viewed": 1125
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\n#define sat(x) clamp(x, 0., 1.)\n\n#define PI 3.14159265\n#define TWO_PI 2.*PI\n\n#define BALL_MIN_SIZE .2\n#define BALL_MAX_SIZE .3\n\n#define BALL_BASE_COL vec3( .85, .52, .25 )\n#define BALL_INNER_COL vec3( .8, .4, .2 )\n#define BALL_SHADOW_COL vec3( .42, .0, .0 )\n#define BALL_HIGHLIGHT_COL vec3( .85, .8, .6 )\n\n#define BALL_GLOW_TIME_OFFSET_SCALAR 0.05\n\n// 7 dragon balls\n// floating\n// sky\n// glowing\n\n// Star\n#define STAR_COL vec3( .6, .1, .0 )\n\nfloat rand(float seed) {\n \treturn fract( sin( seed * 100. ) * 1392. );   \n}\n\nvec2 remapUV( vec2 uv, vec4 rect ) {\n \treturn (uv - rect.xy) / ( rect.zw - rect.xy );\n}\n\nfloat lerp( float a, float b, float t ) {\n\treturn (t - a) / (b - a);\n}\n\nfloat remap( float a, float b, float c, float d, float t ) {\n\treturn lerp( a, b, t ) * ( d - c ) + c;\n}\n\nfloat polygon(vec2 uv, float n) {\n\tfloat a = atan(uv.x, uv.y) + PI;\n\tfloat r = TWO_PI / n;\n\treturn cos(floor(.5 + a / r) * r - a) * length(uv);\n}\n\nfloat star( vec2 uv, float size, float id ) {\n    // rotate uv\n    float t = iTime * -1. + rand(id) * 100.;\n    float s = sin( t );\n    float c = cos( t );\n    mat2 m = mat2( c, s,\n                   -s, c );\n    uv *= m;\n    \n    float pentagon = polygon( uv, 5. );\n \tfloat pen1 = polygon( uv * vec2( 1., -1 ), 5. );\n    float pen2 = polygon( uv, 5. );\n    return S(.1, .05, ( pen1 - pen2 * .619 ) * size );\n}\n\nvec4 stars( vec2 uv, float n ) {\n    vec4 col = vec4( STAR_COL, 0. );\n    \n    float t = sin( iTime + rand(n) * 100. );\n    float s = sin( t );\n    float c = cos( t );\n    mat2 m = mat2( c, s,\n                  -s, c );\n    uv *= m;\n    \n    if ( n == 1. )\n    \tcol.a += star( uv, 3., n );\n    else if ( n == 2. ) {\n        col.a += star( uv + vec2(.2, 0), 3., n );\n        col.a += star( uv + vec2( -.2, .1 ), 3., n + 1. );\n    }\n    else if ( n == 3. ) {\n\t\tcol.a += star( uv + vec2(.2, -.05), 3., n );\n        col.a += star( uv + vec2( .1, .3 ), 3., n + 1. );\n        col.a += star( uv + vec2( -.2, .08 ), 3., n + 1. );\n    }\n    else if ( n == 4. ) {\n        col.a += star( uv + vec2(.015, -.21), 3., n );\n        col.a += star( uv + vec2( -.325, -.0 ), 3., n + 1. );\n        col.a += star( uv + vec2( .3, .08 ), 3., n + 1. );\n        col.a += star( uv + vec2( -.028\t, .31 ), 3., n + 1. );\n    }\n    else if ( n == 5. ) {\n        col.a += star( uv + vec2(.015, -.35), 3., n );\n        col.a += star( uv + vec2( -.325, -.0 ), 3., n + 1. );\n        col.a += star( uv + vec2( .325, .03 ), 3., n + 1. );\n        col.a += star( uv + vec2( -.028\t, .31 ), 3., n + 1. );\n        col.a += star( uv + vec2( 0., 0. ), 3., n + 1. );\n    }\n    else if ( n == 6. ) {\n\t\tcol.a += star( uv + vec2(.015, -.35), 3., n );\n        col.a += star( uv + vec2( -.325, -.10 ), 3., n + 1. );\n        col.a += star( uv + vec2( .325, -.08 ), 3., n + 1. );\n        col.a += star( uv + vec2( -.2, .23 ), 3., n + 1. );\n        col.a += star( uv + vec2( .2, .25 ), 3., n + 1. );\n        col.a += star( uv + vec2( 0., 0. ), 3., n + 1. );\n    }\n    else {\n        col.a += star( uv + vec2(.186, -.32), 3., n );\n        col.a += star( uv + vec2( -.345, -.052 ), 3., n + 1. );\n        col.a += star( uv + vec2( .385, -.038 ), 3., n + 1. );\n        col.a += star( uv + vec2( -.2, .28 ), 3., n + 1. );\n        col.a += star( uv + vec2( .221, .28 ), 3., n + 1. );\n        col.a += star( uv + vec2( 0., 0. ), 3., n + 1. );\n        col.a += star( uv + vec2( -.185, -.35 ), 3., n + 1. );\n    }\n\n    return col;\n}\n\nvec4 dragonBall( vec2 uv, vec2 p, float star ) {\n    vec4 col = vec4(BALL_BASE_COL, 1.);\n    \n    float size = remap( -.5, .5, .15, .1, p.y * 3.3);\n    float fade = remap( -.5, .5, 1., .8, p.y * 3. );\n    \n    \n    float glow = remap(-1., 1., 0., 1., sin(( iTime + star * BALL_GLOW_TIME_OFFSET_SCALAR ) * 2. ));\n    \n    p.y += sin( iTime * 2. + rand( star ) * 100. ) * remap( -.5, .5, .05, .0, p.y );\n    \n    float halfSize = size * .5;\n    vec2 nuv = remapUV( uv, vec4( p.x - halfSize, p.y - halfSize, p.x + halfSize, p.y + halfSize)) - .5;\n    \n    float d = length( nuv );\n    col.a = sat(S( 1., .95, d ) + S( 2., 0., d ) * glow);\n    \n    // inner\n    col.rgb = mix( col.rgb, BALL_INNER_COL, S( .9, .85, d ));\n    \n    // stars\n    vec4 stars = stars( nuv, star );\n    col.rgb = mix( col.rgb, stars.rgb, stars.a );\n    \n    // shading\n    float shadingMaskA = S( .9, .85, d );\n    float shadingMaskB = S( .9, .85, length( nuv - vec2( -.17, .4 )));\n    float finalShadingMask = sat(shadingMaskA - shadingMaskB) * .25;\n    \n    col.rgb = mix( col.rgb, BALL_SHADOW_COL, finalShadingMask );\n    \n    // highlight A\n    float highlightPower = remap( .0, 1., .75, .25, glow );\n    \n    vec2 huv = nuv;\n    huv.y *= 1.4 - huv.x * .3;\n    float highlightMask = S( .4, .39, length( huv - vec2( -.25, .88 ))) * highlightPower;\n    col.rgb = mix( col.rgb, BALL_HIGHLIGHT_COL, highlightMask );\n    \n    // highlight B\n    huv = nuv;\n    huv.y *= 1.4;\n    huv.y += huv.x * .4;\n    highlightMask = S( .15, .14, length( huv - vec2( .5, 1.08 ))) * highlightPower;\n    col.rgb = mix( col.rgb, BALL_HIGHLIGHT_COL, highlightMask );\n    \n    col.rgb *= fade + 1. * glow * 1.5;\n    \n    // glow\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec4 col = vec4(0.);\n    \n    vec4 d1 = dragonBall( uv, vec2(.1, .312), 3. );\n    vec4 d2 = dragonBall( uv, vec2(.25, .21), 2. );\n    vec4 d3 = dragonBall( uv, vec2(-.2, .17), 1. );\n    vec4 d4 = dragonBall( uv, vec2(.05, .08), 6. );\n    vec4 d5 = dragonBall( uv, vec2(-.4, -.02), 5. );\n    vec4 d6 = dragonBall( uv, vec2(.32, -.08), 7. );\n    vec4 d7 = dragonBall( uv, vec2(-.15\t, -.2), 4. );\n    \n    col.rgb = mix(col.rgb, d1.rgb, d1.a);\n    col.rgb = mix(col.rgb, d2.rgb, d2.a);\n    col.rgb = mix(col.rgb, d3.rgb, d3.a);\n\tcol.rgb = mix(col.rgb, d4.rgb, d4.a);\n\tcol.rgb = mix(col.rgb, d5.rgb, d5.a);\n\tcol.rgb = mix(col.rgb, d6.rgb, d6.a);\n    col.rgb = mix(col.rgb, d7.rgb, d7.a);\n    \n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}