{
    "Shader": {
        "info": {
            "date": "1375560449",
            "description": "Toying with volumetric noise and inversion of space.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsXGRf",
            "likes": 324,
            "name": "Flames",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "volumetric"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 37053
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// You can buy a metal print of this shader here:\n// https://www.redbubble.com/i/metal-print/Flames-by-InigoQuilez/39844894.0JXQP\n\n\n#if HW_PERFORMANCE==0\n//#define HIGH_QUALITY\n#else\n#define HIGH_QUALITY\n#endif\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n#ifndef HIGH_QUALITY\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n#else\n    ivec3 q = ivec3(p);\n\tivec2 uv = q.xy + ivec2(37,17)*q.z;\n\tvec2 rg = mix(mix(texelFetch(iChannel0,(uv           )&255,0).yx,\n\t\t\t\t      texelFetch(iChannel0,(uv+ivec2(1,0))&255,0).yx,f.x),\n\t\t\t\t  mix(texelFetch(iChannel0,(uv+ivec2(0,1))&255,0).yx,\n\t\t\t\t      texelFetch(iChannel0,(uv+ivec2(1,1))&255,0).yx,f.x),f.y);\n\treturn mix( rg.x, rg.y, f.z );\n#endif    \n}\n\nvec4 map( in vec3 p )\n{\n    vec3 r = p; p.y += 0.6;\n    // invert space\n    p = -4.0*p/dot(p,p);\n    // twist space\n    float an = -1.0*sin(0.1*iTime + length(p.xz) + p.y);\n    float co = cos(an);\n    float si = sin(an);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    \n    // distort\n    p.xz += -1.0 + 2.0*noise( p*1.1 );\n    // pattern\n    float f;\n    vec3 q = p*0.85                     - vec3(0.0,1.0,0.0)*iTime*0.12;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iTime*0.12;\n    f += 0.25000*noise( q ); q = q*2.03 - vec3(0.0,1.0,0.0)*iTime*0.12;\n    f += 0.12500*noise( q ); q = q*2.01 - vec3(0.0,1.0,0.0)*iTime*0.12;\n    f += 0.06250*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iTime*0.12;\n    f += 0.04000*noise( q ); q = q*2.00 - vec3(0.0,1.0,0.0)*iTime*0.12;\n    float den = clamp( (-r.y-0.6 + 4.0*f)*1.2, 0.0, 1.0 );\n    vec3 col = 1.2*mix( vec3(1.0,0.8,0.6), 0.9*vec3(0.3,0.2,0.35), den ) ;\n    col += 0.05*sin(0.05*q);\n    col *= 1.0 - 0.8*smoothstep(0.6,1.0,sin(0.7*q.x)*sin(0.7*q.y)*sin(0.7*q.z))*vec3(0.6,1.0,0.8);\n    col *= 1.0 + 1.0*smoothstep(0.5,1.0,1.0-length( (fract(q.xz*0.12)-0.5)/0.5 ))*vec3(1.0,0.9,0.8);\n    col = mix( vec3(0.8,0.32,0.2), col, clamp( (r.y+0.1)/1.5, 0.0, 1.0 ) );\n    return vec4( col, den );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // inputs\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = (-1.0 + 2.0*q) * vec2( iResolution.x/ iResolution.y, 1.0 );\n    vec2 mo = iMouse.xy / iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n    \n    //--------------------------------------\n    // cameran    \n    //--------------------------------------\n    float an = -0.07*iTime + 3.0*mo.x;\n    vec3 ro = 4.5*normalize(vec3(cos(an), 0.5, sin(an)));\n    ro.y += 1.0;\n    vec3 ta = vec3(0.0, 0.5, 0.0);\n    float cr = -0.4*cos(0.02*iTime);\n    \n    // build rayn\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross( vec3(sin(cr),cos(cr),0.0), ww ) );\n    vec3 vv = normalize( cross(ww,uu) );\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n    \n    //--------------------------------------\n    // raymarch\n    //--------------------------------------\n    vec4 sum = vec4( 0.0 );\n    vec3 bg = vec3(0.4,0.5,0.5)*1.3;\n    // dithering\n    float t = 0.05*fract( 10.5421*dot(vec2(0.0149451,0.038921),fragCoord));\n                      \n    for( int i=0; i<128; i++ )\n    {\n        if( sum.a > 0.99 ) break;\n        vec3 pos = ro + t*rd;\n        vec4 col = map( pos );\n        col.a *= 0.5;\n        col.rgb = mix( bg, col.rgb, exp(-0.002*t*t*t) ) * col.a;\n        sum = sum + col*(1.0 - sum.a);\n        t += 0.05;\n    }\n    \n    vec3 col = clamp( mix( bg, sum.xyz/(0.001+sum.w), sum.w ), 0.0, 1.0 );\n    \n    //--------------------------------------\n    // contrast + vignetting\n    //--------------------------------------\n    col = col*col*(3.0-2.0*col)*1.4 - 0.4;\n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}