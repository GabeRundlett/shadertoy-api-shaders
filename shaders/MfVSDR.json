{
    "Shader": {
        "info": {
            "date": "1715065028",
            "description": "To add to my quantization shader, I tried out implementing some noise patterns to emulate dithering. Might take this further later, but for now it's what I expected",
            "flags": 0,
            "hasliked": 0,
            "id": "MfVSDR",
            "likes": 1,
            "name": "NotSoGreeeen - Ditherthing",
            "published": 3,
            "tags": [
                "noise",
                "quantization",
                "dithering",
                "posterization"
            ],
            "usePreview": 0,
            "username": "NotSoGreeeen",
            "viewed": 134
        },
        "renderpass": [
            {
                "code": "/*\n    As always, use however you like, take it apart, turn it into a square, print it out and use it as firestarter.\n    But if you're going to sell it, maybe think about crediting me? Thanks.\n*/\n\nvec3 colors[10] = vec3[10] ( //10 colors for my Quantization function https://www.shadertoy.com/view/XcKGWD\n    vec3(0.),\n    vec3(1.),\n    vec3(1., 0., 0.),\n    vec3(.5, 0., 0.),\n    vec3(.4, .12, .12),\n    vec3(0., 1., 1.),\n    vec3(0., .7, .7),\n    vec3(0., .25, .25),\n    vec3(.5),\n    vec3(.25)\n);\n\nvec3 Quantize(vec3 col) { //Quantization function see my older shader for more information\n    float dist = distance(colors[0], col); \n    vec3 tempColor = colors[0]; \n    \n    for (int i = 1; i < colors.length(); i++) { \n        if (distance(colors[i], col) < dist) { \n            dist = distance(colors[i], col);\n            tempColor = colors[i]; \n        }\n    }\n\n    return tempColor;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y); //normalize uv\n    \n    vec3 col; //define a vec3 for our color\n    col = vec3(1.);\n    \n    if (sin(iTime / 3.) >= 0.) {\n        col += (texture(iChannel0, uv).xxx / 2.); //add in the noise (for dithering)\n    }\n    \n    col *= uv.xyy;\n    \n    if (sin(iTime / 2.) >= 0.) { //same idea as the cos()\n        col = Quantize(col); //quantize it so it uses as few colors as possible\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}