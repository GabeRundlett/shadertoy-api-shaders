{
    "Shader": {
        "info": {
            "date": "1590431109",
            "description": "Webcam 'locked in glass' - Inspired by Superman.\nThanks to Evvvvil for his awesome Twitch tutorials!",
            "flags": 2,
            "hasliked": 0,
            "id": "Wd2fzV",
            "likes": 34,
            "name": "Locked In Glass!",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarch",
                "webcam",
                "superman",
                "memix"
            ],
            "usePreview": 1,
            "username": "dean_the_coder",
            "viewed": 1110
        },
        "renderpass": [
            {
                "code": "float glow = 0.0;\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdPlane(vec3 p) {\n    return p.y;\n}\n\nfloat sdCylinder(vec3 p, float r, float h) {\n    float d = length(p.xz) - r;\n    \n    return max(max(-p.y, d), p.y - h);\n}\n\nfloat sdTorus(vec3 p, float t) {\n  vec2 q = vec2(length(p.xz)-t, p.y);\n  return length(q);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRings(vec3 p, bool useGlow) {\n    p.xz *= rot(iTime * 3.0);\n    \n    p.y = abs(p.y - 1.85) - 0.8;\n    p.xy *= rot(3.1415 / 8.0);\n    \n    float d = sdTorus(p, 2.0);\n    \n    if (useGlow)\n    \tglow += 0.008 / (d * d);\n    return d;\n}\n\nvec2 glassUV;\n\nfloat sdGlass(vec3 p, bool txMap) {\n    p.y -= 2.0;\n    \n    p.xz *= rot(iTime * 0.3);\n    p.xy *= rot(sin(iTime * 0.9));\n    p.yz *= rot(sin(iTime * 0.7));\n    \n    if (txMap) {\n        ivec2 ts = textureSize(iChannel0, 0);\n        float ratio = float(ts.y) / float(ts.x);\n        glassUV = (p.xy * vec2(ratio, 1.0)  * 0.42 + 0.5);\n    }\n    \n    return sdBox(p, vec3(1.2, 1.2, 0.01));\n}\n\nvec2 map(vec3 p, bool isMapping) {\n    float d1 = sdCylinder(p, 2.0, 0.2);\n    float d2 = sdPlane(p);\n    float d3 = sdRings(p, isMapping);\n    float d4 = sdGlass(p, isMapping);\n    \n    vec2 res = d1 < d2 ? vec2(d1, 1.5) : vec2(d2, 2.5);\n    if (d3 < res.x) res = vec2(d3, 0.0);\n    if (d4 < res.x) res = vec2(d4, 3.5);\n    \n    return res;\n}\n\nvec3 getRayDir(vec3 ro, vec3 lookAt, vec2 uv) {\n    vec3 forward = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = cross(forward, right);\n    return normalize(forward + right * uv.x + up * uv.y);\n}\n\nvec3 calcNormal(in vec3 p) {\n    // Thanks iq!\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * 0.0005;\n    return normalize(e.xyy * map(p + e.xyy, false).x + \n\t\t\t\t\t e.yyx * map(p + e.yyx, false).x + \n\t\t\t\t\t e.yxy * map(p + e.yxy, false).x + \n\t\t\t\t\t e.xxx * map(p + e.xxx, false).x);\n}\n\nfloat calcShadow(vec3 p, vec3 lightPos, float sharpness) {\n    vec3 rd = normalize(lightPos - p);\n    \n    float h;\n    float minH = 1.0 / sharpness;\n    for (float d = 0.1; d < 32.0; d += h) {\n        h = max(0.0, map(p + rd * d, false).x);\n        minH = min(minH, h / d);\n        if (minH < 0.01)\n            break;\n    }\n    \n    return minH * sharpness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Raymarch.\n    vec3 ro = 5.0 * vec3(0.0, 0.4, -1.1 + (4.5 * sin(iTime * 0.5) + sin(iTime * 0.25)) * 0.1);\n    vec3 rd = getRayDir(ro, vec3(0.0, 1.4, 0.0), uv);\n\n    int hit = 0;\n    float d = 0.01;\n    vec3 p;\n    for (float steps = 0.0; steps < 128.0; steps++) {\n        p = ro + rd * d;\n        vec2 h = map(p, true);\n        if (h.x < 0.004 * d) {\n            hit = int(h.y);\n            break;\n        }\n\n        d += h.x;\n    }\n\n    vec3 col;\n    vec3 skyCol = vec3(0.18, 0.2, 0.22) * 0.1;\n    if (hit > 0) {\n        vec3 n = calcNormal(p);\n        vec3 lightPos = vec3(1.0, 1.2, -5.0);\n        vec3 lightCol = vec3(1.0, 0.9, 0.8);\n        vec3 lightToPoint = normalize(lightPos - p);\n        float sha = calcShadow(p, lightPos, 5.0);\n        float spe = 1.5 * pow(max(0.0, dot(rd, reflect(lightToPoint, n))), 30.0);\n        vec3 mainLight = clamp(dot(n, lightToPoint), 0.01, 1.0) * lightCol;\n        vec3 backLight = clamp(dot(n, -rd), 0.01, 1.0) * 0.2 * lightCol;\n        float fog = 1.0 - exp(-d * 0.03);\n\n        vec3 mat;\n        if (hit == 1) {\n            // Podium.\n            mat = vec3(0.001);\n        } else if (hit == 2) {\n            // Plane.\n            mat = vec3(0.001);\n            \n        } else if (hit == 3) {\n            // Glass.\n            mat = texture(iChannel0, glassUV).rgb;\n        }\n\n        col = mainLight * lightCol * sha;\n        col += backLight;\n        col += spe * lightCol;\n        col *= mat;\n        col = mix(col, skyCol, fog);\n    } else {\n        // Sky.\n        col = skyCol;\n    }\n    \n    // Glow\n    col += glow * 0.1;\n\n    // Output to screen\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}