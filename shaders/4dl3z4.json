{
    "Shader": {
        "info": {
            "date": "1364057303",
            "description": "A better way of displaying waveform on an LCD screen. There are still a decent amount of bugs and \nit's only good with thin lines, but looks decent on any resolution.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dl3z4",
            "likes": 27,
            "name": "Smooth Waveform",
            "published": 3,
            "tags": [
                "2d",
                "line",
                "antialiasing"
            ],
            "usePreview": 0,
            "username": "mu6k",
            "viewed": 1504
        },
        "renderpass": [
            {
                "code": "// returns the average of the vec2((uv.x-e, uv.x+e),uv.y)\nfloat smootherSample(vec2 uv,float e) \n{\n\te*=3.0; \n\treturn (\n\t\t texture(iChannel0,uv-vec2(e*-0.5,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*-0.4,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*-0.3,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*-0.2,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*-0.1,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.0,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.1,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.2,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.3,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.4,0.0)).x\n\t\t+texture(iChannel0,uv-vec2(e*+0.5,0.0)).x\n\t\t)/11.0;\n}\n\nfloat getWaveformValue(float x, float mode,float e)\n{\n\treturn smootherSample(vec2(x,mode),e);\n}\n\t\nfloat getWaveformDeriv(float x, float mode, float e)\n{\n\treturn (smootherSample(vec2(x+e*0.5,mode),e)\n\t\t-smootherSample(vec2(x-e*0.5,mode),e))/e;\n}\n\n\nvec4 osc(float mode,float offset, float amp, vec2 uv, vec2 dudv)\n{\n\t//this draws the waveform\n\t//the frame is split into columns\n\t//each column has a small interval of black pixels\n\t//that build up the waveform\n\t//getWaveformValue - the position of the small interval - called height in the code\n\t//getWaveformDeriv - the size of the interval - called width in the code\n\t\n\tfloat base_width = 2.0*dudv.y;\n\t\n\tfloat height = amp*(getWaveformValue(uv.x,mode,dudv.x/iResolution.x)-0.5);\n\tfloat heightderiv = amp*getWaveformDeriv(uv.x,mode,dudv.x/iResolution.x);\n\tfloat final_width = dot(vec2(base_width,abs(dudv.x*0.6*heightderiv))/iResolution.xy,vec2(1.0,1.0));\n\tfloat value = ((height-uv.y+offset)/final_width);\n\tfloat v = abs(value);\n\n\tv = clamp(0.0,v,1.0); // value of the current pixel\n\t\n\t//return vec4(v);\n\n\tvec4 colorLCD;\n\n\tfloat color_split = 1.0;\n\tfloat color_power = 1.0-color_split;\n\t\n\t//color split for LCD screens == higher resolution\n\tif ((heightderiv<0.0 ^^ value<0.0)) //orange vec3(1.0,0.5,0.0);\n\t{\n\t\tcolorLCD.r = (1.0+2.0*color_split)*v;\n\t\tcolorLCD.g = colorLCD.r*0.5;\n\t\tcolorLCD.b = colorLCD.r-color_split;\n\t\tcolorLCD = clamp(vec4(0,0,0,0),colorLCD,vec4(1,1,1,1));\n\t}\n\telse //blue vec3(0.0,0.5,1.0);\n\t{\n\t\tcolorLCD.b = (1.0+2.0*color_split)*v;\n\t\tcolorLCD.g = colorLCD.b*0.5;\n\t\tcolorLCD.r = colorLCD.b-color_split;\n\t\tcolorLCD = clamp(vec4(0.0),colorLCD,vec4(1.0));\n\t}\n\t\n\treturn colorLCD;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec4 color = vec4(1,1,1,1);\n\tcolor *= osc(1.0,0.83,0.33,uv,vec2(1.0));\n\tcolor *= osc(0.0,0.50,0.33,uv,vec2(1.0));\n\tcolor *= osc(0.0,0.17,0.33,vec2(pow(uv.x,2.0),uv.y),vec2(2.0*(uv.x),1.0));\n\t\n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}