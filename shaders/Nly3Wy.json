{
    "Shader": {
        "info": {
            "date": "1638246372",
            "description": "Click and hold on the right to reverse time. Click on the left to reset.",
            "flags": 32,
            "hasliked": 0,
            "id": "Nly3Wy",
            "likes": 12,
            "name": " Reversible Fluid Flow",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "pvillano",
            "viewed": 324
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n      if(iTime <= 0.1|| iFrame < 2){\n        vec2 coord = fragCoord.xy/iChannelResolution[0].xy*iChannelResolution[1].xy;\n        float grey = dot(texelFetch(iChannel1, ivec2(coord), 0), vec4(.3, .59, .11, 0.0));\n        fragColor = vec4(grey, grey, grey, 1.0);\n        return;\n    }\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0).rrra;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float C_INV = 1.0/4.0;\n\nvec4 texelFetchWrap(vec2 coord){\n    coord.x = mod(coord.x, iChannelResolution[0].x);\n    coord.y = mod(coord.y, iChannelResolution[0].y);\n    return texelFetch(iChannel0, ivec2(coord.xy), 0);\n}\n\nfloat calc_ddu(vec2 coord){\n    float sum = 0.0;\n    sum += texelFetchWrap(coord.xy + vec2(1.0,0.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(-1.0,0.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,1.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,-1.0)).r;\n    sum -= texelFetchWrap(coord.xy).r * 4.0;\n    return sum*C_INV;\n}\n\nfloat calc_ddu_old(vec2 coord){\n    vec2 sum = vec2(0.0);\n    sum += texelFetchWrap(coord.xy + vec2(1.0,0.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(-1.0,0.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,1.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,-1.0)).rg;\n    sum -= texelFetchWrap(coord.xy).rg * 4.0;\n    return (sum.r - sum.g)*C_INV;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 10 || (iMouse.z > 0.0 && iMouse.z < iResolution.x/2.0)){\n        vec2 coord = fragCoord.xy/iChannelResolution[0].xy*iChannelResolution[1].xy;\n        float grey = dot(texelFetch(iChannel1, ivec2(coord), 0), vec4(.3, .59, .11, 0.0));\n        fragColor = vec4(grey, 0.0, 0.0, 1.0);\n        return;\n    }\n   \n    if(iMouse.z > iResolution.x/2.0 || (iResolution.x < 200.0 && iFrame - 10 - ((iFrame - 10)/120)*120 >= 60)){\n        float du_old = texelFetchWrap(fragCoord).g;\n        float u_old = texelFetchWrap(fragCoord).r;\n        float ddu = calc_ddu(fragCoord);\n        float du = du_old + ddu;\n        float u = u_old+du;\n        fragColor = vec4(u,du,0,1);\n    } else {\n        float u_curr = texelFetchWrap(fragCoord).r;\n        float du_curr = texelFetchWrap(fragCoord).g;\n        float u_old = u_curr - du_curr;\n        float ddu_old = calc_ddu_old(fragCoord);\n        float du_old = du_curr - ddu_old;\n        fragColor = vec4(u_old, du_old, 0, 1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float C_INV = 1.0/4.0;\n\nvec4 texelFetchWrap(vec2 coord){\n    coord.x = mod(coord.x, iChannelResolution[0].x);\n    coord.y = mod(coord.y, iChannelResolution[0].y);\n    return texelFetch(iChannel0, ivec2(coord.xy), 0);\n}\n\nfloat calc_ddu(vec2 coord){\n    float sum = 0.0;\n    sum += texelFetchWrap(coord.xy + vec2(1.0,0.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(-1.0,0.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,1.0)).r;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,-1.0)).r;\n    sum -= texelFetchWrap(coord.xy).r * 4.0;\n    return sum*C_INV;\n}\n\nfloat calc_ddu_old(vec2 coord){\n    vec2 sum = vec2(0.0);\n    sum += texelFetchWrap(coord.xy + vec2(1.0,0.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(-1.0,0.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,1.0)).rg;\n    sum += texelFetchWrap(coord.xy + vec2(0.0,-1.0)).rg;\n    sum -= texelFetchWrap(coord.xy).rg * 4.0;\n    return (sum.r - sum.g)*C_INV;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 10 || (iMouse.z > 0.0 && iMouse.z < iResolution.x/2.0)){\n        vec2 coord = fragCoord.xy/iChannelResolution[0].xy*iChannelResolution[1].xy;\n        float grey = dot(texelFetch(iChannel1, ivec2(coord), 0), vec4(.3, .59, .11, 0.0));\n        fragColor = vec4(grey, 0.0, 0.0, 1.0);\n        return;\n    }\n   \n    if(iMouse.z > iResolution.x/2.0 || (iResolution.x < 200.0 && iFrame - 10 - ((iFrame - 10)/120)*120 >= 60)){\n        float du_old = texelFetchWrap(fragCoord).g;\n        float u_old = texelFetchWrap(fragCoord).r;\n        float ddu = calc_ddu(fragCoord);\n        float du = du_old + ddu;\n        float u = u_old+du;\n        fragColor = vec4(u,du,0,1);\n    } else {\n        float u_curr = texelFetchWrap(fragCoord).r;\n        float du_curr = texelFetchWrap(fragCoord).g;\n        float u_old = u_curr - du_curr;\n        float ddu_old = calc_ddu_old(fragCoord);\n        float du_old = du_curr - ddu_old;\n        fragColor = vec4(u_old, du_old, 0, 1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}