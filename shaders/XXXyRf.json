{
    "Shader": {
        "info": {
            "date": "1726476575",
            "description": "mandlebrot",
            "flags": 0,
            "hasliked": 0,
            "id": "XXXyRf",
            "likes": 3,
            "name": "RGB mandlebrot",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "Midataur",
            "viewed": 75
        },
        "renderpass": [
            {
                "code": "// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/(iResolution.y);\n    uv = 2.4*(uv-vec2(1.2,0.5));\n    \n    vec2 z = uv;\n\n    int broke = -1;\n    \n    int N = 500;\n    float rate = 0.4;\n    float glow = 0.02*(1.+cos(iTime*rate)/2.);\n    \n    for (int i = 0; i < N; ++i) {\n        z = vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y)+uv;\n        \n        if (length(z) > 2.) {\n            broke = i;\n            break;\n        }\n    }\n    \n    vec3 col = vec3(0,0,0);\n    if (broke >= 0) {\n        // Time varying pixel color\n        float angle = acos(dot(uv,vec2(0,1))/length(uv));\n        float scale = float(broke)*glow;\n        col = scale*hsv2rgb(vec3(angle/3.+iTime*rate, 0.5, 1));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}