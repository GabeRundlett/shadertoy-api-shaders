{
    "Shader": {
        "info": {
            "date": "1659287024",
            "description": "reference: https://twitter.com/DrGBuckingham/status/1543335895700750336\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NldczH",
            "likes": 40,
            "name": "impossible ring 2",
            "published": 3,
            "tags": [
                "raymarching",
                "illusion",
                "short",
                "reproduction",
                "multicamera"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "// shorter version below.\n\n// --- 441 chars\n\n\n#define rot(a)       mat2(cos(a+vec4(0,-1.57,1.57,0)))     // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n     vec3  R = iResolution;\n    float t=9., y = 2.*U.y/R.y-1.; \n    vec3  D = normalize(vec3(U+U, -1e3*R.y) - R),          // ray direction\n          p = vec3(0,0,7e3), q,                            // marching point along ray \n          M = iMouse.z > 0. ? .5*(iMouse.xyz/R -.5)\n               :  vec3( sign(y)/7.64,0,0);                 // swap camera direction at mid-height\n            // :  vec3( y/4.,0,0) * cos(vec3(0,11,0)); \n            // :  vec3( (acos(y)/3.14-.5)/2. ,0,0) * cos(vec3(0,11,0)); \n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01)           // march scene\n        q = p,\n        q.yz *= rot(-6.*M.y),                              // rotations\n        q.xz *= rot(-6.*M.x), \n        t = max( abs(length(q.xy)-5.), abs(q.z) ) -1.,     // square-torus\n        y = 12.*atan(q.y,q.x)/6.28 + iTime,\n        t = max(t, abs(fract(y)-.5)-.4 ),                  // bricks\n        p += .5*t*D;                                       // step forward = dist to obj          \n\n   O *= O*1.75;\n}\n\n\n\n\n\n\n/** // --- 368 chars by Xor\n\n#define r      mat2(cos(vec4(0,-1.57,1.57,0)-6.*M          // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec3  R = iResolution,\n          t = R,\n          p = (vec3(U+U,-1e3)-R)/R.yyz*7., q,              // marching point along ray \n          M = iMouse.z > 0. ? .5*(iMouse.xyz/R -.5)\n               :  vec3( sign(-p.y)/7.6,0,0);               // swap camera direction at mid-height\n    for (O=vec4(1); O.x > 0. && t.z > .01; O-=.01)         // march scene\n        q = p,\n        q.yz *= r.y)),                                     // rotations\n        q.xz *= r.x)), \n        t = max(max(abs(q), abs(length(q.xy)-5.) ) -1., abs(fract(1.91*atan(q.y,q.x) + iTime)-.5)-.4 ),                  // bricks\n        p.z += .5*t.z;                                     // step forward = dist to obj          \n\n   O *= O * 1.75;\n}\n\n/**/\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}