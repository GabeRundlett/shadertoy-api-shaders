{
    "Shader": {
        "info": {
            "date": "1617481537",
            "description": "joke for https://www.twitch.tv/sableraph\n\nRemember to turn on the sound on Buffer A video :) Let Van Damme speak. His round kicks produce beautiful Lissajous curves.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ssSGWm",
            "likes": 2,
            "name": "April Fool's 2021",
            "published": 3,
            "tags": [
                "joke"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = (2.* fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 vanDammeUv = clamp(\n        abs(\n            st\n            * iResolution.yx / iResolution.x\n        ),\n        0., 1.\n    );\n\tvec3 vanDammeTexture = texture(iChannel0, vanDammeUv).rgb;\n    vec4 vanDammeColor = greenScreen(vanDammeTexture);\n    vec3 previousColor = texture(iChannel1, uv).rgb;\n    \n    fragColor = vec4(\n        mix(vanDammeColor.rgb, previousColor, vanDammeColor.a),\n        1.0\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 greenScreen(vec3 texel) {\n    float maxrb = max( texel.r, texel.b );\n    float k = clamp((texel.g - maxrb) * 5.0, 0.0, 1.0);\n\tfloat ll = length(texel);\n    texel.g = min(texel.g, maxrb * 0.8);\n    texel = ll * normalize(texel);\n    return clamp(vec4(texel, k), 0., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}