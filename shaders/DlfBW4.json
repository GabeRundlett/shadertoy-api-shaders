{
    "Shader": {
        "info": {
            "date": "1692921356",
            "description": "I wanted to try to create a polygon sdf myself. This is my attempt. The shader is forked from iq's polygon shader, and only the function body has been changed. Fun coding exercise!  See the fork source if you want to give it a try yourself.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlfBW4",
            "likes": 6,
            "name": "polygon sdf",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "polygon"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Shader forked from Inigo Quilez, polygon function reconstructed from scratch\n\n\n// Distance to a polygon with n arbitrary points\n\n\n#define N 7\n\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    float pointMin = float(uint(-1));\n    float lineMin = pointMin;\n    int intersections = 0;\n    \n    for( int i=0; i<N; i++ ){\n    \n        pointMin = min(length(p-v[i]), pointMin);\n        // Kinda unrelated thing being calculated in the same loop.\n        // I thought it might cause problems but the tangency of points\n        // lines up with the previous line at the border so it's not a problem.\n        // Comment to see what it does\n\n\n        // Line distance! Perp is an interesting check, see what happens\n        // if you break; when it's true.\n        vec2 me = v[i];\n        vec2 next = v[i==N-1?0:i+1];\n        \n        float len = length(next-me); // Line length\n        vec2 dir = (next-me)/len; // Normalized line\n        \n        bool perp = dot(p-me, dir) > 0. && dot(p-me, dir) < len; \n        //if (perp) break; // Try this!\n        // Would the normal, intersecting the line, be able to intersect uv too?\n\n        dir *= mat2x2(0, 1, -1, 0);\n        // rotate dir by 90° to get normal\n        \n        lineMin = min(perp?abs(dot(p-me, dir)):pointMin, lineMin);\n        // distance to infinite line. If not perp then we use point dist.\n        \n        \n        // Unrelated calculation in the same loop cuz we can\n        // If even intersection count from uv to (inf, uv.y), \n        // then point is outside. If odd, point is inside\n        float f = (p.y - me.y) / (next.y - me.y);\n        if (f < 1. && f > 0.){\n            // point is not above or below line\n\n        \n            if (p.x < min(me.x, next.x)){ \n                // point is left of bounding box\n                \n                intersections++;\n            } else if (!(p.x > max(me.x, next.x))){ \n                // point is in bounding box\n                // so we check intersection\n                \n                if (mix(me.x, next.x, f) > p.x){\n                    intersections++;\n                }\n            }\n        }\n    }\n    \n    return lineMin * (intersections%2==1?-1.:1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        \n    vec2[] polygon = vec2[N](\n        0.8*sin( 0.40*iTime + vec2(0.0,2.00) + 0.0 ),\n        0.8*cos( 0.45*iTime + vec2(0.0,1.50) + 1.0 ),\n        0.8*sin( 0.50*iTime + vec2(0.0,3.00) + 2.0 ),\n        0.8*cos( 0.55*iTime + vec2(0.0,2.00) + 4.0 ),\n        0.8*sin( 0.60*iTime + vec2(0.0,1.00) + 5.0 ),\n        0.8*cos( 0.65*iTime + vec2(0.0,1.00) + 5.5 ),\n        0.8*sin( 0.70*iTime + vec2(0.0,1.00) + 6.0 )\n    );\n    \n\tfloat d = sdPolygon(p, polygon);\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    if( iMouse.z>0.001 )\n    {\n    d = sdPolygon( m, polygon );\n    col = mix(col, vec3(sign(d),1.,1.-sign(d)), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(sign(d),1.,1.-sign(d)), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = col.xyzz;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}