{
    "Shader": {
        "info": {
            "date": "1692307204",
            "description": "drum 3 Basico-sound",
            "flags": 8,
            "hasliked": 0,
            "id": "cl2cDK",
            "likes": 10,
            "name": "drum 3 Basico-sound",
            "published": 3,
            "tags": [
                "sound",
                "bass",
                "drum"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(5.0*antialiasing(1.0),b,d)\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n#define PI 3.141516\n\n\n//casa izq 1\nfloat sdPoly5a POLY(5)\nvec2  pt5a[5]=vec2[](\nvec2(2.21,-0.5),vec2(4.29,0.97),vec2(4.38,4.49),vec2(2.22,5.2),vec2(2.21,-0.5)  );\n\n//casa izq 2\nfloat sdPoly5b POLY(5)\nvec2  pt5b[5]=vec2[](\nvec2(4.32,2.32),vec2(5.82,3),vec2(5.82,4.01),vec2(4.39,4.49),vec2(4.32,2.32)  );\n\n\nfloat sdPoly5c POLY(5)\nvec2  pt5c[5]=vec2[](\nvec2(5.84,2.79),vec2(6.79,3.31),vec2(6.79,3.71),vec2(5.83,4.04),vec2(5.84,2.79)  );\n\n//banqueta\nfloat sdPoly5d POLY(5)\nvec2  pt5d[5]=vec2[](\nvec2(1.905,5.2),vec2(6.8,3.71),vec2(6.86,3.75),vec2(3.32,5.34),vec2(1.905,5.2)  );\n\n\nfloat sdPoly5e POLY(5)\nvec2  pt5[5]=vec2[](\nvec2(3.33,5.32),vec2(6.84,3.73),vec2(6.87,3.73),vec2(3.65,5.32),vec2(3.33,5.32)  );\n\n\nfloat sdPoly6f POLY(6)\nvec2  pt6f[6]=vec2[](\nvec2(7.62,3.7),vec2(7.66,3.69),vec2(11.57,5.2),vec2(11.57,5.21),vec2(10.6,5.28),\nvec2(7.62,3.7)  );\n\n\nfloat sdPoly5g POLY(5)\nvec2  pt5g[5]=vec2[](\nvec2(10.74,5.32),vec2(7.61,3.69),vec2(7.58,3.7),vec2(10.32,5.31),vec2(10.74,5.32)  );\n\n\nfloat sdPoly5h POLY(5)\nvec2  pt5h[5]=vec2[](\nvec2(10.95,4.95),vec2(9.27,4.28),vec2(9.27,2.64),vec2(11,1.79),vec2(10.95,4.95)  );\n\n\nfloat sdPoly6i POLY(6)\nvec2  pt6i[6]=vec2[](\nvec2(8.24,3.28),vec2(9.28,2.91),vec2(9.26,4.27),vec2(9.26,4.28),vec2(8.21,3.86),\nvec2(8.24,3.28)  );\n\n\nfloat sdPoly5j POLY(5)\nvec2  pt5j[5]=vec2[](\nvec2(7.65,3.35),vec2(8.2,3.1),vec2(8.21,3.89),vec2(7.68,3.67),vec2(7.65,3.35)  );\n\n\nfloat sdPoly5k POLY(5)\nvec2  pt5k[5]=vec2[](\nvec2(3.17,0.35),vec2(4.09,1),vec2(4.1,1.61),vec2(3.18,1.21),vec2(3.17,0.35)  );\n\n\nfloat sdPoly5l POLY(5)\nvec2  pt5l[5]=vec2[](\nvec2(5.54,2.96),vec2(5.75,3.05),vec2(5.73,3.25),vec2(5.56,3.21),vec2(5.54,2.96)  );\n\nfloat sdPoly5m POLY(5)\nvec2  pt5m[5]=vec2[](\nvec2(6.62,3.28),vec2(6.75,3.33),vec2(6.75,3.41),vec2(6.63,3.38),vec2(6.62,3.28)  );\n\n\nfloat sdPoly22n POLY(22)\nvec2  pt22n[22]=vec2[](\nvec2(8.8,4.27),vec2(8.81,2.31),vec2(8.51,2.29),vec2(8.51,2.19),vec2(8.78,2.21),\nvec2(8.79,2.11),vec2(8.65,2.12),vec2(8.64,2.06),vec2(8.79,2.03),vec2(8.78,1.88),\nvec2(8.78,1.88),vec2(8.97,1.88),vec2(8.96,2.02),vec2(9.12,2.03),vec2(9.13,2.13),\nvec2(8.98,2.14),vec2(8.98,2.21),vec2(9.28,2.21),vec2(9.3,2.29),vec2(8.97,2.33),\nvec2(8.97,4.26),vec2(8.8,4.27)  );\n\n\n//triangulo 1\nfloat sdPoly4o POLY(4)\nvec2  pt4o[4]=vec2[](\nvec2(5.3,2.74),vec2(5.83,2.75),vec2(5.83,2.98),vec2(5.30,2.74)  );\n\n\nfloat sdPoly4p POLY(4)\nvec2  pt4p[4]=vec2[](\nvec2(8.22,3.27),vec2(8.19,3.1),vec2(8.79,3.07),vec2(8.22,3.27)  );\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.001,0.0));\nreturn colOut;\n}\nvec3 DrawFigBordeCoL(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\nvec2 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\nvec3 fig00(vec2 p,vec3 col)\n{\n    float sd5a = sdPoly5a(p, pt5a);\n    //col=mix(col,colNegro ,S( sd5 ,0.0));\n    col=DrawFigBorde(vec3(0.57,0.57,0.57),col,sd5a );\n    \n    \n    float sd5b = sdPoly5b(p, pt5b);\n    col=DrawFigBorde(vec3(0.36),col,sd5b );\n\n    \n    float sd5c = sdPoly5c(p, pt5c);\n    col=DrawFigBorde(vec3(0.45),col,sd5c);\n    \n    //banqueta\n    float sd5d = sdPoly5d(p, pt5d);\n    col=DrawFigBorde(vec3(0.85),col,sd5d);\n    \n    float sd5e = sdPoly5e(p, pt5);\n    col=DrawFigBorde(vec3(0.25),col,sd5e);\n\n    float sd6f = sdPoly6f(p, pt6f);\n    col=DrawFigBorde(vec3(0.85),col,sd6f);\n\n    float sd5g = sdPoly5g(p, pt5g);\n    col=DrawFigBorde(vec3(0.25),col,sd5g);\n\n\n    float sd5h = sdPoly5h(p, pt5h);//casa izq 3\n    col=DrawFigBorde(vec3(0.45),col,sd5h );\n    \n    \n    float sd6i = sdPoly6i(p, pt6i); //casa izq 2\n    col=DrawFigBorde(vec3(0.65),col,sd6i);\n    \n    \n    float sd5j = sdPoly5j(p, pt5j); //casa izq\n    col=DrawFigBorde(vec3(0.485),col,sd5j);\n\n    \n    //ventana\n    float sd5k = sdPoly5k(p, pt5k);\n    col=DrawFigBorde(vec3(0.4),col,sd5k);\n\n    \n    float sd5l = sdPoly5l(p, pt5l);\n    col=DrawFigBorde(vec3(0.4),col,sd5l);\n\n    float sd5m = sdPoly5m(p, pt5m);\n    col=DrawFigBorde(vec3(0.4),col,sd5m);\n\n\n    float sd22n = sdPoly22n(p, pt22n); //poste\n    col=DrawFigBorde(vec3(0.4),col,sd22n);\n    \n    float sd4o = sdPoly4o(p, pt4o);\n    col=DrawFigBorde(vec3(0.4),col,sd4o );\n    \n    float sd4p = sdPoly4p(p, pt4p);\n    col=DrawFigBorde(vec3(0.4),col,sd4p );\n    \nreturn col;\n}\n\nfloat N21(vec2 p)\n{ return fract(sin(p.x * 100. + p.y * 6574.) * 5647.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n     uv-=vec2(-2.7,1.0);\n    uv*=2.5;\n    vec2 uv2=floor(uv*5.0+iTime);\n    uv.y=-uv.y;\n    vec3 col=vec3(0.67,0.67,0.68);\n    \n    if (uv.y<3.5)\n     col*=vec3(0.0,0.0,2.0)*N21(uv2);\n     \n    col=fig00(uv,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Referencia de sonido IQ y Gaz \n//PolyBLEP by iq\n//Modificado por Jorge2017a2---jorgefp\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n\n\n#define DD(a,b) n=(s>=a)?ivec2(a,b):n;\n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nconst float  ttotal=30.0;\n\n//gaz\n#define osc_sin(x) sin((x)*TAU)\n#define osc_saw(x) (1.-fract(x)*2.)\n#define osc_sqr(x) sign(0.5-fract(x))\n#define osc_tri(x) (asin(sin((x)*PI))/PIH)\n \nfloat noize(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat kick(float t)\n{ return clamp(1.5*asin(cos(300.1*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick2(float t)\n{ return clamp(1.5*asin(cos(650.1*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick3(float t)\n{ return clamp(1.5*asin(cos(500.1*t-40.1*exp(-10.0*t))),-1.,1.)*exp(-3.*t);}\n\nfloat kick4(float t)\n{ return clamp(1.5*asin(cos(250.1*t-25.1*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\n\nfloat snare(float t)\n{ float n=noize(t,10.,5.)*exp(-t*10.);\n    float f=t*160.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat snare2(float t)\n{   float n=noize(t,10.,12.1)*exp(-t*10.);\n    float f=t*260.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\n// saw wave iq\nfloat sawRaw( in float p, in float dpdt )\n{   float x = mod(p,tau)/tau;\n    return 2.0*x-1.0;\n}\n\n// square wave iq\nfloat squareRaw( in float p, in float dpdt )\n{   float t = fract(p/tau);\n    return sign(0.5-t);\n}\n\n\nfloat combinar(float a, float b, float f1, float f2)\n{   float ra=mix(0.0,a,f1);\n    float rb=mix(0.0,b,f2);\n    return ra+rb;\n}\n\nfloat wave( float x, float dxdt, in vec2 v )\n{ //referencia Inigo Quilez 2019\n    float f3=osc_saw(x*dxdt);\n    return f3;\n}\n\nfloat SoundIq(float time)\n{\n///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n\n  // tune\n  const float tempo = 4.2;\n  int s = int(floor(time*tempo));\n  ivec2 n = ivec2(0);\n  DD( 8,70) DD( 9,62) DD(10,67) DD(11,70) DD(12,72) DD(13,65) DD(14,69) DD(15,70)\n  DD(17,67) DD(18,70) DD(19,74) DD(20,75) DD(21,67) DD(22,74) DD(23,72) DD(24,70)\n  DD(25,62) DD(26,67) DD(27,70) DD(28,72) DD(29,65) DD(30,69) DD(31,70) DD(33,67)\n  DD(34,70) DD(35,74) DD(36,75) DD(37,67) DD(38,74) DD(39,72) DD(40,70) DD(41,62)\n  DD(42,67) DD(43,70) DD(44,72) DD(45,65) DD(46,69) DD(47,70) DD(49,67) DD(50,70)\n  DD(51,74) DD(52,75) DD(53,67) DD(54,74) DD(55,72) DD(56,70) DD(57,62) DD(58,67)\n  DD(59,70) DD(60,69) DD(61,60) DD(62,65) DD(63,67) DD(65,58) DD(66,65) DD(67,67)\n  DD(69,65) DD(70,67) DD(71,69) DD(72,70) DD(73,62) DD(74,67) DD(75,70) DD(76,72)\n  DD(77,65) DD(78,69) DD(79,70) DD(81,67) DD(82,70) DD(83,74) DD(84,75) DD(85,67)\n  DD(86,74) DD(87,72) DD(88,70) DD(89,62) DD(90,67) DD(91,70) DD(92,72) DD(93,65)\n DD(94,69) DD(95,70) DD(97,67) DD(98,70) DD(99,74) DD(100,75) DD(101,67) DD(102,74)\n  DD(103,72) DD(104,70) DD(105,62) DD(106,67) DD(107,70) DD(108,72) DD(109,65) DD(110,69)\n  DD(111,70) DD(113,67) DD(114,70) DD(115,74) DD(116,75) DD(117,67) DD(118,74) DD(119,72)\n  DD(120,70) DD(121,62) DD(122,67) DD(123,70) DD(124,69) DD(125,60) DD(126,65) DD(127,67)\n  DD(208,70) DD(209,62) DD(210,67) DD(211,70) DD(212,72) DD(213,65) DD(214,69) DD(215,70)\n  DD(217,67) DD(218,70) DD(219,74) DD(220,75) DD(221,67) DD(222,74) DD(223,72) DD(224,70)\n  DD(225,62) DD(226,67) DD(227,70) DD(228,72) DD(229,65) DD(230,69) DD(231,70) DD(233,67)\n  DD(234,70) DD(235,74) DD(236,75) DD(237,67) DD(238,74) DD(239,72) DD(240,70) DD(241,62)\n  DD(242,67) DD(243,70) DD(244,72) DD(245,65) DD(246,69) DD(247,70) DD(249,67) DD(250,70)\n  DD(251,74) DD(252,75) DD(253,67) DD(254,74) DD(255,72) DD(256,70) DD(257,62) DD(258,67)\n  \n  DD(259,70) DD(260,69) DD(261,60) DD(262,65) DD(263,67) DD(416,62) DD(416,65) DD(416,69)\n  DD(430,62) DD(430,70) DD(430,67) DD(432,62) DD(432,69) DD(432,65) DD(446,62) DD(446,70)\n  DD(446,67) DD(448,62) DD(448,69) DD(448,65) DD(462,62) DD(462,70) DD(462,67) DD(464,62)\n  DD(464,69) DD(464,65) DD(480,70) DD(481,62) DD(482,67) DD(483,70) DD(484,72) DD(485,65)\n  DD(486,69) DD(487,70) DD(489,67) DD(490,70) DD(491,74) DD(492,75) DD(493,67) DD(494,74)\n \n  // lower one octave\n  n.y -= 12;\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n.y-69)/12.0 );\n  float t = time - float(n.x)/tempo;\n  if( n.x==0 ) return 0.0;\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(time*vec2(1.0,0.5)) );\n    \n  // build instrument\n  \n  float y  = 0.4*wave(1.00*w*t,1.00*dwdt,v)*exp(-5.0*t);\n        y += 0.3*wave(2.01*w*t,2.01*dwdt,v)*exp(-7.0*t);\n        y += 0.2*wave(4.01*w*t,4.01*dwdt,v)*exp(-9.0*t);\n        //y += 0.1*wave(8.01*w*t,8.01*dwdt,v)*exp(-11.0*t);\nreturn y;\n}\n\n\nfloat sound02(float time)\n{int m,ss,c, d;\n    #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n// tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n NI( 8) NI(9) NI(10) NI(11) NI(12) NI(13) NI(14) NI(15)\n NI(17) NI(18) NI(19) NI(20) NI(21) NI(22) NI(23) NI(24)\n  \n  NI(69) NI(71) NI(72)  NI(75) NI(76)\n  NI(77)  NI(79) NI(81)  NI(84) NI(85)\n  NI(86)  NI(88) NI(89)  NI(92) NI(93)\n  NI(94)  NI(97) NI(98)  NI(101) NI(102)\n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y= kick3(t)*0.75;\n    return y;\n}\n\n\n\nfloat sound03(float time)\n{int m,ss,c, d;   \n    #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  NI( 8) NI( 9) NI(10) NI(11) NI(12) NI(13) NI(14) NI(15)\n  NI(17) NI(18) NI(19) NI(20) NI(21) NI(22) NI(23) NI(24)\n  \n  NI(25)  NI(27)  NI(29) NI(31) NI(33)\n  NI(34)  NI(36)  NI(38) NI(40) NI(41)\n  \n  NI(42)  NI(45) NI(49) NI(50)\n  NI(51)  NI(54) NI(57) NI(58)\n  NI(59)  NI(62) NI(66) NI(67)\n  NI(69)  NI(72) NI(75) NI(76)\n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n   float y= snare(t)*0.75;\n    return y;\n}\n\nfloat sound04(float time)\n{  int m,ss,c, d;\n     #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n NI(111)  NI(114) NI(115) NI(116) \n NI(120)  NI(122) NI(123) NI(124) \n NI(208)  NI(210)  NI(212)  NI(214)\n  \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y= kick(t)*0.75;\n    return y;\n}\n\n\n\nfloat sound05(float time)\n{ int m,ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n// tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n//NI( 8) NI(9) NI(10) NI(11) NI(12) NI(13) NI(14) NI(15)\n//NI(17) NI(18) NI(19) NI(20) NI(21) NI(22) NI(23) NI(24)\n   \n NI(111)  NI(114) NI(115) NI(116) \n NI(120)  NI(122) NI(123) NI(124) \n NI(208)  NI(210)  NI(212)  NI(214)\n  \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y=snare2(t)*0.75;\n    return y;\n}\n\nvec2 mainSound( in int samp, float time )\n{  float y= SoundIq( time);\n    y+= sound02(time);\n    y+= sound03(time);\n    y+= sound04(time);\n    y+= sound05(time);\n  return vec2(y);\n}   \n\n\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}