{
    "Shader": {
        "info": {
            "date": "1571729151",
            "description": "Click and drag to see Julia sets computed in real time !\n\nClick near the bottom-left corner to come back to demo mode.",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3SWn",
            "likes": 6,
            "name": "Interactive JuliaSet",
            "published": 3,
            "tags": [
                "julia",
                "mandelbrot",
                "iteration"
            ],
            "usePreview": 0,
            "username": "adrenoide",
            "viewed": 368
        },
        "renderpass": [
            {
                "code": "// Revisiting those objects with new tools is amazing to me !\n// In the 80's, I had to wait about 20' to get a single frame :)\n\n// Before clicking the mouse, what you see is the Julia set\n// transforming itself while the c parameter moves along roughly\n// the boundary of the Mandelbrot set.\n// After clicking the mouse, interactive mode is entered.\n// Coming back to demo mode is achieved by clicking near\n// the bottom-left corner.\n\nconst float pi = 4. * atan(1.);\n\n// map : z --> z**2 + c\nvec2 f(vec2 c, vec2 z) {\n    //return vec2(z.x * z.x - z.y * z.y + c.x, 2. * z.x * z.y + c.y);\n    return mat2(z, -z.y, z.x) * z + c;\n}\n\n\n// Computes the so-called \"escape-time\"\nint iter (vec2 c, vec2 z, int n, float threshold) {\n    vec2 zn = z;\n    int k = 0;\n    while ((k <= n) && (length(zn) < threshold)) {\n     \tzn = f(c, zn);\n        k++;\n    }\n    return k;\n}\n\n\n// Computes x**n\nfloat ipow(float x, int n) {\n    float y = 1.;\n    for (int k = 0; k < n; k++) {\n        y *= x;\n    }\n    return y;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    O = vec4(0.);\n    vec2 z = 5. * (U / iResolution.x - vec2(0.5,0.3));\n    \n    vec2 c;\n    float escape;\n    \n    // Computes the Mandelbrot set\n    escape = float(iter(z,vec2(0.),256, 2.)) / 256.;\n    vec4 MSet = vec4(vec3((1. - escape) / 4.), 1.);\n    \n    if (length (iMouse.xy) < 20. ) {\n        float t = iTime;\n        int n = int(floor(t / pi));\n        if (n % 6 == 0) { // upper half cardioid\n        \tc = 0.5 * vec2(cos(t), sin(t)) - 0.25 * vec2(cos(2.*t), sin(2.*t));\n        }\n        else if (n % 6 == 1) { // upper half disk\n            c = vec2(-1. + 0.25 * cos(t - pi), 0.25 * sin(t - pi));\n        }\n        else if (n % 6 == 2) { // segment -1.75 to -2\n            c = cos(t / 2.) * cos(t / 2.) * vec2(-1.25, 0.) +\n                sin(t / 2.) * sin(t / 2.) * vec2(-2., 0.) +\n                vec2 (0., 0.001);\n        }\n        else if (n % 6 == 3) { // segment -2 to -1.75\n            c = cos(t / 2.) * cos(t / 2.) * vec2(-1.25, 0.) +\n                sin(t / 2.) * sin(t / 2.) * vec2(-2., 0.) +\n                vec2 (0., -0.001);\n        }\n        else if (n % 6 == 4) { // lower half disk\n            c = vec2(-1. - 0.25 * cos(t), -0.25 * sin(t));\n        }\n        else { // lower half cardiod\n            c = 0.5 * vec2(cos(t), sin(t)) - 0.25 * vec2(cos(2.*t), sin(2.*t));\n        }\n        // shows c as a small red disk\n        float dist_to_c = smoothstep (0.1, 0., length(z - c));\n        vec4 red_spot = vec4(dist_to_c, 0., 0., 0.);\n        \n        // julia_set\n        escape = float(iter(c, z, 256, 2.)) / 256.;\n        vec4 jul = vec4 (mix (vec3(0.), vec3(.4,.6,1.), escape), 1.0);\n        \n        // alltogether\n    \tO = jul + MSet + red_spot;\n    }\n    else {\n        c = 5. * (iMouse.xy / iResolution.x - vec2(0.5,0.3));\n        escape = float(iter(c, z, 256, 2.)) / 256.;\n        vec4 jul = vec4 (mix (vec3(0.), vec3(.4,.6,1.), escape), 1.0);\n    \tO = jul + MSet;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}