{
    "Shader": {
        "info": {
            "date": "1589119331",
            "description": "Based on 3blue1brown video https://www.youtube.com/watch?v=3d6DsjIBzJ4&t=691s",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlBD2",
            "likes": 15,
            "name": "Taylor Series (cosinus)[Day 143]",
            "published": 3,
            "tags": [
                "tutorial",
                "taylor",
                "maths",
                "series"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "// Thanks to mla for the smooth plotting function! \n\n\n// Taylor Series\n\n// This version is defined for cos()\n// Check the other version for any function as input: https://www.shadertoy.com/view/wdlBWj\n// This one is better for learning how it works\n\n\n// j = 0.\n// f(j) = cos(j)\n// T(x) = f(j) + x*f(j)'/1! + x^2*f(j)''/2! + x^3*f'''/3! +  x^4*f''''/4! ... etc\n\n\n// This is a series, which approximates a given function around a point\n// by matching its value and derivatives at that point.\n\n// The derivatives are measured at the point, then scaled by x^n and divided by n! \n// This is done, so you negate the extra terms you get when deriving the equation.\n\n\n// Thanks to 3blue1brown for his video from which I learned this! \n// https://www.youtube.com/watch?v=3d6DsjIBzJ4&t=691s\n\n\n// You can change the amount of derivatives in the taylor(function)\n// Uncomment around line 78 to plot the derivatives\n\n\nfloat factorial(float x){float res = 1.;for(float i = 1.; i <= x;i++){res*=i;}return res;}\n\n\n#define offs \t\t(iTime)\n\n#define fn(j) \t\tcos(j+offs)\n\n#define deriv(j) \t-sin(j+offs)\n#define deriv2(j) \t-cos(j+offs)\n#define deriv3(j) \tsin(j+offs)\n\n\nfloat taylor(float j){\n\tfloat res = 0.;\n\t\n    res += fn(0.);\n    res += deriv(0.)  *j \t\t/ factorial(1.);\n    res += deriv2(0.) *j*j \t\t/ factorial(2.);\n    res += deriv3(0.) *j*j*j \t/ factorial(3.);\n    res += fn(0.)     *j*j*j*j \t/ factorial(4.); // cos(x) is the 4th derivatine of cos(x)\n    \n    return res;\n}\n\n// Plotting width\nconst float W = 0.03; \n// Plots a fn\nconst float eps = 0.01;\nvec3 graph(float y, float fn0, float fn1, vec3 col, float width){\n  return smoothstep(W*width*1.,dFdy(y)*W*width, \n                    abs(fn0-y)/length(vec2((fn1-fn0)/eps,1.)))*col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y*5.;\n\n    vec3 col = vec3(0);\n    \n    // functions \n\tcol += graph( uv.y, fn(uv.x),\t  fn(uv.x+eps),     vec3(0.,0.2,0.1), 1. );\n    col += graph( uv.y, deriv(uv.x),  deriv(uv.x+eps),  vec3(0.0,0.02,0.0), 1. );\n    col += graph( uv.y, deriv2(uv.x), deriv2(uv.x+eps), vec3(0.02,0.0,0.0), 1. );\n    col += graph( uv.y, deriv3(uv.x), deriv3(uv.x+eps), vec3(0.0,0.0,0.04), 1. );\n    col += graph( uv.y, taylor(uv.x), taylor(uv.x+eps), vec3(0.9,0.1,0.1), 1. );\n\t\n    \n    \t\n    \n    \n    // plotlines\n    \n    float pi = acos(-1.);\n    float uvxmod = abs( (fract((uv.x+offs+pi/3.)*2./3.14) -pi/5.)*pi/2.  );\n    col += graph(uvxmod + eps,0.01,0.02,vec3(1,1,1)/2.,0.75)*smoothstep(W,W*0.003,abs(uv.y)-0.1);\n    col += graph(abs(uv.y),0.,dFdx(uv.x),vec3(1,1,1)/2.,0.5);\n    \n    \n    // gamma correction\n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}