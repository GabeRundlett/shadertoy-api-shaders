{
    "Shader": {
        "info": {
            "date": "1713311026",
            "description": "Use the mouse to rotate",
            "flags": 0,
            "hasliked": 0,
            "id": "lfKGDV",
            "likes": 10,
            "name": "A very normal face",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "raymarch",
                "normals",
                "marching",
                "normal",
                "face"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define T (iTime)\n#define M_PI 3.1415\n#define TAU (M_PI*2.0)\n#define NEAR 0.003\n#define FAR 100.0\n\n\nmat2 rot(float a) { float c = cos(a); float s = sin(a); return mat2(c, s, -s, c); }\nfloat smin(float a, float b, float k) {float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0); return mix(a, b, h) - k*h*(1.0-h); }\nfloat smax(float a, float b, float k) {return smin(a, b, -k); }\nfloat sgt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat slt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\n\n\nfloat boxSDF(vec3 p, vec3 s) {\n    p = abs(p) - s;\n    \n    return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat faceSDF(vec3 p) {\n    p.z *= 1.15;\n    p.y *= 0.99;\n    float box = boxSDF(p, vec3(1.0));\n    float sphere = sphereSDF(p * vec3(1.09, 1.1, 1.1), 1.0);\n    float d = mix(box, sphere, sgt(length(p.xy), 0.56, 0.56));\n    float mouthOpen = 0.5+0.5*sin(T*3.0);\n    d += 0.5*slt(p.y, -0.5, 0.5)*sgt(length(p.x), 0.8, 0.6);\n    float eye = sphereSDF((vec3(abs(p.x), p.y, p.z) - vec3(0.29, 0.2, -0.9))*vec3(0.9, 1.3, 1), 0.10);\n    d = smax(d, -eye, 0.1);\n    float nose = sphereSDF((p - vec3(0, 0, -1.0))*vec3(0.9, mix(1.0, 0.6, slt(p.y, 0.0, -0.2)), 0.5), 0.10);\n    d = smin(d, nose, 0.1);\n    float mouth = sphereSDF((p - vec3(0, -0.29, -0.9))*vec3(1.0, 1.9, 1.0), 0.15);\n    d = smax(d, -mouth, 0.2);\n    float lip1 = sphereSDF((p - vec3(0, -0.24+0.01*mouthOpen, -0.99))*vec3(0.5, 1.9, 1.0), 0.09);\n    d = smin(d, lip1, 0.09);\n    float lip2 = sphereSDF((p - vec3(0, -0.34-0.01*mouthOpen, -0.99))*vec3(0.55, 1.9, 1.0), 0.09);\n    d = smin(d, lip2, 0.09);\n    float chin = sphereSDF((p - vec3(0, -0.6, -0.7))*vec3(0.7, 1.5, 0.9), 0.3);\n    d = smin(d, chin, 0.2);\n    return d/1.36;\n}\n\nfloat sdf(vec3 p) {\n    float d = faceSDF(p);\n    return d;\n}\n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc - 0.5 * R.xy) / R.y;\n    vec4 m = vec4((iMouse.xy - 0.5 * R.xy)/R.y, iMouse.zw);\n    \n    vec3 ro = vec3(0, 0.0, -3.);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    \n    if (m.z > 0.001) {\n      rd.yz *= rot(m.y*TAU);\n      rd.xz *= rot(m.x*TAU);\n      ro.yz *= rot(m.y*TAU);\n      ro.xz *= rot(m.x*TAU);\n    } else {\n        float ang = sin(T)*smoothstep(0.0, 3.0, T);\n        rd.xz *= rot(ang);\n        ro.xz *= rot(ang);\n    }\n    \n    float d = 0.0;\n    \n    for (int i = min(iFrame, 0); i < 80; i++) {\n        vec3 p = ro+rd*d;\n        float next = sdf(p);\n        if (next <= NEAR) break;\n        if (next >= FAR) break;\n        d += next;\n    \n    }\n    \n    if (d < FAR) {\n        vec3 p = ro+rd*d;\n        vec2 e = vec2(NEAR, 0.0);\n        vec3 n = normalize(sdf(p) - vec3(\n            sdf(p - e.xyy),\n            sdf(p - e.yxy),\n            sdf(p - e.yyx)\n        ));\n    \n        col += abs(n);//1.0/d;\n    }\n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}