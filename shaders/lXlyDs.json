{
    "Shader": {
        "info": {
            "date": "1726802946",
            "description": "sticks",
            "flags": 0,
            "hasliked": 0,
            "id": "lXlyDs",
            "likes": 0,
            "name": "sep192024v3",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 39
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 10.0\n#define SURF_DIST 0.01\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdCylinder(vec3 p, float h, float r) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat getDist(vec3 p) {\n    float t = iTime * .5; // Slowed down rotation\n    \n    vec3 p1 = p - vec3(1.0, 0.0, 2.0);\n    p1.xy *= rot(t);\n    \n    vec3 p2 = p - vec3(-1.0, 0.0, 2.0);\n    p2.xy *= rot(t + 1.57);\n    \n    vec3 p3 = p - vec3(4.0, 0.0, -2.0);\n    p3.zy *= rot(t + 3.14);\n    \n    vec3 p4 = p - vec3(-4.0, 0.0, -2.0);\n    p4.yz *= rot(t + 3.14);\n    \n    float d1 = sdCylinder(p1, 10.0, 0.5);\n    float d2 = sdCylinder(p2, 10.0, 0.5);\n    float d3 = sdCylinder(p3, 10.0, 2.5);\n    float d4 = sdCylinder(p4, 10.0, 2.5);\n    \n    return min(min(d1, d2), min(d3, d4));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.001, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getRayDirection(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n// Cosine based palette, 4 vec3 params\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(1.28318 * (c / t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 0, -10); // Camera pulled back\n    vec3 rd = getRayDirection(uv, ro, vec3(0,0,0), 1.);\n    \n    float dist = rayMarch(ro, rd);\n    vec3 p = ro + rd * dist;\n    \n    vec3 n = getNormal(p);\n    vec3 light = vec3(1, 11, -1);\n    \n    float dif = clamp(dot(n, normalize(light - p)), 0., 1.);\n    \n    // Define palette parameters\n    vec3 col1 = vec3(0.655,0.525,0.525);\n    vec3 col2 = vec3(-0.001, 0.345, 0.345);\n    vec3 col3 = vec3(1.501, 0.529, -0.781);\n    vec3 col4 = vec3(0.000, 0.758, -1.172);\n    \n    // Use palette for cylinder color\n    vec3 difColor = palette(dif * 0.5 + 0.5, col1, col2, col3, col4);\n    vec3 col = difColor * dif;\n    \n    // Ambient occlusion\n    float ao = 10000. - (dist / MAX_DIST);\n    col *= ao;\n    \n    // Add some rim lighting\n    float rim = 10. - max(dot(n, -rd), 0.);\n    rim = smoothstep(0.6, 1., rim);\n    col += rim * palette(0.8, col1, col2, col3, col4); // Use palette for rim lighting\n    \n    // Background gradient\n    vec3 bgCol = mix(palette(0.2, col1, col2, col3, col4), palette(0.0, col1, col2, col3, col4), uv.y * 0.5 + 0.5);\n    col = mix(bgCol, col, step(dist, MAX_DIST - 0.001));\n    \n    // Gamma correction\n    col = pow(col, vec3(0.8545));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}