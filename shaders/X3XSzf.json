{
    "Shader": {
        "info": {
            "date": "1709844138",
            "description": "Shader inspired by Acerola's Inktober video.\nPass 1: Calculate Luminance and derivitive\nPass 2: Threshold\nPass 3: Edge track and fit to screen\nPass 4: Calculate blue noise dithering and combine with edges\nNot perfect but kept me busy:p Sorry for the lag",
            "flags": 34,
            "hasliked": 0,
            "id": "X3XSzf",
            "likes": 2,
            "name": "Ink Webcam Shader",
            "published": 3,
            "tags": [
                "ink"
            ],
            "usePreview": 0,
            "username": "iuhf",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    ivec2 coordTex = ivec2((vec2(textureSize(iChannel0, 0))/iResolution.xy)*fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv /= 3.;\n    ivec2 coordEdge = ivec2((vec2(textureSize(iChannel2, 0))/iResolution.xy)*fragCoord);\n    \n    \n    vec3 tex = texelFetch(iChannel0, ivec2(coordTex), 0).rgb;\n    vec3 noise = texture(iChannel1, uv).rgb;\n    \n    if (lum(tex) > lum(noise)) {\n        fragColor = vec4(1.)*texelFetch(iChannel2, coordTex, 0).r;\n    } else {\n        fragColor = vec4(vec3(0.), 1.);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    //Skipped blur pass\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    return;\n    ivec2 coordTex = ivec2((vec2(textureSize(iChannel0, 0))/iResolution.xy)*fragCoord);\n    mat3 tex = mat3(vec3((texelFetch(iChannel0, coordTex + ivec2(-1., 1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., 1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., 1.), 0).r)), \n                    vec3((texelFetch(iChannel0, coordTex + ivec2(-1., 0.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., 0.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., 0.), 0).r)), \n                    vec3((texelFetch(iChannel0, coordTex + ivec2(-1., -1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., -1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., -1.), 0).r)));\n    fragColor = vec4(vec3(convolve(box_blur, tex)/9.), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coordTex = ivec2(fragCoord);\n    float texStrong = texelFetch(iChannel0, coordTex, 0).r;\n    float strength = texelFetch(iChannel0, coordTex + ivec2(-1., 1.), 0).r + texelFetch(iChannel0, coordTex + ivec2(0., 1.), 0).r + texelFetch(iChannel0, coordTex + ivec2(1., 1.), 0).r + texelFetch(iChannel0, coordTex + ivec2(-1., 0.), 0).r + texelFetch(iChannel0, coordTex + ivec2(1., 0.), 0).r + texelFetch(iChannel0, coordTex + ivec2(-1., -1.), 0).r + texelFetch(iChannel0, coordTex + ivec2(0., -1.), 0).r + texelFetch(iChannel0, coordTex + ivec2(1., -1.), 0).r;\n    strength = clamp(strength, 0., 1.);\n    float texWeak = texelFetch(iChannel0, coordTex + ivec2(0., 0.), 0).g;\n    \n    float edge = texStrong + texWeak*strength;\n    edge = clamp(edge, 0., 1.);\n    \n    fragColor = vec4(vec3(1. - edge), 1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coordTex = ivec2(fragCoord);//ivec2((vec2(textureSize(iChannel0, 0))/iResolution.xy)*fragCoord);\n    mat3 tex = mat3(vec3((texelFetch(iChannel0, coordTex + ivec2(-1., 1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., 1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., 1.), 0).r)), \n                    vec3((texelFetch(iChannel0, coordTex + ivec2(-1., 0.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., 0.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., 0.), 0).r)), \n                    vec3((texelFetch(iChannel0, coordTex + ivec2(-1., -1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(0., -1.), 0).r), (texelFetch(iChannel0, coordTex + ivec2(1., -1.), 0).r)));\n    \n    float strong_thresh = tex[1].y*0.9;\n    float weak_thresh = strong_thresh/2.;\n    \n    float d = clamp(sqrt(pow(convolve(sobelX, tex), 2.) + pow(convolve(sobelY, tex), 2.)), 0., 1.);\n    \n    vec2 edge = vec2(1.);\n    \n    if (d < strong_thresh) {\n        edge.x = 0.;\n    }\n    if (d < weak_thresh) {\n        edge.y = 0.;\n    }\n    if (edge.x > 0.) {\n        edge.y = 0.;\n    }\n    \n    fragColor = vec4(edge, 0., 1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define sobelX mat3(vec3(1., 2., 1.), vec3(0.), vec3(-1., -2., -1.))\n#define sobelY mat3(vec3(1., 0., -1.), vec3(2., 0., -2.), vec3(1., 0., -1.))\n\n#define box_blur mat3(vec3(1.), vec3(1.), vec3(1.))\n\nfloat convolve(in mat3 kernel, in mat3 samp) {\n    \n    return kernel[0].x*samp[0].x + kernel[0].y*samp[0].y + kernel[0].z*samp[0].z + kernel[1].x*samp[1].x + kernel[1].y*samp[1].y + kernel[1].z*samp[1].z + kernel[2].x*samp[2].x + kernel[2].y*samp[2].y + kernel[2].z*samp[2].z;\n    \n}\n\nfloat lum(in vec3 col) {\n    return sqrt( 0.299*(col.r*col.r) + 0.587*(col.g*col.g) + 0.114*(col.b*col.b) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coordTex = ivec2((vec2(textureSize(iChannel0, 0))/iResolution.xy)*fragCoord);\n    mat3 tex = mat3(vec3(lum(texelFetch(iChannel0, coordTex + ivec2(-1., 1.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(0., 1.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(1., 1.), 0).rgb)), \n                    vec3(lum(texelFetch(iChannel0, coordTex + ivec2(-1., 0.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(0., 0.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(1., 0.), 0).rgb)), \n                    vec3(lum(texelFetch(iChannel0, coordTex + ivec2(-1., -1.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(0., -1.), 0).rgb), lum(texelFetch(iChannel0, coordTex + ivec2(1., -1.), 0).rgb)));\n    fragColor = vec4(vec3(convolve(box_blur, tex)/9.), 1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}