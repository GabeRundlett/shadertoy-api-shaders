{
    "Shader": {
        "info": {
            "date": "1694377790",
            "description": "black and white design for screen-printing a cookbook cover",
            "flags": 0,
            "hasliked": 0,
            "id": "cljBRt",
            "likes": 16,
            "name": "fryin' pans",
            "published": 3,
            "tags": [
                "printing",
                "pan",
                "lineart",
                "screenprint",
                "silkscreen",
                "pans",
                "skillet",
                "frying"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "// Fork of \"draft - fryin' pans\" by elenzil. https://shadertoy.com/view/DtSBRc\n// 2023-09-10 20:28:44\n\n// A collection of frying pans to use for silkscreening\n// the cover of a cookbook.\n//\n// Pretty gruesome code.\n// In this one I tried out using Globals for things like\n// current Pixel Coordinate, current Color, etc,\n// in order to simplify the function signatures.\n// But I won't be doing it that way again.\n\n#define RES    (iResolution.xy)\n#define MINRES (min(RES.x, RES.y))\n\n      float zoom = 0.8;\n      float eps;\n      vec2  P;\n      vec2  Q;\n      float C;\n      float W;\n      \nconst vec2 vX = vec2(1.0, 0.0);\nconst vec2 vY = vX.yx;\nconst vec2 v0 = vX.yy;\nconst vec2 v1 = vX.xx;\n\nvec2 grad(in float value) {\n    return vec2(dFdx(value), dFdy(value));\n}\nfloat gradmag(in float value) {\n    return length(grad(value));\n}\n\nvoid fill(in float d, in vec2 col) {\n    float b = smoothstep(eps, -eps, d);\n    C = mix(C, col.x, col.y * b);\n}\n\nvoid outl(in float d, in vec2 col) {\n          d = abs(d) - (W * eps);\n//        d = 2e-3 * d / gradmag(d);\n    float b = smoothstep(eps, -eps, d);\n    C = mix(C, col.x, col.y * b);\n}\n\nfloat sdEllipse_2(in vec2 cen, in vec2 ab) { return sdEllipse(cen - P, ab); }\n\nfloat sdCircle(in vec2 cen, in float rad) { return distance(P, cen) - rad; }\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox(in vec2 cen, in vec2 b ) {    vec2 d = abs(cen - P)-b;    return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdPan(\n    float rad,\n    float handle_length,\n    bool lipL,\n    bool lipR,\n    bool circ,\n    bool hole\n    ) {\n    float d = 1e9;\n    \n    vec2 QQ = Q;\n    QQ.x += (rad + handle_length) / 2.0;\n    QQ.x -= 0.5;\n    \n    float ellipse_offset = rad + handle_length * 1.1;\n    float ellipse_length = handle_length * 0.3;\n    \n    if (hole) {\n        QQ.x -= ellipse_offset + ellipse_length * 0.5;\n        QQ *= rot2_deg(5.0 * sin(iTime * 10.0 / rad));\n        QQ.x += ellipse_offset + ellipse_length * 0.5;\n    }\n\n    // basic circle of the pan  \n    P = QQ;\n    d = min (d, sdCircle(v0, rad));\n    \n    // ears of the pan\n    if (lipL) {\n        d = smin(d, sdCircle(vec2(-0.02, -rad), rad / 0.7 * 0.1), 2e-1);\n    }\n    if (lipR) {\n        d = smin(d, sdCircle(vec2(-0.02,  rad), rad / 0.7 * 0.1), 2e-1);\n    }\n    \n    // pan handle\n    P = QQ;\n    // taper space a little\n    P.y = mix(P.y, P.y * 0.8, P.x);\n    \n    d = smin(d, sdBox(vX * (rad + handle_length / 2.0), vec2(handle_length, 0.0)) - 0.1, 1e-1);\n\n    // outline\n//  d = min(d, abs(d - 6.0 * W * eps) - 2.0 * W * eps);\n\n    // cut an ellipse in the end of the handle\n    if (hole) {\n        P.y = mix(P.y * 1.4, P.y, (P.x - ellipse_offset) * 4.0);\n\n        d = max(d, -sdEllipse_2(vX * ellipse_offset, vec2(ellipse_length, 0.05)));\n    }\n    \n    // cut a circle in the pan to indicate the bottom\n    if (circ) {\n        P = QQ;\n        d = max (d, -(abs(sdCircle(v0, rad * 0.8)) - W * eps));\n    }\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    zoom = 0.445;\n    // normalized coordinate\n    float cellSize = 400.0;\n  //  XY += RES / MINRES * iTime * 50.0;\n    XY.y -= iTime * 50.0;\n    \n    // color\n    C    = 1.0;\n\n    float d = 1e9;\n\n    // epsilon for AA\n    eps  = 2.0 / cellSize / zoom;\n\n    // line width (in eps's)\n    W    = 2.0;\n\n    for (uint pass = 0u; pass <= 1u; ++pass) {\n        if (pass == 1u) {\n            XY += cellSize / 2.0;\n        }\n    \n        vec2 xy = mod(XY, cellSize);\n        Q = (xy * 2.0 - cellSize) / cellSize / zoom;\n        Q *= rot2_deg(90.0);\n        Q.x += 0.1;\n\n        vec2  cellIndx = vec2(XY / cellSize);\n        uvec2 cellIndxU = uvec2(abs(cellIndx));\n        \n        uint S = pass * 100u;\n    \n        float hash1 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n        float hash2 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n        float hash3 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n        float hash4 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n        float hash5 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n        float hash6 = whangHashNoise(cellIndxU.x, cellIndxU.y, S++);\n\n        float panSize = 1.0 + 0.8 * (hash1 - 0.5);\n        float panHndl = panSize * (0.5 + 0.3 * hash2);\n        bool  lipL    = hash3 < 0.5;\n        bool  lipR    = hash4 < 0.5;\n        bool  circ    = lipL || lipR || hash5 < 0.8;\n        bool  hole    = hash6 < 0.9;\n\n        d = min(d, sdPan(panSize, panHndl, lipL, lipR, circ, hole));\n    }\n  \n    fill(d, vec2(0.0, 1.0));\n    outl(d, vec2(0.5, 0.0));\n\n    vec3 BG = vec3(1.0, 1.0, 0.95);\n    vec3 FG = vec3(0.1, 0.1, 0.20);\n\n    RGBA.rgb = mix(BG, FG, 1.0 - C);\n    RGBA.a   = 1.0;\n    \n    // view distance field\n    // RGBA.rgb = mix(RGBA.rgb, vec3(0.4, 0.3, 0.1), sin(d * 100.0) * 0.5 + 0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdEllipse( in vec2 p, in vec2 ab )\n{\n    if (abs(ab.x - ab.y) < 1e-3) {\n        return length(p) - ab.x;\n    }\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if (d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n// SebH\n// https://www.shadertoy.com/view/ldjczd\nfloat whangHashNoise(uint u, uint v, uint s)\n{\n    uint seed = (u*1664525u + v) + s;\n    \n    seed  = (seed ^ 61u) ^(seed >> 16u);\n    seed *= 9u;\n    seed  = seed ^(seed >> 4u);\n    seed *= uint(0x27d4eb2d);\n    seed  = seed ^(seed >> 15u);\n    \n    float value = float(seed) / (4294967296.0);\n    return value;\n}\n\n\nmat2 rot2_deg(float deg) {\n    float rads = deg / 360.0 * 3.14159265359 * 2.0;\n    return mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n}\n\n\nfloat smin(float a, float b, float k) {\n    float h = max(k - abs(a-b), 0.) / k;\n    return min(a, b) - h*h*h*k*1./6.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}