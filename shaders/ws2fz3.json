{
    "Shader": {
        "info": {
            "date": "1590551204",
            "description": "decomposition of an image into a periodic component and a smooth component. aims to remove the cross artifact in the DFT of an image\n\nsee: http://helios.mi.parisdescartes.fr/~moisan/papers/download.php?file=2009-11r.pdf",
            "flags": 32,
            "hasliked": 0,
            "id": "ws2fz3",
            "likes": 9,
            "name": "Periodic + Smooth Decomposition",
            "published": 3,
            "tags": [
                "fft",
                "fourier",
                "dft",
                "decomposition"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nivec2 map(vec2 p) {\n    return ivec2(iChannelResolution[1].x*(fract(p)*.5 + .25));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y*2.;\n    vec4 data = texture(iChannel0, uv);\n    vec4 london = texelFetch(iChannel1, map(uv),0);\n\n    vec3 original = london.xyz;\n    vec3 smooth_comp = data.xyz/data.w;\n    vec3 periodic_comp = original - smooth_comp;\n    \n    //flip between the original and the periodic component\n    fragColor.xyz=mix(original, periodic_comp, smoothstep(.2,-.2,cos(iTime*2.)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//buf A calculates the smooth component of the periodic+smooth decomposition\n//see: http://helios.mi.parisdescartes.fr/~moisan/papers/download.php?file=2009-11r.pdf\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nvec2 rand_unit(float seed) {\n    float h1 = hash(seed, 4375893.44353);\n    float h2 = hash(seed, h1);\n    return normalize(tan(vec2(h1,h2))); //see https://www.shadertoy.com/view/3djyWW for an explination of this trick\n}\n\n//distance from p to the edges of a box with verticies at (0,0) and (1,1)\nfloat borders(vec2 p) {\n    p = .5-abs(p-.5);\n    return min(p.x,p.y);\n}\n\n//gradient of the above distance function\nvec2 borders_grad(vec2 p) {\n    p -= .5;\n    return abs(p.x) > abs(p.y) ? vec2(sign(p.x),0.) : vec2(0.,sign(p.y));\n}\n\n//map coordinate in box to cropped portion of london image\n//cropped because the boundaries of the original image are not good (fades to black on one edge, white on another)\n//also does wrapping\nivec2 map(vec2 p) {\n    return ivec2(iChannelResolution[1].x*(fract(p)*.5 + .25));\n}\n\n//random walk on spheres. see: https://www.shadertoy.com/view/WsXBzl\nvec3 rWoS(vec2 p, float seed) {\n    float res = iChannelResolution[1].x;\n    for (int i = 0; i < 100; i++) {\n        seed = hash(seed, seed);\n        vec2 dir = rand_unit(seed);\n        float dist = borders(p);\n        if (dist < .5/res) break;\n        p += dir*dist;\n    }\n    //boundary conditions are the difference between the colour of the image boundy\n    //and the colour of the opposite boundary, divided by 2. this is so when we\n    //subtract this from the original image, boundaries will share the same colour\n    vec3 sample_inside = texelFetch(iChannel1, map(p), 0).xyz;\n    vec3 sample_outside = texelFetch(iChannel1, map(p+borders_grad(p)/res), 0).xyz;\n    return (sample_inside-sample_outside)/2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (iFrame == 0) {\n        fragColor = vec4(0);\n\t}\n    if (texelFetch(iChannel1, ivec2(0), 0).x == 0.) return; //skip if iChannel1 is not loaded\n    vec2 uv = fragCoord/iResolution.xy;\n    float seed = hash(hash(uv.x, uv.y), float(iFrame));\n    fragColor += vec4(rWoS(uv, seed), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}