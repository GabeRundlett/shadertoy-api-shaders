{
    "Shader": {
        "info": {
            "date": "1362565218",
            "description": "Computes pr-ime numbers. The quadratic patterns (vertical lines in this case) of Euler can be clearly seen. Checks are done by following the sequence {2, 4, 2, 4, 6, 2, 6, 4} which skips multiples of 2, 3 and 5.",
            "flags": 0,
            "hasliked": 0,
            "id": "4slGRH",
            "likes": 26,
            "name": "Primes",
            "published": 3,
            "tags": [
                "2d",
                "mathematics"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3442
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n// Info on prime hunting:   https://iquilezles.org/blog/?p=1558\n\n\nbool isPrime( int x )\n{\n\tif( x==1 ) return false;\n\tif( x==2 ) return true;\n\tif( x==3 ) return true;\n\tif( x==5 ) return true;\n\tif( x==7 ) return true;\n\tif( (x&1)==0 ) return false;\n\tif( (x%3)==0 ) return false;\n\tif( (x%5)==0 ) return false;\n\n    int xm = 1 + int(sqrt(float(x)));\n    \n\tint y = 7;\n\tfor( int i=0; i<200; i++ ) // count up to 6000\n\t{\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm    ) return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 4;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 2;  if( y>=xm )    return true;\n\t\t         if( (x%y)==0 ) return false;\n\t\ty += 6;  if( y>=xm )    return true;\n\t}\n\t\n\treturn true;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat s = 0.55 + 0.45*cos(6.2831*iTime/10.0);\n    \n\tvec3 col = vec3(0.0);\n    \n    int y = int( floor(s* fragCoord.y) );\n    int o = int( floor(s*(fragCoord.x - iResolution.x/2.0)) );\n    \n\tif( abs(o)<=y )\n\t{\n        int n = y*y + y + o + 1;\n        \n\t    float f = (isPrime(n)) ? 1.0 : 0.15;\n\t    col = vec3( f*0.25,f,0.0);\n\t}\n\t\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}