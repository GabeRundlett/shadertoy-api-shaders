{
    "Shader": {
        "info": {
            "date": "1482763890",
            "description": " A few weeks ago I was playing around with some noise raymarching and this is what I ended up with.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtGSzh",
            "likes": 37,
            "name": "MightyMorphingPowerSphere",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "noise"
            ],
            "usePreview": 1,
            "username": "Lallis",
            "viewed": 1659
        },
        "renderpass": [
            {
                "code": "#define time iTime\nmat3 rot(vec3 ang)\n{\n\tmat3 x = mat3(1.0,0.0,0.0,0.0,cos(ang.x),-sin(ang.x),0.0,sin(ang.x),cos(ang.x));\n\tmat3 y = mat3(cos(ang.y),0.0,sin(ang.y),0.0,1.0,0.0,-sin(ang.y),0.0,cos(ang.y));\n\tmat3 z = mat3(cos(ang.z),-sin(ang.z),0.0,sin(ang.z),cos(ang.z),0.0,0.0,0.0,1.0);\n\treturn z*y*x;\n}\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,12.7378))) * 43758.5453);\n}\n\nfloat smooth3D(vec3 p)\n{\n    vec3 f = fract(p);\n    p = floor(p);\n    f = f*f*(3.0-2.0*f);\n    \n\tfloat p0 = noise3D(p);\n\tfloat x = noise3D(p+vec3(1.0,0.0,0.0));\n\tfloat y = noise3D(p+vec3(0.0,1.0,0.0));\n\tfloat z = noise3D(p+vec3(0.0,0.0,1.0));\n\tfloat xy = noise3D(p+vec3(1.0,1.0,0.0));\n\tfloat xz = noise3D(p+vec3(1.0,0.0,1.0));\n\tfloat yz = noise3D(p+vec3(0.0,1.0,1.0));\n\tfloat xyz = noise3D(p+1.0);\n\t\n    return mix(\tmix(\tmix(p0, x, \t f.x), \n                    \tmix(y, \txy,  f.x), \tf.y), \n               \tmix(\tmix(z, \txz,\t f.x), \n                    \tmix(yz, xyz, f.x), \tf.y), \tf.z);\n}\n\nfloat fbm(vec3 p)\n{\n \tfloat f = 0.5000*smooth3D(p*1.00);\n    \t  f+= 0.2500*smooth3D(p*2.01);\n    \t  f+= 0.1250*smooth3D(p*4.02);\n    \t  f+= 0.0625*smooth3D(p*8.03);\n    \t  f/= 0.9375;\n    return f;\n}\nfloat sphere( vec3 rp, vec3 c, float r )\n{\n    return distance(rp, c) - r;\n}\n\nfloat map(vec3 rp)\n{\n    rp *= rot(vec3(time*0.25));\n    float d = sphere( rp, vec3(0.0), 1.0+(fbm(rp*8.0+time)*2.0-1.0)*1.0);\n    return d;\n}\n\nvec3 normal(vec3 rp)\n{\n    vec3 eps = vec3( 0.002 ,0.0,0.0);\n\treturn normalize( vec3(\n           map(rp+eps.xyy) - map(rp-eps.xyy),\n           map(rp+eps.yxy) - map(rp-eps.yxy),   //from iq\n           map(rp+eps.yyx) - map(rp-eps.yyx) ) );\n\n}\n\nfloat softShadow(vec3 rp, vec3 ld)\n{\n \tvec3 ro = rp;\n    float ldmax = 20.0;\n    float td = 0.05;\n    float res = 1.0;\n    float d;\n    for(int i = 0; i < 256; i++)\n    {\n     \trp = ro + ld * td;\n        d = map( rp );\n        if( d < 0.001 || td >= ldmax )\n        {\n         \tbreak;   \n        }\n        res = min(res,8.0*d);\n        td += d*0.1;\n    }\n    if( d < 0.001 )\n    {\n     \tres = 0.0;   \n    }\n   \n    return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = 2.0*uv-1.0;\n    p.x*=iResolution.x/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    vec2 m = (iMouse.xy/iResolution.xy)*2.0-1.0;\n    \n    \n    vec3 cp = vec3(0.0,0.0,-2.0);\n    vec3 rd = normalize( vec3(p,0.0) - cp );\n    vec3 ro = cp-vec3(0.0,0.0,2.0);\n    vec3 rp;\n    \n    vec3 ang = vec3(-3.14*m.y,3.14*m.x,0.0);\n    //rd*= rot(ang);\n    //ro*= rot(ang);\n    \n    float td = 0.1;\n    float dmax = 8.0;\n    float d;\n    float mind = 1000.0;\n    \n    for( int i = 0; i < 512; i++ )\n    {\n        rp = ro+rd*td;\n        d = map(rp);\n        mind = min(mind,d);\n        if( d < 0.001 )\n            break;\n        td += d*0.1;\n        if( td > dmax ) \n        {\n            td = dmax;\n            break;\n        }\n    }\n    vec3 keepo = texture(iChannel0, uv*(0.001+0.01*abs(sin(time*0.1)))+time*0.001).rgb;\n    if( d < 0.001 )\n    {\n        vec3 n = normal(rp);\n        vec3 l = normalize(vec3(0.0,0.1,-1.0));//*rot(vec3(0.0,0.0,time));\n        float sha = softShadow( rp, l );\n        col = mix(vec3(0.05),keepo,clamp(0.0,1.0,smoothstep(1.0,0.0,2.0-length(rp))));\n        //PHONG\n        /*\t\t\t\n        vec3 v = normalize(ro-rp);\n        vec3 h = normalize(l+v);\n        \n        float a = 128.0;   \n        float kd = 0.33;\n        float ks = 0.33;\n        float ss = 0.33;\n        \n        col*=max(0.0,dot(n,l))*kd+max(0.0,pow(dot(n,h),a))*ks+sha*ss;\n        */\n        col*=max(0.0,dot(n,l))*sha;\n        \n    }\n    else\n    {\n         col += (keepo*pow(dot(rd,vec3(0.0,0.0,1.0)),24.0))*exp(-mind+1.0+sin(time));   \n    }\n    col = mix(col,keepo*(max(0.0,1.0-mind*8.0)),min(1.0,length(rp)*0.025));   \n    \n    col = clamp(col, 0.0, 1.0);\n    col = pow(col, vec3(0.45));\n    \n    float f = 8.0;\n    col = (1.0/(1.0+exp(4.0-f*col))-0.0003)/(0.982-0.018);\n    \n    //col = 1.0-col;\n    \n    p.x/=iResolution.x/iResolution.y;\n    col *= smoothstep( 1.325, 0.825, abs(p.x) );\n    col *= smoothstep( 1.325, 0.825, abs(p.y) );\n    \n    float dither = (noise3D(vec3(p,time))*2.0-1.0)*2.0/256.0;\n    col += dither;\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}