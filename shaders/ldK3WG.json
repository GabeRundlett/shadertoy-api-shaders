{
    "Shader": {
        "info": {
            "date": "1456256184",
            "description": "Just some clean colored rings to warm up my brain for the day.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldK3WG",
            "likes": 7,
            "name": "Colored Rings",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Cubeleo",
            "viewed": 894
        },
        "renderpass": [
            {
                "code": "//iq's smooth HSV to RGB\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color;\n\t\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv - vec2(.5);\n    uv.x = uv.x * (iResolution.x / iResolution.y);\n    \n    float d = distance(uv, vec2(0));\n    \n    // scale the figure\n    d = d * 30.;\n    \n    float hue = floor(d) / 20. + iTime * .1;\n    \n    float value = .9;\n    \n    // create space between the rings\n    value = value * smoothstep(0., .2, fract(d));\n    value = value * smoothstep(.9, .7, fract(d));\n    \n    // limit the number of rings\n    value = value * float(d > 2.) * float(d < 13.);\n    \n    vec3 hsv = vec3(hue, .75, value);\n\tcolor = hsv2rgb_smooth(hsv);\n    \n    fragColor = vec4(color, 1);\n}    \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}