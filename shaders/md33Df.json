{
    "Shader": {
        "info": {
            "date": "1677937428",
            "description": "Found this website and messed around from there:\nhttps://blbadger.github.io/clifford-attractor.html\n\nIt takes ~20 secs to generate",
            "flags": 32,
            "hasliked": 0,
            "id": "md33Df",
            "likes": 17,
            "name": "Attractor Fun",
            "published": 3,
            "tags": [
                "attractor",
                "clifford"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (px - 0.5 * res) / res.y;\n    \n    vec4 tx = texture(ch0, px/res + vec2(0,0.045)); \n    \n    vec3 col = 0.75 + 0.25 * cos(2.*pi*(exp(-8.*tx.w) +0.5+vec3(2,1,3)/3.));\n    col *= 1.35 * tx.z;\n    col += 0.05;\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.1415926535\n#define ch0 iChannel0\nvec4 cell(in sampler2D ch, in ivec2 p) {\n    ivec2 r = ivec2(textureSize(ch, 0));\n    p = (p+r) % r;\n    return texelFetch(ch, p, 0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float f1(float x) {\n    return (1.-exp(-2. * abs(x)))*sin(x);\n}\n\nfloat f2(float x) {\n    return (1.-exp(-2. * abs(x)))*cos(x);\n}\n\n// improvement:\n// store particle position in 1 cell, use the others for color\n\nvoid mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (px - 0.5 * res) / res.y;\n    \n    ivec2 ipx = ivec2(px);    \n    vec4 tx = cell(ch0, ipx);\n    \n    vec2 p = tx.xy;\n    if (iFrame < 1) \n        p = vec2(0.5);\n           \n    float a = 2.;\n    float b = 2.;\n    float c = 1.;\n    float d = -1.;\n    \n    vec2 q = p;\n    float v = tx.z;\n    float hue = tx.w;\n    for (float i = 0.; i < 150.; i++) {\n        // New position\n        q = vec2(f1(a * p.y) + c * f2(a * p.x),\n                 f1(b * p.x) + d * f2(b * p.y));\n        \n        float ld = length(uv-0.22*q);\n        float pq = dot(p-q,p-q);\n        \n        // Draw circle boundary at point\n        float s = 0.07 * step(abs(ld-0.002*(1.+pq)), 1./res.y);\n        \n        // Darken with larger, weaker circle\n        s -= 0.002 * step(ld, 0.01*(1.+pq));\n        \n        // idk\n        s = mix(s, -0.1*s, 1.-exp(-0.3*pq));\n        \n        // Blend values\n        v = mix(v, 1., s);\n        hue += 0.02 * exp(-100. * ld);\n        \n        p = q;\n    }\n    \n    v = clamp(v, 0., 1.);\n    v *= 0.999;\n    hue *= 0.99;\n    fragColor = vec4(q, v, hue);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}