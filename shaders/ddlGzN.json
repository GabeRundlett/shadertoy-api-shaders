{
    "Shader": {
        "info": {
            "date": "1666553403",
            "description": "shader for raymarching, edit it as you want",
            "flags": 0,
            "hasliked": 0,
            "id": "ddlGzN",
            "likes": 4,
            "name": "Raymarcher 3d",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 20.\n#define SURF_DIST .001\n\n#define FOG_START 10.\n#define FOG_END 20.\n\n#define BG_COLOR vec3(135, 206, 235)\n#define OBJ_COLOR vec3(0,255,25)\n\n#define GLOW_DIST .1\n#define GLOW_COL vec3(255,255,255)\n\n#define S smoothstep\n#define T iTime\n\nvec3 camPos = vec3(0,0,0);\n\nstruct MarchData  {\n    float mindistance;\n    bool didCollide;\n    bool doGlow;\n    float distanceTravelled;\n    int steps;\n    vec3 color;\n    float minDist;\n};\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat clmp(float a,float b,float h) {\n    if(h<=a)return a;\n    if(h>=b)return b;\n    return h;\n}\nfloat fogAmount(float d) {\n    return clmp(0.,FOG_END-FOG_START,d-FOG_START)/(FOG_END-FOG_START);\n}\n\nvec4 sdSphere(vec3 p)\n{\n  vec3 col = vec3(0,255,0);\n\n  //float p2 = T-2.0;\n  //float d = length(vec3(p.x-(3.0*sin((2.0*3.14159265*p2)/3.0)),p.y,p.z))-float(1.);\n  float d = length(p)-float(1.);\n  return vec4(col,d);\n}\n\nvec4 sdRect(vec3 p, vec3 b)\n{\n  vec3 col = vec3(255,0,0);\n\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return vec4(vec3(col),d);\n}\nvec4 sdFractal(vec3 p)\n{\n  vec3 col = vec3(0,255,0);\n  vec3 np = vec3(mod(p.x, 3.)-1.5,mod(p.y, 3.)-1.5,mod(p.z, 3.)-1.5);\n  \n  float d = length(np)-float(1.);\n  return vec4(col,d);\n}\nvec4 sdPlane(vec3 p) {\n    vec3 col = vec3(0,220,100);\n    \n    float dist = p.y+1.3;\n    \n    return vec4(col,dist);\n}\n\nvec4 sdTorus(vec3 p) {\n    vec2 t = vec2(1.,.3);\n    \n    float dist = length(vec2(length(vec2(p.x, p.z))-t.x,p.y))-t.y;\n    \n    vec3 col = vec3(255, 255, 0);\n    \n    return vec4(col,dist);\n}\n\nvec4 sierpinskiTetrahedron(vec3 p) {\n    vec3 col = vec3(127,127,127);\n    \n    vec3 z = p;\n    float Scale = 2.;\n    \n    vec3 a1 = vec3(1,1,1);\n\tvec3 a2 = vec3(-1,-1,1);\n\tvec3 a3 = vec3(1,-1,-1);\n\tvec3 a4 = vec3(-1,1,-1);\n\tvec3 c;\n\tint n = 0;\n\tfloat dist, d;\n\twhile (n < 20) {\n\t\t c = a1; dist = length(z-a1);\n\t        d = length(z-a2); if (d < dist) { c = a2; dist=d; }\n\t\t d = length(z-a3); if (d < dist) { c = a3; dist=d; }\n\t\t d = length(z-a4); if (d < dist) { c = a4; dist=d; }\n\t\tz = Scale*z-c*(Scale-1.0);\n\t\tn++;\n\t}\n\n\tfloat DE = length(z) * pow(Scale, float(-n));\n    return vec4(col,DE);\n}\n\nvec4 smin(vec4 a, vec4 b, float k) {\n    float h = clamp(0.5 + 0.5*(a.w-b.w)/k, 0.0, 1.0);\n    vec3 color = vec3(mix(a.x, b.x, h),mix(a.y, b.y, h),mix(a.z, b.z, h)); \n    float dist = mix(a.w, b.w, h) - k*h*(1.0-h);\n    return vec4(color,dist);\n}\nvec4 smax(vec4 a, vec4 b, float k) {\n   return -smin(-a,-b,k);\n}\n\nvec4 GetDist(vec3 p) {\n    float s = .3;\n\n    vec4 d1 = smin(sdSphere(vec3(p.x+1.8,p.y,p.z)),sdRect(vec3(p.x-1.3,p.y,p.z-.7),vec3(1,1,2)),s);\n    return smin(sdTorus(p),d1,s);\n}\n\nMarchData RayMarch(vec3 ro, vec3 rd) {\n    MarchData _dat=MarchData(0., false, false, 0., 0, vec3(127), GLOW_DIST);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*_dat.distanceTravelled;\n        float dS = GetDist(p).w;\n        _dat.distanceTravelled += dS;\n        _dat.steps += 1;\n        _dat.color = vec3(GetDist(p));\n        \n        if(dS<_dat.minDist) _dat.minDist=dS;\n        \n        if(_dat.distanceTravelled<MAX_DIST && abs(dS)<SURF_DIST) {\n            _dat.didCollide = true;\n            return _dat;\n        }\n    }\n    \n    if (_dat.minDist < GLOW_DIST && !_dat.didCollide) _dat.doGlow = true;\n    return _dat;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 4, -3)+camPos;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.)+camPos;\n    vec3 col = BG_COLOR/255.;\n   \n    MarchData _dat = RayMarch(ro, rd);\n\n    if(_dat.didCollide) {\n        vec3 p = ro + rd * _dat.distanceTravelled;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif)*(_dat.color/255.);\n    }\n    if (_dat.doGlow) {\n        col = GLOW_COL;\n    }\n    \n    //col = mix(col, BG_COLOR/255., fogAmount(_dat.distanceTravelled));\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}