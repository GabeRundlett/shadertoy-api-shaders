{
    "Shader": {
        "info": {
            "date": "1478982181",
            "description": "This shot is in 2001 Space Odyssey when Monolith appears. \nThe clouds modified from iq's clouds https://www.shadertoy.com/view/XslGRr",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdXR7",
            "likes": 17,
            "name": "Dawn of Man",
            "published": 3,
            "tags": [
                "raymarching",
                "monolith"
            ],
            "usePreview": 0,
            "username": "yibojiang",
            "viewed": 1171
        },
        "renderpass": [
            {
                "code": "#define PRECI 0.001\n#define tmax 300.0\n#define tmin 0.0\n\nfloat iqhash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( vec3 x )\n{\n    // The noise function returns a value in the range -1.0f -> 1.0f\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f       = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float v = mix(mix(mix( iqhash(n+0.0  ), iqhash(n+1.0  ),f.x),\n                   mix( iqhash(n+57.0 ), iqhash(n+58.0 ),f.x),f.y),\n               mix(mix( iqhash(n+113.0), iqhash(n+114.0),f.x),\n                   mix( iqhash(n+170.0), iqhash(n+171.0),f.x),f.y),f.z);\n    return -1.0 + 2.0 * v;\n}\n\nfloat noise11( float x ){\n\tfloat p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix(iqhash(p), iqhash(p + 1.0), f);\n}\n\nfloat map(vec3 p){\n    vec3 b = vec3(2.0,4.5, 0.5);\n    vec3 d = abs(p-vec3(0.0, 0.5, 1.7)) - b;\n    float box = min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\treturn box;\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n    float t = tmin;\n    for (int i = 0; i < 512; ++i){\n    \tfloat dist = map(ro + rd*t);\n    \t\n    \tif (dist <= PRECI){\n    \t\tbreak;\n    \t}\n\t\t\n    \tif (t>tmax){\n    \t\tbreak;\n    \t}\n        \n        t = t + dist;\n    }\n    \n    return t;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat cloudmap(vec3 p){\n    //p = p * 2.0;\n    vec3 q = p - vec3(0.0,0.0,1.0)* iTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q ); q = q*2.01;\n    f += 0.06250*noise( q ); q = q*2.02;\n    f += 0.03125*noise( q );\n    return 2.0 - length(p) + f * 5.0;\n\n}\n\nvec3 sundir = normalize(vec3(0.0, 10.0,2.9));\n\nvec4 integrate( in vec4 sum, in float dif, in float den, in vec3 bgcol, in float t )\n{\n    // lighting\n    vec3 lin = vec3(0.65,0.7,0.75)*0.4 + vec3(1.0, 0.5, 0.2)*dif * 2.0;        \n    vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.4,0.3,0.35), den ), den );\n    col.xyz *= lin;\n    col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );\n    // front to back blending    \n    col.a *= 0.4;\n    col.rgb *= col.a;\n    return sum + col*(1.0-sum.a);\n}\n\n\nvec4 raymarchCloud(vec3 ro, vec3 rd, vec3 bgcol){\n    vec4 sum = vec4(0.0);\n    float t = 0.0;\n\t\n    for(int i=0; i< 50; i++) { \n        vec3  pos = ro + t*rd - vec3(0.7, 5.0, 0.0);\n        if( sum.a > 0.99 ) \n            break; \n        float den = cloudmap( pos ); \n        if( den>0.01 ) { \n            float dif =  clamp((den - cloudmap(pos+0.3*sundir))/0.6, 0.0, 1.0 );\n            sum = integrate( sum, dif, den, bgcol, t ); \n        } \n\n \t\tt += max(0.05,0.02*t);\n    }\n    \n    return clamp( sum, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;\n\tvec3 ro = vec3(0.0, 0.1, 0.0  );\n    vec3 ta = vec3(0.0, 10.0, 1.0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(uv.xy, 2.0) );\n    rd = normalize(rd);\n    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n\tfloat result = raymarch(ro, rd);\n\tvec3 color = mix(vec3(84.0, 69, 56.0)/255.0, vec3(134.0, 106.0, 65.0)/255.0, \n                     smoothstep(0.0, 1.0, -uv.y));\n\n    vec3 hit = ro + result*rd;\n\tif (result > tmax){\n        //draw moon\n    \tfloat moon = smoothstep(0.0, 0.01, 0.18 - length(uv- vec2(0.0,0.4)));\n        vec2 moonpos = uv - vec2(0.0,0.43);\n        float r = noise11(atan(moonpos.x, moonpos.y)*7.0 + 2.0) * 0.008;\n        float moonshade = smoothstep(0.0, 0.01, 0.18 + r - length(moonpos));\n        moon = moon - min(moon,moonshade);    \n        color = mix(color, mix(vec3(0.0),vec3(1.0), 2.5*length(moonpos) ), moon );\n        \n        color += 2.0*vec3(1.0,0.6,0.6)*pow( sun, 256.0 );\t\n        \n        //draw clouds\n        vec4 res = raymarchCloud( ro, rd, color );\n   \t\tcolor = color*(1.0-res.w) + res.xyz;\n\t\n\t}\n    else{\n        //draw Monolith\n        color = vec3(0.0);\n    }\n    \n    color += 0.3*vec3(1.0,0.4,0.2)*pow( sun, 128.0 );   \n\tfragColor = vec4(color.xyz, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}