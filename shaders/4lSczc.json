{
    "Shader": {
        "info": {
            "date": "1509455826",
            "description": "Same shader as https://www.shadertoy.com/view/ld2fRt (by @PrzemyslawZaworski) but with isolines and some relief added.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lSczc",
            "likes": 24,
            "name": "Hypsometric map generator - il",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "perlin",
                "map",
                "warp",
                "isolines",
                "generator",
                "cartography"
            ],
            "usePreview": 0,
            "username": "jmpep",
            "viewed": 1611
        },
        "renderpass": [
            {
                "code": "#define INTERVAL_COARSE  0.4\n#define INTERVAL_FINE    0.1\n#define ISOLINES 1\n#define FAKE_RELIEF 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 deltaUV = 1.0 / iResolution.xy;\n    \n    // compute isolines\n    float tc = texture(iChannel0, uv).r;\n    float tr = texture(iChannel0, uv + vec2(deltaUV.x, 0.0)).r;\n    float tu = texture(iChannel0, uv + vec2(0.0, deltaUV.y)).r;\n    float tl = texture(iChannel0, uv - vec2(deltaUV.x, 0.0)).r;\n    float td = texture(iChannel0, uv - vec2(0.0, deltaUV.y)).r;    \n       \n    // compute isocontours   \n    float fc    = abs(fract(tc / INTERVAL_COARSE + 0.5) - 0.5); // (technique inspired by https://www.shadertoy.com/view/ls23WR)\n#if ISOLINES    \n    vec2  gradc = vec2(tr-tl, tu-td) / INTERVAL_COARSE;\n    float ic    = 1.0 - clamp(abs(fc) / length(gradc), 0.0, 1.0);\n   \n    float fi    = abs(fract(tc / INTERVAL_FINE + 0.5) - 0.5);\n    vec2  gradi = vec2(tr-tl, tu-td) / INTERVAL_FINE;\n    float ii    = 1.0 - clamp(abs(fi) / length(gradi), 0.0, 1.0);\n    \n    // compute colors\n\tfloat color_isolines  = 1.0 - (0.5 * ic + 0.15*ii);   \n#else\n    float color_isolines = 1.0;\n#endif\n    \n    if (tc<0.1) fragColor=vec4(0.77,0.90,0.98,1.0);\n    else\n    if (tc<0.2) fragColor=vec4(0.82,0.92,0.99,1.0);\n    else\n    if (tc<0.3) fragColor=vec4(0.91,0.97,0.99,1.0);\n    else\n    if (tc<0.4) fragColor=vec4(0.62,0.75,0.59,1.0);\n    else\n    if (tc<0.5) fragColor=vec4(0.86,0.90,0.68,1.0);\n    else\n    if (tc<0.6) fragColor=vec4(0.99,0.99,0.63,1.0);\n    else\n    if (tc<0.7) fragColor=vec4(0.99,0.83,0.59,1.0);\n    else\n    if (tc<0.8) fragColor=vec4(0.98,0.71,0.49,1.0);     \n    else\n    if (tc<0.9) fragColor=vec4(0.98,0.57,0.47,1.0);        \n\telse      \n    fragColor=vec4(0.79,0.48,0.43,1.0);\n\n#if FAKE_RELIEF        \n    float relief = mix(1.0, 0.5 * fc + 0.75, 0.8);   \n    fragColor.rgb = fragColor.rgb * relief;\n#endif        \n    \n    fragColor.rgb = fragColor.rgb * color_isolines;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//reference : https://www.shadertoy.com/view/MtcXDr#\nfloat noise (vec3 n) \n{ \n\treturn fract(sin(dot(n, vec3(95.43583, 93.323197, 94.993431))) * 65536.32);\n}\n\nfloat perlin_a (vec3 n)\n{\n    vec3 base = floor(n * 64.0) * 0.015625;\n    vec3 dd = vec3(0.015625, 0.0, 0.0);\n    float a = noise(base);\n    float b = noise(base + dd.xyy);\n    float c = noise(base + dd.yxy);\n    float d = noise(base + dd.xxy);\n    vec3 p = (n - base) * 64.0;\n    float t = mix(a, b, p.x);\n    float tt = mix(c, d, p.x);\n    return mix(t, tt, p.y);\n}\n\nfloat perlin_b (vec3 n)\n{\n    vec3 base = vec3(n.x, n.y, floor(n.z * 64.0) * 0.015625);\n    vec3 dd = vec3(0.015625, 0.0, 0.0);\n    vec3 p = (n - base) *  64.0;\n    float front = perlin_a(base + dd.yyy);\n    float back = perlin_a(base + dd.yyx);\n    return mix(front, back, p.z);\n}\n\nfloat fbm(vec3 n)\n{\n    float total = 0.0;\n    float m1 = 1.0;\n    float m2 = 0.1;\n    for (int i = 0; i < 5; i++)\n    {\n        total += perlin_b(n * m1) * m2;\n        m2 *= 2.0;\n        m1 *= 0.5;\n    }\n    return total;\n}\n\nvec3 heightmap (vec3 n)\n{\n\treturn vec3(fbm((5.0 * n) + fbm((5.0 * n) * 3.0 - 1000.0) * 0.05),0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n\tfloat t = floor(iTime*0.33);\n    \n    float h = (heightmap(vec3(uv.xy*5.0,t)*0.02)-1.0).r;\n    \n\tfloat color = clamp(vec4(vec3((heightmap(vec3(uv.xy*5.0,t)*0.02)-1.0)),1.0).r,0.0,1.0);   \n    \n    fragColor = vec4(0.9*color,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}