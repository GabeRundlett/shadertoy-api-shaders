{
    "Shader": {
        "info": {
            "date": "1462806825",
            "description": "** PI **",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGXR1",
            "likes": 6,
            "name": "Punched Pi In The Sky",
            "published": 3,
            "tags": [
                "pi",
                "punchcard"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1222
        },
        "renderpass": [
            {
                "code": "// \"Punched Pi In The Sky\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Large window helps; mouse enabled.\n\nfloat PrRnd2BoxDf (vec3 p, vec3 b, float r);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Fbm2 (vec2 p);\n\nconst float pi = 3.14159;\n\nmat3 vuMat;\nvec3 ltDir;\nvec2 cSize;\nfloat dstFar, tCur;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  q = p.xzy;\n  d = PrRnd2BoxDf (q, vec3 (cSize.x - 0.1, 0.003, cSize.y - 0.1), 0.1);\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec2 u;\n  float a;\n  rd = rd * vuMat;\n  a = 0.5 * atan (length (rd.xy), rd.z);\n  rd = normalize (vec3 (rd.xy * tan (a), 1.));\n  u = vec2 (0.01 * tCur + rd.xy / rd.z);\n  return mix (mix (vec3 (0., 0., 0.7), vec3 (0.8), 0.7 * Fbm2 (12. * u)),\n     vec3 (0.3, 0.3, 0.6), smoothstep (0.35 * pi, 0.4 * pi, a));\n}\n\n#define NDIG  51\n// 314159265358979323846264338327950288419716939937510\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, bgCol;\n  vec2 fd, id, cBox;\n  float pv[NDIG], dstObj, t;\n  pv[0]  = 3.;\n  pv[1]  = 1.; pv[2]  = 4.; pv[3]  = 1.; pv[4]  = 5.; pv[5]  = 9.;\n  pv[6]  = 2.; pv[7]  = 6.; pv[8]  = 5.; pv[9]  = 3.; pv[10] = 5.;\n  pv[11] = 8.; pv[12] = 9.; pv[13] = 7.; pv[14] = 9.; pv[15] = 3.;\n  pv[16] = 2.; pv[17] = 3.; pv[18] = 8.; pv[19] = 4.; pv[20] = 6.;\n  pv[21] = 2.; pv[22] = 6.; pv[23] = 4.; pv[24] = 3.; pv[25] = 3.;\n  pv[26] = 8.; pv[27] = 3.; pv[28] = 2.; pv[29] = 7.; pv[30] = 8.;\n  pv[31] = 5.; pv[32] = 0.; pv[33] = 2.; pv[34] = 8.; pv[35] = 8.;\n  pv[36] = 4.; pv[37] = 1.; pv[38] = 9.; pv[39] = 7.; pv[40] = 1.;\n  pv[41] = 6.; pv[42] = 9.; pv[43] = 3.; pv[44] = 9.; pv[45] = 9.;\n  pv[46] = 3.; pv[47] = 7.; pv[48] = 5.; pv[49] = 1.; pv[50] = 0.;\n  t = mod (2. * tCur, 60.);\n  cSize = vec2 (2.269, 1.);\n  dstObj = ObjRay (ro, rd);\n  bgCol = BgCol (rd);\n  cBox = vec2 (0.45, 0.3);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    col = vec3 (1., 0.9, 0.9);\n    ro.y *= -1.;\n    fd = 0.5 * (ro.xy / cSize + 1.) * vec2 (84., 13.) - vec2 (2., 0.5);\n    id = floor (fd) - vec2 (0., 2.);\n    fd = fract (fd) - 0.5;\n    fd.y *= -1.;\n    if (id.y <= 9. && id.x >= 0. && id.x < 80. && vn.z < -0.99) {\n      if (id.y >= 0.) {\n        col *= 1. - 0.15 * (1. - smoothstep (0.35, 0.38, abs (fd.x))) *\n           (1. - smoothstep (0.25, 0.27, abs (fd.y)));\n        col = mix (col, vec3 (0.05), ShowInt (fd - vec2 (0.2, -0.15),\n           cBox, 1., id.y));\n      } else if (id.y == -1.) col = mix (col, vec3 (0.05),\n         ShowInt (fd - vec2 (0.2, -0.15), 0.8 * cBox, 1., mod (id.x + 1., 10.)));\n    }\n    col *= (0.5 + 0.5 * max (dot (vn, ltDir), 0.));\n    if (t > 2.) {\n      for (int k = 0; k < NDIG; k ++) {\n        if (id.x == 6. + float (k)) {\n          if (id.y == pv[k]) col = mix (col, bgCol,\n             (1. - step (0.38, abs (fd.x))) * (1. - step (0.27, abs (fd.y))));\n          else if (id.y == -2. && vn.z < -0.99) col = mix (col, vec3 (0.2),\n             ShowInt (fd - vec2 (0.2, -0.15), 1.2 * cBox, 1., pv[k]));\n        }\n        if (float (k + 1) >= t - 2.) break;\n      }\n    }\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  }\n  dstFar = 15.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  ro = vuMat * vec3 (0., 0., -7.);\n  ltDir = vuMat * normalize (vec3 (0., 0., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrRnd2BoxDf (vec3 p, vec3 b, float r)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return max (length (max (d.xz, 0.)) - r, d.y);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.23, 0.27, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.7, 2.3);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}