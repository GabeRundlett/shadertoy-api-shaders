{
    "Shader": {
        "info": {
            "date": "1618690551",
            "description": "Bottom: noise isovalues are not equidistant.\nTop-Left: Drawing iso-spaced lines upon noise based on curved distance to isoline 0.\nProblem: discontinuities at creasts + pinched  look there.\nTop-Right: curve distance to peak. \nProblem: cellular look.",
            "flags": 16,
            "hasliked": 0,
            "id": "fsfXWM",
            "likes": 8,
            "name": "noise balanced isolines",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 395
        },
        "renderpass": [
            {
                "code": "// Fork of \"test3: Curl noise balance\"  https://shadertoy.com/view/NssXD4\n// Fork of \"test1: Noise balance\"  https://shadertoy.com/view/ssXXWN\n\n\n#define hash(p ) ( 2.* fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) - 1. )\n#define grad(x,y)  dot( hash( i+vec2(x,y) ), f-vec2(x,y) )\n#define Ierf(x) ( atanh(x) / 1.2 )          // not so bad reciprocal\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor(p), f = fract(p), // u = f*f*(3.-2.*f); // smoothstep\n                                        u = f*f*f*( 10. +f*(6.*f-15.));\n    return mix( mix( grad(0,0), grad(1,0), u.x),\n                mix( grad(0,1), grad(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 U ) { // inspired from https://www.shadertoy.com/view/XdXGW8\n    float v = 0., s = .5;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    for( int i=0; i<3; i++, s/=2., U*=m )\n        v  += s * noise( U ); \n    return v;\n}\n\n#define func( P ) ( keyToggle(32) ? perlin( P ) : noise( P ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, eps = vec2(1e-3,0),\n         U = u / R.y,\n         P = 8.*U - vec2(0.,.5*iTime), P0=P;\t\n    O-=O;\n\tfloat l = 0., f = func(P);\n    \n    if( U.y > .4) {\n        if ( int(u.x) == int(R.x/2.) ) { O.r++; return; } // red separator\n        float s = .1;                               // steps size\n        if (U.x < .5*R.x/R.y)                       // --- left: descent to isoline-0\n            for (int i=0; i < 30; i++ ){\n                vec2 G =  ( f - vec2( func(P-eps.xy), func(P-eps.yx) )) /eps.x; // gradient\n             // vec2 G = vec2( dFdx(f), dFdy(f) ) * R.y/8.;\n                P -= s* f * G/dot(G,G);             // descent\n                l += s* f / length(G);              // optional: cumul curved lenght\n                f = func( P ); \n             // if ( length(G) < .2 ) return;       // trying to cull crests and valleys\n                if (abs(f) < 1e-3) break;           // isovalue 0 reached\n            }\n        else                                        // --- right: ascent to peak\n            for (int i=0; i < 30; i++ ){\n                vec2 G =  ( f - vec2( func(P-eps.xy), func(P-eps.yx) )) /eps.x; // gradient\n             // vec2 G = vec2( dFdx(f), dFdy(f) ) * R.y/8.;\n#if 1                                               // ... all from positive pole\n                P += s* G;                          // ascent\n                l += s* length(G);                  // optional: cumul curved lenght\n#else                                               // ... from both poles\n                P += s* sign(f)*  G;                // ascent\n                l += s* sign(f)* length(G);         // optional: cumul curved lenght\n#endif\n                f = func( P ); \n                if ( length(G) < 1e-2 ) break;      // creast or valley reached\n            }\n    //  l = length(P-P0);                           // optional: use straight distance instead of curved (ok for descent )\n        f = l;\n    }\n/*  else {\n        O = vec4(.5+f);                                           // draw noise\n        O.b += clamp(.5-.5*abs(f)/fwidth(f), 0.,1.); \n        return;\n    }\n*/\n\n // O = vec4(.5+.5*sin(50.*l));\n    f = 8.*f; O += clamp(1. - abs(fract(f)-.5)/fwidth(f), 0.,1.); // draw isolines\n    O = sqrt(O);                                                  // to sRGB\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}