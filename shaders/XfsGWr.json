{
    "Shader": {
        "info": {
            "date": "1702960008",
            "description": "Implementation of Langton's ant universal Turing machine.\nFor best results disable the FPS cap by setting layout.frame_rate to 0 in about:config (if you're using Firefox), use --args --disable-frame-rate-limit for Chrome.",
            "flags": 32,
            "hasliked": 0,
            "id": "XfsGWr",
            "likes": 1,
            "name": "Langton's ant",
            "published": 3,
            "tags": [
                "automata",
                "cellular",
                "ant",
                "turing",
                "machine",
                "langtons"
            ],
            "usePreview": 0,
            "username": "rafa_br34",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 FragColor, in vec2 FragCoord) {\n    Cell C = ReadCell(READP_V4(C_StateBuffer, uvec2(FragCoord) / 1u));\n    \n    FragColor = vec4(ColorFromState(C.State), 0.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define C_StateBuffer iChannel0\n\n\n// Variable Extensions\n#define URES uvec2(iResolution)\n#define IRES ivec2(iResolution)\n#define FRES vec2(iResolution)\n\n#define UFRAME uint(iFrame)\n#define IFRAME int(iFrame)\n#define FFRAME float(iFrame)\n\n#define TIMESTAMP ((uint(iDate.x) - 1970u) * 31557600u) + (uint(iDate.y) * 2629800u) + (uint(iDate.z - 1.0) * 86400u) + uint(iDate.w)\n\n// Vector utilities\n#define FLATTEN_V2(Width, Vector) ((Width) * (Vector).y + (Vector).x)\n#define EXPAND_V2(Width, Index) (Index) % Width, (Index) / Width\n\n#define UNIQUE_STATE(Vector) (FLATTEN_V2(URES.x, uvec2(Vector)) + (UFRAME * URES.x * URES.y))\n\n#define READP_V4(Buffer, Position) texelFetch(Buffer, ivec2(Position), 0)\n#define READP_F32(Buffer, Position) READP_V4(Buffer, ivec2(Position) / 4)[FLATTEN_V2(2, ivec2(Position)) % 4]\n#define READP_U8(Buffer, Position) READP_F32(Buffer, ivec2(Position) / 4)[FLATTEN_V2(2, ivec2(Position)) % 4]\n\n#define READI_V4(Buffer, Index) READP_V4(Buffer, ivec2(EXPAND_V2(URES.x, uint(Index))))\n#define READI_F32(Buffer, Index) READI_V4(Buffer, uint(Index) / 4u)[uint(Index) % 4u]\n#define READI_U8(Buffer, Index) (uint(READI_F32(Buffer, uint(Index) / 4u)) & (0xFFu << ((Index % 4u) * 8u))) >> ((Index % 4u) * 8u)\n\n#define U8(V) uint(int(V) % 256)\n#define FU8(V) float(U8(V)) / 255.0\n\n#define XOR_SHIFT32(S) S ^= (S << 13); S ^= (S >> 17); S ^= (S << 5);\n\n\nconst int C  =  0;\nconst int R  =  1;\nconst int L  = -1;\nconst int U  = -2;\n\nconst int[] c_StateMachine = int[](\n    R,R,L,L,L,R,L,L,L,R,R,R // Creates a filled triangle shape\n    //L,L,R,R,R,L,R,L,R,L,L,R // Creates a convoluted highway\n    //L,R,R,R,R,R,L,L,R // Fills space in a square around itself\n    //L,L,R,R // Grows symmetrically\n    //R,L,R // Growns chaotically\n    \n    //R,L // Default Langton's ant\n);\nconst uint c_StateCount = uint(c_StateMachine.length());\n\n\n// Get cell color from cell state\nvec3 ColorFromState(in uint State) {\n    XOR_SHIFT32(State); State *= 0x9E3779B9u;\n    \n    return vec3(\n        FU8((State >> 16) & 0xFFu),\n        FU8((State >> 8) & 0xFFu),\n        FU8((State >> 0) & 0xFFu)\n    );\n}\n\n\n\n\nstruct Cell {\n    uint State;\n    \n    // Stored in a 8-bit value\n    int Direction;\n    bool Moving;\n};\n\n\nCell ReadCell(in vec4 Input) {\n    Cell N;\n    \n    N.State = (uint(Input.x) & 0xFFFF00u) >> 8; // I doubt anyone would ever build a langton ant with 65535 states but you can never know\n    \n    uint Flags = (uint(Input.x) & 0x0000FFu);\n    N.Direction = int(Flags & 3u);\n    N.Moving = ((Flags >> 3) & 1u) > 0u;\n    \n    return N;\n}\n\n\nvec4 WriteCell(in Cell Input) {\n    return vec4(\n        float(\n        ((Input.State % c_StateCount) << 8) |\n        (uint(Input.Moving) << 3) | uint(Input.Direction % 4)),\n        0.0, 0.0, 0.0\n    );\n}\n\n\n\n//   0 \n// 3   1\n//   2 \nvoid ComputeCell(inout Cell C, in Cell[4] Neighbors) {\n    if (C.Moving) { C.Moving = false; C.State = (C.State + 1u) % c_StateCount; }\n    \n    \n    for (uint i = 0u; i < 4u; i++) {\n        Cell N = Neighbors[i];\n        // int[](2, 3, 0, 1)\n        // int[](1, 0, 3, 2)\n        if (N.Moving && N.Direction == int[](2, 3, 0, 1)[i]) { //int[](0, 1, 2, 3)\n            C.Direction = (N.Direction + c_StateMachine[C.State] + 4) % 4;\n            C.Moving = true;\n            break;\n        }\n    }\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage(out vec4 FragColor, in vec2 FragCoord) {\n    #define N(X, Y) ReadCell(READP_V4(C_StateBuffer, ivec2(FragCoord) + ivec2(X, Y)))\n    Cell C = N(0, 0);\n    \n    ComputeCell(\n        C,\n        Cell[](N(0, 1), N(1, 0), N(0, -1), N(-1, 0))\n    );\n    \n    uvec2 F = uvec2(FragCoord);\n    if (iFrame == 0 && F.x == URES.x / 2u && F.y == URES.y / 2u) {\n        C.Moving = true;\n        C.Direction = 0;\n    }\n\n    FragColor = WriteCell(C);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}