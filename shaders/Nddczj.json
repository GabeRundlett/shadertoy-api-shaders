{
    "Shader": {
        "info": {
            "date": "1653754956",
            "description": "Point cloud reacting to music",
            "flags": 32,
            "hasliked": 0,
            "id": "Nddczj",
            "likes": 1,
            "name": "Backfisch point cloud",
            "published": 3,
            "tags": [
                "sound",
                "points"
            ],
            "usePreview": 0,
            "username": "Ossitech",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "#define POINT_DISTANCE 75\n#define POINT_SIZE 20\n\nint points(vec2 pos, vec2 d)\n{\n    vec2 uv = (pos + d) / iResolution.xy;\n    uv *= 3.0;\n    \n    if(int(pos.x + d.x) % POINT_DISTANCE < POINT_SIZE && int(pos.y + d.y) % POINT_DISTANCE < POINT_SIZE)\n    {\n\nreturn 1;\n}\n\n\n    \n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    int mask = 0;\n    \n    mask += points(fragCoord, vec2(iTime * 300.0, 0.0));\n    //mask += points(fragCoord, vec2(iTime * 120.0, 30.0));\n    \n    if (mask > 0)\n    {\n        fragColor = texture(iChannel0, uv);\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}