{
    "Shader": {
        "info": {
            "date": "1634558321",
            "description": "Crinkled foil effect + evil glow. Making use of IQ's analytical noise derivatives.\nIt's a relatively simple effect based on the normalized gradient - haven't seen it before, however.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7sGXD1",
            "likes": 5,
            "name": "Foilscape",
            "published": 3,
            "tags": [
                "noise",
                "texture",
                "gradient",
                "effect",
                "pattern",
                "foil"
            ],
            "usePreview": 0,
            "username": "hnh",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "\nvec2 hash(vec2 p){   // by Dave_Hoskins: https://www.shadertoy.com/view/4djSRW\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy)*2.-1.;\n}\n\n\nvec3 noised( in vec2 p ){  // by IQ: https://www.shadertoy.com/view/XdXBRH\n// return gradient noise (in x) and its derivatives (in yz)\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n    vec2 u = f*f*f*(f*(f*6.-15.)+10.);\n    vec2 du = 30.*f*f*(f*(f-2.)+1.);\n    \n    vec2 ga = hash( i + vec2(0,0) );\n    vec2 gb = hash( i + vec2(1,0) );\n    vec2 gc = hash( i + vec2(0,1) );\n    vec2 gd = hash( i + vec2(1,1) );\n    \n    float va = dot( ga, f - vec2(0,0) );\n    float vb = dot( gb, f - vec2(1,0) );\n    float vc = dot( gc, f - vec2(0,1) );\n    float vd = dot( gd, f - vec2(1,1) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd),   // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) +  // derivatives\n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\n\n\nvoid mainImage( out vec4 O, in vec2 P ){\n    vec2 p= (P-.5*iResolution.xy)/iResolution.y, pp= p;\n    p= p/(.8-p.y);  // perspective\n    p*= vec2(.5,1);  // horizontal stretch\n    p+= .1*iTime;  // diagonal scroll\n    p*= 300.;  // scale\n\n    vec3 nd= .4*noised(p/64.) + .3*noised(p/32.) + .2*noised(p/16.);  // 3-octave noise\n    vec2 n= normalize(nd.yz);\n    float a= dot(pp,vec2(2));  // changing light dir\n    \n    //O= .5*vec4(1.+dot(n,vec2(sin(a),cos(a))));  // basic (\"aluminium foil\")\n    O= .8*dot(n,vec2(sin(a),cos(a)))*(1.+.9/(nd.x-.5)*vec4(1,0,0,0));  // fancy\n    O= pow(O,vec4(3.));  // tone-map\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}