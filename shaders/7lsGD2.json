{
    "Shader": {
        "info": {
            "date": "1622919909",
            "description": "The rotation is sublime",
            "flags": 0,
            "hasliked": 0,
            "id": "7lsGD2",
            "likes": 22,
            "name": "Lime",
            "published": 3,
            "tags": [
                "2d",
                "fruit"
            ],
            "usePreview": 0,
            "username": "voxel",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "const vec3 BG    = vec3(.6);\nconst vec3 PEEL  = vec3(.0, .4, .0);\nconst vec3 PITH  = vec3(.95, 1, .9);\nconst vec3 FLESH = vec3(.7, .8, .0);\nconst int SECTIONS = 9;\n\nconst float PHI = 1.618033988749895; // (1+sqrt(5)) / 2\nconst float PI2 = 6.283185307179586; // 2*pi\n\n// gold noise (shadertoy.com/view/ltB3zD)\nfloat rand21(vec2 p, float seed) { return fract(tan(distance(p*PHI, p)*seed)*p.x); }\nfloat minc(vec2 p) { return min(p.x, p.y); }\nfloat noise(vec2 p, float seed) {\n    vec2 r = floor(p);\n    vec2 s = fract(p);\n    float h00 = rand21(r,             seed);\n    float h01 = rand21(r + vec2(0,1), seed);\n    float h10 = rand21(r + vec2(1,0), seed);\n    float h11 = rand21(r + vec2(1,1), seed);\n    return mix(mix(h00, h01, s.y),\n               mix(h10, h11, s.y),\n               s.x);\n}\n\nfloat height(float r, float angle) {\n    angle -= PI2 * float(SECTIONS) * .5; // section dividers are in the middle\n    float scaledAngle = fract(angle / PI2) * float(SECTIONS);\n    float section = floor(scaledAngle);\n    float subAngle = fract(scaledAngle);\n    return noise(vec2(r*8., subAngle * 15.), section + 100.);\n}\n\n// return the color of a lime with unit radius centered at the origin\nvec3 lime(vec2 p) {\n    float r = length(p);\n    float angle = atan(p.y, p.x) + iTime*.2;\n    \n    float subpos, idx;\n    {\n        float scaledAngle = fract(angle / PI2) * float(SECTIONS);\n        idx = floor(scaledAngle);\n        float hsh1 = rand21(vec2(idx, 10.), 1.);\n        float hsh2 = rand21(vec2(idx, 10.), 2.);\n        subpos = fract(scaledAngle) + 0.03*sin((10.+2.*hsh1)*(r+hsh2));\n    }\n\n    float thresh = .94 + .005 * sin(angle*20.) + .0015 * cos(angle*65.+4.);\n    float pthresh = thresh - .1*smoothstep(.2, -0.2, distance(subpos, .5));\n    \n    float flesh;\n    {\n        float width = atan(.015 / r);\n        flesh = smoothstep(0., width, distance(subpos, .5));\n        flesh *= smoothstep(pthresh-.02, pthresh-.04, r);\n        float center = .04 + .02*smoothstep(.4, -0.2, distance(subpos, .5));\n        flesh *= smoothstep(center, center + .02, r);\n    }\n\n    vec3 color;\n    {\n        float h = height(r, angle);\n        color = mix(FLESH*.85, FLESH*1.1, h);\n        vec2 p2 = p + vec2(-.02,.05);\n        float r2 = length(p2);\n        float angle2 = atan(p2.y, p2.x) + iTime*.2;\n        float h2 = height(r2, angle2);\n        color += .4 * smoothstep(.2, .6, h - h2);\n    }\n    color = mix(PITH, color, flesh);\n    color = mix(color, PEEL, smoothstep(thresh, thresh+.05, r));\n    color = mix(color, BG*.7, smoothstep(1., 1.015, r));\n    color = mix(color, BG, smoothstep(1., 1.3, r));\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy / 2.;\n    float scale = minc(res) * .8;\n    vec3 col = lime((fragCoord - res) / scale);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}