{
    "Shader": {
        "info": {
            "date": "1604860247",
            "description": "Experimenting with 3tap 1-dimensional tiling.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dtfDr",
            "likes": 8,
            "name": "Folie Ocean",
            "published": 3,
            "tags": [
                "ocean",
                "tiling",
                "3tap"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "vec2 getScreenSpace(vec2 co, vec2 res) {\n    vec2 uv = (co - 0.5 * res) / min(res.y, res.x);\n\n    return uv;\n}\n\nvec3 randcol(float i) {\n    i = fract(i/4.);\n    if(i < .25) {\n      return vec3(0,0,.5);\n    } else if(i < .5) {\n      return vec3(0,.2,.5);\n    } else if(i < .75) {\n      return vec3(0,.1,.4);\n    } else {\n      return vec3(0,.3,.6);\n    }\n}\n\nvec2 hash12(float i) {\n    return texture(iChannel0, vec2(i/126., 0.), -10.).xy*.6+.01;\n}\n\n#define PI 3.14159265359\n\nfloat t = 0.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = getScreenSpace(fragCoord, iResolution.xy);\n    \n    t = iTime - 1000.;\n    \n    uv.y += sin(t*.2);\n    \n    uv *= 15. + cos(t*.2)*5.;\n    \n    vec2 guv = vec2(uv.x, fract(uv.y));\n    float id = floor(uv.y);\n    \n    vec3 col = vec3(1);\n    \n    for(float i = -2.; i < 1.; i++) {\n      vec2 suv = guv + vec2(0., i);\n      vec2 suv1 = guv + vec2(0., i-1.);\n      \n      float sid = id - i;\n      float sid1 = id - i - 1.;\n      \n      vec2 hash = hash12(sid);\n      vec2 hash1 = hash12(sid1);\n      \n      vec2 p = suv - vec2(t*hash1.x, 0.);\n      \n      suv.x += t*10.*(hash.x*hash.x);\n      suv1.x += t*10.*(hash1.x*hash1.x);\n      \n      float wave = sin(suv.x + sid) + cos(suv.x * hash.y) * (hash.y*10.);\n      float wave1 = sin(suv1.x + sid1) + cos(suv1.x * hash1.y) * (hash1.y*10.);\n      \n      p = vec2(length(p*.02), ((p.y) + wave * .1));\n      \n      float sfield = (suv.y + wave * .1);\n      float sfield1 = (suv.y + wave1 * .1);\n      \n      float mask = smoothstep(.5, -.2, sfield);\n      \n      // vec4 tex = texture(iChannel1, p, -10.);\n      vec4 tex = vec4(abs(sin(p.y*20.*length(hash)) + cos(p.x * 5. * hash1.y))*.3+.5);\n      \n      col = mix(col, (randcol(sid)+.2) * tex.gbr * (suv.y * .5 + .3 + smoothstep(-1., -.3, sfield1)), mask);\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}