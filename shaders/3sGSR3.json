{
    "Shader": {
        "info": {
            "date": "1574523582",
            "description": "Winning shader made at COOKIE party 2019 Shader Showdown. \nLive coded on stage in 25 minutes. Designed on twitch in 2 hours.\nOn stage I fucked up the materials so the colours were screwed, but I got away with it.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sGSR3",
            "likes": 28,
            "name": "Shader Showdown COOKIE-19 Final",
            "published": 3,
            "tags": [
                "time",
                "demoscene",
                "tree",
                "glow",
                "goo",
                "organic",
                "laser",
                "monster",
                "limit",
                "live",
                "battle",
                "lazer",
                "shadershowdown",
                "guts"
            ],
            "usePreview": 1,
            "username": "evvvvil",
            "viewed": 1652
        },
        "renderpass": [
            {
                "code": "// Winning shader made at COOKIE Party 2019 Shader Showdown\n\n// The \"Shader Showdown\" is a demoscene live-coding shader battle competition.\n// 2 coders battle for 25 minutes making a shader on stage. No google, no cheat sheets.\n// The audience votes for the winner by making noise or by voting on their phone.\n\n// \"My mother-in-law has come round to our house at Christmas 7 years running. This year we're having a change. We're going to let her in.\" Les Dawson\n\nvec2 z,e=vec2(.00035,-.00035);float t,tt,d01,g; vec3 np,pp,bp,po,no,ld,al;\nfloat bo(vec3 p,vec3 r){p=abs(p)-r;return max(max(p.x,p.y),p.z);}\nmat2 r2(float r){return mat2(cos(r),sin(r),-sin(r),cos(r));}\nvec2 ball( vec3 p,float d,float mm,float mul, float bro )\n{\n  p.z=mod(p.z+tt*10.,30.)-15.;\n  bp=p*.28; p*=bro; d01=d*.5+.5;\n  vec2 h,t=vec2 (length(p)-5.,3);\n  t.x=max(t.x,-bo(p,vec3(2.8*mul)));\n  t.x=min(t.x,length(p)-2.*mul);\n  t.x=abs(t.x)-.3; \n  pp=p;pp.xy*=r2(sin(p.z*.2)+tt*(2.-d01)*d)*(mul*.5+.5);\n  t.x=max(t.x,bo(abs(abs(pp)-vec3(0,0,2))-vec3(0,0,1),vec3(10,3,.6)));\n  np=p; np.xy*=r2(mix(tt,1.59+sin(tt*.5)*1.0,d01)*d);\n  t.x=max(t.x,np.x);     \n  h=vec2 (length(p)-5.,mm);\n  h.x=max(h.x,-bo(p,vec3(2.8*mul)));\n  h.x=min(h.x,length(p)-2.*mul);\n  h.x=abs(abs(h.x)-.1)-.05;\n  h.x=max(h.x,bo(abs(abs(pp)-vec3(0,0,2))-vec3(0,0,1),vec3(10,4,.7))); \n  h.x=max(h.x,np.x-1.); \n  t=mix(t,h,step(h.x,t.x));\n  t.x/=bro*1.5;\n  return t;  \n}\nvec2 mp( vec3 p )\n{  \n  vec2 h,t=ball(p,-1.,6.,1.,1.);\n  h=ball(p,1.,5.,1.,.28);  \n  t=mix(t,h,step(h.x,t.x));  \n  h=ball(p,-1.,6.,-1.,.19);  \n  t=mix(t,h,step(h.x,t.x));\n  h=vec2(length(p.xy)-.5,3);\n  t=mix(t,h,step(h.x,t.x));\n  h=vec2(length(cos(bp*.8+sin(p.x*.2)+sin(p.z*.2))),6);\n  g+=0.1/(0.1+h.x*h.x*4000.);\n  t=mix(t,h,step(h.x,t.x));\n  pp=bp;pp.xy*=r2(-tt+sin(pp.z));\n  h=vec2(0.3*bo(pp,vec3(30,0.001,0.001)),6);\n  g+=0.1/(0.1+h.x*h.x*40.);\n  t=mix(t,h,step(h.x,t.x));\n  return t;  \n}\nvec2 tr( vec3 ro, vec3 rd )\n{\n  vec2 h,t=vec2 (.1);\n  for(int i=0;i<128;i++){\n    h=mp(ro+rd*t.x);\n    if(h.x<.001||t.x>120.) break;\n    t.x+=h.x;t.y=h.y;\n  }\n  if(t.x>120.) t.y=0.;\n  return t;  \n}\n// rough shadertoy approximation of the bonzomatic noise texture by yx https://www.shadertoy.com/view/tdlXW4\nvec4 texNoise(vec2 uv){ float f = 0.; f+=texture(iChannel0, uv*.125).r*.5;\n    f+=texture(iChannel0,uv*.25).r*.25;f+=texture(iChannel0,uv*.5).r*.125;\n    f+=texture(iChannel0,uv*1.).r*.125;f=pow(f,1.2);return vec4(f*.45+.05);\n}\n#define a(d) clamp(mp(po+no*d).x/d,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d).x/d)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n  tt=mod(iTime,62.83);\n  vec3 ro=vec3(cos(tt*.5)*3.,16.+sin(tt)*3.,-10.),\n  cw=normalize(vec3(0,sin(tt*.5)*10.,0)-ro),\n  cu=normalize(cross(cw,vec3(0,1,0))),\n  cv=normalize(cross(cu,cw)),\n  rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),co,fo;\n  ld=normalize(vec3(.4,.7,-.2));\n  vec2 v=vec2(abs(atan(rd.z,rd.y)),rd.x+tt*.1);\n  co=fo=vec3(.2,.3,.4)+texNoise(v*.1).r*.5;\n  z=tr(ro,rd);t=z.x;\n  if(z.y>0.){\n    po=ro+rd*t;\n    no=normalize(e.xyy*mp(po+e.xyy).x+\n    e.yyx*mp(po+e.yyx).x+\n    e.yxy*mp(po+e.yxy).x+\n    e.xxx*mp(po+e.xxx).x);    \n    al=mix(vec3(.25,.5,0),vec3(.0,.2,.3),min((length(bp)-2.5),1.));\n    if(z.y<5.) al=vec3(0);\n    if(z.y>5.) al=vec3(1);\n    float dif=2.*max(0.,dot(no,ld)),\n    fr=pow(1.+dot(no,rd),4.),\n    sp=pow(max(dot(reflect(-ld,no),-rd),0.),10.);    \n    co=mix(sp+al*(a(.2)*a(.4)+.2)*(dif+s(.4)+s(1.)),fo,min(fr,0.2));\n    co=mix(fo,co,exp(-.00001*t*t*t));\n  } \n  fragColor = vec4(pow(co+vec3(0.1,0.2,0.3)*g*.6,vec3(.45)),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}