{
    "Shader": {
        "info": {
            "date": "1483783378",
            "description": "raymarching a shadow map\nmouse moves the shadow caster\nkind of a failed experiment in volumetric fog light rays",
            "flags": 32,
            "hasliked": 0,
            "id": "4lySDz",
            "likes": 5,
            "name": "distance shadows",
            "published": 3,
            "tags": [
                "raymarch",
                "ifs",
                "shadowmap"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 1143
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n   \t\n    vec4 col = texture(iChannel1, uv);\n    \n    if (uv.x > 0.75 && uv.y > 0.75)\n    \tcol = texture(iChannel0, fract(uv*4.0));\n\n    \n\tfragColor = col;\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_ITER 50\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nmat3 ir;\n\nfloat testDE(vec3 p){\n    float floor = udBox(p + vec3(0.0, 0.5, 0.0), vec3(1, 0.01, 1));\n    vec2 move = iMouse.xy / iResolution.xy - 0.5;\n    float box = udBox(p-+ vec3(move.x , 0.0, move.y)  , vec3(0.5, 0.1, 0.2));\n\n    return min(floor, box);\n}\n\n\nfloat DE(vec3 p) \n{\n    return testDE(p);\n\tvec3 p_o = p;\n    float d = 1e10;\n    \n    float s = 1.; //sin(iTime /60.0) / 10.0 + 0.6;\n    vec3 t = vec3(0.1 * iMouse.xy/iResolution.xy, 0.1 + 0.1 * sin(iTime/200.));\n    \n    vec3 dim = vec3(0.01, 0.9, 0.02);\n    \n    for ( int i = 0; i < 3; i ++)\n    {\n        p -= t*s;\n        p = (ir * (p-t/s));\n     \td = min\t(d, udBox(p*s, dim/s  )/s ) ;\n \t\tp = abs(p);\n        \n        float circleSize = 0.03 * (sin(iTime + length(p_o) * 5.) ) + 0.01;\n        d = min(d, length(p - t) - circleSize/s);\n        s *= s;\n    }\n    \n    return d;\n}\n\n// from http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\nvec4 EncodeFloatRGBA( float v ) {\n  vec4 enc = vec4(1.0, 255.0, 65025.0, 160581375.0) * v;\n  enc = fract(enc);\n  enc -= enc.yzww * vec4(1.0/255.0,1.0/255.0,1.0/255.0,0.0);\n  return enc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.y *= -1.;\n    \n    vec3 p;\n    float depth = 0.0;\n\n    ir = rotationMatrix(normalize(vec3(sin(iTime/50.0),sin(iTime/100.0),sin(iTime/150.0))),\n                        1.5 + iTime/30.0);\n    \n    vec3 cam = vec3(uv.x,2,-uv.y);\n    vec3 ray = vec3(0,-1,0);\n\n        \n    for( int i= 0; i < MAX_ITER; i ++) {\n        p = depth * ray + cam;\n        float dist = DE(p);\n        \n     \tdepth += dist;\n              \n        if ( dist < 0.001)\n            break;\n    }\n\n\tfragColor = vec4( EncodeFloatRGBA(clamp(0.0,1.0,depth/10.0) ));\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX_ITER 100\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nmat3 ir;\n\nfloat testDE(vec3 p){\n    float floor = udBox(p + vec3(0.0, 0.5, 0.0), vec3(1, 0.01, 1));\n    vec2 move = iMouse.xy / iResolution.xy - 0.5;\n    float box = udBox(p-+ vec3(move.x , 0.0, move.y)  , vec3(0.5, 0.1, 0.2));\n\n    return min(floor, box);\n}\n\nfloat DE(vec3 p) {\n    \n    return testDE(p);\n    \n\tvec3 p_o = p;\n    float d = 1e10;\n    \n    float s = 1.; //sin(iTime /60.0) / 10.0 + 0.6;\n    vec3 t = vec3(0.4 * iMouse.xy/iResolution.xy, 0.1 + 0.1 * sin(iTime/200.));\n    \n    \n    vec3 dim = vec3(0.01, 0.9, 0.02);\n    \n    for ( int i = 0; i < 3; i ++)\n    {\n        p -= t*s;\n        p = (ir * (p-t/s));\n        \n     \td = min\t(d, udBox(p*s, dim/s  )/s ) ;\n \t\tp = abs(p);\n        \n        float circleSize = 0.03 * (sin(iTime + length(p_o) * 5.) ) + 0.01;\n        d = min(d, length(p - t) - circleSize/s);\n        s *= s;\n    }\n    return d;\n}\n\nfloat DecodeFloatRGBA( vec4 rgba ) {\n  return dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\n\nfloat inShadow(  vec3 p )\n{\n    // project p into the lightmap texture A\n    vec2 proj = p.xz / 2.0 + 0.5;\n\n    if (proj.x < 0.0 || proj.y < 0.0 || proj.x > 1.0 || proj.y > 1.0)\n        return 0.0;\n        \n    float light_depth = 10.0 *  DecodeFloatRGBA(texture(iChannel0, proj));\n    float pt_depth = ( 2.0 - p.y);\n    float bias = 0.0;\n    return light_depth - pt_depth < bias ? 1.0/10.0 : 0.0;\n}\n\nvec3 gradient(vec3 p) {\n\tvec2 e = vec2(0., 0.0001);\n\treturn normalize(\n\t\tvec3(\n\t\t\tDE(p+e.yxx) - DE(p-e.yxx),\n\t\t\tDE(p+e.xyx) - DE(p-e.xyx),\n\t\t\tDE(p+e.xxy) - DE(p-e.xxy)\n\t\t)\n\t);\n}\n\n//https://iquilezles.org/articles/fog\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayDir,   // camera to point vector\n               in vec3  sunDir )  // sun light direction\n{\n    float b = .3;\n    float fogAmount = 1.0 - exp( -distance*b );\n    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );\n    vec3  fogColor  = mix( vec3(0.1,0.1,0.0), \n                           vec3(1.0,0.9,0.7),\n                           pow(sunAmount,3.0));\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    \n    vec3 cam = vec3(0, 0.4, - sin(iTime /32. ) - 2.5);\n    vec3 ray = normalize( vec3(uv, 1.0));\n    \n    vec3 color = vec3(0.1, 0.1, 0.2);\n    vec3 p;\n    float depth = 0.0;\n    bool hit = false;\n    float iter = 0.0;\n    \n    float fog = 0.0;\n    vec3 sun = normalize( vec3(1,1,1));\n\n    ir = rotationMatrix(normalize(vec3(sin(iTime/50.0),sin(iTime/100.0),sin(iTime/150.0))), 1.5 + iTime/30.0);\n    \n    mat3 mv = rotationMatrix(vec3(0, 1, 0), iTime/10.0);\n        \n    cam = mv * cam;\n    ray = mv * ray;\n        \n    for( int i= 0; i < MAX_ITER; i ++) {\n        p = depth * ray + cam;\n        float dist = DE(p);\n        \n  \n            float ss = inShadow(p);\n        \tfog += ss;\n \n            depth += dist;\n \n        \n \n        if ( dist < 0.001)\n        {\n        \thit = true;\n            break;\n        }\n        iter ++;\n    }\n    float fakeAO = 1.0 - iter / float(MAX_ITER);    \n    vec3 n = gradient(p);\n    \n\n    if (hit) {\n    \tcolor = vec3(fakeAO + dot(-ray,n) / 2.0);\n     }\n\n    //color = vec3(0.5 * log(depth));\n    \n\n    color = applyFog(color, depth, ray, vec3(0,1,0));\n    color *= vec3(1.0 - fog);\n    color = pow(color, vec3(0.7));\n\n\tfragColor = vec4(color ,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}