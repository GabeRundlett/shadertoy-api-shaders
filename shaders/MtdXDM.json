{
    "Shader": {
        "info": {
            "date": "1480081539",
            "description": "An oldschool pixelate transition effect, from games on Playstation, N64 and similar.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtdXDM",
            "likes": 11,
            "name": "Pixelate Transition",
            "published": 3,
            "tags": [
                "2d",
                "oldschool",
                "retro"
            ],
            "usePreview": 1,
            "username": "Xaymar",
            "viewed": 1677
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Configurable\n    float transitionDelay = 0.5;\t\t\t// Start transition after x Seconds.\n    float transitionTime = 1.5;\t\t\t\t// Transition lasts x Seconds.\n    float maximumBlockSize = 12.0;\t\t\t// Maximum Block Size (2 ^ x)\n    vec2 blockOffset = vec2(0.5, 0.5);\t\t// Inner Block offset\n    vec2 pixelateCenter = vec2(0.5, 0.5);\t// Pixelate offset.\n    \n    // Animation Calculations\n    float time = mod(iTime, (transitionDelay+transitionTime)*2.0); // Repeat every 4 seconds.\n    float animTime = clamp(time - transitionDelay, 0.0, transitionTime);\t\t// Time in 0..transitionTime\n    float animProgress = animTime / transitionTime;\t\t\t\t\t\t\t\t// Time as Progress (0..1)\n    float animStuff = 1.0 - (abs(animProgress - 0.5) * 2.0);\t\t\t\t\t// Progress as a bounce value (0..1..0)\n    // There are two ways to calculate this, one is pixel aligned the other is block aligned.\n    float animBlockSize = floor(pow(2.0, maximumBlockSize * animStuff));\t\t// Block Size, always a multiple of 2. (Pixel Aligned)\n    //float animBlockSize = pow(2.0, floor(maximumBlockSize * animStuff));\t\t// Block Size, always a multiple of 2. (Block Aligned)\n    // Block aligned block size needs a higher maximumBlockSize in order to look fluid, try changing it from 9 to 12 with it active.\n    \n    // UV Calculations\n    vec2 finalUV = uv;\t\t\t\t// Use 0..1 UVs\n    finalUV -= pixelateCenter;\t\t// Offset by the pixelation center.\n    finalUV *= iResolution.xy;\t\t// Convert to 0..Resolution UVs for pixelation.\n    finalUV /= animBlockSize;\t\t// Divide by current block size.\n    finalUV = floor(finalUV) + blockOffset;\t// Use floor() on it to get aligned pixels. *1\n    finalUV *= animBlockSize;\t\t// Multiply by current block size.\n    finalUV /= iResolution.xy;\t\t// Convert back to 0..1 UVs for texture sampling.\n    finalUV += pixelateCenter;\t\t// Revert the offset by the pixelation center again.\n    // Now we have fully pixelated UVs without needing any additional magic.\n    // In theory it should be possible to do this without needing the texture resolution,\n    //  but that one is much more than I want to do - and also really hard.\n    // \n   \t// *1: GLSL and HLSL can use round here to get a block that is centered on the pixelateCenter.    \n    \n    // Using mix here to hide the obvious instant transition using a fade.\n    // Can also be changed to \"- 0.5) * 65535.0\" for the instant transition effect.\n\tfragColor = mix(texture(iChannel0, finalUV), texture(iChannel1, finalUV), clamp((animProgress - 0.45) * 16.0, 0.0, 1.0));\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float fps = 12.0;\n    float frames = 6.0;\n    vec2 frameSize = vec2(40.0 / iChannelResolution[0].x, 1.0);\n    \n    vec2 animUV = vec2(\n        floor(mod(iTime * fps, frames)),\n        0.0\n        );\n    \n    vec2 frameUV = (uv * frameSize) + animUV * frameSize;\n    \n    fragColor = texture(iChannel0, frameUV);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}