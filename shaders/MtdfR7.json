{
    "Shader": {
        "info": {
            "date": "1549816365",
            "description": "Starting screen of my game TE.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtdfR7",
            "likes": 0,
            "name": "TE Intro",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Thorgrimar",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "// created thanks to the video WebGL Paris 2015 - Raymarching en Live Coding\n\n// some distance fields\nfloat plane(vec3 pos)\n{\n    return pos.y;\n}\n\nfloat sphere(vec3 pos, vec3 center,float radius)\n{\n    return length(pos - center) - radius;\n}\n\n\nfloat box(vec3 pos, vec3 size)\n{\n    return length(max(abs(pos) - size, 0.0)) -0.3;\n}\n\nvec3 size_box_hor = vec3(3.0, 1.0, 1.0);\nvec3 size_box_vert = vec3(1.0, 3.0, 1.0);\n\n// for the T\nvec3 pos_box_a = vec3(-5.0, 8.0, 10.0);\nvec3 pos_box_b = vec3(-5.0, 4.0, 10.0);\n\n// for the E\nvec3 pos_box_c = vec3(5.0, 10.0, 3.0);\nvec3 pos_box_d = vec3(3.0, 6.0, 3.0);\nvec3 pos_box_e = vec3(5.0, 6.0, 3.0);\nvec3 pos_box_f = vec3(5.0, 2.0, 3.0);\n\nfloat map(vec3 pos)\n{\n   vec3 moveT = 1.2*sin(iTime*.5)*vec3(0., 0.5, 0.);\n   return min(min(min(min(min(min(plane(pos), \n              box(pos - (pos_box_a+moveT) , size_box_hor)),\n              box(pos -  (pos_box_b+moveT), size_box_vert)),\n              box(pos -  (pos_box_c-moveT), size_box_hor)),\n              box(pos -  (pos_box_d-moveT), size_box_vert)),\n              box(pos -  (pos_box_e-moveT), size_box_hor)),\n              box(pos -  (pos_box_f-moveT), size_box_hor)    \n              );\n}\n\nvec3 col_floor(vec3 pos)\n{\n    float size = 10.0;\n    vec3 col;\n    float pos_x = (pos.x + 1.)/size;\n    float pos_z = (pos.z - 5.)/size;\n    // 1 box is red, 1 green and the other are white\n    if (0.<pos_x && pos_x<1.0 && 0.<pos_z && pos_z<1.) {\n        col = vec3(0., 0.5, 0.);\n    } else if (-1.<pos_x && pos_x<0. && -1.<pos_z && pos_z<0.) {\n        col = vec3(0.5, 0., 0.);\n    } else {\n        col = vec3(1.0);\n    }\n    // draw black lines between boxes\n    if (mod(pos_x, 1.) < 0.1 || mod(pos_z, 1.) < 0.1) {\n        col = vec3(0.);\n    }\n    return col;\n}\n\n// normal of the face where pos is\nvec3 computeNormal(vec3 pos)\n{\n    vec2 eps = vec2(0.01, 0.);\n    return normalize(vec3(map(pos+eps.xyy)-map(pos-eps.xyy),\n                     map(pos+eps.yxy)-map(pos-eps.yxy),\n                     map(pos+eps.yyx)-map(pos-eps.yyx)));\n}\n\nfloat diffuse(vec3 normal, vec3 lightDir)\n{\n    return max(0., dot(normal, lightDir));\n    //return dot(normal, lightDir)*.5 + .5; (wrap light)\n}\n\nfloat specular(vec3 normal, vec3 lightDir, vec3 rayDir)\n{\n    vec3 h = normalize(normal - rayDir);\n    return pow(max(dot(h, lightDir), 0.), 40.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (uv.x from -1.0 to 1.0)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x; \n\t\n    // cam positioning\n    vec3 pos_cam = vec3(4.1*sin(iTime*0.2), 15.0 +0.05*sin(iTime*0.4) , -20.0);\n    vec3 pos = pos_cam;\n    vec3 dir = normalize(vec3(uv.x, uv.y -0.5, 1.0));\n    \n    vec3 col = vec3(0.0);\n    //ray marching\n    for (int i=0; i<128; i++) {\n        float d = map(pos);\n        \n        if (d<0.01) {\n            if (pos.y < 0.1) {\n                // the ray hit the floor\n                float d = -pos_cam.y/dir.y;\n                pos = pos_cam + d*dir;\n                col = col_floor(pos);\n            } else {\n                // the ray hit a letter\n                vec3 pos_rel;\n                if (pos.x > 0.) {\n                    pos_rel = pos + 1.2*sin(iTime*.5)*vec3(0., 0.5, 0.);\n                } else {\n                    pos_rel = pos - 1.2*sin(iTime*.5)*vec3(0., 0.5, 0.);\n                }\n                // we add a little texture\n                col = vec3(0.6, 0.3, 0.)*(1.+0.2*sin(pos_rel.x*0.5)*sin(pos_rel.y*1.2));\n            }\n            break;\n        }\n        pos += d*dir;\n    }\n\t\n    // add white light\n    vec3 lightPos = vec3(10., 7., -10.);\n    vec3 lightDir = normalize(lightPos - vec3(-3., 10., 0.));\n    float lightDistance = sphere(pos, lightPos, 0.5);\n    vec3 normal = computeNormal(pos);\n    float intensityLightSurface = 2.*specular(normal, lightDir, dir) + diffuse(normal, lightDir);\n    col = col + intensityLightSurface*col;\n    \n    \n    // add a fog\n    float fogFactor = min(1., exp(-0.05*(pos.z - 10.)));\n    vec3 fogColor = vec3(0.8, 0.9, 0.9);\n    col = mix(fogColor, col, fogFactor);\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}