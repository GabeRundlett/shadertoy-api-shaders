{
    "Shader": {
        "info": {
            "date": "1522709743",
            "description": "fragColor=palette[int(f(x,y)*time*speed) % palette_size]\n\nthe palette can also have hardcoded colors (e.g. grab a palette from some color-specific website), should look much better with such",
            "flags": 0,
            "hasliked": 0,
            "id": "4sGcR3",
            "likes": 1,
            "name": "Palette lookup + animation",
            "published": 3,
            "tags": [
                "patterns",
                "palette",
                "animation"
            ],
            "usePreview": 0,
            "username": "gbirbilis",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "const int PALETTE_SIZE = 100;\nfloat SPEED = 1.0; //on a slower computer try 5.0 //also try the .01 and .001 for other effect\n\nbool initialized;\nvec4[PALETTE_SIZE] palette;\n\nvoid init()\n{\n    for(int i=0; i<PALETTE_SIZE; i++)\n      palette[i]=vec4(float(i)*1.5/float(PALETTE_SIZE),\n                      float(i+i)*1.0/float(PALETTE_SIZE),\n                      float(i*i)*0.5/float(PALETTE_SIZE),\n                      1.0); //could set other colors here\n\n  initialized = true;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{     \n    if (!initialized)\n        init();\n    \n    fragColor = palette[int((p.x*p.y) * iTime*SPEED) % PALETTE_SIZE];\n    \n    //fragColor = vec4(mod((p.x*p.y) * iTime*SPEED, float(PALETTE_SIZE))/ float(PALETTE_SIZE)); //test without using a color lookup\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}