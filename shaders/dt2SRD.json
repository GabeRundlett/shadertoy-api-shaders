{
    "Shader": {
        "info": {
            "date": "1675785930",
            "description": "â€‹",
            "flags": 0,
            "hasliked": 0,
            "id": "dt2SRD",
            "likes": 18,
            "name": "single-pixel isolines",
            "published": 3,
            "tags": [
                "2d",
                "contour",
                "isoline"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "#define reso iResolution.xy\n\nuint hash(uint x) {\n    x ^= x >> 16;\n    x *= 0x21f0aaadu;\n    x ^= x >> 15;\n    x *= 0xd35a2d97u;\n    x ^= x >> 15;\n    return x;\n}\n\nfloat u2f(uint x) {\n    return uintBitsToFloat(0x40000000u | (x & 0x007FFFFFu)) - 3.;\n}\n\nvec3 rand_grad(uvec3 p) {\n    uint tmp = hash(hash(hash(hash(p.x)) ^ hash(p.y)) ^ hash(p.z));\n    return vec3(u2f(hash(tmp ^ 0u)), u2f(hash(tmp ^ 1u)), u2f(hash(tmp ^ 2u)));\n}\n\nmat2 rotmat(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat perlin(vec3 p) {\n    p.xz *= rotmat(1.2);\n    p.xy *= rotmat(-3.2);\n    p.xz *= rotmat(6.2);\n    \n    uvec3 ip = uvec3(ivec3(floor(p)));\n    vec3 fp = p - floor(p);\n    \n    vec3 wa = fp*fp*fp*(fp*(fp*6.-15.)+10.);\n    vec3 wb = 1. - wa;\n    \n    float res = 0.;\n    res += dot(rand_grad(ip+uvec3(0,0,0)), fp-vec3(0,0,0)) * wb.x*wb.y*wb.z;\n    res += dot(rand_grad(ip+uvec3(1,0,0)), fp-vec3(1,0,0)) * wa.x*wb.y*wb.z;\n    res += dot(rand_grad(ip+uvec3(0,1,0)), fp-vec3(0,1,0)) * wb.x*wa.y*wb.z;\n    res += dot(rand_grad(ip+uvec3(1,1,0)), fp-vec3(1,1,0)) * wa.x*wa.y*wb.z;\n    res += dot(rand_grad(ip+uvec3(0,0,1)), fp-vec3(0,0,1)) * wb.x*wb.y*wa.z;\n    res += dot(rand_grad(ip+uvec3(1,0,1)), fp-vec3(1,0,1)) * wa.x*wb.y*wa.z;\n    res += dot(rand_grad(ip+uvec3(0,1,1)), fp-vec3(0,1,1)) * wb.x*wa.y*wa.z;\n    res += dot(rand_grad(ip+uvec3(1,1,1)), fp-vec3(1,1,1)) * wa.x*wa.y*wa.z;\n    return res;\n}\n\nint fn(ivec2 coord) {\n    //vec2 pos = (vec2(coord * 2) - reso.xy) / reso.y;\n    //return int(floor(sin(dot(pos,pos)*16.)*8.5));\n    return (int(floor(perlin(vec3(vec2(coord) * .02, iTime*.1)) * 10.)));\n}\n\nvoid mainImage(out vec4 col, in vec2 coord) {\n    ivec2 pos = ivec2(coord);\n    \n    //int a = fn((pos+1)&~1);\n    //int b = fn((pos&~1)+1);\n    //col = vec4(float(abs(a-b)));\n    \n    ivec4 fns = ivec4(\n        fn(pos+ivec2(0,0)),\n        fn(pos+ivec2(1,0)),\n        fn(pos+ivec2(0,1)),\n        fn(pos+ivec2(1,1))\n    );\n    if(max(max(fns.x,fns.y),max(fns.z,fns.w)) - min(min(fns.x,fns.y),min(fns.z,fns.w)) >= 2) {\n        col = vec4(1);\n        return;\n    }\n    fns -= min(min(fns.x,fns.y),min(fns.z,fns.w));\n    int cnt = fns.x+fns.y+fns.z+fns.w;\n    col = cnt == 2 || cnt == 3 ? vec4(1) : vec4(0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}