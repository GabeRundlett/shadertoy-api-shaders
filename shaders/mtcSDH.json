{
    "Shader": {
        "info": {
            "date": "1685333574",
            "description": "it's a graphing calculator. you can change the equation variable to be whatever equation you want and it will evaluate it for y. increasing the scale variable zooms it out.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtcSDH",
            "likes": 1,
            "name": "rainbow graphing calculator",
            "published": 3,
            "tags": [
                "graph",
                "calculator"
            ],
            "usePreview": 0,
            "username": "forgeapm21",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "float integrate(float x, float y, float equation_output)\n{\n    if (y > 0.0 && y < equation_output)\n    {\n        return 1.0;\n    }\n    else\n    {\n        if (y < 0.0 && y > equation_output)\n        {\n            return -1.0;\n        }\n        else\n        {\n        return 0.0;\n        }\n    }\n}\n\nfloat integral = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord/iResolution.xy -0.5 ) * 2.0;\n    //scale\n    float scale = 10.0;\n    uv *= scale;\n\n    \n    //create line value where the graph evaluates\n    float line = 0.0;\n    \n    //this evaluates to the value of the equation, write the equation here\n    float equation = sin(uv.x);\n\n    //thickness of the line\n    float thickness = 0.01;\n    thickness *= scale;\n    //graphing calculator\n    if ( uv.y >= equation - thickness/2.0 && uv.y <= equation + thickness/2.0 )\n    {\n        line = 1.0;\n    }\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float spot_integral = 0.0;\n    //integrate\n    spot_integral = integrate(uv.x, uv.y, equation);\n    integral += spot_integral;\n    \n    //combine shader with line\n    col *= (line + abs(spot_integral));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}