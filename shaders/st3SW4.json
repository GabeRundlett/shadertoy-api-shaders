{
    "Shader": {
        "info": {
            "date": "1639088887",
            "description": "improvised some psychedelic nonsense... getting 2001 and enter the void vibes\n\nEDIT: improved motion blur using blue noise",
            "flags": 0,
            "hasliked": 0,
            "id": "st3SW4",
            "likes": 7,
            "name": "[SIG15] sig-n-sine, impr. mblur",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "Hatchling",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159;\n\nfloat sigmoid(float x){\n \treturn x/(1.+abs(x));   \n}\n\nfloat iter(vec2 p, vec4 a, vec4 wt, vec4 ws, float t, float m, float stereo){\n    float wp = .2;\n    vec4 phase = vec4(mod(t, wp), mod(t+wp*.25, wp), mod(t+wp*.5, wp), mod(t+wp*.75, wp))/wp;\n    float zoom = 1./(1.+.5*(p.x*p.x+p.y*p.y));\n    vec4 scale = zoom*pow(vec4(2.), -4.*phase);\n    vec4 ms = .5-.5*cos(2.*pi*phase);\n    vec4 pan = stereo/scale*(1.-phase)*(1.-phase);\n    vec4 v = ms*sin( wt*(t+m) + (m+ws*scale)*((p.x+pan) * cos((t+m)*a) + p.y * sin((t+m)*a)));\n    return sigmoid(v.x+v.y+v.z+v.w+m);\n}\n\nvec3 scene(float gt, vec2 uv, vec4 a0, vec4 wt0, vec4 ws0, float blur){\n    gt *= 2.;\n    //time modulation\n    float tm = mod(.0411*gt, 1.);\n    tm = sin(2.*pi*tm*tm);\n    float t = (.04*gt + .05*tm);\n    \n    float stereo = 1.*(sigmoid(2.*(sin(1.325*t*cos(.5*t))+sin(-.7*t*sin(.77*t)))));//+sin(-17.*t)+sin(10.*t))));\n    //t = 0.;\n    //also apply spatial offset\n    uv+= .5*sin(.33*t)*vec2(cos(t), sin(t));\n    \n    //wildly iterate and divide\n    float p0 = iter(uv, a0, wt0, ws0, t, 0., stereo);\n    \n   \tfloat p1 = iter(uv, a0, wt0, ws0, t, p0, stereo);\n    \n    float p2 = sigmoid(p0/(p1+blur));\n    \n    float p3 = iter(uv, a0, wt0, ws0, t, p2, stereo);\n    \n    float p4 = sigmoid(p3/(p2+blur));\n    \n    float p5 = iter(uv, a0, wt0, ws0, t, p4, stereo);\n    \n    float p6 = sigmoid(p4/(p5+blur));\n    \n    float p7 = iter(uv, a0, wt0, ws0, t, p6, stereo);\n    \n    float p8 = sigmoid(p4/(p2+blur));\n    \n    float p9 = sigmoid(p8/(p7+blur));\n    \n    float p10 = iter(uv, a0, wt0, ws0, t, p8, stereo);\n    \n    float p11 = iter(uv, a0, wt0, ws0, t, p9, stereo);\n    \n    float p12 = sigmoid(p11/(p10+blur));\n    \n    float p13 = iter(uv, a0, wt0, ws0, t, p12, stereo);\n    \n    //colors\n    vec3 accent_color = vec3(1.,0.2,0.);//vec3(0.99,0.5,0.2);\n    /*float r = sigmoid(-1.+2.*p0+p1-max(1.*p3,0.)+p5+p7+p10+p11+p13);\n    float g = sigmoid(-1.+2.*p0-max(1.*p1,0.)-max(2.*p3,0.)-max(2.*p5,0.)+p7+p10+p11+p13);\n    float b = sigmoid(0.+1.5*p0+p1+p3+-max(2.*p5,0.)+p7+p10+p11+p13);\n    */\n    float r = sigmoid(p0+p1+p5+p7+p10+p11+p13);\n    float g = sigmoid(p0-p1+p3+p7+p10+p11);\n    float b = sigmoid(p0+p1+p3+p5+p11+p13);\n    \n    \n    vec3 c = max(vec3(0.), .4+.6*vec3(r,g,b));\n    \n    float eps = .4;\n    float canary = min(abs(p1), abs(p2));\n    canary = min(canary, abs(p5));\n    //canary = min(canary, abs(p6));\n    canary = min(canary, abs(p7));\n    canary = min(canary, abs(p10));\n    float m = max(0.,eps-canary)/eps;\n    m = sigmoid((m-.5)*700./(1.+10.*blur))*.5+.5;\n    //m = m*m*m*m*m*m*m*m*m*m;\n    vec3 m3 = m*(1.-accent_color);\n    c *= .8*(1.-m3)+.3;//mix(c, vec3(0.), m);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = min(iResolution.x, iResolution.y);\n   \tvec2 uv = (2.*fragCoord.xy - vec2(iResolution.xy)) / s;\n    \n    float blur = .5*(uv.x*uv.x+uv.y*uv.y);\n    \n    //angular, spatial and temporal frequencies\n    vec4 a0 = pi*vec4(.1, -.11, .111, -.1111); \n    vec4 wt0 = 2.*pi*vec4(.3);//.3333, .333, .33, .3);\n    vec4 ws0 = 2.5*vec4(11., 13., 11., 5.);\n\n    vec2 blueNoiseUV = fragCoord.xy / iChannelResolution[0].xy;\n    \n    float blueNoise = texture(iChannel0, blueNoiseUV).r / 9.;\n    \n\n    //aa and motion blur\n    float mb = iTimeDelta*1.;\n    float t = 1100.+iTime + blueNoise*mb;\n    vec3 c = scene(t, uv, a0, wt0, ws0, blur)\n        + scene(t-mb*(1./9.), uv+(1.+blur)*vec2(.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*(2./9.), uv+(1.+blur)*vec2(-.66/s, 0.), a0, wt0, ws0, blur)\n        + scene(t-mb*(3./9.), uv+(1.+blur)*vec2(0., .66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*(4./9.), uv+(1.+blur)*vec2(0., -.66/s), a0, wt0, ws0, blur)\n        + scene(t-mb*(5./9.), uv+(1.+blur)*vec2(.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*(6./9.), uv+(1.+blur)*vec2(-.5/s, .5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*(7./9.), uv+(1.+blur)*vec2(-.5/s, -.5/s), a0, wt0, ws0, blur)\n        + scene(t-mb*(8./9.), uv+(1.+blur)*vec2(.5/s, -.5/s), a0, wt0, ws0, blur)\n\n        ;\n    c/=9.;\n    \n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}