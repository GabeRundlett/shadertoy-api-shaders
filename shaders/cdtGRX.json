{
    "Shader": {
        "info": {
            "date": "1677611186",
            "description": "Apparently distorting the uv coordinates repeatedly by perlin noise creates cells???",
            "flags": 0,
            "hasliked": 0,
            "id": "cdtGRX",
            "likes": 12,
            "name": "Perlin Cells",
            "published": 3,
            "tags": [
                "perlin",
                "cells"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "#define smooth3(x) 3.*x*x-2.*x*x*x\n#define smooth5(x) 6.*x*x*x*x*x-15.*x*x*x*x+10.*x*x*x\n#define smooth7(x) -20.*x*x*x*x*x*x*x+70.*x*x*x*x*x*x-84.*x*x*x*x*x+35.*x*x*x*x\n#define r(t) mat2(cos(t), -sin(t), sin(t), cos(t))\n#define NO_UNROLL min(iTime, 0.)\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat perlinNoise(vec2 p, float t)\n{\n    vec4 f = vec4(floor(p), ceil(p));\n    mat2 r = r(t);\n    return mix(mix(dot(p - f.xy,  r*(normalize(hash22(f.xy) - 0.5))),\n                   dot(p - f.xw,  r*(normalize(hash22(f.xw) - 0.5))), smooth5(fract(p.y))), \n               mix(dot(p - f.zy,  r*(normalize(hash22(f.zy) - 0.5))),\n                   dot(p - f.zw,  r*(normalize(hash22(f.zw) - 0.5))), smooth5(fract(p.y))),\n                                                                      smooth5(fract(p.x)));\n}\n\nvec2 normal(vec2 p, float t, float eps)\n{\n    mat2 o = mat2(eps*0.5);\n    return vec2(perlinNoise(p+o[0], t)-perlinNoise(p-o[0], t),\n                perlinNoise(p+o[1], t)-perlinNoise(p-o[1], t))/eps;\n}\n\nvec3 gradToVec(vec2 d, float str)\n{\n    vec3 a = normalize(vec3(1, -d.x*str, 0)),\n         b = normalize(vec3(0, -d.y*str, 1));\n    return cross(a, b);\n}\n\nvec2 distort(in vec2 p, float scale, float t, float dst, float it)\n{\n    for(float i = NO_UNROLL; i < it; i++)\n    {\n        p += normal(p*scale, t, 0.001)/it*dst;\n    }\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec2 m =  (iMouse.xy*2.-iResolution.xy)/iResolution.y;\n    \n    uv = distort(uv+iTime*0.2, 5., iTime, 0.1, 5.);\n    m = distort(m+iTime*0.2, 5., iTime, 0.1, 3.);\n\n    vec2 n = normal(uv*5., iTime, 0.001);\n    vec3 env = texture(iChannel0, gradToVec(n, 0.4)).rgb;\n    env *= env;\n    \n    fragColor = vec4(vec3(sqrt(env*0.5+0.2*pow(max(0., dot(n, normalize(uv-m))), 10.))), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}