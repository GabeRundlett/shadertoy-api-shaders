{
    "Shader": {
        "info": {
            "date": "1662336881",
            "description": "https://conwaylife.com/wiki/OCA:Maze",
            "flags": 32,
            "hasliked": 0,
            "id": "styyDc",
            "likes": 6,
            "name": "Simple Maze GoL (B3/S12345)",
            "published": 3,
            "tags": [
                "conway",
                "gameoflife",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "lukeathedev",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// By Lucas\n// Check 'Buffer A' for implementation\n\nvoid mainImage(out vec4 C, in vec2 P)\n{\n    vec2 uv = P/iResolution.xy;\n    C = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// By Lucas\n// Simple Maze GoL (B3/S12345)\n\n#define START_SIZE 4.0\n#define START_FRAME 64\n#define SEED 91.34583\n\nfloat rand(float x) {\n    return fract(sin(x * SEED) * 47453.5453);\n}\n\nvec3 rand3(float x) {\n    return vec3(rand(x) > 0.5 ? 1.0 : 0.0);\n}\n\nbool alive(ivec2 pos) {\n    vec3 tex = texelFetch(iChannel0, pos, 0).rgb;\n    return tex.r > 0.0 ||\n           tex.g > 0.0 ||\n           tex.b > 0.0;\n}\n\nvec3 colorize(vec3 col, vec2 uv) {\n    return col + 0.5 + 0.5 * cos(iTime * 0.1 + uv.xyx + vec3(0, 2, 4));\n}\n\nvoid mainImage(out vec4 C, in vec2 P)\n{    \n    // Get neighbors in 3x3 square around pixel (Moore neighborhood)\n    int count = 0;\n    for (int y = -1; y < 2; ++y) {\n        for (int x = -1; x < 2; ++x) {\n            if (alive(ivec2(P.x + float(x), P.y + float(y)))) {\n                count += 1;\n                if (x == 0 && y == 0) {\n                    count -= 1;\n                }\n            }\n        }\n    }\n    \n    bool state = alive(ivec2(P.xy));\n    bool alive = false;\n    // If alive, check whether pixel has enough neighbors (this is S)\n    if (state && (count > 0 && count < 6)) { // S12345\n        alive = true;\n    }\n    \n    // If dead, check whether pixel is allowed to live (this is B)\n    else if (count == 3) { // B3\n        alive = true;\n    }\n\n    vec2 uv = P / iResolution.xy;\n    vec3 col = texelFetch(iChannel0, ivec2(P.xy), 0).rgb;\n    col = (alive == state) ? col :\n          ((alive) ? colorize(col, uv) :\n                     vec3(0.0));\n    \n    C = vec4(col, 1.0);\n    \n    // Pseudo random center starting blob (allows for going fullscreen before start)\n    if (iFrame == START_FRAME) {\n        if (P.x > iResolution.x / 2.0 - START_SIZE && P.x < iResolution.x / 2.0 + START_SIZE) {\n            if (P.y > iResolution.y / 2.0 - START_SIZE && P.y < iResolution.y / 2.0 + START_SIZE) {\n                C = vec4(colorize(rand3(P.x * P.y * (iTime + 1.0))*-1.0, uv), 1.0);            \n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}