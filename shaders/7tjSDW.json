{
    "Shader": {
        "info": {
            "date": "1627728297",
            "description": "Sound visualizer that basically copies levonchic's version: https://www.shadertoy.com/view/XdXcWr.",
            "flags": 96,
            "hasliked": 0,
            "id": "7tjSDW",
            "likes": 0,
            "name": "Alright Alright Alright",
            "published": 3,
            "tags": [
                "sound",
                "visualizer",
                "soundcloud",
                "monochromatic"
            ],
            "usePreview": 0,
            "username": "getrekt",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MIRROR\n#define PERIOD \t\t\t4.0  // <- Angle_dia = pi * period \n#define INNER_DAMPING   4.0  // <- Damping damping for inner radius damping. > 1 = MADNESS\n#define DOUBLE_DAMPING  0.54 // <- Damping of Buffer A\n #define SWAP              // <- Swap inner and outer\n// #define MADNESS           // <- Uncomment if you want to see some features\n#define RED             3.0  // <- value of .. idk, this is for red\n#define GREEN           2.0  // <- for green \n#define BLUE            5.0  // <- for blue\n#define COLOR_ADD       .3  // <- increase color intensivity\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Constants\n    float RADIUS = min(iResolution.x, iResolution.y) / 4.0;\n    float inner, outer;\n    \n    // Get distance\n    vec2 dist    = fragCoord.xy - iResolution.xy / 2.0;\n    float s_dist = sqrt(dist.x * dist.x + dist.y * dist.y);\n \t\n    // Get rotation angle [0.0 - 1.0]\n    float angle  = atan(dist.y / dist.x) / (3.14 * PERIOD) + 0.25;\n    if(dist.x <= 0.0)\n        angle += 0.5;\n    #ifdef MIRROR\n    \tif(dist.x <= 0.0)\n            angle = 1.0 - angle;\n    #endif\n    \n    #ifndef SWAP\n    \tinner = texture(iChannel0, vec2(angle, 0.25)).x;\n    \touter = texture(iChannel0, vec2(angle, 0.75)).x;\n    #else\n    \tinner = texture(iChannel0, vec2(angle, 0.75)).x;\n    \touter = texture(iChannel0, vec2(angle, 0.25)).x;\n    #endif\n    \n    float color = 0.0;\n    float radius = 0.0;\n    float damping = s_dist / iResolution.x * 2.0;// * INNER_DAMPING;\n    float frame_render = texture(iChannel1, uv).x * DOUBLE_DAMPING;\n    \n    radius = (RADIUS + 0.1) * (0.9 + outer * damping);\n    \n    if(s_dist < radius)\n        color = 1.0;\n    else\n        color = damping * (radius / iResolution.x + 1.0 - damping);\n    \n    #ifdef MADNESS\n    \tradius = (RADIUS * 0.84) * (1.0 + inner * damping);\n    #else\n    \tradius = (RADIUS - 0.1) * (1.0 - inner * (damping * INNER_DAMPING));\n    #endif\n    \n    if(s_dist < radius)\n        color = 0.2 * (1.0 - damping) * (radius / iResolution.x + 1.0 - damping);\n    \n    fragColor = vec4(color);\n    \n    // Coloring \n    float scalar_color_offset = COLOR_ADD + s_dist / radius * (1.0 - COLOR_ADD);\n    \n    fragColor *= vec4(RED, GREEN, BLUE, 1.0) * scalar_color_offset;\n    \n    // Bound it down\n    fragColor = clamp(vec4(0.0), vec4(1.0), fragColor + frame_render);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27911,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/princessrosalina/sick-as-hell-sonic-mashup"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}