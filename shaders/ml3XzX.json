{
    "Shader": {
        "info": {
            "date": "1685708865",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n(mouseable) - If slow turn AA off (1) AA for good systems = turn AA (2)",
            "flags": 0,
            "hasliked": 0,
            "id": "ml3XzX",
            "likes": 20,
            "name": "Year of Truchets #030",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "truchet",
                "flying"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #030\n    06/01/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n\n    (mouseable) - AA for good systems = turn AA on with 2 or more.\n    \n*/\n\n#define ZERO (min(iFrame,0))\n#define AA 2\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define P9          1.57078\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define MIN_DIST    .0001\n#define MAX_DIST    35.\n\n// globals\nvec3 hit=vec3(0),hitpoint=vec3(0);\nvec4 FC=vec4(.267,.443,.635,0);\nmat2 turn,spin;\nfloat glow,move,px,stime;\n\n// standard bag of tricks\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat hash21(vec2 p){return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\n//@iq torus & hsv2rgb\nfloat torus(vec3 p,vec2 t){vec2 q=vec2(length(p.xz)-t.x,p.y);return length(q)-t.y;}\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0,4,2),6.)-3.)-1.,0.,1.);\n    return c.z * mix(vec3(1),rgb,c.y);\n}\nfloat trigger,stored;\n\nfloat tile(vec3 hp, float type){\n    //@Fabrice - uv around torus based off https://www.shadertoy.com/view/sdtGRn\n    float angle = atan(hp.z,hp.x)/PI2;\n    float d =  atan(hp.y,length(hp.zx)-2.)/PI2;\n    vec2 uv = vec2(angle,d);\n \n    vec2 scale = vec2(24.,12);\n    float thick = .045;\n    \n    if(type==2.) {\n        uv=hp.xz;\n        scale=vec2(1);\n        thick = .1;\n    }\n\n    vec2 grid = fract(uv.xy*scale)-.5;\n    vec2 id   = floor(uv.xy*scale);\n\n    float hs = hash21(id);\n    if (hs>.45) grid.x=-grid.x;\n\n    vec2 gplus = grid+.5,gmins = grid-.5;\n    vec2 d2 = vec2(length(gmins), length(gplus));\n    vec2 q = d2.x<d2.y? vec2(gmins) : vec2(gplus);\n    float c = length(q)-.5;\n\n    if(hs>.8) c =  min(length(grid.x)-.001,length(grid.y)-.001);\n    c = abs(c)-thick;\n\n    return c;\n}\n\nvec2 map(vec3 p, float sg) {\n    vec2 res = vec2(1e5,0.);\n    vec3 q = p-vec3(0,.5,move-1.);\n\n    q.xy*=spin;\n    q.zx*=turn;\n    float d1 = torus(q,vec2(2.,.85));\n    float d2=max(abs(d1)-.1,d1);\n\n    float t1 = tile(q,1.);\n    \n    d2=max(d2,-t1);\n    \n    if(d2<res.x) {\n        res=vec2(d2,d1<d2?3.:1.);\n        hit=q;\n    }\n    \n    float d3 = torus(q,vec2(2.,.075));\n    if(sg==1.) { glow += .001/(.0002+d3*d3);}\n    if(d3<res.x) {\n        res=vec2(d3,4.);\n        hit=q;\n    }\n    \n    float ff = .2*sin(p.x*.4+stime) + .2*cos(p.z*.73+stime);\n    float d4 = p.y-ff+2.;\n    if(d4<res.x) {\n        res=vec2(d4,2.);\n        hit=p;\n    }\n\n    return res;\n}\n\nvec3 normal(vec3 p, float t) {\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e,0.).x+\n             h.yyx * map(p+h.yyx*e,0.).x+\n             h.yxy * map(p+h.yxy*e,0.).x+\n             h.xxx * map(p+h.xxx*e,0.).x;\n    return normalize(n);\n}\n\nvec2 marcher(vec3 ro, vec3 rd) {\n    float d = 0., m = 0.;\n    for(int i=0;i<112;i++){\n        vec2 ray = map(ro + rd * d,1.);\n        if(ray.x<MIN_DIST*d||d>MAX_DIST) break;\n        d += i<32?ray.x*.25:ray.x*.85;\n        m  = ray.y;\n    }\n    return vec2(d,m);\n}\n\nvec4 render(inout vec3 ro, inout vec3 rd, inout vec3 ref, float last, inout float d, vec2 uv) {\n\n    vec3 C = vec3(0);\n    vec2 ray = marcher(ro,rd);\n    float m =ray.y; d=ray.x;\n    \n    hitpoint=hit;\n\n    if(d<MAX_DIST)\n    {\n        vec3 p = ro + rd * d;\n        vec3 n = normal(p,d);\n        // light\n        vec3 lpos =vec3(-25.,15.,10.);\n        vec3 l = normalize(lpos-p);\n        // difused\n        float diff = clamp(dot(n,l),.09,.99);\n\n        // color\n        vec3 h = vec3(1.);\n        vec3 hp = hitpoint;\n        \n        if(m==1.) {\n            float d = tile(hp,1.);\n            vec3 fd = mix(vec3(.2),vec3(.7),clamp(hp.y*2.,0.,1.));\n            d=smoothstep(px,-px,abs(d-.15)-.025);\n            h = mix(fd,vec3(.6),d);\n            ref = h*.1;\n        }\n        if(m==2.) {\n            hp.z-=T*8.;\n            float d = tile(hp*.5,2.);\n            d=smoothstep(px,-px,abs(abs(d)-.05)-.025);\n            vec3 clr = hsv2rgb(vec3((hp.x-hp.z)*.1,1.,.5));\n            h = mix(vec3(.6),clr,d);\n            ref = vec3(d*.9);\n        }\n        if(m==3.) {\n            h = hsv2rgb(vec3((hp.x+T)*.2,1.,.5));\n            ref = h;\n        }\n        if(m==4.) h = vec3(1);\n  \n        C = diff*h;\n        ro = p+n*.005;\n        rd = reflect(rd,n);\n    } \n    if(last>0.) C = mix(FC.rgb,C,exp(-.0008*d*d*d));\n    return vec4(C,d);\n}\n\nvec3 renderALL( in vec2 uv, in vec2 F )\n{   \n\n    // standard setup uv/ro/rd\n    //vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,0,5.5);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    // mouse\n    float x = M.xy==vec2(0) || M.z <1. ? 0. : -(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0) || M.z <1. ? 0. : -(M.x/R.x*.50-.250)*PI;\n\n    float pf = .5*sin(T*.35);\n    \n    mat2 rx = rot(-.58-x), ry = rot(y-pf);\n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n    \n    // reflection loop (@BigWings)\n    vec3 C = vec3(0);\n    vec3 ref=vec3(0), fil=vec3(.95);\n    float d =0.,a=0.;\n\n    for(float i=0.; i<2.; i++) {\n        vec4 pass = render(ro, rd, ref, i, d, uv);\n        C += pass.rgb*fil;\n        fil*=ref;\n        if(i==0.)a=pass.w;\n    }\n           \n    C = mix(FC.rgb,C,exp(-.00015*a*a*a));\n    C = mix(C,vec3(.89),clamp(glow*.5,0.,1.));\n   // C=pow(C, vec3(.4545));\n    return C;\n}\n\n// AA from @iq https://www.shadertoy.com/view/3lsSzf\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    turn = rot(T*.35);\n    spin = rot(.2*sin(T*1.15));\n    move = -3.*cos(T*.3);\n    px  = 10./R.x;\n    stime=T*.1;\n    vec3 C = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 uv = (-R.xy + 2.0*(F+o))/max(R.x,R.y);\n#else    \n        vec2 uv = (-R.xy + 2.0*F)/max(R.x,R.y);\n#endif\n\n        vec3 color = renderALL(uv,F);\n        // compress        \n        color = 1.35*color/(1.0+color);\n        // gamma\n        color = pow( color, vec3(0.4545) );\n\n        C += color;\n        glow=0.;\n#if AA>1\n    }\n    C /= float(AA*AA);\n#endif\n    // Output to screen\n    O = vec4(C,1.);\n}\n//end",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}