{
    "Shader": {
        "info": {
            "date": "1624574613",
            "description": "Even more generalized version of my limacon intersector. Except now its not technically a limacon.\nI've changed my mind about the formulation, anyway I'd rather not reformulate it :D",
            "flags": 0,
            "hasliked": 0,
            "id": "flS3Dy",
            "likes": 15,
            "name": "Limacon Intersection 2D II",
            "published": 3,
            "tags": [
                "intersection",
                "trigonometric",
                "quartic",
                "trochoid",
                "generalized",
                "limacon",
                "uglycode"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "// Convenience struct\nstruct Hit4 {\n    int nHit;\n    vec2[4] pHit;\n};\n\n// Drawing utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n// SDFs\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sqLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    vec2 toProj = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return dot(toProj, toProj);\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdInfLine(in vec2 p, in vec2 a, in vec2 b) {\n    return abs(dot(p - a, normalize(b - a).yx * vec2(-1.0, 1.0)));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v); vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m) - 0.025, sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\n// Parametric equation\nvec2 posLimacon(in float t, in float alpha, in float beta) {\n    float t2 = 2.0 * t;\n    return vec2(cos(t2) + alpha * cos(t),\n                sin(t2) +  beta * sin(t));\n}\n\n// Intersection\nint solveReducedQuartic(in float b, in float c, in float d, in float e, inout vec4 roots) {\n    // Depress the quartic to x^4 + px^2 + qx + r by substituting x-b/4a\n    // This can be found by substituting x+u and the solving for the value\n    // of u that makes the t^3 term go away\n    float bb = b * b;\n    float p = c - 0.375 * bb;\n    float q = d -   0.5 * b * c + 0.125 * bb * b;\n    float r = e -  0.25 * b * d +         bb * c / 16.0 - 3.0 * bb * bb / 256.0;\n    int n = 0; // Root counter\n\n    // Solve for a root to (t^2)^3 + 2p(t^2)^2 + (p^2 - 4r)(t^2) - q^2 which resolves the\n    // system of equations relating the product of two quadratics to the depressed quartic\n    float ra =  2.0 * p;\n    float rb =  p * p - 4.0 * r;\n    float rc = -q * q;\n\n    float ru = ra / 3.0;\n    float rp = rb - ra * ru;\n    float rq = (ra * ra / 4.5 - rb) * ru + rc;\n\n    float lambda;\n    float sp = sqrt(3.0 / abs(rp)), k = 1.5 * rq * sp / rp;\n    if (rp * rp * rp + 6.75 * rq * rq > 0.0) {\n        if (rp < 0.0) lambda = cosh(acosh(abs(k)) / 3.0) * sign(rq);\n        else lambda = sinh(asinh(k) / 3.0);\n        lambda /= -sp;\n    }\n\n    else lambda = cos(acos(k) / 3.0) / sp;\n    lambda = 2.0 * lambda - ru;\n\n    // Solve two quadratics factored from the quartic using the cubic root\n    if (lambda < 0.0) return n;\n    float t = sqrt(lambda); // Because we solved for t^2 but want t\n    float alpha = 2.0 * q / t, beta = lambda + ra;\n\n    float u = 0.25 * b;\n    t *= 0.5;\n\n    float z = -alpha - beta;\n    if (z > 0.0) {\n        z = sqrt(z) * 0.5;\n        float h = +t - u;\n        roots.xy = vec2(h + z, h - z);\n        n += 2;\n    }\n\n    float w = +alpha - beta;\n    if (w > 0.0) {\n        w = sqrt(w) * 0.5;\n        float h = -t - u;\n        roots.zw = vec2(h + w, h - w);\n        if (n == 0) roots.xy = roots.zw;\n        n += 2;\n    }\n\n    return n;\n}\n\nHit4 iLimacon(in vec2 ro, in vec2 rd, in float alpha, in float beta) {\n    Hit4 isect = Hit4(0, vec2[4](vec2(0.0), vec2(0.0), vec2(0.0), vec2(0.0)));\n\n    vec2 uv = normalize(rd);\n    float y = ro.x * uv.y - ro.y * uv.x; // Rotate ray so its parallel and we can solve for y only\n                                         // instead of a trigonometric system (trig was meant for geometry! not algebra)\n\n    float u = 0.5 * atan(rd.y, rd.x); // Translation in x to reduce\n    float s = length(vec2(beta, alpha) * uv); // Amplitude of cosine (\"s\" for scale)\n    float o = atan(beta * uv.x, alpha * uv.y) + u; // Offset of cosine\n    float sso = s * sin(o);\n\n    float b = sso;\n    float c = 0.25 * s * s - 1.0;\n    float d = -sso - 0.5 * y * s * cos(o);\n    float e = 0.25 * (y * y - sso * sso);\n\n    vec4 roots;\n    isect.nHit = solveReducedQuartic(b, c, d, e, roots);\n    for (int n=0; n < isect.nHit; n++) {\n        float t = acos(roots[n]); // Undo change of variable to cos(x)\n\n        // \"Manually\" select sign because acos() gives abs(cosineRoot)\n        // (asin() is even more irrational, it sometimes gives sineRoot or Ï€-sineRoot)\n        t *= sign(abs(s * cos(t + o) - sin(2.0 * t) - y) - abs(s * cos(t - o) + sin(2.0 * t) - y));\n        t -= u; // Undo change of variable to t+u\n\n        float t2 = 2.0 * t;\n        isect.pHit[n] = vec2(cos(t2) + alpha * cos(t), -sin(t2) - beta * sin(t));\n    }\n\n    return isect;\n}\n\n// Animation\nvec2 Hash12(in float t) {\n\tvec3 p3 = fract(t * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec4 getRay(in float t) {\n    float id = floor(t), local = fract(t);\n    vec2 a = Hash12(id), b = Hash12(id + 1.0), c = Hash12(id + 2.0);\n    vec2 mid1 = 0.5 * (a + b), mid2 = 0.5 * (b + c);\n\n    float tInv = 1.0 - local;\n    vec2 pos = mid1 * tInv * tInv + 2.0 * b * tInv * local + mid2 * local * local;\n    vec2 dir = normalize(mid1 * (local - 1.0) + (1.0 - 2.0 * local) * b + mid2 * local);\n\n    return vec4(pos, dir);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 8.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 8.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float animTime = 0.5 * iTime;\n    float alpha = 2.5 * sin(animTime);\n    float beta = 2.5 * cos(animTime);\n\n    // Because this is my favorite shape it makes :)\n    float trefoilTransition = 0.5 + 0.5 * sin(0.1 * iTime);\n    alpha = mix(alpha, -1.35, trefoilTransition);\n    beta = mix(beta, 1.35, trefoilTransition);\n\n    vec4 ray = getRay(iTime * 0.25);\n    vec2 ro = ray.xy * 8.0 - 4.0, rd = ray.zw;\n    if (iMouse.z > 0.0) ro = mouse.zw, rd = mouse.xy - mouse.zw;\n\n    // Draw limacon\n    float limacon = 1e20;\n    vec2 prev = posLimacon(-3.14, alpha, beta);\n    float tStep = 0.1;\n    for (float t=tStep - 3.14; t < 3.14 + tStep; t += tStep) {\n        vec2 cur = posLimacon(t, alpha, beta);\n        limacon = min(limacon, sqLine(uv, prev, cur));\n        prev = cur;\n    }\n\n    drawSDF(sqrt(limacon) * 0.5 - 0.015, vec3(0.0, 0.0, 1.0));\n\n    // Draw ray\n    drawSDF(sdInfLine(uv * 0.5, ro * 0.5, (ro + rd) * 0.5) - 0.001, vec3(1.0, 0.8, 0.0));\n    drawSDF(sdVectorArrow((uv - ro) * 0.5, rd * 0.5), vec3(1.0));\n\n    // Find the closest hit in front of the camera\n    Hit4 hit = iLimacon(ro, rd, alpha, beta);\n    for (int n=0; n < hit.nHit; n++) {\n        drawSDF(length(uv - hit.pHit[n]) - 0.1, vec3(1.0, 0.0, 0.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}