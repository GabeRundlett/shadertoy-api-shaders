{
    "Shader": {
        "info": {
            "date": "1678186098",
            "description": "hi guys, i developed a tool to convert hex to vec3, it is also a color picker link is\nhttps://hextovec3.deno.dev/\n[url]https://hextovec3.deno.dev/[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdy3z1",
            "likes": 10,
            "name": "like fire",
            "published": 3,
            "tags": [
                "tool"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\n\nfloat f_n_rnd11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n\n    vec3 o_clr_sum = vec3(0.);\n    vec3 o_clr = vec3(0.);\n    vec3[] a_o_clr = vec3[] (\n        vec3(0.086, 0.208, 0.816),\n        vec3(0.243, 0.639, 0.435),\n        vec3(0.565, 0.282, 0.796), \n        vec3(0.863, 0.878, 0.102), \n        vec3(0.655, 0.216, 0.184)\n    );\n    float n_len_a_o_clr = float(a_o_clr.length());\n\n    float n_its = 100.;\n    float n_dmin = 1.;\n    vec3 o_clr_min = vec3(0.);\n    float n_dprod = 1.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        float n_it_nor = n_it/n_its;\n        float n_radius = (sin(iTime+n_it_nor*n_tau*2324.2)*.5+.5)*.5;\n        float n_radians = n_tau * n_it_nor;\n   \n        float n_idx = f_n_rnd11(n_it_nor);\n        // float n_idx = fract(n_it_nor);\n        vec3 o_clr = a_o_clr[int(n_idx*n_len_a_o_clr)];\n        vec2 o_p = vec2(\n            sin(n_radians) * n_radius,\n            cos(n_radians) * n_radius\n        );\n        float n_d = length(o_p-o_fc);\n        // n_d = smoothstep(0.1, 0., n_d);\n        n_d = pow(n_d, 1./5.);\n        o_clr_sum += o_clr*smoothstep(n_idx, 0., n_d);\n        // o_clr = vec3(n_d);\n        if(n_d < n_dmin){\n            n_dmin = n_d;\n            o_clr_min = o_clr;\n        }\n        n_dprod*= n_d;\n    }\n    fragColor = vec4(0.);\n    float n_d = 1.-pow(n_dmin, 1./3.);\n    n_d = smoothstep(.3, 1., n_d);\n    // fragColor = vec4(n_d);\n    // fragColor = vec4(vec3(n_d*o_clr_min), 1.);\n    fragColor = vec4(o_clr_sum*pow(n_dprod,1./22.)*4., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}