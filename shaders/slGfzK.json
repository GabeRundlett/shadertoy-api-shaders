{
    "Shader": {
        "info": {
            "date": "1664822937",
            "description": "Fill in an undefined region of an image with something sort of contiguous with the defined part.\n\nThis is a quick-and-dirty (again) attempt at preparing an image for outpainting with AI.  But it's not very good.",
            "flags": 0,
            "hasliked": 0,
            "id": "slGfzK",
            "likes": 6,
            "name": "Outpaint noise experiment",
            "published": 3,
            "tags": [
                "noise",
                "outpainting"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "float hash(vec2 uv) {\n    // Seeing some weird discontinuity coming from overflow cases -- this'll fix it!\n    uv = vec2(ivec2(floatBitsToUint(uv.x), floatBitsToUint(uv.y))) / 65537.0;\n\n    const vec2 swiz = vec2(12.9898, 78.233);\n    return fract(sin(dot(uv, swiz)) * 43758.5453);\n}\n\nfloat hash(float f) {\n    return hash(vec2(f));\n}\n\nfloat noise(vec2 uv, float p) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    f = smoothstep(0.0, 1.0, f);\n    vec4 o = vec4(vec2(-0.5), vec2(0.5)) + fract(p * 1.73737373);\n    return mix(mix(hash(i + o.xy), hash(i + o.zy), f.x),\n               mix(hash(i + o.xw), hash(i + o.zw), f.x),\n               f.y);\n}\n\nfloat nnoise(vec2 uv, float p) {\n    return noise(uv, p) * 0.5\n         + noise(uv * 2.01, p) * 0.25\n         + noise(uv * 4.017, p) * 0.125\n         + noise(uv * 8.029, p) * 0.125;\n}\n\nfloat pnoise(vec2 uv, float r, float t) {\n    uv = r * vec2(\n      dot(uv, vec2(cos(t), sin(t))),\n      dot(uv, vec2(-sin(t), cos(t)))\n              );\n    return nnoise(uv, t + 1.0);\n}\n\nvec4 puke(vec2 uv) {\n   vec3 colour = vec3(\n       pnoise(uv, 18.0, 0.0),\n       pnoise(uv, 19.0, 1.0),\n       pnoise(uv, 21.0, 2.0)\n    );\n#if 0\n    colour *= mat3(\n        1.164, 0.0  , 1.596,\n        1.164,-0.392,-0.813,\n        1.164, 2.017, 0.0  );\n#endif\n\n    return smoothstep(0.0, 1.0, vec4(colour, 1.0));\n}\n\nvec2 scrib(float t, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n\nvec2 pscribble(vec2 uv, float r, float t) {\n    r *= 14.0;\n    return vec2(pnoise(uv, r, t), pnoise(uv, r, t + 1.0)) - vec2(0.5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec4 colour = vec4(0.0);\n\n    float yclip = 0.5 + sin(iTime * 0.01) * 0.3;\n\n    vec2 uvclip = vec2(uv.x, min(uv.y, yclip));\n    float s = uv.y - uvclip.y;\n    if (s > 0.0) {\n      colour.rgb = puke(uv).rgb;\n\n      vec2 wobble = s * s * pscribble(uv, 1.0, 0.0) * 2.0;\n      vec2 curl = s * (pscribble(uv, 0.2, 1.0) + vec2(0.0, -0.5));\n\n      uv = uvclip + wobble + curl;\n      s = smoothstep(0.2, 0.5, s);\n    }\n\n    vec4 tex = texture(iChannel0, uv);\n    if (uv.y > yclip) tex = vec4(0.0);\n    \n    colour.rgb = mix(tex.rgb, colour.rgb, s);\n    colour.a = texture(iChannel0, fragCoord / iResolution.xy).a;\n\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}