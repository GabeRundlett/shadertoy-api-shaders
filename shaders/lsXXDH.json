{
    "Shader": {
        "info": {
            "date": "1681573916",
            "description": "Click and move mouse around to change parameters!\nSimulate early video/tv footage by combining sharpening and an approximation of the color response of photographic film.",
            "flags": 2,
            "hasliked": 0,
            "id": "lsXXDH",
            "likes": 5,
            "name": "Lofi video/film (webcam)",
            "published": 3,
            "tags": [
                "video",
                "webcam",
                "film",
                "lofi",
                "vintage"
            ],
            "usePreview": 1,
            "username": "teadrinker",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "\n\nconst float si = 5.; // sampling quality for sharpening, kind of \n\n\nvec4 colorAdjust(vec4 col) { \n    \n    // simulate film colors\n\tcol = \t\tvec4(col.x*0.8+col.y*0.2,\n\t\t\t\t\t col.x*0.2+col.y*0.6+col.z*0.2,\n\t\t\t\t\t col.y*0.7+col.z*0.3,1);\t\n                    \n    // increase saturation\n    float sat = 1.0;\n    float o = 1. + sat;\n    float z = -sat / 2.;\n\tcol = \t\tvec4(col.x*o+col.y*z+col.z*z,\n\t\t\t\t\t col.x*z+col.y*o+col.z*z,\n\t\t\t\t\t col.x*z+col.y*z+col.z*o, 1);\t                     \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius = 0.5;\n    float contrast = 0.3;\n\n    if(length(iMouse.xy) > 0.) {\n        contrast = iMouse.y/iResolution.y;\n        radius = iMouse.x/iResolution.x;\n    }\n\n\tfloat muln= 1. / pow((si)*2.,2.);\n\tfloat blurs = pow(radius,5.)/(si*2.);\n    \n\tvec2 uv = vec2(iResolution.x-fragCoord.x, iResolution.y - fragCoord.y) / iResolution.xy;\n\tvec4 color = vec4(0);\n\tfor(float x = -si+0.5 ; x < si; x++) {\n\t\tfor(float y = -si+0.5 ; y < si; y++) {\n\t\t\tvec4 col = (texture(iChannel0, uv + blurs*vec2(float(x),float(y))) );\n\t\t\tcolor = color + col;\n  \t\t}\n\t}\n    vec4 org = texture(iChannel0, uv);\n    vec4 sharpenedImage = org - color * muln;\n\tfragColor = colorAdjust(sharpenedImage*0.005*(20.*pow(contrast,3.))/blurs + 0.3*org + 0.3);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}