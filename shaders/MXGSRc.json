{
    "Shader": {
        "info": {
            "date": "1722347417",
            "description": "Approximation of the optical depth of a gaussian layer.\nPictured: artist's rendition of Earth's airglow.\nMouse click to compare with numerical integration.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXGSRc",
            "likes": 3,
            "name": "Gaussian-ish airglow approx.",
            "published": 3,
            "tags": [
                "atmosphere",
                "chapman",
                "airmass"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Approximation of optical depth in a gaussian-ish layer (e.g.\n// ozone layer, airglow, etc.; though neither actually matches\n// a gaussian all that well). Probably way heavier and more\n// complicated than it needs to be.\n\n// Similar to https://www.shadertoy.com/view/4XSGzW we approximate\n// the height h = |r|-R ≈ (r^2-R^2)/(2*R) and substitute that into\n// a gaussian profile:\n//     exp(-h^2/(2*w^2)) ≈ exp(-(r^2-R^2)/(8*R^2*w^2))\n// Without loss of generality we can assume 8*R^2*w^2=1 (can be\n// achieved with simple rescaling). In appropriate coordinates,\n// this becomes\n//     exp(-(x^2+y^2-R^2)^2)\n// where y is the impact parameter.\n// For |y|=R we can obtain explicit expressions for both\n// complete (on (-∞;+∞)), and incomplete integrals:\n//     2*Γ(5/4)            = ∫ exp(-t^4) dt on (-∞;+∞)\n//     sgn(x)*γ(1/4,x^4)/4 = ∫ exp(-t^4) dt on [0;x]\n// Here Γ is the gamma function, and γ is the lower incomplete\n// gamma function: γ(a,x)=Γ(a)-Γ(a,x).\n// For |y|≠R (denoting X^2 = |y^2-R^2|), the expression\n// for the complete integral appears to be\n//     π/2*|X|*exp(-X^4/2)*(I(-1/4,X^4/2)∓I(+1/4,X^4/2)) = ∫ exp(-(t^2±X^2)^2) dt on (-∞;+∞)\n// where I(ν,x) is the modified Bessel function of the first kind.\n// WARNING: I do not have a proof of the above equality, though\n// the expression for exp(-(t^2+X^2)^2) case can be obtained from\n// \"Table of Integrals, Series, and Products\" by Gradshteyn and Ryzhik\n// (3.323 in 7th ed.). The result does appear to match the numerical\n// integration up to machine precision. Using reflection formulae\n// (e.g. https://dlmf.nist.gov/10.27), we can obtain expressions\n// using only positive-order Bessel functions:\n//     |X|*exp(-X^4/2)*K(1/4,X^4/2)/sqrt(2)                  = ∫ exp(-(t^2+X^2)^2) dt on (-∞;+∞)\n//     |X|*exp(-X^4/2)*(K(1/4,X^4/2)/sqrt(2)+π*I(1/4,X^4/2)) = ∫ exp(-(t^2-X^2)^2) dt on (-∞;+∞)\n// where K(ν,x) is the modified Bessel function of the second kind.\n// The global maximum (in exp(-(t^2-X^2)^2) case) is\n//     max(π/2*|X|*exp(-X^4/2)*(I(-1/4,X^4/2)+I(+1/4,X^4/2)))≈2.15237 at X≈0.73546\n// Maximum being at |y|≠R makes intuitive sense (e.g. it is also the case for\n// a finite-width constant-density layer).\n// Note that the expressions above run risk of intermediate overflow (even\n// though the integrals themselves behave roughly as exp(-X^4)/sqrt(1+X^2) and\n// 1/sqrt(1+X^2) respectively). This is no problem here, since we simply\n// provide their approximations, backed by numerical integration.\n// For |X|→∞ the asymptotics are:\n//     exp(-X^4/2)*sqrt(π/2)*(1/X-(3/16)/X^5+O(1/X^6)) (for exp(-(t^2+X^2)^2) case)\n//                 sqrt(π)  *(1/X+(3/16)/X^5+O(1/X^6)) (for exp(-(t^2-X^2)^2) case)\n// No explicit expression for the incomplete integral seems to present itself.\n// For many practical cases, the complete integral is sufficient, e.g. the optical\n// depth on a ray from either surface or far enough space is often well-approximated\n// by it (or half of it).\n// Sometimes we do need the incomplete integral, and an approximation needs to be\n// decent enough (some simple approximations do produce visual artifacts). Here\n// we provide a sloppy (neither accurate nor fast) approximation, based on\n// tanh(a*t+b*t^3), which appears to be accurate enough for visualization purposes.\n//\n// Literature:\n//     The 1997 reference of diffuse night sky brightness Ch. Leinert, S. Bowyer, L. K. Haikala, M. S. Hanner, M. G. Hauser, A.-Ch. Levasseur-Regourd, I. Mann, K. Mattila, W. T. Reach, W. Schlosser, H. J. Staude, G. N. Toller, J. L. Weiland, J. L. Weinberg and A. N. Witt Astron. Astrophys. Suppl. Ser., 127 1 (1998) 1-99 DOI: https://doi.org/10.1051/aas:1998105\n//         https://aas.aanda.org/articles/aas/abs/1998/01/ds1449/ds1449.html\n//     Green, A.E.S. and J. D. Martin. 1966. A generalized Chapman function, Chapter 7. In: Green, A.E.S. (ed.) The Middle Ultraviolet - Its Science and Technology, J. Wiley.\n//         https://articles.adsabs.harvard.edu//full/1966must.conf..140G/0000157.000.html\n//     Vladislav Yu. Khomich , Anatoly I. Semenov , Nicolay N. Shefov. \"Airglow as an Indicator of Upper Atmospheric Structure and Dynamics\" https://doi.org/10.1007/978-3-540-75833-4\n\nconst float pi=3.14159265358979;\n\n// Approximation of exp(x^4) * ∫ exp(-(t^2+x^2)^2) dt on (-∞;+∞).\n// Eabs<1.4e-3\n// Erel<1.5e-3\nfloat Splus(float x)\n{\n    const float a=1.28125;\n    x=a/sqrt(a*a+x*x);\n    return x*(+0.976194725+x*(+0.0631268564+x*(+0.126725790+x*(+0.646757582))));\n}\n\n// Approximation of ∫ exp(-(t^2-x^2)^2) dt on (-∞;+∞).\n// Eabs<3.8e-3\n// Erel<1.8e-3\nfloat Sminus(float x)\n{\n    const float T=0.7354603;\n    if(x>T)\n    {\n        const float a=0.65625;\n        x-=T;\n        x=a/sqrt(a*a+x*x);\n        // Eabs<2.99e-3\n        // Erel<1.79e-3\n        return x*(+2.70597718+x*(-3.31399917+x*(+7.48115344+x*(-15.3842784+x*(+18.9716412+x*(-8.30812754))))));\n    }\n    else\n    {\n        // Eabs<3.73e-3\n        // Erel<1.75e-3\n        return +1.81596980+x*(-0.135921521+x*(+2.12158896+x*(-1.78780397)));\n    }\n}\n\n// Approximation of ∫ exp(-(t^2-x^2)^2) dt on [-x;+x].\n// Eabs<3.8e-3\n// Erel<7.0e-3 (roughly estimated)\nfloat Hminus(float x)\n{\n    // Eabs: 1.8e-4\n    // Erel: 3.1e-4\n    if(x<1.0) return x*(+1.99937818+x*(+0.0326453870+x*(-0.355823399+x*(+1.46876926+x*(-3.70822284+x*(+1.81033653))))));\n    else\n    {\n        // Eabs<1.79e-3+0.5*Eabs(Sminus)<3.8e-3\n        // Erel<7.0e-3 (roughly estimated)\n        float z=exp(1.0-x);\n        return 0.5*Sminus(x)+z*(+0.0438191529+z*(+0.399170682+z*(-1.78243448+z*(+3.43116978+z*(-1.83150808)))));\n    }\n}\n\n// Helper function for integral.\nfloat F(float X,float S,float H,float t)\n{\n    float s=sign(t);\n    t=abs(t);\n    if(t<X)\n    {\n        // Actually pretty bad for small X, but\n        // doesn't appear to be visually problematic.\n        float a=1.0/H;\n        float b=max(a*(a*a-4.0*X*X)/3.0,0.0);\n        t=X-t;\n        return s*H*(1.0-tanh(t*(a+t*t*b))/tanh(X*(a+X*X*b)));\n    }\n    else\n    {\n        float a=1.0/(S-H);\n        float b=a*(a*a-4.0*X*X)/3.0;\n        t=t-X;\n        return s*(H+(S-H)*tanh(t*(a+t*t*b)));\n    }\n}\n\nfloat integral(float R,float y,float l,float h)\n{\n    float X=sqrt(abs((y-R)*(y+R)));\n    if(abs(y)>=R)\n    {\n        float S=0.5*Splus(X);\n        float a=1.0/S;\n        float b=a*(a*a-2.0*X*X)/3.0;\n        return S*exp(-X*X*X*X)*(tanh(h*(a+h*h*b))-tanh(l*(a+l*l*b)));\n    }\n    else\n    {\n        float S=0.5*Sminus(X);\n        float H=0.5*Hminus(X);\n        return F(X,S,H,h)-F(X,S,H,l);\n    }\n}\n\n// Numerical integration steps\n#define N 32\n\n// Reference version, using numerical integration.\nfloat integral_ref(float R,float y,float l,float h)\n{\n    float ret=0.0;\n    float X=sign(y-R)*sqrt(abs((y-R)*(y+R)));\n    float w=8.0/sqrt(1.0+X*X);\n    float R0=(X>0.0?0.0:max(0.0,abs(X)-w));\n    float R1=abs(X)+w;\n    vec2 L=vec2(-R1,-R0),H=vec2(+R0,+R1);\n    L.x=max(L.x,l);\n    H.x=max(H.x,l);\n    L.y=min(L.y,h);\n    H.y=min(H.y,h);\n    L.x=min(L.x,L.y);\n    H.x=min(H.x,H.y);\n    vec2 S=L;\n    for(int k=0;k<2;++k)\n    {\n        for(int i=0;i<N;++i)\n        {\n            float x=mix(S.x,S.y,(float(i)+0.5)/float(N));\n            float z=x*x+y*y-R*R;\n            ret+=exp(-z*z)*(S.y-S.x)/float(N);\n        }\n        S=H;\n    }\n    return ret;\n}\n\nfloat integral(vec3 c,float R,float w,vec3 ro,vec3 rd,float lo,float hi)\n{\n    float W=sqrt(sqrt(8.0)*w*R);\n    vec3 r=ro-c;\n    R/=W;\n    r/=W;\n    lo/=W;\n    hi/=W;\n    float y=length(r-dot(r,rd)*rd);\n    lo=lo+dot(r,rd);\n    hi=hi+dot(r,rd);\n    return W*integral(R,y,lo,hi);\n}\n\nfloat integral_ref(vec3 c,float R,float w,vec3 ro,vec3 rd,float lo,float hi)\n{\n    float W=sqrt(sqrt(8.0)*w*R);\n    vec3 r=ro-c;\n    R/=W;\n    r/=W;\n    lo/=W;\n    hi/=W;\n    float y=length(r-dot(r,rd)*rd);\n    lo=lo+dot(r,rd);\n    hi=hi+dot(r,rd);\n    return W*integral_ref(R,y,lo,hi);\n}\n\n// Or use actual infinity, if available.\nconst float INF=1e17;\n\n// Solve equation x^2+2*p*x+q=0.\nvec2 quadratic_solve(float p,float q)\n{\n    float d=p*p-q;\n    return d<0.0?vec2(+INF,-INF):-p+sqrt(d)*vec2(-1,+1);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // Much of airglow data is from\n    //     The 1997 reference of diffuse night sky brightness Ch. Leinert, S. Bowyer, L. K. Haikala, M. S. Hanner, M. G. Hauser, A.-Ch. Levasseur-Regourd, I. Mann, K. Mattila, W. T. Reach, W. Schlosser, H. J. Staude, G. N. Toller, J. L. Weiland, J. L. Weinberg and A. N. Witt Astron. Astrophys. Suppl. Ser., 127 1 (1998) 1-99 DOI: https://doi.org/10.1051/aas:1998105\n    //     https://aas.aanda.org/articles/aas/abs/1998/01/ds1449/ds1449.html\n    const float Re=6.3781e6;               // Nominal Earth equatorial radius, in m.\n    // There are several sources of airglow, with roughly\n    // similar width, at ~90 km.\n    const float H=90e3;                    // Height of airglow layer.\n    const float W=10e3;                    // Width (FWHM) of airglow layer.\n    const float w=W/sqrt(8.0*log(2.0));    // Width (sigma) of airglow layer.\n    const float R=Re+H;\n    float h=Re/4096.0;\n    // Background color. Since starlight and airglow\n    // are roughly similar in magnitude, it is not black.\n    vec3 col=3e-2*vec3(0.433,0.3257,0.27655); // Cosmic latte (CIE xz=(0.345,0.345)).\n    // RGB of 557.1 nm airglow OI line.\n    vec3 color=vec3(0.232,1.345,-0.168);\n    float k=5.0/R;   // Density (pretty arbitrary).\n    float z=mix(0.0,2.0*R,smoothstep(-1.0,+1.0,sin(0.5*iTime)));\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(0,Re+h,z);           // Ray origin.\n    vec3 rd=normalize(vec3(xy,-1.5)); // Ray direction.\n    float lo=0.0,hi=INF;              // Ray bounds.\n    // Render stars.\n    vec3 S=round(1024.0*rd);\n    S+=sin(S*S.yzx);\n    S=normalize(S);\n    col+=exp(-4.0*(1.0-sin(1e3*S.x)))*exp(-1e8*dot(rd-S,rd-S));\n    // Render planet.\n    vec2 s=quadratic_solve(dot(ro,rd),dot(ro,ro)-Re*Re);\n    if(s.x<s.y&&s.x>0.0) // Real roots exist and both positive.\n    {\n        vec3 l=normalize(vec3(1)); // Direction to lightsource.\n        hi=s.x;\n        vec3 r=ro+s.x*rd;\n        vec3 n=normalize(r);\n        col=vec3(0.2,0.125,0.05)*(0.0625+0.125*max(dot(n,l),0.0)); // Fake Lambertian shading.\n    }\n    // Render airglow.\n    // Optionally compare with reference (numerical integration) version.\n    if(iMouse.z>0.0&&fragCoord.x>0.5*iResolution.x) col+=k*color*integral_ref(vec3(0),R,w,ro,rd,lo,hi);\n    else                                            col+=k*color*integral    (vec3(0),R,w,ro,rd,lo,hi);\n    col=max(col,0.0);\n    col=1.0-exp(-1.0*col); // Tonemap.\n    col.xyz=mix(12.92*col.xyz,1.055*pow(col.xyz,vec3(1.0/2.4))-0.055,step(0.0031308,col.xyz)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}