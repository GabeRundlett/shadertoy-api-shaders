{
    "Shader": {
        "info": {
            "date": "1559860523",
            "description": "Compares different cubemapping distortion methods that improve sampling and pixel density",
            "flags": 0,
            "hasliked": 0,
            "id": "wtjGDw",
            "likes": 15,
            "name": "Cubemap distortion",
            "published": 3,
            "tags": [
                "3d",
                "distortion",
                "cubemap"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 962
        },
        "renderpass": [
            {
                "code": "// 2019 Inigo Quilez\n\n// Compares different cubemapping distortion methods that improve sampling\n// by making pixel density for uniform than the standard cubemapping. \n// Related shader: https://www.shadertoy.com/view/ltl3D8\n\n//  Method:\n//\n//  0 : none\n//  1 : atan, by Matt Zucker\n//  2 : linear 1, by Cass Everitt \n//  3 : linear 2, by Cass Everitt + Matt Zucker\n//  4 : quadratic, by Inigo Quilez\n// -1 : cycled them all\n\n#define METHOD -1\n\n\nvec4 cubemap( sampler2D sam, in vec3 d )\n{\n    // intersect cube\n    vec3 n = abs(d);\n    vec3 v = (n.x>n.y && n.x>n.z) ? d.xyz: \n             (n.y>n.x && n.y>n.z) ? d.yzx:\n                                    d.zxy;\n    // project to face    \n    vec2 q = v.yz/v.x;\n    \n    // undistort in the edges\n    #if METHOD==-1\n\tint mode = (int(iTime)%5);\n    #else\n    const int mode = METHOD;\n    #endif\n    if( mode==0 ) {}\n    if( mode==1 ) q  = atan(q*tan(0.868734829276))/0.868734829276;\n    if( mode==2 ) q *= 1.50 - 0.50*abs(q);\n    if( mode==3 ) q *= 1.45109572583 - 0.451095725826*abs(q);\n    if( mode==4 ) q *= 1.25 - 0.25*q*q;\n\n    // sample texture\n    vec2 uv = 0.5+0.5*q;\n    vec4 c = texture( iChannel0, uv );\n    // add wireframe\n\tvec2 w = 1.0-smoothstep(0.96,1.0,cos(10.0*uv*6.2831));\n    return c*w.x*w.y;\n}\n\n   \n//===============================================================================================\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.1*iTime;\n\tvec3 ro = vec3( 2.0*sin(an), 1.0+0.8*cos(1.7*an), 2.0*cos(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n\n    // render\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 of = vec2(i,j)/float(AA);\n\t    vec2 p = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // sphere center\t\n        vec3 sc = vec3(0.0,1.0,0.0);\n\n        vec3 col = vec3(0.0);\n\n        // raytrace-plane\n        float h = (0.0-ro.y)/rd.y;\n        if( h>0.0 ) \n        { \n            vec3 pos = ro + h*rd;\n            vec3 nor = vec3(0.0,1.0,0.0); \n            vec3 di = sc - pos;\n            float l = length(di);\n            float occ = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n\n            col = texture( iChannel0, 0.5*pos.xz ).xyz;\n            col *= occ*col*1.8;\n            col *= exp(-0.1*h);\n        }\n\n        // raytrace-sphere\n        vec3  ce = ro - sc;\n        float b = dot( rd, ce );\n        float c = dot( ce, ce ) - 1.0;\n        h = b*b - c;\n        if( h>0.0 )\n        {\n            h = -b - sqrt(h);\n            vec3 pos = ro + h*rd;\n            vec3 nor = normalize(ro+h*rd-sc); \n            float occ = 0.5 + 0.5*nor.y;\n            col = cubemap( iChannel0, nor ).xyz;\n            col *= occ*col*1.8;\n        }\n\n        // gamma\n        col = pow( col, vec3(0.4545) );\n        \n        tot += col;\n    }\n    tot /= float(AA*AA);\n    \n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}