{
    "Shader": {
        "info": {
            "date": "1570292056",
            "description": "Shadertoy implementation of ray tracing in one weekend, mouse can be dragged up and down to change vertical field of view and camera height.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdy3Ww",
            "likes": 6,
            "name": "Ray Tracing Weekend",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "cshenton",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    //vec4 a = texelFetch(iChannel0, ivec2(fragCoord),0);\n    //vec4 b = texelFetch(iChannel1, ivec2(fragCoord),0);\n    //vec4 c = texelFetch(iChannel2, ivec2(fragCoord),0);\n    vec4 d = texelFetch(iChannel3, ivec2(fragCoord),0);\n    \n    fragColor = d;// vec4((0.25*a.rgb + 0.25*b.rgb + 0.25*c.rgb + 0.25*d.rgb),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FLT_MAX 3.402823466e+38\n#define MAX_BOUNCES 5\n#define PI 3.141592650359\n\n\n//\n// Vector Helper functions\n//\nfloat normsq(vec3 v) {\n    return v.x*v.x + v.y*v.y + v.z*v.z;\n}\n\nfloat norm(vec3 v) {\n    return sqrt(normsq(v));\n}\n\nvec3 unit(vec3 v) {\n    return v / norm(v);\n}\n\nfloat schlick(float cosine, float index) {\n    float r0 = (1.0 - index) / (1.0 + index);\n    r0 = r0 * r0;\n    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);\n}\n\n\n//\n// Random Number Generation\n//\nstruct RNG {\n    float state;\n};\n    \nuint basehash(uvec2 p) {\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n    \nRNG fragmentrng(vec2 coord, float time) {\n    return RNG(float(basehash(floatBitsToUint(coord)))/float(0xffffffffU)+time);\n}\n\nuint basehash(inout RNG rng) {\n     return basehash(floatBitsToUint(vec2(rng.state+=.1, rng.state+=.1)));\n}\n\nfloat rand(inout RNG rng) {\n    uint n = basehash(rng);\n    return float(n)/float(0xffffffffU);\n}\n\nvec2 rand2(inout RNG rng) {\n    uint n = basehash(rng);\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 rand3(inout RNG rng) {\n    uint n = basehash(rng);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 sphere3(inout RNG rng) {\n    vec3 p;\n    do {\n        p = 2.0*rand3(rng) - vec3(1.0);\n    } while (normsq(p) >= 1.0);\n    return p;\n}\n\nvec3 disk3(inout RNG rng) {\n    vec3 p;\n    do {\n        p = 2.0*vec3(rand(rng), rand(rng), 0.0) - vec3(1.0, 1.0, 0.0);\n    } while (normsq(p) >= 1.0);\n    return p;\n}\n\nRNG RANDOM_STATE = RNG(0.0);\n\nvoid init_rand(vec2 coord, float time) { RANDOM_STATE = fragmentrng(coord, time); }\nfloat rand() { return rand(RANDOM_STATE); }\nvec2 rand2() { return rand2(RANDOM_STATE); }\nvec3 rand3() { return rand3(RANDOM_STATE); }\nvec3 sphere3() { return sphere3(RANDOM_STATE); }\nvec3 disk3() { return disk3(RANDOM_STATE); }\n\n\n\n//\n// Ray\n//\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n    \n\n   \n//\n// Materials and scatter functions\n//\n#define LAMBERTIAN 1\n#define METAL 2\n#define GLASS 3\n\nstruct Material {\n\tint type;\n    vec3 albedo;\n    vec3 emit;\n    float v; // other params, like metal fuzz\n};\n\nMaterial Lambertian(vec3 albedo) {\n    return Material(LAMBERTIAN, albedo, vec3(0.0), 0.0);\n}\n\nMaterial Metal(vec3 albedo, float fuzz) {\n    return Material(METAL, albedo, vec3(0.0), clamp(fuzz, 0.0, 1.0));\n}\n\nMaterial Metal(vec3 albedo) { return Metal(albedo, 0.0); }\n\nMaterial Glass(float index) {\n \treturn Material(GLASS, vec3(0.0), vec3(0.0), index);   \n}\n\n\n    \nstruct HitRecord {\n    float t;\n    vec3 p;\n    vec3 normal;\n    Material mat;\n};\n\nbool lambertian(in Material m, in Ray r, in HitRecord rec, out vec3 attenuation, out Ray scattered) {\n    scattered = Ray(rec.p, rec.normal + sphere3());\n\tattenuation = m.albedo;\n\treturn true;\n}\n                    \nbool metal(in Material m, in Ray r, in HitRecord rec, out vec3 attenuation, out Ray scattered) {\n    vec3 reflected = reflect(unit(r.direction), rec.normal);\n    scattered = Ray(rec.p, reflected + m.v * sphere3());\n    attenuation = m.albedo;\n    return (dot(scattered.direction, rec.normal) > 0.0);\n}\n\nbool glass(in Material m, in Ray r, in HitRecord rec, out vec3 attenuation, out Ray scattered) {\n    vec3 outward_normal;\n    float nint;\n    float cosine;\n    \n    if (dot(r.direction, rec.normal) > 0.0) {\n        outward_normal = -rec.normal;\n        nint = m.v;\n        cosine = m.v * dot(r.direction, rec.normal) / norm(r.direction);\n    }\n    else {\n        outward_normal = rec.normal;\n        nint = 1.0 / m.v;\n        cosine = -dot(r.direction, rec.normal) / norm(r.direction); \n    }\n    \n    \n    vec3 refracted = refract(unit(r.direction), unit(outward_normal), nint);\n    \n    if (norm(refracted) == 0.0) {\n        scattered = Ray(rec.p, reflect(r.direction, rec.normal));\n    }\n    else if (rand() < schlick(cosine, m.v)) {\n        scattered = Ray(rec.p, reflect(r.direction, rec.normal));\n    }\n    else {\n        scattered = Ray(rec.p, refracted);\n    }\n   \n    attenuation = vec3(1.0);\n    return true;\n}\t\n    \nbool scatter(in Material m, in Ray r, in HitRecord rec, out vec3 attenuation, out Ray scattered) {\n    if (m.type == LAMBERTIAN) {\n        return lambertian(m, r, rec, attenuation, scattered);\n    }\n    else if (m.type == METAL) {\n        return metal(m, r, rec, attenuation, scattered);\n    }\n    else if (m.type == GLASS) {\n        return glass(m, r, rec, attenuation, scattered);\n    }\n    else {\n        return false;\n    }\n}\n\n\n\n//\n// Sphere\n//\nstruct Sphere {\n    vec3 center;\n    float radius;\n    Material mat;\n};\n    \nbool hit(const in Sphere s, const in Ray r, \n         const in float tmin, const in float tmax,\n         inout HitRecord rec) {\n    vec3 oc = r.origin - s.center;\n    float a = dot(r.direction, r.direction);\n    float b = dot(oc, r.direction);\n    float c = dot(oc, oc) - s.radius*s.radius;\n    float discriminant = b*b - a*c;\n    if (discriminant > 0.0) {\n        float temp = (-b - sqrt(discriminant))/a;\n        if (temp < tmax && temp > tmin) {\n            rec.t = temp;\n            rec.p = r.origin + rec.t*r.direction;\n            rec.normal = (rec.p - s.center) / s.radius;\n\t\t\trec.mat = s.mat;\n            return true;\n        }\n        temp = (-b + sqrt(discriminant))/a;\n        if (temp < tmax && temp > tmin) {\n            rec.t = temp;\n            rec.p = r.origin + rec.t*r.direction;\n            rec.normal = (rec.p - s.center) / s.radius;\n            rec.mat = s.mat;\n            return true;\n        }\n    }\n    return false;\n}\n\nSphere random_sphere(int i) {\n    if (i == 0) {\n        return Sphere(vec3(0, -1000, 0), 1000.0, Lambertian(vec3(0.5, 0.5, 0.5)));\n    }\n    else if (i == 1) {\n        return Sphere(vec3(0, 1, 0), 1.0, Glass(1.5));\n    }\n    else if (i == 2) {\n        return Sphere(vec3(-4, 1, 0), 1.0, Lambertian(vec3(0.4, 0.2, 0.1)));\n    }\n    else if (i == 3) {\n        return Sphere(vec3(4, 1, 0), 1.0, Metal(vec3(0.7, 0.6, 0.5), 0.0));\n    }\n    else {\n        RNG rng = RNG(float(i+10));\n        float choose_mat = rand(rng);\n        vec3 center = vec3(20.0 * rand(rng), 0.2, 10.0 * rand(rng)) - vec3(10.0, 0.0, 5.0);\n        if (norm(center - vec3(4.0, 0.2, 0.0)) > 0.9) {\n            if (choose_mat < 0.8) {\n                return Sphere(center, 0.2, Lambertian(vec3(rand(rng)*rand(rng), rand(rng)*rand(rng), rand(rng)*rand(rng))));\n            }\n            else if (choose_mat < 0.95) {\n                return Sphere(center, 0.2, Metal(vec3(0.5*(1.0+rand(rng)), 0.5*(1.0+rand(rng)), 0.5*(1.0+rand(rng)))));\n            }\n            else {\n                return Sphere(center, 0.2, Glass(1.5));\n            }\n        }\n    }\n}\n\nbool hit_world(const in Ray r,const in float tmin, const in float tmax, inout HitRecord rec) {\n    bool anyhit = false;\n    float closest = tmax;\n    \n    for (int i=0 ; i < 100 ; i++){\n        Sphere sphere = random_sphere(i);\n        if (hit(sphere, r, tmin, closest, rec)) {\n            anyhit = true;\n            closest = rec.t;\n        }\n    }\n    return anyhit;\n}\n\n//\n// Paint Sampler\n//\nvec3 paint(in Ray r) {\n    HitRecord rec;\n\tint bounces = 0;\n    vec3 attenuation = vec3(1.0);\n    \n    while (bounces < MAX_BOUNCES) {\n        if (hit_world(r, 0.0001, FLT_MAX, rec)) {\n            Ray scattered;\n            vec3 absorption;\n            // Check if it's absorbed\n            if (scatter(rec.mat, r, rec, absorption, scattered)) {\n                attenuation *= absorption;\n                r = scattered;\n            }\n            else {\n                return vec3(0.0);\n            }\n    \t}\n    \telse {\n        \tfloat t = 0.5 * (unit(r.direction).y + 1.0);\n    \t\treturn attenuation * ((1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0));\n    \t}\n        bounces += 1;\n    }\n    \n    // Failed to hit light source (sky)\n    return vec3(0.0);\n}\n\n\n//\n// Camera\n//\nstruct Camera {\n    vec3 origin;\n    vec3 viewport_start;\n    vec3 horizontal;\n    vec3 vertical;\n    vec3 u, v, w;\n    float radius;\n};\n\nCamera camera_from_view(vec3 from, vec3 at, vec3 up, float vfov, float aspect, float aperture, float focus) {\n    float theta = vfov * PI / 180.0;\n    float half_height = tan(theta/2.0);\n    float half_width = aspect * half_height;\n    \n    vec3 w = unit(from - at);\n    vec3 u = unit(cross(up, w));\n    vec3 v = cross(w, u);\n    \n    vec3 origin = from;\n    vec3 viewport_start = from - focus*half_width*u - focus*half_height*v - focus*w;\n    vec3 horizontal = 2.0*focus*half_width*u;\n    vec3 vertical = 2.0*focus*half_height*v;\n    \n    return Camera(origin, viewport_start, horizontal, vertical, u, v, w, aperture / 2.0);\n}\n\nRay get_ray(Camera c, vec2 uv) {\n    vec3 rd = c.radius*disk3();\n    vec3 off = rd.x * c.u + rd.y * c.v;\n    return Ray(c.origin + off, c.viewport_start + uv.x * c.horizontal + uv.y * c.vertical - c.origin - off);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 data = texelFetch(iChannel0, ivec2(fragCoord),0);\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 data = texelFetch(iChannel0, ivec2(fragCoord),0);\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 data = texelFetch(iChannel0, ivec2(fragCoord),0);\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n   \t// Setup fragment RNG\n    init_rand(fragCoord, iTime);\n    \n    float angle = 2.0*PI*iTime/50.0; // iMouse.x/iResolution.x;\n    float dist = 20.0;// 3.0 + 15.0*(1.0-iMouse.y/iResolution.y);\n    \n    float xtoggle = iMouse.y/iResolution.y;\n    \n    // Viewport and origin\n    //Camera c = default_camera();\n    vec3 from = vec3(sin(angle)*dist, 2.0+5.0*xtoggle, cos(angle)*dist);\n    vec3 to = vec3(0, 1, 0);\n    float focus = norm(from - to);\n    float aperture = 0.05;\n    float vfov = 20.0 - 15.0*xtoggle;\n    Camera c = camera_from_view(from, to, vec3(0, 1, 0), vfov, iResolution.x / iResolution.y, aperture, focus);\n\n    // UV coordinates randomised within pixel (from 0 to 1)\n    vec2 uv = (fragCoord + rand2())/iResolution.xy;\n\n    // Sample a ray, paint it, add it to the running total\n    Ray r = get_ray(c, uv);\n    \n    vec3 col = (paint(r)+paint(r)+paint(r)+ paint(r)) * 0.25;\n    fragColor = vec4(col / 1.0, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}