{
    "Shader": {
        "info": {
            "date": "1698842438",
            "description": "Shader Journey Introduction (Predator Laser Target)",
            "flags": 0,
            "hasliked": 0,
            "id": "ddyyWy",
            "likes": 4,
            "name": "Predator Target",
            "published": 3,
            "tags": [
                "target",
                "neon",
                "predator",
                "shaderjourney"
            ],
            "usePreview": 0,
            "username": "misterprada",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "float SDF_Triangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)/sign(p.y);\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.6, 0.1, 0.2);\n    vec3 b = vec3(0.6, 0.7, 0.4);\n    vec3 c = vec3(1.0, .0, .3);\n    vec3 d = vec3(0.463,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    uv *= 2.0;\n    uv -= 1.0;\n    \n    // Fix resize window\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Simplified formula of the lines above\n    //vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    \n    // Rotate\n    //uv = rotate(uv, (sin(iTime) + cos(iTime)) * 2.);\n\n    // Zoom \n    //uv /= abs(sin(iTime) + cos(iTime)) + 0.4;\n\n    // Draw Triangle\n    float d = SDF_Triangle(uv, 0.7);\n    d = abs(d);\n    d = 0.02 / d;\n    color *= d;\n\n    float d_triangle = d;\n\n    // Draw Circle\n    float flasLight = abs(sin(iTime))  + .3;\n    d = length(uv);\n    d = abs(d);\n    d = 0.4 / d;\n    color *= smoothstep(0.55, 0.9, d);\n    //color *= flasLight;\n\n    color -= abs(sin(palette(d_triangle + iTime)));\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}