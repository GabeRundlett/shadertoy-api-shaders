{
    "Shader": {
        "info": {
            "date": "1594891796",
            "description": "Think to reset time to be sure that the song and the video both start at 0s you know shadertoy's soundcloud sync issue.",
            "flags": 80,
            "hasliked": 0,
            "id": "tdBfzd",
            "likes": 6,
            "name": "z0rg x Aastal DnB",
            "published": 3,
            "tags": [
                "neuro",
                "dnb",
                "vidjing",
                "boomboom"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "// z0rg x Aastal DnB by Sebastien Maire is licensed under CC BY-SA 4.0. \n// To view a copy of this license, visit https://creativecommons.org/licenses/by-sa/4.0\n//\n// A thing I was preparing since long for a DJ friend, as we both share\n// the passion for DnB music.\n//\n// The code is crappy as hell :p, you know it started as a simple thing\n// and then just throwing more code at it and I didn't take much time\n// to organize it, I'm open to suggestions on this aspect though.\n//\n// Checkout the video recorded version !\n// https://www.youtube.com/watch?v=GOfZamGVUe4\n//\n// Btw I hope you'll like it as much as I liked doing it.\n\n// The define is to load the iChannel2 in which I put my friend's\n// logo using the chrome extension to load local images\n//#define LOGO\n\nconst float PI = 3.14159265;\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvec3 logo(vec2 uv)\n{\n#ifdef LOGO\n    uv *= r2d(sin(iTime+uv.y*5.)*.1);\n    return texture(iChannel2, clamp(uv+vec2(.5+.01*texture(iChannel0, vec2((abs(uv.y)*5.),0.)).x,.5), vec2(0.), vec2(1.))).www*pow(sat((iTime/5.)), 10.);\n#else\n    return vec3(0.);\n#endif\n}\n\nfloat time;\nfloat grad(float t, float tStart, float tEnd)\n{\n    if (t > tEnd || t < tStart)\n        return 0.;\n    float delta = tEnd-tStart;\n    return clamp(t-tStart, 0., delta) / delta;\n}\nfloat getKeyState(int keycode)\n{\n    return texelFetch( iChannel1, ivec2(keycode,0),0 ).x;\n}\n\nfloat getKeyPress(int keycode)\n{\n    return texelFetch( iChannel1, ivec2(keycode,1),0 ).x;\n}\n\nfloat getKeyToggle(int keycode)\n{\n    return texelFetch( iChannel1, ivec2(keycode,2),0 ).x;\n}\n\n\nvec3 sat(vec3 v)\n{\n  return vec3(sat(v.x),sat(v.y), sat(v.z));\n}\nfloat _sub(float a, float b)\n{\n  return max(a,-b);\n}\nfloat _union(float a, float b)\n{\n  return min(a, b);\n}\n\nfloat _sqr(vec2 uv, vec2 sz)\n{\n  vec2 r = abs(uv)-sz;\n  return max(r.x,r.y);\n}\n\nvec2 repeat(vec2 uv, vec2 rep)\n{\n    return mod(uv+0.5*rep,rep)-0.5*rep;\n}\n\nvec3 repeat(vec3 uv, vec3 rep)\n{\n    return mod(uv+0.5*rep,rep)-0.5*rep;\n}\n\nfloat _trees(vec2 uv, float sz, float rep)\n{\n    uv = repeat(uv, vec2(rep+0.05*sin(uv.y*2.+1.5), 5.));\n    return _sqr(uv, vec2(sz, 2.));\n}\n\nfloat _cyl(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    \n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    \n    float cyl = sign(d)*sqrt(abs(d))/baba;\n    return mix(cyl, length(p)-1., sin(iTime*.2)*.5+.5);\n}\n\nvec3 lookAt(vec3 dir, vec2 uv)\n{\n  dir = normalize(dir);\n  vec3 right = -normalize(cross(dir, vec3(0., 1., 0.)));\n  vec3 up = normalize(cross(dir, right));\nvec2 fov = vec2(2./**sin(iTime*5.)*/);\n  return dir+right*uv.x*fov.x+up*uv.y*fov.y;\n}\nfloat rng(float a, float mi, float ma)\n{\n    return float(a > mi && a < ma);\n}\n\nvec3 texCross(vec2 uv)\n{\n    uv += .5*vec2(sin(time), cos(time));\n    uv *= r2d(time);\n    uv *= 3.;\n    uv = repeat(uv, vec2(1.));\n    float coef = mix(_union(_sqr(uv, vec2(.01, .2)), _sqr(uv, vec2(.01, .2).yx)), lenny(uv)-.5, sin(iTime*.03+10.9)*.2+.2);\n    return (1.-sat(coef*200.))*vec3(.34,.43,.56+.3*sin(iTime*.3)); \n    return vec3(0.);\n}\n\nfloat map(vec3 p)\n{\n    \n    p.xy *= r2d(time);\n    vec3 rep = mix(vec3(2.), vec3(5.*sin(iTime),2.,.5), sat((iTime-220.)/1.));\n    p = repeat(p, rep);\n    //p.yz *= r2d(time);\n    float len = 5.;\n    float rad = .5;\n    float a = _cyl(p, vec3(0.,-len, 0.), vec3(0.,len, 0.), rad);\n    float b = _cyl(p, vec3(-len, 0., 0.), vec3(len, 0., 0.), rad);\n    float c = _cyl(p, vec3(0.,0.,-len), vec3(0.,0.,len), rad);\n    return _union(a, _union(b, c));\n}\n\nvec3 rdr3D(vec2 uv)\n{\n    vec3 lookAtPos = vec3(0.);\n    float moveZ = float(iTime > 134.5)*(abs(sin(iTime))*5.);\n    vec3 orig = vec3(sin(time), cos(time), -2.5+moveZ);\n    vec3 dir = lookAt(lookAtPos - orig, uv); \n    vec3 p = orig + dir;\n    float dist = 0.;\n    for (int i = 0; i < 256; ++i)\n    {\n        float d = map(p);\n        if (d < 0.001)\n        {\n            return vec3(.5)*sat(dist);\n        }\n        dist += d;\n        p += dir * d*0.999;\n    }\n    return vec3(0.);\n}\nfloat sub(float a, float b)\n{\n  return max(a,-b);\n}\n\n\n\nfloat cir(vec2 p, float r)\n{\n  float a = atan(p.y,p.x)+r*sin(2.*r+iTime*.1);\n    float spd = (sin(iTime*.1)*.5+.5);\n  return (length(p)-r)-sin(a*7.-iTime*spd)*.15\n  +sin(a*3.-iTime*5.*spd)*.2\n  +sin(a*5.+sin(a))*.02;\n}\n\nfloat border(vec2 p, float th, float r)\n{\n  return sub(cir(p,r),cir(p,r-th));\n}\nvec3 rdrCirLines(vec2 uv)\n{\n  vec3 col;\n  int i = 0;\n    float sharp = 5.0;\n  while (i<32)\n  {\n    float fi = float(i);\n      col += vec3(sat(pow(abs(uv.y),4.))*2.,.8,sat(abs(uv.x)+.5))*(1.-sat(border(uv,0.0005, .2+.02*fi)*sharp));\n    col += .005*vec3(sat(pow(abs(uv.y),4.))*2.,.8,sat(abs(uv.x)+.5)).yxx*(1.-sat(border(uv*.5*vec2(-1.,1.)*(sin(iTime*.2)*.5+1.),0.0005, .1+.02*fi)*40.));\n    \n      ++i;\n  }\n\n  return col*.15*sat(length(uv));\n}\n\n\nvec3 rdrScn(vec2 uv, float speed,float timeBump)\n{\n  time = iTime;//*speed+timeBump;\n  if (iTime > 110.)\n     time = iTime*speed+timeBump;\n  if (mod(iTime, 2.) < 1. && iTime > 45.0)\n      time = -time;\n    if (iTime < 45.0)\n        time *= .5;\n  uv*= 3.2+smoothstep(0., .439, mod(time,.4389))*.1; //vertical\n  uv *= r2d(PI/12.);\n  vec3 land;\n  float lightFlicker = sumfx(onoff(iTime, 0.0f, 5.0f), onoff(iTime, 57.0f, 200.0f));\n  vec3 light = lightFlicker*(.5+.3*round(asin(sin(iTime*PI*2.0*4.0*2.)))*vec3(100.,200.,197.)/255.);\n  land = mix(vec3(.1,.1,.2),light,sat(.0+sat(1.-length(uv))));\n    \n  float trees = _trees(uv+vec2(time, 0.).yx, 0.05+sin(time+uv.x)*.1, 0.3);\n  \n  //land += .2*vec3(.5,.7,.74)*(sat(trees*20.));\nland += light*sat(1.-lenny(uv*.5))*(sin(time+uv.x+PI)*.5+.5);\n    vec3 blackStripsCol = texCross(uv)*(1.-sat(trees*250.));\n  return land+rdr3D(uv)*(sat(.8+sat(trees*50.)))+blackStripsCol*.5;\n}\n\nvec3 rdrtunnel(vec2 uv)\n{\n  vec3 col;\n  float t = iTime*.1+uv.x*2.*sin(iTime)+uv.y*4.*sin(iTime);\n  float tt = iTime;//*(1.+.05*sin(iTime*.2));\n  float blur = 2.*mix(0.01,0.001,sin(iTime*.2)*.5+.5);\n  float l = pow(length(uv),.1)*1.;\n  uv += vec2(sin(t+l),cos(t+l))*.2*pow(length(uv),.5);\n  col = texture(iChannel3, vec2(0.1*atan(uv.y, uv.x)/PI, .05*tt+blur/length(uv))).xyz;\nvec3 col2 = texture(iChannel3, -vec2(.2*atan(uv.y, uv.x)/PI, .05*tt+.001/length(uv))).xyz;\n\n  return vec3(.9,.12,.38)*col2*.8+.1*col*pow(length(uv),.5)*vec3(.5,.3,.7)*max(dot(uv, vec2(1.)),.5)\n  + 3.5*pow(1.-sat(lenny(uv*.5)),5.)*vec3(.32,.45,.65);\n}\n\n\nvec3 compositing(vec2 uv)\n{\n\tvec2 tst = rdrCirLines(uv*2.0).xy;\n    float visiBlue = 1.0f;//*(1.0-sat(iTime/1.));\n    visiBlue = sumfx(visiBlue, \n                     sumfx(onoff(iTime, 56.5,57.), onoff(iTime, 53.,53.5)));\n    tst *= visiBlue*.01;\n  \tvec3 col = rdrScn(uv*mix(1.,5.,sat((sin(iTime)*.2+.2)*(iTime-200.)/50.))+tst, .2, .05*round(asin(sin(iTime*PI*2.0))));\n    col = mix(col, (col+(rdrCirLines(uv*mix(1.,2., sin(iTime*.25)*sat((iTime-230.)/20.)))))*.5+col, visiBlue*.8);\n    col = mix(col, (vec3(.8)+col)*rdrtunnel(uv).yxz, sat((iTime-220.)/2.)*sat(mod(iTime, 5.)/5.+.2));\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n\n\tif (iTime > 134.2)\n    {\n        float tst = max(sin((iTime-3.)*PI*.4), 0.);\n        if (tst > .5)\n       \t uv *= (abs(sin(iTime*PI*8.))*.2+.5)*(1.+sin(iTime)*.5+.5);\n    }\n  vec3 col = compositing(uv);\n    col = pow(col, vec3(1.)/mix(1., 10.*length(uv), pow(grad(iTime, 120., 133.), .5)));\n \tcol *= pow(min(iTime, 5.)/5., 5.)\n        +abs(sin(iTime*PI))*float(iTime > .5 && iTime < 2.);\n    \n    vec3 colpost = vec3(sat(float(mod(uv.y+rand(uv)*0.0002+time, 0.01) < 0.005)*(1.-length(uv))))*col;\n    col = mix(col, colpost, float(iTime<120.)*((sin(iTime*PI)+sin(iTime*PI*3.2))*.5+.5));\n    col = mix(col, 1.-col.yzx, logo(uv*vec2(1.,2.)*1.).x);\n    fragColor = vec4(mix(col, col.zxy, sat(col.y+abs(uv.y*5.))*.8*sat((iTime-220.)/1.)), 1.0);\n\tfragColor *= 1.-sat((iTime-418.)/.5);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22951,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/aastal/shortmix-2-neuro"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SPACE  = 32;\nconst int KEY_NUM0  = 48;\nconst int KEY_NUM1  = 49;\nconst int KEY_NUM2  = 50;\nconst int KEY_NUM3  = 51;\nconst int KEY_NUM4  = 52;\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\n\nfloat lenny(vec3 v)\n{\n  return abs(v.x)+abs(v.y)+abs(v.z);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\nfloat sumfx(float curve, float val)\n{\n    return sat(curve+val);\n}\n\nfloat onoff(float t, float start, float end)\n{\n    return float(t > start && t < end);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}