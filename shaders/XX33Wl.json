{
    "Shader": {
        "info": {
            "date": "1727471373",
            "description": " the sun and all the planets orbiting around it. Try to use different sizes and colors to differenciate each planet.",
            "flags": 0,
            "hasliked": 0,
            "id": "XX33Wl",
            "likes": 1,
            "name": "GPT 4o: Galaxy",
            "published": 3,
            "tags": [
                "gpt"
            ],
            "usePreview": 0,
            "username": "sferrando",
            "viewed": 42
        },
        "renderpass": [
            {
                "code": "// Number of planets\nconst int numPlanets = 8;\n\n// Planet data: [orbit radius, size, speed, red, green, blue]\nvec3 planetData[numPlanets] = vec3[](\n    vec3(0.1, 0.02, 0.8),  // Mercury\n    vec3(0.15, 0.03, 0.7),  // Venus\n    vec3(0.2, 0.04, 0.6),   // Earth\n    vec3(0.25, 0.035, 0.5), // Mars\n    vec3(0.35, 0.07, 0.4),  // Jupiter\n    vec3(0.45, 0.06, 0.35), // Saturn\n    vec3(0.55, 0.045, 0.3), // Uranus\n    vec3(0.65, 0.04, 0.25)  // Neptune\n);\n\n// Planet colors\nvec3 planetColors[numPlanets] = vec3[](\n    vec3(0.8, 0.8, 0.8),  // Mercury (gray)\n    vec3(0.9, 0.6, 0.3),  // Venus (orange)\n    vec3(0.0, 0.5, 1.0),  // Earth (blue)\n    vec3(1.0, 0.4, 0.4),  // Mars (red)\n    vec3(0.9, 0.8, 0.5),  // Jupiter (beige)\n    vec3(0.9, 0.7, 0.4),  // Saturn (light brown)\n    vec3(0.6, 0.8, 0.9),  // Uranus (light blue)\n    vec3(0.3, 0.5, 0.8)   // Neptune (blue)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time variable for animation\n    float time = iTime * 0.3;\n\n    // Sun properties\n    vec2 sunPos = vec2(0.0, 0.0);\n    float sunRadius = 0.1;\n    vec3 sunColor = vec3(1.0, 0.9, 0.3);\n\n    // Calculate distances from current fragment to Sun\n    float distToSun = distance(uv, sunPos);\n\n    // Render Sun\n    vec3 color = mix(vec3(0.0), sunColor, smoothstep(sunRadius + 0.02, sunRadius, distToSun));\n\n    // Render Planets\n    for (int i = 0; i < numPlanets; i++) {\n        float orbitRadius = planetData[i].x;\n        float planetRadius = planetData[i].y;\n        float orbitSpeed = planetData[i].z;\n        vec3 planetColor = planetColors[i];\n\n        // Calculate planet position in orbit\n        vec2 planetPos = vec2(cos(time * orbitSpeed + float(i)), sin(time * orbitSpeed + float(i))) * orbitRadius;\n\n        // Calculate distance from current fragment to planet\n        float distToPlanet = distance(uv, planetPos);\n\n        // Render planet\n        color = mix(color, planetColor, smoothstep(planetRadius + 0.02, planetRadius, distToPlanet));\n    }\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}