{
    "Shader": {
        "info": {
            "date": "1607101133",
            "description": "A reproduction of a planet seen on this cover here // https://www.youtube.com/watch?v=jfyccTi4oVM",
            "flags": 32,
            "hasliked": 0,
            "id": "WdGBDW",
            "likes": 9,
            "name": "Weird space",
            "published": 3,
            "tags": [
                "space",
                "weird"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 postFX(vec2 uv, float blur)\n{\n    vec3 col;\n    int cnt = 10;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = fi/fcnt;\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 2.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*an*blur*.1;\n    \tcol += texture(iChannel0, p).xyz;\n    }\n    \n    return col/float(cnt);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    vec3 col = postFX(uv,.01);\n    \n\t//col += pow(postFX(uv,.02), vec3(.45));\n\tcol = pow(col, vec3(1.6));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _cir(vec2 uv, float r)\n{\n    return length(uv)-r;\n}\n\nfloat stars(vec2 uv)\n{\n    uv *= r2d(.5);\n    vec2 rep = vec2(0.1,0.1);\n    ivec2 idx = ivec2((uv+.5*rep)/rep);\n    \n    float sz = (sin(float(idx.x)*3.3+float(idx.y)*15.)*.5+.5)*0.007;\n    \n    vec2 perturb = (rep*.5-sz)*vec2(sin(float(idx.x)), cos(float(idx.x)));\n    \n    vec2 p = perturb+mod(uv+rep*.5, vec2(rep))-rep*.5;\n    \n    float v = 1.-sat(_cir(p, sz)*400.);\n    return v;\n}\n\n\n\nvec3 rdr(vec2 uv)\n{\n    float shp = 200.;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    col = vec3(1.)*stars(uv);\n    \n    vec3 lightGreen = vec3(69, 181, 157)/255.;\n    vec3 darkGreen = lightGreen * .6;\n    vec3 pink = vec3(255, 0, 153)/255.;\n    \n    float plSz = .2;\n    float planet = _cir(uv, plSz);\n    float planetShadow = max(planet, _cir(uv-vec2(.025), plSz));\n    \n    vec3 planetCol = mix(lightGreen, darkGreen, sat(planetShadow*shp)*sat((sin((uv.y-uv.x)*200.)+.8)*shp));\n    col = mix(col, planetCol,  1.0-sat(planet*shp));\n    \n    float rgSz = 0.5;\n    float rgTh = 0.02;\n    \n    float tRgMv = iTime*2.;\n    vec2 rgMv = vec2(sin(tRgMv)*0.025, cos(tRgMv)*0.01);\n    \n    float rgAn = sin(iTime)*PI/6.0;\n    \n    vec2 rPos = (uv*r2d(rgAn)-vec2(0.,-.05));\n    float ringA = max(_cir(rPos*vec2(1.,4.), rgSz), -_cir(1.25*rPos*vec2(1.,4.)-vec2(0.,.157)+rgMv, rgSz));\n    vec3 rCol = mix(vec3(0.1), pink,sat((abs(ringA)-rgTh)*shp));;\n    col = mix(col, rCol, 1.-sat(ringA*shp));\n    \n    vec2 rPosB = (uv*r2d(-rgAn)-vec2(0.,-.05));\n    float ringB = max(_cir(rPosB*vec2(1.,4.), rgSz), -_cir(1.25*rPosB*vec2(1.,4.)-vec2(0.,.157)+rgMv, rgSz));\n    vec3 rColB = mix(vec3(0.1), pink,sat((abs(ringB)-rgTh)*shp));;\n    col = mix(col, rColB, 1.-sat(ringB*shp));\n\n\tcol += .3*sat(.5+.5*rand(uv*sin(iTime)));\n    col *= .3+rand(uv*sin(iTime));\n    \n    return col;\n}\n\nvec3 rdrChroma(vec2 uv)\n{\n    uv *= pow(1.+length(uv),.5);\n    vec3 col;\n    vec2 dir = vec2(1.);\n    float strength = 0.003+0.003*length(uv*2.);\n    col.r = rdr(uv+dir*strength).r;\n    col.g = rdr(uv).g;\n    col.b = rdr(uv-dir*strength).b; \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(0.5)*iResolution.xy)/iResolution.xx;\n\tuv *= 1.+sin(iTime)*.2+.5;\n    vec3 col = rdrChroma(uv);\n\t\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}