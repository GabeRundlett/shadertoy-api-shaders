{
    "Shader": {
        "info": {
            "date": "1624265140",
            "description": "Turning a gear inside out and then outside in.\nThe SDF is not correct, but it looks cool ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "slS3zV",
            "likes": 3,
            "name": "Inside Out, Outside In",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "complex",
                "inversion",
                "gear"
            ],
            "usePreview": 0,
            "username": "lumic",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "#define RINNER 0.62\n#define ROUTER 0.65\n#define REPITITION 32.0\n\nconst float PI = 3.14159265359;\nconst float TWOPI = 6.28318530718;\n\nvec2 complexPow(vec2 z, float n) {\n    float r = length(z);\n    float angle = atan(z.y, z.x);\n    return pow(r, n) * vec2(cos(n * angle), sin(n * angle));\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdModulatedCircle(vec2 p, float radius)\n{\n    float repeat = REPITITION;\n\n    // Circle is centered at origin, convert to polar coordinates\n    float r = length(p);\n    float angle = atan(p.y, p.x);\n    \n    float bump = smoothstep(0.25, 1.25, cos(angle * repeat + iTime) + 1.0) * 0.125;\n\n    return r - (radius + bump);\n}\n\nfloat sdSubtract(float d1, float d2 ) {\n    return max(-d1,d2);\n}\n\nfloat sdCombine( float d1, float d2 ) {\n    return min(d1,d2);\n}\n\nfloat gear(vec2 p) {\n\tfloat d1 = sdCircle(p, RINNER);\n\tfloat d2 = sdModulatedCircle(p, ROUTER);\n    \n    return sdSubtract(d1, d2);\n}\n\nfloat ring(vec2 p) {\n\tfloat d1 = sdCircle(p, RINNER - 0.1);\n    return abs(d1) - 0.15;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized/centered pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) /iResolution.y;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float zoom  = 4.0;\n    vec2 p = uv * zoom;\n\n    // Animate complex inversion\n    float t = iTime * 0.25;\n    float inv1 = -(clamp(mod(t, 2.0), 0.0, 1.0) - 0.5) * 2.0;\n    float inv2 = -(clamp(mod(t, 2.0) - 1.0, 0.0, 1.0) - 0.5)  * 2.0;\n    float rotation = (1.0 - step(mod(t, 2.0), 1.0)) * PI;\n    \n    p = rotate2d(rotation) * p;\n    p = complexPow(complexPow(p, inv1), inv2);\n\n    float d = gear(p);\n    d = sdCombine(d, ring(p));\n    \n    // SDF Coloring based on https://www.shadertoy.com/view/3ltSW2\n    \n    float sgn = sign(d);\n    \n    //col = col - sgn * vec3(0.1,0.4,0.7);\n    //col *= 1.0 - exp(-20.0 * abs(d));\n\t//col *= 0.8 + 0.2 * smoothstep(0.0, 2.0, cos(50.0*d) + 1.0);\n\t//col = mix( col, vec3(1.0), 1.0-smoothstep(0.008,0.02,abs(d)) );\n    \n    if (sgn > 0.0) {\n        col *= 1. - smoothstep(d, 0.85, 1.0);\n    }\n    \n    col += smoothstep(d, 0.55, 1.0);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}