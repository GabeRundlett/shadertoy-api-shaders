{
    "Shader": {
        "info": {
            "date": "1635160504",
            "description": "hex truchet  ( adapted from [url]drschizzo. https://shadertoy.com/view/NsVSWw[/url] ).\n\nplay with the profile function P(h) !",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVSzt",
            "likes": 10,
            "name": "hex tiling test 2",
            "published": 3,
            "tags": [
                "truchet",
                "tiling",
                "hex"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "// Fork of golfed version of \"hex tiling test\" by drschizzo. https://shadertoy.com/view/NsVSWw\n\n  #define H(a)   fract(1e4*sin(dot(ceil(a),vec2(17,71))))\n  #define S(v)   smoothstep(20./R.y, 0., v ) \n//#define F3(h)  length(h)*cos(mod(atan(h.y,h.x),2.1)-1.05 - vec2(0,1.57) ) // --- 3-fold rotational symmetry\n  #define F3(h)  length(h)*cos(mod(atan(h.y,h.x)+1.05*.5,2.1)-1.05*.5 - vec2(0,1.57) )\n\n//#define P(h) S( abs(h.xyxy)-.1 )                   // --- play with the profile function !\n//#define P(h) S( abs(length(vec2(abs(h.x)-.9,h.y))-.78) ) \n//#define P(h) S( abs(length(h)-.5) ) \n//#define P(h) .5+.5*cos(30.*length(F3(h)-vec2(.5,0)))\n//#define P(h) .5+.5*cos(60.*length(F3(h)-.575*J.yx))\n//#define P(h) S( abs( length(F3(h)-.575*J.yx) -.285 ) -.15 )\n//#define P(h) S( abs( abs( length(F3(h)-.575*J.yx) -.285 ) -.15  ))\n  #define P(h) .5*S( w = abs( length(F3(h)-.575*J.yx) -.285 ) -.15 ) + S( abs(w) )\n//#define P(h) min(1., S( abs(length(vec2(abs(h.x)-.9,h.y))-.78)-w ) + 4.5*dot(h,h)* S(abs(h.y)-w))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R =  iResolution.xy,\n         U = 13.*(u-.5*R)/R.y + iTime*1.3,\n         J = vec2(.5,.87),                                  // hexuv\n         a = mod(U+J,J+J) - J,\n         b = mod(U  ,J+J) - J,\n         G = dot(a,a) < dot(b,b) ? a : b;                   // G: hex coords.  U-G : hex id\n    \n    float s = fract(1e4*sin(dot(ceil(U-G+floor(5.+iTime)),vec2(17,71)))), w=.08;  // tile angle attribute\n  \n    G *= mat2(cos( (s<.33 ? 3.14/3. : s<.66 ? -3.14/3. : 0.) + vec4(0,11,33,0))); // random rot tile\n    O += P(G) -O;                                           // apply profile shape\n // O *= S(.5-length(O)) *s;                                // debug: show tile Id\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}