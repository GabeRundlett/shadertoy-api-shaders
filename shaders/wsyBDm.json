{
    "Shader": {
        "info": {
            "date": "1607289670",
            "description": "Shane-like :-p  ( with a lot less finish ).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyBDm",
            "likes": 47,
            "name": "hexastairs: ladder like + doors",
            "published": 3,
            "tags": [
                "escher",
                "isometric",
                "fake3d",
                "tiling",
                "stairs",
                "hexagonal",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 811
        },
        "renderpass": [
            {
                "code": "// variant of \"hexastairs\"  https://shadertoy.com/view/3sGfWm\n// using \"hexa world\" https://shadertoy.com/view/tsKBDD\n\n#define H(I)   fract(1e4*sin(1e4*length(vec2(I))))         // cheap hash\n//#define H(I) hash(uvec3(I.xy,0))                         // the one used in \"hexa world\": integer hash from https://www.shadertoy.com/view/XlXcW4\n#define h(x,y) int( 4.* H( I + ivec3(x,y,0) ) )            // O-3 random int at relative cell(dx,dy)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = 12.* u / R.y + iTime;                         // === std hexagonal tiling data\n\n    U *= mat2(1,0,.5,.87);                                 // parallelogram frame\n    vec3  V = vec3( U, U.y-U.x +3. );                      // 3 axial coords\n    ivec3 I = ivec3(floor(V)), J;\n          I += I.yzx;\n          J = I % 3;                                       // J.xy = ~ hexagon face\n    int   f = J.x==2 ? 1 : J.y==2 ? 2 : 0,                 // f: front face id \n          b = J.x==1 ? 1 : J.y==0 ? 2 : 0, k,o=0;          // b: back face id\n    I.x += 4; I /= 3;                                      // I.xy = hexagon id\n    V = mod( V + vec3( I.y, I.y+I.x, I.x ), 2. );          // local coords\n    k = h(0,0);                                            // rand values per hexagon\n    \n                                                           // === custom hexatile pattern drawing\n    if (k==3) {                                            // --- plain cubes (i.e. stairless)\n        k = f+2;                                           // base color = face id\n#define check(i,j,s, X,Y)  \\\n             if (h( i, j)==s && abs(X-1.5)<.25 && Y<.75)  k++\n             check(-f,-1, 1-f,  V.x+float(f), V[2-f] );    // regular doors\n        else check( 0, 1,  1,   V.y   , 2.-V.z );          // horiz doors\n        else check( 1, 1,  0,   V.z   , 2.-V.y );         \n        else check(-1, 0,  2,   V.y+1.,  V.x   );          // tilted doors\n        else check( 1, 0,  2,   V.z+1., 2.-V.x );             \n    }\n    else {                                                 // --- cubes with stairs\n        float s=1.,f=1.,l=1.;\n        V = k==1 ? f=-f, l=0., V.yzx                       // apply random hexagon rotation\n          : k==2 ? s=-s, V.yxz : V;\n        s *= mod(8.*V.y+l,2.) - 1.;                        // stair striping\n        l =  2.*V.x-V.y +(abs(s)-9.)/8.;                   // stair dented slope\n        k =  f*( 2.*V.x-V.y-1.)>.5 || -f*l>.5 ? o=1, b+2   // draw rear faces. set o for ambiant occlusion\n           : f*l > .3 ? k+2                                // draw stair sides\n           :  s  < 0. ? k+1 : k;                           // draw stair steps\n    }\n    O = vec4(k%3)/2.;\n    if (o>0) O *= min(1.,length(V-1.)*.8);                 // ambiant occlusion behind stairs\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}