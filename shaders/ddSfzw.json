{
    "Shader": {
        "info": {
            "date": "1689540114",
            "description": "License: Apache 2.0\n\nBased Upon:\n- aleklesovoi CRT TV Shader Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n- SynthEyes Lens Distortion (http://www.ssontech.com/content/lensalg.htm)",
            "flags": 0,
            "hasliked": 0,
            "id": "ddSfzw",
            "likes": 2,
            "name": "SynthEyes Lens Distortion",
            "published": 3,
            "tags": [
                "distortion",
                "lens"
            ],
            "usePreview": 1,
            "username": "KartaVR",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "// SynthEyes Lens Distortion\n\n// Open-Source License:\n// Apache 2.0\n\n// Fragment Shader Based Upon:\n// aleklesovoi's \"CRT TV Shader\" Shadertoy Example (https://www.shadertoy.com/view/DldXWS)\n\n// SynthEyes Lens Distortion:\n// http://www.ssontech.com/content/lensalg.htm\n\nvec2 SynthEyesDistortion(in vec2 uv, float aspect)\n{\n    // Distortion\n    float kCoeff = 0.1;\n    float kCube = 0.8;\n\n    // SynthEyes uses UV coordinates with a [-1:1] range\n    uv = (uv * 2.0) - 1.0;\n\n    // Compute the distortion\n    float r2 = (aspect * aspect) * (uv.x * uv.x) + (uv.y * uv.y);\n    float f = 1.0 + r2 * (kCoeff * kCube * sqrt(r2));\n\n    uv.x *= f;\n    uv.y *= f;\n\n    // Transform the UV coordinates back to a [0:1] range\n    uv = (uv * 0.5) + 0.5;\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Use a \"Screen Space\" UV Coordinate [0;1] range\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    // Apply the lens distortion\n    uv = SynthEyesDistortion(uv, aspect);\n    vec3 result = texture(iChannel0, uv).rgb;\n\n    // Return the final output\n    fragColor = vec4(result, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}