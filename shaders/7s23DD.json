{
    "Shader": {
        "info": {
            "date": "1617465838",
            "description": "shader showdown @ revision 2021 winner :3",
            "flags": 0,
            "hasliked": 0,
            "id": "7s23DD",
            "likes": 35,
            "name": "Tastey Eggies",
            "published": 3,
            "tags": [
                "revision",
                "eggs",
                "shadershowdown",
                "livecode",
                "revision2021"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 881
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat time;\nfloat bar;\nfloat bpm = 130.;\n\n//in the showdown I added cut eggs, but tbh I don't like how it looks, so you can enable it by uncommenting the next line\n#define DISABLE_CUT\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n  int x = FK(a), y = FK(b);\n  return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nvec3 rndcol(float hs) {\n  float h = hash(hs, 420.);\n  if (h > .5) {\n    return vec3(.9,.8,.4);\n  }\n  if (h > .0) {\n    return vec3(.4,.8,.4);\n  }\n  if (h > -.5) {\n    return vec3(.4,.8,.9);\n  }\n  return vec3(.9,.3,.8);\n}\n\nfloat super(vec2 p, float k) {\n  return mix(length(p), sqrt(length(p*p)), k);\n}\n\nvec3 pattern(vec2 p, float hs) {\n  vec2 op = p;\n  if (hash(hs,399.)<0.) {\n    p.y += asin(sin(p.x*40.))/40.;\n  }\n  if (hash(hs,342.)<0.) {\n    p.y = abs(p.y)-.2;\n  }\n  if (hash(hs,934.)<0.) {\n    p.y = -p.y;\n  }\n  if (p.y < 0.) {\n    return rndcol(hash(hs,453.));\n  }\n  if (p.y > 0.) {\n    op = asin(sin(op*30.))/30.;\n    if (hash(hs,666.)<0. && super(op,hash(hs,777.)*4.-2.) < .015) {\n      return  rndcol(hash(hs,339.));\n    }\n  }\n  return vec3(1);\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\nvec3 rndrot(vec3 p, float sd) {\n  float h1 = hash(sd, 43432.);\n  float h2 = hash(sd, 34332.);\n  float h3 = hash(sd, 12356.);\n  return erot(p, normalize(tan(vec3(h1,h2,h3))), h1*100.+iTime*2.);\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a,b-a)/dot(b-a,b-a);\n  return distance(p,mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat smiley;\nfloat egg(vec3 p, bool chopp) {\n  float eg = mix( linedist(vec2( sqrt(dot(p.xy,p.xy)+.2) -.1, p.z), vec2(-.3,.5), vec2(0,-.5)  )-.9,length(p)-1.,.3 );\n  eg = abs(eg+.01)-.02;\n#ifndef DISABLE_CUT\n  if (chopp) {\n    eg = max(eg, p.z);\n  }\n#endif\n    smiley  = length(p+vec3(cos(time*9.)*.2,sin(time*9.)*.2,sin(time*4.)*.5))-.4;\n  return min(eg,smiley);\n}\n\nvec3 glob;\nfloat idx;\nfloat scene(vec3 p) {\n  idx = round(p.y/3.)*3.;\n  bool willchop = false;\n  if (hash(bar,2313.) < 0.) {\n    idx = 0.;\n    willchop = true;\n  }\n  p.y -= idx;\n  if (hash(bar,1312.) < .0) {\n    p.x += sin(time*2.+idx);\n  } else {\n    p.z += -abs(sin(time*3.1415+idx*.1))+.5;\n  }\n  p = rndrot(p, bar+idx*100.);\n  glob = p;\n  return egg(p, willchop);\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.001);\n  return normalize(scene(p) - vec3( scene(k[0]),scene(k[1]),scene(k[2]) ));\n}\n//candy!\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  time = fract(iTime*bpm/120.);\n  bar = floor(iTime*bpm/120.);\n  vec2 uv2 = uv;\n  \n  if (hash(bar,7434.) < 0.) {\n    uv2.y += sin(uv.x*8.+time)*.05;\n  }\n  fragColor.xyz = pattern(uv2,bar);\n  \n  \n  vec3 cam = normalize(vec3(1,uv));\n  vec3 init = vec3(-5,0,0);\n  \n  if (hash(bar,2341.) < 0.) {\n    cam = erot(cam, vec3(0,1,0), radians(45.));\n    init = erot(init, vec3(0,1,0), radians(45.));\n  }\n  \n  vec3 p = init;\n  bool hit = false;\n  float dist;\n  for (int i = 0; i < 100 && !hit; i++) {\n    dist = scene(p);\n    hit = dist*dist < 1e-6;\n    p += dist*cam;\n    if (distance(p,init)>10.)break;\n  }\n  \n  \n  if (hit) {\n    bool issmiley = smiley == dist;\n    float rix = idx;\n    vec3 loc = glob;\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    float spec = length(sin(r*3.)*.5+.5)/sqrt(3.);\n    float fres = 1. - abs(dot(cam,n))*.98;\n    float diff = length(sin(n*2.)*.3+.7)/sqrt(3.);\n    vec2 crds = vec2(atan(loc.x,loc.y)*.8,loc.z);\n    vec3 dcol = pattern(crds/3., bar+2392.+rix*100.);\n    if (issmiley) {\n      dcol = rndcol(3485.+bar);\n    }\n    vec3 col = dcol*diff + pow(spec,7.)*fres;\n    fragColor.xyz = col;\n  }\n  \n  fragColor.xyz = sqrt(fragColor.xyz);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}