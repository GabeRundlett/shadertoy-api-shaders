{
    "Shader": {
        "info": {
            "date": "1544021933",
            "description": "Real smelly fruit (apparently)",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyBDK",
            "likes": 15,
            "name": "Durian",
            "published": 3,
            "tags": [
                "fibonacci",
                "fruit",
                "spike"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 655
        },
        "renderpass": [
            {
                "code": "// \"Durian\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat dstFar, dstCls, tCur, phsT, phsA;\nint idObj;\nconst float pi = 3.14159, phi = 1.618034;\n\nfloat SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf;\n  vec2 ff, c;\n  float fk, ddMin, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    ddMin = min (ddMin, dot (vf - v, vf - v));\n  }\n  return sqrt (ddMin);\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.yz = vec2 (p.z, - p.y);\n  q = p;\n  q.xy = Rot2D (q.xy - phsT, -0.4 * pi * phsA);\n  d = max (PrSphDf (q, 1.3 - 0.3 * smoothstep (0.0005, 0.07,\n     SphFib (normalize (q), 4096.))), - PrSphDf (q,\n     0.9 + 0.1 * (1. - q.z * q.z / dot (q, q)) * abs (cos (4. * atan (q.y, - q.x)))));\n  if (phsT > 0.) d = max (d, - min (q.x, q.y) + 0.03);\n  DMINQ (1);\n  q = p;\n  q.xy = Rot2D (q.xy + phsT, 0.4 * pi * phsA);\n  if (phsT > 0.) {\n    d = PrSphDf (q, 0.9 + 0.1 * (1. - q.z * q.z / dot (q, q)) *\n       abs (cos (4. * atan (q.y, - q.x))));\n    DMINQ (2);\n    d = max (PrSphDf (q, 1.3 - 0.3 * smoothstep (0.0005, 0.07,\n       SphFib (normalize (q), 4096.))), - d);\n    d = max (d, min (q.x, q.y) - 0.03);\n    DMINQ (1);\n  }\n  q.z += 1.4;\n  d = PrCylDf (q, 0.07 - 0.05 * q.z, 0.2);\n  DMINQ (3);\n  return 0.3 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dstCls = dstFar;\n  dHit = 0.;\n  for (int j = 0; j < 180; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dstCls = min (dstCls, d);\n    if (d < 0.0002 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.00005, -0.00005);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, r, a, ae, spec, f;\n  phsT = 0.8 * SmoothBump (0.25, 0.75, 0.1, mod (0.1 * tCur, 1.));\n  phsA = SmoothBump (0.28, 0.72, 0.1, mod (0.1 * tCur, 1.));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    r = length (qHit);\n    a = atan (qHit.y, - qHit.x) / pi;\n    ae = acos (qHit.z / r);\n    f = SmoothBump (0.15, 0.85, 0.1, mod (64. * a, 1.));\n    if (idObj == 1) {\n      col = mix (vec3 (0.1, 0.8, 0.1), vec3 (0.7, 0.5, 0.1), smoothstep (1.1, 1.15, r)) *\n         (0.95 + 0.05 * SmoothBump (0.2, 0.8, 0.1, mod (32. * r, 1.)));\n      if (r > 1.2) {\n        col = mix (col, vec3 (0.8, 0.7, 0.7), smoothstep (1.2, 1.28, r));\n       } else {\n        col *= 1. - 0.2 * smoothstep (0.6, 0.8, Fbm2 (128. * vec2 (r, ae)));\n        col = mix (vec3 (1., 1., 0.9) * (1. - ((abs (vn.y) > 0.001) ? 0.03 * f : 0.)),\n           col, smoothstep (1., 1.1, r));\n      }\n      spec = 0.1;\n    } else if (idObj == 2) {\n      col = mix (vec3 (1., 0.5, 0.2), vec3 (1., 1., 0.), f) *\n         (1. - 0.2 * smoothstep (0.6, 0.8, Fbm2 (128. * vec2 (2. * a, ae))));\n      spec = 0.2;\n    } else if (idObj == 3) {\n      col = vec3 (0.2, 0.3, 0.);\n      spec = 0.;\n    }\n    col = col * (0.2 + 0.8 * pow (max (dot (vn, ltDir), 0.), 2.)) +\n       spec * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else {\n    col = mix (vec3 (0.05, 0.05, 0.) * (0.7 + 0.3 * rd.y), vec3 (0.2, 0.2, 0.),\n       exp (- 32. * dstCls));\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.25 * pi;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0.2, -10.);\n  dstFar = 25.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 6.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.9)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}