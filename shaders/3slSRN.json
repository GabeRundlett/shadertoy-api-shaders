{
    "Shader": {
        "info": {
            "date": "1550746383",
            "description": "Moiré patterns, with sound.\n\nThe music sounds wrong on some machines. Here's a recording of the audio, for comparison: https://soundcloud.com/arodseth/moireorama",
            "flags": 8,
            "hasliked": 0,
            "id": "3slSRN",
            "likes": 11,
            "name": "Moiréorama",
            "published": 3,
            "tags": [
                "moir"
            ],
            "usePreview": 0,
            "username": "xyproto",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    // + correct aspect ratio\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; \n      \n    // Position of the center\n    vec2 center = vec2(0, 0);\n    \n    // Switch the \"scene\"\n    float t = iTime;\n    float tm = mod(t, 24.0);        \n    if (tm <= 16.0) {\n        t *= 0.5;\n    } else if (tm <= 18.0) {\n        t *= 0.7;    \n    } else if (tm <= 20.0) {\n        t *= 0.5;            \n\t} else {\n        t *= 1.5;\n    }\n     \n    // Formula for the shape, that changes over time\n    //float d = distance(uv, center) * cos(t * sin(t) * log(t) * atan(uv.x, uv.y)) * 10.0;    \n    float d = distance(uv, center) * cos(t * log(t) * log(t) * atan(uv.x, uv.y)) * 10.0;    \n\n    //float s = smoothstep(0.2, 0.3, d);\n    float s = smoothstep(0., 1.5*fwidth(d), d);\n     \n    // Set the color\n    float red = 0.0;\n    if (iTime < 16.0) {\n        red = 1.0;\n    }\n    vec3 col = vec3(red, s, s);\n\n    // Output to screen\n    fragColor = vec4(col ,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Copyright 2019 Alexander F. Rødseth\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat saw(float x, float amplitude, float frequency) {    \n    float pi = 3.14159265359;\n    float period = 1.0 / frequency;\n    float z = (x*pi)/period;\n\treturn -((2.0*amplitude)/pi) * atan(cos(z)/sin(z));  \n}\n\nfloat bass(float time, float amplitude, float freq1, float freq2, float freq3, float freq4, float freq5, float freq6, float freq7, float freq8, float pause, float timeMultiplier) {       \n    // As time passes, count to 8 repeatedly\n    float countTo = 8.0;\n    float tm = mod(time * timeMultiplier, countTo);\n    float stutter1 = 0.0;\n    float stutter2 = 0.5;\n    if (0.0 <= tm && tm < (1.0 - pause)) {       \n        // ONE!\n        return saw(time, amplitude * 1.1, freq1);\n    } else if (1.0 <= tm && tm < (2.0 - pause)) {\n        // TWO!\n        return saw(time, amplitude * 0.95, freq2);\n    } else if (2.0 <= tm && tm < (3.0 - pause)) {\n        // THREE!\n        return saw(time, amplitude * 0.92, freq3);\n    } else if (3.0 <= tm && tm < (4.0 - pause)) {\n        // FOUR!\n        return saw(time, amplitude * 0.9, freq4);\n    } else if (4.0 <= tm && tm < (5.0 - pause)) {\n        // FIVE!\n        return saw(time, amplitude * 1.0, freq5);\n    } else if (5.0 <= tm && tm < ((6.0-stutter1) - pause)) {\n        // SIX!\n        return saw(time, amplitude * 0.95, freq6);\n    } else if ((6.0-stutter1) <= tm && tm < ((7.0-stutter2) - pause)) {\n        // SEVEN!\n        return saw(time, amplitude * 0.92, freq7);\n    } else if ((7.0-stutter2) <= tm && tm < (8.0 - pause)) {\n        // EIGHT!\n        return saw(time, amplitude * 0.9, freq8);        \n    }    \n}\n\nfloat sinwave(float x, float amplitude, float frequency) {    \n    float pi = 3.14159265359;\n    return amplitude * sin(x * frequency * 2.0 * pi);\n}\n\nfloat organ(float time, float amplitude, float freq1, float freq2, float freq3, float freq4, float freq5, float freq6, float freq7, float freq8, float pause, float timeMultiplier) {       \n    // As time passes, count to 8 repeatedly\n    float countTo = 8.0;\n    float tm = mod(time * timeMultiplier, countTo);\n    if (0.0 <= tm && tm < (1.0 - pause)) {       \n        // ONE!\n        return sinwave(time, amplitude, freq1);\n    } else if (1.0 <= tm && tm < (2.0 - pause)) {\n        // TWO!\n        return sinwave(time, amplitude, freq2);\n    } else if (2.0 <= tm && tm < (3.0 - pause)) {\n        // THREE!\n        return sinwave(time, amplitude, freq3);\n    } else if (3.0 <= tm && tm < (4.0 - pause)) {\n        // FOUR!\n        return sinwave(time, amplitude, freq4);\n    } else if (4.0 <= tm && tm < (5.0 - pause)) {\n        // FIVE!\n        return sinwave(time, amplitude, freq5);\n    } else if (5.0 <= tm && tm < (6.0 - pause)) {\n        // SIX!\n        return sinwave(time, amplitude, freq6);\n    } else if (6.0 <= tm && tm < (7.0 - pause)) {\n        // SEVEN!\n        return sinwave(time, amplitude, freq7);\n    } else if (7.0 <= tm && tm < (8.0 - pause*1.5)) {\n        // EIGHT!\n        return sinwave(time, amplitude, freq8);        \n    }\n}\n    \n// thanks https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat noise(float p){\n  float fl = floor(p);\n  float fc = fract(p);\n  return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat noisewave(float x, float amplitude, float frequency) {    \n    float pi = 3.14159265359;\n    return amplitude * noise(x * frequency * 2.0 * pi);\n}\n\nfloat noisedrum(float time, float amplitude, float freq1, float freq2, float freq3, float freq4, float freq5, float freq6, float freq7, float freq8, float pause, float timeMultiplier) {       \n    // As time passes, count to 8 repeatedly\n    float countTo = 8.0;\n    float tm = mod(time * timeMultiplier, countTo);\n    if (0.0 <= tm && tm < (1.0 - pause*0.7)) {       \n        // ONE!\n        return noisewave(time, amplitude*1.0, freq1);\n    } else if (1.0 <= tm && tm < (2.0 - pause)) {\n        // TWO!\n        return noisewave(time, amplitude*0.9, freq2);\n    } else if (2.0 <= tm && tm < (3.0 - pause)) {\n        // THREE!\n        return noisewave(time, amplitude*0.8, freq3);\n    } else if (3.0 <= tm && tm < (4.0 - pause)) {\n        // FOUR!\n        return noisewave(time, amplitude*0.9, freq4);\n    } else if (4.0 <= tm && tm < (5.0 - pause)) {\n        // FIVE!\n        return noisewave(time, amplitude*1.0, freq5);\n    } else if (5.0 <= tm && tm < (6.0 - pause)) {\n        // SIX!\n        return noisewave(time, amplitude*0.9, freq6);\n    } else if (6.0 <= tm && tm < (7.0 - pause)) {\n        // SEVEN!\n        return noisewave(time, amplitude*0.8, freq7);\n    } else if (7.0 <= tm && tm < (8.0 - pause)) {\n        // EIGHT!\n        return noisewave(time, amplitude*0.8, freq8);        \n    }\n}\n\n// thanks https://sound.stackexchange.com/a/25165\nfloat kickwave(float t, float amplitude, float frequency) {    \n\tfloat pi = 3.14159;    \n    return exp(-t*4.0) * sin(2.0*pi*t*frequency * exp(-t*20.0));\n}\n\nfloat kick(float time, float amplitude, float freq1, float freq2, float pause, float timeMultiplier) {       \n    // As time passes, count to 2 repeatedly\n    float countTo = 2.0;\n    float tm = mod(time * timeMultiplier, countTo);\n    if (0.0 <= tm && tm < (1.0 - pause*0.5)) {       \n        // ONE!\n        return kickwave(tm, amplitude * 2.0, freq1);\n    } else if (1.0 <= tm && tm < (2.0 - pause)) {\n        // TWO!\n        return kickwave(tm, amplitude, freq2);\n    }\n}\n\nvec2 mainSound( in int samp,float time) {  \n    float C0 = 16.35;\n    float Ciss0 = 17.32;\n    float D0 = 18.35;\n    float Diss0 = 19.45;\n    float E0 = 20.60;\n    float F0 = 21.83;\n    float Fiss0 = 23.12;\n    float G0 = 24.50;\n    float Giss0 = 25.96;\n    float A0 = 27.50;\n    float Aiss0 = 29.14;\n    float B0 = 30.87;\n    float C1 = 32.70;\n    float Ciss1 = 34.65;\n    float D1 = 36.71;\n    float Diss1 = 38.89;\n    float E1 = 41.20;\n    float F1 = 43.65;\n    float Fiss1 = 46.25;\n    float G1 = 49.00;\n    float Giss1 = 51.91;\n    float A1 = 55.00;\n    float Aiss1 = 58.27;\n    float H1 = 61.74;\n    float C2 = 65.41;\n    float Ciss2 = 69.30;\n    float D2 = 73.42;\n    float Diss2 = 77.78;\n    float E2 = 82.41;\n    float F2 = 87.31;\n    float Fiss2 = 92.50;\n    float G2 = 98.00;\n    float Giss2 = 103.83;\n    float A2 = 110.00;\n    float Aiss2 = 116.54;\n    float H2 = 123.47;\n    float C3 = 130.81;\n    float Ciss3 = 138.59;\n    float D3 = 146.83;\n    float Diss3 = 155.56;\n    float E3 = 164.81;\n    float F3 = 174.61;\n    float Fiss3 = 185.00;\n    float G3 = 196.00;\n    float Giss3 = 207.65;\n    float A3 = 220.00;\n    float Aiss3 = 233.08;\n    float H3 = 246.94;\n    float C4 = 261.63;\n    float Ciss4 = 277.18;\n    float D4 = 293.66;\n    float Diss4 = 311.13;\n    float E4 = 329.63;\n    float F4 = 349.23;\n    float Fiss4 = 369.99;\n    float G4 = 392.00;\n    float Giss4 = 415.30;\n    float A4 = 432.00; // 432 is less harsh than 440\n    float Aiss4 = 466.16;\n    float H4 = 493.88;\n    float C5 = 523.25;\n    float Ciss5 = 554.37;\n    float D5 = 587.33;\n    float Diss5 = 622.25;\n    float E5 = 659.25;\n    float F5 = 698.46;\n    float Fiss5 = 739.99;\n    float G5 = 783.99;\n    float Giss5 = 830.61;\n    float A5 = 880.00;\n    float Aiss5 = 932.33;\n    float H5 = 987.77;\n    float C6 = 1046.50;\n    float Ciss6 = 1108.73;\n    float D6 = 1174.66;\n    float Diss6 = 1244.51;\n    float E6 = 1318.51;\n    float F6 = 1396.91;\n    float Fiss6 = 1479.98;\n    float G6 = 1567.98;\n    float Giss6 = 1661.22;\n    float A6 = 1760.00;\n    float Aiss6 = 1864.66;\n    float H6 = 1975.53;\n    float C7 = 2093.00;\n    float Ciss7 = 2217.46;\n    float D7 = 2349.32;\n    float Diss7 = 2489.02;\n    float E7 = 2637.02;\n    float F7 = 2793.83;\n    float Fiss7 = 2959.96;\n    float G7 = 3135.96;\n    float Giss7 = 3322.44;\n    float A7 = 3520.00;\n    float Aiss7 = 3729.31;\n    float H7 = 3951.07;\n    float C8 = 4186.01;\n    float Ciss8 = 4434.92;\n    float D8 = 4698.63;\n    float Diss8 = 4978.03;\n    float E8 = 5274.04;\n    float F8 = 5587.65;\n    float Fiss8 = 5919.91;\n    float G8 = 6271.93;\n    float Giss8 = 6644.88;\n    float A8 = 7040.00;\n    float Aiss8 = 7458.62;\n    float H8 = 7902.13;\n    \n    // pan slightly from left to right and back\n    float lr = (1.0 + cos(time)) * 0.5;    \n    float panfactor = (1.0 + sin(time/32.0)) * 0.5;        \n    \n    float d = 0.0;\n    \n    // number of lines being added to d\n    float bassWeight = 5.0;\n    float organWeight = 2.0;\n    float drumWeight = 2.0;\n    float kickWeight = 10.0;\n    float totalWeight = bassWeight + organWeight + drumWeight + kickWeight;\n    \n\tfloat tm = mod(time, 32.0);    \n    \n    // bass line\n    if (tm < 24.0) {\n    \td += bass(time-0.015, bassWeight/totalWeight, C2, C2, Ciss2, C2, C2, C2, C2, C3, 0.1, 4.0);\n    } else {\n        d += bass(time-0.015, bassWeight/totalWeight, C3, C3, C2, C2, C2, Giss2, G2, G2, 0.1, 4.0);\n    }\n    \n    // toggle organ\n\tfloat otm = mod(time, 128.0);        \n    if ((otm >= 8.0 && otm < 48.0) && (time >= 32.0)) {\n        organWeight = 0.5;\n    \td += organ(time, organWeight/totalWeight, G4, E4, C4, C4, G4, F4, C4, C4, 0.0, 1.0/8.0);\n    \td += organ(time, organWeight/totalWeight, G5, E5, C5, C5, G5, F5, C5, C5, 0.0, 1.0/8.0);    \t\n        d += organ(time, organWeight/totalWeight, C5, G5, G5, G5, C5, A5, G5, G5, 0.0, 1.0/8.0);\n    \td += organ(time, organWeight/totalWeight, C3, G3, G3, G3, C3, A3, G3, G3, 0.0, 1.0/8.0);\n    \td += organ(time, organWeight/totalWeight, E4, E4, E4, E4, C4, D4, G4, G4, 0.0, 1.0/8.0);\n    }\n    \n    // noise drum line\n    d += noisedrum(time, drumWeight/totalWeight, C8, C6, C6, C6, C8, C6, C6, C6, 0.8, 8.0);\n    d += noisedrum(time, drumWeight/totalWeight, C8, C5, C6, C6, C8, C5, C6, C6, 0.8, 8.0);\n    \n    // kick drum\n    float kickTimeMultiplier = 4.0;\n    if (tm >= 28.0) {\n        kickTimeMultiplier = 8.0;\n    }        \n\td += kick(time, kickWeight/totalWeight, C4, C3, 0.0, kickTimeMultiplier);\n    \n    // booster\n    d *= 128.0 * exp(-3.0);\n    \n    // overtone    \n    if (tm >= 16.0) {\n\t\tfloat overtone = (0.5 + ((1.0 + sin(tm*log(tm)*C7)) * 0.5) * 0.5);\n    \td *= overtone * overtone * overtone * (time / 10.0);\n    }\n    if (tm >= (16.0 + 8.0)) {\n    \td *= atan(d * 40.0, time);\n    }    \n   \n    return vec2( d*max(panfactor+(d*lr)*(1.0-panfactor), 0.2), d*max(panfactor+(1.0-lr)*(1.0-panfactor), 0.2) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}