{
    "Shader": {
        "info": {
            "date": "1575312032",
            "description": "Happy new year :love:",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGSWd",
            "likes": 3,
            "name": "isocahedron gift",
            "published": 3,
            "tags": [
                "raymarching",
                "gift"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 428
        },
        "renderpass": [
            {
                "code": "// HG SDF\n// https://www.shadertoy.com/view/Xs3GRB\n\n//#define FIXED\n\n#ifdef FIXED\n#define TIME 138.6\n#else\n#define TIME iTime\n#endif\n\n#define PI 3.14159265359\n#define PHI (1.618033988749895)\n#define TAU 6.283185307179586\n\nfloat sdIcosahedron(vec3 p, float r)\n{\n\tfloat q = (sqrt(5.)+3.)/2.;\n\n\tvec3 n1 = normalize(vec3(q,1,0));\n\tvec3 n2 = vec3(sqrt(3.)/3.);\n\n\tp = abs(p/r);\n\tfloat a = dot(p, n1.xyz);\n\tfloat b = dot(p, n1.zxy);\n\tfloat c = dot(p, n1.yzx);\n\tfloat d = dot(p, n2.xyz)-n1.x;\n\treturn max(max(max(a,b),c)-n1.x,d)*r;\n}\n\nmat2 rot(float a)\n{\n    float ca = cos(a);\n    float sa = sin(a);\n    \n    return mat2(ca,-sa,sa,ca);\n}\n\nfloat sdCube(vec3 p)\n{\n    vec3 q = abs(p) - 1.;\n    return length(max(q, vec3(0.))) + min(max(max(q.x, q.y), q.z), 0.);\n}\n\nint m = 0;\n\nfloat map(vec3 p)\n{\n    float time = TIME * .2;\n\tvec3 cp = p;\n    \n    p.xy *= rot(time);\n    p.yz *= rot(time * .5);\n    p.xz *= rot(time * .25);\n    float dist  = sdIcosahedron(p, 1.7 );\n    if(dist < .01)\n        m = 1;\n    p = cp;\n    p.y = abs(p.y);\n    p.xy *= rot(PHI);\n    p.yz *= rot(PHI);\n    p.xz *= rot(PHI);\n    \n    float outer = sdIcosahedron(p , 10.);  \n    if(outer < .01 && m != 1)\n        m = 2;\n    \n    dist = min(dist, -outer);\n    \n    \n    return dist;\n}\n\nvec3 normal(vec3 p)\n{\n    float d = map(p);\n    vec2 e = vec2(.001,.0);\n    return normalize(\n    vec3(\n    \td - map(p + e.xyy),\n    \td - map(p + e.yxy),\n    \td - map(p + e.yyx)\n        )\n    );\n}\n\nfloat ray(inout vec3 cp, vec3 rd, out float st)\n{\n    float cd = 0.;\n    for(st = 0.; st < 1.; st += 1. / 512.)\n    {\n        cd = map(cp);\n        if(abs(cd) < .01)\n            break;\n        cp += rd * cd;\n    }\n    \n    return cd;\n}\n\n\nvec2 hash22(vec2 p) \n{\n    float n = sin(dot(p, vec2(41, 289)));\n    return fract(vec2(262144, 32768)*n); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n    float zoom = 4.25;\n    uv *= zoom;\n    //float ratio = iResolution.x / 800.;\n    \n    float quantize = 160. / zoom;\n    vec2 uv2 = (fract(uv * quantize) - .5) * 2.;\n    \n    uv = floor(uv * quantize) / quantize;\n    \n    vec2 noise = hash22(uv) * 2. - 1.;\n//   \tnoise *= ratio;\n    \n//   uv += noise * .00125;\n //   uv2 += noise * .1;\n    \n    vec2 uv3 = abs(uv);\n    \n    vec3 ro = vec3(0.,0.,-5.);\n    vec3 rd = normalize(vec3(uv * .5, 1.));\n    vec3 cp = ro;\n    float st;\n    float cd = ray(cp, rd, st);\n    \n    int mat = m;\n    fragColor = vec4(1.);\n    float f = 0.;\n    if(cd < .01)\n    {\n        vec3 ld = normalize(vec3(.1,.5,.7));\n        \n        if(mat == 2)\n        {\n            ld = normalize(vec3(-1.,-3.,1.));\n        }\n        \n        vec3 norm = normal(cp);\n        float li = dot(ld, norm);\n        \n        \n        li = clamp(li, 0., 1.);\n        float d = length(cp - ro);\n        \n        float fog = exp(-d * .035);\n        \n        //f = 1. - exp(-li * 2.);\n    \n        f = li;\n        \n        if(mat == 1)\n        {\n            f = f * (.7 + .3 * pow(f, 16.));\n        \tfog = 1.8;\n        }\n        else if(mat == 2)\n        {\n            fog *= 3.85;\n              \n            f = (1. - f) * max(pow(length(uv) * .55, 2.), 0.85);\n        }\n\n        f *= .65;\n        \n        f = clamp(f, 0., 1.);\n        \n        f *= fog;\n        \n        f *= .8;\n        f = smoothstep(f, f + .1, length(uv2)) ;\n        \n       // f = (1. - f) * .9;\n        fragColor = mix(\n        \tvec4(.005,.0,.01,.0),\n            vec4(.93,.99,.91,.0),\n            f);\n        \n        float fade = length(uv3) * .75;\n        fade = fade * fade + 1.;\n        fade = 1. / (fade * fade);\n        \n        fragColor *= fade;\n        \n        fragColor = pow(fragColor, vec4(.4545));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}