{
    "Shader": {
        "info": {
            "date": "1539282015",
            "description": "trying an alternate sdf max with some blobs, then trying to add trails",
            "flags": 32,
            "hasliked": 0,
            "id": "4l3BD8",
            "likes": 9,
            "name": "trail blobs",
            "published": 3,
            "tags": [
                "blobs",
                "sdf",
                "trails"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 775
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat combine(in float x, in float y) {\n    const float flip_pt = 0.6;\n    return flip_pt - squircle_max(max(0.0, flip_pt - y), max(0.0, flip_pt - x), 0.48);\n}\n\nfloat sdf_amount(in vec2 uv, in vec4 params) {\n    vec2 ball_loc = sin(params.xy * 0.4 * iTime + params.z);\n    return length(ball_loc - uv) - params.w - 0.05;\n}\n\nfloat ramp(in float a, in float b, in float x) {\n    return clamp((x-a)/(b-a), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    float dist = 100.0;\n    \n    dist =         sdf_amount(uv, vec4(2.2111,-1.522,1.0,0.032));\n    dist = combine(sdf_amount(uv, vec4(1.2301,-2.422,2.0,0.035)), dist);\n    dist = combine(sdf_amount(uv, vec4(2.2301, 2.222,3.0,0.036)), dist);\n    dist = combine(sdf_amount(uv, vec4(1.5311,-2.922,4.0,0.031)), dist);\n    dist = combine(sdf_amount(uv, vec4(2.2311, 2.122,5.0,0.041)), dist);\n    float bright = ramp(-1.0 / iResolution.y, 1.0 / iResolution.y, dist);\n    fragColor = vec4(vec3(1.0 - bright, 0.0, 0.0),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = texture(iChannel1, uv).rgb;\n    vec3 new_color = texture(iChannel0, uv).bgr;\n    mat3 color_rot =\n        mat3( 1.0016374 ,  0.00332076, -0.00495827,\n       -0.00327048,  1.00033642,  0.00293016,\n       0.01252787, -0.01043093,  0.99792338);\n    color_rot = color_rot * color_rot;\n    color = color_rot * color_rot * color;\n    color = max(vec3(0.0), color - 0.005 * dot(color, vec3(1.0)));\n    // color = max(vec3(0.0), 0.99 * color);\n    color = squircle_max(new_color, color, 0.05);\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float squircle_max(in float x, in float y, float off) {\n    float x2 = (x + off) * (x + off);\n    float x4 = x2 * x2;\n    float y2 = (y + off) * (y + off);\n    float y4 = y2 * y2;\n    return sqrt(sqrt(x4 + y4)) - off;\n}\n\n\nvec3 squircle_max(in vec3 x, in vec3 y, float off) {\n\treturn vec3(squircle_max(x.x, y.x, off),\n                squircle_max(x.y, y.y, off),\n                squircle_max(x.z, y.z, off));\n}\n\nfloat smooth_max(in float x, in float y, in float s) {\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\n\nvec3 smooth_max(in vec3 x, in vec3 y, float s) {\n\treturn vec3(smooth_max(x.x, y.x, s),\n                smooth_max(x.y, y.y, s),\n                smooth_max(x.z, y.z, s));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}