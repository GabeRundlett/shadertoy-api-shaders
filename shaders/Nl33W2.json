{
    "Shader": {
        "info": {
            "date": "1636781363",
            "description": "hold click to move through Julia sets",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl33W2",
            "likes": 3,
            "name": "Mandelbrot / Julia Set",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "vec3 hsv(float h, float s, float v){\n    vec3 col = vec3(\n        abs(mod(h,1.0)-0.5) - 1.0/6.0,\n        abs(mod(h + 1.0/3.0,1.0)-0.5) - 1.0/6.0,\n        abs(mod(h + 2.0/3.0,1.0)-0.5) - 1.0/6.0\n    );\n    col *= v;\n    float avg = (col.r + col.g + col.b)/3.0;\n    col = (col - avg)*s + avg;\n    return clamp(col*3.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float borderPos = iResolution.x/1.8;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    if (fragCoord.x < borderPos){\n        col = hsv(col.x/100.0 + iTime/100.0, 1.0, col.x);\n    } else {\n        col = hsv(col.x/30.0 + iTime/100.0, 1.0, col.x*1.0);\n    }\n    \n    float dist = distance(uv*500.0,iMouse.xy/iResolution.xy*500.0);\n    col += sin(dist-iTime*10.0)/(dist*dist);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    float borderPos = iResolution.x/1.8;\n    \n    vec2 m = (iMouse.xy - iResolution.xy/2.0) / (iResolution.xy/2.7);\n    m.x *= iResolution.x/iResolution.y;\n    m.x += 0.35;\n    m.y += -0.2;\n        \n    vec2 coord = (fragCoord - iResolution.xy/2.0) / (iResolution.xy/2.7);\n    coord.x *= iResolution.x/iResolution.y;\n    coord.x += 0.35;\n    coord.y += -0.2;\n    \n    if (iChannelTime[0] < 0.5){\n        if (fragCoord.x < borderPos) {\n            int c = 0;\n            float c_r = coord.x;\n            float c_i = coord.y;\n            float z_r = 0.0;\n            float z_rt = 0.0;\n            float z_i = 0.0;\n            float size_z = 0.0;\n\n            while (float(c) <= threshold && size_z <= 4.0) {\n                z_rt = z_r;\n                z_r = z_r*z_r - z_i*z_i + c_r;\n                z_i = 2.0 * z_i * z_rt + c_i;\n                size_z = z_r*z_r + z_i*z_i;\n                c++;\n            }\n            if (size_z > 4.0) {\n                col.r = float(c) + 1.0 - log(log(z_r*z_r + z_i*z_i)/2.0)/log(2.0);\n            }\n        } else if (fragCoord.x >= borderPos){\n            coord.x -= 1.6;\n            coord *= 1.5;\n\n            int c = 0;\n            float c_r = m.x;\n            float c_i = m.y;\n            float z_r = coord.x;\n            float z_i = coord.y;\n            float z_rt = 0.0;\n            float size_z = 0.0;\n\n            while (float(c) <= threshold && size_z <= 4.0) {\n                z_rt = z_r;\n                z_r = z_r*z_r - z_i*z_i + c_r;\n                z_i = 2.0 * z_i * z_rt - c_i;\n                size_z = z_r*z_r + z_i*z_i;\n                c++;\n            }\n            if (size_z > 4.0){\n                col = vec3(float(c)/10.0);\n            }\n        }\n    } else {\n        vec2 uv = fragCoord/iResolution.xy;\n        col = texture(iChannel0, uv).xyz;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float threshold = 1000.0;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}