{
    "Shader": {
        "info": {
            "date": "1629675417",
            "description": "more attempts to keep sharp and write stuff without looking at any resources",
            "flags": 0,
            "hasliked": 0,
            "id": "7s3GWH",
            "likes": 1,
            "name": "phong box",
            "published": 3,
            "tags": [
                "phong"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "float smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nmat2 rot(float r)\n{\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat map(vec3 p)\n{\n    // ball\n    float d = length(p + vec3(0., 0.5, -0.5)) - 0.5;\n    \n    // walls\n    d = min(d, abs(p.y+1.0));\n    d = min(d, abs(p.y-1.0));\n    d = min(d, abs(p.x+1.5));\n    d = min(d, abs(p.x-1.5));\n    d = min(d, abs(p.z-2.0));\n\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    vec3 p = ro;\n    int i = 0;\n    for (; i < 50; i++)\n    {\n        float dist = map(p);\n        if (dist < 0.001) break;\n        t += dist;\n        p = ro + t * rd;\n    }\n    return vec2(t, i);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 o = vec2(0.001, 0.);\n    return normalize(vec3(\n        map(p + o.xyy) - map(p - o.xyy),\n        map(p + o.yxy) - map(p - o.yxy),\n        map(p + o.yyx) - map(p - o.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * ((fragCoord/iResolution.xy) - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    for (int i = 0; i < 2; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            vec3 ro = vec3(0., 0., -3.);\n            vec3 rd = normalize(vec3(uv + vec2(float(i)*0.5+0.25, float(j)*0.5+0.25)*0.006, 0.) - ro);\n\n            vec2 res = march(ro, rd);\n            float dist = res.x;\n            float iters = res.y;\n\n            if (dist < 10.)\n            {\n                vec3 hit = ro + dist * rd;\n                vec3 light = vec3(sin(iTime), 0.5, cos(iTime)) - hit;\n                vec3 ld = normalize(light);\n                vec3 norm = normal(hit);\n                vec3 albedo = (norm * 0.5 + 0.5);\n                float diff = 0.;\n                \n                if (march(hit + norm * 0.001, ld).x >= length(light))\n                {\n                    diff = dot(norm, ld);\n                }\n                \n                col += max(diff, 0.2) * albedo;\n            }\n        }\n    }\n    \n    fragColor = vec4(col / 4.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}