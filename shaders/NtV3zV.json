{
    "Shader": {
        "info": {
            "date": "1638102844",
            "description": "WIP: Find the connected component, then connect them. (cyclical world to make it solvable). Scale N in Common.\nSPACE to restart a new truchet tiling. \n'R' to reset ids  (do it when apparently monocolor: some id errors for now)\nclick to swap tile manually.",
            "flags": 48,
            "hasliked": 0,
            "id": "NtV3zV",
            "likes": 8,
            "name": "connect components in truchets 4",
            "published": 3,
            "tags": [
                "flood",
                "connected",
                "doodles",
                "reproduction",
                "truchets",
                "streamreduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "// connecting components in https://shadertoy.com/view/NlGGRV\n// more accelerated variant of https://shadertoy.com/view/stKGzG\n// accelerated variant of https://shadertoy.com/view/7ty3zG\n\n#define hue(v)  vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) , 1 )\n\n// #define length(v) ( abs(v.x)+abs(v.y) ) // variant with straight lines\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n // O = T(u).agbr; return;\n    vec2 U = N * u / R.y + 0.*iTime, I = floor(U), F = fract(U);\n         \n    O = T(I);                                          // cell states \n    O.w > 0. ? F = vec2(1.-F.y,F.x) : F;\n    \n    O =   smoothstep(N*1.5/R.y,0.,abs(min(length(F),length(1.-F))-.5) ) // truchet drawing\n        * hue( O[ F.x+F.y < 1. ? 1 : 2 ] );            // coloring\n         \n // if (iMouse.z>0.) O += (1.-O.w)*.3*mod(I.x+I.y,2.); // debug: draw tiles\n // O += .3*T(I).w;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n#define keyDown(c)    ( texelFetch(iChannel3,ivec2(c,1),0).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if ( iFrame < 1 || keyDown(32) ) {        // --- init: create truchet\n        vec2 I = U;                           // store truchet data\n        O.w = step(.5,H(I));                  // random axis\n        O.y = 1.+I.x+4096.*I.y;               // id of tile segment #1\n        O.z = -O.y;                           // id of tile segment #2\n        O.x = 0.;\n        return;\n    }\n    \n    O = T(U);                                 // previous state\n    float Nx = floor(N*R.x/R.y);\n    vec4 T;\n    if (U.x <= Nx && U.y >= N+4. && U.y <= N+N+4.) // keep previous version\n      { U.y -= N+4.; O = T(U); return; }\n      \n    if (U.x >= Nx+4. && U.x <= Nx+4.+Nx/8. && U.y <= N/8.) { // reduction map of change\n        O-=O;\n        U.x -= Nx+4.;\n        for (int k=0; k < 64; k++ ) {\n            vec2 V = 8.*U + vec2(k%8,k/8),\n                 o = T(V + vec2(0.,N+4.)).yz, // old vs new value\n                 n = T(V).yz;\n         // if ( o != n ) O = vec4(o,n);      // if changed, store ( why break worse ? )\n         // if ( o != n ) { O = vec4(o,n); break; } // why worse ? \n            if ( o.x != n.x ) O.xz = vec2(o.x,n.x); // if changed, store \n            if ( o.y != n.y ) O.yw = vec2(o.y,n.y);\n            if (O.x*O.y!=0.) break;\n        }\n        return;\n    }\n    if (U.x > Nx || U.y > N) return;          // propagate only visible tiles\n\n                                              // --- propagate id along connections\n#define Tc(U)      T(mod(U,vec2(Nx,N)))\n#define left       Tc(U+vec2(1,0)).y\n#define right      Tc(U-vec2(1,0)).z\n#define bot      ( T = Tc(U+vec2(0,1)), T.w<1. ? T.y : T.z )\n#define top      ( T = Tc(U-vec2(0,1)), T.w<1. ? T.z : T.y )\n//#define min(a,b) ( abs(a) < abs(b) ? a : b ) // may this boost ?\n    if (O.w<1.) { // tile contains:  \\     new id = min(connections)\n        O.y = min( O.y, min( right, top ));\n        O.z = min( O.z, min( left , bot ));\n    }\n    else {        // tile contains:  /     new id = min(connections)\n        O.y = min( O.y, min( right, bot ));\n        O.z = min( O.z, min( left , top ));\n    }\n    \n // if (T().x > 0.) { if (U == vec2(0)) O.x-- ; return; }\n\n                  // --- shortcut2: at color change, update the color source pixel\n    for( float j = 0.; j < N/8.; j++)\n        for( float i = 0.; i < Nx/8.; i++) {\n            T = T( vec2(Nx+4.+i,j) );\n            vec2 o = T.xy, n = T.zw;          // changed old->new value\n            if (O.y==o.x) O.y = n.x;          // oldvalue was my seg1 : update\n            if (O.y==o.y) O.y = n.y;\n            if (O.z==o.x) O.z = n.x;          // oldvalue was my seg2 : update\n            if (O.z==o.y) O.z = n.y;\n        }\n                 \n  if (keyDown(64+18))  O.y = 1.+U.x+4096.*U.y,O.z = -O.y; // key 'R' to reset ids\n  if (iMouse.w>0. && U == floor(iMouse.xy/R.y*N) && O.y!=O.z ) O.w = 1.-O.w; // mouse click for swap\n  if (U == vec2(0) && ( keyDown(64+18) || iMouse.w>0. ) ) O.x = 40.; // let re-converge \n  if (T().x > 0.) { if (U == vec2(0)) O.x-- ; return; }              // let re-converge\n//return;\n                 // --- connect them all : at block connection, swap\n    if ( iFrame%10==9 && O.y != O.z && H(U) >.995 ) // should be done after convergence, and not on parallel on same block\n // if ( iFrame%10==0 && O.y != O.z && H(vec2(H(O.yz),H(U))) >.99 )\n        O.w = 1.-O.w;\n     // O.y = 1.+U.x+4096.*U.y,\n     // O.z = -O.y;\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 64.; // vertical number of tiles\n\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U+R)%ivec2(R), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}