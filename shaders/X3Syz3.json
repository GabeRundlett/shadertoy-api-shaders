{
    "Shader": {
        "info": {
            "date": "1727510388",
            "description": "mouse x , y\n\nWhen the mouse is placed on the right, watch for normal rain.\n\nWhen the mouse is placed on the half-frame to divide the half-part part, the raindrops become spherical\n\nhttps://www.shadertoy.com/view/4XSyzG",
            "flags": 0,
            "hasliked": 0,
            "id": "X3Syz3",
            "likes": 15,
            "name": "raindrop hail",
            "published": 3,
            "tags": [
                "mouse2497"
            ],
            "usePreview": 0,
            "username": "shadertoyjiang",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "// 20240929 \n// 20240929 体素雨滴\n// mouse x y\n// When the mouse is placed on the right, watch for normal rain\n// When the mouse is placed on the half-frame to divide the half-part part, the raindrops become spherical\n\n// When the hailToyWidth is too large, adjust the coefficient in rnd() appropriately\n#define hailToyWidth 25 \n#define time (iTime)\n#define TAU 6.2831853\n#define rot(t) mat2(cos(t),sin(t),-sin(t),cos(t))\n#define sph length(p - ip)-.49\n#define cub length(max(abs(p - ip)-.3, 0.))-.19\n//#define iMouse 1234\n// If this number(a) is too large, rnd() will be wrong and the coefficient inside should be adjusted down accordingly.\nfloat rnd(float a){return fract(234.567*sin(2.+(a)*(iMouse.y>iResolution.y*.55 || iTime>3.?23.456:222513.456)));} // original 2513.456 \n\nvec3 DIR,dir; \nfloat dbox;\nvec4 clr;\nint obj;\n\n/*float smin(float d1, float d2, float k)\n{\n        float h =clamp(.5 + .5 *(d2-d1)/k,0.,1.);\n        return mix(d2, d1, h)-k*h*(1.-h);\n}*/\n\n\n// 单雨滴\nfloat  drop(vec3 pos)\n{\n        dbox = 1e8;\n        vec3 p = pos, ip = round(p);\n        float hfw = float(hailToyWidth); \n        float db=length(max(abs(pos)-vec3(hfw+1.,15.,hfw+1.),0.));\n        if(db>0.)return db+.3;\n        ip.xz = clamp(ip.xz, -hfw, hfw);\n        \n        float ind = (ip.z + hfw)*(hfw+hfw)+ip.x+hfw;\n        //float ind = (ip.z)*(hfw+hfw)+ip.x; \n        float t = time * .2, // .05\n              fT = fract(t+rnd(ind));\n        float water = -8. + 2. * cos(ip.x*.25*(1.+.0*rnd(ind*3.5))+1.3) + 1.2* cos(ip.z*.3+.0*rnd(.7+ind)) + 2.5 * sin(ip.z*.23+ip.x*.2 +1.8);\n        float cloud =  9. + cos((ip.x + ip.z+t*60.)*.1) + .2*sin(ip.x*ip.z+t*19.) + rnd(ind);\n        p.y += fT;\n        if(p.y < (cloud+water)*.5){\n                ip.y = round(p.y - water)+water;\n        }else{\n                ip.y = round(p.y - cloud)+cloud;\n        }\n        ////////\n        vec4 watercolor=vec4(0,.5,1,0);\n        vec4 cloudcolor=vec4(1.,1.5,2,0);\n        \n        float d1=1e8, d2=1e8;\n        float s  = fT*fT*233.;\n        if(ip.y >= water && ip.y <= cloud){                               \n                ip.y = max(water, cloud - s);\n                \n                // raindrop\n                d1 = sph;\n                d1 = mix(cub,d1, smoothstep(0., 3.,s));\n                d1 = mix(d1,cub, smoothstep(water+.5, water,cloud-s));\n                clr= mix(cloudcolor+.4, watercolor,  smoothstep(0.,1.,s/(cloud-water+2.)));     \n                //                 +.2\n        }else{\n                // water and cloud\n                ip.y = min(ip.y,12.); // white small wrong\n                //if(ip.y<12.1){\n                         d2 = cub;\n                         clr= mix(watercolor,  cloudcolor,   tanh(p.y)*.5+.5);\n                //}\n        }\n        \n        if(iMouse.x > iResolution.x*.55) d1=d2=cub;\n        \n        \n        \n                \n        //float dk = length(max(abs(p.xz - ip.xz)-.499, 0.)); //        \n        //d1=max(d1,dk);\n        \n        float d = min(d1,d2);\n        // water\n        float ds = length(max( abs(pos-vec3(0,-20,0))-vec3(hfw+.445, 12., hfw+.445) ,0.));//             \n        if(ds < d)clr=cloudcolor, d = ds;\n        // white sky\n        ds = length(max( abs(pos-vec3(0, 20,0))-vec3(hfw+.455, 9., hfw+.455) ,0.));// \n        //ds = length(max( abs(pos-vec3(0, 16,0))-vec3(hfw+.455, 4.+.6*(sin(pos.x*.1)+cos(pos.z*.3)), hfw+.455) ,0.));//  \n        //ds = length(max( abs(pos-vec3(0, 12.5,0))-vec3(hfw+.455, 1.5, hfw+.455) ,0.));//  \n        \n        \n        if(ds < d)clr=vec4(1,.5,1,1)*11.1, d = ds;\n        \n        vec3 m = abs(ip+ (step(0., dir)-.5)-p)* length(dir)/abs(dir);\n        dbox = min(min(m.x, m.z),m.y);   \n        //if(dir.y<0.)d3=abs(water-.5-p.y)* length(dir)/abs(dir.y);\n        //dbox = min(dbox,  d3);\n        //if(dir.y>0.)d3=abs(cloud+.5-p.y)* length(dir)/abs(dir.y);\n        //dbox = min(dbox,  d3);             \n        float d3=abs((mix(water-.5,cloud+.5,step(0.,dir.y))-p.y)* length(dir)/dir.y);\n        dbox = min(dbox,  d3);\n        \n        float dt = max(-14.-pos.y,pos.y - 13.5);    \n        obj=0; if(d1<=d || p.y>0.)obj=1;\n        \n        m = abs(vec3(0)+ (step(0., dir)*2.-1.)*(hfw+.5)-p)* length(dir)/abs(dir);\n        float d5 = min(min(m.x, m.z),m.y);\n        \n        d5 =max(d5,  length(max(abs(p.xz)-(hfw+.5),0.))  );\n        if(d5<d)d=min(d,d5),obj=101;\n        //return max(d,dt);\n        return min(dbox+.0101,max(d,dt));//+.001,d3)-.001;\n}\n\n\n\nfloat map(vec3 p)\n{\n        float t = iTime-6.;\n        \n        dir = DIR;\n        p.xz *=rot(t*.15);\n        dir.xz *= rot(t*.15);\n        return drop(p); \n}\n\n\n// 2024-3-3 17:52:59\n// ShaderToy入口主函数 3D\nvoid mainImage(out vec4 O, vec2 v)\n{\n        O = vec4(0.6);\n        vec2 R = iResolution.xy,\n             u = 1. * (v+v+.1 - R) / R.y,       \n             m = 1. * (iMouse.xy*2. - R) / R.y; \n        vec3 o = vec3(0, 4, -60),                \n             r = normalize(vec3(u+vec2(0,-.2), 2.)),         \n             e = vec3(0, 1e-3, 0),              \n             p,n,                                 \n             s = normalize(vec3(-1,2,-3));      \n        DIR = r;\n        O *= texture(iChannel0,r);\n        float d,t,f,g,c;\n        for(int i;i<256 && t < 100.;i++)\n        {\n                p = o + r * t;\n                d = map(p);\n                if(d<.01)break;\n                /*{\n                        //O *= 0.;\n                        n = normalize(vec3(map(p+e.yxx),map(p+e),map(p+e.xxy))-d);\n                        f = .5 + .5 * dot(n, s);\n                        g = max(dot(n,s),0.);\n                        c = 1. + pow(f, 200.)-f*.3; // 665.352.6.542.9958.8.63\n                        \n                        if(obj==101){O += (.5+.5*dot(n,normalize(vec3(-3,2,3))))*.1,d+=9.;}// // 原因可能是这三个大平面越过体素，法向量计算出错，没想到简单的方法，笨办法可靠，但代码量更大：就是依据它们的身份直接手工确定法向量。\n                        else if(obj==0 || iMouse.y > iResolution.y*.55)O = g*c*clr;//(c*g+f)*.5;\n                        else      O = c*clr*.5;\n                        //if(obj != 101)\n                        break;\n                }*/\n                t += d;\n                //t += min(d, dbox+.001);\n        }\n        \n        \n        \n        if(d<.01) // iq Most of the system speed up methods\n                {\n                        //O *= 0.;\n                        n = normalize(vec3(map(p+e.yxx),map(p+e),map(p+e.xxy))-d);\n                        f = .5 + .5 * dot(n, s);\n                        g = max(dot(n,s),0.);\n                        c = 1. + pow(f, 200.)-f*.3; // 665.352.6.542.9958.8.63\n                        \n                        if(obj==101){O += (.5+.5*dot(n,normalize(vec3(-3,2,3))))*.1,d+=9.;}// // 原因可能是这三个大平面越过体素，法向量计算出错，没想到简单的方法，笨办法可靠，但代码量更大：就是依据它们的身份直接手工确定法向量。\n                        else if(obj==0 || iMouse.y > iResolution.y*.55)O = g*c*clr;//(c*g+f)*.5;\n                        else      O = c*clr*.5;\n                        //if(obj != 101)\n                        //break;\n                }\n        \n        \n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}