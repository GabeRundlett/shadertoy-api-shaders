{
    "Shader": {
        "info": {
            "date": "1478010998",
            "description": "MegaWave 5",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl3SzH",
            "likes": 21,
            "name": "MegaWave 5",
            "published": 3,
            "tags": [
                "megawave"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1099
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 RotX(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 RotY(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nconst float mPi = 3.14159;\nconst float m2Pi = 6.28318;\nfloat time = 0.;\nfloat time2 = 0.;\n\nfloat shape(vec3 p)\n{\n    return length(p);\n}\n\nvec2 df(vec3 p) // from MegaWave 2 (https://www.shadertoy.com/view/ltjXWR)\n{\n\tvec2 res = vec2(1000.);\n\t\n    p *= RotY(-3.14159/4.);\n    p *= RotZ(p.z * 0.05);\n    \n\tvec3 q;\n\t\n\t// mat 2\n\tq.x = cos(p.x);\n\tq.y = p.y * 5. - 25. + 10. * cos(p.x / 7. + time2) + 10. * sin(p.z / 7. + time2);\n\tq.z = cos(p.z);\n    float sphere = shape(q) - 1.;\n\tif (sphere < res.x)\n\t\tres = vec2(sphere, 2.);\n\t\n\t// mat 3\n\tq.x = cos(p.x);\n\tq.y = p.y * 5. + 25. + 10. * cos(p.x / 7. + time2 + mPi) + 10. * sin(p.z / 7. + time2 + mPi);\n\tq.z = cos(p.z);\n\tsphere = shape(q) - 1.;\n\tif (sphere < res.x)\n\t\tres = vec2(sphere, 3.);\n\n    return res;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n// from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n\t\tfloat h = df( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 8;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += df(surfPoint).x;\n\t}\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn df(p - n * s).x;\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvec4 shade(vec3 ro, vec3 rd, float d, vec3 lp)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tfloat sb = SubDensity(p, 0.001, 0.1);\t\t\t\t\t\t\t// deep subdensity (10 iterations)\n\tvec3 bb = blackbody(100.*sb+100.);\t\t\t\t\t\t\t\t// blackbody color according to the subdensity value\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, .01);\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 0.08; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n    diff *= softshadow( p, ld, 0.02, 50.);\t\t\t\t\t\t\t// soft shadow\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 16. ); \t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),25.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p*0.1, 5.) * 0.5; \t\t\t\t\t// one step sub density of df\n\treturn vec4(\t\t\t\t\t\t\t\t\t\t\t\t\t// some mix of WTF :) i tried many different things and this i choose :) but maybe there is other things to do\n        (diff + fre + bb.x * sss) * amb + diff * 0.5, \n        (diff + fre + bb * sb + sss * 0.3) * amb + spe * 0.6 - diff * sss * 0.05\t\n    );\n}\n\n// get cam\nvec3 cam(vec2 g, vec2 si, vec3 ro, vec3 cv)\n{\n\tvec2 uv = (g+g-si)/si.y;\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y= cross(z,x);\n  \treturn normalize(z + uv.x*x + uv.y*y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 f = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n    \n    time = iTime * 2.;\n    time2 = iTime * 1.;\n    \n    vec3 cu = vec3(0,1,0);\n  \tvec3 cv = vec3(time + .1,0,time + .1);\n    vec3 ro = vec3(time,0,time);\n\t\n\tvec3 lp = ro + vec3(101,10,-5);\n   \tvec3 rd = cam(g, si, ro, cv);\n\n    float s = 1.;\n    float d = 0.;\n    for(int i=0;i<250;i++)\n    {      \n        if (log(d*d/s/1e5)>0.||d>100.)break;\n        d += s = df(ro+rd*d).x * .1;\n    }\n\t\n    vec3 sky = GetSky(rd, normalize(lp-ro), vec3(2.));\n\n    if (d < 100.)\n    {\n        f = shade(ro, rd, d, lp);\n        f = f.zyzw;\n        f = f + f.x*0.3;\n        f = mix( f, sky.rbgg, 1.0-exp( -0.001*d*d ) );\n    }\n    else\n    {\n        f = sky.rbgg;\n    }\n        \n   \tfragColor = sqrt(f*f*f*5.); // gamma correction\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}