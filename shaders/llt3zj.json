{
    "Shader": {
        "info": {
            "date": "1470376736",
            "description": "2D composition practice",
            "flags": 0,
            "hasliked": 0,
            "id": "llt3zj",
            "likes": 12,
            "name": "Dot Line",
            "published": 3,
            "tags": [
                "2d",
                "minimal",
                "dot",
                "point",
                "composition"
            ],
            "usePreview": 0,
            "username": "EanJee",
            "viewed": 1280
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159;\nconst float TWO_PI = PI * 2.0;\nconst float REPEAT = 32.0;\nconst float FREQUENCY = 2.5;\nconst float AMPLITUDE = 0.08;\nconst float RADIUS = 0.45;\nconst float BLUR = 0.1;\n\nvec3 drawCircleFill(vec2 resolution, vec2 st, vec2 center, float radius, float blur)\n{\n    vec2 aspect = resolution / min(resolution.x, resolution.y);\n    return vec3(smoothstep(radius - blur, radius, length((st - center) * aspect)));\n}\n\n// vec2(1, 0): landscape\n// vec2(0, 1): portrait\nvec2 getOrientation(vec2 resolution)\n{\n    float widthLonger = step(resolution.y, resolution.x);\n    return vec2(widthLonger, 1.0 - widthLonger);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // tile on the longer side of screen\n    vec2 repeat = getOrientation(iResolution.xy) * (REPEAT - 1.0) + 1.0;\n    vec2 st = fract(uv * repeat);\n\n    // get slice info\n    vec2 sliceResolution = iResolution.xy / repeat;\n    vec2 sliceOrientation = getOrientation(sliceResolution);\n\n    // oscillate from the center of each slice\n    vec2 sliceIndex = floor(uv * repeat);\n    float phase = max(sliceIndex.x, sliceIndex.y) * TWO_PI / REPEAT;\n    float offsetValue = sin(iTime * FREQUENCY + phase);\n\n    vec2 pos = getOrientation(sliceOrientation) * AMPLITUDE * offsetValue + 0.5;\n    float radius = RADIUS * (offsetValue * 0.5 + 0.5);\n\n    // draw cicles\n    fragColor = vec4(drawCircleFill(sliceResolution, st, pos, radius, BLUR), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}