{
    "Shader": {
        "info": {
            "date": "1694128739",
            "description": "triangular domain repetition using symmetry.\nonly requires one read of the sdf !",
            "flags": 0,
            "hasliked": 0,
            "id": "dljfWm",
            "likes": 13,
            "name": "triangular symmetry",
            "published": 3,
            "tags": [
                "sdfdomainrepetitiontrihex"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "#define triSize 1.\n\nvec2 triRepeat( in vec2 p ) {\n\n    //we first repeat the space inside hexagons in a grid,\n    //then we divide the hexagons into 6 symmetrical triangles\n    //(this is the method i found, there might be another one !)\n    \n    const vec2 n      = vec2(0.57735026919, 1.73205080757); // 1./sqrt(3.), sqrt(3.)\n    const vec2 offset = vec2(0.57735026919, 0.33333333333); // 1./sqrt(3.), 1/3          \n    \n    p /= triSize;\n    p += offset;\n\n    // hexagonal repetition\n    \n    p  = vec2(mod(p.x,n.y), mod(p.y + ceil(p.x*n.x), 2.) - 1.);\n    p -= vec2(n.y, min(sign(p.y)*2.,0.) + 1.) * max(sign(p.x*n.y + abs(p.y) - 2.), 0.);\n\n    // radial symmetry (6)\n    \n    p.y = abs(p.y);\n    vec2 p2 = p + vec2(p.y,-p.x)*n.y;\n    p = abs( p - p2 * max(sign(p2.y)*0.5, 0.) );\n    \n    //\n    \n    p -= offset;\n    p *= triSize;\n\n    return p;\n}\n\nfloat getVal( in vec2 p ) {\n    \n    //just put this line at the beginning of the sdf function\n    p = triRepeat(p);\n\n    p += vec2(cos(iTime),sin(iTime))*0.1;\n\n    //box sdf from iq\n    vec2 d = abs(p) - 0.1;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = 1.5*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = 1.5*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n\tfloat d = getVal(p);\n    \n\t// coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 ) {\n        d = getVal(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}