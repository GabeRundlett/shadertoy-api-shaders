{
    "Shader": {
        "info": {
            "date": "1646605407",
            "description": "me sinto contente, \nme sinto muito contente",
            "flags": 34,
            "hasliked": 0,
            "id": "fsSfRK",
            "likes": 1,
            "name": "pontos deleuze",
            "published": 3,
            "tags": [
                "pointillism",
                "chromaticshift",
                "galcosta"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel1,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BLUR 0.01\n#define RATIO_SCALE 3.\n#define PIXEL_NOISE_SCALE 0.25\n#define IMAGE_WARP 0.0\n#define GRID_NOISE 0.0\n#define FEEDBACK 0.98\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(in vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // prebrightness\n    vec3 precol = texture(iChannel0,uv).rgb;\n    float prebrightness = (precol.r + precol.g + precol.b) / 3.0;\n    \n    vec2 ratio = vec2(32.,20.) * RATIO_SCALE * prebrightness;\n    \n    // pixel noise\n    float npxls = PIXEL_NOISE_SCALE;\n    vec2 npxl = floor(iTime+uv*ratio*npxls)/(ratio*npxls);\n    float pxln = noise(npxl*6.) + noise(npxl*4.) * noise(npxl*2.);\n    \n    // noise\n    float ns = noise(uv*1.+iTime) + noise(uv*3.+iTime) + noise(uv*12.+iTime)*0.2;\n    \n    // pixel grid\n    // float pxls = 1. * (floor(pxln*3.) + 1.0);\n    float pxls = GRID_NOISE*ns + 1.;\n    vec2 pxl = floor(uv*ratio*pxls)/(ratio*pxls);\n    \n    vec2 subuv = fract(uv*ratio*pxls);\n    \n    // fragColor = vec4(pxln,pxln,pxln,1.0);\n    // return;\n    \n    // webcam\n    col = texture(iChannel0,pxl+ns*IMAGE_WARP).rgb;\n    float brightness = (col.r + col.g + col.b) / 3.0;\n    \n    float ss = (pxls * ratio.y) / iResolution.y; // scaling factor to smoothstep across 2 or 3 pixels\n    ss += BLUR;\n    \n    float crs = 0.4 * col.r; // circle size\n    vec2 crp = vec2(0.5); // circle position\n    crp += rotate(vec2(.0,.5*(1.-brightness)), iTime + brightness*20.);\n    float cr = smoothstep(crs+ss,crs-ss,distance(subuv,crp));\n    \n    float cgs = 0.4 * col.g; // circle size\n    vec2 cgp = vec2(0.5); // circle position\n    cgp += rotate(vec2(.0,.5*(1.-brightness)), iTime + brightness*20. + 2.0915);\n    float cg = smoothstep(cgs+ss,cgs-ss,distance(subuv,cgp));\n    \n    float cbs = 0.4 * col.b; // circle size\n    vec2 cbp = vec2(0.5); // circle position\n    cbp += rotate(vec2(.0,.5*(1.-brightness)), iTime + brightness*20. + 4.182);\n    float cb = smoothstep(cbs+ss,cbs-ss,distance(subuv,cbp));\n    \n    // col /= subuv.xyx;\n\n    col = vec3(\n        cr * col.r,\n        cg * col.g,\n        cb * col.b\n    );\n    col *= FEEDBACK * .1;\n    vec2 feedback_uv = uv * 0.998 - vec2(0.,-0.001);\n    feedback_uv += ns * 0.002;\n    col += texture(iChannel1,feedback_uv).rgb * FEEDBACK + (ns*ns) * 0.001;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}