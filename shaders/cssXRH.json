{
    "Shader": {
        "info": {
            "date": "1668557876",
            "description": "i have no clue what is going on ",
            "flags": 0,
            "hasliked": 0,
            "id": "cssXRH",
            "likes": 3,
            "name": "circle with segments",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 137
        },
        "renderpass": [
            {
                "code": "const float n_tau = 6.283185;\nfloat f_n_dist_circle_segment(\n    //vec2 o_p_origin, \n    float n_radians_nor, \n    float n_radians_offset_nor, \n    float n_radius_nor, \n    vec2 o_pix_cor_nor\n){\n    float n_rad = n_radians_offset_nor * n_tau;\n    o_pix_cor_nor = vec2(\n            cos(n_rad)*o_pix_cor_nor.x + sin(n_rad)*o_pix_cor_nor.y,\n            -sin(n_rad)*o_pix_cor_nor.x + cos(n_rad)*o_pix_cor_nor.y\n    );\n        \n    vec2 o_p_origin = vec2(0.0); // was once used as a param, but translation can be applied by passing f(...,o_pix_cor_nor+translation)\n    float n_dist_origin = length(o_p_origin - o_pix_cor_nor);\n    vec2 o_delta = o_p_origin - o_pix_cor_nor;\n    float n_angle_origin = atan(o_delta.x , o_delta.y)+(n_tau/2.0);\n    float n_angle_origin_nor = n_angle_origin / n_tau;\n  \n    float n_dist_shortest = 1.0;\n    \n    vec2 o_p_center = o_p_origin;\n    float n_dist_origin_max = min(n_radius_nor, n_dist_origin);\n    vec2 o_p1 = vec2(\n            sin(n_tau)*n_dist_origin_max,\n            cos(n_tau)*n_dist_origin_max\n    ) + o_p_origin;\n    vec2 o_p2 = vec2(\n            sin(n_tau+ n_tau * n_radians_nor)*n_dist_origin_max,\n            cos(n_tau+ n_tau * n_radians_nor)*n_dist_origin_max\n    ) + o_p_origin;\n    float n_freq = min(n_angle_origin_nor*n_tau, n_radians_nor*n_tau);\n    \n    vec2 o_p_on_circumfence = vec2(\n            sin(n_tau+n_freq)*n_radius_nor,\n            cos(n_tau+n_freq)*n_radius_nor\n    ) + o_p_origin;\n    \n    float n_dist1 = length(o_p1-o_pix_cor_nor);\n    float n_dist2 = length(o_p2-o_pix_cor_nor);\n    float n_dist_on_circumfence = length(o_p_on_circumfence-o_pix_cor_nor);\n    \n    float n_dist = min(n_dist1, n_dist2);\n    n_dist = min(n_dist, n_dist_on_circumfence);\n\n    // o_p1 = vec2(\n    //         sin(n_tau * n_side_nor)*n_radius,\n    //         cos(n_tau * n_side_nor)*n_radius\n    // );\n    // o_p2 = vec2(\n    //         sin(n_tau * (n_side_nor+(1.0/n_sides)))*n_radius,\n    //         cos(n_tau * (n_side_nor+(1.0/n_sides)))*n_radius\n    // );\n    // vec2 o_delta2 = o_p2-o_p1;\n    // float n_m = o_delta2.y / o_delta2.x;\n    // float n_q = -(n_m*o_p1.x) + o_p1.y;\n    // float n_x = o_pix_cor_nor.x;\n    // float n_y = n_m * n_x + n_q; \n    // float n_dist4 = abs(o_pix_cor_nor.y-n_y);\n    // n_dist = min(n_dist, n_dist4);\n    \n    return n_dist;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_pix_cor_nor = (fragCoord.xy - iResolution.xy* 0.5) / iResolution.y;\n    vec2 o_mou_cor_nor = (iMouse.xy - iResolution.xy* 0.5) / iResolution.y;\n    \n    float n_sides = 54.0*o_mou_cor_nor.x;\n    vec2 o_delta = o_pix_cor_nor - 0.0;\n    \n    \n    float n_angle_norm = atan(o_delta.x , o_delta.y)+(n_tau/2.0);\n    float n_angle_origin_nor = n_angle_norm / n_tau;\n    \n    float n_side = floor(n_angle_origin_nor / (1.0/n_sides));\n    \n       \n    float n_d2 = f_n_dist_circle_segment(\n        0.2, //float n_radians_nor, \n        0.0, //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    float n_d3 = f_n_dist_circle_segment(\n        0.2, //float n_radians_nor, \n        0.2, //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    float n_d4 = f_n_dist_circle_segment(\n        0.2, //float n_radians_nor, \n        0.4, //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    float n_d5 = f_n_dist_circle_segment(\n        0.2, //float n_radians_nor, \n        0.6, //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    float n_d6 = f_n_dist_circle_segment(\n        0.2, //float n_radians_nor, \n        0.8, //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    float n_dist = min(n_d2,n_d3);\n    n_dist = min(n_dist,n_d4);\n    n_dist = min(n_dist,n_d5);\n    n_dist = min(n_dist,n_d6);\n    fragColor = vec4(sqrt((n_dist)));\n    //fragColor *= vec4(n_side/n_sides);\n    float n_d = f_n_dist_circle_segment(\n        (1./n_sides), //float n_radians_nor, \n        (1./n_sides)*(n_sides-n_side)+(0.5), //float n_radians_offset_nor, \n        0.4, \n        o_pix_cor_nor\n    );\n    fragColor = vec4(sqrt(n_d));\n    \n    //fragColor = vec4(sqrt((n_d)));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}