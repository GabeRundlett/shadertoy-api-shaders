{
    "Shader": {
        "info": {
            "date": "1700644420",
            "description": "You can move the third attractor with your mouse. Adjusting the parameters lets you discover a variety of unique patterns.\n\n\n\n\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ctGyWV",
            "likes": 17,
            "name": "Bubbly Chaos",
            "published": 3,
            "tags": [
                "fractal",
                "simulation",
                "gravity"
            ],
            "usePreview": 0,
            "username": "pajunen",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "// Bubbly Chaos\n//\n// This program simulates the motion of a small-mass body released\n// at the \"fragCoord\" position. The body's position is updated iteratively\n// based on the gravitational pull of three attractors. In each iteration,\n// we determine the closest attractor and retrieve its associated color.\n// The final pixel color is then calculated by taking the weighted average\n// of the attractor colors along the path of the moving body.\n//\n// Inspired by this video:\n// The relationship between chaos, fractal and physics:\n// https://www.youtube.com/watch?v=C5Jkgvw-Z6E&t=336s\n\nconst float EPSILON    = 1.e-3;\nconst float G          = 1.e3;                 // Gravity strength\nconst float M_BODY     = 1.;                   // Mass of the simulated body\nconst float M_A1       = 1.;                   // Mass of attractor 1\nconst float M_A2       = 1.;                   // Mass of attractor 2\nconst float M_A3       = 1.;                   // Mass of attractor 3\nconst vec3  C1         = vec3(0.5, 0.2, 0.25); // Color of attractor 1\nconst vec3  C2         = vec3(0.2, 0.3, 0.8);  // Color of attractor 2\nconst vec3  C3         = vec3(1.0, 0.3, 0.1);  // Color of attractor 3\nconst float SPEED      = 5.e-2;                // Controls the speed of the attractors\nconst float SCALE      = 5.0;                  // Controls how zoomed in the view is\nconst float EXPOSURE   = 40.0;                 // Controls the brightness\nconst float Z_DISTANCE = 1.0;                  // Min distance between any attractor and body\nconst float DURATION   = 1000.0;               // Simulation duration\nconst float TS_FACTOR  = 8.0;                  // Scale for adaptive time step\n// #define SHOW_ATTRACTORS                     // Toggle attractor positions\n\nvec2 A1;\nvec2 A2;\nvec2 A3;\n\nfloat d2(vec2 A, vec2 B) {\n  vec2 C = A - B;\n  return dot(C, C);\n}\n\nfloat d2(vec3 A, vec3 B) {\n  vec3 C = A - B;\n  return dot(C, C);\n}\n\nvec2 get_acceleration(vec2 s) {\n    vec3  d_1      = vec3(A1 - s, Z_DISTANCE);\n    float r2_1     = dot(d_1,d_1);\n    vec2  u_proj_1 = (d_1 / sqrt(r2_1)).xy;\n    \n    vec3  d_2      = vec3(A2 - s, Z_DISTANCE);\n    float r2_2     = dot(d_2,d_2);\n    vec2  u_proj_2 = (d_2 / sqrt(r2_2)).xy;\n    \n    vec3  d_3      = vec3(A3 - s, Z_DISTANCE);\n    float r2_3     = dot(d_3,d_3);\n    vec2  u_proj_3 = (d_3 / sqrt(r2_3)).xy;\n    \n    vec2 a = vec2(0.);\n    a += u_proj_1 * M_A1 / r2_1;\n    a += u_proj_2 * M_A2 / r2_2;\n    a += u_proj_3 * M_A3 / r2_3;\n    \n    return G * a;\n}\n\n// Set of differential equations defining\n// the motion of the simulated body\nvoid body_ode(in vec2[2] y, out vec2[2] dydt) {\n  dydt[0] = y[1]; \n  dydt[1] = get_acceleration(y[0]);\n}\n\n// 4th order runge kutta solver\nvoid rk4(float h, inout vec2[2] y1) {\n  vec2[2] k1, k2, k3, k4;\n  body_ode(y1, k1);\n  vec2[2] y2;\n  y2[0] = y1[0] + .5 * h * k1[0];\n  y2[1] = y1[1] + .5 * h * k1[1];\n  body_ode(y2, k2);\n  vec2[2] y3;\n  y3[0] = y1[0] + .5 * h * k2[0];\n  y3[1] = y1[1] + .5 * h * k2[1];\n  body_ode(y3, k3);\n  vec2[2] y4;\n  y4[0] = y1[0] + .5 * h * k3[0];\n  y4[1] = y1[1] + .5 * h * k3[1];\n  body_ode(y4, k4);\n  y1[0] += 0.1666 * h * (k1[0] + 2. * k1[0] + 2. * k2[0] + k3[0]);\n  y1[1] += 0.1666 * h * (k1[1] + 2. * k1[1] + 2. * k2[1] + k3[1]);\n}\n\nvec3 get_closest_attractor_color(vec2 pos) {\n  float d2_A1 = d2(pos, A1);\n  float d2_A2 = d2(pos, A2);\n  float d2_A3 = d2(pos, A3);\n\n  if(d2_A1 < d2_A2 && d2_A1 < d2_A3)\n    return C1 / (d2_A1 * d2_A1 + EPSILON);\n\n  if(d2_A2 < d2_A3)\n    return C2 / (d2_A2 * d2_A2 + EPSILON);\n\n  return C3 / (d2_A3 * d2_A3 + EPSILON);\n}\n\n// Adhoc adaptive time step loosely\n// based on gravitational potential.\nfloat compute_h(vec2 pos) {\n  vec3 pos3d = vec3(pos, 0);\n\n  float t1 = M_A1 / d2(pos3d, vec3(A1, Z_DISTANCE));\n  float t2 = M_A2 / d2(pos3d, vec3(A2, Z_DISTANCE));\n  float t3 = M_A3 / d2(pos3d, vec3(A3, Z_DISTANCE));\n  \n  float V = (G * (t1 + t2 + t3)); // gravitational potential ish...\n\n  return TS_FACTOR / V;\n}\n\nvec3 get_color(vec2 initial_pos) {\n  vec2[2] y;\n  y[0] = initial_pos;\n  y[1] = vec2(0., 0.0);\n\n  vec3 color = vec3(0);\n\n  float t = 0.;\n  while(t < DURATION) {\n    float h = compute_h(y[0]);\n    rk4(h, y);\n    color += h * get_closest_attractor_color(y[0]);\n    t += h;\n  }\n  \n  return color / DURATION;\n}\n\nvec2 unit_vec(float angle) {\n  return vec2(cos(angle), sin(angle));\n}\n\nvec3 normalize_color(vec3 raw) {\n  return 2.0 / (exp(-EXPOSURE * raw) + 1.0) - 1.0;\n}\n\nvec2 normalize_fragcoord(vec2 frag_coord) {\n  return ((frag_coord / iResolution.x) - 0.5 * vec2(1.0, iResolution.y / iResolution.x)) * SCALE;\n}\n\nvoid init_attractors() {\n  A1 = sin(-iTime * SPEED * 3.0) * unit_vec(-iTime * SPEED * 11.0);\n  A2 = 1.2 * unit_vec(iTime * SPEED * 5.0);\n  A3 = normalize_fragcoord(iMouse.xy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {    \n  init_attractors();\n\n  vec2 pos = normalize_fragcoord(fragCoord);\n\n  vec3 col = get_color(pos);\n  col = normalize_color(col);\n\n  #ifdef SHOW_ATTRACTORS\n    if(d2(A1, pos) < 0.0025)\n      col = C1;\n    if(d2(A2, pos) < 0.0025)\n      col = C2;\n    if(d2(A3, pos) < 0.0025)\n      col = C3;\n  #endif\n\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}