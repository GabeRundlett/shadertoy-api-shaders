{
    "Shader": {
        "info": {
            "date": "1528017702",
            "description": "Mouse moves the camera a little",
            "flags": 0,
            "hasliked": 0,
            "id": "XddcWl",
            "likes": 15,
            "name": "Creepy Tunnel",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 717
        },
        "renderpass": [
            {
                "code": "// Thanks iq and Shane and dila\n\n#define EPS        0.001\n#define STEPS        256\n#define FAR         100.\n#define PI  acos( -1.0 )\n#define TPI     PI * 2.0\n#define HASHSCALE  .1031\n#define tim           5.\n// Comment the next line to get faster rendering\n// the problem is that it does not look as good, \n// it has some jittering\n#define PROCEDURAL\n\n// https://www.shadertoy.com/view/4djSRW\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// iq's\n\n#ifdef PROCEDURAL\n\nfloat noise( in vec3 x )\n{\n    \n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n#else\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n#endif\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\n// https://www.shadertoy.com/view/MlXSWX\n\nvec2 path(in float z)\n{\n    float a = 54.0;\n    float b = a * 0.5;\n    float s = sin(z/a)*cos(z/b); return vec2(s*b, 0.);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n               );\n    \n}\n\nvec2 map( vec3 p )\n{\n\n    /*vec2 tun = abs(p.xy-fbm(p))*vec2(0.5, 0.1071);\n    float n = 1. - max(tun.x, tun.y) + (0.5);\n    return min(n, p.y + fbm(p));*/\n    \n    vec3 pO = vec3( 0.0, 0.0, -iTime * tim - 0.9 );\n    pO.xy += path( pO.z );\n    \n    vec2 sph = vec2( length( p - pO ) - 0.3 - fbm( p - pO + iTime ) * 0.1, 0.0 );\n    \n    float tun = length( p.xy - path( p.z ) ) - 12.0;\n    float dif = length( p.xy - path( p.z ) ) - 6.5;\n    float fina = max( tun, -dif );\n    vec2 fin = vec2( fina - fbm( p + iTime ) * 2.0, 1.0 );\n    \n    if( sph.x < fin.x ) fin = sph;\n    \n    return fin;\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          ) );\n    \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t ).x;\n        if( h < EPS ) return 0.0;\n        res = min( res, 2.0 * h / t );\n        \n        t += h;\n    \n    }\n    \n    return res;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd, float t )\n{\n\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 lig = normalize( vec3( 0.0, 0.0, -iTime * tim ) );\n    lig.xy += path( lig.z );\n    vec3 ref = reflect( rd, n );\n    vec3 col = vec3( 0.0 );\n    //vec3 ref = texture( iChannel0, reflect( rd, n ) ).xyz;\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float rim = pow( 1.0 + dot( n, rd ), 2.0 );\n    \n    col += 0.4 * amb;\n    col += 0.2 * dif * sha;\n    col += 0.15 * spe;\n    col += 0.1 * rim;\n    \n    if( map( p ).y == 1.0 )\n    {\n    \n    \tcol += mix( vec3( 0.3, 0.1, 0.0 ), vec3( 0.0, 0.1, 0.2 ), fbm( p + iTime ) );\n    \n    }\n    \n    if( map( p ).y == 0.0 )\n    {\n    \n    \tcol *= vec3( 0 );\n    \n    }\n    \n    col *= vec3( 16.0 / ( 16.0 + t * t * 0.05 ) );\n    col /= vec3( 0.05 * ( 9.0 + t * t * 0.05 ) );\n    \n    col *= sqrt( col );\n    \n    return col;\n    \n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0; d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    vec2 mou = iMouse.xy / iResolution.xy;\n     \n    vec3 ro = vec3( 0.0, 0.0, -iTime * tim );\n    vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    ro.xy += path( ro.z );\n    rd.zx *= rot( path(ro.z).x / -1000.0 );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n\tvec3 col = d < EPS ? shad( ro, rd, t ) : vec3( 1.0 );\n    \n    if( map( p ).y == 0.0 )\n    {\n\n    \trd = normalize( reflect( rd, n ) );\n    \tro = rd * EPS;\n\n        if( d < EPS )\n        {\n            \n            col += shad( ro, rd, t ) * 0.3;\n            \n        }\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}