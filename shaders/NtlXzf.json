{
    "Shader": {
        "info": {
            "date": "1626233430",
            "description": "This shader looks really good and runs pretty fast!",
            "flags": 0,
            "hasliked": 0,
            "id": "NtlXzf",
            "likes": 11,
            "name": "Zi7ar21's KIFS",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "ray",
                "raymarch",
                "raymarched",
                "raymarcher",
                "kifs",
                "march"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "// ####### Zi7ar21's KIFS #######\n// Made by Jacob Bingham (Zi7ar21) on July 13th, 2021\n\n// Last Updated on July 13th, 2021 at 21:20 Mountain Standard Time\n\n// If you found this anywhere except Shadertoy, the original and possibly updated version can be found at:\n// https://www.shadertoy.com/view/NtlXzf\n\n// \"License\":\n// You can use this code in any way you want, as long as you keep credits to things that aren't mine\n// e.g. Triple32: https://nullprogram.com/blog/2018/07/31/\n// We are programmers, not lawyers! :)\n\n/*\nIt's crazy just how simple a KIFS fractal is!\n\nFeatures:\n- KIFS Fractal\n- Ray-Marching\n- Soft Shadows\n- Glow\n- Orbit Trap Colors\n- Animation\n*/\n\n// Check out my friends!\n// michael0884\n// https://www.shadertoy.com/user/michael0884\n// loicvdb\n// https://www.shadertoy.com/user/loicvdb\n// Dumb_Psycho\n// https://www.shadertoy.com/user/Dumb_Psycho\n// peabrainiac\n// https://www.shadertoy.com/user/peabrainiac\n\n// ##### Parameters #####\n\n// Camera Field of View\n#define camfov 1.0\n\n// Tonemap Exposure\n#define exposure 1.0\n\n// Maximum Ray-Marching Steps\n#define maxStep 128\n\n// Distance Considered a Collision\n#define hitDist 1E-3\n\n// Maximum Ray-Marching Distance\n#define maxDist 4.0\n\n// Maximum Shadow Ray Distance\n#define shadowDist 2.0\n\n// ##### Preprocessor #####\n\n// I don't know if I am using these properly so I will leave them disabled by default\n//#pragma optimize(on)\n//#pragma debug(off)\n\n// ##### Constants #####\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.141592653589793\n\n// Traditional Uniform Identifiers\n#define resolution iResolution\n#define frame iFrame\n#define time iTime\n//#define time (float(frame)/60.0)\n//#define time 0.0\n\n// ##### Rendering #####\n\n// Rotate a 3-Component Vector\nvec3 rotate(vec3 vec, vec3 rot)\n{\n    vec3 s = sin(rot), c = cos(rot);\n\n    mat3 rotx = mat3(\n    1.0, 0.0, 0.0,\n    0.0, c.x,-s.x,\n    0.0, s.x, c.x);\n    mat3 roty = mat3(\n    c.y, 0.0,-s.y,\n    0.0, 1.0, 0.0,\n    s.y, 0.0, c.y);\n    mat3 rotz = mat3(\n    c.z,-s.z, 0.0,\n    s.z, c.z, 0.0,\n    0.0, 0.0, 1.0);\n\n    mat3 rotmat = rotx*roty*rotz;\n\n    /*\n    rotmat[0] = normalize(rotmat[0]);\n    rotmat[1] = normalize(rotmat[1]);\n    rotmat[2] = normalize(rotmat[2]);\n    */\n\n    return (vec.x*rotmat[0])+(vec.y*rotmat[1])+(vec.z*rotmat[2]);\n}\n\n// Root Object SDF\nfloat SDF(vec3 pos)\n{\n    // Sphere\n    //return length(pos)-1.0;\n\n    // Cube\n    //pos = abs(pos);\n    return max(max(pos.x, pos.y), pos.z)-1.0;\n}\n\n// Zi7ar21's KIFS SDF: https://www.shadertoy.com/view/NtlXzf\nfloat DE(in vec3 pos, out vec3 orbitTrap)\n{\n    // Fractal Parameters\n    vec3 rot = mod(vec3(time*pi*0.05, -0.5+(time*pi*0.023), 0.3+(time*pi*0.03)), 2.0);\n    //const vec3 rot = vec3(-0.6, -0.5, 0.3);\n    const vec3 translate = vec3(-0.1, -0.23, -0.17);\n    const float scale = 1.3;\n\n    // Set-Up Variables\n    orbitTrap = vec3(10.0);\n    float t = 1.0;\n\n    // Iterate the Fractal\n    for(int i = 0; i < 16; i++)\n    {\n        // Scale\n        pos *= scale;\n        t *= scale;\n\n        // Rotate\n        pos = rotate(pos, rot*pi);\n\n        // Mirror\n        pos = abs(pos);\n\n        // Orbit Trap\n        orbitTrap = min(pos, orbitTrap);\n\n        // Translate\n        pos += translate;\n    }\n\n    // Return the Distance Estimate\n    return SDF(pos)/t;\n}\n\n// SDF Tetrahedron Numerical Normals\nvec3 sampleNormal(vec3 pos)\n{\n    const vec2 k = vec2(-1.0, 1.0);\n    vec3 n;\n    return normalize(\n    k.xxx*DE(pos+k.xxx*hitDist, n)+\n    k.xyy*DE(pos+k.xyy*hitDist, n)+\n    k.yxy*DE(pos+k.yxy*hitDist, n)+\n    k.yyx*DE(pos+k.yyx*hitDist, n));\n}\n\n// Distance Estimator Soft Shadows\nfloat sampleLight(vec3 ro, vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0;\n    float ph = 1E4;\n    vec3 n;\n    for(int i = 0; i < maxStep; i++)\n    {\n        float h = DE(ro+rd*t, n);\n        float y = i == 0 ? 0.0 : h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n\n        res = min(res, 10.0*d/max(0.0, t-y));\n\n        t += h;\n\n        if(res < hitDist || t > shadowDist){break;}\n    }\n\n    res = clamp(res, 0.0, 1.0);\n\n    return res*res*(3.0-2.0*res);\n}\n\n// Intersection Structure\nstruct intersection {\n    float tMin;\n    float tMax;\n    bool hit;\n    bool expire;\n    vec3 normal;\n    vec3 albedo;\n    vec3 emission;\n};\n\n// Ray-Marching\nintersection trace(vec3 ro, vec3 rd)\n{\n    // Set-Up Variables\n    float t = 0.0;\n    vec3 emission = vec3(0.0);\n    vec3 color = vec3(0.0);\n\n    // Ray-Marching\n    for(int i = 0; i < maxStep; i++)\n    {\n        // Check if the Ray \"Hit\" the Background\n        if(t > maxDist)\n        {\n            // Return the Intersection Data\n            return intersection(-1.0, -1.0, false, false, vec3(0.0), vec3(1.0, 0.0, 1.0), emission);\n        }\n\n        float td = DE(ro+rd*t, color);\n\n        // Check if the Ray Hit the Scene\n        if(td < hitDist)\n        {\n            // Return the Intersection Data\n            return intersection(t, -1.0, true, false, sampleNormal(ro+rd*t), clamp(color*10.0, 0.0, 1.0), emission);\n        }\n\n        // Add to Glow\n        emission += max(exp(-td*10.0), 0.0)*0.03;\n\n        // \"March\" the Ray\n        t += td;\n    }\n\n    // Ray Expired (Increase maxStep!)\n    return intersection(-1.0, -1.0, false, true, vec3(0.0), vec3(1.0, 0.0, 1.0), vec3(0.0));\n}\n\n// Rendering\nvec3 radiance(vec3 ro, vec3 rd)\n{\n    // Compute the Intersection\n    intersection t = trace(ro, rd);\n\n    // If the Ray expired, output Debug Magenta color\n    if(t.expire)\n    {\n        // Magenta/Cyan Pattern\n        //return int(gl_FragCoord.x+gl_FragCoord.y)/4 % 2 == 0 ? vec3(10.000, 00.000, 10.000) : vec3(00.000, 10.000, 10.000);\n\n        // Magenta\n        return vec3(100.0, 0.0, 100.0);\n    }\n\n    // If the Ray never hit anything, output the background color\n    if(!t.hit)\n    {\n        return vec3(0.000, 0.000, 0.000)+t.emission;\n    }\n\n    // Light Direction\n    const vec3 lightDirection = vec3(0.577350269189626, 0.577350269189626, 0.577350269189626);\n\n    // Compute Lighting\n    float lighting0 = sampleLight(ro+rd*t.tMin, lightDirection);\n    float lighting1 = max(dot(t.normal, lightDirection), 0.0)*0.95;\n    float lighting2 = max(dot(t.normal,-lightDirection), 0.0)*0.15;\n\n    // Output the Final Color\n    return t.albedo*lighting0*(lighting1+lighting2+0.05)+t.emission;\n}\n\n// Render and Output the Frame\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen UV Coordinates\n    vec2 uv = 2.0*(gl_FragCoord.xy-0.5*resolution.xy)/max(resolution.x, resolution.y);\n\n    // Set-Up Camera\n    const vec3 ro = vec3(0.0, 0.0, 2.0);\n    const mat3 rotmat = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    vec3 rd = normalize(vec3(camfov*uv, -1.0)*rotmat);\n\n    // Render the Frame\n    vec3 color = radiance(ro, rd);\n\n    // HDR Tonemapping\n    color = clamp(1.0-exp(-max(color, 0.0)*exposure), 0.0, 1.0);\n\n    // Output the Rendered Frame\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}