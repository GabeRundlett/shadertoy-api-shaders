{
    "Shader": {
        "info": {
            "date": "1609608825",
            "description": "algorithmic drawing about basic linear interpolation ",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3cRf",
            "likes": 2,
            "name": "linear interpolation",
            "published": 3,
            "tags": [
                "learn"
            ],
            "usePreview": 0,
            "username": "bbsuuo",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "float PI = 3.1415926;\n\nfloat plot(vec2 uv,float pct){\n return smoothstep(pct - 0.01,pct, uv.y) - smoothstep(pct ,pct + 0.01,uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy)/(iResolution.xy);\n    //functuon y = x , you cang change func(y)\n    float y = uv.x;\n    //float y = step(0.5,uv.x);\n    //float y =   smoothstep(0.4,0.5,uv.x) - smoothstep(0.5,0.6,uv.x);\n    //float y = mod(uv.x,0.5);\n    //float y = fract(uv.x);\n    //float y = ceil(uv.x);\n    //float y = floor (uv.x);\n    //float y = abs(uv.x);\n    //float y = clamp(0.5,0.6,uv.x);  \n    //float y = min(uv.x,0.2);\n    //float y = max(uv.x,0.2);\n    //float y = sin((uv.x  +iTime)*PI) * 0.5 +0.5;\n    //float y = cos((uv.x  +iTime)*PI) * 0.5 +0.5;  \n    //float y = 1.0;\n    vec3 color = vec3(y); \n    //plot a line\n    float pct = plot(uv,y); \n    //line color\n    vec3 green = vec3(0.0,1.0,0.0); \n    //render line and color\n    color = (1.0 - pct) * color +  pct * green;\n   \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}