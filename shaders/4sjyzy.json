{
    "Shader": {
        "info": {
            "date": "1492614943",
            "description": " more simplified (barely less general) version of \nhttps://www.shadertoy.com/view/XsjyRy\n\nmouse.y= something something brightness something\nmouse to right=AO [q] || mouse to left = WRONG color [c]\nthis is not what i want it to be, but pretty close to it.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sjyzy",
            "likes": 22,
            "name": "volumetric reflecting laser",
            "published": 3,
            "tags": [
                "reflection",
                "lines",
                "light",
                "volumetric",
                "ao",
                "laser",
                "neon"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1688
        },
        "renderpass": [
            {
                "code": "//inversion and simplifying substiturion of\n//https://www.shadertoy.com/view/XsjyRy\n\n//i wanted to have colored ao, but all i got was a mix of 2 mutually exclusive things:\n\n#define t iTime\n#define phi (2.*sqrt(5.)*.5+.5)\n#define co(a) (cos(a)*.3+.6)\n\n//#define ScaleBright co(t*phi)\n#define ScaleBright (.5+iMouse.y*9./iResolution.y)\n\n#define bidpScale co(t)*ScaleBright;\n//#define bidpScale .5;\n\n//sharpness\n#define  falloffDist (1.0*ScaleBright)\n\n#define pows pow(e,.1/ScaleBright)\n\n//is lineAO2() of https://www.shadertoy.com/view/XsjyRy\nfloat lineAO(vec2 p,vec2 a,vec2 b){\n vec2 d=normalize(a-b);\n vec2 r=vec2(-d.y,d.x);\n vec2 c=normalize(a-p);\n float f=dot(normalize(a-p ),normalize(b-p));\n float e=clamp(abs(dot(r,a-p))/falloffDist,0.,1.);\n return 1.+(1.-pows)*(f-1.)*bidpScale;\n}\n\n//coloring lineAO()\nfloat lineAOv(vec2 p,vec2 a,vec2 b){\n   vec3 c=vec3(1);\n  return lineAO(p,a,b);}\n //return lineAO(p,a,b)+(-c+vec3(1.));}\n               \n\n\n//coloring lineAO()\nvec3 lineAOc(vec2 p,vec2 a,vec2 b,vec3 c){\n //c=vec3(1);//overwrite color with monochrome\n return lineAO(p,a,b)+(-c+vec3(1.));}\n            \n\nvec2 frame(vec2 p){\n p-=iResolution.xy*.5;\n p/=iResolution.xy; \n p.x*=iResolution.x/iResolution.y;\n return p;}\n\n//coloring lineAO()\nvec3 lineAOf(vec2 p,vec2 a,vec2 b,vec3 c){\n return vec3(\n  lineAO(p,a,b)*c.x\n ,lineAO(p,a,b)*c.y\n ,lineAO(p,a,b)*c.z);}\n\nvoid  qc(in vec2 u,inout vec3 f,inout vec3 c,inout vec3 q,vec2 a,vec2 b,vec3 d){\n  q*=      lineAOv(u,a,b  ) ;\n  f*=      lineAOf(u,a,b,f) ;\n  c =min(c,lineAOc(u,a,b,d));}\n\n//#define max3(a) max(max(a.x,a.y),a.z)\n//#define min3(a) min(min(a.x,a.y),a.z)\n\nvoid mainImage( out vec4 fragColor, in vec2 In ){\n    vec2 u=frame(In);\n\tvec3 q=vec3(1.);\n\tvec3 c=vec3(1.);\n\tvec3 f=vec3(1.);\n    //dodo, a loop with reflect()\n    qc(u,f,c,q,vec2(0      ),vec2( .1, .2),vec3(0,1,1) );\n        \n    qc(u,f,c,q,vec2( .2, .2),vec2( .1, .2),vec3(1,1,0) );\n    \n\tqc(u,f,c,q,vec2( .2, .2),vec2( .4, .0),vec3(1,0,0) );\n\t\n    qc(u,f,c,q,vec2( .1,-.4),vec2( .4, .0),vec3(0,1,1) );\n\tqc(u,f,c,q,vec2( .1,-.4),vec2(-.2,-.4),vec3(0,0,1) );\n\tqc(u,f,c,q,vec2(-.4,-.3),vec2(-.2,-.4),vec3(1,1,1) );\n    qc(u,f,c,q,vec2(-.4,-.3),vec2(-.1)    ,vec3(0,1,0) );\n    qc(u,f,c,q,vec2(-.4, .0),vec2(-.1)    ,vec3(1,0,1) );\n\tqc(u,f,c,q,vec2(-.4, .0),vec2(-.4, .3),vec3(1,0,0) );\n    qc(u,f,c,q,vec2(-.1, .3),vec2(-.4, .3),vec3(0,0,1) );\n\tqc(u,f,c,q,vec2(-.1, .3),vec2(0      ),vec3(1,1,1) );\n/**/\n    \n    //c additively       calculates color without AO\n    //q multiplicatively calculates AO    without color\n    //a mix() of the 2 was the best union i could do.\n    //i suchk at AO!\n    \n    //i kept trying to mix them internally with [f] but that fails.\n    \n    q=clamp(q,0.,1.);//uneccessary\n    c=clamp(c,0.,1.);//uneccessary\n    vec3 o=1.-q;//closest to https://www.shadertoy.com/view/XsjyRy\n    //but i anted to colorize it, which is not too simple:\n    //q=1.-c;\n    q=max(1.-c,o*iMouse.x/iResolution.x);\n    //q=min(1.-c,1.-q);\n    \n    //occlusion has no color :\n    //q=mix(q,o,.7);//not corrct, but a decent enough illusion?\n    \n    //q=1.-q;//inversion to make \"AO\"\n\tfragColor = vec4(q,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}