{
    "Shader": {
        "info": {
            "date": "1464386396",
            "description": "ncl00: Just What You've Come to Expect From Us\n2nd place in the PC Demo compo at @party 2016\nThe first demo release by Incline\ncode: cxw\nbeats: makro\nsupport: phrank",
            "flags": 8,
            "hasliked": 0,
            "id": "lsySDD",
            "likes": 1,
            "name": "ncl00 - party version",
            "published": 3,
            "tags": [
                "scroller",
                "compo",
                "atparty",
                "2016",
                "incline"
            ],
            "usePreview": 1,
            "username": "cxw",
            "viewed": 1164
        },
        "renderpass": [
            {
                "code": "//multipart.frag by cxw/incline.  CC-BY-SA 3.0\n\n// play it safe.\nprecision highp int;\nprecision highp float;\n    // per https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\n    // sec. 4.5.3, these precisions also cover vectors and matrices.\n\n// CONFIG /////////////////////////////////////////////\n// {{{1\n\n#define S_SINE_FREQ (0.02380952380952380952380952380952)\n    // 1/42.  sine letter frequency in cycles per X unit.\n#define S_SINE_GROUP_FREQ (0.03125)\n    // 1/32.  sine group frequency.  If > S_SINE_FREQ, sine gradually\n    // shifts right on screen.\n#define CYL_RADIUS (15.0)\n    // radius of the cylinder for CYL and later parts\n#define TUNNEL_ACCEL (17.0)\n    // Acceleration during TUNNEL, in x units per sec^2\n#define CUBE_FADEIN_TIME (3.0)\n    //fadein in seconds\n\n#define TWOSIDED_RATE (0.3)\n    // how fast you go back and forth\n\n#define PI (3.1415926535897932384626433832795028841971)\n    // from memory :)\n# define TWO_PI (6.283185307179586)\n#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)\n    // not from memory :) :)\n// }}}1\n\n// MESSAGE ////////////////////////////////////////////\n// Between the cutbegin and cutend lines, paste the output of make-message.py\n// {{{1\n// --- VVV cutbegin ---\n// Parts and start times\n#define NOP (0.0)\n#define NOP_START (0.00000000000000000000)\n#define S_PLAIN (1.0)\n#define S_PLAIN_START (1.00000000000000000000)\n#define STARWARS (2.0)\n#define STARWARS_START (23.25000000000000000000)\n#define S_ZOOM (3.0)\n#define S_ZOOM_START (49.36945789249084270978)\n#define S_ROTO (4.0)\n#define S_ROTO_START (73.61945789249084270978)\n#define BOLD (5.0)\n#define BOLD_START (89.61945789249084270978)\n#define CYL (6.0)\n#define CYL_START (95.61945789249084270978)\n#define TUNNEL (7.0)\n#define TUNNEL_START (104.61945789249084270978)\n#define S_SINE (8.0)\n#define S_SINE_START (114.61945789249084270978)\n#define TWOSIDED (9.0)\n#define TWOSIDED_START (135.11945789249085692063)\n#define S_PLASMA (10.0)\n#define S_PLASMA_START (159.11945789249085692063)\n#define CUBE (11.0)\n#define CUBE_START (184.61945789249085692063)\n\nvec4 get_story(in float time)\n{   //returns vec4(partnum, charidx_frac, first_charidx, clip_charidx)\n    // NOTE: charidx_frac restarts at 0 each part!\n    // Character indices starting with clip_charidx should not be displayed.\n    float partnum, charidx_frac, first_charidx, clip_charidx;\n    if(time<1.00000000000000000000) {\n        partnum=NOP;\n        charidx_frac=(time-NOP_START)*1.00000000000000000000;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    } else\n\n    if(time<23.25000000000000000000) {\n        partnum=S_PLAIN;\n        charidx_frac=(time-S_PLAIN_START)*4.00000000000000000000;\n        first_charidx=0.0;\n        clip_charidx=80.0;\n    } else\n\n    if(time<49.36945789249084270978) {\n        partnum=STARWARS;\n        charidx_frac=(time-STARWARS_START)*2.71828000000000002956;\n        first_charidx=89.0;\n        clip_charidx=159.0;\n    } else\n\n    if(time<73.61945789249084270978) {\n        partnum=S_ZOOM;\n        charidx_frac=(time-S_ZOOM_START)*4.00000000000000000000;\n        first_charidx=160.0;\n        clip_charidx=249.0;\n    } else\n\n    if(time<89.61945789249084270978) {\n        partnum=S_ROTO;\n        charidx_frac=(time-S_ROTO_START)*4.00000000000000000000;\n        first_charidx=257.0;\n        clip_charidx=317.0;\n    } else\n\n    if(time<95.61945789249084270978) {\n        partnum=BOLD;\n        charidx_frac=(time-BOLD_START)*2.33333333333333348136;\n        first_charidx=321.0;\n        clip_charidx=325.0;\n    } else\n\n    if(time<104.61945789249084270978) {\n        partnum=CYL;\n        charidx_frac=(time-CYL_START)*4.00000000000000000000;\n        first_charidx=335.0;\n        clip_charidx=364.0;\n    } else\n\n    if(time<114.61945789249084270978) {\n        partnum=TUNNEL;\n        charidx_frac=(time-TUNNEL_START)*1.00000000000000000000;\n        first_charidx=371.0;\n        clip_charidx=371.0;\n    } else\n\n    if(time<135.11945789249085692063) {\n        partnum=S_SINE;\n        charidx_frac=(time-S_SINE_START)*4.00000000000000000000;\n        first_charidx=371.0;\n        clip_charidx=448.0;\n    } else\n\n    if(time<159.11945789249085692063) {\n        partnum=TWOSIDED;\n        charidx_frac=(time-TWOSIDED_START)*4.00000000000000000000;\n        first_charidx=453.0;\n        clip_charidx=545.0;\n    } else\n\n    if(time<184.61945789249085692063) {\n        partnum=S_PLASMA;\n        charidx_frac=(time-S_PLASMA_START)*4.00000000000000000000;\n        first_charidx=549.0;\n        clip_charidx=646.0;\n    } else\n\n    if(time<1184.61945789249080007721) {\n        partnum=CUBE;\n        charidx_frac=(time-CUBE_START)*0.00700000000000000015;\n        first_charidx=651.0;\n        clip_charidx=658.0;\n    } else\n\n    {\n        partnum=0.0;\n        charidx_frac=0.0;\n        first_charidx=0.0;\n        clip_charidx=0.0;\n    }\n\n    return vec4(partnum,charidx_frac,first_charidx,clip_charidx);\n} //get_story\n\nfloat get_seg_mask(float charidx)\n{\n    if(charidx>=658.0) return 0.0; //blank at the end\n    if(charidx>=329.0){\n        if(charidx>=493.0){\n            if(charidx>=575.0){\n                if(charidx>=616.0){\n                    if(charidx>=637.0){\n                        if(charidx>=647.0){\n                            if(charidx>=652.0){\n                                if(charidx>=655.0){\n                                    if(charidx>=657.0) return 187.0;\n                                    if(charidx>=656.0) return 11.0;\n                                    if(charidx>=655.0) return 21.0;\n                                }else{\n                                    if(charidx>=654.0) return 18.0;\n                                    if(charidx>=653.0) return 19.0;\n                                    if(charidx>=652.0) return 11.0;\n                                }\n                            }else{\n                                if(charidx>=649.0){\n                                    if(charidx>=651.0) return 21.0;\n                                    if(charidx>=649.0) return 0.0;\n                                }else{\n                                    if(charidx>=647.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=642.0){\n                                if(charidx>=644.0){\n                                    if(charidx>=646.0) return 0.0;\n                                    if(charidx>=645.0) return 118.0;\n                                    if(charidx>=644.0) return 11.0;\n                                }else{\n                                    if(charidx>=643.0) return 123.0;\n                                    if(charidx>=642.0) return 3.0;\n                                }\n                            }else{\n                                if(charidx>=639.0){\n                                    if(charidx>=641.0) return 114.0;\n                                    if(charidx>=640.0) return 59.0;\n                                    if(charidx>=639.0) return 0.0;\n                                }else{\n                                    if(charidx>=638.0) return 178.0;\n                                    if(charidx>=637.0) return 3.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=626.0){\n                            if(charidx>=631.0){\n                                if(charidx>=634.0){\n                                    if(charidx>=636.0) return 27.0;\n                                    if(charidx>=634.0) return 59.0;\n                                }else{\n                                    if(charidx>=633.0) return 26.0;\n                                    if(charidx>=632.0) return 211.0;\n                                    if(charidx>=631.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=628.0){\n                                    if(charidx>=630.0) return 27.0;\n                                    if(charidx>=629.0) return 3.0;\n                                    if(charidx>=628.0) return 118.0;\n                                }else{\n                                    if(charidx>=627.0) return 123.0;\n                                    if(charidx>=626.0) return 15.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=621.0){\n                                if(charidx>=623.0){\n                                    if(charidx>=625.0) return 0.0;\n                                    if(charidx>=624.0) return 211.0;\n                                    if(charidx>=623.0) return 178.0;\n                                }else{\n                                    if(charidx>=622.0) return 123.0;\n                                    if(charidx>=621.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=618.0){\n                                    if(charidx>=620.0) return 242.0;\n                                    if(charidx>=619.0) return 0.0;\n                                    if(charidx>=618.0) return 30.0;\n                                }else{\n                                    if(charidx>=617.0) return 124.0;\n                                    if(charidx>=616.0) return 19.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=595.0){\n                        if(charidx>=605.0){\n                            if(charidx>=610.0){\n                                if(charidx>=613.0){\n                                    if(charidx>=615.0) return 0.0;\n                                    if(charidx>=614.0) return 187.0;\n                                    if(charidx>=613.0) return 248.0;\n                                }else{\n                                    if(charidx>=612.0) return 27.0;\n                                    if(charidx>=611.0) return 19.0;\n                                    if(charidx>=610.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=607.0){\n                                    if(charidx>=609.0) return 16.0;\n                                    if(charidx>=607.0) return 235.0;\n                                }else{\n                                    if(charidx>=606.0) return 18.0;\n                                    if(charidx>=605.0) return 19.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=600.0){\n                                if(charidx>=602.0){\n                                    if(charidx>=604.0) return 11.0;\n                                    if(charidx>=602.0) return 0.0;\n                                }else{\n                                    if(charidx>=601.0) return 258.0;\n                                    if(charidx>=600.0) return 243.0;\n                                }\n                            }else{\n                                if(charidx>=597.0){\n                                    if(charidx>=599.0) return 72.0;\n                                    if(charidx>=598.0) return 235.0;\n                                    if(charidx>=597.0) return 185.0;\n                                }else{\n                                    if(charidx>=596.0) return 0.0;\n                                    if(charidx>=595.0) return 11.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=585.0){\n                            if(charidx>=590.0){\n                                if(charidx>=592.0){\n                                    if(charidx>=594.0) return 21.0;\n                                    if(charidx>=593.0) return 0.0;\n                                    if(charidx>=592.0) return 211.0;\n                                }else{\n                                    if(charidx>=591.0) return 118.0;\n                                    if(charidx>=590.0) return 3.0;\n                                }\n                            }else{\n                                if(charidx>=587.0){\n                                    if(charidx>=589.0) return 27.0;\n                                    if(charidx>=588.0) return 30.0;\n                                    if(charidx>=587.0) return 0.0;\n                                }else{\n                                    if(charidx>=585.0) return 18.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=580.0){\n                                if(charidx>=582.0){\n                                    if(charidx>=584.0) return 21.0;\n                                    if(charidx>=583.0) return 178.0;\n                                    if(charidx>=582.0) return 211.0;\n                                }else{\n                                    if(charidx>=581.0) return 0.0;\n                                    if(charidx>=580.0) return 219.0;\n                                }\n                            }else{\n                                if(charidx>=577.0){\n                                    if(charidx>=579.0) return 11.0;\n                                    if(charidx>=578.0) return 21.0;\n                                    if(charidx>=577.0) return 178.0;\n                                }else{\n                                    if(charidx>=576.0) return 27.0;\n                                    if(charidx>=575.0) return 26.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(charidx>=534.0){\n                    if(charidx>=554.0){\n                        if(charidx>=564.0){\n                            if(charidx>=569.0){\n                                if(charidx>=572.0){\n                                    if(charidx>=574.0) return 248.0;\n                                    if(charidx>=573.0) return 27.0;\n                                    if(charidx>=572.0) return 3.0;\n                                }else{\n                                    if(charidx>=571.0) return 59.0;\n                                    if(charidx>=570.0) return 178.0;\n                                    if(charidx>=569.0) return 211.0;\n                                }\n                            }else{\n                                if(charidx>=566.0){\n                                    if(charidx>=568.0) return 3.0;\n                                    if(charidx>=567.0) return 21.0;\n                                    if(charidx>=566.0) return 51.0;\n                                }else{\n                                    if(charidx>=565.0) return 0.0;\n                                    if(charidx>=564.0) return 178.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=559.0){\n                                if(charidx>=561.0){\n                                    if(charidx>=563.0) return 123.0;\n                                    if(charidx>=562.0) return 114.0;\n                                    if(charidx>=561.0) return 178.0;\n                                }else{\n                                    if(charidx>=560.0) return 0.0;\n                                    if(charidx>=559.0) return 211.0;\n                                }\n                            }else{\n                                if(charidx>=556.0){\n                                    if(charidx>=558.0) return 26.0;\n                                    if(charidx>=557.0) return 0.0;\n                                    if(charidx>=556.0) return 30.0;\n                                }else{\n                                    if(charidx>=555.0) return 27.0;\n                                    if(charidx>=554.0) return 114.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=544.0){\n                            if(charidx>=549.0){\n                                if(charidx>=551.0){\n                                    if(charidx>=553.0) return 211.0;\n                                    if(charidx>=551.0) return 0.0;\n                                }else{\n                                    if(charidx>=549.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=546.0){\n                                    if(charidx>=546.0) return 0.0;\n                                }else{\n                                    if(charidx>=545.0) return 0.0;\n                                    if(charidx>=544.0) return 258.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=539.0){\n                                if(charidx>=541.0){\n                                    if(charidx>=543.0) return 178.0;\n                                    if(charidx>=542.0) return 11.0;\n                                    if(charidx>=541.0) return 187.0;\n                                }else{\n                                    if(charidx>=540.0) return 15.0;\n                                    if(charidx>=539.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=536.0){\n                                    if(charidx>=538.0) return 11.0;\n                                    if(charidx>=537.0) return 21.0;\n                                    if(charidx>=536.0) return 51.0;\n                                }else{\n                                    if(charidx>=535.0) return 11.0;\n                                    if(charidx>=534.0) return 27.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=513.0){\n                        if(charidx>=523.0){\n                            if(charidx>=528.0){\n                                if(charidx>=531.0){\n                                    if(charidx>=533.0) return 19.0;\n                                    if(charidx>=532.0) return 0.0;\n                                    if(charidx>=531.0) return 15.0;\n                                }else{\n                                    if(charidx>=530.0) return 26.0;\n                                    if(charidx>=529.0) return 178.0;\n                                    if(charidx>=528.0) return 11.0;\n                                }\n                            }else{\n                                if(charidx>=525.0){\n                                    if(charidx>=527.0) return 123.0;\n                                    if(charidx>=526.0) return 26.0;\n                                    if(charidx>=525.0) return 91.0;\n                                }else{\n                                    if(charidx>=524.0) return 0.0;\n                                    if(charidx>=523.0) return 11.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=518.0){\n                                if(charidx>=520.0){\n                                    if(charidx>=522.0) return 21.0;\n                                    if(charidx>=521.0) return 0.0;\n                                    if(charidx>=520.0) return 178.0;\n                                }else{\n                                    if(charidx>=519.0) return 59.0;\n                                    if(charidx>=518.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=515.0){\n                                    if(charidx>=517.0) return 118.0;\n                                    if(charidx>=516.0) return 0.0;\n                                    if(charidx>=515.0) return 3.0;\n                                }else{\n                                    if(charidx>=514.0) return 187.0;\n                                    if(charidx>=513.0) return 26.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=503.0){\n                            if(charidx>=508.0){\n                                if(charidx>=510.0){\n                                    if(charidx>=512.0) return 187.0;\n                                    if(charidx>=511.0) return 11.0;\n                                    if(charidx>=510.0) return 0.0;\n                                }else{\n                                    if(charidx>=509.0) return 211.0;\n                                    if(charidx>=508.0) return 178.0;\n                                }\n                            }else{\n                                if(charidx>=505.0){\n                                    if(charidx>=507.0) return 21.0;\n                                    if(charidx>=506.0) return 242.0;\n                                    if(charidx>=505.0) return 0.0;\n                                }else{\n                                    if(charidx>=504.0) return 187.0;\n                                    if(charidx>=503.0) return 219.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=498.0){\n                                if(charidx>=500.0){\n                                    if(charidx>=502.0) return 11.0;\n                                    if(charidx>=501.0) return 123.0;\n                                    if(charidx>=500.0) return 35.0;\n                                }else{\n                                    if(charidx>=499.0) return 16.0;\n                                    if(charidx>=498.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=495.0){\n                                    if(charidx>=497.0) return 187.0;\n                                    if(charidx>=496.0) return 35.0;\n                                    if(charidx>=495.0) return 51.0;\n                                }else{\n                                    if(charidx>=494.0) return 0.0;\n                                    if(charidx>=493.0) return 15.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }else{\n            if(charidx>=411.0){\n                if(charidx>=452.0){\n                    if(charidx>=472.0){\n                        if(charidx>=482.0){\n                            if(charidx>=487.0){\n                                if(charidx>=490.0){\n                                    if(charidx>=492.0) return 27.0;\n                                    if(charidx>=491.0) return 3.0;\n                                    if(charidx>=490.0) return 51.0;\n                                }else{\n                                    if(charidx>=489.0) return 0.0;\n                                    if(charidx>=488.0) return 123.0;\n                                    if(charidx>=487.0) return 211.0;\n                                }\n                            }else{\n                                if(charidx>=484.0){\n                                    if(charidx>=486.0) return 234.0;\n                                    if(charidx>=485.0) return 0.0;\n                                    if(charidx>=484.0) return 187.0;\n                                }else{\n                                    if(charidx>=483.0) return 114.0;\n                                    if(charidx>=482.0) return 178.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=477.0){\n                                if(charidx>=479.0){\n                                    if(charidx>=481.0) return 0.0;\n                                    if(charidx>=480.0) return 11.0;\n                                    if(charidx>=479.0) return 21.0;\n                                }else{\n                                    if(charidx>=478.0) return 0.0;\n                                    if(charidx>=477.0) return 248.0;\n                                }\n                            }else{\n                                if(charidx>=474.0){\n                                    if(charidx>=476.0) return 11.0;\n                                    if(charidx>=475.0) return 123.0;\n                                    if(charidx>=474.0) return 114.0;\n                                }else{\n                                    if(charidx>=473.0) return 0.0;\n                                    if(charidx>=472.0) return 218.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=462.0){\n                            if(charidx>=467.0){\n                                if(charidx>=469.0){\n                                    if(charidx>=471.0) return 242.0;\n                                    if(charidx>=470.0) return 0.0;\n                                    if(charidx>=469.0) return 178.0;\n                                }else{\n                                    if(charidx>=468.0) return 211.0;\n                                    if(charidx>=467.0) return 123.0;\n                                }\n                            }else{\n                                if(charidx>=464.0){\n                                    if(charidx>=466.0) return 19.0;\n                                    if(charidx>=465.0) return 218.0;\n                                    if(charidx>=464.0) return 123.0;\n                                }else{\n                                    if(charidx>=463.0) return 3.0;\n                                    if(charidx>=462.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=457.0){\n                                if(charidx>=459.0){\n                                    if(charidx>=461.0) return 211.0;\n                                    if(charidx>=460.0) return 218.0;\n                                    if(charidx>=459.0) return 18.0;\n                                }else{\n                                    if(charidx>=458.0) return 27.0;\n                                    if(charidx>=457.0) return 59.0;\n                                }\n                            }else{\n                                if(charidx>=454.0){\n                                    if(charidx>=456.0) return 0.0;\n                                    if(charidx>=454.0) return 18.0;\n                                }else{\n                                    if(charidx>=453.0) return 123.0;\n                                    if(charidx>=452.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=431.0){\n                        if(charidx>=441.0){\n                            if(charidx>=446.0){\n                                if(charidx>=449.0){\n                                    if(charidx>=449.0) return 0.0;\n                                }else{\n                                    if(charidx>=448.0) return 0.0;\n                                    if(charidx>=447.0) return 258.0;\n                                    if(charidx>=446.0) return 248.0;\n                                }\n                            }else{\n                                if(charidx>=443.0){\n                                    if(charidx>=445.0) return 187.0;\n                                    if(charidx>=444.0) return 11.0;\n                                    if(charidx>=443.0) return 26.0;\n                                }else{\n                                    if(charidx>=442.0) return 178.0;\n                                    if(charidx>=441.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=436.0){\n                                if(charidx>=438.0){\n                                    if(charidx>=440.0) return 218.0;\n                                    if(charidx>=439.0) return 123.0;\n                                    if(charidx>=438.0) return 178.0;\n                                }else{\n                                    if(charidx>=437.0) return 211.0;\n                                    if(charidx>=436.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=433.0){\n                                    if(charidx>=435.0) return 0.0;\n                                    if(charidx>=434.0) return 258.0;\n                                    if(charidx>=433.0) return 178.0;\n                                }else{\n                                    if(charidx>=432.0) return 21.0;\n                                    if(charidx>=431.0) return 0.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=421.0){\n                            if(charidx>=426.0){\n                                if(charidx>=428.0){\n                                    if(charidx>=430.0) return 178.0;\n                                    if(charidx>=429.0) return 27.0;\n                                    if(charidx>=428.0) return 11.0;\n                                }else{\n                                    if(charidx>=427.0) return 0.0;\n                                    if(charidx>=426.0) return 211.0;\n                                }\n                            }else{\n                                if(charidx>=423.0){\n                                    if(charidx>=425.0) return 21.0;\n                                    if(charidx>=424.0) return 0.0;\n                                    if(charidx>=423.0) return 211.0;\n                                }else{\n                                    if(charidx>=422.0) return 21.0;\n                                    if(charidx>=421.0) return 114.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=416.0){\n                                if(charidx>=418.0){\n                                    if(charidx>=420.0) return 178.0;\n                                    if(charidx>=419.0) return 0.0;\n                                    if(charidx>=418.0) return 178.0;\n                                }else{\n                                    if(charidx>=417.0) return 26.0;\n                                    if(charidx>=416.0) return 242.0;\n                                }\n                            }else{\n                                if(charidx>=413.0){\n                                    if(charidx>=415.0) return 0.0;\n                                    if(charidx>=414.0) return 187.0;\n                                    if(charidx>=413.0) return 15.0;\n                                }else{\n                                    if(charidx>=412.0) return 27.0;\n                                    if(charidx>=411.0) return 211.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(charidx>=370.0){\n                    if(charidx>=390.0){\n                        if(charidx>=400.0){\n                            if(charidx>=405.0){\n                                if(charidx>=408.0){\n                                    if(charidx>=410.0) return 187.0;\n                                    if(charidx>=409.0) return 30.0;\n                                    if(charidx>=408.0) return 123.0;\n                                }else{\n                                    if(charidx>=407.0) return 0.0;\n                                    if(charidx>=406.0) return 219.0;\n                                    if(charidx>=405.0) return 11.0;\n                                }\n                            }else{\n                                if(charidx>=402.0){\n                                    if(charidx>=404.0) return 21.0;\n                                    if(charidx>=403.0) return 114.0;\n                                    if(charidx>=402.0) return 178.0;\n                                }else{\n                                    if(charidx>=401.0) return 187.0;\n                                    if(charidx>=400.0) return 15.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=395.0){\n                                if(charidx>=397.0){\n                                    if(charidx>=399.0) return 27.0;\n                                    if(charidx>=398.0) return 211.0;\n                                    if(charidx>=397.0) return 0.0;\n                                }else{\n                                    if(charidx>=396.0) return 187.0;\n                                    if(charidx>=395.0) return 118.0;\n                                }\n                            }else{\n                                if(charidx>=392.0){\n                                    if(charidx>=394.0) return 123.0;\n                                    if(charidx>=393.0) return 15.0;\n                                    if(charidx>=392.0) return 0.0;\n                                }else{\n                                    if(charidx>=391.0) return 27.0;\n                                    if(charidx>=390.0) return 178.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=380.0){\n                            if(charidx>=385.0){\n                                if(charidx>=387.0){\n                                    if(charidx>=389.0) return 0.0;\n                                    if(charidx>=388.0) return 187.0;\n                                    if(charidx>=387.0) return 3.0;\n                                }else{\n                                    if(charidx>=386.0) return 187.0;\n                                    if(charidx>=385.0) return 114.0;\n                                }\n                            }else{\n                                if(charidx>=382.0){\n                                    if(charidx>=384.0) return 0.0;\n                                    if(charidx>=383.0) return 187.0;\n                                    if(charidx>=382.0) return 3.0;\n                                }else{\n                                    if(charidx>=381.0) return 123.0;\n                                    if(charidx>=380.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=375.0){\n                                if(charidx>=377.0){\n                                    if(charidx>=379.0) return 187.0;\n                                    if(charidx>=378.0) return 30.0;\n                                    if(charidx>=377.0) return 0.0;\n                                }else{\n                                    if(charidx>=375.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=372.0){\n                                    if(charidx>=372.0) return 0.0;\n                                }else{\n                                    if(charidx>=371.0) return 0.0;\n                                    if(charidx>=370.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=349.0){\n                        if(charidx>=359.0){\n                            if(charidx>=364.0){\n                                if(charidx>=367.0){\n                                    if(charidx>=367.0) return 0.0;\n                                }else{\n                                    if(charidx>=364.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=361.0){\n                                    if(charidx>=363.0) return 256.0;\n                                    if(charidx>=362.0) return 218.0;\n                                    if(charidx>=361.0) return 3.0;\n                                }else{\n                                    if(charidx>=360.0) return 178.0;\n                                    if(charidx>=359.0) return 187.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=354.0){\n                                if(charidx>=356.0){\n                                    if(charidx>=358.0) return 15.0;\n                                    if(charidx>=357.0) return 27.0;\n                                    if(charidx>=356.0) return 187.0;\n                                }else{\n                                    if(charidx>=355.0) return 219.0;\n                                    if(charidx>=354.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=351.0){\n                                    if(charidx>=353.0) return 187.0;\n                                    if(charidx>=352.0) return 3.0;\n                                    if(charidx>=351.0) return 27.0;\n                                }else{\n                                    if(charidx>=350.0) return 15.0;\n                                    if(charidx>=349.0) return 0.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=339.0){\n                            if(charidx>=344.0){\n                                if(charidx>=346.0){\n                                    if(charidx>=348.0) return 59.0;\n                                    if(charidx>=347.0) return 26.0;\n                                    if(charidx>=346.0) return 0.0;\n                                }else{\n                                    if(charidx>=345.0) return 185.0;\n                                    if(charidx>=344.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=341.0){\n                                    if(charidx>=343.0) return 3.0;\n                                    if(charidx>=342.0) return 0.0;\n                                    if(charidx>=341.0) return 211.0;\n                                }else{\n                                    if(charidx>=340.0) return 4.0;\n                                    if(charidx>=339.0) return 178.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=334.0){\n                                if(charidx>=336.0){\n                                    if(charidx>=338.0) return 187.0;\n                                    if(charidx>=337.0) return 162.0;\n                                    if(charidx>=336.0) return 0.0;\n                                }else{\n                                    if(charidx>=335.0) return 0.0;\n                                    if(charidx>=334.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=331.0){\n                                    if(charidx>=331.0) return 0.0;\n                                }else{\n                                    if(charidx>=329.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }else{\n        if(charidx>=164.0){\n            if(charidx>=246.0){\n                if(charidx>=287.0){\n                    if(charidx>=308.0){\n                        if(charidx>=318.0){\n                            if(charidx>=323.0){\n                                if(charidx>=326.0){\n                                    if(charidx>=326.0) return 0.0;\n                                }else{\n                                    if(charidx>=325.0) return 0.0;\n                                    if(charidx>=324.0) return 258.0;\n                                    if(charidx>=323.0) return 234.0;\n                                }\n                            }else{\n                                if(charidx>=320.0){\n                                    if(charidx>=322.0) return 235.0;\n                                    if(charidx>=321.0) return 218.0;\n                                    if(charidx>=320.0) return 0.0;\n                                }else{\n                                    if(charidx>=318.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=313.0){\n                                if(charidx>=315.0){\n                                    if(charidx>=317.0) return 0.0;\n                                    if(charidx>=316.0) return 248.0;\n                                    if(charidx>=315.0) return 11.0;\n                                }else{\n                                    if(charidx>=314.0) return 123.0;\n                                    if(charidx>=313.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=310.0){\n                                    if(charidx>=312.0) return 218.0;\n                                    if(charidx>=311.0) return 187.0;\n                                    if(charidx>=310.0) return 218.0;\n                                }else{\n                                    if(charidx>=309.0) return 15.0;\n                                    if(charidx>=308.0) return 185.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=297.0){\n                            if(charidx>=302.0){\n                                if(charidx>=305.0){\n                                    if(charidx>=307.0) return 3.0;\n                                    if(charidx>=306.0) return 187.0;\n                                    if(charidx>=305.0) return 218.0;\n                                }else{\n                                    if(charidx>=304.0) return 0.0;\n                                    if(charidx>=303.0) return 21.0;\n                                    if(charidx>=302.0) return 26.0;\n                                }\n                            }else{\n                                if(charidx>=299.0){\n                                    if(charidx>=301.0) return 0.0;\n                                    if(charidx>=300.0) return 118.0;\n                                    if(charidx>=299.0) return 178.0;\n                                }else{\n                                    if(charidx>=298.0) return 11.0;\n                                    if(charidx>=297.0) return 187.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=292.0){\n                                if(charidx>=294.0){\n                                    if(charidx>=296.0) return 18.0;\n                                    if(charidx>=295.0) return 21.0;\n                                    if(charidx>=294.0) return 211.0;\n                                }else{\n                                    if(charidx>=293.0) return 0.0;\n                                    if(charidx>=292.0) return 178.0;\n                                }\n                            }else{\n                                if(charidx>=289.0){\n                                    if(charidx>=291.0) return 123.0;\n                                    if(charidx>=290.0) return 211.0;\n                                    if(charidx>=289.0) return 187.0;\n                                }else{\n                                    if(charidx>=288.0) return 11.0;\n                                    if(charidx>=287.0) return 187.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=266.0){\n                        if(charidx>=276.0){\n                            if(charidx>=281.0){\n                                if(charidx>=284.0){\n                                    if(charidx>=286.0) return 19.0;\n                                    if(charidx>=285.0) return 211.0;\n                                    if(charidx>=284.0) return 0.0;\n                                }else{\n                                    if(charidx>=283.0) return 123.0;\n                                    if(charidx>=282.0) return 178.0;\n                                    if(charidx>=281.0) return 19.0;\n                                }\n                            }else{\n                                if(charidx>=278.0){\n                                    if(charidx>=280.0) return 187.0;\n                                    if(charidx>=279.0) return 11.0;\n                                    if(charidx>=278.0) return 0.0;\n                                }else{\n                                    if(charidx>=277.0) return 218.0;\n                                    if(charidx>=276.0) return 187.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=271.0){\n                                if(charidx>=273.0){\n                                    if(charidx>=275.0) return 118.0;\n                                    if(charidx>=274.0) return 11.0;\n                                    if(charidx>=273.0) return 27.0;\n                                }else{\n                                    if(charidx>=272.0) return 15.0;\n                                    if(charidx>=271.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=268.0){\n                                    if(charidx>=270.0) return 187.0;\n                                    if(charidx>=269.0) return 11.0;\n                                    if(charidx>=268.0) return 21.0;\n                                }else{\n                                    if(charidx>=267.0) return 3.0;\n                                    if(charidx>=266.0) return 123.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=256.0){\n                            if(charidx>=261.0){\n                                if(charidx>=263.0){\n                                    if(charidx>=265.0) return 248.0;\n                                    if(charidx>=264.0) return 11.0;\n                                    if(charidx>=263.0) return 123.0;\n                                }else{\n                                    if(charidx>=262.0) return 15.0;\n                                    if(charidx>=261.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=258.0){\n                                    if(charidx>=258.0) return 0.0;\n                                }else{\n                                    if(charidx>=257.0) return 0.0;\n                                    if(charidx>=256.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=251.0){\n                                if(charidx>=253.0){\n                                    if(charidx>=253.0) return 0.0;\n                                }else{\n                                    if(charidx>=251.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=248.0){\n                                    if(charidx>=249.0) return 0.0;\n                                    if(charidx>=248.0) return 187.0;\n                                }else{\n                                    if(charidx>=247.0) return 19.0;\n                                    if(charidx>=246.0) return 11.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(charidx>=205.0){\n                    if(charidx>=225.0){\n                        if(charidx>=235.0){\n                            if(charidx>=240.0){\n                                if(charidx>=243.0){\n                                    if(charidx>=245.0) return 187.0;\n                                    if(charidx>=244.0) return 19.0;\n                                    if(charidx>=243.0) return 211.0;\n                                }else{\n                                    if(charidx>=242.0) return 187.0;\n                                    if(charidx>=241.0) return 11.0;\n                                    if(charidx>=240.0) return 21.0;\n                                }\n                            }else{\n                                if(charidx>=237.0){\n                                    if(charidx>=239.0) return 15.0;\n                                    if(charidx>=238.0) return 26.0;\n                                    if(charidx>=237.0) return 18.0;\n                                }else{\n                                    if(charidx>=236.0) return 0.0;\n                                    if(charidx>=235.0) return 258.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=230.0){\n                                if(charidx>=232.0){\n                                    if(charidx>=234.0) return 187.0;\n                                    if(charidx>=233.0) return 26.0;\n                                    if(charidx>=232.0) return 21.0;\n                                }else{\n                                    if(charidx>=231.0) return 178.0;\n                                    if(charidx>=230.0) return 11.0;\n                                }\n                            }else{\n                                if(charidx>=227.0){\n                                    if(charidx>=229.0) return 187.0;\n                                    if(charidx>=228.0) return 19.0;\n                                    if(charidx>=227.0) return 11.0;\n                                }else{\n                                    if(charidx>=226.0) return 21.0;\n                                    if(charidx>=225.0) return 0.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=215.0){\n                            if(charidx>=220.0){\n                                if(charidx>=222.0){\n                                    if(charidx>=224.0) return 90.0;\n                                    if(charidx>=223.0) return 16.0;\n                                    if(charidx>=222.0) return 200.0;\n                                }else{\n                                    if(charidx>=221.0) return 123.0;\n                                    if(charidx>=220.0) return 219.0;\n                                }\n                            }else{\n                                if(charidx>=217.0){\n                                    if(charidx>=219.0) return 3.0;\n                                    if(charidx>=218.0) return 123.0;\n                                    if(charidx>=217.0) return 219.0;\n                                }else{\n                                    if(charidx>=216.0) return 0.0;\n                                    if(charidx>=215.0) return 258.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=210.0){\n                                if(charidx>=212.0){\n                                    if(charidx>=214.0) return 11.0;\n                                    if(charidx>=213.0) return 123.0;\n                                    if(charidx>=212.0) return 19.0;\n                                }else{\n                                    if(charidx>=211.0) return 0.0;\n                                    if(charidx>=210.0) return 26.0;\n                                }\n                            }else{\n                                if(charidx>=207.0){\n                                    if(charidx>=209.0) return 27.0;\n                                    if(charidx>=208.0) return 218.0;\n                                    if(charidx>=207.0) return 16.0;\n                                }else{\n                                    if(charidx>=206.0) return 211.0;\n                                    if(charidx>=205.0) return 234.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=184.0){\n                        if(charidx>=194.0){\n                            if(charidx>=199.0){\n                                if(charidx>=202.0){\n                                    if(charidx>=204.0) return 187.0;\n                                    if(charidx>=203.0) return 248.0;\n                                    if(charidx>=202.0) return 0.0;\n                                }else{\n                                    if(charidx>=201.0) return 15.0;\n                                    if(charidx>=200.0) return 219.0;\n                                    if(charidx>=199.0) return 26.0;\n                                }\n                            }else{\n                                if(charidx>=196.0){\n                                    if(charidx>=198.0) return 19.0;\n                                    if(charidx>=197.0) return 0.0;\n                                    if(charidx>=196.0) return 19.0;\n                                }else{\n                                    if(charidx>=195.0) return 19.0;\n                                    if(charidx>=194.0) return 26.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=189.0){\n                                if(charidx>=191.0){\n                                    if(charidx>=193.0) return 15.0;\n                                    if(charidx>=192.0) return 19.0;\n                                    if(charidx>=191.0) return 0.0;\n                                }else{\n                                    if(charidx>=190.0) return 211.0;\n                                    if(charidx>=189.0) return 35.0;\n                                }\n                            }else{\n                                if(charidx>=186.0){\n                                    if(charidx>=188.0) return 242.0;\n                                    if(charidx>=187.0) return 0.0;\n                                    if(charidx>=186.0) return 218.0;\n                                }else{\n                                    if(charidx>=185.0) return 178.0;\n                                    if(charidx>=184.0) return 3.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=174.0){\n                            if(charidx>=179.0){\n                                if(charidx>=181.0){\n                                    if(charidx>=183.0) return 123.0;\n                                    if(charidx>=182.0) return 59.0;\n                                    if(charidx>=181.0) return 178.0;\n                                }else{\n                                    if(charidx>=180.0) return 123.0;\n                                    if(charidx>=179.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=176.0){\n                                    if(charidx>=178.0) return 21.0;\n                                    if(charidx>=176.0) return 11.0;\n                                }else{\n                                    if(charidx>=175.0) return 123.0;\n                                    if(charidx>=174.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=169.0){\n                                if(charidx>=171.0){\n                                    if(charidx>=173.0) return 178.0;\n                                    if(charidx>=171.0) return 187.0;\n                                }else{\n                                    if(charidx>=170.0) return 3.0;\n                                    if(charidx>=169.0) return 219.0;\n                                }\n                            }else{\n                                if(charidx>=166.0){\n                                    if(charidx>=168.0) return 0.0;\n                                    if(charidx>=167.0) return 187.0;\n                                    if(charidx>=166.0) return 30.0;\n                                }else{\n                                    if(charidx>=164.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }else{\n            if(charidx>=82.0){\n                if(charidx>=123.0){\n                    if(charidx>=143.0){\n                        if(charidx>=153.0){\n                            if(charidx>=158.0){\n                                if(charidx>=161.0){\n                                    if(charidx>=161.0) return 0.0;\n                                }else{\n                                    if(charidx>=160.0) return 0.0;\n                                    if(charidx>=159.0) return 0.0;\n                                    if(charidx>=158.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=155.0){\n                                    if(charidx>=155.0) return 0.0;\n                                }else{\n                                    if(charidx>=154.0) return 0.0;\n                                    if(charidx>=153.0) return 258.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=148.0){\n                                if(charidx>=150.0){\n                                    if(charidx>=152.0) return 219.0;\n                                    if(charidx>=151.0) return 21.0;\n                                    if(charidx>=150.0) return 3.0;\n                                }else{\n                                    if(charidx>=149.0) return 123.0;\n                                    if(charidx>=148.0) return 200.0;\n                                }\n                            }else{\n                                if(charidx>=145.0){\n                                    if(charidx>=147.0) return 0.0;\n                                    if(charidx>=146.0) return 211.0;\n                                    if(charidx>=145.0) return 123.0;\n                                }else{\n                                    if(charidx>=144.0) return 30.0;\n                                    if(charidx>=143.0) return 0.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=133.0){\n                            if(charidx>=138.0){\n                                if(charidx>=140.0){\n                                    if(charidx>=142.0) return 248.0;\n                                    if(charidx>=141.0) return 27.0;\n                                    if(charidx>=140.0) return 15.0;\n                                }else{\n                                    if(charidx>=139.0) return 179.0;\n                                    if(charidx>=138.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=135.0){\n                                    if(charidx>=135.0) return 0.0;\n                                }else{\n                                    if(charidx>=134.0) return 243.0;\n                                    if(charidx>=133.0) return 72.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=128.0){\n                                if(charidx>=130.0){\n                                    if(charidx>=132.0) return 235.0;\n                                    if(charidx>=131.0) return 185.0;\n                                    if(charidx>=130.0) return 0.0;\n                                }else{\n                                    if(charidx>=129.0) return 187.0;\n                                    if(charidx>=128.0) return 19.0;\n                                }\n                            }else{\n                                if(charidx>=125.0){\n                                    if(charidx>=127.0) return 11.0;\n                                    if(charidx>=126.0) return 21.0;\n                                    if(charidx>=125.0) return 211.0;\n                                }else{\n                                    if(charidx>=124.0) return 0.0;\n                                    if(charidx>=123.0) return 187.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=102.0){\n                        if(charidx>=112.0){\n                            if(charidx>=117.0){\n                                if(charidx>=120.0){\n                                    if(charidx>=122.0) return 19.0;\n                                    if(charidx>=121.0) return 11.0;\n                                    if(charidx>=120.0) return 123.0;\n                                }else{\n                                    if(charidx>=119.0) return 21.0;\n                                    if(charidx>=117.0) return 18.0;\n                                }\n                            }else{\n                                if(charidx>=114.0){\n                                    if(charidx>=116.0) return 123.0;\n                                    if(charidx>=115.0) return 0.0;\n                                    if(charidx>=114.0) return 18.0;\n                                }else{\n                                    if(charidx>=113.0) return 187.0;\n                                    if(charidx>=112.0) return 242.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=107.0){\n                                if(charidx>=109.0){\n                                    if(charidx>=111.0) return 187.0;\n                                    if(charidx>=110.0) return 3.0;\n                                    if(charidx>=109.0) return 0.0;\n                                }else{\n                                    if(charidx>=108.0) return 187.0;\n                                    if(charidx>=107.0) return 114.0;\n                                }\n                            }else{\n                                if(charidx>=104.0){\n                                    if(charidx>=106.0) return 178.0;\n                                    if(charidx>=105.0) return 0.0;\n                                    if(charidx>=104.0) return 219.0;\n                                }else{\n                                    if(charidx>=103.0) return 11.0;\n                                    if(charidx>=102.0) return 21.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=92.0){\n                            if(charidx>=97.0){\n                                if(charidx>=99.0){\n                                    if(charidx>=101.0) return 118.0;\n                                    if(charidx>=100.0) return 19.0;\n                                    if(charidx>=99.0) return 27.0;\n                                }else{\n                                    if(charidx>=98.0) return 3.0;\n                                    if(charidx>=97.0) return 4.0;\n                                }\n                            }else{\n                                if(charidx>=94.0){\n                                    if(charidx>=96.0) return 0.0;\n                                    if(charidx>=95.0) return 187.0;\n                                    if(charidx>=94.0) return 11.0;\n                                }else{\n                                    if(charidx>=93.0) return 21.0;\n                                    if(charidx>=92.0) return 18.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=87.0){\n                                if(charidx>=89.0){\n                                    if(charidx>=91.0) return 19.0;\n                                    if(charidx>=90.0) return 11.0;\n                                    if(charidx>=89.0) return 21.0;\n                                }else{\n                                    if(charidx>=87.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=84.0){\n                                    if(charidx>=84.0) return 0.0;\n                                }else{\n                                    if(charidx>=82.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }else{\n                if(charidx>=41.0){\n                    if(charidx>=61.0){\n                        if(charidx>=71.0){\n                            if(charidx>=76.0){\n                                if(charidx>=79.0){\n                                    if(charidx>=80.0) return 0.0;\n                                    if(charidx>=79.0) return 258.0;\n                                }else{\n                                    if(charidx>=78.0) return 3.0;\n                                    if(charidx>=77.0) return 187.0;\n                                    if(charidx>=76.0) return 26.0;\n                                }\n                            }else{\n                                if(charidx>=73.0){\n                                    if(charidx>=75.0) return 187.0;\n                                    if(charidx>=74.0) return 0.0;\n                                    if(charidx>=73.0) return 59.0;\n                                }else{\n                                    if(charidx>=72.0) return 26.0;\n                                    if(charidx>=71.0) return 27.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=66.0){\n                                if(charidx>=68.0){\n                                    if(charidx>=70.0) return 3.0;\n                                    if(charidx>=69.0) return 219.0;\n                                    if(charidx>=68.0) return 27.0;\n                                }else{\n                                    if(charidx>=67.0) return 15.0;\n                                    if(charidx>=66.0) return 187.0;\n                                }\n                            }else{\n                                if(charidx>=63.0){\n                                    if(charidx>=65.0) return 248.0;\n                                    if(charidx>=64.0) return 0.0;\n                                    if(charidx>=63.0) return 248.0;\n                                }else{\n                                    if(charidx>=62.0) return 187.0;\n                                    if(charidx>=61.0) return 26.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=51.0){\n                            if(charidx>=56.0){\n                                if(charidx>=58.0){\n                                    if(charidx>=60.0) return 27.0;\n                                    if(charidx>=59.0) return 3.0;\n                                    if(charidx>=58.0) return 59.0;\n                                }else{\n                                    if(charidx>=57.0) return 15.0;\n                                    if(charidx>=56.0) return 21.0;\n                                }\n                            }else{\n                                if(charidx>=53.0){\n                                    if(charidx>=55.0) return 0.0;\n                                    if(charidx>=54.0) return 178.0;\n                                    if(charidx>=53.0) return 211.0;\n                                }else{\n                                    if(charidx>=52.0) return 27.0;\n                                    if(charidx>=51.0) return 15.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=46.0){\n                                if(charidx>=48.0){\n                                    if(charidx>=50.0) return 0.0;\n                                    if(charidx>=49.0) return 248.0;\n                                    if(charidx>=48.0) return 11.0;\n                                }else{\n                                    if(charidx>=47.0) return 123.0;\n                                    if(charidx>=46.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=43.0){\n                                    if(charidx>=45.0) return 178.0;\n                                    if(charidx>=44.0) return 211.0;\n                                    if(charidx>=43.0) return 187.0;\n                                }else{\n                                    if(charidx>=42.0) return 30.0;\n                                    if(charidx>=41.0) return 187.0;\n                                }\n                            }\n                        }\n                    }\n                }else{\n                    if(charidx>=20.0){\n                        if(charidx>=30.0){\n                            if(charidx>=35.0){\n                                if(charidx>=38.0){\n                                    if(charidx>=40.0) return 11.0;\n                                    if(charidx>=39.0) return 0.0;\n                                    if(charidx>=38.0) return 187.0;\n                                }else{\n                                    if(charidx>=37.0) return 114.0;\n                                    if(charidx>=36.0) return 178.0;\n                                    if(charidx>=35.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=32.0){\n                                    if(charidx>=34.0) return 16.0;\n                                    if(charidx>=33.0) return 0.0;\n                                    if(charidx>=32.0) return 187.0;\n                                }else{\n                                    if(charidx>=31.0) return 11.0;\n                                    if(charidx>=30.0) return 21.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=25.0){\n                                if(charidx>=27.0){\n                                    if(charidx>=29.0) return 18.0;\n                                    if(charidx>=28.0) return 19.0;\n                                    if(charidx>=27.0) return 11.0;\n                                }else{\n                                    if(charidx>=26.0) return 21.0;\n                                    if(charidx>=25.0) return 0.0;\n                                }\n                            }else{\n                                if(charidx>=22.0){\n                                    if(charidx>=24.0) return 187.0;\n                                    if(charidx>=23.0) return 3.0;\n                                    if(charidx>=22.0) return 123.0;\n                                }else{\n                                    if(charidx>=21.0) return 0.0;\n                                    if(charidx>=20.0) return 187.0;\n                                }\n                            }\n                        }\n                    }else{\n                        if(charidx>=10.0){\n                            if(charidx>=15.0){\n                                if(charidx>=17.0){\n                                    if(charidx>=19.0) return 30.0;\n                                    if(charidx>=17.0) return 0.0;\n                                }else{\n                                    if(charidx>=16.0) return 258.0;\n                                    if(charidx>=15.0) return 248.0;\n                                }\n                            }else{\n                                if(charidx>=12.0){\n                                    if(charidx>=14.0) return 162.0;\n                                    if(charidx>=13.0) return 35.0;\n                                    if(charidx>=12.0) return 235.0;\n                                }else{\n                                    if(charidx>=11.0) return 30.0;\n                                    if(charidx>=10.0) return 0.0;\n                                }\n                            }\n                        }else{\n                            if(charidx>=5.0){\n                                if(charidx>=7.0){\n                                    if(charidx>=9.0) return 235.0;\n                                    if(charidx>=7.0) return 162.0;\n                                }else{\n                                    if(charidx>=6.0) return 179.0;\n                                    if(charidx>=5.0) return 122.0;\n                                }\n                            }else{\n                                if(charidx>=2.0){\n                                    if(charidx>=2.0) return 0.0;\n                                }else{\n                                    if(charidx>=0.0) return 0.0;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return 0.0; //empty by default\n} //get_seg_mask\n\n// Camera and light prototypes\n\nvoid do_cl_nop(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_s_plain(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_starwars(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_s_zoom(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_s_roto(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_bold(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_cyl(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_tunnel(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_s_sine(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_twosided(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_s_plasma(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\nvoid do_cl_cube(in float partnum, in float charidx_frac, out vec3 camera_pos, out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg, out vec3 light_pos);\n\nvoid do_camera_light(in float partnum, in float charidx_frac,\n                        out vec3 camera_pos,\n                        out vec3 camera_look_at, out vec3 camera_up,\n                        out float fovy_deg, out vec3 light_pos)\n{   // Camera and light dispatcher\n    if(partnum>=CYL) {\n\n        if(partnum==CYL) {\n            do_cl_cyl(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==TUNNEL) {\n            do_cl_tunnel(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==S_SINE) {\n            do_cl_s_sine(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==TWOSIDED) {\n            do_cl_twosided(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==S_PLASMA) {\n            do_cl_s_plasma(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==CUBE) {\n            do_cl_cube(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    } else {\n\n        if(partnum==NOP) {\n            do_cl_nop(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==S_PLAIN) {\n            do_cl_s_plain(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==STARWARS) {\n            do_cl_starwars(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==S_ZOOM) {\n            do_cl_s_zoom(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==S_ROTO) {\n            do_cl_s_roto(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        if(partnum==BOLD) {\n            do_cl_bold(partnum,charidx_frac,camera_pos,camera_look_at,camera_up,fovy_deg,light_pos);\n        } else\n\n        {\n            camera_pos=vec3(0.0,0.0,10.0);    //default\n            camera_look_at=vec3(0.0);\n            camera_up=vec3(0.0, 1.0, 0.0);\n            fovy_deg=45.0;\n            light_pos=camera_pos;\n        }\n    }\n} //do_camera_light\n\n// --- ^^^ cutend ---\n// }}}1\n\n// UTIL ///////////////////////////////////////////////\n// {{{1\n\nmat4 xtranspose(in mat4 inMatrix)\n{\n    // Modified from\n    // http://stackoverflow.com/a/18038495/2877364 by\n    // http://stackoverflow.com/users/2507370/jeb\n    vec4 i0 = inMatrix[0];\n    vec4 i1 = inMatrix[1];\n    vec4 i2 = inMatrix[2];\n    vec4 i3 = inMatrix[3];\n\n    vec4 o0 = vec4(i0.x, i1.x, i2.x, i3.x);\n    vec4 o1 = vec4(i0.y, i1.y, i2.y, i3.y);\n    vec4 o2 = vec4(i0.z, i1.z, i2.z, i3.z);\n    vec4 o3 = vec4(i0.w, i1.w, i2.w, i3.w);\n\n    mat4 outMatrix = mat4(o0, o1, o2, o3);\n\n    return outMatrix;\n}\n\n\nvoid lookat(in vec3 in_eye, in vec3 in_ctr, in vec3 in_up,\n            out mat4 view, out mat4 view_inv)\n{\n    // From Mesa glu.  Thanks to\n    // http://learnopengl.com/#!Getting-started/Camera\n    // and https://www.opengl.org/wiki/GluLookAt_code\n\n    vec3 forward, side, up;\n\n    forward=normalize(in_ctr-in_eye);\n    up = in_up;\n    side = normalize(cross(forward,up));\n    up = cross(side,forward);   // already normalized since both inputs are\n        //now side, up, and forward are orthonormal\n\n    mat4 orient, where;\n\n    // Note: in Mesa gluLookAt, a C matrix is used, so the indices\n    // have to be swapped compared to that code.\n    vec4 x4, y4, z4, w4;\n    x4 = vec4(side,0);\n    y4 = vec4(up,0);\n    z4 = vec4(-forward,0);\n    w4 = vec4(0,0,0,1);\n    orient = transpose(mat4(x4, y4, z4, w4));\n\n    where = mat4(1.0); //identity (1.0 diagonal matrix)\n    where[3] = vec4(-in_eye, 1);\n\n    view = (orient * where);\n\n    // Compute the inverse for later\n    view_inv = mat4(x4, y4, z4, -where[3]);\n    view_inv[3][3] = 1.0;   // since -where[3].w == -1, not what we want\n        // Per https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations ,\n        // M_{view->world}\n} //lookat\n\nvoid gluPerspective(in float fovy_deg, in float aspect,\n                    in float near, in float far,\n                    out mat4 proj, out mat4 proj_inv)\n{   // from mesa glu-9.0.0/src/libutil/project.c.\n    // Thanks to https://unspecified.wordpress.com/2012/06/21/calculating-the-gluperspective-matrix-and-other-opengl-matrix-maths/\n\n    float fovy_rad = radians(fovy_deg);\n    float dz = far-near;\n    float sin_fovy = sin(fovy_rad);\n    float cot_fovy = cos(fovy_rad) / sin_fovy;\n\n    proj=mat4(0);\n    //[col][row]\n    proj[0][0] = cot_fovy / aspect;\n    proj[1][1] = cot_fovy;\n\n    proj[2][2] = -(far+near)/dz;\n    proj[2][3] = -1.0;\n\n    proj[3][2] = -2.0*near*far/dz;\n\n    // Compute the inverse matrix.\n    // http://bookofhook.com/mousepick.pdf\n    float a = proj[0][0];\n    float b = proj[1][1];\n    float c = proj[2][2];\n    float d = proj[3][2];\n    float e = proj[2][3];\n\n    proj_inv = mat4(0);\n    proj_inv[0][0] = 1.0/a;\n    proj_inv[1][1] = 1.0/b;\n    proj_inv[3][2] = 1.0/e;\n    proj_inv[2][3] = 1.0/d;\n    proj_inv[3][3] = -c/(d*e);\n} //gluPerspective\n\nvoid compute_viewport(in float x, in float y, in float w, in float h,\n                        out mat4 viewp, out mat4 viewp_inv)\n{\n    // See https://en.wikibooks.org/wiki/GLSL_Programming/Vertex_Transformations#Viewport_Transformation\n    // Also mesa src/mesa/main/viewport.c:_mesa_get_viewport_xform()\n\n    viewp = mat4(0);\n    // Reminder: indexing is [col][row]\n    viewp[0][0] = w/2.0;\n    viewp[3][0] = x+w/2.0;\n\n    viewp[1][1] = h/2.0;\n    viewp[3][1] = y+h/2.0;\n\n    // assumes n=0 and f=1,\n    // which are the default for glDepthRange.\n    viewp[2][2] = 0.5;  // actually 0.5 * (f-n);\n    viewp[3][2] = 0.5;  // actually 0.5 * (n+f);\n\n    viewp[3][3] = 1.0;\n\n    //Invert.  Done by hand.\n    viewp_inv = mat4(1.0);\n    viewp_inv[0][0] = 2.0/w;    // x->x\n    viewp_inv[3][0] = -1.0 - (2.0*x/w);\n\n    viewp_inv[1][1] = 2.0/h;    // y->y\n    viewp_inv[3][1] = -1.0 - (2.0*y/h);\n\n    viewp_inv[2][2] = 2.0;      // z->z\n    viewp_inv[3][2] = -1.0;\n\n}  //compute_viewport\n\n// https://www.opengl.org/wiki/Compute_eye_space_from_window_space\n\nvec4 wts(in mat4 modelviewproj, in mat4 viewport,\n                in vec3 pos)\n{   // world to screen coordinates\n    vec4 clipvertex = modelviewproj * vec4(pos,1.0);\n    vec4 ndc = clipvertex/clipvertex.w;\n    vec4 transformed = viewport * ndc;\n    return transformed;\n} //wts\n\n// screen to world: http://bookofhook.com/mousepick.pdf\nvec4 WorldRayFromScreenPoint(in vec2 scr_pt,\n    in mat4 view_inv,\n    in mat4 proj_inv,\n    in mat4 viewp_inv)\n{   // Returns world coords of a point on a ray passing through\n    // the camera position and scr_pt.\n\n    vec4 ndc = viewp_inv * vec4(scr_pt,0.0,1.0);\n        // z=0.0 => it's a ray.  0 is an arbitrary choice in the\n        // view volume.\n        // w=1.0 => we don't need to undo the perspective divide.\n        //      So clip coords == NDC\n\n    vec4 view_coords = proj_inv * ndc;\n        // At this point, z=0 will have become something in the\n        // middle of the projection volume, somewhere between\n        // near and far.\n    view_coords = view_coords / view_coords.w;\n        // Keepin' it real?  Not sure what happens if you skip this.\n    //view_coords.w = 0.0;\n        // Remove translation components.  Note that we\n        // don't use this trick.\n    vec4 world_ray_point = view_inv * view_coords;\n        // Now scr_pt is on the ray through camera_pos and world_ray_point\n    return world_ray_point;\n} //WorldRayFromScreenPoint\n\nvec3 hsv2rgb(vec3 c) {\n    // by hughsk, from https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl .\n    // All inputs range from 0 to 1.\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// }}}1\n\n// GEOMETRY HIT-TESTING ///////////////////////////////\n// {{{1\n\n// Plane-testing routines for cube.\nvec4 HitXPlane(vec3 camera_pos, vec3 camera_dir, float plane_locn)\n{   //returns .xyz = hit coords; .w = time of hit\n    float hit_t = (plane_locn-camera_pos.x) / camera_dir.x;\n    return vec4(camera_pos + hit_t*camera_dir, hit_t);\n} //HitXPlane\n\nvec4 HitYPlane(vec3 camera_pos, vec3 camera_dir, float plane_locn)\n{   //returns .xyz = hit coords; .w = time of hit\n    float hit_t = (plane_locn-camera_pos.y) / camera_dir.y;\n    return vec4(camera_pos + hit_t*camera_dir, hit_t);\n} //HitYPlane\n\nvec4 HitZPlane(vec3 camera_pos, vec3 camera_dir, float plane_locn)\n{   //returns .xyz = hit coords; .w = time of hit\n    float hit_t = (plane_locn-camera_pos.z) / camera_dir.z;\n    return vec4(camera_pos + hit_t*camera_dir, hit_t);\n} //HitZPlane\n\n// Faster routine for the special case of the main text\nvec3 HitZZero(vec3 camera_pos, vec3 rayend)\n{   // Find where the ray meets the z=0 plane.  The ray is\n    // camera_pos + t*(rayend - camera_pos) per Hook.\n    float hit_t = -camera_pos.z / (rayend.z - camera_pos.z);\n    return (camera_pos + hit_t * (rayend-camera_pos));\n} //HitZZero\n\n// --- IsPointInRectXY ---\n// All polys will be quads in the X-Y plane, Z=0.\n// All quad edges are parallel to the X or Y axis.\n// These quads are encoded in a vec4: (.x,.y) is the LL corner and\n// (.z,.w) is the UR corner (coords (x,y)).\n\nbool IsPointInRectXY(in vec4 poly_coords, in vec2 world_xy_of_point)\n{\n    // return true if world_xy_of_point is within the poly defined by\n    // poly_coords in the Z=0 plane.\n    // I can test in 2D rather than 3D because all the geometry\n    // has z=0 and all the quads are planar.\n\n    float x_test, y_test;\n    x_test = step(poly_coords.x, world_xy_of_point.x) *\n            (1.0 - step(poly_coords.z, world_xy_of_point.x));\n        // step() is 1.0 if world.x >= poly_coords.x\n        // 1-step() is 1.0 if world.x < poly_coords.z\n    y_test = step(poly_coords.y, world_xy_of_point.y) *\n            (1.0 - step(poly_coords.w, world_xy_of_point.y));\n\n    return ( (x_test>=0.9) && (y_test >= 0.9) );\n        // Not ==1.0 because these are floats!\n\n} //IsPointInRectXY\n\nvec4 cylinder_hit(float cyl_radius, vec3 camera_pos, vec3 ray_end)\n{   // Hit-test a cylinder with infinite extent in X centered on the X-axis.\n    // Ray starts at camera_pos and passes through ray_end.\n    // Returns (xyz,\\theta).  \\theta is the angle in radians about the\n    // X axis from +Y towards +X.  \\theta=0 => +Y axis (Z=0).\n    // Preconditions: camera_pos is within the cylinder, and\n    // ray_end has nonzero .yz.\n\n    // Based on http://stackoverflow.com/a/1084899/2877364 by\n    // http://stackoverflow.com/users/111307/bobobobo\n\n    // Test for hits projected to the YZ plane.\n    vec2 E = camera_pos.yz;\n    vec2 L = ray_end.yz;    // end of the ray\n    vec2 d = L - E;         // direction of the ray\n    vec2 C = vec2(0.0);     // cylinder is centered on X axis\n    vec2 f = E-C;\n    float r = cyl_radius;\n\n    float a = dot(d, d);\n    float b = 2.0*dot(f,d);\n    float c = dot(f,f) - r*r;\n    float discriminant = b*b-4.0*a*c;\n\n    discriminant = sqrt(discriminant);\n\n    // Since camera_pos is within the cylinder, we have what bobobobo describes\n    // as an \"ExitWound\" condition.  The second root (+discriminant) is the one we want.\n    float t2 = (-b + discriminant) / (2.0*a);\n\n    // Now expand to 3D\n    vec3 hit_point = camera_pos + t2*(ray_end-camera_pos);  // XYZ\n\n    return vec4(hit_point, atan(hit_point.z, hit_point.y));\n        // Right-handed rotation about X axis from +Y toward +Z\n\n} //cylinder_hit\n\nvec3 sphere_hit(vec3 camera_pos, vec3 rayend, vec3 center, float radius)\n{   // return the point on a sphere centered at _center_ hit by the ray,\n    // or (0,0,0) if no hit.\n    // From http://gamedev.stackexchange.com/a/27758/51386 by\n    // http://gamedev.stackexchange.com/users/5864/sam-hocevar\n    vec3 dir = rayend-camera_pos;\n    float a = dot(dir,dir);\n    float b = 2.0 * dot(dir, camera_pos - center);\n    float c = dot(center, center) + dot(camera_pos, camera_pos) -\n        2.0 * dot(center, camera_pos) - radius*radius;\n\n    // This from http://gamedev.stackexchange.com/q/27755/51386 by\n    // http://gamedev.stackexchange.com/users/14718/fernacolo\n    float discrim = b*b - 4.0*a*c;\n\n    if(discrim < 0.0) {\n        return vec3(0.0);   //no hit\n    } else {\n        float t = (-b - sqrt(discrim)) / (2.0*a);\n        return camera_pos + t*dir;\n    } //endif no hit else\n\n} //sphere_hit\n\n#define CUBEHIT_THLD (0.01)\nbool cube_hit(in vec3 camera_pos, in vec3 rayend,\n    out vec3 wc_pixel, out vec3 wc_normal,\n    out vec3 ambient, out vec3 diffuse)\n{\n    // Check for intersection with a cube from (0,0,0) to (1,1,1).\n    // Returns true iff hit.\n    // Maybe check each axis in turn, get both ts, and see if either\n    // is in range.\n\n    bool did_hit = false;\n    vec3 camera_dir = rayend - camera_pos;\n\n    // Colors\n\n    // X faces\n    if(abs(camera_dir.x)>CUBEHIT_THLD) {    //Don't shoot parallel to X plane\n        vec4 hitx0 = HitXPlane(camera_pos, camera_dir, 0.0);\n            //coords and t of X=0 hit\n        vec4 hitx1 = HitXPlane(camera_pos, camera_dir, 1.0);\n        if(hitx0.w<hitx1.w) {   // check X=0 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hitx0.yz);\n            wc_pixel = hitx0.xyz;\n            wc_normal = vec3(-1.0, 0.0, 0.0);\n                // The X=0 face has a normal pointing -X\n            ambient = vec3(0.1, 0.0, 0.0);\n            diffuse = vec3(0.5, 0.0, 0.0);\n        } else {            // check X=1 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hitx1.yz);\n            wc_pixel = hitx1.xyz;\n            wc_normal = vec3(1.0, 0.0, 0.0);\n                // The X=1 face has a normal pointing -X\n            ambient = vec3(0.1, 0.0, 0.0);\n            diffuse = vec3(1.0, 0.0, 0.0);\n        } //endif hit X=0 else\n    } //endif not parallel to X\n    if(did_hit) return true;\n\n    // Y faces\n    if(abs(camera_dir.y)>CUBEHIT_THLD) {    //Don't shoot parallel to Y plane\n        vec4 hity0 = HitYPlane(camera_pos, camera_dir, 0.0);\n        vec4 hity1 = HitYPlane(camera_pos, camera_dir, 1.0);\n        if(hity0.w<hity1.w) {   // check Y=0 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hity0.xz);\n            wc_pixel = hity0.xyz;\n            wc_normal = vec3(0.0, -1.0, 0.0);\n            ambient = vec3(0.0, 0.1, 0.0);\n            diffuse = vec3(0.0, 0.5, 0.0);\n        } else {            // check Y=1 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hity1.xz);\n            wc_pixel = hity1.xyz;\n            wc_normal = vec3(0.0, 1.0, 0.0);\n            ambient = vec3(0.0, 0.1, 0.0);\n            diffuse = vec3(0.0, 1.0, 0.0);\n        } //endif hit Y=0 else\n    } //endif not parallel to Y\n    if(did_hit) return true;\n\n    // Z faces\n    if(abs(camera_dir.z)>CUBEHIT_THLD) {    //Don't shoot parallel to Z plane\n        vec4 hitz0 = HitZPlane(camera_pos, camera_dir, 0.0);\n            //coords and t of Z=0 hit\n        vec4 hitz1 = HitZPlane(camera_pos, camera_dir, 1.0);\n            // NOTE: may get unpredictable values when looking down the +Z axis\n        if(hitz0.w<hitz1.w) {   // check Z=0 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hitz0.xy);\n            wc_pixel = hitz0.xyz;\n            wc_normal = vec3(0.0, 0.0, -1.0);\n            ambient = vec3(0.0, 0.0, 0.1);\n            diffuse = vec3(0.0, 0.0, 0.5);\n        } else {            // check Z=1 hit\n            did_hit = IsPointInRectXY(vec4(0,0,1,1), hitz1.xy);\n            wc_pixel = hitz1.xyz;\n            wc_normal = vec3(0.0, 0.0, 1.0);\n            ambient = vec3(0.0, 0.0, 0.1);\n            diffuse = vec3(0.0, 0.0, 1.0);\n        } //endif hit Z=0 else\n    } //endif not parallel to Z\n    if(did_hit) return true;\n\n    return false;\n} //cube_hit\n\n// }}}1\n\n// CHARSET AND WORLD-COORDINATE LETTERS ///////////////\n// {{{1\n/*\n     00000\n   1   2   3\n   1   2   3\n   1   2   3\n     44444\n   5       6\n   5       6\n  858      6\n  88877777\n  888\n(lowercase x, dot, and bang are handled separately)\n*/\n\n// Character storage\n#define NSEGS (9)\nvec4 SEG_SHAPES[NSEGS];\n    // All polys will be quads in the X-Y plane, Z=0.\n    // All quad edges are parallel to the X or Y axis.\n    // These quads are encoded in a vec4: (.x,.y) is the LL corner and\n    // (.z,.w) is the UR corner (coords (x,y)).\n\n// Grid parameters\n#define GRID_CHARHT (10.0)\n#define GRID_CHARWD (6.0)\n    // Size of each character\n#define GRID_PITCH (7.0)\n    //each char takes up this much space.  Margin is added on the right.\n#define GRID_PITCH_RECIP (0.14285714285714285714285714285714)\n    // avoid a division\n#define THICKNESS (1.0)\n    // how thick each stroke is\n\n#define GRID_VSQUISH (0.5)\n    // How much letters are squished vertically after they are rotated,\n    // i.e., along the X axis\n#define GRID_VPITCH (6.0)\n#define GRID_VPITCH_RECIP (0.16666666666666666666666666666667)\n    // The pitch on the X axis _after_ CHARHT is multiplied by VSQUISH.\n\n/*\n    For upright chars, each char (X,Y) goes from (PITCH*ofs, 0)->(.+WD,HT).\n    For sideways chars, (VPITCH*ofs, 0)->(.+HT, WD).\n    Rotation is 90 deg CCW.\n*/\n\nvoid init_charset()\n{\n    float halft = THICKNESS*0.5;\n    float halfht = GRID_CHARHT * 0.5;\n\n    SEG_SHAPES[0] = vec4(THICKNESS, GRID_CHARHT - THICKNESS, GRID_CHARWD-THICKNESS, GRID_CHARHT);\n    SEG_SHAPES[1] = vec4(0.0,                   halfht, THICKNESS,             GRID_CHARHT - halft);\n    SEG_SHAPES[2] = vec4(GRID_CHARWD*0.5-halft, halfht, GRID_CHARWD*0.5+halft, GRID_CHARHT - halft);\n    SEG_SHAPES[3] = vec4(GRID_CHARWD-THICKNESS, halfht, GRID_CHARWD,           GRID_CHARHT - halft);\n    SEG_SHAPES[4] = vec4(THICKNESS, halfht - halft, GRID_CHARWD-THICKNESS, halfht + halft);\n    SEG_SHAPES[5] = vec4(0.0,                   halft,    THICKNESS,             halfht );\n    SEG_SHAPES[6] = vec4(GRID_CHARWD-THICKNESS, halft,    GRID_CHARWD,           halfht );\n    SEG_SHAPES[7] = vec4(THICKNESS, 0, GRID_CHARWD-THICKNESS, THICKNESS);\n    SEG_SHAPES[8] = vec4(0.0, 0.0, THICKNESS, THICKNESS); //dot\n}\n\n// Text-rendering internal parameters\n#define LETTER_EPSILON (0.001)\n    // small enough for our purposes.\n#define SIDE_LETTERS (4)\n    // How many letters to render on each side of the current one.\n    // Set to fill the screen at the desired aspect ratio and orientation.\n\nbool is_in_zzero_message(in vec2 world_xy_of_point,\n                         in float middle_charidx, in float middle_x,\n                         in float clip_charidx)\n{   // returns true iff world_xy_of_point is in a letter\n    // upright in the z=0 plane.\n    // Letters are extracted from the message, with message[middle_charidx]\n    // being displayed with its LL corner at (middle_x, 0, 0).\n    // Characters starting from clip_charidx are not hit.\n\n    // Check each letter in turn\n    for(int ltr_idx=0; ltr_idx<(2*SIDE_LETTERS+1); ++ltr_idx) {\n        float letter_delta = float(ltr_idx-SIDE_LETTERS-1);\n        float thisletterindex = letter_delta + middle_charidx;\n            // so the middle element of ltr_idx maps to middle_charidx\n\n        if(thisletterindex >= clip_charidx) {\n            break;  // no more letters\n        }\n\n        float mask = get_seg_mask(thisletterindex);\n            // the segments for this letter\n\n        // Early exit on spaces\n        if(mask <= LETTER_EPSILON) {\n            continue; //to next letter\n        }\n\n        // Where is this letter on the X axis?\n        float ofs = (letter_delta*GRID_PITCH) + middle_x;\n\n        // check each segment in turn\n        for(int seg_idx=0; seg_idx<NSEGS; ++seg_idx) {\n            if(mod(mask, 2.0)>LETTER_EPSILON) {\n                // Where is this segment of this letter?\n                vec4 theshape = SEG_SHAPES[seg_idx];\n                theshape += vec4(ofs, 0.0, ofs, 0.0);\n                    //shift it over to the right place\n\n                // Check if we are in the segment\n                if(IsPointInRectXY(theshape, world_xy_of_point)) {\n                    return true;    // as soon as we're in a segment, we don't need to check any others\n                }\n\n            } //endif this segment is in mask\n\n            mask = floor(mask * 0.5);\n                //move to next bit and drop fractional part\n\n            // Early exit when you run out of segments\n            if(mask<=LETTER_EPSILON) {\n                break; //to next letter\n            }\n        } //foreach segment\n\n    } //foreach letter\n\n    return false;\n} //is_in_zzero_message\n\nbool is_in_zzero_sine_message(in vec2 world_xy_of_point,\n                         in float middle_charidx, in float middle_x,\n                         in float clip_charidx,\n                         in float cam_look_at_x)\n{   // returns true iff world_xy_of_point is in a letter\n    // upright in the z=0 plane, sinescrolled.\n    // Letters are extracted from the message, with message[middle_charidx]\n    // being displayed with its LL corner at (middle_x, 0, 0).\n    // Characters starting from clip_charidx are not hit.\n\n    // Check each letter in turn\n    for(int ltr_idx=0; ltr_idx<(2*SIDE_LETTERS+1); ++ltr_idx) {\n        float letter_delta = float(ltr_idx-SIDE_LETTERS-1);\n        float thisletterindex = letter_delta + middle_charidx;\n            // so the middle element of ltr_idx maps to middle_charidx\n\n        if(thisletterindex >= clip_charidx) break;  // no more letters\n        float mask = get_seg_mask(thisletterindex);\n        if(mask <= LETTER_EPSILON) continue; //to next letter on space\n\n        // Where is this letter?\n        float xofs = (letter_delta*GRID_PITCH) + middle_x;\n        float yofs = (0.5*sin(\n                        TWO_PI*S_SINE_FREQ*xofs -\n                        TWO_PI*S_SINE_GROUP_FREQ*cam_look_at_x\n                     )) * GRID_CHARHT; // Each letter has its own phase\n\n        // check each segment in turn\n        for(int seg_idx=0; seg_idx<NSEGS; ++seg_idx) {\n            if(mod(mask, 2.0)>LETTER_EPSILON) {\n                // Where is this segment of this letter?\n                vec4 theshape = SEG_SHAPES[seg_idx];\n                theshape += vec4(xofs, yofs, xofs, yofs);\n                    //shift it over to the right place\n                // Check if we are in the segment\n                if(IsPointInRectXY(theshape, world_xy_of_point)) {\n                    return true;    // as soon as we're in a segment, we don't need to check any others\n                }\n            } //endif this segment is in mask\n\n            mask = floor(mask * 0.5);   // Next segment\n\n            if(mask<=LETTER_EPSILON) break; //to next letter if no more segs\n        } //foreach segment\n    } //foreach letter\n    return false;\n} //is_in_zzero_sine_message\n\nbool is_in_sideways_message(in vec2 world_xy_of_point,\n                            in float middle_charidx, in float middle_x,\n                            in float clip_charidx)\n{   // returns true iff world_xy_of_point is in a letter\n    // sideways in the z=0 plane.\n    // Letters are extracted from the message, with message[middle_charidx]\n    // being displayed with its UL corner (i.e., the LL corner of its\n    // bounding box) at (middle_x, 0, 0).\n\n    // Check each letter in turn\n    for(int ltr_idx=0; ltr_idx<(2*SIDE_LETTERS+1); ++ltr_idx) {\n        float letter_delta = float(ltr_idx-SIDE_LETTERS-1);\n        float thisletterindex = letter_delta + middle_charidx;\n            // so the middle element of ltr_idx maps to base_letterindex\n\n        if(thisletterindex >= clip_charidx) {\n            break;  // no more letters\n        }\n\n        float mask = get_seg_mask(thisletterindex);\n            // the segments for this letter\n\n        // Early exit on spaces\n        if(mask <= LETTER_EPSILON) {\n            continue; //to next letter\n        }\n\n        // Determine the offset of the current letter\n        float ofs = letter_delta*GRID_VPITCH + middle_x;\n            // GRID_VPITCH*0.5;\n            // + pitch/0.5 because letters were snapping into\n            // existence at the right side of the screen.\n\n        // check each segment in turn\n        for(int seg_idx=0; seg_idx<NSEGS; ++seg_idx) {\n            if(mod(mask, 2.0)>LETTER_EPSILON) {\n                // Where is this segment of this letter, rotated 90 deg CCW?\n                vec4 theshape = SEG_SHAPES[seg_idx].wxyz;\n                theshape.xz = vec2(GRID_CHARHT) - theshape.xz;\n                    // The effect of these two lines is to\n                    // 1. swap X and Y components of both corners - CW rotation\n                    // 2. swap ends so it's a CCW rotation\n                    // 3. Rearrange so we have LL and UR corners rather than\n                    // UL and LR corners.\n\n                theshape *= vec4(GRID_VSQUISH, 1.0, GRID_VSQUISH, 1.0);\n                    // Shrink the letters along X, i.e., vertically from the\n                    // letter's point of view.\n                theshape += vec4(ofs, 0.0, ofs, 0.0);\n                    //shift it over to the right place\n\n                // Check if we are in the segment\n                if(IsPointInRectXY(theshape, world_xy_of_point)) {\n                    return true;    // as soon as we're in a segment, we don't need to check any others\n                }\n\n            } //endif this segment is in mask\n\n            mask = floor(mask * 0.5);\n                //move to next bit and drop fractional part\n\n            // Early exit when you run out of segments\n            if(mask<=LETTER_EPSILON) {\n                break; //to next letter\n            }\n        } //foreach segment\n\n    } //foreach letter\n\n    return false;\n} //is_in_sideways_message\n\nvec4 is_in_standard_zzero(in vec3 camera_pos, in vec3 rayend,\n        in float charidx_frac, in float first_charidx,\n        in float clip_charidx)\n{   //Helper for the common check for straight ZZero text.\n    //Returns .w==1.0 if hit, else 0.0.  If hit, .xyz are the hitlocn.\n\n    vec3 hitlocn = HitZZero(camera_pos, rayend);\n        // hitlocn is where it hits z=0, where the letters are\n\n    // Determine the offset of the current letter\n    float curr_charidx = floor(charidx_frac);\n    float ofs = curr_charidx*GRID_PITCH + GRID_PITCH*0.5;\n        // + pitch/0.5 because letters were snapping into\n        // existence at the right side of the screen.\n\n    if(is_in_zzero_message(hitlocn.xy,\n                            curr_charidx+first_charidx,\n                            ofs, clip_charidx)) {\n        return vec4(hitlocn, 1.0);\n    }\n\n    return vec4(0.0);   //else return no-hit\n} //is_in_standard_zzero\n\n// }}}1\n\n// ARTISTRY ///////////////////////////////////////////\n// {{{1\n\n#define COLORCYL_EPS (0.1)\n#define COLORCYL_X_GRID_PITCH (50.0)\n\nvec3 color_cylinder(in vec4 cyl, in float time)\n{   //takes the result of cylinder_hit and returns a diffuse color.\n    // Used by CYL and TUNNEL.\n    vec3 diffuse;\n    if(mod(cyl.x,COLORCYL_X_GRID_PITCH)<COLORCYL_EPS ||\n       mod(cyl.a,PI*0.5)<0.01) {        //grid\n        diffuse = vec3(0.0);\n    } else {                            // colored background\n        float hue_0_to_1 = (cyl.a+PI)*ONE_OVER_TWO_PI;\n            // cyl.a is atan2 output [-PI,PI].  Move to [0,2PI], then scale to [0,1].\n        float value_0_to_1 = smoothstep(0.0, 10.0, time)*0.5;\n            // Fade in the cylinder over 10 sec.\n        diffuse = hsv2rgb(vec3(hue_0_to_1,mod(cyl.x,1.0),value_0_to_1));\n    }\n    return diffuse;\n} //color_cylinder\n\n// }}}1\n\n// CAMERA AND LIGHT ///////////////////////////////////\n// {{{1\n\n// --- Helpers ---\n\n#define GAMMA (2.2)\n#define ONE_OVER_GAMMA (0.45454545454545454545454545454545)\n\nvec3 do_phong(in vec3 pixel_pos, in vec3 wc_normal, in vec3 camera_pos,\n                in vec3 light_pos, in vec3 ambient,\n                in vec3 diffuse, in float shininess)\n{   // Compute Phong shading.  Modified from\n    // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\n    // wc_normal must be normalized on input.  All inputs are world coords.\n    // Set shininess negative to turn off specular highlights.\n    vec3 lightDir = normalize(light_pos - pixel_pos);\n    float lambertian = max(dot(lightDir,wc_normal), 0.0);\n    float specular = 0.0;\n\n    if((lambertian > 0.0) && (shininess >= 0.0)) {\n        vec3 viewDir = normalize(camera_pos-pixel_pos);\n        vec3 reflectDir = reflect(-lightDir, wc_normal);\n        float specAngle = max(dot(reflectDir, viewDir), 0.0);\n        specular = pow(specAngle, shininess);\n    }\n    /*\n    return pow(ambient + lambertian*diffuse + specular*vec3(1.0),\n                vec3(ONE_OVER_GAMMA));\n        // Do I need this?\n    */\n    return ambient + lambertian*diffuse + specular*vec3(1.0);\n\n} //do_phong\n\nhighp vec3 pos_clelies(in float time, in float radius)\n{   //Clelies curve\n    //thanks to http://wiki.roblox.com/index.php?title=Parametric_equations\n    vec3 pos; float m = 0.8;\n    highp float smt = sin(m*time);\n    pos.x = radius * smt*cos(time);\n    pos.y = radius * smt*sin(time);\n    pos.z = radius * cos(m*time);\n    return pos;\n} //camerapos\n\n// --- Per-part routines ---\n\nvoid do_cl_nop(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_s_plain(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_PITCH-5.0, GRID_CHARHT*0.5 + 1.5, 10.0);\n    camera_look_at = vec3(camera_pos.x+3.0, GRID_CHARHT*0.5,0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 30.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_starwars(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_VPITCH-5.0, GRID_CHARWD*0.5, 5.0);\n    camera_look_at = vec3(camera_pos.x-10.0, camera_pos.y, 0.0);\n    camera_up = vec3(-1.0,0.0,0.0);\n    fovy_deg = 15.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_s_zoom(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_PITCH, GRID_CHARHT*0.5,\n                        5.0*sin(charidx_frac)+10.0); //z from 5 to 15\n    camera_look_at = vec3(camera_pos.xy,0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = vec3(camera_pos.x+GRID_PITCH, camera_pos.yz);\n}\n\nvoid do_cl_s_sine(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_PITCH,\n                        GRID_CHARHT*(0.5 /*+sin(charidx_frac)*/ ), 10.0);\n    camera_look_at = vec3(camera_pos.xy,0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_s_roto(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_PITCH, GRID_CHARHT*0.5, 10.0);\n    camera_look_at = vec3(camera_pos.xy,0.0);\n    //Rotation\n    float c = cos(charidx_frac), s = sin(charidx_frac);\n    mat2 rot_2d = mat2(vec2(c,s), vec2(-s,c));\n    camera_up = vec3(rot_2d*vec2(0.0, 1.0),0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n} //do_cl_s_roto\n\nvoid do_cl_bold(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(1.6*GRID_PITCH+0.5*GRID_PITCH,0.7*GRID_CHARHT,10.0);\n        // So I can use is_in_standard_zzero ^^^\n    camera_look_at = vec3(camera_pos.x, 0.5*GRID_CHARHT, 0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 35.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_cyl(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    // DEBUG: for now, just use plain\n    do_cl_s_plain(partnum, charidx_frac, camera_pos, camera_look_at,\n                    camera_up, fovy_deg, light_pos);\n    return;\n    /*\n    // DEBUG: Currently using this as a sphere tester\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = pos_clelies(charidx_frac, 20.0);\n    */\n}\n\nvoid do_cl_tunnel(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    vec3 cyl_cam_at, cyl_cam_look;\n\n    float actual_time = charidx_frac + TUNNEL_START;\n        // works because rate=1 for tunnel\n    float synth_cyl_charidx_frac = (actual_time-CYL_START)*4.0;\n        // copied from get_story.  Where we would be if CYL had continued.\n\n    // Transition smoothly from cyl to tunnel.  First, get where we\n    // would have been in CYL.\n    do_cl_cyl(partnum, synth_cyl_charidx_frac, cyl_cam_at, cyl_cam_look,\n                camera_up, fovy_deg, light_pos);\n\n    float x_at_cyl_plus_2sec =\n        (TUNNEL_START + 2.0 - CYL_START)*4.0*GRID_PITCH-5.0;\n        // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ relative time in CYL for TUNNEL+2sec\n        //                  ^^^^^^^^^^^^^^^^ rate from get_story\n        //                                  ^^^^^^^^^^^^^^^ x from cl_cyl\n\n    vec3 tun_cam_at, tun_cam_look;\n\n    tun_cam_at = vec3(cyl_cam_at.x /*x_at_cyl_plus_2sec*/, 0.0, 0.0);\n        // Over 2 sec., transition to same X but yz=0.\n    tun_cam_look = vec3(cyl_cam_at.x+8.0, 0.0, 0.0);  //straight down the X axis\n        // rotate look_at based on current x\n\n    float ratio = smoothstep(0.0, 2.0, charidx_frac);\n        // move the camera over 2 sec. (since, for tunnel,\n        // charidx_frac===time_in_part).\n    vec3 camera_pos_transition = mix(cyl_cam_at, tun_cam_at, ratio);\n    vec3 look_at_transition = mix(cyl_cam_look, tun_cam_look, ratio);\n\n    // wobble the look_at after the transition\n    float radius = smoothstep(2.0, 10.0, charidx_frac)*6.0;\n    float delta_t = charidx_frac-2.0;\n    vec3 wobble = vec3(0.0, radius*cos(delta_t), radius*sin(delta_t));\n    //camera_look_at = look_at_transition + wobble;\n\n    // Post-transition, also accelerate.\n    float cyl_xspeed_at_2sec = 4.0*GRID_PITCH;   // rate 4 cps per get_story\n    float newx = x_at_cyl_plus_2sec +\n                    (cyl_xspeed_at_2sec*delta_t) +\n                    (0.5*TUNNEL_ACCEL*delta_t*delta_t);\n    vec3 camera_pos_accel = vec3(newx, 0.0, 0.0);\n    vec3 look_at_accel = vec3(camera_pos_accel.x+6.0, wobble.yz);\n\n    // Hard cutover between transition and accel at 2.0 sec.\n    // They are set up to overlap, so it works OK.\n    camera_pos =\n        mix(camera_pos_transition, camera_pos_accel, step(0.0, delta_t));\n    camera_look_at = mix(look_at_transition,\n                            look_at_accel, step(0.0, delta_t));\n\n} //do_cl_tunnel\n\nvoid do_cl_copout(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    // DEBUG: for now, just use plain\n    do_cl_s_plain(partnum, charidx_frac, camera_pos, camera_look_at,\n                    camera_up, fovy_deg, light_pos);\n    return;\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_twosided(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    float theta = sin(charidx_frac*TWOSIDED_RATE);\n    camera_pos = vec3(charidx_frac*GRID_PITCH-20.0, GRID_CHARHT*0.5 + 1.5,\n        theta*10.0);\n    camera_look_at = vec3(camera_pos.x+3.0, GRID_CHARHT*0.5,0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n} //do_cl_twosided\n\nvoid do_cl_s_plasma(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    camera_pos = vec3(charidx_frac*GRID_PITCH+5.0, GRID_CHARHT*0.5 + 1.5, 10.0);\n    camera_look_at = vec3(camera_pos.x-3.0, GRID_CHARHT*0.5,0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 30.0;\n    light_pos = camera_pos;\n} //do_cl_s_plasma\n\nvoid do_cl_s_credz(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{\n    // DEBUG: for now, just use plain\n    do_cl_s_plain(partnum, charidx_frac, camera_pos, camera_look_at,\n                    camera_up, fovy_deg, light_pos);\n    return;\n    camera_pos = vec3(0.0,0.0,10.0);    //default\n    camera_look_at = vec3(0.0);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 45.0;\n    light_pos = camera_pos;\n}\n\nvoid do_cl_cube(in float partnum, in float charidx_frac, out vec3 camera_pos,\n     out vec3 camera_look_at, out vec3 camera_up, out float fovy_deg,\n     out vec3 light_pos)\n{   // for CUBE, charidx_frac is actually time_in_part.\n    camera_pos = pos_clelies(charidx_frac, 10.0);\n    camera_pos.xyz += vec3(0.5, 0.5, 0.5);\n        // Look at the center of a unit cube from (0,0,0) to (1,1,1)\n    camera_look_at = vec3(0.5);\n    camera_up = vec3(0.0, 1.0, 0.0);\n    fovy_deg = 5.0;\n    light_pos = pos_clelies(charidx_frac, 20.0);\n} //do_cl_cube\n\n// }}}1\n\n// MAIN ///////////////////////////////////////////////\n// {{{1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Init\n    float time = iTime;\n        // TODO sometime fix the double image at TWOSIDED_START - 2.0 + 4.72 :)\n    init_charset();\n\n    // --- Story ---\n    vec4 story = get_story(time);\n    float partnum=story[0], charidx_frac=story[1];\n    float first_charidx=story[2], clip_charidx=story[3];\n\n    // --- Camera and light ---\n    vec3 camera_pos, camera_look_at, camera_up, light_pos;\n    float fovy_deg;\n\n    float cl_charidx_frac = mix(time - CUBE_START, charidx_frac,\n                                clamp(distance(partnum, CUBE), 0.0, 1.0)\n                               );\n        // i.e., if partnum == CUBE, distance=0, so fixed at time-CUBE_START.\n        // otherwise, distance(...)>=1.0, so charidx_frac.\n        // And no if/then :)\n\n    do_camera_light(partnum, cl_charidx_frac,\n        camera_pos, camera_look_at, camera_up, fovy_deg, light_pos);\n\n    // Camera processing\n    mat4 view, view_inv;\n    lookat(camera_pos, camera_look_at, camera_up,\n            view, view_inv);\n\n    mat4 proj, proj_inv;\n    gluPerspective(fovy_deg, iResolution.x/iResolution.y, 1.0, 10.0,\n                    proj, proj_inv);\n\n    mat4 viewport, viewport_inv;\n    compute_viewport(0.0, 0.0, iResolution.x, iResolution.y,\n                        viewport, viewport_inv);\n\n    // --- Geometry ---\n\n    vec3 rayend = WorldRayFromScreenPoint(fragCoord,\n                                    view_inv, proj_inv, viewport_inv).xyz;\n        // rayend-camera_pos is the direction of the ray\n\n    // Each part determines world coords of the hit, normal at the\n    // hit point, and base color of the geometry.\n\n    vec3 wc_pixel;  // world coords of this pixel\n    vec3 wc_normal; // ditto for the normal\n    vec3 ambient = vec3(0.0);\n    vec3 diffuse = vec3(0.0);\n        // material - light is always white.  Alpha is always 1.\n    float shininess = 4.0;  //Phong shininess\n    bool did_hit = false;   //if not did_hit, just use _diffuse_.\n\n    if((partnum != NOP) && (partnum != STARWARS) &&\n        (partnum != S_SINE) && (partnum != BOLD) &&\n        (partnum != CYL) && (partnum != TUNNEL) &&\n        (partnum != CUBE)) {        // Basic scrollers\n\n        vec4 hit_data = is_in_standard_zzero(camera_pos, rayend,\n                            charidx_frac, first_charidx, clip_charidx);\n        if(hit_data.w>0.0) {\n            did_hit = true;\n            wc_pixel = hit_data.xyz;\n            wc_normal = vec3(0.0,0.0,-1.0 + 2.0*step(0.0, camera_pos.z));\n                // normal Z is -1 if camera_pos.z<0.0, and +1 otherwise.\n                // This benefits TWOSIDED.\n            ambient = vec3(0.2, 0.2, 0.1);\n            diffuse = vec3(0.6,0.6,0.3);\n            shininess = 20.0;\n        }  // else diffuse is the default (0,0,0).\n    } else //endif S_PLAIN and others\n\n    if(partnum == STARWARS) {   // see is_in_standard_zzero for explanation\n        vec3 hitlocn = HitZZero(camera_pos, rayend);\n        float curr_charidx = floor(charidx_frac);\n        float ofs = curr_charidx*GRID_VPITCH;\n\n        if(is_in_sideways_message(hitlocn.xy,\n                                    curr_charidx+first_charidx,\n                                    ofs, clip_charidx)) {\n            did_hit = true;\n            wc_pixel = hitlocn;\n            wc_normal = vec3(0.0,0.0,1.0);\n            ambient = vec3(0.0, 0.2, 0.2);\n            diffuse = vec3(0.0,1.0,1.0);\n            shininess = 1.0;\n        }\n    } else //endif STARWARS\n\n    if(partnum == S_SINE) {\n        vec3 hitlocn = HitZZero(camera_pos, rayend);\n        float curr_charidx = floor(charidx_frac);\n        float ofs = curr_charidx*GRID_PITCH + GRID_PITCH*0.5;\n\n        if(is_in_zzero_sine_message(hitlocn.xy,\n                                curr_charidx+first_charidx,\n                                ofs, clip_charidx,\n                                camera_look_at.x)) {\n            did_hit = true;\n            wc_pixel = hitlocn;\n            wc_normal = vec3(0.0,0.0,1.0);\n            ambient = vec3(0.1, 0.2, 0.1);\n            diffuse = vec3(0.3,0.9,0.3);\n            shininess = 20.0;\n        }  // else diffuse is the default (0,0,0).\n    } else //endif S_SINE\n\n    if(partnum == BOLD) {\n        vec4 hit_data = is_in_standard_zzero(camera_pos, rayend,\n                            3.0, first_charidx, clip_charidx);\n        if(hit_data.w>0.0) {\n            did_hit = true;\n            wc_pixel = hit_data.xyz;\n            wc_normal = vec3(0.0,0.0,1.0);\n            shininess = -1.0;   //just the texture\n            ambient = vec3(0.0);\n\n            // Do some palette animation\n            vec2 tex_coord;\n            tex_coord.s = hit_data.x / ((clip_charidx-first_charidx)*GRID_PITCH);\n            tex_coord.t = hit_data.y / GRID_CHARHT;\n            vec4 tex = texture(iChannel1, tex_coord);\n            float hue = mod(time+tex.b, 1.0);\n            diffuse = hsv2rgb(vec3(hue,0.7,1.0));\n\n            float howmuch = smoothstep(3.0, 5.0, time-BOLD_START);\n            diffuse = mix(diffuse, vec3(0.0), howmuch);\n        } //endif did hit\n    } else //endif BOLD\n\n    if(partnum == CYL) {\n        /*  // a sphere, for debug\n        wc_pixel = sphere_hit(camera_pos, rayend, vec3(0.0), 4.0);\n        if(length(wc_pixel)>0.0) {\n            did_hit = true;\n            wc_normal = normalize(wc_pixel);    //centered at the origin\n            ambient = vec3(0.3, 0.0, 0.3);\n            diffuse = vec3(0.3,0.0,0.3);\n        }\n        */\n        shininess = 20.0;\n        vec4 hit_data = is_in_standard_zzero(camera_pos, rayend,\n                            charidx_frac, first_charidx, clip_charidx);\n        if(hit_data.w>0.0) {\n            did_hit = true;\n            wc_pixel = hit_data.xyz;\n            wc_normal = vec3(0.0,0.0,1.0);\n            ambient = vec3(0.1, 0.2, 0.2);\n            diffuse = vec3(0.3,0.6,0.6);\n        } else {    //Test it against the cylinder\n            ambient = vec3(0.1);\n            vec4 cyl = cylinder_hit(CYL_RADIUS, camera_pos, rayend);\n                // xyz,\\theta\n            wc_normal = normalize(vec3(0.0, -cyl.yz));\n                // Normal is always straight inward, so no X component.\n                // Cylinder is centered around axis, so negate y and z.\n\n            diffuse = color_cylinder(cyl, time-CYL_START);\n        } //endif text else cylinder\n    } else //endif CYL\n\n    if(partnum==TUNNEL) {\n        shininess = 20.0;\n        ambient = vec3(0.1);\n        // TODO fog out the center\n        vec4 cyl = cylinder_hit(CYL_RADIUS, camera_pos, rayend);\n            // xyz,\\theta\n        wc_normal = normalize(vec3(0.0, -cyl.yz));\n            // Normal is always straight inward, so no X component.\n            // Cylinder is centered around axis, so negate y and z.\n\n        vec3 cyldiffuse = color_cylinder(cyl, time-CYL_START);\n            // CYL_START, not TUNNEL_START, for continuity\n        float ratio = smoothstep(S_SINE_START-2.0, S_SINE_START, time);\n            //over the last 2.0 seconds of TUNNEL, before S_SINE...\n        diffuse = mix(cyldiffuse, vec3(0.0), ratio);\n            //... fade out the cylinder\n\n    } else //endif TUNNEL\n\n    if(partnum==CUBE) {     // End scene - cube and logo\n        shininess = 10.0;\n\n        // Check the logo first.  7 letters - fixed\n\n        // The logo has its own camera.\n        // Note that the lighting of the logo will still use\n        // the cube's camera_pos.\n\n        vec3 logo_camera_pos = vec3(7.0*0.5*GRID_PITCH,\n                        GRID_CHARHT * 0.2 /* GRID_CHARHT*0.5 */, 10.0);\n        mat4 logo_view, logo_view_inv;\n        lookat( logo_camera_pos,\n                vec3(logo_camera_pos.x, GRID_CHARHT * 0.6, 0.0),  //look_at\n                vec3(0.0,1.0,0.0),              //camera_up\n                logo_view, logo_view_inv);\n\n        mat4 logo_proj, logo_proj_inv;\n        gluPerspective(55.0, iResolution.x/iResolution.y, 1.0, 10.0,\n                        logo_proj, logo_proj_inv);\n\n        // Don't recompute viewport - it's the same\n        vec3 logo_rayend = WorldRayFromScreenPoint(fragCoord,\n                        logo_view_inv, logo_proj_inv, viewport_inv).xyz;\n        // rayend-camera_pos is the direction of the ray\n\n        vec3 logo_hitlocn = HitZZero(logo_camera_pos, logo_rayend);\n        // hitlocn is where it hits z=0, where the letters are\n\n        // Determine the offset of the current letter\n        float logo_curr_charidx = 3.0;   //always the middle one\n        float logo_ofs = logo_curr_charidx*GRID_PITCH;\n\n        if(is_in_zzero_message(logo_hitlocn.xy,\n                                logo_curr_charidx+first_charidx,\n                                logo_ofs, clip_charidx)) {\n            did_hit = true;\n            wc_pixel = logo_hitlocn;\n            wc_normal = vec3(0.0,0.0,1.0);\n            ambient = vec3(0.3, 0.3, 0.1);\n            diffuse = vec3(1.0,1.0,0.0);\n            shininess = 10.0;\n\n        } else {    //Check for a hit on the cube\n            vec3 tempdiffuse;   // since diffuse always gets trashed\n            did_hit = cube_hit(camera_pos, rayend, wc_pixel, wc_normal,\n                                    ambient, tempdiffuse);\n            if(did_hit) {\n                diffuse = tempdiffuse;\n            }\n\n        } //endif didn't hit logo else\n\n    } //endif CUBE\n\n    // --- Lighting ---\n    // Phong shading based on the Geometry section's output values\n\n    if(did_hit) {               // a hit\n        fragColor = vec4(\n            do_phong(wc_pixel, wc_normal, camera_pos, light_pos,\n                        ambient, diffuse, shininess),\n            1.0);\n        if(partnum == CUBE) {\n            // fade in the colors\n            float fade = smoothstep(0.0, CUBE_FADEIN_TIME, time-CUBE_START);\n            fragColor = mix(vec4(0.0,0.0,0.0,1.0), fragColor, fade);\n        } //endif cube\n\n    } else {                    // no hit - just use diffuse\n        fragColor = vec4(diffuse, 1.0);\n    }\n\n} //mainImage\n\n// }}}1\n\n// vi: set ts=4 sts=4 sw=4 et ai foldmethod=marker foldenable foldlevel=0: //\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//music.frag\n// by cxw/incline.  CC-BY-SA 3.0\n// Note frequencies: http://www.phy.mtu.edu/~suits/notefreqs.html\n// Working example from iq: https://www.shadertoy.com/view/ldXXDj\n\n// CONFIG /////////////////////////////////////////////\n\n// play it safe.\nprecision highp int;\nprecision highp float;\n    // per https://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf\n    // sec. 4.5.3, these precisions also cover vectors and matrices.\n\n#define PI (3.1415926535897932384626433832795028841971)\n    // from memory :)\n# define TWO_PI (6.283185307179586)\n#define ONE_OVER_TWO_PI (0.15915494309644431437107064141535)\n    // not from memory :) :)\n\n#define ONE_THIRD (0.3333333333333333333333333333333)\n\nfloat do_noise(in float time);\nfloat do_kick(in float beat_in_pattern, in float time_in_beat);\n    // constant each pattern throughout\nfloat do_snap(in float time, in float beat_in_pattern, in float time_in_beat);\nfloat do_clap(in float time, in float beat_in_pattern, in float time_in_beat);\n\n// Song parameters\n#define BPM (120.0)\n    // beats per min\n#define BPS (2.0)\n    // beats per sec\n#define SPB (0.5)\n    // sec per beat\n\n#define BPP (16.0)\n    // beats per pattern\n#define BPB (4.0)\n    // beats per bar\n\n// MAIN ///////////////////////////////////////////////\n\nvec2 mainSound( in int samp, float time )\n{\n    if(time<1.0) return vec2(0.0);\n    float tshift = time - 1.0;\n        // There seem to be some transients at startup - squelch them.\n\n    float beat_in_pattern = mod(tshift*BPS, BPP);\n        // including fraction\n    float time_in_beat = mod(tshift, SPB);\n\n    //Instruments\n    float noise = do_noise(tshift);\n    float kick = do_kick(beat_in_pattern, time_in_beat);\n    float snap = do_snap(tshift, beat_in_pattern, time_in_beat);\n    float clap = do_clap(tshift, beat_in_pattern, time_in_beat);\n\n    //Mixer\n    //return vec2(dot(vec3(kick, snap, clap),vec3(ONE_THIRD)));\n    return vec2((kick+snap+clap)*ONE_THIRD);\n    // --- EXIT POINT ---\n\n    // Chord\n    float TwoPiT = tshift*TWO_PI;\n    vec3 amplitudes = vec3(ONE_THIRD);\n    vec3 chord_notes =  //C4            E4                 G4\n        vec3(sin(TwoPiT*261.63), sin(TwoPiT*329.63), sin(TwoPiT*392.00));\n    float chord = dot(amplitudes, chord_notes);\n    float pan = (sin(time*0.5)+1.0)*0.5;      //0=L to 1=R\n    //return vec2(chord);\n    return vec2(mix(0.0, chord, 1.0-pan), mix(0.0, chord, pan));\n        // After an initial startup, it pans OK, but the notes of the chord\n        // come in one at a time.  Very strange.  I guess don't hold\n        // sustained notes :)\n} //mainSound\n\n#if 0\n// Sample from shadertoy\nvec2 mainSound( in int samp, float time )\n{\n    return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n}\n#endif\n\n// UTIL ///////////////////////////////////////////////\nfloat scale01(in float f)\n{   //rescale [0,1] to [-1,1]\n    return mix(-1.0, 1.0, clamp(f, 0.0, 1.0));\n}\n\n// NOISE //////////////////////////////////////////////\n\n#if 0\n// From https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n#endif\n\nfloat rand(vec2 co){\n    // From http://stackoverflow.com/a/4275343\n    // by http://stackoverflow.com/users/350875/appas\n    // Returns 0..1\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n// MUSIC //////////////////////////////////////////////\n\n// Instruments\nfloat do_noise(in float time)\n{\n    if(time<0.0) return 0.0;\n    float pixnum = time*iSampleRate;\n    vec2 texcoord;\n    texcoord.s = mod(pixnum, 256.0)/256.0;\n    texcoord.t = mod(floor(pixnum/256.0),256.0)/256.0;\n    return scale01(rand(texcoord)); //scale01(texture(iChannel0,texcoord).r);\n} //do_noise\n\n#define KICK_ATTACK (0.008)  //ms\n#define KICK_DSR (0.1)     //delay, sustain, release\n#define KSS (0.8000)    //Kick Syncopated Start - initially 0.9375\n    \n\nfloat do_kick(in float beat_in_pattern, in float time_in_beat)\n{\n    float local_time;   // note-on time\n\n    // Downbeat (0)\n    if(beat_in_pattern<0.5) local_time = time_in_beat;\n\n    //16th before beat 1\n    else if(beat_in_pattern<KSS) local_time=0.0; //0.0=>no sound\n    else if(beat_in_pattern<1.0) local_time = time_in_beat-(KSS*SPB);\n                // subtract the time in this beat that has already gone by.\n    //beat 1.5\n    else if(beat_in_pattern<1.5) local_time=0.0;\n    else if(beat_in_pattern<2.0) local_time = time_in_beat-(0.5*SPB);\n\n\n    // Beat 8\n    else if(beat_in_pattern<8.0) local_time=0.0;\n    else if(beat_in_pattern<8.5) local_time = time_in_beat;\n\n    //16th before beat 9\n    else if(beat_in_pattern<(8.0+KSS)) local_time=0.0; //0.0=>no sound\n    else if(beat_in_pattern<9.0) local_time = time_in_beat-(KSS*SPB);\n                // subtract the time in this beat that has already gone by.\n    //beat 9.5\n    else if(beat_in_pattern<9.5) local_time=0.0;\n    else if(beat_in_pattern<10.0) local_time = time_in_beat-(0.5*SPB);\n\n    //beat 10.5\n    else if(beat_in_pattern<10.5) local_time=0.0;\n    else if(beat_in_pattern<11.0) local_time = time_in_beat-(0.5*SPB);\n\n    else local_time = 0.0;\n\n    float kick_envelope = smoothstep(0.0,KICK_ATTACK,local_time) *\n                          (1.0-smoothstep(KICK_ATTACK,KICK_ATTACK+KICK_DSR,\n                                            local_time));\n    float kick = sin(80.0*TWO_PI*local_time)*kick_envelope;\n        //TODO chirp from 90 Hz down to 44 Hz over 100 ms - attack 30ms,\n        // decay the rest\n    return kick;\n} //do_kick\n\n// snap is 2205 Hz for 4 ms plus decaying noise for a total of 45 ms\n#define SNAP_TONE_TIME (0.004)\n#define SNAP_TONE_FREQ (2205.0)\n#define SNAP_NOISE_END_TIME (0.045)\n\nfloat do_snap(in float time, in float beat_in_pattern, in float time_in_beat)\n{\n    float beat_in_bar = mod(beat_in_pattern, BPB);\n    float local_time;   // note-on time\n\n    if(beat_in_bar<1.0) local_time = -1.0;\n    else if(beat_in_bar<1.2) local_time = time_in_beat;\n    else local_time = -1.0;\n\n    if(local_time<0.0) return 0.0;\n\n    float snap_tone_envelope = \n        1.0-smoothstep(0.0,SNAP_TONE_TIME,local_time);\n\n    float tone = sin(SNAP_TONE_FREQ*TWO_PI*local_time)*snap_tone_envelope;\n\n    //Noise\n    float snap_noise_envelope = \n        step(SNAP_TONE_TIME, local_time) *\n        (1.0-smoothstep(SNAP_TONE_TIME,SNAP_NOISE_END_TIME,local_time));\n\n    float pixnum = time*iSampleRate;\n    vec2 texcoord;\n    texcoord.s = mod(pixnum, 256.0)/256.0;\n    texcoord.t = mod(floor(pixnum/256.0),256.0)/256.0;\n\n    float noise = snap_noise_envelope*do_noise(time);\n\n    return 0.5*tone+0.5*noise;\n}\n\n// clap is about 60ms of noise with an initial decay of 8ms to about\n// half-amplitude.\n#define CLAP_TIME (0.060)\n#define CLAP_INITIAL_DECAY (0.008)\n\nfloat do_clap(in float time, in float beat_in_pattern, in float time_in_beat)\n{\n    float beat_in_bar = mod(beat_in_pattern, BPB);\n    float local_time;   // note-on time\n\n    //beat 4\n    if(beat_in_bar<3.0) local_time = -1.0;\n    else if(beat_in_bar<3.5) local_time = time_in_beat;\n    else local_time = -1.0;\n\n    if(local_time<0.0) return 0.0;\n\n    float initial_decay = \n        (1.0-step(CLAP_INITIAL_DECAY, local_time)) *    //1->0 at 8ms\n            mix(0.0, 0.5, clamp(local_time/CLAP_INITIAL_DECAY,0.0,1.0));\n                // 0@0, 0.5@8ms on\n    initial_decay = 1.0-initial_decay;  //1.0, dropping to 0.5@8ms, then\n                                        //back to 1.0\n    float noise_envelope = \n        1.0-smoothstep(0.0,CLAP_TIME,local_time);\n    float noise = noise_envelope * initial_decay * do_noise(time);\n    return noise;\n} //do_clap\n\n// TODO looks like at least one voice is a sin(f) + 0.2*sin(11*f)\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}