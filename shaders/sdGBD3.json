{
    "Shader": {
        "info": {
            "date": "1658901068",
            "description": "Another infinite roguelike dungeon map.",
            "flags": 8,
            "hasliked": 0,
            "id": "sdGBD3",
            "likes": 6,
            "name": "Infinite roguelike dungeon 3",
            "published": 3,
            "tags": [
                "maze",
                "dungeon",
                "labyrinth",
                "roguelike"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "float threshold = .9;\nint iters = 8;\n\n#define noise2D(p) float((p.x * 68657387u ^ p.y * 361524851u + p.x) % 890129u) / 890128.\n\nbool labyrinth(uvec2 U,float n2,bool b1){\n    bvec2 b = bvec2(U & 1u);\n    return (b.x && b.y || b.x != b.y  && n2 < abs(float(b1)-threshold));\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    uvec2 I = uvec2( U/8.+ iTime*8.);\n    O = vec4(1);\n    bool b = false,l=false;\n    uint sum = 0u;\n    float n = 0.;\n    for(int i = 0; i++ < iters;\n    //Multiply and divide by prime numbers to get interesting patterns\n    I = (I)*2u/3u+uvec2(i)*2u\n    //I = (I)*7u/11u+uvec2(i)*2u\n    ){\n        //vertical tunnels\n        //I.y += uint(n*2.);\n        \n        //I += uint(i/2+1);\n        n =\n            noise2D(I)\n            //(noise2D(I)-n/2.)\n        ;\n        //I += uvec2(i); //another interesting pattern\n        sum += uint(b);\n        //I -= sum+1u;\n        //I += uint(b);\n        l=labyrinth(I,n,b),\n        b =\n            !b || l\n            //!b||labyrinth(I,n,b)&&labyrinth(I/2u,n,b)\n            //!b || l && n < .5+sin(iTime)/2.\n            //!b && l\n        ;\n        O -= float(n > .125)/float(iters)/4.;\n        \n        //some random-looking distortion (using prime numbers)\n        //I += I.yx/(31u)-I.yx/(29u)+I.yx/(23u);\n    }\n    if (!b) O = 1.-O;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    return mod(floor(a),b);\n}\n\nvec2 mainSound1(int samp, float time){\n\n float t0=time, s1 =\n      8.\n ;\n  float f1 = floor(time*s1);\n  time *= 2.;\n  \n  float\n  m4 =\n      fmod(time,2.)\n  ,\n  t=\n      time\n  ,\n  m1 =\n      fmod(t,s1)\n  ,\n  m3 =\n      fmod(floor(t*m1/s1),s1)\n  ;\n\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n    \n  float a=sqrt((1.-sqrt(max(fract(t/s1/s1),fract(t/s1)))))*.2,\n\n  nb = 32.*pow(2.,(m3+m2)/5.+2.)/2.;\n\n  return abs(.5-vec2(fract(time*nb*.998)\n   ,fract(time*nb)))*a;\n\n}\n\nvec2 mainSound(int a,float b){\n    //b *= 4.;\n    return mainSound1(a,b)-mainSound1(a,b/2.)/2.-mainSound1(a,b/4.)/4.-mainSound1(a,b/8.)/8.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}