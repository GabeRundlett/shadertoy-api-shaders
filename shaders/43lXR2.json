{
    "Shader": {
        "info": {
            "date": "1709731494",
            "description": "Carousel with ducks (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "43lXR2",
            "likes": 22,
            "name": "Merry-Go-Round 2",
            "published": 3,
            "tags": [
                "grid",
                "carousel"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// \"Merry-Go-Round 2\" by dr2 - 2024\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrSphDf (vec3 p, float rc);\nfloat PrCylDf (vec3 p, float rc, float h);\nfloat PrCaps2Df (vec2 p, float rc, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrEllipsDf (vec3 p, vec3 rc);\nfloat PrEllCylDf (vec3 p, vec2 rc, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float v1, float v2, float rc);\nfloat SmoothBump (float lo, float hi, float wd, float ws);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float aa);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, gAng, nSec, aRot, sgH, sgA, bCylRad, bCylHt;\nint nFrame, idObj;\nconst int idBase = 1, idTop = 2, idFlr = 3, idSpk = 4, idSup = 5, idTube = 6, idBdy = 7,\n   idBk = 8, idEye = 9, idCmid = 10, idPole = 11, idRail = 12, idLit = 13;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat DuckDf (vec3 p, float dMin)\n{ // (from \"Rector's Palace at Night\")\n  vec3 q;\n  vec2 cs, rr;\n  float d, h, s, sclFac;\n  sclFac = 0.22;\n  dMin /= sclFac;\n  p /= sclFac;\n  p.xz = - p.xz;\n  cs = sin (0.3 + vec2 (0.5 * pi, 0.));\n  h = 0.5;\n  q = p;\n  rr = vec2 (0.2, 0.3 + 0.05 * clamp (q.z, -2., 2.));\n  s = (length (q.xz / rr) - 1.) * Minv2 (rr);\n  d = min (max (s, abs (q.y) - h), length (vec2 (s, q.y)) - h);\n  DMINQ (idBdy);\n  q.x = abs (q.x);\n  q -= vec3 (0.5, 0.3, 0.6);\n  q.yz = Rot2Cs (q.yz, cs);\n  q.xy = Rot2Cs (q.xy, vec2 (cs.x, - cs.y));\n  q.xz = Rot2Cs (q.xz, vec2 (cs.x, - cs.y));\n  rr = vec2 (0.3, 0.5 + 0.08 * clamp (q.z, -2., 2.));\n  h = 0.07;\n  s = (length (q.yz / rr) - 1.) * Minv2 (rr);\n  d = SmoothMin (min (max (s, abs (q.x) - h), length (vec2 (s, q.x)) - h), dMin, 0.05);\n  DMINQ (idBdy);\n  d = SmoothMin (PrEllipsDf (p - vec3 (0., 0.75, -0.4), vec3 (0.4, 0.35, 0.5)), dMin, 0.1);\n  DMINQ (idBdy);\n  q = p - vec3 (0., 0.65, -0.9);\n  q.zy = Rot2Cs (q.zy, vec2 (cs.x, - cs.y));\n  h = 0.15;\n  rr = vec2 (0.15, 0.04) * (1. - 0.1 * min (2., max (0., 1. - q.z / h)));\n  d = PrEllCylDf (q, rr, h);\n  q.z -= -0.9 * h;\n  d = SmoothMin (max (d, - PrEllCylDf (q, rr - 0.02, 0.5 * h)), dMin, 0.01);\n  DMINQ (idBk);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.26, 0.825, -0.6);\n  d = PrSphDf (q, 0.15);\n  DMINQ (idEye);\n  return 0.9 * sclFac * dMin;\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, h, sx;\n  dMin = dstFar;\n  p.xz = Rot2D (p.xz, gAng);\n  q = p;\n  q.x += 5. + 0.7 * sgH;\n  sx = sign (q.x);\n  q.x = abs (q.x) - 0.8 + 0.4 * (sgH - 0.5);\n  h = 0.5 + 0.2 * sgA;\n  q.y -= 0.2;\n  d = PrCylDf (q.xzy, 0.14, 0.1);\n  DMINQ (idSup);\n  q.y -= 2. * h;\n  d = PrCylDf (vec3 (q - vec3 (0., - h, 0.)).xzy, 0.06, h);\n  DMINQ (idTube);\n  q.xz = Rot2D (q.xz, 0.1 * pi * sgA * sx);\n  dMin = DuckDf (q, dMin);\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{  // (raymarching with axial grid reduces scene complexity when symmetry absent)\n  vec3 p;\n  vec2 cs;\n  float dHit, d, eps, rgOut, gAngP;\n  rgOut = 10.;\n  eps = 0.001;\n  cs = sin (pi / nSec + vec2 (0., 0.5 * pi));\n  gAngP = -999.;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    p.xz = Rot2D (p.xz, aRot);\n    gAng = 2. * pi * (floor (nSec * atan (p.z, - p.x) / (2. * pi)) + 0.5) / nSec;\n    if (gAng != gAngP) {\n      gAngP = gAng;\n      sgH = Hashff (gAng);\n      sgA = cos (gAng - 0.3 * pi * tCur) + 0.5 * cos (2.5 * gAng + 0.7 * pi * tCur);\n    }\n    d = GObjDf (p);\n    p.xz = Rot2D (p.xz, gAng);\n    d = min (d, 0.1 + max (- p.x - rgOut, abs (dot (vec2 (p.x, abs (p.z)), cs))));\n    dHit += d;\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d > eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, s;\n  dMin = dstFar;\n  q = p;\n  q.y -= 0.05;\n  d = PrCylDf (q.xzy, 9.3, 0.05);\n  DMINQ (idBase);\n  d = PrTorusDf (vec3 (q.xz, abs (abs (q.y - 1.) - 0.3) - 0.3), 0.03, 9.);\n  q.xz = Rot2D (q.xz, 2. * pi * floor (32. * atan (q.z, - q.x) / (2. * pi) + 0.5) / 32.);\n  q.xy -= vec2 (-9., 0.8);\n  d = min (d, PrCylDf (q.xzy, 0.03, 0.8));\n  DMINQ (idRail);\n  p.xz = Rot2D (p.xz, aRot);\n  q = p;\n  q.y -= 0.3;\n  d = PrCylDf (q.xzy, 1., 0.5);\n  DMINQ (idCmid);\n  q.y -= 0.6;\n  d = PrSphDf (q, 0.12);\n  DMINQ (idLit);\n  a = (floor (0.5 * nSec * atan (p.z, - p.x) / (2. * pi)) + 0.5) / (0.5 * nSec);\n  q = p;\n  q.y -= 0.1;\n  q.xz = Rot2D (q.xz, 2. * pi * a);\n  d = PrCaps2Df (vec2 (q.y - 0.1, q.x + 5.), 0.06, 2.5);\n  DMINQ (idFlr);\n  d = min (PrCylDf ((q - vec3 (-1.25, 0.1, 0.)).yzx, 0.07, 1.25),\n     PrCylDf ((q - vec3 (-5., 0.1, 0.)).yzx, 0.07, 2.45));\n  DMINQ (idSpk);\n  d = Maxv2 (abs (Rot2D (q.xy, -0.05 * pi) - vec2 (-3.6, 5.2)) - vec2 (3.2, 0.04));\n  d = min (d, min (Maxv2 (abs (q.xy - vec2 (-7.3, 3.95)) - vec2 (0.02, 0.15)),\n     Maxv2 (abs (q.xy - vec2 (-1.2, 5.1)) - vec2 (0.02, 0.15))));\n  DMINQ (idTop);\n  d = PrSphDf (vec3 (q.xy - vec2 (-7.5, 4.1), abs (q.z) - 0.6), 0.08);\n  DMINQ (idLit);\n  s = sign (q.z);\n  q.z = abs (q.z);\n  q -= vec3 (7.2 * vec2 (-1., tan (pi / (0.5 * nSec))), 2.1).xzy;\n  d = PrCylDf (q.xzy, 0.07, 2.);\n  q.z *= s;\n  DMINQ (idPole);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4;\n  vec3 c1, c2;\n  float a;\n  c1 = HsvToRgb (vec3 (gAng, 0.8, 1.));\n  c2 = HsvToRgb (vec3 (fract (gAng + 0.5), 0.8, 1.));\n  if (idObj == idPole || idObj == idBase || idObj == idCmid) a = atan (qHit.z, - qHit.x);\n  if (idObj <= idTube) {\n    if (idObj == idBase) {\n      col4 = vec4 (0.5, 0.3, 0.2, 0.) * (1. - 0.3 * step (5., length (qHit.xz)) *\n         (1. - smoothstep (0., 0.1, sin (128. * a) + 0.5)));\n    } else if (idObj == idTop) {\n      col4 = mix (vec4 (1., 0.5, 0., 0.1), vec4 (0., 1., 0.5, 0.1),\n         smoothstep (0., 0.02, fract (1.1 * qHit.z + 0.5) - 0.5));\n    } else if (idObj == idFlr) {\n      col4 = (abs (qHit.x + 5.) < 2.45) ? vec4 (0.7, 0.4, 0.3, 0.1) *\n         (0.8 + 0.2 * smoothstep (0., 0.03, fract (2. * qHit.x) - 0.1)) * (1. -\n         0.4 * Fbm2 (64. * qHit.xz)) : vec4 (0.7, 0.9, 0.2, -1.);\n    } else if (idObj == idSpk) {\n      col4 = vec4 (0.4, 0.6, 0.7, 0.1);\n    } else if (idObj == idSup) {\n      col4 = vec4 (c1, -1.);\n    } else if (idObj == idTube) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.2) * (0.6 +\n         0.4 * smoothstep (0., 0.02, fract (16. * qHit.y + 0.5) - 0.5));\n    }\n  } else {\n    if (idObj == idBdy) {\n      col4 = vec4 (c1, 0.1);\n    } else if (idObj == idBk) {\n      col4 = vec4 (c2, 0.1);\n    } else if (idObj == idEye) {\n      col4 = mix (vec4 (0.5 * c2, 0.1), vec4 (c2, -1.), step (0.05, length (qHit.yz + vec2 (0., 0.05))));\n    } else if (idObj == idCmid) {\n      col4 = vec4 (0.7, 0.5, 0.8, 0.1) * (0.7 + 0.3 * smoothstep (0., 0.1, cos (0.5 * nSec * a) + 0.5));\n    } else if (idObj == idPole) {\n      col4 = mix (vec4 (1., 0., 0., -1.), vec4 (1., 1., 1., 0.2),\n         smoothstep (0., 0.03, fract (8. * qHit.y + a / (2. * pi)) - 0.1));\n    } else if (idObj == idRail) {\n      col4 = vec4 (0.9, 0.8, 0.5, 0.2);\n    } else if (idObj == idLit) {\n      col4 = vec4 (1., 1., 0.7, -1.);\n    }\n  }\n  return col4;\n}\n\nvec4 InCylHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s, vn;\n  float d, a1, a2, w, srdy;\n  d = dstFar;\n  vn = vec3 (0.);\n  a1 = dot (rd.xz, rd.xz);\n  a2 = dot (rd.xz, ro.xz);\n  w = a2 * a2 - a1 * (dot (ro.xz, ro.xz) - rad * rad);\n  if (w > 0.) {\n    srdy = sign (rd.y);\n    if (a1 > 0.) {\n      d = (- a2 + sqrt (w)) / a1;\n      s = ro + d * rd;\n    } else s.y = len;\n    if (abs (s.y) < len) vn.xz = - s.xz / rad;\n    else {\n      d = (- srdy * ro.y + len) / abs (rd.y);\n      vn.y = - srdy;\n    }\n  }\n  return vec4 (d, vn);\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  if (2. * floor (0.5 * floor (q.y)) != floor (q.y)) q.x += 0.5;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.5 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{  // (from \"Jukebox\")\n  vec4 vc, db4, col4;\n  vec3 vn, rg, vnCyl;\n  vec2 qw, wSize;\n  float dCyl, hy, y, b, a, ga;\n  db4 = InCylHit (ro - vec3 (0., bCylHt, 0.), rd, bCylRad, bCylHt);\n  dCyl = db4.x;\n  vnCyl = db4.yzw;\n  ro += dCyl * rd;\n  if (vnCyl.y == 0.) {\n    vn = vnCyl;\n    hy = mod (ro.y / bCylHt + 0.5, 1.) - 0.5;\n    a = atan (vn.x, - vn.z) / pi;\n    wSize = vec2 (0.28, 0.33);\n    qw = abs (vec2 (mod (32. * 0.5 * (1. + a) + 0.5, 1.), abs (hy)) - 0.5) - 0.5 * wSize;\n    if (Maxv2 (abs (qw) - wSize * vec2 (0.43, 0.47)) < 0.) {\n      col4 = vec4 (0.5, 0.5, 1., -1.);\n    } else {\n      col4 = vec4 (0.2, 0.4, 0.2, -1.);\n      if (Maxv2 (qw - 0.5 * wSize) > 0.) {\n        col4 = vec4 (0.6, 0.4, 0., 0.);\n        y = abs (abs (hy) - 0.5) - 0.5;\n        if (y > - 0.3/16.) {\n          col4 *= 0.8;\n          vn.xz = Rot2D (vn.xz, - pi * a);\n          vn.yz = Rot2D (vn.yz, 0.15 * pi * (1. - 2. * SmoothBump (0.15, 0.25, 0.05,\n             16. * (0.5 - y))) * sign (hy));\n          vn.xz = Rot2D (vn.xz, pi * a);\n        } else {\n          qw = 8. * vec2 (12. * a, 2. * hy);\n          rg = ShStagGrid (qw);\n          col4 *= rg.y * (1. - 0.2 * Noisefv2 (32. * qw));\n          rg.xz *= sign ((abs (vn.x) > abs (vn.z)) ? vn.x : vn.z);\n          if (abs (vn.x) > abs (vn.z)) {\n            if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n            else vn.xz = Rot2D (vn.xz, rg.x);\n          } else {\n            if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n            else vn.zx = Rot2D (vn.zx, rg.x);\n          }\n        }\n      }\n    }\n  } else if (vnCyl.y > 0.) {\n    vc = HexVor (2. * ro.xz);\n    b = 1. - smoothstep (-0.2, -0.05, rd.y) * smoothstep (0.4, 0.8, dCyl / (1.6 * bCylRad));\n    vn = mix (vec3 (0., 1., 0.), normalize (vec3 (- vc.yz, 4.)).xzy,\n       b * SmoothBump (0.05, 0.13, 0.02, vc.x));\n    col4 = vec4 (HsvToRgb (vec3 (0.8 * floor (8. * vc.w) / 8., 0.5 * smoothstep (0.06, 0.08, vc.x),\n       0.9)) * 0.8 * (0.5 + 0.5 * b * step (0.06 + 0.03 * vc.w, vc.x) * (1. -\n       0.1 * Noisefv2 (16. * ro.xz))), 0.1);\n  } else {\n    b = 0.;\n    qw = ro.xz / bCylRad;\n    ga = 2.39996;\n    for (float n = float (VAR_ZERO); n < 128.; n ++) b += 1. - step (0.015,\n       length (qw - sqrt (n / 128.) * sin (n * ga + vec2 (0.5 * pi, 0.))));\n    col4 = mix (vec4 (0.3, 0.3, 0.8, 0.), vec4 (1., 1., 0.4, -1.), b);\n  }\n  return (col4.a >= 0.) ? col4.rgb * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) : col4.rgb;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 qHitG, col, vn;\n  float dstObjG, dstObj;\n  bool isRefl;\n  HexVorInit ();\n  nSec = 36.;\n  aRot = 0.05 * pi * tCur;\n  isRefl = false;\n  for (int k = VAR_ZERO; k <= 1; k ++) {\n    dstObjG = GObjRay (ro, rd);\n    qHitG = qHit;\n    dstObj = ObjRay (ro, rd);\n    if (k == 0 && dstObj < min (dstObjG, dstFar) && idObj == idFlr && abs (qHit.x + 5.) < 2.45) {\n      isRefl = true;\n      ro += dstObj * rd;\n      rd = reflect (rd, vec3 (0., 1., 0.));\n      ro += 0.01 * rd;\n    } else break;\n  }\n  if (min (dstObj, dstObjG) < dstFar) {\n    if (dstObj < dstObjG) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n    } else {\n      ro += dstObjG * rd;\n      ro.xz = Rot2D (ro.xz, aRot);\n      qHit = qHitG;\n      vn = GObjNf (ro);\n      vn.xz = Rot2D (vn.xz, - aRot);\n    }\n    col4 = ObjCol ();\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    else col = col4.rgb * (0.6 - 0.4 * dot (rd, vn));\n  } else {\n    col = BgCol (ro, rd);\n  }\n  if (isRefl) col *= 0.8;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  bCylRad = 22.;\n  bCylHt = 10.;\n  az = 0.;\n  el = -0.07 * pi;\n  if (mPtr.z > 0.) {\n    az -= 1.5 * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    el -= 0.03 * pi * cos (0.03 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1., -0.95 * bCylRad);\n  ro.y = max (ro.y, 0.5);\n  zmFac = 3. / (1. - 0.8 * abs (mod (az + pi, 2. * pi) - pi) / pi);\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (0.5, 0.7, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float rc)\n{\n  return length (p) - rc;\n}\n\nfloat PrCylDf (vec3 p, float rc, float h)\n{\n  return max (length (p.xy) - rc, abs (p.z) - h);\n}\n\nfloat PrCaps2Df (vec2 p, float rc, float h)\n{\n  return length (vec2 (p.x, sign (p.y) * (max (0., abs (p.y) - h)))) - rc;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 rc)\n{\n  return (length (p / rc) - 1.) * min (rc.x, min (rc.y, rc.z));\n}\n\nfloat PrEllCylDf (vec3 p, vec2 rc, float h)\n{\n  return max ((length (p.xy / rc) - 1.) * min (rc.x, rc.y), abs (p.z) - h);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float v1, float v2, float rc)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (v2 - v1) / rc, 0., 1.);\n  return mix (v2 - h * rc, v1, h);\n}\n\nfloat SmoothBump (float lo, float hi, float wd, float ws)\n{\n  return (1. - smoothstep (hi - wd, hi + wd, ws)) * smoothstep (lo - wd, lo + wd, ws);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec2 gVec[7], hVec[7];\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = VAR_ZERO; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * sin (2. * pi * (u.y - 0.5) + vec2 (0.5 * pi, 0.)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float aa)\n{\n  vec2 cs;\n  cs = sin (aa + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (mod (dot (p, vec2 (37., 39.)), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, aa;\n  f = 0.;\n  aa = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += aa * Noisefv2 (p);\n    aa *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}