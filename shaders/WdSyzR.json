{
    "Shader": {
        "info": {
            "date": "1600265656",
            "description": "noise\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdSyzR",
            "likes": 1,
            "name": "Apple-noise",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Subash",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "float hash(float n){\n\treturn fract(sin(n) * 1758.5453);   \n}\n\nfloat noise(vec3 x){\n    \n    vec3 p = floor(x);\n    vec3 k = fract(x);\n    k = k * k * (3. - 2. * k);\n    \n    float n = p.x + p.y*57.0 + p.z * 113.0;\n    \n    float a = hash(n);\n    float b = hash(n + 1.);\n    float c = hash(n + 57.);\n    float d = hash(n + 58.);\n    \n    float e = hash(n + 113.);\n    float f = hash(n + 1114.);\n    float g = hash(n + 170.);\n    float h = hash(n + 171.);\n\n    \n    float res = mix( mix(mix(a, b, k.x), mix(c, d, k.x), k.y), mix(mix(e, f, k.x), mix(g, h, k.x), k.y), k.z);\n    \n    return res;\n}\n\nfloat smoothNoise(vec3 p){\n\tfloat f = 0.;\n    f += 0.5 * noise(p);\n    p *= 2.02;\n    f += 0.5 * noise(p);\n\tp *= 2.03;\n    f += 0.5 * noise(p);\n\tp*=2.01;\n    f += 0.5 * noise(p);\n\treturn f/0.9375;\n}\nvec3 fruitMaterial(vec3 p){\n    float f = smoothstep(0.2, 1., smoothNoise(p) * .35);\n    vec3 col = vec3(1., 0., 0.);\n    col = mix(col, vec3(.8, 1., .2), f);\n    \n    f = smoothstep(0., 1., smoothNoise(p * 4.));\n    col *= 0.8 + 0.2 * f;\n    \n    f = smoothstep(.3, .9, smoothNoise(p * 25.));\n    col = mix(col, vec3(.9, .9, .6), 1. - f);\n    \n\treturn col;\n\t \n}\n\nvec3 floorMaterial(vec3 p){\n    vec3 col = vec3(.6, .5, .3);\n    float f = smoothNoise(p * vec3(6., 0., 0.5));\n    col = mix(col, vec3(.3, 0.2, .1), f);\n\treturn col;   \n}\n\nfloat Sphere(vec3 p){\n    float f = pow(dot(p.xz, p.xz), .1);\n    p.y -= 0.85*f;\n\treturn length(p - vec3(0., .2, .2)) - 1.;   \n}\n\nfloat Plane(vec3 p){\n\treturn p.y + 1.;   \n}\nfloat getDist(vec3 p){\n\tfloat dS = Sphere(p);\n    float dP = Plane(p);\n    return min(dP, dS);\n}\n\nfloat Shadow(vec3 p, vec3 lightDir){\n\tfloat res = 0.;\n    float shadow = 1.;\n    float d = .1;\n    for(int i = 0; i < 50; i++){\n   \t\tfloat dS = getDist(p+d*lightDir);\n        d += dS;\n        if(dS < 0.001) return 0.;\n        shadow = min(shadow, dS / d * 15.);\n    }\n    return shadow;\n}\n\nvec3 Normal(vec3 p){\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(getDist(p + e.xyy) - getDist(p - e.xyy),getDist(p + e.yxy) - getDist(p - e.yxy),getDist(p + e.yyx) - getDist(p - e.yyx)));\n}\n\n\nfloat backLight(vec3 p, vec3 lightPos){\n\tvec3 norm = Normal(p);\n    vec3 lightDir = normalize(lightPos - p);\n    return (max(0., 0.2 + 0.8 * dot(norm, lightDir)));\n}\n\nvec3 Light(vec3 p, vec3 lightPos){\n    vec3 norm = Normal(p);\n    vec3 lightDir = normalize(lightPos - p);\n    float shad = Shadow(p, lightDir);\n    float con = 1.;\n    vec3 light = max(0., dot(norm, lightDir)) * vec3(1., 0.97, 0.85) * shad;\n    light += con * vec3(0.1, 0.15, 0.2);\n    light += backLight(p, vec3(-lightDir.x, lightDir.y, -lightDir.z)) * vec3(0.95, 0.92, 0.95);\n    return light;\n}\n\n\nfloat rayMarch(vec3 r0, vec3 rd){\n\tfloat d0 = 0.;\n    for(int i = 0; i < 100; i++){\n     \tvec3 p = r0 + d0 * rd;\n        float dS = getDist(p);\n        d0 += dS;\n        if(dS < 0.001 || d0 > 100.) break;\n    }\n    return d0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2. * uv - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 r0 = vec3(0., 2.6, .8);\n    vec3 target = vec3(0.);\n    vec3 ww = normalize(target - r0);\n    vec3 uu = normalize(cross(vec3(0., 1., 0.), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    float zoom = 1.;\n    vec3 rd = uu * uv.x + vv * uv.y + ww * zoom;\n    float d0 = rayMarch(r0, rd);\n    vec3 col = vec3(.8);\n    \n    if(d0 < 6.){\n    vec3 lightPos = vec3(0, 3., .9);\n    vec3 p = r0 + d0 * rd;\n    vec3 light = Light(p, lightPos);\n    vec3 ref = normalize(reflect(rd, Normal(p)));\n    float spe = pow(clamp(dot(normalize(lightPos - p), ref), 0., 1.), 16.);\n    col = vec3(light);\n        \n        if(d0 < 1.40) {\n            col *= fruitMaterial(p);\n             col += vec3(spe);\n        }\n        else {\n            col *= floorMaterial(p);\n           \n        }\n        \n    col = sqrt(col);\n    //col *= .6; \n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}