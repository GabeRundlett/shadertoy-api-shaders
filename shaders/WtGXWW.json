{
    "Shader": {
        "info": {
            "date": "1582661257",
            "description": "Small exercise with fake 3D.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtGXWW",
            "likes": 5,
            "name": "Motion Loop #004",
            "published": 3,
            "tags": [
                "2d",
                "loop",
                "motion",
                "ease"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nMotion Loop #004\n\nCheckout the ISF port: https://github.com/theotime/isf_shaders/blob/master/shaders/motiongraphics_004.fs\n\nWith the help of https://thebookofshaders.com/examples/?chapter=motionToolKit\n\n*/\n\n#define bpm 120.\n#define speed .5\n/*\n#define samples_dx .1\n#define position_x .1\n#define position_y .5\n*/\n#define samples_dx .05\n#define position_x .4\n#define position_y 1.\n\n#define AA 5.\n\n#define pi 3.141592\n#define pi_half 1.570796\n#define time (speed*(bpm/60.)*iTime)\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 col1 = vec3(.133, .137, .137);\nvec3 col2 = vec3(.941, .965, .941);\n\n\n// inspired by Pixel Spirit Deck: https://patriciogonzalezvivo.github.io/PixelSpiritDeck/\n// + https://www.shadertoy.com/view/tsSXRz\nfloat stroke(float d, float width) {\n\treturn 1. - smoothstep(0., AA / iResolution.x, abs(d) - width * .5);\n}\n\nfloat circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\n// https://thebookofshaders.com/edit.php?log=160909064320\nfloat easeInOutQuad(float t) {\n    if ((t *= 2.) < 1.) {\n        return .5 * t * t;\n    } else {\n        return -.5 * ((t - 1.) * (t - 3.) - 1.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float t = fract(time * .25);\n    float t_pi = t * 2. * pi;\n    float t_pi_ease =  2. * pi * easeInOutQuad(t);\n        \n    // Construct a sphere with ellipses:\n    // ellipse pos.y = sin(a) * sphere_radius\n    // ellipse radius = cos(a) * sphere_radius\n    // then, animate some values\n    float sphere_radius = .3;\n    vec2 ellipse_scale = vec2(1., 2.);\n    float mask;\n    for (float a = -pi_half; a < pi_half; a += samples_dx) {\n        vec2 pos = vec2(\n            cos(pi * .25 + 2. * a + t_pi) * position_x,\n            sphere_radius * sin(a) * cos(position_y * a * a + t_pi_ease));// y\n\n        pos.y *= 1.2; // y scaling adjustement\n        float radius = sphere_radius * cos(a) + .1 * cos(t_pi) * sin(t_pi);// x\n        float sdf = circle((uv - pos) * ellipse_scale, radius);\n\n        mask += stroke(sdf, .005);\n    }\n    \n    mask = clamp(mask, 0., 1.);\n    vec3 col = mix(col1, col2, mask);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}