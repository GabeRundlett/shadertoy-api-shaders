{
    "Shader": {
        "info": {
            "date": "1696750655",
            "description": "对距离当前像素越来越远的地方对四个角进行采样，利用4个buffer实现5次迭代",
            "flags": 32,
            "hasliked": 0,
            "id": "cdKyWd",
            "likes": 0,
            "name": "KawaseBlur-test",
            "published": 3,
            "tags": [
                "kawaseblur"
            ],
            "usePreview": 1,
            "username": "nomkcode_g",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float pixelOffset = 0.0;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col = col * 0.25;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float pixelOffset = 0.0;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col = col * 0.25;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float pixelOffset = 0.0;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col = col * 0.25;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float pixelOffset = 0.0;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col = col * 0.25;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float pixelOffset = 0.0;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(-pixelOffset - 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col += texture(iChannel0, uv + vec2(pixelOffset + 0.5, -pixelOffset - 0.5) / iResolution.xy).rgb;\n    col = col * 0.25;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}