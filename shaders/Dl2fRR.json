{
    "Shader": {
        "info": {
            "date": "1693682078",
            "description": "testing out a hexagonal grid",
            "flags": 0,
            "hasliked": 0,
            "id": "Dl2fRR",
            "likes": 3,
            "name": "Laser Kaleidoscope",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "glow"
            ],
            "usePreview": 0,
            "username": "itishappy",
            "viewed": 174
        },
        "renderpass": [
            {
                "code": "// how far from integer... more or less\nfloat test(float x) {\n    x = fract(x);\n    return x * (1. - x);\n}\n\n// test each axis independantly\nvec3 test(vec3 xyz) {\n    return vec3(test(xyz.x), test(xyz.y), test(xyz.z));\n}\n\n// convert uv space to hex space\nvec3 hex(vec2 uv) {\n    mat2 skew = mat2(1., -0.5, 0., 1.1547);\n    uv *= skew;\n    return vec3(uv, -uv.x - uv.y);\n}\n\n// spin 2 win\nmat2 rot(float theta) {\n    return mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n}\n\n// put my thing down, flip it and reverse it\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // center and scale uvs, convert to hex grid\n    float scale = 2.5;\n    vec2 uv = scale * (2. * fragCoord - iResolution.xy) / iResolution.x;\n    uv *= rot(.1 * iTime);\n    vec3 xyz = hex(uv);\n    \n    // math magic\n    vec3 tests = test(xyz);\n    float glow = length(uv);\n    float grip = tests.x + tests.y + tests.z;\n    float grid = tests.x * tests.y * tests.z;\n    \n    // makin' it move\n    float glowStrength = 0.7 + 0.5 * cos(0.69 * iTime);\n    float gripStrength = 0.7 - 0.5 * cos(0.55 * iTime);\n    float gridStrength = 0.7 + 0.5 * sin(0.74 * iTime);\n    float glowFalloff = 1. * (.9 + .5 * sin(0.7 * iTime));\n    float gripFalloff = 0.5 * (.9 - .5 * sin(1.3 * iTime));\n    float gridFalloff = .01 * (.9 + .5 * cos(iTime));\n    glow = clamp(glowStrength - glow / glowFalloff, 0., 1.);\n    grip = clamp(glowStrength - grip / glowFalloff, 0., 1.);\n    grid = clamp(gridStrength - grid / gridFalloff, 0., 1.);\n    \n    // (fake) color science\n    vec3 col = vec3(glow, grip, grid);\n    float t = 0.13 * iTime;\n    vec3 shift = pow(vec3(cos(t), cos(t + 1.0472), cos(t - 1.0472)), vec3(2.));\n    col = col * shift.x + col.yzx * shift.y + col.zxy * shift.z;\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}