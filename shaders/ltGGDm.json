{
    "Shader": {
        "info": {
            "date": "1474924389",
            "description": "Super Awesome IFS",
            "flags": 0,
            "hasliked": 0,
            "id": "ltGGDm",
            "likes": 6,
            "name": "Super Awesome IFS",
            "published": 3,
            "tags": [
                "superawesomeifs"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 708
        },
        "renderpass": [
            {
                "code": "//-----------------SETTINGS-----------------\n\n//#define TIMES_DETAILED (sin(time*32.0)+1.0)\n#define TIMES_DETAILED (1.0+.1*sin(time*PI*1.0))\n#define SPIRAL_BLUR_SCALAR (1.0+.1*sin(time*PI*1.0))\n\n//-----------------USEFUL-----------------\n\n#define MOUSE_X (iMouse.x/iResolution.x)\n#define MOUSE_Y (iMouse.y/iResolution.y)\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS 10.0/max(iResolution.x, iResolution.y)\n\n#define circle(x) (vec2(cos(x),sin(x)))\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define time ((saw(float(__LINE__))+1.0)*(iTime+12345.12345)/PI/2.0)\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\nfloat seedling;\nfloat cross2( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nmat3 jacobian(vec3 x[8], vec3 q)\n{\n\tvec3 f0 = (x[7] + x[6] + x[5] + x[4] + x[3] + x[2] + x[1] + x[0]) * 0.125;\t\n\tvec3 f1 = (x[7] - x[6] + x[5] - x[4] + x[3] - x[2] + x[1] - x[0]) * 0.125;\n\tvec3 f2 = (x[7] + x[6] - x[5] - x[4] + x[3] + x[2] - x[1] - x[0]) * 0.125;\n\tvec3 f3 = (x[7] + x[6] + x[5] + x[4] - x[3] - x[2] - x[1] - x[0]) * 0.125;\n\tvec3 f4 = (x[7] - x[6] - x[5] + x[4] + x[3] - x[2] - x[1] + x[0]) * 0.125;\n\tvec3 f5 = (x[7] - x[6] + x[5] - x[4] - x[3] + x[2] - x[1] + x[0]) * 0.125;\n\tvec3 f6 = (x[7] + x[6] - x[5] - x[4] - x[3] - x[2] + x[1] + x[0]) * 0.125;\n\tvec3 f7 = (x[7] - x[6] - x[5] + x[4] - x[3] + x[2] + x[1] - x[0]) * 0.125;\n\n\tfloat a=q.x;\n\tfloat b=q.y;\n\tfloat g=q.z;\n\t\t\n\tvec3 f = f0      + f1*a     + f2*b     + f3*g     +\n\t\t\tf4*(a*b) + f5*(a*g) + f6*(b*g) + f7*(a*b*g);\n\t\n\tmat3 M;\n\tM[0]=   (f1 + f4*b + f5*g + f7*(b*g));\n\tM[1]=\t(f2 + f4*a + f6*g + f7*(a*g));\n\tM[2]=\t(f3 + f5*a + f6*b + f7*(a*b));\n\t\n\treturn M;\n}\n\nvec3 storage[8];\n\nvoid load_cube(out vec3[8] corners)\n{\n\tfloat t_corner=1e10;\n\tvec3 c_corner=vec3(0);\n\tfor (int k=0; k<2; k++)\n\t{\n\t\tfor (int j=0; j<2; j++)\n\t\t{\n\t\t\tfor (int i=0; i<2; i++)\n\t\t\t{\n\t\t\t\tvec3 x = vec3(i,j,k)*2.-1.;\n\t\t\t\tcorners[k*4+j*2+i]=x;\n\t\t\t}\t\n\t\t}\n\t}\n}\n\nfloat det(mat3 m)\n{\n\tvec3 a;\n\ta=cross(m[0],m[1]);\t\n\tfloat det = dot(a,m[2]);\n\treturn det;\n}\n\nfloat determinate;\n\nvec3 transform1(vec3 p, vec3[8] frust)\n{\n    const int volume_count = 8;\n    \n    for(int i = 0; i < volume_count; i++)\n    {\n        float iteration = float(i)/float(volume_count);\n        \n        vec3 f = flux((time*iteration*2.0*PI)+p.x+p.y+p.z)*2.0-1.0;\n        \n        storage[i].x += f.x/10.0;\n        storage[i].y += f.y/10.0;\n        storage[i].z += f.z/10.0;\n    }\n    \n    mat3 j = jacobian(storage, p);\n    determinate = det(j);\n    return p*j;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 p = vec3(uv, 0.0)*2.0-1.0;\n    p.z = (sqrt(2.0)-length(p.xy))/sqrt(2.0);\n    \n    load_cube(storage);\n\n    float ifs = 1.0;\n    \n    const int max_i = 8;\n    \n    vec3 d = sqrt(3.0)/vec3(iResolution.xy, max(iResolution.x, iResolution.y));\n    vec3 d1 = d * vec3(0.0, 0.0, 0.0);\n    vec3 d2 = d * vec3(1.0, 0.0, 0.0);\n    vec3 d3 = d * vec3(0.0, 1.0, 0.0);\n    \n    for(int i = 0; i < max_i; i++)\n    {\n   \t\tvec3 p3 = (transform1(p+d3, storage));\n   \t\tvec3 p2 = (transform1(p+d2, storage));\n   \t\tvec3 p1 = (transform1(p+d1, storage));\n        \n        float v = length(cross(p2-p1, p3-p1).z/d.x/d.y);\n        \n        ifs /= v;\n        \n   \t\tp = saw(p1);\n    }\n    \n    ifs = pow(ifs, 1.0/float(max_i));\n    \n    fragColor = vec4(p, 1.0)*ifs;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}