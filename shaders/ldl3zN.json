{
    "Shader": {
        "info": {
            "date": "1365200455",
            "description": "Mi piano at home. I wanted to add all lots of modeling details, but WebGL simply dies (Desktop OpenGL is perfectly fine, though). ",
            "flags": 0,
            "hasliked": 0,
            "id": "ldl3zN",
            "likes": 153,
            "name": "Piano",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 35110
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n// try 2 for higher quality\n#define AA 1\n#endif\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat udRoundBox( vec3 p, vec3 b, vec3 r )\n{\n    return length(max(abs(p)-b,0.0))-r.x;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    return max( length(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opRepLim( in float p, in float s, in float mi, in float ma )\n{\n    return p-s*clamp(round(p/s),mi,ma);\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(13.5453123,31.1459123,37.3490423));\n}\n\n//----------------------------\n\nfloat obj1( in vec3 p )\n{\n    vec3 q = vec3( opRepLim(p.x+0.1,0.2,-22.0,23.0), p.yz-0.1 );\n\treturn udRoundBox( q, vec3(0.091,0.075,0.6)-0.005, vec3(0.01) );\n}\n\nfloat obj2( in vec3 p, in float d )\n{\n    vec3 q = vec3( opRepLim(p.x,0.2,-21.0,23.0), p.y-0.185, p.z - 0.3 );\n\tfloat k = mod( round( p.x/0.2 ), 7.0 );\n\n\tif( k==2.0 || k==6.0 ) return d;\n\n\treturn udRoundBox( q, vec3(0.06,0.075,0.4)-0.01, vec3(0.01,0.01,0.01) );\n}\n\nfloat obj3( in vec3 p )\n{\n\tfloat d = udRoundBox( p - vec3(0.0, 0.0,1.7), vec3(5.4,0.6,1.0), vec3(0.05) );\n\tfloat t;\n    \n    t = udRoundBox( p - vec3(0.0,-0.3,0.1), vec3(5.4,0.3,0.6), vec3(0.05) );\n    d = min(d,t);\n    \n\tt = udRoundBox( p - vec3(0.0,-1.0,2.5), vec3(5.4,3.0,1.0), vec3(0.05) );\n    d = min(d,t);\n    \n\tt = sdCylinder( vec3(abs(p.x),p.y,p.z) - vec3(5.25,-2.2,-0.35), vec2(0.1,2.0) );\n    t -= 0.03*smoothstep(-0.7,0.7,sin(18.0*p.y)) + 0.017*p.y + 0.025;\n    d = min(d,t);\n    \n\tt = udRoundBox( vec3(abs(p.x),p.y,p.z) - vec3(5.05,0.0,0.3), vec3(0.35,0.2,0.8), vec3(0.05) );\n    d = min(d,t);\n    \n\treturn d;\n}\n\nfloat obj4( in vec3 p )\n{\n    return 3.75+p.y;\n}\n\nfloat obj5( in vec3 p )\n{\n    return min( 3.5-p.z, p.x+6.5 );\n}\n\nfloat obj6( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,1.3,1.1);\n\tfloat x = abs(q.x);\n\tq.z += 0.15*4.0*x*(1.0-x);\n\tq.yz = mat2(0.9,-0.43,0.43,0.9)*q.yz;\n    return 0.5*udRoundBox( q, vec3(1.0,0.7,0.0), vec3(0.01) );\n}\n\nfloat obj8( in vec3 p )\n{\n\tvec3 q = p - vec3(-0.5,-1.8,-2.0);\n\t\n\tq.xz = mat2( 0.9,0.44,-0.44,0.9)*q.xz;\n\t\n\tfloat y = 0.5 + 0.5*sin(8.0*q.x)*sin(8.0*q.z);\n\ty = 0.1*pow(y,3.0) * smoothstep( 0.1,0.4,q.y );\n    float d = udRoundBox( q, vec3(1.5,0.25,0.6), vec3(0.3) );\n\td += y;\n\t\n    q.xz = abs(q.xz);\n\tfloat d2 = sdCylinder( q - vec3(1.4,-1.5,0.6), vec2(0.15,1.5) );\n\treturn min( d, d2 );\n}\n\nfloat obj7( in vec3 p )\n{\n\tvec3 q = p - vec3(1.0,-3.6,1.2);\n    q.x = opRepLim(q.x,0.5,-1.0,1.0);\n    return udRoundBox( q, vec3(0.05,0.0,0.38), vec3(0.08) );\n}\n\nvec2 map( in vec3 p )\n{\n\t// white keys\n    vec2 res = vec2( obj1( p ), 0.0 );\n\n\t// black keys\n    vec2 ob2 = vec2( obj2( p, res.x ), 1.0 );\n\tif( ob2.x<res.x ) res=ob2;\n\n    // piano body\n    vec2 ob3 = vec2( obj3( p ), 2.0 );\n    if( ob3.x<res.x ) res=ob3;\n\n    // floor\n    vec2 ob4 = vec2( obj4( p ), 3.0 );\n    if( ob4.x<res.x ) res=ob4;\n\n    // wall\n    vec2 ob5 = vec2( obj5( p ), 4.0 );\n    if( ob5.x<res.x ) res=ob5;\n\n\t// paper\n    vec2 ob6 = vec2( obj6( p ), 5.0 );\n    if( ob6.x<res.x ) res=ob6;\n\t\n\t// pedals\n    vec2 ob7 = vec2( obj7( p ), 6.0 );\n    if( ob7.x<res.x ) res=ob7;\n\n\t// bench\n    vec2 ob8 = vec2( obj8( p ), 7.0 );\n    if( ob8.x<res.x ) res=ob8;\n\n\treturn res;\n}\n\n// https://iquilezles.org/articles/biplanar\nfloat boxmap( vec3 p, vec3 n )\n{\n\tp *= 0.15;\n\tfloat x = texture( iChannel3, p.yz ).x;\n\tfloat y = texture( iChannel3, p.zx ).x;\n\tfloat z = texture( iChannel3, p.xy ).x;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nfloat floorBump( vec2 pos, out vec2 id )\n{\n    pos *= 0.25;\n    float w = 0.015;\n    float y = mod( pos.x*8.0, 1.0 );\n    float iy = floor(pos.x*8.0);\n    float x = mod( pos.y*1.0 + sin(iy)*8.0, 1.0 );\n    float f = smoothstep( 0.0, w,     y ) - smoothstep( 1.0-w,     1.0, y );\n         f *= smoothstep( 0.0, w/8.0, x ) - smoothstep( 1.0-w/8.0, 1.0, x );\n    id = vec2( iy, floor(pos.y*1.0 + sin(iy)*8.0) );\n    return f;\n}\n\nvec4 floorColor( vec3 pos, out vec3 bnor )\n{\n\tpos *= 0.75;\n\tbnor = vec3(0.0);\n\n\tvec2 id;\n    vec2 e = vec2( 0.005, 0.0 );\n    float er = floorBump( pos.xz, id );\n    \n    vec3 col = vec3(0.6,0.35,0.25);\n\tfloat f = 0.5+0.5*texture( iChannel3, 0.1*pos.xz*vec2(6.0,0.5)+0.5*id ).x;\n    col = mix( col, vec3(0.4,0.15,0.05), f );\n\t\n\tcol.x *= 0.8;\n\n\tcol *= 0.85 + 0.15*texture( iChannel3, 2.0*pos.xz ).x;\n\n    // frekles\n    f = smoothstep( 0.4, 0.9, texture( iChannel3, pos.xz*0.2 - id*10.0).x );\n    col = mix( col, vec3(0.07), f*0.25 );\n\n    col *= 1.0 + 0.2*sin(32.0*(id.x-id.y));\n    col.x += 0.009*sin(0.0+32.0*(id.x+id.y));\n    col.y += 0.009*sin(1.0+32.0*(id.x+id.y));\n    col.z += 0.009*sin(2.0+32.0*(id.x+id.y));\n\n\treturn vec4( col*0.5, 0.35 );\n}\n\nvec4 pianoColor( in vec3 pos, in vec3 nor )\n{\n    float o = boxmap( 0.25*pos, nor );\n    float f = smoothstep( -0.25, 0.5, boxmap( 8.0*o + 1.0*pos*vec3(0.5,8.0,0.5), nor ) );\n\tfloat sp = f;\n\tvec3 col = 0.14*mix( 0.4*vec3(0.24,0.22,0.18), vec3(0.26,0.22,0.18), f );\n\n\tf = floor(pos.y*4.0) + 13.0*floor(abs(nor.x*pos.z + nor.z*pos.x)*0.4);\t\t\t\n\tcol *= 0.6 + 0.4*fract(sin(f)*13.5453);\n\n\tcol += 0.0012*sin( f*6.2831 + vec3(0.0,1.0,2.0) );\n    return vec4( col*0.6, 0.007*sp );\n}\n\nvec4 wallColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = 2.0*vec3(0.30,0.30,0.30);\n\n\tfloat f = 1.0-0.4*pow( boxmap( 1.5*pos*vec3(1.0,0.25,1.0), nor ), 1.7 );\n    col *= f;\n\n    return vec4(col,0.01*f);\n}\n\nvec4 paperColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = 0.7*vec3(0.22,0.21,0.18);\n\tcol = mix( col, col*vec3(1.0,0.9,0.8), clamp(0.5 + 0.5*abs(pos.x),0.0,1.0) );\n\tcol *= clamp(0.75 + 0.25*abs(2.0*pos.x),0.0,1.0);\n\t\n\tfloat f = smoothstep( 0.5,1.0, sin(250.0*pos.y) );\n\tf *=      smoothstep(-0.1,0.1, sin(250.0*pos.y/10.0) );\n\tf *= smoothstep( 0.1,0.11, abs(pos.x) ) - smoothstep( 0.85,0.86, abs(pos.x) );\n\tcol *= 1.0-f;\n\n\tf = smoothstep( -0.8,-0.2, sin(250.0*pos.y) );\n\tf *=      smoothstep(-0.1,0.1, sin(250.0*pos.y/10.0) );\n\tf *= smoothstep( 0.1,0.11, abs(pos.x) ) - smoothstep( 0.85,0.86, abs(pos.x) );\n\t\n\tfloat of = floor(0.5*250.0*pos.y/6.2831);\n\tfloat g = 1.0-smoothstep( 0.2,0.3,texture( iChannel3, pos.xy*vec2(0.5,0.01) + 0.15*of).x);\n\tcol *= mix( 1.0, 1.0-g, f );\n\t\n\tcol *= 0.5 + 0.7*texture( iChannel3, 0.02*pos.xy ).x;\n\t\t\n    return vec4(col,0.0);\n}\n\nvec4 benchColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = vec3(0.01,0.01,0.01);\n\t\n\tfloat g = smoothstep( 0.0, 1.0, boxmap( 1.0*pos*vec3(1.0,0.5,1.0), nor ) );\n\tcol = mix( col, vec3(0.021,0.015,0.015), g );\n\n\tfloat f = smoothstep( 0.3, 1.0, boxmap( 16.0*pos*vec3(1.0,1.0,1.0), nor ) );\n\tcol = mix( col, vec3(0.04,0.03,0.02), f );\n\n\treturn vec4( 0.2*col*vec3(1.3,0.9,1.0), 0.005*(1.0-g) );\n}\t\n\t\t\nvec4 calcColor( in vec3 pos, in vec3 nor, float matID, out vec3 bnor )\n{\n    bnor = vec3(0.0);\n\n\tvec4 mate = vec4(0.0);\n\t     if( matID<0.5 ) mate = vec4(0.22,0.19,0.15,0.2); // white keys\n\telse if( matID<1.5 ) mate = vec4(0.00,0.00,0.00,0.1); // black keys\n\telse if( matID<2.5 ) mate = pianoColor(pos,nor);      // piano\n\telse if( matID<3.5 ) mate = floorColor(pos,bnor);     // floor\n\telse if( matID<4.5 ) mate = wallColor(pos,nor);       // wall\n\telse if( matID<5.5 ) mate = paperColor(pos,nor);      // paper\n\telse if( matID<6.5 ) mate = vec4(0.04,0.03,0.01,0.9); // pedals\n\telse                 mate = benchColor(pos,nor);      // bench\n\treturn mate;\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 25.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    vec2 h = map( ro+rd*t );\n\t    m = h.y;\n        if( abs(h.x)<0.001 || t>maxd ) break;\n        t += h.x;\n    }\n\n    return (t<maxd) ? vec2( t, m ) : vec2(-1.0);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const vec3 eps = vec3(0.0002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<45; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, k*h/t);\n        t += clamp( h, 0.04, 0.1 );\n\t\tif( res<0.01 ) break;\n    }\n    return smoothstep(0.0,1.0,res);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<8; i++ )\n    {\n        float hr = 0.01 + 1.2*pow(float(i)/8.0,1.5);\n        vec3 aopos =  pos + nor*hr;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.85;\n    }\n    return clamp( 1.0 - 0.6*occ, 0.0, 1.0 );\n}\n\nfloat calcEdges( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    for( int i=0; i<4; i++ )\n    {\n\t\tvec3 aopos = normalize(hash3(float(i)*213.47));\n\t\taopos = aopos - dot(nor,aopos)*nor;\n\t\taopos = pos + aopos*0.5;\n        float dd = clamp( map( aopos ).x*10.0, 0.0, 1.0 );\n        occ += dd;\n    }\n\tocc /= 4.0;\n\t\n    return smoothstep( 0.5, 1.0, occ );\n}\n\n#define ZERO (min(iFrame,0))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  mo = iMouse.xy/iResolution.xy;\n\tfloat an = 2.0 + 1.5*(0.5+0.5*sin(0.15*iTime - 6.283185*mo.x));\n    vec3  ra = 8.0*normalize(vec3(sin(an),0.4-0.3*mo.y, cos(an)));\n    vec3  ta = vec3( -1.0, -1.7, 3.0 );\n    vec3  ww = normalize( ta - ra );\n    vec3  uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3  vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 of = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 px = fragCoord+of;\n        #else    \n        vec2 px = fragCoord;\n        #endif\n        vec2 p = (2.0*px-iResolution.xy)/iResolution.y;\n\t\n        // camera\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= 0.5 + 0.5*(7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n        vec3 ro = ra;\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        // render\n        vec3 col = vec3(0.0);\n        float atten = 1.0;\n        for( int k=0; k<2; k++ )\n        {\n            // raymarch\n            vec2 tmat = raycast(ro,rd);\n            if( tmat.y>-0.5 )\n            {\n                // geometry\n                vec3 pos = ro + tmat.x*rd;\n                vec3 nor = calcNormal(pos);\n                vec3 ref = reflect(rd,nor);\n                vec3 lig = normalize(vec3(-0.5,2.0,-1.0));\n                float edg = calcEdges(pos,nor);\n                float occ = calcAO( pos, nor );\n\n                // material\n                vec3 bnor = vec3(0.0);\n                vec4 mate = calcColor( pos, nor, tmat.y, bnor );\n                nor = normalize( nor + bnor );\n\n                if( tmat.y>1.5 && tmat.y<2.5 ) \n                {\n                float ru = edg*smoothstep( 0.3, 0.6, 0.1-0.2*occ + boxmap(pos,nor) );\n                mate = mix( mate, 0.25*vec4(0.3,0.28,0.2,0.0), ru );\n                }\n\n                // lights\n                float amb = 0.6 + 0.4*nor.y;\n                float dif = max(dot(nor,lig),0.0);\n                float spe = pow(clamp(dot(lig,ref),0.0,1.0),3.0);\n                float sha = 1.0;\n\n                // window frame shadows\n                vec3 win = pos + lig* (-10.0-pos.y)/lig.y;\n                win.xz -= vec2(.0,4.0);\n                float wpa = pow( pow(abs(win.x),16.0) + pow(abs(win.z),16.0), 1.0/16.0 );\n                float wbw = 1.0-smoothstep( 3.0, 6.2, wpa*0.8 );\n                float wbg = 1.0-smoothstep( 3.5,14.0, wpa*0.8 );\n                wpa *= 1.0-smoothstep( 2.5, 3.5, wpa*0.8 );\n                wpa *= smoothstep( 0.1, 0.45, abs(win.x) );\n                wpa *= smoothstep( 0.1, 0.45, abs(win.z) );\n                sha *= wpa;\n                \n                // object shadows (only if necessary)\n                if( (sha*dif)>0.001 )\n                sha *= softshadow( pos, lig, 0.01, 10.0 );\n                \n\n                vec3 lin = vec3(0.0);\n                lin  = 4.00*dif*vec3(1.5,0.85,0.55)*pow( vec3(sha), vec3(1.0,1.2,1.4) );\n                lin += 0.50*wbg*wbw*vec3(1.2,0.6,0.3)*(0.5+0.5*clamp(0.5-0.5*nor.y,0.0,1.0))*pow(1.0-smoothstep(0.0,3.5,3.8+pos.y),2.0)*(0.2+0.8*occ);\n                lin += 0.025*wbg*amb*vec3(0.75,0.85,0.9)*(0.1+0.9*occ);\n                lin += (1.0-mate.xyz)*0.15*occ*vec3(1.0,0.5,0.1)*clamp(0.5+0.5*nor.x,0.0,1.0)*pow(clamp(0.5*(pos.x-1.5),0.0,1.0),2.0);\n\n                col += atten*mate.xyz*lin;\n                col += atten*10.0*mate.w*mate.w*(0.5+0.5*mate.xyz)*spe*sha*occ*vec3(1.0,0.95,0.9);\n\n                atten *= 2.0*mate.w;\n                ro = pos + 0.001*nor;\n                rd = ref;\n            }\n        }\n\n        // gain\n        col = 1.2*col/(1.0+col);\n\n        // desat\n        col = mix( col, vec3(dot(col,vec3(0.33))), 0.3 );\n\n        // gamma\n        col = pow( col, vec3(0.45) );\n        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\t// tint\n\ttot *= vec3(1.0,1.04,1.0);\n\t\n\t// vignetting\n\tvec2 q = fragCoord / iResolution.xy;\n\ttot *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    fragColor = vec4( tot,1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}