{
    "Shader": {
        "info": {
            "date": "1627886460",
            "description": "More playing with fractally stuff.",
            "flags": 32,
            "hasliked": 0,
            "id": "sl2XDm",
            "likes": 9,
            "name": "Red Carpet",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// Cole Peterson\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvec4 plane(vec3 ro, vec3 rd, vec3 n){\n    float dem = dot(rd, n);\n    \n    if(dem > .01){\n     \tfloat num = dot(-ro, n);   \n        float t = num / dem;\n        return vec4(ro + rd*t, 1.);\n    }\n    else\n        return vec4(0);\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = (iMouse.xy - .5*R) / R.y;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0., 1.6 , 0.);\n    ro.z += iTime*.75;\n    \n    vec3 rd = normalize(vec3(uv, 1. - dot(uv, uv) * -.65));\n    rd.zy *= rot(-.58);\n   \n    vec4 pln = plane(ro, rd, vec3(0., -1., 0.));\n    if(pln.w>0.){\n        float pd = length(pln.xyz-(ro));\n     \tcol += texture(iChannel0, pln.xz*vec2(0.08, 0.12)).xyz; \n        col *= exp(-pd*pd*pd*.0006);\n    }\n   \n    float val = 1.-exp(-pow(col.r * 1.8, 5.));\n    col *= (ss(3., -.7, abs(pln.x +cos(pln.z*.4)*.3) - val*1.3));\n    col *= ss(.8, .79, abs(uv.x));\n    //col *= ss(.441, .44, abs(uv.y));\n    f = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cole Peterson\n\n#define R iResolution.xy\n\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 m = (iMouse.xy - .5*R) / R.y;\n    vec2 uv = .63*vec2(u - .5*R) / R.y;\n    \n    float r = .3, q = 0.0;\n    \n    if(iMouse.z > 0.)\n        r -= (m.y*.044);\n    \n    for(float i = 0.; i < 40.;i++){\n        uv = abs(uv);\n        uv *= 1.133;\n        uv *= rot(r + .647);\n        uv.x -= .2;\n        uv = fract(uv) - 0.5;\n        q += dot(uv, uv);\n    }\n    \n    vec3 col = .4+.2*cos(vec3(1., 2., 3.)*q*5. + vec3(1., 1.5, 3.));\n    col = pow(col*1.8, vec3(3.6));\n    col = 1.-exp(-col);\n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}