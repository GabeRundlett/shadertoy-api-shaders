{
    "Shader": {
        "info": {
            "date": "1617095109",
            "description": "Calibration",
            "flags": 0,
            "hasliked": 0,
            "id": "NsS3Rw",
            "likes": 55,
            "name": "Calibration",
            "published": 3,
            "tags": [
                "2d",
                "calibration"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2823
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2021\n\n\n// Useful calibration shader, not just for Shadertoy, but\n// for any renderer.\n//\n//\n// 1. checks that all pixels are rendered,\n//    including first and last rows and columns, in orange\n//\n// 2. checks that there's no pixel interpolation happening\n//    in the canvas (1x1 checkerboard in bottom left corner)\n//\n// 3. checks that gamma in fine (no circles should be visible\n//    in the image)\n//\n// 4. checks resolution\n//\n// 5. checks no frames are skipped (every box should be\n//    ticked/highlighted exactly once at the appropriate\n//    framerate column)\n\n//-----------------------------------------------------------------\n\nfloat PrintDigit(in int n, in vec2 p)\n{\t\t\n    // digit bitmap by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n    const int lut[10] = int[10](480599,139810,476951,476999,71028,464711,464727,476228,481111,481095);\n    \n\tivec2 xy = ivec2(p*vec2(4,5));\n\tint   id = 4*xy.y + xy.x;\n    return float( (lut[n]>>id) & 1 );\n}\n\nfloat PrintInt(const in vec2 uv, in int value )\n{\n    float res = 0.0;\n\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        float maxDigits = (value==0) ? 1.0 : floor(1.0+log2(float(value))/log2(10.0));\n        float digitID = floor(uv.x);\n        if( digitID>=0.0 && digitID<maxDigits )\n        {\n            float digitVa = mod( floor(float(value)/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n            res = PrintDigit( int(digitVa), vec2(fract(uv.x), uv.y) );\n        }\n    }\n\treturn res;\t\n}\n\nfloat PrintIntN(const in vec2 uv, in int value, in int maxDigits )\n{\n    float res = 0.0;\n\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        int digitID = int(floor(uv.x));\n        if( digitID>=0 && digitID<maxDigits )\n        {\n            float digitVa = mod( floor(float(value)/pow(10.0,float(maxDigits-1-digitID)) ), 10.0 );\n            res = PrintDigit( int(digitVa), vec2(fract(uv.x), uv.y) );\n        }\n    }\n\treturn res;\t\n}\n\n//-----------------------------------------------------------------\n\nvec3 pat1( in vec2 pixel, in vec2 res )\n{\n    vec2  uv = pixel/res.y;\n    \n    vec2 p = floor(pixel*exp2(-floor(6.0*uv.y)) );\n\n    float col = mod( p.x + p.y, 2.0 );\n    col *= smoothstep(0.005,0.010,abs(fract(6.0*uv.y+0.5)-0.5));\n    \n    return vec3( col );\n}\n\nvec3 pat2( in vec2 pixel, in vec2 res )\n{\n    vec2 uv = (2.0*pixel-res)/res.y;\n    float h = res.y*0.8;\n    \n    vec3 col = vec3(0.2);\n    \n    if( pixel.y<h )\n    {\n        col = vec3( pixel.y/h );\n\n        if( uv.x>0.0 )\n        {\n            vec2 p = floor(pixel);\n            float f = mod( p.x +p.y, 2.0 );\n\n            const float gamma = 2.3;\n            float midgrey = pow( 0.5, 1.0/gamma );\n\n            f = mix( midgrey,  f, smoothstep(0.1,0.101,length(vec2(uv.x,(fract(3.0*uv.y+0.5)-0.5)/3.0)-vec2(0.5*res.x/res.y,0.0))) );\n\n            col = vec3(f);\n        }\n    }\n    else\n    {\n        vec2 q = vec2(uv.x,uv.y-0.9);\n        q = 0.707*abs(vec2(q.x+q.y,-q.y+q.x));\n        q = (q.y<q.x)?q.yx:q;\n        q -= vec2(0.01,0.05);\n        float t = step( max(q.x,q.y), 0.0 );\n        \n        t += PrintInt( (uv-vec2(-0.5,0.85))*10.0, int(iResolution.x) );\n        t += PrintInt( (uv-vec2( 0.1,0.85))*10.0, int(iResolution.y) );\n\n        int ideg = int(iTime*60.0);\n        int degs = (ideg   ) % 60;\n        int secs = (ideg/60) % 60;\n        int mins = (ideg/3600) % 60;\n        t += PrintIntN( (uv-vec2(-0.3,0.67))*10.0, mins, 2 );\n        t += PrintIntN( (uv-vec2( 0.0,0.67))*10.0, secs, 2 );\n        t += PrintIntN( (uv-vec2( 0.3,0.67))*10.0, degs, 2 );\n        \n        // draw : :\n        q = vec2( abs(uv.x-0.087)-0.147,abs(uv.y-0.72)-0.035);\n        q = abs(q)-0.01;\n        t += step( max(q.x,q.y), 0.0 );\n\n        col = mix( col, vec3(1.0,0.5,0.0), t );\n    }\n\n\n    return col;\n}\n\nvec3 pat3( in vec2 pixel, in vec2 res )\n{\n    float v = pixel.y/res.y;\n    \n    int fps = 10;\n    if( pixel.x>res.x*1.0/5.0 ) fps =  15;\n    if( pixel.x>res.x*2.0/5.0 ) fps =  30;\n    if( pixel.x>res.x*3.0/5.0 ) fps =  60;\n    if( pixel.x>res.x*4.0/5.0 ) fps = 120;\n    int id = int(floor(v*float(fps)));\n    \n    float f = 0.2+0.2*float(id&1);\n    \n    vec3 col = vec3(f);\n\n    if( (int(iTime*float(fps))%fps)==id ) col = vec3(1.0);\n\n    col *= smoothstep(0.01,0.02,abs(fract(5.0*pixel.x/res.x+0.5)-0.5));\n\n    \n    vec2 q = vec2( mod(pixel.x,res.x/5.0)-res.x/64.0,pixel.y-res.y*0.97);\n    float t = PrintInt( q/res.y*50.0, fps );\n    \n    col = mix( col, vec3(1.0,0.5,0.0), t );\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x0 = iResolution.x*0.0/3.0;\n    float x1 = iResolution.x*1.0/3.0;\n    float x2 = iResolution.x*2.0/3.0;\n    float wi = iResolution.x/3.0;\n    \n    vec3                 col = pat1(fragCoord-vec2(x0,0.0),vec2(wi,iResolution.y));\n    if( fragCoord.x>x1 ) col = pat2(fragCoord-vec2(x1,0.0),vec2(wi,iResolution.y));\n    if( fragCoord.x>x2 ) col = pat3(fragCoord-vec2(x2,0.0),vec2(wi,iResolution.y));\n\n    col *= smoothstep( 2.0, 4.0, mod(fragCoord.x,wi) );\n\n    ivec2 p = ivec2(fragCoord);\n    ivec2 r = ivec2(iResolution);\n    if( p.x==0 || p.y==0 || p.x==(r.x-1)  || p.y==(r.y-1) ) col = vec3(1.0,0.5,0.0);\n\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}