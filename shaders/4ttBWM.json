{
    "Shader": {
        "info": {
            "date": "1539840396",
            "description": "Inspired by http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nUse the mouse to change the parameters and explore the fractal. Best in Full Screen.\nLet me know if you have ideas to reduce the character count.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ttBWM",
            "likes": 16,
            "name": "Code Golf Fractal 120 Characters",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "warp",
                "monochrome",
                "fold",
                "small",
                "tweet",
                "golf"
            ],
            "usePreview": 0,
            "username": "mathmasterzach",
            "viewed": 1128
        },
        "renderpass": [
            {
                "code": "// Created by @mathmasterzach\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//My original 170 Character Version\n/*#define mainImage(o,p)\\\n    vec2 r=iResolution.xy,c=iMouse.xy/r-1.,q=4.*p/r-2.;\\\n    float m,i;\\\n    q.x*=r.x/r.y;\\\n    for(;i<30.;i++)\\\n\t\tq=abs(q)/dot(q,q)+c,\\\n        m=max(length(q),m);\\\n    o = vec4(min(m/i,1.));*/\n\n// kate's 145 Character Version. This is amazing! Thanks!\n/*#define mainImage(o,p)\\\n    vec2 r=iResolution.xy,q=2.*(p+p-r)/r.y;\\\n    for(;o.x++<30.;)\\\n        q=abs(q)/dot(q,q)+iMouse.xy/r-1.,\\\n        o.y=max(length(q),o.y);\\\n    o = o.yyyx/o.x*/\n\n\n//I managed to reduce it to 120 characters by flipping the mouse direction and removing the max\n//the max was doing almost nothing at this point due to the division by 2e2\n//Everything else is the same though\nvoid mainImage(out vec4 o, vec2 p) {                                                 \\\n    for( vec2 r = iResolution.xy, q = 2.*(p+p-r)/r.y; o.a++ < 30.; )\n        o += length( q = abs(q)/dot(q,q) - iMouse.xy/r) / 2e2;}\n\n//A modified version of GregRostami's approximation. 132 Characters\n//There is a slight difference between the original shader and this one\n//I modified the constant 99. to 2e2 to more closely approximate the original lighting\n/*#define mainImage(o,p)                                                    \\\n    for( vec2 r = iResolution.xy, q = 2.*(p+p-r)/r.y; o.a++ < 30.; )      \\\n        o += max( length( q = abs(q)/dot(q,q) + iMouse.xy/r-1.),o.y) / 2e2*/\n        \n// Here's a modified version of kate's 145 Character version\n// The mouse input is reversed but has the same range\n// 142 Character Version\n/*#define mainImage(o,p)\\\n    vec2 r=iResolution.xy,q=2.*(p+p-r)/r.y;\\\n    for(;o.x++<30.;)\\\n        q=abs(q)/dot(q,q)-iMouse.xy/r,\\\n        o.y=max(length(q),o.y);\\\n    o = o.yyyx/o.x*/\n        \n// Based on the previous iteration, if the zoom is slightly changed then this works\n// 139 Character Version\n/*#define mainImage(o,p)\\\n    vec2 r=iResolution.xy,q=(p+p-r)/r.y;\\\n    for(;o.x++<30.;)\\\n        q=abs(q)/dot(q,q)-iMouse.xy/r,\\\n        o.y=max(length(q),o.y);\\\n    o = o.yyyx/o.x*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}