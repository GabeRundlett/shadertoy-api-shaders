{
    "Shader": {
        "info": {
            "date": "1648756568",
            "description": "3D Circle",
            "flags": 0,
            "hasliked": 0,
            "id": "sllcD2",
            "likes": 0,
            "name": "06 The simplest 3D ",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "//I learn from The Art of Code's videos\n//https://www.youtube.com/watch?v=PBxuVlp7nuM\n//计算观察点p到射线的距离，射线原点ro，射线方向rd。\n//两个向量叉乘得到的向量长度是这两个向量组成平行四边形的面积，面积又等于底乘高\nfloat DistLine(vec3 ro,vec3 rd,vec3 p)//Distance To Line\n{\n    return length(cross(p-ro,rd))/length(rd);\n}\n//绘制点函数,射线原点ro，射线方向rd,点p为点位置\nfloat DrawPoint(vec3 ro,vec3 rd,vec3 p)\n{\n    float d = DistLine(ro,rd,p);\n    d = smoothstep(0.06,0.04,d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //将uv移动屏幕中心并且xy都除以屏幕高\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    //射线原点,初始为(0.0,0.0,-3.0),绕y轴逆时针旋转\n    vec3 ro = vec3(3.0*sin(iTime),0.0,-3.0*cos(iTime));\n    \n    //求摄像机的三个基向量\n    vec3 lookat = vec3(0.0);//看向的点,屏幕中心点\n    vec3 forward = normalize(lookat-ro);//归一化向前向量\n    vec3 right = cross(vec3(0.0,1.0,0.0),forward);//根据向前向量和(0,1,0)叉乘求向右向量\n    vec3 up = cross(forward,right);//根据向右向量和forward求向上向量\n    \n    //射线原点不变,增大zoom,屏幕中心点后移,视野变小,物体变大\n    float zoom = 1.0;\n    vec3 center = ro+forward*zoom;//屏幕中心点\n    vec3 i = center+right*uv.x+up*uv.y;//屏幕上的每个点i\n    \n    vec3 rd = i-ro;//射线方向\n    \n    float t = iTime;\n    float d = 0.0;\n    \n    d += DrawPoint(ro,rd,vec3(-1.0, -1.0, -1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3( 1.0, -1.0, -1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3( 1.0,  1.0, -1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3(-1.0,  1.0, -1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3(-1.0, -1.0,  1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3( 1.0, -1.0,  1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3( 1.0,  1.0,  1.0)/2.0);\n    d += DrawPoint(ro,rd,vec3(-1.0,  1.0,  1.0)/2.0);\n    \n    fragColor = vec4(vec3(d),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}