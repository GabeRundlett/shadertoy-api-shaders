{
    "Shader": {
        "info": {
            "date": "1627386446",
            "description": "This is the task 2 of assignment 5 of NUS SOC summer workshop 2021.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftSXDR",
            "likes": 6,
            "name": "sws3005_A5-ray tracing",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 1,
            "username": "sws3005_09",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.3, 0.2, 0.3);\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 4;\nconst int NUM_PLANES = 6;\nconst int NUM_CYLINDERS = 4;\nconst int NUM_SPHERES = 27;\n\n// Beat Frequnce for the music\nconst float beatFreq = 115.0 / 60.0;\n\n//Parameters for block\nfloat blockNum = 4.0;\nfloat blockLength = 0.45;\n\n// Time for change\nfloat MyITime;\n\n// The Ball to Show\nint ShowBallNumber;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Cylinder_t{\n    vec3 center;\n    float radius;\n    float height;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nCylinder_t Cylinder[NUM_CYLINDERS];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\nSphere_t showSphere[NUM_SPHERES];\n\n\n// Init The Item to be show\nvoid initShowItem(){\n    ShowBallNumber = 0;\n    float OneCircleTime = 2.0 * 8.0 / beatFreq;\n    float nowRoundTime = mod(MyITime / OneCircleTime, 21.0);\n    //Phase1\n    if(nowRoundTime<3.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            showSphere[ShowBallNumber].center.y -= 1.9*(1.0-(nowRoundTime/3.0));\n            ShowBallNumber++;\n        }\n    }\n    //Phase2\n    else if(nowRoundTime>=3.0 && nowRoundTime<4.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n    }\n    //Phase3\n    else if(nowRoundTime>=4.0 && nowRoundTime<6.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=18; i<27; i++){\n            showSphere[i].center.xz *= (1.0 + 1.0*(nowRoundTime-4.0)/2.0);\n        }\n    }\n    //Phase4\n    else if(nowRoundTime>=6.0 && nowRoundTime<8.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=18; i<27; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n        for(int i=9; i<18; i++){\n            showSphere[i].center.xz *= (1.0 + 1.0*(nowRoundTime-6.0)/2.0);\n        }\n    }\n    //Phase5\n    else if(nowRoundTime>=8.0 && nowRoundTime<10.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=18; i<27; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n        for(int i=9; i<18; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n        for(int i=0; i<9; i++){\n            showSphere[i].center.xz *=(1.0 + 1.0*(nowRoundTime-8.0)/2.0);\n        }\n    }\n    //Phase6\n    else if(nowRoundTime>=10.0 && nowRoundTime<12.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=18; i<27; i++){\n            showSphere[i].center.xz *= (2.0 - 1.0*(nowRoundTime-10.0)/2.0);\n        }\n        for(int i=9; i<18; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n        for(int i=0; i<9; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n    }\n    //Phase7\n    else if(nowRoundTime>=12.0 && nowRoundTime<14.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=9; i<18; i++){\n            showSphere[i].center.xz *= (2.0 - 1.0*(nowRoundTime-12.0)/2.0);\n        }\n        for(int i=0; i<9; i++){\n            showSphere[i].center.xz *= 2.0;\n        }\n    }\n    //Phase8\n    else if(nowRoundTime>=14.0 && nowRoundTime<16.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n        for(int i=0; i<9; i++){\n            showSphere[i].center.xz *= (2.0 - 1.0*(nowRoundTime-14.0)/2.0);\n        }\n    }\n    //Phase9\n    else if(nowRoundTime>=16.0 && nowRoundTime<17.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            ShowBallNumber++;\n        }\n    }\n    //Phase10\n    else if(nowRoundTime>=17.0 && nowRoundTime<20.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            showSphere[ShowBallNumber].center.y -= 1.9*((nowRoundTime-17.0)/3.0);\n            ShowBallNumber++;\n        }\n    }\n    //Phase11\n    else if(nowRoundTime>=20.0){\n        for(int i = 0; i < 27; i++){\n            showSphere[ShowBallNumber] = Sphere[i];\n            showSphere[ShowBallNumber].center.y -= 1.9;\n            ShowBallNumber++;\n        }\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n     // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 3;\n\n    Plane[5].A = 0.0;\n    Plane[5].B = 1.0;\n    Plane[5].C = 0.0;\n    Plane[5].D = -8.5;\n    Plane[5].materialID = 3;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 4.5;\n    Plane[1].materialID = 3;\n    \n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 4.5;\n    Plane[2].materialID = 3;\n\n    Plane[3].A = 0.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 1.0;\n    Plane[3].D = -4.5;\n    Plane[3].materialID = 3;\n\n    Plane[4].A = 1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = -4.5;\n    Plane[4].materialID = 3;\n\n    MyITime = 2.0 * PI * iTime * beatFreq / 8.0;\n\n    // The upper spheres\n    Sphere[0].center = vec3( 0.2 * cos(MyITime), 1.7, 1.0 * sin(MyITime) );\n    Sphere[0].radius = 0.2;\n    Sphere[0].materialID = 1;\n    Sphere[1].center = vec3( 0.2 * cos(MyITime), 1.7, 0.2 * sin(MyITime) );\n    Sphere[1].radius = 0.2;\n    Sphere[1].materialID = 1;\n    Sphere[2].center = vec3( 0.7 * cos(MyITime), 1.7, 0.5* sin(MyITime) );\n    Sphere[2].radius = 0.2;\n    Sphere[2].materialID = 1;\n    Sphere[3].center = vec3( 1.4 * cos(MyITime), 1.7, 0.5* sin(MyITime) );\n    Sphere[3].radius = 0.2;\n    Sphere[3].materialID = 1;\n    Sphere[4].center = vec3( 1.4 * cos(MyITime), 1.7, 1.5* sin(MyITime) );\n    Sphere[4].radius = 0.2;\n    Sphere[4].materialID = 1;\n    Sphere[5].center = vec3( 0.7 * cos(MyITime), 1.7, 1.5* sin(MyITime) );\n    Sphere[5].radius = 0.2;\n    Sphere[5].materialID = 1;\n    Sphere[6].center = vec3( 1.4 * cos(MyITime), 1.7, 2.2* sin(MyITime) );\n    Sphere[6].radius = 0.2;\n    Sphere[6].materialID = 1;\n    Sphere[7].center = vec3( 0.7 * cos(MyITime), 1.7, 2.0* sin(MyITime) );\n    Sphere[7].radius = 0.2;\n    Sphere[7].materialID = 1;\n    Sphere[8].center = vec3( 0.2 * cos(MyITime), 1.7, 2.1* sin(MyITime) );\n    Sphere[8].radius = 0.2;\n    Sphere[8].materialID = 1;\n\n    //The middle spheres and color changing\n    Sphere[9].center = vec3( 0.2 * cos(MyITime), 1.1, 0.2 * sin(MyITime) );\n    Sphere[9].radius = 0.25;\n    Sphere[9].materialID =  (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[10].center = vec3( 0.2 * cos(MyITime), 1.1, 1.0 * sin(MyITime) );\n    Sphere[10].radius = 0.25;\n    Sphere[10].materialID =  (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[11].center = vec3( 0.7 * cos(MyITime), 1.1, 0.5* sin(MyITime) );\n    Sphere[11].radius = 0.25;\n    Sphere[11].materialID = (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[12].center = vec3( 1.4 * cos(MyITime), 1.1, 0.5* sin(MyITime) );\n    Sphere[12].radius = 0.25;\n    Sphere[12].materialID = (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[13].center = vec3( 1.4 * cos(MyITime), 1.1, 1.5* sin(MyITime) );\n    Sphere[13].radius = 0.25;\n    Sphere[13].materialID = (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[14].center = vec3( 0.7 * cos(MyITime), 1.1, 2.0* sin(MyITime) );\n    Sphere[14].radius = 0.25;\n    Sphere[14].materialID =  (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[15].center = vec3( 0.7 * cos(MyITime), 1.1, 1.5* sin(MyITime) );\n    Sphere[15].radius = 0.25;\n    Sphere[15].materialID =  (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[16].center = vec3( 0.2 * cos(MyITime), 1.1, 2.1* sin(MyITime) );\n    Sphere[16].radius = 0.25;\n    Sphere[16].materialID = (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n    Sphere[17].center = vec3( 1.4 * cos(MyITime), 1.1, 2.2* sin(MyITime) );\n    Sphere[17].radius = 0.25;\n    Sphere[17].materialID = (mod(MyITime, 3.0) < 0.5)? 0: \n            (mod(MyITime, 3.0) < 2.0)? 2 : \n                (mod(MyITime, 3.0) < 4.0)? 0 :\n                    (mod(MyITime, 3.0) < 6.0)? 2 :\n                        (mod(MyITime, 3.0) < 7.5)? 2 : 0;\n                    \n   \n    //The lower spheres\n    Sphere[18].center = vec3( 0.2 * cos(MyITime), 0.5, 1.0 * sin(MyITime) );\n    Sphere[18].radius = 0.2;\n    Sphere[18].materialID = 1;\n    Sphere[19].center = vec3( 0.2 * cos(MyITime), 0.5, 0.2 * sin(MyITime) );\n    Sphere[19].radius = 0.2;\n    Sphere[19].materialID = 1;\n    Sphere[20].center = vec3( 0.7 * cos(MyITime), 0.5, 0.5* sin(MyITime) );\n    Sphere[20].radius = 0.2;\n    Sphere[20].materialID = 1;\n    Sphere[21].center = vec3( 1.4 * cos(MyITime), 0.5, 0.5* sin(MyITime) );\n    Sphere[21].radius = 0.2;\n    Sphere[21].materialID = 1; \n    Sphere[22].center = vec3( 1.4 * cos(MyITime), 0.5, 1.5* sin(MyITime) );\n    Sphere[22].radius = 0.2;\n    Sphere[22].materialID = 1;\n    Sphere[23].center = vec3( 0.7 * cos(MyITime), 0.5, 1.5* sin(MyITime) );\n    Sphere[23].radius = 0.2;\n    Sphere[23].materialID = 1;\n    Sphere[24].center = vec3( 0.7 * cos(MyITime), 0.5, 2.0* sin(MyITime) );\n    Sphere[24].radius = 0.2;\n    Sphere[24].materialID = 1;\n    Sphere[25].center = vec3( 1.4 * cos(MyITime), 0.5, 2.2* sin(MyITime) );\n    Sphere[25].radius = 0.2;\n    Sphere[25].materialID = 1;\n    Sphere[26].center = vec3( 0.2 * cos(MyITime), 0.5, 2.1* sin(MyITime) );\n    Sphere[26].radius = 0.2;\n    Sphere[26].materialID = 1;\n    \n    //The Cyclinder\n    Cylinder[0].center = vec3(3.5, -0.5, 3.5);\n    Cylinder[0].radius = 0.3;\n    Cylinder[0].height = 10.0;\n    Cylinder[0].materialID = 3;\n\n    Cylinder[1].center = vec3(-3.5, -0.5, 3.5);\n    Cylinder[1].radius = 0.3;\n    Cylinder[1].height = 10.0;\n    Cylinder[1].materialID = 3;\n\n    Cylinder[2].center = vec3(3.5, -0.5, -3.5);\n    Cylinder[2].radius = 0.3;\n    Cylinder[2].height = 10.0;\n    Cylinder[2].materialID = 3;\n\n    Cylinder[3].center = vec3(-3.5, -0.5, -3.5);\n    Cylinder[3].radius = 0.3;\n    Cylinder[3].height = 10.0;\n    Cylinder[3].materialID = 3;\n\n    // red\n    Material[0].k_d = vec3( 0.6, 0.2, 0.2 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    //silver\n    Material[1].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n    \n    //green\n    Material[2].k_d = vec3( 0.0, 0.2, 0.2 );\n    Material[2].k_a = 0.4 * Material[2].k_d;\n    Material[2].k_r = 3.0 * Material[2].k_d;\n    Material[2].k_rg = 0.2 * Material[2].k_r;\n    Material[2].n = 64.0;\n\n    //Special Material\n    Material[3].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[3].k_a = 0.2 * Material[1].k_d;\n    Material[3].k_r = 2.0 * Material[1].k_d;\n    Material[3].k_rg = 0.1 * Material[1].k_r;\n    Material[3].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, 0.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    initShowItem();\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 rayOriInSphere = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(ray.d, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - sph.radius * sph.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n\n    t = finalT;\n    hitPos = ray.o + finalT * ray.d;\n    hitNormal = (hitPos - sph.center)/sph.radius;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 rayOriInSphere = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(ray.d, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - sph.radius * sph.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n    return true;\n}\n\nbool IntersectionCylinder(in Cylinder_t cyl, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal){\n    vec2 rayOriInSphere = ray.o.xz - cyl.center.xz;\n    float a = dot(ray.d.xz, ray.d.xz);\n    float b = 2.0 * dot(ray.d.xz, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - cyl.radius * cyl.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n    t = finalT;\n    hitPos = ray.o + finalT * ray.d;\n    hitNormal = hitPos - cyl.center;\n    if(hitNormal.y - cyl.center.y<0.0 || hitNormal.y - cyl.center.y>cyl.height) return false;\n    hitNormal.y = 0.0;\n    hitNormal = hitNormal / cyl.radius;\n    return true;\n}\n\nbool IntersectionCylinder(in Cylinder_t cyl, in Ray_t ray, in float tmin, in float tmax){\n    vec2 rayOriInSphere = ray.o.xy - cyl.center.xy;\n    float a = dot(ray.d.xy, ray.d.xy);\n    float b = 2.0 * dot(ray.d.xy, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - cyl.radius * cyl.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n//refer to https://www.shadertoy.com/view/XdB3Dw\nvec3 squaresColours(vec2 p)\n{\n\tp+=vec2(MyITime*0.2);\n\t\n\tvec3 orange=vec3(1.0,0.4,0.1)*2.0;\n\tvec3 purple=vec3(1.0,0.2,0.5)*0.8;\n\t\n\tfloat l=pow(0.5+0.5*cos(p.x*7.0+cos(p.y)*8.0)*sin(p.y*2.0),4.0)*2.0;\n\tvec3 c=pow(l*(mix(orange,purple,0.5+0.5*cos(p.x*40.0+sin(p.y*10.0)*3.0))+\n\t\t\t\t  mix(orange,purple,0.5+0.5*cos(p.x*20.0+sin(p.y*3.0)*3.0))),vec3(1.2))*0.7;\n\t\n\tc+=vec3(1.0,0.8,0.4)*pow(0.5+0.5*cos(p.x*20.0)*sin(p.y*12.0),20.0)*2.0;\n\t\n\tc+=vec3(0.1,0.5+0.5*cos(p*20.0))*vec3(0.05,0.1,0.4).bgr*0.7;\n\t\n\treturn c;\n}\n\nvec3 calculateColor(vec2 p,float border){\n    float sm=0.02;\n\tvec2 res=vec2(3.5);\n\tvec2 ip=floor(p*res)/res;\n\tvec2 fp=fract(p*res);\n\tfloat m=1.0-max(smoothstep(border-sm,border,abs(fp.x-0.5)),smoothstep(border-sm,border,abs(fp.y-0.5)));\n\tm+=1.0-smoothstep(0.0,0.56,distance(fp,vec2(0.5)));\n\treturn m*squaresColours(ip);\n}\n\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Light_t light, vec3 nearest_hitPos, int hitWhichPlane )\n{\n    Material_t mat = Material[1];\n    vec2 p, intPart;\n    float countIntPart;\n    if(hitWhichPlane == 0 || hitWhichPlane == 5) p = nearest_hitPos.xz;\n    else if(hitWhichPlane == 1 || hitWhichPlane == 3) p = nearest_hitPos.xy;\n    else if(hitWhichPlane == 2 || hitWhichPlane == 4) p = nearest_hitPos.yz;\n    else if(hitWhichPlane < 0){p.y = nearest_hitPos.y; p.x = length(nearest_hitPos.xz);}\n    p = p / blockNum;\n    mat.k_d = calculateColor(p, blockLength);\n    mat.k_a = 0.4 * mat.k_d;\n    mat.k_r = 3.0 * mat.k_d;\n\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    //which Plane does it hit\n    int hitWhichPlane;\n\n    //Intersection with the plane\n    for(int i=0; i<NUM_PLANES; i++){\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t<nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n            hitWhichPlane = i;\n        }\n    }\n    //Intersection with the sphere\n    for(int i=0; i<ShowBallNumber; i++){\n        temp_hasHit = IntersectSphere(showSphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t<nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n        }\n    }\n    //Intersection with the cylinder\n    for(int i=0; i<NUM_CYLINDERS; i++){\n        temp_hasHit = IntersectionCylinder(Cylinder[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t<nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Cylinder[i].materialID;\n            hitWhichPlane = -1;\n        }\n    }\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    for(int i=0; i<NUM_LIGHTS; i++){\n        // Check whether it is in shadow\n        bool inShadow = false, tempInShadow;\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(Light[i].position - nearest_hitPos);\n        // Since it is a line segement, we need to find the endpoint's t value\n        float LineSegmentMin = DEFAULT_TMIN;\n        float LineSegmentMax = length(Light[i].position - nearest_hitPos);\n        for(int j=0; j<NUM_PLANES; j++){\n            if(inShadow) break;\n            tempInShadow = IntersectPlane(Plane[j], shadowRay, LineSegmentMin, LineSegmentMax);\n            if(tempInShadow) inShadow = true;\n        }\n        for(int j=0; j<ShowBallNumber; j++){\n            if(inShadow) break;\n            tempInShadow = IntersectSphere(showSphere[j], shadowRay, LineSegmentMin, LineSegmentMax);\n            if(tempInShadow) inShadow = true;\n        } \n        for(int j=0; j<NUM_CYLINDERS; j++){\n            if(inShadow) break;\n            tempInShadow = IntersectionCylinder(Cylinder[j], shadowRay, LineSegmentMin, LineSegmentMax);\n            if(tempInShadow) inShadow = true;\n        }\n        // Prepare needed parameters\n        vec3 L = normalize(Light[i].position - nearest_hitPos);\n        vec3 N = normalize(nearest_hitNormal);\n        vec3 V = normalize(-ray.d);\n        if(nearest_hitMatID == 3){\n            I_local += PhongLighting(L, N, V, inShadow, Light[i], nearest_hitPos, hitWhichPlane);\n        }\n        else{\n            I_local += PhongLighting(L, N, V, inShadow, Material[nearest_hitMatID], Light[i]);\n        }         \n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 3.5 * cos(MyITime*0.1), 4.0, 3.5 * sin(MyITime*0.1) );\n    vec3 cam_lookat = vec3( 0.0, 1.0 +cos(MyITime) , 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}