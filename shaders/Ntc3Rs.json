{
    "Shader": {
        "info": {
            "date": "1636511910",
            "description": "basic stairs 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntc3Rs",
            "likes": 1,
            "name": "basic stairs 2d",
            "published": 3,
            "tags": [
                "basicstairs2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "//jorge2017a2\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.015,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nvec3 EscaleraV2(vec2 p, vec3 colOut, vec3 colIn)\n{\n    float d1;\n    float d=99999.0;\n    \n    int y;\n    p.y-=0.8;\n    p.x+=1.5;\n    \n    float AnchoTot=1.0;\n    float AltoTot=0.8;\n    float NumEs=8.0;\n    \n    float AnchoEs=AnchoTot/NumEs;\n    float AltoEs=AltoTot/NumEs;\n    \n    for(int i=1;i<=int(NumEs);i++ )\n     {   \n      float posx=float(i)*AnchoEs*2.0;\n      float posy=-float(i)*AltoEs*2.0;\n      d1=sdBox(p-vec2( posx,posy), vec2(AnchoEs,AltoEs) ) ;\n      d=min(d,d1);\n    \n     }   \n    \n    //colOut= DrawFig(colIn, colOut, d);\n    colOut=DrawFigBorde(colIn, colOut, d);\n     \n    return colOut;\n}\n\nvec3 EscaleraLargo(vec2 p, vec3 colOut, vec3 colIn)\n{\n    float d1;\n    float d=99999.0;\n    \n    int y;\n    p.y-=0.8;\n    p.x+=1.5;\n    \n    float AnchoTot=1.0;\n    float AltoTot=0.8;\n    float NumEs=4.0;\n    \n    float AnchoEs=AnchoTot/NumEs;\n    float AltoEs=AltoTot/NumEs;\n    float AltoEsNew;\n    \n    for(int i=1;i<=int(NumEs);i++ )\n     {   \n      float posx=float(i)*AnchoEs*2.0;\n      float posy=-float(i)*AltoEs*2.0;\n         \n      AltoEsNew=AltoTot-( float(i)- 1.0)*AltoEs ;\n      d1=sdBox(p-vec2( posx,posy-AltoEsNew), vec2(AnchoEs,AltoEs/NumEs+AltoEsNew) );\n            d=min(d,d1);\n     }   \n    \n    colOut= DrawFig(colIn, colOut, d);\n     \n    return colOut;\n}\n\n\n\n\nvec3 EscaleraTorre(vec2 p, vec3 colOut, vec3 colIn, int PNumEs)\n{\n    float d1;\n    float d=99999.0;\n    \n    int y;\n    p.y-=0.8;\n    p.x+=1.5;\n    \n    float AnchoTot=1.0;\n    float AltoTot=0.8;\n    float NumEs=float(PNumEs);\n    \n    float AnchoEs=AnchoTot/NumEs;\n    float AltoEs=AltoTot/NumEs;\n    float AltoEsNew;\n    \n    for(int i=1;i<=int(NumEs);i++ )\n     {   \n      float posx=float(i)*AnchoEs*2.0;\n      float posy=-float(i)*AltoEs*2.0;\n        \n      AltoEsNew=AltoTot-( float(i)- 1.0)*AltoEs ;\n       d1=sdBox(p-vec2( posx,posy/2.0-AltoEsNew), vec2(AnchoEs,AltoEs+AltoEsNew) );\n        d=min(d,d1);\n\n     }   \n    \n    //colOut=DrawFig(colIn, colOut, d);\n    colOut=DrawFigBorde(colIn, colOut, d);\n    \n    return colOut;\n}\n\n\nvec3 Suelo1(vec2 p, vec3 col)\n{\n    col=DrawFig(vec3(0.75,0.35,0.2), col, p.y-0.5 );\n return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv.y*=3.0;\n    \n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.45;\n    uv.x=uv.x+iTime;\n    \n    float px=mod(uv.x, 14.0);\n    uv.x=px;\n    \n    \n    col= Suelo1(uv,col);\n    if( uv.x<3.0)\n    {\n        col= EscaleraLargo(uv-vec2(2.0,-0.8),col, vec3(0.0));\n        col= EscaleraTorre(vec2(uv.y, uv.x)-vec2(1.2,1.2), col, vec3(0.5,0.2,0.0),4);\n        col= EscaleraV2(vec2(uv.y, uv.x)-vec2(1.0,1.5), col, vec3(1.0,0.2,0.0));\n    }\n    else\n    {\n      \n      col= EscaleraTorre(vec2(uv.y, uv.x)-vec2(0.9,4.2), col, vec3(0.7,0.6,0.2),6);\n      col= EscaleraLargo(uv-vec2(5.,-0.9),col, vec3(0.7,0.5,0.6));\n    }\n    \n    \n    if( uv.x>5.0)\n    {\n        col= EscaleraLargo(vec2(-uv.x,uv.y)-vec2(-6.5,-0.8),col, vec3(0.0));\n        col= EscaleraTorre(vec2(uv.y, uv.x)-vec2(1.0,7.5), col, vec3(0.5,0.3,0.0),6);\n    }\n    \n     if( uv.x>7.5)\n    {\n        col= EscaleraLargo(vec2(-uv.x,uv.y)-vec2(-8.5,-0.8),col, vec3(0.0));\n        col= EscaleraLargo(vec2(-uv.x,uv.y)-vec2(-10.5,-0.8),col, vec3(0.0));\n        col= EscaleraTorre(vec2(uv.y, uv.x)-vec2(1.0,9.5), col, vec3(0.5,0.2,0.0),4);\n        col= EscaleraTorre(vec2(uv.y, uv.x)-vec2(1.5,11.5), col, vec3(0.5,0.2,0.5),7);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}