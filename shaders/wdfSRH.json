{
    "Shader": {
        "info": {
            "date": "1550570544",
            "description": "Press SPACE to reinitialize positions.",
            "flags": 48,
            "hasliked": 0,
            "id": "wdfSRH",
            "likes": 5,
            "name": "blurred insects",
            "published": 3,
            "tags": [
                "random",
                "particles",
                "brownian",
                "polar",
                "dildo"
            ],
            "usePreview": 0,
            "username": "morisil",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "// Fork of \"blurred crazy colorful insects\" by morisil. https://shadertoy.com/view/3dlXzn\n// 2019-02-19 09:53:05\n\n// Fork of \"insects on speed\" by morisil. https://shadertoy.com/view/3ssSzn\n// 2019-02-18 12:02:19\n\n// Fork of \"generative dildos\" by morisil. https://shadertoy.com/view/3sS3Dd\n// 2019-02-18 11:58:51\n\n// Fork of \"floating creatures\" by morisil. https://shadertoy.com/view/Wd2GWz\n// 2019-02-15 15:32:09\n\n// Fork of \"focused random bubbles\" by morisil. https://shadertoy.com/view/Wdj3WR\n// 2019-01-27 20:22:06\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord\n) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int PARTICLE_COUNT = 20;\n\nconst float PARTICLE_SIZE = .2;\n\nconst float PARTICLE_EDGE_SMOOTHING = .01;\n\nconst float WALL_THINNESS = 6.;\n\nconst float MAX_VELOCITY = 0.005;\n\nconst float MAX_VELOCITY_CHANGE = 0.0005;\n\nconst float FOCAL_POINT_TENDENCY = .0001;\n\n\n\n\n\nconst float PI = acos(-1.);\n\nconst int POSITION_ROW = 0;\n\nconst int VELOCITY_ROW = 1;\n\nconst int COLOR_ROW = 2;\n\nconst int THICKNESS_ROW = 3;\n\nconst int LENGTH_ROW = 4;    \n    \nconst int LAST_ROW = LENGTH_ROW;\n\nconst vec4 COLOR_ZERO = vec4(0);\n\nconst vec2 VEC2_ZERO = vec2(0);\n\nconst vec2 HORIZONTAL_REVERSE = vec2(-1., 1.);\n\nconst vec2 VERTICAL_REVERSE = vec2(1., -1.);\n\n/*\n\nBEGIN: store vector on texture functions\n\ntaken from here:\n\nhttps://gist.github.com/Flexi23/1713774\n\nThese are the helper functions to store and to restore a 2D vector with a custom 16 floating point precision in a texture.\nThe 16 bit are used as follows: 1 bit is for the sign, 4 bits are used for the exponent, the remaining 11 bit are for the mantissa.\n\nThe exponent bias is asymmetric so that the maximum representable number is 2047 (and bigger numbers will be cut)\nthe accuracy from 1024 - 2047 is one integer\n512-1023 it's 1/2 int\n256-511 it's 1/4 int and so forth...\nbetween 0 and 1/16 the accuracy is the highest with 1/2048 (which makes 1/32768 the minimum representable number)\n\nSo this is a non-IEEE implementation (which would be a 5 bit exponent with a symmetric bias from 2^-15 to 2^16 and a 10 bit mantissa)\n\nI hope anyone else knows a purpose for such a buffer and can use it too (in a fragment shader). ;)\n\nFelix Woitzel, Jan/Feb 2012\n(Twitter: @Flexi23)\n\nattention: this is only tested on a AMD Radeon HD series chip so far and there might be oddities with Intel and Nvidia. I'll try and test it on other chips soon.\n\nstore: \"gl_FragColor = encode2( v );\"\nrestore: \"vec2 v = decode2( texture2D( encoded_sampler, coord) );\"\n\n*/\n\nvec2 encode(float v){\n\tvec2 c = vec2(0.);\n\n\tint signum = (v >= 0.) ? 128 : 0;\n\tv = abs(v);\n\tint exponent = 15;\n\tfloat limit = 1024.; // considering the bias from 2^-5 to 2^10 (==1024)\n\tfor(int exp = 15; exp > 0; exp--){\n\t\tif( v < limit){\n\t\t\tlimit /= 2.;\n\t\t\texponent--;\n\t\t}\n\t}\n\n\tfloat rest;\n\tif(exponent == 0){\n\t\trest = v / limit / 2.;\t\t// \"subnormalize\" implicite preceding 0. \n\t}else{\n\t\trest = (v - limit)/limit;\t// normalize accordingly to implicite preceding 1.\n\t}\n\n\tint mantissa = int(rest * 2048.);\t// 2048 = 2^11 for the (split) 11 bit mantissa\n\tint msb = mantissa / 256;\t\t// the most significant 3 bits go into the lower part of the first byte\n\tint lsb = mantissa - msb * 256;\t\t// there go the other 8 bit of the lower significance\n\n\tc.x = float(signum + exponent * 8 + msb) / 255.;\t// color normalization for texture2D\n\tc.y = float(lsb) / 255.;\n\n\tif(v >= 2048.){\n\t\tc.y = 1.;\n\t}\n\n\treturn c;\n}\n\nfloat decode(const vec2 c){\n\tfloat v = 0.;\n\n\tint ix = int(c.x*255.); // 1st byte: 1 bit signum, 4 bits exponent, 3 bits mantissa (MSB)\n\tint iy = int(c.y*255.);\t// 2nd byte: 8 bit mantissa (LSB)\n\n\tint s = (c.x >= 0.5) ? 1 : -1;\n\tix = (s > 0) ? ix - 128 : ix; // remove the signum bit from exponent\n\tint iexp = ix / 8; // cut off the last 3 bits of the mantissa to select the 4 exponent bits\n\tint msb = ix - iexp * 8;\t// subtract the exponent bits to select the 3 most significant bits of the mantissa\n\n\tint norm = (iexp == 0) ? 0 : 2048; // distinguish between normalized and subnormalized numbers\n\tint mantissa = norm + msb * 256 + iy; // implicite preceding 1 or 0 added here\n\tnorm = (iexp == 0) ? 1 : 0; // normalization toggle\n\tfloat exponent = pow( 2., float(iexp + norm) - 16.); // -5 for the the exponent bias from 2^-5 to 2^10 plus another -11 for the normalized 12 bit mantissa \n\tv = float( s * mantissa ) * exponent;\n\n\treturn v;\n}\n\nvec4 encode2(const vec2 v){\n\treturn vec4(encode(v.x), encode(v.y));\n}\n\t\t\nvec2 decode2(const vec4 c){\n\treturn vec2(decode(c.rg), decode(c.ba));\n}\n\n/* END: store vector on texture functions */\n\nfloat randImpl(const vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\n#define tex(ch, x, y) texelFetch(ch, ivec2(x, y), 0)\n\n#define rand(seed) randImpl(seed + mod(iTime, PI)) \n\n#define getParticleRawColor(row, index) tex(iChannel0, index, row) \n\n#define getParticleVector(row, index) decode2(getParticleRawColor(row, index))\n\n#define getParticleProperty(row, index) getParticleVector(row, index).x\n\n#define getParticlePosition(index) getParticleVector(POSITION_ROW, index)\n\n#define getParticleVelocity(index) getParticleVector(VELOCITY_ROW, index)\n\n#define getParticleColor(index) getParticleRawColor(COLOR_ROW, index)\n\n#define getParticleThickness(index) getParticleProperty(THICKNESS_ROW, index)\n\n#define getParticleLength(index) getParticleProperty(LENGTH_ROW, index)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// true if the space is pressed\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec4 getInitialState(\n    const int row,\n    const int particle, // not used here, but might be useful for other shaders\n    vec2 seed\n) {\n    vec4 state;\n    if (row == POSITION_ROW) {\n        state = encode2(VEC2_ZERO);        \n    } else if (row == VELOCITY_ROW) {\n        state = encode2(VEC2_ZERO);\n    } else if (row == COLOR_ROW) {\n        state = vec4(\n            rand(seed + .101),\n            rand(seed + .102),\n            rand(seed + .103),\n            1.\n        );\n    } else if (row == THICKNESS_ROW) {\n    \tstate = encode2(vec2(1., 0));       \n    } else if (row == LENGTH_ROW) {\n    \tstate = encode2(vec2(1., 0));\n\t}else {\n        state = COLOR_ZERO;\n    }\n    return state;\n}\n\nvec4 calculateNewState(\n    const int row,\n    const int particle,\n    const vec2 seed\n) {\n    vec4 state;\n    if (row == POSITION_ROW) {\n        state = encode2(\n            getParticlePosition(particle)\n            + getParticleVelocity(particle)\n        );\n    } else if (row == VELOCITY_ROW) {\n        vec2 velocity = getParticleVelocity(particle);\n        vec2 coord  = getParticlePosition(particle);\n        velocity += vec2(\n            rand(seed + .111) * MAX_VELOCITY_CHANGE * 2. - MAX_VELOCITY_CHANGE,\n            rand(seed + .112) * MAX_VELOCITY_CHANGE * 2. - MAX_VELOCITY_CHANGE\n        );\n        vec2 focalPoint = coord; // might be different for other shaders, e.g. mouse\n        velocity -= focalPoint * FOCAL_POINT_TENDENCY;\n        // TODO is there a better way to clamp the vector?\n\t\tvelocity = vec2(\n            clamp(velocity.x, -MAX_VELOCITY, MAX_VELOCITY),\n            clamp(velocity.y, -MAX_VELOCITY, MAX_VELOCITY)\n        );\n        vec2 prediction = coord + velocity;\n        if ((prediction.x < -.5) || (prediction.x > .5)) {\n            velocity *= HORIZONTAL_REVERSE;\n        }\n        if ((prediction.y < -.5) || (prediction.y > .5)) {\n            velocity *= VERTICAL_REVERSE;\n        }\n        state = encode2(velocity);\n    } else if (row == COLOR_ROW || row == LENGTH_ROW || row == THICKNESS_ROW) {\n        state = getParticleColor(particle); // will copy over\n    } else { // should never happen\n        state = COLOR_ZERO;\n    }\n    return state;\n}        \n\nvec4 getEncodedState(\n    const int row,\n    const int particle,\n    const vec2 seed\n) {        \n    vec4 state;    \n    if ((iFrame == 0) || reset()) {\n        state = getInitialState(row, particle, seed);\n    } else {\n        state = calculateNewState(row, particle, seed);\n    }\n    return state;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int particle = int(fragCoord.x);\n    int row = int(fragCoord.y);    \n    if ((row <= LAST_ROW) && (particle < PARTICLE_COUNT)) {\n    \tfragColor = getEncodedState(row, particle, fragCoord);        \n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvec3 getColor(\n    const float dist,\n    const float angle,\n    const float size,\n    const float globalAngle,\n    const int index\n) { \n    \n    float a = globalAngle - PI / 2. - angle;\n    \n    float thickness = 15. + randImpl(vec2(index, index)) * 40.;\n    \n    float segments = 5. + randImpl(vec2(index, index)) * 20.;\n    float f =\n        (1. - (sin(a) * sin(a) * sin(a)))\n        *\n        (1. /\n         \tsqrt(\n            \t(sin(a) * sin(a))\n            \t+ (thickness * cos(a) * cos(a))\n        \t)\n        )\n        + .3 * sin(a)\n        + mod(sin(a), 3.14 / segments) * 0.5\n        \n        ;\n    f = f* size * 0.5;\n\treturn vec3(\n        smoothstep(f, f - PARTICLE_EDGE_SMOOTHING, dist)\n        //pow(dist / size, WALL_THINNESS)\n        //* smoothstep(size, size - PARTICLE_EDGE_SMOOTHING, dist)        \n    );\n}\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord\n) {\n    vec2 pixel = (fragCoord - (iResolution.xy / 2.)) / iResolution.y;\n    vec3 mixedColor = texture(iChannel1, fragCoord / iResolution.xy).rgb;\n    mixedColor *= 0.95;\n    for (int i = 0; i < PARTICLE_COUNT; i++) {\n        vec2 particle = getParticlePosition(i);\n  \t\tfloat dist = distance(particle, pixel);\n        if (dist <= PARTICLE_SIZE) { \n            vec2 delta = particle - pixel;\n            float angle = atan(delta.x, delta.y);\n            vec2 velocity = getParticleVelocity(i);\n\t\t\tmixedColor +=\n                getColor(dist, angle, PARTICLE_SIZE, atan(velocity.x, velocity.y), i) * 0.05;\n        }\n    }\n    fragColor = vec4(mixedColor, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}