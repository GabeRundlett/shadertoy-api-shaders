{
    "Shader": {
        "info": {
            "date": "1651574462",
            "description": "Rotate around using your mouse/touchpad/touchscreen/fingers/..",
            "flags": 0,
            "hasliked": 0,
            "id": "slXfWX",
            "likes": 7,
            "name": "World of Spheres",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "sphere",
                "infinite"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\n// RAY MARCHING //\n#define EPSILON 0.001\n#define MAX_STEPS 1000\n#define MAX_DISTANCE 1000.0\n//              //\n\n//////////////////////////\n#define MAX_REFLECTIONS 10\n#define LIGHT vec3(10.0, 10.0, 10.0) * vec3(cos(iTime), 1, sin(iTime))\n\n#define ZOOM 1.0\n//////////////////////////\n\n\nconst float PI = 3.141592;\nconst float TAU = PI + PI;\n\n\nfloat sdGrid(vec3 p)\n{\n    float plane = p.y;\n    plane += 0.025 * smoothstep(0.05, 0.0, abs(p.x - round(p.x)));\n    plane += 0.025 * smoothstep(0.05, 0.0, abs(p.z - round(p.z)));\n\n    return plane;\n}\n\nfloat sdSpheres(vec3 p)\n{\n    float off = TAU * Hash21(round(p.xz));\n    p.xz = mod(p.xz, 2.0) - 1.0;\n    p.y -= 0.2 * sin(iTime + off) + 1.0;\n    \n    return length(p) - 0.4;\n}\n\nfloat GetDist(vec3 p)\n{\n    float grid = sdGrid(p);\n    float spheres = sdSpheres(p);\n\n    return min(grid, spheres);\n}\n\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(EPSILON, 0);\n    \n    return normalize(d - vec3(GetDist(p - e.xyy),\n                              GetDist(p - e.yxy),\n                              GetDist(p - e.yyx)));\n}\n\nfloat GetLight(vec3 p, vec3 n)\n{\n    vec3 l = normalize(LIGHT - p);\n    float diff = max(0.0, dot(n, l));\n\n    return diff;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd, float side)\n{\n    float dO = 0.0;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = side * GetDist(p);\n        if (abs(dS) <= EPSILON || dO > MAX_DISTANCE) break;\n        dO += dS;\n    }\n    \n    return dO;\n}\n\nvec3 offset(vec3 n)\n{\n    return EPSILON * 2.0 * n;\n}\n\n\nvoid image( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / min(iResolution.x, iResolution.y);\n    vec2 mouse;\n\n    if (iMouse.x == 0.0 && iMouse.y == 0.0)\n        mouse = vec2(0,0);\n    else\n        mouse = iMouse.xy / iResolution.xy - 0.5;\n\n    float yaw = mouse.x * TAU;\n    float pitch = mouse.y * PI;\n    vec4 cs = vec4(cos(yaw), sin(yaw), cos(pitch), sin(pitch));\n\n    vec3 ro = vec3(0, 1, 0),\n         p = cs.xwy * vec3(cs.z, 1, cs.z),\n         f = normalize(p),  // p = lookAt - ro (because lookAt = ro + p)\n         r = normalize(cross(f, vec3(0,1,0))),\n         u = cross(r, f),\n         rd = normalize(uv.x * r + uv.y * u + f * ZOOM);\n         //c = ro + f * ZOOM,\n         //i = c + uv.x * r + uv.y * u,\n         //rd = normalize(i - ro);\n\n    vec3 col = vec3(0);\n    vec3 n = vec3(0);  // vec3(0) so that the first offset is vec3(0) as well\n    vec3 reflOri = ro;\n    vec3 reflDir = rd;\n    \n    for (float r = 0.; r <= float(MAX_REFLECTIONS); r++)\n    {\n        vec3 off = offset(n);\n        reflOri += off;\n\n        float d = RayMarch(reflOri, reflDir, 1.0);\n        reflOri += reflDir * d;\n        vec3 spec = vec3(0);\n\n        if (sdGrid(reflOri) <= EPSILON)\n            spec += mod(floor(reflOri.x) + floor(reflOri.z), 2.0);\n        else if (sdSpheres(reflOri) <= EPSILON)\n            spec += Hash23(round(reflOri.xz));\n        else\n            break;\n\n        n = GetNormal(reflOri);\n        float diff = GetLight(reflOri, n);\n        spec += smoothstep(0.975, 1.0, diff);\n\n        col += diff * spec * pow(0.4, r);\n        //col += diff * spec / float(r + 1);\n\n        // For the next iteration\n        reflDir = reflect(reflDir, n);\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n    for (int j = 0; j < AA; j++)\n        for (int i = 0; i < AA; i++)\n        {\n            vec4 color;\n            vec2 co = fragCoord - 0.5;\n            vec2 off = (vec2(i, j) + 0.5) / float(AA);\n            image(color, co + off);\n            fragColor += color;\n        }\n\n    fragColor /= float(AA * AA);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float Hash21(vec2 p) {\n    return fract(43697.62 * sin(dot(p, vec2(52.83, 823.17))));\n}\n\nvec3 Hash23(vec2 p)\n{\n    float r = Hash21(p);\n    float g = Hash21(vec2(p.y * 59.84, r * 81.53));\n    float b = Hash21(vec2(g * 124.21, p.x * 62.27));\n    \n    return vec3(r,g,b);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}