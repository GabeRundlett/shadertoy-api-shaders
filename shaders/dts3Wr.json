{
    "Shader": {
        "info": {
            "date": "1671816448",
            "description": "The symmetric group S4, but also showing a useful optimization for raytracing cylinders (left v. right), and a strange bug I've noticed on my Pixel 4a Android phone (top v. bottom). Mouse rotates, top left shows exponentially zooming distance.",
            "flags": 16,
            "hasliked": 0,
            "id": "dts3Wr",
            "likes": 14,
            "name": "S4",
            "published": 3,
            "tags": [
                "precision",
                "bug",
                "cylinder",
                "android",
                "s4"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////\n//\n// S4, mla 2022\n//\n// This shows a representation of S4, the symmetric group on four elements\n// as acting on the diagonals of a cube, but more importantly, shows a\n// useful technique for improving the accuracy of finding ray-cylinder \n// intersections (and also the same for spheres, but we already know about\n// that (eg. see https://www.shadertoy.com/view/WdXfR2 by @fpsunflower).\n// As usual, I doubt if I'm the first to think of this, but I don't think\n// I've seen this trick before.\n//\n// The idea is to adjust the ray start position so as to make the linear\n// term in the quadratic of intersection vanish and the solutions are just\n// of the form ±k√x (the same idea as for the sphere, and just a little more\n// complicated to work out for the cylinder - it should be possible to do this\n// with any quadric, though I haven't tried it).\n//\n// I've also found an apparent bug with GLSL on my Pixel 4a Android phone -\n// it seems that storing the ray and direction in a Ray structure reduces\n// the representation precision (ie. as if highp was being cut down to mediump) -\n// see this in mainImage, line ***, where we round trip p and r through a structure\n// for the lower half of the screen - it would be interesting if any other platforms\n// show this behaviour - I have no idea if this is compliant with the standard but it\n// seems unlikely (the bug still exists with declaring the structure members highp).\n\nbool dorotate = true;\nbool optimize = true;\n\n// Putting p and r in can reduce their precision (eg. on Chrome/Android/Pixel 4a)\nstruct Ray {\n  vec3 p;\n  vec3 r;\n};\n\nstruct Hit {\n  float t;      // solution to p=q+t*d\n  vec3 n;       // (unnormalized) normal\n  int id;       // what was hit\n};\n\n// Solve Ax²+2Bx+C = 0 & return smallest root (ie. we are assuming we aren't\n// inside the object).\nbool quadratic(float A, float B, float C, out float x) {\n   float D = B*B - A*C;\n   if (D < 0.0) return false;\n   D = sqrt(D);\n   if (B < 0.0) D = -D;\n   float x0 = (-B-D)/A; // Largest magnitude root\n   float x1 = C/(A*x0);\n   x = min(x0,x1);\n   return true;\n}\n\n// Find intersection of ray p+tr with cylinder radius² = r2 and central axis ±n\n// (ie. so it's centred on the origin).\nbool cylinder(float r2, vec3 n, vec3 p, vec3 r, out float t, out vec3 normal) {\n  float len = length(n);\n  n /= len;\n  float pn = dot(p,n);\n  float rn = dot(r,n);\n  float pr = dot(p,r);\n  float k = 0.0;\n  if (optimize) {\n    // Adjust p so the B term in the quadratic is zero -\n    // then the solution is just ±√(-AC) and we avoid any\n    // cancellation errors due to subtraction from B².\n    k = (pr-pn*rn)/(rn*rn-1.0);\n    p += k*r;\n    float pp = dot(p,p);\n    pn = dot(p,n);\n    float A = 1.0 - rn*rn;\n    float C = pp - pn*pn - r2;\n    float D = -A*C;\n    if (D < 0.0) return false;\n    t = -sqrt(D)/A;\n  } else {\n    float pp = dot(p,p);\n    float A = 1.0 - rn*rn;\n    float B = pr - pn*rn;\n    float C = pp - pn*pn - r2;\n    if (!quadratic(A,B,C,t)) return false;\n  }\n  p += t*r; // Final point in line space\n  float lambda = dot(p,n);\n  if (abs(lambda) > len) return false; // No intersection\n  normal = p-lambda*n;\n  t += k; // Undo adjustment to p.\n  return t >= 0.0;\n}\n\nbool intersectCylinder(float r2, vec3 n, int id, vec3 p, vec3 r, inout Hit hit) {\n  float t;\n  vec3 normal;\n  if (!cylinder(r2,n,p,r,t,normal)) {\n    return false;\n  } else {\n    // Normal is the radial vector of cylinder\n    if (t < hit.t) hit = Hit(t, normal, id);\n    return true;\n  }\n}\n\nbool intersectSphere(float r2, vec3 s, int id, vec3 p, vec3 r, inout Hit hit) {\n  p -= s;\n  float k = 0.0;\n  float t;\n  if (optimize) {\n    k = dot(p,r);\n    p -= k*r;\n    float C = r2-dot(p,p);\n    if (C < 0.0) return false;\n    t = -sqrt(C);\n  } else {\n    float B = dot(p,r);\n    float C = dot(p,p)-r2;\n    float D = B*B - C;\n    if (D < 0.0) return false;\n    D = sqrt(D);\n    if (B < 0.0) D = -D;\n    t = -B-D;\n    float t1 = C/t;\n    t = min(t,t1);\n  }\n  vec3 n = p+t*r;\n  t -= k;\n  if (t < 0.0) return false;\n  if (t < hit.t) hit = Hit(t,n,id);\n  return true;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = -(2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = -(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (dorotate) {\n    float t = iTime;\n    p.zx = rotate(p.zx,t * 0.2);\n  }\n  return p;\n}\n\nbool intersectScene(vec3 p, vec3 r, out Hit hit) {\n  hit.t = 1e8;\n  vec3 p0 = vec3(1,1,1), p1 = vec3(1,-1,1);\n  vec3 p2 = vec3(-1,-1,1), p3 = vec3(-1,1,1);\n  float r2 = 0.1*0.1;\n  float s2 = 0.2*0.2;\n  intersectSphere(s2,p0,0,p,r,hit);\n  intersectSphere(s2,-p0,0,p,r,hit);\n  intersectSphere(s2,p1,1,p,r,hit);\n  intersectSphere(s2,-p1,1,p,r,hit);\n  intersectSphere(s2,p2,2,p,r,hit);\n  intersectSphere(s2,-p2,2,p,r,hit);\n  intersectSphere(s2,p3,3,p,r,hit);\n  intersectSphere(s2,-p3,3,p,r,hit);\n  intersectCylinder(r2,p0,4,p,r,hit);\n  intersectCylinder(r2,p1,4,p,r,hit);\n  intersectCylinder(r2,p2,4,p,r,hit);\n  intersectCylinder(r2,p3,4,p,r,hit);\n  return hit.t < 1e8;\n}\n\nvec3 getColor(int i) {\n  if (i == 0) return vec3(1,0,0);\n  if (i == 1) return vec3(0,1,0);\n  if (i == 2) return vec3(0,0,1);\n  if (i == 3) return vec3(1,1,0);\n  return vec3(1,1,1);\n}\n\nvec3 light;\nfloat ambient;\nfloat diffuse;\n\nvec3 solve(vec3 p, vec3 r) {\n  Hit hit;\n  if (!intersectScene(p,r,hit)) {\n    return vec3(0,0,0.1);\n  } else {\n    vec3 n = normalize(hit.n);\n    //if (dot(r.d,n) > 0.0) n = -n;\n    vec3 basecolor = getColor(hit.id);\n    vec3 color = basecolor;\n    color *= ambient+diffuse*max(0.0,dot(light,n));\n    float specular = pow(max(0.0,dot(reflect(light,n),r)),2.0);\n    color += 0.2*specular*vec3(1,1,0);\n    //color *= clamp(1.0 - (hit.t-3.0)/5.0,0.0,1.0); //????\n    return color;\n  }\n}\n\nfloat hud(vec2 fragCoord, float x) {\n  // Show the camera distance at top left.\n  const int digits = 7, nrows = 15, ncols = 4;\n  // Table structure\n  vec2 cellsize = iResolution.xy/vec2(ncols,nrows);\n  ivec2 cellindex = ivec2(fragCoord/cellsize);\n  int column = cellindex.x;\n  int row = nrows-cellindex.y-1; // Reverse order of rows\n  if (row != 0 || column != 0) return 0.0;\n  \n  float fsize = cellsize.y; // \"Font size\" = line height in pixels\n  vec2 p = mod(fragCoord,cellsize)/fsize;\n  float uvscale = 0.5/(16.0*fsize);   // 0.5 to sharpen a little\n  vec2 dx = vec2(uvscale,0), dy = vec2(0,uvscale);\n\n  // Draw the character\n  vec4 metrics = vec4(0.25,0.75,0,1);\n  float charwidth = metrics.y-metrics.x;\n  float colwidth = cellsize.x/fsize-1.0; // Cell width in chars, with padding\n  int charpos = int(p.x/charwidth);\n  vec2 uv = vec2(0);\n  int c = printfloat(x,digits,charpos); // Get character at charpos, 0 if out of range\n  if (c > 0) {\n    float charstart = charwidth*float(charpos); // character start\n    uv = char(vec2(p.x-charstart+metrics.x,p.y),c);\n  }\n  vec4 t = textureGrad(iChannel0,uv,dx,dy);\n  if (c > 0) return t.x;\n  return 0.0;  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  optimize = fragCoord.x > 0.5*iResolution.x;\n  vec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  float camera = exp2(2.0+mod(iTime,28.0));\n  vec3 p = vec3(0,0,-camera);\n  vec3 r = vec3(uv,0.5*camera);\n  p = transform(p);\n  r = transform(r);\n  r = normalize(r);\n  light = vec3(0.5,1,-1);\n  light = transform(light);\n  light = normalize(light);\n  float t = 0.5*iTime;\n  ambient = 0.2;\n  diffuse = 0.6;\n  Ray ray = Ray(p,r);\n  //assert(p == ray.p);\n  //assert(r == ray.r);\n  if (fragCoord.y < 0.5*iResolution.y) {\n    p = ray.p; r = ray.r; // *** Extract p and r from ray - they should be the same\n  }\n  vec3 col = solve(p,r);\n  col = mix(col,vec3(1),hud(fragCoord,camera));\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n  if (alert) fragColor.r = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//precision highp float; // Makes no difference on Pixel 4a, nor should it.\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.14159265;\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\n// https://www.shadertoy.com/view/4sBfRd\nvec2 char(vec2 p, int c) {\n  // Compute uv for font texture.\n  // p is [0,1] coordinates in square character\n  return (p + vec2(c,15-c/16))/16.0;\n}\n\n// Wrapper for division to allow emulation of GPU style division\n// on CPU, not that this makes much difference to result.\nfloat fdiv(float x, float y) { return x/y; }\n\n// If we've found the character for the target index, return it.\n#define CHAR(c) { if (index++ == cindex) return(c); }\n\nint printfloat(float x, int digits, int cindex) {\n  if (cindex < 0 || cindex > digits+6) return 0;\n  int index = 0;\n  const float pmax = 1e15; //  Large power of 10 with a nice representation\n  const int emax = 15; // Exponent of pmax\n  const float pow10[] = float[]( 1e1,1e2,1e3,1e4,1e5,1e6,1e7,1e8 );\n  const int ZERO = 0x30, POINT = 0x2e, MINUS = 0x2d, PLUS = 0x2b;\n  const int A = 0x61, E = 0x65, F = 0x66, I = 0x69, N = 0x6e;\n  const int SPACE = 0x20;\n  if (isinf(x)) {\n    if (x < 0.0) CHAR(MINUS);\n    CHAR(I); CHAR(N); CHAR(F);\n  } else if (isnan(x)) {\n    if (floatBitsToInt(x) < 0) CHAR(MINUS);\n    CHAR(N); CHAR(A); CHAR(N);\n  } else if (x == 0.0) {\n    if (1.0/x < 0.0) CHAR(MINUS);\n    CHAR(ZERO);\n  } else {\n    if (x < 0.0) CHAR(MINUS) // No semicolon!\n    else CHAR(SPACE);\n    x = abs(x);\n    int exp = 0; // Compute exponent here\n    float llimit = pow10[digits-2], ulimit = 10.0*llimit;\n    // Now put x in the range llimit <= x <= ulimit\n    while (x > llimit*pmax) { x /= pmax; exp += emax; }\n    while (x < fdiv(ulimit,pmax)) { x *= pmax; exp -= emax; }\n    if (x >= ulimit) {\n      float p = 1.0;\n      while (fdiv(x,p) > ulimit) {\n        exp++; p *= 10.0;\n      }\n      x = fdiv(x,p);\n    } else if (x < llimit) {\n      float p = 1.0;\n      while (x*p < llimit) {\n        exp--;  p *= 10.0;\n      }\n      x *= p;\n    }\n    assert(!isinf(x));\n    assert(!isnan(x));\n    assert(x >= llimit);\n    assert(x <= ulimit); // Equality is possible!\n    // Round to an integer which has exactly the significant figures we want.\n    int n = int(round(x));\n    if (n == int(ulimit)) {\n      // Just in case the round has taken us the wrong way\n      n /= 10; exp++;\n    }\n    assert(n >= int(llimit));\n    assert(n < int(ulimit));\n    // Now we have our (correctly rounded) integer representation\n    // together with the correct exponent.\n    // See if we want to use exponent notation\n    int e = 0;\n    if (exp <= -digits-4) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    } else if (exp > 0) {\n      e = exp+digits-1;\n      exp = -digits+1;\n    }\n    while(n%10 == 0 && exp < 0) {\n      // Remove trailing zeros\n      n /= 10; exp++;\n    }\n    int m = 1, i = exp+1;\n    while (10*m <= n) { m *= 10; i++; }\n    // i is number of characters in front of decimal point\n    if (i <= 0) {\n      CHAR(ZERO);\n      CHAR(POINT);\n      // Add leading digits for 0 < x < 1\n      while(i < 0) {\n        CHAR(ZERO); i++;\n      }\n    }\n    while(m != 0) {\n      CHAR(ZERO+n/m%10);\n      m /= 10; i--;\n      // Don't print trailing point!\n      if (i == 0 && m != 0) CHAR(POINT);\n    }\n    if (e != 0) {\n      CHAR(E);\n      CHAR(e < 0 ? MINUS : PLUS);\n      e = abs(e);\n      CHAR(ZERO+e/10); CHAR(ZERO+e%10); \n    }\n  }\n  return 0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}