{
    "Shader": {
        "info": {
            "date": "1609183688",
            "description": "A shader I did a while back for simulating 3D without any 3D calculation.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlccW7",
            "likes": 3,
            "name": "Fake 3D effect",
            "published": 3,
            "tags": [
                "3d",
                "fake3d",
                "vapor"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\nfloat lenny(vec2 v){return abs(v.x)+abs(v.y);}\n\nbool inTriangle(vec2 A, vec2 B, vec2 C, vec2 P, float thick)\n{\n  vec2 v0 = C - A;\n  vec2 v1 = B - A;\n  vec2 v2 = P - A; \n  \n  // Compute dot products\n  float dot00 = dot(v0, v0);\n  float dot01 = dot(v0, v1);\n  float dot02 = dot(v0, v2);\n  float dot11 = dot(v1, v1);\n  float dot12 = dot(v1, v2);\n  \n  // Compute barycentric coordinates\n  float invDenom = 1. / (dot00 * dot11 - dot01 * dot01);\n  float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n  float v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n  // Check if point is in triangle return\n  return (u >= 0.) && (v >= 0.) && (u + v < 1.) &&\n   (u<thick||v<thick||(u+v)>1.-thick);\n}\n\nvec3 drawSphLight(vec2 uv, vec3 norm)\n{\n  vec3 ldir = vec3(-5.);\n\n  return sat(-dot(normalize(norm),normalize(ldir)))*vec3(1.);\n}\n\nvec3 draw(vec2 uv)\n{\n  uv.y += sin(iTime)*.5;\n  vec3 col;\n  float gstp = 0.1;\n  float gsz = gstp/10.;\n  float limit = 1.-float(abs(uv.y)<.3);\n  col = vec3(.34,.45,.67)*limit*float(mod(sign(uv.x)*iTime+(abs(uv.x)+gsz/4.)/abs(uv.y),gstp)<gsz\n    || mod(1./abs(uv.y),gstp)<gsz);\n\n  col += (1.-sat((lenny(uv*vec2(.2,2.))-.5)*2.))*vec3(1.);\n\n  vec2 sphuv = uv+vec2(0.,sin(iTime+3.));\n  float sphSdf = (length(sphuv)-.5*1./(sin(iTime*2.)+2.5));\n  float sph = 1.-sat(sphSdf*200.);\n\n  vec2 tp = vec2(-0.,-.5);\n  float tri = float(inTriangle(.5*vec2(sin(-iTime),cos(iTime)),\n    vec2(.5,.2)*vec2(sin(iTime*.5),cos(iTime*2.)), vec2(sin(iTime),cos(iTime))*vec2(.5,.8),uv-tp,.5));\n\n    vec3 tris = tri*vec3(uv,.5);\n\n  return 2.*tris+mix(col,drawSphLight(uv, vec3(sphuv*5., 1.-sat(sphSdf))),sph);\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col = draw(uv);\n  col *= 1.5;\n  col *= (1.-sat((lenny(uv)-.8)*1.))*(vec3(uv,.5)*.5+.5);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*iResolution.xy/iResolution.xx;\n  uv*= 4.;\n\n  vec3 col = rdr(uv);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}