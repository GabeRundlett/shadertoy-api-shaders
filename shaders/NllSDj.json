{
    "Shader": {
        "info": {
            "date": "1626590171",
            "description": "Endlessly zooming out of an infinite cosmos of colorful clouds.",
            "flags": 0,
            "hasliked": 0,
            "id": "NllSDj",
            "likes": 28,
            "name": "Shepard Noise",
            "published": 3,
            "tags": [
                "zoomer",
                "shepardtone"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 848
        },
        "renderpass": [
            {
                "code": "// from https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec3 getc(vec2 uv, int frame) {\n    vec2 o = hash22(vec2(frame, 0.0));\n    vec2 r = hash22(vec2(frame, 1.0)) * 6.283185;\n    vec2 cs = vec2(cos(r.x), sin(r.x));\n    uv = vec2(dot(uv, cs), dot(uv, cs.yx * vec2(1.0, -1.0)));\n    vec3 col = texture(iChannel0, uv / vec2(1.0, 1.0) - o).rgb;\n    vec3 hsl = rgb2hsl(col);\n    hsl.x += float(frame) * 2.0 / (sqrt(5.0) - 1.0) + uv.x * 0.01;\n    return hsl2rgb(hsl);\n}\n\nvec3 shepard_noise (vec2 uv, float loglevel) {\n    int it = int(loglevel);\n    float m = fract(loglevel);\n\n    const float O = 2.0;\n    const int N = 32;\n    \n    uv *= exp(mix(log(1.0),log(O),m));\n    uv *= 2.0;\n    \n    vec3 w = vec3(0.0);\n    w += mix(getc(uv, it - N), vec3(0.0), m);\n    uv /= O;\n    for (int i = 1; i < N; ++i) {\n        w += getc(uv, it - N + i);\n        uv /= O;\n    }\n    w += mix(vec3(0.0), getc(uv, it), m);\n    \n    w /= float(N);\n    \n    w = pow(vec3(2.0), (w - 0.3)*log2(float(N))*32.0);\n    return w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy)*2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float t = iTime / 4.0;\n    \n    \n    int it = int(t / 8.0);\n    float m = smoothstep(0.0, 1.0, fract(t / 8.0));\n    //float m = fract(t / 8.0);\n    \n    vec2 p0 = hash22(vec2(it, 0))*2.0 - 1.0;\n    float s0 = hash22(vec2(it, 1)).x * 64.0;\n    vec2 p1 = hash22(vec2(it + 1, 0))*2.0 - 1.0;\n    float s1 = hash22(vec2(it + 1, 1)).x * 64.0;\n    vec2 p = mix(p0, p1, m);\n    float s = mix(s0, s1, m);\n    \n    vec3 w = shepard_noise(uv - p, s);\n    \n    fragColor = vec4(pow(ACESFitted(w),vec3(0.4545)),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\n// from https://www.shadertoy.com/view/lsS3Wc\n\nconst float eps = 0.0000001;\n\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + eps)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              // H\n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + eps),  // S\n                 (minc+maxc)*0.5 );                           // L\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}