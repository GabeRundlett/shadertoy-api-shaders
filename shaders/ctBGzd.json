{
    "Shader": {
        "info": {
            "date": "1673704822",
            "description": "CC0: Duo-level truchet\nExperimenting with duo level truchet with multiple tiles\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ctBGzd",
            "likes": 16,
            "name": "Duo-level truchet",
            "published": 3,
            "tags": [
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// CC0: Duo-level truchet\n//  Experimenting with duo level truchet with multiple tiles\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float w_0 = 0.11;\nconst float w_1 = 0.195;\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec2 mod2_1(inout vec2 p) {\n  p += 0.5;\n  vec2 c = floor(p);\n  p = fract(p) - 0.5;\n  return c;\n}\n\nfloat df_0_0(vec2 p) {\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_0_1(vec2 p) {\n  vec2 ap = abs(p);\n  float d0 = ap.x;\n  float d1 = ap.y;\n  float d2 = circle(p, 2.0*w_0);\n  float d = d0;\n  d = min(d, d1);\n  d = min(d, d2);\n  d = abs(d) - w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_0_2(vec2 p) {\n  vec2 ap = abs(p);\n  float d0 = length(ap-vec2(0.5, 0.0));\n  float d1 = length(ap-vec2(0.0, 0.5));\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_0_3(vec2 p) {\n  float d0 = length((p)-vec2(0.5, 0.0));\n  float d1 = length((p)-vec2(0.0, 0.5));\n  float d2 = circle(p+0.5, 0.5);\n  float d = d0;\n  d = min(d, d1);\n  d = min(d, d2);\n  d = abs(d) - w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_0_4(vec2 p) {\n  vec2 ap = p;\n  ap.x = abs(ap.x);\n  float d0 = length(ap-vec2(0.5, 0.0));\n  float d1 = ap.x;\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_1_0(vec2 p) {\n  vec2 ap = abs(p);\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  float d2 = circle(ap-0.5, w_1);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - w_1;\n  d = min(d, d2);\n  return d;\n}\n\nfloat df_1_1(vec2 p) {\n  vec2 ap = abs(p);\n  float d0 = circle(ap-vec2(0.5, 0.0), (0.25));\n  float d1 = circle(ap-vec2(0.0, 0.5), (0.25));\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - 0.5*w_0;\n  d = -d;\n  return d;\n}\n\nfloat df_1_2(vec2 p) {\n  vec2 ap = (p);\n  ap.x = abs(p.x);\n  float d0 = circle(ap-vec2(0.5, 0.0), (0.25));\n  float d1 = abs(ap.x-0.25);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - 0.5*w_0;\n  d = -d;\n  return d;\n}\n\n\nfloat df_1_3(vec2 p) {\n  float d0 = (circle(p-0.5, 0.75));\n  float d1 = (circle(p-vec2(-0.5, 0.0), (0.25)));\n  float d2 = (circle(p-vec2(0.0, -0.5), (0.25)));\n  float d3 = abs(circle(p-0.5, 0.25))-0.5*w_0;\n  \n  float d = d0;\n  d = min(d, d1);\n  d = min(d, d2);\n  d = abs(d) - 0.5*w_0;\n  d = min(d, d3);\n  d = -d;\n  return d;\n}\n\nconst mat2 rots[4] = mat2[4](\n    ROT(0.0*TAU/4.0)\n  , ROT(1.0*TAU/4.0)\n  , ROT(2.0*TAU/4.0)\n  , ROT(3.0*TAU/4.0))\n  ;\n\nfloat df(vec2 p) {\n  vec2 pp0 = p;\n  vec2 np0 = mod2_1(pp0);\n  float h0_0 = hash(np0);\n  float h1_0 = fract(8677.0*h0_0);\n  float h2_0 = fract(3677.0*h0_0);\n\n  if (h2_0 > 0.5) {\n    vec2 pp1 = p*2.0;\n    pp1 += 0.5;\n    vec2 np1 = mod2_1(pp1);\n    float h1_0 = hash(np1);\n    float h1_1 = fract(8677.0*h1_0);\n    pp1 *= rots[int(h1_0*4.0)];\n    float d1 = 0.0;\n    if (h1_1 > 0.85) {\n      d1 = df_0_4(pp1);\n    } else if (h1_1 > 0.75) {\n      d1 = df_0_3(pp1);\n    } else if (h1_1 > 0.55) {\n      d1 = df_0_2(pp1);\n    } else if (h1_1 > 0.4) {\n      d1 = df_0_1(pp1);\n    } else {\n      d1 = df_0_0(pp1);\n    }\n    d1 *= 0.5;\n    return d1;\n  }\n  \n  pp0 *= rots[int(h0_0*4.0)];\n  float d0 = 0.0;\n  if (h1_0 > 0.9) {\n    d0 = df_1_3(pp0);\n  } else if (h1_0 > 0.7){\n    d0 = df_1_2(pp0);  \n  } else if (h1_0 > 0.5){\n    d0 = df_1_1(pp0);  \n  } else {\n    d0 = df_1_0(pp0);\n  }\n  return d0;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float ll = length(pp);\n\n  float aa = 2.0/RESOLUTION.y;\n\n  const float sz = 0.333;\n\n  const float a = 10.0;\n  p += sin(0.25*vec2(1.0, sqrt(0.5))*TIME/a)*a;\n  float d = df(p/sz)*sz;\n  vec3 col = vec3(0.0);\n  col = mix(col, vec3(0.5), smoothstep(aa, -aa, d));\n  col *= smoothstep(1.5, 0.5, ll);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);  \n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}