{
    "Shader": {
        "info": {
            "date": "1544928725",
            "description": "Merry Christmas everyone!",
            "flags": 0,
            "hasliked": 0,
            "id": "WdsGR8",
            "likes": 6,
            "name": "Xmas2018",
            "published": 3,
            "tags": [
                "raymarch",
                "text",
                "line",
                "hsv",
                "snow",
                "slow",
                "extrude"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 961
        },
        "renderpass": [
            {
                "code": "// festive (and slow) - delz 16/12/2018\n// added a couple of slight optimizations, it now actually runs on the iPhoneX ;)\n\n#define PI 3.14159\n#define\tTAU 6.28318\n\n//------------------------------------------------------------------------\n// Camera\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time)\n{\n    vec2 mouse2 = vec2(sin(time*0.25)*0.1, 0.6+((0.5+sin(time) * 0.5)*0.5)*2.8);\n    float an = 7.0*mouse2.x;\n    camPos = vec3(28.5*sin(an),mouse2.y*8.0,28.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n//------------------------------------------------------------------------\n// Modelling \n//------------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n    return p.y;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 opUnionRound(const in vec2 a, const in vec2 b, const in float r)\n{\n    vec2 res = vec2(smin(a.x,b.x,r),(a.x<b.x) ? a.y : b.y);\n    return res;\n}\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nfloat line( vec2 p, vec2 a, vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h )-0.3;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\t\n\n// model\nfloat A(vec2 p,float d){d=min(d,line(p,vec2(1,-8),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(5,-1.5)));d=min(d,line(p,vec2(1,-5),vec2(5,-5)));d=min(d,line(p,vec2(5,-8),vec2(5,-1.5)));return d;}\nfloat C(vec2 p,float d){d=min(d,line(p,vec2(5,-1.5),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(1,-8)));d=min(d,line(p,vec2(1,-8),vec2(5,-8)));return d;}\nfloat E(vec2 p,float d){d=min(d,line(p,vec2(5,-1.5),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(1,-8)));d=min(d,line(p,vec2(1,-8),vec2(5,-8)));d=min(d,line(p,vec2(3,-5),vec2(1,-5)));return d;}\nfloat H(vec2 p,float d){d=min(d,line(p,vec2(1,-8),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-5),vec2(5,-5)));d=min(d,line(p,vec2(5,-8),vec2(5,-1.5)));return d;}\nfloat I(vec2 p,float d){d=min(d,line(p,vec2(1.5,-1.5),vec2(4.5,-1.5)));d=min(d,line(p,vec2(3,-1.5),vec2(3,-8)));d=min(d,line(p,vec2(1.5,-8),vec2(4.5,-8)));return d;}\nfloat M(vec2 p,float d){d=min(d,line(p,vec2(1,-8),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(3,-4)));d=min(d,line(p,vec2(3,-4),vec2(5,-1.5)));d=min(d,line(p,vec2(5,-1.5),vec2(5,-8)));return d;}\nfloat R(vec2 p,float d){d=min(d,line(p,vec2(1,-8),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(5,-1.5)));d=min(d,line(p,vec2(5,-1.5),vec2(5,-5)));d=min(d,line(p,vec2(5,-5),vec2(1,-5)));d=min(d,line(p,vec2(3.5,-5),vec2(5,-8)));return d;}\nfloat S(vec2 p,float d){d=min(d,line(p,vec2(5,-1.5),vec2(1,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(1,-5)));d=min(d,line(p,vec2(1,-5),vec2(5,-5)));d=min(d,line(p,vec2(5,-5),vec2(5,-8)));d=min(d,line(p,vec2(5,-8),vec2(1,-8)));return d;}\nfloat T(vec2 p,float d){d=min(d,line(p,vec2(3,-8),vec2(3,-1.5)));d=min(d,line(p,vec2(1,-1.5),vec2(5,-1.5)));return d;}\nfloat Y(vec2 p,float d){d=min(d,line(p,vec2(1,-1.5),vec2(3,-5)));d=min(d,line(p,vec2(3,-5),vec2(3,-8)));d=min(d,line(p,vec2(3,-5),vec2(5,-1.5)));return d;}\n\n\nfloat message(vec3 p)\n{\n\tfloat d = 200.0;\n    float cw = 5.8;\n    float gap = (cw*2.0)+38.8;\n    float width = (15.0*cw);\n    float xmod = width+gap;\n    \n\tfloat c = pMod1(p.z,18.0);\n\tif (c>0.0 || p.z > 10.0 || p.z < -10.0)\n        return d;\n    \n\tp.x += fract(iTime*0.075)*xmod+c*25.0;\n    pMod1(p.x, xmod);\n\t\n\tfloat d2 = sdBox(p+vec3((gap*0.5)-cw,-3.0,0.0),vec3((width*0.5),5.5,0.8));\n\tif (d2>8.0)\n\t    return d;\n\t\n\tvec2 uv = p.xy;\n\tfloat x = -((width*0.5+gap*0.5)-cw);\n\tfloat t1 = fract(iTime*0.7) * TAU;\n\n\tfloat y = 7.6+sin(t1+p.x*0.25)*0.7;\n\tuv-=vec2(x,y);    \n\t\n\td = M(uv,d); uv.x -= cw;\n\td = E(uv,d); uv.x -= cw;\n\td = R(uv,d); uv.x -= cw;\n\td = R(uv,d); uv.x -= cw;\n\td = Y(uv,d); uv.x -= cw+cw;\n\td = C(uv,d); uv.x -= cw;\n\td = H(uv,d); uv.x -= cw;\n\td = R(uv,d); uv.x -= cw;\n\td = I(uv,d); uv.x -= cw;\n\td = S(uv,d); uv.x -= cw;\n\td = T(uv,d); uv.x -= cw;\n\td = M(uv,d); uv.x -= cw;\n\td = A(uv,d); uv.x -= cw;\n\td = S(uv,d);\n\n\tif (d<200.0)\n\t{\n\t\t// extrude\n\t\tfloat dep = 0.3;\n\t\tvec2 e = vec2( d, abs(p.z) - dep );\n\t\td = min(max(e.x,e.y),0.0) + length(max(e,0.0));\n\t\td -= 0.425;\t\t// rounding\n\t}\n\treturn d;\n}\n\n\nvec2 doModel( vec3 p )\n{\n    float d2 = sdPlane(p-vec3(0.0,-1.8,0.0));\t\t// checkered floor distance...\n    float dm = message(p);\n    vec2 res = vec2(d2,0.0);\t\t\t// distance,material index\n    res = opUnionRound(res,vec2(dm,4.0),1.5);\t\n    return res;\n}\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal.\n//------------------------------------------------------------------------\n// c = colour index (added by del for some materials)\n// c.a == specular val fudged in...\nvec4 doMaterial( in vec3 pos, in vec3 nor,float c )\n{\n    if (c<=1.0)\n    {\n        // checker floor\n\tfloat f = mod( floor(0.125*pos.z) + floor(0.125*pos.x), 2.0) + 0.35;\n        return f*vec4(0.331,0.725,0.951,0.0)*0.6;\t    \n    }\n    return vec4(hsv2rgb_smooth(vec3(-iTime*0.2+(pos.x+(pos.y*4.5))*0.0075,0.95,1.0))*0.5, 1.7);\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mat )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(0.7,0.875,0.89));\t\t// dir\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0;\n    if( dif>0.01 )\n        sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(1.00,1.00,1.00)*sha;\n    float spec = pow(dif, 160.0) *mat.a;\n    \n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mat.xyz*lin;\n    col+=spec;\n    \n    // fog    \n    //-----------------------------\n    col *= exp(-0.0001*dis*dis);\n    return col;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n    const float maxd = 180.0;           // max trace distance\n    const float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n    vec2 res = vec2(-1.0,0.0);\n    float c = 0.0;\n    \n    for( int i=0; i<100; i++ )          // max number of raymarching iterations is 100\n    {\n        if( h<precis||t>maxd ) break;\n        vec2 res2 = doModel( ro+rd*t );\n\t    h = res2.x;\n        c = res2.y;\n        \n        t += h*0.75;\n    }\n\n    if( t<maxd )\n    {\n        res.x = t;\n        res.y = c;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.001;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n//snow original -> http://glslsandbox.com/e#36547.1\nfloat snow(vec2 uv,float scale)\n{\n    float time = iTime*0.75;\n    uv+=time/scale;\n    uv.y+=time*2./scale;\n    uv.x+=sin(uv.y+time*.5)/scale;\n    uv*=scale;\n    vec2 s=floor(uv);\n    vec2 f=fract(uv);\n    float k=3.0;\n    vec2 p =.5+.35*sin(11.*fract(sin((s+scale)*mat2(7.0,3.0,6.0,5.0))*5.))-f;\n    float d=length(p);\n    k=min(d,k);\n    k=smoothstep(0.,k,sin(f.x+f.y)*0.01);\n    return k;\n}\n\n\nvec3 _Snow(vec2 uv,vec3 background)\n{\n    float c = snow(uv,30.)*.3;\n    c+=snow(uv,20.)*.5;\n    c+=snow(uv,15.)*.8;\n    c+=snow(uv,10.);\n    c+=snow(uv,8.);\n    c+=snow(uv,6.);\n    c+=snow(uv,5.);\n    c = clamp(c,0.0,1.0);\n    vec3 scol = vec3(1.0,1.0,1.0);\n    scol = mix(background,scol,c);\n    return scol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime);\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n    // create view ray\n    vec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n    // render\n    //-----------------------------------------------------\n    vec3 col = mix( vec3(0.2, 0.2, 0.2), vec3(0.0, 0.0, 0.1), fragCoord.y / iResolution.y )*0.4;\n\n    // raymarch\n    vec2 res = calcIntersection( ro, rd ); \n    float t = res.x;\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec4 mat = doMaterial( pos, nor, res.y );\n\n        col = doLighting( pos, nor, rd, t, mat );\n    }\n\n    //-----------------------------------------------------\n    // postprocessing\n    //-----------------------------------------------------\n    // gamma\n    col = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    col = _Snow(p.xy*0.5,col);\n    fragColor = vec4(col,1.);\t\n}\n// thank god, its the end of the terrible shader...\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}