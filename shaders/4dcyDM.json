{
    "Shader": {
        "info": {
            "date": "1519153726",
            "description": "trying to make a snowman",
            "flags": 0,
            "hasliked": 0,
            "id": "4dcyDM",
            "likes": 2,
            "name": "HelloWorldSDF",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "#define FAR 10.0\n#define STEPS 256\n#define EPS 0.0001\n#define PI acos( -1.0 )\n\nfloat sdSphere( vec3 p, float d )\n{\n\n    return length( p ) - d;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdPlane( vec3 p, float n )\n{\n  // n must be normalized\n  return p.y + n;\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n\nfloat smin( float a, float b )\n{\n#if 0\n\tfloat k = 32.0;\n\tfloat res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n#else\n    float k = 0.1;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n#endif\t\n}\n\n\nfloat opBlend( float d1, float d2 )\n{\n    return smin( d1, d2 );\n}\n\nvec2 map( vec3 p )\n{\n    \n    float body = sdSphere( p, 1.0 );\n    p.y -= 1.4;\n    float head = sdSphere( p, 0.6 );\n    p.z -= 0.3;\n    float spheres = opBlend( body, head );\n    p.x += 1.0;\n    p.y += 0.5;\n    float rightArm = sdSphere( p, 0.4 );\n    float spheresTwo = opBlend( rightArm, spheres );\n    p.x -= 2.0;\n    float leftArm = sdSphere( p, 0.4 );\n    float spheresThree = opBlend( leftArm, spheresTwo );\n    p.y += 0.8;\n    p.x += 0.5;\n    float leftLeg = sdCapsule( p, vec3( 1.0, -1.0, 0.0 ), vec3( 0.0 ), 0.4 );\n    float spheresFour = opBlend( leftLeg, spheresThree );\n    p.y += 1.0;\n    p.x += 1.8;\n    float rightLeg = sdCapsule( p, vec3( 1.0, 1.0, 0.0 ), vec3( 0.0 ), 0.4 );\n    float spheresFive = opBlend( rightLeg, spheresFour );\n    p.x -= 1.3;\n    p.y -= 2.1;\n    float mouth = sdSphere( p, clamp( sin( iTime * 0.2 ), 0.25, 0.3 ) );\n    float spheresSix = opS( mouth, spheresFive );\n    p.x -= 0.1;\n    p.y -= 0.2;\n    float leftEye = sdSphere( p, 0.3 );\n    float spheresSeven = opS( leftEye, spheresSix );\n    p.x += 0.2;\n    float rightEye = sdSphere( p, 0.3 );\n    float sphereEight = opS( rightEye, spheresSeven );\n    p.y += 1.8;\n    vec2 plane = vec2( sdPlane( p, 1.0 ), 0.0 );\n    p.x -= 0.1;\n    p.y -= 0.3;\n    p.z -= 0.7;\n    float bellyButton = sdSphere( p, 0.1 );\n    vec2 finish = vec2( opS( bellyButton, sphereEight ), 1.0 );\n    \n    if( plane.x < finish.x ) finish = plane;\n    \n    return finish;\n    \n}\n\nvec3 grad( vec3 p )\n{\n    \n    vec2 e = vec2( 0.0, EPS );\n    vec3 n = vec3( map( p + e.yxx ).x - map( p - e.yxx ).x,\n                   map( p + e.xyx ).x - map( p - e.xyx ).x,\n                   map( p + e.xxy ).x - map( p - e.xxy ).x\n     \t\t\t  );\n    return n;    \n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        \n        float h = map( ro + rd * t ).x;\n        \n        if( h < 0.001 ) return 0.0;\n        res = min( res, 4.0 * h / t );\n        t += h;\n    \n    }\n    \n    return res;\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\tvec3 pos = ro + rd * t;\n    vec3 n = normalize( grad( pos ) );\n    \n    vec3 lig = normalize( vec3( cos( iTime ), 0.8, sin( iTime ) ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 ref = reflect( rd, n );\n    \n    float dif = max( 0.0, dot( n, lig ) );\n    float bac = max( 0.0, 0.2 + 0.8 * dot( n, blig ) );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 ); \n    float con = 1.0;\n    float sha = softShadows( pos, lig );\n    float amb = 0.5 + 0.5 * n.y;\n    \n    vec3 col = con * vec3( 0.1, 0.15, 0.2 );\n    col += amb * vec3( 0.1, 0.15, 0.2 );\n    col += dif * vec3( 1.0, 0.97, 0.85 ) * sha;\n    col += bac * vec3( 1.0, 0.97, 0.85 );\n    \n    col = sqrt( col );\n    col *= 0.6;\n    \n    if( map( pos ).y == 0.0 )\n    {\n        \n        col *= vec3( 1.5, 0.0, 0.0 );\n        \n        \n    }\n    \n    else\n    {\n    \n        col *= vec3( 1.4 );\n        col += 1.0 * spe;\n    }\n    \n    if( pos.x < 1.5 && pos.y > 1.6 )\n    {\n    \n        col *= vec3( 0.0 );\n        \n    }\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float t = 0.0;\n    float d = EPS;\n    \n    vec4 mouser = iMouse / iResolution.xyxy;\n    \n    vec3 ro = 3.5 * vec3( sin( mouser.x * PI * 2.0 ), 0.0, cos( -mouser.x * PI * 2.0 ) );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = vec3( uu * uv.x + vv * uv.y + 1.5 * ww  );\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n     \n        d = 0.5 * map( ro + rd * t ).x;\n        \n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( 0.2, 0.4, 0.5 ), vec3( 1.0 ), uv.y );\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}