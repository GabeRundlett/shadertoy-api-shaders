{
    "Shader": {
        "info": {
            "date": "1585818459",
            "description": "Trying out raymarching. Low iteration count = glow!",
            "flags": 0,
            "hasliked": 0,
            "id": "tsfcWl",
            "likes": 1,
            "name": "Glowy lattices",
            "published": 3,
            "tags": [
                "raymarching",
                "lattice"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 50\n#define EPSILON 0.01\n\n#define minx(a, b) ((a.w) < (b.w) ? (a) : (b))\n\nfloat sphere(vec3 r, float a)\n{\n\treturn length(r) - a;\n}\n\nfloat pointy(vec3 r, float a)\n{\n\tfloat d = (abs(r.x*3.) + 1./a) * (abs(r.y) + 1./a) * (abs(r.z) + 1./a);\n\treturn length(r) - 1./ d;\n}\n\nfloat plane(vec3 r, vec3 o, vec3 n) {\n\treturn dot(r - o, n);\n}\n\nfloat box(vec3 r, vec3 a)\n{\n\tvec3 p = abs(r) - a;\n\treturn length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat shade(vec3 n, vec3 rd)\n{\n\treturn clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n\nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n\treturn mix(fogCol, col, exp(-z));\n}\n\nmat3 obj;\nfloat t;\n\nvec4 map(vec3 r)\n{\n\tvec4 s0 = vec4(\n\t\tvec3(1.0, 0.2, 0.) * 1.2,\n\t\tpointy(obj * (mod(r + 1.0, 4.) - 1.0), 1.0)\n\t);\n\tvec4 s1 = vec4(\n\t\tvec3(0., 1., 1.) * 1.2,\n\t\tsphere(mod(r + 3.0 + vec3(\n\t\t\tcos(t*10.) * 0.2, \n\t\t\tsin(t*10.) * 0.2, \n\t\t\tsin(t)*1.5 + 2.), 4.) - 1.0, 0.05)\n\t);\n\tvec4 b0 = vec4(\n\t\tvec3(0., 0.4, 1.0) * 1.2,\n\t\tbox(mod(r + 3.0, 4.) - 1.0, vec3(4., 0.05, 0.05))\n\t);\n\tvec4 b1 = vec4(\n\t\tvec3(0., 0.4, 1.0) * 1.2,\n\t\tbox(mod(r + 3.0, 4.) - 1.0, vec3(0.05, 4., 0.05))\n\t);\n\tvec4 b2 = vec4(\n\t\tvec3(0., 0.4, 1.0) * 1.2,\n\t\tbox(mod(r + 3.0, 4.) - 1.0, vec3(0.05, 0.05, 4.))\n\t);\n\t\n\treturn minx(s0, minx(s1, minx(b0, minx(b1, b2))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tt = iTime;\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= 0.5;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tmat3 cam = mat3(\n\t\tcos(t * 0.2), 0., sin(t * 0.2),\n\t\t0., 1., 0.,\n\t\t-sin(t * 0.2), 0., cos(t * 0.2)\n\t) * mat3(\n\t\tcos(t * 0.2), -sin(t * 0.2), 0., \n\t\tsin(t * 0.2), cos(t * 0.2), 0.,\n\t\t0., 0., 1.\n\t);\n\t\n\tobj = mat3(\n\t\tcos(t * 2.), 0., sin(t * 2.),\n\t\t0., 1., 0.,\n\t\t-sin(t * 2.), 0., cos(t * 2.)\n\t) * mat3(\n\t\tcos(t * 1.5), -sin(t * 1.5), 0., \n\t\tsin(t * 1.5), cos(t * 1.5), 0.,\n\t\t0., 0., 1.\n\t);\n\t\n\tvec3 ro = vec3(t, 0., .75 * sin(t * 0.785) - 2.);\n\tvec3 rd = cam * normalize(vec3(uv, 1.));\n\tvec3 r = ro;\n\t\n\tvec4 col = vec4(1.);\n\tvec3 bcol = vec3(1., 0.5, 0.0) + 0.2;\n\t\n\tvec4 c = vec4(bcol, 1.);\n\t\n\tfloat sh = 1.;\n\t\n\tfor (int i = 0; i < MAXIT; ++i) {\n\t\tvec4 d = map(r);\n\t\tfloat z = length(r - ro);\n\t\t\n\t\tvec4 nc = minx(c, d);\n\t\tc.rgb = mix(nc.rgb, c.rgb, nc.w / c.w);\n\t\tc.w = nc.w;\n\t\t\n\t\tif (d.w < EPSILON) {\t\t\t\n\t\t\tcol.rgb = d.rgb * shade(normalize(r), rd);\n\t\t\tcol.rgb = fog(z * 0.1, col.rgb, bcol);\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tr += rd * (clamp(d.w, -1., 1.)) * 0.8;\n\t\tsh += (float(i) / float(MAXIT)) / max(z, 1.);\n\t}\n\t\n\tcol.rgb *= exp(-sh * sh * 0.03);\n\t\n\tif (c.w > EPSILON) {\n\t\tcol.rgb = fog(c.w * 2., c.rgb, bcol);\n\t}\n    \n\tfragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}