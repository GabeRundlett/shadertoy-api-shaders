{
    "Shader": {
        "info": {
            "date": "1725328495",
            "description": "Fake real flow! As if raining magic gel onto a glass plate.\n\nEdits: changed texture filter mode to nearest so it works on mobile, made flow strength resolution-dependent so it is as designed, played with gradient influence to make it similar on all sizes",
            "flags": 32,
            "hasliked": 0,
            "id": "XfBfRd",
            "likes": 4,
            "name": "Gel Shower v1.2",
            "published": 3,
            "tags": [
                "fluid",
                "background",
                "visual",
                "vj"
            ],
            "usePreview": 0,
            "username": "d00fd00f",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float resF = iResolution.x/1800.0;\n          // Normalized pixel coordinates (from 0 to 1)\n    vec2 pOffs = 1.0/iResolution.xy; // texel width\n    vec2 uv = fragCoord/iResolution.xy;\n    \n  \n    \n    \n    vec2 uv00 = vec2(-pOffs.x,0.0);\n    vec2 uv01 = vec2(pOffs.x,0.0);    \n    vec2 uv10 = vec2(0.0,-pOffs.y);\n    vec2 uv11 = vec2(0.0,pOffs.y); \n    \n    vec4 dx = (texture(iChannel0, uv+uv01)-texture(iChannel0, uv+uv00))*0.5;\n    vec4 dy = (texture(iChannel0, uv+uv11)-texture(iChannel0, uv+uv10))*0.5;\n    vec2 d = clamp(vec2(2.0*dx.x+3.0*dx.y+dx.z, 2.0*dy.x+3.0*dy.y+dy.z),-1.0,1.0);\n\n    d=4e4*pOffs*d;\n    d *= resF*resF;\n     uv -= d;\n    vec4 t = texture(iChannel0, uv);\n    \n    // normal color\n    fragColor.xyz = vec3(2.0*t);\n    \n    //float f = t.x*2.0+t.y*3.0+t.z;\n    \n    // b&w\n    /*\n    f=1.0-f;\n    fragColor.xyz = vec3(f*f);\n    */\n        \n    //b&w 2\n    /*\n    f=f*(1.0-4.0*f*abs(fract(0.16+0.2*f*f)-0.5));\n    f=1.0-f/(f+f*f);\n    fragColor.xyz = vec3(4.0*(1.0-f*f)*f*f);\n    */\n    \n    fragColor.w=1.0;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float resF = iResolution.x/1800.0;\n          // Normalized pixel coordinates (from 0 to 1)\n    vec2 pOffs = 1.0/iResolution.xy; // texel width\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    float r = getBlurRadius(iTime)*(resF);\n    float hs =getHalfSide(r,iTime);\n    \n    vec4 res = vec4(0.);\n    for(float o = -hs; o <= hs; o++){    \n        res += coeff_avg(o, r)\n        *texture(iChannel0, uv+vec2(o*pOffs.x, 0.0));\n    }\n\n    // Output to screen\n    fragColor = clamp(vec4(res.xyz, 1.0)\n    ,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define texture(s,a) texture(s,fract(a))\n\n\n#define vmin(v) min(v.x,v.y)\n#define vmax(v) max(v.x,v.y)\n\nconst uint maxUint = 0xFFFFFFFFu;\nconst float maxUAsFloat = float(maxUint);\nconst float invMaxUAsFloat = 1.0/maxUAsFloat;\n\nconst float xScale = 16384.0;\nconst float xIScale = 1.0/xScale;\n\nconst float PI = 3.14159265359;\nconst float PI2 = 2.0*PI;\nprecision highp float;\n/*\nuint\ntriple32inc(uint x)\n{\n    x++;\n    x ^= x >> 17;\n    x *= 0xed5ad4bbu;\n    x ^= x >> 11;\n    x *= 0xac4c1b51u;\n    x ^= x >> 15;\n    x *= 0x31848babu;\n    x ^= x >> 14;\n    return x;\n}\n*/\nfloat hashf(float v){\n   // return fract(uintBitsToFloat(triple32inc(floatBitsToUint(v))));\n   return fract(v*15743.0+3571.0);\n}\n\n// k.jpg derivative derivative opensimplex.\n// Inspired by Stefan Gustavson's noise\nvec4 permute(vec4 t) {\n   \n    return t * (t * 137.0 + 171.0);\n}\n\n// start at 1 and round up to next odd number\nfloat getHalfSide(float radius, float t){\n    int s =int(t*.5)%3;\n    float f = 1.25;\n  /*  switch(s){\n        case 0:\n        {\n            f = 1.25;\n        }\n        break;\n        case 1:{\n            f = 2.0;\n        }\n        break;\n            \n        case 2:{\n            f = 3.0;\n        }\n        break;\n    }*/\n    float b = 1.0+2.0*ceil(radius);\n    return b*f;\n}\n\nfloat getBlurRadius(float t){\n    \n    //return 100.0 * ((-.5*sin( fract(.5*t) * 2.0 * PI )) + .5);\n    return 3.5;\n}\n\nfloat coeff_box(float offset, float sigma){\n    float sigF = sigma;\n    float kWidth = 1.0+2.0*floor(sigma)*step(0.0,sigma);\n    \n    return (step(-sigF,offset)-step(sigF,offset))/(kWidth);\n}\n\nfloat coeff_gauss(float offset, float radius){\n\n    return min( \n        (1.0/sqrt(2.0*PI*radius*radius))\n        *\n        exp(\n            -offset*offset/(2.0*radius*radius)\n        ),1.0);\n}\n\nfloat coeff_avg(float offset, float radius){\n    radius *= 1.25;\n    float a = min(\n    (1.0-abs(offset))+radius\n    ,1.0);\n    \n    float s = 1.0 + 2.0*radius;\n    \n    s= max(s, 1.0);\n    \n    return \n    min(max(a,0.0),1.0)\n    /s\n    ;\n}\n\nfloat coeff_linear(float offset, float radius){\n    radius *= 2.0;\n    float ar = 1.0 + radius;\n    float as = ar*ar;\n    return min(max(1.0+radius-abs(offset),0.0)/as\n    ,1.0);\n}\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 openSimplex2Base(vec3 X) {\n    \n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n    \n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n    \n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    \n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.5 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n    \n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\n// Use this if you don't want Z to look different from X and Y\nvec4 openSimplex2_Conventional(vec3 X) {\n    \n    // Rotate around the main diagonal. Not a skew transform.\n    vec4 result = openSimplex2Base(dot(X, vec3(2.0/3.0)) - X);\n    return vec4(dot(result.xyz, vec3(2.0/3.0)) - result.xyz, result.w);\n}\n\n// Use this if you want to show X and Y in a plane, then use Z for time, vertical, etc.\nvec4 openSimplex2_ImproveXY(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    vec4 result = openSimplex2Base(orthonormalMap * X);\n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n//////////////////////////////// End noise code ////////////////////////////////",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float resF = iResolution.x/1800.0;\n          // Normalized pixel coordinates (from 0 to 1)\n    vec2 pOffs = 1.0/iResolution.xy; // texel width\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    float r = getBlurRadius(iTime)*(resF);\n    float hs =getHalfSide(r,iTime);\n    \n    vec4 res = vec4(0.);\n    for(float o = -hs; o <= hs; o++){    \n        res += coeff_avg(o, r)\n        *texture(iChannel0, uv+vec2(0.0,o*pOffs.x));\n    }\n\n    // Output to screen\n    fragColor = clamp(vec4(res.xyz, 1.0)\n    ,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float resF = iResolution.x/1800.0;\n          // Normalized pixel coordinates (from 0 to 1)\n    vec2 pOffs = iResolution.xy; // texel width\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    vec2 uv00 = vec2(-pOffs.x,0.0);\n    vec2 uv01 = vec2(pOffs.x,0.0);    \n    vec2 uv10 = vec2(0.0,-pOffs.y);\n    vec2 uv11 = vec2(0.0,pOffs.y); \n    \n    vec4 dx = (texture(iChannel0, uv+uv01)-texture(iChannel0, uv+uv00))*0.5;\n    vec4 dy = (texture(iChannel0, uv+uv11)-texture(iChannel0, uv+uv10))*0.5;\n    vec2 d = clamp(vec2(2.0*dx.x+3.0*dx.y+dx.z, 2.0*dy.x+3.0*dy.y+dy.z),-1.0,1.0);\n    \n    vec2 tuv = uv;\n    d=1e5*pOffs*d;\n        d *= resF;\n     uv += d;\n \n    vec4 texel = texture(iChannel0,uv);\n\n    \n    //uv = tuv;\n     \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime*0.2+uv.xyx+d.xyx*1e0+vec3(0,PI2/3.0,PI2/1.5));\n    \n    // summed opensimplex\n    vec4 noise = \n    openSimplex2_ImproveXY(vec3(uv.xy*4.0,iTime*0.3)) * 0.2 +\n    openSimplex2_ImproveXY(vec3(uv.xy*5.0,iTime*0.3)) * 0.2 +\n    openSimplex2_ImproveXY(vec3(uv.xy*8.0,iTime*0.3)) * 0.2 +\n    openSimplex2_ImproveXY(vec3(uv.xy*9.0,iTime*0.3)) * 0.2 +\n    openSimplex2_ImproveXY(vec3(uv.xy*7.0,iTime*0.3)) * 0.2;\n    \n   // noise = clamp(noise, 0.0,1.0);\n    \n    // extract peaks\n    float c = 0.475;\n    float div = 2e-2;\n    float w = div*resF;\n    float l = c-w;\n    float r = c+w;\n    \n    float n = hashf(noise.w);\n    n *= n;\n    \n    col *= smoothstep(l,c,noise.w)*smoothstep(r,c,noise.w)*n;\n   \n    // sharpen\n    col = clamp((col*col), -1., 1.);\n    \n    fragColor.xyz = \n    clamp(1.0*(texel.xyz*(0.99-0.000*resF)\n    + col)\n    ,0.0,1.0);\n    fragColor.w = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float resF = iResolution.x/1800.0;\n          // Normalized pixel coordinates (from 0 to 1)\n    vec2 pOffs = 1.0/iResolution.xy; // texel width\n    vec2 uv = fragCoord/iResolution.xy;\n    \n  \n    vec2 uv00 = vec2(-pOffs.x,0.0);\n    vec2 uv01 = vec2(pOffs.x,0.0);    \n    vec2 uv10 = vec2(0.0,-pOffs.y);\n    vec2 uv11 = vec2(0.0,pOffs.y); \n    \n    vec4 dx = (texture(iChannel0, uv+uv01)-texture(iChannel0, uv+uv00))*0.5;\n    vec4 dy = (texture(iChannel0, uv+uv11)-texture(iChannel0, uv+uv10))*0.5;\n    vec2 d = clamp(vec2(2.0*dx.x+3.0*dx.y+dx.z, 2.0*dy.x+3.0*dy.y+dy.z),-1.0,1.0);\n    \n    vec2 tuv = uv;\n    d=1.05e1 *pOffs*pow(abs(d),vec2(0.6))*sign(d);\n        d *= (resF+resF*resF);\n     uv += d;\n \n    vec4 texel = texture(iChannel0,uv);  \n    fragColor.xyz=texel.xyz;\n    fragColor.w = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}