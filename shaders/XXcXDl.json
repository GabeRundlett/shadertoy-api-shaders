{
    "Shader": {
        "info": {
            "date": "1719745010",
            "description": "original source https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/wtdfRX https://www.shadertoy.com/view/4XtXDf",
            "flags": 0,
            "hasliked": 0,
            "id": "XXcXDl",
            "likes": 5,
            "name": "Kaleidoscope psy ",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos(h*6.3+vec3(0,23,21))*.5+.5\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n     vec3 screenRes = iResolution;\n\n    // Position vector\n    vec3 o;\n\n    // Current time\n    float time = iTime;\nvec4  finalImage = O;\nvec2 texCoords = C;\n    // Spiral pattern control variables\n    float spiralFactor = 0.1;\n    float scale = 3.0;\n    float brightness = 2.0;\n    float maxExponent = 25.0;\n    float angleOffset = 0.314;\n    float modulationFactor = 0.1;\n    float fractOffset = 0.5;\n    float vectorScale = 1000.0;\n    vec4 rotationConstants = vec4(0.0, 11.0, 33.0, 0.0);\n    vec3 color1 = vec3(0.84, 0.74, 0.87);\n    vec3 color2 = vec3(0.9, 0.9, 0.6);\n\n    // Loop through exponent values\n    for (float exponent = 0.0; exponent < maxExponent; exponent++) {\n\n        // Modulus operation for z to create layers\n        o.z = mod(o.z, modulationFactor) - modulationFactor;\n\n        // Update x based on time and scale\n        float x = spiralFactor - time * scale;\n\n        // Transform the o.xy vector using rotation matrix\n        vec2 transformedVector = o.xy *= mat2(\n            cos(rotationConstants + round((atan(o.y, o.x) - x) / angleOffset) * angleOffset + x)\n        );\n        o.x = fract(transformedVector.x) - fractOffset;\n\n        // Calculate length of the vector\n        float vectorLength = length(o);\n\n        // Increment spiral factor\n        float timeScaleIncrement = vectorLength / scale;\n        spiralFactor += timeScaleIncrement;\n\n        // Calculate cosine and sine for color manipulation\n        float cosValue = cos(spiralFactor + time * scale);\n        float sinValue = sin(spiralFactor + time * scale);\n\n        // Color mask calculation\n        float colourMask = clamp(cos(time * scale) + sin(time * scale), 0.0, 1.0);\n\n        // Add to final image using brightness and vector length\n        finalImage += (brightness + cosValue) * (brightness + sinValue) / (vectorLength * vectorScale);\n\n        // Normalize and scale the position vector\n        o = spiralFactor * normalize(\n            vec3((texCoords + texCoords - screenRes.xy) * mat2(cos(rotationConstants + time * scale)), screenRes.y)\n        );\n\n        // Clamp final image values\n        finalImage = clamp(finalImage, 0.0, 1.0);\n\n        // Define two colors for mixing\n        vec3 mixedColor1 = finalImage.xyz * color1;\n        vec3 mixedColor2 = finalImage.xyz * color2;\n          finalImage = vec4(mix(mixedColor1, mixedColor2, colourMask), 0.0);\n         }\n         vec4 O2 = finalImage ;\n    vec3 r=iResolution,p;  \n  \n    for(float i=0.,g,e,s;\n        ++i<99.;\n        (e<.002)?O.xyz+=mix(r/r,H(log(s)*.25),.5)*1./i:p\n    )\n    {\n        p=g*vec3((C-.5*r.xy)/r.y,1);\n      \n        p=R(p,normalize(vec3(0,1.2,1.2)),3.15);\n\n        p.xz=abs(p.xz)-1.+cos(iTime);\n        p.x>p.z?p=p.zyx:p;\n         p.z<p.x?p=p.yzx:p;\n        s=2.;\n        for(int j=0;j++<7;)\n          \n            s*=e=3.7/clamp(dot(p,p),0.,5.+0.1*cos(iTime)),\n            p=abs(p)*e-vec3(1,1.+0.1*cos(iTime),.003);\n        g+=e=length(p.xz)/s;\n    \n    \n    \n    }\n    O+=O2;\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.25)*5., 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}