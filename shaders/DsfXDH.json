{
    "Shader": {
        "info": {
            "date": "1668778900",
            "description": "perlin and worley",
            "flags": 0,
            "hasliked": 0,
            "id": "DsfXDH",
            "likes": 0,
            "name": "perlin and worley",
            "published": 3,
            "tags": [
                "2dnoise"
            ],
            "usePreview": 0,
            "username": "Lincac",
            "viewed": 67
        },
        "renderpass": [
            {
                "code": "#define scale 8.\n\nfloat perlin(vec2 p){\n    vec2 i = floor(p); // 返回一个值等于或小于参数的最接近的整数 获取网格索引\n    vec2 f = fract(p); // 返回一个值等于参数的小数部分  获取网格内位置\n\n    float p0 = random( i );\n    p0 = 0.5 + 0.5*sin( iTime + 6.2831*p0 );\n    float p1 = random( i + vec2( 1.0, 0.0 ));\n    p1 = 0.5 + 0.5*sin( iTime + 6.2831*p1 );\n    float p2 = random( i + vec2( 0.0, 1.0 ));\n    p2 = 0.5 + 0.5*sin( iTime + 6.2831*p2 );\n    float p3 = random( i + vec2( 1.0, 1.0 ));\n    p3 = 0.5 + 0.5*sin( iTime + 6.2831*p3 );\n\n    vec2 u = f*f*(3.0-2.0*f); // 差值系数\n\n    return mix(mix(p0,p1,u.x),mix(p2,p3,u.x),u.y); \n}\n\nfloat worley(vec2 p){\n    vec2 i = floor(p); // 返回一个值等于或小于参数的最接近的整数 获取网格索引\n    vec2 f = fract(p); // 返回一个值等于参数的小数部分  获取网格内位置\n\n    float feature = 1.0;\n    for(int m=-1;m<=1;m++){\n        for(int n=-1;n<=1;n++){\n            vec2 offset = vec2(float(m),float(n));\n            vec2 point = random22(i + offset); // 特征点位置\n            point = 0.5 + 0.5*sin( iTime + 6.2831*point );\n            float d = length(point + offset - f);\n            feature = min(feature,d);\n        }\n    }\n    return 1.0 - feature;\n}\n\nfloat fbm4_p(vec2 p){\n    float noiseValue = 0.0;\n\n    float a = 0.5;\n    float f = 0.8;\n\n    for (int i = 0; i < 5; i++) { // 四阶\n        noiseValue += a * perlin(p * f);\n\n        a *= 0.5;\n        f *= 2.0;\n    }\n\n    return noiseValue;\n}\n\nfloat fbm4_w(vec2 p){\n    float noiseValue = 0.0;\n\n    float a = 0.5;\n    float f = 0.8;\n\n    for (int i = 0; i < 5; i++) { // 四阶\n        noiseValue += a * worley(p * f);\n\n        a *= 0.5;\n        f *= 2.0;\n    }\n\n    return noiseValue;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= scale;\n    uv -= vec2(.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float p = perlin(uv);\n    float w = worley(uv);\n    \n    float _p_fbm4 = fbm4_p(uv);\n    float _w_fbm4 = fbm4_w(uv);\n    float pw = clamp(remap(_p_fbm4,_w_fbm4,1.0,0.0,1.0),0.,1.);\n    \n\tfragColor =  vec4(pw,pw,pw,1.);\n\t//fragColor =  vec4(p,p,p,1.);\n\t//fragColor =  vec4(w,w,w,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float random(vec2 p){\n    return fract(sin(dot(p,vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 random2(vec2 p){\n    return fract(\n                sin(\n                    vec2(\n                        dot(p,vec2(127.9898,311.233)),\n                        dot(p,vec2(269.3265,124.7643))\n                    )\n                ) * 43758.5453123\n            ) * 2. - 1.;\n}\n\nvec2 random22(vec2 p)\n{\n    return fract(\n                sin(\n                    vec2(\n                        dot(p,vec2(127.9898,311.233)),\n                        dot(p,vec2(269.3265,183.7643))\n                    )\n                ) * 43758.5453123\n            );\n}\n\nfloat remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)\n{\n\treturn newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}