{
    "Shader": {
        "info": {
            "date": "1605701119",
            "description": "[url]https://en.wikipedia.org/wiki/Laves_graph[/url]\n\nSee header for controls.",
            "flags": 48,
            "hasliked": 0,
            "id": "wddBRX",
            "likes": 17,
            "name": "Laves Graph",
            "published": 3,
            "tags": [
                "graph",
                "lattice",
                "laves",
                "tridiamond"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 683
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// The Laves Graph: https://en.wikipedia.org/wiki/Laves_graph\n// Matthew Arcus, mla, 2020\n//\n// Also known as the tridiamond and the K4 lattice.\n//\n// Controls:\n// <mouse>: rotate\n// <up>/<down>: move in/out\n// <left>/<right>: fog distance\n// i: apply inversion\n// c: show fundamental cell\n// d: show doubled graph\n// r: autorotation\n// z: zooming\n//\n// A cubic lattice with each vertex connected to 3 others. Vertices are in\n// 4 classes, here coloured red, green, blue, yellow and edges in 6\n// classes, edges in each class have the same coloured end vertices\n// and are parallel.\n//\n// The lattice is chiral and the edges form spirals, in fact, the\n// lattice is related to the gyroid surface - see Alan Schoen's AMS\n// letter here: http://www.ams.org/notices/200806/tx080600663p.pdf\n//\n// The construction is from Coxeter - in a 4x4x4 cell, put vertices\n// at (0,0,0),(2,2,2),(1,2,3),(3,0,1),(2,3,1),(0,1,3),(3,1,2),(1,3,0)\n// and join the vertices distance sqrt(2) apart. Here we offset\n// Coxeter's coordinates by 1 as this makes for slightly more\n// efficient drawing and also makes a nice symmetric fundamental cell\n// (press 'c' to see just the cell).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint maxsteps = 100;\nfloat maxdist = 20.0;\nfloat pradius = 0.3;  // Point radius\nfloat lradius = 0.1;  // Line radius\n\nbool dorotate = true; // Autorotate\nbool doinvert = true;\nbool showregion = false;\nbool dozoom = false;\n\nfloat cell(vec3 p, out int type) {\n  type = 0;\n  float d = 1e8, d0 = d;\n  d = min(d, point(p,vec3(1,1,1))-pradius);\n  d = min(d, point(p,vec3(3,3,3))-pradius);\n  if (d < d0) { d0 = d; type = 1; }\n\n  // Points with a 0 coordinate repeat at 4.\n  d = min(d, point(p,vec3(2,3,0))-pradius);\n  d = min(d, point(p,vec3(2,3,4))-pradius); // Repeated point (etc.)\n  d = min(d, point(p,vec3(0,1,2))-pradius);\n  d = min(d, point(p,vec3(4,1,2))-pradius);\n  if (d < d0) { d0 = d; type = 2; }\n\n  // Cyclic permutations of previous 4 points\n  d = min(d, point(p,vec3(0,2,3))-pradius);\n  d = min(d, point(p,vec3(4,2,3))-pradius);\n  d = min(d, point(p,vec3(2,0,1))-pradius);\n  d = min(d, point(p,vec3(2,4,1))-pradius);\n  if (d < d0) { d0 = d; type = 3; }\n\n  // Cyclic permutations of previous 4 points\n  d = min(d, point(p,vec3(3,0,2))-pradius);\n  d = min(d, point(p,vec3(3,4,2))-pradius);\n  d = min(d, point(p,vec3(1,2,0))-pradius);\n  d = min(d, point(p,vec3(1,2,4))-pradius);\n  if (d < d0) { d0 = d; type = 4; }\n\n  d = min(d, segment(p,vec3(1,1,1),vec3(0,1,2))-lradius); // -1,0,1\n  d = min(d, segment(p,vec3(0,1,2),vec3(0,2,3))-lradius); // 0,1,1\n  d = min(d, segment(p,vec3(0,2,3),vec3(1,2,4))-lradius); // 1,0,1\n  d = min(d, segment(p,vec3(1,2,4),vec3(2,3,4))-lradius); // 1,1,0\n  d = min(d, segment(p,vec3(2,3,4),vec3(3,3,3))-lradius); // 1,0,-1\n  \n  // Cyclic permutations of previous 5 edges\n  d = min(d, segment(p,vec3(1,1,1),vec3(2,0,1))-lradius);\n  d = min(d, segment(p,vec3(2,0,1),vec3(3,0,2))-lradius);\n  d = min(d, segment(p,vec3(3,0,2),vec3(4,1,2))-lradius);\n  d = min(d, segment(p,vec3(4,1,2),vec3(4,2,3))-lradius);\n  d = min(d, segment(p,vec3(4,2,3),vec3(3,3,3))-lradius);\n  \n  // Cyclic permutations of previous 5 edges\n  d = min(d, segment(p,vec3(1,1,1),vec3(1,2,0))-lradius);\n  d = min(d, segment(p,vec3(1,2,0),vec3(2,3,0))-lradius);\n  d = min(d, segment(p,vec3(2,3,0),vec3(2,4,1))-lradius);\n  d = min(d, segment(p,vec3(2,4,1),vec3(3,4,2))-lradius);\n  d = min(d, segment(p,vec3(3,4,2),vec3(3,3,3))-lradius);\n\n  if (d < d0) { d0 = d; type = 0; }\n  return d;\n}\n\nfloat getdist0(vec3 p, out int type) {\n  float k = 1.0;\n  if (doinvert) {\n    k = 0.3*dot(p,p);\n    p /= k;\n  }\n  p += 2.0; // Centre region\n  p.xy += vec2(0.5,-0.5); // Align to centre of gyroid\n  if (!showregion) {\n    if (dozoom) p.z += 2.0*iTime;\n    // Space division into 4x4x4 cubes\n    p = mod(p,4.0);\n  }\n  return k*cell(p,type);\n}\n\nfloat getdist(vec3 p, out int type) {\n  float d = getdist0(p,type);\n  if (key(CHAR_D)) {\n    int type1;\n    float d1 = getdist0(p*vec3(-1,-1,1),type1);\n    if (d1 < d) { \n      d = d1; type = type1;\n    }\n  }\n  return d;\n}\n\nfloat getdist(vec3 p) {\n  int type;\n  return getdist(p,type);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  float precis = 0.001;\n  for(int i = 0; i < maxsteps; i++) {\n    //assert (i < 30);\n    vec3 p = ro + t*rd;\n    float d = getdist(p);\n    if (doinvert) d *= 0.6;\n    // Longer distance estimates can be inaccurate, so clamp to avoid overstepping.\n    t += min(d,0.8);\n    if (t < 0.0 || t > maxdist || abs(d) < t*precis) break;\n  }\n  return t;\n}\n\nvec3 getnormal(vec3 p) {\n  float d = getdist(p);\n  vec2 e = vec2(0.001, 0);\n  vec3 n = d - vec3(getdist(p-e.xyy),\n                    getdist(p-e.yxy),\n                    getdist(p-e.yyx));\n  return normalize(n);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.yx = rotate(p.yx,iTime * 0.1);\n  }\n  return p;\n}\n\nvec3 getcolor(int type) {\n  if (type == 0) return vec3(0.5);\n  if (type == 1) return vec3(1,0,0);\n  if (type == 2) return vec3(0,1,0);\n  if (type == 3) return vec3(0,0,1);\n  if (type == 4) return vec3(1,1,0);\n  return vec3(0,1,1);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  doinvert = key(CHAR_I);\n  showregion = key(CHAR_C);\n  dorotate = !key(CHAR_R);\n  dozoom = !key(CHAR_Z);\n\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 m = iMouse.xy/iResolution.y;\n  vec3 ro = vec3(0,0,-6);\n  vec3 rd = vec3(uv,2);\n  vec3 light = normalize(vec3(1,2,-3));\n  light = transform(light);\n  maxdist *= exp(0.1*float(keycount(KEY_RIGHT)-keycount(KEY_LEFT)));\n  //ro.z *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  ro.z -= 0.5*float(keycount(KEY_DOWN)-keycount(KEY_UP));\n  ro = transform(ro);\n  rd = transform(rd);\n  rd = normalize(rd);\n  float t = march(ro, rd);\n  vec3 background = vec3(0.9,0.8,1.0);\n  if (doinvert) background = vec3(0.1);\n  vec3 col = background;\n  if (t < maxdist) {\n    vec3 p = ro+t*rd;\n    int type;\n    getdist(p,type);\n    vec3 n = getnormal(p);\n    col = getcolor(type);\n    float diffuse = mix(1.0,dot(n,light),0.8);\n    col *= diffuse;\n    float fog = t/maxdist;\n    col = mix(col,background,fog);\n  }\n    \n  col = pow(col,vec3(0.4545));\t// gamma correction\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else   \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.14159;\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nfloat point(vec3 p, vec3 q) {\n  return distance(p,q);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_I = 73;\nconst int CHAR_M = 77;\nconst int CHAR_O = 79;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\n#define key(code) (texelFetch(iChannel0, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel1, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}