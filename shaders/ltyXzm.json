{
    "Shader": {
        "info": {
            "date": "1483569005",
            "description": "Colorful plasma",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyXzm",
            "likes": 14,
            "name": "Concentric Plasma",
            "published": 3,
            "tags": [
                "plasma",
                "concentric"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 913
        },
        "renderpass": [
            {
                "code": "#define PI     3.14159265358\n#define TWO_PI 6.28318530718;\n// #define FADES  1\n\nfloat saw(float rads) {\n    rads += PI * 0.5; // sync oscillation up with sin()\n    float percent = mod(rads, PI) / PI;\t\t\t\t\n    float dir = sign(sin(rads));\n    return dir * (2. * percent  - 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set time & centered position\n    float time = 10. + iTime * 0.5;\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\t// calc additive distance from control points\n    float dist = 0.;\n    for(int ii = 1; ii < 5; ii++) {\n        float i = float(ii);\n        float rads = 1.75 * sin(time / 1./i);\t// oscillate control point radius\n        float ctrlX = sin(sin(uv.x / time) + sin(uv.y + time * i) + cos(time + time) * sin(time * i));\n        float ctrlY = sin(sin(uv.y + time) + sin(uv.x + time / i) + cos(time + time) * cos(time * i));\n        vec2 ctrlPoint = rads + vec2(ctrlX, ctrlY);\n      \tdist += (10. + 7. * sin(time * 0.5)) * distance(uv, ctrlPoint);\n    }\n    // oscillate color components by distance factor. smoothstep for contrast boost\n    vec3 col = vec3(\n        smoothstep(0.1, 0.8, abs(sin(time + dist * 0.11)) * 0.5 + 0.2),\n        smoothstep(0.1, 0.8, abs(cos(time + dist * 0.22)) * 0.37 + 0.4),\n        smoothstep(0.1, 0.8, abs(sin(time + dist * 0.33)) * 0.15 + 0.4)\n    );\n\t// vignette outside of center\n    float vignetteInner = 0.75;\n    float vignetteDarkness = 0.4;\n    col -= smoothstep(0., 0.7, max(0., length(uv) - vignetteInner) * vignetteDarkness);\n    // fade in/out\n    #ifdef FADES\n        float loopSecs = 4.;\n        float fadeTime = 1.;\n        if(abs(mod(time, loopSecs)) < fadeTime * 2.) {\t\t// fade in/out for looping purposes\n            col = mix(vec3(1.), col, abs(-fadeTime + mod(time, loopSecs)));\t\n        }\n    #endif\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}