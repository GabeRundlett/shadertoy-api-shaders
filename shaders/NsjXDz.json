{
    "Shader": {
        "info": {
            "date": "1620055491",
            "description": "Rasterizing light rays that are traced forward. Use 8x paint calls at minimum",
            "flags": 48,
            "hasliked": 0,
            "id": "NsjXDz",
            "likes": 27,
            "name": "Laser scattering",
            "published": 3,
            "tags": [
                "raster"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1448
        },
        "renderpass": [
            {
                "code": "//SHOW\n\nbool isKeyToggled(int KEY)\n{\n\treturn texelFetch( iChannel1, ivec2(KEY,0), 0 ).x > 0.5;\n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    if(isKeyToggled(KEY_SPACE))\n    {\n        vec4 col = texelFetch(iChannel0, ivec2(p), 0);\n        float k = float(pixelID(col.xy))/pixelnum;\n        \n        c = vec4(k);\n    }\n    else\n    {\n       \n            vec4 col = texelFetch(iChannel2, ivec2(p), 0);\n            float exposure = 1. - (iMouse.x/R.x);\n            c = tanh(col/col.w);\n        \n    }\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n#define TWO_PI 6.28318530718\n#define ANG 0.01\n\n//#define REAL_TIME\n\n#ifdef REAL_TIME\n    #define IFRAME 0\n    #define SPEED 0.1\n#else\n    #define IFRAME iFrame\n    #define SPEED 0.0\n    #define ACCUMULATION\n#endif\n\n\n#define FOV 1.0\nvec2 R;\nint sort_iters;\nfloat pixelnum;\n\nbool onScreen(vec3 p)\n{\n    return all(greaterThan(p.xy, vec2(0))) && all(greaterThan(R,p.xy)) && p.z > 0.0;\n}\n\nint pixelID(vec2 pix)\n{\n    return int(pix.x) + int(pix.y)*int(R.x);\n}\n\nivec2 pixel(int pid)\n{\n    return ivec2(pid%int(R.x), pid/int(R.x));\n}\n\n//thanks rory618 (https://www.shadertoy.com/view/WssfDn) for this incredible magic function\nint getPartner(int x, int s){\n    float j = floor(sqrt(float(2*s)+1.25)-0.5);\t\t//Major stage\n    float n = floor(float(s) - 0.5*(j*j+j) + 0.5);\t//Minor stage\n    float b = floor(exp2(j-n+1.)+0.5);\t\t\t\t//Block size\n    float bot = floor(float(x)/b)*b;\t\t\t\t//Bottom index in block \n    float top = bot + b - 1.;\t\t\t\t\t\t//Top index in block\n    if(n<0.5){\t\t\t\t\t\t\t\t\t\t//Swap with opposite index in block\n        return int(top - (float(x)-bot) + 0.5);\n    }else{\t\t\t\t\t\t\t\t\t\t\t//Swap with index a constant distance away in block\n        if(float(x)-bot < b/2.-0.5){\n            return int(float(x) + b/2. + 0.5);\n        }else{\n            return int(float(x) - b/2. + 0.5);\n        }\n    }\n}\n\n\n//internal RNG state \nuvec4 s0; \n\nvec2 pix;\n\nvoid initialize(inout vec2 p, int frame, vec3 res)\n{\n    p = floor(p);\n    pix = p;\n    \n    R = res.xy;\n    pixelnum = R.x*R.y;\n    float lg2 = ceil(log2(pixelnum));\n    sort_iters = 3*int(ceil(lg2*(lg2 + 1.0)/6.0) + 1.0);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\nvec2 cmul(vec2 x, vec2 y)\n{\n    return vec2(x.x*y.x - x.y*y.y, x.x*y.y + x.y*y.x);\n}\n\nvec2 disk()\n{\n    vec2 r = rand2();\n    return vec2(sin(TWO_PI*r.x), cos(TWO_PI*r.x))*sqrt(r.y);\n}\n\nmat2 rot(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nconst int max_iterations = 256;\nconst vec4 color_threshholds = vec4(255,130,80,255);\n\nvec4 buddhabrot(int iters)\n{\n    vec3 z = vec3(0.01);\n    vec3 c = (rand3() - 0.5)*1.5 + vec3(0.0, 0.0, 0.0);\n\n\n    int i = 0;\n   \tfor(; i<iters; i++ )\n    {\n        float r = length(z);\n        float b = 2.0*acos( z.y/r);\n        float a = 2.0*atan( z.x, z.z );\n        z = c + pow(r,2.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n\n\t\tif(length(z) > 4.0 )\n            break;\n    }\n    \n    if(i >= iters) return vec4(1e5);\n    \n    int maxj = int(rand()*1000.0)%i;\n    \n    z = vec3(0.01);\n    \n    for(int j = 0; j <= maxj; j++)\n    {\n        float r = length(z);\n        float b = 3.0*acos( z.y/r);\n        float a = 3.0*atan( z.x, z.z );\n        z = c + pow(r,3.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n    }\n    \n    return vec4(z, i);\n    \n}\n\nfloat saturate (float x)\n{\n    return min(1.0, max(0.0,x));\n}\nvec3 saturate (vec3 x)\n{\n    return min(vec3(1.,1.,1.), max(vec3(0.,0.,0.),x));\n}\n\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\nvec3 spectral_zucconi (float w)\n{\n    // w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}\n\nmat3 get_cam(vec2 ang)\n{\n    vec3 x_dir = vec3(cos(ang.x)*sin(ang.y), cos(ang.y), sin(ang.x)*sin(ang.y));\n    vec3 y_dir = normalize(cross(x_dir, vec3(0,1,0)));\n    vec3 z_dir = normalize(cross(y_dir, x_dir));\n    return mat3(-x_dir, y_dir, z_dir);\n}\n\n//project to clip space\nvec3 project(mat3 cam_mat, vec3 cam_pos, vec3 p)\n{\n    float td = distance(cam_pos, p);\n    float zd = dot(cam_mat[0],p - cam_pos);\n    vec3 dir = (p - cam_pos)/td;\n    vec3 screen = vec3(dot(cam_mat[0],dir),dot(cam_mat[1],dir),dot(cam_mat[2],dir));\n    return vec3(screen.yz*R.y/(FOV*screen.x) + 0.5*R.xy,zd);\n}\n\nconst int KEY_SPACE = 32;\nconst int KEY_BSPACE = 8;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//BITONIC SORT\n\n#define scatter 50.0\n#define extinct 0.\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdMandelbulb( in vec3 p, out vec4 resColor )\n{\n    vec3 w = p;\n    float m = dot(w,w);\n\n    vec4 trap = vec4(abs(w),m);\n\tfloat dz = 1.0;\n    \n\tfor( int i=0; i<3; i++ )\n    {\n        // trigonometric version (MUCH faster than polynomial)\n        \n        // dz = 8*z^7*dz\n\t\tdz = 8.0*pow(m,3.5)*dz + 1.0;\n      //dz = 8.0*pow(sqrt(m),7.0)*dz + 1.0;\n      \n        // z = z^8+z\n        float r = length(w);\n        float b = 8.0*acos( w.y/r);\n        float a = 8.0*atan( w.x, w.z );\n        w = p + pow(r,8.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n\n        trap = min( trap, vec4(abs(w),m) );\n\n        m = dot(w,w);\n\t\tif( m > 256.0 )\n            break;\n    }\n\n    resColor = vec4(m,trap.yzw);\n\n    // distance estimation (through the Hubbard-Douady potential)\n    return 0.25*log(m)*sqrt(m)/dz;\n}\n\nvec4 map(vec3 p)\n{\n    float sd = 1e10;\n    vec4 col = vec4(1.0);\n    sd = min(sdMandelbulb(p, col), sd);\n\n    return vec4(col.xyz, sd);\n}\n\nvec3 normal(vec3 p, float dx) {\n\tconst vec3 k = vec3(1,-1,0);\n\treturn normalize(k.xyy*map(p + k.xyy*dx).x +\n\t\t\t         k.yyx*map(p + k.yyx*dx).x +\n\t\t\t         k.yxy*map(p + k.yxy*dx).x +\n\t\t\t         k.xxx*map(p + k.xxx*dx).x);\n}\n\n#define rstep 0.03\n\n//trace up to a scattering threshold\nbool trace(inout vec3 ro, vec3 rd, float maxc, float wv, out vec4 ex)\n{\n    vec4 c = vec4(0.); //rgb extinction and w scattering\n    float td = 0.0 + rstep*rand();\n    for(int i = 0; i < 150; i++)\n    {\n        vec4 d = map(ro.xyz + rd*td); //distance\n        float dx = rstep; //ray step\n        \n        float rho = ((d.w < 0.0) ? scatter : 0.2)*(7./5. - wv/500.0 );\n       \n        vec4 dc = rho*vec4(extinct*d.xyz, 1.0);\n        if(c.w + dc.w*dx > maxc) \n        {\n            dx = (maxc - c.w)/dc.w;\n            td += dx; \n            c += dc*dx;\n            break;\n        }\n        c += dc*dx;\n        td += dx;\n        \n        if(td > 10.0) break;\n    }\n    ro += rd*td; \n    ex = exp(-c); //return extinction\n    return c.w >= maxc;\n}\n\nvoid getRay(out vec3 ro, out vec3 rd, out float wv, out vec3 I)\n{\n    float r = rand();\n    \n    //mat3 c = get_cam(vec2(iTime,PI*0.5));\n    if(r<0.3)  //lazer\n    {\n       ro = vec3(-0.3,1.5,0.3);\n       rd = vec3(0.,-1.,0.);\n    }\n    else \n    {\n       ro = vec3(1.5,1.25*disk());\n       rd = vec3(-1.,0.,0.);\n    }\n    \n    /*vec2 uv = (pix - R*0.5)/R;\n    \n    ro = vec3(1.5,2.*uv);\n    rd = vec3(-1.,0.,0.);*/\n    \n    //amount of light\n    I = vec3(12.);\n    //random wavelength\n    wv = 400. + 280.*rand();\n}\n\n//the opposite of path tracing, the actual way light is propagating\nvec4 forwardtrace(mat3 cam, vec3 campos)\n{\n   \n    vec3 rd,ro,I;\n    float wv;\n    //generate light rays at light sources\n    getRay(ro,rd,wv,I);\n    \n  \n    \n    int max_bounce = int(rand()*2.0)+1;\n   \n    for(int i = 0; i < max_bounce; i++)\n    {\n        vec4 ex;\n        float thresh = -log(rand());\n        bool hit = trace(ro, rd, thresh, wv, ex);\n        if(hit) \n        {\n            rd = udir(rand2());\n        }\n        else return vec4(100000);\n    }\n    \n    //project onto screen\n    vec3 clip = project(cam, campos, ro);\n    \n    //this will be omitted\n    clip.xy += nrand2(0.33,vec2(0.0));\n    \n    if(onScreen(clip))\n    {\n        vec4 ex;\n        trace(ro, normalize(campos - ro), 1e5, wv, ex);\n        I *= ex.w/clip.z; //brightness inversly proportional to camera distance\n    }\n    else\n    {\n        I *=0.0;\n    }\n    return vec4(clip.xy, min(length(I),10.0), wv);\n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, IFRAME, iResolution);\n    \n    int sort_iter = 3*iFrame + 0;\n    \n    int id0 = pixelID(p);\n    int id1 = getPartner(id0, sort_iter%sort_iters - 1);\n    \n    if(id1 < int(pixelnum) && id1 >= 0)\n    {\n        vec4 A = texelFetch(iChannel0, pixel(id0), 0);\n        vec4 B = texelFetch(iChannel0, pixel(id1), 0);\n\n        int zA = pixelID(A.xy);\n        int zB = pixelID(B.xy);\n\n        if(id0 > id1) c = (zA>zB)?A:B;\n        else c = (zA<zB)?A:B;\n    }\n    else c = texelFetch(iChannel0, ivec2(p), 0);\n  \n    \n    if(sort_iter%sort_iters == 0) //intialize with some random points, in this case pseudo caustic\n    {\n        vec2 ang = vec2(TWO_PI, PI)*iMouse.xy/R + vec2(0.4);\n        mat3 cam = get_cam(ang);\n        \n        vec3 campos = -cam*vec3(3.3,0,0);\n    \n        vec4 bp = vec4(101);\n       \n        bp = forwardtrace(cam, campos);\n        \n       \n        bp.xy = clamp(bp.xy, vec2(0), R);\n        \n        \n        //bp.xy = clamp(toScreen(bp.xy), vec2(-1), R);\n        c = bp; \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//BITONIC SORT\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    \n    int sort_iter = 3*iFrame + 1;\n    \n    int id0 = pixelID(p);\n    int id1 = getPartner(id0, sort_iter%sort_iters- 1);\n    \n    if(id1 < int(pixelnum) && id1 >= 0)\n    {\n        vec4 A = texelFetch(iChannel0, pixel(id0), 0);\n        vec4 B = texelFetch(iChannel0, pixel(id1), 0);\n\n        int zA = pixelID(A.xy);\n        int zB = pixelID(B.xy);\n\n        if(id0 > id1) c = (zA>zB)?A:B;\n        else c = (zA<zB)?A:B;\n    }\n    else c = texelFetch(iChannel0, ivec2(p), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//BITONIC SORT\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    \n    int sort_iter = 3*iFrame + 2;\n    \n    int id0 = pixelID(p);\n    int id1 = getPartner(id0, sort_iter%sort_iters- 1);\n    \n    if(id1 < int(pixelnum) && id1 >= 0)\n    {\n        vec4 A = texelFetch(iChannel0, pixel(id0), 0);\n        vec4 B = texelFetch(iChannel0, pixel(id1), 0);\n\n        int zA = pixelID(A.xy);\n        int zB = pixelID(B.xy);\n\n        if(id0 > id1) c = (zA>zB)?A:B;\n        else c = (zA<zB)?A:B;\n    }\n    else c = texelFetch(iChannel0, ivec2(p), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//BINARY SEARCH OF POINTS THAT FELL INTO THIS PIXEL\n\n\nint search(int id)\n{\n    ivec2 range = ivec2(0, pixelnum);\n    \n    for(int i = 0; i < 128; i++)\n    {\n        //check the middle of the range\n        int middle = (range.x + range.y)/2;\n        vec4 data = texelFetch(iChannel1, pixel(middle), 0);\n        //get point id\n        int pid = pixelID(data.xy);\n        \n        //if found then stop\n        if(pid == id) return middle;\n        \n        if(range.y - range.x < 2) break;\n        \n        if(pid > id) //if our id of interest is below the found id\n            range.y = middle; //then set the end of the range as middle\n        else //if our id we search is above\n            range.x = middle; //then set the beginning of the range as middle\n    }\n    \n    return -1; //nothing found;\n}\n\nconst vec3 C = vec3(0.027,0.169,0.949);\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    \n    c = texelFetch(iChannel0, ivec2(p), 0);\n    \n    int sort_iter = 3*iFrame + 2;\n    \n    if((sort_iter+1)%sort_iters == 0) //if last sorting step\n    {\n        #ifdef ACCUMULATION\n        if(iMouse.z > 0.0)\n        #endif\n            c *= 0.3;\n        int pixid = pixelID(p);\n        int id = search(pixid);\n        \n        vec2 ang = vec2(TWO_PI, PI)*iMouse.xy/R + vec2(0.4);\n        mat3 cam = get_cam(ang);\n        \n        vec3 campos = -cam*vec3(1.0,0,0);\n        vec2 uv = (p - 0.5*R.xy)/R.y;\n        vec3 rd = normalize(cam*vec3(1, FOV*uv));\n        \n        vec3 col = vec3(0.0);\n        float mind = 1e5;\n        if(id >= 0) //found at least 1 point in this pixel\n        {\n           \n            \n            for(int j = 0; j < 1024; j++) //go left\n            {\n                int idx = id + j;\n                vec4 data = texelFetch(iChannel1, pixel(idx), 0);\n                int pid = pixelID(data.xy); //get point id\n                if(pid!=pixid) break; //not in this pixel anymore\n                col += data.z*spectral_zucconi(data.w);\n            }\n            for(int j = 0; j < 1024; j++) //go right\n            {\n                int idx = id - j - 1;\n                vec4 data = texelFetch(iChannel1, pixel(idx), 0);\n                int pid = pixelID(data.xy); //get point id\n                if(pid!=pixid) break; //not in this pixel anymore \n                col += data.z*spectral_zucconi(data.w);\n            }\n            c.xyz += col.xyz;\n        }\n        \n      \n       \n        c.w++;\n    }\n    \n    if(iFrame == 0) c = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}