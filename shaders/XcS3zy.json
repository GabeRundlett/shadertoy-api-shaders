{
    "Shader": {
        "info": {
            "date": "1705376130",
            "description": "made according to the guide by Kishimisu: https://www.youtube.com/watch?v=khblXafu7iA",
            "flags": 0,
            "hasliked": 0,
            "id": "XcS3zy",
            "likes": 4,
            "name": "Vlad's raymarch from kishimisu",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "vsav",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "// This scene is made using tutorial about shader coding,\n// which introduces the concept of raymarching as well as some useful\n// transforms and space-bending techniques.\n// \n//     Mouse is interactive!\n\n// 2D rotation function\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    return 0.5 + 0.3 * cos(6.28318 * (t + vec3(0.0, 0.25, 0.25)));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(min(q.x, max(q.y, q.z)), 0.0);\n}\n\n// Scene distance\nfloat map(vec3 p) {\n    p.z += iTime * 0.4; // Forward movement\n    \n    // Space repetition\n    p.xy = fract(p.xy) - 0.5;     // spacing: 1\n    p.z  =  mod(p.z, 0.25) - 0.25; // spacing: .25\n    \n    return sdBox(p, vec3(0.05)); // Cube\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2  m = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Default circular motion if mouse not clicked\n    if (iMouse.z <= 0.0) m = vec2(cos(iTime * 0.2), sin(iTime * 0.2));\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -2);         // ray origin\n    vec3 rd = normalize(vec3(uv * 1.0, 2.5)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    int i; // Raymarching\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t; // position along the ray\n        \n        p.y += sin(t* (m.y + 1.0) * 0.5) * 0.35;  // wiggle ray\n       \n        p.xy *= rot2D(t * 0.25 * m.x);     // rotate ray around z-axis\n        \n        float d = map(p);     // current distance to the scene\n\n        t += d;               // \"march\" the ray\n\n        if (d < 0.001 || t > 100.0) break; // early stop\n    }\n\n    // Coloring\n    col = palette(float(i) * 0.04 + t * 0.001);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}