{
    "Shader": {
        "info": {
            "date": "1613185622",
            "description": "We're back on Earth.",
            "flags": 40,
            "hasliked": 0,
            "id": "tldBz2",
            "likes": 36,
            "name": "[â™ª]Reconnaissance",
            "published": 3,
            "tags": [
                "2d",
                "terrain",
                "music"
            ],
            "usePreview": 0,
            "username": "Catzpaw",
            "viewed": 674
        },
        "renderpass": [
            {
                "code": "//--- Reconnaissance\n// by Catzpaw 2021\n\n//Image:post effect\n\n#define ZERO min(0,iFrame)\nconst float pi=acos(-1.);\nmat2 rot(float a){float s=sin(a),c=cos(a);return mat2(c,s,-s,c);}\nvec3 hsv(float h,float s,float v){return ((clamp(abs(fract(h+vec3(0.,.666,.333))*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;}\n\n//CHROMATIC ABERRATION\nvec3 tx1(vec2 uv){return texture(iChannel0,uv).rgb;}\nvec3 ca(vec2 uv,vec2 xy){\n    vec2 uvr=uv-xy*.02;\n    vec3 c=vec3(0);\n    float f=0.;\n    for(int i=ZERO;i<10;i++)c+=tx1(mix(uvr,uv,f)).rgb*hsv(f+.85,1.,1.),f+=.1;\n    return c*.25;\n}\n\n//MAIN\nvoid mainImage(out vec4 col,in vec2 fc){\n\tvec2 uv=fc/iResolution.xy,xy=(fc-.5*iResolution.xy)/iResolution.y;\n    col=vec4(ca(uv,xy)*pow(1.3-length(xy),.9),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//--- Reconnaissance\n// by Catzpaw 2021\n\n//BufferA:scene\n\nfloat time=70.;\nmat2 rot(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n}\nvec2 cam(float t){\n    return vec2(0,27)*rot(t*124e-4)+vec2(0,21)*rot(-t*61e-4);\n}\nfloat map(vec2 p){\n    return abs(texture(iChannel0,p*24e-4).r*1.3-.35)*\n           smoothstep(0.,1.,abs(.45-texture(iChannel0,p*129e-4).g*1.6))*\n           texture(iChannel0,p*783e-4).b;\n}\nfloat plants(vec2 p){\n    return (.04-map(p*3.))*.5+abs(map(p*31.)-.1)*.1;\n}\nfloat cloud(vec2 p){\n    p+=vec2(15,0)*rot(time*1e-3);\n    return clamp((.3-map(p*3.1+time*.02)*2.+abs(map(p*2.27+time*.01)*4.-.47))*.08+\n                 (sin(p.x*10.)+sin(p.x*12.)+sin(p.y*4.)+sin(p.y*8.))*5e-3,.0,.07);\n}\nfloat tr(vec2 p,float x,float y){\n    p.x+=x;p.y+=y;\n    return (p.y<abs(p.x)*-4.)&&(p.y>-.2)?1.:0.;\n}\nfloat flotilla(vec2 p,mat2 ma){\n    p.y*=2.;p*=ma;\n    return tr(p,.0,-.6)+tr(p,.2,-.3)+tr(p,-.2,-.3)+tr(p,.4,.0)+tr(p,-.4,.0);\n}\nvec3 tr2(vec2 p,float x,float y,float a){\n    p.x+=x;p.y+=y;\n    vec3 c=vec3(1);\n    vec2 q=p;q.y+=.18;\n    vec2 r=vec2(0,-.032)*rot(a);q+=r;\n    c*=q.x<r.x*(q.y*8.)?.5-a*.3:.5+a*.3;\n    c=q.y<q.x*(r.y-.02)/(r.x+.05)&&q.y<q.x*(.02-r.y)/(.05-r.x)?vec3(.2):c;\n    q.y-=.02;c=dot(q,q)<25e-5?vec3(sin(iTime*6.28)*.3+.7,0,0)-dot(q,q)*4e3:c;\n    return (p.y<abs(p.x)*-4.)&&(p.y>-.2)?c:vec3(0);\n}\nvec3 flotilla2(vec2 p,float a,mat2 ma){\n    p.y*=2.;p*=ma;\n    return tr2(p,.0,-.6,a)+tr2(p,.2,-.3,a)+tr2(p,-.2,-.3,a)+\n           tr2(p,.4,.0,a)+tr2(p,-.4,.0,a);\n}\nvoid mainImage(out vec4 col,in vec2 fc){\n    //coordinates\n    float reso=floor(max(min(iResolution.y,800.),240.)/30.)*8.,\n          ireso=1./reso;\n    int   iter=int(reso*.42);\n    vec2  uv=fc/iResolution.xy,\n          xy=(fc-.5*iResolution.xy)/iResolution.y,\n          g=vec2(xy.x,floor(xy.y*reso)*ireso+ireso*.5);\n    //camera\n    time+=iTime;\n    float a=sin(time*.05)*.5;\n    vec2  o=vec2(g.x*.4,0),d=vec2(0,1),\n          c1=cam(time),c2=cam(time+1.5)-c1;\n    mat2  m=rot(atan(c2.x,c2.y)+a),\n          ma=rot(a);\n    d*=m;o*=m;o+=c1+d*xy.y*ireso;\n    //terrain\n    float t=g.y+.58,\n          s1=ireso*.5,s2=ireso*.2,\n          fx=0.,fy=0.,fz=0.;\n    for(int i=0;i<iter;i++){\n        float h=map(o+d*t),\n              d=h+t-.58-xy.y,\n              l=smoothstep(s1,s2,abs(d));\n        fx=max(l,d>0.?.0:fx);\n        fy=l>.2||d>0.?h:fy;\n        fz=l>.0||d>0.?t:fz;\n        t-=ireso;\n    }\n    //objects\n    float sl=smoothstep(s1,s2,abs(xy.y-g.y)),\n          fv=flotilla(g,ma),\n          fs=flotilla(vec2(g.x,fz-.3),ma)*.7,\n          cv=cloud(o+d*(g.y+.5)),\n          cs=cloud(o+d*fz);\n    cv=cv>.065&&fy<.09?cv*10.:0.;\n    cs=cs>.065&&fy<.09?cs*7.:0.;\n    //plants\n    float pv=plants(o+d*(g.y+.5)),\n          ps=plants(o+d*(g.y+.5+ireso));\n    ps=ps-fy*.1>.025&&fy>3e-3&&pv<ps?ps*15.:0.;\n    pv=pv-fy*.1>.025&&fy>3e-3?sin(pv*8e2)*.2+.7:0.;\n    //color\n    vec3 c=fy<=21e-4?mix(vec3(.05,.10,.15),vec3(.10,.50,.40),fy*2e2):\n                     mix(mix(vec3(.32,.30,.30),vec3(.05,.15,.03),clamp(fy*7e2-1.2,0.,1.)),\n                         mix(vec3(.15,.10,.05),vec3(.11,.13,.12),clamp(fy*8.,0.,1.)),\n                         clamp(fy*20.,0.,1.));\n    c=pv>0.?c*vec3(.4,pv,.4):c;\n    c*=max(fx,.0)*(4.-fz*2.)*max(1.-fs-cs-ps,.2);\n    c=cv>0.?mix(c,vec3(1.-flotilla(vec2(g.x,g.y+.29-cv*.1),ma)*.6)*sl,cv*8.-5.):c;\n    c=fv>0.?mix(vec3(.2),flotilla2(g,a,ma),sl):c;\n    col=vec4(c,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//--- Reconnaissance\n// by Catzpaw 2021\n\n//Sound:Wavetable Synthesizer\n\n//Music:\"XEVIOUS\" Composed by YURI 1982\n\n//================================================================================\n// SETUP\n//--------------------------------------------------------------------------------\nconst float base =440.;\t//master tuning (Hz)\nconst float bpm  =135.;\t//beats per minute\nconst float steps=240.;\t//steps per measure (default:240steps)\nconst float start=2.;   //start count (beats)\nconst float fade =10.;  //fade out time (default:10sec)\nconst float sec  =180.; //performance time (includes fade out time and start count)\n\n//================================================================================\n// INSTRUMENTS & EFFECTS\n//--------------------------------------------------------------------------------\n//AMP\n//  vec3 p( drive, pressure, volume)\nvec2 amp(vec2 i,vec3 p){return clamp(sign(i)*pow(abs(i*p.x)*.01,vec2(1./p.y))*100.,-1.,1.)*p.z;}\n\n//FREQUENCY FROM MIDI NOTE NUMBER\nconst float i12=1./12.;\nfloat freq(float n){return pow(2.,(n-69.)*i12)*base;}\n\n//ENVELOPE\nfloat env_d(float x,float d){return max(0.,1.-x/max(d,1e-4));}\nfloat env(float x,vec4 e){float l=e.w+e.x+e.y;return x>l?0.:x<e.x?x/e.x:x<e.x+e.y?1.-(x-e.x)*(1.-e.z)/e.y:(l-x)*e.z/e.w;}\n\n//NES SOUND GENERATORS(without DPCM)\nfloat osc_duty(float x,float d){return fract(x)<d?1.:-1.;}\n//float osc_tri4(float x){return abs(floor(fract(x)*15.9999)/7.5-1.);}\nconst float nc=1789772.5;const float[16] nt=float[](\n    nc/2.,nc/4.,nc/8.,nc/16.,nc/32.,nc/48.,nc/64.,nc/80.,nc/101.,\n    nc/127.,nc/190.,nc/254.,nc/381.,nc/508.,nc/1017.,nc/2034.);\nfloat osc_nesnoise(float x,int i){return fract(sin(floor(x*nt[i])*179.2)*204.8);}\n\n//WAVETABLE OSC(namco C30/N163)\nconst int wtsamples=24;\nconst float wtlen=float(wtsamples);\nconst uint[wtsamples] wt=uint[](\n    0x000bb8bau,0x100de7fdu,0x203efdefu,0x303ff7dfu,0x4020efedu,0x5020b7dau,0x6a60af97u,0x7a6f9735u,\n    0x8a0e9d04u,0x9a0d9734u,0xaa3b9a75u,0xba398786u,0x45c67879u,0x55c4658au,0x65f268cbu,0x75f162fbu,\n    0x859068cau,0x959f5068u,0xafdf4825u,0xbfdf1012u,0xcfc00820u,0xdfc10210u,0xeff21802u,0xfff44745u);\nconst float i15=1./15.;\nfloat osc_c30(float x,int i){return(float((wt[int(mod(x*wtlen,wtlen))]>>(i*4))&15u)*i15-.5);}\n\n//INSTRUMENTS\nconst float detune =.0025;\nvec2 dutybass(float f,float x){return vec2(osc_duty(f*(.5+detune),.25),osc_duty(f*(.5-detune),.25))*env_d(x,.5);}\nfloat neshh(float x,float d){return osc_nesnoise(x,0)*env_d(x,d);}\nfloat nesbd(float x){return osc_duty(3./(x*.5+.1),.5)*env_d(x,.1);}\nfloat sd(float x){return osc_nesnoise(x,12)*env_d(x,.25)+osc_duty(6./(x*.5+.1),.5)*.5*env_d(x,.19);}\n#define LPFI 96\n#define LPF(fn) float b=0.,o=0.;c+=1e-10;n=freq(n);for(int i=0;i<LPFI;i++){float f=n*(x+float(i)/iSampleRate);b+=c*((fn)+q*(b-o)/(1.-c)-o);o+=c*(b-o);}return o;\nfloat lpfc30(float n,float x,float c,float q,int s){LPF(osc_c30(f,s))}\n\n//================================================================================\n// RENDERER\n//--------------------------------------------------------------------------------\nint get4(uint b,int l){return int(b>>l*4)&15;}\nvec2 track1(float t,float l){\n    int st=int(mod(t*bpm*16./steps,32.));\n    vec2 n=vec2(mod(t,l/16.),get4(0xcbc4cbc0u,st&7)+((st&7)==4?12:0)-((st&3)==2?1:0)*((st/8)&3)+60);\n    float dec=l/16.-mod(t,l/16.);dec=dec<1e-4?dec/1e-4:1.;\n    return lpfc30(n.y,n.x,sin(t*bpm*3.142/360.)*.25+.35,.9,6)*vec2(.40,.55)*env(n.x,vec4(.001,.05,.7,10.))*dec;\n}\nvec2 track2(float t,float l){\n    vec2 n=vec2(mod(t,l/16.),get4(0x01001001u,int(mod(t*bpm*16./steps,32.))&7)*48);\n    return n.y>0.?dutybass(freq(n.y)*n.x,n.x)*vec2(.50,.60)*env(n.x,vec4(.001,.05,.7,10.)):vec2(0);\n}\nvec2 track3(float t,float l){return nesbd(mod(t,l/4.))*vec2(.70,.65);}\nvec2 track4(float t,float l){return sd(mod(t+l/4.,l/2.))*vec2(.65,.50);}\nvec2 track5(float t,float l){\n    vec2 n=vec2(mod(t,l/16.),get4(0x05010011u,int(mod(t*bpm*16./steps,32.))&7));\n    return n.y>0.?neshh(n.x,n.y*.1)*vec2(.25,.30):vec2(0);\n}\n\nvoid render(float t,float l,inout vec2 o,bool e){\n    o+=  track1(t,l);                  //TRACK 1 melody\n    o+=e?track2(t,l):track2(t,l)*.9; //TRACK 2 bass\n    o+=e?track3(t,l):track3(t,l)*.3; //TRACK 3 bd\n    o+=e?track4(t,l):track4(t,l)*.8; //TRACK 4 sd\n    o+=e?track5(t,l):track5(t,l)*.7; //TRACK 5 hh\n}\n\n//================================================================================\n// MASTER\n//--------------------------------------------------------------------------------\n#define MASTER_DRIVE    0.35\n#define MASTER_PRESSURE 1.05\n#define DELAY_REPEAT    18\n#define DELAY_WET       0.40\n#define DELAY_FEEDBACK  0.90\n#define DELAY_TIME      0.153\n#define DELAY_STEREO    0.11\nvec2 mainSound(in int Samp,float time){\n    float l=steps/bpm,vol=1.,d=DELAY_WET,r=DELAY_TIME;\n    vec2 o=vec2(0);\n    if(time>sec-fade){vol=(sec-min(time,sec))/fade;}\n    time-=start*60./bpm;\n    if(time<0.)return o;\n    render(time,l,o,true);\n    float ff=0.,p=0.;\n    for(int i=0;i<DELAY_REPEAT;i++){\n        time-=r;\n        if(time<0.)continue;\n        vec2 a=vec2(0);\n        render(time,l,a,false);\n        d*=DELAY_FEEDBACK;\n        o+=a*d*vec2(1.+p*ff,1.-p*ff);\n        ff=ff<0.?1.:-1.;\n        p+=DELAY_STEREO;\n    }\n    return amp(o,vec3(MASTER_DRIVE,MASTER_PRESSURE,vol));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}