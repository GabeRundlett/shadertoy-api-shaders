{
    "Shader": {
        "info": {
            "date": "1727491752",
            "description": "Fractal perlin noise made by adding multiple octaves, set up to act as a normal map.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3BcRy",
            "likes": 3,
            "name": "Fractal Perlin Noise",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "light"
            ],
            "usePreview": 1,
            "username": "Bingle",
            "viewed": 78
        },
        "renderpass": [
            {
                "code": "vec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 randDir(vec2 p){\n    while (true){\n        vec2 rnd = hash22(p)*2.0-1.0;\n        if (length(rnd)>0.0001){\n            return (rnd);\n        }\n        p+=vec2(0.0,0.1);\n    }\n}\n\nvec3 noise(vec2 p){\n    vec4 corners = vec4(floor(p),ceil(p));\n    \n    vec2 ll = randDir(corners.xy);\n    vec2 lh = randDir(corners.xw);\n    vec2 hl = randDir(corners.zy);\n    vec2 hh = randDir(corners.zw);\n    \n    vec2 loc = mod(p,vec2(1.0)); // local coords\n    \n    float llDot = dot(ll,(p-corners.xy));\n    float lhDot = dot(lh,(p-corners.xw));\n    float hlDot = dot(hl,(p-corners.zy));\n    float hhDot = dot(hh,(p-corners.zw));\n    \n    vec2 easeFac = ((6.0*loc - 15.0)*loc+10.0)*loc*loc*loc; // eased factor\n    vec2 easeDif = 30.0*loc*loc*(loc*(loc-2.0)+1.0); // differential of eased factor\n    \n    return vec3(\n        mix(\n            mix(llDot,hlDot,easeFac.x),\n            mix(lhDot,hhDot,easeFac.x),\n            easeFac.y\n        ), // factor\n        \n        ll + easeFac.x*(hl-ll) + easeFac.y*(lh-ll) + easeFac.x*easeFac.y*(ll-hl-lh+hh) +\n        easeDif*(easeFac.yx*(llDot-hlDot-lhDot+hhDot) + vec2(hlDot,lhDot) - llDot) // Differential\n    );\n}\n\nvec3 fractal(vec2 p,int iters){\n    vec3 val = vec3(0.0);\n    vec2 coords = p;\n    float total = 0.0;\n    for (int i=0;i<iters;i++){\n        float magnitude = 1.0/(float(i)+1.0);\n        val+=(noise(coords)*vec3(0.5,1.0,1.0)+vec3(0.5,0.0,0.0))*magnitude;\n        total+=magnitude;\n        coords*=2.0;\n    }\n    return val/total;\n}\n\nvec3 light(vec2 fragCoord,vec2 norm,vec2 pos,vec3 col){\n    vec2 diff = fragCoord - pos;\n    float intensity = dot(norm,normalize(diff))*0.5+0.5;\n    \n    intensity *= iResolution.y/length(diff);\n    \n    return col*intensity;\n}\n\n// HSV to RGB approximation - not accurate, but im lazy and its good enough\nvec3 hsv(vec3 from){\n    return mix(max(vec3(cos(from.x),cos(from.x-2.09439510239),cos(from.x-4.18879020479)),vec3(0.0)),vec3(1.0),1.0-from.y)*from.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/150.0+vec2(iTime*0.5,0.0);\n    \n    vec3 noise = fractal(uv,12);\n    \n    vec3 tex = texture(iChannel0,uv*0.25).rgb;\n    vec2 diff = fragCoord-iMouse.xy;\n    float dist = length(diff);\n    \n    vec3 col = vec3(0.0);\n    \n    col += tex*light(fragCoord,noise.yz,(length(iMouse.xy)<0.5 ? iResolution.xy*0.8 : iMouse.xy),hsv(vec3(mod(iTime,6.28318530718),1.0,0.7)));\n    col += tex*light(fragCoord,noise.yz,(vec2(sin(iTime),cos(3.0*iTime))+1.5)/3.0*iResolution.xy,vec3(0.2));\n    \n    vec3 over = max(col-vec3(1.0),vec3(0.0));\n    col += vec3(0.5*length(over));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}