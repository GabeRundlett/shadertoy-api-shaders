{
    "Shader": {
        "info": {
            "date": "1657046156",
            "description": "Trivial example in R^2 of a Lemma I barely understand.",
            "flags": 0,
            "hasliked": 0,
            "id": "7ddBRs",
            "likes": 5,
            "name": "Urysohn Lemma",
            "published": 3,
            "tags": [
                "urysohn"
            ],
            "usePreview": 0,
            "username": "N8Shader",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "float csdf(vec2 p, vec2 c, float r) {\n    return max(length(p - c) - r, 0.0);\n}\n  float seed = 0.0;\n    highp float random(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\nfloat rand()\n{\n    /*float result = fract(sin(seed + mod(time, 1000.0) + dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    //_Seed += 1.0;\n    seed += 1.0;\n    return result;*/\n    float result = random(vec2(100.0 * seed));\n    seed += 1.0;\n    return result;\n}\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n    float smin(float a, float b, float k) {\n      float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n      return mix(b, a, h) - k * h * (1.0 - h);\n    }\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    //float dist1 = csdf(uv, vec2(0.25, 0.25), 0.1);\n    //float dist2 = csdf(uv, vec2(0.75, 0.75), 0.1);\n    float num = 1000.0;\n    float dom = 1000.0;\n    float speed = 0.1;\n    for(float i = 0.0; i < 10.0; i++) {\n                float dist = csdf(uv, vec2((0.5 + 0.5 * snoise(speed * vec2(10.0 * i, iTime))) * iResolution.x / iResolution.y, (0.5 + 0.5 * snoise(speed * vec2(iTime, i * 10.0)))), 0.0);\n        if (mod(i, 2.0) == 1.0) {\n            num = num < 1000.0 ? smin(num, dist, 0.1) : min(num, dist);\n        } else {\n           dom = dom < 1000.0 ? smin(dom, dist, 0.1) : min(dom, dist);\n        }\n    }\n    float final = num / (num + dom);\n    fragColor = vec4(vec3(final) + 0.05 * vec3(max(cos(100.0 * final), 0.0)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}