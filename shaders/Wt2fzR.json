{
    "Shader": {
        "info": {
            "date": "1598394182",
            "description": "Source : https://www.youtube.com/watch?v=6IWXkV82oyY\nMy Game : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt2fzR",
            "likes": 1,
            "name": "22. Mandelbrot Fractal Explain",
            "published": 3,
            "tags": [
                "simpleonet"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy )/iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    float zoom = pow( 10.0 , -m.x * 2.0 );\n    \n    vec2 c = uv * zoom * 5.0 - vec2(0.65 , 0.0);\n    \n    vec2 z = vec2(0);\n    float iter = 0.0;\n    const float max_iter = 100.0;\n    \n    \n    float k = 2.0 + 2.0* sin(iTime );\n    \n    for ( float i = 0.0; i < max_iter ; i++ ) {\n        \n\t\tz = vec2( z.x * z.x - z.y * z.y , k * z.x * z.y ) + c;\n        \n        if ( length(z) > 2.0 ) break;\n        \n        iter++;\n        \n    }\n    \n    \n\n    float f = iter / max_iter;\n    \n    vec3 col = vec3(f);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}