{
    "Shader": {
        "info": {
            "date": "1492706000",
            "description": "Water simulation with obstacles / terrain interaction using finite differences approximation of the wave equation. Click on the surface to make some waves. Based on https://www.shadertoy.com/view/4sd3WB .",
            "flags": 32,
            "hasliked": 0,
            "id": "XsByzK",
            "likes": 4,
            "name": "2D Terrain and Water",
            "published": 3,
            "tags": [
                "procedural",
                "simulation",
                "water",
                "multipass"
            ],
            "usePreview": 0,
            "username": "emh",
            "viewed": 1100
        },
        "renderpass": [
            {
                "code": "// Wave propagation simulation using finite differences.\n// See (f.ex.) http://www.uio.no/studier/emner/matnat/ifi/INF2340/v05/foiler/sim04.pdf\n// for the model and equations.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv /= 1.0;\n    vec4 water = texture(iChannel0, uv);\n    float h = 2.0*water.w+0.5;\n    if (false && water.x == 0.0) {\n        fragColor = vec4(water.z); // vec4(0.0, 0.0, water.z, 1.0);\n    } else {\n        /*\n        if (water.y < 0.0) {\n        \tfragColor = vec4(water.w, 0.0, 0.0, 1.0);\n        } else {\n            fragColor = vec4(0.0, 0.0, water.w, 1.0);\n        }*/\n        //vec4 waterColor = mix(vec4(1.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), water.y + 0.5) * water.w;\n        vec4 waterColor = mix(vec4(0.0, 0.0, 0.0, 1.0), vec4(0.0, 0.0, 1.0, 1.0), water.y) * water.w + vec4(0.0, 0.5, 1.0, 0.0);\n        vec4 land = vec4(0.0); // vec4(water.z * water.x * 5.0, 0.0, 0.0, 1.0);\n        //vec4 land = vec4(1.0, 1.0, 1.0, 1.0);\n        fragColor = mix(land, waterColor, water.x);\n        //fragColor = waterColor + vec4(vec3(0.0, 0.3, 0.6) * water.w, 1.0);\n        if (water.z > 0.0) {\n            vec4 forestColor = vec4(fragColor.r, 0.8 - water.z, fragColor.b, 1.0);\n            if (water.z < 0.1) {\n                // beachhead\n                fragColor.r = water.z;\n            } else if (water.z < 0.2) {\n                // forest\n        \t\tfragColor = forestColor;\n            } else {\n                // mountains\n                fragColor = mix(forestColor,\n                                vec4(0.6, 0.5, 0.5, 1.0) * water.z, (water.z - 0.2));\n            }\n        }\n        // fragColor = vec4(water.z);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Mouse excitation\n    vec2 r = fragCoord.xy - iMouse.xy;\n    float d = 0.001*dot(r,r);\n    if(iMouse.z > 0.0 && d < 0.05) {\n    \t//fragColor = vec4(0.0,0.2,0,0);\n        fragColor = vec4(0.0,10.0,0,0);\n        return;\n    } \n    \n    // Periodic excitation\n    /*\n    r = fragCoord.xy - vec2(50, 70);\n    d = 0.001*dot(r,r);\n    if (mod(iTime, 0.5) < 0.1 && d < 0.05) {\n        fragColor = vec4(0.0,0.1,0,0);\n        return;\n   \t}\n    \n    if (mod(iTime, 0.5) < 0.1 && fragCoord.x / iResolution.x > 0.99) {\n        fragColor = vec4(0.0,0.1,0,0);\n        return;\n   \t}\n\t*/\n\n    // just copy\n    vec2 uv = fragCoord.xy / iResolution.xy;\n   \tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define HEIGHT 2.4\n#define TERRAMUL 1.0\n\nbool hitTest(vec2 uvn) {\n    /*float d = distance(uvn, vec2(0.5, 0.5));\n    if (d < 0.2) {\n        return self;\n    }*/\n    /*\n    if ((uvn.x > 0.4 && uvn.x < 0.6) &&\n        (uvn.y > 0.4 && uvn.y < 0.6)) {\n        return true;\n    }*/\n    float h = texture(iChannel1, uvn).x;\n    //if (h > nb || h > HEIGHT) {\n    if (h > HEIGHT) {\n        return true;\n    }\n    return false;\n}\n\nbool checkSink(vec2 uv) {\n    return distance(uv, vec2(0.5, 0.5)) <= 0.1;\n}\n\nfloat getContribution(vec2 uv, float u, float uTotal) {\n    float terrainHeight = texture(iChannel1, uv).x * TERRAMUL;\n    float waterHeight = texture(iChannel0, uv).x;\n    float totalHeight = waterHeight + terrainHeight;\n    float ux = 0.0;\n    if (totalHeight >= uTotal) {\n        ux = min(totalHeight - uTotal, waterHeight);\n    } else {\n        //ux = max(totalHeight - uTotal, -u);\n        ux = max(totalHeight - uTotal, -u);\n    }\n    // ux = totalHeight - uTotal;\n    bool ht = hitTest(uv);\n    // if (ht || checkSink(uv)) {\n    if (ht) {\n    \tux = 0.0;\n    }\n    return ux;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dx = 1.0/iResolution.x;\n    float dy = 1.0/iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 udu = texture(iChannel0, uv).xy;\n\t// old elevation\n    float u = udu.x;\n    float terrainHeight = texture(iChannel1, uv).x * TERRAMUL;\n    float uTotal = u + terrainHeight;\n    // old velociy\n    float du = udu.y;\n    \n    \n    \n    float self = 0.0;\n    \n    // Finite differences\n    vec2 uv1 = vec2(uv.x+dx, uv.y);\n    float ux = getContribution(uv1, u, uTotal);\n    \n    vec2 uv2 = vec2(uv.x-dx, uv.y);\n    float umx = getContribution(uv2, u, uTotal);\n    \n    vec2 uv3 = vec2(uv.x, uv.y+dy);\n    float uy = getContribution(uv3, u, uTotal);\n    \n    vec2 uv4 = vec2(uv.x, uv.y-dy);\n    float umy = getContribution(uv4, u, uTotal);\n    \n    bool onlyRain = terrainHeight > 0.0;\n\n    // new elevation\n    float nu = u + du + 0.5*(umx+ux+umy+uy);\n    if (onlyRain) {\n        nu = u + 0.5 * (umx+ux+umy+uy);\n    }\n    // float nu = u + 0.5*(umx+ux+umy+uy);\n    \n    // store elevation and velocity\n    \n    // wave decay\n    nu = 0.999999*nu;\n    \n    /*\n    float d = distance(uv, vec2(0.5, 0.5));\n    if (d < 0.1) {\n        float scale = mix(0.99, 0.999999, d * 2.0);\n        nu = scale*nu;\n    }*/\n    \n    // if (terrainHeight < 0.1) {\n    float v = nu - u;\n    \n    if (onlyRain) {\n    \tv = 0.0;\n    }\n    \n    bool dry = false; // checkSink(uv) || hitTest(uv);\n    \n    if (dry) {\n        nu = 0.0;\n        v = 0.0;\n    }   \n    \n    // rain\n    if (!dry) {\n    \tnu += 0.00001;\n    }\n    \n    if (nu < 0.0) {\n        nu = 0.0;\n        v = 0.0;\n    }\n    if (nu > 1.5) {\n        nu = 1.5;\n        v /= 1.1;\n    }\n    \n    float z = terrainHeight / TERRAMUL;\n    float w = (terrainHeight + nu) / TERRAMUL;\n    \n    fragColor = vec4(nu,v,z,w);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = 3.0;\n    float ns = 0.0;\n    float fac = 1.0;\n    float time = iTime / 40.0;\n    // time = 0.0;\n    ns += fac * snoise(vec3(uv.x * scale, uv.y * scale, time));\n    fac /= 2.0;\n    scale *= 2.0;\n    ns += fac * snoise(vec3(uv.x * scale, uv.y * scale, time));\n    fac /= 2.0;\n    scale *= 2.0;\n    ns += fac * snoise(vec3(uv.x * scale, uv.y * scale, time));\n    fac /= 2.0;\n    scale *= 2.0;\n    ns += fac * snoise(vec3(uv.x * scale, uv.y * scale, time));\n    fragColor = vec4(ns);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}