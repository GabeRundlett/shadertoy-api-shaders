{
    "Shader": {
        "info": {
            "date": "1603707568",
            "description": "Continuation of https://www.shadertoy.com/view/WdGyWy",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVyDy",
            "likes": 8,
            "name": "Plotsâ€²",
            "published": 3,
            "tags": [
                "sdf",
                "derivatives",
                "plots"
            ],
            "usePreview": 0,
            "username": "thepheer",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "#define Colors mat4x3\n#define Plots vec4\n\nPlots f(float x) {\n\tconst float pi = radians(180.0);\n    Plots t = Plots(-3.0, -1.0, 1.0, 3.0)/12.0 + 6.0*cos(pi*x) + iTime;\n    return 0.5 + x*(1.0 - x)*sin(pi*t);\n}\n\nPlots f(vec2 xy) {\n    return f(xy.x) - xy.y;\n}\n\nPlots sdf(vec2 xy, vec2 px) {\n    vec3 e = vec3(0.5*px, 0.0);\n    Plots x = f(xy + e.xz) - f(xy - e.xz);\n    Plots y = f(xy + e.zy) - f(xy - e.zy);\n    return f(xy)/sqrt(x*x + y*y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    Colors colors = Colors(\n        hsl(vec3(0.00, 2.0, 0.5)),\n        hsl(vec3(0.25, 2.0, 0.5)),\n        hsl(vec3(0.50, 2.0, 0.5)),\n        hsl(vec3(0.75, 2.0, 0.5))\n    );\n    \n    vec2 px = 1.0/iResolution.xy;\n    vec2 uv = px*fragCoord;\n    vec3 plots = colors*smoothstep(2.0, 0.0, abs(sdf(uv, px)));\n    fragColor = vec4(sRGB_OETF(plots), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/WsKyWh\nvec3 hsl(vec3 hsl) {\n    const float tau = radians(360.0);\n    const vec3 offset = vec3(0.0, 1.0, 2.0)/3.0;\n    float limit = (1.0 - hsl.z)*hsl.z;\n\treturn hsl.z + hsl.y*limit*cos(tau*(offset - hsl.x));\n}\n\nvec3 sRGB_OETF(vec3 c) {\n    vec3 a = 1.055*pow(c, vec3(1.0/2.4)) - 0.055;\n    vec3 b = 12.92*c;\n    return mix(a, b, lessThanEqual(c, vec3(0.0031308)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}