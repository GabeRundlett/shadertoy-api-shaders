{
    "Shader": {
        "info": {
            "date": "1721003326",
            "description": "Change the envelope parameters in the common tab.",
            "flags": 8,
            "hasliked": 0,
            "id": "lffyDr",
            "likes": 3,
            "name": "ADSR - Image/Sound",
            "published": 3,
            "tags": [
                "sound",
                "image",
                "decay",
                "attack",
                "sustain",
                "release"
            ],
            "usePreview": 0,
            "username": "taylormatson",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "//https://www.desmos.com/calculator/qo1k0wk5bo\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Quarter Note Loop Length\n    float totalTime = 1./BPM*60.;\n    \n    // Loop the envelope for demonstration purposes\n    float loopTime = mod(iTime, totalTime)/totalTime;\n    \n    // Calculate the envelope value\n    float envelope = adsr(loopTime, attack, decay, sustain, release);\n    \n    // Use the envelope to modulate the color\n    vec3 color = vec3(envelope);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.desmos.com/calculator/qo1k0wk5bo\n\nvec2 mainSound( int samp, float time )\n{\n    \n    // Length of a Quarter Note Loop\n    float quarterTime = 1./BPM*60.;\n    \n    // Loop the envelope for the length of a quarter note\n    float loopTime = mod(time, quarterTime)/quarterTime;\n    \n    // Create an envelope using the common ADSR variables created that loops\n    float envelope = adsr(loopTime, attack, decay, sustain, release);\n    \n    // Set frequency of oscillator\n    float F = 80.;\n    \n    // Return stereo signal\n    return UNITY*vec2(envelope*sin(TAU*F*time));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//https://www.desmos.com/calculator/qo1k0wk5bo\n\nconst float PI = 3.1415926535;\nconst float TAU = 2.*PI;\nconst float UNITY = sqrt(.5);\nconst float BPM = 120.00;\n\n// Envelope parameters\nconst float attack = .1;\nconst float decay = 1.;\nconst float sustain = .0;\nconst float release = .1;\n\n// ADSR Envelope function\nfloat adsr(float time, float attack, float decay, float sustain, float release) {\n    \n    float level;\n    \n    if (time < attack) {\n        // Attack phase: Linear rise from 0 to 1\n        level = time / attack;\n        \n    } else if (time < attack + decay) {\n        // Decay phase: Linear fall from 1 to sustain level\n        level = 1.0 + (sustain - 1.0) * (time - attack) / decay;\n        \n    } else if (time < attack + decay + sustain) {\n        // Sustain phase: Maintain sustain level\n        level = sustain;\n        \n    } else if (time < attack + decay + sustain + release) {\n        // Release phase: Linear fall from sustain level to 0\n        level = sustain * (1.0 - (time - attack - decay - sustain) / release);\n        \n    } else {\n        // After release: Return to 0\n        level = 0.0;\n    }\n    \n    return level;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}