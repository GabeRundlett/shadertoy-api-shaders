{
    "Shader": {
        "info": {
            "date": "1616696902",
            "description": "A spiral made of 500 spheres.\nIt uses a bounding volume to improve the performance.",
            "flags": 32,
            "hasliked": 0,
            "id": "fsfGDl",
            "likes": 3,
            "name": "Sphere Spiral",
            "published": 3,
            "tags": [
                "pointcloud"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "bool showDebug = false;\nvec4 load(in vec2 coord) {\n    return texelFetch(iChannel0, ivec2(coord), 0);\n}\nfloat camSize = 5.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = (iMouse.xy/iResolution.xy)-0.5;\n    float r = iResolution.x/iResolution.y;\n    mouse *= (r)*2.;\n    if (iMouse.z < 2.) {\n        mouse = vec2(iTime/5.0, (sin(iTime/2.0)*0.5)+0.5);\n    }\n    vec2 uv = ((fragCoord.xy/iResolution.xy)-0.5) * vec2(r, 1.);\n    vec3 ro = vec3(sin(mouse.x*5.)*camSize, mouse.y*camSize, cos(mouse.x*5.)*camSize);\n    vec3 at = vec3(0);\n    vec3 cam_z = normalize(at-ro);\n    vec3 cam_x = normalize(cross(vec3(0, 1, 0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.5 * cam_z);\n    vec3 minB = load(vec2(clamp(iFrame, 0, min(count-1, int(iResolution.x)-1)), 1)).xyz;\n    vec3 maxB = load(vec2(clamp(iFrame, 0, min(count-1, int(iResolution.x)-1)), 2)).xyz;\n    float dist = 10000.;\n    bool hitBound = box(ro-(maxB-0.1), rd, ((minB-maxB)/2.0)+0.1).x > 0.0;\n    vec3 col = vec3(0);\n    if (hitBound) {\n        if (showDebug) {\n            col += 0.1;\n        }\n        for (int i = 0; i < count; i += 1) {\n            vec4 pix = load(vec2(i, 0));\n            if (pix.w == 0.) {\n                break;\n            }\n            vec3 coord = pix.xyz;\n            float d = sphere(ro, rd, coord, 0.1).x;\n            if (dist > d && d > 0.) {\n                dist = d;\n            }\n        }\n    }\n    if (dist != 10000.) {\n        vec3 position = ro+rd*dist;\n        col = abs(position)+((length(position)/2.0)-0.7);\n    }\n    if (!showDebug) {\n    float d = box(ro+vec3(5., 1.2, 5.0), rd, vec3(5.0, 0.1, 5.0)).x;\n        if (dist > d && d > 0.) {\n            col = 1.0-clamp(vec3(length(ro+rd*d))/5., 0.0, 1.0);\n        }\n    }\n    fragColor = vec4(col, 0.0);\n    if (showDebug) {\n        fragColor += texture(iChannel0, fragCoord.xy/iResolution.xy*0.1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 load(in vec2 coord) {\n    return texelFetch(iChannel0, ivec2(coord), 0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    ivec2 frag = ivec2(fragCoord);\n    if (iFrame < count/5) {\n        if (frag.y == 0 && frag.x == iFrame*5) {\n            fragColor = vec4(rus(uv), 1);\n        }\n        if (frag.y == 0 && frag.x == (iFrame*5)+1) {\n            fragColor = vec4(rus(uv), 1);\n        }\n        if (frag.y == 0 && frag.x == (iFrame*5)+2) {\n            fragColor = vec4(rus(uv), 1);\n        }\n        if (frag.y == 0 && frag.x == (iFrame*5)+3) {\n            fragColor = vec4(rus(uv), 1);\n        }\n        if (frag.y == 0 && frag.x == (iFrame*5)+4) {\n            fragColor = vec4(rus(uv), 1);\n        }\n    }\n    if (iFrame < count) {\n        if (frag.y == 1 && frag.x == (iFrame)) {\n            fragColor = vec4(max(load(vec2(frag.x, 0)), load(vec2(frag.x-1, 1))).xyz, 1);\n        }\n        if (iFrame == 1) {\n            if (frag.y == 2 && frag.x == (iFrame)) {\n                fragColor = vec4(min(load(vec2(frag.x, 0)), vec4(1000.)).xyz, 1);\n            }\n        } else {\n            if (frag.y == 2 && frag.x == (iFrame)) {\n                fragColor = vec4(min(load(vec2(frag.x, 0)), load(vec2(frag.x-1, 2))).xyz, 1);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash(vec2 p) {\n\treturn fract(sin(dot(p.xy, vec2(12.9898, 78.233)))*43758.5453);\n}\nconst int count = 500;\nconst float PI = 3.1415;\nconst float PI2= 6.283;\nvec3 rus(vec2 seed) {\n    float thata = (hash(seed)-0.5)*PI2;\n    float phi = hash(seed)*PI;\n    float x = sin(thata*5.0)*sin(phi);\n    float y = cos(thata*5.0)*sin(phi);\n    float z = cos(phi);\n    return vec3(x, z, y);\n}\n//by IQ\nvec2 box( vec3 ro, vec3 rd, vec3 boxSize) \n{\n    ro -= boxSize;\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    return vec2( tN, tF );\n}\nvec2 sphere( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}