{
    "Shader": {
        "info": {
            "date": "1671485886",
            "description": "Top: intersection of some shapes. Bottom: subtraction. This works by doing boolean operations in \"ray space\" (ie, manipulating intervals of ray distances). I'm only tracking 1 segment, more should be added for deeper boolean trees.",
            "flags": 0,
            "hasliked": 0,
            "id": "mlfGRM",
            "likes": 83,
            "name": "Raytracing Booleans",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "intersection",
                "boolean",
                "subtraction"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2299
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Raytracing boolean operations on shapes.\n//\n// Top: intersection of some shapes (box, sphere and plane)\n// Bottom: subtraction of same shapes\n//\n// This works by doing boolean operations in \"ray space\" (ie,\n// manipulating intervals of ray distances). I'm only tracking one\n// segment, more should be added for deeper boolean trees.\n//\n// When intersecting two solid intervals A and B, there are 6 possible\n// scenarios for their combination:\n//\n// 1     x---x  |             |\n// 2     x------|---x         |\n// 3     x------|-------------|--x\n// 4            |   x-----x   |\n// 5            |   x---------|--x\n// 6            |             |  x---x \n//\n// Subtraction in scenario 4 produces TWO segments, but I'm only tracking\n// ONE segment at a time in this shader, so I've got to take an arbitrary\n// decision as to what to do in that case (line 58).\n\n\nIntersection opIntersection( Intersection a, Intersection b, out int r )\n{\n    if( a.a.x<b.a.x )\n    {\n        /* 1 */ if( a.b.x<b.a.x ) return kEmpty;\n        /* 2 */ if( a.b.x<b.b.x ) { r=1; return Intersection(b.a,a.b); }\n        /* 3 */ { r=1; return b; }\n    }\n    else if( a.a.x<b.b.x )\n    {\n        /* 4 */ if( a.b.x<b.b.x ) { r=0; return a; }\n        /* 5 */ { r=0; return Intersection(a.a,b.b); }\n    }\n    else\n    {\n        /* 6 */ return kEmpty;\n    }\n}\n\nIntersection opSubtraction( Intersection b, Intersection a, out int r )\n{\n    if( a.a.x<b.a.x )\n    {\n        /* 1 */ if( a.b.x<b.a.x ) { r=0; return b; }\n        /* 2 */ if( a.b.x<b.b.x ) { r=1; return Intersection(a.b,b.b); }\n        /* 3 */ return kEmpty;\n    }\n    else if( a.a.x<b.b.x )\n    {\n        /* 4 */ if( a.b.x<b.b.x ) { r=0; return Intersection(b.a,a.a); } // hm.... difficult to choose\n        /* 5 */ { r=0; return Intersection(b.a,a.b); }\n    }\n    else\n    {\n        /* 6 */ { r=0; return b; }\n    }\n}\n\nvec4 raycast( in Ray r, ivec2 id, out int objID )\n{   \n    const vec4 pl = vec4(normalize(-vec3(1,1,1)),-0.1);\n\n    // transform one of the primitives\n   \tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), 0.5*iTime );\n\tmat4 tra = translate( 0.0, 0.0, 0.2*sin(iTime) );\n\tmat4 txx = tra * rot; \n\n    // by transforming the ray with its inverse\n    Ray rt = transform( r, inverse(txx) );\n\n    // intersect primitives\n    Intersection a, b;\n    \n    if( id.x==0 )\n    {\n        a = iSphere(r.o,r.d,0.3);\n        b = iPlane(rt.o,rt.d,pl);\n    }\n    else if( id.x==1 )\n    {\n        a = iSphere(r.o,r.d,0.3);\n        b = iBox(rt.o,rt.d,vec3(0.4,0.2,0.1) );\n    }\n    else if( id.x==2 )\n    {\n        a = iBox(r.o,r.d,vec3(0.3,0.2,0.1) );\n        //b = iPlane(rt.o,rt.d,pl);\n        b = iSphere(rt.o,rt.d,0.3);\n    }\n    else\n    {\n        a = iBox(r.o,r.d,vec3(0.4,0.1,0.2) );\n        b = iBox(rt.o,rt.d,vec3(0.3,0.3,0.2) );\n    }\n    \n    // bottom row subtraction, top row intersection\n    int o;\n    Intersection i;\n    if( id.y==0 ) i = opSubtraction( a,b,o);\n    else          i = opIntersection(a,b,o);\n    \n    // no intersection\n    if( isEmpty(i) ) { objID=-1; return vec4(-1.0); }\n\n    // intersection\n    objID = o; return vec4(i.a.x,i.a.yzw);\n}\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 1.0 + 0.0 * 0.8*sin(0.1*iTime);\n\tvec3 ro = vec3( 0.9*sin(an), 0.2+0.2*sin(1.0*an), 0.9*cos(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // global normalize coordinates\n    vec2 gp = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // 4x2 screen tiles\n    ivec2 id = ivec2(vec2(4,2)*fragCoord/iResolution.xy);\n    vec2 res = iResolution.xy/vec2(4,2);\n    vec2 q   = mod(fragCoord,res);\n\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(q+o)-res.xy)/res.y;\n        #else    \n        vec2 p = (2.0*q-res.xy)/res.y;\n        #endif\n        \n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n        \n        // background\n\t    vec3 col = vec3(0.07) * (1.0-0.3*length(gp));\n        //col += 0.1*cos( float(5*id.y+id.x)+vec3(0,2,4));\n\n        // raycast\n        int obj = -1;\n        vec4 tnor = raycast( Ray(ro,rd), id, obj);\n        if( tnor.x>0.0 )\n        {\n            float t = tnor.x;\n            vec3  pos = ro + t*rd;\n            vec3  nor = tnor.yzw;\n\n            // material\n            #if 1\n            vec3 pa = cos(60.0*pos); \n            vec3 mate = vec3(0.1,0.5,0.7) + vec3(0.9,0.5,0.3)*smoothstep(-1.0,1.0,pa.x+pa.y+pa.z); \n            #else\n            vec3 mate = vec3(0.0,0.5,0.5);\n            #endif\n            if( obj==1 ) mate =vec3(0.9,0.4,0.0);\n\n            // lighting\n            vec3  lig = normalize(vec3(0.7,0.5,-0.4));\n            vec3  hal = normalize(-rd+lig);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = clamp( 0.5 + 0.5*nor.y, 0.0, 1.0 );\n            \n            col  = mate*vec3(0.20,0.25,0.30)*amb;\n            col += mate*vec3(1.00,0.90,0.70)*dif;\n            col += 0.2*pow(clamp(dot(hal,nor),0.0,1.0),24.0)*dif;\n            //col = pow(0.5 + 0.5*nor,vec3(2.2));\n        }\n\n        // gamma\n        col = pow( col, vec3(1.0/2.2) );\n\t\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,17,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Intersection functions\n\n// Keeps track of only 1 segment of solid mass at the time\n// (form entry to exit of the ray and a primitive), but more\n// segments should be added in order to handle more complex\n// booleans\nstruct Intersection\n{\n    vec4 a;  // distance and normal at entry\n    vec4 b;  // distance and normal at exit\n};\n\nconst Intersection kEmpty = Intersection(vec4(1e20,0.0,0.0,0.0),vec4(-1e20,0.0,0.0,0.0));\n\nbool isEmpty( Intersection i )\n{\n    return i.b.x < i.a.x;\n}\n\n\n\n// https://iquilezles.org/articles/boxfunctions\nIntersection iBox( in vec3 ro, in vec3 rd, in vec3 siz ) \n{\n    vec3 m = 1.0/rd;\n    vec3 k = vec3(rd.x>=0.0?siz.x:-siz.x, rd.y>=0.0?siz.y:-siz.y, rd.z>=0.0?siz.z:-siz.z);\n    vec3 t1 = (-ro - k)*m;\n    vec3 t2 = (-ro + k)*m;\n    float tN = max(max(t1.x,t1.y),t1.z);\n    float tF = min(min(t2.x,t2.y),t2.z);\n\tif( tN>tF || tF<0.0 ) return kEmpty;\n    return Intersection( vec4(tN, -sign(rd)*step(vec3(tN),t1)), \n                         vec4(tF, -sign(rd)*step(t2,vec3(tF))) );\n}\n\n// just solve for t, |ro+t*d|² = r²\nIntersection iSphere( in vec3 ro, in vec3 rd, float r )\n{   \n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - r*r;\n    float h = b*b - c;\n    if( h<0.0 ) return kEmpty;\n    h = sqrt( h );\n    float ta = -b-h; vec3 na = (ro+ta*rd)/r;\n    float tb = -b+h; vec3 nb = (ro+tb*rd)/r;\n    return Intersection(vec4(ta,na),vec4(tb,nb));\n}\n\n// just solve for t, < ro+t*d, nor > - k = 0\nIntersection iPlane( in vec3 ro, in vec3 rd, vec4 pla )\n{ \n    float k1 = dot(ro, pla.xyz);\n    float k2 = dot(rd, pla.xyz);\n    float t = (pla.w-k1)/k2;        \n    vec2 ab = (k2>0.0) ? vec2( t, 1e20 ) : vec2( -1e20, t );\n    return Intersection( vec4(ab.x, -pla.xyz), vec4(ab.y, pla.xyz) );\n}\n\n\nstruct Ray\n{\n    vec3 o;\n    vec3 d;\n};\n    \nRay transform( Ray r, mat4x4 m )\n{\n\treturn Ray( (m*vec4(r.o,1.0)).xyz, (m*vec4(r.d,0.0)).xyz );\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}