{
    "Shader": {
        "info": {
            "date": "1719778089",
            "description": "fun little pulsing logo mark with tunnel effect.\nClick and drag to see the parallax",
            "flags": 0,
            "hasliked": 0,
            "id": "X3dXDf",
            "likes": 1,
            "name": "Laetro: L Logo Mark",
            "published": 3,
            "tags": [
                "logo",
                "shape",
                "laetro"
            ],
            "usePreview": 0,
            "username": "farhankk360",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "// Created using Shadertoy-SVG: https://zduny.github.io/shadertoy-svg/\n// For better performance, consider using buffers, see example: https://www.shadertoy.com/view/7lKGzR\n\nconst vec3 positions[51] = vec3[51](vec3(0.8829233431174539, 0.5454545454545455, 0), vec3(0.8441158483331854, 0.5454545454545455, 0), vec3(0.7241161368075284, 0.5454545454545455, 0), vec3(0.47609505282315356, 0.5454545454545455, 0), vec3(0.1656350945490055, 0.5454545454545455, 0), vec3(-0.16563782182173292, 0.5454545454545455, 0), vec3(-0.47609778009588066, 0.5454545454545455, 0), vec3(-0.7241188640802556, 0.5454545454545455, 0), vec3(-0.8441185756059126, 0.5454545454545455, 0), vec3(-0.8829260703901811, 0.5454545454545455, 0), vec3(-0.9107768465909091, 0.5428866700994318, 0), vec3(-0.9509176136363636, 0.5238813824573864, 0), vec3(-0.9810486079545454, 0.4898005237926137, 0), vec3(-0.997751875, 0.44474466796875, 0), vec3(-1, 0.41174425000000003, 0), vec3(-1, 0.37813575, 0), vec3(-0.9944559832208807, 0.21944258256392044, 0), vec3(-0.9648730510364879, 0.025343474720348015, 0), vec3(-0.9305281037486683, -0.0839614174582742, 0), vec3(-0.8841287188720703, -0.17843946215820308, 0), vec3(-0.8253697161865234, -0.2591610276322798, 0), vec3(-0.7539459154718573, -0.3271964821333451, 0), vec3(-0.6695521365079014, -0.38361619391424, 0), vec3(-0.5179751771129262, -0.44880767453835224, 0), vec3(-0.26762929199218743, -0.5050646528764206, 0), vec3(0.040089750088778464, -0.5341252888849434, 0), vec3(0.40762339089133515, -0.5445525285866477, 0), vec3(0.6910805113636365, -0.5454143465909093, 0), vec3(0.8313828977272728, -0.5443691761363636, 0), vec3(0.9150191051136365, -0.5406656924715909, 0), vec3(0.9533362926136362, -0.5242935262784091, 0), vec3(0.9820108664772729, -0.49501667258522747, 0), vec3(0.9978689630681821, -0.4564533700284092, 0), vec3(1, -0.4252269050071023, 0), vec3(1, -0.35598978462357966, 0), vec3(1, -0.1645449758522728, 0), vec3(1, 0.1491075213068182, 0), vec3(1, 0.340552330078125, 0), vec3(1, 0.4097894504616477, 0), vec3(0.9977521306818182, 0.44474466796875, 0), vec3(0.9810501420454545, 0.4898005237926137, 0), vec3(0.9509197443181818, 0.5238813824573864, 0), vec3(0.910776846590909, 0.5428866700994318, 0), vec3(-1, 0.3704974545454545, 0), vec3(-1, 0.41938254545454545, 0), vec3(-0.888020909090909, 0.5454545454545455, 0), vec3(0.6145836363636363, -0.5454545454545455, 0), vec3(0.8880181818181818, 0.5454545454545455, 0), vec3(0.8932363636363636, -0.5428818181818181, 0), vec3(1, 0.41938254545454545, 0), vec3(1, -0.4348200000000001, 0));\nconst ivec3 triangles[49] = ivec3[49](ivec3(0, 38, 1), ivec3(0, 39, 49), ivec3(0, 40, 39), ivec3(0, 47, 40), ivec3(0, 49, 38), ivec3(1, 37, 2), ivec3(1, 38, 37), ivec3(2, 36, 3), ivec3(2, 37, 36), ivec3(3, 26, 4), ivec3(3, 36, 26), ivec3(4, 25, 5), ivec3(4, 26, 25), ivec3(5, 23, 6), ivec3(5, 24, 23), ivec3(5, 25, 24), ivec3(6, 17, 7), ivec3(6, 18, 17), ivec3(6, 19, 18), ivec3(6, 20, 19), ivec3(6, 21, 20), ivec3(6, 22, 21), ivec3(6, 23, 22), ivec3(7, 16, 43), ivec3(7, 17, 16), ivec3(7, 43, 8), ivec3(8, 14, 9), ivec3(8, 15, 14), ivec3(8, 43, 15), ivec3(9, 12, 45), ivec3(9, 13, 12), ivec3(9, 14, 44), ivec3(9, 44, 13), ivec3(10, 45, 11), ivec3(11, 45, 12), ivec3(26, 35, 46), ivec3(26, 36, 35), ivec3(27, 34, 28), ivec3(27, 35, 34), ivec3(27, 46, 35), ivec3(28, 33, 48), ivec3(28, 34, 33), ivec3(29, 48, 30), ivec3(30, 48, 31), ivec3(31, 48, 32), ivec3(32, 48, 50), ivec3(33, 50, 48), ivec3(40, 47, 41), ivec3(41, 47, 42));\nconst int len = 49;\n\nbool sameSide( vec3 p1, vec3 p2, vec3 a, vec3 b ) {\n    vec3 cp1 = cross(b-a, p1-a);\n    vec3 cp2 = cross(b-a, p2-a);\n      \n    return dot(cp1, cp2) >= 0.0;\n}\n\nbool pointInTriangle( vec3 p, vec3 a, vec3 b, vec3 c ) {\n    return sameSide(p, a, b, c) && sameSide(p, b, a, c) && sameSide(p, c, a, b);\n}\n\nbool inPath( vec2 p ) {\n    for (int i=0; i<len; i++) {\n        ivec3 triangle = triangles[i];\n        vec3 a = positions[triangle[0]];\n        vec3 b = positions[triangle[1]];\n        vec3 c = positions[triangle[2]];\n  \n        if (pointInTriangle(vec3(p, 0.0), a, b, c)) {\n            return true;\n        }\n    }\n  \n    return false;\n}\n      \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.0 - 1.0;\n    mouse.x *= iResolution.x / iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 2.0;\n    uv -= vec2(1.0);\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.4;\n\n    // Define color sets\n    vec3 fillColors[3] = vec3[3](\n        vec3(0.886, 0.969, 0.925), // #E2F7EC\n        vec3(0.761, 0.902, 0.965), // #C2E6F6\n        vec3(0.635, 0.855, 0.416)  // #A2DA6A\n    );\n    vec3 shadowColors[3] = vec3[3](\n        vec3(0.635, 0.855, 0.416), // #A2DA6A\n        vec3(0.184, 0.463, 1.000), // #2f76ff (alpha ignored)\n        vec3(0.129, 0.769, 0.424)  // #21C46C\n    );\n\n    // Calculate color cycle\n    float cycleTime = mod(iTime, 9.0); // 9 seconds for a full cycle (3 colors * 5 seconds each)\n    int colorIndex = int(cycleTime / 3.0);\n    float colorTransition = fract(cycleTime / 3.0);\n\n    // Initial desired shape dimensions in pixels\n    float initialWidth = 860.0;\n    float initialHeight = 460.0;\n\n    // Maximum number of shapes\n    int maxShapes = 8; // Adjust this number to add more or fewer shapes\n\n    // Pulsing effect\n    float pulseSpeed = 2.0;\n    float pulse = 0.5 + 0.5 * sin(iTime * pulseSpeed);\n\n    for (int i = 0; i < maxShapes; i++) {         \n        // Calculate parallax factor (1.0 for innermost shape, 0.0 for outermost)\n        float parallaxFactor = 1.0 - float(i) / float(maxShapes - 1);\n        \n        // Calculate center with parallax effect\n        vec2 center = mouse * parallaxFactor;\n\n        // Calculate scaling factors for the current shape\n        float scaleX = initialWidth / iResolution.x;\n        float scaleY = initialHeight / iResolution.y;\n\n        // Apply pulsing effect to shape size\n        float pulseFactor = 1.0 + 0.1 * pulse * (1.0 - parallaxFactor);\n        scaleX *= pulseFactor;\n        scaleY *= pulseFactor;\n\n        // Scale UV coordinates\n        vec2 scaledUV = uv - center;\n        scaledUV.x /= scaleX;\n        scaledUV.y /= scaleY;\n\n        // Check if the point is within the current shape\n        if (inPath(scaledUV)) {\n            // Calculate distance from the edge for shadow effect\n            float distFromEdge = 1.2 - length(scaledUV);\n            float shadowStrength = smoothstep(0.0, 1.0, distFromEdge);\n            \n            // Calculate color transition for this shape\n            float shapeTransition = clamp(colorTransition * float(maxShapes) - float(i), 0.0, 1.0);\n            int nextColorIndex = (colorIndex + 1) % 3;\n            \n            vec3 currentFillColor = mix(fillColors[colorIndex], fillColors[nextColorIndex], shapeTransition);\n            vec3 currentShadowColor = mix(shadowColors[colorIndex], shadowColors[nextColorIndex], shapeTransition);\n            \n            // Apply pulsing effect to colors\n            currentFillColor = mix(currentFillColor, vec3(1.0), 0.2 * pulse);\n            currentShadowColor = mix(currentShadowColor, vec3(0.0), 0.2 * pulse);\n            \n            // Mix fill color with shadow color\n            vec3 finalColor = mix(currentShadowColor, currentFillColor, shadowStrength);\n            \n            // Apply overall pulsing effect\n            finalColor *= 0.8 + 0.2 * pulse;\n            \n            fragColor = vec4(finalColor, 1.0);\n            return;\n        }\n\n        // Scale up for the next shape\n        initialWidth *= 1.4;\n        initialHeight *= 1.4;\n    }\n    \n    // Background color\n    fragColor = vec4(vec3(0.0), 1.0);\n}\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}