{
    "Shader": {
        "info": {
            "date": "1604822760",
            "description": "mouse control\n\nuse texture RGB as local coordinate of sphere in each voxel.\nNB: I should either visit neighbor voxels or avoid voxel margin to not have truncated spheres.",
            "flags": 0,
            "hasliked": 0,
            "id": "tscfDr",
            "likes": 11,
            "name": "starfield + dark dust",
            "published": 3,
            "tags": [
                "raymarching",
                "volume",
                "starfield",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "// variant of \"starfield 2\" by FabriceNeyret2. https://shadertoy.com/view/WstBR7\n\n\n#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )                           // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U) {    \n    float d;\n    vec3  R = iResolution, \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(8,4,0)/1e2*cos(iTime+vec3(0,11,0)),\n          D = normalize(vec3( U+U, -3.5*R.y ) - R ),                       // ray direction\n          p = 2./R, S; \n    vec4  r, T = vec4(1), C = exp(-.2*vec4(1,2,4,0));                      // C = dark dust unit opacity\n    O-=O;\n    p.xy *= rot( .5+6.*M.y), D.xy *= rot( .5+6.*M.y);                      // camera move \n    p.xz *= rot( 2.-6.*M.x), D.xz *= rot( 2.-6.*M.x);\n    p.xy += cos( iTime + vec2(0,11)) - iTime;\n    \n    for ( float i=0.; i < 50.; i++,  p += D ) {                            // volume ray-casting\n        r = texture( iChannel0, (floor(p)+.5)/32. );\n         \n        S = fract(p) - r.rgb ;                                             // distance to sphere in voxel\n        d = -dot(S,D);       // distance ray-sphere: d/dl ( || P+l.D - C ||Â² )  = 2l + 2 (CP.D)\n        if (i>0. || d > 0.)\n            S += d*D,        // point on the ray that is closest to sphere\n        //  O += 3e-4 / dot(S,S)                                           // addition variant\n            O += T * clamp(1.- 1e3* dot(S,S), 0.,1. );                     // blend\n\n         T *= pow(C, vec4( max(0., 3.*texture( iChannel0, p/128. ).a -2.) )); // random density dark dust opacity\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}