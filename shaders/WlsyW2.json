{
    "Shader": {
        "info": {
            "date": "1593127260",
            "description": "Landau Ginsburg interacting bubbles.\ncolor - current, Size - pressure",
            "flags": 32,
            "hasliked": 0,
            "id": "WlsyW2",
            "likes": 16,
            "name": "L-G-0 Foam",
            "published": 3,
            "tags": [
                "simulation"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 633
        },
        "renderpass": [
            {
                "code": "vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 col, in vec2 p )\n{\n    if(iMouse.z < 1.)\n    \tp = R*0.45 + p*0.1;\n    ivec2 pp = ivec2(p);\n    vec4 U = texel(ch0, pp);\n    \n    // Output to screen\n    float rho = length(U.xy);\n    float phi = atan(U.y, U.x)/(2.*PI);\n    \n    float md = 1e10;\n    vec2 mr = vec2(0.);\n\tvec2 mf = vec2(0.);\n    \n    //foam render pass 1\n\n    range(i, -2,2) range(j, -2, 2)\n    {\n        ivec2 pos = pp + ivec2(i,j);\n        vec2 hs = hs2(vec2(pos));\n        vec2 dx = vec2(pos) - p;\n        vec4 Ui = texel(ch0, pos);\n        vec2 foam = Psi2Foam(Ui.xy);\n        vec2 r = (1. + 0.3*foam.x)*(dx + foam + 0.6*(hs-0.5));\n        float d = length(r);\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mf = foam;\n        }\n    }\n    \n    md = 1e10;\n    \n    //foam render pass 2\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        ivec2 pos = pp + ivec2(i,j);\n        vec2 hs = hs2(vec2(pos));\n        vec2 dx = vec2(pos) - p;\n        vec4 Ui = texel(ch0, pos);\n        vec2 foam = Psi2Foam(Ui.xy);\n        \n        vec2 r = (1. + 0.3*foam.x)*(dx + foam + 0.6*(hs-0.5));\n       \n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n    float b = smoothstep(0.15+0.7*abs(mf.y), 0.05, md);\n    vec3 c = sin(vec3(4.,2.,3.)*1.*mf.y);\n    col = vec4(vec3(b)*(max(c,0.) + max(-0.3*c,0.)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n#define texel(a, p) texelFetch(a, (p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n\n#define PI 3.14159265\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 0.5\n#define freq 0.04\n\nfloat F(vec2 psi)\n{\n    return -0.2*(1. - length(psi));\n}\n\nfloat G(vec2 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x)\n{\n    return exp(-length(x));\n}\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\nvec2 Psi2Foam(vec2 psi)\n{\n    float rho = length(psi);\n    float phi = atan(psi.y, psi.x);\n    vec2 foam = (1.1 - rho)*Dir(phi*2.);\n    return 2.*vec2(foam.x, foam.y);\n}\n\nvec2 hs2( vec2 p )\n{\n  \treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    U = pixel(ch0, p);\n    vec3 dx = vec3(-1., 0., 1.);\n    vec4 L = 0.25*(pixel(ch0, p + dx.zy) + pixel(ch0, p + dx.xy) +\n                   pixel(ch0, p + dx.yz) + pixel(ch0, p + dx.yx)) - U;\n    \n    U.x += dt*(L.y - U.y*F(U.xy));\n    U.xy = Rot(freq*dt)*U.xy;\n    \n    if(iFrame < 1)\n        U = (1. - G(0.1*(p -R*0.5)))*vec4(1., 0., 0., 0.);\n    \n    float T = 0.01*float(iFrame)*dt;\n   \n    U *=  (1. - G(0.3*(p - R*0.5 + 0.2*R.y*Dir(T))));\n      \n    \n    if(iMouse.z > 0.)\n        U *= (1. - 0.0*G(0.1*(p - iMouse.xy)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 p )\n{\n    U = pixel(ch0, p);\n    vec3 dx = vec3(-1., 0., 1.);\n    vec4 L = 0.25*(pixel(ch0, p + dx.zy) + pixel(ch0, p + dx.xy) +\n                   pixel(ch0, p + dx.yz) + pixel(ch0, p + dx.yx)) - U;\n    \n    U.y -= dt*(L.x - U.x*F(U.xy));\n    U.xy = Rot(freq*dt)*U.xy;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}