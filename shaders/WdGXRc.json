{
    "Shader": {
        "info": {
            "date": "1574545265",
            "description": "Visualisation based on capsule - JUMPER music video.\n\nTwitter: @kmgiezu\n\ncapsule - JUMPER\nhttps://www.youtube.com/watch?v=_nUbhbEp65s",
            "flags": 64,
            "hasliked": 0,
            "id": "WdGXRc",
            "likes": 6,
            "name": "Jumper",
            "published": 3,
            "tags": [
                "sdf",
                "edm",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "giezu",
            "viewed": 17414
        },
        "renderpass": [
            {
                "code": "#define S(a, b, t) smoothstep(a, b, t)\n\nfloat dLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    float d = dLine(p, a, b);\n    float m = S(.03, .01, d);\n    return m;\n}\n\nfloat dCross(vec2 p, vec2 b)\n{\n    const vec2 r = vec2(1.0, 0.0);\n    const vec2 u = vec2(0.0, 1.0);\n    vec2 bu = b * u;\n    vec2 br = b * r;\n\n    float m = line(p, -br, br);\n    m += line(p, -bu, bu);\n    return m;\n}\n\nfloat dCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat dBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat N21(vec2 p)\n{\n    p = fract(p * vec2(233.34, 851.734));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n\nvec2 N22(vec2 p)\n{\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\nvec2 GetPos(vec2 id)\n{\n    vec2 n = N22(id) * iTime;\n    return sin(n)*.15;\n}\n\nfloat CrossLayer(vec2 uv)\n{\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    float m = 0.;\n\n    float t = iTime * 0.25;\n    vec2 crossSize = vec2(0.125);\n    crossSize *= sin(t) * 0.5 + 1.5;\n\n    m += dCross(gv+GetPos(id), crossSize);\n    m = min(m, -dBox(uv, vec2(6.0)));\n\n    m = S(0.002, 0.0, m);\n    m = 1.0 - m;\n\n    return m;\n}\n\nfloat CircleLayer(vec2 uv)\n{\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    float m = 0.;\n\n    float t = iTime * 0.25;\n    float r = 0.125;\n    r *= sin(t) * 0.5 + 1.5;\n\n    m += abs(dCircle(gv+GetPos(id), r)) - 0.025;\n    m = max(m, dBox(uv, vec2(24.0)));\n\n    m = S(0.002, 0.0, m);\n\n    return m;\n}\n\nfloat SquareLayer(vec2 uv)\n{\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    float m = 0.;\n\n    float t = iTime * 0.25;\n    float r = 0.125;\n    r *= sin(t) * 0.5 + 1.5;\n\n    m += abs(dBox(gv+GetPos(id), vec2(r))) - 0.025;\n    m = max(m, dBox(uv, vec2(24.0)));\n\n    m = S(0.002, 0.0, m);\n\n    return m;\n}\n\nvec3 Background(vec2 p)\n{\n    return vec3(0.5, 0.5, sin(iTime * 0.5) * 0.1 + 0.5) * (0.7 - p.y * p.x);\n}\n\nmat2 GetRot(float t)\n{\n    float s = sin(t);\n    float c = cos(t);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 bg = Background(uv);\n\n    float m = 0.0;\n    \n\tvec3 color1 = vec3(1., 1., 0.);\n\tvec3 color2 = vec3(1., 0., 1.);\n\tvec3 color3 = vec3(0., .6, 1.);\n\n\n    // Cross layers\n\n    const int numCross = 3;\n\n    float speeds[numCross];\n    speeds[0] = 0.2;\n    speeds[1] = 0.2;\n    speeds[2] = 0.2;\n\n    float scales[numCross];\n    scales[0] = 3.0;\n    scales[1] = 5.0;\n    scales[2] = 9.0;\n\n    vec3 colors[numCross];\n    colors[0] = color1;\n    colors[1] = color2;\n    colors[2] = color3;\n\n    vec2 positions[numCross];\n    positions[0] = vec2(0.0, 0.0);\n    positions[1] = vec2(0.25, 0.1);\n    positions[2] = vec2(-0.3, -0.2);\n\n    float t = 0.0;\n    int i = 0;\n    float z = 0.0;\n    float fade = 0.0;\n    for (i = 0; i < numCross; ++i)\n    {\n        t = iTime * speeds[i];\n\n        z = fract(float(i) * 0.1 + t);\n        fade = S(0.0, 0.5, z) * S(1.0, 0.8, z);\n\n        uv *= GetRot(t);\n        uv += positions[i];\n        m += CrossLayer(uv * scales[i]) * fade;\n        if (fragColor.rgb == vec3(0.0))\n            fragColor.rgb += m * colors[i];\n    }\n\n    uv -= vec2(-0.05, -0.1);\n    t = iTime * 0.05;\n    z = fract(float(i) * 0.1 +t);\n    fade = S(0.0, 0.5, z) * S(1.0, 0.8, z);\n    uv *= GetRot(t);\n    m += CircleLayer(uv * 20.0) * fade;\n    if (fragColor.rgb == vec3(0.0))\n        fragColor.rgb += m * vec3(1.0);\n\n    t = iTime * 0.2;\n    z = fract(float(i) * 0.1 +t);\n    fade = S(0.0, 0.5, z) * S(1.0, 0.8, z);\n    t = iTime * 0.5;\n    uv *= GetRot(-t);\n    m += SquareLayer(uv * 16.0) * fade;\n    if (fragColor.rgb == vec3(0.0))\n        fragColor.rgb += m * vec3(1.0, 1.0, 1.0);\n\n    // BG\n    if (fragColor.rgb == vec3(0.0))\n        fragColor.rgb += bg;\n\n    fragColor.rgb = sqrt(fragColor.rgb);\n\n    //imageStore(imgOut, ivec2(gl_GlobalInvocationID.xy), col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 20305,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/maslyastar/capsule-jumper"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}