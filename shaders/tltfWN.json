{
    "Shader": {
        "info": {
            "date": "1612794734",
            "description": "invitation to another dimension ",
            "flags": 0,
            "hasliked": 0,
            "id": "tltfWN",
            "likes": 2,
            "name": "Vortex_",
            "published": 3,
            "tags": [
                "3d",
                "time",
                "torus",
                "texture",
                "camera",
                "shader",
                "trippy",
                "material",
                "ichannel",
                "visuals",
                "lookat",
                "normalize",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "//tutorial https://www.youtube.com/watch?v=rA9NmBRqfjI\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime*0.2;\n    vec3 ro = vec3(0,0,-1.5);//camera pos // if y is -1. we are in the middle \n    //vec3 lookat = vec3(0); // look at the center \n    vec3 lookat = mix(vec3(0,0,0),vec3(-1,-3,2),sin(t*1.56)*.5+.5);\n    float zoom = mix(.1,.5,abs(cos(t)));//.1*sin(t)+.1;//1.;\n   \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0),f)),\n        u = cross(f,r),\n        c= ro+f*zoom,\n        i = c+uv.x*r+uv.y*u,\n        rd=normalize(i-ro);\n        \n        float dS, dO;\n        vec3 p;\n        \n        for (int i =0; i <100; i++){\n            p = ro+rd*dO;\n            dS = -(length(vec2(length(p.xz)-1.,p.y))-.75);\n            if(dS<.001)break;\n            dO+=dS;\n        }\n    \n    \n    \n    vec3 col = vec3(0.);\n    \n    //creating torus \n    if(dS<.001){\n        float x = atan(p.x,p.z)+t;\n        float y = atan(length(p.xz)-1.,p.y);//distance to the circle \n        float ratio = mix(2.,8.,max(0.,sin(t)));\n        float i = 2.;\n        float e = i*ratio; \n        \n        float bands = sin(y*i+x*e);\n        float ripples = sin((x*i-y*e)*3.)*.5+.5;\n        float waves = sin(x*i/2.-y*e/2.+t*.5 );\n        \n        float b1 = smoothstep(-.2,.2,bands);\n        float b2 = smoothstep(-.2,.2,bands-.5);\n        \n        float m = b1*(1.-b2);\n        \n        //need to keep the ratio of x and y below \n        m=max(m,ripples*b2*max(0.,waves));\n        m+=max(0.,waves*.5);\n       \n       float offset = 0.2;\n       col+=texture(iChannel0,vec2(m,sin(t))).rgb;\n       col-=vec3(m);\n\n       col/=vec3(m,m-offset*t/10.,m-offset/t);\n\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}