{
    "Shader": {
        "info": {
            "date": "1705887614",
            "description": "A comparison of posterizing a color's value by converting to HSV and back, vs posterizing the rgb channels individually (the common approach)",
            "flags": 0,
            "hasliked": 0,
            "id": "lffXDs",
            "likes": 0,
            "name": "Posterize Value vs Posterize RGB",
            "published": 3,
            "tags": [
                "colorcorrection",
                "toon",
                "stylized"
            ],
            "usePreview": 0,
            "username": "phort99",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 texCol = texture(iChannel0, uv);\n    vec3 hsv = rgb2hsv(texCol.rgb);\n    \n    // mix the original color back in for improved clarity\n    float posterizeAmount = 0.7; // tweak me (0..1)\n    float posterizeSteps = 5.0; // tweak me (1..big)\n    \n    // i only posterize value by leaving these set to big numbers. \n    // posterizing hue and saturation tends to not look very good \n    // esp. on jpegs/videos.\n    float posterizeStepsHue = 8192.0; // tweak me (1..big)\n    float posterizeStepsSaturation = 8192.0; // tweak me (1..big)\n    \n    if(uv.x < (sin(iTime*1.5)*0.3)+0.5)\n    {\n        vec3 posterizeSteps = vec3(posterizeStepsHue, posterizeStepsSaturation, posterizeSteps);\n        vec3 posterizedHsv = round(hsv * posterizeSteps) / posterizeSteps;\n\n        vec3 posterizedRgb = hsv2rgb(posterizedHsv);\n        vec3 blended = mix(texCol.rgb, posterizedRgb, posterizeAmount);\n\n        // Output to screen\n        fragColor = vec4(blended, texCol.a);\n    }\n    else\n    {\n        // rgb per-channel\n        vec3 posterizeSteps = vec3(posterizeSteps,posterizeSteps,posterizeSteps);\n        vec3 posterized = round(texCol.rgb * posterizeSteps) / posterizeSteps;\n\n        vec3 blended = mix(texCol.rgb, posterized, posterizeAmount);\n\n        // Output to screen\n        fragColor = vec4(blended, texCol.a);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}