{
    "Shader": {
        "info": {
            "date": "1638106422",
            "description": "On hexagons there are 3 types of tiles, * 2,3 or 6 rotations.\nvariant of [url]https://shadertoy.com/view/flGGR3[/url]  with shadows.\n\nclick to see tiles",
            "flags": 0,
            "hasliked": 0,
            "id": "flK3zc",
            "likes": 23,
            "name": "hexatruchets 2",
            "published": 3,
            "tags": [
                "short",
                "connect",
                "doodles",
                "truchets",
                "entanglement"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// variant with shadows https://shadertoy.com/view/flGGR3\n\n#define H(p)   fract(sin(dot(p, vec2(12.9898, 78.233))-floor(iTime)) * 43758.5453)\n#define S(v)   smoothstep( N/R.y, 0., v )\n#define hue(v) ( .6 + .6 * cos( .5+(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float N = 32.,                                     // vertical number of tiles\n          s = sqrt(3.), r = 1./s;\n          \n    vec2 R = iResolution.xy,\n         U = N * u / R.y * mat2(s,-1,0,2)/4.,          // to tilted space\n         I = floor(U);                                 // I : hexa tile ID\n    U = fract(U) *  mat2(1,.5,0,s/2.) - vec2(1,r)/2.;  // U : local coords\n    U += U.y*s+abs(U.x) < 0. ? I.y--,   + vec2( 0,r)   // Set to hexagon over the 3\n        : U.x < 0.           ? I.x--, -.5*vec2(-1,r)   //   covered by the tilted cell\n        :                             -.5*vec2( 1,r);\n    O-=O;                                              // --- draw tiles\n // O += .5+.5*sin(60.*(length(U)-.5)); return;\n    float t = floor(3.*H(I)),                          // random tile type\n          a = floor(6.*H(I+.5))/6. *6.2831853;         // random tile rotation\n    U *= mat2( cos( a + vec4(0,1.57,-1.57,0) ) );      // do rotation\n    \n#define C(v,r)   S( abs(length(v)-r/2.) )              // draw among 3 types:\n#define sha(x,y) S(length(U-vec2(x,y))-.1)                              \n    O +=   t==0. ? max(C( vec2(abs(U.x)-.5,U.y+r/2.) , r), // 3 short turns\n                           C( U - vec2(0,r), r) )\n         : t==1. ? max(max(C( U - vec2(.5,-s/2.), s),      // 2 larges + 1 short\n                           C( U + vec2(.5, s/2.), s) - sha(0,-.17) ),   // - shadow\n                           C( U - vec2(0,r), r))\n         :         max(max(C( U - vec2(.5,-s/2.), s),      // 2 larges + 1 line\n                           C( U + vec2(.5,-s/2.), s) - sha(-.08,.12) ), // - shadow\n                           S( abs(U.x*s+U.y) / 2.)   - sha(.08,-.12) ); // - shadow\n\n    if (iMouse.z > 0.) O *= hue(6.28*H(I));            // if click show tiling\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}