{
    "Shader": {
        "info": {
            "date": "1693189057",
            "description": "betty first",
            "flags": 8,
            "hasliked": 0,
            "id": "Dtsfzj",
            "likes": 16,
            "name": "betty first",
            "published": 3,
            "tags": [
                "bettyfirst"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "///por jorge2017a2\n///Homero basico\n//3-ago-2023-\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(5.0*antialiasing(0.8),b,d)\n#define PI 3.141516\n\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\nvec2 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.001,0.0));\nreturn colOut;\n}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0)); return colOut; }\n\n\nvec3 cejas(vec2 uv, vec3 col)\n{\nvec2 pc1p1=vec2(.700,.740);\nvec2 pc1p2=vec2(.790,.820);\nvec2 pc1p3=vec2(.850,.880);\nvec2 pc2p1=vec2(.830,.870);\nvec2 pc2p2=vec2(.890,.930);\nvec2 pc2p3=vec2(.940,.860);\nvec2 pc3p1=vec2(1.270,.860);\nvec2 pc3p2=vec2(1.350,.910);\nvec2 pc3p3=vec2(1.390,.820);\nvec2 pc4p1=vec2(1.380,.820);\nvec2 pc4p2=vec2(1.480,.770);\nvec2 pc4p3=vec2(1.520,.730);\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(uv,pc4p1,pc4p2,pc4p3);\n\n\ncol=DrawFigBorde(vec3(0.0),col,d1);\ncol=DrawFigBorde(vec3(0.0),col,d2);\ncol=DrawFigBorde(vec3(0.0),col,d3);\ncol=DrawFigBorde(vec3(0.0),col,d4);\n\n//nariz\n pc1p1=vec2(1.060,.410);\n pc1p2=vec2(1.140,.400);\n pc1p3=vec2(1.070,.370);\n d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\ncol=DrawFigSolo(vec3(0.0),col,d1);\nreturn col;\n}\n\nvec3 boca(vec2 p, vec3 col)\n{ vec2 pos , med;\npos=vec2(1.06,0.23);\nmed=vec2(0.03,0.04);\nfloat d1=sdEllipse(p-pos,med);\ncol=DrawFigSolo(vec3(0.0),col,d1);\n\npos=vec2(1.11,0.23);\nmed=vec2(0.03,0.04);\nfloat d2=sdEllipse(p-pos,med);\n  col=DrawFigSolo(vec3(0.0),col,d2);\n  \n    return col;\n}\n\nvec3 pestana(vec2 uv, vec3 col)\n{\nvec2 pc1p1=vec2(1.220,.620);\nvec2 pc1p2=vec2(1.190,.670);\nvec2 pc1p3=vec2(1.180,.710);\n\nvec2 pc2p1=vec2(1.260,.690);\nvec2 pc2p2=vec2(1.250,.740);\nvec2 pc2p3=vec2(1.230,.760);\n\nvec2 pc3p1=vec2(1.330,.700);\nvec2 pc3p2=vec2(1.340,.740);\nvec2 pc3p3=vec2(1.320,.780);\n\nvec2 pc4p1=vec2(1.390,.680);\nvec2 pc4p2=vec2(1.400,.740);\nvec2 pc4p3=vec2(1.400,.780);\n\nvec2 pc5p1=vec2(1.420,.620);\nvec2 pc5p2=vec2(1.430,.660);\nvec2 pc5p3=vec2(1.450,.720);\n\nvec2 pc6p1=vec2(1.420,.520);\nvec2 pc6p2=vec2(1.440,.480);\nvec2 pc6p3=vec2(1.450,.460);\n\nvec2 pc7p1=vec2(1.350,.450);\nvec2 pc7p2=vec2(1.352,.430);\nvec2 pc7p3=vec2(1.340,.400);\n\nvec2 pc8p1=vec2(1.260,.470);\nvec2 pc8p2=vec2(1.250,.430);\nvec2 pc8p3=vec2(1.270,.400);\n\nvec2 pc9p1=vec2(.750,.650);\nvec2 pc9p2=vec2(.740,.680);\nvec2 pc9p3=vec2(.720,.700);\n\nvec2 pc10p1=vec2(.810,.690);\nvec2 pc10p2=vec2(.810,.750);\nvec2 pc10p3=vec2(.780,.790);\n\nvec2 pc11p1=vec2(.850,.690);\nvec2 pc11p2=vec2(.870,.730);\nvec2 pc11p3=vec2(.880,.790);\n\nvec2 pc12p1=vec2(.930,.700);\nvec2 pc12p2=vec2(.940,.730);\nvec2 pc12p3=vec2(.950,.750);\n\nvec2 pc13p1=vec2(.960,.640);\nvec2 pc13p2=vec2(.980,.670);\nvec2 pc13p3=vec2(1.010,.710);\n\nvec2 pc14p1=vec2(.930,.490);\nvec2 pc14p2=vec2(.950,.440);\nvec2 pc14p3=vec2(.950,.420);\n\nvec2 pc15p1=vec2(.860,.430);\nvec2 pc15p2=vec2(.860,.370);\nvec2 pc15p3=vec2(.860,.360);\n\nvec2 pc16p1=vec2(.800,.460);\nvec2 pc16p2=vec2(.790,.420);\nvec2 pc16p3=vec2(.780,.390);\n\nvec2 pc17p1=vec2(.740,.470);\nvec2 pc17p2=vec2(.730,.430);\nvec2 pc17p3=vec2(.710,.390);\n\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(uv,pc4p1,pc4p2,pc4p3);\nfloat d5= sdBezier(uv,pc5p1,pc5p2,pc5p3);\nfloat d6= sdBezier(uv,pc6p1,pc6p2,pc6p3);\nfloat d7= sdBezier(uv,pc7p1,pc7p2,pc7p3);\nfloat d8= sdBezier(uv,pc8p1,pc8p2,pc8p3);\nfloat d9= sdBezier(uv,pc9p1,pc9p2,pc9p3);\nfloat d10= sdBezier(uv,pc10p1,pc10p2,pc10p3);\nfloat d11= sdBezier(uv,pc11p1,pc11p2,pc11p3);\nfloat d12= sdBezier(uv,pc12p1,pc12p2,pc12p3);\nfloat d13= sdBezier(uv,pc13p1,pc13p2,pc13p3);\nfloat d14= sdBezier(uv,pc14p1,pc14p2,pc14p3);\nfloat d15= sdBezier(uv,pc15p1,pc15p2,pc15p3);\nfloat d16= sdBezier(uv,pc16p1,pc16p2,pc16p3);\nfloat d17= sdBezier(uv,pc17p1,pc17p2,pc17p3);\n\n\ncol=DrawFigSolo(vec3(0.0),col,d1);\ncol=DrawFigSolo(vec3(0.0),col,d2);\ncol=DrawFigSolo(vec3(0.0),col,d3);\ncol=DrawFigSolo(vec3(0.0),col,d4);\ncol=DrawFigSolo(vec3(0.0),col,d5);\ncol=DrawFigSolo(vec3(0.0),col,d6);\ncol=DrawFigSolo(vec3(0.0),col,d7);\ncol=DrawFigSolo(vec3(0.0),col,d8);\ncol=DrawFigSolo(vec3(0.0),col,d9);\ncol=DrawFigSolo(vec3(0.0),col,d10);\ncol=DrawFigSolo(vec3(0.0),col,d11);\ncol=DrawFigSolo(vec3(0.0),col,d12);\ncol=DrawFigSolo(vec3(0.0),col,d13);\ncol=DrawFigSolo(vec3(0.0),col,d14);\ncol=DrawFigSolo(vec3(0.0),col,d15);\ncol=DrawFigSolo(vec3(0.0),col,d16);\ncol=DrawFigSolo(vec3(0.0),col,d17);\n\nreturn col;\n}\n\n\n\nvec3 cabeza(vec2 p,vec3 col)\n{\nvec2 pos, med,pr;\nfloat ang;\n\n//cabeza\npos=vec2(1.06,0.84);\nmed=vec2(0.68,0.53);\nfloat d2=sdEllipse(p-pos,med);\ncol=DrawFigBorde(vec3(0.0),col,d2);\n\n//rostro-boca\npos=vec2(1.07,0.45);\nmed=vec2(0.53,0.25);\nfloat d3=sdEllipse(p-pos,med);\n\n//ojo 1\npos=vec2(0.89,0.62);\nmed=vec2(0.33,0.4);\nfloat d4=sdEllipse(p-pos,med);\n\n\n//ojo 2\npos=vec2(1.34,0.64);\nmed=vec2(0.28,0.37);\nfloat d5=sdEllipse(p-pos,med);\n\nd3=min(d3,d5);\nd3=min(d3,d4);\ncol=DrawFigBorde(vec3(1.0),col,d3);\n\n//linea cabeza\nvec2 A,B;\nA= vec2(1.12,0.46+0.5);\nB= vec2(1.12,0.76+0.5);\nfloat d6=sdSegment(p,A,B);\ncol=DrawFigSolo(vec3(1.0),col,d6);\n\n\n//ojo izq\npos=vec2(0.84,0.58);\nmed=vec2(0.12,0.1201);\nfloat d10=sdEllipse(p-pos,med);\ncol = DrawFigBorde(vec3(1.0),col,d10);\n\n\n//ojo der\n pos=vec2(1.32,0.55);\n med=vec2(0.11,0.12);\nfloat d11=sdEllipse(p-pos,med);\ncol = DrawFigBorde(vec3(1.0),col,d11);\n\n//arete izq\npos=vec2(0.5,0.38);\nmed=vec2(0.06,0.12);\n ang =30.0 * PI / 180.0;\n pr = Rotate(p-pos, med, ang);\nfloat d12  = sdEllipse(pr, med);\ncol = DrawFigBorde(vec3(1.0), col, d12);\n\n\n\npos=vec2(1.57,0.39);\nmed=vec2(0.06,0.12);\n//rotar\nang = -25.0 * PI / 180.0;\npr = Rotate(p-pos, med, ang);\nfloat d13  = sdEllipse(pr, med);\ncol = DrawFigBorde(vec3(1.0), col, d13);\n\n\n\n//inicia pelo circulos\nfloat r14=0.12;\npos=vec2(0.74,1.27);\nfloat d14= sdCircle(p-pos,r14);\nfloat r15=0.07;\npos=vec2(0.78,1.32);\nfloat d15= sdCircle(p-pos,r15);\nd14=differenceSDF(d14,d15);\ncol=DrawFigBorde(vec3(0.0),col,d14);\n\n//--\nfloat r16=0.05;\n pos=vec2(0.46,1.14);\nfloat d16= sdCircle(p-pos,r16);\nfloat r31=0.08;\npos=vec2(0.42,1.1);\nfloat d31= sdCircle(p-pos,r31);\nd31=differenceSDF(d31,d16);\ncol=DrawFigBorde(vec3(0.0),col,d31);\n\n//inferior\nfloat r17=0.05;\npos=vec2(0.5,0.59);\nfloat d17= sdCircle(p-pos,r17);\n\nfloat r18=0.065;\npos=vec2(0.36,0.8);\nfloat d18= sdCircle(p-pos,r18);\n\nfloat r32=0.08;\npos=vec2(0.39,0.75);\nfloat d32= sdCircle(p-pos,r32);\nd32=differenceSDF(d32,d18);\ncol=DrawFigBorde(vec3(0.0),col,d32);\n\n\nfloat r19=0.05;\npos=vec2(1.35,1.32);\nfloat d19= sdCircle(p-pos,r19);\n\n\nfloat r3=0.08;\n pos=vec2(1.38,1.29);\n d3= sdCircle(p-pos,r3);\n d3=differenceSDF(d3,d19);\ncol=DrawFigSolo(vec3(0.0),col,d3);\n\n\nfloat r20=0.05;\npos=vec2(1.65,1.16);\nfloat d20= sdCircle(p-pos,r20);\n\nfloat r4=0.06;\n pos=vec2(1.65,1.12);\n d4= sdCircle(p-pos,r4);\nd4=differenceSDF(d4,d20);\ncol=DrawFigSolo(vec3(0.0),col,d4);\n\nfloat r21=0.05;\npos=vec2(1.71,0.83);\nfloat d21= sdCircle(p-pos,r21);\ncol=DrawFigBorde(vec3(1.0),col,d21);\n\nfloat r22=0.05;\npos=vec2(1.61,0.59);\nfloat d22= sdCircle(p-pos,r22);\n\nfloat r23=0.06;\npos=vec2(1.57,0.62);\nfloat d23= sdCircle(p-pos,r23);\n\nfloat r34=0.08;\n pos=vec2(1.62,0.57);\nfloat d34= sdCircle(p-pos,r34);\nd34=differenceSDF(d34,d23);\ncol=DrawFigBorde(vec3(0.0),col,d34);\n\nfloat r24=0.05;\npos=vec2(1.62,0.77);\nfloat d24= sdCircle(p-pos,r24);\ncol=DrawFigBorde(vec3(1.0),col,d24);\n\nfloat r25=0.05;\npos=vec2(1.52,0.96);\nfloat d25= sdCircle(p-pos,r25);\ncol=DrawFigBorde(vec3(1.0),col,d25);\n\n\nfloat r26=0.05;\npos=vec2(1.29,1.01);\nfloat d26= sdCircle(p-pos,r26);\ncol=DrawFigBorde(vec3(1.0),col,d26);\n\n\nfloat r27=0.05;\npos=vec2(0.95,1.02);\nfloat d27= sdCircle(p-pos,r27);\ncol=DrawFigBorde(vec3(1.0),col,d27);\n\nfloat r28=0.05;\npos=vec2(0.7,0.98);\nfloat d28= sdCircle(p-pos,r28);\ncol=DrawFigBorde(vec3(1.0),col,d28);\n\nfloat r29=0.05;\npos=vec2(0.56,0.81);\nfloat d29= sdCircle(p-pos,r29);\ncol=DrawFigBorde(vec3(1.0),col,d29);\n\nfloat r30=0.05;\npos=vec2(0.58,0.59);\nfloat d30= sdCircle(p-pos,r30);\n\nfloat r33=0.08;\npos=vec2(0.53,0.52);\nfloat d33= sdCircle(p-pos,r33);\nd33=differenceSDF(d33,d30);\ncol=DrawFigBorde(vec3(0.0),col,d33);\n\nfloat r35=0.08;\npos=vec2(1.7,0.78);\nfloat d35= sdCircle(p-pos,r35);\n\ncol=boca(p,col);\ncol=cejas(p, col);\ncol= pestana(p,col);\n\n///pupila izq\nfloat r1=0.09;\nfloat px=-0.025+0.05*sin(iTime*2.0);\n pos=vec2(0.93+px,0.62);\nfloat d1= sdCircle(p-pos,r1);\nd1=intersectSDF(d1,d10);\ncol=DrawFigSolo(vec3(0.0),col,d1);\n\n///pupila izq\nfloat r2=0.09;\n pos=vec2(1.41+px,0.63);\n d2= sdCircle(p-pos,r2);\nd2=intersectSDF(d2,d11);\ncol=DrawFigSolo(vec3(0.0),col,d2);\n\nfloat r5=0.05;\n pos=vec2(1.72,0.82);\n d5= sdCircle(p-pos,r5);\ncol=DrawFigSolo(vec3(0.0),col,d5);\nreturn col;\n}\n\nvec3 bettyboop(vec2 p, vec3 col)\n{ col= cabeza(p,col); return col;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 uv2=uv*5.0;\n    //uv.y-=uv.y;\n    uv-=vec2(-0.65,-0.62);\n    uv*=1.0;\n    //vec3 col=vec3(0.,0.58,0.99);\n    vec3 col=vec3(0.65);\n    \n    col= bettyboop(uv, col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Referencia de sonido IQ y Gaz\n//Modificado por Jorge2017a2---jorgefp\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define DD(a,b) n=(s>=a)?ivec2(a,b):n;\n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nconst float ttotal=30.0;\n\n//gaz\n#define osc_sin(x)sin((x)*TAU)\n#define osc_saw(x)(1.-fract(x)*2.)\n#define osc_sqr(x)sign(0.5-fract(x))\n#define osc_tri(x)(asin(sin((x)*PI))/PIH)\nfloat noize(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat noize01(float t,  float a, float b){\n    float g=fract(cos(t*exp2(a))*exp2(b))+6.0;\n    return exp(-0.08*g*g) *40.0-1.;\n}\n\nfloat kick(float t)\n{  return clamp(1.5*asin(cos(320.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t);}\n\nfloat kick2(float t)\n{ return clamp(1.5*asin(cos(620.0*t-30.0*exp(-40.0*t))),-1.,1.)*exp(-4.*t); }\n\nfloat snare(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*160.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat snare2(float t)\n{   float n=noize(t,10.,10.)*exp(-t*10.);\n    float f=t*260.,a=.3*osc_tri(1.2*f)*exp(-t*3.);\n    float b=.05*osc_sin(10.*f+a)*exp(-t*3.);\n    float c=osc_sin(f+b)*exp(-t*15.), z;\n    return n+c;\n}\n\nfloat hihat01(float t)\n{ return noize01(t,10.,18.)*exp(-t*15.);}\n\n// saw wave iq\nfloat sawRaw( in float p, in float dpdt )\n{   float x = mod(p,tau)/tau; return 2.0*x-1.0; }\n\n// square wave iq\nfloat squareRaw( in float p, in float dpdt )\n{   float t = fract(p/tau); return sign(0.5-t);}\n\nfloat combinar(float a, float b, float f1, float f2)\n{   float ra=mix(0.0,a,f1);float rb=mix(0.0,b,f2);return ra+rb;}\n\nfloat wave( float x, float dxdt, in vec2 v )\n{   //referencia Inigo Quilez 2019\n    float a, b;\n    a=0.46;\n    b=0.65;\n    float f2=squareRaw(x, dxdt);\n    float fx=f2;\n    return fx;\n}\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  const float tempo = 4.2;\n  int s = int(floor(time*tempo));\n  ivec2 n = ivec2(0);\n  \n  \n   DD(0,36)  DD(0,39)  DD(0,41)  DD(2,38)  DD(2,40)  DD(2,43)  DD(3,36)  DD(3,39) \n   DD(3,41)  DD(4,38)  DD(4,40)  DD(4,43)  DD(5,36)  DD(5,39)  DD(5,41)  DD(6,38)\n   DD(6,40)  DD(6,43)  DD(6,62)  DD(6,64)  DD(6,67)  DD(7,39)  DD(7,41)  DD(8,38)\n   DD(8,40)  DD(8,43)  DD(8,62)  DD(8,64)  DD(8,66)  DD(8,67)  DD(10,66) DD(10,64)\n   DD(11,65)  DD(12,64)  DD(12,66)  DD(12,70)  DD(13,65)  DD(13,68)  DD(14,40)\n   DD(14,42)  DD(14,46)  DD(14,28)  DD(14,30)  DD(14,34)  DD(15,44)  DD(15,41) \n   DD(15,38)  DD(16,42)  DD(16,40)  DD(20,42)  DD(20,40)  DD(20,44)  DD(22,41) \n   DD(22,43)  DD(24,40)  DD(24,42)  DD(24,44)  DD(24,68)  DD(24,66)  DD(24,64)\n   DD(25,41)  DD(25,43)  DD(25,46)  DD(26,44)  DD(26,42)  DD(26,40)  DD(26,64) \n   DD(26,66)  DD(26,68)  DD(27,70)  DD(27,67)  DD(27,65)  DD(30,68)  DD(30,70) \n   DD(30,65)  DD(30,62)  DD(32,69)  DD(32,67)  DD(32,64)  DD(33,70)  DD(33,68) \n   DD(33,46)  DD(33,44)  DD(34,45)  DD(35,44)  DD(35,46)  DD(35,70)  DD(35,68) \n   DD(36,43)  DD(36,41)  DD(36,39)  DD(38,40)  DD(38,42)  DD(40,43)  DD(40,41) \n   DD(40,39)  DD(42,40)  DD(42,42)  DD(43,43)  DD(43,41)  DD(43,39)  DD(43,67) \n   DD(43,65)  DD(43,63)  DD(44,64)  DD(44,66)  DD(44,70)  DD(45,67)  DD(45,65) \n   DD(46,64)  DD(47,63)  DD(47,65)  DD(47,67)  DD(48,64)  DD(49,63)  DD(49,65)\n   DD(49,67)  DD(50,64)  DD(51,63)  DD(51,65)  DD(51,67)  DD(53,65)  DD(55,65)\n   DD(53,67)  DD(55,67)  DD(57,65)  DD(57,67)  DD(59,65)  DD(59,67)  DD(59,63) \n   DD(59,69)  DD(60,64)  DD(60,68)  DD(61,67)  DD(61,65)  DD(62,66)  DD(63,66) \n   DD(64,65)  DD(65,64)  DD(66,63)  DD(63,67)  DD(64,68)  DD(65,69)  DD(67,66) \n   DD(68,65)  DD(70,64)  DD(71,63)  DD(68,67)  DD(69,68)  DD(70,69)  DD(72,67) \n   DD(72,65)  DD(74,65)  DD(74,67)  DD(76,65)  DD(76,67)  DD(78,42)  DD(80,42) \n   DD(78,40)  DD(80,40)  DD(78,44)  DD(80,44)  DD(81,41)  DD(84,41)  DD(81,43)\n   DD(84,43)  DD(82,42)  DD(83,42)  DD(84,46)  DD(84,38)  DD(85,45)  DD(86,42) \n   DD(85,38)  DD(87,38)  DD(87,45)  DD(87,46)  DD(87,41)  DD(87,43)  DD(88,42) \n   DD(89,43)  DD(89,41)  DD(90,44)  DD(90,40)  DD(91,45)  DD(91,39)  DD(92,42)\n   DD(93,38)  DD(93,46)  DD(94,37)  DD(94,47)  DD(94,42)  DD(96,42) \n  \n  // lower one octave\n  n.y +=0;  //n.y -= 12; //orginal\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n.y-69)/12.0 );\n  float t = time - float(n.x)/tempo;\n  if( n.x==0 ) return 0.0;\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(time*vec2(1.0,0.5)) );\n    \n  // build instrument    \n  float y  = 0.4*wave(1.00*w*t,1.00*dwdt,v)*exp(-5.0*t);\n        y += 0.3*wave(2.01*w*t,2.01*dwdt,v)*exp(-7.0*t);\n        y += 0.2*wave(4.01*w*t,4.01*dwdt,v)*exp(-9.0*t);\n        y += 0.1*wave(8.01*w*t,8.01*dwdt,v)*exp(-11.0*t);\nreturn y;\n}\n\n\nfloat sound03(float time)\n{   int m, ss,c,d;\n    #define NI(c) m=(ss>=c)?c:m;\n  time = mod( time+1.0,ttotal );\n\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n  NI(21) NI(23) NI(25) NI(29) NI(31) NI(49) NI(53) NI(55)\n  NI(57) NI(59) NI(66) NI(68) NI(70) NI(73) NI(75) NI(77) \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n   float y= snare(t)*0.75;\n  return y;\n}\n\nfloat sound04(float time)\n{ int m, ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n    ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal );\n  // tune\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n \n NI(4) NI(7) NI(10) NI(14) NI(17) NI(18) NI(21) \n NI(23) NI(25) NI(27) NI(29) NI(30) NI(31) NI(33) \n NI(35) NI(37) NI(39) NI(40) NI(41) NI(43) NI(44) \n NI(45) NI(47) NI(48) NI(49) NI(51) NI(53) NI(55) NI(57) \n  \nfloat t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\nfloat y= kick(t)*0.75;\n    return y;\n}\n\nfloat sound05(float time)\n{  int m, ss,c,d;\n     #define NI(c) m=(ss>=c)?c:m;\n   time = mod( time+1.0, ttotal);\n  const float tempo = 4.2;\n  ss = int(floor(time*tempo));\n  m = 0;\n  \n \n NI(3) NI(6) NI(9) NI(11) NI(12) NI(13)\n NI(15) NI(16) NI(19) NI(20) NI(26) NI(28) \n NI(32) NI(34) NI(36) NI(41) NI(45) NI(49) \n NI(52) NI(54) NI(56) NI(58) NI(61) NI(63)\n NI(65) NI(67) NI(69) NI(71) \n \n  float t = time - float(m)/tempo;\n  if( m==0 ) return 0.0;\n  float y=hihat01(t)*0.75;\n    return y;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t=mod(time, 24.0);\nfloat y= SoundIq(t);\ny+= sound03(t);\ny+= sound04(t);\ny+= sound05(t);\n  return 0.75*vec2(y);\n}   \n\n\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}