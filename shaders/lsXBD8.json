{
    "Shader": {
        "info": {
            "date": "1495882886",
            "description": "Some random tiles on ceil and floor.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsXBD8",
            "likes": 3,
            "name": "Random Tiles",
            "published": 3,
            "tags": [
                "3d",
                "tiles"
            ],
            "usePreview": 0,
            "username": "flewww",
            "viewed": 653
        },
        "renderpass": [
            {
                "code": "const float floor_dist = 2.;\nconst float speed = 4.;\n\nconst int nvdr[256] = int[256](\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,\n    0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,\n    0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,\n    0,0,0,1,1,0,1,1,1,0,1,1,0,0,0,0,\n    0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,\n    0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,0,\n    0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,\n    0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\n);\n\nvec2 rot(vec2 v, float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a)) * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.*uv - 1.; // Center coordinates\n    uv.y *= iResolution.y / iResolution.x; // Fix display form factor\n    uv.xy = rot(uv.xy, sin(iTime)/2.);\n    \n    vec3 dir = normalize(vec3(uv, -1.));\n    float dst = abs(floor_dist/dir.y);\n    vec3 pos = vec3(0., 0., -1.) + dir * dst;\n    pos.z -= speed * iTime;\n    vec3 posf = fract(pos);\n    vec3 posi = floor(pos);\n    \n    float fcol;\n    vec4 vcol;\n    int tind = (int(-posi.z)%16)*16 + (int(posi.x)+8)%16;\n    if (nvdr[tind] == 1) {\n        vcol = vec4(0.7,1.,1.,0.);\n    } else {\n        fcol = fract((posi.x+123.)*.546 * (posi.z+789.)*.123);\n        vcol = vec4(fcol/2.,0.2,0.2,0.);\n    }\n    vcol = vcol*1.7/exp(dst/15.); // Fog\n    if (posf.x < .8 && posf.z < .8) {\n        fragColor = vcol;\n    } else {\n        fragColor = vec4(0.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}