{
    "Shader": {
        "info": {
            "date": "1467277854",
            "description": "Ray Marching Experiment 53",
            "flags": 0,
            "hasliked": 0,
            "id": "4dyXDt",
            "likes": 4,
            "name": "Ray Marching Experiment 53",
            "published": 3,
            "tags": [
                "sss",
                "ray",
                "experiment",
                "marching",
                "cheap",
                "53"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nfloat df(vec3 p)\n{\n    float disp = dot(texture(iChannel0, (p.xz + iTime)*0.2),vec4(0.2));\n\tfloat l = length(p) - 4.5;\n    return l + disp;\n}\n\nvec3 nor( in vec3 p, vec3 prec )\n{\n\tvec3 e = vec3( 0.03, 0., 0. );\n\tvec3 n = vec3(\n\t    df(p+e.xyy) - df(p-e.xyy),\n\t    df(p+e.yxy) - df(p-e.yxy),\n\t    df(p+e.yyx) - df(p-e.yyx) );\n\treturn normalize(n);\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,vec3( 0.0001, 0, 0)); \t\t\t\t\t\t\t// precise normale at surf point\n\treturn df(p - n * s)/s;\t\t\t\t\t\t\t\t\t\t\t// ratio between df step and constant step\n}\n\nvec2 shade(vec3 ro, vec3 rd, float d, vec3 lp, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 ld = normalize(lp-p); \t\t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, vec3( 0.0001, 0, 0));\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat amb = 1.; \t\t\t\t\t\t\t\t\t\t\t\t// ambiance factor\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\t\t// specular\n\tfloat sss = 1. - SubDensity(p, 2.2); \t\t\t\t\t\t\t// sub density of df\n\treturn vec2(\n        (diff + fre + spe) * amb * li, \t\t\t\t\t\t\t\t// ambiant diffuse + fresenl + specular => out\n        (diff + fre + sss) * amb * li\t\t\t\t\t\t\t\t// ambient diffuse + fresnel + subsurface => in\n    );\n}\n\nfloat pn( in vec3 x ) // iq noise\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture(iChannel1, (uv+ 0.5)/iChannelResolution[1].xy, -100.0 ).gr;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nvec3 stars(vec2 uv, vec3 rd, float d)\n{\n    uv *= 1000.;\n\tfloat k = fract( cos(uv.y * 0.0001 + uv.x) * 90000.);\n\tfloat var = sin(pn(d*0.6+rd*182.14))*0.5+0.5;// thank to klems for the variation in my shader subluminic\n\tvec3 col = vec3(mix(0., 1., var*pow(k, 200.)));// come from CBS Shader \"Simplicity\" : https://www.shadertoy.com/view/MslGWN\n\treturn col;\n}\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    float time = iTime*0.25;\n    float cam_e = 5.; \n    float cam_d = 1.2; \n  \n    vec2 si = iResolution.xy;\n    vec2 uv = (g+g-si.xy)/si.y;\n    \n    vec3 ro = vec3(sin(time), 5., cos(time))*1.2;\n  \tvec3 cu = vec3(0,1,0);\n  \tvec3 cv = vec3(0); \n\tvec3 rov = normalize(cv-ro);\n    vec3 u = normalize(cross(cu,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float md = 6.;\n    \n    float s = 1., d = 0.;\n    for(int i=0;i<150;i++)\n    {      \n        if (log(d*d/s/1e5)>0.||s>md) break;\n        d += s = df(ro+rd*d);\n    }\n    \n    if (d<md)\n\t\tf.rgb = shade(ro, rd, d*d, ro, 0.55).y * vec3(1,0.57,0);\n    else\n        f.rgb = stars(uv, rd, d);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}