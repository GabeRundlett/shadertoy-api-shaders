{
    "Shader": {
        "info": {
            "date": "1653770435",
            "description": "A Shadertoy version of the Mandelbrot Refract Applet ijuru.com/refract by Rowan Seymour founded in 2006 and discontinued in 2014. Wanted to bring it back, but only using single precision. ðŸ˜¥\nCompare Absolute Julia Set vs. Julia Set of two locations/zooms.",
            "flags": 48,
            "hasliked": 0,
            "id": "7sdcRj",
            "likes": 3,
            "name": "Mandelbrot Refract Applet",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "comparison"
            ],
            "usePreview": 1,
            "username": "PhDFractal",
            "viewed": 307
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Mandelbrot Refract Applet\n//\n// Comparison of Absolute Julia Set vs. Julia Set with powers 2,3,4,5.\n//\n// Based on Mandelbrot Refract: ijuru.com/refract\n//\n// PLEASE BRING BACK REFRACT\n// PLEASE BRING BACK REFRACT\n// PLEASE BRING BACK REFRACT\n// PLEASE BRING BACK REFRACT\n// PLEASE BRING BACK REFRACT\n//\n// Created by PhDFractal, 11/26/2021\n//\n// Drag mouse on the screen to change the Julia seed.\n//\n// Powers can be toggled by pressing right \"â†’\".\n//\n// Press 'z' to zoom into an interesting location and 'z' to again to go back.\n//\n// Interesting locations are:\n//   z^2: (0.2598,0.00168).\n//   z^3: (0.00016,1.09026).\n//   z^4: (-1.1745,0).\n//   z^5: (0.881004,0.582670).\n//\n// All colored FX rainbow. Calculated at 100 iterations per second.\n//\n// WARNING: don't run too long. Higher iterations uses GPU very quickly.\n// \n////////////////////////////////////////////////////////////////////////////////\n// Created by Fractal Math\n// https://www.youtube.com/channel/UCY-W4FvxaNRoZ8N5b-KzSZg\n// I share this piece (art and code) here in Shadertoy and through its Public API,\n// only for educational purposes. You cannot use, sell, share or host this piece\n// or modifications of it as part of your own commercial or non-commercial product\n// website or project. You cannot use, sell, share or host this piece or modifications\n// of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute\n// \"by Fractal Math @Fractal MathPro\". \n\nvec2 two(vec2 x){ return vec2(x.x*x.x-x.y*x.y,2.*x.x*x.y); } //z^2\nvec2 three(vec2 x){ return vec2(x.x*x.x*x.x-3.*x.x*x.y*x.y,3.*x.x*x.x*x.y-x.y*x.y*x.y); } //z^3\nvec2 four(vec2 x){ return vec2(x.x*x.x*x.x*x.x-6.*x.x*x.x*x.y*x.y+x.y*x.y*x.y*x.y,\n                4.*x.x*x.x*x.x*x.y-4.*x.x*x.y*x.y*x.y); } //z^4\nvec2 five(vec2 x){ return vec2(x.x*x.x*x.x*x.x*x.x-10.*x.x*x.x*x.x*x.y*x.y+5.*x.x*x.y*x.y*x.y*x.y,\n                5.*x.x*x.x*x.x*x.x*x.y-10.*x.x*x.x*x.y*x.y*x.y+x.y*x.y*x.y*x.y*x.y); } //z^5\nvec4 rainbow(float i,float density){                                    //FX rainbow palette\n    vec4 black=vec4(0.,0.,0.,1.); vec4 red=vec4(1.,0.,0.,1.); vec4 yellow=vec4(1.,1.,0.,1.);\n    vec4 green=vec4(0.,1.,0.,1.); vec4 cyan=vec4(0.,0.698,1.,1.); vec4 blue=vec4(0.,0.,1.,1.);\n    float r=(i*density+5.)-100.*floor((i*density+5.)/100.); float R=0.;\n    if(r<16.){ R=r/16.; return mix(black,red,R); }\n    else if(r>=16. && r<31.){ R=(r-16.)/15.; return mix(red,yellow,R); }\n    else if(r>=31. && r<45.){ R=(r-31.)/14.; return mix(yellow,green,R); }\n    else if(r>=45. && r<62.){ R=(r-45.)/17.; return mix(green,cyan,R); }\n    else if(r>=62. && r<78.){ R=(r-62.)/16.; return mix(cyan,blue,R); }\n    else{ R=(r-78.)/22.; return mix(blue,black,R); }\n}\nbool keypress(int code){ return texelFetch(iChannel0,ivec2(code,2),0).x != 0.0; }\nvec4 store(int i,int j) { return texelFetch(iChannel1,ivec2(i,j),0); }\nint keycount(int key) { return int(store(0,key).x); } //from Wythoffian Tiling Generator @mla: shadertoy.com/view/wlGSWc\nvec2 seed = vec2(-0.75,0.); //Seed initialized to San Marco Absolute.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    bool zoom=keypress(90);                       //Press key 'z' for original\n    int mode=keycount(39)%4;                      //Press key 'â†’' to switch power\n    vec2 z0=vec2(0.,0.); vec2 pix=fragCoord/iResolution.x-.5*vec2(1,iResolution.y/iResolution.x);\n    vec2 z=vec2(0.,0.);  vec2 pixa=4.*pix+vec2(1.,0); vec2 pixj=4.*pix-vec2(1.,0);\n    vec4 color=vec4(0.,0.,0.,1.); //initialization of Juliation pixels, and color to black\n    if((iMouse.x==0.)&&(iMouse.y==0.)){ pixa=two(pixa)+seed; //Default is San Marco Absolute of seed c=(-0.75,0).\n        if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+pixa; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+seed; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n    }\n    else{\n    if(!zoom){ seed=.005*(iMouse.xy-.5*iResolution.xy);\n        if(mode==0){ pixa=two(pixa)+seed;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+pixa; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+seed; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==1){ pixa=three(pixa)+seed;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=three(z0)+pixa; if(dot(z,z)>2.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=three(z0)+seed; if(dot(z,z)>2.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==2){ pixa=four(pixa)+seed;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=four(z0)+pixa; if(dot(z,z)>1.59){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=four(z0)+seed; if(dot(z,z)>1.59){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==3){ pixa=five(pixa)+seed;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=five(z0)+pixa; if(dot(z,z)>1.42){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=five(z0)+seed; if(dot(z,z)>1.42){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        } }\n     else{\n        if(mode==0){ seed=vec2(0.2598,0.00168)+1e-6*(iMouse.xy-.5*iResolution.xy); pixa=two(pixa/64.)+seed; pixj=pixj/5.;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+pixa; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=two(z0)+seed; if(dot(z,z)>4.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==1){ seed=vec2(0.00016,1.09026)+1e-7*(iMouse.xy-.5*iResolution.xy); pixa=three(pixa/20.)+seed; pixj=pixj/4.;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=three(z0)+pixa; if(dot(z,z)>2.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=three(z0)+seed; if(dot(z,z)>2.){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==2){ seed=vec2(-1.1745,0)+2e-6*(iMouse.xy-.5*iResolution.xy); pixa=four(pixa/4.)+seed; pixj=pixj/4.;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=four(z0)+pixa; if(dot(z,z)>1.59){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=four(z0)+seed; if(dot(z,z)>1.59){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        }\n        else if(mode==3){ seed=vec2(0.881004,0.58267)+5e-7*(iMouse.xy-.5*iResolution.xy); pixa=five(pixa/6.78)+seed; pixj=pixj/4.;\n            if(pix.x<0.){ for(int i=0;i<int(iTime/.01);i++){ z=five(z0)+pixa; if(dot(z,z)>1.42){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n            else{ z0=pixj; for(int i=0;i<int(iTime/.01);i++){ z=five(z0)+seed; if(dot(z,z)>1.42){ color=rainbow(float(i),3.2); break;} else{ z0=z; } } }\n        } } }\n    fragColor=color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) (texelFetch(iChannel0,ivec2(k,n),0))\nvoid mainImage(out vec4 t,vec2 uv){\n#if __VERSION__ < 300\n    t = vec4(0);\n#else    \n    int i=int(uv.x); int j=int(uv.y);\n    if(iFrame==0) { t=vec4(0); }\n    else{ t=texelFetch(iChannel1,ivec2(i,j),0); } //Get current state\n    if(i==0){ float w1 = keystate(j,2).x;\n        if (w1!=t.w) { t.w=w1; t.x++; } }\n#endif           \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}