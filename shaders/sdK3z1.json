{
    "Shader": {
        "info": {
            "date": "1631133517",
            "description": "my previous shader with a simple perspective applied to grid scaling and FMS_Cat's VHS filter overlayed\ngreat for synthwave or nightwave retro AMV backgrounds\nuses Palm Tree tutorial by IQ; Grid by World of Zero; VHS filter by FMS_Cat",
            "flags": 32,
            "hasliked": 0,
            "id": "sdK3z1",
            "likes": 9,
            "name": "Aesthetic Palm Tree (VHS)",
            "published": 3,
            "tags": [
                "80s",
                "retro",
                "vhs",
                "synthetic",
                "miami"
            ],
            "usePreview": 0,
            "username": "axx0009",
            "viewed": 1063
        },
        "renderpass": [
            {
                "code": "#define VHSRES vec2(320.0,240.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xy / iResolution.xy * VHSRES;\n  fragColor = texture( iChannel0, uv );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define V vec2(0.,1.)\n#define PI 3.14159265\n#define HUGE 1E9\n#define VHSRES vec2(320.0,240.0)\n#define saturate(i) clamp(i,0.,1.)\n#define lofi(i,d) floor(i/d)*d\n#define validuv(v) (abs(v.x-0.5)<0.5&&abs(v.y-0.5)<0.5)\n\nfloat v2random( vec2 uv ) {\n  return texture( iChannel1, mod( uv, vec2( 1.0 ) ) ).x;\n}\n\nmat2 rotate2D( float t ) {\n  return mat2( cos( t ), sin( t ), -sin( t ), cos( t ) );\n}\n\nvec3 rgb2yiq( vec3 rgb ) {\n  return mat3( 0.299, 0.596, 0.211, 0.587, -0.274, -0.523, 0.114, -0.322, 0.312 ) * rgb;\n}\n\nvec3 yiq2rgb( vec3 yiq ) {\n  return mat3( 1.000, 1.000, 1.000, 0.956, -0.272, -1.106, 0.621, -0.647, 1.703 ) * yiq;\n}\n\n#define SAMPLES 6\n\nvec3 vhsTex2D( vec2 uv, float rot ) {\n  if ( validuv( uv ) ) {\n    vec3 yiq = vec3( 0.0 );\n    for ( int i = 0; i < SAMPLES; i ++ ) {\n      yiq += (\n        rgb2yiq( texture( iChannel0, uv - vec2( float( i ), 0.0 ) / VHSRES ).xyz ) *\n        vec2( float( i ), float( SAMPLES - 1 - i ) ).yxx / float( SAMPLES - 1 )\n      ) / float( SAMPLES ) * 2.0;\n    }\n    if ( rot != 0.0 ) { yiq.yz = rotate2D( rot ) * yiq.yz; }\n    return yiq2rgb( yiq );\n  }\n  return vec3( 0.1, 0.1, 0.1 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / VHSRES;\n  float time = iTime;\n\n  vec2 uvn = uv;\n  vec3 col = vec3( 0.0, 0.0, 0.0 );\n\n  // tape wave\n  uvn.x += ( v2random( vec2( uvn.y / 10.0, time / 10.0 ) / 1.0 ) - 0.5 ) / VHSRES.x * 1.0;\n  uvn.x += ( v2random( vec2( uvn.y, time * 10.0 ) ) - 0.5 ) / VHSRES.x * 1.0;\n\n  // tape crease\n  float tcPhase = smoothstep( 0.9, 0.96, sin( uvn.y * 8.0 - ( time + 0.14 * v2random( time * vec2( 0.67, 0.59 ) ) ) * PI * 1.2 ) );\n  float tcNoise = smoothstep( 0.3, 1.0, v2random( vec2( uvn.y * 4.77, time ) ) );\n  float tc = tcPhase * tcNoise;\n // uvn.x = uvn.x - tc / VHSRES.x * 8.0;\n\n  // switching noise\n  float snPhase = smoothstep( 6.0 / VHSRES.y, 0.0, uvn.y );\n  uvn.y += snPhase * 0.3;\n  uvn.x += snPhase * ( ( v2random( vec2( uv.y * 100.0, time * 10.0 ) ) - 0.5 ) / VHSRES.x * 24.0 );\n\n  // fetch\n  col = vhsTex2D( uvn, tcPhase * 0.2 + snPhase * 2.0 );\n\n  // crease noise\n  float cn = tcNoise * ( 0.3 + 0.7 * tcPhase );\n  if ( 0.29 < cn ) {\n    vec2 uvt = ( uvn + V.yx * v2random( vec2( uvn.y, time ) ) ) * vec2( 0.1, 1.0 );\n    float n0 = v2random( uvt );\n    float n1 = v2random( uvt + V.yx / VHSRES.x );\n    if ( n1 < n0 ) {\n      col = mix( col, 2.0 * V.yyy, pow( n0, 10.0 ) );\n    }\n  }\n\n  // ac beat\n  col *= 1.0 + 0.1 * smoothstep( 0.4, 0.6, v2random( vec2( 0.0, 0.1 * ( uv.y + time * 0.2 ) ) / 10.0 ) );\n\n  // color noise\n  col *= 0.9 + 0.1 * texture( iChannel1, mod( uvn * vec2( 1.0, 1.0 ) + time * vec2( 5.97, 4.45 ), vec2( 1.0 ) ) ).xyz;\n  col = saturate( col );\n\n  // yiq\n  col = rgb2yiq( col );\n  col = vec3( 0.1, -0.1, 0.0 ) + vec3( 0.9, 1.1, 1.5 ) * col;\n  col = yiq2rgb( col );\n\n  fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//built from palm tree tutorial by Inigo Quilez, with grid shader by World of Zero, animation by me\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //time variable bounce\n    float b = 0.5*cos(iTime);    \n    \n    //Center of origin\n    vec2 q = uv - vec2(0.3,0.7);\n\n    // Time varying background color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //variable radius\n    float r = 0.2;\n    \n    //float scale = 15.0 + 5.0*cos(iTime); \n    float scale=15.0;\n    float gridPointX = step(float(mod((0.5-uv.x)*scale, 1.0-uv.y*1.0)), 0.1);\n    float gridPointY = step(float(mod((0.5-uv.y)*scale, 1.0-uv.y*1.0)), 0.1);\n    float gridPoint = min(1.0, gridPointX + gridPointY);\n\n    // Output to screen\n//    fragColor = vec4(gridPoint, gridPoint, gridPoint, 1.0);\n    \n    //modulated wave on radius r\n    r +=0.1*cos(atan(q.y,q.x-0.025*b)*10.0 + 20.0*(q.x+0.01*b) + 1.0 + 0.05*b);\n    \n    //render canopy\n    col *= smoothstep(r,r+0.005,length(q+.01*b));\n    \n    //trunk width\n    float w = 0.02;\n    //trunk texture\n    w += 0.002*cos(120.0*q.y);\n    //trunk taper\n    w -= 0.005*cos(2.0*q.y);\n    //ground union\n    w+= exp(-40.0*uv.y);    \n    //trunk curve\n    float c = 0.2 * sin(2.0 * (q.y+0.05*b));\n    \n    //render trunk\n    col *= 1.0 -(1.0-smoothstep(w,w+0.001,abs(q.x - c)))*(1.0-smoothstep(0.0,0.001,q.y));\n    \n    //superimpose black grid\n    col -= (gridPoint,gridPoint,gridPoint);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}