{
    "Shader": {
        "info": {
            "date": "1693409741",
            "description": "just some simple math",
            "flags": 0,
            "hasliked": 0,
            "id": "clsfWS",
            "likes": 5,
            "name": "diamboy's very simple raymarcher",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "float sdf(vec3 p)\n{\n    p.z -= 2.3;\n    float c1 = cos(iTime);\n    float s1 = sin(iTime);\n    float c2 = cos(iTime*2.0);\n    float s2 = sin(iTime*2.0);\n    vec3 q = vec3(c2*p.x+s2*p.z, s1*s2*p.x+c1*p.y-c2*s1*p.z, -c1*s2*p.x+s1*p.y+c1*c2*p.z);\n    \n    vec2 r = vec2(length(q.xz) - 1.0, q.y);\n    return length(r) - 0.25;\n}\n\nvec3 ray_march(vec3 rd)\n{\n    vec3 o = vec3(0.0);\n    for (int i = 0; i < 20; i++)\n        o += sdf(o) * rd;\n    return o;\n}\n\nfloat get_color(vec2 uv)\n{\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 d = ray_march(rd);\n    return 1.0 / dot(d,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float col = get_color(uv);\n    fragColor = vec4(col,col,col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}