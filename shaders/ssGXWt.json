{
    "Shader": {
        "info": {
            "date": "1636601378",
            "description": "yaolo",
            "flags": 0,
            "hasliked": 0,
            "id": "ssGXWt",
            "likes": 1,
            "name": "Ray sMarching Testing",
            "published": 3,
            "tags": [
                "yolo"
            ],
            "usePreview": 0,
            "username": "DanielXMoore",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 100.\n#define MAX_STEPS 100\n#define SURFACE_DIST 0.01\n\nfloat opSubtraction( float d1, float d2 ) { return max(d1,-d2); }\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Distance Estimator\nfloat DE(vec3 p) {\n    // Sphere (x,y,z, radius)\n    vec4 sphere = vec4(1, 1, 8, 1);\n    \n    sphere.xy += iTime;\n    // Note: need to offset the mod so the tiling doesn't split the spheres\n    float sphereDist = length(mod(p - sphere.xyz + 2.5, 5.) - 2.5) - sphere.w;\n    vec3 cylSpace = mod(p - vec3(1.,1.,2.5) + 2.5, 5.) - 2.5;\n    float cylDist = sdCylinder(cylSpace, vec2(.5, .5));\n    float planeDist = p.y;\n    \n    return min(opSubtraction(sphereDist, cylDist), planeDist);\n    return min(min(sphereDist, cylDist), planeDist);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float d = DE(p);\n        dO += d;\n\n        if (d < SURFACE_DIST || d > MAX_DIST) break;\n    }\n\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = DE(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        DE(p-e.xyy),\n        DE(p-e.yxy),\n        DE(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 15, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    \n    if (d < length(lightPos-p)) {\n        diff *= .1;\n    }\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5*iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float dist = RayMarch(ro, rd);\n    vec3 p = ro + rd * dist;\n    \n    float diff = GetLight(p);\n\n    col = vec3(diff);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}