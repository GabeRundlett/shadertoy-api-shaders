{
    "Shader": {
        "info": {
            "date": "1626273296",
            "description": "Use the mouse to give it a kick or put some waves in it, and check the \"Common\" tab for constants like n_particles stiffness and damping.\n\nI did this to teach myself how to use the buffer. This is my first attempt at a non cellular-automata buffer shader.",
            "flags": 32,
            "hasliked": 0,
            "id": "flfSzl",
            "likes": 5,
            "name": "Discrete String Simulation",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "string",
                "buffer",
                "discrete",
                "multipass",
                "acoustic",
                "pluck"
            ],
            "usePreview": 0,
            "username": "Jordan",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "// Fork of \"Buffer computed points.\" by patu. https://shadertoy.com/view/XllBRj\nvoid mainImage( out vec4 F, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.y -= .5;\n    uv *= 0.7;\n    // Start black\n    F = vec4(0.0,0.0,0.0,1.0);\n    // Draw the string dots\n    for (int p = 0; p < n_particles; p++) {\n        vec4 c = texelFetch(iChannel0, ivec2(0, p), 0);\n        F.r += smoothstep(0., 1., 1. / length(uv - c.xy) * .5*(0.001+abs(c[3])));//mix(F, abs(c.xyzw), smoothstep(0., 1., 1. / length(uv - c.xy) * .015));\n    }\n    // Draw the mouse\n    if (iMouse.z>0.){\n    F.b = 0.01/length(uv/0.7+vec2(0.5*iResolution.x / iResolution.y,0.5)-iMouse.xy/iResolution.y);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int n_particles = 80;\nfloat stiffness = 1.3;\nfloat damping = 0.006; \nfloat kick_strength = 0.005;\n\nfloat hash12(vec2 p) {\n\tfloat h = dot(p , vec2(127.1,311.7));\t\n    return fract(abs(sin(h)*43758.5453123));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// C.x --> x-position\n// C.y --> y-position\n// C[2] --> (unused)\n// C[3] --> y-velocity\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    C = vec4(0.0,0.0,0.0,0.0);\n    \n    if (int(fragCoord.x) == 0 && int(fragCoord.y) < n_particles) {   \n\n        if (iFrame == 0) {           \n            // initial position\n            C.x = (fragCoord.y / float(n_particles)) - 0.5;\n            if (int(fragCoord.y)>0 && int(fragCoord.y) < n_particles-1){\n                C.y = 0.4*sin(8.*3.14*C.x)*(C.x*C.x);\n            }\n            \n        // after first frame - move\n        } else {\n            // exclude endpoints\n            C = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n            if (int(fragCoord.y)>0 && int(fragCoord.y) < n_particles-1){\n                if ( length(C.x+0.5*iResolution.x / iResolution.y-iMouse.z/iResolution.y)<(2.0/float(n_particles))){//(hash12(vec2(hash12(fragCoord+iTime),0.1231*iTime))>0.999){\n                    // Random kicks\n                    C[3] -=kick_strength*(hash12(fragCoord+iTime+0.312349*fragCoord*iTime)+(C[2]-iMouse.y/iResolution.y)); \n                }\n                // Get neighbours\n                vec4 C_left = texelFetch(iChannel0, ivec2(fragCoord.x,fragCoord.y-1.0), 0); \n                vec4 C_right = texelFetch(iChannel0, ivec2(fragCoord.x,fragCoord.y+1.0), 0); \n                // Attraction to neighbours\n                C[3] -= stiffness*( C.y - (C_left.y+C_right.y)*0.5); \n                // Damping\n                C[3] *= 1.0-damping;\n                C.y += C[3];\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}