{
    "Shader": {
        "info": {
            "date": "1637953079",
            "description": "Sometime you want to do a complex action (here, draw circle) only at places where some variable changed.\nSince webGLSL doesn't have the splat operator (write2uv), the naive method would be to loop on whole pixels.\nStream Reduction approach is the // way.",
            "flags": 32,
            "hasliked": 0,
            "id": "ftyGzK",
            "likes": 6,
            "name": "change detector:stream reduction",
            "published": 3,
            "tags": [
                "tuto",
                "short",
                "parallelism",
                "streamreduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "// --- stub task: draw a circle around the changing pixels\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);                             // show stub evolving image\n    \n    if (  U.x/4. < R.x/64. && U.y/4. < R.y/64. )\n        O =  T1(U/4.), O.b += .3;         // show the 4096x reduced stream\n\n    \n    for (float j = 0.; j < R.y/64.; j++ ) // read the 4096x reduced stream\n        for (float i = 0.; i < R.x/64.; i++ ) {\n            vec4 T =  T1(vec2(i,j));\n            if ( T.a != 0. )              // change detected\n                O[int(T.z)] += smoothstep(1.5,0.,abs(length(U-T.xy)-10.) ); // draw circle\n        }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- stub task: revert pixel at random locations\n\n#define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U) * vec4(1,.99,.99,1); \n    O.a = O.r;                     // memorize the previous value\n    if ( H(U)*H(U*.973) > .995 ) O.rgb += 1.-O.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R     iResolution.xy\n#define T(U)  texelFetch( iChannel0, ivec2(U), 0 )\n#define T1(U) texelFetch( iChannel1, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- first reduction by 64: each thread detect 1st change in a 8x8 block\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if( U.x > R.x/8. || U.y > R.y/8. ) return; // image/64\n    \n    O-=O;\n    for (int k = 0; k < 64; k++ ) {\n        vec2 V =  8.*U + vec2(k%8,k/8);\n        vec4 T = T( V );\n        if ( T.r != T.a ) \n          { O = vec4( V, T.r, 1); return; } // keep location + value, flag to 1\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- first reduction by 64: each thread detect a flag set in a 8x8 block\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if( U.x > R.x/64. || U.y > R.y/64. ) return; // image/4096\n    O-=O;\n    for (int k = 0; k < 64; k++ ) {\n        vec2 V =  8.*U + vec2(k%8,k/8);\n        vec4 T = T( V );\n        if ( T.a != 0. ) { O = T; return; } // propagate the value\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}