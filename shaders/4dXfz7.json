{
    "Shader": {
        "info": {
            "date": "1495340340",
            "description": "raymarch hex tunnel day3",
            "flags": 32,
            "hasliked": 0,
            "id": "4dXfz7",
            "likes": 9,
            "name": "hexTunnel #3",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "hex"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 840
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n //   uv.x += sin(uv.y * 50.0) / 80.0;\n    float depth =texture(iChannel1, uv).a;\n\n    vec4 noise =  texture(iChannel0, uv + iTime * 100.0).rrrr - 0.5;\n\tvec4 noise0 = texture(iChannel0, 0.01 * uv + iTime * 0.001).rrrr - 0.5;\n    vec2 delta = vec2(uv - 0.5) * 0.1; // * noise0.r * 10.0 ;\n    vec4 col;\n    \n    col.r = texture(iChannel1, uv).r;\n    col.g = texture(iChannel1, uv + delta).g;\n    col.b = texture(iChannel1, uv - delta).b;\n    col.a = 1.0;\n    \n\n    fragColor = pow(col, vec4(0.3, 0.5, 0.3, 0.5)).brga;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat map(vec3 p)\n{\n   // p.x += (texture(iChannel0, 0.01 * p.zz + iTime * 100.0).r - 0.5) * 0.2;\n    vec3 q = p;\n\n    vec3 c = vec3(0.1);\n    p.z = mod(p.z,c.z)-0.5*c.z;\n    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), 1.0 * sin(q.z) + 2.0 * sin( iTime + q.z));\n    \n    float rad = 0.7 + 0.4 * sin(q.z) + sin(iTime)* 0.5 + 0.5;\n    float rad2 = rad * 0.9; //0.8 + 0.8 * cos(q.z );\n    float outer = sdHexPrism(p, vec2(rad, 0.01));\n    float inner = sdHexPrism(p, vec2(rad2, 0.6));\n    \n    float ring =  opS(inner, outer);\n    \n    vec3 p_s = p; \n    p_s = p_s * rotationMatrix(vec3(0.0, 0.0, 1.0), 3.1415 * 0.333 );\n    float bars = sdBox(p_s, vec3(2.0, sin(q.z * 10.0)* 0.5 + 0.5, 0.1)); \n    \n    float result = ring; //opS(bars, ring);\n    \n    return result;\n}\n\n\n// See https://iquilezles.org/articles/palettes for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = 0.5 * iTime + 0.5 * sin(iTime);\n    ro.x += sin(iTime * 0.2) * 0.1;\n    rd = rd * rotationMatrix(vec3(0.0, 1.0, 0.0), 0.5 * sin(iTime * 0.2 + 3.14));\n}\n\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayDir,   // camera to point vector\n               in vec3  sunDir )  // sun light direction\n{\n    float fogAmount = 1.0 - exp( -distance*0.2 );\n    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );\n    vec3  fogColor  = mix( vec3(0.1,0.0,1.0), // fog color\n                           vec3(1.0,1.0,0.0), // light color\n                           pow(sunAmount,8.0) );\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 80; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001) {\n\t\t\thit = true;\n            break;\n        }\n                   \n\t\tdepth += d * 0.5 ;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 80.0);\n    if(hit)\n    col = pal( p.z/ 2.0, vec3(0.0,0.5,0.5),vec3(0.5,0.9,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    \n    col = applyFog(col, depth, ray, vec3(0, 0, 1));\n    fragColor = vec4(col, hit? length(p.xy) : 0.0 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}