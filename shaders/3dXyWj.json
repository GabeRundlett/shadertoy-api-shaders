{
    "Shader": {
        "info": {
            "date": "1585572514",
            "description": "Simplex noise applied to two rotating layers",
            "flags": 0,
            "hasliked": 0,
            "id": "3dXyWj",
            "likes": 8,
            "name": "Simplex Noise Rotation",
            "published": 3,
            "tags": [
                "glsl",
                "simplexnoise"
            ],
            "usePreview": 0,
            "username": "nickcody",
            "viewed": 728
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\nconst float PI_4 = 0.785398163397448309616;\n\n// Change these parameters for different effects\n//\nfloat u_rotated_scale = 0.006;\nfloat u_primary_scale = 0.003;\nfloat u_rot_left_divisor = -109.0;\nfloat u_rot_right_divisor = 49.0;\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// simpled by guowei\n// https://github.com/guoweish/glsl-noise-simplex\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(\n        0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n        -0.577350269189626,  // -1.0 + 2.0 * C.x\n        0.024390243902439\n    ); // 1.0 / 41.0\n\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n    //i1.y = 1.0 - i1.x;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    // x0 = x0 - 0.0 + 0.0 * C.xx ;\n    // x1 = x0 - i1 + 1.0 * C.xx ;\n    // x2 = x0 - 1.0 + 2.0 * C.xx ;\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nvec2 rotateOrigin(vec2 v, vec2 center, float a) {\n    vec2 t = v - center;\n    vec2 r = rotate(t, a);\n    return r + center;\n}\n\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord) {\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 black = vec3(0.0, 0.0, 0.0);\n\n    vec2 rotated_resolution = vec2(1024) * u_rotated_scale;\n    vec2 primary_resolution = vec2(1024) * u_primary_scale;\n\n    vec2 rotated_fragCoord = gl_FragCoord.xy * u_rotated_scale;\n    vec2 primary_fragCoord = gl_FragCoord.xy * u_primary_scale;\n\n    vec2 rotated_center = rotated_resolution.xy/2.0;\n    vec2 primary_center = primary_resolution.xy/2.0;\n\n    vec2 coord0 = primary_fragCoord+primary_center;\n    vec2 coord1 = rotateOrigin(rotated_fragCoord, rotated_center, iTime/u_rot_left_divisor);\n    vec2 coord2 = rotateOrigin(rotated_fragCoord, rotated_center, iTime/u_rot_right_divisor);\n\n    float n0 = snoise(coord0);\n    float n1 = snoise(coord1);\n    float n2 = snoise(coord2);\n    float c = (n1 + n2)/2.0;\n\n    float n = snoise(coord0 * c);\n\n    float r = n;\n    float g = n;\n    float b = n;\n    vec3 color = vec3(r, g, b);\n    vec3 final_color = color;\n\n    out_color = vec4(final_color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}