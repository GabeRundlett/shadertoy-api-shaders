{
    "Shader": {
        "info": {
            "date": "1720724554",
            "description": "from glslsandbox",
            "flags": 0,
            "hasliked": 0,
            "id": "Mfsyzn",
            "likes": 2,
            "name": "shining mandala",
            "published": 3,
            "tags": [
                "fractal",
                "stars",
                "cosmic"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define time iTime\n#define resolution iResolution.xy\nvec3 sim(vec3 p,float s);\nvec2 rot(vec2 p,float r);\nvec2 rotsim(vec2 p,float s);\n\n//nice stuff :)\nvec2 makeSymmetry(vec2 p){\n   vec2 ret=p;\n   ret=rotsim(ret,4.02002);\n   ret.x=abs(ret.x);\n   return ret;\n}\n\nfloat makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){\n   float xx=x+tan(t*fx)*sx;\n   float yy=y-tan(t*fy)*sy;\n   return 0.5/sqrt(abs(x*xx+yy*yy));\n}\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat random(vec2 pos){return fract(1.0*sin(pos.y+fract(100.0*sin(pos.x))));}\n\nfloat noise(vec2 pos) {\nvec2 i=floor(pos),f=fract(pos);\nfloat a=random(i+vec2(0.0,0.0)),b=random(i+vec2(1.0,0.0)),c=random(i+vec2(0.0,1.0)),d=random(i+vec2(1.0,1.0));vec2 u=f*f*(3.0-2.0*f);\nreturn mix(a,b,u.x)+(c-a)*u.y*(1.0-u.x)+(d-b)*u.x*u.y;\n}\n\nfloat fbm(vec2 pos) {\nfloat v = 0.5;\nfloat a = 0.6;\nvec2 shift = vec2(100.0);\nmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.95), cos(0.5));\nfor (int i=0; i < 4; i++) {\nv += a * noise(pos);\npos = rot * pos * 2.0 + shift;\na *= 0.55;\n}\nreturn v;\n}\n\n\n//-----------------------\nfloat snow(vec2 uv,float scale)\n{\n\n\n    float w = smoothstep(3.,0., -uv.y *(scale / 10.));\n   \n    if(w < .1)return -0.;\n   \n    uv += time / scale / 2.4;\n    uv.y += time * 0./ scale;\n    uv.x += sin (uv.y + time*.05) / scale;\n    uv *= scale / 2.34;\n    vec2 s = floor(uv), f = fract(uv), p;\n    float k = 3., d;\n    p = .5 + .35 * sin(11.*fract(sin((s+p+scale) * mat2(7,3,6,5))*5.)) - f;\n    d = length(p);\n    k = min(d,k);\n    k = smoothstep(0., k, sin(f.x+f.y) * 0.02);\n        return k*w;\n}\n//_______________________________________________\n\n\n\n//util functions\nconst float PI=3.18052;\n\nvec3 sim(vec3 p,float s){\n   vec3 ret=p;\n   ret=p+s/2.2;\n   ret=fract(ret/s)*s-s/2.1;\n   return ret;\n}\n\nvec2 rot(vec2 p,float r){\n   vec2 ret;\n   ret.x=p.x*cos(r)-p.y*sin(r);\n   ret.y=p.x*sin(r)+p.y*cos(r);\n   return ret;\n}\n\nvec2 rotsim(vec2 p,float s){\n   vec2 ret=p;\n   ret=rot(p,-PI/(s*2.0));\n   ret=rot(p,floor(atan(ret.x,ret.y)/PI*s)*(PI/s));\n   return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\nvec2 p=(gl_FragCoord.xy/resolution.x)*2.0-vec2(1.0,resolution.y/resolution.x);\np.y=-p.y;\n   p=p*2.0;\n \n   p=makeSymmetry(p);\n   vec2 pos = (gl_FragCoord.xy / resolution);\n   \n\n    pos -= .4;\n    pos.x *= resolution.x / resolution.y;\n\nfloat f = fbm(pos * 1.0 * vec2(fbm(pos - (time / 8.0)), fbm(pos / 2.0 - (time / 8.0))));\nvec3 cx = vec3(3.5, 0.7, 0.4);\ncx = (f * .5) * cx;\n\nfloat a3 = atan(pos.x) * 0.10;\n\nvec3 finalColor=vec3(0);\n    float cc = 0.008;\n    cc+=snow(pos,-30.);\ncc+=snow(pos,-13.);\n    cc+=snow(rand(pos)*pos,72.);\n    cc+=snow(rand(pos)*pos,92.);\n    cc+=snow(pos,-78.);\n    finalColor=(vec3(cc));\n\n\n float col = abs( .24 / (-pos.y+0.05));\nvec3 dd = vec3(0.17, 0.39, 1.09);\n\nvec3 col2 = vec3(0.1, 1, 0);\nif (pos.y < 0.05) {\n col2 = dd;\n} else {\n    col *=5.;\n col2 = dd* vec3(0.2, 0.15, 7.);\n}\n\n   float x=p.x;\n   float y=p.y;\n   \n   float t=time*0.1618;\n\n   float a=\n       makePoint(x,y,3.3,2.9,0.3,0.3,t);\n   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,t);\n   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,t);\n   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,t);\n   a=a+makePoint(x,y,0.8,1.7,0.5,0.4,t);\n   a=a+makePoint(x,y,0.3,1.0,0.4,0.4,t);\n   a=a+makePoint(x,y,1.4,1.7,0.4,0.5,t);\n   a=a+makePoint(x,y,1.3,2.1,0.6,0.3,t);\n   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,t);  \n   \n   float b=\n       makePoint(x,y,1.2,1.9,0.3,0.3,t);\n   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,t);\n   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,t);\n   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,t);\n   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,t);\n   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,t);\n   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,t);\n   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,t);\n   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,t);\n\n   float c=\n       makePoint(x,y,3.7,0.3,0.3,0.3,t);\n   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,t);\n   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,t);\n   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,t);\n   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,t);\n   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,t);\n   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,t);\n   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,t);\n   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,t);\n   \n   vec3 d=vec3(a+b,b+c,c)/32.0;\n   \n   fragColor = vec4(d.x,d.y,d.z,1.0);\n  fragColor+=  col*vec4(col2*dd*finalColor*cx*col, 1.);\n   \n   }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}