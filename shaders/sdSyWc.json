{
    "Shader": {
        "info": {
            "date": "1644210103",
            "description": "Weird warbling.",
            "flags": 8,
            "hasliked": 0,
            "id": "sdSyWc",
            "likes": 10,
            "name": "Sound Experiment #3",
            "published": 3,
            "tags": [
                "sound",
                "experiment",
                "warbling"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.2831853072\n\nfloat whiteNoise(in float time) {\n    return fract(495.381 * cos(937.385 * time + 18.387));\n}\n\nfloat squareWave(in float time) {\n    return 1.0 - 2.0 * mod(floor(2.0 * time), 2.0);\n}\n\nfloat triWave(in float time) {\n    return 1.0 - abs(mod(4.0 * time + 1.0, 4.0) - 2.0);\n}\n\nfloat sineWave(in float time) {\n     return sin(TAU * fract(time));\n}\n\nfloat makeNoise(in float time) {\n    //time = 10.0 * sin(2.0 * time + sin(10.0 * time));\n    time = 5.0 * sin(time + sin(3.0 * time));\n    time = mod(time, 0.5);\n    float env = 0.0;\n    float envTime = 50.0 * time;\n    if (envTime < 1.0) env = 2.0 * envTime;\n    else if (envTime < 2.0) env = 3.0 - envTime;\n    else if (envTime < 4.0) env = 1.0;\n    else if (envTime < 5.0) env = 5.0 - envTime;\n    return sineWave(200.0 * time) * env * 0.5;// * 0.01;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}