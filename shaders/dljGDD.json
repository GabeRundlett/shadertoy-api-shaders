{
    "Shader": {
        "info": {
            "date": "1673350788",
            "description": "They wonk around helplessly",
            "flags": 0,
            "hasliked": 0,
            "id": "dljGDD",
            "likes": 1,
            "name": "Flying butter boxes",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "squares"
            ],
            "usePreview": 0,
            "username": "brainsandwich",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// https://stackoverflow.com/a/4275343/4296866\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat sdf_rect(in vec2 uv, in vec2 position, in vec2 halfsize)\n{\n    vec2 componentWiseEdgeDistance = abs(uv - position) - halfsize;\n    return min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 1.);\n}\n\nfloat sdf_rect_rounded(in vec2 uv, in vec2 position, in vec2 halfsize)\n{\n    vec2 componentWiseEdgeDistance = abs(uv - position) - halfsize;\n    float outsideDistance = length(max(componentWiseEdgeDistance, 0.));\n    float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.);\n    return outsideDistance + insideDistance;\n}\n\nstruct rect {\n    vec3 color;\n    vec2 center;\n    vec2 halfsize;\n};\n\nvec3 mixfn(in vec3 pixel, in vec3 color, in float mixer)\n{\n    vec3 cp = color; //color-pixel;\n    return mix(pixel, cp, mixer);\n}\n\nfloat antialias(in float dist)\n{\n    return smoothstep(-1., 1., (dist-.04)/fwidth(dist));\n}\n\nvoid draw_rect(inout vec3 pixel, in vec2 position, rect r)\n{\n    float dist = sdf_rect_rounded(position, r.center, r.halfsize);\n    float clampd = 1.-antialias(dist); // 1.-step(0.01, dist);\n    pixel = mixfn(pixel, r.color, clampd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 col = vec3(1.);\n    \n    for (int i = 0; i < 32; i++)\n    {\n        float fi = float(i)*sin(0.00000001*iTime+0.001);\n        rect r;\n        r.color = vec3(rand(10.*vec2(fi)), rand(vec2(4.501*fi)), rand(vec2(-fi*.99)));\n        r.center = 1.*vec2(rand(vec2(fi, fi+0.1)), rand(vec2(0.1*fi)));\n        r.halfsize = 0.2*vec2(rand(vec2(fi, fi+0.1)), rand(vec2(2.*fi)));\n        \n        draw_rect(col, uv, r);\n    }\n    \n    // const int RECTS=3;\n    // rect rects[RECTS];\n    // \n    // rects[0].color = vec3(1.0);\n    // rects[0].center = vec2(0.3);\n    // rects[0].halfsize = vec2(0.2);\n    // \n    // rects[1].color = vec3(1.0, 0.4, 0.1);\n    // rects[1].center = vec2(0.5, 0.15);\n    // rects[1].halfsize = vec2(0.08);\n    // \n    // rects[2].color = vec3(0.4, 0.4, 0.41);\n    // rects[2].center = vec2(0.7, 0.4);\n    // rects[2].halfsize = vec2(0.01);\n    // \n    // for (int i = 0; i < RECTS; i++)\n    // {\n    //     draw_rect(col, uv, rects[i]);\n    // }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}