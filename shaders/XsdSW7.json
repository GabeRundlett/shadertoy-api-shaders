{
    "Shader": {
        "info": {
            "date": "1459728431",
            "description": "Change pattern evolution by mouse axis X",
            "flags": 0,
            "hasliked": 0,
            "id": "XsdSW7",
            "likes": 11,
            "name": "Fractal Experiment 17",
            "published": 3,
            "tags": [
                "fractal",
                "experiment",
                "17"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 756
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nconst vec3 ld = vec3(0.,1., .5);\n\nfloat t = 0., ts = 0.;\nfloat dstepf = 0.0;\n\nfloat ratio = 0.5;\n\nvec2 path(float z)\n{\n\treturn vec2(cos(z), sin(z));\n}\n\nmat3 getRotXMat(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 getRotZMat(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\n//julia fractal\nfloat fractus(vec3 p)\n{\n\tvec2 z = p.xy;\n    vec2 c = vec2(0.28,-0.56) * 2. * ratio;\n\tfloat k = 1., h = 1.0;    \n    for (float i=0.;i<7.;i++)\n    {\n        h *= 4.*k;\n\t\tk = dot(z,z);\n        if(k > 4.) break;\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    }\n\treturn sqrt(k/h)*log(k);\n}\n\nvec2 df(vec3 p)\n{\n    p.xy += path(p.z*0.2)*1.5;\n\tp *= getRotZMat(p.z*0.2);\n\tp = mod(p, 4.) - 2.;\n\tfloat obj = fractus(p);\n\tvec2 res = vec2(obj, 1.);\n\n\treturn res;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n// from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<18; i++ )\n    {\n\t\tfloat h = df( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0., 1. );\n}\n\n// from iq code\nfloat cao( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd, float prec) \n{\n    vec3 l = lp - p;\n    float d = max(length(l), 0.01);\n    float atten = exp( -0.0001*d )-0.5;\n    l /= d;\n    \n    vec3 n = nor(p, prec);\n   \tvec3 r = reflect(-l, n);\n    \n    float ao = df(p+n*3.).x;\n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    dif *= softshadow(p, l, 0., 1.);\n    \n    vec3 lin = vec3(0.08,0.32,0.47) * ao;\n    lin += 1.0*dif*vec3(1,1,0.84);\n    lin += 2.5*spe*dif*vec3(1,1,0.84);\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin * atten * cao(p, n);\n}\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (2.*g-si)/min(si.x, si.y);\n\t\n\tt = iTime * 5.;\n\tts = sin(t)*.5+.5;\n    \n    ratio = 0.5;\n    if (iMouse.z > 0.)\n    \tratio = iMouse.x / si.x;\n    \n    dstepf = 0.5;\n    \n\tvec3 ro = vec3(0,0,t);\n   \n\tvec3 cu = vec3(0,1,0);\n\tvec3 co = ro + vec3(0,0,1);\n\t\n\tfloat fov = .5;\n\tvec3 z = normalize(co - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * uv.x * x + fov * uv.y * y);\n   \n\tvec2 s = vec2(0.01);\n\tfloat d = 0.;\n\tvec3 p = ro;\n\tfloat dMax = 30.;\n\t\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (s.x<0.0025*d || d>dMax) break;\n\t\ts = df(p);\n\t\td += s.x * (s.x>0.1?0.2:0.2);\n\t\tp = ro + rd * d;\t\n        dstepf += 0.002;\n\t}\n\t\n    f.rgb = vec3(0.47,0.6,0.76) * lighting(p, ro, rd, 0.1); \n\tf.rgb = mix( f.rgb, vec3(0.5,0.49,0.72), 1.0-exp( -0.01*d*d ) ); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}