{
    "Shader": {
        "info": {
            "date": "1472304501",
            "description": "Just a rotating plain with animated circles on it.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lc3Ds",
            "likes": 3,
            "name": "Plain Cosmos",
            "published": 3,
            "tags": [
                "circles",
                "animation",
                "plain"
            ],
            "usePreview": 0,
            "username": "alexpolt",
            "viewed": 695
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy-vec2(0.5,0.5);\n    float ar = iResolution.x / iResolution.y;\n    float t = iTime/20.0;\n    \n    vec3 pos = vec3(0,0,-1);\n    vec3 ray = normalize( vec3( uv.x * ar, uv.y, 0.75 ) );\n    vec3 plain = normalize( vec3( sin(t), cos(t), cos(2.0*t) ) );\n    \n    float pp = dot( plain, pos );\n    float pr = dot( plain, ray);\n    float s = sign( pp ) * sign( pr );\n    \n    vec3 v = pos + abs( pp ) / abs( pr ) * ray;\n    \n    float r = 1.0 - abs( 2.0 * smoothstep(-0.5, 0.5, fract( 1.3+length(v)+2.3*t ) - 0.5 ) - 1.0 );\n    float g = 1.0 - abs( 2.0 * smoothstep(-0.5, 0.5, fract( 0.7+length(v)+1.7*t ) - 0.5 ) - 1.0 );\n    float b = 1.0 - abs( 2.0 * smoothstep(-0.5, 0.5, fract( 0.0+length(v)+2.0*t ) - 0.5 ) - 1.0 );\n    float k = 1.0 - smoothstep( 0.0, 12.0, length(v) );\n    vec3 rgb = vec3( s < 0.0 ? r : 0.0, s < 0.0 ? g : 0.0, s < 0.0 ? b : 0.0 );\n    \n    float back = plain.z * dot( plain.xy, ray.xy ) > 0.0 ? 1.0 : 0.0;\n    plain = dot( plain.xy, ray.xy ) < 0.0 ? -plain : plain;\n    float angle1 = acos( dot( pos, plain ) );\n    float angle2 = acos( dot( -pos, ray ) );\n    float angle3 = 3.1416 - angle1 - angle2;\n    angle3 = clamp( 0.005, 3.1416, angle3 );\n    \n    vec3 ray2beam = pos + ray * sin(angle1) / sin( angle3 );\n    vec3 beam = dot( ray2beam, plain ) * plain;\n    \n    float d0 = smoothstep( .0, .1, length( beam - ray2beam ) );\n\tfloat m1 = back > 0.0 ? 1.0 : pow(d0,.25);\n    float m2 = back > 0.0 ? .5 * ( 1.0 - smoothstep( .0, 4.0, length( beam ) )  ) : 1.0;\n    \n\tfragColor = vec4( rgb * k * m1 + pow( 1.0-d0, 4.0 ) * m2, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}