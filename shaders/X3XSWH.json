{
    "Shader": {
        "info": {
            "date": "1709411480",
            "description": "hand",
            "flags": 0,
            "hasliked": 0,
            "id": "X3XSWH",
            "likes": 21,
            "name": "Creepy Hands",
            "published": 3,
            "tags": [
                "hand"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "float map (vec3 p) {\n    float d = 1e9;\n    p.x = abs(p.x)-.5;\n    float T = iTime;\n    if (iMouse.z>0.) T = iMouse.y/R.y;\n    \n    float A0 = 1.*(.7+.5*cos(2.*T+0.));\n    float A1 = 1.*(.7+.5*cos(2.*T+.3));\n    float A2 = 1.*(.7+.5*cos(2.*T+.6));\n    float A3 = 1.*(.7+.5*cos(2.*T+.9));\n    float A4 = 1.*(.7+.5*cos(2.*T+1.2));\n    \n    \n    \n    \n    float A00 =  .3+.3*cos(1.5*T); // wrist angle\n    float A01 = .2+.2*A0; // thumb1 angle\n    float A02 = 1.5*A0; // thumb2 angle\n    float A03 = .5*A0; // thumb3 angle\n    float A11 = .2*A1; // pointer1 angle\n    float A12 = A1; // pointer2 angle\n    float A13 = A1; // pointer3 angle\n    float A14 = A1; // pointer4 angle\n    float A21 = .2*A2; // middle1 angle\n    float A22 = A2; // middle2 angle\n    float A23 = A2; // middle3 angle\n    float A24 = A2; // middle4 angle\n    float A31 = .2*A3; // ring1 angle\n    float A32 = A3; // ring2 angle\n    float A33 = A3; // ring3 angle\n    float A34 = A3; // ring4 angle\n    float A41 = .2*A4; // pinky1 angle\n    float A42 = A4; // pinky2 angle\n    float A43 = A4; // pinky3 angle\n    float A44 = A4; // pinky4 angle\n    \n    { // wrist\n        float d0 = sdCapsule(p,vec3(-.1,-.7,0),vec3(vec3(-.1,-.2,0)),.13);\n        float d1 = sdCapsule(p,vec3(+.1,-.7,0),vec3(vec3(+.1,-.2,0)),.13);\n        \n        d = opSmoothUnion(d0,d1,.15);\n    }\n    { // thumb\n        vec3 p0 = p;\n        p -= vec3(-.1,-.2,0);\n        p.xy *= ei(1.);\n        p.yz *= ei(.2+A01);\n        float d0 = sdCapsule(p,vec3(0,0,0),vec3(0,.3,0),.1);\n        p -= vec3(0,.3,0);\n        p.xy *= ei(-.1);\n        p.xz *= ei(-.6);\n        p.yz *= ei(A02);\n        float d1 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.09);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A03);\n        float d2 = sdCapsule(p,vec3(0,0,0),vec3(0,.1,0),.08);\n        \n        d = opSmoothUnion(d,d0,.03);\n        d = opSmoothUnion(d,d1,.02);\n        d = opSmoothUnion(d,d2,.01);\n        p = p0;\n    }\n    { // Pointer\n        vec3 p0 = p;\n        p -= vec3(-.15,-.2,0);\n        p.xy *= ei(.05);\n        p.yz *= ei(A11);\n        float d0 = sdCapsule(p,vec3(0,0,0),vec3(0,.4,0),.1);\n        p -= vec3(0,.4,0);\n        p.yz *= ei(A12);\n        float d1 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.08);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A13);\n        float d2 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.07);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A14);\n        float d3 = sdCapsule(p,vec3(0,0,0),vec3(0,.1,0),.06);\n        \n        d = opSmoothUnion(d,d0,.1);\n        d = opSmoothUnion(d,d1,.03);\n        d = opSmoothUnion(d,d2,.02);\n        d = opSmoothUnion(d,d3,.01);\n        p = p0;\n    }\n    { // Middle\n        vec3 p0 = p;\n        p -= vec3(-0.,-.2,0);\n        p.xy *= ei(.0);\n        p.yz *= ei(A21);\n        float d0 = sdCapsule(p,vec3(0,0,0),vec3(0,.42,0),.1);\n        p -= vec3(0,.42,0);\n        p.yz *= ei(A22);\n        float d1 = sdCapsule(p,vec3(0,0,0),vec3(0,.25,0),.08);\n        p -= vec3(0,.25,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A23);\n        float d2 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.07);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A24);\n        float d3 = sdCapsule(p,vec3(0,0,0),vec3(0,.12,0),.06);\n        \n        d = opSmoothUnion(d,d0,.1);\n        d = opSmoothUnion(d,d1,.03);\n        d = opSmoothUnion(d,d2,.02);\n        d = opSmoothUnion(d,d3,.01);\n        p = p0;\n    }\n    { // Ring\n        vec3 p0 = p;\n        p -= vec3(0.15,-.2,0);\n        p.xy *= ei(-.04);\n        p.yz *= ei(A31);\n        float d0 = sdCapsule(p,vec3(0,0,0),vec3(0,.4,0),.1);\n        p -= vec3(0,.4,0);\n        p.yz *= ei(A32);\n        float d1 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.08);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A33);\n        float d2 = sdCapsule(p,vec3(0,0,0),vec3(0,.2,0),.07);\n        p -= vec3(0,.2,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A34);\n        float d3 = sdCapsule(p,vec3(0,0,0),vec3(0,.1,0),.06);\n        \n        d = opSmoothUnion(d,d0,.1);\n        d = opSmoothUnion(d,d1,.03);\n        d = opSmoothUnion(d,d2,.02);\n        d = opSmoothUnion(d,d3,.01);\n        p = p0;\n    }\n    { // Pinky\n        vec3 p0 = p;\n        p -= vec3(0.15,-.2,0);\n        p.xy *= ei(-.4);\n        p.yz *= ei(A41);\n        float d0 = sdCapsule(p,vec3(0,0,0),vec3(0,.35,0),.08);\n        p -= vec3(0,.35,0);\n        p.yz *= ei(A42);\n        float d1 = sdCapsule(p,vec3(0,0,0),vec3(0,.15,0),.07);\n        p -= vec3(0,.15,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A43);\n        float d2 = sdCapsule(p,vec3(0,0,0),vec3(0,.15,0),.06);\n        p -= vec3(0,.15,0);\n        p.xy *= ei(0.);\n        p.yz *= ei(A44);\n        float d3 = sdCapsule(p,vec3(0,0,0),vec3(0,.1,0),.05);\n        \n        d = opSmoothUnion(d,d0,.1);\n        d = opSmoothUnion(d,d1,.02);\n        d = opSmoothUnion(d,d2,.02);\n        d = opSmoothUnion(d,d3,.01);\n        p = p0;\n    }\n    return d;\n}\nvec3 normal (vec3 p) {\n    vec2 e = vec2(1e-4,0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n    ));\n}\nMain {\n\n    vec3 p = vec3(0.,0.1,-1);\n    vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));\n    float T = iTime;\n    if (iMouse.z>0.) T = 3.1+iMouse.x/R.x;\n    p.xz *= ei(T);\n    d.xz *= ei(T);\n    for (float i = 0.; i < 50.; i++) {\n    \n        p += d*map(p);\n    }\n\n    Q.xyz = vec3(.7,.4,.3)+.5*normal(p).x;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n#define R iResolution.xy\n#define Main void mainImage(out vec4 Q,  in vec2 U)\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}