{
    "Shader": {
        "info": {
            "date": "1601407653",
            "description": "Point variant ( with jittered normal) of [url]https://shadertoy.com/view/3d3yzf[url]\n( discont variant of \"Smooth Winding Number\" by Ultraviolet. [url]https://shadertoy.com/view/Wddyz2[/url] )\n\nclick to threshold in/out\nkeys 1,2: weight 1/r , 1/r²  else 1",
            "flags": 16,
            "hasliked": 0,
            "id": "WdtcRX",
            "likes": 17,
            "name": "Smooth Winding Number - points",
            "published": 3,
            "tags": [
                "number",
                "smooth",
                "hatching",
                "filling",
                "expressive",
                "winding",
                "handdrawing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 622
        },
        "renderpass": [
            {
                "code": "// point variant of https://shadertoy.com/view/3d3yzf\n// discont variant of \"Smooth Winding Number\" by Ultraviolet. https://shadertoy.com/view/Wddyz2\n// see papers:   https://igl.ethz.ch/projects/winding-number \n//               https://www.dgp.toronto.edu/projects/fast-winding-numbers/\n\n#define P(n)            cos(PI*2.*(n+phase)/N + vec2(0,11) ) + .2* hash(n)\n#define hash(p)         fract(sin( (p)* vec2(12.9898, 78.233)) * 43758.5453) // https://www.shadertoy.com/view/llySRh\n#define hash2(p)        fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define keyPressed(a) ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)          // https://www.shadertoy.com/view/llySRh\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 3.* ( u - R*.5)/R.y;\n \n    float  N = 50.,\n          PI = 3.1416,\n           t = floor( fract(iTime*.2) *N*2. ),\n       N_min = max(0.,t-N),\n       N_max = min(N ,t),\n       phase = 10.*iTime,\n           a = 0., d = 1e5, s = 0., l, w;\n    for(float i = N_min; i < N_max; i++ ) \n        l = length( P(i) - U ), d = min( d, l ), \n        w =   keyPressed(48+1) ? 1./l       // try weighting 1, 1/l, 1/l²\n            : keyPressed(48+2) ? 1./(l*l)\n            : 1.,\n        s += w,\n        a += w* dot( normalize( P(i) - U ) ,                      // distance to point \n                     normalize( P(i) + .3*(2.*hash(i+.5)-1.) ) ); // normal at point\n    a *= 6.28 /s;\n    \n    O = vec4( .5 + .5* a/6.28  ); \n // O = vec4(floor(O*16.)/16.);  // see isovalues\n    if ( iMouse.z > 0.) {\n        if (a < 0.  ) O.b++;\n        if (a > 3.14) O.b--;\n    }\n    if ( fract(iTime/5.) > .5 ) O = ( .6 + .6 * cos( 6.3 * O.r + vec4(0,23,21,0) ) );  // hue. https://www.shadertoy.com/view/llySRh\n    O -= max(0.,2.-R.y/3.*d);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}