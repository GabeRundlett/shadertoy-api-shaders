{
    "Shader": {
        "info": {
            "date": "1511078155",
            "description": "Hash44 with floatBitsToInt and intBitsToFloat",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsfRH",
            "likes": 3,
            "name": "Hash44 with intBitsToFloat",
            "published": 3,
            "tags": [
                "hash44",
                "floatbitstoint",
                "intbitstofloat"
            ],
            "usePreview": 0,
            "username": "BeRo",
            "viewed": 817
        },
        "renderpass": [
            {
                "code": "// Hash44 with floatBitsToInt and intBitsToFloat by Benjamin \"BeRo\" Rosseaux, public domain\n\n// Loosely inspired from the ideas of http://trone.di.fc.ul.pt/images/6/61/PPAM11-paper.pdf but here accordingly \n// without expensive initialization with 20 rounds, so that it is here completely based on on-the-fly computations.\n\n// I'm not using floatBitsToUInt and uintBitsToFloat here, since it seems that it is missing at some drivers, therefore,\n// I'm using floatBitsToInt and intBitsToFloat together with ivec4 <=> uvec4 casting\n\nvec4 hash44(vec4 p){\n  \n  uvec4 v = uvec4(floatBitsToInt(p));\n    \n#if 1\n  // Pre-inter-mixing of all components with all components with a single ChaCha20 cipher round primitive iteration\n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 16u) | (v.w >> 16u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 12u) | (v.y >> 20u); \n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 8u) | (v.w >> 24u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 7u) | (v.y >> 25u); \n#endif\n    \n#if 1\n  // Full avalanche integer (re-)hashing with as far as possible equal bit distribution probability\n  // => http://burtleburtle.net/bob/hash/integer.html  \n  v -= (v << 6u);\n  v ^= (v >> 17u);\n  v -= (v << 9u);\n  v ^= (v << 4u);\n  v -= (v << 3u);\n  v ^= (v << 10u);\n  v ^= (v >> 15u);\n#endif\n    \n#if 1\n  // Post-inter-mixing of all components with all components with a single ChaCha20 cipher round primitive iteration\n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 16u) | (v.w >> 16u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 12u) | (v.y >> 20u); \n  v.x += v.y; v.w ^= v.x; v.w = (v.w << 8u) | (v.w >> 24u);\n  v.z += v.w; v.y ^= v.z; v.y = (v.y << 7u) | (v.y >> 25u); \n#endif\n    \n  return vec4(intBitsToFloat(ivec4(uvec4(((v >> 9u) & uvec4(0x007fffffu)) | uvec4(0x3f800000u))))) - vec4(1.0);\n    \n}      \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tfragColor = hash44(vec4(fragCoord.xy / iResolution.xy, iTime, 0.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}