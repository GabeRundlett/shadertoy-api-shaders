{
    "Shader": {
        "info": {
            "date": "1687874869",
            "description": "----> vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv <----\n----> CLICK BUFFER A, CHANNEL1 TO PLAY <----\n----> ^^^^^^^^^^^^^^^^^^^^^^^  <----",
            "flags": 96,
            "hasliked": 0,
            "id": "DdBcRK",
            "likes": 7,
            "name": "Accumulated Grandma Inversion",
            "published": 3,
            "tags": [
                "sound",
                "audio",
                "inversion",
                "visual",
                "grandma",
                "salvatore"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "// ALWAYS uses MAX_STEPS so has to be a low value\n#define MAX_STEPS 120\n#define SURF_DIST .001\n\nfloat getTime() { return texture(iChannel3, vec2(0)).a; }\n\nvec3 ori = vec3(0);\nvoid setOri() {\n    vec2 m = iMouse.xy / res;\n    ori = vec3(4.*cos(.91*iTime), \n               10. * cos(.31 * iTime), \n               5. * sin(.81 * iTime));\n    ori = vec3(4, 10., 12.);\n    \n    float th = 0.5 * tanh(0.002 * iTime);\n    ori.yz *= rot(0.45*iTime);// + th*thc(20., iTime) * pi + 1.);\n    ori.xz *= rot(0.4*iTime);// + th*ths(20., iTime) * pi);\n    \n    //ori.yz *= rot(-m.y*pi+1.);\n    //ori.xz *= rot(-m.x*2.*pi);\n}\n\nvec2 map(vec3 p) {\n    // Time is accumulate volume! (sum vol*vol)\n    float t = 0.025 * getTime();\n    \n    // Rescale with volume\n    float vol = texture(iChannel3, vec2(0)).b;    \n    p*=0.006-0.0035*vol;\n    \n    // Inversion\n    p /= dot(p,p);\n    \n    // Squash and rotate around changing axis\n    // using val*p.y - t distorts like a torus\n    float o = 2. * pi / 3.;\n    p /= 1. + 0.5 * cos(2.*(t+vec3(o,0,-o)));\n    p = erot(p.yzx, normalize(cos(4.*t+vec3(o,0,-o))), 0.*(1.-tanh(2.*t))*length(p) - 2.*t);\n    \n    // Rotate\n    p.xz *= rot(-pi/1.5+0.5*t);\n    p.yx *= rot(2.63*t);\n\n    // Volume textures\n    float mx = .5-.5*thc(12., 3.*t);\n    vec3 txPos =  (0.1*(1.-tanh(2.*t)) + mix(0.002, 0.003, mx)) * p;\n    float tx = texture(iChannel0, txPos).x;\n    float tx2 = texture(iChannel1, txPos).x;\n    tx *= 1.35*tx2;\n   \n    // Distance accumulated this step\n    float dori = dot(p-ori, p-ori);\n    float d = 2000. / dori * smoothstep(0.8, 0., tx);\n\n    // If close to origin, accumulate more distance\n    // to avoid getting stuck (blocking screen)\n    if (dori < 35. * 35.)\n        d += 0.8; // was 0.25\n \n    return vec2(d, tx);\n}\n\nvec3 march(vec3 ro, vec3 rd) {\t\n    float d = 0.;\n    float acc = 0.; // Accumulated distance\n    float mat = 0.; // Material (color)\n    for(int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * d;\n        vec2 m = map(p);\n        \n        // Randomise distance to avoid overstepping and banding\n        float h = hash(hash(p.x,p.z), p.y);\n        m.x *= 1. + 0.3 * h;\n\n        mat += 1.2 * m.y;\n        acc += 1.4 * m.x;\n        d += max(2.*SURF_DIST, sqrt(m.x) - 0.35 + 0.04 * h);\n    }   \n    return vec3(d, mat, acc);\n}\n\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{    \n    vec2 uv = (px - 0.5 * res) / res.y;\n\n    float t = 0.5*getTime();\n\n    setOri();\n    vec3 rd = dir(uv, ori, vec3(0, cos(0.4*t), 0), \n                  0.45 * tanh(0.02 * t)+ 0.6* tanh(10.5*t));\n    vec3 m = march(ori, rd);    \n    vec3 p = ori + rd * m.x;  \n    \n    // Does something (?)\n    vec3 col = vec3(1.-1./cosh(0.01*m.z));\n\n    // Mix green color with volume\n    float vol = texture(iChannel3, vec2(0)).g;\n    vec3 pl = pal(0.0045*m.y + 0.5*smoothstep(9., 11.,t)*floor(0.*10.*(uv.x+uv.y)+.05*t)\n                  + 0.02 -0.*vol*vol - 0.12*length(uv), \n                  0.8 * vec3(0,3,1)/3.);\n    float str = exp(-30.*vol*vol-0.00003*m.y*m.y); //was 0.00006\n    col = mix(col, pl, exp(-str*vol*m.y*m.y));\n    \n    // Make background whiter (probably better ways of doing this)\n    col = mix(mix(vec3(1),col,0.1), col, exp(-0.00002*m.z*m.z));\n    \n    // Border\n    float x = abs(abs(uv.x) - 0.5*res.x/res.y + 0.01);\n    float y = abs(abs(uv.y) - 0.5 + 0.01);\n    float sBorder = smoothstep(-1./res.y,1./res.y, 0.01-min(x,y));   \n    float fr = fract(10. * (uv * rot(-pi/4.)).x - 0.4* t) - 0.5;\n    float s2 = step(abs(fr), 0.2);\n    sBorder = mix(sBorder, 0.03, s2);\n    col = mix(col, vec3(0), 0.3 * sBorder);\n    \n    // Border dots\n    float d = mlength(abs(uv) - 0.5*vec2(res.x/res.y, 1) + 0.05);\n    float sDots = smoothstep(-1./res.y, 1./res.y, 0.04 * vol - d);\n    col = mix(col, vec3(1), 0.5 * sDots);\n\n    // Purple and black vignettes\n    col = mix(col, vec3(1,0,1), 0.14*length(uv));\n    col *= 1. - 0.25*dot(uv,uv);\n    \n    // Clicky test thing\n    vec2 ms = (iMouse.xy - 0.5 * res) / res.y;\n    if (iMouse.z > 0.) {\n        col = 1. - col;\n        //col = mix(1.-col, col, smoothstep(-0.02,0.02,uv.x-ms.x));\n        //uv *= rot(iTime);\n        //col = mix(1.-col, col, smoothstep(-0.02,0.02, uv.x-0.6*res.x/res.y*sin(2.*iTime)));\n        // col = mix(1.-col, col, smoothstep(-0.02,0.02, abs(uv.y-0.)-0.2+0.1*cos(uv.x*4.+iTime)-0.5-0.5*thc(9.,4.*pi*vol*vol)));\n    }\n    \n    // Gamma\n    col = pow(col, vec3(1./2.2));\n    \n    O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.1415926535\n#define res iResolution.xy\n#define tanh2(a) ((exp2(a)-1.)/(exp2(a)+1.))\n#define thc(a,b) tanh2(a*cos(b))/tanh2(a)\n#define ths(a,b) tanh2(a*sin(b))/tanh2(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n// from BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat mlength(vec2 a) { return max(abs(a.x), abs(a.y)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float getVol(float samples) {\n    float v = 0.;\n    for (float i = 0.; i < samples; i++) \n        v += texture(iChannel1, vec2((i + 0.5)/samples, 0.05)).x;\n    return v / samples;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n\n    //float sc = 32.;\n    //uv.x = floor(sc * uv.x + 0.5)/sc;\n    \n    vec4 ch0 = texture(iChannel0, uv);\n    float ch1 = 0.;\n    \n    // Number of samples in either direction\n    float n = 5.;\n    \n    // Sample spacing (value chosen because it looks good)\n    float s = 0.003;  //0.003 with n=5.\n    \n    // Average of samples, ch1\n    for (float i = -n; i <= n; i++) \n        ch1 = max(ch1, texture(iChannel1, vec2(uv.x + s * i, 0.25)).x);\n\n    // Alpha scales with uv.x, since bassy tones are more prevalent\n    float vol = getVol(40.);\n    float r = mix(ch0.r, ch1, 0.9); // individual frequencies (bad)\n    float g = mix(ch0.g, vol, 0.5); // lerp volume\n    float b = mix(ch0.b, vol, 0.2); // soft lerp volume\n    float a = ch0.a + g*g;          // accumulate volume to use as time\n    \n    // idea:\n    // acceleration += volume\n    // speed += acceleration\n    // speed *= friction\n    // time = speed    \n    \n    vec3 col = vec3(r, g, b);\n\n    fragColor = vec4(col, a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 33827,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/salvatoreganacci/step-grandma?si=9484ed33a276447fa67a7bf2cddd8610&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}