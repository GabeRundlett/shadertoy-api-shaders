{
    "Shader": {
        "info": {
            "date": "1664455853",
            "description": "Hi",
            "flags": 0,
            "hasliked": 0,
            "id": "NtGfDh",
            "likes": 8,
            "name": "Animated Vasarely",
            "published": 3,
            "tags": [
                "reproduction"
            ],
            "usePreview": 0,
            "username": "rcargou",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "#define N_tile 21.\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*18.5453);\n}\n\nvec3 cell_shade(in vec2 uv, vec2 id) {\n    vec3 res = vec3(.0);\n    float radius = length(uv);\n    vec2 t = vec2(iTime / 1.0);\n    float sound = texture(iChannel0, vec2(iTime)).x - 0.5;\n    float ring_dist = 0.5 + hash(id).x / 5.0 +  abs(hash(vec2(t) + id).y) * pow(abs(sound), 1.5) * .5;\n    float ring_thickness = 0.15;\n    vec3 col_interior = vec3(.15, .2, 0.3);\n\n    vec3 col_exterior =vec3( hash(vec2(id.y , 0.0)).x / 20.0, 0.0, 0.0)\n    + vec3( hash(vec2(id.x , 0.0)).x / 20.0, 0.0, 0.0);\n    col_exterior.x += 0.05;\n    //0.6 * pal( hash(id).x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25));\n    vec3 col_ring = vec3(0.15, 0., .4);\n    \n    float activation_ext = smoothstep(ring_dist+ring_thickness - 0.14, ring_dist+ring_thickness, radius);\n    float activation_int = (1.-smoothstep(ring_dist-0.14, ring_dist, radius));\n    float activation_ring = (1.-activation_int)*(1.-activation_ext);\n    \n    \n    res += col_interior*activation_int;\n    res += col_exterior*activation_ext;\n    res += col_ring*activation_ring;\n    \n    \n    return res;\n}\n\n\n\nvec3 sphere_warp(in vec2 uv) {\n\n//uv += floor(uv);\n    vec2 st = (uv+.5) * 2.;\n\n    vec2 corner = floor(st);\n    vec2 sphere_coord = (fract(st) - corner)/2.;\n    //return sphere_coord;\n    sphere_coord *= N_tile/(N_tile/2.-.5);\n    vec2 sphere_uv = normalize(sphere_coord)* ((asin(length(sphere_coord)) / 3.1415926));\n   \n    float mask = max(0., 1. - length(sphere_uv));\n    corner -= 0.5;\n    \n    sphere_uv.xy += vec2(iTime / 20.0) * normalize(-corner);\n    return vec3(sphere_uv, mask);\n}\n\nfloat mask(inout vec2  uv) {\n    \n    if (uv.x > 2.0 * 9.3 / 21.0) {\n        return 0.0;\n    }\n    if (uv.x < -0.11) {\n        return 0.0;\n    }\n    uv.x -= 8.15 / 21.0;\n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy-.5;\n    if (mask(uv) < 1.0) {\n        fragColor = vec4(0.1);\n        return ;\n    }\n    float center_scale = 1.0 + sin(iTime/2.0) / 2.0;\n    float angle = iTime / 2.0;\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    vec2 cell_uv = (fract(rot*center_scale*uv*(N_tile)+vec2(0.5,0.5))-.5)*2.;\n    vec2 cell_id = (floor(rot*center_scale*uv*(N_tile)+vec2(0.5,0.5))-.5)*2.;\n    vec3 sphere_uv = sphere_warp(uv);\n\n    vec2 sphere_cell_uv = (fract(sphere_uv.xy*N_tile)-.5)*2.;\n    vec2 sphere_cell_id = (floor(sphere_uv.xy*N_tile)-.5)*2.;\n    // Sphere texture\n    vec3 col = max(vec3(.0), cell_shade(sphere_cell_uv, sphere_cell_id / 21.)* pow(sphere_uv.z*1.5, 4.)); //LumiÃ¨re\n    \n    // Plane texture\n    col += 0.7 * cell_shade(cell_uv, cell_id)*step(0., -sphere_uv.z);\n    \n    vec2 plane_center = vec2(0.0);\n    \n    col +=  vec3(0.21) * pow(1.0 / (.5 + length(uv * 2.0 * center_scale)), 1.5);\n    fragColor = vec4(pow(col, vec3(1.1)) , 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}