{
    "Shader": {
        "info": {
            "date": "1664486130",
            "description": "Inspire by https://www.fondationvasarely.org/periode-folklore-planetaire/",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGfDD",
            "likes": 20,
            "name": "Vasarely Fancy",
            "published": 3,
            "tags": [
                "vasarely",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "#define N_tile 30.\n\nvec3 mix4ColorGradient(float ratio, vec3 start, vec3 mid1, vec3 mid2, vec3 end){\n    return\n    mix(\n        mix(\n            mix(start, mid1, ratio/.33), mix(mid1, mid2, (ratio - .33)/.66), \n            step(.33, ratio)), \n        mix(mid2, end, (ratio-.66)/.33), \n            step(.66, ratio));\n}\n\n\n\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(175.1,311.7)),\n             dot(p,vec2(260.5,752.3)));\n    return fract(sin(p+455.)*18.5453);\n}\n\n\nvec3 random_color(vec2 p)\n{\n    return vec3(hash(p).x, hash(2.*p).x, hash(3.*p).x);\n}\n\n\nvec3 make_cell(vec2 tile_coord, vec2 tile_idx, vec3 background_noise){\n    \n    vec3 res = vec3(0, 0, 0);\n    float length_coord = length(tile_coord);\n    float l_inf_coord = max(abs(tile_coord.x), abs(tile_coord.y));\n    float radius = (0.35 + hash(tile_idx).x*.5)/2.;\n    \n    float activation_int = 1.-smoothstep(radius-0.04, radius+0.04, length_coord);\n    float activation_contour = smoothstep(.47, .5, l_inf_coord);\n    \n    vec3 color_int = activation_int*random_color(tile_idx);\n    vec3 color_cell = (1.-activation_int)*background_noise*(1.-activation_contour);\n    vec3 color_ext = activation_contour*vec3(0., 0., 0.);\n\n    res = color_int+color_cell+color_ext;\n    return res;\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    float a = hash(i).x;\n    float b = hash(i + vec2(1.0, 0.0)).x;\n    float c = hash(i + vec2(0.0, 1.0)).x;\n    float d = hash(i + vec2(1.0, 1.0)).x;\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\nfloat fbm( in vec2 x)\n{    \n    float t = 0.0;\n    for( int i=0; i<6; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -1. );\n        t += a*noise(f*x);\n    }\n    return t*1.-.4;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy - .5;\n\n    vec2 pos = vec2(uv*6.0);\n\n    vec2 tile_coord = fract(uv*N_tile)-.5;\n    vec2 tile_idx = floor(uv*N_tile)-.5;\n    \n \n    // Use the noise function\n    float reshape = 16.;\n    \n    vec2 tmp = sin( vec2(0.27+iTime/2000.,0.23)*iTime + .1*length(tile_idx)*vec2(2.1,2.3))+tile_idx*.1;\n    \n    float n = fbm(tmp+fbm(tmp));\n    \n    \n    vec3 color_low = vec3(5., 0., 40.);\n    vec3 color_mid1 = vec3(30., 80., 20.);\n    vec3 color_mid2 = vec3(210., 20., 60.);\n    vec3 color_high = vec3(210., 230., 0.);\n    \n    \n    vec3 background_color = mix4ColorGradient(n, color_low, color_mid1, color_mid2, color_high);\n    background_color = normalize(background_color);\n    \n    \n    vec3 color = make_cell(tile_coord, tile_idx, background_color);\n    \n    \n\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}