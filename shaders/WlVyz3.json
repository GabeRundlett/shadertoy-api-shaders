{
    "Shader": {
        "info": {
            "date": "1611443350",
            "description": "Ray intersector for a 3D paraboloid.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVyz3",
            "likes": 5,
            "name": "Ray-Paraboloid Intersection (3D)",
            "published": 3,
            "tags": [
                "raytracing",
                "ray",
                "intersection",
                "quadratic",
                "paraboloid"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "/*\nI'm getting into ray intersectors now :)\nI'm currently working on an intersector for a trilinear surface and am down to a cubic!\n*/\n\n// Ray intersector for 3D paraboloid in the form: x^2/a^2 + z^2/b^2 - y = 0\nvec3 IntersectParaboloid3D(in vec3 ro, in vec3 rd, in float a, in float b) {\n    float invSqrA = 1.0 / (a * a);\n    float invSqrB = 1.0 / (b * b);\n\n    float ra = invSqrA * rd.x * rd.x + invSqrB * rd.z * rd.z;\n    float rb = invSqrA * 2.0 * ro.x * rd.x + invSqrB * 2.0 * ro.z * rd.z - rd.y;\n    float rc = invSqrA * ro.x * ro.x + invSqrB * ro.z * ro.z - ro.y;\n\n    vec3 intersect = vec3(0.0);\n\n    // If the discriminant is less than zero there are no (real) solutions\n    float discr = rb * rb - 4.0 * ra * rc;\n    if (discr > 0.0) {\n        float root = sqrt(discr);\n        float denom = 2.0 * ra;\n        float t1 =  (root - rb) / denom; // 1st root\n        float t2 = -(rb + root) / denom; // 2nd root\n        intersect = vec3(t1, t2, 1.0);\n    }\n\n    return intersect;\n}\n\nvec3 getParaboloidNormal3D(in vec3 p, in float a, in float b) {\n    float dx = 2.0 / (a * a) * p.x;\n    float dz = 2.0 / (b * b) * p.z;\n    return vec3(dx, -1.0, dz) / sqrt(dx * dx + dz * dz + 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n\n    vec2 mouse = vec2(0.0, 0.0);\n    if (iMouse.z > 0.0) {\n        mouse = (iMouse.xy - screenCenter) / iResolution.y * 3.14;\n    }\n\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 3.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float a = 2.25 + 2.0 * sin(iTime);\n    float b = 2.25 + 2.0 * cos(iTime);\n    vec3 intersect = IntersectParaboloid3D(ro, rd, a, b);\n    if (intersect.z > 0.5) {\n        vec3 n = getParaboloidNormal3D(ro + rd * min(intersect.x, intersect.y), a, b);\n        vec3 l = normalize(vec3(-1.0, -1.0, 1.0));\n\n        l.yz *= mat2(cp, -sp, sp, cp);\n        l.xz *= mat2(cy, -sy, sy, cy);\n\n        float lambertian = max(0.0, dot(n, l));\n        fragColor.r += lambertian;\n        if (lambertian > 0.0) {\n            fragColor.rgb += max(0.0, pow(max(0.0, dot(reflect(l, n), rd)), 32.0));\n        }\n    }\n\n    else {\n        fragColor.rgb += mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}