{
    "Shader": {
        "info": {
            "date": "1528405503",
            "description": "Trabeculum Reaction Diffusion based on Trabeculum from FabriceNeyret2 [url=https://www.shadertoy.com/view/4dKSDV]2D trabeculum[/url]\nclick anywhere on screen for start diffusion at mouse pos\nyou can unocmment the USE_TIME define in bufA for have sliding",
            "flags": 32,
            "hasliked": 0,
            "id": "MsKfDR",
            "likes": 22,
            "name": "Trabeculum Reaction Diffusion",
            "published": 3,
            "tags": [
                "diffusion",
                "trabeculum",
                "reaction"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 982
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float r = texture(iChannel0, uv).r;\n\n    fragColor = vec4(smoothstep(0.2,0.8,vec4(r)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FEED_RATE r * 0.05\n#define KILL_RATE r * 0.15\n#define DIFF vec2(0.8,0.2)\n#define ZOOM 1.0\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale, sampler2D sam, vec2 size)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > size.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > size.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = size.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = size.y;\n    \n\tvec2 uv = (fragCoord + pixel) / size.xy;\n    return texture(sam, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b, sampler2D sam, vec2 size) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a, sam, size) +\n        cell(fragCoord, vec2(0., st), dir, a, sam, size) +\n        cell(fragCoord, vec2(st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(-st, st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, st), dir, b, sam, size) -\n        cell(fragCoord, vec2(0., 0.), dir, 1., sam, size);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//#define USE_TIME\n\n//voronoi\n\n// simplification of https://www.shadertoy.com/view/lt2GDt\n// used for 3D trabeculum here : https://www.shadertoy.com/view/MlB3Wt\n\n#define H(n) fract( 1e4 * sin( n.x+n.y/.7 +vec2(1,12.34) ) )\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = vec2(400.), p,c;\n    U = 5.* (U+U - R ) / R.y\n        #ifdef USE_TIME\n        + iTime*.2\n    #endif\n        ;\n    float l;\n    \n    O += 1e9-O;  // --- Worley noise: return O.xyz = sorted distance to first 3 nodes\n    for (int k=0; k<9; k++) // replace loops i,j: -1..1\n    { // windows Angle bug with ,, instead of {}\n                p = ceil(U) + vec2(k-k/3*3,k/3)-2., // cell id = floor(U)+vec2(i,j)\n                l = dot(c = H(p) + p-U , c);        // distance^2 to its node\n                  l < O.x  ? O.yz=O.xy, O.x=l       // ordered 3 min distances\n                : l < O.y  ? O.z =O.y , O.y=l \n                : l < O.z  ?            O.z=l : l;\n    }\n    O = 5.*sqrt(O); \n    \n    \n    // --- smooth distance to borders and nodes\n    \n  l = 1./(1./(O.y-O.x)+1./(O.z-O.x)); // Formula (c) Fabrice NEYRET - BSD3:mention author.\n  O += smoothstep(.0,.3, l-.5) -O;\n  //  O -= O.x;  O += 4.*( O.y/(O.y/O.z+1.) - .5 ) - O;  // simplified form\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Reaction Diffusion\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n   \tif (iFrame < 10)\n    {\n    \tfragColor = vec4(length((uv*2.-1.)*50.));\n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tvec2 mo = iMouse.xy / iResolution.xy / ZOOM;\n    \tfragColor = texture(iChannel0, uv);\n        if (length(uv-mo) < 0.003)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        float r = texture(iChannel1, uv).r;\n        \n        vec2 diffusionCoef = DIFF;\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (ab.y + 1. - ab.x);\n        float kill = killCoef * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,-1.,1.),ab*r);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}