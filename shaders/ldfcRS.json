{
    "Shader": {
        "info": {
            "date": "1488641442",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "ldfcRS",
            "likes": 15,
            "name": "isovalues",
            "published": 3,
            "tags": [
                "noise",
                "contour"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 933
        },
        "renderpass": [
            {
                "code": "// --- noise from procedural pseudo-Perlin (better but not so nice derivatives) ---------\n                    // ( adapted from IQ )\n\nfloat noise3( vec3 x ) {\n    vec3 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( hash3(p+vec3(0,0,0)), hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( hash3(p+vec3(0,1,0)), hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( hash3(p+vec3(0,0,1)), hash3(p+vec3(1,0,1)),f.x),       \n                    mix( hash3(p+vec3(0,1,1)), hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2. // pseudoperlin improvement from foxes idea \n\n\n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{\n    U *= 8./iResolution.y;\n    float n = noise(vec3(U,.1*iTime)),\n          v = sin(6.28*10.*n);\n    v = smoothstep(1.,0., .5*abs(v)/fwidth(v));\n\tO = v * (.5+.5*sin(12.*n+vec4(0,2.1,-2.1,0)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}