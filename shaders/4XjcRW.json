{
    "Shader": {
        "info": {
            "date": "1727039001",
            "description": "originals https://www.shadertoy.com/view/stsXDl https://www.shadertoy.com/view/43fcWS",
            "flags": 0,
            "hasliked": 0,
            "id": "4XjcRW",
            "likes": 1,
            "name": "matrix room",
            "published": 3,
            "tags": [
                "fractal",
                "matrix",
                "way"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvec3 pcg3d(vec3 p){\n    uvec3 q = floatBitsToUint(p)*1234567890u+123456789u;\n    q.x +=q.y*q.z; q.y +=q.x*q.z; q.z+=q.x*q.y;\n    q^=q>>16u;\n    q.x +=q.y*q.z; q.y +=q.x*q.z; q.z+=q.x*q.y;\n    return vec3(q)/float(-1U);\n}\n#define PI 3.14159265359\n#define S 4.\n// the wave amplitude\n#define A 1.9\n// the wave lenght\n#define WAVEL 1.1\n\n\n// taken from thebookofshaders.com\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n// taken from thebookofshaderx.com\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nvec2 cartesianToPolar(vec2 cartesian) {\n    float r = length(cartesian);          \n    float theta = atan(cartesian.y, cartesian.x); \n    return vec2(r, theta);  \n    \n}\n\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    \n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n     p.x *= iResolution.x/iResolution.y;\n    //uv = sin(iTime) * uv +uv * cos(iTime);\n    \n   // uv = rotate2d( sin(iTime)) * uv;\n    \n   \n    //uv = cartesianToPolar(uv);\n    vec2 wave1Center = vec2(-1., -0.5);\n    //vec2 wave2Center = vec2(1., 0.5);\n    wave1Center= vec2(0.);\n    \n    float disFromWave1Center = distance( p.xy, wave1Center);\n    //float disFromWave2Center = distance(uv, wave2Center);\n    \n    float wave1 =  A * sin(disFromWave1Center / WAVEL - iTime / WAVEL);\n    //float wave2 =  A * sin(disFromWave2Center / WAVEL - iTime / WAVEL) ;\n \n   \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.5,0.1,3.),H(g*.1),.8)*10./e/8e3\n    )\n    {\n        p=g*d;\n        \n       float d = length(p.xy)-.05*abs(cos(wave1*1.75));\n  \n   \n          vec3 rnd = pcg3d(vec3(i));\n         \n        p.z+=rnd.x+(iTime);\n      p.x  += sin(i*6.28+iTime*0.01*(.1+i*.1))*.6;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n         p.z += (rnd.x-0.5)*1.;\n        s=2.;\n            p.y += (rnd.y-0.5)*1.;\n              \n        for(int i=0;i++<8;){\n            p=.5-abs(p);\n           \n             p.x += (rnd.z-0.5)*1.;\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n             p.z<p.y?p=p.yxz:p;\n            s*=e=1.7+sin(iTime*.00)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 );\n         }\n         g+=e=length(p.yzz)/s;\n         g+=e=length(p.zy)/s;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}