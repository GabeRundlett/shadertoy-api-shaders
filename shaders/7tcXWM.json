{
    "Shader": {
        "info": {
            "date": "1639217295",
            "description": "some single  and efficient procedural patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "7tcXWM",
            "likes": 8,
            "name": "procedural pattern",
            "published": 3,
            "tags": [
                "hexagon",
                "pattern",
                "checkboard"
            ],
            "usePreview": 0,
            "username": "WingStone",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "#define AA 1\n\n// smoothfloor ref: https://www.shadertoy.com/view/tsyXzV\n#if AA\n    #  define sfloor(x) ( floor(x-pix/2.) + max( 0., 1.-fract(-x+pix/2.) / pix ) ) \n    #  define sfloor2(x) ( floor(x-vec2(pix/2.)) + max( vec2(0.), vec2(1.)-fract(-x+vec2(pix/2.)) / vec2(pix) ) ) \n    #  define sfloor3(x) ( floor(x-vec3(pix/2.)) + max( vec3(0.), vec3(1.)-fract(-x+vec3(pix/2.)) / vec3(pix) ) ) \n#else\n    #  define sfloor(x) floor(x)\n    #  define sfloor2(x) floor(x)\n    #  define sfloor3(x) floor(x)\n#endif\n\n\nfloat CheckBoard(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    vec2 id = floor(uv);\n    \n    float factor = mod(id.x+id.y, 2.0);\n    \n    return factor;\n}\n\nfloat Vertical(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    vec2 id = floor(uv);\n    \n    float factor = mod(id.x, 2.0);\n    \n    return factor;\n}\n\nfloat Diamond(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    pix *= 10.0;\n    vec2 newuv = vec2(0.0);\n    newuv.x = uv.x - uv.y;\n    newuv.y = uv.x + uv.y;\n    \n    vec2 id = sfloor2(newuv);\n    \n    float factor = mod(id.x+id.y, 2.0);\n    \n    return factor;\n}\n\nfloat Slash(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    pix *= 10.0;\n    vec2 newuv = vec2(0.0);\n    newuv.x = uv.x - uv.y;\n    newuv.y = uv.x + uv.y;\n    \n    vec2 id = sfloor2(newuv);\n    \n    float factor = mod(id.x, 2.0);\n    \n    return factor;\n}\n\n// ref https://www.shadertoy.com/view/4dKXR3\nfloat Triangle(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    pix *= 10.0;\n    vec2 U = uv;               // centered coords\n    \n    U *= mat2(1,-1./1.73, 0,2./1.73);      // conversion to\n    vec3 g = vec3(U,1.-U.x-U.y);          // hexagonal coordinates\n    vec3 id = sfloor3(g);                         // cell id\n    \n    float factor = id.x + id.y + id.z+1.0;\n    \n    return factor;\n}\n\n// ref https://www.shadertoy.com/view/4dKXR3\nfloat Hexagon1(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    pix *= 10.0;\n    vec2 U = uv;               // centered coords\n    \n    U *= mat2(1,-1./1.73, 0,2./1.73);      // conversion to\n    vec3 g = vec3(U,1.-U.x-U.y);           // hexagonal coordinates\n    \n    g = fract(g);                              // diamond coords\n    if (length(g)>1.) g = 1.-g;                // barycentric coords\n    vec3 g2 = abs(2.*fract(g)-1.);                  // distance to borders\n    g -= 0.5;\n    \n    #if AA\n        float threshold = pix/1.73;\n        float factor = smoothstep(0.0, 1.5,g.x/min(threshold, fwidth(g.x)))\n            + smoothstep(0.0, 1.5, g.y/min(threshold, fwidth(g.y)))\n            + smoothstep(0.0, 1.5, g.z/min(threshold, fwidth(g.z)));\n    #else\n        float factor = step(0.0,g.x)+step(0.0,g.y)+step(0.0,g.z);\n    #endif\n    \n    return factor;\n}\n\nfloat Hexagon2(vec2 uv, float pix)\n{\n    float factor = 1.0 - Hexagon1(uv, pix);\n    \n    return factor;\n}\n\nfloat Circle(vec2 uv, float pix)\n{\n    uv *= 10.0;\n    \n    vec2 id = floor(uv);\n    uv = fract(uv)*2.0-1.0;\n    \n    float len = length(uv)-0.9;\n    \n    #if AA\n        float factor = smoothstep(0.0, 1.5, len/fwidth(len)); // aa\n    #else\n        float factor = step(0.0, len);\n    #endif\n    \n    factor = mod(id.x+id.y, 2.0)>0.5 ? factor : 1.0-factor;\n    return factor;\n}\n\t\nfloat Pattern(vec2 uv, float pix)\n{\n   // return Triangle(uv, pix);\n    float patternNumber = 8.0;\n    \n    float time = fract(iTime/patternNumber)*patternNumber;\n    \n    if(time < 1.0)\n        return CheckBoard(uv, pix);\n        \n    if(time < 2.0)\n        return Vertical(uv, pix);\n        \n    if(time < 3.0)\n        return Diamond(uv, pix);\n        \n    if(time < 4.0)\n        return Slash(uv, pix);\n        \n    if(time < 5.0)\n        return Triangle(uv, pix);\n        \n    if(time < 6.0)\n        return Hexagon1(uv, pix);\n        \n    if(time < 7.0)\n        return Hexagon2(uv, pix);\n        \n    if(time < patternNumber)\n        return Circle(uv, pix);\n        \n    return 0.0;\n}\n    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float pix = 1. / iResolution.y;    // pixel width \n    float factor = Pattern(uv, pix);\n    \n    vec3 col = vec3(factor);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}