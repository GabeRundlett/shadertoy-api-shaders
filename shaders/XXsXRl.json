{
    "Shader": {
        "info": {
            "date": "1709838337",
            "description": "This is my first cool shader, i hope you enjoy it!",
            "flags": 0,
            "hasliked": 0,
            "id": "XXsXRl",
            "likes": 10,
            "name": "PS2 Startup Screen",
            "published": 3,
            "tags": [
                "raymarch",
                "abstract",
                "ps2",
                "startup"
            ],
            "usePreview": 1,
            "username": "Rex109",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define SURF_BIAS 1.0;\n#define TAU 6.283185\n#define PI 3.141592\n\n#define LIGHT_RADIUS 2.\n\n#define SCENE_OBJ_COUNT 5\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat Hash21(vec2 p)\n{\n    p = fract(p*vec2(443.53, 331.13));\n    p += dot(p, p+2444.123);\n    return fract(p.x*p.y);\n}\n\nstruct SDF {\n  float dist;\n  int materialID;\n};\n\nSDF minSDF(SDF[SCENE_OBJ_COUNT] scene)\n{\n    SDF min_s = scene[0];\n    for(int i = 1; i < SCENE_OBJ_COUNT; i++)\n        if(scene[i].dist < min_s.dist)\n            min_s = scene[i];\n            \n    return min_s;\n}\n\nvec2 pillar_id;\nSDF GetDist(vec3 p, vec3 rd) {\n    SDF scene[SCENE_OBJ_COUNT]; \n    \n    //Glass Cubes\n    vec3 new_position = p-vec3(-1.,8.0,2.);\n    new_position.xz *= Rot(iTime*0.1);\n    new_position.zy *= Rot(iTime*0.1);\n    \n    scene[0] = SDF(sdBox(new_position, vec3(0.6)), 0);\n    \n    new_position = p-vec3(4.,7.0,1.);\n    new_position.xz *= Rot(-iTime*0.15);\n    new_position.zy *= Rot(iTime*0.1);\n    \n    scene[1] = SDF(sdBox(new_position, vec3(0.6)), 0);\n    \n    new_position = p-vec3(-3.,6.0,-2);\n    new_position.xz *= Rot(iTime*0.2);\n    new_position.zy *= Rot(-iTime*0.12);\n    \n    scene[2] = SDF(sdBox(new_position, vec3(0.6)), 0);\n    \n    //Pillars\n    pillar_id = floor(p.xz);\n    p.xz = fract(p.xz)-.5;\n    \n    vec2 rC = ((2.0 * step(0.0, rd.xz) - 1.0) * vec2(0.5) - p.xz) / rd.xz;\n    scene[3] = SDF(min(rC.x, rC.y) + 0.01, 1);\n    \n    if(pillar_id==vec2(0,0)) pillar_id = vec2(1.,0.); //Little fix for the missing cube at the center :D\n    \n    float height = Hash21(pillar_id*6.)*6.;\n    scene[4] = SDF(sdBox(p, vec3(.42, height > 1. && dot(pillar_id,pillar_id) < 81.0 ? height : -1.,.42)), 1);\n    \n    return minSDF(scene);\n}\n\nSDF RayMarch(vec3 ro, vec3 rd, vec2 uv, float side) {\n\tSDF dO=SDF(0.,0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO.dist;\n        SDF dS = GetDist(p, rd);\n        dS.dist *= side;\n        dO.dist += dS.dist*SURF_BIAS;\n        dO.materialID = dS.materialID;\n        if(dO.dist>MAX_DIST || abs(dS.dist)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p, vec3 rd) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p, rd).dist - vec3(GetDist(p-e.xyy, rd).dist , GetDist(p-e.yxy, rd).dist,GetDist(p-e.yyx, rd).dist);\n    \n    return normalize(n);\n}\n\nfloat a = 0.2;\nfloat b = 0.5;\n\nvec3 applyFog(  vec3  col, float t, vec3  ro, vec3  rd, vec2 uv )\n{\n    float fogAmount = (a/b) * exp(-ro.y*b) * (1.0-exp(-t*rd.y*b))/rd.y;\n    vec3  fogColor  = vec3(0.439,0.494,1.000) * (1.-length(uv*LIGHT_RADIUS));\n    return mix( col, fogColor, fogAmount );\n}\n\nvec3 mapColor(float i, float j)\n{\n    if(i == 0.)\n        return vec3(1.,.0,.0)*j;\n    \n    if(i == 1.)\n        return vec3(0.,1.,.0)*j;\n        \n    if(i == 2.)\n        return vec3(0.200,0.000,1.000)*j;\n        \n    return vec3(1.,.0,1.)*j;\n}\n\nvec3 Render(inout vec3 ro, inout vec3 rd, vec2 uv)\n{\n    vec3 col = vec3(0.020,0.043,0.239) * (1.-length(uv*LIGHT_RADIUS));\n    \n    SDF sdf = RayMarch(ro, rd, uv, 1.);\n    \n    if(sdf.dist<MAX_DIST) {\n        vec3 p = ro + rd * sdf.dist;\n        vec3 n = GetNormal(p, rd);\n        \n        float dif = dot(n, normalize(vec3(0,1,0)))*.5+.5;\n        col = vec3(dif+0.1);\n        \n        if(sdf.materialID == 1)\n        {\n            col *= vec3(0.541,0.600,1.000)*clamp(Hash21(pillar_id), 0.3, 1.);\n            float colXZ = texture(iChannel0, p.xz*vec2(.1,1.)).r*0.3+0.7;\n            float colYZ = texture(iChannel0, p.yz*vec2(.01,1.)).r*0.3+0.7;\n            float colXY = texture(iChannel0, p.xy*vec2(1.,.01)).r*0.3+0.7;\n            n = abs(n);\n            col *= colYZ*n.x + colXZ*n.y + colXY*n.z;\n            col *= applyFog(col, sdf.dist, ro, rd, uv);\n        }\n        else\n        {\n            float IOR = 1.1;\n            vec3 r = refract(rd, n, 1./IOR);\n            \n            vec3 rdIn = refract(rd, n, 1./IOR); // ray dir when entering\n        \n            vec3 pEnter = p - n*SURF_DIST*3.;\n            float dIn = RayMarch(pEnter, rdIn, uv, -1.).dist; // inside the object\n\n            vec3 pExit = pEnter + rdIn * dIn; // 3d position of exit\n            vec3 nExit = -GetNormal(pExit, rdIn); \n\n            vec3 rdOut = refract(rdIn, nExit, IOR);\n            if(dot(rdOut, rdOut)==0.) rdOut = reflect(rdIn, nExit);\n            \n            ro = pExit+rdOut*2.;\n            rd = rdOut;\n            col *= vec3(0.008,0.008,0.051);\n        }\n    }\n    \n    //Particles\n    \n    for(float j = 0.; j < 50.; j++)\n    {\n        for(float i = 0.; i < 4.; i++)\n        {\n            vec2 lightuv = uv + vec2(cos((iTime-j*0.02)*0.2+i*4000.)*0.8, sin((iTime-j*0.02)*0.5+i*5000.)*0.45);\n            float cd = dot(lightuv, lightuv);\n            float light = .000015/cd;\n\n            col += mapColor(i,(50.-j)*0.002)*light*smoothstep(.0,.5,sdf.dist+2.*i);\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.5, 14.+cos(iTime*0.1), 0.5);\n\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    rd.zy *= Rot(-PI/2.);\n    rd.xz *= Rot(cos(iTime*0.15)*0.5);\n    \n    vec3 col = Render(ro, rd, uv);\n    vec3 refraction = Render(ro, rd, uv);\n    \n    col += refraction;\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}