{
    "Shader": {
        "info": {
            "date": "1608217108",
            "description": "paisaje-2d n4",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGfDt",
            "likes": 4,
            "name": "paisaje-2d n4",
            "published": 3,
            "tags": [
                "paisaje2dn4"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "//por jorge2017a ---17/dic/2020\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1; else return d2; }\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{ if  (-d1.x<d2.x) return d1; else  return d2; }\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{  if (d1.x>d2.x)\treturn d1; else return d2;  }\n\nvec2 opS(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\nfloat sdCirc(vec2 p, float r)\n{ return length(p)-r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n\nvec2 BloqueSimple(vec2 p)\n{ \n    vec2 resp=vec2(9999.9,-1.0);\n    float b1= sdBox(p-vec2(0.0), vec2(0.4,0.2) );\n    float b1v= sdBox(p-vec2(0.0,0.19), vec2(0.4,0.02) );\n    float b1h= sdBox(p-vec2(-0.38,0.0), vec2(0.02,0.2) );\n    b1=opS(b1v, b1);\n    b1=opS(b1h, b1);\n    resp=opU2(vec2(b1, 38.0), resp);\n    resp=opU2(vec2(b1v, 1.0), resp);\n    resp=opU2(vec2(b1h, 1.0), resp);\n    return resp;\n}\n\nvec2 nubes(vec2 p)\n{   vec2 resp=vec2(9999.9,-1.0);\n    float c1= sdCirc(p-vec2(0.0,0.05), 0.105);\n    float c2= sdCirc(p-vec2(0.15,0.02), 0.065);\n    float c3= sdCirc(p-vec2(-0.15,0.02), 0.065);\n    float b1=sdBox(p-vec2(0.0,-0.05), vec2(0.24,0.045 ) );\n    float ctodo;\n    ctodo=opU(c1,c2);\n    ctodo=opU(c3,ctodo);\n    ctodo=opS(b1, ctodo);\n    resp=opU2(vec2(ctodo,1.0 ),resp);\n\treturn resp;\n    \n}\n\n\nvec2 PastoTrapezoid(vec2 p)\n{   vec2 resp=vec2(9999.9,-1.0);\n     p=rotate2d(p-vec2(0.0,-0.73), radians(180.0));\n    float sdt1= sdTrapezoid( p, 0.01, 0.15, 0.15 );\n    resp=opU2(vec2(sdt1,12.0 ),resp);\n\treturn resp;\n}\n\n\nvec2 LLuvia(vec2 p)\n{   vec2 resp=vec2(9999.9,-1.0);\n    p=rotate2d(p-vec2(0.0,-0.73), radians(140.0));\n    vec2 c =vec2(0.5,0.5 );\n    vec2 pp=opRep2D(p-vec2(0.0,iTime), c);\n    float sb1= sdBox( pp,vec2(0.005,0.03) );\n    resp=opU2(vec2(sb1,0.0 ),resp);\n\treturn resp;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //p*= 4.0;\n    p.x+=iTime;\n\tvec3 col = vec3(0.280,0.320,1.0);\n    \n    vec2 pp=p*4.0;\n    vec2 pp1=p*0.5;\n    vec2 pp4=p*0.35;\n    \n    vec2 c=vec2(0.83,11.0);\n    vec2 p1= opRep2D(pp,c  );\n    vec2 c2=vec2(0.83,10.0);\n    vec2 p2= opRep2D(pp1,c2  );\n    vec2 c3=vec2(0.83,15.0);\n    vec2 p3= opRep2D(pp1-vec2(0.2,0.0),c2  );\n    vec2 c4=vec2(0.83,15.0);\n    vec2 p4= opRep2D(pp4-vec2(-0.3,0.2),c2  );\n    vec2 c5=vec2(0.3,11.0);\n    vec2 p5= opRep2D(p,c5  );\n    \n    float ypos=-3.8;\n    \n    vec2 b2=BloqueSimple(p1-vec2(0.0,ypos));\n    vec2 N1=nubes(p2-vec2(0.0,0.2));\n    vec2 N2=nubes(p3-vec2(0.0,0.1));\n    vec2 N3=nubes(p4-vec2(0.0,0.0));\n    \n    vec2 Pa1= PastoTrapezoid(p5);\n    vec2 ll1= LLuvia(p);\n    \n    vec3 cb2= getColorf(b2.y);\n    vec3 cN1= getColorf(N1.y);\n    vec3 cN2= getColorf(N2.y);\n    vec3 cN3= getColorf(N3.y);\n    vec3 cPa1=getColorf(Pa1.y);\n    vec3 cll1=getColorf(ll1.y);\n    \n    col= DibujoConBorde(p, N3.x, cN3,  col);\n    col= DibujoConBorde(p, b2.x, cb2,  col);\n    col= DibujoConBorde(p, N1.x, cN1,  col);\n    col= DibujoConBorde(p, N2.x, cN2,  col);\n    col= DibujoConBorde(p, Pa1.x, cPa1,  col);\n    col= DibujoConBorde(p, ll1.x, cll1,  col);\n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.,  //37 //marron o cafe\nvec3(0.8, 0.1, 0.1) //rojo //38\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}