{
    "Shader": {
        "info": {
            "date": "1572193580",
            "description": "A small shader I did yeasterday at Cookie Demoparty - Paris, France.\nGreetings to all the folks in da place and to Excess, the master of the game!\n\nhttp://www.pouet.net/prod.php?which=56218\n",
            "flags": 96,
            "hasliked": 0,
            "id": "tsdSW7",
            "likes": 14,
            "name": "Cookie Guardians",
            "published": 3,
            "tags": [
                "demoscene",
                "shadershowdown",
                "cookieparty",
                "excess",
                "easterguardian"
            ],
            "usePreview": 0,
            "username": "XT95",
            "viewed": 700
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0,uv);\n    col += texture(iChannel1, uv)*0.5;\n    \n    col = pow(col, vec4(.4545));\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define saturate(x) clamp(x,0.,1.)\n#define PI 3.14159265\n\nfloat box(vec3 p) {\n    vec3 q = abs(p)-.3;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)), 0.);\n}\n\nfloat map(vec3 p) {\n    vec3 pp = p;\n    p = mod(p,1.)-.5;\n    float d = box(p);\n    d = max(d, pp.y-1.);\n    return d;\n}\n\nvec3 normal(vec3 p) {\n    vec2 eps = vec2(0.001, 0.);\n    float d = map(p);\n    return normalize(vec3(d-map(p-eps.xyy),d-map(p-eps.yxy),d-map(p-eps.yyx)));\n}\n\nfloat rand(float s) {\n    return fract(sin(s)*42358.);\n}\nvec3 albedo(vec3 p) {\n    vec2 id = floor(p.xz);\n    float s = saturate(cos(length(id)+iTime*2.)*2.-1.);\n    \n    vec3 c = vec3(.2,.2,1.) * s;\n    if (fract(iTime/13.) > .5) {\n    \tc = vec3(.1,.2+rand(id.x)*.4,1.)*3. * saturate(rand(id.y+rand(id.x)+floor(iTime*2.)*.1)*9.-8.) * fract(iTime*2.) * (1.-fract(iTime*2.));\n    }\n    \n    c *= step(0.4, 1.-abs(p.y-.5));\n    c *= rand(id.x) + rand(id.y) + .5;\n    return c;\n}\n\nmat2 rot(float v) {\n    float a = cos(v);\n    float b = sin(v);\n    return mat2(a,b,-b,a);\n}\n\nvoid cameraPath(inout vec3 ro, inout vec3 rd) {\n    float t = mod(floor(iTime/10.),5.);\n    \n    if (t == 0.) {\n    \tro = vec3(-5.*cos(iTime*.1),5., -3.);\n        rd.yz = rot(PI*.3) * rd.yz;\n    } else if ( t == 2.) {\n    \tro = vec3(0.,3.*cos(iTime*.2)+3., iTime*10.);\n        rd.xy = rot(iTime*.1) * rd.xy;\n        rd.zy = rot(-.8) * rd.zy;\n    } else  {\n    \tro = vec3(0.,2., -iTime*3.);\n        rd.xy = rot(-iTime*.01) * rd.xy;\n        rd = -abs(rd);\n        rd.xz = rot(iTime*.05) * rd.xz;\n        rd = -abs(rd);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.,2., -3.);\n    vec3 rd = normalize(vec3(uv*2.-1., 2.-length(uv*2.-1.)*.3));\n    cameraPath(ro,rd);\n    vec3 p = ro;\n    for(int i=0; i<128; i++) {\n        p += rd * map(p);\n    }\n    vec3 n = normal(p);\n    \n    \n    vec3 col = vec3(0.);\n\tcol += abs(n.y)*.002;\n    col += albedo(p)*2.;\n    col += albedo(p+n) * 5. * exp(-length(fract(p)*2.-1.)*4.); // cheap GI :)\n    \n    col = mix(col, vec3(0.), saturate(length(p-ro)*0.05));\n    fragColor = vec4(max(col,vec3(0.)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 20127,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/gloom/excess-easter-guardians?in=gloom/sets/old-demo-tracks"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 offset = vec2(0.002, 0.);\n    \n\tvec4 col = vec4(0.);\n    float w = 1.;\n    float weight = 0.;\n    for (float i=1.; i<20.; i++) {\n        w *= .8;\n        col += max(vec4(0.), textureLod(iChannel0,uv - offset * i, 0.)-.05) * w;\n        col += max(vec4(0.), textureLod(iChannel0,uv + offset * i, 0.)-.05) * w;\n        weight += w;\n    }\n    fragColor = col/weight*.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 offset = vec2(0., 0.002);\n    \n\tvec4 col = vec4(0.);\n    float w = 1.;\n    float weight = 0.;\n    for (float i=1.; i<20.; i++) {\n        w *= .8;\n        col += max(vec4(0.), textureLod(iChannel0,uv - offset * i, 0.)) * w;\n        col += max(vec4(0.), textureLod(iChannel0,uv + offset * i, 0.)) * w;\n        weight += w;\n    }\n    fragColor = col/weight*.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}