{
    "Shader": {
        "info": {
            "date": "1711845310",
            "description": "Putting the process of one-point perspective into code.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3f3WM",
            "likes": 31,
            "name": "One-Point Perspective",
            "published": 3,
            "tags": [
                "2d",
                "line",
                "drawing"
            ],
            "usePreview": 1,
            "username": "TheBen27",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "// iq\nfloat sdQuad( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3 )\n{\n\tvec2 e0 = p1 - p0; vec2 v0 = p - p0;\n\tvec2 e1 = p2 - p1; vec2 v1 = p - p1;\n\tvec2 e2 = p3 - p2; vec2 v2 = p - p2;\n\tvec2 e3 = p0 - p3; vec2 v3 = p - p3;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    vec2 ds = min( min( vec2( dot( pq0, pq0 ), v0.x*e0.y-v0.y*e0.x ),\n                        vec2( dot( pq1, pq1 ), v1.x*e1.y-v1.y*e1.x )),\n                   min( vec2( dot( pq2, pq2 ), v2.x*e2.y-v2.y*e2.x ),\n                        vec2( dot( pq3, pq3 ), v3.x*e3.y-v3.y*e3.x ) ));\n\n    float d = sqrt(ds.x);\n\n\treturn (ds.y>0.0) ? -d : d;\n}\n\n// iq\nfloat sdSegment(\n    in vec2 p,\n    in vec2 a,\n    in vec2 b,\n    in float amt,\n    out float h\n) {\n    // find p and b relative to a\n    // (in other words, pretend that a=0)\n    vec2 pa = p-a, ba = b-a;\n    // h = project pa along ba, I think\n    // clamp based on where you are in the line\n    h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, amt );\n    return length( pa - ba*h );\n}\n\nfloat line(vec2 p, vec2 a, vec2 b, float amt, float thickness, float opacity) {\n    float smoothness = 0.001;\n    float h;\n    float sdf = sdSegment(p, a, b, amt, h);\n    \n    float paper = texture(iChannel0, p).r;\n    float sketchTime = 0.1 * floor(max(0.0, iTime - 5.0) * 6.0) / 6.0;\n    float strength = texture(iChannel0, vec2(h, sketchTime)).r;\n    \n    smoothness += paper * thickness * 2.0;\n    float mainLine = smoothstep(\n        thickness - smoothness,\n        thickness + smoothness,\n        sdf\n    );\n    mainLine = max(mainLine, 1.0 - smoothstep(0.0, 0.01, amt));\n    \n    float texturing = paper * strength;\n    texturing = min(1.0, opacity + texturing);\n    \n    return clamp(1.0 - (texturing * (1.0 - mainLine)), 0.0, 1.0);\n}\n\nfloat point(vec2 p, vec2 c, float r, float o) {\n    float sdf = distance(p, c) - r;\n    float smoothness = 0.001;\n    \n    float paper = texture(iChannel0, p).r;\n    smoothness += paper * r * 2.0;\n    \n    float s = smoothstep(-smoothness, smoothness, sdf);\n    o = o - 0.5;\n    float texturing = min(1.0, o + paper);\n    \n    return 1.0 - (texturing * (1.0 - s));\n}\n\nvoid eraser(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d, float amt, inout float canvas) {\n    vec2 faceCenter = (a + b + c + d) / 4.0;\n    float frontFace = sdQuad((uv - faceCenter) * 1.1 + faceCenter, a, b, c, d);\n    \n    frontFace = 1.0 - smoothstep(0.0, 0.005, frontFace);\n    float pattern = texture(iChannel0, uv * 0.4).x * 0.6 + texture(iChannel0, uv * 24.0).x * 0.4;\n    pattern = pattern * 0.2 + 0.8;\n    frontFace *= pattern;\n    frontFace *= amt;\n    canvas = 1.0 - ((1.0 - canvas) * (1.0 - frontFace));\n}\n\nfloat timingLine(float time, float start) {\n    return smoothstep(start, start + 1.0, time);\n}\n\nfloat timingPoint(float time, float start) {\n    return smoothstep(start, start + 0.1, time);\n}\n\nfloat timingEraser(float time, float start) {\n    return smoothstep(start, start + 1.0, time);\n}\n\nfloat box(\n    vec2 uv,\n    vec2 center,\n    vec2 size,\n    float z, // z position of near face\n    float depth, // z position of far face\n    vec2 horizonPoint,\n    float startTime,\n    float speed,\n    inout float canvas\n) {\n    float time = speed * max(iTime - startTime, 0.0);\n    vec2 boxCenter = center;\n    \n    vec2 btl = mix(boxCenter + -size, horizonPoint, z);\n    vec2 btr = mix(boxCenter + size * vec2(1.0, -1.0), horizonPoint, z);\n    vec2 bbr = mix(boxCenter + size, horizonPoint, z);\n    vec2 bbl = mix(boxCenter + size * vec2(-1.0, 1.0), horizonPoint, z);\n    \n    vec2 ibtl = mix(btl, horizonPoint, depth);\n    vec2 ibtr = mix(btr, horizonPoint, depth);\n    vec2 ibbr = mix(bbr, horizonPoint, depth);\n    vec2 ibbl = mix(bbl, horizonPoint, depth);\n    \n    #define LINE(a,b,s,t,o) line(uv,a,b,timingLine(time,s),t,o)\n    \n    // Lines to horizon\n    float ho = -0.4 + 0.5 * (1.0 - smoothstep(13.0, 14.0, time));\n    canvas *= LINE(\n        btl,\n        horizonPoint,\n        4.0,\n        0.003,\n        ho\n    );\n    canvas *= LINE(\n        btr,\n        horizonPoint,\n        4.5,\n        0.003,\n        ho\n    );\n    canvas *= LINE(\n        bbr,\n        horizonPoint,\n        5.0,\n        0.003,\n        ho\n    );\n    canvas *= LINE(\n        bbl,\n        horizonPoint,\n        5.5,\n        0.003,\n        ho\n    );\n    \n    // Back face\n    canvas *= LINE(ibtl, ibtr, 6.5, 0.003, 0.5);\n    canvas *= LINE(ibtr, ibbr, 7.5, 0.003, 0.5);\n    canvas *= LINE(ibbr, ibbl, 8.5, 0.003, 0.5);\n    canvas *= LINE(ibbl, ibtl, 9.5, 0.003, 0.5);\n    \n    // left face\n    eraser(uv, btl, ibtl, ibbl, bbl, timingEraser(time, 13.0), canvas);\n    // right face\n    eraser(uv, btr, ibtr, ibbr, bbr, timingEraser(time, 13.0), canvas);\n    // bottom face\n    eraser(uv, btr, ibtr, ibtl, btl, timingEraser(time, 13.0), canvas);\n    // top face\n    eraser(uv, bbr, bbl, ibbl, ibbr, timingEraser(time, 13.0), canvas);\n    \n    // Sides\n    canvas *= LINE(btr, ibtr, 10.5, 0.003, 0.3);\n    canvas *= LINE(btl, ibtl, 11.0, 0.003, 0.3);\n    canvas *= LINE(bbr, ibbr, 11.5, 0.003, 0.3);\n    canvas *= LINE(bbl, ibbl, 12.0, 0.003, 0.3);\n    \n    // Front face\n    canvas *= LINE(btl, btr, 0.0, 0.003, 0.5);\n    canvas *= LINE(btr, bbr, 1.0, 0.003, 0.5);\n    canvas *= LINE(bbr, bbl, 2.0, 0.003, 0.5);\n    canvas *= LINE(bbl, btl, 3.0, 0.003, 0.5);\n    \n    // Fill front face\n    eraser(uv, btr, btl, bbl, bbr, timingEraser(time, 13.0), canvas);\n#undef LINE\n\n    return canvas;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    float width = iResolution.x / iResolution.y;\n    \n    float canvas = 1.0;\n    \n    // Position values\n    vec2 horizonPoint = vec2(width / 2.0, 0.5);\n    float shiftFactor = smoothstep(4.0, 8.0, iTime);\n    horizonPoint.x -= 0.25 * shiftFactor;\n    horizonPoint.y -= 0.2 * shiftFactor;\n    \n    if (iMouse.z > 0.0) {\n        horizonPoint = vec2(\n            iMouse.x / iResolution.x * width,\n            iMouse.y / iResolution.y\n        );\n    }\n    \n    // Horizon line\n    canvas *= line(\n        uv,\n        vec2(0.0, horizonPoint.y),\n        vec2(width, horizonPoint.y),\n        timingPoint(iTime, 0.0),\n        0.002,\n        0.3\n    );\n    // Horizon point\n    canvas *= point(\n        uv,\n        horizonPoint,\n        0.005,\n        timingPoint(iTime, 0.1)\n    );\n    \n    // Background elements on the left\n    box(uv, vec2(width * 0.2, 0.25), vec2(0.7, 0.4), 0.9, 0.3, horizonPoint, 5.0, 8.0, canvas);\n    \n    // Background elements on the right side\n    box(uv, vec2(width * 1.4, 0.6), vec2(0.4, 0.7), 0.7, 0.3, horizonPoint, 4.0, 8.0, canvas);\n    box(uv, vec2(width * 1.7, 0.03), vec2(0.2, 0.2), 0.7, 0.1, horizonPoint, 5.0, 8.0, canvas);\n    box(uv, vec2(width * 1.45, -0.04), vec2(0.1, 0.1), 0.7, 0.05, horizonPoint, 6.0, 8.0, canvas);\n    \n    // Main box\n    box(uv, vec2(width / 2.0, 0.1), vec2(0.125, 0.125), 0.25, 0.25, horizonPoint, 0.5, 4.0, canvas);\n    \n    // Paper texture\n    float paper = 0.6 * texture(iChannel1, uv * 0.3).r;\n    paper += 0.4 * texture(iChannel1, uv * 0.5).r;\n    paper = mix(0.95, 1.0, paper);\n    \n    canvas *= paper;\n    \n    fragColor = vec4(canvas);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}