{
    "Shader": {
        "info": {
            "date": "1708798248",
            "description": "Example of usual shapes in GLSL",
            "flags": 0,
            "hasliked": 0,
            "id": "M3BGDG",
            "likes": 0,
            "name": "Usual shapes",
            "published": 3,
            "tags": [
                "exemple"
            ],
            "usePreview": 0,
            "username": "nakira974",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "/**\n * @file usual_shapes.frag\n * @brief This file is my first shader, I'm learning GLSL since 1 day i tried to draw some shapes and apply some colors to it\n * @author Maxime Loukhal\n * @date 24/02/2024\n */\n\n/**\n* @brief Generate a random color using the time salt\n* @param time Elapsed time since the shader is running\n* @return The generated color\n*/\nvec3 generateColor(float time)\n{\n    // Use the sin function to create color variation over time\n    float red = sin(time * 0.5) * 0.5 + 0.5;\n    float green = sin(time * 0.7) * 0.5 + 0.5;\n    float blue = sin(time * 0.9) * 0.5 + 0.5;\n    \n    return vec3(red, green, blue);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set movement speed\n    float speed = 0.5;\n    \n    // Set offset based on time\n    vec2 offset = vec2(cos(iTime * speed), sin(iTime * speed));\n    \n    // Draw a shap and center it\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x) +offset;\n    \n    /** Triangle */\n    float triangle = uv.x > 0.0 && uv.y > 0.0 && uv.x + uv.y < 1.0 ? 1.0 : 0.0;\n    \n    /** Circle */\n    float cercle = length(uv) < 1.0 ? 1.0 : 0.0;\n    \n       /** Square */\n    float carre = abs(uv.x) < 1.0 && abs(uv.y) < 1.0 ? 1.0 : 0.0;\n\n    /** Rectangle */\n    float rectangle = abs(uv.x) < 1.5 && abs(uv.y) < 0.5 ? 1.0 : 0.0;\n\n    /** Parallelogram */\n    float parallelogramme = abs(uv.x) < 1.0 && abs(uv.y) < 0.5 ? 1.0 : 0.0;\n\n    /** Trapeze */\n    float trapeze = abs(uv.x) < 1.5 && abs(uv.y) < 0.5 && abs(uv.y) > abs(uv.x) - 1.0 ? 1.0 : 0.0;\n\n    /** Diamond */\n    float losange = abs(uv.x) + abs(uv.y) < 1.0 ? 1.0 : 0.0;\n\n      // Variable pour suivre le temps écoulé\n    float time = iTime;\n    \n    // Time between shapes swap\n    float interval = 2.0;\n    \n    // Calculate the index of the shape to display\n    int shapeIndex = int(time / interval) % 6;\n    \n    // Show corresponding shape\n    float shape;\n    if (shapeIndex == 0) {\n        shape = triangle;\n    } else if (shapeIndex == 1) {\n        shape = cercle;\n    } else if (shapeIndex == 2) {\n        shape = carre;\n    } else if (shapeIndex == 3) {\n        shape = rectangle;\n    } else if (shapeIndex == 4) {\n        shape = parallelogramme;\n    } else {\n        shape = losange;\n    }\n    \n   \n    // Fond noir\n    // Generate color based on time\n    vec3 color = generateColor(time);\n    // Display\n    fragColor = vec4(color * shape, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}