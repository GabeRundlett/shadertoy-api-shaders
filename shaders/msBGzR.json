{
    "Shader": {
        "info": {
            "date": "1667085453",
            "description": "A 3D fractal structure using [url=https://en.wikipedia.org/wiki/Triangle_wave]triangle waves[/url].\nUse the mouse to look around.",
            "flags": 8,
            "hasliked": 0,
            "id": "msBGzR",
            "likes": 8,
            "name": "Triangle wave spaghetti",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "spaghetti"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "#define t iTime*4.\n#define r iResolution\n#define iterations 500 //number of raymarching steps\n#define EPSILON .001\n#define MAX_DIST 40.0\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\n\n//Based on https://www.shadertoy.com/view/3tXyRN\n\nvec3 spaghetti(vec3 uv)\n{\n    vec3 col = vec3(0.);\n    for(int k = 0; k < 6; k++){ \n        vec3 offset =\n            vec3(uv.x-.5*uv.y,uv.y,uv.z)\n            //fract(vec3(uv.x-uv.y/2.,uv.y-uv.x/2.,uv.z-uv.x/2.))\n        ;\n        //offset -= abs(uv.z)/4.;\n        uv =\n            abs(fract(uv.yzx+offset.yzx)-.5)\n        ;\n        col = vec3(col.yz,uv.x-uv.y);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n{\n    o = vec4(0.0);\n    vec3 d=vec3(U/r.xy-.5,.5),p0=vec3(0,6,t),p=p0;\n    if (length(iMouse.xy) > 40.0) {\n        d.yz *= rot(-3.14*0.5+iMouse.y/iResolution.y*3.14);\n        d.xz *= rot(-3.14+iMouse.x/iResolution.x*3.14*2.0);\n    }\n    float l1;\n    vec3 col = vec3(0.);\n    for(int i=0;i<iterations;i++)\n    {\n        col = spaghetti(p/64.);\n        float sd1 = col.z-.35;\n        if(-sd1 < EPSILON*(length(l1)+1.0) || l1 > MAX_DIST){ break; }\n        p+=d*(-sd1);\n        l1 = distance(p,p0);\n    }\n    o+=(vec4(col/2.,0)+l1/100.0)*3.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n//#define fmod(x,y) mod(floor(floor(x)+floor((x)/8.)/8.),y)\n\n#define fpow(x,y) pow(y,fmod(x,y))\n\nvec2 mainSound(int samp, float t){\n  t /= 1.5;\n  //t += floor(t*4.)/4.;\n  float s1 =\n      8.,\n  m1 =\n      fmod(floor(t/s1)+t,s1)+fmod(t*s1,s1),\n  z1 =\n      (1.+fmod(t/s1,2.)+fmod(t*s1,2.))\n  ;\n  t /=\n      1.+fmod(floor(t*s1/z1)+floor(t/s1/z1),2.)\n\n  ;\n  float m3 =\n      fmod((t*8.+fpow(t*s1,3.))/(m1+.5),s1)\n  ;\n  t *=\n      1.+fmod(floor(t*s1/z1)+floor(t/s1/z1),2.)\n      //1.+fmod(floor((t*s1+fpow(t*s1,3.))/z1)+floor(t/s1/z1),2.)\n  ;\n      \n  float a = 64.*sqrt((1.-sqrt(fract(t*s1))))*.2,\n\n  nb = pow(2.,(m3+z1)/5.+7.5);\n\n  return abs(.5-vec2(fract(t*nb*.998/2.)\n   ,fract(t*nb)))*a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}