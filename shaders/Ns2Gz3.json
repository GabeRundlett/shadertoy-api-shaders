{
    "Shader": {
        "info": {
            "date": "1617742240",
            "description": "A faithful conversion of my DOS intro.\nhttps://www.pouet.net/prod.php?which=88536\n\nTry the other color variants!\n\nThanks to TomCat for SSE inspiration, knighty for the KIFS formulas, and the sizecoding discord for compression ideas.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ns2Gz3",
            "likes": 14,
            "name": "Sseraf 256-byte intro",
            "published": 3,
            "tags": [
                "kifs",
                "x86",
                "256bytes"
            ],
            "usePreview": 0,
            "username": "rrrola",
            "viewed": 653
        },
        "renderpass": [
            {
                "code": "// Inspired by:\n// - https://www.shadertoy.com/view/MdKyRw kaleidoscopic iterative function by wyatt\n// - https://www.shadertoy.com/view/ldB3Rz larval by P_Malin\n\n#define FAITHFUL true\n\nconst int Steps = FAITHFUL? 24 : 36;  // accuracy\nconst int Iterations = FAITHFUL? 16 : 20;  // shape detail\nconst float Eps = FAITHFUL? 1./16. : 1./64.;  // shading precision\n\nfloat C3,S3,C2,S2,C1,S1;\nfloat trap;\n\nfloat map(vec3 p) {\n  float len, t = 0.25;\n  trap = 0.25;\n  for (int i=0; i<Iterations; i++) {\n    p.xz = S3*p.xz + C3*vec2(-1,1)*p.zx; p = p.yzx;\n    p.xz = S2*p.xz + C2*vec2(-1,1)*p.zx; p = p.yzx;\n    p.xz = S1*p.xz + C1*vec2(-1,1)*p.zx; p = p.yzx;\n    p.xy = -abs(p.xy);\n    len = -(min(min(p.x, p.y), -abs(p.z)));  // box distance\n    trap = max(trap,len);\n    p.xy += vec2(t, t*.25);\n    t *= 0.75;\n  }\n  return len - 2.*t;\n}\n\n// Step along the ray. Return the position of the hit.\nfloat last_dist;\nvec3 trace(vec3 pos, vec3 dir) {\n  last_dist = 0.;\n  for (int i=0; i<Steps; i++) {\n    pos += dir * last_dist;\n    last_dist = map(pos);\n  }\n  return pos;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 v = (fragCoord - .5*iResolution.xy) / iResolution.y;  // v.y: -0.5..0.5\n  if (FAITHFUL) { v = floor(v*200.) / 200.; }  // quantize height to 200 pixels\n  v.y = -v.y;\n  v *= 0.78125298 / 0.5;\n\n  float time = -0.234375*iTime;\n  float t = time;     S1 = sin(t); C1 = cos(t);\n  t = time/log(2.);   S2 = sin(t); C2 = cos(t); // t*1.4427\n  t = time/log2(10.); S3 = sin(t); C3 = cos(t); // t*0.30103\n\n  vec3 p;\n  if (FAITHFUL) {\n    p = trace(vec3(v,1), vec3(0,0,-1));  // no perspective\n  }\n  else {\n    p = trace(vec3(0,0,1.25), normalize(vec3(v,-1)));  // perspective\n  }\n\n  float hue = min(trap, 1.);  // orbit trap\n  if (FAITHFUL) { hue = round(hue*32.) / 32.; }  // quantize to about 32 hues\n\n  float bri = (map(p+vec3(0,0,Eps)) - last_dist) / Eps;  // ao, brightness: smoothed normal.z\n  if (FAITHFUL) { bri = round(bri*8.) / 8.; }  // quantize to about 8 brightness levels\n\n  if (p.z<-1. || bri<0.) { fragColor = vec4(0,0,0,1); }\n  else {\n    float spe = 0.5*pow(bri,8.);  // shiny\n    if (FAITHFUL) { spe = 0.; }\n\n    fragColor = vec4(spe+bri*vec3(1,hue,0), 1);  // flame\n//    fragColor = vec4(spe+bri*vec3(0.125,hue,float(0xc8)/256.), 1);  // sky\n//    fragColor = vec4(spe+bri*vec3(1,.3+.6*hue,.25+.5*hue), 1);  // brain\n//    fragColor = vec4(spe+bri*vec3(1.-hue,.25,1), 1);  // alien\n//    fragColor = vec4(spe+bri*vec3(1,.75+hue*.25,.25+hue*.5), 1);  // platinum\n//    fragColor = vec4(spe+bri*vec3(hue*hue,.25+hue*.75,.75-hue*.25), 1);  // anodized titanium\n  }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}