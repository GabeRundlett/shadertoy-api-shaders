{
    "Shader": {
        "info": {
            "date": "1543447374",
            "description": "2d Gerstner waves applied as a heightmap.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVcW1",
            "likes": 6,
            "name": "GerstnerHeightmap",
            "published": 3,
            "tags": [
                "2d",
                "waves",
                "gerstner"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 1329
        },
        "renderpass": [
            {
                "code": "//#define TWOD\n#define NOISE \n#define ITER    10\n#define EPS   1e-3\n#define STEPS  256\n#define FAR    20.\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n               );\n\n}\n\nfloat hash( float a )\n{\n\n    return fract( sin( a * 42165.15 ) * 54513.51 );\n\n}\n\nfloat hash( vec2 uv )\n{\n\n    return fract( sin( uv.x * 452.153 + uv.y * 542.515 ) * 215.15 );\n\n}\n\nfloat noise( vec2 uv )\n{\n    \n    vec2 id = floor( uv );\n    vec2 lv = fract( uv );\n    lv *= lv * lv * ( 3.0 - 2.0 * lv );\n    \n    float bl = hash( id );\n    float br = hash( id + vec2( 1, 0 ) );\n    float b = mix( bl, br, lv.x );\n    \n    float tl = hash( id + vec2( 0, 1 ) );\n    float tr = hash( id + vec2( 1 ) );\n    float t = mix( tl, tr, lv.x );\n    \n    return mix( b, t, lv.y ); \n\n}\n\nfloat ger( vec2 uv )\n{\n    \n    float ste = 1.5;\n    float amp = 0.7;\n    float wav = 1.9;\n    float spe = 1.5;\n    uv.x *= 0.1;\n    uv.y *= 0.3;\n    #ifdef NOISE\n    uv.x += 1.0 * amp * cos( uv.x - iTime * spe + ( uv.x + uv.y ) + noise( uv + iTime ) );\n    uv.y += ste * amp * sin( uv.y - iTime * spe * 0.5 + ( uv.x + uv.y ) + noise( uv + 5.0 + iTime ) );\n    #else\n    uv.x += 1.0 * amp * cos( uv.x - iTime * spe + ( uv.x + uv.y ) );\n    uv.y += ste * amp * sin( uv.y - iTime * spe * 0.5 + ( uv.x + uv.y ) );\n    #endif\n    float c = 0.3 * sin( wav * ( amp ) * ( uv.x + uv.y ) + iTime );\n    \n    return c;\n\n}\n\nfloat fbm( vec2 uv )\n{\n\n    float res = 0.0, amp = 1.0, fre = 1.0, div = 0.0, tim = iTime;\n    \n    for( int i = 0; i < ITER; ++i )\n    {\n    \n        res += amp * ger( ( uv + tim ) * fre );\n        div += amp;\n        tim *= 0.7;\n        amp *= 0.5;\n        fre *= 2.0;\n    \n    }\n    \n    res /= div;\n    \n    return res;\n\n}\n\nfloat wav( vec2 uv )\n{\n\n    return 5.0 * fbm( uv );\n\n}\n\nfloat wavO( vec2 uv )\n{\n\n    return 5.0 * ger( uv );\n\n}\n\nfloat map( vec3 p )\n{\n\n    return p.y + wav( p.xz );\n\n}\n\nvec3 nor( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    \n    return normalize( vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                            map( p + e.yxy ) - map( p - e.yxy ),\n                            map( p + e.yyx ) - map( p - e.yyx )\n                          )\n                    );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0; d = 0.0;\n    \n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        vec3 p = ro + rd * t;\n        d = 0.3 * map( p );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nvec3 ren( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0, t = ray( ro, rd, d );\n    vec3 col = vec3( 0 );\n    vec3 p =  ro + rd * t;\n    vec3 n = nor( p );\n    vec3 lig = normalize( vec3( 0.0, 0.5, 1.0 ) );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float ambO = 0.5 + 0.5 * -n.y;\n    float dif = max( 0.0, dot( lig, n ) );\n    float spe = pow( clamp( dot( lig, reflect( rd, n ) ), 0.0, 1.0 ), 16.0 ); \n    \n    float tex = wav( p.xz );\n    \n    col += 0.5 * vec3( 24, 49, 89 ) / 256.0;\n    \n    vec3 fint = mix( vec3( 0.2 ), vec3( 0 ), tex );\n    vec3 foa = mix( vec3( 0.5 ), vec3( 0 ), wav( p.xz * 7.0 ) );\n    \n    col += 0.3 * dif;\n    col += 0.3 * amb;\n    col += 0.1 * spe;\n    \n    col += -0.05 + fint;\n    col += -0.05 + foa;\n    \n    //col = mix( vec3( 0 ), vec3( 1 ), col );\n    //col -= 1.0;\n\n    //if( col.r >= 0.1 ) col += 0.2;\n    \n    col *= 0.5 / ( 1.0 + t * t * 0.1 );\n    \n    col *= sqrt( col );\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec3 ro = vec3( 0, 3.0, -iTime );\n    vec3 rd = normalize( vec3( uv, -1 ) );\n    ro.y -= wavO( ro.xz );\n    \n    ro.x += noise( ro.xz ) * 0.5;\n    rd.x += noise( ro.xz ) * 0.5;\n    \n    vec3 col = vec3( 0 );\n    \n    #ifdef TWOD\n    \n    col = mix( vec3( 0, 0.5, 0.6 ), vec3( 0 ), fbm( uv * 50.0 ) );\n    \n    #else\n    \n    float d = 0.0, t = ray( ro, rd, d );\n    \n    col = d < EPS ? ren( ro, rd ) : vec3( 0 );\n    \n    #endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}