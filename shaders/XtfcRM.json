{
    "Shader": {
        "info": {
            "date": "1506795088",
            "description": "was testing out some script from https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl/28095165",
            "flags": 0,
            "hasliked": 0,
            "id": "XtfcRM",
            "likes": 1,
            "name": "random testing",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "robertplummer",
            "viewed": 645
        },
        "renderpass": [
            {
                "code": "// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\n// Compound versions of the hashing algorithm I whipped together.\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\nuint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\n\n// Construct a float with half-open range [0:1] using low 23 bits.\n// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32\n\n    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)\n    m |= ieeeOne;                          // Add fractional part to 1.0\n\n    float  f = uintBitsToFloat( m );       // Range [1:2]\n    return f - 1.0;                        // Range [0:1]\n}\n\n// Pseudo-random value in half-open range [0:1].\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t    vec3  inputs = vec3( gl_FragCoord.xy, iTime ); // Spatial and temporal inputs\n    float rand   = random( inputs );              // Random per-pixel value\n    vec3  luma   = vec3( rand );                  // Expand to RGB\n\n    fragColor = vec4( luma, 1.0 );\n\t//fragColor = vec4(uv,uv,uv,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}