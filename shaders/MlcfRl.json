{
    "Shader": {
        "info": {
            "date": "1541008865",
            "description": "arrow keys, shift and ctrl to move, mouse to look around, try going through walls.\nthis shader is slower than a snail.",
            "flags": 48,
            "hasliked": 0,
            "id": "MlcfRl",
            "likes": 3,
            "name": "octree truchet",
            "published": 3,
            "tags": [
                "3d",
                "truchet",
                "octree"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 733
        },
        "renderpass": [
            {
                "code": "//a lot slower, does a bigger overlap check (8 checks without, 27 checks with)\n#define lessoverstep\n#define steps 100\n#define maxdistance 4.0\n#define epsilon 0.005\n\n//5 is maybe a little too much, 3 is fine\n#define limit 3.0\n\n#define HASHSCALE3 vec3(.6531, .5563, .7498)\n\n#define dot2(p) dot(p,p)\n\n//hash function in hash without sine by Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z*15.3023+0.434);\n}\n\n#define checktree(k)                        \\\nfor (j = 0.0; j < k; j++) {             \\\n    vec3 h = floor(r*exp2(j))*exp2(-j); \\\n    float rand = hash13(h+exp2(-j-1.0));\\\n    if (rand >= 0.5) {                 \\\n        break;                          \\\n    }                                   \\\n}\n\nfloat squarering(vec3 p, float size) {\n    vec2 q = vec2(abs(length(p.xy)-0.5),abs(p.z));\n    float len = length(max(q-size,0.0))+min(max(q.x,q.y)-size,0.0);\n    return len;\n}\n\nfloat truchet(vec3 p, int type) {\n    vec3 q = abs(p-0.5);\n\t\n    vec3 q2 = vec3(min(min(q.x,q.y),q.z),0,max(max(q.x,q.y),q.z));\n    q = min(q,q.yzx);\n    q2.y = max(max(q.x,q.y),q.z);\n\n    float inside = length(abs(q2.yz-vec2(0.0,0.5)))-0.1667;\n    float inside2 = length(abs(max(q2.yz-vec2(0.0,0.5),0.0)))-0.1667;\n    float outside = length(abs(q2.yz-vec2(0.5,0.5)))-0.3333;\n    \n    float len;\n    //len = min(len, squarering(p.xyz-vec3(0,0,0.5)));\n    //len = min(len, squarering(p.yzx-vec3(1,0,0.5)));\n    //len = min(len, squarering(p.zxy-vec3(1,1,0.5)));\n    if (type == 0) {\n        len = -outside;\n    } else if (type == 1) {\n        len = inside;\n    } else if (type == 2) {\n        len = inside2;\n    } else if (type == 3) {\n        float size = 0.1667-0.1+q2.z*0.2;\n        len = squarering(p.xyz-vec3(0,0,0.5),size)*0.9;\n        len = min(len, squarering(p.yzx-vec3(1,0,0.5),size)*0.9);\n        len = min(len, squarering(p.zxy-vec3(1,1,0.5),size)*0.9);\n    }\n    \n    \n    return len;\n}\n\nfloat map(vec3 p) {\n    \n    vec3 fp;\n    vec3 lp;\n    float len;\n    float i;\n    \n    //r is the truchet cell you want the random \n    vec3 r = p;\n    float j;\n    checktree(limit);\n    i = j;\n    float size = exp2(-i);\n    //the position in the bottom left corner of the truchet cell\n    fp = floor(p/size)*size;\n\n    //the local position on the truchet cell (always 0-1)\n    lp = fract(p/size);\n    \n    int type = int(hash13((fp+size*0.5)*vec3(0.93,0.89,1.23))*4.0);\n    len = truchet(lp,type)*size;\n    \n    while (i <= limit) {\n        //the position in the bottom left corner of the truchet cell\n        fp = floor(p/size)*size;\n        //the local position on the truchet cell (always 0-1)\n        lp = fract(p/size);\n        //check for the overlapping black dots\n#ifdef lessoverstep\n        vec3 p2 = p/size;\n        vec3 fp2 = floor(p2);\n        for(int x = -1; x <= 1; x++) {\n            for(int y = -1; y <= 1; y++) {\n                for(int z = -1; z <= 1; z++) {\n#else\n        vec3 p2 = p/size;\n        vec3 fp2 = floor(p2-0.5);\n        for(int x = -0; x <= 1; x++) {\n            for(int y = -0; y <= 1; y++) {\n                for(int z = -0; z <= 1; z++) {\n#endif\n                    r = (fp2+vec3(x,y,z))*size;\n                    //this branch doesn't do anything, but it skips the random() once\n                    if (r != fp)\n                    {\n                        checktree(i);\n\n                        if (i==j) {\n                            vec3 q = abs(p2-fp2-vec3(x,y,z)-0.5);\n                            \n                            vec3 q2 = vec3(min(min(q.x,q.y),q.z),0,max(max(q.x,q.y),q.z));\n                            q = min(q,q.yzx);\n                            q2.y = max(max(q.x,q.y),q.z);\n                            \n                            float outside = length(abs(q2.yz-vec2(0.5,0.5)))-0.3333;\n                            \n                            len = max(-outside*size,len);\n                        }\n                    }\n                }\n            }\n        }\n        size *= 0.5;\n        len *= -1.0;\n        i++;\n    }\n    return len;\n    \n    /*vec3 q = abs(p-0.5);\n    \n    vec3 q2 = vec3(min(min(q.x,q.y),q.z),0,max(max(q.x,q.y),q.z));\n    q = min(q,q.yzx);\n    q2.y = max(max(q.x,q.y),q.z);\n    \n    float inside = length(abs(max(q2.yz-vec2(0.0,0.5),0.0)))-0.1667;\n    float outside = length(abs(q2.yz-vec2(0.5,0.5)))-0.3333;\n    \n    if (floor(p) == vec3(0)) {\n    \tlen = -outside;\n    } else {\n        len = inside;\n    }\n    return len;*/\n    //return outside;\n    \n}\n\nvec3 findnormal(vec3 p, float eps) {\n    vec2 e = vec2(0,eps);\n    \n    return normalize(vec3(\n        map(p+e.yxx),\n        map(p+e.xyx),\n        map(p+e.xxy))\n       -map(p));\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = getdata(campos).xyz;\n    vec3 rd = normalize(vec3(uv,1));\n\n    vec4 rotcam = getdata(camrot);\n\n    rd.zy *= rot(rotcam.y);\n    rd.zx *= rot(rotcam.x);\n    \n    float a = sign(map(ro));\n    float d = 0.0;\n    int i;\n    float c = 0.0;\n    for (i = 0; i < steps; i++) {\n        float l = map(ro+rd*d)*a;\n        \n        if (l < epsilon*max(d,epsilon)||d>maxdistance) {\n            break;\n        }\n        d += l;\n    }\n\t\n    // Output to screen\n    if ( i < 100&&d<maxdistance) {\n        vec3 p = ro+rd*d;\n        vec3 n = findnormal(p,epsilon*max(d,epsilon))*a;\n    \tvec3 sc = vec3(n*0.25+0.5+0.25*a);\n        float light = max(0.3,dot(n,normalize(vec3(1))));\n        vec3 col = sc*light;\n        col /= d*d*10.0+1.0;\n        col *= 1.0-float(i)/100.0;\n        \n        float fresnel = max(0.8+dot(rd,n)*2.0,0.0);\n        \n        col = mix(col,vec3(a*0.5+0.5),fresnel);\n        fragColor.rgb = col;\n    }\n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0).x;\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\nvec4 updatedata(int index) {\n    vec4 data = getdata(index);\n    \n    vec4 iMouse2 = getdata(lastmouse);\n    \n    \n    bool refresh = iFrame == 0;\n    \n    if (index == lastmouse) {\n        return iMouse;\n    } else if (index == campos) {\n        \n        if (refresh) {\n            return vec4(4.4,3.9,6.36,0);\n        }\n        \n        vec4 rotcam = getdata(camrot);\n        \n        vec3 move = vec3(getkey(MOVE_RIGHT,0)-getkey(MOVE_LEFT,0),\n                         getkey(MOVE_UP   ,0)-getkey(MOVE_DOWN,0),\n                         getkey(MOVE_FORW ,0)-getkey(MOVE_BACK,0));\n        \n        move.zy *= rot(rotcam.y);\n        move.zx *= rot(rotcam.x);\n        \n        \n        vec3 newpos = data.xyz+movespeed*move*iTimeDelta;\n        \n        data.xyz = newpos;\n        \n        return data;\n    } else if (index == camrot) {\n        \n        if (refresh) {\n            return vec4(0);\n        }\n        \n        if (min(iMouse2.z,iMouse.z) > 0.5) {\n            data.xy += (iMouse.xy-iMouse2.xy)/iResolution.y*sensitivity;\n        }\n        return data;\n    }\n    \n    \n    return data;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = updatedata(coord.x+coord.y*int(iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define lastmouse 0\n#define campos 1\n#define camrot 2\n\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n\n#define sensitivity 3.0\n#define movespeed 0.1\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_SHIFT 16\n#define KEY_CTRL  17\n\n//movement keys\n#define MOVE_FORW   KEY_UP\n#define MOVE_LEFT   KEY_LEFT\n#define MOVE_RIGHT  KEY_RIGHT\n#define MOVE_BACK   KEY_DOWN\n#define MOVE_UP     KEY_SHIFT\n#define MOVE_DOWN   KEY_CTRL\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}