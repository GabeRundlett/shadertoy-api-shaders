{
    "Shader": {
        "info": {
            "date": "1568729586",
            "description": "S.O.B. virus",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3GzS",
            "likes": 5,
            "name": "Phoebe Phage",
            "published": 3,
            "tags": [
                "robot",
                "symmetry",
                "virus",
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// \"Phoebe Phage\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// S.O.B. virus (if you are a bacterium)\n// Analytic inverse kinematics from \"Octopod\"\n\n#define AA  0   // optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit, vc, vp[3];\nvec2 hipPos, ftPos;\nfloat tCur, dstFar, legLenU, legLenD, tCyc, aU, aD, cPos;\nint idObj;\nconst int idFace = 1, idEdge = 2, idTube = 3, idHip = 4, idNeed = 5, idLeg = 6, idFlr = 7;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid PInit ()\n{\n  float cp, sp;\n  cp = cos (pi / 5.);\n  sp = sqrt (0.75 - cp * cp);\n  vc = vec3 (-0.5, - cp, sp);\n  vp[0] = vec3 (0., 0., 1.);\n  vp[1] = normalize (vec3 (sp, 0., 0.5));\n  vp[2] = normalize (vec3 (0., sp, cp));\n}\n\nvoid SetConf ()\n{\n  vec2 knPos, r, a, b;\n  float rl, s;\n  tCyc = mod (0.1 * tCur, 1.);\n  legLenU = 2.;\n  legLenD = 3.;\n  hipPos = vec2 (0.8, 3.5 + 2.4 * cos (2. * pi * tCyc));\n  ftPos = vec2 (2.2, 0.);\n  r = ftPos - hipPos;\n  rl = length (r);\n  b = vec2 (legLenU, legLenD);\n  if (rl < legLenU + legLenD) {\n    a = acos ((rl * rl + (b.y * b.y - b.x * b.x) * vec2 (-1., 1.)) / (2. * rl * b));\n    s = sign (r.x);\n    knPos = vec2 (hipPos.x, ftPos.y) + b * sin (vec2 ((a.x + 0.5 * pi) * s, a.y) -\n       asin (r.y / rl) * vec2 (- s, 1.));\n    r = knPos - hipPos;\n    aU = atan (r.y, r.x);\n    r = ftPos - knPos;\n    aD = atan (r.y, r.x);\n  } else {\n    aU = asin (r.x / (legLenU + legLenD)) - 0.5 * pi;\n    aD = aU;\n  }\n  cPos = cos (2. * pi * tCyc);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, dv;\n  float dMin, d, cLen, szFac;\n  dMin = dstFar;\n  szFac = 1.3;\n  q = p;\n  q.y -= hipPos.y + 1.6 + 1. * szFac;\n  q.yz = Rot2D (q.yz, pi / 6.);\n  q /= szFac;\n  dMin /= szFac;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = abs (q.xy);\n    q -= 2. * min (0., dot (q, vc)) * vc;\n  }\n  q = q - vp[1];\n  dv = vec3 (dot (q, vp[0]), dot (q, vp[1]), dot (q, vp[2]));\n  d = Maxv3 (dv);\n  DMINQ (idFace);\n  dv = vec3 (length (q - min (0., q.x) * vec3 (1., 0., 0.)), \n     length (q - min (0., q.y) * vec3 (0., 1., 0.)),\n     length (q - min (0., dot (q, vc)) * vc));\n  d = Minv3 (dv) - 0.01;\n  DMINQ (idEdge);\n  dMin *= szFac;\n  q = p;\n  q.y -= hipPos.y + 0.8;\n  d = PrCylDf (q.xzy, 0.1, 0.9);\n  DMINQ (idTube);\n  q = p;\n  q.y -= hipPos.y;\n  d = PrRoundCylDf (q.xzy, hipPos.x, 0.05, 0.12);\n  DMINQ (idHip);\n  cLen = 0.6 - 0.5 * cPos;\n  q.y -= - cLen;\n  d = PrCylDf (q.xzy, 0.04, cLen);\n  DMINQ (idNeed);\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (6. * atan (q.z, - q.x) / (2. * pi)) + 0.5) / 6.);\n  q.xy -= hipPos * vec2 (-1., 1.);\n  q.xy = Rot2D (q.xy, aU);\n  q.x += 0.5 * legLenU;\n  d = PrCapsDf (q.yzx, 0.07 * (0.8 + 0.2 * q.x / (0.5 * legLenU)) / 0.6, 0.5 * legLenU);\n  DMINQ (idLeg);\n  q.x += 0.5 * legLenU;\n  q.xy = Rot2D (q.xy, aD - aU);\n  q.x += 0.5 * legLenD;\n  d = PrCapsDf (q.yzx, 0.07 * (0.8 + 0.2 * q.x / (0.5 * legLenD)), 0.5 * legLenD);\n  DMINQ (idLeg);\n  q = p;\n  d = q.y;\n  DMINQ (idFlr);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 80; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.04 * d, h));\n    d += min (0.13, 3. * h);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 LampCol (vec3 rd)\n{\n  vec3 col, vn;\n  float sRad, bs, ts;\n  sRad = 0.03;\n  col = vec3 (0.);\n  bs = dot (rd, ltDir);\n  ts = bs * bs - 1. + sRad * sRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - ltDir) / sRad);\n      col = vec3 (1., 1., 0.8) * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n    }\n  }\n  return col;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, sh;\n  bool isRefl, showBg;\n  PInit ();\n  SetConf ();\n  isRefl = false;\n  showBg = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar && idObj == idFace) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    isRefl = true;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idEdge) {\n      col4 = vec4 (0.8, 0.7, 0., 0.2);\n    } else if (idObj == idTube) {\n      col4 = mix (vec4 (2., 0., 0., 0.2), vec4 (0.4, 0.7, 0.2, 0.2),\n         step (0.05, abs (tCyc - 0.5))) * (0.8 + 0.2 * sin (8. * 2. * pi * qHit.y));\n    } else if (idObj == idHip) {\n      col4 = vec4 (0.2, 0.4, 0.7, 0.2);\n    } else if (idObj == idNeed) {\n      col4 = mix (vec4 (0.2), vec4 (0.9, 0.9, 0.2, 0.2),\n         step (0., sin (4. * 2. * pi * qHit.y + atan (qHit.z, - qHit.x))));\n    } else if (idObj == idLeg) {\n      col4 = vec4 (0.9, 0.9, 1., 0.2) * (0.7 + 0.3 * sin (8. * 2. * pi * qHit.x));\n    } else if (idObj == idFlr) {\n      col4 = vec4 (0.8, 0.5, 0.5, 0.) * (0.8 + 0.2 * Fbm2 (1.5 * ro.xz)) *\n         (1. - 0.7 * step (length (ro.xz), 0.07) *\n         step (0.5, tCyc) * (1. - smoothstep (0.8, 0.9, tCyc)));\n      vn = VaryNf (16. * ro, vn, 1.5 * (1. - 0.99 * smoothstep (0.2, 0.4, dstObj / dstFar)));\n    }\n    if (isRefl) col4.rgb = mix (col4.rgb, vec3 (0.5, 0.5, 1.), 0.2);\n    sh = ObjSShadow (ro + 0.001 * vn, ltDir);\n    col = col4.rgb * (0.2 + 0.1 * max (- dot (vn, ltDir), 0.) +\n       0.7 * sh * max (dot (vn, ltDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col *= 1. - smoothstep (0.85, 0.95, dstObj / dstFar);\n  } else {\n    col = vec3 (0.);\n    if (isRefl) col = LampCol (rd);\n    showBg = true;\n  }\n  if (showBg || idObj == idFlr && length (col) < 0.03) col += StarPat (rd, 8.);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 4., -20.);\n  zmFac = 2.8;\n  dstFar = 50.;\n  ltDir = vec3 (0., 0., 1.);\n  ltDir.yz = Rot2D (ltDir.yz, -0.3 * pi * (1. + 0.2 * sin (0.1 * pi * tCur)));\n  ltDir.xz = Rot2D (ltDir.xz, -0.5 * pi * cos (0.16 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}