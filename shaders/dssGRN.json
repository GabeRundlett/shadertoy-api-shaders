{
    "Shader": {
        "info": {
            "date": "1665776185",
            "description": "Day 14 of october's everyday challenge. It's kinda tough to get 14 ideas in 14 days ><",
            "flags": 0,
            "hasliked": 0,
            "id": "dssGRN",
            "likes": 9,
            "name": "Artober - Respiration",
            "published": 3,
            "tags": [
                "raymarching",
                "transparency",
                "truchet",
                "everyday"
            ],
            "usePreview": 0,
            "username": "Flopine",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define hr vec2(1.,sqrt(3.))\n\n#define circle(u,s) (length(u)-s)\n\n#define noise(u) textureLod(iChannel0, u, 0.).x\n#define hash21(x) fract(sin(dot(x,vec2(145.2, 218.5)))*4123.5)\n\nvec4 hexgrid (vec2 uv)\n{\n    vec2 a=mod(uv,hr)-hr*.5, b=mod(uv-hr*.5,hr)-hr*.5,\n    guv=dot(a,a)<dot(b,b)?a:b, gid=uv-guv;\n    return vec4(guv,gid);\n}\n\nfloat truchet (vec2 uv)\n{\n    vec4 hg = hexgrid(uv);\n    vec2 uu = hg.xy, uid = hg.zw;\n    \n    if (noise(uid*.23)<.5) uu.x *= -1.;\n    float diag = abs(uu.x*sqrt(3.)+uu.y)-0.2;\n    \n    float s = uu.x*sqrt(3.)>-uu.y ? 1.:-1.;\n    uu -= vec2(1., 1./sqrt(3.))*s*.5;\n    float cs = abs(circle(uu, sqrt(3.)/6.));\n    \n    return min(cs,diag);\n}\n\nfloat extrude (vec3 p, float d, float h, float r)\n{\n    vec2 q = vec2(d, max(length(p.xy)-r, abs(p.z)-h));\n    return length(q)-h;\n}\n\nfloat SDF (vec3 p)\n{\n    p.z = abs(p.z)-3.;\n    float r = sin(length(p)-iTime)*.5+.5;\n    return extrude(p, truchet(p.xy), 0.2, r*6.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float dither = hash21(uv);\n    \n    vec3 ro = vec3(0.001,0.001,-4.5), rd=normalize(vec3(uv,1.)), p=ro,\n    col=vec3(0.);\n    \n    bool hit = false; float shad;\n    for(float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if(d<0.001)\n        {\n            hit=true; shad = i/64.;\n        }\n        d = max(abs(d)+dither*.008,0.01);\n        p += d*rd;\n    }\n    \n    if (hit) col = vec3(.8,0.9,1.)*shad;        \n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}