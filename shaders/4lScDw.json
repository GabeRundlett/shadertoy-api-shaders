{
    "Shader": {
        "info": {
            "date": "1509936632",
            "description": "move to origin then rotate then put back in it's place.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lScDw",
            "likes": 0,
            "name": "Z5 10/23/17 Sca & Ro ex.",
            "published": 3,
            "tags": [
                "graprog"
            ],
            "usePreview": 0,
            "username": "L1tang",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "mat2 rotate2d(float angle)\n{\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x, 0, 0, value.y);\n}\n\nvec3 box(vec2 uv, vec2 pos, vec2 dimension, vec3 fill, \n         vec3 bColor, vec2 bThicc, bool bSmooth, bool borderOnly)\n{\n    if (borderOnly == true)\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, vec3(0.), box);\n        return finalBox;\n    }\n    \n    else\n    {\n        float border = step(uv.x, pos.x) - step(uv.x, pos.x + dimension.x);\n        border *= step(uv.y, pos.y) - step(uv.y, pos.y + dimension.y);\n        \n        float box = step(uv.x, pos.x + bThicc.x) - step(uv.x, (pos.x - bThicc.y) + dimension.x);\n        box *= step(uv.y, pos.y + bThicc.y) - step(uv.y, (pos.y - bThicc.y) + dimension.y);\n        \n        vec3 finalBox = mix(vec3(0.), bColor, border);\n        finalBox = mix(finalBox, fill, box);\n        return finalBox;\n    }\n}\n\nvec3 circle(float radius, float ratio, float edge, vec2 pos,vec2 uv, vec3 color)\n{\n    uv *= 5.0;\n    \n    uv = fract(uv);\n    uv.x *= ratio;\n    vec2 shapePos = pos;\n   \n    float dist = distance(shapePos, uv);\n    //weird\n    /*uv *= 5.0;\n    uv = fract(uv);*/\n    //offset to 0,0\n    uv -=shapePos;\n    /*eclipse replace if the second value is a constant it will fill the circle and the background\n\tsmoothstep(dist, aConstant, radius);*/\n    float angle = atan(uv.y, uv.x);\n    float yeah = radius;\n    //radius = cos(4.*(angle*2.))*.4 / sin(4.*angle)*.3;\n    radius = smoothstep(1., edge,cos(9.*angle))*.2 + cos(6.*angle)*.1;\n    \n    // gear radius += smoothstep(1., edge,cos(8.*angle))*.1;\n    // nice radius += smoothstep(1., edge,cos(12.*angle))*.2 + cos(4.*angle)*.3;\n    // sun radius += smoothstep(1., edge,cos(12.*angle))*.2 + cos(12.*angle)*.1;\n    // nice radius = smoothstep(1., edge,cos(9.*angle))*.2 + cos(6.*angle)*.1;\n    // no edge radius += step(1.,cos(9.*angle))*.2 + cos(6.*angle)*.1;\n    // lantern radius += step(.1,cos(2.*angle))*.2 + smoothstep(.01, edge,cos(2.*angle)*.1);\n    \n    //cos(4.*angle)*.3\n    \n    //nice radius = cos(100.*angle)*(sin(iTime+radius));\n    //nice 2 radius = cos(iTime*angle)*(sin(iTime*10.+radius));\n    //nice 3radius = cos(1000.*angle)*(sin(iTime*10.+radius));\n    \n    float value = smoothstep(dist, dist + edge, radius);\n    vec3 finalColor = vec3(value);\n    //finalColor = mix(finalColor, color, value);\n    /*vec3 yeyo = mix(finalColor, color, yeah);\n    finalColor += yeyo;*/\n    \n    \n    return finalColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    vec3 rect = box(uv, vec2(0, 0), vec2(1., 1.), vec3(1,1,1), \n                    vec3(1,1,1), vec2(.05,.05), false, true);\n   \n    \n    vec2 uv2 = uv;\n    uv2 *= scale2d(vec2(abs(sin(iTime))));\n    \n    vec2 pos = vec2(0.5*ratio, 0.5);\n    \n    uv -= pos;\n    \n    uv *= rotate2d(sin(iTime)) * scale2d(vec2(abs(sin(iTime))));\n    \n    uv += pos;\n    \n    vec3 circulo = circle(.3, ratio, 0.01, pos, uv, vec3(1,.8,0));\n    vec3 circuli = circle(.3, ratio, 0.01, vec2(.5*ratio, .5), uv2, vec3(1,.8,0));\n    \n    vec3 final = mix(vec3(0,0,0), vec3(0,0,1), circulo);\n    final = mix(final, vec3(0,1,0), rect);    \n    final = mix(final, vec3(1,0,0), circuli); // mask\n    \n    \n    //final = mix(circulo, vec3(0,0,1), rect);\n    \n    //final += mix(circulo, vec3(0,0,1), );\n\tfragColor = vec4(final,1.0);\n    //fragColor += vec4(circuli, 1.0);\n    //fragColor += vec4(rect, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}