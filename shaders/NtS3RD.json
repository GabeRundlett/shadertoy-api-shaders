{
    "Shader": {
        "info": {
            "date": "1623406332",
            "description": "noise",
            "flags": 0,
            "hasliked": 0,
            "id": "NtS3RD",
            "likes": 2,
            "name": "Voronoi graph",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "HanShaoqiu",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "vec2 N22(vec2 p){\n\tvec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));\n\ta+=dot(a,a+100.45);\n\treturn fract(vec2 (a.x*a.y ,a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec4 col = vec4(1.0);\n    //col = texture(iChannel0,uv);\n    float m = 0.0;\n\tfloat t = iTime;\n\tfloat minDist = 10.0;\n\tfloat cellIndex = 0.0 ;\n    vec2 uv1  = uv *10.0 ;\n\tvec2 gv = fract(uv1);\n\tvec2 id = floor(uv1);\n\n\tfor(int x =-1 ; x<=1 ; x++){\n\t\tfor(int y =-1 ; y<=1 ; y++){\n\t\t vec2 offs = vec2 (x,y);\n\t\t\tvec2 n = N22(id+offs);\n\t\t\tvec2 p = sin(n*t*5.0)*0.5+0.5+offs;\n\t\t\tfloat d = length (gv-p);\n\t\t\tif(d<minDist){\n\t\t\t\tminDist = d;\n\t\t\t}\n\n\t\t}\n\t}\n    col *= minDist;\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}