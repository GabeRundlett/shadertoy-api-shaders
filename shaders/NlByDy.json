{
    "Shader": {
        "info": {
            "date": "1650176545",
            "description": "A raymarching planet. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NlByDy",
            "likes": 0,
            "name": "RayMarching Planet",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Decycle",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "const int MAX_STEPS = 256;\nconst float MIN_DIST = 0.001;\nconst float MAX_DIST = 1000.0;\nconst vec3 PLANET_COLOR = vec3(118., 89., 89.) / 255.;\nconst vec3 SEA_COLOR = vec3(115., 168., 245.) / 255.;\n\nstruct RayMarch {\n    float totalDist;\n    float currentDist;\n    int steps;\n};\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nfloat displacement(vec3 p) {\n    float d = 0.0;\n    d += noise(p) * 0.8;\n    d += noise(p * 2.0) * 0.4;\n    d += noise(p * 4.0) * 0.2;\n    d += noise(p * 8.0) * 0.1;\n    \n    return d - 0.75;\n}\n\nfloat sphereSDF(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nfloat planetSDF(vec3 p)\n{\n    float planet = sphereSDF(p, vec3(0.), 10.);\n    return planet + displacement(p);\n}\n\nfloat seaSDF(vec3 p)\n{\n    return sphereSDF(p, vec3(0.), 10.);\n}\n\nRayMarch planet_ray_march(vec3 ro, vec3 rd)\n{\n    float d = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * d;\n        float sdf = planetSDF(p);\n        if(abs(sdf) < MIN_DIST || abs(sdf) > MAX_DIST)\n        {\n            return RayMarch(d, sdf, i);\n        }\n        d += sdf * 0.707107;\n    }\n    return RayMarch(d, MAX_DIST, MAX_STEPS);\n}\n\nRayMarch sea_ray_march(vec3 ro, vec3 rd)\n{\n    float d = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * d;\n        float sdf = seaSDF(p);\n        if(sdf < MIN_DIST || sdf > MAX_DIST)\n        {\n            return RayMarch(d, sdf, i);\n        }\n        d += sdf;\n}\nreturn RayMarch(d, MAX_DIST, MAX_STEPS);\n}\n\n\nvec3 rotateY(vec3 p, float angle)\n{\n    mat3 ry = mat3(\n    cos(angle), 0., sin(angle),\n    0., 1., 0.,\n    -sin(angle), 0, cos(angle)\n    );\n\n    return ry * p;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //rotate the camera\n    float theta = iTime / 10.;\n    \n    vec3 ro = vec3(25. * sin(theta), 0., -25. * cos(theta) );\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2. - 1.;\n    vec3 rd = vec3(vec2(uv.x, uv.y / iResolution.x * iResolution.y), 1.);\n    \n    rd = rotateY(rd, theta);\n    \n    //find the distance between the camera and the planet / sea\n    RayMarch planet = planet_ray_march(ro, rd);\n    RayMarch sea = sea_ray_march(ro, rd);\n\n    vec3 planetColor = step(planet.currentDist, MIN_DIST) * PLANET_COLOR;\n    \n    vec3 planetHighlight = vec3(step(30., float(planet.steps)));\n\n    //planetColor += planetHighlight;\n\n    vec3 seaColor = step(sea.currentDist, MIN_DIST) * SEA_COLOR;\n    vec3 seaDepth = vec3(sea.totalDist - planet.totalDist) * step(sea.currentDist, MIN_DIST);\n\n    seaColor += seaDepth * 0.5;\n\n    vec3 color = sea.totalDist < planet.totalDist ? seaColor : planetColor;\n    \n    //color = vec3(planet.totalDist - sea.totalDist);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}