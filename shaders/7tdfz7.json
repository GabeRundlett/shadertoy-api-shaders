{
    "Shader": {
        "info": {
            "date": "1662868110",
            "description": "An analog clock. ",
            "flags": 0,
            "hasliked": 0,
            "id": "7tdfz7",
            "likes": 2,
            "name": "Spiraling  8",
            "published": 3,
            "tags": [
                "spirals"
            ],
            "usePreview": 0,
            "username": "91isprime",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "const float D_MAX = 4.0;\nconst float BASE_FREQUENCY = 1.0 / 60.0;\nconst float PI = 3.14159265;\nconst float POINT_COUNT = 60.0;\nconst float MARGIN = .2; //percent margin on shortest side\n\nconst vec4 BLACK = vec4(0,0,0,0);\nconst vec4 WHITE = vec4(1,1,1,0);\nconst vec4 GRAY = vec4(1,1,1,0) * .6;\nconst vec4 RED = vec4(1,0,0,0);\nconst vec4 GREEN = vec4(0,1,0,0);\nconst vec4 BLUE = vec4(0,0,1,0);\n\nvec4 alpha_blend(vec4 top, vec4 bottom, float alpha){\n    return mix(bottom,top,clamp(alpha,0.0,1.0));\n}\n\nfloat sdf_to_alpha(float d){\n    float scale_divisor = min(iResolution.x, iResolution.y)/2.0*(1.0-MARGIN);\n    return clamp(-d*scale_divisor,0.0,1.0);\n}\n\nfloat point_sdf(float t, vec2 xy0, float multiplier){\n    // t is time of day in seconds\n    // xy0 is from -1 to 1\n    //returns a distance to the point with frequency multiplier\n    \n    float t2 = fract(t * BASE_FREQUENCY) * multiplier;\n    //rotate clockwise from 12:00\n    float theta = PI/2.0 - fract(t2) * 2.0 * PI;\n    \n    vec2 xy = multiplier/POINT_COUNT * vec2(cos(theta), sin(theta)) * float (multiplier <= POINT_COUNT);\n    return length(xy-xy0);\n}\n\nfloat hand(float t, float period, vec2 xy0, float thickness, float height){\n    //t is time of day in seconds\n    //xy0 is from -1 to 1\n    //thickness from 0 to 1\n    //height from 0 to 1\n    float angle = fract(t / period) * 2.0 * PI;\n    float back_height = 0.2 * height;\n    //rotate xy0 angle by angle\n    float r = length(xy0);\n    float theta = atan(xy0.y, xy0.x) + angle;\n    vec2 xy1 = r * vec2(cos(theta), sin(theta));\n    //bounding box sdf\n    float dx = abs(xy1.x)-thickness/2.0;\n    float dy = max(xy1.y-height,-xy1.y-back_height);\n    float sdf = max(dx,dy);\n    return sdf_to_alpha(sdf);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale_divisor = min(iResolution.x, iResolution.y)/2.0*(1.0-MARGIN);\n    vec2 xy0 = (fragCoord - iResolution.xy/2.0)/scale_divisor;\n    \n    scale_divisor = 1.0;\n    float frequency = max(floor(length(xy0)*POINT_COUNT), 1.0);\n    \n    float t = mod(iDate.w, 12.0*60.0*60.0);\n    //t = iDate.w;\n    //not a true sdf. only valid at the boundry\n    float blobs_sdf = 0.0;\n    blobs_sdf = 999.0;\n    for(float i = -D_MAX; i<=D_MAX; i++){\n        float r = max(frequency+i, 1.0);\n        float dist = point_sdf(t, xy0, r);\n        blobs_sdf = min(blobs_sdf, dist);\n    }\n    float blobs_alpha = sdf_to_alpha(blobs_sdf-D_MAX/POINT_COUNT);\n    \n    t = floor(t); // comment out for smooth\n    //background\n    fragColor = vec4(.95,.9,.8,0);\n    fragColor = alpha_blend(BLACK, fragColor, sdf_to_alpha(length(xy0)-1.15));\n    fragColor = alpha_blend(WHITE, fragColor, sdf_to_alpha(length(xy0)-1.1));\n    // points ... hours, minutes, seconds\n    fragColor = alpha_blend(GRAY,  fragColor, blobs_alpha);\n    fragColor = alpha_blend(BLACK, fragColor, hand(t, 12.0*60.0*60.0, xy0, .05, .7));\n    fragColor = alpha_blend(BLACK, fragColor, hand(t,      60.0*60.0, xy0, .03, .8));\n    fragColor = alpha_blend(RED,   fragColor, hand(t,           60.0, xy0, .02, .9));\n    fragColor = alpha_blend(BLACK, fragColor, sdf_to_alpha(length(xy0)-.04));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}