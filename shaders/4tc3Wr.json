{
    "Shader": {
        "info": {
            "date": "1468603756",
            "description": "Gameboy filter pass with \"dithering\"",
            "flags": 32,
            "hasliked": 0,
            "id": "4tc3Wr",
            "likes": 24,
            "name": "Gameboy pass",
            "published": 3,
            "tags": [
                "pass"
            ],
            "usePreview": 0,
            "username": "Kchplr",
            "viewed": 1098
        },
        "renderpass": [
            {
                "code": "#define GB_LINES 0 // lines dont look good with dithering\n#define GB_DESATURATE_BRIGHTER 0\n#define GB_RESOLUTION 3.0\n#define GB_DITHERING 1 // 0: no dither, 1: checkers dithering\n\nconst vec4 color1 = vec4(008. / 255., 025. / 255., 032. / 255., 1.);\nconst vec4 color2 = vec4(050. / 255., 106. / 255., 079. / 255., 1.);\nconst vec4 color3 = vec4(137. / 255., 192. / 255., 111. / 255., 1.);\nconst vec4 color4 = vec4(223. / 255., 246. / 255., 208. / 255., 1.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if (GB_LINES > 0)\n    float lineTest = float(GB_LINES) - 0.45;\n    if (mod(fragCoord.x, GB_RESOLUTION) < lineTest || mod(fragCoord.y, GB_RESOLUTION) < lineTest) {\n        fragColor = (color3 + color4 * 2.) / 3.;\n        return;\n    }\n\t#endif\n    \n    vec2 nearestFragCoord = fragCoord.xy - fract(fragCoord.xy / GB_RESOLUTION) * GB_RESOLUTION; //not needed with nearest\n\tvec2 uv = (nearestFragCoord.xy / iResolution.xy) / GB_RESOLUTION;\n    \n    #if (GB_DITHERING == 1)\n    int level = int(max(1.0, ceil(texture(iChannel1,uv).r * 7.)));\n    float dither = mod((floor(fragCoord.y / GB_RESOLUTION) + floor(fragCoord.x / GB_RESOLUTION)), 2.);\n    \n    \n    if (mod(float(level), 2.) < 1.) {\n        level += (1 - int(dither) * 2);\n    }\n            \n    if(level == 1) fragColor = color1;\n\t\telse if(level == 3) fragColor = color2;\n\t\telse if(level == 5) fragColor = color3;\n\t\telse if(level == 7) fragColor = color4;\n            \n    #if (GB_DESATURATE_BRIGHTER > 0)\n    fragColor = (fragColor + vec4(float(level) / 7., float(level) / 7., float(level) / 7., 1.)) / 2.;\n\t#endif\n            \n    #else\n    int level = int(max(1.0, ceil(texture(iChannel1,uv).r * 4.)));\n            \n    if(level == 1) fragColor = color1;\n\t\telse if(level == 2) fragColor = color2;\n\t\telse if(level == 3) fragColor = color3;\n\t\telse fragColor = color4;\n            \n    #if (GB_DESATURATE_BRIGHTER > 0)\n    fragColor = (fragColor + vec4(float(level) / 4., float(level) / 4., float(level) / 4., 1.)) / 2.;\n\t#endif\n    #endif\n    \n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GB_RESOLUTION 3.0\n#define GB_SOURCE_ADD -0.267\n#define GB_SOURCE_POWER 0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * GB_RESOLUTION;\n    \n    if (uv.x <= 1. && uv.y <= 1.) {\n    \tvec4 color = texture(iChannel0, uv);\n    \tfloat gray = (color.r * 0.8 + color.g * 1.0 + color.b * 0.9) / 2.7;\n\t\tgray = pow(clamp(gray + GB_SOURCE_ADD, 0., 1.), GB_SOURCE_POWER);\n        //gray = uv.x; // to test the dithering more easily\n        fragColor = vec4(gray, gray, gray, 1.);\n    } else {\n        fragColor = vec4(0,0,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}