{
    "Shader": {
        "info": {
            "date": "1614651089",
            "description": "Messing around with my trilinear surface intersector and decided to try making a simple UI to allow me to interact with it.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tyfzV",
            "likes": 78,
            "name": "Trilinear Isosurface Explorer",
            "published": 3,
            "tags": [
                "ray",
                "interactive",
                "intersection",
                "isosurface",
                "ui",
                "trilinear",
                "interpolation",
                "sliders",
                "explorer"
            ],
            "usePreview": 1,
            "username": "oneshade",
            "viewed": 1467
        },
        "renderpass": [
            {
                "code": "// Line drawing utility\nvoid drawLine(inout vec3 color, in vec3 lineColor, in vec2 p, in vec2 a, in vec2 b) {\n     float unit = 2.0 / iResolution.y;\n \n     vec2 pa = p - a, ba = b - a;\n     float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n     float d = length(pa - ba * h);\n \n     color = mix(color, lineColor, smoothstep(unit, 0.0, d));\n}\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel1, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\n// Quick slider drawing function, not super customizable\nvoid drawSlider(inout vec3 color, in vec2 p, in vec2 pos, in float len, in float rmin, in float rmax, in float val) {\n    p -= pos;\n\n    float hlen = 0.5 * len;\n    float unit = 2.0 / iResolution.y;\n\n    float d = length(vec2(max(0.0, abs(p.x) - hlen), p.y)) - 0.01;\n    color = mix(color, vec3(0.5), smoothstep(unit, 0.0, d));\n\n    d = length(p - vec2(mix(-hlen, hlen, (val - rmin) / (rmax - rmin)), 0.0)) - 0.02;\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, d));\n}\n\n// Cubic solver\nconst vec2 eta = vec2(-0.5, sqrt(0.75));\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float h = 18.0 * a * b * c * d - 4.0 * b * b * b * d + b * b * c * c - 4.0 * a * c * c * c - 27.0 * a * a * d * d;\n\n    b /= a, c /= a, d /= a;\n    float d0 = b * b - 3.0 * c;\n    float d1 = (2.0 * b * b - 9.0 * c) * b + 27.0 * d;\n    float q = d1 * d1 - 4.0 * d0 * d0 * d0, j = sqrt(abs(q));\n\n    vec2 C = q < 0.0 ? vec2(d1, j) : vec2(d1 + j, 0.0);\n    if (abs(C.x) + abs(C.y) < 1e-3) C = vec2(d1 - j, 0.0);\n    float t = atan(C.y, C.x) / 3.0, r = pow(0.25 * dot(C, C), 1.0 / 6.0);\n    C = vec2(cos(t), sin(t));\n\n    float w = -d0 / r - r;\n    roots.x = (C.x * w - b) / 3.0;\n    roots.y = (dot(vec2(C.x, -C.y), eta) * w - b) / 3.0;\n    if (h > 0.0) roots.z = (dot(C, eta) * w - b) / 3.0;\n    else if (abs(dot(C.yx, eta)) < abs(C.y)) roots.x = roots.y;\n\n    return h < 0.0 ? 1 : 3;\n}\n\nvec4 solveCubic2(in float a, in float b, in float c, in float d) {\n    vec3 roots;\n    int nroots = solveCubic(d, c, b, a, roots);\n    roots.x = 1.0 / roots.x;\n    if (nroots > 1) roots.yz = 1.0 / roots.yz;\n    return vec4(roots, nroots);\n}\n\n// Intersection\nvec4 iTrilinearIsoSurf(in vec3 ro, in vec3 rd, in float a, in float b, in float c, in float d, in float e, in float f, in float g, in float h) {\n    vec4 u = vec4(-a + b + c - d + e - f - g + h, a - b - c + d, a - b - e + f, a - c - e + g);\n    vec3 v = vec3(b, c, e) - a;\n\n    vec3 xxyyzz = ro.xxy * ro.yzz;\n    vec3 uuvvww = rd.xxy * rd.yzz;\n\n    float t3 = u.x * rd.x * rd.y * rd.z;\n    float t2 = dot(ro.zyx, uuvvww) * u.x + dot(u.yzw, uuvvww);\n    float t1 = dot(u, vec4(dot(xxyyzz, rd.zyx), dot(ro.xy, rd.yx), dot(ro.xz, rd.zx), dot(ro.yz, rd.zy))) + dot(v, rd);\n    float t0 = u.x * ro.x * ro.y * ro.z + dot(u.yzw, xxyyzz) + dot(v, ro) + a;\n\n    return solveCubic2(t3, t2, t1, t0);\n}\n\n// Normal\nvec3 nTrilinearIsoSurf(in vec3 p, in float a, in float b, in float c, in float d, in float e, in float f, in float g, in float h) {\n    vec4 u = vec4(-a + b + c - d + e - f - g + h, a - b - c + d, a - b - e + f, a - c - e + g);\n    return normalize(u.x * p.yxx * p.zzy + u.yyz * p.yxx + u.zww * p.zzy + vec3(b, c, e) - a);\n}\n\nbool intersectIsValid(in vec3 p, in float t) {\n    return t > 0.0 && all(lessThan(abs(p - 0.5), vec3(0.5)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = ((iMouse.xy - center) / iResolution.y - renderOffs) * 3.14;\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.0);\n    if (mouse.x < -1.5) mouse = vec2(0.0);\n\n    vec2 uv1 = (fragCoord - center) / iResolution.y, uv2 = uv1 - renderOffs;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rd = normalize(vec3(uv2, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Center (the surface goes from (0, 0, 0) to (1, 1, 1))\n    ro += 0.5;\n\n    // Isovalues\n    float a = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    float b = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n    float c = texelFetch(iChannel0, ivec2(2, 0), 0).x;\n    float d = texelFetch(iChannel0, ivec2(3, 0), 0).x;\n    float e = texelFetch(iChannel0, ivec2(4, 0), 0).x;\n    float f = texelFetch(iChannel0, ivec2(5, 0), 0).x;\n    float g = texelFetch(iChannel0, ivec2(6, 0), 0).x;\n    float h = texelFetch(iChannel0, ivec2(7, 0), 0).x;\n\n    vec4 intersect = iTrilinearIsoSurf(ro, rd, a, b, c, d, e, f, g, h);\n    int numIntersects = int(intersect[3]);\n\n    // Find closest valid intersection\n    vec3 hitPos;\n    float tMin = 1000000.0;\n    bool intersecting = false;\n    for (int i=0; i < numIntersects; i++) {\n        vec3 posCandid = ro + rd * intersect[i];\n        float tCandid = intersect[i];\n        if (intersectIsValid(posCandid, tCandid) && tCandid < tMin) {\n            hitPos = posCandid;\n            tMin = tCandid;\n            intersecting = true;\n        }\n    }\n\n    // Render the surface\n    if (intersecting) {\n        vec3 n = nTrilinearIsoSurf(hitPos, a, b, c, d, e, f, g, h);\n        fragColor = vec4(abs(n), 1.0);\n    }\n\n    // Bounding box geometry\n    vec3[] bboxVerts = vec3[8](vec3(-0.5, -0.5, -0.5), vec3( 0.5, -0.5, -0.5),\n                               vec3(-0.5,  0.5, -0.5), vec3( 0.5,  0.5, -0.5),\n                               vec3(-0.5, -0.5,  0.5), vec3( 0.5, -0.5,  0.5),\n                               vec3(-0.5,  0.5,  0.5), vec3( 0.5,  0.5,  0.5));\n\n    ivec2[] bboxEdges = ivec2[12](ivec2(0, 1), ivec2(1, 3), ivec2(3, 2), ivec2(2, 0),\n                                  ivec2(0, 4), ivec2(1, 5), ivec2(2, 6), ivec2(3, 7),\n                                  ivec2(4, 5), ivec2(5, 7), ivec2(7, 6), ivec2(6, 4));\n\n    // Transform bounding box vertices\n    for (int v=0; v < 8; v++) {\n        vec3 vert = bboxVerts[v];\n        vert.xz *= mat2(cy, sy, -sy, cy);\n        vert.yz *= mat2(cp, sp, -sp, cp);\n        vert.z -= 3.0;\n        bboxVerts[v] = vert;\n    }\n\n    // Render bounding box\n    for (int e=0; e < 12; e++) {\n        ivec2 edge = bboxEdges[e];\n        vec3 a1 = bboxVerts[edge[0]];\n        vec3 b1 = bboxVerts[edge[1]];\n        if (max(-a1.z, -b1.z) < tMin) {\n            vec2 a2 = -a1.xy / a1.z;\n            vec2 b2 = -b1.xy / b1.z;\n            drawLine(fragColor.rgb, vec3(0.0, 1.0, 0.0), uv2, a2, b2);\n        }\n    }\n\n    // Draw sliders\n    float hlen = 0.5 * sliderLen;\n    float[] isovalues = float[8](a, b, c, d, e, f, g, h);\n    int[] chars = int[8](65, 66, 67, 68, 69, 70, 71, 72); // A, B, C, D, E, F, G, H\n    for (int i=0; i < 8; i++) {\n        drawSlider(fragColor.rgb, uv1, sliders[i], sliderLen, sliderMin, sliderMax, isovalues[i]);\n        drawChar(fragColor.rgb, vec3(1.0), uv1, vec2(sliders[i].x + hlen + 0.075, sliders[i].y), vec2(0.065), chars[i]);\n\n        // Label the corner\n        vec3 corner = bboxVerts[i];\n        if (-corner.z < tMin) {\n            corner.xy += normalize(corner.xy) * 0.1;\n            vec2 charPos = -corner.xy / corner.z;\n            drawChar(fragColor.rgb, vec3(1.0), uv2, charPos, vec2(0.065), chars[i]);\n        }\n    }\n\n    // -\n    drawChar(fragColor.rgb, vec3(1.0), uv1, vec2(sliders[0].x - hlen, sliders[0].y + 0.085), vec2(0.065), 45);\n\n    // 5\n    drawChar(fragColor.rgb, vec3(1.0), uv1, vec2(sliders[0].x - hlen + 0.025, sliders[0].y + 0.085), vec2(0.065), 53);\n\n    // 0\n    drawChar(fragColor.rgb, vec3(1.0), uv1, vec2(sliders[0].x, sliders[0].y + 0.085), vec2(0.065), 48);\n\n    // 5\n    drawChar(fragColor.rgb, vec3(1.0), uv1, vec2(sliders[0].x + hlen - 0.025, sliders[0].y + 0.085), vec2(0.065), 53);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    if (iFrame == 0) {\n        if (iFragCoord.x == 0) fragColor.x = 0.0;\n        if (iFragCoord.x == 1) fragColor.x = -1.25;\n        if (iFragCoord.x == 2) fragColor.x = 0.5;\n        if (iFragCoord.x == 3) fragColor.x = 0.0;\n        if (iFragCoord.x == 4) fragColor.x = -0.75;\n        if (iFragCoord.x == 5) fragColor.x = 0.0;\n        if (iFragCoord.x == 6) fragColor.x = 0.0;\n        if (iFragCoord.x == 7) fragColor.x = 2.0;\n    }\n\n    if (iFrame > 0 && iFragCoord.y == 0 && iFragCoord.x < 8) {\n        fragColor = texelFetch(iChannel0, iFragCoord, 0);\n        vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n        // Slider state\n        vec2 slider = sliders[iFragCoord.x];\n        vec2 sliderEnds = slider.x + vec2(-0.5, 0.5) * sliderLen;\n        vec2 curPos = vec2(mix(sliderEnds.x, sliderEnds.y, (fragColor.x - sliderMin) / (sliderMax - sliderMin)), slider.y);\n\n        // Update the slider if it is within the selection radius\n        if (iMouse.z > 0.0 && length(mouse - curPos) < selectRadius) {\n            fragColor.x = mix(sliderMin, sliderMax, clamp((mouse.x - sliderEnds.x) / sliderLen, 0.0, 1.0));\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Offset of the 3D render\n#define renderOffs vec2(0.3, 0.0)\n\n// Mouse selection radius\n#define selectRadius 0.05\n\n// Slider range\n#define sliderMin -5.0\n#define sliderMax 5.0\n\n// Slider length\n#define sliderLen 0.5\n\n// Slider positions (top to bottom)\nconst vec2[] sliders = vec2[8](vec2(-0.55,  0.35),\n                               vec2(-0.55,  0.25),\n                               vec2(-0.55,  0.15),\n                               vec2(-0.55,  0.05),\n                               vec2(-0.55, -0.05),\n                               vec2(-0.55, -0.15),\n                               vec2(-0.55, -0.25),\n                               vec2(-0.55, -0.35));",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}