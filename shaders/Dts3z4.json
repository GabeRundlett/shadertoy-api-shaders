{
    "Shader": {
        "info": {
            "date": "1697800063",
            "description": "A plain box, rotating in projective 3-space, so splitting up into two parts when it is bisected by the plane at infinity.\n\nMouse rotates, up/down to zoom. Also a,f,g,n,t.",
            "flags": 48,
            "hasliked": 0,
            "id": "Dts3z4",
            "likes": 11,
            "name": "Projective Box",
            "published": 3,
            "tags": [
                "box",
                "projective"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "// Projective Box, mla, 2023\n//\n// Draw a 3d box undergoing projective transformation, ie. a 4x4 matrix acting\n// on homogeneous coordinates. In particular, this means that the box can\n// be bisected by the plane at infinity and appear as two parts.\n//\n// A fairly dumb raytracing approach - compute analytic intersection with\n// the six box sides and find nearest. Cleverer ideas welcome.\n//\n// There is a check that the normals are correctly calculated from the\n// R4 coordinates - compute normals for two nearby points and assert if\n// they are signicantly different (this of course happens when they are\n// separated by an edge).\n//\n// a: centre view\n// f: fog\n// g: grid\n// n: check normals\n// t: texture\n\nfloat sgn(float x) {\n  if (x <= 0.0) return -1.0;\n  else return 1.0;\n}\n\n// Return distance to x plane, also uv and the plane itself\nfloat xplane(vec4 p, vec4 r, float w, out vec2 uv, out vec4 plane) {\n  plane = vec4(1,0,0,w);\n  float t = -dot(p,plane)/dot(r,plane);\n  vec4 q = p+t*r;\n  uv = vec2(-sgn(w),1)*q.yz/q.w;\n  return t;\n}\n\n// Same for y and z planes\nfloat yplane(vec4 p, vec4 r, float w, out vec2 uv, out vec4 plane) {\n  plane = vec4(0,1,0,w);\n  float t = -dot(p,plane)/dot(r,plane);\n  vec4 q = p+t*r;\n  uv = vec2(-sgn(w),1)*q.zx/q.w;\n  return t;\n}\n\nfloat zplane(vec4 p, vec4 r, float w, out vec2 uv, out vec4 plane) {\n  plane = vec4(0,0,1,w);\n  float t = -dot(p,plane)/dot(r,plane);\n  vec4 q = p+t*r;\n  uv = vec2(-sgn(w),1)*q.xy/q.w;\n  return t;\n}\n\nfloat iBox(vec4 p, vec4 r, out vec2 uv, out vec4 plane) {\n  float t = 1e8;\n  for (float w = -1.0; w <= 1.0; w += 2.0) {\n    float t1; vec2 uv1; vec4 plane1;\n    t1 = xplane(p,r,w,uv1,plane1);\n    if (t1 > 0.0 && t1 < t && max(abs(uv1.x),abs(uv1.y)) < 1.0) {\n      t = t1; uv = uv1; plane = plane1;\n    }\n    t1 = yplane(p,r,w,uv1,plane1);\n    if (t1 > 0.0 && t1 < t && max(abs(uv1.x),abs(uv1.y)) < 1.0) {\n      t = t1; uv = uv1; plane = plane1;\n    }\n    t1 = zplane(p,r,w,uv1,plane1);\n    if (t1 > 0.0 && t1 < t && max(abs(uv1.x),abs(uv1.y)) < 1.0) {\n      t = t1; uv = uv1; plane = plane1;\n    }\n  }\n  if (t == 1e8) return -1.0;\n  return t;\n}\n\nbool dorotate = true;\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    p.yz = rotate(p.yz,-theta);\n    p.zx = rotate(p.zx,phi);\n  }\n  if (dorotate) {\n    p.xz = rotate(p.xz,iTime*0.15);\n  }\n  return p;\n}\n\nfloat scene(vec4 p, vec4 r, out vec2 uv, out vec3 normal) {\n  vec3 axis = normalize(vec3(1));\n  float theta = iTime*0.1; \n  mat4 m = qmat(vec4(-sin(theta)*axis,cos(theta)));\n  //m = mat4(1);\n  //m = mat4(1,0,1,1, 1,1,0,0, 0,0,1,0, 0,0,0,1);  \n  p = m*p;\n  r = m*r;\n  vec4 plane;\n  float t = iBox(p,r,uv,plane);\n  normal = plane*mat3x4(m);\n  normal = normalize(normal);\n  return t;\n}\n\nfloat sphere(vec3 ro, vec3 rd, vec3 c, float r) {\n  ro -= c;\n  ro -= dot(ro,rd)*rd;\n  float d = length(ro);\n  return smoothstep(0.0,fwidth(d),d-r);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float AA = 1.0;\n  float camera = 4.0;\n  if (key(CHAR_A)) camera = 0.1;\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  vec3 ro = vec3(0,0,camera);\n  ro = transform(ro);\n  vec3 light = vec3(0,0,2);\n  light = transform(light);\n  vec3 aacol = vec3(0);\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 rd = vec3(uv,-2);\n      rd = transform(rd);\n      rd = normalize(rd);\n      vec3 normal;\n      vec3 bgcol = vec3(0);\n      vec3 col = bgcol;\n      float t = scene(vec4(ro,1),vec4(rd,0),uv,normal);\n      if (t > 0.0) {\n        col = vec3(0.5);\n        if (!key(CHAR_T)) col = texture(iChannel0,0.5*(uv)+0.5).rgb;\n        if (!key(CHAR_G)) {\n          float lwidth = 0.01;\n          vec2 tuv = abs(uv);\n          tuv = fract(tuv);\n          tuv = min(tuv,1.0-tuv);\n          float ldist = min(tuv.x,tuv.y)-lwidth;\n          tuv = 4.0*uv;\n          tuv -= round(tuv);\n          tuv = abs(tuv);\n          tuv /= 4.0;\n          ldist = min(ldist,min(tuv.x,tuv.y)-0.5*lwidth);\n          col *= smoothstep(0.0,fwidth(ldist),ldist);\n        }\n        if (dot(rd,normal) > 0.0) normal = -normal;\n        float ambient = 0.2;\n        vec3 lightdir = normalize(light); // Light at infinity\n        float diffuse = max(0.0,dot(normal,lightdir));\n        //col = vec3(0.5);\n        col *= ambient+0.8*diffuse;\n        float fog = 2.0*atan(0.25*t)/PI;\n        if (!key(CHAR_F)) col = mix(col,bgcol,fog);\n      }\n      if (key(CHAR_N)) {\n        // Sanity check for normals\n        vec3 rd0 = normalize(transform(vec3(0,0,-2)));\n        vec3 normal0, normal1;\n        float t0 = scene(vec4(ro,1),vec4(rd0,0),uv,normal0);\n        if (t0 > 0.0) {\n          vec3 rd1 = normalize(transform(vec3(0,0.1,-2)));\n          float t1 = scene(vec4(ro,1),vec4(rd1,0),uv,normal1);\n          assert(length(normal0-normal1) < 1e-4);\n          vec3 p0 = ro+t0*rd0;\n          vec3 p1 = ro+t1*rd1;\n          col *= sphere(ro,rd,p0,0.01);\n          col *= sphere(ro,rd,p1,0.01);\n          assert(abs(dot(normal0,p1-p0)) < 1e-4);\n        }\n      }\n      aacol += col;\n    }\n  }\n  aacol /= float(AA*AA);\n  aacol = pow(aacol,vec3(0.4545)); // gamma correction\n  if (alert) aacol.r = 1.0;\n  fragColor = vec4(aacol,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nint assert(bool b) {\n  if (!b) alert = true;\n  return 0;\n}\n\n// Rotation matrices, nb: column major.\n// Matrix from quaternion\nmat3 qrot(vec4 q) {\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  return 2.0*mat3(0.5-y*y-z*z, x*y+z*w,     x*z-y*w,\n                  x*y-z*w,     0.5-x*x-z*z, y*z+x*w,\n                  x*z+y*w,     y*z-x*w,     0.5-x*x-y*y);\n}\n\n// Quaternion multiplication as a matrix.\n// This is a \"Clifford translation\" in R4\nmat4 qmat(vec4 q) {\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  return mat4( w, z,-y,-x, \n               -z, w, x,-y,\n               y,-x, w,-z,\n               x, y, z, w);\n}\n\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\nconst int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\nconst int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\nconst int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n\nfloat PI = 3.14159265;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    float w1 = keystate(i,2).x;\n    if (keystate(KEY_ALT,0).x == 0.0 && w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}