{
    "Shader": {
        "info": {
            "date": "1487961155",
            "description": "watttter",
            "flags": 32,
            "hasliked": 0,
            "id": "ldXcDH",
            "likes": 3,
            "name": "water water warter",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "//light from https://www.shadertoy.com/view/MsGSRd\nconst float SIGMOID_CONTRAST = 6.0;\nfloat colormap_red(float x) {\n\tfloat v = ((((-2.83671754639782E+03 * x + 6.51753994553536E+03) * x - 5.00110948171466E+03) * x + 1.30359712298773E+03) * x - 2.89958300810074E+02) * x + 2.48458039402758E+02;\n\tif (v < 8.0) {\n\t\treturn 8.0;\n\t} else {\n\t\treturn v;\n\t}\n}\n\nfloat colormap_green(float x) {\n\treturn (((((-1.36304822155833E+03 * x + 4.37691418182849E+03) * x - 5.01802019417285E+03) * x + 2.39971481269598E+03) * x - 5.65401491984724E+02) * x - 1.48189675724133E+01) * x + 2.50507618187374E+02;\n}\n\nfloat colormap_blue(float x) {\n\tif (x < 0.3756393599187693) {\n\t\treturn (9.62948273917718E+01 * x - 1.96136874142438E+02) * x + 2.41033490809633E+02;\n\t} else if (x < 0.6215448666633865) {\n\t\treturn 1.21184043778803E+02 * x + 1.35422939068100E+02;\n\t} else if (x < 0.8830064316178203) {\n\t\treturn -1.53052165744713E+02 * x + 3.05873047350666E+02;\n\t} else {\n\t\treturn -3.49468965517114E+02 * x + 4.79310344827486E+02;\n\t}\n}\n\nvec4 colormap(float x) {\n\tfloat r = clamp(colormap_red(x) / 255.0, 0.0, 1.0);\n\tfloat g = clamp(colormap_green(x) / 255.0, 0.0, 1.0);\n\tfloat b = clamp(colormap_blue(x) / 255.0, 0.0, 1.0);\n\treturn vec4(r, g, b, 1.0);\n}\n\nfloat getVal(vec2 uv)\n{\n    return length(texture(iChannel0,uv).xyz);\n}\n\nvec3 contrast(vec3 x){\n  return 1.0 / (1.0 + exp(-SIGMOID_CONTRAST * (x - 0.5)));   \n}\n    \nvec2 getGrad(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 uv = fragCoord.xy / res;\n    \n    vec3 n = vec3(getGrad(uv,1.0/iResolution.y),350.0);\n    n=normalize(n);\n    vec3 light = normalize(vec3(0.25,0.75,2.25));\n    float diff=clamp(dot(n,light),0.5,1.0);\n    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);\n    spec=pow(spec,64.0)*1.5;\n    \n    float osc = sin(iTime*0.25)*0.5 + 0.5;\n    vec4 fb = texture(iChannel0, uv);\n    fb = colormap(fb.r);\n    fb.rgb = contrast(fb.rgb);\n    //fb.rgb += vec3(0.05,-0.05,0.0);\n    \n    //fb*=0.75;\n\tfragColor = fb * diff + spec;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float SIGMOID_CONTRAST = 6.0;\n\n\nfloat diff(vec2 t, vec2 b){\n \tvec3 t1 = texture(iChannel0, t).xyz;\n    vec3 t2 = texture(iChannel0, b).xyz;\n    return dot(t1, vec3(1.0)) - dot(t2, vec3(1.0));\n}\n\nvec3 contrast(vec3 x){\n  return 1.0 / (1.0 + exp(-SIGMOID_CONTRAST * (x - 0.5)));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = fragCoord.xy / res;\n\tuv = -1.0 + 2.0*uv;\n    //uv *= 0.999;\n    float dir = radians(mod(iTime, 360.0));\n    vec2 angle = vec2(sin(dir), cos(dir))*1.5;\n    uv += angle*0.0005;\n    uv += angle.yx*0.0001;\n    //uv*= 0.995;\n    uv = uv*0.5 + 0.5;\n    \n    vec2 step = vec2(2.0 / res);\n    \n    /*\n    vec2 topL = uv - step;\n    vec2 topR = uv + vec2(step.x, -step.y);\n    vec2 bottomL = uv + vec2(-step.x, step.y);\n    vec2 bottomR = uv + step;\n    */\n    \n    vec2 top = uv + vec2(0.0,-step.y);\n    vec2 bottom = uv + vec2(0.0,step.y);\n    vec2 left = uv + vec2(-step.x, 0.0);\n    vec2 right = uv + vec2(step.x, 0.0);\n    \n    float gradient1 = diff(left, right)*angle.x;\n    float gradient2 = diff(top, bottom)*angle.y;\n    \n    vec4 fc = vec4( length(gradient1+gradient2)*0.1);\n    \n    if(iFrame < 30 || iMouse.z >0.0){\n        fragColor = texture(iChannel1, uv);\n    } else {\n        vec4 old = texture(iChannel0, uv);\n        fc.rgba = (fc.rgba * fc.a) + (old*(1.0 - fc.a));\n        fc+= 0.0075;\n    \tfragColor = clamp(fc, vec4(0.0), vec4(1.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}