{
    "Shader": {
        "info": {
            "date": "1652377732",
            "description": "the same layering texhnique use here [url=https://www.shadertoy.com/view/7lXBz4]Voronoi Tracking Experiment 3(/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Nt2fzG",
            "likes": 9,
            "name": "Fractal Experiment 33",
            "published": 3,
            "tags": [
                "fractal",
                "experiment",
                "12"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Voronoi Tracking Experiment 1\n\n// based on the shader https://www.shadertoy.com/view/tlKGDh of michael0884\n\n// use mouse for add particles\n// use spacebar for clear the screen\n\n#define COUNT_STEPS 1000\n#define SCALE_STEP 0.001\n    \nfloat layer(vec2 p, float scale)\n{\n\tp -= iResolution.xy * 0.5;\n\tp *= scale;\n\tp += iResolution.xy * 0.5;\n\t\t\n\treturn texelFetch(iChannel0, ivec2(p), 0).w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,0,1);\n    vec3 color = vec3(1);\n    \n    // layering of same texture\n\tfloat fcount = float(max(COUNT_STEPS, 1));\n\tfloat scale = 1.0 + fcount * SCALE_STEP;\n\tfloat fog = 0.0;\n\tfloat fogStep = 1.0 / fcount;\n\tfor (int i = 0 ; i < COUNT_STEPS ; ++i)\n\t{\n\t\tscale -= SCALE_STEP;\n\t\tfog += fogStep;\n\t\tfloat k = layer(fragCoord, scale);\n\t\tif (k < 0.5) // smart merge for avoid overwrite\n\t\t\tfragColor.rgb = color * fog;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define AA 2\n#define COUNT_PETALS \t0.\n#define TIME_SPEED \t\t0.5\n#define BUMP_FACTOR     0.05\n#define MOVE_SPEED\t\t0.0\n\n#define ITERATIONS 23.0\n\nvec3 sdf(vec2 p, float t) {\n\tfloat a = 1.57;\n\tp *= mat2(cos(a),-sin(a),sin(a),cos(a));\n    vec2 z = vec2(0);\n\t\n    float d = 1.0;\n    for (float i=0.;i<ITERATIONS;i++){\t\n        z = mat2(z,-z.y,z.x) * z + p - vec2(0.5,0.); // julia\n        d = dot(z,z);\n        if (d > 4.0) {\n            break;\n        }\n\t}\n\t\t\n    float sdf = 2.0 - sqrt(d) * log(d);\n\t\n    z = vec2(atan(z.x+sin(t * MOVE_SPEED)*0.5,z.y), length(z * 3.5)); \t// cart to polar\n    for (int i=0; i<3; i++)\n\t{\n\t\t//z.y += cos(z.x * COUNT_PETALS - t)/3.; \t// l warping \n\t\tz.x += sin(z.y * 4. - t*2.)/3.;\t\t\t// a warping\n    }\n\tz = vec2(cos(z.x), sin(z.x)) * z.y; \t\t// polar to cart\n\tz = abs(fract(z)-0.5);\t\t\t\t\t\t// domain repeat\n\t\n\tvec3 warp = vec3(length(z), z);\n\twarp = smoothstep(0.0, 1.0, sdf) * warp;\n\treturn warp;\n}\n\nvec3 getMatCap(sampler2D sam, vec3 rd, vec3 n) {\n\tvec3 r = reflect( rd, n );\n    r.z = 1.0 - r.z;\n\tfloat m = 2. * length(r);\n\tvec2 tN = r.xy / m + .5;\n    return texture(sam, tN).rgb;\n}\n\nvec4 render(in vec2 v, in vec2 o)\n{\n    float t = iTime * TIME_SPEED; \n\t\n    vec2 uv = (v + o - iResolution.xy*0.5)/iResolution.y * 2.2;\n    vec3 rd = normalize(vec3(uv, 1.));\n\n\t// light point\n    vec3 lp = vec3(cos(iTime)*0.5, sin(iTime)*0.2, -1.);\n\t\n\t// bump mapping\n\tvec2 eps = vec2(5./iResolution.y, 0.);\n    vec3 f = sdf(uv, t);\n    float fx = (sdf(uv-eps.xy, t).x-f.x)/eps.x;\n    float fy = (sdf(uv-eps.yx, t).x-f.x)/eps.x;\n\tvec3 n = normalize( vec3(0., 0., -1) + vec3(fx, fy, 0.0) * BUMP_FACTOR );  \n\t\n\t// distance to light point\n\tvec3 ld = lp - vec3(uv,0);\n\tfloat lDist = max(length(ld), 0.001);\n\tld /= lDist;\n    float atten = (f.x*0.9+0.1)/(1.0 + lDist*lDist*0.15);\n\t\n\t// diffuse\n\tfloat diff = max(dot(n, ld), 0.);  \n    diff = pow(diff, 4.)*0.7 + pow(diff, 8.)*0.3; \n\t\n\t// specular\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 12.); \n    \n\t// texture\n\tvec3 col = getMatCap(iChannel0, vec3(uv + f.yz, 1.0), n);\n\t//vec3 col = texture(iChannel0, uv + f.yz).xyz; \n    col = smoothstep(0.05, .75, pow(col*col, vec3(.75, .8, .85)));    \n    \n\t// final light\n\tcol = (col * (diff*vec3(0.496, 0.853, 1.0)*2. + 0.5) + vec3(1)*spec*2.)*atten;\n\treturn vec4(sqrt(clamp(col, 0., 1.)), 1.);\n}\n\nvoid mainImage(vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    int _AA = max(AA,1); // avoid div by 0 at line 69\n    \n\tfor(int i=0;i<_AA;i++)\n    for(int j=0;j<_AA;j++)\n        fragColor += render(fragCoord, vec2(i,j) / float(_AA));\n    \n    fragColor /= float(_AA * _AA);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}