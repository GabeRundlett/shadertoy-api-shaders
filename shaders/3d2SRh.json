{
    "Shader": {
        "info": {
            "date": "1552934402",
            "description": "distance to a polygon. almost works.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2SRh",
            "likes": 6,
            "name": "almost polygon distance",
            "published": 3,
            "tags": [
                "distance",
                "polygon"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "#define PI acos(-1.0)\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n#define sides 10\n\nfloat plane(vec2 p, vec2 n, float l) {\n    return dot(p,n)-l;\n}\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n#define plot(p, s, t) len = min(len,abs(length(p)*aa-s)-t)\n\n#define size2(i) (0.2+hash(i))\n\nfloat size(int i) {\n    return mix(size2(float(i)+float(int(iTime*0.3+0.0))*PI),\n               size2(float(i)+float(int(iTime*0.3+1.0))*PI),\n               fract(iTime*0.3));\n}\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 2.0;\n    vec2 uv = scale*(fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec2 muv = scale*(iMouse.xy*2.0-iResolution.xy)/iResolution.y;\n    float aa = iResolution.y/scale*0.4;\n\n    float len = -10000.0;\n    float len3 = 10000.0;\n\n    vec2 n = vec2(0,1);\n\n    for (int i = 0; i < sides; i++) {\n        n *= rot(PI/float(sides)*2.0);\n\n        float l = plane(uv,n,size(i));\n\n        len3 = min(len3,abs(l));\n        len = max(l,len);\n    }\n    len = abs(len3)*aa+clamp(1.0-abs(len)*aa,0.0,1.0);\n\n    if (iMouse.z > 0.0) {\n        float len1 = -1000.0;\n        float len2 = -1000.0;\n        n = vec2(0,1);\n        vec2 dir1;\n        vec2 dir2;\n        float s1;\n        float s2;\n\n        plot(muv-uv, 4.0/aa, 4.0);\n\n        for (int i = 0; i < sides; i++) {\n            n *= rot(PI/float(sides)*2.0);\n\n            float s = size(i);\n            float l = plane(muv,n,s);\n\n            if (l > 0.0)\n                plot((muv-l*n)-uv, 3.0, 0.0);\n\n            if (l > len2) {\n                if (l > len1) {\n                    len2 = len1;\n                    dir2 = dir1;\n                    s2 = s1;\n\n                    len1 = l;\n                    dir1 = n;\n                    s1 = s;\n                } else {\n                    len2 = l;\n                    dir2 = n;\n                    s2 = s;\n                }\n            }\n        }\n\n        if (len2 > 0.0) {\n            vec2 dir3 = vec2(dir1.y,-dir1.x);\n            vec2 dir4 = vec2(dir2.y,-dir2.x);\n\n            vec2 p = muv-len1*dir1;\n\n            float l = max(plane(p,dir2,s2),0.0);\n\n            plot(p-l*dir3/dot(dir3,dir2)-uv, 9.0, 1.0);\n            plot(p-uv, 7.0, 0.0);\n            plot(muv-len2*dir2-uv, 5.0, 0.0);\n        } else {\n            plot(muv-len1*dir1-uv, 9.0, 1.0);\n        }\n    }\n\n    float len1 = -1000.0;\n    float len2 = -1000.0;\n    n = vec2(0,1);\n    vec2 dir1;\n    vec2 dir2;\n    float s1;\n    float s2;\n\n    for (int i = 0; i < sides; i++) {\n        n *= rot(PI/float(sides)*2.0);\n\n        float s = size(i);\n        float l = plane(uv,n,s);\n\n        if (l > len2) {\n            if (l > len1) {\n                len2 = len1;\n                dir2 = dir1;\n                s2 = s1;\n\n                len1 = l;\n                dir1 = n;\n                s1 = s;\n            } else {\n                len2 = l;\n                dir2 = n;\n                s2 = s;\n            }\n        }\n    }\n\n    float len4;\n\n    if (len2 > 0.0) {\n        vec2 dir3 = vec2(dir1.y,-dir1.x);\n        vec2 dir4 = vec2(dir2.y,-dir2.x);\n\n        vec2 p = uv-len1*dir1;\n\n        float l = max(plane(p,dir2,s2),0.0);\n\n        p += dir3*l/dot(dir3,dir2);\n\n        len4 = length(p-uv);\n    } else {\n        len4 = len1;\n    }\n\n\n    vec3 col = vec3(1.0) - sign(len4)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(len4));\n    col *= 0.8 + 0.2*cos(120.0*abs(len4));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(len4+0.02)) );\n\n    col *= min(len,1.0);\n\n    // Output to screen\n    fragColor = vec4(sqrt(col),1);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}