{
    "Shader": {
        "info": {
            "date": "1612592151",
            "description": "Simple 2D spotlight shader. Click to point light.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtcfDH",
            "likes": 3,
            "name": "2D SpotLight Formula",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "light",
                "spotlight"
            ],
            "usePreview": 1,
            "username": "cwook",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "\n// uncomment  to point light at the center of the screen, otherwise rotate light with time\n//#define POINT_TO_CENTER\n\nfloat PI = 3.141592653589793238462643;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // length of light based on sin(time)\n    float lightLength = 1.f;//(1.2 + sin(iTime * 1.5)) * 0.5;\n    \n    float angle = 25.0;\n    float angleTwo = 3.0;\n    \n    // set light position to mouse position in uv coordinates\n    vec2 lightpos = vec2(cos(iTime) * 0.25 + 0.5, sin(iTime) * 0.25 + 0.5);//iMouse.x / iResolution.x, iMouse.y / iResolution.y);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // used to fix aspect ratio\n    float off = iResolution.x / iResolution.y;\n    \n    // distance from light position to uv position\n    vec2 disp = (uv - lightpos);\n    disp.x *= off;\n    \n    vec2 dir;\n    \n#ifdef POINT_TO_CENTER\n    dir = vec2(0.5) - lightpos;\n    dir /= length(dir);\n#else\n    dir = vec2( iMouse.x / iResolution.x, iMouse.y / iResolution.y ) - lightpos;\n    dir /= length(dir);\n#endif\n    \n    // radial distance fade\n    vec3 col = vec3( pow( clamp( (1.0 - length(disp) / lightLength), 0.0, 1.0 ), 1.5 ) );\n    \n    // map radians to 0-1 space\n    \n    // angular distance fade\n    // dot product\n    float dotp = clamp( dot( dir, disp / length(disp) ), 0.0, 1.0);\n    // convert desired angle to 0-1 space\n    float div = 1.0 - angle / 180.0;\n    // smoothstep remaps 0-1 range to div-1\n    float d = smoothstep(div, 1., dotp);\n    // convert angleTwo to 0-1 space\n    div = 1.0 - angleTwo / 180.0;\n    // smoothstep remaps 0-1 range to div-1\n    float d2 = smoothstep(div, 1., dotp);\n    \n    // combine radial and angular distance fade\n    // also adjust intensity and color if desired\n    col *= pow(d,1.0) * vec3(0.75,0.75,0.75) + pow(d2,4.0) * vec3(2.5,1.,1.);\n    \n    // screen texture\n    vec4 screen = texture(iChannel0, uv * 1.850);\n    \n    // combine screen with light mask\n    fragColor = screen * vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}