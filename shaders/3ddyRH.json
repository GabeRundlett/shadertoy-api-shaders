{
    "Shader": {
        "info": {
            "date": "1600388226",
            "description": "This is my first ray marching shader! The concept was taken from the ray marching tutorial by Michael Walczyk. The texture is mapped using spherical coordinates and the shading is lambertian (diffuse). Move the mouse to position the light.",
            "flags": 32,
            "hasliked": 0,
            "id": "3ddyRH",
            "likes": 4,
            "name": "Checkered Sphere",
            "published": 3,
            "tags": [
                "raymarching",
                "sphere",
                "checkered"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "vec3 lightDirection = normalize(vec3(-0.58, 0.58, 0.58));\nfloat focalLength = 400.0;\nfloat sphereRotation = 0.0;\n\nconst float MAX_TRACE_DISTANCE = 1000.0;\nconst float MIN_HIT_DISTANCE = 0.001;\nconst int MAX_STEPS = 32;\n\nvec3 rotatePointAbout(in vec3 p, in vec3 o, in float r) {\n    float cosTheta = cos(r);\n    float sinTheta = sin(r);\n    vec3 relativePosition = p - o;\n    vec3 rotatedPoint = vec3(relativePosition.x * cosTheta + relativePosition.z * sinTheta, relativePosition.y, relativePosition.x * sinTheta - relativePosition.z * cosTheta);\n    return rotatedPoint + o;\n}\n\nfloat sdSphere(in vec3 p, in vec3 o, in float r) {\n    return length(p - o) - r;\n}\n\nvec4 rayMarch(in vec3 ro, in vec3 rd) {\n    float distanceTraveled = 0.0;\n    for (int iterations=0; iterations < MAX_STEPS; ++iterations) {\n        vec3 sphereOrigin = vec3(0.0, 0.0, -400.0);\n        float sphereRadius = 100.0;\n        vec3 currentPosition = ro + rd * distanceTraveled;\n        vec3 relativePosition = rotatePointAbout(currentPosition, sphereOrigin, sphereRotation);\n        float distanceToClosest = sdSphere(relativePosition, sphereOrigin, sphereRadius);\n        if (distanceToClosest < MIN_HIT_DISTANCE) {\n            relativePosition -= sphereOrigin;\n            vec3 normal = normalize(currentPosition - sphereOrigin);\n            float phi = atan(relativePosition.z, relativePosition.x);\n            float theta = atan(relativePosition.y, sqrt(pow(relativePosition.z, 2.0) + pow(relativePosition.x, 2.0)));\n            vec2 uv = vec2((phi + 3.14) / 6.28, (theta + 1.57) / 3.14);\n            vec3 color = texture(iChannel0, uv).xyz;\n            float lambertian = dot(normal, lightDirection);\n            return vec4(color * lambertian, 1.0);\n        }\n        if (distanceTraveled > MAX_TRACE_DISTANCE) {\n            break;\n        }\n        distanceTraveled += distanceToClosest;\n    }\n    return vec4(0.0, 0.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 halfResolution = 0.5 * iResolution.xy;\n    vec2 xy = fragCoord - halfResolution;\n    float lightPhi = 2.35619;\n    float lightTheta = 0.785398;\n    if (iMouse.z > 0.0) {\n        lightPhi = -((iMouse.x - halfResolution.x) / halfResolution.x) * 3.14 + 1.57;\n        lightTheta = ((iMouse.y - halfResolution.y) / halfResolution.y) * 1.57;\n    }\n    float cosPhi = cos(lightPhi);\n    float sinPhi = sin(lightPhi);\n    float cosTheta = cos(lightTheta);\n    float sinTheta = sin(lightTheta);\n    lightDirection = vec3(cosPhi * cosTheta, sinTheta, sinPhi * cosTheta);\n    sphereRotation = iTime;\n    vec3 rayOrigin = vec3(0.0, 0.0, 0.0);\n    vec3 rayDirection = normalize(vec3(xy, -focalLength));\n    fragColor = rayMarch(rayOrigin, rayDirection);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 checkers = vec2(36.0, 18.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 checkerSize = iChannelResolution[0].xy / checkers;\n    bool x = mod(fragCoord.x, 2.0 * checkerSize.x) < checkerSize.x;\n    bool y = mod(fragCoord.y, 2.0 * checkerSize.y) < checkerSize.y;\n    bool fill = x ^^ y;\n    fragColor = vec4(fill, fill, fill, 1.0);\n}\n\n/*\nconst vec2 gridSize = vec2(36.0, 18.0);\nconst float horizontalLineWidth = 2.0;\nconst float verticalLineWidth = 2.0;\n\nconst float halfHorizontalLineWidth = 0.5 * horizontalLineWidth;\nconst float halfVerticalLineWidth = 0.5 * verticalLineWidth;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 cellSize = iResolution.xy / gridSize;\n    float xModWidth = mod(fragCoord.x, cellSize.x);\n    float yModHeight = mod(fragCoord.y, cellSize.y);\n    fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    if (xModWidth <= halfHorizontalLineWidth || (cellSize.x - xModWidth) <= halfHorizontalLineWidth) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n\n    if (yModHeight <= halfVerticalLineWidth || (cellSize.y - yModHeight) <= halfVerticalLineWidth) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}