{
    "Shader": {
        "info": {
            "date": "1671319702",
            "description": "Code needs neatening up but play around with the parameters, it's quite funny\n\nHeavily inspired by this:\nhttps://dan-ball.jp/en/javagame/ranger2/\n\nFork chain has some other stuff, the first one is the same as this\n",
            "flags": 32,
            "hasliked": 0,
            "id": "dll3z8",
            "likes": 27,
            "name": "Pixel Man!",
            "published": 3,
            "tags": [
                "2d",
                "motion",
                "pixelart",
                "human",
                "stickman"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sc = .14;\n    vec3 col = texelFetch(iChannel0, ivec2(sc *fragCoord), 0).rgb;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nfloat pxLine(vec2 f, vec2 p, vec2 q) {\n    // Centre the coordinates at p\n    f -= p;\n\n    // Get direction from p to q, use for gradient and bounding box dimensions\n    vec2 dir = 0.5 * (q - p);\n    \n    // Look at the line as a function of x, and as a function of y\n    float d = min((abs(f.x - round(dir.x/dir.y * f.y))),\n                  (abs(f.y - round(dir.y/dir.x * f.x))));\n                  \n    // Restrict to the box bounded by p and q           \n    return step(d, 0.) * step(abs(f.x - dir.x), abs(dir.x))\n                       * step(abs(f.y - dir.y), abs(dir.y));           \n}\n\nfloat test(float t) {\n    float f = min(1., mod(t, 2.)) + floor(t/2.);\n    return abs(sin(pi * f));\n}\n\n// Gets 3rd point on isosceles triangle with p, q\nvec2 getTriPoint(vec2 f, vec2 p, vec2 q, float v) {\n    vec2 m = (p+q)/2.;  \n    vec2 dir = normalize(vec2(p.y - q.y, q.x - p.x));\n    return round(m + v * dir); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    vec3 col = vec3(0);\n    vec2 res = iResolution.xy;\n    float t = 1.5 * iTime;\n    t = mod(t, 5.5 * pi);\n    // fragCoord must be offset by 0.5\n    f -= vec2(30,20) - 0.5;\n   // f.x = -abs(f.x);\n    float a = .5 * pi * cos(t);\n    \n    float sw = 4.;    // Stride width\n    float sh = 4.;    // Stride height\n    float vHip = -1.; // Vertical hip motion per step\n    float xHip = 2. * sin(4. * t);\n    float dHip = 2.;  // Hip length\n    float kd = 2.;//4. * cos(4.*t);   // Knee distance from centre of leg\n    \n    // Centre x coord (idk)\n    float x = sw * 0.5 * pi * t - 26.;\n    \n    // Centre of hip\n    vec2 p = round(vec2(x - xHip, 8. + vHip * cos(2.*pi*t))); //+w*test(t)));//+limp\n    \n    // Hip points\n    float aHip = 4. * t;// +.25 * pi * sin(4. * t);\n    vec2 p1 = round(p - dHip * vec2(cos(aHip), sin(aHip)));\n    vec2 p2 = round(p + dHip * vec2(cos(aHip), sin(aHip)));\n    \n    // Foot points\n    vec2 q1 = round(vec2(x - sw * cos(pi * t), \n                       -9. + sh * test(t)));\n    vec2 q2 = round(vec2(x + sw * cos(pi * t), \n                       -9. + sh * test(t+1.)));\n        \n    // Knee points\n    vec2 pq1 = getTriPoint(f, p1, q1, kd);\n    vec2 pq2 = getTriPoint(f, p2, q2, kd);\n      \n    // \"Body\" point  \n    vec2 pc = round(vec2(x + xHip, p.y + 14.));\n      \n    // Shoulder points\n    vec2 ps1 = round(pc - dHip * vec2(cos(aHip), sin(aHip)));\n    vec2 ps2 = round(pc + dHip * vec2(cos(aHip), sin(aHip)));\n      \n    // Elbow points\n    float aElb1 = -0.5 * pi -0.25 * pi * cos(4. * t);\n    float aElb2 = -0.5 * pi -0.25 * pi * cos(4. * t - pi/2.);\n    vec2 pe1 = round(ps1 + 7. * vec2(cos(aElb1), sin(aElb1)));\n    vec2 pe2 = round(ps2 + 7. * vec2(cos(aElb2), sin(aElb2)));\n      \n    // Hand points\n    float aH1 = -0.5 * pi -0.5 * pi * cos(4. * t);\n    float aH2 = -0.5 * pi -0.5 * pi * cos(4. * t - pi/2.);\n    vec2 ph1 = round(pe1 + 4. * vec2(cos(aH1), sin(aH1)));\n    vec2 ph2 = round(pe2 + 4. * vec2(cos(aH2), sin(aH2)));\n      \n    // Head base\n    vec2 phb = round(pc + vec2(1, 2));\n      \n    // Distance from head circle\n    float dhc = round(length(f - phb - vec2(0,3)));\n    float shc = step(dhc, 3.) - step(dhc,2.);\n    col.b += shc;\n      \n    col.r += pxLine(f, p1, pq1) + pxLine(f, pq1, q1);\n    col.g += pxLine(f, p2, pq2) + pxLine(f, pq2, q2);\n    col.b += pxLine(f, p1, p2);\n    col.b += pxLine(f, p, pc);\n    \n    col.b += pxLine(f, ps1, ps2);\n    col.r += pxLine(f, ps1, pe1);\n    col.g += pxLine(f, ps2, pe2);\n    \n    col.r += pxLine(f, pe1, ph1);\n    col.g += pxLine(f, pe2, ph2);\n\n    col.b += pxLine(f, pc, phb);\n\n    col += step(abs(f.y + 10.), 0.);\n \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}