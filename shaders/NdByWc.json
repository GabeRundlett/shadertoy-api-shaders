{
    "Shader": {
        "info": {
            "date": "1644180599",
            "description": "Starter code for competition at the end of UTCG shaders workshop",
            "flags": 0,
            "hasliked": 0,
            "id": "NdByWc",
            "likes": 2,
            "name": "UTCG Fishy",
            "published": 3,
            "tags": [
                "utcg2022"
            ],
            "usePreview": 0,
            "username": "galactustrombone",
            "viewed": 58
        },
        "renderpass": [
            {
                "code": "const float M_PI = 3.14159265358979323846264338327950288;\n\nfloat mandel (float cx, float cy) {\n\tfloat x = 0.;\n\tfloat y = 0.;\n\tint i;\n\tfor (i = 0; i < 64; i++) {\n\t\tif ((x*x + y*y) > 4.) {\n\t\t  break;\n\t\t}\n\t\tfloat xtemp = x*x - y*y + cx;\n\t\ty = 2.*x*y + cy;\n\t\tx = xtemp;\n\t}\n\treturn sqrt(float(i) / 64.);\n}\n\n// 2d rotation matrix: rot(angle) * vector will rotate the vector by angle clockwise\nmat2 rot(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nbool isInCircle(vec2 centre, float radius, vec2 point)\n{\n    // return true if point is closer to centre than radius\n    return length(point - centre) < radius;\n}\n\n// ---------------- helpers above ----------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates from centre - centre is (0, 0)\n    vec2 uv = (fragCoord - vec2(iResolution.x, iResolution.y) / 2.) / iResolution.y;\n    \n    float speedup = 0.25;\n    \n    vec2 t = 6. * (uv - vec2(1.5 * iResolution.x / iResolution.y * (fract(iTime * speedup) - 0.5),\n                             0.2 * sin(iTime)));\n    t = rot(cos(iTime) * 0.2) * t;\n    vec4 col = vec4(mandel(t.x, t.y), 0.1, 1, 1);\n    \n    float bubbleR = 0.1;\n    float bubbleSize = bubbleR + bubbleR / 2. * sin(iTime / 5. + cos(uv.x * 5.));\n    for (int i = 0; i < 20; i++)\n    {\n        float weirdTime = iTime * float(i + 1) / 20.;\n        vec2 bubbleCentre = vec2(0.5 * sin(iTime + float(i * i * i)),\n                                 1.5 * (weirdTime - floor(weirdTime) - 0.5));\n        if (isInCircle(bubbleCentre, bubbleSize, uv))\n        {\n            col += vec4(0.1, 0.1, 0.1, 1);\n        }\n    }\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}