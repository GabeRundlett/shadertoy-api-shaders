{
    "Shader": {
        "info": {
            "date": "1670972949",
            "description": "rocketleague",
            "flags": 0,
            "hasliked": 0,
            "id": "cdBXWc",
            "likes": 11,
            "name": "rocket league grid",
            "published": 3,
            "tags": [
                "rocketleague"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 323
        },
        "renderpass": [
            {
                "code": "float f_n_inoutexp(float n, float n_sharpness){\n    n_sharpness = floor(n_sharpness) + mod(floor(n_sharpness),2.); // must be dividable by 2.\n    n = max(0.,min(1., n));\n    return min(pow(n, n_sharpness),pow( abs(n-1.), n_sharpness))*pow(2., n_sharpness);\n}\nfloat f_n_dist_hexagon(\n    vec2 o\n){\n    vec2 o_abs = vec2(abs(o.x), abs(o.y));\n    float n_sqrtof3 = sqrt(3.);\n    vec2 o_angle = vec2(1.,n_sqrtof3);\n    float n = dot(o_abs, normalize(o_angle));\n    n = max(n, o_abs.x);\n    return n;\n}\nfloat f_n_dist_hexgrid(\n    vec2 o_trpino, \n    float n_size\n){\n    \n\n    o_trpino*= n_size;\n    vec2 o_reprate = vec2(1., sqrt(3.));\n    vec2 o_repratehalf = o_reprate*0.5;\n    \n    vec2 o_trpino_scld_frct_a = mod(o_trpino, o_reprate)-o_repratehalf;\n    vec2 o_trpino_scld_frct_b = mod(o_trpino-o_repratehalf, o_reprate)-o_repratehalf;\n    vec2 o_xy = floor((o_trpino+vec2(0.9,0.5)*n_size) / o_reprate);\n\n    \n    float n_dist_a = length(o_trpino_scld_frct_a);\n    float n_dist_b = length(o_trpino_scld_frct_b);\n    float n_dist_a_bigger_than_b = float(n_dist_a>n_dist_b);\n    \n    vec2 o = \n        (1.-n_dist_a_bigger_than_b)*o_trpino_scld_frct_a +\n        n_dist_a_bigger_than_b*o_trpino_scld_frct_b;\n    vec2 o_id = ((((o_trpino)-o)/2.)+n_size*0.5)/n_size;\n\n    float n_dist_hex = f_n_dist_hexagon(o);\n    float n = n_dist_hex;\n    //float n = length(o);\n    return n;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trpino_nooffset = (fragCoord.xy )/ iResolution.xy;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono_nooffset = (iMouse.xy )/ iResolution.y;\n    \n    float ndhg1 = f_n_dist_hexgrid(o_trpino, 50.);\n    float n_min = 0.45;\n    float n_max = 0.55;\n    float n_delta = abs(n_max-n_min);\n    float n_ndhg1_smst = smoothstep(n_min, n_max,ndhg1)/n_delta;\n    \n    float ndhg2 = f_n_dist_hexgrid(o_trpino, 5.);\n    n_min = 0.45;\n    n_max = 0.55;\n    n_delta = abs(n_max-n_min);\n    float n_ndhg2_smst = smoothstep(n_min, n_max,ndhg2)/n_delta;\n    \n\n\n    vec3 o_col_orange = vec3(0.8,0.322,0.098);\n    vec3 o_col_blue = vec3(0.071,0.145,0.443);\n    float n_gradient = smoothstep(0.4, 0.6,o_trpino_nooffset.x);\n    vec3 o_col_ndhg2 = vec3(n_ndhg2_smst);\n\n    float n_dist_circ = length(o_trpino);\n    n_dist_circ= fract(iTime*0.8+n_dist_circ*2.);\n    n_dist_circ = f_n_inoutexp(n_dist_circ, 5.)*2.;\n    \n    o_col_ndhg2 = o_col_ndhg2 * mix(o_col_orange, o_col_blue, n_gradient)*0.5;\n    o_col_ndhg2 += o_col_ndhg2*n_dist_circ*0.5;\n    fragColor = vec4(o_col_ndhg2,1.);\n\n    fragColor += (1.-clamp(0.,1.,n_ndhg2_smst*0.5))*vec4(n_ndhg1_smst);\n    //fragColor = vec4(n_ndhg2_smst);\n    //fragColor += vec4(n_ndhg1_smst);\n    //fragColor = vec4(0.);\n    //fragColor.g = n_x/n_fact;\n    \n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}