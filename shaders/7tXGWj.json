{
    "Shader": {
        "info": {
            "date": "1622835019",
            "description": "Learning about how to make triangle grids. [url=https://thebookofshaders.com/11/]https://thebookofshaders.com/11/[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7tXGWj",
            "likes": 6,
            "name": "Triangle Grid Learning",
            "published": 3,
            "tags": [
                "grid",
                "triangles",
                "animation",
                "skew"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 6.0 / iResolution.y; // Approximately pixel size\n    float transition = 0.5 + 0.5 * sin(iTime);\n\n    // The grid is complete when skew=0.5 and stretch=sqrt(0.75)\n    float skew = 0.5 * transition;\n    uv.x /= mix(1.0, sqrt(0.75), transition); // Scale width to form equilateral triangles\n    uv.y += skew * uv.x; // Skew vertically\n\n    uv *= 2.0; // Zoom out to see more cells\n    uv = fract(uv); // Subdivide into a grid\n\n    float sTriId = step(0.0, uv.x - uv.y); // Upper left of the cell: 0, lower right of the cell: 1\n\n    // Cell coloring show UVs and local IDs\n    fragColor = mix(vec4(uv, 0.0, 1.0), vec4(sTriId, 0.0, 1.0 - sTriId, 1.0), transition);\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0), smoothstep(unit, 0.0, abs(uv.y - uv.x)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}