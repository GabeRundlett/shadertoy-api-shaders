{
    "Shader": {
        "info": {
            "date": "1690314126",
            "description": "Computer version of https://humanshader.com/",
            "flags": 0,
            "hasliked": 0,
            "id": "ctfyzr",
            "likes": 1,
            "name": "human shader",
            "published": 3,
            "tags": [
                "humanshader"
            ],
            "usePreview": 0,
            "username": "texl",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "int roundn(int v, int n)\n{\n    return int(round(float(v) / pow(10.0f, float(n))));\n}\n\nvec3 human_shader(const ivec2 coord)\n{\n    int x = coord.x;\n    int y = coord.y;\n\n    // A\n    int u = x - 36;\n    int v = 18 - y;\n    int h = u * u + v * v;\n    \n    int c_r = 0;\n    int c_b = 0;\n    \n    if (h < 200)\n    {\n        // B - sphere\n        c_r = 420;\n        c_b = 520;\n        int t = 5000 + 8 * h;\n        int p = roundn(t * u, 2);\n        int q = roundn(t * v, 2);\n        int s = 2 * q;\n        int w = roundn(1000 + p - s, 2) + 8;\n\n        if (w > 0)\n        {\n            c_r = c_r + w * w;\n        }\n        \n        int o = s + 2200;\n        c_r = roundn(c_r * o, 4);\n        c_b = roundn(c_b * o, 4);\n        \n        if (p > -q)\n        {\n            w = roundn(p + q, 1);\n            c_r = c_r + w;\n            c_b = c_b + w;\n        }\n    }\n    else if (v < 0)\n    {\n        // C - ground\n        c_r = 150 + 2 * v;\n        c_b = 50;\n        int p = h + 8 * v * v;\n        int c = 240 * (-v) - p;\n\n        if (c > 1200)\n        {\n            int o = roundn(6 * c, 1);\n            o = c * (1500 - o);\n            o = roundn(o, 2) - 8360;\n            c_r = roundn(c_r * o, 3);\n            c_b = roundn(c_b * o, 3);\n        }\n\n        int r = c + u * v;\n        int d = 3200 - h - 2 * r;\n\n        if (d > 0)\n        {\n            c_r = c_r + d;\n        }\n    }\n    else\n    {\n        // D - sky\n        int c = x + 4 * y;\n        c_r = 132 + c;\n        c_b = 192 + c;\n    }\n    \n    if (c_r > 255)\n    {\n        c_r = 255;\n    }\n    \n    if (c_b > 255)\n    {\n        c_b = 255;\n    }\n    \n    int c_g = roundn(7 * c_r + 3 * c_b, 1);\n\n    return vec3(c_r, c_g, c_b) / 255.0f;\n}\n\nfloat saturate(float v)\n{\n    return clamp(v, 0.0f, 1.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 gridSize = vec2(71, 40);\n    const vec2 highlightCoord = vec2(49, 20);\n\n    // normalize\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // flip y\n    uv.y = 1.0 - uv.y;\n\n    // correct aspect\n    vec2 ratio = vec2(iResolution) / gridSize;\n    vec2 aspectCorrection = ratio / min(ratio.x, ratio.y);\n    uv *= aspectCorrection;\n    \n    vec2 coord = floor(uv * gridSize);\n    vec3 humanShaderCol = human_shader(ivec2(coord));\n    \n    vec2 grid = 3.0f * (1.0f - 2.0f * abs(fract(uv * vec2(gridSize)) - 0.5f));\n    vec3 gridCol = vec3(min(grid.x, grid.y));\n        \n    float highlight = max(1.0f - length(highlightCoord - coord), 0.0f);\n    float pulse = max(sin(iTime * 4.0f), 0.0f);\n    vec3 highlightCol = vec3(highlight) * pulse;\n\n    vec3 col = highlightCol + min(gridCol, humanShaderCol);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}