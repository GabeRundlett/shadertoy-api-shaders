{
    "Shader": {
        "info": {
            "date": "1526888551",
            "description": "If a shader looks strange (e.g. all black) on your machine, appends this Common on top of its Common tab (create one if not there). If now ok, comment sections of it to know which is the bogus function in the shader. Then chase it.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lstfD2",
            "likes": 14,
            "name": "compatibility test / enforce",
            "published": 3,
            "tags": [
                "bug",
                "debug",
                "utils",
                "compatibility"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1044
        },
        "renderpass": [
            {
                "code": "// --- see Common\n\n\n// --- access to the image of ascii code c\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\nfloat message(vec2 U) {\n    vec4 T = vec4(0);\n    C(115);C(101);C(101);C(32);C(67);C(111);C(109);C(109);C(111);C(110); // message \"see Common\"\n    return length(T.yz)<=1e-15 ? -1. : T.x; \n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    vec2 R = iResolution.xy;\n\tO = vec4(U/R, .5+.5*sin(iTime), 1);\n    float c = message((U/R.y-vec2(.1,.2))*8.);\n    if(c>=0.) O = vec4(c);\n    \n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#if 1\n// see usual incompatibility suspects: https://shadertoyunofficial.wordpress.com/2016/07/22/compatibility-issues-in-shadertoy-webglsl/\n\n// --- Windows mutely add abs where negatives are forbiden\n#define pow(x,n)     pow(abs(x),n)\n#define sqrt(x)      sqrt(abs(x))\n#define log(x)       log(abs(x))\n#define log2(x)      log2(abs(x))\n\n// --- many Windows people do clamp(m,M,v) instead of v,m,M because often look identical on Windows\n//#define clamp(v,m,M) max(min(v,m),M)\n#define clamp(x,m,M)   min(max(x, m), M)\n\n//#define smoothstep(m,M,v)  // is it still a similar issue ?\n\n// --- Windows mutely treat some exceptions when undefined\n#define atan(y,x)    atan(y,x + 1e-15)\n#define normalize(v) normalize(v+ 1e-15 )\n#define dot(a,b)    ( dot(a,b)  + 1e-15 )\n#define length(v)   ( length(v) + 1e-15 )\n//#define normalize(v) normalize(1e-9 + v)\n\n#define mod(x,y)     ( length(y)==0. ? y : mod(x,y) ) // hacky\n// should test x%y with x<0 , but can't macro it. replace x%y by imod(x,y)\n#define imod(x,y)   sign(x)*(abs(x)%y)\n\n// --- uint(float) is wrong on negatives\n #if 0\n  #define uint(x)      uint(int(x))\n  #define uvec2(x)     uvec2(ivec2(x))\n  #define uvec3(x)     uvec3(ivec3(x))\n  #define uvec4(x)     uvec4(ivec4(x))\n #endif\n\n// --- hardware derivative don't work ( = 0 ) on lowend GPU ( intel/AMD/emulator ) \n #if 1\n  #define fwidth(v) ( fwidth(v)==v-(v) ?  .01 +v-(v) : fwidth(v) )\n  #define dFdx(v)   (   dFdx(v)==v-(v) ?  .01 +v-(v) :   dFdx(v) )\n  #define dFdy(v)   (   dFdy(v)==v-(v) ?  .01 +v-(v) :   dFdy(v) )\n #endif\n\n\n// === important but not auto-tested: do it manually === \n\n// --- Windows treat out as inout\n// #define out inout   // then, add...\n//      #undef out     // ...right before each mainImage()\n\n// #define mainImage(O,U) _mainImage(O,U) // [ why was that for, again ? ]\n\n// --- not tested: uninitialized variables and out parameters.\n// --- not tested: missing returns.\n\n#endif\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}