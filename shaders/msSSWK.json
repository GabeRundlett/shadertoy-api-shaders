{
    "Shader": {
        "info": {
            "date": "1670876232",
            "description": "Made during a livecoding party in paris with cookie collective : LaFarbiqueACookie#03\nCode is as is, simply ported from veda.",
            "flags": 32,
            "hasliked": 0,
            "id": "msSSWK",
            "likes": 24,
            "name": "Strangey eYeS",
            "published": 3,
            "tags": [
                "eyes",
                "strange",
                "mystery"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 451
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FFTI(a) time\n\n#define sat(a) clamp(a, 0., 1.)\n\n#define PI 3.14159265\n#define TAU (PI*2.0)\nfloat hash(float seed)\n{\n    return fract(sin(seed*123.456)*123.456);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n  return max(l.x, max(l.y, l.z));\n}\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n\n    return max(min(min(x, y), z), cube);\n}\nfloat _seed;\n\nfloat rand()\n{\n    _seed++;\n    return hash(_seed);\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*3.);\n}\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\nfloat _cir(vec2 uv, float sz)\n{\n  return length(uv)-sz;\n}\n\nfloat _loz(vec2 uv,float sz)\n{\n  return lenny(uv)-sz;\n}\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nvec2 _max(vec2 a, vec2 b)\n{\n  if (a.x > b.x)\n      return a;\n  return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000., -1.);\n\n    acc = _min(acc, vec2(length(p)-1., 0.));\n\n    return acc;\n}\n\n\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < 128; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+= rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.01, 0.);\n  return  normalize(vec3(d) - vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res, vec2 id)\n{\n  vec3 col = n *.5+.5;\n\n  vec3 ldir = normalize(vec3(1.));\n\n  if (res.z == 0.)\n  {\n\n    col = vec3(.3,.1,.1)+mix(vec3(1.), vec3(.5,.6,.3), .5)*sat(dot(-rd, n));\n    vec3 p2 = p;\n    float speed = 2.;\n    float it = float(int(iTime));\n    float t=iTime*2.+length(id);\n    float hangle = clamp(sin(t)*2., -1.,1.);\n    p2.xy *= r2d(length(id)*10.+id.x+iTime*.2);\n    p2.xz *= r2d((smoothstep(-1.,1.,hangle)-.5));\n    p2.yz *= r2d(sin(t*.3)*.5);\n    vec2 uv = p2.xy;\n    float border = abs(length(uv)-.4)-.2+.1*sin(iTime);\n    float eyemask = length(uv)-.5;\n    border = max(border, eyemask);\n    col = mix(col, vec3(0.), 1.-sat(eyemask*400.));\n    float an = atan(uv.y, uv.x);\n    vec2 uvi = vec2(an*.1, .05*length(uv));\n    vec3 rgb = vec3(0.);\n    vec3 iriscol = mix(vec3(0.,.4,.2), vec3(0.,0.5,0.8), texture(iChannel0, uvi).x);\n    iriscol.yz *= r2d(texture(iChannel0, id*.1).x*15.+iTime);\n    iriscol = abs(iriscol.zxy);\n    rgb = iriscol\n    *(pow(texture(iChannel0, uvi*.5).x, 2.)+.5)\n    *pow(sat(-dot(rd, n)), 2.);\n\n    col = mix(col, rgb, 1.-sat(border*400.));\nvec3 h = normalize(rd+ldir);\n    col += vec3(.2)*pow(sat(-dot(h, n)), 45.);\n  }\n\n  return col;\n}\n\nvec3 rdrback(vec2 uv)\n{\n    vec2 ouv = uv;\n  vec3 col = vec3(0.);\n  float t = iTime*.1;\n  uv += vec2(sin(t), cos(t))*.25;\n  vec2 uv2 = vec2(atan(uv.y, uv.x)/PI, length(uv))*.25;\n  col = pow(texture(iChannel0, uv2+vec2(0., -iTime*.125)).xxx, vec3(6.))*.45*vec3(.9,.2,.1);\n  col += vec3(.1,.2,.5)*pow(texture(iChannel0, uv2*.5+vec2(0., -iTime*.0125)).xxx, vec3(16.))*.45;\n  col.xy *= r2d(iTime+13.*length(uv));\n  col = abs(col);\n  col *= 2.5;\n  return col.zxy*sat(length(ouv)*5.);\n}\n\nvec3 rdr(vec2 uv)\n{\n  uv *= r2d(.5);\n  vec2 rep = vec2(.25);\n  vec2 id = floor((uv+rep*.5)/rep);\n  uv = mod(uv+rep*.5,rep)-rep*.5;\n  uv *= 1.-.2*sin(length(id)*10.+iTime);\n    vec3 ro = vec3(0.,0., -5.);\n    vec3 ta = vec3(sin(iTime*.5+id.y*3.)*.5,sin(iTime*.25+id.x*2.)*.5,0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    vec3 col = vec3(0.);\n\n\n\n    col = rdrback(uv);\n\n\n    vec3 res = trace(ro, rd);\n    float depth = 100.;\n    if (res.y > 0.)\n    {\n      depth = res.y;\n        vec3 p = ro + rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(p, n, rd, res, id);\n\n        float spec = .1;\n        vec3 refl = normalize(reflect(rd, n)+spec*(vec3(rand(), rand(), rand())-.5));\n        vec3 resrefl = trace(p+n*0.01, refl);\n    }\n\n    return col;\n}\nuniform sampler2D backbuffer;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 ouv = fragCoord.xy / iResolution.xy;\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.xx;\n    //uv *= vec2(.66, 1.);\n    //uv -= vec2(.1,0.);\n    uv *= 1.+length(uv)*5.;\n    uv *= .5;\n    _seed = iTime+texture(iChannel0, uv).x;\n   vec3 col = rdr(uv);\n   col += pow(rdr(uv+(vec2(rand(), rand())-.5)*.05), vec3(1.4))*1.7;\n   col = sat(col);\n   col *= (1.-sat((length(uv)-.5)*2.));\n   col = mix(col, texture(iChannel1, ouv).xyz, .7);\n//   col += texture2D(ziconTex, (uv*4.+.5)).xyz;\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}