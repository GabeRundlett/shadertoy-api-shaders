{
    "Shader": {
        "info": {
            "date": "1720690090",
            "description": "from  https://glslsandbox.com/e#82116.0 https://glslsandbox.com/e#94360.0 and other",
            "flags": 0,
            "hasliked": 0,
            "id": "McfyRn",
            "likes": 2,
            "name": "particle in square",
            "published": 3,
            "tags": [
                "amaterasu"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 75
        },
        "renderpass": [
            {
                "code": "\n\n#define rotation 1\n\n\nuniform vec2 mouse;\n\n#define resolution iResolution.xy\n#define time iTime\n\n// stuff\n#define rot( a )\tmat2( cos(a), -sin(a), sin(a), cos(a) )\n#define res resolution\n#define nsin( a )       sin( a )*.5+.5\n\nfloat c = 0.0;\n\nfloat circle( vec2 p, float r )\n{\n\treturn step( length( p ), r);\n}\n\nvec2 translate(vec2 pos, vec2 translate) {\n\treturn pos + vec2(-translate.x, -translate.y);\n}\n\nmat2 rotate2D(float a) {\n\tfloat co = cos(a), si = sin(a);\n\treturn mat2(co, -si, si, co);\n}\n\nfloat sdBox(in vec2 p, in vec2 size) {\n\tp = abs(p) - size;\n\treturn length(max(p, 0.0)) + min(8.0, max(p.x, p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p;\n     \n \n    p = ( 2.*gl_FragCoord.xy - res )/min( res.x, res.y );\n\n   \n    p *= rot( time*5. );\n  \nhighp vec2 size = vec2(resolution.x, resolution.y);\n\t\n\tvec2 uv = (2.0 * gl_FragCoord.xy - size) / size.x;\n\tuv = translate(uv, vec2(0.0));\n\tuv *= rotate2D(1.1*time);\n\t\n\thighp vec3 color = vec3(0.0);\n\t\n\tfloat box = sdBox(uv, vec2(0.3));\n\t\n\tcolor = mix(color, vec3(1.0), 1.0-smoothstep(0.0,0.2, abs(box)));\n\tcolor.r *= 1.01;\n\t\n\tcolor = pow(color,vec3(32.0));\n    float dist = mod(sqrt( floor( time*30./52. ) ),6.0);\t\n  \n    float l = sqrt( 3. )/dist;\n    float s =     ( 1. )/dist;\n    float n =     ( 2. )/dist;\n\n    // well i guess here comes the hardcoded stuff\n    c = circle(  (p), 1.0 );\n    \n    float size2 = 0.05;\n\tfloat dist2 = 0.100;\n\tfloat ang = 0.0;\n\tvec2 pos = vec2(0.0,0.0);\n\tvec3 color2 = vec3(0.2);;\n\t\n\tfor(int i=0; i<50; i++){\n\t\tfloat r = 0.3;\n\t\tang += 3.14 / (float(50)*0.5)+(time/60.0);\n\t\tpos = vec2(cos(ang),sin(ang))*r*sin(time+ang/.3);\t\t\t\t  \n\t\tdist2 += size2 / distance(pos,uv);\n\t\tvec3 c2 = vec3(0.03, 0.05, 0.1);\n\t\tcolor2 = c2*dist2;\n\t}\t\n    p.x -= l;\n    p.y -= s;\n    c += circle(  (p), 1.0 );\n    p.x += l;\n    p.y -= s;\n    c += circle(  (p), 1.0 );\n    p.x += l;\n    p.y += s;\n    c += circle(  (p), 1.0 );\n    p.x -= 0.;\n    p.y += n;\n    c += circle( (p), 1.0 );\n    p.x -= l;\n    p.y += s;\n    c += circle(  (p), 1.0 );\n    p.x -= l;\n    p.y -= s;\n    c += circle(  (p), 1.0 );\n\t\n    // white + white = black\n    c = mod( ceil(c)+color.x, 2.0 );\n    \n    fragColor = vec4(c*color2.y, c*color2.z, c*color2.x, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}