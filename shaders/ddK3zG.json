{
    "Shader": {
        "info": {
            "date": "1679674449",
            "description": "yes",
            "flags": 64,
            "hasliked": 0,
            "id": "ddK3zG",
            "likes": 5,
            "name": "Nighttime Visualizer",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "#define AA 16.\n\n#define FOCAL_LENGTH 0.6\n\n#define VISUALIZER_BARS 20.\n#define VISUALIZER_GAP 0.75\n\n//#define iTime 6.52\n\nmat2 rotMat(float r){ return  mat2(cos(r), -sin(r), sin(r), cos(r)); }\n\nvec3 rotX(in vec3 p, float r)\n{\n    p.yz *= rotMat(r); return p;\n}\n\nvec3 rotY(in vec3 p, float r)\n{\n    p.xz *= rotMat(r); return p;\n}\n \nvec3 rotZ(in vec3 p, float r)\n{\n    p.xy *= rotMat(r); return p;\n}\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec2 hash12(float p)\n{\n    vec3 p3 = fract(vec3(p,p,p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash21(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cosmooth(float x) { return 1.-cos(3.141593*x)*0.5-0.5; }\n\nfloat shash(float x)\n{\n    float fx = floor(x);\n    float s = mod(fx, 2.)*2.-1.;\n    float a = hash11(fx)*s;\n    float b = hash11(fx+1.)*-s;\n    return mix(a, b, cosmooth(fract(x)))*0.5;\n}\n\nfloat pingPong(float x)\n{\n    return abs(mod(x, 2.)-1.);\n}\n\nvec3 planeIntersect(in vec3 ro, vec3 rd, float y)\n{\n    ro.xz = ro.xz+rd.xz*(y-ro.y)/rd.y;\n    return vec3(ro.x, y, ro.z);\n}\n\nvec3 getEnvironmentMap(vec3 rd, vec3 l)\n{\n    float ld = dot(rd, l);\n    vec3 mainColor = (1./(max(1e-10, 1.-ld+0.003))*0.01\n                     +0.02/(abs(ld-0.95)+0.07) // ring\n                     )\n                     *vec3(0.733,0.302,0.769) // coloring\n                     +exp(-rd.y*3.)*vec3(0.125,0.075,0.110) // sky gradient\n                     ;\n    vec2 visUv = planeIntersect(vec3(0), rd.zxy, -1.).xy+0.25/VISUALIZER_BARS;\n    float vis = step(rd.y, pow(texture(iChannel0, vec2(1.-pingPong(round((1.-abs(visUv).x)*VISUALIZER_BARS)/VISUALIZER_BARS), 0)).r, 4.)*0.3);\n    vis *= step(VISUALIZER_GAP, VISUALIZER_BARS*abs((1.-pingPong(round((1.-abs(visUv+0.05).x)*VISUALIZER_BARS)/VISUALIZER_BARS))-(1.-pingPong(1.-abs(visUv+0.5/VISUALIZER_BARS).x))));\n    return max(vec3(0), mainColor + vis*0.3*smoothstep(-0.05, 0.2, rd.y));\n    //return vec3(abs(visUv).xx, 0);\n    //return vec3(vec2(step(0.01, abs((1.-pingPong(round((1.-abs(visUv).x)*10.)/10.))-(1.-pingPong(1.-abs(visUv).x))))), 0);\n}\n\nfloat getHeight(vec2 p)\n{\n    float r = 0.;\n    for(float i = 0.; i < 3.; i++)\n    {\n        float e = exp2(-i);\n        r += abs(sin(p.x/e+iTime))*e;\n        p = rotZ(p.xyx, hash11(i*25.)*0.2).xy;\n    }\n    return r;\n}\n\nvec2 heightNormal(vec2 p, float dist)\n{\n    vec2 e = vec2(0.2, 0);\n    return normalize(vec2(getHeight(p+e.xy)-getHeight(p-e.xy),\n                          getHeight(p+e.yx)-getHeight(p-e.yx)));\n}\n\nvec3 gradToVec(vec2 d)\n{\n    vec3 a = normalize(vec3(1, -d.x, 0)),\n         b = normalize(vec3(0, -d.y, 1));\n    return cross(a, b);\n}\n\nvec3 halfVec(vec3 a, vec3 b)\n{\n    return normalize(a+b);\n}\n\nvoid _mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 nuv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 m =  (iMouse.xy-iResolution.xy*0.5)/iResolution.y*step(0.01, iMouse.z);\n    \n    vec2 rot = vec2(3.14*-.5, 0)-m.xy*4.-vec2(shash(iTime*0.25), shash(iTime*0.25+0.7071067812))*0.1;\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = rotY(rotX(normalize(vec3(uv, FOCAL_LENGTH)), rot.y), rot.x);\n    vec3 center = rotY(rotX(normalize(vec3(0, 0, FOCAL_LENGTH)), rot.y), rot.x);;\n    vec3 lgt = rotZ(vec3(1, 0, 0), 0.2);\n    \n    vec3 pli = planeIntersect(ro, rd, 0.);\n    float blend = smoothstep(-0.05, 0., rd.y);\n    \n    vec3 planeNormal = gradToVec(0.2*heightNormal(clamp(pli.xz, vec2(-1e4), vec2(1e4)), 1.)/max(1., distance(ro, pli)*0.5));\n    \n    vec3 env = getEnvironmentMap(mix(reflect(rd, planeNormal), rd, blend), lgt);\n    float vignette = 4.*nuv.x*(1.-nuv.x)*4.*nuv.y*(1.-nuv.y)*0.6+0.4;\n    float glow = pow(max(0., dot(rd, halfVec(center, lgt))), 12.)*0.3*mix(0.2, 1.5, pow(max(0., dot(center, lgt)), 25.));\n\n    fragColor = vec4(sqrt((env+glow)*vignette), 1.0);\n    //fragColor = vec4(getEnvironmentMap(rd, lgt), 0);\n}\n\nvec4 stochasticAA(vec2 fc, vec4 m)\n{\n    vec4 res = vec4(0);\n    float st = 1.0/(AA-1.);\n    vec4 color;\n    _mainImage(color, fc);\n    res += color;\n    if(AA > 1.)\n    {\n        for(float x = 0.; x < 1.; x += st)\n        {\n            vec4 color;\n            _mainImage(color, fc + (hash22((x+iTime+fc)*25.)-0.5));\n            res += color;\n        }\n    }\n    return res/AA;\n}\n\nvec3 dither(vec3 color, vec2 coord, float steps)\n{\n    vec3 reduce = floor(color*steps)/steps;\n    vec3 error = color-reduce;\n    return reduce+step(vec3(hash21(coord)), error*steps)/steps;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(dither(stochasticAA(fragCoord, iMouse).rgb, fragCoord, 256.), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32862,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mididuck/watermelon"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}