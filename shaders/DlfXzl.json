{
    "Shader": {
        "info": {
            "date": "1675172098",
            "description": "variant with disks in contact. Mouse show tiling.\nCould it be possible to have a denser packing ?\n( tempting to offset one every two lines by .5 ( ~ hexa packing ), but this isn't compatible with the regular change of tilling. )",
            "flags": 0,
            "hasliked": 0,
            "id": "DlfXzl",
            "likes": 27,
            "name": "minimal Modular Flow - big disks",
            "published": 3,
            "tags": [
                "flow",
                "2tweets",
                "golf",
                "modular",
                "eigenvector",
                "eigenvalue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// big disks variant of https://www.shadertoy.com/view/cll3Rj\n// minimal variant of  https://shadertoy.com/view/ctlGRj\n// golfing 2041 chars \"Modular Flow\" by mla. https://shadertoy.com/view/dlXGRN\n\n#define hue(v)  ( .6 + .6 * cos( v  + vec4(0,23,21,0)  ) )\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy, q, V,I,\n         U =   ( 8.* ( u+u - R ) / R.y  + 2. )                         // normalized coords\n             * mat2(cos( .1*iTime + vec4(0,33,11,0)))                  // rotation\n             - 2.;\n    float w = 16./R.y,                                                 // pixel width, for AA\n    \n          k = exp( log(2.618)* fract(iTime/4.) - .5 );                 // --- the heart of the transform\n    mat2  P = mat2( vec2(1,-1.618) / 1.9 ,                             // ( see mla original : https://shadertoy.com/view/dlXGRN )\n                    vec2(1,  .618) / 1.176 );                          // NB: P is orthonormal ( i.e. rotation )\n    q = vec2(k,1./k);                                                  // volume conservative shear. k: .6 → .92\n    V = P * ( U * q );                                                 // shear and rotate up to the next shear axis\n    \n    O *= 0.;\n    for( int i=0; i<9; i++ )                                           // visit neighborhood to complete disk footprint (shouldn't 4 be enough ? )\n        I = round(V) + vec2(i%3,i/3) - 1.,                             // neighbor Id. V-I = local coord\n        O += smoothstep( w, -w,  length( ( V - I ) * P / q ) - .48 )   // draw disks via back-transform\n             * ( iMouse.z>0. ? hue( ( I.x+17.*I.y)/12. ) : vec4(1) );  // mouse: color disks\n          // * ( ( mod(I.x+I.y,2.) < 1. ) ? .5 : 1. ) ;                // checker\n     // O += sin( 30. * length( ( V - round(V) ) * P / q ) ) -O;       \n     // O += .05/ dot( u = ( V - I ) * P / q , u );\n        \n  // O = sin(30.*O);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}