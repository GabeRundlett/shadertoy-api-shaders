{
    "Shader": {
        "info": {
            "date": "1692551208",
            "description": "simple perlin noise",
            "flags": 0,
            "hasliked": 0,
            "id": "mtsfRn",
            "likes": 0,
            "name": "diamboy's simple perlin noise",
            "published": 3,
            "tags": [
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "int rand(ivec2 c, int seed)\n{\n    int v = c.x * 2600676571 + c.y * 1340679673 + seed;\n    v = (v ^ (v >> 16)) * 0x45d9f3b;\n    v = (v ^ (v >> 16)) * 0x45d9f3b;\n    v = (v ^ (v >> 16));\n    return v;\n}\n\nfloat rand1(ivec2 c, int seed)\n{\n    return fract(float(rand(c, seed)) / 16777216.0);\n}\n\nvec2 rand2(ivec2 c, int seed)\n{\n    int r = rand(c, seed);\n    int t = rand(c + r, seed);\n    vec2 s = fract(vec2(r, t) / 16777216.0);\n    s.y *= 6.2831853;\n    return vec2(cos(s.y), sin(s.y)) * s.x;\n}\n\nfloat smoothermix(float a, float b, float x)\n{\n    return mix(a, b, x*x*x * (10.0 - 15.0*x + 6.0*x*x));\n}\n\nfloat perlin(vec2 c, int seed)\n{\n    const int ITERS = 5;\n    const float SCALE = 1.0 / (2.0 - pow(0.5, float(ITERS - 1)));\n    float total = 0.0;\n    \n    for (int i = 1; i < 1 << ITERS; i <<= 1)\n    {\n        vec2 s = c * float(i);\n        ivec2 ic = ivec2(floor(s));\n        vec2 fc = s - floor(s);\n    \n        vec2 g1 = rand2(ic + ivec2(0, 0), seed + i);\n        vec2 g2 = rand2(ic + ivec2(1, 0), seed + i);\n        vec2 g3 = rand2(ic + ivec2(0, 1), seed + i);\n        vec2 g4 = rand2(ic + ivec2(1, 1), seed + i);\n\n        float d1 = dot(g1, vec2(0, 0) - fc);\n        float d2 = dot(g2, vec2(1, 0) - fc);\n        float d3 = dot(g3, vec2(0, 1) - fc);\n        float d4 = dot(g4, vec2(1, 1) - fc);\n\n        float r = smoothermix(\n            smoothermix(d1, d2, fc.x),\n            smoothermix(d3, d4, fc.x),\n            fc.y\n        );\n        total += r / float(i);\n    }\n    return (total / SCALE) * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 muv = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    float r = perlin((uv - muv) * 8.0, int(iTime * 0.25));\n    fragColor = vec4(r,r,r,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}