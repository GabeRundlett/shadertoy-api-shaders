{
    "Shader": {
        "info": {
            "date": "1577685395",
            "description": "Grail (Fate Stay Night)",
            "flags": 32,
            "hasliked": 0,
            "id": "Wl3GWX",
            "likes": 16,
            "name": "Grail (Fate Stay Night)",
            "published": 3,
            "tags": [
                "star",
                "fate",
                "grail"
            ],
            "usePreview": 0,
            "username": "shackle",
            "viewed": 930
        },
        "renderpass": [
            {
                "code": "\n#define AA 2\n\n#define PI 3.141592654\nvec3 norm_fract(vec3 x)\n{\n    vec3 p=fract(x);\n    return 8.0*p*(1.0-p)-1.0;\n}\nfloat noise(float a)\n{\n    float k = fract(sin(131.33 * a + 23.123) * 131.133);\n    return k;\n}\nvec3 noise(vec3 a)\n{\n    vec3 k = fract(sin(131.33 * a + 23.123) * 131.133);\n    return k;\n}\nfloat map(float l)\n{\n    float lm = 1.0;\n    l = clamp(1e-5, l, l);\n    float lm2 = lm * lm;\n    float lm4 = lm2 * lm2;\n    return sqrt(lm4 / (l * l) + lm2);\n    // return 1.0/(l+1e-5);\n}\n\nvec4 BlurSampler(sampler2D tex,vec2 uv,vec2 w)\n{\n    vec4 color=texture(tex,uv);\n    color+=texture(tex,uv+vec2(0.0,w.y));\n    color+=texture(tex,uv-vec2(0.0,w.y));\n    color+=texture(tex,uv+vec2(w.x,0.0));\n    color+=texture(tex,uv-vec2(w.x,0.0));\n    return 0.2*color;\n}\nvec3 fbm_noise(vec2 coord,float ft)\n{\n    float len=length(coord);\n    float dis=map(len);\n    vec3 kp = vec3(coord * max(dis, 1.0), dis);\n\n    float fre=1.0;\n    float ap=0.5;\n    vec3 d=vec3(1.0);\n    for(int i=0;i<5;i++)\n    {\n        kp=mix(kp,kp.yzx,0.1);\n        kp+=sin(0.75*kp.zxy * fre+ft*iTime);\n        d -= abs(dot(sin(kp), norm_fract(kp.yzx)) * ap);\n        fre*=-2.0;\n        ap*=0.5;\n    }\n    return vec3((d));\n}\nvec3 DrawLines(vec2 coord,float fre,float ap,float bias)\n{\n    \n    float len=length(coord);\n    float depth=map(len);\n    float frag=(sin((depth-2.0*bias)*4.0)+1.0)*0.5;\n    vec3 color=mix(vec3(0.0,0.0,0.99),vec3(0.0,1.0,1.0),frag*0.5);\n    // vec3 color=vec3(0.0,0.5,0.99);\n    float angle =atan(coord.y,coord.x);\n\n    float p=angle+fre*depth+bias;\n    float base=1.001;\n    float k=0.1/(0.1+len);\n    color*=smoothstep(base-k*k*k,base,(sin(p*3.0)+1.0)*0.5);\n    return 6.0*color*smoothstep(10.0,1.0,depth)*frag*ap;\n}\n\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec3 t_color=vec3(0.0);\n    float k=float(2*AA+1);\n    for(int m=-AA;m<=AA;m++)\n    for(int n=-AA;n<=AA;n++)\n    {\n        vec2 uv=(fragCoord+vec2(m,n)/vec2(2*AA+1))/iResolution.xy;\n        vec2 w=1.0/iResolution.xy;\n        vec2 coord=uv*2.0-1.0;\n        coord.y*=iResolution.y/iResolution.x;\n        vec3 color=vec3(0.0);\n        float ap=abs(fbm_noise(coord,0.5).x);\n        // color=max(color,DrawCenter(coord));\n        color=max(color,BlurSampler(iChannel0,uv,w).xyz)*(1.0+0.2*ap);\n        color=max(color,DrawLines(coord,1.0,ap,0.0+0.2*iTime));\n        color=max(color,0.5*DrawLines(coord,3.0,ap,PI*0.2+0.3*iTime));\n        color=max(color,0.3*DrawLines(coord,6.0,ap,PI*0.2+0.5*iTime));\n        vec3 preColor=texture(iChannel1,uv).xyz;\n        color=mix(color,preColor,0.5);\n        t_color+=color;\n    }\n    t_color/=k*k;\n    fragColor=vec4(2.0*t_color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash22(vec2 p)\n{\n    p = vec2(dot(p, vec2(127.1, 311.7)),\n        dot(p, vec2(269.5, 183.3)));\n\n    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\nfloat simplex_noise(vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    vec2 i = floor(p + (p.x + p.y) * K1);\n    vec2 a = p - (i - (i.x + i.y) * K2);\n    vec2 o = (a.x < a.y) ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0 * K2;\n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3 n = h * h * h * h * vec3(dot(a, hash22(i)), dot(b, hash22(i + o)), dot(c, hash22(i + 1.0)));\n\n    return dot(vec3(70.0, 70.0, 70.0), n);\n}\nfloat fbm(vec2 p)\n{\n    float res=0.0;\n    float fre=1.0;\n    float ap=1.0;\n    for(int i=0;i<5;i++)\n    {\n       res+=ap*simplex_noise(p*fre);\n       fre*=1.9;\n       ap*=0.5;\n    }\n    return res;\n}\nfloat map(float l)\n{\n    float lm = 1.0;\n    l = clamp(1e-5, l, l);\n    float lm2 = lm * lm;\n    float lm4 = lm2 * lm2;\n    return sqrt(lm4 / (l * l) + lm2);\n    // return 1.0/(l+1e-5);\n}\nvec3 DrawCenter(vec2 coord)\n{\n    float thre=8.0;\n    vec3 color=vec3(0.0,0.3,0.8);\n    float l=length(coord);\n    \n    float d=map(l);\n    float f0=smoothstep(0.09,0.13,l);\n    float f1=2.0*smoothstep(thre-0.54,thre,d);\n    f1+=smoothstep(0.0,thre,d);\n    return color*f0*f1;\n}\n\n\nvec4 BlurSampler(sampler2D tex,vec2 uv,vec2 w)\n{\n    vec4 color=texture(tex,uv);\n    color+=texture(tex,uv+vec2(0.0,w.y));\n    color+=texture(tex,uv-vec2(0.0,w.y));\n    color+=texture(tex,uv+vec2(w.x,0.0));\n    color+=texture(tex,uv-vec2(w.x,0.0));\n    return 0.2*color;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec2 w=1.0/iResolution.xy;\n    vec2 coord=uv*2.0-1.0;\n    vec2 uvDir=normalize(coord);\n    coord.y*=iResolution.y/iResolution.x;\n\n    float n=fbm(uv*400.0+uvDir*iTime);\n    vec3 color=DrawCenter(coord);\n    \n    vec3 color1=BlurSampler(iChannel0,uv-0.003*(n+0.01)*uvDir,w).xyz;\n    // vec3 color1=texture(iChannel0,uv-0.002*abs(n)*uvDir).xyz;\n\n    color=max(color,color1*0.99);\n\n    fragColor=vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}