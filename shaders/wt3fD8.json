{
    "Shader": {
        "info": {
            "date": "1612617274",
            "description": "pot",
            "flags": 32,
            "hasliked": 0,
            "id": "wt3fD8",
            "likes": 15,
            "name": "Day 417 ",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "// influenced by blackle's https://www.shadertoy.com/view/3dXfR2 !!\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= 0.95;\n    fragCoord += 0.5*iResolution.xy;\n    \n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    fragColor.xyz = pow(fragColor.xyz, vec3(1.,1.2,1.2));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.5;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 - n*0.15));\n    \n    \n    \n    \n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.35;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.15;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nmat3 getOrthogonalBasis(vec3 dir){\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return mat3(right,up,dir);\n}\n\nfloat cyclicNoise(vec3 p){\n    \n    //p.yz *= rot(1.4);\n    \n    float n = 0.;\n    float amp = 1.;\n    float gain = 0.5;\n    float lac = 1.3 ;\n    \n    vec3 seed = normalize(vec3(3,-1,2));\n    mat3 rotm = getOrthogonalBasis(seed);\n\n    for(int i = 0; i < 5; i++){\n        p -= cos(p.zxy*1.5*gain*2. + iTime)*0.1;\n        n += (dot(sin(p), cos(p.zxy)))*amp;\n    \n        amp *= gain;\n        p *= lac*rotm;\n\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 oouv = uv;\n    \n    \n    uv *= 0.7;\n    vec3 col = vec3(0);\n    \n    float n = cyclicNoise(vec3(uv*5.,iTime*0.5));\n    \n    n = cyclicNoise(vec3(uv*10. + n*1.15,iTime));\n        \n        \n    float nb = cyclicNoise(vec3(uv*5.,iTime));\n        \n        \n    \n    \n    float vn = valueNoise(iTime/2.,5.);\n    float vnb = valueNoiseStepped(iTime/2. + n*0.4*pow(vn,4.) + 5.,2.,4.);\n    float vnc = valueNoiseStepped(iTime/8.,4.,4.);\n    \n        \n    uv.x += (n*2. - 1.)*0.02;\n    uv.y += (nb*2. - 1.)*0.4;    \n    \n    float dfuv = fwidth(uv.x);\n    \n    float dfn = dFdx(n);\n    \n    uv.x = pmod(uv.x,0.04 - vn*0.02);\n    //uv *= .6;\n    \n    \n    float d = abs(uv.x);\n    vec2 oouvb = oouv; \n    oouv *= rot(pi*vnb);\n    \n    float w = vn*0.3;\n    oouv = abs(oouv) - w;\n    float db = max(oouv.x, oouv.y);\n    \n     \n    oouvb *= rot(-pi*vnb);\n    \n    oouvb = abs(oouvb) - w;\n    float dc = max(oouvb.x, oouvb.y);\n    \n    \n    dc = abs(dc) - vnc*0.;\n    \n    \n    db = xor(db,abs(dc - 0.1*vnc) - vn*0.1 , +0.0);\n    db -= 0.01;\n    float lineW =  0.001 + smoothstep(fwidth(db)*15., 0., db)*0.004;\n    \n    \n    //ouv = pmod(ouv,0.2);\n    \n    col += smoothstep(dfuv*(1. + sin(iTime + uv.x)*0.4 + 0.4),0.,d - lineW);\n    \n    \n    if(floor(mod(iTime/2.,2.)) == 0. ){\n        col = 1. - col;\n    }\n    \n    \n    col = mix(col,1.- col, smoothstep(fwidth(oouv.x)*1., 0., db));\n    \n    col = mix(col, 1. - col, \n        step(0.6,valueNoiseStepped(iTime*25.,2.,4.)) *\n        step(0.2,valueNoiseStepped(iTime*2.5,2.,2.))\n        \n        );\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float sc = 0. + valueNoise(iTime*18.,2.)*0.2;\n    \n    fragColor.x =texture(iChannel0,(fragCoord + sc*vec2(0,8))/iResolution.xy).x;\n    \n    fragColor.y =texture(iChannel0,(fragCoord + sc*vec2(0,-1))/iResolution.xy).y;\n    \n    fragColor.z =texture(iChannel0,(fragCoord + sc*vec2(0,-4))/iResolution.xy).z;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define pi acos(-1.)\n\n\n#define sint(a) (asin(sin(a))*2. - 1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pmod(p,d) mod(p - (d)*0.5, (d)) - 0.5*(d)\n\nfloat r11(float i){ return fract(sin(i*12.126)*12.6);}\n\n#define xor(a,b,c) min(max((a),-(b)), max((b),-(a) - c)) \n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), ss(fract(i), p,0.6));}\n\nfloat valueNoiseStepped(float i, float p, float steps){ return mix(  floor(r11(floor(i))*steps)/steps, floor(r11(floor(i) + 1.)*steps)/steps, ss(fract(i), p,0.6));}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}