{
    "Shader": {
        "info": {
            "date": "1715877675",
            "description": "I can't believe it: there's a more efficient way of raytracing...",
            "flags": 48,
            "hasliked": 0,
            "id": "4fVXRy",
            "likes": 0,
            "name": "Realtime Stylized Raytracer",
            "published": 3,
            "tags": [
                "raytracing",
                "pixel",
                "intersection",
                "ocean",
                "balls",
                "realtime",
                "island",
                "dithering",
                "stylized",
                "floatingisland"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "vec3 dither(in vec3 col, in vec2 fragCoord) {\n    col += (texelFetch(iChannel1, ivec2(mod(fragCoord, iChannelResolution[1].xy)), 0).x - 0.5) * 0.33334 + 0.001;\n    return round(col * 3.0) / 3.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord /= PIXEL_SIZE;\n\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    //col = col / (col + 0.8);\n    //col = pow(col, vec3(1.0 / 2.2));\n    \n    col = dither(col, fragCoord);\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = asin(1.0) * 2.0;\n\n#define PIXEL_SIZE ceil(iResolution.y / 250.0)\n\nvoid rotate(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct HitInfo {\n    bool hit;\n    float dist;\n    vec3 position;\n    vec3 normal;\n    int ID;\n};\n\nstruct Material {\n    vec3 diffuseColor;\n    vec3 specularColor;\n    bool opaque;\n};\n\n// normal and intersection functions\n\nHitInfo sphere(Ray ray, vec3 pos, float radius) {\n    HitInfo info;\n    // intercection code from iq\n\tvec3 oc = ray.origin - pos;\n\tfloat b = dot(oc, ray.direction);\n\tfloat c = dot(oc, oc) - radius * radius;\n\tfloat h = b*b - c;\n\tif (h > 0.0) {\n        info.dist = -b-sqrt(h);\n        info.hit = true;\n        info.position = ray.origin + ray.direction * info.dist;\n        info.normal = (info.position-pos)/radius;\n    }\n    return info;\n}\n\nHitInfo plane(Ray ray, vec3 dir, float offset) {\n    HitInfo info;\n    // intercection code from iq\n    info.dist = (-offset - dot(dir,ray.origin)) / dot(dir, ray.direction);\n    \n    if (info.dist > 0.0) {\n        info.hit = true;\n        info.position = ray.origin + ray.direction * info.dist;\n        info.normal = dir;\n    }\n    return info;\n}\n\n\nHitInfo triangle(Ray ray, vec3 v0, vec3 v1, vec3 v2) {\n    HitInfo info;\n    vec3 ro = ray.origin;\n    vec3 rd = ray.direction;\n    // from iq\n    vec3 v1v0 = v1 - v0;\n    vec3 v2v0 = v2 - v0;\n    vec3 rov0 = ro - v0;\n    vec3  n = cross( v1v0, v2v0 );\n    vec3  q = cross( rov0, rd );\n    float d = 1.0/dot( rd, n );\n    float u = d*dot( -q, v2v0 );\n    float v = d*dot(  q, v1v0 );\n    float t = d*dot( -n, rov0 );\n    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;\n    \n    if (t > 0.0) {\n        info.dist = t;\n        info.hit = true;\n        info.position = ray.origin + ray.direction * info.dist;\n        info.normal = normalize(cross( v1-v0, v2-v0 )) * sign(-d);\n    }\n    return info;\n}\n\n// scene info\n\nMaterial getMaterial(HitInfo info) {\n    int ID = info.ID;\n    info.position += 0.001;\n    Material mat;\n    if (ID == 0) return Material(vec3(0.8,0.2,0.2), vec3(0.2), true);\n    if (ID == 1) return Material(vec3(0.0), vec3(0.9), true);\n    if (ID == 2) return Material(vec3(0,0.25,0.5), vec3(0.5), true);\n    else return Material(mix(vec3(0.333333, 0.666667, 0), vec3(0.75, 0.5, 0.0), info.normal.y < 0.0 ? 1.0 : 0.0), vec3(0), true);\n}\n\nvec3 skyColor(Ray ray) {\n    vec3 ground = vec3(0.33333333333 * mod(floor(ray.direction.x / ray.direction.y), 2.0));\n    vec3 skyGradient = mix(vec3(1), vec3(0,0.5,1), ray.direction.y * 0.5 + 0.5);\n    float groundToSky = smoothstep(-0.01, 0.0, ray.direction.y);\n    return skyGradient; //mix(ground, , groundToSky);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// camera controller\n\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nconst int KEY_SPACE = 32;\n\nint isPressed(int key) {\n    return int(texelFetch(iChannel1, ivec2(key, 0), 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    // ignore unused pixels\n    if (fragCoord.y > 1.0) return;\n    \n    // get data from previous frame\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    /* POSITION */\n    if (fragCoord.x == 0.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(-9,2,-7,0);\n        \n        vec3 rotation = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n        vec3 velocity = vec3(\n            sin(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - cos(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D)),\n            sin(PI * rotation.x) * float(isPressed(KEY_S) - isPressed(KEY_W)),\n            cos(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - sin(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D))\n        ) * 4.0;\n\n        fragColor.xyz += velocity * iTimeDelta;\n        return;\n    }\n    \n    /* DIRECTION */\n    if (fragCoord.x == 1.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0.1,0,-0.7,0);\n        \n        // arrow keys\n        fragColor.x -= float(isPressed(KEY_UP) - isPressed(KEY_DOWN)) * iTimeDelta;\n        fragColor.z -= float(isPressed(KEY_RIGHT) - isPressed(KEY_LEFT)) * iTimeDelta;\n        \n        // clamp\n        if (fragColor.x > 0.5) fragColor.x = 0.5;\n        if (fragColor.x < -0.5) fragColor.x = -0.5;\n        \n        return;\n    }\n    \n    /* RENDER TIME */\n    if (fragCoord.x == 2.5) {\n        fragColor.x += 1.0;\n        \n        // initial data\n        if (isPressed(KEY_W) + isPressed(KEY_A) + isPressed(KEY_S) + isPressed(KEY_D) + isPressed(KEY_UP) + isPressed(KEY_DOWN) + isPressed(KEY_LEFT) + isPressed(KEY_RIGHT) > 0 || iFrame == 0) fragColor = vec4(0);\n        \n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "HitInfo traceRay(Ray ray) {\n    HitInfo info;\n    info.ID = -1;\n    info.dist = 2e38;\n    info.hit = false;\n    \n    for (float transparentDepth = 0.0; transparentDepth < 3.0; transparentDepth++) {\n    \n        HitInfo[] objects = HitInfo[](\n            sphere(ray, vec3(0, 2.75 - pow(mod(iTime * 2.0, 3.0) - 1.5, 2.0), 0), 0.5),\n            sphere(ray, vec3(2, 1.5 - pow(mod(iTime * 2.0 + 0.5, 2.0) - 1.0, 2.0), 0), 0.5),\n            \n            plane(ray, vec3(0, 1, 0), 10.0),\n            \n            triangle(ray, vec3(0,0,4), vec3(-3,0,2), vec3(-2,0,-2)),\n            triangle(ray, vec3(0,0,4), vec3(4,0,2), vec3(-2,0,-2)),\n            triangle(ray, vec3(3,0,-3), vec3(4,0,2), vec3(-2,0,-2)),\n            \n            triangle(ray, vec3(0,0,4), vec3(0,-8,0), vec3(-3,0,2)),\n            triangle(ray, vec3(0,0,4), vec3(0,-8,0), vec3(4,0,2)),\n            triangle(ray, vec3(3,0,-3), vec3(0,-8,0), vec3(4,0,2)),\n            triangle(ray, vec3(3,0,-3), vec3(0,-8,0), vec3(-2,0,-2)),\n            triangle(ray, vec3(-3,0,2), vec3(0,-8,0), vec3(-2,0,-2))\n        );\n    \n        for (int i = 0; i < objects.length(); i++) {\n            HitInfo obj = objects[i];\n            if (obj.hit && obj.dist > 0.0) {\n                info.hit = true;\n                if (obj.dist < info.dist) {\n                    info.ID = i;\n                    info.dist = obj.dist;\n                    info.normal = obj.normal;\n                }\n            }\n        }\n        \n        info.position = ray.origin + ray.direction * info.dist;\n        \n        if (!getMaterial(info).opaque) {\n            info.ID = -1;\n            info.dist = 2e38;\n            info.hit = false;\n            ray.origin = info.position + ray.direction * 0.001;\n        } else {\n            break;\n        }\n    }\n    \n    return info;\n}\n\nfloat shadow(vec3 pos, vec3 normal, vec3 sunDir, float quality) {\n    quality *= 0.5;\n    float shade = 0.0;\n    float shadowCount = 0.0;\n\n    for (float x = -quality; x < quality; x++) {\n        for (float y = -quality; y < quality; y++) {\n            vec3 dir = normalize(sunDir * 8.0 * quality + vec3(x, 0, y));\n\n            if (dot(dir, normal) < 0.0) {\n                shade++;\n            } else {\n                Ray shadowRay = Ray(pos, dir);\n                HitInfo info = traceRay(shadowRay);\n                shade += float(info.hit);\n            }\n\n            shadowCount++;\n        }\n    }\n    \n    return pow(shade / shadowCount, 2.0);\n}\n\nvec3 render(vec2 uv) {\n    Ray ray;\n    ray.origin = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n    \n    ray.direction = normalize(vec3(uv, 0) - vec3(0,0,1));\n    vec3 camRotation = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n    rotate(ray.direction.yz, camRotation.x * PI);\n    rotate(ray.direction.xz, camRotation.z * PI);\n    \n    vec3 sunDir = normalize(vec3(1,4,-2));\n    \n    vec3 light = vec3(0);\n    vec3 color = vec3(1);\n    \n    for (float rayHits = 0.0; rayHits < 2.0; rayHits++) {\n        HitInfo cameraHit = traceRay(ray);\n\n        if (cameraHit.hit) {\n            Material mat = getMaterial(cameraHit);\n            ray.origin = cameraHit.position - ray.direction * 0.01;\n\n            // shadow quality decreases with distance to improve performance\n            float shade = 0.75 * shadow(ray.origin, cameraHit.normal, sunDir, clamp(floor(4.0 - cameraHit.dist * 0.1), 1.0, 3.0));\n            \n            // normal-based shading\n            shade -= 0.125 * dot(sunDir, cameraHit.normal);  \n            \n            light += color * mat.diffuseColor * (1.0 - shade);\n            if (length(mat.specularColor) == 0.0) {\n                break;\n            }\n            color *= mat.specularColor;\n            \n            // specular reflections\n            ray.direction = reflect(ray.direction, cameraHit.normal);\n\n        } else {\n            light += skyColor(ray) * color;\n            break;\n        }\n        \n    }\n    \n    return light;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord = floor(fragCoord * PIXEL_SIZE);\n    \n    if (fragCoord.x / iResolution.x > 1.0 || fragCoord.y / iResolution.y > 1.0)\n        discard;\n    \n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy ) / iResolution.y;\n    fragColor = vec4(render(uv), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}