{
    "Shader": {
        "info": {
            "date": "1701544798",
            "description": "Performance test of fast inverse smoothstep by user iradicator",
            "flags": 0,
            "hasliked": 0,
            "id": "DttBDS",
            "likes": 1,
            "name": "fastinvsmoothstep performance",
            "published": 3,
            "tags": [
                "fast",
                "animation",
                "function",
                "smoothstep"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "// --- Set the function to test here ---\n#define FUNCTION FAST_3\n// -------------------------------------\n\n// All fps values tested without any additional steps\n// 80 fps\n#define ORIGINAL f0\n\n// 110 fps\n#define FAST_1 f1\n\n// 90 fps\n#define FAST_2 f2\n\n// 98 fps\n#define FAST_3 f3\n\n// Original comment:\n// ---\n// \n// For more details, check out my blog post: \n// https://iradicator.com/fast-inverse-smoothstep/\n//\n// fastinvsmoothstep implementation: https://www.shadertoy.com/view/wtXfzS\n// fastinvsmoothstep-based animations: https://www.shadertoy.com/view/wtlfz2\n//\n// ---\n\n#define IS_SECOND_UPDATE_STEP 0\n#define IS_TWO_ADDITIONAL_UPDATE_STEPS 0\n\n#define EPSILON 0.00001\n\nfloat f0(in float y)\n{\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat f1(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = 0.45*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nfloat f2(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = 0.5*abs(yn)*yn*yn*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n    return t + 0.5;     \n}\n\nfloat f3(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = -0.25*yn*yn*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nfloat f4(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float absyn3 = abs(yn)*yn*yn;\n  float t = 0.45*yn+0.5*yn*(absyn3*absyn3-0.9*absyn3);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.1;\n    \n    float size = asin(sin(iTime))/3.1415926+0.5;\n    for(int i = min(0, iFrame); i < 10000; i++)\n    {\n        size = mix(size, FUNCTION(size), 0.0001);\n    }\n    \n    vec3 col = vec3(1)*smoothstep(size + 3.0/iResolution.y, size, length(uv));\n    \n    col = pow(col,vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}