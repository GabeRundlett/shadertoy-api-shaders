{
    "Shader": {
        "info": {
            "date": "1694662999",
            "description": "CIRCLE: CYAN\nSEGMENT: MAGENTA\nTANGENT: YELLOW",
            "flags": 0,
            "hasliked": 0,
            "id": "cdcyRr",
            "likes": 9,
            "name": "2DPGA + CIRCLE, SEGMENT, TANGENT",
            "published": 3,
            "tags": [
                "algebra",
                "geometric",
                "projective",
                "pga"
            ],
            "usePreview": 0,
            "username": "ENDESGA",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// 2D PROJECTIVE GEOMETRIC ALGEBRA\n// copyright ENDESGA 2023\n\n#define M iMouse.xy\n#define W iResolution.x\n#define H iResolution.y\n#define point vec2\n#define pair vec4\n#define line vec3\n#define circle vec3\n#define EPSILON 0.0001\n#define INFINITY 1e7\n#define AA( uv ) ( 0.5 * ( dFdx( uv.x ) + dFdy( uv.y ) ) )\n\n#define CYAN vec4( 0, 1, 1, 1 )\n#define MAGENTA vec4( 1, 0, 1, 1 )\n#define YELLOW vec4( 1, 1, 0, 1 )\n\n// line that joins two points\nline join( point P1, point P2 )\n{\n\treturn vec3( P1.y - P2.y, P2.x - P1.x, P1.x * P2.y - P1.y * P2.x );\n}\n\n// point that meets two lines\npoint meet( line L1, line L2 ) {\n    return point( L1.y * L2.z - L1.z * L2.y, L1.z * L2.x - L1.x * L2.z ) / ( L1.x * L2.y - L1.y * L2.x );\n}\n\n// perpendicular bisector between two points\nline bisect( point P1, point P2 ) {\n    return line( 2. * ( P1 - P2 ), dot( P2, P2 ) - dot( P1, P1 ) );\n}\n\n// circle that links three points\ncircle link(in point a, in point b, in point c) {\n    point t = b - a;\n    b = c - a;\n    float d = 2. * (t.x * b.y - t.y * b.x);\n    c = t * dot(b, b);\n    b *= dot(t, t);\n    t = point(b.y - c.y,c.x - b.x) / d;\n    return circle(t + a, length(t));\n}\n\n// \"distance\" between line and point\nfloat dist( line L, point P )\n{\n\treturn ( P.x * L.x + P.y * L.y );\n}\n\n// \"distance\" between point and line\nfloat dist( point P, line L )\n{\n\treturn ( dist( L, P ) + L.z ) / ( L.x * L.x + L.y * L.y );\n}\n\n// project point to line\npoint project( point P, line L )\n{\n\treturn P - ( dist( P, L ) * L.xy );\n}\n\n// project line to point\nline project( line L, point P )\n{\n\treturn line( L.xy, -( P.x * L.x + P.y * L.y ) );\n}\n\n// reflect point across line (2x projection)\npoint mirror( point P, line L )\n{\n\treturn P - ( 2. * dist( P, L ) * L.xy );\n}\n\n// reflect line across point (2x projection)\nline mirror(line L, point P) {\n    return line(L.xy, L.z - 2. * ( ( L.x * L.x + L.y * L.y ) * dist( P, L )));\n}\n\n// pair of points tangent of a point and circle\n// thanks mla, elenzil, jeyko: https://www.shadertoy.com/view/DtBBWc\n// simplified by me\npair tangents(point P, circle C)\n{\n    P -= C.xy;\n    float d = dot( P, P ) / ( C.z * C.z );\n    P = P / d;\n    point t = ( vec2( -P.y, P.x ) * sqrt( d - 1. ) );\n    return pair( P + C.xy + t, P + C.xy - t );\n}\n\n// line from the tangents of a point and circle\nline segment(point P, circle C)\n{\n    pair t = tangents( P, C );\n    return join( t.xy, t.zw );\n}\n\n// pair of points that intersect a circle\npair intersect(line L, circle C)\n{\n    point p = project(C.xy,L);\n    float d = distance(C.xy,p);\n    vec2 n = normalize(vec2(-L.y, L.x)) * sqrt(C.z * C.z - d * d);\n    return pair(p - n, p + n);\n}\n\n//\n\nvec4 draw_col = vec4( 0 );\n\nvoid draw_line( in vec2 uv, in line L, in vec4 line_col )\n{\n\tfloat dist = abs( dist( L, uv ) + L.z ) / length( L.xy );\n\tfloat aa = AA( uv );\n\tdraw_col = mix( draw_col, line_col, smoothstep( aa, -aa, dist - 1.5 ) );\n}\n\nvoid draw_point( in vec2 uv, point P, in vec4 point_col )\n{\n\tfloat dist = length( uv - P );\n\tfloat aa = AA( uv );\n\tdraw_col = mix( draw_col, point_col, smoothstep( aa, -aa, dist - 7.5 ) );\n}\n\nvoid draw_circle(in vec2 uv, in circle C, in vec4 circle_col) {\n    float aa = AA( uv );\n    draw_col = mix( draw_col, circle_col, smoothstep( aa, -aa, abs(length(uv - C.xy) - C.z) - 1.5 ) );\n    draw_point( uv, point( C.x, C.y ), circle_col * .5 );\n}\n\nvoid mainImage( out vec4 col, in vec2 uv )\n{\n    // I prefer working in pixel space rather than normalised\n    point p_mouse = (iMouse.z <= 0.) ? point((W/2.)+(sin(iTime)*( W / 5. ))+( W / 10. ),(H/2.)+(sin(iTime)*( H / 5. ))+( H / 10. )) : M;\n    point p_1a = point( ( W / 10. ), ( H / 2. ) - ( sin( iTime * 2. ) * ( H / 4. ) ) );\n\tpoint p_1b = point( ( W / 2. ) - ( cos( iTime * 2. ) * ( W / 4. ) ), ( H / 10. ) );\n    line l_1 = join(p_1a,p_1b);\n    point p_3 = point( W-( W / 10. ), H-( H / 10. ));\n    circle c_1 = link( p_mouse, p_1a, p_1b );\n    \n    pair t_ab = tangents( p_3, c_1 );\n    point t_a = t_ab.xy, t_b = t_ab.zw;\n    \n    draw_point( uv, p_mouse, CYAN );\n    draw_point( uv, p_1a, CYAN );\n    draw_point( uv, p_1b, CYAN );\n    draw_circle( uv, c_1, CYAN );\n    draw_circle( uv, link( p_3, p_mouse, t_b ), CYAN );\n    draw_point( uv, p_3, YELLOW );\n    \n    draw_line( uv, segment(p_3,c_1), MAGENTA );\n    draw_line( uv, join(p_3,t_a), YELLOW );\n    draw_line( uv, join(p_3,t_b), YELLOW );\n    draw_point( uv, t_a, MAGENTA );\n    draw_point( uv, t_b, MAGENTA );\n\n\tcol = draw_col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}