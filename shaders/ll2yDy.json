{
    "Shader": {
        "info": {
            "date": "1510073157",
            "description": "x",
            "flags": 2,
            "hasliked": 0,
            "id": "ll2yDy",
            "likes": 9,
            "name": "nmn_hex",
            "published": 3,
            "tags": [
                "x"
            ],
            "usePreview": 0,
            "username": "nonymononymo",
            "viewed": 914
        },
        "renderpass": [
            {
                "code": "//Radius for each hexagon. Smaller = more hexagons\n#define R .09\n//Difference between neighbouring hexagons.\n//#define OFFSET 1.\n//Strength of the falloff in the corners\n\n//Strength of Fisheye effect on each facet\n#define FISH 1.0\n\n\n#define SQRT3 1.732050807\n#define PI 3.141592653\n\nvec2 hexCenter(vec2 id, float odd)\n{\n    return vec2(\n        SQRT3 * R * (id.x +.5*odd),\n        1.5 * id.y * R\n        );\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    float OFFSET =  0.1 + 4. * (1. - iMouse.y / iResolution.y);\n    float FALLOFF = 0. + 0.5 * iMouse.x / iResolution.x;\n    //UV coordinates [1,2]\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    uv.xy += 1.0;\n    vec2 grid;\n\n    //Estimate hex coordinate\n    grid.y = floor(uv.y / (1.5*R));\n    float odd = mod(grid.y, 2.0);\n    grid.x = floor(uv.x / (SQRT3 * R) - odd*.5);\n\n    //Find possible centers of hexagons\n    vec2 h1 = hexCenter(grid, odd);\n    vec2 h2 = hexCenter(grid + vec2(1.0,0.0), odd);\n    vec2 h3 = hexCenter(grid + vec2(odd, 1.0), 1.0-odd);\n\n    //Find closest center\n    float d1 = dot(h1-uv, h1-uv);\n    float d2 = dot(h2-uv, h2-uv);\n    float d3 = dot(h3-uv, h3-uv);\n    \n    if (d2 < d1)\n    {\n        d1 = d2;\n        h1 = h2;\n    }\n    if (d3 < d1)\n    {\n        d1 = d3;\n        h1 = h3;\n    }\n    \n    //Hexagon UV\n    vec2 uv2 = uv - h1;\n    \n    //Set Hexagon offset\n    uv = (uv.xy - 1.0) + uv2 * OFFSET;\n\n    //Per Facet Fisheye effect (optional)\n    vec2 coords = (uv2 - 0.5*R) * 2.0;\n    vec2 fisheye;\n    fisheye.x = (1.0 - coords.y * coords.y) * FISH * (coords.x);\n    fisheye.y = (1.0 - coords.x * coords.x) * FISH * (coords.y);\n    uv -= fisheye*R;\n\n\n    //Retrieve texture colour\n    o = texture( iChannel0, uv);\n\n    //Redude corners (optional)\n    o = max(vec4(0.0), o - length(2.0*uv-1.0)*FALLOFF);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}