{
    "Shader": {
        "info": {
            "date": "1722144677",
            "description": "copypast from  https://glslsandbox.com/e#109322.0 https://www.shadertoy.com/view/mtyGWy https://www.shadertoy.com/view/lcByWR",
            "flags": 0,
            "hasliked": 0,
            "id": "lcBcWz",
            "likes": 0,
            "name": "particles in field",
            "published": 3,
            "tags": [
                "fractal",
                "color"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 82
        },
        "renderpass": [
            {
                "code": "#define N 7.\n#define PI 3.1415926536\n#define TRAIL 1.99\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nconst float TWOPI = 2.0*PI; \n#define time iTime\n#define resolution iResolution.xy\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n        vec2 uv2 = (2. * fragCoord - iResolution.xy) / iResolution.y;\n        uv2*=0.70;\n    vec2 tuv = fragCoord / iResolution.xy;\n    vec2 px = 1. / iResolution.xy;\n     uv *= 3.0 ;\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n  float t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 1.2;\n\tfloat si = sin(t3);\n\tfloat co = cos(t3);\n\tmat2 ma = mat2(co, si, -si, co);\n  \n  vec2 uPos = uv2;\n\t\n\t\n\tfloat multiplier = 0.0005;\n\tconst float step = 0.704;\n\tconst float loop = 100.0;\n\tconst float timeSCale = 0.75;\n\t\n\tvec3 blueGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\t\t\n\t\tfloat t = time*timeSCale-step*i;\n\t\tvec2 point = vec2(0.75*sin(t), 0.5*sin(t));\n     \n\t\tpoint += vec2(1.75*cos(t*4.0), 0.5*sin(t*3.0));\n\t\tpoint /= 1.0;\n\t\tfloat componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tblueGodColor += vec3(componentColor/3.0, componentColor/3.0, componentColor);\n\t}\n\t\n\tvec3 redGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\n\t\tfloat t = time*timeSCale-step*i;\n\t\tvec2 point = vec2(1.5*sin(t*4.0+20.0), 3.75*sin(t+10.0));\n\tpoint /= 1.0;\n\t\tfloat componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tredGodColor += vec3(componentColor, componentColor/3.0, componentColor/3.0);\n\t}\n   \n\n\t \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    uv0.x+=2.*cos(iTime);\nuv0.y+=2.*sin(iTime);\n  uv0*=ma;\n    for (float i = 0.0; i < 5.0; i++) {\n   \n        uv0 = fract(uv0 * 1.5) - 0.5;\n\n        float d = length(uv0) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/1.;\n        d = abs(d);\n\n        d = pow(0.021 / d, 1.2);\n\n        finalColor += col * d;\n    }\n\tvec3 greenGodColor = vec3(0.0);\n\tfor(float i=1.0;i<loop;i++){\n\t\tfloat t = time*timeSCale-step*i;\n\t\tvec2 point = vec2(0.75*sin(t*3.0+20.0), 0.45*sin(t*2.0+40.0));\n\t\tpoint += vec2(0.35*cos(t*2.0+100.0), 0.5*sin(t*3.0));\n\t\tpoint /= 1.0;\n        point*=ma;\n\t\tfloat componentColor= multiplier/((uPos.x-point.x)*(uPos.x-point.x) + (uPos.y-point.y)*(uPos.y-point.y))/i;\n\t\tgreenGodColor += vec3(componentColor/3.0, componentColor, componentColor/3.0);\n\t}\n\tfloat angle = (atan(uPos.y, uPos.x)+PI) / TWOPI;\n\tfloat radius = sqrt(uPos.x*uPos.x + uPos.y*uPos.y);\n\t\n\n\t\n\t\n\t\n    \n\t\n\t\n\tfloat wallColor = abs(sin(pow(radius, 0.1)*300.0 - time*10.0) )/2.2;\n\twallColor *= abs(sin(pow(radius, 0.1)*500.0 + time + 100.0) )/2.2;\t\n\twallColor *= abs(sin(angle*PI*50.0 - time*5.0))/2.2;\n\twallColor *= abs(sin(angle*PI*100.0 + time*5.0))/2.2;\n\tvec3 color = radius * vec3(wallColor/(20.0*radius), wallColor/(20.0*radius), wallColor);\n\t\n\tcolor *= blueGodColor+redGodColor+greenGodColor;\n\t\n\tcolor += blueGodColor+redGodColor+greenGodColor;\n\tcolor += greenGodColor;\n  \n  \n    float t = iTime * .5;\n    uv *= mat2(cos(t), sin(t), -sin(t), cos(t));\n    vec3 col = TRAIL*vec3(sin(.1 * t),cos(.1 * t),0.15).rgb*0.1+px.x;\n    for (float i = 0.; i < N; i++)\n    {\n    for(float j=1.0;j<loop;j++){\n      float phase = 5. * PI * i / N + t;\n       float t = time*timeSCale-step*i;\n    vec2 pos = 5.15 * vec2(sin(phase), sin(2. * phase));\n \n\t\t\n\t\t\n      \n        \tfloat componentColor= multiplier/((uPos.x-pos.x)*(uPos.x-pos.x) + (uPos.y-pos.y)*(uPos.y-pos.y))/j;\n           greenGodColor *= 1.0;\n\t\tgreenGodColor += vec3(componentColor/3.0, componentColor, componentColor/1.0);\n        float d = smoothstep(.025, 0., abs(length(uv - pos) - .15) - .01);\n        col = mix(col, hsv2rgb(vec3(mix(0., .1, i / (N - 1.)), 1., 1.)), d)+vec3(happy_star(uv-pos, anim) * vec3(finalColor)*0.012);\n    }}\n\n    fragColor = vec4(col+color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}