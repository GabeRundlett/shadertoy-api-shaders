{
    "Shader": {
        "info": {
            "date": "1689962360",
            "description": "Analytical motion blur for a 2d disk.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdjBzc",
            "likes": 1,
            "name": "motion blurred disk",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "motion",
                "disk"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 55
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n\nfloat capsule_aa(vec2 tc, float r, float s, vec2 a, vec2 b)\n{\n    vec2 vec = b - a;\n    \n    tc -= a;\n    \n    float tt = dot(vec, vec);\n    \n    float rcptt = 1.0 / tt;\n    \n    vec2 p = vec * (tt == 0.0 ? 0.0 : clamp(dot(tc, vec * rcptt), 0.0, 1.0));\n    \n    float l = length(tc - p);\n    \n    float v = clamp((r - l) * s * 0.5, 0.0, 1.0);\n    \n    v = v*v*(3.0-2.0*v);\n    \n    return v;\n}\n\nfloat lineseg_mb(float x, float r, float t)\n{\n    float u = r + t * 0.5;\n    \n    return clamp(u - abs(-x - r + u), 0.0, min(2.0 * r, t)) * (1.0/t);\n}\n\nfloat disk_mb(vec2 tc, float r, float t)\n{\n    float r0 = sqrt(max(0.0, r*r - tc.y*tc.y));\n    \n    return lineseg_mb(tc.x, r0, t);\n}\n\n#if 1\nfloat disk_mb(vec2 tc, float r, vec2 a, vec2 b)\n{\n    float aa_mask = capsule_aa(tc, r, iResolution.y, a, b);\n\n    vec2 vec = b - a;\n    \n    tc -= a;\n    \n    float tt = dot(vec, vec);\n        \n    float rcptt = 1.0 / tt;\n    \n    vec2 dirX = vec * rcptt;\n    \n    vec2 dirY = vec2(-dirX.y, dirX.x);\n        \n    float x = dot(tc, dirX);\n    float y = dot(tc, dirY);\n    \n    float r0 = sqrt(max(0.0, r*r * rcptt - y*y));\n    \n    float u = r0 + 0.5;\n    \n    float v = clamp(u - abs(-x - r0 + u), 0.0, min(2.0 * r0, 1.0));\n\n    if(tt == 0.0) v = dot(tc, tc) < r*r ? 1.0 : 0.0;\n    \n    v *= aa_mask;\n    \n    return v;\n}\n#else\nfloat disk_mb(vec2 tc, float r, vec2 a, vec2 b)\n{\n    vec2 vec = b - a;\n    \n    tc -= a;\n    \n    float t = length(vec);\n    \n    if(t == 0.0) return dot(tc, tc) < r*r ? 1.0 : 0.0;\n    \n    vec2 dirX = vec * (1.0/t);\n    \n    vec2 dirY = vec2(-dirX.y, dirX.x);\n    \n    tc = vec2(dot(tc, dirX), dot(tc, dirY));\n    \n    return disk_mb(tc, r, t);\n}\n#endif\n\nfloat disk_mb_aa(vec2 tc, float r, float s, vec2 a, vec2 b)\n{\n    vec2 vec = b - a;\n    \n    tc -= a;\n    \n    float tt = dot(vec, vec);\n        \n    float rcptt = 1.0 / tt;\n    \n    vec2 dirX = vec * rcptt;\n    \n    vec2 dirY = vec2(-dirX.y, dirX.x);\n        \n    float x = dot(tc, dirX);\n    float y = dot(tc, dirY);\n    \n    float r0 = sqrt(max(0.0, r*r * rcptt - y*y));\n    \n    float u = r0 + 0.5;\n    \n    float v = clamp(u - abs(-x - r0 + u), 0.0, min(2.0 * r0, 1.0));\n\n    if(tt == 0.0) v = dot(tc, tc) < r*r ? 1.0 : 0.0;\n    \n    // aa\n    {\n        vec2 p = vec * (tt == 0.0 ? 0.0 : clamp(x, 0.0, 1.0));\n\n        float l = length(tc - p);\n\n        float m = clamp((r - l) * s * 0.5, 0.0, 1.0);\n\n        v *= m*m*(3.0-2.0*m);\n    }\n    \n    return v;\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n    vec2 tc = (uv0 - iResolution.xy*0.5) / iResolution.yy;\n    \n    vec3 col = vec3(0.0);\n    \n    float v = 0.0;\n    \n    float r = 0.25;\n    \n    float t = 0.5;\n    \n  #if 1\n     \n    v = disk_mb(tc, r, t);\n    v = disk_mb(tc, r, vec2(-0.0, -0.), vec2(0., 0.));\n    v = disk_mb_aa(tc, r, iResolution.y, vec2(-0.2, -0.), vec2(0.2, 0.));\n    \n    //v = capsule_aa(tc, r, iResolution.y, vec2(-0.1, -0.1), vec2(.1, 0.));\n    \n    \n  #else\n    // numerical reference\n    float count = 128.0;\n    \n    for(float i = 0.0; i <= count; ++i)\n    {\n        float xo = (i / count) * t;\n        float v0 = abs(tc.x - xo) < sqrt(max(0.0, r*r - tc.y*tc.y)) ? 1.0 : 0.0;\n        \n        v += v0;\n    }\n    \n    v /= count+1.0;\n  #endif\n    \n    col = vec3(v);\n    //col = vec3(v != 0.0 ? 1.0 : 0.0);\n    //col = vec3(v * 1024.0*1024.0);\n    \n    outCol = vec4(pow(col, vec3(1.0/2.2)), 0.0);\n    outCol = vec4(col, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}