{
    "Shader": {
        "info": {
            "date": "1608349223",
            "description": "simple flor 2d",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldcRn",
            "likes": 0,
            "name": "simple flor 2d",
            "published": 3,
            "tags": [
                "simpleflor2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{\n    if (d1.x<d2.x) return d1;\n    else return d2;\n}\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{\n    if  (-d1.x<d2.x) return d1;\n    else  return d2;\n}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{\n    if (d1.x>d2.x)\treturn d1;\n    else return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{    vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\nfloat sdCirc(vec2 p, float r)\n{  return length(p)-r; }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n///------------------------------\nfloat tau = atan(1.0) * 8.0;\n\nmat2 genRotMat(float val){\n\treturn mat2(cos(val),-sin(val),sin(val),cos(val));\n}\n\nvec2 opAngRep( vec2 p, float a )\n{\n\tvec2 polar = vec2(atan(p.y, p.x), length(p.xy));\n    polar.x = mod(polar.x + a / 2.0, a) - a / 2.0;\n    \n    return vec2(polar.y * vec2(cos(polar.x),sin(polar.x)));\n}\n\n\n\nvec2 hexcuadro(vec2 p, float numItem)\n{\n    \n    vec2 pp;\n    p.xy *= genRotMat(iTime);/// genera la rotacion del engrane\n    vec2 rep2 = opAngRep(p, tau / numItem);\n    float sdb1= sdBox(rep2-vec2(1.0,0.0), vec2(0.5,0.25) );\n    vec2 res = vec2( sdb1,6.0);\n    return  res;\n}\n\nvec2 sol2(vec2 p, float numItem)\n{\n    \n    vec2 pp;\n    p.xy *= genRotMat(iTime);/// genera la rotacion del engrane\n    //p= rotate2d(p, radians(iTime*10.0));\n    vec2 rep2 = opAngRep(p.yx, tau / numItem);\n    float sdb1=  sdTriangleIsosceles(rep2.yx-vec2(0.0,0.125), vec2(0.15,0.25) );\n    //float sdb1=  sdTriangleIsosceles(p-vec2(1.0,0.0), vec2(0.15,0.25) );\n    vec2 res = vec2( sdb1,2.0);\n    return  res;\n}\n\nvec2 grass(vec2 p)\n{\n\tp *= vec2(10.0, 1.0) * 2.5;\n\tfloat a = floor(p.x) * 12.0, b = 1.0 + sin(floor(p.x)) * cos(floor(p.x) * 0.3) * 0.1;\n\tp.x = mod(p.x, 1.0) - 0.5;\n\tfloat f1= step(abs(p.x + cos(a) * p.y ), 0.5 - p.y * b);\n    vec2 resp=vec2(f1,38.);\n    return resp;\n}\n\nvec2 flor(vec2 p, float numItem)\n{\n    \n    vec2 pp=p;\n    vec2 res=vec2(9999.9,-1.0);\n    //p.xy *= genRotMat(iTime);/// genera la rotacion del engrane\n    vec2 rep2 = opAngRep(p, tau / numItem);\n    float sc1= sdCirc(rep2-vec2(0.35,0.0), 0.25 );\n    float sc2= sdCirc(p-vec2(0.0,0.0), 0.25 );\n    float b1= sdBox( p-vec2(0.0,-0.9), vec2(0.02,0.5) );\n    \n    sc1=opS(sc2,sc1);\n    \n    res =opU2( vec2( b1,7.0)  ,res);\n    res =opU2( vec2( sc1,2.0), res);\n    res =opU2( vec2( sc2,5.0)  ,res);\n    return  res;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //p*= 2.25;\n\tvec3 col = vec3(0.280,0.320,1.0);\n    \n    vec2 p1=p*3.0;\n    \n    \n    vec2 h1=hexcuadro(p1-vec2(3.5,-0.5), 8.0);\n    vec3 colh1= getColorf(h1.y);\n    col= DibujoConBorde(p, h1.x, colh1,  col);\n    \n    \n    \n    \n    vec2 s1=sol2(p-vec2(-1.2,-0.3), 6.0);\n    vec3 cols1= getColorf(s1.y);\n    col= DibujoSinBorde(p, s1.x, cols1,  col);\n    \n    \n    vec2 f1=flor(p, 6.0);\n    vec3 colf1= getColorf(f1.y);\n    col= DibujoConBorde(p, f1.x, colf1,  col);\n    \n    vec2 p2 = fragCoord.xy / iResolution.xy * vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 scroll = vec2(iTime * 0.25, 0.0);\n    \n    vec2 g1= grass(p2 * 1.2 + scroll );\n   \n     vec3 colg1= vec3(0.1, 0.3, 0.0);;\n    col=mix(col, colg1, g1.x);\n    \n    \n    fragColor = vec4(col,1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.,  //37 //marron o cafe\nvec3(0.1, 0.3, 0.0)  //38\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}