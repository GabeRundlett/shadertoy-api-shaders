{
    "Shader": {
        "info": {
            "date": "1635041909",
            "description": "Golfed version of SmoothLifeL (https://youtu.be/KJe9H6qS82I).\nUses a simpler threshold based transfer function which produces effectively the same result.",
            "flags": 32,
            "hasliked": 0,
            "id": "sdKSzV",
            "likes": 12,
            "name": "Golfed SmoothLifeL (455 chars)",
            "published": 3,
            "tags": [
                "organic",
                "life",
                "small",
                "golf",
                "smoothlife"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 c, vec2 p ){\n\tc = texelFetch(iChannel0, ivec2(p), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Sample pixel y value at location v\n#define S(v) texelFetch(iChannel0, ivec2(v),0)\n\nfloat N = 12.; //Neighborhood size\n\nvoid mainImage( out vec4 c, vec2 p ){\n    vec2 a, //Total kernel area (x = neighborhood, y = cell)\n         k, //Neighborhood/cell kernel mask\n         o, //Sample offset\n         f; //Neighborhood/cell fill\n    \n    //Sample pixels in neighborhood/cell\n    for(o.y = -N; o.y++ <= N;){                        \n        for(o.x = -N; o.x++ <= N;){\n            k = step(length(o), vec2(N, N/3.));        //Kernel bounds\n            k.x -= k.y;                                //Neighborhood excludes cell\n            a += k;                                    //Add up kernel area\n            f += k * S(mod(p + o, iResolution.xy)).x;    //Add up neighborhood/cell fill\n        }\n    }\n    \n    f /= a; // Normalize fill to 0-1.\n    \n    //Life rule & euler integration\n    c = clamp(\n    S(p) + .1 * float(          //Time step .1 x 0.5 i.e. how fast a cell heals/degrades per frame\n        f.y < .5 ?              //Select birth/survival threshold if cell fill > 0.5\n        f.x > .26 && f.x < .34: //Dead cell is \"born\" if neighborhood fill >.26 and <.34\n        f.x > .37 && f.x < .55  //Live cell survives if neighborhood fill >.37 and <.55\n    ) - .05 //0.5 x Time step\n    + step(length(iMouse.xy - p), N)                           //Mouse drawing\n    + (iFrame < 2 ? texture(iChannel1, p/1e3, 0.).x-.5 : 0.)   //Initial conditions\n    , 0., 1.);                                                 //Clamp cell value between 0-1.\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}