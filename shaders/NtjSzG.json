{
    "Shader": {
        "info": {
            "date": "1628221635",
            "description": "Where stones and pebbles alike go when they die. A variation of my last shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtjSzG",
            "likes": 26,
            "name": "Stone Heaven",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "mouse",
                "raymarch",
                "beach"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 642
        },
        "renderpass": [
            {
                "code": "\n// By Cole Peterson\n\n// Where stones and pebbles alike go when they die.\n\n// ....I guess rock really is dead. :(\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\nmat2 rot(float a) {return mat2(cos(a), -sin(a), sin(a), cos(a));}\n\nfloat map(vec3 rp){\n    float h = 0.5 - texture(iChannel1, rp.xz*.8).x * .065;\n    return min(rp.y + .49, rp.y + h);\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(uv, 0.8)), ro = vec3(0., 0., iTime*.1);\n    vec3 rp = ro;\n    \n    rd.zy *= rot(-.32);\n    \n    if(iMouse.z > 0.){\n        rd.zy *= rot(m.y*3.);\n        rd.zx *= rot(m.x*3.);\n    }\n    \n    rd.yz *= rot(-cos(iTime*3.)*.01);\n    ro.y += cos(iTime*3.)*.01;\n    \n    float d = 0.0, t = 0.0;\n    for(int i = 0; i < 60; i++){\n        d = map(ro+rd*t);\n        if(d < 0.002 || t > 40.) break;\n        t += d * .7;\n    }\n    \n    vec3 p = ro + rd*t;\n    \n    vec3 n = normal(p);\n    vec3 ref = reflect(n, rd);\n    vec3 lp = ro + vec3(.6, 0.5, 2.4);\n    vec3 ld = normalize(lp-p);\n    \n    float dd = length(p - lp);\n    float dif = max(dot(n, ld), .0);\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 26.);\n    \n    vec3 objCol = vec3(0);\n    \n    vec3 rock = vec3(.8, .7, .6) * .9 * max(texture(iChannel1, p.xz*1.4).x, .4);\n    vec3 water = vec3(.7, .8, .9) * .8;\n    vec3 sky = vec3(.9, .97, .99);\n    float clouds = octnse(rd.xy, 3.27, 5) * .8;\n    \n    water += texture(iChannel0, ref).xyz;\n    water *= 0.5;\n    \n    vec2 auv = p.xz;\n    auv.x += cos(iTime + auv.y*32.)*.01;\n    auv.y += sin(iTime + auv.x*32.)*.01;\n    auv += iTime*.01;\n    \n    water *= max(texture(iChannel2, auv*0.98).x, .2);\n    \n    float nt = .08, nt2 = -.45;\n    float blend = ss(-.4 - nt, -.405 - nt, p.y);\n    vec3 col = mix(rock, water, blend);\n    col = dif * mix(vec3(1), col, ss(nt2 + .03, nt2, p.y));\n    col += vec3(.9, .8, .7)*spec*.5;\n    col = mix(vec3(.99, .97, .9) * clouds, col,  exp(-t*t*t*.08));\n    \n    f = vec4(col, 1.0);\n\n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 hash22( vec2 x ){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n\nfloat gdns(vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = smoothstep(0., 1., f);\n    \n    vec2 a = hash22(i);\n    vec2 b = hash22( i + vec2(1.,0.));\n    vec2 c = hash22( i + vec2(.0,1.));\n    vec2 d = hash22( i + vec2(1));\n    \n    //rotAll(a, b, c, d);\n    \n    float nse = mix( mix( dot( a, f - vec2(0.0,0.0) ), \n                     dot( b, f - vec2(1.0,0.0) ), u.x),\n                mix( dot( c, f - vec2(0.0,1.0) ), \n                     dot( d, f - vec2(1) ), u.x), u.y);\n    return nse + 0.5;\n}\n\nfloat octnse(vec2 p, float t, int oct){\n    float a = 1.;\n    float n = 0.;\n    \n    for(int i = 0; i < oct; i++){\n        p.x+=t;\n     \tn += gdns(p) * a;\t\n        p*=2.;\n        a *= .5;\n    }\n    \n    return n;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}