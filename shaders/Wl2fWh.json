{
    "Shader": {
        "info": {
            "date": "1598829166",
            "description": "Mix by Ilya Birman: https://soundcloud.com/ilyabirman/studio-mix-synthopia",
            "flags": 64,
            "hasliked": 0,
            "id": "Wl2fWh",
            "likes": 3,
            "name": "Menger beat",
            "published": 3,
            "tags": [
                "raymarching",
                "sound",
                "menger",
                "sponge"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "#define textureCube texture\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n#define IVORY 1.\n#define BLUE 2.\n#define BLACK 3.\n#define RED 4.\n\n#define PHI (sqrt(5.)*0.5 + 0.5)\n#define iTime (iTime / 10.1)\n\n#define BEAT0 texture(iChannel0, vec2(0.25, 0.25) ).x\n#define BEAT1 texture(iChannel0, vec2(0.5, 0.25) ).x\n#define BEAT2 texture(iChannel0, vec2(0.75, 0.25) ).x\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 polarToDecart(vec2 polar) {\n    float alpha = polar.x;\n    float R = polar.y;\n    float x = sin(alpha) * R;\n    float y = cos(alpha) * R;\n    return vec2(x, y);\n}\n\nvec2 decartToPolar(vec2 decart) {\n    float alpha = atan(decart.x, decart.y);\n    float R = length(decart);\n    return vec2(alpha, R);\n}\n\n\nfloat Menger(vec3 p)\n{\n    int n = 0;\n    float scale = 0.33 + .3 * smoothstep(0., 1., BEAT2);//0.433333;\n    int iterations = int((BEAT0 + 0.2) * 5.);\n    p.xz *= Rot(/* -2. * PI * iMouse.x / iResolution.x +  */-BEAT0);\n    p.xy *= Rot(/*-2. * PI * iMouse.y / iResolution.y*/-BEAT1);\n   while (n < iterations) {\n        p /= scale;\n    p.xy *= Rot(/*-2. * PI * iMouse.y / iResolution.y*/BEAT1);\n    p.xz *= Rot(/* -2. * PI * iMouse.x / iResolution.x +  */BEAT0);\n        p.z = -abs(p.z);\n        p.y = abs(p.y);\n        p.x = abs(p.x);\n        p -= (vec3(2., 2., -2.));\n        if(p.x+p.z<0.) p.xz = -p.zx;\n        if(p.y+p.z>0.) p.yz = -p.zy;\n        p.y += 2.;\n        p.y = abs(p.y);\n        p.y -= 1.;\n        p.y = abs(p.y);\n        p.y -= 1.;\n        n++;\n    }\n    return sdBox(p, vec3(1)) * pow(scale, float(iterations));\n}\n\nfloat sdColumn(vec3 p, float width) {\n\t//p.y = mod(p.y, 1.);\n    float fractal = Menger(p);\n    return fractal;\n}\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nvec2 getDist(vec3 p) {\n    vec2 ar = decartToPolar(p.xz);\n    float a = ar.x, r = ar.y;\n    float astep = 2. * PI / 6.; // number of rays\n    a = mod(a, astep);\n    a -= astep / 2.;\n    a = abs(a);\n    p.xz = polarToDecart(vec2(a, r));\n    // float cyl = length(p.xz - vec2(0, 2)) - 0.2;\n    p.xz += vec2(1., .5);\n    p.xz *= Rot(iTime + p.y * 0.05);\n    float column = sdColumn(p, 2.5);\n    return vec2(column, RED);\n    // return cyl < column? vec2(cyl, BLACK) : vec2(column, IVORY);\n//   return vec2(max(DE(p), length(p.xz+vec2(1)) - 0.1), BLUE);\n//   return vec2(DE(p) + length(p) - 4., BLUE);\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    int steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        steps++;\n        d += abs(distToClosest.x);\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, steps);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\n\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // ray origin\n    float camRadius = 2.;\n    vec3 ro = vec3(EPSILON, camRadius, 0);\n    ro.yz *= Rot(iTime);\n    // ro.xz *= Rot(iMouse.x / iResolution.x * PI * 2.);\n    float zoom = 1.100;\n\n    // ray direction\n    vec3 rd = getRayDir(uv, ro, vec3(0), 1.);\n\n    vec3 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n    float steps = rm[2];\n\n    vec3 color;\n    color = vec3(1);\n    vec3 light = vec3(camRadius * cos(iTime * .2), 20, camRadius * sin(iTime * .2));\n    //light.xz *= Rot(iTime);\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        //n.zy *= Rot(iTime);\n    \t// color = vec3( n * 0.5 + 0.5 );\n\n        //color *= info;\n        // vec3 tex = boxmap(u_tex_bg, ro + rd * d, n, 32.0 ).xyz;//\n        // self shadeing\n        // drop shadows\n        // trying to raymarch to the light for MAX_DIST\n        // and if we hit something, it's shadow\n        vec3 dirToLight = normalize(light - p);\n        vec3 rayMarchLight = rayMarch(p + dirToLight * .06, dirToLight);\n        float distToObstable = rayMarchLight.x;\n        float distToLight = length(light - p);\n        // if (distToObstable < distToLight) {\n        //     color *=  0.;\n        // }\n\n        // smooth shadows\n        // float shadow = smoothstep(0.0, .15, rayMarchLight.z / PI);\n        // color += .1 + .9 * shadow;\n\n\n\n\n        // tex *= color_bw;\n        // color = tex;\n        // color += 0.6 + vec3( color_bw );\n        // coloring\n        if (d < MAX_DIST) {\n            if (info == IVORY) {\n                color = vec3(.4 * (dot(n, normalize(light - p))) + 1.);\n                // color *= vec3(0.832,0.800,0.849);\n            }\n            else if (info == BLUE) {\n                color *= vec3(0.810,0.256,0.397);\n            }\n           else if (info == RED) {\n                color = vec3(.4 * (dot(n, normalize(light - p))) + 1.);\n                // vec3 color1 = vec3(0.810,0.256,0.397);\n                // vec3 color2 = color1.zyx;\n                // color = mix(color1, color2, steps / 10.);\n                //color *= vec3(0.810,0.256,0.397);\n                vec3 beatColor = vec3(BEAT0, BEAT1, BEAT2);\n                beatColor = (beatColor - 0.4) * 8.;\n                color *= beatColor;\n                color /= steps / 10.;\n            }\n            else if (info == BLACK) {\n                color = vec3(0.);//vec3(.0 + 0.2 * (dot(n, normalize(light - p))) + 1.);\n                // color *= vec3(0.130,0.130,0.130);\n                // color *= 5. / length(p.xz);\n            }\n            // color = mix(color, colorBg, smoothstep(20., 28., d));\n        }\n    }\n\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23827,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ilyabirman/studio-mix-synthopia"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}