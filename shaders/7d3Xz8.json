{
    "Shader": {
        "info": {
            "date": "1632591512",
            "description": "Credit for original artwork design goes to Roni Kaufman\nhttps://twitter.com/KaufmanRoni/status/1440285424425918467\nI attempted to replicate his work using a shader.\nI also made a CodePen, if you want to fork it: https://codepen.io/jhancock532/pen/GREXeWE",
            "flags": 0,
            "hasliked": 0,
            "id": "7d3Xz8",
            "likes": 8,
            "name": "Roni's Homage to Bridget Riley",
            "published": 3,
            "tags": [
                "abstract",
                "generative",
                "pattern"
            ],
            "usePreview": 0,
            "username": "jhancock532",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "//Credit for original artwork design goes to Roni Kaufman\n//https://twitter.com/KaufmanRoni/status/1440285424425918467\n//I attempted to replicate his work using a shader.\n//The below color scheme was copied from his colour palette library\n\nvec3 colorScheme(float x) {\n    \n    if (x < 0.071428) return vec3(242.,235.,138.) / 255.;\n    if (x < 0.142857) return vec3(254.,208.,0.) / 255.;\n    if (x < 0.214285) return vec3(252.,132.,5.) / 255.;\n    if (x < 0.285713) return vec3(237.,54.,26.) / 255.;\n    if (x < 0.357141) return vec3(226.,240.,243.) / 255.;\n    if (x < 0.428569) return vec3(179.,220.,224.) / 255.;\n    if (x < 0.500000) return vec3(68.,100.,161.) / 255.;\n    if (x < 0.571428) return vec3(32.,48.,81.) / 255.;\n    if (x < 0.6428) return vec3(255.,197.,199.) / 255.;\n    if (x < 0.7142) return vec3(243.,152.,195.) / 255.;\n    if (x < 0.7857) return vec3(207.,56.,149.) / 255.;\n    if (x < 0.8571) return vec3(109.,53.,138.) / 255.;\n    if (x < 0.9285) return vec3(6.,180.,176.) / 255.;\n    if (x < 1.0001) return vec3(75.,138.,95.) / 255.;\n\n    return vec3(0.);\n}\n\n//The book of shaders noise function\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Split into cubes at least 45 pixels wide\n    uv *= floor(iResolution.xy / 45.);\n\n    //Scale cube height before and after transformation\n    //to get the right sine curve effect\n    uv.y *= 1.5;\n    \n    //Subtract x and add a sin function to the cube, \n    //skewing it in the y axis with a wave\n    uv.y += (sin(uv.x * 3.1415) * 0.2) - uv.x;\n    \n    //Subdivide y-axis into integers for the large curved pieces\n    vec2 largeDivs = floor(uv);\n    \n    uv.y *= 3.0;\n    \n    //Subdivide y-axis into more integers for the smaller curved pieces\n    vec2 smallDivs = floor(uv);\n    \n    //Paint the base layer of large pieces\n    vec3 color = colorScheme(random(largeDivs));\n    \n    //For 15% of the smaller pieces, overwrite the base layer colour\n    float smallRandom = random(smallDivs);\n    if (smallRandom < 0.15) {\n      color = colorScheme(smallRandom * 6.66666666);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}