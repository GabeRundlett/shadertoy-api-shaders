{
    "Shader": {
        "info": {
            "date": "1648307335",
            "description": "nubes II",
            "flags": 0,
            "hasliked": 0,
            "id": "fllyRj",
            "likes": 5,
            "name": "nubes II",
            "published": 3,
            "tags": [
                "nubesii"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n//referencia\n\n////https://www.shadertoy.com/view/lsBfDz.......Created by stubbe in 2017-07-15\n//https://glslsandbox.com/e#78741.0\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define REFLECT 2\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\n\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  vec3 p0=p;\n\tfloat planeDist1 = p.y-1.0;  //piso inf\n    res =opU2(res, vec2(planeDist1,57.0));\n    p.y=p.y-5.0;\n    float sds1=sdSphere(p-vec3(0.0,abs(5.0*sin(iTime)),0.0) , 5.0 );\n    res =opU2(res, vec2(sds1,60.0));\n    \n    float d2=sdSphere(p-vec3(10.0,0.0,0.0), 5.0 );\n    res =opU2(res, vec2(d2,58.0));\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.1, tmax = 40.0;\n    vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n   for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }\n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 color, float t) \n{   vec3 lightPos=lp;\n    vec3 hit = ro + rd * t;\n    vec3 norm = GetNormal(hit);\n    vec3 light = lightPos - hit;\n    float lightDist = max(length(light), .001);\n    float atten = 1. / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    light /= lightDist;\n    vec3 R = reflect(-light, norm);\n    vec3 V = -rd;\n    float shadow = getSoftShadow(hit, normalize(lightPos));// shadows\n    float occ = occlusion(hit, norm);// occ\n    vec3 ambient= 0.5*color*clamp(0.5 + 0.5*norm.y, 0.0, 1.0)*norm.y;\n    vec3 fresnel =  color *  pow(clamp(1.0 + dot(rd, norm), 0.0, 1.0), 2.0);;\n    float dif = clamp(dot(norm, light), 0.0, 1.0);\n    dif = pow(dif, 4.) * 2.;\n    vec3 diffuse =  color * dif;\n    float specular = pow(max(dot(R, V), 0.), 8.);\n    vec3 back = 0.5 * color * clamp(dot(norm, -light), 0.0, 1.0);\n       vec3 colOut = occ*color*(ambient+diffuse*shadow+.35 +back) + vec3(.7,.9,1)*specular*specular;   \n    return colOut;\n}\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos, float tdist)\n{  float intensity=1.0;\n     vec3 result;\n    result = lightingv3( nor, p, plight_pos,  rd,ro, colobj, tdist);\n    return result;\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n       if (id_color<50)\n\t\t{ colobj=getColor(int( id_color));  return colobj; }\n    \n   if (id_color==60)\n   {   vec3 mat = vec3(0.8, 0.2, 0.2);\t\n\t\tfloat f = smoothstep(0.3, 0.3001, mod(atan(p.x, p.z), 0.65));\n        mat = mix(mat, vec3(0.7, 0.7, 0.8), 1.0 - f);\n        return mat;\n   }\n\n   if (id_color==57)\n    { return Humo( p.xz*0.25, iTime ); }\n   \n   if (id_color==58)\n        {return Humo( p.xy, iTime );}\n   \n            \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST) \n       {   p = (ro + rd * hit.x );  \n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result=  Getluz( p,ro,rd, nor, colobj ,light_pos1,hit.x)*light_color1;\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd);\n   return col;\n}\n\n//https://www.shadertoy.com/view/lsBfDz.......Created by stubbe in 2017-07-15\n#define T texture(iChannel0,(s*p.zw+ceil(s*p.x))/2e2).y/(s+=s)*4.\nvec3 nubes(vec2 x)\n{\n    vec4 p,d=vec4(.8,0,x/iResolution.y-.8),c=vec4(.6,.7,d);\n    vec4 O;\n    O=c-d.w;\n    for(float f,s,t=2e2+sin(dot(x,x));--t>0.;p=.05*t*d)\n        p.xz+=iTime,\n        s=2.,\n        f=p.w+1.-T-T-T-T,\n    \tf<0.?O+=(O-1.-f*c.zyxw)*f*.4:O;\n  \n  return O.xyz;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t;\n    t=mod(iTime*1.0,360.0);\n \tlight_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(0.0,7.0,-25.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n    vec3 col= Render( ro,  rd);\n    \n    vec3 col2= nubes(fragCoord-vec2(0.0,-30.0));\n    col=mix(col,col2, 0.6 );\n    // col=col2;\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n#define COLORSKY vec3(0.1, 0.1, 0.6)\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n\n\n\n///---------\n//https://glslsandbox.com/e#78741.0\n#define NUM_OCTAVES 10\n\nmat3 rotX(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat3(\n\t\t1, 0, 0,\n\t\t0, c, -s,\n\t\t0, s, c\n\t);\n}\nmat3 rotY(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat3(\n\t\tc, 0, -s,\n\t\t0, 1, 0,\n\t\ts, 0, c\n\t);\n}\n\nfloat random(vec2 pos)\n{ return fract(sin(dot(pos.xy, vec2(1399.9898, 78.233))) * 43758.5453123); }\n\nfloat noise(vec2 pos) {\n\tvec2 i = floor(pos);\n\tvec2 f = fract(pos);\n\tfloat a = random(i + vec2(0.0, 0.0));\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100.0);\n\tmat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n\tfor (int i=0; i<NUM_OCTAVES; i++) {\n\t\tv += a * noise(pos);\n\t\tpos = rot * pos * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvec3 Humo( in vec2 fragCoord , float ptime)\n{\n\t//vec2 p = (gl_FragCoord.xy * 3.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 p =fragCoord;\n\tfloat t = 0.0, d;\n\tfloat time2 = 3.0 * ptime / 2.0;\n\n\tvec2 q = vec2(0.0);\n\tq.x = fbm(p + 0.00 * time2);\n\tq.y = fbm(p + vec2(1.0));\n\tvec2 r = vec2(0.0);\n\tr.x = fbm(p + 1.0 * q + vec2(1.7, 9.2) + 0.15 * time2);\n\tr.y = fbm(p + 1.0 * q + vec2(8.3, 2.8) + 0.126 * time2);\n\tfloat f = fbm(p + r);\n    \n    \n    vec3 color = mix(\n\t\tvec3(1., 1.0, 1.0),\n\t\tvec3(.2, 0.2, 0.866667),\n\t\tclamp((f * f) * 4.0, 0.0, 1.0)\n\t);\n    \n    \n    color = mix(\n\t\tcolor,\n\t\tvec3(0.0, 0.0, 1.5),\n\t\tclamp(length(q), 0.0, 1.0)\n\t);\n    \n    \n    color = mix(\n\t\tcolor,\n\t\tvec3(1.0),\n\t\tclamp(length(r.x), 0.0, 1.0)\n\t);\n    \n\n\tcolor = (f *f * f + 0.6 * f * f + 0.5 * f) * color;\n\n\t//fragColor = vec4(color, 1.0);\n    return color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}