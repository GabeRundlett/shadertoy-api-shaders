{
    "Shader": {
        "info": {
            "date": "1583448296",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WlGXWy",
            "likes": 20,
            "name": "Day 77",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 579
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 76\" by jeyko. https://shadertoy.com/view/WtyXzt\n// 2020-03-05 21:05:41\n\n// hex function from BigWIngs - check out his tutorial on youtube\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 40.;\n    float scale = 0.00 + pow(dot(uvn,uvn),1.)*0.04;\n    float chromAb = dot(uvn*1.5,uvn*1.5)*10.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.0;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.99;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    fragColor = texture(iChannel0, uv)*0.6 + radial*0.4; \n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.);\n    fragColor *= 0.7;\n    \n    fragColor = pow(fragColor, vec4(0.9));\n    \n    fragColor.b *= 0.5;\n    fragColor = smoothstep(0.,1.,fragColor);\n    //fragColor = pow(fragColor, vec4(0.45));\n\t\n    float duvuv = dot(uvn,uvn);\n    \n    fragColor = pow(fragColor, vec4(0.4545 + 0.87*clamp(duvuv*0.4, 0., 0.50)));\n    \n    fragColor *= 1. - duvuv*1.4;\n    \n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 glow = vec3(0);\n\nvec4 noise(vec2 u){\n\treturn texture(iChannel0, (u)/256.);\n}\n#define pmod(p,x) (mod(p,x) - 0.5*x)\n#define dmin(a,b) a.x < b.x ? a : b\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define pal(a,b,c,d,e) ((a) + (b)*sin(tau*((c)*(d) + e)))\n\n\nvec3 path(float z){\n    z *= 0.14;\n\treturn vec3(\n    \tsin(z + cos(z)*0.6),\n    \tcos(z + sin(z*0.8)*0.5),\n    \t0.\n    )*2.9;\n}\n\n// Hex code from BigWings! He has a tutorial on them.\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n#define pi acos(-1.)\n#define tau (2.*pi)\nvec3 pCoords = vec3(0);\n\nfloat tCoords = 0.;\nvec3 cCoords = vec3(1.);\n\n#define coolPal(a,b) pal(0.5,0.6,vec3(0.97 + sin(iTime*0.02 + p.z*0.04),3.4 + sin(b)*0.2,0.8),0.4 + (a),3.3 + (b))\n#define tunnW 0.8\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n    \n    //p.xy *= rot(0. + sin(p.z)*0.24 + cos(p.y)*0.13);\n\tp -= path(p.z);\n    p.xy *= rot(0. + sin(p.z)*0.24 + cos(p.y)*0.13);\n    //p.xy *= rot(0.6);\n\tfloat wave = pow(abs(sin(p.z*0.2 + iTime*0.7)), 40.);\n    \n    pCoords = vec3(atan(p.y,p.x)/tau, length(p.xy), p.z);\n    \n    float tunn = -length(p.xy + normalize(p.xy)*wave*0.15) + tunnW;\n    \n    //tunn = max(tunn, - max(abs(p.x)- 0.86,abs(p.y) - 0.3 ));\n    \n    d = dmin(d, vec2(tunn, 2.));\n    \n    \n    p.xy *= rot(0.5 + sin(p.z*0.2 + p.y*0.4)*1.);\n    \n    vec3 pCoordsB = pCoords;\n    pCoordsB.y -= 0.4;\n    pCoordsB.x = pmod(pCoordsB.x, 0.05)/0.05;\n    pCoordsB.z = pmod(pCoordsB.z, 1.)/1.;\n    \n    pCoordsB = abs(pCoordsB) - 0.5;\n    float dCubeGlow = max(pCoordsB.x, max(pCoordsB.y,pCoordsB.z));\n    \n    \n    glow += max(exp(-dCubeGlow*10.)*0.04*pow(wave,0.4)*pal(0.5,0.5,vec3(1.6,2.9,0.9),0.5,0.5)*0.7, 0.);\n    \n    float attA = pow(abs(sin(sin(p.z + iTime) + p.z*0.7 + sin(p.y*1.5) + iTime*0.4) ), 10.);\n    float attB = pow(abs(sin(iTime*0.2 + sin(p.z + iTime) + p.z*0.4 + sin(p.y*1.5))), 10.);\n    glow += attB*smoothstep(0.,1.,length(p.xy)*0.8)*max(exp(-dCubeGlow*12.)*0.02*pal(0.8,0.6,vec3(0.3,0.6,0.5),0.5,0.4)*2.1, 0.);\n\n    \n    vec3 c = max(coolPal(0.3, 1.5), 0.);\n    \n    vec3 q = p;\n    float pipe;\n\n    \n    \n    q = p;\n    q.xy -= 0.4;\n    pipe = length(q.xy) - 0.06;\n    d = dmin(d, vec2(pipe,10.));\n    q.xy += 0.9;\n    pipe = length(q.xy) - 0.06;\n    d = dmin(d, vec2(pipe,10.));\n    \n    \n    \n    float dtt = 10e7;\n    float dsqP = 10e6;\n    q = p;\n    q.xy -= vec2(-0.6,0.2);\n    vec3 z = abs(vec3(q.x,q.y,pmod(q.z, 0.4))) - vec3(0.1,0.04,0.2);\n    z.xy *= rot(0.125*pi);\n    float rc = max(z.y,max(z.x, z.z));\n    q = abs(q) - 0.07;\n    dtt = rc + 0.02 ;\n    pipe = max(q.x,q.y);\n    pipe = max(pipe, -rc);\n    dsqP = min(dsqP, pipe);\n    \n    q = p;\n    q.xy += vec2(-0.4,0.4);\n    z = abs(vec3(q.x,q.y,pmod(q.z, 0.4))) - vec3(0.1,0.04,0.2);\n    z.xy *= rot(0.125*pi);\n    rc = max(z.y,max(z.x, z.z));\n    q = abs(q) - 0.07;\n    dtt = min(dtt,rc + 0.02 );\n    pipe = max(q.x,q.y);\n    pipe = max(pipe, -rc);\n    dsqP = min(dsqP, pipe);\n    \n    \n    glow += exp(-dtt*(10. - pow(wave,0.4)*10. + sin(p.z)*1.))*max(coolPal(0.8, 1.8), 0.)*1.*pow(abs(sin(p.z + iTime)), 10.);\n    glow += exp(-dtt*(50. - pow(wave,0.4)*10. + sin(p.z)*1.))*max(coolPal(0.8, 1.8), 0.)*0.9;\n    \n    d = dmin(d, vec2(dtt,6.));\n    \n    \n    q = p;\n    q.z = pmod(q.z, 0.2);\n    \n    d = dmin(d, vec2(dsqP,6.));\n    \n    float net;\n    \n    pCoordsB = pCoords;\n    pCoordsB.y -= 0.7;\n    pCoordsB.x = pmod(pCoordsB.x,1./8.)/(1./8.);\n    pCoordsB.z = pmod(pCoordsB.z,1.)/(1.);\n    float ww = 0.01;\n    net = length(pCoordsB.xy) - ww;\n    net = min(net,length(pCoordsB.yz) - ww);\n    \n    glow += exp(-net*(20. - pow(wave,0.4)*10. + sin(p.z)*4.))*max(coolPal(0.7, 1.8), 0.)*1.;\n    d.x *= 0.7;\n\treturn d;\n}\n\nvec2 march(vec3 ro, vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\tvec2 d = vec2(10e6);\n\tt = 0.; hit = false; p = ro;\n    for(int i = 0; i < 150; i++){\n    \td = map(p);\n        glow += exp(-max(d.x, 0.)*20.)*0.01;\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n    \tt += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = cross(vec3(0,1,0), dir);\n\tvec3 up = cross(dir, right);\n    float fov = 1. + sin(iTime)*0.1;\n\treturn normalize(dir + right*uv.x*fov + up*uv.y*fov);\n}\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001, 0.);\n    return normalize(map(p).x - vec3(\n    \tmap(p-t.xyy).x,\n    \tmap(p-t.yxy).x,\n    \tmap(p-t.yyx).x\n    ));\n}\n\n\n#define mx (10.*iMouse.x/iResolution.x)\n#define my (10.*iMouse.y/iResolution.x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\t//uv *= 1. + dot(uv,uv)*1.5;\n    \n    vec3 ro = vec3(0);\n    ro.z += iTime*SPEED+ sin(iTime)*1.;\n    ro.z += mx;\n        \n    ro += path(ro.z);\n    \n    float wave = pow(abs(sin(ro.z*0.2 + iTime*0.7 + 0.17)), 20.);\n    \n    vec3 lookAt = vec3(0,0,ro.z);\n    lookAt.z += 2.;\n    lookAt += path(lookAt.z); \n\tvec3 rd = getRd(ro, lookAt, uv*(1. + wave*0.06));\n    \n    ro -= rd*texture(iChannel0,(uv)*16.).x*0.2; // remove banding from glow\n    \n    \n    rd.xy *= rot(sin(iTime + sin(iTime*0.4)*0.5 )*0.1);\n    \n    float t; vec3 p; bool hit;\n    \n    vec2 d = march(ro, rd, p, t, hit);\n     \n    \n    if(hit){\n\n    \tvec3 n = getNormal(p);       \n        if(d.y == 2.){\n            vec4 hc = HexCoords(vec2(8.*pCoords.x, pCoords.z*1.)*1.);\n            vec4 hcc = hc;\n            float dHex = 10e6;\n            \n            float md = 0.1 ;\n            \n            float formula = hc.y + 0.4*sin(p.z*0.03 + iTime*0.3);\n            formula += hc.w*0.1;\n            float id = floor(formula/md);\n            hc.y = (pmod(formula, md))/md;\n            \n            \n            dHex = min(dHex,abs(hc.y) - 0.1);\n            \n            vec3 c = coolPal(0. + 0.8, sin(id*0.7)*0.19);\n            c *= max(0.,sin(id*0.9 + sin(hc.w)*9.));\n            \n\t\t\tc -= hcc.y*0.7;\n            c = max(c, 0.);\n            \n            col += c;\n            \n            float atten = sin(p.x);\n            \n        }\n        if(d.y == 8.){\n            float dd;\n            \n            cCoords = pmod(abs(cCoords),0.2)/0.2;\n            \n            cCoords = cCoords - 0.1;\n        }\n        if(d.y == 6.){\n            float dd;\n            \n            col += pow(1. - max(dot(n, -rd), 0.), 5.)*0.3;\n            \n            \n        }\n        if(d.y >= 10.){\n        \tvec3 c = pal(0.6,0.1,vec3(0.7,2.4,3.3), 0.2,3.3 + sin(p.z*0.5)*0.5);\n            \n            c = max(c, 0.);\n            float a = pmod(p.z + iTime*0.5, 1.)/1.;\n            col += pow(1. - max(dot(n, -rd), 0.), 5.)*0.1;\n\n            col += smoothstep(0.03,0.,abs(a) - 0.14)*c;\n        }\n        \n    }\n    \n    col += pow(glow,vec3(1./0.45))*0.001;\n    \n    col = max(col, 0.);\n    //col = mix(col, vec3(0.4,0.5,0.9)*1.5,pow(smoothstep(0.,1.,t*0.08), 3.9));\n \n\tcol = mix(col, vec3(0.7,0.3,0.2)*3.5,pow(smoothstep(0.,1.,t*0.08), 3.9));   \n    col *= 0.96;\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SPEED (2.4 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}