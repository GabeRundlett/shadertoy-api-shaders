{
    "Shader": {
        "info": {
            "date": "1507632459",
            "description": "fork of \nhttps://www.shadertoy.com/view/Xs2fRd\nwhich i lost for too long, for shame, its just way too elegant.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltScRD",
            "likes": 2,
            "name": "skew LCG Simplex illustrations",
            "published": 3,
            "tags": [
                "noise",
                "random",
                "simplex",
                "generator",
                "hash",
                "lcg",
                "ginctruental"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 754
        },
        "renderpass": [
            {
                "code": "// [skew constant]s\nconst float s355=sqrt(3.)*.5-.5;//sqrt(3.)*.5-.5 = 0.36602540378443864676372317075294\n//                              //   /                    /\n//                              //sqrt(3.)       = 1.73205080756887729352744634150590\n//                              //   =                    =\nconst float s553=.5-.5/sqrt(3.);//.5-.5/sqrt(3.) = 0.21132486540518711774542560974902\n//              .366 / 1.732    = .211  \n//  (sqrt(3.)*.5-.5) / sqrt(3.) = .5-.5/sqrt(3.)\nvec2 skew (vec2 p){return p+vec2((p.x+p.y)*s355);}\nvec2 skewi(vec2 q){return q-vec2((q.x+q.y)*s553);}//inverse of skew()\n\n#define tau 6.28318530718\n//full rotation in radians, circumference of a unit circle.\n#define iterNoiseOctaves 8.\n\n/*\nThis is simplex noise:\nSimplex noise is better for gambling\n,mostly because it is harder to invert when it has higher exponents\n, can only be estimated heuristically with more than 4 domains\nWith a heuristic epsilon you automatically have \"hidden information\"\nWhich can be useful for encryption or gambling?\n\n[Inigo Quilez] and [dr2] prefer simpler fbm noise than this shader\n, whos derivatives and antiderivatives are simpler/faster/rougher\n, which an be inverted more easily\n, which is better for \"clouds and terrain\"\n, which is worse for \"hidden information, enctyption, gambling\"\n\nI guess it is time to make\nan automatic differentiation version of this shader.\nto blur the line between these \"2 types of noise\"\n\n*/\n\n//linear congruental generator.\n//float lcg31(vec3 a){return a.x+a.y*floor(a.z);}\n//there wa a plan to put this one in the good contexts\n//, but this shader is not a good entry point for it\n//this shadr runs its scripted sequence, and thats that. fine!\n//an LCG is better shown without the sequence of this shader.\n//because the sequence has its own mod() to be synced with the LCG.\n//Thats why the lcg is not used in here.\n//i tried, it was not worth it. \n//it looked good, wild, fast, but broke tne animated sequence.\n\n\n/*\n//s = seed value, can be time\nvec2 h22(vec2 u,float s)\n{vec3 p=vec3(u,s)//seeding\n;p=fract(p*.1031);p+=dot(p,p.yzx+19.19)//scaling sviveling\n;float t=tau*fract((p.x+p.y)*p.z)//scaling sviveling\n;return vec2(cos(t),sin(t));}\n\n//to interpolate between Square_tesselation and 2-Simplex_tesselation \n\n//float tau = 6.28318530718;\n#define iterNoiseOctaves 8.\n*/\n\nvec2 h22(vec2 u,float z)\n{vec3 p=vec3(u,z);\n\tp  = fract(p * .1031);\n    p += dot(p, p.yzx + 19.19);\n    float t=tau*fract((p.x+p.y)*p.z);\n    return vec2(cos(t), sin(t));\n}\n\n\n\n//skew-able interpolated noise.\nfloat h12Skew(vec2 q,vec2 p,float r,float z)\n{vec2 h=h22(q,z),d=skewi(q)-p,e=d*d\n;return pow(max(.0,r-e.x-e.y),4.)*dot(d,h);}\n\n//Simplex12 (skewable)\nfloat Simplex12(vec2 p, float r, float z)\n{vec2 q=skew(p),a=floor(q),i=q-a\n;vec2 c=a+mix(vec2(0,1),vec2(1,0),step(i.y,i.x))\n;z=z+10.*floor(iTime/40.)\n;return h12Skew(a   ,p,r,z)\n       +h12Skew(a+1.,p,r,z)\n       +h12Skew(c   ,p,r,z);}\n\n//multiOctaveSimplex12\nfloat noiseOct(vec2 p, float r)\n{float k=.0,o=1.\n;for (float z=.0;z<iterNoiseOctaves;++z\n){k+=Simplex12(p/o,r,z)*o;o*=2.;}return k;}\n\n//mainimage sequence code ould need some sorting.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = fragCoord - 0.5 * iResolution.xy;    \n    float T = mod(iTime, 40.0);\n    \n    fragColor = vec4(0.5, 0.5, 0.5, 1.0);\n    if (T < 5.0) {\n        T /= 5.0;\n        p /= 100.0;\n        p = T * skew(p) + (1.0 - T) * p;\n        p = p - floor(p + vec2(0.5, 0.5));\n        if (length(p) < 0.03) {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    } else if (T < 10.0) {\n        T = (T - 5.0) / 5.0;\n        p /= 100.0;\n        float k = 0.5 + 50.0 * pow(100000.0, 1.0 - sqrt(T)) * Simplex12(p, 0.5 * T, 0.0);\n        fragColor = vec4(k, k, k, 1.0);\n    } else if (T < 30.0) {\n        T = (T - 10.0) / 2.0;\n        float N = floor(T);\n        float pT = T / 10.0;\n        p /= pow(2.0, 6.64385618977 * (1.0 - pT));\n        T -= floor(T);\n        float k = 0.0;\n        float o = 1.0;\n        for (float z = 0.0; z < N; ++z) {\n           \n            k += Simplex12(p / o, 0.5, z) * o;\n            o *= 2.0;\n        }\n        float m = T;\n        if (N < 1.0) m = 1.0;\n        k += m * Simplex12(p / o, 0.5, N) * o;\n        k = 0.5 + pow(2.0, (1.0 - pT) * 8.96578428466) * 0.1 * k;\n        fragColor = vec4(k, k, k, 1.0);\n    } else {\n        T = min(1.0, (T - 30.0) / 3.0);\n        float k = noiseOct(p, 0.5);\n        k = max(0.0, min(1.0, 0.5 + 0.1 * k));\n        if (k < 0.5) {\n            fragColor = vec4(0.0, k, 0.7 + 0.6 * k, 1.0);\n        } else if (k < 0.55) {\n            fragColor = vec4(1.0, 4.0 * (k - 0.5) + 0.8, 0.6, 1.0);\n        } else if (k < 0.8) {\n            fragColor = vec4(0, 0.5 * k + 0.5, 0.0, 0.0);\n        } else if (k < 0.85) {\n            fragColor = vec4(0, -9.1 * k + 8.18, 0.0, 1.0);\n        } else {\n            fragColor = vec4(0, (1.0 - k) * 0.3 + 0.4, 0.0, 1.0);\n        }\n        \n        fragColor = (1.0 - T) * vec4(k, k, k, 1.0) + T * fragColor;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}