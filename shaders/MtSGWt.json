{
    "Shader": {
        "info": {
            "date": "1433488761",
            "description": "mandelbox folded with audio",
            "flags": 4,
            "hasliked": 0,
            "id": "MtSGWt",
            "likes": 9,
            "name": "MandelBox audio",
            "published": 3,
            "tags": [
                "raymarch",
                "audio",
                "mandelbox"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 2141
        },
        "renderpass": [
            {
                "code": "\n\t\t\t#define MAX_ITER  20\n\t\t\t#define MAX_ORBIT 10\n\n\n\t\t\tvoid sphereFold(inout vec3 z, inout float dz) {\n\n\t\t\t\tfloat fixedRadius2 = 2.0;\n\t\t\t\tfloat minRadius2  = 0.5 ;\n\n\t\t\t\tfloat r2 = dot(z,z);\n\t\t\t\tif (r2 < minRadius2) { \n\t\t\t\t\t// linear inner scaling\n\t\t\t\t\tfloat temp = (fixedRadius2/minRadius2);\n\t\t\t\t\tz *= temp;\n\t\t\t\t\tdz*= temp;\n\t\t\t\t} else if (r2 < fixedRadius2) { \n\t\t\t\t\t// this is the actual sphere inversion\n\t\t\t\t\tfloat temp =(fixedRadius2/r2);\n\t\t\t\t\tz *= temp;\n\t\t\t\t\tdz*= temp;\n\t\t\t\t}\n\t\t\t}\n\t\t\t \n\t\t\tvoid boxFold(inout vec3 z, inout float dz) {\n                float wav = pow(texture(iChannel1, vec2(length(z.xy), 0.) ).x, 0.5) ;\n\t\t\t\tfloat foldingLimit = wav/50. + 2.0;\n\t\t\t\tz = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;\n\t\t\t}\n\n\t\t\tvec2 DE(vec3 z)\n\t\t\t{\n\t\t\t\tvec3 offset = z;\n\t\t\t\tfloat dr = 1.0;\n\n\t\t\t\t//float Scale = sin(iTime/20.)/20. + 2.;\n                float Scale = 2.0;\n\t\t\t\tfloat iter = 0.0;\n\n\t\t\t\tfor (int n = 0; n < MAX_ORBIT; n++) {\n\t\t\t\t\tboxFold(z,dr);       // Reflect\n\t\t\t\t\tsphereFold(z,dr);    // Sphere Inversion\n\t\t\t \t\t\n\t                z=Scale*z + offset;  // Scale & Translate\n\t                dr = dr*abs(Scale)+1.0;\n\t                iter++;\n\t\t\t\t}\n                \n\t\t\t\tfloat r = length(z);\n\n\t\t\t\treturn vec2(iter, r/abs(dr));\n\t\t\t}\n\n\n\t\t\tvec3 gradient(vec3 p, float t) {\n\t\t\t\tvec2 e = vec2(0., t);\n\n\t\t\t\treturn normalize( \n\t\t\t\t\tvec3(\n\t\t\t\t\t\tDE(p+e.yxx).y - DE(p-e.yxx).y,\n\t\t\t\t\t\tDE(p+e.xyx).y - DE(p-e.xyx).y,\n\t\t\t\t\t\tDE(p+e.xxy).y - DE(p-e.xxy).y\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\t\t\t\t\t\n\n\n\t\t\t#define PI 3.1415\n\t\t\tvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t\t\t{\n\t\t\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \t\t\tvec2 coord = (uv - 0.5);\n                vec4 wav = texture(iChannel1, vec2(uv.x, .0) );\n\n\t\t\t    //raymarcher!\n\t\t\t\tfloat t = iTime/1000.;\n\t\t\t    vec3 camera = vec3(\n                    2.6 * cos(t),\n                   \t2.8 * sin(t),\n                    - 0.1 * sin(t)\n                );\n\t\t\t\tcamera = vec3(0.,0.,-6.);\n\t\t\t    vec3 point;\n\n\t\t\t    vec4 n = texture(iChannel0, fract(uv + iTime*100.));\n\t\t\t    vec2 jitter = (n.xy - 0.5) / iResolution.xy ;\n\n\t   \t\t \tvec3 ray = normalize( vec3(coord + jitter/2., -1.0) );\n\n\t   \t\t \tfloat thresh = 0.0005 ;\n\t   \t\t \tfloat orbit = 0.;\n\t   \t\t \t// raycasting parameter\n\t   \t\t \tt  = 0.;\n\t   \t\t \tfloat iter = 0.;\n\t   \t\t \t\n\t   \t\t \t//  ray stepping \n\t\t\t    for(int i = 0; i < MAX_ITER; i++) {\n\t\t\t        point = camera + ray * t;\n\t\t\t        vec2 dist = DE(point);\n\t\t\t        orbit = dist.x ;\n\n\t\t\t        if (abs(dist.y) < thresh) // *  exp(.1 * float(i)))\n\t\t\t\t\t\tbreak;\n\t\t\t        \n\t\t\t    \tt += dist.y;\n\t\t\t        iter ++;\n\n\t\t\t    }\n\t\t\t    \n\t\t\t    float shade = pow(dot(gradient(point, thresh * 0.5), ray), 0.10);\n                \n\t\t\t\tvec3 c = vec3(0.8, 0.6, 1.0) * shade *( 1.5 - iter / float(MAX_ITER) ) ;\n    \t\t\t//c += (n.xxx - wav.x) / 10.;\n                //c *= 2. * pow(sin(uv.y * iResolution.y), 2.);\n                \n\t\t\t\tfragColor = vec4(c, 1.0) ;\n    \n\n\t\t\t}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}