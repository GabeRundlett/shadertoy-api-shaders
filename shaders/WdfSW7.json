{
    "Shader": {
        "info": {
            "date": "1551360678",
            "description": "Grid with animated modulated Circles driven by sound\nWaving Obsession",
            "flags": 64,
            "hasliked": 0,
            "id": "WdfSW7",
            "likes": 6,
            "name": "Waving Obsession",
            "published": 3,
            "tags": [
                "wave",
                "music",
                "animation",
                "obsession"
            ],
            "usePreview": 0,
            "username": "arthurstammet",
            "viewed": 636
        },
        "renderpass": [
            {
                "code": "// Grid with animated modulated Circles driven by sound\n// Based on Harmonic XOR-Party\n// Driven by sound\n\n// Please wait for a while and look what's happening!\n// Concentric Waves will turn into constantly changing harmonic patterns\n\n\nfloat Xor(float a, float b) {\n    return a*(1.-b) + b*(1.-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; // set center to the middle of the screen\n    vec3 col = vec3(0.,0.,0.); // black screen\t\n    \n    // ---- Play with the values -----------------------------------------------------------------------------------------------\n\n    float fft = texture(iChannel0,vec2(0.1,0.)).x;\n    float r1 = 0.; // 0 <> 1.5 for circles : smallest radius\n    float r2 = 0.5+fft; // 0 <> 1.5 for circles : biggest radius\n\n    float c1 = 11.; // base amount of cells\n    float c2 = 7.; // max amount of added cells ( c2 < c1 )\n    \n    float t0 = 200.+iTime*fft; // change global speed\n    \n    float ta = t0*.2; // change animation speed : animation amplitude\n    float tr = t0*.1; // change animation speed : starfield rotation\n    float tn = t0*.05; // change animation speed : number of cells\n\n    float h1freq = 1.;\n    float h2freq = 2.;\n    float h3freq = 5.;\n    float h4freq = 9.;\n    float th1 = t0*.001; // change animation speed : diameter of the circles\n    // calculate 4 harmonics\n    float h1 = h1freq*sin(th1/h1freq);\n    float th2 = t0*.05; // change animation speed of the 2nd harmonic \n    float h2 = h2freq*h1*(th2/h2freq); // change amplitude of the 2nd harmonic\n    float th3 = t0*.07; // change animation speed of the 3rd harmonic\n    float h3 = h3freq*h1*(th3/h3freq); // change amplitude of the 3rd harmonic\n    float th4 = t0*.13; // change animation speed of the 4th harmonic\n    float h4 = h4freq*h1*(th4/h4freq); // change animation speed of the 4th harmonic\n\n    // build a complex wave with 2, 3 or 4 harmonics\n    // float tVarD = h1+h2;  // 2 harmonics\n    // float tVarD = h1+h2+h3;  // 3 harmonics\n    float tVarD = h1+h2+h3+h4;  // 4 harmonics\n    \n    // -----------------------------------------------------------------------------------------------\n    \n\t// rotate the matrix\n    float a = tr;\n    float s = sin(a);\n    float c = cos(a);\n    uv *= mat2(c, -s, s, c);\n    uv *= c1 + (sin(tn)*c2);\n\n    vec2 gv = fract(uv)-.5; // set center of a single box\n    vec2 id = floor(uv)+.5; // give each single box an id\n\n    float m = 0.;\n\n    // using the 8 cells surrounding main cell for drawing the circles\n    for(float y=-1.; y<=1.; y++) {\n        for(float x=-1.; x<=1.; x++) {\n\t        vec2 offs = vec2(x, y);\n\t        float d = length(gv-offs);\n            float dist = length(id+offs)*(.25+(tVarD*.25)); // make the diameters pulsate\n\t        float r = mix(r1, r2, sin(dist-ta)*.5+.5); // set min and max = animation amplitude\n\n            m = Xor(m, smoothstep(r, r-.01, d));\n        }\n    }\n\n    col += m;\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 18031,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/arthur-stammet/minimals"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}