{
    "Shader": {
        "info": {
            "date": "1710385297",
            "description": "https://en.wikipedia.org/wiki/Ben_Day_process\nYou can adjust settings in the Common tab and choose a different video source in the Buffer A tab.",
            "flags": 34,
            "hasliked": 0,
            "id": "l3SSzm",
            "likes": 3,
            "name": "Ben Day Dots Camera",
            "published": 3,
            "tags": [
                "camera",
                "comic",
                "benday"
            ],
            "usePreview": 0,
            "username": "Dev1ati0n",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.r = texelFetch(iChannel0, ivec2(fragCoord+cyanOffset*float(1<<dotSize)), 0).r;\n    fragColor.g = texelFetch(iChannel0, ivec2(fragCoord+magentaOffset*float(1<<dotSize)), 0).g;\n    fragColor.b = texelFetch(iChannel0, ivec2(fragCoord+yellowOffset*float(1<<dotSize)), 0).b;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rotMat = mat2(c,-s,s,c);\n    float mult = (1.42*sqrt(dot(iResolution.xy,iResolution.xy)))/min(iResolution.x,iResolution.y);\n    fragCoord -= iResolution.xy*0.5;\n    fragCoord *= mult;\n    fragCoord = hexMat*fragCoord;\n    fragCoord = rotMat*fragCoord;\n    fragCoord += iResolution.xy*0.5;\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// You can change these\nfloat angle = 4.; // In radians\nint dotSize = 1; // Logarithmic scale (base 2)\n\nvec2 cyanOffset = vec2(0,1); // Color offsets are proportional to dot size\nvec2 magentaOffset = vec2(-0.58,-0.5);\nvec2 yellowOffset = vec2(0.58,0.5);\n\n\n// Don't change these unless you know what you are doing\nmat2 invHexMat = mat2(1.1547,-0.57735,0.,1.);\nmat2 hexMat = mat2(0.866,0.5,0.,1.);\nvec2 offsets[7] = vec2[7](\n    vec2(-1, 1),\n    vec2(-1, 0),\n    vec2( 0, 1),\n    vec2( 0, 0),\n    vec2( 0,-1),\n    vec2( 1, 0),\n    vec2( 1,-1)\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rotMat = mat2(c,s,-s,c);\n    float mult = min(iResolution.x,iResolution.y)/(1.42*sqrt(dot(iResolution.xy,iResolution.xy)));\n    vec2 tmpCoord = fragCoord - iResolution.xy*0.5;\n    tmpCoord *= mult;\n    tmpCoord = rotMat*tmpCoord;\n    tmpCoord = invHexMat*tmpCoord;\n    tmpCoord += iResolution.xy*0.5;\n    tmpCoord = vec2((ivec2(tmpCoord)>>dotSize)<<dotSize);\n    mult = 1./mult;\n    rotMat = mat2(c,-s,s,c);\n    float maxRad = 0.7 * mult * float(1<<dotSize);\n    \n    fragColor = vec4(1);\n    for(int i = 0; i < 7; i++){\n        vec2 pix = tmpCoord + offsets[i]*float(1<<dotSize);\n        vec3 color = 1. - texelFetch(iChannel0,ivec2(pix)>>dotSize,dotSize).rgb;\n        color = sqrt(color);\n        color *= maxRad;\n        //color *= color;\n        vec2 center = pix + 0.5*float(1<<dotSize);\n        center -= iResolution.xy*0.5;\n        center *= mult;\n        center = hexMat*center;\n        center = rotMat*center;\n        center += iResolution.xy*0.5;\n        vec2 diff = fragCoord - center;\n        fragColor.r *= clamp(sqrt(dot(diff,diff))-color.r+1.,0.,1.);\n        fragColor.g *= clamp(sqrt(dot(diff,diff))-color.g+1.,0.,1.);\n        fragColor.b *= clamp(sqrt(dot(diff,diff))-color.b+1.,0.,1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}