{
    "Shader": {
        "info": {
            "date": "1376406691",
            "description": " Trying to get some interesting looking lens flares.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sX3Rs",
            "likes": 276,
            "name": "Lens Flare Example",
            "published": 3,
            "tags": [
                "2d",
                "lens",
                "flare"
            ],
            "usePreview": 1,
            "username": "mu6k",
            "viewed": 24418
        },
        "renderpass": [
            {
                "code": "/* This is free and unencumbered software released into the public domain. https://unlicense.org/\n\nTrying to get some interesting looking lens flares, seems like it worked. \nSee https://www.shadertoy.com/view/lsBGDK for a more avanced, generalized solution\n\nIf you find this useful send me an email at peterekepeter at gmail dot com, \nI've seen this shader pop up before in other works, but I'm curious where it ends up.\n\nIf you want to use it, feel free to do so, there is no need to credit but it is appreciated.\n\n\nUsed in:\n\n Water World - https://www.shadertoy.com/view/lslGDB\n\n Floating Mountains - https://www.shadertoy.com/view/XsSGDy\n \n Clouds and Sun With Flare - https://www.shadertoy.com/view/4sl3zl\n \n musk's lens flare mod - https://www.shadertoy.com/view/XdfXRX\n\n Land of Dreams - https://github.com/Tomius/LoD\n\n Where is Starman? - https://spacein3d.com/starman\n\n\nChangelog:\n\n 13/08/13: \n\tfirst published\n\n 17/11/27\n    fixed seam, thanks to Shane\n\n 19/08/08:\n    updated description and license change\n\n 20/06/24:\n    renamed to Lens Flare Example, updated description\n\n*/\n\nfloat noise(float t)\n{\n\treturn texture(iChannel0,vec2(t,.0)/iChannelResolution[0].xy).x;\n}\nfloat noise(vec2 t)\n{\n\treturn texture(iChannel0,t/iChannelResolution[0].xy).x;\n}\n\nvec3 lensflare(vec2 uv,vec2 pos)\n{\n\tvec2 main = uv-pos;\n\tvec2 uvd = uv*(length(uv));\n\t\n\tfloat ang = atan(main.x,main.y);\n\tfloat dist=length(main); dist = pow(dist,.1);\n\tfloat n = noise(vec2(ang*16.0,dist*32.0));\n\t\n\tfloat f0 = 1.0/(length(uv-pos)*16.0+1.0);\n\t\n\tf0 = f0 + f0*(sin(noise(sin(ang*2.+pos.x)*4.0 - cos(ang*3.+pos.y))*16.)*.1 + dist*.1 + .8);\n\t\n\tfloat f1 = max(0.01-pow(length(uv+1.2*pos),1.9),.0)*7.0;\n\n\tfloat f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;\n\tfloat f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;\n\tfloat f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;\n\t\n\tvec2 uvx = mix(uv,uvd,-0.5);\n\t\n\tfloat f4 = max(0.01-pow(length(uvx+0.4*pos),2.4),.0)*6.0;\n\tfloat f42 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*5.0;\n\tfloat f43 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*3.0;\n\t\n\tuvx = mix(uv,uvd,-.4);\n\t\n\tfloat f5 = max(0.01-pow(length(uvx+0.2*pos),5.5),.0)*2.0;\n\tfloat f52 = max(0.01-pow(length(uvx+0.4*pos),5.5),.0)*2.0;\n\tfloat f53 = max(0.01-pow(length(uvx+0.6*pos),5.5),.0)*2.0;\n\t\n\tuvx = mix(uv,uvd,-0.5);\n\t\n\tfloat f6 = max(0.01-pow(length(uvx-0.3*pos),1.6),.0)*6.0;\n\tfloat f62 = max(0.01-pow(length(uvx-0.325*pos),1.6),.0)*3.0;\n\tfloat f63 = max(0.01-pow(length(uvx-0.35*pos),1.6),.0)*5.0;\n\t\n\tvec3 c = vec3(.0);\n\t\n\tc.r+=f2+f4+f5+f6; c.g+=f22+f42+f52+f62; c.b+=f23+f43+f53+f63;\n\tc = c*1.3 - vec3(length(uvd)*.05);\n\tc+=vec3(f0);\n\t\n\treturn c;\n}\n\nvec3 cc(vec3 color, float factor,float factor2) // color modifier\n{\n\tfloat w = color.x+color.y+color.z;\n\treturn mix(color,vec3(w)*factor,w*factor2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\tuv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n\tmouse.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\tif (iMouse.z<.5)\n\t{\n\t\tmouse.x=sin(iTime)*.5;\n\t\tmouse.y=sin(iTime*.913)*.5;\n\t}\n\t\n\tvec3 color = vec3(1.4,1.2,1.0)*lensflare(uv,mouse.xy);\n\tcolor -= noise(fragCoord.xy)*.015;\n\tcolor = cc(color,.5,.1);\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}