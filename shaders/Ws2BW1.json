{
    "Shader": {
        "info": {
            "date": "1589957352",
            "description": "reproducing Erlend Robaye's  [url]https://www.facebook.com/groups/procgenart/permalink/1991283661002453/[/url]\n\ntune amount of AA ( NxN samples ).\nNB: you can stop play: no animation ! :-)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws2BW1",
            "likes": 16,
            "name": "Hatched Complex Spaces",
            "published": 3,
            "tags": [
                "fractal",
                "complex"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "// reproducing Erlend Robaye's https://www.facebook.com/groups/procgenart/permalink/1991283661002453/\n\n#define AA 1    // antialiasing\n#define N  10   // NxN subsamples\n\n// --- complex op from https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n\n#define CS(a)        vec2( cos(a), sin(a) )\n//#define cart2pol(U)  vec2( length(U), atan((U).y,(U).x) )\n#define pol2cart(U) ( (U).x * CS( (U).y ) )\n#define cmod(Z)      length(Z)\n#define carg(Z)      atan( (Z).y, (Z).x )\n#define cmul(A,B)  ( mat2( A, -(A).y, (A).x ) * (B) )  // by deMoivre formula\n#define cinv(Z)    ( vec2( (Z).x, -(Z).y ) / dot(Z,Z) ) \n#define cdiv(A,B)    cmul( A, cinv(B) )\n//#define cpow(Z,v)    pol2cart( vec2( pow(cmod(Z),v) , (v) * carg(Z) ) )\n#define cpow(A,B)    cexp( cmul( B, clog(A) ) )\n#define cexp(Z)      pol2cart( vec2( exp((Z).x), (Z).y ) )\n#define clog(Z)      vec2( log(cmod(Z)), carg(Z) )\n#define imul(Z)      vec2(-(Z).y,(Z).x)\n#define csin(Z)    ( -.5* imul( cexp(imul(Z)) - cexp(-imul(Z)) ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R  = iResolution.xy, z;\n    float s = 1.8 / R.y;                // scale\n    z = ( (u-(R-R.y)/2.) * s + vec2(-.2,2.2) ) ; // x = -0.2..1.65  y = 2.2 .. 4\n    O = vec4(0);  \n    if ( z.x < -.2 || z.x > 1.65 ) return;\n    \n#if AA\n  for( int k=0; k<N*N; k++) {\n    vec2 z = z + (vec2(k%N,k/N)-.5*float((N+1)/2)) / float(N) * s;\n#endif\n        \n    for (int i=0; i<4; i++) \n        z = cdiv( cexp(z) , z );          // 4x z = (e^z)/z\n        \n    z = cdiv( csin(z) , z-vec2(1,0) );    //    z = sin(z) / (z-1)\n\n    for (int i=0; i<4; i++)                                      // should simplifies to\n        z = cpow( z, vec2(1,6) );         // 4x z = z^(1+6i)     //   z^(1+6i)⁴\n        \n#if 0\n    if ( cmod(z) < .1 ) O++;              // could do this intead of following (pretty close)\n#else\n    z = cdiv( cexp(z) , z );              //    z = (e^z)/z      // should simplifies to\n \n    z = clog( z );                        //    z = log(z)       //   z -= log(z)\n // if ( cmod(z) < exp(45.) &&   cmod(z) > exp(-45. )) O++;      // could do this intead of clog\n\n // O += vec4(!isnan(cmod(z)) && !isinf(cmod(z)));  // white if defined, otherwise black\n    if (cmod(z) < 45. ) O++;                        // simplifies to this\n#endif\n      \n#if AA\n  }\n  O /= float(N*N);                        // average subpixels\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}