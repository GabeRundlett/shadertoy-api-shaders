{
    "Shader": {
        "info": {
            "date": "1478453499",
            "description": "Shadertoy remix of davidope's excellent work for codevember 2016\nhttp://dvdp.tumblr.com/post/97344550933/140913\n\nLearning about repetition and anti-aliasing.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldXR4",
            "likes": 66,
            "name": "Pipes",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "codevember",
                "dvdp"
            ],
            "usePreview": 0,
            "username": "xorxor",
            "viewed": 2768
        },
        "renderpass": [
            {
                "code": "// Created by XORXOR, 2016\n// Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n//\n// Shadertoy remix of davidope's work\n// http://dvdp.tumblr.com/post/97344550933/140913\n\n#define ANTIALIAS\n\nfloat cylinder( vec3 p )\n{\n    return length( p.xy ) - 0.9;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float a = -0.1 * iTime - 0.02 * p.z;\n    float c = cos( a );\n    float s = sin( a );\n    mat2 m = mat2( c, -s, s, c );\n    return vec3( m * p.xy, p.z );\n}\n\nvec2 opRep( vec2 p, float size, float start, float stop )\n{\n    float halfSize = size * 0.5;\n    vec2 c = floor( p / size );\n    p = mod( p, size ) - halfSize;\n    if ( ( c.x > stop ) || ( c.y > stop ) )\n    {\n        p += size * ( c - stop );\n    }\n    if ( ( c.x < start ) || ( c.y < start ) )\n    {\n        p += size * ( c - start );\n    }\n    return p;\n}\n\nfloat map( vec3 p )\n{\n    p = opTwist( p );\n    p.xy = opRep( p.xy, 10.0, -7.0, 7.0 );\n    float d = cylinder( p );\n    return d;\n}\n\nfloat scene( vec3 ro, vec3 rd )\n{\n    float t = 0.01;\n    for ( int i = 0; i < 200; i++ )\n    {\n        vec3 p = ro + t * rd;\n        float d = map( p );\n        if ( d < 0.001 )\n        {\n            return t;\n        }\n        t += d;\n    }\n    return -1.0;\n}\n\nvec3 calcNormal( vec3 pos )\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    float pd = map( pos );\n    vec3 n = vec3(\n            pd - map( pos - eps.xyy ),\n            pd - map( pos - eps.yxy ),\n            pd - map( pos - eps.yyx ) );\n    return normalize( n );\n}\n\nfloat calcAo( vec3 pos, vec3 n )\n{\n    float occ = 0.0;\n    for ( int i = 0; i < 5; i++ )\n    {\n        float hp = 0.1 + 2.0 * float( i );\n        float dp = map( pos + n * hp );\n        occ += ( hp - dp );\n    }\n    return clamp( 1.0 - 0.04 * occ, 0.0, 1.0 );\n}\n\nvec3 render( vec3 ro, vec3 rd )\n{\n    float d = scene( ro, rd );\n    vec3 col = vec3( 0 );\n    if ( d > 0.0 )\n    {\n        vec3 pos = ro + d * rd;\n        vec3 twistPos = opTwist( pos );\n        float t = -15.0 * iTime;\n        col = vec3( floor( 0.3 * mod( twistPos.z + t, 6.0 ) ) );\n        vec3 nor = calcNormal( pos );\n        float ao = calcAo( pos, nor );\n        col *= vec3( ao );\n        float fog = ( 400.0 + pos.z ) / 300.0;\n        col *= fog;\n    }\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 eye = vec3( 0.0, 0.0, 20.0 );\n    vec3 target = vec3( 0.0 );\n    vec3 cw = normalize( target - eye );\n    vec3 cu = cross( cw, vec3( 0, 1, 0 ) );\n    vec3 cv = cross( cu, cw );\n    mat3 cm = mat3( cu, cv, cw );\n\n    vec3 col = vec3( 0.0 );\n#ifdef ANTIALIAS\n    for ( int i = 0; i < 4; i++ )\n    {\n        vec2 off = vec2( mod( float( i ), 2.0 ), mod( float( i / 2 ), 2.0 ) ) / 2.0;\n#else\n        vec2 off = vec2( 0.0 );\n#endif\n        vec2 uv = ( fragCoord.xy + off - 0.5 * iResolution.xy ) / iResolution.y;\n        vec3 rd = cm * normalize( vec3( uv, 2.5 ) );\n\n        col += render( eye, rd );\n#ifdef ANTIALIAS\n    }\n    col *= 0.25;\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}