{
    "Shader": {
        "info": {
            "date": "1465267462",
            "description": "We were studying Tea cup ballet by Olive Cotton in a photography class. So I decided to create a similar looking image as a shader.\n\nImage: https://en.wikipedia.org/wiki/Tea_cup_ballet",
            "flags": 0,
            "hasliked": 0,
            "id": "4syXRV",
            "likes": 10,
            "name": "Teacups",
            "published": 3,
            "tags": [
                "raymarcher",
                "distance",
                "teacup"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 1751
        },
        "renderpass": [
            {
                "code": "#define MAX_ITERATIONS 256\n#define MIN_DISTANCE  .001\n\nconst vec3 lightCol = vec3(1.,.8,.8);\n\t  vec3 lightPos = vec3(0.,1.,3.);\n\nstruct Ray { vec3 ori; vec3 dir; };\nstruct Dst { float dst; int id;  };\nstruct Hit { vec3 p; int id; \t };\n    \n// Distance Field Source:\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n  \nvec2 rot2D(vec2 p, float angle) {\n \n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return p * mat2(c,s,-s,c);\n    \n}\n\nDst dstTeacup(vec3 p) {\n \t\n    float rot = iTime * 45.;\n    if(iMouse.z > 0.) rot = -90.+180.*(iMouse.x/iResolution.x);\n    p.xz = mod(p.xz, vec2(2.))-1.;\n    p.xz = rot2D(p.xz, rot);\n    \n    float dst = sdCappedCylinder(-p, vec2(.5,.45));\n    dst = max(-sdCappedCylinder(vec3(0.,0.2,0.)-p, vec2(.4,.35)), dst);\n    //dst = min(dst, sdCappedCylinder(vec3(0.,0.2,0.)-p, vec2(.4,.35)));\n    \n    p.yz = rot2D(p.yz, 90.);\n    dst = smin(dst, sdTorus(vec3(0.6,0.,0.)-p,vec2(.2,.05)), .1);\n    \n    return Dst(dst,0);\n    \n}\n\nDst dstFloor(vec3 p) {\n \n    float h = -.45;\n    return Dst(p.y - h, 1);\n    \n}\n\nDst dstUnion(Dst a, Dst b) {\n \n    if(a.dst < b.dst) return a;\n    return b;\n    \n}\n\nDst dstScene(vec3 p) {\n \n    Dst dst = dstTeacup(p);\n    dst = dstUnion(dst, dstFloor(p));\n    \n    return dst;\n    \n}\n\nHit raymarch(Ray ray, int maxIter, float maxDst) {\n    \n    vec3 p = ray.ori;\n    int id = -1;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n     \n        if(i >= maxIter || distance(p,ray.ori) >= maxDst) {\n         \n            id = -1;\n            break;\n            \n        }\n        \n        Dst scn = dstScene(p);\n        p += ray.dir * scn.dst * .75;\n        \n        if(scn.dst < MIN_DISTANCE) {\n         \n            id = scn.id;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(p,id);\n    \n}\n\n// Shadows by iq\n// Source: https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t ).dst;\n        res = min( res, 64.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 eps = vec2(.001,0.);\n    vec3 n   = vec3(dstScene(p+eps.xyy).dst-dstScene(p-eps.xyy).dst,\n                    dstScene(p+eps.yxy).dst-dstScene(p-eps.yxy).dst,\n                    dstScene(p+eps.yyx).dst-dstScene(p-eps.yyx).dst);\n    return normalize(n);\n    \n}\n\nvec3 calcLighting(vec3 col, Ray ray, vec3 p, vec3 n, vec3 r, float shine) {\n    \n    vec3 lv = lightPos - p;\n    vec3 ld = normalize(lv);\n    \n    float d = max(dot(ld,n),0.);\n    float s = 0.;\n    if(shine > 0.) {\n\n        s = max(pow(dot(ld,r),shine),0.);\n        \n    }\n    \n    d *= 1.-smoothstep(0., 25., length(lv));\n    d *= softshadow(p+ld*.01,ld,0.,length(lv));\n    s *= d;\n    \n    return (col * lightCol * d) + (s * lightCol);\n    \n}\n\nvec3 shadeTeacup(Ray ray, Hit scn, vec3 n, vec3 r) {\n \n    return calcLighting(vec3(1.),ray,scn.p,n,r,60.);\n    \n}\n\nvec3 shadeFloor(Ray ray, Hit scn, vec3 n, vec3 r) {\n \n    vec3 tex = texture(iChannel0, mod(scn.p.xz, 1.)).xyz;\n    return calcLighting(tex,ray,scn.p,n,r,25.);\n    \n}\n\nvec3 shade(Ray ray) {\n \n    Hit scn  = raymarch(ray, MAX_ITERATIONS, 256.);\n    vec3 col = vec3(0.);\n    \n    if(scn.id == 0) {\n        \n        vec3 n = calcNormal(scn.p);\n        vec3 r = normalize(reflect(ray.dir, n));\n        \n        col = shadeTeacup(ray,scn,n,r);\n        \n        Ray rr  = Ray(scn.p+r*.01,r);\n        Hit rh  = raymarch(rr,32,256.);\n        vec3 rc = vec3(0.);\n        if(rh.id == 0) {\n           vec3 rn = calcNormal(rh.p);\n           vec3 rd = normalize(reflect(rr.dir,rn));\n           rc = shadeTeacup(rr,rh,rn,rd);\n        } else if(rh.id == 1) {\n           vec3 rn = calcNormal(rh.p);\n           vec3 rd = normalize(reflect(rr.dir,rn));\n           rc = shadeFloor(rr,rh,rn,rd);\n        }\n        \n        float fresnel = mix(.01,.9,1.-max(pow(-dot(ray.dir,n),.7),0.));\n        col = mix(col, rc, fresnel);\n        \n    } else if(scn.id == 1) {\n     \n        vec3 n = calcNormal(scn.p);\n        vec3 r = normalize(reflect(ray.dir,n));\n        \n        col = shadeFloor(ray,scn,n,r);\n        \n        Ray rr  = Ray(scn.p+r*.01,r);\n        Hit rh  = raymarch(rr,32,256.);\n        vec3 rc = vec3(0.);\n        if(rh.id == 0) {\n        vec3 rn = calcNormal(rh.p);\n        vec3 rd = normalize(reflect(rr.dir,rn));\n        rc = shadeTeacup(rr,rh,rn,rd);\n        }\n        \n    }\n    \n    col = mix(col, vec3(0.), smoothstep(2.,56.,distance(scn.p,ray.ori)));\n    \n    float flare = max(pow(dot(normalize(lightPos-ray.ori),ray.dir), 50.), 0.);\n    col += lightCol * flare;\n\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(2.5*cos(iTime*.1),2.,-3.+iTime);\n    vec3 dir = vec3(uv, 1.);\n    dir.yz   = rot2D(dir.yz, -25.);\n    Ray  ray = Ray(ori, normalize(dir));\n    \n    lightPos  = ori+vec3(4.5*sin(iTime),.5+.5*sin(iTime),5.+1.5*cos(iTime*5.));\n    fragColor = vec4(shade(ray),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}