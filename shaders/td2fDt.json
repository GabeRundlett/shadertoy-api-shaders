{
    "Shader": {
        "info": {
            "date": "1592138149",
            "description": "Porting functions from http://www.flong.com/texts/code/shapers_poly/ as suggested by https://thebookofshaders.com/05/",
            "flags": 0,
            "hasliked": 0,
            "id": "td2fDt",
            "likes": 1,
            "name": "Bos - Shapers Poly",
            "published": 3,
            "tags": [
                "bookofshaders"
            ],
            "usePreview": 0,
            "username": "zeta",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "// http://www.flong.com/texts/code/shapers_poly/\n\n#define PI 3.14159265359\n\nfloat double_cubic_seat(vec2 uv, float a, float b)\n{\n    if (uv.x <= a) {\n        return b - b*pow(1.0 - uv.x / a, 3.0);\n    } else {\n        return b + (1.0 - b) * pow((uv.x - a) / (1.0 - a), 3.0);\n    }\n}\n\nfloat double_cubic_seat_linear_blend(vec2 uv, float a, float b)\n{\n    if (uv.x <= a) {\n        return b * uv.x + (1.0 - b) * a * (1.0 - pow(1.0 - uv.x / a, 3.0));\n\n    } else {\n        return b * uv.x + (1.0 - b) * (a + (1.0 - a) * pow((uv.x - a) / (1.0 - a), 3.0));\n    }\n}\n\n\nfloat double_odd_poly_seat(vec2 uv, float a, float b, float n)\n{\n    float epsilon = 0.00001;\n    float min_param_a = 0.0 + epsilon;\n    float max_param_a = 1.0 - epsilon;\n    float min_param_b = 0.0;\n    float max_param_b = 1.0;\n    a = min(max_param_a, max(min_param_a, a));  \n    b = min(max_param_b, max(min_param_b, b)); \n\n    float p = 2.0*n + 1.0;\n    float y = 0.0;\n    if (uv.x <= a){\n        y = b - b*pow(1.0-uv.x/a, p);\n    } else {\n        y = b + (1.0-b)*pow((uv.x-a)/(1.0-a), p);\n    }\n    return y;\n}\n\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    //float y = ;\n\n    //vec3 color = vec3(y);\n    //float pct = plot(uv, y);\n    //color = (1.0 - pct) * color + pct * vec3(0.0,1.0,0.0);\n    vec3 color =\n        plot(uv, double_cubic_seat(uv, m.x, m.y)) * vec3(1.0, 0.0, 0.0) + \n        plot(uv, double_cubic_seat_linear_blend(uv, m.x, m.y)) * vec3(0.0, 1.0, 0.0) +\n\t\tplot(uv, double_odd_poly_seat(uv, m.x, m.y, clamp(1.0, 20.0, 20.0*sin(PI * iTime / 2.0)))) * vec3(0.0, 0.0, 1.0);\n        \n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}