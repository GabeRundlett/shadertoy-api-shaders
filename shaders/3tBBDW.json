{
    "Shader": {
        "info": {
            "date": "1598910765",
            "description": "Hack-ish bokeh-like blur using three linear blurs at different 30Â° angles and a mix of median with average weighted blur.\nI've also made small use of inverse tonemapping for an HDR-like look.\nClick and drag from the center to scale and rotate the shape.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tBBDW",
            "likes": 24,
            "name": "Hexagonal bokeh blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "filter",
                "bokeh",
                "hexagon"
            ],
            "usePreview": 1,
            "username": "luluco250",
            "viewed": 2136
        },
        "renderpass": [
            {
                "code": "/*\n\nCopyright (c) 2020 Lucas Melo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n*/\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    /*if (iMouse.z > 0.0)\n    {\n    \tfloat scale = 1.0;\n        vec2 m = iMouse.xy * ps;\n        scale += distance(m, vec2(0.5)) * 3.0;\n        \n        uv = ScaleCoord(uv, vec2(1.0 / scale), vec2(0.5));\n    }*/\n    \n    color = texture(iChannel0, uv);\n    color.rgb *= Exposure;\n    color.rgb = Tonemap(color.rgb);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float Angle = 45.0;\nconst float Exposure = exp2(-3.0);\n\nconst int BlurSamples = 9;\nconst float BlurScale = 2.3;\nconst float BlurBrightness = 0.5;\n\nconst float Gamma = 2.333333;\n\nconst float Pi = 3.1415926;\nconst float Deg2Rad = Pi / 180.0;\nconst float Rad2Deg = 180.0 / Pi;\n\nvec2 ScaleCoord(vec2 coord, vec2 scale, vec2 pivot)\n{\n    return (coord - pivot) * scale + pivot;\n}\n\n// https://en.wikipedia.org/wiki/Rotation_%28mathematics%29#Two_dimensions\nvec2 Rotate(vec2 p, float deg)\n{\n    float rad = Deg2Rad * deg;\n    float s = sin(rad);\n    float c = cos(rad);\n    \n    vec2 res;\n    res.x = p.x * c - p.y * s;\n    res.y = p.x * s + p.y * c;\n    \n    return res;\n}\n\nfloat AngleBetween(vec2 a, vec2 b)\n{\n    vec2 d = b - a;\n    float angle = atan(d.y, d.x);\n    angle *= Rad2Deg;\n    \n    return angle; \n}\n\nvec4 Blur(\n    sampler2D sp,\n    vec2 uv,\n    vec2 dir,\n    const int samples,\n    float bright)\n{\n    if (samples < 1)\n        return vec4(0.0);\n    \n    if (samples == 1)\n        return texture(sp, uv);\n    \n    uv -= float(samples / 2) * dir;\n    \n    vec4 color = texture(sp, uv);\n    vec4 maxColor = color;\n    \n    for (int i = 1; i < samples; ++i)\n    {\n        uv += dir;\n        \n        vec4 pixel = texture(sp, uv);\n        color += pixel;\n        maxColor = max(maxColor, pixel);\n    }\n    \n    color /= float(samples);\n    \n    color = mix(color, maxColor, color * bright);\n    \n    return color;\n}\n\nfloat GetScale(vec2 uv, float t)\n{\n    float scale = sin(uv.x + uv.y + t * 0.6) * 0.5 + 0.5;\n    scale = pow(abs(scale), 0.9) * 6.0;\n    scale = min(scale, 1.0);\n    \n    return scale;\n}\n\nfloat GetScale(vec2 uv, float t, vec4 mouse, vec2 ps)\n{\n    float scale = BlurScale;\n    \n    if (mouse.z < 1.0)\n        return BlurScale * GetScale(uv, t);\n    \n    scale *= distance(mouse.xy * ps, vec2(0.5)) * 3.0;\n    \n    return scale;\n}\n\nfloat GetAngle(vec4 mouse, vec2 ps)\n{\n    if (mouse.z < 1.0)\n        return Angle;\n    \n    float angle = 90.0 - AngleBetween(mouse.xy * ps, vec2(0.5));\n    \n    return angle;\n}\n\nvec3 Reinhard(vec3 color)\n{\n    return color / (1.0 + color);\n}\n\nvec3 ReinhardInv(vec3 color)\n{\n    return -(color / min(color - 1.0, -0.1));\n}\n\nvec3 UE3Tonemap(vec3 color)\n{\n    return color / (color + 0.155) * 1.019;\n}\n\nvec3 UE3TonemapInv(vec3 color)\n{\n    return (color * -0.155) / (max(color, 0.01) - 1.019);\n}\n\nvec3 BakingLabACESTonemap(vec3 color, bool isInverse)\n{\n\tconst float A = 0.0245786;\n    const float B = 0.000090537;\n    const float C = 0.983729;\n    const float D = 0.4329510;\n    const float E = 0.238081;\n    \n    if (!isInverse)\n    {\n        color = (\n            (color * (color + A) - B) /\n            (color * (C * color + D) + E));\n        color = clamp(color, 0.0, 1.0);\n        \n        return color;\n    }\n    \n    color = abs(\n        (\n            (A - D * color) -\n            sqrt(\n                pow(abs(D * color - A), vec3(2.0)) -\n                4.0 * (C * color - 1.0) * (B + E * color))\n        ) /\n        (2.0 * (C * color - 1.0))\n    );\n    \n    return color;\n}\n\nvec3 Tonemap(vec3 color)\n{\n    color = Reinhard(color);\n    color = pow(abs(color), vec3(1.0 / Gamma));\n    \n    return color;\n}\n\nvec3 InvTonemap(vec3 color)\n{\n    color = pow(abs(color), vec3(Gamma));\n    color = ReinhardInv(color);\n    \n    return color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / vec2(textureSize(iChannel0, 0)) * 3.0;\n    \n    vec2 uv0 = coord;\n    uv0.x += iTime * 10.0;\n    uv0.y -= iTime * 2.0;\n    uv0 *= ps * 0.4;\n    \n    vec4 color0 = texture(iChannel0, uv0);\n    \n    vec2 uv1 = coord;\n    uv1.x -= iTime * 20.0;\n    uv1.y += iTime * 30.0;\n    uv1 *= ps * 0.3;\n    \n    vec4 color1 = texture(iChannel0, uv1);\n    \n    color = max(color0, color1);\n    \n    color.rgb = InvTonemap(color.rgb);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    float angle = GetAngle(iMouse, ps);\n    \n    vec2 dir = Rotate(vec2(0, 1), -angle);\n    dir *= ps * GetScale(uv, iTime, iMouse, ps);\n    \n    color = Blur(\n        iChannel0,\n        uv,\n        dir,\n        BlurSamples,\n        BlurBrightness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    float angle = GetAngle(iMouse, ps);\n    \n    vec2 dir = Rotate(vec2(1, 0), 30.0 - angle);\n    dir *= ps * GetScale(uv, iTime, iMouse, ps);\n    \n    color = Blur(\n        iChannel0,\n        uv,\n        dir,\n        BlurSamples,\n        BlurBrightness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    float angle = GetAngle(iMouse, ps);\n    \n    vec2 dir = Rotate(vec2(1, 0), -30.0 - angle);\n    dir *= ps * GetScale(uv, iTime, iMouse, ps);\n    \n    color = Blur(\n        iChannel0,\n        uv,\n        dir,\n        BlurSamples,\n        BlurBrightness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}