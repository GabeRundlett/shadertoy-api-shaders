{
    "Shader": {
        "info": {
            "date": "1679551534",
            "description": "an attempt to shade the negative space\nbased on the nearest distance to the scene along the whole ray.\n\nthe shading for both positive and negative space here uses the same screen-space scalar-to-normal code.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdcSR7",
            "likes": 6,
            "name": "negative space normals",
            "published": 3,
            "tags": [
                "normals",
                "screenspace",
                "negativespacescreenspace"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "float gT;\nfloat gMapCalls;\nvec3  gLightDir = normalize(v1);\n\nfloat map(in vec3 p) {\n    vec3 q;\n    \n    gMapCalls += 1.0;\n    float d = 1e9;\n    \n    const vec2 donutSize = vec2(3.0, 1.0);\n    \n    // donut\n    d = min(d, sdTorus(p.yxz, donutSize));\n    \n    // cylinder\n    float cylRad = 0.5;\n    d = min(d, sdCappedCylinder(p.yxz + (donutSize.x - donutSize.y - cylRad) * (vec3(cos(gT), 0.0, sin(gT))), 3.0, cylRad));\n    \n    // box\n    q = p - vX * 5.0;\n    float theta = gT * 0.981;\n    q.zy *= mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n    d = min(d, sdBoxFrame(q, vec3(1.0), 0.1) - 0.05);\n        \n    return d;\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n\n    gT = iTime;\n    \n    float zoom      = 1.2;\n    vec2  xy        = (XY * 2.0 - iResolution.xy) / MINRES * zoom;\n    vec2  ms        = (iMouse.xy * 2.0 - iResolution.xy) / MINRES * zoom;\n    if (length(iMouse.xy) < 50.0) {\n        ms = vec2(gT * 0.2, -0.5);\n    }\n    \n    float camDist   = 10.0;\n    float camZoom   =  2.0;\n    vec3  lookTo    = v0;\n    vec3  lookFrom  = vec3(vec2(cos(ms.x * 2.0), sin(ms.x * 2.0)) * camDist, -ms.y * 7.0).xzy;\n    float ssEps     = 5.0 / MINRES;\n    \n    \n    vec3  camF      = normalize(lookTo - lookFrom);\n    vec3  camR      = normalize(cross(camF, vY));\n    vec3  camU      = cross(camR, camF);\n    \n    vec3  ro        = lookFrom;\n    vec3  rd        = normalize(camF + (xy.x * camR + xy.y * camU) / camZoom);\n    \n    // march\n    float maxSteps  = 150.0;\n    float underStep =   0.5;\n    float wsEps     =   0.001;\n    float t         =   0.0;\n    float minD1     =   1e9;\n    float minD2     =   1e9;\n    bool  hit       = true;\n    vec3  p;\n    gMapCalls       = 0.0;\n    for (float n = 0.0; n < maxSteps; ++n) {\n        p = ro + rd * t;\n        float d = map(p);\n        if (d < minD1) {\n            minD2 = minD1;\n            minD1 = d;\n        }\n        if (d < wsEps) {\n            break;\n        }\n        if (t > 1e2) {\n            hit = false;\n            break;\n        }\n        \n        t += d * underStep;\n    }\n    \n    // attempt to compute the actual closest distance\n    // based on the two neighboring measured distances.\n    // however it doesn't improve the banding.\n    // I need to read up IQs article on this technique.\n    #if 0\n    float md22 = minD2 * minD2;\n    float md24 = md22 * md22;\n    float minD = sqrt(md22 - (md24 / (4.0 * minD1 * minD1)));\n    #else\n    float minD = minD1;\n    #endif\n    \n    \n    float expense = gMapCalls / maxSteps;\n    \n    \n    vec3  nrm;\n    float Q;\n    float k1;\n    \n    if (hit) {\n        Q = -t;\n        k1 = 4e1;\n    }\n    else {\n        Q = -minD;\n        k1 = 5e1;\n    }\n    \n    float dQdx = dFdx(Q);\n    float dQdy = dFdy(Q);\n    vec3  dQx  = vec3(1.0, 0.0, dQdx * k1);\n    vec3  dQy  = vec3(0.0, 1.0, dQdy * k1);\n    nrm = normalize(cross(dQx, dQy));\n    \n    float ambient = 0.1;\n    float shade = max(ambient, dot(nrm, gLightDir));\n    \n    vec3 vRfl = reflect(rd, nrm);\n    vec3 rfl = texture(iChannel0, vRfl, 0.0).rgb;\n    rfl *= rfl;\n    \n    vec3 rgb = vec3(shade);\n    rgb = mix(rgb, rfl, 0.5);\n    \n    if (hit) {\n        rgb *= vec3(0.03, 0.05, 0.03);\n    }\n    rgb = pow(rgb, vec3(1.0/2.2));\n    if (iMouse.z > 0.0) {\n        rgb = mix(rgb, vec3(1.0, 0.6, 0.2), expense);\n    }\n    \n\n    RGBA = vec4(rgb, 1.0);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 v0 = vec3(0.0);\nconst vec3 v1 = vec3(1.0);\nconst vec3 vX = vec3(1.0, 0.0, 0.0);\nconst vec3 vY = vec3(0.0, 1.0, 0.0);\nconst vec3 vZ = vec3(0.0, 0.0, 1.0);\n\n#define MINRES (min(iResolution.x, iResolution.y))\n\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}