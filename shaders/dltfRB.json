{
    "Shader": {
        "info": {
            "date": "1701378971",
            "description": "exercise sprite",
            "flags": 0,
            "hasliked": 0,
            "id": "dltfRB",
            "likes": 15,
            "name": "exercise sprite",
            "published": 3,
            "tags": [
                "bitmap",
                "sprite",
                "exercise",
                "icon"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "///por jorge2017a2\n//30-nov-2023-\n//referencia tunel ...https://www.shadertoy.com/view/ctdBzB\n//tmabien referencia al grande grupo de shadertoy....:)\n\n#define antialiasing(n) n/min(288.,512.)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nconst int NAVE_BITMAP[256] = int[](\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,\n0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,\n0,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,\n0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,\n0,2,1,2,2,1,1,1,1,0,0,0,5,0,0,0,\n0,0,0,2,2,2,1,1,1,1,1,1,1,3,4,0,\n0,0,0,2,2,1,3,4,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\n\n\nconst int HOJA1_BITMAP[256] = int[](\n2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,\n2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,\n2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,\n2,2,1,1,2,2,2,2,2,2,1,1,1,1,2,2,\n2,2,2,1,1,1,2,2,2,1,1,1,0,2,2,2,\n2,2,2,1,1,1,1,2,1,1,1,1,0,2,2,2,\n2,1,2,2,1,1,0,1,2,1,1,0,0,2,2,1,\n1,1,1,2,1,1,0,0,1,0,1,0,1,2,2,1,\n0,0,1,1,1,1,1,0,0,1,1,0,0,2,0,0,\n0,3,1,0,1,1,0,1,0,1,0,0,0,1,0,3,\n0,3,1,1,0,0,1,0,1,1,1,0,0,1,0,3,\n1,3,3,1,0,0,1,1,0,1,0,0,1,1,1,3,\n1,3,3,1,1,0,1,1,1,0,1,1,1,1,1,3,\n0,1,3,1,1,0,0,1,0,1,0,1,1,0,1,1,\n1,0,1,0,0,1,1,0,0,0,0,1,0,1,0,1,\n1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0);\n\n\nconst int HOJA2_BITMAP[256] = int[](\n0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,\n0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,\n0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,\n0,1,1,0,0,0,0,0,0,1,1,0,1,0,0,0,\n0,1,1,1,0,0,0,0,0,1,0,1,1,0,0,0,\n0,0,1,1,1,0,0,0,1,1,0,1,1,0,0,0,\n0,0,1,1,1,1,0,0,1,1,0,1,1,0,0,1,\n1,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,\n1,0,0,1,1,0,1,1,1,0,1,0,0,0,1,0,\n1,1,0,1,1,1,1,1,0,0,1,0,0,1,1,0,\n1,1,1,0,1,1,1,1,0,1,1,0,1,1,0,0,\n0,1,1,1,0,1,1,1,0,1,1,0,1,1,0,0,\n0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,\n0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,\n0,0,1,1,1,0,1,1,0,1,1,1,0,1,1,0,\n0,0,0,1,1,0,1,1,0,1,1,1,0,0,1,1);\n\n\nvec3 RGB3(float r ,float g, float b)\n{ return vec3(r/255.,g/255.,b/255.);}\n\n\nvec3 GetColorNave(int opc)\n{   switch(opc)\n    {\n        \n    case 0:return RGB3(0.,0.,0.);\n    case 1:return RGB3(140.,140.,140.);\n    case 2:return RGB3(255.,0.,255.);\n    case 3:return RGB3(255.,255.,255.);\n    case 4:return RGB3(0.,159.,98.);\n    case 5:return RGB3(255.,255.,0.);\n\n    }\n    return vec3(1.0);\n}\n\n\nvec3 GetColrHoja1(int opc)\n{   switch(opc)\n    {\n    case 0:return RGB3(152.,232.,0.);\n    case 1:return RGB3(80.,160.,0.);\n    case 2:return RGB3(0.,0.,0.);\n    case 3:return RGB3(72.,88.,0.);\n   }\n    return vec3(1.0);\n}\n\nvec3 GetColrHoja2(int opc)\n{   switch(opc)\n    {\n    \n    case 0:return RGB3(80.,160.,0.);\n    case 1:return RGB3(152.,232.,0.);\n   }\n    return vec3(1.0);\n}\n\nvec3 PonerNave(vec2 uv, ivec2 pos, vec3 col)\n{   int opc=0;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( NAVE_BITMAP[pix.x+pix.y*16] );\n        if(opc!=0) col=GetColorNave(opc);\n    }\n    return col;\n}\n\n\nvec3 HacerHoja1(vec2 uv, ivec2 pos, vec3 col)\n{   int opc=0;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( HOJA1_BITMAP[pix.x+pix.y*16] );\n        if(opc!=0) col=GetColrHoja1(opc);\n    }\n    return col;\n}\n\nvec3 HacerHoja2(vec2 uv, ivec2 pos, vec3 col)\n{   int opc=0;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {   opc=int( HOJA2_BITMAP[pix.x+pix.y*16] );\n        if(opc!=0) col=GetColrHoja2(opc);\n    }\n    return col;\n}\n\n\nfloat rand(vec2 co)\n{ return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);}\n\nfloat noise(vec2 co)\n{\n    vec2 p = floor(co);\n    vec2 f = fract(co);\n    float a = rand(p);\n    float b = rand(p + vec2(1.0, 0.0));\n    float c = rand(p + vec2(0.0, 1.0));\n    float d = rand(p + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nvec3 PonerIcono(vec2 uv, ivec2 pos, vec3 col)\n{   int opc;\n    ivec2 pix = ivec2(uv*256.)+ivec2(-pos.x*16,-16*pos.y);\n     pix.y=-pix.y+15;\n    if (min(pix.x, pix.y) >= 0 && max(pix.x, pix.y) < 16) \n    {  \n        opc=int(mod(noise(vec2(pix.x,pix.y))*4.0 ,4.0) );\n        if(opc!=0) col=GetColorNave(opc);\n    }\n    return col;\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.468, 0.500, 0.500);\n    vec3 c = vec3(0.838, 1.000, 1.000);\n    vec3 d = vec3(-0.422, 0.638, -0.252);\n    return a + b * cos(6.28318*(c*t+d));\n}\n   \n   \nvec3 circulos( in vec2 fragCoord ,vec3 pcol )\n{\n    vec2 uv = (2.* fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col=pcol;\n    \n    if( uv.y>-0.75) \n    {\n    float t=iTime;\n    float c=iTime*6.0;\n    \n    vec2 pos=vec2(0.5*sin(t),0.5*cos(t));\n    float d0   = length(uv+pos)-0.0015;\n    col+=mix(col, vec3(0.5),d0);\n   \n    float da   = length(uv+pos);\n    float d   = 5. / da;\n    vec3 c1=palette(iTime + d/5.0)*0.5;\n    vec3 c2=palette(iTime + d/2.0)*0.35;\n    \n    col= (col+ c1+c2)/1.0;    \n    col *= abs(sin(4.*d + c));\n    col = mix(col, vec3(0.0),abs(1.0-da*1.15)-0.05);\n    }\n    return col;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col= circulos(fragCoord,vec3(0.0) );\n    ivec2 pos2=ivec2(3,5);\n    ivec2 pos1=ivec2(3,7);\n    float NES_RES_X=512.0;\n    float NES_RES_Y=288.0;\n    \n    float t=iTime;\n    col=PonerNave(uv*0.5+0.25*vec2(-0.25+0.5*sin(t),0.8+ 0.5*cos(t)), pos1, col);\n    \n    \n    ivec2 pos3=ivec2(0,1);\n    ivec2 pos4=ivec2(0,0);\n    vec2 uvr=uv+vec2(t*0.5,0.0);\n    uvr.x=mod(uvr.x,32.0/NES_RES_X);\n    \n    col=HacerHoja1(uvr,pos3,col);\n    col=HacerHoja2(uvr,pos4,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}