{
    "Shader": {
        "info": {
            "date": "1623076866",
            "description": "Graphics based on audio",
            "flags": 4,
            "hasliked": 0,
            "id": "sllGWX",
            "likes": 2,
            "name": "AudioGraphics",
            "published": 3,
            "tags": [
                "audio",
                "graphics"
            ],
            "usePreview": 0,
            "username": "nialred",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 500; // Max steps you are willing to search for a \"hit\" \nconst int MAX_STORED_DATA = 100;\nconst int MAX_DATA_BLOCK = MAX_STORED_DATA / 2;\nconst float MAX_DIST = 1000.0; // Max distance to search for a \"hit\"\nconst float MIN_DIST = 0.0; // Where to start the march \nconst float EPSILON = 0.001; // How close you need to be to be considered a hit\n\n// Speaker in audio data\nfloat data = 0.0;\nfloat prev_data = 0.0;\nfloat stored_data[MAX_STORED_DATA];\nfloat data_output[MAX_STORED_DATA];\n\nfloat prev_input = 0.0;\nint data_index = 0;\n\nstruct Ray\n{\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\nSphere sphere = Sphere(vec3(0.0, 0.0, 0.0), 1.0);\n\n\nfloat low_pass(float data_input)\n{\n    stored_data[data_index] = data_input;\n    float data_output = 0.0;\n    \n    for (int i=0; i<MAX_DATA_BLOCK; ++i)\n    {\n        data_output += (1.0/float(MAX_STORED_DATA))*stored_data[i];\n    }\n    \n    if (data_index == MAX_STORED_DATA)\n    {\n        data_index = 0;\n    }\n    \n    return data_output;\n}\n\n/*\nfloat low_pass(float data_input)\n{\n    float data_output = (data_input + prev_data)/2.0;\n    prev_data = data_input;\n    \n    return data_output;\n}\n*/\n\nvoid rotate_2d(float freq, inout vec2 p)\n{\n    float c = cos(freq);\n    float s = sin(freq);\n    p = vec2((p.x*c) - (p.y*s), (p.x*s) + (p.y*c));\n}\n\nfloat distort_surface(float freq, vec3 point)\n{\n    return 8.0*data*sin(point.x*freq) * sin(point.y*freq) * sin(point.z*freq);\n}\n\nvec3 ray_direction(float fieldOfView, vec2 uv) \n{ \n    float z = 1.0 / tan(radians(fieldOfView) / 2.0); // Distance to image plane\n    return normalize(vec3(uv, z));\n}\n\nfloat sphere_sdf(vec3 point)\n{\n    return length(point - sphere.center) - sphere.radius; // Return distance from sphere\n}\n\nfloat map_world(vec3 point)\n{   \n    rotate_2d(iTime/50.0, point.xy);\n    \n    float displacement = distort_surface(25.0*sin(iTime/100.0)+30.0, point);\n    float dist = sphere_sdf(point); // Distance from sphere \n    \n    return dist + displacement;\n}\n\nfloat shortest_distance_to_surface(vec3 eye_pos, vec3 march_dir, float start, float end)\n{\n    float depth = start; // Starting point for ray march (0.0)\n    float dist = 0.0;    // Initalize distance from sphere variable\n    int i = 0;           \n    \n    while (i < MAX_MARCHING_STEPS)\n    {\n        dist = map_world(eye_pos + (depth * march_dir)); // Distance to sphere (distorted)\n        \n        if (dist < EPSILON) // If at the surface, return the depth from image plane\n        {\n            return depth;\n        }\n        \n        depth += dist;\n        \n        if (depth >= end) // If at the max marching distance, return the max value\n        {\n            return end;\n        }\n        \n        i += 1;\n     }\n     \n     return end;\n}\n\nvec3 estimate_normal(vec3 point)\n{   \n    vec3 step = vec3(EPSILON, 0.0, 0.0);\n    \n    float gradient_x = map_world(point + step) - map_world(point - step);\n    float gradient_y = map_world(point + step.yxz) - map_world(point - step.yxz);\n    float gradient_z = map_world(point + step.yzx) - map_world(point - step.yzx);\n    \n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n    \n    return normalize(normal);\n}\n\nfloat diffuse(vec3 current_pos, vec3 light_pos, vec3 normal)\n{\n    vec3 light_dir = normalize(light_pos - current_pos);\n    float intensity = max(0.0, dot(normal, light_dir));\n    return intensity;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    float aspect_ratio = iResolution.x/iResolution.y;\n    uv.x = uv.x * aspect_ratio; // Account for image aspect ratio\n    \n    data  = texture(iChannel0, vec2(uv.x, 0.75)).x; \n    float wave = (data-0.5)*2.0;\n    data = 10.0*low_pass(data);\n    \n    sphere.radius = wave*sin(data)+1.0 *sphere.radius;\n    sphere.center.x = 0.15*sin(iTime);\n    sphere.center.y = 0.15*cos(iTime);\n    \n\n    // Define camera position\n    vec3 cam_pos = vec3(0.0, 0.0, -2.0);\n     \n    // Define ray as vector from camera position to pixel position\n    Ray ray = Ray(cam_pos, ray_direction(45.0, uv));\n      \n    // Define light position as a 3D vector\n    vec3 light_pos = vec3(20.0, 50.0, -50.0);\n    \n    // Find distance to surface\n    float dist = shortest_distance_to_surface(ray.origin, ray.direction, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) // If sphere doesn't exist at this pixel draw bg\n    { \n        // Eventually want to have the background be a cubic room \n        fragColor = vec4(0.2, 0.2, 0.2, 0.0);\n    }\n    \n    else // If sphere does exist at this pixel, draw color accordingly using basic lighting\n    {\n        vec3 point = ray.origin + dist*ray.direction;\n        vec3 normal = estimate_normal(point);\n        float intensity = diffuse(point, light_pos, normal);\n        normal = vec3(0.85, 0.95, 0.95) * (intensity);\n        normal = normal+0.15;\n        if( ( (uv.y<=0.0) && (abs(uv.y-wave)<=0.05) ) || ( (uv.y>=0.0) && (abs(uv.y-wave)<=0.05) ) )\n        {\n            normal.x = 0.85;\n            normal.y = 0.95;\n            normal.z = 0.95;\n        }\n        fragColor = vec4(normal, 1.0);\n        \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}