{
    "Shader": {
        "info": {
            "date": "1686275062",
            "description": "First Shader",
            "flags": 0,
            "hasliked": 0,
            "id": "dtVSzc",
            "likes": 10,
            "name": "JH Hello Shader",
            "published": 3,
            "tags": [
                "helloworld"
            ],
            "usePreview": 0,
            "username": "JohnWithAnH",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "// Simplex noise function\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n    const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n                        -0.577350269189626, 0.024390243902439);\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n        dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Transform uv to [-1, 1]\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Generate noise based on position\n    float noise = snoise(uv * 1.0 + 198.3); // Lower frequency for larger features\n    float waveNoise = snoise(uv * 20.0 + 500.0); \n    //add more noise\n    noise += snoise(uv * 5.0) * 0.1;\n    noise += snoise(uv * 10.0) * 0.05;\n    noise += snoise(uv * 20.0) * 0.025;\n    noise += snoise(uv * 40.0) * 0.0125;\n\n\n    // Add a radial fall off\n    float dist = length(uv);\n    noise = mix(noise, -1.0, smoothstep(0.4, 1.0, dist)); // Lower start value for a larger island\n\n    float wave = 0.0;\n    if(noise < -0.1){\n    wave = 0.05 * sin(5.0 * 3.1416 * dist - iTime * .5); // Add a sinusoidal wave\n    } \n    //add in wave effect\n    noise += wave;\n\n\n    // Define colors for different heights\n    vec3 waterColor = vec3(0.2, 0.5, 0.7);\n    vec3 sandColor = vec3(0.9, 0.8, 0.2);\n    vec3 grassColor = vec3(0.1, 0.6, 0.1);\n    vec3 forestColor = vec3(0.0, 0.4, 0.0);\n    vec3 rockColor = vec3(0.6, 0.6, 0.6);\n    vec3 mountainColor = vec3(0.5, 0.5, 0.5);\n    vec3 snowColor = vec3(1.0, 1.0, 1.0);\n\n    float sandStart = -0.1;\n\n    float waveWidth = 0.015;\n    float wave1loc = -0.3;\n    float wave2loc = -0.2;\n\n    // Choose color based on height\n    vec3 color = waterColor;\n    //before the sand, and in the wave range add white ripple lines\n    if(noise > wave1loc &&  noise < wave1loc + waveWidth && waveNoise < 0.0) color = vec3(1.0, 1.0, 1.0);\n    if(noise > wave2loc &&  noise < wave2loc + waveWidth && waveNoise < 0.0) color = vec3(1.0, 1.0, 1.0);\n    //terrain\n    if(noise > sandStart) color = sandColor; \n    if(noise > 0.1) color = grassColor;\n    if(noise > 0.2) color = forestColor;\n    if(noise > 0.5) color = rockColor;\n    if(noise > 0.6) color = mountainColor;\n    if(noise > 0.8) color = snowColor;\n\n    // Apply the color to the fragment\n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}