{
    "Shader": {
        "info": {
            "date": "1663000243",
            "description": "graffin' pixies scree's",
            "flags": 32,
            "hasliked": 0,
            "id": "ftcBW8",
            "likes": 31,
            "name": "Graffiti 3D",
            "published": 3,
            "tags": [
                "tag",
                "curve",
                "graffiti"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "\n// Graffiti 3D\n//\n// is it what we call stochastic?\n// when we agree onto something random?\n//\n// trying to render an extruded cube on a curve\n// in a least worst way possible\n//\n// previous iterations were Cyborg Signature and Fraggiti:\n// https://www.shadertoy.com/view/7lcfz7\n// https://www.shadertoy.com/view/NldfR4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // data unpacking\n    vec4 data = texture(iChannel0, uv);\n    float shade = data.r;\n    float timeline = data.g;\n    float glow = data.b;\n    float total = data.a;\n    \n    // background\n    vec4 color = vec4(1) * smoothstep(2., -2., length(uv-.5));\n    \n    if (total > .001 && total < max_dist)\n    {\n        // coloring\n        float tint = shade*2.+total*5.+timeline*1.;\n        vec3 palette = .5+.5*cos(vec3(1,2,3)*5.+tint);\n        color = vec4(palette,1);\n        color *= shade;\n        color += .5*pow(shade, 10.);\n    }\n    else\n    {\n        // outline and shadow\n        color *= smoothstep(5.,0.,glow);\n        color *= .8+.2*smoothstep(.8,0.,glow);\n    }\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// globals\nconst float delay = 5.;\nvec3 rng;\nfloat timeline, glow;\n\n// move brush\nvec3 move(float t)\n{\n    vec2 pos = vec2(0);\n    float angle = t*100./delay;\n    float radius = .1;\n    float jitter = .2;\n    float time = t*60./delay;\n    float index = floor(time);\n    float anim = fract(time);\n    float scroll = fract(t/delay);\n    vec2 rng = mix(hash21(index), hash21(index+1.), anim);\n    pos += (rng*2.-1.)*jitter;\n    pos.x += scroll*2.-1.;\n    pos.y += pow(abs(sin(time*.2)), 20.)*.4;\n    pos.y -= pow(abs(sin(time*.3)), 50.)*.4;\n    pos += vec2(cos(angle),sin(angle))*radius;\n    return vec3(pos*2., 0);\n}\n\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    float t = timeline;\n    \n    // move it\n    p -= move(t);\n    \n    // twist it\n    p.xz *= rot(t*4.);\n    p.yz *= rot(t*10.);\n    \n    // shape it\n    float size = .05 + .03 * sin(t*16.);\n    dist = sdBox(p, vec3(.5,2,.5)*size);\n    \n    glow += .01/dist;\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/R.xy;\n    vec2 p = 1.*(fragCoord-R.xy/2.)/R.y;\n    \n    // framebuffer\n    vec4 frame = texture(iChannel0, uv);\n    \n    // accumulate results\n    for (float frames = 10.; frames > 0.; --frames)\n    {\n        // init globals\n        float f = float(iFrame) + frames * 200.;\n        rng = hash(uvec3(fragCoord, f));\n        timeline = rng.x*delay+hash21(floor(iTime/delay)).x*1000.;\n        glow = 0.;\n        \n        // raymarch\n        vec3 pos = vec3(0,0,3);\n        vec3 ray = normalize(vec3(p, -1));\n        float total = 0.;\n        float steps = 0.;\n        const float count = 20.;\n        for (steps = count; steps > 0.; --steps) {\n            float dist = map(pos);\n            if (dist < .001 * total || total > max_dist) break;\n            total += dist;\n            pos += ray * dist;\n        }\n\n        // draw if closer\n        if (total < max_dist && (total < frame.a || frame.a < .001))\n        {\n            // data pack\n            float shade = steps/count;\n            float time = fract(timeline/delay);\n            fragColor = vec4(shade, time, glow, total);\n            frame = fragColor;\n        }\n        else\n        {\n            // store result\n            frame.b = max(frame.b, glow);\n            fragColor = frame;\n        }\n    }\n    \n    // wipe\n    fragColor *= step(.01, fract(iTime/delay));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution\nconst float max_dist = 4.;\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n// Inigo Quilez https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// Victor Shepardson + Inigo Quilez \n// https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;  // GLIB C\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)*(1.0/float(0xffffffffU));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}