{
    "Shader": {
        "info": {
            "date": "1492085610",
            "description": "Lines 74-77 of Buff B are an experiment to see what would happen if I accumulated cross products of rgb values iterating over a kernel, and this was the result. Adjusting values with commented mouse input \"boils\" or \"dissipates\" fluid. ",
            "flags": 32,
            "hasliked": 0,
            "id": "lsByRm",
            "likes": 43,
            "name": "Strange Fluid",
            "published": 3,
            "tags": [
                "reactive",
                "colors",
                "experiment",
                "fluid",
                "diffusion",
                "pattern",
                "reaction",
                "postproccessing"
            ],
            "usePreview": 0,
            "username": "tehsauce",
            "viewed": 2301
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4( 65.0*pow(texture(iChannel0, uv).rgb, vec3(6.0)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if ( distance( fragCoord.xy, iMouse.xy) < 20.0) {\n    \tfragColor = vec4(1.0);\n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec3 checkerboard( vec2 uv ) {\n \treturn vec3(mod( ( floor(uv.x)+floor(uv.y) ) *0.1, 2.0));    \n}\n\n#define t iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    \n    \n    if (iFrame < 20) {\n        fragColor = texelFetch(iChannel1,uv,0);\n    } else {\n\n        // Center pixel\n\n        vec3 c = texelFetch(iChannel0,uv,0).rgb;\n\n        //// 3x3 ////\n\n        // Adjacent\n        vec3 u = texelFetch(iChannel0, uv + ivec2(0, 1), 0).rgb;\n        vec3 d = texelFetch(iChannel0, uv + ivec2(0, -1),0).rgb;\n        vec3 l = texelFetch(iChannel0, uv + ivec2(-1, 0),0).rgb;\n        vec3 r = texelFetch(iChannel0, uv + ivec2( 1, 0),0).rgb;\n\n        // Diagonal\n        vec3 ul = texelFetch(iChannel0, uv + ivec2(-1, 1),0).rgb;\n        vec3 dl = texelFetch(iChannel0, uv + ivec2(-1, -1),0).rgb;\n        vec3 ur = texelFetch(iChannel0, uv + ivec2(1,  1),0).rgb;\n        vec3 dr = texelFetch(iChannel0, uv + ivec2(1, -1),0).rgb;\n\n        //// 5x5 ////\n\n        vec3 fa = texelFetch(iChannel0, uv + ivec2(-2, 2),0).rgb;\n        vec3 fb = texelFetch(iChannel0, uv + ivec2(-2,  1),0).rgb;\n        vec3 fc = texelFetch(iChannel0, uv + ivec2(-2,  0),0).rgb;\n        vec3 fd = texelFetch(iChannel0, uv + ivec2(-2, -1),0).rgb;\n        vec3 fe = texelFetch(iChannel0, uv + ivec2(-2,-2),0).rgb;\n\n        vec3 ff = texelFetch(iChannel0, uv + ivec2(2, 2),0).rgb;\n        vec3 fg = texelFetch(iChannel0, uv + ivec2(2, 1),0).rgb;\n        vec3 fh = texelFetch(iChannel0, uv + ivec2(2, 0),0).rgb;\n        vec3 fi = texelFetch(iChannel0, uv + ivec2(2, -1),0).rgb;\n        vec3 fj = texelFetch(iChannel0, uv + ivec2(2,-2),0).rgb;\n\n        vec3 fk = texelFetch(iChannel0, uv + ivec2(-1, 2),0).rgb;\n        vec3 fl = texelFetch(iChannel0, uv + ivec2( 0, 2),0).rgb;\n        vec3 fm = texelFetch(iChannel0, uv + ivec2( 1, 2),0).rgb;\n\n        vec3 fn = texelFetch(iChannel0, uv + ivec2(-1,-2),0).rgb;\n        vec3 fo = texelFetch(iChannel0, uv + ivec2( 0,-2),0).rgb;\n        vec3 fp = texelFetch(iChannel0, uv + ivec2( 1,-2),0).rgb;\n\n        vec3 farthest = fa+fe+ff+fi;\n        vec3 mid = fb+fd+fg+fi+fk+fm+fn+fp;\n        vec3 close = fc+fh+fl+fo;\n        \n        vec3[] kernel = vec3[]\n              ( fa, fk, fl, fm, ff,\n               \tfb, ul,  u, ur, fg,\n                fc,  l,  c,  r, fh,\n                fd, dl,  d, dr, fi,\n                fe, fn, fc, fp, fj );\n\n        vec3 blur = 0.150183 * c + 0.095238 * (u+d+l+r) + 0.058608 * (ul+dl+ur+dr)\n                + 0.025641 * close + 0.014652 * mid + 0.003663 * farthest;\n        \n      //  vec3 wild = kernel[ int(6.0*length(kernel[ int(6.0*length(kernel[12]))+11]))+11];\n        \n        float comp = 0.6;//iMouse.y*0.004+0.2;\n        \n        vec3 wild2 = vec3(0.0);\n        for (int i = 0; i < 25; i++ ) {\n        \twild2 += 0.5*normalize(cross(wild2,kernel[i]-comp)+comp); \n        }\n       wild2 /= 5.0;\n        wild2 *= 5.0;//iMouse.x*0.018+0.6;\n        \n       // wild2 = mix(wild2, c, 0.001);\n        \n        wild2 = mix(wild2, c, 0.9);\n\n        fragColor = vec4( mix(wild2, \n                             (texelFetch(iChannel2, uv, 0).rgb), 0.75)/comp ,1.0);\n       \n    }    \n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define t iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv = ivec2(fragCoord);\n    \n\n    // Center pixel\n\n    vec3 c = texelFetch(iChannel0,uv,0).rgb;\n\n    //// 3x3 ////\n\n    // Adjacent\n    vec3 u = texelFetch(iChannel0, uv + ivec2(0, 1), 0).rgb;\n    vec3 d = texelFetch(iChannel0, uv + ivec2(0, -1),0).rgb;\n    vec3 l = texelFetch(iChannel0, uv + ivec2(-1, 0),0).rgb;\n    vec3 r = texelFetch(iChannel0, uv + ivec2( 1, 0),0).rgb;\n\n    // Diagonal\n    vec3 ul = texelFetch(iChannel0, uv + ivec2(-1, 1),0).rgb;\n    vec3 dl = texelFetch(iChannel0, uv + ivec2(-1, -1),0).rgb;\n    vec3 ur = texelFetch(iChannel0, uv + ivec2(1,  1),0).rgb;\n    vec3 dr = texelFetch(iChannel0, uv + ivec2(1, -1),0).rgb;\n\n    //// 5x5 ////\n\n    vec3 fa = texelFetch(iChannel0, uv + ivec2(-2, 2),0).rgb;\n    vec3 fb = texelFetch(iChannel0, uv + ivec2(-2,  1),0).rgb;\n    vec3 fc = texelFetch(iChannel0, uv + ivec2(-2,  0),0).rgb;\n    vec3 fd = texelFetch(iChannel0, uv + ivec2(-2, -1),0).rgb;\n    vec3 fe = texelFetch(iChannel0, uv + ivec2(-2,-2),0).rgb;\n\n    vec3 ff = texelFetch(iChannel0, uv + ivec2(2, 2),0).rgb;\n    vec3 fg = texelFetch(iChannel0, uv + ivec2(2, 1),0).rgb;\n    vec3 fh = texelFetch(iChannel0, uv + ivec2(2, 0),0).rgb;\n    vec3 fi = texelFetch(iChannel0, uv + ivec2(2, -1),0).rgb;\n    vec3 fj = texelFetch(iChannel0, uv + ivec2(2,-2),0).rgb;\n\n    vec3 fk = texelFetch(iChannel0, uv + ivec2(-1, 2),0).rgb;\n    vec3 fl = texelFetch(iChannel0, uv + ivec2( 0, 2),0).rgb;\n    vec3 fm = texelFetch(iChannel0, uv + ivec2( 1, 2),0).rgb;\n\n    vec3 fn = texelFetch(iChannel0, uv + ivec2(-1,-2),0).rgb;\n    vec3 fo = texelFetch(iChannel0, uv + ivec2( 0,-2),0).rgb;\n    vec3 fp = texelFetch(iChannel0, uv + ivec2( 1,-2),0).rgb;\n\n    vec3 farthest = fa+fe+ff+fi;\n    vec3 mid = fb+fd+fg+fi+fk+fm+fn+fp;\n    vec3 close = fc+fh+fl+fo;\n\n    vec3[] kernel = vec3[]\n          ( fa, fk, fl, fm, ff,\n            fb, ul,  u, ur, fg,\n            fc,  l,  c,  r, fh,\n            fd, dl,  d, dr, fi,\n            fe, fn, fc, fp, fj );\n\n    vec3 blur = 0.150183 * c + 0.095238 * (u+d+l+r) + 0.058608 * (ul+dl+ur+dr)\n            + 0.025641 * close + 0.014652 * mid + 0.003663 * farthest;\n\n    fragColor = vec4( clamp(c/*6.0*c - 5.0*blur*/,0.0,1.0),1.0);\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}