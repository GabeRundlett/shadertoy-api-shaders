{
    "Shader": {
        "info": {
            "date": "1514992504",
            "description": "Having written a Marching-Cubes implementation in the past using volume-datasets to extract \"classic\" polygon-meshes, makes one appreciate the ease of a ray-marched metaballs approach even more! The shader-name is a small German pun... sort of.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtSBzD",
            "likes": 6,
            "name": "falsche 3D Fleischbaellchen",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "pbr"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 837
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// falsche 3D Fleischbaellchen - scratching my itch to do 3D metaballs\n//\n// Copyright 2018 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159265359;\n\nfloat saturate (in float v) { return clamp (v, .0, 1.); }\n\nfloat fbm (in vec2 p) {\n\tfloat v = texture (iChannel0, p).r;\n    return v;\n}\n\nfloat distriGGX (in vec3 N, in vec3 H, in float roughness) {\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat geomSchlickGGX (in float NdotV, in float roughness) {\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat geomSmith (in vec3 N, in vec3 V, in vec3 L, in float roughness) {\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = geomSchlickGGX (NdotV, roughness);\n    float ggx2 = geomSchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness) {\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nmat2 r2d (in float a) {\n\tfloat c = cos (radians (a));\n    float s = sin (radians (a));\n    return mat2 (vec2(c, s), vec2(-s, c));\n}\n\nvec2 opRepeat2 (inout vec2 p, in vec2 size) {\n    vec2 hsize = .5 * size;\n    vec2 cell = floor ((p + hsize) / size);\n    p = mod (p + hsize, size) - hsize;\n    return cell;\n}\n\nfloat opCombine (in float d1, in float d2, in float r) {\n    float h = clamp (.5 + .5 * (d2 - d1) / r, .0, 1.);\n    return mix (d2, d1, h) - r * h * (1. - h);\n}\n\nfloat sdSphere (in vec3 p, in float r) {\n    return length (p) - r;\n}\n\nfloat sdHexPrism (in vec3 p, in vec2 h) {\n    vec3 q = abs (p);\n    return max (q.z - h.y, max ((q.x * .866025 + q.y * .5), q.y) - h.x);\n}\n\nfloat map (in vec3 p) {\n    vec3 pBottom = p;\n    vec3 pTop = p;\n\n    float r1 = .1 + .3 * (.5 + .5 * sin (2. * iTime));\n    float r2 = .15 + .2 * (.5 + .5 * sin (3. * iTime));\n    float r3 = .2 + .2 * (.5 + .5 * sin (4. * iTime));\n    float r4 = .25 + .1 * (.5 + .5 * sin (5. * iTime));\n\n    float t = 2. * iTime;\n    vec3 offset1 = vec3 (-.1*cos(t), .1, -.2*sin(t));\n    vec3 offset2 = vec3 (.2, .2*cos(t), .3*sin(t));\n    vec3 offset3 = vec3 (-.2*cos(t), -.2*sin(t), .3);\n    vec3 offset4 = vec3 (.1, -.4*cos(t), .4*sin(t));\n    vec3 offset5 = vec3 (.4*cos(t), -.2, .3*sin(t));\n    vec3 offset6 = vec3 (-.2*cos(t), -.4, -.4*sin(t));\n    vec3 offset7 = vec3 (.3*sin(t), -.6*cos(t), .6);\n    vec3 offset8 = vec3 (-.3, .5*sin(t), -.4*cos(t));\n\n    float ball1 = sdSphere (p + offset1, r4);\n    float ball2 = sdSphere (p + offset2, r2);\n\tfloat metaBalls = opCombine (ball1, ball2, r1);\n\n    ball1 = sdSphere (p + offset3, r1);\n    ball2 = sdSphere (p + offset4, r3);\n\tmetaBalls = opCombine (metaBalls, opCombine (ball1, ball2, .2), r2);\n\n    ball1 = sdSphere (p + offset5, r3);\n    ball2 = sdSphere (p + offset6, r2);\n\tmetaBalls = opCombine (metaBalls, opCombine (ball1, ball2, .2), r3);\n\n    ball1 = sdSphere (p + offset7, r3);\n    ball2 = sdSphere (p + offset8, r4);\n\tmetaBalls = opCombine (metaBalls, opCombine (ball1, ball2, .2), r4);\n\n    pBottom.yz *= r2d(90.);\n    vec2 cellBottom = opRepeat2 (pBottom.yx, vec2 (.75));\n\n    pTop.yz *= r2d(270.);\n    vec2 cellTop = opRepeat2 (pTop.yx, vec2 (.75));\n\n    float hexBottom = sdHexPrism (pBottom + vec3 (.0, .0, -3.), vec2 (.25, .75 + .2 * sin(cellBottom.y)*cos(cellBottom.x)));\n    float hexTop = sdHexPrism (pTop + vec3 (.0, .0, -3.), vec2 (.25, .75 + .2 * sin(cellTop.y)*cos(cellTop.x)));\n\n    return min (metaBalls, min (hexBottom, hexTop));\n}\n\nfloat march (in vec3 ro, in vec3 rd, out int iter) {\n    float t = .0;\n    float d = .0;\n    iter = 0;\n    for (int i = 0; i < 64; ++i) {\n        iter++;\n        vec3 p = ro + d * rd;\n        t = map (p);\n        if (abs (t) < .0001 * (1. + .125*t)) break;\n        d += t*.7;\n    }\n\n    return d;\n}\n\nvec3 normal (in vec3 p) {\n\tfloat d = map (p);\n    vec3 e = vec3 (.001, .0, .0);\n    return normalize (vec3 (map (p + e.xyy) - d,\n                            map (p + e.yxy) - d,\n                            map (p + e.yyx) - d));\n}\n\nfloat shadow (in vec3 p, in vec3 lPos) {\n    float lDist = distance (p, lPos);\n    vec3 lDir = normalize (lPos - p);\n    int dummy = 0;\n    float dist = march (p, lDir, dummy);\n    return dist < lDist ? .1 : 1.;\n}\n\nvec3 shade (in vec3 ro, in vec3 rd, in float d) {\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p);\n\n    // \"material\" hard-coded for the moment\n    float mask = smoothstep (1., .05, 30.*cos (40.*p.y)+sin (40.*p.x)+ cos (40.*p.z));\n    vec3 albedo = mix (vec3 (.5), vec3 (.2), mask);\n    float metallic = .5;\n    float roughness = mix (.9, .1, mask);\n    float ao = 1.;\n\n    // lights hard-coded as well atm\n    vec3 lightColors[2];\n    lightColors[0] = vec3 (.7, .8, .9)*4.;\n    lightColors[1] = vec3 (.9, .8, .7)*4.;\n\n    vec3 lightPositions[2];\n    lightPositions[0] = vec3 (-1.5, 1.0, -3.);\n    lightPositions[1] = vec3 (2., -.5, 3.);\n\n\tvec3 N = normalize (nor);\n    vec3 V = -rd;\n\n    vec3 F0 = vec3 (0.04); \n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3(.0);\n\t           \n    // reflectance equation\n    vec3 Lo = vec3 (.0);\n    for(int i = 0; i < 2; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - p);\n        vec3 H = normalize(V + L);\n        float distance    = length(lightPositions[i] - p);\n        float attenuation = 20. / (distance * distance);\n        vec3 radiance     = lightColors[i] * attenuation;\n        \n        // cook-torrance brdf\n        float aDirect = pow (roughness + 1., 2.);\n        float aIBL =  roughness * roughness;\n        float NDF = distriGGX(N, H, roughness);        \n        float G   = geomSmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0, roughness);       \n        \n        vec3 kS = F;\n        kD = vec3(1.) - kS;\n        kD *= 1. - metallic;\t  \n        \n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = nominator / max(denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL; \n\t    Lo *= shadow (p + .02*N, L);\n    }\n\n    vec3 irradiance = texture (iChannel1, N).rgb;\n    vec3 diffuse    = irradiance * albedo;\n    vec3 ambient    = (kD * diffuse) * ao;\n\n    return 3.*ambient + Lo;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom) {\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    worldUp.xy *= r2d (70.*sin (.5+iTime));\n    vec3 camRight = normalize (cross (worldUp, camForward));\n    vec3 camUp = normalize (cross (camForward, camRight));\n    vec3 camCenter = ro + camForward * zoom;\n    \n    return normalize (camCenter + uv.x * camRight + uv.y * camUp - ro);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvRaw = uv;\n    uv = uv *2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // set up \"camera\", view origin (ro) and view direction (rd)\n    float angle = radians (300. + 55. * iTime);\n    float dist = 3. + cos (1.5*iTime);\n    vec3 ro = vec3 (dist * cos (angle), .0, dist * sin (angle));\n    vec3 aim = vec3 (.0);\n    float zoom = 2.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    int iter = 0;\n    float d = march (ro, rd, iter);\n    float fog = 1. / (1. + d*d*.05);\n    vec3 p = ro + d * rd;\n    \n    vec3 n = normal (p);\n    vec3 col = shade (ro, rd, d);\n    col *= fog;\n    col = mix (col, vec3 (.95, .85, .7), pow (1. - 1. / d, 17.));\n\n    col = col / (.5 + col);\n    col = .2*col + .8*sqrt (col);\n    col *= .3 + .7 * pow (16. * uvRaw.x * uvRaw.y * (1. - uvRaw.x) * (1. - uvRaw.y), .2);\n\n\tfragColor = vec4 (col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}