{
    "Shader": {
        "info": {
            "date": "1653679276",
            "description": "A bit messy and overcomplicated,  I think will be very useful for pixel art detailing + outlines",
            "flags": 48,
            "hasliked": 0,
            "id": "fs3yRj",
            "likes": 4,
            "name": "Pixel Plotter 2",
            "published": 3,
            "tags": [
                "feedback",
                "cellularautomata"
            ],
            "usePreview": 1,
            "username": "SnoopethDuckDuck",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nvec3 pal(float t, vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zm = 0.225; \n    vec2 res = floor(iResolution.xy);    \n   \n    vec2 f = fragCoord;//mod(fragCoord, res);\n    \n    vec3 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0).rgb;\n    vec2 f2 = vec2(res.x-f.x, f.y);\n    vec3 col2 = texelFetch( iChannel0, ivec2(zm * f2 + 0.5 * (1.-zm) * res), 0).rgb;\n    \n    col = max(col, col2);\n\n    if (col.b == 1. && col.g == 0.)\n        col = vec3(0,0,1);\n    else if (col.g == 1.)\n        col = vec3(1);\n   // col.b = 0.;\n   // if (col.b == 1.)\n    //    col = vec3(0.25);\n    \n    col = 1. - col;\n    vec3 pcol = pal(1.25 + 0.75 * uv.y, 0.5 * vec3(2,1,3)/3.);\n    col = mix(col, pcol, 0.25);\n    \n    fragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat gs(ivec2 px) {\n    float b = cell(px - ivec2(0,1)).g;\n    float t = cell(px + ivec2(0,1)).g;\n    float l = cell(px - ivec2(1,0)).g;\n    float r = cell(px + ivec2(1,0)).g;   \n    float bl = cell(px + ivec2(-1,-1)).g;\n    float br = cell(px + ivec2(1, -1)).g;\n    float tl = cell(px + ivec2(-1, 1)).g;\n    float tr = cell(px + ivec2(1,  1)).g; \n    return b + t + l + r + bl + br + tl + tr;\n}\n\n//get rand\nfloat gr(vec2 f) {\n    ivec2 g = ivec2(f + vec2(100.,151.) * iTime * 60.) & 1023;\n    return texelFetch(iChannel2, g, 0).r;\n}\n\n//check rand (others)\nbool cr(vec2 f) {\n    float v = gr(f+vec2(1,1)) + \n              gr(f+vec2(0,1)) + \n              gr(f+vec2(-1,1)) + \n              gr(f+vec2(-1,0)) + \n              gr(f+vec2(-1,-1)) + \n              gr(f+vec2(0,-1)) + \n              gr(f+vec2(1,-1)) + \n              gr(f+vec2(1,0)) + \n              gr(f+vec2(2,0)) + \n              gr(f+vec2(-2,0)) + \n              gr(f+vec2(0,2)) + \n              gr(f+vec2(0,-2));\n    return v <= 5.;\n}\n\n#define w 40.\n#define h 40.\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    col = vec4(0);\n\n    ivec2 px = ivec2(f);\n    int frame = iFrame % 240;\n    \n    ivec2 g = ivec2(f - vec2(cos(0.1 * iTime),sin(iTime)) * 512.) & 1023;\n    float rand = texelFetch(iChannel2, g, 0).r;\n    \n    if (frame == 0 || key_down(KEY_RESET)) {      \n        return;\n    }\n           \n    // Center cell\n    col = cell(px);\n    \n    // Neighbour cells\n    float b = cell(px - ivec2(0,1)).g;\n    float t = cell(px + ivec2(0,1)).g;\n    float l = cell(px - ivec2(1,0)).g;\n    float r = cell(px + ivec2(1,0)).g;   \n    float bl = cell(px + ivec2(-1,-1)).g;\n    float br = cell(px + ivec2(1, -1)).g;\n    float tl = cell(px + ivec2(-1, 1)).g;\n    float tr = cell(px + ivec2(1,  1)).g;   \n    \n    float bb = cell(px - ivec2(0,2)).g;\n    float tt = cell(px + ivec2(0,2)).g;\n    float ll = cell(px - ivec2(2,0)).g;\n    float rr = cell(px + ivec2(2,0)).g;   \n    \n    float ttl = cell(px + ivec2(-1, 2)).g;\n    float ttr = cell(px + ivec2(1,  2)).g;\n    float bbl = cell(px + ivec2(-1,-2)).g;\n    float bbr = cell(px + ivec2(1, -2)).g;       \n    float tll = cell(px + ivec2(-2, 1)).g;\n    float trr = cell(px + ivec2(2,  1)).g;\n    float bll = cell(px + ivec2(-2,-1)).g;\n    float brr = cell(px + ivec2(2, -1)).g;\n    \n    float ttll = cell(px + ivec2(-2, 2)).g;\n    float ttrr = cell(px + ivec2(2,  2)).g;\n    float bbll = cell(px + ivec2(-2,-2)).g;\n    float bbrr = cell(px + ivec2(2, -2)).g;\n    \n    float sum = b + t + l + r;\n    float diag = bl + br + tl + tr;\n    float dif = abs(b-t) * abs(l-r);\n \n    float th = 0.9;\n    \n    vec2 res = floor(0.5 * iResolution.xy);\n    \n   \n    g = ivec2(f - vec2(cos(0.5 * iTime),sin(0.1 * iTime)) * 512.) & 1023;\n    float rand2 = texelFetch(iChannel2, g, 0).r;\n    bool rnd = 0.9 < rand2;\n    \n    bool dt = f.y <= res.y + h || rnd;\n    bool db = f.y >= res.y - h || rnd;\n    bool dr = f.x <= res.x + w || rnd;\n   \n    //f.x < res.x + w && f.y < res.y + h && \n    if (frame < 180) {\n    if (sum + diag == 1. && rand >= th && f.x > res.x) {\n        if ((db&&     t ==1. && gs(px + ivec2(0,  1)) == 1. && (ttl==1. || tt==1.   || ttr==1.)) ||\n            (dt&&     b ==1. && gs(px - ivec2(0,  1)) == 1. && (bbl==1. || bb==1.   || bbr==1.)) ||\n            (dr&&     l ==1. && gs(px - ivec2(1,  0)) == 1. && (bll==1. || ll==1.   || tll==1.)) ||\n            (         r ==1. && gs(px + ivec2(1,  0)) == 1. && (brr==1. || rr==1.   || trr==1.)) ||\n            (db&&dr&& tl==1. && gs(px + ivec2(-1, 1)) == 1. && (tll==1. || ttll==1. || ttl==1.)) ||\n            (db&&     tr==1. && gs(px + ivec2(1,  1)) == 1. && (trr==1. || ttrr==1. || ttr==1.)) ||\n            (dt&&dr&& bl==1. && gs(px + ivec2(-1,-1)) == 1. && (bll==1. || bbll==1. || bbl==1.)) ||\n            (dt&&     br==1. && gs(px + ivec2(1, -1)) == 1. && (brr==1. || bbrr==1. || bbr==1.)) ) {\n            col.g = 1.;\n        } \n        //else if (f.x < res.x + w && f.y >= res.y + h && \n    }\n    if (dif == 1.)// && sum + diag == 1.)\n        col.g = 0.;\n    }\n    if (frame == 180) {\n        if (col.g == 0. && sum == 2. || sum == 1.)\n            col.b = 1.;\n    }\n        \n    vec2 v2 = abs(f - vec2(5,0)-res-0.5);\n    if (v2.x < 2. && v2.y < 1.)\n        col.g = 1.;   \n    \n    vec2 v = abs(f -res-0.5);\n    if (v.x < w && v.y < h)\n        col.r = 1.;\n       \n   //rr col = vec4(step(0.99, rand)) * 10.;\n}\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}