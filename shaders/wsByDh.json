{
    "Shader": {
        "info": {
            "date": "1586529714",
            "description": "Cremona method of epicycloid generation. https://en.wikipedia.org/wiki/Cardioid#Cardioid_as_envelope_of_a_pencil_of_lines",
            "flags": 0,
            "hasliked": 0,
            "id": "wsByDh",
            "likes": 2,
            "name": "Epicycloids - Cremona method",
            "published": 3,
            "tags": [
                "lines",
                "epicycloid"
            ],
            "usePreview": 0,
            "username": "andretugan",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "// Author: https://www.shadertoy.com/user/andretugan\n// Creative Commons Attribution-NonCommercial 3.0 Unported License\n// https://creativecommons.org/licenses/by-nc/3.0\n\n#define NUM_CHORDS 128\n\n#define M_PI 3.14159265358\n#define M_2_PI (2. * 3.14159265358)\n\n#define FADE_INNER_RADIUS 0.8\n#define FADE_OUTER_RADIUS 1.1\n#define LINE_WIDTH 4.\n\n// Function from Inigo Quilez\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;                   \n    float uv2 = dot(uv, uv);        \n    if (uv2 > FADE_OUTER_RADIUS * FADE_OUTER_RADIUS) { \n    \tfragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n               \n    float multiplier = 1.99 + 5. * (.5 - .5 * cos(iTime * 0.03));\n    float start = multiplier * M_PI * 0.25;\n    float val = 0.;\n\n    for (int i = 0; i < NUM_CHORDS; ++i) {\n        float angle1 = start + M_2_PI / float(NUM_CHORDS) * float(i);\n        float angle2 = multiplier * angle1;\n        vec2 point1 = vec2(cos(angle1), sin(angle1));\t                       \n        vec2 point2 = vec2(cos(angle2), sin(angle2));\n\n        vec2 diff = point2 - point1;\n        vec2 perp = point1 + (dot(uv - point1, diff) / dot(diff, diff)) * diff - uv;\n        float dist2 = dot(perp, perp);\n        \n        float line_width = LINE_WIDTH / iResolution.y;                                        \n    \tfloat add_val = smoothstep(line_width * line_width, line_width * line_width * 0.5, dist2);                                                 \n        add_val *= smoothstep(FADE_OUTER_RADIUS * FADE_OUTER_RADIUS, FADE_INNER_RADIUS * FADE_INNER_RADIUS, uv2);        \n        val += add_val;\n    }\n    \n    val *= 20. / float(NUM_CHORDS);\n    val = pow(val, 0.5);\n    \n    float hue = sin(iTime * 0.05 + uv2 * 0.3);                                  \n    fragColor = vec4(hsv2rgb(vec3(hue, 1., val)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}