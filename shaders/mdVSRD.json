{
    "Shader": {
        "info": {
            "date": "1680886400",
            "description": "Creepy :D\nInfinite resource : https://twitter.com/SpaceLiminalBot",
            "flags": 40,
            "hasliked": 0,
            "id": "mdVSRD",
            "likes": 27,
            "name": "Backrooms Level 4242",
            "published": 3,
            "tags": [
                "backrooms"
            ],
            "usePreview": 0,
            "username": "cedricl",
            "viewed": 662
        },
        "renderpass": [
            {
                "code": "vec2 GetUV(vec2 uv) \n{ \n    return vec2(uv.x + abs(sin(113.*iTime))*.0005/(1.-uv.y), floor(uv.y*ScanH) * ScanH_Inv); \n}\n\nfloat Rnd(float In) { return fract(sin(In * 37549.54368976) + sin(In * 375.4567)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x = (uv.x-0.5) / cos(Roundness*abs(uv.y - .5)) + 0.5;\n    uv.y = (uv.y-0.5) / cos(Roundness*abs(uv.x - .5)) + 0.5;\n    uv.x += HNOISE_AMOUNT * Rnd(iTime + 0.1*uv.y) * abs(uv.x - .5);\n    \n    fragColor = texture(iChannel0, GetUV(uv));\n    \n    float band = smoothstep(.0, .05, fract(uv.y * .1 + .2*iTime + .1*Rnd(iTime)));    \n    fragColor.xyz *= mix(vec3(1., .8, .75), vec3(1.), band);\n   \n    float band2 = 1. - smoothstep(.0, .01, fract(uv.y * .09 + .1*iTime + .1*Rnd(iTime)));\n    fragColor.xyz += .5 * band2 * vec3(.4, .5, 1.3) * rand2(GetUV(vec2(0.01*uv.x, iTime + floor(uv.y*ScanH))));\n    \n    float band3 = 1. - smoothstep(.0, .2, fract(uv.y * .23 + .23*iTime + .4*Rnd(iTime)));\n    fragColor.xyz += .6 * band3 * vec3(1., .5, 1.2) * smoothstep(.95, 1., rand2(GetUV(vec2(.01*uv.x, iTime + floor(uv.y*ScanH))))\n                                                        - .09*rand2(GetUV(vec2(.5*uv.x, iTime + floor(uv.y*ScanH))))       \n                                                    );\n\n    fragColor += CHROMA_AMOUNT * vec4(1., 0., 0.5, 0.) * texture(iChannel0, GetUV(uv + vec2(CHROMA_DIST, 0.)));\n    fragColor += CHROMA_AMOUNT * vec4(0., 1., 0.5, 0.) * texture(iChannel0, GetUV(uv - vec2(CHROMA_DIST, 0.)));\n    fragColor /= 1. + 2.*CHROMA_AMOUNT;\n\n    fragColor += GHOST_AMOUNT * (0.3-texture(iChannel0, GetUV(uv - vec2(GHOST_DIST, 0.))));\n    \n    vec4 Coeff = vec4(2. - (fragColor.x + fragColor.y + fragColor.z) * 0.33);\n    Coeff *= mix(pow(abs(sin(uv.y*ScanH*3.14159)), 2.6), 1., ScanDep);\n    vec4 Mask = vec4(0.);\n    float P = (uv.x*GridW + floor(uv.y * GridH)) * 3.14159;\n    Mask.x = mix(pow(max(0., sin(P)), GridPow), 1.15*Gain, GridDep);\n    Mask.y = mix(pow(max(0., sin(P+2.2)), GridPow), 1.25*Gain, GridDep);\n    Mask.z = mix(pow(max(0., sin(P+4.4)), GridPow), 1.25*Gain, GridDep);\n    Coeff *= Mask;\n    Coeff *= pow(1. - length(uv-vec2(0.5)), Vignetting);\n    \n    fragColor *= mix(vec4(1.), Coeff, GLOBALMIX);\n    fragColor *= smoothstep(0.0, BorderSharpness, 0.5 - abs(uv.x - 0.5));\n    fragColor *= smoothstep(0.0, BorderSharpness, 0.5 - abs(uv.y - 0.5));\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ScanH 240.\n#define ScanH_Inv (1./ScanH)\n#define ScanDep 0.7\n#define GridW 460.\n#define GridH 280.\n#define GridPow 2.1\n#define GridDep 0.8\n#define Roundness 0.6\n#define Gain 1.55\n#define Vignetting 1.1\n#define BorderSharpness .01\n\n#define BLUR_MIX 0.8\n#define BLUR_RADIUS 40.\n#define BLUR_CURVE_POW 0.45\n#define BLUR_SAMPLES 8.\n\n#define PERSISTENCE 0.2\n\n#define CHROMA_DIST 0.0015\n#define CHROMA_AMOUNT .7\n\n#define GHOST_AMOUNT 0.2\n#define GHOST_DIST 0.004\n\n#define HNOISE_AMOUNT 0.006\n\n#define GLOBALMIX 0.9\n\nfloat rand2(vec2 co) { return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 blurH(vec2 uv, float r, float sampleNum )\n{\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n\n    float sampleStep = r / sampleNum;\n\n    float count = 0.0;\n\n    for(float x = -r; x < r; x += sampleStep)\n    {\n        float weight = pow(r - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(x * unit.x, uv.y * unit.y) ) * weight;\n        count += weight;\n    }\n\n    return col / count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(blurH(uv, BLUR_RADIUS, BLUR_SAMPLES ), texture(iChannel0, uv), BLUR_MIX);\n    fragColor = mix(fragColor, texture(iChannel1, uv), PERSISTENCE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 blurH(vec2 uv, float r, float sampleNum )\n{\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n\n    float sampleStep = r / sampleNum;\n\n    float count = 0.0;\n\n    for(float x = -r; x < r; x += sampleStep)\n    {\n        float weight = pow(r - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(uv.x * unit.x, x * unit.y) ) * weight;\n        count += weight;\n    }\n\n    return col / count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(blurH(uv, BLUR_RADIUS, BLUR_SAMPLES ), texture(iChannel0, uv), BLUR_MIX);\n    fragColor = mix(fragColor, texture(iChannel1, uv), PERSISTENCE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define FAR 400.\n#define INVFOV .35\n#define REP 3.5\n#define REP2 (REP*.5)\n#define K 3.\n\nfloat noise(vec2 co)\n{\n\tvec2 P = floor(co);\n\tvec2 t = fract(co);\n\tfloat l0 = mix(rand2(P-vec2(1,0)), rand2(P), smoothstep(0.,1.,t.x));\n\tfloat l1 = mix(rand2(P-vec2(1,1)), rand2(P-vec2(0,1)), smoothstep(0.,1.,t.x));\n\treturn mix(l1, l0, smoothstep(0.,1.,t.y));\n}\n\nfloat map(vec3 p)\n{\n    float cellrnd = noise(floor(p.xz / REP) - REP2);\n    p.xz = mod(p.xz, REP) - REP2;\n    \n    float cl = abs(p.y - .5);\n    float fl = abs(p.y + .5);\n    vec3 q = abs(p * vec3(1., .1, 1.)) - .55 * cellrnd;\n    float bx = length(max(q, .0)) + min(max(q.x, max(q.y, q.z)), .0);\n    return min(bx, min(cl, fl));\n}\n\nvec4 trace(vec3 o, vec3 rd)\n{\n    float t = 0.0;\n    for(int i = 0; i < 400; i++)\n    {\n        float d = map(o);\n        if(abs(d) < 0.001)\t\n            return vec4(o, t);\n        o += rd * d;\n        t += d;\n    }\n    return vec4(o, FAR);\n}\n\nvec3 N(vec3 p)\n{\n    const float e = 0.02;\n    return normalize(vec3(\n        map(vec3(p.x + e, p.y, p.z)) - map(vec3(p.x - e, p.y, p.z)),\n        map(vec3(p.x, p.y + e, p.z)) - map(vec3(p.x, p.y - e, p.z)),\n        map(vec3(p.x, p.y, p.z  + e)) - map(vec3(p.x, p.y, p.z - e))\n    ));\n}\n\nfloat turb(float t)\n{\n    return sin(1.7*t) + .39*sin(2.9*t) + .19*sin(7.9*t) + .071*sin(17.9*t);\n}\n\nfloat T(vec2 p, vec2 uv, float XMask)\n{\n    float trez = 240.;\n    float r = texture(iChannel0, (floor(.66*(uv)*trez)+p)/trez).r;\n    r *= step(.45, uv.y) * step(.46, 1.-uv.y);\n    r *= step(-1. + XMask, uv.x) * step(2. - XMask -.1, 1.-uv.x);\n    \n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord/iResolution.xy) - 0.5) * 2.;\n    uv.y *= iResolution.y/iResolution.x;\n\n    float STime = iTime * 0.1;\n    \n    vec3 o = vec3(.1*turb(STime*3.), 0. + .05*abs(sin(20.*STime)), STime*-8. + 1.6*turb(STime*1.07));\n    float LR = -.5+smoothstep(.35, .65, .5+.5*sin(STime*5.2)*sin(STime*1.23));\n    vec3 front = normalize(vec3((2.15 + .6*turb(STime*2.)) * LR, 0.15 * turb(STime*4.),-1.));\n    vec3 right = normalize(vec3(front.z, .05*turb(10.*STime), -front.x));\n    vec3 up = cross(front, right);\n    vec3 rd = normalize(front + uv.x*INVFOV*right + uv.y*INVFOV*up);\n    vec4 s = trace(o, rd);\n    \n    vec3 n = N(s.xyz);\n    if(dot(rd, n) > 0.)\n        n *= -1.;\n    \n    vec3 l = o + vec3(-.3, 0, -.3);\n    l.y = .445;\n    \n    vec3 color = vec3(0.);\n    float ldist = length(l-s.xyz);\n    if(trace(s.xyz+0.01*n, normalize(l-s.xyz)).a > ldist-0.01)\n    {\n        float aoe = .3;\n        float d = map(s.xyz + aoe * n);\n        float o = d / aoe;\n        \n        if(n.y < -.999)\n        {\n            float gran = 3.;\n            float grid = clamp(smoothstep(.46, .5, fract(gran*s.z)) * smoothstep(.54, .5, fract(gran*s.z)) + smoothstep(.46, .5, fract(gran*s.x)) * smoothstep(.54, .5, fract(gran*s.x)), 0., 1.);\n            vec3 Col = mix(25.3, 20., grid) * vec3(1., .8, .3);\n            color += Col * max(0., 1. / pow(ldist*15.25, 1.3));\n\n            float gran2 = .2;\n            float grid2 = clamp(smoothstep(.95, .92, fract(gran2*s.z)) * smoothstep(.98, .95, fract(gran2*s.z)) + smoothstep(.8, .77, fract(gran2*s.x)) * smoothstep(.83, .8, fract(gran2*s.x)), 0., 1.);\n            color = mix(color, vec3(1.), vec3(1.-grid2) / pow(ldist*.25, 1.1));            \n\n            color -= .1 * pow((1.-o), 4.);\n        }\n        else\n        {\n            vec3 Col = 2.2 * vec3(1., .8, .3);\n            if(n.y > .99)\n                Col = mix(.9, 1.2, smoothstep(.3, .8, noise(1.3*s.xz) + noise(2.3*s.xz))) * mix(.5, 1.2, noise(50.*s.xz) / ldist) * vec3(1., .65, .2);\n            color += Col * max(0., -dot(normalize(s.xyz - l), n)) / pow(ldist*0.25, 1.4) - .1 * pow((1.-o), 4.);\n        }\n        \n    }\n    \n    fragColor = vec4(clamp(color, 0., 1.),1.);\n    \n    float flash = step(.5, fract(iTime));\n    fragColor += T(vec2(6., 6.) * 16., uv, 0.) * flash;\n    fragColor += T(vec2(8., 6.) * 16., uv, .1) * flash;\n    fragColor += T(vec2(14.6, 5.1) * 16., uv, .2) * flash;\n    fragColor.xyz = mix(fragColor.xyz, vec3(2,0,0), T(vec2(9.6, 9.8) * 16., uv, .3));\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI2 6.2831\nvec2 mainSound( in int samp, float time )\n{\n    vec2 Out = vec2(0.0);\n    \n    for(int i = 0; i < 12; i++)\n    {\n        float HTime = .5*time - .137*float(i);\n        float wv1 = smoothstep(0.1, 0.21+0.1*sin(HTime), sin(PI2*(27.5 + 1.1137*float(i))*HTime));\n        float wv2 = smoothstep(0.15, 0.351+0.2*sin(HTime), sin(PI2*(35.0 + 1.5137*float(i))*HTime));\n        float wv3 = mix(wv1, wv2, 0.5+0.5*sin(0.3*HTime));\n        Out += 0.05*vec2( wv3 * cos(0.2 * HTime),  wv3 * sin(0.2 * HTime) ) / pow(float(i+1), 0.7);\n    }\n    \n    float t = fract(time * 1.1 + .3*sin(time) + .17*sin(time * 1.37));\n    float s = smoothstep(.1, .05, t) * smoothstep(.0, .05, t);\n    Out += .9 * vec2(sin(time * 240.)) * s;\n    \n    return Out * clamp(0.3*time, 0., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}