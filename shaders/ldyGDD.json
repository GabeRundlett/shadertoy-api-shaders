{
    "Shader": {
        "info": {
            "date": "1454487650",
            "description": "Cheap quick and dirty feedback and scope fun, hacked together from multiple shaders\n\nupdated with smoother falloff and feedback, feel free to put your own audio in channel0 in buf A",
            "flags": 96,
            "hasliked": 0,
            "id": "ldyGDD",
            "likes": 38,
            "name": "Scope Multipass Feedback",
            "published": 3,
            "tags": [
                "audio",
                "feedback",
                "scope",
                "multipass"
            ],
            "usePreview": 0,
            "username": "weyland",
            "viewed": 3674
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 color = vec3(0.0, 0.0, 0.0);\n\tfloat piikit  = texture(iChannel0, vec2(uv.x/10., 1.0)).r;\n\t\n\tfloat flash = texture(iChannel0, vec2(0.12, 0.0)).r;\n\tfloat glow = (0.01 + flash*0.0012)/abs(piikit - uv.y);\n\tcolor = vec3(0.0, glow*0.5, glow);\n\tcolor += vec3(sqrt(glow*0.12));\n    fragColor = vec4(color,0.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 2844,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/platform/buz-ludzha-vibradreams-boiler-room-debuts"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define time iTime\n\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvDist = rot((fragCoord / iResolution.xy-(0.005*sin(time/7.)))/1.005+sin(time/6.)/40.,0.015*sin(time/5.));\n    if(iFrame == 0) {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    } else {\n        vec3 prev = texture(iChannel1, uvDist).rgb;\n        vec4 acol = texture(iChannel0, uv);\n        float alpha = acol.a;\n        vec3 bias = vec3(1.0,0.979,0.999);\n        fragColor = vec4(acol.rgb + prev*(1.0-alpha)*bias, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}