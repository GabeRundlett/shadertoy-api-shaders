{
    "Shader": {
        "info": {
            "date": "1627495644",
            "description": "Quicky ",
            "flags": 0,
            "hasliked": 0,
            "id": "ftBSDh",
            "likes": 5,
            "name": "大龙猫 - Quicky#057",
            "published": 3,
            "tags": [
                "quicky"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\n#define timer(a,b,c) (mix(a,b,(asin(sin(c*fGlobalTime))) + 3.1415/2.)/3.1415 )\n#define timer1 timer(0.5,1.,.5)\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n// No big diff I guess deep investigation is needed to determine the faster version\nfloat sminEvil(float a,float b,float k){ float h=max(0.,k-abs(a-b));return min(a,b)-0.25*h*h/k;}\nfloat sminMercury(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat diam(vec3 p,float s){\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*sqrt(1./3.);\n  }\nfloat sqq(vec3 p){\n  float g = 1.;\n  vec4 pp = vec4(p,1.);  \n  for(float i=0.;i<=4.;i++){\n         pp.xz = abs(pp.xz)-.55;\n         pp*=1.2;\n         pp.zy *=rot(-.33*i);\n         g = min(g,clamp(sin(pp.x*.5)*sin(pp.y*.66)+cos(pp.z*2.),-.5,.5)/pp.a);\n        \n      }\n  return min(length(p.xy)-.5,min(length(p.xz)-.5,length(p.yz)-.5))-g;\n  }\nvec2 sdf(vec3 p){\n  \n  p.yz =mix(p.yz,p.yz*rot(atan(inversesqrt(2.))),timer1);\n  p.xz =mix(p.xz,p.xz*rot(3.1415/4.),timer1);\n  \n  vec2 h;\n  float q = 1.;\n  for(float i=0.;i<=2.;i++){\n       p.xz = abs(p.xz)-2.5;\n       p.xz*=1.22;\n       q*=1.23;\n       p.x +=1.;\n       p.xy =p.x < p.y ? p.yx:p.xy;\n       p.xz*=rot(.785);\n    }\n  h.x = sqq(p);\n  h.x = sminEvil(h.x,diam(p,2.),.5+cos(p.y*10.))/(q*1.5);\n  h.y = 1.+cos(p.y*10.);\n   return h;\n }\n \n#define q(s) s*sdf(p+s).x\n vec2 e= vec2(-.003,.003);\n vec3 norm(vec3 p){return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \n\tvec3 col =vec3(0.);\n  vec3 ro = vec3(0.,0.,-5.+4.*sin(fGlobalTime));\n  vec3 rt = vec3(-1.,1.,0.);\n  vec3 z = normalize(rt-ro);\n  vec3 x = normalize(cross(z,vec3(0,-1.,0.)));\n  vec3 y = normalize(cross(z,x));\n  \n  vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.));\n\n  ro = mix(ro,vec3(uv*5.,-30.),timer1);\n\n  rd = mix(rd,vec3(0.,0.,1.),timer1);\n\n  vec3 light = vec3(1.,0.,-10.);\n  vec3 rp =ro;\n  vec3 acc = vec3(0.);\n  for(float i=0.;i<=128.;i++){\n      vec2 d = sdf(rp);\n    if(d.y < 1.){\n         acc+=vec3(.1,.7,.4)*max(0.,exp(10.*-abs(d.x)))/(60.+sin(rp.z*10.+fGlobalTime*10.)*30.);\n      d.x = max(.002,abs(d.x));\n      }    \n    rp+=d.x*rd;\n    \n    if(length(rp)>100.)break;\n      if(d.x<=0.001){\n          vec3 n = norm(rp);  \n          col = vec3(.6,.5,1.5)*sqrt(1.-i/128.)*max(0.,dot(normalize(light-rp),n));\n        break;\n      }\n    \n    \n  }\n  col +=acc;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}