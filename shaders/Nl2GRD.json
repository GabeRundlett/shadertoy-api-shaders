{
    "Shader": {
        "info": {
            "date": "1623528720",
            "description": "Inspired by SpaceEngine's New Volumetric Rings Beta. http://spaceengine.org/news/blog210611/",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl2GRD",
            "likes": 5,
            "name": "Asteroid Field Thingy",
            "published": 3,
            "tags": [
                "raymarching",
                "voronoi",
                "ray",
                "raymarch",
                "raymarched",
                "worley",
                "raymarcher",
                "march",
                "asteroid",
                "asteroid"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "// ####### Asteroid Field Thingy #######\n// Made by Jacob Bingham (Zi7ar21) on June 11th, 2021\n// Last Updated on June 12th, 2021 at 13:00 Mountain Standard Time\n\n// If you found this anywhere except Shadertoy, the original and possibly updated version can be found at:\n// https://www.shadertoy.com/view/Nl2GRD\n\n/*\nI was inspired by SpaceEngine's new Volumetric Rings beta. I have no clue how they work, but here is something I think may be similar.\nhttps://spaceengine.org/news/blog210611/\n*/\n\n// \"License\":\n// You are free to use this code, even commercially, as long as you keep comments in the source with credits to snippets that aren't mine.\n// e.g. Dave_Hoskins' Hash33 Hash without Sine Function: https://www.shadertoy.com/view/4djSRW\n// Of course, you must also still respect whatever licenses they use. We are programmers, not lawyers! :)\n\n// Check out my friends!\n// michael0884\n// https://www.shadertoy.com/user/michael0884\n// loicvdb\n// https://www.shadertoy.com/user/loicvdb\n// Dumb_Psycho\n// https://www.shadertoy.com/user/Dumb_Psycho\n\n// ##### Constants #####\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.1415926535897932384626433832795028841971693993751058209749445923078164\n\n// Traditional Input Names\n#define resolution iResolution\n//#define time iTime\n#define time (float(iFrame)/60.0)\n\n// ##### Parameters #####\n\n// Image Gamma\n#define gamma 2.2\n\n// Camera Field of View\n#define camfov 1.0\n\n// Distance Considered a Collision\n#define hitDist 1E-3\n\n// Maximum Distance before counting a Ray-Marched Ray as having Escaped\n#define maxDist 32.0\n\n// Maximum Ray-Marching Steps\n#define maxStep 1024\n\n// ##### Structs #####\n\n// Material Datatype\nstruct material {\n    vec3 albedo;\n    vec3 normal;\n};\n\n// ##### Simple Functions #####\n\n// Dot Product on a Vector (for distance estimator length() performance improvements)\n// e.g. dot(spherePosition-pos, spherePosition-pos) can be done better with dotp(spherePosition-pos)\n// And once you have compared all of these you can use sqrt() to get the length\nfloat dotp(vec3 vec)\n{\n    return dot(vec, vec);\n}\n\n// ##### Color Management #####\n\n// HDR Tonemapping Function\nvec3 HDRtoLDR(vec3 color)\n{\n    // Values below 0.0 are problematic, they must be exterminated!\n    color = max(color, 0.0);\n\n    // Sh*tty Color Space\n    color = vec3(\n    color.r*1.00+color.g*0.05+color.b*0.03,\n    color.r*0.05+color.g*1.00+color.b*0.05,\n    color.r*0.03+color.g*0.05+color.b*1.00);\n\n    // Gamma Correction\n    color = pow(color/(color+1.0), vec3(1.0/gamma));\n\n    // Return the\n    return clamp(color, 0.0, 1.0);\n}\n\n// ##### Hashes and Random Number Generation #####\n\n// Hash33 Hash without Sine: https://www.shadertoy.com/view/4djSRW\nvec3 hash(vec3 p3)\n{\n    p3 = fract(p3*vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yxx)*p3.zyx);\n}\n\n// ##### Rendering #####\n\n// Distance Estimator\n// Basically Worley Noise\nfloat DE(vec3 pos)\n{\n    // Set-Up Variables\n    float minDist = 1000.0;\n\n    // Cell Loop (3*3*3)\n    for(int x = -1; x <= 1; x++) {\n    for(int y = -1; y <= 1; y++) {\n    for(int z = -1; z <= 1; z++) {\n        vec3 pointPosition = vec3(x, y, z)+hash(floor(vec3(x, y, z)+pos));\n        minDist = min(dotp(fract(pos)-pointPosition), minDist);\n    }\n    }\n    }\n\n    // Return the Distance Estimate\n    return sqrt(minDist)-0.1;\n}\n\n// Tetrahedron Numerical Normals\nvec3 getNormal(vec3 pos)\n{\n    const vec2 k = vec2(-1.0, 1.0);\n    return normalize(\n    k.xxx*DE(pos+k.xxx*hitDist)+\n    k.xyy*DE(pos+k.xyy*hitDist)+\n    k.yxy*DE(pos+k.yxy*hitDist)+\n    k.yyx*DE(pos+k.yyx*hitDist));\n}\n\n// Distance Estimator Ray-Marching\nfloat raycastDE(in vec3 ro, in vec3 rd, out material materialProperties)\n{\n    // Set-Up Variables\n    float t = 0.0;\n\n    // Ray-Marching\n    for(int i = 0; i < maxStep; i++)\n    {\n        // Check if the Ray Escaped\n        if(t > maxDist)\n        {\n            break;\n        }\n\n        // Compute Distance Estimate\n        float td = DE(ro+rd*t);\n\n        // Check for a Collision\n        if(td < hitDist*t)\n        {\n            // Compute Normal\n            materialProperties.normal = getNormal(ro+rd*t);\n\n            // Return Distance\n            return t;\n        }\n\n        // March the Ray\n        t += td;\n    }\n\n    // The Ray Never hit Anything\n    return -1.0;\n}\n\n// Scene Intersection Function\nfloat intersect(in vec3 ro, in vec3 rd, out material materialProperties)\n{\n    //float t0 = raycastDE(ro, rd, materialProperties);\n    return raycastDE(ro, rd, materialProperties);\n}\n\n// Shading\nvec3 radiance(vec3 ro, vec3 rd)\n{\n    // Set-Up Variables\n    material materialProperties;\n\n    // Compute Intersection\n    float t = intersect(ro, rd, materialProperties);\n\n    // Basically Fog\n    materialProperties.albedo = vec3(clamp(1.0-(t/maxDist), 0.0, 1.0));\n\n    // Return Sky Color\n    if(t < 0.0)\n    {\n        // Sky Color (Black Void)\n        return vec3(0.0);\n    }\n\n    // Light Source Direction\n    vec3 lightDirection = normalize(vec3(1.0, 1.0, -1.0));\n\n    // Compute Shading\n    float lighting0 = max(dot(materialProperties.normal, lightDirection), 0.0)*0.8;\n    float lighting1 = max(dot(materialProperties.normal,-lightDirection), 0.0)*0.1;\n\n    // Return Shaded Result\n    return materialProperties.albedo*(lighting0+lighting1+0.2);\n}\n\n// Render and Output the Frame\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen UV Coordinates\n    vec2 uv = 2.0*(gl_FragCoord.xy-0.5*resolution.xy)/max(resolution.x, resolution.y);\n\n    // Set-Up Variables\n    vec3 ro = vec3(0.0, 0.0, time);\n    mat3 rotmat = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    vec3 rd = normalize(camfov*(uv.x*rotmat[0]+uv.y*rotmat[1])+rotmat[2]);\n\n    // Render the Frame\n    vec3 color = radiance(ro, rd);\n\n    // HDR Tonemapping\n    color = HDRtoLDR(color);\n\n    // Output the Rendered Frame\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}