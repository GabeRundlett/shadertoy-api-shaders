{
    "Shader": {
        "info": {
            "date": "1507142114",
            "description": "copy of shaus shader, but it goes in random directions",
            "flags": 0,
            "hasliked": 0,
            "id": "llSyRR",
            "likes": 15,
            "name": "truchet marbles copy",
            "published": 3,
            "tags": [
                "copy",
                "cubictruchet"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 897
        },
        "renderpass": [
            {
                "code": "#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat torus(vec3 p, vec2 r) {\n    return length(vec2(abs(abs(length(p.xy)-r.x)-0.08),abs(p.z)-0.08))-r.y;\n}\n\nfloat square(vec3 p, vec2 r) {\n    return length(vec2(abs(max(abs(p.x),abs(p.y))-r.x),p.z))-r.y;\n}\n\nfloat map(vec3 p) {\n    \n    vec3 p2 = mod(p,2.0)-1.0;\n    vec3 floorpos = floor(p*0.5);\n    float len = 1e10;\n    \n    vec3 flipping = floor(hash33(floorpos)+0.5)*2.0-1.0;\n    flipping.z = 1.0;//mod(dot(floor(floorpos.xy),vec2(1)),2.0)*2.0-1.0;\n    //flipping.z = mod(floor(floorpos.x/2.0),2.0)*2.0-1.0;\n    //flipping.z = mod(floor(floorpos.y/2.0),2.0)*2.0-1.0;\n    \n    vec3 p3 = p2*flipping;\n    mat3 truchet = mat3(\n        vec3(p3.xy+vec2(-1, 1),p3.z),\n        vec3(p3.zx+vec2( 1, 1),p3.y),\n        vec3(p3.yz+vec2(-1,-1),p3.x)\n    );\n    \n    vec3 lens = vec3(\n        torus(truchet[0],vec2(1.0,0.02)),\n        torus(truchet[1],vec2(1.0,0.02)),\n        torus(truchet[2],vec2(1.0,0.02))\n    );\n    \n    vec3 mask = vec3(lessThanEqual(lens,min(lens.yzx,lens.zxy)));\n    \n    int num = int(dot(mask,vec3(0,1,2)));\n    \n    vec3 p4 = truchet[num];\n    \n    float dir = mod(dot(floorpos.xy,vec2(1)),2.0)*2.0-1.0;\n    \n    p4 = vec3(mod(dir*(atan(p4.x,p4.y)/6.28*6.0)+iTime*0.5,1.0/6.0)-0.5/6.0,\n              (length(p4.xy)-1.0),p4.z);\n    \n    return min(dot(lens,mask),length(p4)-0.1);\n}\n\nvec3 findnormal(vec3 p, float len) {\n    vec2 eps = vec2(0.01,0.0);\n    \n    return normalize(vec3(\n        len-map(p-eps.xyy),\n        len-map(p-eps.yxy),\n        len-map(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(iTime*0.5)+vec3(0.001,0.002,0.003);\n    vec3 rd = normalize(vec3(uv,1.0));\n    bool hit = false;\n    float dist = 0.0;\n    float len;\n    for (int i = 0; i < 99; i++) {\n        len = map(ro);\n        ro += rd*len;\n        dist += len;\n        if (len < 0.001||dist>10.0) {\n            hit = len < 0.001;\n            break;\n        }\n    }\n    if (hit) {\n\t\tfragColor = vec4(findnormal(ro,len)*0.5+0.5,1.0);\n        fragColor /= (dist*dist*0.05+1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}