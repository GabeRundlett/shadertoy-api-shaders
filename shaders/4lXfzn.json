{
    "Shader": {
        "info": {
            "date": "1510700277",
            "description": "Left: bilinear.    Middle : MIPmap.     Right: aniso x16.\n\nline #10 is optional: uncomment if you prefer blur to aliasing at horizon.\nExplanations about aniso here: [url]https://www.shadertoy.com/view/ltXfRr[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "4lXfzn",
            "likes": 27,
            "name": "Antialiasing Demo 2 :-D",
            "published": 3,
            "tags": [
                "aliasing",
                "filtering",
                "anisotropic",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 5491
        },
        "renderpass": [
            {
                "code": "vec2 R; // see more about aniso x16 here: https://www.shadertoy.com/view/ltXfRr\n\nvec4 textureAniso(sampler2D T, vec2 p) {\n    mat2 J = inverse(mat2(dFdx(p),dFdy(p)));       // dFdxy: pixel footprint in texture space\n    J = transpose(J)*J;                            // quadratic form\n    float d = determinant(J), t = J[0][0]+J[1][1], // find ellipse: eigenvalues, max eigenvector\n          D = sqrt(abs(t*t-4.*d)),                 // abs() fix a bug: in weird view angles 0 can be slightly negative\n          V = (t-D)/2., v = (t+D)/2.,                     // eigenvalues. ( ATTENTION: not sorted )\n          M = 1./sqrt(V), m = 1./sqrt(v), l =log2(m*R.y); // = 1./radii^2\n  //if (M/m>16.) l = log2(M/16.*R.y);                     // optional\n    vec2 A = M * normalize(vec2( -J[0][1] , J[0][0]-V )); // max eigenvector = main axis\n    vec4 O = vec4(0);\n    for (float i = -7.5; i<8.; i++)                       // sample x16 along main axis at LOD min-radius\n        O += textureLod(iChannel0, p+(i/16.)*A, l);\n    return O/16.;\n}\n\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    vec3 r = vec3( 2.* U / R - 1. , 1 );                         // ray\n    vec2 p = - r.xz / r.y + .1 * iTime;                          // intersection on floor\n\n    p /= 4.;  // because texture contains big tiles\n    O =   r.y > 0.  ? vec4(.5, .7, .9, 1)                        // background\n        : r.x < -.4 ? textureLod(iChannel0, p, 0.)               // bilinear\n        : r.x <  .25 ? texture(iChannel0, p)                     // MIPmap\n                 // : textureGrad(iChannel0, p,dFdx(p),dFdy(p)); // (equivalent)\n                    : textureAniso(iChannel0, p);                // anisotropic\n    O = pow(O,vec4(1./2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{   ivec2 U = ivec2( u / iResolution.xy * 8. ) % 2;\n    O = vec4( U.x == U.y );\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}