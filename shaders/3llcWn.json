{
    "Shader": {
        "info": {
            "date": "1591825799",
            "description": "euclidean version: [url]https://shadertoy.com/view/WdjfDK[/url]\ncomment out the #define AA to disable anti-aliasing (for performance)",
            "flags": 0,
            "hasliked": 0,
            "id": "3llcWn",
            "likes": 16,
            "name": "Overlapping Voronoi - Squares",
            "published": 3,
            "tags": [
                "voronoi",
                "worley",
                "manhattan",
                "layers",
                "greeble",
                "chebychev",
                "sorted",
                "overlapping"
            ],
            "usePreview": 0,
            "username": "izutionix",
            "viewed": 572
        },
        "renderpass": [
            {
                "code": "#define AA\n\n#define t iTime + 5.\n#define screen(a, b) a + b - a*b\n#define s(t, b, g) smoothstep(t+b*t, t-b*t, abs(g-.5) )\n\n//hash functions from https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n    p *= 733.424;\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 *= 733.424;\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\t\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec3 voronoi2d(vec2 p, float s, bool m) {\n    vec2 gv = fract(p)-.5;\n\tvec2 iv = floor(p);\n    vec2 id;\n    \n    vec2 o;\n    float res = 8.;\n    \n    for(int y=-1; y<=1; y++)\n\tfor(int x=-1; x<=1; x++)\n    {\n        o = vec2(x, y);\n\n        vec2 n = hash22(iv+o);\n        vec2 p = o+.5*sin(t*n);\n        vec2 a = gv-p;\n        a = abs(a);\n        \n        float d;\n        if(m)\n        \td = (a.x+a.y)/s; //manhattan\n        else\n        \td = max(a.x, a.y)/s; //chebychev\n\n        if(hash12(n)>.5 ? d<1. : 1.<res) {\n            res = d;\n            id = iv+p;\n        }\n    }\n    return vec3(res, id*float(res<1.) );\n}\n\nvec4 voronoi3d(vec3 p, float s, bool m) {\n    vec3 gv = fract(p)-.5;\n\tvec3 iv = floor(p);\n    vec3 id;\n    \n    vec3 o;\n    float res = 8.;\n    \n    for(int z=-1; z<=1; z++)\n    for(int y=-1; y<=1; y++)\n\tfor(int x=-1; x<=1; x++)\n    {\n        vec3 o = vec3(x, y, z);\n\n        vec3 n = hash33(iv+o);\n        vec3 p = o+.5*sin(t*n);\n\t\tvec3 a = gv-p;\n        a = abs(a);\n        \n        float d;\n        if(m)\n\t\t\td = (a.x+a.y+a.z)/s; //manhattan\n        else\n        \td = max(max(a.x, a.y), a.z)/s; //chebychev\n\n        if(hash13(n)>.5 ? d<1. : 1.<res) {\n            res = d;\n            id = iv+p;\n        }\n    }\n    return vec4(res, id*float(res<1.) );\n}\n\nfloat getCol(vec2 coord) {\n    vec2 R = iResolution.xy;\n\tvec2 uv1 = (coord-.5*R.xy)/R.y;\n    vec3 uv2 = vec3(coord/R.xy, R.x/R.y);\n\tuv1 *= 8.;\n    \n    float size = 1.;\n    bool method = uv2.x<.5;\n    \n    float v = voronoi2d(uv1, size, method).x;\n    \n    if(uv2.y>.5)\n    \tv = step(.9, v)*float(v<1.);\n    else\n    \tv = voronoi3d(vec3(uv1, 0), size, method).w*.5+.5;\n    \n    v = screen(v, s(.0025, \t\t .2, uv2.x ) );\n    v = screen(v, s(.0025*uv2.z, .2, uv2.y ) );\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 R = iResolution.xy;\n    \n    float v;\n    \n#ifdef AA\n    // AA from https://blog.demofox.org/2015/04/23/4-rook-antialiasing-rgss/\n\tconst float S = .125;\n    const float L = .375;\n    v  = getCol( fragCoord + vec2( S,-L) );\n    v += getCol( fragCoord + vec2( L, S) );\n    v += getCol( fragCoord + vec2(-S,-L) );\n    v += getCol( fragCoord + vec2(-L,-S) );\n    v *= .25;\n    \n#else\n\tv = getCol(fragCoord);\n    \n#endif\n    fragColor = vec4(v);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}