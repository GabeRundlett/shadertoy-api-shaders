{
    "Shader": {
        "info": {
            "date": "1451942620",
            "description": "Raymarching exercise with distance fields. Recreated my drawing from art class: http://imgur.com/EYlx5WB",
            "flags": 0,
            "hasliked": 0,
            "id": "ldt3zl",
            "likes": 19,
            "name": "3^3 composition",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "primitives",
                "klos"
            ],
            "usePreview": 0,
            "username": "spolsh",
            "viewed": 1079
        },
        "renderpass": [
            {
                "code": "// Created by michal klos - spolsh/2016\n\n// based on:\n// Created by inigo quilez - iq/2013\n// https://www.shadertoy.com/view/Xds3zN\n\n\n#define PI 3.14\n#define TIME ( 15.0 + iTime )\n\n\nfloat hash( float n ) {\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//----------------------------------------------------------------------\n\n// rotation matrix\nmat3 rotX(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(1.0,0.0,0.0,0.0,c,-s,0.0,s,c);\n}\n\nmat3 rotY(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(c,0.0,s,0.0,1.0,0.0,-s,0.0,c);\n}\n\nmat3 rotZ(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(c,-s,0.0,s,c,0.0,0.0,0.0,1.0);\n}\n\n\n// rotate the box and \nfloat sdQuaterBox( vec3 p, vec3 b, vec2 sign )\n{\n    b.xy *= sqrt(2.0);\n\tfloat boxBase = udRoundBox( p * rotZ( 0.25 * 3.14 ), b, 0.01 );\n        \n    return max( sign.y * p.y, max( sign.x * p.x, boxBase ) );\n}\n\nfloat sdHalfBox( vec3 p, vec3 b, float cutRot )\n{    \n\tfloat boxBase = udRoundBox( p, b, 0.01 );\n    vec3 cp = p * rotZ( cutRot );\n        \n    return max( cp.x, boxBase );\n}\n\n\nvec2 map( in vec3 pos )\n{\n\tfloat bevel = 0.01;\n    float side = 0.25;\n    \n    vec2 res1 =      vec2( sdPlane(       pos), 1.0 );\n    \n    vec2 res2 = vec2(       udRoundBox(   pos-vec3( 0.0, 0.25, 0.0), vec3(side), bevel ), 3.0 );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 0.75, 0.0), vec3(side), bevel ), 3.0 ) );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 1.25, 0.0), vec3(side), bevel ), 3.0 ) );\n\n\tres2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 1.25, 0.5), vec3(side), bevel ), 3.0 ) );        \n\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 0.25, 1.0), vec3(side), bevel ), 3.0 ) );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 0.75, 1.0), vec3(side), bevel ), 3.0 ) );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( 0.0, 1.25, 1.0), vec3(side), bevel ), 3.0 ) );        \n\n\tres2 = opU( res2, vec2( udRoundBox(   pos-vec3( -0.5, 0.25, 0.0), vec3(side), bevel ), 3.0 ) );\n\tres2 = opU( res2, vec2( sdHalfBox(    pos-vec3( -0.5, 1.25, 0.0), vec3(side), 0.75 * PI ), 3.0 ) );\n   \n    res2 = opU( res2, vec2( sdQuaterBox(  pos-vec3( -0.5 + 0.25, 0.0, 1.0), vec3(0.25), vec2( 1.0, -1.0 ) ), 3.0 ) );        \n\n     \n    res2 = opU( res2, vec2( sdHalfBox(    pos-vec3( -1.0, 0.25, 0.0), vec3(0.25), 0.75 * PI ), 3.0 ) );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( -1.0, 0.75, 0.0), vec3(side), bevel ), 3.0 ) );       \n    \n\tres2 = opU( res2, vec2( sdHalfBox(    pos-vec3( -1.0, 0.25, 0.5), vec3(0.25), 0.25 * PI ), 3.0 ) );\n    res2 = opU( res2, vec2( udRoundBox(   pos-vec3( -1.0, 0.75, 0.5), vec3(side), bevel ), 3.0 ) );\n\n   \tres2 = opU( res2, vec2( sdSphere(     pos-vec3( -1.0, 0.25, 1.0), 0.25 ), 46.9 ) );                    \n    \n    return opU( res1, res2 );\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.0005;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<75; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) + rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            float f = mod( floor( 2.0 * ( pos.z + 0.25 ) ) + floor( 2.0 * ( pos.x + 0.25 ) ), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        } else {\n            // float f = length( floor( 2.0 * ( pos + vec3( 0.25, 0.5, 0.25 ) ) ) );\n            // col = 0.1 + 0.1 * hash( f + fract( pos ).x ) + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\t\tfloat dom = smoothstep( -0.1, 0.1, ref.y );        \n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        \n        float occ = calcAO( pos, nor );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);        \n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\t\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\t\t\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\t// float time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( 3.5*cos(0.1*TIME + 6.0*mo.x), 0.85 + 2.0*mo.y, 3.5*sin(0.1*TIME + 6.0*mo.x) );\n\tvec3 ta = vec3( 0.0, 0.4, 0.0 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}