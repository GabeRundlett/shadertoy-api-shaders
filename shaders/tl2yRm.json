{
    "Shader": {
        "info": {
            "date": "1594038397",
            "description": "This code is based on https://www.shadertoy.com/view/tljcRW\n @BigWIngs Thank you for the awesome tutorial code!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2yRm",
            "likes": 6,
            "name": "The Confetti",
            "published": 3,
            "tags": [
                "confetti"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 645
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define T (iTime)\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n#define DEBUG 0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 Transform(vec3 p, float angle) {\n    p.xz*=Rot(angle);\n    p.xy*=Rot(angle*.7);\n    return p;\n}\n\nfloat Confetti(vec3 ro, vec3 rd,vec3 pos, float angle, int type) {\n    float t = dot(pos-ro,rd);\n    vec3 p = ro+rd*t;\n    float y = length(pos-p);\n    vec2 bsize = vec2(0.2,0.25);\n    float d = 1.0;\n    if(type == 0 && y<1.0) {\n        float x = sqrt(1.0-y);\n        \n        // front\n        vec3 pF = ro+rd*(t-x)-pos;\n        pF = Transform(pF,angle);\n        vec2 uvF = vec2(atan(pF.x,pF.z),pF.y);\n        float f = sdBox(uvF,bsize);\n        \n        // back\n        vec3 pB = ro+rd*(t+x)-pos;\n        pB = Transform(pB,angle);\n        vec2 uvB = vec2(atan(pB.x,pB.z),pB.y);\n        float b = sdBox(uvB,bsize);\n        d = min(f,b);\n    }\n    \n    y = sdCappedCylinder((pos-p)*matRotateZ(radians(90.0)), 0.3,0.001);\n    bsize = vec2(1.0,0.02);\n    if(type == 1 && y<0.07) {\n\t\tp = pos-p;\n\t\t\n        vec2 uv = p.xy;\n        uv*=Rot(radians(30.0));\n        uv.y-=T*0.2;\n        \n        uv.y = mod(uv.y,0.1)-0.05;\n        d = sdBox(uv,bsize);\n    }\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 M = iMouse.xy/iResolution.xy-.5;\n\n    vec3 bg = .9*max(mix(vec3(1.2)+(.1-length(uv.xy)/3.),vec3(1),.1),0.);\n    vec4 col = vec4(bg,0.0);\n    vec3 ro = vec3(0.0,0.0,-3.0);\n    vec3 rd = normalize(vec3(uv,1));\n\t    \n    #if DEBUG\n        float confetti = Confetti(ro,rd,vec3(0.0),iTime,1);\n        col = mix(col,vec4(vec3(1.0,0.0,0.0),1.0),S(confetti,0.0));\n\t#else\n        for(float i = 0.; i<1.0; i+=1.0/60.0) {\n            float x = mix(-8.0,8.0,fract(i))+M.x;\n            float y = mix(-5.,5.,fract((sin(i*564.3)*4570.3)-T*.3))+M.y;\n            float z = mix(5.0,0.0,i);\n            float a = T+i*563.34;\n            float ratio = clamp(fract((sin(i*1564.3)*9570.3)),0.0,1.0);\n            int type = (i<ratio)?0:1;\n\n            vec3 ccol = 0.5 + 0.5*cos(T+uv.xyx+vec3(i,2,4));\n            float confetti = Confetti(ro,rd,vec3(x,y,z),a,type);\n            col = mix(col,vec4(ccol,1.0),S(confetti,0.0));\n        }\n    #endif\n        \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}