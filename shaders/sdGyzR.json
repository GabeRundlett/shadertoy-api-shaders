{
    "Shader": {
        "info": {
            "date": "1654289461",
            "description": "timelapse: \nhttps://twitter.com/Scrygl/status/1532827703690244096",
            "flags": 0,
            "hasliked": 0,
            "id": "sdGyzR",
            "likes": 3,
            "name": "30 minutes 6/3",
            "published": 3,
            "tags": [
                "3d",
                "light",
                "rgb"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////\n#define time iTime*1.\n#define pi 3.14159265\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n} \n\nvec3 lpos(float a) {\n    vec3 l = vec3(0.,1.,3.);\n    l -= 0.3;\n    l += a*0.1;\n    l.xz *= r2d(time*0.5+a*0.1*time);\n    return l;\n}\n\nvec4 map(vec3 p) {\n    vec3 o = p;\n    p.z -= 3.;\n    p.yz *= r2d(sin(time/3.)*0.1);\n    p.xz *= r2d(time/6.);\n    float d = sdBox(p,vec3(0.05));\n    float od = d;\n    for (int i=0;i<4;i++) {\n        p = abs(p)-sin(time/4.+p.y*0.2)*0.1-0.1;\n        d = min(d,sdBox(p,vec3(sin(time*0.3+d*0.5+p.y*0.2)*0.5+0.5)*0.1));\n    }\n    //float d = sdBox(p,vec3(0.05));\n    d = min(d,o.y+0.5+0.5-od*0.2);\n    //d = max(d,-o.z+0.1);\n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro ,vec3 rd, float s) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<99;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w*s;\n        dO += dS;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3(\n        map(p-h.xyy).w-map(p+h.xyy).w,\n        map(p-h.yxy).w-map(p+h.yxy).w,\n        map(p-h.yyx).w-map(p+h.yyx).w\n    ));\n}\n\nvec3 sh(vec3 p, vec3 n, float a) {\n    vec3 l = lpos(a);\n    vec3 rd = normalize(l-p);\n    vec2 d = RM(p-n*0.003,rd,1.);\n    float dif = clamp(dot(rd,-n),0.,1.);\n    float s = 0.;\n    if (length(l-p) > d.x) {\n        s = 1.;\n    }\n    return vec3(s,dif,d.x);\n}\n\nfloat point(vec3 p, vec3 rd, float a) {\n    vec3 l = lpos(a);\n    float l1 = clamp(length(l-p)*0.5,0.,1.);\n    float l2 = pow(1.-length(l.xy-rd.xy*l.z),3.);\n    return clamp(pow(l2+0.1,5.),0.,1.);\n}\n\nvec3 colo(vec3 p, vec3 n, vec2 d, vec3 rd) {\n    vec3 col = 1.-d.xxx/7.;\n    vec3 mp = map(p).xyz;\n    col += 1.-n;\n    col *= 0.05;\n    \n    col *= 0.;\n    col.rg += sin(mp.z*10.)*0.1;\n    vec3 rs = sh(p,n,0.);\n    float p1 = point(p,rd,0.);\n    col.r += p1;\n    col.r -= rs.x*0.5;\n    col.r += rs.y*0.4;\n    vec3 bs = sh(p,n,1.);\n    p1 = point(p,rd,1.);\n    col.b += p1;\n    col.b -= bs.x*0.5;\n    col.b += bs.y*0.4;\n    vec3 gs = sh(p,n,2.);\n    p1 = point(p,rd,2.);\n    col.g += p1;\n    col.g -= gs.x*0.5;\n    col.g += gs.y*0.4;\n    //col += clamp(pow(p1+0.1,5.),0.,1.);\n    //col += clamp(s.z*0.01,0.,1.)*0.1;\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd,1.);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    col = colo(p,n,d,rd);\n    vec3 ocol = col;\n    vec3 oro = ro;\n    vec3 ord = rd;\n    vec2 od = d;\n    vec3 op = p;\n    vec3 on = n;\n    float rl = 1.5;\n    for (int i=0;i<3;i++) {\n        ro = p-n*0.003;\n        rd = reflect(rd,n);\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl;\n        rl *= 0.9;\n    }\n    col = clamp(col,0.,1.);\n    col += ocol;\n    \ncol *= 1.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}