{
    "Shader": {
        "info": {
            "date": "1663625321",
            "description": "Finally decided to give Ray Tracing In One Weekend book (Peter Shirley) a try. Covers until Ch 8 (Diffuse Materials). Drag the mouse to rotate camera. ",
            "flags": 32,
            "hasliked": 0,
            "id": "7tdBRX",
            "likes": 3,
            "name": "RT in One Weekend: Diffuse",
            "published": 3,
            "tags": [
                "raytracing",
                "ray",
                "illumination",
                "tracing",
                "diffuse",
                "montecarlo",
                "hash",
                "weekendmglobal"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "/**\n* Finally decided to give Ray Tracing In One Weekend (Peter Shirley) a try.\n*\n* http://in1weekend.blogspot.com/2016/01/ray-tracing-in-one-weekend.html\n*\n* This shader covers diffuse (Ch. 7 of the book), seemed like a good checkpoint to \n* save in case I needed to start over carrying forward. I'll probably cover reflection\n* and refraction chapters in the next shader.\n*\n* Most of the ray tracer logic lies in the common tab with some initialization and input handling\n* in Buffer A. Buffer B stores last frame's mouse location. \n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 outColor = textureLod(iChannel0, uv, 0.0);\n    fragColor = vec4(pow(outColor.xyz, vec3(1.0 / 2.2)), 1.0);\n    if (fragCoord.x < 1.0) fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI         3.1415926535\n#define TWO_PI     6.2831853071\n\n#define Saturate(x) clamp(x, 0.0, 1.0)\n#define RemapNDC(x) (x * 0.5 + 0.5)\n\nconst float cameraNear = 0.001;\nconst float cameraFar  = 65535.0;\nconst float cameraRadius = 5.0;\nconst float cameraZoom = 2.5;\n\nconst int numberOfSpheres = 2;\n\nstruct Ray\n{\n    vec3 origin, direction;\n};\n\nstruct HitResult\n{\n    float t;\n    vec3 position, normal;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n};\n\nconst Sphere sphereList[numberOfSpheres] = Sphere[](\n    Sphere(vec3(0.0), 1.0),\n    Sphere(vec3(0.0, -5001.0, 0.0), 5000.0)\n);\n\n// Quality hashes collection by nimitz https://www.shadertoy.com/view/Xt3cDn\nfloat hashSeed = 0.0;\n\nuint BaseHash(uvec2 p) {\n    p = 1103515245U * ((p >> 1U) ^ (p.yx));\n    uint h32 = 1103515245U * ((p.x) ^ (p.y >> 3U));\n    return h32 ^ (h32 >> 16);\n}\n\nvec2 Hash2(inout float seed) {\n    uint n = BaseHash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));\n    uvec2 rz = uvec2(n, n * 48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU)) / float(0x7fffffff);\n}\n\nvec3 Hash3(inout float seed) {\n    uint n = BaseHash(floatBitsToUint(vec2(seed += 0.1, seed += 0.1)));\n    uvec3 rz = uvec3(n, n * 16807U, n * 48271U);\n    return vec3(rz & uvec3(0x7fffffffU)) / float(0x7fffffff);\n}\n\n// Source: Karthik Karanth's blog: \n// https://karthikkaranth.me/blog/generating-random-points-in-a-sphere/#better-choice-of-spherical-coordinates\nvec3 RandomPointInUnitSphere(inout float seed) {\n    vec3 h = Hash3(seed) * vec3(TWO_PI, 2.0, 1.0) - vec3(0.0, 1.0, 0.0);\n    float theta = h.x;\n    float sinPhi = sqrt(1.0 - h.y * h.y);\n    float r = pow(h.z, 1.0 / 3.0);\n    \n    return r * vec3(cos(theta) * sinPhi, sin(theta) * sinPhi, h.y);\n}\n\nvec3 GetIntersectPoint(in Ray ray, in float t)\n{\n    return ray.origin + ray.direction * t;\n}\n\nvec3 GetBackgroundColor(in float y)\n{\n    // Get a nice skyblue-ish gradient background\n    return mix(vec3(1.0), vec3(0.5, 0.7, 1.0), y);\n}\n\nbool IntersectSphere(in Ray ray, in Sphere sphere, in float tMin, in float tMax, inout HitResult result)\n{\n    vec3 oc = ray.origin - sphere.center;\n    float a = dot(ray.direction, ray.direction);\n    float b = dot(oc, ray.direction);\n    float c = dot(oc, oc) - sphere.radius * sphere.radius;\n    float d = b * b - a * c;\n    \n    if (d > 0.0)\n    {\n        float temp = (-b - sqrt(d)) / a;\n        if (temp < tMax && temp > tMin)\n        {\n            result.t = temp;\n            result.position = GetIntersectPoint(ray, temp);\n            result.normal = normalize(result.position - sphere.center);\n            return true;\n        }\n        \n        temp = (-b + sqrt(d)) / a;\n        if (temp < tMax && temp > tMin)\n        {\n            result.t = temp;\n            result.position = GetIntersectPoint(ray, temp);\n            result.normal = normalize(result.position - sphere.center);\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nbool IntersectWorld(in Ray ray, inout HitResult worldResult)\n{\n    float closestHit = cameraFar;\n    HitResult tempResult;\n\n    for (int i = 0; i < numberOfSpheres; ++i)\n    {\n        if (IntersectSphere(ray, sphereList[i], cameraNear, closestHit, tempResult))\n        {\n            closestHit = tempResult.t;\n            worldResult = tempResult;\n            return true;\n        }\n    }\n    \n    return false;\n}\n\n#define MAX_BOUNCES 8\n\nvec3 GetSceneColor(in Ray ray)\n{\n    HitResult worldResult;\n    vec3 sceneColor = vec3(1.0);\n    \n    for (int i = 0; i < MAX_BOUNCES; ++i)\n    {\n        if (IntersectWorld(ray, worldResult))\n        {\n            ray = Ray(worldResult.position, normalize(worldResult.normal + RandomPointInUnitSphere(hashSeed)));\n            sceneColor *= 0.5;\n        }\n    }\n    \n    return sceneColor * GetBackgroundColor(ray.direction.y * 0.5 + 0.5);\n}\n\nmat3 GetCameraMatrix(vec3 origin, vec3 target)\n{\n    vec3 lookAt = normalize(target - origin);\n    vec3 right = normalize(cross(lookAt, vec3(0., 1., 0.)));\n    vec3 up = normalize(cross(right, lookAt));\n    return mat3(right, up, lookAt);\n}\n\nRay GetCameraRay(vec2 uv, vec2 cameraMouse)\n{\n    // Make the camera arcball-ish using spherical coordinates\n    vec2 theta = vec2(0.);\n\n    theta.x = cameraMouse.x * PI * 4.;\n    theta.y = mix(PI * 0.16, PI * 0.564, cameraMouse.y);\n\n    vec3 origin = vec3(0.);\n    origin.x = sin(theta.x) * sin(theta.y);\n    origin.y = cos(theta.y);\n    origin.z = cos(theta.x) * sin(theta.y);\n    origin *= cameraRadius;\n    \n    // Generate camera ray through a camera view matrix\n    vec3 target = vec3(0.);\n    mat3 camera = GetCameraMatrix(origin, target);\n    vec3 direction = normalize(camera * vec3(uv, cameraZoom));\n    return Ray(origin, direction);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/**\n* Buffer A initializes stuff for ray tracing (camera, rays, input handling etc) and initiates\n* the ray tracing process. At the end, it accumulates the ray traced result with the previously\n* accumulated history buffer. \n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    hashSeed = float(BaseHash(floatBitsToUint(fragCoord))) / float(0xffffffffU) + iTime;\n    \n    vec2 uv = (2.0 * (floor(fragCoord) + Hash2(hashSeed)) - iResolution.xy) / iResolution.y;\n    \n    vec4 currentMouse = iMouse / iResolution.xyxy;\n    vec4 previousMouse = texelFetch(iChannel1, ivec2(fragCoord), 0); // last frame mouse coords\n    vec2 cameraPositionUVSpace = texelFetch(iChannel0, ivec2(0), 0).xy;\n    \n    vec4 historyColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float sampleCount = historyColor.w;\n    \n    // Add mouse drag velocity to camera so it only moves from its current position\n    if (currentMouse.z > 0.0 && previousMouse.z > 0.0)\n    {\n        cameraPositionUVSpace += currentMouse.xy - previousMouse.xy;\n        cameraPositionUVSpace.y = Saturate(cameraPositionUVSpace.y);\n        \n        // Reset history on mouse click\n        sampleCount = 1.0;\n        historyColor.xyz = vec3(0.0);\n    }\n    \n    // Reset history on resolution change\n    if (texelFetch(iChannel0, ivec2(0), 0).z != iResolution.x)\n    {\n        sampleCount = 1.0;\n        historyColor.xyz = vec3(0.0);\n    }\n    \n    vec3 outColor = vec3(0.);\n    \n    if (iFrame == 0) // Initial camera position\n    {\n        cameraPositionUVSpace = vec2(0.0, 0.8);\n        sampleCount = 1.0;\n    } \n    \n    outColor = GetSceneColor(GetCameraRay(uv, cameraPositionUVSpace));\n    outColor = mix(historyColor.xyz, outColor, 1.0 / sampleCount++);\n    \n    // Save the cameraPosition at [0, 0] coordinate of this buffer\n    if (all(lessThan(fragCoord, vec2(1.0))))\n    {\n        outColor = vec3(cameraPositionUVSpace, iResolution.x);\n    }\n    \n    fragColor = vec4(outColor, sampleCount);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\n* Buffer B just saves the current frame's mouse position for it to be used in the next frame.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 mouse = iMouse / iResolution.xyxy;\n    fragColor = mouse;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}