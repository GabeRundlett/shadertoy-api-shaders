{
    "Shader": {
        "info": {
            "date": "1722861730",
            "description": "SDF CLOUD",
            "flags": 0,
            "hasliked": 0,
            "id": "Xc2cRt",
            "likes": 2,
            "name": "SDF_CLOUD",
            "published": 3,
            "tags": [
                "sdfcloud"
            ],
            "usePreview": 1,
            "username": "CuriosityWang",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "// author: Wang Xin\n// Email: lightwxz@foxmail.com\n\n#define MAXSTEP 60\n\n\n// 立方体包围盒求交 \nvec2 calIntersection(vec3 p, vec3 ray) {\n    float tmin = 0.0, tmax = 1000.;\n    vec3 box_min = vec3(-1.5);\n        vec3 box_max = vec3(1.5);\n\n        vec3 invdirVec = 1.0 / ray;\n\n    for (int d = 0; d < 3; ++d) {\n        float t1 = (box_min[d]- p[d]) * invdirVec[d];\n        float t2 = (box_max[d] - p[d]) * invdirVec[d];\n\n        tmin = max(tmin, min(t1, t2));\n        tmax = min(tmax, max(t1, t2));\n    }\n\n   if(tmin < tmax){\n        return vec2(tmin, tmax-tmin);\n   }\n   return vec2(0, 0);\n}\n\n// todo use other  noise type\nfloat random(in vec3 _st) {\n    return fract(sin(dot(_st.xyz, vec3(12.9898, 78.233, 37.719))) * 43758.5453123);\n}\n\nfloat noise(in vec3 _st) {\n    vec3 i = floor(_st);\n    vec3 n = fract(_st);\n\n    float a = random(i);\n    float b = random(i + vec3(1.0, 0.0, 0.0));\n    float c = random(i + vec3(0.0, 1.0, 0.0));\n    float d = random(i + vec3(1.0, 1.0, 0.0));\n    float e = random(i + vec3(0.0, 0.0, 1.0));\n    float f = random(i + vec3(1.0, 0.0, 1.0));\n    float g = random(i + vec3(0.0, 1.0, 1.0));\n    float h = random(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = n * n * (3.0 - 2.0) * n;\n\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y +\n           (e - a) * u.z * (1.0 - u.x) * (1.0 - u.y) +\n           (f - b) * u.z * u.x * (1.0 - u.y) +\n           (g - c) * u.z * u.y * (1.0 - u.x) +\n           (h - d) * u.z * u.x * u.y;\n}\n\nfloat fbm(vec3 x)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        w *= 0.5;\n        s *= 2.0;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\n\n// TTEH Material Graph不支持mat类型，因此将旋转矩阵乘法进行分解。\nvec2 rotate(vec2 coord, float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    vec2 rotated;\n    rotated.x = cosAngle * coord.x - sinAngle * coord.y;\n    rotated.y = sinAngle * coord.x + cosAngle * coord.y;\n    return rotated;\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min(a,b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdBox(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y,q.z)), 0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\n\nfloat SDFScene1(vec3 p){\n\n    float noiseValue = fbm(p * 4. + iTime * .3)*.2;\n    // p += noiseValue; \n\n    float sdSphere = sdSphere(p, .8);\n    float sdBox0 = sdBox(p, vec3(1, 1, 1)); \n\n    return  sdBox0 + noiseValue;\n}\n\nfloat SDFScene2(vec3 p){\n\n    // todo 采样3D噪声纹理，然后使用采样得到的值扰动输入点p。这样可以增强云的波动性，同时极大提升帧率。\n\n    float noiseValue = fbm(p * 4. + iTime * .3 )*.1;\n \n    float sdBox0 = sdBox(p, vec3(1, 1, 1)); \n    p.y -= 0.8;\n    float width = 0.23;\n    float sdBox1 = sdBox(p, vec3(width, width, 1.2));\n    float sdBox2 = sdBox(p, vec3(1.2, width, width));\n    \n    float tens = min(sdBox1, sdBox2);\n    return  max(sdBox0, -tens) + noiseValue;\n}\n\nfloat SDFScene(vec3 p){\n    return SDFScene1(p); //**** 彩蛋在这里 ：修改为 return SDFScene2(p) 可以看到像塑云 *****\n}\n\n// From Lens Studio 点光源衰减系数计算\nfloat pointlightAttenuation(vec3 L, float intensity, float dist, float radius)\n{\n    // L 点光源到着色点的方向\n    // intensity 点光源强度\n    // dist 点光源到着色点的距离\n    // radius 点光源半径\n\n    // renturn 点光源衰减系数计算\n\n    float mindistSq = 0.1;\n        float distSq = dot(L, L);\n        float minIntensity = intensity / (1.0 + distSq);\n        float maxLightRadius = sqrt( (intensity / minIntensity) - mindistSq ) * radius;\n        float attenuation = max(0.0, (intensity / (0.01 + distSq)) - (dist / maxLightRadius) * minIntensity);\n\n        return attenuation;\n}\n\nvec4 CloudRayMarching(in vec3 cloudRayOrigin, in vec3 cloudRayDirection) {\n\n    vec2 intersection = calIntersection(cloudRayOrigin, cloudRayDirection);\n    float distanceToBox = intersection.x;\n    float distanceInsideBox = intersection.y;\n    float stepSize = distanceInsideBox / float(MAXSTEP);\n\n    float travelDistance = 0.0;\n    float accumulatedDistance = 0.0;\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    if(distanceInsideBox == 0.){\n        return color;\n    }\n\n    for (int step = 0; step < MAXSTEP; step++) {\n\n      // if (color.a < 0.01) break;\n\n        vec3 currentRayPosition = cloudRayOrigin + cloudRayDirection * (accumulatedDistance + distanceToBox);\n        accumulatedDistance += stepSize;\n        travelDistance = -SDFScene(currentRayPosition);\n\n        if(travelDistance > 0.) { // travelDistance > 0 代表此时光线还在云的内部\n            float cloudDensityFactor = 100.0;\n            float density = clamp((travelDistance / float(MAXSTEP)) * cloudDensityFactor, 0.0, 1.0);\n\n            color.a *= 1.0 - density; //  云的密度越大，透明度越小。\n\n            vec3 lightPos = vec3(0, 0, 10);\n            vec3 lightDir = currentRayPosition - lightPos;\n            float lightDist = length(lightDir);\n            lightDir /= lightDist;\n            float lightAttenuation = pointlightAttenuation(lightDir, 1.0, lightDist, 4.33); // Point light source\n            \n\n            float shadowFactor = 1.0;\n            // 求解每个采样点的颜色。\n            color.rgb += exp(-travelDistance) * density * color.a; // Ambient light shading calculation\n            color.rgb += shadowFactor * density * color.a * lightAttenuation; // Point light source\n            color.rgb += shadowFactor * density * color.a * vec3(1); // Directional light\n        }\n    }\n\n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragcoord){\n\n    vec3 backgroundColor = vec3(0.184, 0.431, 0.701)*1.3;\n    vec4 oriColor = vec4(0.835, 0.2, .2343, .1);\n\n    vec2 uv = (fragcoord * 2. - iResolution.xy) / iResolution.y;\n    vec2  m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n\n    // Initialize Light\n    vec3 rayOrgin = vec3(0, 0, -2.4);\n    vec3 rayDirection = normalize(vec3(uv, 1));  // 可以修改UV范围实现修改fov角度\n    \n    // 根据鼠标x值的大小，绕着y轴旋转\n    rayOrgin.xz = rotate(rayOrgin.xz, -m.x);\n    rayDirection.xz = rotate(rayDirection.xz, -m.x);\n\n    rayOrgin.yz = rotate(rayOrgin.yz, -m.y);\n    rayDirection.yz = rotate(rayDirection.yz, -m.y);\n\n    vec4 col = clamp(CloudRayMarching( rayOrgin, rayDirection), 0.0, 1.0);\n\n \n\n    fragColor = vec4(mix(col.rgb, backgroundColor, col.a), 1.);\n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}