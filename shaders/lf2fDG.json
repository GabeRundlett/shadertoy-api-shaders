{
    "Shader": {
        "info": {
            "date": "1725654204",
            "description": "Draw a Kleinian group given by generators. When the circle generators overlap, what comes out is not the image of a Kleinian group, but more of a glitch.",
            "flags": 0,
            "hasliked": 0,
            "id": "lf2fDG",
            "likes": 5,
            "name": "Quasi-Kleinian: Ring of Circles",
            "published": 3,
            "tags": [
                "kleinian",
                "maths"
            ],
            "usePreview": 0,
            "username": "Refurio",
            "viewed": 120
        },
        "renderpass": [
            {
                "code": "////////////////////////////////\n// view port\n////////////////////////////////\nvec2 center = vec2(0.,0.);\nfloat radius = 1.2;\nfloat angle = radians(0.);\n\n////////////////////////////////\n// complex arithmetic\n////////////////////////////////\nconst float pi = radians(180.);\nfloat arg(vec2 z) {\n  return atan(z.y, z.x);\n}\nfloat abs2(vec2 z) {\n  return z.x*z.x + z.y*z.y;\n}\nvec2 cmul(vec2 a, vec2 b) {\n  return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n// see my \"Lambert w\" shader for the full set.\n\n////////////////////////////////\n// coloring functions:\n////////////////////////////////\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 hsv(float h, float s, float v) {\n  return hsv(vec3(h, s, v));\n}\nvec3 phase(vec2 z) {\n  return hsv(vec3(arg(z)/pi, 1., 1.));\n}\nvec3 axies(vec2 z) {\n  float t = arg(z)/pi;\n  float a = mod(2.*t+2., 2.)-1.;\n  a = abs(2.*a)-1.;\n  a = asin(a)/pi+.5;\n  return vec3(a,a,a);\n}\nvec3 white = vec3(1.,1.,1.);\nvec3 red = vec3(1.,0.,0.);\nvec3 blue = vec3(0.3,0.3,1.);\nvec3 orange = vec3(1.,.7,.2);\n\n// convert pixel coordinate to complex plane coordinate\nvec2 p2c(vec2 p) {\n  vec2 wh2 = iResolution.xy/2.;\n  float pr = min(wh2.x, wh2.y);\n  vec2 c = (p - wh2)/pr;\n  vec2 r = radius * vec2(cos(angle), sin(angle));\n  return cmul(r,c) + center;\n}\n\n\n////////////////////////////////\n// tiling\n////////////////////////////////\n\n// generators:\n// number of generators\n// normal\nconst int o_sphere = 0;\nconst int o_line = 1;\nstruct obj {\n  int t;\n  vec2 n;\n  float d;\n};\nobj sphere(vec2 c, float r) {\n  return obj(o_sphere, c, r);\n}\nobj line(vec2 n, float d) {\n  return obj(o_line, n, d);\n}\n\n// I got these from https://bulatov.org/math/180110/index.html\n// reflect\nvec2 line_refl(vec2 A, vec2 N, float d) {\n  return A - 2.*dot(A - d*N, N)*N;\n}\n// signed distance\nfloat line_dist(vec2 A, vec2 N, float d) {\n  return dot(A, N) - d;\n}\nvec2 sphere_invert(vec2 A, vec2 C, float r) {\n  return C + r*r/abs2(A-C) * (A-C);\n}\nfloat sphere_dist(vec2 A, vec2 C, float r) {\n  return sign(r)*(length(A-C)-abs(r));\n}\n\nvec2 inv(vec2 A, obj o) {\n  if(o.t == o_sphere)\n    return sphere_invert(A, o.n, o.d);\n  return line_refl(A, o.n, o.d);\n}\nfloat dist(vec2 A, obj o) {\n  if(o.t == o_sphere)\n    return sphere_dist(A, o.n, o.d);\n  return line_dist(A, o.n, o.d);\n}\n\nconst int l = 9;\nconst int L = l+1;\nobj[L] o;\n\nfloat osc(float a, float lo, float hi) {\n  return (1.-cos(a*2.*pi))/2.*(hi-lo) + lo;\n}\n\nint depth = 100;\nvec3 f(vec2 z) {\n  float da = 2.*pi/float(l)*osc(iTime/30.,1.,5.);\n  float R = 1.;\n  float r = R*sin(da/2.)/(1.+sin(da/2.));\n  for(int k = 0; k < l; ++k) {\n    float a = float(k)*da;\n    o[k] = sphere(vec2(cos(a), sin(a))*(R-r), r);\n  }\n  o[l] = sphere(vec2(0,0), -R);\n\n  int i, k;\n  for(k = 0; k < L; ++k) {\n    if(o[k].t == o_line)\n      o[k].n = normalize(o[k].n);\n  }\n\n//  depth = int((1.+sin(iTime*3.))*float(depth)/2.+1.);\n  int m;\n  for(i = 0; i < depth; ++i) {\n    for(k = 0; k < L; ++k) {\n      ++m;\n      float r = dist(z, o[k]);\n      if(r < 0.) {\n        z = inv(z, o[k]);\n        break;\n      }\n    }\n    if(k == L)\n      break;\n  }\n\n  // outside\n  if(i == depth)\n    return white;\n\n//  return phase(z);\n//  return axies(z);\n\n  float s = float(m)/float(depth);\n  return hsv(float(i%2)/2.+.1, 1.-s, 1.);\n}\n\nconst float linewidth = 3.; // in pixels\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 z = p2c(fragCoord);\n  fragColor = vec4(f(z), 1.);\n  \n  float pixelwidth = min(iResolution.x,iResolution.y)/2./radius;\n  for(int k = 0; k < L; ++k) {\n    float r = abs(dist(z, o[k]));\n    float w = clamp(r/linewidth*pixelwidth, 0., 1.);\n    fragColor = w*fragColor + (1.-w)*vec4(hsv(float(sign(o[k].d))/3., 1., 1.), 1.);\n  }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}