{
    "Shader": {
        "info": {
            "date": "1692718344",
            "description": "Adaptive variant of https://shadertoy.com/view/dtlfzN\nRight: naive white/Poisson distrib. Cost = number of dots.\nLeft: taking ~5 random point per cell, with cell size adapted to reach the target density. Still, note that low freq variations are missing.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtfBRM",
            "likes": 5,
            "name": "fast white/Poisson point distri2",
            "published": 3,
            "tags": [
                "noise",
                "poisson",
                "blue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "// === left white noise / Poisson point distribution always cost ~5 while right naive point distrib cost ~ number or points.\n// ( adaptive variant of https://shadertoy.com/view/dtlfzN )\n\n// --- hash utilities  ( float version get visibly bias for high densities ).\n\n// #define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n// #define H2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *3758.5453123)\n// #define H23(p) fract(sin((p)*mat3x2(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123)\n// #define H32(p) fract(sin((p)*mat2x3(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123)\n\nvec3 uhash3( uvec3 x ) {         // iq version https://shadertoy.com/view/XlXcW4\n    const uint k = 1103515245U;  // GLIB C version\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;    \n    return vec3(x)/float(0xffffffffU);\n}\n#define iH3(f)  uhash3( floatBitsToUint(f) ) // FabriceN version https://www.shadertoy.com/view/NtjyWw\n#define iH32(f) iH3(f).xy\n\n\nvoid mainImage( out vec4 O, vec2 u ) // ----------------------------------------------------------------------\n{\n    float d = 9., r,t, n;                                   // n x n cells\n    vec2  R = iResolution.xy;\n    r = R.x/R.y;                                            // aspect ratio\n    t = floor( 16.*16. * ( \n               iMouse.z > 0. ? exp2(9.*iMouse.x/R.x) - 1.   // target point density\n                             : 10.* ( .5+.5*sin(iTime) ) )  // mouse vs demo mode.\n                          // : float(iFrame)\n             );\n    n = max(1., floor(sqrt(t/5.)) );                        // 5 = target point per cell. Choose n accordingly.\n    t = round(t/(n*n))*n*n;                                 // if we want same number of points everywhere.\n    \n    vec2  U = n * u / R.y, D,\n          I = floor(U),                                     // cell id\n          F = U-I;                                          // coords in cells  \n    O *= 0.;   \n   \n    if ( u.x < R.x/2. )                                     // --- left: white noise in n x n cells\n      for (float i=0.; i < t/(n*n); i++ )\n          D = F - iH32(vec3(I,i)),                          // distance vector to point\n          d = min(d, dot(D,D) );                            // keep smallest d²\n       // O += smoothstep(1.5*n/R.y, 0., length(D) );       // draw point\n          \n    else                                                    // --- right: white noise in whole screen.\n      for (float i=0.; i < t*r/2.; i++ )                    // unstructured: we need to test all points\n          D = U - n*( vec2(r/2.,0) + vec2(r/2.,1)* iH32(i*vec3(1,17,71)) ),\n          d = min(d, dot(D,D) );\n    \n    O += smoothstep(1.5*n/R.y, 0., sqrt(d) );               // draw closest point\n    \n    if ( int(u)==int(R)/2 ) O = vec4(1,0,0,0);              // red separator\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}