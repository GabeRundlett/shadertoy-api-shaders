{
    "Shader": {
        "info": {
            "date": "1477258896",
            "description": " Drawing shapes on an oscilloscope using stereo sound as X/Y inputs. Similar to the works done by Jerobeam Fenderson: \nhttps://www.youtube.com/user/jerobeamfenderson1",
            "flags": 8,
            "hasliked": 0,
            "id": "lly3DG",
            "likes": 32,
            "name": "XY Oscilloscope Cube (Loud)",
            "published": 3,
            "tags": [
                "oscilloscope",
                "sound",
                "stereo"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 2618
        },
        "renderpass": [
            {
                "code": "/*\nDrawing on an oscilloscope in XY mode using stereo sound.\nScreenshot of the sound on a basic XY scope simulator: http://i.imgur.com/SxskO1E.png\n\nMusic using the same technique by Jerobeam Fenderson: https://www.youtube.com/user/jerobeamfenderson1\n\nSome XY oscilloscope demos:\nYouscope - https://youtu.be/s1eNjUgaB-g\nOscillofun - https://youtu.be/o4YyI6_y6kw\nBeams of Light - https://youtu.be/lVdWxKZVYC0\n*/\n\n//Preview of the shape being drawn. (may fall out of sync with the sound when paused)\n\nfloat tau = atan(1.0)*8.0;\n\nfloat gShapeTime = 0.0;\nmat4 gModel = mat4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n\nvec2 cossin(float x)\n{\n\treturn vec2(cos(x), sin(x));   \n}\n\n//Single point projection\nvec2 Project(vec3 p0)\n{\n    vec3 vanish = vec3(0.0,-2.0,0.0);\n    \n    p0 -= vanish;\n    \n\treturn length(vanish) * p0.xz / p0.y;\n}\n\n//Transformation functions\nmat4 Translate(vec3 v)\n{\n    return mat4(vec4(1,0,0,v.x), vec4(0,1,0,v.y), vec4(0,0,1,v.z), vec4(0,0,0,1));\n}\n\n//Angle-axis rotation\nmat4 Rotate(vec3 u,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    u = normalize(u);\n    \n    vec3 c0 = vec3(c + (u.x*u.x) * (1.0-c), (u.y*u.x) * (1.0-c) + (u.z*s), (u.z*u.x) * (1.0-c) - (u.y*s));    \n    vec3 c1 = vec3((u.x*u.y) * (1.0-c) - (u.z*s), c + (u.y*u.y) * (1.0-c), (u.z*u.y) * (1.0-c) + (u.x*s)); \n    vec3 c2 = vec3((u.x*u.z) * (1.0-c) + (u.y*s), (u.y*u.z) * (1.0-c) - (u.x*s), c + (u.z*u.z) * (1.0-c));\n    \n    return mat4(mat3(c0,c1,c2));\n}\n\nmat4 Scale(vec3 v)\n{\n    return mat4(vec4(v.x,0,0,0), vec4(0,v.y,0,0), vec4(0,0,v.z,0), vec4(0,0,0,1));\n}\n\n//Projected line\nfloat Line3d(vec3 p0,vec3 p1,vec2 uv)\n{\n    p0 = (vec4(p0,1.0) * gModel).xyz;\n    p1 = (vec4(p1,1.0) * gModel).xyz;\n    \n\tp0.xy = Project(p0);\n\tp1.xy = Project(p1);\n    \n\tvec2 dir = normalize(p1.xy - p0.xy);\t\n\tuv = (uv - p0.xy) * mat2(dir.x, dir.y, -dir.y, dir.x);\t\n    \n    float d = distance(uv, clamp(uv, vec2(0.0), vec2(distance(p0.xy, p1.xy), 0.0)));\n    \n\treturn smoothstep(4.0/iResolution.y, 0.0, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = (fragCoord.xy / iResolution.y) - (res / 2.0);\n    uv *= 2.0;\n    \n    float time = iTime;\n    \n    gModel *= Scale(vec3(0.25));\n    gModel *= Rotate(vec3(0, 0, 1), time);\n    gModel *= Rotate(vec3(0, 1, 0), time);\n    gModel *= Rotate(vec3(1, 0, 0), time);\n    gModel *= Translate(vec3(0.4 * cossin(1.0 * time), 0.4 * sin(0.6 * time)));\n    \n    vec3 cube[8];\n    cube[0] = vec3(-1,-1,-1);\n    cube[1] = vec3( 1,-1,-1);\n    cube[2] = vec3(-1, 1,-1);\n    cube[3] = vec3( 1, 1,-1);\n    cube[4] = vec3(-1,-1, 1);\n    cube[5] = vec3( 1,-1, 1);\n    cube[6] = vec3(-1, 1, 1);\n    cube[7] = vec3( 1, 1, 1);\n    \n    vec3 cout = vec3(0);\n    \n\tcout += Line3d(cube[0],cube[1], uv);\n    cout += Line3d(cube[1],cube[3], uv);\n    cout += Line3d(cube[3],cube[2], uv);\n    cout += Line3d(cube[2],cube[0], uv);\n    \n    cout += Line3d(cube[4],cube[5], uv);\n    cout += Line3d(cube[5],cube[7], uv);\n    cout += Line3d(cube[7],cube[6], uv);\n    cout += Line3d(cube[6],cube[4], uv);\n    \n    cout += Line3d(cube[0],cube[4], uv);\n    cout += Line3d(cube[5],cube[1], uv);\n    cout += Line3d(cube[2],cube[6], uv);\n    cout += Line3d(cube[7],cube[3], uv);\n    \n    cout *= vec3(0.1,0.8,0.1);\n    \n    fragColor = vec4(cout, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nDrawing on an oscilloscope in XY mode using stereo sound.\nScreenshot of the sound on a basic XY scope simulator: http://i.imgur.com/SxskO1E.png\n\nMusic using the same technique by Jerobeam Fenderson: https://www.youtube.com/user/jerobeamfenderson1\n\nSome XY oscilloscope demos:\nYouscope - https://youtu.be/s1eNjUgaB-g\nOscillofun - https://youtu.be/o4YyI6_y6kw\nBeams of Light - https://youtu.be/lVdWxKZVYC0\n*/\n\n//Timing constants (seconds)\n#define T_FRAME 0.0167 //Frame duration (0.0167s = ~60fps) \n#define T_LINE  0.0020 //Duration of a 1-unit long line\n\nfloat tau = atan(1.0)*8.0;\n\nfloat gShapeTime = 0.0;\nmat4 gModel = mat4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1);\n\nvec2 cossin(float x)\n{\n\treturn vec2(cos(x), sin(x));   \n}\n\n//Single point projection\nvec2 Project(vec3 p0)\n{\n    vec3 vanish = vec3(0.0,-2.0,0.0);\n    \n    p0 -= vanish;\n    \n\treturn length(vanish) * p0.xz / p0.y;\n}\n\n//Transformation functions\nmat4 Translate(vec3 v)\n{\n    return mat4(vec4(1,0,0,v.x), vec4(0,1,0,v.y), vec4(0,0,1,v.z), vec4(0,0,0,1));\n}\n\n//Angle-axis rotation\nmat4 Rotate(vec3 u,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    u = normalize(u);\n    \n    vec3 c0 = vec3(c + (u.x*u.x) * (1.0-c), (u.y*u.x) * (1.0-c) + (u.z*s), (u.z*u.x) * (1.0-c) - (u.y*s));    \n    vec3 c1 = vec3((u.x*u.y) * (1.0-c) - (u.z*s), c + (u.y*u.y) * (1.0-c), (u.z*u.y) * (1.0-c) + (u.x*s)); \n    vec3 c2 = vec3((u.x*u.z) * (1.0-c) + (u.y*s), (u.y*u.z) * (1.0-c) - (u.x*s), c + (u.z*u.z) * (1.0-c));\n    \n    return mat4(mat3(c0,c1,c2));\n}\n\nmat4 Scale(vec3 v)\n{\n    return mat4(vec4(v.x,0,0,0), vec4(0,v.y,0,0), vec4(0,0,v.z,0), vec4(0,0,0,1));\n}\n\n//2D line waveform\nvec2 Line(vec2 p0, vec2 p1, float td, float t)\n{\n    float tl = td * distance(p0, p1);\n    \n    t -= gShapeTime;\n    gShapeTime += tl;\n    \n    if(t >= 0.0 && t < tl)\n    {\n        return mix(p0, p1, t/tl);\n    }\n    \n    return vec2(0);\n}\n\n//3D Projected line\nvec2 Line3d(vec3 p0, vec3 p1, float td, float t)\n{\n        p0 = (vec4(p0,1.0) * gModel).xyz;\n        p1 = (vec4(p1,1.0) * gModel).xyz;\n\n        p0.xy = Project(p0);\n        p1.xy = Project(p1);\n\n        return Line(p0.xy, p1.xy, td, t);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float ft = mod(time, T_FRAME);\n    \n    gModel *= Scale(vec3(0.25));\n    gModel *= Rotate(vec3(0, 0, 1), time);\n    gModel *= Rotate(vec3(0, 1, 0), time);\n    gModel *= Rotate(vec3(1, 0, 0), time);\n    gModel *= Translate(vec3(0.4 * cossin(1.0 * time), 0.4 * sin(0.6 * time)));\n    \n    vec3 cube[8];\n    cube[0] = vec3(-1,-1,-1);\n    cube[1] = vec3( 1,-1,-1);\n    cube[2] = vec3(-1, 1,-1);\n    cube[3] = vec3( 1, 1,-1);\n    cube[4] = vec3(-1,-1, 1);\n    cube[5] = vec3( 1,-1, 1);\n    cube[6] = vec3(-1, 1, 1);\n    cube[7] = vec3( 1, 1, 1);\n    \n    vec2 sout = vec2(0);\n    \n\tsout += Line3d(cube[0],cube[1], T_LINE, ft);\n    sout += Line3d(cube[1],cube[3], T_LINE, ft);\n    sout += Line3d(cube[3],cube[2], T_LINE, ft);\n    sout += Line3d(cube[2],cube[0], T_LINE, ft);\n    \n    sout += Line3d(cube[4],cube[5], T_LINE, ft);\n    sout += Line3d(cube[5],cube[7], T_LINE, ft);\n    sout += Line3d(cube[7],cube[6], T_LINE, ft);\n    sout += Line3d(cube[6],cube[4], T_LINE, ft);\n    \n    sout += Line3d(cube[0],cube[4], T_LINE, ft);\n    sout += Line3d(cube[5],cube[1], T_LINE, ft);\n    sout += Line3d(cube[2],cube[6], T_LINE, ft);\n    sout += Line3d(cube[7],cube[3], T_LINE, ft);\n    \n    return vec2( sout );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}