{
    "Shader": {
        "info": {
            "date": "1421672071",
            "description": "Shader emulation of the C64 game Boulder Dash title screen - with bit bad UHF modulator. :)\n\nhttps://www.youtube.com/watch?v=FiEVfa1OK_o&t=6",
            "flags": 8,
            "hasliked": 0,
            "id": "4tsGD8",
            "likes": 13,
            "name": "Boulder Dash title (sound)",
            "published": 3,
            "tags": [
                "game",
                "retro",
                "c64",
                "theme"
            ],
            "usePreview": 0,
            "username": "srtuss",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "// srtuss, 2015\n\n#define pi2 6.283185307179586476925286766559\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n#define obs2 0.70710678118654752440084436210485\n\nfloat titlefnt(vec2 p)\n{\n    float v;\n    vec2 q;\n    \n    v = -100.0;\n    \n    // b\n    v = max(v, (p.x + abs(p.y + 0.5)) * obs2 - 23.5);\n    \n    v = max(v, -((5. - p.x + abs(p.y - 3.5)) * obs2));\n    \n    q = abs(p - vec2(2., 16.));\n    v = max(v, -max(q.x - 5., q.y - 4.));\n    q.y = abs(p.y + 8.0);\n    v = max(v, -max(q.x - 5., q.y - 4.));\n    \n    q = abs(p);\n    v = max(v, max(q.x - 9., q.y - 28.));\n    \n    float cp = v;\n    \n    \n    p.x -= 22.;\n    \n    // o\n    q = abs(p - vec2(0., -4.));\n    v = max(q.x - 7.0, q.y - 24.);\n    q = abs(p - vec2(2., -1.));\n    v = max(v, -max(q.x - 3.0, q.y - 12.));\n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // u\n    q = abs(p - vec2(0., -4.));\n    v = max(q.x - 7.0, q.y - 24.);\n    q = vec2(abs(p.x - 2.), -p.y -1.);\n    v = max(v, -max(q.x - 3.0, q.y - 12.));\n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // l\n    q = abs(p - vec2(0., -4.));\n    v = max(q.x - 7.0, q.y - 24.);\n    q = vec2(-p.x + 2., -p.y - 1.);\n    v = max(v, -max(q.x - 3.0, q.y - 12.));\n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // d\n    q = abs(p - vec2(0., -4.));\n    v = max(q.x - 7.0, q.y - 24.);\n    q = abs(p - vec2(2., -1.));\n    v = max(v, -max(q.x - 3.0, q.y - 12.));\n    v = max(v, (p.x + abs(p.y + 4.5)) * obs2 - 19.0);\n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // e\n    q = vec2(-p.x + 2., abs(p.y) - 0.5);\n    v = -max(q.x - 3.0, q.y - 12.);\n    q = vec2(p.x - 3., abs(p.y) - 4.0);\n    v = min(v, max(q.x, q.y));\n    \n    q = abs(p - vec2(0., -4.));\n    v = max(v, max(q.x - 7.0, q.y - 24.));\n    \n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // r\n    v = 0.0;\n    \n    q = abs(p - vec2(2., 8.));\n    v = -max(q.x - 3.0, q.y - 4.);\n    v = max(v, -max(q.x - 3.0, p.y + 12.));\n    \n    q = abs(p - vec2(0., -4.));\n    v = max(v, max(q.x - 7.0, q.y - 24.));\n    \n    v = max(v, (p.x + p.y + 4.5) * obs2 - 19.0);\n    v = max(v, -((abs(p.y + 4.5) - p.x) * obs2 + 2.0));\n    \n    cp = min(cp, v);\n    \n    \n    p.x += 102.;\n    p.y += 64.;\n    \n    // line2 b\n    v = (p.x + abs(p.y + 0.5)) * obs2 - 23.5;\n    \n    q = abs(p - vec2(2., 4.));\n    v = max(v, -max(q.x - 5., q.y - 16.));\n    \n    q = abs(p);\n    v = max(v, max(q.x - 9., q.y - 28.));\n    \n    cp = min(cp, v);\n    \n    \n    p.x -= 22.;\n    \n    // a\n    q = abs(p - vec2(2., 8.));\n    v = -max(q.x - 3.0, q.y - 4.);\n    v = max(v, -max(q.x - 3.0, p.y + 4.));\n    \n    v = max(v, (p.x + p.y + 4.5) * obs2 - 19.0);\n    v = max(v, -max(p.x + 3., 12.-p.y));\n    \n    q = abs(p - vec2(0., -4.));\n    v = max(v, max(q.x - 7.0, q.y - 24.));\n    \n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // s\n    q = vec2(p.x, abs(p.y - 8.));\n    v = -max(-1. - q.x, q.y - 4.);\n    q = vec2(p.x, abs(p.y + 8.));\n    v = max(v, -max(-1. + q.x, q.y - 4.));\n    \n    q = abs(p - vec2(0., -4.));\n    v = max(v, max(q.x - 7.0, q.y - 24.));\n    \n    cp = min(cp, v);\n    \n    p.x -= 22.;\n    \n    // h\n    q = vec2(abs(p.x - 2.), abs(p.y));\n    v = min(-q.x + 5., q.y - 4.);\n    \n    q = abs(p - vec2(0., -4.));\n    v = max(v, max(q.x - 9.0, q.y - 24.));\n    \n    cp = min(cp, v);\n    \n    p.x -= 20.;\n    \n    // box\n    q = abs(p - vec2(0., 16.0));\n    cp = min(cp, max(q.x - 5.0, q.y - 4.0));\n    \n    return cp;\n}\n\nfloat titlecmp(vec2 p, vec2 po)\n{\n    float fnt = step(titlefnt(p), 0.0);\n    fnt = max(fnt, step(titlefnt(p + vec2(1.0, 0.0)), 0.0) * 0.4);\n    fnt = max(fnt, step(titlefnt(p + vec2(2.0, 0.0)), 0.0) * 0.2);\n    \n    p.y = floor(po.y - iTime * 34.0) - 0.5;\n    \n    float idy = floor(p.y / 4.);\n    p.x += idy * 2. + 1.;\n    vec2 q = mod(p, vec2(4.));\n    q -= .5;\n    float qd = (q.x * q.x + q.y * q.y) * .2;\n    \n    float v = mix(0.3, qd, step(max(q.x - 1.0, q.y - 2.), 0.0)) + 0.1;\n    v = mix(fnt, v, step(fnt, 0.01));\n    \n    return v;\n}\n\nfloat hsh(float x)\n{\n    return fract(sin(x * 12.315623) * 219862.251235);\n}\n\nfloat hsh(vec2 p)\n{\n    return fract(sin(p.x + p.y * 2.39996) * 219862.251235);\n}\n\nfloat nse(float x)\n{\n    float fl = floor(x);\n    return mix(hsh(fl), hsh(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\nfloat nse(vec2 p)\n{\n    vec2 fl = floor(p);\n    vec2 fr = fract(p);\n    fr = fr * fr * (3.0 - 2.0 * fr);\n    vec2 h = vec2(1.0, 0.0);\n    return mix(mix(hsh(fl), hsh(fl + h.xy), fr.x), mix(hsh(fl + h.yx), hsh(fl + h.xx), fr.x), fr.y);\n}\n\nvec3 px(vec2 p)\n{\n   \t\n    \n    p *= vec2(0.5, 1.0);\n    vec2 po = p;\n    p = floor(p);\n    p -= 0.5;\n    \n    p += vec2(124.0 * 0.5, -30.0);\n    \n    float v = titlecmp(p, po);\n    \n    vec2 q;\n    \n    q = abs(p - vec2(61.0, -32.0));\n    float w = max((q.x - 78.) * 2.0, q.y - 70.);\n    \n    v = mix(v, 1.0, step(abs(w) - 4.0, 0.0));\n    v *= step(w, 0.0);\n    \n    vec3 col = pow(vec3(v), vec3(0.6, 0.4, 0.1) * 3.0) * 1.2;\n    \n    float lerr = step(iTime - 0.1, 0.0);\n    col *= 1.0 - lerr;\n    col = mix(col, vec3(1.0, 0.1, 0.0), step(abs(p.y - 10.0) - 5.0, 0.0) * lerr);\n    col = mix(col, vec3(1.0, 0.1, 0.0), step(abs(p.y - 30.0) - 2.0, 0.0) * lerr);\n    col = mix(col, vec3(0.0, 1.0, 0.0), step(abs(p.y - 8.0) - 1.0, 0.0) * lerr);\n    \n    return col;//ceil(v * 4.0 - 0.5) / 3.0;\n}\n\nvec3 pxss(vec2 p, float scl, float flow)\n{\n    vec3 h = vec3(6.0 / iResolution.y, 1.0 / iResolution.y, 0.0);\n    h *= scl * 0.5;\n    p *= scl;\n    h *= flow;\n    return (px(p) + px(p + h.xz) + px(p + h.zy) + px(p + h.xy)) / 4.0;\n}\n\nvec3 tv(vec2 p)\n{\n    float ll = dot(p, p);\n    p *= (ll * ll * 0.01 + ll * ll * ll * 0.001 + ll * 0.04) * 0.3 + 0.99;\n    //p = rotate(p, -0.03);\n    \n    float dstY = fract(iTime * 0.2) * 100.0 - 50.0;\n    float dst = dstY - p.y;\n    dst = dst * dst;\n    float dN = (nse(iTime * 5.0) + nse(iTime * 15.0) * 0.5) * 0.66666666666;\n    float dstI = pow(dN, 1.0);\n    float gryI = pow(dN, 2.0);\n    float synI = pow(dN, 7.0);\n    p.x -= exp(dst * -2.0) * 10.0 * dstI;\n    //float synI = pow(nse(iTime * 10.0), 10.0) * 10.0 * fract(iTime);\n    //p.y = (fract(p.y * 0.5 + 0.5 - synI) - 0.5) / 0.5;\n    \n    \n    \n    \n    \n    float tst = 0.25;\n    vec3 col = pow(vec3(pxss(p, tst * iResolution.y, synI * 10.0 + 1.0)), vec3(0.6, 0.5, 0.1) * 2.0);\n    \n    \n    \n    //uv * 90.0 + vec2(124.0, -30.0)\n    \n    col = mix(col, pow(vec3(col.x + col.y + col.z) / 4.0, vec3(0.5)), gryI);\n    col -= exp(dst * -0.1) * dstI * 1.0;\n    col += nse(rotate(p * 22. + 100.0, iTime * 40.0)) * (0.02 + synI);\n    \n    vec2 pp = p - vec2(1.4, 0.7);\n    vec2 q = abs(pp);\n    float v = q.y;\n    v = min(v, max(pp.x + 0.08, -pp.y));\n    v = min(v, max(q.x, pp.y - 0.04));\n    v = max(v, max(q.x - 0.08, abs(pp.y - 0.03) - 0.13));\n    col = mix(col, vec3(0.2, 0.8, 0.1), smoothstep(0.01, 0.0, v - 0.02) * step(iTime, 4.0));\n    \n    \n    \n    col *= cos(p.y * tst * iResolution.y * pi2) * 0.1 + 0.9;\n    \n    col += exp(length(p * vec2(0.3, 1.0)) * -3.0) * 0.2;\n\n    \n    \n    \n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    /*float nt = uv.x;\n    float v = (smoothstep(0.0, 0.2, nt) * smoothstep(1.0, 0.3, nt));\n    \n    v = abs(v - uv.y);\n    \n    v = min(v, abs(uv.x - 1.0));\n    \n    v = smoothstep(0.0, 0.01, v);*/\n    \n    //vec3 col = px(uv * 90.0 + vec2(124.0, -30.0)) * vec3(1.0);\n    vec3 col = tv(uv) * vec3(1.0);\n    \n    \n    col = pow(col, vec3(1.0 / 2.0));\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "#define BAD_SOUND\n\n#define PHS(tm, d0, d1) v+=max(t-tm,.0)*vec2(d0,d1);\n\nvec2 c0(float t)\n{\n    vec2 v;\n    t = mod(t, 128.0);\n    PHS(.0,29.1352,58.2705);PHS(1.,14.5183,15.1457);PHS(2.,14.6169,13.8909);PHS(3.,11.0252,29.2339);PHS(4.,-43.3391,-51.1345);\n    PHS(5.,23.0429,12.3754);PHS(6.,2.91366,9.52531);PHS(7.,25.8687,43.5057);PHS(8.,-54.6571,-38.3142);PHS(9.,.0,11.3276);\n    PHS(10.,23.1247,12.7148);PHS(11.,-23.1247,22.0504);PHS(12.,28.7884,-34.7651);PHS(13.,103.65,92.1715);PHS(14.,-100.563,-85.9977);\n    PHS(15.,83.5913,64.6141);PHS(16.,-109.456,-116.344);PHS(17.,.0,58.2705);PHS(18.,.0,-72.8874);PHS(19.,.0,21.7529);\n    PHS(20.,-3.17869,-13.4933);PHS(21.,.0,78.8997);PHS(22.,.0,-65.4064);PHS(23.,.0,-13.4933);PHS(24.,3.17869,6.35738);\n    PHS(25.,.0,58.2705);PHS(26.,.0,-72.8874);PHS(27.,.0,21.7529);PHS(28.,17.1141,27.0922);PHS(29.,.0,140.583);\n    PHS(30.,.0,-116.541);PHS(31.,.0,-24.0423);PHS(32.,-20.2928,11.3276);PHS(34.,.0,-64.9353);PHS(35.,.0,19.3796);\n    PHS(36.,15.2469,24.1364);PHS(37.,.0,125.245);PHS(38.,.0,-103.826);PHS(39.,.0,-21.4193);PHS(40.,-19.3767,-38.7534);\n    PHS(41.,65.4803,66.3465);PHS(42.,-65.4803,-61.0006);PHS(43.,65.4803,67.5415);PHS(44.,-67.8616,-38.7592);PHS(46.,9.6898,77.7817);\n    PHS(47.,.0,-77.7817);PHS(48.,.0,38.7592);PHS(52.,29.1352,.0);PHS(54.,-29.1352,.0);PHS(56.,-3.17869,.0);\n    PHS(60.,25.9565,.0);PHS(62.,-25.9565,.0);PHS(64.,3.17869,.0);PHS(65.,117.697,.0);PHS(66.,-117.697,.0);\n    PHS(67.,126.428,.0);PHS(68.,-97.293,.0);PHS(69.,88.5619,.0);PHS(70.,-117.697,.0);PHS(71.,126.428,.0);\n    PHS(72.,-129.607,.0);PHS(73.,120.876,.0);PHS(74.,-120.876,.0);PHS(75.,129.607,.0);PHS(76.,-103.65,-12.7148);\n    PHS(77.,78.8997,.0);PHS(78.,-104.856,.0);PHS(79.,112.635,.0);PHS(80.,-109.456,12.7148);PHS(81.,.0,116.541);\n    PHS(82.,.0,-116.541);PHS(83.,145.479,91.1114);PHS(84.,-116.344,-91.1114);PHS(85.,.0,79.4568);PHS(86.,-29.1352,-79.4568);\n    PHS(87.,109.456,58.0732);PHS(88.,-112.635,-70.7879);PHS(89.,.0,103.826);PHS(90.,.0,-103.826);PHS(91.,.0,103.826);\n    PHS(92.,25.9565,-103.826);PHS(93.,.0,51.7373);PHS(94.,-25.9565,-51.7373);PHS(95.,.0,103.826);PHS(96.,3.17869,-91.1114);\n    PHS(97.,117.697,.0);PHS(98.,-117.697,.0);PHS(99.,126.428,.0);PHS(100.,-97.293,.0);PHS(101.,88.5619,.0);\n    PHS(102.,-117.697,.0);PHS(103.,126.428,.0);PHS(104.,-129.607,.0);PHS(105.,120.876,.0);PHS(106.,-120.876,.0);\n    PHS(107.,129.607,.0);PHS(108.,-103.65,-12.7148);PHS(109.,78.8997,.0);PHS(110.,-104.856,.0);PHS(111.,112.635,.0);\n    PHS(112.,-22.0504,43.0062);PHS(113.,-29.2339,-30.2914);PHS(114.,-13.8909,-29.2339);PHS(115.,-15.1457,-13.8909);PHS(116.,45.5557,57.3966);\n    PHS(117.,-26.0444,-26.9866);PHS(118.,-12.3754,-26.0444);PHS(119.,-39.4498,-25.8687);PHS(120.,148.658,94.9193);PHS(121.,-27.7817,-30.2914);\n    PHS(122.,-30.2914,-29.2339);PHS(123.,-29.2339,-13.8909);PHS(124.,-9.52531,57.3966);PHS(125.,-12.3754,-26.9866);PHS(126.,-13.4933,-26.0444);\n    PHS(127.,-25.9565,-25.8687);\n\treturn v;\n}\n\n#define pi2 6.283185307179586476925286766559\n\nfloat hsh(float x)\n{\n    return fract(sin(x * 12.315623) * 219862.251235);\n}\n\nfloat nse(float x)\n{\n    float fl = floor(x);\n    return mix(hsh(fl), hsh(fl + 1.0), smoothstep(0.0, 1.0, fract(x)));\n}\n\nvec2 osc(float x)\n{\n    float h = 0.01;\n    //float v = ((abs(fract(x + h) - 0.5) - 0.5) - (abs(fract(x - h) - 0.5) - 0.5)) * 0.03 / h;\n    //return vec2(v);\n    return vec2(abs(fract(x) - 0.5) - 0.5, abs(fract(x - 0.05) - 0.5) - 0.5);\n}\n\nvec2 s(float time)\n{\n    float ts = 2.2;\n    \n    \n#ifdef BAD_SOUND\n   \t//time = floor(time * 10000.0) / 10000.0;\n    time = time + sin(time * 40.0) * 0.0001;\n#endif\n    \n    float songtime = time - 0.8;\n    \n    //float v = 0.0;\n    vec2 phs = c0(songtime * 3.0 * ts) / ts;\n   \tvec2 v = osc(phs.x);//pow(sin(phs * pi2), 2.0) - 0.5;\n    v += osc(phs.y);\n    float nt = fract(songtime * 3.0 * ts);\n    v *= (smoothstep(0.0, 0.007, nt) * smoothstep(1.0, 0.3, nt)) * 0.5 + 0.5;\n    \n    vec2 beep = osc(mix(1560.8, 3543.1, fract(1.61803398875 * floor(songtime * 35.0))) * songtime) * 0.8;\n\n    v = mix(v, beep, step(songtime, 0.0));\n    \n#ifdef BAD_SOUND   \n    float dN = (nse(time * 5.0) + nse(time * 15.0) * 0.5) * 0.66666666666;\n    v += nse(fract(time * 100.0) * 50.0) * clamp(pow(dN * 1.2, 30.0), 0.0, 1.0) * 0.1;\n    v += hsh(time) * (0.005 + pow(dN, 20.0) * 0.5);\n    v *= 1.1;\n#endif\n    return v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 v = s(time);\n    v += s(time - 0.02) * 0.4;\n    v += s(time - 0.04) * 0.25;\n    v += s(time - 0.06) * 0.2;\n    \n    return v * .6;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}