{
    "Shader": {
        "info": {
            "date": "1536740318",
            "description": "Fake occlusion from an ellipsoids (into any surface)",
            "flags": 0,
            "hasliked": 0,
            "id": "llGyzG",
            "likes": 21,
            "name": "Capsule - occlusion",
            "published": 3,
            "tags": [
                "3d",
                "occlusion",
                "capsule"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1622
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Fake occlusion from a capsule into arbitrary surfaces.\n\n// Other capsule functions:\n//\n// Capsule intersection: https://www.shadertoy.com/view/Xt3SzX\n// Capsule bounding box: https://www.shadertoy.com/view/3s2SRV\n// Capsule distance:     https://www.shadertoy.com/view/Xds3zN\n// Capsule occlusion:    https://www.shadertoy.com/view/llGyzG\n\n\n// Other shaders with analytical occlusion or approximations:\n// \n// Box:                        https://www.shadertoy.com/view/4djXDy\n// Box with horizon clipping:  https://www.shadertoy.com/view/4sSXDV\n// Triangle:                   https://www.shadertoy.com/view/XdjSDy\n// Sphere:                     https://www.shadertoy.com/view/4djSDy\n// Ellipsoid (approximation):  https://www.shadertoy.com/view/MlsSzn\n// Capsule (approximation):    https://www.shadertoy.com/view/llGyzG\n\n\n\n// define this to compare to grount truth\n//#define SHOW_REAL_OCCLUSION\n\n\n// fake occlusion\nfloat capOcclusion( in vec3 p, in vec3 n, in vec3 a, in vec3 b, in float r )\n{\n    // closest sphere\n    vec3  ba = b - a, pa = p - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    vec3  d = pa - h*ba;\n    float l = length(d);\n    float o = dot(-d,n)*r*r/(l*l*l); // occlusion of closest sphere\n    o *= 1.0 + r*(l-r)/(l*l);  // multiplier\n    return clamp(1.0-o,0.0,1.0);\n}\n\n\n// intersect capsule\nfloat capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float r )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - r*r*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 )\n    {\n        float t = (-b-sqrt(h))/a;\n\n        float y = baoa + t*bard;\n        \n        // body\n        if( y>0.0 && y<baba ) return t;\n\n        // caps\n        vec3 oc = (y<=0.0) ? oa : ro - pb;\n        b = dot(rd,oc);\n        c = dot(oc,oc) - r*r;\n        h = b*b - c;\n        if( h>0.0 )\n        {\n            return -b - sqrt(h);\n        }\n    }\n    return -1.0;\n}\n\n// compute normal\nvec3 capNormal( in vec3 pos, in vec3 a, in vec3 b, in float r )\n{\n    vec3  ba = b - a;\n    vec3  pa = pos - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return (pa - h*ba)/r;\n}\n\n\n\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n\n\n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.0*cos(an), 0.5, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n        // create view ray\n\t    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n    \n        vec4 rrr = texture( iChannel0, (fragCoord.xy)/iChannelResolution[0].xy, -99.0  ).xzyw;\n\n\n        vec3  capA = vec3(0.0,0.3,0.0) + vec3(0.5,0.15,0.5)*cos( iTime*1.1 + vec3(0.0,1.0,4.0) );\n        vec3  capB = vec3(0.0,0.3,0.0) + vec3(0.5,0.15,0.5)*cos( iTime*1.7 + vec3(2.0,5.0,3.0) );\n        const float capR = 0.15;\n        \n    \tvec3 col = vec3(0.0);\n\n        const vec3 lig = normalize(vec3(-0.8,0.8,0.2));\n    \n        // capsule\n        float tmin = 1e20;\n        float occ = 1.0;\n        vec3 nor;\n    \n        {\n            float t = capIntersect( ro, rd, capA, capB, capR );\n            if( t>0.0 )\n            {\n                tmin = t;\n                vec3 pos = ro + t*rd;\n                nor = capNormal(pos, capA, capB, capR );\n                col = vec3( 0.5 + 0.5*nor.y );\n            }\n        }\n        // plane (floor)\n        {\n            float t = (-0.0-ro.y)/rd.y;\n            if( t>0.0 && t<tmin )\n            {\n                tmin = t;\n                vec3 pos = ro + t*rd;\n                nor = vec3(0.0,1.0,0.0);\n                \n                #ifndef SHOW_REAL_OCCLUSION    \n                \n                occ = capOcclusion( pos, nor, capA, capB, capR ); \n                \n                #else\n                vec3  ru  = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n                vec3  rv  = normalize( cross( ru, nor ) );\n    \n                occ = 0.0;\n                for( int i=0; i<256; i++ )\n                {\n                    vec2  aa = hash2( rrr.x + float(i)*203.1 );\n                    float ra = sqrt(aa.y);\n                    float rx = ra*cos(6.2831*aa.x); \n                    float ry = ra*sin(6.2831*aa.x);\n                    float rz = sqrt( 1.0-aa.y );\n                    vec3  dir = vec3( rx*ru + ry*rv + rz*nor );\n                    float res = capIntersect( pos, dir, capA, capB, capR );\n                    occ += step(0.0,res);\n                }\n                occ = 1.0 - occ/256.0;\n                #endif\n    \n                col = vec3(occ);\n            }\n        }\n\t\n        col = sqrt( col );\n\t\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}