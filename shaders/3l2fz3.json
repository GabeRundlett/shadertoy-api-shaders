{
    "Shader": {
        "info": {
            "date": "1599502425",
            "description": "Dithering with color shift",
            "flags": 0,
            "hasliked": 0,
            "id": "3l2fz3",
            "likes": 48,
            "name": "Dithering with color shift",
            "published": 3,
            "tags": [
                "raymarching",
                "dithering"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 1921
        },
        "renderpass": [
            {
                "code": "#define textureCube texture\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n#define IVORY 1.\n#define BLUE 2.\n#define BLACK 3.\n#define RED 4.\n\n#define PHI (sqrt(5.)*0.5 + 0.5)\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nvec2 getDist(vec3 p, float t) {\n    p.xz*=Rot(t*5.);\n    p.xy*=Rot(t*7.);\n    float scale = 1. + .2*sin(t * 10.);\n    p /= scale;\n    return vec2(/*sdBox(p, vec3(1))*/sdTorus(p, vec2(1.2, .5)) * scale, RED);\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\n\n\n\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd, float t) {\n\tfloat d = 0.;\n    float info = 0.;\n    int steps = 0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d, t);\n        steps++;\n        d += abs(distToClosest.x);\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, steps);\n}\n\nvec3 getNormal(vec3 p, float t) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p, t).x - vec3(getDist(p - e.xyy, t).x,\n                               getDist(p - e.yxy, t).x,\n                               getDist(p - e.yyx, t).x);\n\treturn normalize(n);\n}\n\n\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float camRadius = 4.;\n    vec3 ro = vec3(0, 0, -camRadius);\n    float zoom = 1.100;\n\tfloat t = iTime / 5.;\n    vec3 color, rm, rd = getRayDir(uv, ro, vec3(0), 1.);\n    float d;\n    for (int i = 0; i < 3; i++) {\n        rm = rayMarch(ro, rd, t);\n        d = rm[0];\n        vec3 light = vec3(10,0,0);\n        vec3 p = ro + rd * d;\n        if (d < MAX_DIST) {\n            vec3 n = getNormal(p, t);\n            vec3 dirToLight = normalize(light - p);\n            vec3 rayMarchLight = rayMarch(p + dirToLight * .06, dirToLight, t);\n            float distToObstable = rayMarchLight.x;\n            float distToLight = length(light - p);\n            if (d < MAX_DIST) {\n                color[i] = .5 * (dot(n, normalize(light - p))) + .5;\n                color[i] = step(\n                    texture(iChannel0, (fragCoord + 8.*float(i))/32.).x, \n                    color[i]\n                );\n            }\n        }\n        t += .01;\n    }\n\n    fragColor = vec4(vec3(color), 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}