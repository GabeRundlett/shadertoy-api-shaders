{
    "Shader": {
        "info": {
            "date": "1557501758",
            "description": "Test",
            "flags": 0,
            "hasliked": 0,
            "id": "Wll3WB",
            "likes": 4,
            "name": "Discrepancy logo",
            "published": 3,
            "tags": [
                "retrowave"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float cMin = 0.05;\nconst float cMax = 0.07;\nfloat thick = cMax - cMin;\nvec3 colTypo = vec3(0.191, 0.387, 0.734)*1.2;\nvec3 colA = vec3(151.0,95.0,180.0)/255.0*1.6;\nvec3 colB = vec3(240.0,149.0,55.0)/255.0*1.6;\nvec3 black = vec3(0.0);\nvec3 flareCol = vec3(0.123, 0.234, 0.789)*0.5;\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat sat(float a)\n{\n    return clamp(a,0.,1.);\n}\nvec3 sat(vec3 v)\n{\n    return vec3(sat(v.x), sat(v.y), sat(v.z));\n}\n\nbool inRange(float a, float mi, float ma)\n{\n  return a > mi && a < ma;\n}\n\nfloat lengthNY(vec2 v)\n{\n  return abs(v.x) + abs(v.y);\n}\n\nfloat drawD(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  float val = float(inRange(uv.y, -cMax, cMax) && inRange(uv.x,-thick*2.0, -thick));\n  float val2 = float(inRange(length(uv), cMin, cMax) && uv.x > 0.0);\n  return val + val2;\n}\n\nfloat drawY(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  float valA = float(inRange(length(uv+vec2(0.0, -cMax)), cMin, cMax) && uv.y < cMax && !inRange(uv.x, -thick, thick));\n  float valB = float(inRange(uv.x, -thick*0.5,thick*0.5) && inRange(uv.y, -cMax, 0.0));\n  return valA +valB;\n}\n\nfloat drawN(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  float val = float(inRange(length(uv), cMin, cMax) && uv.y > 0.0);\n  float valB = float(inRange(uv.y, -cMax, 0.0) && (inRange(uv.x, -cMax, -cMin) || inRange(uv.x, cMin, cMax)));\n  return val+valB;\n}\n\nfloat drawI(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  return float(inRange(uv.y, -cMax, cMax) && inRange(uv.x, -thick*0.5,thick*0.5));\n}\n\nfloat drawS(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n//  float ref = float(inRange(length(uv), cMin, cMax));\n  float valA = float(inRange(length(uv), cMin, cMax) && !inRange(uv.y, -thick, thick));\n  float valB = float(inRange(-uv.y - uv.x*0.4, -thick*0.5, thick*0.5) &&\n    length(uv) < cMax);\n  return valA + valB;\n}\n\n\nfloat drawC(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  bool onCir = inRange(length(uv), cMin, cMax);\n  float valA = float(onCir && uv.x > 0.0 && !inRange(uv.y, -thick, thick) ||\n    uv.x <= 0.0 && onCir);\n\n  return valA;\n}\n\n\nfloat drawP(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  float val = float(inRange(uv.y, -cMax, cMax) && inRange(uv.x,-thick*2.0, -thick));\n  float val2 = float(inRange(length(uv+vec2(0.0, -0.02)), cMin - thick, cMin) && uv.x > 0.0);\n\n  return val + val2;\n}\n\nfloat drawR(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  float val = float(inRange(uv.y, -cMax, cMax) && inRange(uv.x,-thick*2.0, -thick));\n  float val2 = float(inRange(length(uv+vec2(0.0, -0.02)), cMin - thick, cMin) && uv.x > 0.0);\n  uv -= vec2(0.0, -0.02);\n  float  val3 = float(inRange(-uv.y-uv.x, -thick*0.5,thick*0.5) &&\n    inRange(uv.y, -0.05, -0.02));\n  return val + val2 + val3;\n}\n\nfloat drawE(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  bool onCir = inRange(length(uv), cMin, cMax);\n  float valA = float(onCir && uv.x > 0.0 && !inRange(uv.y, -thick, thick) ||\n    uv.x <= 0.0 && onCir);\n  float valB = float(inRange(uv.y, -thick*0.5, thick*0.5) &&\n    inRange(uv.x, -cMin + thick*0.5, cMin - thick*0.5));\n  return valA+valB;\n}\n\nfloat drawA(vec2 uv, vec2 pos, float scale)\n{\n  uv = (uv - pos)*(1.0/scale);\n  bool onCir = inRange(length(uv), cMin, cMax);\n  float valA = float((onCir && uv.x > 0.0 && !inRange(uv.y, -thick, thick) ||\n    uv.x <= 0.0 && onCir) && uv.y > 0.0);\n  float valB = float(inRange(uv.y, -thick*0.5, thick*0.5) &&\n    inRange(uv.x, -cMin + thick*0.5, cMin - thick*0.5));\n  float valC = float(inRange(uv.x, -cMax, -cMin) && inRange(uv.y, -cMax, 0.0));\n  float valD = float(inRange(uv.x, cMin, cMax) && inRange(uv.y, -cMax, -thick));\n  return valA+valB+valC+valD;\n}\n\nvec3 drawTxt(vec2 uv, vec2 pos)\n{\n  float scale =0.9;\n  float res;\n  float offX = -0.25;\n  float sp =3.3;\n\n  uv.y *= (sin(10.0*uv.x+iTime)+1.5)*0.5;\n\n  res += drawD(uv, pos+vec2(sp*-0.1+offX,0.0), scale);\n  res += drawI(uv, pos+vec2(sp*-0.07+offX,0.0), scale);\n  res += drawS(uv, pos+vec2(sp*-0.04+offX,0.0), scale);\n  res += drawC(uv, pos+vec2(offX,0.0), scale);\n  res += drawR(uv, pos+vec2(sp*0.037+offX,0.0), scale);\n  res += drawE(uv, pos+vec2(sp*0.075+offX,0.0), scale);\n  res += drawP(uv, pos+vec2(sp*0.11+offX,0.0), scale);\n  res += drawA(uv, pos+vec2(sp*0.15+offX,0.0), scale);\n  res += drawN(uv, pos+vec2(sp*0.195+offX,0.0), scale);\n  res += drawC(uv, pos+vec2(sp*0.235+offX,0.0), scale);\n  res += drawY(uv, pos+vec2(sp*0.275+offX,0.0), scale);\n\n  return vec3(clamp(res,0.0,1.0));\n}\n\nvec3 drawTxtChroma(vec2 uv, vec2 pos)\n{\n  float spread= 0.0005;\n  vec2 dir=vec2(1.0,0.0);\n  vec3 col;\n  col.r = drawTxt(uv+dir*spread, pos).r;\n  col.g = drawTxt(uv, pos).g;\n  col.b = drawTxt(uv-dir*spread, pos).b;\n  return sat(col)+rand(.1*uv+vec2(iTime,.0))*.7;\n}\n\n\nvec3 renderBack(vec2 uv, float uvYO)\n{\n  if (length(uv) > 0.4)\n     return black;\n  vec3 grad = mix(colA, colB, uvYO);\n\n  float val = 0.005*pow(1.0-uvYO,2.0)+(sin(iTime+uv.x*10.0)+1.0)*0.0001;\n  float modV = val *2.0;\n  float coefGrnd = float(uv.y > 0.0) + uv.y+float(uv.y < 0.0 && mod(uv.y, modV)<val);\n  return sat(mix(mix(grad, black,0.1-uv.y*4.0), grad, coefGrnd));\n}\n\nvec3 render(vec2 uv, float uvYO)\n{\n  return renderBack(uv, uvYO);\n}\n\nvec3 rdr(vec2 uv, float buUvY)\n{\n  vec3 col = render(uv, buUvY);\n  col=max(col, vec3(0.0));\n  int samples = 2;\n  vec3 acc;\n\n  for (int i=0;i < samples;++i)\n  {\n    float iF = float(i - samples/2);\n    iF /= float(samples/2);\n    vec2 off = (.2*vec2(rand(uv),rand(uv.yx))-0.5)*0.01;\n   iF = (1.0-iF)*(length(off)+0.4);\n    acc+=render(uv+off, buUvY)*iF;\n\n  }\n  return col+acc;\n}\n\nvec3 rdrChroma(vec2 uv, float uvY)\n{\n  vec3 col;\n  float sa = sin(iTime*13.0);\n  float sb = sin(iTime*13.0+0.1);\n  float beat = (sa > sb ? 1.0 : 0.0)*(sa+1.0);\n  float spread= 0.01*beat;\n  vec2 dir=vec2(1.0,0.0);\n  col.r = rdr(uv+dir*spread, uvY).r;\n  col.g = rdr(uv, uvY).g;\n  col.b = rdr(uv-dir*spread, uvY).b;\n  return col;\n}\n\nvec3 rdrDiscrepancy(vec2 uv)\n{\n  vec3 col = drawTxtChroma(uv, vec2(0.0))*colTypo;\n  if (col.r>0.1)\n    return col;\n  return vec3(0.0);\n}\n\nvec3 rdrFlare(vec2 uv)\n{\n  float ln = lengthNY(vec2(uv.x+sin(iTime*0.5)*5.0,uv.y));\n  float flare = (1.0-(ln / 3.0));\n\n  float flareB = 1.0-(pow(ln,2.0)/2.0);\n  return flareCol* flare+max(flareB,0.0)*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float buUvY = uv.y;\n\n  float ratio = iResolution.x / iResolution.y;\n  uv.x *= ratio;\n  uv -= vec2(0.5 * ratio, 0.5);\n\n  vec3 outCol = rdrChroma(uv, buUvY);\n\n  vec3 discCol = rdrDiscrepancy(uv);\n\n  if(true)//discCol.r > 0.05)\n  {\n    float ld = length(discCol);\n    if (uv.y < 0.0 && mod(uv.y,0.005) < 0.0025)\n      discCol = black;\n    outCol = mix(outCol, discCol, ld);\n\n  }\n  outCol += rdrFlare(uv) + flareCol.zyy*pow(1.-length(uv*0.2),5.)*2.;\n  fragColor = vec4(outCol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}