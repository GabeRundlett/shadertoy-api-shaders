{
    "Shader": {
        "info": {
            "date": "1622208481",
            "description": "I was experimenting with some motion and ended up finding the absolutelly horrible motion which make me dizzy very quickly.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsBSWd",
            "likes": 3,
            "name": "pukeodrome",
            "published": 3,
            "tags": [
                "raymarching",
                "dizzy"
            ],
            "usePreview": 0,
            "username": "maeln",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "#define MAXSTEPS 128\n#define MINDIST  0.0005\n#define MAXDIST  20.0\n#define saturate(x) (clamp(0.0, 1.0, x))\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = 0.5;\n    //\n    // Loop of octaves\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\n// Primitive fun from Iq: \n// https://iquilezles.org/articles/distfunctions\n\nstruct pLight {\n    vec3 position;\n    vec3 ambiant;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    return length(max(abs(p)-b,0.0));\n}\n\n\nfloat sdPlane(vec3 p)\n{\n  return p.y;\n}\n\nfloat sphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\t\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 cubes(vec3 p)\n{\n    p.z = min(p.z, 0.0);\n   \tvec3 c = vec3(1.0, 0.0, 1.0);\n    vec3 q = mod(p,c)-0.5*c;\n    float y = 0.25+0.25*(1.0*2.0);\n    float prism = sdHexPrism(q-vec3(0.0, y, 0.0), vec2(0.25,0.1));\n    float cube = sdBox(q-vec3(0.0, y, 0.0), vec3(0.25));\n    return vec2(mix(cube, prism, (sin(iTime)+1.0)/2.0), 2.0);\n}\n\nvec2 spheres(vec3 p)\n{\n    //p.z = max(p.z, 0.0);\n   \tvec3 c = vec3(2.0, 2.0, 2.0);\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    q = (rotationMatrix(vec3(1.0, 0.0, 0.0), iTime) * vec4(q, 1.0)).xyz;\n    float s1 = sdBox(q-vec3(0,0,0), vec3(0.5));\n    float s2 = sphere(q-vec3(0,1.0,1.0), 0.5);\n    vec2 u1 = vec2(smin(s1,s2,0.3), 1.0);\n    \n    return vec2(s1, 1.0);\n}\n\nvec2 centralSphere(vec3 p) {\n    float centralSphere = sphere(p - vec3(1.0, 1.0+sin(iTime)*sin(iTime*2.0), cos(cos(cos(iTime)*0.3)*2.0)), 0.5);\n    \n    return vec2(centralSphere, 2.0);\n}\n\nvec2 scene(vec3 ray)\n{\n    vec2 plane = vec2(sdPlane(ray), 0);\n    vec2 b1 = cubes(ray);\n    vec2 u1 = spheres(ray);\n    vec2 c = centralSphere(ray);\n    return spheres(ray);\n}\n\nvec2 DE(vec3 ray) {\n    return scene(ray);\n}\n\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.0, MINDIST);\n\treturn normalize(vec3(\n    DE(pos + eps.yxx).x - DE(pos - eps.yxx).x,\n    DE(pos + eps.xyx).x - DE(pos - eps.xyx).x,\n    DE(pos + eps.xxy).x - DE(pos - eps.xxy).x));\n}\n\nvec2 raymarch(vec3 from, vec3 direction)\n{\n    float t = 1.0*MINDIST;\n    int i = 0;\n    float obj = -1.0;\n    for(int steps=0; steps<MAXSTEPS; ++steps)\n    {\n        ++i;\n        vec2 dist = DE(from + t * direction);\n        if(dist.x < MINDIST || t >= MAXDIST) break;\n        t += dist.x;\n        obj = dist.y;\n    }\n    \n    return vec2(t, t > MAXDIST ? -1.0 : obj);\n}\n\nvec3 fog(vec3 sky, vec3 mat, float dist) {\n    float fogAmount = 1.0 - min(exp(-dist*0.4), 1.0);\n    return mat;\n}\n\nvec3 material(vec2 c, vec3 hit, vec3 sky) {\n    vec3 color = sky;\n    if(c.y < 0.0) return color;\n    color = normalize(vec3(0.3*log2(c.x),0.2,0.8*(1.0-log2(c.x))));\n    return fog(sky, color, c.x);\n}\n\nvec3 phong(vec3 hit, vec3 eye, vec3 N, pLight light, float ks) {\n    vec3 L = normalize(light.position - hit);\n    vec3 V = normalize(eye - hit);\n    vec3 R = reflect(L, N);\n    vec3 ambiant = light.ambiant;\n    vec3 diffuse = max(dot(L,N), 0.0)*light.diffuse;\n    vec3 specular = pow(max(dot(R,V), 0.0), ks)*light.specular;\n    return ambiant + 0.5*(diffuse+specular);\n}\n\nfloat shininess(vec3 hit, vec3 eye, vec3 normal, pLight light) {\n    float ks = 1.0; // Specular component, should be part of the material.\n    vec3 L = light.position - hit;\n    vec3 R = reflect(L, normal);\n    vec3 V = eye - hit;\n    return pow(dot(R, V), ks);\n}\n\nmat3 rotationX(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, c, s,\n                0.0, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pLight l1 = pLight(vec3(iTime-3.0, 2.0*sin(iTime), cos(iTime)*3.0),\n                       vec3(0.8), vec3(1.0, 0.0, 0.0), vec3(0.8, 0.0, 0.0));\n    \n   \tpLight l2 = pLight(vec3(iTime-3.0, -2.0, -3.0),\n                       vec3(0.3), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 0.8));\n    \n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    \n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    int tx = int(uv2.x*512.0);\n    \n    vec3 target  = vec3(iTime-1.0, .5, 0.0);\n\tvec3 eye     = vec3(iTime, sin(iTime), cos(iTime));\n    vec3 up      = vec3(0.0, sin(iTime*0.5), cos(iTime*0.5));\n    target = eye + vec3(1.0, 0.0, 0.0);\n    \n    vec3 eyeDir   = normalize(target - eye);\n    vec3 eyeRight = normalize(cross(up, eye));\n    vec3 eyeUp    = normalize(cross(eye, eyeRight));\n    \n    vec3 rayDir = normalize(eyeRight * uv.x + eyeUp * uv.y + eyeDir);\n    \n    vec3 hi = vec3(255.0, 122.0, 122.0)/255.0;\n    vec3 lo = vec3(134.0, 22.0, 87.0)/255.0;\n    vec3 color = mix(lo, hi, fragCoord.y/iResolution.y);\n    vec3 sky = color;\n    vec2 c = raymarch(eye, rayDir);\n    vec3 hit = eye+c.x*rayDir;\n    vec3 norm = normal(hit);\n    \n    if(c.y >= 0.0) {\n        color = material(c, hit, color);\n        color = color * phong(hit, eye, norm, l1, 2.0);\n    }\n    \n\tfragColor = vec4(color, c.x/MAXDIST);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}