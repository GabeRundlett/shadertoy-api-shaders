{
    "Shader": {
        "info": {
            "date": "1574346730",
            "description": "with tricky implicit function",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKSRy",
            "likes": 0,
            "name": "Surface experiments",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define EPSILON 1e-4\n#define INFTY 1e6\n\nfloat surfaceSDF(vec3 p) {\n    float t = iTime * 0.1;\n    return 0.5 * \n        length(\n            mod(\n                vec3(\n                    2.0 * abs(sin(t) * cos(t)) * p.x,\n                    1.0 * abs(cos(t) + sin(0.5 * t)) * p.z,\n                    2.0 * cos(t) * p.y\n                )\n                + vec3(\n                    2.0 * sin(t), \n                    cos(t), \n                    0.0\n                ) \n                ,1.0\n            )\n            - 0.5\n        )\n        - 0.4 * (0.8 * cos(t) + sin(3.0 * p.x)) \n        * (sin(t) + 0.5 * sin(2.0 * p.y)) \n        * cos(4.0 * p.z);\n}\nfloat getAngle(vec3 p, vec3 q) {\n    return acos(dot(normalize(p), normalize(q)));\n}\nvec3 getNormal(vec3 p) {\n    float d = EPSILON;\n    return normalize(vec3(\n            surfaceSDF(p + vec3(d, 0.0, 0.0)) - surfaceSDF(p),\n            surfaceSDF(p + vec3(0.0, d, 0.0)) - surfaceSDF(p),\n            surfaceSDF(p + vec3(0.0, 0.0, d)) - surfaceSDF(p)\n        ));\n}\nfloat getDiff(vec3 p, vec3 dir) {\n    float d = EPSILON;\n    return (surfaceSDF(p + d*dir) - surfaceSDF(p)) / d;\n}\nmat3 rotX(float t) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, sin(t), cos(t),\n        0.0, - cos(t), sin(t)\n    );\n}\nmat3 rotY(float t) {\n    return mat3(\n        sin(t), 0.0, cos(t),\n        0.0, 1.0, 0.0,\n        - cos(t), 0.0, sin(t)\n    );\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 lightDir = vec3(0.0, 4.0, 1.0);\n    \n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, - 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    float targetDepth = 1.0;\n    float t = iTime * 0.3;\n    cPos = rotX(t) * rotY(t) * cPos;\n    cDir = rotX(t) * rotY(t) * cDir;\n    cUp = rotX(t) * rotY(t) * cUp;\n    vec3 cSide = cross(cDir, cUp);\n    \n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    float ang = getAngle(ray, - normalize(cPos));\n    vec3 rPos = cPos + (1.0 / cos(ang)) * ray;\n    \n    // marching loop\n    for(int i = 0; i < 120; i ++ ) {\n        rPos += 0.015 * ray;\n        if (surfaceSDF(rPos) < 0.01) {\n            break;\n        }\n    }\n    vec3 normal = getNormal(rPos);\n    float diff = clamp(dot(normalize(lightDir - rPos), normal), 0.01, 1.0);\n\n    // hit check\n    if (surfaceSDF(rPos) < 0.01) {\n        fragColor = vec4(diff * vec3(rPos.x, 1.0, rPos.p), 1.0);\n    } else {\n        fragColor = vec4(vec3(1.0, 1.0, 1.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}