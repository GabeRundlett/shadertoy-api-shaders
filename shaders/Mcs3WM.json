{
    "Shader": {
        "info": {
            "date": "1703181656",
            "description": "easy bokeh vignettea",
            "flags": 0,
            "hasliked": 0,
            "id": "Mcs3WM",
            "likes": 9,
            "name": "amagi test: easy bokeh",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "amagitakayosi",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "mat2 rot(float t) {\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\n\nfloat sdBox(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.));\n}\n\nvec2 map(vec3 p) {\n    vec3 p0 = p;\n    p.z -= iTime * 2.;\n    p.xy *= rot(iTime * 3.141593 / 2. / 6.);\n\n    // fold\n    for (int i = 0; i < 4; i++) {\n        p = abs(p);\n        p += sin(1. + float(i) * 11.);\n        p.xy *= rot(3.141593 / 4.); // 45deg\n        p *= 1.1;\n    }    \n\n    // repeat\n    p = mod(p + vec3(2, 2, 0), 4.) - 2.;        \n\n    float d = 999.;    \n    \n    // box\n    d = min(d, sdBox(p - vec3(1, 0, 0), vec3(0.1, 1.1, 0.1)));    \n    d = min(d, sdBox(p + vec3(1, 0, 0), vec3(0.1, 1.1, 0.1)));    \n    d = min(d, sdBox(p - vec3(0, 1, 0), vec3(1.1, 0.1, 0.1)));        \n    d = min(d, sdBox(p + vec3(0, 1, 0), vec3(1.1, 0.1, 0.1))); \n\n    return vec2(d, 0);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 d = vec2(0, 1) * 0.0001;\n    return normalize(vec3(\n       (map(p + d.yxx) - map(p - d.yxx)).x,\n       (map(p + d.xyx) - map(p - d.xyx)).x,\n       (map(p + d.xxy) - map(p - d.xxy)).x\n    ));       \n}\n\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(8389., 8939.))) * 498.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv * 2. - 1.;       \n    p.x *= iResolution.x / iResolution.y;\n    \n    vec2 dist = mix(vec2(0), vec2(hash(p), hash(p + 1.)) * 2. - 1., pow(length(p) * 0.5, 2.) * 0.08);\n\n    vec3 ro = vec3(0, 0, 5);\n    vec3 rd = normalize(vec3(p + dist, -1. + 0.2 * length(p)));\n    \n    vec3 rp;\n    \n    vec2 hit;\n    float t;\n\n    vec3 col;\n\n    for (int i = 0; i < 120; i++) {\n        rp = ro + rd * t;\n        hit = map(rp);\n        \n        if (hit.x < 0.001) {\n            vec3 n = getNormal(rp);\n            if (hit.y == 0.) {\n                float x = sin(iTime * 3.141593) * 0.5 + 0.5;\n                float y = sin(rp.z + iTime * 3.141593 / 2.) * 0.5 + 0.5; \n                col = mix(vec3(1), vec3(x, 0, 0), y) - float(i) * 0.005 - t * 0.02;\n            }\n            break;\n        }\n        \n        t += hit.x * 0.4;\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}