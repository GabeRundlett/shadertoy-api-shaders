{
    "Shader": {
        "info": {
            "date": "1598659799",
            "description": "Refracting blob z",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljfWR",
            "likes": 1,
            "name": "Refracting blob z",
            "published": 3,
            "tags": [
                "refraction",
                "reymarching"
            ],
            "usePreview": 0,
            "username": "illus0r",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "#define textureCube texture\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPSILON 0.0001\n#define PI 3.14159265\n#define IVORY 1.\n#define BLUE 2.\n#define BLACK 3.\n\n#define PHI (sqrt(5.)*0.5 + 0.5)\n#define iTime (iTime / 3.1)\n\n\n\nmat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d1+d2)/k, 0.0, 1.0 );\n    return mix( d1, -d2, h ) + k*h*(1.0-h); }\n\n// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓\nvec2 getDist(vec3 p) {\n    float spheres = length(p) - 1.5;\n\n    // p = mod(p, 1.);\n    // p -= 0.5;\n    // float spheres = length(p) - .4;\n\n    for(int i = 0; i < 4; i++) {\n        vec3 ps = p;\n        // ps *= 2.;\n        ps += vec3( 1. * sin(iTime * 1.5 + 10. * float(i)), \n                    1. * sin(iTime * 2.5 + 10. * float(i) + 10.), \n                    1. * sin(iTime * 3.5 + 10. * float(i) + 2.) );\n        spheres = opSmoothUnion(spheres, length(ps) - .5, 1.5);\n    }\n    for(int i = 0; i < 4; i++) {\n        vec3 ps = p;\n        // ps *= 2.;\n        ps += vec3( 1. * sin(iTime * 1.7 + 20. * float(i)), \n                    1. * sin(iTime * 2.3 + 20. * float(i) + 10.), \n                    1. * sin(iTime * 3.1 + 20. * float(i) + 2.) );\n        spheres = opSmoothSubtraction(spheres, length(ps) - .5, 1.5);\n    }\n  return vec2(spheres, BLUE);\n}\n// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\n\n\n\nvec3 rayMarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    float info = 0.;\n    //float glow = 0.;\n    float minAngleToObstacle = 1e10;\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec2 distToClosest = getDist(ro + rd * d);\n        minAngleToObstacle = min(minAngleToObstacle, atan(distToClosest.x, d));\n        d += abs(distToClosest.x);\n        info = distToClosest.y;\n        if(abs(distToClosest.x) < EPSILON || d > MAX_DIST) {\n        \tbreak;\n        }\n    }\n    return vec3(d, info, minAngleToObstacle);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.);\n    vec3 n = getDist(p).x - vec3(getDist(p - e.xyy).x,\n                               getDist(p - e.yxy).x,\n                               getDist(p - e.yyx).x);\n\treturn normalize(n);\n}\n\n\n\nvec3 getRayDirection (vec3 ro, vec2 uv, vec3 lookAt) {\n    vec3 rd;\n    rd = normalize(vec3(uv - vec2(0, 0.), 1.));\n    vec3 lookTo = lookAt - ro;\n    float horizAngle = acos(dot(lookTo.xz, rd.xz) / length(lookTo.xz) * length(rd.xz));\n    rd.xz *= Rot(horizAngle);\n    return rd;\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // ray origin\n    vec3 ro = vec3(4. * sin(iTime * .2), 0, 4. * cos(iTime * .2));\n    ro.xz *= Rot(iMouse.x / iResolution.x * PI * 2.);\n    float zoom = 1.100;\n\n    // ray direction\n    vec3 rd = getRayDir(uv, ro, vec3(0), 1.);\n\n    vec3 rm = rayMarch(ro, rd);\n    float d = rm[0];\n    float info = rm[1];\n\n    vec3 colorBg = vec3(.0);\n    vec3 color = textureCube(iChannel0, rd).xyz;\n    vec3 light = vec3(50, 20, 50);\n    //light.xz *= Rot(iTime);\n    vec3 p = ro + rd * d;\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        //n.zy *= Rot(iTime);\n    \tcolor = vec3( n * 0.5 + 0.5 );\n\n        //color *= info;\n        // vec3 tex = boxmap(u_tex_bg, ro + rd * d, n, 32.0 ).xyz;//\n        // self shadeing\n        // color = vec3(0. + .1 * dot(n, normalize(light - p)));\n        // drop shadows\n        // trying to raymarch to the light for MAX_DIST\n        // and if we hit something, it's shadow\n        vec3 dirToLight = normalize(light - p);\n        vec3 rayMarchLight = rayMarch(p + dirToLight * .06, dirToLight);\n        float distToObstable = rayMarchLight.x;\n        float distToLight = length(light - p);\n        // if (distToObstable < distToLight) {\n        //     color *=  0.;\n        // }\n\n        // smooth shadows\n        // float shadow = smoothstep(0.0, .15, rayMarchLight.z / PI);\n        // color += .1 + .9 * shadow;\n\n        // reflection\n        // vec3 ref = reflect(rd, n);\n        // hiding sides of reflection on round\n        //color += 1. * smoothstep(.8, 1., dot(rd, ref));//pow(1. + clamp(dot(rd, ref), -1., 0.), .5);\n\n        // refraction\n        float e = 0.2;\n        for (int i = 0; i < 2; i++) {\n            rd = refract(rd, n, 1. - e);\n            // rd = reflect(rd, n);\n            ro = p + rd * 0.05;\n            rm = rayMarch(ro, rd);\n            d = rm[0];\n            if (d > MAX_DIST) break;\n            p = ro + rd * d;\n            n = getNormal(p);\n\n            rd = refract(rd, -n, 1. + e);\n            // rd = reflect(rd, n);\n            ro = p + rd * 0.05;\n            rm = rayMarch(ro, rd);\n            d = rm[0];\n            if (d > MAX_DIST) break;\n            p = ro + rd * d;\n            n = getNormal(p);\n        }\n        color *= textureCube(iChannel0, rd).xyz;\n\n        // // reflection\n        // for (int i = 0; i < 2; i++) {\n        //     rd = reflect(rd, n);\n        //     ro = p + rd * 0.05;\n        //     rm = rayMarch(ro, rd);\n        //     d = rm[0];\n        //     if (d > MAX_DIST) break;\n        //     p = ro + rd * d;\n        //     n = getNormal(p);\n\n        //     rd = reflect(rd, n);\n        //     ro = p + rd * 0.05;\n        //     rm = rayMarch(ro, rd);\n        //     d = rm[0];\n        //     if (d > MAX_DIST) break;\n        //     p = ro + rd * d;\n        //     n = getNormal(p);\n        // }\n        // color = mix(textureCube(iChannel0, rd).xyz, color, 0.5);\n\n        //rm = rayMarch(p + ref * 0.1, ref);\n        // color = vec3(d);\n\n\n\n        // tex *= color_bw;\n        // color = tex;\n    }\n    // color += 0.6 + vec3( color_bw );\n    // // coloring\n    // if (info == IVORY) {\n    //     color *= vec3(0.332,0.400,0.349);\n    // }\n    // else if (info == BLUE) {\n    //     color *= vec3(0.810,0.256,0.397);\n    // }\n    // else if (info == BLACK) {\n    //     color *= vec3(0.130,0.130,0.130);\n    // }\n    //color = mix(color, colorBg, smoothstep(20., 28., d));\n\n    fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}