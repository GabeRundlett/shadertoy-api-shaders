{
    "Shader": {
        "info": {
            "date": "1621079828",
            "description": "Outline demoparty shader showdown match #1\nmusic is in Buffer B iChannel0",
            "flags": 96,
            "hasliked": 0,
            "id": "ssjSDV",
            "likes": 5,
            "name": "anticore - Outline SS QF #1",
            "published": 3,
            "tags": [
                "spectrogram"
            ],
            "usePreview": 0,
            "username": "anticore",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "float spectro(vec2 p) {\n    p.y = abs((p.y - 0.5) * 2.);\n    return smoothstep(0., 1., texture(iChannel0, p).a);\n}\n\nvec3 cam(vec3 ro, vec3 tar, vec2 uv) {\n    vec3 f = normalize(tar - ro);\n    vec3 l = normalize(cross(vec3(0,1,0) , f));\n    vec3 u = normalize(cross(f,l));\n    return normalize(f + l * uv.x + u * uv.y);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.));\n}\n\nfloat sdPlane(vec3 p, vec3 n, float h) {\n    return dot(p,n) + h;\n}\nvec3 repl(vec3 p, vec3 c, vec3 l) {\n    return p - c * clamp(round(p / c), -l, l);\n\n}\n\nvec2 cp; float cps;\n\nvec2 map(vec3 p) {\n    float w = min(\n      sdPlane(p, vec3(1,0,0), 4. + sin(p.z+ iTime * 3.) * 0.5),\n      sdPlane(p, vec3(-1,0,0), 4. + sin(p.z + iTime * 3.) * 0.5)\n    );\n  \n    cp = (round(p / 0.1 + 0.05).zx + vec2(0,50)) / vec2(1000, 100);\n    cps = spectro(vec2(-cp.x / 2., cp.y));\n    p = repl(p, vec3(0.1, 0., 0.1), vec3(50, 0, 1000));\n    float b = sdBox(p + vec3(0.05, sin(iTime * 4. + cp.x * 10.)* 0.4, 0.05), vec3(0.07, 0.07 + cps * 2.2, 0.07));\n  \n    return vec2(min(b,w),b < w ? 0 : 1);\n}\n\nvec3 norm(vec3 p) {\n    float E = 0.0001; vec2 k = vec2(1,-1);\n  \n  return normalize(\n      k.xyy * map(p + k.xyy * E).x +\n  k.yyx * map(p + k.yyx * E).x +\n  k.yxy * map(p + k.yxy * E).x +\n  k.xxx * map(p + k.xxx * E).x\n );\n}\n\nvec3 pal(float t) {\n    vec3 a = vec3(0.6);\n    vec3 b = vec3(0.7);\n  \n    vec3 c = vec3(1);\n    vec3 d = vec3(0,.2, .4);\n  \n  return a + b * cos(6.283 * (c * t + d));\n}\n\nvec3 tr(vec3 ro, vec3 rd) {\n    float td = 0.1;\n    vec2 h;\n  \n    vec4 c = vec4(0);\n    float bnc = 0.;\n    float en = 1.;\n   \n    for (int i = 0; i < 1000; i++) {\n        vec3 ip = ro + rd * td;\n        h = map(ip);\n        td += h.x * 0.1;\n        \n        if (h.x < 0.01) {\n            if (h.y == 0.) {\n              c +=  vec4(pal(cps * 2.) * en, 1) * en;\n            }\n            else if (h.y == 1.) {\n                //float f = texture(iChannel1,  vec2(0, fract(ip.y / 3. + iTime + sin(ip.z * 2.) / 10.))).r;\n                //c += vec4(vec3(f) * 1. * pal(iTime + ip.y + iTime), 0.1);\n                float f = smoothstep(0.7,1.,\n                    texture(iChannel1, vec2(0, fract(ip.y / 3. + iTime + sin(ip.z * 2.) / 10. - sin(ip.z / 10. + iTime)))).r);\n                c += vec4(vec3(f) * pal(iTime * 2. + ip.y),0.01);\n \n                ro = ip; \n                vec3 inorm = norm(ip);\n                rd = reflect(rd, inorm) + (texture(iChannel2, ip.yz).r - 0.5) * 0.1;\n                td = 0.1;\n                bnc += 1.;\n                en = max(en - 0.4, 0.);\n            }\n        }\n        \n        if (td > 1000. || bnc > 2. || en <= 0. || c.a >= 1.) break;\n    }\n  \n    return vec3(c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(sin(iTime * 2.), 4. + sin(iTime),0);\n    vec3 tar = vec3(0,0,-10);\n    vec3 rd = cam(ro, tar, uv);\n    vec3 t = tr(ro, rd);\n  \n    fragColor = vec4(t,1.0);\n    //fragColor = (texture(iChannel1,  vec2(0, fract(uv.y))));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float ffti(float a) {\n    return texture( iChannel0, vec2(0,a)).x;\n}\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    vec2 uvv = uv;\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n    vec2 pv = vec2((fragCoord.x-1.) / iResolution.x, fragCoord.y / iResolution.y);\n  \n    float a = fragCoord.x < 1. ? ffti(uvv.y) : texture(iChannel1, pv).a;\n\n    C = vec4(a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float ffti(float a) {\n    return texture( iChannel0, vec2(a,0)).x;\n}\n\nvoid mainImage( out vec4 C, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\n    C = vec4(ffti(uv.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 27155,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/apex-music/london-elektricity-just-one-second-apex-rmx"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}