{
    "Shader": {
        "info": {
            "date": "1394949601",
            "description": "Greetings everyone! :)\n\nThis is the result of my very first experiment with shaders and ray marching. Nothing really amazing, but I hope you like it though :).",
            "flags": 0,
            "hasliked": 0,
            "id": "XdBGDd",
            "likes": 38,
            "name": "Love Tunnel",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "tunnel"
            ],
            "usePreview": 1,
            "username": "Nrx",
            "viewed": 3231
        },
        "renderpass": [
            {
                "code": "// Rendering parameters\n#define FLOW\n#define RAY_LENGTH_MAX\t\t50.0\n#define RAY_STEP_MAX\t\t50\n#define LIGHT\t\t\t\tvec3 (0.5, 0.0, -2.0)\n#define AMBIENT\t\t\t\t0.5\n#define SPECULAR_POWER\t\t4.0\n#define SPECULAR_INTENSITY\t0.2\n#define FADE_POWER\t\t\t3.0\n#define GAMMA\t\t\t\t(1.0 / 2.2)\n#define HSV2RGB_FAST\n#define TEXTURE_SCALE\t\t0.4\n\n// Constants\n#define PI\t\t3.14159265359\n#define DELTA\t0.01\n\nvec3 vRotateZ (in vec3 p, in float angle) {\n\tfloat c = cos (angle);\n\tfloat s = sin (angle);\n\treturn vec3 (c * p.x + s * p.y, c * p.y - s * p.x, p.z);\n}\n\nfloat sphere (in vec3 p, in float r) {\n\treturn length (p) - r;\n}\n\nfloat box (in vec3 p, in vec3 b, in float r) {\n\t#ifdef BOX_NEGATIVE\n\tvec3 d = abs (p) - b + r;\n\treturn min (max (d.x, max (d.y, d.z)), 0.0) + length (max (d, 0.0)) - r;\n\t#else\n\treturn length (max (abs (p) - b + r, 0.0)) - r;\n\t#endif\n}\n\nfloat torusZ (in vec3 p, in float r1, in float r2) {\n\tvec2 q = vec2 (length (p.xy) - r1, p.z);\n\treturn length (q) - r2;\n}\n\nfloat cylinderZ (in vec3 p, in float r) {\n \treturn length (p.xy) - r;\n}\n\nvec3 twistZ (in vec3 p, in float k, in float angle) {\n\treturn vRotateZ (p, angle + k * p.z);\n}\n\nfloat fixDistance (in float d, in float correction, in float k) {\n\tcorrection = max (correction, 0.0);\n\tk = clamp (k, 0.0, 1.0);\n\treturn min (d, max ((d - DELTA) * k + DELTA, d - correction));\n}\n\nfloat getDistance (in vec3 p, out vec4 q) {\n\n\t// Global deformation\n\tp += vec3 (2.0 * sin (p.z * 0.2 + iTime * 2.0), sin (p.z * 0.1 + iTime), 0.0);\n\n\t// Cylinder\n\tq.xyz = p;\n\tq.w = -1.0;\n\tfloat d = fixDistance (-cylinderZ (q.xyz, 4.0) + 0.5 * sin (atan (q.y, q.x) * 6.0) * sin (q.z), 0.4, 0.8);\n\n\t// Twisted boxes\n\tvec3 q_;\n\tq_.xy = mod (p.xy, 5.0) - 0.5 * 5.0;\n\tq_.z = mod (p.z, 12.0) - 0.5 * 12.0;\t\n\tq_ = twistZ (q_, 1.0, iTime);\n\tfloat d_ = fixDistance (box (q_, vec3 (0.6, 0.6, 1.5), 0.3), 0.4, 0.8);\n\tif (d_ < d) {\n\t\tq.xyz = q_;\n\t\td = d_;\n\t}\n\n\t// Rotating spheres\n\tq_ = p;\n\tq_.z += 12.0;\n\tq_ = vRotateZ (q_, sin (iTime * 4.0));\n\tq_.xy = mod (q_.xy, 4.5) - 0.5 * 4.5;\n\tq_.z = mod (q_.z, 24.0) - 0.5 * 24.0;\n\td_ = sphere (q_, 0.5);\n\tif (d_ < d) {\n\t\tq.xyz = q_;\n\t\td = d_;\n\t}\n\n\t// Torus\n\tq_ = p;\n\tq_.z = mod (q_.z + 12.0, 24.0) - 0.5 * 24.0;\n\td_ = torusZ (q_, 3.5, 0.4);\n\tif (d_ < d) {\n\t\tq.xyz = q_;\n\t\td = d_;\n\t}\n\n\t// Flow of boxes and spheres\n\t#ifdef FLOW\n\tq_ = p;\n\tq_.z += iTime * 20.0;\n\tconst float spacing = 0.5;\n\tconst float stepCount = 3.0;\n\tconst float period = spacing * stepCount;\n\tfor (float step = 0.0; step < stepCount; ++step) {\n\t\tfloat k1 = floor (q_.z / period + 0.5);\n \t\tfloat k2 = k1 * stepCount + step;\n\t\tvec3 qq = q_ - vec3 (0.4 * sin (k2), 0.4 * sin (k2 * 13.0), period * k1);\n\t\tif (mod (k2, 2.0) > 0.5) {\n\t\t\td_ = box (vRotateZ (qq, k2), vec3 (0.08), 0.01);\n\t\t} else {\n\t\t\td_ = sphere (qq, 0.08);\n\t\t}\n\t\tif (d_ < d) {\n\t\t\tq.xyz = qq;\n\t\t\tq.w = 1.0;\n\t\t\td = d_;\n\t\t}\n\t\tq_.z += spacing;\n\t}\n\t#endif\n\n\t// Final distance\n\treturn d;\n}\n\nvec3 getNormal (in vec3 p) {\n\tvec4 q;\n\tconst vec2 h = vec2 (DELTA, 0.0);\n\treturn normalize (vec3 (\n\t\tgetDistance (p + h.xyy, q) - getDistance (p - h.xyy, q),\n\t\tgetDistance (p + h.yxy, q) - getDistance (p - h.yxy, q),\n\t\tgetDistance (p + h.yyx, q) - getDistance (p - h.yyx, q)\n\t));\n}\n\nvec3 hsv2rgb (in vec3 hsv) {\n\t#ifdef HSV2RGB_SAFE\n\thsv.yz = clamp (hsv.yz, 0.0, 1.0);\n\t#endif\n\t#ifdef HSV2RGB_FAST\n\treturn hsv.z * (1.0 + 0.5 * hsv.y * (cos (2.0 * PI * (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));\n\t#else\n\treturn hsv.z * (1.0 + hsv.y * clamp (abs (fract (hsv.x + vec3 (0.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0) - 2.0, -1.0, 0.0));\n\t#endif\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Define the ray corresponding to this fragment\n\tvec2 frag = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 direction = normalize (vec3 (frag, 2.0));\n\n\t// Set the camera\n\tvec3 origin = vec3 (0.0, 0.0, iTime * 6.0);\n\tvec3 forward = vec3 (0.2 * cos (iTime), 0.2 * sin (iTime), cos (iTime * 0.3));\n\tvec3 up = vRotateZ (vec3 (0.0, 1.0, 0.0), PI * sin (iTime) * sin (iTime * 0.2));\n\tmat3 rotation;\n\trotation [2] = normalize (forward);\n\trotation [0] = normalize (cross (up, forward));\n\trotation [1] = cross (rotation [2], rotation [0]);\n\tdirection = rotation * direction;\n\n\t// Ray marching\n\tvec3 p = origin;\n\tvec4 q;\n\tfloat rayLength = 0.0;\n\tint rayStepCounter = 0;\n\tfor (int rayStep = 0; rayStep < RAY_STEP_MAX; ++rayStep) {\n\t\tfloat dist = getDistance (p, q);\n\t\trayLength += dist;\n\t\tif (dist < DELTA || rayLength > RAY_LENGTH_MAX) {\n\t\t\tbreak;\n\t\t}\n\t\tp += dist * direction;\n\t\t++rayStepCounter;\n\t}\n\n\t// Compute the fragment color\n\tvec3 color;\n\tfloat bass = texture (iChannel0, vec2 (0.0)).x;\n\tif (rayLength > RAY_LENGTH_MAX) {\n\t\tcolor = vec3 (0.0);\n\t} else {\n\n\t\t// Object color\n\t\tvec3 normal = getNormal (p);\n\t\tfloat hue = (p.z + iTime) * 0.1;\n\t\tif (q.w < 0.0) {\n\t\t\t#ifdef TEXTURE_SCALE\n\t\t\tvec3 textureUV = q.xyz * TEXTURE_SCALE;\n\t\t\tvec3 textureFactor = abs (normal);\n\t\t\tmat3 textureColor = mat3 (\n\t\t\t\ttexture (iChannel1, textureUV.yz).rgb,\n\t\t\t\ttexture (iChannel1, textureUV.zx).rgb,\n\t\t\t\ttexture (iChannel1, textureUV.xy).rgb\n\t\t\t\t);\n\t\t\tcolor = hsv2rgb (vec3 (hue, 1.0, 1.0));\n\t\t\tcolor *= textureColor * textureFactor / (textureFactor.x + textureFactor.y + textureFactor.z);\n\t\t\t#else\n\t\t\tfloat treble = texture (iChannel0, vec2 (0.8, 0.0)).x;\n\t\t\tfloat saturation = 0.8 + (0.2 + 0.8 * treble) * 0.4 * sin (q.x * 10.0) * sin (q.y * 10.0) * sin (q.z * 10.0);\n\t\t\tfloat value = 0.2 + 0.8 * bass;\n\t\t\tcolor = hsv2rgb (vec3 (hue, saturation, value));\n\t\t\t#endif\n\t\t} else {\n\t\t\tcolor = hsv2rgb (vec3 (hue, 1.0, 1.0));\n\t\t}\n\n\t\t// Lighting\n\t\tvec3 lightDirection = normalize (LIGHT);\n\t\tvec3 reflectDirection = reflect (direction, normal);\n\t\tfloat diffuse = max (0.0, dot (normal, lightDirection));\n\t\tfloat specular = pow (max (0.0, dot (reflectDirection, lightDirection)), SPECULAR_POWER) * SPECULAR_INTENSITY;\n\t\tfloat fade = pow (1.0 - rayLength / RAY_LENGTH_MAX, FADE_POWER);\n\t\tcolor = ((AMBIENT + diffuse) * color + specular) * fade;\n\n\t\t// Special effect\n\t\tcolor *= max (1.0, 10.0 * sin (p.z * 0.1 - iTime * 4.0) - 7.0);\n\n\t\t// Gamma correction\n\t\tcolor = pow (color, vec3 (GAMMA));\n\t}\n\n\t// Another special effect\n\tcolor.r = mix (color.r, float (rayStepCounter) / float (RAY_STEP_MAX / 2), bass * bass);\n\n\t// Set the fragment color\n\tfragColor = vec4 (color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}