{
    "Shader": {
        "info": {
            "date": "1474580986",
            "description": "Ray Marching Experiment 57",
            "flags": 0,
            "hasliked": 0,
            "id": "4ty3DD",
            "likes": 10,
            "name": "Ray Marching Experiment 57",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "57"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\nfrom shader Color star field https://www.shadertoy.com/view/MtG3DR of frutbunn\n*/\n\nfloat dstepf = 0.0;\n    \nconst vec2 RMPrec = vec2(0.2, 0.05); \nconst vec3 DPrec = vec3(1e-3, 12., 1e-8); \n\n//vec2 Params; // y => Elevation\n\n///////////////////////////////////////////\n// from shader Color star field https://www.shadertoy.com/view/MtG3DR of frutbunn\n#define PI 3.14159265358979323846\n#define TIMER(sec, min, max) (((mod(iTime, (sec)) * ((max) - (min))) / (sec)) + (min))\nmat2 mm2(in float a) { float c = cos(a), s = sin(a); return mat2(c, s, -s, c); }\n\nvec3 effect( vec2 g )\n{\n    g *= 10.;\n    //g /= dot(g,g)*0.05; \n    g.x += iTime; // uv\n    vec2 p;\n   \tvec4 f = vec4(1);\n\tfor(float i=0.;i<9.;i++)\n        p.x = mod(i, 3.), p.y = (i-p.x)/3., // lattice point coords\n        p -= fract(g),\n        f = min(f, length( \n            p - .5 // lattice point // --p not work on ati card \n             + .5 * sin( iTime + 9.*fract( sin((g+p) * mat2(2,5,5,2))) ) // hash (uv offset)\n             )); // uv\n    \n    return f.rgb;\n}\n///////////////////////////////////////////\n\nvec4 map(vec3 p)\n{\n    vec2 uv = p.xz/3.;\n    \n\tvec3 col = effect(uv);\n    \n    dstepf += 0.015;\n\n    float disp = dot(col,vec3(0.1));                            \n    float dist = length(p) -3.;\n    dist = max(-dist + 0.1 * (sin(iTime)*0.5+0.5), dist) - smoothstep(0., 0.7, disp);\n    return vec4(dist, col.rgb);\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n    map(pos+e.xyy).x - map(pos-e.xyy).x,\n    map(pos+e.yxy).x - map(pos-e.yxy).x,\n    map(pos+e.yyx).x - map(pos-e.yyx).x );\n    return normalize(n);\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u =  normalize(cross(cu, rov));\n    vec3 v =  normalize(cross(rov, u));\n    vec3 rd = normalize(rov + u*uv.x + v*uv.y);\n    return rd;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    vec2 si = iResolution.xy;\n   \tfloat t = iTime;\n    //Params.y = (sin(t*.5)*.5+.5)*.1;\n    //if (iMouse.z>0.) Params = iMouse.xy / si * vec2(1., 0.15);\n    f = vec4(0.);\n    float ca = t*.2; // angle z\n    float ce = 3.5; // elevation\n    float cd = 0.5; // distance to origin axis\n    vec3 cu=vec3(0,1,0);//Change camere up vector here\n    vec3 cv=vec3(0,0,0); //Change camere view here\n    float refl_i = .6; // reflexion intensity\n    float refr_a = 1.2; // refraction angle\n    float refr_i = .8; // refraction intensity\n    float bii = 0.6; // bright init intensity\n    vec2 uv = (g+g-si)/min(si.x, si.y);\n    vec3 ro = vec3(sin(ca)*cd, ce+1., cos(ca)*cd); //\n    vec3 rd = cam(uv, ro, cu, cv);\n    float b = bii;\n    vec3 d = vec3(0.);\n    vec3 p = ro+rd*d.x;\n    float s = DPrec.y;\n    float rmd = sign(map(p).x);\n    for(int i=0;i<200;i++)\n    {      \n\t\tif(s<DPrec.x||s>DPrec.y) break;\n        s = map(p).x*(s>DPrec.x?RMPrec.x:RMPrec.y);\n        if (sign(s) != rmd) break;\n        d.y = d.x;\n        d.x += s;\n        p = ro+rd*d.x;\n   \t}\n\n    float countIter = 0.;\n    if (sign(s) == rmd)\n    {\n    \tp = ro+rd*d.x;\n        rmd = map(p).x;\n        for (int i = 0; i < 20; i++)\n        {\n        \tcountIter += 10.;\n            d.z = (d.x + d.y)*.5;\n            p = ro+rd*d.z;\n            s = map(p).x*RMPrec.y;\n            d.x += abs(s);\n            if (abs(s) < DPrec.z)break;\n            (d.x*rmd < 0. )? (d.x = d.z ): (d.y = d.z);\n       \t}\n        d.x = (d.x+d.y) * .5;\n   \t}\n\n    f += pow(b,15.);\n    \n    if (d.x<DPrec.y)\n    {\n    \tfloat nPrec = 10./countIter;\n        vec3 n = nor(p, nPrec);\n        vec3 ray = reflect(rd, n);\n        f += texture(iChannel0, ray) * refl_i; \n        ray = refract(rd, n, refr_a);\n        f += texture(iChannel0, rd) * refr_i; \n        f.rgb = mix( f.rgb, map(p).yzw,0.5);                \n   \t}\n    else\n    {\n    \tf = texture(iChannel0, rd);\n    }\n\n    f *= dstepf;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}