{
    "Shader": {
        "info": {
            "date": "1643705614",
            "description": "Kaleidoscope Tests",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjcRG",
            "likes": 6,
            "name": "Kaleidoscope Tests",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "joeedh",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "/*\ninspired by https://www.shadertoy.com/view/7lKSWW\n*/\n\n#define PATTERN_SCALE 25.0 // (15.0 + iMouse.x*0.1)\n#define PATTERN 1\n#define SECOND_SCALE fsign*0.95\n\n#define M_PI 3.14159265354\n\nfloat tent(float f) {\n    return 1.0 - abs(fract(f)-0.5)*2.0;\n}\n\nvec2 rot2d(vec2 p, float th) {\n    return vec2(cos(th)*p.x + sin(th)*p.y,\n                cos(th)*p.y - sin(th)*p.x);\n}\n\nvec2 symmetry(vec2 uv) {\n    uv = abs(uv);\n    float fsign = 1.0;\n    \n    for (int i=0; i<5; i++) {\n        uv = rot2d(uv, fsign*M_PI*0.15);\n        uv = abs(uv);\n        //fsign = -fsign;\n    }\n    \n    return uv;\n}\n\nfloat ctent(float f) {\n    f = tent(f);\n    \n#if PATTERN != 1\n    f = f*f*(3.0 - 2.0*f);\n#endif\n    //f *= f;\n\n    return f;\n}\n\nfloat fpattern(vec2 uv, float seed, float fsign, out float w) {\n    vec2 p = uv;\n    \n    seed += iMouse.x/iResolution.x*2.0;\n    \n    seed -= iTime*0.2*fsign*0.3;\n    \n    float len = length(uv);\n    \n    uv = normalize(uv)*pow(len, 0.75);\n    \n    uv = rot2d(uv, -seed);\n    uv = symmetry(uv);\n    \n    float dx1 = ctent(uv.x);\n    float dy1 = ctent(uv.y);\n    \n    uv = rot2d(uv, seed);\n    uv *= SECOND_SCALE;\n    \n    float dx2 = ctent(uv.x);\n    float dy2 = ctent(uv.y);\n\n    float f;\n\n#if PATTERN == 0\n    f = (dx1+dy1+dx2+dy2)/4.0;\n    f *= f*f*3.0;\n    //f += tent(f)*0.5;\n#elif PATTERN == 1\n    f = (dx1*dx1 + dy1*dy1 + dx2*dx2 + dy2*dy2) / (4.0);\n    f *= f*2.0;\n#elif PATTERN == 2\n    f = sqrt(dx1*dx1 + dy1*dy1 + dx2*dx2 + dy2*dy2) / sqrt(4.0);\n    f *= 0.8;\n    f *= f;\n    //f *= f*f;\n#elif PATTERN == 3\n    f = min(min(min(dx1, dx2), dx2), dy2);\n    //f = sqrt(f)*1.5;\n    f = 1.0 - f;\n    f *= f*f*0.35;\n#elif PATTERN == 4\n    f = max(max(max(dx1, dx2), dx2), dy2);\n    f = f*0.6;\n    f *= f*f*1.8;\n    //f /= (length(p)+0.5)*0.5;\n#elif PATTERN == 5\n    f = sqrt(dy2*dy1);\n#endif\n    \n    //f = (tent(f) + tent(f*1.3))*0.5;\n    //f = fract(f);\n    //f = tent(f);\n    \n    if (f < 0.1) {\n       w = 0.4;\n       f = 0.0;\n    } else if (f < 0.2) {\n       w = 1.0;\n       f = 0.0;\n    } else if (f > 0.4) {\n       w = 0.7;\n       f = 0.7;\n    } else {\n       w = 1.0;\n       f = 1.0;\n    }\n    \n    f /= pow(length(p) + 1.0, 0.1);\n        \n    return f;\n}\n\nvec3 ray_plane_isect(vec3 po, vec3 pn, vec3 ro, vec3 rn, out float t) {\n  float div = (pn[1]*rn[1] + pn[2]*rn[2] + pn[0]*rn[0]);\n\n  if (abs(div) < 0.000001) {\n      return po;\n  }\n  \n  t = ((po[1] - ro[1])*pn[1] + (po[2] - ro[2])*pn[2] + (po[0] - ro[0])*pn[0])/div;\n  return ro + rn*t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime*0.25;\n    \n    const int steps = 50;\n    \n    uv = uv*2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    //uv *= 2.0;\n    \n    float zrange = 1.0;\n    float dz = zrange / float(steps-1);\n    float z = zrange;// - fract(time);\n    \n    float z2 = z;// - time;\n    \n    float f = 0.2;\n    \n    float th1 = time*0.2;\n    vec3 p = vec3(cos(th1), 0.0, sin(th1));\n    \n    vec3 zn = vec3(-sin(th1), 0.0, cos(th1));\n    vec3 xn = normalize(cross(zn, vec3(0.0, 1.0, 0.0)));\n    vec3 yn = normalize(cross(zn, xn));\n    \n    float scale = 2.5;\n    vec3 vn = xn*uv.x*scale + yn*uv.y*scale + zn*3.0;\n    vn = normalize(vn);\n    float tt = 10000.0;\n\n    float seed = 0.2;\n    \n    for (int i=0; i<steps; i++) {        \n        float fi = float(i);\n        \n        fi += th1*float(steps-1)/M_PI/2.0;\n        fi = floor(fi);\n        float th = fi/float(steps-1);\n        th *= M_PI*2.0;\n        \n        //th = floor(th*float(steps)-off)/float(steps);\n        //th *= M_PI*2.0;\n        //th = th1;\n        \n        th = -th;\n        vec3 p2 = vec3(cos(th), 0.0, sin(th));\n        vec3 n = vec3(-sin(th), 0.0, cos(th));\n        n.xz = rot2d(n.xz, 0.2);\n        \n        if (dot(n, vn) < 0.0) {\n           //continue;\n        }\n        \n        //p2 *= 1.3;\n        \n        float t;\n        vec3 p3 = ray_plane_isect(p2, n, p, vn, t);\n        \n        if (t < 0.0 || t > tt) {\n            continue;\n        }\n        \n        vec3 tan = -normalize(p2);\n        \n        p3 -= p2;\n        \n        float u = dot(p3, tan);\n        float v = p3[1];\n        float len = length(vec2(u, v));\n        \n        float lmax = 0.15;\n        float lmin = 0.012;\n        len *= 0.85;\n        \n        if (len < lmax && len > lmin) {\n          tt = t;\n          float fac = max(1.0-tt*1.3, 0.0);\n          \n          fac = fac*fac*(3.0-2.0*fac)*1.15;\n          \n          float fsign = mod(fi, 2.0)*2.0 - 1.0;\n          float w;\n          vec2 vuv = vec2(u, v)*PATTERN_SCALE;\n          float f2 = fpattern(vuv, fi*0.2 + 0.2, fsign, w);\n          \n          if (len < lmin*1.3 || len > lmax*0.95) {\n              f2 = float(len > lmin*1.15 && len < lmax*0.95);\n              //f2 = float(len < lmin*0.97 || len > lmax*1.01);\n              w = 1.0;\n          }\n          \n          if (tt > 1.4) {\n              f2 = 0.0;\n              w = 0.2;\n          }\n          \n          f2 *= fac;\n          f = mix(f, f2, w);\n        }\n    }\n    \n    // Time varying pixel color\n    \n\n    // Output to screen\n    fragColor = vec4(f,f,f,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}