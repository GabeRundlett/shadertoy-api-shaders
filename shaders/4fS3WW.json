{
    "Shader": {
        "info": {
            "date": "1704202081",
            "description": "Adding up many layers of perlin noise isolines to get an organic looking shader",
            "flags": 0,
            "hasliked": 0,
            "id": "4fS3WW",
            "likes": 16,
            "name": "Thread soup",
            "published": 3,
            "tags": [
                "perlin",
                "gradient",
                "isoline"
            ],
            "usePreview": 0,
            "username": "ikucha",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// Author:\n// Title:\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nconst float PI = 3.14159265358979323846;\n\n// copy from https://www.shadertoy.com/view/4sc3z2   \n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nconst float epsilon = 0.001;\nvec2 perlin_gradient(vec3 p){\n    float value_at_point = perlin_noise(p);\n    float vxoffset = perlin_noise(p+vec3(epsilon, 0., 0.));\n    float vyoffset = perlin_noise(p+vec3(0., epsilon, 0.));\n    return vec2(vxoffset - value_at_point, vyoffset-value_at_point)/epsilon;\n}\n\n//f is divided by the length of the perlin gradient so the isolines have more or less uniform thickness, it is more uniform with lower thickness values\nfloat isoline(vec2 uv, float isoline_count, float frequency, float thickness, float seed){\n    float g = perlin_noise(vec3(uv*frequency, 0.1*iTime+100.*seed));\n    g = 0.5*g+0.5;\n    float f = fract(g*isoline_count);\n    float gradient_length = length(perlin_gradient(vec3(uv*frequency, 0.1*iTime+100.*seed)));\n    const float compensation = 2.;\n    const float smoothing = 4.;\n    return pow(smoothstep(0., thickness*0.5, f/gradient_length)*smoothstep(-thickness,-thickness*0.5, -f/gradient_length),smoothing);\n}\nvec3 palette(float f){\n    vec3 color1 = vec3(42, 96, 65)/256.;\n    vec3 color2 = vec3(107, 255, 184)/256.;\n    return mix(color1, color2, smoothstep(0.,1.,f));\n}\n\n//heightmap adds up many layers of isolines with different parameters\nfloat heightmap(vec2 uv){\n    float g = 1.;\n    const float k = 9.;\n    float freq = 6.;\n    float isoline_count = 10.;\n    float thickness = 0.13;\n    for(float i = 0.; i<k; i++){\n    \tfloat iso = isoline(uv, isoline_count, freq, thickness, i);\n        g *= 1.-iso;\n        freq*=1.2;\n        isoline_count*=1.2;\n        thickness*=1.4;\n    }\n    return g;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    st.x*= iResolution.x/iResolution.y;\n    vec3 col = vec3(palette(heightmap(0.3*st)));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}