{
    "Shader": {
        "info": {
            "date": "1602272478",
            "description": "xorshift calculated forward and backward\nleft: xorshit(coords)\nright: invXS(XS(coords))\nalternate in time between narrow (power-of-2) or full image range",
            "flags": 0,
            "hasliked": 0,
            "id": "3sGyRD",
            "likes": 3,
            "name": "inverse xorshift",
            "published": 3,
            "tags": [
                "hash",
                "rng",
                "xorshift",
                "inversible"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\nvec2 M;                                     // mapped rectangle\nuint L,                                     // rectangle length\n    mask;                                   // total span of used bits\n\nvoid init() {\n    if (mod(iTime,2.) < 1. )                // map whole screen\n        L = uint(R.x), mask  = 0xFFFFffffU, M = R;\n    else                                    // map on LxL tiles\n        L = 256u,      mask  = L*L-1u, M = vec2(L,L);\n}\n\n#define vec2int(V)   uint( (V).x + L * (V).y )\n#define int2vec(v)   vec2( (v) % L , (v) / L )\n\n// --- xorshift and reverse ------------------------------------------------\n\n#define opL(x,s)  ( x ^ (x << s) ) & mask\n#define opR(x,s)  ( x ^ (x >> s) ) & mask\n\nuint invOpL(uint x, int s) {  // https://stackoverflow.com/questions/31521910/simplify-the-inverse-of-z-x-x-y-function\n    for (; s < 32; s*=2 )\n        x = opL(x,s);\n    return x;\n}\nuint invOpR(uint x, int s) { \n    for (; s < 32; s*=2 )\n        x = opR(x,s);\n    return x;\n}\n\nuint xorshift(uint x) {       // https://en.wikipedia.org/wiki/Xorshift\n    x = opL(x,13);\n\tx = opR(x,17);\n\tx = opL(x,5);\n    return x;\n}\nuint invXorshift(uint x) {\n\tx = invOpL(x,5);\n\tx = invOpR(x,17);\n    x = invOpL(x,13);\n    return x;\n}\n// -------------------------------------------------------------------------\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    init();\n    uvec2 I = uvec2(U);\n    uint key = 0u,     \n      // key = 0xe1a7u,                        // in case we want to fill the dynamics\n           i = vec2int(I),                     // pixel index\n           j = xorshift(i ^ key ),             // xorshift\n           k = invXorshift(j) ^ key;           // reverse\n    \n    O = I.x < L/2u\n        ? vec4(int2vec(j)/M,0,0)               // left: xorshift(coords)\n        : vec4(int2vec(k)/M,0,0);              // right: invXS(XS(coords))\n // O = vec4(i==k);                            // test invXS(XS) == identity\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}