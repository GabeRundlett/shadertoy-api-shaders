{
    "Shader": {
        "info": {
            "date": "1532095990",
            "description": "reference : https://iquilezles.org/articles/distancefractals/distancefractals.htm\nhttp://math.unipa.it/~grim/Jbarrallo.PDF\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl3yzM",
            "likes": 4,
            "name": "Fundamental fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "WingStone",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "//Select different preprocessing to get different effect\n\n//#define MANDELBROT_Distance\n//#define JULIA_Distance\n//#define JULIA_ANGLE\n//#define JULIA_GradientAngle\n//#define JULIA_Trap\n#define JULIA_Flower\n\n\nvec2 complexMul(vec2 c1, vec2 c2)\n{\n    return vec2(c1.x*c2.x - c1.y*c2.y, c1.x*c2.y+c1.y*c2.x);\n}\n\nvec2 complexDev(vec2 c1, vec2 c2)\n{\n    float len2 = c2.x*c2.x+c2.y*c2.y;\n    return vec2((c1.x*c2.x + c1.y*c2.y)/len2, (c1.y*c2.x-c1.x*c2.y)/len2);\n}\n\nvec3 getJuliaFlower(vec2 uv)\n{\n    float n = 13.0, m = 18.0;\n    //vec2 c =iMouse.xy/iResolution.y; //using mouse set \"c\"\n    vec2 c = vec2(cos(0.025*n*iTime), sin(0.025*m*iTime));\t//using time set \"c\"\n    vec2 z = uv;\n    vec2 polarZ;\n    float dist;\n    for(int i = 0; i < 32; i++)\n    {\n        z = complexMul(z,z)+ c;\n        \n        if(length(z) >128.0)\n        {\n            dist = 1.0;\n            break;\n        }\n        \n        //polar coordinate\n        vec2 nearPoint = round(z);\n        vec2 zToNear = z - nearPoint;\n        polarZ.x = length(zToNear);\n        polarZ.y = atan(zToNear.y, zToNear.x);\n        \n        polarZ.y += iTime*1.5;\n        \n        //sakura trap\n        float tmp = cos(polarZ.y*5.)*0.4;\n        tmp -= tmp>0.? 0.5/(cos(polarZ.y*5.)+abs(10.0*sin(polarZ.y*5.))) : 0.0;\n        dist = polarZ.x - sqrt(0.6 + tmp )*0.3;\n        if(dist <= 0.0)\t//enter the trap\n        {\n            break;\n        }\n    }\n   \n\n    \n    \n    vec3 color = mix(vec3(0.95,0.85,0.4), vec3(0.95,0.5,0.5), smoothstep(0.01, 0.05,polarZ.x));\n    color = mix( color, vec3(0.95,0.7,0.7), smoothstep(0.05, 0.25,polarZ.x));\n    color = mix( color, vec3(1.0,0.8,0.8), smoothstep(-0.03, 0.0,dist));\n    color =  dist <= 0.0 ? color : vec3(0.95,0.90,0.9);\n    return color;\n}\n\n//Mandelbrot use distance, this reference is https://www.shadertoy.com/view/lsX3W4\nvec3 getMandelbrotColor(vec2 uv)\n{\n    float scale = 0.25*(0.6 + 0.5*sin(iTime*0.1));\n    vec2 c = uv*scale+vec2(-0.05,.6805);\n    vec2 z = vec2(0.0,0.0);\n    vec2 dz = vec2(0.0, 0.0);\n    for(int i = 0; i < 1024; i++)\n    {\n        dz = 2.0*vec2(z.x*dz.x - z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,.0);\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        if(dot(z,z) > 1024.0)\n            break;\n    }\n    \n    float lz = dot(z,z);\n    float dist = 0.5*log(lz)*sqrt(lz/dot(dz,dz));\n    vec3 col = vec3(1.0)*smoothstep(0.0,0.0035*scale,dist);\n    return col;\n}\n\nvec3 getJuliaColor(vec2 uv)\n{\n    float n = 13.0, m = 18.0;\n    vec2 c = vec2(cos(0.025*n*iTime), sin(0.025*m*iTime));\n    \n    vec2 z = uv;\n    vec2 dz = vec2(1.0);\n    \n    int ite = 0;\n    for(int i = 0; i < 128; i++)\n    {\n        dz = 2.0*complexMul(dz,z);\n        z = complexMul(z,z)+ c;\n        ite = i+1;\n        \n        #ifdef JULIA_Trap\n        vec2 nearPoint = round(z);\n        if(distance(z, nearPoint) <= 0.2)\t//enter the trap\n        {\n            ite = i;\n            break;\n        }\n        #else\n        if(dot(z,z) > 128.0)\n        {\n            ite = i;\n            break;\n        }\n        #endif\n    }\n   \n    vec3 color;\n    \n    #ifdef JULIA_Trap\n    vec2 nearPoint = round(z);\n    float len = distance(z, nearPoint);\n    color = vec3(sin(len*100.0)*0.5+0.5, cos(len*100.0)*0.5+0.5, 0.3);\n\t#endif\n    \n    #ifdef JULIA_GradientAngle\n    vec2 Gdz = complexDev(dz,z);\n    float angle = atan(Gdz.y,Gdz.x);\n    color = vec3(sin(angle*5.0)*0.5+0.5, cos(angle*5.0)*0.5+0.5, 0.3);\n\t#endif\n    \n    #ifdef JULIA_ANGLE\n    float angle = atan(z.y,z.x);\n    color = vec3(sin(angle*5.0)*0.5+0.5, cos(angle*5.0)*0.5+0.5, 0.3);\n\t#endif\n    \n    #ifdef JULIA_Distance\n    float lz = dot(z,z);\n    float dist = 0.5*log(lz)*sqrt(lz/dot(dz,dz));\n    color = vec3(sin(dist*10.0)*0.5+0.5, cos(dist*10.0)*0.5+0.5, 0.3);\n\t#endif\n    \n    #ifdef JULIA_Flower\n    float lz = dot(z,z);\n    float dist = 0.5*log(lz)*sqrt(lz/dot(dz,dz));\n    color = vec3(sin(dist*10.0)*0.5+0.5, cos(dist*10.0)*0.5+0.5, 0.3);\n\t#endif\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord *2.0 - iResolution.xy)/iResolution.y;\n\n    #ifdef MANDELBROT_Distance\n    vec3 col = getMandelbrotColor(uv);\n    #else\n    \n    #ifdef JULIA_Flower\n    vec3 col = getJuliaFlower(uv);\n    #else\n    vec3 col = getJuliaColor(uv);\n\t#endif\n    \n    #endif\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}