{
    "Shader": {
        "info": {
            "date": "1682508108",
            "description": "Turn your webcam into a music visualizer and get your groove on :)",
            "flags": 2,
            "hasliked": 0,
            "id": "cl33D7",
            "likes": 4,
            "name": "Fork Psychedeli becanchi 941",
            "published": 3,
            "tags": [
                "music",
                "webcam",
                "microphone",
                "vizualizer"
            ],
            "usePreview": 0,
            "username": "becanchi",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////////////////////////\n// Modified from relampago2048's \"Fractal Audio 01\"\n// https://www.shadertoy.com/view/llB3W1\n/////////////////////////////////////////////////////////////////////////////////\n\nconst int iters = 150;\n\nint fractal(vec2 p, vec2 point) {\n\tvec2 so = (-1.0 + 2.0 * point) * 0.3;\n\tvec2 seed = vec2(0.098386255 + so.x, 0.6387662 + so.y);\n\t\n\tfor (int i = 0; i < iters; i++) {\n\t\t\n\t\tif (length(p) > 2.0) {\n\t\t\treturn i;\n\t\t}\n\t\tvec2 r = p;\n\t\tp = vec2(p.x * p.x - p.y * p.y, 2.0* p.x * p.y);\n\t\tp = vec2(p.x * r.x - p.y * r.y + seed.x, r.x * p.y + p.x * r.y + seed.y);\n\t}\n\t\n\treturn 0;\t\n}\n\nvec3 color(int i) {\n\tfloat f = float(i)/float(iters) * 2.0;\n\tf=f*f*2.;\n\treturn vec3((sin(f*2.0)), (sin(f*3.0)), abs(sin(f*7.0)));\n}\n\n\nfloat sampleMusicA() {\n\treturn 0.6 * (\n\t\ttexture( iChannel1, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture( iChannel1, vec2( 0.30, 0.25 ) ).x);\n}\n\nmat2 rotateX(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat2(\n        c, -s,\n        s, c\n    );\n}\n\nvec4 fractalImg(vec2 uv, vec2 fragCoord) {\n    vec2 mouse = vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n    \n    vec2 position = 3. * (-0.5 + fragCoord.xy / iResolution.xy ) + vec2(0.2 * abs(cos(iTime * 0.21313)) * sin(sin(iTime)+cos(iTime)*.242), 0.1 * abs(cos(iTime * 0.1323)));\n\tposition.x *= iResolution.x/iResolution.y;\n    position *= rotateX(mod(iTime * .54, 6.3) + abs(.2 * sin(iTime / 5.3)));\n    \n    vec2 iFC = vec2(iResolution.x-fragCoord.x,iResolution.y-fragCoord.y);    \n    vec2 pos2 = 2. * (-0.5 + iFC.xy / iResolution.xy);\n    pos2.x*=iResolution.x/iResolution.y;\n    pos2 *= rotateX(mod(iTime * -.4235, 6.3) + abs(.2 * sin(iTime / 5.3)));\n\n    vec4 t3 = texture(iChannel0, vec2(length(position)/14.0,0.1) );\n    float pulse = .2+sampleMusicA()*1.8;\n\n    vec3 invFract = color(fractal(pos2,vec2(0.55+sin(iTime/18.+0.5)/2.0,pulse*.9)));\n    \n    vec3 fract4 = color(fractal(position/1.6,vec2(0.6+cos(iTime/20.+0.5)/2.0,pulse*.8)));\n\n    vec3 c = color(fractal(position,vec2(10.1+sin(iTime/3.)/12.0,pulse)));\n    \n    t3=abs(vec4(0.5,0.1,0.5,1.)-t3)*.8;\n    \n    vec4 fract01 =  vec4( c , 1.0 );\n    vec4 salida;\n    salida = fract01 / t3 + fract01 * t3 + vec4(invFract,0.6) + vec4(fract4,0.25);\n\treturn mix(salida * 2.,texture(iChannel1, fragCoord.xy / iResolution.xy), 0.3);\n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Modified from t3hk0d3's \"webcam roberts\"\n// https://www.shadertoy.com/view/MssGRB\n/////////////////////////////////////////////////////////////////////////////////\n\n\nconst float sensitivity = 1.0 / 100.0;\n\nfloat bw(vec2 coords) {\n\tvec4 lm = texture(iChannel0, coords) * vec4(0.21, 0.71, 0.07, 1);\n\t\n\treturn lm.r+lm.g+lm.b;\t\n}\n\nfloat outline(vec2 uv)\n{\n \tvec2 of = vec2(sensitivity * pow(sampleMusicA(), 2.), 0);\n\t\n\treturn sqrt(\n\t\tpow(abs(bw(uv) - bw(uv+of.xx)), 2.0) +\n\t\tpow(abs(bw(uv + of.xy) - bw(uv + of.yx)), 2.0)\n\t);   \n}\n\n/////////////////////////////////////////////////////////////////////////////////\n// Modified from  unycone's \"Camera Distortion 01\"\n// https://www.shadertoy.com/view/XlXfRs\n/////////////////////////////////////////////////////////////////////////////////\n\nvec2 distort(vec2 uv)\n{\n    bool autoScale = true;\n    float strength = sampleMusicA() * sign(sin(iTime / 5.)) * 0.25;\n    float zoom = (autoScale ? abs(strength) + 1.0 : 1.0);\n    \n\n    \n    vec2 p = (uv - 0.5) * 2.0; // map [0, 1] to [-1, 1]\n    float theta = atan(p.y, p.x);\n    float rd = length(p);\n    float ru = rd * (1.0 + strength * rd * rd) / zoom;\n    return vec2(cos(theta), sin(theta)) * ru / 2.0 + 0.5; \n}\n\n\n/////////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    \n    vec4 imgColor = texture(iChannel0, uv);\n\n\n\tuv = distort(uv); // Comment this line out to remove distortion\n\t\n\tfloat bwColor = outline(uv) * 2.;\n    bwColor = min(round(bwColor * 8.), 2.) * bwColor;\n    \n\t\n\t\n\tfragColor = imgColor + bwColor * (fractalImg(uv, fragCoord) + fractalImg(-uv, fragCoord));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}