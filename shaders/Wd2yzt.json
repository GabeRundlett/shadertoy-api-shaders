{
    "Shader": {
        "info": {
            "date": "1587498182",
            "description": "it is an animated smile",
            "flags": 64,
            "hasliked": 0,
            "id": "Wd2yzt",
            "likes": 1,
            "name": "ImSmile",
            "published": 3,
            "tags": [
                "becreative"
            ],
            "usePreview": 0,
            "username": "Imene_BH",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "// ImSmile //\n\n#define S(a,b,t) smoothstep (a, b ,t)\n#define sat(x) clamp(x, 0. , 1.) \n\nfloat remap01 (float a, float b , float t){\n  \treturn sat((t-a) / (b-a) );\t\t\t\t\t\t\t\t\t\t// sat is used to be sure that the value returned  is between 0 & 1\n}\n\nfloat remap (float a , float b , float c , float d, float t ){\n    return sat(((t-a)/(b-a)) * (d-c)+c);\n\n}\n\nvec2 within (vec2 uv , vec4 rect ){ \t\t\t\t\t\t\t\t// return uv coordinate within that rectangle \n\treturn (uv-rect.xy)/(rect.zw-rect.xy);\n\n}\nvec4 Brow (vec2 uv){\n    \n\tfloat y = uv.y;\n    uv.y += uv.x*.1-2.;\n    uv.x-=.1;\n    uv -=.5;\n    \n    vec4 col = vec4(0.);\n    float blur =.1; \n    float d1 = length(uv);\n    float s1 = S (.40,.45-blur,d1);\n    float d2 = length(uv-vec2(1.,-.2)*.7);\n    float s2 = S(.5,.55-blur,d2);\n    float browMask = sat (s1-s2);\n      \n    vec4 browCol = vec4(.7,.5,.3,1.);\n    col = mix (col, browCol,S(.2,.4,browMask));\n\treturn col;\n}  \nvec4 Eye (vec2 uv,float side,vec2 m,float smile){\n\tuv -=.5;\n    uv.x *= side;\t\t\t\t\t\t\t\t\t\t\t\t\t// desable mirior effect for mvt eyes \n    float d = length(uv);\n    vec4 irisCol = vec4(.0,.6,.0,4.);\t\t\t\t\t\t\t\t// iris color\n    vec4 col = mix (vec4(1.),irisCol,S(.2,.50,d)*.6);\t\t\t\t// gradien in eye-white\n    col.a= S(.5,.48,d);// eye mask\n    col.rgb *= 1. - S(.45,.5,d)*.7*sat(-uv.y+uv.x);\t\t\t\t\t// add a little shadow , sat doesn't get negative in\n  \n    d = length(uv-m*.5);\t\t\t\t\t\t\t\t\t\t\t// distance of mouse mvt \n    col.rgb = mix (col.rgb,vec3(0.), S(.29,.15,d));\t\t\t\t\t// iris outline\n    \n    irisCol.rgb *= 1.2 + S(.35,.001,d);\n    col.rgb = mix (col.rgb,irisCol.rgb, S(.28,.12,d));\n    \n    float pupilSize=mix (.30,.18,smile);\t\t\t\t\t\t\t// pupil size is bigger if we're not smiling\n    d = length(uv-m*.65);\n    col.rgb = mix (col.rgb,vec3(0.), S(pupilSize,pupilSize*.95,d)); // blend\n    \n    //highlight\n    uv.x += sin(iTime+uv.y*20.)*.03;\n    float p = length(uv -vec2(-.11,.15));\n    float p2 = length(uv +vec2(-.06,.10));\n    \n    float highlight = S (.1,.07,p);\n    highlight += S(.1,.0001,p2);\n    col.rgb= mix (col.rgb, vec3(1.),highlight);\n    col.rgb= mix (col.rgb, vec3(1.),highlight);\n   \n    return col;\n}\nvec4 Mouth (vec2 uv,float smile){\n\tuv-=.5;//renormalize\n    vec4 col = vec4(.9,.1,.2,1.);\n\t   \n    uv.y*=1.5;\n    uv.y -= uv.x*uv.x*2.*smile;\n    uv.x *= mix(3.,1.,smile);\n    float d = length(uv);\n    col.rgb= mix (col.rgb,vec3(.2,.10,.05),S(.55,.45,d));\n    \n    float teeth = length(uv-vec2(0.005,.65));\n    vec3 toothcol= vec3(1.)*S(.9,.7,d);\n    col.rgb= mix(col.rgb,toothcol,S(.47,.35,teeth));\n    \n    float tongue = length(uv-vec2(-.005,-.55));\n    col.rgb = mix(col.rgb, vec3(1.,.5,.5),S(.5,.2,tongue));\n    \n    col.a= S(.6,.47,d);\n    return col;\n    \n}\n\nvec4 Head (vec2 uv){\n\tvec4 col = vec4(.9,.70, .1, 1.);    \n    float d = length(uv);\n    \n    col.a = S(.5,.49,d);\n    float edgeShade = remap01(.35,.5,d);\n    edgeShade *= edgeShade;\n    col.rgb *= 1.-edgeShade*.5;\n    \n    col.rgb = mix (col.rgb,vec3(.65,.4,.1),S(.48,.48,d));\t\t\t// draw \"contour\"\n    \n    float highlight = S(.41,.405,d)*.75;\n    highlight *=remap(.41,-.1,.75,0.,uv.y);\n    highlight *=S(.16,.18,length(uv-vec2(.207,.11)));\n    col.rgb = mix(col.rgb,vec3(1.),highlight);\n    \n    //cheek\n    d = length(uv-vec2(.30, -.17));\t\t\t\t\t\t\t\t\t// position of cheek in the image\n    float cheek= S(.20,.02,d)*.35;   \n    col.rgb = mix(col.rgb,vec3(1.,.1,.1),cheek);\n    \n    return col;\n}\n\nvec4 Smiley (vec2 uv,vec2 m,float smile,vec4 fragColor,vec2 fragCoord){\n\t\n    vec2 uv1 = (fragCoord*2.-iResolution.xy)/40.;\n    vec4 col = vec4(.2,0.4,0.3,.2);\n     col += vec4(sin(iTime*10.+3.141592653589793*2.)*0.5)*0.3+0.5;\n    col+=sin((uv1.x-uv1.y)*60.)/2.;\n   \n    //head\n    float side = sign (uv.x);\t\t\t\t\t\t\t\t\t\t\t// Every think on one side will be drawn on\n   \tuv.x=abs(uv.x);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The other side too \"mirror x cordinates \n     \n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n    vec4 Head = Head (uv);\t\t\t\t\t\t\t\t\t\t\t\t// The color from the head\n    vec4 Eye = Eye (within(uv,vec4(.03,-.05,.36,.26)),side,m,smile);\t// Make the eyes\n    vec4 Mouth = Mouth (within(uv,vec4(-.3,-.42,.28,-.1)),smile);\t\t// Make Mouth\n    vec4 Brow = Brow (within(uv,vec4(.03,.2,.30,.27)));\n   \n    //mix color\n    col = mix (col, Head,Head.a); \n    col = mix (col, Eye,Eye.a);\n    col = mix (col, Mouth,Mouth.a);\n    col = mix (col, Brow,Brow.a);\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv-= .5;\n    uv.x *=iResolution.x / iResolution.y;\n    \n\tvec2 m = iMouse.xy / iResolution.xy;\n    m -=.5;\n    uv-=m*(.5-dot(uv,uv));\t\t\t\t\t\t\t\t\t\t\t\t// expenential mvt\n    \n    // Output to screen\n    float smile= -sin(iTime)*.5+.5;\t\t\t\t\t\t\t\t\t\t//sinus function of time \n    fragColor = Smiley(uv,m,smile,fragColor,fragCoord);\n    \n    // sound \n    float t = iTime;\n     \n    // add wave form on top\t\n    vec3 col;\n\tcol -= 1. - smoothstep( 0.0, 0.15, smile );\n\t// output final color\n\tfragColor += vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22360,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ladouceplaylist/la-douce-playlist-mixtape-14-nth-sound-mix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}