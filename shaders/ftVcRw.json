{
    "Shader": {
        "info": {
            "date": "1661162881",
            "description": "Based on runes from [url]https://www.shadertoy.com/view/MsXSRn[/url] but replacing line segments with beziers",
            "flags": 0,
            "hasliked": 0,
            "id": "ftVcRw",
            "likes": 12,
            "name": "Bezier Runes",
            "published": 3,
            "tags": [
                "bezier",
                "runes"
            ],
            "usePreview": 0,
            "username": "cmzw",
            "viewed": 469
        },
        "renderpass": [
            {
                "code": "/* \n   References\n   https://www.shadertoy.com/view/MsXSRn runes\n   https://www.shadertoy.com/view/4djSRW hash22\n   https://www.shadertoy.com/view/MlKcDD Quadratic Bezier\n*/\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n    }\n    return sqrt( res );\n}\n\n\nfloat ThickLine(vec2 uv, vec2 posA, vec2 posB, vec2 posC)\n{\n\treturn smoothstep(.04,.01,sdBezier(uv, posA, posB, posC));\n}\n\nfloat Rune(vec2 uv, int strokes, float scale, vec2 snaps) {\n\tfloat finalLine = 0.0;\n\tvec2 seed = floor(uv)-hash22(vec2(1));\n\tuv = fract(uv);\n\tfor (int i = 0; i < strokes; i++)\t\n\t{\n\t\tvec2 posA = hash22(floor(seed+1.5));\n\t\tvec2 posB = hash22(floor(seed+2.0));\n\t\tvec2 posC = hash22(floor(seed+3.5));\n\t\tseed += 3.0;\n\t\tposA = fract(posA * 128.0);\n\t\tposB = fract(posB * 128.0);\n        posC = fract(posC * 128.0);\n\t\tif (i == 0) posA.y = 0.0;\n\t\tif (i == 1) posA.x = 0.999;\n\t\tif (i == 2) posA.x = 0.0;\n\t\tif (i == 3) posA.y = 0.999;\n\t\tposA = (floor(posA * snaps) + 0.5) / snaps;\n\t\t//posB = (floor(posB * snaps) + 0.5) / snaps;\n        posC = (floor(posC * snaps) + 0.5) / snaps;\n\t\tfinalLine = max(finalLine, ThickLine(uv, posA, posB, posC));\n\t}\n\treturn finalLine;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 p = (7.*I - iResolution.xy) / iResolution.y;\n    \n    p.x += iTime * 0.2;\n\n    O = vec4(Rune(p,4,0.8,vec2(2.0,3.0)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}