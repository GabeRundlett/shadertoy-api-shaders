{
    "Shader": {
        "info": {
            "date": "1615568218",
            "description": "Falling apples",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndf3RN",
            "likes": 6,
            "name": "Falling Apples",
            "published": 3,
            "tags": [
                "apples"
            ],
            "usePreview": 0,
            "username": "ryukent",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec3 disk(vec3 pixel, vec2 center, vec2 resolution, float radius, vec3 fillCol) {\n    vec2 d = resolution - center;\n\tif(length(d) < radius) {\n\t\tpixel = fillCol;\n\t}\n    return pixel;\n}\n\nvec3 disk2(vec3 pixel, vec2 center, vec2 resolution, float radius, vec3 fillCol) {\n    vec2 d = resolution - center;\n    float dist = abs(resolution.x - center.x);\n    vec3 newRed = vec3(0.7 + 1.2 * dist, 0.0, 0.0);\n\tif(length(d) < radius) {\n\t\tpixel = newRed;\n\t}\n    return pixel;\n}\n\n\nvec3 rect(vec3 pixel, vec2 center, vec2 resolution, float rectSize, vec3 fillCol) {\n    vec2 d = resolution - center;\n    float dist = abs(resolution.x - center.x);\n    fillCol -= dist;\n\tif (abs(center.x - resolution.x) < rectSize/2.0 && abs(center.y - resolution.y) < rectSize)\n    {\n\t\tpixel = fillCol;\n\t}\n    return pixel;\n}\n\nvec3 ellipse(vec3 pixel, vec2 center, vec2 resolution, float radius, vec3 fillCol) {\n    vec2 d = resolution - center;\n\tif(length(d * 2.1 + 0.1) < radius ) {\n\t\tpixel = fillCol;\n\t}\n    return pixel;\n}\n\n\nvec3 drawApple(vec3 pixel, vec2 center, vec2 resolution, float radius) {\n    \n    if (center.y < -1.0) {\n        center.y = -1.0;\n    }\n    \n    //Apple outline\n    vec3 colBlack = vec3(0.0,0.0,0.0);\n    pixel = disk(pixel, center, resolution, radius+0.01, colBlack);\n    \n    //Apple core\n    vec3 colBrown = vec3(0.6, 0.371, 0.298);\n\tvec3 colRed = vec3(1.00, 0.329, 0.298);\n    \n    pixel = disk2(pixel, center, resolution, radius, colRed);\n    \n    //Apple stalk\n    vec2 stalk = center;\n    stalk.y += (radius * 0.9) ;\n    float scaling = radius * 0.3;\n    pixel = rect(pixel, stalk, resolution, scaling, colBrown);\n    \n    // Apple leaf\n    vec3 colGreen = vec3(0.0, 1.0, 0.0);\n    pixel = ellipse(pixel, center+0.1, resolution, radius * sin(0.7), colGreen);\n    \n    return pixel;\n}\n\nvec3 drawTreeTrunk(vec3 pixel, vec2 resolution) {\n    vec3 colBrown = vec3(0.6, 0.371, 0.298);\n    colBrown *= 0.8;\n    resolution.y *= .5;\n    pixel = rect(pixel, vec2(0, 0), resolution, 0.5, colBrown);\n    return pixel;\n}\nvec3 drawTreeLeaves(vec3 pixel, vec2 resolution) {\n\tvec3 colGreen = vec3(0, 0.6, 0.298);\n    resolution.y *= 1.3;\n    pixel = disk(pixel, vec2(-0.6, 1.2), resolution, 0.6, colGreen);\n    colGreen *= 0.9;\n    pixel = disk(pixel, vec2(0.6, 1.2), resolution, 0.6, colGreen);\n    colGreen *= 0.9;\n    pixel = disk(pixel, vec2(0, 1.2), resolution, 0.7, colGreen);\n    return pixel;\n}\n\nvec3 drawBush(vec3 pixel, vec2 resolution) {\n\tvec3 colGreen = vec3(0, 0.6, 0.298);\n    resolution.y *= 1.3;\n    pixel = disk(pixel, vec2(-1.6, -1.2), resolution, 0.3, colGreen);\n    colGreen *= 0.9;\n    pixel = disk(pixel, vec2(-1.5, -1.2), resolution, 0.2, colGreen);\n    colGreen *= 0.9;\n    pixel = disk(pixel, vec2(1.8, -1.2), resolution, 0.3, colGreen);\n    colGreen *= 0.9;\n    pixel = disk(pixel, vec2(1.6, -1.2), resolution, 0.2, colGreen);\n    return pixel;\n}\n\nvec3 drawSun(vec3 pixel, vec2 resolution) {\n    vec3 colYellow = vec3(1.0, 1.0, abs(sin(iTime)) * 0.7);\n    pixel = disk(pixel, vec2(-1.7, 1.0), resolution, 0.4, colYellow);\n    return pixel;\n}\n\nvec3 drawCloud(vec3 pixel, vec2 resolution, vec2 position) {\n    resolution.y *= 1.3;\n    vec3 colWhite = vec3(1.0, 1.0, 1.0);\n    \n    pixel = disk(pixel, position, resolution, 0.3, colWhite);\n    position.x += 0.4;\n    pixel = disk(pixel, position, resolution, 0.3, colWhite);\n    position.x -= 0.2;\n    position.y += 0.2;\n    pixel = disk(pixel, position, resolution, 0.3, colWhite);\n    return pixel;\n}\n\nvec3 drawGrass(vec3 pixel, vec2 resolution) {\n\n\tvec3 colGreen = vec3(0, 0.6, 0.298);\n    for (float i = -1.8; i < 1.8; i = i + 0.1) {\n        pixel = rect(pixel, vec2(i,-0.95), resolution, 0.05, colGreen);\n    };\n    \n    return pixel;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\n    \n\tvec4 bgCol = vec4(\n        0.5 + fragCoord.xy.y / iResolution.y / 2.,\n        0.5 + fragCoord.xy.y / iResolution.y / 2.,\n        0.5 + fragCoord.xy.y / iResolution.y,\n        1.0\n    );\n\tvec3 pixel = vec3(bgCol.x, bgCol.y, bgCol.z);\n    \n    float maxTime = 10.0;\n    float timeOffset = maxTime / 3.0;\n    \n    float timer = mod(-iTime, maxTime) - 5.0;\n    \n    float speed1 = timer * 1.0;\n    float speed2 = timer * 1.2;\n    float speed3 = timer * 1.4;\n    \n    pixel = drawSun(pixel, r);\n    pixel = drawCloud(pixel, r, vec2(- speed1 - 0.2 + timeOffset, 0.6));\n    \n    pixel = drawTreeTrunk(pixel, r); \n    \n    pixel = drawApple(pixel, vec2(-0.8,speed1 + 0.2 - timeOffset), r, 0.1);\n    pixel = drawApple(pixel, vec2(0.8,speed2 + 0.4 - timeOffset), r, 0.12);\n    pixel = drawApple(pixel, vec2(0.0,speed3 + 0.6 - timeOffset), r, 0.15);\n    pixel = drawApple(pixel, vec2(0.6,speed1 + 0.8 - timeOffset), r, 0.11);\n    pixel = drawApple(pixel, vec2(-0.6,speed2 + 1.0 - timeOffset), r, 0.1);\n    pixel = drawApple(pixel, vec2(0.5,speed3 + 1.2 - timeOffset), r, 0.09);\n    pixel = drawApple(pixel, vec2(-0.4,speed3 + 1.4 - timeOffset), r, 0.12);\n    pixel = drawApple(pixel, vec2(0.7,speed3 + 1.6 - timeOffset), r, 0.11);\n    pixel = drawApple(pixel, vec2(-0.2,speed3 + 1.8 - timeOffset), r, 0.1);\n    \n    pixel = drawTreeLeaves(pixel, r); \n\n    \n    pixel = drawGrass(pixel, r); \n    pixel = drawBush(pixel, r); \n\n\tfragColor = vec4(pixel, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}