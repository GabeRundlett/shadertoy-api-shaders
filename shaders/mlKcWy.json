{
    "Shader": {
        "info": {
            "date": "1700675666",
            "description": "very smooth yellow ball rotating around the center of screen",
            "flags": 0,
            "hasliked": 0,
            "id": "mlKcWy",
            "likes": 1,
            "name": "Ball with flare",
            "published": 3,
            "tags": [
                "light",
                "ball",
                "orbit",
                "smooth",
                "movement"
            ],
            "usePreview": 0,
            "username": "vortmax",
            "viewed": 124
        },
        "renderpass": [
            {
                "code": "struct ellipse\n{\n    vec2 position;\n    vec2 semi_axis;\n};\n\nstruct polar\n{\n    float fi;\n    float dist;\n};\n\nvec2 screen2uv(vec2 glCoord, vec2 glRes);\nvec2 getAbsPosition(ellipse e, polar point);\nbool contains(ellipse e, vec2 point);\nbool contains(ellipse e, vec2 point, float scale);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord );\n\n\nvec2 screen2uv(vec2 glCoord, vec2 glRes)\n{\n    return 2.0 * (glCoord.xy - 0.5 * glRes.xy) / glRes.y; \n}\n\nvec2 getAbsPosition(ellipse e, vec2 norm, float dist)\n{\n    return norm \n        * dist \n        * e.semi_axis\n        + e.position;\n}\n\nvec2 getAbsPosition(ellipse e, polar point)\n{\n    return getAbsPosition(e, vec2(cos(point.fi), sin(point.fi)), point.dist);\n}\n\n\nfloat getIntensity(ellipse e, vec2 point)\n{   \n    vec2 pos = point - e.position;\n    vec2 norm = normalize(pos);\n    \n    return length(pos) / length(norm * e.semi_axis);\n}\n\nbool contains(ellipse e, vec2 point)\n{\n    return contains(e, point, 1.0);\n}\n\nbool contains(ellipse e, vec2 point, float scale)\n{\n    return pow((point.x - e.position.x) / e.semi_axis.x, 2.0) +\n           pow((point.y - e.position.y) / e.semi_axis.y, 2.0) <= pow(scale, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvFrag = screen2uv(fragCoord.xy, iResolution.xy);\n    vec2 uvMouse = screen2uv(iMouse.xy, iResolution.xy);\n    vec2 uvBounds = screen2uv(iResolution.xy, iResolution.xy);\n    \n    vec2 rtPos = vec2(cos(iTime), sin(iTime));       \n   \n    ellipse ball = ellipse(rtPos, vec2(0.3));\n    ball.position *= (uvBounds - ball.semi_axis);\n    \n    ellipse ballFlare = ellipse(\n        getAbsPosition(ball, -rtPos, 0.5), \n        vec2(0.3)\n    );\n    \n    vec3 flareColor = vec3(1.0);\n    vec3 ballColor = vec3(255, 217, 46) / 255.0;\n    vec3 backgroundColor = vec3(40, 39, 39) / 255.0;\n    \n    \n    fragColor.rgb = backgroundColor;\n    fragColor.a = 1.0;\n\n    if(contains(ball, uvFrag))\n    {\n        float ballIntensity = getIntensity(ball, uvFrag); \n        fragColor.rgb = mix(ballColor, fragColor.rgb, pow(ballIntensity, 8.0));\n        \n        if(contains(ballFlare, uvFrag))\n        {\n            float flareIntensity = getIntensity(ballFlare, uvFrag);\n            fragColor.rgb = mix(flareColor, fragColor.rgb, pow(flareIntensity, 0.33));\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}