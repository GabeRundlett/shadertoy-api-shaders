{
    "Shader": {
        "info": {
            "date": "1635217451",
            "description": "sample code\nlerp colors using polar coordinate",
            "flags": 0,
            "hasliked": 0,
            "id": "fdKSDG",
            "likes": 1,
            "name": "1_4_polar",
            "published": 3,
            "tags": [
                "ch1"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926;\nfloat atan2(float y, float x){\n    if (x == 0.0){\n        return sign(y) * PI / 2.0;\n    } else {\n        return atan(y, x);\n    }\n    // or use \"?:\" as follows:\n    // return x == 0.0 ? sign(y) * PI / 2.0 : atan(y, x);\n}\nvec2 xy2pol(vec2 xy){\n    return vec2(atan2(xy.y, xy.x), length(xy));\n}\nvec2 pol2xy(vec2 pol){\n    return pol.y * vec2(cos(pol.x), sin(pol.x));\n}\nvec3 tex(vec2 st){\n    vec3[3] col3 = vec3[](\n        vec3(0.0, 0.0, 1.0),\n        vec3(1.0, 0.0, 0.0),\n        vec3(1.0)\n    );\n    st.s = st.s / PI + 1.0;\n    int ind = int(st.s);\n    vec3 col = mix(col3[ind % 2], col3[(ind + 1) % 2], fract(st.s));\n    return mix(col3[2], col, st.t);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 pos = fragCoord.xy / iResolution.xy;\n    pos = 2.0 * pos.xy - vec2(1.0);\n    pos = xy2pol(pos);    \n    fragColor = vec4(tex(pos), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}