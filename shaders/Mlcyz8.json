{
    "Shader": {
        "info": {
            "date": "1531530004",
            "description": "\"I'm sorry, Dave. I'm afraid I can't do that.\"\n\nVery simple audio compression, based on [url=http://arss.sf.net/]ARSS/Photosounder[/url]",
            "flags": 40,
            "hasliked": 0,
            "id": "Mlcyz8",
            "likes": 26,
            "name": "I'm Sorry, Dave",
            "published": 3,
            "tags": [
                "sound",
                "audio",
                "compression",
                "synthesis",
                "speech",
                "voice",
                "spectrogram"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 1313
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float x = fragCoord.x / iResolution.x;\n    float y = fragCoord.y / iResolution.y;\n    fragColor = texture(iChannel0, vec2(x,y));\n    \n    float time = fragColor.w; // iTime doesn't sync with sound...\n    if (distance(time / DURATION, x) < 1./iResolution.x) fragColor.g = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ITERATIONS bitmap_size.y\n#define ZERO min(0., time)\n\nvec2 mainSound( in int samp, float time ) {\n    float x = time / DURATION;\n    if (x > 1.) return vec2(0);\n    float x0 = floor(x * bitmap_size.x) / bitmap_size.x;\n    float x1 =  ceil(x * bitmap_size.x) / bitmap_size.x;\n    vec2 f = vec2(0);\n    for (float y = ZERO; y < 1.; y += 1. / ITERATIONS) {\n        float n = 114. * y + 1.; // piano key number\n        float freq = 440. * pow(2., (n - 49.) / 12.);\n        float next_freq = 440. * pow(2., (114. * (y + 1./ITERATIONS) + 1. - 49.) / 12.);\n        \n        float t = (next_freq - freq) * time;\n        float noise = mix(hash11(floor(t)), hash11(ceil(t)), fract(t)) * 2. - 1.;\n        \n        float power = pow(10., -2. * y);\n        float phase = 2.*PI * hash11(y);\n        float tone = sqrt(power) * sin(2.*PI * freq * time + phase);\n        \n        float z0 = getBitmapColor(vec2(x0, y)).x;\n        float z1 = getBitmapColor(vec2(x1, y)).x;\n        float z = mix(z0, z1, smoothstep(x0, x1, x));\n        \n        // mixing\n        float treble = smoothstep(.3, .7, y);\n        float bass = 1. - treble;\n        f += z*z * tone * noise * (bass * .15 + treble * 2. * vec2(time < 1.5, time > 1.5));\n    }\n    return f;\n}\n\n\n/*\n#define ITERATIONS 570.\n\nvec2 mainSound( in int samp, float time ) {\n    float x = time / DURATION;\n    if (x > 1.) return vec2(0);\n    float x0 = floor(x * bitmap_size.x) / bitmap_size.x;\n    float x1 =  ceil(x * bitmap_size.x) / bitmap_size.x;\n    float f = 0.;\n    for (float y = 0.; y < 1.; y += 1. / ITERATIONS) {\n        float n = 114. * y + 1.; // piano key number\n        float freq = 440. * pow(2., (n - 49.) / 12.);\n        \n        float power = pow(10., -2. * y);\n        power *= smoothstep(.0, .9, y) * 2.0; // I think you know what the problem is just as well as I do... :)\n        float phase = 2.*PI * hash11(y);\n        float noise = sqrt(power) * sin(2.*PI * freq * time + phase);\n        \n        float z0 = getBitmapColor(vec2(x0, y)).x;\n        float z1 = getBitmapColor(vec2(x1, y)).x;\n        float z = mix(z0, z1, smoothstep(x0, x1, x));\n        \n        f += z*z * noise;\n    }\n    return vec2(f);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// uncomment for a short piece of choir and organ music\n//#define CHOIR\n\n#ifdef CHOIR\n#define DURATION 17.88\n#else\n#define DURATION 3.7\n#endif\n\n#define PI 3.14159265359\n\n\n// auto-generated by https://github.com/rkibria/img2shadertoy\n#ifdef CHOIR\nconst vec2 bitmap_size = vec2(32, 571);\nconst int[] palette = int[] (\n0x00000100,\n0x00040806,\n0x00090d0a,\n0x00101311,\n0x00161816,\n0x001c1f1d,\n0x00262927,\n0x00303231,\n0x003b3e3c,\n0x00464847,\n0x00515352,\n0x005c5f5d,\n0x00676968,\n0x00747675,\n0x00838584,\n0x00949795\n);\nconst int[] rle = int[] (\n0x00051183,\n0x11101111,\n0xc1118301,\n0x8c120000,\n0x0000c111,\n0x03118812,\n0x11111121,\n0x118600c1,\n0x11111006,\n0x11111121,\n0x118400c1,\n0x11872100,\n0x00c01000,\n0x2111110e,\n0x12211111,\n0x21111211,\n0x10111111,\n0x118700c0,\n0x21111206,\n0x10111111,\n0x118400c0,\n0x11112109,\n0x12311122,\n0xc0111111,\n0x86120000,\n0x11220211,\n0xc0118321,\n0x11120300,\n0x11831221,\n0x31111206,\n0x10111111,\n0x120e00c0,\n0x11112111,\n0x22111121,\n0x11112111,\n0x00c01011,\n0x11841200,\n0x22111202,\n0x00c11184,\n0x11841200,\n0x22100102,\n0x00c11184,\n0x11861200,\n0x11841200,\n0x120800c1,\n0x11122111,\n0x12101111,\n0x01001184,\n0x120300c0,\n0x83122111,\n0x11230211,\n0xc0118321,\n0x11110200,\n0x02118421,\n0x83211123,\n0x0a00c011,\n0x11111112,\n0x11111112,\n0x83211112,\n0x0a00c011,\n0x12211112,\n0x11122111,\n0x83211112,\n0x0a00c011,\n0x12311112,\n0x11122122,\n0x83311111,\n0x0500c011,\n0x22211112,\n0x11832222,\n0x21113104,\n0x00c01113,\n0x2111110e,\n0x12221112,\n0x31111111,\n0x11122111,\n0x120300c0,\n0x85122111,\n0x83310011,\n0x0a00c011,\n0x12211113,\n0x11111112,\n0x83311112,\n0x0a00c011,\n0x23311114,\n0x11111211,\n0x83411112,\n0x0e00c011,\n0x14411115,\n0x11112212,\n0x11511112,\n0xc0111211,\n0x22160f00,\n0x42222561,\n0x11231112,\n0x13221261,\n0x00bf1011,\n0xdddddc0f,\n0x58cdddcb,\n0x81112312,\n0x157bddcd,\n0x0f00bf11,\n0x23311214,\n0x11123222,\n0x22521224,\n0x11111212,\n0x220e00bf,\n0x22122112,\n0xb3111322,\n0x2246abab,\n0x00c01112,\n0x4121120f,\n0x24322222,\n0x61122312,\n0x11132231,\n0x0f00bf01,\n0x23512112,\n0xbaab3322,\n0xbc72247a,\n0x11146bbc,\n0x230f00bf,\n0xcccc5121,\n0x132358ab,\n0x22224111,\n0xbf011111,\n0x22340f00,\n0x22222332,\n0x22241112,\n0x12222252,\n0x00bf1111,\n0xabbba90f,\n0x13222347,\n0xaaaaa411,\n0x2469baab,\n0x0f00bf11,\n0x22522222,\n0x22243333,\n0x23322223,\n0x01111222,\n0x110f00bf,\n0xbbab5222,\n0x7abbb8ac,\n0x22222225,\n0xbf101112,\n0x22220f00,\n0x33332332,\n0x22332223,\n0x12222233,\n0x00bf1011,\n0x6334240f,\n0x34334343,\n0xbbb9a332,\n0x11233456,\n0x0f00bf11,\n0xbaba8ba7,\n0x9a99ab9a,\n0xcc723579,\n0x11257bcd,\n0x320000bf,\n0x23093384,\n0x23333422,\n0x11133333,\n0x0f00bf11,\n0x32222222,\n0x22233232,\n0x56a9bc83,\n0x11111223,\n0x450f00bf,\n0x33344454,\n0x44544533,\n0x43344333,\n0xbf111123,\n0xad980f00,\n0x445567ab,\n0x468abcbc,\n0x599ac973,\n0x00bf1135,\n0x5333330f,\n0x68ccbccd,\n0x32233445,\n0x11133343,\n0x0f00bf11,\n0x55544563,\n0x23334545,\n0x53434342,\n0x11112445,\n0xd80f00bf,\n0x99abcdcb,\n0x8323569a,\n0xbcca998b,\n0xbf13467a,\n0x44530200,\n0x06558554,\n0x44454444,\n0xbf111124,\n0x33320f00,\n0xbbadab63,\n0xaa99bcab,\n0x22345689,\n0x00bf1111,\n0x33333205,\n0x84454554,\n0x55450455,\n0xbf111134,\n0x65550f00,\n0x65665655,\n0xab99bbaa,\n0x88ccacbc,\n0x00bf1336,\n0xdbdcba0f,\n0xafedfeee,\n0x845789eb,\n0x468adebd,\n0x0100bf13,\n0x55846554,\n0x56654408,\n0x35556666,\n0x00bf1112,\n0xbbac980f,\n0x33454567,\n0xddfdd633,\n0x4588bbbb,\n0x0f00bf12,\n0x86776776,\n0x76776757,\n0x76555566,\n0x11225767,\n0xfb0f00bf,\n0xdefdefee,\n0xbfffffcf,\n0xdeed7568,\n0xbf13569e,\n0x55530f00,\n0xffffff65,\n0x7675678c,\n0x34555567,\n0x00bf1111,\n0x6566650f,\n0x66667666,\n0xcddcd555,\n0x13366779,\n0x0f00bf11,\n0xcdeefefc,\n0xdcdcdccd,\n0xeedccdbd,\n0x13569cee,\n0x540f00bf,\n0x66665555,\n0x67767665,\n0x77776566,\n0xbf112346,\n0x67750f00,\n0xaaaab978,\n0xcdc899ab,\n0x567889ce,\n0x00bf1123,\n0x8998870f,\n0x56898998,\n0x66656455,\n0x34688988,\n0x0f00bf12,\n0x56676765,\n0x98985555,\n0x9aa9b9c9,\n0x123568aa,\n0x990f00bf,\n0xdcbcaaba,\n0x9abbabbb,\n0xbbbb8888,\n0xbf12357a,\n0x55530f00,\n0x99a99a55,\n0x567a99a9,\n0x35555555,\n0x00bf1112,\n0x899a970f,\n0x55666667,\n0xbbcbb655,\n0x3468989a,\n0x0f00bf11,\n0x56444443,\n0x44455665,\n0x578aa993,\n0x11113445,\n0x780f00bf,\n0x77868898,\n0x69a8b878,\n0x79795556,\n0xbf112356,\n0x55540800,\n0x7a99a875,\n0x83522347,\n0x12350255,\n0x0300bf11,\n0x32222222,\n0x72072283,\n0x33457777,\n0xbf011112,\n0x77a80f00,\n0x5654558a,\n0x77854444,\n0x37868868,\n0x00bf1112,\n0x12222205,\n0x85111111,\n0x11210322,\n0x00bf1011,\n0x5222210f,\n0x87687787,\n0x35445778,\n0x11122223,\n0x8e00bf01,\n0xbf010011,\n0x43330f00,\n0x21121234,\n0x86854444,\n0x13435477,\n0x00bf0111,\n0x9688770f,\n0x87797787,\n0x61124777,\n0x12379779,\n0x0000bf01,\n0x09338432,\n0x11122222,\n0x23333321,\n0x00bf1111,\n0x5555540f,\n0x33455454,\n0x78879533,\n0x11355655,\n0x0f00bf11,\n0x55555553,\n0x43445565,\n0x55333334,\n0x11123565,\n0x760f00bf,\n0x66567877,\n0x67887966,\n0x78766444,\n0xbf111248,\n0x55530f00,\n0x77898865,\n0x55556667,\n0x46666655,\n0x00bf1112,\n0x66865300,\n0x56565607,\n0x12356555,\n0x0f00bf11,\n0x76787786,\n0x66667777,\n0x76877766,\n0x11124677,\n0x630f00bf,\n0x55556666,\n0x56666555,\n0x66565565,\n0xbf111246,\n0x55530f00,\n0x87876766,\n0x66667668,\n0x35554566,\n0x00bf1111,\n0x4443320f,\n0x44555554,\n0x45444555,\n0x11244444,\n0x0f00bf11,\n0x44666555,\n0x55555545,\n0x55666765,\n0x11123455,\n0x650f00bf,\n0x76676566,\n0x46666676,\n0x75775544,\n0xbf111136,\n0x84320000,\n0x22120933,\n0x33443332,\n0x11112333,\n0x540f00bf,\n0x33334545,\n0x63222234,\n0x55446757,\n0xbf111124,\n0x22210f00,\n0x33333322,\n0x22233232,\n0x23333322,\n0x00bf0111,\n0x6666660f,\n0x67555555,\n0x43334676,\n0x11244443,\n0x0f00bf11,\n0x76533331,\n0x33356766,\n0x33232223,\n0x11112333,\n0x210100bf,\n0x09338332,\n0x44433323,\n0x13333344,\n0x00bf0111,\n0x6666650f,\n0x45454445,\n0x44343443,\n0x11234544,\n0x0500bf01,\n0x22333221,\n0x22862332,\n0x01111202,\n0x210f00bf,\n0x44343222,\n0x34433344,\n0x22223343,\n0xbf011112,\n0x11110a00,\n0x22211112,\n0x22111111,\n0x00118312,\n0x0f00bf01,\n0x12334443,\n0x34342211,\n0x21343334,\n0x01111121,\n0x220f00bf,\n0x45443333,\n0x23433454,\n0x44332111,\n0xbf011113,\n0x11010a00,\n0x11111101,\n0x11111101,\n0x00118312,\n0x0300bf01,\n0x12333333,\n0x32071183,\n0x12113433,\n0xc0011111,\n0x11010700,\n0x00110010,\n0x11851000,\n0x00bf0100,\n0x33333308,\n0x33211212,\n0x11852334,\n0x00bf0100,\n0x11111108,\n0x12333334,\n0x11851011,\n0x110500c0,\n0x01011111,\n0xc0118810,\n0x33330300,\n0x118a1233,\n0x118e00c0,\n0x118d00c0,\n0x00c00100,\n0x00c1118d,\n0x00c1118d,\n0x1000118c,\n0x110300c1,\n0x83011111,\n0x11110200,\n0x0200c411,\n0xdc111111\n);\n#else\nconst vec2 bitmap_size = vec2(96, 64);\nconst int[] palette = int[] (\n0x00020704,\n0x00090d0b,\n0x00101311,\n0x00151816,\n0x001b1d1b,\n0x001f2220,\n0x00252725,\n0x002a2c2b,\n0x00303331,\n0x003a3d3b,\n0x00454846,\n0x004f5250,\n0x005a5d5b,\n0x00656766,\n0x006f7270,\n0x00818482\n);\nconst int[] rle = int[] (\n0x00a51189,\n0x01001188,\n0x118800a5,\n0x118800a6,\n0x118700a6,\n0x118800a7,\n0x1001008f,\n0x8c008301,\n0x8f008311,\n0x00008711,\n0x00119510,\n0x00118e01,\n0x00008401,\n0x00119610,\n0x84008301,\n0x8d010011,\n0x91100000,\n0x22210611,\n0x11122222,\n0x05008311,\n0x11101111,\n0x22841111,\n0x83111101,\n0x11100200,\n0x03228311,\n0x01111111,\n0x10030084,\n0x83332211,\n0x22334e44,\n0x55443211,\n0x34455555,\n0x44332222,\n0x44444554,\n0x01122334,\n0x32210000,\n0x55555444,\n0x44444455,\n0x45555555,\n0x21222234,\n0x44444322,\n0x11223344,\n0x44432200,\n0x77766544,\n0x45556777,\n0x33333444,\n0x01122223,\n0x11100000,\n0x54332222,\n0x1f888376,\n0x88877777,\n0x55677888,\n0x33444444,\n0x00011122,\n0x43221110,\n0x98887765,\n0x44578889,\n0x11111223,\n0x11280085,\n0x32222211,\n0x56665554,\n0x87765555,\n0x99877778,\n0x89aaaaaa,\n0x11112457,\n0x11110000,\n0x76655432,\n0x89999998,\n0x01112457,\n0x11260086,\n0x22233222,\n0x33333322,\n0x55543222,\n0x65445556,\n0x45666666,\n0x11122234,\n0x21111000,\n0x44444322,\n0x33443334,\n0x00881122,\n0x228a1000,\n0x2344431e,\n0x34443322,\n0x34444433,\n0x11001122,\n0x55544332,\n0x33455665,\n0x33444443,\n0x01011122,\n0x212a0084,\n0x44555543,\n0x44555444,\n0x54332233,\n0x65444455,\n0xba998777,\n0x23589abb,\n0x97542111,\n0x5689aaa9,\n0x98642235,\n0x789aaaaa,\n0x00831135,\n0x8631102b,\n0x9aabbba9,\n0x77766568,\n0x44455677,\n0x88765554,\n0xbcdddba8,\n0x00112579,\n0xaa997421,\n0x24445899,\n0x99987422,\n0x57888889,\n0x2b008313,\n0x87531110,\n0x57889999,\n0xaaa99776,\n0x88876789,\n0x75555578,\n0x22467887,\n0x00000112,\n0x43334321,\n0x57888876,\n0x12445544,\n0x01111221,\n0x11270086,\n0x87532222,\n0x55677788,\n0x78999875,\n0x99987545,\n0x23344588,\n0x00000011,\n0x77754211,\n0xcdca8887,\n0x1234558a,\n0x86111111,\n0x53202800,\n0x77544455,\n0x45688767,\n0x57888754,\n0xeedca845,\n0x579bbabc,\n0x00000012,\n0xacca8631,\n0xa9867888,\n0xbbba889a,\n0x8512469a,\n0x52112a00,\n0x9aacdcb9,\n0x89988888,\n0x77766667,\n0xaa977887,\n0x8acddb89,\n0x00001456,\n0xefeb8211,\n0x478988bd,\n0xbddb8423,\n0x59bcca78,\n0x2a008412,\n0xdc984110,\n0xaa988acd,\n0xcefffeca,\n0x9bddca89,\n0xbb99bb97,\n0x1257789a,\n0x31000000,\n0xb8688876,\n0x766adeee,\n0x33446888,\n0x85011223,\n0x74102800,\n0xda555588,\n0x888cefff,\n0xadffd989,\n0xfeeda669,\n0x469bcbbe,\n0x00000002,\n0x79a97410,\n0xcdca8997,\n0x99a9978a,\n0x86135789,\n0x96202800,\n0x985899bb,\n0x89998758,\n0x66899878,\n0xfffea435,\n0x3568bdde,\n0x00000001,\n0x59aa9720,\n0xa9999a84,\n0x568bca99,\n0x86147987,\n0x84102800,\n0xb8478999,\n0xbbcccccc,\n0x9abb958a,\n0x98ab9437,\n0x2579abb9,\n0x00000001,\n0x6abb8510,\n0x5addbca6,\n0x99abb963,\n0x86124899,\n0xa5102900,\n0xb858bbdc,\n0x89bbdbbc,\n0x9abdb579,\n0xcdfd8328,\n0x3578bddb,\n0x00000011,\n0x69aba710,\n0xcdbaaa85,\n0x899cda69,\n0x01259aa8,\n0x10160085,\n0x389bbb84,\n0xeefedcb7,\n0xca858bbc,\n0xba7348cc,\n0x68bcba99,\n0x00831235,\n0x3688720d,\n0x67ab9b94,\n0x889bb845,\n0x87224788,\n0x89831500,\n0xbcb53699,\n0x5888aaa9,\n0x24889a83,\n0xc9868841,\n0x0113358b,\n0x720d0083,\n0x99723457,\n0x95227aa8,\n0x24337899,\n0x15008701,\n0x13545752,\n0xaa79a973,\n0x98624787,\n0x54101389,\n0x35699565,\n0x00830112,\n0x368b940d,\n0x58dcaea3,\n0x568a9324,\n0x87112343,\n0x69821500,\n0x9b821388,\n0x59cdfb54,\n0x14969c94,\n0xa4446521,\n0x011377be,\n0xb50e0083,\n0xff94258c,\n0x85236bcf,\n0x124568aa,\n0x00860101,\n0xca9ec227,\n0x9acb9426,\n0xa326addb,\n0x5124bdff,\n0xceb45454,\n0x0001158a,\n0xf6100000,\n0xdd94458f,\n0x962359ee,\n0x24345898,\n0x16008601,\n0xba8fe310,\n0x79997227,\n0x9428dffa,\n0x4125defd,\n0xbca46675,\n0x8301148a,\n0x9ee50d00,\n0xcfde8356,\n0x88731348,\n0x11123357,\n0xd2150087,\n0x7325ba8d,\n0xbee9678a,\n0xbcff8626,\n0x63653024,\n0x27999a93,\n0x0d008302,\n0x63359bb3,\n0x12379ddb,\n0x22224652,\n0x00870112,\n0x9a8ca115,\n0x57885324,\n0x74138ba7,\n0x2012aaca,\n0x99724454,\n0x83021799,\n0x58910c00,\n0x8bba5223,\n0x24441124,\n0x88111221,\n0x89911500,\n0x76521378,\n0x126a8545,\n0x12689742,\n0x41335220,\n0x01135785,\n0x710c0083,\n0xa9312247,\n0x4311248a,\n0x11112232,\n0x81140088,\n0x53127768,\n0x58743454,\n0x47864113,\n0x33322001,\n0x02458731,\n0x810c0084,\n0xba53225a,\n0x361115ab,\n0x11122243,\n0x91140088,\n0x9825634a,\n0x7a974554,\n0x57874212,\n0x56422001,\n0x04777841,\n0x910e0084,\n0x7a74247a,\n0x461127ca,\n0x11133455,\n0x00860121,\n0x652ba115,\n0x24588725,\n0x45139b87,\n0x30116878,\n0x9a626854,\n0x83010588,\n0x7ec10e00,\n0xca798434,\n0x88840128,\n0x23433557,\n0x15008612,\n0x25653ba2,\n0xb6377a97,\n0xac7713bf,\n0x8540119c,\n0xbaae9467,\n0x00830119,\n0x376db10e,\n0x499978a7,\n0x789b9602,\n0x11236655,\n0x90150086,\n0x96254528,\n0xedb957ae,\n0x9dee7715,\n0x44784001,\n0x19cdffc5,\n0x0e008301,\n0x75443990,\n0x025a9657,\n0x7698bdb6,\n0x86022357,\n0x26401400,\n0xca972533,\n0x15fabd79,\n0x115bef98,\n0x92225970,\n0x8416bbab,\n0x25500d00,\n0x54443323,\n0x9a740357,\n0x11235577,\n0x20140087,\n0x54122224,\n0x97868998,\n0x27ab7415,\n0x11232001,\n0x02455532,\n0x800d0084,\n0x98352444,\n0x73035736,\n0x13456567,\n0x14008711,\n0x22455820,\n0x96598943,\n0xaa781588,\n0x54200127,\n0x55643211,\n0x0e008402,\n0x66544580,\n0x04764589,\n0x56979994,\n0x86011123,\n0x77301500,\n0xa8342357,\n0x1699a89b,\n0x1149ba68,\n0x42247640,\n0x01047999,\n0x600e0083,\n0x76785625,\n0x85147645,\n0x21236786,\n0x00860111,\n0x34254014,\n0x89843323,\n0x55137586,\n0x40112674,\n0x67412244,\n0x00840235,\n0x6915900e,\n0x45488659,\n0x23556502,\n0x01122122,\n0x61140086,\n0x32232218,\n0x55556772,\n0x16984402,\n0x22348011,\n0x02343431,\n0x700d0084,\n0x658aa915,\n0x35013324,\n0x11223223,\n0x14008711,\n0x22121640,\n0x43343112,\n0x44430245,\n0x33400036,\n0x24322112,\n0x0d008401,\n0x7aa50410,\n0x01211112,\n0x22333535,\n0x00870111,\n0x11122014,\n0x23321111,\n0x22024434,\n0x20001543,\n0x44111112,\n0x00840233,\n0xa627300e,\n0x4412328c,\n0x65887613,\n0x01111335,\n0x20140086,\n0x22222324,\n0x64654565,\n0x27794615,\n0x21223011,\n0x03458962,\n0x400e0084,\n0x448db554,\n0x43144322,\n0x12356785,\n0x00860111,\n0x22231014,\n0x25542222,\n0x74168674,\n0x20113758,\n0x47433112,\n0x00841223,\n0xa422300d,\n0x1111227b,\n0x12223411,\n0x87111111,\n0x22101400,\n0x21223212,\n0x12432322,\n0x11133342,\n0x35212220,\n0x84122222,\n0x11200900,\n0x11128ba4,\n0x23241111,\n0x01001183,\n0x10140086,\n0x23531111,\n0x23321222,\n0x12332212,\n0x21222111,\n0x11224433,\n0x200d0084,\n0x22899411,\n0x23112111,\n0x11111233,\n0x14008711,\n0x54121210,\n0x42222224,\n0x54221235,\n0x22211114,\n0x22343222,\n0x0d008412,\n0x48620220,\n0x01221112,\n0x11221322,\n0x00871111,\n0x11111014,\n0x13212324,\n0x21124321,\n0x20111243,\n0x23221212,\n0x00840122,\n0x7211200d,\n0x11211149,\n0x21222201,\n0x88111112,\n0x11111300,\n0x11111232,\n0x12111121,\n0x10111122,\n0x24211222,\n0x00841112,\n0x72111009,\n0x12111139,\n0x83122211,\n0x0e008811,\n0x11221111,\n0x11211212,\n0x13222111,\n0x83121112,\n0x84120022,\n0x11100300,\n0x11891341,\n0x110e0088,\n0x11112111,\n0x11122121,\n0x11112211,\n0x22831101,\n0x00841200,\n0x21111003,\n0x88118912,\n0x04118e00,\n0x22221112,\n0x8b008511,\n0x88010011,\n0x00118c00,\n0x85118501,\n0x10010200,\n0x00008301,\n0x13008d01,\n0x00001001,\n0x11000010,\n0x00010000,\n0x11100001,\n0x01011010,\n0x01000087,\n0x010000ae,\n0x008900ff\n);\n#endif\n\nconst int rle_len_bytes = rle.length() << 2;\n\nint get_rle_byte( in int byte_index )\n{\n        int long_val = rle[ byte_index >> 2 ];\n        return ( long_val >> ( ( byte_index & 0x03 ) << 3 ) ) & 0xff;\n}\n\nint get_uncompr_byte( in int byte_index )\n{\n        int rle_index = 0;\n        int cur_byte_index = 0;\n        while( rle_index < rle_len_bytes )\n        {\n                int cur_rle_byte = get_rle_byte( rle_index );\n                bool is_sequence = int( cur_rle_byte & 0x80 ) == 0;\n                int count = ( cur_rle_byte & 0x7f ) + 1;\n\n                if( byte_index >= cur_byte_index && byte_index < cur_byte_index + count )\n                {\n                        if( is_sequence )\n                        {\n                                return get_rle_byte( rle_index + 1 + ( byte_index - cur_byte_index ) );\n                        }\n                        else\n                        {\n                                return get_rle_byte( rle_index + 1 );\n                        }\n                }\n                else\n                {\n                        if( is_sequence )\n                        {\n                                rle_index += count + 1;\n                                cur_byte_index += count;\n                        }\n                        else\n                        {\n                                rle_index += 2;\n                                cur_byte_index += count;\n                        }\n                }\n        }\n\n        return 0;\n}\n\n\nint getPaletteIndexXY( in ivec2 fetch_pos )\n{\n        int palette_index = 0;\n        if( fetch_pos.x >= 0 && fetch_pos.y >= 0\n                && fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )\n        {\n                int uncompr_byte_index = fetch_pos.y * ( int( bitmap_size.x ) >> 1 )\n                        + ( fetch_pos.x >> 1);\n\n                int uncompr_byte = get_uncompr_byte( uncompr_byte_index );\n\n                int nibble_index = fetch_pos.x & 0x01;\n                palette_index = ( uncompr_byte >> ( nibble_index << 2 ) ) & 0xf;\n        }\n        return palette_index;\n}\n\n\nint getPaletteIndex( in vec2 uv )\n{\n        int palette_index = 0;\n        ivec2 fetch_pos = ivec2( uv * bitmap_size );\n        palette_index = getPaletteIndexXY( fetch_pos );\n        return palette_index;\n}\n\nvec4 getColorFromPalette( in int palette_index )\n{\n        int int_color = palette[ palette_index ];\n        return vec4( float( int_color & 0xff ) / 255.0,\n                                float( ( int_color >> 8 ) & 0xff) / 255.0,\n                                float( ( int_color >> 16 ) & 0xff) / 255.0,\n                                0 );\n}\n\nvec4 getBitmapColor( in vec2 uv )\n{\n        return getColorFromPalette( getPaletteIndex( uv ) );\n}\n\n\n// Hash without Sine\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n\n// https://www.shadertoy.com/view/4djSRW\n// Trying to find a Hash function that is the same on ALL systens\n// and doesn't rely on trigonometry functions that change accuracy \n// depending on GPU. \n// New one on the left, sine function on the right.\n// It appears to be the same speed, but I suppose that depends.\n\n// * Note. It still goes wrong eventually!\n// * Try full-screen paused to see details.\n\n\n//#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n//#define HASHSCALE1 .1031\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n//#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n#define HASHSCALE1 443.8975\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n#define HASHSCALE4 vec4(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n        vec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n        vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n        p3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n        vec3 p3 = fract(vec3(p) * HASHSCALE3);\n        p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n        vec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n        p3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n        vec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n        vec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n        vec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n        p4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float x = fragCoord.x / iResolution.x;\n    float y = fragCoord.y / iResolution.y;\n    if (iFrame < 3) {\n        float x0 = floor(x * bitmap_size.x) / bitmap_size.x;\n        float x1 =  ceil(x * bitmap_size.x) / bitmap_size.x;\n        float z0 = getBitmapColor(vec2(x0, y)).x;\n        float z1 = getBitmapColor(vec2(x1, y)).x;\n        float z = mix(z0, z1, smoothstep(x0, x1, x));\n        fragColor = z*z * vec4(16,4,1,0);\n    } else {\n        fragColor = texture(iChannel0, vec2(x,y));\n        fragColor.w += iTimeDelta;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}