{
    "Shader": {
        "info": {
            "date": "1535139917",
            "description": "byproduct of attempting to simulate surface tension",
            "flags": 32,
            "hasliked": 0,
            "id": "ltKcR1",
            "likes": 43,
            "name": "Weird Science",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 1,
            "username": "wyatt",
            "viewed": 1657
        },
        "renderpass": [
            {
                "code": "vec4 t (vec2 v) {return texture(iChannel0,v/iResolution.xy);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 me = t(U);\n    vec2 s = texture(iChannel1,U/iResolution.xy).xy;\n    float f = length(s.xy);\n    C = vec4(f*vec3(1,.5,.3),1);\n    C += 3.*me.w*me.w;\n    C.xyz += vec3(15,12,35)*me.w*length(me.xy);\n    C *= 0.8+0.2*texture(iChannel2, reflect(vec3(0,0,1),normalize(vec3(s,.1))));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 ur, U;\nvec4 t (vec2 v, int a, int b) {return texture(iChannel0,((v+vec2(a,b))/ur));}\nvec4 t (vec2 v) {return texture(iChannel0,(v/ur));}\nfloat area (vec2 a, vec2 b, vec2 c) { // area formula of a triangle from edge lengths\n    float A = length(b-c), B = length(c-a), C = length(a-b), s = 0.5*(A+B+C);\n    return sqrt(s*(s-A)*(s-B)*(s-C));\n}\nvoid mainImage( out vec4 Co, in vec2 uu )\n{\n    U = uu;\n    ur = iResolution.xy;\n    if (iFrame < 1 ) {\n        Co = vec4(0);\n    } else {\n        //init position and bounding square\n        vec2 v = U;\n        vec2 A = v + vec2( .5, .5),\n             B = v + vec2( .5,-.5),\n             C = v + vec2(-.5, .5),\n             D = v + vec2(-.5,-.5);\n        // advect position and bounding square backwards through time\n        // so subtracting the velocity from the position to backsolve\n        for (int i = 0; i < 5; i++) {\n            v -= t(v).xy;\n            A -= t(A).xy;\n            B -= t(B).xy;\n            C -= t(C).xy;\n            D -= t(D).xy;\n        }\n        // get information about the new position\n        vec4 me = t(v,0,0);\n        vec4 n = t(v,0,1),\n            e = t(v,1,0),\n            s = t(v,0,-1),\n            w = t(v,-1,0);\n        // blend information with neighbors\n        vec4 ne = .25*(n+e+s+w);\n        me = mix(me,ne,vec4(0.04,0.04,1,0.0));\n        // adjust pressure according to the change in the \n        // area of the bounding square\n        float da = (area(A,B,C)+area(B,C,D)-1.);\n        me.z -=  da;\n        vec4 pr = vec4(e.z,w.z,n.z,s.z);\n        me.xy = me.xy + vec2(pr.x-pr.y, pr.z-pr.w)/ur;\n        // add a little thing in the middle\n        vec2 o = abs(U-0.5*ur);\n        if (iFrame<2&&max(o.x,o.y)<2.) me.w=1.;\n        // make the borders frozen\n        if (min(0.5*ur.x-o.x,0.5*ur.y-o.y)<2.) me.xy*= 0.;\n        // add the electric force from the other buffer to the velocity\n        me.xy += 0.0016*texture(iChannel1,v/ur).xy;\n        \n        Co = me;\n    \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 ur, U;\nvec4 t (vec2 v) {return texture(iChannel0,(v/ur));}\nvec2 st (float w, float u, vec2 v) {\n    // this is kind of hard to read but its just like the classic\n    // electric force formula you might learn in a physics class\n    //\n    // (possitive*possitive+negative*negative - negative*positive-positive*negative)/R\n    return ( w*u-w*(1.-u)-(1.-w)*u+(1.-w)*(1.-u))*(v.xy)/dot(v,v);}\nvec2 st (float p, float n, float p1, float n1, vec2 v) {\n\treturn (p*p1+n*n1-p*n1-n*p1)*normalize(v)/dot(v,v);\n}\nvoid mainImage( out vec4 Co, in vec2 uu )\n{\n    U = uu;\n    ur = iResolution.xy;\n    if (iFrame < 1 ) {\n        Co = vec4(0);\n    } else {\n        vec4 me = t(U);\n    \tvec2 sf = vec2(0);\n        me.z+=1.;\n        for (int x = -2; x <= 2; x++) {\n        for (int y = -2; y <= 2; y++) {\n            if (x==0&&y==0) continue;\n            // sum electric force from 5x5 neighborhood\n            //sf += st (me.w,t(U+vec2(x,y)).w,vec2(x,y));\n            vec4 o = t(U+vec2(x,y));\n            o.z+=1.;\n            sf += st (me.w*me.z,(1.-me.w)*me.z,o.w*o.z,(1.-o.w)*o.z,vec2(x,y));\n        }\n        }\n    \tCo = vec4(sf,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 ur, U;\nvec4 t (vec2 v, int a, int b) {return texture(iChannel0,((v+vec2(a,b))/ur));}\nvec4 t (vec2 v) {return texture(iChannel0,(v/ur));}\nfloat area (vec2 a, vec2 b, vec2 c) { // area formula of a triangle from edge lengths\n    float A = length(b-c), B = length(c-a), C = length(a-b), s = 0.5*(A+B+C);\n    return sqrt(s*(s-A)*(s-B)*(s-C));\n}\nvoid mainImage( out vec4 Co, in vec2 uu )\n{\n    U = uu;\n    ur = iResolution.xy;\n    if (iFrame < 1 ) {\n        Co = vec4(0);\n    } else {\n        //init position and bounding square\n        vec2 v = U;\n        vec2 A = v + vec2( .5, .5),\n             B = v + vec2( .5,-.5),\n             C = v + vec2(-.5, .5),\n             D = v + vec2(-.5,-.5);\n        // advect position and bounding square backwards through time\n        // so subtracting the velocity from the position to backsolve\n        for (int i = 0; i < 5; i++) {\n            v -= t(v).xy;\n            A -= t(A).xy;\n            B -= t(B).xy;\n            C -= t(C).xy;\n            D -= t(D).xy;\n        }\n        // get information about the new position\n        vec4 me = t(v,0,0);\n        vec4 n = t(v,0,1),\n            e = t(v,1,0),\n            s = t(v,0,-1),\n            w = t(v,-1,0);\n        // blend information with neighbors\n        vec4 ne = .25*(n+e+s+w);\n        me = mix(me,ne,vec4(0.04,0.04,1,0.0));\n        // adjust pressure according to the change in the \n        // area of the bounding square\n        float da = (area(A,B,C)+area(B,C,D)-1.);\n        me.z -=  da;\n        vec4 pr = vec4(e.z,w.z,n.z,s.z);\n        me.xy = me.xy + vec2(pr.x-pr.y, pr.z-pr.w)/ur;\n        // add a little thing in the middle\n        vec2 o = abs(U-0.5*ur);\n        if (iFrame<2&&max(o.x,o.y)<2.) me.w=1.;\n        // make the borders frozen\n        if (min(0.5*ur.x-o.x,0.5*ur.y-o.y)<2.) me.xy*= 0.;\n        // add the electric force from the other buffer to the velocity\n        me.xy += 0.0016*texture(iChannel1,v/ur).xy;\n        \n        Co = me;\n    \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 ur, U;\nvec4 t (vec2 v) {return texture(iChannel0,(v/ur));}\nvec2 st (float w, float u, vec2 v) {\n    // this is kind of hard to read but its just like the classic\n    // electric force formula you might learn in a physics class\n    //\n    // (possitive*possitive+negative*negative - negative*positive-positive*negative)/R\n    return ( w*u-w*(1.-u)-(1.-w)*u+(1.-w)*(1.-u))*(v.xy)/dot(v,v);}\nvec2 st (float p, float n, float p1, float n1, vec2 v) {\n\treturn (p*p1+n*n1-p*n1-n*p1)*normalize(v)/dot(v,v);\n}\nvoid mainImage( out vec4 Co, in vec2 uu )\n{\n    U = uu;\n    ur = iResolution.xy;\n    if (iFrame < 1 ) {\n        Co = vec4(0);\n    } else {\n        vec4 me = t(U);\n    \tvec2 sf = vec2(0);\n        me.z+=1.;\n        for (int x = -2; x <= 2; x++) {\n        for (int y = -2; y <= 2; y++) {\n            if (x==0&&y==0) continue;\n            // sum electric force from 5x5 neighborhood\n            //sf += st (me.w,t(U+vec2(x,y)).w,vec2(x,y));\n            vec4 o = t(U+vec2(x,y));\n            o.z+=1.;\n            sf += st (me.w*me.z,(1.-me.w)*me.z,o.w*o.z,(1.-o.w)*o.z,vec2(x,y));\n        }\n        }\n    \tCo = vec4(sf,0,1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}