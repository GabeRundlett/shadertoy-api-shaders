{
    "Shader": {
        "info": {
            "date": "1488520901",
            "description": "Playing with some post processing ideas",
            "flags": 36,
            "hasliked": 0,
            "id": "MdlcDM",
            "likes": 8,
            "name": "Seeing Worlds",
            "published": 3,
            "tags": [
                "raymarch",
                "postprocessing"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 1212
        },
        "renderpass": [
            {
                "code": "// Cabbibo's HSV\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\nvoid mainImage(out vec4 f, in vec2 w)\n{\n    vec2 u = w/iResolution.xy;\n    vec4 col = vec4(0.);\n    float PSD = pow(abs(texture(iChannel1, vec2(.5)).r), 2.);\n    \n    for (int i = 0; i < 25; i++)\n    {\n        // adapted from by iq https://www.shadertoy.com/view/MsKGWR\n        vec2 offset = .05*cos( 0.1*float(i) + PSD + iTime + vec2(0,.1));\n        vec4 t = texture(iChannel0, u*.8 + offset + vec2(.1))*.3;\n        col += t*5.;\n    }\n    \n    col.rgb = hsv(col.x * .1 + iTime*.5 + PSD, 1., 1.);\n    f = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float eps = 0.005;\nconst float far = 20.;\n\nfloat map(vec3 p)\n{\n    p.z -= iTime;\n    return length(mod(p, 2.)-1.)-.5;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(eps,0);\n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy), map(p+e.yxy)-map(p-e.yxy), map(p+e.yyx)-map(p-e.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(uv, 1.);\n    vec3 rd = normalize(vec3(uv, -1.));\n    float t = 0.;\n    for (int i = 0; i < 100; i++)\n    {\n        float m = map(ro + rd * t);\n        t += m;\n        if (m < eps || t > far) break;\n    }\n \n    vec3 p = ro + rd * t;\n    vec3 n = calcNormal(p);\n    vec3 lp = vec3(1., 4., 5.);\n    vec3 ld = lp - p;\n    float len = length(ld);\n    ld /= len;\n    float diff = max(dot(ld, n), 0.);\n    vec3 col = vec3(1.) * diff;\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}