{
    "Shader": {
        "info": {
            "date": "1583152200",
            "description": "made with 1 torus section + symmetries \n\nmouse controls camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVXzK",
            "likes": 7,
            "name": "knit",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "knot",
                "short",
                "knitting"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/ttKSDm\n\nfloat PI = 3.14159,\n       r = .16,                                // rope radius\n       d = 1.32, e = 4.5, f = 3.;\n\n#define FRAME 0\n\n#define T(q)     ( length(vec2(length(q.xy)-1.,q.z)) - r )        // torus\n#define S(a,da)  ( abs(mod(atan(q.y,q.x)-a+PI, 2.*PI) -PI) - da ) // section\n#define Ts(q,a,da) max(T(q),S(a,da) )                             // torus section\n#define R(a)       mat2( cos( a + vec4(0,33,11,0)) )              // rotation\n\nfloat knot0(vec3 p) {                           // --- half stitch\n    vec3 q; float t, a=p.y+f/4.;\n  //p.z += .4*(1.-.5*a*a),                      // depth twist\n    p.z += .4*cos(1.5*a),                       // depth twist\n    p.x = mod(p.x-d,2.*d)-d;                    // + rank periodicity\n    q = p, t = Ts(q,PI/2.,1.55*PI/2.);          // half stitch\n    return t;\n}\nfloat knot(vec3 p) {                            // --- full rank of stitch\n    vec3 q=p; float t;\n    q.y = mod(q.y,e)-f,                         // + vertical periodicity\n    t = knot0(q);                                    // top half stitch\n    q.y = -1.5-q.y,  q.x -= d, t = min(t, knot0(q)); // bottom symmetric\n    return t;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    float t = 1e9,tx,ty,tz;\n    vec3  q = iResolution,\n          D = normalize(vec3(.3*(U+U-q.xy)/q.y, -1)),     // ray direction\n          P = 25./q, p, a, qa;                 // marching point along ray \n    vec2  M = (length(iMouse.xy)<20.) ? vec2(0): 3.14*(2.*iMouse.xy-q.xy)/q.y,\n        //C = 3.14*vec2(-.3,.4),               // camera\n          C = M==vec2(0) ? vec2(iTime) : M;\n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.04 )\n        p = P,\n        p.xz *= R(C.x), p.yz *= R(C.y),        // camera rotation\n        q = p,\n#if FRAME\n        a = abs(qa=q),                         // draw frame\n        t = max(min( ty= max(a.x,a.z) -.01, min( tx= max(a.z,a.y) -.01 ,tz= max(a.x,a.y) -.01 )  ),length(q)-2.),\n#endif\n        t = min(t, knot(p)),                   // odd rank\n        p.y -= e/2., \n        t = min(t, knot(p)),                   // even rank\n        P += t*D;                              // step forward = dist to obj\n\n#if FRAME                                      // --- color frame\n    if (t==tx) O.gb*=.4+.4*sign(qa.x);         // x axis: red   ( whiter on positive side )\n    if (t==ty) O.rb*=.4+.4*sign(qa.y);         // y axis: green\n    if (t==tz) O.rg*=.4+.4*sign(qa.z);         // z axis: blue\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}