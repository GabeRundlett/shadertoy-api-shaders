{
    "Shader": {
        "info": {
            "date": "1686340350",
            "description": "Computers were made for cubes\nMade after hanging lug00ber twitch stream: https://www.twitch.tv/lug00ber\nHad a discussion that rotating cubes + music is really what computers are made for.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtVSDy",
            "likes": 71,
            "name": "Computers were made for cubes",
            "published": 3,
            "tags": [
                "3d",
                "cubes"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 2105
        },
        "renderpass": [
            {
                "code": "// CC0: Computers were made for cubes\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  22.0\n#define MAX_RAY_MARCHES 70\n#define NORM_OFF        0.001\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst float hoff      = 0.0;\nconst vec3 skyCol     = HSV2RGB(vec3(hoff+0.57, 0.70, 0.25));\nconst vec3 glowCol0   = HSV2RGB(vec3(hoff+0.05, 0.85, 0.00125));\nconst vec3 glowCol1   = HSV2RGB(vec3(hoff+0.55, 0.85, 0.05));\nconst vec3 sunCol1    = HSV2RGB(vec3(hoff+0.60, 0.50, 0.5));\nconst vec3 sunCol2    = HSV2RGB(vec3(hoff+0.05, 0.75, 25.0));\nconst vec3 diffCol    = HSV2RGB(vec3(hoff+0.60, 0.75, 0.25));\nconst vec3 sunDir1    = normalize(vec3(3., 3.0, -7.0));\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nmat3 rotX(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n    1.0 , 0.0 , 0.0\n  , 0.0 , +c  , +s\n  , 0.0 , -s  , +c\n  );\n}\n\nmat3 rotY(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n    +c  , 0.0 , +s\n  , 0.0 , 1.0 , 0.0\n  , -s  , 0.0 , +c\n  );\n}\n\nmat3 rotZ(float a) {\n  float c = cos(a);\n  float s = sin(a);\n  return mat3(\n    +c  , +s  , 0.0\n  , -s  , +c  , 0.0\n  , 0.0 , 0.0 , 1.0\n  );\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(float x) {\n  return sqrt(x*x+1.0)*0.8-1.8;\n}\n\n// License: Unknown, author: Unknown, found: shadertoy somewhere, don't remember where\nfloat dfcos(vec2 p, float freq) {\n  // Approximate distance to cos\n  float x = p.x;\n  float y = p.y;\n  x *= freq;\n\n  float x1 = abs(mod(x+PI,TAU)-PI);\n  float x2 = abs(mod(x   ,TAU)-PI);\n\n  float a = 0.18*freq;\n\n  x1 /= max( y*a+1.0-a,1.0);\n  x2 /= max(-y*a+1.0-a,1.0);\n  return (mix(-dfcos(x2)-1.0,dfcos(x1)+1.0,clamp(y*0.5+0.5,0.0,1.0)))/max(freq*0.8,1.0)+max(abs(y)-1.0,0.0)*sign(y);\n}\n\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat boxf(vec3 p, vec3 b, float e) {\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat lug00ber(vec2 p) {\n  vec2 p0 = p;\n  p0.y = abs(p0.y);\n  p0 -= vec2(-0.705, 0.41);\n  float d0 = length(p0)-0.16;\n  \n  float topy = 0.68;\n  vec2 bp = p-vec2(0.27, -0.8);\n  float d1 = segment(p, vec2(0.72, topy), vec2(0.27, -0.8))-0.06;\n  float d2 = segment(p, vec2(-0.13, topy), vec2(0.33, -0.8))-0.1;\n  float d3 = p.y-(topy-0.066);\n\n  float d4 = box(p-vec2(-0.1, topy), vec2(0.25, 0.03))-0.01;\n  float d5 = box(p-vec2(0.685, topy), vec2(0.19, 0.03))-0.01;\n  float d6 = min(d4, d5);\n  \n  vec2 ax7 = normalize(vec2(vec2(0.72, topy)-vec2(0.27, -0.8)));\n  vec2 nor7 = vec2(ax7.y, -ax7.x);\n  float d7 = dot(p, nor7)+dot(nor7, -vec2(vec2(0.72, topy)))+0.05;\n  \n  d2 = max(d2, d7);\n  float d = d1;\n  d = pmin(d,d2, 0.025);\n  d = max(d, d3);\n  d = pmin(d, d6, 0.1);\n  d = min(d,d0);\n  \n  return d; \n}\n\nmat3 g_rot;\nfloat g_gd;\n\nfloat df(vec3 p) {\n  vec3 p0 = p;\n  p0 *= g_rot;\n  float d0 = box(p0, vec3(3.0));\n  vec3 p1 = p0;\n  float d1 = boxf(p1, vec3(3.01), 0.)-0.01;\n\n  float d = d0;\n//  d = max(d, -(d1-0.03));\n  d = min(d, d1);\n  \n  g_gd = min(g_gd, abs(d1));\n\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n//  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  return t;\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  float sd = max(dot(sunDir1, rd), 0.0);\n  float sf = 1.0001-sd;\n\n\n  col += clamp(vec3(1.0/abs(rd.y))*glowCol0, 0.0, 1.0);\n  col += 0.75*skyCol*pow((1.0-abs(rd.y)), 8.0);\n  col += 2.0*sunCol1*pow(sd, 100.0);\n  col += sunCol2*pow(sd, 800.0);\n\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -6.0));\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += vec3(4.0)*skyCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += vec3(0.8)*skyCol*exp(-0.5*max(db, 0.0));\n    col += 0.25*sqrt(skyCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0.0, 10.0);\n}\n\nvec3 render1(vec3 ro, vec3 rd, vec2 sp) {\n  int iter;\n\n  g_gd = 1E3;\n  float t = rayMarch(ro, rd);\n  vec3 ggcol = (glowCol1)*inversesqrt(max(g_gd, 0.00025));\n  vec3 col = render0(ro, rd);\n\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  float fre0 = 1.0+dot(rd, n);\n  float fre = fre0;\n  fre *= fre;\n  float dif = dot(sunDir1, n); \n\n  if (t < MAX_RAY_LENGTH) {\n    col = vec3(0.0);\n    col += sunCol1*dif*dif*diffCol*0.25;\n    col += mix(0.33, 1.0, fre)*render0(p, r);\n  }\n  \n  col *= smoothstep(0.1, -0.1, cos((TAU*TIME-2.0*sp.y)/30.0));\n  col += clamp(ggcol, 0.0, 4.0);\n\n  return col;\n}\n\nvec3 overlay(vec3 col, vec2 p) {\n  vec2 p0 = p;\n  float dl = lug00ber(p);\n\n  const float z1 = 0.25;\n  vec2 p1 = p;\n  p1.x += 0.1*TIME;\n  p1 /= z1;\n  float dc = dfcos(p1, 0.5)*z1;\n  dc = abs(dc)- mix(0.025, 0.00, smoothstep(0., 2.0, abs(p.x)));\n  float aa = 4.0/RESOLUTION.y;\n  \n  float d = dl;\n  d = pmax(d, -(dc-0.025), 0.025);\n  d = min(d, dc);\n  \n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, d));\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float tm  = TIME*0.5+10.0;\n  \n  g_rot = rotX(0.333*tm)*rotZ(0.5*tm)*rotY(0.23*tm);\n  \n  vec3 ro = 2.0*vec3(5.0, 1.0, 0.);\n  ro.xz *= ROT(-0.1*tm);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render1(ro, rd, p);\n  col -= 0.05*length(pp);\n  col *= smoothstep(1.5, 0.5, length(pp));\n\n  col = aces_approx(col); \n  col *= smoothstep(2.0, 6.0, TIME);\n  col = overlay(col, p);\n  col = sqrt(col);\n  \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}