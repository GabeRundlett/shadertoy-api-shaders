{
    "Shader": {
        "info": {
            "date": "1726721249",
            "description": "orginals https://www.shadertoy.com/view/l3fyWf and other from glslsandbox",
            "flags": 0,
            "hasliked": 0,
            "id": "MXXcWf",
            "likes": 1,
            "name": " colorful Kaleidoscope 16",
            "published": 3,
            "tags": [
                "colorful",
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 54
        },
        "renderpass": [
            {
                "code": "float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33+cos(iTime*0.001));\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat square(ivec2 t, vec2 q)\n{\n    vec3 r = (hash32(vec2(t)*13.456)*0.5+0.5);\n    return 1.0-smoothstep(-0.01,+0.01,max(abs(q.x-r.x),abs(q.y-r.y))-r.z);\n}\n\nfloat fuzzy_xor(float a, float b)\n{\n    return max(min(a,b),1.0-max(a,b));\n}\n\nfloat tile_env(ivec2 t, vec2 q)\n{\n    float d = 0.0;\n    for(int y = -1; y <= +1; y++)\n        for(int x = -1; x <= +1; x++)\n            d = fuzzy_xor(d,square(t+ivec2(x+y), q-vec2(x,y)));\n\n    return d;\n}\n\nfloat random_overlapping_circles_xored(vec2 p, float n)\n{\n    ivec2 t = ivec2(floor(p*n));\n    vec2 q = fract(p*n);\n\n    return tile_env(t, q);\n}\n\n\n\n\nfloat HexDist(vec2 p){\n    p = abs(p);\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c= max(c,p.x);\n    return c;\n}\n\nvec4 HexCoord(vec2 uv){\n    vec2 r = vec2(1, 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n        gv = a;\n    else \n        gv = b;\n        \n    \n    float x = atan(gv.x, gv.y);\n    float y = 0.5 - HexDist(gv);\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x, id.y);\n}\n\nfloat pattern(vec2 uv, float t){\n   float speed = 0.5;\n   return sin(uv.x * uv.x + uv.y * uv.y + t * speed);\n}\n\n// buffer A is Kaleidoscope \n#define MOUSECONTROLS_ZOOM                   1  \n#define MOUSECONTROLS_ROTATE                 1\n// buffer D is distortion buffer\n#define MOUSECONTROLS_DISTORTION_FREQUENCY   1\n#define MOUSECONTROLS_DISTORTION_SPEED       1\n// buffer B is edge detection\n#define MOUSE_X_CONTROLS_HOW_BLACK_EDGES_ARE    1\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\nfloat waveSpeed     = 0.1;                      \n float waveFrequency = 8.0;                  \n\nvec2 distortPosition( vec2 uv ) {                        \n    float timeOffset = iTime * waveSpeed;\n    vec2 frequencyOffset = waveFrequency * (uv + timeOffset);\n    \n    vec2 distortion = cos( vec2(                        \n       cos(frequencyOffset.x - frequencyOffset.y) * cos(frequencyOffset.y + frequencyOffset.x),                       \n       sin(frequencyOffset.x + frequencyOffset.y) * sin(frequencyOffset.y - frequencyOffset.x) ) );                   \n    return distortion;                                  \n}                                            \nconst float pi = acos(-1.0);\nconst float pi2 = pi*2.0;\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0,0.1) : iMouse.xy/iResolution.xy;\n#if MOUSECONTROLS_ROTATE\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n#endif\n#if MOUSECONTROLS_ZOOM\n    uv *= (1./(10.0*mouse.y));\n#endif\n    return uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //Translate so that center is (0.0,0.0)\n    //Then ensure coordinates are contained between -1 and 1\n    uv = (uv - 0.5)*2.0;\n    uv.xy *=mouseRotZoom(uv.xy);\n    //Ensure we are independant of aspect ratio\n  \n    \n    float d = length(uv);\n     vec3 col = palette( d + iTime, vec3(0.0,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n\n    //d -= 0.5;\n    d = sin(d*10.0 + iTime)/8.0;\n    d = abs(d);\n    \n\n\n    \n    uv *= 25.0;\n    \n    \n    vec4 hc = HexCoord(uv);\n  \n    float c = smoothstep(0.02, 0.05, hc.y *  pattern(vec2(hc.z, hc.w), iTime) );\n    col += c;\n    d = 0.02/d;\n    // add color\n    \n    vec2 I=fragCoord;\n   I.xy =mouseRotZoom(I.xy);\n    vec4 o =fragColor;\n    vec2 R = iResolution.xy;\n    I = .5 + (I - R / 2.) / R.y;\n\n    o = vec4(0);\n    //if(all(lessThan(abs(I - 0.5), vec2(0.5))))\n    {\n        o = vec4(I.xy,0.0,1.0);\n\n        o = vec4(vec3(random_overlapping_circles_xored(I.xy, 5.0)),1.0);\n    }\n    \n\n    \n    col *=d+o.xyz;\n    \n    \n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}