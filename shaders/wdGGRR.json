{
    "Shader": {
        "info": {
            "date": "1569691323",
            "description": "Check out my Kaleidozoom VR shader for some infinite-tunnel 3D fun if you have a phone-based VR headset. I promise it's less pukey than it sounds. If you try it out using the Shadertoy app make sure to use the HD setting.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGGRR",
            "likes": 6,
            "name": "Kaleidozoom",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "trig",
                "geometric"
            ],
            "usePreview": 0,
            "username": "shadeThrower",
            "viewed": 725
        },
        "renderpass": [
            {
                "code": "/*const int initRes = iResolution.x * iResolution.y;\nvec3 buffer[initRes.x * initRes.y];*/\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec3 CalcColor(float tme, vec2 uv, vec2 uvM, float posModGradA, float posModGradB)\n{\n    vec3 col = vec3(\n        0.5 + 0.5*tan((cos(tme)+2.)*8.*\n                      (uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*\n        (((cos(length(uv*posModGradA*100.))*.4+.6)+\n          (cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n\n        0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*\n                      (uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*\n        (((cos(length(uv*posModGradA*100.))*.4+.6)+\n          (cos(length(uvM*posModGradB*100.))*.4+.6))/2.),\n\n        0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*\n                      (uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*\n        (((cos(length(uv*posModGradA*100.))*.4+.6)+\n          (cos(length(uvM*posModGradB*100.))*.4+.6))/2.);\n    \n    return col;\n}\n\nvec3 colorVec(vec2 fragCoord)\n{\n    float tme = iTime*.20;\n    tme += 3600.3;\n    float scale = 0.125;\n   \n    vec2 adjVec = vec2((sin(tme)*.5), (cos(tme)*.5));\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //Diagonal Moving\n    //uv.x = sin((fract(tme)+uv.x)*3.14)/2.+.5;\n    //uv.y = cos((fract(tme)+uv.y)*3.14)/2.+.5;\n\n    //Mouse Movement Multiple\n    \n\t/*uv.x = sin((1.-iMouse.x/iResolution.y*3.6+(uv.x-.5)\n                *5.*(abs(1.-pow(length(vec2(.5, .5)-uv), .7)\n                *pow((cos(tme/2.)+1.1)/2., .2)))\n                *((cos(tme/2.)+1.1)/2.)*4.)*3.14)/2.+.5;\n    \n    uv.y = cos(1.57+(1.-iMouse.y/iResolution.x*8.+(uv.y-.5)\n                *5.*(abs(1.-pow(length(vec2(.5, .5)-uv), .7)\n                *pow((cos(tme/2.)+1.1)/2., .2)))\n                *((cos(tme/2.)+1.1)/2.)*4.)*3.14)/2.+.5;*/\n\t\n\t//texelFetch( iChannel0, ivec2(KEY_UP,1),0 ).x\n    \n    \n    //Auto Move Circular\n    //uv.x = sin((1.-(sin(tme/2.)/2.+1.)*5.+uv.x)*3.14)/2.+.5;\n    //uv.y = cos((1.-(cos(tme/2.)/2.+1.)*8.+uv.y)*3.14)/2.+.5;\n    \n    // Move and Zoom\n\t//uv.x = sin((1.-.5*5.+uv.x)*6.28*(sin(tme)+2.))/2.+.5;\n    //uv.y = sin((1.-.5*8.+uv.y)*6.28*(sin(tme)+2.))/2.+.5;\n    \n    \n    //Rotation (in progress)\n    /*vec2 uvTmp = uv;\n    uvTmp.x += sin(length(uv-vec2(.5,.5)))*(sin(tme)/2.+.5);\n    uvTmp.y += cos(length(uv-vec2(.5,.5)))*(sin(tme)/2.+.5);\n    uv = uvTmp;*/\n    \n    vec2 uvM;\n    float posMod;\n    float posModGradA;\n    float posModGradB;\n    posMod = (cos(tme/2.+3.1416)*.95 + .05)/2.+.5;\n    posModGradA = (cos(tme*1.1)*.9 + .1)/2.+.5;\n    posModGradB = (cos(tme*.9)*.9 + .1)/2.+.5;\n    //uv = vec2(pow((uv.x-.5)*length(normalize(uv-0.5))*5., -.05)*posMod, pow((uv.y-.5)*length(normalize(uv-0.5))*5., -.05)*posMod);\n    //uv = vec2(pow((uv.x-.5)*length(uv-0.5)*5., -.07)*posMod*2., pow((uv.y-.5)*length(uv-0.5)*5., -.07)*posMod*2.);\n    uv = vec2(pow(abs(uv.x-.5)+length(uv-.5), -.07)*posMod*3., pow(abs(uv.y-.5)+length(uv-.5), -.07)*posMod*3.);\n    uvM = mod(uv, scale);\n    uv = normalize(uvM-vec2(scale/2.))*(adjVec+vec2(.5));\n\n    if(mod(floor((uv.x)/scale),2.) == 0.)\n            uvM.x = scale - uvM.x;\n    if(mod(floor((uv.y)/scale),2.) == 0.)\n            uvM.y = scale - uvM.y;\n\n    uvM += adjVec*length(uvM + adjVec - vec2(0.5));\n\n    // With uvM and uv gradients\n    vec3 col = CalcColor(tme, uv, uvM, posModGradA, posModGradB);\n    \n    // With uv gradients\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(uv*posModGrad*100.))*.4+.6),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(uv*posModGrad*100.))*.4+.6),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(cos(length(uv*posModGrad*100.))*.4+.6);*/\n    \n    // True to fragCoord (in progress)\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))))*(cos(length(((fragCoord/iResolution.xy-.5)*posMod))*100.)/2.+.5);*/\n    \n    // Without gradients\n    /*vec3 col = vec3(0.5 + 0.5*tan((cos(tme)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((sin(tme*1.2)+2.)*8.*(uvM.x/sin(uvM.y+0.2+(cos(tme)/2.+1.)))),\n                    0.5 + 0.5*tan((cos(tme*1.3)+3.)*8.*(uvM.x/sin(uvM.y+0.2+(sin(tme)/2.+1.)))));*/\n    \n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = colorVec(fragCoord);\n    // Blur\n    /*float radius = 10.;\n    vec3 blurred = vec3(0.);\n    float weight=0.;\n    float sumW = 0.;\n    vec2 dropper;\n    float spanDis = length(vec2(0.)-vec2(radius, radius));\n    for(float i=-radius; i<radius; i++){\n        for(float j=-radius; j<radius; j++){\n            dropper = vec2(fragCoord.x + i, fragCoord.y + j);\n            if(dropper.x >= 0. && dropper.y >= 0. && dropper.x < iResolution.x && dropper.y < iResolution.y){\n            \tweight = pow(spanDis - abs(length(fragCoord-dropper)), 2.);\n                sumW += weight;\n                blurred += vec3(weight)*(colorVec(dropper));\n            }\n        }\n    }\n    blurred /= vec3(sumW);\n    fragColor = vec4(blurred,1.0);*/\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}