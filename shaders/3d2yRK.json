{
    "Shader": {
        "info": {
            "date": "1587376634",
            "description": "Trying to draw 1 cloud",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2yRK",
            "likes": 0,
            "name": "2D cloud tracing test",
            "published": 3,
            "tags": [
                "noise",
                "cloud",
                "sky"
            ],
            "usePreview": 0,
            "username": "Leria",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "//\n\n\nconst float blob_radius = 60.;\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\n//quintique\nvec2 fade5(vec2 f) {return f * f * f * (f * (f * 6.0 - 15.0) + 10.0);}\n\n//cubique\nvec2 fade3(vec2 f) {return f*f*(3.0-2.0*f);}\n\nfloat noise(vec2 p)\n{\n \tvec2 i = floor( p );\n    vec2 f = fract( p );\n    \n    vec2 u = fade5(f);\n    \n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n        \n}\n\n\nfloat fractal_noise(vec2 p)\n{\n    float f = 0.0;\n\t\n    float a = 4.;\n    for(int i = 0; i < 5 ; i++)\n    {\n     \tf += a*(abs(noise(p))*2.-1.)/10.;\n        p = p*2.;\n        a /= 2.;\n    }\n    \n    return f;\n}\n\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec4 p = vec4(U.x, U.y/iResolution.y, 1, 1),\n    background = vec4(.4, .5, 1, 1),\n    towhite = vec4(.6, .7, 1, 1),\n\tcloud_color = vec4(1.);\n    O = mix(towhite, background, p);\n\n    vec2 seed = iResolution.xy/2.;\n    \n    float l = fractal_noise(U/1.);\n\n    float d = length(seed-U) - ( blob_radius + 7.*l );\n\n    vec4 c = mix(vec4(.95), vec4(1), l*cloud_color );\n\n    float total = (c.x + c.y + c.z)/3.;\n    \n    c = mix( O, c , smoothstep(.40,.77, total) );  // not sure what it does         \n    O = mix( O, c , smoothstep(10.,-10.,d) );             \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}