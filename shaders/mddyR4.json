{
    "Shader": {
        "info": {
            "date": "1694793759",
            "description": "harmonicVoronoi adapted for cineshader. Version on cineshader has lambert-phong shading on the 2.5D surface displaced by the voronoi.",
            "flags": 0,
            "hasliked": 0,
            "id": "mddyR4",
            "likes": 1,
            "name": "harmonicVoronoi Cineshader",
            "published": 3,
            "tags": [
                "voronoi",
                "harmonic",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "natet",
            "viewed": 1523
        },
        "renderpass": [
            {
                "code": "vec2 points[4] = vec2[4](vec2(.5,.05), vec2(.5,.33), vec2(.5,.66), vec2(.5,.95));\n\n\nfloat scalarSin(float time){\n    return (sin(time)+1.0)*0.5;\n}\n\n//https://gist.github.com/sketchpunk/778c8aa561ca62142beecf849ad2cd57\nvec3 vecQuatRotation(vec4 q, vec3 v){ \n  return v + cross(2.0 * q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 uv = vec3(vec2(fragCoord/iResolution.y),0.0);\n\n    float minDist = 1.0;\n    for(int i = 0; i < points.length(); i++){\n        points[i].x = scalarSin(iTime * (1.0/float(i+1)));\n        float dist = distance(points[i],uv.xy);\n        minDist = min(dist,minDist);\n    }\n\n    minDist = pow(1.0-minDist,3.0);\n    \n    #ifdef IS_CINESHADER\n    uv.z = minDist;\n\n    //Calculate Normal from height\n    float scale = 1.0;\n    float Nx = (minDist * (uv.x + 1.0, uv.y) - minDist * (uv.x - 1.0, uv.y)) / (2.0 * scale);\n    float Ny = (minDist * (uv.x, uv.y + 1.0) - minDist * (uv.x, uv.y - 1.0)) / (2.0 * scale);\n    float Nz = 1.0 / sqrt(1.0 + pow(Nx,2.0) + pow(Ny,2.0));\n\n    vec3 normal = vec3(Nx, Ny, Nz);\n\n    vec3 lightPos = vec3(cos(iTime),0.0,1.0);\n    \n    // Calculate the to center distance\n    float d = length(uv - 0.5) * 2.0;\n    // Calculate time\n    float t = d * d * 25.0 - iTime * 3.0;\n    // Time varying surface color\n    vec3 surfaceColour = 0.5 + 0.5 * cos(t / 20.0 + uv.xyx + vec3(0.0,2.0,4.0));\n    vec3 lightColour = vec3(1.0);\n    vec3 specularStrength = vec3(1.0);\n    float shininess = 512.0;\n\n    vec3 lambertian = max(dot(lightPos, normal), 0.0)*surfaceColour*lightColour;\n\n    // Calculate the view vector\n    vec3 viewVector = vecQuatRotation(iCamQuat,iCamPos);\n\n    vec3 viewDir = normalize(viewVector - uv);\n    vec3 lightDir = normalize(lightPos - uv);\n    vec3 halfDir = normalize(viewDir + lightDir);\n\n    float specular = pow(max(dot(normal, halfDir), 0.0), shininess);\n    vec3 specularColour = specularStrength * specular * lightColour;\n\n    // Output to screen\n    fragColor = vec4(lambertian+specularColour,minDist);\n    #else\n    fragColor = vec4(minDist,minDist,minDist,1.0);\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}