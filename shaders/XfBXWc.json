{
    "Shader": {
        "info": {
            "date": "1706871455",
            "description": "Sliders control joints etc; auto or manual mode (button green/red)",
            "flags": 32,
            "hasliked": 0,
            "id": "XfBXWc",
            "likes": 40,
            "name": "Robot Arm",
            "published": 3,
            "tags": [
                "interactive",
                "robot",
                "manipulate"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "// \"Robot Arm\" by dr2 - 2024\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Sliders control joints etc; auto or manual mode (button green/red)\n\n// Based on the Armatron robot arm (Tomy/RadioShack) from long ago\n\n#define AA  1   // (= 0/1) optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 s);\nfloat PrCylDf (vec3 p, float rc, float h);\nfloat PrFlatCapsDf (vec3 p, float rc, float h, float t);\nmat3 StdVuMat (float el, float az);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float aa);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec4 Loadv4 (int idVar);\n\nvec3 ltDir, qHit, wCol[6];\nvec2 pSetA[6];\nfloat dstFar, tCur, pVal[6], pSetD;\nint nFrame, idObj, wgSel;\nconst int idBas = 1, idPlat = 2, idAx1 = 3, idAx2 = 4, idAx3 = 53, idArm0 = 6, idArm1 = 7,\n   idArm2 = 8, idArm3 = 9, idHead = 10, idGrip = 11, idFlr = 12;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (nFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n\nvoid SetConf ()\n{\n  vec2 e;\n  pSetA[0] = CosSin (pi * (2. * pVal[0] - 1.));\n  pSetA[1] = CosSin (0.2 * pi + 0.2 * pi * (2. * pVal[1] - 1.));\n  pSetA[2] = CosSin (0.4 * pi * (2. * pVal[2] - 1.));\n  pSetA[3] = CosSin (0.5 * pi * (2. * pVal[3] - 1.));\n  pSetA[4] = CosSin (pi * (2. * pVal[4] - 1.));\n  pSetA[5] = CosSin (0.1 * pi + 0.1 * pi * (2. * pVal[5] - 1.));\n  pSetD = 0.07 + 0.03 * (2. * pVal[5] - 1.);\n  e = vec2 (1., 0.3);\n  wCol[0] = e.xyy;\n  wCol[1] = e.yxy;\n  wCol[2] = e.yyx;\n  wCol[3] = e.xxy;\n  wCol[4] = e.yxx;\n  wCol[5] = e.xyx;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q.y -= 0.07;\n  d = PrBoxDf (q, vec3 (0.6, 0.07, 0.6));\n  DMINQ (idBas);\n  q.xz = Rot2Cs (q.xz, pSetA[0]);\n  q.y -= 0.12;\n  d = PrCylDf (q.xzy, 0.5, 0.05);\n  DMINQ (idPlat);\n  q.y -= 0.55;\n  d = PrFlatCapsDf (vec3 (abs (q.x) - 0.22, q.yz).zxy, 0.15, 0.55, 0.07);\n  DMINQ (idArm0);\n  q.y -= 0.55;\n  d = PrCylDf (q.yzx, 0.1, 0.33);\n  DMINQ (idAx1);\n  q.yz = Rot2Cs (q.yz, pSetA[1]);\n  d = PrFlatCapsDf (q, 0.13, 0.05, 0.28);\n  DMINQ (idArm1);\n  q.z -= 0.6;\n  d = PrFlatCapsDf (vec3 (q.x, abs (q.y) - 0.3, q.z), 0.13, 0.65, 0.05);\n  DMINQ (idArm1);\n  q.z -= 0.6;\n  d = PrCylDf (q.xzy, 0.1, 0.4);\n  DMINQ (idAx2);\n  q.xz = Rot2Cs (q.xz, pSetA[2]);\n  q.z -= 0.6;\n  d = PrFlatCapsDf (vec3 (q.x, abs (q.y) - 0.2, q.z), 0.13, 0.6, 0.05);\n  DMINQ (idArm2);\n  q.z -= 0.55;\n  d = PrFlatCapsDf (q, 0.13, 0.05, 0.2);\n  DMINQ (idArm2);\n  q.z -= 0.05;\n  d = PrCylDf (q.yzx, 0.1, 0.3);\n  DMINQ (idAx3);\n  q.yz = Rot2Cs (q.yz, pSetA[3]);\n  q.z -= 0.25;\n  d = PrFlatCapsDf (vec3 (abs (q.x) - 0.22, q.yz).yxz, 0.12, 0.28, 0.05);\n  DMINQ (idArm3);\n  q.z -= 0.25;\n  d = PrFlatCapsDf (q.yxz, 0.12, 0.03, 0.2);\n  DMINQ (idArm3);\n  q.z -= 0.2;\n  q.xy = Rot2Cs (q.xy, pSetA[4]);\n  d = PrCylDf (q, 0.2, 0.05);\n  DMINQ (idHead);\n  q.x = abs (q.x) - pSetD;\n  q.xz = Rot2Cs (q.xz, pSetA[5]);\n  q.z -= 0.25;\n  d = PrBoxDf (q, vec3 (0.03, 0.1, 0.25));\n  DMINQ (idGrip);\n  q = p;\n  d = q.y;\n  DMINQ (idFlr);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, nDotL, sh, s;\n  SetConf ();\n  dstObj = ObjRay (ro, rd);\n  col = vec3 (0.);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idPlat || idObj == idAx2) s = length (qHit.xz);\n    if (idObj == idBas) {\n      col4 = vec4 (0.4, 0.2, 0., 0.);\n    } else if (idObj == idPlat) {\n      col4 = ((abs (qHit.y) < 0.015) ? vec4 (wCol[0], ((wgSel == 0) ? -1. : 0.1)) :\n         vec4 (0., 0.3, 0.7, 0.1)) * (1. - 0.2 * step (0.45, s) * step (0.4,\n         abs (fract (64. * atan (qHit.z, - qHit.x) / (2. * pi)) - 0.5)));\n      if (s < 0.1) col4 = vec4 (0.7, 0.7, 0.75, 0.2);\n    } else if (idObj == idAx1) {\n      col4 = (length (qHit.yz) < 0.07) ? vec4 (wCol[1], ((wgSel == 1) ? -1. : 0.2)) :\n         vec4 (0.7, 0.7, 0.75, 0.2);\n    } else if (idObj == idAx2) {\n      col4 = (s < 0.07) ? vec4 (wCol[2], ((wgSel == 2) ? -1. : 0.2)) : vec4 (0.7, 0.7, 0.75, 0.2);\n    } else if (idObj == idAx3) {\n      col4 = (length (qHit.yz) < 0.07) ? vec4 (wCol[3], ((wgSel == 3) ? -1. : 0.2)) :\n         vec4 (0.7, 0.7, 0.75, 0.2);\n    } else if (idObj == idArm0) {\n      col4 = vec4 (0.4, 0.4, 0.7, 0.1) * (1. - 0.2 * step (0.28, abs (qHit.x)) *\n         (1. + cos (64. * pi * qHit.z)));\n    } else if (idObj == idArm1) {\n      col4 = vec4 (0.4, 0.4, 0.8, 0.1) * (1. - 0.2 * step (0.34, abs (qHit.y)) *\n         (1. + cos (64. * pi * qHit.x)));\n    } else if (idObj == idArm2) {\n      col4 = vec4 (0.5, 0.5, 0.8, 0.1) * (1. - 0.2 * step (0.24, abs (qHit.y)) *\n         (1. + cos (64. * pi * qHit.x)));\n    } else if (idObj == idArm3) {\n      col4 = vec4 (0.6, 0.6, 0.8, 0.1) * (1. - 0.2 * step (0.26, abs (qHit.x)) *\n         (1. + cos (64. * pi * qHit.y)));\n    } else if (idObj == idHead) {\n      col4 = ((abs (qHit.z) < 0.015) ? vec4 (wCol[4], ((wgSel == 4) ? -1. : 0.1)) :\n         vec4 (0.67, 0.7, 0.8, 0.1)) * (1. - 0.3 * step (0.16, length (qHit.xy)) *\n         step (0.4, abs (fract (32. * atan (qHit.y, - qHit.x) / (2. * pi)) - 0.5)));\n      if (abs (qHit.x) < 0.17 && abs (qHit.y) < 0.03 && qHit.z > 0.) col4 *= 0.5;\n    } else if (idObj == idGrip) {\n      col4 = vec4 (wCol[5], ((wgSel == 5) ? -1. : 0.2)) * (1. - 0.2 * step (abs (qHit.y), 0.095) *\n         (1. + cos (64. * pi * qHit.z)));\n    } else if (idObj == idFlr) {\n      col4 = vec4 (0.6, 0.4, 0.1, 0.05) * (1. - smoothstep (8., 10., length (qHit.xz))) *\n         (1. - 0.1 * step (0.47, Maxv2 (abs (fract (2. * ro.xz) - 0.5))));\n    }\n    if (col4.a >= 0.) {\n      sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (idObj != idFlr && idObj != idBas) nDotL *= nDotL;\n      col = col4.rgb * (0.2 + 0.2 * max (- dot (vn, ltDir), 0.) + 0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    } else {\n      col = col4.rgb * 1.2;\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec4 ShowWg (vec2 uv, vec2 canvas, vec4 parmV1, vec4 parmV2)\n{\n  vec4 wgBx[7];\n  vec3 col;\n  vec2 ut, ust;\n  float vW[7], asp;\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 6; k ++)\n     wgBx[k] = vec4 (0.38 * asp, -0.05- 0.06 * float (k), 0.1 * asp, 0.015);\n  wgBx[6] = vec4 (0.38 * asp, -0.42, 0.02, 0.);\n  vW[0] = parmV1.x;  vW[1] = parmV1.y;  vW[2] = parmV1.z;  vW[3] = parmV1.w;\n  vW[4] = parmV2.x;  vW[5] = parmV2.y;  vW[6] = parmV2.z;\n  col = vec3 (0.);\n  for (int k = 0; k < 6; k ++) {\n    ut = 0.5 * uv - wgBx[k].xy;\n    ust = abs (ut) - wgBx[k].zw;\n    if (Maxv2 (ust) < 0.) col = vec3 (1.) * ((Minv2 (abs (ust)) * canvas.y < 2.) ? 0.3 :\n       ((0.6 + 0.4 * smoothstep (0., 5., abs (mod (10. * ut.x / (2. * wgBx[k].z) + 0.5, 1.) -\n       0.5) * canvas.y - 20.)) * 0.6));\n    vW[k] = 0.03 + 0.94 * vW[k];\n    if (Maxv2 (ust) * canvas.y < 25.) {\n      ut.x -= (vW[k] - 0.5) * 2. * wgBx[k].z;\n      ut = abs (ut) * vec2 (2.5, 2.2);\n      if (Maxv2 (abs (ut)) < 0.03 && Maxv2 (ut) > 0.015) col = wCol[k];\n    }\n  }\n  ut = 0.5 * uv - wgBx[6].xy;\n  if (length (ut) < wgBx[6].z) {\n    col = mix (((vW[6] > 0.) ? vec3 (0.3, 1., 0.3) : vec3 (1., 0.3, 0.3)), vec3 (0.6),\n       smoothstep (1., 4., abs (length (ut) - 0.017) * canvas.y));\n  }\n  return vec4 (col, step (0.001, length (col)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 parmV1, parmV2, stDat, c4;\n  vec3 ro, rd, col, cc;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  parmV1 = Loadv4 (0);\n  pVal[0] = parmV1.x;\n  pVal[1] = parmV1.y;\n  pVal[2] = parmV1.z;\n  pVal[3] = parmV1.w;\n  parmV2 = Loadv4 (1);\n  pVal[4] = parmV2.x;\n  pVal[5] = parmV2.y;\n  stDat = Loadv4 (2);\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (3);\n  el = stDat.x;\n  az = stDat.y;\n  el = clamp (el, -0.35 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (1., 2., -13.);\n  zmFac = 4.;\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float aa = float (VAR_ZERO); aa < naa; aa ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * aa + 0.5) * pi), zmFac));\n    cc = ShowScene (ro, rd);\n    c4 = ShowWg (uv, canvas, parmV1, parmV2);\n    c4 = vec4 (mix (cc, c4.rgb, c4.a), 0.2);\n    col += (1. / naa) * mix (c4.rgb, cc, c4.a);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 s)\n{\n  vec3 d;\n  d = abs (p) - s;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float rc, float h)\n{\n  return max (length (p.xy) - rc, abs (p.z) - h);\n}\n\nfloat PrFlatCapsDf (vec3 p, float rc, float h, float t)\n{\n  return max (length (vec2 (p.x, sign (p.z) * (max (0., abs (p.z) - h)))) - rc, abs (p.y) - t);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float aa)\n{\n  vec2 cs;\n  cs = sin (aa + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Robot Arm\" by dr2 - 2024\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\nfloat Maxv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nint nFrame;\nconst float pi = 3.1415927;\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[7], stDat, mPtr, mPtrP, parmV1, parmV2;\n  vec2 iFrag, canvas;\n  float tCur, az, el, asp, tCurP, vW;\n  int pxId, wgSel, wgReg, autoMv;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4) discard;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  if (nFrame <= 1) {\n    mPtrP = mPtr;\n    wgSel = -1;\n    autoMv = 1;\n    parmV1 = vec4 (0.5, 0.5, 0.5, 0.5);\n    parmV2 = vec4 (0.5, 0.5, float (autoMv), 0.);\n    el = -0.1 * pi;\n    az = 0.5 * pi;\n  } else {\n    parmV1 = Loadv4 (0);\n    parmV2 = Loadv4 (1);\n    autoMv = int (parmV2.z);\n    stDat = Loadv4 (2);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (3);\n    el = stDat.x;\n    az = stDat.y;\n  }\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 6; k ++)\n     wgBx[k] = vec4 (0.38 * asp, -0.05- 0.06 * float (k), 0.1 * asp, 0.015);\n  wgBx[6] = vec4 (0.38 * asp, -0.42, 0.02, 0.);\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 6; k ++) {\n      if (autoMv == 0 && Maxv2 (abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw) < 0.)\n         wgReg = k;\n    }\n    if (length (mPtr.xy * vec2 (asp, 1.) - wgBx[6].xy) < wgBx[6].z) wgReg = 6;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = 2. * pi * mPtr.x;\n      el = pi * mPtr.y;\n    }\n  } else {\n    if (wgSel < 6) {\n      vW = clamp (0.5 + 0.5 * (mPtr.x * asp - wgBx[wgSel].x) / wgBx[wgSel].z, 0., 0.99);\n      if (wgSel < 4) parmV1[wgSel] = vW;\n      else parmV2[wgSel - 4] = vW;\n    } else  if (wgSel == 6) {\n      if (mPtrP.z <= 0.) {\n        autoMv = 1 - autoMv;\n        parmV1 = vec4 (0.5, 0.5, 0.5, 0.5);\n        parmV2 = vec4 (0.5, 0.5, float (autoMv), 0.);\n      }\n    }\n  }\n  if (autoMv > 0) {\n    parmV1 = 0.5 * (sin (vec4 (0.05, 0.1, 0.12, 0.13) * 2. * pi * tCur) + 1.);\n    parmV2.xy = 0.5 * (sin (vec2 (0.07, 0.4) * 2. * pi * tCur) + 1.);\n  }\n  if      (pxId == 0) stDat = parmV1;\n  else if (pxId == 1) stDat = parmV2;\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 3) stDat = vec4 (el, az, 0., 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}