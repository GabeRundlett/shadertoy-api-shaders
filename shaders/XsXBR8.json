{
    "Shader": {
        "info": {
            "date": "1494720139",
            "description": "A Playable Sokoban game (looks better full screen)\n\nUse arrow keys to move the sphere\nNumpad 0: Undo last move\nSpace: Restart level\nEnter: Solve\n\nRules:\nYou must move the boxes to the dots\nYou can only push boxes\n\nGood luck, the level is tricky.\n\nHimred",
            "flags": 112,
            "hasliked": 0,
            "id": "XsXBR8",
            "likes": 20,
            "name": "Sokoban: Can you solve me ?",
            "published": 3,
            "tags": [
                "game",
                "sokoban"
            ],
            "usePreview": 1,
            "username": "Himred",
            "viewed": 1024
        },
        "renderpass": [
            {
                "code": "// A Playable Sokoban\n//\n// Only one level (tricky) is available\n// There is no added value to add more levels.\n//\n// As usual, I used some lines of code from:\n//\n// The Load/Save functions from iq game\n// The circle function from https://www.shadertoy.com/view/ltBXRc by phil\n\n\n// Keys:\n// Move the orange sphere with keyboard arrow keys\n// Numpad 0: Undo last box move\n// Space: Restart level\n// Enter: Solve the puzzle\n\n#define PLAYER vec2(11)\n#define STATE vec2(12)\n\n#define VOID 0.\n#define WALL 1.\n#define MARK 2.\n#define OUT 3.\n#define BOX 100.\n#define BOXMARK 102.\n#define TOON 1000.\n#define TOONMARK 1002.\n#define WIN 999.\n\n#define BROWN vec3(0.37, 0.19, 0.12)\n#define GREEN vec3(0.05, 0.7, 0.15)\n#define WHITE vec3(0.81,0.78,0.68)\n#define PINK vec3(0.77,0.51,0.44)\n#define WOOD vec3(0.82,0.70,0.55)\n\n//----------------------------------------------------------------------------------------------\nvec3 Circle (vec2 uv, vec2 center, float rad, float width)\n{    \n    vec2 diff = center-uv;\n    float len = length(diff);\n\n    rad=len/1.2;\n    float circle = smoothstep(rad-width, rad, len) - smoothstep(rad, rad+width, len);\n    if(circle<0.7) return PINK;\n    return vec3(circle,circle/2.,0);\n}\n   \n//----------------------------------------------------------------------------------------------\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n//----------------------------------------------------------------------------------------------\nvec3 Wall(vec2 uv)\n{\n    vec3 c=BROWN;\n    uv.y+=sin(uv.x);\n    if(fract(uv.y*40.)<0.1) c=BROWN*2.;\n    return c;\n}\n\n//----------------------------------------------------------------------------------------------\nvec3 Mark(vec2 z)\n{\n    vec3 c=PINK;\n    if(fract(z.y)>0.4 && fract(z.y)<0.6 && fract(z.x)>0.4 && fract(z.x)<0.6) c=WHITE;\n    return c;\n}\n\n//----------------------------------------------------------------------------------------------\nvec3 Box(vec2 z, vec3 col)\n{\n    vec3 c=PINK;\n    if(fract(z.y)>0.2 && fract(z.y)<0.8 && fract(z.x)>0.2 && fract(z.x)<0.8) c=WOOD;\n    if(fract(z.y)>0.3 && fract(z.y)<0.7 && fract(z.x)>0.3 && fract(z.x)<0.7)\n    {\n        c=col*0.8;\n        if(fract(z.x*8.)<0.15) c=vec3(0.3);\n    }\n    return c;\n}\n\n\n//----------------------------------------------------------------------------------------------        \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec3 col=vec3(0);\n    \n    // loading vars from buffer\n    float player=LoadValue(PLAYER).x;\n    float state=LoadValue(STATE).x;\n    \n    // If win state the set background to green\n    if(state==WIN) col=GREEN;\n    \n    // uv lazy translation & zoom\n    uv-=vec2(0.22,-0.22); \n    uv/=1.3333;\n    vec2 z=uv*10.;\n    vec2 p=floor(z);\n     \n    // Drawing level\n    if(p.x>=0. && p.y>=0. && p.x<10. && p.y<10.)\n    {\n        col=PINK;\n    \tfloat v=LoadValue(p).x;\n    \tif(v==WALL) col=Wall(uv);\n        if(v==MARK) col=Mark(z);\n        if(v==BOX) col=Box(z, WOOD);\n        if(v==BOXMARK) col=Box(z, GREEN);\n        if(v==TOON || v==TOONMARK) col=Circle(uv, p/10.+0.05, 0.025, 0.01);\n        if(v==OUT) col=vec3(0);\n        if(v!=WALL && (fract(z.x)<0.022 || fract(z.y)<0.022)) col=0.8*col;\n    }\n     \n    \n    // Presenting color to screen\n   fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 8580,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/joevr/meditation-zen-music"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PLAYER vec2(11)\n#define STATE vec2(12)\n\n#define VOID 0.\n#define WALL 1.\n#define MARK 2.\n#define OUT 3.\n#define BOX 100.\n#define BOXMARK 102.\n#define TOON 1000.\n#define TOONMARK 1002.\n#define WIN 999.\n\n#define KEY_LEFT\t37.\n#define KEY_UP\t\t38.\n#define KEY_RIGHT\t39.\n#define KEY_DOWN\t40.\n#define KEY_SPACE\t32.\n#define KEY_ESC\t\t96.\n#define KEY_ENTER\t13.\n\nfloat data[100];\nfloat back[100];\nvec2 player;\nfloat state;\n\n//----------------------------------------------------------------------------------------------\nfloat isInside( vec2 p, vec2 c )\n{\n    vec2 d = abs(p-0.5-c) - 0.5;\n    return -max(d.x,d.y);\n}\n\n//----------------------------------------------------------------------------------------------\nvec4 LoadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy );\n}\n\n//----------------------------------------------------------------------------------------------\nvoid StoreValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid LoadData(void)\n{\n\tplayer = LoadValue(PLAYER).xy;\n    state = LoadValue(STATE).x;\n\tfor(int x=0;x<10;x++)\n\t\tfor(int y=0;y<10;y++)\n        \t{\n\t\t\tdata[10*x+y]=LoadValue(vec2(x,y)).x;\n            back[10*x+y]=LoadValue(vec2(x,y)).y;\n            }\n}\n\n//----------------------------------------------------------------------------------------------\nvoid Copy()\n{\n    for(int i=0;i<100;i++) back[i]=data[i];\n}\n\n//----------------------------------------------------------------------------------------------\nvoid InitData(void)\n{\n    state=0.;\n\tfor(int x=0;x<100;x++) data[x]=OUT;\n\t\n    data[12]=data[13]=data[14]=data[15]=data[25]=data[26]=data[36]=data[46]=data[47]=WALL;\n    data[48]=data[58]=data[68]=data[78]=data[77]=data[76]=data[86]=data[85]=data[84]=WALL;\n    data[83]=data[82]=data[72]=data[62]=data[52]=data[42]=data[32]=data[22]=data[53]=WALL; \n    data[23]=data[33]=data[64]=MARK;\n    data[55]=data[45]=data[54]=BOX;\n    data[43]=data[63]=data[73]=data[24]=data[34]=data[44]=data[74]=data[66]=data[56]=VOID;\n    data[67]=data[35]=data[65]=data[75]=VOID;\n    \n    player=vec2(5,7);  \n    data[int(10.*player.x+player.y)]=TOON;\n    \n    Copy();\n}\n\n//----------------------------------------------------------------------------------------------\nfloat GetData(float x,float y)\n{\n\treturn data[int(10.*x+y)];\n}\n\n//----------------------------------------------------------------------------------------------\nfloat GetBack(float x,float y)\n{\n\treturn back[int(10.*x+y)];\n}\n\n//----------------------------------------------------------------------------------------------\nvoid SetData(float x,float y,float v)\n{\n\tdata[int(10.*x+y)]=v;\n}\n\n//----------------------------------------------------------------------------------------------\nbool Win()\n{\nfor(float x=0.;x<10.;x++)\n\t\tfor(float y=0.;y<10.;y++)\n            if(GetData(x,y)==BOX) return false;\n            \nreturn true;\n}\n\n//----------------------------------------------------------------------------------------------\nvoid Undo()\n{\n    for(int i=0;i<100;i++)\n    {\n        data[i]=back[i];\n        if(data[i]==TOON || data[i]==TOONMARK)\n        {\n            player.x=floor(float(i)/10.);\n            player.y=float(i)-10.*player.x;\n        }\n    }\n    \n    // in case of undo restore a win state\n    if(Win()) state=WIN; else state=0.;\n}\n\n//----------------------------------------------------------------------------------------------\nfloat Move(float x,float y)\n{\nif(x==0. && y==0.) return 0.;\n    \n// Current values\nfloat src=GetData(player.x,player.y);\t\t\t\t// Source cell\nfloat dst=GetData(player.x+x,player.y+y);\t\t\t// Dest cell\nfloat nst=GetData(player.x+2.*x,player.y+2.*y);\t\t// The cell after the next cell\n    \n// To Wall ?\nif(dst==WALL) return 0.;\n    \n// To void or Mark?\nif(dst==VOID || dst==MARK)\n    {\n    //Copy();\n\tSetData(player.x,player.y,src-TOON);\n\tSetData(player.x+x,player.y+y,dst+TOON);\n\tplayer+=vec2(x,y);\n    return 0.;\n    }\n    \n// To box ?\nif((dst==BOX || dst==BOXMARK) && (nst==VOID || nst==MARK))\n   {\n   Copy();\n   SetData(player.x,player.y,src-TOON);\n   if(dst==BOX) SetData(player.x+x,player.y+y,TOON);\n   if(dst==BOXMARK) SetData(player.x+x,player.y+y,TOONMARK);       \n   SetData(player.x+2.*x,player.y+2.*y,nst+BOX);\n   player+=vec2(x,y);\n   if(Win()) state=WIN; else if(state>0.) state=0.;\n   return 0.;    \n   }\n\n// Unable to move\nreturn 0.;\n}\n\n//----------------------------------------------------------------------------------------------\nvec2 GetSolve(int p)\n{ \n// Hardcoded moves .... sorry no IA ...\nif(p==10||p==14||p==16||p==17||p==26||p==27||p==34||p==36||p==41||p==47) return vec2(0.,1.);\nif(p==52||p==55||p==56||p==64||p==68||p==75||p==78||p==82||p==83) return vec2(0.,1.);\n\nif(p==2||p==3||p==4||p==7||p==19||p==20||p==23||p==24||p==28) return vec2(0.,-1.);\nif(p==31||p==39||p==43||p==45||p==58||p==59||p==61||p==66||p==71) return vec2(0.,-1.);\nif(p==77||p==85||p==86||p==88) return vec2(0.,-1.);\n\nif(p==5||p==6||p==8||p==9||p==18||p==25||p==29||p==30||p==32||p==33) return vec2(-1.,0.);\nif(p==40||p==42||p==46||p==53||p==54||p==60||p==62||p==63||p==72) return vec2(-1.,0.);\nif(p==73||p==74||p==76||p==84||p==87) return vec2(-1.,0.);\n\nreturn vec2(1.,0.);\n}\n\nvoid StartSolve()\n{\n    InitData();\n    state=-1.;\n}\n\nvoid Solve()\n{\t\n    vec2 m=GetSolve(int(-state));\n    Move(m.x,m.y);\n    if(state!=WIN) state--;\n}\n\n//----------------------------------------------------------------------------------------------\nint Game()\n{\n    // Loading data\n    LoadData();\n    \n    // If solving mode, update every 8 frames\n    if(state<0.)\n    {\n        if(mod(float(iFrame),8.)==0.) Solve();\n        return 0;\n    }\n        \n    // Otherwise check keyboard\n    if(texelFetch( iChannel1, ivec2(KEY_LEFT,1), 0 ).x>.5 ) Move(-1.,0.);\n    if(texelFetch( iChannel1, ivec2(KEY_RIGHT,1), 0 ).x>.5 ) Move(1.,0.);\n    if(texelFetch( iChannel1, ivec2(KEY_UP,1), 0 ).x>.5 ) Move(0.,1.);\n    if(texelFetch( iChannel1, ivec2(KEY_DOWN,1), 0 ).x>.5 ) Move(0.,-1.);\n    if(texelFetch( iChannel1, ivec2(KEY_SPACE,1), 0 ).x>.5 ) InitData();\n    if(texelFetch( iChannel1, ivec2(KEY_ESC,1), 0 ).x>.5 ) Undo();\n    if(texelFetch( iChannel1, ivec2(KEY_ENTER,1), 0 ).x>.5 ) StartSolve();\n    \nreturn 0;   \n}\n\n//----------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // We init the color to black and exist if outside the pixel data\n    fragColor = vec4(0.0);\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n \n    // If first frame we init the data otherwise we play the game\n \tif(iFrame==0) InitData(); else Game();\n    \t\n    // Saving vars\n    StoreValue(PLAYER,vec4(player.x,player.y,0,0),fragColor,fragCoord );\n    StoreValue(STATE,vec4(state),fragColor,fragCoord );\n    \n    // Saving Array\n    for(float x=0.;x<10.;x++)\n\t\tfor(float y=0.;y<10.;y++)\n            StoreValue(vec2(x,y),vec4(GetData(x,y),GetBack(x,y),0,0),fragColor,fragCoord );\n                       \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}