{
    "Shader": {
        "info": {
            "date": "1670679012",
            "description": "round kernel\nuse the mouse to play around",
            "flags": 32,
            "hasliked": 0,
            "id": "DdBSRt",
            "likes": 2,
            "name": "last rkernel frame: ice",
            "published": 3,
            "tags": [
                "ice"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    fragColor = texture(iChannel0, o_trpino_nooffset);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define n_size_max_a_o_col_last_krnl const 1000;\nfloat n_tau = 6.283185;\nfloat f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino_nooffset = (fragCoord.xy)/ iResolution.xy;\n    vec2 o_trmono_nooffset = (iMouse.xy)/ iResolution.xy;\n    \n    vec4 o_col_last = texture(iChannel0, o_trpino_nooffset);\n    \n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    \n    \n    vec2 o_p_mouse_data = vec2(0.0, 0.0);\n    vec2 o_trmono_delta = vec2(0.);\n    if(ivec2(fragCoord.xy) == ivec2(o_p_mouse_data)){\n        fragColor = vec4(o_trmono, 0.0, 0.0);\n    }else{\n        vec4 o_trmono_last = texture(iChannel0, o_p_mouse_data);\n        o_trmono_delta = abs(o_trmono.xy - o_trmono_last.xy);\n    }\n    \n    if(iMouse.w == 0.0){\n        float n_t = floor(iTime * 1.0);\n        float n_t_x = fract(n_t/5.)-.5;\n        float n_t_y = fract(n_t/10.)-.5;\n        o_trmono_delta = vec2(0.1);\n        float n_speed = 0.1;\n        float n_toggle = float(fract(iTime*n_speed)>0.15);\n        float n_ratio = iResolution.x / iResolution.y;\n        if(n_toggle == 0.){\n            o_trmono = vec2(-0.5-((n_ratio-1.)/2.), -.5);\n        }else{\n            o_trmono = vec2(.5+((n_ratio-1.)/2.), .5);\n        }\n\n    }\n    vec2 o_scale = vec2(0.9);\n    vec2 o_fragCoord_scaled = ((fragCoord.xy)*o_scale);\n    vec2 o_iResolution_scaled = (iResolution.xy * o_scale);\n\n    vec2 o_fragCoord_scaled_floor = floor(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_floor = floor(o_iResolution_scaled);\n    vec2 o_fragCoord_scaled_fract = fract(o_fragCoord_scaled);\n    vec2 o_iResolution_scaled_fract = fract(o_iResolution_scaled);\n    \n    vec2 o_trpino_scldfloor = (o_fragCoord_scaled_floor.xy - o_iResolution_scaled_floor.xy*0.5)/ o_iResolution_scaled_floor.y;\n    \n    vec2 o_radius_rkernel = vec2(\n        4.,\n        4.\n    );\n    \n    //vec4[3] a_o_col_last_krnl = vec4[3];\n    //vec3[32] palette = vec3[32];\n\n    vec4 o_kernel_sum = vec4(0.0);\n\n    \n    int n_index_a_o_col_last_krnl = 0;\n    float n_kernel_sum_count = 0.;\n    for(float n_x = 0.0; n_x < floor(o_radius_rkernel.x/2.); n_x+=1.){\n        float n_radius = n_x;\n\n        float n_angle_step_x = n_tau / (n_tau * n_x);\n        //float n_angle_steps_y = n_tau * o_radius_rkernel.y;\n        \n        for(float n_angle = 0.0; n_angle < n_tau; n_angle+=n_angle_step_x){\n            vec2 o_p_on_kernel = vec2(\n                sin(n_angle)*n_radius,\n                cos(n_angle)*n_radius\n            );\n            vec2 o_off = vec2(\n                o_p_on_kernel.x * (1./o_iResolution_scaled_floor.x),\n                o_p_on_kernel.y * (1./o_iResolution_scaled_floor.y)\n            );\n            vec4 o_col_last_on_kernel = texture(iChannel0, o_trpino_nooffset+o_off);\n            o_kernel_sum += o_col_last_on_kernel;\n            n_kernel_sum_count+=1.;\n        }\n    }\n  \n    vec4 o_kernel_sum_nor = o_kernel_sum / n_kernel_sum_count;\n    \n    float n_index = floor(o_fragCoord_scaled_floor.y * o_iResolution_scaled_floor.x + o_fragCoord_scaled_floor.x);\n    float n_index_nor = n_index / (o_iResolution_scaled_floor.x * o_iResolution_scaled_floor.y);\n    \n    if(iFrame == 0){\n        fragColor = vec4((f_n_rand(float(n_index))));\n    }else{\n        if(mod(float(iFrame), 1.) > 1.){\n            fragColor = o_col_last;\n        }else{\n            float n = 0.5;\n\n            if(o_kernel_sum_nor.x>0.01){\n                fragColor = vec4(o_kernel_sum_nor.x);\n            }\n            if(o_kernel_sum_nor.x>0.2){\n                fragColor = vec4(1.-o_kernel_sum_nor.x*0.3*o_trmono.y);\n            }\n            \n            vec4 o_col_delta = o_col_last - fragColor;\n            fragColor = o_col_last - (o_col_delta * 0.2);\n            //fragColor.r = fragColor.r*0.9;\n            //fragColor.g = o_kernel_sum_nor.x*f_n_rand(n_index+iTime);\n            //fragColor.b = o_kernel_sum_nor.x*0.2;\n\n                       \n        }\n    \n    }\n    \n    //float n_thresh = (sin(iTime*0.2)*0.5+0.5);\n    float n_thresh = 0.1+o_trmono_delta.x;\n    //if(iMouse.w == 0.0){\n    //    n_thresh = 1.-(float(mod(iTime, 20.)))*0.1;\n    //}\n    float n_dist = length(o_trpino-o_trmono);\n    if(n_dist< n_thresh){\n        float n_dist_nor = n_dist/n_thresh;\n        //fragColor = vec4(sin(n_dist*6.2831)*0.5+0.5);\n        //fragColor = mix(o_col_last, fragColor,n_dist);\n        //fragColor = mix(o_col_last, fragColor,2.*n_dist_nor);\n        //fragColor = mix(fragColor, vec4(f_n_rand(n_dist)), 0.9);\n        //fragColor = vec4(f_n_rand(fragCoord.x*fragCoord.y));\n        fragColor = vec4((n_dist_nor*n_dist_nor*o_trmono_delta.x*f_n_rand(n_index)));\n\n    }\n\n    fragColor = (fragColor);\n    \n    if(ivec2(fragCoord.xy) == ivec2(o_p_mouse_data)){\n        fragColor = vec4(o_trmono, 0.0, 0.0);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}