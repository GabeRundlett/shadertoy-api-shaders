{
    "Shader": {
        "info": {
            "date": "1655240673",
            "description": "When the view and light directions are very close, shadowed parts are hidden to the view so the object appears globally brighter.\nMouse controls light.\nNB: doing it with cones would be better.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fdyyR3",
            "likes": 15,
            "name": "correlated shadows / hotspot",
            "published": 3,
            "tags": [
                "raytracing",
                "raycasting",
                "shadows",
                "correlation",
                "short",
                "hotspot"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "int   N = 7;      // N^3 spheres of radius r\nfloat r = .4;\n#define hash3(p)      fract(sin(float(p)*vec3(127.1,311.7, 74.7))*4e5 )\n#define rot(a)        mat2(cos(a),-sin(a),sin(a),cos(a))  // rotation\n//#define sphere(i)  ( 2.*hash3(i) - 1. ) * float(N)/2.        \n  #define sphere(i)  ( vec3( i/N/N, (i/N)%N, i%N ) - float(N)/2. + hash3(i)-.5 )       \n\nfloat raycast(vec3 P, vec3 D, inout int _i) { // --- return dist, _i= id\n    float l = 1e5;\n    for ( int i=0; i<N*N*N; i++ ) {                // for each sphere\n        vec3  C = sphere(i) - P;                   // compute intersection\n        float b = dot(C,D), c = dot(C,C)-r*r, d = b*b -c, s = b-sqrt(d);\n        if ( d>0. && s>0. && s < l )\n            if (_i<0) return s;                    // shadow: early exit\n            else      l = s, _i = i;               // keep closest hit (in front)\n    }\n    return l;\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -5.*R.y) - R),         // ray direction\n          P = 30./R,                                      // camera position \n          L = vec3(0,0,1),\n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(5,5,0)/1e2*cos(.5*iTime+vec3(0,11,0)); // auto thumbnail\n    \n    L.yz *= rot(-6.*M.y),                                 // rotations\n    L.xz *= rot(-6.*M.x);\n  /*P.yz *= rot(-6.*M.y),                           \n    P.xz *= rot(-6.*M.x);\n    D.yz *= rot(-6.*M.y),                           \n    D.xz *= rot(-6.*M.x);\n  */\n    int i=0,j=-1;\n    float l = raycast(P,D, i),                            // raycast spheres\n          s = raycast(P += (l-1e-2)*D, L , j);            // shadow ray\n    \n    vec3 N = normalize( P - sphere(i) );\n    O =  l == 1e5 ? vec4(.6,.8,1,1)                       // no hit\n                  : ( 1. + dot(N,L) )/2. // max(.0,dot(N,L)) //exp(-.1*(l-25.))   // shading\n                      * ( s == 1e5 ? vec4(0,.8,0,0)       // hit and no shadow\n                                   : vec4(0,.2,0,0) );    // hit and shadow \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}