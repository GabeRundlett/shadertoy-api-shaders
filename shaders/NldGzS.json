{
    "Shader": {
        "info": {
            "date": "1636334297",
            "description": "Just a quick test of first shader here",
            "flags": 0,
            "hasliked": 0,
            "id": "NldGzS",
            "likes": 1,
            "name": "Four dimensions",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "makipl",
            "viewed": 114
        },
        "renderpass": [
            {
                "code": "float hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nvec2 map(in vec2 pos, float offset)\n{\nreturn vec2(sin(pos.x+offset*2.0), cos(pos.y+offset));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (abs(cos(iTime*.2))*2.0+4.0*fragCoord-iResolution.xy)/iResolution.y;\n    uv.xy += -1.0+vec2(sin(iTime*.4)*2.0,cos(iTime*.4)*2.0);\n    vec3 col = vec3(0.0);\n    \n    \n    \n    vec3 ro = vec3(0.0,1.0,-1.5);\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 rd = normalize(ro-1.5);\n    \n    \n    float off=.44;\n    vec3 addProfile=vec3(-0.1);\n    vec3 addProfile2=vec3(0.2);\n    for(int i = 0; i<128; i++)\n    {\n        vec2 dir = map(uv+0.1,sin(iTime+uv.x+uv.y)*atan(iTime*1.2));\n        uv.xy+=0.0015*reflect(-dir, vec2(0.84,0.44));\n        vec3 tex= texture(iChannel1, uv).xyz;\n        vec3 tex2 = texture(iChannel0, uv.xy).xyz;\n        addProfile2 += tex.xyz*tex2.xyz*0.24*uv.x*uv.y+0.003;\n        addProfile += tex.zyx*tex2.zyx*-0.30*uv.x*uv.y+0.003; \n    }\n    \n\n    \n    \n    col = vec3(abs(addProfile2.xyz)+abs(addProfile.xyz))*16.0;\n    col = min(min(col, abs(addProfile2)*2.0),abs(addProfile))*2.0;\n    \n    vec3 colorFresnel = step(col/0.99,vec3(0.4));\n    col *= normalize(col-colorFresnel)*0.5;\n    \n    \n    \n    //float per = abs(sqrt(iTime));\n    /*vec3 us = texture(\n    iChannel1, \n    vec2(fragCoord.xy*.5/iResolution.xy)\n    +vec2(0.02*iTime,0.)).xyz;*/\n    //col *= min(step(us*50.0,vec3(0.59)), vec3(0.09))+1.0;\n    //col *= step(col*0.1, vec3(0.65));\n    //col += abs(col * min(col,smoothstep(col, colorFresnel*4.0, vec3(per)))*1.0)+0.02;\n    //col = sqrt(col)*0.4;\n    uv.x *= 16.0+2.0;\n    uv.y += 16.0-2.0;\n    vec3 colCopy = col;\n    vec3 colCopy2 = col;\n    for(int i=0; i<64; i++)\n    {\n      uv.x+=sin(iTime)*0.001;\n      uv.y*= -2.0;\n      \n      colCopy += colCopy*uv.x + uv.y*64.0;\n      colCopy2 -= colCopy2*uv.x + uv.x*64.0;\n    }\n    \n    vec3 colB = 1.0-min(colCopy2,colCopy);\n    colB = step(colB,vec3(0.5));\n    //colB = mix(vec3(1.0,0.0,0.0)*4.0, vec3(0.0,0.0,1.0)*4.0, colB);\n    \n    vec3 masking = vec3(step(addProfile,vec3(0.04)));\n    vec3 masking_ = vec3(0.1);\n    vec3 colMask = masking*colorFresnel*0.01;\n    \n\nvec3 colorer = (.2+addProfile2*addProfile)+.20;\n    \n    colorer.r += abs(sin(iTime*0.4));\n    colorer.g += abs(sin(0.1+iTime*0.2));\n    colorer.b += abs(cos(0.6+iTime*0.6));\n    \n    \n    vec3 realMask = min(128.0*addProfile,0.6-addProfile2)/1000.0;\n    col = mix(mix(\n    -col*512.0,colorer,max(step(realMask,vec3(0.0)),vec3(0.0))), col*0.15, colB);\n    \n    uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    \n    \n    \n    \n    \n\n    \n\n    // Output to screen\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}