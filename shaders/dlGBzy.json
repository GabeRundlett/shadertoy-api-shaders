{
    "Shader": {
        "info": {
            "date": "1702214314",
            "description": "One of the first shaders I ever wrote; capturing it here for posterity. :)\n'Switches off' at 11 seconds.\n(I would Do Things Differently now.)",
            "flags": 0,
            "hasliked": 0,
            "id": "dlGBzy",
            "likes": 10,
            "name": "Obligatory CRT",
            "published": 3,
            "tags": [
                "retro",
                "scanlines",
                "crt"
            ],
            "usePreview": 0,
            "username": "dean_the_coder",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "// 'Obligatory CRT' dean_the_coder (Twitter: @deanthecoder)\n// https://www.shadertoy.com/view/dlGBzy\n//\n// Processed by 'GLSL Shader Shrinker'\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n//\n// One of the first shaders I ever wrote; capturing it here for posterity. :)\n// 'Switches off' at 11 seconds.\n// (I would Do Things Differently now.)\n//\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Progress: 0.0 to 1.0\nfloat progress;\n\n// 0.0 (screen on) to 1.0 (screen off)\nfloat shutdown_progress;\n\n// Number of scanlines ('0' means 'off')\nfloat scanline_count;\n\n// Get the color of the target pixel, based on the scaled source.\n// Pixels outside the source area are rendered black.\nvec3 raw(vec2 p) {\n\tif (shutdown_progress == 0.0) return texture(iChannel0, p).rgb;\n\n\t// The x/y scale of the screen, calculated over time.\n\tvec2 scale = vec2(1.0) - vec2(smoothstep(0.15, 0.2, shutdown_progress), smoothstep(0.0, 0.2, shutdown_progress)) * 0.99;\n\n\t// Fade the color to white as time progresses...\n\tfloat whiteness = smoothstep(0.1, 0.3, shutdown_progress);\n\n\t// ...and fade to black as the cycle finishes.\n\tfloat bright = 1.0 - smoothstep(0.5, 1.0, shutdown_progress);\n\tvec2 srcXY = vec2(0.5 - (0.5 - p.x) / scale.x, 0.5 - (0.5 - p.y) / scale.y);\n\tif (srcXY.x < 0.0 || srcXY.x > 1.0 || srcXY.y < 0.0 || srcXY.y > 1.0) // Outside source area - Use black.\n\treturn vec3(0.0);\n\n\t// Use the source data, applying a variable amount of whiteness.\n\tvec3 sourceRGB = texture(iChannel0, srcXY).rgb;\n\treturn mix(sourceRGB, vec3(1.0), whiteness) * bright;\n}\n\n// Random number generator.\nfloat rand(vec2 co) { return fract(sin(dot(co, vec2(12.98, 78.2))) * 43758.5453); }\n\n// The equation of an ellipse.\nfloat ellipse(vec2 xy, float r1, float r2) { return pow(xy.x, 2.0) / pow(r1, 2.0) + pow(xy.y, 2.0) / pow(r2, 2.0) - 1.0; }\n\n// For a given point, how far within the screen bezel is it?\nfloat calcBezelDepth(vec2 xy, float r1, float r2) { return max(ellipse(xy, r2, r1), ellipse(xy, r1, r2)) / ellipse(vec2(0.5), r1, r2); }\n\n// Calculate the lighting effects to apply to the screen.\nvoid screenShine(vec2 xy, inout vec3 rgb) {\n\tfloat bright = smoothstep(1.0, 0.0, pow(distance(xy, vec2(0.1, 0.28)), 0.7));\n\tfloat shadow = smoothstep(0.51, 0.55, length(xy * vec2(0.5, 1.0) + vec2(0.0, 0.1)));\n\trgb += (1.0 - rgb) * mix(0.0, 0.5, max(0.0, (bright - shadow) * progress));\n}\n\n// Apply a sine wave travelling down the y axis to simulate scanlines.\nvoid scanlines(inout vec3 rgb, vec2 p) {\n\tfloat colorBoost = 0.5;\n\trgb *= 1.0 + progress * (colorBoost - abs(sin(p.y * 3.14159 * scanline_count)));\n}\n\n// Darken the corners of the screen imply roundness.\nvoid screenBulge(inout vec3 rgb, vec2 p) {\n\tfloat vignette = p.x * p.y * (1.0 - p.x) * (1.0 - p.y);\n\trgb *= mix(1.0, pow(abs(32.0 * vignette), 0.35), progress);\n}\n\n// Apply a slight mottling effect to the rgb value.\n// (Used to texture the bevel and screen 'glass'.)\nvoid addNoise(inout vec3 rgb, vec2 p) { rgb *= 1.0 - rand(p) * 0.2 * progress; }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 position = fragCoord;\n\tvec2 xy = fragCoord / iResolution.xy - 0.5;\n    float t = mod(iTime, 15.0);\n\tscanline_count = iResolution.y / 8.0;\n\tprogress = smoothstep(0.0, 4.0, t);\n\tshutdown_progress = smoothstep(11.0, 13.0, t);\n\n\t// Define the shape of the screen bevel.\n\tfloat r1 = mix(0.5, 0.47, progress);\n\tfloat r2 = mix(5.0, 1.4, progress);\n\n\t// Distort the screen pixels to give a 'bulge'.\n\tvec2 scaleXY = 0.5 * r2 / (r1 * vec2(sqrt((r2 + xy.y) * (r2 - xy.y)), sqrt((r2 + xy.x) * (r2 - xy.x))));\n\tvec2 bulgedXY = xy * scaleXY;\n\tvec3 rgb;\n\tfloat bevelDepth = calcBezelDepth(xy, r1, r2);\n\tif (bevelDepth > 0.0) {\n\t\t// Point is inside the bevel.\n\t\tvec3 bevelDark = vec3(0.1, 0.1, 0.05); // Bevel colors.\n\t\tvec3 bevelLight = vec3(0.6, 0.6, 0.54);\n\t\trgb = mix(bevelDark, bevelLight, bevelDepth);\n\t\taddNoise(rgb, fragCoord); // Add texture to the bevel.\n\t\t// Add a shadow.\n\t\tfloat shadow = smoothstep(0.55, 0.51, length(xy * vec2(0.5, 1.0) + vec2(0.0, 0.2)));\n\t\trgb *= mix(0.5, 1.0, shadow);\n\t}\n\telse {\n\t\t// 'Bulge' the screen.\n\t\tposition = bulgedXY + 0.5;\n\n\t\t// Get the source RGB pixel.\n\t\trgb = raw(position);\n\n\t\t// Scanlines?\n\t\tif (scanline_count > 0.0) scanlines(rgb, position);\n\n\t\t// Apply screen effects.\n\t\tscreenShine(xy, rgb);\n\t\tscreenBulge(rgb, position);\n\t\taddNoise(rgb, position);\n\t}\n\n\t// Output to screen\n\tfragColor = vec4(rgb * clamp(t, 0.0, 1.0), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}