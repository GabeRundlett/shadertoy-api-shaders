{
    "Shader": {
        "info": {
            "date": "1516593912",
            "description": "Sway shader and HSB",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt2fRV",
            "likes": 1,
            "name": "Sway and simple Bloom",
            "published": 3,
            "tags": [
                "sway"
            ],
            "usePreview": 0,
            "username": "kojdj0811",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "float scaledTime;\nfloat warpMaxDist;\nvec2 uv;\n\n\nvec4 GetWarpedPixel () {\n    \n    vec4 warpCoord0;\n    warpCoord0 = texture(iChannel1, vec2(uv.x+scaledTime*2.0, uv.y)*2.0);\n\n    vec4 warpCoord1;\n    warpCoord1 = texture(iChannel1, vec2(uv.x-scaledTime, uv.y+0.5));\n    \n    vec4 warpCoord = warpCoord0*0.5 + warpCoord1*0.5;\n    warpCoord = warpCoord / 255.0 * warpMaxDist;\n    \n    vec4 outColor;\n    outColor = texture ( iChannel0,\n                       vec2( uv.x + sin(warpCoord.x),\n                             uv.y + cos(warpCoord.y) )\n                       );\n    \n    return outColor;\n}\n\n\nvec4 Rgb2Hsb (vec4 _color) {\n    vec4 color = _color;\n    color /= 255.0;\n    \n    vec4 hsb = _color;\n\n    \n    \n    float maxColorValue = max (color.r, max (color.g, color.b) );\n    float minColorValue = min (color.r, min(color.g, color.b) );\n    float delta = maxColorValue - minColorValue;\n    \n    hsb.b = maxColorValue;\n    hsb.g = (maxColorValue == 0.0) ? 0.0 : delta / maxColorValue;\n\t\n    \n    if (hsb.g == 0.0)\n        return color;\n    \n    if (color.r == maxColorValue)\n\t\thsb.r = (color.g - color.b) / delta;\n\telse if (color.g == maxColorValue)\n\t\thsb.r = 2.0 + (color.b - color.r) / delta;\n\telse if (color.b == maxColorValue)\n\t\thsb.r = 4.0 + (color.r - color.g) / delta;\n\n\thsb.r *= 60.0;\n\n\tif (hsb.r < 0.0)\n\t\thsb.r += 360.0;\n    \n\treturn hsb;\n}\n\n\nvec4 Hsb2Rgb (vec4 _hsb) {\n    vec4 hsb = _hsb;\n    vec4 rgb;\n    \n    if (hsb.g == 0.0) \n    \treturn hsb;\n    else {\n        float f; float p; float q; float t; int i;\n\n        if (hsb.r == 360.0)\n            hsb.r = 0.0;\n        else if (hsb.r > 360.0)\n            hsb.r -= 360.0;\n        hsb.r /= 60.0;\n    \n        i = int(hsb.r);\n\n        f = hsb.r - float(i);\n        p = hsb.b * (1.0 - hsb.g);\n        q = hsb.b * (1.0 - hsb.g*f);\n        t = hsb.b * (1.0 - hsb.g*(1.0 - f));\n        \n        \n        if (i == 0) {\n            rgb.r=hsb.b;\n            rgb.g=t;\n            rgb.b=p;\n        } else if (i==1) {\n            rgb.r=q;\n            rgb.g=hsb.b;\n            rgb.b=p;\n        } else if (i==2) {\n            rgb.r=p;\n            rgb.g=hsb.b;\n            rgb.b=t; \n        } else if (i==3) {\n            rgb.r=p;\n            rgb.g=q;\n            rgb.b=hsb.b;\n        } else if (i==4) {\n            rgb.r=t;\n            rgb.g=p;\n            rgb.b=hsb.b;\n        } else if (i==5) {\n            rgb.r=hsb.b;\n            rgb.g=p;\n            rgb.b=q;\n        } \n    }\n    \n   \treturn rgb*255.0;\n}\n\n\nvec4 ConfigHsb (vec4 hsb, float hue, float saturation, float brightness) {\n\thsb.r += hue;\n    hsb.g += saturation;\n    hsb.b += brightness;\n    \n \thsb.r = hsb.r > 360.0 ? hsb.r - 360.0 : hsb.r;\n    hsb.r = hsb.r < 0.0 ? 0.0 : hsb.r;\n    \n    hsb.g = hsb.g > 1.0 ? 1.0 : hsb.g;\n    hsb.g = hsb.g < 0.0 ? 0.0 : hsb.g;\n    \n    hsb.b = hsb.b > 1.0 ? 1.0 : hsb.b;\n    hsb.b = hsb.b < 0.0 ? 0.0 : hsb.b;\n    \n    \n    return hsb;\n}\n\n\nvec4 GetBlendedPixel_wraped_bright (vec2 xy) {\n\tuv = xy.xy / iResolution.xy;\n    uv.x = uv.x * 1.5;\n    \n    \n    scaledTime = iTime*0.1;\n    warpMaxDist = 10.0;\n    \n    \n    vec4 origin = GetWarpedPixel ();\n    vec4 brightMap;\n    \n    float tone = (origin.r + origin.g + origin.b) / 3.0;\n    if (tone > (100.0/255.0)) {\n        brightMap = Rgb2Hsb (origin);\n\t\tbrightMap = ConfigHsb (brightMap, 0.0, 0.0, 0.001);\n        brightMap = Hsb2Rgb (brightMap);\n    } else \n        brightMap.rgb = vec3(0.0, 0.0, 0.0);\n    \n    \n    \n    vec4 blended_orign_brightMap;\n    if(max(brightMap.r, max(brightMap.g, brightMap.b)) == 0.0)\n        blended_orign_brightMap = origin;\n    else\n        blended_orign_brightMap = origin*0.5 + brightMap*0.5;\n    \n    return blended_orign_brightMap;\n}\n\n\nvec4 TakeBlur (vec4 targetColors[25], float customFilter[25]) {\n\t\n    float sum = 0.0;\n\n   \tint i = 0;\n    for (int i = 0; i<25; i++)\n        sum += customFilter [i];\n    \n    vec4 result = vec4(0.0);\n    for (int i = 0; i<25; i++)\n        result += targetColors[i] * customFilter[i] / sum;\n    \n    \n    \n    return result;\n}\n\n\nvoid mainImage ( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 targetColors [25];\n    float blurFilter [25];\n    blurFilter [0] = 2.0;\n    blurFilter [1] = 4.0;\n    blurFilter [2] = 5.0;\n    blurFilter [3] = 4.0;\n    blurFilter [4] = 2.0;\n    blurFilter [5] = 4.0;\n    blurFilter [6] = 9.0;\n    blurFilter [7] = 12.0;\n    blurFilter [8] = 9.0;\n    blurFilter [9] = 4.0;\n    blurFilter [10] = 5.0;\n    blurFilter [11] = 12.0;\n    blurFilter [12] = 15.0;\n    blurFilter [13] = 12.0;\n    blurFilter [14] = 4.0;\n    blurFilter [15] = 9.0;\n    blurFilter [16] = 12.0;\n    blurFilter [17] = 9.0;\n    blurFilter [18] = 4.0;\n    blurFilter [19] = 2.0;\n    blurFilter [20] = 4.0;\n    blurFilter [21] = 5.0;\n    blurFilter [23] = 4.0;\n    blurFilter [24] = 2.0;\n    \n    \n    \n    int i, j;\n    \n\n        \n    vec4 result;\n    if ( iMouse.x > fragCoord.x && iMouse.y < fragCoord.y ) \n        result = texture(iChannel0, vec2(fragCoord.x*1.5, fragCoord.y)/iResolution.xy);\n    else if ( iMouse.x < fragCoord.x && iMouse.y < fragCoord.y )\n        result = GetBlendedPixel_wraped_bright (fragCoord.xy);\n    else if ( iMouse.x < fragCoord.x && iMouse.y > fragCoord.y ) {\n        for (int i=0; i<5; i++)\n        for (int j=0; j<5; j++)\n\t    \ttargetColors[i*5 + j] = GetBlendedPixel_wraped_bright(\n                                                                        vec2(fragCoord.x+float(j)-2.0,\n                                                                             fragCoord.y+float(i)-2.0)\n                                                                    );\n        result = TakeBlur (targetColors, blurFilter);\n    }\n    else if ( iMouse.x > fragCoord.x && iMouse.y > fragCoord.y ) {\n        for (int i=0; i<5; i++)\n        for (int j=0; j<5; j++)\n\t    \ttargetColors[i*5 + j] = texture (iChannel0, vec2(fragCoord.x*1.5 + float(j)-2.0, fragCoord.y + float(i)-2.0)/iResolution.xy);\n            \n        result = TakeBlur (targetColors, blurFilter);\n    }\n    \n\n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}