{
    "Shader": {
        "info": {
            "date": "1472570666",
            "description": "Blinking Light",
            "flags": 8,
            "hasliked": 0,
            "id": "Mld3Ds",
            "likes": 1,
            "name": "Light Blinking",
            "published": 3,
            "tags": [
                "sound",
                "blinkinglight"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 820
        },
        "renderpass": [
            {
                "code": "float time = iTime;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 z = vec2( sin(6.2831*440.0*time)*cos(-3.0*time));\n    vec2 error = vec2( sin(6.2831*440.0*time)*cos(sqrt(-3.0*time)) );\n    vec2 unerror = vec2( sin(6.2831*440.0*time)*cos(-3.0*time));\n    vec2 x = smoothstep(error - dot(unerror, -unerror), unerror, vec2(dot(error, unerror)));\n    vec2 y = mix(error - dot(unerror, -unerror), unerror, dot(error, unerror));\n    vec2 res = min(max(tan(x) + cos(y), tan(x) - cos(y)), z);\n    vec3 col = normalize(vec3(res, 1.0));\n    vec3 r = vec3(0.4, 0.3, 0.1);\n    fragColor = vec4(col-length(min(-sqrt(uv),-tan(uv)))+r, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    vec2 z = vec2( sin(6.2831*440.0*time)*cos(-3.0*time));\n    vec2 error = vec2( sin(6.2831*440.0*time)*cos(sqrt(-3.0*time)) );\n    vec2 unerror = vec2( sin(6.2831*440.0*time)*cos(-3.0*time));\n    vec2 x = smoothstep(error - dot(unerror, -unerror), unerror, vec2(dot(error, unerror)));\n    vec2 y = mix(error - dot(unerror, -unerror), unerror, dot(error, unerror));\n    return min(max(tan(x) + cos(y), tan(x) - cos(y)), z);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}