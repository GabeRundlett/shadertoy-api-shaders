{
    "Shader": {
        "info": {
            "date": "1499342362",
            "description": "First shader. Trying to reproduce Glow intro",
            "flags": 0,
            "hasliked": 0,
            "id": "4dBfR1",
            "likes": 24,
            "name": "Glow intro",
            "published": 3,
            "tags": [
                "starneon"
            ],
            "usePreview": 0,
            "username": "Tomza",
            "viewed": 1491
        },
        "renderpass": [
            {
                "code": "float pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\n\n\nfloat epsilon = 1e-3;\nfloat infinity = 1e6;\n\n//Settings\n#define BORDER_COLOR vec3(0.05, 0.20, 1.00)\n\n#define BRIGHTNESS 0.004\n#define THICKNESS  0.002\n\n//Checks if a and b are approximately equal.\nbool ApproxEqual(float a, float b)\n{\n    return abs(a - b) <= epsilon;\n}\n\n//Distance to a line segment,\nfloat dfLine(vec2 start, vec2 end, vec2 uv, float scale)\n{\n\tstart *= scale;\n\tend *= scale;\n    \n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) / dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n\nfloat dfBorder(vec2 uv, float scale)\n{\n    float dist = infinity;\n    \n    vec2 pt1 = vec2(0.,2.86), \n         pt2=vec2(1.86,2.86),\n         pt3=vec2(2.43,4.63),\n         pt4=vec2(3.,2.86), \n         pt5=vec2(4.86,2.86),\n         pt6=vec2(3.36,1.77),\n         pt7=vec2(3.93,0.),\n         pt8=vec2(2.43,1.10),\n         pt9=vec2(0.93,0.),\n         pt10=vec2(1.51,1.77);\n    \n\tdist = min(dist, dfLine(pt1, pt2, uv, scale));\n    dist = min(dist, dfLine(pt2, pt3, uv, scale));\n    dist = min(dist, dfLine(pt3, pt4, uv, scale));\n    dist = min(dist, dfLine(pt4, pt5, uv, scale));\n    dist = min(dist, dfLine(pt5, pt6, uv, scale));\n    dist = min(dist, dfLine(pt6, pt7, uv, scale));\n    dist = min(dist, dfLine(pt7, pt8, uv, scale));\n    dist = min(dist, dfLine(pt8, pt9, uv, scale));\n    dist = min(dist, dfLine(pt9, pt10, uv, scale));\n    dist = min(dist, dfLine(pt10, pt1, uv, scale));\n   \n    \n    return dist;\n}\n\n\nvec3 DrawStar(vec2 uv, vec3 color, float ind)\n{\n\tfloat dist = 0.0;\n    float shade = 0.0;\n\tfloat scale = -ind + mod(iTime-ind,8.)*2. / 6.0;\n    if(scale >= 0. /*&& scale < 1.0*/)\n    {\n        vec2 offs = vec2(5.0, 4.5) * scale/2.0;\n\n        float bright_bord = BRIGHTNESS * min(1.0, 1.0 - sin(0.5 * pi * 50.0) / (0.5 * pi * 1.3));\n\n\n        //Border\n        dist = dfBorder(uv + offs, scale);\n\n        shade = bright_bord / max(epsilon, dist - THICKNESS);\n    \n    return color * shade;\n    }\n    \n    return vec3(0.,0.,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y - aspect/2.0;\n\t\n    vec3 color = vec3(0);\n    \n    for(float i=0.;i<20.;i++)\n    {\n    color += DrawStar(uv, vec3(0.86-mod(i,10.)*0.2,0.0,0.48+0.02*mod(i,10.)), 0.1*i);\n    }\n\n\n\tfragColor = vec4(color , 1.0);\n}\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}