{
    "Shader": {
        "info": {
            "date": "1685221762",
            "description": "Ted Lasso intro seats - messy, but fun :)",
            "flags": 0,
            "hasliked": 0,
            "id": "dldXz7",
            "likes": 6,
            "name": "Ted Lasso Intro Seats",
            "published": 3,
            "tags": [
                "fun",
                "tedlasso"
            ],
            "usePreview": 0,
            "username": "tristanantonsen",
            "viewed": 189
        },
        "renderpass": [
            {
                "code": "// https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( vec2 p0, vec2 c, vec2 b, vec4 r )\n{\n    vec2 p = p0-c;\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat arrayBox(vec2 p, vec2 size, vec2 spacing)\n{\n\n    vec2 arraySpacing = vec2(2. * (size + spacing));\n    vec2 asize = size + spacing;\n    vec2 pmin = floor(0.5 * p / asize) * asize;\n    vec2 pmax = ceil(0.5 * p / asize) * asize;\n    vec2 center = (pmin + pmax) / 2.0;\n    \n\n    vec2 r = mod(p, arraySpacing);\n    vec2 boxDims = vec2(size);\n    float d = sdRoundedBox(r+vec2(0., -size.y*0.5), vec2(size+spacing), boxDims, vec4(0.015,0.005,0.015,0.005));\n    float d2 = sdRoundedBox(r+vec2(0., size.y*1.), vec2(size+spacing), vec2(size.x*1.1, size.y/4.), vec4(0.0075));\n\n    return opSmoothUnion(d, d2, 0.0);\n\n}\n\nfloat SceneDist(vec2 p, vec2 size, vec2 spacing) {\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;\n\n    vec2 actualSize = size + spacing;\n    \n    float d = arrayBox(p, size, spacing);\n        \n    return d;\n}\n\nvec4 rowOfSeats(vec2 p, vec2 size, vec2 spacing) {\n    \n    \n    // box masking \n    vec2 actualSize = size + spacing;\n       \n    vec2 pmin = floor(0.5 * p / actualSize) * actualSize;\n    vec2 pmax = floor(0.5 * p / actualSize) * actualSize;\n    vec2 pcenter = mix(pmin, pmax, 0.5);\n\n    \n    float d = SceneDist(p, size, spacing) * 255.;\n    vec3 rgb1 = vec3(52, 117, 199) / 255.;\n    vec3 rgb2 = vec3(219, 87, 47) / 255.;\n    vec3 rgb3 = vec3(0.);\n    vec3 col1 = mix( rgb3, rgb2, 1.0-smoothstep(0.0,1.,d) );\n    vec3 col2 = mix( rgb3, rgb1, 1.0-smoothstep(0.0,1.,d) );\n    col1 =  col1 + vec3(0.07) * round(texture(iChannel0, pcenter).r);\n    col2 =  col2 + vec3(0.07) * round(texture(iChannel0, pcenter).r);\n    \n    // mouse\n    //vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;\n    vec2 m = vec2(0.95 * sin(0.25*iTime), 0.5 * sin(0.5*iTime));\n    \n    \n    float l = length(pcenter-m * 0.5);\n        \n    if (abs(pcenter.x-0.25) <= 0.01 || abs(pcenter.x+0.5) <= 0.01) {\n        return vec4(0.);   \n    } else {\n       float t = clamp(l/0.3-0.75, 0.0, 1.0);\n       return vec4(mix(col1, col2, smoothstep(0., 1., 25.*t)), 1.0);\n    \n    }\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.25 * (fragCoord - 0.5*iResolution .xy)/iResolution.y;\n    \n    vec2 size = vec2(0.03, 0.025);\n    vec2 spacing = vec2(0.005, 0.015);\n    \n    vec4 seats = rowOfSeats(uv, size, spacing);\n        \n    \n    fragColor = max(seats, 0.15);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}