{
    "Shader": {
        "info": {
            "date": "1706275358",
            "description": "A test made for inner reflections and test some rendering techniques.\nNot super optimized",
            "flags": 32,
            "hasliked": 0,
            "id": "DtBSRK",
            "likes": 23,
            "name": "Diamond jewel ring",
            "published": 3,
            "tags": [
                "diamond",
                "jewel",
                "refractionfingerring"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        //if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel1, uv+vec2(0.,f*factor).yy*vec2(1.,-1.)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz\n+pow(texture(iChannel0, uv).xyz, vec3(GLOW_POW))*GLOW_OPACITY\n    +pow(col, vec3(GLOW_POW))*GLOW_OPACITY\n    ;//+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb, vec3(2.2));\n    \n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.05\n#define GLOW_POW 1.9\n#define GLOW_OPACITY .56\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n\nfloat sdDiamond(vec3 p)\n{\n    float diamond = length(p.xz)-1.;\n    float angle = atan(p.z, p.x);\n\n// Lower\n    float stpA = PI*2./16.;\n    float sectorA = mod(angle+stpA*.5,stpA)-stpA*.5;\n    vec3 pa = vec3(0.,p.y, 0.) + vec3(sin(sectorA), 0., cos(sectorA))*length(p.xz);\n    diamond = max(diamond, pa.z+pa.y*.75);\n    float stpB = PI*2./8.;\n    float sectorB = mod(angle+PI/8.+stpB*.5,stpB)-stpB*.5;\n    vec3 pb = vec3(0.,p.y, 0.) + vec3(sin(sectorB), 0., cos(sectorB))*length(p.xz);\n    diamond = max(diamond, pb.z+pb.y*1.+.2);\n    \n// Upper\n    diamond = max(diamond, -p.y-1.7);\n    diamond = max(diamond, pb.z-pb.y*1.-2.3);\n    \n        float stpC = PI*2./8.;\n    float sectorC = mod(angle+stpC*.5,stpC)-stpC*.5;\n    vec3 pc = vec3(0.,p.y, 0.) + vec3(sin(sectorC), 0., cos(sectorC))*length(p.xz);\n    diamond = max(diamond, pc.z-pc.y*1.8-3.5);\n    return diamond;\n}\n// Thanks IQ :)\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// Thanks IQ :)\nfloat ssub( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\n// Thanks IQ :)\nfloat smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\nvec2 map(vec3 p, float flip)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    //acc = _min(acc, vec2(length(p-vec3(0.,-2.,0.))-1., 0.));\n\n    float mainRep = PI*2./7.;\n    \n    float an = atan(p.y, p.x);\n    float sectorMain = mod(an+mainRep*.5,mainRep)-mainRep*.5;\n    vec3 mainP = vec3(sin(sectorMain), cos(sectorMain), 0.)*length(p.xy)+vec3(0.,0.,p.z);\n\n    \n    float ringRad = 3.1;\n    float diamond = sdDiamond((mainP*vec3(1.,-1.,1.)-vec3(0.,-ringRad+.35,0.))*2.);\n    acc = _min(acc, vec2(diamond, 0.));\n    \n    float smoo = .15;\n    \n    float thick = smax(length(p.xy)-ringRad-.3, -(length(p.xy)-ringRad), smoo);\n    float ring = smax(thick, abs(p.z)-2., smoo);\n    \n    float innerCircleSmall = smax(ring, length(mainP.xz)-.5, smoo);\n    vec3 pring = mainP-vec3(0.,-ringRad, 0.);\n    vec3 pringJoints = mainP;\n    pringJoints.xz *= r2d(PI*.25);\n    pringJoints.xz = abs(pringJoints.xz);\n    pringJoints -= vec3(.4,ringRad+.1, 0.4);\n    float ringJoints = length(pringJoints)-.2;\n    \n    float innerCircle = smax(ring, length(mainP.xz)-1., smoo);\n    innerCircle = smax(innerCircle, -(length(mainP.xz)-.7), smoo);\n    \n    float anCircle = atan(mainP.z, mainP.x);\n    float radOuter = 1.5+.3*sin(anCircle*4.+PI*1.5);\n    float outerCircle = smax(ring, length(mainP.xz)-radOuter, smoo);\n    outerCircle = smax(outerCircle, -(length(mainP.xz)-(radOuter-.3)), smoo);\n    \n    float metal = ringJoints;\n    metal = smin(metal, innerCircleSmall, smoo);\n    metal = smin(metal, innerCircle, smoo);\n    metal = smin(metal, outerCircle, smoo);\n    acc = _min(acc, vec2(metal, 3.));\n\n    // small diamonds repetition\n    float repA = PI*2./16.;\n    float sectorA = mod(anCircle+repA*.5,repA)-repA*.5;\n    vec3 pringA = vec3(sin(sectorA), 0., cos(sectorA))*length(mainP.xz)+vec3(0., mainP.y, 0.);\n    float diamondA = sdDiamond((pringA*vec3(1.,-1.,1.)-vec3(0.,-ringRad-.12,0.8))*8.);\n    acc = _min(acc, vec2(diamondA, 1.));\n    float repB = PI*2./30.;\n    float angleB = floor((anCircle+repB*.5)/repB);\n    float sectorB = mod(anCircle+repB*.5,repB)-repB*.5;\n    \nvec3 pringB = vec3(sin(sectorB), 0., cos(sectorB))*length(mainP.xz)+vec3(0., mainP.y, 0.);\n     float diamondB = sdDiamond((pringB*vec3(1.,-1.,1.)-vec3(0.,-ringRad-.12+abs(mainP.x)*.1,1.3+.3*sin(anCircle*4.+PI*1.5)))*8.);\n\n acc = _min(acc, vec2(diamondB, 2.));\n    if (flip > 0.5)\n        acc.x = -acc.x;\n\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d, float flip)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy, flip).x, map(p-e.yxy, flip).x, map(p-e.yyx, flip).x));\n}\n\n\nvec3 getEnv(vec3 rd)\n{\n    return texture(iChannel2, rd*vec3(1.,-1.,1.)).xyz;\n}\nvec3 trace(vec3 ro, vec3 rd, int steps, float flip)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 20.; ++i)\n    {\n        vec2 res = map(p, flip);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.35;\n    }\n    return vec3(-1.);\n}\n\nvec3 tracerefr(vec3 p, vec3 rd, vec3 n, vec3 channel)\n{\n    vec3 col = vec3(0.);\n    float refrIdx = dot(vec3 (2.407, 2.426, 2.451), channel);\n\n    vec3 refr = normalize(refract(rd, n, 1./refrIdx));\n    col += getEnv(refr);\n    for (float i = 0.; i < 3.; ++i)\n    {\n        vec3 resrefr = trace(p, refr, 32, 1.);\n        if (resrefr.y > 0.)\n        {\n            vec3 prefr = p+refr*resrefr.y;\n            p = prefr;\n            vec3 nrefr = getNorm(prefr, resrefr.x, 1.);\n            n = nrefr;\n            p+= n*0.01;\n            refr = reflect(refr, nrefr);\n            vec3 ldir = normalize(vec3(1.));\n            col += .05*sat(dot(reflect(refr, nrefr), ldir))*channel;\n            vec3 h = normalize(rd+ldir);\n            col += .7*pow(sat(dot(n, h)),5.)*channel*2.5;\n\n        }\n        else ;\n    }\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float d = 15.;\n    float t = iTime*.1;\n    vec3 ro = vec3(sin(t)*d,-4.,cos(t)*d);\n    vec3 ta = vec3(0.,-1.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 100, 0.);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x, 0.);\n        //col = n*.5+.5;\n        \n        vec3 refl = normalize(reflect(rd, n));\n        if (res.z == 0. || res.z == 1. || res.z == 2.)\n        {\n        \n        col.x = tracerefr(p-n*.05, rd, n, vec3(1.,0.,0.)).x;\n        col.y = tracerefr(p-n*.05, rd, n, vec3(0.,1.,0.)).y;\n        col.z = tracerefr(p-n*.05, rd, n, vec3(0.,0.,1.)).z;\n        vec3 rgb = vec3(1.000,0.580,0.761);\n        if (res.z == 1.)\n            rgb = vec3(0.663,0.835,0.996);\n        else if (res.z == 2.)\n            rgb = vec3(1.);\n        col *= rgb;\n                col += getEnv(refl)*.1; // Refl\n        }\n        else\n        {\n            vec3 ldir = normalize(vec3(1.,-1.,1.));\n            vec3 h = normalize(rd+ldir);\n            col = getEnv(refl);\n            col += vec3(.1);\n            col += vec3(1.)*pow(sat(dot(n, h)),2.);\n        }\n    }\n    else\n        col = getEnv(rd)*.7;\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 ouv = (fragCoord)/iResolution.xy;\n  \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    //vec2 off = .75*(vec2(rand(), rand())-.5)*2.*1./iResolution.x;\n    vec3 col = rdr(uv);\n    \n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n\n    /*if (true)//diff > 0.3) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }*/\n    col *= 1.5/(col+1.);\n    //col = pow(col, vec3(2.2));\n    //col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .7);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        //if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.).xx).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}