{
    "Shader": {
        "info": {
            "date": "1591428631",
            "description": "Recusive form of the nice geometric construction of Bezier curve:[url]https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Higher-order_curves[/url] .\n Note the fast convergence.\nUse mouse to control spot of refinement.",
            "flags": 0,
            "hasliked": 0,
            "id": "3llcR8",
            "likes": 12,
            "name": "recursive BÃ©zier construction",
            "published": 3,
            "tags": [
                "bezier",
                "spline",
                "tuto"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// === Recusive form of the nice geometric construction of Bezier curve ===\n// https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Higher-order_curves \n// for real-use, would draw segments and stop subdiv when length or angle < threshold\n\nvec2  P0_ = vec2(-1.6,-.8), T0 = .8*vec2(1.5,2), // Bezier cage: points + tangents\n      P3_ = vec2( 1.4,-.8), T3 = .8*vec2(.2 ,2), \n      P0,P1,P2,P3;                               // recursive Bezier cage ( 4 points )\n#define R  iResolution.xy\n\n// --- line drawing from https://www.shadertoy.com/view/llySRh\n// NB: for perf, would better return dot(,) take the min dist, then draw only the sqrt of this one.\n#define S(v,r) smoothstep( -3., 0., r-abs(v)*R.y )\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return length(p - b * h); \n}\n\n// --- recursive construction\n// M:        target point ( e.g., Mouse  or cur pixel )\n// constr:   true: draw construction line   false: only draw the final point.\nvoid Bezier( vec2 U, vec2 M, inout vec4 O , bool constr) {\n    for( int i=0; i< (constr ? 4 : 8 ); i++ ) {\n        vec2 P01 = ( P0+P1 )/2., P12 = ( P1+P2 )/2., P23 = (P2+P3)/2., // NB: pretty integer friendly\n             P02 = (P01+P12)/2., P13 = (P12+P23)/2., \n              Pb = (P02+P13)/2.;                 // mid-point on spline, delimiting the 2 sub-cages\n        if (constr) O.rg += S(line(U,P01,P02),), // draw construction lines ( including sub cages )\n                    O.rg += S(line(U,P02,P12),)*.5, \n                    O.rg += S(line(U,P13,P23),),\n                    O.rg += S(line(U,P12,P13),)*.5,\n                    O.g  += S(line(U,P02,Pb) ,),\n                    O.r  += S(line(U,Pb,P13) ,), // draw point on spline\n                    O    += S(length(Pb-U), 4.);\n        else        O    += S(length(Pb-U),   );\n\n        if ( dot( M-Pb, P13-P02 ) < 0. )\n      //if ( M.x < Pb.x ) \n                        P1=P01, P2=P02, P3=Pb;   // choose closest sub-cages\n            else        P2=P23, P1=P13, P0=Pb;\n    }\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = ( 2.*u - R ) /R.y,\n         M = length(iMouse.xy) < 20. \n                 ?  vec2 ( cos(iTime), 0 )\n                 : ( 2.*iMouse.xy - R ) /R.y; \n    O = vec4(0);\n    T0 += .2 * cos(iTime+vec2(0,11));            // animate Bezier cage\n    T3 += .2*sin(2.3*iTime+vec2(0,11));\n    \n   \n    P0 = P0_, P3=P3_, P1 = P0+T0, P2 = P3+T3;    // set Bezier cage\n    O.r  += S(line(U,P0,P1),);                   // draw Bezier cage\n    O.rg += S(line(U,P1,P2),);\n    O.g  += S(line(U,P2,P3),);\n    \n    O += S(length(M-U)/8.,);                     // draw mouse spot \n    Bezier(U,M,O, true);                         // recursive draw Bezier around mouse spot\n    \n    P0 = P0_, P3=P3_, P1 = P0+T0, P2 = P3+T3;    // set Bezier cage\n    Bezier(U,U,O, false);                        // recursive draw Bezier curve (here, just points)\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}