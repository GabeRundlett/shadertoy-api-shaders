{
    "Shader": {
        "info": {
            "date": "1692997404",
            "description": "Prediction vs Simulation of field arising from arbitrary signal carrying wire.",
            "flags": 32,
            "hasliked": 0,
            "id": "dtffDM",
            "likes": 16,
            "name": "Simulation vs Prediction",
            "published": 3,
            "tags": [
                "maxwell",
                "wire",
                "em"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "Main {\n    float _ = .01;\n    if (true) {\n        vec2 r = U-vec2(.5,.55)*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n            float x = ((float(iFrame-10)-sqrt(mu*eps)*2.*l)/60.);\n         float dj= eps*(f(x)+df(x));\n\n         Q += .2*vec4(\n             (dj)*u.y,\n            -(dj)*u.x,\n            mu*df(x),\n            1\n        )/(l);\n    }\n    if (true) {\n        vec2 r = U-vec2(.5,.45)*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n            float x = ((float(iFrame-10)-sqrt(mu*eps)*2.*l)/60.);\n         float dj= eps*(f(x)+df(x));\n\n         Q += .2*vec4(\n             (dj)*u.y,\n            -(dj)*u.x,\n            mu*df(x),\n            1)/(l);\n    }\n      \n    if (true) {\n        vec2 r = U-vec2(.4,.3)*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n        float x = ((float(iFrame-10)-sqrt(mu*eps)*2.*l)/60.);\n        vec2 m = g(x);\n        vec2 dm = dg(x)+ddg(x);\n        Q += .25*vec4(\n            vec2(u.y,-u.x)*dm.x*u.y+\n            vec2(-u.y,u.x)*dm.y*u.x+\n            35.*(+2.*m/l-4.*u*dot(u,m)/l)\n            ,\n            (u.y*dm.x-u.x*dm.y),\n            1.\n        )/(15.+l);\n    }\n    vec2 u = U;\n    u -= .5*R;\n    float a = -3.+1.*iTime;\n    u *= mat2(cos(a),sin(a),-sin(a),cos(a));\n    if (sign(u.x)<0.)\n        Q = A(U);\n    //Q.z *= 0.;\n    Q = .5+Q;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define Main void mainImage(out vec4 Q, in vec2 U)\n#define mu 1.\n#define eps 1.\n#define pi 3.141592659\n\nfloat f (float x) {\n    // Change the input signal here!\n    return 10.*smoothstep(0.,1.,x)*asin(.9*sin(5.*x+10.*sin(.3*x)));\n}\nfloat df (float x) {\n    float e = .1;\n    return (f(x+e)-f(x-e))/(2.*e);\n}\nfloat ddf (float x) {\n    float e = .1;\n    return (df(x+e)-df(x-e))/(2.*e);\n}\n\n\nvec2 g (float x) {\n    // Change the input signal here!\n    \n    return 4.*smoothstep(0.,1.,x)*vec2(sin(2.*x+3.*sin(.2*x)),cos(2.*x+3.*sin(.2*x)));\n}\nvec2 dg (float x) {\n    float e = .1;\n    return (g(x+e)-g(x-e))/(2.*e);\n}\nvec2 ddg (float x) {\n    float e = .1;\n    return (dg(x+e)-dg(x-e))/(2.*e);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n    Q = A(U);\n    vec4 n = A(U+vec2(0,1));\n    vec4 e = A(U+vec2(1,0));\n    vec4 s = A(U-vec2(0,1));\n    vec4 w = A(U-vec2(1,0));\n    if (iFrame%2==0) {\n        // dB/dt = -curl E\n        Q.x -= .5/mu*(n.z-s.z);\n        Q.y += .5/mu*(e.z-w.z);\n    } else {\n        // dE/dt = curl B - j\n        Q.z -= .5/eps*(n.x-s.x-e.y+w.y) - Q.w;\n    }\n    //Q.w -= Q.z;\n    Q.w = 0.;\n    if (length(U-vec2(.5,.55)*R)<2.) Q.w += f((float(iFrame)/60.))/10.;\n    else if (length(U-vec2(.5,.45)*R)<2.) Q.w += f((float(iFrame)/60.))/10.;\n    else Q.w = 0.;\n    \n    \n    if (length(U-vec2(.4,.3)*R)<2.) \n        Q.xy = g((float(iFrame)/60.));\n    \n    if (U.x<50.||U.y<50.||R.x-U.x<50.||R.y-U.y<50.)\n        Q *= .98;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}