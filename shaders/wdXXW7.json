{
    "Shader": {
        "info": {
            "date": "1568921003",
            "description": "The Kummer quartic surface again ([url]https://www.shadertoy.com/results?query=kummer[/url]), this time with transparency, and raytraced using the Lanczos quartic solver.",
            "flags": 48,
            "hasliked": 0,
            "id": "wdXXW7",
            "likes": 10,
            "name": "Kummer Surface II",
            "published": 3,
            "tags": [
                "cubic",
                "surface",
                "quartic",
                "polynomial",
                "lanczos",
                "kummer"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Kummer Quartic Surface\n//\n// Controls:\n// <mouse>: change view direction\n// <up>,<down>: zoom in/out\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Lighting\nvec3 light = vec3(1,1,-1);\nfloat ambient = 0.4;\nfloat diffuse = 0.6;\nfloat specular = 0.8;\nfloat specularpow = 10.0;\nvec3 specularcolor = vec3(1);\n\n// The Kahan cubic algorithm, for explanation see:\n// https://people.eecs.berkeley.edu/~wkahan/Math128/Cubic.pdf\n\nfloat sgn(float x) {\n  return x < 0.0? -1.0: 1.0; // Return 1 for x == 0\n}\n\nint quadratic(float A, float B, float C, out vec2 res) {\n  float x1,x2;\n  float b = -0.5*B;\n  float q = b*b - A*C;\n  if (q < 0.0) return 0;\n  float r = b + sgn(b)*sqrt(q);\n  if (r == 0.0) {\n    x1 = C/A; x2 = -x1;\n  } else {\n    x1 = C/r; x2 = r/A;\n  }\n  res = vec2(x1,x2);\n  return 2;\n}\n\n// Evaluate cubic and derivative.\nvoid eval(float X, float A, float B, float C, float D,\n          out float Q, out float Q1, out float B1,out float C2) {\n  float q0 = A*X;\n  B1 = q0+B;\n  C2 = B1*X+C;\n  Q1 = (q0+B1)*X + C2;\n  Q = C2*X + D;\n}\n\n// Solve: Ax^3 + Bx^2 + Cx + D == 0\n// Find one real root, then reduce to quadratic.\nint cubic(float A, float B, float C, float D, out vec3 res) {\n  float X,b1,c2;\n  if (A == 0.0) {\n    X = 1e8; A = B; b1 = C; c2 = D;\n  } else if (D == 0.0) {\n    X = 0.0; b1 = B; c2 = C;\n  } else {\n    X = -(B/A)/3.0;\n    float t,r,s,q,dq,x0;\n    eval(X,A,B,C,D,q,dq,b1,c2);\n    t = q/A; r = pow(abs(t),1.0/3.0); s = sgn(t);\n    t = -dq/A; if (t > 0.0) r = 1.324718*max(r,sqrt(t));\n    x0 = X - s*r;\n    if (x0 != X) {\n      X = x0;\n      for (int i = 0; i < 4; i++) {\n        eval(X,A,B,C,D,q,dq,b1,c2);\n        if (dq == 0.0) break;\n        X -= (q/dq);\n      }\n      if (abs(A)*X*X > abs(D/X)) {\n        c2 = -D/X; b1 = (c2 - C)/X;\n      }\n    }\n  }\n  res.x = X;\n  return 1 + quadratic(A,b1,c2,res.yz);\n}\n\n// The Lanczos method from \"Applied Analysis\"\nint quartic(vec4 coeffs, out vec4 res) {\n  float c1 = coeffs[0], c2 = coeffs[1];\n  float c3 = coeffs[2], c4 = coeffs[3];\n  float alpha = 0.5*c1;\n  float A = c2-alpha*alpha;\n  float B = c3-alpha*A;\n  float a,b,beta,psi;\n  int n = cubic(1.0, 2.0*A-alpha*alpha, A*A+2.0*B*alpha-4.0*c4, -B*B, res.xyz);\n  psi = res[0];\n  if (n > 1) psi = max(psi,res[1]);\n  if (n > 2) psi = max(psi,res[2]);\n  psi = max(0.0,psi);\n  a = sqrt(psi);\n  beta = 0.5*(A + psi);\n  if (psi == 0.0) {\n    b = sqrt(max(beta*beta-c4,0.0));\n  } else {\n    b = 0.5*a*(alpha-B/psi);\n  }\n  int n0 = quadratic(1.0,alpha+a,beta+b,res.xy);\n  int n1 = quadratic(1.0,alpha-a,beta-b,res.wz);\n  if (n0 == 0) res.xy = res.wz;\n  return n0+n1;\n}\n\nint quartic(float A, float B, float C, float D, float E, out vec4 roots) {\n  // There may be a better heuristic for this.\n  // but this avoids the worst glitches.\n  bool flip = abs(B/A) > abs(D/E);\n  vec4 coeffs = !flip ? vec4(B,C,D,E)/A : vec4(D,C,B,A)/E;\n  int nroots = quartic(coeffs,roots);\n  if (flip) {\n    for (int i = 0; i < nroots; i++) {\n      roots[i] = 1.0/roots[i];\n    }\n  }\n  return nroots;\n}\n\nfloat kummerparam = 0.0;\n\nvec3 kummernormal(vec3 p) {\n  float A = kummerparam;\n  float B = (3.0*A-1.0)/(3.0-A);\n  float x = p.x, y = p.y, z = p.z;\n  float x2 = x*x, y2 = y*y, z2 = z*z;\n  // -4*(2*y^2 - (z + 1)^2)*B*x + 4*(x^2 + y^2 + z^2 - A)*x\n  // -4*(2*x^2 - (z - 1)^2)*B*y + 4*(x^2 + y^2 + z^2 - A)*y\n  // 2*(2*x^2 - (z - 1)^2)*B*(z + 1) + 2*(2*y^2 - (z + 1)^2)*B*(z - 1) + 4*(x^2 + y^2 + z^2 - A)*z\n  float dx = -4.0*(2.0*y2 - (z + 1.0)*(z + 1.0))*B*x + 4.0*(x2 + y2 + z2 - A)*x;\n  float dy = -4.0*(2.0*x2 - (z - 1.0)*(z - 1.0))*B*y + 4.0*(x2 + y2 + z2 - A)*y;\n  float dz =  2.0*(2.0*x2 - (z - 1.0)*(z - 1.0))*B*(z + 1.0) +\n              2.0*(2.0*y2 - (z + 1.0)*(z + 1.0))*B*(z - 1.0) +\n              4.0*(x2 + y2 + z2 - A)*z;\n  return vec3(dx,dy,dz);\n}\n  \nint kummersurface(vec3 p, vec3 r, out vec4 roots) {\n    float a= kummerparam;\n    float b = (3.0*a-1.0)/(3.0-a);\n    float x0 = p.x, y0 = p.y, z0 = p.z;\n    float x1 = r.x, y1 = r.y, z1 = r.z;\n    float x02 = x0*x0, x03 = x02*x0, x04 = x02*x02, y02 = y0*y0, y03 = y02*y0, y04 = y02*y02, z02 = z0*z0, z03 = z02*z0, z04 = z02*z02;\n    float x12 = x1*x1, x13 = x12*x1, x14 = x12*x12, y12 = y1*y1, y13 = y12*y1, y14 = y12*y12, z12 = z1*z1, z13 = z12*z1, z14 = z12*z12;\n    // Quartic coefficients computed by sagemath.\n    // -4*B*x0^2*y0^2 + 2*B*x0^2*z0^2 + 2*B*y0^2*z0^2 - B*z0^4 + x0^4 + 2*x0^2*y0^2 + y0^4 + 4*B*x0^2*z0 - 4*B*y0^2*z0 + 2*x0^2*z0^2 + 2*y0^2*z0^2 + z0^4 - 2*A*x0^2 + 2*B*x0^2 - 2*A*y0^2 + 2*B*y0^2 - 2*A*z0^2 + 2*B*z0^2 + A^2 - B\n    // -8*B*x0*x1*y0^2 - 8*B*x0^2*y0*y1 + 4*B*x0*x1*z0^2 + 4*B*y0*y1*z0^2 + 4*B*x0^2*z0*z1 + 4*B*y0^2*z0*z1 - 4*B*z0^3*z1 + 4*x0^3*x1 + 4*x0*x1*y0^2 + 4*x0^2*y0*y1 + 4*y0^3*y1 + 8*B*x0*x1*z0 - 8*B*y0*y1*z0 + 4*x0*x1*z0^2 + 4*y0*y1*z0^2 + 4*B*x0^2*z1 - 4*B*y0^2*z1 + 4*x0^2*z0*z1 + 4*y0^2*z0*z1 + 4*z0^3*z1 - 4*A*x0*x1 + 4*B*x0*x1 - 4*A*y0*y1 + 4*B*y0*y1 - 4*A*z0*z1 + 4*B*z0*z1\n    // -4*B*x1^2*y0^2 - 16*B*x0*x1*y0*y1 - 4*B*x0^2*y1^2 + 2*B*x1^2*z0^2 + 2*B*y1^2*z0^2 + 8*B*x0*x1*z0*z1 + 8*B*y0*y1*z0*z1 + 2*B*x0^2*z1^2 + 2*B*y0^2*z1^2 - 6*B*z0^2*z1^2 + 6*x0^2*x1^2 + 2*x1^2*y0^2 + 8*x0*x1*y0*y1 + 2*x0^2*y1^2 + 6*y0^2*y1^2 + 4*B*x1^2*z0 - 4*B*y1^2*z0 + 2*x1^2*z0^2 + 2*y1^2*z0^2 + 8*B*x0*x1*z1 - 8*B*y0*y1*z1 + 8*x0*x1*z0*z1 + 8*y0*y1*z0*z1 + 2*x0^2*z1^2 + 2*y0^2*z1^2 + 6*z0^2*z1^2 - 2*A*x1^2 + 2*B*x1^2 - 2*A*y1^2 + 2*B*y1^2 - 2*A*z1^2 + 2*B*z1^2\n    // -8*B*x1^2*y0*y1 - 8*B*x0*x1*y1^2 + 4*B*x1^2*z0*z1 + 4*B*y1^2*z0*z1 + 4*B*x0*x1*z1^2 + 4*B*y0*y1*z1^2 - 4*B*z0*z1^3 + 4*x0*x1^3 + 4*x1^2*y0*y1 + 4*x0*x1*y1^2 + 4*y0*y1^3 + 4*B*x1^2*z1 - 4*B*y1^2*z1 + 4*x1^2*z0*z1 + 4*y1^2*z0*z1 + 4*x0*x1*z1^2 + 4*y0*y1*z1^2 + 4*z0*z1^3\n    // -4*B*x1^2*y1^2 + 2*B*x1^2*z1^2 + 2*B*y1^2*z1^2 - B*z1^4 + x1^4 + 2*x1^2*y1^2 + y1^4 + 2*x1^2*z1^2 + 2*y1^2*z1^2 + z1^4\n\n    float A = -4.0*b*x12*y12 + 2.0*b*x12*z12 + 2.0*b*y12*z12 - b*z14 + x14 + 2.0*x12*y12 + y14 + 2.0*x12*z12 + 2.0*y12*z12 + z14;\n    float B = -8.0*b*x12*y0*y1 - 8.0*b*x0*x1*y12 + 4.0*b*x12*z0*z1 + 4.0*b*y12*z0*z1 + 4.0*b*x0*x1*z12 + 4.0*b*y0*y1*z12 - 4.0*b*z0*z13 + 4.0*x0*x13 + 4.0*x12*y0*y1 + 4.0*x0*x1*y12 + 4.0*y0*y13 + 4.0*b*x12*z1 - 4.0*b*y12*z1 + 4.0*x12*z0*z1 + 4.0*y12*z0*z1 + 4.0*x0*x1*z12 + 4.0*y0*y1*z12 + 4.0*z0*z13;\n    float C = -4.0*b*x12*y02 - 16.0*b*x0*x1*y0*y1 - 4.0*b*x02*y12 + 2.0*b*x12*z02 + 2.0*b*y12*z02 + 8.0*b*x0*x1*z0*z1 + 8.0*b*y0*y1*z0*z1 + 2.0*b*x02*z12 + 2.0*b*y02*z12 - 6.0*b*z02*z12 + 6.0*x02*x12 + 2.0*x12*y02 + 8.0*x0*x1*y0*y1 + 2.0*x02*y12 + 6.0*y02*y12 + 4.0*b*x12*z0 - 4.0*b*y12*z0 + 2.0*x12*z02 + 2.0*y12*z02 + 8.0*b*x0*x1*z1 - 8.0*b*y0*y1*z1 + 8.0*x0*x1*z0*z1 + 8.0*y0*y1*z0*z1 + 2.0*x02*z12 + 2.0*y02*z12 + 6.0*z02*z12 - 2.0*a*x12 + 2.0*b*x12 - 2.0*a*y12 + 2.0*b*y12 - 2.0*a*z12 + 2.0*b*z12;\n    float D = -8.0*b*x0*x1*y02 - 8.0*b*x02*y0*y1 + 4.0*b*x0*x1*z02 + 4.0*b*y0*y1*z02 + 4.0*b*x02*z0*z1 + 4.0*b*y02*z0*z1 - 4.0*b*z03*z1 + 4.0*x03*x1 + 4.0*x0*x1*y02 + 4.0*x02*y0*y1 + 4.0*y03*y1 + 8.0*b*x0*x1*z0 - 8.0*b*y0*y1*z0 + 4.0*x0*x1*z02 + 4.0*y0*y1*z02 + 4.0*b*x02*z1 - 4.0*b*y02*z1 + 4.0*x02*z0*z1 + 4.0*y02*z0*z1 + 4.0*z03*z1 - 4.0*a*x0*x1 + 4.0*b*x0*x1 - 4.0*a*y0*y1 + 4.0*b*y0*y1 - 4.0*a*z0*z1 + 4.0*b*z0*z1;\n    float E = -4.0*b*x02*y02 + 2.0*b*x02*z02 + 2.0*b*y02*z02 - b*z04 + x04 + 2.0*x02*y02 + y04 + 4.0*b*x02*z0 - 4.0*b*y02*z0 + 2.0*x02*z02 + 2.0*y02*z02 + z04 - 2.0*a*x02 + 2.0*b*x02 - 2.0*a*y02 + 2.0*b*y02 - 2.0*a*z02 + 2.0*b*z02 + a*a - b;\n\n    return quartic(A,B,C,D,E,roots);\n}\n\nvec3 applylighting(vec3 baseColor, vec3 p, vec3 n, vec3 r) {\n  if (dot(r,n) > 0.0) n = -n; // Face forwards\n  vec3 c = baseColor*ambient;\n  c += baseColor*diffuse*(max(0.0,dot(light,n)));\n  float s = pow(max(0.0,dot(reflect(light,n),r)),specularpow);\n  c += specular*s*baseColor;\n  return c;\n}\n\nfloat gridline(vec3 p) {\n  // Draw some gridlines on surface\n  vec3 t = fract(p*4.0);\n  t = min(t,1.0-t);\n  float d = min(t.x,min(t.y,t.z));\n  return smoothstep(0.02,0.025,d);\n}\n\nint dosurface(vec3 p0, vec3 r, out vec4 roots) {\n  return kummersurface(p0,r,roots);\n}\n  \nvec3 donormal(vec3 p) {\n  return kummernormal(p);\n}\n  \nint solve(vec3 p0, vec3 r, float tmin, out vec4 roots) {\n  int nroots = dosurface(p0,r,roots);\n  // Sort the roots\n  if (nroots > 1) {\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  if (nroots > 2) {\n    if (roots.z < roots.y) roots.yz = roots.zy;\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  if (nroots > 3) {\n    if (roots.w < roots.z) roots.zw = roots.wz;\n    if (roots.z < roots.y) roots.yz = roots.zy;\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  return nroots;\n}\n\nvec3 scene(vec3 p, vec3 r) {\n  // Solve from closest point to origin.\n  // This make p.r = 0.\n  float tmin = -dot(p,r);\n  p += tmin*r;\n  vec4 roots;\n  vec3 color = vec3(0);\n  int nroots = solve(p,r,-tmin,roots);\n  for (int i = nroots-1; i >= 0; i--) {\n    float t = roots[i];\n    if (t < -tmin) break;\n    vec3 q = p+t*r;\n    vec3 n = donormal(q);\n    if (dot(n,r) > 0.0) n = -n;\n    n = normalize(n);\n    vec3 basecolor = pow(abs(n),vec3(2.0));\n    if (key(CHAR_G)) basecolor *= gridline(q);\n    vec3 c = applylighting(basecolor,q,n,r);\n    float dist = t + tmin;\n    float fog = 1.0-smoothstep(0.0,100.0,dist);\n    c *= fog;\n    color = mix(color,c,0.5);\n  }\n  return color;\n}\n\n// GUI related code starts here\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (true) {\n    float t = iTime + 3.5;\n    p.yz = rotate(p.yz, 0.1*t);\n    p.zx = rotate(p.zx, 0.111*t);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float scale = 1.0;\n  float camera = 1.0;\n  \n  vec2 uv = scale*(2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  vec3 p = vec3(0.0, 0.0, -2.0);\n  p *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  vec3 r = normalize(vec3(uv, 2.0));\n\n  p = transform(p);\n  r = transform(r);\n  light = transform(light);\n  r = normalize(r);\n  light = normalize(light);\n\n  // On Intel, cos can return > 1.\n  kummerparam = 0.3333 + max(0.0,3.0*(1.0-cos(0.1*iTime)));\n\n  vec3 color = scene(p,r);\n  if (alert) color.x = 1.0;\n  fragColor = vec4(sqrt(color),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n    }  \n    if (j == 0) {\n        float w1 = keystate(i,0).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            if (w1 != 0.0) t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// PARAMS\nconst float PI =  3.141592654;\n\n// Debug\nbool alert = false;\n\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\nbool eq(float x, float y) {\n  return abs(x-y) < 1e-4;\n}\n\nbool eq(vec4 p, vec4 q) {\n  return eq(p.x,q.x) && eq(p.y,q.y) && eq(p.z,q.z) && eq(p.w,q.w);\n}\n\nbool eq(mat4 m, mat4 n) {\n  return eq(m[0],n[0]) && eq(m[1],n[1]) && eq(m[2],n[2]) && eq(m[3],n[3]);\n}\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\nconst int CHAR_G = 71;\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(t) + vec2(p.y, -p.x) * sin(t);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}