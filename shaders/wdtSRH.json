{
    "Shader": {
        "info": {
            "date": "1571484520",
            "description": "let follows the trajectory of N*N balls starting from the same location.\nContinuous front variant.\n\nNB:  try vec2(iMouse.xy/R)  instead of vec2(.5)\n        try dashed variant",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtSRH",
            "likes": 6,
            "name": "probabilist rect. billiard  2",
            "published": 3,
            "tags": [
                "simulation",
                "random",
                "billiard"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/wstXz8\n\n/* // code golfed version: 263 chars ( from 412)\n\n#define mainImage(O,u)                                            \\\n    vec2  R = iResolution.xy,                                     \\\n          U = u / R.y,                                            \\\n          S = 2.* R / R.y, P, _P, A,B;                            \\\n    float l = 1e9, h, a=0.;                                       \\\n    for ( ; a <= 6.29; a += .01461 )                              \\\n        _P = P,                                                   \\\n        P = .5 + iTime * cos(a+vec2(0,11)),                       \\\n        P = min( P = mod( P, S), S-P ),                           \\\n        h = clamp(dot(A= U-_P, B= P-_P) / dot(B,B), 0., 1.),      \\\n        a>0. ? l = min( l, dot(A -= B*h , A ) ) :l;               \\\n    O += 1.-R.y/2.*sqrt(l)  /*\n*/\n\n\n#define N 430. // 17*17 = 289\n\nfloat line(vec2 p, vec2 a,vec2 b) { // segment with disc ends: seamless distance to segment\n\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    p -= b * h;\n    return dot(p,p);                                  // distÂ² to segment\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, \n          U = u / R.y,\n          S = R / R.y, P, _P;\n    \n    float t = (R.y<250.) ? iTime - 9. : iTime, s=0.,\n        l = 1e9;\n    \n    for ( float a = 0.; a <= 6.284; a += 6.283/N, s=1.-s ) {\n        _P = P;\n        P = vec2(.5) + t * vec2(cos(a),sin(a));  // all directions around start position\n        P = mod( P/S, 2.); P = min( P, 2.-P )*S; // wrap virtual P(t) in recursive border \"mirrors\"\n\n      //l = min(l, dot(P-=U,P));                 // min distance to point\n        if (a>0.) l = min(l, line(U,_P,P));      // min distance to line between points\n      //if (s>0.) l = min(l, line(U,_P,P));      // dashed variant\n    }\n    \n    O = vec4( smoothstep( 2./R.y,0., sqrt(l) )); // draw dot or line\n}\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}