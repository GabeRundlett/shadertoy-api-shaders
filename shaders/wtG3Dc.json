{
    "Shader": {
        "info": {
            "date": "1580063781",
            "description": "A polymorphic polyhedron.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtG3Dc",
            "likes": 6,
            "name": "Polymorphic Polyhedron",
            "published": 3,
            "tags": [
                "polyhedron",
                "polymorphic"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))*GR/2.0/PI+GR/PI)*iTime+100.0)\n#define saw(x) (acos(cos(x))/PI)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n#define carpet_floor(x) (floor(x)+smoothstep(.9, 1.,(fract(x))))\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\nconst float fov = 50.0;\n\n// epsilon-type values\nconst float S = 0.01;\n\n// const delta vectors for normal calculation\nconst vec3 deltax = vec3(S ,0, 0);\nconst vec3 deltay = vec3(0 ,S, 0);\nconst vec3 deltaz = vec3(0 ,0, S);\n\nfloat distanceToNearestSurface(vec3 p){\n        \n    float d = 1E32;\n\n \tconst float outerCount = 2.0;\n \tconst float innerCount = 2.0;\n        \n    float map = 0.0;\n    float sum = 0.0;\n    \n    float min_scale = 1./GR;\n    float max_scale = 1.;\n    float scale_steps = 1.;\n    float scalar = 1./PI/GR;\n    for(float i = 0.0; i < outerCount; i+=1.0)\n    {\n        \n        float theta1 = i/outerCount*PI;\n        \n        for(float j = 0.0; j < innerCount; j+=1.0)\n        {\n            \n            float theta2 = j/innerCount*PI;\n\n            \n            float omega1 = theta1+time;\n            float omega2 = theta2+time*sign(cos(i*PI));\n            \n            /*\n       \t \tvec3 p1 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2))*scalar;\n                           \n            omega2 += PI/outerCount*2.;\n       \t \tvec3 p2 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2))*scalar;\n            \n            omega2 -= PI/outerCount*2.;\n            omega1 += PI/outerCount*2.;\n       \t \tvec3 p3 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2))*scalar;\n            d = min(d, (sdCapsule(p, p1, p2, .05)));\n            d = min(d, (sdCapsule(p, p1, p3, .05)));\n            */\n            /*\n       \t \tvec3 p1 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2))*scalar;\n\t\t\t*/\n       \t \tvec3 p3 = vec3(cos(omega1)*sin(omega2),\n                           sin(omega1)*sin(omega2),\n                           cos(omega2))*scalar;\n            p = rotatePoint(p, vec3(1.,0.,0.), omega1);\n            p = rotatePoint(p, vec3(0.,0.,1.), omega2);;\n            \n            d = min(d, (sdOctahedron((p)-vec3(0.), .15)));\n        }\n    }\n    return d;\n}\n\n\n// better normal implementation with half the sample points\n// used in the blog post method\nvec3 computeSurfaceNormal(vec3 p){\n    float d = distanceToNearestSurface(p);\n    return normalize(vec3(\n        distanceToNearestSurface(p+deltax)-d,\n        distanceToNearestSurface(p+deltay)-d,\n        distanceToNearestSurface(p+deltaz)-d\n    ));\n}\n\n\n\nvec4 intersectWithWorld(vec3 p, vec3 dir){\n    float dist = 0.0;\n    float nearest = 0.0;\n    for(int i = 0; i < 24; i++){\n        nearest = distanceToNearestSurface(p + dir*dist);\n        dist += nearest;\n    }\n    return vec4(computeSurfaceNormal(p+dir*dist), dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 cameraPosition = vec3(sin(iTime), 0.0, cos(iTime));\n\tvec3 cameraDirection = vec3(-1.0*sin(iTime), 0.0, -1.0*cos(iTime));\n\tvec3 cameraUp = vec3(0.0, 1.0, 0.0);\n  \n    // generate the ray for this pixel\n    const float fovx = PI * fov / 360.0;\n    float fovy = fovx * iResolution.y/iResolution.x;\n    float ulen = tan(fovx);\n    float vlen = tan(fovy);\n    \n    vec2 camUV = uv*2.0 - vec2(1.0, 1.0);\n    vec3 nright = normalize(cross(cameraUp, cameraDirection));\n    vec3 pixel = cameraPosition + cameraDirection + nright*camUV.x*ulen + cameraUp*camUV.y*vlen;\n    vec3 rayDirection = normalize(pixel - cameraPosition);\n    \n    vec4 sum = intersectWithWorld(cameraPosition, rayDirection);\n    fragColor = vec4((flux(sum.w*PI*12.)+sum.xyz)/sum.w, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}