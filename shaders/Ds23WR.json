{
    "Shader": {
        "info": {
            "date": "1667467708",
            "description": "A simple water shader.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds23WR",
            "likes": 7,
            "name": "Fork Water elevations 702",
            "published": 3,
            "tags": [
                "2d",
                "water"
            ],
            "usePreview": 0,
            "username": "elevations01",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "// A simple water shader. (c) Ajarus, viktor@ajarus.com.\n//\n// Attribution-ShareAlike CC License.\n\nconst float PI = 3.1415926535897932;\n\n// play with these parameters to custimize the effect\n// ==================================================\n\n//speed\nconst float speed = 0.2;\nconst float speed_x = 0.3;\nconst float speed_y = 0.3;\n\n// refraction\nconst float emboss = 0.50;\nconst float intensity = 2.4;\nconst int steps = 8;\nconst float frequency = 6.0;\nconst int angle = 7; // better when a prime\n\n// reflection\nconst float delta = 60.;\nconst float gain = 700.;\nconst float reflectionCutOff = 0.012;\nconst float reflectionIntensity = 200000.;\n\n// ===================================================\n\n\n  float col(vec2 coord,float time)\n  {\n    float delta_theta = 2.0 * PI / float(angle);\n    float col = 0.0;\n    float theta = 0.0;\n    for (int i = 0; i < steps; i++)\n    {\n      vec2 adjc = coord;\n      theta = delta_theta*float(i);\n      adjc.x += cos(theta)*time*speed + time * speed_x;\n      adjc.y -= sin(theta)*time*speed - time * speed_y;\n      col = col + cos( (adjc.x*cos(theta) - adjc.y*sin(theta))*frequency)*intensity;\n    }\n\n    return cos(col);\n  }\n\n//---------- main\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*1.3;\n\nvec2 p = (fragCoord.xy) / iResolution.xy, c1 = p, c2 = p;\nfloat cc1 = col(c1,time);\n\nc2.x += iResolution.x/delta;\nfloat dx = emboss*(cc1-col(c2,time))/delta;\n\nc2.x = p.x;\nc2.y += iResolution.y/delta;\nfloat dy = emboss*(cc1-col(c2,time))/delta;\n\nc1.x += dx*2.;\nc1.y = -(c1.y+dy*2.);\n\nfloat alpha = 1.+dot(dx,dy)*gain;\n\t\nfloat ddx = dx - reflectionCutOff;\nfloat ddy = dy - reflectionCutOff;\nif (ddx > 0. && ddy > 0.)\n\talpha = pow(alpha, ddx*ddy*reflectionIntensity);\n\t\nvec4 col = texture(iChannel0,c1)*(alpha);\nfragColor = col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}