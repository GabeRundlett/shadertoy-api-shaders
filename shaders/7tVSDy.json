{
    "Shader": {
        "info": {
            "date": "1641318927",
            "description": "the distance field moves in time as well. The step size is reduced in half to help any temporal anomalies (where v > dS). I attempted adding doppler shifting but I don't know how to make it shift down as well as up. Help appreciated. Mouse: move and pause",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVSDy",
            "likes": 5,
            "name": "Speed of Light: 10m/s",
            "published": 3,
            "tags": [
                "raymarching",
                "light",
                "c"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "// \"ShaderToy Tutorial - Ray Marching Operators 2\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the starting point for a YouTube tutorial:\n// https://youtu.be/Vmb7VGBVZJA\n\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define C 10.\n#define BOXSPEED 5.\n\n#define PI 3.14159\n\nvec4 GetDist(vec3 p, float t) {\n    float plane = p.y;\n    \n    // d(cos(t)*10)/dt\n    vec3 v = vec3(-sin(t)*BOXSPEED, 0, 0);\n    float box = sdBox(p-vec3(cos(t)*BOXSPEED, 1, -3), vec3(1));\n    \n    float rotationalSpeed = 0.7;\n    float rotational = rotationalSpeed * t * PI * 2.;\n    vec3 rbp = p-vec3(0,1,0);\n         rbp.xz *= Rot(rotational);\n    float rotatingBox = sdBox(rbp, vec3(1));\n    \n    float speedBoxSpeed = C * 0.99;\n    float speedBox = sdBox(p - vec3(C * 10. - speedBoxSpeed * t, 3, -5), vec3(1));\n   \n    //The plane is not moving\n    if(plane < box) v = vec3(0);\n    \n    //The rotating box is only moving rotationally, so we calculate it by revs * r\n    if(rotatingBox < plane && rotatingBox < box) { float _ = rotationalSpeed * 1.;\n                            v = vec3(sin(rotational) * _, 0, cos(rotational) * _); }\n                            \n    if(speedBox < rotatingBox) vec3(speedBoxSpeed, 0., 0.);\n                            \n    float d = min(plane, box);\n          d = min(d, rotatingBox);\n          d = min(d, speedBox);\n    return vec4(d, v);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float t) {\n\tfloat dO = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p, t).x / 2.;\n        dO += dS;\n        if(iMouse.z < .5) t -= dS / C;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return vec2(dO, t);\n}\n\nvec3 GetNormal(vec3 p, float t) {\n\tfloat d = GetDist(p, t).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy, t).x,\n        GetDist(p-e.yxy, t).x,\n        GetDist(p-e.yyx, t).x);\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p, float t) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p, t);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l, t).x;\n   // if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 light(float l) {\n    vec3 i = vec3(0);\n    for(float w=400.;w<800.;w+=400./1.) {\n        i += spectral_zucconi(w * l);\n    }\n    return i / 20.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0., 4, -5);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 v = vec3(cos(iTime), 0., 0.);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    vec2 r = RayMarch(ro, rd, iTime);\n    float d = r.x;\n    float t = r.y;\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tfloat dif = GetLight(p, t);\n    \tcol = vec3(dif);\n        \n        vec3 vreal = v - GetDist(p, t).yzw;\n        float v = length(vreal);\n        float l = length(1. / sqrt(1. - ((v * v) / (C * C))));\n        \n        if(iMouse.z > .5) l = 1.;\n        col *= spectral_zucconi(550.*l);\n    }\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat saturate (float x)\n{\n    return min(1.0, max(0.0,x));\n}\nvec3 saturate (vec3 x)\n{\n    return min(vec3(1.,1.,1.), max(vec3(0.,0.,0.),x));\n}\n\n// --- Spectral Zucconi --------------------------------------------\n// By Alan Zucconi\n// Based on GPU Gems: https://developer.nvidia.com/sites/all/modules/custom/gpugems/books/GPUGems/gpugems_ch08.html\n// But with values optimised to match as close as possible the visible spectrum\n// Fits this: https://commons.wikimedia.org/wiki/File:Linear_visible_spectrum.svg\n// With weighter MSE (RGB weights: 0.3, 0.59, 0.11)\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n\tvec3 y = vec3(1.,1.,1.) - x * x;\n\ty = saturate(y-yoffset);\n\treturn y;\n}\nvec3 spectral_zucconi (float w)\n{\n    // w: [400, 700]\n\t// x: [0,   1]\n\tfloat x = saturate((w - 400.0)/ 300.0);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\n\treturn bump3y (\tcs * (x - xs), ys);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}