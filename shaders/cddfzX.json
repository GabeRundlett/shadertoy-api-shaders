{
    "Shader": {
        "info": {
            "date": "1697471194",
            "description": "Chill",
            "flags": 96,
            "hasliked": 0,
            "id": "cddfzX",
            "likes": 23,
            "name": "Chill travel",
            "published": 3,
            "tags": [
                "water",
                "train",
                "travel",
                "chill"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n\n        f = (f -.5)*2.;\n                float of = 1.-abs(f);\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        col += of*texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // Trial to flare with mipmap\n    /*\n    rgb = vec3(0.);\n    float cnt =7.;\n    float acc = 0.;\n    for (float j = 0.; j < cnt; ++j)\n    {\n        float f = sat(j/cnt);\n        f = f*f*f;\n        acc += f;\n      rgb += texture(iChannel1, uv, j).xyz*f;\n    }\n    rgb /= acc;\n    */\n\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 40\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW 1.7\n#define GLOW_OPACITY 1.76\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = .9;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n\n// Thanks IQ !\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\nfloat soundsdf(vec3 p)\n{\n    p.x += .25;\n    float rep = .05;\n    float id = floor((p.x+rep*.5)/rep);\n    p.x = mod(p.x+rep*.5,rep)-rep*.5;\n    float h = texture(iChannel2, vec2(fract(id*.05),0.)).x; \n    float shape = _sqr(p.xy, vec2(.01,pow(h,3.)*.7));\n    shape = max(shape, p.y);\n    return shape;\n}\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    //acc = _min(acc, vec2(length(p)-1., 0.));\n    \n    vec3 pw = p+vec3(-iTime, 0., iTime)*.5;\n    float waterH = \n    (pow(texture(iChannel0, pw.xz*.01+iTime*.005).x, 2.)-.5)*.1\n    +(pow(texture(iChannel0, pw.xz*.02+iTime*.002).x, 4.)-.5)*.05;\n    //waterH *= 1.-sat(length(p.xz)-55.);\n    acc = _min(acc, vec2(-p.y+waterH, 1.));\n    \n    vec3 ptrain = p;\n    ptrain.xz *= r2d(.75);\n    float wall = abs(ptrain.z+.5)-.1;\n    float window = sdRoundBox(ptrain.xy-vec2(0.,-2.5), vec2(1.2, .75), vec4(.25));\n    wall = max(wall, -window);\n    acc = _min(acc, vec2(wall, 2.));\n    \n    float bars = soundsdf(ptrain*.25-vec3(0.,-.43,1.));\n    bars = max(bars, abs(ptrain.z+.5+.095)-.005);\n    bars = max(bars, window+.05);\n    acc = _min(acc, vec2(bars, 3.));\n    \n    p.x += -iTime*.5;\n    p.x *= .25;\n    float mount = \n    p.y*2.+4.5\n    -sin(p.x*.5)\n    -sin(p.x)\n    -sin(p.x*2.3)*.7\n    -sin(p.x*5.)*.2\n    -sin(p.x*3.)*.2\n    -sin(p.x*12.)*.11\n    ;\n    float mountth = abs(ptrain.z-40.5)-.1;\n    mount = max(-mount, mountth);\n    acc = _min(acc, vec2(mount, 2.));\n    //acc = _min(acc, vec2(-p.y-sat(.8-abs(ptrain.z)*.5), 3.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 90.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.y == 3.)\n        {\n            //vec3(.2,1.,1.)\n            accCol += sat(1.+sin(p.y*100.))*.19*vec3(1.000,0.200,0.322)*(1.-sat(res.x/.1));\n            res.x += .02;\n        }\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 rdrenv(vec3 rd)\n{\n    vec3 cols[4];\n    cols[0] = vec3(42, 72, 88);\n    cols[1] = vec3(0, 137, 138);\n    cols[2] = vec3(100, 201, 135);\n    cols[3] = vec3(250, 250, 110);\n    float f = acos(-rd.y)/PI-.41;\n    f = pow(sat(f*10.),2.);\n    float fscale = f*3.;\n    int cur = int(floor(fscale));\n    int next = min(int(floor(fscale))+1,3);\n    return mix(cols[cur]/255., cols[next]/255., fract(fscale));\n}\n\nvec3 rotateCol(vec3 col)\n{\n    vec3 cols[5];\n    cols[0] = col;\n    cols[1] = col.zxy;\n    cols[2] = col.zyx;\n    cols[3] = col.yxz;\n    cols[4] = col.yxz;\n    \n    float f = asin(sin(iTime*.02+4.))/(PI*.5);\n    f = f*.5+.5;\n    float fscale = f*4.;\n    int cur = int(floor(fscale));\n    int next = min(int(floor(fscale))+1,4);\n    return mix(cols[cur], cols[next], fract(fscale));\n\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(.0,-2.5,-3.5);\n    vec3 ta = vec3(0.,-2.3,1.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    float depth = 100.;\n    col = rdrenv(rd);\n    vec3 acc = accCol;\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n\n        col = n*.5+.5;\n        vec3 refl = reflect(rd, n);\n        if (res.z == 2. || res.z == 3.)\n        {\n\n            col = vec3(0.043,0.035,0.102);\n            vec3 surftrain = vec3(1.,0.,0.);\n            surftrain.xz *= r2d(.75);\n            if (sat(abs(dot(surftrain, n))) < 0.9)\n            {\n                col = vec3(0.224,0.212,0.408);\n                refl = normalize(refl + (vec3(rand(), rand(), rand())-.5)*.5);\n                col += .5*pow(rdrenv(refl), vec3(2.));\n            }\n            \n        }\n        if (res.z == 1.)\n        {\n            //col = mix(vec3(0.239,0.071,0.349), vec3(1.000,0.302,0.000), sat((n.z*4.)));\n            col = vec3(0.090,0.106,0.227);\n\n            col += pow(rdrenv(refl), vec3(2.));\n        }\n    }\n    col += acc;\n    col = mix(col, mix(rdrenv(rd), vec3(1.), .3), sat(1.-exp(-depth*0.023)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec2 off = .75*(vec2(rand(), rand())-.5)*2.*1./iResolution.x;\n    vec3 col = rdr(uv+off);\n    \n\n    float t = iTime*1.;\n    float daynight =  mix(1.4,1.7,sat(sin(t*.1+1.)));\n    col *= daynight/(col+1.);\n    col = rotateCol(col);\n\n//col = pow(col, vec3(.4545));\n    if (iFrame != 0)\n        col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .9);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 34917,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/oddlingmusic/forhill-oddling-supernal?si=6f0287cd27224b8b916e8941375f3255&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        \n        f = (f -.5)*2.;\n        float of = 1.-abs(f);\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        col += of*texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}