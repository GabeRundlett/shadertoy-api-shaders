{
    "Shader": {
        "info": {
            "date": "1655392932",
            "description": "To complete the set: the hyperbolic torus. The underlying conic equation used is Au²+Bv²+Cuv = 1, so this one will do oblique ellipses as well. The quartic coefficients get a bit more complex & finding the roots Is harder, so gets flaky here and there.",
            "flags": 48,
            "hasliked": 0,
            "id": "ssyczt",
            "likes": 10,
            "name": "Hyperbolic Torus",
            "published": 3,
            "tags": [
                "torus",
                "quartic",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Hyperbolic Torus\n//\n// <mouse>: change view direction\n// <up/down>: zoom\n// 'a': antialiasing\n// 'e': show oblique ellipsoidal torus \n// 'r': autorotation\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI =  3.141592654;\n\n// Lighting\nvec3 light = vec3(1,1,-1);\nfloat ambient = 0.4;\nfloat diffuse = 0.6;\nfloat specular = 0.8;\nfloat specularpow = 10.0;\nvec3 specularcolor = vec3(1);\n\n\nfloat A = 1.0, B = -1.0, C = 0.0, r = 2.0;\nint ctorus (vec3 p, vec3 dir, out vec4 roots) {\n  float A2 = A*A, B2 = B*B, C2 = C*C;\n  float r2 = r*r, r3 = r*r2, r4 = r2*r2;\n  float x0 = p.x, y0 = p.y, z0 = p.z;\n  float x02 = x0*x0, x03 = x02*x0, x04 = x02*x02;\n  float y02 = y0*y0, y03 = y02*y0, y04 = y02*y02;\n  float z02 = z0*z0, z03 = z02*z0, z04 = z02*z02;\n  float x1 = dir.x, y1 = dir.y, z1 = dir.z;\n  float x12 = x1*x1, x13 = x12*x1, x14 = x12*x12;\n  float y12 = y1*y1, y13 = y12*y1, y14 = y12*y12;\n  float z12 = z1*z1, z13 = z12*z1, z14 = z12*z12;\n  float a = (A2*x14 + 2.0*A2*x12*y12 + A2*y14 + 2.0*A*B*x12*z12 - C2*x12*z12 + 2.0*A*B*y12*z12 - C2*y12*z12 + B2*z14);\n  float b = 2.0*(2.0*A2*x0*x13 + 2.0*A2*x12*y0*y1 + 2.0*A2*x0*x1*y12 + 2.0*A2*y0*y13 + A*C*r*x12*z1 + A*C*r*y12*z1 + 2.0*A*B*x12*z0*z1 - C2*x12*z0*z1 + 2.0*A*B*y12*z0*z1 - C2*y12*z0*z1 + 2.0*A*B*x0*x1*z12 - C2*x0*x1*z12 + 2.0*A*B*y0*y1*z12 - C2*y0*y1*z12 - B*C*r*z13 + 2.0*B2*z0*z13);\n  float c = - (2.0*A2*r2*x12 - 6.0*A2*x02*x12 - 2.0*A2*x12*y02 - 8.0*A2*x0*x1*y0*y1 + 2.0*A2*r2*y12 - 2.0*A2*x02*y12 - 6.0*A2*y02*y12 - 2.0*A*C*r*x12*z0 - 2.0*A*C*r*y12*z0 - 2.0*A*B*x12*z02 + C2*x12*z02 - 2.0*A*B*y12*z02 + C2*y12*z02 - 4.0*A*C*r*x0*x1*z1 - 4.0*A*C*r*y0*y1*z1 - 8.0*A*B*x0*x1*z0*z1 + 4.0*C2*x0*x1*z0*z1 - 8.0*A*B*y0*y1*z0*z1 + 4.0*C2*y0*y1*z0*z1 - 2.0*A*B*r2*z12 - C2*r2*z12 - 2.0*A*B*x02*z12 + C2*x02*z12 - 2.0*A*B*y02*z12 + C2*y02*z12 + 6.0*B*C*r*z0*z12 - 6.0*B2*z02*z12 + 2.0*A*x12 + 2.0*A*y12 + 2.0*B*z12);\n  float d = -2.0*(2.0*A2*r2*x0*x1 - 2.0*A2*x03*x1 - 2.0*A2*x0*x1*y02 + 2.0*A2*r2*y0*y1 - 2.0*A2*x02*y0*y1 - 2.0*A2*y03*y1 - 2.0*A*C*r*x0*x1*z0 - 2.0*A*C*r*y0*y1*z0 - 2.0*A*B*x0*x1*z02 + C2*x0*x1*z02 - 2.0*A*B*y0*y1*z02 + C2*y0*y1*z02 + A*C*r3*z1 - A*C*r*x02*z1 - A*C*r*y02*z1 - 2.0*A*B*r2*z0*z1 - C2*r2*z0*z1 - 2.0*A*B*x02*z0*z1 + C2*x02*z0*z1 - 2.0*A*B*y02*z0*z1 + C2*y02*z0*z1 + 3.0*B*C*r*z02*z1 - 2.0*B2*z03*z1 + 2.0*A*x0*x1 + 2.0*A*y0*y1 - C*r*z1 + 2.0*B*z0*z1);\n  float e = A2*r4 + A2*x04 - 2.0*A2*r2*y02 + 2.0*A2*x02*y02 + A2*y04 - 2.0*A*C*r3*z0 + 2.0*A*C*r*x02*z0 + 2.0*A*C*r*y02*z0 + 2.0*A*B*r2*z02 + C2*r2*z02 + 2.0*A*B*x02*z02 - C2*x02*z02 + 2.0*A*B*y02*z02 - C2*y02*z02 - 2.0*B*C*r*z03 + B2*z04 - 2.0*(A2*r2 + A)*x02 - 2.0*A*y02 + 2.0*C*r*z0 - 2.0*B*z02 - 2.0*A*r2 + 1.0;\n  return quartic(a,b,c,d,e,roots);\n}\n\nvec3 ctorusnormal (vec3 p) {\n  float A2 = A*A, B2 = B*B, C2 = C*C;\n  float r2 = r*r, r3 = r*r2;\n  float x = p.x, y = p.y, z = p.z;\n  float x2 = x*x, x3 = x2*x;\n  float y2 = y*y, y3 = y2*y;\n  float z2 = z*z, z3 = z2*z;\n  float dx = 4.0*A2*x3 + 4.0*A2*x*y2 + 4.0*A*C*r*x*z + 2.0*(2.0*A*B - C2)*x*z2 - 4.0*(A2*r2 + A)*x;\n  float dy = 4.0*A2*y3 + 4.0*A*C*r*y*z + 2.0*(2.0*A*B - C2)*y*z2 - 4.0*(A2*r2 - A2*x2 + A)*y;\n  float dz = -2.0*A*C*r3 + 2.0*A*C*r*x2 + 2.0*A*C*r*y2 - 6.0*B*C*r*z2 + 4.0*B2*z3 + 2.0*C*r + 2.0*((2.0*A*B + C2)*r2 + (2.0*A*B - C2)*x2 + (2.0*A*B - C2)*y2 - 2.0*B)*z;\n  return vec3(dx,dy,dz);\n}\n\nint dosurface(vec3 p0, vec3 r, out vec4 roots) {\n  return ctorus(p0,r,roots);\n}\n  \nvec3 donormal(vec3 p) {\n  return ctorusnormal(p);\n}\n  \nint solve(vec3 p0, vec3 r, out vec4 roots) {\n  int nroots = dosurface(p0,r,roots);\n  // Sort the roots\n  if (nroots >= 2) {\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  if (nroots >= 3) {\n    if (roots.z < roots.y) roots.yz = roots.zy;\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  if (nroots >= 4) {\n    if (roots.w < roots.z) roots.zw = roots.wz;\n    if (roots.z < roots.y) roots.yz = roots.zy;\n    if (roots.y < roots.x) roots.xy = roots.yx;\n  }\n  return nroots;\n}\n\nvec3 applylighting(vec3 baseColor, vec3 p, vec3 n, vec3 r) {\n  if (dot(r,n) > 0.0) n = -n; // Face forwards\n  vec3 c = baseColor*ambient;\n  c += baseColor*diffuse*(max(0.0,dot(light,n)));\n  float s = pow(max(0.0,dot(reflect(light,n),r)),specularpow);\n  c += specular*s*specularcolor;\n  return c;\n}\n\nfloat gridline(vec3 p) {\n  // Draw some gridlines on surface\n  vec3 t = fract(p*4.0);\n  t = min(t,1.0-t);\n  float d = min(t.x,min(t.y,t.z));\n  return smoothstep(0.02,0.025,d);\n}\n\nvec3 scene(vec3 p0, vec3 r) {\n  float time = iTime;\n  float a = 0.3333+ max(0.0,3.0*(1.0-cos(0.1*time)));\n  float b = (3.0*a-1.0)/(3.0-a);\n  vec4 params = vec4(a,b,0,0);\n  vec4 roots;\n  vec3 color = vec3(0);\n  int nroots = solve(p0,r,roots);\n  float rwidth = length(fwidth(r));\n  for (int i = nroots-1; i >= 0; i--) {\n    float t = roots[i];\n    if (t < 0.0) break;\n    vec3 p = p0+t*r;\n    vec3 n = donormal(p);\n    if (dot(n,r) > 0.0) n = -n;\n    n = normalize(n);\n    if (isnan(length(n))) continue;\n    float k = 0.0;\n    k += 0.1*iTime;\n    k += 10.0*p.z;\n    vec3 basecolor = pow(abs(n.bgr),vec3(2.0));\n    basecolor = h2rgb(1.5*atan(p.z*p.z)/PI);\n    float dk = fwidth(k);\n    basecolor = mix(vec3(0),basecolor,smoothstep(0.0,rwidth*t*t/abs(dot(n,r)),abs(k-round(k)) - 0.1));\n    vec3 c = applylighting(basecolor,p,n,r);\n    float fog = 1.0-smoothstep(0.0,200.0,t);\n    c *= fog;\n    color = mix(color,c,0.5);\n  }\n  return color;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    float t = 0.5*iTime;\n    p.yz = rotate(p.yz, 0.1*t);\n    p.zx = rotate(p.zx, 0.222*t);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float scale = 1.0;\n  float camera = 6.0;\n  camera *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  r = 2.0*cos(0.0618*iTime);\n  float t = 0.2*iTime, cost = cos(t), sint = sin(t);\n  if (key(CHAR_E)) { A = 2.0; B = 1.0; }\n  float A1 = A*cost*cost+B*sint*sint;\n  float B1 = A*sint*sint+B*cost*cost;\n  float C1 = 2.0*sint*cost*(A-B);\n  A = A1, B = B1, C = C1;\n\n  vec3 p = vec3(0,0,-camera);\n  p = transform(p);\n  light = transform(light);\n  light = normalize(light);\n  int AA = 1;\n  if (key(CHAR_A)) AA = 2;\n  vec3 color = vec3(0);\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 uv = scale*(2.0*(fragCoord.xy+vec2(i,j)/float(AA)) - iResolution.xy)/iResolution.y;\n      vec3 r = vec3(uv, 2.0);\n      r = transform(r);\n      r = normalize(r);\n      color += scene(p,r);\n    }\n  }\n  color /= float(AA*AA);\n  color /= 1.0+color;\n  color = pow(color,vec3(0.4545));\n  if (alert) color.x = 1.0;\n  fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool alert = false;\n\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_X = 88;\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(t) + vec2(p.y, -p.x) * sin(t);\n}\n\nfloat sgn(float x) {\n  return x < 0.0? -1.0: 1.0; // Return 1 for x == 0\n}\n\nint quadratic(float A, float B, float C, out vec2 res) {\n  float x1,x2;\n  float b = -0.5*B;\n  float q = b*b - A*C;\n  if (q < 0.0) return 0;\n  float r = b + sgn(b)*sqrt(q);\n  if (r == 0.0) {\n    x1 = C/A; x2 = -x1;\n  } else {\n    x1 = C/r; x2 = r/A;\n  }\n  res = vec2(x1,x2);\n  return 2;\n}\n\nint quadratic(vec3 coeffs, out vec2 res) {\n  return quadratic(coeffs[0],coeffs[1],coeffs[2],res);\n}\n  \n// The Kahan algorithm, for explanation see:\n// https://people.eecs.berkeley.edu/~wkahan/Math128/Cubic.pdf\n\nvoid eval(float X, float A, float B, float C, float D,\n          out float Q, out float Q1, out float B1,out float C2) {\n  float q0 = A*X;\n  B1 = q0+B;\n  C2 = B1*X+C;\n  Q1 = (q0+B1)*X + C2;\n  Q = C2*X + D;\n}\n\n// Solve: Ax^3 + Bx^2 + Cx + D == 0\n// Find one real root, then reduce to quadratic.\nint cubic(float A, float B, float C, float D, out vec3 res) {\n  float X,b1,c2;\n  if (A == 0.0) {\n    X = 1e8; A = B; b1 = C; c2 = D;\n  } else if (D == 0.0) {\n    X = 0.0; b1 = B; c2 = C;\n  } else {\n    X = -(B/A)/3.0;\n    float t,r,s,q,dq,x0;\n    eval(X,A,B,C,D,q,dq,b1,c2);\n    t = q/A; r = pow(abs(t),1.0/3.0); s = sgn(t);\n    t = -dq/A; if (t > 0.0) r = 1.324718*max(r,sqrt(t));\n    x0 = X - s*r;\n    if (x0 != X) {\n      X = x0;\n      for (int i = 0; i < 6; i++) {\n        eval(X,A,B,C,D,q,dq,b1,c2);\n        if (dq == 0.0) break;\n        X -= (q/dq);\n      }\n      if (abs(A)*X*X > abs(D/X)) {\n        c2 = -D/X; b1 = (c2 - C)/X;\n      }\n    }\n  }\n  res.x = X;\n  return 1 + quadratic(A,b1,c2,res.yz);\n}\n\n// Special wrapper for cubic function for solving quartic.\n// Find largest real root of x**3 + a*x**2 + b*x + c\nfloat qcubic(float a, float b, float c) {\n  vec3 res;\n  int nroots = cubic(1.0,a,b,c,res);\n  if (nroots == 1) return res.x;\n  else return max(res.x,max(res.y,res.z));\n}\n\nint quartic(vec4 coeffs, out vec4 res) {\n  float c1 = coeffs[0];\n  float c2 = coeffs[1];\n  float c3 = coeffs[2];\n  float c4 = coeffs[3];\n  float alpha = 0.5*c1;\n  float A = c2-alpha*alpha;\n  float B = c3-alpha*A;\n  float a,b,beta,psi;\n  psi = qcubic(2.0*A-alpha*alpha, A*A+2.0*B*alpha-4.0*c4, -B*B);\n  psi = max(0.0,psi);\n  a = sqrt(psi);\n  beta = 0.5*(A + psi);\n  if (psi <= 0.0) {\n    b = sqrt(max(beta*beta-c4,0.0));\n  } else {\n    b = 0.5*a*(alpha-B/psi);\n  }\n  int n0 = quadratic(1.0,alpha+a,beta+b,res.xy);\n  int n1 = quadratic(1.0,alpha-a,beta-b,res.zw); \n  if (n0 == 0) res.xy = res.zw;\n  return n0+n1;\n}\n\nint quartic(float A, float B, float C, float D, float E, out vec4 roots) {\n  int nroots;\n  // It can be advantageous to use the coefficients in the\n  // opposite order, thus solving for the reciprocal.\n  bool flip = abs(A) < 1e-2 && abs(B) < 1e-2;\n  if (abs(B/A) > abs(D/E)) flip = true;\n  vec4 coeffs = flip ? vec4(D,C,B,A)/E : vec4(B,C,D,E)/A;\n  nroots = quartic(coeffs,roots);\n  if (flip) {\n    for (int i = 0; i < nroots; i++) {\n      roots[i] = 1.0/roots[i];\n    }\n  }\n  return nroots;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}