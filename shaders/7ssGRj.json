{
    "Shader": {
        "info": {
            "date": "1616288023",
            "description": "Better grid blending, averaging cell IDs - click mouse for a different zoom blend",
            "flags": 0,
            "hasliked": 0,
            "id": "7ssGRj",
            "likes": 9,
            "name": "GridBlend3",
            "published": 3,
            "tags": [
                "grid",
                "blend",
                "hex",
                "tri"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// more grid blending! (hex + tri grid)\n\nvec4 HexGrid(vec2 uv, out vec2 id)\n{\n    uv *= mat2(1.1547,0.0,-0.5773503,1.0);\n    vec2 f = fract(uv);\n    float triid = 1.0;\n\tif((f.x+f.y) > 1.0)\n    {\n        f = 1.0 - f;\n     \ttriid = -1.0;\n    }\n    vec2 co = step(f.yx,f) * step(1.0-f.x-f.y,max(f.x,f.y));\n    id = floor(uv) + (triid < 0.0 ? 1.0 - co : co);\n    co = (f - co) * triid * mat2(0.866026,0.0,0.5,1.0);    \n    uv = abs(co);\n    id*=inverse(mat2(1.1547,0.0,-0.5773503,1.0)); // optional unskew IDs\n    return vec4(0.5-max(uv.y,abs(dot(vec2(0.866026,0.5),uv))),length(co),co);\n}\n\n// Triangle grid using the skewed, split rectangle method (quicker)\n// this version based on fabrices excellent hexagonal tiling tutorial (I wish I'd found this earlier!!)\n// https://www.shadertoy.com/view/4dKXR3\nvec4 TriGrid(vec2 uv, out vec2 id)\n{\n    float scaler = 0.866026;\n    uv *= mat2(1,-1./1.73, 0,2./1.73)*scaler;\n    vec3 g = vec3(uv,1.-uv.x-uv.y);\n    vec3 _id = floor(g)+0.5;\n    g = fract(g);\n    float lg = length(g);\n    if (lg>1.)\n        g = 1.-g;\n    vec3 g2 = abs(2.*fract(g)-1.);                  // distance to borders\n    vec2 triuv = (g.xy-ceil(1.-g.z)/3.) * mat2(1,.5, 0,1.73/2.);\n    float edge = max(max(g2.x,g2.y),g2.z);\n    id = _id.xy;\n    id*= mat2(1,.5, 0,1.73/2.); // Optional, unskew IDs\n    id.xy += sign(lg-1.)*0.1; // Optional tastefully adjust ID's\n    return vec4(((1.0-edge)*0.43)/scaler,length(triuv),triuv);\n}\n\nfloat hbar(vec2 p, float nline, float t)\n{\n    return 0.5+sin((p.y*nline)+t)*0.5;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= rot(iTime*0.1);\n\n    // dirty grid blending attempt #3\n    vec2 id;\n    vec2 id2;\n    float zoom = 8.0;\n    zoom += sin(t)*2.0;\n    \n    float zoom2 = zoom;\n    if (iMouse.z>0.5)\n        zoom2*=0.5;\n    \n    vec4 h = HexGrid(uv*zoom2, id);\n    vec4 h2 = TriGrid(uv*zoom, id2);\n    h.x = smin(h.x,h2.x,0.215); // blend distance\n    id = mix(id,id2,0.5); // blend IDs\n    vec3 bordercol = vec3(0.9,0.9,0.7);\n    vec3 shapecol = vec3(0.41,0.32,0.15);//vec3(0.25,0.32,0.15);\n    // just do a simple patterned shape tint based on (blended) cell IDs\n    float patternVal = 7.75; // 33.5\n    float cm = 1.0 + pow(abs(sin(length(id)*patternVal + t*0.65)), 4.0);\t// pulse mult\n    cm *= 1.0 + (hbar(h.zw,100.0,t*12.0)*0.1);\t\t\t\t\t// bars mult\n    shapecol *= cm;\n    \n    //bordercol *= 0.75+sin(iTime+length(uv*4.0))*0.25;\n    //bordercol = shapecol*1.5;\n    \n    // Output to screen\n    vec3 finalcol = mix(vec3(0.0),shapecol,smoothstep(0.0, 0.035, h.x-0.035)); // black outline edge\n    float vv = smoothstep(0.0, 0.055, h.x);\n    finalcol = mix(bordercol,finalcol,vv); // white edge\n\n    fragColor = vec4(finalcol,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}