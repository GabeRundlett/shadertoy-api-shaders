{
    "Shader": {
        "info": {
            "date": "1561220055",
            "description": "Testing image warping controlled by a grid of movable points.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlj3DK",
            "likes": 11,
            "name": "Contiguous Image Warping",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "distortion"
            ],
            "usePreview": 0,
            "username": "TimoKinnunen",
            "viewed": 1048
        },
        "renderpass": [
            {
                "code": "// Testing grid-based linear image warping / distortion.\n\n// Based on Faster Voronoi Edge Distance https://www.shadertoy.com/view/llG3zy by tomkh\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// by Tomasz Dobrowolski' 2016\n\n// Based on https://www.shadertoy.com/view/ldl3W8 by Inigo Quilez\n// And his article: https://iquilezles.org/articles/voronoilines\n\n#define ANIMATE\n\n// How far cells can go off center during animation (must be <= .5)\n#define ANIMATE_D .5\n\n// Points cannot be closer than sqrt(EPSILON)\n#define EPSILON .00001\n\nvec2 hash2(vec2 p)\n{\n    #if 0\n       // Dave Hoskin's hash as in https://www.shadertoy.com/view/4djSRW\n       vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n       p3 += dot(p3, p3.yzx+19.19);\n       vec2 o = fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n    #else\n       // Texture-based\n       vec2 o = texture( iChannel0, (p+0.5)/256.0, -100.0 ).xy;\n    #endif\n    #ifdef ANIMATE\n       o = 0.5 + ANIMATE_D*sin( iTime + o*6.2831853 );\n    #endif\n   return o;\n}\nvec2 mg;\nvec2 mo;\nfloat me1;\nfloat me2;\n//---------------------------------------------------------------\n// 5x5 scan in both passes = most accurate\n//---------------------------------------------------------------\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mr;\n\n    float md0 = 80.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2(i,j);\n        vec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md0 )\n        {\n            md0 = d;\n            mr = r;\n            mg = g;\n            mo = o;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    me1 = 80.0;\n    me2 = 80.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(i,j);\n        vec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>EPSILON ) { // skip the same cell\n            float d = dot( 0.5*(mr+r), normalize(r-mr) );\n\t        me2 = min(me2, max(me1, d));\n\t        me1 = min(me1, d);\n        }\n    }\n\n    return vec3( me1, mr );\n}\n\nvec3 plot(vec2 U)\n{\n    mg = vec2(-1);\n    mo = vec2(-1);\n    me1 = 10000.0;\n    me2 = 10000.0;\n    float size = 64.;\n    vec2 p = U/size;\n    vec2 R = iResolution.xy;\n    vec3 c = voronoi( p );\n    // TODO: cleanup here\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    vec2 cn = floor(p)+mg;\n    vec2 cf = mo;\n    vec2 ro = (cn+cf)*size;\n    vec2 pixelOffset = ((cf-0.5)/R*size)*size*0.25;\n\n    pixelOffset = (hash2(-cn)-0.5)*size*(.5+.5*sin(iTime/16.));\n\n    // Distances ...\n    float d = length(c.yz);\n\n    // ... to center\n    float dc1 = clamp(exp2(-d),0.,1.);\n    float dc2 = smoothstep(0.75,1.0,dc1);\n    float dc3 = clamp(4.*dot(c.yz,c.yz),0.,1.);\n    float dc4 = 1.-clamp(1.75*d-0.25,0.,1.);\n    float dc5 = clamp(1.125-1.5*d,0.,1.);\n\n    // ... to edges\n    float de1 = clamp(c.x*2.,0.,1.);\n    float de2 = clamp(c.x*64.-0.0625,0.,1.);\n    float de3 = clamp(c.x*32.-0.0625,0.,1.);\n    float de4 = smoothstep(-0.2*0.1,0.5*0.0625,c.x);\n    float de5 = smoothstep(-0.2*0.4,0.5*0.125 ,c.x);\n    float de6 = smoothstep(-0.2*0.6,0.5*0.25  ,c.x);\n    float de7 = clamp(de2*de3*de4*de5*de6,0.,1.);\n\n    // ... to both\n    float d10 = dc5*de7;\n\n    // ... to corner\n    float df1 = clamp(2.-4.*sqrt(sqrt(me2- me1)),0.,1.);\n    df1 *= df1;df1 *= df1;\n    \n    // Coordinates\n    vec2 poff = ro*1.;\n    vec2 uv0 = (U+mod(poff,21.)-10.)/R;\n    vec2 p1 = p;\n    vec2 uv1 = U/R;\n    vec2 p2 = p1 - 0.5 * (0.5 - uv0);\n    vec2 uv2 = (U+pixelOffset)/R;\n    vec2 p3 = mix(p1,p2,d10);\n    vec2 uv3 = mix(uv1,uv2,de1);\n\n\n    // Colors:\n    vec3 interior = vec3(.2,.8,1.);\n    vec3 border = vec3(.2,.8,.4);\n    vec3 point = vec3(1.,.7,0.);\n    vec3 pattern = c.x*2.*(sin(c.x*120.)*.1+.9)*interior;\n    vec3 london3 = texture(iChannel1, uv3).xyz;\n    \n    vec3 col = london3;\n    \n    if (iMouse.z > 0.) // show grid\n    {\n\t\tvec2 g = abs(fract(p)-.5);\n        col = mix(clamp(col,0.,1.),vec3(.8),smoothstep(.5-1.5/size,.5,max(g.x,g.y)));\n        col = mix(col,point,smoothstep(2.,1.5,distance(U,ro)));\n        col = mix(col,border,vec3(1.-de2));\n\t    col = mix(col,point,vec3(df1));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(plot(fragCoord), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}