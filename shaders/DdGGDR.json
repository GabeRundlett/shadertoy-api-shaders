{
    "Shader": {
        "info": {
            "date": "1678363422",
            "description": "A planet with hot craters. Some random experiment.",
            "flags": 0,
            "hasliked": 0,
            "id": "DdGGDR",
            "likes": 4,
            "name": "Planet with hot craters",
            "published": 3,
            "tags": [
                "planet",
                "hot",
                "craters"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "#define beat (iTime * 4.)\n\nconst float E = 0.001;\nconst float PI = 3.14159265;\n\nfloat diameter = 1.0;\nfloat rotOffset = 0.0;\nfloat scorchedFactor = 1.0;\n\nmat3 rotY(float r){return mat3(cos(r), 0., sin(r), 0., 1., 0., -sin(r), 0., cos(r));}\nmat3 rotX(float r){return mat3(1., 0., 0., 0., cos(r), sin(r), 0., -sin(r), cos(r));}\nmat3 rotZ(float r){return mat3(cos(r), sin(r), 0., -sin(r), cos(r), 0., 0., 0., 1.);}\n\nvec2 sphereUV(vec3 intersectionPoint, float offset) {\n    vec2 uv = vec2(\n        atan(intersectionPoint.z, intersectionPoint.x) / (2.0 * PI) + 0.5 + offset,\n        acos(intersectionPoint.y) / PI\n    );\n    return uv;\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p) - radius;\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nvec2 scene_with_id(vec3 p) {\n\tvec3 q = p;\n\tq.y /= diameter;\n\tvec2 uvs = sphereUV(q, beat/64.000 + rotOffset + 0.000);\n\tvec4 tectonics = texture(iChannel1, mod(uvs, 1.));\n\tfloat dd = 0.0;\n\tfloat bolleke = sphere(p, diameter);\n\tif (bolleke < 0.1 && scorchedFactor > 0.1)\n\t\tbolleke = sphere(p, diameter - smoothstep(0.500, 1.000, tectonics.x) * 0.05 * scorchedFactor); // @tect\n\t\n\tfloat background = sphere(p, -100.0);\n\t\n\tfloat universe = min(bolleke, background);\n\t\n    return vec2(universe, (bolleke < background ? 1.0 : 2.0));\n}\n\nfloat scene(vec3 p) {\n    return scene_with_id(p).x;\n}\n\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + E, p.y, p.z)) - scene(vec3(p.x - E, p.y, p.z)),\n        scene(vec3(p.x, p.y + E, p.z)) - scene(vec3(p.x, p.y - E, p.z)),\n        scene(vec3(p.x, p.y, p.z + E)) - scene(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord/iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.000,0.369,0.722);\n    \n    uv -= 0.5;\n    uv.y /= aspect;\n    \n    vec3 lightColor = vec3(0.985,0.946,0.628);\n    \n    vec3 ro = vec3(0.0, 0.0, -5.);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float dayNight = -beat / 8.0;\n    vec3 ld = vec3(0.5, 0.5, -1.);\n    float t = 0.0;\n    float d = 0.0;\n    float id = 0.0;\n    vec4 c = vec4(0.000,0.067,1.000,1.);\n    bool hit = false;\n    for (int i = 0; i < 128; i++){\n        vec3 p = ro + t * rd;\n        \n        p = rotX(0.5 ) * p;\n        \n        vec2 result = scene_with_id(p);\n        d = result.x;\n        id = result.y;\n        if (abs(d) < E) {\n            // hit\n            hit = true;\n            vec3 n = normal(p);\n            float l = smoothstep(0.0, 1.0, dot(n, ld));\n            \n            p.y /= diameter;\n            \n            vec2 uvs = sphereUV(p, beat/64. + rotOffset);\n            vec2 uvsClouds = sphereUV(p, 0.);\n            \n           \n            if (id == 1.0) {\n            \tc = texture(iChannel0, mod(uvs, 1.)) * l;\n            \t\n            \tvec4 tectonics = texture(iChannel1, mod(uvs, 1.));\n            \t\n            \tvec3 scorched = c.rgb;\n            \t\n            \tvec3 scorchedColor = vec3(0.984,0.486,0.075);\n            \t\n            \tscorched.rgb = mix(c.rgb, scorchedColor, l * smoothstep(0.669, 0.875, tectonics.r));\n\n            \tc.rgb = mix(c.rgb, scorched, scorchedFactor);\n            }\n            \n            \n            break;\n        }\n        t += d * 0.8;\n    }\n        \n    // Output to screen\n    fragColor = c;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}