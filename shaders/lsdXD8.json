{
    "Shader": {
        "info": {
            "date": "1459268313",
            "description": "Visuals inspired by Velocibox (http://store.steampowered.com/app/317710/).\nTunnel distance field inspired by Shane's (https://www.shadertoy.com/view/MlXSWX).\nUpdate: VR added, I cannot be held responsible for any puking that occurs :P",
            "flags": 1,
            "hasliked": 0,
            "id": "lsdXD8",
            "likes": 34,
            "name": "Velocibox",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefields",
                "vr"
            ],
            "usePreview": 0,
            "username": "zackpudil",
            "viewed": 1871
        },
        "renderpass": [
            {
                "code": "float hash(float n) {\n    return fract(sin(n)*4578.543123);\n}\n\nvec2 path(float z) {\n    vec2 a = vec2(0);\n    vec2 b = vec2(2.0*cos(z*.3), 0);\n    \n    if(iTime >= 0.0 && iTime <= 4.0){\n        if(iTime <= 3.0) return a;\n        return mix(a, b, mod(iTime, 1.0));\n    } else return b;\n}\n\nfloat gTime() {\n    float s;\n    if(iTime <= 3.0) {\n        s = 7.0;\n    } else s = 15.;\n    \n    return s*iTime;\n}\n\nfloat len(vec3 p, float l) {\n    p = pow(abs(p), vec3(l));\n    return pow(p.x + p.y + p.z, 1.0/l);\n}\n\nfloat dSegment(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    \n    float h = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    \n    return len(pa - ba*h, 8.0) - r;\n}\n\nfloat dObstacles(vec3 p, float diff) {\n    p.xy -= path(p.z);\n    float c = floor((p.z + diff)/(diff*2.0));\n    float rnd = hash(c);\n    p.z = mod(p.z + diff, diff*2.0) - diff;\n    \n    p.xy = p.yx;\n    float o;\n    if(iTime >= 0.0 && iTime <= 4.0) {\n        if(iTime <= 3.0) o = 4.0;\n        else o = mix(4.0, 0.0, mod(iTime, 1.0));\n    } else o = 0.0;\n    \n    p.y += path(p.z).x - o - (rnd < .5 ? 0. : 2.0);\n    return dSegment(p, vec3(5.5, 1., 0), vec3(-5.5, 1.0, 0), 0.25);   \n}\n\nvec2 opU(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nvec3 boxPos(vec3 p, float diff, float o) {\n    vec3 bp = vec3(0., -1.0, gTime());\n    float c = floor((p.z + diff)/diff*2.0);    \n    float rnd = hash(c);\n    \n    bp.y = 1.8*cos(sin(iTime + o)*3. + iTime + o);\n        \n    return bp;\n}\n\nvec2 map(vec3 p) {\n    // the tunnel distance estimate was taken from Shane's (https://www.shadertoy.com/view/MlXSWX)\n    vec2 tun = abs(p.xy - path(p.z))*vec2(.4, .4);\n    vec2 t = vec2(1. - max(tun.x, tun.y), 0.0);\n    \n    vec3 bp = boxPos(p, 2.5, 0.0);\n    vec3 bp2 = boxPos(p, 2.5, 0.1);\n    bp2.z += 0.5;\n    \n    bp.xy += path(bp.z);\n    bp2.xy += path(bp2.z);\n    \n    vec2 s = vec2(min(len(p - bp2, 1.0) - .3, dSegment(p, bp, bp2, .04)), 1.0);\n    \n    vec2 o = vec2(dObstacles(p, 2.5), 2.0);\n    \n    return opU(t, opU(s, o));\n}\n\nvec2 intersect(vec3 ro, vec3 rd) {\n    float td = 0.;\n    float mid = -1.;\n    float tmax = 50.;\n    \n    for(int i = 0; i < 256; i++) {\n        vec2 s = map(ro + rd*td);\n        td += s.x;\n        mid = s.y;\n        if(abs(s.x) < 0.005 || td >= tmax) break;\n    }\n    \n    if(td >= tmax) mid = -1.;\n    return vec2(td, mid);\n    \n}\n\nvec3 normal(vec3 p) {\n    vec2 h = vec2(0.001, 0.0);\n    vec3 n = vec3(\n        map(p + h.xyy).x - map(p - h.xyy).x,\n        map(p + h.yxy).x - map(p - h.yxy).x,\n        map(p + h.yyx).x - map(p - h.yyx).x\n\t);\n    \n    return normalize(n);\n}\n\n// iq's ambient occlusion.\nfloat ao(vec3 p, vec3 n) {\n    float r = 0.0;\n    float w = 1.0;\n    float d;\n    \n    for(float i = 1.0; i < 6.6; i++) {\n        d = i/6.0;\n        r += w*(d - map(p + n*d).x);\n        w *= .5;\n    }\n    \n    return 1.0 - clamp(r, 0.0, 1.0);\n}\n\nvec3 lighting(vec3 p, vec3 lp, vec3 rd) {\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal(p);\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    return lin*atten*ao(p, n);\n}\n\nmat3 camera(vec3 e, vec3 l) {\n    vec3 rl = vec3(sin(iTime), cos(iTime), 0);\n    vec3 f = normalize(l - e);\n    vec3 r = cross(rl, f);\n    vec3 u = cross(f, r);\n    \n    return mat3(r, u, f);\n}\n\nvec4 render(vec3 ro, vec3 rd) {\n    ro.z += gTime() - 2.0;\n    vec3 la = ro + vec3(0, 0.0, 2.0);\n    \n    rd = camera(ro, la)*rd;\n    \n    vec3 lp1 = ro + vec3(0, 0, 1);\n    vec3 lp2 = ro + vec3(0, 0, 5);\n    \n    la.xy += path(la.z);\n    ro.xy += path(ro.z);\n    \n    vec3 col = vec3(.5);\n    \n    vec2 i = intersect(ro, rd);\n    vec3 p = ro + rd*i.x;\n    \n\tif (i.y == 0.0) { \n        vec2 guv = normal(p).y == 0.0 ? p.zy : p.xz - path(p.z);\n        col = .45 + vec3(1)\n            *smoothstep(-.05, .05,abs(fract(guv.x) - .5)*2.)\n            *smoothstep(-.05, .05, abs(fract(guv.y) - .5)*2.);\n    }\n    if (i.y == 1.0) col = vec3(1, .1, 1)*.5;\n    if (i.y == 2.0) col = vec3(0, .3, 1);\n    \n    if(i.y != -1.0) col *= lighting(p, lp1, rd)+lighting(p, lp2, rd);\n    \n    col = pow(col, vec3(.454545));\n    \n\treturn vec4(col, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy / iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0, 0.0, -2);\n    vec3 rd = normalize(vec3(uv, 2.0));\n    \n    \n\tfragColor = render(ro, rd);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragColor = render(fragRayOri, fragRayDir);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}