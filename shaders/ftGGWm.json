{
    "Shader": {
        "info": {
            "date": "1637771235",
            "description": "Shadertoy implementation of the effect described here: https://www.bidouille.org/prog/plasma",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGGWm",
            "likes": 3,
            "name": "Classic plasma effect",
            "published": 3,
            "tags": [
                "plasma",
                "background",
                "trippy"
            ],
            "usePreview": 0,
            "username": "CenTdemeern1",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "precision mediump float;\n#define PI 3.1415926535897932384626433832795\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //Inputs for this fragment\n    vec2 u_k = vec2(20,20); //\"Zoom\". You may derive this from the resolution if you want\n    float u_time = iTime;\n    vec2 v_coords = fragCoord / iResolution.xy;\n    \n    //Fragment value calculation done by applying the patterns described on the linked webpage\n    float v = 0.0;\n    vec2 c = v_coords * u_k - u_k/2.0;\n    v += sin((c.x+u_time));\n    v += sin((c.y+u_time)/2.0);\n    v += sin((c.x+c.y+u_time)/2.0);\n    c += u_k/2.0 * vec2(sin(u_time/3.0), cos(u_time/2.0));\n    v += sin(sqrt(c.x*c.x+c.y*c.y+1.0)+u_time);\n    v = v/2.0;\n    \n    //Color\n    vec3 col = vec3(1, sin(PI*v), cos(PI*v)); //Color calculation. v is the \"value\" of the current fragment.\n    fragColor = vec4(col*.5 + .5, 1); //Applies the fragment color, also makes the color brighter.\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}