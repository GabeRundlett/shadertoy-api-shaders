{
    "Shader": {
        "info": {
            "date": "1570488259",
            "description": "I'll sell it to you for 10 gold pieces",
            "flags": 0,
            "hasliked": 0,
            "id": "tdG3zy",
            "likes": 7,
            "name": "Shadertober 07 - Enchanted",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "enchanted",
                "backwardscaptain"
            ],
            "usePreview": 0,
            "username": "BackwardsCap",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 40.0\n#define PI 3.1415927\n\nfloat mm;\nvec3 sc;\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 d = abs(p)-b;\n    return length(max(d,0.0));\n}\n\nfloat blade(vec3 p,vec3 d,float c)\n{\n    vec3 sp = p;\n    sp.x-=12.;    \n    return box(sp/d,vec3(8.,.5*clamp(sp.x,-3.,1.)+(c*cos(iTime*3.+p.x*10.)/10.),.1+(1.-(abs(p.y)))/10.));;\n}\n\n\nvec2 map(vec3 p)\n{\n    \n    float m=0.;\n\n    float b = blade(p,vec3(2,1,1),0.);\n    float ss =smoothstep(-1.,4.,b/2.); \n    b-=ss/2.;\n    \n    vec3 hp=p-vec3(28,0,-.2);\n    float h = box(hp,vec3(.1,2,.25-abs(p.y/10.)));\n    h=min(h,box(hp-vec3(1.,0,.2),vec3(2.+abs(p.y),.3+((hp.x-1.)*(hp.x-1.))/30.,.1)));\n    float r = min(h,b);\n    \n    if(r==b)m=1.;\n    else if(r==h)m=2.;\n    \n    return vec2(r,m);\n}\n\nvec2 ray(vec3 ro, vec3 rd)\n{\n    float t =0.0;\n    float m = 0.0;\n    mm=100.0;\n    for(int i=0;i<128;i++)\n    {\n        \n        vec3 p = ro+rd*t;\n        vec2 s = map(p);\n        if(s.x<0.00001)break;\n        m=s.y;\n        t+=s.x;\n        mm=min(blade(p,vec3(1.64,1.*abs(p.x/20.),1.5),1.+p.x/10.)*2.+abs(.3+cos(p.x+iTime))/3.,mm);\n        if(t>MAX_DIST)break;\n    }\n    if(t>MAX_DIST)t=-1.;\n    return vec2(t,m);\n}\n\nvec3 normal(vec3 p)\n{\n    \n    vec2 e = vec2(0.00005,0.);\n    return normalize(vec3(\n        map(p-e.xyy).x-map(p+e.xyy).x,\n        map(p-e.yxy).x-map(p+e.yxy).x,\n        map(p-e.yyx).x-map(p+e.yyx).x\n        ));\n    \n}\n\n\n\nvec3 color(vec3 ro, vec3 rd, vec2 r)\n{\n    vec3 col=sc;\n    if(r.x>0.)\n    {\n        vec3 p = ro+rd*r.x;\n        vec3 mate = sc*vec3(1.5);\n        if(r.y>1.5)mate=vec3(.3);\n        vec3 n = normal(p);\n        vec3 sun = normalize(vec3(0.2,2.2,.2));\n        float dif = clamp(dot(sun,n),0.,1.);\n        \n        col = mate*dif;\n        \n        \n    }\n    return col;\n    \n}\nvec2 u;\nvec3 render(vec3 ro, vec3 rd, vec2 r)\n{\n    \n    vec3 col =vec3(.3);\n    if(mm<3.+r.x/1.5)col=vec3(1.-mm/2.)*sc;\n    if(r.x>0.)col=color(ro,rd,r)*2.;\n    \n    col=pow(col,vec3(2.));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    \n    vec2 uv2 = p*vec2(-1.,1.);\n    uv2-=vec2(2.2,0.);\n    vec2 uv = p-vec2(2.2,0.);\n    vec2 cv = uv2*30.;\n    \n    u = vec2(atan(cv.y,cv.x),length(cv)-iTime);\n    \n    \n    sc = 0.5 + 0.5*cos(-2.*iTime+u.xyx+vec3(0.2,1,1))*cos(u.y+u.x*uv2.y*-10.)+cos(uv2.x-iTime);\n    \n    vec3 ro = vec3(0,0,-20);\n    vec3 ta = vec3(0);\n    vec3 cf = normalize(ta-ro);\n    vec3 cu = normalize(cross(cf,vec3(0,1,0)));\n    vec3 cr = normalize(cross(cf,cu));\n    vec3 rd = normalize(uv.x*cu+uv.y*cr+2.*cf);\n    \n    vec2 r = ray(ro,rd);\n    \n\n    \n    fragColor = vec4(render(ro,rd,r)*(2.-length(p)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}