{
    "Shader": {
        "info": {
            "date": "1577528361",
            "description": "Wallpaper I made for my smartphone. It's battery dependent (mouse.y in shadertoy).\nYou can find a code for Shader Editor in the common tab.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3GDB",
            "likes": 45,
            "name": "Retro Sun #ShaderEditor",
            "published": 3,
            "tags": [
                "sun",
                "retro",
                "wallpaper",
                "shadereditor"
            ],
            "usePreview": 0,
            "username": "jaszunio15",
            "viewed": 2462
        },
        "renderpass": [
            {
                "code": "//Shader License: CC BY 3.0\n//Author: Jan MrÃ³z (jaszunio15)\n\n/*\n\tHow to set this wallpaper on your android:\n\t1. Install Shader Editor.\n\t2. Copy the code from the common tab and paste into the Shader Editor.\n\t3. Tap \"Update Wallpaper\" from Shader Editor menu.\n\t4. Set Shader Editor as a live wallpaper in android settings.\n*/\n\nfloat sun(vec2 uv, float battery)\n{\n \tfloat val = smoothstep(0.3, 0.29, length(uv));\n \tfloat bloom = smoothstep(0.7, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + iTime * 0.2 * (battery + 0.02)) * 100.0) \n\t\t\t\t+ clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);\n    cut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;\n}\n\nfloat grid(vec2 uv, float battery)\n{\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;\n    uv += vec2(0.0, iTime * 4.0 * (battery + 0.05));\n    uv = abs(fract(uv) - 0.5);\n \tvec2 lines = smoothstep(size, vec2(0.0), uv);\n \tlines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4 * battery;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    float battery = 1.0;\n    if (iMouse.x > 1.0 && iMouse.y > 1.0) battery = iMouse.y / iResolution.y;\n    else battery = 0.8;\n    \n    if (abs(uv.x) < (9.0 / 16.0))\n    {\n        float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));\n        vec3 col = vec3(0.0, 0.1, 0.2);\n        if (uv.y < -0.2)\n        {\n            uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);\n            uv.x *= uv.y * 1.0;\n            float gridVal = grid(uv, battery);\n            col = mix(col, vec3(1.0, 0.5, 1.0), gridVal);\n        }\n        else\n        {\n            uv.y -= battery * 1.1 - 0.51;\n            col = vec3(1.0, 0.2, 1.0);\n             float sunVal = sun(uv, battery);\n            col = mix(col, vec3(1.0, 0.4, 0.1), uv.y * 2.0 + 0.2);\n            col = mix(vec3(0.0, 0.0, 0.0), col, sunVal);\n            col += vec3(0.0, 0.1, 0.2);\n        }\n\n        col += fog * fog * fog;\n        col = mix(vec3(col.r, col.r, col.r) * 0.5, col, battery * 0.7);\n\n        fragColor = vec4(col,1.0);\n    }\n    else fragColor = vec4(0.0);\n\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 resolution;\nuniform float battery;\n\nfloat sun(vec2 uv)\n{\n \tfloat val = smoothstep(0.3, 0.29, length(uv));\n \tfloat bloom = smoothstep(0.7, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + time * 0.2 * (battery + 0.02)) * 100.0) \n\t\t\t\t+ clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);\n\tcut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;\n}\n\nfloat grid(vec2 uv)\n{\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;\n    uv += vec2(0.0, time * 4.0 * (battery + 0.05));\n    uv = abs(fract(uv) - 0.5);\n \tvec2 lines = smoothstep(size, vec2(0.0), uv);\n \tlines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4 * battery;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nvoid main(void)\n{\n    vec2 uv = (2.0 * gl_FragCoord.xy - resolution)/resolution.y;\n\n    float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));\n    vec3 col = vec3(0.0, 0.1, 0.2);\n    if (uv.y < -0.2)\n    {\n        uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);\n        uv.x *= uv.y * 1.0;\n        float gridVal = grid(uv);\n    \tcol = mix(col, vec3(1.0, 0.5, 1.0), gridVal);\n    }\n    else\n    {\n        uv.y -= battery * 1.1 - 0.51;\n        col = vec3(1.0, 0.2, 1.0);\n     \t float sunVal = sun(uv);\n        col = mix(col, vec3(1.0, 0.4, 0.1), uv.y * 2.0 + 0.2);\n        col = mix(vec3(0.0, 0.0, 0.0), col, sunVal);\n        col += vec3(0.0, 0.1, 0.2);\n    }\n\n    col += fog * fog * fog;\n    col = mix(vec3(col.r, col.r, col.r) * 0.5, col, battery * 0.7);\n\n    gl_FragColor = vec4(col,1.0);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}