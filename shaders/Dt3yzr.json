{
    "Shader": {
        "info": {
            "date": "1698847287",
            "description": "32 bit uniform randomness that is difficult to distinguish from true random. Source 64 bit version passes big crush randomness tests. This one does not have a big enough period to pass.\n[url=https://www.shadertoy.com/playlist/fX2cWm]PIXEL PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt3yzr",
            "likes": 5,
            "name": "Widynski's \"Squares\" Hash",
            "published": 3,
            "tags": [
                "noise",
                "pixel",
                "random",
                "generator",
                "state",
                "hash",
                "squares",
                "pseudo",
                "entropy",
                "seed",
                "weyl",
                "rng",
                "philox",
                "crush",
                "bernard",
                "widynski"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2023\n/// (Thanks for corrections & discussion everyone!)\n\n\n/*\nSquares rng from Bernard Widynski in 2020 (based on version 6 - Feb 1, 2022).\nNOT cryptographic.\nOriginal 64 bit version passes the big crush tests.\nThis is a 32 bit translation that does not pass.\n*/\nuint hash(uint seed) {\n    uint t, x, y, z, key = 0xc8e42f6du;\n\n    y = x = key * seed; z = y + key;\n    x = x * x + y; x = (x>>16) | (x<<16);\n    x = x * x + z; x = (x>>16) | (x<<16);\n    x = x * x + y; x = (x>>16) | (x<<16);\n    t = x = x * x + z; x = (x>>16) | (x<<16);\n    \n    return t ^ (x * x + y) >> 16;\n}\n\n\n/*\nUniform pseudorandom number generator.\nGPU friendly since it doesn't need the previous random number for the next one.\n*/\nfloat random(float seed) {\n    // maximum unsigned int to normalize float (thanks @spalmer!)\n    return float(hash(floatBitsToUint(seed))) / float(~0u);\n}\n\n\nvoid mainImage(out vec4 pixel, vec2 i) {\n    vec2 uv = ceil(i / 9.) * 9.;    \n    uv.x += iDate.w + float(iFrame);\n    uv.y *= iResolution.x;\n\n    // seed with unique value per coordinate\n    vec3 v = vec3(random(uv.y + uv.x), random(2. * uv.y + uv.x), random(3. * uv.y + uv.x)),\n    \n    color = mix(v, vec3(v.x), roundEven(i.x / iResolution.x));\n    pixel.rgb = pow(color, vec3(1) / 2.2);\n}\n\n\n/*\nFURTHER READING\n\nhttps://squaresrng.wixsite.com/rand\nhttps://arxiv.org/pdf/2004.06278.pdf\nhttps://en.wikipedia.org/wiki/TestU01\nhttps://en.wikipedia.org/wiki/Middle-square_method\nhttps://en.wikipedia.org/wiki/Counter-based_random_number_generator\nhttps://en.wikipedia.org/wiki/List_of_random_number_generators#Pseudorandom_number_generators_(PRNGs)\n*/\n\n\n/*\nSIMILAR HASHES\n\nu32noise4 OC by FordPerfect in 2023\nhttps://www.shadertoy.com/view/mdGBWc\n\nphilox4x32_7 implemented by tomohiro in 2017\nhttps://www.shadertoy.com/view/XslBR4\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}