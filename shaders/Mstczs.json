{
    "Shader": {
        "info": {
            "date": "1519908214",
            "description": "rainy",
            "flags": 0,
            "hasliked": 0,
            "id": "Mstczs",
            "likes": 12,
            "name": "weather: rainy",
            "published": 3,
            "tags": [
                "weather",
                "rainy"
            ],
            "usePreview": 0,
            "username": "alfredzhenyu",
            "viewed": 1342
        },
        "renderpass": [
            {
                "code": "#define saturate(x) clamp(x,0.,1.)\n#define rgb(r,g,b) (vec3(r,g,b)/255.)\n\n\nfloat rand(float x) { return fract(sin(x) * 71523.5413291); }\n\nfloat rand(vec2 x) { return rand(dot(x, vec2(13.4251, 15.5128))); }\n\nfloat noise(vec2 x)\n{\n    vec2 i = floor(x);\n    vec2 f = x - i;\n    f *= f*(3.-2.*f);\n    return mix(mix(rand(i), rand(i+vec2(1,0)), f.x),\n               mix(rand(i+vec2(0,1)), rand(i+vec2(1,1)), f.x), f.y);\n}\n\nfloat fbm(vec2 x)\n{\n    float r = 0.0, s = 1.0, w = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        s *= 2.0;\n        w *= 0.5;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nfloat cloud(vec2 uv, float scalex, float scaley, float density, float sharpness, float speed)\n{\n    return pow(saturate(fbm(vec2(scalex,scaley)*(uv+vec2(speed,0)*iTime))-(1.0-density)), 1.0-sharpness);\n}\n\n\n#define NUM_LIGHTS 12\n\nvec4 lightArray[NUM_LIGHTS];\nvec3 lightColours[NUM_LIGHTS];\n\nconst float kPI = 3.141592654;\n\nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n};\nC_Ray ray;\n\nvec2 coord;\n\n//----------------------------------------------------------------------------------------\nfloat sMin( float a, float b )\n{\n    float k = 1.5;\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\n//-----------------------------------------------------------------------------------------\nvec3 RotateY( const in vec3 vPos, const in float ang)\n{\n\tfloat s = sin(ang);\n\tfloat c = cos(ang);\n\tvec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n\n\treturn vResult;\n}\n\n//-----------------------------------------------------------------------------------------\nfloat Hash(in vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(27.16898, 28.90563))) * 44549.5473453);\n}\n\n//-----------------------------------------------------------------------------------------\nfloat Noise(in vec2 p)\n{\n\tvec2 f;\n\tf = fract(p);\t\t\t// Separate integer from fractional\n    p = floor(p);\n    f = f*f*(3.0-2.0*f);\t// Cosine interpolation approximation\n    float res = mix(mix(Hash(p),\n\t\t\t\t\t\tHash(p + vec2(1.0, 0.0)), f.x),\n\t\t\t\t\tmix(Hash(p + vec2(0.0, 1.0)),\n\t\t\t\t\t\tHash(p + vec2(1.0, 1.0)), f.x), f.y);\n    return res;\n}\n\n//----------------------------------------------------------------------------------------\nfloat RoundBox( vec3 p, vec3 b)\n{\n\treturn length(max(abs(p)-b,0.0))-.5;\n}\n\n//-----------------------------------------------------------------------------------------\nfloat GetDistanceBox(const in vec3 vPos, const in vec3 vDimension)\n{\n\treturn length(max(abs(vPos)-vDimension,0.0));\n}\n\n//-----------------------------------------------------------------------------------------\nfloat MapToScene( const in vec3 vPos )\n{   \n\tfloat fResult = 1000.0;\n\t\n\tfloat fFloorDist = vPos.y + 3.2;\t\n\tfResult = min(fResult, fFloorDist);\n\t\n\n\t\n\tvec3 vBuilding2Pos = vec3(60.0, 0.0, 55.0);\n\tconst float fBuilding2Radius = 100.0;\n\tvec3 vBuilding2Offset = vBuilding2Pos - vPos;\n\tfloat fBuilding2Dist = length(vBuilding2Offset.xz) - fBuilding2Radius;\n\tfBuilding2Dist = max(vBuilding2Offset.z - 16.0, -fBuilding2Dist); // back only\n\t\n\tfResult = min(fResult, fBuilding2Dist);\n\n\t\n\tvec3 vCabDomain = vPos;\n\tvCabDomain -= vec3(-1.4, -1.55,29.5);\n\tvCabDomain = RotateY(vCabDomain, 0.1);\n\tfloat fCabDist = RoundBox(vCabDomain+vec3(0.0, .85, 0.0), vec3(.8, .54, 2.5));\n\tfResult = min(fResult, fCabDist);\n\tfCabDist = RoundBox(vCabDomain, vec3(.6, 1.2, 1.2));\n\tfResult = sMin(fResult, fCabDist);\n\n\tvec3 vBusDomain = vPos;\n\tvBusDomain -= vec3(-15., 0.0, 29.5);\n\tvBusDomain = RotateY(vBusDomain, 0.35);\n\tfloat fBusDist = RoundBox(vBusDomain, vec3(.55, 1.8, 4.0));\n\t\t\n\tfResult = min(fResult, fBusDist);\n\t\t\n\tvec3 vBusShelter = vPos;\n\tvBusShelter -= vec3(7.5, -2.0, 30.0);\n\tvBusShelter = RotateY(vBusShelter, 0.3);\n\tfloat fBusShelterDist = RoundBox(vBusShelter, vec3(.725, 5.3, 1.7));\n\t\t\n\tfResult = min(fResult, fBusShelterDist);\n\t\n\n\t\n\treturn fResult;\n}\n\n//----------------------------------------------------------------------------------------\nfloat Raymarch( const in C_Ray ray )\n{        \n    float fDistance = .1;\n    bool hit = false;\n    for(int i=0;i < 50; i++)\n    {\n\t\t\tfloat fSceneDist = MapToScene( ray.vOrigin + ray.vDir * fDistance );\n\t\t\tif(fSceneDist <= 0.01 || fDistance >= 150.0)\n\t\t\t{\n\t\t\t\thit = true;\n                break;\n\t\t\t} \n\n        \tfDistance = fDistance + fSceneDist;\n\t}\n\t\n\treturn fDistance;\n}\n\n//----------------------------------------------------------------------------------------\n\n//----------------------------------------------------------------------------------------\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, out C_Ray ray)\n{\n    vec2 vUV = coord.xy;\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\t\n\n\tvViewCoord.y *= -1.0;\n\n    ray.vOrigin = vPos;\n\n    vec3 vRight = normalize(cross(vWorldUp, vForwards));\n    vec3 vUp = cross(vRight, vForwards);\n        \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);    \n}\n\n//----------------------------------------------------------------------------------------\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, ray);\n}\n\n//----------------------------------------------------------------------------------------\n\nfloat hash(float x)\n{\n\treturn fract(21654.6512 * sin(385.51 * x));\n}\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\nvec2 hash2b(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p+4.5476351));\n}\nvec2 add = vec2(1.0, 0.0);\n\nvec2 noise2(vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 res = mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    return res;\n}\n\nvec2 fbm2(vec2 x)\n{\n    vec2 r = vec2(0.0);\n    float a = 1.0;\n    \n    for (int i = 0; i < 8; i++)\n    {\n        r += abs(noise2(x)+.5 )* a;\n        x *= 2.;\n        a *= .5;\n    }\n     \n    return r;\n}\n\nfloat dseg( vec2 ba, vec2 pa )\n{\n\t\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), -0.2, 1. );\t\n\treturn length( pa - ba*h );\n}\n\nfloat arc(vec2 x,vec2 p, vec2 dir)\n{\n    vec2 r = p;\n    float d=10.;\n    for (int i = 0; i < 5; i++)\n    {\n        vec2 s= noise2(r+iTime)+dir;\n        d=min(d,dseg(s,x-r));\n        r +=s;      \n    }\n    return d*3.;\n    \n}\n\n\nfloat thunderbolt(vec2 x,vec2 tgt)\n{\n    vec2 r = tgt;\n    float d=1000.;\n    float dist=length(tgt-x);\n     \n    for (int i = 0; i < 19; i++)\n    {\n        if(r.y>x.y+.5)break;\n        vec2 s= (noise2(r+iTime)+vec2(0.,.7))*2.;\n        dist = dseg(s,x-r);\n        d=min(d,dist);\n        \n        r +=s;\n        if(i-(i/5)*5==0){\n            if(i-(i/10)*10==0)d=min(d,arc(x,r,vec2(.3,.5)));\n            else d=min(d,arc(x,r,vec2(-.3,.5)));\n        }\n    }\n    return exp(-5.*d)+.2*exp(-1.*dist);\n   \n}\n\n\n\n\n//----------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Yes, that's right, this is done for EVERY pixel! Haha - *gulp*\n\t// X, Y, Z, POWER...\n\t\n\t// R, G, B...\n\t\n    vec3 vCameraPos = vec3(0.0, 0.0, 9.8);\n\tfloat ang = iTime * .3 + 3.4;\n\tfloat head = pow(abs(sin(ang*8.0)), 1.5) * .15;\n\tvCameraPos += vec3(cos(ang) * 2.5, head,  sin(ang) * 8.5);\n    coord = fragCoord.xy / iResolution.xy;\n\t\n\tvec3 vCameraIntrest = vec3(-1.0, head, 25.0);\n\tGetCameraRayLookat( vCameraPos, vCameraIntrest, ray);\n\tvec3 originalRayDir = ray.vDir;\n\n    //float fHitDist = Raymarch(ray);\n\t//vec3 vHitPos = ray.vOrigin + ray.vDir * fHitDist;\n\t//vec3 vHitPos = vCameraPos + ray.vDir * fHitDist;\n\tvec3 normal;\n\tvec3 col = vec3(0.0);\n\t\n\n\t\n\t// Twelve layers of rain sheets...\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tfloat dis = 1.;\n    //col = vec3(0.5,0.5,0.5);\n    col = mix(rgb(151., 176., 201.), rgb(105, 117, 135), coord.y);//sky\n\tfor (int i = 0; i < 2; i++)//i为大小\n\t{\n\t\t//vec3 plane = vCameraPos + originalRayDir * dis;\n\t\t//plane.z -= (texture(iChannel3, q*iTime).x*3.5);\n\t\t//if (plane.z < vHitPos.z)\n\t\t//{\n\t\t\tfloat f = 1.;\n\n\t\t\tvec2 st =  f * (q * vec2(-3.5, .05)+vec2(-iTime*.1+q.y*.11, iTime*.07));//y*.2风大小\n            //vec2 st =  f * (q * vec2(1.5, .05)+vec2(-iTime*.1+q.y*.2, iTime*.12));\n\t\t\tf = (texture(iChannel3, st * .5, -99.0).x + texture(iChannel3, st*.5, -99.0).y);\n\t\t\tf = clamp(pow(abs(f)*.5, 25.0) * 10.0, 0.00, q.y*.4+.05);//y方向越下到底部，透明度降低\n            //f = clamp(pow(abs(f)*.5, 29.0) * 140.0, 0.00, q.y*.4+.05);//29.0能见度\n\n\t\t\tvec3 bri = vec3(.15);//雨可见度\n\n\t\t\tcol += bri*f;\n\t\t//}\n\n\t}\n\t//col = clamp(col, 0.0, 1.0);\n\t\t\t\n\t//col = mix(vec3(0), col, smoothstep(2.25, 4.0, iTime));\n\t//col = pow(col, vec3(1.1));\n    col = mix(col, vec3(0.9), 0.7*cloud(coord,4.,10.,1.9,0.95,0.05) * cloud(coord,2.,2.,0.5,0.15,0.025)*coord.y);\n    \n    float cpos2 = coord.y - 0.2;\n    float cloudPos2 = exp(-10.*cpos2*cpos2);\n    col = mix(col, vec3(0.8), 0.8 * cloud(coord,2.,2.5,0.50,0.15,0.01)*cloudPos2);\n    \n    /*\n    vec2 p = 2.*fragCoord.xy/iResolution.yy-1.;\n    vec2 d;\n    vec2 tgt = vec2(1., -8.);\n    float c=0.;\n    \n        \n    float t = hash(floor(5.*iTime));\n    tgt+=8.*hash2b(tgt+t);\n    if(hash(t+2.3)>.8)\n\t{\n\t\tc= thunderbolt(p*10.+2.*fbm2(5.*p),tgt);\t\n\t\tcol+=clamp(1.7*vec3(0.8,.7,.9)*c,0.,1.);\t\n\t}\n*/\n    \n    \n\t\n\tfragColor = vec4(col, 1.0);\n}\n\t",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}