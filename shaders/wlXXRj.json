{
    "Shader": {
        "info": {
            "date": "1563516348",
            "description": "A crude implementation of a 4d raymarcher\nmouse.x for xw rotation\nmouse.y for yz rotation",
            "flags": 0,
            "hasliked": 0,
            "id": "wlXXRj",
            "likes": 2,
            "name": "4D raymarcher",
            "published": 3,
            "tags": [
                "4d",
                "raycaster"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "struct Material {\n    vec3 color;\n    float diffuse;\n    float specular;\n    float reflective;\n};\nstruct Ray {\n    vec4 end;\n    float dist;\n    Material m;\n};\nstruct Object {\n    Material mat;\n    float sdf;\n};\nconst Material stone = Material(vec3(0.7, 0.5, 0.5), 0.6, 0.3, 0.);\nconst Material carpet = Material(vec3(0.7), 0.3, 0., 0.3);\n\nconst float E = 0.001;\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\n}\n// 4D box => Tesserac from: https://www.shadertoy.com/view/Md2XDV\nfloat sdBox(in vec4 p, in vec4 b) {\n  vec4 d = abs(p) - b;\n  return min(max(d.x,max(d.y,max(d.z,d.w))),0.) + length(max(d,0.));\n}\nfloat hypersphere (vec4 p, float r) {\n   return length(p) - r;\n}\nfloat hyperplane (vec4 p, float h) {\n    return p.y-h;\n}\nfloat hyperplaneBounded (vec4 p, float h, float b) {\n    return max(abs(p.y-h)-0.1, \n        max(\n        \tabs(p.x)-b,\n        \tmax(\n        \t\tabs(p.z)-b,\n    \t\t\tabs(p.w)-b\n        \t)\n        )\n    );\n}\nObject omin (Object a, Object b) {\n    if(a.sdf<b.sdf)\n        return a; else\n        return b;\n}\nObject sdf (vec4 p) {\n    return omin(\n        Object(stone, hypersphere(p-vec4(0., sin(iTime), 0., sin(iTime)), 0.5)), \n        omin(\n            Object(stone, hypersphere(p-vec4(sin(iTime)*0.5, 0., cos(iTime)*0.5, 0.), 0.3)),\n            omin(\n                Object(carpet, sdBox(p-vec4(0.5, -0.7, 0.5, 0.3), vec4(0.3))),\n                Object(carpet, hyperplaneBounded(p, -1., 3.))\n        \t\t//Object(carpet, hyperplane(p, -1.) - 0.1*length(sin(p*3.)))\n            )\n        )\n    );\n}\nRay trace (vec4 o, vec4 r) {//not to be confused with 'raytrace'\n    float t = 0.;\n    vec4 p = o;\n    Object d;\n    for(int i = 0; i<64; i++) {\n        p = o + r * t;\n        d = sdf(p);\n        t += d.sdf*0.8;\n    }\n    return Ray(p, t, d.mat);\n}\nvec4 estimateNormal (vec4 p) {\n    return normalize(\n        vec4(\n            sdf(vec4(p.x+E, p.yzw))    .sdf - sdf(vec4(p.x-E, p.yzw)).sdf,\n            sdf(vec4(p.x, p.y+E, p.zw)).sdf - sdf(vec4(p.x, p.y-E, p.zw)).sdf,\n            sdf(vec4(p.xy, p.z+E, p.w)).sdf - sdf(vec4(p.xy, p.z-E, p.w)).sdf,\n            sdf(vec4(p.xyz, p.w+E))    .sdf - sdf(vec4(p.xyz, p.w-E)).sdf\n        )\n    );\n}\nvec3 uv_map (vec4 p, vec4 n) {\n    return n.x * p.yzw + n.y * p.xzw + n.z * p.xyw + n.w * p.xyz;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse -= 0.5;\n    float aspect = iResolution.y/iResolution.x;\n    vec2 vu = (uv-0.5)*2.;\n    vu.x /= aspect;\n    mouse.x /= aspect;\n    vec3 col = vec3(1.);\n\tvec4 cam = vec4(0., 0., -2., 0.);\n    vec4 ray = vec4(vu.x, vu.y, 1., 0.);\n    \n    //rotations\n    vec3 rot = vec3(0., -mouse.x*5., -mouse.y*5.);\n    //rotate on the yz plane\n    cam.yz = rotate2D(cam.yz, rot.z);\n    ray.yz = rotate2D(ray.yz, rot.z);\n   \t//rotate around xz plane\n    //cam.xz = rotate2D(cam.xz, rot.y);\n    //ray.xz = rotate2D(ray.xz, rot.y);\n    //rotate around xw plane\n    cam.xw = rotate2D(cam.xw, rot.y);\n    ray.xw = rotate2D(ray.xw, rot.y);\n    cam.zw = rotate2D(cam.zw, rot.y);\n    ray.zw = rotate2D(ray.zw, rot.y);\n    \n    \n    //setting up the scene\n    Ray t = trace(cam, ray);\n    vec4 light = vec4(2., 2., 0., 0.);\n    vec4 toLight = light-t.end;\n    vec4 normal = estimateNormal(t.end);\n    vec4 refl = reflect(ray, normal);\n    \n    //lighting effects\n    float diffuse = max(dot(normal, toLight), 0.);\n    float specular = pow(max(dot(refl, toLight), 0.), 1.)*0.6;\n    float fog = 1.0 / (1.0 + t.dist*t.dist*0.05);\n    \n    //coloring\n    col = t.m.color;//texture(iChannel0, uv_map(t.end/2., normal)).rgb;\n    //col *= texture(iChannel1, uv_map(refl, normal)).rgb;//bad reflection\n    col *= max(specular*t.m.specular+diffuse*t.m.diffuse, 0.3);\n    //col += texture(iCHannel1, \n    if(t.end.y<=-0.8) {\n        col.r *= float(mod(t.end.x, 0.2)>0.1);\n        col.g *= float(mod(t.end.z, 0.2)>0.1);\n        col.b *= float(mod(t.end.w, 0.2)>0.1);\n    }\n    col = mix(col, vec3(1.), 1.-clamp(70./t.dist/t.dist/t.dist, 0., 1.));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}