{
    "Shader": {
        "info": {
            "date": "1621173724",
            "description": "A little diorama I made inspired by a picture I saw.",
            "flags": 96,
            "hasliked": 0,
            "id": "sdj3Wm",
            "likes": 29,
            "name": "Japan diorama",
            "published": 3,
            "tags": [
                "fish",
                "japan",
                "diorama"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 729
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 chromaFlare(vec2 uv, vec2 ouv, float sz, float id)\n{\n    vec3 col;\n    \n    float c = abs(length(ouv)-.3-id*sz*8.-sz*9.)-sz;\n    vec3 rgb;\n    float a = atan(ouv.y, ouv.x)*1.;\n    float cnt = 16.;\n    for (float i = 0.; i < cnt; ++i)\n    {\n           \n        rgb += vec3(1.)*\n        (sat(.5*(sin(a*80.+iTime*10.)+sin(a*200.)+sin(a*100.))*.2+.5)*.5+.5)*\n        texture(iChannel0, vec2(.5)+((uv-vec2(.5))*(i+1.)*0.01*r2d((i-cnt/2.)*.025)*-1.*sat(length(ouv*2.)))).x;\n    }\n    col += pow((1.-sat(c*5.))*pow(rgb/cnt, vec3(1.)), vec3(1.));\n    \n    return col*.2;\n}\n\nvec3 doBloom(vec2 uv)\n{\n    vec3 acc = vec3(0.);\n    float stepAngle = 2.6;\n    for (float i = 0.; i < 16.; ++i)\n    {\n        float rad = 0.5;\n        rad = rad*sat(i/16.);\n        float angle = i * stepAngle;\n        vec2 psample = vec2(sin(angle), cos(angle))*rad;\n\n        vec3 res = texture(iChannel0, uv+psample*iResolution.xx/iResolution.xy).xyz;\n\n        acc += pow(sat(res), vec3(2.));\n\n    }\n\n    return (acc/16.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec4 col = texture(iChannel0, uv);\n    \n    col.xyz = pow(col.xyz, vec3(.5));\n    \n    col.xyz += doBloom(uv)*.3;\n    col.xyz += chromaFlare(uv, cuv, 0.01, 0.)*vec3(1.,0.,0.);\n    col.xyz += chromaFlare(uv, cuv, 0.01, -1.)*vec3(0.,1.,0.);\n    col.xyz += chromaFlare(uv, cuv, 0.01, -2.)*vec3(0.,0.,1.);\n\n    vec3 rgb = mix(vec3(0.176,0.443,0.463), vec3(0.996,0.459,0.365), pow(col.y, 5.));\n    \n    float an = atan(cuv.y,cuv.x);\n    col.xyz = sat((1.-(length(cuv)-.3))+sin(an*100.+iTime*10.)*.5+.7)*mix(rgb, col.xyz, pow(1.-sat((length(cuv*1.))), 2.));\n    col.xyz = pow(col.xyz+.1, vec3(1.5));\n\n    fragColor = vec4(col.xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 27157,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/asianmeditationmusiccollective/crane-in-the-water?in=asianmeditationmusiccollective/sets/traditional-asian-music-50"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(max(l.x, l.y), l.z);\n}\n\nfloat _leave(vec3 p, float s)\n{\n    \n    return max(max(length(p)-s, -(-p.y-sin((p.x+p.z)*150.)*.2*s-.01)), -(length(p)-s*.8));\n}\n\nfloat _cyl(vec3 p, vec2 s)\n{\n    return max(length(p.xz)-s.x, abs(p.y)-s.y);\n}\nfloat smin( float a, float b, float k ) {\n float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 _fishp;\nvec2 fish(vec3 p, float idMat)\n{\n    float tmove = iTime*.25+idMat;\n    vec2 pos = vec2(sin(tmove), cos(tmove)*.33)*.55;\n    p.xz += pos;\n    pos = normalize(pos);\n    float a = atan(pos.x, pos.y);\n    p.xz *= r2d(a-3.1415);\n    p.xz *= r2d(sin(iTime*2.+p.x*3.)*.3);\n    p -= vec3(0.,-.3,0.);\n    float acc = 100.;\n    \n    acc = min(acc, length(p*vec3(1.,2.,3.))-.25);\n    acc = smin(acc, length(p*vec3(1.,2.,3.)-vec3(-0.25,.0,0.))-.17, .1);\n    \n    acc = min(acc, max(abs(p.y+.05)-0.001, (length(p*vec3(3.,1.,1.)-vec3(.1,0.,0.))-.25)));\n    \n    \n    vec3 ptail = p*vec3(1.,sign(p.y),1.);\n    ptail -=  vec3(-.5,0.05,0.);\n    ptail.xy *= r2d(.7);\n\n    \n    acc = smin(acc, max(abs(ptail.z)-0.001, length(ptail*vec3(1.,2.,1.))-.125), .05);\n    if (idMat != 5.)\n        _fishp = p;\n    return vec2(acc, idMat);\n}\n\nvec3 _nenupharPos;\n\nvec2 map(vec3 p, bool water)\n{\n   vec2 acc = vec2(10000.,-1.);\n   \n   \n   //acc = _min(acc, vec2(length(p-vec3(0.5,.2,.2))-.5, 1.));\n   \n   // Ground\n   float gnd = p.y+.6+texture(iChannel1, p.xz*.05).x*.07;\n   acc = _min(acc, vec2(gnd, 0.));\n   \n   // Water\n   float waterHeight = -.1+texture(iChannel2, p.xz*.0512+vec2(iTime*.01)).x*.11\n       +texture(iChannel2, p.xz*.0512+vec2(iTime*.01)*vec2(1.,-1.)).x*.08;\n   if (water)\n   {\n       acc = _min(acc, vec2(max(p.y+waterHeight,-gnd), 2.));\n   }\n   \n   // Nenuphar\n   vec3 pnenu = p-vec3(-0.3,0.03,0.4);\n   //pnenu.yz *= r2d(sin(iTime*2.)*.05);\n   _nenupharPos = pnenu;\n   float nenu = max(_cyl(pnenu, vec2(.2,.01)), -_cube(pnenu-vec2(.2, 0.).xyx, vec3(.15)));\n   nenu = max(nenu, -_cyl(pnenu-vec3(0.,0.005,0.), vec2(.19, .01)));\n   acc = _min(acc, vec2(nenu, 3.));\n   \n   vec3 pfish2 = p*vec3(-1.,1.,-1.);\n   acc = _min(acc, fish(p*1.5-vec3(.5,0.,0.), 4.));\n   acc = _min(acc, vec2(fish(pfish2*4.-vec3(1.5,-0.5,0.), 5.)));\n   \n   // Bridge\n   float bridgerep = 0.1;\n   vec3 bridgep = p-vec3(0.3,0.2,0.);\n   bridgep.x = clamp(bridgep.x, -bridgerep*.5, bridgerep*7.5);\n   bridgep.x = mod(bridgep.x+.5*bridgerep, bridgerep)-bridgerep*.5;\n   float bridgeWidth = 0.4;\n   float accbridge = _cube(bridgep, vec3(bridgerep*.35, 0.01,bridgeWidth));\n   acc = _min(acc, vec2(accbridge, 6.));\n   \n   // Bridge poles\n   vec3 ppoles =p-vec3(0.3,-0.4,0.);\n   ppoles.z = abs(p.z)-bridgeWidth;\n   float poles = _cyl(ppoles, vec2(.05,1.));\n   acc = _min(acc, vec2(poles, 7.));\n   \n   // Bridge plates\n   float plates = _cube(ppoles-vec3(0.55,.6,0.), vec3(.5,.05,.01));\n   acc = _min(acc, vec2(plates, 8.));\n   \n   // Bridge plate support\n   vec3 pplates2 = p-vec3(1.35,.15,0.);\n   pplates2.z = abs(pplates2.z)-.2;\n   float plates2 = _cube(pplates2, vec3(1.,.01,.05));\n   acc = _min(acc, vec2(plates2, 9.));\n   \n   float repleaves = 0.1;\n   vec3 pleaves = p+vec3(iTime*.2, 0., iTime*.1);\n   vec2 idxLeave = floor((pleaves.xz+repleaves*.5)/repleaves);\n   pleaves.xz = mod(pleaves.xz+repleaves*.5, vec2(repleaves))-repleaves*.5;\n    \n   pleaves.xz += (texture(iChannel1, idxLeave*.05).xy-.5)*.25;\n   pleaves.y += waterHeight-repleaves/4.;\n   float leaves = _leave(pleaves, repleaves/4.);\n   if (sin(idxLeave.x*.1+idxLeave.y*.25) > 0.)\n       acc = _min(acc, vec2(leaves, 10.));\n   \n   float limits = _cube(p, vec3(1.));\n   //limits = length(p)-1.5;\n   acc = vec2(max(acc.x, limits), acc.y);\n   return acc;\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps, bool water)\n{\n    vec3 p = ro;\n    for (int i =0; i < steps && distance(p, ro) < 10.; ++i)\n    {\n        vec2 res = map(p, water);\n        res = vec2(res.x, res.y);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(ro, p), res.y);\n        p+= rd * res.x*.5;\n    }\n    return vec3(-1.);\n}\n\nvec3 _normal(float d, vec3 p, bool water)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy, water).x, map(p-e.yxy, water).x, map(p-e.yyx, water).x));\n}\n\nvec3 getWoodTex(float mat, vec3 p, vec3 n, vec3 h)\n{\n    vec3 tex = sat(texture(iChannel1, p.yx*vec2(.2,1.)).x+.35)*vec3(1.);\n    n.x += (tex.x-.5)*.5;\n    //n.z += (tex.x-.5)*.1;\n    return mix(tex*vec3(0.957,0.541,0.263), tex*.25*vec3(0.588,0.176,0.090), pow(sat(dot(h,n)),.5));\n}\n\nvec3 getLeaveText(vec3 p, vec3 n, vec3 h)\n{\n    return mix(vec3(1.000,0.580,0.824), vec3(1.,1.,1.), sat(dot(n,h)));\n}\n\nvec3 getNenupharTex(vec3 p, vec3 n, vec3 h)\n{\n    float an = atan(_nenupharPos.z, _nenupharPos.x);\n    return sat(.75*mix(vec3(0.212,0.808,0.251)*sat(sin(an*20.)*.5+.5+.6), vec3(1.,1.,1.), pow(sat(dot(n,h)), 5.)));\n//_nenupharPos\n}\n\n//vec3 rdrMat(vec3 p, vec3 n\n\nvec4 rdr(vec2 uv)\n{\n    vec3 col;\n    \n    vec3 ro = camOrig(iTime);//vec3(pcam.x,2.,pcam.y);\n    vec3 ta = camTarget();//vec3(0.,-.5,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    \n    col = (texture(iChannel0, rd).xyz*.5+.5);\n\n    vec3 lpos = vec3(15.);\n    vec3 waterCol = vec3(.5,.7,.99)*.1;\n    vec3 res = trace(ro, rd, 128, true);\n    float depth = -1.;\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = normalize(cross(dFdx(p), dFdy(p)));\n        n = _normal(res.x, p, true);\n        vec3 ldir = lpos-p;\n        col = n*.5+.5;\n        if (res.z == 2.) // water\n        {\n            col = vec3(0.);\n            vec3 pwater = p;\n            vec3 nwater = n;\n            float fogsz = 1.2;\n            float fogd = fogsz;\n            \n            \n            res = trace(p, rd, 64, false);\n            if (res.y > 0.)\n            {\n                p += rd*res.y;\n                n = normalize(cross(dFdx(p), dFdy(p)));\n                \n                fogd = distance(pwater, p);\n                \n                col = (n*.5+.5)*.5;\n            }\n        if (res.z == 4.) // fish\n        {\n            \n            float secail = 0.03;\n            vec3 fishpo = _fishp;\n            _fishp = mod(_fishp+.5*secail,secail)-secail*.5; \n            col = vec3(0.925,0.576,0.816)*mix(.55,1.,(1.-sat((length(_fishp)-secail*.25)*40.)));\n            col = mix(col, 1.2*col*vec3(1.000,0.455,0.361), sat(.5+(2.*fishpo.y-.2+fishpo.x*.9)*10.));\n            col *= mix(.5, 1., pow(abs(dot(rd, n)),2.5));\n            col = sat(col);\n        }\n        if (res.z == 5.)\n        {\n            col = vec3(1.000,0.455,0.361)*mix(.5, 1., pow(abs(dot(rd, n)),.5));\n            col = sat(col);\n        }\n        if (res.z > 5. && res.z < 10.)\n        {\n            col = .25*getWoodTex(res.z, p, n, normalize(ldir+rd));\n        }\n        if (res.z == 10.)\n        {\n            col = getLeaveText(p,n,normalize(ldir+rd));\n        }\n            if (res.z == 0.)\n            {\n                col = texture(iChannel2, p.xz).xyz*.07;\n            }\n            vec3 resshadow = trace(p+n*0.01, normalize(lpos-p), 4, false);\n            if (resshadow.y < 0.)\n                col += pow(sat(dot(normalize(ldir-rd), n)), 3.1)*(1.-waterCol)*.5*sat(fogd/fogsz);\n            \n            col = mix(col, waterCol, pow(sat(fogd/fogsz), 1.9));\n            \n            col += pow(sat(dot(normalize(ldir+(pwater+ro)), nwater)), 5.1)*vec3(1.)*.75;\n            \n            vec3 refl = normalize(reflect(rd, nwater));\n            vec3 resRefl = trace(pwater, refl, 16, false);\n            if (resRefl.y<0.)\n            {\n                col += texture(iChannel0, refl).xyz*.15;\n            }\n            else\n            {\n                vec3 prefl = pwater+resRefl.y*refl;\n                if (resRefl.z>5.)\n                col += .3*getWoodTex(resRefl.z, prefl, normalize(cross(dFdx(prefl), dFdy(prefl))), normalize((lpos-prefl)+refl));\n            }\n            \n\n            \n        }\n        else if (res.z == 3.)\n        {\n            col = getNenupharTex(p, n, normalize(ldir+rd));\n        }\n        else if (res.z == 0.)\n        {\n            col = pow(texture(iChannel2, vec2(atan(p.z, p.x), p.y)*vec2(1.,4.)).x, .5)*vec3(0.314,0.263,0.129);\n        }\n        else if (res.z > 5. && res.z < 10.)\n        {\n            col = getWoodTex(res.z, p, n, normalize(ldir+rd));\n            col = sat(col);\n        }\n        if (res.z == 10.)\n        {\n            col = getLeaveText(p,n,normalize(ldir+rd));\n        }\n\n    }\n    \n    \n    return vec4(col, depth);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec4 col = rdr(uv);\n\n    col.xyz = pow(col.xyz, vec3(1./1.5));\n    col.xyz *= mix(.0,1., 1.-sat(length(uv*1.5)-.15));\n    col = sat(col);\n    col.xyz = mix(col.xyz, texture(iChannel3, fragCoord/iResolution.xy).xyz, .75*sat(col.w/2.));\n    \n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n\nfloat tCam(float time)\n{\n    return time*0.25;\n}\nvec2 pCam(float time)\n{\n    return vec2(sin(tCam(time)), cos(tCam(time)))*5.;\n}\nvec3 camOrig(float time)\n{\n    return vec3(pCam(time).x,2.,pCam(time).y);\n}\nvec3 camTarget()\n{\n    return vec3(0.,-.5,0.);\n}\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+ abs(v.y);\n}\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*-uv.y));\n}\n/*\n    float tcam = iTime*.5;\n    vec2 pcam = vec2(sin(tcam), cos(tcam))*5.;\n    \n    vec3 ro = camOrig();//vec3(pcam.x,2.,pcam.y);\n    vec3 ta = camTarget();//vec3(0.,-.5,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    */",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}