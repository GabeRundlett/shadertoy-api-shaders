{
    "Shader": {
        "info": {
            "date": "1516687614",
            "description": "A test shader of kernel convolution operations such as box blur, edge detection and Sobel operator",
            "flags": 0,
            "hasliked": 0,
            "id": "MlSBzc",
            "likes": 3,
            "name": "Sobel Operator Test",
            "published": 3,
            "tags": [
                "sobel",
                "kernel"
            ],
            "usePreview": 1,
            "username": "zoidberg2010eaf",
            "viewed": 1133
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 pixel00 = texture(iChannel0, uv.xy + (vec2(0, 0)/ iResolution.xy));\n    vec4 pixeln1n1 = texture(iChannel0, uv.xy + (vec2(-1, -1)/ iResolution.xy));\n    vec4 pixeln10 = texture(iChannel0, uv.xy + (vec2(-1, 0)/ iResolution.xy));\n    vec4 pixeln11 = texture(iChannel0, uv.xy + (vec2(-1, 1)/ iResolution.xy));\n    vec4 pixel0n1 = texture(iChannel0, uv.xy + (vec2(0, -1)/ iResolution.xy));\n    vec4 pixel01 = texture(iChannel0, uv.xy + (vec2(0, 1)/ iResolution.xy));\n    vec4 pixel1n1 = texture(iChannel0, uv.xy + (vec2(1, -1)/ iResolution.xy));\n    vec4 pixel10 = texture(iChannel0, uv.xy + (vec2(1, 0)/ iResolution.xy));\n    vec4 pixel11 = texture(iChannel0, uv.xy + (vec2(1, 1)/ iResolution.xy));\n    // (-1,-1)  (-1,0)  (-1,1)\n    // (0, -1)  (0, 0)  (0, 1)\n    // (1, -1)  (1, 0)  (1, 1)\n    vec3 Gx =  (((pixel00.xyz * vec3(0)) + (pixel01.xyz * vec3(-2)) + (pixel0n1.xyz * vec3(2)) + (pixel11.xyz * vec3(-1)) + (pixel10.xyz * vec3(0)) \n                + (pixel1n1.xyz * vec3(1)) + (pixeln10.xyz * vec3(0)) + (pixeln11.xyz * vec3(-1)) + (pixeln1n1.xyz * vec3(1))));\n    vec3 Gy =  (((pixel00.xyz * vec3(0)) + (pixel01.xyz * vec3(0)) + (pixel0n1.xyz * vec3(0)) + (pixel11.xyz * vec3(-1)) + (pixel10.xyz * vec3(-2)) \n                + (pixel1n1.xyz * vec3(-1)) + (pixeln10.xyz * vec3(2)) + (pixeln11.xyz * vec3(1)) + (pixeln1n1.xyz * vec3(1))));\n    vec3 Gx2 = vec3(pow(Gx.x, 2.0), pow(Gx.y, 2.0),pow(Gx.z, 2.0));\n    vec3 Gy2 = vec3(pow(Gy.x, 2.0), pow(Gy.y, 2.0),pow(Gy.z, 2.0));\n    vec3 tot = Gx2 + Gy2;\n    vec3 G = vec3(sqrt(tot.x), sqrt(tot.y), sqrt(tot.z));\n    /*vec3 sum = ((pixel00 + pixeln1n1 + pixeln10 + pixeln11 + pixel0n1 \n                + pixel01 + pixel1n1 + pixel10 + pixel11).xyz) / vec3(9);*/ //Box Blur\n   /* vec3 sum = (((pixel00.xyz * vec3(8)) + (pixel01.xyz * vec3(-1)) + (pixel0n1.xyz * vec3(-1)) + (pixel11.xyz * vec3(-1)) + (pixel10.xyz * vec3(-1)) \n                + (pixel1n1.xyz * vec3(-1)) + (pixeln10.xyz * vec3(-1)) + (pixeln11.xyz * vec3(-1)) + (pixeln1n1.xyz * vec3(-1))));*/\n    fragColor = vec4(G, 1);\n    //fragColor = vec4(sum.x * uv.x * abs(sin(iTime)), sum.y * uv.y * abs(cos(iTime+10.0)), sum.z, 1);\n    //fragColor = pixel00;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}