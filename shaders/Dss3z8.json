{
    "Shader": {
        "info": {
            "date": "1665833943",
            "description": "Demonstration of compression artifacts in DXT1 compressed images.\nThe common tab contains parameters, which can change number of bits per color / interpolant, as well as the endpoint determination algorithm.\nThe mouse + drag changes displayed view.",
            "flags": 32,
            "hasliked": 0,
            "id": "Dss3z8",
            "likes": 2,
            "name": "DXT1 Compression",
            "published": 3,
            "tags": [
                "compression",
                "artifacts"
            ],
            "usePreview": 0,
            "username": "Gegell",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "mat2 rot2d(float angle) {\n    vec2 sc = vec2(sin(angle), cos(angle));\n    return mat2(sc.y, -sc.x, sc.x, sc.y);\n}\n\nfloat displayMask(vec2 fragCoord) {\n    vec2 coord = sign(iMouse.z) > 0.0 ? iMouse.xy : fragCoord;\n    coord -= iResolution.xy / 2.;\n#if POSITION_MODE == 1\n    coord = rot2d(-3.14159 / 12.0) * coord * 1.02;\n#else\n    coord = rot2d(-3.14159 / 4.0) * coord * 1.4;\n#endif\n    coord += iResolution.xy / 2.;\n    vec2 uv = clamp(coord / iResolution.xy, vec2(0.), vec2(1.));\n    return uv.x*6.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized centered pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/min(iResolution.x, iResolution.y) + .5;\n    vec2 texture_size = textureSizeCompressed(iChannel0);\n    \n    ivec2 pos = ivec2(fragCoord); //POSITION_MODE == 1\n#if POSITION_MODE == 2\n    pos = ivec2(floor(uv * texture_size));\n#endif\n    ivec2 iBlockCoord = pos / 4;\n    ivec2 fBlockCoord = pos & 3;\n\n    Block block = blockFetch(iChannel0, iBlockCoord);\n    \n    \n    vec4 col_compressed = texelFetchCompressed(iChannel0, pos);\n    vec4 col_true = texelFetch(iChannel1, pos, 0);\n    \n    float image_mask = float(all(equal(clamp(pos, ivec2(0), ivec2(texture_size)-1), pos)));\n    float display_mask = displayMask(fragCoord);\n    \n\n    // Output to screen\n    // (*): requires the same texture to be set in Buffer A and Image Tabs\n    switch (int(round(display_mask))) {\n        case 0:\n            // Show compressed texture\n            fragColor = col_compressed;\n            fragColor *= image_mask;\n            break;\n        case 1:\n            // (*) Show abs. diff. x10\n            fragColor = abs(col_compressed - col_true) * 10.;\n            fragColor *= image_mask;\n            break;\n        case 2:\n            // Show distance between the decoded block endpoint colors\n            fragColor = vec4(distance(reconstructColor(block.endpoint1), reconstructColor(block.endpoint2)));\n            fragColor *= image_mask;\n            break;\n        case 3:\n            // Show color difference between the block endpoints\n            fragColor = vec4(abs(vec3(block.endpoint1) - vec3(block.endpoint2)) / max_color_vals, 1);\n            fragColor *= image_mask;\n            break;\n        case 4:\n            // Show equal color channels in endpoints\n            fragColor = vec4(equal(block.endpoint1, block.endpoint2), 1);\n            fragColor *= image_mask;\n            break;\n        case 5:\n            // Show interpolant values\n            fragColor = vec4(float(block.interpolants[fBlockCoord.y * 4 + fBlockCoord.x]) / float(max_inter_val));\n            fragColor *= image_mask;\n            break;\n        case 6:\n            // Show raw data\n            fragColor = vec4(floatBitsToUint(texelFetch(iChannel0, ivec2(fragCoord), 0))) / float(uint(-1));\n            break;\n    }\n    \n    if (sign(iMouse.z) < 0.0) {\n        fragColor = mix(fragColor, vec4(1.0), smoothstep(0.010, 0.0025, abs(fract(display_mask)-.5)));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "uint murmur3_finalize( in uint u )\n{\n  u ^= ( u >> 16 ); u *= 0x85EBCA6Bu;\n  u ^= ( u >> 13 ); u *= 0xC2B2AE35u;\n  u ^= ( u >> 16 );\n\n  return u;\n}\n\n// RNG from https://de.wikipedia.org/wiki/Xorshift\nuint rngSeed = 314159265u;\n\nuint xorshift(in uint value) {\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nuint nextUint() {\n    rngSeed = xorshift(rngSeed);\n    return rngSeed;\n}\n\nfloat nextFloat() {\n    return float(nextUint()) / float(uint(-1));\n}\n\nvec3 nextVec3() {\n    return vec3(nextFloat(), nextFloat(), nextFloat());\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iFragCoord = ivec2(fragCoord);\n    int index = (iFragCoord.y * int(iChannelResolution[0].x) + iFragCoord.x) - 1;\n    if (index >= 0) {\n        int block_index = index / _darray_size;\n        int block_px = index % _darray_size;\n        int tex_block_width = int(ceil(iChannelResolution[1].x / 4.));\n        ivec2 iBlockCoord = ivec2(block_index % tex_block_width, block_index / tex_block_width);\n        \n        Block block;\n#if !defined ENDPOINT_FUNCTION || ENDPOINT_FUNCTION == 1\n        vec4[] endpoints = endpointBBox(iChannel1, iBlockCoord);\n        block = compress(iChannel1, iBlockCoord, endpoints[0], endpoints[1]);\n#elif ENDPOINT_FUNCTION == 2\n        block = blockFetch(iChannel0, iBlockCoord);        \n        rngSeed = murmur3_finalize(uint(block_index) ^ murmur3_finalize(uint(iFrame)));\n        float bestMSE = compressionMSE(iChannel1, block, iBlockCoord);\n        for (int i = 0; i < ITERATIONS_PER_FRAME ; i++) {\n            vec4 endpoint1 = vec4(nextVec3(), 1.);\n            vec4 endpoint2 = vec4(nextVec3(), 1.);\n            Block newBlock = compress(iChannel1, iBlockCoord, endpoint1, endpoint2);\n            float newMSE = compressionMSE(iChannel1, newBlock, iBlockCoord);\n            if (newMSE < bestMSE) {\n                bestMSE = newMSE;\n                block = newBlock;\n            }\n        }\n#endif\n        \n        PackedBlock packed = packBlock(block);\n\n        fragColor = vec4(uintBitsToFloat(packed.data[block_px]));\n    } else {\n        fragColor = vec4(iChannelResolution[1].xy, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The number of bits each color channel gets in each endpoint.\n// Per 4x4 block of pixels we store 2 endpoint colors.\n#define COLOR_BITS uvec3(5,6,5)\n\n// The number of bits the interpolants get. \n// The interpolant is the only thing that's stored for each pixel,\n// determining where between the 2 endpoints this pixel color is situated. (lerp)\n#define INTER_BITS 2\n\n// Endpoint function table. How do we select appropriate endpoints for each block?\n// 1. Use the min and max values of the colors in the block (bounding box corners) \n// 2. Use iterative refinement (uniform random points)\n#define ENDPOINT_FUNCTION 2\n\n// If we use an iterative endpoint function, how often do we iterate per frame?\n#define ITERATIONS_PER_FRAME 16\n\n// Position selection. How to position the texture on the screen?\n// 1. Use the original fragCoord, preserving 1:1 pixel and aspect ratio.\n// 2. Use centered 0-1 UV square in the center of the screen.\n#define POSITION_MODE 1\n\n\n//\n// Endpoint determination functions\n//\nvec4[2] endpointBBox( sampler2D image, ivec2 blockID ) {\n    ivec2 uv_offset = blockID * 4;\n    \n    // Figure out some endpoints, here just simple bbox min and max\n    vec4 min_, max_;\n    min_ = max_ = texelFetch(image, uv_offset, 0);\n    for (int index = 1; index < 4 * 4; index++) {\n        ivec2 p = ivec2(index % 4, index / 4);\n        vec4 col = texelFetch(image, uv_offset + p, 0);\n        min_ = min(min_, col);\n        max_ = max(max_, col);\n    }\n    \n    return vec4[](min_, max_);\n}\n\n//\n// Compression functions\n//\n#define max_color_vals (vec3((1u << COLOR_BITS.r) - 1u, (1u << COLOR_BITS.g) - 1u, (1u << COLOR_BITS.b) - 1u)) \n#define max_inter_val float((1u << INTER_BITS) - 1u)\n\nstruct Block {\n    uvec3 endpoint1;\n    uvec3 endpoint2;\n    uint[16] interpolants;\n};\n\nuvec3 compressColor(vec3 col) {\n    return uvec3(round(clamp(col, vec3(0), vec3(1)) * vec3(max_color_vals)));\n}\n\nvec3 reconstructColor(uvec3 col) {\n    return mix(vec3(col) / max_color_vals, vec3(0.), equal(COLOR_BITS, uvec3(0u)));\n}\n\nBlock compress(sampler2D image, ivec2 blockID, vec4 endpoint1, vec4 endpoint2) {\n    ivec2 uv_offset = blockID * 4;\n    \n    // Compress to data\n    Block block;\n    block.endpoint1 = compressColor(endpoint1.rgb);\n    block.endpoint2 = compressColor(endpoint2.rgb);\n    \n    vec3 decoded_endpoint1 = reconstructColor(block.endpoint1);\n    vec3 decoded_endpoint2 = reconstructColor(block.endpoint2);\n    \n    vec3 end12 = decoded_endpoint2 - decoded_endpoint1;\n    \n    for (int index = 0; index < 4 * 4; index++) {\n        ivec2 p = ivec2(index % 4, index / 4);\n        vec4 col = texelFetch(image, uv_offset + p, 0);\n        float t_value = clamp(dot(end12, col.rgb - decoded_endpoint1) / dot(end12, end12), 0., 1.);\n        \n        t_value *= float(max_inter_val);\n        block.interpolants[index] = uint(round(t_value));\n    }\n    return block; \n}\n\nvec4 decompress(Block block, ivec2 pixelID) {\n    vec3 decoded_endpoint1 = reconstructColor(block.endpoint1);\n    vec3 decoded_endpoint2 = reconstructColor(block.endpoint2);\n    \n    vec3 end12 = decoded_endpoint2 - decoded_endpoint1;\n    int index = pixelID.y * 4 + pixelID.x;\n    \n#if INTER_BITS > 0\n    float t = float(block.interpolants[index]) / float(max_inter_val);\n#else \n    float t = 0.;\n#endif\n    vec3 col = decoded_endpoint1 + t * end12;\n    \n    return vec4(col, 1.);\n}\n\nfloat compressionMSE( sampler2D image, Block block, ivec2 blockID ) {\n    ivec2 uv_offset = blockID * 4;\n    float mse = 0.;\n    for (int index = 0; index < 4 * 4; index++) {\n        ivec2 p = ivec2(index % 4, index / 4);\n        vec4 col_true = texelFetch(image, uv_offset + p, 0);\n        vec4 col_comp = decompress(block, p);\n        vec4 delta = col_true - col_comp;\n        mse += dot(delta, delta);\n    }\n    return mse;\n}\n\n//\n// Bitpacking and unpacking\n//\n#define _endpoint_size int(COLOR_BITS.r + COLOR_BITS.g + COLOR_BITS.b)\n#define _interpolants_size (INTER_BITS * 16)\n#define _darray_size ((_endpoint_size * 2 + _interpolants_size + 31) / 32)\nstruct PackedBlock {\n    uint[_darray_size] data;\n};\n\nvoid bitfieldWrite(inout uint[_darray_size] data, uint to_write, int offset, int width) {\n    int index = offset / 32;\n    int b_offset = offset & 31;\n    uint full_mask = (1u << width) - 1u; \n    uint mask = full_mask << b_offset;\n    data[index] = (data[index] & ~mask) + ((to_write << b_offset) & mask);\n    if (b_offset + width > 32) {\n        mask = full_mask >> (32 - b_offset);\n        data[index + 1] = (data[index] & ~mask) + ((to_write >> (32 - b_offset)) & mask);\n    }\n}\n\nuint bitfieldRead(uint[_darray_size] data, int offset, int width) {\n    int index = offset / 32;\n    int b_offset = offset & 31;\n    uint mask = (1u << width) - 1u;\n    uint read = (data[index] >> b_offset) & mask;\n    if (b_offset + width > 32) {\n        mask = (1u << (width + b_offset - 32)) - 1u;\n        read += (data[index + 1] & mask) << (32 - b_offset);\n    }\n    return read;\n}\n\nPackedBlock packBlock(Block block) {\n    const ivec3 end1_offsets = ivec3(0, COLOR_BITS.r, COLOR_BITS.r + COLOR_BITS.g);\n    const ivec3 end2_offsets = end1_offsets + _endpoint_size;\n    \n    PackedBlock packed;\n    bitfieldWrite(packed.data, block.endpoint1.r, end1_offsets.r, int(COLOR_BITS.r));\n    bitfieldWrite(packed.data, block.endpoint1.g, end1_offsets.g, int(COLOR_BITS.g));\n    bitfieldWrite(packed.data, block.endpoint1.b, end1_offsets.b, int(COLOR_BITS.b));\n    \n    bitfieldWrite(packed.data, block.endpoint2.r, end2_offsets.r, int(COLOR_BITS.r));\n    bitfieldWrite(packed.data, block.endpoint2.g, end2_offsets.g, int(COLOR_BITS.g));\n    bitfieldWrite(packed.data, block.endpoint2.b, end2_offsets.b, int(COLOR_BITS.b));\n    \n    int offset = 2 * _endpoint_size;\n    for (int i = 0; i < 4*4; i++) {\n        bitfieldWrite(packed.data, block.interpolants[i], offset, INTER_BITS);\n        offset += INTER_BITS;\n    }\n    return packed;\n}\n\nBlock unpackBlock(PackedBlock packed) {\n    const ivec3 end1_offsets = ivec3(0, COLOR_BITS.r, COLOR_BITS.r + COLOR_BITS.g);\n    const ivec3 end2_offsets = end1_offsets + _endpoint_size;\n    \n    Block block;\n    block.endpoint1.r = bitfieldRead(packed.data, end1_offsets.r, int(COLOR_BITS.r));\n    block.endpoint1.g = bitfieldRead(packed.data, end1_offsets.g, int(COLOR_BITS.g));\n    block.endpoint1.b = bitfieldRead(packed.data, end1_offsets.b, int(COLOR_BITS.b));\n    \n    block.endpoint2.r = bitfieldRead(packed.data, end2_offsets.r, int(COLOR_BITS.r));\n    block.endpoint2.g = bitfieldRead(packed.data, end2_offsets.g, int(COLOR_BITS.g));\n    block.endpoint2.b = bitfieldRead(packed.data, end2_offsets.b, int(COLOR_BITS.b));\n    \n    int offset = 2 * _endpoint_size;\n    for (int i = 0; i < 4*4; i++) {\n        block.interpolants[i] = bitfieldRead(packed.data, offset, INTER_BITS);\n        offset += INTER_BITS;\n    }\n    return block;\n}\n\n//\n// Sampling function\n//\nvec2 textureSizeCompressed( sampler2D compressed ) {\n    return texelFetch(compressed, ivec2(0), 0).xy;\n}\n\nBlock blockFetch( sampler2D compressed, ivec2 blockID, vec2 texture_size) {\n    ivec2 dataSize = ivec2(textureSize(compressed, 0));\n    ivec2 blockCounts = ivec2(ceil(texture_size / 4.));\n\n    PackedBlock packed;\n    int base = (blockID.y * blockCounts.x + blockID.x) * _darray_size + 1;\n    for (int offset = 0; offset < _darray_size; offset++) {\n        int index = base + offset;\n        ivec2 data_pos = ivec2(index % dataSize.x, index / dataSize.x);\n        vec4 raw_data = texelFetch(compressed, data_pos, 0);\n        packed.data[offset] = floatBitsToUint(raw_data.r);\n    }\n    \n    return unpackBlock(packed);\n}\n\nBlock blockFetch( sampler2D compressed, ivec2 blockID ) {\n    vec2 texture_size = textureSizeCompressed(compressed);\n    return blockFetch( compressed, blockID, texture_size );\n}\n\nvec4 texelFetchCompressed( sampler2D compressed, ivec2 pos ) {\n    vec2 texture_size = textureSizeCompressed(compressed);\n    if (any(notEqual(clamp(pos, ivec2(0), ivec2(texture_size)-1), pos))) {\n        return vec4(0.);\n    }\n\n    ivec2 iBlockCoord = pos / 4;\n    ivec2 fBlockCoord = pos & 3;\n    \n    Block block = blockFetch(compressed, iBlockCoord, texture_size);\n    return decompress(block, fBlockCoord);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}