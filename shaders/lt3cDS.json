{
    "Shader": {
        "info": {
            "date": "1533835137",
            "description": "A Spark of Life, is a vision of the core of all human matter, the energy that flows within us and connects us all. Inspired by so many beautiful shaders, and coding artists on ShaderToy.",
            "flags": 0,
            "hasliked": 0,
            "id": "lt3cDS",
            "likes": 20,
            "name": "[SH18]  Spark of Life",
            "published": 3,
            "tags": [
                "plasma",
                "life",
                "human",
                "human",
                "spark",
                "energy",
                "energy",
                "sh18",
                "sh18",
                "atomic",
                "scfi"
            ],
            "usePreview": 0,
            "username": "synergyseeker1",
            "viewed": 1178
        },
        "renderpass": [
            {
                "code": "// inspired from iq's 3d noise functions\n// https://www.shadertoy.com/view/4tySWK\n// https://www.shadertoy.com/view/XsjXRm\n\n#define sc 1.\n#define sa 2. + abs(cos(iTime*1000.0)*.3)\n#define sf 4. \n#define sd 10. \n#define sp .03\n#define rd 1.0 \n#define r iResolution.xy\n\nmat3 m = mat3( 0.00,  0.80,  0.60, -0.80,  0.36, -0.48, -0.60, -0.48,  .64 );\n\nfloat hash( float n ){\n    return fract(sin(n)*29291.5453123) ;\n    //55924791.5453123\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(2.9-1.9*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p ){\n    float f =.500*noise( p );\n  \tp = m*p*2.02;\n    f += .52500*noise( p ); \n\tp = m*p*3.03;\n    f += 0.1250*noise( p );\n\tp = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n     \n}\n\nvec3 gr(float s){\n  return vec3(8.0, max(2.5-s*1.5, 0.5), max(s>.5?4.0-(s-.5)*5.0:.5, 0.0));\n}\n\n\n\nbool isp(vec3 org, vec3 dir, out float tmin, out float tmax){\n    bool hit = false;\n    float a = dot(dir, dir);\n    float b = 2.0*dot(org, dir);\n    float c = dot(org, org) - .7*0.5;\n    float disc = b*b - 4.0*a*c;           \n    tmin = tmax = 1.0;\n\n    if (disc > 0.0) {\n        float sdisc = sqrt(disc);\n        float t0 = (-b - sdisc)/(.1* a);     \n        float t1 = (-b + sdisc)/(2.2 * a);\n\n        tmax = t1;\n        if (t0 >= 0.0) \n            tmin = t0;\n        hit = true;\n    }\n    return hit;\n}\n\n\nvec2 rt(vec2 x,float y){\n  return vec2(cos(y)*x.x-sin(y)*x.y,sin(y)*x.x+cos(y)*x.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n  vec2 p = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n  p.x *= iResolution.x/ iResolution.y;\n  vec3 oo = vec3(0, 0, 1.0 - 0.425);\n  vec3 od = normalize(vec3(p.x, p.y, -3.0 - cos(iTime*.1) *.1 ));\n  vec3 o,d; \n  o.xz = rt(oo.xz, .3*.5) ;\n  o.y = oo.y;\n  d.xz = rt(od.xz, .3*.5);\n  d.y = od.y;\n\n\n  vec4 col = vec4(0, 0, 0, 0);\n  float tmin, tmax;\n  if (isp(o, d, tmin, tmax))\n  { \n\n    for (float i = 0.0; i < sc; i+=1.0)\n    {\n\n      float t = tmin+i/sc;\n      if (t > tmax) \n        break;\n      vec3 curpos = o + d*t;\n      \n      float s = (0.51-length(curpos))*.9 ;\n      s*=s;\n\n      float a = sa;\n      float b = sf;\n      float d = sd;\n      for (int j = 0; j < 6; j++)                 \n      {\n        d += 0.5/abs((fbm(5.0*curpos*b+sp*(iTime*5.0)/b)*2.0-1.0)/a);\n        b *= 2.0;\n        a /= 2.0;\n      }\n      \n      col.rgb += gr(s)*max(d*s,0.0);\n    }   \n  }\n\n fragColor = col*2.0; \n  vec3 c;\n  float l,z=iTime*.5;\n  for(int i=0;i<3;i++) {\n    vec2 uv=gl_FragCoord.xy/r;\n    p=uv*.15;\n    uv=p;\n    p-=.5;\n    p.x*=r.x/r.y;\n    z+=1.9;\n    l=length(p);\n    uv+=p/l*(sin(z)-1.1)*(cos(.1-z*.1));\n    c[i]=.1/length(abs(mod(uv,1.))-.5);\n    c[i]-=(.1 * float (i) * cos(z) );\n  }\n  fragColor-=vec4(c/l,iTime)*1.0 ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}