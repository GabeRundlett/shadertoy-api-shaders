{
    "Shader": {
        "info": {
            "date": "1695829687",
            "description": "taken shadergraph code from unity documentation and translated it into GLSL, then added a manhattan distance function to replace the original euclidian distance being used.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdyczD",
            "likes": 0,
            "name": "chebechev voronoi, as F(t)",
            "published": 3,
            "tags": [
                "voronoi",
                "manhattan"
            ],
            "usePreview": 0,
            "username": "18smith111",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "float chebyshevDistance(vec2 a, vec2 b) {\n    return max(abs(a.x - b.x), abs(a.y - b.y));\n}\n\nvec2 unity_voronoi_noise_randomVector(vec2 UV, float offset)\n{\n    mat2 m = mat2(15.27, 47.63, 99.41, 89.98);\n    UV = fract(sin(UV*m) * 46839.32);\n    return vec2(sin(UV.y + offset) * 0.5 + 0.5, cos(UV.x * offset) * 0.5 + 0.5);\n}\nfloat voronoi(vec2 p,float density,float angle)\n{ \n    float AngleOffset = angle;\n    float CellDensity = density;\n\n    vec2 g = floor(p * CellDensity);\n    vec2 f = fract(p * CellDensity);\n    \n    vec3 res = vec3(8.0, 0.0, 0.0);\n\n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 lattice = vec2(x, y);\n            vec2 offset = unity_voronoi_noise_randomVector(lattice + g, AngleOffset);\n            float d = chebyshevDistance(lattice + offset, f);\n            if(d < res.x)\n            {\n                res = vec3(d, offset.x, offset.y);\n            }\n        }\n    }\n\n return res.x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 UV = fragCoord / iResolution.xy;\n    float AngleOffset = 5.0*iTime+10.0;\n    float CellDensity = 2.0*iTime+10.0;\n\n    float f = voronoi(UV,AngleOffset,CellDensity);\n\n    // Visualize the f vector\n    fragColor = vec4(f, f,f, 1.0);\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}