{
    "Shader": {
        "info": {
            "date": "1600089896",
            "description": "Attempt at smoothing the animations of iq's cheap noise using sine distortion.\nPress keys 1 2 3 to see the different noises full screen click the screen to see pattern without sine distortion.",
            "flags": 16,
            "hasliked": 0,
            "id": "tl2fDc",
            "likes": 19,
            "name": "Smooth Animation Cheap Noise",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "random",
                "cheap",
                "animation",
                "smooth"
            ],
            "usePreview": 1,
            "username": "Jaromir",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "//Attempt at smoothing the animations of iq's cheap noise using sine distortion.\n//Also trying to making the noise pattern look more random\n//click the mouse to see without smoothing of the animation\n//press keys 1 2 3 to see the different noises full screen\n\n#define M_PI 3.14159265359\n\nmat2 rot(float a){\nreturn mat2(\n  cos(a), sin(a),\n  -sin(a), cos(a)\n  );\n}\n\nfloat noise31(vec3 p){\n\t\n    vec3 id = floor(p);\n    vec3 fd = fract(p);\n    \n    fd = fd*fd*(3.-2.*fd);\n    \n    vec2 rOffset = vec2(37.,17.)*id.z;\n    vec2 uv = id.xy + rOffset + fd.xy;\n    vec2 texNoise = texture(iChannel0, (uv+0.5)/256.0).yx;\n  \n    float n = mix(texNoise.x,texNoise.y,fd.z);  \n    \n    return n;\n}\n\nfloat noise31_sine(vec3 p){\n  vec2 offset = sin(p.xy*vec2(1.876689))*vec2(.310876);\n  p.z+=offset.x+offset.y; \n  float n = noise31(p);\n  return n;\n\t\n}\n\nfloat noise(vec3 p){\n  float n = 0.;\n    \n  if(iMouse.z <= 0.){\n    n = noise31_sine(p);\n  }else{\n    n = noise31(p);\n  }\n\n  return n;  \n}\n\nfloat fbm(vec3 p){\n  float G = exp(-1.);\n  float amp = 1.;\n  float freq = 1.;\n  float n = 0.;\n    \n  for(int i = 0; i <8; i++){\n    p.xy*=rot(0.2*M_PI);\n    n+= noise(p*freq)*amp;\n    freq*=2.;\n    amp*=G;\n  }\n      \n  return n*0.7;\n}\n\nfloat warp(vec3 p){\n     float n = 0.;\n    \n      vec3 q = vec3(\n           fbm(p + vec3(0.,0.,0.0)),  \n           fbm(p + vec3(2.1,1.5,2.1)),  \n           fbm(p + vec3(1.5,3.4,2.1))\n           );\n      vec3 r = vec3(\n           fbm(q + vec3(2.1,3.5,1.5)),  \n           fbm(q + vec3(1.1,0.7,1.1)),  \n           fbm(q + vec3(0.2,1.4,2.3))\n           );\n    \n      return n = fbm(vec3(p + r*4.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float grad = fragCoord.x/iResolution.x;\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    //keyboard input\n    float one = texelFetch( iChannel1, ivec2(49,0), 0 ).x;\n    float two = texelFetch( iChannel1, ivec2(50,0), 0 ).x;\n    float three = texelFetch( iChannel1, ivec2(51,0), 0 ).x;\n    \n    float scale = 5.;\n    float speed = 0.5;\n    vec3 p = vec3(uv*scale,iTime*speed);\n\n    float n = 0.;\n    \n    if(one > 0.){\n      n = noise(p);    \n    }else if(two > 0.){\n      n = fbm(p);        \n    }else if(three > 0.){\n      n = warp(p);\n    }else{   \n      if(grad < 0.325){\n        n = noise(p);\n      }else if(grad > 0.33 && grad < 0.655){\n        n = fbm(p);    \n      }else if(grad > 0.66){\n        n = warp(p);       \n      }\n    }\n    \n    fragColor = vec4(n);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}