{
    "Shader": {
        "info": {
            "date": "1717606543",
            "description": "Flow refers form: https://glslsandbox.com/e#53634.0\nSDF refers from: https://iquilezles.org/articles/distfunctions2d/\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4XVGD1",
            "likes": 3,
            "name": "Many Flying Swords",
            "published": 3,
            "tags": [
                "fractal",
                "sdf",
                "swords"
            ],
            "usePreview": 0,
            "username": "refler",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "vec3 palette (float t){\n    vec3 a = vec3 ( 0.500,0.500,0.500 );\n    vec3 b = vec3 ( 0.5,0.5,0.5 );\n    vec3 c = vec3 ( 1.0,1.0,1.0 );\n    vec3 d = vec3 ( 0.3,0.2,0.2 );\n\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nmat2 rot(in float t)\n{\n    return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat dot2( in vec2 v )\n{\n    return v.x*v.x + v.y*v.y;\n}\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sword( in vec2 uv  )\n{\n    uv.y = uv.y - 0.1;\n    float d0 = sdBox(uv, vec2(0.02,0.15));\n    uv.y = uv.y - 0.3;\n    float d1 = sdTriangleIsosceles( uv, vec2(0.02,-0.15) );\n    float d = opSmoothUnion( d0, d1, 0.005 );\n    uv.y = uv.y + 0.46;\n    d1 = sdTrapezoid( uv, 0.08, 0.1, 0.01 );\n    d = opUnion( d, d1 );\n    uv.y = uv.y + 0.06;\n    d1 = sdBox(uv, vec2(0.01,0.05));\n    d = opUnion( d, d1 );\n    uv.y = uv.y + 0.06;\n    d1 = sdTrapezoid( uv, 0.02, 0.03, 0.01 );\n    d = opUnion( d, d1 );\n    d = abs(d)-0.01;\n    d = 1.0 - step(0.0,d);\n    return d;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    if (iMouse.z > 1.) {\n        vec2 M = (iMouse.xy-iResolution.xy*0.5)/iResolution.y;    \n        uv = uv + M*4.0;\n    }\n    \n\tvec3 uvz = vec3(uv, 1.0 - length(uv) * 0.2);\n\t\n\tfloat ta = iTime * 0.1;\n\tmat3 r=mat3(\n\t\t0.0,1.0,0.0,\n\t\t-sin(ta),0.0,cos(ta),\n\t\tcos(ta),0.0,sin(ta));\n\tuvz=r*r*r*r*uvz;\n\n\tfloat a = (atan(uvz.y, uvz.x) / 3.141592 / 2.0 + 0.5);\n\ta = a*50.0;\n\tfloat id = floor(a);\n\tfloat phase = rand(vec2(id, 0.0));\n\tfloat dist = rand(vec2(id, 1.0)) * 0.7;\n\tfloat sword_col = rand(vec2(id, 2.0));\n\n\tfloat z = dist / length(uvz.xy) * uvz.z;\n\tfloat Z = mod(z + phase + iTime * -1.0, 1.0);\n\tfloat d = sword(vec2(fract(a)-0.5, 2.0*Z-1.0)); \n    fragColor = vec4(d * palette(0.1+sword_col+Z) ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}