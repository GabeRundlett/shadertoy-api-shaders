{
    "Shader": {
        "info": {
            "date": "1519336673",
            "description": "a lil convergence of five masters",
            "flags": 64,
            "hasliked": 0,
            "id": "XscyzS",
            "likes": 8,
            "name": "Kinestesia",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "fbm",
                "formulanimations"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 732
        },
        "renderpass": [
            {
                "code": "#define FAR 10.0\n#define STEPS 256\n#define EPS 0.0001\nconst float PI = 3.14159265359;\n\n// This is based upon two tutorials: https://www.youtube.com/watch?v=CHmneY8ry84&t=211s by iq\n// and \t\t\t\t\t\t\t   : https://www.youtube.com/watch?v=RGmgHfbU0hU by vgs\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nvec3 flowerMaterial( in vec3 pos, in vec3 nor )\n{\n    \n    float a = atan( pos.x, pos.z );\n    float r = length( pos.xz );\n    \n    // Blue colour\n    vec3 col = vec3( 0.0, 0.0, 1.0 );\n    \n    // Mix to red\n    float f = fbm( pos );\n    col = mix( col, vec3( 1.0, 0.0, 0.0 ), f );\n    \n    return col;\n\n}\n\nfloat map( vec3 p )\n{\n\n    float wave = texture( iChannel0, vec2( 0.0, 0.85 ) ).x;\n    // Change this to a lower number if there is too much distortion\n    wave *= 0.12;\n    \n    float r = 1.0 + 0.15 * cos( 5.0 * atan( p.x, p.y ) ) + 0.4 * p.z;\n    \n    float t = fbm( p + wave + ( iTime * 0.5 ) - r );;\n    \n    float plane = p.y + 1.8;\n    \n    float sphere = length( p ) - ( 2.0 * t );\n    \n    if( plane < sphere ) sphere = plane;\n    \n    return sphere;\n    \n}\n\nvec3 grad( vec3 p )\n{\n    \n    vec2 e = vec2( 0.0, EPS );\n    vec3 n = vec3( map( p + e.yxx ) - map( p - e.yxx ),\n                   map( p + e.xyx ) - map( p - e.xyx ),\n                   map( p + e.xxy ) - map( p - e.xxy )\n     \t\t\t\t);\n    return n;\n\n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        \n        float h = map( ro + rd * t );\n        \n        if( h < 0.001 ) return 0.0;\n        res = min( res, 4.0 * h / t );\n        t += h;\n    \n    }\n    \n    return res;\n    \n}\n\nvec3 randomSphereDir(vec2 rnd)\n{\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\n\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(map( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\n\tvec3 pos = ro + rd * t;\n    vec3 n = normalize( grad( pos ) );\n    \n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 ref = reflect( rd, n );\n    \n    // AO from XT95 at: https://www.shadertoy.com/view/4sdGWN \n    \n    float a = ambientOcclusion( pos, n, 4.0, 2.0 );\n    float dif = max( 0.0, dot( n, lig ) );\n    float con = 1.0;\n    float sha = softShadows( pos, lig );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    float amb = 0.5 + 0.5 * n.y;\n    float bac = max( 0.0, 0.2 + 0.8 * dot( n, blig ) );\n    float rim = pow( 1.0 + dot(n, rd), 2.0 );\n    \n    vec3 col = con * vec3( 0.1, 0.15, 0.2 );\n    col += amb * vec3( 0.1, 0.15, 0.2 );\n    col += dif * vec3( 1.0, 0.97, 0.85 ) * sha;\n    col += bac * vec3( 1.0, 0.97, 0.85 ) * bac;\n    \n    col = sqrt( col );\n    col *= 0.6;\n    \n    if( pos.y > -1.79 )\n    {\n    \n    \tcol *= flowerMaterial( pos, n );\n        \n    }\n    \n    else\n    \n    {\n    \n        vec3 x = texture( iChannel1, pos.xz, 1.0 ).xyz;\n        col *= x;\n    }\n    \n    col += 0.1 * rim;\n    col += 1.0 * spe;\n    col *= a;\n    \n    return col;\n \n}\n\n// Camera taken from symbol of chaos by lsdlive https://www.shadertoy.com/view/4stczB\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) {\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 left = cross(vec3(0, 1, 0), fwd);\n\tvec3 up = cross(fwd, left);\n\treturn normalize(fwd + uv.x*left + up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec4 mouse = iMouse / iResolution.xyxy;\n    \n    float dt = iTime * .3;\n\tvec3 ro = vec3( 2.5 * cos(dt), 1.0, -2.5 * sin(dt));\n    vec3 ta = vec3(0, 0, 0);\n\tvec3 rd;\n\n\trd = camera(ro, uv, ta);\n\n    float t = 0.0; float d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t );\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    }\n    \n    // Time varying pixel color\n    vec3 col;\n    \n    if( d < EPS )\n    {\n    \n        col = shade( ro, rd, t );\n        \n    }\n    else\n    {\n        col = mix( vec3( 0.1, 0.10, 0.2 ), vec3( 0.3, 0.2, 0.1 ), uv.y );\n    \n    }\n\n    // Output to screen\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 13823,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/shponglemusic/how-the-jellyfish-jumped-up"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}