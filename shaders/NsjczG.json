{
    "Shader": {
        "info": {
            "date": "1643706363",
            "description": "potate",
            "flags": 0,
            "hasliked": 0,
            "id": "NsjczG",
            "likes": 12,
            "name": "Line texture",
            "published": 3,
            "tags": [
                "texture",
                "lines",
                "paper",
                "recreation"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "\n// Recreation of the texture from here: https://www.reddit.com/r/generative/comments/shm1f3/tangled_strings/?utm_source=share&utm_medium=ios_app&utm_name=iossmf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(1);\n    uv.y += iTime*0.1 + 10.;\n    \n    for(float i = 0.; i < 471.; i++){\n        // Bunch of random dicerolls.\n        float ra = hash11(i);\n        float rb = hash11(i + 1.5);\n        float rc = hash11(i+0.61);\n        float rd = hash11(i+0.21);\n        \n        \n        // Get random repetition distance.\n        float repd = mix(0.1,0.2,ra);\n        vec2 p = uv + rb * 100.;\n        \n        // Do vertical strokes, based on chance.\n        // The repetition distance is reduced.\n        if(hash11(i + 0.15) < 0.1){\n            p *= rot(0.5*3.14);\n            repd *= 0.5;\n        }\n        // Just offset uv a bit.\n        p.x -= valueNoise(vec2(p.y)*3. + i, 1.).x*0.01;\n        \n        \n        \n        // Repeat space.\n        // Keep id in vec2 id.\n        vec2 id = floor(p/repd);\n        p = pmod(p,repd);\n        \n        // Bail out, based on chance from the id.\n        if(hash12(id + rc + 0.15) < 0.36){\n            continue;\n        }\n        \n        // Random line height.\n        float h = hash12(id + rd)*repd*0.4;\n        // Line SDF\n        float sd = udSegment( p, vec2(0,h), vec2(0,-h));\n        // Line SDF offset by noise.\n        sd -= valueNoise(vec2(p.y)*40. + i, 1.).x*0.001;\n        \n        // Line opacity.\n        float lineWeight = hash12(id + ra);\n        lineWeight = pow(lineWeight,5.)*0.15;\n        \n        // Fade out line.\n        sd += smoothstep(h/2.,h,abs(p.y))*0.003;\n        \n        // Draw.\n        col = mix(\n            col,\n            vec3(0),\n            smoothstep(0.0018,0.,sd)*lineWeight\n        );\n        \n        \n    }\n\n    col *= 0.9;\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Line SDF from iq.\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n// Hashes from Dave Hoskins\nfloat hash11(float p)\n{\n    p += 1.5;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat hash12(vec2 p)\n{\n    p += 0.2512;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec4 hash42(vec2 p)\n{\n    p += 1.;\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\nvec4 valueNoise(vec2 t, float w){\n    vec2 fr = fract(t);\n    vec2 fl = floor(t);\n\treturn \n        mix(\n            mix( \n                hash42(vec2(fl.x, fl.y)),\n                hash42(vec2(fl.x, fl.y + 1.)),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n            mix( \n                hash42(vec2(fl.x + 1.,fl.y)),\n                hash42(vec2(fl.x + 1.,fl.y + 1.)),\n            \tsmoothstep(0.,1.,fr.y)\n            ),\n        smoothstep(0.,1.,pow(fr.x, abs(w)))\n    );\n}\n\n// space repetition\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n// rotation\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}