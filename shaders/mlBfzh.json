{
    "Shader": {
        "info": {
            "date": "1693752662",
            "description": "So I was messing around build a raymarched for a terminal window\n(Silly idea) so I needed a simple raytracer that look \"ok\" in \n80x60 resolution\nBuild this simple raymarched egg\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mlBfzh",
            "likes": 12,
            "name": "A simple raymarched egg",
            "published": 3,
            "tags": [
                "simple",
                "egg"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "// CC0: A simple raymarched egg\n//  So I was messing around build a raymarched for a terminal window\n//  (Silly idea) so I needed a simple raytracer that look \"ok\" in \n//  80x60 resolution\n//  Build this simple raymarched egg\n//  Thought it could be nice to share as I believe shadertoy benefit\n//  both from overworked glass shaders like my last but also simpler ones\n//  like this\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float PI                  = acos(-1.)   ;\nconst float TAU                 = 2.0*PI      ;\nconst float TOLERANCE           = 1.0E-2      ;\nconst float MAX_RAY_LENGTH      = 20.         ;\nconst float NORM_OFF            = 0.001       ;\nconst float MAX_RAY_MARCHES     = 50.0        ;\nconst float MAX_SHADOW_MARCHES  = 25.0        ;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst vec3 SUNDIR           = normalize(vec3(1.0, 1.2, 1.0))   ;\nconst vec3 SKYDIR           = normalize(vec3(-1.0, 3.0, -1.0))   ;\nconst vec3 SKYCOL           = HSV2RGB(vec3(0.55, 0.8, 0.8));   \nconst vec3 GROUNDCOL        = HSV2RGB(vec3(0.15, 0.8, 0.8));   \nconst vec3 EGGCOL           = HSV2RGB(vec3(50./360., 0.24, 1.0));\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d/\nfloat egg(vec2 p, vec2 dim) {\n  const float k = sqrt(3.0);\n  p.x = abs(p.x);\n  float r = dim.x - dim.y;\n  return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n          (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                            length(vec2(p.x+r,p.y    )) - 2.0*r) - dim.y;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat egg(vec3 p, vec3 dim) {\n  // More specifically this is the opRevolution from IQ's article that allows\n  //  to use a 2D distance field and rotate it around Y axis to produce a 3D distance field\n  //  Very useful.\n  vec2 q = vec2(length(p.xz) - dim.z, p.y);\n  return egg(q, dim.xy);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// Distance field functio for egg\nfloat df(vec3 p) {\n  // Add a bounce to it\n  float ft = fract(TIME)-0.5;\n  p.y += -(0.25-ft*ft);\n  return egg(p, 3.0*vec3(1.0, 0.5, 0.))-0.25;\n}\n\n// Raymarcher function with a small tweak to make normals around edges less horrible\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t     = 0.0;\n  vec2 nti = vec2(MAX_RAY_MARCHES,0);\n\n  float i;\n  for (i = 0.0; i < MAX_RAY_MARCHES; ++i) {\n    if (t > MAX_RAY_LENGTH) break;\n    float d = df(ro + rd*t);\n    if (d<nti.x) nti = vec2(d,t);\n    if (d < TOLERANCE) break;\n    t += d;\n  }\n\n// This is the tweak\n  if(i==MAX_RAY_MARCHES) t = nti.y;\n\n  return t;\n}\n\n\n// Computes the normal of the egg by basically derivate the distance field\n//  and normalize the derivate\nvec3 normal(vec3 pos) {\n  vec2 eps = vec2(NORM_OFF, 0.0);\n  return normalize(vec3(\n      df(pos+eps.xyy)-df(pos-eps.xyy)\n    , df(pos+eps.yxy)-df(pos-eps.yxy)\n    , df(pos+eps.yyx)-df(pos-eps.yyx))\n    );\n}\n\n// Common way to cheat soft-shadows around a distance field.\nfloat softShadow(vec3 ps, vec3 ld, float mint, float k) {\n  \n  float res = 1.0;\n  float t = mint*6.0;\n  for (float i=0.; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    res = min(res, k*d/t);\n    if (res < TOLERANCE) break;\n    t += max(d, mint);\n  }\n  return clamp(res, 0.0, 1.0);\n}\n\n// Computes the color given a ray origin and a ray direction\nvec3 color(vec3 ro, vec3 rd) {\n  const vec4 pdim = vec4(normalize(vec3(0.0, 1.0, 0.0)), 3.);\n  float tp = rayPlane(ro, rd, pdim);\n\n  float te = rayMarch(ro, rd);\n\n  vec3 col = vec3(0.0);\n  if (te < MAX_RAY_LENGTH && (tp < 0.0 || te < tp)) {\n    // We hit the Egg\n    vec3 ep = ro+rd*te;\n    vec3 en = normal(ep);\n    \n    // Simple diffuse\n    float sunDif = max(dot(en, SUNDIR), 0.0);\n    // Fake diffuse from the sky, should sample the sky randomly and accumulate\n    //  but that's expensive!\n    float skyDif = max(dot(en, SKYDIR), 0.0);\n    \n    col += 0.1*GROUNDCOL+ sunDif+skyDif*sqrt(SKYCOL);\n    col *= EGGCOL;\n  } else if (tp > 0.) {\n    // We hit the Ground\n    vec3 gp = ro+rd*tp;\n    vec3 gn = pdim.xyz;\n\n    // Simple diffuse\n    float sunDif = max(dot(gn, SUNDIR), 0.0);\n    // Fake diffuse from the sky, should sample the sky randomly and accumulate\n    //  but that's expensive!\n    float skyDif = max(dot(gn, SKYDIR), 0.0);\n\n    float sf = softShadow(gp, SUNDIR, 0.1, 8.0);\n    col += 1.5*sf*sunDif+0.25*skyDif*sqrt(SKYCOL);\n    col *= GROUNDCOL;\n\n    // Fade out horizon, fine-tuned, no brain cells involved\n    col *= tanh(40.0*(rd.y*rd.y)+0.125);\n  } else {\n    //  We hit the sky\n    col += SKYCOL;\n\n    // Make horizon more white, fine-tuned, no brain cells involved\n    col += 0.1/max(sqrt(rd.y), 0.2);\n  }\n\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 ro = vec3(0.0, 2.0, 10.0);\n  ro.xz *= ROT(0.1*TIME);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = vec3(0.0, 1.0, 0.0);\n\n  // Common way to set up orthagonal vectors that allows us to construct the ray direction\n  //  from the the pixel pos\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = color(ro, rd);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}