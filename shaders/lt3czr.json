{
    "Shader": {
        "info": {
            "date": "1531371674",
            "description": "You can do a lot with a byte. 'cmy' to toggle",
            "flags": 24,
            "hasliked": 0,
            "id": "lt3czr",
            "likes": 9,
            "name": "Bytebeat2",
            "published": 3,
            "tags": [
                "music",
                "bytebeat"
            ],
            "usePreview": 0,
            "username": "stellartux",
            "viewed": 588
        },
        "renderpass": [
            {
                "code": "//https://www.shadertoy.com/view/4dVBDd\n\nvoid mainImage( out vec4 O, in vec2 C ) {\n    vec2 uv = (C/iResolution.xy - .5);\n    uv.y += 1.;\n    vec3 col = vec3(0.);\n    \n    //yellow\n    if (texelFetch( iChannel0, ivec2(89,2),0 ).x==0.) {\n        if (uv.y-bytebeat(uv.x+iTime)>1.) {\n            col += vec3(.95,.92,.05);\n        }\n    }\n    \n    vec2 st = vec2(8.,4.) * C/iResolution.xy;\n    int counter = int(iTime * VSR);\n    \t\n    //cyan\n    if (texelFetch( iChannel0, ivec2(67,2),0 ).x==0.) { \n    \tcol.gb += .9 * float(1 & counter>>(int(8.-st.x)+8*int(st.y)));\n \t}\n\t\n    //magenta\n    if (texelFetch( iChannel0, ivec2(77,2), 0).x==0.) {\n   \t\tif (fract(st.x-.333)<.333) {\n            if ( (1 & mySong(counter)>>int(8.-st.x)) == 1) {\t\n                col = mix(col, vec3(1.,.1,.9), 0.8);\n            }\n    \t}\n    }\n \n    O.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* \nBytebeat2\nstellartux\nunlicense\n\nMaking bytebeat is similar to additive synthesis, in that \na tone is generated and then rhythmically silenced to produce music. \n\nWith additive synthesis, the primitive waveforms are sine, square, \ntriangle and sawtooth, which are then shaped by an impulse function or an LFO. \nThe flexibility of floats makes it easy to generate whichever frequency and\ntiming of impulse you need.\n\nWith bytebeat, the most easily accessible oscillator is the sample counter,\nt, which produces a sawtooth wave at 1/256th of the sample rate. \nSquare waves are also easily produced by masking off an individual bit of\nthe sample counter, 1&t>>n producing a square wave n+1 octaves below the \nsample rate. Low frequency square waves can be used as envelopes and for\nlogic to switch off individual notes or sections. \n\nHere is the Javascript version of this song before adaptation.\n\n127 + \n(random() * 64 - 32) * ((1&~t>>(11-1&~t>>10))&(1&~t>>9)) + \n((t>>16<=0)?0:(((( t * (32-5*(1&~t>>13)) / 27 ) & 0x55 )*2/3 - 32 ) * (1&~t>>9) * ((1&~t>>13&~t>>11) ^ (1&t>>14)))) +\n(((4&(t*((7&t>>11)|(8&t>>12&t>>11))/2))<<5) /3 -22) * (1&(~t>>9&~t>>8)) * (1&(t>>(16-(15&t>>14))|(t>>17))) * (1&~t>>19) +\n~t*t*(t>>14-((1&t>>18)*7&t>>12)&t>>10)%64/3 * (1&t>>19)\n\nbytebeat editor: https://greggman.com/downloads/examples/html5bytebeat/html5bytebeat.html\n\n*/\n\nint random(int t) {\n    // Not Javascript so we can't use Math.random()\n    // Went through quite a few trying to find one that sounds right\n    // Most hash functions I tried were too resonant in the high end\n    // This one has plenty of widely distributed high frequency noise\n    // It's a 1D variation of RANDOM_TYPE = 2 from this shader\n    // https://www.shadertoy.com/view/XtX3D4\n    return int(fract(cos(dot(vec2(t,~t^t>>9),vec2(23.14069263277926,2.665144142690225)))*123456.)*64.)-32;\n}\n\nint mySong (int t) {return\n    // start with some silence, bias DC to the midpoint\n    127 + \n    \n    // PERCUSSION\n    // uncomment to mute\n    //0*\n    \n    // make some white noise\n    random(t) * \n    // envelope and rhythmic modulation\n    // mask off the lowest bit\n    (1\n    // 16th note envelope\n    &~t>>9\n    // remove the 2nd and 5th 16th-notes\n    &~t>>(11-1&~t>>10)\n    ) + \n    \n    // BASS\n    // uncomment to mute\n    //0*\n    \n    // if it's too early for the bass, don't play the bass\n\t((t >> 16 <= 0) ? 0 :\n    \n    // bass oscillator\n    // start with a sawtooth\n    ((( t \n        // change which note is playing by\n        // multiplying the freqency by 1 or 32/27\n        * ( 27 + 5 * (1 & t >> 13) ) / 27 \n       // filter unwanted frequencies to shape the tone\n       & 0x55 \n      )\n      // reduce volume and remove DC offset\n      * 2/3 - 32 \n     )\n    \n     // 16th note envelope\n     * (1&~t>>9) \n     // don't play notes you don't want to play\n     * ((1&~t>>13&~t>>11) ^ (1&t>>14))\n    )) +\n    \n    // FIRST MELODY\n    //0*\n    // mask off a square  \n\t((( 4& ( t\n    \t// select some overtones\n        * ( (7&t>>11) | (8&t>>12&t>>11) ) / 2 )\n      \t)\t\n      // adjust volume, remove DC offset\n      << 5 ) / 3 - 22 ) \n    \n    // staccato 16th notes\n    * (1&~(t>>9|t>>8)) \n    // variations on removed notes throughout section\n    * (1&(t>>(16-(15&t>>14))|(t>>17))) \n\t// only play during the first section    \n    * (1&~t>>19) \n    +\n    \n    // SECOND MELODY\n    // 0*\n    // ringmod synth from rising and falling sawtooth waves \n\t((( (~t*t) \n       // needs a bitmask to not be awful\n       // works without this in javascript\n       &0xFF)\n      // change pitch every bar\n      *(t>>14\n        // sometimes quickly mangle the pitch for warbly noises\n        -((1&t>>18)*(7&t>>12))\n        // 8th note envelope\n        &t>>10)\n      //filter bass and reduce volume\n      %64) /3) \n    // only play during the second section\n    * (1&t>>19)\n    ;}\n\n#define VSR 8000.\nfloat bytebeat (float time) {\n    // Get the current sample number according to the virtual sample rate\n    int t = int(time * VSR);\n    // Apply the bytebeat formula\n    int byte = mySong(t);\n    // Convert bytebeat back to float\n    return float(byte % 256) / 128. - 1.;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define VOLUME .25\nvec2 mainSound( in int samp, float time )\n{\n\treturn vec2(bytebeat(time) * VOLUME);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}