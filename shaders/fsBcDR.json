{
    "Shader": {
        "info": {
            "date": "1643301446",
            "description": "SPACE for contrast enhancement.\ntry #def hash = float hashf vs int hashi\nNot visible stat difference, but  float hash get artifacts after a few thousand lines.\n\nbetter use x64 acceleration ",
            "flags": 48,
            "hasliked": 0,
            "id": "fsBcDR",
            "likes": 10,
            "name": "cumulated random lines",
            "published": 3,
            "tags": [
                "random",
                "hash",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 351
        },
        "renderpass": [
            {
                "code": "#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(U) * R.x/2. / float(iFrame);  // normalize cumul\n    if ( keyToggle(32) ) O = (O-.5) *3. + .5;\n    \n    O = sqrt(O);                        // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define hash hashi  // hashi or hashf\n\nvec3 hashi( int v ) { // --- integer hash from https://www.shadertoy.com/view/XlXcW4\n    uint k = 1103515245U;  // GLIB C\n    uvec3 x = uvec3(v,k,k+uint(v));  // attention: v = uvec3(v) is horrible\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)/float(0xffffffffU);\n}\nvec3 hashf(int v) { // --- float hash\n    return fract(sin(float(v) *vec3(127.1,311.7, 269.5)) *43758.5453123);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( iFrame < 1 ) { O-=O; return; }\n    O.xyz = hash(iFrame);\n    vec2 p = O.xy*R/R.y,                         // choose a random line\n         d = cos( 6.28*O.z + vec2(0,1.57) );\n    O = T(U);\n    p -= U/R.y; p -= dot(p,d)*d;                 // vector distance to line\n    float l = length(p);\n    O += smoothstep( 1./R.y, 0., l );            // cumulates lines\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R    iResolution.xy\n#define T(U) texelFetch(iChannel0, ivec2(U), 0 )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}