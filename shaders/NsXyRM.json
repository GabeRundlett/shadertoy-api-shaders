{
    "Shader": {
        "info": {
            "date": "1641865915",
            "description": "e",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXyRM",
            "likes": 9,
            "name": "Simple Fractal Idea",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "mat2 M(float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n   \n    float th = 0.5 * (1. + thc(4., iTime)) * h21(floor(10. * uv)) - 0.1 * iTime;\n    uv = abs(M(th) * uv );\n    \n    float m = 0.18;\n    float n = 6.;\n    for (float i = 0.; i < n; i++) {\n        th += 0.3 * (1.-i/n) * thc(2., 4. * th - iTime);\n        uv = abs(M(th) * (uv - m));\n        m *= 0.5;\n    }\n\n    float d = mlength(uv);\n    float s = step(d, 1.4 * m);\n    \n    fragColor = vec4(s);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}