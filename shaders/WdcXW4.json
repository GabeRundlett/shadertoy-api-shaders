{
    "Shader": {
        "info": {
            "date": "1571937042",
            "description": "Retro",
            "flags": 0,
            "hasliked": 0,
            "id": "WdcXW4",
            "likes": 26,
            "name": "Shadertober 24 Retro -jaburns",
            "published": 3,
            "tags": [
                "raymarch",
                "dither",
                "gameboy",
                "lowres"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 674
        },
        "renderpass": [
            {
                "code": "#define PIXELATION    3. \n#define DITHER        1\n#define DITHER_LEVELS 3.\n#define EPS 0.001\n\n// ===== https://iquilezles.org/articles/distfunctions =====\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCappedCylinder( vec3 p, float r, float h, float r0 )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - r0;\n}\n\n// ===================================================================================\n\nfloat dither( float v, vec2 fragCoord )\n{\n    float x = v * DITHER_LEVELS;\n    \n    int ditherLevel = int(floor(fract( x ) * 4.));\n    \n    float dither = 0.;\n    \n    int ix = int(fragCoord.x);\n    int iy = int(fragCoord.y);\n\n    if (ditherLevel == 1) {\n        if (ix % 4 == (2*iy) % 4) {\n            dither = 1.;\n        }\n    }\n\n    else if (ditherLevel == 2) {\n        if (ix % 2 != iy % 2) {\n            dither = 1.;\n        }\n    }\n    \n    else if (ditherLevel == 3) {\n        if (ix % 4 != (2*iy) % 4) {\n            dither = 1.;\n        }\n    }\n\n    return floor(x + dither) / DITHER_LEVELS;\n}\n\nmat2 rot( float theta )\n{\n    float c = cos( theta );\n    float s = sin( theta );\n    return mat2( c, s, -s, c );\n}\n\nfloat gameboyBox( vec3 p, vec3 b, float edgeRadius, float cornerRadius )\n{\n    float box = sdRoundBox( p, b, edgeRadius );\n    float cutout = sdRoundBox(\n        p - vec3( b.x, -b.y, 0 ),\n        vec3( cornerRadius, cornerRadius, b.z + .1 ),\n        0.\n    );\n    float cyl = sdCappedCylinder(\n        (p - vec3( b.x - cornerRadius, -b.y + cornerRadius, 0 )).xzy,\n        b.z,\n        cornerRadius,\n        edgeRadius\n    );\n        \n    return min( max( box, -cutout ), cyl );\n}\n    \nfloat map( vec3 p )\n{\n    // Body and screen\n    \n    float body = gameboyBox( p, vec3( .90, 1.48, .32 ), .05, .5 );\n    float chrome = gameboyBox(\n        p - vec3(0, .6, .37),\n        vec3( .8, .6, .1 ), 0., .3\n    );\n    float screen = sdRoundBox(\n        p - vec3(0, .6, .3),\n        vec3( .5, .5, .05 ),\n        0.\n    );\n    body = min( max( body, -chrome ), screen );\n    \n    // Buttons\n    \n    const float UP = .1;\n    \n    float A = sdCappedCylinder(\n        (p - vec3( .66, -.5+UP, .35 )).xzy,\n        .1, .1, .01\n    );    \n    float B = sdCappedCylinder(\n        (p - vec3( .36, -.7+UP, .35 )).xzy,\n        .1, .1, .01\n    );\n    body = min( body, min( A, B ) );\n    \n    // D-pad\n    \n    float Dh = sdRoundBox(\n        p - vec3(-.53, -.65+UP, .35),\n        vec3( .2, .05, .1), .01);\n\tfloat Dv = sdRoundBox(\n        p - vec3(-.53, -.65+UP, .35),\n        vec3( .05, .2, .1), .01);\n    float Dpad = max( min( Dh, Dv ), -( length(p - vec3(-.53, -.65+UP, .5)) - .07 ));\n    \n    body = min( body, Dpad );\n    \n    // Start/select\n\n    vec3 q = p - vec3(.1, -1.05, .32);\n    q.xy *= rot(.6);\n    float st = sdRoundBox(q, vec3( .1, .0, .1), .03);\n    \n    q = p - vec3(-.2, -1.05, .32);\n    q.xy *= rot(.6);\n    float se = sdRoundBox(q, vec3( .1, .0, .1), .03);\n\n    body = min( body, min( st, se ));\n\n    // Detail\n    \n    float topLine = sdRoundBox(\n        p - vec3(0, 1.33, .45),\n        vec3( 1., .01, .1), .0);\n\n    float topLineA = sdRoundBox(\n        p - vec3(-.75, 1.48, .45),\n        vec3( 0.01, .15, .1), .0);\n    \n    float topLineB = sdRoundBox(\n        p - vec3(.75, 1.48, .45),\n        vec3( 0.01, .15, .1), .0);\n\n    float topCuts = min( topLine, min( topLineA, topLineB ));\n    \n    body = max( body, -topCuts );\n    \n    // Speaker    \n    float speaker;\n    const vec2 SOFF = .6*vec2( .1, .1 );\n    for( int i = 0; i < 6; ++i ) {\n        q = p - vec3(.5+SOFF.x*float(i), -1.4+SOFF.y*float(i), .45);\n        q.xy *= rot(-3.14159 / 4.);\n        speaker = sdRoundBox(q, vec3( .2, .01, .11), .0);\n        body = max( body, -speaker );\n    }    \n           \n    return body;\n}\n\nstruct March\n{\n    vec3 pos;\n    float dist;\n    float ao;\n};\n    \nMarch march( vec3 ro, vec3 rd )\n{\n    float dist, totalDist = 0.;\n    \n    float i = 0.;\n    for(; i < 50.; ++i )\n    {\n        dist = map( ro );\n        if( dist < EPS ) break;\n        totalDist += dist;\n        if( totalDist > 100. ) break;\n        ro += rd * dist;\n    }\n    \n    return March( ro, dist < EPS ? totalDist : -1., i / 100. );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord = floor( fragCoord / PIXELATION ) * PIXELATION;\n    vec2 uv = fragCoord/iResolution.yy - vec2( .5 * iResolution.x / iResolution.y, .5 );\n    \n    vec3 ro = vec3( 0, 0, 4 );\n    vec3 rd = normalize( vec3( uv, -1 ));\n    \n    mat2 sway = rot( .5 * sin( iTime ) );\n    mat2 pitch = rot( .3 * cos( .7 * iTime ) );\n    \n    ro.xz *= sway;\n    rd.xz *= sway;\n    \n    ro.zy *= pitch;\n    rd.zy *= pitch;\n\n\n    March m = march( ro, rd );\n    \n    float l = 0.;\n    \n    if( m.dist >= 0. )\n    {\n        l = clamp( exp( -.6 * (m.dist - 3.3) ) - 3.*m.ao, 0., 1. );\n        #if DITHER\n       \t    l = dither( l, fragCoord );\n        #endif\n    }    \n            \n     vec3 c = mix(\n        vec3(101, 131, 97) * .25,\n        vec3(249, 222, 121),\n        l\n     ) / 255.;\n\n    \n    fragColor = vec4( c, 0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}