{
    "Shader": {
        "info": {
            "date": "1495251340",
            "description": "Having fun with noise and sdfs. Click to jump. \\o/",
            "flags": 32,
            "hasliked": 0,
            "id": "ldfBR4",
            "likes": 3,
            "name": "Simple Noisy \"Game\"",
            "published": 3,
            "tags": [
                "noise1dgame"
            ],
            "usePreview": 0,
            "username": "fscur",
            "viewed": 630
        },
        "renderpass": [
            {
                "code": "#define EPSILON 1e-3\n#define PI 3.141592\n\nstruct Terrain\n{\n\tfloat speed;\n    float minHeight;\n    float maxHeight;\n};\n\nfloat rand(float x)\n{\n\treturn fract(sin(x + 178283.) * 53758.5453123);\n}\n\nfloat noise(float x)\n{\n\tfloat i = floor(x);\n    float f = fract(x);\n    \n    f = f * f * f * (f * (f * 6.0 - 15.0) + 10.0);\n    return mix(rand(i), rand(i+1.0), f);\n}\n\nfloat steep(float x)\n{\n\tfloat r = noise(x);\n    r+= noise(x * 2.0) * 0.6;\n    r+= noise(x * 4.0) * 0.25;\n    r+= noise(x * 8.0) * 0.125;\n    r+= noise(x * 16.0) * 0.0625;\n    return r/5.0;\n}\n\nvec3 blend(vec4 s, vec4 d)\n{\n    return (s.rgb * s.a) + (d.rgb * (1.0 - s.a));\n}\n\nfloat boxShape(vec2 uv, vec2 s)\n{\n    s = vec2(0.5)-s * 0.5;\n    uv += 0.5;\n    vec2 pos = smoothstep(s, s + vec2(EPSILON), uv);\n    pos *= smoothstep(s, s + vec2(EPSILON), vec2(1.0) - uv);\n    return pos.x * pos.y;\n}\n\nfloat roundShape(vec2 uv, vec2 center, float radius)\n{\n    float v = length(uv-center);\n    return smoothstep(v, v + EPSILON, radius);\n}\n\nfloat cloudShape(vec2 uv, vec2 s, float density)\n{\n    vec2 f = floor(uv);\n    \n    if (uv.y < 0.0 || rand(f.x) > density)\n        return 0.0;\n    \n    uv = fract(uv);\n    \n\tuv *= s;\n    uv -= s * 0.5;\n    \n    float r = 0.0;\n    \n    r = max(r, boxShape(uv+ vec2(0.0, 0.25), vec2(1.0, 0.5)));\n    r = max(r, roundShape(uv, vec2(0.5, 0.0), 0.5));\n    r = max(r, roundShape(uv, vec2(-0.5, -0.1), 0.4));\n    r = max(r, roundShape(uv, vec2(0.0, +0.1), 0.6));\n    \n    return r;\n}\n\nfloat calcTerrain(vec2 uv, Terrain terrain)\n{\n\treturn smoothstep(\n        uv.y - terrain.minHeight, \n        uv.y - terrain.minHeight + EPSILON, \n        steep(uv.x + terrain.speed) * (terrain.maxHeight - terrain.minHeight));\n}\n\nfloat calcTerrain(vec2 uv, float speed, float minHeight, float maxHeight)\n{\n\treturn smoothstep(\n        uv.y - minHeight, \n        uv.y - minHeight + EPSILON, \n        steep(uv.x + speed) * (maxHeight - minHeight));\n}\n\nfloat calcEnemies(vec2 uv, float speed, float radius, Terrain terrain)\n{\n\tvec2 uvb = uv;\n    uvb.y -= terrain.minHeight;\n    \n    float m = -iTime * speed - terrain.speed;\n    uvb.x -= m;\n    float s = 3.0;\n    uvb *= s;\n    vec2 f = floor(uvb);\n    \n    if (rand(f.x) > 0.2)\n        return 0.0;\n    \n    vec2 uva = vec2(fract(uvb.x), uvb.y);\n    uva.x *= 2.0;\n    uva.x -= 1.0;\n    uva.y *= 2.0;\n    \n    float h = steep(m + terrain.speed + (f.x + 0.5)/s) * (terrain.maxHeight - terrain.minHeight);\n    vec2 pos = vec2(0.0, h * 2.0 * s + radius);\n    return roundShape(uva, pos, radius);\n}\n\n\nfloat calcChar(vec2 uv, Terrain terrain)\n{\n    float radius = 0.07;\n    \n\tvec2 uva = uv;\n    uva.y -= terrain.minHeight;\n    \n    float h = steep(terrain.speed -0.8) * (terrain.maxHeight - terrain.minHeight);\n    float jump = texture(iChannel0, uv).x;\n    vec2 pos = vec2(-0.8, h + radius + jump);\n    return roundShape(uva, pos, radius);\n}\n\nfloat calcChar2(vec2 uv, Terrain terrain)\n{\n    float radius = 0.07;\n    \n\tvec2 uva = uv;\n    uva.y -= terrain.minHeight;\n    \n    float h = steep(terrain.speed -1.0) * (terrain.maxHeight - terrain.minHeight);\n    float jump = texture(iChannel0, uv).x;\n    vec2 pos = vec2(-1.0, h + radius + jump);\n    return roundShape(uva, pos, radius);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv.x *= aspect;\n    \n    vec3 color = vec3(0.2, 0.26, 0.44);\n    \n    float moon = roundShape(uv, vec2(0.0, 0.0), 0.95);\n    color = blend(vec4(vec3(0.9), moon), vec4(color, 1.0));\n    \n    float bigCloudsBack = cloudShape(uv - vec2(iTime * 0.01, 0.0), vec2(5.0), 0.2);\n    color = blend(vec4(vec3(1.0), bigCloudsBack), vec4(color, 1.0));\n    \n    float smallCloudsBack = cloudShape(uv - vec2(iTime * 0.025, -0.2), vec2(-9.0, 9.0), 0.6);\n    color = blend(vec4(vec3(1.0), smallCloudsBack), vec4(color, 1.0));\n    \n    float mountainBack = calcTerrain(uv, iTime * 0.0625, -.5, 3.5);\n    color = blend(vec4(vec3(0.1), mountainBack), vec4(color, 1.0)); \n    \n    float mountainFront = calcTerrain(uv, iTime * 0.125, -0.5, 1.0);\n    color = blend(vec4(vec3(0.2), mountainFront), vec4(color, 1.0));\n    \n    Terrain t;\n    t.speed = iTime * 0.5;\n    t.minHeight = -1.0;\n    t.maxHeight = 0.5;\n    \n    float terrain = calcTerrain(uv, t);\n\tcolor = blend(vec4(vec3(0.5), terrain), vec4(color, 1.0));\n    \n    float enemies = calcEnemies(uv, 0.5, 0.2, t);\n    color = blend(vec4(vec3(1.0, 0.0, 0.0), enemies), vec4(color, 1.0));\n    \n    float bigCloudsFront = cloudShape(uv + vec2(iTime * 0.1, 0.0), vec2(5.0), 0.3);\n    color = blend(vec4(vec3(1.0), bigCloudsFront), vec4(color, 1.0));\n    \n    float smallCloudsFront = cloudShape(uv + vec2(iTime * 0.05, -0.1), vec2(-6.0, 6.0), 0.4);\n    color = blend(vec4(vec3(1.0), smallCloudsFront), vec4(color, 1.0));\n    \n    float character = calcChar2(uv, t);\n    color = blend(vec4(vec3(1.0, 0.75, 0.0), character), vec4(color, 1.0));\n    \n    fragColor = vec4(color, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv.x *= aspect;\n    \n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n    if (iMouse.z < 0.0)\n    \tfragColor.y = 0.0;\n    \n    if (fragColor.x > 0.01)\n        fragColor.x -= 0.02;\n    else if (uv.x < 0.0 && fragColor.y == 0.0 && iMouse.z > 0.0)\n    \tfragColor = vec4(0.5, 1.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}