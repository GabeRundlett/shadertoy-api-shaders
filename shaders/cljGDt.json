{
    "Shader": {
        "info": {
            "date": "1674130342",
            "description": "I think this is a binary search? I needed a function which converges to a value by overestimating first.\nUse your mouse to move the target :)",
            "flags": 0,
            "hasliked": 0,
            "id": "cljGDt",
            "likes": 5,
            "name": "1D Binary Search",
            "published": 3,
            "tags": [
                "2d",
                "binary",
                "animation",
                "1d",
                "sort",
                "quad",
                "squares",
                "quadtree",
                "search",
                "find"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "// Function to converge towards, use mouse to move target\nbool check(float guess) {\n    float target = iMouse.z > 0.0 ? iMouse.x / iResolution.x : sin(iTime) * 0.5 + 0.5;\n\treturn guess > target;\n}\n\n// Each step, move another half towards the target\nfloat search(float maximum, int steps) {\n\tfloat current = maximum * 0.5;\n\tfloat move = current * 0.5;\n\tfor (int i = 0; i < steps; i++, move *= 0.5) {\n\t\tcurrent += check(current) ? -move : move;\n\t}\n\treturn current;\n}\n\n// Modified from https://www.shadertoy.com/view/lsS3Wc\nvec3 hue2rgb(float hue) {\n    return clamp(abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // X axis is the estimated value, Y axis is the step\n    float steps = 12.0;\n    float result = search(1.0, int(uv.y * steps));\n    float line = 0.002 / abs(uv.x - result);\n    fragColor.rgb = hue2rgb(floor(uv.y * steps) / steps) * line;\n    \n    // Vignette\n    fragColor.rgb += smoothstep(0.1, 1.0, length(uv - 0.5)) * 0.25;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}