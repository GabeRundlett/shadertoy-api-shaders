{
    "Shader": {
        "info": {
            "date": "1645625302",
            "description": "lots and lots of unused code",
            "flags": 0,
            "hasliked": 0,
            "id": "7dBBzz",
            "likes": 20,
            "name": "Arrow Flow Thing",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\n// sloppy (used in rand)\n#define time() 0.2 * iTime \n\nmat2 Rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// draws an arrow (d is used to make it go up + down)\nfloat arrow(vec2 uv, float d) {\n    float h = 0.1;//0.1 + 0.4 * thc(4.,2. * d);\n    float d1 = sdEquilateralTriangle(uv-vec2(0.,0.25 - h));\n    float s1 = step(d1, -0.5);\n\n    float d2 = sdBox(uv - vec2(0.,-h), vec2(0.05,0.2));\n    float s2 = step(d2, 0.);\n    \n    return max(s1, s2);\n}\n\nfloat h21 (vec2 a, float zoom) {\n    a = mod(a, zoom);\n    return fract(sin(dot(a, vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat rand(vec2 ipos, vec2 fpos, float sc) {\n    //float val = 20. * length(fpos-0.5) + h21(ipos, sc) - iTime;\n    float val = h21(ipos, sc) + time();\n    \n    float a = 6.28319 * h21(ipos, sc);\n    vec2 dir = vec2(cos(a), sin(a));\n    \n    float f = floor(val);\n    \n    float v1 = h21(0.01 * ipos + dir * f, sc);\n    float v2 = h21(0.01 * ipos + dir * (f + 1.), sc);  \n    \n    return mix(v1, v2, smoothstep(0., 1., fract(val)));\n}\n\nfloat rand2(vec2 ipos, vec2 fpos) {\n    // Generate values for each corner of uv\n    float sc2 = 301.; // can be anything \n    float l  = rand(ipos + vec2(1,0), fpos, sc2);\n    float t  = rand(ipos + vec2(0,1), fpos, sc2);\n    float tl = rand(ipos + vec2(1,1), fpos, sc2);\n    float id = rand(ipos + vec2(0,0), fpos, sc2);\n\n    // Smooth fpos so boundaries meet smoothly\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n    \n    // Box lerp between the corner values\n    return l  * sfpos.x      * (1.-sfpos.y)\n     \t + t  * (1.-sfpos.x) * sfpos.y\n         + tl * sfpos.x      * sfpos.y\n         + id * (1.-sfpos.x) * (1.-sfpos.y);   \n}\n\nvec2 movingTiles(vec2 uv, float sc, float spd){\n    float time = spd * iTime;\n    \n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv);\n    float h = rand2(ipos, fpos);\n       \n    float ft = 0.5 + 0.5 * cos(0. * atan(uv.x, uv.y) + 4. * uv.x - uv.y + 0. * length(uv) + 0.2 * pi * h + 4. * time);//fract(h*0.5 + time);\n    \n    \n   // ft = fract(time);\n   // ft = smoothstep(0., 1., ft);\n\n    \n    uv *= sc;\n    \n    float k = step(0.5, ft);//smoothstep(-0.,0.5, ft - 0.5);\n    uv.x +=      k * sign(fract(uv.y * 0.5) - 0.5) * ft * 2.;\n    uv.y += (1.-k) * sign(fract(uv.x * 0.5) - 0.5) * ft * 2.;\n\t\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float sc = 10.;\n    \n    // Cut uv into smaller uvs\n    vec2 ipos = floor(sc * uv);\n    vec2 fpos = fract(sc * uv);   \n    \n    float num = 301.; // can be anything\n    \n    float v = rand2(ipos, fpos);\n    //v *= step(v, 0.55);\n        \n    // Do the tile pattern\n    uv = movingTiles(uv, sc, -0.2);\n    uv *= 2.;\n    \n    ipos = floor(uv) + 0.5;\n    fpos = fract(uv) - 0.5;\n    \n\n    // Generate circle using radius we've obtained\n    float d = length(fpos);\n    float k = 10. / iResolution.y;\n    float s = smoothstep(-k, k, -d + 0.5 * v);\n    \n    float w = 0.1 * v;\n    fpos *= Rot(2. * pi * v);\n    s = max(step(abs(fpos.x), w), step(abs(fpos.y), w));\n    s = step(mlength(fpos), 0.5 * v);\n    \n    //if (v > 0.5)\n        fpos = abs(fpos) - 0.21;\n    s = arrow(fpos, 0.);\n    vec3 col = vec3(s);\n\n    vec3 e = vec3(1.);\n    col *= 4. * pal(h21(ipos), e, e, e, 0.22 * vec3(0,1,2)/3.);\n    col = clamp(col, 0., 1.);\n    //col += 0.4 * (1.-s) * pal(v, e, e, e, 0.2 * vec3(0,1,2)/3.);\n    col = mix(col, h21(ipos) *  s * vec3(fpos, 2.), 0.5 + 0.5 * thc(7., length(ipos)/sc - 0.5* iTime));\n   // col = vec3(fpos + 0.5, 1.);\n    col += 0.1;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}