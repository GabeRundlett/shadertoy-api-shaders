{
    "Shader": {
        "info": {
            "date": "1510092805",
            "description": "Brannan filter emphasizes the grey and green colors, and paints a metallic tint upon the photos. \nClick the mouse for comparison. \nI write this shader to stylize photos in batch on my own ShaderToy renderer :-) (To be open-sourced soon...)",
            "flags": 0,
            "hasliked": 0,
            "id": "4lSyDK",
            "likes": 14,
            "name": "Brannan Filter",
            "published": 3,
            "tags": [
                "2d",
                "filter",
                "contrast",
                "instagram",
                "image",
                "brightness",
                "levels",
                "brannan"
            ],
            "usePreview": 1,
            "username": "starea",
            "viewed": 2057
        },
        "renderpass": [
            {
                "code": "/** \n * Brannan Filter by Ruofei Du (DuRuofei.com)\n * Demo: https://www.shadertoy.com/view/4lSyDK\n * starea @ ShaderToy,License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * https://creativecommons.org/licenses/by-nc-sa/3.0/\n * \n * Reference: \n * [1] Overlay function forked from ben's https://www.shadertoy.com/view/XdS3RW\n * [2] starea's Dotted Drawing / Sketch Effect: https://www.shadertoy.com/view/ldSyzV\n * [3] starea's BrightnessContrastSaturationHue: https://www.shadertoy.com/view/MdjBRy\n *\n * Write-ups:\n * [1] http://blog.ruofeidu.com/implementing-instagram-filters-brannan/\n **/\n\nfloat overlay(in float s, in float d )\n{\n\treturn (d < 0.5) ? 2.0 * s * d : 1.0 - 2.0 * (1.0 - s) * (1.0 - d);\n}\n\nvec3 overlay(in vec3 s, in vec3 d )\n{\n\tvec3 c;\n\tc.x = overlay(s.x,d.x);\n\tc.y = overlay(s.y,d.y);\n\tc.z = overlay(s.z,d.z);\n\treturn c;\n}\n\nfloat greyScale(in vec3 col) \n{\n    return dot(col, vec3(0.3, 0.59, 0.11));\n}\n\nmat3 saturationMatrix( float saturation ) {\n    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );\n    float oneMinusSat = 1.0 - saturation;\n    vec3 red = vec3( luminance.x * oneMinusSat );\n    red.r += saturation;\n    \n    vec3 green = vec3( luminance.y * oneMinusSat );\n    green.g += saturation;\n    \n    vec3 blue = vec3( luminance.z * oneMinusSat );\n    blue.b += saturation;\n    \n    return mat3(red, green, blue);\n}\n\nvoid levels(inout vec3 col, in vec3 inleft, in vec3 inright, in vec3 outleft, in vec3 outright) {\n    col = clamp(col, inleft, inright);\n    col = (col - inleft) / (inright - inleft);\n    col = outleft + col * (outright - outleft);\n}\n\nvoid brightnessAdjust( inout vec3 color, in float b) {\n    color += b;\n}\n\nvoid contrastAdjust( inout vec3 color, in float c) {\n    float t = 0.5 - c * 0.5; \n    color = color * c + t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb; \n    if (iMouse.z > 0.5) {\n\t\tfragColor = vec4(col, 1.0);\n        return;\n    }\n    vec3 grey = vec3(greyScale(col)); \n    col = saturationMatrix(0.7) * col; \n    grey = overlay(grey, col);\n    col = mix(grey, col, 0.63); \n    levels(col, vec3(0., 0., 0.) / 255., vec3(228., 255., 239.) / 255., \n                vec3(23., 3., 12.) / 255., vec3(255.) / 255.); \n    brightnessAdjust(col, -0.1); \n    contrastAdjust(col, 1.05); \n    vec3 tint = vec3(255., 248., 242.) / 255.;\n    levels(col, vec3(0., 0., 0.) / 255., vec3(255., 224., 255.) / 255., \n                 vec3(9., 20., 18.) / 255., vec3(255.) / 255.); \n    col = pow(col, vec3(0.91, 0.91, 0.91*0.94)); \n    brightnessAdjust(col, -0.04); \n    contrastAdjust(col, 1.14);   \n    col = tint * col;\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}