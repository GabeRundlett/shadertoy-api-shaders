{
    "Shader": {
        "info": {
            "date": "1690725662",
            "description": "Aqua Colors. Make it full screen and wait. Click to reset.",
            "flags": 32,
            "hasliked": 0,
            "id": "DtXyW4",
            "likes": 8,
            "name": "AquaColors V3",
            "published": 3,
            "tags": [
                "fractal",
                "generative"
            ],
            "usePreview": 0,
            "username": "ersh",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "// (C) Yury Ershov 2023\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// (C) Yury Ershov 2023\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iMouse.z > 0.) { RETV(vec4(0.)) }\n\n    ivec2 fragCoord_i = ivec2(fragCoord);\n    ivec2 iRes_i = ivec2(iResolution.xy);\n    ivec2 iRes_i_1 = iRes_i - ivec2(1, 1);\n\n#if SCROLL_DIR == 1\n    fragColor =\n        fragCoord_i.y < iRes_i_1.y ?\n        T(ivec2(fragCoord_i.x, fragCoord_i.y+1)) :\n        vec4(TL(ivec2(fragCoord_i.x, 0)), 1.);\n#elif SCROLL_DIR == 2\n    fragColor =\n        fragCoord_i.y > 0 ?\n        T(ivec2(fragCoord_i.x, fragCoord_i.y-1)) :\n        vec4(TL(ivec2(fragCoord_i.x, 0)), 1.);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Yury Ershov 2023\n\nfloat hash12(vec2 position, float s)  // s=50.\n{\n    vec2 p = (position + mod(iTime + float(iFrame)/37.9, 200.) * 1500. + s);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cc(in vec2 fragCoord, float c, float s) {\n    return fract(c + (hash12(fragCoord, s)-0.5)*CSPEED);\n}\n\nvec4 mcolr(in vec2 fragCoord, vec4 c, float d) {\n    return vec4(cc(fragCoord, c.r, 67.), cc(fragCoord, c.g, 42.), cc(fragCoord, c.b, 92.), c.a + d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 2 || iMouse.z > 0.) { RETV(\n#if INITSTYLE == 0\n        vec4(0.)\n#elif INITSTYLE == 1\n        vec4(hash12(fragCoord, 10.), hash12(fragCoord, 20.), hash12(fragCoord, 30.), 1.)\n#elif INITSTYLE == 2\n        vec4(\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x + 0.5, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x - 0.5, 0., 1.)) - 1., 2.))/2.,\n            1.)\n#endif\n    ) }\n\n    if (fragCoord.y > 1.) {\n        RETV(vec4(1., 0., 0., 1.));\n        return;\n    }\n\n    ivec2 fragCoord_i = ivec2(fragCoord);\n    ivec2 iRes_i = ivec2(iResolution.xy);\n    ivec2 iRes_i_1 = iRes_i - ivec2(1, 1);\n\n    if (hash12(fragCoord, 50.) > SPEED) { RET }\n\n    vec4 pt = T(ivec2(fragCoord_i.x, 0));\n    int sgn = hash12(fragCoord, 55.) > 0.5 ? 1 : -1;\n    float d = 1.;\n    vec4 pt1 = T(ivec2(fragCoord_i.x + sgn, 0));\n    if (pt1.a > pt.a) { pt = pt1; d = SIDE_WEIGHT; }\n    vec4 pt2 = T(ivec2(fragCoord_i.x - sgn, 0));\n    if (pt2.a > pt.a) { pt = pt2; d = SIDE_WEIGHT; }\n\n    fragColor = mcolr(fragCoord, pt, d);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Yury Ershov 2023\n\nfloat hash12(vec2 position, float s)  // s=50.\n{\n    vec2 p = (position + mod(iTime + float(iFrame)/37.9, 200.) * 1500. + s + 15.);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cc(in vec2 fragCoord, float c, float s) {\n    return fract(c + (hash12(fragCoord, s)-0.5)*CSPEED);\n}\n\nvec4 mcolr(in vec2 fragCoord, vec4 c, float d) {\n    return vec4(cc(fragCoord, c.r, 72.), cc(fragCoord, c.g, 62.), cc(fragCoord, c.b, 52.), c.a + d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 2 || iMouse.z > 0.) { RETV(\n#if INITSTYLE == 0\n        vec4(0.)\n#elif INITSTYLE == 1\n        vec4(hash12(fragCoord, 10.), hash12(fragCoord, 20.), hash12(fragCoord, 30.), 1.)\n#elif INITSTYLE == 2\n        vec4(\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x + 0.5, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x - 0.5, 0., 1.)) - 1., 2.))/2.,\n            1.)\n#endif\n    ) }\n\n    if (fragCoord.y > 1.) {\n        RETV(vec4(1., 0., 0., 1.));\n        return;\n    }\n\n    ivec2 fragCoord_i = ivec2(fragCoord);\n    ivec2 iRes_i = ivec2(iResolution.xy);\n    ivec2 iRes_i_1 = iRes_i - ivec2(1, 1);\n\n    if (hash12(fragCoord, 50.) > SPEED) { RET }\n\n    vec4 pt = T(ivec2(fragCoord_i.x, 0));\n    int sgn = hash12(fragCoord, 55.) > 0.5 ? 1 : -1;\n    float d = 1.;\n    vec4 pt1 = T(ivec2(fragCoord_i.x + sgn, 0));\n    if (pt1.a > pt.a) { pt = pt1; d = SIDE_WEIGHT; }\n    vec4 pt2 = T(ivec2(fragCoord_i.x - sgn, 0));\n    if (pt2.a > pt.a) { pt = pt2; d = SIDE_WEIGHT; }\n\n    fragColor = mcolr(fragCoord, pt, d);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SCROLL_DIR      2   // 1=UP  2=DOWN\n\n#define SPEED         0.5   // speed of horizontal change. 0.5 max\n#define CSPEED       0.01   // speed of color change\n\n#define SIDE_WEIGHT   0.8   // 1 or 0.5\n\n#define INITSTYLE       2   // 0=black  1=rnd  2=rainbow\n\n\n\n\n\n\n\n#define T(X)     texelFetch(iChannel0, X, 0)\n#define TL(X)    ((saw(texelFetch(iChannel1, X, 0).rgb)+saw(texelFetch(iChannel2, X, 0).rgb)+saw(texelFetch(iChannel3, X, 0).rgb))/3.)\n#define DD(X)    ((X).rgb != vec3(0., 0., 0.))\n#define D(X)     DD(T(X))\n#define RET      fragColor = texelFetch(iChannel0, fragCoord_i, 0); return;\n#define RETV(X)  fragColor = X; return;\n\n\n\nfloat saw(float x) { return 1.-abs(fract(x)-0.5)*2.; }\nvec3 saw(vec3 x) { return vec3(saw(x.r), saw(x.g), saw(x.b)); }\nvec4 saw(vec4 x) { return vec4(saw(x.r), saw(x.g), saw(x.b), x.a); }\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// (C) Yury Ershov 2023\n\nfloat hash12(vec2 position, float s)  // s=50.\n{\n    vec2 p = (position + mod(iTime + float(iFrame)/37.9, 200.) * 1500. + s + 27.);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cc(in vec2 fragCoord, float c, float s) {\n    return fract(c + (hash12(fragCoord, s)-0.5)*CSPEED);\n}\n\nvec4 mcolr(in vec2 fragCoord, vec4 c, float d) {\n    return vec4(cc(fragCoord, c.r, 63.), cc(fragCoord, c.g, 72.), cc(fragCoord, c.b, 67.), c.a + d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 2 || iMouse.z > 0.) { RETV(\n#if INITSTYLE == 0\n        vec4(0.)\n#elif INITSTYLE == 1\n        vec4(hash12(fragCoord, 10.), hash12(fragCoord, 20.), hash12(fragCoord, 30.), 1.)\n#elif INITSTYLE == 2\n        vec4(\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x + 0.5, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x, 0., 1.)) - 1., 2.))/2.,\n            (1. - pow(saw(clamp(fragCoord.x/iResolution.x - 0.5, 0., 1.)) - 1., 2.))/2.,\n            1.)\n#endif\n    ) }\n\n    if (fragCoord.y > 1.) {\n        RETV(vec4(1., 0., 0., 1.));\n        return;\n    }\n\n    ivec2 fragCoord_i = ivec2(fragCoord);\n    ivec2 iRes_i = ivec2(iResolution.xy);\n    ivec2 iRes_i_1 = iRes_i - ivec2(1, 1);\n\n    if (hash12(fragCoord, 50.) > SPEED) { RET }\n\n    vec4 pt = T(ivec2(fragCoord_i.x, 0));\n    int sgn = hash12(fragCoord, 55.) > 0.5 ? 1 : -1;\n    float d = 1.;\n    vec4 pt1 = T(ivec2(fragCoord_i.x + sgn, 0));\n    if (pt1.a > pt.a) { pt = pt1; d = SIDE_WEIGHT; }\n    vec4 pt2 = T(ivec2(fragCoord_i.x - sgn, 0));\n    if (pt2.a > pt.a) { pt = pt2; d = SIDE_WEIGHT; }\n\n    fragColor = mcolr(fragCoord, pt, d);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}