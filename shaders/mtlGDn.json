{
    "Shader": {
        "info": {
            "date": "1673129220",
            "description": "Studies in (pseudorandom) terrains with sine and cosine functions.",
            "flags": 64,
            "hasliked": 0,
            "id": "mtlGDn",
            "likes": 9,
            "name": "Sincos Terrain",
            "published": 3,
            "tags": [
                "raymarching",
                "terrain",
                "sine",
                "cosine"
            ],
            "usePreview": 0,
            "username": "Kris_Katur",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "// \"Sincos Terrain\"\n// 2023\n// by KÎ›TUR\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0001\n#define TAU 6.283185\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n////////  TERRAIN  ///////\n\nfloat map(vec3 p) {\n    \n    // basic shaping of plane\n    p.y -= smoothstep(5.,30.,abs(p.z))*3.;\n    p.y -= smoothstep(5.,30.,abs(p.x))*3.;\n    \n    // actual plane\n    float d = p.y;\n    \n    // sin cos madness\n    d += sin(p.x*.3)*2.9 * sin(p.z*.33+iTime*.3)*1.7 * sin(p.z*.45)*.31 +\n         cos(p.x*.2)*0.7 * cos(p.z*.21)*0.91 * cos(p.x*.71)*.8 +\n         sin(p.z*.51)*0.43 + sin(p.z*.31) * sin(p.x*.21);\n         \n    return d;\n}\n\n// RAYMARCHER\nfloat CastRay(vec3 ro, vec3 rd) {\n\tfloat t=0.;\n    float h=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*t;\n        h = map(p);\n        t += h;\n        if(t>MAX_DIST || abs(h)<SURF_DIST) break;\n    }\n    return t;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = map(p) - \n    vec3(map(p-e.xyy), map(p-e.yxy),map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 3, 5);\n    ro.xz *= Rot(-m.x*TAU+sin(iTime*.1));\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n\n    vec3 col = vec3(0);\n    vec3 bg_col = mix(col,vec3(.2,.3,.9),uv.y*uv.y*uv.y); //bg color fade\n    \n    float d = CastRay(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        col *= fract(p.x+sin(p.z*2.+iTime*2.)); //texture\n        col *= clamp(.03,1.,smoothstep(-2.,1.,p.y)); //darken \"valleys\"\n        col += max(0.,p.y)*.3; //brighter hilltops\n        col *= n * vec3(1.,.3,.5)*3.; //coloring\n    }\n    \n    col = mix(col, bg_col, 1.0 - exp2(-0.002 * d*d)); //bg color & fog\n    col = pow(col, vec3(.4545));  // gamma correction \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32107,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/french79music/03-between-the-buttons?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}