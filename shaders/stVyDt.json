{
    "Shader": {
        "info": {
            "date": "1662470195",
            "description": "from top to bottom:\n- Image of a white band on black background with chromatic aberration ( amount increasing to top, or Mouse.y ).\n- full spectrum sum from IR to f\n- full spectrum sum from f to UV\n- show spectrum",
            "flags": 0,
            "hasliked": 0,
            "id": "stVyDt",
            "likes": 28,
            "name": "chromatic aberration 3",
            "published": 3,
            "tags": [
                "spectrum",
                "color",
                "perception",
                "metameric"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 466
        },
        "renderpass": [
            {
                "code": "// variant of \"why sky color is not violet\" by FabriceNeyret2. https://shadertoy.com/view/ltSBRt\n// perception = int( intensity(f) * coneResponse(f) )\n// using very heuristical cone response. ( May try with: https://www.shadertoy.com/view/llKSDz )\n\n#define N 200.            // spectrum sampling rate\n\n#define RGB(f, fc) ( .5 + .5* cos(3.14*clamp(f-(fc),-1.,1.) ) ) // base lobe approximation\n#define EQ(f,a) ( abs(f-(a)) < .5/N )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    O -= O;\n    vec2 R = iResolution.xy;\n    U /= R;\n    float y = 7.*U.y, a = fract(y), \n          A = iMouse.z>0. ? iMouse.y/R.y : y >4. ? .5 * ( y-4.) / 3. : .05, // aberration amount\n          F = 2.*(2.*U.x-1.),\n          I, v=0., r=1.;    \n    if (a < 6./R.y && y < 5.) return;              // line separator\n    \n    for (float f=-2.; f<2.; f+=1./N) {             // --- color spectrum (normalized):\n        r = step( abs(F-f*A), .5 );\n        I =   y > 3. ?             r               // integrate filter intensity\n            : y > 2. ?      f<F  ? 1. : 0.         // sum from IR to F\n            : y > 1. ?      f>F  ? 1. : 0.         // sum from F to UV\n            :            EQ(f,F) ? 1. : 0. ;       // peak at F ( i.e. show full spectrum )\n       \n        v += I;\n        O[0] += I * ( RGB(f, -2./3.)*.7 + RGB(f, 2./3.)*.3);  // perceptive integration\n        O[1] += I * RGB(f,  0.   );\n        O[2] += I * RGB(f,  2./3.);\n    }\n    \n // if ( y > 1. ) O *= 2./v;                       // normalization by luminance\n    if ( y > 1. ) O /= N;\n    O = pow(O,vec4(1./2.2));                       // RGB to sRGB transform\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}