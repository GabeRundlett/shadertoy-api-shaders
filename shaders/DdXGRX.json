{
    "Shader": {
        "info": {
            "date": "1666478304",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "DdXGRX",
            "likes": 2,
            "name": "Fractal mosaic 26 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = vec2(1.,0.5);\n    return abs(fract((a+a2)*(a2.x+a2.y))-.5);\n}\n\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    vec2 uv = (fragCoord)/iResolution.y/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/2.;\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    for(int k = 0; k < 6; k++){\n        \n        //uv.x -= t1_(floor(uv/2.),floor(uv/2.))/2.;\n        uv.x -= 1./8.;\n        \n        t3 = uv.x > uv.y;\n        //uv.x -= floor(mod(uv.x*1.5,1.5));\n        //uv += fmod(uv.x*2.,2.)/2.;\n        \n        //uv = (fract(vec2(uv+vec2(.5,1.5))*2.)-.5)/2.;\n        \n        if(t3){ uv = uv.yx;t2 = -t2.yx;}\n        uv =\n            abs(.5+uv+t2)\n            //abs(.5-uv+t2)\n            //abs(-.5-uv+t2)\n            //abs(.5-uv-t2)\n        ;\n        t2 =\n            triangle_wave(uv+.5)\n        ;\n        uv = t2+triangle_wave(uv.yx);\n        float c1 =\n            uv.x-uv.y\n            //uv.x*uv.y\n        ;\n        if(t3 || uv.y < uv.x) col = vec3(col.yz,c1);\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  \n  float s1 =\n      8.;\n  //time += (floor(time*s1)+floor(time/s1))/s1;\n  float s2 = 8.,\n  m4 =\n      fmod(floor(time/s1)*floor(time*s1),2.)\n  ,\n  t=\n      time/(1.+m4)\n  ,\n  m1 =\n      fmod(t/s1,s2)\n      //fmod(time,s2)\n  ,\n  m3 =\n      fmod(floor(t*(s1))/(m1+.5),s2);\n  //t += (floor(t*s1)+floor(t/s1))/s1;\n  t /=\n      (1.+fmod(floor(t/s1-floor(t/s1)/s1)*floor(t*s1),2.))\n      //(1.+fmod(floor(time-floor(time)/s1)*floor(t*s1),2.))\n  ;\n  \n  t *=\n      s1*s1\n  ;\n\n    float m2 =\n      1. + fmod(floor(t/s1),s1)\n      //1. + fmod(floor(t/(1.+m1)),s1)\n      //1. + fmod(floor(t/s1/(1.+m3)),s1)\n  ;\n  \n  float a = 64.*((1.-sqrt(fract(t/s1))))*.2,\n\n  nb = time*pow(2.,(m3+m2)/5.+6.5);\n\n  return\n      //abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //vec2(fract(time*nb*.998/m2*s1)*a,fract(time*nb/m2*s1)*a)\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod(float a, float b){\n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a/2.),2.);\n    //a /= 1. + mod(floor(a/4.),2.);\n    //a /= 1. + mod(floor(a/8.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(floor(a/8.)/8.+floor(a)),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}