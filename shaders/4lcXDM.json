{
    "Shader": {
        "info": {
            "date": "1479824005",
            "description": "It needs antialiasing.\nIf anyone have an idea for implementing a fast antialiasing, tell me.\n\nEDIT: it's kinda done",
            "flags": 8,
            "hasliked": 0,
            "id": "4lcXDM",
            "likes": 27,
            "name": "Tesla coil",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "modeling",
                "glow",
                "tesla",
                "lightnings"
            ],
            "usePreview": 1,
            "username": "stduhpf",
            "viewed": 1950
        },
        "renderpass": [
            {
                "code": "//#define DARKNESS  //disable sky light (nice with the mod line 7)\n#define AA\nfloat seed =0.;\n\nvec3 rand13(float a)\n{\n    return vec3(fract(sin(16.594*a-seed*20.5)),\n                fract(sin(18.594*a)+seed)*.2+.4,//fract(sin(18.594*a)+seed)*.2+.3, // to make the lighnings hit the floor\n                fract(sin(46.85654*a+seed)));\n}\nfloat line( vec3 p, vec3 pa, vec3 pb, float r )\n{\n    vec3 a = p - pa, b = pb - pa;\n    float h = clamp( dot(a,b)/dot(b,b), 0.0, 1.0 );\n    return length( a - b*h ) - r;\n}\n\nfloat lightning(vec3 pos)\n{\n    float d =1e6;\n    vec3 p = vec3(0);\n    vec3 pp=p;\n    float t=10.; //fequency\n    vec3 r = 2.*rand13(0.+floor(t*iTime)/t)-1.;\n    for(float i =0.;i<20.;i++)\n    {\n        vec3 rdn=2.*rand13(i+floor(t*iTime*i/10.)/t)-1.;\n        rdn=mix(r,rdn,.3);\n        p+=rdn*.1;\n        r=rdn;\n        d=min(d,line(pos,p,pp,.001));\n        pp=p;\n    }\n    return max(d,-length(pos)+.1);\n}\nfloat Torus( vec3 p, vec2 t )\n{\n  t.x+=.0001*cos(100.*atan(p.x,p.z));\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat Cylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat Box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 un(vec2 a,vec2 b)\n{\n    return b.x<a.x?b:a;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 m = vec2(mod(iTime,15.)>3.?lightning(p):1e6,1.);\n    m=un(m,vec2(Torus(p,vec2(.1,.05)),3.));\n    m=un(m,vec2(Cylinder(p+vec3(0,.28,0),vec2(.04+.0001*cos(1000.*p.y),.2)),2.));\n     m=un(m,vec2(Cylinder(p+vec3(0,.19,0),vec2(.03,.2)),3.));   \n     m=un(m,vec2(Cylinder(p.xzy,vec2(.005,.1)),4.));\n     m=un(m,vec2(Cylinder(p.zxy,vec2(.005,.1)),4.));\n    m=un(m,vec2(Box(p+vec3(0,.45,0),vec3(.1)),6.));\n    m=un(m,vec2(Cylinder(p+vec3(0,.35,0),vec2(.06,.05)),3.));   \n\n    \n    m=un(m,vec2(p.y+.5,5.));\n    return m;\n}\n\n\nvec3 intsct(vec3 o, vec3 d)\n{\n    float t =0.;\n    float res = 1.;\n    for(int i=0;i<200;i++)\n    {\n        vec2 h = map(o+t*d);\n        if(h.x<0.001)\n            return vec3(t,h.y,res);\n        if(t>10.)\n            break;\n        if(h.y==1.)\n            res=min(res,8.*h.x/t);//glow, based on iq's soft shadows\n            t+=.8*h.x;\n     }\n    return vec3(t,0,res);\n}\n\nfloat ao(vec3 p, vec3 n)\n{\n    const float ao_it =5.;\n    float d=0.;\n    float sm =0.;\n    for(float i=1.;i<ao_it;i++)\n    {\n        d+=.03;\n        vec2 h = map(p+d*n);\n       if(h.y!=1.)\n        sm+=(d-h.x)/pow(2.,i);\n    }\n    return 1.-sm*16.;\n\n}\nfloat al(vec3 p, vec3 n)\n{\n    const float al_it =8.;\n    float d=0.;\n    float sm =0.;\n    for(float i=1.;i<al_it;i++)\n    {\n        d+=.07;\n        vec2 h = map(p+d*n);\n        if(h.y==1.)\n        sm+=(d-h.x)/pow(2.,i);\n    }\n    return sm*8.;\n\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(.0001,0);\n    vec3 n=  vec3 (map(p+e.xyy).x-map(p-e.xyy).x,map(p+e.yxy).x-map(p-e.yxy).x,map(p+e.yyx).x-map(p-e.yyx).x);\n    return normalize(n);\n}\nvec3 getcol(float i,vec3 p)\n{\n    if(i==1.)\n        return vec3(.8,.6,1);\n    if(i==2.)\n        return vec3(1,.4,.1)*.5;\n    if(i==3.)\n        return vec3(.2);\n    if(i==4.)\n        return vec3(.8);\n    if(i==5.)\n        return texture(iChannel1,p.xz).rgb;\n    if(i==6.)\n        return vec3(1.);\n    return vec3(1);\n}\nfloat getspec(float i)\n{\n    if(i==2.)\n        return .5;\n    if(i==3.)\n        return 1.;\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n   \n\n    seed = floor(iDate.w-iTime);\n\n\tvec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y; \n     vec2 mse =iMouse.xy/iResolution.x-vec2(.5,.5+(iResolution.y-iResolution.x)/(2.*iResolution.x));\n    mse*=8.;\n    if(iMouse.xy==vec2(0))\n        mse*=0.;\n    mat3 rot = mat3(1,0,0,0,cos(mse.y),sin(mse.y),0,-sin(mse.y),cos(mse.y))* mat3(cos(mse.x),0,sin(mse.x),0,1,0,-sin(mse.x),0,cos(mse.x));\n    vec3 ro = vec3(0,-.2,-1)*rot;\n    vec3 rd = normalize(vec3(uv,2.))*rot;\n    vec3 f = intsct(ro,rd);\n    vec3 col =texture(iChannel0,rd*vec3(1,-1,1)).rgb;\n    #ifdef DARKNESS \n    col*=0.;\n    #endif\n    vec3 ld=normalize(vec3(.1,1,-1));\n    float lcol=0.;\n    if(f.y>0.)\n    {\n        vec3 p = ro+f.x*rd;\n        vec3 n=normal(p);\n        float s=0.;\n        float l=1.;\n        if(f.y==1.)\n         {\n            l=1.;\n        }\n        else\n        {    \n            lcol =al(p,n);//indirect lighting\n            #ifdef DARKNESS \n\t\t\tl=lcol*ao(p,n);\n            lcol*=.5;\n            #else\n            l=max(.2,dot(n,ld))*ao(p,n);\n            s=getspec(f.y);\n            #endif\n        }       \n        vec3 rfd=reflect(rd,n);\n        col =mix(getcol(f.y,p)*l,vec3(.5,.4,1.),lcol)+min(.8,.1/distance(ld,rfd)*s);\n        col= mix(col,texture(iChannel2,rfd*vec3(1,-1,1)).rgb,s*clamp(0.,1.,1.-dot(rfd,n)));\n        \n    }\n            col=mix(col,vec3(.4,.2,1),.5*pow(1.-f.z,4.));\n    float deriv = fwidth(f.x)/sqrt(f.x);\n    #ifdef AA\n    if(deriv>.05){\n        vec2 grad = normalize(vec2(dFdx(f.x),dFdy(f.x)))/iResolution.y;\n        uv+=grad;\n        rd = normalize(vec3(uv,2.))*rot;\n        vec3 f = intsct(ro,rd);\n        vec3 col2 =texture(iChannel0,rd*vec3(1,-1,1)).rgb;\n        #ifdef DARKNESS \n        col2*=0.;\n        #endif\n        float lcol=0.;\n        if(f.y>0.)\n        {\n            vec3 p = ro+f.x*rd;\n            vec3 n=normal(p);\n            float s=0.;\n            float l=1.;\n            if(f.y==1.)\n             {\n                l=1.;\n            }\n            else\n            {    \n                lcol =al(p,n);//indirect lighting\n                #ifdef DARKNESS \n                l=lcol*ao(p,n);\n                lcol*=.5;\n                #else\n                l=max(.2,dot(n,ld))*ao(p,n);\n                s=getspec(f.y);\n                #endif\n            }       \n            vec3 rfd=reflect(rd,n);\n            col2 =mix(getcol(f.y,p)*l,vec3(.5,.4,1.),lcol)+min(.8,.1/distance(ld,rfd)*s);\n            col2= mix(col2,texture(iChannel2,rfd*vec3(1,-1,1)).rgb,s*clamp(0.,1.,1.-dot(rfd,n)));\n\n        }\n                col2=mix(col2,vec3(.4,.2,1),.5*pow(1.-f.z,4.));\n        col = mix(col,col2,.5);\n        \n        uv-=2.*grad;\n        rd = normalize(vec3(uv,2.))*rot;\n        f = intsct(ro,rd);\n        col2 =texture(iChannel0,rd*vec3(1,-1,1)).rgb;\n        #ifdef DARKNESS \n        col2*=0.;\n        #endif\n        lcol=0.;\n        if(f.y>0.)\n        {\n            vec3 p = ro+f.x*rd;\n            vec3 n=normal(p);\n            float s=0.;\n            float l=1.;\n            if(f.y==1.)\n             {\n                l=1.;\n            }\n            else\n            {    \n                lcol =al(p,n);//indirect lighting\n                #ifdef DARKNESS \n                l=lcol*ao(p,n);\n                lcol*=.5;\n                #else\n                l=max(.2,dot(n,ld))*ao(p,n);\n                s=getspec(f.y);\n                #endif\n            }       \n            vec3 rfd=reflect(rd,n);\n            col2 =mix(getcol(f.y,p)*l,vec3(.5,.4,1.),lcol)+min(.8,.1/distance(ld,rfd)*s);\n            col2= mix(col2,texture(iChannel2,rfd*vec3(1,-1,1)).rgb,s*clamp(0.,1.,1.-dot(rfd,n)));\n\n        }\n                col2=mix(col2,vec3(.4,.2,1),.5*pow(1.-f.z,4.));\n        col = mix(col,col2,.33333);\n    }\n    #endif\n\n    fragColor = vec4(col,1.0);\n        \n        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(float a)\n{\n    return fract(sin(a) * 43758.5453123);\n}\n\nfloat noise(float a)\n{\n    return sin(mix(rand(floor(a)),rand(floor(a+1.)),fract(a)));\n}\n\nfloat fbm(float a)\n{\n    float s=0.;\n    for (float i=1.;i<5.;i++)\n    {\n        s+=noise(a)/i;\n        a*=2.;\n    }\n    return s;\n}\n\nfloat fourier(float a)\n{\n    return .25*sin(a)+.25*sin(2.*a+.2)+.5*sin(4.*a+.3);\n}\n\n\n\nvec2 mainSound( in int samp, float time )\n{\n    return 0.25*vec2(mod(time,15.)>3.? 4.*fourier(400.*time)// base wave\n                *pow(fbm(20.*noise(40.*time)*time) //amplitude modulation\n                     ,2.):0. )*.1;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}