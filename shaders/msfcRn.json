{
    "Shader": {
        "info": {
            "date": "1686508767",
            "description": "Shader using a rouding cross and fractal. Experimented a lot with color combinations and a like a lot of them, but a think this one gives a good vibe as well.",
            "flags": 0,
            "hasliked": 0,
            "id": "msfcRn",
            "likes": 1,
            "name": "Playing #3",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "matheusgirola",
            "viewed": 104
        },
        "renderpass": [
            {
                "code": "// cosine based palette, 4 vec3 params\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(3.0, 2.0, 2.5);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdRoundedCross( in vec2 p, in float h )\n{\n    float k = 0.5*(h+1.0/h);               // k should be const/precomputed at modeling time\n    \n    p = abs(p);\n    return ( p.x<1.0 && p.y<p.x*(k-h)+h ) ? \n             k-sqrt(dot2(p-vec2(1,k)))  :  // circular arc\n           sqrt(min(dot2(p-vec2(0,h)),     // top corner\n                    dot2(p-vec2(1,0))));   // right corner\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p *= 1.35;\n    m *= 1.35;\n    vec3 finalColor = vec3(0.0);\n    \n      \n    for(float i = 0.0; i<2.0; i++){\n        \n        // animate\n        float he = 0.501-0.300*cos(iTime*2.1+1.0);\n        float ra = 0.100+0.100*sin(iTime*2.4+2.0);\n        \n        // fract the screen, iTime makes appear that \n        //the forms are getting close to screen\n        p = fract(p*(1.2 + 0.25*sin(iTime*0.5))) -0.5;\n\n        // compute\n        float d = sdRoundedCross( p, he ) - ra;\n        \n        vec3 col = palette(4.*length(p) + 0.1*iTime);\n        col *= 0.9 - exp(-3.0*abs(d)*i);\n        col *= 1.2 + 1.2*cos(100.0*d);\n        col = mix( col, vec3(0.5), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n        if( iMouse.z>0.001 )\n        {\n        d = sdRoundedCross(m, he) - ra;\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n        }\n\n\n        finalColor += col;\n    }\n    \n    fragColor = vec4(finalColor,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}