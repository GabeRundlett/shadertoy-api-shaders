{
    "Shader": {
        "info": {
            "date": "1566291725",
            "description": "Sphere marching and scattering can be combined!",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljXRy",
            "likes": 4,
            "name": "Combining scattering and SDFs!!!",
            "published": 3,
            "tags": [
                "ray",
                "sdf",
                "sphere",
                "marching",
                "scattering",
                "extinction"
            ],
            "usePreview": 0,
            "username": "toomuchvoltage",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "/***********************************************************\n\n   This is to show that sphere marching and scattering can be combined!\n   All your SDFs are belong to iq ;) : https://iquilezles.org/articles/distfunctions\n\n   Everything else covered under the MIT license:\n\n   Copyright (c) 2019 TooMuchVoltage Software Inc.\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in all\n   copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n   SOFTWARE.\n\n\n   Hit me up! :)\n   Twitter: twitter.com/toomuchvoltage\n   Facebook: fb.com/toomuchvoltage\n   YouTube: youtube.com/toomuchvoltage\n   Mastodon: https://mastodon.gamedev.place/@toomuchvoltage\n   Website: www.toomuchvoltage.com\n\n************************************************************/\n\n#define M_PI 3.1415926535\n#define DRAW_DISTANCE 7.0\n#define THICKNESS 0.15\n#define FLUFF_THICKNESS 0.25\n//#define TIME_VARYING_FLUFF_DISTORTION\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdTriPrism(vec3 p, vec2 h)\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdBox (vec3 p, vec3 b)\n{  \n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat petiole (vec3 p, vec3 b)\n{\n\tp.x = -abs(p.x); // x and z symmetry\n    p.z = -abs(p.z);\n    \n\tvec3 d = abs(p) - b;\n\tfloat boxDf = length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n    vec2 norm1 = vec2 (0.99875233887, -0.04993761694);\n    return max(boxDf, -(dot (p.xy, norm1) - b.x * 0.2)); // Add slant... (cutting with planes)\n}\n\nfloat leafMiddle (vec3 p, vec3 b)\n{\n\tp.x = -abs(p.x); // x and z symmetry\n    p.z = -abs(p.z);\n    \n\tvec3 d = abs(p) - b;\n\tfloat boxDf = length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n    vec2 norm1 = vec2 (0.98058067569, 0.19611613513);\n    vec2 norm2 = vec2 (-0.55470019622, -0.83205029433);\n    float boxCutDf = max(boxDf, -(dot (p.xy, norm1) + b.x * 0.6)); // Add slant... (cutting with planes)\n\tfloat boxCutSnippedDf = max(boxCutDf, -(dot(p.xy, norm2) + b.y * 0.5)); // Add snip...\n    float joinedWithTip = opSmoothUnion (sdTriPrism((p + vec3 (0.0, -0.8, 0.0)), vec2 (0.57, THICKNESS)), boxCutSnippedDf, 0.05); // Add tip\n    float planeSlicer = p.z+THICKNESS; // Smooth out the surface\n\treturn max (joinedWithTip, -planeSlicer);\n}\n\nfloat leafMiddleFatter (vec3 p, vec3 b)\n{\n\tp.x = -abs(p.x); // x and z symmetry\n    p.z = -abs(p.z);\n    \n\tvec3 d = abs(p) - b;\n\tfloat boxDf = length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n    vec2 norm1 = vec2 (0.99755896714, 0.06982912769);\n    vec2 norm2 = vec2 (-0.55470019622, -0.83205029433);\n    float boxCutDf = max(boxDf, -(dot (p.xy, norm1) + b.x * 0.85)); // Add slant... (cutting with planes)\n    float boxCutSnippedDf = max(boxCutDf, -(dot (p.xy, norm2) + b.y * 0.5)); // Add snip...\n    float joinedWithTip = opSmoothUnion (sdTriPrism((p + vec3 (0.0, -0.7, 0.0)), vec2 (0.43, THICKNESS)), boxCutSnippedDf, 0.05); // Add tip\n    float planeSlicer = p.z+THICKNESS; // Smooth out the surface\n\treturn max (joinedWithTip, -planeSlicer);\n}\n\nfloat leafSide (vec3 p)\n{\n    float rotCos, rotSin;\n    mat4 rotMat;\n    \n    // Rotate to the side...\n    rotCos = cos(-0.25 * M_PI);\n    rotSin = sin(-0.25 * M_PI);\n    rotMat[0] = vec4 ( rotCos, rotSin, 0.0, 0.0);\n    rotMat[1] = vec4 (-rotSin, rotCos, 0.0, 0.0);\n    rotMat[2] = vec4 ( 0.0   ,    0.0, 1.0, 0.0);\n    rotMat[3] = vec4 ( 0.75  ,   -0.7, 0.0, 1.0);\n    \n    vec3 newP = (inverse (rotMat) * vec4 (p, 1.0)).xyz;\n\n    float sd1 = leafMiddleFatter (newP, vec3 (0.5, 0.9, THICKNESS));\n    \n    return sd1;\n}\n\nfloat MapleLeaSDF (vec3 p)\n{\n\tp.x = abs(p.x); // x and z symmetry\n    p.z = -abs(p.z);\n\n    float sd1 = leafMiddle (p, vec3 (0.75, 1.1, THICKNESS));\n    \n    float sd2 = leafSide(p);\n    \n    float leafTop = opSmoothUnion (sd1, sd2, 0.1); // Smooth crevices\n    \n\tfloat leafBase = sdTriPrism(p + vec3 (0.0, 1.2, 0.0), vec2 (1.0, THICKNESS));\n    vec2 norm1 = normalize (vec2 (0.1, 1.0));\n    float leafBaseCut = max(leafBase, -(dot (p.xy, norm1) + 1.6));\n    \n    float leafTotal = opSmoothUnion (min(leafTop, leafBaseCut), petiole (p + vec3 (0.0, 1.4, 0.0), vec3 (0.05, 1.0, THICKNESS)), 0.1);\n    \n    float planeSlicer = p.z+THICKNESS; // Smooth out the surface\n    return max (leafTotal, -planeSlicer);\n}\n\nfloat scene (vec3 p)\n{\n\treturn MapleLeaSDF (p);\n}\n\nfloat sceneFluff (vec3 p)\n{\n\treturn MapleLeaSDF (p) - FLUFF_THICKNESS;\n}\n\nfloat sceneFluffDistortion (vec3 p)\n{\n\tfloat retVal = FLUFF_THICKNESS * sin (p.x * 20.0) * sin (p.y * 20.0) * sin (p.z * 20.0);\n#ifdef TIME_VARYING_FLUFF_DISTORTION\n    retVal *= (sin((iTime + p.x) * 3.0) + 1.0) * 0.5;\n#endif\n    return retVal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    float distToLeaf = 4.0 + sin(iTime);\n    vec3 curEye = vec3 (sin(iTime) * distToLeaf, -1.4 + sin(iTime), cos(iTime) * distToLeaf);\n    vec3 sampleLook = -normalize (curEye);\n    \n    vec3 side = cross (vec3 (0.0, -1.0, 0.0), sampleLook);\n    vec3 up = cross (side, sampleLook);\n    if ( dot (up, vec3 (0.0, 1.0, 0.0)) < 0.0 ) up = -up;\n    \n    vec3 sampleDir = normalize (sampleLook + side * uv.x + up * uv.y);\n    vec3 samplePt = curEye + sampleDir;\n    vec4 finalColor = vec4 (0.0);\n    float drawDistSq = DRAW_DISTANCE*DRAW_DISTANCE;\n\n    for (float jj = 0.0; jj != 1.0; jj += 0.0)\n    {\n        float curDist = scene (samplePt);\n        if (abs(curDist) < 0.001)\n        {\n            float gradD = 0.01;\n            float gradX = scene (samplePt + vec3 ( gradD, 0.0, 0.0)) - scene (samplePt - vec3 ( gradD, 0.0, 0.0));\n            float gradY = scene (samplePt + vec3 ( 0.0, gradD, 0.0)) - scene (samplePt - vec3 ( 0.0, gradD, 0.0));\n            float gradZ = scene (samplePt + vec3 ( 0.0, 0.0, gradD)) - scene (samplePt - vec3 ( 0.0, 0.0, gradD));\n\n            vec3 ourNorm = normalize (vec3 (gradX, gradY, gradZ));\n            vec3 toEyeNorm = normalize (curEye - samplePt);\n            float atten = 5.0/length (curEye - samplePt);\n            // Diffuse light from the viewer gives it some shape... even though the material is pretty much glossy\n            vec3 color = vec3 (0.0);\n            color.r = atten * dot (ourNorm, toEyeNorm) * texture (iChannel0, reflect (-toEyeNorm, ourNorm)).r;\n\n            float AOTerm = 0.0;\n            AOTerm += max (scene (samplePt + 0.01 * ourNorm), 0.0) * 100.0;\n            AOTerm += max (scene (samplePt + 0.02 * ourNorm), 0.0) * 50.0;\n            AOTerm += max (scene (samplePt + 0.03 * ourNorm), 0.0) * 33.3333;\n            AOTerm += max (scene (samplePt + 0.1 * ourNorm), 0.0) * 10.0;\n            AOTerm += max (scene (samplePt + 0.2 * ourNorm), 0.0) * 5.0;\n            AOTerm += max (scene (samplePt + 0.3 * ourNorm), 0.0) * 3.3333;\n            AOTerm *= 0.166667;\n            color *= AOTerm;\n            \n            finalColor = vec4(pow(color, vec3(1.0/2.2)), 1.0); // Gamma correct before output\n            break ;\n        }\n        samplePt += curDist*sampleDir;\n        vec3 samplePtToEye = samplePt - curEye;\n        if ( dot (samplePtToEye,samplePtToEye) > drawDistSq )\n        {\n\t\t    finalColor = vec4(texture (iChannel0, sampleDir).rgb, 1.0) * 0.2;\n            break ;\n        }\n    }\n    \n    vec3 lastSamplePt = samplePt;\n    vec3 lastSamplePtToEye = lastSamplePt - curEye;\n    float distToHitSq = dot (lastSamplePtToEye, lastSamplePtToEye);\n    samplePt = curEye + sampleDir; // Reset sample point...\n    float scat = 1.0;\n    for (float jj = 0.0; jj != 1.0; jj += 0.0)\n    {\n        float curDist = sceneFluff (samplePt);\n        if (abs(curDist) < 0.001)\n        {\n\t\t\tsamplePt += sampleDir * 0.01; // Push into negative territory a bit...\n            for (float kk = 0.0; kk != 1.0; kk += 0.0)\n            {\n                // Fluff amount is related to distance from our main ('gut') SDF\n                float distToGut = scene(samplePt);\n                float distToFluffShape = sceneFluffDistortion(samplePt);\n                float fluffAmount = 1.0 - clamp (abs(distToGut / distToFluffShape), 0.0, 1.0);\n                fluffAmount *= 0.3;\n                fluffAmount *= fluffAmount;\n                if ( fluffAmount > 0.001 )\n                {\n\t                finalColor.rgb += scat * vec3 (1.0, 0.0, 0.0) * fluffAmount;\n\t                scat *= exp (-fluffAmount);\n\t                if ( scat < 0.01 ) break;\n                }\n                samplePt += sampleDir * 0.01;\n                curDist = sceneFluff (samplePt);\n                if ( curDist > 0.0 ) break; // If we've escaped fluff zone, go back to sphere marching...\n                vec3 samplePtToEye = samplePt - curEye;\n                if ( dot (samplePtToEye, samplePtToEye) > distToHitSq )\n                {\n                    scat = 0.0;\n                    break;\n                }\n            }\n        }\n        if ( scat < 0.01 ) break;\n        samplePt += curDist*sampleDir;\n        vec3 samplePtToEye = samplePt - curEye;\n        if ( dot (samplePtToEye, samplePtToEye) > drawDistSq ) break;\n    }\n\n    fragColor = finalColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}