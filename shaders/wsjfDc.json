{
    "Shader": {
        "info": {
            "date": "1591041806",
            "description": "Antifascism flag",
            "flags": 0,
            "hasliked": 0,
            "id": "wsjfDc",
            "likes": 13,
            "name": "Antifascism flag",
            "published": 3,
            "tags": [
                "flag",
                "antifa"
            ],
            "usePreview": 0,
            "username": "Danguafer",
            "viewed": 521
        },
        "renderpass": [
            {
                "code": "#define EPS (2.0/iResolution.y)\n\n#define SYMBOL_START 0.975\n#define SPACE 0.02\n#define TEXT_START SYMBOL_START - SPACE*2.0\n#define TEXT_SPACE 0.25\n#define INNER_START TEXT_START - TEXT_SPACE - SPACE\n\n#define add(color,df) col = mix(col,color,smoothstep(EPS,-EPS,df));\n#define diff(a,b) max(a,-b)\n#define union(a,b) min(a,b)\n#define inter(a,b) -min(-(a),-(b))\n\nfloat circle(vec2 o, float r) { return length(o) - r; }\nfloat circum(vec2 o, float r, float width) { return diff(circle(o,r),circle(o,r-width)); }\nfloat rect(vec2 o, vec2 d) { return inter(abs(o.x)-d.x,abs(o.y)-d.y); }\n\nfloat flag(vec2 op,vec2 d) {\n    vec2 p = op - d;\n    float stick = rect(p - vec2(0.0,-0.4),vec2(0.04,0.5));\n    vec2 displacement = vec2(-0.56,0.225 + p.x * 0.1 * cos(-iTime * 2.0 - op.x * 8.0 + 1.0));\n    float flag = rect(p - displacement,vec2(0.6,0.3));\n    return min(stick,flag);\n}\n\nmat2 rotate(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\n#define LINES 16.0\n#define COLUMNS 16.0\n#define MAP(C,L) vec2(-float(C)/COLUMNS,float(L)/LINES)\n  #define H MAP(8,4)\n  #define A MAP(1,4)\n  #define C MAP(3,4)\n  #define K MAP(11,4)\n  #define E MAP(5,4)\n  #define R MAP(2,5)\n  #define S MAP(3,5)\n\n//#define A\n  #define N MAP(14,4)\n  #define T MAP(4,5)\n  #define I MAP(9,4)\n  #define F MAP(6,4)\n//#define A\n//#define S\n//#define C\n//#define I\n//#define S\n//#define T\n//#define A\n//#define S\n\nfloat ch(vec2 p, vec2 offset) {\n    float mx = 0.0;\n    float my = (LINES-1.0)/LINES;\n    float Mx = 1.0/LINES;\n    float My = 1.0;\n    vec2 uv = clamp(p,vec2(mx,my),vec2(Mx,My)) - offset;\n    return texture(iChannel0,uv).x;\n}\n\nfloat char_mask(vec2 o) {\n    return abs(o.x)-0.1;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n#define advance() caret += vec2(0.03,0.0);\n#define type(C) text += vec3(ch(text_mapping - caret,C)); advance();\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    vec2 n = fragCoord.xy/iResolution.xy;\n    vec2 dp = floor(n*10.0)/10.0;\n    \n    if (mod(iTime,3.0) > 2.0)\n      n = mod(n,0.1) + dp - rand(dp + floor(iTime*20.0)/20.0) + 0.5;\n    if (mod(iTime,4.0) > 3.0)\n      n.x -= sin(20.0 * rand(floor(n.yy * 100.0) - floor(iTime* 10.0)/10.0));\n    \n    vec2 p = (2.0 * n - 1.0);\n    p.x *= iResolution.x/iResolution.y; \n    vec3 col = vec3(1.0);\n\n    float border = circum(p,SYMBOL_START,SPACE);\n    border = union(border,circum(p,TEXT_START,TEXT_SPACE));\n    \n    col = add(vec3(0.0,0.0,0.0),border);\n    \n    float flag_mask = circle(p,INNER_START);\n    vec2 flag_p = p - vec2(0.36,-0.15);\n    flag_p *= rotate(-0.3);\n    float red_flag = inter(flag(flag_p,vec2(0.0,0.0)),flag_mask);\n    float black_flag = inter(flag(flag_p,vec2(-0.25,-0.25)),flag_mask);\n    black_flag = diff(black_flag,red_flag+SPACE);\n    col = add(vec3(0.0),black_flag);\n    col = add(vec3(1.0,0.0,0.0),red_flag);\n    \n    vec2 text_mapping;\n    text_mapping.x = (atan(p.x,p.y)/acos(-1.0)*0.6)+0.11;\n    text_mapping.y = (length(p) + 4.035)*0.2;\n\n    vec2 caret = vec2(0.0,0.0);\n    vec3 text = vec3(0.0);\n    type(H);\n    type(A);\n    type(C);\n    type(K);\n    type(E);\n    type(R);\n    type(S);\n    caret = vec2(0.0,0.0);\n    text_mapping.x = (-atan(-p.x,-p.y)/acos(-1.0)*0.6)+0.2;\n    text_mapping.y = (5.655 - length(p))*0.2;\n    type(A);\n    type(N);\n    type(T);\n    type(I);\n    type(F);\n    type(A);\n    type(S);\n    type(C);\n    type(I);\n    type(S);\n    type(T);\n    type(A);\n    type(S);\n\n    // Masking for removing polar coordinates artifacts on the font atlas sampling.\n    text *= step(INNER_START,length(p));\n    \n    col += text;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}