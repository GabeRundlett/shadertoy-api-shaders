{
    "Shader": {
        "info": {
            "date": "1677430216",
            "description": "Solver for the Shallow Water Equations with height field.\nBased on https://matthias-research.github.io/pages/publications/hfFluid.pdf\nTerrain depth based on Inigo's simplex noise.\nReset button at the bottom left.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "csc3RS",
            "likes": 39,
            "name": "Shallow Water Equations solver",
            "published": 3,
            "tags": [
                "simulation",
                "swe",
                "navierstokes",
                "ns",
                "shallowwater",
                "cunami"
            ],
            "usePreview": 0,
            "username": "BlooD2oo1",
            "viewed": 1507
        },
        "renderpass": [
            {
                "code": "const vec3 vWaterFogColor = Gamma( vec3( 0.9, 0.4, 0.3 ) ) * 16.0;\nconst vec3 vFoamColor = Gamma( vec3( 0.9, 0.9, 0.85 ) );\nconst vec3 vSkyColor = Gamma( vec3( 0.01, 0.4, 0.8 ) );\nconst vec3 vSunColor = Gamma( vec3( 1.0, 0.8, 0.5 ) );\nconst vec3 vTerrainColor0 = Gamma( vec3(1.0,0.88,0.7)*0.8 );\nconst vec3 vTerrainColor1 = Gamma( vec3(0.9,0.9,0.8)*0.9 );\n#define vLightDir normalize( vec3( 0.0, 0.21, -1.0 ) )\nconst vec3 vLookDir = vec3( 0.0, 0.0, -1.0 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 vTexC = textureLod(iChannel0,uv,0.0);\n    \n    vec4 vTexL = textureLodOffset(iChannel0,uv, 0.0, ivec2(-1,0));\n    vec4 vTexR = textureLodOffset(iChannel0,uv, 0.0, ivec2(1,0));\n    vec4 vTexT = textureLodOffset(iChannel0,uv, 0.0, ivec2(0,-1));\n    vec4 vTexB = textureLodOffset(iChannel0,uv, 0.0, ivec2(0,1));\n    \n    float hC = vTexC.z+vTexC.w;\n\tfloat hL = vTexL.z+vTexL.w;\n\tfloat hR = vTexR.z+vTexR.w;\n\tfloat hT = vTexT.z+vTexT.w;\n\tfloat hB = vTexB.z+vTexB.w;\n    \n    float fMinZ = min( min( min( min( vTexC.z, vTexL.z ), vTexR.z ), vTexT.z ), vTexB.z );\n    float fMaxZ = max( max( max( max( vTexC.z, vTexL.z ), vTexR.z ), vTexT.z ), vTexB.z );\n    \n    float fAlpha = min(1.0,vTexC.z*130.0);\n    \n    vec3 vNormal = vec3( ( hR - hL )*g_fGridSizeInMeter, ( hB - hT )*g_fGridSizeInMeter, 2.0 );\n    vNormal = normalize( vNormal );\n    vec2 vTerrainUV = uv;\n    vec2 vRefractUV = vTerrainUV - vNormal.xy*vTexC.z*6.0;\n    \n    vec3 vTerrainColor = mix( vTerrainColor0, vTerrainColor1, SampleColor( iChannel1, vRefractUV, iResolution.xy ) );\n    vTerrainColor *= 1.0-min(1.0,fMaxZ*80.0)*0.2;\n    vec3 vRefract = vTerrainColor;\n    vec4 vTexCRefract = textureLod(iChannel0,vRefractUV,0.0);\n    vTexCRefract = mix( vTexC, textureLod(iChannel0,vRefractUV,0.0), min( vTexCRefract.z*1.0, 1.0 ) );\n    vec3 vFog = 1.0 - exp( -vTexCRefract.zzz/(vNormal.z*0.9999)*vWaterFogColor );\n    vRefract *= ( 1.0 - vFog );\n    \n\n    \n    vec3 vReflect = ( pow( ( 1.0 - pow( vNormal.z*0.9999999, 100.0 ) ), 0.4 ) )* 1.1 * vSkyColor;\n    //vec3 vReflect = ( 1.0-pow( ( 1.0 - pow( vNormal.z*0.9999999, 1000.0 ) ), 0.1 ) )* 0.3 * vSkyColor;\n    vec3 vHalfVec = normalize( vLookDir + vLightDir );\n    float fHdotN = max( 0.0, dot( -vHalfVec, vNormal ) );\n    vReflect += pow( fHdotN , 1200.0 ) * 20.0 * vSunColor;\n    vReflect += pow( fHdotN , 180.0 ) * 0.5 * vSkyColor;\n    \n    float fLight = pow( max( dot( vNormal, -vLightDir ), 0.0 ), 10.0 );    \n    \n    \n    float fFoam = max(0.0,1.0-fMinZ*8.0)*0.3;\n    \n    vec3 vWater = mix( vRefract*fLight + vReflect, vFoamColor, vec3(fFoam,fFoam,fFoam) );    \n    //vWater = vReflect;\n    \n    \n    \n    vec3 vOut = mix( vTerrainColor*fLight, vWater, vec3(fAlpha) );\n\n    /*if ( iResolution.x > 1180.0 )\n    {\n        if ( uv.y < 0.3 ) vOut = mix( vec3(vTexC.w*0.1), vec3( vTexC.xy+0.5, 0.0 ), vec3(fAlpha) );\n        vOut *= smoothstep( 0.0, 0.004, abs(uv.y-0.3) );\n    }*/   \n    \n    //vOut = vTerrainColor;\n    \n    // button!\n    if ( fragCoord.x < 40.0 && fragCoord.y < 40.0 ) vOut = mod( iTime, 1.0 ) < 0.5 ? vec3( 0.4, 0.2, 0.2 ) : vec3( 0.3, 0.2, 0.1 );\n\n    \n    \n    fragColor = vec4( DeGamma( vOut ), 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Velocity Advection\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);    \n    vec4 vTexC = texelFetch(iChannel0,tc,0);    \n\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 vOffset = vTexC.xy/iResolution.xy * g_fAdvectSpeed * g_fElapsedTimeInSec / g_fGridSizeInMeter;\n    float dt = -g_fAdvectSpeed * g_fElapsedTimeInSec / g_fGridSizeInMeter;\n    vec2 v1 = vTexC.xy;\n    vec2 v2 = textureLod(iChannel0, uv - ( 0.5 * v1 * dt ) / iResolution.xy, 0.0 ).xy;\n    vec2 v3 = textureLod(iChannel0, uv - ( 0.5 * v2 * dt ) / iResolution.xy, 0.0 ).xy;\n    vec2 v4 = textureLod(iChannel0, uv - ( v3 * dt ) / iResolution.xy, 0.0 ).xy;\n    vec2 v = (1.0 * v1 + 2.0 * v2 + 2.0 * v3 + 1.0 * v4) / 6.0;\n    \n    \n    vec4 vTex = textureLod(iChannel0,uv + ( v * dt ) / iResolution.xy,0.0);\n\n    fragColor = vTexC;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Height Integration\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   ivec2 tc = ivec2(fragCoord);    \n    vec4 vTexC = texelFetch(iChannel0,tc,0);    \n    vec4 vTexL = ( tc.x > 0 ) ?                    texelFetchOffset(iChannel0,tc, 0, ivec2(-1,0)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    vec4 vTexR = ( tc.x < int(iResolution.x)-1 ) ? texelFetchOffset(iChannel0,tc, 0, ivec2(1,0)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    vec4 vTexT = ( tc.y > 0 ) ?                    texelFetchOffset(iChannel0,tc, 0, ivec2(0,-1)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    vec4 vTexB = ( tc.y < int(iResolution.y)-1 ) ? texelFetchOffset(iChannel0,tc, 0, ivec2(0,1)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    \n    vec2 vOffset = vTexC.xy/iResolution.xy * g_fAdvectSpeed * g_fElapsedTimeInSec / g_fGridSizeInMeter;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 vTex = textureLod(iChannel0,uv+vOffset,0.0);\n    \n    if ( vTexC.x == 0.0 ) vTex.xyz = vTexC.xyz;\n\tif ( vTexC.y == 0.0 ) vTex.xyz = vTexC.xyz;\n    \n    vTex.zw = vTexC.zw;\n    \n    float fxL = vTexL.x;\n\tfloat fxR = vTexC.x;\t\n\tfloat fyT = vTexT.y;\n\tfloat fyB = vTexC.y;\n    \n    // We also found that it yields a more stable simulation:\n\tfloat hL = ( vTexL.x >= 0.0 ) ? vTexL.z : vTexC.z;\n\tfloat hR = ( vTexC.x <= 0.0 ) ? vTexR.z : vTexC.z;\n\tfloat hT = ( vTexT.y >= 0.0 ) ? vTexT.z : vTexC.z;\n\tfloat hB = ( vTexC.y <= 0.0 ) ? vTexB.z : vTexC.z;\n    \n   \t{\n\t\t// 2.2. Overshooting Reduction\n\t\tfloat beta = 2.0;\n\t\tfloat hAvgMax = beta * g_fGridSizeInMeter / ( g_fG * (g_fElapsedTimeInSec) );\n\t\tfloat hAdj = max( 0.0, (vTexL.z+vTexR.z+vTexT.z+vTexB.z)/4.0 - hAvgMax );\n\n\t\thL -= hAdj;\n\t\thR -= hAdj;\n\t\thT -= hAdj;\n\t\thB -= hAdj;\n\t}\n    \n    float dH = -( (hR*fxR-hL*fxL) / g_fGridSizeInMeter + (hB*fyB-hT*fyT) / g_fGridSizeInMeter );\n\n\tvTexC.z += dH * (g_fElapsedTimeInSec);\n\n    fragColor = vTexC;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Velocity Integration\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord);    \n    vec4 vTexC = texelFetch(iChannel0,tc,0);    \n    //vec4 vTexL = ( tc.x > 0 ) ?                    texelFetchOffset(iChannel0,tc, 0, ivec2(-1,0)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    vec4 vTexR = ( tc.x < int(iResolution.x)-1 ) ? texelFetchOffset(iChannel0,tc, 0, ivec2(1,0)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    //vec4 vTexT = ( tc.y > 0 ) ?                    texelFetchOffset(iChannel0,tc, 0, ivec2(0,-1)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n    vec4 vTexB = ( tc.y < int(iResolution.y)-1 ) ? texelFetchOffset(iChannel0,tc, 0, ivec2(0,1)) : vTexC*vec4(0.0,0.0,1.0,1.0);\n       \n    \n    ////////////////////////////////////////////////////////////////\n    \n\n    float zC = vTexC.z+vTexC.w;\n\t//float zL = vTexL.z+vTexL.w;\n\tfloat zR = vTexR.z+vTexR.w;\n\t//float zT = vTexT.z+vTexT.w;\n\tfloat zB = vTexB.z+vTexB.w;\n\n\tvec2 vV;\n\tvV.x = -g_fG / g_fGridSizeInMeter * ( zR - zC );\n\tvV.y = -g_fG / g_fGridSizeInMeter * ( zB - zC );\n\tvTexC.xy += vV * g_fElapsedTimeInSec;\n    \n    // 2.1.4. Boundary Conditions\n\n\tif (\t( ( vTexC.z <= EPS*g_fGridSizeInMeter ) && ( vTexC.w > zR ) ) || \n\t\t\t( ( vTexR.z <= EPS*g_fGridSizeInMeter ) && ( vTexR.w > zC ) ) )\n\t{\n\t\tvTexC.x = 0.0;\n\t}\n\n\tif (\t( ( vTexC.z <= EPS*g_fGridSizeInMeter ) && ( vTexC.w > zB ) ) || \n\t\t\t( ( vTexB.z <= EPS*g_fGridSizeInMeter ) && ( vTexB.w > zC ) ) )\n\t{\n\t\tvTexC.y = 0.0;\n\t}\n    \n    // We also clamp the magnitudes\n    float l = length( vTexC.xy );\n\tif ( l > 0.0 )\n\t{\n\t\tfloat alpha = 0.5;\n\t\tvTexC.xy /= l;\n\t\tl = min( l, g_fGridSizeInMeter / (g_fElapsedTimeInSec) * alpha );\n\t\tvTexC.xy *= l;\n\t}\n    \n    // hack blur\n    /*{\n        float fMinH = min( min( min( zL, zR ), min( zT, zB ) ), zC );\n        float fMaxH = max( max( max( zL, zR ), max( zT, zB ) ), zC );\n        float fW = clamp( ( fMaxH - fMinH )*g_fGridSizeInMeter/g_fHackBlurDepth, 0.0, 1.0 );\n\n        float fTexLW = min( (zL-zC)*(1.0/4.0), vTexL.z );\n        float fTexRW = min( (zR-zC)*(1.0/4.0), vTexR.z );\n        float fTexTW = min( (zT-zC)*(1.0/4.0), vTexT.z );\n        float fTexBW = min( (zB-zC)*(1.0/4.0), vTexB.z );\n\n        float fTexAddition = fTexLW + fTexRW + fTexTW + fTexBW;\n        vTexC.z += fTexAddition*0.99*fW;\n    }*/\n    \n    // 2.1.5. Stability Enhancements\n    if ( vTexC.z <= 0.0 )\n    {\n        vTexC.z = 0.0;\n    }\n    \n    ////////////////////////////////////////////////////////////////\n\n\n    vec2 uv = fragCoord/iResolution.xy;    \n    vTexC.w = SampleDepth( iChannel1, uv, iResolution.xy );\n    \n    // click\n    if ( iMouse.z > 0.0 )\n    {\n        float l = length((fragCoord-iMouse.xy)*0.001);\n        l *= 20.0;\n        l = clamp( 1.0 - l, 0.0, 1.0 );\n        vTexC.z += 0.01 * ( cos( l * PI ) * -0.5 + 0.5 );\n    }\n    \n    // reset\n    if ( ( iFrame <= 1 ) || ( iMouse.z > 0.0 && iMouse.x < 40.0 && iMouse.y < 40.0 ) )\n    {\n        vTexC.xy = vec2(0.0);\n        \n        vTexC.z = max( 0.0 - vTexC.w, 0.0 );\n\n        // jon a cunami.\n        float l = abs( uv.x - 0.95 );\n        l *= 10.0;\n        l = clamp( 1.0 - l, 0.0, 1.0 );\n        vTexC.z += 0.1 * ( cos( l * PI ) * -0.5 + 0.5 );\n    }\n    \n    // jon a cunami.\n    float ll = abs( uv.x - 0.95 );\n    ll *= 20.0;\n    ll = clamp( 1.0 - ll, 0.0, 1.0 );\n    vTexC.z += 0.001 * ( cos( ll * PI ) * -0.5 + 0.5 ) * sin( iTime*1.6 ) * max( 0.0, (10.0-iTime)/10.0 );   \n    \n    \n    fragColor = vTexC;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\nconst float PI05 =\t\t1.5707963267948966192313216916398;\nconst float PI =\t\t3.1415926535897932384626433832795;\nconst float PI2 =\t\t6.283185307179586476925286766559;\nconst float PIRECIP =\t0.31830988618379067153776752674503;\nconst float PIPER180 =\t0.01745329251994329576923690768489;\nconst float SQRT2 =\t\t1.4142135623730950488016887242097;\nconst float E_NUMBER =\t2.7182818284590452353602874713527;\nconst float LN2 =\t\t0.69314718055994530941723212145817658;\n\n#define EPS 0.0001\n\nconst float g_fGridSizeInMeter = 5.0;\nconst float g_fElapsedTimeInSec = 1.0;\nconst float g_fAdvectSpeed = -1.0;\nconst float g_fG = 10.0;\nconst float g_fHackBlurDepth = 1.0;\n\n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins. May 2018\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UI4 uvec4(UI3, 1979697957U)\n#define UIF (1.0 / float(0xffffffffU))\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n\nfloat SampleDepth( sampler2D sampler, vec2 uv, vec2 vRes )\n{\n    float fRet = 0.0;\n    \n    vec2 vUV = uv * vRes.x/vRes.y * 3.0+1.0;\n    vUV += vec2( noise( vUV+2.0 ), noise( vUV+1.0 ) ) * 0.2;\n    mat2 m = mat2( 2.0,  1.2, -1.2,  2.0 );\n    fRet  = 0.5000*noise( vUV )*2.0; vUV = m*vUV;\n    fRet += 0.2500*noise( vUV )*1.0; vUV = m*vUV;\n    vUV += vec2( noise( vUV+0.5 ), noise( vUV+2.5) ) * 0.2;\n    fRet += 0.1250*noise( vUV )*1.0; vUV = m*vUV;\n    fRet += 0.0625*noise( vUV )*1.0; vUV = m*vUV;\n    fRet += 0.0312*noise( vUV )*1.0; vUV = m*vUV;\n    \n    fRet = fRet*0.6-0.4;\n    fRet -= (uv.x-0.6)*3.0;\n    \n    return fRet;\n}\n\nfloat SampleColor( sampler2D sampler, vec2 uv, vec2 vRes )\n{\n    float fRet = 0.0;\n    \n    vec2 vUV = uv * vRes.x/vRes.y * 3.0+1.0;\n    vUV += vec2( noise( vUV+2.0 ), noise( vUV+1.0 ) ) * 0.2;\n    mat2 m = mat2( 2.0,  1.2, -1.2,  2.0 );\n    fRet  = 0.0; vUV = m*vUV;\n    fRet += 0.0; vUV = m*vUV;\n    vUV += vec2( noise( vUV+0.5 ), noise( vUV+2.5) ) * 0.2;\n    fRet += 0.1250*noise( vUV )*0.5; vUV = m*vUV;\n    fRet += 0.0625*noise( vUV )*0.4; vUV = m*vUV;\n    fRet += 0.0312*noise( vUV )*0.4; vUV = m*vUV;\n    \n    return -fRet*4.0;\n}\n\n#define Gamma( v ) pow( v, vec3( 2.2, 2.2, 2.2 ) )\n#define DeGamma( v ) pow( v, vec3( 1.0/2.2, 1.0/2.2, 1.0/2.2 ) )\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}