{
    "Shader": {
        "info": {
            "date": "1519935522",
            "description": "Dancing to the music",
            "flags": 0,
            "hasliked": 0,
            "id": "Xd3yWB",
            "likes": 8,
            "name": "Speaker",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "sdf",
                "fbm"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 803
        },
        "renderpass": [
            {
                "code": "#define EPS 0.0001\n#define FAR 100.0\n#define STEPS 2000\n\nfloat trig( float dist, float decay, float frequency, float amplitude, float speed )\n{\n\n\treturn exp( -decay * dist ) *  \n   \t\t   sin( dist * frequency + ( speed ) ) * amplitude;\n    \n}\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat map( vec3 p )\n{\n\n    float dis = length( p );\n    float dec = 0.01;\n    float fre = 5.0;\n    float amp = 2.1;\n    float spe = ( texture( iChannel0, vec2( 0.0, 0.25 ) ).x );\n    float tri = trig( dis, dec, fre, amp, spe );\n    return length( p ) - 0.0 + tri;\n\n}\n\nvec3 grad( vec3 p )\n{\n\n    vec2 e = vec2( 0.0, EPS );\n    return vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                 map( p + e.yxy ) - map( p - e.yxy ),\n                 map( p + e.yyx ) - map( p - e.yyx )\n                );\n\n}\n\nfloat softShadows( in vec3 ro, in vec3 rd )\n{\n\n\tfloat res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t );\n        if( h < EPS ) return 0.0;\n        res = min( res, 8.0 * h / t );\n        t += h;\n        \n    }\n    \n    return res;\n    \n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n\n\n    vec3 p = ro + rd * t;\n    vec3 n = normalize( grad( p ) );\n    vec3 col;\n    vec3 lig = normalize( vec3( 0.3, 0.8, 0.7 ) );\n    vec3 ref = reflect( rd, lig );\n    \n    float wav = ( texture( iChannel0, vec2( 0.0, 0.25 ) ).x );\n    float amb = 0.5 + 0.5 * n.y;\n    float sha = softShadows( p, lig );\n    float dif = max( 0.0, dot( n, lig ) );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    \n    col += vec3( 0.8, 0.7, 0.8 ) * amb;\n    col += dif * vec3( 0.8, 0.7, 0.8 ) * sha;\n    col += 1.0 * spe;\n    col *= mix( vec3( 0.2, 0.4, 0.6 ), vec3( 0.4, 0.2, 0.2 ), fbm( p + iTime + wav ) );\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    //vec3 ro = 3.0 * vec3( sin( iTime ), 0.0, cos( iTime ) );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    vec3 ro = vec3( 0.0, 0.0, 3.0 );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 vv = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 uu = normalize( cross( ww, vv ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float t = 0.0; float d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = map( ro + rd * t );\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n\n    // Time varying pixel color\n    vec3 col = d < EPS ? shade( ro, rd, t ) : vec3( 0.0 );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 34,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}