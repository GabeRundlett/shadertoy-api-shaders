{
    "Shader": {
        "info": {
            "date": "1593775674",
            "description": "Distorted parameterization (checker) where red circles are drawn.\nJacobian matrix store the local distorted frame. Assuming distortion locally flat:\n-> U*inv(J) is back to undistorted frame : green circles.\ndet(J) shows compression of distortion.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlByRW",
            "likes": 30,
            "name": "Tuto: Jacobians and undistortion",
            "published": 3,
            "tags": [
                "screenspace",
                "fwidth",
                "tuto",
                "jacobian"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1274
        },
        "renderpass": [
            {
                "code": "// --- Computing Jacobian to cancel distortions\n// See also: managing discontinuity when computing hardware derivatives https://www.shadertoy.com/view/WlScRW\n\n#define Circle(U,r) smoothstep(50./R.y,0., abs(length(U)-r)-.02 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y, I, L;                  // normalized coordinates\n    \n    U += .5*U*mat2(cos(2.*U+iTime),sin(2.*U-iTime));   // distorted coordinates \n    U *= 4.; \n    \n    I =floor(U); L = 2.*fract(U)-1.;                   // draw distorted checker\n    O = vec4 (.4*mod(I.x+I.y,2.) );\n    \n    O.r += Circle(L,.4);                               // draw circle in distorted space\n    \n    mat2 J = transpose(mat2(dFdx(U),dFdy(U))) *R.y/8.; // the Jacobian store the local distorted frame\n    L *= inverse(J);                                   // undistort by applying the inverse transform\n // or if you prefer right-multiplying matrices :\n // mat2 J = mat2(dFdx(U),dFdy(U)) *R.y/8.;            // the Jacobian store the local distorted frame\n // L = inverse(J)*L;                                  // undistort by applying the inverse transform\n    O.g += Circle(L,.4);                               // draw circle in undistorted space\n    \n    O.b = ( .5+.5*determinant(J) ) *.6;                // det(J) shows compression in distortion\n  //O.b = length(vec4(J))/3.;\n\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}