{
    "Shader": {
        "info": {
            "date": "1521445057",
            "description": "different blend",
            "flags": 0,
            "hasliked": 0,
            "id": "MsGyzm",
            "likes": 1,
            "name": "roundRect modified",
            "published": 3,
            "tags": [
                "roundrectmodified"
            ],
            "usePreview": 0,
            "username": "Fig1024",
            "viewed": 456
        },
        "renderpass": [
            {
                "code": "// returns alpha gradient for rounded box of specified thickness\n// where values outside rounded box are 1, values inside inner part are 0\nfloat getRoundedBoxAlpha(vec2 point, vec4 box_bounds, float radius)\n{\n    float alpha = 1.0;\n    \n    if(point.x < box_bounds.x || point.y < box_bounds.z || point.x > box_bounds.y || point.y > box_bounds.w)\n\t{\n\t\tif(radius > 0.0) // semi-transparent part\n\t\t{\n\t\t\t// check rectangle edges\n\t\t\tfloat min_d = 1.0;\n\t\t\n\t\t\tif(point.y > box_bounds.z && point.y < box_bounds.w) // is on horizontal edge?\n\t\t\t{\n\t\t\t\tmin_d = min(min_d, abs(box_bounds.x-point.x));\n\t\t\t\tmin_d = min(min_d, abs(box_bounds.y-point.x));\n\t\t\t\t\n\t\t\t}\n\t\t\telse if(point.x > box_bounds.x && point.x < box_bounds.y) // is on vertical edge?\n\t\t\t{\n\t\t\t\tmin_d = min(min_d, abs(box_bounds.z-point.y));\n\t\t\t\tmin_d = min(min_d, abs(box_bounds.w-point.y));\n\t\t\t}\n\t\t\telse  // check rectangle corners\n\t\t\t{\n\t\t\t\tif(point.y < box_bounds.w) // top\n\t\t\t\t{\n\t\t\t\t\tmin_d = min(min_d, distance(point, box_bounds.xz)); // top left\n\t\t\t\t\tmin_d = min(min_d, distance(point, box_bounds.yz)); // top right\n\t\t\t\t}\n\t\t\t\telse // bottom\n\t\t\t\t{\n\t\t\t\t\tmin_d = min(min_d, distance(point, box_bounds.xw)); // bottom left\n\t\t\t\t\tmin_d = min(min_d, distance(point, box_bounds.yw)); // bottom right\n\t\t\t\t}\n\t\t\t}\n\n\t\t\talpha = 1.0-smoothstep(0.0, radius, min_d);\n\t\t}\n\t\telse\n\t\t\talpha = 0.0;\n\t}\n    \n    return alpha;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalizedFragCoord = fragCoord/iResolution.xy;\n    \n    // aspect ratio fix\n    normalizedFragCoord.x *= iResolution.x/iResolution.y;\n    \n    // these would be shader inputs\n    // box bounds has x,y define minimum, maximum x coordinate\n    // box bounds z,w define minimum, maximum y coordinate\n    vec4 g_box_bounds = vec4(0.3, 0.7, 0.5, 0.7);\n    float g_box_radius = 0.1;\n    bool hallow = false;\n    \n    float alpha = getRoundedBoxAlpha(normalizedFragCoord, g_box_bounds, g_box_radius);\n    \n    if(hallow)\n    {\n        alpha = 0.5 - abs(alpha - 0.5);\n    }\n\n    vec4 col = vec4(alpha,alpha,alpha,1);\n  \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}