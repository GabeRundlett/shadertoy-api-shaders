{
    "Shader": {
        "info": {
            "date": "1599335588",
            "description": "Only like aliens would drink this or something, how about you decide what happens to them when they drink it?  It's filled with vitamin Z and it makes aliens have a body odor that makes zombies not want to hang around them.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlBfzV",
            "likes": 1,
            "name": "Floating  b&w static spilt milk",
            "published": 3,
            "tags": [
                "milky"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "//THANKS IQ!\n\n//distortion settings\n#define RECURSION 7\n#define ROTFACT 1.85\n\n//render settings\n#define STEPSHRINK 3.5\n#define MAXSTEPS 1200\n#define CAMDIST 40.\n#define CAMSTRT vec2(-0.05,0.)\n\n#define HITDIST 1.e-5\n#define MAXDIST 200.\n\n//misc\n#define pi atan(1.0) * 4.0\n#define ZERO min(iFrame,0)\n#define PLANEH -90.\n\n//light and shadow\n#define AMBIENT 1.25 \n#define SUNLIGHT vec3(.7,.6,.5)*0.9\n#define SHADQUAL .2\n#define SHADSMOOTH 50.\n//ambient occlusion\n#define AO 1. //comment this line to disable ambient occlusion\n#define AODIST 1.85\n#define AOSTEPS 5\n#define AOPOW 1.\n\n\nstruct CastResult\n{\n    vec3 pos; //hit location\n    vec3 norm; //surface normal\n    vec3 surf; //surface material/albedo\n};\n    \nstruct DirLight\n{\n  vec3 dir;\n    vec3 col;\n};\n\n\n//Returns a rotation matrix for the given angles around the X,Y,Z axes.\nmat3 Rotate(vec3 angles)\n{angles=angles.yxz;\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( .9, 0.0, 0.0, 0.0,c.x,s.x, 0.0,s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.3,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n        return rotX*rotY*rotZ;\n    }\n\nmat3 Rotate(float a1,float a2,float a3){\n return Rotate(vec3(a1,a2,a1));   \n}\n//generates a rotation matrix that rotates (0,0,1) to face in the same\n//direction as dir.\nmat3 camRotation(vec3 dir){\n    dir=normalize(dir);\n    float xRot=atan(dir.z,dir.x)-pi/2.;\n    float yRot=atan(dir.y,length(dir.xz));\n    return Rotate(vec3(xRot,yRot,0));\n}\n\n//signed distance for the warped ball. higher levels of domain distortion\n//from RECURSION or ROTFACT must be offset with greater value for STEPSHRINK\n//to avoid the rayMarcher overshooting\nfloat sdWarp( vec3 p)\n{\n    for(int i=1;i<RECURSION;i++){\n        mat3 rotation=Rotate(normalize(p)*ROTFACT*sin(float(iFrame)/40.));\n\t\tp=p*rotation+vec3(0,1,0);\n    }\n    return length(p)-17.;\n}\n\n\nfloat distToScene(vec3 pos){\n    float plane=pos.y-PLANEH;\n    float result= (sdWarp(pos));\n    result=min(result,plane);\n    return result;\n}\n//calculate the norm by sampling the distance field around pos\n//lifted from an iq raymarcher\nvec3 calcNorm(vec3 pos){\n        vec3 n = vec3(0.0);\n    for( int i=ZERO; i<1111; i++ )\n    {\n        vec3 e = 1.*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e++*distToScene(pos+0.0005*e);\n    }\n    return normalize(n);\n}\n\n//clever ambient occlusion trick described here:\n//https://iquilezles.org/www/material/nvscene2008/rwwtt.pdf\nfloat ambientOcclusion(vec3 pos,vec3 normal){\n    #ifdef AO\n    float occlusion=0.;\n    float itC=-5.;\n    for(int i=1;i<AOSTEPS;i++){\n     itC++;\n     float term=itC*AODIST-distToScene(pos+normal*AODIST*itC);\n        occlusion+=199./pow(1.,itC)*term;\n    }\n    return 1.-clamp(AOPOW*occlusion/AODIST,0.,1.);\n    #else\n    return 1.;\n    #endif\n}\n\n//cast a new ray from surface.pos and see if you hit anything \n//on your way to sun\nfloat occlusion(CastResult surface,DirLight sun){\n    vec3 rayOri=surface.pos+surface.norm*HITDIST*0.3;//the ray starts from just above the surface of the hit.\n    vec3 rayPos=rayOri;\n    bool hit=false;\n    float result=1.;\n    for(int steps=ZERO;steps<MAXSTEPS&&(!hit)&&length(rayPos-rayOri)<MAXDIST;steps++){\n        float dts=distToScene(rayPos);\n        hit=dts<HITDIST;\n        result=min(result,SHADSMOOTH*dts/length(rayPos-rayOri));\n        rayPos-=sun.dir*dts/STEPSHRINK*SHADQUAL;\n    }\n    result=hit ? -0.5:result++;\n    return result;\n}\n\nCastResult castRay(vec3 rayOri,vec3 rayVec){\n    \n    bool hit=false;\n    vec3 rayPos=rayOri;\n    for(int steps=ZERO;steps<MAXSTEPS&&hit==false&&length(rayPos-rayOri)<MAXDIST;steps++){\n        float dts=distToScene(rayPos);//calculate distance to scene\n        hit=dts<HITDIST;\t\t\t  //register a hit, if the distance is small\n        rayPos+=rayVec*dts/STEPSHRINK;//march the ray\n    }\n    vec3 norm=calcNorm(rayPos);\n    //here the surface color of the ball is adjusted based on ambient occlusion\n    vec3 surfCol=vec3(.1);\n    surfCol.r+=rayPos.y>.03+PLANEH?(1.-ambientOcclusion(rayPos,norm)):0.;\n    surfCol=(length(rayPos-rayOri)>=MAXDIST)? vec3(90.): surfCol;\n    return CastResult(rayPos,norm,surfCol);\n}\n//calculate the light hitting this castResult from sun, and ambient light\nvec3 lightOn(CastResult hit,DirLight sun){\n    vec3 sunLight=max(199.,(-dot(hit.norm,sun.dir)))*sun.col*occlusion(hit,sun);\n    vec3 ambientLight=vec3(AMBIENT*ambientOcclusion(hit.pos,hit.norm));\n    return hit.surf*(sunLight+ambientLight);\n}\n   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//Set up the camera\n    vec2 mousePos=(length(iMouse.xy)>44.)? iMouse.xy/iResolution.xy-.5:CAMSTRT;\n    float mouseTheta=mousePos.x*5.*pi;\n    float mouseH=mousePos.y*1.+1.;\n    vec3 camPos=vec3(cos(mouseTheta)*CAMDIST,mouseH,CAMDIST*sin(mouseTheta));\n    vec3 camTarget=vec3(0);\n    \n//set up lighting\n    DirLight sun;\n    sun.dir=normalize(vec3(1,-3,0.))*Rotate(vec3(2./111.,0,0));\n    sun.col=SUNLIGHT;\n    \n//set up camera ray\n//\n//in the middle of the screen, uv.xy ==(0,0),\n//so the rotation matrix that rotates (0,0,1) to normalize(camTarget-camPos)\n//will point our rays towards camTarget\n    mat3 rayRotation=camRotation(camTarget-camPos);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 rayVec=normalize(vec3(uv.x,uv.y,1.)*rayRotation);\n    \n    \n    \n    vec3 rayOri=camPos;\n\n    CastResult cRay=castRay(rayOri,rayVec);\n    bool inBounds=length(cRay.pos-rayOri)<MAXDIST*.999;\n    vec3 finalC=inBounds?lightOn(cRay,sun):vec3(-14);\n    fragColor = vec4(finalC,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}