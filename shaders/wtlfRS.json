{
    "Shader": {
        "info": {
            "date": "1597076970",
            "description": "Source : https://www.youtube.com/watch?v=dKA5ZVALOhs&t=48s\nWord Onet : https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "wtlfRS",
            "likes": 0,
            "name": "8. The Simplest 3D",
            "published": 3,
            "tags": [
                "simplest"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "\n// Get Distance To The Ray Rd\nfloat DistanceLine( vec3 ro , vec3 rd , vec3 p ) {\n    float h = length( cross( ( p - ro ) , rd ) ) / length(rd);\n    return h;\n}\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n\t\n    \n    // variables\n\tvec3 camPos = vec3( 0.0f , 0.0f , -5.5f );\t\t\t// ro\n    vec3 rd = normalize( vec3(uv,0.0f) - camPos);\t\t// ray dirction\n    vec3 objectCenter = vec3 (0.0f, 0.0f , 5.0f ); \t// center of Object\n    float objectRadius = 0.2f;\n    \n    objectCenter = vec3(0.0f, 0.0f, 10.0f) + vec3( cos(iTime) * 1.0f , 0.0f , sin(iTime)* 1.0f );\n    \n    float h = DistanceLine( camPos , rd , objectCenter );\n    h = smoothstep( objectRadius ,objectRadius - 0.01f , h );\n\n    \n\n    vec3 col = vec3(h);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}