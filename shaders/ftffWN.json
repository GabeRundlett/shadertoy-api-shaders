{
    "Shader": {
        "info": {
            "date": "1650917980",
            "description": "camera:   left: flat perspective      right: cylindrical perspective\n                key ↑↓ : opening           mouse.xy: rot\nscene:     top: straight ribbon        bottom: cylindrical ribbon\n                roof: square grid           floor: polar grid\n",
            "flags": 48,
            "hasliked": 0,
            "id": "ftffWN",
            "likes": 10,
            "name": "cameras: photo vs panoramic",
            "published": 3,
            "tags": [
                "projection",
                "perspective",
                "cameras",
                "cylindrical"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 346
        },
        "renderpass": [
            {
                "code": "#define T(U)    ( V = smoothstep(0.,-.05,abs(fract(U)-.5) -.5 ),    \\\n                  texture(iChannel0, U) * V.x*V.y ) // pattern\n#define rot(a)    mat2(cos( a + vec4(0,11,33,0)))\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    O-=O;\n    vec2  R = iResolution.xy, V,\n          U = ( 2.*u - R ) / R.x,                   // normalized screen coordinates\n          M = iMouse.xy/R;\n    if ( int(u) ==int(R)/2 ) { O = vec4(1,0,0,1); return; } // red separator\n    \n    float Z = 8., H = 1.5, a,                       // Z: object distance\n          W = iMouse.z > 1e4 ? .38/ M.x : 1.;       // 1/W: camera opening\n    W = 1./max(0.,texelFetch(iChannel1,ivec2(0),0).y );\n    vec3  P, D = vec3( U , W );                     // ray direction: left: flat perspective\n    if (D.x>0.) {                                   //                right: cylindrical perspective (panorama)\n          a = U.x/W;\n          D.xz = W* vec2(sin(a),cos(a));\n          if (abs(a) > 3.14/2.) O.r+=.5;            // view > 180° : mid-red alert\n          if (abs(a) > 3.14)    O.r+=.5;            // view > 360° : red alert\n       }\n    D = normalize(D);\n    if (iMouse.z > 0.)\n      D.yz *= rot( 1.57*(2.*M.y-1.) ),\n      D.xz *= rot( 1.57*(2.*M.x-1.) );\n    \n    P = Z* D/abs(D.z);                              // draw flat ribbon \n    if ( abs(P.y-1.) < .5 && P.z>0. ) { \n        O += T(P.xy-.5); return; }                  // with mapped texture\n    \n    P = Z* D/length(D.xz);                          // draw cylindrical ribbon\n    if ( abs(P.y+1.) < .5 ) {                       // with mapped texture\n        O += T(vec2(Z*atan(P.x,P.z),P.y)-.5); return; } \n    \n    P = H * D/abs(D.y);\n    if ( P.y > 0. ) {                               // draw roof square grid\n        O +=   T(P.xz+vec2(.5,0) ) \n             * vec4(0,1,1,0) * exp(-P.z/Z);         // color + darkening with z\n        return; } \n  \n    if ( P.y < 0. ) {                               // draw floor polar grid\n        O +=  T(vec2(Z*atan(P.x,P.z),Z*log(length(P.xz)))+vec2(.5,0) )\n             * vec4(1,.5,0,0) * exp(-P.z/Z);        // color + darkening with z\n        return; }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keyClick(a)   ( texelFetch(iChannel3,ivec2(a,1),0).x > 0.)\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0,ivec2(U),0);\n    if (iFrame==0) O.xy = vec2(0,1);\n    if keyClick(38) O.x++, O.y *= 1.1;\n    if keyClick(40) O.x--, O.y /= 1.1;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}