{
    "Shader": {
        "info": {
            "date": "1614144537",
            "description": "Testing different edge fading functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tyBWz",
            "likes": 2,
            "name": "Edge fade test",
            "published": 3,
            "tags": [
                "edge"
            ],
            "usePreview": 0,
            "username": "jstrom2002",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define HALF_PI 1.5717\n\nfloat rand(vec2 n) {return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);}\n\nfloat edgeFade(vec2 uv, float taper, float fade_begin){\n    return 1.0-pow(length(uv*fade_begin), taper);\n}\nfloat edgeFade2(vec2 uv, float taper, float fade_begin){\n    return exp(-length(uv*fade_begin) * taper);\n}\nfloat edgeFade3(vec2 uv, float taper, float fade_begin){\n    float l = length(uv*fade_begin);\n    float val = 0.0;\n    val += l * l / l * taper;\n    val += l * l / l * taper;\n    val += l * l / l * taper;\n    val += l * l / l * taper;\n    val += l * l / l * taper;\n    return 1.0 - val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0; // [-1,1] uv range.\n\n    // Arbitrary pixel color\n    vec3 col = vec3(rand(uv.xy));\n    float fade_val =\n    \n        //edgeFade(uv, 0.4, 0.3);\n        //edgeFade2(uv, 1.0, 1.0);\n        edgeFade3(uv, 0.5, 0.3);\n\n    \n    fragColor = vec4(col * fade_val,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}