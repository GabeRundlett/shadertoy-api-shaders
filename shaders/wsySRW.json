{
    "Shader": {
        "info": {
            "date": "1573514499",
            "description": "made this during a twitch livestream: https://www.twitch.tv/videos/505355583",
            "flags": 0,
            "hasliked": 0,
            "id": "wsySRW",
            "likes": 7,
            "name": "Twitch: Legend of the Angry Ball",
            "published": 3,
            "tags": [
                "clouds",
                "twitch",
                "liveshader"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 438
        },
        "renderpass": [
            {
                "code": "\nfloat edge(vec2 p, vec2 k) {\n  p.y = abs(p.y);\n  p -= k;\n  float sgn = sign(p.x)+sign(p.y);\n  return sgn == 2. ? length(p) : max(p.x,p.y);\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k);\nfloat hash(vec2 p) {\n  int x = FK(p.x); int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nfloat component(vec3 p, vec3 ro) {\n  float phi = acos(ro.x);\n  float theta = ro.y*3.1415;\n  vec3 ax = vec3(cos(phi), sin(phi)*cos(theta), sin(phi)*sin(theta));\n  p = erot(p, ax, ro.z*3.1415);\n  \n  \n  vec3 sgn = mod(floor(p),2.)*2.-1.;\n  p = (fract(p)-0.5);\n  p*=sgn;\n  return (p.x+p.y+p.z)/sqrt(3.);\n}\n\nfloat hash1(float rnd) {\n  return hash(vec2(rnd,rnd*rnd+1.));\n}\n\nvec3 hash3(float rnd) {\n  return vec3(hash1(rnd+1.), hash1(hash1(rnd+2.)), hash1(hash1(rnd*2.+2.)*3.));\n}\n\nfloat noise(vec3 p, int iters) {\n  float d = 0.;\n  float acc =1.;\n  for (int i = 0; i < iters; i++) {\n    acc+=1.;\n    d += component(p, hash3(float(i)));\n  }\n  \n  return d/sqrt(acc*1.5)-0.2;\n}\n\nvec2 levl(vec3 p, vec3 off, float s) {\n\n  vec3 cls = normalize(p) * s; \n  return vec2(length(noise(cls+off, 1)), distance(p, cls));\n}\n\nfloat bpm = 136.;\n\nvec2 mmin(vec2 a, vec2 b) {\n  if (a.x < b.x) return a;\n  return b;\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  return distance(p, mix(a,b,clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.)));\n}\n\nfloat bgcol = 0.;\n\nvec2 scene(vec3 p) {\n  vec2 dst = vec2(100000.,-1.);\n  \n  float bar = floor(iTime/60.*bpm);\n  float iter = mod(bar, 4.)+1.;\n  \n  if (iter == 4.) iter = 2.;\n  float k = 0.;\n  for (int i = 0; i < int(iter); i++) {\n    vec2 mp = levl(p, vec3(iTime/2.), 1.+(float(i)+1.)*0.2);\n    if (i==0) k = -mp.x + 0.35;\n    float lev = edge(mp, vec2(0.3 - float(i)*0.15, 0.05))-0.05;\n    vec2 col = vec2(lev, float(i)+1.);\n    dst = mmin(dst, col);\n    bgcol = float(i)+1.;\n  }\n  \n  vec3 nrz = normalize(p)*1.2;\n  float krt=0.1;\n  float dthrg = length((fract(nrz/krt + iTime/2.)-0.5)*krt);\n  vec2 rtir = vec2(dthrg, distance(p, nrz));\n  float rz = length(p)-1.2;\n  \n  float anger = pow(fract(iTime/60.*bpm),0.5) * (length(sin(nrz*8.+iTime))/sqrt(3.)*0.5+0.5);\n  if (mod(bar, 4.) != 3.) anger = 0.;\n  rz = linedist(rtir, vec2(0), vec2(0,anger))-0.02;\n  rz = -min(-rz,-k);\n  rz = min(rz, length(p)-1.2);\n  \n  return mmin(vec2(rz,0),dst);\n}\n\n#define AP(f,k) vec3(f(k[0]).x,f(k[1]).x,f(k[2]).x)\nmat3 ep = mat3(0.01);\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-ep;\n  return normalize(scene(p).x - AP(scene,k));\n}\n\n\n\nvec3 colr(float m) {\n  vec3 col = vec3(0);\n  if (m == 0.) col= vec3(153,70,70);\n  if (m == 1.) col=vec3(173, 173, 173);\n  if (m == 2.) col=vec3(100, 222, 207) ;\n  if (m == 3.) col=vec3(255, 255, 255);\n  return col / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  //uv*=4;\n  float pound = fract(iTime/60.*bpm);\n  vec3 cam = normalize(vec3(1.+pound*0.3,uv));\n  vec3 init = vec3(-5.,0.,0.);\n  \n  float ro = iTime/2.;\n  cam = erot(erot(cam,vec3(0.,1.,0.), ro/3.), vec3(0.,0.,1.), ro);\n  init = erot(erot(init,vec3(0.,1.,0.), ro/3.), vec3(0.,0.,1.), ro);\n  \n  vec3 p = init;\n  bool hit = false;\n  vec2 dist;\n  for(int i = 0; i < 60; i++) {\n    dist = scene(p);\n    if (abs(dist.x)<0.001) { hit = true; break; }\n    if (distance(p, init) > 100.) break;\n    p+=cam*dist.x;\n  }\n  \n  vec3 n = norm(p);\n  vec3 c = colr(hit ? dist.y : bgcol);\n  //float edg = noise(vec3(uv,iTime/10));\n  vec3 colc = sqrt(c*c*length(sin(n*2.)*0.5+0.5)/sqrt(3.));\n  fragColor.xyz = erot(colc*2.-1., normalize(vec3(1.,1,2)), iTime)*0.5+0.5;\n  \n  fragColor.xyz += vec3(hash(uv*(iTime+0.1))*0.05);\n  if(hit) return;\n  \n  \n  vec3 p2 = init;\n  float dist2;\n  float k =1.;\n  for(int i = 0; i < 20; i++) {\n    dist2 = noise(p2, 4)-0.2;\n    if(i==0)k=sign(dist2);\n    dist2*=k;\n    if (abs(dist2)<0.001) { break; }\n    if (distance(p2, init) > 100.) break;\n    p2+=cam*dist2;\n  }\n  float col = length(sin(p2)*0.5+0.5)/sqrt(3.);\n  fragColor.xyz*=mix(col, 1.,0.4);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}