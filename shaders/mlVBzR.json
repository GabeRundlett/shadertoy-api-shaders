{
    "Shader": {
        "info": {
            "date": "1701794004",
            "description": "Bayer CFA",
            "flags": 32,
            "hasliked": 0,
            "id": "mlVBzR",
            "likes": 1,
            "name": "Bayer CFA and Debayering",
            "published": 3,
            "tags": [
                "filter",
                "color",
                "array"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const float zoom = 0.125;\n\n    fragCoord = zoom*((fragCoord-0.5*iResolution.xy)/(0.5*iResolution.xy))+vec2(0.5,0.5);\n    fragColor = vec4(texture(iChannel0,fragCoord).rgb, 1.0); // original\n    //fragColor = vec4(texture(iChannel1,fragCoord).rgb, 1.0); // cfa color\n    fragColor = vec4(texture(iChannel2,fragCoord).rgb, 1.0); // debayered\n    //fragColor = vec4(texture(iChannel3,fragCoord).rgb, 1.0); // blurred\n    fragColor = vec4(abs(fragColor.rgb),1.0); // change debayer to subtract for difference view\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define num_samples 13\n\n// HRAA\nconst vec2 sample_offset[13] = vec2[](\n    vec2(-1.000, 1.000),\n    vec2( 0.000, 1.000),\n    vec2( 1.000, 1.000),\n\n    vec2(-0.500, 0.500),\n    vec2( 0.500, 0.500),\n\n    vec2(-1.000, 0.000),\n    vec2( 0.000, 0.000),\n    vec2( 1.000, 0.000),\n\n    vec2(-0.500,-0.500),\n    vec2( 0.500,-0.500),\n\n    vec2(-1.000,-1.000),\n    vec2( 0.000,-1.000),\n    vec2( 1.000,-1.000)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n\n    fragCoord += vec2(cos(3.0*iTime),sin(3.0*iTime));\n\n    for(int i = 0; i < num_samples; i++) {\n    //for(int i = 0; i < 1; i++) {\n        vec2 dithCoord = fragCoord+0.5*sample_offset[i];\n        //vec2 dithCoord = fragCoord+2.0*(texelFetch(iChannel1,ivec2(i+1,iFrame%256),0).xy-0.5);\n\n        vec2 uv = (dithCoord-0.5*iResolution.xy)/(0.5*16.0);\n\n        float th = 0.03*cos(3.1*iTime);\n\n        //uv *= 0.5;\n\n        uv *= mat2(cos(th),-sin(th), sin(th), cos(th));\n\n        float a = dot(uv,uv) <= 1.0 ? 1.0 : 0.0;\n\n        fragColor += vec4(mix(texture(iChannel0,8.0*0.001953125*uv+0.5).rgb,vec3(1),a),1.0);\n        \n        fragColor += vec4(mix(texture(iChannel1,2.0*0.001953125*uv+0.5).rgb,vec3(1),a),1.0);\n    }\n\n    fragColor = vec4(fragColor.a != 0.0 ? fragColor.rgb/fragColor.a : fragColor.rgb, 1.0);\n\n    //fragColor.rgb = log(fragColor.rgb+1.0);\n\n    fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    /*\n\n    CFA Pattern:\n    +---+---+\n    | 0 | 1 |\n    +---+---+\n    | 2 | 3 |\n    +---+---+\n\n    */\n\n    int cfa = (int(fragCoord.x)%2)+(2*(((int(iResolution.y)-1)-int(fragCoord.y))%2));\n\n    fragColor.rgb *= 1.0-0.0*texture(iChannel1,(fragCoord+1024.0*texture(iChannel2,vec2(iFrame%256,iFrame/256)/256.0).xy)/1024.0).rgb;\n\n    if(cfa == 0) fragColor.rgb *= vec3(1.0, 0.0, 0.0);\n    if(cfa == 1) fragColor.rgb *= vec3(0.0, 1.0, 0.0);\n    if(cfa == 2) fragColor.rgb *= vec3(0.0, 1.0, 0.0);\n    if(cfa == 3) fragColor.rgb *= vec3(0.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // standard linear method\n    // sharpest but also subject to false color and zippering\n    fragColor = vec4(\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 1)).r+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 1)).r+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 1)).r+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 0)).r+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 0)).r+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 0)).r+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1,-1)).r+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0,-1)).r+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1,-1)).r,\n\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 1)).g+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 0)).g+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 0)).g+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 0)).g+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0,-1)).g,\n\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 1)).b+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 1)).b+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 1)).b+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 0)).b+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 0)).b+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 0)).b+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1,-1)).b+\n    0.500*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0,-1)).b+\n    0.250*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1,-1)).b,\n\n    1.0);\n\n    //fragColor.rgb = fragColor.rrr;\n    //fragColor.rgb = fragColor.ggg;\n    //fragColor.rgb = fragColor.bbb;\n\n    // mipmap method\n    //fragColor.rgb = vec3(4.0,2.0,4.0)*texelFetch(iChannel0,ivec2(fragCoord)/2,1).rgb;\n    //fragColor.rgb = mix(fragColor.rgb,vec3(4.0,2.0,4.0)*textureLod(iChannel0,fragCoord/iResolution.xy,1.0).rgb,0.5);\n\n    // alternate linear method (smooths green)\n    vec3 color = vec3(\n    0.5*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 1))+\n    texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 1))+\n    0.5*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 1))+\n    texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 0))+\n    2.0*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 0))+\n    texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 0))+\n    0.5*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1,-1))+\n    texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0,-1))+\n    0.5*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1,-1)));\n\n    // blend alternate method\n    //fragColor.rgb = mix(fragColor.rgb, vec3(0.5, 0.25, 0.5)*color, 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 1)).rgb+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2(-1, 0)).rgb+\n    8.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0, 0)).rgb+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 1, 0)).rgb+\n    1.000*texelFetchOffset(iChannel0,ivec2(fragCoord),0,ivec2( 0,-1)).rgb,\n    1.0);\n\n    fragColor.rgb /= 12.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}