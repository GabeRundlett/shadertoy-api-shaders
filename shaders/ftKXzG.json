{
    "Shader": {
        "info": {
            "date": "1640915450",
            "description": "playing with sampling SDF distances along a line",
            "flags": 0,
            "hasliked": 0,
            "id": "ftKXzG",
            "likes": 15,
            "name": "LineOP",
            "published": 3,
            "tags": [
                "sdf",
                "line",
                "extrude"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// playing with sampling various SDF distances along a line segment\n\nfloat lengthN(vec2 v, float n)\n{\n    vec2 tmp = pow(abs(v), vec2(n));\n    return pow(tmp.x+tmp.y, 1.0/n);\n} \nfloat roundBox(vec3 p, vec3 size, float r)\n{\n    return length(p-clamp(p,-size,size))-r;\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e)\n{\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// distance in ret.z\nvec3 closestPtSegWithDist(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a;\n    vec2 ba = b-a;\n    float _ddd = dot(pa,ba)/dot(ba,ba);\n    float dal = _ddd/length(ba);\n\treturn vec3(a + ba*clamp(_ddd, 0., 1.),dal);\n}\n// r.w = distance along line (unclamped)\nvec4 opLine(vec3 p, vec3 a, vec3 b, vec3 up)\n{\n   \tvec3 w = normalize(cross(a-b, b-up));\n\tvec3 v = normalize(cross(w, a-b));\n\tvec3 u = cross(w,v);\n    mat3 m = mat3(u,v,w);\n    a *= m;\n    b *= m;\n    p *= m;\n    vec3 bz = closestPtSegWithDist(p.xy,a.xy,b.xy);\n    float az = (a.z+b.z)*0.5;    \n    return vec4(p.z-az,bz.yx-p.yx,bz.z);\n}\n\n\n\nfloat map( in vec3 p )\n{\n\n\n    vec3 upvec = vec3(0.0,1.0,0.0);\n    vec3 a = vec3(-1.0, -0.5, 0.0);\n    vec3 b = vec3(1.0,  0.5, 0.0);\n\tvec4 bz=opLine(p,a,b,upvec);\n\n\n    bz.x -= 4.5;\n\n  \tfloat dd=abs(lengthN(bz.xy,3.0)-(.5+sin(bz.w*120.0)*0.02))-.05;\n    dd = length(max(vec2(dd,abs(bz.z)),0.0))-0.05;\n    float d = min(1000.0,dd);\n\n    bz.x += 1.5;\n\n    dd = length(bz.xyz)-(0.25+bz.w*0.75);\n    d = min(d,dd);\n\n    bz.x += 1.5;\n        \n    dd = roundBox(bz.xyz,vec3(0.1+bz.w,0.1+bz.w,0.1),0.1);\n    d = min(dd,d);\n\n    bz.x += 1.5;\n\n    dd = sdTorus(bz.xyz,vec2(0.2+(bz.w*0.5),0.1));\n    d = min(dd,d);\n    \n    bz.x += 1.5;\n\n    dd = sdBoundingBox(bz.xyz,vec3(0.2+bz.w,0.2,0.2),0.025);\n    d = min(dd,d);\n\n    bz.x += 1.5;\n    \n    dd = sdCylinder(bz.xyz,vec2(0.1+bz.w,0.1));\n    d = min(dd,d);\n\n    bz.x += 1.5;\n\n    dd = roundBox(bz.xyz,vec3(0.2,0.2,0.1),0.1);\n    d = min(dd,d);\n\n    return d*0.9;\n \n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n    float yy = sin(iTime*.2)*1.5;\n\tvec3 ro = vec3( 6.0*cos(an), 2.0+yy, 6.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 30.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}