{
    "Shader": {
        "info": {
            "date": "1682000394",
            "description": "wanted to see how much work can be saved when zooming out of an fbm. I chose lodFactor for the effect to be still noticable but-depending on monitor and ambiant brightness-you may wanna go fullscreen and play with the mouse a bit to get a good impression",
            "flags": 0,
            "hasliked": 0,
            "id": "mt33Rr",
            "likes": 2,
            "name": "FBM LOD Test",
            "published": 3,
            "tags": [
                "fbmlod"
            ],
            "usePreview": 0,
            "username": "pnoqable",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "vec3 noise33(vec3 p) {\n    vec3 q = vec3(dot(p, fract(vec3(234.757, 432.131, 375.987))),\n                  dot(p, fract(vec3(432.862, 654.345, 867.123))),\n                  dot(p, fract(vec3(876.132, 654.535, 342.456))));\n    return fract(cos(q)*7684.23);\n}\n\nvec3 smoothNoise33(vec3 p) {\n    vec3 c = floor(p);\n    vec3 l = fract(p);\n    vec3 blf = noise33(c),\n         brf = noise33(c+vec3(1,0,0)),\n         tlf = noise33(c+vec3(0,1,0)),\n         trf = noise33(c+vec3(1,1,0)),\n         blb = noise33(c+vec3(0,0,1)),\n         brb = noise33(c+vec3(1,0,1)),\n         tlb = noise33(c+vec3(0,1,1)),\n         trb = noise33(c+vec3(1,1,1));\n    l = l*l*(3.-2.*l);\n    //l = l*l*l*(l*(l*6.-15.)+10.);\n    return mix(mix(mix(blf, brf, l.x), mix(tlf, trf, l.x), l.y),\n               mix(mix(blb, brb, l.x), mix(tlb, trb, l.x), l.y), l.z);\n}\n\nvec3 fbm33(vec3 p, int levels) {\n    vec3 result = vec3(0);\n    float factor = 1.;\n    for(int l=0; l<levels; l++) {\n        result += smoothNoise33(factor*p) / factor;\n        factor *= 2.;\n    }\n    result /= 2. - 2. / float(factor);\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    float zoom = pow(2., 5. - 4. * cos(0.25 * iTime));\n    \n    vec2 uv = zoom * (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = zoom * (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    if(iMouse.z <= 0.){\n        m = vec2(0);\n    }\n\n    // level of detail, only on right side:\n    float lodFactor = uv.x > m.x ? 0.333 : 0.;\n    \n    float levels = 5. - round( lodFactor * log2(zoom) );\n    \n    vec3 col = fbm33(vec3(uv, 0.1*iTime), int(levels));\n    \n    col *= smoothstep(0., 2.*dFdx(uv.x), abs(uv.x-m.x));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}