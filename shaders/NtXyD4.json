{
    "Shader": {
        "info": {
            "date": "1647974170",
            "description": "A groovy melting swirl of saturated color seeded by a foreground figure. Inspired by the analog feedback effect of displaying the camera's own output as a backdrop (eg. https://makezine.com/projects/freaky-fractals-hd-video-feedback-machine/). ",
            "flags": 32,
            "hasliked": 0,
            "id": "NtXyD4",
            "likes": 9,
            "name": "Groovy Green Screen",
            "published": 3,
            "tags": [
                "greenscreen",
                "psychedelic",
                "chromakey",
                "feedback",
                "buffer",
                "groovy",
                "melting"
            ],
            "usePreview": 0,
            "username": "lwneal",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    fragColor = texture(iChannel1, uv);    \n    //fragColor = texture(iChannel2, uv); // to test the globalColorBalance pass\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This pass performs most of the work; its output is displayed\n// The other buffer exists only to provide globalColorBalance\n\nfloat chromaKey(in vec2 fragCoord) {\n    // Exercise 1: improve this function to remove the green border from Jean-Claude\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float r = 13. / 255.;\n    float g = 163. / 255.;\n    float b = 38. / 255.;\n    vec3 bkg = vec3(r, g, b);\n    vec3 vid = texture(iChannel0, uv).rgb;\n    return length(vid - bkg);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 fg = texture(iChannel0, uv).rgb;\n\n    // Swirling motion (pan + zoom + rotation about center)\n    // Exercise 2: Reverse the swirl, or move it in another direction\n    uv.y -= .0001;\n    uv -= .5;\n    uv *= 1.01;\n    uv.x += .01 * (0. - sin(uv.y));\n    uv.y += .01 * (0. + sin(uv.x));\n    uv += .5;    \n    vec3 bg = texture(iChannel1, uv).rgb;\n    \n    // global scaling: this provides the lava-lamp cycle through different colors\n    // Exercise 3: What happens when you rearrange the r b g channels here?\n    vec4 globalColorBalance = texture(iChannel2, uv*.01);             \n    bg.rbg += .01 * (.5 - globalColorBalance.bgr);\n    \n    // apply chroma-key\n    float d = chromaKey(fragCoord);\n    float alpha = clamp(.4 + ((d - .4) * 4.), .0, 1.);\n    fragColor.rgb = alpha * fg + (1. - alpha) * bg;\n    fragColor = clamp(fragColor, 0., 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This exists only because I can't figure out how to get the sum of all pixels\n// So, this is like an approximate time-delayed pixel-summing machine\n// Visually it's a faster blurry version of the main buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Spiral inward like a groovy psychedelic map-reduce\n    vec2 uvGroovy = uv;\n    uvGroovy -= .5;\n    uvGroovy *= 1.02;\n    uvGroovy.x += .05 * (0. - sin(uvGroovy.y));\n    uvGroovy.y += .05 * (0. + sin(uvGroovy.x));\n    uvGroovy += .5;\n    uvGroovy += .0001 * sin(iTime);  // wobble a little to avoid aliasing\n \n    float p = 10. * length(uv - uvGroovy);\n    fragColor = (1. - p) * texture(iChannel2, uvGroovy) + p * texture(iChannel1, uv);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}