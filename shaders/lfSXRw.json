{
    "Shader": {
        "info": {
            "date": "1707329614",
            "description": "The point in the scale where colors seem to be equal depicts your monitors gamma.\nBuilt for fullscreen use.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfSXRw",
            "likes": 4,
            "name": "Gamma correction test stripes",
            "published": 3,
            "tags": [
                "2d",
                "gamma",
                "srgb"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "#define ZERO min(0,iFrame)\n\nfloat pen_width = .0004; //thickness of letter stroke\nfloat xw = .002; // half letter width\nfloat xh = .002; // half letter height\n\nfloat x_border_fac = .48; // the bigger the less border left and right\nfloat y_border_fac = .23; // the bigger the less border top and bottom\n\nfloat stripe_fac1 = 1.1; // the bigger the more border between brightness levels\nfloat stripe_fac2 = 1.3; // the bigger the more border between colors\n\nfloat line_thickness1 = .0005; // default line thickness\nfloat line_thickness2 = .001; // line thickness of gamma 2.2\n\nfloat n_stripes = 5.; // number of alternating stripes of a certain color / brightness\n\nfloat n_lines = 20.; // number of lines\n\nfloat gamma_high = 3.; // highest gamma value on scale\nfloat gamma_low = 1.; // lowest gamma value on scale\n\nfloat gamma_rounding = 10.; // round gamma to 1 digit after the dot\n\nvec3 digit_col = vec3(1); // default digit col\nvec3 digit_col2 = vec3(0,1,0); // digit col of gamma 2.2\n\nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\nfloat line_segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1. );\n\tvec2 paba = pa - ba*h;\n\treturn dot(paba, paba);\n}\n\nfloat cubic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\n\tvec2 a_2=a2+t*a3;\n\tvec2 a_1=a1+t*a_2;\n\tvec2 b_2=a_2+t*a3;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*b_2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat cubic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\tvec2 a3 = (-p0 + 3. * p1 - 3. * p2 + p3);\n\tvec2 a2 = (3. * p0 - 6. * p1 + 3. * p2);\n\tvec2 a1 = (-3. * p0 + 3. * p1);\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\n\tfor(int i=ZERO;i<3;i++){\n\t\tt=params[i];\n\t\tfor(int j=0;j<3;j++){\n\t\t\tt=cubic_bezier_normal_iteration(t,a0,a1,a2,a3);\n\t\t}\n\t\tt=clamp(t,0.,1.);\n\t\tvec2 uv_to_p=((a3*t+a2)*t+a1)*t+a0;\n\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t}\n\n\treturn d0;\n}\n\nfloat zero_dis(vec2 uv){\n\n\tuv = abs(uv);\n\n\tfloat i_fac = .63;\n\tfloat i_fac1 = .72;\n\tfloat i_fac2 = 1.02;\n\n\tfloat xw = xw * i_fac1;\n\tfloat xh = xh * i_fac2;\n\n\treturn cubic_bezier_dis_approx_sq(uv,vec2(0,xh),vec2(xw*i_fac,xh),vec2(xw,xh*i_fac),vec2(xw,0));\n}\n\nfloat one_dis(vec2 uv){\n\n\tfloat fac1 = 1.02;\n\n\tfloat d0 = line_segment_dis_sq(uv, vec2(-xw*.56,-xh), vec2(xw*.52,-xh));\n\td0 = min(d0, line_segment_dis_sq(uv, vec2(0,-xh), vec2(0,xh*fac1)));\n\td0 = min(d0, line_segment_dis_sq(uv, vec2(0,xh*fac1), vec2(-xw*.5,xh*.7)));\n\n\treturn d0;\n}\n\nfloat two_dis(vec2 uv){\n\n    uv += vec2(-.1*xw,0.);\n\n\tfloat i_fac = .86;\n\tfloat i_fac1 = .83;\n\tfloat i_fac2 = .1;\n\tfloat i_fac3 = .5;\n\tfloat i_fac4 = -.1;\n\tfloat i_fac5 = .87;\n\tfloat i_fac6 = .78;\n\tfloat i_fac7 = .2;\n\n\tvec2 pp = vec2(-xw*i_fac1,-xh);\n\tfloat d0 = line_segment_dis_sq(uv, pp, vec2(xw*i_fac3,-xh));\n\tvec2 p3 = vec2(xw*i_fac2,xh*i_fac4);\n\td0 = min(d0, line_segment_dis_sq(uv, pp, p3));\n\tvec2 p0 = vec2(-xw*i_fac5,xh*i_fac6);\n\tvec2 p1 = p0 + i_fac*(p3-pp) - vec2(0,xh*i_fac7);\n\tvec2 p2 = p3 + i_fac*(p3-pp);\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv,p0,p1,p2,p3));\n\n\treturn d0;\n}\n\nfloat three_dis(vec2 uv){\n\n    uv += vec2(-.1*xw,0);\n\n\tfloat i_fac1 = .77;\n\tfloat i_fac2 = .78;\n\tfloat i_fac3 = 1./3.;\n\tfloat i_fac4 = 1.2;\n\tfloat i_fac5 = 1.2;\n\tfloat i_fac6 = .8;\n\tfloat i_fac7 = 1.3;\n\tfloat i_fac8 = 1.4;\n\tfloat i_fac9 = .8;\n\n\tvec2 p0 = vec2(-xw*i_fac1,xh*i_fac2);\n\tvec2 p3 = vec2(-xw*i_fac3,0);\n\tfloat d0 = cubic_bezier_dis_approx_sq(uv,p0,p0+vec2(i_fac5*xw,i_fac6*xh),vec2(xw*i_fac4,0),p3);\n\tp0 *= vec2(1.05,-1.03);\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv,p3,vec2(xw*i_fac7,0),p0+vec2(i_fac8*xw,-i_fac9*xh),p0));\n\n\treturn d0;\n}\n\nfloat four_dis(vec2 uv){\n\tfloat fac = .27;\n\tfloat fac2 = .5;\n\n\tvec2 p1 = vec2(fac*xw,xh*1.03);\n\tvec2 p2 = vec2(-xw*.88,-xh*fac2);\n\tvec2 p3 = vec2(xw*.64,-xh*fac2);\n\n\tfloat d0 = line_segment_dis_sq(uv, vec2(fac*xw,-xh), p1);\n\td0 = min(d0,line_segment_dis_sq(uv, p1, p2));\n\td0 = min(d0,line_segment_dis_sq(uv, p2, p3));\n\n\treturn d0;\n}\n\n\nfloat five_dis(vec2 uv){\n\n\tfloat fac = .59;\n\n\tvec2 p1=vec2(-xw*fac,xh);\n\tvec2 p2=vec2(-xw*fac,-xh*.11);\n\n\tvec2 p3=vec2(xw*.69,-xh*.4);\n\tvec2 p4=vec2(-xw*.68,-xh*.78);\n\n\tfloat d0 = line_segment_dis_sq(uv, vec2(xw*fac,xh), p1);\n\td0 = min(d0, line_segment_dis_sq(uv, p1, p2));\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv, p2, p2+vec2(xw*.45,xh*.5), p3+vec2(0,xh*.6), p3));\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv, p3, p3-vec2(0,xh*.56), p4 + vec2(xw*.7,-xh*.5), p4));\n\n\treturn d0;\n}\n\nfloat six_dis(vec2 uv){\n\tfloat fac = .65;\n\tfloat fac2 = .8;\n\tfloat fac3 = .42;\n\n\tvec2 p1=vec2(-xw*fac,xh);\n\tvec2 p2=vec2(-xw*fac,-xh*fac3);\n\n\tvec2 p3=vec2(xw*fac,-xh*fac3);\n\tvec2 p4 = vec2(-.3692*xw,-.924*xh);\n\n\tvec2 p5 = vec2(-xw*.57,xh*.7);\n\tvec2 p6=vec2(xw*.66,xh*.78);\n\n\tfloat d0 = cubic_bezier_dis_approx_sq(uv, p2, p2+vec2(0,xh*fac2), p3+vec2(0,xh*fac2), p3);\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv, p3, p3-vec2(0,xh*fac2), p2 + vec2(0,-xh*fac2), p2));\n\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv, p4, p4+vec2(-.4095*xw,.24*xh), p5 - vec2(xw*.4,xh*.5)*.8, p5));\n\td0 = min(d0, cubic_bezier_dis_approx_sq(uv, p5, p5 + vec2(xw*.4,xh*.5), p6 + vec2(-xw*.7,xh*.66)*.4, p6));\n\n\treturn d0;\n}\n\nfloat seven_dis(vec2 uv){\n    uv += vec2(-.7*xw,0);\n\tfloat i_fac1 = 1.22;\n\tfloat i_fac2 = .13;\n\n\tfloat d0 = line_segment_dis_sq(uv, vec2(-xw*i_fac1,xh), vec2(xw*i_fac2,xh));\n\td0 = min(d0, line_segment_dis_sq(uv, vec2(-xw,-xh), vec2(xw*i_fac2,xh)));\n\n\treturn d0;\n}\n\nfloat eight_dis(vec2 uv){\n\tfloat xw = xw * .68;\n\tfloat xh = xh * .51;\n\n\tfloat ys = sign(uv.y);\n\n\tuv = abs(uv);\n\n\tuv = abs(uv - vec2(0,xh));\n\n\tfloat i_fac = .63;\n\n\tif(ys < 0.){\n\t\txw *= 1.1;\n\t}\n\n\treturn cubic_bezier_dis_approx_sq(uv,vec2(0,xh),vec2(xw*i_fac,xh),vec2(xw,xh*i_fac),vec2(xw,0));\n}\n\nfloat nine_dis(vec2 uv){\n\treturn six_dis(-uv);\n}\n\nfloat dot_dis(vec2 uv){\n\tuv.y += xw*1.07;\n\treturn length(uv) - pen_width;\n}\n\nfloat digit_dis(vec2 uv, int x){\n    switch(x % 10) {\n        case 0: return zero_dis(uv);\n        case 1: return one_dis(uv);\n        case 2: return two_dis(uv);\n        case 3: return three_dis(uv);\n        case 4: return four_dis(uv);\n        case 5: return five_dis(uv);\n        case 6: return six_dis(uv);\n        case 7: return seven_dis(uv);\n        case 8: return eight_dis(uv);\n        case 9: return nine_dis(uv);\n    }\n}\n\nfloat number_dis3(vec2 uv, float x){\n    float dis = 1e38;\n    \n    vec3 offsets = vec3(-3.5,-1.5,1.5);\n    ivec3 powers = ivec3(1,10,100);\n    \n    int y = int(round(x*100.));\n    \n    for(int i=ZERO;i<3;i++){\n        dis = min(dis, digit_dis(uv + offsets[i]*vec2(xw,0),y/powers[i]));\n    }\n\n    dis = sqrt(dis) - pen_width;\n    dis = min(dis, dot_dis(uv));\n    \n    return dis;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = floor(fragCoord.xy);\n    vec2 res = iResolution.xy;\n    \n    float border = 1./res.x;\n    vec2 nuv = (fragCoord.xy - .5 * res)*border;\n    \n    float brightness = 0.;\n    \n    vec3 color = vec3(0);\n    \n    float b_val = 0.;\n    float e_val = 0.;\n    \n    float g_y = (nuv.y + y_border_fac) / y_border_fac / 2.;\n    float g_id = round(n_lines * g_y);\n    float g_id_y = g_id/n_lines * 2. * y_border_fac - y_border_fac;\n    \n    float gamma = gamma_high - (gamma_high - gamma_low) * g_y;\n    \n    float dis = 1e38;\n    float line_thickness = line_thickness1;\n    \n    if(round(gamma*gamma_rounding)/gamma_rounding == 2.2){\n        digit_col = vec3(0,1,0);\n        line_thickness = line_thickness2;\n    }\n    \n    float x = (nuv.x+x_border_fac)/x_border_fac/2.;\n    bool black = true;\n    float b_id = floor(3. * x);\n    float b_id_x = (b_id+.5) / 3. * 2. * x_border_fac - x_border_fac;\n    float m_x = 3. * x - b_id;\n\n    if(b_id == 0.){\n        black = mod(uv+vec2(uv.y/2.,0),vec2(2)) == vec2(0);\n        b_val = .75;\n    }\n    if(b_id == 1.){\n        black = mod(uv.y+mod(uv.x,2.),2.)==0.;\n        b_val = .5;\n    }\n    if(b_id == 2.){\n        black = !(mod(uv+vec2(uv.y/2.,0),vec2(2)) == vec2(0));\n        b_val = .25;\n    }\n    \n    if(abs(nuv.x) < x_border_fac && abs(nuv.y) < y_border_fac){\n        m_x = stripe_fac1 * (m_x - .5) + .5;\n        \n        float c_id = floor(4. * m_x);\n        float c_x = 4. * m_x - c_id;\n        \n        if(c_id == 0.){\n            color = vec3(1,0,0);\n        }\n        else if(c_id == 1.){\n            color = vec3(0,1,0);\n        }\n        else if(c_id == 2.){\n            color = vec3(0,0,1);\n        }\n        else if(c_id == 3.){\n            color = vec3(1);\n        }\n        else{\n            color = vec3(0);\n        }\n        \n        c_x = stripe_fac2 * (c_x - .5) + .5;\n        \n        float s_id = floor(n_stripes * c_x);\n        float s_x = n_stripes * c_x - s_id;\n                \n        e_val = pow(b_val,1. / gamma);\n        \n        if(s_id >= 0. && s_id <= n_stripes - 1.){\n            if(mod(s_id,2.) == 0.){\n                if(black){\n                    brightness = 0.;\n                }\n                else{\n                    brightness = 1.;\n                }\n            }\n            else{\n                brightness = e_val + (hash(uvec2(uv))-.5) / 255.;\n            }\n        }\n        else{\n            dis = abs(nuv.y - g_id_y) - line_thickness;\n        }\n    }\n    \n    fragColor = vec4(brightness * color, 1);\n    if(brightness == 0.){\n        fragColor = mix(vec4(e_val * color, 1), fragColor, smoothstep(-border,border,dis));\n    }\n    \n    dis = number_dis3(nuv-vec2(b_id_x,mix(.5*res.y/res.x,y_border_fac,.5)),b_val);\n    if(abs(nuv.y) < y_border_fac + xh + pen_width + border){\n        dis = min(dis,number_dis3(nuv-vec2(-x_border_fac,g_id_y),round(gamma*gamma_rounding)/gamma_rounding));\n    }\n    fragColor = mix(vec4(digit_col,1), fragColor, smoothstep(-border,border,dis));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}