{
    "Shader": {
        "info": {
            "date": "1651307024",
            "description": "Pause + click around to change the shape and color :)\n\n(please don't use this for NFTs)",
            "flags": 32,
            "hasliked": 0,
            "id": "7tXBzs",
            "likes": 18,
            "name": "Pixel Bow Generator",
            "published": 3,
            "tags": [
                "procedural",
                "generative",
                "pixelart",
                "pixelart",
                "procgen"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 603
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale factor to enlarge image by\n    float sf = dim.y / (iResolution.y - dim.y);\n    sf *= 0.75;\n\n    // Scale and centre image to screen\n    vec2 coord = round(sf * fragCoord) ;\n    coord -= round(sf * 0.5 * iResolution.xy - 0.5 * dim);\n\n    vec3 col = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n    \n    // Quick and dirty outline\n    vec3 t = texelFetch(iChannel0, ivec2(coord + vec2(0,1)), 0).rgb;\n    vec3 b = texelFetch(iChannel0, ivec2(coord - vec2(0,1)), 0).rgb;\n    vec3 r = texelFetch(iChannel0, ivec2(coord + vec2(1,0)), 0).rgb;\n    vec3 l = texelFetch(iChannel0, ivec2(coord - vec2(1,0)), 0).rgb;\n    \n    vec3 sm = t + b + l + r;\n    if (col == vec3(0) && length(sm) > 0.)\n        col = vec3(0.01);   \n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ms = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n \n    float d = length(uv - ms);\n    float k = 1. / iResolution.y;\n    float s =  smoothstep(-k, k, -abs(d-0.025) + 0.005);\n    s = max(s, smoothstep(-k, k, -abs(0.25-abs(uv.y)) + 0.005));\n     \n    // Background + color y-bounds + mouse position\n    if (col == vec3(0.)) {\n        vec3 col2 = clamp(1. - 0.3 * uv.x * uv.x, 0.75, 0.974) * vec3(1);\n        col = mix(vec3(0.974), col2, s);\n    }\n    else\n        col = sqrt(col) + 0.08;\n\n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\n#define lineCol(x) ( .5 + .5 * thc(4., x+2. * pi / 3.*vec3(-1,0,1)) )\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat line(in vec2 f, in vec2 p, in vec2 q) { \n    // Translate space. We consider 0,0 to p-q\n    f -= p;\n    \n    vec2 pq = p - q;   \n    float a = atan(pq.x, pq.y) + pi / 2.;\n    \n    // Rotate f\n    float c = cos(a), s = sin(a);    \n    float x = c * f.x - s * f.y;\n    float y = s * f.x + c * f.y;\n\n    // Split space into 1 (above rotated y), 0 (below)\n    float e = step(y, 0.);\n    \n    // Do the same for 4 neighbouring cells (in non-rotated space)\n    float t = step(y,  c);\n    float b = step(y, -c);\n    float r = step(y,  s);\n    float l = step(y, -s);  \n     \n    // If some neighbours are different, we draw a line\n    // Otherwise, we don't (0 0 0 0, 1 1 1 1 -> 0 )  \n    float m = max(max(t,b),max(l,r)) - min(min(t,b),min(l,r));\n    // m = step(1., mod(t + b + l + r, 4.));\n    \n    // Center x at d (in rotated space). Only include cells within d of it.\n    // (only include cells between p and q)\n    float d = 0.5 * length(pq);  \n    return e * m * step(abs(x - d), d);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ms = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Change colors above + below y = 0 (unused)\n    float drk = step(0.5 * dim.y, fragCoord.y);\n    drk = 0.;\n    \n    // Center fragCoord + mirror y axis\n    fragCoord -= 0.5 * dim;\n    fragCoord.y = abs(fragCoord.y);\n    vec3 col = vec3(0);    \n    \n    // Use this to flick through patterns. Resets \"seed\" every 60 minutes (I think)\n    // (using mod so hash function doesn't mess up)\n    float fl = mod(floor(floor(iDate[3]/3600.) + iTime), 600.);\n    \n    vec2 f = fragCoord;\n    vec2 p = vec2(0);\n    \n    // Maybe change (static center pixel looks bad)\n    float a0 = 0.;\n    \n    float n = 120.;\n    for (float i = 0.; i < n; i++) {\n        // Random values for line positions\n        float h = h21(vec2(i + fl + 11., 0.131 * i - 103.));\n\n        a0 += 2. * pi * cos(0.1 * ms.x + h * pi * 2.);\n        \n        // New point (2. * (...) and q == floor(q) is interesting too)\n        vec2 q = p + 1. * vec2(cos(a0), sin(a0));\n        q = round(q);\n          \n        // Makes them chunky + weird\n        // f.y = abs(f.y - 0.2);\n        \n        // Color (todo: add noise for texture, maybe)\n        vec3 e = vec3(0.5);\n        vec3 col2 = pal(4. * i/n + 0.25 * fl - 0.25 * drk, e, e, e, \n                        mod(i - 2. * n * ms.y + 33. * fl, n) / n * vec3(0,1,2)/3.);\n        \n        //col2 = lineCol(4. * i/n + 0.1* fl);\n        col2 *= line(f, p, q);\n        \n        // Remove earliest lines in sequence\n        // col2 *= step((0.5 + 0.5 * cos(10. * ms.y)) * n, i);\n    \n        // Alternate color palette\n        //col += 0.333 * col2;\n        \n        if (col == vec3(0))\n            col = col2;\n\n        p = clamp(q, vec2(-0.5 * dim.y, 0), 0.5 * dim);\n    }\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// dimensions of sprite - has to be less than screen dimensions\nconst vec2 dim = vec2(61);\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}