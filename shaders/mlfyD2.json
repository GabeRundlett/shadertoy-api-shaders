{
    "Shader": {
        "info": {
            "date": "1691183066",
            "description": "An auto-VJ of a pair of snake/flame-like sine shapes with a centered plus.\n\n- Use with music in iChannel0 -",
            "flags": 64,
            "hasliked": 0,
            "id": "mlfyD2",
            "likes": 5,
            "name": "Line Pair",
            "published": 3,
            "tags": [
                "2d",
                "music"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// Line Pair 0.2.230804 by QuantumSuper\n// auto-vj of a pair of snake/flame-like sine shapes with a centered plus\n// (colors, shapes, and animations are based on sound)\n// \n// - use with music in iChannel0 -\n\n#define aTime 12.7/6.*iTime\nvec4 fft, ffts; //compressed frequency amplitudes\n\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nfloat sdCross( vec2 p, vec2 b, float r){ //source: https://iquilezles.org/articles/distfunctions2d/\n    p = abs(p); p = (p.y>p.x)? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max( q.y, q.x);\n    vec2  w = (k>0.)? q : -vec2( p.x-b.y, k);\n    return sign(k) * length(max(w,0.)) + r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    compressFft(); //initializes fft, ffts\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1 to 1, square aspect ratio\n\n    fragColor = vec4(\n        .01*fft.w / max( .0, sdCross( uv, vec2(.4,.1) * pow(fft.x,6.) * .4, .0)) + //cross\n        (.01+.09*fft.z) / max( .0, length( abs( sin(aTime + uv.y*4. + ffts.w) * sin(aTime*2. + fft.w) *.2 - abs(uv.x) + .5))) //side-sinus\n        * sin(vec3(.1,.3,.7)*aTime + uv.y + ffts.xyz), 1.); //color\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34339,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mikaheggemann/heggemann-tommy-devito-feat-gutschi-schnellste-brille-instrumental"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}