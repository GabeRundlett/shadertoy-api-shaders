{
    "Shader": {
        "info": {
            "date": "1664736411",
            "description": "A conic pencil, showing intersections with fixed parabola y = x².\nDrag white discs to set pencil parameters.\nSee code header for other controls.",
            "flags": 48,
            "hasliked": 0,
            "id": "NlGfzy",
            "likes": 14,
            "name": "Conics Intersecting Parabola",
            "published": 3,
            "tags": [
                "pencil",
                "parabola",
                "conic",
                "loopless",
                "lineconic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Pencils of Conics Intersecting a Parabola.\n//\n// Matthew Arcus, mla, 2022\n//\n// Linear sums of 2 conics gives a family of conics (a 'pencil'), one of which\n// passes through each point of the plane. There are 4 points (possibly coincident\n// or imaginary) which both conics pass through. Here the two conics are a line pair\n// (controlled by the white discs in the background) and a fixed circle or hyperbola.\n//\n// Also, show the intersections of the conics with the parabola y = x² - finding\n// the intersections of two general conics is tiresome, but for this parabola\n// it's easy to find the quartic equation for the x values.\n//\n// White discs control the (yellow) line pair conic, drag with mouse to change.\n// 'd': use single line (doubled) for line pair\n// 'h': use fixed hyperbola instead of a circle\n// 's': hide control discs\n// 'p': hide parabola\n// <up>,<down>: zoom in/out\n//\n// See also https://www.shadertoy.com/view/7lVfD1 by jt.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat lwidth = 0.0;//0.004;\nfloat pwidth = 0.04;\nfloat K = 32.0;\nfloat px;\n\n// Polarized conic\nfloat conic(vec3 p, mat3 S, vec3 q) {\n  return dot(p,S*q);\n}\n\nfloat conic(vec3 p, mat3 S) {\n  return conic(p,S,p);\n}\n\n// The gradient uses the same matrix.\nvec3 conicgrad(vec3 p, mat3 S) {\n  return 2.0*S*p;\n}\n\nfloat conicdist(vec3 p, mat3 S) {\n  float d = conic(p,S);\n  vec3 dd = conicgrad(p,S);\n  d /= p.z*length(dd.xy); // Normalize for Euclidean distance\n  return abs(d);\n}\n\nfloat line(vec3 p, vec3 q) {\n  return abs(dot(p,q)/(p.z*length(q.xy)));\n}\n\nfloat line(vec3 p, vec3 q, vec3 r) {\n  return line(p,cross(q,r));\n}\n\nfloat point(vec3 p, vec3 q) {\n  float pz = p.z, qz = q.z;\n  p *= qz; q *= pz;\n  return distance(p,q)/abs(p.z);\n}\n\nbool intersect(vec3 p, mat3 s, out vec3 m0, out vec3 m1) {\n  // Find lines from p tangent to conic s, or (dually)\n  // find intersection points of line p with conic s.\n  // Three lines in pencil, select the two with the\n  // largest magnitude.\n  vec3 l0 = vec3(-p.y,p.x, 0);\n  vec3 l1 = vec3(p.z, 0,  -p.x);\n  vec3 l2 = vec3(0,  -p.z, p.y);\n  if (dot(l0,l0) > dot(l1,l1)) l1 = l0;\n  else if (dot(l0,l0) > dot(l2,l2)) l2 = l0;\n  // l1,l2 now the two largest (in particular, this is to avoid\n  // a zero-sized vector).\n  // Now want (l1 + k*l2)s(l1 + k*l2) = 0\n  // Ak²+2Bk+C = 0\n  float A = dot(l2,s*l2);\n  float B = dot(l1,s*l2);\n  float C = dot(l1,s*l1);\n  float D = B*B-A*C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  // If A = C = 0, then we have picked 2 lines on the conic already.\n  // Maybe should handle this case.\n  if (abs(A) > abs(C)) {\n    float k0 = (-B + D)/A;\n    float k1 = (-B - D)/A;\n    m0 = l1+k0*l2;\n    m1 = l1+k1*l2;\n  } else {\n    float k0 = (-B + D)/C;\n    float k1 = (-B - D)/C;\n    m0 = l2+k0*l1;\n    m1 = l2+k1*l1;\n  }\n  return true;\n}\n\nint intersectparabola(mat3 T, out vec4 roots) {\n  float A = T[0][0]; // x^2\n  float B = T[1][1]; // y^2\n  float C = T[2][2]; // z^2\n  float D = 2.0*T[0][1]; // xy\n  float E = 2.0*T[0][2]; // xz\n  float F = 2.0*T[1][2]; // yz\n  // Substitute y = x^2\n  return quartic(B,D,A+F,E,C,roots);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  setscale();\n  vec3 pcol = vec3(0.1);\n  bool doubleline = key(CHAR_D);\n  vec3 p = vec3(map(fragCoord.xy),1);\n  px = fwidth(p.x);\n  vec2 mouse = vec2(-2,2);\n  if (iMouse.x != 0.0) {\n    mouse = map(iMouse.xy).xy;\n  }\n  mat3 M = mat3(1,0,0,0,1,0,0,0,-1); // Just a circle\n  if (key(CHAR_H)) M = mat3(1,0,0,0,-1,0,0,0,1); // Hyperbola\n  vec3 P1 = vec3(getselection(0),1);\n  vec3 P2 = vec3(getselection(1),1);\n  if (doubleline) P2 = P1;\n  mat3 N = 0.5*(outerProduct(P1,P2)+outerProduct(P2,P1));\n\n  // Common points/tangents of pencil\n  vec3 T1,T2,T3,T4;\n  bool show1 = intersect(P1,M,T1,T2);\n  bool show2 = intersect(P2,M,T3,T4);\n\n  vec3 color = 0.2*vec3(1,1,0.8);\n\n  if (!key(CHAR_S)) {\n    // Show point pair locations\n    float d = min(point(p,P1), point(p,P2));\n    color = mix(vec3(1),color,smoothstep(0.0,px,d-1.2*pwidth));\n  }\n  {\n    float S11 = conic(p,M);\n    float S22 = conic(p,N);\n    // Find parameter of conic through p\n    float t = atan(-S11/S22);\n    t /= PI;\n    t *= K;\n    t -= iTime;\n    t = round(t); // Get nearest displayed conic\n    float t0 = t; // Remember index of conic\n    t += iTime;\n    t /= K;\n    t *= PI;\n    mat3 para = mat3 (2,0,0,0,0,-1,0,-1,0);\n    color = mix(vec3(0,1,0),color,smoothstep(0.0,px,conicdist(p,M)-lwidth));\n    color = mix(vec3(1,1,0),color,smoothstep(0.0,px,conicdist(p,N)-lwidth));\n    if (!key(CHAR_P)) color = mix(vec3(0.8,0,0),color,smoothstep(0.0,px,conicdist(p,para)-lwidth));\n    mat3 T = cos(t)*M + sin(t)*N;\n    vec3 lcol = 0.4+0.6*h2rgb(t0/K);\n    color = mix(lcol,color,smoothstep(0.0,px,conicdist(p,T)-lwidth));\n    float d = 1e8;\n    if (show1) {\n      d = min(d,point(p,T1));\n      d = min(d,point(p,T2));\n    }\n    if (show2) {\n      d = min(d,point(p,T3));\n      d = min(d,point(p,T4));\n    }\n    color = mix(pcol,color,smoothstep(0.0,px,d-pwidth));\n    if (!key(CHAR_P)) {\n      d = 1e8;\n      for (int off = -2; off <= 2; off++) {\n        float t1 = t + float(off)*PI/K;\n        mat3 T = cos(t1)*M + sin(t1)*N;\n      \n        vec4 roots;\n        int nroots = intersectparabola(T,roots);\n        for (int i = 0; i < nroots; i++) {\n           float x = roots[i];\n           d = min(d,point(p,vec3(x,x*x,1)));\n        }\n      }\n      color = mix(vec3(0.1),color,smoothstep(0.0,px,d-0.5*pwidth));\n    }\n  }\n  color = pow(color,vec3(0.4545));\n  fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.w != 12345.0) {\n      t.xy = initselection(i-1); // Current coordinates\n      t.w = 12345.0; // Magic number\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store((key),0).x))\n#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\n#define map(screenpos) (scale*(vec2(0,0.25)+(2.0*(screenpos)-iResolution.xy)/iResolution.y))\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define setscale() (scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))))\n\nfloat scale = 3.0;\n\nconst int nselections = 2;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-1.5,1.5);\n  if (i == 1) return vec2(-1.5,-1.5);\n  return vec2(0);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI =  3.141592654;\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 h2rgb(float h) {\n\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n  return rgb;\n}\n\n// The Kahan cubic algorithm, for explanation see:\n// https://people.eecs.berkeley.edu/~wkahan/Math128/Cubic.pdf\nfloat sgn(float x) {\n  return x < 0.0 ? -1.0: 1.0; // Return 1 for x == 0\n}\n\nint quadratic(float A, float B, float C, out vec2 res) {\n  float b = -0.5*B, b2 = b*b;\n  float q = b2 - A*C;\n  if (q < 0.0) return 0;\n  float r = b + sgn(b)*sqrt(q);\n  if (false && r == 0.0) {\n    res[0] = C/A;\n    res[1] = -res[0];\n  } else {\n    res[0] = C/r;\n    res[1] = r/A;\n  }\n  return 2;\n}\n\n// Evaluate cubic and derivative.\nvoid eval(float X, float A, float B, float C, float D,\n          out float Q, out float Q1, out float B1,out float C2) {\n  float q0 = A*X;\n  B1 = q0+B;\n  C2 = B1*X+C;\n  Q1 = (q0+B1)*X + C2;\n  Q = C2*X + D;\n}\n\n// Solve: Ax^3 + Bx^2 + Cx + D == 0\n// Find one real root, then reduce to quadratic.\nint cubic(float A, float B, float C, float D, out vec3 res) {\n  float X,b1,c2;\n  X = -(B/A)/3.0;\n  float t,r,s,q,dq,x0;\n  eval(X,A,B,C,D,q,dq,b1,c2);\n  t = q/A; r = pow(abs(t),1.0/3.0); s = sgn(t);\n  t = -dq/A; if (t > 0.0) r = 1.324718*max(r,sqrt(t));\n  x0 = X - s*r;\n  if (x0 != X) {\n    // We really do need this many iterations here\n    for (int i = 0; i < 6; i++) {\n      X = x0;\n      eval(X,A,B,C,D,q,dq,b1,c2);\n      if (dq == 0.0) break;\n      x0 -= (q/dq);\n    }\n    if (abs(A)*X*X > abs(D/X)) {\n      c2 = -D/X; b1 = (c2 - C)/X;\n    }\n  }\n  res.x = X;\n  return 1 + quadratic(A,b1,c2,res.yz);\n}\n\n// Special wrapper for cubic function for solving quartic.\n// Find largest real root of x**3 + a*x**2 + b*x + c\n// Assume c < 0\nfloat qcubic(float a, float b, float c) {\n  if (c == 0.0) return 0.0;\n  vec3 res;\n  int nroots = cubic(1.0,a,b,c,res);\n  if (nroots == 1) return res.x;\n  else return max(res.x,max(res.y,res.z));\n}\n\nint quartic0(float c1, float c2, float c3, float c4, out vec4 res) {\n  // Lanczos's quartic solution\n  float alpha = 0.5*c1;\n  float A = c2-alpha*alpha;\n  float B = c3-alpha*A;\n  float a,b,beta,psi;\n  psi = qcubic(2.0*A-alpha*alpha, A*A+2.0*B*alpha-4.0*c4, -B*B);\n  // There should be a positive root, but sometimes the cubic\n  // solver doesn't find it directly (probably a double root\n  // around zero).\n  psi = max(0.0,psi);\n  a = sqrt(psi);\n  beta = 0.5*(A + psi);\n  if (psi <= 0.0) {\n    b = sqrt(max(beta*beta-c4,0.0));\n  } else {\n    b = 0.5*a*(alpha-B/psi);\n  }\n  int n0 = quadratic(1.0,alpha+a,beta+b,res.xy);\n  int n1 = quadratic(1.0,alpha-a,beta-b,res.zw);\n  if (n0 == 0) res.xy = res.zw;\n  return n0 + n1;\n}\n\nint quartic(float A, float B, float C, float D, float E, out vec4 roots) {\n  int nroots;\n  // Solve for the smallest cubic term, this produces the least wild behaviour.\n  bool flip = abs(B/A) >= abs(D/E);\n  float c1,c2,c3,c4;\n  if (!flip) {\n    c1 = B/A; c2 = C/A; c3 = D/A; c4 = E/A;\n  } else {\n    // Solve for reciprocal\n    c1 = D/E; c2 = C/E; c3 = B/E; c4 = A/E;\n  }\n  nroots = quartic0(c1,c2,c3,c4,roots);\n  if (flip) {\n    // We have solved for the reciprocal.\n    for (int i = 0; i < 4; i++) {\n      if (i == nroots) break;\n      roots[i] = 1.0/roots[i];\n    }\n  }\n  return nroots;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}