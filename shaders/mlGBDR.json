{
    "Shader": {
        "info": {
            "date": "1702897060",
            "description": "Gradius2 (Nemesis2) - A Journey To The Start (Air Battle Theme)",
            "flags": 40,
            "hasliked": 0,
            "id": "mlGBDR",
            "likes": 44,
            "name": "[â™ª]A Journey To The Start",
            "published": 3,
            "tags": [
                "music",
                "chiptune",
                "msx",
                "scc"
            ],
            "usePreview": 0,
            "username": "Catzpaw",
            "viewed": 851
        },
        "renderpass": [
            {
                "code": "//==================================================\n// GRADIUS2 - A JOURNEY TO THE START\n\n//----------------------------------------\n// Video Output\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //UV\n    vec2 scr=vec2(SCRW,SCRH);\n    vec2 uv=fragCoord/iResolution.xy;\n    uv.y=.5-uv.y;\n    uv*=scr.x/iResolution.x;\n    uv.y+=(scr.y/iResolution.y)*.5;\n\n    //Output\n    vec2 sp=vec2(-.25,.75)*(scr.x/(iResolution.x*iResolution.x));\n    vec4 col;\n    if(iMouse.z>0.){\n        col=texture(iChannel0,uv+sp.xx)+texture(iChannel0,uv+sp)+\n            texture(iChannel0,uv+sp.yx)+texture(iChannel0,uv+sp.yy);\n    }else{\n        col=texture(iChannel1,uv+sp.xx)+texture(iChannel1,uv+sp)+\n            texture(iChannel1,uv+sp.yx)+texture(iChannel1,uv+sp.yy);\n    }\n    fragColor=col*.25;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//==================================================\n// STARS\n\n#define ITER 200\n#define EPS 0.01\n#define NEAR 1.\n#define FAR 170.\n\nvec3 hsv(float h,float s,float v){\n    return ((clamp(abs(fract(h+vec3(0.,.666,.333))*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;\n}\n\nmat2 rot(float a){\n    float si=sin(a),co=cos(a);\n    return mat2(co,si,-si,co);\n}\n\nfloat map(vec3 p){vec3 p2=floor((p*1.+1.)*.5);p=mod(p*1.+1.,2.)-1.;\n    float v=fract(sin(p2.x*133.3)*19.9+sin(p2.y*177.7)*13.3+sin(p2.z*199.9)*17.7);\n    return v<.993?.9:length(p)-4.3+v*4.;\n}\n\nfloat trace(vec3 ro,vec3 rd,out float h){float t=NEAR,d;\n    vec3 p;\n    for(int i=0;i<ITER;i++){\n        p=ro+rd*t;\n        d=map(p);if(abs(d)<EPS+t*3e-4||t>FAR)break;\n        t+=d;\n    }\n    p=floor((p*2.+1.)*.5);\n    h=fract(p.x*.08+p.y*.09+p.z*.1)*.8+.4;\n    return min(t,FAR);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Screen coodinate\n    fc2msx(fragCoord);\n    if(isOut)discard;\n    vec2 uv=vec2(px,py)/vec2(SCRW,SCRH)-0.5;\n\n    //Blur\n    vec3 col=texture(iChannel0,fragCoord/iResolution.xy).rgb*.88;\n\n    //Raymarching\n    float h;\n    float ay=sin(iTime*.181)*.2;\n    float ax=sin(iTime*.331)*.2-.1;\n    vec3 ro=vec3(.5,.5,-iTime*40.);\n    vec3 rd=vec3(uv,-.8);\n    rd.xz*=rot(ay);\n    rd.yz*=rot(ax);\n    float d=trace(ro,rd,h)/FAR;\n    float v=1.-d;\n\n    //Output\n    col+=hsv(h,.9-d*.5,v*1.8);\n    fragColor=vec4(clamp(col,0.,1.),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//==================================================\n// MSX SCREEN1.5 (TMS9918 Half-Bitmap Mode)\n\n//----------------------------------------\n// ROM\n\n// Characters\n//  i32x2:8x8pattern i32x2:2colorsx8lines\nconst int[170*4] chr=int[](\n    0x00000000,0x00000000,0x00000000,0x00000000, //00\n    0x001c3663,0x637f6363,0x00f1f1f1,0xf1f1f1f1, //01 A\n    0x007e6363,0x7e63637e,0x00f1f1f1,0xf1f1f1f1, //02 B\n    0x003e6360,0x6060633e,0x00f1f1f1,0xf1f1f1f1, //03 C\n    0x007c6663,0x6363667c,0x00f1f1f1,0xf1f1f1f1, //04 D\n    0x007f6060,0x7e60607f,0x00f1f1f1,0xf1f1f1f1, //05 E\n    0x007f6060,0x7e606060,0x00f1f1f1,0xf1f1f1f1, //06 F\n    0x003e6360,0x6763633e,0x00f1f1f1,0xf1f1f1f1, //07 G\n    0x00636363,0x7f636363,0x00f1f1f1,0xf1f1f1f1, //08 H\n    0x003c1818,0x1818183c,0x00f1f1f1,0xf1f1f1f1, //09 I\n    0x001f0606,0x0606063c,0x00f1f1f1,0xf1f1f1f1, //0a J\n    0x0063666c,0x787c6e67,0x00f1f1f1,0xf1f1f1f1, //0b K\n    0x00606060,0x6060607f,0x00f1f1f1,0xf1f1f1f1, //0c L\n    0x0063777f,0x7f6b6363,0x00f1f1f1,0xf1f1f1f1, //0d M\n    0x0063737b,0x7f6f6763,0x00f1f1f1,0xf1f1f1f1, //0e N\n    0x003e6363,0x6363633e,0x00f1f1f1,0xf1f1f1f1, //0f O\n    0x007e6363,0x637e6060,0x00f1f1f1,0xf1f1f1f1, //10 P\n    0x003e6363,0x636f663d,0x00f1f1f1,0xf1f1f1f1, //11 Q\n    0x007e6363,0x627c6663,0x00f1f1f1,0xf1f1f1f1, //12 R\n    0x003e6360,0x3e03633e,0x00f1f1f1,0xf1f1f1f1, //13 S\n    0x007e1818,0x18181818,0x00f1f1f1,0xf1f1f1f1, //14 T\n    0x00636363,0x6363633e,0x00f1f1f1,0xf1f1f1f1, //15 U\n    0x00636363,0x63361c08,0x00f1f1f1,0xf1f1f1f1, //16 V\n    0x0063636b,0x6b7f7722,0x00f1f1f1,0xf1f1f1f1, //17 W\n    0x0063763c,0x1c1e3763,0x00f1f1f1,0xf1f1f1f1, //18 X\n    0x0066667e,0x3c181818,0x00f1f1f1,0xf1f1f1f1, //19 Y\n    0x007f070e,0x1c38707f,0x00f1f1f1,0xf1f1f1f1, //1a Z\n    0x3c4299a1,0xa199423c,0xf1f1f1f1,0xf1f1f1f1, //1b c\n    0x00183818,0x1818187e,0x00f1f1f1,0xf1f1f1f1, //1c 1\n    0x007f6306,0x0c181818,0x00f1f1f1,0xf1f1f1f1, //1d 7\n    0x003e6363,0x3e63633e,0x00f1f1f1,0xf1f1f1f1, //1e 8\n    0x003e6363,0x3f03633e,0x00f1f1f1,0xf1f1f1f1, //1f 9\n\n    0x00000000,0x01030707,0x00000000,0x40404010, //20\n    0x00000080,0xa0bcbf1f,0x00000040,0x41414141, //21\n    0x00000000,0x0000c0ff,0x00000000,0x00004040, //22\n    0x00000000,0x000000e0,0x00000000,0x00000040, //23\n    0x00000000,0x00000007,0x00000000,0x00000040, //24\n    0x00000000,0x000007ff,0x00000000,0x00004040, //25\n    0x00000001,0x053dfdf8,0x00000040,0x41414141, //26\n    0x00000000,0x80c0e0e0,0x00000000,0x40404010, //27\n    0x03010100,0x00000000,0x40c040c0,0x00000000, //28\n    0xa3dcdfef,0x77773b3d,0x41c141c1,0x41c141c1, //29\n    0xff3fc0ff,0xffffffff,0x414141c1,0x41c141c1, //2a\n    0xffff1fe0,0xffffffff,0x414141c1,0x41c141c1, //2b\n    0xffffff00,0xffffffff,0x41414141,0x41c141c1, //2c\n    0x80f0fcfe,0x0df0fdff,0x40404041,0x41c141c1, //2d\n    0x000fffff,0xf00fffff,0x40404141,0x41c141c1, //2e\n    0x3fffffc0,0x3fffffff,0x40414141,0x41c141c1, //2f\n    0xfcffff03,0xfcffffff,0x40414141,0x41c141c1, //30\n    0x00f0ffff,0x0ff0ffff,0x40404141,0x41c141c1, //31\n    0x010f3f7f,0xb00fbfff,0x40404041,0x41c141c1, //32\n    0xfffff807,0xffffffff,0x414141c1,0x41c141c1, //33\n    0xfffc03ff,0xffffffff,0x414141c1,0x41c141c1, //34\n    0xc53bfbf7,0xeeeedcbc,0x41c141c1,0x41c141c1, //35\n    0xc0808000,0x00000000,0x40c04000,0x00000000, //36\n    0x1d1e0f07,0x03010000,0x41c140c0,0x50c00000, //37 \n    0xffff7fbf,0xdfe7f83f,0x41c141c1,0x51c151c0, //38\n    0xffffffff,0xffffff00,0x41c141c1,0x51c151c1, //39\n    0xe0f0f8fc,0xfeffff0f,0x41c141c1,0x51c151c1, //3a\n    0x0000ff7f,0x3f1f80c0,0x11116161,0x6161c1c1, //3b\n    0x0000ffff,0xffff0000,0x61616161,0x61616161, //3c\n    0x0000ffff,0xffff0103,0x61616161,0x61616161, //3d\n    0x00003f3f,0x3f3f040c,0x61616161,0x61616161, //3e\n    0x0000fcfc,0xfcfc3c7c,0x61616161,0x61616161, //3f\n    0x0000ffff,0xffff1030,0x61616161,0x61616161, //40\n    0x0000f3f3,0xf3f3f0f0,0x61616161,0x61616161, //41\n    0x0000ffff,0xffff43c3,0x61616161,0x61616161, //42\n    0x0000c1c3,0xc7cfc1c3,0x61616161,0x61616161, //43\n    0x00003c3c,0x3c3c040c,0x61616161,0x61616161, //44\n    0x00003c3c,0x3c3c3c3c,0x61616161,0x61616161, //45\n    0x0000fffe,0xfcf80103,0x61616161,0x6161c1c1, //46\n    0x040f1f3f,0x7ffffff0,0x41c141c1,0x51c151c1, //47\n    0x17727577,0xffffff00,0x41c141c1,0x51c151c1, //48\n    0x7f7f7e7d,0xfbe71ffc,0x41c141c1,0x51c151c0, //49\n    0xb878f0e0,0xc0800000,0x41c140c0,0x50c00000, //4a\n    0x0f030000,0x00000000,0x50c00000,0x00000000, //4b\n    0xdf9f6f6f,0x773b1c0f,0x51c171c1,0x71217120, //4c\n    0xffffffff,0xffffff00,0x51c171c1,0x71217121, //4d\n    0xffffffff,0xffffff00,0x51c171c1,0x71217121, //4e\n    0xffffffff,0xffffffff,0x51c171c1,0x71217121, //4f\n    0x070f0f0f,0x0f0f0f0f,0x61616161,0x61616161, //50\n    0x003f3f3f,0x3f0f0f0f,0x61616161,0x61616161, //51\n    0x1c3d3f3c,0x3c3c3c3c,0x61616161,0x61616161, //52\n    0xf8f0e03c,0x3c3c3c3c,0x61616161,0x61616161, //53\n    0x70ffffff,0xfff0f0f0,0x61616161,0x61616161, //54\n    0xf1f3f3f3,0xf3f3f3f3,0x61616161,0x61616161, //55\n    0xc3c3c3c3,0xc3c3c3c3,0x61616161,0x61616161, //56\n    0xc7cfcfcf,0xcfcfcfcf,0x61616161,0x61616161, //57\n    0x1c3c3c3c,0x3c3c3c3c,0x61616161,0x61616161, //58\n    0x3c3c3c3c,0x3c3c3c3c,0x61616161,0x61616161, //59\n    0x70ffffff,0xff000000,0x61616161,0x61616161, //5a\n    0x00f0f0f0,0xf0f0f0f0,0x61616161,0x61616161, //5b\n    0xffffffff,0xfffffff0,0x51c171c1,0x71217121, //5c\n    0xfbf9f6f6,0xeedc38f0,0x51c171c1,0x71217120, //5d\n    0xf0c00000,0x00000000,0x50c00000,0x00000000, //5e\n    0x07010000,0x00000000,0x70200000,0x00000000, //5f\n    0xefd73737,0x3b1c0f07,0x71217131,0x71317030, //60\n    0xffffffff,0xff7f00bf,0x71217131,0x713a7131, //61\n    0xffffffff,0xffffffff,0x71217131,0x71317131, //62\n    0x0f0f0f0f,0x0f0000ff,0x61616161,0x61616131, //63\n    0x0fffffff,0xff0000ff,0x61616161,0x61616131, //64\n    0x3c3c3c3c,0x3c0000ff,0x61616161,0x61616131, //65\n    0xf0f0f0f0,0xf00000ff,0x61616161,0x61616131, //66\n    0xf3f3f3f3,0xf30000ff,0x61616161,0x61616131, //67\n    0xc3ffffff,0xfe0000ff,0x61616161,0x61616131, //68\n    0xcfcf8f0f,0x0f0000ff,0x61616161,0x61616131, //69\n    0x3c3f3f3f,0x3f0000ff,0x61616161,0x61616131, //6a\n    0x3cfcfcfc,0xfc0000ff,0x61616161,0x61616131, //6b\n    0x00ffffff,0xff0000ff,0x61616161,0x61616131, //6c\n    0xffffffff,0xfffe00fd,0x71217131,0x713a7131, //6d\n    0xf7ebecec,0xdc38f0e0,0x71217131,0x71317030, //6e\n    0xe0800000,0x00000000,0x70200000,0x00000000, //6f\n    0x5fef733c,0x1f0f0300,0x71b1f151,0x50404000, //70\n    0xffffff00,0xffffff00,0x71b1f151,0x51414100, //71\n\n    0xffe0e020,0xe7e7e767,0x71b4f141,0x41414151, //72\n    0xffff0000,0xffffffff,0x71414141,0x41414151, //73\n    0xffff0000,0xffffff40,0x71414141,0x41414154, //74\n    0xffff0000,0xffffffff,0x71414141,0x41414141, //75\n    0xfffe0100,0xfeffffff,0x714a4141,0x41414141, //76\n    0xffff8060,0x1f8fcfc4,0x71b14f41,0x51414141, //77\n    0xffffff00,0x7fffff00,0x71b1f441,0x54414140, //78\n    0xfaf7ce3c,0xf8f0c000,0x71b1f141,0x50404040, //79\n    0x27272727,0x20202020,0x415171f1,0x41414141, //7a\n    0xffffffff,0x00000000,0x415171f1,0x41414141, //7b\n    0xfffdffff,0x00000000,0x415471f1,0x41414141, //7c\n    0xffffd0fc,0x01000001,0x414174f4,0x41414141, //7d\n    0xffffffff,0xffffffff,0x41414141,0x41414141, //7e\n    0xe4e4e4e4,0xe4e4e4e4,0x41414141,0x41414141, //7f\n    0x20202327,0x474f8f9f,0x41414141,0x41414141, //80\n    0x3fffffff,0xffffffff,0x41414141,0x41414141, //81\n    0xffffffff,0xffff177f,0x41414141,0x414174f4, //82\n    0xffffffff,0xffffffff,0x41414141,0x414171f1, //83\n    0xffffffff,0xfffffffe,0x41414141,0x414171f1, //84\n    0xe4e4e4e4,0xc4c88810,0x41414141,0x414171f1, //85\n    0x9f9f9f9f,0x9f9f9f9f,0x41414141,0x41414151, //86\n    0xffffffff,0xffffffff,0x41414141,0x41414151, //87\n    0x80000080,0xffffffff,0x41414141,0x41414151, //88\n    0x00000000,0xffffffff,0x41414141,0x41414151, //89\n    0x3f010101,0xf9f9f9f9,0x41414141,0x41414151, //8a\n    0x9f9f9f9f,0x8080ff00,0x415171f1,0x41414100, //8b\n    0xffffffff,0x0000ff00,0x415171f1,0x41414100, //8c\n    0xf9f9f9f9,0x0101ff00,0x415171f1,0x41414100, //8d\n\n    0xffe0e020,0xe7e7e767,0x71b2f121,0x21212131, //8e\n    0xffff0000,0xffffffff,0x71212121,0x21212131, //8f\n    0xffff0000,0xffffff40,0x71212121,0x21212132, //90\n    0xffff0000,0xffffffff,0x71212121,0x21212121, //91\n    0xfffe0100,0xfeffffff,0x712a2121,0x21212121, //92\n    0xffff8060,0x1f8fcfc4,0x71b12f21,0x31212121, //93\n    0xffffff00,0x7fffff00,0x71b1f441,0x54414140, //94\n    0xfaf7ce3c,0xf8f0c000,0x71b1f141,0x50404040, //95\n    0x27272727,0x20202020,0x213171f1,0x21212121, //96\n    0xffffffff,0x00000000,0x213171f1,0x21212121, //97\n    0xfffdffff,0x00000000,0x213271f1,0x21212121, //98\n    0xffffd0fc,0x01000001,0x212172f2,0x21212121, //99\n    0xffffffff,0xffffffff,0x21212121,0x21212121, //9a\n    0xe4e4e4e4,0xe4e4e4e4,0x21212121,0x21212121, //9b\n    0x20202327,0x474f8f9f,0x21212121,0x21212121, //9c\n    0x3fffffff,0xffffffff,0x21212121,0x21212121, //9d\n    0xffffffff,0xffff177f,0x21212121,0x212172f2, //9e\n    0xffffffff,0xffffffff,0x21212121,0x212171f1, //9f\n    0xffffffff,0xfffffffe,0x21212121,0x212171f1, //a0\n    0xe4e4e4e4,0xc4c88810,0x21212121,0x212171f1, //a1\n    0x9f9f9f9f,0x9f9f9f9f,0x21212121,0x21212131, //a2\n    0xffffffff,0xffffffff,0x21212121,0x21212131, //a3\n    0x80000080,0xffffffff,0x21212121,0x21212131, //a4\n    0x00000000,0xffffffff,0x21212121,0x21212131, //a5\n    0x3f010101,0xf9f9f9f9,0x21212121,0x21212131, //a6\n    0x9f9f9f9f,0x8080ff00,0x213171f1,0x21212100, //a7\n    0xffffffff,0x0000ff00,0x213171f1,0x21212100, //a8\n    0xf9f9f9f9,0x0101ff00,0x213171f1,0x21212100  //a9\n);\n\n// Text\nconst int[8*19] txt=int[](\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000020,0x21222300,0x00000000,0x00000000,0x00000000,0x00000000,0x00242526,0x27000000,\n  0x00000028,0x292a2b2c,0x2c2c2c2c,0x2c2d2e2f,0x3031322c,0x2c2c2c2c,0x2c333435,0x36000000,\n  0x00000000,0x3738393a,0x3b3c3d3c,0x3e3f4041,0x42434445,0x403c3c46,0x4748494a,0x00000000,\n  0x00000000,0x004b4c4d,0x4e4f5051,0x52535455,0x56575859,0x5a5b4f5c,0x4d5d5e00,0x00000000,\n  0x00000000,0x00005f60,0x61626364,0x65656667,0x68696a6b,0x6c66626d,0x6e6f0000,0x00000000,\n  0x00000000,0x00000000,0x70717171,0x72737373,0x74757677,0x78717179,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x7a7b7b7b,0x7c7d7e7f,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x80818283,0x83838485,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x86878889,0x8989898a,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x8b8c8c8c,0x8c8c8c8d,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x0001000a,0x0f15120e,0x05190014,0x0f001408,0x05001314,0x01121400,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,\n  0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000\n);\n\n// Sprites\n//  i32x2:8x8pattern\nconst int[4] spr=int[](0x03030301,0x00000000,0x0f070700,0x00000000);\n\n//----------------------------------------\n// TMS9918 Palette (MSX1)\n\nconst vec4[16] pal=vec4[](\n  vec4(.00,.00,.00,0), vec4(.00,.00,.00,1), vec4(.13,.78,.26,1), vec4(.37,.86,.47,1),\n  vec4(.33,.34,.93,1), vec4(.49,.46,.99,1), vec4(.83,.32,.30,1), vec4(.26,.93,.96,1),\n  vec4(.99,.33,.33,1), vec4(1.0,.54,.47,1), vec4(.83,.75,.33,1), vec4(.90,.81,.50,1),\n  vec4(.13,.69,.23,1), vec4(.79,.36,.73,1), vec4(.80,.80,.80,1), vec4(1.0,1.0,1.0,1)\n);\n// 0 Transparent    8 Medium Red\n// 1 Black          9 Light Red\n// 2 Medium Green  10 Dark Yellow\n// 3 Light Green   11 Light Yellow\n// 4 Dark Blue     12 Dark Green\n// 5 Light Blue    13 Magenta\n// 6 Dark Red      14 Gray\n// 7 Cyan          15 White\n\n\n//----------------------------------------\n// Text\n\nint displayText(){\n    int a=addr%(32*19),x=px&7,y=py&7;\n    int t=(txt[a>>2]>>(24-((a&3)<<3)))&255;\n    t<<=2;\n    t+=(t>0x71*4)&&(t<0x8e*4)&&(mod(iTime,.3)>.15)?28*4:0;\n    t+=y<4?0:1;\n    int fg,bg;\n    fg=chr[t+2]>>(24-((y&3)<<3));\n    bg=fg&15;\n    fg=(fg>>4)&15;\n    return ((chr[t]>>(31-(x+((y&3)<<3))))&1)!=0?fg:bg;\n}\n\n//----------------------------------------\n// Sprite\n\nint putSprite(int x,int y,int n){\n    int c=0;\n    n<<=1;\n    x=px-x;\n    y=py-y;\n    if((x>=0)&&(x<8)&&(y>=0)&&(y<8)){\n        n+=y>3?1:0;\n        y&=3;\n        c=(spr[n]>>(31-x-y*8))&1;\n    }\n    return c;\n}\n\n//----------------------------------------\n// Convert iChannel0 to Graphic2\n\n//const int cr=8;const int[cr] cl=int[](1,2,3,10,11,12,14,15);\nconst int cr=12;const int[cr] cl=int[](1,4,5,6,7,8,9,10,11,13,14,15);\n//const int cr=15;const int[cr] cl=int[](1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\nint videoInput(int x,int y){\n    vec2 uv=(vec2(x,y)+.5)/iResolution.xy;\n    vec4 tx=texture(iChannel0,uv);\n    int c=0;\n    float l=2.;\n    for(int i=0;i<cr;i++){\n        float d=length(pal[cl[i]].rgb-tx.rgb);\n        if(d<l){l=d;c=cl[i];}\n    }\n    return c;\n}\nint getPixelColor(int x,int y){\n    int[16] hi=int[](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\n    int al=x&0xfff8;\n    int c=0;\n    for(int i=0;i<8;i++){\n        int v=videoInput(al+i,y);\n        hi[v]+=v==1?5:3;\n        c=i==(x&7)?v:c;\n    }\n    int c1=0,c2=0,n1=0,n2=0;\n    for(int i=0;i<16;i++){\n        int co=hi[i];\n        if(co>c1){\n            c1=co;\n            n1=i;\n        }else if(co>c2){\n            c2=co;\n            n2=i;\n        }\n    }\n    float d1=length(pal[n1]-pal[c]);\n    float d2=length(pal[n2]-pal[c]);\n    return d1<d2?n1:n2;\n}\n\n//----------------------------------------\n// Video Output\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Screen coodinate\n    fc2msx(fragCoord);\n    if(isOut)discard;\n\n    vec4 col=pal[1];\n\n    //Background\n    int v=getPixelColor(px,py);\n    col=v>0?pal[v]:col;\n\n    //Text\n    int c=displayText();\n    col=c>0?pal[c]:col;\n\n    //Sprite\n    col=putSprite(90,84,0)>0?pal[4]:col;\n    col=putSprite(152,84,1)>0?pal[4]:col;\n\n    //Output\n    fragColor=col;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//==================================================\n// MSX SCREEN2 SETTINGS\n\n#define SCRW 256\n#define SCRH 192\n\n//----------------------------------------\n// MSX Screen Coodinate\n\nint addr=0,px=0,py=0,sx=0,sy=0;\nbool isOut=true;\nvoid fc2msx(vec2 fc){\n    px=int(fc.x);\n    py=int(fc.y);\n    sx=SCRW;\n    sy=SCRH;\n    isOut=(px<0)||(py<0)||(px>=sx)||(py>=sy);\n    addr=(px/8)+(py/8)*32;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//==================================================\n// GRADIUS2 - A JOURNEY TO THE START\n\nconst float base=440.;//master tuning (Hz)\nconst float bpm=220.; //tempo\nconst float start=2.; //start count (beats)\nconst float fade=10.; //fade out time (sec)\nconst float sec=180.; //performance time (includes start and fade)\n\nconst float drive=.45;\nconst float pressure=1.;\nconst int   delayrepeat=4;\nconst float delaywet=.2;\nconst float delayfb=.6;\nconst float delaytime=.14;\n\n//----------------------------------------\n// SCC ROM\n\nconst int[64] wt=int[](\n  //0:Bass 1:Bell 2:Vibe 3:Saw 4:PSGSquare 5:HalfSaw 6:Noise1 7:Noise2\n    0x40404000,0x407F4000,0xC080C000,0x407F4000,0xC0004000,0xE0002000,0xF0001000,0xF8000800,\n    0x0B3A6178,0x7D6F4F23,0xF2C39C85,0x808EAEDA,0x0B48727D,0x6633F2B5,0x8B8097CA,0x0B5DF2B0,\n    0x1C4B563E,0x16FB0024,0x55757047,0x0DE1D5EB,0x10261AEE,0xB48B86A6,0xD7FB00E5,0xBDA5B0DF,\n    0x80889098,0xA1A9B1B9,0xC2CAD2DA,0xE3EBF3FB,0x040C141C,0x252D353D,0x464E565E,0x676F777F,\n    0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x7F7F7F7F,0x00000000,0x00000000,0x00000000,0x00000000,\n    0x7F6F5F4F,0x3F2F1F0F,0xFFEFDFCF,0xBFAF9F8F,0x80808080,0x80808080,0x80808080,0x80808080,\n    0xBDC612B7,0x54A92708,0x8E96239B,0x3FD371F9,0xCABC2A4F,0xEB463EA7,0x0688E1DB,0x85DF34C5,\n    0xFF92D8FC,0x0944FC8D,0xA1049D9A,0xF6547236,0xB7B15E45,0xFBE63E46,0x2413B8F7,0xF744F3C2\n);\n\n//----------------------------------------\n// Sequencer ROM\n\n//pattern parameters\n//  mode(1)       1:<reserved> 0:4bit note double speed\n//  instrument(3) 0:Bass 1:Bell 2:Vibe 3:Saw 4:PSGSquare 5:HalfSaw\n//  detune(1)     1:enable(+5cent)\n//  envelope(3)   0:env1 1:env2 2:env3 3:env4\n//  volume(4)     0:mute ... 15:max\n//  panpot(4)     1:-7 right 8:+0 center 15:+7 left 0:<reserved>\n//  lfo phase(2)  0:up 1:down 3,4:<reserved>\n//  lfo mode(2)   0:off 1:velocity 2:note 3:both\n//  lfo delay(4)  0:0tick 1:1tick ... 15:15tick\n//  lfo amount(4) velocity:(n+1)/16 note:(n+1)*25cent\n//  lfo pitch(4)  0:1/5sec 15:16/5sec\n//    lfo time resolution:1/20sec\n//    lfo waveform:triangle\nconst int[19] pp=int[](0x00080000,\n    0x41870000,                      //01       PSG bass\n    0x40870000,                      //01       PSG bass stacc.\n    0x01590000,                      //03       SCC bass\n    0x00590000,                      //03       SCC bass stacc.\n    0x22580000,0x2A4C0000,           //05       SCC vibe\n    0x12560000,0x12490000,           //07 08    SCC bell\n    0x51580000,0x59440000,0x513C0000,//09 0A 0B SCC halfsaw\n    0x3A770000,0x32650000,0x324B0000,//0C 0D 0E SCC saw    \n    0x23680000,0x235C0000,           //0F 10    SCC vibe stacc.\n    0x13560000,0x13490000            //11 12    SCC bell stacc.\n);\n\n//note pattern\n//  0:rest  1-F:note\nconst int[72] np=int[](0x00000000,\n  //   bs bass   PSGsquare / Bass\n  //   m1 melody Vibe / HalfSaw / Bell\n  //   m2 melody delay 1/16\n  //   m3 melody delay 1/8\n\n  //01 bs      02 bs      03 bs      04 bs      05 bs      06 bs      07 bs      08 bs\n    0x1110DDDD,0x1111DD11,0x1011DD11,0x88DDDDDD,0x88111111,0x1188DD11,0x11333333,0x113366AA,\n  //09 bs      0A bs      0B bs      0C bs      0D *       0E bs      0F m1      10 m1\n    0x99441199,0x11222222,0x88994411,0x55666611,0x11111111,0x11111166,0x10101010,0x00111111,\n  //11 m1      12 m1      13 m1      14 m1      15 m1      16 m1      17 m1      18 m1\n    0x11110011,0x88114411,0x88114488,0x00114411,0xDD884411,0xAA116611,0xAA1166AA,0x00116611,\n  //19 m1      1A m1      1B m1      1C m1      1D m1      1E m1      1F m1      20 m1\n    0xDDAA6611,0x885511DD,0x88551155,0x22222011,0x11111033,0x11111100,0x11001100,0x11111022,\n  //21 m1      22 m1      23 m1      24 m1      25 m1      26 m2      27 m2      28 m2\n    0x12346789,0xDD885511,0x1166AADD,0x00550011,0x00440011,0x08811441,0x18811448,0x80011441,\n  //29 m2      2A m2      2B m2      2C m2      2D m2      2E m2      2F m2      30 m2\n    0x1DD88441,0x18811441,0x3AA11661,0x1AA1166A,0xA0011661,0x1DDAA661,0x1AA7733F,0xFAA77337,  \n  //31 m3      32 m3      33 m3      34 m3      35 m3      36 m3      37 m3      38 m3\n    0x00881144,0x11881144,0x88001144,0x11DD8844,0x11881144,0x33AA1166,0x11AA1166,0xAA001166,    \n  //39 m3      3A m3      3B m3      3C m3      3D m3      3E m3      3F m3      40 m1 \n    0x11AA7733,0xFFAA7733,0x00111110,0x00111111,0x00110011,0x00123467,0x89BB00BB,0x11111011,\n  //41 m3      42 m3      43 m3      44 m3      45 m3      46 m1      47 m1\n    0x11DDAA66,0x00111110,0x33110011,0x00123467,0x89BB00BB,0x114499DD,0x00660011\n);\n//gate time pattern\n//  0:note on or rest start  1-F:time from last note on\nconst int[17] gp=int[](0x01234567,\n  //01         02         03         04         05         06         07         08\n    0x01230123,0x01010101,0x01234567,0x89AB0101,0x23012301,0x23010101,0x89ABCDEF,0x01012345,\n  //09         0A         0B         0C         0D         0E         0F m1      10 m2\n    0x23456789,0x01234501,0xABCDEF00,0x00000000,0x00000001,0x01234001,0x10101010,0x67010101\n);\n\n//note sequence\n//  key(8) A4:0x45 C2:0x24 C3:0x30 C4:0x3C C5:0x48 E2:0x28 E3:0x34 E4:0x40 E5:0x4C\n//  note pattern(8)\n//  gate pattern(8)\n//  parameters(8)\n\n//KEY (MIDI Note_Numbers)_    __    __ __    __    __ __    __    __    __ __    __    __ __    __    __    __\n//|C1|__|D1|__|E1|F1|__|G1|__|A1|__|B1|C2|__|D2|__|E2|F2|__|G2|__|A2|__|B2|C3|__|D3|__|E3|F3|__|G3|__|A3|__|B3|\n//|18 19 1A 1B 1C|1D 1E 1F 20 21 22 23|24 25 26 27 28|29 2A 2B 2C 2D 2E 2F|30 31 32 33 34|35 36 37 38 39 3A 3B|\n//|__    __    __ __    __    __    __|__    __    __ __    __    __    __|__    __    __ __    __    __    __|\n//|C4|__|D4|__|E4|F4|__|G4|__|A4|__|B4|C5|__|D5|__|E5|F5|__|G5|__|A5|__|B5|C6|__|D6|__|E6|F6|__|G6|__|A6|__|B6|\n//|3C 3D 3E 3F 40|41 42 43 44 45 46 47|48 49 4A 4B 4C|4D 4E 4F 50 51 52 53|54 55 56 57 58|59 5A 5B 5C 5D 5E 5F|\n\n//PSG3(bass)\nconst int sl2=64;const int[sl2] sq2=int[](\n    0x28010101,0x28020201,0x28030601,0x28020201,0x28010101,0x28020201,0x28030601,0x28020201,//bass\n    0x28010101,0x28020201,0x28030601,0x28020201,0x28010101,0x28020201,0x28030601,0x28020201,\n    0x29010101,0x29020201,0x29030601,0x29020201,0x2A010101,0x2A020201,0x2A030601,0x2A020201,\n    0x2B010101,0x2B020201,0x2B030601,0x2B020201,0x2A010101,0x2A020201,0x23040201,0x23050201,\n    0x28060202,0x26070202,0x26070202,0x26070202,0x28060202,0x26070202,0x26070202,0x26080202,\n    0x28090202,0x2F0A0202,0x2F0A0202,0x2F0A0202,0x2F0A0202,0x2F0A0202,0x2F0A0202,0x280B0202,\n    0x28060202,0x26070202,0x26070202,0x26070202,0x28060202,0x26070202,0x26070202,0x26080202,\n    0x28090202,0x2F0A0202,0x2F0A0202,0x2B0C0202,0x2A0D0301,0x2A0E0401,0x2F0D0501,0x2D070202\n);\n//SCC2(bass - bass&vibe - vibe)\nconst int sl3=64;const int[sl3] sq3=int[](\n    0x28010103,0x28020203,0x28030603,0x28020203,0x28010103,0x28020203,0x28030603,0x28020203,//bass\n    0x28010103,0x28020203,0x28030603,0x28020203,0x28010103,0x28020203,0x28030603,0x28020203,\n    0x29010103,0x29020203,0x29030603,0x29020203,0x2A010103,0x2A020203,0x2A030603,0x2A020203,\n    0x2B010103,0x2B020203,0x2B030603,0x2B020203,0x2A010103,0x2A020203,0x23040203,0x23050203,\n    0x28060204,0x451D0E05,0x470D0905,0x471E0B05,0x451F0205,0x451D0E05,0x470D0905,0x471E0B05,//bass-vibe\n    0x28090204,0x4A1D0E05,0x4C0D0905,0x40210C05,0x4A1F0205,0x4A1D0E05,0x4C0D0905,0x4C1E0B05,//bass-vibe\n    0x28060204,0x451D0E05,0x470D0905,0x471E0B05,0x451F0205,0x451D0E05,0x470D0905,0x471E0B05,//bass-vibe\n    0x28090204,0x4A1D0E05,0x4C0D0905,0x4C1E0B05,0x45220C0F,0x40230D0F,0x4524020F,0x3D25020F //bass-vibe\n);\n//SCC3(vibe - m3halfsaw - saw - m3vibe - vibe)\nconst int sl4=64;const int[sl4] sq4=int[](\n    0x490D0005,0x490D0705,0x490D020F,0x49100805,0x4A0D0005,0x4A0D0705,0x4A11020F,0x4A100805,//vibe\n    0x490D0005,0x490D0705,0x490D020F,0x49100805,0x4A0D0005,0x4A0D0705,0x4A11020F,0x4A100805,\n    0x4531020B,0x4532020B,0x4533020B,0x4534020B,0x4535020B,0x4532020B,0x4533020B,0x4534020B,//m3halfsaw\n    0x4336020B,0x4337020B,0x4338020B,0x4341020B,0x4339020B,0x433A020B,0x47400A0E,0x470D090E,//m3haflsaw-saw\n    0x45000006,0x453B0806,0x470D0306,0x470D0706,0x453D0206,0x453B0806,0x470D0306,0x470D0706,//m3vibe\n    0x4A000006,0x4A3B0806,0x4C0D0306,0x403E0806,0x403F1006,0x4A3B0806,0x4C0D0306,0x4C0D0706,\n    0x45000006,0x453B0806,0x470D0306,0x470D0706,0x453D0206,0x453B0806,0x470D0306,0x470D0706,\n    0x4A000006,0x4A3B0806,0x4C0D0306,0x4C0D0706,0x40190C10,0x3D460D10,0x40470210,0x39240210 //m3vibe-vibe\n);\n//SCC4(bell - halfsaw - saw - bell)\nconst int sl5=64;const int[sl5] sq5=int[](\n    0x460D0007,0x460D0707,0x460D0211,0x46100807,0x470D0007,0x470D0707,0x47110211,0x47100807,//bell\n    0x460D0007,0x460D0707,0x460D0211,0x46100807,0x470D0007,0x470D0707,0x47110211,0x47100807,\n    0x45120209,0x45130209,0x45140209,0x45150209,0x45120209,0x45130209,0x45140209,0x45150209,//halfsaw\n    0x43160209,0x43170209,0x43180209,0x43190209,0x451A0209,0x451B0209,0x4B1C0A0C,0x4B0D090C,//halfsaw-saw\n    0x4500000C,0x451D0E0C,0x470D090C,0x471E0B0C,0x451F020C,0x451D0E0C,0x470D090C,0x471E0B0C,//saw\n    0x4500000C,0x451D0E0C,0x470D090C,0x471E0B0C,0x451F020C,0x451D0E0C,0x470D090C,0x471E0B0C,\n    0x4500000C,0x451D0E0C,0x470D090C,0x471E0B0C,0x451F020C,0x451D0E0C,0x470D090C,0x471E0B0C,\n    0x4500000C,0x451D0E0C,0x470D090C,0x471E0B0C,0x490D0211,0x493D0211,0x493D0211,0x49110211 //saw-bell\n);\n//SCC5(bell - m2halfsaw - saw - bell)\nconst int sl6=64;const int[sl6] sq6=int[](\n    0x420D0008,0x420D0708,0x420D0212,0x42100808,0x430D0008,0x430D0708,0x43110212,0x43100808,//bell\n    0x420D0008,0x420D0708,0x420D0212,0x42100808,0x430D0008,0x430D0708,0x43110212,0x43100808,\n    0x45260F0A,0x45270F0A,0x45280F0A,0x45290F0A,0x452A0F0A,0x45270F0A,0x45280F0A,0x45290F0A,//m2halfsaw\n    0x432B0F0A,0x432C0F0A,0x432D0F0A,0x432E0F0A,0x432F0F0A,0x43300F0A,0x45400A0D,0x450D090D,//m2halfsaw-saw\n    0x4200000D,0x42200E0D,0x430D090D,0x431E0B0D,0x421F020D,0x42200E0D,0x430D090D,0x431E0B0D,//saw\n    0x4200000D,0x42200E0D,0x430D090D,0x431E0B0D,0x421F020D,0x42200E0D,0x430D090D,0x431E0B0D,\n    0x4200000D,0x42200E0D,0x430D090D,0x431E0B0D,0x421F020D,0x42200E0D,0x430D090D,0x431E0B0D,\n    0x4200000D,0x42200E0D,0x430D090D,0x431E0B0D,0x450D0212,0x453D0212,0x453D0212,0x45110212 //saw-bell\n);\n\n//rhythm pattern\n//  0:note on  1-E:time from last note on  F:rest\nconst int[33] rp=int[](0xFFFFFFFF,\n    0x01010100,0xFF010101,0x01FF0101,0x0100FFFF,0xFF01FFFF,0x01FF01FF,0x01FFFFFF,0xFFFFFF01, //01 clsd hihat\n    0x01FFFFFF,0xFFFF0123,0x01FF0123,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF, //09 open hihat\n    0x0123FFFF,0x0101FFFF,0x0001FF01,0x01010101,0xFF01FF01,0x01230123,0xFFFFFFFF,0xFFFFFFFF, //11 kick\n    0xFFFF0123,0xFFFF1201,0xFF00FF01,0x01FF1201,0x0123FFFF,0x010123FF,0xFF121201,0xFF121201  //19 snare\n);\n\n//percussion sequence\n//  gate pattern(8)x4\nconst int sl1=64;const int[sl1] sq1=int[](\n    0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,\n    0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x0209131A,\n    0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,\n    0x01001119,0x02091219,0x01001119,0x02091219,0x01001119,0x02091219,0x0300131B,0x0209141C,\n    0x040A151D,0x050B151D,0x040A151D,0x050B151E,0x040A151D,0x050B151D,0x040A151D,0x050B151E,\n    0x040A151D,0x050B151D,0x040A151D,0x050B151E,0x040A151D,0x050B151D,0x040A151D,0x050B151F,\n    0x040A151D,0x050B151D,0x040A151D,0x050B151E,0x040A151D,0x050B151D,0x040A151D,0x050B151E,\n    0x040A151D,0x050B151D,0x040A151D,0x050B151E,0x07000000,0x0800161F,0x06001600,0x0209131B\n);\n\n//----------------------------------------\n// Amplifier\n//  vec3 p( drive, pressure, volume)\nvec2 amp(vec2 i,vec3 p){return clamp(sign(i)*pow(abs(i*p.x)*.01,vec2(1./p.y))*100.,-1.,1.)*p.z;}\n\n//----------------------------------------\n// Panpot\nfloat stereo=.5;\nvec2 panpot(int n){\n    float p=float(n-8);\n    float p1=.8-(abs(p)*.2)*stereo,p2=.8+(abs(p)*.06)*stereo;\n    return p<0.?vec2(p1,p2):vec2(p2,p1);\n}\n\n//----------------------------------------\n// Envelope\nfloat env1(float r,float t){float v=max(1.-t*r,0.);return v>0.?v*v:0.;}\nfloat env2(float r,float t){float v=max(1.-t*r,.75-t*r*.125);return v>0.?v*v:0.;}\nfloat env3(float r,float t){float v=max(1.-t*r,.5);return v>0.?v*v:0.;}\nfloat env4(float r,float t){float v=max(min(1.-t*r,6.-t*r*3.),.0);return v>0.?v*v:0.;}\n\n//----------------------------------------\n// SCC Oscillator\nconst float i128=1./128.;\nfloat scc(float x,int i){\n    int pos=int(mod(x*32.,32.));\n    return float((((wt[(i<<3)+(pos>>2)]>>(24-((pos&3)<<3)))&255)^128)-128)*i128;\n}\n\n//----------------------------------------\n// Percussion Oscillator\nfloat sd(float f,float t){\n    float o=scc(290.*t,6)*scc(270.*t,7)*env2(20.,t);\n    o+=clamp(sin((f-t*(f*.4))*t)*20.,-1.,1.)*env1(9.,t);\n    return o;\n}\nfloat bd(float f,float t){return clamp(sin((f-t*(f*1.5))*t)*20.,-1.,1.)*env1(14.,t);}\nfloat hh(float f,float t){return scc(f*t,6)*scc((f*.969)*t,7)*env1(20.,t);}\nfloat oh(float f,float t){return scc(f*t,6)*scc((f*.969)*t,7)*env1(4.,t);}\n\n//----------------------------------------\n// Triangle Wave\nfloat tri(float x){\n    x=fract(x+.25);\n    return x<.5?x*4.-1.:2.-x*4.;\n}\n\n//----------------------------------------\n// Frequency From MIDI Note Number\nconst float i12=1./12.;\nfloat freq(float n){return pow(2.,(n-69.)*i12)*base;}\n\n//----------------------------------------\n// Sequencer\nint bar;\nint tick;\nfloat tt;\nfloat tl;\nconst float i6=1./6.;\nconst float i15=1./15.;\nvec2 getNote(int sq){\n    vec2 o=vec2(0);\n    int n=(np[(sq>>16)&255]>>(28-(tick<<2)))&15;\n    if(n==0)return o;\n    int k=(sq>>24)&255,p=pp[sq&255],g=(gp[(sq>>8)&255]>>(28-(tick<<2)))&15;\n    int i=(p>>28)&7,e=(p>>24)&7,s=(p>>16)&15;\n    float v=float((p>>20)&15)*i15,t=tt+tl*float(g);\n    int l=(p>>12)&3;\n    float ln=0.;\n    if(l>0){\n        int lp=(p>>14)&1,ld=(p>>8)&15;\n        float la=float((p>>4)&15),ll=float(p&15)+1.;\n        if(g>=ld){\n            float lt=floor((t-tl*float(ld))*20.)*.05+.025;\n            float lv=tri(lt/(ll*.2));\n            lv=lp==0?lv:-lv;\n            v+=(l&1)==1?lv*(la+1.)*.0625:0.;\n            ln=(l&2)==2?lv*(la+1.)*.25:0.;\n        }\n    }\n    if((e&2)==0){v*=(e&1)==0?env1(3.5,t):env2(2.5,t);}\n            else{v*=(e&1)==0?env3(2.0,t):env4(3.5,t);}\n    float f=freq(float(k+n-1)+float((p>>27)&1)*.05+ln);\n    o+=panpot(s)*scc(f*t,i)*v;\n    return o;\n}\nvec2 getPerc(int sq){\n    vec2 o=vec2(0);\n    int c=(rp[(sq>>24)&255]>>(28-(tick<<2)))&15;\n    int h=(rp[(sq>>16)&255]>>(28-(tick<<2)))&15;\n    int b=(rp[(sq>>8)&255]>>(28-(tick<<2)))&15;\n    int s=(rp[sq&255]>>(28-(tick<<2)))&15;\n    o+=c<15?panpot(7)*hh(440.,tt+tl*float(c))*.3:vec2(0);\n    o+=h<15?panpot(7)*oh(440.,tt+tl*float(h))*.3:vec2(0);\n    o+=b<15?panpot(8)*bd(474.,tt+tl*float(b))*.5:vec2(0);\n    o+=s<15?panpot(10)*sd(853.,tt+tl*float(s))*.7:vec2(0);\n    return o;\n}\nvec2 sequencer(float time){\n    vec2 o=vec2(0);\n    if(time<0.)return o;\n    tl=15./bpm;\n    tick=int(time/tl);\n    tt=mod(time,tl);\n    bar=tick>>3;\n    tick&=7;\n    o+=getNote(sq2[bar%sl2]); //PSG3\n    o+=getNote(sq3[bar%sl3]); //SCC2\n    o+=getNote(sq4[bar%sl4]); //SCC3\n    o+=getNote(sq5[bar%sl5]); //SCC4\n    o+=getNote(sq6[bar%sl6]); //SCC5\n    o+=getPerc(sq1[bar%sl1]); //Percussion\n    return o;\n}\n\n//----------------------------------------\n// Master\nvec2 mainSound( int samp, float time )\n{\n    vec2 o=vec2(0);\n    float vol=1.;if(time>sec-fade){vol=(sec-min(time,sec))/fade;}\n    time-=start*60./bpm;if(time<0.)return o;\n    stereo=0.4;\n    o+=sequencer(time);\n    float d=delaywet,r=delaytime;\n    for(int i=0;i<delayrepeat;i++){\n        stereo+=0.2/float(delayrepeat);\n        time-=delaytime;if(time<0.)continue;\n        r+=delaytime;\n        o+=sequencer(time)*d;\n        d*=delayfb;\n    }\n    return amp(o,vec3(drive,pressure,vol));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}