{
    "Shader": {
        "info": {
            "date": "1695560993",
            "description": "Wanted to make the previous shader look a bit more like underwater travelling through glowing abstract \"algae\" \nSome glitches remains but now I need a break\n",
            "flags": 64,
            "hasliked": 0,
            "id": "cscyDf",
            "likes": 53,
            "name": "Saturday hacking",
            "published": 3,
            "tags": [
                "underwater"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1117
        },
        "renderpass": [
            {
                "code": "// CC0: Saturday hacking\n//  Wanted to make the previous shader look a bit more like underwater travelling\n//  through glowing abstract \"algae\" \n//  Some glitches remains but now I need a break\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define OFF6(n)     (vec2(1.0, 0.0)*ROT(n*tau/6.))\n#define SAT(x)      clamp(x,0.,1.)\n\n//#define APPROX_MATH\n\nconst float\n  pi        = acos(-1.)\n, tau       = 2.*pi\n, pi_2      = 0.5*pi\n, planeDist = .5\n, furthest  = 6.\n, fadeFrom  = 4.\n;\nconst vec3  \n  L  = vec3(0.299, 0.587, 0.114)\n, LD = normalize(vec3(0.0, 1.8, 1.0))\n;\n\nconst vec2 \n  pathA = vec2(.31, .41)\n, pathB = vec2(1.0,sqrt(0.5))\n;\n\nconst vec4 \n  U = vec4(0, 1, 2, 3)\n  ;\n  \nconst vec2 off6[6] = vec2[6](\n    OFF6(0.)\n  , OFF6(1.)\n  , OFF6(2.)\n  , OFF6(3.)\n  , OFF6(4.)\n  , OFF6(5.)\n  ); \n\nconst vec2 noff6[6] = vec2[6](\n    vec2(-1.0, 0.0)\n  , vec2(-0.5, 0.5)\n  , vec2( 0.5, 0.5)\n  , vec2( 1.0, 0.0)\n  , vec2( 0.5,-0.5)\n  , vec2(-0.5,-0.5)\n  ); \n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n\nvec3 offset(float z) {\n  return vec3(pathB*sin(pathA*z), z);\n}\n\nvec3 doffset(float z) {\n  return vec3(pathA*pathB*cos(pathA*z), 1.0);\n}\n\nvec3 ddoffset(float z) {\n  return vec3(-pathA*pathA*pathB*sin(pathA*z), 0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  co += 123.4;\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  co += 123.4;\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n#ifdef APPROX_MATH\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = pi_2 - cosatan2 * pi_2;\n  return y < 0.0 ? -t : t;\n}\n\nfloat acos_approx(float x) {\n  return atan_approx(sqrt(1.0 - x*x), x);\n}\n#else\nfloat atan_approx(float y, float x) {\n  return atan(y, x);\n}\n\nfloat acos_approx(float x) {\n  return acos(x);\n}\n#endif\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\nfloat dot2(vec2 p) {\n  return dot(p, p);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos_approx( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n// License: CC BY-NC-SA 3.0, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\n// License: CC BY-NC-SA 3.0, author: BigWings, found: https://www.shadertoy.com/view/4sXBRn\nvec3 godray(vec3 bg, vec3 r) {\n  // Godrays \"borrowed\" from BigWings amazing Luminescence: https://www.shadertoy.com/view/4sXBRn\n  float x = atan_approx(r.x, r.z); \n  float y = pi*0.5-acos_approx(r.y);   \n    \n  x *= 0.5;\n  y *= 0.5;\n    \n  vec3 col = bg*(1.+y);\n    \n  float t = TIME;\n    \n  float a = sin(r.x);\n    \n  float beam = SAT(sin(10.*x+a*y*5.+t));\n  beam *= SAT(sin(7.*x+a*y*3.5-t));\n    \n  float beam2 = SAT(sin(42.*x+a*y*21.-t));\n  beam2 *= SAT(sin(34.*x+a*y*17.+t));\n    \n  beam += beam2;\n  \n  col += beam*.25*sqrt(bg);\n  return col;\n}\n\nvec2 coff(float h) {\n  float h0 = h;\n  float h1 = fract(h0*9677.0);\n  float t = 0.75*mix(0.5, 1.0, h0*h0)*(TIME+1234.5);\n  return mix(0.1, 0.2, h1*h1)*sin(t*vec2(1.0, sqrt(0.5)));\n}\n\nvec3 plane(vec3 ro, vec3 rd, vec3 pp, float pd, vec3 off, float n) {\n  float ppd = pp.z-ro.z;\n  vec2 p = (pp-off*U.yyx).xy;\n  float hh = hash(n);\n  p *= mix(1.125, 1.5, hh*hh);\n  \n  vec2 p2 = p;\n  mat2 rot = ROT(tau*0.125*n+0.0005*TIME); \n  p2 *= rot;\n  p2 += -vec2(0.0, hh*0.25*(ro.z-pp.z))*rot;\n  vec2 hp = p2;\n  hp += 0.5;\n  const float ga = 100.0;\n  const float z = 1.0/3.0;\n  hp /= z;\n  vec2 hn = hextile(hp);\n  \n  float h0 = hash(hn+n);\n  vec2 p0 = coff(h0);\n  \n  vec3 bcol = (1.0/3.0)*(1.0+cos(vec3(0.0, 1.0, 2.0) + 2.0*(p2.x+p2.x)-+0.33*n)); \n  vec3 col = vec3(0.0);\n\n  float mx = 0.00025+0.0005*max(pd- 1.5, 0.0);\n  \n  for (int i = 0; i < 6; ++i) {\n    float h1 = hash(hn+noff6[i]+n);\n    vec2 p1 = off6[i]+coff(h1);\n    \n    float h2 = h0+h1;\n    float fade = smoothstep(1.05, 0.85, distance(p0, p1)); \n\n    if (fade < 0.0125) continue;\n\n    vec2 p2 = 0.5*(p1+p0)+coff(h2);\n    float dd = bezier(hp, p0, p2, p1);\n    float gd = abs(dd);\n    gd *= sqrt(gd);\n    gd = max(gd, mx);\n\n    col += fade*0.002*bcol/(gd);\n  }\n\n  {  \n    float cd = length(hp-p0);\n    float gd = abs(cd);\n    gd *= (gd);\n    gd = max(gd, mx);\n    float fd = ppd;\n    fd -= 5.;\n    float fade = hash(floor(TIME*5.0+123.0*h0))>(fd+length(hn)) ? 1.0 : 0.125;\n    col += 0.0025*fade*sqrt(bcol)/(gd);\n  }\n  \n  col *= 1.25;  \n  return col;\n}\n\nfloat hf0(vec2 p) {\n  float h = (0.5+0.5*sin(p.x)*sin(p.y));\n  h *= h;\n  h *= h;\n  h *= h;\n  return -h;\n}\n\nfloat hf(vec2 p) {\n  const float aa = 0.66;\n  const mat2 pp = 2.03*ROT(1.0);\n  float a = 1.0;\n  float h = 0.0;\n  float ta = 0.0;\n  for (int i = 0; i < 3; ++i) {\n    p += a*0.05*TIME;\n    h += a*hf0(p);\n    a *= aa;\n    ta += a;\n    p *= pp;\n  }\n  return 0.1*h/ta;\n}\n\nvec3 nf(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = hf(p + e.xy) - hf(p - e.xy);\n  n.y = hf(p + e.yx) - hf(p - e.yx);\n  n.z = -2.0*e.x;\n  \n  return normalize(n);\n}\n\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1./RESOLUTION.xy;\n  float rdd = 2.0-0.25;\n  \n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec3 acol = vec3(0.0);\n\n  vec3 aro = ro;\n  float apd = 0.0;\n  vec3 ard = rd;\n\n  for (float i = 1.; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*i;\n\n    float lpd = (pz - aro.z)/ard.z;\n\n    {\n      vec3 pp = aro + ard*lpd;\n\n      vec3 nor = nf(pp.xy);\n      apd += lpd;\n\n      vec3 off = offset(pp.z);\n\n      float dz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*furthest, planeDist*fadeFrom, dz);\n      float fadeOut = smoothstep(0., planeDist*.1, dz);\n      float fadeOutRI = smoothstep(0., planeDist*1.0, dz);\n\n      float ri = mix(1.0, 0.9, fadeOutRI*fadeIn);\n      vec3 refr = refract(ard, nor, ri);\n\n      vec3 pcol = plane(ro, ard, pp, apd, off, nz+i);\n\n      pcol *= fadeOut*fadeIn;\n      pcol *= exp(-vec3(0.8, 0.9, .7)*apd);\n      acol += pcol;\n      aro = pp;\n      ard = refr;\n    }\n    \n  }\n\n  float lf = 1.001-dot(ard, LD);\n  lf *= lf;\n  acol += godray(0.025*vec3(0.0, 0.25, 1.0)/lf, rd);\n  return acol;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 r = RESOLUTION.xy, q = fragCoord/RESOLUTION.xy, pp = -1.0+2.0*q, p = pp;\n  p.x *= r.x/r.y;\n\n  float tm  = 0.125*planeDist*TIME-0.1*sin(0.25*TIME-pp.y+pp.x)*length(pp);\n\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(U.xyx+ddro, ww));\n  vec3 vv = cross(ww, uu);\n  \n  vec3 col = color(ww, uu, vv, ro, p);\n  col -= (1.0/30.0)*U.zwx*(length(pp)+0.125);\n  float fade = min(-0.5*abs(pp.y)+0.125*TIME-1.5, 0.0);\n  col *= smoothstep(1.5, sqrt(0.5), length(pp)-fade);\n  col = aces_approx(col);\n  col = sqrt(col);\n  fragColor = vec4(col, 1);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34765,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/carbonbasedlifeforms/abiogenesis?si=2fd70ee2ecc8450e9b9a2bed741e4101&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}