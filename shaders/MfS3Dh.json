{
    "Shader": {
        "info": {
            "date": "1704147207",
            "description": "Simple 2D Lyapunov",
            "flags": 0,
            "hasliked": 0,
            "id": "MfS3Dh",
            "likes": 7,
            "name": "Simple 2D Lyapunov Zoom",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "gid",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "const vec2 P = vec2(3.5, 3.5);\nconst vec2 D = vec2(0.5, 0.5);\n\nconst int iters = 1000;\nconst int settle = 990;\n\nconst int seq[] = int[](0,0,1,0,1);\nconst int seqlen = seq.length();\n\nconst float zoomExp = 0.9996;\nconst float zoomSpeed = 100.0;\n\nconst float scale = 2.0/float(iters-settle);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*fragCoord/iResolution.xy - vec2(1.0, 1.0);\n       \n    vec2 d = D * pow(zoomExp, iTime*zoomSpeed);\n    \n    vec2 p = P + d * uv;\n    \n\n    int i = 0;\n    int s = 0;\n    float r;\n    float z = 0.0;\n    float c = 0.5;\n    \n    do {\n        float r = seq[s]==0 ? p.x : p.y;\n        c = r * c * (1.0 - c);\n        if (i > settle) {\n            r = abs(r - 2.0 * r * c);\n            z = z + log(r);\n        }\n        if (++s >= seqlen) s = 0;\n    } while (++i < iters);\n    \n    z *= scale;\n    \n    if (z > 0.0) // chaos\n        fragColor = vec4(0.0, 0.0, z, 1.0);\n    else { // order\n        if (z < -2.0)\n            fragColor = vec4(1.0, 1.0, -2.0-z, 1.0);\n        else if (z < -1.0)\n            fragColor = vec4(1.0, -1.0-z, 0.0, 1.0);\n        else\n            fragColor = vec4(-z, 0.0, 0.0, 1.0);\n    }\n}\n\n/*\n\nOr server-side:\n\n\n#!/usr/bin/env python3\n \nimport math\nfrom sys import stdout\nimport shutil\n \nw,h = shutil.get_terminal_size()\n \na0 = 3.0\na1 = 4.0\nb0 = 3.5\nb1 = 4.0\nsequence = \"AABAB\"\n \nsettle = 10\niters = 100\nscale = 2.0/(iters)\n \ncolors = 18\ndef plot(c):\n    r = 0    if c<0 else c if c<6 else 5\n    g = 0    if c<6 else c-6 if c<12 else 5\n    b = -c%5 if c<0 else 0 if c<12 else c-12 if c<18 else 5\n    stdout.write(f\"\\033[48;5;{16+36*r+6*g+b}m \")\n \nl = len(sequence)\nfor y in range(h):\n    b = b0 + (b1-b0) * y / h\n    for x in range(w):\n        a = a0 + (a1-a0) * x / w\n        z = 0\n        c = 0.5\n        for i in range(iters):\n            r = a if sequence[i % l]=='A' else b\n            c = r * c * (1 - c)\n            if i > settle:\n                r = abs(r - 2.0 * r * c)\n                z = z + math.log(r)\n        plot(int(-z * scale * colors))\n    stdout.write(\"\\033[0m\\n\")\n\n*/\n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}