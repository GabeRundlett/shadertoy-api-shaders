{
    "Shader": {
        "info": {
            "date": "1708061247",
            "description": "Moving, rotating and scaling a 2D texture isn't as straight forward as I expected. I couldn't find any other shadertoy examples that did it correctly, so I implemented it here.",
            "flags": 0,
            "hasliked": 0,
            "id": "43s3Wl",
            "likes": 1,
            "name": "Position Rotation Scale",
            "published": 3,
            "tags": [
                "transforms"
            ],
            "usePreview": 0,
            "username": "russkev",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "#define SHOW_TEXTURE\n#define USE_MOUSE_FOR_POSITION\n//#define USE_MOUSE_FOR_ROTATION\n\n#define PI 3.14159265359\n\nconst vec2 SCALE = vec2(.2, .9);\nconst float THETA = 1.3;\nconst vec2 SCALE_INVERSE = 1./SCALE;\n\nvec2 rotate(vec2 uv, float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return vec2(\n        uv.x * c - uv.y * s,\n        uv.x * s + uv.y * c\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n        \n    vec2 mouse = vec2(iMouse.x / iResolution.y, iMouse.y / iResolution.y);\n    \n    // --- Position --- //\n#ifdef USE_MOUSE_FOR_POSITION\n    uv -= mouse;\n#else\n    uv -= vec2(0.5 * sin(iTime) + 1., 0.5 * cos(iTime * 1.5) + 0.5);\n#endif\n    \n    // --- Rotation --- //\n#ifdef USE_MOUSE_FOR_ROTATION\n    //uv = rotate(uv, -mouse.y * 2. * PI);\n#else\n    //uv = rotate(uv, cos(iTime));\n#endif\n\n    // --- Scale -- //\n    //vec2 scale = vec2(cos(iTime*0.7) + 1.3, sin(iTime*1.1) + 1.3);\n    vec2 scale = vec2(1.);\n    vec2 inverseScale = 1./scale;\n    \n    uv += vec2(0.5) * scale * vec2(1, 0.5);\n    uv /= scale;\n\n    vec3 col = vec3(uv, 0.0);\n    \n    if (uv.x > 0. && uv.x < 1. && uv.y > 0. && uv.y < 1.)\n    {\n#ifdef SHOW_TEXTURE\n        fragColor = texture(iChannel0, uv); \n#else\n        fragColor = vec4(col,1.0);\n#endif\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}