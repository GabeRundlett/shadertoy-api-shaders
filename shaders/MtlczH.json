{
    "Shader": {
        "info": {
            "date": "1503524557",
            "description": "If you need a seed support..",
            "flags": 0,
            "hasliked": 0,
            "id": "MtlczH",
            "likes": 10,
            "name": "Hash without Sine 2",
            "published": 3,
            "tags": [
                "noise",
                "random",
                "hash",
                "rnd",
                "rand",
                "pseudo"
            ],
            "usePreview": 0,
            "username": "aft",
            "viewed": 1184
        },
        "renderpass": [
            {
                "code": "// @aft\n// Licensed under MIT.\n\n// An attempt to create a seeded hash  \n// without sine with less artifacts.\n\n// Based on David Hoskins' idea.\n// https://www.shadertoy.com/view/4djSRW\n\n#define SEED 1.123456789\n#define HASHM mat3(40.15384,31.973157,31.179219,10.72341,13.123009,41.441023,-311.61923,10.41234,178.127121)\n\nfloat hash(vec3 p) {\n\tp = fract((vec3(p.x, p.y, p.z) + SEED * 1e-3) * HASHM);\n    p += dot(p, p.yzx + 41.19);\n    return fract((p.x + p.y) * p.z);\n}\n\n\nfloat hash(vec2 p) {\n\tvec3 p3 = fract(vec3(p.x, p.y, (p.x + p.y + SEED * 1e-7)) * HASHM);\n    p3 += dot(p3, p3.yzx + 41.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float value;\n    if (uv.x < .5) {\n    \tvalue = hash(vec3(uv, (uv.x + uv.y) * iTime * 0.001));\n    } else {\n        value = hash(uv + iTime * 0.001); }\n    \n    fragColor = vec4(vec3(value < 1. ? value : 0.), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}