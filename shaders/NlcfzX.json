{
    "Shader": {
        "info": {
            "date": "1663393873",
            "description": "Working on code cleanup / readability of the original shader by Danilo Guanabara: https://www.shadertoy.com/view/XsXXDn\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NlcfzX",
            "likes": 7,
            "name": "Radial Ripples",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "azaday",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "// http://www.pouet.net/prod.php?which=57245\n// If you intend to reuse this shader, please add credits to 'Danilo Guanabara'\n\n// improving readability + adding configurable params to Danilo's shader\n\n#define r iResolution.xy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    /* visual params */\n    \n    float rippleDirection = -1.; // negative inwards, positive outwards\n    float rippleRate = 3.0; // rate that ripples move in/out\n    float numRipples = 20.; // num ripples\n    \n    float overallDensityRate = 1.0;  // rate of oscillation of overall ripple density. sin within sin\n    float densityCap = 1.0;  // cap density ie num of coexisting ripples\n\n\tvec3 c;\n\tfloat l, t=iTime;\n    vec2 p = fragCoord.xy/r;\n    p-=.5; // remap uv from [0,1] --> [-0.5, 0.5]. center pixel now (0,0)\n    p.x *= r.x / r.y;  // scale x by ratio of screen width to height. \n    // now p.x. and p.y range are proportional to screen resolution.\n    // e.g. if screen is 200px wide, 100px tall, p.x range from -1,1.\n    l=length(p); // distance from center of screen\n    \n\tfor(int i=0;i<3;i++) {\n        vec2 uv = fragCoord.xy/r;\n\t\n        t += .07;  // change time for each color channel. RGB diffraction effect\n\t\t\n        uv += // why are we using 0-1 UV here when this is a radially symmetric shader??\n            p / \n            l * densityCap * (sin(overallDensityRate * t)+1.) * // sin of time, shifted +1 to [0,2] range. independent for pixels, applies to entire screen\n            abs(sin(rippleDirection * rippleRate * t + l*numRipples)); // sin based on distance from center pixel, shifted proportionally to distance\n            // means freq of this sin is fixed at t coefficient, but repeats in ripples every 1/L*k units of radial distance\n\t\t\n        c[i]= .01 / length(fract(uv) - .5);  // why divide from .01??\n\t}\n\tfragColor=vec4(c / l, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}