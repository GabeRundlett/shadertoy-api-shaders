{
    "Shader": {
        "info": {
            "date": "1664864424",
            "description": "Trying to use just the alpha channel and mipmaps to move the texture coordinate to valid data.\n\nWant to move more slowly when near the edge, but it's going badly.",
            "flags": 32,
            "hasliked": 0,
            "id": "7lKBRK",
            "likes": 3,
            "name": "Outpainting experiment #2",
            "published": 3,
            "tags": [
                "extrapolation",
                "predator",
                "inpainting",
                "stealth",
                "outpainting"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "float blurryalpha(vec2 uv) {\n    float sum = 0.0;\n    float div = 0.0;\n    for (int i = 2; i < 11; ++i) {\n        float scale = pow(1.40, float(i));\n        float bias = float(i);\n        sum += texture(iChannel1, uv, float(i)).a * scale;\n        div += scale;\n    }\n    return sum / div;\n}\n\nvec2 alphagradient(vec2 uv, float eps) {\n    vec3 ho = vec3(-eps, eps, 0.0);\n    vec3 vo = vec3(-eps, eps, 0.0);\n    float lf = blurryalpha(uv + ho.xz);\n    float rt = blurryalpha(uv + ho.yz);\n    float up = blurryalpha(uv + vo.zx);\n    float dn = blurryalpha(uv + vo.zy);\n    return vec2(rt - lf, dn - up) / eps;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 bkg = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 colour = texture(iChannel0, uv);\n    float magic = blurryalpha(uv);\n    for (int i = 0; i < 6; ++i) {\n        if (colour.a >= 0.95) break;\n        float alpha = blurryalpha(uv);\n        alpha *= alpha;\n        alpha *= alpha;\n        vec2 dir = alphagradient(uv, 0.02);\n        if (length(dir) < 0.001) dir = alphagradient(uv, 0.1);\n#if 0\n        float scale = 0.125 * (1.0 - alpha);\n#else\n        float scale = 0.125 / (alpha + 0.3);\n#endif\n        uv += scale * normalize(dir);\n        colour = texture(iChannel0, uv);\n    }\n\n    bkg = bkg * (1.0 - colour.a) + colour.rgb * colour.a;\n\n    // Output to screen\n    fragColor = vec4(bkg,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 colour = texture(iChannel0, uv);\n\n    colour.a = texture(iChannel1, uv).a;\n\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    float alpha = smoothstep(0.2, 0.35, col.g - max(col.r, col.b));\n\n    fragColor = vec4(alpha);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}