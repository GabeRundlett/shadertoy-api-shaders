{
    "Shader": {
        "info": {
            "date": "1611009637",
            "description": "Tiling approach",
            "flags": 0,
            "hasliked": 0,
            "id": "XsG3W3",
            "likes": 1,
            "name": "Incredibly inefficient cells",
            "published": 3,
            "tags": [
                "procedural",
                "celllularautomaton"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "#define WIDTH 16\n#define HEIGHT 16\n#define PEN_WIDTH_X 2.\n#define PEN_WIDTH_Y 2.\n\nfloat random (vec2 co) {\n    return fract (sin (dot (co.xy ,vec2 (12.9898,78.233))) * 43758.5453);\n}\n\nstruct World {\n    vec4 cells[WIDTH * HEIGHT];\n    int generation;\n};\n\nvec2 getTileSize () {\n    return vec2 (iResolution.x / float (WIDTH), iResolution.y / float (HEIGHT));\n}\n\nvec2 getTilePosition (vec2 fragCoord) {\n    vec2 size = getTileSize ();\n    return vec2 (floor (fragCoord.x / size.x), floor (fragCoord.y / size.y));\n}\n\nbool isGridLine (vec2 fragCoord) {    \n    vec2 size = getTileSize ();\n    vec2 tile = getTilePosition (fragCoord);    \n    vec2 penWidthHalf = vec2 (PEN_WIDTH_X / 2., PEN_WIDTH_Y / 2.);\n    \n    float leftStart = clamp (size.x * tile.x - penWidthHalf.x, 0., iResolution.x);\n    float leftEnd = size.x * tile.x + penWidthHalf.x;\n    \n    float rightStart = size.x * (tile.x + 1.) - penWidthHalf.x;\n    float rightEnd = clamp (size.x * (tile.x + 1.) + penWidthHalf.x, 0., iResolution.x);\n    \n    float upStart = clamp (size.y * tile.y - penWidthHalf.y, 0., iResolution.y);\n    float upEnd = size.y * tile.y + penWidthHalf.y;\n    \n    float downStart = size.y * (tile.y + 1.) - penWidthHalf.y;\n    float downEnd = clamp (size.y * (tile.y + 1.) + penWidthHalf.y, 0., iResolution.y);\n    \n    \n\treturn (leftStart <= fragCoord.x && fragCoord.x <= leftEnd)\n        || (rightStart <= fragCoord.x && fragCoord.x <= rightEnd)\n        || (upStart <= fragCoord.y && fragCoord.y <= upEnd)\n        || (downStart <= fragCoord.y && fragCoord.y <= downEnd)\n        ;    \n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;;\n    \n\tfragColor = isGridLine (fragCoord) \n        ? vec4 (1, 1, 0.6, 1)\n        : vec4 (0, 0, 0, 0)\n        ;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}