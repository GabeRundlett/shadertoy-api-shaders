{
    "Shader": {
        "info": {
            "date": "1556569893",
            "description": "Without looking at YX's penrose triangle thing (source code), I'm trying to figure out a way to get to a similar result (just not caring much for exact colors or lights). Not quite there yet, but you have to start somewhere :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wtl3DM",
            "likes": 6,
            "name": "trying YX's penrose thing",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "sphere",
                "tracing",
                "penrose"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 838
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Penrose triangle in 3D - Trying to replicate YX's path-traced penrose scene\n// from Revisiono 2019 (executable graphics compo it was I believe).\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nmat2 r2d (float deg)\n{\n    float rad = radians (deg);\n    float c = cos (rad);\n    float s = sin (rad);\n\n\treturn mat2 (c, s, -s, c);\n}\n\nfloat box (vec3 p, vec3 s)\n{\n    return length (max (vec3 (.0), abs (p) - s));\n}\n\nfloat map (vec3 p, out int id)\n{\n    float g = p.y + 2.;\n\n    p.xz *= r2d (180.);\n    p.yz *= r2d (-90.);\n    \n    vec3 boxSize = vec3 (.2);\n    float offset = .41;\n    float b = box (p, boxSize);\n\n\tb = min (b, box (p - vec3 (offset*2., .0, -offset), boxSize));\n\tb = min (b, box (p - vec3 (offset*2., .0, -offset*2.), boxSize));\n\tb = min (b, box (p - vec3 (offset*2., .0, -offset*3.), boxSize));\n\tb = min (b, box (p - vec3 (offset*2., .0, -offset*4.), boxSize));\n    \n    b = min (b, box (p - vec3 (offset*2., .0, .0), boxSize));\n    b = min (b, box (p - vec3 (offset*1., .0, .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*.0, .0, .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*1., .0, .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., .0, .0), boxSize));\n\n    b = min (b, box (p - vec3 (-offset*2., offset*1., .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*2., .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*3., .0), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*4., .0), boxSize));\n\n    b = min (b, box (p - vec3 (-offset*2., offset*4., offset), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*4., offset*2.), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*4., offset*3.), boxSize));\n    b = min (b, box (p - vec3 (-offset*2., offset*4., offset*4.), boxSize));\n\n    float d = min (b, g);\n\n    if (d == g) id = 1;\n    if (d == b) id = 2;\n\n    return d;\n}\n\nfloat march (vec3 ro, vec3 rd, out int id)\n{\n    float t = .0;\n    float d = .0;\n    for (int i = 0; i < 64; ++i) {\n        t = map (ro + d*rd, id);\n        if (abs (t) < .0001*(1. + .125*t)) break;\n\t\td += t*.75;\n    }\n    return d;\n}\n\nvec3 normal (vec3 p)\n{\n    int ignored;\n    float d = map (p, ignored);\n    vec2 e = vec2 (.0001, .0);\n    return normalize (vec3 (map (p + e.xyy, ignored),\n                            map (p + e.yxy, ignored), \n                            map (p + e.yyx, ignored)) - d);\n}\n\nfloat xor (float a, float b)\n{\n    return a*(1. - b) + b*(1. - a);\n}\n\nfloat shadow (vec3 p, vec3 n, vec3 ldir, float ldist)\n{\n    int ignored;\n    float d2w = march (p + .01*n, ldir, ignored);\n    return ldist < d2w ? 1. : .2;\n}\n\nvec3 shade (vec3 rd, vec3 p, vec3 n, int id, vec3 lp, vec3 lc, float li)\n{\n    vec3 mat = vec3 (.0);\n\n    if (id == 1) {\n        float m = smoothstep (.5, .55, .5 + .5*cos (5.*p.x));\n        float n = smoothstep (.5, .55, .5 + .5*cos (5.*p.z));\n        mat = mix (vec3 (.1), vec3 (.9), xor (m, n));\n    }\n\n    if (id == 2) {\n        mat = vec3 (1., .0, .0);\n    }\n\n    vec3 am = vec3 (.05);\n    vec3 ldir = normalize (lp - p);\n    vec3 h = normalize (ldir - rd);\n    float sp = pow (max (.0, dot (n, h)), 80.);\n    float ldist = distance (lp, p);\n    float s = shadow (p, n, ldir, ldist);\n    float att = 7./(ldist*ldist);\n    float diff = max (.0, dot(n, ldir));\n\n    return att*s*(am + diff*li*lc*mat + sp*lc);\n}\n\nvec3 camera (vec2 uv, vec3 ro, vec3 aim, float zoom)\n{\n    vec3 f = normalize (aim - ro);\n    vec3 wu = vec3 (.0, 1., .0);\n    vec3 r = normalize (cross (wu, f));\n    vec3 u = normalize (cross (f, r));\n    vec3 c = ro + f*zoom;\n\n    return normalize (c + uv.x*r + uv.y*u - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3 (20., 21., 20.5);\n    vec3 aim = vec3 (.0);\n    float zoom = 20.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n    int id = 0;\n    float d = march (ro, rd, id);\n    float fog = 1. / exp(1. + d*d*.0025);\n    vec3 p = ro + d*rd;\n    vec3 n = normal (p);\n    \n    vec3 lp1 = vec3 (3., 3., 3.);\n    vec3 lc1 = vec3 (.9, .8, .7);\n    float li1 = 23.;\n\n    vec3 lp2 = vec3 (-2., 3., .5);\n    vec3 lc2 = vec3 (.9, .3, .2);\n    float li2 = 23.;\n\n    vec3 lp3 = vec3 (.0, 3., -2.);\n    vec3 lc3 = vec3 (.2, .4, .9);\n    float li3 = 36.;\n\n    vec3 col = shade (rd, p, n, id, lp1, lc1, li1);\n    col += shade (rd, p, n, id, lp2, lc2, li2);\n    col += shade (rd, p, n, id, lp3, lc3, li3);\n\n    col *= fog;\n    col = col /(1. + col);\n    col = pow (col, vec3 (1./2.2));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}