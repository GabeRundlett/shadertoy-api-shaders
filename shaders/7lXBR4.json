{
    "Shader": {
        "info": {
            "date": "1650569592",
            "description": "Press r to reset\n\nA messy modification of this: https://www.shadertoy.com/view/NtXBRH\n\nTakes a while to fill in + some shapes don't have many regions + black outline on white lines needs fixing",
            "flags": 48,
            "hasliked": 0,
            "id": "7lXBR4",
            "likes": 8,
            "name": "Flood Fill Test",
            "published": 3,
            "tags": [
                "feedback",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(1. * fragCoord), 0 ).rgb;\n    //col += 0.5;\n    //col *= 2.5 * col * col;\n    vec3 e = vec3(0.5);\n    vec3 col2 = pal(0.75 + 0.5 * length(col), col,  min(col,1.-col), e, 2.5 * col);\n    vec3 col3 = pal(-0.25 + 0.5 * length(col), col, min(col,1.-col), e, 0.6 * vec3(1));\n   // col = 1. * mix(col, col2, step(0. * iResolution.x, fragCoord.x));\n    //col = mix(col, col3, step(fragCoord.x, 0.5 * iResolution.x));\n    col = sqrt(col) + 0.05;\n    fragColor.rgb = vec3(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nvec3 max2(vec3 a, vec3 b) {\n    //vec3 j = abs(a-b);\n    //if (dot(b, b) > dot(j,j) && dot(a,a) > dot(j,j))\n    //    return j;\n    if (dot(a,a) > dot(b,b))\n        return a;\n    return b;\n}\n\nvec3 min2(vec3 a, vec3 b) {\n    if (dot(a,a) < dot(b,b))\n        return a;\n    return b;\n}\n\nvec3 Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).rgb;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 squiggle(in vec2 fragCoord )\n{ \n    float a;\n    vec2 p = 0.5 * iResolution.xy;\n       \n    float d = 100.;\n    for (float i = 0.; i < 400.; i++) {\n        float h = h21(vec2(i - iTime, 103. + i));\n\n        a += pi * 0.15 * (floor(5. * h) - 2.);\n        \n        vec2 q = p + 8. * vec2(thc(2., a), ths(2., a));\n\n        d = min(d, seg(fragCoord, p, q));\n        //d = min(d, seg(vec2(-fragCoord.x, fragCoord.y), p, q));\n        \n        p = q;\n    }\n    \n    float k = 0. / iResolution.y;\n    float s = step(d, 3.);//smoothstep(-k, k, -d + 1.);\n    \n    vec3 col = vec3(s);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n    \n    if (iFrame == 0 || key_down(KEY_RESET)) {\n        vec2 f = fragCoord + 0.01 * iTime; \n        float o = 0.01;\n        vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n        float s = step(abs(length(uv)-0.), 0.1);\n        //vec3 col = (vec3(h21(f-o), h21(f), h21(f+o)) - 0.5);\n        vec3 e = vec3(0.5);\n        float h = h21(f + 113.);\n        vec3 col = (pal(10. * h21(f), e, e, e, 1. * vec3(0,1,2)/3.));\n        //if (h < 0.999)\n          //  col = vec3(0);\n        col *= step(length(fract(0.1 * fragCoord)-0.5), 0.1);\n        col += squiggle(fragCoord);\n        col += squiggle(iResolution.xy - fragCoord);\n        col = clamp(col, 0., 1.);\n        \n        if (fragCoord.x < 1. || fragCoord.x > iResolution.x-1. ||\n            fragCoord.y < 1. || fragCoord.y > iResolution.y-1.)\n            col = vec3(1);\n            \n        \n        fragColor.rgb = col;\n        return;\n    }\n    \n    // center cell\n    vec3 e = Cell(px); \n\n    // neighbour cells\n    vec3 t = Cell(px + ivec2(0,-1));\n    vec3 b = Cell(px + ivec2(0,1));\n    vec3 l = Cell(px + ivec2(-1,0));\n    vec3 r = Cell(px + ivec2(1,0));   \n\n    vec3 h = 0.5 * (l+r);\n    vec3 v = 0.5 * (t + b);  \n    vec3 k = max(h,v); // \"average\" of neighbours\n   // vec3 k = 0.5 *(h+v);\n    //k = 0.25 * (l + r + t + b);\n    \n    k = max2( max2(l,r), max2(t,b) );\n    \n    vec3 km = min2(min2(t,b),min2(l,r));\n    \n    // difference between center and average\n    vec3 j = abs(e - k);\n    \n    if (k != vec3(1)) {\n        if (e == vec3(0))\n            e = k;\n        else\n            e = max2(e, k);\n    }\n\n    e = clamp(e, 0., 1.);\n\tfragColor = vec4( e, 0.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Flicker reduction.\n// This CA tends to produce structures that flicker between two states.\n// Code here copies CA output on odd frames and stays unchanged on even.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame % 2 == 1)\n        fragColor.rgb = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    else\n        fragColor.rgb = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.1415926535\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}