{
    "Shader": {
        "info": {
            "date": "1684107576",
            "description": "This is a super sampled version of my previous Smallest Clock shader:\n[url]https://www.shadertoy.com/view/MsdXzH[/url]\nI'm certain fwidth can be used to do the same without super sampling, I just don't know how to do that.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlG3Dw",
            "likes": 6,
            "name": "Super Sampled Clock - 249 chars",
            "published": 3,
            "tags": [
                "2d",
                "clock",
                "short",
                "golf"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// 249 chars - by Fabrice - Using analytic anti-aliasing (with smoothstep & fwidth)\n#define S(v) smoothstep(1.,0., v ) // \n#define N(t) + vec4( S( ( length(u/=.8) - R.y ) / dFdx(u.x) ) \\\n                   * S( (.998 - cos(iDate.w/t-atan(u.x,u.y) ))*length(6.*u)/fwidth(t+u.x) ))\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 R = iResolution.xy;\n         u += u-R;\n         o = N(1e8-12.*)\n             N(573.)\n             N(9.55)\n             N(6875.); \n}\n\n\n// 228 chars - Golfed by Fabrice - will wait for further development before using fwidth\n/*\n#define N(t) +vec4( length(i/=.8) < R.y && cos(iDate.w/t-atan(i.x,i.y)) > .998 )\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o *= 0.;\n    vec2 R = iResolution.xy, i;  \n    for (int k=0; k++<100;    // Super sampling loop\n        o += N(1e9-12.*)      // Clock lines\n             N(9.55)          // Seconds hand\n             N(573.)          // Minutes hand \n             N(6875.))        // Hours hand\n             i = vec2(k%10,k/10)*.1 +u+u-R;  // Offset i by subpixel increments \n    o /= 1e2;                 // Divide by 100 for the average of 100 samples\n}\n*/\n\n// 247 chars - Original shader by Greg Rostami\n/*\n#define N(t) +vec4( length(i/=.8) < R.y && cos(iDate.w/t-atan(i.x,i.y)) > .998 )\n\nvoid mainImage(out vec4 o, vec2 u)\n{\n    o *= 0.;\n    vec2 R = iResolution.xy, i; \n    for (float x=0., y; x<1.; x+=.1) for (y=0.; y<1.; y+=.1)  // Super sampling x,y loops\n        i = vec2(x,y)+u+u-R,  // Offset i by x,y subpixel increments\n        o += N(1e9-12.*)      // Clock lines\n             N(9.55)          // Seconds hand\n             N(573.)          // Minutes hand \n             N(6875.);        // Hours hand\n    o /= 1e2;                 // Divide by 100 for the average of 100 samples\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}