{
    "Shader": {
        "info": {
            "date": "1696533386",
            "description": "A simple noise shader that utilizes derivatives to get consistent line widths and antialiasing",
            "flags": 0,
            "hasliked": 0,
            "id": "mdyyWy",
            "likes": 5,
            "name": "Topographic Map",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 3319
        },
        "renderpass": [
            {
                "code": "#define PERIOD 50.0\n#define PIXEL_THICKNESS 1.0\n#define AA_SCALE 1.0\n\n#define BG_COLOR vec3(0.059,0.082,0.008)\n#define FG_COLOR vec3(0.682,0.969,0.490)\n\n#define smooth(x) (3.0*x*x - 2.0*x*x*x)\n\nmat2 r(float t)\n{\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat perlinNoise(vec2 p, float t)\n{    \n    vec2 tlVal = r(t * hash22(vec2(floor(p.x),  ceil(p.y)) + 20.0).x)*(hash22(vec2(floor(p.x),  ceil(p.y))) - 0.5) * 2.0;\n    vec2 blVal = r(t * hash22(vec2(floor(p.x), floor(p.y)) + 20.0).x)*(hash22(vec2(floor(p.x), floor(p.y))) - 0.5) * 2.0;\n    vec2 trVal = r(t * hash22(vec2( ceil(p.x),  ceil(p.y)) + 20.0).x)*(hash22(vec2( ceil(p.x),  ceil(p.y))) - 0.5) * 2.0;\n    vec2 brVal = r(t * hash22(vec2( ceil(p.x), floor(p.y)) + 20.0).x)*(hash22(vec2( ceil(p.x), floor(p.y))) - 0.5) * 2.0;\n    \n    float tl = dot(p - vec2(floor(p.x),  ceil(p.y)), tlVal);\n    float bl = dot(p - vec2(floor(p.x), floor(p.y)), blVal);\n    float tr = dot(p - vec2( ceil(p.x),  ceil(p.y)), trVal);\n    float br = dot(p - vec2( ceil(p.x), floor(p.y)), brVal);\n    \n    return mix(mix(bl, tl, smooth(fract(p.y))), \n               mix(br, tr, smooth(fract(p.y))),\n                           smooth(fract(p.x)))*0.5 + 0.5;\n}\n\nfloat fbm(vec2 p, float t)\n{\n    float v = 0.0;\n    for(float i = 0.0; i < 4.0; i++)\n    {\n        v += perlinNoise(p * exp(i), t * exp(i)) * exp(-i);\n    }\n    return v * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.y;\n\n    float v = fbm(uv + iTime*0.03, iTime*0.05);\n    float av = abs(sin(v*PERIOD));\n    av = smoothstep(0.0, fwidth(av)*AA_SCALE, av - fwidth(v*PERIOD)*0.5*PIXEL_THICKNESS);\n\n    // Output to screen\n    fragColor = vec4(sqrt(mix(BG_COLOR * BG_COLOR, FG_COLOR * FG_COLOR, 1.0-av)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}