{
    "Shader": {
        "info": {
            "date": "1634660845",
            "description": "2D variant of https://shadertoy.com/view/ssGSDh\nPrinciple:\nWorley-like 2D grid on surface with 1 seed point per cell. \nrotate sur coordinates around it.\nclick: no noise texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsKSWD",
            "likes": 18,
            "name": "swirls on sphere (2D swirl seed)",
            "published": 3,
            "tags": [
                "procedural",
                "swirl",
                "texture",
                "planet",
                "short",
                "loopless",
                "jupiter"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 675
        },
        "renderpass": [
            {
                "code": "// 2D version of https://shadertoy.com/view/ssGSDh\n// operate on a Worley grid on surface instead of Worley grid in volume.\n\n// WIP. Many discontinuities to fix.   \n// See options and coefs.\n\n#define H(p)       fract(sin((p)*mat2(246.1, 113.5, 271.9, 124.6 ))*43758.5453123)\n#define R(p,a)   (p)*mat2( cos(a),-sin(a),sin(a),cos(a) )\n#define hue(v)   ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n\n    O-=O;\n    float r = length(U), y,w=0., l=9., s = 4.;      // s: swirls size\n    int i,k;\n    if ( r > 1. ) return;\n    \n    vec3 p = vec3( U, sqrt(1.-r*r) );          // raytracing point in sphere\n    vec2 P0 = vec2( atan(p.z,p.x) - .1*iTime, atan(p.y,length(p.xz)) ),\n     // TODO: compress lattitudes near pole to get conform cells \n         P = s*P0, I,F, H,D;\n     //  F = abs(fract(P+.5)-.5); y = min(F.x,F.y); O += smoothstep(12./R.y,0.,y); // debug: grid\n         I = floor(P), F = fract(P);           // coords in 2D grid\n    y = P0.y;                                  // latitude ( to tune swirl direction & amplitude )\n    y = 4.*cos(4.*y); \n // if (mod(I.x+I.y,2.)>0.) y=-y;              // if checkered rotation direction\n    P-=P;\n#define dist2seed  \\\n        D = vec2( k%3, k/3 ) -1.;              /* cell offset         */    \\\n        D += H(I+D)-.5;                        /* random seed point   */    \\\n        r = length(F-D);                       /* distance to seed    */\n\n    for ( k = 0; k < 9; k++) {                 // visit neighbor cells to find closest seed point\n        dist2seed;\n     // y = -y;                                // checkered rotation direction\n        F  =   R( F-D, y*smoothstep(.5,0.,r) ) + D; P = F+I;\n     // P  =   R( F-D, y*smoothstep(.5,0.,r) ) + D+I;  I = floor(P),F = fract(P);\n     // P += ( R( F-D, y*smoothstep(.5,0.,r) ) + D+I )/r; w += 1./r;\n        r < l ? l = r, i = k : i;              // keep closest dot \n     }\n    // P /= w;\n/** k = i;\n    dist2seed;\n // if ( i%2 < 1 ) y = -y;                                        // checkered rotation direction\n    P = R( F-D, y * smoothstep(.5,0.,r) ) + D+I;                  // rotate coords around seed point\n/**/       \n // O += vec4(smoothstep(12./R.y,0., l-.2) ); return;             // test: plot seed points\n    \n    U = P/s; U.x -= .1*iTime;                                     // surface coordinates\n    O += ( iMouse.z > 0. ? vec4(.6) \n             : smoothstep(.8,.2, texture(iChannel0, U*vec2(1,3))))// swirled texture\n        * (.5+.5*hue(abs(U.y*2./3.14)))                           // color\n        * ( .3 + 1.2* max(0., dot(p,vec3(1,0,1))));               // shading\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}