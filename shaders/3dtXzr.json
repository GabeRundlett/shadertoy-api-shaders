{
    "Shader": {
        "info": {
            "date": "1571335443",
            "description": "what I did before, but adding camera input",
            "flags": 34,
            "hasliked": 0,
            "id": "3dtXzr",
            "likes": 15,
            "name": "flaky something camera",
            "published": 3,
            "tags": [
                "camera",
                "dither",
                "palette",
                "feedback"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 1150
        },
        "renderpass": [
            {
                "code": "vec3 pal(in float i) {\n    const float twopi = 2.0 * 3.1415926;\n    vec4 p = vec4(3.0, 2.0, 2.0, 3.0);\n    vec4 ph = vec4(0.1, 0.2, 0.3, 0.25);\n    vec4 col = cos(twopi * (i * p + ph));\n    return (col.rgb * 0.4 + 0.6) * abs(col.a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 b = texture(iChannel0, uv);\n    vec4 c = texture(iChannel1, uv);\n    vec3 col = max(c.xyz, pal(length(b.xz)));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 mouseplot(in vec2 uv) {\n    vec2 m = iMouse.xy / iResolution.xy;\n    vec2 a = vec2(sin(iTime * 0.3), cos(iTime * 0.25))\n           * vec2(cos(iTime * 0.2501), -sin(iTime * 0.11111))\n           * 0.35 + 0.5;\n    if (m.x <= 0.05) m = a;\n    m += 0.03 * fuzz(iTime);\n\n    float d = length(uv - m);\n    float alpha = smoothstep(0.005, 0.010, d);\n    return vec4(1.0, 0.0, 1.0, alpha);\n}\n\nvec4 camera(in vec2 uv) {\n    const float e = 0.008;\n    vec3 p = texture(iChannel0, uv).xyz;\n    vec3 r = texture(iChannel0, uv + vec2(e, 0.0)).xyz;\n    vec3 d = texture(iChannel0, uv + vec2(0.0, e)).xyz;\n//    vec3 l = texture(iChannel0, uv + vec2(-e, 0.0)).xyz;\n//    vec3 u = texture(iChannel0, uv + vec2(0.0, -e)).xyz;\n//    r = max(l, r);\n//    d = max(u, d);\n    \n    float th1 = (iTime + 3.2*uv.x) * 1.73, th2 = (iTime + 2.3*uv.y) * 1.231, th3 = iTime * 2.1023;\n    mat3 m = mat3(1.,0.,0.,0.,1.,0.,0.,0.,1.);\n    m *= mat3(cos(th1), sin(th1), 0., -sin(th1), cos(th1), 0., 0., 0., 1.);\n    m *= mat3(1., 0., 0., 0., cos(th2), sin(th2), 0., -sin(th2), cos(th2));\n    m *= mat3(cos(th3), 0., -sin(th3), 0., 1., 0., sin(th3), 0., cos(th3));    \n    \n    p = (p - 0.5) * m + 0.5;\n    r = (r - 0.5) * m + 0.5;\n    d = (d - 0.5) * m + 0.5;\n    p = max(abs(p - r), abs(p - d));\n    p = smoothstep(0.3, 0.4, p);\n    float alpha = 1.0;\n    return vec4(p, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 col = camera(uv);\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 f(in vec2 uv) {\n    const float th = 0.003;\n    const float r = 0.998;\n    float c = cos(th), s = sin(th);\n    uv = (uv - centre) * mat2(c, s, -s, c) * r + centre;\n\n    return uv;\n}\n\nvec2 q(in vec2 uv, in vec2 res, in vec2 seed) {\n    uv *= res;\n#if 1\n    uv += fuzz(seed, iTime);\n#elif 1\n    uv += fuzz(seed, iTime).yx;\n#elif 1\n    vec2 sd = uv;\n    sd = vec2(sd.x + sd.y, sd.x - sd.y);\n    uv += fuzz(sd, iTime);\n#else\n    vec2 sd = fuzz(seed, iTime);\n    sd = vec2(sd.x + sd.y, sd.x - sd.y);\n    uv += sd;\n#endif\n    return (floor(uv) + vec2(0.5)) / res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iChannelResolution[0].xy;\n    vec2 uv2 = uv, uv3 = uv;\n    vec2 resolution = min(iChannelResolution[0].xy, maxres);\n    vec2 seed = floor(uv * resolution + vec2(0.5));\n    uv = f(uv);\n    uv2 = (uv2 - vec2(0.5)) * 0.999 + vec2(0.5);\n    uv3 = vec2(1.,1.) - f(vec2(1.,1.) - uv3);\n    uv = q(uv, resolution, seed);\n    uv2 = q(uv2, resolution, seed);\n    uv3 = q(uv3, resolution, seed);\n    vec4 col;\n    col.x = texture(iChannel0, uv).x;\n    col.y = texture(iChannel0, uv2).y;\n    col.zw = texture(iChannel0, uv3).zw;\n\n    mat4 col_twist = mat4( .99,.01,.00,.00,\n                           .00,.99,.01,.00,\n                           .00,.00,.99,.01,\n                           .01,.00,.00,.99);\n    //col *= col_twist;\n\t// TODO: some kind of dithered blend/twist between components,\n    // not a smooth thing like this, which ruins the pixelley effect.\n    col = max(vec4(0.0), col - fade);\n    vec4 poke = texture(iChannel1, fragCoord / iChannelResolution[0].xy);\n    col = vec4(max(col.xyz, poke.xyz), 1.0);\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec2 maxres = vec2(640.0,360.0);\nconst vec2 centre = vec2(0.35, 0.35);\nconst vec4 fade = vec4(0.002);\n\nfloat random(in float x) {\n    x = log2(abs(x) + 0.000001);\n    x = fract(sin(x) * 21.56789 + cos(x) * 11.98765);\n    return fract(x + 2.0);\n}\n\nfloat random(in float x, in float y) {\n    return random(sin(x * 7.1010101) + cos(y * 9.3131313) + 2.1);\n}\n\nvec2 fuzz(in vec2 seed, in float iTime) {\n    return vec2(random(seed.x, iTime), random(seed.y, iTime));\n}\n\nvec2 fuzz(in float iTime) {\n    return fuzz(vec2(123.,456.), iTime);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}