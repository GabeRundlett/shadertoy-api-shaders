{
    "Shader": {
        "info": {
            "date": "1645969387",
            "description": "messing around, mostly unused code.\n\nusing technique from forked shader, distorted grid with log(distance from torus) basically, can use other shapes and do the same thing, quite fun",
            "flags": 0,
            "hasliked": 0,
            "id": "NsBfWz",
            "likes": 12,
            "name": "torus field lines",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 80\n#define MAX_DIST 50.\n#define SURF_DIST 0.0001\n\n#define pi 3.14159\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n//https://www.shadertoy.com/view/Wl3fD2\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nvec3 getRo() {\n    float t = 0.0 * iTime, o = 2. * pi / 3.;\n    return 3. * vec3(cos(t - o), cos(t), cos(t + o));\n}\n\nvec3 distort(vec3 p) {\n    float o = 2.* pi / 3.;\n    float t = 0. * length(p) - 0.25 * iTime;\n   // p = abs(p) - 0.5;\n    p.xy *= Rot(t - o);\n    p.yz *= Rot(t);\n    p.zx *= Rot(t + o);\n    return p;//fract(0.8 * p) - 0.5;\n}\n\nfloat GetDist(vec3 p) {\n\n    vec3 ro = getRo();\n    float cd = length(p - ro) - 0.;\n\n    p = distort(p);\n    \n    float r1 = 1.2;\n    float r2 = 0.3;\n    float d0 = length(p.xz) - r1;\n    float d1 = length(vec2(d0, p.y)) - r2;\n    //d1 += 0. + 0.2 * cos(d1 * 2. + iTime);\n    p *= 1.8;\n    //p /= cos(length(p) - iTime);\n   \n    p *= log(d1 - 0.);\n\n    vec3 center = floor(p) + 0.5;\n    vec3 neighbour = center + face(p - center);\n    \n    vec3 pos = p - center;\n    vec3 npos = p - neighbour;\n    \n    float h = hash(hash(neighbour.x, neighbour.y), neighbour.z);\n    \n    float o = 2. * pi / 3.;\n    float t = 2. * pi * h + 0. * iTime;\n    vec3 ax = vec3(cos(t - o), cos(t), cos(t + o));\n    ax = normalize(ax);\n    \n   // npos = erot(npos, ax, 0.5 * pi * h);\n    \n   \n    //npos.xy *= Rot(pi * h);\n    float e = 0.1;\n    float worst = sdBox(npos, vec3(0.75)) - 0.;\n    \n    float sq = 0.25 * sqrt(3.);\n   // worst = length(npos) - 0.5;//sq;\n    worst = sdBox(npos, vec3(0.4)) - 0.3798;\n   // worst = min(min(length(npos.xz), length(npos.zy)), length(npos.yx)) - 0.2;\n    \n    float me = sdBox(pos, vec3(0.2)) - 0.;\n    \n    \n    // lower k => more \"fog\"\n    float k = 0.4;\n    float d = worst;//min(me, worst);\n    d = -min(-d, cd);\n    \n    //return length(p) -0.3 + SURF_DIST;\n    return k * d + 0.14;//500. * SURF_DIST;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 ro = getRo();\n\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 0.95);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        vec3 dp = distort(p);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       // col = vec3(step(0., dif));\n        \n        // darken with distance from origin\n        float v = exp(-0.3 * pow(dot(p,p), 0.25));\n        \n        // idk what this does\n        v = smoothstep(0., 1., v);\n        v = clamp(1.2 * v * v, 0., 1.);\n      \n        // color + lighten\n        vec3 e = vec3(1);\n        col = v * pal(0.32 + 1. * v, 0.8 * e, 0.5 * e, 0.5 * e, 0.8 * vec3(0,1,2)/3.);    \n        //col = vec3(v);\n        //col -= 0.1;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}