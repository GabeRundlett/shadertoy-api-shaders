{
    "Shader": {
        "info": {
            "date": "1637413240",
            "description": "Drink the Water",
            "flags": 0,
            "hasliked": 0,
            "id": "ftKGzm",
            "likes": 5,
            "name": "Drink The Water",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "flag",
                "pride"
            ],
            "usePreview": 0,
            "username": "Jabo",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdTriangle( in vec2 p )\n{ \n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0; p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\n// modified https://www.shadertoy.com/view/ldBGDc\nfloat spiral(vec2 m, float t) {\n\tfloat r = pow(length(m) / 0.75, 3.5) * 0.75;\n\tfloat a = atan(m.x, m.y);\n    float v = sin(48.*(sqrt(r)-0.0625*a-.05*t));\n\treturn clamp(v,0.,1.);\n}\n\n// adapted for webgl https://www.ronja-tutorials.com/post/041-hsv-colorspace/#rgb-to-hsv-conversion\nvec3 hue2rgb(float hue) {\n    hue = fract(hue); //only use fractional part of hue, making it loop\n    float r =      abs(hue * 6. - 3.) - 1.; //red\n    float g = 2. - abs(hue * 6. - 2.);    //green\n    float b = 2. - abs(hue * 6. - 4.);  //blue\n    vec3 rgb = vec3(r,g,b); //combine components\n    rgb = clamp(rgb, 0., 1.); //saturate\n    return rgb;\n}\nvec3 hsv2rgb(vec3 hsv)\n{\n    vec3 rgb = hue2rgb(hsv.x); //apply hue\n    rgb = mix(vec3(1.0), rgb, hsv.y); //apply saturation\n    rgb = rgb * hsv.z; //apply value\n    return rgb;\n}\n\nvec3 scene(vec2 fragCoord, float iTime) {\n    vec3 col = vec3(0.5);\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float radius = 0.8 + 0.1*cos(iTime)*cos(0.1*iTime);\n\n\tfloat d = sdCircle(p, radius);\n    \n    // stripes\n    float distortion = 6.0*cos(69.0*d/2.0 + cos(iTime))*clamp(sin(4.+0.09*iTime),0.,1.) * (d + .5) / iResolution.y;\n    float fraction = clamp((1.0 - p.y)/2.0+distortion, 0.01, 1.0);\n    float stripe = clamp(floor(fraction * 6.0) / 6.0, 0.0, 1.0);\n      // upper 3: mix(-0.06, 0.65, stripe)\n      // lower 3: mix(-0.1, 0.91, stripe)\n    float stripeHue1 = stripe < 0.5 ? mix(-0.06, 0.65, stripe) : mix(-0.1, 0.91, stripe);\n    stripe += 1./6.;\n    float stripeHue2 = stripe < 0.5 ? mix(-0.06, 0.65, stripe) : mix(-0.1, 0.91, stripe);\n    float stripeHue = mix(stripeHue1, stripeHue2, smoothstep(stripe - 0.003, stripe + 0.003, fraction - 0.0005));\n    float stripeSaturation = mix(0.95, 0.45, pow(clamp(sin(stripe * 6. + 0.4*iTime),0.,1.),24.)*clamp(2.*sin(5.+ 0.031*iTime),0.,1.));\n    col = hsv2rgb(vec3(clamp(stripeHue,0.001, 0.75), stripeSaturation, 0.95));\n    if(iMouse.z > 0.001) {\n        // old method has no smoothstep to reduce aliasing\n        float stripe = (floor(clamp((1.0 - p.y)/2.0+distortion, 0.01, 1.0) * 6.0) / 6.0);\n      // upper 3: mix(-0.06, 0.65, stripe)\n      // lower 3: mix(-0.1, 0.91, stripe)\n        float stripeHue = stripe < 0.5 ? mix(-0.06, 0.65, stripe) : mix(-0.1, 0.91, stripe);\n        col = hsv2rgb(vec3(clamp(stripeHue,0.001, 0.75), 0.95, 0.95));\n    }\n    \n    // vingette glow\n    col = mix(col, col * 0.95 + 0.2 * exp(-8.0*abs(d)), 0.5 + 0.5*cos(0.7*iTime));\n    // ripples\n\tcol = mix(col, col * cos(69.0*d + 4.2*cos(iTime)), clamp(0.1*cos(3.0+0.05*iTime),0.0,1.0));\n    // spiral\n    if ( d < 0.0 )\n    {\n        vec2 uv = vec2(0.9, 0.5) - fragCoord.xy / iResolution.y;\n        float s = spiral(uv, iTime);\n        s = smoothstep(0.0, 0.05, s);\n        col = vec3(s);\n        // droplet\n        vec2 p2 = p * (0.95 + 0.05 * sin(0.7*iTime));\n        float d2 = min(sdCircle(p2+vec2(0.0,0.1), 0.3), sdTriangle((p2-vec2(0.0,0.2))*3.65)) - 0.01;\n        if (d2 < 0.005 )\n        {\n            col = mix(hsv2rgb(vec3(0.60, 0.95, 0.95)), col, smoothstep(0.0, 0.005, d2));\n            // reflection\n            float d3 = opSmoothSubtraction(\n                sdCircle(p2+vec2(0.2,-0.1), 0.46),\n                sdCircle(p2+vec2(0.0,0.1), 0.24),\n                0.02\n            );\n            d3 *= 1.2;\n            if(d3 < 0.005)\n            {\n                col = mix(vec3(1), col, smoothstep(0.0, 0.005, d3));\n            }\n            \n        }\n    }\n    // outer border\n    col = mix( col, vec3(0.0), 1.0-smoothstep(0.0,0.005, abs(d) - 0.02) );\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float abberation = 0.06*sin(0.033*iTime);\n    vec3 col = vec3(0);\n    // yes temporal chromatic abberation makes no sense, but we don't have to make sense\n\tcol += scene(fragCoord, iTime - abberation) * vec3(.8,.1,.1);\n    col += scene(fragCoord, iTime             ) * vec3(.1,.8,.1);\n    col += scene(fragCoord, iTime + abberation) * vec3(.1,.1,.8);\n\n\tfragColor = vec4(col,1.0);\n}\n\n// c9558532c93019c667e3fc5e14532d21",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}