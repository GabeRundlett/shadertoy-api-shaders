{
    "Shader": {
        "info": {
            "date": "1536862177",
            "description": "End of time by Alcatraz & Altair - bubble scene\nFull intro: http://www.pouet.net/prod.php?which=77102\nintroducing Madtracing [tm]",
            "flags": 96,
            "hasliked": 0,
            "id": "4lGcRV",
            "likes": 24,
            "name": "EOT - bubble scene",
            "published": 3,
            "tags": [
                "intro",
                "4k",
                "refraction",
                "demoscene",
                "pathtracing",
                "madtracer",
                "madtracing"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 1031
        },
        "renderpass": [
            {
                "code": "//------------------------------------------------------------------------\n//  End of time.  A 4k intro by Virgill/Alcatraz & KK/Altair\n//\n//  Full intro: http://www.pouet.net/prod.php?which=77102\n//  Youtube: https://youtu.be/5lR76o9lWB0\n//\n//  Thanks to these ppl for help + inspiration: Slerpy, LJ, Xtr1m, Gopher\n//------------------------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy/iResolution.xy);\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 16097,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/4klang-end-of-time"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//------------------------------------------------------------------------\n//  End of time.  A 4k intro by Virgill/Alcatraz & KK/Altair\n//\n//  Full intro: http://www.pouet.net/prod.php?which=77102\n//  Youtube: https://youtu.be/5lR76o9lWB0\n//\n//  Thanks to these ppl for help + inspiration: Slerpy, LJ, Xtr1m, Gopher\n//------------------------------------------------------------------------\n\n#define refraction\n\nvec3 scol;\n\nvoid dmin(inout vec3 d, float x, float y, float z)\n{\n\tif(x<d.x) d=vec3(x,y,z);\n}\n\n// 3D noise function (IQ, Shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n\tp-=ip;\n\tvec3 s=vec3(7, 157, 113);\n\tvec4 h=vec4(0., s.yz, s.y+s.z)+dot(ip, s);\n\tp=p*p*(3.-2.*p);\n\th=mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n\th.xy=mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// hemisphere hash function based on a hash by Slerpy\nvec3 hashHs(vec3 n, float seed)\n{\n\tfloat a = fract(sin(seed)*43758.5)*2.-1.;\n\tfloat b = 6.283*fract(sin(seed)*41758.5)*2.-1.;\n\tfloat c=sqrt(1.-a*a);\n\tvec3 r=vec3(c*cos(b), a, c*sin(b));\n\treturn r;\n}\n\nfloat box(vec2 p)\n{\n\tp=abs(p); return max(p.x, p.y);\n}\n\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p+sin(a)*vec2(p.y, -p.x);\n}\n\nfloat apollonian(vec3 p, float s)\n{\n\tfloat scale = 1.0;\n\tfor( int i=0; i<3; i++ )\n\t{\n\t\tp = -1.0 + 2.0*fract(0.5*p+0.5);\n\t\tfloat r2 = dot(p, p);\n\t\tfloat k = s/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n\treturn 1.*abs(p.y)/scale;\n}\n\nvec3 map(vec3 p)\n{\n\n\tvec3 q;\n\tvec3 d = vec2(0, 1.).yxx;\n\tdmin(d, length(p+vec3(cos(0.3*iTime),sin(0.3*iTime),2.5+sin(iTime)))-.3, 1., .5); \n    dmin(d, length(p+vec3(cos(0.5*iTime),sin(0.5*iTime),2.5-sin(iTime)))-.3, 1.,-.5); \n  \tp.y+=1.0;\n    dmin(d,apollonian(p,1.76+0.3*sin(0.5*iTime)),0.0,1.);\n\treturn d;\n\n}\n\n\nvec3 normal(vec3 p)\n{\n\tfloat m = map(p).x;\n\tvec2 e = vec2(0,.05);\n\treturn normalize(m-vec3(map(p - e.yxx).x, map(p - e.xyx).x, map(p - e.xxy).x));\n}\n\n\nvoid madtracer(in vec3 ro1, in vec3 rd1, in float seed)\n{\n    bool hit = false;\n\tscol = vec3(0);\t\n\tfloat t = 0., t2 = 0.;\n    #ifdef refraction\n    //t=1.;t2=1.;\n    #endif\n\tvec3 m1, m2, rd2, ro2, nor2;\n\tvec3 roold=ro1;\n\tvec3 rdold=rd1;\n\tm1.x=0.;\n\tfor( int i = 0; i < 140; i++ )\n\t{\n\n\t\tseed = fract(seed+iTime*float(i+1)+.1);\n\t\t#ifndef refraction\n        ro1=mix(roold, hashHs(ro1, seed), 0.002);\t\t\t\t// antialiasing\n        #endif\n \t\trd1=mix(rdold,hashHs(rdold,seed),0.06*m1.x); //removed the clamp\n        m1 = map(ro1+rd1*t);\n\t\tt+=m1.z!=0. ? 0.25*abs(m1.x)+0.0002 : 0.25*m1.x;\n\t\tro2 = ro1 + rd1*t;\n\t\tnor2 = normal(ro2); \t\t\t\t\t\t\t\t\t// normal of new origin\n\t\tseed = fract(seed+iTime*float(i+2)+.1);\n        rd2 = mix(reflect(rd1, nor2), hashHs(nor2, seed), m1.y);// reflect depending on material\n\t\tm2 = map(ro2+rd2*t2);\n        #ifdef refraction\n        if(m1.x<.0002&&hit==false&&m1.y<1.&&m1.z!=0.)\n        {\n            rdold=refract(rdold,nor2,0.86);\n            hit=true;\n            t+=0.5;\n        }\n        #endif\n        t2+=m2.z!=0. ? 0.25*abs(m2.x) : 0.25*m2.x;\n\t\tscol+=.007*(vec3(1.+m2.z, 1., 1.-m2.z)*step(1., m2.y)+vec3(1.+m1.z, 1., 1.-m1.z)*step(1., m1.y));\n\t}\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor=vec4(0.0);\n\t// borders\n\tif( uv.y>.1&&uv.y<0.9 )\n\t{\n\t\tfloat seed = sin(fragCoord.x + fragCoord.y)*sin(fragCoord.x - fragCoord.y);\n\t\tvec3 bufa= texture(iChannel0, uv).xyz;\n\n\t\t// camera\n\t\tvec3 ro, rd;\n\t\tvec2 uv2 = (2.*fragCoord.xy-iResolution.xy)/iResolution.x;\n\t\tro = vec3(0, 0,-5.);\n\t\trd = normalize(vec3(uv2, 1));\n\t\t\n        // rotate scene\n    \tpR(rd.xz,.5*sin(.12*iTime));  \n    \tpR(rd.yz,.5*-sin(.15*iTime));  \n    \tpR(rd.xy,.3*sin(.13*iTime)); \n   \t\t\n        // render    \n\t\tmadtracer(ro, rd, seed);\n\n\t\tfragColor =clamp(vec4(0.6*scol+0.75*bufa, 0.), 0., 1.); // with blur\n\t}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}