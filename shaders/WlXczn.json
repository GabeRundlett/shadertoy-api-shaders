{
    "Shader": {
        "info": {
            "date": "1591211270",
            "description": "Ray marching shader",
            "flags": 0,
            "hasliked": 0,
            "id": "WlXczn",
            "likes": 2,
            "name": "Bubble Chain",
            "published": 3,
            "tags": [
                "bubblechain"
            ],
            "usePreview": 0,
            "username": "yacodes",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0001;\nconst float MAX_DIST = 128.0;\nconst float EPSILON = 0.0001;\n\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\nvec3 opCheapBend(in vec3 p )\n{\n    const float k = -0.50;\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2 m = mat2(c,-s,s,c);\n    vec3 q = vec3(m*p.xy,p.z);\n    return q;\n}\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n\nvec3 opRepLim( in vec3 p, in float c, in vec3 l )\n{\n    vec3 q = p-c*clamp(vec3(c),-l,l);\n    return q;\n}\n\nmat4 rotateX( in float angle ) {\n\treturn mat4(\t1.0,\t\t0,\t\t\t0,\t\t\t0,\n\t\t\t \t\t0, \tcos(angle),\t-sin(angle),\t\t0,\n\t\t\t\t\t0, \tsin(angle),\t cos(angle),\t\t0,\n\t\t\t\t\t0, \t\t\t0,\t\t\t  0, \t\t1);\n}\n\nmat4 rotateY( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t0,\t\tsin(angle),\t0,\n\t\t\t \t\t\t\t0,\t\t1.0,\t\t\t 0,\t0,\n\t\t\t\t\t-sin(angle),\t0,\t\tcos(angle),\t0,\n\t\t\t\t\t\t\t0, \t\t0,\t\t\t\t0,\t1);\n}\n\nmat4 rotateZ( in float angle ) {\n\treturn mat4(\tcos(angle),\t\t-sin(angle),\t0,\t0,\n\t\t\t \t\tsin(angle),\t\tcos(angle),\t\t0,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t1,\t0,\n\t\t\t\t\t\t\t0,\t\t\t\t0,\t\t0,\t1);\n}\n\nvec3 opRep( in vec3 p, in vec3 c) {\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\nvec3 translate(vec3 p, vec3 d) {\n    return p - d;\n}\n\nfloat sceneSDF(vec3 samplePoint) {\n    samplePoint = (rotateY(sin(iTime / 3. + 0.6745)) * vec4(samplePoint, 1.)).xyz;\n\tsamplePoint = (rotateX(sin(iTime / 2.)) * vec4(samplePoint, 1.)).xyz;\n\tsamplePoint = (rotateZ(cos(iTime / 4.)) * vec4(samplePoint, 1.)).xyz;\n    \n    vec3 spherePoint = samplePoint;\n    spherePoint /= 4.;\n    spherePoint = translate(\n        spherePoint,\n        vec3(\n            sin(iTime) * 4.,\n            sin(iTime) * 4.,\n            sin(iTime))\n    );\n    spherePoint = opRep(spherePoint, vec3(4., 8., 0.));\n    \n    spherePoint = (rotateZ(cos(iTime + 0.125)) * vec4(spherePoint, 1.)).xyz;\n    \n    samplePoint = opRep(samplePoint, vec3(2.5, 3.9, 0.));\n    \n    return opSmoothUnion(\n        sphereSDF(spherePoint),\n        sdLink(samplePoint, 0.75, 1., 0.1),\n        5.\n    );\n}\n\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45., iResolution.xy, fragCoord);\n    vec3 eye = vec3(cos(iTime) * 8., sin(iTime) * 4., 40.);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * dir;\n    \n    vec3 K_a = vec3(0.101,0.064,cos(iTime + 0.8565 + p.z) / 2. + 0.5);\n    vec3 K_d = vec3(0.485,cos(iTime + 0.1254 + p.x) / 2. + 0.5,cos(iTime + 0.21312 + p.x) / 2. + 0.5);\n    vec3 K_s = vec3(sin(iTime + 0.1254 + p.x) / 2. + 0.5, 1.0, sin(iTime + 0.1254 + p.x) / 2. + 0.5);\n    float shininess = 1000.;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}