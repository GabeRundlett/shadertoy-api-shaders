{
    "Shader": {
        "info": {
            "date": "1674093820",
            "description": "Volumetric rendering! I probably did a few things (or more?) wrong here and there, but I think they look good. Mouse to look.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlBGDd",
            "likes": 3,
            "name": "Colorful Clouds",
            "published": 3,
            "tags": [
                "volume",
                "clouds",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// Doing this (define below) results in 0 second compile times (versues 5 second)\n// (when I added it I thought that something wasn't working right and that's why I got instant compilation)\n#define LOOP_ZERO float(min(iFrame, 0))\n\n#define FOCAL_LEN 1.5\n\nmat2 rotMat(float r){ return  mat2(cos(r), -sin(r), sin(r), cos(r)); }\n\nvec3 rotX(in vec3 p, float r)\n{\n    p.yz *= rotMat(r); return p;\n}\n\nvec3 rotY(in vec3 p, float r)\n{\n    p.xz *= rotMat(r); return p;\n}\n \nvec3 rotZ(in vec3 p, float r)\n{\n    p.xy *= rotMat(r); return p;\n}\n\nvec3 getVolume(vec3 p)\n{\n    vec3 a = vec3(0);\n    float g = 1.;\n    \n    for(int i = 0; i < 4; i++)\n    {\n        a += texture(iChannel0, rotY(p*0.01, 1.)/g).rgb*g;\n        g *= 0.5;\n    }\n    \n    float m = smoothstep(10., -20., (p.y));\n    vec3 r = pow(a*0.9, vec3(4.*(1.-m)))*m*3.;\n    r = mix(r, vec3(length(r)), 0.5);\n    return r;\n}\n\nvec3 castRay(vec3 ro, vec3 rd, float steps, float dist)\n{\n    vec3 accumulate = vec3(0);\n    vec3 p = ro;\n    float stepSize = dist/steps;\n    for(float i = LOOP_ZERO; i < steps; i++)\n    {\n        vec3 volume = getVolume(p);\n        accumulate += volume*stepSize;\n        p += rd*stepSize;\n    }\n    return accumulate/dist;\n}\n\nvec3 renderVolume(vec3 ro, vec3 rd, vec3 lgt, float primarySteps, float primaryDist, float shadowSteps, float shadowDist)\n{\n    vec3 accumulate = vec3(0);\n    vec3 p = ro;\n    float stepSize = primaryDist/primarySteps;\n    for(float i = LOOP_ZERO; i < primarySteps; i++)\n    {\n        vec3 volume = getVolume(p);\n        float shadow = length(castRay(p, lgt, shadowSteps, shadowDist));\n        accumulate += volume*stepSize/(shadow+1.);\n        p += rd*stepSize;\n    }\n    return accumulate/primaryDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec2 m =  (iMouse.xy-iResolution.xy*0.5)/iResolution.y*step(0.01, iMouse.z);\n\n    vec2 rot = vec2(0, 0)-m.xy*4.;\n    vec3 ro = vec3(0, sin(iTime*0.5)*3., iTime*10.);\n    vec3 rd = rotY(rotX(normalize(vec3(uv, FOCAL_LEN)), rot.y), rot.x);\n    \n    vec3 col = renderVolume(ro, rd, vec3(0, 1, 0), 100., 50., 5., 25.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}