{
    "Shader": {
        "info": {
            "date": "1589754259",
            "description": "domain repetition with a twist: some of the domains are empty!",
            "flags": 0,
            "hasliked": 0,
            "id": "tsjfRw",
            "likes": 59,
            "name": "Jungle Gym",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 1209
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//antialising\n#define AA_SAMPLES 1\n//percentage of domains filled\n#define DENSITY 0.35\n\n//returns a vector pointing in the direction of the closest neighbouring cell\nvec3 quadrant(vec3 p) {\n    vec3 ap = abs(p);\n    if (ap.x >= max(ap.y, ap.z)) return vec3(sign(p.x),0.,0.);\n    if (ap.y >= max(ap.x, ap.z)) return vec3(0.,sign(p.y),0.);\n    if (ap.z >= max(ap.x, ap.y)) return vec3(0.,0.,sign(p.z));\n    return vec3(0);\n}\n\nfloat hash(float a, float b) {\n    return fract(sin(a*1.2664745 + b*.9560333 + 3.) * 14958.5453);\n}\n\nbool domain_enabled(vec3 id) {\n    //repeat random number along z axis so every active cell has at least one active neighbour\n    id.z = floor(id.z/2.); \n    return hash(id.x, hash(id.y, id.z)) < DENSITY;\n}\n\nfloat linedist(vec3 p, vec3 a, vec3 b) {\n    float k = dot(p-a,b-a)/dot(b-a,b-a);\n    return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nfloat ball;\nfloat scene(vec3 p) {\n    float scale = 5.;\n    vec3 id = floor(p/scale);\n    p = (fract(p/scale)-.5)*scale;\n    if (!domain_enabled(id)) {\n        //return distance to sphere in adjacent domain\n        p = abs(p);\n        if (p.x > p.y) p.xy = p.yx;\n        if (p.y > p.z) p.yz = p.zy;\n        if (p.x > p.y) p.xy = p.yx;\n        p.z -= scale;\n        return length(p)-1.;\n    }\n    float dist = length(p)-1.;\n    ball = dist;\n    vec3 quad = quadrant(p);\n    if (domain_enabled(id+quad)) {\n        //add pipe\n        dist = min(dist, linedist(p, vec3(0), quad*scale)-.2);\n    }\n    return dist;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.01);\n    return normalize(scene(p) - vec3( scene(k[0]),scene(k[1]),scene(k[2]) ));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax, p, cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\nfloat smoothstairs(float p, float scale) {\n    p *= scale;\n    p = smoothstep(0.9, 1., fract(p)) + floor(p);\n    return p/scale;\n}\n\nconst float PI = acos(-1.);\nvec3 pixel_color(vec2 uv) {\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\tvec3 cam = normalize(vec3(1,uv));\n    vec3 init = vec3(iTime,0,0);\n\n    float yrot = 0.;\n    float zrot = 0.;\n    if (iMouse.z > 0.) {\n        yrot += smoothstep(-PI/2., PI/2., -4.*mouse.y)*PI-PI/2.;\n        zrot += 4.*mouse.x;\n    } else {\n        yrot += cos(iTime*.2)*.6;\n        zrot += sin(iTime*.2)*.6;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    bool triggered = false;\n    bool outline = false;\n    bool type = false;\n    float dist;\n    //ray marching\n    for (int i = 0; i < 150 && !hit; i++) {\n        dist = scene(p);\n        float outline_radius = 0.1*sqrt(distance(p,init))/3.;\n        if (dist < outline_radius*.9 && !triggered) {\n            triggered = true;\n            type = dist == ball;\n        }\n        if (triggered) {\n            float line = (outline_radius-dist);\n            outline = line < dist || type != (dist == ball);\n\t\t\tdist = min(line, dist);\n        }\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>90.) break;\n    }\n    if (!hit) return vec3(0.4);\n    bool is_ball = dist == ball;\n    vec3 n = norm(p);\n    vec3 r = reflect(cam, n);\n \t\n    //add outline to sharp edges\n    outline = outline || scene(p+n*.1) < 0.09;\n    float fog = smoothstep(80.,60., distance(p,init));\n\n    //shading\n    float ao = smoothstep(.0, .5, scene(p+n*.5));\n    float fact = ao*length(sin(r*vec3(3.,-2.,2.))*.5+.5)/sqrt(3.);\n    float lod = smoothstep(90.,50.,distance(p,init))*5.; //make the shading simpler in the distance\n    fact = smoothstairs(fact, lod)+.1;\n    vec3 ballcol = abs(erot(srgb(0.6,0.7,0.8), normalize(cos(p*.5)), .3));\n    vec3 matcol = is_ball ? ballcol : srgb(0.6,0.65,0.7);\n    vec3 col = matcol*fact + mix(vec3(1), matcol, .4)*pow(fact, 10.)*1.5;\n    col *= smoothstep(0.,.25,abs(dot(cam, n)));\n    col = mix(vec3(.6), outline ? vec3(0.) : col, fog);\n    if (isnan(length(col))) return vec3(.6); //i have no idea where this nan is coming from\n    return col;\n}\n\nvec2 weyl_2d(int n) {\n    return fract(vec2(n*12664745, n*9560333)/exp2(24.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    fragColor = vec4(0);\n    for (int i = 0; i < AA_SAMPLES; i++) {\n        vec2 uv2 = uv + weyl_2d(i)/iResolution.y*1.25;\n        fragColor += vec4(pixel_color(uv2), 1.);\n    }\n\tfragColor.xyz = sqrt(fragColor.xyz/fragColor.w);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}