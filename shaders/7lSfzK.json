{
    "Shader": {
        "info": {
            "date": "1652433091",
            "description": "Iterations / Multi-Tap demo - inspired by @incre_ment's Pillar Wave https://www.shadertoy.com/view/ft2BzG\n(mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "7lSfzK",
            "likes": 14,
            "name": "Iterations / Multi-Tap",
            "published": 3,
            "tags": [
                "iterationsmultitap"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Iterations / Multi-Tap 5/13/22\n    created with love by your friendly @byt3_m3chanic\n    \n    Liked what @incre_ment was working on, so trying a multi-tap example for the domain\n    rep. Also doing some timing functions for the motion based on object ID so each\n    item moves individually. \n\n*/\n\n\n#define R iResolution\n#define T iTime\n#define M iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define MIN_DIST    .0001\n#define MAX_DIST    130.\n\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat lsp(float b, float e, float t) { return clamp((t - b) / (e - b), 0., 1.); }\nfloat eoc(float t) {return (t=t-1.)*t*t+1.;}\n\n//@iq\nfloat box(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.)-.025;\n}\nfloat box( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nconst float size = .75;\nconst float hlf = size/2.;\nconst float dbl = size*2.;\n\nvec3 hit,hitpoint;\nvec2 gid,sid;\nfloat time,tmod,ga1,ga2,ga3,ga4; \n     \nvec2 map(in vec3 p) {\n    vec2 res = vec2(1e5,0.);\n    \n    p.xz-=T*.75;\n    \n    vec2 did = floor((p.xz+10.)/20.);\n    float ds = (did.x+did.y)*10.;\n  \n    \n    tmod = mod(time+ds, 36.);\n    p.xz=mod(p.xz+10.,20.)-10.;\n    \n    float id,d = 1e5;\n    vec3 q;\n\n    for(int i = 0; i<2; i++)\n    {\n        float cnt = i<1 ? size : dbl;\n        q = vec3(p.x-cnt,p.yz);\n        id = floor(q.x/dbl) + .5;\n        q.x -= (id)*dbl;\n        float qf = (id)*dbl + cnt;\n\n        float tf = abs(qf+14.);\n        float t1 =lsp(tf-7.,tf,tmod);\n        float t2= lsp(tf+7.,tf+14.,tmod);\n        ga1 = eoc(t1-t2);\n        ga1 = ga1*ga1;\n        \n        q.zy*=rot(ga1*1.5707);\n        \n        if(qf<8.&&qf>-8.) {\n            d = min(box(q,vec3(.275,2.25,2.25))-.04,d);\n        } else {\n            d = 1.;\n        }\n        \n        if(d<res.x){\n            float tm = floor(qf);\n            res = vec2(d,1.);\n            hit = q;\n            sid = vec2(qf,id);\n        }\n        \n    }\n\n    return res;\n}\n\nvec3 normal(vec3 p, float t) {\n    t*=MIN_DIST;\n    float d = map(p).x;\n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\nvec2 marcher(vec3 ro, vec3 rd, inout vec3 p, int steps) {\n    float d=0.,m=0.;\n    for(int i=0;i<steps;i++){\n        vec2 t = map(p);\n        d += i<32? t.x*.5:t.x;\n        m  = t.y;  \n        p = ro + rd * d;\n        if(abs(t.x)<d*MIN_DIST||d>75.) break;\n    } \n    return vec2(d,m);\n}\n\n\nvec3 FC = vec3(.05);\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    \n    time = T*8.;\n   // tmod = mod(time, 32.);\n\n    // uv ro + rd\n    vec2 uv = (2.* F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(0,0,11);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n    // mouse //\n    float x = M.xy==vec2(0) ? 0. : -(M.y/R.y*.5-.25)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*2.-1.)*PI;\n    \n    mat2 rx =rot(-.5+x); mat2 ry =rot(y);\n    \n    ro.zy*=rx;rd.zy*=rx;\n    ro.xz*=ry;rd.xz*=ry;\n\n    vec3 C=vec3(0);\n\n    vec3 p = ro;\n\n    vec2 ray = marcher(ro,rd,p,128);\n    float d = ray.x;\n    float m = ray.y;\n    float alpha = 1.;\n    \n    hitpoint=hit;\n    gid=sid;\n    \n    if(d<MAX_DIST) {\n        alpha=0.;\n        vec3 n = normal(p,d);\n        vec3 lpos = vec3(.5,11,13.5);\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n\n        float shdw = 1.;\n        for( float t=.01;t<24.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 32.*h/t);\n            t += h * .95;\n            if( shdw<MIN_DIST || t>42. ) break;\n        }\n        diff = mix(diff,diff*shdw,.35);\n\n        float spec = .75 * pow(max(dot(normalize(p-ro),reflect(normalize(lpos),n)),0.),24.);\n\n        C = vec3(.1) * diff + max(spec,-shdw);\n\n    }\n    \n    float px = 5./R.x;\n\n    \n    C = mix(C,FC, 1.-exp(-.00004*d*d*d));\n\n    C = hash21(uv)>.5 ? C-.0095 : C;\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}