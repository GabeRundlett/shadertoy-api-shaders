{
    "Shader": {
        "info": {
            "date": "1534974606",
            "description": "Coded live on twitch stream in Bonzomatic, and ported to shadertoy.\nUnedited Bonzomatic shader here: [url]https://gist.github.com/willkirkby/dcad2f53b0ce381c30513f707786dbb4[/url]\nInspired by [url=http://www.pouet.net/prod.php?which=68375]Elysian[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyyzh",
            "likes": 33,
            "name": "[twitch] Elysian",
            "published": 3,
            "tags": [
                "elysian"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1552
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.)\n\nvec2 modang(vec2 p, float rep)\n{\n  float r = length(p);\n\n  float ang = atan(p.x,p.y) / (2. * pi);\n  ang = (fract(ang*rep)+1.)/rep;\n  ang *= 2.*pi;\n\n  return vec2(sin(ang),cos(ang))*r;\n}\n\nfloat sdBox( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec3 color(vec2 uv)\n{\n  uv = fract(uv);\n  uv = uv * 1.04 - .02;\n  if(any(greaterThan(abs(uv-.5),vec2(.5))))\n    return vec3(0);\n\n  vec2 originalUv = uv;\n\n  uv = fract(uv * 8.);\n  uv = uv * 1.1 - .05;\n  if(any(greaterThan(abs(uv-.5),vec2(.5))))\n    return vec3(0);\n  \n  float d = sdBox(fract(uv*4.)-.5, vec2(.2));\n  float threshold = .04;\n  //threshold = max(length(dFdx(uv)),length(dFdy(uv)));\n  float mask = smoothstep(threshold,-threshold,d);\n  //mix(vec3(66, 244, 226), vec3(65, 68, 244), sin(uv.x+iTime*4.)*.5+.5) / 255;\n  uv = fract(originalUv);\n  uv *= 32.;\n  uv = floor(uv);\n  uv /= 32.;\n  vec3 col = vec3(.03);\n  col += smoothstep(.6,1.,sin(uv.x*20.-iTime*1.5));\n  col += smoothstep(.9,1.,sin(3.*atan(uv.x-.5,uv.y-.5)-iTime*1.5+.5)) * vec3(.2,.6,1);\n  col += smoothstep(.9,1.,sin(3.*atan(uv.x-.5,uv.y-.5)+iTime*1.5+.5)) * vec3(1,.5,.2);\n//mask=1;\n  return vec3(mask) * col;\n}\n\nvec3 pal(vec3 a, vec3 b, vec3 c, vec3 d, float t)\n{\n  return a+b*cos(2.*pi*(c*t+d));\n}\n\nvec3 logichroma(float t)\n{\n  return pal(\n    vec3(.5),\n    vec3(.5),\n    vec3(1.),\n    vec3(0,1,2)/3.,\n    t\n  );\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n  vec2 uv = fragCoord / iResolution.xy - .5;\n  uv.x *= iResolution.x / iResolution.y;\n  uv.y += .07;\n\n  out_color.rgb = color(fragCoord / iResolution.xy);\n  \n  float chromaStrength = sin(iTime*.5);\n\n  out_color.rgb = vec3(0);\n  for(int i=0;i<100;++i)\n  {\n    uv *= mix(1.,.996,chromaStrength);\n    vec2 u = modang(uv, 3.);\n    u = vec2(\n      u.x/u.y,\n      1./u.y\n    ) / sqrt(3.)*.5 + .5;\n    \n    vec3 col = color(u+vec2(0,-iTime*.1));\n    float depthfog = pow(smoothstep(3.,-1.,-u.y),2.);\n    out_color.rgb += col * depthfog * logichroma(float(i)/100.0);\n  }\n  out_color.rgb /= 4.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}