{
    "Shader": {
        "info": {
            "date": "1718606723",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "lX3SzH",
            "likes": 2,
            "name": "spriralus fractal",
            "published": 3,
            "tags": [
                "spiral"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "/*originals from gaz work ,fractal 62 https://www.shadertoy.com/view/DtGyWh*/ \n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(12,43,21))*.5+.5)\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\nfloat fbm(vec2 xy, float time)\n{\n    float sum = 0.0;\n    float div = 0.5;\n    for(int i = 0; i != 16; i++)\n    {\n        sum += noise(vec3(xy, time) / div) * div;\n        div *= 0.5;\n    };\n    return sum;\n}\n\n\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n#define pi acos(-1.)\n#define tau (2.*pi)\n\nfloat star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat sdEquilateralTriangle(  vec2 p, float r ){   \n    r = r*1./3.;\n\tp.y -= r;\n    p.y += r*1.5;\n    float d = dot(vec2(abs(p.x),p.y) - -normalize(vec2(0.,1)*rot(tau/3.))*(r), -normalize(vec2(0.,1)*rot(tau/3.)));\n    d = max(d,p.y - r*2.);\n    d = max(d,-p.y - r);\n    return d;\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n  vec2 uv = (C- 0.5*iResolution.xy)/iResolution.y;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n     vec3 col = vec3(0);\n    \n    float iters = 6.;\n    \n    float d = 10e5;\n    \n    // mafs\n    float s = 1.;\n\n    \n    \n vec2 uv2 = C/iResolution.xy-0.5;\n    \n    uv += vec2(sin(iTime/2.6),cos(iTime/2.))*0.4;    \n    uv *= .03;\n    uv.y -= 0.1;\n    uv.x -= 0.2;\n\n    \n    float id = 0.;\n    vec2 p = uv;\n    float sc = 1.;\n    \n    float palvar = 1.;\n    \n    for(float i = 0.; i < iters; i++){\n        \n        \n        float median = s;\n        float outer = median*2./sqrt(3.);\n\n        vec2 pbtrans = - vec2(0.,sc*median/4.);\n        vec2 pctrans = + vec2(0.,sc*median/4.);\n        vec2 pdtrans = + vec2(0. - sc*outer*.125,sc*median/8.);\n        vec2 petrans = + vec2(0. - sc*outer*.25 , sc*median/(2.+2./3.));\n        vec2 pftrans = + vec2(0. - sc*outer*.25, sc*median/(8.));\n        vec2 pgtrans = + vec2(0. - sc*outer*0.375, sc*median/(2.+2./3.));\n\n\n        float tria = sdEquilateralTriangle( p, s*sc*1.);\n        float trib = sdEquilateralTriangle( p + pbtrans, s*sc/2.);\n        float tric = sdEquilateralTriangle( p + pctrans, s*sc/2.);\n\n        p.x = abs(p.x);\n\n        float trid = sdEquilateralTriangle((p + pdtrans )* rot(1.*pi) , s*sc/4.);\n        float trie = sdEquilateralTriangle((p + petrans )* rot(1.*pi) , s*sc/4.);\n\n        float trif = sdEquilateralTriangle((p + pftrans ), s*sc/4.);\n        float trig = sdEquilateralTriangle((p + pgtrans ) , s*sc/4.);\n\n\n        d = min(d,abs(tria));\n\n        d = min(d,abs(trib));\n        d = min(d,abs(tric));\n        d = min(d,abs(trid));\n        d = min(d,abs(trie));\n        d = min(d,abs(trif));\n        d = min(d,abs(trig));\n\n        if(tria < 0.){\n            if( trib < 0.){\n                p += pbtrans;\n                palvar += 0.4;\n            } else if(tric < 0.){\n                p += pctrans;\n                palvar += 1.4;\n            } else if(trid < 0.){\n                p += pdtrans;\n                palvar += .4;\n            } else if(trie < 0.){\n                p += petrans;\n                palvar += 1.4;\n            } else if(trif < 0.){\n                p += pftrans;\n                palvar += .4;\n            } else if(trig < 0.){\n                p += pgtrans;\n                palvar += 2.4;\n            }\n            if(trid < 0. || trie < 0.){\n                p *= rot(pi);\n            }\n            if(trib < 0. || tric < 0. ){\n                sc *= 0.5;\n            } else {\n                sc *= 0.25;\n            }\n\n        } else {\n        \tbreak;\n        }\n            \n            \n        \n    }\n    \n    \n    #define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n    col = mix(col,pal(0.5,0.56,vec3(3.,0.7,0.2),3.4, palvar + iTime + uv.x*2. + uv.y*2.)/1.,smoothstep(dFdx(uv.x),0.,-d));\n    \n    //col = mix(col,pal(0.5,0.56,vec3(2.,0.7,0.2),1., palvar + iTime + uv.x*2. + uv.y*2.)/1.,smoothstep(dFdx(uv.x),0.,-d));\n    \n    \n    d = abs(d);\n    \n    float w = 1.1;\n    col = mix(col,vec3(0.01),smoothstep(dFdx(uv.x)*w,dFdx(uv.x)*(w-1.)*1.,d));\n    \n    \n    col = pow(col,vec3(0.454545));\n    \n    vec3 n1,q,r=iResolution,\n    \n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n    float a2 = fbm (vec2(22.,522.), 12.)\n    ;\n  \n        n1=g*d2;\n        if (n1.z>10.2){\n     n1.xy*=ma;\n     n1.x+=cos(iTime);\n    n1.y+=sin(iTime);\n     }\n       \n          if (n1.y<1.2){\n     \n     n1.z+=cos(iTime);\n    n1.y+=sin(iTime);\n     }\n       \n     \n        a=20.;\n       n1=mod(n1-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n           n1=.3-abs(n1);\n            \n   \n            n1.z<n1.y?n1=n1.xzy:n1;\n            n1.x<n1.z?n1=n1.zyx:n1;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    5.+sin(iTime*.03+.5*cos(iTime*.03))*3.,\n                    120,\n                    2.+cos(iTime*.05)*5.\n                 );\n         }\n     \n         g+=e=length(n1.yx)/s;\n    }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O*= vec4(star(uv2, anim) * vec3(0.55,0.2,1.15)*0.2, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}