{
    "Shader": {
        "info": {
            "date": "1691170395",
            "description": "base version of flockaroo's https://shadertoy.com/view/mllcDB\nclick to see gradient dithering",
            "flags": 0,
            "hasliked": 0,
            "id": "dtXcWj",
            "likes": 13,
            "name": "blueish bitorderinversion noise2",
            "published": 3,
            "tags": [
                "bluenoise"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "// Fork of \"blueish bitorder inversion noise\" by flockaroo. https://shadertoy.com/view/mllcDB\n// just show the pure noise or gradient dithering.\n\n\n// created by florian berger (flockaroo) - 2023\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// bitorder inversion blue-noise\n//\n// some noise experiments i did some while ago with bitorder-inversion to retrieve some blue-ish noise\n//\n// comparing 3 noises\n// left to right: (none), whitenoise, bitinvnoise, bluenoise\n\nfloat flockaroo_bitinv_noise(ivec2 v) { \n    v &= 255; \n    \n   // for(int b = 15 ; b > 0 ; b -= 2 , v >>= 1 ) \n   //     v |= ( v & 1 ) << b;\n   \n    v = ( v& 0x0F ) << 4  |  ( v & 0xF0 ) >> 4 ;             //  butterfly parallel optimization\n    v = ( v& 0x33 ) << 2  |  ( v & 0xCC ) >> 2 ;\n    v = ( v& 0x55 ) << 1  |  ( v & 0xAA ) >> 1 ;\n\n    return float( (v.x*7+v.y*73) % 255 ) / 254.; \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float PixScale = float( 1 + int(iTime)%3 ); \n         u /= PixScale;\n    vec2 R = iResolution.xy/PixScale,\n         U = u/R;\n         \n    int i = int(4.*U.x);\n    \n    float r = i == 0 ? .5\n            : i == 1 ? textureLod(iChannel0,u/256.,0.).x     // white noise\n            : i == 2 ? flockaroo_bitinv_noise(ivec2(u))      // flockaroo procedural pseudobluenoise\n            :          textureLod(iChannel1,u/1024.,0.).x;   // ref bluenoise\n    \n    O = iMouse.z > 0. ? vec4( i > 0 ? step(1.,r+U.y) : U.y ) // gradient\n                      : vec4( r );                           // noise texture \n   \n    if ( int(u) % int(R/4.) == 0 ) O = vec4(.6,0,0,1);       // separator\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}