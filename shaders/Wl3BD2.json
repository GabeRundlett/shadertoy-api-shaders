{
    "Shader": {
        "info": {
            "date": "1613425218",
            "description": "just an intermediate step that's pretty",
            "flags": 32,
            "hasliked": 0,
            "id": "Wl3BD2",
            "likes": 3,
            "name": "snow day 1",
            "published": 3,
            "tags": [
                "colors"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "// Fork of \"ess de eff runner 1\" by elenzil. https://shadertoy.com/view/3ldyzM\n// 2021-01-02 16:41:48\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n\n    vec3 rgb = texelFetch(iChannel0, IJ, 0).rgb;\n    \n\n    RGBA.rgba = vec4(rgb, 1.0);\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float PI        = 3.14159265259;\nconst float PI2       = (PI * 2.0);\n\nmat2 rot2(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/////////////////////////\n// this buffer is the dynamics, based on the SDF\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nvec3 someColors(in vec2 XY) {\n\n//    return vec3((int(XY.x) / 50) % 2);\n\n    float smallRes = min(iResolution.x, iResolution.y);\n    vec2  p = (XY - iResolution.xy * 0.5) / smallRes * 2.0;\n\n    p *= PI2;\n\n    vec3 rgb;\n\n    p *= rot2(iTime *  0.1);\n    rgb.r = cos(p.x * 1.23) + cos(p.y * 1.04);\n    p *= rot2(iTime * -0.15);\n    rgb.g = cos(p.x * 1.31) + cos(p.y * 1.24);\n    p *= rot2(iTime *  0.1);\n    rgb.b = cos(p.x * 1.21) + sin(p.y * 1.41);\n\n    rgb = rgb * 0.25 + 0.5;\n    \n    rgb *= vec3(sin(length(p) * 1.5) * 0.1 + 0.9);\n\n    return rgb;\n}\n\nfloat meas(in vec3 rgb) {\n    return dot(rgb, rgb);\n}\n\nconst ivec2 iUp = ivec2( 0, 1);\nconst ivec2 iUL = ivec2(-1, 1);\nconst ivec2 iUR = ivec2( 1, 1);\n\nbool amRight(int i) {\n    return bool(i & 0x1);\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    float f = sin(iTime * 0.5) * 0.2 + 0.8;\n    float g = sin((XY.x - iResolution.x * 0.5) * 0.04 * f);\n    bool reset = (iFrame == 0 || iMouse.z > 10.0); \n    if (reset || (XY.y > iResolution.y * 0.75 + g * iResolution.y * 0.1 * f * f * f)) {\n        RGBA = vec4(someColors(XY), 1.0);\n        RGBA.a = g;\n        return;\n    }\n\n    ivec2 IJ = ivec2(XY);\n    RGBA = texelFetch(iChannel0, IJ + iUp, 0);\n    g = RGBA.a;\n    RGBA.rgb *= (g * 0.002 + 0.998);\n\n    if (XY.y > iResolution.y * 0.5 + g * 20.0) {\n        return;\n    }\n\n    int offX = IJ.y & 0x1;\n\n    bool amR = amRight(IJ.x + offX);\n    bool amL = !amR;\n\n    vec4 rgbaOther;\n    if (amR) {\n        rgbaOther = texelFetch(iChannel0, IJ + iUL, 0);\n    }\n    else {\n        rgbaOther = texelFetch(iChannel0, IJ + iUR, 0);\n    }\n\n    for (int n = 0; n < 4; ++n) {\n        float magSqSelf = dot(RGBA     [n], RGBA     [n]);\n        float magSqOthr = dot(rgbaOther[n], rgbaOther[n]);\n\n        if (amL && (magSqOthr < magSqSelf) && (XY.x < iResolution.x  - 1.0)) {\n            RGBA[n] = rgbaOther[n];\n        }\n        else if (amR && (magSqOthr >= magSqSelf) && (XY.x > 0.0)) {\n            RGBA[n] = rgbaOther[n];\n        }\n    }\n\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}