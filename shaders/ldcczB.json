{
    "Shader": {
        "info": {
            "date": "1519374187",
            "description": "Attempt at passable human skin.\n\nThank you Inigo Quilez for Simplex Noise.\n\nhttps://www.shadertoy.com/view/Msf3WH",
            "flags": 0,
            "hasliked": 0,
            "id": "ldcczB",
            "likes": 2,
            "name": "Human Skin",
            "published": 3,
            "tags": [
                "skin",
                "human"
            ],
            "usePreview": 0,
            "username": "kubiak",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Joseph Kubiak\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Uses Inigo Quilez Simpex Noise\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n\n\nfloat subsurface_scale = 1.1;\nfloat subsurface_frequency = 2.2;\n\nfloat skin_scale = 0.5;\nfloat skin_frequency = 20.0;\n\nfloat freck_scale = 0.3;\nfloat freck_frequency = 2.0;\n\nfloat hair_follicle_frequency = 1.20;\nfloat hair_follicle_diameter = 0.0315;\n\nfloat base_skin_amt = 0.83;\n\nvec3 subsurface_color = vec3(0.639, 0.058, 0);\nvec3 surface_col = vec3(1.0, 1.0, 1.0);\nvec3 base_skin_color = vec3(1.0, 0.823, 0.698);\nvec3 freck_col = vec3(0.409, 0.101, 0.108);\n\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nfloat n_noise(in vec2 p)\n{\n    return 0.5 + 0.5 * noise(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float subsurface_radius = subsurface_scale / 2.0;\n    float freck_radius = freck_scale / 2.0;\n    float hair_follicle_position = 1.0 / hair_follicle_frequency;\n    float hair_follicle_radius = hair_follicle_diameter / 2.0;\n    \n    vec2 uv = fragCoord/iResolution.xy *6.0;\n    \n    float subsurface_distance = n_noise(uv * subsurface_frequency);\n    float subsurface = 1.0 - min(1.0, subsurface_distance / subsurface_radius);\n    \n    float skin_value = n_noise(uv * skin_frequency) * skin_scale;\n    \n    float freck_distance = n_noise(uv * freck_frequency); //sqrt(distX*distX + distY*distY);    \n    float freck = 1.0 - min(1.0, freck_distance / freck_radius);\n        \n    float disty = mod(uv.y, hair_follicle_position);\n    float distx = mod(uv.x + (uv.y*hair_follicle_position*2.0), hair_follicle_position );\n    if(distx > hair_follicle_radius)\n        distx = abs(distx - hair_follicle_position);\n    if(disty > hair_follicle_radius)\n        disty = abs(disty - hair_follicle_position);\n    float dist = sqrt(distx*distx + disty*disty) / hair_follicle_radius;\n    float follicle = min(1.0, dist);\n    \n    vec3 col = subsurface_color * subsurface;\n    col = mix(col, base_skin_color, base_skin_amt);    \n    col  = mix(col, surface_col, skin_value);\n    col = mix(col, freck_col, freck);\n    col *= follicle;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}