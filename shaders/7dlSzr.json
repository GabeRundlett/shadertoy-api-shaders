{
    "Shader": {
        "info": {
            "date": "1618243305",
            "description": "it's a clock inspired by the music video of Time by Pink Floyd.\nlink to music video - https://www.youtube.com/watch?v=BJImSd32f3Y&ab_channel=GoodOldMusic",
            "flags": 0,
            "hasliked": 0,
            "id": "7dlSzr",
            "likes": 4,
            "name": "\"Pink Floyd - Time\" like clock",
            "published": 3,
            "tags": [
                "clock",
                "wip"
            ],
            "usePreview": 1,
            "username": "Pelegefen",
            "viewed": 570
        },
        "renderpass": [
            {
                "code": "#define S smoothstep \n#define PI 3.14159265359\n#define TAU 6.283185307179586\n#define RES iResolution.xy\n\nvec3 ShapeN(vec2 st, int N, float w, float h){\n\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n\n  // Remap the space to -1. to 1.\n  st = st *2.-1.;\n  st.x += 1.0 ;\n  st.y += .7;\n  st.y /= h;\n    st.x *= w;\n  // Number of sides of your shape\n  //int N = 3;\n\n  // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TAU/float(N);\n\n  // Shaping function that modulates the distance\n  d = cos(floor(.5+a/r)*r-a)*length(st);\n\n  color = vec3(S(.41,.4,d));\n\n    return color;\n}\nvec2 polarMap(vec2 uv, float shift, float inner) {\n\n    uv = vec2(0.5) - uv;\n    \n    \n    float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;\n    float py = (length(uv) * (1.0 + inner * 2.0) - inner) * 2.0;\n    \n    return vec2(px, py);\n}\nvec2 rot (vec2 p,float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\nfloat circle (vec2 p, float r, float g)\n{\n\n    float d = length(p / r);\n\n    float ss = S(.32,.32 - g,d);\n    \n    ss = max(0.,ss);\n    return ss;\n\n}\nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn S(r, 0.7*r, d);\n}\nfloat segmentT(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A ;\n    float d = length(h - g * clamp(dot(g , h ) / dot(g,g), 0.0, 1.0));\n    \n\n\treturn S(r, 0.7*r, d);\n}\n\n\n\nvec4 Hand(vec2 uv , float l, float w, float t)\n{\n    vec4 col = vec4(0.);\n    \n\n    float h = segmentT(uv,vec2(0,0.),rot(vec2(0.,.8 * l)  ,t * TAU/60.  ) , 1. * RES.y/RES.x * w);\n    \n    uv *= .35;\n    vec4 shape = vec4(ShapeN(rot( uv * 1.5, -t* TAU/60.) , 7,/* Width*/6.,/* Height*/ l - .2),1.);\n    col += shape;\n    col *=  h + shape;\n\n \n    col.a = col.r;// at this point, each of the rgb vals is at 1. and showing the mask, so store it in the A channel.\n    \n    col = max (col,vec4(0.));\n    return col;\n}\n\nvec4 HandsShadow(vec2 uv , float l, float w, float t , float b)\n{\n    vec4 col = vec4(0.);\n    \n    uv.y += .05;\n    uv.x -= .02;\n    float h = segmentT(uv,vec2(0,0.),rot(vec2(0.,.8 * l)  ,t * TAU/60.  ) , w);\n    uv.y += .02;\n    uv *= .45;\n    vec4 shape = vec4(ShapeN(rot( uv * 1.5, -t* TAU/60.) , 7,/* Width*/6. * w,/* Height*/ l - .2),1.);\n    col += shape;\n    col *=  h + shape;\n    \n    \n   \n    \n    \n    col -= length(uv.y) * 2.; // attenuate based on height\n    \n    \n    \n    col = max (col,vec4(0.));\n    return col * .1;\n}\nvec4 Dial(vec2 uv, float m)\n{\n    \n    vec4 col = vec4(0.);\n    vec2 fuv = polarMap(uv + .5, .008 , .0) * .5;\n    \n    \n    fuv.x = fract(fuv.x * 8. ) ;\n    col += vec4(ShapeN(fuv+vec2(0.,-.6) ,4  ,  3.15, 0.8 ),0.7) * .5;\n    \n    \n    uv = polarMap(uv + .5, .0035 , .25) * .5;\n    \n    uv.x = fract(uv.x * 24. * m ) ;\n\n    vec2 id = floor(uv * 24.  );\n\n    if(id.x <=  1.6 && id.y >= 18. && id.y <= 26.)return col = vec4(.35);\n\n    col = clamp(col,0.,1.);\n    return col;\n}\n\n\n//returns a working clock\nvec4 ClockFace(vec2 uv){\n\n    vec4 col = vec4(0.,0.,0.,1.);\n    \n    vec4 wt = vec4(.8,.7,0.,1.);// sample wood tex\n    \n    wt += S(-.7,.1,-abs(uv.y)); // add shine\n    \n    float f = circle(uv,4.3, .001 );//clocks frame\n    float fm = (1. - (circle(uv,4.3, .055 ) )) * .6;//clocks frame bevel\n    f -= fm;\n    col += f;\n    col -= circle(uv,3.8, .001 ) - circle(uv,3.7, .001 );//clocks frame\n    col = mix(col,  wt ,  col - circle(uv,3.7, .001 )); // apply wood tex\n\n    //Decoration at 12 o'clock\n    col += circle(uv + vec2(0.,-1.03),0.3, .001 ) * 0.5;\n    col -= circle(uv + vec2(0.,-1.03),0.25, .001 ) * 0.5;\n   // col += circle(uv + vec2(0.,-1.0),0.3, .5 );\n    col -= vec4(ShapeN(uv+vec2(0.,-.5) ,5  ,  5.15, 1.15 ),0.7) * .3;\n    col += circle(   uv + vec2(0.,-.8) ,0.1, .1 );\n    \n    \n    \n    \n    col -= (circle(uv,3.6, .001 ) * .18) + (-uv.y * .1); //inset and shading\n    \n    // Shadow\n    float d = length(uv + vec2(0.,0.1 ))* 0.88;\n    float m = 1. - circle(uv,4.3,.0001);\n  \n    \n     //add the dial and decoration\n    col -= Dial(uv/1.3, 1.);\n    \n    //---------- time is set here------------\n\n    vec4 iDate = iDate;\n    float mils = fract(iDate.w);\n\tfloat secs = mod( (iDate.w),        60.0 );\n\tfloat mins = mod( (iDate.w/60.0),   60.0 );\n\tfloat hors = mod( (iDate.w/3600.0), 24.0 );\n\n\n    vec4 ch1 = Hand(uv, 0.9,0.9, hors  * TAU * .8 );//hours hand\n    \n    ch1 = clamp(ch1,0.,1.);\n    col -= ch1;\n    vec4 ch1s = HandsShadow(uv , 1.,.9, hors  * TAU * .8 , .5);\n    col -= ch1s;\n\n    vec4 ch2 = Hand(uv , 1.6,0.5, mins);//minutes hand\n\n    ch2 = clamp(ch2,0.,1.);\n    col -= ch2;\n    vec4 ch2s = HandsShadow(uv , 1.7,.7, mins , .5);\n    col -= ch2s;\n\n    //vec4 ch3 = Hand(uv ,  2.0, .07 ,secs ); //secondes hand\n    vec4 ch3 = vec4(segmentT(uv,vec2(0,0.),rot(vec2(0.,1.0)  ,secs * TAU/60.  ) , \n    1. * RES.y/RES.x * .05 ));\n   // vec4 ch3m = Hand(uv , 1.1, .05 ,secs ); //secondes hand m\n    //ch3 -= ch3m;\n    \n\n    ch3 = clamp(ch3,0.,1.);\n    col -= ch3;\n    vec4 ch3s = vec4(segmentT(uv,vec2(0,-0.02),rot(vec2(0.1* uv.y ,  1. - uv.y * .1)  ,secs * TAU/60.  ) , \n    1. * RES.y/RES.x * .05 )) * .1;\n    col -= ch3s;\n    \n    vec4 hCol = vec4(0.4,0.4,0.4,1.);// clock hand clr\n    \n    float sh = -   dot(-uv.x * .5,.5) + dot(-uv.y * .5,.5) + .8 ;// clock hands shading\n    \n    \n    vec4 tex1 =hCol / sh;// texture(iChannel0,(rot( uv * 2., -secs* TAU/60.)));\n    vec4 tex2 =hCol/ sh;// texture(iChannel0,(rot( uv * 2., -mins* TAU/60.)));\n    vec4 tex3 =hCol/ sh;// texture(iChannel0,(rot( uv * 2., -hors* TAU/60.)));// we also have to spin the texture per hand!\n  \n    col = mix (col, ch1 * tex3  , ch1) ;\n    col = mix (col,ch2 * tex2 ,ch2 ) ;\n    col = mix (col,ch3 * tex1 ,ch3 ) ;\n    \n    \n    //------------End of Time setting-----------------  \n   \n    float cc =  circle(uv,0.3, .001 ) ;//clocks hand cover\n    cc = ceil(cc);\n    \n    cc = max(cc,0.);\n    cc = min(cc,1.);\n    \n    col =  mix(vec4(cc * .3) , col,1. -cc);\n    col += vec4(circle(uv,0.3, .2 ) * .3) *(fract( uv.y* 50. - .1)  ) ; // dot on the clock hand cover\n    \n    col -= circle(uv,3.7, .001 ) * .18;// glass cover\n    col += max((circle(uv,3.9, .05 ) * .3 * uv.y),0.);\n     m = 1. - circle(uv,4.3,.001);\n    col.a =  1.- m;\n    col = col - m;\n    col = max(vec4(0.),col);\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy -.5* iResolution.xy)/iResolution.y;\n    vec2 ouv = uv;\n    \n    vec4 col = vec4(0.0);\n    \n    //-----BG--------\n    vec4 bg = texture(iChannel0,uv);\n    bg *= .2;\n    bg -= fract(uv.y * 5. ) * .1;\n    bg += fract(uv.y * 5. ) * .2;\n    \n    float m = bg.r;\n    bg += m;\n    col += bg;\n    //------end of BG-----\n     uv *= 3.;\n    \n     col -= max( 1. - length((uv + vec2(.0,.1))* .63), 0.) ;\n    vec4 cf = ClockFace(uv);\n    col = mix(col,cf,cf.a);\n    \n    //if (ouv.x >= -0.01 && ouv.x <= .01) col -= vec4(1.,0.,0.,1.);\n\n  \n\n     \n     \n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}