{
    "Shader": {
        "info": {
            "date": "1386343190",
            "description": "- stromgren sphere with radius noise\n- Key D : debug display : density ->red and integral(dist^2*density^2)  -> green, NoiseRadius -> blue\n- Key E : extinction\n- Key Z : go inside the nebula\n",
            "flags": 16,
            "hasliked": 0,
            "id": "Md2GWR",
            "likes": 17,
            "name": "HII region with spherical noise",
            "published": 3,
            "tags": [
                "noise",
                "sphere",
                "stromgren"
            ],
            "usePreview": 0,
            "username": "Mikael",
            "viewed": 1092
        },
        "renderpass": [
            {
                "code": "// Mikael Lemercier, December, 2013\n\n#define PI 3.14159\n#define CAMERA_DIST 4.\n#define SENSOR_PIXELSIZE_ON_DIST 1.23698021e-10 //(atan(164.f/60.f/60.f/360.f*2.f*3.14159265f/2.f)*2.f/4096.f)^2; //pixelSurface/dist constant for WFC3 (fov: 164 arcsec,res:4096)\n#define SENSOR_PIXELSURFACE_ON_DIST_2 (SENSOR_PIXELSIZE_ON_DIST*SENSOR_PIXELSIZE_ON_DIST)\n\n\n#define DENSITY_CONSTANT 1.e8*2.4720166521504238153e-8 // 1.e8 nH/meter^3 To MSol/pc^3   //1.e8* (3.08567758e16)^3 / 1.18850289268099721906e57\n#define HALPHA_RECOMB_COEF_BY_PHOTON_ENERGY 1.71711837e27 // pc^2.s^-1.Msol^-2.J at 10000K //1.18e-19*(1.18850289268099721906e57)^2/(3.08567758e16)^3*3.0267e-19\n#define RECOMBINATION_VALUE 8.275824821 // S/(4PI*B) at 10000K  // 1e48/1.18850289268099721906e57 / (4*pi*2e-16*1.18850289268099721906e57/(3.08567758e16)^3*(1e4)^(-3/4))\n\n#define EXP_DENSITY 1\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define FULL_PROCEDURAL\n#ifdef FULL_PROCEDURAL\n\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n#else\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#endif\n\n#define mynoise(q) (1.-abs(2.*noise(q)-1.))\n\nfloat fbm( in vec3 q )\n{\n\tfloat f;\n    f  = 0.5000*mynoise( q ); q = q*2.02;\n    f += 0.2500*mynoise( q ); q = q*2.03;\n    f += 0.1250*mynoise( q ); q = q*2.01;\n    f += 0.0625*mynoise( q ); \n\treturn f;\n}\n// --- End of: Created by inigo quilez --------------------\n\nbool key_toggle(float ascii) { \n\treturn (texture(iChannel1,vec2((ascii+.5)/256.,0.75)).x > 0.); \n}\n\n// shape\nvec4 map( in vec3 p )\n{\n\tfloat r = length(p);\n\t\n\t// radius r0 determined by noise function\n\tvec3 dir = vec3(0.,0.,1.);\n    if ( r > 0.)\n    {\n        dir = p/r;\n    }\n\tfloat r0 = 1.-pow(fbm(dir),4.);//0.17;//\n\n\tfloat n0 = 0.3;//ionized region density\n\tvec4 res;\n#if EXP_DENSITY\n\tfloat k0 = 1.;//front exponential factor\n\tfloat frontDensity = exp(k0*max((r-r0),0.))-1.;\n\tres.x = (n0+frontDensity)*DENSITY_CONSTANT;// density function\n\tfloat r_2 = r*r;\n\tfloat r_3 = r_2*r;\n\tfloat k0_2 = k0*k0;\n\tfloat k0_3 = k0_2*k0;\n\tfloat r0_2 = r0*r0;\n\tfloat r0_3 = r0_2*r0;\n\tfloat n0_2 = n0*n0;\n\tres.y = DENSITY_CONSTANT*DENSITY_CONSTANT*(n0_2*r0_3/3. + (((24.*k0_2*n0-24.*k0_2)*r_2+(48.*k0-48.*k0*n0)*r+48.*n0-48.)*exp(k0*r-k0*r0)+(6.*k0_2*r_2-6.*k0*r+3.)*exp(2.*k0*r-2.*k0*r0)+(4.*k0_3*n0_2-8.*k0_3*n0+4.*k0_3)*r_3)/(12.*k0_3)-((4.*k0_3*n0_2-8.*k0_3*n0+4.*k0_3)*r0_3+(24.*k0_2*n0-18.*k0_2)*r0_2+(42.*k0-48.*k0*n0)*r0+48.*n0-45.)/(12.*k0_3) );\n#else\n\tfloat frontDensity = max((r-r0),0.);\n\tres.x = (n0+frontDensity*frontDensity)*DENSITY_CONSTANT;// density function\n\tfloat r_2 = r*r;\n\tfloat r_3 = r_2*r;\n\tfloat r_4 = r_3*r;\n\tfloat r_5 = r_4*r;\n\tfloat r_6 = r_5*r;\n\tfloat r_7 = r_6*r;\n\tfloat r0_2 = r0*r0;\n\tfloat r0_3 = r0_2*r0;\n\tfloat r0_4 = r0_3*r0;\n\tfloat r0_5 = r0_4*r0;\n\tfloat r0_7 = r0_5*r0_2;\n\tfloat n0_2 = n0*n0;\n\tres.y = DENSITY_CONSTANT*DENSITY_CONSTANT*(n0_2*r0_3/3. - (r0_7+7.*n0*r0_5-35.*r_3*r0_4+(105.*r_4+35.*n0_2)*r0_3+(-126.*r_5-70.*n0*r_3)*r0_2+(70.*r_6+105.*n0*r_4)*r0-15.*r_7-42.*n0*r_5-35.*n0_2*r_3)/105.);\n#endif\n\n\n\t//integrale(x^2*density(x)^2,x,0,r)\n\t\n#if EXP_DENSITY\n\t\n#else\n\t\n#endif\n\t\n\tres.z = r0;\n\t\n\treturn res;\n}\n\n\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\n\tfloat stromgrenSphereRecombinationValue = RECOMBINATION_VALUE;//0.3*DENSITY_CONSTANT*DENSITY_CONSTANT;\n\tif (key_toggle(65.))//animate ionizing photon rate (star type)\n\t{\n\t\tstromgrenSphereRecombinationValue *= 10.*pow(mod(iTime,10.)/10.,3.);\n\t}\n\t\n\tconst int stepCount = 256;\n\tfloat rayLength = 6.;\n\tfloat stepSize = rayLength/float(stepCount);\n\tfloat t = max(length(ro)-3.,stepSize);\n\tfor(int i=0; i<stepCount; i++)\n\t{\n\t\tfloat sampledVolumeOnDist2 = stepSize*SENSOR_PIXELSURFACE_ON_DIST_2;\n\n\t\tvec3 pos = ro + t*rd;\n\t\t\n\t\tif ( pos.z < 1.)//hole in the wall\n\t\t{\n\t\t\tvec4 noise = map( pos ); // .w = density\n\t\t\t\n\t\t\tfloat density = noise.x;\n\t\t\tfloat currentRecombinationValue = noise.y;\t\t//integrale((density^2*r^2)\n\t\t\t\n\t\t\tfloat flux = 4.0e-8*density*density*HALPHA_RECOMB_COEF_BY_PHOTON_ENERGY*sampledVolumeOnDist2/(4.0*PI);\n\t\t\tvec4 col = flux*(step(currentRecombinationValue,stromgrenSphereRecombinationValue)*vec4(0.0,0.7,0.0,0.0) \n\t\t\t\t\t\t\t + step(currentRecombinationValue,stromgrenSphereRecombinationValue*0.5)*vec4(0.0,0.0,1.0,0.0)\n\t\t\t\t\t\t\t + step(currentRecombinationValue,stromgrenSphereRecombinationValue*1.3)*step(stromgrenSphereRecombinationValue*0.7,currentRecombinationValue)*vec4(1.0,0.0,0.0,0.0));\n\t\t\t\n\t\t\tif (key_toggle(69.))//extinction\n\t\t\t{\n\t\t\t\tcol.a = 1.-exp(-7.75*stepSize*density*step(stromgrenSphereRecombinationValue*1.3,currentRecombinationValue)*step(currentRecombinationValue,stromgrenSphereRecombinationValue*2.5));\n\t\t\t}\n\t\t\t\n\t\t\tsum = sum + col*(1.0 - sum.a);//*step(length(pos),2.5);\n\n\t\t}\n\t\t\t\n\t\tt += stepSize;\n\t}\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\t//camera\n\tfloat theta = (iMouse.x / iResolution.x *2. - 1.)*PI;\n    float phi = (iMouse.y / iResolution.y - .5)*PI;\n\tvec3 cameraPos = CAMERA_DIST*vec3(sin(theta)*cos(phi),sin(phi),cos(theta)*cos(phi));\n\tif (key_toggle(90.))//go inside the nebula\n\t{\n\t\tfloat x = 1.-fract(iTime*0.05);\n\t\tcameraPos *= x*x*3.;\n\t}\n\t\t\n    //vec3 cameraPos = vec3(0.0,0.0,4.0);      \n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize( cameraPos - cameraTarget );\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec3 cameraDir = normalize( p.x*uu + p.y*vv - 1.5*ww );\n\t\n\tif (key_toggle(68.))//debug display : density ->red and integral(dist^2*density)  -> green\n\t{\n\t\tvec3 posDir = normalize(vec3(cos(iTime*0.1),sin(iTime*0.1),0.));\n\t\tfloat posDist = q.x*10.0;\n\t\tvec3 pos = posDist*posDir;\n\t\tfloat noise = 1.0-step(map( pos ).x,q.y*2.0/(iResolution.x/ iResolution.y));//density\n\t\tfloat noise2r2Integral = 1.0-step(map( pos ).y,q.y*80.0/(iResolution.x/ iResolution.y));//integrale((density^2*r^2)\n\t\tfloat radius = step(posDist,map( pos ).z);\n\t\tfragColor = vec4(noise,noise2r2Integral,radius,1.0);\n\t\t\n\t\tvec3 dir = normalize(vec3(cos(q.x*2.*PI),sin(q.x*2.*PI),0.));\n\t\tfloat radiusNoise = 1.0-step(map(dir).z,q.y*2.0/(iResolution.x/ iResolution.y));//integrale((density^2*r^2)\n\t\tfragColor = vec4(radiusNoise,0.,0.,1.0);\n\t}\n\telse\n\t{\n\t\tvec4 col = raymarch( cameraPos, cameraDir );\n\t\t//col = col + vec4(1.0,0.,1.,1.)*(1.0 - col.a);\n\t\tfragColor = col;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}