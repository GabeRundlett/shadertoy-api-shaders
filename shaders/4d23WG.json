{
    "Shader": {
        "info": {
            "date": "1392934759",
            "description": "Minimal code showing orbit trapping (line 25) for coloring fractals (and other dynamic systems)",
            "flags": 0,
            "hasliked": 0,
            "id": "4d23WG",
            "likes": 37,
            "name": "Julia - Traps 1",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia",
                "juliaset",
                "orbittrap",
                "traps",
                "orbittraps"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3204
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Julia - Traps 1 : https://www.shadertoy.com/view/4d23WG\n// Julia - Traps 2 : https://www.shadertoy.com/view/4dfGRn\n\n// line 16: pixel coordinates\t\n// line 18: c travels around the main cardiod c(t) = (1/2)e^it - (1/4)e^i2t\n// line 24: z = zÂ² + c\t\t\n// line 25: trap orbit\n// line 28: remap\t\n// line 30: color\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 z = 1.15*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\tvec2 c = 0.51*cos(vec2(0,699)+0.1*iTime) - \n             0.25*cos(vec2(0,699)+0.2*iTime );\n\n\tfloat f = 1e20;\n\tfor( int i=0; i<128; i++ ) \n\t{\n\t\tz = vec2( z.x*z.x-z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\tf = min( f, dot(z,z) );\n\t}\n\t\n    f = 1.0+log2(f)/16.0;\n\n\tfragColor = vec4(f,f*f,f*f*f,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}