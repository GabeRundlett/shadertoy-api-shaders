{
    "Shader": {
        "info": {
            "date": "1517881957",
            "description": "Looks kinda like Rick's inter-dimensional portals.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dcyzH",
            "likes": 4,
            "name": "Portal to another dimension",
            "published": 3,
            "tags": [
                "portal"
            ],
            "usePreview": 0,
            "username": "teaearlgraycold",
            "viewed": 1000
        },
        "renderpass": [
            {
                "code": "const float PI = 3.1415926535;\nconst float TAU = 2.0 * PI;\n\nfloat snoise(vec2 v);\nvec3 hsv2rgb(vec3 c);\nmat2 rotate(float t);\n\nvec4 draw_texture(vec2 pos) {\n    float wobbly_edge = snoise(pos * 10.0) * 0.03;\n    float value = length(pos) > (0.43 + wobbly_edge) ? 0.0 : 0.7;\n    float hue = length(pos);\n    return vec4(hsv2rgb(vec3(hue, 0.62, value)), 1.0);\n}\n\nvec4 draw_circle(vec2 pos, float radius, float rotate_angle) {\n    pos = rotate(rotate_angle) * pos;\n    float angle = atan(pos.y, pos.x);\n    float wobbly_edge = snoise(pos * 15.1) * 0.03;\n\n    if (length(pos) < (radius + wobbly_edge)) {\n        return vec4(0.0, 0.0, 0.0, 0.32);\n    } else {\n        return draw_texture(pos);\n    }\n}\n\nvec4 draw(vec2 pos) {\n    vec4 color = vec4(vec3(1.0), 0.0);\n    float t = iTime * 0.75;\n    float num_circles = 6.0;\n\n    for (float i = 0.0; i < num_circles; ++i) {\n        // Wiggle the circles around\n        float offset_size = (num_circles - (i + 1.0)) * 0.0125;\n        float angle = offset_size * PI / 32.0;\n        vec2 offset = vec2(cos(t + angle), sin(t + angle)) * vec2(offset_size);\n        // Circle size\n        float radius = i * 0.04 + 0.15;\n\n        // Rotate each circle in turn\n        // Get a float value from 0..num_circles (don't rotate the last circle)\n        float circle_to_rotate = mod(t / PI, num_circles - 1.0);\n        // Get the fractional component of the value\n        float rotate_index = mod(circle_to_rotate, 1.0) * TAU;\n        // How much to rotate if this is the circle to rotate\n        float rotate_amount = (sin(rotate_index + 3.0 * PI / 2.0) + 1.0) / 2.0 * PI;\n        // Actual rotation amount (0.0 if not rotating)\n        float rotate_angle = floor(circle_to_rotate) == i ? rotate_amount : 0.0;\n\n        // Location on the buffer\n        vec2 st = vec2(-0.4, 0.0) + offset + pos / iResolution.xy * vec2(iResolution.x / iResolution.y, 1.0);\n        vec2 pos = vec2(0.5) - st;\n\n        // Draw the sample\n        vec4 circle = draw_circle(pos, radius, rotate_angle);\n        color = mix(color, circle, circle.a);\n    }\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = draw(fragCoord);\n}\n\n\nmat2 rotate(float t) {\n    return mat2(\n        cos(t), -sin(t),\n        sin(t),  cos(t)\n    );\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Noise shit\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(\n         0.211324865405187, // (3.0-sqrt(3.0))/6.0\n         0.366025403784439, // 0.5*(sqrt(3.0)-1.0)\n        -0.577350269189626, // -1.0 + 2.0 * C.x\n         0.024390243902439  // 1.0 / 41.0\n    );\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m * m * m * m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}