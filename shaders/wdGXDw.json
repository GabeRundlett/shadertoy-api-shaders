{
    "Shader": {
        "info": {
            "date": "1574160705",
            "description": "Wobbly blob in a (pseudo-)Nabatean treasury, with some dynamic trompe-l'oeil (mousing recommended)",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGXDw",
            "likes": 12,
            "name": "Desert Postcard",
            "published": 3,
            "tags": [
                "illusion",
                "surface",
                "architecture",
                "sand"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// \"Desert Postcard\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 bSize, sunDir, vnBlk;\nvec2 blbRad;\nfloat tCur, dstFar;\nint idObj;\nbool isSh;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 SMap (vec3 p, float t)\n{\n  float f;\n  f = 2.;\n  for (int k = 0; k < 5; k ++) {\n    p += 0.4 * sin (1.7 * p.yzx / f + f * t);\n    f *= 0.8;\n  }\n  return p;\n}\n\nfloat BlobDf (vec3 p)\n{\n  vec3 q;\n  float d, t;\n  t = tCur + 1.31;\n  q = p;\n  q.xz = Rot2D (q.xz, 0.2 * t);\n  d = SmoothMin (PrBoxDf (SMap (q - vec3 (0.7, -0.3, 0.), t + 2.), vec3 (blbRad.x)),\n     PrBoxDf (SMap (q - vec3 (-0.7, -0.3, 0.), 1.3 * t), vec3 (blbRad.y)), 0.2);\n  q = p;\n  q.y -= -2.6;\n  d = SmoothMin (d, PrCylDf (q.xzy, 2.7, 0.2), 0.5);\n  return d * (isSh ? 1. : 0.25);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 cs, b, s;\n  float dMin, d, g, w;\n  dMin = dstFar;\n  cs = sin (pi / 8. + vec2 (0., 0.5 * pi));\n  w = 0.06;\n  q = p;\n  q.y -= 7.3;\n  g = dot (vec2 (abs (q.x), q.y), cs);\n  d = min (max (min (abs (g) - w, 0.), - q.y - 1.5),\n     max (min (abs (q.y + 1.525) - w, 0.), g - w));\n  q.y -= -0.25;\n  g = dot (vec2 (abs (q.x), q.y), cs);\n  d = min (d, min (max (min (abs (g) - w, 0.), - q.y - 1.),\n     max (min (abs (q.y + 1.025) - w, 0.), g - w)));\n  b = vec2 (4., 2.5);\n  q = p;\n  q.y -= 3.;\n  s = abs (q.xy) - b;\n  d = min (d, min (max  (min (s.y - w, 0.), min (abs (s.x) - w, 0.)),\n     max  (min (s.x - w, 0.), min (abs (s.y) - w, 0.))));\n  q = p;\n  q.yz -= vec2 (4., bSize.z);\n  d = max (PrBoxDf (q - vec3 (0., 0., -0.2), bSize), - d);\n  q.y -= -1.;\n  d = max (d, - PrBox2Df (q.xy, b - 3. * w));\n  q.y -= -2.3;\n  d = max (d, - PrCylDf (q.xzy, 2.7, 0.1));\n  DMIN (1);\n  q = p;\n  q.y -= 4.;\n  d = PrBoxDf (q, vec3 (bSize.xy - 0.05, 0.1));\n  q.y -= -1.;\n  d = max (d, - PrBox2Df (q.xy, b - 3. * w + 0.05));\n  DMIN (2);\n  q = p;\n  q.y -= 3.;\n  g = abs (q.x) - b.x;\n  q.xz = vec2 (mod (q.x + 0.75, 1.5) - 0.75, abs (q.z - bSize.z) - bSize.z + 0.3);\n  d = PrCylDf (q.xzy, 0.2, b.y - 4. * w);\n  q.y = abs (q.y) - b.y + 4. * w;\n  d = max (min (d, PrCylDf (q.xzy, 0.275, w)), g);\n  DMIN (3);  \n  q = p;\n  q.yz -= vec2 (3., bSize.z);\n  if (! isSh) d = PrBoxDf (q, vec3 (b - 3. * w, bSize.z)) + 0.1;\n  if (isSh || d < dMin) {\n    d = BlobDf (q);\n    DMIN (4);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 180; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.002, -0.002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.02, h);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 sz)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  v = ro / rd;\n  tp = sz / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    vnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return dMin;\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec3 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  e = vec2 (0.002, 0.);\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vn;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.41, 0.55);\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = mix (vec3 (0.4, 0.5, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  vec2 vf, s;\n  float dstObj, dstGrnd, db, sh, f;\n  bool isBg;\n  isBg = true;\n  sh = 1.;\n  roo = ro;\n  bSize = vec3 (7., 4., 3.75);\n  db = BlkHit (ro + vec3 (0., - bSize.y, 0.1), rd, vec3 (bSize.xy, 0.05));\n  if (db < dstFar) {\n    vf = vec2 (0.);\n    if (vnBlk.z < -0.99) {\n      blbRad = vec2 (1.1 + 0.31 * sin (tCur + 1.31), 1. + 0.41 * sin (1.7 * (tCur + 1.31)));\n      isSh = false;\n      dstObj = ObjRay (ro, rd);\n      if (dstObj < dstFar) {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        if (idObj == 1) {\n          if (vn.y > 0.99 && length (ro.xz- vec2 (0., bSize.z)) < 2.7) {\n            col4 = vec4 (0.6, 0.7, 0.1, 0.2);\n          } else {\n            col4 = vec4 (0.4, 0.25, 0.15, 0.);\n            if (vn.z < -0.99) vf = vec2 (8., 2.);\n            else vf = vec2 (16., 1.);\n          }\n        } else if (idObj == 2) {\n          col4 = vec4 (0.7, 0.5, 0.2, 0.3);\n        } else if (idObj == 3) {\n          col4 = vec4 (0.6, 0.4, 0.2, 0.3);\n          s = vec2 (mod (ro.x + 0.75, 1.5) - 0.75, abs (ro.z - bSize.z) - bSize.z + 0.3);\n          vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * (0.5 -\n             mod (16. * (atan (s.x, s.y) / (2. * pi) + 0.5), 1.))));\n        } else if (idObj == 4) {\n          col4 = vec4 (mix (vec3 (0.6, 0.7, 0.1), vec3 (0.9, 0.2, 0.1),\n             smoothstep (0.7, 4.5, ro.y)), 0.3);\n        }\n        if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n        isSh = true;\n        isBg = false;\n      } else if (rd.y < 0.) {\n        dstObj = - ro.y / rd.y;\n        if (dstObj < dstFar) {\n          ro += dstObj * rd;\n          isSh = true;\n        }\n      }\n      sh = (isSh) ? ObjSShadow (ro + 0.01 * sunDir, sunDir) : 1.;\n      if (! isBg) col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    } else {\n      ro += db * rd;\n      vn = vnBlk;\n      vn.z *= -1.;\n      if (vn.z > -0.99) {\n        col4 = vec4 (0.4, 0.25, 0.15, 0.);\n        vf = vec2 (32., 2.);\n      } else {\n        f = 0.;\n        if (abs (ro.y - bSize.y) < bSize.y - 0.5) f = abs (ro.x);\n        if (abs (ro.x + 0.5 * bSize.x) < 0.5 * bSize.x - 1.) \n           f = abs (abs (ro.y - 0.7 * bSize.y) - 0.5);\n        s = abs (ro.xy - bSize.xy * vec2 (-0.8, 1.6)) - 0.7;\n        if (max (s.x, s.y) < 0.02) f = min (abs (s.x), abs (s.y));\n        col4 = vec4 (0.7, 0.7, 0.65, 0.1);\n        if (f > 0.) col4 *= 0.5 + 0.5 * smoothstep (0.01, 0.02, f);\n        vf = vec2 (64., 0.5);\n      }\n      vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = col4.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n         col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      isBg = false;\n    }\n  }\n  if (isBg) {\n    if (rd.y < 0.) {\n      ro = roo;\n      dstGrnd = - ro.y / rd.y;\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      f = 1. - smoothstep (0.3, 0.5, dstGrnd / dstFar);\n      if (f > 0.) vn = VaryNf (4. * ro, RippleNorm (ro.xz, vn, 6. * f), f);\n      col = mix (vec3 (1., 0.8, 0.5), vec3 (0.9, 0.7, 0.5), 0.2 +\n         0.6 * smoothstep (0.7, 1.1, 2. * Fbm2 (2. * ro.xz)));\n      col = col * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.));\n      col = mix (col, vec3 (0.3, 0.41, 0.55), pow (1. + rd.y, 16.));\n      col *= 0.7 + 0.3 * smoothstep (length (vec2 (max (abs (ro.x) - bSize.x, 0.),\n         max (abs (ro.z + 0.1) - 0.05, 0.))), 0., 0.05);\n    } else col = SkyBgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.015 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= pi * mPtr.y;\n  }\n  az += 0.7 * pi * (2. * mod (floor (0.06 * tCur), 2.) - 1.) *\n     SmoothBump (0.3, 0.7, 0.15, mod (0.06 * tCur, 1.));\n  el = clamp (el, -0.4 * pi, 0.02 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 3.5, -25.);\n  zmFac = 4.5;\n  dstFar = 100.;\n  sunDir = normalize (vec3 (0., 0., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.2 * pi * sin (0.05 * 2. * pi * tCur));\n  sunDir.yz = Rot2D (sunDir.yz, pi * (0.22 + 0.07 * sin (0.03 * 2. * pi * tCur)));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}