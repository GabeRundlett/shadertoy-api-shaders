{
    "Shader": {
        "info": {
            "date": "1544818658",
            "description": "Wishing everyone on here a Merry Christmas!",
            "flags": 96,
            "hasliked": 0,
            "id": "XtVBDd",
            "likes": 21,
            "name": "Merry Christmas 2018 from Fru",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "frutbunn",
            "viewed": 1377
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2 MAP_TILE_SIZE = vec2(8.);\n    const vec2 MAP_SIZE = vec2(30., 28.);\n    const vec2 mapSize = MAP_SIZE*MAP_TILE_SIZE + MAP_TILE_SIZE; // With extra half tile border for sprites overlapping map area\n    \n    vec2 scale = vec2(mapSize.y, iResolution.y);\n    if (iResolution.y>iResolution.x) {\n        scale = vec2(mapSize.x, iResolution.x);\n    }\n    \n    vec2 uv = ((fragCoord.xy/iResolution.xy - .5) * scale.x/scale.y) + .5;\n\tfragColor = vec4(texture(iChannel0, uv).rgb, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 17004,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fco_rmz/03-jinge-bells-8bit-version"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TIMER(currentTime, sec, min, max) (((mod(currentTime, (sec)) * ((max) - (min))) / (sec)) + (min))\n\nconst vec2 MAP_TILE_SIZE = vec2(8.);\nconst vec2 MAP_SIZE = vec2(30., 28.);\n\nvec4 renderGame(in float time, in vec2 uv, in vec2 resolution);\n\nvec4 getMapTile(in float time, in vec2 pos, in float mode);\nvec4 getPacmanTile(in vec2 pos);\nvec4 getGhostBodyTile(in vec2 pos, in vec3 color);\nvec4 getGhostEatFaceTile(in vec2 pos, in vec3 color);\nvec4 getGhostEyesTile(in vec2 pos);\nvec4 getXmasPresentTile(in vec2 pos);\nvec4 getCrackerTile(in vec2 pos, in float tile, in vec3 crackerScoreColor);\n\nfloat getMapIndex(in vec2 pos);\n\nvec4 getPacmanPositionData(in float currentPercentage);\nvec4 getRedPositionData(in float currentPercentage);\nvec4 getPinkPositionData(in float currentPercentage);\nvec4 getCyanPositionData(in float currentPercentage);\nvec4 getOrangePositionData(in float currentPercentage);\n\nvec4 renderMap(in float shaderTime, in vec2 position, in float mode, in bool renderPellets);\nvec4 renderPacman(in float time, in vec2 position, in float direction, in vec2 pacmanPosition);\nvec4 renderGhost(in float time, in vec2 position, in float ghostState, in vec2 ghostPosition, in vec3 ghostColor);\nvec4 renderXmasPresent(in vec2 position, in vec2 presentPosition);\nvec4 renderCracker(in vec2 position, in float tile, in vec2 crackerPosition, in vec3 crackerScoreColor);\nvec4 getSpritePosition(in float currentPercentage, in vec4 data);\n\nbool needToRenderPellet(in vec2 position, in float currentPercentage, in vec4 pacmanPositionData);\nvec2 adjustToOrigin(in vec2 uv, in vec2 resolution);\n\nfloat rnd(in vec2 co);\nbool isTimeAt(in float time, in float at, in float duration);\nvoid freezeTimeAt(inout float time, in float at, in float duration);\n\n//\t-\t-\t-\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy -.5;\n    fragColor = renderGame(iTime, uv, iResolution.xy);\n}\n\n//\t-\t-\t-\n\nfloat rnd(in vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid freezeTimeAt(inout float time, in float at, in float duration) {\n    if (time>=at && time<at+duration) {\n        time = at;\n    } else if (time>=at+duration) {\n        time -= duration;\n    }\n}\n\nbool isTimeAt(in float time, in float at, in float duration) {\n    return time>=at && time<at+duration;\n}\n\nvec4 renderGame(in float time, in vec2 uv, in vec2 resolution) {\n    const float FREEZED_TIME_TOTAL = 2. + 1. + 1. + 1. + 1. + 1. + 1. + 4.; // Duration of 'freezed' time when ghosts eaten\n    const float duration = 46.86; // Duration of animation (minus hacky 'freezes')\n    \n    float shaderTime = time; // Time shader has been running\n    float animationTime = mod(time, duration+FREEZED_TIME_TOTAL); // Current time of animation\n    float animationCycles = floor(time/(duration+FREEZED_TIME_TOTAL) ); // Number of cycles anim has ran (zoomed on odd runs)\n\n    // Do not run animation if dislayed on the Shadertoy menu\n    if (resolution.y<281.) {\n        animationTime = animationCycles = 0.;\n    }\n\n    // If canvas resolution is odd on either axis, assume is even, as cannot render cleanly to half pixels\n\tresolution -= mod(resolution, 2.);\n\n    // Freeze animation at following points\n    freezeTimeAt(animationTime, 0., 2.); // Pause for two seconds at the start of every animation\n    freezeTimeAt(animationTime, 8.269, 1.); // Orange eaten\n    freezeTimeAt(animationTime, 9.412, 1.); // Cyan eaten\n    freezeTimeAt(animationTime, 14.284, 1.); // Cyan eaten\n    freezeTimeAt(animationTime, 15.545, 1.); // Pink eaten\n    freezeTimeAt(animationTime, 28.885, 1.); // Pink eaten\n    freezeTimeAt(animationTime, 41.378, 1.); // Red eaten\n    freezeTimeAt(animationTime, duration, 4.); // Flashing blue tree at end of level\n\n    // Pacman has completed the level\n    bool levelCompleted = isTimeAt(animationTime, duration, 100.);\n    \n    // Turn into platform type game every odd time ran\n    bool zoomed = bool(mod(animationCycles, 2.) );\n\n    // Current percentage of animation that has been ran so far\n    float currentPercentage = animationTime/duration;\n\n    // Adjust to map pixel positions - use these coordinates for rendering onto the game map\n    // (Action is centered on the framebuffer at scale 1x1 pixel, so upscaling is more acurate on the displayed image - bitmaps eh?)...\n    if (zoomed) uv*=.25; // Zoom in for zoomed (maze) mode\n    vec2 position = adjustToOrigin(uv, resolution);\n    vec2 zoomedDisplacement = MAP_SIZE*MAP_TILE_SIZE/2.;\n\n    // Don't calculate/render outside map area + half tile border for sprites (makes faster, especially fullscreen)\n    if (position.x<-MAP_TILE_SIZE.x/2. || position.x>MAP_SIZE.x*MAP_TILE_SIZE.x+MAP_TILE_SIZE.x/2. \n     || position.y<-MAP_TILE_SIZE.y/2. || position.y>MAP_SIZE.y*MAP_TILE_SIZE.y+MAP_TILE_SIZE.y/2.) {\n        return vec4(0.);\n    }\n    \n    // Calculate pacman position and animation frame\n    vec4 pacmanPositionData = getPacmanPositionData(currentPercentage);\n    vec4 pacmanCalculatedPosition = getSpritePosition(currentPercentage, pacmanPositionData);\n    vec4 pacmanCol = renderPacman(animationTime, position\n     , (levelCompleted ? floor(TIMER(shaderTime, .3, 0., 4.)) : floor(pacmanPositionData.z) )\n     , (zoomed ? zoomedDisplacement : pacmanCalculatedPosition.xy) ); \n\n   \t// Center on pacman if map (now a maze) is zoomed in (odd animation cycles)\n    if (zoomed) {\n        position += pacmanCalculatedPosition.xy - zoomedDisplacement;\n        \n\t\t// Don't calculate/render outside of zoomed area of map (makes faster, especially fullscreen)\n        vec2 zoomedArea = MAP_TILE_SIZE*vec2(6.5, 3.75); // Outside 16:9 aspect ratio, user will get a black border or overscan in zoomed mode\n        if (position.x<pacmanCalculatedPosition.x-zoomedArea.x\n         || position.x>pacmanCalculatedPosition.x+zoomedArea.x\n         || position.y<pacmanCalculatedPosition.y-zoomedArea.y\n         || position.y>pacmanCalculatedPosition.y+zoomedArea.y\n        ) {\n            return vec4(0.);\n        }          \n        \n    }\n    \n    // Does this pixel require pellets drawn?\n    // (Uses pacmans calculated position to determine point within current line pacman is traversing)\n    bool renderPellets = needToRenderPellet(position, currentPercentage, pacmanCalculatedPosition);\n\n    // Debug pellet removal\n    //if (!renderPellets) {\n    //    return vec4(1., 0.,  0., 1.);\n    //}\n\n    // Render map - with eaten pellets removed\n    vec4 mapCol = renderMap(shaderTime, position, float(levelCompleted), renderPellets);\n\n    // Calculate ghosts position and animation frame - renderGhost() will only ever calculate for one ghost, as ghosts never overlap\n    vec4 redPositionData = getRedPositionData(currentPercentage);\n    vec4 redCalculatedPosition = getSpritePosition(currentPercentage, redPositionData);\n    vec4 redGhostCol = renderGhost(animationTime, position, floor(redPositionData.z), redCalculatedPosition.xy, vec3(1., 0., 0.) );\n\n    vec4 pinkPositionData = getPinkPositionData(currentPercentage);\n    vec4 pinkCalculatedPosition = getSpritePosition(currentPercentage, pinkPositionData);\n    vec4 pinkGhostCol = renderGhost(animationTime, position, floor(pinkPositionData.z), pinkCalculatedPosition.xy, vec3(.99, .71, 1.) );\n\n    vec4 cyanPositionData = getCyanPositionData(currentPercentage);\n    vec4 cyanCalculatedPosition = getSpritePosition(currentPercentage, cyanPositionData);\n    vec4 cyanGhostCol = renderGhost(animationTime, position, floor(cyanPositionData.z), cyanCalculatedPosition.xy, vec3(0., 1., 1.) );\n\n    vec4 orangePositionData = getOrangePositionData(currentPercentage);\n    vec4 orangeCalculatedPosition = getSpritePosition(currentPercentage, orangePositionData);\n    vec4 orangeGhostCol = renderGhost(animationTime, position, floor(orangePositionData.z), orangeCalculatedPosition.xy, vec3(.97, .73, .33) );\n\n    // Hacky Christmas present at the end\n    vec4 presentCol = renderXmasPresent(position, vec2(15.*8., 27.*8.-4.));\n\n    // Render eaten graphic - if a ghost has been eaten\n    vec3 crackerPosition = vec3(0., 0., 3.);\n    vec3 crackerScoreColor = vec3(.97, .73, .33);\n    \n    bool displayPacman = true;\n    bool displayGhost[4];\n    displayGhost[0] = displayGhost[1] = displayGhost[2] = displayGhost[3] = true;\n\n    if (isTimeAt(animationTime, 8.269, 0.01) ) { \n        crackerPosition = vec3(43.*4. + 4., 18.*4. + 4., 0.); // Orange\n        crackerScoreColor = vec3(0., 1., 1.);\n        displayPacman = displayGhost[3] = false;\n    }\n\n    if (isTimeAt(animationTime, 9.412, .01) ) {\n        crackerPosition = vec3(38.*4. + 4., 24.*4. + 4., 1.); // Cyan\n        displayPacman = displayGhost[2] = false;\n    }\n\n    if (isTimeAt(animationTime, 14.284, .01) ) {\n        crackerPosition = vec3(15.*4. + 4., 24.*4. + 4., 0.); // Cyan\n        displayPacman = displayGhost[2] = false;\n    }\n\n    if (isTimeAt(animationTime, 15.545, .01) ) {\n        crackerPosition = vec3(4.*4. + 4., 32.*4. + 6., 1.); // Pink\n        displayPacman = displayGhost[1] = false;\n    }\n\n    if (isTimeAt(animationTime, 28.885, .01) ) {\n        crackerPosition = vec3(46.*4. + 4., 42.*4. + 4., 0.); // Pink\n        displayPacman = displayGhost[1] = false;\n    }\n\n    if (isTimeAt(animationTime, 41.378, .01) ) {\n        crackerPosition = vec3(7.*4. + 4., 48.*4. + 4., 1.); // Red\n        crackerScoreColor = vec3(0., 1., 1.);\n        displayPacman = displayGhost[0] = false;\n    }\n\n    if (isTimeAt(animationTime, 43.24, 1.) ) {\n        crackerPosition = vec3(15.*8., 26.*8.-4., 2.); // Pacman Xmas present\n        crackerScoreColor = vec3(.97, .73, .33);\n    }\n\n    // Eaton points graphic (Candy cane or mulled wine - I did draw more, but they were rubbish)...\n    vec4 crackerCol = renderCracker(position, crackerPosition.z, crackerPosition.xy, crackerScoreColor);\n\n    // Put all together\n    vec4 col = mapCol;\n\n    if (!levelCompleted) {\n        if (displayGhost[0]) col = mix(col, redGhostCol, redGhostCol.a);\n        if (displayGhost[1]) col = mix(col, pinkGhostCol, pinkGhostCol.a);\n        if (displayGhost[2]) col = mix(col, cyanGhostCol, cyanGhostCol.a);\n        if (displayGhost[3]) col = mix(col, orangeGhostCol, orangeGhostCol.a);\n\n        if (isTimeAt(animationTime, 41.69, 1.56) ) {\n            col = mix(col, presentCol, presentCol.a);\n        }\n    }\n\n    if (displayPacman) {\n        col = mix(col, pacmanCol, pacmanCol.a);\n    }\n\n    col = mix(col, crackerCol, crackerCol.a);\n\n    return min(vec4(1.), max(vec4(0.), col) );\n}\n\n// TODO I bet there is a quicker way of doing this... Seems excessive\nvoid translateLineToCartesianCoordinates(inout vec2 A, inout vec2 B) {\n    if (B.x>A.x) {\n        float t = A.x;\n        A.x = B.x;\n        B.x = t;\n    }\n\n    if (B.y>A.y) {\n        float t = A.y;\n        A.y = B.y;\n        B.y = t;\n    }\n\n}\n\n// Game is rendered to positions 0, 0 to MAP_SIZE*MAP_TILE_SIZE centered on the framebuffer. \n// Gives nicer upscaling of the bitmaps + don't need to calculate any additional pixels when fullscreen.\nvec2 adjustToOrigin(in vec2 uv, in vec2 resolution) {\n    // Translate normalized coordinates (-.5 to .5) to pixels\n    vec2 position = (uv + .5) * resolution;\n\n    // Flip vertically\n    position.y = resolution.y - position.y;\n\n    // Center map area on screen - position 0,0 now becomes top left of first map block\n    position -= vec2(\n        (resolution.x - MAP_SIZE.x*MAP_TILE_SIZE.x) / 2.,\n        (resolution.y - MAP_SIZE.y*MAP_TILE_SIZE.y) / 2.\n    );\n\n    return position;\n}\n\nvec4 renderMap(in float shaderTime, in vec2 position, in float mode, in bool renderPellets) {\n    // Do not render outsize map. (Only really needed for zoomed mode where map moves relative to pacman position)\n    if (position.x<0. || position.x>MAP_SIZE.x*MAP_TILE_SIZE.x || position.y<0. || position.y>MAP_SIZE.y*MAP_TILE_SIZE.y) {\n        return vec4(0.);\n    }\n    \n    // Translate current pixel position to map tile position\n    vec2 mapTilePosition = vec2(\n        floor(position.x/8.),\n        floor(position.y/8.)\n    );\n\n    // Get current tile index for this 8x8 block\n    float tile = getMapIndex(mapTilePosition);\n\n    // Remove pellet/power-pill if not rendering them for this pixel \n    if (!renderPellets && (tile==0. || tile==1. || tile==15.) ) {\n        tile = 14.;\n    }\n\n    // Calculate screen pixel position within 8x8 tile block\n\tvec2 pixelWithinBlock = mod(position, 8.);\n    \n    // Offset to actual tile number in tile graphics\n    pixelWithinBlock.y += tile*8.;\n\n    vec4 col = getMapTile(shaderTime, pixelWithinBlock, mode);\n\n    // Flicker pellets\n    if (tile==0.) {\n        float x = min(1., max(.2, rnd(mapTilePosition + floor(mod(shaderTime*10., 20.)))));\n        col.rgb *= x;\n    }\n\n    // Flash power-pellets\n    if (tile==1. || tile==15.) {\n\n        float bulbHorz = step(tile, 15. - 1.);\n        float bulbVert = step(mapTilePosition.y, floor(MAP_SIZE.y/2.) );\n        float index = 1.*bulbHorz + 2.*bulbVert;\n\n        if (index==0.) col.rgb = vec3(.97, .73, .13)*col.rgb;\n        if (index==1.) col.rgb = vec3(0., 1., 1.)*col.rgb;\n        if (index==2.) col.rgb = vec3(.99, .51, 1.)*col.rgb;\n        if (index==3.) col.rgb = vec3(1., 0., 0.)*col.rgb;\n\n        float brightness = floor(TIMER(shaderTime, .5, 0., 2.));\n        col.rgb *= brightness;\n    }\n\n    return col;\n}\n\nvec4 getSpritePosition(in float currentPercentage, in vec4 data) {\n    vec2 startVector = vec2(floor(data.x), fract(data.x)*1000.);\n    vec2 endVector = vec2(floor(data.y), fract(data.y)*1000.);\n\n    float percentageStart = fract(data.z);\n    float percentageAmount = data.w;\n\n    float pointAlongLine = (currentPercentage-percentageStart) / (percentageAmount);\n    vec2 currentPoint = mix(startVector, endVector, pointAlongLine);\n\n    return vec4(currentPoint, startVector);\n}\n\n// direction: 0 = up, 1 = right, 2 = down, 3 = left\nvec4 renderPacman(in float time, in vec2 position, in float direction, in vec2 pacmanPosition) {\n    const vec2 SPRITE_SIZE = vec2(13., 13.);\n    \n    // Do not calculate/render outside pacman's sprite position.\n    // +1 as dimensions are odd\n    if (position.x < pacmanPosition.x-(SPRITE_SIZE.x+1.)/2. +1. || position.x >= pacmanPosition.x+(SPRITE_SIZE+1.).x/2.\n     || position.y < pacmanPosition.y-(SPRITE_SIZE.y+1.)/2. +1. || position.y >= pacmanPosition.y+(SPRITE_SIZE+1.).y/2.) {\n        return vec4(0.);\n    }\n    \n    // Center pacman on map block.\n    position += floor(SPRITE_SIZE/2.);\n\n    // Calculate tile pixel position adjusted to sprite position\n    vec2 tilePosition = position - pacmanPosition;\n    tilePosition = vec2(mod(tilePosition.x, SPRITE_SIZE.x), mod(tilePosition.y, SPRITE_SIZE.y) );\n\n    float tile = direction*4. + floor(TIMER(time, .245, 0., 4.) );\n    tilePosition.y += tile*SPRITE_SIZE.y;\n    vec4 col = getPacmanTile(tilePosition);\n    \n    return col;\n}\n\nvec4 renderXmasPresent(in vec2 position, in vec2 presentPosition) {\n    const vec2 SPRITE_SIZE = vec2(18., 19.);\n    \n    // Do not calculate/render outside present's sprite position.\n\t// +1 as Y dimension is odd\n    if (position.x < presentPosition.x-SPRITE_SIZE.x/2. || position.x >= presentPosition.x+SPRITE_SIZE.x/2.\n     || position.y < presentPosition.y-(SPRITE_SIZE.y+1.)/2. + 1. || position.y >= presentPosition.y+(SPRITE_SIZE+1.).y/2.) {\n        return vec4(0.);\n    }\n    \n    // Center present on map block.\n    position += floor(SPRITE_SIZE/2.);\n\n    // Calculate tile pixel position adjusted to sprite position\n    vec2 tilePosition = position - presentPosition;\n    tilePosition = vec2(mod(tilePosition.x, SPRITE_SIZE.x), mod(tilePosition.y, SPRITE_SIZE.y) );\n    vec4 col = getXmasPresentTile(tilePosition);\n\n    return col;\n}\n\nvec4 renderCracker(in vec2 position, in float tile, in vec2 crackerPosition, vec3 crackerScoreColor) {\n    const vec2 SPRITE_SIZE = vec2(48., 48.);\n\n    // Do not calculate/render outside cracker's sprite position\n    if (position.x < crackerPosition.x-SPRITE_SIZE.x/2. || position.x >= crackerPosition.x+SPRITE_SIZE.x/2.\n     || position.y < crackerPosition.y-SPRITE_SIZE.y/2. || position.y >= crackerPosition.y+SPRITE_SIZE.y/2.) {\n        return vec4(0.);\n    }\n    \n    // Center present on map block\n    position += floor(SPRITE_SIZE/2.);\n\n    // Calculate tile pixel position adjusted to sprite position\n    vec2 tilePosition = position - crackerPosition;\n    tilePosition = vec2(mod(tilePosition.x, SPRITE_SIZE.x), mod(tilePosition.y, SPRITE_SIZE.y) );\n\n    //tilePosition.y += tile*SPRITE_SIZE.y;\n    vec4 col = getCrackerTile(tilePosition, tile, crackerScoreColor);\n  \n    return col;\n}\n\nvec4 renderGhost(in float time, in vec2 position, in float ghostState, in vec2 ghostPosition, in vec3 ghostColor) {\n    const vec2 SPRITE_SIZE = vec2(14., 14.);\n\n    // Do not calculate/render outside ghost's sprite position\n    if (position.x < ghostPosition.x-SPRITE_SIZE.x/2. || position.x >= ghostPosition.x+SPRITE_SIZE.x/2.\n     || position.y < ghostPosition.y-SPRITE_SIZE.y/2. || position.y >= ghostPosition.y+SPRITE_SIZE.y/2.) {\n        return vec4(0.);\n    }\n    \n    // ghostState: \n    // bits 1-2:    0 = up, 1 = right, 2 = down, 3 = left (this only effects eyes)\n    // bit 3:       0 = do not draw body, 1 = draw body\n    // bit 4:       0 = do not draw eyes, 1 = draw eyes\n    // bit 5:       0 = do not draw can eat face, 1 = can eat face\n    // bit 6:       0 = lots of time to eat yet, 1 = eat quickly\n    //\n    // ghostState   QeOBdd \n    // 12           001100  Normal Up\n    // 13           001101  Normal Right\n    // 14           001110  Normal Down\n    // 15           001111  Normal Left\n\n    // 8            001000  Only Eyes Up\n    // 9            001001  Only Eyes Right\n    // 10           001010  Only Eyes Down\n    // 11           001011  Only Eyes Left\n\n    // 20           010100  Can eat\n    // 52           110100  Can eat - quickly\n\n    // Decode ghostState\n    float direction = floor(mod(ghostState, 4.));\n    float drawBody = floor(mod(ghostState, 8.)*exp2(-2.));\n    float drawEyes = floor(mod(ghostState, 16.)*exp2(-3.));\n    float drawEat = floor(mod(ghostState, 32.)*exp2(-4.));\n    \n    bool eatQuickly = bool(floor(mod(ghostState, 64.)*exp2(-5.)) );\n\n    // Eatable ghost colors\n    vec3 eatFaceCol = vec3(.98, .73, .69);\n    vec3 eatGhostCol = vec3(.13, .13, 1.);\n\n    // Change ghosts color if can be eaton\n    ghostColor = eatGhostCol*drawEat + ghostColor*(1.-drawEat);\n   \n\t// Animate eatable colors if need to eat quickly    \n    if (eatQuickly && floor(TIMER(time, .5, 0., 2.))==1.) {\n        ghostColor = vec3(.88, .87, 1.);\n        eatFaceCol =vec3(1., 0., 0.);\n    }\n\n    // Center ghost on map block\n    position += floor(SPRITE_SIZE/2.);\n\n    // Calculate tile pixel position adjusted to sprite position\n    vec2 tilePosition = position - ghostPosition;\n    tilePosition = vec2(mod(tilePosition.x, SPRITE_SIZE.x), mod(tilePosition.y, SPRITE_SIZE.y) );\n\n    vec4 col = vec4(0.);\n\n    // Ghost body\n    float bodyAnimTile = floor(TIMER(time, .25, 0., 2.) );\n    vec4 body = getGhostBodyTile(tilePosition + vec2(0., bodyAnimTile*SPRITE_SIZE.y), ghostColor);\n    col = mix(col, body*drawBody, body.a*drawBody);\n\n    // Eyes to direction\n    vec4 eyes = getGhostEyesTile(tilePosition + vec2(0., direction*SPRITE_SIZE.y) );\n    col = mix(col, eyes*drawEyes, eyes.a*drawEyes);\n\n    // Can eat face\n    vec4 eatFace = getGhostEatFaceTile(tilePosition, eatFaceCol);\n    col = mix(col, eatFace*drawEat, eatFace.a*drawEat);\n\n    return col;\n}\n\nvec4 getMapTile(in float time, in vec2 pos, in float mode) {\n    pos.x  = floor(mod(pos.x, 8.) );\n    pos.y = floor(mod(pos.y, 128.) );\n\n    mode = floor(mode);\n\n    // mode: 0 = green tree, 1 = flashing tree\n\n    // The background map tiles - 1 bit 8x128\n    // Encoded one bitplane 8x120 pixels (tiles ordered carefully vertically in bitmap for maximum compression in code lines)\n\n    if (pos.y>=120.) pos.y -= 112.; // second power pill - so can render each horizontal power pill in a different color (different map tile index)\n\n    float value = float(0x0);\n    if (pos.y>=3. && pos.y<=4.) value = float(0x18);\n    if (pos.y==8. || pos.y==15.) value = float(0x3c);\n    if (pos.y==9. || pos.y==14.) value = float(0x7e);\n    if ( (pos.y>=10. && pos.y<=13.) || pos.y==67. || pos.y==92.) value = float(0xff);\n    if (pos.y==19. || pos.y==36.) value = float(0x7);\n    if (pos.y==20. || pos.y==35. || (pos.y>=45. && pos.y<=58.) || (pos.y>=78. && pos.y<=81.) ) value = float(0x8);\n    if ( (pos.y>=21. && pos.y<=34.) || pos.y==44. || pos.y==59. || (pos.y>=102. && pos.y<=105.) ) value = float(0x10);\n    if (pos.y==43. || pos.y==60.) value = float(0xe0);\n    if (pos.y==76. || pos.y==83.) value = float(0x3);\n    if (pos.y==77. || pos.y==82.) value = float(0x4);\n    if (pos.y==100. || pos.y==107.) value = float(0xc0);\n    if (pos.y==101. || pos.y==106.) value = float(0x20);\n\n    float bit = step(0.5, mod(float(value)/exp2(pos.x+1.), 1.));\n\n    // Change color based on tile (pills at top, everything else below)\n    if (pos.y<16.) {\n        return vec4(vec3(1.), bit)*vec4(bit);\n    } else {\n        vec3 col = vec3(0., .57, 0.); // Xmas tree tiles, default to green \n        if (mode==1.) col = TIMER(time, .5, vec3(.2, .2, 1.), vec3(.05, .05, .2) ); // Level complete\n\n        return vec4(vec3(col), bit)*vec4(bit);\n    }\n\n}\n\nfloat getMapIndex(vec2 pos) {\n    pos.x  = floor(mod(pos.x, 30.) );\n    pos.y = floor(mod(pos.y, 28.) );\n\n    // The background map data\n    // Encoded four bitplanes 30x28 pixels (returned as color index, not RGBA)\n\n    vec3 tile = vec3(0.);\n\n    if (pos.y==0.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe0ee0e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n    if (pos.y==1.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe09c0e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n    if (pos.y==2.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe0630e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n    if (pos.y==3.) tile = pos.x<18. ? vec3(0xeeeeee, 0x0eeeee, 0x006300) : vec3(0xeeeee0, 0xeeeeee, 0x000000);\n    if (pos.y==4.) tile = pos.x<18. ? vec3(0xeeeeee, 0x0eeeee, 0x9b74bc) : vec3(0xeeeee0, 0xeeeeee, 0x000000);\n    if (pos.y==5.) tile = pos.x<18. ? vec3(0xeeeeee, 0x0eeeee, 0xa8888d) : vec3(0xeeeee0, 0xeeeeee, 0x000000);\n    if (pos.y==6.) tile = pos.x<18. ? vec3(0xeeeeee, 0x000eee, 0x000000) : vec3(0xeee000, 0xeeeeee, 0x000000);\n    if (pos.y==7.) tile = pos.x<18. ? vec3(0xeeeeee, 0xbc0eee, 0xbbbbbb) : vec3(0xeee09b, 0xeeeeee, 0x000000);\n    if (pos.y==8.) tile = pos.x<18. ? vec3(0xeeeeee, 0x8d0eee, 0x885288) : vec3(0xeee0a8, 0xeeeeee, 0x000000);\n    if (pos.y==9.) tile = pos.x<18. ? vec3(0xeeeeee, 0x000001, 0x006300) : vec3(0xf00000, 0xeeeeee, 0x000000);\n    if (pos.y==10.) tile = pos.x<18. ? vec3(0xeeeeee, 0xbbbbc0, 0xc06309) : vec3(0x09bbbb, 0xeeeeee, 0x000000);\n    if (pos.y==11.) tile = pos.x<18. ? vec3(0xeeeeee, 0x8888d0, 0xd0ad0a) : vec3(0x0a8888, 0xeeeeee, 0x000000);\n    if (pos.y==12.) tile = pos.x<18. ? vec3(0xeeeeee, 0xe00000, 0xe0000e) : vec3(0x00000e, 0xeeeeee, 0x000000);\n    if (pos.y==13.) tile = pos.x<18. ? vec3(0xeeeeee, 0xbc09c0, 0xbbbbbb) : vec3(0x09c09b, 0xeeeeee, 0x000000);\n    if (pos.y==14.) tile = pos.x<18. ? vec3(0xeeeeee, 0x8d0630, 0x885288) : vec3(0x0630a8, 0xeeeeee, 0x000000);\n    if (pos.y==15.) tile = pos.x<18. ? vec3(0x0000ee, 0x000630, 0x006300) : vec3(0x063000, 0xee0000, 0x000000);\n    if (pos.y==16.) tile = pos.x<18. ? vec3(0xbbc0ee, 0xbbb74b, 0xc06309) : vec3(0xb74bbb, 0xee09bb, 0x000000);\n    if (pos.y==17.) tile = pos.x<18. ? vec3(0x88d0ee, 0x888888, 0xd0ad0a) : vec3(0x888888, 0xee0a88, 0x000000);\n    if (pos.y==18.) tile = pos.x<18. ? vec3(0x0000ee, 0xe00000, 0xe0000e) : vec3(0x00000e, 0xee0000, 0x000000);\n    if (pos.y==19.) tile = pos.x<18. ? vec3(0x9c0eee, 0xbc09c0, 0xbbbbbb) : vec3(0x09c09b, 0xeee09c, 0x000000);\n    if (pos.y==20.) tile = pos.x<18. ? vec3(0xad0eee, 0x8d0630, 0x885288) : vec3(0x0630a8, 0xeee0ad, 0x000000);\n    if (pos.y==21.) tile = pos.x<18. ? vec3(0x000001, 0x000630, 0x006300) : vec3(0x063000, 0xf00000, 0x000000);\n    if (pos.y==22.) tile = pos.x<18. ? vec3(0xbbbbc0, 0xbbb74b, 0xc06309) : vec3(0xb74bbb, 0x09bbbb, 0x000000);\n    if (pos.y==23.) tile = pos.x<18. ? vec3(0x8888d0, 0x888888, 0xd0630a) : vec3(0x888888, 0x0a8888, 0x000000);\n    if (pos.y==24.) tile = pos.x<18. ? vec3(0x000000, 0x000000, 0x006300) : vec3(0x000000, 0x000000, 0x000000);\n    if (pos.y==25.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe0630e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n    if (pos.y==26.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe0ad0e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n    if (pos.y==27.) tile = pos.x<18. ? vec3(0xeeeeee, 0xeeeeee, 0xe0000e) : vec3(0xeeeeee, 0xeeeeee, 0x000000);\n\n    float n = mod(pos.x, 18.);\n    float t = n<6. ? tile.x : (n<12. ? tile.y : tile.z);\n    float p = mod(pos.x, 6.)*4.;\n    float index = floor(mod(floor(t*exp2(-p)), 16.0));\n\n    return index;\n}\n\nvec4 getPacmanTile(in vec2 pos) {\n    pos.x  = floor(mod(pos.x, 13.) );\n    pos.y = floor(mod(pos.y, 208.) );\n\n    // Pacman animation tiles\n    // Encoded one bitplane 13x208 pixels (with tricks based one rotational nature of pacman)\n\n    // Up\n    if (pos.y>=3.*13. && pos.y<4.*13.) pos.y -= 2.*13.;\n\n    // Right\n    if (pos.y>=4.*13. && pos.y<5.*13.) pos.y -= 4.*13.;\n    if (pos.y>=5.*13. && pos.y<7.*13.) pos.y -= 2.*13.;\n    if (pos.y>=7.*13. && pos.y<8.*13.) pos.y -= 4.*13.;\n\n    // Down\n    if (pos.y>=8.*13. && pos.y<12.*13.) {\n        pos.y -= 8.*13.;\n\n        if (pos.y>=3.*13. && pos.y<4.*13.) pos.y -= 2.*13.;\n\n        pos.y = ( 12. - floor(mod(pos.y, 13.)) ) + (floor(pos.y/13.)*13.);\n    }\n\n    // Left\n    if (pos.y>=12.*13. && pos.y<16.*13.) {\n        pos.y -= 8.*13.;\n\n        if (pos.y>=4.*13. && pos.y<5.*13.) pos.y -= 4.*13.;\n        if (pos.y>=5.*13. && pos.y<7.*13.) pos.y -= 2.*13.;\n        if (pos.y>=7.*13. && pos.y<8.*13.) pos.y -= 4.*13.;\n\n        pos.x = ( 12. - floor(mod(pos.x, 13.)) ) + (floor(pos.x/13.)*13.);\n    }\n\n    // Bitmap\n    float value = float(0x0ffe);\n    if (pos.y==0. || pos.y==12. || pos.y==25. || (pos.y>=38. && pos.y<=39.) || (pos.y>=51. && pos.y<=52.) || pos.y==64.)  value = float(0x01f0);\n    if (pos.y==1. || pos.y==11. || pos.y==24. || pos.y==37. || pos.y==40. || pos.y==50.) value = float(0x07fc);\n    if (pos.y>=4. && pos.y<=8.) value = float(0x1fff);\n    if (pos.y==13. || (pos.y>=26. && pos.y<=29.) ) value = float(0x0000);\n    if (pos.y==14.) value = float(0x060c);\n    if (pos.y==15.) value = float(0x0e0e);\n    if (pos.y==16.) value = float(0x0f1e);\n    if ( (pos.y>=17. && pos.y<=18.) || pos.y==33.) value = float(0x1f1f);\n    if ( (pos.y>=19. && pos.y<=21.) || pos.y==34.) value = float(0x1fbf);\n    if (pos.y==30.) value = float(0x1803);\n    if (pos.y==31.) value = float(0x1c07);\n    if (pos.y==32.) value = float(0x1e0f);\n    if (pos.y==43. || pos.y==47.) value = float(0x03ff);\n    if (pos.y==44. || pos.y==46.) value = float(0x007f);\n    if (pos.y==45. || pos.y==58.) value = float(0x000f);\n    if (pos.y==53. || pos.y==63.) value = float(0x01fc);\n    if (pos.y==54. || pos.y==62.) value = float(0x00fe);\n    if (pos.y==55. || pos.y==61.) value = float(0x007e);\n    if (pos.y==56. || pos.y==60.) value = float(0x003f);\n    if (pos.y==57. || pos.y==59.) value = float(0x001f);\n\n    float bit = step(0.5, mod(float(value)/exp2(pos.x+1.), 1.));\n    return vec4(1., 1., 0., bit)*vec4(bit);\n}\n\nvec4 getGhostBodyTile(in vec2 pos, in vec3 color) {\n    pos.x  = floor(mod(pos.x, 14.) );\n    pos.y = floor(mod(pos.y, 28.) );\n\n    // Ghost's body\n    // Encoded one bitplane 14x28 pixels\n\n    if (pos.y>=14. && pos.y<=25.) pos.y -= 14.; // Only last few lines of ghost animation change\n\n    float value = float(0x3fff);\n    if (pos.y==0.) value = float(0x01e0);\n    if (pos.y==1.) value = float(0x07f8);\n    if (pos.y==2.) value = float(0x0ffc);\n    if (pos.y>=3. && pos.y<=5.) value = float(0x1ffe);\n    if (pos.y==12.) value = float(0x3def);\n    if (pos.y==13.) value = float(0x18c6);\n    if (pos.y==26.) value = float(0x373b);\n    if (pos.y==27.) value = float(0x2331);\n\n    float bit = step(0.5, mod(float(value)/exp2(pos.x+1.), 1.));\n    return vec4(color, bit)*vec4(bit);\n}\n\nvec4 getGhostEatFaceTile(in vec2 pos, in vec3 color) {\n    pos.x  = floor(mod(pos.x, 14.) );\n    pos.y = floor(mod(pos.y, 14.) );\n\n    // Ghost's face - when pac can eat them\n    // Encoded one bitplane 14x14 pixels\n\n    float value = float(0x0000);\n    if (pos.y==4. || pos.y==5.) value = float(0x0330);\n    if (pos.y==8.) value = float(0x0ccc);\n    if (pos.y==9.) value = float(0x1332);\n    \n    float bit = step(0.5, mod(float(value)/exp2(pos.x+1.), 1.));\n    return vec4(color, bit)*vec4(bit);\n}\n\nvec4 getGhostEyesTile(in vec2 pos) {\n    pos.x  = floor(mod(pos.x, 14.) );\n    pos.y = floor(mod(pos.y, 56.) );\n\n    // Ghost's eyes\n    // Encoded two bitplanes 14x56 pixels\n\n    vec2 value = vec2(0x000000, 0x000000);\n    if (pos.y==1. || pos.y==36.)  value = vec2(0x140140, 0x000000);\n    if (pos.y==2. || pos.y==35.)  value = vec2(0x960960, 0x000000);\n    if ((pos.y>=3. && pos.y<=4.) || (pos.y>=33. && pos.y<=34.) ) value = vec2(0xaa0aa0, 0x000000);\n    if (pos.y==17. || pos.y==21.) value = vec2(0xa00a00, 0x000000);\n    if (pos.y==45. || pos.y==49.) value = vec2(0x0a00a0, 0x000000);\n    if (pos.y==5. || pos.y==32.)  value = vec2(0x280280, 0x000000);\n    if (pos.y==18.) value = vec2(0xa82a80, 0x000002);\n    if (pos.y>=19. && pos.y<=20.) value = vec2(0x681680, 0x000001);\n    if (pos.y==46.) value = vec2(0x2a82a8, 0x000000);\n    if (pos.y>=47. && pos.y<=48.) value = vec2(0x294294, 0x000000);\n\n    float n = mod(pos.x, 24.);\n    float t = n<12. ? value.x : value.y;\n    float p = mod(pos.x, 12.)*2.;\n    float index = floor(mod(floor(t*exp2(-p)), 4.));\n\n    vec4 color = vec4(0.);\n    if (index==1.) color = vec4(.13, .13, 1., 1.);\n    else if (index==2.) color = vec4(.88, .87, 1., 1.);\n\n    return color;\n}\n\nvec4 getCrackerTile(in vec2 pos, in float tile, in vec3 crackerScoreColor) {\n    pos.x  = floor(mod(pos.x, 48.) );\n    pos.y = floor(mod(pos.y, 48.) );\n\n    vec2 value = vec2(0.);\n\n    if (tile==0.) {\n        if (pos.y==0.) value = vec2(0x600000, 0x000600);\n        if (pos.y==1.) value = vec2(0xa00000, 0x000900);\n        if (pos.y==2.) value = vec2(0x000000, 0x000880);\n        if (pos.y==3.) value = vec2(0xf80800, 0x000a3f);\n        if (pos.y==4.) value = vec2(0xfe1800, 0x0008ff);\n        if (pos.y==5.) value = vec2(0x878800, 0xe003e1);\n        if (pos.y==6.) value = vec2(0x83c800, 0x9c0781);\n        if (pos.y==7.) value = vec2(0x80e800, 0x830f01);\n        if (pos.y==8.) value = vec2(0xe06000, 0x5c9f07);\n        if (pos.y==9.) value = vec2(0xf87000, 0x531fff);\n        if (pos.y==10.) value = vec2(0x1cf007, 0x50b9f8);\n        if (pos.y==11.) value = vec2(0x0fe7f9, 0x2830e0);\n        if (pos.y==12.) value = vec2(0x07c002, 0x2870c0);\n        if (pos.y==13.) value = vec2(0x000ff4, 0x286180);\n        if (pos.y==14.) value = vec2(0x000024, 0x146180);\n        if (pos.y==15.) value = vec2(0x000048, 0x146380);\n        if (pos.y==16.) value = vec2(0x000090, 0x0b7f80);\n        if (pos.y==17.) value = vec2(0x000120, 0x087f80);\n        if (pos.y==18.) value = vec2(0x000140, 0x066380);\n        if (pos.y==19.) value = vec2(0x000120, 0x016380);\n        if (pos.y==20.) value = vec2(0x000190, 0xff6380);\n        if (pos.y==21.) value = vec2(0x000048, 0x4071c0);\n        if (pos.y==22.) value = vec2(0x000fe8, 0x2370c0);\n        if (pos.y==23.) value = vec2(0x000804, 0x1930e0);\n        if (pos.y==24.) value = vec2(0x0009fe, 0x04b9f0);\n        if (pos.y==25.) value = vec2(0x000480, 0x025f98);\n        if (pos.y==26.) value = vec2(0x000240, 0x7c4f0c);\n        if (pos.y==27.) value = vec2(0x000120, 0x808f06);\n        if (pos.y==28.) value = vec2(0x001fd0, 0x4f0783);\n        if (pos.y==29.) value = vec2(0x802008, 0x220383);\n        if (pos.y==30.) value = vec2(0xc04ff8, 0x1901e7);\n        if (pos.y==31.) value = vec2(0x605000, 0x0480fe);\n        if (pos.y==32.) value = vec2(0x305000, 0x0e807c);\n        if (pos.y==33.) value = vec2(0x185000, 0x10483c);\n        if (pos.y==34.) value = vec2(0x0c4800, 0x3f741c);\n        if (pos.y==35.) value = vec2(0x0e4400, 0x01020f);\n        if (pos.y==36.) value = vec2(0x1f3400, 0x019a67);\n        if (pos.y==37.) value = vec2(0xf98200, 0x00aa83);\n        if (pos.y==38.) value = vec2(0xf0cf00, 0x00ab29);\n        if (pos.y==39.) value = vec2(0xf06000, 0x00ca54);\n        if (pos.y==40.) value = vec2(0x793000, 0x008894);\n        if (pos.y==41.) value = vec2(0x383000, 0x000916);\n        if (pos.y==42.) value = vec2(0x9e3000, 0x000a16);\n        if (pos.y==43.) value = vec2(0x0e3000, 0x000c15);\n        if (pos.y==44.) value = vec2(0x07e000, 0x000815);\n        if (pos.y==45.) value = vec2(0x01c000, 0x000012);\n        if (pos.y==46.) value = vec2(0x000000, 0x00000a);\n        if (pos.y==47.) value = vec2(0x004000, 0x00000c);\n    } else if (tile==1.) {\n        if (pos.y==0.) value = vec2(0x600000, 0x000600);\n        if (pos.y==1.) value = vec2(0x000000, 0x000000);\n        if (pos.y==2.) value = vec2(0xffe000, 0x001fff);\n        if (pos.y==3.) value = vec2(0xffe800, 0x001fff);\n        if (pos.y==4.) value = vec2(0x006800, 0x001800);\n        if (pos.y==5.) value = vec2(0xa86800, 0xe01b14);\n        if (pos.y==6.) value = vec2(0x246800, 0x9c1a89);\n        if (pos.y==7.) value = vec2(0x156800, 0x831862);\n        if (pos.y==8.) value = vec2(0x126800, 0x5cd814);\n        if (pos.y==9.) value = vec2(0x006800, 0x531800);\n        if (pos.y==10.) value = vec2(0xffe807, 0x50dfff);\n        if (pos.y==11.) value = vec2(0xffe7f9, 0x281fff);\n        if (pos.y==12.) value = vec2(0x006002, 0x281800);\n        if (pos.y==13.) value = vec2(0x006ff4, 0x281800);\n        if (pos.y==14.) value = vec2(0x006024, 0x141800);\n        if (pos.y==15.) value = vec2(0x006048, 0x141800);\n        if (pos.y==16.) value = vec2(0x006090, 0x0b1800);\n        if (pos.y==17.) value = vec2(0x006120, 0x089800);\n        if (pos.y==18.) value = vec2(0x006140, 0x065800);\n        if (pos.y==19.) value = vec2(0x006120, 0x015800);\n        if (pos.y==20.) value = vec2(0x006190, 0xff1800);\n        if (pos.y==21.) value = vec2(0x006048, 0x401c00);\n        if (pos.y==22.) value = vec2(0x00efe8, 0x23cc00);\n        if (pos.y==23.) value = vec2(0x00c804, 0x190c00);\n        if (pos.y==24.) value = vec2(0x0189fe, 0x048600);\n        if (pos.y==25.) value = vec2(0x038480, 0x024700);\n        if (pos.y==26.) value = vec2(0x070240, 0x7c4380);\n        if (pos.y==27.) value = vec2(0x1e0120, 0x8081e0);\n        if (pos.y==28.) value = vec2(0xf81fd0, 0x4f007f);\n        if (pos.y==29.) value = vec2(0xf02008, 0x22003f);\n        if (pos.y==30.) value = vec2(0x804ff8, 0x190007);\n        if (pos.y==31.) value = vec2(0x005000, 0x048003);\n        if (pos.y==32.) value = vec2(0x005000, 0x0e8003);\n        if (pos.y==33.) value = vec2(0x005000, 0x104803);\n        if (pos.y==34.) value = vec2(0x004800, 0x3f7403);\n        if (pos.y==35.) value = vec2(0x004400, 0x010203);\n        if (pos.y==36.) value = vec2(0x01f400, 0x019a73);\n        if (pos.y==37.) value = vec2(0x010200, 0x00aa8b);\n        if (pos.y==38.) value = vec2(0x717f00, 0x00ab2b);\n        if (pos.y==39.) value = vec2(0x094000, 0x00ca53);\n        if (pos.y==40.) value = vec2(0x654000, 0x008893);\n        if (pos.y==41.) value = vec2(0x134000, 0x000913);\n        if (pos.y==42.) value = vec2(0x094000, 0x000a13);\n        if (pos.y==43.) value = vec2(0x000000, 0x000803);\n        if (pos.y==44.) value = vec2(0xff8000, 0x000bff);\n        if (pos.y==45.) value = vec2(0xff8000, 0x0003ff);\n        if (pos.y==46.) value = vec2(0x000000, 0x000000);\n        if (pos.y==47.) value = vec2(0x004000, 0x00000c);\n    } else if (tile==2.) {\n        if (pos.y==0.) value = vec2(0x800000, 0x000603);\n        if (pos.y==1.) value = vec2(0xc00000, 0x000907);\n        if (pos.y==2.) value = vec2(0xc00000, 0x000887);\n        if (pos.y==3.) value = vec2(0xc00000, 0x000a83);\n        if (pos.y==4.) value = vec2(0xffff00, 0x000a63);\n        if (pos.y==5.) value = vec2(0xffff80, 0xe00b13);\n        if (pos.y==6.) value = vec2(0x000180, 0x9c1283);\n        if (pos.y==7.) value = vec2(0xc00180, 0x83146f);\n        if (pos.y==8.) value = vec2(0x010180, 0x5cd403);\n        if (pos.y==9.) value = vec2(0x038180, 0x533403);\n        if (pos.y==10.) value = vec2(0x038187, 0x50c403);\n        if (pos.y==11.) value = vec2(0xdff1b9, 0x283c0f);\n        if (pos.y==12.) value = vec2(0x0fe182, 0x280003);\n        if (pos.y==13.) value = vec2(0x07c1b4, 0x280003);\n        if (pos.y==14.) value = vec2(0x06c184, 0x140003);\n        if (pos.y==15.) value = vec2(0x0441c8, 0x14001f);\n        if (pos.y==16.) value = vec2(0xc001d0, 0x0b0007);\n        if (pos.y==17.) value = vec2(0x0000c0, 0x088006);\n        if (pos.y==18.) value = vec2(0x0000c0, 0x064004);\n        if (pos.y==19.) value = vec2(0x0000e0, 0x01401c);\n        if (pos.y==20.) value = vec2(0x0003e0, 0xff200f);\n        if (pos.y==21.) value = vec2(0x000ff0, 0x4020d9);\n        if (pos.y==22.) value = vec2(0x001ff0, 0x23c070);\n        if (pos.y==23.) value = vec2(0x003ff8, 0x1903f0);\n        if (pos.y==24.) value = vec2(0x003ffa, 0x041f98);\n        if (pos.y==25.) value = vec2(0x007ff8, 0x027f08);\n        if (pos.y==26.) value = vec2(0x007ff8, 0x7cff00);\n        if (pos.y==27.) value = vec2(0x007ff8, 0x80ff80);\n        if (pos.y==28.) value = vec2(0x007ff8, 0x49ff80);\n        if (pos.y==29.) value = vec2(0x003ff8, 0x23ff80);\n        if (pos.y==30.) value = vec2(0x003ff0, 0x1bff80);\n        if (pos.y==31.) value = vec2(0xfffff0, 0x03ffff);\n        if (pos.y==32.) value = vec2(0xfffffc, 0x0fffff);\n        if (pos.y==33.) value = vec2(0x00000c, 0x0c0000);\n        if (pos.y==34.) value = vec2(0xfffffc, 0x0fffff);\n        if (pos.y==35.) value = vec2(0xfffffc, 0x0fffff);\n        if (pos.y==36.) value = vec2(0x006060, 0x063030);\n        if (pos.y==37.) value = vec2(0x0139c0, 0x0f1ce0);\n        if (pos.y==38.) value = vec2(0xf11f80, 0x1f0fc0);\n        if (pos.y==39.) value = vec2(0x093fc0, 0x3f1fe5);\n        if (pos.y==40.) value = vec2(0x657fe0, 0x7f3ff5);\n        if (pos.y==41.) value = vec2(0x9379e0, 0x7f3cf6);\n        if (pos.y==42.) value = vec2(0x8970e0, 0x7f3876);\n        if (pos.y==43.) value = vec2(0x0470e0, 0x0e3875);\n        if (pos.y==44.) value = vec2(0x0279e0, 0x003cf5);\n        if (pos.y==45.) value = vec2(0x017fe0, 0x003ff2);\n        if (pos.y==46.) value = vec2(0x003fc0, 0x001fe2);\n        if (pos.y==47.) value = vec2(0x001f80, 0x000fc0);\n    }\n\n    float t =  pos.x<24.0 ? value.x : value.y;\n    float pixel = mod(pos.x, 24.);\n    float bit = step(0.5, mod(t/exp2(pixel+1.), 1.));\n    \n    return vec4(crackerScoreColor, bit)*vec4(bit);\n}\n\nvec4 getXmasPresentTile(in vec2 pos) {\n    pos.x  = floor(mod(pos.x, 18.) );\n    pos.y = floor(mod(pos.y, 19.) );\n\n    vec2 value = vec2(0.);\n    if (pos.y==0.) value = vec2(0x000150, 0x000054);\n    if (pos.y==1.) value = vec2(0x401404, 0x000101);\n    if (pos.y==2.) value = vec2(0x104004, 0x000100);\n    if (pos.y==3.) value = vec2(0x050050, 0x000050);\n    if (pos.y==4.) value = vec2(0x555500, 0x000005);\n    if (pos.y==5. || pos.y==10.)  value = vec2(0x555555, 0x000555);\n    if (pos.y>=6. && pos.y<=9.) value = vec2(0x9f6aa9, 0x0006aa);\n    if (pos.y>=11. && pos.y<=17.) value = vec2(0x9f6aa4, 0x0001aa);\n    if (pos.y==18.) value = vec2(0x555554, 0x000155);\n\n    float n = mod(pos.x, 24.);\n    float t = n<12. ? value.x : value.y;\n    float p = mod(pos.x, 12.)*2.;\n    float index = floor(mod(floor(t*exp2(-p)), 4.));\n\n    vec4 color = vec4(0.);\n    if (index==1.) color = vec4(0.13, 0.13, 1., 1.);\n    if (index==2.) color = vec4(1., 0., 0., 1.);\n    if (index==3.) color = vec4(0.97, 0.73, 0.33, 1.);\n\n    return color;\n}\n\nbool needToRenderPellet(in vec2 position, in float currentPercentage, in vec4 pacmanCalculatedPosition) {\n    bool ret = true;\n\n    // Convert current pixel position to top left of current block on map\n    position = floor(position/8.)*8.;\n    vec4 block = vec4(position, position+8.);\n\n    // Test for outside area of map - don't need to perform other checks in this case - maybe faster, maybe not\n    if (position.x<0. || position.x>=MAP_SIZE.x*MAP_TILE_SIZE.x\n     || position.y<0. || position.y>=MAP_SIZE.y*MAP_TILE_SIZE.y) {\n        return false;\n    }\n\n    // Remove all pellets from the line pacman is currently traversing\n    vec2 pacmanStartVector = pacmanCalculatedPosition.zw; // pacman's current point between start vector and end vector\n    vec2 pacmanCurrentPosition = pacmanCalculatedPosition.xy; // the start vector - see getSpritePosition()\n    translateLineToCartesianCoordinates(pacmanStartVector, pacmanCurrentPosition);\n\n    // Hopefully a return here will make it faster - but probably not\n    if (block.x<pacmanStartVector.x && block.z>pacmanCurrentPosition.x && block.y<pacmanStartVector.y && block.w>pacmanCurrentPosition.y) {\n        return false;\n    }\n\n    // Remove all pellets from lines pacman has already traversed\n\n    if (currentPercentage>=0.01282051 && block.x<132. && block.z>132. && block.y<28. && block.w>4.) ret = false;\n    if (currentPercentage>=0.01851852 && block.x<148. && block.z>132. && block.y<28. && block.w>28.) ret = false;\n    if (currentPercentage>=0.02706553 && block.x<148. && block.z>148. && block.y<52. && block.w>28.) ret = false;\n    if (currentPercentage>=0.04700855 && block.x<148. && block.z>92. && block.y<52. && block.w>52.) ret = false;\n    if (currentPercentage>=0.05555556 && block.x<92. && block.z>92. && block.y<52. && block.w>28.) ret = false;\n    if (currentPercentage>=0.06125356 && block.x<108. && block.z>92. && block.y<28. && block.w>28.) ret = false;\n    if (currentPercentage>=0.06980057 && block.x<108. && block.z>108. && block.y<28. && block.w>4.) ret = false;\n    if (currentPercentage>=0.10683761 && block.x<164. && block.z>148. && block.y<52. && block.w>52.) ret = false;\n    if (currentPercentage>=0.11538462 && block.x<164. && block.z>164. && block.y<76. && block.w>52.) ret = false;\n    if (currentPercentage>=0.12678063 && block.x<164. && block.z>132. && block.y<76. && block.w>76.) ret = false;\n    if (currentPercentage>=0.13532764 && block.x<132. && block.z>132. && block.y<100. && block.w>76.) ret = false;\n    if (currentPercentage>=0.15527066 && block.x<188. && block.z>132. && block.y<100. && block.w>100.) ret = false;\n    if (currentPercentage>=0.16381766 && block.x<188. && block.z>188. && block.y<100. && block.w>76.) ret = false;\n    if (currentPercentage>=0.17236467 && block.x<188. && block.z>164. && block.y<76. && block.w>76.) ret = false;\n    if (currentPercentage>=0.21794872 && block.x<188. && block.z>108. && block.y<100. && block.w>100.) ret = false;\n    if (currentPercentage>=0.22649573 && block.x<108. && block.z>108. && block.y<100. && block.w>76.) ret = false;\n    if (currentPercentage>=0.23789174 && block.x<108. && block.z>76. && block.y<76. && block.w>76.) ret = false;\n    if (currentPercentage>=0.24643875 && block.x<76. && block.z>76. && block.y<76. && block.w>52.) ret = false;\n    if (currentPercentage>=0.25071225 && block.x<88. && block.z>76. && block.y<52. && block.w>52.) ret = false;\n    if (currentPercentage>=0.27207977 && block.x<76. && block.z>52. && block.y<76. && block.w>76.) ret = false;\n    if (currentPercentage>=0.28062678 && block.x<52. && block.z>52. && block.y<100. && block.w>76.) ret = false;\n    if (currentPercentage>=0.29487179 && block.x<92. && block.z>52. && block.y<100. && block.w>100.) ret = false;\n    if (currentPercentage>=0.31766382 && block.x<52. && block.z>52. && block.y<124. && block.w>100.) ret = false;\n    if (currentPercentage>=0.32905983 && block.x<52. && block.z>20. && block.y<124. && block.w>124.) ret = false;\n    if (currentPercentage>=0.33760684 && block.x<20. && block.z>20. && block.y<148. && block.w>124.) ret = false;\n    if (currentPercentage>=0.38319088 && block.x<76. && block.z>76. && block.y<124. && block.w>100.) ret = false;\n    if (currentPercentage>=0.39458689 && block.x<108. && block.z>76. && block.y<124. && block.w>124.) ret = false; \n    if (currentPercentage>=0.40313390 && block.x<108. && block.z>108. && block.y<148. && block.w>124.) ret = false;\n    if (currentPercentage>=0.41168091 && block.x<132. && block.z>108. && block.y<148. && block.w>148.) ret = false;\n    if (currentPercentage>=0.42022792 && block.x<132. && block.z>132. && block.y<148. && block.w>124.) ret = false;\n    if (currentPercentage>=0.43162393 && block.x<164. && block.z>132. && block.y<124. && block.w>124.) ret = false;\n    if (currentPercentage>=0.44017094 && block.x<164. && block.z>164. && block.y<124. && block.w>100.) ret = false;\n    if (currentPercentage>=0.45726496 && block.x<188. && block.z>188. && block.y<124. && block.w>100.) ret = false;\n    if (currentPercentage>=0.46866097 && block.x<220. && block.z>188. && block.y<124. && block.w>124.) ret = false;\n    if (currentPercentage>=0.47720798 && block.x<220. && block.z>220. && block.y<148. && block.w>124.) ret = false;\n    if (currentPercentage>=0.50284900 && block.x<220. && block.z>148. && block.y<148. && block.w>148.) ret = false;\n    if (currentPercentage>=0.51709402 && block.x<164. && block.z>164. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.52849003 && block.x<164. && block.z>132. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.53703704 && block.x<132. && block.z>132. && block.y<196. && block.w>172.) ret = false;\n    if (currentPercentage>=0.57407407 && block.x<236. && block.z>132. && block.y<196. && block.w>196.) ret = false;\n    if (currentPercentage>=0.58262108 && block.x<236. && block.z>236. && block.y<196. && block.w>172.) ret = false;\n    if (currentPercentage>=0.59116809 && block.x<236. && block.z>212. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.59971510 && block.x<212. && block.z>212. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.61680912 && block.x<188. && block.z>188. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.63390313 && block.x<236. && block.z>188. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.68803419 && block.x<132. && block.z>132. && block.y<220. && block.w>196.) ret = false;\n    if (currentPercentage>=0.69658120 && block.x<132. && block.z>108. && block.y<220. && block.w>220.) ret = false;\n    if (currentPercentage>=0.71367521 && block.x<108. && block.z>108. && block.y<220. && block.w>172.) ret = false;\n    if (currentPercentage>=0.72507123 && block.x<108. && block.z>76. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.73361823 && block.x<76. && block.z>76. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.74501425 && block.x<108. && block.z>76. && block.y<148. && block.w>148.) ret = false;\n    if (currentPercentage>=0.81339031 && block.x<28. && block.z>20. && block.y<148. && block.w>148.) ret = false;\n    if (currentPercentage>=0.82193732 && block.x<28. && block.z>28. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.83048433 && block.x<52. && block.z>28. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.83903134 && block.x<52. && block.z>52. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.84757835 && block.x<52. && block.z>28. && block.y<148. && block.w>148.) ret = false;\n    if (currentPercentage>=0.85612536 && block.x<28. && block.z>28. && block.y<172. && block.w>148.) ret = false;\n    if (currentPercentage>=0.86467236 && block.x<28. && block.z>4. && block.y<172. && block.w>172.) ret = false;\n    if (currentPercentage>=0.87321937 && block.x<4. && block.z>4. && block.y<196. && block.w>172.) ret = false;\n    if (currentPercentage>=0.91025641 && block.x<108. && block.z>4. && block.y<196. && block.w>196.) ret = false;\n    if (currentPercentage>=0.999 && block.x<148. && block.z>60. && block.y<148. && block.w>148.) ret = false;\n\n    return ret;\n}\n\nvec4 getPacmanPositionData(float currentPercentage) {\n    vec4 ret = vec4(0.);\n\n    // Contains all details at this current percentage point in the animation to render pacman.\n    // currentPercentage is: mod(iTime, animationDuration) / animationDuration\n\n    // This seems to be the fastest way I've found to do it!\n\n    // vec4( // Actually vec7 etc\n    //  <start vector x>.<start vector y/1000>, \n    //  <end vector x>.<end vector y/1000>, \n    //  <animation frame>.<percentage start - the percentage start point within full animation where this line starts>,\n    //  <percentage amount - percentage of the full animation this line occupies>\n    // )\n\n    if (currentPercentage<=1.00000000) ret = vec4(164.148, 64.148, 15.96438746, 0.03561254);\n    if (currentPercentage<=0.96438746) ret = vec4(164.172, 164.148, 12.95584046, 0.00854701);\n    if (currentPercentage<=0.95584046) ret = vec4(132.172, 164.172, 13.94444444, 0.01139601);\n    if (currentPercentage<=0.94444444) ret = vec4(132.22, 132.172, 12.92735043, 0.01709402);\n    if (currentPercentage<=0.92735043) ret = vec4(108.22, 132.22, 13.91880342, 0.00854701);\n    if (currentPercentage<=0.91880342) ret = vec4(108.196, 108.22, 14.91025641, 0.00854701);\n    if (currentPercentage<=0.91025641) ret = vec4(4.196, 108.196, 13.87321937, 0.03703704);\n    if (currentPercentage<=0.87321937) ret = vec4(4.172, 4.196, 14.86467236, 0.00854701);\n    if (currentPercentage<=0.86467236) ret = vec4(28.172, 4.172, 15.85612536, 0.00854701);\n    if (currentPercentage<=0.85612536) ret = vec4(28.148, 28.172, 14.84757835, 0.00854701);\n    if (currentPercentage<=0.84757835) ret = vec4(52.148, 28.148, 15.83903134, 0.00854701);\n    if (currentPercentage<=0.83903134) ret = vec4(52.172, 52.148, 12.83048433, 0.00854701);\n    if (currentPercentage<=0.83048433) ret = vec4(28.172, 52.172, 13.82193732, 0.00854701);\n    if (currentPercentage<=0.82193732) ret = vec4(28.148, 28.172, 14.813390309999999, 0.00854701);\n    if (currentPercentage<=0.81339031) ret = vec4(20.148, 28.148, 13.81054131, 0.00284900);\n    if (currentPercentage<=0.81054131) ret = vec4(20.124, 20.148, 14.8019943, 0.00854701);\n    if (currentPercentage<=0.80199430) ret = vec4(52.124, 20.124, 15.79059829, 0.01139601);\n    if (currentPercentage<=0.79059829) ret = vec4(52.1, 52.124, 14.78205128, 0.00854701);\n    if (currentPercentage<=0.78205128) ret = vec4(76.1, 52.1, 15.77350427, 0.00854701);\n    if (currentPercentage<=0.77350427) ret = vec4(76.124, 76.1, 12.76495726, 0.00854701);\n    if (currentPercentage<=0.76495726) ret = vec4(108.124, 76.124, 15.75356125, 0.01139601);\n    if (currentPercentage<=0.75356125) ret = vec4(108.148, 108.124, 12.74501425, 0.00854701);\n    if (currentPercentage<=0.74501425) ret = vec4(76.148, 108.148, 13.73361823, 0.01139601);\n    if (currentPercentage<=0.73361823) ret = vec4(76.172, 76.148, 12.72507123, 0.00854701);\n    if (currentPercentage<=0.72507123) ret = vec4(108.172, 76.172, 15.71367521, 0.01139601);\n    if (currentPercentage<=0.71367521) ret = vec4(108.22, 108.172, 12.6965812, 0.01709402);\n    if (currentPercentage<=0.69658120) ret = vec4(132.22, 108.22, 15.68803419, 0.00854701);\n    if (currentPercentage<=0.68803419) ret = vec4(132.196, 132.22, 14.67948718, 0.00854701);\n    if (currentPercentage<=0.67948718) ret = vec4(236.196, 132.196, 15.64245014, 0.03703704);\n    if (currentPercentage<=0.64245014) ret = vec4(236.172, 236.196, 14.63390313, 0.00854701);\n    if (currentPercentage<=0.63390313) ret = vec4(188.172, 236.172, 13.61680912, 0.01709402);\n    if (currentPercentage<=0.61680912) ret = vec4(188.148, 188.172, 14.60826211, 0.00854701);\n    if (currentPercentage<=0.60826211) ret = vec4(212.148, 188.148, 15.5997151, 0.00854701);\n    if (currentPercentage<=0.59971510) ret = vec4(212.172, 212.148, 12.59116809, 0.00854701);\n    if (currentPercentage<=0.59116809) ret = vec4(236.172, 212.172, 15.58262108, 0.00854701);\n    if (currentPercentage<=0.58262108) ret = vec4(236.196, 236.172, 12.57407407, 0.00854701);\n    if (currentPercentage<=0.57407407) ret = vec4(132.196, 236.196, 13.53703704, 0.03703704);\n    if (currentPercentage<=0.53703704) ret = vec4(132.172, 132.196, 14.52849003, 0.00854701);\n    if (currentPercentage<=0.52849003) ret = vec4(164.172, 132.172, 15.51709402, 0.01139601);\n    if (currentPercentage<=0.51709402) ret = vec4(164.148, 164.172, 14.508547010000001, 0.00854701);\n    if (currentPercentage<=0.50854701) ret = vec4(148.148, 164.148, 13.502849, 0.00569801);\n    if (currentPercentage<=0.50284900) ret = vec4(220.148, 148.148, 15.47720798, 0.02564103);\n    if (currentPercentage<=0.47720798) ret = vec4(220.124, 220.148, 14.46866097, 0.00854701);\n    if (currentPercentage<=0.46866097) ret = vec4(188.124, 220.124, 13.45726496, 0.01139601);\n    if (currentPercentage<=0.45726496) ret = vec4(188.1, 188.124, 14.44871795, 0.00854701);\n    if (currentPercentage<=0.44871795) ret = vec4(164.1, 188.1, 13.44017094, 0.00854701);\n    if (currentPercentage<=0.44017094) ret = vec4(164.124, 164.1, 12.43162393, 0.00854701);\n    if (currentPercentage<=0.43162393) ret = vec4(132.124, 164.124, 13.42022792, 0.01139601);\n    if (currentPercentage<=0.42022792) ret = vec4(132.148, 132.124, 12.41168091, 0.00854701);\n    if (currentPercentage<=0.41168091) ret = vec4(108.148, 132.148, 13.4031339, 0.00854701);\n    if (currentPercentage<=0.40313390) ret = vec4(108.124, 108.148, 14.39458689, 0.00854701);\n    if (currentPercentage<=0.39458689) ret = vec4(76.124, 108.124, 13.38319088, 0.01139601);\n    if (currentPercentage<=0.38319088) ret = vec4(76.1, 76.124, 14.37464387, 0.00854701);\n    if (currentPercentage<=0.37464387) ret = vec4(52.1, 76.1, 13.36609687, 0.00854701);\n    if (currentPercentage<=0.36609687) ret = vec4(52.124, 52.1, 12.35754986, 0.00854701);\n    if (currentPercentage<=0.35754986) ret = vec4(20.124, 52.124, 13.34615385, 0.01139601);\n    if (currentPercentage<=0.34615385) ret = vec4(20.148, 20.124, 12.33760684, 0.00854701);\n    if (currentPercentage<=0.33760684) ret = vec4(20.124, 20.148, 14.32905983, 0.00854701);\n    if (currentPercentage<=0.32905983) ret = vec4(52.124, 20.124, 15.31766382, 0.01139601);\n    if (currentPercentage<=0.31766382) ret = vec4(52.1, 52.124, 14.30911681, 0.00854701);\n    if (currentPercentage<=0.30911681) ret = vec4(92.1, 52.1, 15.29487179, 0.01424501);\n    if (currentPercentage<=0.29487179) ret = vec4(52.1, 92.1, 13.28062678, 0.01424501);\n    if (currentPercentage<=0.28062678) ret = vec4(52.076, 52.1, 14.27207977, 0.00854701);\n    if (currentPercentage<=0.27207977) ret = vec4(76.076, 52.076, 15.26353276, 0.00854701);\n    if (currentPercentage<=0.26353276) ret = vec4(76.052, 76.076, 14.25498575, 0.00854701);\n    if (currentPercentage<=0.25498575) ret = vec4(88.052, 76.052, 15.25071225, 0.00427350);\n    if (currentPercentage<=0.25071225) ret = vec4(76.052, 88.052, 13.24643875, 0.00427350);\n    if (currentPercentage<=0.24643875) ret = vec4(76.076, 76.052, 12.23789174, 0.00854701);\n    if (currentPercentage<=0.23789174) ret = vec4(108.076, 76.076, 15.22649573, 0.01139601);\n    if (currentPercentage<=0.22649573) ret = vec4(108.1, 108.076, 12.21794872, 0.00854701);\n    if (currentPercentage<=0.21794872) ret = vec4(188.1, 108.1, 15.18945869, 0.02849003);\n    if (currentPercentage<=0.18945869) ret = vec4(188.076, 188.1, 14.18091168, 0.00854701);\n    if (currentPercentage<=0.18091168) ret = vec4(164.076, 188.076, 13.17236467, 0.00854701);\n    if (currentPercentage<=0.17236467) ret = vec4(188.076, 164.076, 15.16381766, 0.00854701);\n    if (currentPercentage<=0.16381766) ret = vec4(188.1, 188.076, 12.15527066, 0.00854701);\n    if (currentPercentage<=0.15527066) ret = vec4(132.1, 188.1, 13.13532764, 0.01994302);\n    if (currentPercentage<=0.13532764) ret = vec4(132.076, 132.1, 14.12678063, 0.00854701);\n    if (currentPercentage<=0.12678063) ret = vec4(164.076, 132.076, 15.11538462, 0.01139601);\n    if (currentPercentage<=0.11538462) ret = vec4(164.052, 164.076, 14.10683761, 0.00854701);\n    if (currentPercentage<=0.10683761) ret = vec4(148.052, 164.052, 13.1011396, 0.00569801);\n    if (currentPercentage<=0.10113960) ret = vec4(148.028, 148.052, 14.09259259, 0.00854701);\n    if (currentPercentage<=0.09259259) ret = vec4(132.028, 148.028, 13.08689459, 0.00569801);\n    if (currentPercentage<=0.08689459) ret = vec4(132.004, 132.028, 14.07834758, 0.00854701);\n    if (currentPercentage<=0.07834758) ret = vec4(108.004, 132.004, 13.06980057, 0.00854701);\n    if (currentPercentage<=0.06980057) ret = vec4(108.028, 108.004, 12.06125356, 0.00854701);\n    if (currentPercentage<=0.06125356) ret = vec4(92.028, 108.028, 13.05555556, 0.00569801);\n    if (currentPercentage<=0.05555556) ret = vec4(92.052, 92.028, 12.04700855, 0.00854701);\n    if (currentPercentage<=0.04700855) ret = vec4(148.052, 92.052, 15.02706553, 0.01994302);\n    if (currentPercentage<=0.02706553) ret = vec4(148.028, 148.052, 14.01851852, 0.00854701);\n    if (currentPercentage<=0.01851852) ret = vec4(132.028, 148.028, 13.01282051, 0.00569801);\n    if (currentPercentage<=0.01282051) ret = vec4(132.004, 132.028, 14.0042735, 0.00854701);\n    if (currentPercentage<=0.00427350) ret = vec4(120.004, 132.004, 13, 0.00427350);       \n\n    return ret;\n}\n\nvec4 getRedPositionData(float currentPercentage) {\n    vec4 ret = vec4(0.);\n\n    // See getPacmanPositionData for explanation\n\n    if (currentPercentage<=1.00000000) ret = vec4(108.076, 96.076, 15.9957265, 0.00427350);\n    if (currentPercentage<=0.99572650) ret = vec4(108.1, 108.076, 12.98717949, 0.00854701);\n    if (currentPercentage<=0.98717949) ret = vec4(92.1, 108.1, 13.98148148, 0.00569801);\n    if (currentPercentage<=0.98148148) ret = vec4(76.1, 92.1, 9.97578348, 0.00569801);\n    if (currentPercentage<=0.97578348) ret = vec4(76.124, 76.1, 8.96723647, 0.00854701);\n    if (currentPercentage<=0.96723647) ret = vec4(108.124, 76.124, 11.95584046, 0.01139601);\n    if (currentPercentage<=0.95584046) ret = vec4(108.148, 108.124, 8.94729345, 0.00854701);\n    if (currentPercentage<=0.94729345) ret = vec4(52.148, 108.148, 9.92735043, 0.01994302);\n    if (currentPercentage<=0.92735043) ret = vec4(52.172, 52.148, 8.91880342, 0.00854701);\n    if (currentPercentage<=0.91880342) ret = vec4(4.172, 52.172, 9.9017094, 0.01709402);\n    if (currentPercentage<=0.90170940) ret = vec4(4.196, 4.172, 8.89316239, 0.00854701);\n    if (currentPercentage<=0.89316239) ret = vec4(32.196, 4.196, 11.88319088, 0.00997151);\n    if (currentPercentage<=0.88319088) ret = vec4(84.196, 32.196, 20.86467236, 0.01851852);\n    if (currentPercentage<=0.86467236) ret = vec4(108.196, 84.196, 15.85612536, 0.00854701);\n    if (currentPercentage<=0.85612536) ret = vec4(108.22, 108.196, 12.84757835, 0.00854701);\n    if (currentPercentage<=0.84757835) ret = vec4(132.22, 108.22, 15.83903134, 0.00854701);\n    if (currentPercentage<=0.83903134) ret = vec4(132.172, 132.22, 14.82193732, 0.01709402);\n    if (currentPercentage<=0.82193732) ret = vec4(164.172, 132.172, 15.81054131, 0.01139601);\n    if (currentPercentage<=0.81054131) ret = vec4(164.148, 164.172, 14.8019943, 0.00854701);\n    if (currentPercentage<=0.80199430) ret = vec4(220.148, 164.148, 15.78205128, 0.01994302);\n    if (currentPercentage<=0.78205128) ret = vec4(220.124, 220.148, 14.77350427, 0.00854701);\n    if (currentPercentage<=0.77350427) ret = vec4(188.124, 220.124, 13.76210826, 0.01139601);\n    if (currentPercentage<=0.76210826) ret = vec4(188.076, 188.124, 14.74501425, 0.01709402);\n    if (currentPercentage<=0.74501425) ret = vec4(132.076, 188.076, 13.72507123, 0.01994302);\n    if (currentPercentage<=0.72507123) ret = vec4(132.1, 132.076, 12.71652422, 0.00854701);\n    if (currentPercentage<=0.71652422) ret = vec4(108.1, 132.1, 13.70797721, 0.00854701);\n    if (currentPercentage<=0.70797721) ret = vec4(108.076, 108.1, 14.6994302, 0.00854701);\n    if (currentPercentage<=0.69943020) ret = vec4(76.076, 108.076, 13.68803419, 0.01139601);\n    if (currentPercentage<=0.68803419) ret = vec4(76.052, 76.076, 14.67948718, 0.00854701);\n    if (currentPercentage<=0.67948718) ret = vec4(164.052, 76.052, 15.64814815, 0.03133903);\n    if (currentPercentage<=0.64814815) ret = vec4(164.056, 164.052, 12.64672365, 0.00142450);\n    if (currentPercentage<=0.64672365) ret = vec4(164.076, 164.056, 52.63960114, 0.00712251);\n    if (currentPercentage<=0.63960114) ret = vec4(132.076, 164.076, 52.62820513, 0.01139601);\n    if (currentPercentage<=0.62820513) ret = vec4(132.1, 132.076, 52.61965812, 0.00854701);\n    if (currentPercentage<=0.61965812) ret = vec4(112.1, 132.1, 52.61253561, 0.00712251);\n    if (currentPercentage<=0.61253561) ret = vec4(76.1, 112.1, 20.5997151, 0.01282051);\n    if (currentPercentage<=0.59971510) ret = vec4(76.124, 76.1, 20.59116809, 0.00854701);\n    if (currentPercentage<=0.59116809) ret = vec4(100.124, 76.124, 20.58262108, 0.00854701);\n    if (currentPercentage<=0.58262108) ret = vec4(108.124, 100.124, 15.57977208, 0.00284900);\n    if (currentPercentage<=0.57977208) ret = vec4(108.148, 108.124, 12.57122507, 0.00854701);\n    if (currentPercentage<=0.57122507) ret = vec4(52.148, 108.148, 13.55128205, 0.01994302);\n    if (currentPercentage<=0.55128205) ret = vec4(52.172, 52.148, 12.54273504, 0.00854701);\n    if (currentPercentage<=0.54273504) ret = vec4(4.172, 52.172, 13.52564103, 0.01709402);\n    if (currentPercentage<=0.52564103) ret = vec4(4.196, 4.172, 12.51709402, 0.00854701);\n    if (currentPercentage<=0.51709402) ret = vec4(108.196, 4.196, 15.48005698, 0.03703704);\n    if (currentPercentage<=0.48005698) ret = vec4(108.172, 108.196, 14.47150997, 0.00854701);\n    if (currentPercentage<=0.47150997) ret = vec4(76.172, 108.172, 13.46011396, 0.01139601);\n    if (currentPercentage<=0.46011396) ret = vec4(76.148, 76.172, 14.45156695, 0.00854701);\n    if (currentPercentage<=0.45156695) ret = vec4(108.148, 76.148, 15.44017094, 0.01139601);\n    if (currentPercentage<=0.44017094) ret = vec4(108.124, 108.148, 14.43162393, 0.00854701);\n    if (currentPercentage<=0.43162393) ret = vec4(76.124, 108.124, 13.42022792, 0.01139601);\n    if (currentPercentage<=0.42022792) ret = vec4(76.1, 76.124, 14.41168091, 0.00854701);\n    if (currentPercentage<=0.41168091) ret = vec4(132.1, 76.1, 15.39173789, 0.01994302);\n    if (currentPercentage<=0.39173789) ret = vec4(132.076, 132.1, 14.38319088, 0.00854701);\n    if (currentPercentage<=0.38319088) ret = vec4(164.076, 132.076, 15.37179487, 0.01139601);\n    if (currentPercentage<=0.37179487) ret = vec4(164.052, 164.076, 14.36324786, 0.00854701);\n    if (currentPercentage<=0.36324786) ret = vec4(148.052, 164.052, 13.35754986, 0.00569801);\n    if (currentPercentage<=0.35754986) ret = vec4(148.028, 148.052, 14.34900285, 0.00854701);\n    if (currentPercentage<=0.34900285) ret = vec4(132.028, 148.028, 13.34330484, 0.00569801);\n    if (currentPercentage<=0.34330484) ret = vec4(132.008, 132.028, 14.33618234, 0.00712251);\n    if (currentPercentage<=0.33618234) ret = vec4(132.004, 132.008, 52.33475783, 0.00142450);\n    if (currentPercentage<=0.33475783) ret = vec4(108.004, 132.004, 52.32621083, 0.00854701);\n    if (currentPercentage<=0.32621083) ret = vec4(108.028, 108.004, 52.31766382, 0.00854701);\n    if (currentPercentage<=0.31766382) ret = vec4(92.028, 108.028, 52.31196581, 0.00569801);\n    if (currentPercentage<=0.31196581) ret = vec4(92.052, 92.028, 52.3034188, 0.00854701);\n    if (currentPercentage<=0.30341880) ret = vec4(96.052, 92.052, 52.3019943, 0.00142450);\n    if (currentPercentage<=0.30199430) ret = vec4(164.052, 96.052, 20.27777778, 0.02421652);\n    if (currentPercentage<=0.27777778) ret = vec4(164.068, 164.052, 20.27207977, 0.00569801);\n    if (currentPercentage<=0.27207977) ret = vec4(164.076, 164.068, 12.26923077, 0.00284900);\n    if (currentPercentage<=0.26923077) ret = vec4(188.076, 164.076, 15.26068376, 0.00854701);\n    if (currentPercentage<=0.26068376) ret = vec4(188.124, 188.076, 12.24358974, 0.01709402);\n    if (currentPercentage<=0.24358974) ret = vec4(220.124, 188.124, 15.23219373, 0.01139601);\n    if (currentPercentage<=0.23219373) ret = vec4(220.14, 220.124, 12.22649573, 0.00569801);\n    if (currentPercentage<=0.22649573) ret = vec4(220.148, 220.14, 52.22364672, 0.00284900);\n    if (currentPercentage<=0.22364672) ret = vec4(164.148, 220.148, 52.2037037, 0.01994302);\n    if (currentPercentage<=0.20370370) ret = vec4(164.172, 164.148, 52.1951567, 0.00854701);\n    if (currentPercentage<=0.19515670) ret = vec4(156.172, 164.172, 52.19230769, 0.00284900);\n    if (currentPercentage<=0.19230769) ret = vec4(132.172, 156.172, 20.18376068, 0.00854701);\n    if (currentPercentage<=0.18376068) ret = vec4(132.22, 132.172, 20.16666667, 0.01709402);\n    if (currentPercentage<=0.16666667) ret = vec4(120.22, 132.22, 20.16239316, 0.00427350);\n    if (currentPercentage<=0.16239316) ret = vec4(108.22, 120.22, 13.15811966, 0.00427350);\n    if (currentPercentage<=0.15811966) ret = vec4(108.172, 108.22, 14.14102564, 0.01709402);\n    if (currentPercentage<=0.14102564) ret = vec4(76.172, 108.172, 13.12962963, 0.01139601);\n    if (currentPercentage<=0.12962963) ret = vec4(76.148, 76.172, 14.12108262, 0.00854701);\n    if (currentPercentage<=0.12108262) ret = vec4(132.148, 76.148, 15.1011396, 0.01994302);\n    if (currentPercentage<=0.10113960) ret = vec4(132.124, 132.148, 14.09259259, 0.00854701);\n    if (currentPercentage<=0.09259259) ret = vec4(164.124, 132.124, 15.08119658, 0.01139601);\n    if (currentPercentage<=0.08119658) ret = vec4(164.1, 164.124, 14.07264957, 0.00854701);\n    if (currentPercentage<=0.07264957) ret = vec4(108.1, 164.1, 13.05270655, 0.01994302);\n    if (currentPercentage<=0.05270655) ret = vec4(108.076, 108.1, 14.04415954, 0.00854701);\n    if (currentPercentage<=0.04415954) ret = vec4(52.076, 108.076, 13.02421652, 0.01994302);\n    if (currentPercentage<=0.02421652) ret = vec4(52.1, 52.076, 12.01566952, 0.00854701);\n    if (currentPercentage<=0.01566952) ret = vec4(96.1, 52.1, 15, 0.01566952);\n\n    return ret;\n}\n\nvec4 getPinkPositionData(float currentPercentage) {\n    vec4 ret = vec4(0.);\n\n    // See getPacmanPositionData for explanation\n\n    if (currentPercentage<=1.00000000) ret = vec4(236.196, 192.196, 15.98433048, 0.01566952);\n    if (currentPercentage<=0.98433048) ret = vec4(236.172, 236.196, 14.97578348, 0.00854701);\n    if (currentPercentage<=0.97578348) ret = vec4(188.172, 236.172, 13.95868946, 0.01709402);\n    if (currentPercentage<=0.95868946) ret = vec4(188.148, 188.172, 14.95014245, 0.00854701);\n    if (currentPercentage<=0.95014245) ret = vec4(220.148, 188.148, 15.93874644, 0.01139601);\n    if (currentPercentage<=0.93874644) ret = vec4(220.124, 220.148, 14.93019943, 0.00854701);\n    if (currentPercentage<=0.93019943) ret = vec4(216.124, 220.124, 13.92877493, 0.00142450);\n    if (currentPercentage<=0.92877493) ret = vec4(188.124, 216.124, 52.91880342, 0.00997151);\n    if (currentPercentage<=0.91880342) ret = vec4(188.1, 188.124, 52.91025641, 0.00854701);\n    if (currentPercentage<=0.91025641) ret = vec4(164.1, 188.1, 52.9017094, 0.00854701);\n    if (currentPercentage<=0.90170940) ret = vec4(164.12, 164.1, 52.89458689, 0.00712251);\n    if (currentPercentage<=0.89458689) ret = vec4(164.124, 164.12, 20.89316239, 0.00142450);\n    if (currentPercentage<=0.89316239) ret = vec4(132.124, 164.124, 20.88176638, 0.01139601);\n    if (currentPercentage<=0.88176638) ret = vec4(132.148, 132.124, 20.87321937, 0.00854701);\n    if (currentPercentage<=0.87321937) ret = vec4(108.148, 132.148, 20.86467236, 0.00854701);\n    if (currentPercentage<=0.86467236) ret = vec4(76.148, 108.148, 13.85327635, 0.01139601);\n    if (currentPercentage<=0.85327635) ret = vec4(76.172, 76.148, 12.84472934, 0.00854701);\n    if (currentPercentage<=0.84472934) ret = vec4(108.172, 76.172, 15.83333333, 0.01139601);\n    if (currentPercentage<=0.83333333) ret = vec4(108.196, 108.172, 12.82478632, 0.00854701);\n    if (currentPercentage<=0.82478632) ret = vec4(4.196, 108.196, 13.78774929, 0.03703704);\n    if (currentPercentage<=0.78774929) ret = vec4(4.172, 4.196, 14.77920228, 0.00854701);\n    if (currentPercentage<=0.77920228) ret = vec4(52.172, 4.172, 15.76210826, 0.01709402);\n    if (currentPercentage<=0.76210826) ret = vec4(52.148, 52.172, 14.75356125, 0.00854701);\n    if (currentPercentage<=0.75356125) ret = vec4(20.148, 52.148, 13.74216524, 0.01139601);\n    if (currentPercentage<=0.74216524) ret = vec4(20.124, 20.148, 14.73361823, 0.00854701);\n    if (currentPercentage<=0.73361823) ret = vec4(52.124, 20.124, 15.72222222, 0.01139601);\n    if (currentPercentage<=0.72222222) ret = vec4(52.1, 52.124, 14.71367521, 0.00854701);\n    if (currentPercentage<=0.71367521) ret = vec4(148.1, 52.1, 15.67948718, 0.03418803);\n    if (currentPercentage<=0.67948718) ret = vec4(164.1, 148.1, 11.67378917, 0.00569801);\n    if (currentPercentage<=0.67378917) ret = vec4(164.124, 164.1, 8.665242169999999, 0.00854701);\n    if (currentPercentage<=0.66524217) ret = vec4(132.124, 164.124, 9.65384615, 0.01139601);\n    if (currentPercentage<=0.65384615) ret = vec4(132.148, 132.124, 8.64529915, 0.00854701);\n    if (currentPercentage<=0.64529915) ret = vec4(188.148, 132.148, 11.62535613, 0.01994302);\n    if (currentPercentage<=0.62535613) ret = vec4(188.172, 188.148, 8.61680912, 0.00854701);\n    if (currentPercentage<=0.61680912) ret = vec4(200.172, 188.172, 52.61253561, 0.00427350);\n    if (currentPercentage<=0.61253561) ret = vec4(236.172, 200.172, 20.5997151, 0.01282051);\n    if (currentPercentage<=0.59971510) ret = vec4(236.196, 236.172, 20.59116809, 0.00854701);\n    if (currentPercentage<=0.59116809) ret = vec4(212.196, 236.196, 20.58262108, 0.00854701);\n    if (currentPercentage<=0.58262108) ret = vec4(132.196, 212.196, 13.55413105, 0.02849003);\n    if (currentPercentage<=0.55413105) ret = vec4(132.22, 132.196, 12.54558405, 0.00854701);\n    if (currentPercentage<=0.54558405) ret = vec4(108.22, 132.22, 13.53703704, 0.00854701);\n    if (currentPercentage<=0.53703704) ret = vec4(108.172, 108.22, 14.51994302, 0.01709402);\n    if (currentPercentage<=0.51994302) ret = vec4(76.172, 108.172, 13.508547010000001, 0.01139601);\n    if (currentPercentage<=0.50854701) ret = vec4(76.148, 76.172, 14.5, 0.00854701);\n    if (currentPercentage<=0.50000000) ret = vec4(108.148, 76.148, 15.48860399, 0.01139601);\n    if (currentPercentage<=0.48860399) ret = vec4(108.124, 108.148, 14.48005698, 0.00854701);\n    if (currentPercentage<=0.48005698) ret = vec4(76.124, 108.124, 13.46866097, 0.01139601);\n    if (currentPercentage<=0.46866097) ret = vec4(76.1, 76.124, 14.46011396, 0.00854701);\n    if (currentPercentage<=0.46011396) ret = vec4(132.1, 76.1, 15.44017094, 0.01994302);\n    if (currentPercentage<=0.44017094) ret = vec4(132.076, 132.1, 14.43162393, 0.00854701);\n    if (currentPercentage<=0.43162393) ret = vec4(188.076, 132.076, 15.41168091, 0.01994302);\n    if (currentPercentage<=0.41168091) ret = vec4(188.1, 188.076, 12.4031339, 0.00854701);\n    if (currentPercentage<=0.40313390) ret = vec4(148.1, 188.1, 13.38888889, 0.01424501);\n    if (currentPercentage<=0.38888889) ret = vec4(52.1, 148.1, 9.35470085, 0.03418803);\n    if (currentPercentage<=0.35470085) ret = vec4(52.124, 52.1, 8.34615385, 0.00854701);\n    if (currentPercentage<=0.34615385) ret = vec4(20.124, 52.124, 9.33475783, 0.01139601);\n    if (currentPercentage<=0.33475783) ret = vec4(20.132, 20.124, 8.33190883, 0.00284900);\n    if (currentPercentage<=0.33190883) ret = vec4(20.148, 20.132, 52.32621083, 0.00569801);\n    if (currentPercentage<=0.32621083) ret = vec4(52.148, 20.148, 52.31481481, 0.01139601);\n    if (currentPercentage<=0.31481481) ret = vec4(52.172, 52.148, 52.30626781, 0.00854701);\n    if (currentPercentage<=0.30626781) ret = vec4(40.172, 52.172, 52.3019943, 0.00427350);\n    if (currentPercentage<=0.30199430) ret = vec4(4.172, 40.172, 20.28917379, 0.01282051);\n    if (currentPercentage<=0.28917379) ret = vec4(4.196, 4.172, 20.28062678, 0.00854701);\n    if (currentPercentage<=0.28062678) ret = vec4(28.196, 4.196, 20.27207977, 0.00854701);\n    if (currentPercentage<=0.27207977) ret = vec4(108.196, 28.196, 15.24358974, 0.02849003);\n    if (currentPercentage<=0.24358974) ret = vec4(108.172, 108.196, 14.23504274, 0.00854701);\n    if (currentPercentage<=0.23504274) ret = vec4(84.172, 108.172, 13.22649573, 0.00854701);\n    if (currentPercentage<=0.22649573) ret = vec4(76.172, 84.172, 52.22364672, 0.00284900);\n    if (currentPercentage<=0.22364672) ret = vec4(76.148, 76.172, 52.21509972, 0.00854701);\n    if (currentPercentage<=0.21509972) ret = vec4(108.148, 76.148, 52.2037037, 0.01139601);\n    if (currentPercentage<=0.20370370) ret = vec4(108.124, 108.148, 52.1951567, 0.00854701);\n    if (currentPercentage<=0.19515670) ret = vec4(100.124, 108.124, 52.19230769, 0.00284900);\n    if (currentPercentage<=0.19230769) ret = vec4(76.124, 100.124, 20.18376068, 0.00854701);\n    if (currentPercentage<=0.18376068) ret = vec4(76.1, 76.124, 20.17521368, 0.00854701);\n    if (currentPercentage<=0.17521368) ret = vec4(112.1, 76.1, 20.16239316, 0.01282051);\n    if (currentPercentage<=0.16239316) ret = vec4(132.1, 112.1, 15.15527066, 0.00712251);\n    if (currentPercentage<=0.15527066) ret = vec4(132.076, 132.1, 14.14672365, 0.00854701);\n    if (currentPercentage<=0.14672365) ret = vec4(164.076, 132.076, 15.13532764, 0.01139601);\n    if (currentPercentage<=0.13532764) ret = vec4(164.052, 164.076, 14.12678063, 0.00854701);\n    if (currentPercentage<=0.12678063) ret = vec4(148.052, 164.052, 13.12108262, 0.00569801);\n    if (currentPercentage<=0.12108262) ret = vec4(148.028, 148.052, 14.11253561, 0.00854701);\n    if (currentPercentage<=0.11253561) ret = vec4(132.028, 148.028, 13.10683761, 0.00569801);\n    if (currentPercentage<=0.10683761) ret = vec4(132.004, 132.028, 14.0982906, 0.00854701);\n    if (currentPercentage<=0.09829060) ret = vec4(108.004, 132.004, 13.08974359, 0.00854701);\n    if (currentPercentage<=0.08974359) ret = vec4(108.028, 108.004, 12.08119658, 0.00854701);\n    if (currentPercentage<=0.08119658) ret = vec4(92.028, 108.028, 13.07549858, 0.00569801);\n    if (currentPercentage<=0.07549858) ret = vec4(92.052, 92.028, 12.06695157, 0.00854701);\n    if (currentPercentage<=0.06695157) ret = vec4(164.052, 92.052, 15.04131054, 0.02564103);\n    if (currentPercentage<=0.04131054) ret = vec4(164.076, 164.052, 12.03276353, 0.00854701);\n    if (currentPercentage<=0.03276353) ret = vec4(188.076, 164.076, 15.02421652, 0.00854701);\n    if (currentPercentage<=0.02421652) ret = vec4(188.1, 188.076, 12.01566952, 0.00854701);\n    if (currentPercentage<=0.01566952) ret = vec4(144.1, 188.1, 13, 0.01566952);\n\n    return ret;\n}\n\nvec4 getCyanPositionData(float currentPercentage) {\n    vec4 ret = vec4(0.);\n\n    // See getPacmanPositionData for explanation\n\n    if (currentPercentage<=1.00000000) ret = vec4(148.052, 160.052, 13.9957265, 0.00427350);\n    if (currentPercentage<=0.99572650) ret = vec4(148.028, 148.052, 14.98717949, 0.00854701);\n    if (currentPercentage<=0.98717949) ret = vec4(132.028, 148.028, 13.98148148, 0.00569801);\n    if (currentPercentage<=0.98148148) ret = vec4(132.004, 132.028, 14.97293447, 0.00854701);\n    if (currentPercentage<=0.97293447) ret = vec4(108.004, 132.004, 13.96438746, 0.00854701);\n    if (currentPercentage<=0.96438746) ret = vec4(108.028, 108.004, 12.95584046, 0.00854701);\n    if (currentPercentage<=0.95584046) ret = vec4(92.028, 108.028, 13.95014245, 0.00569801);\n    if (currentPercentage<=0.95014245) ret = vec4(92.052, 92.028, 12.94159544, 0.00854701);\n    if (currentPercentage<=0.94159544) ret = vec4(128.052, 92.052, 15.92877493, 0.01282051);\n    if (currentPercentage<=0.92877493) ret = vec4(164.052, 128.052, 52.91595442, 0.01282051);\n    if (currentPercentage<=0.91595442) ret = vec4(164.076, 164.052, 52.90740741, 0.00854701);\n    if (currentPercentage<=0.90740741) ret = vec4(132.076, 164.076, 52.8960114, 0.01139601);\n    if (currentPercentage<=0.89601140) ret = vec4(132.08, 132.076, 52.89458689, 0.00142450);\n    if (currentPercentage<=0.89458689) ret = vec4(132.1, 132.08, 20.88746439, 0.00712251);\n    if (currentPercentage<=0.88746439) ret = vec4(68.1, 132.1, 20.86467236, 0.02279202);\n    if (currentPercentage<=0.86467236) ret = vec4(52.1, 68.1, 13.85897436, 0.00569801);\n    if (currentPercentage<=0.85897436) ret = vec4(52.124, 52.1, 12.85042735, 0.00854701);\n    if (currentPercentage<=0.85042735) ret = vec4(20.124, 52.124, 13.83903134, 0.01139601);\n    if (currentPercentage<=0.83903134) ret = vec4(20.148, 20.124, 12.83048433, 0.00854701);\n    if (currentPercentage<=0.83048433) ret = vec4(76.148, 20.148, 15.81054131, 0.01994302);\n    if (currentPercentage<=0.81054131) ret = vec4(76.172, 76.148, 12.8019943, 0.00854701);\n    if (currentPercentage<=0.80199430) ret = vec4(108.172, 76.172, 15.79059829, 0.01139601);\n    if (currentPercentage<=0.79059829) ret = vec4(108.22, 108.172, 12.77350427, 0.01709402);\n    if (currentPercentage<=0.77350427) ret = vec4(132.22, 108.22, 15.76495726, 0.00854701);\n    if (currentPercentage<=0.76495726) ret = vec4(132.196, 132.22, 14.75641026, 0.00854701);\n    if (currentPercentage<=0.75641026) ret = vec4(236.196, 132.196, 15.71937322, 0.03703704);\n    if (currentPercentage<=0.71937322) ret = vec4(236.172, 236.196, 14.71082621, 0.00854701);\n    if (currentPercentage<=0.71082621) ret = vec4(188.172, 236.172, 13.69373219, 0.01709402);\n    if (currentPercentage<=0.69373219) ret = vec4(188.148, 188.172, 14.68518519, 0.00854701);\n    if (currentPercentage<=0.68518519) ret = vec4(108.148, 188.148, 13.65669516, 0.02849003);\n    if (currentPercentage<=0.65669516) ret = vec4(108.124, 108.148, 14.64814815, 0.00854701);\n    if (currentPercentage<=0.64814815) ret = vec4(104.124, 108.124, 13.64672365, 0.00142450);\n    if (currentPercentage<=0.64672365) ret = vec4(76.124, 104.124, 52.63675214, 0.00997151);\n    if (currentPercentage<=0.63675214) ret = vec4(76.1, 76.124, 52.62820513, 0.00854701);\n    if (currentPercentage<=0.62820513) ret = vec4(52.1, 76.1, 52.61965812, 0.00854701);\n    if (currentPercentage<=0.61965812) ret = vec4(52.08, 52.1, 52.61253561, 0.00712251);\n    if (currentPercentage<=0.61253561) ret = vec4(52.076, 52.08, 20.61111111, 0.00142450);\n    if (currentPercentage<=0.61111111) ret = vec4(76.076, 52.076, 20.6025641, 0.00854701);\n    if (currentPercentage<=0.60256410) ret = vec4(76.052, 76.076, 20.59401709, 0.00854701);\n    if (currentPercentage<=0.59401709) ret = vec4(108.052, 76.052, 20.58262108, 0.01139601);\n    if (currentPercentage<=0.58262108) ret = vec4(164.052, 108.052, 15.56267806, 0.01994302);\n    if (currentPercentage<=0.56267806) ret = vec4(164.076, 164.052, 12.55413105, 0.00854701);\n    if (currentPercentage<=0.55413105) ret = vec4(132.076, 164.076, 13.54273504, 0.01139601);\n    if (currentPercentage<=0.54273504) ret = vec4(132.1, 132.076, 12.53418803, 0.00854701);\n    if (currentPercentage<=0.53418803) ret = vec4(164.1, 132.1, 15.52279202, 0.01139601);\n    if (currentPercentage<=0.52279202) ret = vec4(164.124, 164.1, 12.51424501, 0.00854701);\n    if (currentPercentage<=0.51424501) ret = vec4(132.124, 164.124, 13.502849, 0.01139601);\n    if (currentPercentage<=0.50284900) ret = vec4(132.148, 132.124, 12.49430199, 0.00854701);\n    if (currentPercentage<=0.49430199) ret = vec4(188.148, 132.148, 15.47435897, 0.01994302);\n    if (currentPercentage<=0.47435897) ret = vec4(188.172, 188.148, 12.46581197, 0.00854701);\n    if (currentPercentage<=0.46581197) ret = vec4(236.172, 188.172, 15.44871795, 0.01709402);\n    if (currentPercentage<=0.44871795) ret = vec4(236.196, 236.172, 12.44017094, 0.00854701);\n    if (currentPercentage<=0.44017094) ret = vec4(132.196, 236.196, 13.4031339, 0.03703704);\n    if (currentPercentage<=0.40313390) ret = vec4(132.22, 132.196, 12.39458689, 0.00854701);\n    if (currentPercentage<=0.39458689) ret = vec4(108.22, 132.22, 13.38603989, 0.00854701);\n    if (currentPercentage<=0.38603989) ret = vec4(108.172, 108.22, 14.36894587, 0.01709402);\n    if (currentPercentage<=0.36894587) ret = vec4(76.172, 108.172, 13.35754986, 0.01139601);\n    if (currentPercentage<=0.35754986) ret = vec4(76.148, 76.172, 14.34900285, 0.00854701);\n    if (currentPercentage<=0.34900285) ret = vec4(96.148, 76.148, 15.34188034, 0.00712251);\n    if (currentPercentage<=0.34188034) ret = vec4(108.148, 96.148, 11.33760684, 0.00427350);\n    if (currentPercentage<=0.33760684) ret = vec4(108.124, 108.148, 10.32905983, 0.00854701);\n    if (currentPercentage<=0.32905983) ret = vec4(76.124, 108.124, 9.31766382, 0.01139601);\n    if (currentPercentage<=0.31766382) ret = vec4(76.1, 76.124, 10.30911681, 0.00854701);\n    if (currentPercentage<=0.30911681) ret = vec4(64.1, 76.1, 9.3048433, 0.00427350);\n    if (currentPercentage<=0.30484330) ret = vec4(56.1, 64.1, 52.3019943, 0.00284900);\n    if (currentPercentage<=0.30199430) ret = vec4(52.1, 56.1, 20.3005698, 0.00142450);\n    if (currentPercentage<=0.30056980) ret = vec4(52.124, 52.1, 20.29202279, 0.00854701);\n    if (currentPercentage<=0.29202279) ret = vec4(20.124, 52.124, 20.28062678, 0.01139601);\n    if (currentPercentage<=0.28062678) ret = vec4(20.148, 20.124, 20.27207977, 0.00854701);\n    if (currentPercentage<=0.27207977) ret = vec4(96.148, 20.148, 15.24501425, 0.02706553);\n    if (currentPercentage<=0.24501425) ret = vec4(132.148, 96.148, 11.23219373, 0.01282051);\n    if (currentPercentage<=0.23219373) ret = vec4(132.124, 132.148, 10.22364672, 0.00854701);\n    if (currentPercentage<=0.22364672) ret = vec4(164.124, 132.124, 11.21225071, 0.01139601);\n    if (currentPercentage<=0.21225071) ret = vec4(164.1, 164.124, 10.2037037, 0.00854701);\n    if (currentPercentage<=0.20370370) ret = vec4(156.1, 164.1, 9.2008547, 0.00284900);\n    if (currentPercentage<=0.20085470) ret = vec4(132.1, 156.1, 52.19230769, 0.00854701);\n    if (currentPercentage<=0.19230769) ret = vec4(108.1, 132.1, 20.18376068, 0.00854701);\n    if (currentPercentage<=0.18376068) ret = vec4(108.076, 108.1, 20.17521368, 0.00854701);\n    if (currentPercentage<=0.17521368) ret = vec4(72.076, 108.076, 20.16239316, 0.01282051);\n    if (currentPercentage<=0.16239316) ret = vec4(52.076, 72.076, 13.15527066, 0.00712251);\n    if (currentPercentage<=0.15527066) ret = vec4(52.124, 52.076, 12.13817664, 0.01709402);\n    if (currentPercentage<=0.13817664) ret = vec4(20.124, 52.124, 13.12678063, 0.01139601);\n    if (currentPercentage<=0.12678063) ret = vec4(20.148, 20.124, 12.11823362, 0.00854701);\n    if (currentPercentage<=0.11823362) ret = vec4(52.148, 20.148, 15.10683761, 0.01139601);\n    if (currentPercentage<=0.10683761) ret = vec4(52.172, 52.148, 12.0982906, 0.00854701);\n    if (currentPercentage<=0.09829060) ret = vec4(4.172, 52.172, 13.08119658, 0.01709402);\n    if (currentPercentage<=0.08119658) ret = vec4(4.196, 4.172, 12.07264957, 0.00854701);\n    if (currentPercentage<=0.07264957) ret = vec4(108.196, 4.196, 15.03561254, 0.03703704);\n    if (currentPercentage<=0.03561254) ret = vec4(108.172, 108.196, 14.02706553, 0.00854701);\n    if (currentPercentage<=0.02706553) ret = vec4(76.172, 108.172, 13.01566952, 0.01139601);\n    if (currentPercentage<=0.01566952) ret = vec4(76.148, 76.172, 14.00712251, 0.00854701);\n    if (currentPercentage<=0.00712251) ret = vec4(96.148, 76.148, 15, 0.00712251);\n\n    return ret;\n}\n\nvec4 getOrangePositionData(float currentPercentage) {\n    vec4 ret = vec4(0.);\n\n    // See getPacmanPositionData for explanation\n\n    if (currentPercentage<=1.00000000) ret = vec4(4.196, 8.196, 13.9985755, 0.00142450);\n    if (currentPercentage<=0.99857550) ret = vec4(4.172, 4.196, 14.99002849, 0.00854701);\n    if (currentPercentage<=0.99002849) ret = vec4(52.172, 4.172, 15.97293447, 0.01709402);\n    if (currentPercentage<=0.97293447) ret = vec4(52.148, 52.172, 14.96438746, 0.00854701);\n    if (currentPercentage<=0.96438746) ret = vec4(20.148, 52.148, 13.95299145, 0.01139601);\n    if (currentPercentage<=0.95299145) ret = vec4(20.124, 20.148, 14.94444444, 0.00854701);\n    if (currentPercentage<=0.94444444) ret = vec4(52.124, 20.124, 15.93304843, 0.01139601);\n    if (currentPercentage<=0.93304843) ret = vec4(52.112, 52.124, 14.92877493, 0.00427350);\n    if (currentPercentage<=0.92877493) ret = vec4(52.1, 52.112, 52.92450142, 0.00427350);\n    if (currentPercentage<=0.92450142) ret = vec4(108.1, 52.1, 52.9045584, 0.01994302);\n    if (currentPercentage<=0.90455840) ret = vec4(108.076, 108.1, 52.8960114, 0.00854701);\n    if (currentPercentage<=0.89601140) ret = vec4(104.076, 108.076, 52.89458689, 0.00142450);\n    if (currentPercentage<=0.89458689) ret = vec4(76.076, 104.076, 20.88461538, 0.00997151);\n    if (currentPercentage<=0.88461538) ret = vec4(76.052, 76.076, 20.87606838, 0.00854701);\n    if (currentPercentage<=0.87606838) ret = vec4(108.052, 76.052, 20.86467236, 0.01139601);\n    if (currentPercentage<=0.86467236) ret = vec4(164.052, 108.052, 15.84472934, 0.01994302);\n    if (currentPercentage<=0.84472934) ret = vec4(164.076, 164.052, 12.83618234, 0.00854701);\n    if (currentPercentage<=0.83618234) ret = vec4(132.076, 164.076, 13.82478632, 0.01139601);\n    if (currentPercentage<=0.82478632) ret = vec4(132.1, 132.076, 12.81623932, 0.00854701);\n    if (currentPercentage<=0.81623932) ret = vec4(164.1, 132.1, 15.8048433, 0.01139601);\n    if (currentPercentage<=0.80484330) ret = vec4(164.124, 164.1, 12.7962963, 0.00854701);\n    if (currentPercentage<=0.79629630) ret = vec4(132.124, 164.124, 13.78490028, 0.01139601);\n    if (currentPercentage<=0.78490028) ret = vec4(132.148, 132.124, 12.77635328, 0.00854701);\n    if (currentPercentage<=0.77635328) ret = vec4(76.148, 132.148, 13.75641026, 0.01994302);\n    if (currentPercentage<=0.75641026) ret = vec4(76.172, 76.148, 12.74786325, 0.00854701);\n    if (currentPercentage<=0.74786325) ret = vec4(108.172, 76.172, 15.73646724, 0.01139601);\n    if (currentPercentage<=0.73646724) ret = vec4(108.196, 108.172, 12.72792023, 0.00854701);\n    if (currentPercentage<=0.72792023) ret = vec4(4.196, 108.196, 13.69088319, 0.03703704);\n    if (currentPercentage<=0.69088319) ret = vec4(4.172, 4.196, 14.68233618, 0.00854701);\n    if (currentPercentage<=0.68233618) ret = vec4(52.172, 4.172, 15.665242169999999, 0.01709402);\n    if (currentPercentage<=0.66524217) ret = vec4(52.148, 52.172, 14.65669516, 0.00854701);\n    if (currentPercentage<=0.65669516) ret = vec4(80.148, 52.148, 15.64672365, 0.00997151);\n    if (currentPercentage<=0.64672365) ret = vec4(132.148, 80.148, 52.62820513, 0.01851852);\n    if (currentPercentage<=0.62820513) ret = vec4(132.124, 132.148, 52.61965812, 0.00854701);\n    if (currentPercentage<=0.61965812) ret = vec4(152.124, 132.124, 52.61253561, 0.00712251);\n    if (currentPercentage<=0.61253561) ret = vec4(164.124, 152.124, 20.60826211, 0.00427350);\n    if (currentPercentage<=0.60826211) ret = vec4(164.1, 164.124, 20.5997151, 0.00854701);\n    if (currentPercentage<=0.59971510) ret = vec4(116.1, 164.1, 20.58262108, 0.01709402);\n    if (currentPercentage<=0.58262108) ret = vec4(108.1, 116.1, 13.57977208, 0.00284900);\n    if (currentPercentage<=0.57977208) ret = vec4(108.076, 108.1, 14.57122507, 0.00854701);\n    if (currentPercentage<=0.57122507) ret = vec4(76.076, 108.076, 13.55982906, 0.01139601);\n    if (currentPercentage<=0.55982906) ret = vec4(76.052, 76.076, 14.55128205, 0.00854701);\n    if (currentPercentage<=0.55128205) ret = vec4(92.052, 76.052, 15.54558405, 0.00569801);\n    if (currentPercentage<=0.54558405) ret = vec4(92.028, 92.052, 14.53703704, 0.00854701);\n    if (currentPercentage<=0.53703704) ret = vec4(108.028, 92.028, 15.53133903, 0.00569801);\n    if (currentPercentage<=0.53133903) ret = vec4(108.004, 108.028, 14.52279202, 0.00854701);\n    if (currentPercentage<=0.52279202) ret = vec4(132.004, 108.004, 15.51424501, 0.00854701);\n    if (currentPercentage<=0.51424501) ret = vec4(132.028, 132.004, 12.50569801, 0.00854701);\n    if (currentPercentage<=0.50569801) ret = vec4(148.028, 132.028, 15.5, 0.00569801);\n    if (currentPercentage<=0.50000000) ret = vec4(148.052, 148.028, 12.491452989999999, 0.00854701);\n    if (currentPercentage<=0.49145299) ret = vec4(76.052, 148.052, 13.46581197, 0.02564103);\n    if (currentPercentage<=0.46581197) ret = vec4(76.076, 76.052, 12.45726496, 0.00854701);\n    if (currentPercentage<=0.45726496) ret = vec4(108.076, 76.076, 15.44586895, 0.01139601);\n    if (currentPercentage<=0.44586895) ret = vec4(108.1, 108.076, 12.43732194, 0.00854701);\n    if (currentPercentage<=0.43732194) ret = vec4(52.1, 108.1, 13.41737892, 0.01994302);\n    if (currentPercentage<=0.41737892) ret = vec4(52.124, 52.1, 12.40883191, 0.00854701);\n    if (currentPercentage<=0.40883191) ret = vec4(20.124, 52.124, 13.3974359, 0.01139601);\n    if (currentPercentage<=0.39743590) ret = vec4(20.148, 20.124, 12.38888889, 0.00854701);\n    if (currentPercentage<=0.38888889) ret = vec4(52.148, 20.148, 15.37749288, 0.01139601);\n    if (currentPercentage<=0.37749288) ret = vec4(52.172, 52.148, 12.36894587, 0.00854701);\n    if (currentPercentage<=0.36894587) ret = vec4(4.172, 52.172, 13.35185185, 0.01709402);\n    if (currentPercentage<=0.35185185) ret = vec4(4.196, 4.172, 12.34330484, 0.00854701);\n    if (currentPercentage<=0.34330484) ret = vec4(24.196, 4.196, 15.33618234, 0.00712251);\n    if (currentPercentage<=0.33618234) ret = vec4(108.196, 24.196, 52.30626781, 0.02991453);\n    if (currentPercentage<=0.30626781) ret = vec4(108.208, 108.196, 52.3019943, 0.00427350);\n    if (currentPercentage<=0.30199430) ret = vec4(108.22, 108.208, 20.2977208, 0.00427350);\n    if (currentPercentage<=0.29772080) ret = vec4(132.22, 108.22, 20.28917379, 0.00854701);\n    if (currentPercentage<=0.28917379) ret = vec4(132.172, 132.22, 20.27207977, 0.01709402);\n    if (currentPercentage<=0.27207977) ret = vec4(164.172, 132.172, 15.26068376, 0.01139601);\n    if (currentPercentage<=0.26068376) ret = vec4(164.148, 164.172, 14.25213675, 0.00854701);\n    if (currentPercentage<=0.25213675) ret = vec4(144.148, 164.148, 13.24501425, 0.00712251);\n    if (currentPercentage<=0.24501425) ret = vec4(132.148, 144.148, 9.24074074, 0.00427350);\n    if (currentPercentage<=0.24074074) ret = vec4(132.124, 132.148, 10.23219373, 0.00854701);\n    if (currentPercentage<=0.23219373) ret = vec4(164.124, 132.124, 11.22079772, 0.01139601);\n    if (currentPercentage<=0.22079772) ret = vec4(164.1, 164.124, 10.21225071, 0.00854701);\n    if (currentPercentage<=0.21225071) ret = vec4(132.1, 164.1, 9.2008547, 0.01139601);\n    if (currentPercentage<=0.20085470) ret = vec4(132.076, 132.1, 10.19230769, 0.00854701);\n    if (currentPercentage<=0.19230769) ret = vec4(176.076, 132.076, 11.17663818, 0.01566952);\n    if (currentPercentage<=0.17663818) ret = vec4(188.076, 176.076, 20.17236467, 0.00427350);\n    if (currentPercentage<=0.17236467) ret = vec4(188.1, 188.076, 20.16381766, 0.00854701);\n    if (currentPercentage<=0.16381766) ret = vec4(184.1, 188.1, 20.16239316, 0.00142450);\n    if (currentPercentage<=0.16239316) ret = vec4(164.1, 184.1, 13.15527066, 0.00712251);\n    if (currentPercentage<=0.15527066) ret = vec4(164.124, 164.1, 12.14672365, 0.00854701);\n    if (currentPercentage<=0.14672365) ret = vec4(132.124, 164.124, 13.13532764, 0.01139601);\n    if (currentPercentage<=0.13532764) ret = vec4(132.148, 132.124, 12.12678063, 0.00854701);\n    if (currentPercentage<=0.12678063) ret = vec4(164.148, 132.148, 15.11538462, 0.01139601);\n    if (currentPercentage<=0.11538462) ret = vec4(164.172, 164.148, 12.10683761, 0.00854701);\n    if (currentPercentage<=0.10683761) ret = vec4(132.172, 164.172, 13.0954416, 0.01139601);\n    if (currentPercentage<=0.09544160) ret = vec4(132.196, 132.172, 12.08689459, 0.00854701);\n    if (currentPercentage<=0.08689459) ret = vec4(236.196, 132.196, 15.04985755, 0.03703704);\n    if (currentPercentage<=0.04985755) ret = vec4(236.172, 236.196, 14.04131054, 0.00854701);\n    if (currentPercentage<=0.04131054) ret = vec4(188.172, 236.172, 13.02421652, 0.01709402);\n    if (currentPercentage<=0.02421652) ret = vec4(188.148, 188.172, 14.01566952, 0.00854701);\n    if (currentPercentage<=0.01566952) ret = vec4(144.148, 188.148, 13, 0.01566952);\n\n    return ret;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}