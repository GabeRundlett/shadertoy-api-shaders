{
    "Shader": {
        "info": {
            "date": "1656270750",
            "description": "Complex atanh - darkmode edition\nMore work tinkering based on mlas shader Complex atanh - https://www.shadertoy.com/view/tsBXRW",
            "flags": 0,
            "hasliked": 0,
            "id": "sstfzM",
            "likes": 25,
            "name": "Complex atanh - darkmode edition",
            "published": 3,
            "tags": [
                "2d",
                "complex"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "// License CC0 - Complex atanh - darkmode edition\n// More work tinkering based on mlas shader Complex atanh - https://www.shadertoy.com/view/tsBXRW\n#define DARKMODE\n#define FASTATAN\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n#if defined(FASTATAN)\n#define ATAN atan_approx\n#else\n#define ATAN atan\n#endif\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// Complex trig functions found at: Complex Atanh - https://www.shadertoy.com/view/tsBXRW\n//  A very cool shader\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2 (z.x*w.x-z.y*w.y, z.x*w.y+z.y*w.x);\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),ATAN(z.y,z.x));\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}\n\n// My own attempt at an ctanh\nvec2 cexp(vec2 z) {\n  float r = exp(z.x);\n  return r*vec2(cos(z.y), sin(z.y));\n}\n\nvec2 ctanh(vec2 z) {\n  z = cexp(2.0*z);\n  return cdiv(vec2(1,0)-z,vec2(1,0)+z);\n}\n\nfloat circle8(vec2 p, float r) {\n  p *= p;\n  p *= p;\n  return pow(dot(p, p),1.0/8.0)-r;\n}\n\nvec2 transform(vec2 z, out float aa, out vec2 hscale) {\n  float A = 9.0;\n  float B = 2.0;\n  if (iMouse.x > 0.0) {\n    // Get angle from mouse position\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    m *= 20.0;\n    A = floor(m.x), B = floor(m.y);\n  }\n\n  vec2 rot = vec2(A, B);\n  float a = TIME;\n  z *= 2.0;\n  z = catanh(-0.5*z+0.5*vec2(sin(a*0.234*sqrt(0.5)), sin(a*0.234)))+catanh(z*ROT(0.1234*a));\n  z /= PI;\n\n  aa = fwidth(z.x);\n  aa *= length(rot);\n  z = cmul(rot,z);\n  z.x += 0.5*a;\n\n  hscale = 1.0/rot.yx;\n  return z;\n}\n\nvec3 effect(vec3 col, vec2 op) {\n  op *= ROT(0.05*TIME);\n\n  float aaa = 2.0/RESOLUTION.y;\n  float aa;\n  vec2 hscale;\n  vec2 p = transform(op, aa, hscale);\n\n  vec2 n = round(p);\n  p -= n; // Neat!\n\n  float d = circle8(p, 0.45);\n\n  vec2 pf = p;\n  float sf = sign(pf.x*pf.y);\n  pf = abs(pf);\n  float df = sf*min(pf.x, pf.y);\n  float flip = smoothstep(aa, -aa, df);\n\n#if defined(DARKMODE)\n  col = vec3(0.0);\n  float fo = tanh_approx(0.333*aaa/(aa*hscale.x*hscale.y));\n  vec3 rgb = hsv2rgb(vec3(fract(0.65+0.2*sin(0.5*TIME+0.25*flip+PI*dot(n, hscale))), mix(0.0, 0.75, fo), mix(1.0, 0.05, fo*fo)));\n#else\n  col = vec3(1.0);\n  float fo = tanh_approx(0.125*aaa/(aa*hscale.x*hscale.y));\n  vec3 rgb = hsv2rgb(vec3(fract(0.05*TIME+0.125*flip+0.5*dot(hscale, n)), mix(0.0, 0.75, fo), mix(1.0, 0.85, fo*fo)));\n#endif\n\n  rgb = mix(rgb, smoothstep(0.5, 1.0, rgb), flip);\n  col = mix(col, rgb, smoothstep(aa, -aa, d));\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q  = fragCoord/RESOLUTION.xy;\n  vec2 p  = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = vec3(1.0);\n  col = effect(col, p);\n  col = clamp(col, 0.0, 1.0);\n  col *= smoothstep(0.0, 3.0, TIME);\n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}