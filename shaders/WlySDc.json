{
    "Shader": {
        "info": {
            "date": "1583694259",
            "description": "Experimenting with exotic sorting methods.  No idea why this works. Performance is exactly O(N*ceil(log2(N))^2).",
            "flags": 32,
            "hasliked": 0,
            "id": "WlySDc",
            "likes": 14,
            "name": "Multi XOR sorting",
            "published": 3,
            "tags": [
                "xor",
                "sort",
                "sorting",
                "parallel"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "// Fork of \"Bitonic sorting network\" by michael0884. https://shadertoy.com/view/ttVXDV\n// 2020-03-08 15:43:17\n\nvec2 getID(float id)\n{\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    N = float(min(size.x, size.y));\n    p = floor(vec2(1.,1.)*p);\n    if(p.x < N && p.y < N)\n    {\n    \tfloat id = p.x + p.y*N;\n        vec2 i = getID(id);\n        vec2 i1 = getID(id+1.);\n    \t//fragColor.xyz = 1.*vec3(1,1,1)*jet_range(getParticle(i1.x).z - getParticle(i.x).z,-0.1,0.1);\n    \tfragColor.xyz = 1.*getParticle(i.x).xyz;\n    } else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//particle buffer\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    N = float(min(size.x, size.y));\n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch0, pos);\n\n        U = pixel(ch2, pos*vec2(512.,512.)/vec2(N,N));\n        U.w = length(U.xyz);\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n//N^2 is the point number\nfloat N;\n#define slowdown 1.\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\n\nuniform sampler2D fake;\n\nvec4 getParticle(float id)\n{\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(fake, vec2(x,y));\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//sorting network\n\n//get particle id from id array\nfloat getID(float id)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).x;\n}\n\n//flip n bits\nfloat XORN(float x, float n)\n{\n    int X = int(x);\n    int pow2m1 = (1<<int(n+1.)) - 1;\n    return float(X^(pow2m1));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{  \n    N = float(min(size.x, size.y));\n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n        \n        float id = pos.x + pos.y*N;  \n        \n        if(mod(float(iFrame), slowdown) == 0.)\n        {\n            float frame = floor(float(iFrame)/slowdown);\n\t\t\t\n            float order = mod(-frame, ceil(log2(N*N))+1.);\n            \n            //pair id\n            float pid = XORN(id, order); \n\n            if(pid < N*N) //if inside the array\n            {\n               float p0_id = getID(id);\n               float p1_id = getID(pid);\n                \n               vec4 val0 = getParticle(p0_id);\n               vec4 val1 = getParticle(p1_id);\n                \n               float cmin = (val0.w<val1.w) ? p0_id: p1_id;\n         \t   float cmax = (val0.w<val1.w) ? p1_id: p0_id;\n\n          \t   U.x = (pid > id) ? cmin : cmax; //swap sorted\n            }\n        }\n        \n\t\t\n        if(iFrame < 1)\n        {\n            U.x = id;\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}