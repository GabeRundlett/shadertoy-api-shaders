{
    "Shader": {
        "info": {
            "date": "1558399990",
            "description": "Plot the [url=https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor]Rössler attractor[/url] by integrating the defining differential equations.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtS3zz",
            "likes": 7,
            "name": "Rössler Attractor",
            "published": 3,
            "tags": [
                "3d",
                "math",
                "differential",
                "ode"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Plotting the Rössler attractor (https://en.wikipedia.org/wiki/R%C3%B6ssler_attractor) by integrating the ODEs\n\n// colors\n\n#define BG vec3(0.18, 0.28, 0.23)\n#define COL vec3(0.86, 0.15, 0.27)\n\n// maximum number of steps\n\n#define MAXSTEPS 999\n\n// ODE for Rössler attractor\n\nvec3 rhs( float t, vec3 p )\n{\n    float x = p.x, y = p.y, z = p.z;\n    const float a = 0.25, b = 0.2, c = 4.6; // parameters\n    \n    return vec3(-y - z, b + y * (x - c), x + a * z);\n}\n\n// line segment distance\n\nfloat segment(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n\treturn length(p - b * clamp(dot(p, b) / dot(b, b), 0.0, 1.0));\n}\n\n// rotation matrix\n\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n    \n// 3D -> 2D projection\n\nvec2 proj( in float p, in float c, in vec3 P )\n{\n    float q = -p * sqrt(1.0 - c * c);\n\n    return mat3x2(-p, q, 0.0, c, p, q) * P;\n}\n\n// 3D curve drawing, adapted from https://www.shadertoy.com/view/4lyyWw by Fabrice Neyret\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ep = 40.0/iResolution.y;\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n    uv = 35.0 * uv + vec2(0.0, 5.5); // shift and scale to fit in window\n    \n    vec3 P = vec3(0.0, 0.0, 1.0); // initial conditions\n    float t = 0.0, tmax = 75.0; // integration interval\n    \n    vec3 Pn, Pt, P1;\n    vec2 pb, p;\n    float d = 1.0e3, dt;\n    \n    float h = tmax/float(MAXSTEPS); // step size\n    \n    for (int i = 0; i <= MAXSTEPS; i++)\n    {\n        if (i > 0) // explicit midpoint method, https://en.wikipedia.org/wiki/Midpoint_method\n        {\n            P1 = P + 0.5 * h * rhs(t, P);\n            P += h * rhs(t + 0.5 * h, P1);\n            t += h;\n        }\n \n        Pt = P;\n        Pt.xz *= rot(2.2 * iTime); // rotation\n        p = proj(sqrt(0.5), 0.8, Pt); // screen projection\n\n        if (i > 0)\n        {\n            dt = segment(uv, pb, p) * (( 35.0 - Pt.z )/45.0); // draw segment with thickening factor\n            if (dt < d) { d = dt; Pn = Pt; } // keep nearest\n        }\n        \n        pb = p;\n    }\n    \n    float da = 0.5 + 0.5 * mix(0.8, 1.0, Pn.y); // darker at the bottom\n    fragColor = vec4(mix(BG, mix(vec3(0.0), COL, da), smoothstep(ep, 0.0, d)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}