{
    "Shader": {
        "info": {
            "date": "1665096241",
            "description": "copy of https://www.shadertoy.com/view/4sXXWM\nwith edits suggested by https://www.shadertoy.com/user/tholzer to allow #define NUMmb to be arbitrarily increased",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVfRd",
            "likes": 9,
            "name": "evenmore metaballs",
            "published": 3,
            "tags": [
                "metaball"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "\n\n#define NUMmb 60\n\n\n//heya, \n//quick n dirty effect\n//pretty much the same thing but\n//with quads and generated textures:\n//http://dusanbosnjak.com/test/webGL/new/gui_color/ring.html\n\n\n\nfloat  rn(float xx){\n        float v0 = fract(sin(xx*.4686)*3718.927);          \n        return v0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat ts = iTime *.6;//time scaled\n\t\n\tvec3 COLOR_MASKS[16];//blob colors\n\tCOLOR_MASKS[0] = vec3( 0.20, 0.30, 1.0 );\n  \tCOLOR_MASKS[1] = vec3( 0.53, 0.85, 0.25 );\n  \tCOLOR_MASKS[2] = vec3( 1.0, 0.56, 0.15 );\n  \tCOLOR_MASKS[3] = vec3( 1.0, 0.0, 0.3 );\n  \tCOLOR_MASKS[4] = vec3( 0.05, 0.55, .30 );\n\tCOLOR_MASKS[5] = vec3( 0.5, 1.0, .40 );\n  \tCOLOR_MASKS[6] = vec3( 1.0, 0.15, 1.0 );\n  \tCOLOR_MASKS[7] = vec3( .20, .30, 0.5 );\n  \tCOLOR_MASKS[8] = vec3( .350, 1.0, 0.5 );\n  \tCOLOR_MASKS[9] = vec3( .70, .60, 0.5 );\n  \tCOLOR_MASKS[10] = vec3( .34, 1., 0.5 );\n  \tCOLOR_MASKS[11] = vec3( .20, .50, 0.5 );\n  \tCOLOR_MASKS[12] = vec3( 0.60, .10, 0.65 );\n  \tCOLOR_MASKS[13] = vec3( .40, .40, 0.85 );\n  \tCOLOR_MASKS[14] = vec3( 1.0, .30, 0.35 );\n  \tCOLOR_MASKS[15] = vec3( 1.0, 0.0, 0.5 );\n\t\n\t//screen space\n\tvec2 fragP = ( fragCoord.xy / iResolution.xy );\n\tvec2 fragPN = fragP * 2. - 1.; //-1 1\n\tfloat as = iResolution.x/iResolution.y;\n\tfragPN.x *= as; //aspect\n\t// vec2 mouseP = fragP - mouse; //mouse\n\tfloat vH = 10.0;//camera disance - fov\n\tvec3 vD = normalize(vec3(-fragPN,vH));//view dir\n\tvec3 lD = normalize(vec3(cos(iTime),.750,sin(iTime)));//light dir\t\n\t//vec3 ld = normalize(vec3(.7, .750,2.));\n\t\n\tvec2 mbPos[NUMmb];\n\tvec3 nn = vec3(.0);\n\tvec3 cc = vec3(.0);\n\n\tfor(int i=0; i<NUMmb; i++){\n\t\tfloat rn1 = rn(float(i+54));\n\t\tfloat rn2 = rn(float(i-222));\n\t\tfloat rn3 = rn(float(i-262));\n\t\tmbPos[i] = vec2(\n\t\t\tsin(rn1*6.14+ts * rn2)*as,\n\t\t\tcos(rn2*6.14+ts * rn3)\n\t\t);\n\t\tmbPos[i] = fragPN - mbPos[i]*.8;\n\t\tfloat rr = cos(rn3*6.28+ts * rn1)*.2+.5;\n\t\tmbPos[i] *= rr*20.;//blob coord\n\t\tfloat bL = length( mbPos[i] );//bl length\n\t\tfloat bA = smoothstep( 1.0, 0.97, bL );\n\t\tfloat bH = exp(-bL*2.15678);\n\t\tvec3 bN = vec3(mbPos[i]*.3*bH,bH-.01);\n\t\t//vec3 bC=COLOR_MASKS[i];\n        vec3 bC=COLOR_MASKS[i-(i/15)*15]; // Find place in color array >15 blobs\n\t\tbC*=bH;\n\t\tnn += vec3(mbPos[i]*.5*bH,bH);\n\t\tcc += bC;\n\t}\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\t\n\tvec2 mB = fragPN - (mouse.xy*2.-1.)*vec2(as,1.);\n\tmB*=6.;\n\tfloat mBL = length( mB );\n\tfloat mBH = exp(-mBL*2.15678);\n\tvec3 mBN = vec3(mB*.5*mBH, mBH);\n\tvec3 mBC = vec3(1.,.0,.0);\n\tmBC*=mBH;\n\t\n\t\t//float sq = float( //quad\n\t\t//\t(mB.x<1.&&mB.x>-1.)\n\t\t//\t&&\n\t\t//\t(mB.y<1.&&mB.y>-1.)\n\t\t//);\n\t\n\tnn+=mBN;\n\t\n\t\n\tvec3 n = normalize( vec3(nn.x,nn.y,nn.z-.01) );\n\t//float aB = smoothstep(0.0,.01,n.z);\n     float aB = smoothstep(0.0, 0.25, n.z);  // faster with lots of blobs\n     \n\tcc+=mBC;\n\tcc/=nn.z;\n\t//n *= aB;\n\tfloat ndl = dot(n,lD)*.5+.5;//wrap\t\n\t//float ndl = dot(n,lD);//wrap\n\tndl = ndl*.7+.3;\n\tvec3 h = normalize(vD+lD);\n\tfloat ndh = dot(n,h);\n\tndh = ndh*.5+.5;\n\tndh = pow(ndh,70.5)*.35;\n\tvec3 fc = cc*ndl+ndh;\n\t\n\tfloat frs = dot(n,vD);\n\tfrs = 1.0-clamp(frs,.0,1.);\n\tfrs = pow(frs,2.0);\n\tfrs = frs*.4+.121;\n\tfc+=frs;\n\t\n\tfloat color = 0.0;\n\tfragColor = vec4( fc*aB, 1.);\n\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}