{
    "Shader": {
        "info": {
            "date": "1712874925",
            "description": "idk",
            "flags": 48,
            "hasliked": 0,
            "id": "Xcy3RG",
            "likes": 4,
            "name": "slow, naive DLA",
            "published": 3,
            "tags": [
                "dla"
            ],
            "usePreview": 0,
            "username": "BeljihnWahfl",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define brushSize 20.0\n\n#define T(i,j) texture(iChannel0, (uv + vec2(i,j)*vec2(1.0/R) )).r \n#define N(i,j)  + float( T(i,j) > 0.)\n\n#define WHITE vec4(1.0)\n#define BLACK vec4(vec3(0.0), 1.0)\n#define FROZEN vec4(0.0, 1.0, 1.0, 1.0)\n\n//noise see https://www.shadertoy.com/view/ltB3zD\nfloat snoise(in vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nuint dirForPixel(ivec2 pixel) {\n    return uint(floor(hash14(vec4(pixel * 37, iTime, iFrame)) * 4.0));\n}\n\n#define RADIUS 10\n\nbool isCloseFrozen(ivec2 pixel) {\n    vec4 sum = vec4(0.0);\n\n    for (int x = pixel.x - RADIUS; x < pixel.x + RADIUS; ++x) {\n        for (int y = pixel.y - RADIUS; y < pixel.y + RADIUS; ++y) {\n            sum += texelFetch(iChannel0, ivec2(x, y), 0);\n        }\n    }\n    \n    return sum.g > sum.r;\n}\n\n// set value for r key to reset with\nconst int Key_R = 82;\n\n// process keyboard input\nbool ReadKey( int key )//, bool toggle )\n{\n\tbool toggle = false;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nconst ivec2 NEIGHBORS[4] = ivec2[](\n    ivec2(0, -1),\n    ivec2(-1, 0),\n    ivec2(0, 1),\n    ivec2(1, 0)\n);\n\nconst ivec2 NEIGHBORS_DIR[4] = ivec2[](\n    ivec2(0, 1),\n    ivec2(1, 0),\n    ivec2(0, -1),\n    ivec2(-1, 0)\n);\n\n\nvoid mainImage( out vec4 O, in vec2 c )\n{\n\tuvec2 R = uvec2(iResolution.xy);\n    ivec2 pixel = ivec2(c.xy);\n    \n    vec2 uv = vec2(pixel) / vec2(R);\n    \n    vec4 v = texelFetch(iChannel0, ivec2(pixel), 0);\n    if (v == WHITE) {\n        uint myDir = dirForPixel(pixel);\n        vec4 next_pixel = texelFetch(iChannel0, pixel + NEIGHBORS_DIR[myDir], 0);\n        \n        if (next_pixel == FROZEN) {\n            O = FROZEN;\n            return;\n        } else {\n            O = BLACK;\n        }\n    } else {\n        O = v;\n    }\n    \n    if (v == FROZEN) return;\n    \n    for (uint i = 0u; i < 4u; ++i) {\n        ivec2 neighbor = pixel + NEIGHBORS[i];\n        vec4 n_pixel = texelFetch(iChannel0, neighbor, 0);\n\n        if (n_pixel == WHITE) {\n            uint dir = dirForPixel(neighbor);\n            if (dir == i) {\n                O = WHITE;\n            }\n        }\n    }\n    \n    if(iFrame % 8 == 0 || ReadKey(Key_R))\n    {\n        ivec2 center = ivec2(R / 2u);\n        if (pixel == center) {\n            O = FROZEN;\n        } else {\n            if (O == WHITE) return;\n            if (isCloseFrozen(pixel)) return;\n            float n = hash13(vec3(uv * 4127.0, iTime));\n            O = vec4(vec3(n > 0.999), 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}