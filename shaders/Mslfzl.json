{
    "Shader": {
        "info": {
            "date": "1497632078",
            "description": "thanks to David Hoskins for his [url=https://www.shadertoy.com/view/MdlXz8]Tileable Water Caustic[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "Mslfzl",
            "likes": 7,
            "name": "Tas d'poles",
            "published": 3,
            "tags": [
                "tadpoled"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 895
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// based on my https://www.shadertoy.com/view/MdXBRs\n\nfloat df(vec2 p, vec2 dir)\n{\n    float a = atan(dir.x, dir.y);\n    p *= mat2(cos(a), -sin(a), sin(a), cos(a));\n    p *= 5.; p.y *= -1.;\n    float r = dot(p,p) * 0.02 * cos(iTime * 40.);\n\tp *= mat2(cos(r), -sin(r), sin(r), cos(r));\n\treturn max(abs(p.x)+p.y, abs(p.y*p.x)) + length(p)*0.3;\n}\n\nvec2 move(vec2 g, vec2 p, float t)\n{\n   return sin( t * 2. + 9. * fract(sin((floor(g)+p)*mat2(2,7,2,5)*mat2(7,-2,2,5))));\n}\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    vec2 uvt = g / iResolution.xy;\n    \n    vec2 p = g /= iResolution.y / 8., ac,al; f-=f-9.;\n       \t\n    for(int x=-1;x<=1;x++)\n    for(int y=-1;y<=1;y++)\n        p = vec2(x,y),\n        al = move(g,p, iDate.w-0.1),\n        ac = move(g,p, iDate.w),\n        p += .5 + .5 * ac - fract(g),\n        f = min(f, df(p,ac-al));\n    \n    f = (f.x<.9\n         ?sqrt(vec4(.5,1,1,1)-mix(0., 1., f.x))\n         :texture(iChannel0, uvt));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Tileable Water Caustic\n// https://www.shadertoy.com/view/MdlXz8\n\n// Found this on GLSL sandbox. I really liked it, changed a few things and made it tileable.\n// :)\n// by David Hoskins.\n\n\n// Water turbulence effect by joltz0r 2013-07-04, improved 2013-07-07\n\n\n// Redefine below to see the tiling...\n//#define SHOW_TILING\n\n#define TAU 6.28318530718\n#define MAX_ITER 5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tfloat time = iTime * .5+23.0;\n    // uv should be the 0-1 uv of texture...\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n#ifdef SHOW_TILING\n\tvec2 p = mod(uv*TAU*2.0, TAU)-250.0;\n#else\n    vec2 p = mod(uv*TAU, TAU)-250.0;\n#endif\n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, 1.4);\n\tvec3 colour = vec3(pow(abs(c), 8.0));\n    colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n    \n\n\t#ifdef SHOW_TILING\n\t// Flash tile borders...\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 2.0;\n\n\tfloat f = floor(mod(iTime*.5, 2.0)); \t// Flash value.\n\tvec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\n\tuv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\n\tcolour = mix(colour, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); // Yellow line\n\t\n\t#endif\n\tfragColor = vec4(colour, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}