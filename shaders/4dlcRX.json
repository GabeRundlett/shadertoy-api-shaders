{
    "Shader": {
        "info": {
            "date": "1489132628",
            "description": "a simple example for drawing sin wave. your comments are welcome.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlcRX",
            "likes": 1,
            "name": "drawing sin",
            "published": 3,
            "tags": [
                "simple",
                "math",
                "wave",
                "sin",
                "primitive"
            ],
            "usePreview": 0,
            "username": "qu1795",
            "viewed": 804
        },
        "renderpass": [
            {
                "code": "const float frequence = 8.0;\nconst float amplitude = 0.2;\nconst float lineWidth = 2.0;\n\n/*vec3 plotSinWave(vec2 currentUv, float freq, float amp, vec3 color, vec3 bgc)\n{\n    float dx = lineWidth / iResolution.x;\n    //float dy = lineWidth / iResolution.y; //dont use this line, or you may want check what is gonna happen\n    float dy = lineWidth / iResolution.y + sin(dx * freq) * amp;\n    \n\tfloat sy = sin(currentUv.x * freq + iTime) * amp;\n    \n    float alpha = smoothstep(0.0, dy, abs(currentUv.y - sy));\n    \n    return mix(color, bgc, alpha);\n}*/\n\nvec3 plotSinWave(vec2 currentUv, float freq, float amp, vec3 color, vec3 bgc)\n{\n    float dx = lineWidth / iResolution.x;\n    float dy = lineWidth / iResolution.y;// + sin(dx * freq) * amp;\n    \n    float sy = sin(currentUv.x * freq + iTime) * amp;\n    float dsy = cos(currentUv.x * freq + iTime) * amp * freq;\n\n    float alpha = smoothstep(0.0, dy, (abs(currentUv.y - sy))/sqrt(1.0+dsy*dsy));\n    \n    return mix(color, bgc, alpha);\n}\n\nfloat genRange(float s, float e, float d) //generate range : s - e - s in duration d, linear interpolate\n{\n\tfloat c = mod(iTime * 0.3, d);\n\tfloat halfTime = d / 2.0;\n\tif(c - halfTime <= 0.0)\n\t\treturn s * (1.0 - c / halfTime) + e * (c / halfTime);\n\telse\n\t\treturn s + abs(e - s) - (c - halfTime) / halfTime * abs(e - s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * vec2(0.5, 0.5)) / iResolution.y;\n    vec3 plottedColor;\n    \n    //green one\n    plottedColor = plotSinWave(uv, frequence * 0.5 + genRange(0.0, 5.0, 2.0), amplitude + genRange(0.0, 0.2, 1.0), vec3(0.0, 1.0, 0.0), vec3(0.0));\n    \n    //cyan one\n    plottedColor = plotSinWave(uv, frequence * 5.0 + genRange(0.0, 5.0, 3.0), amplitude + 0.6, vec3(0.0, 1.0, 1.0), plottedColor);\n    \n    //yellow one\n    plottedColor = plotSinWave(uv, frequence + genRange(0.0, 15.0, 4.0), amplitude + genRange(0.0, 0.5, 1.0), vec3(1.0, 1.0, 0.0), plottedColor);\n    \n    //magenta one\n    plottedColor = plotSinWave(uv, frequence * 2.5 + genRange(0.0, 5.0, 5.0), amplitude - 0.1, vec3(1.0, 0.0, 1.0), plottedColor);\n    \n    fragColor = vec4(plottedColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}