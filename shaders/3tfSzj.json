{
    "Shader": {
        "info": {
            "date": "1563475386",
            "description": "Showcases the difference between physically-correct energy summation (linear color space) and perceptual value summation (gamma color space). For learning purposes.\n\nClick on left and right hand side for linear and gamma color space summation.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tfSzj",
            "likes": 3,
            "name": "Linear vs. gamma color space",
            "published": 3,
            "tags": [
                "2d",
                "color",
                "space",
                "gamma",
                "linear",
                "summation"
            ],
            "usePreview": 0,
            "username": "sschmidtix",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright Â© 2019 Stefan Schmidt\n//\n// Linear vs. gamma color space\n//\n// Showcases the difference between physically-correct energy summation\n// (linear color space) and perceptual value summation (gamma color space).\n// For learning purposes.\n//\n// Click on left and right hand side for linear and gamma color space summation.\n// ---------------------------------------------------------------------\n\n// Parameters\n#define PERIOD 2.\n\nvec3 toLinear(vec3 col) {\n    return pow(col, vec3(2.2));\n}\n\nvec3 toGamma(vec3 col) {\n    return pow(col, vec3(1. / 2.2));\n}\n\nvec3 circle(vec2 center, vec2 uv, vec3 col, bool linearColorSpace) {\n    // Gamma to linear\n    if (linearColorSpace)\n        col = toLinear(col);\n    \n    return col * vec3(1.0 - smoothstep(0.75, 1.0, 1.4 * distance(center, uv)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.yy;\n    bool linearColorSpace = fract(iTime / PERIOD) < 0.5;\n    \n    if (iMouse.z > 0.)\n        linearColorSpace = iMouse.x < (0.5 * iResolution.x);\n    \n    vec3 col = vec3(0);\n    col += circle(vec2(-0.42, 0.25), uv, vec3(0.58, 0.08, 0.58), linearColorSpace);\n    col += circle(vec2(0.42, 0.25), uv, vec3(0.08, 0.58, 0.58), linearColorSpace);\n    col += circle(vec2(0.0, -0.5), uv, vec3(0.58, 0.58, 0.08), linearColorSpace);\n    \n    // Linear to gamma\n    if (linearColorSpace)\n\t    col = toGamma(col);\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}