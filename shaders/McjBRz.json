{
    "Shader": {
        "info": {
            "date": "1724606489",
            "description": "The 4 card parameters ( number, color, shape, filling ) have 3 possible value.\nFind sets of 3 cards for which each parameter values are all equals or all different.\nRewind to regenerate.\nNB: true game is 2 simultaneous players, 12 cards (or+) at a time. ",
            "flags": 32,
            "hasliked": 0,
            "id": "McjBRz",
            "likes": 11,
            "name": "SET game",
            "published": 3,
            "tags": [
                "game",
                "permutations",
                "reproduction"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "// reference: https://en.wikipedia.org/wiki/Set_(card_game)\n// playable variant of base display https://shadertoy.com/view/Mc2fRR\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = 9.*u/R.y, A;\n    O *= 0.;                                      // background\n    if ( U.x > 9. ) return;                       // out of board\n    \n    int i = int(U) + 9*int(U.y);                  // card index\n    vec4 C = T(vec2(i,0)),                        // read card content\n         S = T(vec2(i,1));                        // read card state\n    \n    U = ( fract(U)*2.-1. ) * 1.03;                // card local coordinates + margin\n    A = abs(U); \n    if ( max(A.x,A.y) < 1. ) {                    // --- not in margin: draw card\n        U *=  vec2(2,1);\n        U.x =   C.w<1. ? U.x                      // number of symbols: 1, 2, 3\n              : C.w<2. ? mod(U.x,2.) - 1.\n              :          mod(U.x+.65,1.3) - .65;\n        A = abs( U + vec2(-U.y,U.x) )*.7;\n        float\n        d =  (  C.x<1. ? length(U)                // symbols shape: disc, S, diamond\n              : C.x<2. ? length(U-vec2(.2*sin(3.14/.4*U.y)-.8*U.y,0))\n              :          max(A.x,A.y)\n             ) - .4;\n        d =   C.y<1. ? abs(d)                     // symbols filling: filled, stripped, contour\n            : C.y<2. ? min(abs(d),max(d,mod(u.y-.5,2.))) \n            :          d;\n        O = mix( vec4( S.x == 1. ? 1. : .7 ),     // bright if selected\n                 vec4(C.z==0.,C.z==1.,C.z==2.,1), // symbols color\n                 smoothstep(54./R.y,0.,d - .01 )\n               ) * ( S.x==2. ? .5 : 1. );         // dark if done\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// permutations from https://www.shadertoy.com/view/Xc2Bzz\n\n#define shuffle0(i) ( int( mod(iTime*1e3,82.) +1. )*++i*i*i ) % 83 // shuffle integers in 0..82\n\nint shuffle(int i) {                            // --- shuffle integers in 0..80 range\n    i = shuffle0(i);\n    if ( i < 81 ) return i;                     // compress the extra range\n    i = shuffle0(i);\n    if ( i < 81 ) return i;\n    i = shuffle0(i); \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{    \n    O = T(u);                                   // previous state\n    u -= .5;\n    if ( u.y > 3. || u.x > 81. ) return;\n    \n    if ( iFrame < 1 ) {                         // --- init\n        O *= 0.;                                    // reset all ( needed ?)\n        if ( u == vec2(0,2) ) O = vec4(0,-1,-1,-1); // selection state: (0,2).xyzw = ( n, list ids or -1 )\n        if ( u.y < 1. ) {                           // generate cards permutation\n            int h = shuffle(int(u)); \n            O = vec4( h%3, h/3%3, h/9%3, h/27%3 );  // (i,1).xyzw = 4 cards parameters in 0..2 (unique, thus the permutation)\n        }\n        return;                                     // (i,2).x = card state: 0:available 1:selected 2:done. (future:-1:hidden)\n     }\n    \n    if ( u.y > 0. && iMouse.w > 0. ) {              // --- user select cards\n        vec2 R = iResolution.xy, \n             M = 9.*iMouse.xy/R.y;\n        if ( M.x > 9. ) return;     \n        vec4 S = T(vec2(0,2)), C;                   // state of selection\n        int i = int(M) + 9*int(M.y),                // picked card\n            n = int(S.x) + 1;                       // new = nth selected card in the candidate SET\n            \n        if ( (i == int(S.y) || i == int(S.z)) ) {   // --- unselect (i.e., click on already set card)\n            if ( i == int(S.y) ) S.yz = S.zw;       // compact remaining selection list\n            else /* if ( n>2 && i == int(S.z) ) */ S.z = -1.; \n            S.x--;                                  // n-1 registered cards\n            if (u==vec2(0,2)) O = S;                // update registered state\n            else if( u == vec2(i,1) ) O.x = 0.;     // unmark card\n            return;\n        }\n        if ( T(vec2(i,1)).x != 0. ) return;         // card not available    \n        //if (n>3) return; \n        if (n==3) {                                 // --- check validity (1st & 2nd unconstrained, 3rd card 100% constrained)\n            S.w = float(i);\n            C = mod( T(vec2(S.y,0)) + T(vec2(S.z,0)) + T(vec2(S.w,0)) ,3.); // 3x same value or 0+1+2 → mod3=0, on the 4 params\n            if ( C != vec4(0) ) return;             // not a valid 3-SET\n            if (u==vec2(0,2)) O = vec4(0,-1,-1,-1); // valid ! → reset state\n            else if( u.y==1. && ( u.x == S.y || u.x == S.z || u.x == S.w )) O.x = 2.; // mark the 3 cards as done\n            return;\n        }\n        \n        if (u==vec2(0,2)) O.x = float(n), O[n] = float(i); // register choice #n\n        else if( u == vec2(i,1) ) O.x = 1.;         // mark card as selected\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}