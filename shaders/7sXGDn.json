{
    "Shader": {
        "info": {
            "date": "1615762874",
            "description": "Handy Grid functions (Hex and Tri)",
            "flags": 0,
            "hasliked": 0,
            "id": "7sXGDn",
            "likes": 7,
            "name": "DuoGrids",
            "published": 3,
            "tags": [
                "grid",
                "simplex",
                "distance",
                "edge",
                "hex",
                "tri",
                "centre"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// Hex and Tri grids (SST)\n\n\n// nice hex function from - https://www.shadertoy.com/view/lldfWH\n// ret.x  - distance to border\n// ret.y  - distance to center\n// ret.zw - cell uv\n// id - cell coordinates\nvec4 HexGrid(vec2 uv, out vec2 id)\n{\n    uv *= mat2(1.1547,0.0,-0.5773503,1.0);\n    vec2 f = fract(uv);\n    float triid = 1.0;\n\tif((f.x+f.y) > 1.0)\n    {\n        f = 1.0 - f;\n     \ttriid = -1.0;\n    }\n    vec2 co = step(f.yx,f) * step(1.0-f.x-f.y,max(f.x,f.y));\n    id = floor(uv) + (triid < 0.0 ? 1.0 - co : co);\n    co = (f - co) * triid * mat2(0.866026,0.0,0.5,1.0);    \n    uv = abs(co);\n    id *= inverse(mat2(1.1547,0.0,-0.5773503,1.0));// unskew\n    return vec4(0.5-max(uv.y,abs(dot(vec2(0.866026,0.5),uv))),length(co),co);\n}\n\n// EquilateralTriangle distance\nfloat sdEqTri( in vec2 p)\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 0.5;\n    p.y = p.y + 0.5/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -1.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// triangle grid equiv\n// ret.x  - distance to border\n// ret.y  - distance to center\n// ret.zw - cell uv\n// id - cell coordinates\n\nconst vec2 s = vec2(1, .8660254); // Sqrt (3)/2\n\nvec4 TriGrid(vec2 p, out vec2 id)\n{\n    p /= s;\n    float ys = mod(floor(p.y), 2.)*.5;\n    vec4 ipY = vec4(ys, 0, ys + .5, 0);\n    vec4 ip4 = floor(p.xyxy + ipY) - ipY + .5; \n    vec4 p4 = fract(p.xyxy - ipY) - .5;\n    float itri = (abs(p4.x)*2. + p4.y<.5)? 1. : -1.;\n    p4 = itri>0.? vec4(p4.xy*s, ip4.xy) : vec4(p4.zw*s, ip4.zw);  \n\n    vec2 ep = p4.xy;\n    ep.y += 0.14433766666667*itri;\n    ep.y *= itri;\n    float tri = sdEqTri(ep);\n    float mid = length(ep);// dist to centre\n    id = p4.zw;\n    //id *= mat2(1.1547,0.0,-0.5773503,1.0); // adjust ID (optional)\n    \n    //id *= i*0.1; // adjust ID\n    //id *=  (itri < 0.0 ? 1.0 - id : id); // adjust ID\n    p4 = vec4(abs(tri),mid,p4.xy);\n    return p4;\n}\n\nfloat hbar(vec2 p, float nline, float t)\n{\n    return 0.5+sin((p.y*nline)+t)*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    //uv.y += t*0.1;\n    \n    vec2 id;\n    vec4 h;\n    \n    if (uv.x < 0.0)\n        h = HexGrid(uv*8.0, id);\n    else\n        h = TriGrid(uv*8.0, id);\n\n    float _v1 = smoothstep(0.0,0.035,h.x); // edge\n    float _v2 = smoothstep(0.0,0.065,h.y); // centre\n\n    vec3 bordercol = vec3(1.0,1.0,1.0);\n    vec3 shapecol = vec3(0.44,0.29,0.2);\n    \n    float patternVal = .5; // 4.1\n    float cm = 1.0 + pow(abs(sin(length(id)*patternVal + t*0.65)), 4.0);\t// pulse mult\n    cm *= 1.0 + (hbar(h.zw,100.0,t*12.0)*0.1);\t\t\t\t\t// bars mult\n    shapecol *= cm;\n    \n    // Output to screen\n    vec3 finalcol = mix(bordercol,shapecol,_v1);\n    finalcol = mix(bordercol,finalcol,_v2);  \n    \n    //finalcol = vec3(h.zw,0.0); // show uv\n    finalcol *=  1.0-step(abs(uv.x),0.0025); // divider line\n    \n    fragColor = vec4(finalcol,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}