{
    "Shader": {
        "info": {
            "date": "1603830056",
            "description": "differrent masses",
            "flags": 32,
            "hasliked": 0,
            "id": "tsGyzt",
            "likes": 8,
            "name": "mass_spring_system_1",
            "published": 3,
            "tags": [
                "2d",
                "springs"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "// Fork of \"mass_spring_system_0\" by balkhan. https://shadertoy.com/view/3ljXDm\n// 2020-10-23 13:40:46\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2 rotate(vec2 v, float alpha);\nfloat line(vec2 p1, vec2 p2, vec2 p, float thickness);\n\n#define SHOW_LINES\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    vec2\tR = iResolution.xy;\n    vec2\tu = 1.*(f.xy-.5*R) / R.y;\n    vec3 idl;\n    float ma,md = 1e5;\n    o = vec4(0.);\n    \n    for( float i = .0; i < NUM*NUM; i++)\n    {\n        vec2 cd = vec2(floor((i)/NUM) , mod(i, NUM) );\n        ma = texture(iChannel0, (cd+vec2(.0, NUM))/R).x+(cd.x <= .0 ? 1. : .0)*.0+(cd.y <= .0 ? 2. : .0)*.0;\n        vec2 pos = texture(iChannel0, cd/R).xy-vec2((cd.x <= 0. ? .125:.0), (cd.y <= 0. ? .125:.0) );\n        float bl = length(u - pos*SC)-(6.*ma)/R.x;\n    \tmd = min(md,\n                 bl\n                 );\n        if (md == bl && md < (4.)/R.x)\n        idl.x = i+floor(iTime);\n        #ifdef SHOW_LINES\n        vec2 apos = texture(iChannel0, vec2(cd.x+0., cd.y-1.)/R ).xy-vec2((cd.x <= 0. ? .125:.0), (cd.y-1. <= 0. ? .125:.0) );\n        float l0 = 1.-(line(apos*SC, pos*SC, u, 4./R.x) );\n        \t\t        md = min(md,\n\t\t                 l0\n                        );\n        apos = texture(iChannel0, vec2(cd.x-1., cd.y-0.)/R ).xy-vec2((cd.x-1. <= 0. ? .125:.0), (cd.y <= 0. ? .125:.0) );\n        float l1 = 1.-(line(apos*SC, pos*SC, u, 4./R.x));\n        md = min(md,\n\t\t                 l1\n                        );        \n        #endif\n        if (md < 0.001)\n            break;\n    }\n    #ifdef SHOW_LINES\n    if (f.x < NUM*16. && f.y < NUM*2.*16.)\n\to.xyz = (texelFetch(iChannel0, ivec2(f.xy/16.), 0).xyz/3.)+.5*(f.y <= NUM*16.?1.:.0);\n    else\n    #endif\n    o.xyz += .75-1.*vec3(smoothstep( .01, .005, md))*1.0*(sin( idl.x*.5*vec3(0.5, 1., 2.) +1.570 ) );\n}\n\nvec2 rotate(vec2 v, float alpha)\n{\n\tfloat vx = v.x*cos(alpha)-v.y*sin(alpha);\n\tfloat vy = v.x*sin(alpha)+v.y*cos(alpha);\n\tv.x = vx;\n\tv.y = vy;\n\treturn v;\n}\n\nfloat line(vec2 p1, vec2 p2, vec2 p, float thickness)\n{\n\tp -= p1;\n\tvec2 lineVector = p2-p1;\n\t\t\n\tfloat angle = -atan(lineVector.y,lineVector.x);\n\tp = rotate(p,angle);\n\t\n\tfloat dx = 0.0;\n\tif(p.x<0.0)\n\t\tdx = abs(p.x);\n\telse if(p.x>length(lineVector))\n\t\tdx = abs(p.x) - length(lineVector);\n\t\t\n\treturn ( thickness/(dx+abs(p.y)) );\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n* BUFFER A : 2D Particle System\n*/\n\n\n// for reading clarity's sake, not rly useful\nstruct\tparticle\n{\n    vec2\tpos;\n    vec2\tacc;\n    vec2\tvit;\n    float\tma;\n};\n\n#define Ma 1.\n#define Gr vec2(.0, -.98)\n#define Xrs 1. // X rest straight\n#define Xrd sqrt(2.) // X rest diagonal\n#define DIST .3\n\n    void\tinit_pos(inout vec2 pos, vec2 ij)\n{\n    pos.x = ij.x*DIST-.5*NUM*DIST;\n    pos.y = ij.y*DIST-.5*NUM*DIST;\n}\n\nvoid\tinit(inout particle part, vec2 f)\n{\n    part.acc = vec2(0.);\n\tpart.vit.xy = vec2(0.);\n    init_pos(part.pos, f);\n    part.ma = 1.+abs((NUM-f.x)/5.+(f.y-NUM)/5.);\n}\n\nvec2 DistanceConstraint(vec2 x, vec2 x2, float restlength, float stiffness)\n{\n    vec2 delta = x2 -x;\n    float deltalength = length(delta);\n    float diff = (deltalength-restlength) /deltalength;\n    return delta*stiffness*diff;\n}\n\nvec2 summ_current_minus_rest_spring_len(vec2 f, vec2 R, particle parts)\n{\n    vec2 summ_pos = vec2(.0);    \n    vec2 fpos = texture(iChannel0, (f+vec2(0., 0.))/R.xy ).xy;\n    float xrest = 1.;\n    for(float i = 0.; i < 9.; i++)\n    {\n        vec2 cd = vec2(float(int((i))%3-1), float(int(i/3.)-1));\n        vec2 idf = f + cd;\n        if(idf.x < .0 || idf.x > NUM || idf.y < .0 || idf.y > NUM)\n            continue;\n        if (cd.x == cd.y && cd.x == 0.)\n            continue;\n        float ma = texture(iChannel0, (f+cd+vec2(.0, NUM) )/R).x;\n        if (abs(cd.x) == abs(cd.y) && abs(cd.x) == 1.) // diagonals\n            xrest = Xrd*DIST;\n        else\n            xrest = Xrs*DIST;\n       \tcd = texture(iChannel0, (f+cd)/R.xy ).xy; // need a vec2, reusing cd var\n            summ_pos += DistanceConstraint(fpos, cd, xrest, 1./(abs(ma-parts.ma)+.125)+.05 );\n    }\n\treturn summ_pos/8.;\n}\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    particle parts;\n    vec4\ttexture_buff;\n    vec2\tR = iResolution.xy;\n    //o -= o;\n    o = vec4(0.);\n    if (f.x > NUM || f.y > NUM+NUM)\n        discard;\n    if (float(iFrame) <= 10.)\n    {\n\t\tinit(parts, f);\n\t    o.xy += parts.pos;\n\t\to.zw += parts.vit;\n        if (f.y > NUM)\n        {\n            o -= o;\n        \to.x = parts.ma;\n        }\n        return;\n    }\n    \n    if (f.y > NUM)\n    {\n        o = -o;\n        o.x = texture(iChannel0, f/R ).x;\n        return;\n    }\n    parts.ma = texture(iChannel0, (f+vec2(.0, NUM) )/R).x;\n    texture_buff = texture(iChannel0, f/R.xy ).xyzw;\n    parts.pos = texture_buff.xy;\n  \tparts.vit = texture_buff.zw;\n    if (f.y >= NUM-1.5 && (f.x <= 1. || f.x >= NUM-1.5 )) // top first and last node need to not moove\n    {\n        o = vec4(parts.pos, .0, .0);\n        return;\n    }\n    parts.acc = \n            parts.ma*Gr*iTimeDelta*.001\n            +\n            summ_current_minus_rest_spring_len(f, R, parts)*iTimeDelta\n            ;\n    parts.vit.xy += parts.acc.xy;\n\tparts.pos.xy += parts.vit.xy;\n\t    \to.xy += parts.pos.xy;\n\t\t\to.zw += parts.vit.xy;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Be aware that NUM spawns NUM*NUM balls draw check and 2 * NUM * NUM lines draw check per pixel\n#define NUM 10.\n\n#define SC .25",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}