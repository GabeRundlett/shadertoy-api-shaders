{
    "Shader": {
        "info": {
            "date": "1494538584",
            "description": "this is my first time really experimenting with 3d and raymarch (this time I understand most of what I did)",
            "flags": 0,
            "hasliked": 0,
            "id": "MdXBzn",
            "likes": 69,
            "name": "The big path",
            "published": 3,
            "tags": [
                "raymarching",
                "noob"
            ],
            "usePreview": 1,
            "username": "antonOTI",
            "viewed": 6275
        },
        "renderpass": [
            {
                "code": "#define STEP 256\n#define EPS .001\n\n\n// from various shader by iq\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nconst mat2 m = mat2(.8,.6,-.6,.8);\n\nfloat noise( in vec2 x )\n{\n\treturn sin(1.5*x.x)*sin(1.5*x.y);\n}\n\nfloat fbm6( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*(0.5+0.5*noise( p )); p = m*p*2.02;\n    f += 0.250000*(0.5+0.5*noise( p )); p = m*p*2.03;\n    f += 0.125000*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.062500*(0.5+0.5*noise( p )); p = m*p*2.04;\n    //f += 0.031250*(0.5+0.5*noise( p )); p = m*p*2.01;\n    f += 0.015625*(0.5+0.5*noise( p ));\n    return f/0.96875;\n}\n\n\nmat2 getRot(float a)\n{\n    float sa = sin(a), ca = cos(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\n\nvec3 _position;\n\nfloat sphere(vec3 center, float radius)\n{\n    return distance(_position,center) - radius;\n}\n\nfloat hozPlane(float height)\n{\n    return distance(_position.y,height);\n}\n\nfloat swingPlane(float height)\n{\n    vec3 pos = _position + vec3(0.,0.,iTime * 2.5);\n    float def =  fbm6(pos.xz * .25) * 1.;\n    \n    float way = pow(abs(pos.x) * 34. ,2.5) *.0000125;\n    def *= way;\n    \n    float ch = height + def;\n    return max(pos.y - ch,0.);\n}\n\nfloat map(vec3 pos)\n{\n    _position = pos;\n    \n    float dist;\n    dist = swingPlane(0.);\n    \n    float sminFactor = 5.25;\n    dist = smin(dist,sphere(vec3(0.,-15.,80.),45.),sminFactor);\n    return dist;\n}\n\n\nvec3 getNormal(vec3 pos)\n{\n    vec3 nor = vec3(0.);\n    vec3 vv = vec3(0.,1.,-1.)*.01;\n    nor.x = map(pos + vv.zxx) - map(pos + vv.yxx);\n    nor.y = map(pos + vv.xzx) - map(pos + vv.xyx);\n    nor.z = map(pos + vv.xxz) - map(pos + vv.xxy);\n    nor /= 2.;\n    return normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 rayOrigin = vec3(uv + vec2(0.,6.), -1. );\n    \n    vec3 rayDir = normalize(vec3(uv , 1.));\n    \n   \trayDir.zy = getRot(.05) * rayDir.zy;\n   \trayDir.xy = getRot(.075) * rayDir.xy;\n    \n    vec3 position = rayOrigin;\n    \n    \n    float curDist;\n    int nbStep = 0;\n    \n    for(; nbStep < STEP;++nbStep)\n    {\n        curDist = map(position + (texture(iChannel0, position.xz) - .5).xyz * .005);\n        \n        if(curDist < EPS)\n            break;\n        position += rayDir * curDist * .5;\n    }\n    \n    float f;\n    \n    //sound = sin(iTime) * .5 + .5;\n    \n    float dist = distance(rayOrigin,position);\n    f = dist /(98.);\n    f = float(nbStep) / float(STEP);\n    \n    f *= .8;\n    vec3 col = vec3(f);\n    \n    \n    //float shouldColor = 1.- step(f,threshold);\n    //col = mix(col,vec3(1.,0.,0.) ,shouldColor);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}