{
    "Shader": {
        "info": {
            "date": "1621369637",
            "description": "evolving animal print as background to music video",
            "flags": 48,
            "hasliked": 0,
            "id": "ftXGRr",
            "likes": 1,
            "name": "Fork reaction d mds2 647",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "#define BW 1 // set to 1 to make the output black and white\n// set to 0 to make it a mix of cyan, red, black, and white\n\nfloat hill_val(in vec2 uv, in vec3 selector) {\n  uv = mod(uv, vec2(1.0));\n  float val = dot(selector, texture(iChannel0, uv).rgb) - 0.5;\n  return val;\n}\n\nvec2 hill_grad(in vec2 uv, in vec3 selector) {\n  float f = hill_val(uv, selector);\n  return 1000.0 * vec2(hill_val(uv + vec2(0.001, 0.0), selector) - f,\n                       hill_val(uv + vec2(0.0, 0.001), selector) - f);\n}\n\nfloat coverage(in vec2 uv, in vec3 selector) {\n    float val = hill_val(uv, selector);\n    float grad_mag = length(hill_grad(uv, selector)/iResolution.xy);\n    \n    float to_zero = val / grad_mag;\n    \n    float cov = max(0.0, min(0.5 + to_zero, 1.0));\n    return cov;\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    float cyan = coverage(uv, vec3(1.0, 0.0, 0.0));\n    float red = coverage(uv, vec3(0.0, 1.0, 0.0));\n\n#if BW\n    cyan = red;\n#endif\n\n    vec3 col = vec3(red, cyan, cyan);\n    \n    \n    //////////////////////////////////////////////////////////\n    // GREENSCREENING\n    //\n    // The greenscreening below is custom hacked for this video, and doesn't even work\n    // very well for that.\n    // So, if you want to copy this and use it for your own live VJ performance, or, whatever,\n    // you might^H^H^H^H^Hwill have to rewrite the greenscreen code yourself --\n    // or use a third-party greenscreener to get your video in with an alpha channel\n    vec3 vid_color = texture(iChannel1, uv).rgb;\n    \n    const vec3 green = vec3(0.1, 0.54, 0.15);\n    const vec3 fg = vec3(0.75, 0.47, 0.29);\n\n    float greenness = length(vid_color - green)/ max(0.1, length(vid_color));\n    \n    float alpha = smoothstep(0.5, 0.6, greenness);\n    vid_color = green + (vid_color - green) / max(alpha, 0.1);\n    \n    col = mix(col, vid_color, alpha);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float diffuse_weight = 0.5; // higher means less diffusion.  set greater than 0 and less than 1\nconst float react_weight = 0.25; // reaction speed : don't exceed 0.25.  higher is faster reaction\n\n// in the function \"greatest\" there are two calls to \"color_to_val_4\"\n// change those to \"color_to_val_1\", \"color_to_val_2\" etc to get different effects\n\nvec2 to_uv(in vec2 in_pixels) {\n    return in_pixels / iResolution.xy;\n\t// return 0.1 + mod(vec2(0.8) + in_pixels / iResolution.xy, vec2(0.9));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    \n    vec4 color = texture(iChannel1, to_uv(p));\n    \n    // color.rg = mod(10.0 * to_uv(p), vec2(1.0));\n    color.b = 1.0 - 0.5 * color.r - 0.5 * color.g;\n    \n\n    if (iTime < 0.5 || texelFetch(iChannel3, ivec2(32, 0), 0).r > 0.01) {\n\t    fragColor = vec4(color.rgb, 1.0);\n        return;\n    }\n   \n    \n    color = diffuse_weight * texture(iChannel0, to_uv(p));\n    \n    vec2 dir = 0.25 * normalize(mod(to_uv(p), vec2(0.5)) - vec2(0.25));\n      // vec2(0.95 * smoothstep(0.05, 0.0, abs(mod(to_uv(p).x, 0.25) - 0.125)), 0.0);\n      // vec2(0.0, 0.95);\n    mat2 diffuse_tensor = mat2(1.0 - dir.x * dir.x, -dir.x * dir.y,\n                               -dir.x*dir.y, 1.0 - dir.y * dir.y);\n    \n    float w = 0.25 * (1.0 - diffuse_weight);\n    const float scale = 2.0;\n    color = color +  w * texture(iChannel0, to_uv(p + scale * diffuse_tensor * vec2(1.1, 0.0)));\n    color = color +  w * texture(iChannel0, to_uv(p + scale * diffuse_tensor * vec2(0.0, 1.1)));\n    color = color +  w * texture(iChannel0, to_uv(p - scale * diffuse_tensor * vec2(1.1, 0.0)));\n    color = color +  w * texture(iChannel0, to_uv(p - scale * diffuse_tensor * vec2(0.0, 1.1)));\n    \n    color.rgb = color.rgb + react_weight * (1.0 * color.rgb * color.gbr - color.rgb * color.brg);//  + 0.005;\n    \n    color.a = 1.0;\n    color.rgb = max(vec3(0.0), min(vec3(1.0), color.rgb));\n\n    float delta = 1.5 - dot(color.rgb, vec3(1.0));\n\n    color.rgb += 0.01 * delta;\n    \n \n    fragColor = vec4(color.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}