{
    "Shader": {
        "info": {
            "date": "1601925914",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3yWl",
            "likes": 5,
            "name": "test_xbluebeardx",
            "published": 3,
            "tags": [
                "test"
            ],
            "usePreview": 0,
            "username": "xbluebeardx",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "\nfloat DrawLine(vec2 pp, float yTarget) {\n\tfloat res = smoothstep(yTarget-0.01,yTarget+0.1,pp.y)+smoothstep(yTarget+0.01, yTarget-0.01, pp.y);\n    return res;\n}   \nfloat DE( vec2 pp, out bool blood, float t )\n{\n\tpp.y += sin(pp.x)/*(\n\t\t.4 * sin(.5*2.3*pp.x+pp.y) +\n\t\t.2 * sin(.5*5.5*pp.x+pp.y) +\n\t\t0.1*sin(.5*13.7*pp.x)+\n\t\t0.06*sin(.5*23.*pp.x))*/;\n\t\n\tpp += vec2(0.,0.4)*t;\n\t\n\tfloat thresh = 5.3;\n\t\n\tblood = pp.y > thresh;\n\t\n\tfloat d = abs(pp.y - thresh);\n\t// todo use proper implicit dist\n\t//d /= sqrt(1.+grad*grad);\n    pp.y *= 2.0;\n\treturn d;\n}\n\nvec3 sceneColour( in vec2 pp )\n{\n\tfloat endTime = 16.;\n\tfloat rewind = 2.;\n\tfloat t = mod( iTime, endTime+rewind );\n\t\n\tif( t > endTime )\n\t\tt = endTime * (1.-(t-endTime)/rewind);\n\t\n\tbool blood;\n    \n\tfloat d = DE( pp, blood, t );\n    float line = DrawLine(pp, 2.0);\n\t\n\tif( !blood )\n\t{\n\t\t// floor. not really happy with this at the moment..\n\t\tvec3 floorCol = vec3(.25);\n\t\t\n\t\tfloorCol = texture( iChannel0, -(vec2(pp.x/20.,pp.y/33.)+vec2(.5,.02)) ).xyz;\n\t\tfloat floori = (floorCol.x+floorCol.y+floorCol.z)/3.;\n\t\t\n\t\tfloori = smoothstep(0.5,.53,floori) ;\n\t\tfloori = smoothstep(-5.15,1.,floori);\n\t\tfloori = 1.-floori;\n\t\tfloorCol = vec3(floori);\n\t\t\n\t\t// ao from blood\n\t\tfloat ao = clamp( smoothstep(0.,.2,d), 0., 1.);\n\t\tvec3 res = mix(1.,sqrt(ao),.25) * floorCol;\n        res *= line;\n        return res;\n\t}\n\telse\n\t{\n\t\t//blood. fake a 3d look\n\t\t//height\n\t\tfloat h = clamp( smoothstep(.0,.25,d), 0., 1.);\n\t\th = 4.*pow(h,.2);\n\t\t// couldnt get matching results using finite diffs, need to sort this out.\n\t\t/*vec2 eps = vec2(0.,.01);\n\t\tfloat dx = clamp( smoothstep(.0,.25,DE(pp+eps.yx,blood,t)), 0., 1.);\n\t\tdx = (dx - h)/eps.y;\n\t\tfloat dy = clamp( smoothstep(.0,.25,DE(pp+eps.xy,blood,t)), 0., 1.);\n\t\tdy = (dy - h)/eps.y;*/\n\t\t//vec3 N = vec3(-dx, 1., -dy );\n\t\t\n\t\t// gradient instructions. easy but produces artifacts\n\t\tvec3 N = vec3(-dFdx(h), 1., -dFdy(h) );\n        float line2 = DrawLine(pp, (h/4.+2.));\n        //line2 = 1.;\n\t\tN = normalize(N);\n\t\tvec3 L = normalize(vec3(.5,.7,-.5));\n\t\tvec3 res = pow(dot(N,L),10.)*vec3(1.);\n\t\t// make it more red hack\n\t\tres += vec3(.5,-.3,-0.3);\n\t\t// window refl\n\t\tvec2 off = pp-vec2(5.3,2.);\n\t\t\n\t\tfloat r = length(off);\n\t\tfloat v = 1.;\n\t\tfloat band = 20./iResolution.x;\n\t\tv *= smoothstep( 0.8, .8+band, r );\n\t\tv *= smoothstep( 2.1, 2.1-band, r );\n\t\tfloat gap1 = smoothstep(1.3,1.3-band,r) + smoothstep( 1.4,1.4+band,r);\n\t\tv*= gap1;\n\t\t\n\t\t// the witness\n\t\tfloat h1t = 3.;\n\t\tfloat h2t = 4.1;\n\t\tfloat ht = 5.;\n\t\tfloat hand1p = 1.-clamp((t-h1t)/5.,0.,1.);\n\t\tfloat hand2p = 1.-clamp((t-h2t)/5.,0.,1.);\n\t\tfloat headp = smoothstep(0.,1.,1.-clamp((t-ht)/6.,0.,1.));\n\t\tv *= smoothstep(.06,.06+band, length(pp-vec2(6.71,3.61)-vec2(hand1p)));\n\t\tv *= smoothstep(.06,.06+band, length(pp-vec2(7.04,3.25)-vec2(hand2p)));\n\t\tv *= smoothstep(.13,.13+band, length(pp-vec2(6.84,3.4)-vec2(headp)));\n\t\t// ears\n\t\tv *= smoothstep(.02,.02+band, length(pp-vec2(6.74,3.49)-vec2(headp)));\n\t\tv *= smoothstep(.02,.02+band, length(pp-vec2(6.93,3.3)-vec2(headp)));\n\t\t\n\t\tband /= r;\n\t\tfloat a = atan( off.y, off.x );\n\t\tv *= smoothstep( 0.5,0.5+band, a);\n\t\tv *= smoothstep( 1.8,1.8-band, a);\n\t\tfloat gap2 = smoothstep( 1.1,1.1-band, a) + smoothstep( 1.2,1.2+band, a);\n\t\tv *= gap2;\n\t\t\n\t\tv *= .95;\n\t\tres = (1.-v)*res + v*vec3(1.);\n\t\tres *= line;\n        res *= line2;\n\t\treturn res;\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x /= iResolution.y/iResolution.x;\n\t\n\tfragColor.a = 1.0;\n\tfragColor.xyz = sceneColour(uv*4.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}