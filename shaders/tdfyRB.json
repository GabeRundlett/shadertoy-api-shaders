{
    "Shader": {
        "info": {
            "date": "1585174630",
            "description": "Simple noise experiment, to go along some music I made",
            "flags": 0,
            "hasliked": 0,
            "id": "tdfyRB",
            "likes": 1,
            "name": "Expanding oil",
            "published": 3,
            "tags": [
                "noise",
                "colors",
                "warp",
                "oil"
            ],
            "usePreview": 0,
            "username": "BynaryCobweb",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "\n\nfloat rand3(vec3 v) {\n    return fract(sin(dot(v + vec3(-8.5123, 23.2156, 0.0), vec3(12.9898, 6.233, 0.84261))) * 47583.5453123);\n}\n\n\nfloat noise3(in vec3 uvx) {\n    vec3 f = fract(uvx);\n    vec3 i = floor(uvx);\n    \n    float a1 = rand3(i);\n    float b1 = rand3(i + vec3(0.0, 1.0, 0.0));\n    float c1 = rand3(i + vec3(1.0, 0.0, 0.0));\n    float d1 = rand3(i + vec3(1.0, 1.0, 0.0));\n    float a2 = rand3(i + vec3(0.0, 0.0, 1.0));\n    float b2 = rand3(i + vec3(0.0, 1.0, 1.0));\n    float c2 = rand3(i + vec3(1.0, 0.0, 1.0));\n    float d2 = rand3(i + vec3(1.0, 1.0, 1.0));\n    \n    vec3 u = -2. * f * f * f + 3. * f * f;\n    \n    float a = mix(a1, a2, u.z);\n    float b = mix(b1, b2, u.z);\n    float c = mix(c1, c2, u.z);\n    float d = mix(d1, d2, u.z);\n    \n    return mix(mix(a, b, u.y), mix(c, d, u.y), u.x);\n}\n\nfloat fbm3(in vec3 uvx) {\n    float sum = 0.0;\n    float amp = 0.0;\n    float persistence = 0.7;\n    vec3 stz = uvx;\n    \n    for (int i = 0; i < 8; ++i) {\n        amp = amp / persistence + noise3(stz);\n        sum = sum / persistence + 1.;\n        stz *= 2.;\n    }\n    return amp / sum;\n}\n\n\nvec3 drawBubble(vec2 center, float radius, vec2 uv, vec3 col) {\n    float d = distance(center, uv);\n    float a = smoothstep(radius * 0.9, radius, d) * 0.9 + 0.1;\n    a *= 1.0 - step(radius, d);\n    col = mix(col, vec3(1.0), a);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 center = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n    float d = distance(uv, center);\n\tvec3 uvt = vec3(uv, iTime * 0.005);\n    \n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // col = drawBubble(vec2(0.2, 0.3), 0.05, uv, col);\n    vec3 col = vec3(fbm3(uvt), fbm3(uvt.yzx), fbm3(uvt.zxy));\n    \n    float crit = fbm3(col);\n    col *= smoothstep(0.4, 0.5, crit) * (1. - smoothstep(0.5, 0.6, crit));\n    \n    float tx = iTime * 1.0;\n    tx += sin(tx) * 1.5;\n    tx *= 0.04;\n    float grow = 1.0 - smoothstep(tx - 0.05, tx + 0.05, d * 2.0 + fbm3(uvt) * 4.0 - 1.8);\n    \n    vec3 uvt2 = vec3(uv, iTime * 0.05);\n    vec3 lake = vec3(fbm3(uvt2), fbm3(uvt2 + vec3(1.0)), fbm3(uvt2 + vec3(2.0)));\n    lake = vec3(fbm3(lake), fbm3(lake + vec3(1.0)), fbm3(lake + vec3(2.0)));\n    lake = vec3(fbm3(lake) * vec3(0.2, 0.2, 0.4)) * vec3(0.0);\n    \n    col = mix(lake, col, grow);\n    // col *= smoothstep(0.4, 0.6, fbm3(uvt));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}