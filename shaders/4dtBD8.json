{
    "Shader": {
        "info": {
            "date": "1524918517",
            "description": "pouet",
            "flags": 32,
            "hasliked": 0,
            "id": "4dtBD8",
            "likes": 27,
            "name": "another cloud tunnel",
            "published": 3,
            "tags": [
                "train",
                "doodling",
                "1h"
            ],
            "usePreview": 0,
            "username": "XT95",
            "viewed": 1212
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    \n    // vignetting\n    col *= saturate(pow( uv.x * uv.y * (1.-uv.x) * (1.-uv.y)*100., .2 ));\n    \n    // tonemapping\n    col = acesToneMapping(col);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// math\n#define PI 3.141592653589\n#define saturate(x) clamp(x,0.,1.)\nfloat hash( vec3 x );\nfloat hash( vec2 p );\nfloat hash( float p );\nfloat hash2Interleaved( vec2 x );\nfloat noise( vec3 x );\nvec4 noised( vec3 x );\nmat2 rotate( float t );\n\n// mapping\nvec3 randomSphereDir( vec2 rnd );\nvec3 randomHemisphereDir( vec3 dir, float i );\nvec4 tex3D( sampler2D tex, vec3 p, vec3 n );\nvec3 bumpMapping( sampler2D tex, vec3 p, vec3 n, float bf );\n\n// tone mapping\nvec3 acesToneMapping( vec3 col );\nvec3 filmicToneMapping( vec3 col );\n\n\n\n\n\n// ---------------------------------------------\n// Math\n// ---------------------------------------------\nfloat hash( vec3 p )\n{\n    return fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\n\nfloat hash( vec2 p )\n{\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\n}\n\nfloat hash( float p ) \n{\n    return fract(sin(p)*43758.5453123);\n}\n\nfloat hash2Interleaved( vec2 x )\n{\n    // between random & dithered pattern\n    // good for jittering and blur as well as blue noise :)\n    // http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare\n    vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n    return fract( magic.z * fract( dot( x, magic.xy ) ) );\n}\n\nvec4 noised( vec3 x )\n{\n\t// https://iquilezles.org/articles/gradientnoise\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float a = hash( p+vec3(0,0,0) );\n    float b = hash( p+vec3(1,0,0) );\n    float c = hash( p+vec3(0,1,0) );\n    float d = hash( p+vec3(1,1,0) );\n    float e = hash( p+vec3(0,0,1) );\n    float f = hash( p+vec3(1,0,1) );\n    float g = hash( p+vec3(0,1,1) );\n    float h = hash( p+vec3(1,1,1) );\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), \n                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) ).yzwx;\n}\nfloat noise( vec3 x )\n{\n\t// https://iquilezles.org/articles/gradientnoise\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float a = hash( p+vec3(0,0,0) );\n    float b = hash( p+vec3(1,0,0) );\n    float c = hash( p+vec3(0,1,0) );\n    float d = hash( p+vec3(1,1,0) );\n    float e = hash( p+vec3(0,0,1) );\n    float f = hash( p+vec3(1,0,1) );\n    float g = hash( p+vec3(0,1,1) );\n    float h = hash( p+vec3(1,1,1) );\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);\n}\n\nmat2 rotate( float t ) {\n    float a = cos(t);\n    float b = sin(t);\n    \n    return mat2( a, b, -b, a );\n}\n\n\n// ---------------------------------------------\n// Mapping\n// ---------------------------------------------\nvec3 randomSphereDir( vec2 rnd )\n{\n    float s = rnd.x*PI*2.;\n    float t = rnd.y*2.-1.;\n    return vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\n\nvec3 randomHemisphereDir( vec3 dir, float i )\n{\n    vec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n    return v * sign(dot(v, dir));\n}\n\nvec4 tex3D( sampler2D tex, vec3 p, vec3 n )\n{\n    n = abs(n);\n    \n    vec4 c = texture(tex, p.yz) * n.x;\n    c += texture(tex, p.xz) * n.y;\n    c += texture(tex, p.xy) * n.z;\n    \n    return c / 3.;\n}\n\nvec3 bumpMapping( sampler2D tex, vec3 p, vec3 n, float bf )\n{\n    // clever code taken from Shane\n    // https://www.shadertoy.com/view/MscSDB\n    const vec2 e = vec2(0.001, 0);\n    \n    mat3 m = mat3( tex3D(tex, p - e.xyy, n).rgb,\n                   tex3D(tex, p - e.yxy, n).rgb,\n                   tex3D(tex, p - e.yyx, n).rgb);\n    \n    vec3 g = vec3(0.299, 0.587, 0.114) * m;\n    g = (g - dot( tex3D(tex,  p , n).rgb, vec3(0.299, 0.587, 0.114)) )/e.x;\n    g -= n * dot(n, g);\n                      \n    return normalize( n + g*bf );\n    \n}\n\n\n\n\n\n// ---------------------------------------------\n// Tone mapping\n// ---------------------------------------------\nvec3 acesToneMapping( vec3 col )\n{\n    // https://www.shadertoy.com/view/XlKSDR\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (col * (a * col + b)) / (col * (c * col + d) + e);\n}\n\nvec3 filmicToneMapping( vec3 col )\n{\n    // Good reference\n    // https://www.shadertoy.com/view/lslGzl\n    col = max(vec3(0.), col - vec3(0.004));\n    col = (col * (6.2 * col + .5)) / (col * (6.2 * col + 1.7) + 0.06);\n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const int nbSample = 128;\nconst float invNbSample = 1. / float(nbSample);\nconst float pi = 3.141592653589;\nfloat time;\n\nfloat fbm( vec3 p ) {\n    float d = 0.;\n    float amp = 0.5;\n    \n    for(int i=0; i<4; i++) {\n        vec4 rnd = noised(p) * amp;\n        d += rnd.w;\n        \n        p += rnd.xyz * amp;\n        amp *= .5;\n        p *= 2.;\n    }\n    return d;\n}\n\n\nfloat clouds( vec3 p) {\n    p.z += time;\n    float d = fbm(p) + dot(cos(p.xyz), sin(p.zxy))*.75;//length(p.xy)-2.;\n\t\n    \n    \n\treturn d;\n}\n\nvec3 gradientCol(float t) {\n    vec3 col = mix( vec3(1.,1.,1.), vec3(1.,.4,.1), 1.-exp(-t*3.) );\n    \n    col = mix(vec3(0.,.5,1.), col, 1.-exp(-abs(t-.02)*20.));\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 v = uv*2.-1.;\n\tv.x *= iResolution.x/iResolution.y;\n    \n    \n    // jittering\n    float jitt = hash(uv);\n    float jittRay = jitt * invNbSample;\n    time = iTime+jitt/30.;\n    \n    // camera ray\n    vec3 ro = vec3(-1.5,0.,0.);\n    vec3 rd = normalize( vec3(v, 1.) );\n    rd.xy = rotate(time*.1) * rd.xy;\n    rd.zy = rotate(time*.05) * rd.zy;\n    \n    \n    \n    // sky\n    vec3 col = vec3(.5,.8,1.)*10.;\n    col += vec3(1.) * exp(-uv.y*5.);\n    \n    \n    vec3 ld = normalize(vec3(0.,0.,1.));\n        \n    for(float i=0.; i<1.; i += invNbSample) {\n        vec3 p = ro + rd * (1.-i+jittRay)*20.;\n        \n        float d = clouds(p);\n        vec3 c = gradientCol(d*1.) * exp(-d*5.)*2.;\n        \n//        c += vec3(1.) * saturate( d - map(p+ld*.3) );\n        \n        col = mix(col, c, saturate(d*.6));\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(gradientCol(uv.x),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}