{
    "Shader": {
        "info": {
            "date": "1493493221",
            "description": "I think this should cover the basic idea of raymarching, but I exectuted it more or less just as it looked in my head, but I'm always happy if someone comes along with reference solutions or links to such.",
            "flags": 0,
            "hasliked": 0,
            "id": "XsScWy",
            "likes": 2,
            "name": "Raymarching shadow test",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "kosmonaut",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "\nconst float lightSize = 40.;\nconst float lightSizeSq = lightSize*lightSize;\nconst float lineSize = 10.;\n\nfloat line(vec2 p, vec2 a, vec2 b)  { // line distance field\n\tvec2 pa = p - a, ba = b - a;\n    float u = dot(pa, ba)/dot(ba, ba);\n \treturn length(pa - ba * clamp(u,0.,1.));\n}\n\nvoid mainImage( out vec4 O,  vec2 fragCoord )\n{\n    float t=iTime;\n    vec2 start = .5 * iResolution.xy,\n         end = start + vec2(cos(t),sin(t)) * min(iResolution.x,iResolution.y)/3.;\n    \n    \n    vec2 p = fragCoord;\n    \n    //Light\n    vec2 l = iMouse.z > 0. \n                ? iMouse.xy \n\t\t\t\t:vec2(.1, .5) *iResolution.xy;\n    \n    vec2 dir = normalize(l-p);\n    \n    \n    int i = 0; \n    while(i<40)\n    {\n    \tfloat dist = line(p,start,end)-lineSize;\n        \n        vec2 ftl = l-p;\n        \n    \tif(dot(ftl, ftl) < lightSizeSq && i==0) \n    \t{\n     \t \tO = vec4(1.,1.0,0.,1.);\n        \treturn;  \n    \t}\n       \n\t\tif(dist < 0.01)\n    \t{\n            if(i==0)\n            {\n        \t\tO = vec4(0.,0.5,0.,1.);\n            }\n        \treturn;\n    \t}\n        \n        if(dot(ftl, ftl) < dist*dist) \n        {\n            O = vec4(.9);\n            return;\n        }\n        \n        //step\n        p += dir * dist;\n        \n        i++;\n    }\n    \n    \n    O = vec4(0.125);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}