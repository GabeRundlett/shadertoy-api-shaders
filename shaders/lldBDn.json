{
    "Shader": {
        "info": {
            "date": "1539247587",
            "description": "  An alternative Parthenon, newly built.\n  Upgraded visuals and faster compilation.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lldBDn",
            "likes": 23,
            "name": "Parthenon 2",
            "published": 3,
            "tags": [
                "reflection",
                "fire",
                "temple",
                "architecture"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 865
        },
        "renderpass": [
            {
                "code": "// \"Parthenon 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  An alternative Parthenon, newly built.\n  Upgraded visuals and faster compilation.\n  Mouse overrides observer motion; mouse in lower box for day view; mouse in upper \n  box (left/right half) for exterior day/night views.\n*/\n\n#define AA  0   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noiseff (float p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 wPt[10], qHit, fCylPos, sunDir;\nfloat tp[10], vel, dstFar, tCur, tCyc, fCylRad, fCylLen, flmFlkr, grDep, angHit;\nint idObj;\nbool isNt;\nconst int idBase = 1, idCol = 2, idColEnd = 3, idRoof = 4, idRoofV = 5, idGal = 6, idAltr = 7,\n   idLogs = 8, idCoal = 9, idPost = 10, idBall = 11, idMnt = 12;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat MountDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, r, h, s;\n  h = grDep;\n  q = p;\n  q.y -= - h;\n  r = 20. - 0.7 * q.y / h;\n  s = 0.2 * (Noisefv2 (4. * q.xz) - 1.);\n  d = 0.9 * max (SmoothMin (PrRoundCylDf (q.xzy, r * (1. + 0.1 * s), h + s, h + s),\n     PrCylDf (q.xzy, r + 0.5, 0.01), 0.5), 0.01 - q.y);\n  DMINQ (idMnt);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 cs;\n  float dMin, d, da, db, wr;\n  dMin = dstFar;\n  dMin = MountDf (p, dMin);\n  q = p;\n  d = PrBoxDf (q, vec3 (8.6, 0.101, 12.6));\n  q.y -= 0.3;\n  d = max (min (d, PrBoxDf (q, vec3 (8.2, 0.201, 12.2))),\n     - PrBoxDf (q, vec3 (2., 0.25, 6.)));\n  DMINQ (idBase);\n  q.y -= 5.52;\n  d = max (PrBoxDf (q, vec3 (7.5, 0.05, 11.5)),\n     - PrBoxDf (q, vec3 (2.5, 5., 6.5)));\n  q.xz = mod (q.xz + vec2 (1.), 2.) - 1.;\n  d = max (d, - PrBoxDf (q, vec3 (0.5, 5., 0.5)));\n  DMINQ (idGal);\n  q = p;  q.y -= 1.;\n  db = max (PrBoxDf (q, vec3 (8., 4.9, 12.)), - PrBox2Df (q.xz, vec2 (2., 6.)));\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y -= 3.14;\n  wr = q.y / 2.36;\n  d = max (PrCylDf (q.xzy, 0.3 * (1.05 - 0.05 * wr * wr), 2.36), db);\n  DMINQ (idCol);\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y = abs (q.y - 3.14) - 2.43;\n  d = PrCylDf (q.xzy, 0.4, 0.07);\n  q.y -= 0.14;\n  d = max (min (d, PrBoxDf (q, vec3 (0.5, 0.07, 0.5))), db);\n  DMINQ (idColEnd);\n  q = p;  q.x = abs (q.x) - 3.;  q.y -= 8.2;\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  d = PrBoxDf (q, vec3 (6., 0.07, 12.3));\n  q.x += 0.25;\n  q.xz = mod (q.xz, vec2 (1., 2.)) - vec2 (0.5, 1.);\n  d = max (d, - PrBox2Df (q.xz, vec2 (0.25, 0.5)));\n  DMINQ (idRoof);\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (4.1, 7.68, 11.6);\n  d = PrBoxDf (q, vec3 (4.3, 1.9, 0.1));\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  q.xy -= vec2 (-0.4, -2.);\n  d = max (d, PrBoxDf (q, vec3 (4.3, 1.9, 0.1)));\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (2.89, 7.7, 11.6);\n  da = PrBoxDf (q, vec3 (3.2, 1.4, 1.));\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  q.xy -= vec2 (-0.25, -1.5);\n  d = max (d, - max (da, PrBoxDf (q, vec3 (3.2, 1.4, 1.))));\n  DMINQ (idRoofV);\n  q = p;  q.y -= 7.7;  q.z = abs (q.z) - 11.6;\n  d = PrCylDf (q.xzy, 0.09, 1.4);\n  DMINQ (idRoofV);\n  q.y -= 0.4;\n  d = PrSphDf (q, 0.4);\n  DMINQ (idBall);\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (8.5, 0.6, 12.5);\n  d = PrCylDf (q.xzy, 0.05, 0.5);\n  DMINQ (idPost);\n  q.y -= 0.7;\n  d = PrSphDf (q, 0.2);\n  DMINQ (idBall);\n  q = p;  q.y -= 1.5;\n  d = min (max (max (PrSphDf (q, 0.78), -0.01 + q.y), -0.3 - q.y),\n     PrCylDf ((q - vec3 (0., -0.7, 0.)).xzy, 0.15, 0.42));\n  DMINQ (idAltr);\n  qq = p;  qq.y -= fCylPos.y - fCylLen + 0.09;\n  d = PrCylDf (qq.xzy, fCylRad, 0.1);\n  if (d < 0.05) {\n    qq.xz = Rot2D (qq.xz, -0.5 * pi);\n    cs = sin (pi * vec2 (1.3, 0.8));\n    for (int j = 0; j < 5; j ++) {\n      qq.xz = Rot2Cs (qq.xz, cs);\n      q = qq;  q.x += 0.21;\n      d = PrRoundCylDf (q, 0.05 - 0.01 * sin (10. * pi * q.z), 0.02, 0.666);\n      DMINQ (idLogs);\n    }\n    q = p;  q.y -= fCylPos.y - fCylLen - 0.02;\n    d = PrCylDf (q.xzy, fCylRad- 0.03, 0.01);\n    DMINQ (idCoal);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dLight)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dLight) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 blkSize)\n{\n  vec3 v, tm, tp, u;\n  float dn, df;\n  rd += 0.00001;\n  v = ro / rd;\n  tp = blkSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvec2 CylHit (vec3 ro, vec3 rd, float cylRad, float cylHt)\n{\n  vec3 s;\n  float dCylIn, dCylOut, a, ai, b, w, ws, srdy;\n  dCylIn = dstFar;\n  dCylOut = dstFar;\n  rd += 0.00001;\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - cylRad * cylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      ai =  1. / a;\n      dCylIn = (- b - ws) * ai;\n      dCylOut = (- b + ws) * ai;\n    }\n    if (a > 0.) s = ro + dCylIn * rd;\n    else s.y = cylHt;\n    if (abs (s.y) > cylHt) {\n      if (srdy * ro.y < - cylHt) {\n        dCylIn = - (srdy * ro.y + cylHt) / abs (rd.y);\n        if (length (ro.xz + dCylIn * rd.xz) > cylRad) dCylIn = dstFar;\n      } else dCylIn = dstFar;\n    }\n    if (dCylIn < dstFar) {\n      if (a > 0.) s = ro + dCylOut * rd;\n      else s.y = cylHt;\n      if (abs (s.y) > cylHt && srdy * ro.y < cylHt)\n         dCylOut = (- srdy * ro.y + cylHt) / abs (rd.y);\n    }\n  }\n  return vec2 (dCylIn, dCylOut);\n}\n\nfloat FlmAmp (vec3 ro, vec3 rd, vec2 dst)\n{\n  vec3 p, q;\n  float fh, fr, aSum, a, d;\n  const float ns = 24.;\n  p = ro + dst.x * rd;\n  d = dst.x + fCylRad / ns;\n  aSum = 0.;\n  for (float j = 0.; j < ns; j ++) {\n    p = ro + d * rd;\n    fr = 1. - length (p.xz) / fCylRad;\n    fh = 0.5 * (1. - p.y / fCylLen);\n    q = 2. * p;\n    q.xz = Rot2D (q.xz, 0.3 * q.y);\n    a = 1.1 * Fbm3 (q - vec3 (0., 4. * tCur, 0.));\n    q = 5. * p;\n    q.xz = Rot2D (q.xz, -0.4 * q.y);\n    a += 0.9 * Fbm3 (q - vec3 (0., 5. * tCur, 0.));\n    aSum += max (0.3 * fr * fr * fh * (a * a - 0.6), 0.);\n    q = 73. * p;\n    aSum += step (0.85, Fbm3 (q - vec3 (0., 16. * tCur, 0.))) * smoothstep (0.1, 0.2, fr) *\n       smoothstep (0.3, 0.4, fh);\n    d += fCylRad / ns;\n    if (d > dst.y || aSum > 1.) break;\n  }\n  return clamp (aSum, 0., 1.);\n}\n\nvec4 GrndCol (vec2 p)\n{\n  return vec4 (mix (vec3 (0.22, 0.2, 0.2), vec3 (0.2, 0.2, 0.22),\n     smoothstep (0.3, 0.7, Fbm2 (4. * p))), 0.);\n}\n\nvec4 ObjCol ()\n{\n  vec4 col;\n  vec2 vc;\n  vc = vec2 (0.);\n  if (idObj == idMnt) {\n    col = GrndCol (qHit.xz) * (1. + 0.2 * smoothstep (0.5, 0.9 * grDep, qHit.y));\n  } else if (idObj == idBase) {\n    col = vec4 (0.9, 0.9, 0.95, 0.1);\n    vc = vec2 (0.5, 32.);\n  } else if (idObj == idCol) {\n    col = vec4 (0.9, 0.9, 0.7, 0.1) * (1. - 0.3 * Fbm2 (128. * vec2 (qHit.y, 4. * angHit))) *\n     (0.6 + 0.4 * SmoothBump (0.02, 0.98, 0.02, mod (8. * qHit.y / 2.36, 1.)));\n  } else if (idObj == idColEnd) {\n    col = vec4 (0.9, 0.9, 0.7, 0.1);\n    vc = vec2 (0.3, 128.);\n  } else if (idObj == idRoof) {\n    col = vec4 (0.8, 0.3, 0.1, 0.1) *\n       (1. - 0.4 * SmoothBump (0.98, 1.02, 0.01, mod (qHit.z, 2.))) *\n       (1. - 0.4 * SmoothBump (0.48, 0.52, 0.01, mod (qHit.x, 1.)));\n  } else if (idObj == idRoofV) {\n    col = vec4 (0.8, 0.3, 0.1, 0.1);\n  } else if (idObj == idGal) {\n    col = vec4 (0.9, 0.9, 0.7, 0.1);\n    vc = vec2 (0.3, 128.);\n  } else if (idObj == idPost) {\n    col = vec4 (0.8, 0.1, 0.1, 0.1);\n  } else if (idObj == idAltr) {\n    col = vec4 (0.3, 0.3, 0.9, 0.2);\n    if (qHit.y < -0.4) col = mix (col, vec4 (0.5, 0., 0., -1.), SmoothBump (0.3, 0.6, 0.05,\n       0.5 + 0.5 * sin (2. * pi * (4. * qHit.y - 0.5 * tCur))));\n  } else if (idObj == idBall) {\n    col = vec4 (0.2, 0.5, 0.3, -1.);\n  }\n  if (vc.x > 0.) col *= 1. - vc.x * Fbm3 (vc.y * qHit);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, rds, mDir, vn, p;\n  float mRad, bs, ts, ds, fd, att, attSum, d, sd;\n  if (isNt) {\n    mDir = normalize (vec3 (0., 0.04, -1.));\n    mRad = 0.02;\n    col = vec3 (0.02, 0.02, 0.04) + vec3 (0.06, 0.04, 0.02) *\n       pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n    bs = dot (rd, mDir);\n    ts = bs * bs - dot (mDir, mDir) + mRad * mRad;\n    if (ts > 0.) {\n      ts = bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - mDir) / mRad);\n        col += 0.8 * vec3 (1., 0.9, 0.5) * clamp (dot (vec3 (-0.77, 0.4, 0.5), vn) *\n           (1. - 0.3 * Noisefv3 (4. * vn)), 0., 1.);\n      }\n    }\n    if (ts < 0.) {\n      rds = floor (2000. * rd);\n      rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n      for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n      col += 0.5 * smoothstep (0.01, 0.04, rd.y) * vec3 (0.8, 0.8, 0.6) *\n         min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n    }\n  } else {\n    p = ro + rd * (200. - ro.y) / rd.y;\n    ds = 0.1 * sqrt (length (ro - p));\n    fd = 0.001 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.05 * tCur;\n    p *= 3.;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    fd *= 3.;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    col = mix (vec3 (0.5, 0.75, 1.), mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1),\n       0.25 + 0.75 * sd), exp (-2. * (3. - sd) * max (rd.y - 0.1, 0.))) +\n       0.3 * (vec3 (1., 0.4, 0.2) * pow (sd, 256.) + vec3 (1., 0.8, 0.7) * pow (sd, 1024.));\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.2),\n       att * (0.001 + 0.999 * smoothstep (0.001, 0.004, rd.y))), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 4.) * (pow (sd, 8.) + 0.5);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 row, rdw, rdo, foVec, col, vn, vnw;\n  vec2 dstFlm, vf;\n  float dstObj, dstWat, dstGrnd, fIntens, lDist, sh, a, f;\n  int idObjF;\n  bool flmRefl, objRefl, hideFlm, ltSun;\n  grDep = 3.;\n  fCylPos = vec3 (0., 3.53, 0.);\n  fCylRad = 0.8;\n  fCylLen = 2.;\n  dstFlm = CylHit (ro - fCylPos, rd, fCylRad, fCylLen);\n  dstWat = BlkHit (ro - vec3 (0., 0.4, 0.), rd, vec3 (2., 0.01, 6.));\n  row = ro + dstWat * rd;\n  vnw = VaryNf (0.4 * row + 0.1 * tCur, vec3 (0., 1., 0.), 0.1);\n  flmRefl = false;\n  if (dstWat < min (dstFlm.x, dstFar)) {\n    rdw = reflect (rd, vnw);\n    row += 0.01 * rdw;\n    dstFlm = CylHit (row - fCylPos, rdw, fCylRad, fCylLen);\n    flmRefl = true;\n  } else {\n    row = ro;\n    rdw = rd;\n  }\n  fIntens = (dstFlm.x < dstFar) ? FlmAmp (row - fCylPos, rdw, dstFlm) : 0.;\n  flmFlkr = Noiseff (tCur * 64.);\n  dstObj = ObjRay (ro, rd);\n  objRefl = false;\n  rdo = rd;\n  if (dstWat < min (dstObj, dstFar)) {\n    ro += dstWat * rd;\n    rd = reflect (rd, vnw);\n    dstObj = ObjRay (ro, rd);\n    objRefl = true;\n  }\n  idObjF = idObj;\n  ltSun = false;\n  sh = 1.;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idCol) {\n      angHit = atan (qHit.z, - qHit.x) / (2. * pi);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * (0.5 - mod (12. * (angHit + 0.5), 1.))));\n    }\n    vf = vec2 (0.);\n    if (idObj == idCol || idObj == idColEnd) vf = vec2 (16., 0.3);\n    else if (idObj == idAltr) vf = vec2 (8., 1.);\n    else if (idObj == idBase) vf = vec2 (16., 1.);\n    else if (idObj == idRoof) vf = vec2 (32., 0.5);\n    else if (idObj == idMnt) vf = mix (vec2 (4., 2.), vec2 (16., 4.), smoothstep (0., 0.05, qHit.y));\n    if (vf.x > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n    if (idObj == idLogs || idObj == idCoal) {\n       f = clamp (1.2 * Fbm3 ((idObj == idLogs) ? 32. * vec3 (qHit.z,\n          atan (qHit.y, - qHit.x) / (2. * pi), 2. * length (qHit.xy) - 0.03 * tCur) :\n          vec3 (64. * qHit.xz, qHit.y + 0.5 * tCur).xzy) - 0.2, 0.1, 1.);\n       col = (idObj == idLogs) ? vec3 (1., 0.7 * f, 0.3 * f * f) * (0.5 +\n          0.5 * max (- dot (rd, VaryNf (4. * qHit, vn, 1.)), 0.)) *\n          (1. - 0.5 * smoothstep (0.5, 0.666, abs (qHit.z))) :\n          f * vec3 (1., 0.2, 0.1) * (1. - 0.5 * pow (length (qHit.xz) / fCylRad, 4.));\n       col = min (3. * f * col * (1. + 0.1 * flmFlkr), 1.);\n    } else {\n      col4 = ObjCol ();\n      if (col4.a < 0.) {\n        col = col4.rgb * (0.2 + 0.8 * max (- dot (rd, vn), 0.));\n      } else {\n        if (isNt) {\n          foVec = fCylPos - ro;\n          lDist = length (foVec);\n          foVec /= lDist;\n        }\n        sh = ObjSShadow (ro, (isNt ? foVec : sunDir), (isNt ? lDist : dstFar));\n        if (isNt) {\n          f = (0.3 + 0.7 * smoothstep (0., 0.05, - dot (rd, vn))) * max (dot (vn, foVec), 0.);\n          col = col4.rgb * (0.05 + 0.15 * f + 5. * sh * f * (0.6 + 0.4 * flmFlkr) *\n             pow (lDist, -1.5) * vec3 (1., 0.3, 0.2));\n        } else ltSun = true;\n      }\n    }\n  } else if (rd.y < 0.) {\n    if (! isNt) sh = ObjSShadow (ro - ((ro.y + grDep)) / rd.y * rd, sunDir, dstFar);\n    dstGrnd = - (ro.y + grDep) / rd.y;\n    ro += dstGrnd * rd;\n    vn = VaryNf (4. * ro, vec3 (0., 1., 0.), 2. * (1. - smoothstep (0.5, 1., dstGrnd / dstFar)));\n    col4 = GrndCol (ro.xz);\n    if (isNt) col4 *= 0.1;\n    ltSun = true;\n  } else {\n    a = atan (rd.x, - rd.z);\n    if (rd.y < 0.02 * Fbm1 (32. * a) + 0.005) {\n      col = mix (vec3 (0.1, 0.1, 0.11), vec3 (0.2, 0.1, 0.),\n         0.5 + 0.5 * dot (rd, - normalize (vec3 (sunDir.xz, 0.).xzy))) *\n         (1. - 0.3 * Fbm2 (128. * vec2 (a, rd.y)));\n      if (isNt) col*= 0.1;\n    } else col = SkyCol (ro, rd);\n  }\n  if (ltSun) {\n    col = col4.rgb * (0.1 + 0.1 * max (dot (vn, - normalize (vec3 (sunDir.xz, 0.).xzy)), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * sh * max (dot (sunDir, vn), 0.)) +\n       col4.a * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    col *= vec3 (1., 0.9, 0.8);\n  }\n  hideFlm = (dstObj < dstFar && idObjF == idAltr);\n  if (flmRefl == objRefl) hideFlm = hideFlm || (dstObj < dstFlm.x);\n  else hideFlm = hideFlm || (objRefl ? (dstWat < dstFlm.x) : (dstObj < dstWat));\n  if (! hideFlm) col = mix (col, mix (vec3 (1., 0.2, 0.2), vec3 (0.8, 0.6, 0.2),\n     smoothstep (0.5, 0.8, fIntens)), fIntens);\n  if (objRefl) col = mix (col, max (- dot (rdo, VaryNf (0.4 * row + 0.1 * tCur,\n     vec3 (0., 1., 0.), 0.5)), 0.) * vec3 (0., 0.2, 0.8), 0.15);\n  return col;\n}\n\nvoid TrackInit ()\n{\n  wPt[0] = vec3 (0., 3., -16.);\n  wPt[1] = vec3 (0., 3., -10.);\n  wPt[2] = vec3 (-0.5, 3., -6.2);\n  wPt[3] = vec3 (-2.6, 3., -6.2);\n  wPt[4] = vec3 (-2.6, 3., 8.1);\n  wPt[5] = wPt[4] * vec3 (-1., 1., 1.);\n  wPt[6] = wPt[3] * vec3 (-1., 1., 1.);\n  wPt[7] = wPt[2];\n  wPt[8] = wPt[1];\n  wPt[9] = wPt[0];\n  tp[0]  = 0.;\n  for (int j = 0; j < 9; j ++) tp[j + 1] = tp[j] + length (wPt[j + 1] - wPt[j]); \n  vel = 0.5;\n  tCyc = tp[9] / vel;\n}\n\nvec3 TrackPath (float t)\n{\n  vec4 va, vb;\n  vec3 ro;\n  float tVu, s;\n  int jVu;\n  tVu = mod (t, tCyc) * vel;\n  for (int j = 0; j < 9; j ++) {\n    if (tVu < tp[j + 1]) {\n      va = vec4 (wPt[j], tp[j]);\n      vb = vec4 (wPt[j + 1], tp[j + 1]);\n      jVu = j;\n      break;\n    }\n  }\n  s = (tVu - va.w) / (vb.w - va.w);\n  ro = mix (va.xyz, vb.xyz, s);\n  if (jVu == 3 || jVu == 5) ro.y += SmoothBump (0.2, 0.8, 0.1, s);\n  return ro;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u, col;\n  vec2 canvas, uv, ori, ca, sa, mMid[2], ut[2], mSize;\n  float el, az, asp, zmFac, hLkAt, vuId, regId;\n  bool vuTrk;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  isNt = true;\n  vuTrk = true;\n  asp = canvas.x / canvas.y;\n  mSize = (1./6.) * vec2 (asp, 1.);\n  mMid[0] = vec2 (asp, 1. - mSize.y) * vec2 (1. - mSize.y, -1.);\n  mMid[1] = vec2 (asp, -1. + mSize.y) * vec2 (1. - mSize.y, -1.);\n  ut[0] = abs (uv - mMid[0]) - mSize;\n  ut[1] = abs (uv - mMid[1]) - mSize;\n  vuId = 0.;\n  if (max (ut[0].x, ut[0].y) < 0.) {\n    uv = (uv - mMid[0]) / mSize.y;\n    isNt = ! isNt;\n    vuId = 1.;\n  } else if (max (ut[1].x, ut[1].y) < 0.) {\n    uv = (uv - mMid[1]) / mSize.y;\n    vuTrk = false;\n    vuId = 2.;\n  }\n  regId = 0.;\n  if (min (mPtr.x, - mPtr.y) > 0.5 - mSize.y) regId = 1.;\n  else if (min (mPtr.x, mPtr.y) > 0.5 - mSize.y) regId = 2.;\n  if (mPtr.z > 0. && regId == 2.) {\n    vuTrk = (vuId == 1.);\n    isNt = (vuId == 2.);\n    if (mPtr.x > 0.5 - 0.5 * mSize.y) isNt = ! isNt;\n  } else {\n    if (vuId == 2.) isNt = false;\n  }\n  if (mPtr.z > 0. && regId == 1.) isNt = ! isNt;\n  TrackInit ();\n  if (vuTrk) {\n    hLkAt = 3.;\n    zmFac = 1.2;\n    if (mPtr.z > 0. && regId == 0.) {\n      ro = TrackPath (tCyc * (mPtr.x + 0.5));\n      hLkAt += 5. * mPtr.y;\n    } else {\n      ro = 0.5 * (TrackPath (tCur + 0.2) + TrackPath (tCur - 0.2));\n    }\n    vd = normalize (vec3 (0., hLkAt, 0.) - ro);\n    u = - vd.y * vd;\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (u.x, 1. + u.y, u.z) / sqrt (1. - vd.y * vd.y), vd);\n  } else {\n    az = 0.1 * pi * (floor (0.3 * tCur) + smoothstep (0.9, 1., mod (0.3 * tCur, 1.)));\n    el = -0.02 * pi;\n    el = clamp (el, -0.4 * pi, 0. * pi);\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n            mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n    ro = vuMat * vec3 (0., 1., -40.);\n    zmFac = 2.7;\n  }\n  sunDir = normalize (vec3 (1., 0.3, 1.));\n  dstFar = 100.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < 2; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = vec3 (0.2, 0.2, 0.1);\n  }\n  fragColor = vec4 (pow (clamp (col, 0., 1.), vec3 (0.8)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}