{
    "Shader": {
        "info": {
            "date": "1638840874",
            "description": "cyclic Nyancat",
            "flags": 0,
            "hasliked": 0,
            "id": "7tG3Dm",
            "likes": 11,
            "name": "cyclic nyancat",
            "published": 3,
            "tags": [
                "nyancat"
            ],
            "usePreview": 0,
            "username": "cyperus",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License.\n//\n// \"cyclic nyancat\" created by Colling Patrik (cyperus) in 2021\n//\n// References:\n// - \"Nyancat\" by mu6k https://www.shadertoy.com/view/4dXGWH\n//\n////////////////////////////////////////////////////////////////////////////////\n\n#define COMPLEX\n\nconst float\n    period = 10., // animation loop time in seconds\n    scale  = 7.,  // nyancat inside cell\n    fl_height = scale * 0.03; // floor hight\n\nvec4 stars(vec2 p, float time) {\n\tvec4 color = vec4(0);\n\tvec2 ps;\n\tfloat stars; float ss = 0.04, s1 = 16.;\n    \n\tfor (float i = 1.; i < 7.; i++) {\n        time /= i; ps = i*p;\n\t\tps = ps + time*vec2(1, 0) - mod(ps + vec2(time,i*s1) ,vec2(ss));\n        \n\t\tstars = noise(s1 * ps);\n        \n\t\tif (stars > 0.98) {\n            color = vec4(1);\n        }       \n\t}   \n\treturn color;\n}\n\nvec4 nyancat(vec2 z, vec2 z0, float scale, float time) {\n    z = scale * vec2(fract(z.x - time) , z.y); z -= z0;\n    return ((0. < z.x && z.x < 0.9) && (0. < z.y && z.y < 0.6))\n    ? texture(iChannel0, \n        vec2(40./256. * (z.x + floor(6. * fract(3. * scale * time))), z.y + 0.2 ))\n    : vec4(0.);\n}    \n\nvoid mainImage( out vec4 O, in vec2 U ) {\n    float ntime = iTime/period,\n          PI2ntime = PI2*ntime;\n    \n\n    vec2 uv = (2.*U.xy-R.xy)/R.x; // uv.x ∈ [-1, 1.], uv.y ∈ [-R.y/R.x, R.y/R.x];\n\n   // vec2 uv = U.xy/R.x; // uv.x ∈ [0., 1.], uv.y ∈ [0., R.y/R.x];\n\n    \n    // complex stuff! \n    #ifdef COMPLEX\n    uv = crpt(2.* uv, .0*PI2ntime * .25, 2, .7 +.1*cos(PI2ntime*.15));\n    uv = crpt(2.* uv, .3*PI2ntime * -.5, 3,    1.4*sin(PI2ntime*.25));\n    \n    uv.xy = uv.yx;\n    uv = cinv(uv);\n    #endif\n    \n    uv.y = abs(uv.y); // mirror along x-axis\n    \n    // draw texture\n    float sdf, px;\n    vec4 C = vec4(0); O = C;\n    \n    // nyancat\n    #if 1\n    if(O.a<1.) {\n        C = nyancat(uv, vec2(0., fl_height), scale, ntime);\n        C.rgb = pow(C.rgb, vec3(2.2));\n        O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n    }\n    #endif\n    \n    // ball\n    #if 1\n    if(O.a<1.) {\n        float ba_r = 0.1;\n        vec2 ba_uv  = scale * vec2(fract(uv.x - ntime), uv.y ); // NOTE 0: #fract() creats artefacts\n             ba_uv -= vec2(1.2, fl_height + ba_r + 0.2 * abs(cos(PI2ntime * scale)));\n        sdf = sdCircle(ba_uv, ba_r);\n        px = fwidth(sdf);\n        px = px > 1. ? 0.: px; // NOTE 0: Eliminate artefact. Don't know exactly why it works. It was a guess.\n        C = vec4(1.2 * vec3(.8,.2,0.), S(sdf, px));\n        O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n    }\n    #endif\n        \n    // floor\n    #if 1\n    if(O.a<1.) {\n        vec2 fl_uv = scale * uv;       \n        sdf = sdPlane( fl_uv, vec2(0.,1.), - fl_height);       \n        px = fwidth(sdf);\n        C = vec4(0.9 * h2rgb(uv.x), S(sdf, px));\n        O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n    }   \n    #endif\n    \n    // stars\n    #if 1\n    if(O.a<1.) {\n        C = stars(10. * uv, 5. * ntime);\n        O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n    }\n    #endif\n    \n    // background\n    #if 1\n    if(O.a<1.) {\n        C = vec4(mix(vec3(0.0,0.1,0.7),vec3(0.8,0.8,0.0), sqrt(uv.y)), 1.);\n        O += (1.-O.a) * vec4( C.rgb, 1 ) *C.a;\n    }   \n    #endif\n       \n    // gamma\n    O = vec4(pow(O.rgb, vec3(1./2.2)), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "# define R iResolution\n\nconst float\n    PI = abs(atan(0.,-1.)),\n    PI2 = 2.*PI;\n\n// complex\nvec2 cmul(vec2 za,vec2 zb) {\n    return za*mat2(zb.x,-zb.y,zb.yx);\n}\n\nvec2 cinv(vec2 z) {\n    return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 za, vec2 zb) {\n    return cmul(za,cinv(zb));\n}\n\nvec2 cpow(vec2 z, int n) {\n    vec2 w = z;\n    for (int i = 1; i < abs(n); i++) {\n        w = cmul(w,z);\n    }\n    return w;\n}\n\nvec2 crot(vec2 z,float a) {\n    return cmul(z, vec2(cos(-a),sin(-a)));\n}\n\nvec2 crpt(vec2 z,float a, int n, float x0) {\n\treturn cpow(crot(z, a), n) - vec2(x0, 0.);\n}\n\n// noise\nfloat hash(float x) {\n\treturn fract(sin(x*.0127863)*17143.321);\n}\n\nfloat hashmix(float x0, float x1, float interp) {\n\tx0 = hash(x0);\n\tx1 = hash(x1);\n\t#ifdef noise_use_smoothstep\n\tinterp = smoothstep(0.0,1.0,interp);\n\t#endif\n\treturn mix(x0,x1,interp);\n}\n\nfloat hashmix(vec2 p0, vec2 p1, vec2 interp) {\n\tfloat v0 = hashmix(p0[0]+p0[1]*128.0,p1[0]+p0[1]*128.0,interp[0]);\n\tfloat v1 = hashmix(p0[0]+p1[1]*128.0,p1[0]+p1[1]*128.0,interp[0]);\n\tinterp = smoothstep(vec2(0.0),vec2(1.0),interp);\n\treturn mix(v0,v1,interp[1]);\n}\n\nfloat noise(vec2 p) {\n\tvec2 pm = mod(p,1.0);\n\tvec2 pd = p-pm;\n\treturn hashmix(pd,(pd+vec2(1.0,1.0)), pm);\n}\n\n// sdf\nfloat sdPlane( vec2 p, vec2 n, float h ) {\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat sdCircle( vec2 p, float r ) {\n    return length(p) - r;\n}\n\n// smooth\nfloat S(float sdf, float pix) {\n    return smoothstep(pix, -pix, sdf);\n}\n\n// color\nvec3 h2rgb(float h) {\n    return .6 * (1.+cos(PI2*(h+vec3(0,1,2)/3.)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}