{
    "Shader": {
        "info": {
            "date": "1539256239",
            "description": "Sobel filter on webcam input; plus rotational variations on the theme",
            "flags": 2,
            "hasliked": 0,
            "id": "ltdfDn",
            "likes": 8,
            "name": "Webcam Sobel filter",
            "published": 3,
            "tags": [
                "sobel",
                "webcam"
            ],
            "usePreview": 1,
            "username": "BenWheatley",
            "viewed": 1173
        },
        "renderpass": [
            {
                "code": "/*\n * \"Webcam sobel filter\" by Ben Wheatley - 2018\n * License MIT License\n * Contact: github.com/BenWheatley\n */\n\n\nmat3 k1 = mat3( 1,  2,  1,\n                0,  0,  0,\n               -1, -2, -1);\n\nmat3 k2 = mat3( 0,  1,  2,\n               -1,  0,  1,\n               -2, -1,  0);\n\nmat3 k3 = mat3(-1,  0,  1,\n               -2,  0,  2,\n               -1,  0,  1);\n\nmat3 k4 = mat3(-2, -1,  0,\n               -1,  0,  1,\n                0,  1,  2);\n\nmat3 k5 = mat3(-1, -2, -1,\n                0,  0,  0,\n                1,  2,  1);\n\nmat3 k6 = mat3( 0, -1, -2,\n                1,  0, -1,\n                2,  1,  0);\n\nmat3 k7 = mat3( 1,  0, -1,\n                2,  0, -2,\n                1,  0, -1);\n\nmat3 k8 = mat3( 2,  1,  0,\n                1,  0, -1,\n                0, -1, -2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 pixelSize = vec2(1,1) / iResolution.xy;\n    \n    vec3 sum = vec3(0,0,0);\n    \n    mat3 kernel = k1;\n    \n    // Modulo operator doesn't work on the iOS version of WebGL\n    int fastTime = int(iTime*15.0);\n    int floorDivTime = fastTime / 8;\n    int modVal = fastTime - (floorDivTime * 8);\n    \n    if (modVal==1) {\n        kernel = k2;\n    } else if (modVal==2) {\n        kernel = k3;\n    } else if (modVal==3) {\n        kernel = k4;\n    } else if (modVal==4) {\n        kernel = k5;\n    } else if (modVal==5) {\n        kernel = k6;\n    } else if (modVal==6) {\n        kernel = k7;\n    } else if (modVal==7) {\n        kernel = k8;\n    } \n    \n    for (int dy = -1; dy<=1; dy++) {\n\t    for (int dx = -1; dx<=1; ++dx) {\n            vec2 pixelOff = pixelSize * vec2(dx, dy);\n            vec2 tex_uv = uv + pixelOff;\n            vec3 textureValue = texture(iChannel0, tex_uv).rgb;\n            sum += (kernel[dx+1][dy+1] * textureValue);\n        }\n    }\n    \n\tvec3 col = sum;\n\t\n    \n    \n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}