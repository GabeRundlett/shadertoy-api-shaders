{
    "Shader": {
        "info": {
            "date": "1642087003",
            "description": "A nice night sky with moon, stars, clouds, optionally modifies a texture.\nConverted for ShaderToy from https://github.com/Oncorporation/obs-shaderfilter/.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXyWN",
            "likes": 4,
            "name": "Night Sky 2",
            "published": 3,
            "tags": [
                "night"
            ],
            "usePreview": 1,
            "username": "turboplay",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": " float speed = 20.0;\n bool Include_Clouds = true;\n bool Include_Moon = true;\n float Alpha_Percentage = 95.; //<Range(0.0,100.0)>\n \n // Stars\n int number_stars = 40; //<Range(0.0,100.0)>\n \n // Sky\n vec4 SKY_COLOR = vec4(0.027, 0.151, 0.354, 1.0 );\n vec4 STAR_COLOR = vec4(0.92, 0.92, 0.14, 1.0 );\n vec4 LIGHT_SKY = vec4(.45, 0.61, 0.98, 1.0);\n float SKY_LIGHTNESS = .4;\n \n// Moon\n vec4 MOON_COLOR = vec4(.4, .25, 0.25, 1.0 );\n float moon_size = 0.18;\n float moon_bump_size = 0.14;\n float Moon_Position_x = -0.2;\n float Moon_Position_y = 0.3;\n\n// Apply to image?\n bool Apply_To_Image = false;\n\n\n#define PI 3.1416\n\n//Noise functions from https://www.youtube.com/watch?v=zXsWftRdsvU\nfloat noise11(float p) {\n    return fract(sin(p * 633.1847) * 9827.95);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise21(vec2 p) {\n    return fract(sin(p.x * 827.221 + p.y * 3228.8275) * 878.121);\n}\n\nvec2 noise22(vec2 p) {\n    return fract(vec2(sin(p.x * 9378.35), sin(p.y * 75.589)) * 556.89);\n}\n\n//From https://codepen.io/Tobsta/post/procedural-generation-part-1-1d-perlin-noise\nfloat cosineInterpolation(float a, float b, float x) {\n    float ft = x * PI;\n    float f = (1. - cos(ft)) * .5;\n    return a * (1. - f) + b * f;\n}\n\nfloat smoothNoise11(float p, float dist) {\n    float prev = noise11(p - dist);\n    float next = noise11(p + dist);\n\n    return cosineInterpolation(prev, next, .5);\n}\n\n\nfloat smoothNoise21(vec2 uv, float cells) {\n    vec2 lv = fract(uv * cells);\n    vec2 id = floor(uv * cells);\n\n    //smoothstep function: maybe change it later!\n    lv = lv * lv * (3. - 2. * lv);\n\n    float bl = noise21(id);\n    float br = noise21(id + vec2(1., 0.));\n    float b = mix(bl, br, lv.x);\n\n    float tl = noise21(id + vec2(0., 1.));\n    float tr = noise21(id + vec2(1., 1.));\n    float t = mix(tl, tr, lv.x);\n\n    return mix(b, t, lv.y);\n}\n\nvec2 smoothNoise22(vec2 uv, float cells) {\n    vec2 lv = fract(uv * cells);\n    vec2 id = floor(uv * cells);\n\n    lv = lv * lv * (3. - 2. * lv);\n\n    vec2 bl = noise22(id);\n    vec2 br = noise22(id + vec2(1., 0.));\n    vec2 b = mix(bl, br, lv.x);\n\n    vec2 tl = noise22(id + vec2(0., 1.));\n    vec2 tr = noise22(id + vec2(1., 1.));\n    vec2 t = mix(tl, tr, lv.x);\n\n    return mix(b, t, lv.y);\n}\n\nfloat valueNoise11(float p) {\n    float c = smoothNoise11(p, 0.5);\n    c += smoothNoise11(p, 0.25) * .5;\n    c += smoothNoise11(p, 0.125) * .25;\n    c += smoothNoise11(p, 0.0625) * .125;\n\n    return c /= .875;\n}\n\nfloat valueNoise21(vec2 uv) {\n    float c = smoothNoise21(uv, 4.);\n    c += smoothNoise21(uv, 8.) * .5;\n    c += smoothNoise21(uv, 16.) * .25;\n    c += smoothNoise21(uv, 32.) * .125;\n    c += smoothNoise21(uv, 64.) * .0625;\n\n    return c /= .9375;\n}\n\nvec2 valueNoise22(vec2 uv) {\n    vec2 c = smoothNoise22(uv, 4.);\n    c += smoothNoise22(uv, 8.) * .5;\n    c += smoothNoise22(uv, 16.) * .25;\n    c += smoothNoise22(uv, 32.) * .125;\n    c += smoothNoise22(uv, 64.) * .0625;\n\n    return c /= .9375;\n}\n\nvec3 points(vec2 p, vec2 uv, vec3 color, float size, float blur) {\n    float dist = distance(p, uv);\n    return color * smoothstep(size, size * (0.999 - blur), dist);\n}\n\nfloat mapInterval(float x, float a, float b, float c, float d) {\n    return (x - a) / (b - a) * (d - c) + c;\n}\n\nfloat blink(float time, float timeInterval) {\n    float halfInterval = timeInterval / 2.0;\n    //Get relative position in the bucket\n    float p = mod(time, timeInterval);\n\n\n    if (p <= timeInterval / 2.) {\n        return smoothstep(0., 1., p / halfInterval);\n    }\n    else {\n        return smoothstep(1., 0., (p - halfInterval) / halfInterval);\n    }\n}\n\nvec3 sampleBumps(vec2 p, vec2 uv, float radius, float spin) {\n    float dist = distance(p, uv);\n    vec3 BumpSamples = vec3(0., 0., 0.);\n\n    if (dist < radius) {\n        float bumps = (1. - valueNoise21(uv * spin)) * .1;\n        BumpSamples = vec3(bumps, bumps, bumps);\n    }\n    return  BumpSamples;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n   \n    float uv_scale = 0.;\n\n    vec4 rgba;\n    float alpha = clamp(Alpha_Percentage * .01, 0., 1.0);\n    vec2 center_pixel_coordinates =vec2(0.5);\n    vec2 st = uv * uv_scale;\n    vec2 toCenter = center_pixel_coordinates - st;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 ouv = uv;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 seed = toCenter / iResolution.xy;\n\n    float time = iTime + seed.x * speed;\n\n    //float3 col = float3(0.0);\n    //float m = valueNoise21(uv);    \n    vec3 col = mix(SKY_COLOR.rgb, LIGHT_SKY.rgb, ouv.y - SKY_LIGHTNESS);\n\n    col *= SKY_LIGHTNESS - (1. - ouv.y);\n\n    //Add clouds\n    if (Include_Clouds)\n    {\n        vec2 timeUv = uv;\n        timeUv.x += time * .1;\n        timeUv.y += valueNoise11(timeUv.x + .352) * .01;\n        float cloud = valueNoise21(timeUv);\n        col += cloud * .1;\n    }\n\n    //Add stars in the top part of the scene\n    float timeInterval = speed * .5; //5.0\n    float timeBucket = floor(time / timeInterval);\n\n    vec2 moonPosition = vec2(-1000, -1000);\n    if (Include_Moon)\n    {\n        moonPosition = vec2(Moon_Position_x, Moon_Position_y);\n        col += points(moonPosition, uv, MOON_COLOR.rgb, moon_size, 0.3);\n        // Moon bumps\n        col += sampleBumps(moonPosition, uv, moon_bump_size, 9. + mod(time * .1, 9.));\n    }\n\n    for (int i = 0; i < clamp(number_stars, 0, 100); i++) {\n    \n        float fi = float(i);\n        vec2 starPosition = vec2(fi/10., fi / 10.);\n\n        starPosition.x = mapInterval(valueNoise11(timeBucket + fi * 827.913) - .4, 0., 1., 0.825, -0.825);\n        starPosition.y = mapInterval(valueNoise11(starPosition.x) - .3, 0., 1., 0.445, -0.445);\n\n        float starIntensity = blink(time + (rand(uv) * fi), timeInterval);\n        //Hide stars that are behind the moon\n        if (distance(starPosition, moonPosition) > moon_size) {\n            col += points(starPosition, uv, STAR_COLOR.rgb, 0.001, 0.0) * clamp(starIntensity - .1, 0.0, 1.0) * 10.0;\n            col += points(starPosition, uv, STAR_COLOR.rgb, 0.009, 3.5) * starIntensity * 3.0;\n        }\n    }\n    //col = float3(blink(time, timeInterval));\n    rgba = vec4(col, alpha);\n\n    // Output to screen\n    if (Apply_To_Image)\n    {\n        vec4 color = texture(iChannel0,ouv);\n        vec4 original_color = color;\n        rgba = mix(original_color, rgba * color, alpha);\n\n    }\n    fragColor = rgba;\n   \n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}