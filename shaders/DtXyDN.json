{
    "Shader": {
        "info": {
            "date": "1691324911",
            "description": "Random function for perlin noise",
            "flags": 0,
            "hasliked": 0,
            "id": "DtXyDN",
            "likes": 3,
            "name": "Ridged noise colors",
            "published": 3,
            "tags": [
                "perlin",
                "ridged"
            ],
            "usePreview": 0,
            "username": "tanczmy",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "float random (vec2 st);\nfloat circle(vec2 center, float radius, vec2 uv);\nvec2 randomGradient(vec2 p);\n\nvec2 cubic(vec2 p);\nvec2 quintic(vec2 p);\n\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.498, 0.498, 0.558);\n    vec3 b = vec3(0.418, 0.500, 0.358);\n    vec3 c = vec3(1.168, 1.000, 1.778);\n    vec3 d = vec3(-0.192, 0.333, 1.478);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv = uv * iResolution.xy / iResolution.y;\n\n    // Normalized mouse position (from 0 to 1)\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n    // Nice oscilation\n    // pow(tan(iTime), 4.0)\n\n    // Make the grid\n    float tiles = 4.8;\n    \n    // Vector rotation - from 0 to 1\n    vec2 gridId = floor(uv * tiles);\n    vec2 gridUv = fract(uv * tiles);\n    \n    vec2 color = gridUv;\n    \n    // Corners of each grid\n    vec2 bl = gridId + vec2(0.0, 0.0);\n    vec2 br = gridId + vec2(1.0, 0.0);\n    vec2 tl = gridId + vec2(0.0, 1.0);\n    vec2 tr = gridId + vec2(1.0, 1.0);\n    \n    // Random gradient for each corner\n    vec2 gradientBl = randomGradient(bl);\n    vec2 gradientBr = randomGradient(br);\n    vec2 gradientTl = randomGradient(tl);\n    vec2 gradientTr = randomGradient(tr);\n    \n    // Distance from current pixel to each corner\n    vec2 distanceBl = gridUv - vec2(0.0, 0.0);\n    vec2 distanceBr = gridUv - vec2(1.0, 0.0);\n    vec2 distanceTl = gridUv - vec2(0.0, 1.0);\n    vec2 distanceTr = gridUv - vec2(1.0, 1.0);\n    \n    // Dot product between distance and the random gradient\n    float dotBl = dot(gradientBl, distanceBl);\n    float dotBr = dot(gradientBr, distanceBr);\n    float dotTl = dot(gradientTl, distanceTl);\n    float dotTr = dot(gradientTr, distanceTr);\n    \n    // Smooth out the grid uvs\n    //gridUv = smoothstep(0.0, 1., gridUv);\n    //gridUv = cubic(gridUv);\n    gridUv = quintic(gridUv);\n    \n    \n    // Mix the colors\n    float b = mix(dotBl, dotBr, gridUv.x);\n    float t = mix(dotTl, dotTr, gridUv.x);\n    float perlin = mix(b, t, gridUv.y);\n  \n    float finalColor = pow(1.0 - abs(perlin), 10.);\n  \n    // Output to screen\n    fragColor = vec4(palette(finalColor + (sin(uv.x + iTime * .1) + sin(uv.y + iTime * .1))), 1.0);\n}\n\n// Random\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))\n        * 43758.5453123);\n}\n\nvec2 randomGradient(vec2 p) {\n  p = p + 0.02;\n  float x = dot(p, vec2(123.4, 234.5));\n  float y = dot(p, vec2(234.5, 345.6));\n  vec2 gradient = vec2(x, y);\n  gradient = sin(gradient);\n  gradient = gradient * 43758.5453;\n\n    \n\n  // part 4.5 - update noise function with time\n  gradient = 0.3 * sin(0.6 * gradient + 0.5 * iTime) + 0.2 * cos(0.4 * gradient + iTime * 0.3);\n  return gradient;\n\n  // gradient = sin(gradient);\n  // return gradient;\n}\n\n// Interpolation\n\nvec2 cubic(vec2 p) {\n  return p * p * (3.0 - p * 2.0);\n}\n\nvec2 quintic(vec2 p) {\n  return p * p * p * (10.0 + p * (-15.0 + p * 6.0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}