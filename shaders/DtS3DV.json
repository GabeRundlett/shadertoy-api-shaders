{
    "Shader": {
        "info": {
            "date": "1673957779",
            "description": "more vonoroi",
            "flags": 0,
            "hasliked": 0,
            "id": "DtS3DV",
            "likes": 1,
            "name": " neighbors 6",
            "published": 3,
            "tags": [
                "template",
                "vonoroi"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "float f_n_rand(float n){\n    n = fract(n * .1031);\n    n *= n + 33.33;\n    n *= n + n;\n    return fract(n);\n}\nvec2 f_o_idx(vec2 o_trn, vec2 o_scl){\n    //calculate an index based on a o_trn translation and o_scl scale\n    float n_idx_flr = floor(o_trn.x)\n        + floor(o_trn.y) * floor(o_scl.x);\n    return vec2(\n        n_idx_flr, \n        n_idx_flr / (floor(o_scl.x)*floor(o_scl.y))\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_dscl = 1.;// dscl down scale\n    vec2 o_lires = iResolution.xy * n_dscl;// lres low resolution\n    vec2 o_lfc = fragCoord.xy * n_dscl;\n    float n_t = iTime*0.5; \n    \n\n    float n_ratio_1to_iresx = 1./ o_lires.x;\n\n    vec2 o_lfc_nor = floor(o_lfc) / o_lires; // low frag coord normalized\n    vec2 o_lfc_nor_off = (floor(o_lfc)-0.5*o_lires.xy)/ o_lires.y;\n    vec2 o_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_fc_nor_off = (fragCoord.xy-0.5*iResolution.xy) / iResolution.y;\n    vec2 o_mo_nor_off = (iMouse.xy-0.5*iResolution.xy) / iResolution.y;\n\n    if(iMouse.z == 0.){\n        o_mo_nor_off = vec2(sin(n_t), cos(n_t)*0.5+0.5);\n    }\n    o_lfc *= (o_mo_nor_off.y)*0.3;\n\n\n    vec2 o_scl_krn = vec2(5.); //krn kernel\n    \n    float n_krn_xty = o_scl_krn.x*o_scl_krn.y;\n    float n_dmin = 1.;\n    \n    vec2 o_lfc_min, o_idx_min; \n    float n_rnd_min;\n    \n    float n_rnd_amp = floor(min(o_scl_krn.x, o_scl_krn.y)/2.);\n    \n    for(float n = 0.; n < n_krn_xty; n+=1.){\n        float n_x = floor(mod(n, o_scl_krn.x) - floor(o_scl_krn.x/2.));\n        float n_y = floor(n / o_scl_krn.x) - floor(o_scl_krn.y/2.);\n        \n        vec2 o_lfc_krn = o_lfc + vec2(n_x, n_y);\n        vec2 o_idx = f_o_idx(floor(o_lfc_krn), floor(o_lires));\n        float n_rand = f_n_rand(floor(o_idx.x));\n        vec2 o_a = fract(o_lfc);\n        vec2 o_b = vec2(n_x, n_y)+(n_rand-0.5)*n_rnd_amp;\n        float n_dist = length(o_a-o_b)*.5;\n        n_dist *= 1.+n_rand;\n        //n_dmin = min(n_dist, n_dmin);\n        if(n_dist < n_dmin){\n            n_dmin = n_dist;\n            o_lfc_min = o_lfc_krn;\n            o_idx_min = o_idx;\n            n_rnd_min = n_rand;\n        }\n        //n_dmin = n_dist;\n    }\n\n    fragColor = vec4(n_dmin);\n    fragColor = sqrt(fragColor);\n    \n    if(o_fc_nor_off.x > o_mo_nor_off.x){\n        float n_rnd1 = f_n_rand(n_rnd_min*0.3111);\n        float n_rnd2 = f_n_rand(n_rnd1*0.1113);\n        fragColor = vec4(n_rnd_min, n_rnd1, n_rnd2, 1.);\n        \n        fragColor *= 1.-(float(n_rnd1>0.5)*n_dmin);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}