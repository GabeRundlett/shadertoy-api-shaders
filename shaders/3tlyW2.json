{
    "Shader": {
        "info": {
            "date": "1593119040",
            "description": "Intentionally broken Newton's method.",
            "flags": 8,
            "hasliked": 0,
            "id": "3tlyW2",
            "likes": 12,
            "name": "Crack Newton",
            "published": 3,
            "tags": [
                "fractal",
                "newton"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "//Crack Newton by eiffie (intentionally broken Newton's method)\n#define time iTime\n#define rez iResolution.xy\nvec2 CosSin(float a){return vec2(cos(a),sin(a));}\nvec2 cpwr(vec2 v, float p){return pow(length(v),p)*CosSin(atan(v.y,v.x)*p);}\nvec2 cmul(vec2 a,vec2 b){return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);}\nvec2 cdiv(vec2 a,vec2 b){return (a*b.x+vec2(a.y,-a.x)*b.y)/dot(b,b);}\nvec2 f(vec2 p){return cmul(p,p)+vec2(0.0044+sin(time*0.14)*0.002,0.07+sin(time*0.1)*0.02);}\nvec2 df(vec2 p){return (0.51+sin(time)*0.01)*p+1.;}\nfloat DE(vec2 p){\n  p+=vec2(cos(time*0.05),cos(time*0.06))*20.0;p=abs(mod(p,20.)-10.)-5.;\n  float r=length(p);\n  for(int i=0;i<32;i++){\n    vec2 p2=p-cdiv(f(p),df(p));\n    r=length(p2-p);if(r<.001)break;\n    p=p2;\n  }\n  return r;\n}\nvec3 pal(float a){return abs(vec3(sin(a),sin(a*1.3),sin(a*1.5)));}\nvoid mainImage(out vec4 O, in vec2 U){\n  vec3 col=vec3(0);\n  float d1,d2;\n  for(int y=0;y<2;y++)for(int x=0;x<2;x++){\n    vec2 uv=(2.0*(U+vec2(x,y)*0.5)-rez)/rez.x;\n    float d=DE(uv*exp(1.+sin(time*0.1)));\n    if(y==x)d1+=d; else d2+=d; \n    col+=pal(d*0.15); \n  }\n  col.b+=100.0*(d1-d2);\n  O=vec4(col*0.25,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define bps 6.0 \nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);} \nvec2 nofs(float n){//the song's \"random\" ring \n  float r=0.5+0.5*rnd(floor(n));//random volume as well \n  n=mod(n,6.0); \n  if(n<1.0)n=0.0; \n  else if(n<2.0)n=2.0; \n  else if(n<3.0)n=6.0; \n  else if(n<4.0)n=8.0; \n  else if(n<5.0)n=5.0; \n  //else if(n<6.0)n=3.0; \n  //else if(n<7.0)n=0.0; \n  else n=2.0;\n  return vec2(n,r); \n} \nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.); \n //if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//major \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//minor \n //if((n2==1.)||(n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100;//pentatonic minor \n //if((n2==1.)||(n2==2.)||(n2==4.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100.;//blues  \n //if((n2==1.)||(n2==2.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//country \n //if((n2==1.)||(n2==4.)||(n2==7.)||(n2==10.))note=-100.;//diminished whole/half \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//pentatonic major \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//harmonic minor \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//melodic minor ascending \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//whole tone \n //if((n2==2.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//diminished half/whole \n if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//mixolydian   \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//dorian \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==10.))note=-100.;//lydian   \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian \n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian Major \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//locrian \n //if((n2==2.)||(n2==4.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//lydian dominant \n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//double harmonic \n //if((n2==2.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.))note=-100.;//enigmatic \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//neapolitan  \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//neapolitan minor \n //if((n2==1.)||(n2==4.)||(n2==5.)||(n2==9.)||(n2==10.))note=-100.;//hungarian minor \n return note; \n} \n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2 \nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;} \nconst float PI=3.14159; \nfloat Cos(float a){return cos(mod(a,PI*2.));} \nfloat Sin(float a){return Cos(a+PI/2.);} \nstruct instr{float att,fo,vibe,vphas,phas,dtun;}; \nvec2 I(float n,float t,float bt,instr i){//note,time,bt 0-8,instrument \n float f=ntof(scale(n));if(f<12.)return vec2(0.0);f-=bt*i.dtun;f*=t*PI*2.; \n f=exp(-bt*i.fo)*(1.0-exp(-bt*i.att))*Sin(f+Cos(bt*i.vibe*PI/8.+i.vphas*PI/2.)*Sin(f*i.phas))*(1.0-bt*0.125); \n n+=t;return vec2(f*Sin(n),f*Cos(n)); \n} \nvec2 mainSound( in int samp,float time){//att,fo,vibe,vphs,phs,dtun\n instr epiano=instr(5.5,0.05,1.5,0.1,0.505,0.001);//silly fm synth instruments \n instr zylo=instr(0.5,1.0,4.0,0.77,-0.51,0.002); \n instr drone=instr(1.,0.,.25,0.75,.0667,0.0); \n instr stick=instr(100.0,30.0,10.5,0.0,2.3131,1000.0); \n //instr pluckbass=instr(10.0,0.2,1.5,0.0,0.25,0.005); \n instr bass=instr(20.0,0.2,1.5,0.0,0.505,.0); \n float tim=time*bps,b0,b1,b2,t0,t1,t2; \n vec2 a=I(36.,time,0.5,drone)*8.;//accumulator \n for(float i=0.;i<8.;i+=1.){//go back 8 beats and add note tails \n   b0=floor(tim);b1=floor(tim*0.5);b2=floor(tim*0.25); \n   vec2 n2=nofs(b2*0.125)+nofs(b2*0.5)+nofs(b2);//build notes on top of notes like fbm \n   vec2 n1=n2+nofs(b1),n0=n1+nofs(b0); \n   t0=fract(tim)+i; \n   a+=I(n0.x+72.0,time,t0,zylo)*n0.y*0.1;\n   a+=I(n0.x+69.0,time,t0,zylo)*n0.y*0.125;\n   if(mod(i,3.)<1.)a+=I(n0.x+93.0,time+Sin(t0*2.0),t0,stick)*n0.y*0.3;  \n   if(mod(i,2.)<1.){//notes that play every 2 beats \n     t1=fract(tim*0.5)*2.0+i; \n     a+=I(n1.x+56.0,time,t1,epiano)*n1.y*.2; \n     a+=I(n1.x+60.0,time,t1,epiano)*n1.y*.2; \n     a+=I(n1.x+44.0,time,t1,bass)*n1.y;\n     if(mod(i,4.)<1.){//every 4 \n       t2=fract(tim*0.25)*4.0+i;\n       a+=I(n2.x+44.0,time,t2,bass)*n2.y; \n       //a+=I(n2.x+24.0,time+0.008*sin(t2*15.0),t2,bassdrum)*n2.y*4.0; \n     } \n   } \n   tim-=1.;//go back in time to find old notes still decaying \n } \n return clamp(a/32.0,-1.,1.); \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}