{
    "Shader": {
        "info": {
            "date": "1663598049",
            "description": "Created as an example of how to displace e.g. a hexagon shield's parts by a wave travelling downwards. This shader gives a normalized output from 0 to 1, which can be applied to things like color interpolation or vertex displacement in other applications.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lcBDB",
            "likes": 0,
            "name": "Scrolling Wave based on Position",
            "published": 3,
            "tags": [
                "simple",
                "function",
                "1dtransformation"
            ],
            "usePreview": 0,
            "username": "Molgerax",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    float frequency = 0.5;       // How often the ripple appears per second\n    float scrollingSpeed = 2.5;  // How fast the ripple propagates\n    float thickness = 0.3;       // How thick the ripple is in (1 == entire screen height)\n    \n    \n    // Take the height (here uv.y, but could be position.y)\n    float ripple = uv.y;\n    \n    // Add the time (according to some parameters) to the height, then take the fraction of that to get value from 0 to 1\n    ripple = fract((ripple + iTime * scrollingSpeed) * frequency / abs(scrollingSpeed));\n    \n    // Turn sawtooth wave ( /|/|/| ) into triangle wave ( /\\/\\/\\ )\n    ripple = abs(ripple * 2. - 1.);\n    \n    \n    // Cut off the wave below a certain threshold and smoothly blend\n    ripple = smoothstep(1.0 - thickness * frequency / abs(scrollingSpeed), 1.0, ripple);\n    \n    // Alternatively cut off the wave without smoothly blending\n    //ripple = step(1.0 - thickness * frequency / scrollingSpeed, ripple);\n\n\n    // Get the color and put it on the screen\n    vec3 col = vec3(ripple, ripple, ripple);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}