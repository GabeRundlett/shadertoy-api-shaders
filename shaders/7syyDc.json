{
    "Shader": {
        "info": {
            "date": "1655949012",
            "description": "@Peter Shirley;\nReference:https://raytracing.github.io/books/RayTracingInOneWeekend.html;\n@ shicz86;\nhttps://www.shadertoy.com/view/3djfRy;",
            "flags": 32,
            "hasliked": 0,
            "id": "7syyDc",
            "likes": 9,
            "name": "Ray Tracing in One Weekend Test",
            "published": 3,
            "tags": [
                "raytracing",
                "raytracer",
                "gi",
                "spheres",
                "pathtracing",
                "pathtracer",
                "realtime",
                "one",
                "weekend"
            ],
            "usePreview": 0,
            "username": "73begonia",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int depth = 4;\nconst float pi = 3.1415926535;\nconst int spp = 4;\n\nfloat seed = 0.0;\nvec2 UV = vec2(0.);\n\n#define LAMBERT    0\n#define METAL      1\n#define DIELECTRIC 2\n#define MIN_FLOAT 1e-3\n#define MAX_FLOAT 1e5\n\nuint base_hash(uvec2 p) {\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\nfloat hash1(inout float seed) {\n    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    return float(n)/float(0xffffffffU);\n}\n\nvec2 hash2(inout float seed) {\n    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    uvec2 rz = uvec2(n, n*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash3(inout float seed) {\n    uint n = base_hash(floatBitsToUint(vec2(seed+=.1,seed+=.1)));\n    uvec3 rz = uvec3(n, n*16807U, n*48271U);\n    return vec3(rz & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nfloat random()\n{\n\treturn fract(sin(dot(UV, vec2(12.9898, 78.233)) + seed++) * 43758.5453);\n}\n\nvec3 random_in_unit_sphere()\n{\n\tvec3 p = vec3(0.);\n    do{\n        p=2.*vec3(random(),random(),random())-vec3(1.);\n    }while(dot(p,p)>=1.);\n    return p;\n}\n\nvec3 random_in_unit_disk()\n{\n\tvec3 p =  vec3(0.);\n    do{\n        p=2.*vec3(random(),random(),0)-vec3(1.,1.,0.);\n    }while(dot(p,p)>=1.);\n    return p;\n}\n\nstruct Ray\n{\n    vec3 ro;\n    vec3 rd;\n};\n\nstruct Material\n{\n  int materialType;\n  vec3 normal;\n  vec3 baseColor;\n  float fuzz;\n  float refractionIndex;\n};\n\nstruct HitResult\n{\n  float t;\n  vec3 hitPoint;\n  Material material;\n  bool front_face;\n};\n\nstruct Sphere\n{\n    vec4 sph;\n    Material material;\n};\n\nstruct Camera\n{\n    vec3 origin;\n    vec3 lowerLeftCorner;\n    vec3 horizontal;\n    vec3 vertical;\n    vec3 u, v, w;\n    float lensRadius;\n};\n\nvec3 set_face_normal(Ray r, vec3 outward_normal)\n{\n    float front_face = dot(r.rd, outward_normal);\n    if(front_face < 0.)\n        return outward_normal;\n    else\n        return -outward_normal;\n}\n\n\nvec3 nSphere(vec3 pos, Sphere s ) {\n    return (pos-s.sph.xyz)/s.sph.w;\n}\n\nbool iSphere(Ray r, Sphere s, float t_min, float t_max, inout HitResult res)\n{\n  vec3 oc = r.ro - s.sph.xyz;\n  float a = dot(r.rd, r.rd);\n  float h = dot(oc, r.rd);\n  float c = dot(oc, oc) - s.sph.w * s.sph.w;\n  float discriminant = h * h - a * c;\n  vec3 outward_normal;\n  \n  if(discriminant > 0.)\n  {\n      float root = sqrt(discriminant);\n      float temp = (-h - root) / a;\n      if(temp < t_max && temp > t_min)\n      {\n          res.t = temp;\n          res.hitPoint = r.ro + res.t * r.rd;\n          outward_normal = nSphere(res.hitPoint, s);\n          res.front_face = dot(r.rd, outward_normal) < 0.;\n          \n          res.material = s.material;\n          res.material.normal = set_face_normal(r, outward_normal);\n          return true;\n      }\n      temp = (-h + root) / a;\n      if(temp < t_max && temp > t_min)\n      {\n          res.t = temp;\n          res.hitPoint = r.ro + res.t * r.rd;\n          outward_normal = nSphere(res.hitPoint, s);\n          res.front_face = dot(r.rd, outward_normal) < 0.;\n          \n          res.material = s.material;\n          res.material.normal = set_face_normal(r, outward_normal);\n          return true;\n      }\n  }\n  return false;    \n}\n\nMaterial m_Lambertian(vec3 baseColor)\n{\n\treturn Material(LAMBERT, vec3(0.), baseColor, 0., 0.);\n}\n\nMaterial m_Metal(vec3 baseColor, float fuzz)\n{\n\treturn Material(METAL, vec3(0.), baseColor, fuzz, 0.);\n}\n\nMaterial m_Dielectric(float refractionIndex)\n{\n\treturn Material(DIELECTRIC, vec3(0.), vec3(0.), 0., refractionIndex);\n}\n\nfloat schlick(float cos_theta, float n2)\n{\n    const float n1 = 1.0f;  // refraction index for air\n\n    float r0s = (n1 - n2) / (n1 + n2);\n    float r0 = r0s * r0s;\n\n    return r0 + (1.0f - r0) * pow((1.0f - cos_theta), 5.0f);\n}\n\nbool refractVec(vec3 v, vec3 n, float ni_over_nt, out vec3 refracted)\n{\n    vec3 uv = normalize(v);\n\n    float dt = dot(uv, n);\n\n    float discriminant = 1.0 - ni_over_nt * ni_over_nt * (1.0f - dt * dt);\n\n    if (discriminant > 0.0f)\n    {\n        refracted = ni_over_nt*(uv - n * dt) - n * sqrt(discriminant);\n\n        return true;\n    }\n    else\n        return false;\n}\n\nbool lambertian(Ray r, HitResult res, out vec3 attenuation, out Ray scattered) \n{\n    scattered = Ray(res.hitPoint, res.material.normal + random_in_unit_sphere());\n\tattenuation = res.material.baseColor;\n\treturn true;\n}\n\nbool metal(Ray r, HitResult res, out vec3 attenuation, out Ray scattered) \n{\n    float fuzz = res.material.fuzz;\n    vec3 reflected = reflect(normalize(r.rd), res.material.normal);\n    scattered = Ray(res.hitPoint, reflected + fuzz * random_in_unit_sphere());\n    attenuation = res.material.baseColor;\n    return (dot(scattered.rd, res.material.normal) > 0.0);   \n}\n\nbool dielectric(Ray r, HitResult res, out vec3 attenuation, out Ray scattered) \n{\n\tattenuation = vec3(1.);\n    float etai_over_etat = (res.front_face) ? (1.0 / res.material.refractionIndex) : (res.material.refractionIndex);\n    \n    vec3 unit_direction = normalize(r.rd);\n    float cos_theta = min(dot(-unit_direction, res.material.normal), 1.0);\n    float sin_theta = sqrt(1.0 - cos_theta*cos_theta);\n    if (etai_over_etat * sin_theta > 1.0 ) {\n        vec3 reflected = reflect(unit_direction, res.material.normal);\n        scattered = Ray(res.hitPoint, reflected);\n        return true;\n    }\n    float reflect_prob = schlick(cos_theta, etai_over_etat);\n    if (random() < reflect_prob)\n    {\n        vec3 reflected = reflect(unit_direction, res.material.normal);\n        scattered = Ray(res.hitPoint, reflected);\n        return true;\n    }\n    vec3 refracted = refract(unit_direction, res.material.normal, etai_over_etat);\n    scattered = Ray(res.hitPoint, refracted);\n    return true;\n}\n\nbool material_BSDF(HitResult res, Ray wo, out Ray wi, out vec3 attenuation)\n{\n    int materialType = res.material.materialType;\n\n    if(materialType == LAMBERT)\n    {\n        return lambertian(wo, res, attenuation, wi);\n    }\n    else if(materialType == METAL)\n    {\n        return metal(wo, res, attenuation, wi);\n    }\n    else if(materialType == DIELECTRIC)\n    {\n    \treturn dielectric(wo, res, attenuation, wi);\n    }\n\n    return false;\n}\n\nbool iScene(Ray r, float t_min, float t_max, out HitResult tempRes)\n{\n    tempRes.t = t_max;\n    bool hit = false;\n\n\tSphere s1 = Sphere(vec4(0., -1000, 0., 1000.), m_Lambertian(vec3(0.5)));\n    if(iSphere(r, s1, t_min, tempRes.t, tempRes))\n    {\n        hit = true;\n    }\n    \n    Sphere s2 = Sphere(vec4(0, 1, 0, 1.0), m_Dielectric(1.5));\n    if(iSphere(r, s2, t_min, tempRes.t, tempRes))\n    {\n        hit = true;\n    }\n    \n    Sphere s3 = Sphere(vec4(-4, 1, 0, 1.0), m_Lambertian(vec3(0.4, 0.2, 0.1)));\n    if(iSphere(r, s3, t_min, tempRes.t, tempRes))\n    {\n        hit = true;\n    }\n    \n    Sphere s4 = Sphere(vec4(4, 1, 0, 1.0), m_Metal(vec3(0.7, 0.6, 0.5), 0.0));\n    if(iSphere(r, s4, t_min, tempRes.t, tempRes))\n    {\n        hit = true;\n    }\n    \n    for(int a = -11; a < 11; a++)\n        for(int b = -11; b < 11; b++)\n        {\n            float m_seed = float(a) + float(b)/1000.;\n            vec3 rand1 = hash3(m_seed);            \n            vec3 center = vec3(float(a)+.9*rand1.x,.2,float(b)+.9*rand1.y); \n            float choose_mat = rand1.z;\n            \n            if (distance(center,vec3(4,.2,0)) > .9) \n            {\n                if (choose_mat < 0.8) \n                { \n                    Sphere s = Sphere(vec4(center, 0.2), m_Lambertian(hash3(m_seed)* hash3(m_seed)));\n                    if (iSphere(r, s, t_min, tempRes.t, tempRes))\n                        hit=true;\n                } \n                else if (choose_mat < 0.95) \n                { \n                    Sphere s = Sphere(vec4(center, 0.2), m_Metal(.5*(hash3(m_seed)+1.),.5*hash1(m_seed)));\n                    if (iSphere(r, s, t_min, tempRes.t, tempRes))\n                        hit=true;\n                } \n                else \n                { \n                    Sphere s = Sphere(vec4(center, 0.2), m_Dielectric(1.5));\n                    if (iSphere(r, s, t_min, tempRes.t, tempRes)) \n                        hit=true;\n                }\n            }\n        }\n    \n    return hit;\n}\n\nvec3 ray_color(Ray r, vec2 uv)\n{\n    vec3 col = vec3(1.);\n\t\n    HitResult res;\n    Ray scattered;\n    vec3 attenuation;\n    \n    for(int i = 0; i < depth; i++)\n    {\n\t\tif(iScene(r, MIN_FLOAT, MAX_FLOAT, res))\n\t\t{\n\t\t\tbool wasScattered = material_BSDF(res, r, scattered, attenuation);\n\t\t\tr.ro = scattered.ro;\n\t\t\tr.rd = scattered.rd;\n\t\t\t\n\t\t\tif(wasScattered)\n\t\t\t\tcol *= attenuation;\n\t\t\telse\n\t\t\t{\n\t\t\t\tcol *= vec3(0.);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tvec3 unit_direction = normalize(r.rd);\n            float t = 0.5*(unit_direction.y+1.0);\n            col *= mix(vec3(1.),vec3(.5,.7,1.),t);\n            return col;\n\t\t}\n    }\n    \n    return vec3(0.);\t\n}\n\nvoid Camera_init(out Camera camera, vec3 lookfrom, vec3 lookat, vec3 vup, float vfov, float aspect, float aperture, float focusDist)\n{\n    camera.lensRadius = aperture / 2.0;\n    \n    float theta = vfov * pi / 180.0;\n    float halfHeight = tan(theta / 2.0);\n    float halfWidth = aspect * halfHeight;\n\n    camera.origin = lookfrom;\n\n    camera.w = normalize(lookfrom - lookat);\n    camera.u = normalize(cross(vup, camera.w));\n    camera.v = cross(camera.w, camera.u);\n\n    camera.lowerLeftCorner = camera.origin  - halfWidth  * focusDist * camera.u\n                                            - halfHeight * focusDist * camera.v\n                                            -              focusDist * camera.w;\n\n    camera.horizontal = 2.0 * halfWidth  * focusDist * camera.u;\n    camera.vertical   = 2.0 * halfHeight * focusDist * camera.v;\n}\n\n\nRay Camera_getRay(Camera camera, float s, float t)\n{\n    vec3 rd = camera.lensRadius * random_in_unit_sphere();\n    vec3 offset = camera.u * rd.x + camera.v * rd.y;\n\n    Ray r;\n\n    r.ro = camera.origin + offset;\n    r.rd = camera.lowerLeftCorner + s * camera.horizontal + t * camera.vertical - camera.origin - offset;\n\n    return r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    seed = iTime;\n    UV = fragCoord / iResolution.xy;\n    \n    vec3 lookfrom = vec3(13, 2, 3);\n    const vec3 lookat = vec3(0.0, 0.0, 0.);\n    float aspect_ratio = iResolution.x / iResolution.y;\n    float distToFocus = 10.;\n    float aperture = 0.1;\n    \n    Ray r;\n    Camera cam;\n    vec3 col;\n    vec2 uv;\n    \n    \n    for(int i = 0; i < spp; i++)\n    {   \n        uv = (fragCoord.xy + vec2(random(), random())) / iResolution.xy;\n        \n        Camera_init(cam, lookfrom, lookat, vec3(0., 1., 0.), 20., aspect_ratio, aperture, distToFocus);\n\t    r = Camera_getRay(cam, uv.x, uv.y);\n\t\t\n        col += ray_color(r, uv);\n    }\n    \n    col /= float(spp);\n    \n    col = pow(clamp(col, 0., 1.), vec3(0.45));\n    \n    vec3 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    col = mix(lastFrameColor, col, 1.0f / float(iFrame+1));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}