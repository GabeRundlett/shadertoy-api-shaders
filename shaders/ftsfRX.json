{
    "Shader": {
        "info": {
            "date": "1651221405",
            "description": "Using the distortion of a circle with my standard => perlin noise code I made this",
            "flags": 0,
            "hasliked": 0,
            "id": "ftsfRX",
            "likes": 1,
            "name": "Landmass generator",
            "published": 3,
            "tags": [
                "generatorperlinnoise"
            ],
            "usePreview": 0,
            "username": "JustBoredYo",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "//Itterations to smooth the noise\nfloat octaves = 8.;\n//\"Size\" of the sampled noise texture | Doubles each itteration\nfloat frequency = 0.125;\n//\"Height\" of the sampled value | Halfes each itteration\nfloat amplitude = 1.;\n//Size of the uv space | 1 = noise texture is sampled once across the screen, 2 = twice, etc.\nfloat size = 1.0;\n//Final color of the pixel\nvec4 final = vec4(0.);\n//Radius of the circle in which the noise is shown\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy/iResolution.xy)*size;\n    \n    for(float i = 0.; i < octaves; i++)\n    {\n        //Sample region which increases each itteration\n        vec4 col = texture(iChannel0, (uv*frequency));\n        \n        //Just to get it to be black and white\n        col = vec4(col.x *= amplitude);\n        //You want to see it, right?\n        col.w = 1.0;\n        \n        //Added as it is normalized at the end\n        final += col;\n        \n        //Double/Half the values for the next itteration\n        frequency *= 2.;\n        amplitude *= .5;\n        \n    }\n    \n    //Normalize to not just have a white image and multiply with mask to get a smooth falloff\n    final = (normalize(final)*(octaves/2.));\n    \n    //Calculate a circle and mulriply the distance difference by the current value to get the distortion\n    float dist = sqrt((fragCoord.x - iResolution.x/2.)*final.x*(fragCoord.x - iResolution.x/2.)*final.x+(fragCoord.y - iResolution.y/2.)*final.x*(fragCoord.y - iResolution.y/2.)*final.x);\n    \n    fragColor = vec4(0.3, 0.3, 1, 1);\n    \n    //Color if inside of the Landmass\n    if(dist <= 102. + 3.*((sin(iTime)+1.)/2.))\n       fragColor = vec4(1, 1, 1, 1);\n    if(dist <= 100.)\n    {\n       if(dist >= 80.)\n           fragColor = vec4(0.95, 0.8, 0, 1);\n       else\n           fragColor = vec4(0., 0.7, 0., 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}