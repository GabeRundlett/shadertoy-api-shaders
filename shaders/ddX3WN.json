{
    "Shader": {
        "info": {
            "date": "1666189659",
            "description": "edible fluid simulacre",
            "flags": 32,
            "hasliked": 0,
            "id": "ddX3WN",
            "likes": 16,
            "name": "Cream Crane Consultant",
            "published": 3,
            "tags": [
                "fluid",
                "cream"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 452
        },
        "renderpass": [
            {
                "code": "\n// Cream Crane Consultant\n//\n// edible fluid simulacre\n//\n// variation of Bobby Blob Booping https://www.shadertoy.com/view/msX3W4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n    vec3 color = vec3(0);\n    \n    // noise\n    vec3 blue = texture(iChannel1, fragCoord/1024.).xyz;\n    \n    // normal\n    vec3 unit = vec3(vec2(.01*blue.x), 0.);\n    vec3 normal = normalize(vec3(T(uv-unit.xz)-T(uv+unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 .1));\n                                 \n    // light\n    color += dot(normal, N(0,1,1))*.5+.5;\n    \n    // shadow\n    color *= ss(.0,.1,data.r);\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define R iResolution.xy\n#define ss(a,b,t) smoothstep(a,b,t)\n#define N(a,b,c) normalize(vec3(a,b,c))\n#define T(uv) texture(iChannel0, uv).r\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-R)/R.y;\n    float a = 0.;\n    \n    // salt\n    float rng = hash13(vec3(fragCoord, iFrame));\n    \n    // normal\n    vec3 unit = vec3(vec2(.02*rng), 0.);\n    vec3 normal = normalize(vec3(T(uv-unit.xz)-T(uv+unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 .001));\n    \n    // ground collision\n    vec3 edge = (vec3(0,ss(.2,.0,uv.y),0.));\n    normal = normalize(normal+edge);\n    \n    // cursor motion\n    if (iMouse.z > 0.) {\n        p -= (2.*iMouse.xy-R)/R.y;\n    } else {\n        float time = iTime*1.5;\n        float index = floor(time);\n        float anim = fract(time);\n        vec2 offset = mix(hash21(index), hash21(index+1.), anim)*2.-1.;\n        p += offset*.5*vec2(2.,1.);\n        p.y -= .4;\n        a = iTime * 10.;\n        p += vec2(cos(a),sin(a))*.1;\n    }\n    \n    // shape\n    float shade = ss(.1,.0,abs(length(p)));\n                \n    // neighboring\n    vec4 frame = texture(iChannel0, uv);\n    float life = frame.r;\n    unit = vec3(vec2(.1*rng), 0.);\n    life += T(uv-unit.xz)+T(uv+unit.xz)+T(uv-unit.zy)+T(uv+unit.zy)\n           +T(uv+unit.xy)+T(uv+vec2(unit.x,-unit.y))+T(uv+vec2(-unit.x,unit.y))+T(uv-unit.xy);\n    \n    // gravity\n    uv.y += .001 * life;\n    \n    // leaking\n    uv += normal.xy * .001 * dot(normal.xy, vec2(0,1));\n    \n    // ground collision\n    uv -= normal.xy * .005 * edge.y;\n    \n    // famebuffer fading\n    frame = texture(iChannel0, uv);\n    shade = frame.r - .001 + shade;\n    shade = max(shade, 0.);\n    \n    // fix ceiling stuck\n    if (fragCoord.y > R.y-1.) shade = 0.;\n    \n    fragColor = vec4(shade, 0, 0, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}