{
    "Shader": {
        "info": {
            "date": "1438372477",
            "description": "experimenting with raymarching trough 3D noise density field\nmade for competition on warsztat.gd",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXSzf",
            "likes": 20,
            "name": "explosion no. 12",
            "published": 3,
            "tags": [
                "raymarching",
                "explosion",
                "warsztat"
            ],
            "usePreview": 1,
            "username": "miloszmaki",
            "viewed": 4298
        },
        "renderpass": [
            {
                "code": "const int ITERATIONS = 20;\nconst float STEP = 0.08;\nconst float DURATION = 5.0;\n\nfloat noise(vec3 x) // iq's 3D noise\n{\n    vec3 f = fract(x);\n    vec3 p = x - f;\n    f = f*f*(3.0 - 2.0*f);\n    vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n    vec2 rg = texture(iChannel0, (uv + 0.5)/256.0, -100.0).rg;\n    return mix(rg.y, rg.x, f.z);\n}\n\nfloat fbm(vec3 x)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        w *= 0.5;\n        s *= 2.0;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nvec3 getColor(float r, float d)\n{\n    vec3 c = mix(vec3(0.9), vec3(0.5, 0.4, 0.1), d);\n    \n\tc *= mix(vec3(1.0, 0.4, 0.0), vec3(0.5), r );\n    \n\treturn c * 4.0;\n}\n\nvec4 scene(vec3 pos, float t)\n{    \n    float density = fbm(4.0*pos);\n    \n    float rad = length(pos);\n    density -= 0.1 + rad * (1.0 - 0.2 * t);\n   \n    density = clamp(density, 0.0, 1.0);\n    density *= (1.0 - smoothstep(0.5, 1.0, rad));\n    \n    return vec4(getColor(rad, density), density);\n}\n\nvec3 render(vec3 eye, vec3 dir, vec2 fragCoord, float t)\n{\n    vec4 color = vec4(0);\n    \n    vec3 pos = eye + dir * STEP * texture(iChannel0, fragCoord.xy/iChannelResolution[0].x).r;\n    \n    for (int i=0; i<ITERATIONS; i++)\n    {\n        if (color.a > 0.99) continue;\n        if (length(pos) > 1.1) continue;\n        \n        vec4 d = scene(pos, t);\n        d.rgb *= d.a;\n        color += d * (1.0 - color.a);\n        \n        pos += dir * STEP;\n    }\n    \n    return clamp(color.rgb, 0.0, 1.0);\n}\n\nvec3 lookAtDir(vec2 uv, vec3 eye, vec3 at, vec3 up, float fov)\n{\n    vec3 f = normalize(at - eye);\n    vec3 r = normalize(cross(up, f));\n    vec3 u = normalize(cross(f, r));\n    return normalize(f + fov * (uv.x*r + uv.y*u));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float angle = iTime * 0.3;\n    vec3 eye = vec3(sin(angle), 0, cos(angle));\n    vec3 dir = lookAtDir(uv, eye, vec3(0, 0, 0), vec3(0, 1, 0), 1.0);\n    \n    float time = mod(iTime, DURATION);\n\t\n    vec3 color = render(eye, dir, fragCoord, time);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}