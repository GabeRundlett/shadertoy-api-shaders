{
    "Shader": {
        "info": {
            "date": "1571156780",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "wdy3D3",
            "likes": 2,
            "name": "shadetober #14 (overgrown)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 381
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\n// polynomial smooth min (k = 0.1);\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdCylinder(vec3 p, vec3 c) { return length(p.xz - c.xy) - c.z; }\n\nmat3 rotx(in float rad) {\n  return mat3(1., 0., 0., 0., cos(rad), sin(rad), 0., -sin(rad), cos(rad));\n}\nmat3 roty(in float rad) {\n  return mat3(cos(rad), 0., sin(rad), 0., 1., 0., -sin(rad), 0., cos(rad));\n}\nmat3 rotz(in float rad) {\n  return mat3(cos(rad), sin(rad), 0., -sin(rad), cos(rad), 0., 0., 0., 1.);\n}\n\nfloat map(in vec3 p) {\n  vec3 cyl = vec3(0., 0., .2);\n\n  float displace = \n      cos(p.x * PI + mod(iTime,PI) * 10.)\n      +cos(p.y * PI + iTime * .2)\n      +cos(p.z * PI + iTime * .6)\n      ;\n  displace *= .05;\n\n  float vert = sdCylinder(p, cyl) + displace;\n  p *= rotz(PI * .5);\n  float hori = sdCylinder(p, cyl) + displace;\n  p *= rotx(PI * .5);\n  float dept = sdCylinder(p, cyl) + displace;\n\n  float blending = (sin(iTime * 2.) + 2.) * .2;\n  return smin(dept, smin(hori, vert, blending), blending);\n}\n\nfloat raymod(in vec3 p, in vec3 c) {\n  vec3 q = mod(p + 0.5 * c, c) - 0.5 * c;\n  return map(q);\n}\n\nvec3 grad(vec3 p) {\n  vec2 ep = vec2(0.00001, 0.);\n  return normalize(map(p) -\n                   vec3(map(p - ep.xyy), map(p - ep.yxy), map(p - ep.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n  vec3 color = vec3(0.);\n\n  vec3 eye = vec3(.5, .5, 1.5);\n  vec3 ray = normalize(vec3(uv, -.5));\n\n  // some camera motion\n  mat3 rotx = rotx(iTime * .2);\n  mat3 roty = roty(iTime * .3);\n  mat3 rotz = rotz(iTime * .4);\n  mat3 rot = rotx * roty * rotz;\n  eye *= rot;\n  ray *= rot;\n\n  float t = 0.;\n  for (int i = 0; i < 100; i++) {\n    vec3 p = eye + ray * t;\n    float d = raymod(p, vec3(2.));\n    if (d < .001 && i > 32) {\n        \n      vec3 n = grad(p);\n      \n      vec3 lcol = vec3(0., .6, .2);\n      vec3 ldir = normalize(vec3(1., 1., 1.));\n      \n      vec3 lcol2 = vec3(.0, .8, .5);\n      vec3 ldir2 = normalize(vec3(1., -1., -1.));\n        \n      float atten = pow(1. / (.2 + t), .5);\n      color = (dot(n, ldir) * lcol + pow(.5 + dot(n, ldir2), 2.) * lcol2) * atten;\n        \n      break;\n    }\n    t += d;\n    if (t > 100.) {\n      color = vec3(0.);\n      break;\n    }\n  }\n\n  fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}