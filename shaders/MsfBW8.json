{
    "Shader": {
        "info": {
            "date": "1499458102",
            "description": "2d sky with clouds that are a cross-section of 3d fbm. Ocean heightmap with 3d worley noise based ripples. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MsfBW8",
            "likes": 13,
            "name": "Worley Sea",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "noise",
                "ocean",
                "worley"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 1392
        },
        "renderpass": [
            {
                "code": "//clouds\n#define cloudIterations 4\n#define cloudScale .1\n#define cloudThickness .3\n#define cloudSpeed .1\n#define cloudDir vec2(.866, .5)\n#define skyHeight 40.0\n//waves\n#define bigWaveDir vec2(.866, .5)\n#define smallWaveDir vec2(.866, -.5)\n#define bigWaveHeight 10.0\n#define smallWaveHeight 5.0\n#define bigWaveSpeed 1.0\n#define smallWaveSpeed 2.0\n#define bigWaveLength 5.0\n#define smallWaveLength 5.0\n//ripples\n#define rippleHeight .5\n#define rippleDensity 1.0\n#define rippleFreq 3.0\n//colors\n#define skyColor vec3(.3, .8, 1)\n#define cloudColor vec3(.7, .84, .84)\n#define fogColor vec3(.74, .84, .94)\n#define waterColor vec3(.05, .546, .85)\n//util\n#define pi 3.141592654\n#define steps 20\n#define heightThreshold .01\n#define epsilon .01\n#define stepsize .1\n//misc\n#define cameraHeight 25.0\n#define light vec3(1)\n\nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvec3 hash33(vec3 p3)//Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat hash13(vec3 p3)//Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hashNoise(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix(hash13(p+vec3(0,0,0)), \n                       hash13(p+vec3(1,0,0)),f.x),\n                   mix(hash13(p+vec3(0,1,0)), \n                       hash13(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix(hash13(p+vec3(0,0,1)), \n                       hash13(p+vec3(1,0,1)),f.x),\n                   mix(hash13(p+vec3(0,1,1)), \n                       hash13(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat ripples(vec2 x){\n    vec3 p = vec3(x, rippleFreq * iTime);\n    p *= rippleDensity;\n    float d = 9e9;\n    vec3 g = floor(p);\n    for(int i = -1; i < 2; i++){\n        for(int j = -1; j < 2; j++){\n            for(int k = -1; k < 2; k++){\n\t\t\t\tvec3 g0 = g + vec3(i, j, k);\n                vec3 v = p - g0 - hash33(g0);\n            \td = min(d, dot(v, v));\n            }\n        }\n    }\n    return rippleHeight*d;\n}\n                \nfloat heightMap(vec2 x){\n    float result = -2.0 * (bigWaveHeight + smallWaveHeight + 2.0 * rippleHeight);\n    result += bigWaveHeight * sin(dot(x, bigWaveDir) / bigWaveLength \n                                   + bigWaveSpeed * iTime);\n    result += smallWaveHeight * sin(dot(x, smallWaveDir) / smallWaveLength\n                                   + smallWaveSpeed * iTime);\n    result += ripples(x);\n\treturn result;\n}\n\nfloat hpotential(vec3 pos){return pos.y - heightMap(pos.xz);}\n\nvec3 getNormal(vec3 pos){\n    vec2 e = vec2(1.0, 0.0);\n    return normalize(vec3(\n        hpotential(pos + epsilon * e.xyy),\n        hpotential(pos + epsilon * e.yxy),\n        hpotential(pos + epsilon * e.yyx))\n        - hpotential(pos));\n}\n\nfloat doSun(vec3 rd){\n    float l = max(0.0, dot(rd, normalize(light)));\n    l *= l;\n    l *= l;\n    l *= l;\n    return l;\n}\n\nfloat doClouds(vec2 x){\n    x *= cloudScale;\n    x.x += 1000.0;\n    x += cloudSpeed * iTime * cloudDir;\n    float result = 0.0;\n    float scale = .5;\n    for(int n = 0; n < cloudIterations; n++){\n        result += hashNoise(vec3(x, cloudSpeed * iTime) * scale) / scale;\n        scale *= 2.0;\n        \n    }\n    result *= .5;\n    result = smoothstep(1.0 - cloudThickness, 1.0, result);\n    return result;\n}\n\nvec3 doSky(vec3 rd, vec3 ro){\n    vec2 skyPos = ro.xz + rd.xz * (skyHeight - ro.y) / rd.y;\n    vec3 result = cloudColor;\n    float sun = doSun(rd);\n    float clouds = doClouds(skyPos);\n    result += clouds;\n    result = mix(result, skyColor, clouds);\n    result += pow(vec3(.9, .4, .1), (.8 - vec3(sun * clouds)) * 20.0);\n    return result;\n}\n\nvec3 render(vec3 rd, vec3 ro){\n    if(rd.y < 0.0){\n        float rdParam = rd.y + length(rd.xz);\n        vec3 intersect = ro + cameraHeight * rd / rd.y;\n        float dist = length(intersect.xz);\n        float d = distance(intersect, ro);\n        vec3 pos = intersect;\n        for(int n = 0; n < steps; n++){\n        \tpos = d * rd + ro;\n        \tfloat h = hpotential(pos);\n        \tif(h < heightThreshold) break;\n        \telse d += rdParam/h;\n    \t}\n        vec3 n = getNormal(pos);\n        pos.y += cameraHeight;\n        vec3 refl = doSky(reflect(rd, n), pos);\n        return refl * waterColor;\n    }\n    else return doSky(rd, ro);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    fragColor = vec4(vec3(0.0), 1.0);\n    vec2 xy = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    vec3 ro = vec3(0.0, cameraHeight, 0.0);\n\tvec3 rd = normalize(vec3(xy, 2.5));\n    vec2 m = 2.0 * (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    if(iMouse.xy == vec2(0)) m = vec2(0);\n    rd = r(rd, m);\n    fragColor.xyz = mix(render(rd, ro), fogColor, max(0.0, 1.0 - abs(10.0 * rd.y)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}