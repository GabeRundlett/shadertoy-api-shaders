{
    "Shader": {
        "info": {
            "date": "1513100160",
            "description": "Use 2 passes to cheaply extend a (u,v) square domain around random dots.\nUseful when you can avoid a loop over all sprites to be splats, because location can be generated on Eulerian way (procedural(pixel), video thresholding...). \nclick to see domains.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtXBDS",
            "likes": 9,
            "name": "display massive sprites",
            "published": 3,
            "tags": [
                "2d",
                "sprites",
                "splatting"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1033
        },
        "renderpass": [
            {
                "code": "// --- creates icons height + render (NB: limited overlap management ).\n\n#define L 15.\n\n#define T(y) texelFetch(iChannel0, ivec2(U)+ivec2(0,y), 0)\n\n#define shape(U,t) texture(iChannel1, (U+L)/(2.*L)*vec2(40./256.,1)+vec2((mod(floor(t),6.)+.13*sin(6.283*(t)/6.))*40./256.,0))\n\n//#define optim(y) true     // if collision, a part is missing: quite visible on transparent sprites\n#define optim(h) (shape( vec2(T(h).y,-h), ( iTime-T(h).x)*10. ).a > 0. || iMouse.z > 0. ) // check transp for less collisions\n\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    O -= O;\n    for (float y=0.; y<L; y++) {\n        if ( T( y).x > 0. && optim( y) ) { O.xy =  T( y).xy; O.z = -y ; break; }\n        if ( T(-y).x > 0. && optim(-y) ) { O.xy =  T(-y).xy; O.z =  y ; break; }\n    }\n    \n    O = O.x == 0. \n        ? O-O \n        : shape(O.yz, (iTime-O.x)*10. );\n    if (iMouse.z<=0.) O *= O.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- creates point distribution + value (used as time offset)\n\n#define rnd(p) fract( 3758.5453 * sin(dot(p, vec2(12.9898, 78.233))) )\n\nvoid mainImage( out vec4 O,  vec2 U )\n{   O = vec4( rnd(U) > .998 ) * rnd(U+.5); }",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- creates icons width\n\n#define L 15.\n\n#define T(x) texelFetch( iChannel0, ivec2(U)+ivec2(x,0), 0 )\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    O -= O;\n    for (float x=0.; x<L; x++) {\n        if ( T( x).x > 0. ) { O.x =  T( x).x; O.y = -x; break; }\n        if ( T(-x).x > 0. ) { O.x =  T(-x).x; O.y =  x; break; }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}