{
    "Shader": {
        "info": {
            "date": "1679809673",
            "description": "A variation of: https://www.shadertoy.com/view/flBSzw this time mapped on a sphere and different coloring.",
            "flags": 0,
            "hasliked": 0,
            "id": "md3SDN",
            "likes": 25,
            "name": "A doodle on a sphere",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "sphere",
                "doodle",
                "intersect"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "\n// Cole Peterson\n\n#define R iResolution.xy\n#define m ( iMouse.xy - .5*R.xy ) / R.y\n#define ss(a, b, t) smoothstep(a, b, t)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n\nvec4 sphere(vec3 ro, vec3 rd, vec3 cn, float r){\n    float b = 2.*dot(rd, ro - cn);\n    float c = dot(ro - cn, ro - cn) - (r*r);\n    float d = (b*b) - (4.*c);\n \t\n    if(d < 0.) \n        return vec4(0);\n    else{\n     \tfloat t = .5*(-b - sqrt(d));   \n        return vec4(ro+rd*t, t);\n    }\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    float t = iTime*.25 - 1.5;\n    vec2 uv2 = vec2(u.xy - 0.5*R.xy)/R.y * rot(-t*.5);\n    \n    vec3 ro = vec3(0., 0., -2.0);\n    vec3 rd = normalize(vec3(uv2, 1.));\n    \n    // Intersect sphere\n    float rad = .88;\n    vec3 nrm = vec3(0), cntr = vec3(0);\n    vec4 p = sphere(ro, rd, cntr, rad);\n    vec2 uv = 1.5*vec2( u - .5*R ) / R.y;\n    \n    if(p.w > 0.){\n         nrm = normalize(p.xyz -cntr);\n         uv = vec2(atan(nrm.z, nrm.x), acos(p.y / rad)); \n    }\n    else\n        uv /= (1.-.3*length(uv2*12.));\n\n    uv += vec2(t*.5, -t*.2);\n    \n    if(iMouse.z > 0.) uv += m*2.;\n    \n    // Fractal\n    uv = (uv + vec2(-uv.y,uv.x) ) / 1.41;\n    uv = -abs(fract(uv * .35) - .5);\n    \n    vec2 v = vec2(cos(.09), sin(.09));\n    float dp = dot(uv, v);\n    uv -= v*max(0., dp)*2.;\n    \n    float w = 0.;\n    for(float i = 0.; i < 18.;i++){\n        uv *= 1.35;\n        uv = abs(uv);\n    \tuv -= 0.5;\n    \tuv -= v*min(0., dot(uv, v))*2.;\n        uv *= rot(i*.02 + 33.83);\n        uv.y += cos(uv.x*45.)*.003;\n        w += dot(uv, uv);\n    }\n    \n    float n = (w*12. + dp*25.);\n    vec3 col = 1. - (.6 + .6*cos(vec3(.45, 0.6, .81) * n + t*5. +vec3(-.6, .3, -.6)));\n    \n    if(p.w > 0.){\n        vec3 ld = normalize(vec3(.4, -.4, -1.));\n        float dif = dot(nrm, ld);\n        col *= dif;\n    }\n    else{\n        col = col.yzx;\n        col *= .11;\n    }\n    \n    col *= max(ss(.04, .11, abs(uv.y*.4)), .1);\n    f = vec4(1.-exp(-col), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}