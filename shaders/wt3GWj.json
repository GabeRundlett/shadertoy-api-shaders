{
    "Shader": {
        "info": {
            "date": "1577561451",
            "description": "Actual molecular dynamics on a fragment shader lol. Done with voronoi particle tracking and voronoi line tracking.",
            "flags": 32,
            "hasliked": 0,
            "id": "wt3GWj",
            "likes": 47,
            "name": "Voronoi Molecular Dynamics",
            "published": 3,
            "tags": [
                "fast",
                "particles",
                "triangulation"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 1293
        },
        "renderpass": [
            {
                "code": "// Fork of \"Dynamic Voronoi Graph\" by michael0884. https://shadertoy.com/view/3t33D2\n// 2019-12-28 19:11:46\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tvec4 particle = texel(ch0, pos);\n    float distr = 4.*gauss(pos - particle.xy, 1.5);\n    vec4 b = texel(ch1, pos);\n    float line = exp(-pow(sdLine(pos, b.xy, b.zw)/1.,2.));\n \tfloat linel = length(b.xy - b.zw);\n    float pl1 = length(pos - b.zw);\n    vec3 color = 1.5*jet_range(clamp(abs(linel-ad),1.,6.), 0.,10.)/(0.15*abs(linel-ad) + 1.); \n    fragColor = vec4(color*line + distr, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, pos+dx);\n    //check if the stored neighbouring particle is closer to this position \n    if(length(Unb.xy - pos) < length(U.xy - pos))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\n\nvec4 sample_force_point(vec2 pos, vec2 this_particle)\n{\n    vec4 line = texel(ch1, pos);\n    float ld = sdLine(pos, line.xy, line.zw);\n    //the further from the line the less the influence\n    float weight = exp(-pow(ld*2.,2.));\n   \tfloat d = length(line.xy - line.zw);\n    //check if line is connected to this particle\n    vec4 res = vec4(0.);\n    \n   \tif(di(this_particle, line.xy) < 1. || di(this_particle, line.zw) < 1.)\n    \tres.x = weight*force(d);\n    else\n        res.x = 0.;\n    \n    //avg velocity\n    res.yz = weight*(texel(ch0, line.xy).zw + texel(ch0, line.zw).zw)*0.5;\n    res.w = weight;\n    return res;\n}\n\n\n\n\n//sample a circle around the particle\nvec4 sample_force(vec2 particle_pos)\n{\n    vec4 F = vec4(0.);\n    float norm = 0.;\n    for(float phi = 0.; phi < 2.*PI; phi += 2.*PI/samples)\n    {\n        vec2 dp = vec2(cos(phi), sin(phi));\n        vec4 abc = sample_force_point(particle_pos + samprad*dp, particle_pos);\n        //sum force\n        F.xy += dp*abc.x;\n        //avg velocity\n        F.zw += abc.yz;\n        norm += abc.w;\n    }\n    return vec4(F.xy/samprad, F.zw/(norm+0.1));\n}\n\n \nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n \n    vec2 particle_pos = U.xy;\n    \n    vec2 M = vec2(0.);\n  \tif(iMouse.z > 0.) \n    {\n        vec2 vect = (U.xy - iMouse.xy);\n        float cdist = length(vect);\n        vect = normalize(vect);\n        M = -0.001*vect/(1. + 0.05*cdist);\n    }\n    //gravity\n    vec2 G = vec2(0., -grav);\n    \n    //update the particle velocity\n    vec4 FV = sample_force(U.xy);\n   \tU.zw += (M + G + FV.xy)*dt;\n     float bdist = distance2border(U.xy, size);\n    \n    //cooling/stabilization to the average velocity\n    U.zw = FV.zw  + (U.zw - FV.zw)*exp(-cooling*length(U.zw - FV.zw));\n    U.zw  *= exp(-0.1*cooling*length(U.zw));\n    U.zw *= 1. - exp(-max(0.8*bdist,1.));\n    //update the particle position\n    U.xy += dt*U.zw;\n   \n    \n    if(bdist < 2.)\n    {\n        //backstep\n        U.xy -= 2.*dt*U.zw;\n        //velocity inversion\n  \t\tU.zw *= -1.;\n    }\n    \n    if(iFrame < 1)\n    {\n        if(distance2border(pos, size) > 15.)\n        {\n            particle_pos = vec2(15.*round(pos.x/15.),15.*round(pos.y/15.));\n        \tU = vec4(particle_pos, 0.1*(hash22(particle_pos) - 0.5));\n        }\n        else\n        {\n            U = vec4(-1e4, 0., 0., 0.);\n        }\n    }\n    \n    if(length(U.xy) < 1.) U.xy = vec2(1e5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//simulation variables\n#define dt 5.\n#define radius 20.\n#define cooling 0.001\n\n//interatomic distance\n#define ad 10.\n\n//interatomic force \n#define sigma 0.002\n\n//force sampling radius\n#define samprad 2.\n#define samples 16.\n#define grav 1e-5\n\n//definitions\n#define size iResolution.xy\n#define texel(a, p)  texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\n//functions\nfloat distance2border(vec2 p, vec2 s)\n{\n    return min(min(min(p.x, s.x - p.x),p.y),s.y - p.y);\n}\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n   \nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\nfloat di(vec2 a, vec2 b)\n{\n    return length(a-b);\n}\n\n//https://en.wikipedia.org/wiki/Lennard-Jones_potential\nfloat force(float d)\n{\n    //limit the minimal distance, the potential behaves quite crazy\n    d = max(d, 0.97*ad);\n    return sigma*(6.*pow(ad/d, 5.)-12.*pow(ad/d, 11.));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//voronoi line tracking \nfloat is_border(vec2 pos)\n{\n    vec4 cp = texel(ch1, pos);\n    vec4 p0 = texel(ch1, pos+vec2(-1,0.));\n    vec4 p1 = texel(ch1, pos+vec2(1,0.));\n    vec4 p2 = texel(ch1, pos+vec2(0.,-1.));\n    vec4 p3 = texel(ch1, pos+vec2(0.,1.));\n    if(cp!=p0 || cp!=p1 || cp!=p2 || cp!=p3)\n    {\n        return 1.;\n    }\n    return 0.;\n}\n\nvec4 use_best(vec2 pos, vec4 U1, vec4 U2)\n{\n    float d1 = sdLine(pos, U1.xy, U1.zw);\n    float d2 = sdLine(pos, U2.xy, U2.zw);\n    //check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n       return U2; //copy the line info\n    }\n    else\n    {\n       return U1;\n    }\n}\n\nfloat is_direct_neighbour(vec2 p1, vec2 p2)\n{\n    if( di(p1,p2) < radius)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}  \n\n//the boudary line intersection is the source of the line info\nvoid on_center(inout vec4 U, vec2 pos)\n{\n    vec4 p0 = texel(ch1, pos+vec2(-1,0.));\n    vec4 p1 = texel(ch1, pos+vec2(1,0.));\n    vec4 p2 = texel(ch1, pos+vec2(0.,-1.));\n    vec4 p3 = texel(ch1, pos+vec2(0.,1.));\n    if(p0 != p1 && is_direct_neighbour(p0.xy,p1.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p0.xy, p1.xy), U);\n    }\n    if(p2 != p3 && is_direct_neighbour(p2.xy,p3.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p2.xy, p3.xy), U);\n    } \n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, pos+dx);\n    float d1 = sdLine(pos, U.xy, U.zw);\n    float d2 = sdLine(pos, Unb.xy, Unb.zw);\n    //check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n        U = Unb; //copy the line info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    \n    //update the line from the particles\n    U.xy = texel(ch1, U.xy).xy;\n    U.zw = texel(ch1, U.zw).xy;\n    \n    //sort \n    if(length(U.xy) > length(U.zw)) U = U.zwxy;\n    \n    if(is_direct_neighbour(U.xy, U.zw) < 1.)\n    {\n        U = vec4(0.);\n    }\n    \n    on_center(U, pos);\n    \n    if(iFrame < 1)\n    {\n        U = vec4(-1e4);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//voronoi particle tracking copy\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, pos+dx);\n    //check if the stored neighbouring particle is closer to this position \n    if(length(Unb.xy - pos) < length(U.xy - pos))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\n\n\nvec4 sample_force_point(vec2 pos, vec2 this_particle)\n{\n    vec4 line = texel(ch1, pos);\n    float ld = sdLine(pos, line.xy, line.zw);\n    //the further from the line the less the influence\n    float weight = exp(-pow(ld*2.,2.));\n   \tfloat d = length(line.xy - line.zw);\n    //check if line is connected to this particle\n    vec4 res = vec4(0.);\n    \n   \tif(di(this_particle, line.xy) < 1. || di(this_particle, line.zw) < 1.)\n    \tres.x = weight*force(d);\n    else\n        res.x = 0.;\n    \n    //avg velocity\n    res.yz = weight*(texel(ch0, line.xy).zw + texel(ch0, line.zw).zw)*0.5;\n    res.w = weight;\n    return res;\n}\n\n\n\n\n//sample a circle around the particle\nvec4 sample_force(vec2 particle_pos)\n{\n    vec4 F = vec4(0.);\n    float norm = 0.;\n    for(float phi = 0.; phi < 2.*PI; phi += 2.*PI/samples)\n    {\n        vec2 dp = vec2(cos(phi), sin(phi));\n        vec4 abc = sample_force_point(particle_pos + samprad*dp, particle_pos);\n        //sum force\n        F.xy += dp*abc.x;\n        //avg velocity\n        F.zw += abc.yz;\n        norm += abc.w;\n    }\n    return vec4(F.xy/samprad, F.zw/(norm+0.1));\n}\n\n \nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n \n    vec2 particle_pos = U.xy;\n    \n    vec2 M = vec2(0.);\n  \tif(iMouse.z > 0.) \n    {\n        vec2 vect = (U.xy - iMouse.xy);\n        float cdist = length(vect);\n        vect = normalize(vect);\n        M = -0.001*vect/(1. + 0.05*cdist);\n    }\n    //gravity\n    vec2 G = vec2(0., -grav);\n    \n    //update the particle velocity\n    vec4 FV = sample_force(U.xy);\n   \tU.zw += (M + G + FV.xy)*dt;\n     float bdist = distance2border(U.xy, size);\n    \n    //cooling/stabilization to the average velocity\n    U.zw = FV.zw  + (U.zw - FV.zw)*exp(-cooling*length(U.zw - FV.zw));\n    U.zw  *= exp(-0.1*cooling*length(U.zw));\n    U.zw *= 1. - exp(-max(0.5*bdist,0.1));\n    //update the particle position\n    U.xy += dt*U.zw;\n   \n    \n    if(bdist < 2.)\n    {\n        //backstep\n        U.xy -= 2.*dt*U.zw;\n        //velocity inversion\n  \t\tU.zw *= -1.;\n    }\n    \n    if(iFrame < 1)\n    {\n        if(distance2border(pos, size) > 15.)\n        {\n            particle_pos = vec2(15.*round(pos.x/15.),15.*round(pos.y/15.));\n        \tU = vec4(particle_pos, 0.1*(hash22(particle_pos) - 0.5));\n        }\n        else\n        {\n            U = vec4(-1e4, 0., 0., 0.);\n        }\n    }\n    \n    if(length(U.xy) < 1.) U.xy = vec2(1e5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//voronoi line tracking copy\nfloat is_border(vec2 pos)\n{\n    vec4 cp = texel(ch1, pos);\n    vec4 p0 = texel(ch1, pos+vec2(-1,0.));\n    vec4 p1 = texel(ch1, pos+vec2(1,0.));\n    vec4 p2 = texel(ch1, pos+vec2(0.,-1.));\n    vec4 p3 = texel(ch1, pos+vec2(0.,1.));\n    if(cp!=p0 || cp!=p1 || cp!=p2 || cp!=p3)\n    {\n        return 1.;\n    }\n    return 0.;\n}\n\nvec4 use_best(vec2 pos, vec4 U1, vec4 U2)\n{\n    float d1 = sdLine(pos, U1.xy, U1.zw);\n    float d2 = sdLine(pos, U2.xy, U2.zw);\n    //check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n       return U2; //copy the line info\n    }\n    else\n    {\n       return U1;\n    }\n}\n\nfloat is_direct_neighbour(vec2 p1, vec2 p2)\n{\n    if( di(p1,p2) < radius)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}  \n\n//the boudary line intersection is the source of the line info\nvoid on_center(inout vec4 U, vec2 pos)\n{\n    vec4 p0 = texel(ch1, pos+vec2(-1,0.));\n    vec4 p1 = texel(ch1, pos+vec2(1,0.));\n    vec4 p2 = texel(ch1, pos+vec2(0.,-1.));\n    vec4 p3 = texel(ch1, pos+vec2(0.,1.));\n    if(p0 != p1 && is_direct_neighbour(p0.xy,p1.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p0.xy, p1.xy), U);\n    }\n    if(p2 != p3 && is_direct_neighbour(p2.xy,p3.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p2.xy, p3.xy), U);\n    } \n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, pos+dx);\n    float d1 = sdLine(pos, U.xy, U.zw);\n    float d2 = sdLine(pos, Unb.xy, Unb.zw);\n    //check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n        U = Unb; //copy the line info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    \n    //update the line from the particles\n    U.xy = texel(ch1, U.xy).xy;\n    U.zw = texel(ch1, U.zw).xy;\n    \n    //sort \n    if(length(U.xy) > length(U.zw)) U = U.zwxy;\n    \n    if(is_direct_neighbour(U.xy, U.zw) < 1.)\n    {\n        U = vec4(0.);\n    }\n    \n    on_center(U, pos);\n    \n    if(iFrame < 1)\n    {\n        U = vec4(-1e4);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}