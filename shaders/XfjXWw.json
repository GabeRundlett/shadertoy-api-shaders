{
    "Shader": {
        "info": {
            "date": "1706402491",
            "description": "just a quick source for hsv to rgb functions and vice versa.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfjXWw",
            "likes": 1,
            "name": "hsv to rgb and rgb to hsv",
            "published": 3,
            "tags": [
                "simple",
                "colors",
                "rgb",
                "hsv",
                "start",
                "function",
                "angle",
                "point",
                "conversion",
                "starting",
                "hsvtorgb",
                "startpoint",
                "rgbtohsv"
            ],
            "usePreview": 0,
            "username": "the0neboy",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define RAD_TO_DEG 180./pi\n#define DEG_TO_RAD pi/180.\n\nvec3 rgb_to_hsv(vec3 rgb) {\n    float cmax = max(rgb.r,max(rgb.g,rgb.b));\n    float cmin = min(rgb.r,min(rgb.g,rgb.b));\n    float delta = cmax-cmin;\n    \n    float h = 0.;\n    if (delta == 0.) {\n        h = 0.;\n    } else if (cmax==rgb.r) {\n        h=60.*mod((rgb.g-rgb.b)/delta,6.);\n    } else if (cmax==rgb.g) {\n        h=60.*((rgb.b-rgb.r)/delta+2.);\n    } else if (cmax==rgb.b) {\n        h=60.*((rgb.r-rgb.g)/delta+4.);\n    }\n    \n    float s = 0.;\n    if (cmax != 0.) s = delta/cmax;\n    \n    float v = cmax;\n    \n    return vec3(h,s,v);\n}\n\nvec3 hsv_to_rgb(vec3 hsv) {\n    float C = hsv.z*hsv.y;\n    float X = C*(1.-abs(mod(hsv.x/60.,2.)-1.));\n    float m = hsv.z-C;\n    \n    vec3 rgb = vec3(C,X,0.);\n    if (hsv.x <= 120. && hsv.x >= 60.) {\n        rgb = vec3(X,C,0.);\n    } else if (hsv.x <= 180. && hsv.x >= 120.) {\n        rgb = vec3(0.,C,X);\n    } else if (hsv.x <= 240. && hsv.x >= 180.) {\n        rgb = vec3(0.,X,C);\n    } else if (hsv.x <= 300. && hsv.x >= 240.) {\n        rgb = vec3(X,0.,C);\n    } else if (hsv.x <= 360. && hsv.x >= 300.) {\n        rgb = vec3(C,0.,X);\n    }\n    rgb += m;\n    \n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n\n    vec3 col = vec3(0);\n    if (length(uv) >= 0.3 && length(uv) <= 0.45) {\n        float angle = atan(uv.y,uv.x);\n        if (angle < 0.) angle += 2.*pi;\n        angle *= RAD_TO_DEG;\n        col = hsv_to_rgb(vec3(angle,0.75,0.75));\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}