{
    "Shader": {
        "info": {
            "date": "1497387446",
            "description": "composition of 2 rgba values is deeper than I hoped it to be:\nhttps://en.wikipedia.org/wiki/Alpha_compositing\n\nbecame necessary for\nhttps://www.shadertoy.com/view/XdXfRl",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXfRl",
            "likes": 5,
            "name": "LAME alpha compositioning",
            "published": 3,
            "tags": [
                "transparency",
                "overlay",
                "alpha",
                "composite",
                "composition",
                "over",
                "transpatent",
                "compositioning"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 925
        },
        "renderpass": [
            {
                "code": "//https://en.wikipedia.org/wiki/Alpha_compositing\n\n//optionally skip the main thing, showing a simpler thing without Alpha_compositing\n#define Alpha_compositing\n\n//zoom\n#define camLens 1.\n//set frame setup\n#define frame(u) camLens*(u-.5*iResolution.xy)/iResolution.y\n\n//circle properties\n#define radius .3\n#define blur .5\n\n//texture properties\n#define c0(u)   texture(iChannel0,u).xyz\n#define c1(u)   texture(iChannel1,u).xyz\n//#define cyan    vec3(0,1,1)\n//#define magenta vec3(1,0,1)\n//#define yellow  vec3(1,1,0)\n\n//Golden ratio, the 2 solutions for; 1./x=x-1.; reciprocal==Derivative <-> least shade.\n#define phi (sqrt(5.)*.5-.5)\n#define Phi (sqrt(5.)*.5+.5)\n\n//https://en.wikipedia.org/wiki/Alpha_compositing\nvec4 aOverB(vec4 a,vec4 b){a.xyz*=a.w;b.xyz*=b.w;return vec4(a+b*(1.-a));}\n//not sure if correct, but looks useful.\nvec4 aXorB(vec4 a,vec4 b){a.xyz*=a.w;b.xyz*=b.w;return vec4(a*(1.-b)+b*(1.-a));}\n\n#define ss(a) smoothstep(blur,-blur,a);\nvoid mainImage(out vec4 O,in vec2 U){\n vec2 u=frame(U); \n vec2 m=frame(iMouse.xy);\n vec2 n=frame(iMouse.zw);\n if(iMouse.z<=0.){\n  m=.5*vec2(cos(iTime*Phi),0.);\n  n=.5*vec2(sin(iTime),cos(iTime));\n }\n float a=length(m-u);a=ss(a-radius);\n float b=length(n-u);b=ss(b-radius);\n #ifndef Alpha_compositing\n  O=vec4(a,0,b,1);//2 color channels are set by mouse positions.\n #else \n  vec4 a4=vec4(c0(u),a);//colors are set by \n  vec4 b4=vec4(c1(u),b);//alpha channels are set by distance to mouse positions.\n  O=aXorB(a4,b4);  \n #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}