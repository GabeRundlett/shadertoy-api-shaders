{
    "Shader": {
        "info": {
            "date": "1656478278",
            "description": "It's just window blinds for my project",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3fDN",
            "likes": 5,
            "name": "Window Shades",
            "published": 3,
            "tags": [
                "shades",
                "window",
                "curtains",
                "blinds",
                "windowblinds",
                "windowshades",
                "windowcurtains"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "#define BACKGROUND_COLOR vec3(0.9, 0.76, 0.55)\n#define DESK_COLOR vec3(0.1, 0.06, 0.03)\n#define WINDOW_SHADES_ON_COLOR vec3(0.855, 0.75, 0.58)\n#define WINDOW_SHADES_OFF_COLOR vec3(0.235, 0.24, 0.266)\n#define LIGHT_COLOR vec3(1.0, 0.98, 0.87)\n#define TILES 5.0\n// 0 = Off | 1 = On | 2 = On and Open\nint STATE = 0; \n\n#define LIGHTS_ON (STATE == 1 || STATE == 2)\n\nvec3 color = vec3(0);\nvec3 col = vec3(0);\nvec2 uv = vec2(0);\n#define A (iResolution.x / iResolution.y)\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n    float fl = floor(p);\n    float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nfloat fbm(vec2 p, int octaves)\n{\n    float n = 0.0;\n    float a = 1.0;\n    float norm = 0.0;\n    for(int i = 0; i < octaves; ++i)\n    {\n        n += noise(p) * a;\n        norm += a;\n        p *= 2.0;\n        a *= 0.7;\n    }\n    return n / norm;\n}\n\nfloat luma(vec3 color)\n{\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvoid rect(float x, float y, float w, float h)\n{\n    if(uv.x >= x && uv.x <= x + w && uv.y >= y && uv.y <= y + h)\n        color = col;\n}\n\nvoid srect(float x, float y, float w, float h, float r, float s)\n{\n\tvec2 offset = abs((uv - vec2(x + w * 0.5, y + h * 0.5)) / vec2(w,h)) - (0.5 - s - r);\n\tcolor = mix(col, color, smoothstep(0.0, s, length(max(offset, 0.0)) - r));\n}\n\nvoid background()\n{\n    vec2 luv = uv;\n    uv.x = abs(uv.x);\n    \n    col = (LIGHTS_ON ? LIGHT_COLOR : WINDOW_SHADES_OFF_COLOR);\n    srect(A * 0.3, 0.6, A * 0.55, 0.06, 0.05, 0.1);\n    srect(A * 0.28, 0.1, A * 0.53, 0.06, 0.05, 0.1);\n    vec3 lcolor = color;\n    float l = luma(color); \n    \n    col = (LIGHTS_ON ? BACKGROUND_COLOR * (0.8 + 0.4 * fbm(uv * 8.0, 4)) : WINDOW_SHADES_OFF_COLOR);\n    rect(-A, -1.0, A * 2.0, 2.0);\n    \n    col = (LIGHTS_ON ? DESK_COLOR : WINDOW_SHADES_OFF_COLOR * 0.7);\n    srect(-A * 2.0, -1.0, A * 4.0, 0.5, 0.0, 0.05);\n    col = col * (LIGHTS_ON ? 2.0 : 1.5);\n    srect(-A * 2.0, -0.54, A * 4.0, 0.15, 0.0, 0.05);\n    col = col * 0.5;\n    srect(0.0, -1.0, A, 0.4, 0.0, 0.05);\n    col = (LIGHTS_ON ? DESK_COLOR : WINDOW_SHADES_OFF_COLOR);\n    srect(A * 0.25, -0.55, 0.08, 0.15, 0.0, 0.2);\n    srect(A * 0.23, -0.6, 0.08, 0.17, 0.0, 0.2);\n    srect(A * 0.21, -0.6, 0.08, 0.14, 0.0, 0.2);\n    srect(-0.1, -0.6, 0.6, 0.125, 0.0, 0.2);\n    \n    color = mix(color, lcolor, l * l * l * l);\n    \n    color += l * l * l * l * 0.2;\n    \n    uv = luv;\n}\n\nvoid shades()\n{\n    float shades = cos(uv.x * 50.0);\n    float shade_col = 0.5 + 0.5 * abs(shades);\n    shade_col /= 1.0 + smoothstep(-0.25, -1.0, -shades);\n    shade_col *= 0.8 + fbm(uv * 2.0, 8) * 0.4;\n    shade_col *= 0.9 + noise(uv.x * 200.0) * 0.2;\n    color = mix(color, sqrt(sqrt(luma(color))) * 1.3 * (LIGHTS_ON ? WINDOW_SHADES_ON_COLOR : WINDOW_SHADES_OFF_COLOR) * shade_col, step(shades, STATE == 2 ? -0.2 : 0.95));\n}\n\nvoid frame()\n{\n    float w = 0.15;\n    float h = 0.6;\n    col = vec3(0.5) * (0.8 + 0.4 * fbm(uv * 12.0, 8));\n    \n    vec2 luv = uv;\n    uv = abs(uv);\n    \n    //Lighting\n    float l = 0.2;\n    float b = 0.2;\n    float f = float(uv.y <= 1.0 - w);\n    \n    col += sqrt(smoothstep(1.0 - w * l, 1.0, abs(uv.y))) * b;\n    col += float(uv.y >= 1.0 - w && uv.x <= A - w * h + w * l && (uv.x >= A * 0.6 - w * h * l || uv.x <= A * 0.6 - w * h + w * h * l)) * sqrt(smoothstep(1.0 - w + w * l, 1.0 - w, uv.y)) * b;\n    \n    col += sqrt(smoothstep(A - w * l, A, uv.x)) * b;  \n    col += f * float(uv.x >= A - w * h) * sqrt(smoothstep(A - w * h + w * l, A - w * h, uv.x)) * b;\n    \n    col += f * float(uv.x <= A * 0.6) * sqrt(smoothstep(A * 0.6 - w * h + w * l * 0.8, A * 0.6 - w * h, uv.x)) * b;\n    col += f * float(uv.x <= A * 0.6) * sqrt(smoothstep(A * 0.6 - w * l * 0.8, A * 0.6, uv.x)) * b;   \n    \n    //Shadow rectangles\n    vec3 lcol = col;\n    col = color * 0.6;\n    float s = 0.3;\n    rect(-A, 1.0 - w * (1.0 + s / A), 2.0 * A, w * h * (1.0 + s * 2.0));\n    rect(A - w * h * (1.0 + s), -1.0, w * h * (1.0 + s * 2.0), 2.0);  \n    rect(A * 0.6 - w * h * (1.0 + s), -1.0, w * h * (1.0 + s * 2.0), 2.0);\n    col = color * 0.6;\n    s *= 0.63;\n    rect(-A, 1.0 - w * (1.0 + s / A), 2.0 * A, w * h * (1.0 + s * 2.0));\n    rect(A - w * h * (1.0 + s), -1.0, w * h * (1.0 + s * 2.0), 2.0);  \n    rect(A * 0.6 - w * h * (1.0 + s), -1.0, w * h * (1.0 + s * 2.0), 2.0);\n    \n    col = min(lcol, lcol + b);\n    \n    //Frame   \n    rect(-A, 1.0 - w, 2.0 * A, w);\n    rect(A - w * h, -1.0, w * h, 2.0);\n    rect(A * 0.6 - w * h, -1.0, w * h, 2.0);  \n    \n    uv = luv; \n}\n\nvoid window()\n{\n    background();\n    shades();\n    frame();\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 index = floor(fragCoord * TILES / iResolution.xy);\n    fragCoord = mod(fragCoord * TILES, iResolution.xy);\n    uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    STATE = int(noise(index + iTime * 0.5) * 3.0);\n    window();   \n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}