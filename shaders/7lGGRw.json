{
    "Shader": {
        "info": {
            "date": "1637366106",
            "description": "demonstrating subjective filtering in 2D, a continuous alternative to volumetric cascades, in which we leverage spherical inversion and hyperbolic mapping to store a properly filtered infinitely continuous surface inside a single texture. ",
            "flags": 32,
            "hasliked": 0,
            "id": "7lGGRw",
            "likes": 9,
            "name": "Subjective Filtering",
            "published": 3,
            "tags": [
                "filter",
                "inversion",
                "spherical",
                "hyperbolic"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef SHOW_SOURCE\n    fragColor = vec4(linear_srgb(texelFetch(iChannel0, ivec2(fragCoord/iResolution.y*float(rez)), 0).rgb),1);\n#else\n    vec2 uv = ((fragCoord-0.5)/iResolution.xy)*2.0-1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv *= exp(mix(log(8.0),log(60.0*6.0),sin(iTime*0.21)*0.5+0.5));\n    \n    //uv = invert(uv);\n    uv *= rcp_c;\n    \n    //uv = invert(uv);\n    //uv = contract_tanh(uv);\n    uv = contract_rcp(uv);\n    //uv = contract_exp(uv);\n    \n    uv = to_polar(uv);\n    \n    //uv = uv * 0.5 + 0.5;    \n    \n#ifdef INTERPOLATE\n    vec3 col = sample_biquadratic_exact(iChannel0, vec2(rez), uv).rgb;\n#else\n    vec3 col = texelFetch(iChannel0, ivec2(uv*float(rez)), 0).rgb;\n#endif\n    fragColor = vec4(linear_srgb(col),1);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define channel iChannel0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/vec2(rez)*2.0-1.0;\n    if (max(abs(uv.x),abs(uv.y)) > 1.0) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    uv = from_polar(uv*0.5+0.5);\n    \n    //uv = expand_tanh(uv);\n    uv = expand_rcp(uv);\n    //uv = expand_exp(uv);    \n    \n    uv /= rcp_c;\n    //uv = invert(uv);\n\n    uv.x *= 9.0/16.0;\n    uv /= 8.0;\n    // demonstrate grid under movement\n    uv.x += iTime*0.1;\n    uv = uv*0.5 + 0.5;\n    \n    vec3 col = vec3(0.0);\n    const int L = 7;\n    for (int i = 0; i < L; ++i) {\n        col += texture(channel, uv/pow(2.0,float(i)), 0.5).rgb;\n    }\n    col /= float(L);    \n    col = clamp((col - 0.3)*2.0 + 0.3, 0.0, 1.0);\n    fragColor = vec4(srgb_linear(col),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// when defined, show raw compressed texture\n//#define SHOW_SOURCE\n// when undefined, uses nearest neighbor interpolation\n#define INTERPOLATE\n\n// texture resolution\nconst int rez = 256;\n// logarithmic distribution\nconst float rcp_c = 1.0/16.0;\n\nvec3 decompose_normal_Linf(vec2 p) {\n    float r = max(abs(p.x),abs(p.y));\n    //float r = length(p);\n    return vec3(p/r, r);\n}\n\nvec3 decompose_normal_L2(vec2 p) {\n    float r = length(p);\n    return vec3(p/r, r);\n}\n\n//#define decompose_normal decompose_normal_Linf\n#define decompose_normal decompose_normal_L2\n\nvec2 from_polar(vec2 p) {\n    float a = p.x*radians(360.0);\n    p = vec2(cos(a),sin(a)) * p.y;\n    return p;    \n}\n\nvec2 to_polar(vec2 p) {\n    float r = length(p);\n    return vec2(atan(-p.y, p.x)/radians(360.0) + 0.5, r);\n}\n\nvec2 invert(vec2 p) {\n    vec3 pn = decompose_normal_L2(p);\n    return pn.xy * (1.0 / pn.z);\n}\n\n// normal to infinity\nvec2 expand_tanh(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * atanh(pn.z);\n}\n\n// infinity to normal\nvec2 contract_tanh(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * tanh(pn.z);\n}\n\nvec2 expand_rcp(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    pn.z = min(pn.z, 1.0);\n    return pn.xy * (pn.z / (1.0 - abs(pn.z)));\n}\n\nvec2 contract_rcp(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * (pn.z / (1.0 + abs(pn.z)));\n}\n\nvec2 expand_rcp(vec2 p, float c) {\n    vec3 pn = decompose_normal(p);\n    pn.z = min(pn.z, 1.0);\n    return pn.xy * c * (pn.z / (1.0 - abs(pn.z)));\n}\n\nvec2 contract_rcp(vec2 p, float c) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * (pn.z / (c + abs(pn.z)));\n}\n\nvec2 expand_exp(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * -log2(1.0-pn.z);\n}\n\nvec2 contract_exp(vec2 p) {\n    vec3 pn = decompose_normal(p);\n    return pn.xy * (1.0 - exp2(-pn.z));\n}\n\n//---------------------------------------------------------------------------------\n\n// avoid hardware interpolation\nvec4 sample_biquadratic_exact(sampler2D channel, vec2 res, vec2 uv) {\n    vec2 q = fract(uv * res);\n    ivec2 ires = ivec2(res);\n    ivec2 t = ivec2(uv * res) + ires;\n    ivec3 e = ivec3(-1, 0, 1);\n    vec4 s00 = texelFetch(channel, (t + e.xx) % ires, 0);\n    vec4 s01 = texelFetch(channel, (t + e.xy) % ires, 0);\n    vec4 s02 = texelFetch(channel, (t + e.xz) % ires, 0);\n    vec4 s12 = texelFetch(channel, (t + e.yz) % ires, 0);\n    vec4 s11 = texelFetch(channel, (t + e.yy) % ires, 0);\n    vec4 s10 = texelFetch(channel, (t + e.yx) % ires, 0);\n    vec4 s20 = texelFetch(channel, (t + e.zx) % ires, 0);\n    vec4 s21 = texelFetch(channel, (t + e.zy) % ires, 0);\n    vec4 s22 = texelFetch(channel, (t + e.zz) % ires, 0);    \n    vec2 q0 = (q+1.0)/2.0;\n    vec2 q1 = q/2.0;\t\n    vec4 x0 = mix(mix(s00, s01, q0.y), mix(s01, s02, q1.y), q.y);\n    vec4 x1 = mix(mix(s10, s11, q0.y), mix(s11, s12, q1.y), q.y);\n    vec4 x2 = mix(mix(s20, s21, q0.y), mix(s21, s22, q1.y), q.y);    \n\treturn mix(mix(x0, x1, q0.x), mix(x1, x2, q1.x), q.x);\n}\n\n//---------------------------------------------------------------------------------\n\nfloat linear_srgb(float x) {\n    return mix(1.055*pow(x, 1./2.4) - 0.055, 12.92*x, step(x,0.0031308));\n}\nvec3 linear_srgb(vec3 x) {\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x,vec3(0.0031308)));\n}\n\nfloat srgb_linear(float x) {\n    return mix(pow((x + 0.055)/1.055,2.4), x / 12.92, step(x,0.04045));\n}\nvec3 srgb_linear(vec3 x) {\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x,vec3(0.04045)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}