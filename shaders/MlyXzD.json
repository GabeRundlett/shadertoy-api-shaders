{
    "Shader": {
        "info": {
            "date": "1483268995",
            "description": "Stonewashing the flag. Mouse stops/controls box rotation.",
            "flags": 32,
            "hasliked": 0,
            "id": "MlyXzD",
            "likes": 9,
            "name": "Stonewashed Flag",
            "published": 3,
            "tags": [
                "raytrace",
                "dynamics",
                "sheet"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 650
        },
        "renderpass": [
            {
                "code": "// \"Stonewashed Flag\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Stonewashing the flag.\n\n  Mouse stops/controls box rotation.\n\n  Set LBIG = 1 in all the shaders for higher resolution.\n\n  Surface rendering adapted from implicit kd-tree traversal in \"curtain and ball\"\n  by archee.\n*/\n\nfloat PrBoxDf (vec3 p, vec3 b);\nmat3 QtToRMat (vec4 q);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec4 Loadv4 (vec2 vId);\n\n#define LBIG 0\n#if LBIG\nconst int nBallE = 65;\nconst int nBall = nBallE * nBallE;\n#else\nconst int nBallE = 33;\nconst int nBall = nBallE * nBallE;\n#endif\n\nconst int nBBall = 8;\nconst vec2 bGrid = vec2 (nBallE - 1, nBallE - 1);\n\nconst float pi = 3.14159;\nvec3 ltDir, vnBall, rdSign;\nvec2 qgHit;\nfloat dstFar, hbLen, bRad, spLen;\nint idObj;\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 0, nBallE)).xyz;\n}\n\nfloat SheetRay (vec3 ro, vec3 rd)\n{\n  vec3 r;\n  vec2 g;\n  float d, dMin, sz, szMax, szMin, grLen;\n  bvec2 ilt;\n  bool bkTrak;\n  dMin = dstFar;\n  grLen = 0.92 * spLen;\n  szMax = max (bGrid.x, bGrid.y);\n  szMin = 1./16.;\n  g = vec2 (0.);\n  bkTrak = false;\n  sz = szMax;\n  for (int ns = 0; ns < 2000; ns ++) {\n    if (sz == szMin) {\n      r = GetR (g) - ro;\n      if (length (cross (r, rd)) < sz * grLen) {\n        d = dot (rd, r);\n        if (d < dMin) {\n          dMin = d;\n          qgHit = g;\n        }\n      }\n      bkTrak = true;\n    }\n    bkTrak = bkTrak || (length (cross (GetR (g + 0.5 * sz) - ro, rd)) > sz * grLen);\n    if (bkTrak) {\n      bkTrak = false;\n      ilt = lessThan (fract (g / (2. * sz)), vec2 (0.5));\n      g.x += ilt.x ? sz : - sz;\n      if (! ilt.x) {\n        g.y += ilt.y ? sz : - sz;\n        if (! ilt.y) {\n          sz *= 2.;\n          if (sz == szMax) break;\n          bkTrak = true;\n        }\n      }\n    } else if (sz > szMin) sz *= 0.5;\n  }\n  return dMin;\n}\n\nvec3 GetRC (vec2 v)\n{\n  return GetR (clamp (v, vec2 (0.), bGrid - 1.));\n}\n\nvec3 SheetNf () \n{\n  vec2 e = vec2 (1., 0.);\n  return normalize (cross (GetRC (qgHit + e.yx) - GetRC (qgHit - e.yx),\n     GetRC (qgHit + e.xy) - GetRC (qgHit - e.xy)));\n}\n\nfloat BBallHit (vec3 ro, vec3 rd, float dMin)\n{\n  vec3 u;\n  float rad, b, d, w;\n  rad = bRad + 0.65;\n  for (int n = 0; n < nBBall; n ++) {\n    u = ro - GetRB (n);\n    b = dot (rd, u);\n    w = b * b - (dot (u, u) - rad * rad);\n    if (w >= 0.) {\n      d = - b - sqrt (w);\n      if (d > 0. && d < dMin) {\n        dMin = d;\n        vnBall = (u + d * rd) / rad;\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 fVec;\n  vec3 q, eLen, eShift;\n  float dMin, d, eWid, sLen;\n  dMin = dstFar;\n  sLen = hbLen - 0.7;\n  eWid = 0.04;\n  eShift = vec3 (0., sLen, sLen);\n  eLen = vec3 (sLen + eWid, eWid, eWid);\n  fVec = sLen * vec4 (rdSign, 0.);\n  d = min (min (PrBoxDf (p - fVec.xww, eLen.yxx),\n     PrBoxDf (p - fVec.wyw, eLen.xyx)), PrBoxDf (p - fVec.wwz, eLen.xxy));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = abs (p);\n  d = min (min (PrBoxDf (q - eShift, eLen), PrBoxDf (q - eShift.yxz, eLen.yxz)),\n     PrBoxDf (q - eShift.yzx, eLen.yzx));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\n#define PSTEP(b, d) step (d, b.x) * step (d, b.y)\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, w, cc;\n  vec2 b;\n  float dstBall, dstObj, dstSheet;\n  dstBall = BBallHit (ro, rd, dstFar);\n  rdSign = sign (rd);\n  dstObj = ObjRay (ro, rd);\n  dstSheet = SheetRay (ro, rd);\n  if (min (min (dstBall, dstObj), dstSheet) < dstFar) {\n    if (dstSheet < min (dstBall, dstObj)) {\n      vn = SheetNf ();\n      ro += rd * dstSheet;\n      qgHit = 1. - qgHit / (0.5 * bGrid);\n      cc = vec3 (1., 0., 0.);\n      col = cc.zzx;\n      if (dot (rd, vn) > 0.) {\n        vn = - vn;\n        b = abs (Rot2D (qgHit, 0.25 * pi));\n        col = mix (cc, col, PSTEP (b, 0.1));\n        b = abs (qgHit);\n        col = mix (cc.xxx, col, PSTEP (b, 0.1));\n      } else {\n        b = abs (qgHit);\n        col = mix (cc.xxx, col, PSTEP (b, 0.1));\n        b = abs (Rot2D (qgHit, 0.25 * pi));\n        col = mix (cc, col, PSTEP (b, 0.1));\n      }\n      col4 = vec4 (col, 0.1);\n      col4 *= (1. - 0.2 * Fbm2 (0.5 * bGrid * qgHit));\n    } else if (dstBall < dstObj) {\n      ro += rd * dstBall;\n      vn = vnBall;\n      col4 = vec4 (0.8, 0.8, 0.2, 0.2) * (1. - 0.2 * Fbm3 (30. * vn));\n    } else if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        w = smoothstep (0., 0.1, abs (fract (5. * ro / hbLen + 0.5) - 0.5));\n        col = vec3 (mix (vec3 (0.45), vec3 (0.6),\n           dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))));\n      } else if (idObj == 2) col = vec3 (0.5);\n      col4 = vec4 (col, 0.2);\n    }\n    col = col4.rgb * (0.4 + 0.6 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n  } else col = vec3 (0.);\n  return clamp (col, 0., 1.);\n}\n\n\nfloat BlkHitSil (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp;\n  float dn, df, sLen;\n  sLen = hbLen - 0.7;\n  v = ro / rd;\n  tp = sLen / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  return (df > 0. && dn < df) ? dn : dstFar;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu, stDat;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (vec2 (2 * nBBall + 0, nBallE));\n  spLen = stDat.x;\n  hbLen = stDat.y;\n  dstFar = 11. * hbLen;\n  bRad = 0.1 * hbLen;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallE));\n  vuMat = QtToRMat (qtVu);\n  rd = normalize (vec3 (uv, 3.5)) * vuMat;\n  ro = vec3 (0., 0., -6. * hbLen) * vuMat;\n  ltDir = normalize (vec3 (-1., 1., -1.)) * vuMat;\n  if (BlkHitSil (ro, rd) < dstFar) col = ShowScene (ro, rd);\n  else col = vec3 (0., 0., 0.05);\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Stonewashed Flag\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define LBIG 0\n#if LBIG\nconst int nBallE = 65;\nconst int nBall = nBallE * nBallE;\n#else\nconst int nBallE = 33;\nconst int nBall = nBallE * nBallE;\n#endif\n\nconst int nBBall = 8;\n\nconst float pi = 3.14159;\nvec4 qtVu;\nvec3 gravVec;\nfloat hbLen, spLen, fOvlap, bRad, ntStep;\n\nconst int nNeb = 4, nNebD = 4;\nivec2 idNeb[nNeb], idNebD[nNebD];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 1, nBallE)).xyz;\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid SpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 50.;\n  fDamp = 0.5;\n  for (int n = 0; n < nNeb; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += fSpring * (spLen - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < nNebD; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += 5. * fSpring * (spLenD - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid BendForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) f += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) f += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvoid PairForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr);\n    if (rSep > 0.01 && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid WallForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid WallForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - 1.2 * bRad - abs (r);\n  f -= 50. * step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid BShForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid BShForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid BBForce (int mId, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - 2. * bRad;\n    if (n != mId && rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt;\n  IdNebs ();\n  fDamp = 0.5;\n  r = GetR (vec2 (iv));\n  v = GetV (vec2 (iv));\n  f = vec3 (0.);\n  PairForce (iv, r, f);\n  SpringForce (iv, r, v, f);\n  BendForce (iv, r, f);\n  WallForce (r, f);\n  BShForce (r, f);\n  f -= gravVec + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid StepB (int mId, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt, biMass;\n  fDamp = 0.5;\n  biMass = 0.02;\n  r = GetRB (mId);\n  v = GetVB (mId);\n  f = vec3 (0.);\n  BBForce (mId, r, v, f);\n  WallForceB (r, f);\n  BShForceB (r, f);\n  f -= 2. * fDamp * v;\n  f *= biMass;\n  f -= gravVec;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * vec3 (ix, iy, 0.);\n        r.xy -= 0.5 * (float (nBallE) - 1.);\n      }\n    }\n  }\n  v = VInit (iv.y * nBallE + iv.x);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) vSum += VInit (n);\n  v -= vSum / float (nBall);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v)\n{\n  float fn;\n  fn = float (mId);\n  r = 0.4 * hbLen * (2. * vec3 (mod (fn, 2.), floor (mod (fn, 4.) / 2.),\n     floor (fn / 4.)) - 1.);\n  v = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  ivec2 pxIv, iv;\n  float tCur;\n  int mId, pxId;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * (nBall + nBBall) + 2) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (2 * nBBall + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    spLen = 1.1;\n    hbLen = 0.55 * spLen * float (nBallE - 1);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    ntStep = 0.;\n    if (mId < nBall) {\n      Init (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      InitB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (vec2 (2 * nBBall + 0, nBallE));\n    spLen = stDat.x;\n    hbLen = stDat.y;\n    bRad = 0.1 * hbLen;\n    fOvlap = 1000.;\n    gravVec = vec3 (0., 2., 0.) * QtToRMat (qtVu);\n    ntStep = stDat.w;\n    ++ ntStep;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.004 *\n       pi * vec3 (0.27, -0.34, 0.11)), qtVu));   \n    if (mId < nBall) {\n      Step (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      StepB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  }\n  if (pxId < 2 * nBall) stDat = vec4 (p, 0.);\n  else if (pxId < 2 * (nBall + nBBall)) stDat = vec4 (p, 0.);\n  else if (pxId == 2 * (nBall + nBBall))\n     stDat = stDat = vec4 (spLen, hbLen, tCur, ntStep);\n  else if (pxId == 2 * (nBall + nBBall) + 1) stDat = qtVu;\n  else if (pxId == 2 * (nBall + nBBall) + 2) stDat = mPtrP;\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Stonewashed Flag\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define LBIG 0\n#if LBIG\nconst int nBallE = 65;\nconst int nBall = nBallE * nBallE;\n#else\nconst int nBallE = 33;\nconst int nBall = nBallE * nBallE;\n#endif\n\nconst int nBBall = 8;\n\nconst float pi = 3.14159;\nvec4 qtVu;\nvec3 gravVec;\nfloat hbLen, spLen, fOvlap, bRad, ntStep;\n\nconst int nNeb = 4, nNebD = 4;\nivec2 idNeb[nNeb], idNebD[nNebD];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 1, nBallE)).xyz;\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid SpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 50.;\n  fDamp = 0.5;\n  for (int n = 0; n < nNeb; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += fSpring * (spLen - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < nNebD; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += 5. * fSpring * (spLenD - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid BendForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) f += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) f += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvoid PairForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr);\n    if (rSep > 0.01 && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid WallForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid WallForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - 1.2 * bRad - abs (r);\n  f -= 50. * step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid BShForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid BShForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid BBForce (int mId, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - 2. * bRad;\n    if (n != mId && rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt;\n  IdNebs ();\n  fDamp = 0.5;\n  r = GetR (vec2 (iv));\n  v = GetV (vec2 (iv));\n  f = vec3 (0.);\n  PairForce (iv, r, f);\n  SpringForce (iv, r, v, f);\n  BendForce (iv, r, f);\n  WallForce (r, f);\n  BShForce (r, f);\n  f -= gravVec + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid StepB (int mId, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt, biMass;\n  fDamp = 0.5;\n  biMass = 0.02;\n  r = GetRB (mId);\n  v = GetVB (mId);\n  f = vec3 (0.);\n  BBForce (mId, r, v, f);\n  WallForceB (r, f);\n  BShForceB (r, f);\n  f -= 2. * fDamp * v;\n  f *= biMass;\n  f -= gravVec;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * vec3 (ix, iy, 0.);\n        r.xy -= 0.5 * (float (nBallE) - 1.);\n      }\n    }\n  }\n  v = VInit (iv.y * nBallE + iv.x);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) vSum += VInit (n);\n  v -= vSum / float (nBall);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v)\n{\n  float fn;\n  fn = float (mId);\n  r = 0.4 * hbLen * (2. * vec3 (mod (fn, 2.), floor (mod (fn, 4.) / 2.),\n     floor (fn / 4.)) - 1.);\n  v = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  ivec2 pxIv, iv;\n  float tCur;\n  int mId, pxId;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * (nBall + nBBall) + 2) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (2 * nBBall + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    spLen = 1.1;\n    hbLen = 0.55 * spLen * float (nBallE - 1);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    ntStep = 0.;\n    if (mId < nBall) {\n      Init (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      InitB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (vec2 (2 * nBBall + 0, nBallE));\n    spLen = stDat.x;\n    hbLen = stDat.y;\n    bRad = 0.1 * hbLen;\n    fOvlap = 1000.;\n    gravVec = vec3 (0., 2., 0.) * QtToRMat (qtVu);\n    ntStep = stDat.w;\n    ++ ntStep;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.004 *\n       pi * vec3 (0.27, -0.34, 0.11)), qtVu));   \n    if (mId < nBall) {\n      Step (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      StepB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  }\n  if (pxId < 2 * nBall) stDat = vec4 (p, 0.);\n  else if (pxId < 2 * (nBall + nBBall)) stDat = vec4 (p, 0.);\n  else if (pxId == 2 * (nBall + nBBall))\n     stDat = stDat = vec4 (spLen, hbLen, tCur, ntStep);\n  else if (pxId == 2 * (nBall + nBBall) + 1) stDat = qtVu;\n  else if (pxId == 2 * (nBall + nBBall) + 2) stDat = mPtrP;\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Stonewashed Flag\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define LBIG 0\n#if LBIG\nconst int nBallE = 65;\nconst int nBall = nBallE * nBallE;\n#else\nconst int nBallE = 33;\nconst int nBall = nBallE * nBallE;\n#endif\n\nconst int nBBall = 8;\n\nconst float pi = 3.14159;\nvec4 qtVu;\nvec3 gravVec;\nfloat hbLen, spLen, fOvlap, bRad, ntStep;\n\nconst int nNeb = 4, nNebD = 4;\nivec2 idNeb[nNeb], idNebD[nNebD];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 1, nBallE)).xyz;\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid SpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 50.;\n  fDamp = 0.5;\n  for (int n = 0; n < nNeb; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += fSpring * (spLen - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < nNebD; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += 5. * fSpring * (spLenD - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid BendForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) f += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) f += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvoid PairForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr);\n    if (rSep > 0.01 && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid WallForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid WallForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - 1.2 * bRad - abs (r);\n  f -= 50. * step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid BShForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid BShForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid BBForce (int mId, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - 2. * bRad;\n    if (n != mId && rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt;\n  IdNebs ();\n  fDamp = 0.5;\n  r = GetR (vec2 (iv));\n  v = GetV (vec2 (iv));\n  f = vec3 (0.);\n  PairForce (iv, r, f);\n  SpringForce (iv, r, v, f);\n  BendForce (iv, r, f);\n  WallForce (r, f);\n  BShForce (r, f);\n  f -= gravVec + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid StepB (int mId, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt, biMass;\n  fDamp = 0.5;\n  biMass = 0.02;\n  r = GetRB (mId);\n  v = GetVB (mId);\n  f = vec3 (0.);\n  BBForce (mId, r, v, f);\n  WallForceB (r, f);\n  BShForceB (r, f);\n  f -= 2. * fDamp * v;\n  f *= biMass;\n  f -= gravVec;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * vec3 (ix, iy, 0.);\n        r.xy -= 0.5 * (float (nBallE) - 1.);\n      }\n    }\n  }\n  v = VInit (iv.y * nBallE + iv.x);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) vSum += VInit (n);\n  v -= vSum / float (nBall);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v)\n{\n  float fn;\n  fn = float (mId);\n  r = 0.4 * hbLen * (2. * vec3 (mod (fn, 2.), floor (mod (fn, 4.) / 2.),\n     floor (fn / 4.)) - 1.);\n  v = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  ivec2 pxIv, iv;\n  float tCur;\n  int mId, pxId;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * (nBall + nBBall) + 2) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (2 * nBBall + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    spLen = 1.1;\n    hbLen = 0.55 * spLen * float (nBallE - 1);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    ntStep = 0.;\n    if (mId < nBall) {\n      Init (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      InitB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (vec2 (2 * nBBall + 0, nBallE));\n    spLen = stDat.x;\n    hbLen = stDat.y;\n    bRad = 0.1 * hbLen;\n    fOvlap = 1000.;\n    gravVec = vec3 (0., 2., 0.) * QtToRMat (qtVu);\n    ntStep = stDat.w;\n    ++ ntStep;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.004 *\n       pi * vec3 (0.27, -0.34, 0.11)), qtVu));   \n    if (mId < nBall) {\n      Step (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      StepB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  }\n  if (pxId < 2 * nBall) stDat = vec4 (p, 0.);\n  else if (pxId < 2 * (nBall + nBBall)) stDat = vec4 (p, 0.);\n  else if (pxId == 2 * (nBall + nBBall))\n     stDat = stDat = vec4 (spLen, hbLen, tCur, ntStep);\n  else if (pxId == 2 * (nBall + nBBall) + 1) stDat = qtVu;\n  else if (pxId == 2 * (nBall + nBBall) + 2) stDat = mPtrP;\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Stonewashed Flag\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 EulToQt (vec3 e);\nfloat Hashff (float p);\nvec4 Loadv4 (vec2 vId);\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define LBIG 0\n#if LBIG\nconst int nBallE = 65;\nconst int nBall = nBallE * nBallE;\n#else\nconst int nBallE = 33;\nconst int nBall = nBallE * nBallE;\n#endif\n\nconst int nBBall = 8;\n\nconst float pi = 3.14159;\nvec4 qtVu;\nvec3 gravVec;\nfloat hbLen, spLen, fOvlap, bRad, ntStep;\n\nconst int nNeb = 4, nNebD = 4;\nivec2 idNeb[nNeb], idNebD[nNebD];\n\nvoid IdNebs ()\n{\n  idNeb[0] = ivec2 (1, 0);\n  idNeb[1] = - idNeb[0];\n  idNeb[2] = ivec2 (0, 1);\n  idNeb[3] = - idNeb[2];\n  idNebD[0] = ivec2 (1, 1);\n  idNebD[1] = - idNebD[0];\n  idNebD[2] = ivec2 (1, -1);\n  idNebD[3] = - idNebD[2];\n}\n\nvec3 GetR (vec2 v)\n{\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetV (vec2 v)\n{\n  v.x += float (nBallE);\n  return Loadv4 (v).xyz;\n}\n\nvec3 GetRB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 0, nBallE)).xyz;\n}\n\nvec3 GetVB (int n)\n{\n  return Loadv4 (vec2 (2 * n + 1, nBallE)).xyz;\n}\n\n#define InLatt(t) (t >= 0 && t < nBallE)\n\nvoid SpringForce (ivec2 iv, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  ivec2 ivn;\n  float spLenD, fSpring, fDamp;\n  fSpring = 50.;\n  fDamp = 0.5;\n  for (int n = 0; n < nNeb; n ++) {\n    ivn = iv + idNeb[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += fSpring * (spLen - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n  spLenD = spLen * sqrt (2.);\n  for (int n = 0; n < nNebD; n ++) {\n    ivn = iv + idNebD[n];\n    if (InLatt (ivn.x) && InLatt (ivn.y)) {\n      dr = r - GetR (vec2 (ivn));\n      f += 5. * fSpring * (spLenD - length (dr)) * normalize (dr) -\n         fDamp * (v - GetV (vec2 (ivn)));\n    }\n  }\n}\n\n#define InLatt2(t, k) (k == 0 && t > 1 || k == 2 && t < nBallE - 2 || k == 1 && (t > 0 && t < nBallE - 1))\n\nvoid BendForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr1, dr2, rt;\n  ivec2 ivd;\n  float s, c11, c22, c12, cd, fBend;\n  fBend = 500.;\n  for (int nd = 0; nd < 2; nd ++) {\n    ivd = (nd == 0) ? ivec2 (1, 0) : ivec2 (0, 1);\n    for (int k = 0; k < 3; k ++) {\n      if (nd == 0 && InLatt2 (iv.x, k) || nd == 1 && InLatt2 (iv.y, k)) {\n        if (k == 0) {\n          rt = GetR (vec2 (iv - ivd));\n          dr1 = rt - GetR (vec2 (iv - 2 * ivd));\n          dr2 = r - rt;\n          s = -1.;\n        } else if (k == 2) {\n          rt = GetR (vec2 (iv + ivd));\n          dr1 = rt - r;\n          dr2 = GetR (vec2 (iv + 2 * ivd)) - rt;\n          s = -1.;\n        } else {\n          dr1 = r - GetR (vec2 (iv - ivd));\n          dr2 = GetR (vec2 (iv + ivd)) - r;\n          s = 1.;\n        }\n        c11 = 1. / dot (dr1, dr1);\n        c12 = dot (dr1, dr2);\n        c22 = 1. / dot (dr2, dr2);\n        cd = sqrt (c11 * c22);\n        s *= fBend * cd * (c12 * cd - 1.);\n        if (k <= 1) f += s * (dr1 - c12 * c22 * dr2);\n        if (k >= 1) f += s * (c12 * c11 * dr1 - dr2);\n      }\n    }\n  }\n}\n\nvoid PairForce (ivec2 iv, vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr);\n    if (rSep > 0.01 && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid WallForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid WallForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  dr = hbLen - 1.2 * bRad - abs (r);\n  f -= 50. * step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. / abs (dr) - 1.) * dr;\n}\n\nvoid BShForce (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid BShForceB (vec3 r, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  int nx, ny;\n  nx - 0;\n  ny = 0;\n  for (int n = 0; n < nBall; n ++) {\n    dr = r - GetR (vec2 (nx, ny));\n    rSep = length (dr) - bRad;\n    if (rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n    if (++ nx == nBallE) {\n      nx = 0;\n      ++ ny;\n    }  \n  }\n}\n\nvoid BBForce (int mId, vec3 r, vec3 v, inout vec3 f)\n{\n  vec3 dr;\n  float rSep;\n  for (int n = 0; n < nBBall; n ++) {\n    dr = r - GetRB (n);\n    rSep = length (dr) - 2. * bRad;\n    if (n != mId && rSep < 1.) f += fOvlap * (1. - rSep) * normalize (dr);\n  }\n}\n\nvoid Step (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt;\n  IdNebs ();\n  fDamp = 0.5;\n  r = GetR (vec2 (iv));\n  v = GetV (vec2 (iv));\n  f = vec3 (0.);\n  PairForce (iv, r, f);\n  SpringForce (iv, r, v, f);\n  BendForce (iv, r, f);\n  WallForce (r, f);\n  BShForce (r, f);\n  f -= gravVec + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid StepB (int mId, out vec3 r, out vec3 v)\n{\n  vec3 f;\n  float fDamp, dt, biMass;\n  fDamp = 0.5;\n  biMass = 0.02;\n  r = GetRB (mId);\n  v = GetVB (mId);\n  f = vec3 (0.);\n  BBForce (mId, r, v, f);\n  WallForceB (r, f);\n  BShForceB (r, f);\n  f -= 2. * fDamp * v;\n  f *= biMass;\n  f -= gravVec;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QtMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (ivec2 iv, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  for (int iy = 0; iy < nBallE; iy ++) {\n    for (int ix = 0; ix < nBallE; ix ++) {\n      if (iv.x == ix && iv.y == iy) {\n        r = 0.97 * spLen * vec3 (ix, iy, 0.);\n        r.xy -= 0.5 * (float (nBallE) - 1.);\n      }\n    }\n  }\n  v = VInit (iv.y * nBallE + iv.x);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nBall; n ++) vSum += VInit (n);\n  v -= vSum / float (nBall);\n}\n\nvoid InitB (int mId, out vec3 r, out vec3 v)\n{\n  float fn;\n  fn = float (mId);\n  r = 0.4 * hbLen * (2. * vec3 (mod (fn, 2.), floor (mod (fn, 4.) / 2.),\n     floor (fn / 4.)) - 1.);\n  v = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  ivec2 pxIv, iv;\n  float tCur;\n  int mId, pxId;\n  pxIv = ivec2 (fragCoord);\n  pxId = pxIv.x + 2 * nBallE * pxIv.y;\n  if (pxIv.x >= 2 * nBallE || pxId > 2 * (nBall + nBBall) + 2) discard;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  qtVu = Loadv4 (vec2 (2 * nBBall + 1, nBallE));\n  mPtrP = Loadv4 (vec2 (2 * nBBall + 2, nBallE));\n  iv = pxIv;\n  if (iv.x >= nBallE) iv.x -= nBallE;\n  mId = iv.y * nBallE + iv.x;\n  if (iFrame <= 5) {\n    spLen = 1.1;\n    hbLen = 0.55 * spLen * float (nBallE - 1);\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    ntStep = 0.;\n    if (mId < nBall) {\n      Init (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      InitB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (vec2 (2 * nBBall + 0, nBallE));\n    spLen = stDat.x;\n    hbLen = stDat.y;\n    bRad = 0.1 * hbLen;\n    fOvlap = 1000.;\n    gravVec = vec3 (0., 2., 0.) * QtToRMat (qtVu);\n    ntStep = stDat.w;\n    ++ ntStep;\n    if (mPtrP.z < 0.) qtVu = normalize (QtMul (EulToQt (0.004 *\n       pi * vec3 (0.27, -0.34, 0.11)), qtVu));   \n    if (mId < nBall) {\n      Step (iv, r, v);\n      p = (pxIv.x >= nBallE) ? v : r;\n    } else if (pxId >= 2 * nBall && pxId < 2 * (nBall + nBBall)) {\n      mId = (pxId - 2 * nBall) / 2;\n      StepB (mId, r, v);\n      p = (2 * mId == pxId - 2 * nBall) ? r : v;\n    }\n  }\n  if (pxId < 2 * nBall) stDat = vec4 (p, 0.);\n  else if (pxId < 2 * (nBall + nBBall)) stDat = vec4 (p, 0.);\n  else if (pxId == 2 * (nBall + nBBall))\n     stDat = stDat = vec4 (spLen, hbLen, tCur, ntStep);\n  else if (pxId == 2 * (nBall + nBBall) + 1) stDat = qtVu;\n  else if (pxId == 2 * (nBall + nBBall) + 2) stDat = mPtrP;\n  Savev4 (vec2 (pxIv), stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n\nvoid Savev4 (vec2 vId, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d = abs (fCoord - vId - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}