{
    "Shader": {
        "info": {
            "date": "1673822569",
            "description": "vonoroi",
            "flags": 0,
            "hasliked": 0,
            "id": "dtSGWG",
            "likes": 5,
            "name": "neighbors 4",
            "published": 3,
            "tags": [
                "vonoroi"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "\nvec2 f_o_rotd(vec2 o, float n_angle_nor){\n    float n_tau = 6.283185;\n    float n_ang_rad = n_angle_nor * n_tau;\n    return vec2(\n        cos(n_ang_rad)*o.x - sin(n_ang_rad)*o.y, \n        sin(n_ang_rad)*o.x + cos(n_ang_rad)*o.y\n    );\n}\n\nfloat f_n_rand(float n){\n    n = n+n+n*.2133;\n    n = n*n*0.231;\n    n = sin(n*1.2324+123.1*n)*124.123;\n    return fract(n);\n}\nfloat f_n_dist_sqr(vec2 o){\n    float n = max(abs(o.x), abs(o.y));\n    return n; \n}\nfloat f_n_dist(vec2 o_trn_fc_nor_offset, vec2 o_scl, vec2 o_trn){\n    o_trn_fc_nor_offset*=o_scl;\n    \n    float n_index = (o_trn_fc_nor_offset.x)\n        + floor(o_trn_fc_nor_offset.y) * o_scl.x;\n        \n    vec2 o = o_trn_fc_nor_offset+floor(o_trn);\n    float n_x_nor = floor(o.x) / o_scl.x;\n    float n_index_floor = floor(o.x)\n        + floor(o.y) * o_scl.x;\n    float n_index_nor = floor(n_index) / (o_scl.x*o_scl.y);\n    float n_rand = f_n_rand(iTime*0.0001+n_index_floor/(o_scl.x*o_scl.y))-0.5;\n    //n_rand = 0.;\n    vec2 o2 = (fract(o_trn_fc_nor_offset)-(o_trn)-0.5);\n    float n_tau = 6.2831;\n    o2 = f_o_rotd(o2, sin(iTime+n_index_nor*0.2*n_tau));//+sin(n_index+iTime);\n    o2 *= (sin(n_x_nor*n_tau+iTime*10.)*0.5+0.5)*2.+1.;\n    float n_dist = f_n_dist_sqr(o2);\n    \n    //n_dist = pow(n_dist, 1./5.)*1.;\n    //n_dist = 1.-n_dist;\n    //return n_index_floor / (o_scl.x * o_scl.y);\n    return n_dist;\n}\nvec2 f_o_index(vec2 o_trn, vec2 o_scl){\n    float n_index_floor = floor(o_trn.x)\n        + floor(o_trn.y) * o_scl.x;\n    return vec2(\n        n_index_floor, \n        n_index_floor / floor(o_scl.x*o_scl.y)\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_ratio_1to_iresx = 1./ iResolution.x;\n    //needed for anti aliasing ?\n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n\n    vec2 o_scl = vec2(11.);\n    \n    vec2 o_scl_krn = vec2(3.);\n    float n_krn_xty = o_scl_krn.x*o_scl_krn.y;\n    float n_dmin = 1.;\n    vec2 omin = vec2(0.);\n    for(float n = 0.; n < n_krn_xty; n+=1.){\n        float n_x = floor(mod(n, o_scl_krn.x) - floor(o_scl_krn.x/2.));\n        float n_y = floor(n / o_scl_krn.x) - floor(o_scl_krn.y/2.);\n        float n_dist = f_n_dist(o_trn_fc_nor_offset, o_scl, vec2(n_x, n_y));\n        //n_dmin = min(n_dist, n_dmin);\n        if(n_dist < n_dmin){\n            n_dmin = n_dist;\n            omin = (o_trn_fc_nor_offset*o_scl) + vec2(n_x, n_y);\n        }\n        //n_dmin = n_dist;\n    }\n    \n    fragColor = vec4(1.-(n_dmin*n_dmin*n_dmin*10.));\n    \n    if(o_trn_fc_nor_offset.x > 0.){\n        vec2 o_index = f_o_index(floor(omin), o_scl);\n        float nr = f_n_rand(abs(o_index.g)*2.);\n        float nr2 = f_n_rand(nr);\n        fragColor = vec4(nr, nr2, 0.5, 1.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}