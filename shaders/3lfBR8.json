{
    "Shader": {
        "info": {
            "date": "1595903473",
            "description": "Double slit experiment simulation using SchrÃ¶dinger's quantum mechanical wave equation.",
            "flags": 32,
            "hasliked": 0,
            "id": "3lfBR8",
            "likes": 21,
            "name": "Double slit simulation",
            "published": 3,
            "tags": [
                "simulation",
                "quantum",
                "waveequation",
                "schrdinger"
            ],
            "usePreview": 0,
            "username": "Pidhorskyi",
            "viewed": 693
        },
        "renderpass": [
            {
                "code": "#define s_Im_pdt iChannel0\n#define s_Re_c iChannel1\n\nvec3 lab2xyz( vec3 c ) {\n    float fy = ( c.x + 16.0 ) / 116.0;\n    float fx = c.y / 500.0 + fy;\n    float fz = fy - c.z / 200.0;\n    return vec3(\n         95.047 * (( fx > 0.206897 ) ? fx * fx * fx : ( fx - 16.0 / 116.0 ) / 7.787),\n        100.000 * (( fy > 0.206897 ) ? fy * fy * fy : ( fy - 16.0 / 116.0 ) / 7.787),\n        108.883 * (( fz > 0.206897 ) ? fz * fz * fz : ( fz - 16.0 / 116.0 ) / 7.787)\n    );\n}\n\nvec3 xyz2rgb(vec3 c){\n\tconst mat3 mat = mat3(\n        3.2406, -1.5372, -0.4986,\n        -0.9689, 1.8758, 0.0415,\n        0.0557, -0.2040, 1.0570\n\t);\n    vec3 v = (c / 100.0) * mat;\n    vec3 r;\n    r.x = ( v.r > 0.0031308 ) ? (( 1.055 * pow( v.r, ( 1.0 / 2.4 ))) - 0.055 ) : 12.92 * v.r;\n    r.y = ( v.g > 0.0031308 ) ? (( 1.055 * pow( v.g, ( 1.0 / 2.4 ))) - 0.055 ) : 12.92 * v.g;\n    r.z = ( v.b > 0.0031308 ) ? (( 1.055 * pow( v.b, ( 1.0 / 2.4 ))) - 0.055 ) : 12.92 * v.b;\n    return r;\n}\n\nvec3 lab2rgb( vec3 c ) {\n    return xyz2rgb( lab2xyz( vec3(100.0 * c.x, 2.0 * 127.0 * (c.y - 0.5), 2.0 * 127.0 * (c.z - 0.5)) ) );\n}\n\t\t\nvoid mainImage(out vec4 outColor, vec2 uv)\n{\n    uv /= iResolution.xy;\n\tfloat Im_mdt = texture(s_Im_pdt, uv).x;\n\tfloat Re_c = texture(s_Re_c, uv).x;\n\t\t\t\t\n    vec2 pos = uv * vec2(1.0, iResolution.y / iResolution.x);\n    pos = 2.0 * pos - vec2(1.0, iResolution.y / iResolution.x);\n\t\t\t\t\n\tvec3 phase = (vec3(0.5, 0.0, 0.5) + vec3(Re_c, 0, Im_mdt) * 0.5);\n\tvec3 module = vec3(length(vec2(Re_c, Im_mdt)));\n    float U = Potential(pos);\n    \n\t//outColor = vec4( mix(phase, module, u_phaseOrModule) + vec3(U),  1.0); \n    outColor = vec4(lab2rgb(vec3(module.x, phase.x, phase.z)),  1.0); \n    outColor += Potential(pos);\n}\n                    \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define dt  (0.10 * dx.x * dx.x)\n\nconst float Kx = 500.0;\nconst float Ky = 0.0;\nconst float omega = 0.1;\nconst float cx = -0.7;\nconst float cy = 0.0;\n\nfloat Potential(vec2 pos)\n{\n\treturn mix(0., 1.e6, float(abs(pos.x - 0.0) < 0.01)) * float(abs(pos.y - 0.1) > 0.01 && abs(pos.y + 0.1) > 0.01); \n}\n\nvec2 Psi0(vec2 pos)\n{\n    float s = pow(pos.x-cx,2.0)+pow(pos.y-cy,2.0);\n    float o = exp(-s / 2.0 / pow(omega, 2.0) ) / omega / 15.0;\n    float im = sin(Kx*pos.x+Ky*pos.y);\n    float re = cos(Kx*pos.x+Ky*pos.y);\n\treturn o * vec2(re, im);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define s_Im_mdt iChannel0\n#define s_Re_c iChannel1\n\t\t\t\nvoid mainImage(out vec4 outColor, vec2 uv)\n{\n    uv /= iResolution.xy;\n\tvec2 dx = vec2(1.0 / iResolution.x, 0.0);\n\tvec2 dy = vec2(0.0, 1.0 / iResolution.x);\n\n    vec2 pos = uv * vec2(1.0, iResolution.y / iResolution.x);\n    pos = 2.0 * pos - vec2(1.0, iResolution.y / iResolution.x);\n\tfloat U = Potential(pos);\n\t\t\t\t\n\tfloat ImPsi_mdt   = texture(s_Im_mdt, uv).x;\n\tfloat RePsi_c     = texture(s_Re_c, uv).x;\n\tfloat RePsi_c_pdx = texture(s_Re_c, uv + dx).x;\n\tfloat RePsi_c_mdx = texture(s_Re_c, uv - dx).x;\n\tfloat RePsi_c_pdy = texture(s_Re_c, uv + dy).x;\n\tfloat RePsi_c_mdy = texture(s_Re_c, uv - dy).x;\n\n\tfloat ImPsi_pdt = \n\n\t(\n\t\t0.5 * (\n\n\t\t\t(RePsi_c_pdx + RePsi_c_mdx - 2.0 * RePsi_c) /dx.x / dx.x +\n\t\t\t(RePsi_c_pdy + RePsi_c_mdy - 2.0 * RePsi_c) /dy.y / dy.y\n\n\t\t)  - U * RePsi_c\n\n\t) * 2.0*dt + ImPsi_mdt;\n\n    if (iFrame < 1)\n    {\n        outColor = vec4(Psi0(pos).y, 0, 0, 0);\n    }\n    else\n    {\n        outColor = vec4(ImPsi_pdt, 0, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define s_Im_pdt iChannel0\n#define s_Re_c iChannel1\n\t\t\t\nvoid mainImage(out vec4 outColor, vec2 uv)\n{\n    uv /= iResolution.xy;\n\tvec2 dx = vec2(1.0 / iResolution.x, 0.0);\n\tvec2 dy = vec2(0.0, 1.0 / iResolution.x);\n\t\t\t\t\n    vec2 pos = uv * vec2(1.0, iResolution.y / iResolution.x);\n    pos = 2.0 * pos - vec2(1.0, iResolution.y / iResolution.x);\n\tfloat U = Potential(pos);\n\n\tfloat RePsi_c = texture(s_Re_c, uv).x;\n\tfloat ImPsi_pdt = texture(s_Im_pdt, uv).x;\n\tfloat ImPsi_pdt_pdx = texture(s_Im_pdt, uv + dx).x;\n\tfloat ImPsi_pdt_mdx = texture(s_Im_pdt, uv - dx).x;\n\tfloat ImPsi_pdt_pdy = texture(s_Im_pdt, uv + dy).x;\n\tfloat ImPsi_pdt_mdy = texture(s_Im_pdt, uv - dy).x;\n\n\tfloat RePsi_ppdt = \n\n\t(\n\t\t-0.5 * (\n\n\t\t\t(ImPsi_pdt_pdx + ImPsi_pdt_mdx - 2.0 * ImPsi_pdt)/ dx.x/ dx.x +\n\t\t\t(ImPsi_pdt_pdy + ImPsi_pdt_mdy - 2.0 * ImPsi_pdt)/ dy.y/ dy.y\n\n\t\t)  + U * ImPsi_pdt\n\n\t) * 2.0*dt + RePsi_c;\n\n    if (iFrame < 1)\n    {\n        outColor = vec4(Psi0(pos).x, 0, 0, 0);\n    }\n    else\n    {\n        outColor = vec4(RePsi_ppdt, 0, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define s_Im_mdt iChannel0\n#define s_Re_c iChannel1\n\t\t\t\nvoid mainImage(out vec4 outColor, vec2 uv)\n{\n    uv /= iResolution.xy;\n\tvec2 dx = vec2(1.0 / iResolution.x, 0.0);\n\tvec2 dy = vec2(0.0, 1.0 / iResolution.x);\n\t\t\t\t\n    vec2 pos = uv * vec2(1.0, iResolution.y / iResolution.x);\n    pos = 2.0 * pos - vec2(1.0, iResolution.y / iResolution.x);\n\tfloat U = Potential(pos);\n\t\t\t\t\n\tfloat ImPsi_mdt   = texture(s_Im_mdt, uv).x;\n\tfloat RePsi_c     = texture(s_Re_c, uv).x;\n\tfloat RePsi_c_pdx = texture(s_Re_c, uv + dx).x;\n\tfloat RePsi_c_mdx = texture(s_Re_c, uv - dx).x;\n\tfloat RePsi_c_pdy = texture(s_Re_c, uv + dy).x;\n\tfloat RePsi_c_mdy = texture(s_Re_c, uv - dy).x;\n\n\tfloat ImPsi_pdt = \n\n\t(\n\t\t0.5 * (\n\n\t\t\t(RePsi_c_pdx + RePsi_c_mdx - 2.0 * RePsi_c) /dx.x / dx.x +\n\t\t\t(RePsi_c_pdy + RePsi_c_mdy - 2.0 * RePsi_c) /dy.y / dy.y\n\n\t\t)  - U * RePsi_c\n\n\t) * 2.0*dt + ImPsi_mdt;\n\n    if (iFrame < 1)\n    {\n        outColor = vec4(Psi0(pos).y, 0, 0, 0);\n    }\n    else\n    {\n        outColor = vec4(ImPsi_pdt, 0, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define s_Im_pdt iChannel0\n#define s_Re_c iChannel1\n\t\t\t\nvoid mainImage(out vec4 outColor, vec2 uv)\n{\n    uv /= iResolution.xy;\n\tvec2 dx = vec2(1.0 / iResolution.x, 0.0);\n\tvec2 dy = vec2(0.0, 1.0 / iResolution.x);\n\t\t\t\t\n    vec2 pos = uv * vec2(1.0, iResolution.y / iResolution.x);\n    pos = 2.0 * pos - vec2(1.0, iResolution.y / iResolution.x);\n\tfloat U = Potential(pos);\n\n\tfloat RePsi_c = texture(s_Re_c, uv).x;\n\tfloat ImPsi_pdt = texture(s_Im_pdt, uv).x;\n\tfloat ImPsi_pdt_pdx = texture(s_Im_pdt, uv + dx).x;\n\tfloat ImPsi_pdt_mdx = texture(s_Im_pdt, uv - dx).x;\n\tfloat ImPsi_pdt_pdy = texture(s_Im_pdt, uv + dy).x;\n\tfloat ImPsi_pdt_mdy = texture(s_Im_pdt, uv - dy).x;\n\n\tfloat RePsi_ppdt = \n\n\t(\n\t\t-0.5 * (\n\n\t\t\t(ImPsi_pdt_pdx + ImPsi_pdt_mdx - 2.0 * ImPsi_pdt)/ dx.x/ dx.x +\n\t\t\t(ImPsi_pdt_pdy + ImPsi_pdt_mdy - 2.0 * ImPsi_pdt)/ dy.y/ dy.y\n\n\t\t)  + U * ImPsi_pdt\n\n\t) * 2.0*dt + RePsi_c;\n\n    if (iFrame < 1)\n    {\n        outColor = vec4(Psi0(pos).x, 0, 0, 0);\n    }\n    else\n    {\n        outColor = vec4(RePsi_ppdt, 0, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}