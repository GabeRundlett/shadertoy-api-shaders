{
    "Shader": {
        "info": {
            "date": "1425843066",
            "description": "calculating a realtime antialiasing stencil buffer based on the input geometry.\n\nSet APPLY_ANTIALIASING to false at the top to disable antialiasing, as a comparison.",
            "flags": 0,
            "hasliked": 0,
            "id": "lts3WX",
            "likes": 1,
            "name": "Geometric Antialiasing",
            "published": 3,
            "tags": [
                "antialiasing",
                "realtime",
                "geometric"
            ],
            "usePreview": 0,
            "username": "CloneDeath",
            "viewed": 1480
        },
        "renderpass": [
            {
                "code": "#define APPLY_ANTIALIASING true\n\n// We move the edge over time, to show motion alias artefacts\nfloat time = (iTime + 5.0) / 100.0;\n\n// The vertex shader is responsible for computing the three edge line equations based\n// on the 3 vertex coordinates. It is just a simple cross product of the points.\nvec3 edgeLine1 = vec3(0.0, -1.0, time);\nvec3 edgeLine2 = vec3(0.9, 0.1, -time);\nvec3 edgeLine3 = vec3(-0.7, 0.3, time);\n\n\nfloat mult(in vec3 v1, in vec3 v2){\n \treturn (v1.x * v2.x) + (v1.y * v2.y) + (v1.z * v2.z);\n}\n\nfloat getOverlap(vec3 dist, float maxdist){\n \tvec3 overlap = 1.0-smoothstep(0.0, maxdist, dist);\n    overlap = overlap * overlap;\n    return overlap.x * overlap.y * overlap.z;\n}\n\nfloat getOverlapAlias(vec3 dist, float maxdist){\n\tvec3 overlap = 1.0 - step(maxdist, dist);   \n    return overlap.x * overlap.y * overlap.z;\n}\n\nvec3 getPoint(vec3 edge1, vec3 edge2){\n\tvec3 point = cross(edge1, edge2);\n    point.xyz /= point.z;\n    return point;\n}\n\nvec3 skewPoint(vec3 point){\n \treturn point;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 backCoord = vec3(fragCoord / iResolution.xy, 1.0);\n    \n    vec3 texCoord = vec3(backCoord);\n    vec3 texTL = getPoint(edgeLine1, edgeLine2);\n    texCoord = texCoord - texTL;\n    \n    texCoord = skewPoint(texCoord);\n    \n    \n    \n    float coverage = 0.0;\n    \n    vec3 dist = vec3(-mult(edgeLine1, backCoord),\n                \t -mult(edgeLine2, backCoord),\n            \t\t -mult(edgeLine3, backCoord));\n    \n    float tolerance = 1.0/sqrt((iResolution.x * iResolution.x) + (iResolution.y * iResolution.y));\n    \n    float overlay;\n    if (APPLY_ANTIALIASING){\n    \toverlay = getOverlap(dist, tolerance);\n    } else {\n    \toverlay = getOverlapAlias(dist, tolerance);\n    }\n    \n    vec4 texColor = texture(iChannel0, texCoord.xy);\n    vec4 backColor = texture(iChannel1, backCoord.xy);\n    fragColor = mix(backColor, texColor, overlay);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}