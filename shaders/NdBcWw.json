{
    "Shader": {
        "info": {
            "date": "1643583105",
            "description": "This place is just weird",
            "flags": 0,
            "hasliked": 0,
            "id": "NdBcWw",
            "likes": 4,
            "name": "Eldritch dimension",
            "published": 3,
            "tags": [
                "spooky",
                "eldritch"
            ],
            "usePreview": 0,
            "username": "pancakespeople",
            "viewed": 227
        },
        "renderpass": [
            {
                "code": "float sdf(vec3 point) {\n    //float sphere = length(point-vec3(0.25, 1.25, 3.0))-0.5;\n    float plane = length(point.y-0.5 + cos(point.xz/2.0+iTime));\n    \n    return plane;\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDir) {\n    float distMarched = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n        float dist = sdf(rayOrigin);\n        \n        rayOrigin += rayDir * dist;\n        distMarched += dist;\n        \n        if (distMarched < 0.01 || dist > 100.0) {\n            break;\n        }\n    }\n    \n    return distMarched;\n}\n\nvec3 getNormal(vec3 point) {\n    float dist = sdf(point);\n    vec3 norm = dist - vec3(\n        sdf(point - vec3(0.01, 0.0, 0.0)),\n        sdf(point - vec3(0.0, 0.01, 0.0)),\n        sdf(point - vec3(0.0, 0.0, 0.01))\n    );\n    return normalize(norm);\n}\n\nfloat getSpecular(vec3 point, vec3 lightPos, vec3 cameraPos) {\n    vec3 viewDir = normalize(cameraPos-point);\n    vec3 lightDir = normalize(lightPos-point);\n    vec3 reflectDir = reflect(-lightDir, getNormal(point));\n    return pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n}\n\nfloat getLight(vec3 point, vec3 cameraPos) {\n    vec3 normal = getNormal(point);\n    vec3 lightPos = cameraPos;\n    vec3 lightDir = normalize(lightPos-point);\n    return dot(normal, lightDir) + getSpecular(point, lightPos, cameraPos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    \n    vec3 cameraPos = vec3(0.0, 1.0, iTime);\n    vec3 rayDir = vec3(uv.x, uv.y/8.0, 1.0);\n\n    float dist = rayMarch(cameraPos, rayDir);\n    vec3 point = rayDir * dist + cameraPos;\n    \n    vec3 col = vec3(getLight(point, cameraPos));\n    col = mix(col, vec3(0.5, 0.0, 0.8), min(dist/500.0, 1.0));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}