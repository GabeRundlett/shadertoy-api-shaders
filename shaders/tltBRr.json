{
    "Shader": {
        "info": {
            "date": "1612141779",
            "description": "Simple gradient descent.",
            "flags": 32,
            "hasliked": 0,
            "id": "tltBRr",
            "likes": 22,
            "name": "Simple Gradient Descent",
            "published": 3,
            "tags": [
                "gradient",
                "machinelearning",
                "gradientdescent",
                "minima"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 527
        },
        "renderpass": [
            {
                "code": "/*\nI've gotten interested in neural networks again so I followed this tutorial explaining\ngradient descent: https://realpython.com/gradient-descent-algorithm-python/\nI didn't choose the best parameters because I thought these looked way more interesting :)\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = CONTOUR_THICKNESS / iResolution.y * 4.0;\n    vec3 color = vec3(0.0);\n\n    float hSpacing = 0.5 * CONTOUR_SPACING;\n    float fRes = f(uv);\n\n    color.br += vec2(1.0, 0.0) + vec2(-1.0, 1.0) * (0.5 + 0.5 * fRes);\n    color *= smoothstep(0.0, unit, abs(mod(fRes + hSpacing, CONTOUR_SPACING) - hSpacing) / length(d(uv)));\n\n    for (int i=0; i < NUMBER_OF_POINTS; i++) {\n        vec2 point = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n        color = mix(color, vec3(1.0), smoothstep(unit, 0.0, length(uv - point) - 0.05));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    bool inPositions = iFragCoord.x < NUMBER_OF_POINTS && iFragCoord.y == 0;\n    bool inChanges = iFragCoord.x < NUMBER_OF_POINTS && iFragCoord.y == 1;\n\n    if (iFrame == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        if (inPositions) {\n            fragColor = vec4(Hash12(fragCoord.x + iDate.w) * 4.0 - 2.0, 0.0, 1.0);\n        }\n    }\n\n    if (iFrame > 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        if (inPositions) {\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            vec2 change = texelFetch(iChannel0, ivec2(iFragCoord.x, 1), 0).xy;\n            vec2 grad = d(fragColor.xy);\n            fragColor.xy += DECAY_RATE * change - LEARNING_RATE * grad;\n        }\n\n        if (inChanges) {\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            vec2 position = texelFetch(iChannel0, ivec2(iFragCoord.x, 0), 0).xy;\n            vec2 grad = d(position);\n            fragColor.xy = DECAY_RATE * fragColor.xy - LEARNING_RATE * grad;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Number of points to be tracked\n#define NUMBER_OF_POINTS 200\n\n// Contour settings\n#define CONTOUR_SPACING 0.125\n#define CONTOUR_THICKNESS 2.0\n\n// Controls the speed at which the points move\n// Must be balanced for speed/accuracy\n#define LEARNING_RATE 0.001\n\n// Controls the points' momenta\n#define DECAY_RATE 0.999\n\n// Small number\n#define DELTA 0.001\n\n// Hashes from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash21(in vec2 p) {\n\tvec3 p3  = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 Hash12(in float p) {\n\tvec3 p3 = fract(p * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n\n// The function the points try to find the minima of\n// #define f(xy) dot(sin(xy * 3.0), vec2(1.0)) / 3.0\nfloat f(in vec2 xy) {\n    xy *= 0.75;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (int octave=0; octave < 3; octave++) {\n        vec2 cell = floor(xy);\n        vec2 local = fract(xy);\n        local *= local * (3.0 - 2.0 * local);\n\n        float bl = Hash21(cell);\n        float br = Hash21(cell + vec2(1.0, 0.0));\n        float tl = Hash21(cell + vec2(0.0, 1.0));\n        float tr = Hash21(cell + 1.0);\n\n        value += mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n        tscale += nscale;\n        nscale *= 0.5;\n        xy *= mat2(-0.48406725864 * 2.0, -0.87503079323, 0.87503079323, -0.48406725864 * 2.0); // Rotate ~4.21 radians and scale by 2\n    }\n\n    return value / tscale - 0.8;\n}\n\n// Derivative of f for guiding the points (numeric)\n// #define d(xy) cos(xy * 3.0)\nvec2 d(in vec2 xy) {\n    return vec2(f(xy + vec2(DELTA, 0.0)) - f(xy - vec2(DELTA, 0.0)),\n                f(xy + vec2(0.0, DELTA)) - f(xy - vec2(0.0, DELTA))) / (2.0 * DELTA);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}