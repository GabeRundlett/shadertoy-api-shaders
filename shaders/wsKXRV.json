{
    "Shader": {
        "info": {
            "date": "1574502346",
            "description": "I tried to implement Wirtinger derivatives(https://en.wikipedia.org/wiki/Wirtinger_derivatives) and it doesn't work as expected, but anyway I upload this 'cause I find it interesting.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKXRV",
            "likes": 3,
            "name": "Psychedelic pattern",
            "published": 3,
            "tags": [
                "math",
                "mathematics"
            ],
            "usePreview": 0,
            "username": "Kanata",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "//operations on complex numbers borrowed from\n//https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n#define re(a) vec2((a).x, 0.)\n#define im(a) vec2(0., (a).y)\n#define cmul(a,b) ( mat2(a, -(a).y, (a).x ) * (b) )\n#define conj(a)     vec2( (a).x, -(a).y)\n#define cinv(a)   ( conj(a) / dot(a, a) )\n#define cexp(a)   ( exp((a).x)* vec2(cos((a).y), sin((a).y)) )\n#define clog(a)     vec2( log(length(a)), atan((a).y,(a).x) )\n#define cpow(a,n)   cexp( float(n)* clog(a) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 res = iResolution.xy,\n          z = ( u* 2. - res) / min(res.x, res.y);\n\n    float t = iTime;\n    float scale = 1.5;\n    z *= scale;\n    \n    float delta = 0.00000005 * (1. + 1.* sin(t));\n    #define f(w)\t(cpow(w, 7) + sin(t)* cpow(w, 3) + w)\n    #define delfdelx(w)\t(f(w + vec2(delta, 0.)) - f(w - vec2(delta, 0.))) / (2.* delta)\n    #define delfdely(w)\t(f(w + vec2(0., delta)) - f(w - vec2(0., delta))) / (2.* delta)\n    #define delfdelz(w) 0.5* (delfdelx(w) - cmul(vec2(0., 1.), delfdely(w)))\n    #define delfdelzbar(w) 0.5* (delfdelx(w) + cmul(vec2(0., 1.), delfdely(w)))    \n      \n    float l = length(f(z));\n    float ldelz = length(delfdelz(z));\n    float ldelzbar = length(delfdelzbar(z));    \n\n    O = vec4(vec3(.01/ abs(l - 1.)) + vec3(.01/ abs(ldelz - 1.), 0., .01/ abs(ldelzbar)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI  = 3.141592653589793;\n\nvec3 hsvToRgb(float h, float s, float v) {\n    // h: -π - +π, s: 0.0 - 1.0, v: 0.0 - 1.0\n    h = (h + PI) / (2.* PI) * 360.;\n\n    float c = s; // float c = v * s;\n    float h2 = h / 60.0;\n    float x = c * (1.0 - abs(mod(h2, 2.0) - 1.0));\n    vec3 rgb = (v - c) * vec3(1.0, 1.0, 1.0);\n\n    if (0.0 <= h2 && h2 < 1.0) {\n        rgb += vec3(c, x, 0.0);\n    } else if (1.0 <= h2 && h2 < 2.0) {\n        rgb += vec3(x, c, 0.0);\n    } else if (2.0 <= h2 && h2 < 3.0) {\n        rgb += vec3(0.0, c, x);\n    } else if (3.0 <= h2 && h2 < 4.0) {\n        rgb += vec3(0.0, x, c);\n    } else if (4.0 <= h2 && h2 < 5.0) {\n        rgb += vec3(x, 0.0, c);\n    } else if (5.0 <= h2 && h2 < 6.0) {\n        rgb += vec3(c, 0.0, x);\n    }\n\n    return rgb;\n}\n// hsvToRgb borrowed from\n// https://qiita.com/sw1227/items/4be9b9f928724a389a85\n// (slightly modified by Kanata)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}