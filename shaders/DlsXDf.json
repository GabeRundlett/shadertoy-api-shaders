{
    "Shader": {
        "info": {
            "date": "1675437283",
            "description": "^^",
            "flags": 0,
            "hasliked": 0,
            "id": "DlsXDf",
            "likes": 1,
            "name": "Shader Morphing - carla",
            "published": 3,
            "tags": [
                "morphing"
            ],
            "usePreview": 0,
            "username": "carlito",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdBox (vec3  p, vec3 b){\n    vec3 q = abs(p) -b;\n    return length(max(q,0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nvec2 rot(vec2 st, float a)\n{\n    return st * mat2(cos(a), -sin(a),\n                    sin(a), cos(a));\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat sphere2(vec3 p, float t )\n{\n  return length(p)-t;\n}\n\nfloat map(vec3 pos){\n    float v= 0.0;\n\n    vec3 sp1 = pos + vec3(3.0, 0.0, 0.0);\n    vec3 sp2 = pos + vec3(-3.0, 0.0, 0.0);\n    \n    v = sdSphere(sp1, 1.0);\n    //v = mix(sdSphere(pos, 1.0), sdBox(pos, vec3(1.0)), sin(iTime));\n    v = mix(sdBoxFrame(pos, vec3(1.0,1.0,1.0), 0.5), sdOctahedron(pos,1.0), sin(iTime));\n    \n    \n    //v = opSmoothUnion(v, sdSphere(sp2, 3.0), 1.0);\n    \n    return v;\n}\n\n\nfloat CastRay(vec3 ro, vec3 rd){\n    float contact = 0.0;\n    for(int i=0; i<64; i++)\n    {\n        float ray= map(ro+rd*contact);\n        if(ray < (0.0001*contact))\n        {\n            return float(i)/32.;\n        }\n        contact +=ray;\n    }\n    return -1.0;\n}\n\n\nvec3  render(vec3 ro, vec3 rd){\n    float contact = CastRay(ro, rd);\n    vec3 col = vec3(0.0);\n    \n    \n    if(contact == -1.0){\n        col = vec3(0.0);}\n    else {\n        col = vec3(1.0-contact);}\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float rand = fract(sin(uv.x*54.345))*13.456;\n    vec3 col2 = vec3(rand);\n    \n    \n    vec3 cameraPos = vec3(0.0, 5.0, -5.);\n    vec3 cameraTar = vec3(0.0, 0.0, 0.0);\n    cameraPos.xy = rot(cameraPos.xy, iTime*2.0);\n    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up +2.0 * forward);\n\n    vec3 col = render(cameraPos, viewDir);\n    col*= (vec3(1.0) * vec3(1.1, 1.0, 1.5) -0.3 + 0.2*cos(iTime));\n    col += vec3(0.4,sin(iTime),1.4)/3.0;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}