{
    "Shader": {
        "info": {
            "date": "1571347215",
            "description": "[url=https://twitter.com/rathniley/status/1184415795599810562]Inspiration[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wdtXzn",
            "likes": 20,
            "name": "Shadertoy Spinner",
            "published": 3,
            "tags": [
                "shadertoy",
                "spinner"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Inspired by the twit of @rathniley \n// https://twitter.com/rathniley/status/1184415795599810562\n\n// Use the code from mattz in his \"glyphspinner\" shader, for font sdf extraction \n// https://www.shadertoy.com/view/XsVcDy\n\n#define COUNT 10\n#define CHAR_WIDTH 6.\n//#define WIRE_CHARS\n#define CHAR_DEPTH 0.01\n\n//                 S  H  A  D  E  R  T  O  Y  _\nint[] text = int[](67,56,49,52,53,66,68,63,73,0);\n\t\t\t\nfloat map(vec3 p)\n{\n\tfloat co = 0.3;\n    p.y = clamp(p.y, 0.0, co * 6.0); // repeat limit\n\tfloat sid = floor(p.y/co); \t\t // line id\n\tp.y = mod(p.y, co) - co * 0.5;   // line repeat\n    \n    // rotation sheme\n\tfloat s = mod(sid,2.0) - 0.5;    // dir rot, pair=1, unpair=-1\n\tfloat a = sin(iTime * s) * 0.5 + sin(iTime * (sid - 3.0)) * 3.0;\n\tp.xz *= mat2(cos(a),-sin(a),sin(a),cos(a));\n\t\n    // circular path\n    vec2 path = vec2(length(p.xz) - 1.5, p.y);\n    \n    // torus sdf\n    float dtorus = length(max(abs(path) - vec2(CHAR_DEPTH,0.3),0.0));\n\t\n    // texture uv based on angle\n    vec2 uv = vec2(-atan(p.x,p.z)/3.14159*3.0, -path.y) * CHAR_WIDTH * 0.5;\n    \n    // char case\n\tfloat cs = CHAR_WIDTH/float(COUNT);\n    float idx = floor(uv.x/cs);      // idx\n\tuv.x = mod(uv.x, cs) - cs * 0.5;\n    \n    // limit id for avoid array overflow\n\tint id = int(mod(idx,float(COUNT)));\n    \n    // font sdf\n\tfloat dfont = approx_font_dist(iChannel0, uv, 16 + text[id]);\n\t\n    #ifdef WIRE_CHARS\n    \tdfont = abs(dfont) - 0.02;\n    #else\n    \tdfont -= 0.05;\n    #endif\n    \n    // white space\n    if (text[id] == 0) dfont = 0.1;\n    \n    // final df\n\treturn max(dtorus, dfont);\n}\n\nvec3 getNormal(vec3 p, float prec)\n{\n\tvec3 e = vec3(prec, 0, 0);\n\treturn normalize(vec3(\n\t\tmap(p+e)-map(p-e),\n\t\tmap(p+e.yxz)-map(p-e.yxz),\n\t\tmap(p+e.zyx)-map(p-e.zyx)));\n}\n\nfloat getShadow(vec3 ro, vec3 rd, float minD, float maxD, float k)\n{\n    float res = 1.0;\n    float d = minD;\n\tfloat s = 0.;\n    for(int i = 0; i < 20; ++i)\n    {\n        s = map(ro + rd * d);\n        if( abs(s)<d*d*1e-5 ) return 0.0;\n        res = min( res, k * s / d );\n\t\td += s;\n        if(d >= maxD) break;\n    }\n    return res;\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 lp, vec3 rd)\n{\n\tvec3 ld = normalize(lp - p);\n\t\n\tfloat sha = getShadow(p, ld, 0.01, 150., 5.0);\n\t\t\t\t\n\tvec3 refl = reflect(rd,n);\t\t\n\t\t\t\t\t\t\t\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\n\t\t\n\tvec3 col = vec3(0.2,0.4,0.65) * diff * sha;\n\tcol += spe * 0.5 * sha;\n\t\n\treturn col;\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cv, float fov)\n{\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n  \treturn normalize(z + fov*uv.x*x + fov*uv.y*y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 si = iResolution.xy;\n    vec2 uv = (2.*fragCoord.xy-si)/si.y;\n    \n\tfloat ca = 0.0;\n\tfloat ce = 0.5;\n\tfloat cd = 5.;\n\t\n\tvec3 ro = vec3(cos(ca), ce, sin(ca)) * cd;;\n  \tvec3 cv = vec3(0);\n\tvec3 rd = cam(uv, ro, cv, 0.4);\n    \n    vec3 col = vec3(0.0);\n\n    ro.y += 0.5;\n\tfloat s = 1., d = 0., md = 100.;\n\tfor (int i = 0; i < 200; i++)\n\t{\n\t\tif (abs(s)<d*d*1e-6 || d > 100.) break;\n\t\ts = map(ro + rd * d);\n\t\td += s * 0.5;\n\t}\n\t\n\tif (d < md)\n\t{\n\t\tvec3 p = ro + rd * d;\n\t\tvec3 n = getNormal(p, 0.01);\n\t\t\n\t\tcol = shade(p, n, vec3(3.0, p.y, 0.3), rd) * 2.5;\n\t\tcol += shade(p, n, vec3(0.8, p.y, 0.0), rd) * 2.5;\n\t\tcol = mix(col, vec3(0), 1.0 - exp(-0.01*d*d));\n\t\tcol = clamp(sqrt(col * col * 0.75 + 0.01), 0., 1.);\n\t}\n\t\n\tfragColor = vec4(col,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//////////////////////////////////////////////////////////////////////////////\n// from mattz \"glyphspinner\" shader: https://www.shadertoy.com/view/XsVcDy\n// texture is 1024x1024\nconst float TEX_RES = 1024.;\n// texture is 16x16 glyphs\nconst float GLYPHS_PER_UV = 16.;\n// since the texture is uint8 it has a bias to represent 0\nconst float TEX_BIAS = 127./255.;\n// get font UV coords from screen coords\nvec2 font_from_screen(vec2 tpos, vec2 char_pos) \n{    \n    return (tpos + char_pos + 0.5)/GLYPHS_PER_UV;\n}\nfloat sample_dist_gaussian(sampler2D sam, vec2 uv) \n{\n    float dsum = 0.;\n    float wsum = 0.;\n    const int nstep = 3;\n    const float w[3] = float[3](1., 2., 1.);\n    for (int i=0; i<nstep; ++i) \n\t{\n        for (int j=0; j<nstep; ++j) \n\t\t{    \n            vec2 delta = vec2(float(i-1), float(j-1))/TEX_RES;   \n            float dist = textureLod(sam, uv-delta, 0.).w - TEX_BIAS;\n            float wij = w[i]*w[j];\n            dsum += wij * dist;\n            wsum += wij;\n        }\n    }\n    return dsum / wsum;\n}\nfloat approx_font_dist(sampler2D sam, vec2 p, int cidx) \n{\n    vec2 cpos = vec2(float(cidx%16), float(cidx/16));\n    vec2 uv = font_from_screen(p, cpos);\n    float fd = sample_dist_gaussian(sam, uv); \n    return fd;   \n}\n//////////////////////////////////////////////////////////////////////////////\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}