{
    "Shader": {
        "info": {
            "date": "1517009121",
            "description": "Little raymarched clouds experiment with camera controls.",
            "flags": 0,
            "hasliked": 0,
            "id": "XljfWG",
            "likes": 7,
            "name": "Raymarched Clouds Experiment",
            "published": 3,
            "tags": [
                "raymarch",
                "clouds"
            ],
            "usePreview": 0,
            "username": "lukasxl",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "#define STEPS 512\n#define STEP_SIZE .05\n#define NUM_OCTAVES 5\n#define AREA_WIDTH 30.0\n#define AREA_HEIGHT 6.0\n\n// \t<www.shadertoy.com/view/XsX3zB>\n//\tby Nikita Miropolskiy\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nvec2 rot2D(vec2 p, float angle) \n{\n \n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return p * mat2(c,s,-s,c);\n    \n}\n\n// https://www.shadertoy.com/view/4sSBDG\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\nfloat snoise(vec3 p) \n{\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 x)\n{\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n    for (int i = 0; i < NUM_OCTAVES; ++i) \n    {\n        v += a * snoise(x - 0.05 * vec3(iTime, 0, iTime));\n        x = x * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nbool cube(vec3 ro, vec3 rd, out float tn, out float tf) \n{\n    ro -= vec3(0.0, AREA_HEIGHT * .5, 0.0);         \n\tvec3 size = vec3(AREA_WIDTH, AREA_HEIGHT, AREA_WIDTH);\n    \n\tvec3 m = 1./rd,\n         k = abs(m)*size,\n         a = -m*ro-k*.5, \n         b = a+k;\n    tn = max(max(a.x,a.y),a.z);\n    tf = min(min(b.x,b.y),b.z);\n\treturn tn < tf && tf > .0;\n}\n\nfloat getDensityAtPoint(vec3 pos)\n{\n    pos *= .2;\n\n    float alt = pos.y;\n\n    // Can't remember where this is from\n    float h = (1.0 - exp(-50.0 * alt)) * exp(-4.0 * alt);\n    float v = 4.0 * fbm(pos) * h;\n\n    if (v < 0.001)\n    {\n        v = 0.0;\n    }\n\n    return v;\n}\n\nfloat march(vec3 pos, int maxStep, float step, vec3 dir)\n{\n    float start, end;\n\tif(!cube(pos, dir, start, end))\n    {\n        return 0.0;\n    }\n        \n    float density = 0.0;\n\n    float depth = max(0.0, start);\n    \n    for (int i = 0; i < maxStep && depth < end; i++)\n    {\n        vec3 p = pos + depth * dir;\n\n        float d = 0.2 * getDensityAtPoint(p);\n\n        density += d;\n        if (density >= 1.0)\n        {\n            return density;\n        }\n\n        depth += step;  \n    }\n\n    return density;\n}\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nconst vec3 _LightDir = normalize(vec3(.2,0.4,.2));\nconst vec3 _LightColor = vec3(0.8,0.8,1.0);\nconst vec3 _WorldOrigin = vec3(0.0,-1.0,0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ----- Camera: https://www.shadertoy.com/view/MdKGzG\n    vec2 uv = (fragCoord.xy - iResolution.xy * .5) / iResolution.y;\n    vec2 m = .55 + 0.5 * ((iMouse.xy / iResolution.xy) * 2. - 1.);\n    \n    vec3 dir = vec3(uv, 1.);\n    dir.yz = rot2D(dir.yz,  90. * m.y);\n    dir.xz = rot2D(dir.xz, 180. * m.x);\n    // -----\n    \n    vec4 sky = 1.35 * vec4(.6,.7,.8, 1.0);\n    sky = sky - 0.5 * dir.y;\n    \n    vec4 finalColor = vec4(0.0);\n\t\n\tfloat start, end;\n\tif(cube(_WorldOrigin, dir, start, end))\n\t{    \n\t\tfloat depth = max(0.0, start);\n\t\t\n\t\tfor(int i = 0;i<STEPS && depth < end;i++)\n\t\t{\n\t\t\tvec3 p = _WorldOrigin + depth * dir;\n\t\t\t\n\t\t\tdepth += STEP_SIZE;\n\t\t\tdepth += random3(p).x * .01;\n\t\t\t\n\t\t\tfloat d = getDensityAtPoint(p);\n\t\t\t\n\t\t\tif (d > .2)\n\t\t\t{\n\t\t\t\tfloat totalDensity = d + march(p, 100, 0.01, dir);\n\t\t\t\ttotalDensity = saturate((totalDensity - 0.5) / 0.9);\n\n\t\t\t\tfloat shadow = march(p, 20, 0.1, _LightDir);\n\t\t\t\tfinalColor = vec4(3.0 * vec3(totalDensity) * _LightColor * max(.2, (1.0 - shadow)), 0.5 * totalDensity);\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n    \n\tfragColor = vec4(mix(finalColor.xyz, sky.xyz, 1.0 - finalColor.w), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}