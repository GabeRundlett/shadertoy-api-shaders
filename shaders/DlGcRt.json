{
    "Shader": {
        "info": {
            "date": "1700518381",
            "description": "this is my favorite way to define a Sierpinski triangle. Start at a vertex, and move 50% closer to a random other vertex.",
            "flags": 32,
            "hasliked": 0,
            "id": "DlGcRt",
            "likes": 3,
            "name": "Sierpinski Splat",
            "published": 3,
            "tags": [
                "fractal",
                "iterative",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "Real_NC",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord + fragCoord - iResolution.xy)/iResolution.y;\n    uv *= 0.8;\n    uv.y += 0.25;\n    \n    \n    fragColor = vec4(0);\n    \n    vec2 p;\n    for(int x = 0; x <= SPEED; x++)\n    {\n        for(int y = 0; y <= SPEED; y++)\n        {\n            p = texelFetch(iChannel0, ivec2(x,y), 0).xy;\n            if(distance(p, uv) <= 0.9/iResolution.y)\n            {\n                fragColor = vec4(1); \n            }\n        }\n    }\n    \n    if(iFrame != 0 && fragColor.x == 0.)\n    {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvec2[3] vertices = vec2[](\nvec2(0, 1),\nvec2(sq32, -0.5), \nvec2(-sq32, -0.5));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    if (max(fc.x, fc.y) > SPEED) discard;\n    if (iFrame == 0)\n    {\n        fragColor.xy = vec2(0,1);\n    }\n    else\n    {\n        fragColor = texelFetch(iChannel0, fc, 0);\n        fragColor.xy = mix(fragColor.xy, vertices[int(hash(vec3(fragCoord+iResolution.xy, iFrame))*3.)], 0.5);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SPEED 16\n#define sq32 sqrt(3.0)*0.5\n\nfloat hash(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}