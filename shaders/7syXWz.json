{
    "Shader": {
        "info": {
            "date": "1634514440",
            "description": "A variation of mherreshoff's implementation of Reiter's snowflake CA",
            "flags": 32,
            "hasliked": 0,
            "id": "7syXWz",
            "likes": 51,
            "name": "Frozen Window",
            "published": 3,
            "tags": [
                "refraction",
                "glass",
                "snowflake",
                "snow",
                "window",
                "ca",
                "crystal",
                "growth"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 1368
        },
        "renderpass": [
            {
                "code": "#define AA 2\n\n#define T(p) texture(iChannel0, mat2(1,0,.5,1) * mat2(1,0,0,1.25) * (p) / (1.25 * iResolution.xy)).x\n\nvec4 render(vec2 fragCoord)\n{\n    float cell  = T(fragCoord);\n    float cellx = T(fragCoord + vec2(1,0));\n    float celly = T(fragCoord + vec2(0,1));\n\n    vec4 fragColor = 0.75 * texture(iChannel2, vec3((fragCoord - iResolution.xy/2.)/iResolution.y, -0.5));\n    fragColor = mix(fragColor, vec4(1), smoothstep(0., 1., cell));\n    fragColor = mix(fragColor, vec4(0.25), smoothstep(1., 6., cell));\n\n    float focus = 6. - clamp(cell, 0., 4.);\n    vec2 grad = vec2(cellx, celly) - cell;\n    vec2 uv = (fragCoord + 100. * grad) / iResolution.xy;\n    vec3 ray = vec3(uv, -0.5) - vec3(0.5,0.1,0);\n    fragColor = textureLod(iChannel2, ray, focus);\n    fragColor = mix(fragColor, texture(iChannel3, ray), smoothstep(0., 0.9, cell) - smoothstep(0.9, 1., cell));\n    fragColor += 0.2 * dot(grad, vec2(1));\n    return fragColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    for (int i = 0; i < AA; i++) for (int j = 0; j < AA; j++)\n        fragColor += render(fragCoord + vec2(i,j)/2.) / float(AA*AA);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy, pw = 1./R, uv = U/R;\n    vec3 o = vec3(1,0,-1);\n#define N(swizzle) texture(iChannel0, uv+pw*o.swizzle)\n    vec4 v = N(yy);\n    vec4[6] n = vec4[6](N(xy), N(xx), N(yx), N(yz), N(zz), N(zy));\n    bool receptive = v.x >= 1.0;\n    for (int i = 0; i < 6; i++) {\n        receptive = receptive || (n[i].x >= 1.0); \n    }\n    O = vec4(v.x, float(receptive), 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy, pw = 1./R, uv = U/R;\n    vec3 o = vec3(1,0,-1);\n#define N(swizzle) texture(iChannel0, uv+pw*o.swizzle)\n    vec4 v = N(yy);\n    vec4[6] n = vec4[6](N(xy), N(xx), N(yx), N(yz), N(zz), N(zy));\n    float change;\n    change = (v.y == 1.0) ? GAMMA : -ALPHA*v.x;\n    float nrs = 0.0;\n    for (int i = 0; i < 6; i++) if(n[i].y == 0.0) nrs += n[i].x;\n    change += (nrs/6.0)*ALPHA;\n    O = vec4(v.x + change, 0,0,0);\n    if (iFrame < 10) {\n      O = vec4(BETA + 0.1 * (hash12(U) - 0.5),0,0,0);\n      if (floor(U) == vec2(0,0) || (hash22(U).x < 1e-3 && hash22(U).y < 1e-2))  O = vec4(1.1,0,0,0);\n    }\n    if (iFrame % 100 == 0 && hash23(vec3(U,iFrame)).x < 1e-3 && hash23(vec3(U,iFrame)).y < 1e-3) O.x++;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ALPHA mix(0.5, 1.5, uv.y) /* Diffusion rate. */\n#define BETA mix(0.4, 0.6, abs(2.*uv.x - 1.)) /* Initial water density. */\n#define GAMMA 0.003 /* External condensation. */\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}