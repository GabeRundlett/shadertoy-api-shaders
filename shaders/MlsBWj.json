{
    "Shader": {
        "info": {
            "date": "1513427117",
            "description": "I decided to start learning about raymarching with the most basic setup possible. One ray and one triangle in 2D... :P. The refraction is mouse enabled.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlsBWj",
            "likes": 36,
            "name": "The Dark Side Of The Moon",
            "published": 3,
            "tags": [
                "2d",
                "raymarch",
                "triangle",
                "refraction"
            ],
            "usePreview": 0,
            "username": "rigel",
            "viewed": 1628
        },
        "renderpass": [
            {
                "code": "// Author: Rigel rui@gil.com\n// licence: https://creativecommons.org/licenses/by/4.0/\n// link: https://www.shadertoy.com/view/MlsBWj\n\n/*\nI decided to start learning about the raymarching algorithm with the most basic\nsetup possible. A ray and a triangle in 2D. The goal was to shoot some rays,\nkick in some tires and get a feel on how the algorithm works. :)\n*/\n\n// fills a function near its boundary f(x) = 0, d = f(x), s = size, i = inverse \nfloat fill(float d, float s, float i) { return abs(smoothstep(s,.0,d) - i); }\n\n// a signed fistance function for a line segment\nfloat sdfSegment(vec2 uv, vec2 a, vec2 b) { \n\tuv-= a; b -= a; \n\treturn length(uv - b * clamp(dot(uv,b)/dot(b,b), 0.0, 1.0)); \n}\n\n// a signed distance function for an equilateral triangle\n// from iq -> https://www.shadertoy.com/view/Xl2yDW\nfloat sdfEqTri(  in vec2 p ) {\n    const float k = sqrt(3.0);\n    \n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    \n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    \n    p.x -= clamp( p.x, -2.0, 0.0 );\n    \n    return -length(p)*sign(p.y);\n}\n\n// the signed distance function for the scene. it's just a triangle.\nfloat sdfMap(vec2 uv) { return sdfEqTri(uv); }\n\n// to shoot a ray in a distance field, we need: ro = ray origin and \n// rd = ray direction. I use s = the sign of the distance function, because \n// I need it to make it work in positive space (outside the prism) \n// and negative space inside the prism\nvec2 shootRay(vec2 ro,vec2 rd, float s) {\n    // i need this \"nudge\" to escape the boundary, when I switch between\n    // positive and negative :/ \n\tro += rd*0.01;\n\tfor (int i=0; i<20; i++) {\n\t\tfloat dis = s*sdfMap(ro);\n\t\tif (dis < .0) break;\n\t\tro += rd*dis;\n\t}\n\treturn ro;\n}\n\n// to calculate the normal we \"sample\" the signed distance function in \n// 2 directions (2D). the difference will make the normal point away where\n// the function grows.\nvec2 normal(vec2 uv) {\n\tvec2 eps = vec2( 0.0005, 0.0 );\n\treturn normalize(\n\t\tvec2(sdfMap(uv+eps.xy) - sdfMap(uv-eps.xy),\n\t\t     sdfMap(uv+eps.yx) - sdfMap(uv-eps.yx)));\n}\n\n\n// https://en.wikipedia.org/wiki/Snell%27s_law\n// n1.sin(a1) = n2.sin(a2)\n// I ripped off the refraction formula from wikipedia. Thanks Wikipedia! :)\n// the refracted vector is a function of n = normal, d = the light direction\n// and r = the ratio of refractive indices (n1/n2), so for a light ray travelling \n// from vacuum (n1=1) to glass (n2=1.52) you get r = 1./1.52, and the inverse if\n// the light ray is travelling from glass to vacuum (1.52/1.).\n// note: this formula is incomplete ! For a certain critical angle, there is no\n// refraction but only reflection, so the returned vector is invalid. use at\n// your own risk :)\nvec2 refraction(vec2 n, vec2 d, float r ) {\n\t// well I just realised after I posted this, that GLSL already has a \n    // refract function. :P. That will teach me to RTFM first...\n    // I will just leave this here for reference...\n    \n    //float c = dot(-n, d);\n\t//return r*d + (r*c - sqrt(1.-(r*r) * (1.-(c*c)))) * n;\n    return refract(d,n,r);\n}\n\n// from Alan Zuconni -> https://www.shadertoy.com/view/ls2Bz1\n// a palette that simulates the light spectrum\n// w: wavelength [400, 700]\tnm\nvec3 spectrum (float w) {\n\tfloat x = clamp((w - 400.0)/ 300.0, 0., 1.);\n\n\tconst vec3 cs = vec3(3.54541723, 2.86670055, 2.29421995);\n\tconst vec3 xs = vec3(0.69548916, 0.49416934, 0.28269708);\n\tconst vec3 ys = vec3(0.02320775, 0.15936245, 0.53520021);\n\t\n\tvec3 xx = cs * (x - xs);\n\treturn clamp((vec3(1.) - xx * xx)-ys, 0., 1.);\n}\n\n// setting up the scene\nvec3 scene(vec2 uv, vec2 ms) {\n\t\n    // the ray origin will be the mouse position\n\tvec2 ro = ms;\n\t// and the ray direction will point a coordinate (.0,.5)\n    float a = atan(ro.y-.5,ro.x)+radians(180.);\n\tvec2 rd = vec2(cos(a),sin(a));\n\t\n    // setting the color of the background\n\tvec3 color = vec3(.0,.0,.3)*fill(abs(-uv.y+uv.x),4.,1.);\n    \n    // a few variables to set up the triangular prism\n\tfloat triSdf = sdfMap(uv);\n\tfloat triMsk = fill(triSdf,.05,1.);\n\tfloat prism = (1.-abs(triSdf)*10.)*(1.-triMsk);\t\n\t\n    // shooting the ray in positive space until it hits the prism.\n\tvec2 hit = shootRay(ro,rd,1.);\n    // coloring the initial white light ray\n\tcolor = mix(color,vec3(1.),fill(sdfSegment(uv,ro,hit),.05,.0));\n\t\n    // when the ray hits the prism it will get refracted.\n    // each wavelength of light has a different refractive indice\n    // so I shoot 9 rays, each with a different indice and wavelength\n\tfor (int i=1; i<10; i++) {\n        \n        // calculate the refractive indice. \n        // I just spread light around 1.52 the value for common glass.\n\t\tfloat f = float(i) * 0.05;\n\t\tfloat ridx = 1.30 + f;\n\t\tvec2 rdir = rd;\n        \n        // calculate the direction of the refraction\n\t\trdir = refraction(normal(hit), rdir, 1./ridx);\n        // and use it to shoot a ray in negative space inside the prism\n\t\tvec2 hit2 = shootRay(hit,rdir,-1.);\n        \n        // when the ray hits the other side of the prism, it will get refracted\n        // again, but this time I invert the normal, because I'm in negative space\n        // an invert the indice because the light is going from glass to vacuum.\n\t\trdir = refraction(-normal(hit2), rdir, ridx/1.);\n        // for the last part I don't need to shoot a ray, because it will \n        // not hit anything, so I just send away it far enough...\n\t\tvec2 hit3 = hit2+rdir*5.;//shootRay(hit2,rdir,1.);\n\n        // coloring the ray inside the prism with it's pectrum\n\t\tfloat glassRay = (1.-triMsk)*fill(sdfSegment(uv,hit,hit2),.1,.0);\n\t\tcolor = clamp(color+spectrum(700.-f*600.)*glassRay*.5 ,.0,1.); \n\t\t\n        // coloring the ray outside the prism with it's spectrum\n\t\tfloat lightRay = triMsk*fill(sdfSegment(uv,hit2,hit3),.15,.0);\n\t\tcolor = clamp(color+spectrum(700.-f*600.)*lightRay,.0,1.);\n\t}\n    \n\t// the prism\n    color = mix(color,vec3(.7,.7,.9),prism);\n\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy - iResolution.xy *.5)/ iResolution.y;\n    vec2 ms = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n\tfragColor = vec4( scene(uv * 4., ms * 4.), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}