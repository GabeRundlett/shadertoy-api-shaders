{
    "Shader": {
        "info": {
            "date": "1375714033",
            "description": "Wanted to make a digital led clock.  \nUp key toggles AM/PM mode, Down key toggles red green.  Left is microwavestyle, Right is off leds shown.",
            "flags": 16,
            "hasliked": 0,
            "id": "MdfGzf",
            "likes": 67,
            "name": "Digital clock",
            "published": 3,
            "tags": [
                "time",
                "clock",
                "led",
                "7segment"
            ],
            "usePreview": 0,
            "username": "Andre",
            "viewed": 4168
        },
        "renderpass": [
            {
                "code": "// cmarangu has linked all 7 segments in his comments\n// https://www.shadertoy.com/view/3dtSRj\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\n\nbool showMatrix = false;\nbool showOff = false;\n\nfloat segment(vec2 uv, bool On)\n{\n\tif (!On && !showOff)\n\t\treturn 0.0;\n\t\n\tfloat seg = (1.0-smoothstep(0.08,0.09+float(On)*0.02,abs(uv.x)))*\n\t\t\t    (1.0-smoothstep(0.46,0.47+float(On)*0.02,abs(uv.y)+abs(uv.x)));\n\t\n    //Fiddle with lights and matrix\n\t//uv.x += sin(iTime*60.0*6.26)/14.0;\n\t//uv.y += cos(iTime*60.0*6.26)/14.0;\n\t\n\t//led like brightness\n\tif (On)\n\t\tseg *= (1.0-length(uv*vec2(3.8,0.9)));//-sin(iTime*25.0*6.26)*0.04;\n\telse\n\t\tseg *= -(0.05+length(uv*vec2(0.2,0.1)));\n\t\n\treturn seg;\n}\n\nfloat sevenSegment(vec2 uv,int num)\n{\n\tfloat seg= 0.0;\n    seg += segment(uv.yx+vec2(-1.0, 0.0),num!=-1 && num!=1 && num!=4                    );\n\tseg += segment(uv.xy+vec2(-0.5,-0.5),num!=-1 && num!=1 && num!=2 && num!=3 && num!=7);\n\tseg += segment(uv.xy+vec2( 0.5,-0.5),num!=-1 && num!=5 && num!=6                    );\n   \tseg += segment(uv.yx+vec2( 0.0, 0.0),num!=-1 && num!=0 && num!=1 && num!=7          );\n\tseg += segment(uv.xy+vec2(-0.5, 0.5),num==0 || num==2 || num==6 || num==8           );\n\tseg += segment(uv.xy+vec2( 0.5, 0.5),num!=-1 && num!=2                              );\n    seg += segment(uv.yx+vec2( 1.0, 0.0),num!=-1 && num!=1 && num!=4 && num!=7          );\n\t\n\treturn seg;\n}\n\nfloat showNum(vec2 uv,int nr, bool zeroTrim)\n{\n\t//Speed optimization, leave if pixel is not in segment\n\tif (abs(uv.x)>1.5 || abs(uv.y)>1.2)\n\t\treturn 0.0;\n\t\n\tfloat seg= 0.0;\n\tif (uv.x>0.0)\n\t{\n\t\tnr /= 10;\n\t\tif (nr==0 && zeroTrim)\n\t\t\tnr = -1;\n\t\tseg += sevenSegment(uv+vec2(-0.75,0.0),nr);\n\t}\n\telse\n\t\tseg += sevenSegment(uv+vec2( 0.75,0.0),int(mod(float(nr),10.0)));\n\t\n\treturn seg;\n}\n\nfloat dots(vec2 uv)\n{\n\tfloat seg = 0.0;\n\tuv.y -= 0.5;\n\tseg += (1.0-smoothstep(0.11,0.13,length(uv))) * (1.0-length(uv)*2.0);\n\tuv.y += 1.0;\n\tseg += (1.0-smoothstep(0.11,0.13,length(uv))) * (1.0-length(uv)*2.0);\n\treturn seg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tbool ampm = texture(iChannel0,vec2(KEY_UP,0.75)).r >0.5;\n\tbool isGreen = texture(iChannel0,vec2(KEY_DOWN,0.75)).r >0.5;\n\tshowMatrix = texture(iChannel0,vec2(KEY_LEFT,0.75)).r >0.5;\n\tshowOff = texture(iChannel0,vec2(KEY_RIGHT,0.75)).r >0.5;\n\t\n\tvec2 uv = (fragCoord.xy-0.5*iResolution.xy) /\n \t\t       min(iResolution.x,iResolution.y);\n\t\n\tfloat timeOffset = 0.0;\n\tif (iResolution.x>iResolution.y)\n\t{\n\t\tuv *= 6.0;\n\t}\n\telse\n\t{\n\t\t//uv *= 12.0;\n\t\t// Many clocks with different time + zoom in on the right one\n\t\tuv *= 70.0+sin(iTime*0.0628)*58.0;\n\t\t\n\t\tuv += vec2(5.5,2.5);\n\t\tvec2 offset = vec2(floor(uv.x/11.0),\n\t\t\t\t\t\t   floor(uv.y/5.0 ));\n\t\tif (length(offset)>0.0)\n\t\t\ttimeOffset = (offset.y*163.13+offset.x*13.23)+mod(iTime,1.0);\n\t\telse\n\t\t\ttimeOffset = 0.0;\n\t\t\t\t\t\t\t\t\n\t\tuv.x = mod(uv.x,11.0)-5.5;\n\t\tuv.y = mod(uv.y, 5.0)-2.5;\n\t}\n\t\n\tuv.x *= -1.0;\n\tuv.x += uv.y/12.0;\n\t//wobble\n\t//uv.x += sin(uv.y*3.0+iTime*14.0)/25.0;\n\t//uv.y += cos(uv.x*3.0+iTime*14.0)/25.0;\n    uv.x += 3.5;\n\tfloat seg = 0.0;\n\n\tfloat timeSecs = iDate.w+timeOffset;\n\t\n\tseg += showNum(uv,int(mod(timeSecs,60.0)),false);\n\t\n\ttimeSecs = floor(timeSecs/60.0);\n\t\n    uv.x -= 1.75;\n\n\tseg += dots(uv);\n\t\n    uv.x -= 1.75;\n\t\n\tseg += showNum(uv,int(mod(timeSecs,60.0)),false);\n\t\n\ttimeSecs = floor(timeSecs/60.0);\n\tif (ampm)\n\t{\n\t\tif (timeSecs>12.0)\n\t\t  timeSecs = mod(timeSecs,12.0);\n\t}\n\t\n    uv.x -= 1.75;\n\t\n\tseg += dots(uv);\n\t\n    uv.x -= 1.75;\n\tseg += showNum(uv,int(mod(timeSecs,60.0)),true);\n\t\n\t// matrix over segment\n\tif (showMatrix)\n\t{\n\t\tseg *= 0.8+0.2*smoothstep(0.02,0.04,mod(uv.y+uv.x,0.06025));\n\t\t//seg *= 0.8+0.2*smoothstep(0.02,0.04,mod(uv.y-uv.x,0.06025));\n\t}\n\t\n\tif (seg<0.0)\n\t{\n\t\tseg = -seg;;\n\t\tfragColor = vec4(seg,seg,seg,1.0);\n\t}\n\telse\n\t\tif (showMatrix)\n\t\t\tif (isGreen)\n\t\t\t\tfragColor = vec4(0.0,seg,seg*0.5,1.0);\n\t\t\telse\n\t\t\t\tfragColor = vec4(0.0,seg*0.8,seg,1.0);\n\t\telse\n\t\t\tif (isGreen)\n\t\t\t\tfragColor = vec4(0.0,seg,0.0,1.0);\n\t\t\telse\n\t\t\t\tfragColor = vec4(seg,0.0,0.0,1.0);\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}