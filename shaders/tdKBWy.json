{
    "Shader": {
        "info": {
            "date": "1607901279",
            "description": "I just had to whip up a holiday shader and I am very proud of the final result! Happy holidays and merry christmas!",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKBWy",
            "likes": 17,
            "name": "Holiday Greetings!",
            "published": 3,
            "tags": [
                "christmas",
                "winter",
                "peanuts",
                "snoopy",
                "shaderart",
                "holidays",
                "charliebrown",
                "happyholidays",
                "greeting"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "/*\nBig thank you to Inigo Quilez's 2D distance function and smooth minimum articles!\n2D distance functions article: https://iquilezles.org/articles/distfunctions2d\nSmooth minimum article: https://iquilezles.org/articles/smin\nThe smin(), ellipse(), and line() functions are taken from them.\n*/\n\nconst float SIN_20  =  0.34202014332;\nconst float COS_20  =  0.93969262078;\n\nconst float SIN_40  =  0.64278760968;\nconst float COS_40  =  0.76604444311;\n\nconst float SIN_150 =  0.50000000000;\nconst float COS_150 = -0.86602540378;\n\nconst float SIN_315 = -0.70710678118;\nconst float COS_315 =  0.70710678118;\n\nfloat noise(in float x) {\n    return fract(sin(x * 12.5673) * 573.123);\n}\n\nfloat snoise(in float x) {\n    const float r = 2.735;\n    x += 4657.247;\n    float c = floor(x / r) * r;\n    float l = fract(x / r); l *= l * (3.0 - 2.0 * l);\n    return mix(noise(c), noise(c + r), l);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat ellipse(in vec2 p, in vec2 r) {\n    float k0 = length(p / r);\n    float k1 = length(p / (r * r));\n    return k0 * (k0 - 1.0) / k1;\n}\n\nfloat isosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x), p.y += h / 3.0;\n    vec2 pr = p - vec2(b, 0.0), tr = vec2(-b, h);\n    vec2 be = p - vec2(b * clamp(p.x / b, 0.0, 1.0), 0.0);\n    vec2 re = pr - tr * clamp(dot(pr, tr) / dot(tr, tr), 0.0, 1.0);\n    return sqrt(min(dot(be, be), dot(re, re))) * sign(p.x - b / h * (h - p.y) * sign(p.y));\n}\n\nfloat line(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.25, 0.25, 1.0);\n\n    // Snowy hill\n    vec2 hillUV = uv;\n    hillUV.x *= 0.3;\n    hillUV.y += 0.05;\n    float hill = hillUV.y + hillUV.x * hillUV.x;\n    color = mix(color, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, hill));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(hill)));\n\n    // Tree trunk\n    vec2 trunkUV = uv;\n    trunkUV.x += 0.4;\n    float trunk = max(abs(trunkUV.x) - 0.04, abs(trunkUV.y) - 0.2);\n    color = mix(color, vec3(0.6, 0.3, 0.0), smoothstep(unit, 0.0, trunk));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(trunk)));\n\n    // Tree branches\n    vec2 treeUV = uv;\n    treeUV -= vec2(-0.4, 0.07);\n    float treeUnit = unit;\n    for (int i=0; i < 3; i++) {\n        float branches = isosceles(treeUV, 0.25, 0.3);\n        color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(treeUnit, 0.0, branches));\n        color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(treeUnit, 0.0, abs(branches)));\n        treeUV.y -= 0.15;\n        treeUV *= 1.5;\n        treeUnit *= 1.5;\n    }\n\n    // Snowman body\n    vec2 snowmanUV = uv - vec2(0.1, -0.2);\n    float snowmanDist = 1000000.0;\n    float scale = 1.0;\n    for (int i=0; i < 3; i++) {\n        float snowball = (length(snowmanUV) - 0.125) / scale;\n        snowmanDist = min(snowmanDist, snowball);\n        snowmanUV.y -= 0.175;\n        snowmanUV *= 1.25;\n        scale *= 1.25;\n    }\n\n    color = mix(color, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, snowmanDist));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(snowmanDist)));\n\n    // Snowman nose\n    snowmanUV = uv - vec2(0.1, 0.085);\n    snowmanUV.x = abs(snowmanUV.x);\n    snowmanUV.y *= -1.0;\n    float nose = isosceles(snowmanUV, 0.015, 0.06);\n    color = mix(color, vec3(1.0, 0.6, 0.0), smoothstep(unit, 0.0, nose));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(nose)));\n\n    // Snowman eyes\n    float eyes = length(snowmanUV - vec2(0.03, -0.05)) - 0.01;\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, eyes));\n\n    // Snowman buttons\n    float bbox = abs(snowmanUV.y - 0.15) - 0.1;\n    snowmanUV.y -= 0.275;\n    snowmanUV.y = mod(snowmanUV.y, 0.08) - 0.04;\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, max(length(snowmanUV) - 0.01, bbox)));\n\n    // Charlie Brown's legs\n    vec2 legsUV = uv - vec2(0.57, -0.15);\n    legsUV.x = abs(legsUV.x);\n    legsUV.x -= 0.06;\n\n    float legs = max(abs(legsUV.x) - 0.03, abs(legsUV.y) - 0.1);\n    color = mix(color, vec3(0.9, 0.702, 0.5), smoothstep(unit, 0.0, legs));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(legs)));\n\n    // Charlie Brown's pants\n    float pants = max(abs(legsUV.x) - 0.045, abs(legsUV.y) - 0.04);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, pants));\n\n    // Charlie Brown's shoes\n    vec2 shoesUV = uv - vec2(0.55, -0.25);\n    shoesUV.x = abs(shoesUV.x) - 0.06;\n    bbox = -(shoesUV.y + 0.01);\n    float shoes = max(ellipse(shoesUV, vec2(0.055, 0.04)), bbox);\n    color = mix(color, vec3(0.8, 0.5, 0.0), smoothstep(unit, 0.0, shoes));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(shoes)));\n\n    // Charlie Brown's arms\n    vec2 armsUV = uv;\n    armsUV -= vec2(0.565, -0.08);\n\n    armsUV.x = abs(armsUV.x);\n    armsUV *= mat2(COS_20, SIN_20, -SIN_20, COS_20);\n    armsUV.x -= 0.09 + 0.05 * sin(8.0 * armsUV.y + 1.57);\n\n    float arms = line(armsUV, vec2(0.0, 0.1), vec2(0.0, -0.1)) - 0.0275;\n    color = mix(color, vec3(0.9, 0.702, 0.5), smoothstep(unit, 0.0, arms));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(arms)));\n\n    // Charlie Brown's shirt\n    vec2 shirtUV = uv - vec2(0.565, -0.09);\n    bbox = -(shirtUV.y + 0.075);\n    float shirt = max(ellipse(shirtUV, vec2(0.125, 0.2)), bbox);\n\n    // Charlie Brown's neck\n    vec2 neckUV = shirtUV;\n    neckUV.y -= 0.2;\n    float neck = max(abs(neckUV.x) - 0.035, abs(neckUV.y) - 0.05);\n    color = mix(color, vec3(0.9, 0.702, 0.5), smoothstep(unit, 0.0, neck));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(neck)));\n\n    // Charlie Brown's head\n    vec2 headUV = shirtUV;\n    headUV.y -= 0.32;\n    float head = length(headUV) - 0.1;\n\n    // Charlie Brown's ears\n    vec2 earsUV = headUV;\n    earsUV.x = abs(earsUV.x) - 0.095;\n    float ears = length(earsUV) - 0.025;\n    head = min(head, ears);\n\n    color = mix(color, vec3(0.9, 0.702, 0.5), smoothstep(unit, 0.0, head));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(head)));\n\n    // Charlie Brown's eyes\n    vec2 eyesUV = headUV;\n    eyesUV.y -= 0.02;\n    eyesUV.x = abs(eyesUV.x) - 0.04;\n    eyes = length(eyesUV) - 0.01;\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, eyes));\n\n    // Charlie Brown's hair\n    vec2 hairUV = eyesUV;\n    hairUV -= vec2(-0.0175, 0.05);\n    bbox = hairUV.y;\n    float hair = max(abs(ellipse(hairUV, vec2(0.0225, 0.02))), bbox);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, hair));\n\n    // Charlie Brown's nose\n    vec2 noseUV = headUV;\n    noseUV.y += 0.015;\n    nose = max(abs(length(noseUV) - 0.015), -dot(noseUV, vec2(COS_315, SIN_315)) - 0.004);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, nose));\n\n    // Charlie Brown's mouth\n    vec2 mouthUV = headUV;\n    mouthUV.y += 0.04;\n    float mouth = max(abs(ellipse(mouthUV, vec2(0.045, 0.03))), noseUV.y + 0.025);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, mouth));\n\n    // Charlie Brown's sleeves\n    vec2 sleevesUV = shirtUV;\n    sleevesUV.y -= 0.135;\n    sleevesUV.x = abs(sleevesUV.x) - 0.08;\n    sleevesUV *= mat2(COS_40, SIN_40, -SIN_40, COS_40);\n\n    bbox = -(sleevesUV.y + 0.04);\n    float sleeves = max(ellipse(sleevesUV, vec2(0.04, 0.08)), bbox);\n    shirt = smin(shirt, sleeves, 0.01);\n\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, shirt));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(shirt)));\n\n    // Black zigzag masked against the shirt\n    shirtUV.y -= 0.01;\n    shirtUV.y *= 8.0;\n    float zigzag = abs(shirtUV.y - abs(round(fract(shirtUV.x * 10.0)) - fract(10.0 * shirtUV.x)));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, max((zigzag - 0.2) / 8.0, shirt)));\n\n    // Snoopy's body\n    vec2 bodyUV = uv;\n    bodyUV += vec2(0.2, 0.35);\n    float body = ellipse(bodyUV, vec2(0.08, 0.06));\n\n    // Snoopy's arm\n    vec2 armUV = bodyUV;\n    armUV *= mat2(COS_20, -SIN_20, SIN_20, COS_20);\n    armUV.x -= 0.02;\n    armUV.y += 0.02 * sin(armUV.x * 15.0 + 1.57);\n    float arm = line(armUV, vec2(-0.04, 0.0), vec2(0.06, 0.0)) - 0.02;\n\n    // Snoopy's left leg\n    vec2 leftLegUV = bodyUV;\n    leftLegUV -= vec2(0.075, 0.01);\n    float leftLeg = max(max(abs(leftLegUV.x) - 0.05, abs(leftLegUV.y) - 0.0125), -body);\n\n    // Snoopy's left foot\n    leftLegUV -= vec2(0.05, 0.01);\n    float leftFoot = ellipse(leftLegUV, vec2(0.02, 0.045));\n    leftLeg = min(leftLeg, leftFoot);\n\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(leftLeg)));\n\n    // Snoopy's right leg\n    vec2 rightLegUV = leftLegUV;\n    rightLegUV += 0.03;\n    float rightLeg = max(max(abs(rightLegUV.x) - 0.03, abs(rightLegUV.y) - 0.0125), -body);\n\n    // Snoopy's right foot\n    rightLegUV -= vec2(0.04, 0.01);\n    float rightFoot = ellipse(rightLegUV, vec2(0.02, 0.045));\n    rightLeg = min(rightLeg, rightFoot);\n\n    color = mix(color, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, rightLeg));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(rightLeg)));\n\n    // Snoopy's neck\n    bodyUV.x += 0.04;\n    neck = max(abs(bodyUV.x) - 0.075, abs(bodyUV.y) - 0.015);\n    body = smin(body, neck, 0.02);\n\n    // Snoopy's collar\n    vec2 collarUV = bodyUV;\n    collarUV.x += 0.055;\n    float collar = max(abs(collarUV.x) - 0.005, abs(collarUV.y) - 0.025);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, collar));\n\n    // Snoopy's head\n    bodyUV += vec2(0.12, 0.01);\n    head = length(bodyUV) - 0.05;\n    body = smin(body, head, 0.02);\n\n    // Snoopy's snout\n    bodyUV -= vec2(0.01, 0.075);\n    float snout = length(bodyUV) - 0.03;\n    body = smin(body, snout, 0.05);\n\n    // Snoopy's mouth\n    mouthUV = bodyUV;\n    mouthUV -= vec2(0.018, -0.03);\n    bbox = dot(mouthUV, vec2(COS_150, SIN_150));\n    mouth = max(abs(ellipse(mouthUV, vec2(0.015, 0.03))), bbox);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, mouth));\n\n    // Only an outline is drawn because the snow provides the inside :P\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(body)));\n\n    // Snoopy's arm is drawn after the body to properly layer it onto the scene\n    color = mix(color, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, arm));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(arm)));\n\n    // Snoopy's right ear\n    earsUV = bodyUV;\n    earsUV += vec2(0.05, 0.125);\n    earsUV *= mat2(COS_40, -SIN_40, SIN_40, COS_40);\n    float rightEar = ellipse(earsUV, vec2(0.02, 0.05));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, rightEar));\n\n    // Snoopy's left ear\n    earsUV -= vec2(-0.04, 0.03);\n    earsUV *= mat2(COS_40, SIN_40, -SIN_40, COS_40);\n    earsUV.x += 0.025;\n    earsUV = earsUV.yx;\n    float leftEar = max(ellipse(earsUV, vec2(0.02, 0.05)), -body);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, leftEar));\n\n    // Snoopy's eye\n    bodyUV += vec2(0.03, 0.06);\n    float eye = length(bodyUV) - 0.005;\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, eye));\n\n    // Snoopy's nose\n    bodyUV -= vec2(0.03, 0.095);\n    nose = max(length(bodyUV) - 0.01, -snout);\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, nose));\n\n    // Snowflakes\n    float screenRight = 0.5 * iResolution.x / iResolution.y;\n    float snowflakesDist = 1000000.0;\n    for (float column=-screenRight; column < screenRight; column += 0.2) {\n        vec2 columnUV = uv - vec2(column, 0.0);\n        columnUV.y += snoise(floor(column / 0.2)) * iTime;\n        columnUV.x += 0.2 * sin(floor(columnUV.y / 0.2) + iTime);\n        columnUV.y = mod(columnUV.y, 0.2) - 0.1;\n        snowflakesDist = min(snowflakesDist, length(columnUV) - 0.015);\n    }\n\n    color = mix(color, vec3(1.0, 1.0, 1.0), smoothstep(unit, 0.0, snowflakesDist));\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(unit, 0.0, abs(snowflakesDist)));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}