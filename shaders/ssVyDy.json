{
    "Shader": {
        "info": {
            "date": "1655568486",
            "description": "Procedural exact bouncing equation ( cf https://www.desmos.com/calculator/ldosgtfifk ).\nfalse-3D variant of https://www.shadertoy.com/view/NsKyRd\n\nWIP. hard to see the depth.\nlong term purpose: repro https://twitter.com/Bbbn192/status/1511007901963403272",
            "flags": 0,
            "hasliked": 0,
            "id": "ssVyDy",
            "likes": 22,
            "name": "infinite bouncing balls 3D",
            "published": 3,
            "tags": [
                "2d",
                "gif",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// false-3D variant of https://www.shadertoy.com/view/NsKyRd\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float k=.85, g=10., L = 2.*sqrt(4./g); // physics parameters g/2 H=4.\n    vec2  R = iResolution.xy,\n          U = 5.*( u+u - R ) / R.y, V, P;              // normalize coordinates\n    float v, m, a= iMouse.z > 0. ? 3.*(iMouse.y/R.y-.5) : .5;\n    O = vec4(vec3(.8), U.y/10.+.5 );\n    for( float z = 7.; z > -8.; z-- ) {\n        V = U - z; \n        V *= mat2( 1, 0, sin(a), cos(a) ) /cos(a) ;              // isometric projection\n        V.x += 5.*fract(1e4*sin(1e4*z));\n        float t = fract(iTime),\n              x = ( floor(V.x-t) + t ) / L,                      // action domain\n              i = floor( log2( 1. - (1.-k)*(x+.5) ) / log2(k) ), // bounce number\n              K = pow(k,i),\n              X = x -  (1.-K) / (1.-k) + .5,                     // start of bounce i\n              h = x < 0. ?  2. \n                : x > 1./(1.-k) - .5 ? -2.\n                         : -2. +  L*L*g* X*( K - X );            // bounce trajectory\n                         \n       P =   vec2(fract(V.x-t)-.5, V.y+2.)                       // local sphere shadow\n           * mat2(cos(a),0,-sin(a),1); P.y/=.5;                  // back-projection\n       v = (h+2.)/4.;\n       m = clamp( 1. - R.y/(15.+v*80.)*( length(P+vec2(0,.6)) -.25 ) ,0.,1.);       // shadow mask\n       O.rgb = mix(O.rgb, vec3(.6*v), m );                       // blend shasow\n       \n       P =  vec2(fract(V.x-t)-.5, V.y-h)                         // local sphere\n          * mat2(cos(a),0,-sin(a),1);                            // back-projection\n       m = clamp( 1. - R.y/15.*( length(P) -.32 ) ,0.,1.);       // mask\n       O = mix(O, \n               vec4( vec3(1.-2.*length(P),0,0)                       // blend sphere\n                     + max(0., 1.-R.y/50.*( length(P-.12) -.05 )),\n                     (U.y-h+2.)/20.+.5 ),\n               m );\n    }\n//  O += vec4(0,0,exp(-3.*(1.-O.w)),0);\n    O = mix(O, vec4(.6,.8,1,1), exp(-2.*max(0.,1.-O.w))); // fog\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}