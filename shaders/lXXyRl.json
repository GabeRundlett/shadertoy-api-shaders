{
    "Shader": {
        "info": {
            "date": "1726540317",
            "description": "I redid my expansive FBM experiments and made a smaller one with fewer options, all CC0 so copyright free, enjoy! Made by Rik Riesmeijer.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXXyRl",
            "likes": 0,
            "name": "Simple Monochrome FBM By RikR",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "fbm",
                "brownian",
                "motion",
                "cc0",
                "short",
                "free",
                "copyright",
                "concise"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 50
        },
        "renderpass": [
            {
                "code": "int  ih(int  x) { return (0x37354953 ^ x) * x * (x ^ 0x28433481); }         // Integer noise 1d to 1d.\nfloat h(vec2 v) { return float(ih(int(v.x) * ih(int(v.y)))) / 43e8 + 0.5; } // Float noise 2d to 1d.\n\nfloat fbm(vec2 v, float t) {                                                // FBM (CC0: Copyright-Free code).\n    float r, c, d, e = 2.0; vec2 s;                                         // Caching variables.\n    for(int i = 0; i++ < 5; e += e) {                                       // Main loop.\n        v *= mat2(0.8, -0.6, 0.6, 0.8);                                     // Pythagorean matrix.\n        vec4 b = vec4(floor(s = v * e), ceil(s));                           // Interpolate values.\n        vec2 m = smoothstep(0.0, 1.0, fract(s));                            // Smoothen interpolations.\n        c = mix(h(b.xy), h(b.zy), m.x);                                     // Now mix first direction.\n        d = mix(h(b.xw), h(b.zw), m.x);                                     // Mix the component one.\n        r = mix(c, d, m.y) / (e - 2.0 / e) + r;                             // Add this term to result sum.\n    }                                                                       // End of main loop.\n    return r * 0.5;                                                         // Normalize sum and yield.\n}                                                                           // Made by Rik Riesmeijer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {                   // Demo showing the above FBM.\n    fragCoord = 5.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y;   // Normalize UVs.\n    fragColor = vec4(fbm(fragCoord, iTime * 0.3));                          // Color with FBM function.\n}                                                                           // All animations are just demo.\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}