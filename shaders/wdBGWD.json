{
    "Shader": {
        "info": {
            "date": "1548860481",
            "description": "This is my part for \"Mist\" by Ohno, a 4 kilobytes demo released at the Cookie 2018.\n\npouet: http://www.pouet.net/prod.php?which=79350\nyoutube: https://www.youtube.com/watch?v=UUtU3WVB144\n\nCode/Graphics: Flopine\nCode/Graphics: Lsdlive\nMusic: Triace",
            "flags": 64,
            "hasliked": 0,
            "id": "wdBGWD",
            "likes": 184,
            "name": "Mist by Ohno! - part2",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "4k",
                "demoscene"
            ],
            "usePreview": 1,
            "username": "lsdlive",
            "viewed": 12058
        },
        "renderpass": [
            {
                "code": "/*\n\n@lsdlive\nCC-BY-NC-SA\n\nThis is my part for \"Mist\" by Ohno, a 4 kilobytes demo released at the Cookie 2018.\n\npouet: http://www.pouet.net/prod.php?which=79350\nyoutube: https://www.youtube.com/watch?v=UUtU3WVB144\n\nCode/Graphics: Flopine\nCode/Graphics: Lsdlive\nMusic: Triace from Desire\n\nPart1 from Flopine here: https://www.shadertoy.com/view/tdBGWD\n\nInformation about my process for making this demo here:\nhttps://twitter.com/lsdlive/status/1090627411379716096\n\n*/\n\nfloat time = 0.;\n\nfloat random(vec2 uv) {\n\treturn fract(sin(dot(uv, vec2(12.2544, 35.1571))) * 5418.548416);\n}\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\t// Explained here why you still get an anti-clockwise rotation with this matrix:\n\t// https://www.shadertoy.com/view/wdB3DW\n\treturn mat2(c, s, -s, c);\n}\n\nvec3 re(vec3 p, float d) {\n\treturn mod(p - d * .5, d) - d * .5;\n}\n\nvoid amod2(inout vec2 p, float d) {\n\t// should be atan(p.y, p.x) but I had this function for a while\n\t// and putting parameters like this add a PI/6 rotation.\n\tfloat a = re(vec3(atan(p.x, p.y)), d).x; \n\tp = vec2(cos(a), sin(a)) * length(p);\n}\n\nvoid mo(inout vec2 p, vec2 d) {\n\tp = abs(p) - d;\n\tif (p.y > p.x)p = p.yx;\n}\n\nvec3 get_cam(vec3 ro, vec3 ta, vec2 uv) {\n\tvec3 fwd = normalize(ta - ro);\n\tvec3 right = normalize(cross(fwd, vec3(0, 1, 0)));\n\n\t//vec3 right = normalize(vec3(-fwd.z, 0, fwd.x));\n\treturn normalize(fwd + right * uv.x + cross(right, fwd) * uv.y);\n}\n\n// signed cube\n// https://iquilezles.org/articles/distfunctions\nfloat cube(vec3 p, vec3 b) {\n\tb = abs(p) - b;\n\treturn min(max(b.x, max(b.y, b.z)), 0.) + length(max(b, 0.));\n}\n\n// iq's signed cross sc() - https://iquilezles.org/articles/menger\nfloat sc(vec3 p, float d) {\n\tp = abs(p);\n\tp = max(p, p.yzx);\n\treturn min(p.x, min(p.y, p.z)) - d;\n}\n\n\n////////////////////////// SHADER LSDLIVE //////////////////////////\n\nfloat prim(vec3 p) {\n\n\tp.xy *= r2d(3.14 * .5 + p.z * .1); // .1\n\n\tamod2(p.xy, 6.28 / 3.); // 3.\n\tp.x = abs(p.x) - 9.; // 9.\n\n\tp.xy *= r2d(p.z * .2); // .2\n\n\tamod2(p.xy, 6.28 /\n\t\tmix(\n\t\t\tmix(10., 5., smoothstep(59.5, 61.5, time)), // T4\n\t\t\t3.,\n\t\t\tsmoothstep(77.5, 77.75, time)) // T8\n\t); // 3.\n\tmo(p.xy, vec2(2.)); // 2.\n\n\tp.x = abs(p.x) - .6; // .6\n\treturn length(p.xy) - .2;//- smoothstep(80., 87., time)*(.5+.5*sin(time)); // .2\n}\n\nfloat g = 0.; // glow\nfloat de(vec3 p) {\n\n\tif (time > 109.2) {\n\t\tmo(p.xy, vec2(.2));\n\t\tp.x -= 10.;\n\t}\n\n\tif (time > 101.4) {\n\t\tp.xy *= r2d(time*.2);\n\t}\n\n\tif (time > 106.5) {\n\t\tmo(p.xy, vec2(5. + sin(time)*3.*cos(time*.5), 0.));\n\t}\n\n\tif (time > 104.) {\n\t\tamod2(p.xy, 6.28 / 3.);\n\t\tp.x += 5.;\n\t}\n\n\tif (time > 101.4) {\n\t\tmo(p.xy, vec2(2. + sin(time)*3.*cos(time*.5), 0.));\n\t}\n\n\tp.xy *= r2d(time * .05); // .05\n\n\tp.xy *= r2d(p.z *\n\t\tmix(.05, .002, step(89.5, time)) // P2 - T11\n\t); // .05 & .002\n\n\tp.x += sin(time) * smoothstep(77., 82., time);\n\n\tamod2(p.xy, 6.28 /\n\t\tmix(\n\t\t\tmix(1., 2., smoothstep(63.5, 68.5, time)), // T6\n\t\t\t5.,\n\t\t\tsmoothstep(72., 73.5, time)) // T7\n\t); // 5.\n\tp.x -= 21.; // 21.\n\n\tvec3 q = p;\n\n\tp.xy *= r2d(p.z * .1); // .1\n\n\tamod2(p.xy, 6.28 / 3.); // 3.\n\tp.x = abs(p.x) -\n\t\tmix(20., 5., smoothstep(49.5, 55., time)) // T2\n\t\t; // 5.\n\n\tp.xy *= r2d(p.z *\n\t\tmix(1., .2, smoothstep(77.5, 77.75, time)) // T8b\n\t); // .2\n\n\tp.z = re(p.zzz, 3.).x; // 3.\n\n\tp.x = abs(p.x);\n\tamod2(p.xy, 6.28 /\n\t\tmix(6., 3., smoothstep(77.75, 78.5, time)) // T10\n\t); // 3.\n\tfloat sc1 = sc(p,\n\t\tmix(8., 1., smoothstep(45.5, 51., time)) // T1\n\t); // 1.\n\n\tamod2(p.xz, 6.28 /\n\t\tmix(3., 8., smoothstep(61.5, 65.5, time)) // T5\n\t); // 8.\n\tmo(p.xz, vec2(.1)); // .1\n\n\tp.x = abs(p.x) - 1.;// 1.\n\n\tfloat d = cube(p, vec3(.2, 10, 1)); // fractal primitive: cube substracted by a signed cross\n\td = max(d, -sc1) -\n\t\tmix(.01, 2., smoothstep(56., 58.5, time)) // T3\n\t\t; // 2.\n\n\n\tg += .006 / (.01 + d * d); // first layer of glow\n\n\td = min(d, prim(q)); // add twisted cylinders\n\n\tg += .004 / (.013 + d * d); // second layer of glow (after the union of two geometries)\n\n\treturn d;\n}\n\n\n////////////////////////// RAYMARCHING FUNCTIONS //////////////////////////\n\n\nvec3 raymarch_lsdlive(vec3 ro, vec3 rd, vec2 uv) {\n\tvec3 p;\n\tfloat t = 0., ri;\n\n\tfloat dither = random(uv);\n\n\tfor (float i = 0.; i < 1.; i += .02) {// 50 iterations to keep it \"fast\"\n\t\tri = i;\n\t\tp = ro + rd * t;\n\t\tfloat d = de(p);\n\t\td *= 1. + dither * .05; // avoid banding & add a nice \"artistic\" little noise to the rendering (leon gave us this trick)\n\t\td = max(abs(d), .002); // phantom mode trick from aiekick https://www.shadertoy.com/view/MtScWW\n\t\tt += d * .5;\n\t}\n\n\t// Shading: uv, iteration & glow:\n\tvec3 c = mix(vec3(.9, .8, .6), vec3(.1, .1, .2), length(uv) + ri);\n\tc.r += sin(p.z * .1) * .2;\n\tc += g * .035; // glow trick from balkhan https://www.shadertoy.com/view/4t2yW1\n\n\treturn c;\n}\n\n// borrowed from (mmerchante) : https://www.shadertoy.com/view/MltcWs\nvoid glitch(inout vec2 uv, float start_time_stamp, float end_time_stamp)\n{\n\tint offset = int(floor(time)*2.) + int((uv.x + uv.y) * 8.0);\n\tfloat res = mix(10., 100.0, random(vec2(offset)));\n\n\t// glitch pixellate\n\tif (time > start_time_stamp && time <= end_time_stamp) uv = floor(uv * res) / res;\n\n\tint seedX = int(gl_FragCoord.x + time) / 32;\n\tint seedY = int(gl_FragCoord.y + time) / 32;\n\tint seed = mod(time, 2.) > 1. ? seedX : seedY;\n\n\n\t// glitch splitter\n\tuv.x += (random(vec2(seed)) * 2.0 - 1.0)\n\t\t* step(random(vec2(seed)), pow(sin(time * 4.), 7.0))\n\t\t* random(vec2(seed))\n\t\t* step(start_time_stamp, time)\n\t\t* (1. - step(end_time_stamp, time));\n}\n\n////////////////////////// MAIN FUNCTION //////////////////////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 uv = (q - .5) * iResolution.xx / iResolution.yx;\n\n\t/* just code for the shadertoy port */\n\ttime = mod(iTime, 43. + 10.4);\n\ttime = time + 45.;\n\tif (time > 88. && time <= 98.6) // 98.\n\t\ttime += 10.6;\n\n\n\t// added glitch\n\tglitch(uv, 0., 2.);\n\n\tglitch(uv, 98., 99.);\n\t// lsdlive 2nd part\n\tglitch(uv, 100.5, 101.5);\n\tglitch(uv, 103., 104.);\n\tglitch(uv, 105.5, 106.5);\n\n\tvec3 lsd_ro = vec3(0, 0, -4. + time * 8.);\n\tvec3 lsd_target = vec3(0., 0., time * 8.);\n\tvec3 lsd_cam = get_cam(lsd_ro, lsd_target, uv);\n\n\tvec3 col = vec3(0.);\n\n\tif (time > 45. && time <= 88.) // 43 seconds\n\t\tcol = raymarch_lsdlive(lsd_ro, lsd_cam, uv);\n\n\tif (time > 98.6 && time <= 109.) // 10.4 seconds\n\t\tcol = raymarch_lsdlive(lsd_ro, lsd_cam, uv);\n\n\n\t// vignetting (iq)\n\tcol *= 0.5 + 0.5*pow(16.0*q.x*q.y*(1.0 - q.x)*(1.0 - q.y), 0.25);\n\n\t// fading out - end of the demo\n\t//col *= 1. - smoothstep(120., 125., time);\n\n\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 17749,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/deejay-arvy/mist-4k-intro-by-ohno"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}