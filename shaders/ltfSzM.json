{
    "Shader": {
        "info": {
            "date": "1435199652",
            "description": "distance field interference patterns...",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfSzM",
            "likes": 3,
            "name": "dVoid",
            "published": 3,
            "tags": [
                "shaderclub"
            ],
            "usePreview": 0,
            "username": "clickbecause",
            "viewed": 590
        },
        "renderpass": [
            {
                "code": "float wave(float p, float f, float a){\n    return sin(p * f + iTime)*a;\n}\n\nconst int num = 6;\nfloat xoff[num];\nfloat yoff[num];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv -= vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    uv += vec2(0.5);\n    \n    float t = iTime;\n    float r = 0.5;\n    \n    float df = 0.0;\n    for (int i = 0; i < num; i++) {\n    \tfloat angle = 6.28/float(num)*float(i);\n    \txoff[i] = cos(angle) * r + (0.5);\n    \tyoff[i] = sin(angle) * r + (0.5);\n        \n        float x = abs(uv.x-xoff[i]);\n   \t\tfloat y = abs(uv.y-yoff[i]);\n        \n        float d = sqrt(x*x+y*y); //euclidean\n        //d = (x+y); //manhattan\n        //d = max(x,y); //chebyshev\n        \n        df += wave(d, 64.0, 1.0);\n  \t}\n    \n    float b = sin(df);\n    b = smoothstep(0.1, 0.9, b);\n    \n    fragColor = vec4(vec3(b), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}