{
    "Shader": {
        "info": {
            "date": "1533855373",
            "description": "3D Scan of a human head compressed into a heightfield. I always dreamed of bringing a head into Shadertoy :) Once you have a volume, Subsurface scattering becomes quite easy. Enjoy the scenes and rotate the head afterwards. Contains three spotlights.",
            "flags": 32,
            "hasliked": 0,
            "id": "XttczS",
            "likes": 71,
            "name": "[SH18] Hoooman: Human head",
            "published": 3,
            "tags": [
                "triangle",
                "subsurface",
                "image",
                "skin",
                "head",
                "ggx",
                "human"
            ],
            "usePreview": 1,
            "username": "ThomasSchander",
            "viewed": 3826
        },
        "renderpass": [
            {
                "code": "/* Hoooman by Thomas Schander, August 2018\nAs a competition entry to SH18\n\nBufferA: The heightfield creation\nBufferB: Albedo texture creation\nBufferC: Rendering\nBufferD: TemporalAA\nImage: Tonemapping and PostPro\n\nThe texture is also approximated by colorful triangles that have been fitted evolutionary.\nThe mesh has been created by rendering the head into a heightmap and then reducing the triangles,\nfavoring the important regions at the eyes.\n\nRegards to the Enscape team and everyone in Karlsruhe!\n*/\n\nvec3 Tonemap_ACES(const vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\n//#define NO_POST_PRO\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    seed = fragCoord.x + fragCoord.y * 1.125125 + iTime;\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n#ifdef NO_POST_PRO\n    fragColor.xyz = pow(Tonemap_ACES(textureLod(iChannel0, q, 0.0).xyz), vec3(0.4545));\n    return;\n#endif\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n    \n    float vign = smoothstep(3.0, 0.5, length(v));\n    \n    vec2 centerToUv = q-vec2(0.5);\n\tvec3 aberr;\n    aberr.x = textureLod(iChannel0, vec2(0.5)+centerToUv*0.995,0.0).x; \n    aberr.y = textureLod(iChannel0, vec2(0.5)+centerToUv*0.997, 0.0).y;\n    aberr.z = textureLod(iChannel0, vec2(0.5)+centerToUv, 0.0).z;\n    float exposure = (1.0+0.1*sin(0.5*iTime)*sin(1.4*iTime));\n    fragColor = vec4(pow(Tonemap_ACES(exposure*vign*aberr), vec3(0.4545)), 1.0);\n    fragColor.xyz += (floatRand3()-vec3(0.5))*0.03;\n    \n    // DEBUG views:\n\t//fragColor = vec4(textureLod(iChannel2, q, 0.0));    \n    //fragColor = vec4(oct_to_float32x3(textureLod(iChannel3, q, 0.0).xy), 1.0);\n    //fragColor = vec4(5.0*textureLod(iChannel3, q, 0.0).w);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 uv;\n\nvec2 unpackCoord(float f) \n{\n    return vec2(mod(f, 512.0),floor(f / 512.0)) / 511.0;\n}\n\nvec3 unpackParams(float f) \n{\n    return vec3(mod(f, 128.0),mod(floor(f / 128.0), 128.0),floor(f / (128.0*128.0)))/127.0;\n}\n\n// https://www.shadertoy.com/view/lsSSDt\nvec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)\n{\n    float d = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    float alpha = ((b.y - c.y) * (p.x - c.x)+(c.x - b.x) * (p.y - c.y)) / d;\n    float beta = ((c.y - a.y) * (p.x - c.x) + (a.x - c.x) * (p.y - c.y)) / d;\n    return vec3(alpha, beta, 1.0 - alpha - beta);\n}\n\nvec3 inRange3(vec3 p)\n{\n    return step(p, vec3(1.0)) * step(vec3(0.0), p);\n}\n\nfloat inRangeAll(vec3 p)\n{\n    vec3 r = inRange3(p);    \n    return r.x * r.y * r.z;\n}\n\nfloat SmoothTri(float pA, float pB, float pC, float pCol1)\n{\n\tvec3 bar = barycentric(unpackCoord(pA), unpackCoord(pB), unpackCoord(pC), uv);\n    return inRangeAll(bar) * dot(unpackParams(pCol1), bar);\n}\n\nfloat getHeadDepth()\n{\n     float col = 0.0;\n    col = max(col, SmoothTri(222042., 250260.,237895., 234171.));\ncol = max(col, SmoothTri(135554., 138560.,103836., 1267168.));\ncol = max(col, SmoothTri(135554., 103836.,116663., 1795808.));\ncol = max(col, SmoothTri(125770., 111472.,138560., 709510.));\ncol = max(col, SmoothTri(39755., 59688.,45251., 24.));\ncol = max(col, SmoothTri(164286., 159630.,143291., 1797986.));\ncol = max(col, SmoothTri(205259., 198653.,245757., 1110113.));\ncol = max(col, SmoothTri(151508., 160705.,143291., 1798642.));\ncol = max(col, SmoothTri(166700., 153394.,166225., 1149713.));\ncol = max(col, SmoothTri(39755., 65434.,72039., 414488.));\ncol = max(col, SmoothTri(133117., 128979.,112125., 1980530.));\ncol = max(col, SmoothTri(139191., 135554.,116663., 1798249.));\ncol = max(col, SmoothTri(170437., 172001.,180706., 1768928.));\ncol = max(col, SmoothTri(198623., 195003.,189391., 1305054.));\ncol = max(col, SmoothTri(160705., 158169.,162244., 1799779.));\ncol = max(col, SmoothTri(224055., 181549.,222042., 969754.));\ncol = max(col, SmoothTri(187822., 191376.,184218., 1403734.));\ncol = max(col, SmoothTri(181549., 187241.,199532., 1336344.));\ncol = max(col, SmoothTri(111472., 125770.,97106., 213799.));\ncol = max(col, SmoothTri(245757., 250260.,232865., 1282755.));\ncol = max(col, SmoothTri(81833., 83435.,105469., 1793707.));\ncol = max(col, SmoothTri(31229., 53190.,33144., 611495.));\ncol = max(col, SmoothTri(141075., 141115.,141589., 278784.));\ncol = max(col, SmoothTri(163079., 153886.,167204., 148743.));\ncol = max(col, SmoothTri(172541., 186354.,174571., 2028924.));\ncol = max(col, SmoothTri(163809., 161767.,162799., 2029930.));\ncol = max(col, SmoothTri(169916., 184282.,189391., 1305822.));\ncol = max(col, SmoothTri(181185., 178093.,169916., 1550802.));\ncol = max(col, SmoothTri(33144., 1021.,31229., 647717.));\ncol = max(col, SmoothTri(33144., 738.,862., 1204261.));\ncol = max(col, SmoothTri(190238., 181549.,215328., 3072.));\ncol = max(col, SmoothTri(177422., 174845.,167161., 16774.));\ncol = max(col, SmoothTri(158169., 160705.,154594., 1864172.));\ncol = max(col, SmoothTri(142333., 149989.,142310., 1850097.));\ncol = max(col, SmoothTri(45251., 738.,39755., 401408.));\ncol = max(col, SmoothTri(166225., 187241.,181549., 402502.));\ncol = max(col, SmoothTri(135554., 139191.,159630., 1553632.));\ncol = max(col, SmoothTri(232865., 205259.,245757., 1110222.));\ncol = max(col, SmoothTri(195446., 184701.,195979., 1403090.));\ncol = max(col, SmoothTri(136657., 139191.,116663., 1799410.));\ncol = max(col, SmoothTri(137706., 142333.,142310., 1849590.));\ncol = max(col, SmoothTri(149501., 149989.,142333., 1866486.));\ncol = max(col, SmoothTri(138560., 134466.,125770., 98347.));\ncol = max(col, SmoothTri(65499., 31229.,82429., 971695.));\ncol = max(col, SmoothTri(166225., 153394.,138560., 707398.));\ncol = max(col, SmoothTri(141589., 150317.,154372., 100881.));\ncol = max(col, SmoothTri(105469., 111032.,81833., 718189.));\ncol = max(col, SmoothTri(112125., 128979.,117215., 1980536.));\ncol = max(col, SmoothTri(180076., 166225.,159630., 1549127.));\ncol = max(col, SmoothTri(184218., 191376.,184701., 1338197.));\ncol = max(col, SmoothTri(250260., 260083.,257965., 16421.));\ncol = max(col, SmoothTri(232865., 250260.,222042., 971470.));\ncol = max(col, SmoothTri(199532., 201614.,204161., 1420497.));\ncol = max(col, SmoothTri(195446., 195979.,201614., 1469138.));\ncol = max(col, SmoothTri(195003., 198623.,200653., 1568595.));\ncol = max(col, SmoothTri(181549., 166700.,166225., 1149080.));\ncol = max(col, SmoothTri(168739., 177422.,163079., 115468.));\ncol = max(col, SmoothTri(164301., 162799.,169440., 2047476.));\ncol = max(col, SmoothTri(172001., 170437.,169939., 1945723.));\ncol = max(col, SmoothTri(194557., 186354.,172541., 2045277.));\ncol = max(col, SmoothTri(31256., 10814.,40066., 4096.));\ncol = max(col, SmoothTri(198653., 205259.,198623., 1552608.));\ncol = max(col, SmoothTri(196085., 194557.,198653., 1584863.));\ncol = max(col, SmoothTri(39755., 72039.,72012., 3224.));\ncol = max(col, SmoothTri(150317., 154377.,154372., 99604.));\ncol = max(col, SmoothTri(163079., 177422.,162052., 49927.));\ncol = max(col, SmoothTri(101744., 72039.,81833., 707742.));\ncol = max(col, SmoothTri(103836., 81833.,111032., 1742285.));\ncol = max(col, SmoothTri(237895., 224055.,222042., 969998.));\ncol = max(col, SmoothTri(143291., 159630.,139191., 1732461.));\ncol = max(col, SmoothTri(141253., 146392.,143291., 1800556.));\ncol = max(col, SmoothTri(245757., 260083.,250260., 606275.));\ncol = max(col, SmoothTri(181027., 181512.,179495., 229507.));\ncol = max(col, SmoothTri(142638., 141589.,141115., 34967.));\ncol = max(col, SmoothTri(142638., 150317.,141589., 281111.));\ncol = max(col, SmoothTri(141589., 155902.,141075., 17.));\ncol = max(col, SmoothTri(169440., 164861.,172541., 2047740.));\ncol = max(col, SmoothTri(128979., 133117.,137706., 1948016.));\ncol = max(col, SmoothTri(128979., 136657.,116663., 1800560.));\ncol = max(col, SmoothTri(138560., 135554.,166225., 1159211.));\ncol = max(col, SmoothTri(135554., 159630.,166225., 1159008.));\ncol = max(col, SmoothTri(159741., 164861.,159216., 1883889.));\ncol = max(col, SmoothTri(159741., 159216.,154594., 1866097.));\ncol = max(col, SmoothTri(202146., 198559.,200653., 1567578.));\ncol = max(col, SmoothTri(208793., 205259.,232865., 1290457.));\ncol = max(col, SmoothTri(159630., 164286.,169916., 1552734.));\ncol = max(col, SmoothTri(164286., 169939.,170437., 1588066.));\ncol = max(col, SmoothTri(250260., 247658.,237895., 229413.));\ncol = max(col, SmoothTri(256414., 250260.,257965., 21120.));\ncol = max(col, SmoothTri(187822., 189391.,195003., 1370070.));\ncol = max(col, SmoothTri(183220., 187822.,178093., 1370963.));\ncol = max(col, SmoothTri(141253., 141270.,146392., 1881836.));\ncol = max(col, SmoothTri(136657., 141270.,138692., 1767154.));\ncol = max(col, SmoothTri(1021., 33144.,862., 1200836.));\ncol = max(col, SmoothTri(81833., 65499.,83435., 1005483.));\ncol = max(col, SmoothTri(31229., 65499.,53190., 677799.));\ncol = max(col, SmoothTri(222042., 199532.,212862., 1337531.));\ncol = max(col, SmoothTri(181549., 199532.,222042., 977048.));\ncol = max(col, SmoothTri(183666., 184701.,195446., 1353929.));\ncol = max(col, SmoothTri(180076., 179097.,181635., 1304903.));\ncol = max(col, SmoothTri(166700., 177942.,168739., 198161.));\ncol = max(col, SmoothTri(167204., 153900.,161064., 312969.));\ncol = max(col, SmoothTri(162799., 164301.,163809., 1751675.));\ncol = max(col, SmoothTri(163809., 164301.,158169., 1784426.));\ncol = max(col, SmoothTri(111472., 103836.,138560., 714407.));\ncol = max(col, SmoothTri(101744., 81833.,103836., 1267102.));\ncol = max(col, SmoothTri(153394., 161064.,153900., 215446.));\ncol = max(col, SmoothTri(154377., 150317.,153886., 166410.));\ncol = max(col, SmoothTri(179495., 181003.,177942., 197774.));\ncol = max(col, SmoothTri(179495., 177942.,166700., 280078.));\ncol = max(col, SmoothTri(193515., 189391.,184282., 1468384.));\ncol = max(col, SmoothTri(180706., 174571.,186354., 1752555.));\ncol = max(col, SmoothTri(198559., 191376.,187822., 1420118.));\ncol = max(col, SmoothTri(195979., 198559.,201614., 1469269.));\ncol = max(col, SmoothTri(212862., 208793.,232865., 1289425.));\ncol = max(col, SmoothTri(222042., 212862.,232865., 1288379.));\ncol = max(col, SmoothTri(28687., 10814.,31256., 4107.));\ncol = max(col, SmoothTri(177422., 167161.,162052., 49286.));\ncol = max(col, SmoothTri(247658., 250260.,254866., 4736.));\ncol = max(col, SmoothTri(137706., 133117.,142333., 1866102.));\ncol = max(col, SmoothTri(153394., 143161.,138560., 707350.));\ncol = max(col, SmoothTri(143161., 141115.,138560., 704790.));\ncol = max(col, SmoothTri(106830., 97106.,125770., 99968.));\ncol = max(col, SmoothTri(179097., 180076.,159630., 1549266.));\ncol = max(col, SmoothTri(159630., 169916.,178093., 1371998.));\ncol = max(col, SmoothTri(149501., 154594.,149989., 1931510.));\ncol = max(col, SmoothTri(151508., 143291.,146392., 1881842.));\ncol = max(col, SmoothTri(202146., 205259.,208793., 1470682.));\ncol = max(col, SmoothTri(208793., 212862.,201614., 1468633.));\ncol = max(col, SmoothTri(128979., 116663.,117215., 1980144.));\ncol = max(col, SmoothTri(112596., 105469.,117215., 1980148.));\ncol = max(col, SmoothTri(72039., 101744.,97106., 216857.));\ncol = max(col, SmoothTri(137706., 135645.,128979., 1850102.));\ncol = max(col, SmoothTri(135645., 137706.,142310., 1850229.));\ncol = max(col, SmoothTri(65434., 39755.,33144., 609318.));\ncol = max(col, SmoothTri(39755., 738.,33144., 614424.));\ncol = max(col, SmoothTri(149501., 159741.,154594., 1865974.));\ncol = max(col, SmoothTri(200653., 198559.,195003., 1370975.));\ncol = max(col, SmoothTri(195003., 198559.,187822., 1420115.));\ncol = max(col, SmoothTri(10814., 738.,40066., 8224.));\ncol = max(col, SmoothTri(193515., 180706.,186354., 1750496.));\ncol = max(col, SmoothTri(198623., 196085.,198653., 1585118.));\ncol = max(col, SmoothTri(53190., 65434.,33144., 611113.));\ncol = max(col, SmoothTri(65499., 81833.,53190., 677295.));\ncol = max(col, SmoothTri(174845., 181512.,167161., 16515.));\ncol = max(col, SmoothTri(181003., 179495.,181512., 18185.));\ncol = max(col, SmoothTri(169939., 164286.,162244., 1798518.));\ncol = max(col, SmoothTri(164301., 169440.,169939., 1949300.));\ncol = max(col, SmoothTri(158169., 154594.,159216., 1882348.));\ncol = max(col, SmoothTri(159216., 163809.,158169., 1783154.));\ncol = max(col, SmoothTri(166700., 167204.,161064., 312465.));\ncol = max(col, SmoothTri(161064., 153394.,166700., 281363.));\ncol = max(col, SmoothTri(138692., 139191.,136657., 1881323.));\ncol = max(col, SmoothTri(139191., 138692.,143291., 1799657.));\ncol = max(col, SmoothTri(181185., 169916.,189391., 1306450.));\ncol = max(col, SmoothTri(183220., 189391.,187822., 1419219.));\ncol = max(col, SmoothTri(141589., 154372.,155902., 785.));\ncol = max(col, SmoothTri(154372., 167161.,155902., 134.));\ncol = max(col, SmoothTri(738., 45251.,40066., 64.));\ncol = max(col, SmoothTri(172541., 174571.,172001., 2031100.));\ncol = max(col, SmoothTri(174571., 180706.,172001., 2029051.));\ncol = max(col, SmoothTri(112596., 117215.,116663., 1801332.));\ncol = max(col, SmoothTri(111032., 116663.,103836., 1275626.));\ncol = max(col, SmoothTri(164861., 169440.,162799., 2031229.));\ncol = max(col, SmoothTri(162799., 159216.,164861., 2062715.));\ncol = max(col, SmoothTri(215328., 224055.,236352., 3328.));\ncol = max(col, SmoothTri(181549., 224055.,215328., 3352.));\ncol = max(col, SmoothTri(163079., 167204.,168739., 197767.));\ncol = max(col, SmoothTri(166700., 168739.,167204., 149009.));\ncol = max(col, SmoothTri(59688., 39755.,72012., 3072.));\ncol = max(col, SmoothTri(212862., 199532.,204161., 1419473.));\ncol = max(col, SmoothTri(204161., 201614.,212862., 1338582.));\ncol = max(col, SmoothTri(184282., 180706.,193515., 1586649.));\ncol = max(col, SmoothTri(169916., 180706.,184282., 1471966.));\ncol = max(col, SmoothTri(250260., 256414.,254866., 37.));\ncol = max(col, SmoothTri(179097., 187822.,184218., 1403730.));\ncol = max(col, SmoothTri(179097., 184218.,181635., 1305298.));\ncol = max(col, SmoothTri(142310., 149989.,146392., 1882864.));\ncol = max(col, SmoothTri(149989., 151508.,146392., 1882485.));\ncol = max(col, SmoothTri(196085., 198623.,193515., 1584991.));\ncol = max(col, SmoothTri(189391., 193515.,198623., 1552463.));\ncol = max(col, SmoothTri(82429., 83435.,65499., 777915.));\ncol = max(col, SmoothTri(83435., 82429.,105469., 1793469.));\ncol = max(col, SmoothTri(202146., 208793.,201614., 1469658.));\ncol = max(col, SmoothTri(201614., 198559.,202146., 1485657.));\ncol = max(col, SmoothTri(153394., 153900.,150317., 329366.));\ncol = max(col, SmoothTri(153394., 150317.,142638., 379414.));\ncol = max(col, SmoothTri(180076., 187241.,166225., 1156167.));\ncol = max(col, SmoothTri(180076., 181635.,183666., 1206215.));\ncol = max(col, SmoothTri(97106., 81237.,72039., 411405.));\ncol = max(col, SmoothTri(72039., 81237.,72012., 1817.));\ncol = max(col, SmoothTri(153886., 153900.,167204., 149130.));\ncol = max(col, SmoothTri(153900., 153886.,150317., 328973.));\ncol = max(col, SmoothTri(142638., 143161.,153394., 363287.));\ncol = max(col, SmoothTri(143161., 142638.,141115., 35734.));\ncol = max(col, SmoothTri(186354., 194557.,196085., 1568490.));\ncol = max(col, SmoothTri(196085., 193515.,186354., 1749087.));\ncol = max(col, SmoothTri(151508., 154594.,160705., 1636594.));\ncol = max(col, SmoothTri(151508., 149989.,154594., 1866482.));\ncol = max(col, SmoothTri(513., 738.,10814., 532519.));\ncol = max(col, SmoothTri(27141., 513.,10814., 529291.));\ncol = max(col, SmoothTri(138560., 141115.,134466., 299.));\ncol = max(col, SmoothTri(164301., 169939.,162244., 1801076.));\ncol = max(col, SmoothTri(162244., 158169.,164301., 1914477.));\ncol = max(col, SmoothTri(164286., 143291.,160705., 1636066.));\ncol = max(col, SmoothTri(162244., 164286.,160705., 1634669.));\ncol = max(col, SmoothTri(142310., 141270.,136657., 1881840.));\ncol = max(col, SmoothTri(141270., 142310.,146392., 1882221.));\ncol = max(col, SmoothTri(138692., 141270.,141253., 1783531.));\ncol = max(col, SmoothTri(141253., 143291.,138692., 1767148.));\ncol = max(col, SmoothTri(105469., 112125.,117215., 1981549.));\ncol = max(col, SmoothTri(245757., 260093.,260083., 67.));\ncol = max(col, SmoothTri(177422., 168739.,177942., 198150.));\ncol = max(col, SmoothTri(177422., 177942.,181003., 148998.));\ncol = max(col, SmoothTri(236352., 224055.,237895., 232704.));\ncol = max(col, SmoothTri(236352., 237895.,247658., 1792.));\ncol = max(col, SmoothTri(191376., 195979.,184701., 1338070.));\ncol = max(col, SmoothTri(198559., 195979.,191376., 1419990.));\ncol = max(col, SmoothTri(97106., 101744.,111472., 642829.));\ncol = max(col, SmoothTri(111472., 101744.,103836., 1265447.));\ncol = max(col, SmoothTri(205259., 200653.,198623., 1552353.));\ncol = max(col, SmoothTri(205259., 202146.,200653., 1568097.));\ncol = max(col, SmoothTri(201614., 199532.,195446., 1353945.));\ncol = max(col, SmoothTri(187241., 195446.,199532., 1337672.));\ncol = max(col, SmoothTri(112596., 111032.,105469., 1799540.));\ncol = max(col, SmoothTri(111032., 112596.,116663., 1800810.));\ncol = max(col, SmoothTri(118091., 106830.,125770., 98304.));\ncol = max(col, SmoothTri(181003., 181512.,174845., 49289.));\ncol = max(col, SmoothTri(174845., 177422.,181003., 148227.));\ncol = max(col, SmoothTri(153886., 163079.,154377., 164746.));\ncol = max(col, SmoothTri(162052., 154377.,163079., 115971.));\ncol = max(col, SmoothTri(179495., 166700.,181549., 395406.));\ncol = max(col, SmoothTri(181549., 181027.,179495., 229784.));\ncol = max(col, SmoothTri(81833., 72039.,65434., 625835.));\ncol = max(col, SmoothTri(65434., 53190.,81833., 709798.));\ncol = max(col, SmoothTri(27141., 28687.,28165., 17803.));\ncol = max(col, SmoothTri(28687., 27141.,10814., 525707.));\ncol = max(col, SmoothTri(164286., 170437.,169916., 1552482.));\ncol = max(col, SmoothTri(180706., 169916.,170437., 1585003.));\ncol = max(col, SmoothTri(257965., 260083.,260050., 16385.));\ncol = max(col, SmoothTri(172001., 169939.,169440., 2046843.));\ncol = max(col, SmoothTri(169440., 172541.,172001., 2031228.));\ncol = max(col, SmoothTri(187822., 179097.,178093., 1370454.));\ncol = max(col, SmoothTri(159630., 178093.,179097., 1354206.));\ncol = max(col, SmoothTri(187241., 180076.,183666., 1205192.));\ncol = max(col, SmoothTri(187241., 183666.,195446., 1352904.));\ncol = max(col, SmoothTri(136657., 135645.,142310., 1850098.));\ncol = max(col, SmoothTri(136657., 128979.,135645., 1931378.));\ncol = max(col, SmoothTri(181027., 181549.,190238., 3075.));\ncol = max(col, SmoothTri(154377., 162052.,154372., 98698.));\ncol = max(col, SmoothTri(167161., 154372.,162052., 49921.));\ncol = max(col, SmoothTri(162799., 161767.,159216., 1882491.));\ncol = max(col, SmoothTri(161767., 163809.,159216., 1881458.));\ncol = max(col, SmoothTri(189391., 183220.,181185., 1354191.));\ncol = max(col, SmoothTri(178093., 181185.,183220., 1370451.));\ncol = max(col, SmoothTri(184218., 184701.,181635., 1304789.));\ncol = max(col, SmoothTri(183666., 181635.,184701., 1337289.));\n\n\n    return col;\n}\n\nfloat sq(float x)\n{\n    return x*x;\n}\n\nfloat ell(float x, float y, vec2 scale, vec2 uv)\n{\n    uv -= vec2(x,y);\n    uv *= scale;\n    return sqrt(max(0.0, 1.0 - sq(uv.x) - sq(uv.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy / iResolution.xy;\n    if(length(fragCoord.xy - vec2(0.0)) < 2.0)\n    {\n        fragColor = texelFetch(iChannel0, ivec2(0), 0);\n        if(fragColor.xy != iResolution.xy)\n            fragColor.z = 0.0;\n        else\n            fragColor.z ++;\n        fragColor.xy = iResolution.xy;\n        return;\n    }\n    int frameCounter = int(texelFetch(iChannel0, ivec2(0), 0).z);\n    if(frameCounter == 1)\n    {\n        uv -= vec2(1.5)/512.0;\n        fragColor = vec4(getHeadDepth());\n        return;\n    }\n    if(frameCounter == 2) // Mirror step\n    {\n        float overlap = 1.0 - 2.0 * blendDistA;\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        uv.x /= blendDistA + overlap;\n        float leftSide = textureLod(iChannel0, uv, 0.0).x;\n\n        uv.x -= blendDistA/(blendDistA + overlap);\n        uv.x = 1.0 - uv.x;\n        float rightSide = textureLod(iChannel0, uv, 0.0).x;\n        float blendX = fragCoord.x / iResolution.x;\n        fragColor = vec4(mix(leftSide, rightSide, saturate(blendX/overlap-blendDistA/overlap)));\n        return;\n    }    \n    const float BLUR_RAD = 4.0;\n    const float NORM_T = 20.0;\n    float epsD = 1.0/512.0;\n    float skipDepth = 0.03;\n    fragColor = textureLod(iChannel0, uv, 0.0);\n    if(frameCounter == 3 && fragColor.w > skipDepth) // X Blur\n    {\n        float cW = fragColor.w;\n        float sum = 1.0;\n        for(float ix = 1.0; ix<=BLUR_RAD; ix++)\n        {\n            vec4 r1 = textureLod(iChannel0, uv + vec2(epsD * ix, 0.0), 0.0);\n            float w1 = exp(-NORM_T*abs(r1.w-cW));\n            fragColor += r1 * w1;\n            sum += w1;\n            r1 = textureLod(iChannel0, uv - vec2(epsD * ix, 0.0), 0.0);\n            w1 = exp(-NORM_T*abs(r1.w-cW));\n            fragColor += r1 * w1;\n            sum += w1;\n        }\n        fragColor /= sum;\n        return;\n    }\n    if(frameCounter == 4) // Y Blur\n    {\n        if(fragColor.w > skipDepth)\n        {\n            float cW = fragColor.w;\n            float sum = 1.0;\n            for(float ix = 1.0; ix<=BLUR_RAD; ix++)\n            {\n                vec4 r1 = textureLod(iChannel0, uv + vec2(0.0, epsD * ix), 0.0);\n                float w1 = exp(-NORM_T*abs(r1.w-cW));\n                fragColor += r1 * w1;\n                sum += w1;\n                r1 = textureLod(iChannel0, uv - vec2(0.0, epsD * ix), 0.0);\n                w1 = exp(-NORM_T*abs(r1.w-cW));\n                fragColor += r1 * w1;\n                sum += w1;\n            }\n            fragColor /= sum;\n        }\n        fragColor.x -= (textureLod(iChannel1, 30.0*uv, 0.0).x - 0.5)*0.003;\n        return;\n    }\n    if(frameCounter == 5) // Normal map generation\n    {\n        float NORMAL_EPS = 1.0/512.0;\n        vec4 centerRead = textureLod(iChannel0, uv, 0.0);\n        vec3 centerWs = VOL_DIMS * vec3(uv, centerRead.x);\n        vec3 X_Ws = VOL_DIMS * vec3(uv + vec2(NORMAL_EPS, 0.0), textureLod(iChannel0, uv + vec2(NORMAL_EPS, 0.0), 0.0).x);\n        vec3 Y_Ws = VOL_DIMS * vec3(uv + vec2(0.0, NORMAL_EPS), textureLod(iChannel0, uv + vec2(0.0, NORMAL_EPS), 0.0).x);\n        \n        vec3 X_Ws_n = VOL_DIMS * vec3(uv - vec2(NORMAL_EPS, 0.0), textureLod(iChannel0, uv - vec2(NORMAL_EPS, 0.0), 0.0).x);\n        vec3 Y_Ws_n = VOL_DIMS * vec3(uv - vec2(0.0, NORMAL_EPS), textureLod(iChannel0, uv - vec2(0.0, NORMAL_EPS), 0.0).x);\n        vec3 X_min = abs(X_Ws.z - centerWs.z) < abs(X_Ws_n.z - centerWs.z) ? normalize(centerWs-X_Ws): -normalize(centerWs-X_Ws_n);        \n        vec3 Y_min = abs(Y_Ws.z - centerWs.z) < abs(Y_Ws_n.z - centerWs.z) ? normalize(centerWs-Y_Ws): -normalize(centerWs-Y_Ws_n);\n        \n        float depthV = -0.02 + centerRead.x;\n        float fixedD = 0.9*ell(0.5, 0.74, vec2(4.75, 3.4), uv);\n        fixedD = max(fixedD, 0.5*ell(0.5, 0.5, vec2(6.5, 2.8), uv));\n        fixedD = max(fixedD, 0.7*ell(0.5, 0.1, vec2(5.0, 2.8), uv));        \n        fixedD = max(fixedD, 0.86*ell(0.5, 0.05, vec2(1.5, 4.8), uv));\n        depthV = min(depthV, -fixedD);\n        \n        fragColor = vec4(PackNormals(normalize(cross(X_min, Y_min))), depthV, centerRead.x);\n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 uv;\nvec2 unpackCoord(float f) \n{\n    return vec2(mod(f, 512.0),floor(f / 512.0)) / 511.0;\n}\n\nvec3 unpackParams(float f) \n{\n    return vec3(mod(f, 128.0),mod(floor(f / 128.0), 128.0),floor(f / (128.0*128.0)))/127.0;\n}\n\n// https://www.shadertoy.com/view/lsSSDt\nvec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)\n{\n    float d = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    float alpha = ((b.y - c.y) * (p.x - c.x)+(c.x - b.x) * (p.y - c.y)) / d;\n    float beta = ((c.y - a.y) * (p.x - c.x) + (a.x - c.x) * (p.y - c.y)) / d;\n    float gamma = 1.0 - alpha - beta;\n    return vec3(alpha, beta, gamma);\n}\n\nvec3 inRange3(vec3 p)\n{\n    return step(p, vec3(1.0)) * step(vec3(0.0), p);\n}\n\nfloat inRangeAll(vec3 p)\n{\n    vec3 r = inRange3(p);    \n    return r.x * r.y * r.z;\n}\n\nvec3 BaryTri(float pA, float pB, float pC, float pCol1, vec3 col)\n{\n\tvec3 bar = barycentric(unpackCoord(pA), unpackCoord(pB), unpackCoord(pC), uv);\n    return mix(col, unpackParams(pCol1), 60.0*vec3(inRangeAll(bar))/256.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int frameCounter = int(texelFetch(iChannel1, ivec2(0), 0).z);\n    uv = fragCoord.xy / iResolution.xy;\n    if(frameCounter == 1)\n    {\n        uv -= vec2(1.5)/512.0;\n        uv.x *= 2.0;\n        uv.x -= 1.0;\n        vec3 col = vec3(195.0, 151.0, 141.0)/255.0;\n        col = BaryTri(74407., 221432.,199167., 282949., col);\ncol = BaryTri(27509., 107204.,146292., 1324490., col);\ncol = BaryTri(49368., 185398.,166912., 415841., col);\ncol = BaryTri(56102., 205776.,95231., 842549., col);\ncol = BaryTri(26522., 68382.,184705., 1737570., col);\ncol = BaryTri(253951., 168446.,71210., 1536766., col);\ncol = BaryTri(191446., 121974.,115123., 1382., col);\ncol = BaryTri(83865., 234850.,193166., 1809604., col);\ncol = BaryTri(162808., 251358.,213588., 1502207., col);\ncol = BaryTri(229097., 150853.,224708., 1941621., col);\ncol = BaryTri(161805., 167885.,60821., 697429., col);\ncol = BaryTri(89599., 95434.,185208., 728102., col);\ncol = BaryTri(70883., 166905.,70102., 631245., col);\ncol = BaryTri(159717., 143030.,74075., 2097023., col);\ncol = BaryTri(43952., 123535.,233983., 1389181., col);\ncol = BaryTri(91115., 114735.,117212., 1685958., col);\ncol = BaryTri(154630., 146556.,238876., 614611., col);\ncol = BaryTri(40322., 71878.,167355., 688944., col);\ncol = BaryTri(123453., 36167.,161740., 55577., col);\ncol = BaryTri(164797., 218995.,231688., 2097151., col);\ncol = BaryTri(73846., 109455.,60202., 2080124., col);\ncol = BaryTri(219786., 51310.,183206., 1164052., col);\ncol = BaryTri(202185., 188402.,196300., 1456511., col);\ncol = BaryTri(216941., 138507.,108543., 1488111., col);\ncol = BaryTri(171713., 63631.,142847., 34., col);\ncol = BaryTri(58776., 88570.,101480., 1343451., col);\ncol = BaryTri(131421., 89544.,108500., 1043332., col);\ncol = BaryTri(111836., 92624.,165862., 912711., col);\ncol = BaryTri(137690., 221457.,53595., 919913., col);\ncol = BaryTri(199616., 201048.,139076., 753., col);\ncol = BaryTri(148979., 146725.,60515., 255., col);\ncol = BaryTri(126521., 100768.,36431., 1667610., col);\ncol = BaryTri(183466., 239237.,174339., 1255226., col);\ncol = BaryTri(100728., 147967.,147251., 74., col);\ncol = BaryTri(34792., 214359.,67192., 1008096., col);\ncol = BaryTri(200570., 213285.,198232., 2037248., col);\ncol = BaryTri(103923., 167485.,92227., 387., col);\ncol = BaryTri(45768., 35941.,194451., 1875670., col);\ncol = BaryTri(130467., 186768.,218804., 197813., col);\ncol = BaryTri(208118., 180559.,184437., 311322., col);\ncol = BaryTri(171590., 118592.,228465., 1384951., col);\ncol = BaryTri(97556., 167190.,144383., 46., col);\ncol = BaryTri(124308., 179774.,74818., 17468., col);\ncol = BaryTri(143460., 76175.,49468., 1946360., col);\ncol = BaryTri(116961., 203191.,199805., 6141., col);\ncol = BaryTri(117704., 72011.,194121., 2002605., col);\ncol = BaryTri(100757., 7553.,15126., 1433566., col);\ncol = BaryTri(227075., 232439.,55080., 1629947., col);\ncol = BaryTri(105560., 196929.,219220., 457307., col);\ncol = BaryTri(148479., 46038.,202613., 675545., col);\ncol = BaryTri(144257., 122163.,237695., 1908060., col);\ncol = BaryTri(181774., 195085.,114642., 1470178., col);\ncol = BaryTri(231595., 256730.,195980., 1386718., col);\ncol = BaryTri(96316., 32416.,60235., 608036., col);\ncol = BaryTri(105434., 123903.,174676., 1537258., col);\ncol = BaryTri(201060., 198143.,164963., 20545., col);\ncol = BaryTri(170644., 29388.,140684., 2697., col);\ncol = BaryTri(50984., 238286.,239013., 1488502., col);\ncol = BaryTri(157438., 158142.,97972., 6., col);\ncol = BaryTri(180088., 164910.,75942., 104279., col);\ncol = BaryTri(31966., 80544.,188867., 153019., col);\ncol = BaryTri(34112., 148991.,89599., 924610., col);\ncol = BaryTri(148064., 42725.,165769., 1580872., col);\ncol = BaryTri(175336., 229601.,238995., 1241323., col);\ncol = BaryTri(117173., 46250.,200788., 2082562., col);\ncol = BaryTri(67489., 39188.,74487., 16478., col);\ncol = BaryTri(115436., 150979.,194231., 1818513., col);\ncol = BaryTri(251592., 233553.,145297., 1321556., col);\ncol = BaryTri(158394., 159690.,88749., 16540., col);\ncol = BaryTri(55592., 232439.,227058., 1079545., col);\ncol = BaryTri(45192., 240096.,237181., 1031793., col);\ncol = BaryTri(127994., 112684.,135077., 183074., col);\ncol = BaryTri(104932., 82497.,203326., 394248., col);\ncol = BaryTri(196176., 218966.,208815., 2095359., col);\ncol = BaryTri(117247., 141797.,116780., 1453432., col);\ncol = BaryTri(219220., 205037.,39002., 1593690., col);\ncol = BaryTri(162901., 0.,165191., 1025248., col);\ncol = BaryTri(198559., 199259.,202578., 0., col);\ncol = BaryTri(198783., 202557.,197592., 0., col);\ncol = BaryTri(210319., 201795.,249331., 1374332., col);\ncol = BaryTri(49844., 85955.,113485., 2015221., col);\ncol = BaryTri(118184., 138725.,139488., 2097151., col);\ncol = BaryTri(71049., 135268.,125465., 2093281., col);\ncol = BaryTri(197000., 143210.,202751., 909275., col);\ncol = BaryTri(114296., 176523.,148429., 1966079., col);\ncol = BaryTri(113047., 122463.,50451., 2031615., col);\ncol = BaryTri(146990., 33341.,70016., 1913295., col);\ncol = BaryTri(46925., 95851.,67675., 166295., col);\ncol = BaryTri(238819., 73308.,227446., 1503467., col);\ncol = BaryTri(192911., 147102.,54981., 555434., col);\ncol = BaryTri(132713., 58105.,38260., 812022., col);\ncol = BaryTri(34560., 61829.,55392., 1699155., col);\ncol = BaryTri(144595., 41394.,62937., 891606., col);\ncol = BaryTri(117993., 177774.,41559., 8649., col);\ncol = BaryTri(202335., 198677.,141894., 1089238., col);\ncol = BaryTri(188635., 182148.,111801., 360448., col);\ncol = BaryTri(202531., 143580.,198608., 24., col);\ncol = BaryTri(173055., 141650.,175803., 1604350., col);\ncol = BaryTri(33670., 262143.,261989., 1437282., col);\ncol = BaryTri(13183., 112423.,83967., 1504365., col);\ncol = BaryTri(127715., 147520.,210672., 483936., col);\ncol = BaryTri(44965., 197133.,121873., 925536., col);\ncol = BaryTri(176390., 210224.,189321., 514117., col);\ncol = BaryTri(101302., 58651.,120406., 2095103., col);\ncol = BaryTri(195868., 30914.,57095., 188081., col);\ncol = BaryTri(156599., 168086.,126687., 3., col);\ncol = BaryTri(100859., 180819.,103808., 397750., col);\ncol = BaryTri(107526., 377.,0., 1108070., col);\ncol = BaryTri(100235., 139868.,200082., 114696., col);\ncol = BaryTri(141160., 101375.,109737., 529951., col);\ncol = BaryTri(29055., 101316.,28140., 1239526., col);\ncol = BaryTri(105388., 170331.,124049., 2096867., col);\ncol = BaryTri(103891., 117971.,102515., 0., col);\ncol = BaryTri(261983., 208762.,193681., 1519720., col);\ncol = BaryTri(5460., 52406.,2238., 1288680., col);\ncol = BaryTri(152636., 142818.,125643., 0., col);\ncol = BaryTri(62634., 191677.,161362., 2087295., col);\ncol = BaryTri(202404., 170910.,104748., 1719., col);\ncol = BaryTri(143451., 198529.,198940., 2097151., col);\ncol = BaryTri(26012., 116468.,98747., 1745375., col);\ncol = BaryTri(202475., 191108.,150440., 12., col);\ncol = BaryTri(105797., 170148.,200114., 34825., col);\ncol = BaryTri(64536., 226904.,151688., 1137744., col);\ncol = BaryTri(162383., 196212.,154033., 37., col);\ncol = BaryTri(61153., 34562.,45435., 479009., col);\ncol = BaryTri(148417., 183900.,118887., 2097151., col);\ncol = BaryTri(118953., 91382.,40243., 508330., col);\ncol = BaryTri(219558., 221059.,138635., 976618., col);\ncol = BaryTri(97076., 1418.,33417., 2040918., col);\ncol = BaryTri(85309., 58086.,153864., 46200., col);\ncol = BaryTri(169609., 86321.,193928., 3., col);\ncol = BaryTri(107313., 150339.,122037., 2064319., col);\ncol = BaryTri(57964., 112262.,79611., 671795., col);\ncol = BaryTri(62516., 114387.,34043., 1724505., col);\ncol = BaryTri(202486., 118391.,125305., 425983., col);\ncol = BaryTri(40020., 172885.,1926., 452977., col);\ncol = BaryTri(161679., 60573.,199735., 1452401., col);\ncol = BaryTri(92344., 123266.,145118., 1326855., col);\ncol = BaryTri(45802., 158405.,86117., 1297776., col);\ncol = BaryTri(182694., 64071.,128562., 1980644., col);\ncol = BaryTri(198529., 198265.,204672., 924., col);\ncol = BaryTri(66867., 110969.,34603., 856746., col);\ncol = BaryTri(195976., 195493.,111953., 1605631., col);\ncol = BaryTri(56501., 23413.,123683., 783469., col);\ncol = BaryTri(172655., 258290.,262029., 1404256., col);\ncol = BaryTri(84722., 57477.,101645., 4316., col);\ncol = BaryTri(203056., 197220.,75436., 2068., col);\ncol = BaryTri(47199., 135995.,9408., 1104996., col);\ncol = BaryTri(47062., 101797.,75775., 1273063., col);\ncol = BaryTri(99695., 132307.,49549., 1874275., col);\ncol = BaryTri(138700., 116363.,26012., 768366., col);\ncol = BaryTri(163503., 191914.,73939., 680227., col);\ncol = BaryTri(134736., 140287.,205965., 16464., col);\ncol = BaryTri(200294., 201683.,149923., 313739., col);\ncol = BaryTri(128432., 136617.,147733., 1997055., col);\ncol = BaryTri(143428., 72729.,199401., 1015766., col);\ncol = BaryTri(24643., 180164.,124433., 629858., col);\ncol = BaryTri(151336., 169021.,71767., 8522., col);\ncol = BaryTri(107965., 110079.,102911., 17163., col);\ncol = BaryTri(155369., 115823.,114094., 1184646., col);\ncol = BaryTri(74097., 141931.,194912., 806784., col);\ncol = BaryTri(145325., 135931.,183632., 2047359., col);\ncol = BaryTri(75665., 126480.,58418., 1551844., col);\ncol = BaryTri(189629., 23954.,23611., 1288675., col);\ncol = BaryTri(122777., 198494.,197861., 1160432., col);\ncol = BaryTri(37182., 42232.,91843., 910923., col);\ncol = BaryTri(179594., 203151.,202002., 1., col);\ncol = BaryTri(202966., 201631.,69185., 39., col);\ncol = BaryTri(63344., 178787.,106441., 362244., col);\ncol = BaryTri(203844., 200133.,164491., 13., col);\ncol = BaryTri(118361., 78205.,79088., 72899., col);\ncol = BaryTri(101044., 159642.,188593., 1720319., col);\ncol = BaryTri(148298., 185941.,173460., 1949695., col);\ncol = BaryTri(191681., 153708.,78941., 2027996., col);\ncol = BaryTri(227960., 56847.,238827., 994924., col);\ncol = BaryTri(76171., 101310.,85328., 1833595., col);\ncol = BaryTri(203831., 107291.,154874., 885291., col);\ncol = BaryTri(156042., 116388.,81611., 1372416., col);\ncol = BaryTri(204524., 197300.,198614., 0., col);\ncol = BaryTri(65701., 107861.,30907., 940493., col);\ncol = BaryTri(78580., 129900.,122266., 215683., col);\ncol = BaryTri(6515., 169916.,80890., 1024861., col);\ncol = BaryTri(195557., 222601.,209126., 1931519., col);\ncol = BaryTri(28498., 51634.,52924., 927065., col);\ncol = BaryTri(25453., 249824.,73217., 1449447., col);\ncol = BaryTri(202293., 62629.,196025., 2014841., col);\ncol = BaryTri(43927., 76691.,209472., 1236956., col);\ncol = BaryTri(65568., 203226.,27940., 846173., col);\ncol = BaryTri(198036., 198891.,135490., 1666175., col);\ncol = BaryTri(195198., 189764.,199492., 1966079., col);\ncol = BaryTri(53075., 253903.,213430., 1817211., col);\ncol = BaryTri(179344., 167325.,24644., 1418860., col);\ncol = BaryTri(153657., 68854.,145930., 1403489., col);\ncol = BaryTri(176504., 431.,34467., 1107682., col);\ncol = BaryTri(120716., 91416.,401., 1139424., col);\ncol = BaryTri(73216., 109735.,36632., 910808., col);\ncol = BaryTri(210107., 130855.,143972., 691382., col);\ncol = BaryTri(130675., 151458.,73245., 1405159., col);\ncol = BaryTri(238718., 150381.,206445., 665687., col);\ncol = BaryTri(156933., 106687.,160867., 377216., col);\ncol = BaryTri(118567., 233050.,210978., 1239117., col);\ncol = BaryTri(183., 137737.,153420., 1240294., col);\ncol = BaryTri(185970., 104817.,155184., 99113., col);\ncol = BaryTri(194656., 144695.,199507., 1835007., col);\ncol = BaryTri(117348., 144677.,134595., 1470576., col);\ncol = BaryTri(174215., 106367.,86260., 674577., col);\ncol = BaryTri(74341., 175705.,204280., 843883., col);\ncol = BaryTri(250282., 167482.,197651., 1191405., col);\ncol = BaryTri(161979., 175433.,199461., 1801688., col);\ncol = BaryTri(144355., 116838.,145832., 24., col);\ncol = BaryTri(156737., 197764.,116958., 3879., col);\ncol = BaryTri(184995., 150483.,112251., 2097151., col);\ncol = BaryTri(142905., 191041.,92853., 1060346., col);\ncol = BaryTri(200943., 181404.,193124., 0., col);\ncol = BaryTri(179851., 136988.,178583., 1914751., col);\ncol = BaryTri(201931., 204933.,173169., 1550185., col);\ncol = BaryTri(176909., 182374.,188828., 50858., col);\ncol = BaryTri(133963., 153460.,142125., 873501., col);\ncol = BaryTri(228331., 51010.,75253., 1271009., col);\ncol = BaryTri(180044., 188850.,80104., 1587195., col);\ncol = BaryTri(133253., 87342.,198845., 412712., col);\ncol = BaryTri(157052., 201653.,154439., 1288953., col);\ncol = BaryTri(157305., 170388.,182476., 1702139., col);\ncol = BaryTri(154726., 104895.,104654., 624398., col);\ncol = BaryTri(39640., 96774.,26625., 1173087., col);\ncol = BaryTri(70144., 238128.,238757., 1156315., col);\ncol = BaryTri(204493., 242364.,242531., 1142254., col);\ncol = BaryTri(66804., 51598.,153419., 1404646., col);\ncol = BaryTri(27219., 201852.,151082., 844515., col);\ncol = BaryTri(4677., 144384.,154741., 1173092., col);\ncol = BaryTri(200583., 205065.,195239., 0., col);\ncol = BaryTri(62009., 107701.,165465., 1236338., col);\ncol = BaryTri(200657., 190036.,159313., 1225973., col);\ncol = BaryTri(106953., 124900.,136880., 1584994., col);\ncol = BaryTri(110890., 46259.,81557., 1189737., col);\ncol = BaryTri(75264., 32791.,130327., 1221857., col);\ncol = BaryTri(128162., 133898.,80665., 762929., col);\ncol = BaryTri(203238., 237029.,100166., 1188842., col);\ncol = BaryTri(87489., 80535.,107137., 1338750., col);\ncol = BaryTri(120258., 205921.,118474., 1749375., col);\ncol = BaryTri(81613., 88020.,133435., 924460., col);\ncol = BaryTri(214614., 119392.,202380., 1354595., col);\ncol = BaryTri(190554., 198611.,14102., 1369322., col);\ncol = BaryTri(239556., 84512.,237694., 1349475., col);\ncol = BaryTri(127117., 57641.,122748., 1007439., col);\ncol = BaryTri(185754., 30761.,125194., 1337956., col);\ncol = BaryTri(144054., 155065.,76372., 1485133., col);\ncol = BaryTri(168544., 49982.,89107., 1107932., col);\ncol = BaryTri(183955., 172957.,18127., 1271399., col);\ncol = BaryTri(205874., 62629.,112911., 891978., col);\ncol = BaryTri(233579., 44084.,177867., 1125082., col);\ncol = BaryTri(30875., 155839.,81947., 1074013., col);\ncol = BaryTri(236091., 133469.,36932., 1239272., col);\ncol = BaryTri(161788., 24985.,191878., 1121887., col);\ncol = BaryTri(202567., 187018.,199882., 0., col);\ncol = BaryTri(196164., 228823.,52103., 977384., col);\n\n\n        fragColor.xyz = col;\n\t\treturn;\n    }\n    if(frameCounter == 2)\n    {        \n        float overlap = 1.0 - 2.0 * blendDistA;\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        uv.x /= blendDistA + overlap;\n        vec4 leftSide = textureLod(iChannel0, uv, 0.0);\n\n        uv.x -= blendDistA/(blendDistA + overlap);\n        uv.x = 1.0 - uv.x;\n        vec4 rightSide = textureLod(iChannel0, uv, 0.0);\n        float blendX = fragCoord.x / iResolution.x;\n        fragColor = mix(leftSide, rightSide, saturate(blendX/overlap-blendDistA/overlap));\n        return;\n    }\n    if(frameCounter == 3)\n    {\n        seed = fragCoord.x + fragCoord.y * 1.125125 + iTime;\n        uv += 2.0*floatRand2()/512.0;\n    }\n    fragColor = textureLod(iChannel0, uv, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvec2 saturate(vec2 x)\n{\n    return clamp(x, vec2(0.0), vec2(1.0));\n}\n\nfloat seed = 0.0;\n\nfloat floatRand()\n{\n    return fract(sin(seed+=0.1)*43758.5453 );\n}\n\nvec2 floatRand2()\n{\n\treturn fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec2 floatRand2(float fixedSeed)\n{\n\treturn fract(sin(vec2(fixedSeed, fixedSeed+0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 floatRand3()\n{\n\treturn fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec2 signNotZero(vec2 v)\n{\n\treturn vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n}\n\nvec3 oct_to_float32x3(vec2 e) \n{\n\tvec3 v = vec3(e.xy, 1.0 - abs(e.x) - abs(e.y));\n\tif(v.z < 0.0) v.xy = (1.0 - abs(v.yx))*signNotZero(v.xy);\n\treturn normalize(v);\n}\n\nvec2 PackNormals(in vec3 v)\n{\n\tvec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n\treturn (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n}\nconst float blendDistA = 0.486;\nconst vec3 VOL_DIMS = vec3(0.91, 0.83, 0.28); // WIDTH, HEIGHT; DEPTH",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "mat3 setCamera( vec3 ro, vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat sq(float x)\n{\n    return x*x;\n}\n\nfloat pow5(float x)\n{\n\tfloat x2 = x*x;\n\treturn x2*x2*x;\n}\n\nfloat F_Schlick(float f0, float VoN)\n{\n\treturn f0 + (1.0 - f0) * pow5(1.0 - VoN);\n}\n\nfloat F_Schlick (in float f0 , in float f90 , in float cosT )\n{\n\treturn f0 + (f90 - f0) * pow5(1.0 - cosT);\n}\n\nfloat GGX( float roughness, float NoH )\n{\n\tfloat m = roughness * roughness;\n\tfloat m2 = m*m;\n\tfloat f = ( NoH * m2 - NoH ) * NoH + 1.0;\n\treturn m2 / (f*f);\n}\n\nfloat SmithJoint(float roughness,float NoV,float NoL )\n{\n\tfloat a = roughness*roughness;\n\tfloat Vis_SmithV = NoL* (NoV* (1.0-a) + a);\n\tfloat Vis_SmithL = NoV* (NoL* (1.0-a) + a);\n\treturn 0.5/(Vis_SmithV + Vis_SmithL);\n}\n\nconst float MAX_Z = 0.02;\n\nfloat Burley(float roughness, float NoV, float NoL, float VoH)\n{\n\tfloat FD90 = (0.5 + 2.0 * VoH * VoH) * roughness;\n\tfloat FdV = F_Schlick(1.0, FD90, NoV);\n\tfloat FdL = F_Schlick(1.0, FD90, NoL);\n\treturn FdV * FdL * (1.0 - roughness * 0.338);\n}\n\nvec3 spotlight(vec3 Lpos, vec3 Lspot, vec3 hitPoint, float spotAngle, vec3 albedo, vec3 N, vec3 V)\n{\n    Lpos += (floatRand3()-vec3(0.5)) * 0.02;\n    const float SMAX_S = 0.6;\n    const float SSTEPSIZE = 0.009;\n    vec3 Ldelta = Lpos - hitPoint;\n    float Llen = length(Ldelta);\n    vec3 L = Ldelta/Llen;\n    vec3 H = normalize(V + L);\n    float VoH = saturate(dot(V, H));\n    float NoV = abs(dot(N, V)) + 1e-5;\n    float NoH = saturate(dot(N, H));\n    float NoL = saturate(dot(N, L));    \n    float att = max(0.0, smoothstep(spotAngle, 1.0-0.5*(1.0-spotAngle), dot(L, -Lspot)) / (Llen*Llen));\n    float rough = 0.8*albedo.r;\n    float F = F_Schlick(0.035, NoV);\n    vec3 lightCon = NoL*(albedo*Burley(rough, NoV, NoL, VoH) + SmithJoint(rough, NoV, NoL)*GGX(rough, NoH)*F);\n    vec3 subS = vec3(0.0);\n    float s = 0.008+floatRand() * SSTEPSIZE;\n    for(; s < SMAX_S; s+=SSTEPSIZE)\n    {\n        vec3 tP = hitPoint + s*L;\n        vec3 tPUV = tP / VOL_DIMS;\n        vec4 dRead = textureLod(iChannel0, tPUV.xy+ (floatRand2()-vec2(0.5)) * 0.0, 0.0);\n        if(dRead.w > tPUV.z && dRead.w > MAX_Z && dRead.z < tPUV.z && tPUV.xy == saturate(tPUV.xy))\n        {\n            lightCon = vec3(-1.0);\n            subS = vec3(0.0);\n        }\n        else if(lightCon == vec3(-1.0) && subS == vec3(0.0))\n        {\n            vec3 incNormal = oct_to_float32x3(dRead.xy);\n            subS = 0.7*vec3(0.17, 0.03, 0.01) * exp(-650.0*s*s) * saturate(0.5+0.5*dot(incNormal, L)) * exp(-max(0.0, -100.0*tP.z));\n        }\n    }\n    return att * (max(vec3(0.0), lightCon) + subS * albedo);\n}\n\n#define NUM_LIGHTS 2\n#define NUM_KEYFRAMES 3\n\nstruct KeyFrame\n{\n    vec3 camPos[2];\n    vec3 camLookAt[2];\n    \n    vec3 lightPos[NUM_LIGHTS];\n    vec3 lightSpot[NUM_LIGHTS];\n    vec3 ambientDir;\n};\n\nKeyFrame keyframes[NUM_KEYFRAMES];\n\nfloat smStep(float x)\n{\n    return 3.0*x*x-2.0*x*x*x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    seed = fragCoord.x + fragCoord.y * 1.125125 + iTime;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 camPos = vec3(VOL_DIMS.x *0.5 - 1.6*cos(3.0*mo.x), VOL_DIMS.y * 0.1 + mo.y*1.0, 0.9 + 0.9*sin(3.0*mo.x) );\n    vec3 target = VOL_DIMS * 0.5;\n    vec3 lightPos[2] = vec3[2](vec3(-0.9, 1.0, -0.7), vec3(1.7, 1.0, -0.7));\n    vec3 lightSpot[2] = vec3[2](vec3(0.35, -0.2, 0.8), vec3(-0.4, -0.2, 0.8));\n    vec3 ambientDir = vec3(-0.4, -0.3, 0.2);\n    keyframes[0] = KeyFrame(vec3[2](vec3(1.4, 0.5, -1.4), vec3(2.3, 0.2, 0.2)),\n                            vec3[2](vec3(0.6, 0.47, 0.14), vec3(0.45, 0.44, 0.2)),\n                            vec3[2](vec3(0.2, 0.45, 1.9), vec3(-1.2, 1.0, 0.9)), // light pos\n                            vec3[2](vec3(0.0, 0.35, -0.7), vec3(0.7, -0.0, -0.9)), // light dir\n                            vec3(-0.6, -0.3, 0.3) );\n    \n    keyframes[1] = KeyFrame(vec3[2](vec3(0.48, 1.8, 1.5), vec3(0.51, 0.1, 2.1)),\n                            vec3[2](vec3(0.45, 0.41, 0.25), vec3(0.44, 0.45, 0.14)),\n                            vec3[2](vec3(-0.62, 0.2, -1.1), vec3(1.2, 0.6, -0.1)), // light pos\n                            vec3[2](vec3(0.5, 0.6, 0.8), vec3(-0.5, 0.0, 0.2)), // light dir\n                            vec3(-0.6, -0.3, 0.4) );\n    \n    keyframes[2] = KeyFrame(vec3[2](vec3(-0.45, 0.6, 1.3), vec3(-0.1, 0.7, 1.6)),\n                            vec3[2](vec3(0.57, 0.48, 0.14), vec3(0.5, 0.47, 0.14)),\n                            vec3[2](vec3(-0.3, 0.6, -0.9), vec3(1.2, 0.6, 0.2)), // light pos\n                            vec3[2](vec3(0.02, -0.0, 0.9), vec3(-0.5, 0.0, 0.2)), // light dir\n                            vec3(-0.6, 0.8, 0.4) );\n    const float KF_TIME = 8.0;\n    float blackBlend = 1.0;\n#if 1\n    int kfId = int(iTime / KF_TIME);\n    if(iMouse.z < 0.0001 && kfId < NUM_KEYFRAMES)\n    {        \n        float kfProgress = fract(iTime / KF_TIME);\n        blackBlend = min(1.0, 10.0*kfProgress) * saturate(6.0*(1.0 - kfProgress));\n#else // Used for keyframe debugging\n    if(iMouse.z < 0.0001)\n    {\n        float kfProgress = 1.0;\n        int kfId = 0;\n#endif\n        float smP = smStep(kfProgress);\n        smP = smStep(smP);\n        camPos = mix(keyframes[kfId].camPos[0], keyframes[kfId].camPos[1], smP);\n        target = mix(keyframes[kfId].camLookAt[0], keyframes[kfId].camLookAt[1], kfProgress);\n        lightPos = keyframes[kfId].lightPos;\n        lightSpot = keyframes[kfId].lightSpot;\n        ambientDir = keyframes[kfId].ambientDir;\n    }\n    \n    mat3 ca = setCamera( camPos, target, 0.0 );\n    vec2 p = (-iResolution.xy + 2.0*(fragCoord + floatRand2(iTime)))/iResolution.y;\n    vec3 V = ca * normalize( -vec3(p.xy, 4.0) );\n       \n    const float MAX_S = 3.0;\n    const float STEPSIZE = 0.002;\n    vec3 N;\n    vec3 albedo = vec3(0.0);\n    float s = 1.2 + floatRand() * STEPSIZE;\n    for(; s < MAX_S; s+=STEPSIZE)\n    {\n        vec3 tP = camPos - s*V;\n        vec3 tPUV = tP / VOL_DIMS;\n        vec4 dRead = textureLod(iChannel0, tPUV.xy + (floatRand2()-vec2(0.5)) * 0.0, 0.0);\n        if(dRead.w > tPUV.z && dRead.w > MAX_Z && dRead.z < tPUV.z && tPUV.xy == saturate(tPUV.xy))\n        {\n            N = oct_to_float32x3(dRead.xy);\n            vec3 mirrorNormal = N;\n            mirrorNormal.z *= -1.0;\n            mirrorNormal = mix(mirrorNormal, vec3(0.0, 0.0, -1.0), saturate(-1.9*tPUV.z));\n            N = normalize(mix(N, normalize(mirrorNormal), saturate(2.5*max(0.0, -(tPUV.z-dRead.w)))));\n            albedo = textureLod(iChannel1, tPUV.xy, 0.0).xyz;\n            albedo = mix(albedo, vec3(195.0, 151.0, 141.0)/255.0, saturate(-1.9*tPUV.z));\n            break;\n        }\n    }\n    \n    if(s >= MAX_S)\n    {\n        // SKY\n        fragColor = 0.09*max(vec4(0.0), vec4(0.05, 0.1-0.2*V.y, 0.2-0.5*V.y, 1.0));\n        fragColor.xyz += 0.07*textureLod(iChannel2, -V, 0.0).xyz;\n    }\n    else\n    {\n        vec3 hitPoint = camPos - s*V;\n        albedo = pow(albedo, vec3(2.2));\n        vec3 lightContrib = spotlight(lightPos[0], normalize(lightSpot[0]), hitPoint, 0.8, albedo, N, V);\n        lightContrib += 0.5*spotlight(lightPos[1], normalize(lightSpot[1]), hitPoint, 0.8, albedo, N, V);\n        lightContrib += 0.2*spotlight(vec3(1.1, 1.0, 0.8), normalize(vec3(-1.0, -0.16, -1.0)), hitPoint, 0.8, albedo, N, V);\n        fragColor.xyz = vec3(0.1)*max(0.0, dot(ambientDir, N)+0.5)*albedo + lightContrib;\n    }\n    fragColor *= blackBlend;\n    return;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "ivec2 offsets[8] = ivec2[8]( ivec2(-1,-1), ivec2(-1, 1), \n\tivec2(1, -1), ivec2(1, 1), \n\tivec2(1, 0), ivec2(0, -1), \n\tivec2(0, 1), ivec2(-1, 0));\n\nvec3 RGBToYCoCg( vec3 RGB )\n{\n\tfloat Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\n\tfloat Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\tfloat Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\treturn vec3(Y, Co, Cg);\n}\n\nvec3 YCoCgToRGB( vec3 YCoCg )\n{\n\tfloat Y= YCoCg.x;\n\tfloat Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\n\tfloat Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\n\tfloat R= Y + Co-Cg;\n\tfloat G= Y + Cg;\n\tfloat B= Y - Co-Cg;\n\treturn vec3(R,G,B);\n}\n\n//#define NO_AA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;    \n    vec3 new = RGBToYCoCg(textureLod(iChannel0, q, 0.0).xyz);\n    vec3 history = RGBToYCoCg(textureLod(iChannel1, q, 0.0).xyz);\n    \n    vec3 colorAvg = new;\n    vec3 colorVar = new*new;\n    \n    // Marco Salvi's Implementation (by Chris Wyman)\n    for(int i = 0; i < 8; i++)\n    {\n        vec3 fetch = RGBToYCoCg(texelFetch(iChannel0, ivec2(fragCoord.xy)+offsets[i], 0).xyz);\n        colorAvg += fetch;\n        colorVar += fetch*fetch;\n    }\n    colorAvg /= 9.0;\n    colorVar /= 9.0;\n    float gColorBoxSigma = 0.75;\n\tvec3 sigma = sqrt(max(vec3(0.0), colorVar - colorAvg*colorAvg));\n\tvec3 colorMin = colorAvg - gColorBoxSigma * sigma;\n\tvec3 colorMax = colorAvg + gColorBoxSigma * sigma;\n    \n    history = clamp(history, colorMin, colorMax);\n  \n\tfragColor = vec4(YCoCgToRGB(mix(new, history, 0.95)), 1.0);\n#ifdef NO_AA\n    fragColor = vec4(YCoCgToRGB(new), 1.0);\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}