{
    "Shader": {
        "info": {
            "date": "1658109456",
            "description": "sun -k-2-2d- ",
            "flags": 0,
            "hasliked": 0,
            "id": "ssKBWh",
            "likes": 8,
            "name": "sun -k-2-2d- ",
            "published": 3,
            "tags": [
                "sunk22d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//sun -k-2-2d-  ///17-jul-2022\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n///IQ\n// signed distance to a n-star polygon with external angle en\nfloat sdStar(in vec2 p, in float r, in int n, in float m) // m=[2,n]\n{\n    // these 4 lines can be precomputed for a given shape\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nvec4 pisotria(vec2 p,vec3 colOut)\n{\n   vec2 pr= Rotate( p, vec2(0.0),0.79);\n   \n   float d1a= sdBox(pr,vec2(2.5) );\n   float d1b= sdBox(pr,vec2(2.0) );\n   float dif1= differenceSDF(d1a, d1b);\n   \n   float d2a= sdBox(p-vec2(0.0,3.0),vec2(4.,3.0) );\n   dif1= differenceSDF(dif1, d2a);\n   \n   colOut= DrawFigBorde(vec3(0.0), colOut,abs(dif1) );\n   return vec4(colOut, abs(dif1)-0.1); \n   \n}\n\nvec4 dobletriaB(vec2 uv, vec3 colOut)\n{   vec2 uv0=uv;\n    uv.x=opRep1D( uv.x, 16.0);    \n    vec4 col1=pisotria(uv,colOut);\n    uv.x+=4.;\n    uv.y+=4.0;\n    vec4 col2=pisotria(vec2(uv.x,-uv.y),colOut);\n    float d1a=col1.w;\n    float d1c=col2.w;\n    float unitd=unionSDF(d1a, d1c);\n    colOut= DrawFigBorde(vec3(0.0), colOut,unitd);\n    return vec4( colOut,unitd);\n}\n\nvec3 dobletriaC(vec2 uv, vec3 colOut)\n{   vec2 uv0=uv;\n    vec4 col1=dobletriaB(uv, colOut);\n    vec4 col2=dobletriaB(uv-vec2(8.0,0.0), colOut);\n    float d1=col1.w;\n    float d2=col2.w;\n    float unitd=unionSDF(d1, d2);\n    colOut= DrawFigBorde(vec3(0.0), colOut,unitd);\n    return colOut;\n}\n\nvec3 pisof2(vec2 uv, vec3 colOut)\n{   vec2 uv0=uv;\n    uv.y+=18.;\n    vec3 col=colOut;\n    vec2 pr=uv-vec2(0.0,6.0);\n    pr.x=opRep1D(pr.x, 16.0);\n    pr.y=abs(pr.y)-5.0;\n    float d1a= sdBox(pr,vec2(8.0,0.5) );\n    d1a=abs(d1a)-0.2;\n    col= dobletriaC(uv-vec2(0.0,10.0),col);\n    col= dobletriaC(vec2(uv.x,-uv.y)-vec2(0.0,-2.0),col);\n    col= DrawFigBorde(vec3(0.0),col,d1a);    \n    return col;\n}   \n\nvec3 AnilloAncho(vec2 p, float r, float ancho,  vec3 colOut)\n{   float d2a= sdCircle(p, r );\n    float d2b= sdCircle(p, r-ancho);\n    float dif2= differenceSDF(d2a, d2b);\n    vec3 col=colOut;\n    col= DrawFigBorde(vec3(0.0,0.0,0.0), col, dif2 );\n    return col;\n}\n\n/// Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\nvec3 AnilloBloque(vec2 p, vec2 med, vec3 colOut)\n{   float d1a= sdBox(p,med);\n    float d1b= sdBox(p,med-vec2(0.5));\n    float dif1= differenceSDF(d1a, d1b);\n    dif1=abs(dif1)-0.15;\n    colOut= DrawFigBorde(vec3(0.0),colOut,dif1);\n    \n    vec3 colbg=tex3D( iChannel0, vec3(mod(p.xy,5.0),1.0)/256.0, vec3(1.0) )*2.0;\n    colbg=vec3((colbg.x+colbg.y+colbg.z)/3.0);\n    colOut= DrawFigBorde(colbg,colOut,d1b);\n    return colOut;\n}\n\nvec3 estrellaCirculo(vec2 p, vec3 colOut)\n{   float r; int n; float m;\n    r=8.0;n=8; m=5.0;\n    float d1a= sdStar(p, r, n, m); // m=[2,n]\n \n     r=5.0;n=8; m=5.0;\n    float d1b= sdStar(p, r, n, m); // m=[2,n]\n    float dif1= differenceSDF(d1a, d1b);\n    \n    colOut= DrawFigBorde(vec3(0.0),colOut,dif1);\n    colOut=AnilloAncho(p, 2.0, 0.5, colOut);\n    colOut=AnilloAncho(p, 1.0, 0.5, colOut);\n    colOut=AnilloAncho(p, 8.0, 0.5, colOut);\n    colOut=AnilloAncho(p, 9.0, 0.5, colOut);\n    colOut= AnilloBloque(p-vec2(0.0,-19.0), vec2(7.0,10.0), colOut);\n    return colOut;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.25);\n    float esc=25.0;\n    uv*=esc;\n    //uv+=vec2(0.0,2.0*sin(iTime));\n    vec3 col=vec3(1.0);   \n     col= pisof2(uv,col);\n     col= estrellaCirculo(uv-vec2(0.0,23.0), col);\n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}