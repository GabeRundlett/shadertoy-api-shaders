{
    "Shader": {
        "info": {
            "date": "1564579161",
            "description": "Voronoi Experiment 19",
            "flags": 0,
            "hasliked": 0,
            "id": "wtfXWl",
            "likes": 13,
            "name": "Voronoi Experiment 19",
            "published": 3,
            "tags": [
                "voronoi",
                "experiment",
                "19"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// Commutative smooth minimum function. Provided by Tomkh and \n// taken from Alex Evans's (aka Statix) talk: \n// http://media.lolrus.mediamolecule.com/AlexEvans_SIGGRAPH-2015.pdf\n// Credited to Dave Smith @media molecule.\nfloat smin(float a, float b, float r)\n{\n   float f = max(0., 1. - abs(b - a)/r);\n   return min(a, b) - r*.25*f*f;\n}\n\nvoid mainImage( out vec4 c, vec2 g )\n{\n\tvec2 v = g / iResolution.y;\n    vec2 p = g /= iResolution.y / 3., kp = vec2(0), kid = vec2(0);;\n\t\n\tg += iTime * .25;\n\t\n    float d = 1e5, kd = d, ld = d;\n    \n    for(int x=-3;x<=3;x++)\n    for(int y=-3;y<=3;y++)\n    {\t\n        vec2 p = vec2(x,y);\n        vec2 id = fract(sin((floor(g)+p)*mat2(2,5,5,2)));\n        vec2 an = sin( iTime * 0.5 + 10. * id );\n\t\tp += .5 + .35 * an - fract(g);\n        p *= 10.;\n        \n\t\td = smin(d, dot(p,p), 100.);\n\t\tif (d < 10.)\n\t\t{\n\t\t\td = dot(p,p);\n\t\t\tfloat t = iTime * 5.*0.;\n\t\t\tkd = sin(ld * 0.5 - t) * ld;\n\t\t\tkid = id;\n        }\n\t\tld = d * 2.;\n    }\n\n\tc = kd * vec4(1, floor(kid + 1.5) * 0.05, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}