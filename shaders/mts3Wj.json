{
    "Shader": {
        "info": {
            "date": "1672509805",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "mts3Wj",
            "likes": 9,
            "name": "kiosk",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "spqr",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "\n\n\n#define PI 3.14159265\n#define time iTime\n#define saturate(a) (clamp((a),0.,1.))\n#define linearstep(a,b,t) (saturate(((t)-(a))/((b)-(a))))\n#define BEAT (time*170.0/60.0)\nfloat seed;\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash31(float p) {\n\tvec3 p2 = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p2 += dot(p2.zxy, p2.xyz + vec3(21.5351, 14.3137, 15.3219));\n\treturn fract(vec3(p2.x * p2.y * 95.4337, p2.y * p2.z * 97.597, p2.z * p2.x * 93.8365));\n}\n\nfloat hash12(vec2 p ) {\n  float a = fract(sin(p.x * 4321.531) * 9831.113);\n float b = fract(sin(p.y * 5959.951) * 7891.517);\n float c = fract(\n sin(a * 4523.232 + b * 5490.954) * 9954.234);\n return c;\n}\n\nvec3 spline(vec3 a, vec3 b, vec3 c, vec3 d, float p)\n{\n    // CatmullRoms are cardinals with a tension of 0.5\n\tvec3 P = -a + (3. * (b - c)) + d;\n    vec3 Q = (2. * a) - (5. * b) + (4. * c) - d;\n    vec3 R = c - a;\n    vec3 S = 2. * b;\n\n\tfloat p2 = p * p;\n    float p3 = p * p2;\n\n    return .5 * ((P * p3) + (Q * p2) + (R * p) + S);\n}\n\nvec3 getPos ( float t) {\n\n  float n  = floor(t);\n  \n  \n\n\n float u = 4.;\n  \n  vec3 s = spline(\n      hash31(n)    * u,\n      hash31(n+1.) * u,\n      hash31(n+2.) * u,\n      hash31(n+3.) * u,\n      fract(t)\n   );\n \n  return s;\n}\n\n\n\nfloat tor( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat cylcap( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat hash(in vec3 p)\n{\n    p = fract(p * vec3(821.35, 356.17, 671.313));\n    p += dot(p, p+23.5);\n    return fract(p.x*p.y*p.z);\n}\n\nfloat noise(in vec3 p)\n{\n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n    \n    float a = hash(ip + vec3(0, 0, 0));\n    float b = hash(ip + vec3(1, 0, 0));\n    float c = hash(ip + vec3(0, 1, 0));\n    float d = hash(ip + vec3(1, 1, 0));\n    float e = hash(ip + vec3(0, 0, 1));\n    float f = hash(ip + vec3(1, 0, 1));\n    float g = hash(ip + vec3(0, 1, 1));\n    float h = hash(ip + vec3(1, 1, 1));\n    \n    vec3 t = smoothstep(vec3(0), vec3(1), fp);\n    return mix(mix(mix(a, b, t.x), mix(c, d, t.x), t.y),\n               mix(mix(e, f, t.x), mix(g, h, t.x), t.y), t.z);\n}\n\nfloat fbm(in vec3 p)\n{   \n    float res = 0.0;\n    float amp = 0.5;\n    float freq = 2.0;\n    for (int i = 0; i < 5; ++i)\n    {\n        res += amp * noise(freq * p);\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    return res;\n}\n\nfloat bi_fbm(in vec3 p)\n{\n    return 2.0 * fbm(p) - 1.0;\n}\n\nvec3 warp(in vec3 p)\n{\n    p = p + bi_fbm(0.4*p + mod(0.5*iTime, 100.0));\n    p = p + bi_fbm(0.4*p - mod(0.3*iTime, 100.0));\n    return p;\n}\n\n\n\nfloat rand(float t) {\n  return fract( sin(t * 7361.994) * 4518.442);\n}\nfloat rnd(float t) {\n  return fract( sin(t * 7361.994) * 4518.442);\n}\n\nmat2 rot2d(float t)\n{\n  return mat2(cos(t),-sin(t),sin(t),cos(t));\n}\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\nfloat wave(vec3 p) {\n\n   float elv = 0.;\n   for (float i = 0.; i < 11.; i++) {\n     p.xz *= rot(rnd(i ));\n     p.yz *= rot(rnd(i+1.)*.32*2.);\n     p.xy *= rot(i*5.);\n    \n     float q = 1.3 + abs(sin(11.1/30.)/10.);\n     elv += cos((p.x + (i *171.9))/(10./pow(q,i))) * (4./pow(q,i));\n     elv += cos((p.z * .61 + (i *61.2))/(10./pow(q,i))) *  (4./pow(q,i));\n  \n   \n\n   }\n   \n   return pow(elv,.3);\n}\nvec3 lattice (float t ) {\n\n \n\n  float m = t;\n  float mx = floor((m-2.)/3.);\n  float my = floor((m-1.)/3.);\n  float mz = floor((m-0.)/3.);\n  \n  float n= m+1.;\n  float nx = floor((n-2.)/3.);\n  float ny = floor((n-1.)/3.);\n  float nz = floor((n-0.)/3.);\n  \n  \n \n\n\n  vec3 a =  \n  mix(\n      vec3(\n          rand(mx)-.5,\n          rand(my)-.5,\n          rand(mz)-.5\n      ),\n      vec3(\n          rand(nx)-.5,\n          rand(ny)-.5,\n          rand(nz)-.5\n      ) , \n      fract(t)\n  );\n  return a;\n}\n\nfloat tick (float t ) {\n  float i = floor(t);\n  float r = fract(t);\n  r = sqrt(r);\n  return r + i;\n\n}\nvec3 flit(float t) {\n\n  vec3 x = normalize(vec3(1));\n  float t1 = tick(t);\n  float t2 = tick(t * .71);\n  float t3 = tick(t * .55);\n  x.yz *= rot(t1);\n  x.xz *= rot(t2);\n  x.yx *= rot(t3);\n  \n  return x;\n}\n\nvec3 bezier( float t ){\n  vec3 one = lattice(floor(t));\n  vec3 two = lattice(floor(t+1.));\n  float per = fract(t);\n  \n  return mix(one,two,per);\n  \n}\n\n\nvec3 lofi (vec3 a, float b) {\n  return floor(a/b) * b;\n \n}\n \n\nfloat fractsin(float v)\n{\n  return fract(sin(v*121.445)*34.59);\n}\n\n\n\n\nfloat rand()\n{\n  seed=fractsin(seed);\n  return seed;\n}\n\n\nfloat easeceil(float t, float fac)\n{\n  return floor(t)+.5+.5*cos(PI*exp(fac*fract(t)));\n}\n\n\nfloat pi = 3.141592;\nfloat surge (float tt) {\n\n   return (1. - cos(mod(tt*pi,pi))/2.)+floor(tt);\n \n}\n\n\nfloat slomo ( float x) {\n  x = mod(x,10.);\n  \n  float z = (pow(x-5.,6.)/( pow(x-5.,6.) + 1. ) );\n  return z;\n}\n\n\n\n\n\n\n\n\nvec3 kifs(vec3 p) \n{\n  \n  float t = surge(time);\n  float s =10.;\n  for ( float i = 0.; i <5.; i++ ) {\n \n    p.yz *= rot((t + i));\n    p.xz *= rot((t - i) * .7);\n    \n   \n    p = abs(p);\n    \n    p -= s;\n    s *= 0.7;\n  }\n  return p;\n}\nfloat box(vec3 p,vec3 s)\n{\n  vec3 d=abs(p)-s;\n  return length(max(d,0.));\n}\n\n\n\nfloat smin(float a, float b, float h) {\n  float k=clamp((a-b)/h*0.5+0.5,0.0,1.0);\n  return mix(a,b,k)-k*(1.0-k)*h;\n}\n\n\nfloat sph ( vec3 p, float r) {\n  return length(p) - r;\n}\n\n\nvec3 ifs(vec3 p,vec3 rot,vec3 shift)\n{\n  vec3 pt=abs(p);\n  vec3 t=shift;\n  for(int i=0;i<6;i++)\n  {\n    pt=abs(pt)-abs(lofi(t*pow(1.8,-float(i)),1.0/512.0));\n    t.yz=rot2d(rot.x)*t.yz;\n    t.zx=rot2d(rot.y)*t.zx;\n    t.xy=rot2d(rot.z)*t.xy;\n    pt.xy=pt.x<pt.y?pt.yx:pt.xy;\n    pt.yz=pt.y<pt.z?pt.zy:pt.yz;\n    //pt.xz=pt.x<pt.z?pt.zx:pt.xz;\n  }\n  return pt;\n}\n\n\nfloat chassi (vec3 p) {\n   p.z *= .5;\n   float a = tor(vec3(p.x/1.,p.y/1.,p.z/2.) , vec2(3.,1.)) + box(p,vec3(3.4));\n   return a * .5;\n}\nfloat body (vec3 p) {\n    float a =box(p, vec3(3.,0.9,4.));\n    float b =box(p - vec3(0,0.5,4.), vec3(3.,0.9,4.) * .9);\n    \n    vec3 pa = p;\n    pa.zy *= rot(.3);\n    float c= box(pa - vec3(0,4.4,0), vec3(3.,0.9,4.) * .4);\n    \n    vec3 pb = p;\n    pb.zy *= rot(22.2);\n    float d= sph(pb - vec3(0,0.7,0), 2.2);\n    float e= sph(pb - vec3(0,0.7,-1.5), 3.0);\n    return smin(e,smin(d, smin(c,smin(a,b,2.),5.), 2.),.2);\n}\n\nfloat grav ( vec3 p) {\n  \n  float a = sph(p + vec3(2.,0,8), 1.2);\n  float b = sph(p + vec3(-2.,0,8), 1.2);\n  float c = sph(p + vec3(2.,0,-8), 1.2);\n  float d = sph(p + vec3(-2.,0,-8), 1.2);\n  \n  return min(d,min(c,min(a,b)));\n}\n\nvec3 opId(vec3 p, vec3 c) {\n     return floor(p/c);\n}\n\nvec3 opRep(vec3 p, vec3 c) {\n  return mod(p, c)- 0.5 * c;\n}\nfloat runner (vec3 pt) {\n\n   pt= pt * 4.;\n   pt.z *= 1.;\n   vec3 p = pt + vec3(0,15.,0);\n\n   \n    float ch  = chassi(p);\n    float bo = body(p);\n    float gr = grav(p);\n    return smin(gr,smin(ch,bo,.5),1.4) * .8;\n}\n\n\n\n\n\n\nfloat highway (vec3 p , vec3 shape, vec3 off, vec3 dir, float prob) {\n\n  prob *= .4;\n  dir *= .47;\n  shape *= .11;\n  p += off + dir * iTime * 3.11; \n  vec3 q = opRep(p, vec3(30,30,30)) ;\n  vec3 qid = opId(p, vec3(30,30,30));\n  float lim = fract(hash(qid * 1.7));\n  float s;\n  \n  prob *=1.;\n  \n  if ( lim < prob ) {\n      return runner(q);\n  } else {\n      return 10.;\n  }\n\n\n}\nint matter = 0;\nfloat artifact(vec3 p, float f1) {\n\n\n  \n  vec3 p1 = p;\n  vec3 p2 = p;\n  vec3 p3 = p;\n  vec3 p4 = p;\n  vec3 p5 = p;\n  vec3 p6 = p;\n\n\n\n \n  //float final = R;\n  float final=10000.;\n  \n vec3 pt=p;\n  \n  //vec3 pr = p;\n  //pr = p + vec3(10,-27.565,243.7 * time)/3.3; \n  //pr = rep(pr, vec3(20,50,20));\n  //float run = runner(pr);\n  \n  \n  \n  //float width = mix(5.,15., abs(sin(iTime/100.)));\n  float width = 13.;\n  float halfwidth = width/2.;\n  vec3 haha=lofi(pt,width);\n  \n  float phase=BEAT/8.0;\n  phase+=dot(haha,vec3(2.75,3.625,1.0625));\n  phase=easeceil(phase,-10.0);\n  \n \n  float clampBox=box(pt,vec3(2.));\n  \n  pt=ifs(pt,vec3(3.6,3.0+0.4+(iTime + f1 * 321.1)/11.,3.1),vec3(3.0,2.3,3.5));\n\n  vec3 seed = floor(p/width);\n\n  float dist;\n  \n  dist=box(pt,vec3(1.)*.17);\n\n  dist=max(dist,clampBox);\n\n  return dist;\n \n}\nvec3 polar ( vec3 p ) {\n  float pi = 3.141592;\n  p =  vec3(atan(p.x,p.y)*pi*(1.), length(p.xy) - 8. , p.z );\n  return p;\n}\n\nfloat map(vec3 p) {\n  \n  p = polar(p);//mix(p, polar(p), sin(iTime)*.5+.5);\n    // geo\n  \n \n  float domx = 4.5;\n  float domy = 14.;\n  vec2 id = floor(p.xz/domx);\n  float f1 = hash12(id);\n  \n  p.x = mod(p.x, domx) - domx/2.;\n  p.z = mod(p.z, domy) - domy/2.;\n \n float a = artifact(p,f1);\n  return a;\n}\n\n\n\n\nvec3 norm(vec3 p,vec2 d)\n{\n  return normalize(vec3(\n    map(p+d.yxx)-map(p-d.yxx),\n    map(p+d.xyx)-map(p-d.xyx),\n    map(p+d.xxy)-map(p-d.xxy)\n  ));\n}\n\n\nvec3 norm3(vec3 p) {\n  vec2 off=vec2(0.01,0.0);\n  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx))+0.000001);\n}\n\n\n\n\n\nfloat tock (float t){\n  return t + sin(t);\n}\n\n\n\nvec3 flitfbm(float t) {\n    vec3 z = vec3(0);\n    float amp = 1.;\n    float freq = 1.;\n    for (float a = 0.; a < 5.; a++) {\n      z += flit((t+a) * freq) * amp;\n      freq *= 1.5;\n      amp /=1.4;\n    }\n    \n    return z;;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n \n  \n  // nav\n  \n  float tt = iTime * 1.;\n  \n  //tt = sin(tt) + tt;\n\n  \n  vec3 adv = vec3(0.,0.,21.) * iTime;\n  \n \n  vec3 s = vec3(0.,0.,0.) + adv;\n  vec3 t = vec3(0.,0.,100.) + adv;\n  \n  s+= bezier(iTime*2.1)*1.;\n  t+= bezier(iTime*3.1)*1.;\n \n  s += sin(iTime)* vec3(4,0,0);\n  s += sin(iTime*.81) * vec3(0,2,0);\n  \n  s += flitfbm(iTime*1.41)*.4;\n  //t += flitfbm(iTime*1.71)*.01;\n  \n \n \n \n  vec3 cz=normalize(t-s);\n  vec3 cx=normalize(cross(cz,vec3(0,1,0)));\n  vec3 cy=normalize(cross(cz,cx));\n      // fisheye\n  cz -= dot(uv,uv)/6.;\n  \n \n  vec3 r=normalize(cx*uv.x+cy*uv.y+cz);\n  r.xy *= rot(noise(s/100.)*3.);\n \n  bool hit = false;\n  float d;\n  float edge = 0.;\n  float dd=0.;\n  float i = 0.;\n  vec3 p=s;\n  vec3 n1,n2;\n \n  \n \n  // march\n \n  for(float z=0.;z<200.;z++){ \n  \n    i = z;\n    d = map(p);\n\n    if ( d < .0001 ) {\n      hit = true;\n      break;\n    } \n    \n    dd += d;\n    p += r * d;\n  \n\n  }\n \n  \n  \n  // hue\n  \n  vec3 col = vec3(.8, .5, .2);\n\n\n\n  n2 = norm(p, vec2(0.0, 1.0E-2 ));\n  n1 = norm(p, vec2(0.0, 2.5E-2 ));\n\n\n  edge = saturate(length(n1-n2)/0.1);\n  \n  col -= edge*22.;\n\n  \n  if (! hit){\n      col = vec3(.93, .95, .90);\n      //col = vec3(1);\n  }\n  \n  \n \n  fragColor = vec4(col, 1.0);\n\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}