{
    "Shader": {
        "info": {
            "date": "1607788189",
            "description": "\n",
            "flags": 96,
            "hasliked": 0,
            "id": "wsVBzd",
            "likes": 20,
            "name": "Madtracing ball physics",
            "published": 3,
            "tags": [
                "demoscene",
                "balls",
                "physics"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "// toying around with physics + madtracing on a saturday afternoon\n// Soundtrack: https://soundcloud.com/virgill/4klang-fireflies\n\n\n\n\nconst float GA =2.39; \n\nmat2 rot = mat2(cos(GA),sin(GA),-sin(GA),cos(GA));\n\nvec3 dof(sampler2D tex,vec2 uv,float rad)\n{\n\tvec3 acc=vec3(0);\n    vec2 pixel=vec2(.002*iResolution.y/iResolution.x,.002),angle=vec2(0,rad);;\n    rad=1.;\n\tfor (int j=0;j<80;j++)\n    {  \n        rad += 1./rad;\n\t    angle*=rot;\n        vec4 col=texture(tex,uv+pixel*(rad-1.)*angle);\n\t\tacc+=col.xyz;\n\t}\n\treturn acc/80.;\n}\n\n// awesome bokeh dof by Dave Hoskins\n\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n\n\tfragColor=vec4(dof(iChannel0,uv,texture(iChannel0,uv).w),1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 24896,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/4klang-fireflies"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 3d ball physics\n// heavyly relying on this shader by hubbe:\n// https://www.shadertoy.com/view/XdtSWn\n\n\n\n#define maxballs 10\n#define radius 0.3\n\n\n\n// Return a \"random\" number.\nfloat rand(vec2 co)\n{\n    float a = 12.9898;\n    float b = 78.233;\n    float c = 43758.5453;\n    float dt= dot(co.xy ,vec2(a,b));\n    float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv=fragCoord.xy/iResolution.xy;   \n    vec4 pos = vec4(0);\n    vec3 spd = vec3(0);\n  \n    if ((fract(iTime/3.43))<=0.005)\n    {\n        pos.x= 2.*rand(-uv+iTime)-1.;\n    \tpos.y= .5*rand( uv+iTime)-1.1;\n        pos.z= 2.*rand(-uv.yx+iTime)-1.; \n        spd.x=.06*rand( uv+iTime);\n        spd.y=.06*rand(-uv+iTime);\n        spd.z=.06*rand( uv.yx+iTime);\n        pos.w = 0.1;\n        if (rand( uv+iTime)>0.6) pos.w=1.0;\n    }    \n    \n    else \n    {\n       \n    \tpos = texture(iChannel0, vec2(float(uv.x),0.)); // get position + type\n        spd = texture(iChannel0, vec2(float(uv.x),1.)).xyz; // get speed  \n        \n//\t\tcalculate touching balls :-)        \n    \tfor (int i = 0; i<maxballs;i++)\n    \t{\n    \t\tvec4 posother = texture(iChannel0, vec2((float(i)+0.5)/iResolution.x,0.));\n            vec3 spdother = texture(iChannel0, vec2((float(i)+0.5)/iResolution.x,1.)).xyz;\n            \n            if(pos.xyz==posother.xyz) continue;\n        \tfloat dista = length(posother.xyz - pos.xyz);\n        \tif (dista < radius * 2.0) \n        \t{\n            pos.xyz= pos.xyz + (posother.xyz-pos.xyz) * radius * 2.001 / dista;  \n            pos.w=posother.w;\n            spd-=0.2*spdother;\n            }\n        }\n\n    pos.xyz -= spd.xyz;\n    spd.xyz *= 1.;\n    spd.y -= 0.003;\n\n    // If we reach the bottom, invert the speed in the y direction.\n    if (pos.y >= 0.7) { spd.y = abs(spd.y * .7); }\n    // if (pos.y <= -0.7) { spd.y = -abs(spd.y * .7); }\n\n    // If we reach left/right wall, invert the speed in the x direction.         \n    if (pos.x >= 1.5) { spd.x = abs(spd.x * .7); }  \n    if (pos.x <= -1.5) { spd.x = -abs(spd.x * .7); }  \n        \n    // If we reach the front/back invert the speed in the z direction.\n    if (pos.z >= 4.) { spd.z = abs(spd.z * .7); }\n    if (pos.z <= -2.) { spd.z = -abs(spd.z * .7); }\n      \n    }\n\n    if (fragCoord.y == 0.5) fragColor = vec4(pos); // write position\n    else fragColor = vec4(spd,1.);  // write speed\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define maxballs 10\n#define radius 0.3\n\n\nfloat color = 0.58;\nfloat temp = 0.1;\nfloat temp2 = 1.0;\nfloat temp3 = 0.1;\n\nvec3 pal( in float t)\n{\n    return  1.+0.5*cos(20.*(vec3(1.9,1.,1.)*t+vec3(.0,.15,.2)) );\n}\n\n// \tsphere\nfloat sphere(vec3 p, vec3 position)\n{\t\n\treturn length(p+position)-radius;\n}\n\n\n\nfloat pattern(vec2 p)\n{\n    p.x += 5.;\n    p.y *= 2.;\n    p = floor(p*2.);\n    p.y += floor(iTime*.1)*17.;\n    p = floor(p);\n    return (sin(p.x*p.y) > .8) ? 2. : .99;\n}\n\n\n\n\nvec3 map(vec3 p)\n{\n\tvec3 d = vec3(1);\n    dmin(d, 1.+p.y,.4+temp*noise(5.*p+iTime), 3.); \t\n    dmin(d, 2.-p.z,(-0.3+.99*abs(sin(10.*p.y))+1.5*temp*p.y), 0.); \t// back\n    dmin(d, 2.-abs(p.x), -0.30+.99*abs(sin(5.*p.z))*temp2+.39*abs(cos(5.*p.y)), 3.); \t\t// sides\n    \n\t\t\n\n    // light tubes\n    vec3 q = abs(p);\n    q.x -= 2.;\n    q.y -= 1.;\n    q.z -= 2.;\n    dmin(d, length(q.xy+0.05)-.05, 1.*temp3*4., 0.); \t\t\n    dmin(d, length(q.yz)-.05, 1.*temp3*4., 0.); \n    dmin(d, length(q.xz)-.05, 1.*temp3*4., 0.); \n\n    for (int i=0; i<maxballs; i++)\n    {\n        vec4 pos = texture(iChannel1, vec2((float(i)+0.5)/iResolution.x,0.));\n  \n        dmin(d,sphere(p,pos.xyz),pos.w,-0.5);\n    }\n    return d;\n}\n\n\n\nvec3 normal(vec3 p)\n{\n\tvec2 e = vec2(0, .0001);\n\treturn normalize(map(p).x-vec3(map(p - e.yxx).x, map(p - e.xyx).x, map(p - e.xxy).x));\n}\n\n\n\n\n\n\n//***************************************************************************************************\n// main\n//***************************************************************************************************\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n\n    if ((fract(iTime/(3.43*4.)))>0.9375)\n    temp=1.;\n    if ((fract(iTime/(3.43*8.)))>0.75)\n    temp2=sin(iTime);\n    if ((fract(iTime/(3.43*2.)))<0.5)\n    temp3=0.3;;\n    \n\n    fragColor =vec4(0.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\t// borders :(\n\tif( uv.y>.1 && uv.y<.9)\n\t{\n    \tfloat t1 = 0., t2 = 0.,t3=0., seed = 0.;\n\t\t\n        // camera\n\t\tvec3 ro1 = vec3(0, 0, -3.), rd1 = normalize(vec3((2.*fragCoord.xy-iResolution.xy)/iResolution.x, 1));\n\t\t\n        // rotate scene\n\t\tpR(rd1.xz,-.19*sin(0.17*iTime));\n\t\tpR(rd1.yz, .2*sin(0.29*iTime));\n\n//***************************************************************************************************\n// Cast ray\n//***************************************************************************************************     \n\n       \n        seed=uv.x*uv.y+uv.y+uv.x+fract(iTime);\n\t\tvec3 scol=vec3(0),m1, m2, m3,  ro2,rd2,nor1, nor2,pos1,pos2,pos3;\n\t    \n\t\tfor( int i = 0; i < 150; i++ )\n\t\t{\n            // every iteration a new seed\n            seed=32.+seed*fract(seed+iTime);\n           \t\n            // raymarch 1st pass\n           \tpos1 = ro1+rd1*t1;\t\t\n        \tm1 = map(pos1);\n\t\t\tt1+=0.35*(m1.x); \t\n\t\t\t\n            if (m1.x<0.00001) \n            {\n            break;\t\t \n            }\n        }\n        \n        float depth = clamp(0.1*t1-0.4,0.,1.)+0.05;\n        t2=0.;\n      \n        // bounce\n\t  \tnor1 = normal(pos1); \n       \tfor( int i = 1; i < 100 ; i++ )\n      \t{         \n            // every iteration a new seed\n            seed=32.+seed*fract(seed);            \n\t\t\trd2 = mix(reflect(rd1,nor1),hashHs(nor1,seed),m1.y);\t// reflect depending on material\t\n            pos2 = pos1+ rd2*t2;\n\t\t\tm2 = map(pos2); \n            t2+=.35*(m2.x);\n            scol += pal(m2.z+color)*step(1., m2.y);\n       \n        }\n\n\t\t//fragColor =vec4(.008*scol+1.*texture(iChannel0, uv).xyz)*.7,.5; // with blur\n        \n        fragColor = clamp(vec4( (0.005*scol+.7*texture(iChannel0,uv).xyz),depth),0.,1.);\n    \n}\n\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void dmin(inout vec3 d, float x, float y, float z)\n{\n\tif( x < d.x ) d = vec3(x, y, z);\n}\n\n// 3D noise function (IQ)\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n\tp-=ip;\n\tvec3 s=vec3(7, 157, 113);\n\tvec4 h=vec4(0, s.yz, s.y+s.z)+dot(ip, s);\n\tp=p*p*(3.-2.*p);\n\th=mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n\th.xy=mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// hash without sine\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 19.19;\n    p *= p + p;\n    return fract(p);\n}\n\n\n// method by fizzer\nvec3 hashHs(vec3 n, float seed)\n{\n    float u = hash11( 78.233 + seed);\n    float v = hash11( 10.873 + seed);\n    float a = 6.2831853 * v;\n    u = 2.0*u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n\n// rotation\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p+sin(a)*vec2(p.y, -p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}