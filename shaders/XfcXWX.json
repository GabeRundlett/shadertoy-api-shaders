{
    "Shader": {
        "info": {
            "date": "1714493864",
            "description": "Compressed https://www.shadertoy.com/view/NlSGDz to less lines of code and less methods. Nothing was changed or added or altered. All credit goes to https://www.shadertoy.com/user/TheTurk\n\nHave the perlinNoise method down to 4 lines, might do 3d soon",
            "flags": 0,
            "hasliked": 0,
            "id": "XfcXWX",
            "likes": 5,
            "name": "Compressed Fast 2D Perlin Noise",
            "published": 3,
            "tags": [
                "noise",
                "fast",
                "perlin",
                "compressed"
            ],
            "usePreview": 0,
            "username": "homek",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "\n// implementation of MurmurHash (https://sites.google.com/site/murmurhash/) for a  \n// 2-dimensional unsigned integer input vector.\n\nint hash(uvec2 x, uint seed){\n    const uint m = 0x5bd1e995U;\n    uint hash = seed;\n    // process first vector element\n    uint k = x.x; \n    k *= m;\n    k ^= k >> 24;\n    k *= m;\n    hash *= m;\n    hash ^= k;\n    // process second vector element\n    k = x.y; \n    k *= m;\n    k ^= k >> 24;\n    k *= m;\n    hash *= m;\n    hash ^= k;\n\t// some final mixing\n    hash ^= hash >> 13;\n    hash *= m;\n    hash ^= hash >> 15;\n    return int(hash);\n}\n\nfloat perlinNoise(vec2 position, uint seed) {\n    vec2 fractPosition = fract(position);\n    uvec2 cellCoordinates = uvec2(floor(position));\n    vec2 t = fractPosition * fractPosition * fractPosition * (fractPosition * (fractPosition * 6.0 - 15.0) + 10.0);\n    return mix(mix(dot(vec2(((hash(cellCoordinates, seed) & 1) * 2) - 1 , (((hash(cellCoordinates, seed) >> 1) & 1) * 2) - 1), fractPosition), dot(vec2(((hash((cellCoordinates + uvec2(1, 0)), seed) & 1) * 2) - 1 , (((hash((cellCoordinates + uvec2(1, 0)), seed) >> 1) & 1) * 2) - 1), fractPosition - vec2(1.0, 0.0)), t.x), mix(dot(vec2(((hash((cellCoordinates + uvec2(0, 1)), seed) & 1) * 2) - 1 , (((hash((cellCoordinates + uvec2(0, 1)), seed) >> 1) & 1) * 2) - 1), fractPosition - vec2(0.0, 1.0)), dot(vec2(((hash((cellCoordinates + uvec2(1, 1)), seed) & 1) * 2) - 1 , (((hash((cellCoordinates + uvec2(1, 1)), seed) >> 1) & 1) * 2) - 1), fractPosition - vec2(1.0, 1.0)), t.x), t.y);\n}\n\nfloat FBM(vec2 position, int frequency, int octaveCount, float persistence, float lacunarity, uint seed) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    float currentFrequency = float(frequency);\n    uint currentSeed = seed;\n    for (int i = 0; i < octaveCount; i++) {\n        // This could be faster if you made a single dim murmur hash alg but I'm going for compression, you can also just remove this\n        currentSeed = uint(hash(uvec2(currentSeed), 0x0U)); // create a new seed for each octave\n        \n        value += perlinNoise(position * currentFrequency, currentSeed) * amplitude;\n        amplitude *= persistence;\n        currentFrequency *= lacunarity;\n    }\n    return (value + 1.) * 0.5;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = fragCoord / iResolution.xy;\n    position.x *= iResolution.x / iResolution.y;\n    position += iTime * .25;\n    uint seed = 0x578437adU; // can be set to something else if you want a different set of random values\n    // float frequency = 16.0;\n    // float value = perlinNoise(position * frequency, seed); // single octave perlin noise\n    float value = FBM(position, 10, 7, 0.5, 2.0, seed); // multiple octaves\n    fragColor = vec4(vec3(value), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}