{
    "Shader": {
        "info": {
            "date": "1673187580",
            "description": "Asked chatGPT to write a rotating field box ( unsigned )",
            "flags": 0,
            "hasliked": 0,
            "id": "ctSGWh",
            "likes": 0,
            "name": "ChatGPT Rotating field box",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "BitsnBobs",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Rotation angle (in radians)\n    float angle = iTime * 0.5;\n\n    // Rotation matrix\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Rotate the coordinate system\n    vec2 p = rot*uv;\n\n    // Box size\n    vec2 s = vec2(0.3, 0.4);\n\n    // Calculate the distance from the point to the box\n    float d = length(max(abs(p) - s, 0.0)) + min(max(abs(p.x), abs(p.y)), 0.0);\n\n    // Convert the distance to a color\n    vec3 color = vec3(d);\n\n    fragColor = vec4(color, 1.0);\n}\n\n/*\n\nwrite a shadertoy sdf box that rotates over time\nHere is a modified version of the previous shader that will animate the rotation of the box over time:\n\nCopy code\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Rotation angle (in radians)\n    float angle = iTime * 0.5;\n\n    // Rotation matrix\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Rotate the coordinate system\n    vec2 p = rot*uv;\n\n    // Box size\n    vec2 s = vec2(0.3, 0.4);\n\n    // Calculate the distance from the point to the box\n    float d = length(max(abs(p) - s, 0.0)) + min(max(abs(p.x), abs(p.y)), 0.0);\n\n    // Convert the distance to a color\n    vec3 color = vec3(d);\n\n    fragColor = vec4(color, 1.0);\n}\nThis shader will draw a red box that rotates around the center of the screen. The rotation speed is determined by the value of iTime, which is a built-in variable in Shadertoy that contains the elapsed time in seconds. You can adjust the rotation speed by multiplying iTime by a factor. For example, to rotate the box at half the speed, you could use angle = iTime * 0.25.\n\nI hope this helps! Let me know if you have any questions.\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}