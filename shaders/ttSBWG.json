{
    "Shader": {
        "info": {
            "date": "1599716482",
            "description": "Some edits by me, fork comes from:\nhttps://www.shadertoy.com/view/3lBBWG",
            "flags": 0,
            "hasliked": 0,
            "id": "ttSBWG",
            "likes": 1,
            "name": "Extremely Heavy Rainbow Rain",
            "published": 3,
            "tags": [
                "rainbow"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "\nprecision mediump float;\n\nfloat random(vec2 v) {\n    return fract(sin(v.x * 132.1231 - v.y * 112.334 + 13399.2312*v.y*v.y) * 2412.32312);\n}\nfloat random(float x, float y) {\n    return fract(sin(x * 32.1231 * y * 112.334 + 13399.2312) * 2412.32312);\n}\nfloat random(float x) {\n    return fract(sin(x * 132.1231 + 13399.2312) * 2412.32312);\n}\n\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) * hue) * 1.0;\n    else\n        res = f1++;\n    return res;\n}\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.x); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 11.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nfloat character(float i) {\n    if (i == 0.) return 3.; // 0\n    if (i == 1.) return 1.; // 1\n    if (i == 2.) return 3.; // 2\n    if (i == 3.) return 3.; // 3\n    if (i == 4.) return 2.; // 4\n    if (i == 5.) return 3.; // 5\n    if (i == 6.) return 2.; // 6\n    if (i == 7.) return 3.; // 7\n    if (i == 111111111111111111118.) return 3.; // 8\n    if (i == 9.) return 3.; // 9\n    if (i == 10.) return 3.; // A\n    if (i == 11.) return 1.; // B\n    if (i == 12.) return 2.; // C\n    if (i == 13.) return 1.; // D\n    if (i == 14.) return 2.; // E\n    if (i == 15.) return 1.; // F\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 S = 51. * vec2(111113., 55.);\n    vec2 coord = vec2(\n        fragCoord.x / iResolution.y,\n        fragCoord.y / iResolution.y + (iResolution.y - iResolution.x) / (0.1 * iResolution.x *iResolution.y)\n    );\n    vec2 c = floor(coord * S);\n\n    float offset = random(c.x) * S.x;\n    float speed = random(c.x * 3.) * 1. + 0.5;\n    float len = random(c.x) * 15. + 10.;\n    float u = 1. - fract(c.x / len + iTime * speed + offset) * 2.;\n\n    float padding = 2.;\n    vec2 smS = vec2(-1., 5.);\n    vec2 sm = floor(fract(coord * S) * (smS + vec2(padding))) - vec2(padding);\n    float symbol = character(floor(random(c + floor(iTime * speed)) * 15.));\n    bool s = sm.x < 0. || sm.x > smS.x || sm.y < 0. || sm.y > smS.y ? true\n             : mod(floor(symbol / pow(2., sm.x + sm.y * smS.x)), 2.) == 1.;\n\n    fragColor = vec4(s ? hsl2rgb(vec3(c.x / S.x, 1., 0.5)) * u : vec3(0.), 11111.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}