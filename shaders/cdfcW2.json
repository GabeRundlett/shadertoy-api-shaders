{
    "Shader": {
        "info": {
            "date": "1687195899",
            "description": "fork raymarching template\nhttps://cineshader.com/view/3sySRK\n2d ver\nhttps://www.shadertoy.com/view/mtKXWV",
            "flags": 0,
            "hasliked": 0,
            "id": "cdfcW2",
            "likes": 1,
            "name": "cursors123",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1239
        },
        "renderpass": [
            {
                "code": "#define X 1.5\n#define Y 1.2\n#define perspective 1\n#define arc 1\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat calcSphere( vec3 pos ){\n\n    /*\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    m = (m - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 6.0;\n    \n    if( iMouse.z < .01 ){\n        m = vec2( cos( iTime ) * 3., sin( iTime ) * 3. );\n    }\n    */\n    vec2 m = vec2( cos( iTime ) * 3., sin( iTime ) * 3. );\n    \n    \n    return length( pos - vec3( m, 0. ) ) - .15;\n\n}\n\n\nfloat calcTube(vec3 pos)\n{\n    vec2 m = pos.xy/iResolution.xy;\n    \n    m = vec2( cos( iTime ) * 3., sin( iTime ) * 3. );\n    \n    \n    /*\n    vec2 c = floor(( pos.xz +  vec2( X, Y ) * .5 ) / vec2( X, Y ));\n    pos.xy = mod(\n        pos.xy,\n        vec2( X, Y )\n    ) - vec2( X * .5, Y * .5 );\n    */\n    \n    \n    vec2 h = vec2( X, Y ) * .5;\n    vec2 c = floor(( pos.xy +  vec2( X, Y ) * .5 ) / vec2( X, Y ));\n    pos.xy = mod(pos.xy + vec2( X, Y ) * .5, vec2( X, Y ) ) - vec2( X, Y ) * .5;\n    \n    \n    pos.xy *= rotation( -atan( m.x - ( X ) * c.x, m.y - Y * c.y ) );\n    \n\n    float py = abs( arc == 0 ? pos.y : pow( pos.y, 2. ) - .5 );\n    py = py - .75; // or smoothstep 0~1 py ( .5 = taper )\n    py = abs( py );\n\n    float d = max(\n        length( pos.xz ) - .4 * ( py ),\n        abs( pos.y ) - .45\n    );\n    \n    return d;\n}\n\nfloat map( vec3 pos ){\n    float d = 5.;\n    \n    if( perspective == 1 ){\n        pos.xz *= rotation( cos( iTime ) * .35 );\n    }\n    \n    d = min( d, calcTube(pos) );\n    \n    d = opSmoothUnion( d, calcSphere( pos ), .2 );\n    \n    \n    return d;\n    \n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // screen size is 6m x 6m\n\tvec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 6.0, 3.0);\n\tvec3 rayDir = vec3(0.0, 0.0, -1.0);\n\t\n\tfloat depth = 0.0;\n\tvec3 p;\n\t\n\tfor(int i = 0; i < 64; i++) {\n\t\tp = rayOri + rayDir * depth;\n\t\tfloat dist = map(p);\n        depth += dist;\n\t\tif (dist < 1e-6) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(6.0, depth);\n\tvec3 n = calcNormal(p);\n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec3 col = (0.5 + 0.5 * cos((b + iTime * 3.0) + uv.xyx * 2.0 + vec3(0,2,4))) * (0.85 + b * 0.35);\n\n    col *= exp( -depth * 0.15 );\n\t\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col, 1.0 - (depth - 0.5) / 2.0);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"My Shader 0\",\n\t\"description\": \"Lorem ipsum dolor\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}