{
    "Shader": {
        "info": {
            "date": "1632401843",
            "description": "Scrambling/descrambling using modular multiplicative inverse function. Press mouse left button for descrambling.",
            "flags": 32,
            "hasliked": 0,
            "id": "ssy3Wd",
            "likes": 1,
            "name": "Scramble/descramble",
            "published": 3,
            "tags": [
                "inverse",
                "reversible",
                "scramble"
            ],
            "usePreview": 0,
            "username": "Kypsis",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "// ...and descramble output from BufferA\n\nuint un_rhashx(uint n) {\n    return (n * 567u) % 640u;\n}\n\nuint un_rhashy(uint n) {\n    return (n * 247u) % 360u;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Mouse\n    vec4 m = iMouse / iResolution.x;\n    \t\n    // If mouse down, modify iChannel0 from Buffer A (descramble)\n\tif(m.z > 0.0) {\n        // Discard coordinates outside screen range\n        if (int(fragCoord.y) > 359 || int(fragCoord.x) > 639) discard;\n        fragColor = texelFetch(\n            iChannel0, \n            ivec2(\n                un_rhashx(uint(fragCoord.x)),\n                un_rhashy(uint(fragCoord.y))\n            ), \n            0);\n\n    } \n    else {\n    // else just show the texture from Buffer A\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord),0);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Scramble iChannel0 input using modular multiplicative inverse function...\n\nuint rhashx(uint n) {\n    return (n * 3463u) % 640u;\n}\n\nuint rhashy(uint n) {\n    return (n * 3463u) % 360u;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Discard coordinates outside screen range\n    if (int(fragCoord.y) > 359 || int(fragCoord.x) > 639) discard;\n    \n    fragColor = texelFetch(\n        iChannel0, \n        ivec2(\n            rhashx(uint(fragCoord.x)),\n            rhashy(uint(fragCoord.y))\n        ), \n        0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}