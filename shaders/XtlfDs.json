{
    "Shader": {
        "info": {
            "date": "1513990188",
            "description": "merry xmas!",
            "flags": 0,
            "hasliked": 0,
            "id": "XtlfDs",
            "likes": 6,
            "name": "Merry Xmas 2017",
            "published": 3,
            "tags": [
                "font",
                "snow",
                "xmas"
            ],
            "usePreview": 1,
            "username": "Del",
            "viewed": 3020
        },
        "renderpass": [
            {
                "code": "// merry xmas 2017 - Del.\n#define roundnes 0.035\n\n#define PI 3.14159265\n#define DEG2RAD ((PI * 2.0) / 360.0)\n\nfloat subtract(float a, float b)\n{\n\treturn min(max(a, -b), -roundnes) + length(max(vec2(roundnes) + vec2(a, -b), vec2(0.0)));\n}\n\n // --- access to the image of ascii code c\nfloat char(inout vec2 p, int C,float d,float w)\n{\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.)\n    {\n        p.x -= w;\n        return d;\n    }\n    vec4 cc = textureGrad( iChannel0, p/16. + fract( vec2(C, 15-C/16) / 16. ) , dFdx(p/16.),dFdy(p/16.) );\n    p.x -= w;\n    return min(d,(cc.w-0.5)*0.3);\n}\n\n// http://mercury.sexy/hg_sdf/\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size)\n{\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n\nfloat fontDist(vec2 p)\n{\n    p.x *= 0.5;\n    p.x += iTime*0.1;\n    p.y += iTime*0.07;\n\n    p.x += pMod1(p.y,0.18)*0.2;\t\t// offset X based on yMod\n    pMod1(p.x, 1.5);\t\t\t\t\t// xMod\n    p += vec2(0.74,0.09);\n    p*=5.2;\n    \n    float d = 1.0;\n    float w = 0.45;\n    \n    d =  char(p,77,d,w);\t//M\n    d =  char(p,69,d,w);\t//E\n    d =  char(p,82,d,w);\t//R\n    d =  char(p,82,d,w);\t//R\n    d =  char(p,89,d,w);\t//Y\n    p.x -= w*0.75;\n    d =  char(p,67,d,w);\t//C\n    d =  char(p,72,d,w);\t//H\n    d =  char(p,82,d,w);\t//R\n    d =  char(p,73,d,w);\t//I\n    d =  char(p,83,d,w);\t//S\n    d =  char(p,84,d,w);\t//T\n    d =  char(p,77,d,w);\t//M\n    d =  char(p,65,d,w);\t//A\n    d =  char(p,83,d,w);\t//S\n    return d;\n}\n\n// render some Repeating text\nvec4 shapeDist(vec2 p)\n{\n    vec4 res = vec4(0.0);\n    res.w = subtract(-1.0,fontDist(p));\n    res.xyz = vec3(0.8,0.7,0.4);\n    return res;\n}\n\nvec4 maskSharp(vec2 p)\n{\n    vec4 res = shapeDist(p);\n    res.w = clamp(res.w * 250.0, 0.0, 1.0);\n    return res;\n}\n\nfloat maskBlurry(vec2 p)\n{\n    return clamp((shapeDist(p).w + 0.003) * 75.0, 0.0, 1.0);\n}\n\nvec3 normalAt(vec2 p)\n{\n    float ps = 1.0 / iResolution.x;\n    float x = maskBlurry(p - vec2( ps, 0.0)) - maskBlurry(p + vec2( ps, 0.0));\n    float y = maskBlurry(p - vec2(0.0,  ps)) - maskBlurry(p + vec2(0.0,  ps));\n    return normalize(vec3(x, y, 1.0));\n}\n\nvec3 LitText(vec2 p)\n{\n    vec3 color = vec3(0.2,0.3,0.2);\n    vec4 res = maskSharp(p);\n    float shade = 0.0;\n    if (res.w>0.0)\n    {\n        float x = (0.5+sin(iTime*0.75))*2.2;\n        float y = (0.5+cos(iTime*1.35))*0.8;\n        vec3 lightPos = vec3(x-1.1, y-0.5,0.25);\n        vec3 toLight = lightPos - vec3(p, 0.0);\n        vec3 normal = normalAt(p);\n        color = res.xyz;\n        color *= 0.35+clamp(dot(normalize(toLight), normal), 0.0, 1.0) / 0.65 ;;\n        \n    }\n    return color;\n}\n\n\t// GooFunc\n\tfloat SnowFunc(vec2 uv)\n\t{\n\t\tfloat s = sin(iTime*0.19);\n\t\tfloat s2 = 0.5 + sin(iTime*0.07);\n\t\tvec2 d = uv*(14.6 + s*0.23);\n\t\td.x += iTime*0.54 + sin(d.x + d.y + iTime*0.56)*0.3;\n\t\td.y += iTime*1.77 + sin(d.x + iTime*0.13)*-0.71;\n\t\tfloat v1 = length(0.5 - fract(d.xy))  -1.02;\n\t\td = (1.0 - 9.5)*0.5 + (uv*9.5);\n\t\tfloat v2 = length(0.5 - fract(d.xy));\n\t\tv1 *= (1.0 - v2*v1);\n\t\tv1 = v1*v1*v1;\n\t\tv1 *= 1.9 + s2*0.2;\n\t\treturn v1;\n\t}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = ( fragCoord -.5*iResolution.xy ) / iResolution.y;\n    vec3 color = vec3(0.0);\t//LitText(p);\n    \n    vec2 uv = p;\n    float d = p.y-2.0;\n    if (d<0.0)\n    {\n        uv.x *= -32. / d;\n        uv.y = -(32./d);\n        \n        uv.x -= 2.0;\n        uv.y -= 16.0;\n        color = LitText((uv)*0.25);\n    }\n    \n    float goo = SnowFunc(p);\n    goo = mix(0.396,0.478,goo) * -1.92;\n    float avg = goo;\n    goo = clamp(goo,0.0,1.0);\n    vec3 k = vec3(goo);\n    \n    float alpha = 1.0;\n    if (avg < 13.1)\n    {\n        // darken & alpha edge of goo...\n        avg = clamp(avg, 0.0, 1.0);\n        k *= avg + 1.1;\n        alpha = clamp((avg*avg)*5.5, 0.0, 1.0);\n    }\n    color = mix(color,k,alpha);\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}