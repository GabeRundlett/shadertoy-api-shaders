{
    "Shader": {
        "info": {
            "date": "1600649108",
            "description": "fork- Spooky Corridor\n//imagen\n//Referencia:por rammoskar en 2018-05-19\n//https://www.shadertoy.com/view/ldcfD2\n//sonido\n// fork https://www.shadertoy.com/view/MdfXWX\n//https://www.shadertoy.com/view/MdfXWX\n",
            "flags": 8,
            "hasliked": 0,
            "id": "3dtcRM",
            "likes": 2,
            "name": "fork- Spooky Corridor",
            "published": 3,
            "tags": [
                "forkspookycorridor"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "//Por JorgeFlores-jorge2017a1- 20-sep-2020\n//Referencia:por rammoskar en 2018-05-19\n//https://www.shadertoy.com/view/ldcfD2\n\n//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n\tfloat planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    res =opU3(res, vec3(planeDist3,33.0,MATERIAL_NO)); \n    res =opU3(res, vec3(planeDist4,33.0,MATERIAL_NO)); \n  \n\tvec3 q=p;\n    float cz=20.00;\n    q.z = mod(q.z+0.5*cz,cz)-0.5*cz;\n    p=q;\n\t\n    \n    \n    float sdb1= sdBox(p-vec3(-15.0,5.0,0.0), vec3(0.5,10.0,10.0) ); //pared izq\n    float sdb2= sdBox(p-vec3( 15.0,5.0,0.0), vec3(0.5,10.0,10.0) ); //pared der\n    float sdb3= sdBox(p-vec3( 0.0,-5.0,0.0), vec3(15.0,0.5,10.0) ); // piso\n    float sdb4= sdBox(p-vec3( 0.0,15.0,0.0), vec3(15.0,0.5,10.0) ); //techo\n\n    float sdb2BVentana= sdBox(p-vec3( 15.0,5.0,0.0), vec3(1.0,5.0,3.0) ); //pared der-ventana\n    float sdb1BPuerta= sdBox(p-vec3(-15.3,3.0,0.0), vec3(1.0,8.0,3.0) ); //pared izq\n    //puerta y diferencia \n     sdb2= differenceSDF(sdb2, sdb2BVentana);\n\t\n    \n    float sdcy1= sdCylinderYZ(p-vec3(-15.0,3.0,1.0), vec2(0.15,1.2));\n\tfloat sdsp1= sdSphere(p- vec3(-13.2,3.0,1.0), 0.5 );\n        \n   \n    res =opU3(res, vec3(sdb1,-1.0,3.0));\n    res =opU3(res, vec3(sdb2,-1.0,3.0));\n    res =opU3(res, vec3(sdb3,-1.0,4.0));\n    res =opU3(res, vec3(sdb4,COLOR_NO,4.0));\n    res =opU3(res, vec3(sdb1BPuerta,34.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdcy1,2.0,MATERIAL_NO));\n    res =opU3(res, vec3(sdsp1,3.0,MATERIAL_NO));\n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\nfloat BrickPattern(in vec2 p) \n{\n  p *= vec2 (1.0, 2.8);\n  vec2 f = floor (p);\n  if (2. * floor (f.y * 0.5) != f.y) \n    p.x += 0.5;\n  p = smoothstep (0.03, 0.08, abs (fract (p + 0.5) - 0.5));\n  return 1. - 0.9 * p.x * p.y;\n}\n\n\nfloat GridPattern(in vec2 uv)\n{\n  return 0.5*clamp(10.*sin(PI*uv.x) + 10.5, 0.0, 1.0)\n       / 0.5*clamp(10.*sin(PI*uv.y) + 10.5, 0.0, 1.0);\n}\n\nfloat SquareHolePattern(in vec2 uv)\n{\n  float thickness = 0.4;\n  float t = cos(uv.x*2.0) * cos(uv.y*2.0) / thickness;\n  return smoothstep(0.1, 0.0, t*t);\n}\n\nfloat floorPattern(vec2 p) \n\t{  return SquareHolePattern(p*7.2 - vec2(0.0, 0.0));}\n\nfloat roofPattern(vec2 p) \n\t{\treturn GridPattern(p*5.0);}\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if (id_material==2.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }    \n    \n    \n    if (id_material==3.0)\n    {\n    \tvec2 uv=p.zy;\n        uv*=0.345;\n\n        float n=randomUV(uv);\n        vec3 brick = vec3(1.0, 0.16, 0.12)*(0.1 + 0.9 * n);\n        float pattern =  BrickPattern(uv);\n\t\t\n        \n        vec3 mortar = vec3(1.0);\n\t\tvec3 c = mix(brick, mortar, pattern);\n        return c;\n    }    \n    \n    if (id_material==4.0)\n    {\n    \tvec2 uv=p.xz;\n        uv*=0.38;\n    \t//return  floorPattern(uv) *vec3(1.0);\n        return  SquareHolePattern(uv) *vec3(1.0);\n        \n    }\n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n   \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.6);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    \n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*5.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n\n    \n    vec3 ro=vec3(0.0,2.0,-25.0+t);\n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    float tt = mod(iTime,10.0);\n    float mt = 2.0;\n    float t1 = smoothstep(mt*0.0, mt*1.0, tt);\n\tfloat t2 = smoothstep(mt*1.0, mt*2.0, tt); \n\tfloat t3 = smoothstep(mt*2.0, mt*3.0, tt);\n    if (t1<t2)\n         rd.x+=0.5*sin(iTime);\n   \tif (t2<t1)\n        rd.y+=0.5*sin(iTime);\n    if (t3<t2)\n        rd.z+=0.5*sin(iTime);\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat saturate(float f)\n{ return clamp(f,0.0,1.0);}\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nfloat randomUV(vec2 uv) \n{ return fract(sin(dot(uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\nif (i==3 ) {return vec3(0,255,0)/255.0; }\nif (i==4 ) {return vec3(0,0,255)/255.0; }\nif (i==5 ) {return vec3(255,255,0)/255.0; }\nif (i==6 ) {return vec3(0,255,255)/255.0; }\nif (i==7 ) {return vec3(255,0,255)/255.0; }\nif (i==8 ) {return vec3(192,192,192)/255.0; }\nif (i==9 ) {return vec3(128,128,128)/255.0; }\nif (i==10 ) {return vec3(128,0,0)/255.0; }\nif (i==11 ) {return vec3(128,128,0)/255.0; }\nif (i==12 ) {return vec3(0,128,0)/255.0; }\nif (i==13 ) {return vec3(128,0,128)/255.0; }\nif (i==14 ) {return vec3(0,128,128)/255.0; }\nif (i==15 ) {return vec3(0,0,128)/255.0; }    \nif (i==16 ) {return vec3(255, 204, 188)/255.0; }\nif (i==17 ) {return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) {return vec3(0.5, 0.5, 0.8); }\nif(i== 19 ) {return vec3(1, 0.5, 0);} \nif(i== 20 ) {return vec3(1.0, 1.0, 1.0);} \nif(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);} \nif(i== 22 ) {return vec3(0, 1, 1);} \nif(i== 23 ) {return vec3(85./255., 205./255., 252./255.);} \nif(i== 24 ) {return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );} \nif(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 26 ){ return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \n\nif(i== 27 ) { float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n\t\t\treturn vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c; } \nif(i== 28 ) { return checkerBoard(mObj.p.x, mObj.p.z, 3.0);} \nif(i== 29 ) { return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );   } \nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\nif(i== 32 ){ return vec3(185./255.0 , 159.0/255.0 , 93.0/255.0);}\n\nif (i==33 ) {return  mix(vec3(0.0), vec3(0.20,0.32,1.0), sin(itime*0.5)); }\nif (i==34 ) {return vec3(0.7); }\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//modificado por jorgeFlores --:)\n// fork https://www.shadertoy.com/view/MdfXWX\n//https://www.shadertoy.com/view/MdfXWX\n//Creado por Andre en 2014-08-11\n\n//#define PI2 6.28318530718\n#define RES 0.02\n#define trunc(a) float(int(a))\n\nfloat n2f(float note)\n{\n   return 55.0*pow(2.0,(note-3.0)/12.); \n}\n\nvec2 bass(float time, float tt, float note)\n{\n    if (tt<0.0)\n      return vec2(0.0);\n\n    float freqTime = 6.2831*time*n2f(note);\n    \n    return vec2(( sin(     freqTime\n                      +sin(freqTime)*7.0*exp(-2.0*tt)\n                     )+\n                  sin(     freqTime*2.0\n                      +cos(freqTime*2.0)*1.0*sin(time*3.14)\n                      +sin(freqTime*8.0)*0.25*sin(1.0+time*3.14)\n                    )*exp(-2.0*tt)+\n                  cos(     freqTime*4.0\n                      +cos(freqTime*2.0)*3.0*sin(time*3.14+0.3)\n                    )*exp(-2.0*tt)\n                )\n                \n                *exp(-1.0*tt) );\n}\n\nvec2 duhduh(float time, float tt)\n{\n   float bn = 0.0;\n   tt = mod(tt,48.0);\n   if (tt>=16.0)\n      if (tt>=40.0)\n         bn -= 5.0;\n      else\n         if (mod(tt,8.0)>=4.0)\n            bn -= 5.0;\n       \n   tt = mod(tt,8.0);\n   if (tt <4.0)\n     tt = mod(tt,2.0);\n   else\n     tt = mod(tt,4.0);\n   return bass(time,tt-3.0,bn+3.)+\n          bass(time,tt-2.0,bn+3.)+\n          bass(time,tt-1.0,bn+0.)+\n          bass(time,tt-0.0,bn+0.);\n}\n\nvec2 duhduh2(float time, float tt)\n{\n   float bn = 0.0;\n   tt = mod(tt,48.0);\n   if (tt>=16.0)\n      if (tt>=40.0)\n         bn -= 5.0;\n      else\n         if (mod(tt,8.0)>=4.0)\n            bn -= 5.0;\n       \n   int ti = int(mod(tt,8.0)/2.0);\n   tt = mod(tt,2.0);\n   if (ti == 0)\n     return bass(time,tt-0.83,bn+12.0)+\n            bass(time,tt-0.50,bn+12.0)+\n            bass(time,tt-0.17,bn+12.0);\n    \n   if (ti == 3)\n     return bass(time,tt-0.66,bn+15.)+\n            bass(time,tt-0.0,bn+15.);\n    \n   return bass(time,tt-0.66,bn+12.)+\n          bass(time,tt-0.0,bn+12.);\n}\n\nfloat note(float nr)\n{\n    if (nr<=15.)  return -120.;\n    if (nr<=16.)  return 31.;\n    if (nr<=17.)  return 56.;\n    \n    if (nr<=22.)  return 55.;\n    if (nr<=23.)  return -120.;\n    \n    if (nr<=24.)  return 58.;\n    if (nr<=25.)  return 42.;\n    if (nr<=30.)  return 43.;\n    \n    if (nr<=33.)  return -120.;\n    \n    if (nr<=34.5)  return 43.;\n    if (nr<=35.5)  return 39.;\n    if (nr<=37.0)  return 31.;\n    if (nr<=39.0)  return 34.;\n    if (nr<=39.5)  return 32.;\n    if (nr<=40.5)  return 31.;\n    if (nr<=41.0)  return -120.;\n    if (nr<=42.5)  return 31.;\n    if (nr<=43.0)  return 44.;\n    if (nr<=46.0)  return 43.;\n    \n    return -120.0;\n}\n\nfloat getSample(float time, float tt, float FM)\n{\n    tt -= mod(tt,RES);\n\n    float note1 = note(tt);\n    float note2 = note(tt+0.5);\n    if (note1 <0.0)\n        return 0.0;\n    \n    float stepper = smoothstep(0.1,0.5,mod(tt,0.5));\n    \n    float note = mix(note1,note2,stepper);\n    \n    float angle = PI2*n2f(note)*time;\n    return sin(angle+FM*sin(angle*2.033)+2.0*sin(angle*4.0));\n}\n\nvec2 theramin(float time, float tt)\n{\n    tt = mod(tt,48.0);\n    tt += 1.33;\n    float FM = 0.0;\n    if (tt>=32.)\n        FM = PI2/2.;\n        \n    float ssample;\n    float ta = mod(tt-RES/2.0,RES)-RES/2.0;\n    float halfSin = RES/4.0;//4.0/frequency;\n    if (abs(ta)<halfSin)\n    {\n        float sample1 = getSample(time,tt-RES/2.0,FM);\n        float sample2 = getSample(time,tt+RES/2.0,FM);\n        ssample = mix(sample1,sample2,smoothstep(-halfSin,halfSin,ta));\n    }\n    else\n        ssample = getSample(time,tt,FM);\n    \n    return vec2( ssample);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float tt = time *2.4;\n    \n    float d1 = clamp(duhduh(time,tt).x,-0.8,0.8)*1.3+\n               clamp(duhduh(time,tt-0.33).x,-0.5,0.5)*1.4+\n               clamp(duhduh(time,tt-0.66).x,-0.3,0.3)*2.0;\n    \n    float d2 = clamp(duhduh2(time,tt).x,-0.8,0.8)*.3+\n               clamp(duhduh2(time,tt-0.33).x,-0.8,0.8)*.2+\n               clamp(duhduh2(time,tt-0.66).x,-0.8,0.8)*.1;\n    \n    return 0.2*vec2(d1+0.5*d2,d2+0.5*d1)\n          +0.3*(\n            theramin(time,tt-0.75)*vec2(0.2,0.4)\n           +theramin(time,tt)*vec2(0.6,0.4)\n           +theramin(time,tt-0.506)*vec2(0.4,0.2)\n           +theramin(time,tt-1.00)*vec2(0.1,0.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}