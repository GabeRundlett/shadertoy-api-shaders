{
    "Shader": {
        "info": {
            "date": "1724505106",
            "description": "originals https://www.shadertoy.com/view/lcjyDR https://glslsandbox.com/e#63048.2",
            "flags": 0,
            "hasliked": 0,
            "id": "4fsBDs",
            "likes": 5,
            "name": "universe with stars new",
            "published": 3,
            "tags": [
                "fractal",
                "galaxy",
                "stars",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nuniform sampler2D buf;\n#define time iTime\n#define resolution iResolution.xy\n\n\n#define iterations 11\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define sweeps 50\n\nvec3 hsv2rgb(vec3 c)\n{\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * normalize(mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y));\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv2=fragCoord.xy/iResolution.xy-0.5;\n\tvec2 uv =uv2 * 2.5;\n    \n vec3 dir=vec3(uv*zoom,1.);\n vec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t\n\tfloat t = (1024.0 + time) * 0.1;\n\tvec2 a = vec2(0.0);\n\tvec2 b = a;\n\tfloat c = 1.0;\n\tfloat p = 0.0;\n\tfloat ap = 0.0;\n\tfloat bp =0.2;\n\tfor (int i = 16; i < sweeps + 20; i++)\n\t{\n\t\ta = vec2(sin(t * fract(cos(float(i)) * 2340.1342)), cos(t * 0.0217 * float(i)));\n\t\tb = vec2(cos(t * fract(sin(float(i)) * 397.6848)), sin(t * 0.0143 * float(i)));\n\t\tc = abs(c - smoothstep(-1.0, 1.0, dot(uv - 0.5 * (a + b), a - b)));\n\t\t// visualize gradient control points and fade length/direction\n\t\tap += 0.005/distance(uv,a);\n\t\tbp += 0.005/distance(uv,b);\n\t\tvec2 ua = uv-a, ba = b-a;\n\t\tfloat k = clamp(dot(ua,ba)/dot(ba,ba),0.0,1.0);\n\t\tp += 0.002/length(ua*ba);\n\t}\n\n\tfragColor = vec4(2.5 * hsv2rgb(vec3(time * 0.02, 0.75, pow(c, 3.0))) *pow(vec3(ap,0.0,bp)+p,vec3(2.0)), 1.0);\n    fragColor+= vec4(v*.003,1.);\n      uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,0.55)*20.2, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}