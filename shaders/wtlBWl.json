{
    "Shader": {
        "info": {
            "date": "1598095511",
            "description": "Colorful planes with holes WIP",
            "flags": 32,
            "hasliked": 0,
            "id": "wtlBWl",
            "likes": 0,
            "name": "Planar Shapes",
            "published": 3,
            "tags": [
                "noise",
                "blur",
                "colors"
            ],
            "usePreview": 0,
            "username": "fforw",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "const float minBlur = 0.0003;\nconst float maxBlur = 40.0;\nconst float planeDistance = 1.0;\nconst vec2 off = vec2(-0.5,-0.5);\n\n////////////////////////////////////////////////////// NOISE CODE //////////////////////////////////////////////////////\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n//////////////////////////////////////////////////// NOISE CODE END ////////////////////////////////////////////////////\n\nvec4 plane(float currHeight, float height, vec3 color, vec2 uv, float time , float planeScale, vec2 off)\n{\n    float screenRatio = iResolution.x/iResolution.y;\n\n    float blur = maxBlur - minBlur;\n\n    float deltaZ = (currHeight - height);\n\n    float edge = abs(deltaZ) * blur / planeDistance;\n\n    float scale = (0.006 * planeScale/deltaZ);\n\n    float n1 = smoothstep(0.5-edge,.5+edge,noise(vec3(((uv.x - 0.5) * screenRatio) * scale + off.x, (uv.y - 0.5) * scale + off.y, time)));\n\n    return vec4(color, n1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float screenRatio = iResolution.x/iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float height = planeDistance + 0.002 + sin(iTime) * 0.001;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec4 planeColor = plane(height, planeDistance, col, uv, iTime * 0.4, 1.0, vec2(iTime * 2.0,0));\n\n    // Time varying pixel color\n    vec3 col2 = 0.2 + 0.5*sin(iTime+uv.xyx+vec3(1,0,4));\n    vec4 plane2Color = plane(height, planeDistance * 0.998, col2, uv, iTime * 0.35, 2.0, vec2(iTime,0));\n\n    fragColor = vec4(planeColor.xyz,1.0) * planeColor.w + (1.0 - planeColor.w) * (\n    vec4(plane2Color.xyz,1.0) * plane2Color.w + (1.0 - plane2Color.w) * texture(iChannel0, uv)\n    );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////// NOISE CODE //////////////////////////////////////////////////////\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n//////////////////////////////////////////////////// NOISE CODE END ////////////////////////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float screenRatio = iResolution.x/iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord)/iResolution.xy;\n\n    float starNoise = smoothstep(0.97,1.0,noise(vec3(uv.x * screenRatio * 100.0, uv.y * 100.0, 0.0)));\n    fragColor = vec4(starNoise,starNoise,starNoise,1.0);;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}