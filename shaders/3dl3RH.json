{
    "Shader": {
        "info": {
            "date": "1545337426",
            "description": "My take on the GRIS (https://nomada.studio) game's pause menu. I'm not related in any way with the studio that made this beautiful game, just found the pause menu very shadertoyable.\n\nArrow keys are enabled.",
            "flags": 48,
            "hasliked": 0,
            "id": "3dl3RH",
            "likes": 146,
            "name": "GRIS Pause Menu",
            "published": 3,
            "tags": [
                "menu",
                "gris"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 7946
        },
        "renderpass": [
            {
                "code": "// Created by genis sole - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n// Visuals are based on the GRIS game's pause menu by Nomada Studio (https://nomada.studio) \n\nconst float pi = 3.14159;\n\nfloat point(vec2 uv, float e, float w, float r)\n{\n\treturn 1.0 - smoothstep(w, w+e, length(uv) - r);   \n}\n\nfloat circle(vec2 uv, float e, float w, float r)\n{\n\treturn 1.0 - smoothstep(w, w+e, abs(length(uv) - r));\n}\n\nfloat dotted_circle(vec2 uv, float e, float w, float r, float p)\n{\n    float t = (atan(uv.y, uv.x) / pi) * 0.5 + 0.5; \n    \n    float s = floor(290.0*2.0*pi*r);\n    t = (floor(t*s) + 0.5) / s;\n    \n    t = (t*2.0 - 1.0) * pi;\n\n    return point(uv - vec2(cos(t), sin(t))*r, e, w, p);\n}\n\nfloat dotted_line(vec2 uv, float e, float w, float p, vec2 a, vec2 b)\n{\n\tb -= a;\n    uv -= a;\n    \n    vec2 l = normalize(b);   \n    uv = uv * mat2(l, vec2(-l.y, l.x));\n\n    return point(vec2((fract(uv.x*290.0) - 0.5) / 290., uv.y), e, w, p);\n}\n\nfloat rings(vec2 uv, float e, float w, float r, float s, float c)\n{\n    float l = length(uv);\n\n    return 1.0 - min(max(\n        max(step(l, r), step(r + s*(c-1.0), l)), \n            smoothstep(w, w+e, abs((fract((l-(s*0.5))/s - fract(r/s)) - 0.5) * s))),\n        smoothstep(w, w+e, abs(l - r)) * smoothstep(w, w+e, abs(l - (r + (s*(c - 1.0))))));\n}\n\nfloat rings2(vec2 uv, float e, float w, float r, float s)\n{\n    float l = length(uv);\n\n    return 1.0 - smoothstep(w, w+e, abs(l - r)) \n        * smoothstep(w, w+e, abs(l - (r + s)));\n}\n\nmat2 rot(float t) \n{\n    float s = sin(t);\n    float c = cos(t);\n\treturn mat2(c, s, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tfloat e = 1.0/iResolution.x;\n    vec2 uv = (fragCoord - iResolution.xy*0.5) * e;\n    \n    e = 1.5*e;\n    \n    const vec2 line_p = vec2(0.0, 0.19);\n    float c = dotted_line(abs(uv), e, 0.0001, 0.0, line_p, line_p.yx);\n    vec2 ruv = inversesqrt(2.0) * vec2(uv.x + uv.y, uv.x - uv.y);\n    c += dotted_line(abs(ruv), e, 0.0002, 0.0, line_p, line_p.yx);\n\n    c += dotted_circle(uv * rot(iTime*0.4), e, 0.0, 0.01375, 0.0001);\n    c += dotted_circle(uv * rot(-iTime*0.3), e, 0.0, 0.03125, 0.0001);\n    c += dotted_circle(uv * rot(iTime*0.1), e, 0.0, 0.09625, 0.0001);\n    c += dotted_circle(rot(iTime*0.1)*uv, e, 0.0, 0.37, 0.0001);\n    c *= 0.3;\n    \n    c += rings2(uv, e, 0.0, 0.008125, 0.0025);\n    c += rings2(uv, e, 0.0, 0.02187, 0.05875);\n    c += rings2(uv, e, 0.0, 0.10125, 0.06125);\n    c += rings2(uv, e, 0.0, 0.439375, 0.03125);\n    \n    c += rings2(uv, e, 0.0005, 0.075, 0.040625);\n    c += circle(uv, e, 0.0005, 0.339375);\n    \n    c += rings2(uv, e, 0.001, 0.026875, 0.163125);\n    c += circle(uv, e, 0.001, 0.448125);\n    \n    vec2 p1 = rot(iTime*pi*0.028)*uv - vec2(0.115625, 0.0);\n    c += point(p1, e, 0.0, 0.004375);\n    c += circle(p1, e, 0.0, 0.004375*2.0);\n    \n    vec2 p2 = rot(iTime*pi*0.067 + 0.5)*uv - vec2(0.1625, 0.0);\n    c += point(p2, e, 0.0, 0.0015625);\n    c += rings2(p2, e, 0.0, 0.004375, 0.001875);\n    \n    float cp = texelFetch(iChannel0, ivec2(0), 0).x * pi * 0.5;\n    vec2 p3 = uv - vec2(sin(cp), cos(cp)) * 0.19;\n    c += point(p3, e, 0.0, 0.005);\n    c += rings(p3, e, 0.0, 0.005*2.0, 0.002375, 4.0);\n    c += 0.3*dotted_circle(rot(iTime)*p3, e, 0.0, 0.0195, 0.0001);\n    \n    vec2 p4 = rot(iTime*pi*0.028 + pi*1.2)*uv - vec2(0.339375, 0.0);\n    c += point(p4, e, 0.0, 0.00875);\n    c += rings2(p4, e, 0.0, 0.011875, 0.001875);\n    c += circle(p4, e, 0.0, 0.021875);\n    c += point(rot(iTime*pi*0.143) * p4 - vec2(0.021875, 0.0), e , 0.0, 0.003125);\n    \n    vec2 p5 = rot(iTime*pi*0.00833 + pi*1.3)*uv - vec2(0.448125, 0.0);\n    c += point(p5, e, 0.0, 0.0028125);\n    c += rings2(p5, e, 0.0, 0.00875, 0.003125);\n    c += 0.3*dotted_circle(rot(iTime)*p5, e, 0.0, 0.015, 0.0001);\n\n    vec2 p6 = rot(iTime*pi*0.011)*uv - vec2(0.439375 + 0.03125, 0.0);\n    c += point(p6, e, 0.0, 0.005);\n    c += 0.3*dotted_circle(rot(iTime)*p6, e, 0.0, 0.0078125, 0.0001);\n    c += circle(p6, e, 0.0, 0.0175);\n    vec2 sp6 = rot(iTime*pi*0.27)*p6 - vec2(0.0175, 0.0);\n    c += point(sp6, e , 0.0, 0.0009375);\n    c += circle(sp6, e, 0.0, 0.004375);\n    \n    fragColor = vec4(vec3(pow(0.8*clamp(c, 0.0, 1.0), 0.4545)), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by genis sole 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP  = 38;\nconst int KEY_RIGHT = 39;\n\nfloat key_press(int k) \n{\n   return step(0.5, texelFetch(iChannel1, ivec2(k, 1), 0).x); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (any(notEqual(ivec2(fragCoord), ivec2(0)))) return;\n    \n    fragColor = texelFetch(iChannel0, ivec2(0), 0);\n    \n    if (iFrame == 0) fragColor = vec4(-1.0);\n    \n    fragColor.x += (fragColor.y - fragColor.x) * iTimeDelta*10.0;\n    fragColor.y += 2.0*(key_press(KEY_RIGHT) - key_press(KEY_LEFT)) \n        - key_press(KEY_UP)*fragColor.y;\n    fragColor = clamp(fragColor, -1.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}