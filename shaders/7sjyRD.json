{
    "Shader": {
        "info": {
            "date": "1643207023",
            "description": "Star dynamics in 3d. Mass conservation guaranteed.",
            "flags": 32,
            "hasliked": 0,
            "id": "7sjyRD",
            "likes": 27,
            "name": "Star systems evolution in 3d 2",
            "published": 3,
            "tags": [
                "simulation"
            ],
            "usePreview": 0,
            "username": "ersh",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n// https://en.wikipedia.org/wiki/Smoothed-particle_hydrodynamics\n\n#define PALETTE        0    // 0=fire, 1=blue, 2=green\n\nvec3 col(float x) {\n  return vec3(\n#if PALETTE == 0\n      clamp(x, 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.),\n      clamp(x-2./3., 0., 1./3.)\n#elif PALETTE == 1\n      clamp(x-2./3., 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.),\n      clamp(x, 0., 1./3.)\n#elif PALETTE == 2\n      clamp(x-2./3., 0., 1./3.),\n      clamp(x, 0., 1./3.),\n      clamp(x-1./3., 0., 1./3.)\n#endif\n   ) * 3.;\n}\n\nvec2 I3to2(in vec3 I3, in vec3 R3) {\n    I3 = floor(clamp(I3, vec3(0), R3-1.));\n    float offset = I3.x + I3.y*R3.x + I3.z*R3.x*R3.y;\n    vec2 I2;\n    I2.x = mod(offset, R2.x);\n    I2.y = floor(offset/R2.x);\n    return I2;\n}\n\nmat2 rot(float a) { float s = sin(a), c = cos(a); return mat2(c,-s,s,c); }\n\n#define START_DIST   2.5\n#define FOV          5.\n\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    float sdButton = sdBox(iMouse.xy -  BUTTON_ORIGIN, BUTTON_SZ);\n    if (sdBox(I - BUTTON_ORIGIN, BUTTON_SZ) <= 0.) {\n        O = vec4(0,0,1. - step(0.5, iMouse.z)*step(0., -sdButton)*0.5,1);\n        vec2 inner_sz = BUTTON_SZ - 2.;\n        float sdf = min(sdEquilateralTriangle(-(I - BUTTON_ORIGIN - vec2(3,0)).yx/inner_sz.y)*inner_sz.y,\n                        sdBox(I - BUTTON_ORIGIN + vec2(inner_sz.y,0), vec2(2,inner_sz.y)));\n        O.rgb = mix(O.rgb, vec3(1,1,1), smoothstep(1., -1., sdf));\n        return;\n    }\n\n    O = vec4(0,0,0,1);\n    mat2 rot_yz, rot_xy;            // rotations\n    if (iMouse.x < 0.5 || sdButton <= 0.) {\n      // https://graphtoy.com/?f1(x,t)=(floor(x/5)+smoothstep(0,1,fract(x/5)*10))*0.5&v1=true&f2(x,t)=&v2=false&f3(x,t)=&v3=false&f4(x,t)=&v4=false&f5(x,t)=&v5=false&f6(x,t)=&v6=false&grid=true&coords=0,0,7.451055876709886\n      rot_xy = rot(-(floor(iTime/7.)+smoothstep(0.,1.,fract(iTime/7.)*10.))*0.5);\n      rot_yz = rot(PI*0.40 + (floor(iTime/11.)+smoothstep(0.,1.,fract(iTime/11.)*10.)));\n    } else {\n      vec2 M = (iMouse.xy / R2.xy * vec2(1., -0.5) + vec2(0.5, 0.)) * 2. * PI;\n      rot_yz = rot(-M.y);\n      rot_xy = rot(-M.x);\n    }\n    vec3 p = vec3(0,0,START_DIST);                                       // current ray pos\n    p.yz *= rot_yz;  p.xy *= rot_xy;\n\n    vec3 D = normalize(vec3(I+I, -FOV*R2.y) - vec3(R2.xy, 0.));    // ray direction\n    D.yz *= rot_yz;  D.xy *= rot_xy;\n\n    vec3 R3 = Res2to3(R2.xy);\n    float scale2 = R3.x;\n    float c = 0.;\n    float n_c = 0.;\n    float st = 0.5/R3.z;\n    int n_steps = int(3./st);\n    vec3 st1 = st * D;\n    int n;\n    float axis = 99.;\n    for (p += D*(START_DIST - 1.5), n = 0; n < n_steps; n++, p += st1) {\n        vec3 coord = (p + 0.5) * scale2;\n        if (coord.x >= 0. && coord.y >= 0. && coord.z >= 0. &&\n            coord.x < R3.x && coord.y < R3.y && coord.z < R3.z) {\n            c += T(coord).a;\n            n_c++;\n#define SDF_AXIS(XX)   distance(coord.XX + coord.XX, R3.XX)\n            axis = min(\n                    min(axis, SDF_AXIS(xy)),\n                    min(SDF_AXIS(yz), SDF_AXIS(xz)));\n#define SDF_EDGE(XX)   distance(mod(coord.XX+coord.XX + R3.XX, R3.XX+R3.XX), R3.XX)\n            axis = min(\n                    min(axis, SDF_EDGE(xy)),\n                    min(SDF_EDGE(yz), SDF_EDGE(zx)));\n        }\n    }\n\n\tif (n_c > 0.) {\n        O.rgb = col(log(c*10000./n_c)/12.);\n        if (iMouse.z > 0.5) O.rgb = mix(O.rgb, vec3(1), smoothstep(1., 0., axis)/2.);\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\n#define WALLS_BOUNCE   3          //   0: no bounce;  1: cube  2: sphere  3:wrap\n#define RANGE          5.\n\nconst float dt = 1.;\nconst float G = 0.01;\nconst float m_epsilon = 0.000001;\nconst float speed_rnd = 0.08;\nconst float center_gravity = 0.0008;\n\nvec2 vclamp(vec2 v) {\n    float l = length(v);\n    return l < 10. ? v : v/l;\n}\nvec3 vclamp3(vec3 v) {\n    float l = length(v);\n    return l < 10. ? v : v/l;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 50.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 position)\n{\n    vec3 p3 = vec3(position) + iTime * 500. + 50.0;\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat overlapping_area(vec2 l1, vec2 r1, vec2 l2, vec2 r2) {\n    float x_dist = min(r1.x, r2.x) - max(l1.x, l2.x);\n    float y_dist = min(r1.y, r2.y) - max(l1.y, l2.y);\n    return x_dist > 0. && y_dist > 0. ? x_dist * y_dist : 0.;\n}\nfloat overlapping_volume(vec3 l1, vec3 r1, vec3 l2, vec3 r2) {\n    float x_dist = min(r1.x, r2.x) - max(l1.x, l2.x);\n    float y_dist = min(r1.y, r2.y) - max(l1.y, l2.y);\n    float z_dist = min(r1.z, r2.z) - max(l1.z, l2.z);\n    return x_dist > 0. && y_dist > 0. && z_dist > 0. ? x_dist * y_dist * z_dist : 0.;\n}\n\nvec2 randomizespeed(vec2 v) {\n    return vec2(v.x + (hash12(fract(v)*1573.32)-0.5)*speed_rnd,\n                v.y + (hash12(fract(v)*178362.78)-0.5)*speed_rnd);\n}\nvec3 randomizespeed(vec3 v) {\n    return vec3(v.x + (hash13(fract(v)*1573.32)-0.5)*speed_rnd,\n                v.y + (hash13(fract(v)*178362.78)-0.5)*speed_rnd,\n                v.z + (hash13(fract(v)*9573.234)-0.5)*speed_rnd);\n}\n\n\nvoid I2to3(in vec2 I, in vec3 R3, out vec3 I3) {\n    I = floor(I);\n    //I -= 0.5;\n    float offset = I.x + I.y*R2.x;\n    I3.x = mod(offset, R3.x);\n    I3.y = mod(floor(offset/R3.x), R3.y);\n    I3.z = min(floor(offset/R3.x/R3.y), R3.z-1.);\n}\nvec2 I3to2(in vec3 I3, in vec3 R3) {\n    I3 = floor(clamp(I3, vec3(0), R3-1.));\n    float offset = I3.x + I3.y*R3.x + I3.z*R3.x*R3.y;\n    vec2 I2;\n    I2.x = mod(offset, R2.x);\n    I2.y = floor(offset/R2.x);\n    return I2;\n}\n\n// Gas dynamics layer\nvoid mainImage(out vec4 O, in vec2 I2)\n{\n    vec3 I3, R3;\n    I2to3(I2, R3 = Res2to3(R2.xy), I3);\n#if WALLS_BOUNCE != 3\n    //if (I3.x < 1.5 || I3.y < 1.5 || I3.z < 1.5 || I3.x > R3.x-1.5 || I3.y > R3.y-1.5 || I3.z > R3.z-1.5) { O=vec4(0.); return; }\n    if (any(lessThan(I3, vec3(1.5))) || any(greaterThan(I3, R3-vec3(1.5)))) { O=vec4(0.); return; }\n#endif\n    float sdButton = sdBox(iMouse.xy -  BUTTON_ORIGIN, BUTTON_SZ);\n    if(iFrame < 2 || (iMouse.z > 0. && sdButton <= 0.)) {\n        float r3 = distance(I3, R3/2.);\n        float r2 = distance(I3.xy, R3.xy/2.);\n        float init_r = R3.x/5.;\n        if (r3 < init_r) {\n            vec3 uv = I3 / R3;\n//            O = vec4(-(uv.y - 0.5)*init_r/(r2+1.)*17.,\n//                     (uv.x - 0.5)*init_r/(r2+1.)*17.,\n//                     (hash13(I3)-0.5)*2.,\n//                     hash12(I3.xy)*(init_r-r3)*0.8);\n            vec3 I3c = I3 - R3/2.;\n            vec2 v = pow(2.*G*init_r*init_r*init_r/7./init_r/length(I3c.xy), 0.5) * I3c.xy;\n            O = vec4(-v.y, v.x,\n                     (hash13(I3)-0.5)*2.,\n                     hash12(I3.xy)*(init_r-r3)*0.8);\n        } else {\n//            O = vec4(0.0,0.0,0.0,hash13(I3)*1000.*m_epsilon);\n            O = vec4(0.0);\n        }\n        return;\n    }\n\n    vec4 pt0 = texelFetch(iChannel0, ivec2(I2), 0);\n    vec3 speed0 = pt0.rgb;\n    float mass0 = pt0.a;\n    vec3 f = vec3(0.);\n    vec3 p = vec3(0.);\n    float mass2 = 0.;\n\n    vec3 sh;\n#define RMIN           (-RANGE)\n#define RMAX           (RANGE+0.5)\n    for (sh.z = RMIN; sh.z < RMAX; sh.z+=1.) for (sh.y = RMIN; sh.y < RMAX; sh.y+=1.) for (sh.x = RMIN; sh.x < RMAX; sh.x+=1.) {\n        float l = length(sh);\n        vec3 coord1 = I3 + sh;\n        vec4 pt1 = T(\n#if WALLS_BOUNCE == 3\n            mod(coord1 + R3, R3)\n#else\n            coord1\n#endif\n        );\n        vec3 speed1 = pt1.rgb;\n        float mass1 = pt1.a;\n\n        if (l > 2.1) {    // must be 0.5 but bigger number prevents from collapsing into 2x2 dots.\n            // Gravity, acceleration\n            f += sh/l * mass0*mass1/l/l;\n        }\n\n        // speed: mass transfer, impulse change:\n        vec3 coord_next = coord1 + speed1 * dt;\n        float overlap = overlapping_volume(I3, I3+vec3(1.), coord_next, coord_next+vec3(1.));\n        float dm = mass1 * overlap;\n        mass2 += dm;\n        p += speed1 * dm;\n    }\n\n    // Slight gravity towards the center to compensate the inability to feel further than 10 pts.\n    vec3 to_c = R3/2. - I3;\n    to_c = length(to_c) < 3. ? vec3(0.) : normalize(to_c)*center_gravity;\n\n    O.a = mass2 > m_epsilon ? mass2 : 0.;\n    O.xyz =\n        mass2 > m_epsilon ?\n        vclamp3(randomizespeed(p/mass2 + dt * G*f/(mass0 > m_epsilon ? mass0 : mass2) + dt*to_c)) : vec3(0.);\n#if WALLS_BOUNCE == 1\n#define BOUNCE(X)    if (I3.X <= 11.) { if (O.X < 0.) O.X = abs(O.X)/2.; } else if (I3.X >= R3.X - 12.) { if (O.X > 0.) O.X = -abs(O.X)/2.; }\n    BOUNCE(x)\n    BOUNCE(y)\n    BOUNCE(z)\n#elif WALLS_BOUNCE == 2\n    I3 -= R3/2.;\n    if (length(I3) > R3.x/2.-10. && dot(I3, O.xyz) > 0.) {\n        O.xyz = reflect(O.xyz, normalize(I3));\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// (C) Copyright 2021 by Yury Ershov\n\nconst vec2 BUTTON_SZ = vec2(14, 7);\nconst vec2 BUTTON_ORIGIN = BUTTON_SZ + 1.;\n\n#define R2       iResolution\n#define T(P)     texelFetch(iChannel0, ivec2(I3to2(P, R3)), 0)\n#define PI       3.14159265359\n\nvec3 Res2to3(in vec2 R2) {\n    return vec3(floor(pow(R2.x*R2.y, 1./3.)));  // 1200 / 80 = 13\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdEquilateralTriangle( in vec2 p ) {\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}