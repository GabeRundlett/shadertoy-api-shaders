{
    "Shader": {
        "info": {
            "date": "1672157812",
            "description": "TODO: what's with the artefacts :(",
            "flags": 0,
            "hasliked": 0,
            "id": "Dts3zX",
            "likes": 2,
            "name": "Manually anti-aliased circle",
            "published": 3,
            "tags": [
                "circle",
                "antialiasing",
                "animation"
            ],
            "usePreview": 0,
            "username": "callumacrae",
            "viewed": 206
        },
        "renderpass": [
            {
                "code": "#define PIXELS_PER_PIXEL 8.0\n#define RADIUS 25.0\n#define RADIUS_VAR 3.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 origin = iResolution / 2.0 / PIXELS_PER_PIXEL;\n  float radius = RADIUS + cos(iTime) * RADIUS_VAR;\n\n  // We check the intersections against the pixel represented by rectangle ABCD:\n  //\n  // (x, y)\n  //      __D__\n  //      |   |\n  //      A   C\n  //      |   |\n  //      --B--\n  //           (x + 1, y + 1)\n\n  // Transform the points to test a circle about the point (0, 0) - means we don't\n  // have to worry about the negative values of square roots\n  float x = abs(origin.x - floor(fragCoord.x / PIXELS_PER_PIXEL));\n  float y = abs(origin.y - floor(fragCoord.y / PIXELS_PER_PIXEL));\n\n  float intersectionOnA = sqrt(pow(radius, 2.0) - pow(x, 2.0));\n  bool isIntersectionWithinA = intersectionOnA >= y && intersectionOnA <= y + 1.0;\n\n  float intersectionOnB = sqrt(pow(radius, 2.0) - pow(y + 1.0, 2.0));\n  bool isIntersectionWithinB = intersectionOnB >= x && intersectionOnB <= x + 1.0;\n\n  float intersectionOnC = sqrt(pow(radius, 2.0) - pow(x + 1.0, 2.0));\n  bool isIntersectionWithinC = intersectionOnC >= y && intersectionOnC <= y + 1.0;\n\n  float intersectionOnD = sqrt(pow(radius, 2.0) - pow(y, 2.0));\n  bool isIntersectionWithinD = intersectionOnD >= x && intersectionOnD <= x + 1.0;\n\n  float dist = sqrt(pow(x, 2.0) + pow(y, 2.0));\n  float color = dist < radius ? 1.0 : 0.0;\n\n  if (isIntersectionWithinA && isIntersectionWithinD) {\n    color = (intersectionOnD - x) * (intersectionOnA - y) / 2.0;\n  }\n  if (isIntersectionWithinA && isIntersectionWithinC) {\n    color = (intersectionOnA + intersectionOnC) / 2.0 - y;\n  }\n  if (isIntersectionWithinB && isIntersectionWithinC) {\n    color = 1.0 - (x + 1.0 - intersectionOnB) * (y + 1.0 - intersectionOnC) / 2.0;\n  }\n  if (isIntersectionWithinB && isIntersectionWithinD) {\n    color = (intersectionOnB + intersectionOnD) / 2.0 - x;\n  }\n\n  fragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}