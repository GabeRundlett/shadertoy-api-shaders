{
    "Shader": {
        "info": {
            "date": "1471541754",
            "description": "A simple Planet Shader",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt3GWj",
            "likes": 8,
            "name": "Simple Planet Shader",
            "published": 3,
            "tags": [
                "planetsimpleshader"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 1046
        },
        "renderpass": [
            {
                "code": "#define AIR_DENSITY 1.0\n#define ATMOSPHERE_HEIGHT 1.0\n\n#define ROTATION_SPEED 3.0\n\n#define SHADOWS\n\t#define SHADOW_DARKNESS 0.2\n\n#define CITY_LIGHTS\n\nfloat getNoise(vec2 coord){\n\t\n    coord /= 10.0;\n    \n    float noise = texture(iChannel0, coord.st).x;\n    noise += texture(iChannel0, coord.st * 2.0).x / 2.0;\n    noise += texture(iChannel0, coord.st * 4.0).x / 4.0;\n    noise += texture(iChannel0, coord.st * 8.0).x / 8.0;\n    noise *= clamp(texture(iChannel0, coord.st / 3.0).x,0.0,1.0);\n    \n    return noise;\n}\n\nvec3 getTexure(vec2 coord){\n    float noise = getNoise(coord);\n\treturn mix( vec3(0.3,0.3,1.0) * 0.9, vec3(0.3,1.0,0.3) * 0.9, clamp(pow(noise,2.0),0.0,1.0));    \n}\n\nvec3 CityLights(vec2 coord, vec2 coord2, vec3 color, float planet){\n    \n    float noise = clamp(texture(iChannel0, coord.st).x,0.0,1.0);\n    noise *= clamp(pow(getNoise(coord),2.0),0.0,1.0);\n    \n    noise = pow(noise, 8.0);\n    \n    float alpha = clamp(coord2.x,0.0,1.0);\n    vec3 lightCol = vec3(1.0,1.0,0.25);\n\t\n    return mix(color, lightCol, noise * alpha * planet);\n}\n\nfloat stars(vec2 coord){\n\t  float noise = clamp(texture(iChannel0, coord.st).x,0.0,1.0);\n    \n    noise = pow(noise, 20.0);\n    \n    return noise;\n}\n\nvec2 sunPos(vec2 lPos){\n\tlPos.x = (lPos.x * 2.0 - 1.0)* 2.0 + 0.5 + 0.5 - 7.0;\n    \n    return vec2(lPos.x,-0.5);\n}\n\nvec3 sun(vec2 coord, vec2 lPos){\n    \n    float circle = 1.0 - distance(coord, sunPos(lPos));\n    \n    circle = pow(circle, 5.0) * 2.0;\n    \n    return vec3(1.0,1.0,0.9) * clamp(circle * 1.0,0.0,1.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texC = uv;\n    \n    vec2 lpos = vec2(0.0,(1.0 / 5.0) * 2.0 - 1.0) + (iMouse.xy / iResolution.xy * 2.0 - 1.0) * 5.0 * 0.5 + 0.5;\n    lpos.y = -0.5;\n    \n    vec2 texC2 = fragCoord.xy / iResolution.x;\n    \n    texC2 = (texC2 * 2.0 - 1.0 ) * 5.0 * 0.5 + 0.5;\n    \n    texC = mix(texC2, (texC * 2.0 - lpos * 2.0) * 0.0 * 0.5 + lpos, (1.0 / (distance((texC2 * 2.0 - lpos * 2.0) * 10.0 * 0.5 + lpos, lpos) - 10.0)));\n    \n\tvec2 moveUv = texC + iTime * 0.1 * ROTATION_SPEED;\n    \n\tvec3 getColor = getTexure(moveUv);\n    \n    float planet = clamp((1.0 - distance(texC2,lpos)) * 50.0,0.0,1.0);\n    \n    getColor = pow(getColor, vec3(2.2));\n    \n    getColor *= planet;\n    getColor += stars(texC2) * (1.0 - planet);\n       \n    getColor = pow(getColor, vec3(2.2));\n    getColor += pow(sun(texC2, lpos), vec3(2.2)) * (1.0 - planet);\n    getColor = pow(getColor, vec3(0.4545));\n    \n\tif (distance(texC2,lpos) > 1.0)\n    \tgetColor = pow(mix(getColor, vec3(0.4,0.6,1.0), pow(2.0 - clamp(distance(texC2, lpos),0.0,2.0),5.0 / ATMOSPHERE_HEIGHT)), vec3(2.2));   \n  \n    if (distance(texC2,lpos) < 1.0)\n        getColor = pow(mix(getColor, vec3(0.4,0.6,1.0), pow(distance(texC2, lpos), 2.0 / AIR_DENSITY)),vec3(2.2));  \n      \n   \t#ifdef SHADOWS\n    \t\tgetColor *= mix(1.0,pow(SHADOW_DARKNESS, 2.2), clamp(texC.x,0.0,1.0) * planet);\n    #endif\n    \n    #ifdef CITY_LIGHTS\n    \tif (distance(texC2,lpos) < 1.0) getColor = CityLights(moveUv, texC, getColor, planet);\n    #endif\n        \n    getColor = pow(getColor, vec3(0.4545));\n    \n\tfragColor = vec4(getColor,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}