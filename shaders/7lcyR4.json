{
    "Shader": {
        "info": {
            "date": "1659328360",
            "description": "I had the idea for this in my head and I managed to get it out.\nI could have done more with this but right now I'm tired and want to go to bed.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lcyR4",
            "likes": 8,
            "name": "Alien Toothpaste",
            "published": 3,
            "tags": [
                "2d",
                "alien",
                "toothpaste"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265;\n\nvec3 palette(float f)\n{\n    return vec3(\n        sin(f), sin(f + 2.0), sin(f + 4.0)\n    ) * 0.5 + 0.5;\n}\n\nvec3 palette2(float f)\n{\n    return vec3(\n        sin(f), sin(f + 1.0), sin(f + 2.0)\n    ) * 0.5 + 0.5;\n}\n\nfloat checker(vec2 uv)\n{\n    return abs(\n        (mod(uv.x, 1.0) > 0.5 ? 1.0 : 0.0)\n        - (mod(uv.y, 1.0) > 0.5 ? 1.0 : 0.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 pos = fragCoord / iResolution.xy;\n    pos -= 0.5;\n    pos *= 2.0;\n    pos.x *= iResolution.x / iResolution.y;\n    \n    float ceil_y = cos((pos.x + iTime) * 4.0 * PI + PI) * -0.05 + 0.72;\n    float top_y = abs(mod((pos.x + iTime) * 4.0, 2.0) - 1.0) * 0.3 + 0.5;\n    float mid_y = sin((pos.x - iTime * 1.0) * PI * 2.0) * 0.3;\n    float bot_y = sin((pos.x + iTime * 0.15) * PI * 2.0) * 0.2 - 0.7;\n    \n    vec3 col = vec3(0.0);\n    col += vec3(1.0, 0.4, 0.0) / (1.0 + 30.0 * abs(top_y - pos.y));\n    col += vec3(1.0, 0.2, 0.4) / (1.0 + 30.0 * abs(mid_y - pos.y));\n    col += vec3(1.0, 0.0, 0.0) / (1.0 + 20.0 * abs(bot_y - pos.y));\n    \n    if (pos.y < ceil_y && pos.y > top_y) {\n        col = pow(col, vec3(0.5));\n    } else if (pos.y < top_y && pos.y > mid_y) {\n        col += palette(((pos.y - mid_y) / (top_y - mid_y)) * 10.0);\n    } else if (pos.y < mid_y && pos.y > bot_y) {\n        col += palette2(((pos.y - bot_y) / (mid_y - bot_y)) * 10.0);\n    } else if (pos.y < bot_y) {\n        col += checker(pos * 4.0) * (bot_y - pos.y);\n    }\n    \n    vec3 circle1_col = vec3(1.0, 1.0, 1.0);\n    vec3 circle2_col = vec3(1.0, 0.0, 0.0);\n    float inner_swelling = sin(iTime * PI) + 1.5;\n    float circle_de = length(vec2(mod((pos.x - 0.25 + iTime) + 0.5, 1.0) - 0.5, pos.y - 0.83));\n    float first_circle_de = abs(circle_de - 0.1);\n    float second_circle_de = abs(circle_de - 0.03 * inner_swelling);\n    col += circle1_col * clamp(pow(1.0 / (first_circle_de * 100.0 + 0.5), 2.0), 0.0, 1.0);\n    col += circle2_col * clamp(pow(1.0 / (second_circle_de * 100.0 + 0.5), 2.0), 0.0, 1.0);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}