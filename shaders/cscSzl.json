{
    "Shader": {
        "info": {
            "date": "1680219636",
            "description": "AI-generated comments (GTP-4). Click to change things.\ndoubleblindmag.com",
            "flags": 0,
            "hasliked": 0,
            "id": "cscSzl",
            "likes": 1,
            "name": "LSD rotation ",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "maxwellcoffee",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "// Custom mixing function using sin\n#define a(a,b,f,o) mix(a,b,sin(o+e*f)*.5+.5)\n// Custom rotation matrix function\n#define s(a) mat2(cos(a+vec4(0,33,11,0)))\n\n// Frame rate averaging array and variable\nfloat myArrayFrameRateAvg[30];\nfloat myFrameRateAvg = 0.0;\n\nfloat triangleWave(float x) {\n    return 2.0 * abs(2.0 * fract(x) - 1.0) - 1.0;\n}\n\nvoid mainImage(out vec4 O, vec2 F) {\n    // Update the frame rate averaging array\n    myArrayFrameRateAvg[0] = iFrameRate;\n    for(int i=29; i>0; i--) {\n        myArrayFrameRateAvg[i] = myArrayFrameRateAvg[i-1];\n    }\n    // Calculate the average frame rate\n    float sum = 0.0;\n    for(int i=0; i<30; i++) {\n        sum += myArrayFrameRateAvg[i];\n    }\n    myFrameRateAvg = sum / 30.0;\n\n    // Process mouse input\n    vec4 m = iMouse / iResolution.x;\n    float c, o, d, complex = 30.;\n    // Calculate base value for e\n    float e = 1.4+11.962+(iTime+ 699.3)*0.0001111;\n    \n    // Modify the complexity based on the frame rate\n    if (myFrameRateAvg < 60.) {complex = 30.;}\n    if (myFrameRateAvg < 40.) {complex = 20.;}\n    if (myFrameRateAvg < 20.) {complex = myFrameRateAvg / 4.;}\n    if (myFrameRateAvg > 60.) {complex = 40.;}\n    \n    // Modify e and complexity based on conditions\n    if (e > 13.43) {e =+ iTime*.00111111 + 11.62;complex += .1*iTime;}\n    if( m.x>0.0 ) { // mouse button is down\n        e += m.y * 1000.;\n        e += (m.x / 1000.) * iTime * 10.;\n    }\n\n    // Calculate screen center-relative coordinates\n    vec2 r = iResolution.xy;\n    for (;o++<complex;) {\n        // Convert to polar coordinates and apply kaleidoscope-like transformation\n        vec2 uv = (F - r * 0.5) / r.y;\n        uv = vec2(uv.y, -uv.x);\n        float angle = atan(uv.y, uv.x);\n        float radius = length(uv);\n        float sector = 0.1 + 0.005*sin(iTime / 2.);\n\n        angle = mod(angle * sector, 2.0 * 3.14159 / sector) - 3.14159 / sector;\n        vec3 p = abs(.7*c*normalize(vec3(radius * vec2(cos(angle), sin(angle)), 1)));\n\n        // Apply transformations using custom rotation matrix function\n        p.xy *= s(e);\n        p.zy += e + c*tan(2.*e);\n        // Add time-dependent effect and apply symmetry\n        p = abs(fract(p)-0.8 + .2*(sin(iTime / 2.)));\n        p.xy *= s(c);\n        p.xz *= s(e);\n        p.y = max(abs(p.y)-a(0.,.2,1.,),0.);\n        c += d =(length(vec2(length(p.xy)-.2,p.z)) -a(.4,.1,.5,4.) - c*.01)*.5;\n    }\n    \n    // Calculate final output color\n    O.rgb = 1.2*(cos(c*110. + .99*vec3(0,1.+c*.2,2))+.2)/exp(c*0.0914);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}