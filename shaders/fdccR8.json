{
    "Shader": {
        "info": {
            "date": "1653046083",
            "description": "Grids within grids within grids.",
            "flags": 0,
            "hasliked": 0,
            "id": "fdccR8",
            "likes": 23,
            "name": "Grids all the way down",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "pattern"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "// Grids all the way down by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nfloat hash12(vec2 p)\n{\n    vec3 q = fract(p.xyy * vec3(5717./2048., 6451./4096., 1249./512.) + vec3(.5, .125, .25));\n    q += dot(q.xz, p.yx) * .0156253;\n    return fract(dot(q + p.y * .38325, p.xyx / 127.) + dot(q, vec3(2., .25, .125-p.x)) + .4);\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a),\n          c = cos(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nvec3 color(float v)\n{\n    v = fract(v * 13.1257) * 7.;\n    vec3 c = normalize(vec3(1, 1, 1));\n    c.xy *= rot(v);\n    c.yz *= rot(v * 2.);\n    return mix(vec3(c.g), c, 1. + fract(v * 11.) * 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    float res = 0.;\n    float o = 1.;\n    float s = 1.;\n    mat2 r = rot(2.);\n    \n    for(int i = 0; i < 5; ++i)\n    {\n        o *= s;\n        uv *= r;\n        uv += iTime * .25;\n        vec2 _uv = uv * rot(res * 8.);\n        float fw = fwidth(length(_uv));\n        s = min(s, .75 + min(fract(_uv.x), fract(_uv.y)) / fw * .05);\n        vec2 fuv = 1. - abs(fract(_uv) * 2. - 1.);\n        o = min(o, min(fuv.x, fuv.y) / fw * .75);\n        res = hash12(floor(_uv));\n        uv = uv * 2. + 5.;\n    }\n    \n    vec3 col = clamp(mix(color(res) * res * 2., vec3(res), res), vec3(0), vec3(1)) * o;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}