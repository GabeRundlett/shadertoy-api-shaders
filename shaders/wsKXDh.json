{
    "Shader": {
        "info": {
            "date": "1621114208",
            "description": "A procedural butterfly I made back in 2004 for the realtime 64 kilobyte demo [url=https://www.pouet.net/prod.php?which=12821]Paradise[/url]. You can see the butterfly in the rhino sequence: [url]https://www.youtube.com/watch?v=JY9FzRwasjw&t=274s[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKXDh",
            "likes": 46,
            "name": "Butterfly (2004)",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "demoscene",
                "butterfly",
                "paradise"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1251
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2004/2021\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n// A procedural butterfly I made back in 2004 for the realtime\n// 64 kilobyte demo Paradise (https://www.pouet.net/prod.php?which=12821)\n// You can see the butterfly in the rhino sequence: \n//\n// https://www.youtube.com/watch?v=JY9FzRwasjw&t=274s\n//\n// I converted the code below from C to GLSL. The exact noise patterns are\n// a bit different because in C I used a LUT based hash that I didn't want\n// to duplicate here in the Shadertoy version.\n\n// make 0 to see the static painting\n#define ANIMATE 1\n\nfloat fbm( float x, float y, int octaves );\n\nvec4 butterfly( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    vec4 col = vec4(0.0);\n\n    float a = atan(p.x,p.y);\n    float r = length(p);\n    \n    // bottom wing\n    if( p.y<0.0 )\n    {\n        float f = 0.45 + 0.2*fbm( 1.0+4.0*a,0.0, 2 );\n        float w = 3.1416*max(0.0,a-1.05)/(3.1416-1.05);\n\n        f *= sin(w)*sin(w);\n        f += 0.25*exp(-30.0*abs(a-(1.7+0.7*r)));\n\n        float th = f + 0.001;\n        \n        vec3 wcol = vec3(0.0,0.0,0.0);\n\n        // ala amarilla\n        f = fbm( 5.0*r, 5.0*w/(1.0+1.5*r), 3 );\n        f *= 1.0-pow(r/th,42.0);\n        f = 0.2 + 0.8*f;\n        wcol = mix( wcol, vec3(1.00,0.98,0.59), smoothstep(0.47,0.53,f) );\n        wcol *= 1.4;\n        // borde negro\n        f = w - 0.3*(r/th);\n        f = 0.5 + 0.5*sin(20.0*f);\n        f = 0.3*pow(f, 1.0 + 40.0*r/th );\n        f = sqrt( max(1.0-(r/th),0.0) );\n        wcol *= 1.0-f;\n\n        // manchas negri-naranjas\n        f = fbm( 6.0*p.x, 6.0*p.y, 2 );\n\n        wcol = mix( wcol, vec3(0.00,0.00,0.00), smoothstep( 0.52, 0.53, f ) );\n        wcol = mix( wcol, vec3(0.97,0.64,0.10), smoothstep( 0.53, 0.58, f ) );\n        float d = r-th;\n        //col = mix( col, wcol, smoothstep( 0.0,2.0*fwidth(d),-d) );\n        float al = smoothstep( 0.0,2.0*fwidth(d),-d);\n        col.xyz = wcol;\n        col.w = al;\n    }\n    \n    // top wing\n    if( a<2.2 )\n    {\n        float f = 0.55 + 0.3*fbm( 4.0*a, 46.0, 2 );\n        float w = a*(3.1416/2.356);\n        float th = f*sin(w)*sin(w) + 0.001;\n            \n        // ala roja\n        float h = fbm( p.x*4.0, p.y*4.0, 3 );\n        vec3 col2 = mix( vec3(0.54,0.28,0.09), \n                         vec3(0.55,0.04,0.04), smoothstep( 0.3, 0.7, h ) );\n        col2 *= 1.4;\n        f = fbm( 6.0*r+2.0, 5.0*w/(1.0+0.1*r), 3 );\n        f = 0.2 + 0.8*f;\n\n        // borde negrito\n        f *= 1.0-pow(r/th,42.0);\n        vec3 wcol = mix( vec3(0.0), col2, smoothstep(0.47,0.53,f) );\n\n        // esqueleto\n        f = w - 0.3*(r/th);\n        f = 0.5 + 0.5*sin(32.0*f);\n        f = 0.4*pow(f, 1.0 + 40.0*r/th );\n        f *= 1.0-pow( r/th, 5.0 );\n        wcol *= 1.0-f;\n\n        // manchas blanqui-negras\n        f = fbm(18.5+ 5.0*p.x, 0.0+6.0*p.y, 2 );\n        f = smoothstep( 0.35, 0.65, f);\n        wcol = mix( wcol, vec3(0,0,0), smoothstep( 0.65, 0.85,f ) );\n        wcol = mix( wcol, vec3(1,1,1), smoothstep( 0.99, 1.00,f ) );\n        float d = r-th;\n        float al = smoothstep( 0.0,2.0*fwidth(d),-d);\n        col.xyz = mix( col.xyz, wcol, al );\n        col.w = 1.0 - (1.0-col.w)*(1.0-al);\n    }\n    \n    return col;\n}\n\nint hash( ivec2 z )\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    return (n*(n*n*15731+789221)+1376312589)>>16;\n}\n    \n// this hash differs from the one I used in Paradise, so the color\n// patters don't match exactly.\nvec2 grad( ivec2 z )\n{\n    // Perlin style vectors\n    int n = hash(z) & 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                                  gr ;\n}\n\n// some basic gradient noise\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm( float x, float y, int octaves )\n{\n    float t = 0.0;\n    float s = 0.5;\n\n    for( int i=0; i<octaves; i++ )\n    {\n        t+=s*noise( vec2(x,y) );\n        x+=x;\n        y+=y;\n        s*=.5;\n    }\n\n    return clamp( 0.5 + 0.6*t, 0.0, 1.0 );\n}\n\n// integral of smoothstep(0,T,t). More info here:\n// https://www.tiktok.com/@inigoquilez/video/6963762978126646534\nfloat s( float t, in float T )\n{\n    if( t<T )\n    {\n        return t*t*t*(1.0-t*0.5/T)/T/T;\n    }\n    return t - T/2.0;\n    \n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // render\n#if ANIMATE==1\n    vec3 col = vec3(0.0);\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 of = vec2(i,j)/float(AA);\n        vec2 p = (2.0*(fragCoord+of)-iResolution.xy)/iResolution.y;\n\n        // time\n        float di = float( hash(ivec2(fragCoord)*AA+ivec2(i,j))&255 )/255.0;\n        float time = iTime + ((float(j*AA+i)+di)/float(AA*AA))*(0.5/24.0) - 0.5*0.5/24.0;\n        \n        // soften motion        \n        time += 0.07*sin( p.y );\n\n        // wing position\n        float wing = s(time, 8.0);\n       \n        //animate plane\n        float an = 1.55*(0.5-0.5*cos(16.5*(wing-12.0)));\n        vec2  pl = vec2(sign(p.x)*sin(an),-cos(an));\n\n        // intersect plane\n        vec3 ro = vec3(0.0,0.0,1.95);\n        vec3 rd = vec3(p,-3.0);\n        vec3 pos = ro - rd*dot(ro.xz,pl)/dot(rd.xz,pl);\n        vec2 q = vec2( length(pos.xz), pos.y );\n\n        // draw butterfly\n        vec4 tmp = butterfly( q );\n\n        // some basic fake lighting \n        tmp = clamp(tmp,0.0,1.0);\n        tmp.xyz *= 0.1+0.9*mix(1.0,abs(q.y)*0.5+min(q.x*2.0,1.0),pl.x*pl.x);\n        tmp.xyz *= clamp(0.25+0.75*(pl.x-pl.y+1.0),0.0,1.0);\n\n        // accumulate\n        col += mix( vec3(0.56), tmp.xyz, tmp.w );\n    }\n    // resolve (box filter)\n    col /= float(AA*AA);\n#else\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    p *= 0.65;\n    vec3 col = butterfly( p );\n#endif\n\n    // vignette\n    vec2 q = fragCoord/iResolution.xy;\n    col *= 0.05 + 0.95*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.15);\n    \n    // dither\n    col += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}