{
    "Shader": {
        "info": {
            "date": "1643382680",
            "description": "Animation of a ruler and straightedge construction to bisect an angle.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sjcWR",
            "likes": 30,
            "name": "Angle Bisection Construction",
            "published": 3,
            "tags": [
                "geometry",
                "angle",
                "bisection",
                "compass",
                "construction",
                "straightedge"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\n\n// Transforms\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, si, -si, co);\n}\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nvoid sketchArc(in vec2 uv, in float unit, inout vec3 color, in float radius, in float aperture, in float stop) {\n    if (stop < 0.0) uv.y = -uv.y, stop = -stop;\n    float theta = atan(uv.y, uv.x);\n    float alpha = smoothstep(aperture, aperture - 0.5, abs(theta - aperture));\n    alpha *= step(theta, stop);\n    drawSDF(abs(length(uv) - radius) - 0.001, vec4(vec3(0.0), alpha));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n    float time = 2.0 * iTime; // Speed up the animation\n\n    // Draw an arrow and mirror it on the left\n    vec2 arrowUv = vec2(abs(uv.x), uv.y);\n    drawSDF(sdLine(arrowUv, vec2(0.0, -1.0), vec2(1.0, 1.0)), vec4(vec3(0.0), 1.0));\n    drawSDF(sdLine(arrowUv, vec2(1.0, 1.0), vec2(1.05, 0.75)), vec4(vec3(0.0), 1.0));\n    drawSDF(sdLine(arrowUv, vec2(1.0, 1.0), vec2(0.77, 0.875)), vec4(vec3(0.0), 1.0));\n\n    // Draw an arc between the rays\n    vec2 compassUv = (uv - vec2(0.0, -1.0)) * Rotate2D(0.6);\n    float an1 = clamp(time - 1.0, 0.0, 4.0) / 2.0;\n    sketchArc(compassUv, unit, color, 1.5, 1.0, an1);\n    compassUv *= Rotate2D(an1);\n\n    // Move to left intersection\n    float move1 = clamp(time - 6.0, 0.0, 4.0) / 4.0;\n    compassUv -= vec2(-1.0, 2.0) / sqrt(5.0) * Rotate2D(2.6) * 1.5 * move1;\n\n    // Draw an arc at the left intersection\n    float an2 = -clamp(time - 11.0, 0.0, 4.0) / 2.0;\n    sketchArc(compassUv, unit, color, 1.5, 1.0, an2);\n    compassUv *= Rotate2D(an2);\n\n    // Move to right intersection\n    float move2 = clamp(time - 16.0, 0.0, 4.0) / 4.0;\n    compassUv -= vec2(2.0 / sqrt(5.0), 0.0) * Rotate2D(0.6) * 1.5 * move2;\n\n    // Draw an arc at the right intersection\n    float an3 = clamp(time - 21.0, 0.0, 4.0) / 2.0;\n    sketchArc(compassUv, unit, color, 1.5, 1.0, an3);\n    compassUv *= Rotate2D(an3);\n\n    // Turn to the intersection between the arcs\n    float an4 = -clamp(time - 26.0, 0.0, 2.0) / 2.0 * 0.55;\n    compassUv *= Rotate2D(an4);\n\n    // Trace a segment to the angle vertex\n    float move3 = clamp(time - 36.0, 0.0, 4.0) / 4.0;\n    compassUv -= vec2(0.0, -2.68) * Rotate2D(2.6 - 0.55) * move3;\n    if (time > 31.0) drawSDF(sdLine(uv, vec2(0.0, 1.67), vec2(0.0, 1.67 - move3 * 2.65)), vec4(vec3(0.0), 1.0));\n\n    // Move to the side\n    float move4 = clamp(time - 46.0, 0.0, 4.0) / 4.0;\n    compassUv -= vec2(2.15, 1.65) * Rotate2D(2.6 - 0.55) * move4;\n\n    // Compass legs\n    compassUv.x -= 0.75;\n    drawSDF(sdBox(compassUv, vec2(0.75, 0.05)), vec4(vec3(0.4), 1.0));\n\n    // Compass handle\n    drawSDF(length(compassUv) - 0.1, vec4(0.0, 0.0, 1.0, 1.0));\n    drawSDF(length(compassUv) - 0.05, vec4(vec3(0.0), 1.0));\n\n    // Compass point\n    drawSDF(length(compassUv - vec2(-0.75, 0.0)) - 0.05, vec4(vec3(0.0), 1.0));\n\n    // Compass pencil\n    compassUv.x -= 0.75;\n    drawSDF(length(compassUv) - 0.075, vec4(1.0, 0.8, 0.0, 1.0));\n    drawSDF(length(compassUv) - 0.025, vec4(vec3(0.0), 1.0));\n\n    // Straightedge\n    vec2 straightEdgeUv = uv;\n    float move5 = clamp(7.0 - abs(time - 38.0), 0.0, 4.0) / 4.0; // Move in, pause, move out\n    straightEdgeUv -= vec2(2.15, 0.35) * move5;\n    drawSDF(sdBox(straightEdgeUv - vec2(-2.5, 0.0), vec2(0.25, 1.5)), vec4(0.8, 0.5, 0.0, 1.0));\n\n    // Vignette (kinda)\n    uv = 2.0 * (fragCoord / iResolution.xy - 0.5);\n    color -= 0.15 * pow(length(uv), 4.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}