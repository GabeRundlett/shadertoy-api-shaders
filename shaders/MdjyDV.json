{
    "Shader": {
        "info": {
            "date": "1493930159",
            "description": "Testing out packing floats.\nXY pack from http://nullprogram.com/blog/2014/06/29/\nEncoding and decoding functions from http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\n\niq's vers. https://www.shadertoy.com/view/ldj3zG\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "MdjyDV",
            "likes": 1,
            "name": "XY channel packing",
            "published": 3,
            "tags": [
                "packing",
                "encoding",
                "decoding",
                "channelpacking",
                "unpacking"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "const float BASE = 255.0;\n\nfloat decode(vec2 channels) {\n    return dot(channels, vec2(BASE, BASE * BASE) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 rg = texture(iChannel0, uv);    \n    float r = decode(rg.rg);\n    float g = decode(rg.ba);\n    float b = decode(texture(iChannel1, uv).rg);\n    \n   // vec4 t = texture(iChannel2, uv);\n\tfragColor =  vec4(r,g,b, 1.0) ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nvec2 encode( float value){\n    vec2 enc = vec2(1.0, 255.0) * value;\n    enc = fract(enc);\n    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n    return enc;\n}\n*/\n\nconst float BASE = 255.0;\n\n\nvec2 encode(float value) {\n    float x = mod(value, BASE);\n    float y = floor(value / BASE);\n    return vec2(x, y) / BASE;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n\tvec2 r = encode(tex.r);\n    vec2 g = encode(tex.g);\n    \n    fragColor = vec4(r, g);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nvec2 encode( float value){\n    vec2 enc = vec2(1.0, 255.0) * value;\n    enc = fract(enc);\n    enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n    return enc;\n}\n*/\n\nconst float BASE = 255.0;\n\n\nvec2 encode(float value) {\n    float x = mod(value, BASE);\n    float y = floor(value / BASE);\n    return vec2(x, y) / BASE;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv);\n\tvec2 b = encode(tex.b);\n\n    fragColor = vec4(b, 0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}