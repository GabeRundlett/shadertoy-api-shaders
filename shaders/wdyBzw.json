{
    "Shader": {
        "info": {
            "date": "1606789202",
            "description": "Bimbo-Polygon-Distance-IQ",
            "flags": 8,
            "hasliked": 0,
            "id": "wdyBzw",
            "likes": 1,
            "name": "Bimbo-Polygon-Distance-IQ",
            "published": 3,
            "tags": [
                "bimbopolygondistanceiq"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "//Modificado por jorge2017a1 ----jorgeFloresP\n//https://en.wikipedia.org/wiki/Bimbo_(Fleischer_Studios)\n\n///Referencia de IQ https://www.shadertoy.com/view/wdBXRW\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n//\n//\n// https://iquilezles.org/articles/distfunctions2d\n\n\n\n\n #define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N1 =72;\nconst int N2 =12;\nconst int N3 =27;\nconst int N4 =21;\nconst int N5 =92;\n\nconst int N6 =18;\nconst int N7 =17;\n\nconst int N9 =86;\n\nconst int N10 =31;\nconst int N11 =50;\n\nconst int N12 =45;\n\nconst int N13 =24;\n\n\n\nfloat sdPolygon( in vec2 p, in vec2[N1] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\nfloat sdPolygonv2( in vec2 p, in vec2[N2] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv3( in vec2 p, in vec2[N3] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\n\nfloat sdPolygonv4( in vec2 p, in vec2[N4] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv5( in vec2 p, in vec2[N5] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\nfloat sdPolygonv6( in vec2 p, in vec2[N6] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv7( in vec2 p, in vec2[N7] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\nfloat sdPolygonv9( in vec2 p, in vec2[N9] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv10( in vec2 p, in vec2[N10] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv11( in vec2 p, in vec2[N11] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv12( in vec2 p, in vec2[N12] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nfloat sdPolygonv13( in vec2 p, in vec2[N13] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    \n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\n\n//vec2[] polygon = vec2[](v0,v1,v2,v3,v4);\n\n\nvec2[72] pt1 = vec2[](vec2(0.358, 0.398),vec2(0.388, 0.398),vec2(0.354, 0.398),vec2(0.326, 0.392),vec2(0.302, 0.388),vec2(0.28, 0.376),vec2(0.262, 0.356),vec2(0.25, 0.334),vec2(0.26, 0.356),vec2(0.256, 0.336),vec2(0.254, 0.328),vec2(0.254, 0.322),vec2(0.258, 0.326),vec2(0.258, 0.316),vec2(0.262, 0.306),vec2(0.266, 0.294),vec2(0.274, 0.284),vec2(0.282, 0.28),vec2(0.288, 0.276),vec2(0.286, 0.27),vec2(0.284, 0.256),vec2(0.278, 0.236),vec2(0.28, 0.222),vec2(0.286, 0.196),vec2(0.292, 0.18),vec2(0.3, 0.162),vec2(0.31, 0.148),vec2(0.322, 0.134),vec2(0.344, 0.122),vec2(0.362, 0.118),vec2(0.382, 0.118),vec2(0.406, 0.126),vec2(0.43, 0.14),vec2(0.442, 0.15),vec2(0.448, 0.162),vec2(0.454, 0.15),vec2(0.464, 0.144),vec2(0.48, 0.13),vec2(0.5, 0.124),vec2(0.518, 0.124),vec2(0.538, 0.128),vec2(0.56, 0.14),vec2(0.582, 0.158),vec2(0.588, 0.166),vec2(0.594, 0.186),vec2(0.596, 0.212),vec2(0.598, 0.232),vec2(0.598, 0.25),vec2(0.592, 0.26),vec2(0.59, 0.278),vec2(0.584, 0.288),vec2(0.598, 0.3),vec2(0.61, 0.318),vec2(0.61, 0.342),vec2(0.602, 0.358),vec2(0.592, 0.372),vec2(0.582, 0.382),vec2(0.566, 0.39),vec2(0.55, 0.398),vec2(0.536, 0.404),vec2(0.518, 0.406),vec2(0.506, 0.406),vec2(0.488, 0.404),vec2(0.48, 0.408),vec2(0.464, 0.418),vec2(0.454, 0.422),vec2(0.434, 0.422),vec2(0.418, 0.422),vec2(0.396, 0.41),vec2(0.388, 0.4),vec2(0.376, 0.398),vec2(0.358, 0.398)); \nvec2[12] pt2 = vec2[](vec2(0.45, 0.32) ,vec2(0.442, 0.318),vec2(0.43, 0.316),vec2(0.418, 0.308),vec2(0.416, 0.3),vec2(0.428, 0.29),vec2(0.44, 0.292),vec2(0.448, 0.292),vec2(0.46, 0.298),vec2(0.466, 0.308),vec2(0.462, 0.318),vec2(0.45, 0.32) ); //num puntos 11\nvec2[27] pt3 = vec2[](vec2(0.514, 0.306),vec2(0.502, 0.306),vec2(0.48, 0.3),vec2(0.464, 0.29),vec2(0.454, 0.28),vec2(0.448, 0.262),vec2(0.446, 0.242),vec2(0.446, 0.226),vec2(0.45, 0.204),vec2(0.46, 0.182),vec2(0.476, 0.166),vec2(0.494, 0.158),vec2(0.512, 0.154),vec2(0.528, 0.156),vec2(0.542, 0.164),vec2(0.56, 0.176),vec2(0.568, 0.19),vec2(0.572, 0.206),vec2(0.572, 0.224),vec2(0.572, 0.236),vec2(0.566, 0.256),vec2(0.564, 0.27),vec2(0.558, 0.282),vec2(0.544, 0.298),vec2(0.536, 0.3),vec2(0.526, 0.304),vec2(0.514, 0.306) );\nvec2[21] pt4 = vec2[](vec2(0.354, 0.304),vec2(0.338, 0.296),vec2(0.324, 0.284),vec2(0.308, 0.268),vec2(0.302, 0.242),vec2(0.302, 0.216),vec2(0.308, 0.192),vec2(0.322, 0.168),vec2(0.34, 0.154),vec2(0.362, 0.146),vec2(0.382, 0.148),vec2(0.398, 0.156),vec2(0.412, 0.166),vec2(0.43, 0.192),vec2(0.436, 0.22),vec2(0.432, 0.246),vec2(0.426, 0.264),vec2(0.416, 0.282),vec2(0.406, 0.292),vec2(0.384, 0.302),vec2(0.354, 0.304) );  \n\n\nvec2[92] pt5 = vec2[]( vec2(0.386, 0.402),vec2(0.382, 0.398),vec2(0.352, 0.394),vec2(0.328, 0.392),vec2(0.32, 0.394),vec2(0.302, 0.39),vec2(0.282, 0.376),vec2(0.268, 0.366),vec2(0.256, 0.356),vec2(0.252, 0.344),vec2(0.244, 0.328),vec2(0.244, 0.316),vec2(0.238, 0.302),vec2(0.234, 0.278),vec2(0.232, 0.256),vec2(0.232, 0.226),vec2(0.236, 0.208),vec2(0.242, 0.194),vec2(0.218, 0.192),vec2(0.21, 0.186),vec2(0.198, 0.18),vec2(0.194, 0.17),vec2(0.188, 0.162),\n                           vec2(0.178, 0.152),vec2(0.178, 0.142),vec2(0.172, 0.134),vec2(0.17, 0.128),vec2(0.156, 0.124),vec2(0.154, 0.118),vec2(0.154, 0.112),vec2(0.154, 0.102),vec2(0.166, 0.086),vec2(0.178, 0.082),vec2(0.198, 0.08),vec2(0.22, 0.086),vec2(0.242, 0.092),vec2(0.256, 0.096),vec2(0.274, 0.104),vec2(0.288, 0.108),vec2(0.31, 0.102),vec2(0.332, 0.094),vec2(0.35, 0.086),vec2(0.372, 0.078),vec2(0.39, 0.072),vec2(0.414, 0.07),vec2(0.436, 0.068),\n                           vec2(0.462, 0.07),vec2(0.488, 0.076),vec2(0.514, 0.084),vec2(0.532, 0.094),vec2(0.55, 0.1),vec2(0.564, 0.108),vec2(0.578, 0.112),vec2(0.596, 0.106),vec2(0.61, 0.098),vec2(0.634, 0.088),vec2(0.658, 0.086),vec2(0.678, 0.084),vec2(0.694, 0.08),vec2(0.72, 0.088),vec2(0.728, 0.092),vec2(0.742, 0.104),vec2(0.746, 0.108),vec2(0.738, 0.112),vec2(0.738, 0.122),vec2(0.724, 0.124),vec2(0.716, 0.124),vec2(0.71, 0.128),vec2(0.704, 0.144),vec2(0.698, 0.158),vec2(0.686, 0.172),\n                           vec2(0.678, 0.182),vec2(0.662, 0.184),vec2(0.65, 0.194),vec2(0.634, 0.196),vec2(0.638, 0.212),vec2(0.638, 0.236),vec2(0.638, 0.25),vec2(0.638, 0.264),vec2(0.63, 0.282),vec2(0.622, 0.296),vec2(0.614, 0.308),vec2(0.618, 0.322),vec2(0.616, 0.34),vec2(0.612, 0.358),vec2(0.604, 0.37),vec2(0.588, 0.386),vec2(0.562, 0.398),vec2(0.544, 0.404),vec2(0.52, 0.408),vec2(0.496, 0.406),vec2(0.386, 0.402) );\n\n//pupila izq\nvec2[18] pt6 = vec2[]( vec2(0.352, 0.292),vec2(0.35, 0.28),vec2(0.368, 0.274),vec2(0.354, 0.264),vec2(0.354, 0.25),vec2(0.358, 0.238),vec2(0.374, 0.228),vec2(0.386, 0.234),vec2(0.392, 0.246),vec2(0.39, 0.256),vec2(0.39, 0.274),vec2(0.39, 0.28),vec2(0.386, 0.292),vec2(0.382, 0.3),vec2(0.372, 0.306),vec2(0.364, 0.302),vec2(0.356, 0.296),vec2(0.352, 0.292) ); //,num puntos 17\n\n//pupila derecha\nvec2[17] pt7 = vec2[]( vec2(0.502, 0.272),vec2(0.504, 0.266),vec2(0.492, 0.26),vec2(0.492, 0.246),vec2(0.498, 0.24),vec2(0.51, 0.232),vec2(0.52, 0.238),vec2(0.528, 0.254),vec2(0.528, 0.272),vec2(0.524, 0.286),vec2(0.516, 0.3),vec2(0.508, 0.304),vec2(0.496, 0.3),vec2(0.488, 0.292),vec2(0.488, 0.286),vec2(0.494, 0.28),vec2(0.502, 0.272) );  //num puntos 16\n\n//boca\nvec2[12] pt8 = vec2[]( vec2(0.45, 0.38),vec2(0.434, 0.38),vec2(0.422, 0.384),vec2(0.41, 0.392),vec2(0.404, 0.402),vec2(0.412, 0.41),vec2(0.428, 0.408),vec2(0.44, 0.406),vec2(0.456, 0.402),vec2(0.46, 0.396),vec2(0.46, 0.384),vec2(0.45, 0.38));  //num puntos 11\n\n//cuerpo \n\nvec2[86] pt9 = vec2[](  vec2(0.412, 0.404),vec2(0.384, 0.402),vec2(0.34, 0.398),vec2(0.316, 0.412),vec2(0.288, 0.436),vec2(0.262, 0.454),vec2(0.234, 0.462),vec2(0.222, 0.462),vec2(0.208, 0.478),vec2(0.19, 0.488),vec2(0.176, 0.492),vec2(0.156, 0.496),vec2(0.136, 0.494),vec2(0.15, 0.512),vec2(0.174, 0.518),vec2(0.202, 0.524),vec2(0.224, 0.526),vec2(0.236, 0.532),vec2(0.236, 0.546),vec2(0.246, 0.556),vec2(0.246, 0.584),vec2(0.26, 0.594),vec2(0.244, 0.604),vec2(0.228, 0.618),vec2(0.214, 0.654),vec2(0.202, 0.684),vec2(0.19, 0.71),vec2(0.178, 0.738),vec2(0.174, 0.76),vec2(0.208, 0.744),vec2(0.244, 0.748),vec2(0.266, 0.76),vec2(0.272, 0.764),vec2(0.294, 0.738),vec2(0.31, 0.698),vec2(0.328, 0.656),vec2(0.33, 0.642),vec2(0.336, 0.638),vec2(0.348, 0.64),vec2(0.382, 0.652),vec2(0.42, 0.65),vec2(0.442, 0.648),vec2(0.45, 0.648),vec2(0.468, 0.67),vec2(0.476, 0.704),vec2(0.502, 0.758),vec2(0.516, 0.776),vec2(0.536, 0.768),vec2(0.554, 0.768),vec2(0.578, 0.77),vec2(0.586, 0.77),vec2(0.594, 0.754),vec2(0.606, 0.712),vec2(0.612, 0.68),vec2(0.61, 0.648),vec2(0.598, 0.622),vec2(0.58, 0.604),vec2(0.568, 0.592),vec2(0.574, 0.574),vec2(0.58, 0.554),vec2(0.582, 0.526),vec2(0.58, 0.506),vec2(0.594, 0.51),vec2(0.626, 0.518),vec2(0.66, 0.52),vec2(0.696, 0.514),vec2(0.728, 0.5),vec2(0.74, 0.49),vec2(0.752, 0.478),vec2(0.752, 0.462),vec2(0.724, 0.466),vec2(0.706, 0.466),vec2(0.676, 0.462),vec2(0.662, 0.454),vec2(0.652, 0.44),vec2(0.65, 0.446),vec2(0.636, 0.452),vec2(0.61, 0.446),vec2(0.584, 0.428),vec2(0.562, 0.412),vec2(0.542, 0.408),vec2(0.52, 0.404),vec2(0.502, 0.404),vec2(0.456, 0.404),vec2(0.434, 0.404),vec2(0.412, 0.404) ); //num puntos 85\n\n//mano izq\nvec2[31] pt10 = vec2[]( vec2(0.384, 0.404),vec2(0.362, 0.402),vec2(0.35, 0.42),vec2(0.338, 0.452),vec2(0.33, 0.472),vec2(0.322, 0.49),vec2(0.322, 0.512),vec2(0.328, 0.548),vec2(0.35, 0.57),vec2(0.378, 0.584),vec2(0.402, 0.592),vec2(0.442, 0.592),vec2(0.474, 0.586),vec2(0.492, 0.576),vec2(0.51, 0.562),vec2(0.518, 0.542),vec2(0.528, 0.524),vec2(0.528, 0.5),vec2(0.524, 0.48),vec2(0.514, 0.46),vec2(0.508, 0.446),vec2(0.498, 0.43),vec2(0.492, 0.418),vec2(0.488, 0.414),vec2(0.47, 0.418),vec2(0.456, 0.42),vec2(0.434, 0.426),vec2(0.42, 0.42),vec2(0.408, 0.418),vec2(0.394, 0.408),vec2(0.384, 0.404) ); //31 puntos\n\n//mano der\nvec2[50] pt11 = vec2[]( vec2(0.222, 0.45),vec2(0.218, 0.46),vec2(0.216, 0.47),vec2(0.202, 0.484),vec2(0.178, 0.494),vec2(0.164, 0.494),vec2(0.14, 0.494),vec2(0.122, 0.484),vec2(0.116, 0.468),vec2(0.114, 0.46),vec2(0.106, 0.454),vec2(0.094, 0.438),vec2(0.092, 0.426),vec2(0.084, 0.392),vec2(0.092, 0.37),vec2(0.08, 0.356),vec2(0.066, 0.338),vec2(0.066, 0.324),vec2(0.072, 0.304),vec2(0.094, 0.286),vec2(0.11, 0.286),vec2(0.116, 0.29),vec2(0.122, 0.276),vec2(0.136, 0.268),vec2(0.15, 0.266),vec2(0.166, 0.266),vec2(0.174, 0.272),vec2(0.186, 0.294),vec2(0.192, 0.278),vec2(0.202, 0.272),vec2(0.214, 0.272),vec2(0.224, 0.282),vec2(0.232, 0.312),vec2(0.226, 0.328),vec2(0.22, 0.348),vec2(0.218, 0.37),vec2(0.228, 0.368),vec2(0.244, 0.362),vec2(0.256, 0.364),vec2(0.27, 0.368),vec2(0.282, 0.376),vec2(0.286, 0.388),vec2(0.282, 0.4),vec2(0.276, 0.408),vec2(0.266, 0.412),vec2(0.254, 0.412),vec2(0.24, 0.414),vec2(0.238, 0.426),vec2(0.226, 0.438),vec2(0.222, 0.45) ); // num puntos 49\n\n//mano izq\nvec2[45] pt12 = vec2[]( vec2(0.646, 0.42),vec2(0.65, 0.432),vec2(0.65, 0.446),vec2(0.664, 0.456),vec2(0.688, 0.464),vec2(0.712, 0.468),vec2(0.726, 0.464),vec2(0.746, 0.458),vec2(0.756, 0.454),vec2(0.762, 0.448),vec2(0.776, 0.438),vec2(0.788, 0.422),vec2(0.788, 0.412),vec2(0.792, 0.39),vec2(0.792, 0.38),vec2(0.802, 0.364),vec2(0.82, 0.332),vec2(0.822, 0.318),vec2(0.818, 0.298),vec2(0.794, 0.282),vec2(0.78, 0.286),vec2(0.768, 0.298),vec2(0.766, 0.284),vec2(0.76, 0.27),vec2(0.734, 0.264),vec2(0.71, 0.272),vec2(0.702, 0.284),vec2(0.692, 0.282),vec2(0.676, 0.276),vec2(0.656, 0.278),vec2(0.638, 0.298),vec2(0.638, 0.322),vec2(0.646, 0.34),vec2(0.656, 0.36),vec2(0.654, 0.368),vec2(0.644, 0.374),vec2(0.638, 0.374),vec2(0.624, 0.374),vec2(0.606, 0.384),vec2(0.596, 0.4),vec2(0.6, 0.416),vec2(0.614, 0.426),vec2(0.63, 0.426),vec2(0.638, 0.426),vec2(0.646, 0.42) ) ;  //num puntos 44\n\n//zapato\nvec2[24] pt13 = vec2[]( vec2(0.448, 0.79),vec2(0.424, 0.786),vec2(0.4, 0.798),vec2(0.392, 0.822),vec2(0.392, 0.846),vec2(0.404, 0.854),vec2(0.43, 0.86),vec2(0.47, 0.864),vec2(0.494, 0.864),vec2(0.518, 0.864),vec2(0.55, 0.864),vec2(0.574, 0.86),vec2(0.598, 0.852),vec2(0.612, 0.842),vec2(0.62, 0.822),vec2(0.612, 0.798),vec2(0.602, 0.782),vec2(0.572, 0.774),vec2(0.544, 0.776),vec2(0.53, 0.782),vec2(0.51, 0.79),vec2(0.488, 0.79),vec2(0.468, 0.79),vec2(0.448, 0.79) ); // num puntos 23\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float tt=iTime;\n    vec2 p= rotatev2(uv, radians( mod(tt*45.0,360.0)));\n    //p=p*0.35*sin(iTime*0.25);\n    \n    \n    //-------------------------------\n    float d1 = sdPolygon(p, pt1);\n\tfloat d2 = sdPolygonv2(p, pt2);\n    float d3 = sdPolygonv3(p, pt3);\n    float d4 = sdPolygonv4(p, pt4);\n    float d5 = sdPolygonv5(p, pt5);\n    \n    float d6 = sdPolygonv6(p, pt6);\n    float d7 = sdPolygonv7(p, pt7);\n    \n    float d8 = sdPolygonv2(p, pt8);\n    float d9 = sdPolygonv9(p, pt9);\n    \n    \n    float d10 = sdPolygonv10(p, pt10);\n    float d11 = sdPolygonv11(p, pt11);\n    float d12 = sdPolygonv12(p, pt12);\n    \n    float d13 = sdPolygonv13(p, pt13);\n    \n    \n    d1 = SS(d1);\n    d2 = SS(d2);\n    d3 = SS(d3);\n    d4 = SS(d4);\n    d5 = SS(d5);\n    \n    \n    d6 = SS(d6);\n    d7 = SS(d7);\n    d8 = SS(d8);\n    d9 = SS(d9);\n    \n    d10 = SS(d10);\n    d11 = SS(d11);\n    \n    d12 = SS(d12);\n    d13 = SS(d13);\n    \n    \n    \n    fragColor=vec4(0.0);\n\n    vec3 col=vec3(0.49);\n    col=mix(col,vec3(0.3),d5);\n    col=mix(col,vec3(1.0),d1);\n    col=mix(col,vec3(1.0,0.0,0.0),d2);\n    col=mix(col,vec3(0.2,0.2,0.2),d3);\n    col=mix(col,vec3(0.2,0.2,0.2),d4);\n    \n    col=mix(col,vec3(0.8),d6);\n    col=mix(col,vec3(0.8),d7);\n    col=mix(col,vec3(0.4),d8);\n    col=mix(col,vec3(0.6,0.6, 0.6),d9);\n    \n    col=mix(col,vec3(0.84),d10);\n    col=mix(col,vec3(0.4),d11);\n    \n    col=mix(col,vec3(0.4),d12);\n    \n    col=mix(col,vec3(1.0,0.8,0.6),d13);\n    \n    fragColor=vec4(col,1.0);\n    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//por jorgefloresp-30-nov-2020\n//referencia el grupo de usuarios de Shadertoy\n\n\nfloat itime;\nvec3 f(float x) \n{\n\tconst float pi = radians(180.0);\n    vec3 t = vec3(-1.0, 0.0, 1.0)/6.0 + 6.0*cos(pi*x) + itime;\n    return 0.5 + x*(1.0 - x)*sin(pi*t);\n}\n\nvec3 f(vec2 xy) \n{\n    return f(xy.x) - xy.y;\n}\n\n\n\nvec2 mainSound( in int samp, float time )\n{\t\n    itime=mod(time,0.5);\n    // A 440 Hz wave that attenuates quickly overt time\n    //return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n    float tt=mod(time, 5.0);\n    vec3 res= f(vec2(sin(tt*500.0), tt/2.0));\n    vec3 res2= f(vec2(sin(tt*400.0), tt/2.0));\n    \n    \n    //return vec2( abs(res)+abs(res2.x));\n    if (tt<2.0)\n    return vec2( abs(res2));\n    else\n    return vec2( abs(res));\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}