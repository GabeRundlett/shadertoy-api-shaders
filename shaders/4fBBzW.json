{
    "Shader": {
        "info": {
            "date": "1724740986",
            "description": "Second attempt on some lava-like texture. This one does not have the seams present previously. There is a simple flow mapping there with a ton of effort trying to get some good looking colors.\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4fBBzW",
            "likes": 7,
            "name": "MoltenLand",
            "published": 3,
            "tags": [
                "fire",
                "texture",
                "lava"
            ],
            "usePreview": 0,
            "username": "kuvkar",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "// continuation to https://www.shadertoy.com/view/XclBDl\n\n// buffer A stores a few different grayscales \n// of few different textures used in coloring.\n// the flow map is rather simple, it's in buffer A\n// most of the effort here went to the coloring.\n\nvec3 dark = vec3(35.0, 33.0, 28.0) / 255.0 * 3.5;\nvec3 violets = vec3(90.0, 82.0, 100.0) / 255.0 * .5;\nvec3 bright = vec3(249.0, 113.0, 48.0) / 255.0 * 1.8;\nvec3 reds = vec3(247.0, 90.0, 48.0) / 255.0 * .5;\n\nvec3 getColor(in float f)\n{\n    vec3 col = dark;\n    col = mix(col, violets, smoothstep(0., 0.5, f));\n    col = mix(col, reds, smoothstep(0.5, .7, f));\n    col = mix(col, bright, smoothstep(0.6, 1., f));\n    col = mix(col, bright * 1.4, smoothstep(0.8, 1.2, f));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y /= iResolution.x / iResolution.y;\n    \n    // texture data\n    vec3 colr = texture(iChannel1, uv).rgb;\n    \n    // some details\n    vec4 tex = texture(iChannel0, 1.0 * uv + vec2(iTime * .002, 0.0));\n    vec4 tex2 = texture(iChannel2, 1.0 * uv + iTime * 1.2);\n    \n    // coloring madness\n    float a = colr.r * (0.9 + 0.1 * tex.r);\n    float b = colr.g;\n    float c = colr.b;\n    float rock = smoothstep(0.5, 0.7, a);\n    \n    float fire = 1.0 - rock;\n    fire *= 1.0 - a;\n    fire *= colr.g * 0.1 + 0.9;\n    fire *= colr.b * .35 + 0.5;\n    fire += pow(fire, 1.5) * .4;\n    fire += pow(fire, 4.0) * .4;\n    fire += pow(tex.b, 2.0) * .4;\n    fire = clamp(fire, 0.0, 1.0);\n    \n    vec3 col = vec3(.0);\n    vec3 fireColor = getColor(0.5 + pow(fire * 1., 3.));\n    vec3 rockColor = getColor(rock * 0.5 * smoothstep(0.0, 1., colr.b));\n    rockColor += colr.g * 1. * violets;\n    col = mix(rockColor, fireColor, 1. - rock);\n\n    float edge = smoothstep(0.02, 0., abs(a - 0.52));\n    edge *= tex.r;\n        \n    vec3 fireEdgeColor = 1. * getColor(.7 + .1 * sin(c * 6.));\n    fireEdgeColor *= 0.5 + 0.5 * colr.b;\n    fireEdgeColor /= 1.0 - tex.b * .81;\n    \n    col = mix(col, fireEdgeColor, edge);\n    col.rgb *= 0.85 + 0.15 * vec3(1. - smoothstep(0.02, 0., abs(a - 0.5)));\n\n    col /= 1.0 - ((pow(fire, 8.0)) * (.5 + .5 * sin(uv.x * 5. + iTime * 1.0)));\n    fragColor.rgb = col;\n    fragColor = smoothstep(0.0, 1., fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// https://www.shadertoy.com/view/lsf3WH\nfloat hash( in ivec2 p )  // this hash is not production ready, please\n{                         // replace this by something better\n\n    // 2D -> 1D\n    int n = p.x*3 + p.y*113;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return -1.0+2.0*float( n & 0x0fffffff)/float(0x0fffffff);\n}\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n    vec2 f = fract( p );\n\t\n    // cubic interpolant\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return 0.5 + mix( mix( hash( i + ivec2(0,0) ), \n                     hash( i + ivec2(1,0) ), u.x),\n                mix( hash( i + ivec2(0,1) ), \n                     hash( i + ivec2(1,1) ), u.x), u.y);\n}\n\n\nfloat fbm(in vec2 uv)\n{\n    uv *= 20.0;\n    float f = noise(uv * .5) * 0.5;\n    f += noise(uv * 1.0) * 0.5 * 0.5;\n    f += noise(uv * 2.) * 0.5 * 0.5 * 0.5;\n    return f;\n}\n\nvec3 getTexture(in vec2 uv)\n{\n    float r = texture(iChannel0, uv).r * 0.7;\n    r += texture(iChannel0, uv * 4.0).r * 0.25;\n    r += texture(iChannel0, uv * 8.0).r * 0.15;\n    float g = texture(iChannel2, uv.yx).r;\n    float b = texture(iChannel3, uv).r;\n    vec3 col = vec3(r * 1.3, g, b);\n    return col.rgb * 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0)\n    {\n        fragColor.rgb = getTexture(uv).rgb;\n        return;\n    }\n    \n    // find a random rotation vector, rotate the coordinates    \n    float a = fbm(uv + vec2(iTime * .01, 0.0));\n    a *= 5.;\n    a += iTime * .10;\n    mat2 r = mat2(sin(a), -cos(a), cos(a), sin(a));\n    uv += iTimeDelta * 0.1 * vec2(0.5, 0.0) * r;\n\n    // blend back in some of the original texture color over time,\n    // as input. simply difference between colors of the original\n    // texture and current texture, with some weight.\n    vec3 curCol = texture(iChannel1, uv).rgb;\n    vec3 texCol = getTexture(uv);\n    vec3 cdiff = texCol - curCol;\n    fragColor.rgb = curCol.rgb + cdiff.rgb * .015;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}