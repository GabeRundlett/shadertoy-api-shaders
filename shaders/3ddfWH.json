{
    "Shader": {
        "info": {
            "date": "1604998295",
            "description": "Shape function collection.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddfWH",
            "likes": 8,
            "name": "Shape functions",
            "published": 3,
            "tags": [
                "1d",
                "shapefunction"
            ],
            "usePreview": 0,
            "username": "iY0Yi",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "#define CYCLE 4.\n\nfloat swSin(float v){\n    return sin(v*TAU/CYCLE);\n}\nfloat swSqr(float v){\n    return -2.0*(step(0.5,fract(v/CYCLE))-0.5);\n}\nfloat swSaw(float v){\n    return fract(-v/CYCLE)*2.0-1.0;\n}\nfloat swTri(float v){\n    return asin(sin(v*TAU/CYCLE))*2./PI;\n}\n\nfloat uwSin(float v){\n    return s2u(swSin(v));\n}\nfloat uwSqr(float v){\n    return s2u(swSqr(v));\n}\nfloat uwSaw(float v){\n    return s2u(swSaw(v));\n}\nfloat uwTri(float v){\n    return s2u(swTri(v));\n}\n\nfloat uwQuadratic(float v){\n    return quadraticInOut(uwTri(v));\n}\nfloat uwCubic(float v){\n    return cubicInOut(uwTri(v));\n}\nfloat uwQuartic(float v){\n    return quarticInOut(uwTri(v));\n}\nfloat uwQintic(float v){\n    return qinticInOut(uwTri(v));\n}\nfloat uwExponential(float v){\n    return exponentialInOut(uwTri(v));\n}\nfloat uwCircular(float v){\n    return circularInOut(uwTri(v));\n}\nfloat uwElastic(float v){\n    return elasticInOut(uwTri(v));\n}\nfloat uwBack(float v){\n    return backInOut(uwTri(v));\n}\nfloat uwBounce(float v){\n    return bounceInOut(uwTri(v));\n}\n\nfloat swQuadratic(float v){\n    return u2s(uwQuadratic(v));\n}\nfloat swCubic(float v){\n    return u2s(uwCubic(v));\n}\nfloat swQuartic(float v){\n    return u2s(uwQuartic(v));\n}\nfloat swQintic(float v){\n    return u2s(uwQintic(v));\n}\nfloat swExponential(float v){\n    return u2s(uwExponential(v));\n}\nfloat swCircular(float v){\n    return u2s(uwCircular(v));\n}\nfloat swElastic(float v){\n    return u2s(uwElastic(v));\n}\nfloat swBack(float v){\n    return u2s(uwBack(v));\n}\nfloat swBounce(float v){\n    return u2s(uwBounce(v));\n}\n\n\n//#define UNSIGNED\n#define TICKNESS .005\nfloat SCALE = 0.; vec2 P; vec3 col;\n\nvec3 graph(float v, vec3 color){\n    float res =abs(P.y-v);\n    \n    //https://iquilezles.org/articles/distance\n    //https://www.shadertoy.com/view/MdfGWn\n    float e = 2./iResolution.y;\n    float g = length(vec2(dFdx(res),dFdy(res)))/e;\n    res /= g;\n    \n    res = sms(SCALE*e+TICKNESS, SCALE*e+TICKNESS*1.5, res);\n    res += texture(iChannel0, P).r*.25;\n    return saturate(res+color);\n}\n\nvoid Paper(){\n    P*=SCALE*2.;\n\n    #define PAPER vec3(1,.95,.9)*.8\n    #define GUIDE vec3(.1,.2,.25)*1.7\n    float ZERO = .003*SCALE;\n    float ONE = .01*SCALE;\n    float TEN = .1*SCALE;\n    col=PAPER;\n    col*=1.-(sms(1.-ONE,1.,abs(u2s(mod(P.x,1.0))))+sms(1.-ONE,1.,abs(u2s(mod(P.y*iResolution.y/iResolution.x,1.0)))))*0.75*GUIDE;\n    col*=1.-(sms(1.-TEN,1.,u2s(mod(P.x*10.0,1.0)))+sms(1.-TEN,1.,abs(u2s(mod(P.y*10.0*iResolution.y/iResolution.x,1.0)))))*0.5*GUIDE;\n    col*=1.-(P.x<ZERO&&P.x>=-ZERO?1.0:0.0)*GUIDE;\n    col*=1.-(P.y*iResolution.y/iResolution.x<0.003*SCALE&&P.y>=-0.003*SCALE?1.0:0.0)*GUIDE;\n    P.y*=iResolution.y/iResolution.x;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    P=(uv-0.5)*2.0;\n    \n#ifdef UNSIGNED\n    P+=.9;\n#endif\n    \n    // Scaling\n    SCALE = 2.;\n    \n    if(iMouse.z>0.)\n    {\n    \tP-=(iMouse.xy/iResolution.xy)*2.-1.;\n    }\n    \n    \n    \n    // Paper\n    Paper();\n    if(texture(iChannel0, uv*10.).g>.8){fragColor=vec4(pow(col, vec3(.45)), 1.); return;}\n    \n#ifdef UNSIGNED\n    if(P.x<.0 || P.y<0.){fragColor=vec4(pow(col, vec3(.45)), 1.); return;}\n#endif\n    \n\t// Markers: 8 colors\n    #define RED     vec3(0xe1U, 0x2aU, 0x0cU)/255.\n    #define GREEN   vec3(0x35U, 0xb8U, 0x51U)/255.\n    #define PURPLE  vec3(0xbdU, 0x6aU, 0xb0U)/255.\n    #define YELLOW  vec3(0xf2U, 0xdeU, 0x01U)/255.\n    #define ORANGE  vec3(0xf5U, 0x9dU, 0x04U)/255.\n    #define COBALT  vec3(0x61U, 0x75U, 0xbdU)/255.\n    #define BLUE    vec3(0x26U, 0xb9U, 0xf0U)/255.\n    #define BLACK   vec3(0x64U, 0x52U, 0x40U)/255.\n    \n    // Graph\n\tif(P.x<mod(iTime,5.*SCALE)-2.*SCALE)\n    {\n        col *= graph(sin(P.x*TAU/CYCLE), RED);\n        col *= graph(swTri(P.x), GREEN);\n        col *= graph(swSaw(P.x), PURPLE);\n        col *= graph(swSqr(P.x), YELLOW);\n        col *= graph(uwTri(P.x), ORANGE);\n        col *= graph(swQuartic(P.x), COBALT);\n        col *= graph(swCubic(P.x), BLUE);\n        col *= graph(uwCubic(P.x), BLACK);\n    }\n\t    \n    fragColor=vec4(pow(col, vec3(.45)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Constants\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n#define PI 3.14159265\n#define HALF_PI 1.5707963267948966\n#define SQRT2 1.41421356237\n#define TAU (2.*PI)\n#define PHI (sqrt(5)*0.5 + 0.5)\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define sms(min, max, x) smoothstep(min, max, x)\n#define s2u(v) ((v)*.5+.5)\n#define u2s(v) ((v-.5)*2.)\n\n\n// Easings\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// \"glsl-easings\": https://github.com/glslify/glsl-easings\nfloat linear(float t){return t;}\nfloat sineInOut(float t){return -0.5 * (cos(PI * t) - 1.0);}\nfloat quadraticInOut(float t){float p = 2.0 * t * t; return t < 0.5 ? p : -p + (4.0 * t) - 1.0;}\nfloat cubicInOut(float t){return t < 0.5 ? 4.0 * t * t * t : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;}\nfloat quarticInOut(float t) {return t < 0.5? +8.0 * pow(t, 4.0): -8.0 * pow(t - 1.0, 4.0) + 1.0;}\nfloat qinticInOut(float t){return t < 0.5 ? +16.0 * pow(t, 5.0) : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;}\nfloat exponentialInOut(float t){return t == 0.0 || t == 1.0 ? t : t < 0.5 ? +0.5 * pow(2.0, (20.0 * t) - 10.0) : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;}\nfloat circularInOut(float t){return t < 0.5 ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t)) : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);}\nfloat elasticInOut(float t){return t < 0.5 ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0)) : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;}\nfloat backInOut(float t){float f = t < 0.5 ? 2.0 * t : 1.0 - (2.0 * t - 1.0);float g = pow(f, 3.0) - f * sin(f * PI); return t < 0.5 ? 0.5 * g : 0.5 * (1.0 - g) + 0.5;}\nfloat bounceOut(float t){const float a = 4.0 / 11.0; const float b = 8.0 / 11.0; const float c = 9.0 / 10.0; const float ca = 4356.0 / 361.0; const float cb = 35442.0 / 1805.0; const float cc = 16061.0 / 1805.0; float t2 = t * t; return t < a ? 7.5625 * t2 : t < b ? 9.075 * t2 - 9.9 * t + 3.4 : t < c ? ca * t2 - cb * t + cc : 10.8 * t * t - 20.52 * t + 10.72;}\nfloat bounceInOut(float t){return t < 0.5 ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0)) : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}