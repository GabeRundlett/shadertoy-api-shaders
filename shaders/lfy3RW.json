{
    "Shader": {
        "info": {
            "date": "1712463960",
            "description": "I don't care if you use this shader, but you should credit me.",
            "flags": 0,
            "hasliked": 0,
            "id": "lfy3RW",
            "likes": 1,
            "name": "Block Glitch Shader",
            "published": 3,
            "tags": [
                "simple",
                "glitch"
            ],
            "usePreview": 0,
            "username": "Lego0_77",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "// Shader was shown in Baldi's Basics Randomizer, Edited some stuff to make more cooler\n\n// the glitch amp.\nfloat amp = 0.01;\n// the glitch block's offset.\nfloat glitchOffset = 0.0125;\n// the glitch block's count.\nfloat glitchBlocks = 20.0;\n\nfloat texStuff(vec2 uv, int number, float offset)\n{\n    float offsetREAL = 0.0;\n    if (floor(mod(uv.y * glitchBlocks, 2.0)) == 0.0)\n    {\n        if (floor(mod(uv.y * glitchBlocks, 4.0)) == 0.0)\n            offsetREAL = glitchOffset;\n        else\n            offsetREAL = -glitchOffset;\n    }\n    return texture(iChannel0, vec2((uv.x + offset) + offsetREAL, uv.y))[number];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col;\n    col.r = texStuff(uv, 0, -amp);\n    col.g = texStuff(uv, 1, 0.0);\n    col.b = texStuff(uv, 2, amp);\n    col.a = texStuff(uv, 3, 0.0);\n    fragColor = col;\n}\n\n// game engine shader convert thing.\n\n/* Unity Shader (Surface Shader, you can apply it to game objects.)\nShader \"Custom/Glitch\"\n{\n    Properties\n    {\n        _Color (\"Color\", Color) = (1,1,1,1)\n        _MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n        _Glossiness (\"Smoothness\", Range(0,1)) = 0.5\n        _Metallic (\"Metallic\", Range(0,1)) = 0.0\n        _Amp (\"Amp\", float) = 0.0\n        _GlitchOffset (\"Glitch Offset\", float) = 0.0\n        _GlitchBlocks (\"Glitch Blocks\", float) = 10.0\n    }\n    SubShader\n    {\n        Tags { \"RenderType\"=\"Opaque\" }\n        LOD 200\n\n        CGPROGRAM\n        // Physically based Standard lighting model, and enable shadows on all light types\n        #pragma surface surf Standard fullforwardshadows\n\n        // Use shader model 3.0 target, to get nicer looking lighting\n        #pragma target 3.0\n\n        sampler2D _MainTex;\n\n        struct Input\n        {\n            float2 uv_MainTex;\n        };\n\n        half _Glossiness;\n        half _Metallic;\n        fixed4 _Color;\n        float _Amp;\n        float _GlitchOffset;\n        float _GlitchBlocks;\n\n        float texStuff(fixed2 uv, int number, float offset)\n        {\n            float offsetREAL = 0.0;\n            if (floor(uv.y * _GlitchBlocks % 2.0) == 0.0)\n            {\n                if (floor(uv.y * _GlitchBlocks % 4.0) == 0.0)\n                    offsetREAL = _GlitchOffset;\n                else\n                    offsetREAL = -_GlitchOffset;\n            }\n            return tex2D(_MainTex, fixed2((uv.x + offset) + offsetREAL, uv.y))[number];\n        }\n\n        // Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.\n        // See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.\n        // #pragma instancing_options assumeuniformscaling\n        UNITY_INSTANCING_BUFFER_START(Props)\n            // put more per-instance properties here\n        UNITY_INSTANCING_BUFFER_END(Props)\n\n        void surf (Input IN, inout SurfaceOutputStandard o)\n        {\n            fixed4 col;\n            col.r = texStuff(IN.uv_MainTex, 0, -_Amp);\n            col.g = texStuff(IN.uv_MainTex, 1, 0.0);\n            col.b = texStuff(IN.uv_MainTex, 2, _Amp);\n            col.a = texStuff(IN.uv_MainTex, 3, 0.0);\n            col *= _Color;\n            clip(col.a - 0.5);\n            o.Albedo = col.rgb;\n            // Metallic and smoothness come from slider variables\n            o.Metallic = _Metallic;\n            o.Smoothness = _Glossiness;\n            o.Alpha = col.a;\n        }\n        ENDCG\n    }\n    FallBack \"Diffuse\"\n}\n*/\n\n/* Haxe Shader\n#pragma header\n\nuniform float amp;\nuniform float glitchOffset;\nuniform float glitchBlocks;\n\nfloat texStuff(vec2 uv, int number, float offset)\n{\n    float offsetREAL = 0.0;\n    if (floor(mod(uv.y * glitchBlocks, 2.0)) == 0.0)\n    {\n        if (floor(mod(uv.y * glitchBlocks, 4.0)) == 0.0)\n            offsetREAL = glitchOffset;\n        else\n            offsetREAL = -glitchOffset;\n    }\n    return texture2D(bitmap, vec2((uv.x + offset) + offsetREAL, uv.y))[number];\n}\n\nvoid main()\n{\n    vec2 uv = openfl_TextureCoordv;\n    vec4 col;\n    col.r = texStuff(uv, 0, -amp);\n    col.g = texStuff(uv, 1, 0.0);\n    col.b = texStuff(uv, 2, amp);\n    col.a = texStuff(uv, 3, 0.0);\n    gl_FragColor = col;\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}