{
    "Shader": {
        "info": {
            "date": "1612401920",
            "description": "Spectrum plot of the depth dependent dispersion kernel used by the water simulation at: https://www.shadertoy.com/view/wl3cDj.",
            "flags": 32,
            "hasliked": 0,
            "id": "WtcfzN",
            "likes": 5,
            "name": "Gravity Waves Dispersion Kernel",
            "published": 3,
            "tags": [
                "dispersion"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n\nSpectrum plot of the depth dependent dispersion kernel used by the water simulation at: https://www.shadertoy.com/view/wl3cDj.\n\nBlue     - ground-truth spectrum\nMagenta  - cross-section of 2d spectrum along diagonals\nOrange   - cross-section of 2d spectrum along main axes\n\nThe value of the water depth D is shown at the bottom left (can be manually changed via mouse).\n\nCommon   - #define USE_HQ_KERNEL (13 tabs kernel is used if not defined)\nBuffer A - horizontal filter pass\nBuffer B - vertical filter pass + blending\nBuffer C - Fourier transform (used for visualisation purposes only)\nBuffer D - absolute magnitude of Fourier transform\nImage    - plot\n\n\nRelated:\n\n- https://www.shadertoy.com/view/wl3cDj | \"Water Surface Simulation\"  (practical application of the kernel)\n- https://www.shadertoy.com/view/wtGyzK | \"half-Laplacian\"            (the kernel on which this one here is based on)\n\n*/\n\n#define FETCH(x,y) length(textureLod(iChannel2, mix(vec2(1.5), vec2(SIZE-0.5), vec2(x,y)*0.5+0.5)/iResolution.xy, 0.0))\n\nfloat ReferenceSpectrum(float x, float D)\n{\n    return x*tanh(x*D);\n}\n\n// https://www.shadertoy.com/view/4tfBzn\nfloat TextSDF(vec2 p, float glyph)\n{\n    p = abs(p.x - .5) > .5 || abs(p.y - .5) > .5 ? vec2(0.) : p;\n    return 2. * (texture(iChannel3, p / 16. + fract(vec2(glyph, 15. - floor(glyph / 16.)) / 16.)).w - 127. / 255.);\n}\nvoid ValueText(inout vec3 col, vec2 uv0, float n)\n{\n    vec2 p = uv0 * 0.5;\n    p.x -= 1.0;\n    \n    vec2 scale = vec2(4., 8.);\n    vec2 t = floor(p / scale);   \n\n    if(t.x < 0.0 || t.x > 4.0 || t.y != 0.0) return;\n\n    float c = 0.0;\n    \n    if(t.x == 0.0) c = floor(n) == 0.0 ? 48.0 : floor(n) == 1.0 ? 49.0 : 50.0;\n    else if(t.x == 1.0) c = 46.0;\n    else\n    c = 48.0 + mod(floor(abs(n)*1000.0 * exp2((4.0-t.x) * -(log2(10.0)/log2(2.0)))), 10.0);\n\n    p = (p - t * scale) / scale;\n    p.x = (p.x - 0.5) * 0.5 + 0.5;\n\n    if (c == 0.) return;\n    \n    float sdf = TextSDF(p, c);\n    sdf = smoothstep(0.08, -0.08, sdf);\n    col = mix(col, vec3(0.0), sdf);\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += 0.0;\n    \n    vec2 tex = uv0;\n    tex /= iResolution.xy;\n\n    tex = tex * 2.0 - 1.0;\n    tex.y += 1.0-0.125;\n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    \n    float s = 0.333;// vertical scaling factor used to fit plot into viewport\n    \n    // water depth\n  #ifdef USE_HQ_KERNEL\n    float D = iMouse.z > 0.0 ? iMouse.x/iResolution.x*2.0 : GetD(iTime);\n  #else\n    float D = iMouse.z > 0.0 ? iMouse.x/iResolution.x*1.0 : GetD(iTime);\n  #endif\n  \n    // ground-truth spectrum\n    col = mix(col, vec3(0.0, 0.5, 1.0), Graph(ReferenceSpectrum((tex.x)*(Pi*sqrt(2.0)), D)*s - tex.y, 1.5) * 0.5);// blue\n    \n    // cross-section of 2d spectrum along diagonals\n    col = mix(col, vec3(1.0, 0.0, 0.5), Graph(FETCH(tex.x, tex.x)*s - tex.y, 0.5) * 0.75);// magenta\n    \n    // cross-section of 2d spectrum along main axes\n    col = mix(col, vec3(1.0, 0.4, 0.0), Graph(FETCH(-abs(tex.x)*sqrt(2.0), 0.)*s - tex.y, 0.5) * (abs(tex.x)*sqrt(2.0)<1.0?1.0:0.0));// orange\n    \n    // show value of D\n    ValueText(col, uv0, D);\n\n\n    #if 1\n    {\n        // vignetting\n        vec2 s = (uv0/iResolution.xy*2.0-1.0);\n        s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n        col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    }\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n#define FETCH(uv) (uv).x == uint(SIZE*0.5) && (uv).y == uint(SIZE*0.5) ? 1.0 : 0.0\n\nfloat EvalWhiteNoise(uvec2 uv)\n{\n    const uint r  = 2654435761u;\n    const uint r0 = 3242174893u;\n    const uint r1 = 2447445397u;\n    uint h = ((uv.x * r0 + uv.y) ^ (uv.y * r1 + uv.x)) * r;\n    return float(h) * (1.0 / 4294967295.0);\n}\n\nvoid mainImage(out vec4 col, in vec2 uv0)\n{\n  #ifndef USE_HQ_KERNEL\n    discard; return;\n  #endif\n  \n    if(uv0.x > SIZE || uv0.y > SIZE) { discard; return; }\n    \n    uvec2 uv = uvec2(uv0 - 0.5);\n    \n    float lowp3[4] = float[4](5.0/16.0, 15.0/64.0, 3.0/32.0, 1.0/64.0);   \n    float lowp7[8] = float[8](429.0/2048.0, 3003.0/16384.0, 1001.0/8192.0, 1001.0/16384.0, 91.0/4096.0, 91.0/16384.0, 7.0/8192.0, 1.0/16384.0);   \n    float lapl7[8] = float[8](3.22, -1.9335988099476562, 0.4384577800334821, -0.1637450351359609, 0.07015324480535713, -0.02963974593026339, 0.010609595665007715, -0.0022370294899667453);   \n\n    float lowpass3  = 0.0;\n    float lowpass7  = 0.0;\n    float laplacian = 0.0;\n    \n    for(int x = -7; x <= 7; ++x)\n    {\n        float f = FETCH(uv + uvec2(x, 0));\n    \n        int i = abs(x);\n\n        lowpass3  += f * (i < 4 ? lowp3[i] : 0.0);\n        lowpass7  += f * lowp7[i];\n        laplacian += f * lapl7[i];\n    }\n\n    float f0 = FETCH(uv);\n    \n    col = vec4(lowpass3, lowpass7, f0, laplacian);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n*/\n\n\nvoid mainImage(out vec4 col, in vec2 uv0)\n{\n    if(uv0.x > SIZE || uv0.y > SIZE) { discard; return; }\n\n    uvec2 uv = uvec2(uv0 - 0.5);\n\n\n  #ifdef USE_HQ_KERNEL\n  \n    float D = iMouse.z > 0.0 ? iMouse.x/iResolution.x*2.0 : GetD(iTime);\n  \n    #define FETCH(uv) texelFetch(iChannel0, ivec2(uv), 0)\n  \n    float lowp3[4] = float[4](5.0/16.0, 15.0/64.0, 3.0/32.0, 1.0/64.0);   \n    float lowp7[8] = float[8](429.0/2048.0, 3003.0/16384.0, 1001.0/8192.0, 1001.0/16384.0, 91.0/4096.0, 91.0/16384.0, 7.0/8192.0, 1.0/16384.0);   \n    float lapl7[8] = float[8](3.22, -1.9335988099476562, 0.4384577800334821, -0.1637450351359609, 0.07015324480535713, -0.02963974593026339, 0.010609595665007715, -0.0022370294899667453);   \n\n    float lowpass3  = 0.0;\n    float lowpass7  = 0.0;\n    float laplacian = 0.0;\n    \n    for(int y = -7; y <= 7; ++y)\n    {\n        vec3 f = FETCH(uv + uvec2(0, y)).xyz;\n    \n        int i = abs(y);\n\n        lowpass3  += f.x * (i < 4 ? lowp3[i] : 0.0);\n        lowpass7  += f.y * lowp7[i];\n        laplacian += f.z * lapl7[i];\n    }\n\n    vec4 f0 = FETCH(uv);\n    \n    laplacian += f0.w;\n\n    float D2 = clamp01(D - 1.0);\n\n    float highpass = f0.z - mix(lowpass3, lowpass7, 0.772 * D2);\n    float halfLaplacian =   mix(highpass, laplacian, 0.19)*1.255;\n    \n  #else\n  \n    float D = iMouse.z > 0.0 ? iMouse.x/iResolution.x*1.0 : GetD(iTime);\n  \n    #define FETCH(uv) (uv).x == uint(SIZE*0.5) && (uv).y == uint(SIZE*0.5) ? 1.0 : 0.0\n  \n    // 13 tabs version\n    const int r  = 2;\n    const int r1 = r + 1;\n \n    float kernA[r1] = float[r1](2.85, -1.5792207792207793, 0.15422077922077923);\n \n    float kernB[r1*r1] = float[r1*r1](2.0933782605117255  , -0.32987120049780483, -0.026408964879028916, \n                                     -0.32987120049780483 , -0.1670643997510976 ,  0.0                 ,\n                                     -0.026408964879028916,  0.0                ,  0.0                 );\n     \n    float laplacian = 0.0;\n    float halfLaplacian = 0.0;\n\n    for(int y = -r; y <= r; ++y)\n    for(int x = -r; x <= r; ++x)\n    {\n        float w = (kernB[abs(x) + abs(y) * r1]);\n\n        if(w == 0.0) continue;\n\n        float f = FETCH(uv + uvec2(x, y));\n\n        halfLaplacian += f * w;\n\n        if(y == 0) laplacian += f * kernA[abs(x)];                \n        if(x == 0) laplacian += f * kernA[abs(y)];                \n    }  \n    \n   #endif\n    \n    D = clamp01(D);\n    \n  #if 1\n    float S = 7.0 * (D*D) / (2.0 + 5.0 * (D*D));  \n  #else\n    float S = 13.0 * (D*D) / (4.0 + 9.0 * (D*D));\n  #endif\n  \n    float kern = mix(laplacian, halfLaplacian, S) * D;\n\n    //kern = laplacian*0.3;\n\n    col = vec4(kern, 0.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Horizontal + Vertical Discrete Fourier Transform of the input \n//adapted from FabriceNeyret2's https://www.shadertoy.com/view/XtScWt\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord )\n{\n   \tfragColor = vec4(0);\n    \n    vec2 uv = fragCoord.xy - 0.5;\n    \n    if(fragCoord.x >= SIZE || fragCoord.y >= SIZE) {discard; return;}\n    \n    for(float i = 0.; i < SIZE; i++)  \n\t{\n\t\tvec2 xn = texelFetch(iChannel0, ivec2(i, uv.y), 0).rg;\n        vec2 yn = texelFetch(iChannel1, ivec2(uv.x, i), 0).ba;\n\t\tvec2 ang = - 6.2831853 * (uv -SIZE/2.) * i/SIZE;\n\t\tfragColor.zw += cmul(xn, ang.x);\n\t\tfragColor.xy += cmul(yn, ang.y);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n\n   #define USE_HQ_KERNEL\n\n\nfloat GetD(float time)\n{\n    float D = (sin(time*0.5)*0.5+0.5);\n    \n  #ifdef USE_HQ_KERNEL\n    D *= 2.0;\n  #endif\n  \n    return D;\n}\n\n#define SIZE 128.0\n\n#define rsqrt inversesqrt\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define If(cond, resT, resF) mix(resF, resT, cond)\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage(out vec4 fragColor, vec2 fragCoord )\n{\n   \tfragColor = vec4(0);\n    \n    vec2 uv = fragCoord.xy - 0.5;\n    \n    if(fragCoord.x >= SIZE || fragCoord.y >= SIZE) {discard; return;}\n    \n\tfragColor = vec4(length(texelFetch(iChannel0, ivec2(uv), 0).rg), 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}