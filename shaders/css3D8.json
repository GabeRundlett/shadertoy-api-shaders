{
    "Shader": {
        "info": {
            "date": "1666065106",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "css3D8",
            "likes": 3,
            "name": "Fractal mosaic 22 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,.5)\n        //vec2(2.5,-1.)\n        //vec2(1.5,0.)\n        \n        //vec2(-2.,.5+mod(floor(a.x),2.))\n    ,\n    \n    a1 = a-a2;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = true;\n    for(int k = 0; k < 9; k++){\n        \n        //uv.y -= t1_(floor(uv),floor(uv));\n        \n        t3 = uv.x < uv.y;\n        uv =\n            max(abs(uv-t2),abs(uv-t2/2.)-fmod(uv.x,2.))\n            //abs(uv+t2)\n            //abs(uv+t2-.5)/(.5+fmod(t2.x,2.))\n            //abs(.5+uv+t2)-vec2(fmod(uv.x*2.,2.),fmod(uv.y/2.,2.))\n            //max(abs(uv+t2),abs(.5+uv+t2))\n            //abs(.5+uv+t2)*fract(uv/4.) //another interesting pattern\n        ;\n        //uv += (distance(floor(uv),round(uv+.5)));\n\n        \n        t2 =\n            triangle_wave(uv-.5-fmod(uv.x,2.))\n            //-triangle_wave(uv-.5)/(.5+fmod(t2.x,2.))\n            //-triangle_wave(uv-.5-fmod(t2.x,2.))\n        ;\n        //t2 -= float(!t3)/2.;\n        uv = (t2-triangle_wave(uv.yx));\n        //uv = fract(uv)*fract(uv/2.)*fract(uv/4.);\n\n        float c1 =\n            //(uv.x-uv.y)\n            //(uv.x*uv.y)\n            (uv.x-uv.y)\n        ;\n        col = col.yzx;\n        vec3 col1 = col;\n        if(t3 || uv.y < uv.x) col1 = abs(col.yzx-vec3(col.yz,c1));\n        if(!t3 || uv.y > uv.x) col1 = abs(col1-max(col,vec3(col.yz,c1)));\n        col = col1;\n        //col *= col+.5;\n        //if(t3 && uv.y < uv.x) col = vec3(col.yz,c1);\n\n    }\n    fragColor = vec4(min(col*2.,vec3(1.)),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time){\n  float tempo = 1.;\n  time /= tempo;\n  float s1 =\n      4.,\n      //5./(1.+fmod(time/2.,2.)), //varying tempo\n  s2 = 8.,\n  m4 = fmax1(time+floor(time),time,2.),\n  t= //varying tempo\n      time/(1.+m4)\n      //time/(1.+fmod(floor(time*s1),2.))\n      //time/(1.+fmod(time/s1+floor(time*s1),2.))*2.\n      //time/(1.+fmod(time*s1+floor(time),2.))\n      //time*(1.+fmod(time*s1,2.))/2.\n  ,\n  m1 =\n      fmax1(t/s1,t,s2)\n      //fmod(t/s1+floor(t*s1),s2)\n      //fmod(t*s1+floor(t/s1),s2)\n  ,\n  //m4 = fmod(t*s1,s1),\n  m3 =\n      fmax1(t/(m1+.5),t,s2);\n      //fmod(t*(s1+m4)/(m1+.5),s2);\n      //fmod((t+m1)*s1/(m4+.5),s2);\n      //fmod(t*s1/abs(2.5-m1),s2);\n  \n  //m1 = fmod(t/s1,s2),\n  \n  //t += m3/2.;\n  t /=  //varying tempo\n      (1.+fmod(t/s1+floor(t+.5),2.))\n      //(1.+fmod((floor(t/s1)+t/s1)/2.+floor(t*s1),2.))\n  ;\n  //t += s1*s1;\n  t *=\n      s1*s1*(1.+fmod(floor(t*s1*2.)/s1,2.))/(1.+fmod(floor(t*s1/2.)/s1,2.))\n      //s1*s1\n  ;\n  \n    float m2 =\n      1. + fmod((t/s1+floor(t/s1)),s1)\n      //1. + fmod(t/s1,8./(1.+fmod(t/s1,2.)))\n      //1. + fmod(t/s1,s1/2.)*fmod(t/s1/2.,s1/2.)\n      //1. + min(fmod(time,s1),t)\n  ;\n  \n  //m3 = mod(floor(t/s1),1.+s1+m3);\n  //m2 = mod(floor(t/s1*2.),s1-m2);\n  \n  //t /= max(m2,m1+m3+1.);\n  \n  float a=\n      //32.*((1.-sqrt(fract(t/s1))))\n      16.*pow((1.-(fract(t/s1)/2.)),2.)\n  ,\n  \n  nb = time*tempo*pow(2.,(m3+m2)/5.+6.5);\n\n  return\n      abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/8.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod(float a, float b){\n    //a += fmod2(a,2.);\n    \n    //divide by powers of 2 to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(mod(floor(a),b+floor(b/3.)),b)\n        //mod(floor(a)*floor(-a/b),b)\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\n//#define fmod(a, b) mod(floor(a/2.),b)\n//#define fmod(x,y) mod(floor(x)+floor((x)/3.)+floor((x)/5.),y)\n#define fmax1(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fmin1(x,y,z) min(fmod(x,z),fmod(y,z))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}