{
    "Shader": {
        "info": {
            "date": "1685691684",
            "description": "A zellij tile pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "Dt3SRs",
            "likes": 7,
            "name": "Zellij pattern 13 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "arabesque",
                "zellij"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a-fract(a*4.)/2.)\n        //fract(a-floor(a.yx)/4.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n        //vec2(1.-sign(a.x)/2.,0.5+sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    \n    //another interesting pattern\n    //if(a.x>a.y) a2 = -vec2(.5,1.5);\n    \n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 uv = (fragCoord)/iResolution.x/t1/2.0;\n    uv.y += (iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    bool b = true;\n    uv.y = mod(uv.y,.5)+.25;\n    uv.x = mod(uv.x,.5)+.25;\n    for(int k = 0; k < 6; k++){\n        uv =\n            abs(.5-uv-t2)/1.5\n            //abs(-.5*sign(uv.y-uv.x)-uv-t2)/1.5\n        ;\n        \n        //remove the red border around the zellij pattern\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n\n        //uv.y -= .5;\n        b =\n            uv.y<uv.x\n            //uv.y<uv.x||t2.y<t2.x&&!b\n        ;\n        if(b)\n            uv = uv.yx\n            //uv.x += .5\n            //uv.y += .5\n        ;\n        t2 =\n            triangle_wave(uv-.5).yx\n            //triangle_wave(uv-.5+floor(.5+t2.y+t2.x)).yx\n        ;\n        uv =\n            t2-triangle_wave(uv.yx).yx*sign(.5-uv.y)\n        ;\n        vec2 t21 =\n            //triangle_wave(t2)\n            t2\n        ;\n        col.x =\n            max((t21.y+t21.x),col.x)\n            //max(abs(t2.y+t2.x),1.-col.x)\n        ;\n        col =\n            abs(col-1.+col.x)\n            //vec3(col.zx,max(uv.x-uv.y,col.y))\n            //max((col-1.+col.x/1.5),(1.-col-col.yzx))\n        ;\n    }\n    if (!b) col = abs(1.-col);\n    fragColor = vec4(min(col,vec3(1.)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //a /= (1. + floor(mod(1.+a/16.*b,2.)));\n    //a = (a/8.*b);\n    //a = a/2. + floor(a/2.)/b*8.;\n    //a = (a/2. + pow(2.,mod(floor(a/2.),3.)))/2.;\n    return\n        floor(mod(floor(a+pow(4.,b)),b))\n        //floor(mod(floor(a+pow(floor(b/2.),b)),b*2.))\n        //mod(mod(floor(a),floor(b/2.))*mod(floor(a/b),b),b)\n        //floor(mod(floor(a*4.)/b,b))\n        //floor(mod(floor(a+floor(a/2.)),b))\n    ;\n}\n\nfloat sqmod(float a, float b){\n    float m1 = mod(floor(a),b);\n    return floor(m1*m1/b);\n}\n\nfloat fmod1(float a,float b){\n    return mod(floor((fmod(a*2./b,b)*fmod(a/b,b))),b);\n}\n\nvec2 mainSound(int samp, float time){\n  float s1 =\n      4.*pow(2.,fmod(1.-time/2./8.,2.)),\n  m0 = pow(2.,fmod(time/s1,2.)),\n  t = time/m0/2.,\n  m1 = fmod(t,s1);\n  t = pow(2.,fmod(t*4.+m1,2.))*t/(1.+fmod(m1+floor(t*2.)+floor(t/2.),2.));\n  float\n  m3 =\n      floor(fmod(-time*m0*s1,s1)/2.)\n  ;\n  float m2 =\n      1. + fmod(t*s1,s1/2.)\n      //1. + fmod(time*s1,s1/2.)\n  ;\n  float a=\n      2.*(pow((1.-log(fract(t*s1)/5.))/5.,2.)+pow((1.-(fract(-t*s1/2.)/5.))/5.,2.))\n  ;\n  float nb = pow(2.,(m3*m2-m1)/5.+8.);\n  return\n      abs(.5-1.*vec2(fract(time*nb*.998),fract(time*nb)))*a\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}