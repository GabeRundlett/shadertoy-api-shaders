{
    "Shader": {
        "info": {
            "date": "1686265033",
            "description": "Implementing Mean Value Coordinates in a quadrilateral, as explained here: [url]https://diglib.eg.org/bitstream/handle/10.2312/EGGH.EGGH04.007-014/007-014.pdf[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "dlVXRc",
            "likes": 30,
            "name": "Mean Value Coordinates on Quad",
            "published": 3,
            "tags": [
                "2d",
                "quad",
                "meanvaluecoordinates",
                "mvc"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 801
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Inigo Quilez\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Mean Value Coordiantes implemented as in this paper:\n//\n//    https://diglib.eg.org/bitstream/handle/10.2312/EGGH.EGGH04.007-014/007-014.pdf\n//\n// You can compare to regular bilinear coordinates here:\n//\n//    https://www.shadertoy.com/view/lsBSDm (https://iquilezles.org/articles/ibilinear)\n//\n// Other shaders using MVCs:\n//    https://www.shadertoy.com/view/XdXBWl\n//    https://www.shadertoy.com/view/7ljGDc\n//    https://www.shadertoy.com/view/flGGzV\n\n\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nvec2 mvc( in vec2 p, in vec2 pa, in vec2 pb, in vec2 pc, in vec2 pd )\n{\n    vec2 sa = pa - p;\n    vec2 sb = pb - p;\n    vec2 sc = pc - p;\n    vec2 sd = pd - p;\n    \n    vec4 r = vec4( length(sa), length(sb), length(sc), length(sd) );\n    vec4 d = vec4( dot(sa,sb), dot(sb,sc), dot(sc,sd), dot(sd,sa) );\n    vec4 a = vec4( cro(sa,sb), cro(sb,sc), cro(sc,sd), cro(sd,sa) );\n\n    vec4 t = (r.xyzw*r.yzwx - d) / a;\n    vec4 u = (t.xyzw  +  t.wxyz) / r;\n    \n    vec4 w = u / (u.x+u.y+u.z+u.w);\n    \n    return w.yw + w.z; // equivalent to the block below\n    \n    /*\n    return vec2(0,0)*w.x + \n           vec2(1,0)*w.y +\n           vec2(1,1)*w.z +\n           vec2(0,1)*w.w;\n    */           \n}\n\n// distance to a line segment\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    p -= a; b -= a;\n\treturn length( p-b*clamp(dot(p,b)/dot(b,b),0.0,1.0) );\n}\n\n// simple hash\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+3.0,n+7.0))*321.513); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // background\n    vec3 col = vec3( 0.35 + 0.1*p.y );\n\n    // move points\n    vec2 a = cos( 1.11*iTime + vec2(0.1,4.0) );\n    vec2 b = cos( 1.13*iTime + vec2(1.0,3.0) );\n    vec2 c = cos( 1.17*iTime + vec2(2.0,2.0) );\n    vec2 d = cos( 1.15*iTime + vec2(3.0,1.0) );\n\n    // d = c+a-b; // enable this to test parallelograms\n    \n    // area of the quad\n    vec2 uv = mvc( p, a, b, c, d );\n    \n    // inside of quad if uv in [0..1]^2\n    if( max( abs(uv.x-0.5), abs(uv.y-0.5))<0.5 )\n    {\n        col = texture( iChannel0, uv ).xyz;\n    }\n    \n    // quad borders\n    float h = 2.0/iResolution.y;\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,a,b)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,b,c)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,c,d)));\n    col = mix( col, vec3(1.0,0.7,0.2), 1.0-smoothstep(h,2.0*h,sdSegment(p,d,a)));\n \n    // dither\n    col += (1.0/255.0)*hash3(p.x+1920.0*p.y);\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}