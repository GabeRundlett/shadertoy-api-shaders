{
    "Shader": {
        "info": {
            "date": "1678023283",
            "description": "Moving circles creating the illusion of a sphere.\n\nUse with music in iChannel0",
            "flags": 0,
            "hasliked": 0,
            "id": "md3GDl",
            "likes": 3,
            "name": "Dancing Color Rings",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "// Dancing Color Rings v0.7.230305\n// auto-vj ellipsoid illusion made of circles\n//\n// - use with music in iChannel0 -\n\nvec4 fft, ffts; //compressed frequency amplitudes\n\nvoid compressFft(){ //compress sound in iChannel0 to simple frequency-range amplitude estimations \n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. shadertoy.com/view/Xds3Rr)\n    for (int n=1;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 86-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(2,8,7,4); ffts /= vec4(2,3,3,21); //normalize\n    fft.x = smoothstep(.8,.9,fft.x); //weaken weaker sounds, semi hard limit\n}\n\nfloat fitPoly2(float x, vec3 y){ //simple polynom2 fit: expects y at x = {0, .5, 1.}\n    return y.r+(4.*y.g-3.*y.r-y.b)*x+(2.*y.r-4.*y.g+2.*y.b)*x*x;\n}\n\nvec3 getCol(float id, float s){ //color definitions\n    vec3 setCol = vec3(255);\n \n\tif (id==0.) setCol = vec3( //vaporwave blue shift\n        fitPoly2(s, vec3(9,30,0)), //r\n        fitPoly2(s, vec3(0,29,250)), //g\n        fitPoly2(s, vec3(66,215,253))); //b\n    else if (id==1.) setCol = vec3( //vaporwave red shift\n        fitPoly2(s, vec3(132,244,255)),\n        fitPoly2(s, vec3(0,0,148)),\n        fitPoly2(s, vec3(92,204,255)));\n\telse if (id==2.) setCol = vec3( //miami green shift\n        fitPoly2(s, vec3(39,26,173)),\n        fitPoly2(s, vec3(153,246,252)),\n        fitPoly2(s, vec3(106,138,248)));\n\telse if (id==3.) setCol = vec3( //miami orange shift\n        fitPoly2(s, vec3(250,252,236)),\n        fitPoly2(s, vec3(47,157,212)),\n        fitPoly2(s, vec3(11,0,80)));\n\telse if (id==4.) setCol = vec3( //arena red\n        fitPoly2(s, vec3(53,231,237)),\n        fitPoly2(s, vec3(17,15,114)),\n        fitPoly2(s, vec3(18,20,41)));\n\telse if (id==5.) setCol = vec3( //arena blue\n        fitPoly2(s, vec3(35,103,178)),\n        fitPoly2(s, vec3(87,211,225)),\n        fitPoly2(s, vec3(97,225,245)));\n   \n    return setCol/255.;\n}\n\nmat2 rotM(float rad){ //2D rotation matrix\n    return mat2(cos(rad),-sin(rad),sin(rad),cos(rad));\n}\n\nfloat sdCircle(vec2 pos, float r){ //signed distance function for circle of radius r with center at (0,0)\n    return length(pos)-r;\n}\n\nfloat ring(vec2 pos, float r){ //ring of radius r with fixed width\n    return step( abs(sdCircle(pos, r)), .005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float aTime = 2.133333*iTime; \n    compressFft(); //initializes fft, ffts\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -1..1\n    vec3 background = .5*vec3(1.+sign(uv.y+.2)); //define background\n    \n    // Generate ellipsoid illusion\n    float r = .33*ffts.w+.03; //sphere radius\n    float maxRing = ceil(10.*clamp(ffts.w,.2,1.)); //number of rings is 2*maxRing-1\n    uv = (fract(aTime/4.)>.5) ? fract(2.5*(.27+mod(aTime/32.,2.)*mod(aTime/32.,2.))*uv+.5)-vec2(.5) : .9*uv; //pattern & single\n    uv *= rotM(aTime/8.); //rotate xy\n    vec3 myCol; \n    vec3 col = vec3(0);\n    \n\tfor (float n=-maxRing+1.;n<maxRing;n++){ //draw rings\n        myCol = getCol(mod(n+floor((float(ffts.x<ffts.y)+float(ffts.y<ffts.z)+float(ffts.z<ffts.x))), 6.),fft[1+int(mod(n,3.))]); //define color\n        col += myCol*ring((uv-vec2((1.+.66*fft.x)*r*n/maxRing*sin(aTime/16.),.0))/vec2(cos(aTime/16.),1.),r*sqrt(1.-n/maxRing*n/maxRing));\n    }\n    \n\t// Finalizations\n    col += background*(1.-max(col.x,max(col.y,col.z))); //draw background\n    col = pow(col, vec3(.4545)); //gamma correction\n    fragColor = vec4(col,1.0); //output\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}