{
    "Shader": {
        "info": {
            "date": "1601723980",
            "description": "Something to begin with",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3yzl",
            "likes": 6,
            "name": "will u stay",
            "published": 3,
            "tags": [
                "lighting",
                "shadowing"
            ],
            "usePreview": 0,
            "username": "Dreamfall",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "const float metalness = 0.3; // (0, 1)\nconst float roughness = 0.3; // (0, 1)\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat height(vec2 uv)\n{\n    float heightMod = 50.0;\n    return heightMod * texture(iChannel1, uv).x;\n}\n\nvec3 normal(vec2 xy, vec2 uv)\n{\n    float eps = 0.01;\n\tvec3 dhu, dhv;\n    \n    // get planar vectors\n    // process borders separately\n    if (xy.x >= 1.0 && xy.y >= 1.0)\n    {\n    \tdhu = vec3(xy, height(uv)) - vec3(xy.x - 1.0, xy.y, height(vec2(uv.x - 1.0/iResolution.x, uv.y)));\n    \tdhv = vec3(xy, height(uv)) - vec3(xy.x, xy.y - 1.0, height(vec2(uv.x, uv.y - 1.0/iResolution.y)));\n    }\n\tif (xy.x > 1.0 && xy.y < 1.0)\n    {\n    \tdhu = vec3(xy, height(uv)) - vec3(xy.x - 1.0, xy.y, height(vec2(uv.x - 1.0/iResolution.x, uv.y)));\n    \tdhv = vec3(xy.x, xy.y + 1.0, height(vec2(uv.x, uv.y + 1.0/iResolution.y))) - vec3(xy, height(uv));\n    }\n    if (xy.x < 1.0 && xy.y > 1.0)\n    {\n    \tdhu = vec3(xy.x + 1.0, xy.y, height(vec2(uv.x + 1.0/iResolution.x, uv.y))) - vec3(xy, height(uv));\n    \tdhv = vec3(xy, height(uv)) - vec3(xy.x, xy.y - 1.0, height(vec2(uv.x, uv.y - 1.0/iResolution.y)));\n    }\n    if (xy.x < 1.0 && xy.y < 1.0)\n    {\n    \tdhu = vec3(xy.x + 1.0, xy.y, height(vec2(uv.x + 1.0/iResolution.x, uv.y))) - vec3(xy, height(uv));\n    \tdhv = vec3(xy.x, xy.y + 1.0, height(vec2(uv.x, uv.y + 1.0/iResolution.y))) - vec3(xy, height(uv));\n    }\n    dhu = normalize(dhu);\n    dhv = normalize(dhv);\n    vec3 normal = normalize(cross(dhu, dhv));\n    \n    // Add abit noise based on scaled roughness value\n    normal += roughness / 4.0 * (dhu * random(uv) + dhv * random(uv));\n    normal = normalize(normal);\n    \n    return normal;\n}\n\n// check if pixel is in shadow\nbool isInShadow(vec2 point, vec3 lightSource)\n{\n    float eps = 0.1;\n    vec3 dir = normalize(lightSource - vec3(point, height(point/iResolution.xy)));\n    vec3 currentPos = vec3(point, height(point/iResolution.xy)) + dir;\n    int cycles = 0;\n    while (length(currentPos - lightSource) > eps)\n    {        \n        if (currentPos.z < height(currentPos.xy/iResolution.xy))\n            return true;\n        // prevent dead loop\n        if (cycles > 1000)\n            break;\n        currentPos += dir;\n        cycles++;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightSource = vec3(iMouse.xy, 80);\n    \n    // Raw pixel coordinates\n    vec2 xy = fragCoord.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \t// Direction for CubeMap tex\n    // Setting it looking to the floor: (*, -1, *)\n    vec3 cubeMapdir = normalize(vec3(2.0 * (uv.x - 0.5), -1, 2.0 * (uv.y - 0.5)));    \n    vec4 textureColor = textureLod(iChannel0, cubeMapdir, 0.0);\n\n    // Retrieving current normal\n    vec3 normal = normal(xy, uv);\n    \n    // Computing lighting modifier\n    vec3 lightDir = normalize(lightSource - vec3(xy, height(uv)));\n    //vec3 lightDir = normalize(lightSource - vec3(xy, 0));\n    vec3 reflectDir = reflect(-lightDir, normal);\n    vec3 viewDir = vec3(0, 0, 1);\n    float ambient = 0.5;\n    float diffuse = 1.0 * max(dot(lightDir, normal), 0.0);    \n    float spec = 0.5 * pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    // Add metalness\n    float reflectiveness = 0.8 * metalness;\n    diffuse = (1.0 - reflectiveness) * diffuse;\n    spec = reflectiveness * spec;\n    float ambientdiffuse = ambient + diffuse;\n    \n    // Output to screen    \n    fragColor = vec4(textureColor.xyz * ambientdiffuse, 1.0) + vec4(vec3(spec), 1.0);\n    if (isInShadow(xy, lightSource))\n    \tfragColor = 0.5 * fragColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}