{
    "Shader": {
        "info": {
            "date": "1628217826",
            "description": "Very old shader I was working on. Also my slowest one yet (~8fps on my computer) :(",
            "flags": 0,
            "hasliked": 0,
            "id": "sdfGWX",
            "likes": 9,
            "name": "Rover",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "terrain",
                "ik",
                "robot"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "// Constants\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n// Compiler trick to avoid loop unrolling (the compiler doesn't know about iFrame\n// so it can't make this a constant which would allow it to unroll loops depending on it)\n#define ZERO min(iFrame, 0)\n\n// SDFs\nfloat sdLine(in vec3 p, in vec3 a, in vec3 b) {\n    vec3 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisc(in vec3 p, in float r) {\n    p.x = length(p.xz);\n    return length(p - vec3(min(p.x, r), 0.0, p.z));\n}\n\nfloat sdCylinder(in vec3 p, in float h, in float r) {\n    vec2 q = vec2(length(p.xz) - r, abs(p.y) - h);\n    return length(max(q, 0.0)) + min(0.0, max(q.x, q.y));\n}\n\nfloat sdSphere(in vec3 p, in vec3 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec3 p, in vec3 o, in vec3 b) {\n    vec3 q = abs(p - o) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, max(q.y, q.z)));\n}\n\n// 3D version of Inigo Quilez's horseshoe SDF\n// I haven't put much thought into optimizing :P\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdHorseshoe(in vec3 p, in float a, in vec3 w, in float r) {\n    p.x = abs(p.x);\n\n    float t = min(atan(p.y, p.x), a);\n    vec2 aq = abs(vec2(length(p.xy - vec2(cos(t), sin(t)) * r), p.z)) - w.xz;\n    float arc = length(max(aq, 0.0)) + min(0.0, max(aq.x, aq.y));\n\n    float c = cos(a), s = sin(a);\n    vec3 tq = abs(vec3(p.x * c + p.y * s - r, p.x * s - p.y * c + w.y, p.z)) - w;\n    float prong = length(max(tq, 0.0)) + min(0.0, max(tq.x, max(tq.y, tq.z)));\n\n    return min(arc, prong);\n}\n\nfloat sdBezier(in vec3 p, in vec3 v1, in vec3 v2, in vec3 v3) {\n    vec3 c1 = p - v1;\n    vec3 c2 = 2.0 * v2 - v3 - v1;\n    vec3 c3 = v1 - v2;\n\n    float t3 = dot(c2, c2);\n    float t2 = dot(c3, c2) * 3.0 / t3;\n    float t1 = (dot(c1, c2) + 2.0 * dot(c3, c3)) / t3;\n    float t0 = dot(c1, c3) / t3;\n\n    float t22 = t2 * t2;\n    vec2 pq = vec2(t1 - t22 / 3.0, t22 * t2 / 13.5 - t2 * t1 / 3.0 + t0);\n    float ppp = pq.x * pq.x * pq.x, qq = pq.y * pq.y;\n\n    float p2 = abs(pq.x);\n    float r1 = 1.5 / pq.x * pq.y;\n\n    if (qq * 0.25 + ppp / 27.0 > 0.0) {\n        float r2 = r1 * sqrt(3.0 / p2), root;\n        if (pq.x < 0.0) root = sign(pq.y) * cosh(acosh(r2 * -sign(pq.y)) / 3.0);\n        else root = sinh(asinh(r2) / 3.0);\n        root = clamp(-2.0 * sqrt(p2 / 3.0) * root - t2 / 3.0, 0.0, 1.0);\n        return length(p - mix(mix(v1, v2, root), mix(v2, v3, root), root));\n    }\n\n    else {\n        float ac = acos(r1 * sqrt(-3.0 / pq.x)) / 3.0;\n        vec2 roots = clamp(2.0 * sqrt(-pq.x / 3.0) * cos(vec2(ac, ac - 4.18879020479)) - t2 / 3.0, 0.0, 1.0);\n        vec3 p1 = p - mix(mix(v1, v2, roots.x), mix(v2, v3, roots.x), roots.x);\n        vec3 p2 = p - mix(mix(v1, v2, roots.y), mix(v2, v3, roots.y), roots.y);\n        return sqrt(min(dot(p1, p1), dot(p2, p2)));\n    }\n}\n\n// Hash from \"Hash without Sine\" by Dav_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat Hash11(in vec2 p) {\n\t//vec3 p3  = fract(vec3(p.xyx) * .1031);\n    //p3 += dot(p3, p3.yzx + 33.33);\n    //return fract((p3.x + p3.y) * p3.z);\n    return texture(iChannel0, p * 0.1).r; // Attempt to lower complexity\n}\n\nvec2 Hash22(in vec2 p) {\n\tvec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat snoise(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float bl = Hash11(cell);\n    float br = Hash11(cell + vec2(1.0, 0.0));\n    float tl = Hash11(cell + vec2(0.0, 1.0));\n    float tr = Hash11(cell + 1.0);\n\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\nfloat getTerrain(in vec2 p, in float t) {\n    p *= 0.25;\n\n    float height = 0.0;\n    float noiseScale = 1.0;\n    float totalScale = 0.0;\n\n    for (int oct=ZERO; oct < 7; oct++) {\n        height += snoise(p) * noiseScale;\n        totalScale += noiseScale;\n        noiseScale *= 0.5;\n        p *= 2.0;\n    }\n\n    height /= totalScale;\n    float height2 = height * height; // To reduce multiplications\n    return height2 * height2 * height * 5.0;\n}\n\n// SDF Operators\nvec2 pModPolar2(in vec2 p, in float n) { // 2D polar repetition\n    float rep = 6.28 / n, hRep = 0.5 * rep;\n    p = sin(mod(atan(p.y, p.x) + hRep, rep) - hRep + vec2(1.57, 0.0)) * length(p);\n    return p;\n}\n\n// 2 link IK solver (positions only)\n// https://www.shadertoy.com/view/NsfGRf\n// config sets the handedness, -1 for left, 1 for right\nvec2 solveJoint2D(in vec2 a, in vec2 b, in float ra, in float rb, in float config) {\n    vec2 ba = b - a;\n    float d = dot(ba, ba), l = sqrt(d);\n    float q = (d + ra * ra - rb * rb) / (2.0 * ra * l);\n    return a + (ba * q + vec2(-ba.y, ba.x) * sqrt(1.0 - q * q) * config) * ra / l;\n}\n\nvec3 solveJoint3D(in vec3 a, in vec3 b, in float ra, in float rb, in float config) {\n    b -= a;\n    float u = length(b.xz);\n    vec3 j = vec3(solveJoint2D(vec2(0.0), vec2(u, b.y), ra, rb, config), 0.0);\n    return a + vec3(b.xz / u * j.x, j.y).xzy;\n}\n\n// Quadratic bezier\nvec3 bezierArc(in vec3 a, in vec3 b, in vec3 c, in float t) {\n    float tInv = 1.0 - t;\n    return a * tInv * tInv + b * 2.0 * t * tInv + c * t * t;\n}\n\n// Computes a coordinate system \"looking\" at a target along the z axis\n// I think it is actually inverted\n// https://www.shadertoy.com/view/WlKBDw\nmat3 lookAt(in vec3 pos, in vec3 target) {\n    vec3 f = normalize(target - pos);         // Forward\n    vec3 r = normalize(vec3(-f.z, 0.0, f.x)); // Right\n    vec3 u = cross(r, f);                     // Up\n    return mat3(r, u, f);\n}\n\nvoid addShape(in float dist, in int id, inout vec2 scene) {\n    if (dist < scene.x) scene = vec2(dist, id);\n}\n\nvoid subShape(in float dist, in int id, inout vec2 scene) {\n    dist = -dist;\n    if (dist > scene.x) scene = vec2(dist, id);\n}\n\nvec2 mapScene(in vec3 p, in float t) {\n    vec2 scene = vec2(p.y, 1);\n    float time = iTime;\n\n    vec2 robotPos = vec2(0.0, iTime);\n\n    // Terrain\n    scene.x -= getTerrain(p.xz + robotPos, t) - 2.25;\n    scene.x *= 0.8; // Improve raymarching accuracy\n\n    // Tilt to match terrain\n    vec3 w1 = vec3(-1.5, getTerrain(vec2(-1.5, -2.5) + robotPos, t), -2.5);\n    vec3 w2 = vec3( 1.5, getTerrain(vec2( 1.5, -2.5) + robotPos, t), -2.5);\n    vec3 w3 = vec3( 1.5, getTerrain(vec2( 1.5,  2.5) + robotPos, t),  2.5);\n    vec3 w4 = vec3(-1.5, getTerrain(vec2(-1.5,  2.5) + robotPos, t),  2.5);\n\n    vec3 up = normalize(normalize(cross(w2 - w1, w1 - w3)) +\n                        normalize(cross(w3 - w2, w2 - w4)) +\n                        normalize(cross(w4 - w3, w3 - w1)) +\n                        normalize(cross(w1 - w4, w4 - w2)));\n\n    vec3 forward = normalize(cross(up, vec3(-1.0, 0.0, 0.0)));\n    vec3 right = cross(up, forward);\n\n    // Debug coordinate system\n    //addShape(sdLine(p, vec3(0.0), up * 3.0) - 0.1, 1, scene);\n    //addShape(sdLine(p, vec3(0.0), right * 3.0) - 0.1, 1, scene);\n    //addShape(sdLine(p, vec3(0.0), forward * 3.0) - 0.1, 1, scene);\n\n    vec3 op = p; // Keep untransformed copy\n    p.y -= 0.25 * (w1.y + w2.y + w3.y + w4.y);\n    p *= mat3(right, up, forward);\n\n    // TODO: add movement\n\n    float bodyAngle = 0.0;\n    float wheelAngle = time;\n\n    vec3 arcV1 = vec3(-1.0, 1.0, 4.0);\n    vec3 arcV2 = vec3(0.0, 4.0, 4.0);\n    vec3 arcV3 = vec3(1.0, 1.0, 4.0);\n\n    // Visualize arm path\n    //addShape(sdSphere(p, arcV1, 0.3), 7, scene);\n    //addShape(sdSphere(p, arcV2, 0.3), 7, scene);\n    //addShape(sdSphere(p, arcV3, 0.3), 7, scene);\n    //addShape(sdBezier(p, arcV1, arcV2, arcV3) - 0.1, 7, scene);\n\n    vec3 base = vec3(0.0, 0.0, 1.5);\n    vec3 end = bezierArc(arcV1, arcV2, arcV3, 0.5 + 0.5 * cos(iTime));//vec3(cos(iTime), 2.0 + sin(iTime), 3.0);\n    vec3 middle = solveJoint3D(base, end, 3.0, 2.0, 1.0);\n\n    float c = cos(bodyAngle), s = sin(bodyAngle);\n    p.xz *= mat2(c, s, -s, c);\n\n    // Body\n    addShape(sdBox(p, vec3(0.0, -0.5, 0.0), vec3(1.5, 0.5, 2.5)), 2, scene);\n\n    // Bolts\n    vec3 wp = vec3(abs(p.xz) - vec2(1.9, 1.6), p.y + 1.1).xzy;\n    addShape(sdBox(wp, vec3(-1.25, -0.1, 0.05), vec3(0.2, 0.1, 0.15)) - 0.1, 3, scene);\n\n    // Wheels\n    wheelAngle *= -sign(p.z);\n    c = cos(wheelAngle), s = sin(wheelAngle);\n    wp.yz *= mat2(c, -s, s, c);\n\n    vec2 wheels = vec2(sdDisc(wp.yxz, 0.6) - 0.35, 4);\n    addShape(sdCylinder(vec3(p.y + 1.15, p.x, abs(p.z) - 1.65), 2.0, 0.15), 5, wheels);\n\n    // Hubcaps\n    addShape(sdDisc(wp.yxz - vec3(0.0, 0.35, 0.0), 0.25) - 0.1, 5, scene);\n\n    // Treads\n    float turn = wp.x * sign(p.x * p.z);\n    c = cos(turn), s = sin(turn);\n    wp.yz *= mat2(c, -s, s, c);\n    wp.yz = pModPolar2(wp.yz, 24.0);\n    subShape(sdLine(wp, vec3(-0.25, 1.0, 0.0), vec3(1.0, 1.0, 0.0)) - 0.1, 4, wheels);\n    addShape(wheels.x, int(wheels.y), scene);\n\n    // Links\n    addShape(min(sdLine(p, base, middle), sdLine(p, middle, end)) - 0.25, 6, scene);\n\n    // Joints\n    addShape(sdSphere(p, base, 0.35), 7, scene);\n    addShape(sdSphere(p, middle, 0.35), 7, scene);\n\n    // Gripper\n    vec3 gp = (p - end) * lookAt(end, middle);\n    gp = vec3(gp.x, -gp.z - 0.5, gp.y);\n    addShape(sdHorseshoe(gp, mix(-0.2, 0.5, 0.5 + 0.5 * cos(iTime * 2.0)), vec3(0.1, 0.175, 0.2), 0.35), 8, scene);\n\n    return scene;\n}\n\n// Tetrahedral central differences method (2 less mapScene() evaluations) plus a\n// compiler trick: https://iquilezles.org/articles/normalsSDF\nvec3 getNormal(in vec3 p, in float t) {\n    float h = 0.005 * t;\n    vec3 n = vec3(0.0);\n    for (int i=ZERO; i < 4; i++) {\n        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);\n        n += e * mapScene(p + e * h, t).x;\n    }\n\n    return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 8.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.6, -0.1) * 3.14;\n\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Raymarch\n    bool hit = false;\n    float t = 0.0;\n\n    vec3 p;\n    int id;\n\n    //float iters = 0.0;\n    for (int i=ZERO; i < 100; i++) {\n        p = ro + rd * t;\n        vec2 d = mapScene(p, t);\n        if (d.x < 0.001 * t) {\n            id = int(d.y);\n            hit = true;\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d.x;\n        //iters++;\n    }\n\n    if (hit) {\n        vec3 n = getNormal(p, t);\n        float diff = sqrt(max(0.0, dot(-rd, n)));\n\n        vec3 mat = vec3(1.0);\n        if (id == 1) mat = vec3(0.8, 0.6, 0.4); // Terrain\n        if (id == 2) mat = vec3(0.5); // Body\n        if (id == 3) mat = vec3(0.5); // Bolts\n        if (id == 4) mat = vec3(0.25); // Wheels\n        if (id == 5) mat = vec3(0.75); // Shaft and hubcaps\n        if (id == 6) mat = vec3(0.75); // Arm\n\n        fragColor.rgb = mat * diff;\n    }\n\n    // Iteration heatmap\n    //fragColor.rgb = mix(vec3(0.0, 1.0, 0.0), vec3(1.0, 0.0, 0.0), iters / 100.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}