{
    "Shader": {
        "info": {
            "date": "1636875959",
            "description": "In this variant of [url]https://shadertoy.com/view/stdGRl[/url], the flux (colors) propagates at a speed proportional to the bonding between nodes.\nTesting various bonding laws BuffA:18\n( I prefer the previous version :-) )",
            "flags": 32,
            "hasliked": 0,
            "id": "7tdGDX",
            "likes": 14,
            "name": "percolation network 3",
            "published": 3,
            "tags": [
                "short",
                "network",
                "connect",
                "percolation",
                "molecules",
                "bonds"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/stdGRl\n\n// percolation network -----------------------------------------\n// - denser network: change Common:N\n// - chasing the global connectivity threshold: change BuffA:17 + replace iTime with 0 in Common:C\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0., 1.));                      \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = N *( u+u - R ) / R.y,\n         I = floor(U), F = fract(U), D,A,B;        \n    O-=O;\n // O = hue( T( I+floor(R/2.)).x );                // display power waves\n    float d;\n    for( int k=0; k<9; k++ ) {\n        D = vec2(k%3,k/3)-1., A = D + C(I+D);\n    //  O = max(O, .3 / length(F-A) );             // blobs\n        for( int j=0; j<9; j+= j==k?2:1 ) {\n            D = vec2(j%3,j/3)-1., B = D + C(I+D);\n            d = length(B-A); d = max(0., 1.5-d);\n            if (d>0.) O = max(O, smoothstep(3.*N/R.y,0., line(F,A,B) - .02 * d*4. )  *d*2. );\n            //*hue(d) \n    } }\n    d = T( I+floor(R/2.)).x;\n    O *=  d==0. ? vec4(1) : hue( d );              // display power waves\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// percolation: propagate power ( = iTime )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if (iFrame<1) { O-=O; return; }\n    \n    float V,d, dt = .4;\n    vec2  I=u-floor(R/2.),D,A=abs(I),B,P;        \n    O = T(u);                                        // previous state\n    if ( I.x < - (N-2.)*R.x/R.y ) O.r = dt*iTime;    // left border: inject fresh power = iTime\n    \n    I = floor(I);\n    A = C(I);             \n    for( int j=0; j<25; j+= j==11?2:1 ) {            \n        D = vec2(j%5,j/5)-2., B = D + C(I+D);\n        d = length(B-A); d = max(0., 1.5-d);\n        V = T(u+D).x;                                // neighbor value\n        if (d > 0.) O.x = max(O.x,                   // if connected, propagate freshest power\n                               // V -10.*dt*       (1.5-d)     );               // delay\n                               // V -10.*dt*max(0.,(1.5-d)-.9) );               // (non-linear)\n                                  O.x + ( V - O.x ) *min( 1., max(0.,d-.5) ) ); // flux (non-linear)\n   }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 10.; // cells density\n\n#define R     iResolution.xy \n#define T(U)  texelFetch(iChannel0, ivec2( U ), 0 )\n#define H(p)  fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define C(p) (.5+.3*H(p+.5)+.2*vec2( cos( (H(p).y-.5)*iTime + 6.3*H(p).x + vec2(0,33) ) ) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}