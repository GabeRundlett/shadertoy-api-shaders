{
    "Shader": {
        "info": {
            "date": "1602390841",
            "description": " Experimenting.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVczD",
            "likes": 18,
            "name": "A rock",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "thepheer",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "struct RM { vec3 p; float t; float d; };\n\nfloat map(vec3 p) {\n    float d = 0.0, da = 0.1, df = 1.0;\n    if (length(p) < 1.01)\n        for (int i = 0; i < 10; i++, da *= 0.5, df *= 2.0)\n            d += da*snoise(df*p);\n\n    return min(\n    \tsdPlane(p, vec3(0.0, 1.0, 0.0), 1.0),\n        0.5*(sdSphere(p, 1.0) + d)\n    );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p) {\n    const vec3 k = vec3(1.0, -1.0, 1e-5);\n    return normalize(\n        k.xyy*map(p + k.xyy*k.z) +\n        k.yyx*map(p + k.yyx*k.z) +\n        k.yxy*map(p + k.yxy*k.z) +\n        k.xxx*map(p + k.xxx*k.z)\n    );\n}\n\nbool raymarch(vec3 rc, vec3 ro, vec3 rd, out RM rm) {\n\t// rayconfig rc: threshold, near, far\n    for (rm.t = rc.y; rm.t < rc.z; rm.t += rm.d)\n        if ((rm.d = map(rm.p = ro + rm.t*rd)) < rc.x)\n            return true;\n    return false;\n}\n\nvec3 render(vec2 uv) {\n    vec3 material = vec3(0.13, 0.11, 0.08);\n    vec3 ambient = 0.02*vec3(0.10, 0.15, 0.25);\n    vec3 light = 50.0*vec3(1.0);\n    vec3 fog = 3.0*ambient;\n    \n    vec3 rc = vec3(1e-4, 1e-3, 1e+1);\n    vec3 rt = vec3(1.3*uv,  0.0);\n    vec3 ro = vec3(0.0*uv, -5.0);\n    vec3 rd = normalize(rt - ro);\n    RM rm, rml;\n    \n    if (!raymarch(rc, ro, rd, rm))\n        return fog;\n    \n    //if (rm.d < 0.0)\n    //    return vec3(1.0, 0.0, 0.0);\n    \n    vec3 n = normal(rm.p);\n    vec3 lp = 2.5*vec3(cos(iTime), 1.0, sin(iTime)) - rm.p;\n    vec3 ld = normalize(lp);\n    float ll = length(lp);\n    \n    if (raymarch(vec3(rc.xy, ll), rm.p, ld, rml))\n        return mix(ambient, fog, rm.t/rc.z);\n    \n    float diffuse = 4.0*max(0.0, dot(n, ld));\n    float specular = 0.2*pow(max(0.0, dot(rd, reflect(ld, n))), 50.0);\n    vec3 color = ambient + (material*diffuse + specular)*light/exp(ll);\n    return mix(color, fog, rm.t/rc.z);\n}\n\nvoid mainImage(out vec4 rgba, vec2 xy) {\n    vec2 r = vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 uv = 2.0*xy/iResolution.xy - 1.0;\n    rgba = vec4(srgb(render(r*uv)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions\nfloat sdPlane(vec3 p, vec3 n, float h) {\n    return dot(p, n) + h;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\n// https://gamedev.stackexchange.com/a/148088\nvec3 srgb(vec3 rgb) {\n    bvec3 t = lessThan(rgb, vec3(0.0031308));\n    vec3 a = 1.055*pow(rgb, vec3(1.0/2.4)) - 0.055;\n    vec3 b = 12.92*rgb;\n    return mix(a, b, t);\n}\n\n// https://www.shadertoy.com/view/Xd3GRf\nlowp vec4 permute(in lowp vec4 x){return mod(x*x*34.+x,289.);}\nlowp float snoise(in mediump vec3 v){\n  const lowp vec2 C = vec2(0.16666666666,0.33333333333);\n  const lowp vec4 D = vec4(0,.5,1,2);\n  lowp vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  lowp vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  lowp vec3 g = step(x0.yzx, x0);\n  lowp vec3 l = (1. - g).zxy;\n  lowp vec3 i1 = min( g, l );\n  lowp vec3 i2 = max( g, l );\n  lowp vec3 x1 = x0 - i1 + C.x;\n  lowp vec3 x2 = x0 - i2 + C.y;\n  lowp vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  lowp vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  lowp vec3 ns = .142857142857 * D.wyz - D.xzx;\n  lowp vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  lowp vec4 x_ = floor(j * ns.z);\n  lowp vec4 x = x_ * ns.x + ns.yyyy;\n  lowp vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  lowp vec4 h = 1. - abs(x) - abs(y);\n  lowp vec4 b0 = vec4( x.xy, y.xy );\n  lowp vec4 b1 = vec4( x.zw, y.zw );\n  lowp vec4 sh = -step(h, vec4(0));\n  lowp vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  lowp vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  lowp vec3 p0 = vec3(a0.xy,h.x);\n  lowp vec3 p1 = vec3(a0.zw,h.y);\n  lowp vec3 p2 = vec3(a1.xy,h.z);\n  lowp vec3 p3 = vec3(a1.zw,h.w);\n  lowp vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  lowp vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}