{
    "Shader": {
        "info": {
            "date": "1668950342",
            "description": "@lsdlive\nCC-BY-NC-SA\n\nSpiral #5 (web)",
            "flags": 0,
            "hasliked": 0,
            "id": "ddsSWN",
            "likes": 13,
            "name": "Spiral #5 (web)",
            "published": 3,
            "tags": [
                "raymarching",
                "spiral"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nSpiral #5 (web)\n\nGeometries are generated with sphere-tracing algorithm:\nhttp://www.michaelwalczyk.com/blog/2017/5/25/ray-marching\nhttps://iquilezles.org/articles/distfunctions\nhttp://mercury.sexy/hg_sdf/\n\n*/\n\n\n#define speed .75\n\n#define pi 3.141592\n#define tau (pi*2.)\n\n#define time (speed*iTime)\n//#define bpm 120.\n//#define time (speed*(bpm/60.)*iTime)\n\n#define pex(x) ex(abs(mod((fract(x) + .5) * 2., 2.) - 1.))\n#define psin(x) (.5+.5*sin(x))\n\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 black = vec3(.133, .137, .137);\nvec3 white = vec3(.941, .965, .941);\n\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat ex(float t) {\n    if (t == 0. || t == 1.) return t;\n    return (t *= 2.) < 1. ? .5 * exp2(10. * (t - 1.)) : .5 * (-exp2(-10. * (t - 1.)) + 2.);\n}\n\nfloat repeat(float pos, float dist) {\n    return mod(pos - dist * .5, dist) - dist * .5;\n}\n\nvoid repeat_angle(inout vec2 pos, float m) {\n    float a = repeat(atan(pos.y, pos.x), m);\n    pos = vec2(cos(a), sin(a)) * length(pos);\n}\n\nvoid mirror(inout vec2 pos, vec2 dist) {\n    pos = abs(pos) - dist;\n    if (pos.y > pos.x)\n        pos = pos.yx;\n}\n\nfloat sdf_cross(vec3 pos, float dist) {\n    pos = abs(pos);\n    pos = max(pos, pos.yzx);\n    return min(pos.x, min(pos.y, pos.z)) - dist;\n}\n\nfloat sdf_cylinder(vec2 pos, float dist) {\n    return length(pos) - dist;\n}\n\nfloat shape1(vec3 p) {\n    // probably overkill for what we get visually,\n    // but it's the result of iterative experimentation & exploration (wont rewrite)\n    repeat_angle(p.xy, tau / 3.);\n    p.z = repeat(p.z, 1.);\n    mirror(p.xz, vec2(1, 4));\n    p.x = abs(p.x) - 14.;\n    mirror(p.xz, vec2(1, 3));\n    mirror(p.xy, vec2(8));\n    return sdf_cross(p, .1);\n}\n\nfloat shape2(vec3 p) {\n    p.xy *= r2d(p.z * .02);\n    mirror(p.xy, vec2(11, 12));\n    repeat_angle(p.xy, tau / 7.);\n    mirror(p.xy, vec2(12. * pex(time * .5), 1.6));\n    p.x = abs(p.x) - 4. + pex(time * .5);\n    p.xy *= r2d(p.z * .2 + time);\n    p.x = abs(p.x) - .3;\n    return sdf_cylinder(p.xy, .15);\n}\n\nfloat de(vec3 p) {\n    p.xy *= r2d(time * .1);\n    return min(shape1(p), shape2(p));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 ray_origin = vec3(0, 0, time * 12.);\n    vec3 ray_direction = normalize(vec3(uv, 1)), p;\n    vec3 pos;\n\n    float iterations = 0.;\n    float tdist = 0.; // total distance from the ray origin to the point\n    // Sphere-tracing\n    for (float i = 0.; i < 1.; i += .01) {// 100 iterations\n        iterations = i;\n        pos = ray_origin + ray_direction * tdist;\n        float dist = de(pos); // signed distance field\n        if (dist < .01)\n            break;\n        tdist += dist;\n    }\n\n    vec3 color = mix(white, black, iterations);\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}