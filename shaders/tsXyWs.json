{
    "Shader": {
        "info": {
            "date": "1585839031",
            "description": "Took a while to work out chiral forms for the \"excavated dodecahedra\" from yesterday - turns out, there is fundamentally only one set of planes that fit together coherently to make a chiral form, and they make the compound of five tetrahedra.",
            "flags": 48,
            "hasliked": 0,
            "id": "tsXyWs",
            "likes": 14,
            "name": "Compound of Five Tetrahedra",
            "published": 3,
            "tags": [
                "tetrahedra",
                "dodecahedra",
                "excavated"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Compound of Five Tetrahedra as Excavated Dodecahedron\n//\n// Matthew Arcus, 2020\n//\n// Take an icosahedral kaleidoscope (using precalculated values), and\n// take slices through the fundamental region with planes through the\n// vertices of a dodecahedron. The result is a great range of shapes -\n// stellations, facetings and other more irregular but pretty shapes.\n//\n// Here we see the compound of five tetrahedra as a chiral excavation.\n//\n// <mouse>: rotation\n// <up>/<down>: move in/out\n// c: clip at x=0\n// f: don't show frame\n// r: autorotation\n// \n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool dorotate = true;\nbool doclip = false;\nconst float PI\t= 3.14159265359;\nint NFOLDS = 5;\nbool alert = false;\n\nbool dosubtract = false;\n\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\n// Face plane normals, dot(A,B) = -cos(PI/P) etc.\nvec3 A = vec3(1,0,0);\nvec3 B = vec3(-0.5,0.866025,0);\nvec3 C = vec3(-0.809017,-0.467086,0.356822);\n\n// Unit length vertices of fundamental trihedron\nvec3 a = vec3(0.309017,0.178411,0.934172);\nvec3 b = vec3(0,0.607062,0.794654);\nvec3 c = vec3(0,0,1);\n\nvec3 vertices[20] =\n  vec3[](vec3(0,0,1), // 0\n\n         vec3(0.57735,0.333333,0.745356), // 0.713644\n         vec3(0,-0.666667,0.745356), // 0.713644\n         vec3(-0.57735,0.333333,0.745356), // 0.713644\n\n         vec3(0.356822,0.872678,0.333333), // 1.1547\n         vec3(0.934172,-0.127322,0.333333), // 1.1547\n         vec3(0.57735,-0.745356,0.333333), // 1.1547\n         vec3(-0.577351,-0.745356,0.333333), // 1.1547\n         vec3(-0.934172,-0.127322,0.333333), // 1.1547\n         vec3(-0.356822,0.872678,0.333333), // 1.1547\n\n         vec3(0.57735,0.745356,-0.333334), // 1.63299\n         vec3(0.934172,0.127322,-0.333334), // 1.63299\n         vec3(0.356822,-0.872678,-0.333334), // 1.63299\n         vec3(-0.356822,-0.872678,-0.333334), // 1.63299\n         vec3(-0.934172,0.127322,-0.333334), // 1.63299\n         vec3(-0.57735,0.745356,-0.333334), // 1.63299\n\n         vec3(0,0.666666,-0.745356), // 1.86834\n         vec3(0.57735,-0.333334,-0.745356), // 1.86834\n         vec3(-0.57735,-0.333334,-0.745356), // 1.86834\n         vec3(0,0,-1) // 2\n         );\n\n// Could use an ivec3 and count different types of flip\nvec3 fold(vec3 pos, out int flips) {\n  // We want to know the number of actual reflections made\n  // so keep track of that in flips.\n  flips = 0;\n  for (int i = 0; i < NFOLDS; i++) {\n    float k;\n    k = dot(pos,A);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*A;\n    }\n    k = dot(pos,B);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*B;\n    }\n    k = dot(pos,C);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*C;\n    }\n  }\n  return pos;\n}\n\n// Perpendicular distance from p to segment ab\nfloat segment(vec3 p, vec3 a, vec3 b) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nvec4 makeplane(vec3 p, vec3 q, vec3 r) {\n  // dot(vec4(s,1),makeplane(p,q,r)) gives distance from plane\n  vec3 n = cross(q-p,r-p);\n  n = normalize(n);\n  float k = -dot(p,n);\n  // Fix so that away from origin is +ve distance\n  // If k is 0, then plane through origin & the order of p,q,r\n  // determine +ve direction (how?)\n  if (k > 0.0) { k = -k; n = -n; }\n  return vec4(n,k);\n}\n\nvoid mindistance(float d, int t, inout float dmin, inout int type) {\n  if (d < dmin) { dmin = d; type = t; }\n}\nvoid maxdistance(float d, inout float dmax) {\n  if (d > dmax) { dmax = d; }\n}\nvoid triangle(vec3 p0, vec3 p, vec3 q, vec3 r, float radius, int t, inout float dmin, inout int type) {\n  mindistance(segment(p0,p,q)-radius,t,dmin,type);\n  mindistance(segment(p0,q,r)-radius,t,dmin,type);\n  mindistance(segment(p0,r,p)-radius,t,dmin,type);\n}\n\nfloat cradius = 0.1; // Sphere at origin\nfloat pradius = 0.05; // Sphere at main vertex\nfloat rradius = 0.03; // Sphere at other region vertices\nfloat sradius = 0.01;\n\n// The achiral scene.\nfloat scene1(vec3 p, inout int type, inout float d) {\n  vec3 a1 = a*dot(a,c);\n  vec3 b1 = b*dot(b,c);\n  vec3 c1 = c;\n  vec3 O = vec3(0);\n\n  // Always draw the dodecahedron vertices\n    float k = 1.0 + pradius;\n  mindistance(length(p-k*c) - pradius,0,d,type);\n  if (true) {\n    // Dodecahedron edges\n    mindistance(segment(p,k*c,reflect(k*c,C))-0.03,1,d,type);\n  }\n  return d;\n}\n\n// The chiral scene. There is only one set of planes that can be split\n// up into coherent chiral parts, that in fact form the compound of\n// five tetrahedra.\nfloat scene0(vec3 p, inout int type, inout float d) {\n  float d1 = -1e8;\n  maxdistance(dot(vec4(p,1),makeplane(vertices[0],vertices[14],vertices[10])),d1);\n  maxdistance(dot(vec4(p,1),makeplane(vertices[0],vertices[12],vertices[10])),d1);\n  if (d1 < d) { d = d1; type = 3; }\n  return d;\n}\n\nfloat scene(vec3 p0, out vec2 uv, out int type) {\n  type = 0;\n  int flips = 0;\n  float d = 1e8;\n  vec3 p = fold(p0,flips);\n  uv = p.xy;\n  if (flips%2 == 0) {\n    scene0(p,type,d);\n  } else {\n    scene0(reflect(p,A),type,d);\n    scene0(reflect(p,B),type,d);\n    scene0(reflect(p,C),type,d);\n  }\n  if (!key(CHAR_F)) scene1(p,type,d);\n  assert(type >= 0 && type <= 3);\n  if (doclip && p0.x > d) {\n    d = p0.x;\n  }\n  //if (type == 0 && distance(p0,c) < 0.2) type = 4;\n  //return max(d,dot(p,b)-dot(b,c)); // Clip to dodecahedron\n  return d;\n}\n\nvoid getcolor(int type, vec2 uv, out vec3 color, out float specularity) {\n  specularity = 0.3;\n  color = vec3(1,0,1);\n  if (type == 0) { color = vec3(0.3,0.1,0.1); specularity = 0.0; }\n  if (type == 1) color = vec3(0.8,0.8,0.5);\n  if (type == 2) color = vec3(0.5,0.5,0);\n  if (type == 3) { color = texture(iChannel2,uv).rgb; specularity = 0.0; }\n}  \n\nfloat map(vec3 p) {\n  int type; vec2 uv;\n  return scene(p,uv,type);\n}\n\nvec3 calcnormal(vec3 p) {\n  const vec2 e = vec2(0.001, 0.0);\n  vec3 n = vec3(map(p + e.xyy) - map(p - e.xyy),\n                map(p + e.yxy) - map(p - e.yxy),\n                map(p + e.yyx) - map(p - e.yyx));\n  return normalize(n);\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  float maxd = length(ro) + 1.0;\n  float precis = 0.001;\n  float t = 0.0;\n  float res = -1.0;\n  for (int i = 0; i < 100; i++) {\n    //assert(i < 20);\n    float h = map(ro+rd*t);\n    if (abs(h) < precis) return t;\n    t += h;\n    if (t < 0.0 || t > maxd) break;\n  }\n  return -1.0;\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  dorotate = !keypress(CHAR_R);\n  doclip = keypress(CHAR_C);\n  dosubtract = keypress(CHAR_S);\n  bool dotexture = keypress(CHAR_T);\n  bool calcnormals = !keypress(CHAR_N);\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.1 - 0.1*p.y);\n  float camera = 2.5;\n  camera *= 1.0 + 0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP));\n  vec3 ro = vec3(0.0, 0.0, camera);\n  vec3 rd = vec3(p, -2.0);\n  vec3 light = normalize(vec3(0.5, 1.0, 3.0));\n  ro = transform(ro);\n  rd = transform(rd);\n  light = transform(light);\n  rd = normalize(rd);\n  float t = march(ro, rd);\n  if (t > 0.0) {\n    vec3 pos = ro + t * rd;\n    int type;\n    vec2 uv;\n    scene(pos,uv,type);\n    vec3 n = calcnormal(pos);\n    //assert(dot(n,rd) <= 0.0);\n    float specularity = 0.0;\n    getcolor(type,uv,col,specularity);\n    float diffuse = clamp(dot(n, light), 0.0, 1.0);\n    col *= 0.2+0.8*diffuse;\n    float specular = pow(max(0.0,dot(reflect(light,n),rd)),50.0);\n    col += specularity*specular*vec3(1);\n  }\n  col = pow(col, vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define key(code) (texelFetch(iChannel0, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel1, ivec2((i),(j)),0))\n#define keycount(code) (int(store(0,(code)).x))\n#define keypress(k) key(k)\n\nconst int CHAR_C = 67;\nconst int CHAR_N = 78;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_F = 70;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}