{
    "Shader": {
        "info": {
            "date": "1471379396",
            "description": "Can anyone revise this shader? Is it correct? Are the normals being correctly generated? The shading seems incorrect but I am not sure...",
            "flags": 32,
            "hasliked": 0,
            "id": "Xtd3DS",
            "likes": 12,
            "name": "Sobel Operator Normal Map Gen",
            "published": 3,
            "tags": [
                "sobelblurgrayscale"
            ],
            "usePreview": 0,
            "username": "fscur",
            "viewed": 3307
        },
        "renderpass": [
            {
                "code": "vec2 texelSize;\n\n\nfloat sampleSobel(in vec2 uv)\n{\n    float weight = 1.0;\n\tfloat f = texture(iChannel0, uv).a;\n    return f * weight - (weight * 0.5);\n}\n\nvec2 sobel(in vec2 uv)\n{   \n    vec2 offset = texelSize * 1.0;\n    float x = offset.x;\n    float y = offset.y;\n    \n    // |-1  0  1|\n    // |-2  0  2| \n    // |-1  0  1|\n    \n    float gX = 0.0;\n    gX += -1.0 * sampleSobel(uv + vec2(-x, -y));\n    gX += -2.0 * sampleSobel(uv + vec2(-x,  0));\n    gX += -1.0 * sampleSobel(uv + vec2(-x, +y));\n    gX += +1.0 * sampleSobel(uv + vec2(+x, -y));\n    gX += +2.0 * sampleSobel(uv + vec2(+x,  0));\n    gX += +1.0 * sampleSobel(uv + vec2(+x, +y));\n    \n    // |-1 -2 -1|\n    // | 0  0  0| \n    // | 1  2  1|\n    \n    float gY = 0.0;\n    gY += -1.0 * sampleSobel(uv + vec2(-x, -y));\n    gY += -2.0 * sampleSobel(uv + vec2( 0, -y));\n    gY += -1.0 * sampleSobel(uv + vec2(+x, -y));\n    gY += +1.0 * sampleSobel(uv + vec2(-x, +y));\n    gY += +2.0 * sampleSobel(uv + vec2( 0, +y));\n    gY += +1.0 * sampleSobel(uv + vec2(+x, +y));\n    \n\treturn vec2(sqrt(gX * gX + gY * gY), atan(-gY, -gX));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    texelSize = (1.0/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec2 f = sobel(uv);\n    \n    vec2 gradientDirection = f.x * vec2(cos(f.y), sin(f.y));\n    vec3 normal = normalize(vec3(gradientDirection, 1.0));\n    \n    float lightAngle = iTime * 3.1415 * 0.3;\n    vec3 lightPos = vec3(cos(lightAngle), sin(lightAngle), 1.0);\n    //vec3 lightPos = vec3(0.0, -1.0, 1.0);\n    vec3 lightDir = normalize(lightPos);\n    \n    \n    float diffuse = max(dot(lightDir, normal), 0.0);\n    \n    if (fragCoord.x < iMouse.x)\n    {\n        vec4 albedo = vec4(texture(iChannel0, uv).rgb, 1.0);\n        albedo += vec4(0.4);\n    \tfragColor =  albedo * diffuse;\n    }\n    else\n    \tfragColor = vec4(normal * 0.5 + 0.5, 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// grayscale\n\nvec2 texelSize;\n\n\nfloat grayScale(in vec3 color){\n    return dot(vec3(0.2126, 0.7152, 0.0722), color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    texelSize = (1.0/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec3 color = texture(iChannel0, uv).rgb;\n    fragColor = vec4(color, grayScale(color));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// horizontal blur\n\nvec2 texelSize;\nfloat offset[3];\nfloat weight[3];\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    offset[0] = 0.0;\n    offset[1] = 1.3846153846;\n    offset[2] = 3.2307692308;\n    \n    weight[0] = 0.2270270270;\n    weight[1] = 0.3162162162;\n    weight[2] = 0.0702702703;\n     \n    \n    texelSize = (1.0/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec4 color = texture(iChannel0, uv) * weight[0];\n\n    for (int i = 1; i < 3; ++i)\n    {\n        vec2 displacement = vec2(offset[i] / iResolution.x, 0.0);\n        color += texture(iChannel0, uv +displacement) * weight[i];\n        color += texture(iChannel0, uv -displacement) * weight[i];\n    }\n\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// vertical blur\n\nvec2 texelSize;\nfloat offset[3];\nfloat weight[3];\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    offset[0] = 0.0;\n    offset[1] = 1.3846153846;\n    offset[2] = 3.2307692308;\n    \n    weight[0] = 0.2270270270;\n    weight[1] = 0.3162162162;\n    weight[2] = 0.0702702703;\n     \n    \n    texelSize = (1.0/iResolution.xy);\n\tvec2 uv = fragCoord.xy * texelSize;\n    \n    vec4 color = texture(iChannel0, uv) * weight[0];\n\n    for (int i = 1; i < 3; ++i)\n    {\n        vec2 displacement = vec2(0.0, offset[i] / iResolution.y);\n        color += texture(iChannel0, uv + displacement) * weight[i];\n        color += texture(iChannel0, uv - displacement) * weight[i];\n    }\n\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}