{
    "Shader": {
        "info": {
            "date": "1456679346",
            "description": "More slowly collapsing structures (mouse enabled); automatically restarts and each run is different.",
            "flags": 32,
            "hasliked": 0,
            "id": "lsG3W3",
            "likes": 21,
            "name": "Falling Towers",
            "published": 3,
            "tags": [
                "raytracing",
                "physics",
                "gravity",
                "collisions"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1142
        },
        "renderpass": [
            {
                "code": "// \"Falling Towers\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\nThe optimal number of compute steps between display updates depends on\nhardware and window size.\n\nSlow motion (making a virtue of necessity).\n\nEach block is actually a set of spheres on a rigid framework, and there is\nno static friction. These implementation details account for any unexpected\nbehavior.\n*/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nconst int nBlock = 64;\nconst int nSiteBk = 30;\nconst vec3 blkSph = vec3 (5., 3., 2.);\nconst vec3 blkGap = vec3 (1., 0.8, 0.8);\n\nvec3 vnBlk, sunDir;\nvec2 qBlk;\nfloat tCur, dstFar;\nint idBlk;\n\nvec3 BgCol (vec3 ro, vec3 rd, float sh)\n{\n  vec3 vn, col;\n  vec2 w;\n  float sd, f;\n  vec2 e = vec2 (0.01, 0.);\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001)));\n    col = mix (col, vec3 (1.), clamp (0.2 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    w = 0.5 * ro.xz;\n    f = Fbm2 (w);\n    col = mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), f) *\n         (1. - 0.1 * Noisefv2 (w));\n    vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.1, f - Fbm2 (w + e.yx)));\n    col *= (0.2 + 0.8 * sh) * (0.1 + 0.9 * max (dot (vn, sunDir), 0.));\n    col = mix (col, vec3 (0.45, 0.55, 0.7), pow (1. + rd.y, 64.));\n  }\n  return col;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, bSize, u;\n  float dMin, dn, df;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.5;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      vnBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      idBlk = n;\n      u = (v + dn) * rdm;\n    }\n  }\n  if (dMin < dstFar) {\n    qBlk = vec2 (dot (u.zxy, vnBlk), dot (u.yzx, vnBlk));\n    m = QtToRMat (Loadv4 (4 + 4 * idBlk + 2));\n    vnBlk = m * vnBlk;\n  }\n  return dMin;\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 m;\n  vec3 rm, rdm, v, tm, tp, bSize;\n  float dMin, dn, df;\n  bSize = 0.5 * blkGap * (blkSph - 1.) + 0.4;\n  dMin = dstFar;\n  for (int n = 0; n < nBlock; n ++) {\n    rm = Loadv4 (4 + 4 * n).xyz;\n    m = QtToRMat (Loadv4 (4 + 4 * n + 2));\n    rdm = rd * m;\n    v = ((ro - rm) * m) / rdm;\n    tp = bSize / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) dMin = dn;\n  }\n  return smoothstep (0., rng, dMin);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn;\n  float dstFlr, dstBlk, sh;\n  bool useBg;\n  dstFlr = (rd.y < 0.) ? - (ro.y - 0.5) / rd.y : dstFar;\n  dstBlk = BlkHit (ro, rd);\n  useBg = false;\n  if (min (dstBlk, dstFlr) < dstFar) {\n    if (dstFlr < dstBlk) {\n      ro += rd * dstFlr;\n      vn = vec3 (0., 1., 0.);\n      useBg = true;\n    } else {\n      ro += rd * dstBlk;\n      vn = vnBlk;\n      objCol = vec4 (mix (vec3 (0.9, 0.4, 0.2), vec3 (0.55, 0.25, 0.1),\n         Fbm2 (4. * (qBlk + 0.37 * float (idBlk)) * vec2 (1., 0.2))), 0.5);\n    }\n    \n  } else useBg = true;\n  sh = 1.;\n  if (! useBg || rd.y < 0.) sh = BlkHitSh (ro + 0.01 * sunDir, sunDir, 50.);\n  if (! useBg) col = objCol.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.) +\n       0.2 * max (dot (vn, vec3 (- sunDir.x, 0., - sunDir.z)), 0.)) +\n       objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n  else col = BgCol (ro, rd, sh);\n  return pow (clamp (col, 0., 1.), vec3 (0.6));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 col, rd, ro, vd, u, vc;\n  vec2 canvas, uv;\n  float nStep, mxStep, az, el, zmFac, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  nStep = Loadv4 (0).x;\n  mxStep = Loadv4 (0).y;\n  dstFar = 150.;\n  vc = vec3 (0., mix (10., 2., 1.2 * min (nStep / mxStep, 1.)), 0.);\n  az = 0.05 * tCur;\n  el = 0.7;\n  zmFac = 2.4;\n  if (mPtr.z > 0.) {\n    el = clamp (el - 3. * mPtr.y, 0.05 * pi, 0.45 * pi);\n    az -= 1.5 * pi * mPtr.x;\n  }\n  ro = 60. * vec3 (cos (el) * cos (az), sin (el), cos (el) * sin (az));\n  vd = normalize (vc - ro);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (1., 2., -1.));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Falling Towers\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\n\nconst int nBlock = 64;\nconst int nSiteBk = 30;\nconst vec3 blkSph = vec3 (5., 3., 2.);\nconst vec3 blkGap = vec3 (1., 0.8, 0.8);\n\nfloat tCur, nStep;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 5.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp;\n  float farSep, rSep, grav, dt;\n  grav = 0.2;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  if (nStep < 50.) return;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSiteBk; j1 ++) {\n        rts = mRot * RSite (j1);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSiteBk; j2 ++) {\n          rtsN = mRotN * RSite (j2);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  for (int j = 0; j < nSiteBk; j ++) {\n    rts = mRot * RSite (j);\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 r, fn;\n  float fmId, szReg, rowGap, layGap, blkGap;\n  int nb;\n  const int npRow = 2;\n  rowGap = 18.;\n  layGap = 2.61;\n  blkGap = 1.55;\n  szReg = (float (npRow) + 1.) * rowGap;\n  nb = 0;\n  for (int ny = 0; ny < 4 * npRow; ny ++) {\n    fn.y = float (ny);\n    r.y = (fn.y + 0.5) * layGap + 0.6;\n    for (int nz = 0; nz < 2 * npRow; nz ++) {\n      if (mod (fn.y, 2.) == 1. && nz == npRow) break;\n      fn.z = float (nz);\n      if (mod (fn.y, 2.) == 1.) r.z = (fn.z + 1.) * rowGap - 0.5 * szReg;\n      else r.z = (floor (0.5 * fn.z) + 1.) * rowGap -\n         blkGap * (2. - ((mod (fn.z, 2.) == 0.) ? 1. : 3.)) - 0.5 * szReg;\n      for (int nx = 0; nx < 2 * npRow; nx ++) {\n        if (mod (fn.y, 2.) == 0. && nx == npRow) break;\n        fn.x = float (nx);\n\tif (mod (fn.y, 2.) == 1.) r.x = (floor (0.5 * fn.x) + 1.) * rowGap -\n           blkGap * (2.- ((mod (fn.x, 2.) == 0.) ? 1. : 3.)) - 0.5 * szReg;\n\telse r.x = (fn.x + 1.) * rowGap - 0.5 * szReg;\n        if (nb == mId) {\n          rm = r;\n          qm = EulToQt (0.5 * pi * vec3 (1., mod (fn.y, 2.), 1.));\n        }\n        ++ nb;\n      }\n    }\n  }\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  fmId = float (mId);\n  if (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) {\n    vm.xz = vec2 (3., -1.) * normalize (rm.xz) +\n       0.4 * (1. - 2. * vec2 (Hashff (fmId * tCur), Hashff (3.1 * fmId * tCur)));\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float mxStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  tCur = iTime;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  mxStep = 5500.;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    nStep = Loadv4 (0).x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm);\n  }\n  if (nStep > mxStep) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, mxStep, 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Falling Towers\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\n\nconst int nBlock = 64;\nconst int nSiteBk = 30;\nconst vec3 blkSph = vec3 (5., 3., 2.);\nconst vec3 blkGap = vec3 (1., 0.8, 0.8);\n\nfloat tCur, nStep;\n\nvec3 RSite (int sId)\n{\n  float sIdf;\n  sIdf = float (sId);\n  return blkGap * (floor (vec3 (mod (sIdf, blkSph.x),\n      mod (sIdf, blkSph.x * blkSph.y) / blkSph.x,\n      sIdf / (blkSph.x * blkSph.y))) - 0.5 * (blkSph - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 10., fricT = 1., fricS = 5.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam, dSp;\n  float farSep, rSep, grav, dt;\n  grav = 0.2;\n  dt = 0.01;\n  rm = Loadv4 (4 + 4 * mId).xyz;\n  vm = Loadv4 (4 + 4 * mId + 1).xyz;\n  qm = Loadv4 (4 + 4 * mId + 2);\n  wm = Loadv4 (4 + 4 * mId + 3).xyz;\n  if (nStep < 50.) return;\n  mRot = QtToRMat (qm);\n  farSep = length (blkGap * (blkSph - 1.)) + 1.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nBlock; n ++) {\n    rmN = Loadv4 (4 + 4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 + 4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 + 4 * n + 2));\n      wmN = Loadv4 (4 + 4 * n + 3).xyz;\n      for (int j1 = 0; j1 < nSiteBk; j1 ++) {\n        rts = mRot * RSite (j1);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = 0; j2 < nSiteBk; j2 ++) {\n          rtsN = mRotN * RSite (j2);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  for (int j = 0; j < nSiteBk; j ++) {\n    rts = mRot * RSite (j);\n    dr = rm + rts;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  dSp = blkGap * blkSph;\n  wam = mRot * (wam * mRot / (0.5 * (vec3 (dot (dSp, dSp)) - dSp * dSp) + 1.));\n  am.y -=  grav;\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 r, fn;\n  float fmId, szReg, rowGap, layGap, blkGap;\n  int nb;\n  const int npRow = 2;\n  rowGap = 18.;\n  layGap = 2.61;\n  blkGap = 1.55;\n  szReg = (float (npRow) + 1.) * rowGap;\n  nb = 0;\n  for (int ny = 0; ny < 4 * npRow; ny ++) {\n    fn.y = float (ny);\n    r.y = (fn.y + 0.5) * layGap + 0.6;\n    for (int nz = 0; nz < 2 * npRow; nz ++) {\n      if (mod (fn.y, 2.) == 1. && nz == npRow) break;\n      fn.z = float (nz);\n      if (mod (fn.y, 2.) == 1.) r.z = (fn.z + 1.) * rowGap - 0.5 * szReg;\n      else r.z = (floor (0.5 * fn.z) + 1.) * rowGap -\n         blkGap * (2. - ((mod (fn.z, 2.) == 0.) ? 1. : 3.)) - 0.5 * szReg;\n      for (int nx = 0; nx < 2 * npRow; nx ++) {\n        if (mod (fn.y, 2.) == 0. && nx == npRow) break;\n        fn.x = float (nx);\n\tif (mod (fn.y, 2.) == 1.) r.x = (floor (0.5 * fn.x) + 1.) * rowGap -\n           blkGap * (2.- ((mod (fn.x, 2.) == 0.) ? 1. : 3.)) - 0.5 * szReg;\n\telse r.x = (fn.x + 1.) * rowGap - 0.5 * szReg;\n        if (nb == mId) {\n          rm = r;\n          qm = EulToQt (0.5 * pi * vec3 (1., mod (fn.y, 2.), 1.));\n        }\n        ++ nb;\n      }\n    }\n  }\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  fmId = float (mId);\n  if (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) {\n    vm.xz = vec2 (3., -1.) * normalize (rm.xz) +\n       0.4 * (1. - 2. * vec2 (Hashff (fmId * tCur), Hashff (3.1 * fmId * tCur)));\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm;\n  vec2 iFrag;\n  float mxStep;\n  int mId, pxId;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nBlock + 4) discard;\n  tCur = iTime;\n  if (pxId >= 4) mId = (pxId - 4) / 4;\n  else mId = -1;\n  doInit = false;\n  mxStep = 5500.;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    nStep = Loadv4 (0).x;\n    ++ nStep;\n    if (mId >= 0) Step (mId, rm, vm, qm, wm);\n  }\n  if (nStep > mxStep) doInit = true;\n  if (doInit) {\n    nStep = 0.;\n    if (mId >= 0) Init (mId, rm, vm, qm, wm);\n  }\n  if (pxId == 0) stDat = vec4 (nStep, mxStep, 0., 0.);\n  else if (pxId == 4 + 4 * mId) p = vec4 (rm, 0.);\n  else if (pxId == 4 + 4 * mId + 1) p = vec4 (vm, 0.);\n  else if (pxId == 4 + 4 * mId + 2) p = qm;\n  else if (pxId == 4 + 4 * mId + 3) p = vec4 (wm, 0.);\n  Savev4 (pxId, ((pxId >= 4) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}