{
    "Shader": {
        "info": {
            "date": "1620851580",
            "description": "Creating multiple shapes with one SDF evaluation by repeatedly rotating and folding space",
            "flags": 0,
            "hasliked": 0,
            "id": "7s2XRd",
            "likes": 1,
            "name": "Fork  fractal  NikolaErceg",
            "published": 3,
            "tags": [
                "fractalcineshader"
            ],
            "usePreview": 0,
            "username": "NikolaErceg",
            "viewed": 6434
        },
        "renderpass": [
            {
                "code": "vec3 palette(float d){\n\treturn mix(vec3(2.3,2.42,2.24),vec3(.0,0.31,1.2),d);\n}\n\nvec2 rotate(vec2 p,float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\nfloat map(vec3 p){\n    for( int i = 0; i<5; ++i){\n        float t = iTime*1.0;\n        p.xz =rotate(p.xz,t);\n        p.xy =rotate(p.xy,t*0.001);\n        p.xz = abs(p.xz);\n        p.xz-=0.24;\n\t}\n\treturn dot(sign(p),p)/13.;\n}\n\nvec4 rm (vec3 ro, vec3 rd){\n    float t = 3.;\n    vec3 col = vec3(0.01);\n    float d;\n    for(float i =0.; i<86.; i++){\n\t\tvec3 p = ro + rd*t;\n        d = map(p)*.86;\n        if(d<0.18){\n            break;\n        }\n        if(d>55.){\n        \tbreak;\n        }\n        //col+=vec3(1.6,3.8,3.8)/(100.*(d));\n        col+=palette(length(p)*.1)/(222.*(d));\n        t+=d;\n    }\n    return vec4(col,0./(d*10.));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.x;\n\tvec3 ro = vec3(41.,41.,-0.);\n    ro.xz = rotate(ro.xz,iTime);\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(55,3.,57.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+cf*3. + uv.x*cs + uv.y*cu;\n    \n    vec3 rd = normalize(uuv-ro);\n    \n    vec4 col = rm(ro,rd);\n    \n    \n    fragColor = col;\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"fractal pyramid\",\n\t\"description\": \"\",\n\t\"model\": \"car\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}