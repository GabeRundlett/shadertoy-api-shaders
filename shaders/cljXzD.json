{
    "Shader": {
        "info": {
            "date": "1675772485",
            "description": "A very simple implementation of a pixelator.\nI wanted to have a reference implementation with clear explanation of how/why it works.\nI wanted the shader to just communicate that single technique as clearly as possible.",
            "flags": 0,
            "hasliked": 0,
            "id": "cljXzD",
            "likes": 0,
            "name": "Super simple pixelator",
            "published": 3,
            "tags": [
                "postprocessing",
                "educational",
                "easy",
                "pixelation"
            ],
            "usePreview": 0,
            "username": "peremptor",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //higher values = bigger pixels goes from 0 -> 1\n    float pixelationFactor = 0.2;\n    \n    vec2 pixelationModValue = vec2(pixelationFactor);\n    \n    //at the moment the rectangles that are created \n    //by the pixelation are influenced by the aspect ration\n    //(set the pixelation factor to 0.1 to see what i mean)\n    //the following line of code makes it so that pixels are squares\n    //you can prevent that by uncommenting this line\n    pixelationModValue.x /= iResolution.x/iResolution.y;\n    \n    /*\n    Essentially what is happening here is that\n    the normal range for the x and y coordinates are chunked.\n    If roughly applies the following transformation to the x and y-axis\n    if you were to use the pixelation factor 0.2\n    \n    Before:\n        |--------------------------------------->\n        0  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0\n    After:\n        |--------------------------------------->\n        0      0.2     0.4     0.6     0.8     1.0\n    Everything inbetween \n        0   and 0.2 is transformed to 0\n        0.2 and 0.4 is transformed to 0.2\n        0.4 and 0.6 is transformed to 0.4\n        and so on...\n    */\n    uv -= mod(uv,pixelationModValue);\n    \n    vec4 textureColor = texture(iChannel0, uv);\n    fragColor = textureColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}