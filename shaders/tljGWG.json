{
    "Shader": {
        "info": {
            "date": "1560984668",
            "description": "Unwinding after some stress by making something simple and trippy.",
            "flags": 32,
            "hasliked": 0,
            "id": "tljGWG",
            "likes": 12,
            "name": "Feedback Tunnel",
            "published": 3,
            "tags": [
                "feedback",
                "psychadelic"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 656
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 o, in vec2 i )\n{\n\to = texelFetch(iChannel0,ivec2(i),0);\n\n    // linear -> gamma\n    o.rgb = pow( o.rgb, vec3(1./2.2) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 o, in vec2 i )\n{\n    // read previous frame with a perspective twist\n    vec2 aspect = iResolution.xy/sqrt(iResolution.x*iResolution.y);\n    vec2 uv = (i/iResolution.xy-.5)*aspect;\n    \n    // ray trace a plane at z=0, and map uv on that\n    // this way I can move the camera to control the feedback shape\n    // without adding redundant params for controlling the plane\n    vec3 ray = normalize(vec3(uv,1));\n\n    // adjust camera rotation\n    vec3 rot = .02*sin(iTime*vec3(1.618,1.,.382)*.3);\n    vec2 s = vec2(-1,1);\n\t#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n    ray.xy *= rot(rot.z);\n    ray.yz *= rot(rot.x);\n    ray.zx *= rot(rot.y);\n    \n\t// position camera (position of <0,0,-1> and 0 rotation = direct image)\n    vec3 camPos = vec3(rot.yx*vec2(-1.1,1.1),-1.01);\n    float t = (0.-camPos.z)/ray.z;\n    vec3 pos = camPos + ray*t;\n    uv = pos.xy;\n    \n    o = texture(iChannel0,uv/aspect+.5);\n    \n    // draw things on top\n    \n    // box / tunnel wall\n    o.rgb = mix( o.rgb, step(0.,sin(iTime*vec3(16.18,20,1.618*.618*10.))), smoothstep(.02,.015,abs(max(abs(uv.x)-.5*aspect.x,abs(uv.y)-.5*aspect.y))) );\n    // alternative colours:\n//    o.rgb = mix( o.rgb, sin(floor(iTime*vec3(16.18,20,1.618*.618*10.)))*.8+.2, smoothstep(.02,.015,abs(max(abs(uv.x)-.5*aspect.x,abs(uv.y)-.5*aspect.y))) );\n\n    // circle / snake\n    o.rgb = mix( o.rgb, sin(iTime*vec3(1,1.382,1.618)*3.)*.7+.5, smoothstep(.03,.025,length( uv-vec2(.45)*aspect*mix(sin(iTime*vec2(.618,1.382)),sin(iTime*vec2(1.618,2.)),.3) )/(abs(sin(iTime))+.5)) );\n\t// grey version:\n//    o.rgb = mix( o.rgb, sin(iTime*vec3(10))*.5+.5, smoothstep(.03,.025,length( uv-vec2(.5)*aspect*mix(sin(iTime*vec2(.618,1.382)),sin(iTime*vec2(1.618,2.)),.3) )) );\n    \n    o.rgb = clamp(o.rgb,0.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}