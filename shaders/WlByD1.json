{
    "Shader": {
        "info": {
            "date": "1594202217",
            "description": "This is just copied from https://www.shadertoy.com/view/WlByWh  by @treize , with a few *sin(iTime) added to the offsets ",
            "flags": 0,
            "hasliked": 0,
            "id": "WlByD1",
            "likes": 2,
            "name": "Animated ChebychevVoronoi",
            "published": 3,
            "tags": [
                "voronoi",
                "noise"
            ],
            "usePreview": 0,
            "username": "mosaic",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "float max_abs(vec2 p)\n{\n    return max(abs(p.x), abs(p.y));\n}\n\n\nvec2 voronoi_noise_randomVector(vec2 UV, vec2 offset)\n{\n\tmat2 m = \tmat2(15.27, 47.63, 99.41, 89.98);\n\tUV = fract(sin(UV* m) * 46839.32);\n\treturn vec2(sin(UV.y * +offset.x*cos(iTime/3.)) * 0.5 + 0.5, cos(UV.x * offset.y*sin(iTime/20.)) * 0.5 + 0.5);\n}\n\nvoid ChebychevVoronoi(vec2 UV, vec2 AngleOffset, vec2 CellDensity, out float Out, out float Cells, out float Lines,out float Points)\n{\n\tvec2 g = floor(UV * CellDensity);\n\tvec2 f = fract(UV * CellDensity);\n\t\n\tfloat res = 8.0;\n\tfloat md=8.0;\n    vec2 mr;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n            float d = max_abs(r);\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n                mr=r;\n\t\t\t}\n\t\t}\n\t}\n    res = 8.0;\n\tfor (int y = -1; y <= 1; y++)\n \t{\n\t    for (int x = -1; x <= 1; x++)\n\t\t{\n\t\t    vec2 lattice = vec2(x, y);\n            vec2 offset = voronoi_noise_randomVector(lattice + g, AngleOffset);\n            vec2 r = lattice +offset -f;\n           \tfloat d = max_abs(r);\n\t\t\tif (d < res)\n\t\t\t{\n\t\t\t    res = d;\n\t\t\t    Out = res;\n\t\t\t    Cells = offset.x;\n\t\t\t}\n\t\t\tif( dot(mr-r,mr-r)>0.00001)\n\t\t\t{\n                md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n\t\t\t}\n\t\t}\n\t}\n\tLines = mix(1.0, 0.0, smoothstep( 0.03, 0.06, md ));\n\tPoints =1.0-smoothstep( 0.0, 0.3, res );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 p = fragCoord/iResolution.xy;\n   \tp=p*2.0-1.0;\n\tp.x *= iResolution.x / iResolution.y;\n    vec3 col;\n    float a,b,c,d;\n    //ChebychevVoronoi(p,vec2(3.0+cos(iTime)),vec2(5.0,5.0),a,b,c,d);\n    ChebychevVoronoi(p,vec2(7.0),vec2(5.0,5.0),a,b,c,d);\n    //col=vec3(a);\n    col=vec3(b);\n    //col=vec3(c);\n    //col=vec3(d);\n\tfragColor = vec4(col,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}