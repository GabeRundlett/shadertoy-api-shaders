{
    "Shader": {
        "info": {
            "date": "1440337867",
            "description": "Flowing blood cells.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlsXDf",
            "likes": 4,
            "name": "Bloodstream",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "tsherif",
            "viewed": 1573
        },
        "renderpass": [
            {
                "code": "float map(in vec3 pos) {\n    pos.z += iTime * 2.0;\n    float a = sin(floor(pos.z / 12.0)) * 0.6;\n    float cosa = cos(a);\n    float sina = sin(a);\n    mat2 m2 = mat2(cosa, -sina, sina, cosa);\n    pos.xy = m2 * pos.xy;\n    \n    if (abs(pos.x) > 25.0 || abs(pos.y) > 25.0) {\n       return 200.0;\n    }\n    \n    vec3 c = mod(pos, 12.0) - 5.0;\n    c.y += sin(c.z) * 1.5;\n    \n    float r = 2.0;\n    r += 0.5 * sin(-pos.z + 0.1 * pos.x + 0.1 * pos.y + iTime * 4.0);\n    \n    float d = length(c) - r;\n    \n    \n    return d;\n}\n\nvec3 calcNormal(in vec3 pos) {\n    vec3 nor;\n    vec2 e = vec2(0.01, 0.0);\n    \n    nor.x = map(pos + e.xyy) - map(pos - e.xyy);\n    nor.y = map(pos + e.yxy) - map(pos - e.yxy);\n    nor.z = map(pos + e.yyx) - map(pos - e.yyx);\n    \n    return normalize(nor);\n}\n\nvec3 getRefl(in vec3 ro, in vec3 rd) {\n    float tmax = 20.0; \n    float t = 0.1;\n    \n    for (int i = 0; i < 32; i++) {\n        vec3 pos = ro + t * rd;\n        float h = map(pos);        \n       \n        if (t > tmax || h < 0.01) {\n        \tbreak;\n        };\n        \n        t += h * 0.5;\n    }\n    \n    vec3 pos = ro + t * rd;\n    \n    if (t > tmax) {\n        return texture(iChannel1, rd).rgb;\n    }\n    \n    vec3 light = normalize(vec3(1.0,1.0,0.5));\n    \n    vec3 nor = calcNormal(pos);\n        \n    vec3 mat = vec3(0.7, 0.0, 0.0);\n    vec3 spec = vec3(1.0) * pow(max(dot(-rd, reflect(-light, nor)), 0.0), 100.0);\n    vec3 diff = max(0.0, dot(light, nor)) * vec3(1.0);\n    \n    return mat * (diff + spec + 0.05) + 0.3;\n}\n\nvec3 getColor(in vec3 pos, in vec3 rd) {\n    vec3 light = normalize(vec3(1.0,1.0,0.5));\n    \n    vec3 nor = calcNormal(pos);\n        \n    vec3 mat = vec3(0.7, 0.0, 0.0);\n    vec3 refld = reflect(rd, nor);\n    vec3 refl = getRefl(pos, refld) + 1.0;\n    mat *= refl;   \n    vec3 spec = vec3(1.0) * pow(max(dot(-rd, reflect(-light, nor)), 0.0), 100.0);\n    vec3 diff = max(0.0, dot(light, nor)) * vec3(1.0);\n    vec3 color = mat * (diff + spec + 0.05);\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n    \n    vec2 pos = p * 2.0 - 1.0;\n    \n    pos.x *= iResolution.x / iResolution.y;\n    \n    float r = length(pos);\n    float a = atan(pos.y, pos.x) + 0.3 * iTime;\n    \n    vec3 color = texture(iChannel0, vec2(1.0 / r + 0.8 * iTime + max(0.04 * sin(iTime * 4.0), 0.0), a)).rgb;\n    color *= vec3(100.0, 0.2, 0.2);\n    color = clamp(color, 0.0, 0.5);\n    color = mix(vec3(0.0), color, smoothstep(0.1, 0.4, r)); \n        \n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    a = 0.2 * sin(iTime * 0.2);\n    float cosa = cos(a);\n    float sina = sin(a);\n    mat2 m2 = mat2(cosa, -sina, sina, cosa);\n    vec3 rd = vec3(m2 * pos, -1.0);\n    \n    rd = normalize(rd);\n    \n    float tmax = 240.0;\n    float t = 0.0;\n    for (int i = 0; i < 256; i++) {\n      \tvec3 pos = ro + rd * t;\n        \n        float h = map(pos);\n        if (h < 0.001 || t > tmax) break;\n        t += h * 0.5;\n    }\n    \n    \n    \n    if (t < tmax) {\n        vec3 pos = ro + rd * t;\n        color = getColor(pos, rd);\n        float fog = exp(-0.00015 * t * t);\n    \tcolor = mix(vec3(0.0), color, fog);\n    }\n    \n    color = sqrt(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}