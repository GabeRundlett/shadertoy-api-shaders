{
    "Shader": {
        "info": {
            "date": "1636295075",
            "description": "Some functions to generate random.",
            "flags": 32,
            "hasliked": 0,
            "id": "sld3WM",
            "likes": 9,
            "name": "Random generator",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "busybeaver",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "// you can use this random functions in your shaders\n// see Buffer A\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float pi = 3.1415926;\nfloat seed; // global float seed must exist in order for these functions to work\n\n// random number 0 <= rand() < 1\nfloat rand() {\n    seed = fract(seed + .500009);\n    return fract(sin(seed * 1000.) * seed * 100.);\n}\n\n// random vector with length = 1\nvec3 rand_ray() {\n    float d = rand() * pi * 2.;\n    float h = rand() * 2. - 1.;\n    float a = sqrt(1. - h * h);\n    return vec3(sin(d) * a, h, cos(d) * a);\n}\n\n// rotate a vec2 v by andgle a (this is not a random function)\nvec2 rotate(vec2 v, float a) {\n    vec2 x = vec2(cos(a), sin(a));\n    return v.x * x + v.y * vec2(-x.y, x.x);\n}\n\n// rotate a vec3 v by random angle (angle < w)\n// conc is the concentration of results around the original vector\n// conc = 1 for uniform distribution, conc < 1 for more vecrtors close to the original vector v\n// conc > 1 to concentrate results near to the edges of allowed by w area\n// this function may be used to make matte surface in ray tracing\nvec3 rand_rotate(vec3 v, float w, float conc) {\n    float d = rand() * pi * 2.;\n    float h = 1. - (1. - pow(rand(), conc)) * (1. - cos(w));\n    float a = sqrt(1. - h * h);\n    vec3 r = -vec3(sin(d) * a, cos(d) * a, h);\n    r = vec3(r.x, rotate(r.yz, atan(v.y, length(v.xz))));\n    r = vec3(rotate(r.xz, atan(v.z, v.x) + pi * .5), r.y).xzy;\n    return r * length(v);\n}\n\n// make seed from time and uv\nfloat make_seed(float time, vec2 uv) {\n    seed = fract(fract(time * .5) + time * .000009); seed = rand();\n    seed = fract(seed + uv.x); seed = rand();\n    seed = fract(seed + uv.y); seed = rand();\n    return seed;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) / (iResolution.x + iResolution.y) * 4.;\n    make_seed(float(iFrame), uv);\n    \n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy) * .99;\n    if(uv.x < -0.5) {\n        for(int i = 0; i < 1000; i ++) {\n            vec3 r = rand_rotate(vec3(1., 0.2, 0.), 1.2, 1.0);\n            if(floor(r.xy / (r.z + 2.) * 300.) == floor(vec2(uv.x + 1.1, uv.y) * 300.))\n                fragColor += vec4(.5, .5, 1. - smoothstep(-1., 1., r.z), 1.) * .2;\n        }\n    } else if(uv.x < 0.5) {\n        for(int i = 0; i < 1600; i ++) {\n            vec3 r = rand_ray();\n            if(floor(r.xy / (r.z + 2.35) * 300.) == floor(uv.xy * 300.))\n                fragColor += vec4(.5, .5, 1. - smoothstep(-1., 1., r.z), 1.) * .2;\n        }\n    } else {\n        fragColor = vec4(rand(), rand(), rand(), 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}