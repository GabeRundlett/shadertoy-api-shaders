{
    "Shader": {
        "info": {
            "date": "1659536918",
            "description": "random test\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBcRD",
            "likes": 0,
            "name": "Random Loading screen 03",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 80
        },
        "renderpass": [
            {
                "code": "#define PI  3.14159265359\n#define TAU 6.28318530717\n\n///Inigo Quilez Signed Distance Field\n//https://iquilezles.org/articles/distfunctions2d\n///Playlist shadertoy SDF : \n//https://www.shadertoy.com/playlist/MXdSRf&from=36&num=12\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n///UV\nvec2 CenterUV(vec2 fragCoord)\n{\n    ///Centering Operation\n\tvec2 uv = vec2( fragCoord.xy - 0.5*iResolution.xy );\n\t// [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n    return uv;\n}\nvec2 NormalizeUV(vec2 fragCoord)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy);\n    uv = 2.0 * uv.xy / iResolution.xy;\n\t// [-iResolution.x/2, iResolution.x/2] -> [-1.0, 1.0]\n    // [-iResolution.y/2, iResolution.y/2] -> [-1.0, 1.0]\n    \n    return uv;\n}\nvec2 AspectRatioUV(vec2 fragCoord)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy);\n\tuv = 2.0 * uv.xy / iResolution.y;\n    // AspectRatio = 1920/1080 = 1.778\n    // [-iResolution.x/2, iResolution.x/2] ->[-1.778, 1.778]\n\t// [-iResolution.y/2, iResolution.y/2] ->[-1, 1]\n    return uv;\n}\nvec2 RotateUV(vec2 uv, float angle)\n{\t\n    //angle in degree (TAU = 2PI = 360 degrees)\n\tangle = angle * PI / 180.0;\n    uv * mat2( cos(angle), sin(angle),\n              -sin(angle), cos(angle));\n    return uv;\n}\n\n///COLOR\nvec3 Color255(int R, int G, int B)\n{\n    float rat = 1.0/255.0;\n    return vec3(float(R)*rat, float(G)*rat, float(B)*rat);\n}\nvec3 HSVcolor(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Grayscale \n#define black   vec3(0.0)\n#define grey   vec3(0.5)\n#define white   vec3(1.0)\n//RGB\n#define red     vec3(1.0,0.0,0.0)\n#define green   vec3(0.0,1.0,0.0)\n#define blue    vec3(0.0,0.0,1.0)\n//CMY\n#define cyan    vec3(0.0,1.0,1.0)\n#define yellow  vec3(1.0,1.0,0.0)\n#define magenta vec3(1.0,0.0,1.0)\n\n//HELPER\nfloat Clamp01(float value)\n{\n    return clamp(value,0.0,1.0);\n}\n\n//2DShape\nfloat LineHori(vec2 uv, float height, float thickness, float blur) \n{\n    float sdfLine = abs(uv.y - height)- thickness;\n\treturn Clamp01(sdfLine * (10.0/blur));\n}\nfloat LineVert(vec2 uv, float height, float thickness, float blur) \n{\n    float sdfLine = abs(uv.y - height)- thickness;\n\treturn Clamp01(sdfLine * (10.0/blur));\n}\nfloat Disk(vec2 uv, vec2 center, float radius, float blur) \n{\n    float sdfCircle = length(uv-center)-radius;\n\treturn Clamp01(sdfCircle * (10.0/blur));\n}\n\n//TODO => https://www.youtube.com/watch?v=62-pRVZuS5c\nfloat Rectangle(vec2 uv, vec2 center, vec2 size) \n{\n\tfloat ret;\n\tfloat d = 0.005;\n\tret  = smoothstep((center.x + (-size.x*.5))-d,(center.x +( size.x*.5))+d, uv.x);\n\tret *= smoothstep((center.y + ( size.y*.5))-d,(center.y +(-size.y*.5))+d, uv.y);\n\tret *= 1.0 - smoothstep((center.y +(-size.y*.5))-d,(center.y +( size.y*.5))+d, uv.y);\n\tret *= 1.0 - smoothstep((center.x +( size.x*.5))-d,(center.x +(-size.x*.5))+d, uv.x);\n\treturn ret;\n}\n\n//Reminder\n//mix(a, b, t);\n//mod(val, 1.0);\n//step(edge, var);\n//clamp(var, min, max);\n//smoothstep(edge1, edge2, var);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV manipulation\n    vec2 uv = AspectRatioUV(fragCoord.xy);\n    uv *= 1.2;\n    \n    //Parameter\n    float t = iTime * 2.0;\n    \n    //Visu\n    vec3 pix = vec3(uv,0);\n    pix = vec3(0.1);\n    for(int i = 0; i < 1200; i++)\n    {\n        float t = (iTime * 1.0) + abs(sin(float(i)/10000.0* TAU + iTime));\n        vec2 pos = vec2(cos( float(i)/1.0 * TAU + t),sin(float(i)/1.0* TAU+t)) * sin(float(i)/128.0* TAU+t)\n        + vec2(0.0,0.0);\n        float circleMask = Disk(uv,pos, 0.08, 0.2);\n        pix = mix(HSVcolor(vec3(float(i)/3600.0, 0.95,0.95)), pix, circleMask); \n    }\n    \n\tfragColor = vec4(pix, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}