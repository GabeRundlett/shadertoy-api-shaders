{
    "Shader": {
        "info": {
            "date": "1673881151",
            "description": "為一三維環境，兩顆球位移時會產生周圍空間扭曲效果，z方向移動時會影像材質粗糙度\n原為結合ultralap 3di手勢互動程式，可三維控制球體位置，轉為網頁版後位置為隨機移動。",
            "flags": 0,
            "hasliked": 0,
            "id": "dlj3Wy",
            "likes": 2,
            "name": "Swirling Intersection",
            "published": 3,
            "tags": [
                "raymarching",
                "reflection"
            ],
            "usePreview": 0,
            "username": "cinmin",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n#define PI 3.141592654\n#define TWOPI 6.283185308 \n\n\nvec3 hand=vec3(0,1.3,3.4);\nvec3 hand2=vec3(0,1.3,3.4);\n\nvec3 normalMap(vec3 p, vec3 n);\nfloat calcAO( in vec3 pos, in vec3 nor );\nfloat noise_3(in vec3 p); //亂數範圍 [0,1]\nvec3 FlameColour(float f);\nfloat bnoise( in float x );\n\n\nvec2 SphereMap( vec3 ray){\t\t//ray mapping to UV\n   vec2 st;\n   ray=normalize(ray);\n   float radius=length(ray);\n   st.y = acos(ray.y/radius) / PI;\n   if (ray.z >= 0.0) st.x = acos(ray.x/(radius * sin(PI*(st.y)))) / TWOPI;\n   else st.x = 1.0 - acos(ray.x/(radius * sin(PI*(st.y)))) / TWOPI;\n   return st;\n}\n\nvec4 warpcolor(in vec2 uv, float t){   //Normalized uv[0~1]\n    \t\tfloat strength = 0.4;\n\t\tvec3 col = vec3(0);\n\t\t//pos coordinates (from -1 to 1)\n\t\tvec2 pos = uv*2.0-1.0;\n            \n\t\tfor(int i = 1; i < 6; i++){ \n\t\tpos.x += strength * sin(2.0*t+float(i)*1.5 * pos.y)+t*0.5;\n\t\tpos.y += strength * cos(2.0*t+float(i)*1.5 * pos.x);}\n\n\t\t//Time varying pixel colour\n\t\tcol += 0.5 + 0.5*cos(t+pos.xyx+vec3(0,2,4));\n\t\t//Gamma\n\t\tcol = pow(col, vec3(0.4545));\n\t\treturn vec4(col,1.0) ;\n}\n\nvec3 warpSky(vec3 e){\n    vec2 ST = SphereMap(e);\n    vec4 color =warpcolor(ST, iTime*0.1);\n    return color.xyz;\n}\n\n\nvec3 phong(vec3 p, vec3 n, vec3 v){\n    vec3 final = vec3(0.0);\n    vec3 ambient_color=vec3(0.351,0.900,0.955);\n\n    vec2 mouse=(iMouse.xy/iResolution.xy)*2.0-1.0;\n    {\n    vec3 light_pos = vec3(mouse.x,mouse.y,2.0);\n    vec3 light_color = vec3(0.245,0.194,0.241);\n    vec3 light_vector =normalize(light_pos-p);\n    vec3 reflection = normalize(reflect(-light_pos,n));  \n    float ka=0.620, ks=1.5, kd= 2.;//各參數權重\n    float shineness=5.160;\n    \n    vec3 diffuse, specular, ambient;\n    ambient = ka*ambient_color;\n    diffuse= kd*dot(light_vector,n)*light_color;\n    specular= ks*pow(max(dot(reflection,v),0.),shineness)*light_color;\n    final=ambient_color+diffuse+specular;\n    }\n    {\n  \n    vec3 light_pos = vec3(-5.,15.,2.0);\n    vec3 light_color = vec3(0.920,0.266,0.258);\n    vec3 light_vector =normalize(light_pos-p);\n    vec3 reflection = normalize(reflect(-light_pos,n));  \n    float ka=0.320, ks=0.8, kd= 0.8;//各參數權重\n    float shineness=2.568;\n    \n    vec3 diffuse, specular, ambient;\n    ambient = ka*ambient_color;\n    diffuse= kd*dot(light_vector,n)*light_color;\n    specular= ks*pow(max(dot(reflection,v),0.),shineness)*light_color;\n    final+=(diffuse+specular)*0.6;\n    }\n    // final+=ambient_color;\n    vec3 refl = reflect(-v,n);\n    vec3 refl_clr=warpSky(refl);\n    float F =1.0-dot(n,v);\n    final = mix(final,refl_clr,F);\n    return final;\n}\n\n//=== distance functions ===\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\n\nfloat udRoundBox(vec3 p, vec3 b, float r) {\n\t//p += 0.015 * (noise_3(p*60.0)*2.0-1.0);\n\treturn length(max(abs(p) - b, 0.0)) - r;\n}\n\nfloat map(in vec3 p)\n{\nfloat bump=-0.288 * (noise_3(p*3.0)*2.0-1.0);\nfloat bump_h1=-0.008 *hand.z* (noise_3(p*3.0)*2.0-1.0);\nfloat bump_h2=-0.008 *hand2.z* (noise_3(p*3.0)*2.0-1.0);\nvec3 p1 = p ;\n//return sdSphere(p1+vec3(0.,0.,0.0), 0.5);\nfloat t1=sdTorus(p1+hand+bump_h1,vec2(0.05,0.025));\nfloat t2=sdTorus(p1+hand2+bump_h2,vec2(0.05,0.025));\nreturn min(t1,t2);\n//return sdBox(p+vec3(0.0,0.0,0.0), vec3(0.4, 0.4, 0.4));\n//return udRoundBox(p+vec3(0.0,0.0,0.0), vec3(0.3, 0.3, 0.3), 0.1);\n}\n\n//=== gradient functions ===\nvec3 gradient( in vec3 p ) //尚未normalize\n{\n\tconst float d = 0.001;\n\tvec3 grad = vec3(map(p+vec3(d,0,0))-map(p-vec3(d,0,0)),\n                     map(p+vec3(0,d,0))-map(p-vec3(0,d,0)),\n                     map(p+vec3(0,0,d))-map(p-vec3(0,0,d)));\n\treturn grad;\n}\n\n\n// === raytrace functions===\nfloat trace(vec3 o, vec3 r, out vec3 p)\n{\nfloat d=0.0, t=0.0;\nfor (int i=0; i<15; ++i)\n{\n\tp= o+r*t;\n\td=map(p);\n\tif(d<0.0) break;\n\tt += d*0.3; //影響輪廓精準程度\n\t}\nreturn t;\n}\n\n\n//=== sky ===\nfloat fbm(in vec2 uv);\nvec3 getSkyFBM(vec3 e) {\t//二維雲霧\n\tvec3 f=e;\n\tfloat m = 2.0 * sqrt(f.x*f.x + f.y*f.y + f.z*f.z);\n\tvec2 st= vec2(-f.x/m + .5, -f.y/m + .5);\n\t//vec3 ret=texture2D(iChannel0, st).xyz;\n\tfloat fog= fbm(0.6*st+vec2(-0.2*iTime, -0.02*iTime))*0.5+0.3;\n    return vec3(fog);\n}\n\nvec3 sky_color(vec3 e) {\t//漸層藍天空色\n    e.y = max(e.y,0.0);\n    vec3 ret;\n    //ret.x = pow(1.0-e.y,3.0);\n    //ret.y = pow(1.0-e.y, 1.2);\n    //ret.z = 0.8+(1.0-e.y)*0.3;\n    ret=FlameColour(e.y);\n    return ret;\n}\n\nvec3 getSkyALL(vec3 e)\n{\t\n\treturn sky_color(e);\n}\n\n//=== camera functions ===\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n// math\nmat3 fromEuler(vec3 ang) {\n    vec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    vec3 m0 = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n    vec3 m1 = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n    vec3 m2 = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n    return mat3(m0, m1, m2);\n}\n\n// ================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    hand=vec3(bnoise(iTime/8.+100.)*2.5,(bnoise(iTime/5.+15.))*0.9,(bnoise(iTime/6.)+1.)/2.*7.);\n    hand2=vec3(bnoise(iTime/9.+50.)*2.,(bnoise(iTime/6.+35.))*0.9,(bnoise(iTime/4.+60.)+1.)/2.*6.5);\n    vec2 uv = gl_FragCoord.xy/iResolution.xy;\n    uv = uv*2.0-1.0;\n    uv.x*= iResolution.x/iResolution.y;\n    uv.y*=1.0;\n    vec2 mouse=(iMouse.xy/iResolution.xy)*2.0-1.0;\n\n// camera option1  (模型應在原點，適用於物件)\n\t//vec3 CameraRot=vec3(0.0, mouse.y, mouse.x); \n    vec3 CameraRot=vec3(0.0, 0., 0.); \n\tvec3 ro= vec3(0.0, 0.0, 2.0)*fromEuler(CameraRot);//CameraPos;\n\tvec3 ta =vec3(0.0, 0.0, 0.0); //TargetPos; //vec3 ta =float3(CameraDir.x, CameraDir.z, CameraDir.y);//UE座標Z軸在上\n\tmat3 ca = setCamera( ro, ta, 0.0 );\n\tvec3 RayDir = ca*normalize(vec3(uv, 2.0));//z值越大，zoom in! 可替換成iMouse.z\n\tvec3 RayOri = ro;\n\n// camera option2 (攝影機在原點，適用於場景)\n/*\t\n\tvec3 CameraRot=vec3(0.0, -iMouse.y, -iMouse.x);\n\tvec3 RayOri= vec3(0.0, 0.0, 0.0);\t//CameraPos;\n\tvec3 RayDir = normalize(vec3(uv, -1.))*fromEuler(CameraRot);\n*/\n\t\n\tvec3 p,n;\n\tfloat t = trace(RayOri, RayDir, p);\n\tn=normalize(gradient(p));\n    vec3 bump=normalMap(p*1.652,n);\n    n=n+bump*0.05;\n    \n    float edge= dot(-RayDir, n);\n    //edge = step(0.2, edge);\n    edge = smoothstep(-0.072, 0.956, edge);\n    \n    \n\t\t\n//SHADING\n    vec3 result=n;\n    vec3 ao = vec3(calcAO(p,n));\n    //result = vec3(edge);\n    result= phong(p,n,-RayDir)*ao;  //攝影機觀看視角(V)要轉負的，因為是方向是從物體發出到攝影機  //需要外接的話燈光另外寫\n    //result*=(1.-edge);\n//HDR環境貼圖\n    vec3 refl = reflect(RayDir,n);\n    vec3 refl_clr=warpSky(refl);\n\tvec3 BG=refl_clr;\t   //或getSkyFBM(RayDir)\n\n\nif(t<2.5) fragColor = vec4(vec3(result),1.0); else fragColor = vec4(BG,1.0);//測試n, n_bump, fresnel, BG, color, fog, F, I, SS, reflectedCol\n}\n\n\n\n\n\n\n\n\n\n\n\n\n// Basic noise\nfloat bnoise( in float x )\n{\n    // setup    \n    float i = floor(x);\n    float f = fract(x);\n    float s = sign(fract(x/2.0)-0.5);\n    \n    // use some hash to create a random value k in [0..1] from i\n  //float k = hash(uint(i));\n  //float k = 0.5+0.5*sin(i);\n    float k = fract(i*.1731);\n\n    // quartic polynomial\n    return s*f*(f-1.0)*((16.0*k-4.0)*f*(f-1.0)-1.0);\n}\n\n\n\n\n//=== 3d noise functions ===\nfloat hash11(float p) {\n    return fract(sin(p * 727.1)*43758.5453123);\n}\nfloat hash12(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nvec3 hash31(float p) {\n\tvec3 h = vec3(1275.231,4461.7,7182.423) * p;\t\n    return fract(sin(h)*43758.543123);\n}\n\n// 3d noise\nfloat noise_3(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\t\n\tvec3 u = f*f*(3.0-2.0*f);\n    \n    vec2 ii = i.xy + i.z * vec2(5.0);\n    float a = hash12( ii + vec2(0.0,0.0) );\n\tfloat b = hash12( ii + vec2(1.0,0.0) );    \n    float c = hash12( ii + vec2(0.0,1.0) );\n\tfloat d = hash12( ii + vec2(1.0,1.0) ); \n    float v1 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n    \n    ii += vec2(5.0);\n    a = hash12( ii + vec2(0.0,0.0) );\n\tb = hash12( ii + vec2(1.0,0.0) );    \n    c = hash12( ii + vec2(0.0,1.0) );\n\td = hash12( ii + vec2(1.0,1.0) );\n    float v2 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n        \n    return max(mix(v1,v2,u.z),0.0);\n}\n//=== glow functions ===\nfloat glow(float d, float str, float thickness){\n    return thickness / pow(d, str);\n}\n\n//=== 2d noise functions ===\nvec2 hash2( vec2 x )\t\t\t//亂數範圍 [-1,1]\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\nfloat gnoise( in vec2 p )\t\t//亂數範圍 [-1,1]\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash2( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     \t    dot( hash2( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                \t     mix( dot( hash2( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     \t    dot( hash2( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat fbm(in vec2 uv)\t\t//亂數範圍 [-1,1]\n{\n\tfloat f;\t\t\t\t//fbm - fractal noise (4 octaves)\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf   = 0.5000*gnoise( uv ); uv = m*uv;\t\t  \n\tf += 0.2500*gnoise( uv ); uv = m*uv;\n\tf += 0.1250*gnoise( uv ); uv = m*uv;\n\tf += 0.0625*gnoise( uv ); uv = m*uv;\n\treturn f;\n}\n\n//=== 3d noise functions p/n ===\nvec3 smoothSampling2(vec2 uv)\n{\n    const float T_RES = 32.0;\n    return vec3(gnoise(uv*T_RES)); //讀取亂數函式\n}\n\nfloat triplanarSampling(vec3 p, vec3 n)\n{\n    float fTotal = abs(n.x)+abs(n.y)+abs(n.z);\n    return  (abs(n.x)*smoothSampling2(p.yz).x\n            +abs(n.y)*smoothSampling2(p.xz).x\n            +abs(n.z)*smoothSampling2(p.xy).x)/fTotal;\n}\n\nconst mat2 m2 = mat2(0.90,0.44,-0.44,0.90);\nfloat triplanarNoise(vec3 p, vec3 n)\n{\n    const float BUMP_MAP_UV_SCALE = 0.2;\n    float fTotal = abs(n.x)+abs(n.y)+abs(n.z);\n    float f1 = triplanarSampling(p*BUMP_MAP_UV_SCALE,n);\n    p.xy = m2*p.xy;\n    p.xz = m2*p.xz;\n    p *= 2.1;\n    float f2 = triplanarSampling(p*BUMP_MAP_UV_SCALE,n);\n    p.yx = m2*p.yx;\n    p.yz = m2*p.yz;\n    p *= 2.3;\n    float f3 = triplanarSampling(p*BUMP_MAP_UV_SCALE,n);\n    return f1+0.5*f2+0.25*f3;\n}\n\nvec3 normalMap(vec3 p, vec3 n)\n{\n    float d = 0.005;\n    float po = triplanarNoise(p,n);\n    float px = triplanarNoise(p+vec3(d,0,0),n);\n    float py = triplanarNoise(p+vec3(0,d,0),n);\n    float pz = triplanarNoise(p+vec3(0,0,d),n);\n    return normalize(vec3((px-po)/d,\n                          (py-po)/d,\n                          (pz-po)/d));\n}\n\n//=== iq’s calc AO ===\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n\n\tvec3 v = normalize(vec3(0.7,-0.1,0.1));\n\tfor( int i=0; i<12; i++ )\n\t{\n\t\tfloat h = abs(sin(float(i)));\n\t\tvec3 kv = v + 2.0*nor*max(0.0,-dot(nor,v));\n\t\tao += clamp( map(pos+nor*0.01+kv*h*0.08)*3.0, 0.0, 1.0 );\n\t\tv = v.yzx; //if( (i&2)==2) v.yz *= -1.0;\n\t}\n\tao /= 12.0;\n\tao = ao + 2.0*ao*ao;\n\treturn clamp( ao*5.0, 0.0, 1.0 );\n}\n\n//=== flame color ===\n//thanks iq..\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 hsv2rgb_trigonometric( in vec3 c )\n{\n    vec3 rgb = 0.5 + 0.5*cos((c.x*6.0+vec3(0.0,4.0,2.0))*3.14159/3.0);\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 FlameColour(float f)\n{\n\treturn hsv2rgb_smooth(vec3((f-(2.25/6.))*(1.25/6.),f*1.25+.2,f*.95));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}