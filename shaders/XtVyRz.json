{
    "Shader": {
        "info": {
            "date": "1534872305",
            "description": "Julia fractal implementation",
            "flags": 0,
            "hasliked": 0,
            "id": "XtVyRz",
            "likes": 2,
            "name": "First Julia Fractal",
            "published": 3,
            "tags": [
                "fractaljulia"
            ],
            "usePreview": 0,
            "username": "rodousse",
            "viewed": 508
        },
        "renderpass": [
            {
                "code": "#define max_iteration 1000\n\n/**\n* Thanks to wikipedia ! \n* https://en.wikipedia.org/wiki/Julia_set\n**/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = (uv * vec2(3.5,2.0)) - vec2(1.8,1.0);\n    vec2 z;\n    vec2 c;\n    float xtemp;\n    float speed = 0.05f;\n    float time;\n    time = iTime + 30.0;\n    \n    z.x = uv.x;\n    z.y =  uv.y;\n    \n\tc.x = -0.835;\n    c.y = -0.2321; \n    \n    \n    c = 0.7885 * vec2(cos(time*speed),sin(time*speed));\n    int iteration = 0;\n  \n    while ((dot(z, z) < 2.0f)  &&  iteration < max_iteration) \n    {\n        xtemp = z.x*z.x - z.y*z.y;\n        z.y = 2.0*z.x*z.y  + c.y ;\n        z.x = xtemp + c.x;\n    \n        iteration = iteration + 1 ;\n    }\n  \n    if (iteration == max_iteration)\n        fragColor = vec4(0.0);\n    else\n        fragColor = vec4(10.0*float(iteration)/float(max_iteration));\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}