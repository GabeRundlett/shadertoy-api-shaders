{
    "Shader": {
        "info": {
            "date": "1720536598",
            "description": "spheres are orbiting",
            "flags": 0,
            "hasliked": 0,
            "id": "4XyXW3",
            "likes": 3,
            "name": "orbiting spheres",
            "published": 3,
            "tags": [
                "orbit"
            ],
            "usePreview": 0,
            "username": "koe1k",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "float sun1DistanceFromPlanet = 5.0;\nfloat sun1RotationSpeed = 0.5;\nfloat sun1R = 1.0;\n\nfloat sun2DistanceFromSun1 = 2.0;\nfloat sun2RotationSpeed = 1.5;\nfloat sun2R = 0.5;\n\nvec3 createSphere(vec3 spherePos, float sphereRadius, vec3 camPos, vec2 uv, bool isLightSource, vec3 color, out float tMin) {\n    vec3 rayDir = normalize(vec3(uv, -1.0));\n    vec3 oc = camPos - spherePos;\n    float b = dot(oc, rayDir);\n    float c = dot(oc, oc) - sphereRadius * sphereRadius;\n    float h = b * b - c;\n    tMin = -1.0;\n\n    if (h > 0.0) {\n        tMin = -b - sqrt(h);\n        vec3 hitPos = camPos + rayDir * tMin;\n        vec3 normal = normalize(hitPos - spherePos);\n        vec3 lightPos1 = sun1DistanceFromPlanet*vec3(sin(iTime), sin(iTime)*cos(iTime), cos(iTime));\n        vec3 lightPos2 = lightPos1 + sun2DistanceFromSun1*(vec3(sin(iTime*sun2RotationSpeed), sin(iTime*sun2RotationSpeed)*cos(iTime*sun2RotationSpeed), cos(iTime*sun2RotationSpeed)));\n        vec3 lightDir = normalize(lightPos1-lightPos2);\n        float diff = max(dot(normal, lightDir), 0.0);\n\n        if(isLightSource) {\n            diff = 1.0;\n        }\n\n        color = color * diff;\n    }\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 camPos = vec3(0.0, 0.0, 7.0);\n    \n    vec3 planetPos = vec3(sin(iTime),0.0,0.0);\n    vec3 sun1Pos = planetPos + sun1DistanceFromPlanet * vec3(sin(iTime * sun1RotationSpeed), sin(iTime * sun1RotationSpeed) * cos(iTime * sun1RotationSpeed), cos(iTime * sun1RotationSpeed));\n    vec3 sun2Pos = sun1Pos + sun2DistanceFromSun1 * (vec3(sin(iTime * sun2RotationSpeed), sin(iTime * sun2RotationSpeed) * cos(iTime * sun2RotationSpeed), cos(iTime * sun2RotationSpeed)));\n\n    float tMin1, tMin2, tMin3;\n    vec3 color1 = createSphere(planetPos, 1.0, camPos, uv, false, vec3(1.0, 0.5, 0.2), tMin1);\n    vec3 color2 = createSphere(sun1Pos, sun1R, camPos, uv, true, vec3(1.0, 0.75, 0.2), tMin2);\n    vec3 color3 = createSphere(sun2Pos, sun2R, camPos, uv, true, vec3(1.0, 0.9, 0.2), tMin3);\n\n    vec3 black = vec3(0.0);\n    float alpha = 1.0;\n\n    vec3 finalColor = vec3(0.0);\n    \n    if(tMin1 > 0.0 && (tMin1 < tMin2 || tMin2 < 0.0) && (tMin1 < tMin3 || tMin3 < 0.0))\n        finalColor = color1;\n    else if(tMin2 > 0.0 && (tMin2 < tMin3 || tMin3 < 0.0))\n        finalColor = color2;\n    else if(tMin3 > 0.0)\n        finalColor = color3;\n\n    // Adding multiple spheres orbiting around sun2\n    float numSpheres = 50.0;\n    for (float i = 0.0; i < numSpheres; i+=1.0) {\n        float ii = (i+1.0)*0.99;\n        vec3 spherePos = sun1Pos - sun2DistanceFromSun1 * (vec3(sin((iTime+ii) * sun2RotationSpeed), sin((iTime+ii) * sun2RotationSpeed) * cos((iTime+ii) * sun2RotationSpeed), cos((iTime+ii) * sun2RotationSpeed)));\n        vec3 col = 0.25*distance(spherePos, planetPos)*vec3(0.5, 0.5, 1.0);\n        if(distance(spherePos, planetPos) < 2.0) {\n            spherePos *= -1.0*distance(spherePos, planetPos);\n        }\n        \n        float tMin;\n        vec3 color = createSphere(spherePos, 0.25, camPos, uv, true, col, tMin);\n        if (tMin > 0.0 && (tMin < tMin1 || tMin1 < 0.0) && (tMin < tMin2 || tMin2 < 0.0) && (tMin < tMin3 || tMin3 < 0.0)) {\n            finalColor = color;\n            //tMin1 = tMin2 = tMin3 = -1.0; // Ensure only the closest sphere is considered for final color\n        }\n    }\n\n    fragColor = vec4(finalColor, alpha);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}