{
    "Shader": {
        "info": {
            "date": "1600700337",
            "description": "Improved version of https://www.shadertoy.com/view/3styRH, designed to more properly match https://en.wikipedia.org/wiki/Hqx",
            "flags": 0,
            "hasliked": 0,
            "id": "tsdcRM",
            "likes": 26,
            "name": "hqx upscaling filter",
            "published": 3,
            "tags": [
                "filter",
                "scale",
                "scaling",
                "upscale",
                "up",
                "hqx"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 2211
        },
        "renderpass": [
            {
                "code": "/*Copyright 2020 Ethan Alexander Shulman\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/\n\n//upscaling multiplier amount\n#define UPSCALE 10.\n\n//image mipmap level, for base upscaling\n#define ML 0\n\n//equality threshold of 2 colors before forming lines\n#define THRESHOLD .1\n\n//line thickness\nfloat LINE_THICKNESS;\n\n//anti aliasing scaling, smaller value make lines more blurry\n#define AA_SCALE (UPSCALE*1.)\n\n\n//draw diagonal line connecting 2 pixels if within threshold\nbool diag(inout vec4 sum, vec2 uv, vec2 p1, vec2 p2) {\n    vec4 v1 = texelFetch(iChannel0,ivec2(uv+vec2(p1.x,p1.y)),ML),\n        v2 = texelFetch(iChannel0,ivec2(uv+vec2(p2.x,p2.y)),ML);\n    if (length(v1-v2) < THRESHOLD) {\n    \tvec2 dir = p2-p1,\n            lp = uv-(floor(uv+p1)+.5);\n    \tdir = normalize(vec2(dir.y,-dir.x));\n        float l = clamp((LINE_THICKNESS-dot(lp,dir))*AA_SCALE,0.,1.);\n        sum = mix(sum,v1,l);\n    \treturn true;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sliderX = iMouse.x<5.?\n        \t(fract(iTime*.2)-max(0.,fract(iTime*.2)*2.-1.))*2.*iResolution.x:\n    \t\tiMouse.x;\n    vec2 ip = fragCoord/UPSCALE;\n    \n    if (fragCoord.x < sliderX) {\n        //regular nearest sampling\n    \tfragColor = texelFetch(iChannel0,ivec2(ip.x,ip.y),ML);\n        \n    } else {\n        \n        //start with nearest pixel as 'background'\n        vec4 s = texelFetch(iChannel0,ivec2(ip),ML);\n        \n        //draw anti aliased diagonal lines of surrounding pixels as 'foreground'\n        LINE_THICKNESS = .4;\n        if (diag(s,ip,vec2(-1,0),vec2(0,1))) {\n            LINE_THICKNESS = 0.3;\n            diag(s,ip,vec2(-1,0),vec2(1,1));\n            diag(s,ip,vec2(-1,-1),vec2(0,1));\n        }\n        LINE_THICKNESS = 0.4;\n        if (diag(s,ip,vec2(0,1),vec2(1,0))) {\n            LINE_THICKNESS = 0.3;\n            diag(s,ip,vec2(0,1),vec2(1,-1));\n            diag(s,ip,vec2(-1,1),vec2(1,0));\n        }\n        LINE_THICKNESS = 0.4;\n        if (diag(s,ip,vec2(1,0),vec2(0,-1))) {\n            LINE_THICKNESS = 0.3;\n            diag(s,ip,vec2(1,0),vec2(-1,-1));\n            diag(s,ip,vec2(1,1),vec2(0,-1));\n        }\n        LINE_THICKNESS = 0.4;\n        if (diag(s,ip,vec2(0,-1),vec2(-1,0))) {\n           LINE_THICKNESS = 0.3;\n         \tdiag(s,ip,vec2(0,-1),vec2(-1,1));\n            diag(s,ip,vec2(1,-1),vec2(-1,0));\n        }\n\n        fragColor = s;\n    }\n    \n    //draw slider bar\n    if (abs(fragCoord.x-sliderX) < 1.) fragColor = vec4(1,0,1,1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}