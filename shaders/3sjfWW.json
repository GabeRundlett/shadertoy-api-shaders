{
    "Shader": {
        "info": {
            "date": "1590450949",
            "description": "optimised stars generation",
            "flags": 0,
            "hasliked": 0,
            "id": "3sjfWW",
            "likes": 4,
            "name": "Stars optimised",
            "published": 3,
            "tags": [
                "stars"
            ],
            "usePreview": 0,
            "username": "tdo1",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "// Stars optimised by tdo1\n\n// This content is under the MIT License.\n\nbool isInt(float n) \n{\n   return round(n) == n;\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);\n}\n\nvec2 rand2(vec2 p)\n{\n    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); \n    return fract(sin(p) * 43758.5453);\n}\n\nfloat randomRange_float(vec2 Seed, float Min, float Max)\n{\n    float randomno =  fract(sin(dot(Seed, vec2(12.9898, 78.233)))*43758.5453);\n    return smoothstep(Min, Max, randomno);\n}\n\nbool isInPos(float size, vec2 pos, vec2 center, out float distPerc)\n{\n    distPerc = length(center - pos);\n    if(distPerc < size) \n    { \t\n        distPerc = distPerc / size;\n        return true;\n    }\n    return false;\n}\n\nvec4 starBlur(float dist)\n{\n    if(dist > 0.3)\n    {\n        return  vec4(1.0-dist); \n    }\n    else\n    {\n        return vec4(1.0); \n    }\n}\n\nvec4 generateStars(vec2 posInUniverse, float rangeColumn,float sizeForZoneStars, float speed, float seedModifierx, float seedModifiery)\n{\n    speed = trunc(speed);\n    vec2 offset = vec2(speed,speed);\n    posInUniverse += offset;\n    posInUniverse.x += seedModifierx;\n    posInUniverse.y += seedModifiery;\n   \tfloat columnPosx = abs(posInUniverse.x) / sizeForZoneStars;\n    float colomnIndexx = trunc(columnPosx);  \n    float distFromX = columnPosx - colomnIndexx;\n    bool inColumx = distFromX <= rangeColumn;\n    \n    float columnPosy = abs(posInUniverse.y) / sizeForZoneStars;\n    float colomnIndexy = trunc(columnPosy);  \n    float distFromY = columnPosy - colomnIndexy;\n    bool inColumy = distFromY <= rangeColumn;\n    \n    if(inColumx && inColumy)\n    {\n        //return vec4(1.0); \n        \n        float randomNumber = randomRange_float(vec2((colomnIndexx+seedModifierx), (colomnIndexy+seedModifiery)), 0.0f, 1.0f);\n        \n        vec2 centerCase = vec2(colomnIndexx+(rangeColumn/2.0), colomnIndexy+(rangeColumn/2.0));\n        vec2 posInCase = vec2(columnPosx, columnPosy);\n        float distanceFromCenter = -1.0;\n        \n        if(randomNumber >= 0.9965f && isInPos(0.09, posInCase, centerCase, distanceFromCenter))\n        {\n            return starBlur(distanceFromCenter);\n        }\n        else if(randomNumber >= 0.990f && isInPos(0.03, posInCase, centerCase, distanceFromCenter))\n        {\n           return starBlur(distanceFromCenter);\n        }\n        else if(randomNumber >= 0.97f && isInPos(0.02, posInCase, centerCase, distanceFromCenter))\n        {\n           return starBlur(distanceFromCenter);\n        }\n        else if(randomNumber >= 0.95f && isInPos(0.01, posInCase, centerCase, distanceFromCenter))\n        {\n           return vec4(1.0); \n        }\n    }\n    return vec4(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n \tvec2 posInUniverse = fragCoord;\n    fragColor = generateStars(posInUniverse, 0.25f, 300.0, iTime*100.0, 0.0, 0.0);\n    if(fragColor == vec4(0.0))\n    {\n        fragColor = generateStars(posInUniverse, 0.25f, 200.0, iTime*50.0, 150.0, 0.0);\n        if(fragColor == vec4(0.0))\n        {\n \t\t\tfragColor = generateStars(posInUniverse, 0.25f, 100.0, iTime*25.0, 300.0, 580.0);\n        }\n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}