{
    "Shader": {
        "info": {
            "date": "1684967375",
            "description": "Welding your screen with some pseudorandom sparks. \nPath can be changed in originShift() in Buffer A.",
            "flags": 32,
            "hasliked": 0,
            "id": "dtdSRn",
            "likes": 17,
            "name": "Screen Welding",
            "published": 3,
            "tags": [
                "2d",
                "particles",
                "buffer"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "// Screen Welding 0.6.230524 by QuantumSuper\n// pseudorandom particles leaving traces on a buffer\n// \n\nvoid mainImage( out vec4 col, in vec2 fC){\n    col = getDat( iChannel0, fC);\n    col.rgb *= .5 + .5*abs( cos( .06*iTime + PI/vec3(.5,2.,4.) - PI/3.)); //color shift \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// BUFFER A (0.61) of Screen Welding by QuantumSuper\n// draw points on lots of different parabolas & use unclamped buffer as heatmap history\n// \n\n#define numOfParts 150.\n#define aTime iTime/64.\n\nfloat hash21(vec2 p){ //pseudorandom generator, see The Art of Code on youtu.be/rvDo9LvfoVE\n    p = fract(p*vec2(13.81, 741.76));\n    p += dot(p, p+42.23);\n    return fract(p.x*p.y);\n}\n\nvec2 parametricParabola(float t, vec2 seed){\n    float d = .1 + 3.*hash21(.678*seed.yx); //y-stretch\n    float c = sign(t) * (.01 + 2.*hash21(.987*seed)); //maximum shift\n    float b = abs(c) + hash21(.285*seed) + .001; //x-stretch\n    float a = c*c/b/b; //origin height\n    t -= c/b;\n    return vec2( b*t+c, (a-t*t)*d);\n}\n\nfloat lightUp(float dist, vec2 modif){ //light around dist=0\n    return 6.*smoothstep(.025*modif.x, .0, dist)+clamp(.00008/dist/dist,.0,1.)+(1.+modif.y)*.0001/dist; //combined semi-hard shape with semi-soft & soft glow\n}\n\nvec2 originShift(){ //coordinate shift to create shapes\n    vec2 s;\n    float bTime = iTime/8.;\n    \n    if (fract(aTime)<.25)\n        s = (fract(bTime)<.5)? //L\n            vec2( .5, 2.*fract(2.*bTime)-1.):\n            vec2( fract(-2.*bTime)-.5, 1);\n            \n    else if (fract(aTime)<.5)\n        s = vec2(sin(2.*PI*bTime),cos(2.*PI*bTime)); //circle\n        \n    else if (fract(aTime)<.75)\n        s = (fract(bTime)<.5)? //v\n            vec2(.5, 1) * (2.*fract(2.*bTime)-1.) - vec2(.5,0):\n            vec2(.5,-1) * (2.*fract(2.*bTime)-1.) + vec2(.5,0);\n            \n    else\n        s = (fract(bTime)<.4)? //E\n            vec2( .5, 2.*fract(bTime)/.4-1.):\n            vec2( fract(-bTime/.2)-.5, -floor((fract(bTime)-.6)/.2));\n\n    return s;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\n    // View definition\n    vec2 uv = 3. * (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y); //long edge -3 to 3, square aspect ratio       \n    uv += originShift(); //shape definitions\n\n    // Draw particles\n    float mySpeed, \n          myTime;\n    vec2 myMod,\n         seed = vec2(iTime);\n    vec3 myColor,\n         col = vec3(0);   \n    \n    for (float n=0.;n++<numOfParts;){\n        myTime = iTime/2. + n/numOfParts;\n        seed = vec2(ceil(myTime)*.123,ceil(myTime)*.456);\n        mySpeed = sign(.5-hash21(seed+.123*n)) * (1.5+2.5*hash21(seed*n*.456));\n        myMod = vec2( hash21(seed/n*.123), 5.+25.*hash21(seed/n*.456));\n        myColor = fract(-myTime) * vec3( 1.+fract(myTime), .5+.6*fract(-myTime), .2+fract(-myTime)*fract(-myTime));\n        col += myColor * lightUp( length( uv - parametricParabola( .7*fract(myTime)*mySpeed, seed*n)), myMod);\n\t} \n    \n    // Add buffer\n    vec3 amp = (fract(aTime*4.)<.99)? //zoom animation\n        getDat( iChannel0, fragCoord).rgb: //read buffer\n        getDat( iChannel0, fragCoord*1.04+iResolution.xy*(1.-1.04)/2.).rgb; //read scaled buffer\n    col += 1.5/numOfParts *  amp*amp*amp; //overlay on image\n    \n    // Utility\n    //col += step(fract(uv.x)-.005,.01)+step(fract(uv.y)-.005,.01); //grid\n\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// COMMON (0.1) of Screen Welding by QuantumSuper\n// \n// \n\n#define PI 3.14159265359\n\n#define getDat(buf,addr) texelFetch( buf, ivec2(addr), 0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}