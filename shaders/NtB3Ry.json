{
    "Shader": {
        "info": {
            "date": "1624082758",
            "description": "vornoi distribution",
            "flags": 0,
            "hasliked": 0,
            "id": "NtB3Ry",
            "likes": 2,
            "name": "Vornoi CELLS",
            "published": 3,
            "tags": [
                "noise",
                "vornoi"
            ],
            "usePreview": 0,
            "username": "Sp3cim4n",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "\n#define SEED_FIXED 39.3\n#define SEED_ANIMATED floor(iTime + 39.0)\n#define SEED SEED_ANIMATED\n\n#define POINT_COUNT 50\n#define VISUALIZE_POINT true\n#define VERY_LARGE_NUMBER 999999999.\n\n\n\n\n\nfloat fit01(float val, float a, float b)\n{\n    return a+val*(b-a);\n}\n\nvec2 fit01(vec2 val, float a, float b)\n{\n    return vec2(fit01(val.x,a,b), fit01(val.y,a,b));\n}\n\n\n\n\n\n//bad rng..\nfloat r11(float seed)\n{\n    return fract(sin(499.0*seed + 199.0)*5869.0);\n}\n\nvec2 r12(float seed)\n{\n    float x = fract(sin(509.0*seed)*197.0);\n    float y = fract(sin(487.0*seed + 991.0)*991.0);\n    return vec2(x,y);\n}\n\nvec3 r13(float seed)\n{   \n    float x = fract(sin(277.0*seed)*613.0);\n    float y = fract(sin(97.0*seed + 607.0)*394.0);\n    float z = fract(sin(349.0*seed + 431.0)*124.0);\n    return vec3(x,y,z);\n}\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n    //initialize points\n    vec2 points[POINT_COUNT];\n    for(int i=0; i<POINT_COUNT; i++)\n    {\n        float aspect = iResolution.x/iResolution.y;\n        points[i] = r12(float(i) * SEED);\n        points[i].x = fit01(points[i].x, -aspect,aspect);\n        points[i].y = fit01(points[i].y, -1.0,1.0);\n    }\n    \n    //find closest point\n    float closestPointDistance = VERY_LARGE_NUMBER;\n    int closestPointIndex = 0;\n    for(int i=0; i<POINT_COUNT; i++)\n    {\n        vec2 pPos = points[i];\n        float d = length(pPos - uv);\n        if(d < closestPointDistance)\n        {\n            closestPointDistance = d;\n            closestPointIndex = i;\n        }\n    }\n    \n    //random color for each cell\n    vec3 col = r13(float(closestPointIndex) * SEED);\n\n    if(VISUALIZE_POINT)\n    {\n        float pointVisualize = 0.;\n        for(int i=0; i<POINT_COUNT; i++)\n        {\n            vec2 pPos = points[i];\n            float d = length(pPos - uv);\n            pointVisualize += smoothstep(0.01,0.009, d);\n        }\n        col *= (1.0-pointVisualize);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}