{
    "Shader": {
        "info": {
            "date": "1569655530",
            "description": "Revised version of https://www.shadertoy.com/view/Wst3WS for compile-time efficiency: distance from point p to object A & B are A(p) & B(p), respectively; this algorithm tries to minimize A(p)+B(p) to detect intersection of A&B in O(1).",
            "flags": 32,
            "hasliked": 0,
            "id": "3sGGzh",
            "likes": 1,
            "name": "Fast Collision Detectrons",
            "published": 3,
            "tags": [
                "collision",
                "ray",
                "detection",
                "distance",
                "field",
                "estimator",
                "march",
                "detectron"
            ],
            "usePreview": 1,
            "username": "voz",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "\n\n//main march\nvec3 marchScene(vec3 ro, vec3 rd) {\n    \n    vec3 pc = vec3(0.0); //returned pixel colour\n    float d = 0.0; //distance marched\n    vec3 rp = vec3(0.0); //ray position\n    vec3 lp = (vec3(5.0, 8.0, -3.0)); //light position\n   \tfloat ns;\n    for (int i = 0; i <32; i++) {\n        rp = ro + rd * d;\n\n        ns = dfScene(rp, iChannel0);\n\n        d += ns;\n        if(d > FAR)\n        {\n            break;\n        }\n        \n    }\n    vec3 sky_color = vec3(.35, .35, .85);\n    float fog = smoothstep(.75, .9, d/FAR);\n    \n    vec3 p = rp;\n    vec3 rld = normalize(lp-p);//revers light direction\n    \n   \tfloat shadow = 1.;\n    #ifdef SHOW_SHADOWS\n    d = 10./MAX_DIM;\n    if(ns < 100./MAX_DIM)\n    {\n        for (int i = 0; i <32; i++) {\n            p = rp + rld * d;\n\n\n            d += dfScene(p, iChannel0);\n            if(d > FAR)\n            {\n                break;\n            }\n\n        }\n        \n        if(dfScene(p, iChannel0) < 10./MAX_DIM)\n        {\n            shadow = .5;\n        }\n    }\n    #endif\n    \n    vec3 n = sceneNormal(rp, iChannel0);\n    vec3 sc = ns < 100./MAX_DIM ? vec3(.5, .125, .06)*shadow : vec3(0.); //surface colour\n\n    float diff = max(dot(n, normalize(lp)), 0.0); //diffuse\n    pc = sc * 0.5 + diff * sc ;\n    float spe = pow(max(dot(reflect(rd, n), normalize(lp)), 0.), 16.); //specular.\n    pc = (pc + spe * vec3(1.0))*(1.-fog)+fog*sky_color;\n    \n    return pc;\n}\n \n#ifdef SHOW_INTERSECTION\nvec3 marchIntersections(vec3 ro, vec3 rd) {\n\n    vec3 pc = vec3(0.0); //returned pixel colour\n    float d = 0.0; //distance marched\n    vec3 rp = vec3(0.0); //ray position\n    vec3 lp = normalize(vec3(5.0, 8.0, -3.0)); //light position\n   \tfloat nearest;\n    vec3 n;\n    \n    int j, k;\n    float temp;\n    \n    for (int i = 0; i <32; i++) {\n        rp = ro + rd * d;\n\n        nearest = 1E32;\n        \n        j = OBJECT_0;\n        k = OBJECT_1;\n        \n        temp = dfIntersection(rp, iChannel0, float(j)+.5, float(k)+.5);\n        if(temp < nearest)\n        {\n            nearest = temp;\n            n = intersectionNormal(rp, iChannel0, float(j)+.5, float(k)+.5);\n        }\n        \n        #ifdef SHOW_DETECTRONS\n\n            j = OBJECT_0;\n            k = OBJECT_1;\n\n            temp = dfDetectron(rp, iChannel1, float(j)+.5, float(k)+.5);\n            if(temp < nearest)\n            {\n                nearest = temp;\n                n = detectronNormal(rp, iChannel1, float(j)+.5, float(k)+.5);\n            }\n\n            j = OBJECT_1;\n            k = OBJECT_0;\n\n            temp = dfDetectron(rp, iChannel1, float(j)+.5, float(k)+.5);\n            if(temp < nearest)\n            {\n                nearest = temp;\n                n = detectronNormal(rp, iChannel1, float(j)+.5, float(k)+.5);\n            }\n        \n        #endif\n            \n        d += nearest;\n        if(d > FAR)\n        {\n            break;\n        }\n        \n    }\n    vec3 sky_color = vec3(0.);\n    float fog = smoothstep(.75, .9, d/FAR);\n    \n\n    vec3 sc = nearest < 100./MAX_DIM ? vec3(0., .875, .0) : vec3(0.); //surface colour\n\n    float diff = max(dot(n, lp), 0.0); //diffuse\n    pc = sc * 0.5 + diff * sc ;\n    float spe = pow(max(dot(reflect(rd, n), lp), 0.), 16.); //specular.\n    pc = (pc + spe * vec3(1.0))*(1.-fog)+fog*sky_color;\n    \n    return pc;\n}\n#endif\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    resolution = iResolution;\n\n        \n    //coordinate system\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec2 uv = xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //camera\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ro = vec3(0.0, 0., -PI)*2.;\n    \n    float movement = iTime;\n    \n    ro.yz *= rot(-(sin(movement)*.5+.5));\n    rd.yz *= rot(-(sin(movement)*.5+.5));\n    \n    ro.xz *= rot(-movement);\n    rd.xz *= rot(-movement);\n    \n    fragColor = vec4(marchScene(ro, rd), 1.0);    \n    #ifdef SHOW_INTERSECTION\n    fragColor += vec4(marchIntersections(ro, rd), 1.0);    \n    #endif\n    //fragColor = sin(texture(iChannel0, xy))*.5+.5;\n    //fragColor = sin(texture(iChannel1, xy))*.5+.5;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\n|--------------------------------------NUM_TUPLES-----------------------------------|\n ____________________________________________________________________________________     ___\n|Object #0 out of NUM_OBJECTS                                                             |\n|____________________________________________________________________________________     |\n|\t\t\t|Rotation\t|Linear     |Angular\t|Linear     |Angular\t|Objet\t    |     |\n|Position   |Quaternion |Velocity   |Velocity\t|Accel.     |Accel.  \t|Info.      |     |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|     |\n|r |g | b| a| r|g | b| a|r |g | b| a|r |g | b| a|r |g | b| a|r |g | b| a|xd|yd|zd|t |     |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|     |\n|x | y| z|  | x| y| z| w|vx|vy|vz|  |wx|wy|wz|  |ax|ay|az|  |ax|ay|az|  |  |  |  |  |     |\n|___________|___________|___________|___________|___________|___________|__|__|__|__|     |\n|                                                                                   |     |\n|....                                                                               |     |\n|___________________________________________________________________________________| NUM_OBJECTS\n|Object N out of NUM_OBJECTS                                                        |     |\n|____________________________________________________________________________________     |\n|\t\t\t|Rotation\t|Linear     |Angular\t|Linear     |Angular\t|Objet\t    |     |\n|Position   |Quaternion |Velocity   |Velocity\t|Accel.     |Accel.  \t|Info.      |     |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|     |\n|r |g | b| a| r|g | b| a|r |g | b| a|r |g | b| a|r |g | b| a|r |g | b| a|xd|yd|zd|t |     |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|     |\n|x | y| z|  | x| y| z| w|vx|vy|vz|  |wx|wy|wz|  |ax|ay|az|  |ax|ay|az|  |  |  |  |  |     |\n|-----------|-----------|-----------|-----------|-----------|-----------|-----------|    _|_\n\n _______________________\n|Objet\t                |\n|Information            |\n|-----------------------|\n|x-dim|y-dim|z-dim|type*|\n|-----|-----|-----|-----|\n\n*/\n\n//#define SHOW_INTERSECTION\n//#define SHOW_SHADOWS\n//#define SHOW_DETECTRONS\n//#define FIT_SLOT\n//#define FACE_COLLISION\n//#define EDGE_COLLISION\n\n#define RESET_AFTER 180\n\n#define NUM_TUPLES 7.\n#define NUM_OBJECTS 2\n\n#define OBJECT_0 0\n#define OBJECT_1 1\n\n#define NUM_OBJECT_TYPES 3\n//#define OBJECT_TYPE_CUBE 0.\n//#define OBJECT_TYPE_SLOT 1.\n#define OBJECT_TYPE_BOWL 0.\n\n#define TRANSLATION (.5)\n#define ROTATION (1.5)\n#define VELOCITY (2.5)\n#define OMEGA (3.5)\n#define ACCELERATION (4.5)\n#define ALPHA (5.5)\n#define OBJECT (6.5)\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define MAX_DIM (max(resolution.x,resolution.y))\n#define FAR (20.)\n#define LINE (float(__LINE__))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\nvec3 resolution;\n\nmat2 rot(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    \n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return length(max(d,0.0))\n        + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdSphere( vec3 p, float r )\n{\n  return length(p)-r;\n}\n\nvec4 qnormalize(vec4 q)\n{\n    return q / sqrt(dot(q, q));\n}\n\nvec4 qsetAA(vec3 axis, float angle)\n{\n    vec4 q;\n    float cos_a = cos( angle / 2.0 );\n    float sin_a = sin( angle / 2.0 );\n\n    q.w = cos_a;\n    q.x = axis.x * sin_a;\n    q.y = axis.y * sin_a;\n    q.z = axis.z * sin_a;\n    return q;\n}\n\nvec4 qgetAA(in vec4 q)\n{\n    vec4 aa;\n    float scale = sqrt(q.x * q.x + q.y * q.y + q.z * q.z);\n    aa.x = q.x / scale;\n    aa.y = q.y / scale;\n    aa.z = q.z / scale;\n    aa.w = acos(q.w) * 2.0;\n    return aa;\n}\n\nvec4 qmul( in vec4 a, in vec4 b)\n{\n    vec4 q;\n    q.w = a.w*b.w - a.x*b.x - a.y*b.y - a.z*b.z;\n    q.x = a.x*b.w + a.w*b.x - a.z*b.y + a.y*b.z;\n    q.y = a.y*b.w + a.z*b.x + a.w*b.y - a.x*b.z;\n    q.z = a.z*b.w - a.y*b.x + a.x*b.y + a.w*b.z;\n    return q;\n\n}\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( vec3 o )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t o.x, o.y, o.z,   1.0 );\n}\n/*\nmat4 inverse( in mat4 m )\n{\n\treturn mat4(\n        m[0][0], m[1][0], m[2][0], 0.0,\n        m[0][1], m[1][1], m[2][1], 0.0,\n        m[0][2], m[1][2], m[2][2], 0.0,\n        -dot(m[0].xyz,m[3].xyz),\n        -dot(m[1].xyz,m[3].xyz),\n        -dot(m[2].xyz,m[3].xyz),\n        1.0 );\n}*/\n\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat dfObject(vec3 z0, sampler2D data, float i){\n\tvec4 z=vec4(z0,1.0);\n    vec4 obj = texture(data, vec2(OBJECT,i)/resolution.xy);\n    vec4 aa = qgetAA(texture(data, vec2(ROTATION,i)/resolution.xy));\n    mat4 rot = rotationAxisAngle(aa.xyz, aa.w); \n    mat4 tra = translate(texture(data, vec2(TRANSLATION,i)/resolution.xy).xyz );\n    mat4 txi = tra * rot; \n    mat4 txx = inverse( txi );\n\n    float dB;\n    /*\n    if(obj.w == OBJECT_TYPE_CUBE)\n        dB=sdBox((txx*z).xyz, obj.xyz); \n    if(obj.w == OBJECT_TYPE_BOWL)\t*/\n\n    {\n        float bowl_size = max(max(obj.x, obj.y), obj.z)*1.5;\n        mat4 txx2 = inverse(txi*translate(vec3(0., 0.,bowl_size/2.)));\n        dB=opSubtraction(sdSphere((txx2*z).xyz, bowl_size), sdSphere((txx*z).xyz, bowl_size)); \n    }\n    /*\n    if(obj.w == OBJECT_TYPE_SLOT)\n    {\n        mat4 txx2 = inverse(txi*translate(vec3(0., 0., obj.z)));\n        dB=opSubtraction(sdBox((txx2*z).xyz, obj.xyz/vec3(2.,2.,1.)), sdBox((txx*z).xyz, obj.xyz)); \n    }*/\n    \n    return dB;\n}\nvec3 objectPointVelocity(vec3 p, sampler2D data, float obj_index)\n{\n    vec4 translation = texture(data, vec2(TRANSLATION, obj_index)/resolution.xy);\n    vec4 velocity = texture(data, vec2(VELOCITY, obj_index)/resolution.xy);\n    vec4 omega = texture(data, vec2(OMEGA, obj_index)/resolution.xy);\n    \n    vec3 rp = p - translation.xyz;\n    \n    return cross(omega.xyz, rp)+velocity.xyz;\n}\nfloat dfDetectron(vec3 z0, sampler2D data, float i, float j){\n\tvec4 z=vec4(z0,1.0);\n    vec4 det = texture(data, vec2(i,j)/resolution.xy);\n    mat4 tra = translate(det.xyz);\n    mat4 txx = inverse( tra );\n\n    float dB=sdSphere((txx*z).xyz, det.w); \n    \n    return dB;\n}\n\nvec3 detectronNormal(vec3 p, sampler2D data, float i, float j) { \n    vec2 e = vec2(5.0 / resolution.y, 0);\n\tfloat d1 = dfDetectron(p + e.xyy, data, i, j), d2 = dfDetectron(p - e.xyy, data, i, j);\n\tfloat d3 = dfDetectron(p + e.yxy, data, i, j), d4 = dfDetectron(p - e.yxy, data, i, j);\n\tfloat d5 = dfDetectron(p + e.yyx, data, i, j), d6 = dfDetectron(p - e.yyx, data, i, j);\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\nfloat dfIntersection(vec3 z0, sampler2D data, float objA, float objB){\n    return max(dfObject(z0, data, objA), dfObject(z0, data, objB));\n}\nfloat dfSmoothIntersection(vec3 z0, sampler2D data, float objA, float objB){\n    return (max(dfObject(z0, data, objA), dfObject(z0, data, objB)));\n}\n\nvec3 objectNormal(vec3 p, sampler2D data, float obj) { \n    vec2 e = vec2(5.0 / resolution.y, 0);\n\tfloat d1 = dfObject(p + e.xyy, data, obj), d2 = dfObject(p - e.xyy, data, obj);\n\tfloat d3 = dfObject(p + e.yxy, data, obj), d4 = dfObject(p - e.yxy, data, obj);\n\tfloat d5 = dfObject(p + e.yyx, data, obj), d6 = dfObject(p - e.yyx, data, obj);\n\tfloat d = dfObject(p, data, obj) * 2.0;\t\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n\nvec3 intersectionNormal(vec3 p, sampler2D data, float objA, float objB) { \n    vec2 e = vec2(5.0 / resolution.y, 0);\n\tfloat d1 = dfIntersection(p + e.xyy, data, objA, objB), d2 = dfIntersection(p - e.xyy, data, objA, objB);\n\tfloat d3 = dfIntersection(p + e.yxy, data, objA, objB), d4 = dfIntersection(p - e.yxy, data, objA, objB);\n\tfloat d5 = dfIntersection(p + e.yyx, data, objA, objB), d6 = dfIntersection(p - e.yyx, data, objA, objB);\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\nfloat halfPlaneDistance(vec3 p, sampler2D data, float objA, float objB) { \n    \n    float dfA = dfObject(p, data, objA);\n    float dfB = dfObject(p, data, objB);\n    return ((dfA)+(dfB))/2.-min(dfA, dfB);\n}\nvec3 halfPlaneNormal(vec3 p, sampler2D data, float objA, float objB) { \n    vec2 e = vec2(5.0 / resolution.y, 0);\n\tfloat d1 = halfPlaneDistance(p + e.xyy, data, objA, objB), d2 = halfPlaneDistance(p - e.xyy, data, objA, objB);\n\tfloat d3 = halfPlaneDistance(p + e.yxy, data, objA, objB), d4 = halfPlaneDistance(p - e.yxy, data, objA, objB);\n\tfloat d5 = halfPlaneDistance(p + e.yyx, data, objA, objB), d6 = halfPlaneDistance(p - e.yyx, data, objA, objB);\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\nfloat dfScene(vec3 z0, sampler2D data){\n\tvec4 z=vec4(z0,1.0);\n    float d = 1E32;\n    \n    int i = OBJECT_0;\n    \n    float dB = dfObject(z0, data, float(i)+.5);\n    if(dB < d)\n    {\n        d = dB;\n    }\n    \n    i = OBJECT_1;\n    \n    dB = dfObject(z0, data, float(i)+.5);\n    if(dB < d)\n    {\n        d = dB;\n    }\n    \n    return d;\n}\nvec3 sceneNormal(vec3 p, sampler2D data) { \n    vec2 e = vec2(5.0 / resolution.y, 0);\n\tfloat d1 = dfScene(p + e.xyy, data), d2 = dfScene(p - e.xyy, data);\n\tfloat d3 = dfScene(p + e.yxy, data), d4 = dfScene(p - e.yxy, data);\n\tfloat d5 = dfScene(p + e.yyx, data), d6 = dfScene(p - e.yyx, data);\n\tfloat d = dfScene(p, data) * 2.0;\t\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    resolution = iResolution;\n    vec2 xy = fragCoord/iResolution.xy;\n\n    float obj_y = fragCoord.y;\n    int obj_index = int(obj_y);\n\n    if(obj_index > NUM_OBJECTS)\n        return;\n    \n    vec4 translation = texture(iChannel0, vec2(TRANSLATION, obj_y)/resolution.xy);\n    vec4 rotation = texture(iChannel0, vec2(ROTATION, obj_y)/resolution.xy);\n    vec4 velocity = texture(iChannel0, vec2(VELOCITY, obj_y)/resolution.xy);\n    vec4 omega = texture(iChannel0, vec2(OMEGA, obj_y)/resolution.xy);\n    vec4 acceleration = texture(iChannel0, vec2(ACCELERATION, obj_y)/resolution.xy);\n    vec4 alpha = texture(iChannel0, vec2(ALPHA, obj_y)/resolution.xy);\n    vec4 object = texture(iChannel0, vec2(OBJECT, obj_y)/resolution.xy);\n\n    vec4 z;\n\n    if(iFrame%RESET_AFTER == 0)\n    {\n\n        if(obj_index == 0)\n        {\n            translation = vec4(0., -2., 0., 0.);\n            rotation = vec4(1., 0., 0., 1.);\n            rotation = qnormalize(rotation);\n            velocity = vec4(0.);\n            omega = vec4(0.);\n            acceleration = vec4(0.);\n            alpha = vec4(0.);\n            object = vec4(3., 3., 2., float((obj_index+iFrame+int(LINE+iTime*1234.1234))%(NUM_OBJECT_TYPES)));\n        }\n        else\n        {\n            translation = vec4(normalize(sin(vec2(LINE/PI,\n                                                  LINE/GR)*obj_y+float(iFrame))*E*GR),float(obj_index)*4.-2., 0.).xzyw\n                #ifdef FIT_SLOT\n                *min(max(float(obj_index-1), 0.), 1.)\n                #endif\n                ;\n            +vec4(0., 3., 0., 0.);\n\n            rotation = sin((vec4(LINE/PI,\n                                 LINE/GR,\n                                 LINE/E,\n                                 LINE/E/GR)+obj_y+float(iFrame))*PI*E*GR);\n            //rotation = qsetAA(vec3(0., 1., 0.), PI/2.);\n            #ifdef EDGE_COLLISION\n            rotation = qnormalize(qsetAA(vec3(1., 0., 0.), PI/4.));\n            #endif\n            rotation = qnormalize(rotation);\n\n            velocity = sin((vec4(LINE/E,\n                                 LINE/GR,\n                                 LINE/PI,\n                                 0.)+obj_y+float(iFrame))/E)*0.;\n            omega = sin((vec4(LINE/GR,\n                              LINE/PI,\n                              LINE/E,\n                              0.)+obj_y+float(iFrame))*PI*E*GR)\n                #ifdef FIT_SLOT\n                *min(max(float(obj_index-1), 0.), 1.)\n                #endif\n                #ifdef FACE_COLLISION\n                *vec4(0., 1., 0., 0.)\n                #endif\n                #ifdef EDGE_COLLISION\n                *vec4(0., 1., 0., 0.)\n                #endif\n                ;\n            acceleration = vec4(0., -3.2, 0., 0.);\n            alpha = vec4(0.);\n            object = vec4(.99, .99, .99, float((obj_index+int(LINE*1234.4321+float(iFrame)*321.123+iTime*1234.1234))%(NUM_OBJECT_TYPES)));\n        }\n    }\n    else\n    {\n\n        int i = OBJECT_0;\n\n        if(i != obj_index)\n        {\n            vec3 detectron_a = texture(iChannel1, vec2(obj_y, ((float(i))+.5))/resolution.xy).xyz;\n            float dfA = dfObject(detectron_a, iChannel0, obj_y);\n            float dfB = dfObject(detectron_a, iChannel0, float(i)+.5);\n            if( dfA <= 0. && dfB < 0.)\n            {\n                velocity *= vec4(0.);\n                omega *= vec4(0.);\n                acceleration *= vec4(0.);\n                alpha *= vec4(0.);       \n            }\n            vec3 detectron_b = texture(iChannel1, vec2(((float(i))+.5),obj_y)/resolution.xy).xyz;\n            dfA = dfObject(detectron_b, iChannel0, obj_y);\n            dfB = dfObject(detectron_b, iChannel0, float(i)+.5);\n            if( dfA < 0. && dfB <= 0.)\n            {\n                velocity *= vec4(0.);\n                omega *= vec4(0.);\n                acceleration *= vec4(0.);\n                alpha *= vec4(0.);       \n            }\n        }\n\n        i = OBJECT_1;\n\n        if(i != obj_index)\n        {\n            vec3 detectron_a = texture(iChannel1, vec2(obj_y, ((float(i))+.5))/resolution.xy).xyz;\n            float dfA = dfObject(detectron_a, iChannel0, obj_y);\n            float dfB = dfObject(detectron_a, iChannel0, float(i)+.5);\n            if( dfA <= 0. && dfB < 0.)\n            {\n                velocity *= vec4(0.);\n                omega *= vec4(0.);\n                acceleration *= vec4(0.);\n                alpha *= vec4(0.);       \n            }\n            vec3 detectron_b = texture(iChannel1, vec2(((float(i))+.5),obj_y)/resolution.xy).xyz;\n            dfA = dfObject(detectron_b, iChannel0, obj_y);\n            dfB = dfObject(detectron_b, iChannel0, float(i)+.5);\n            if( dfA < 0. && dfB <= 0.)\n            {\n                velocity *= vec4(0.);\n                omega *= vec4(0.);\n                acceleration *= vec4(0.);\n                alpha *= vec4(0.);       \n            }\n        }\n    }\n    if(floor(fragCoord.x) < TRANSLATION)//Translation\n    {\n        //Translate based on velocity:\n        z = ((translation)+(velocity)*iTimeDelta);\n    }\n    else if(floor(fragCoord.x) < ROTATION)//Rotation\n    {\n        //Rotate based on Omega:\n        omega += alpha*iTimeDelta;\n        float angular_velocity = length(omega.xyz);\n        if(angular_velocity < .01)\n            angular_velocity = 1.;\n        z = qnormalize(qmul(rotation,qnormalize(qsetAA((omega.xyz)/angular_velocity, angular_velocity*iTimeDelta))));\n    }\n    else if(floor(fragCoord.x) < VELOCITY)//Velocity\n    {\n        //Update velocity based on accelleration\n        velocity += acceleration*iTimeDelta;\n        z = velocity;\n    }\n    else if(floor(fragCoord.x) < OMEGA)//Angular Velocity\n    {\n        omega += alpha*iTimeDelta;\n        z = omega;\n    }\n    else if(floor(fragCoord.x) < ACCELERATION)//Acceleration\n    {\n        //Do nothing.\n        z = acceleration;\n    }\n    else if(floor(fragCoord.x) < ALPHA)//Alpha\n    {\n        //Do nothing.\n        z = alpha;\n    }\n    else if(floor(fragCoord.x) < OBJECT)//Object\n    {\n        //Do nothing.\n        z = object;\n    }\n\n    fragColor = z;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    resolution = iResolution;\n    vec2 xy = fragCoord/iResolution.xy;\n\n    float obj_x = fragCoord.x;\n    float obj_y = fragCoord.y;\n    float x_index = obj_x;\n    float y_index = obj_y;\n\n    if(int(x_index) > NUM_OBJECTS || \n       int(y_index) > NUM_OBJECTS)\n        return;\n    \n    vec4 a_translation = texture(iChannel0, vec2(TRANSLATION, obj_x)/resolution.xy);\n    vec4 b_translation = texture(iChannel0, vec2(TRANSLATION, obj_y)/resolution.xy);\n\n    vec4 detectron = texture(iChannel1, vec2(obj_x, obj_y)/resolution.xy);\n\n    vec3 rp = (detectron.xyz);//+a_translation.xyz+b_translation.xyz)/3.;//(detectron.xyz+ (b_detectron.xyz))/2.;\n    int directions = 6;\n    int iterations = 4;\n\n    float dfA = dfObject(rp, iChannel0, x_index);\n    float dfB = dfObject(rp, iChannel0, y_index);\n    rp = rp + objectPointVelocity(rp, iChannel0, x_index);\n    for(int k = 0; k < iterations; k++)\n    {\n        for(int j = 0; j < directions; j++)\n        {\n            float s = float(j*2/directions)*2.-1.;\n            vec3 e = s*vec3(max(float((j+2)%3)-1., 0.),\n                            max(float((j+1)%3)-1., 0.),\n                            max(float((j+0)%3)-1., 0.));\n\n            e /= MAX_DIM;\n            float a1 = dfObject(rp, iChannel0, x_index);\n            float b1 = dfObject(rp, iChannel0, y_index);\n            \n            float a2 = dfObject(rp + e, iChannel0, x_index);\n            float b2 = dfObject(rp + e, iChannel0, y_index);\n            \n            if(a2+b2 <= a1+b1)\n                rp = normalize(e)*max(a1, b1)+rp;\n        }\n    \n        \n    float hpA = halfPlaneDistance(rp, iChannel0, x_index, y_index);\n    vec3 hpN = halfPlaneNormal(rp, iChannel0, x_index, y_index);\n    rp = -hpA*hpN+rp;\n    \n    dfA = dfObject(rp, iChannel0, x_index);\n    dfB = dfObject(rp, iChannel0, y_index);\n    vec3 nI = intersectionNormal(rp, iChannel0, x_index, y_index);\n    rp = -nI*dfA+rp;\n        \n    dfA = dfObject(rp, iChannel0, x_index);\n    vec3 nA = objectNormal(rp, iChannel0, x_index);\n    rp = -nA*dfA+rp;\n\t}\n    \n    dfA = dfObject(rp, iChannel0, x_index);\n    dfB = dfObject(rp, iChannel0, y_index);\n    detectron.xyz += (rp-detectron.xyz);\n    detectron.w += max(dfB, .5)-detectron.w;\n\n    if(iFrame%RESET_AFTER == 0)\n    {\n        rp = a_translation.xyz;\n        dfA = dfObject(rp, iChannel0, x_index);\n        vec3 nA = objectNormal(rp, iChannel0, x_index);\n        rp = -nA*max(dfA, 0.)+rp;\n        detectron = vec4(rp, 1.0);\n    }\n    fragColor = detectron;//vec4(detectron.xyz,.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}