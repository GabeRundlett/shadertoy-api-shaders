{
    "Shader": {
        "info": {
            "date": "1583460968",
            "description": "A very simple test generated in materialmaker in 1 minute with some custom nodes.\nhttps://twitter.com/paulofalcao/status/1235750994081992705\nThe displace is based on the base SDF normal.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlGXWG",
            "likes": 9,
            "name": "Pore Torus",
            "published": 3,
            "tags": [
                "displace",
                "generated",
                "materialmaker",
                "nodes",
                "everythingmaker"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "// Pore Torus\n// By PauloFalcao\n//\n// A very simple test generated in materialmaker in 1 minute\n// MaterialMaker is a nodebased shader maker to make texture, but with some custom nodes, \n// created directly in the tool, it's possible to make complex stuff like raymarching :)\n\n\nmat2 rot(float r){\n  float s=sin(r);float c=cos(r);\n  return mat2(c,-s,s,c);\n}\n\nfloat wave3d_constant(float x) {\n\treturn 1.0;\n}\n\nfloat wave3d_sine(float x) {\n\treturn 0.5-0.5*cos(3.14159265359*2.0*x);\n}\n\nfloat wave3d_triangle(float x) {\n\tx = fract(x);\n\treturn min(2.0*x, 2.0-2.0*x);\n}\n\nfloat wave3d_sawtooth(float x) {\n\treturn fract(x);\n}\n\nfloat wave3d_square(float x) {\n\treturn (fract(x) < 0.5) ? 0.0 : 1.0;\n}\n\nfloat wave3d_bounce(float x) {\n\tx = 2.0*(fract(x)-0.5);\n\treturn sqrt(1.0-x*x);\n}\n\nfloat mix3d_mul(float x, float y, float z) {\n\treturn x*y*z;\n}\n\nfloat mix3d_add(float x, float y, float z) {\n\treturn min(x+y+z, 1.0);\n}\n\nfloat mix3d_max(float x, float y, float z) {\n\treturn max(max(x, y), z);\n}\n\nfloat mix_min(float x, float y, float z) {\n\treturn min(min(x, y), z);\n}\n\nfloat mix3d_xor(float x, float y, float z) {\n\tfloat xy = min(x+y, 2.0-x-y);\n\treturn min(xy+z, 2.0-xy-z);\n}\n\nfloat mix3d_pow(float x, float y, float z) {\n\treturn pow(pow(x, y), z);\n}vec4 o354278_p_SkyColor_gradient_fct(float x) {\n  if (x < 0.000000000) {\n    return vec4(0.793357015,0.864655972,0.979166985,1.000000000);\n  } else if (x < 0.118182000) {\n    return mix(mix(vec4(0.510612011,0.698400021,1.000000000,1.000000000), vec4(0.287342012,0.329521000,0.557291985,1.000000000), (x-0.118182000)/0.293416000), mix(vec4(0.793357015,0.864655972,0.979166985,1.000000000), vec4(0.510612011,0.698400021,1.000000000,1.000000000), (x-0.000000000)/0.118182000), 1.0-0.5*(x-0.000000000)/0.118182000);\n  } else if (x < 0.411598000) {\n    return 0.5*(mix(vec4(0.510612011,0.698400021,1.000000000,1.000000000), vec4(0.287342012,0.329521000,0.557291985,1.000000000), (x-0.118182000)/0.293416000) + mix(mix(vec4(0.793357015,0.864655972,0.979166985,1.000000000), vec4(0.510612011,0.698400021,1.000000000,1.000000000), (x-0.000000000)/0.118182000), mix(vec4(0.287342012,0.329521000,0.557291985,1.000000000), vec4(0.171140000,0.209502995,0.416667014,1.000000000), (x-0.411598000)/0.533857000), 0.5-0.5*cos(3.14159265359*(x-0.118182000)/0.293416000)));\n  } else if (x < 0.945455000) {\n    return mix(mix(vec4(0.510612011,0.698400021,1.000000000,1.000000000), vec4(0.287342012,0.329521000,0.557291985,1.000000000), (x-0.118182000)/0.293416000), mix(vec4(0.287342012,0.329521000,0.557291985,1.000000000), vec4(0.171140000,0.209502995,0.416667014,1.000000000), (x-0.411598000)/0.533857000), 0.5+0.5*(x-0.411598000)/0.533857000);\n  }\n  return vec4(0.171140000,0.209502995,0.416667014,1.000000000);\n}\nfloat o354282_input_in1(vec3 p) {\nvec2 o354281_0_q = vec2(length((p).xz)-0.610000000,(p).y);\nfloat o354281_0_1_sdf3d = length(o354281_0_q)-0.360000000;\n\nreturn o354281_0_1_sdf3d;\n}\nvec3 normal_o354282(vec3 p) {\n\tfloat d = o354282_input_in1(p);\n    vec2 e = vec2(.001,0);\n    vec3 n = d - vec3(\n        o354282_input_in1(p-vec3(e.xyy)),\n        o354282_input_in1(p-vec3(e.yxy)),\n        o354282_input_in1(p-vec3(e.yyx)));\n    return normalize(n);\n}\n\nfloat o354283_fct(vec3 uv) {\n\treturn mix3d_mul(wave3d_sine(8.000000000*uv.x), wave3d_sine(8.000000000*uv.y), wave3d_sine(8.000000000*uv.z));\n}float o354278_input_sdf_a(vec3 p) {\nvec3 o354283_0_1_color3d = vec3(o354283_fct(((p)).xyz));\n\nvec3 n=normal_o354282((p));\nfloat o354282_0_in = o354282_input_in1((p)+((n*(o354283_0_1_color3d-0.5))*0.134000000));float o354282_0_1_sdf3d = max(o354282_input_in1((p))-0.134000000,o354282_0_in/((0.134000000+0.2)*10.0));\n\nreturn o354282_0_1_sdf3d;\n}\nvec4 o354284_p_g_gradient_fct(float x) {\n  if (x < 0.000000000) {\n    return vec4(1.000000000,0.906248987,0.000000000,1.000000000);\n  } else if (x < 0.079855277) {\n    return mix(mix(vec4(1.000000000,0.468750000,0.000000000,1.000000000), vec4(0.000000000,0.000000000,1.000000000,1.000000000), (x-0.079855277)/0.343188719), mix(vec4(1.000000000,0.906248987,0.000000000,1.000000000), vec4(1.000000000,0.468750000,0.000000000,1.000000000), (x-0.000000000)/0.079855277), 1.0-0.5*(x-0.000000000)/0.079855277);\n  } else if (x < 0.423043997) {\n    return 0.5*(mix(vec4(1.000000000,0.468750000,0.000000000,1.000000000), vec4(0.000000000,0.000000000,1.000000000,1.000000000), (x-0.079855277)/0.343188719) + mix(mix(vec4(1.000000000,0.906248987,0.000000000,1.000000000), vec4(1.000000000,0.468750000,0.000000000,1.000000000), (x-0.000000000)/0.079855277), mix(vec4(0.000000000,0.000000000,1.000000000,1.000000000), vec4(0.000000000,0.000000000,0.000000000,1.000000000), (x-0.423043997)/0.576956003), 0.5-0.5*cos(3.14159265359*(x-0.079855277)/0.343188719)));\n  } else if (x < 1.000000000) {\n    return mix(mix(vec4(1.000000000,0.468750000,0.000000000,1.000000000), vec4(0.000000000,0.000000000,1.000000000,1.000000000), (x-0.079855277)/0.343188719), mix(vec4(0.000000000,0.000000000,1.000000000,1.000000000), vec4(0.000000000,0.000000000,0.000000000,1.000000000), (x-0.423043997)/0.576956003), 0.5+0.5*(x-0.423043997)/0.576956003);\n  }\n  return vec4(0.000000000,0.000000000,0.000000000,1.000000000);\n}\nvec3 o354278_input_tex3d_a(vec3 p) {\np.xz*=rot(iTime*0.5);\nvec3 o354283_0_1_color3d = vec3(o354283_fct(((p)).xyz));\nvec3 o354284_0_1_color3d = o354284_p_g_gradient_fct(dot(o354283_0_1_color3d, vec3(1.0))/3.0).rgb;\n\nreturn o354284_0_1_color3d;\n}\nfloat o354278_input_sdf_b(vec3 p) {\n\nreturn ((p)).y+1.0;\n}\nvec3 o354278_input_tex3d_b(vec3 p) {\n\nreturn (vec3(mod(floor(((p)).x)+floor(((p)).z),2.0))*0.25+0.5);\n}\nvec2 input_o354278(vec3 p) {\n    p.xz*=rot(iTime*0.5);\n    float sdfa=o354278_input_sdf_a(p);\n\tfloat sdfb=o354278_input_sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\nvec3 normal_o354278(vec3 p) {\n\tfloat d = input_o354278(p).x;\n    vec2 e = vec2(.001,0);\n    vec3 n = d - vec3(\n        input_o354278(p-vec3(e.xyy)).x,\n        input_o354278(p-vec3(e.yxy)).x,\n        input_o354278(p-vec3(e.yyx)).x);\n    return normalize(n);\n}\n\nvoid march_o354278(out float d,out vec3 p,out vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_o354278(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_o354278( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = input_o354278( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_o354278( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_o354278( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 raymarch_o354278(vec2 uv) {\n    vec3 cam=vec3(1.250000000+sin(iTime*0.25)*0.5,1.400000000+cos(iTime*0.2)*0.5,1.500000000);\n\tvec3 lookat=vec3(0.000000000,0.000000000,0.000000000);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,-1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*1.000000000+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_o354278(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?o354278_input_tex3d_a(p):o354278_input_tex3d_b(p);\n\tfloat fog=max(1.0-(d/50.0),0.0);\n\tvec3 light=normalize(vec3(0.950000000,1.200000000,0.400000000));\n\tif (d<50.0) {\n\t    vec3 n=normal_o354278(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tfloat r=clamp(dot(reflect(rd,-n),light),0.0,1.0);\n\t\tfloat cAO=calcAO_o354278(p,n);\n\t\tfloat shadow=calcSoftshadow_o354278(p,light,0.05,5.0);\n\t\tcolor=min(vec3(max(shadow,0.200000000)),max(l,0.200000000))*max(cAO,0.200000000)*objColor+pow(r,200.000000000)*0.850000000;\n\t} else {\n\t    color=o354278_p_SkyColor_gradient_fct(rd.y).xyz;\n\t}\n    return color*(fog)+o354278_p_SkyColor_gradient_fct(rd.y).xyz*(1.0-fog);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nvec2 UV = fragCoord/iResolution.xy-0.5;\nUV.x*=iResolution.x/iResolution.y;\nvec4 o354278_0_d = vec4(raymarch_o354278((UV)),1.0);\n\nvec4 o354278_0_1_rgba = o354278_0_d*1.3;\nfragColor = o354278_0_1_rgba;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}