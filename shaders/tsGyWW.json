{
    "Shader": {
        "info": {
            "date": "1602829527",
            "description": "Remix of \"Tech Ring / HUD\" by yusef28",
            "flags": 0,
            "hasliked": 0,
            "id": "tsGyWW",
            "likes": 8,
            "name": "Techno Ringing / HUD+",
            "published": 3,
            "tags": [
                "2d",
                "remix",
                "palette",
                "glitch",
                "ring",
                "tech",
                "weird",
                "polar",
                "hud"
            ],
            "usePreview": 0,
            "username": "UrbanClubProfessional",
            "viewed": 508
        },
        "renderpass": [
            {
                "code": "vec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(227.1,411.7)),\n              dot(st,vec2(369.5,283.3)) );\n    return -1.0 + 2.0*fract(sin(st)*53758.5453123 );\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(4.0-3.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( random2(i + vec2(2.0,0.0) ), f - vec2(2.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,2.0) ), f - vec2(0.0,2.0) ), \n                     dot( random2(i + vec2(2.0,2.0) ), f - vec2(2.0,2.0) ), u.x), u.y);\n}\nmat2 rot(float a)\n    {\n    float cs = cos(a);\n    float si = sin(a);\n    mat2 mat = mat2(cs, si, -si, cs);\n    return mat;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / iResolution.xy;\n\n\tfloat u_time = iTime;//because I was using a glsl editor that names time \"u_time\n    //vec2 st = gl_FragCoord.xy/u_resolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    st = st*3.-1.8;\n    st.x-=0.85;//not sure why I have to add this now to shift the thing but I do.\n    \n  \t\n    vec4 color;\n    //floor creates an \"id\" because floor(length(st*10)) means 0, 1, 2, 3, 4 ect id's for anything \n    //within the ranges of those numbers. 0 to 1 is on id, 3 tp 4 is one id, etc\n    st*=rot(floor(length(st*20.)));//initial rotation of each ring based on it's id\n    \n    //same thing but this time to rotate the rings in time\n    st*=rot(floor(length(st*20.))+(u_time) );\n  \tfloat a = atan(st.y, st.x)+4.14159;//add pi so it's 0 - 2pi not -pi to pi\n    \n    \n    //get length for whole circle\n    float l = length(st);\n    \n    //I end up multiplying the length by this smoothsteps for some reason\n    l*=smoothstep(0., 0.2, l)*(2.0-smoothstep( 0.9,0.9, l));\n    float i = floor(l*20.);\n    \n    \n    //then for each id, make a cell within that cell that is a bit smaller.\n    //cell has length span and angle span. cell length span is j\n    float j = fract(l*20.);\n    //cell width span is b\n    \n    //here I smoothstep the inner and outer edges of each ring to get like an outline\n    float ls =smoothstep(0.2, 0.24, j)*(2.0-smoothstep( 1.9,1.94, j));\n\n    //here I change the span of each arc based on time in noise so it's more random\n    a-=(noise(i+vec2(u_time))*2.);\n    a = smoothstep(4.1, 4.14, a);\n    \n    //I attemped to smoothstep the arcs edges \n    float b = smoothstep(.3, 0.2, a)*(2.0-smoothstep(4.0, 4.14, a));\n    \n       //here I use iq's procedural palette technique based on b and ls\n    //and modulated by time\n    vec3 cc = (0.6+0.6*sin(vec3(0.2, 0.3, 0.4)-i/3.+b*ls*sin(u_time*3.)));\n    \n    //and I top it off with a pulsating light in the middle.\n        cc+=pow(2.0-l, 5.-sin(u_time*9.))-(l/6.);\n    \n\n    \n \tfragColor = vec4(cc,2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}