{
    "Shader": {
        "info": {
            "date": "1636900539",
            "description": "visualisation for some wave types and using it for animation ",
            "flags": 0,
            "hasliked": 0,
            "id": "7tt3Df",
            "likes": 7,
            "name": "Wave Types",
            "published": 3,
            "tags": [
                "waves",
                "shapingfuncitons"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define xAxisCol vec3(0.925, 0.361, 0.227)\n#define backGroundCol vec3(0.925, 0.878, 0.824)\n#define outline vec3(0.306, 0.224, 0.22)\n#define blueCol vec3(0.176, 0.431, 0.784)\n\nvoid DrawHalfVector(vec2 origin, vec2 vector, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.001, d)+ m, 0. ,1.)); \n}\n\nvoid DrawPoint(vec2 pos, vec2 uv,float size, vec3 dotColor, inout vec3 sceneColor){\n    \n    float d    = distance(uv, pos);\n    sceneColor = mix(dotColor, sceneColor, smoothstep(size, size + 0.001, d));\n    \n}\n\n\nvoid DrawHalfVectorWithLength(vec2 origin, vec2 vector, float len, vec2 uv, float size, vec3 lineColor, inout vec3 sceneColor){\n    \n          uv  -= origin;\n    float v2   = dot(vector, vector);\n    float vUv  = dot(vector, uv);\n    vec2  p    = vector * vUv/v2;\n    float d    = distance(p, uv);\n    float m    = 1. - step(0.,vUv/v2);\n          m   += step(len, vUv/v2);\n    sceneColor = mix(lineColor, sceneColor, clamp(smoothstep(size, size + 0.001, d)+ m, 0. ,1.)); \n}\n\nfloat waveFunction(float x, float period, float amplitude)\n{\n\n  return (abs(fract(((x * period + iTime)/ (3.14 *2.)) ) *2. - 1. ))*amplitude;\n  return (sin((x * period+ iTime) ) *0.5 + 0.5 )*amplitude;\n}\n\nvoid DrawSinWave(vec2 origin, vec2 uv, float size, vec3 lineColor,float amplitude, float period, inout vec3 sceneColor)\n{\n  uv -= origin;\n\n  float cut = 1.- step(0., uv.x);\n  sceneColor= mix(lineColor , sceneColor, clamp(cut + step(size, abs( waveFunction(uv.x, period, amplitude) - uv.y)), 0., 1.));\n  vec2 currentPos = vec2(0., waveFunction(0., period, amplitude));\n  \n  DrawPoint(currentPos,\n           uv, 0.008, blueCol, sceneColor);\n           \n  DrawHalfVectorWithLength(vec2(-0.2, 0.), vec2(0., amplitude*2.), 0.5, uv, 0.0025, outline, sceneColor);\n  \n  vec2 vecTOControl = vec2(-0.2, currentPos.y) - currentPos; \n  \n  DrawHalfVectorWithLength(currentPos, normalize( vecTOControl), length(vecTOControl), uv, 0.001, blueCol, sceneColor);\n  \n    DrawPoint(vec2(-0.2, currentPos.y) ,\n           uv, 0.015, blueCol, sceneColor);\n           \n      DrawPoint(vec2(-0.45, 0.1), uv, 0.21, blueCol, sceneColor);    \n  DrawPoint(vec2(-0.45, 0.1), uv, 0.2, vec3(currentPos.y/(amplitude)), sceneColor);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv.x = uv.x * (iResolution.x/ iResolution.y);\n    \n    vec2 midPoint = vec2(0.5 * iResolution.x/ iResolution.y, 0.5);\n\n    vec3 col = backGroundCol;\n\n    DrawHalfVector(midPoint - vec2(0.2,0.2), vec2(1., 0.), uv, 0.003, outline, col);\n    \n    \n    DrawSinWave(midPoint - vec2(0.2,0.2), uv, 0.003, xAxisCol, 0.3, 10., col);\n \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}