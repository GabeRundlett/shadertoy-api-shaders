{
    "Shader": {
        "info": {
            "date": "1694047435",
            "description": "WASD to move (doesnt look like antrhing becasue there are no markers n stuff\nArrow keys to look around\nf & g to adjust fov",
            "flags": 48,
            "hasliked": 0,
            "id": "mlBfDW",
            "likes": 4,
            "name": "Cartoon Water Render",
            "published": 3,
            "tags": [
                "cartoon",
                "water"
            ],
            "usePreview": 0,
            "username": "Supercooldude",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "float epsilon = 0.1;\n\n\n\n\n\nvec2 hash(vec2 p)\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat height(vec2 point)\n{\n    return (noise(point + iTime * vec2(0, 2.0)) + 1.0) * 0.25 + (noise(point + iTime * vec2(2.0, 0)) + 1.0) * 0.25;\n}\n\nvec3 getNormal(vec2 pos)\n{\n    float currentHeight = height(pos);\n    return vec3((height(pos + vec2(epsilon, 0.0)) - currentHeight) * -1.0, epsilon / 10.0, (height(pos + vec2(0.0, epsilon)) - currentHeight) * -1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int stepCount = 64;\n    vec2 uv = fragCoord/iResolution.x;\n    float ar = iResolution.y/iResolution.x;\n    \n    vec3 sunDir = normalize(vec3(sin(iTime * 0.1), 0.2, cos(iTime * 0.1)));\n    \n    vec3 startPos = texelFetch(iChannel0, ivec2(0, 0), 0).xyz;\n    vec3 rot = texelFetch(iChannel0, ivec2(1, 0), 0).xyz;\n    \n    vec3 pos = startPos;\n    vec3 dir = normalize(vec3(uv.x - 0.5, uv.y - 0.5 * ar, texelFetch(iChannel0, ivec2(0, 0), 0).w));\n\n    \n    vec3 old = dir;\n    dir.y = old.y * cos(rot.y) + old.z * sin(rot.y);\n    dir.z = old.z * cos(rot.y) + old.y * -sin(rot.y);\n    old = dir;\n    dir.x = old.x * cos(rot.x) + old.z * sin(rot.x);\n    dir.z = old.z * cos(rot.x) + old.x * -sin(rot.x);\n\n    float initialMove = startPos.y - 2.0;\n\n    int rendertype = 0;\n    \n    int marchStep = 0;\n    float distStep = 0.02;\n    bool stop = false;\n    pos += dir * initialMove;\n    while (marchStep < stepCount && !stop)\n    {\n        if (pos.y < height(pos.xz))// || (pos.y > 2.0 && dir.y > 0.0))\n        {\n            rendertype = 1;\n            stop = true;\n        }\n        if (pos.y > 25.0 && dir.y > 0.0)\n        {\n            rendertype = 2;\n            stop = true;\n        }\n        pos += dir * distStep;\n        distStep += 0.04;\n        marchStep++;\n    }\n    vec3 endCol;\n    float bg = 1.0;\n    \n    if (rendertype == 1)\n    {\n        bg = 0.0;\n        vec3 col = vec3(0.0, 0.5, 1.0) + vec3(pos.y) * 0.5;\n        float brightness = 0.5 + 0.5 * dot(getNormal(pos.xz), sunDir);\n        endCol = col * brightness;\n    }\n    \n    if (rendertype == 2)\n    {\n\n        if (noise(pos.xz * 0.1 + iTime * vec2(0.1, 0.1)) > 0.0)\n        {\n            bg = 1.0 - sqrt(noise(pos.xz * 0.1 + iTime * vec2(0.1, 0.1)));\n            endCol = vec3(sqrt(noise(pos.xz * 0.1 + iTime * vec2(0.1, 0.1))));\n        }\n    }\n    \n\n       endCol += bg * vec3(0.0, 0.6, 0.99) + vec3(0.0, 0.4, 0.0) * dot(dir, vec3(0.0, 1.0, 0.0));//bg * vec3(0.5 + 0.25 * dot(dir, vec3(0.0, 1.0, 0.0)), 0.75 + 0.25 * dot(dir, vec3(0.0, 1.0, 0.0)), 1.0);\n       endCol.rgb += bg * vec3(1.0, 1.0, -0.6) * (max(dot(dir, sunDir), 0.99) - 0.99) * 50.0;\n\n    fragColor = vec4(endCol, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\nconst int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_Q = 81;\nconst int KEY_F = 70;\nconst int KEY_G = 71;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipos = ivec2(int(fragCoord.x), int(fragCoord.y));\n    if ((ipos.x == 0 || ipos.x == 1) && ipos.y == 0)\n    {\n        vec4 pos = (texelFetch(iChannel0, ivec2(0, 0), 0));\n        vec3 rot = vec3(texelFetch(iChannel0, ivec2(1, 0), 0));\n        \n        float xAxis = texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r;\n        xAxis -= texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \n        float yAxis = texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r;\n        yAxis -= texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n        \n        float zAxis = texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r;\n        zAxis -= texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \n        float hAxis = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r;\n        hAxis -= texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \n        float vAxis = texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r;\n        vAxis -= texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \n        float zoomAxis = texelFetch(iChannel1, ivec2(KEY_F, 0), 0).r;\n        zoomAxis -= texelFetch(iChannel1, ivec2(KEY_G, 0), 0).r;\n        \n        pos.x += (cos(rot.x) * xAxis + sin(rot.x) * zAxis) * iTimeDelta * 5.0;\n        pos.y = min(max(pos.y + yAxis * iTimeDelta * 5.0, 2.0), 20.0);\n        pos.z += (cos(rot.x) * zAxis + -sin(rot.x) * xAxis) * iTimeDelta * 5.0;\n        pos.w = min(max(pos.w + iTimeDelta * zoomAxis, 0.1), 10.0);\n\n        rot.x += iTimeDelta * hAxis;\n        rot.y += iTimeDelta * vAxis;\n        \n        \n        \n        rot.y = min(max(rot.y, -1.5707), 1.5707);\n        if (ipos.x == 0)\n        {\n            fragColor = pos;\n        }\n        else\n        {\n            fragColor = vec4(rot, 0.0);\n        }\n    }\n    \n    if (iFrame == 0)\n    {\n\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        if (ipos.x == 0 && ipos.y == 0)\n        {\n            fragColor = vec4(0.0, 3.0, 0.0, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}