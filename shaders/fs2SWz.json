{
    "Shader": {
        "info": {
            "date": "1620033575",
            "description": "Click the right side of the screen to clear after one sample, click the left side to progressively refine.",
            "flags": 32,
            "hasliked": 0,
            "id": "fs2SWz",
            "likes": 5,
            "name": "Pentile Matrix",
            "published": 3,
            "tags": [
                "screen",
                "matrix",
                "computer",
                "pentile"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb * 1.;\n\n    for(int i = -5; i < 5; i++) {\n        col += texture(iChannel0, uv - vec2(i, 0.) / iResolution.xy).rgb / 6.;\n        col += texture(iChannel0, uv - vec2(0., i) / iResolution.xy).rgb / 6.;\n    }\n\n    col /= col + 1.;\n    col.r = pow(col.r, 0.45);\n    col.g = pow(col.g, 0.45);\n    col.b = pow(col.b, 0.45);\n    col *= 1.2;\n    fragColor = vec4(col, 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Update: fixed DOF to sample uniformally\n//Update: gamma correction\n\nvec2 random(vec3 pos) {\n    return vec2(fract(sin(dot(pos, vec3(64.25375463, 23.27536534, 86.29678483))) * 59482.7542), fract(sin(dot(pos, vec3(46.28694826, 12.69483724, 75.34867263))) * 18694.3847));\n}\n\n#define sq2 sqrt(.5)\n#define sq3 sqrt(.75)\n#define pi 3.1415926535897932\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float frames = 10. * texture(iChannel0, vec2(1., 1.) / iResolution.xy).r;\n    \n    if(iMouse.x < iResolution.x / 2.) {\n        frames++;\n    } else {\n        frames = 0.;\n    }\n    \n    vec3 col;\n    vec2 of = fragCoord.xy - vec2(1., 1.);\n    if(dot(of, of) <= .5) {\n        col = vec3(frames / 10.);\n        fragColor = vec4(col, 1.0);\n    } else {\n        frames = round(frames);\n        vec2 uv = fragCoord / iResolution.xy;\n        uv = (fragCoord + random(vec3(uv.x, uv.y, iTime)) - iResolution.xy / 2.) / iResolution.xy;\n        vec3 inc = normalize(vec3(uv, 1.9));\n        inc = vec3(inc.x * .5 - inc.z * sq3, inc.y, inc.z * .5 + inc.x * sq3);\n        inc = vec3(inc.x, inc.y * sq2 - inc.z * sq2, inc.z * sq2 + inc.y * sq2);\n        vec3 p = vec3(inc.x, inc.y, inc.z) * (-1. / inc.y);\n        vec2 r = random(p);\n        r = vec2(cos(r.x * 2. * pi), sin(r.x * 2. * pi)) * sqrt(r.y); //DOF\n        vec3 p2 = p - vec3(-2., -1., 1.);\n        p += vec3(r.x, 0., r.y) * dot(p2, p2) / 7.;\n        p *= 3.;\n        \n        if(inc.y < 0.) {\n            int sel;\n            p -= floor(p);\n            sel = p.x < .5 ? p.z < .5 ? 2 : 1 : p.z < .5 ? 3 : 2;\n            sel *= (abs(p.x * 2. - floor(p.x * 2.) - 0.5) < .43) ? 1 : 0; //horizontal black spacer\n            sel *= (abs(p.z * 2. - floor(p.z * 2.) - 0.5) < .35) ? 1 : 0; //vertical black spacer\n            sel += (abs(p.z * 2. - floor(p.z * 2.) - 0.5) > .485) ? 4 : 0; //gray strip between vertical spacers\n            1 == sel ? col = vec3(1, 0, 0) : 2 == sel ? col = vec3(0, .5, 0) : 3 == sel ? col = vec3(0, 0, 1) : 4 == sel ? col = vec3(.1) : col = vec3(.002);\n            frames++;\n        } else {\n            col = vec3(.1);\n        }\n        \n        fragColor = (vec4(col, 1.0) + texture(iChannel0, fragCoord.xy / iResolution.xy) * frames) / (frames + 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}