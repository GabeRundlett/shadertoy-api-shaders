{
    "Shader": {
        "info": {
            "date": "1562505872",
            "description": "Simple sines.",
            "flags": 0,
            "hasliked": 0,
            "id": "3llSz8",
            "likes": 0,
            "name": "Simple sines",
            "published": 3,
            "tags": [
                "2d",
                "sin",
                "sine"
            ],
            "usePreview": 0,
            "username": "nkaretnikov",
            "viewed": 368
        },
        "renderpass": [
            {
                "code": "// Public domain.\n\n// Colors.\nconst vec3 black = vec3(0.);\nconst vec3 red   = vec3(1., 0., 0.);\nconst vec3 green = vec3(0., 1., 0.);\nconst vec3 blue  = vec3(0., 0., 1.); \n\n// Smooth sine.\nvec3 sSin(\n    vec3 color,\n    float x, float y, float pos, float width, float blur,\n    float amp, float freq, float speed)\n{   \n    pos = pos - (width / 2.);  // move the center in between two 'sin's\n    float t = x * freq + iTime * speed;\n    float f = amp * sin(t);\n    float inter = y;  // value for interpolation\n    \n    // XXX: Need to find a parallel curve to the sine wave to make it\n    // look good with 'freq' > 1.\n    // https://en.wikipedia.org/wiki/Parallel_curve\n    \n    float res = smoothstep(\n        pos        - f,\n        pos + blur - f,\n        inter);\n    res -= smoothstep(\n        pos + width - blur - f,\n        pos + width        - f,\n        inter);\n\n    return res * color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1).\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Move 0.0 to the center.\n    uv -= .5;\n    \n    // Account for the screen ratio.\n    uv.x *= iResolution.x / iResolution.y;  \n    \n    // Output color.\n    vec3 color = black;\n      \n    color += blue;\n    \n    float pos   = 0.;\n    float width = .1;\n    float blur  = .01;\n    float amp   = .45;\n    float freq  = sin(iTime * .5) * 10.;\n    float speed = 4.;\n    \n    // Horizontal sine.\n    color -= sSin(blue - red,\n                  uv.x, uv.y, pos, width, blur, amp, freq, speed);\n    // Vertical sine.\n    color -= sSin(blue + red - green,\n                  uv.y, uv.x, pos, width, blur, amp, freq, speed);    \n    \n    // Circles:    uv.x * uv.x, uv.y * uv.y\n    // Hyperbolas: uv.x * uv.y, uv.x * uv.y                  \n\n    // Output to screen.\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}