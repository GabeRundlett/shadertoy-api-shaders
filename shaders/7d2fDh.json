{
    "Shader": {
        "info": {
            "date": "1646175353",
            "description": "My first fractal, inspired by the merger sponge, it is just a cross of cylinders smoothly subtracted from a sphere. Coloring is based on orbit traps.\n\nUse the mouse to rotate around.",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2fDh",
            "likes": 20,
            "name": "Bling fractal",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "El_Sargo",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "#define zoom -5.\n#define sensitivity 7.\n#define rotaionSpeed .2\n//Heavy performance impact, maybe set to 1 if going full screen \n#define AA 2\n//Setting this to high can crash the complier\n#define maxSteps 60\n#define shadows\n#define normals\n#define AO\n#define shadowSoftness 5.\n//#define hmmm\n\nfloat sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\n//https://iquilezles.org/articles/distfunctions\nfloat sminus( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n    \nfloat smin( float a, float b, float k )\n{\n    float h = a-b;\n    return 0.5*( (a+b) - sqrt(h*h+k) );\n}\n//----\n\n//rotation matrices\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\n\n\nfloat sdCylenderCross(vec3 p, float r){\n    return min(min(\n                   length(p.xz),\n                   length(p.xy)),\n                   length(p.yz)) - r;\n}\n// distance to the scene and the final position of p\nvec4 map(vec3 p) {\n    \n    float d = sdSphere(p, 2.);\n    if (d > 0.1){return vec4(d,p);}\n    float scale = 1.;\n    for (int i = 0; i<4;i++){\n       \n        d = sminus(\n                    sdCylenderCross((p=abs(p)-scale)/scale, 0.16)*scale,\n                    d,\n                    scale*0.5);\n        scale /= 2.;\n    }\n    return vec4(d, p);\n}\n\n//https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    #ifdef shadows\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n    #else\n    return .9;\n    #endif\n}\n#define ZERO min(iFrame, 0)\n//https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 p )\n{\n    #ifdef normals\n    const float h = 0.0001;\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*h).x;\n    }\n    return normalize(n);\n    #else\n    return vec3(0);\n    #endif\n}\n\n//\nfloat calcAO(vec3 pos, vec3 nor)\n{\n    #ifdef AO\n\tfloat occ = 0.0;\n    float sca = .4;\n    for( int i=ZERO; i<5; i++ )\n    {\n            float h = 0.01 + 0.25*float(i)/4.0;\n        float d = map( pos+h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n    #else\n    return 1.;\n    #endif\n}\n\nvec3 intersection(vec3 ro, vec3 rd){\n    float dist;\n    for (int i = 0; i < maxSteps; i++){\n        dist = map(ro).x;\n        ro += dist*rd;\n        if (dist < 0.01)\n            break;\n    }\n    \n    return ro;\n\n}\n\nvec4 render(vec3 ro, vec3 rd){\n      vec3 p = intersection(ro,rd);\n vec4 d_pxyz = map(p);\n    vec3 trp = d_pxyz.yzw;\n  float trap = distance(p, trp);\n    \n    //Shading\n    vec3 sun = vec3(0., 1., .0);\n    float sha = softshadow(p, sun, 0.1, 5., shadowSoftness)*0.5+0.5;\n     vec3 nor = calcNormal(p);\n    float occ = calcAO(p, nor);\n     vec3 tex = texture(iChannel0, reflect(rd, nor)).xyz;\n    //float lig = (dot(sun,nor)*0.5+0.5);\n\n    //Colors\n    vec3 col = vec3(0);\n    vec3 bcl = vec3(sin(tan(trap*2.)), sin(trap), sin(tan(trap)));\n    vec3 scl = vec3(0.9, 0.4 ,.3);\n    vec3 amb = vec3(0.7, 0.8, 1.);\n    //\n \n    //Hit\n    col += 0.75*scl*bcl+(tex*sha*sha*sha*sha*sha);\n    col += 0.6*amb*occ;\n    //No hit\n    vec3 bgc = texture(iChannel0, rd).xyz;\n    //\n    #ifndef hmmm\n    col = mix(bgc, col,  min(1.,0.01/d_pxyz.x));\n    #else\n    col = mix(bgc, col,  min(1.,0.001/d_pxyz.x));\n    #endif\n    return vec4(col, 1);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3   ro = vec3(0, 0, zoom);\n    mat3 xrot;\n    mat3 yrot;\n    if (iMouse.z > 0.){\n        yrot = roty(iMouse.x/iResolution.x*sensitivity);\n        xrot = rotx(-iMouse.y/iResolution.y*sensitivity);\n    } else {\n        yrot = roty(iTime*rotaionSpeed);\n        xrot = rotx(0.7);\n    }\n   ro*=xrot*yrot;\n\n\n    vec4 tot = vec4(0);\n    \n    //Super sampling\n    for(int m=0;m<AA;m++){\n    for(int n=0;n<AA;n++){\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 u = ((fragCoord+o) / iResolution.xy - 0.5) / vec2(iResolution.y / iResolution.x, 1);\n        vec3 rd = normalize(vec3(u, 1));\n        tot += render(ro, rd*xrot*yrot) / float(AA*AA);\n    }}\n    \n    //tone mapping\n    tot = smoothstep(0.,1.6,tot);\n    \n    // Output to screen\n    fragColor = tot;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}