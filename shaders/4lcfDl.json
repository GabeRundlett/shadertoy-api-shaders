{
    "Shader": {
        "info": {
            "date": "1541547959",
            "description": "fluid simulation\nA mix of two models",
            "flags": 32,
            "hasliked": 0,
            "id": "4lcfDl",
            "likes": 33,
            "name": "Waterfall 2",
            "published": 3,
            "tags": [
                "water",
                "fluid"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 1570
        },
        "renderpass": [
            {
                "code": "vec2 R;\nvec4 T1 ( vec2 U ) {return texture(iChannel0,U/R);}\nvec4 T2 ( vec2 U ) {return texture(iChannel1,U/R);}\nvec4 T3 ( vec2 U ) {return texture(iChannel2,U/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n\n    float k = min(T1(U).w, 0.45);\n    float l = min(T2(U).w, 0.4);\n    float m = min(T3(U).w, 0.5);\n\n    C = 0.2+0.2*sin(k*vec4(8,12,16,1))+0.2*sin(l*vec4(8,12,16,1))+0.2*sin(m*vec4(8,12,16,1));\n}  ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Adapted from https://www.shadertoy.com/view/4lyyzc by wyatt\n#define k 4.\n#define l 3.\n#define dt .04\n#define g 2.5\n#define t iTime\nvec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec4 a = T(U+vec2(1,0)),b = T(U+vec2(0,1)),c = T(U+vec2(-1,0)),d = T(U+vec2(0,-1));\n    vec2 vu = T(U-dt*T(U).xy).xy;\n    Q = T(U-dt*vu);\n \t\n    vec2 gp = vec2(a.z-c.z,b.z-d.z);//pressure gradient\n    vec2 gw = vec2(a.w-c.w,b.w-d.w);//density gradient\n    float r = (1.+10.*Q.w)*.1;//*dt;\n    vec2 f = r*k*gp - l*gw + r*Q.w*g*vec2(0.,-1.);\n    //f*=20.*dt;\n    float p = 0.25*(a.z+b.z+c.z+d.z);\n    float div = (c.x-a.x+d.y-b.y);//divergence\n    Q.xyz = vec3(Q.x+f.x,Q.y+f.y,p - 0.02*div)*.998;\n    //Q.z= max(Q.z,-20.);\n    \n \n if (iFrame < 1) Q = vec4(0);\n    if (U.x < 1.||U.y < 1.||R.x-U.x < -1.||R.y-U.y < 1.) Q.xy *= 0.;\n    if (U.x < 0.1*R.x&&U.y < 0.4*R.y) Q.xy *= 0.;\n    if (U.x < 0.4*R.x&&U.y < 0.2*R.y) Q.xy *= 0.;\n \tif (length(U-vec2(0,0.8*R.y)) < 8.) {Q.xy= Q.xy*.5+.5*vec2(1.+1.5*sin(1.5*t),0); Q.w = 1.+0.2*sin(1.2*t);};\n}  ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Adapted from https://www.shadertoy.com/view/XlsBDf by davidar\n\n#define T(p) texture(iChannel0,(p)/iResolution.xy)\n#define length2(p) dot(p,p)\n\n#define dt 0.06\n#define K 2.5\n#define L .02\n#define nu .02\n#define kappa -.01\n\n#define g 1.\n#define q .18\n#define t iTime\nvec2 R;\n\nvoid mainImage(out vec4 c, in vec2 p) {\n    R = iResolution.xy;\n    \n    \n    c = T(p);\n    \n    vec4 n = T(p + vec2(0,1));\n    vec4 e = T(p + vec2(1,0));\n    vec4 s = T(p - vec2(0,1));\n    vec4 w = T(p - vec2(1,0));\n    \n    vec4 laplacian = (n + e + s + w - 4.*c);\n    \n    vec4 dx = (e - w)/2.;\n    vec4 dy = (n - s)/2.;\n    \n    // velocity field divergence\n    float div = dx.x + dy.y;\n    \n      \n    // mass conservation, Euler method step\n    c.z -= q*dt*(dx.z * c.x + dy.z * c.y + div * c.z);\n   \n  \n    // semi-Langrangian advection\n    vec2 vu = T(p-dt*c.xy).xy;\n    c.xyw = T(p - dt*vu.xy).xyw;\n    \n    \n    // viscosity/diffusion\n    c.xyw += dt * vec3(nu,nu,kappa) * laplacian.xyw;\n    \n    // nullify divergence with pressure field gradient\n    c.xy -= K * vec2(dx.z,dy.z)- L * vec2(dx.w,dy.w) + vec2(0.,g)*c.w;\n    \n    // external source\n    if (iFrame < 1) c = vec4(0,0,1,0);//vec4(0);\n    if (p.x < 1.||p.y < 1.||R.x-p.x < -1.||R.y-p.y < 1.) c.xy *= 0.;\n    if (p.x < 0.1*R.x&&p.y < 0.4*R.y) c.xy *= 0.;\n    if (p.x < 0.4*R.x&&p.y < 0.2*R.y) c.xy *= 0.;\n \tif (length(p-vec2(0,0.8*R.y)) < 8.) {c.xy= c.xy*.5+1.5*vec2(1.+0.4*sin(1.5*t),0); c.w = 1.+0.2*sin(1.2*t);};\n    \n    // dissipation\n\n    c.xyz *= 0.9998;\n    c.w *= 1.0003;\n    \n    c.xyzw = clamp(c.xyzw, vec4(-15,-15,0.8,0), vec4(15,15,15,15));\n    //c.xyzw = clamp(c.xyzw, vec4(-5,-5,0.5,0), vec4(5,5,5,10));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Adapted from https://www.shadertoy.com/view/XlsBDf by davidar\n\n#define T(p) texture(iChannel0,(p)/iResolution.xy)\n#define length2(p) dot(p,p)\n\n#define dt 0.05\n#define K 1.2\n#define L .02\n#define nu .02\n#define kappa -.01\n\n#define g 1.\n#define q .18\n#define t iTime\nvec2 R;\n\nvoid mainImage(out vec4 c, in vec2 p) {\n    R = iResolution.xy;\n    \n    \n    c = T(p);\n    \n    vec4 n = T(p + vec2(0,1));\n    vec4 e = T(p + vec2(1,0));\n    vec4 s = T(p - vec2(0,1));\n    vec4 w = T(p - vec2(1,0));\n    \n    vec4 laplacian = (n + e + s + w - 4.*c);\n    \n    vec4 dx = (e - w)/2.;\n    vec4 dy = (n - s)/2.;\n    \n    // velocity field divergence\n    float div = dx.x + dy.y;\n        \n    \n    // mass conservation, Euler method step\n    c.z -= q*dt*(dx.z * c.x + dy.z * c.y + div * c.z);\n    \n   \n    // semi-Langrangian advection\n    vec2 vu = T(p-dt*c.xy).xy;\n    c.xyw = T(p - dt*vu.xy).xyw;\n    \n    \n    // viscosity/diffusion\n    c.xyw += dt * vec3(nu,nu,kappa) * laplacian.xyw;\n    \n    // nullify divergence with pressure field gradient\n    c.xy -= K * vec2(dx.z,dy.z)- L * vec2(dx.w,dy.w) + vec2(0.,g)*c.w;\n    \n    // external source\n    if (iFrame < 1) c = vec4(0,0,1,0);//vec4(0);\n    if (p.x < 1.||p.y < 1.||R.x-p.x < -1.||R.y-p.y < 1.) c.xy *= 0.;\n    if (p.x < 0.1*R.x&&p.y < 0.4*R.y) c.xy *= 0.;\n    if (p.x < 0.4*R.x&&p.y < 0.2*R.y) c.xy *= 0.;\n \tif (length(p-vec2(0,0.8*R.y)) < 8.) {c.xy= c.xy*.5+1.5*vec2(1.+0.4*sin(1.5*t),0); c.w = 1.+0.2*sin(1.2*t);};\n    \n    // dissipation\n\n    c.xyz *= 0.9998;\n    c.w *= 1.0003;\n    \n\n    c.xyzw = clamp(c.xyzw, vec4(-15,-15,0.8,0), vec4(15,15,15,15));\n    //c.xyzw = clamp(c.xyzw, vec4(-5,-5,0.5,0), vec4(5,5,5,10));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}