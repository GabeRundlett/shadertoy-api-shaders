{
    "Shader": {
        "info": {
            "date": "1693132480",
            "description": "What is a circle realy? It all depends on your definition of distance. P-norms are generalization of the euclidean distance and from them arise new types of circles",
            "flags": 0,
            "hasliked": 0,
            "id": "dtlfRS",
            "likes": 4,
            "name": "P-norms visualized",
            "published": 3,
            "tags": [
                "geometrypnorm"
            ],
            "usePreview": 0,
            "username": "barth",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "float pnorm(vec2 point, float p) {\n  return pow(pow(point.x, p) + pow(point.y, p), 1.0 / p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float maxDimension = max(iResolution.x, iResolution.y);\n    float minDimension = min(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord / maxDimension;\n    \n    vec2 circleCenter = vec2(0.5, 0.5 * minDimension / maxDimension);\n    \n    vec2 uvToCenter = abs(uv - circleCenter);\n    \n    float circleRadius = 0.2;\n    float circleThickness = 0.01;\n    \n    float p = 0.5 + 5.0 * (cos(iTime) + 1.0) / 2.0;\n\n\n    vec3 col = vec3(0.0);\n\n    if(pnorm(uvToCenter, p) > circleRadius - circleThickness && pnorm(uvToCenter, p) < circleRadius + circleThickness) {\n        col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));   \n    }\n    \n    fragColor = vec4(col,1.0); \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}