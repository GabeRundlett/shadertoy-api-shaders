{
    "Shader": {
        "info": {
            "date": "1619508512",
            "description": "Little robot face in 2D.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtl3Wn",
            "likes": 0,
            "name": "Little Robot Face",
            "published": 3,
            "tags": [
                "2d",
                "robot",
                "face"
            ],
            "usePreview": 0,
            "username": "maeln",
            "viewed": 264
        },
        "renderpass": [
            {
                "code": "// iq primitives\n\nfloat bezier(vec2 pos, vec2 A, vec2 B, vec2 C)\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 1 root\n        vec2 qos = d + (c + b*t)*t;\n        res = length(qos);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        t = clamp( t, 0.0, 1.0 );\n\n        // 3 roots\n        vec2 qos = d + (c + b*t.x)*t.x;\n        float dis = dot(qos,qos);\n        \n        res = dis;\n\n        qos = d + (c + b*t.y)*t.y;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        qos = d + (c + b*t.z)*t.z;\n        dis = dot(qos,qos);\n        res = min(res,dis);\n\n        res = sqrt( res );\n    }\n    \n    return res;\n}\n\nfloat round_bezier( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in float r )\n{\n  return bezier(p,a,b,c) - r;\n}\n\n\nfloat line( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat round_line( in vec2 p, in vec2 a, in vec2 b, in float r )\n{\n  return line(p,a,b) - r;\n}\n\nfloat poker_face(in vec2 p) {\n    float eye_left = round_line(p, vec2(-1.2, 0.5), vec2(-0.5, 0.5), 0.08);\n    float eye_right = round_line(p, vec2(1.2, 0.5), vec2(0.5, 0.5), 0.08);\n    float eyes = min(eye_left, eye_right);\n        \n    float mouth = round_line(p, vec2(-0.8, 0.0), vec2(0.8, 0.0), 0.08);\n    \n    return min(mouth, eyes);\n}\n\nfloat happy_face(in vec2 p) {\n    float eye_left = round_bezier(p,\n                            vec2(-1.2, 0.5),\n                            vec2(-0.8, 0.7),\n                            vec2(-0.5, 0.5),\n                                 0.08);\n    float eye_right = round_bezier(p,\n                            vec2(1.2, 0.5),\n                            vec2(0.8, 0.7),\n                            vec2(0.5, 0.5),\n                                  0.08);\n    float eyes = min(eye_left, eye_right);\n    \n    float mouth = round_bezier(p, vec2(-0.8, 0.0), vec2(0.0, -0.3), vec2(0.8, 0.0), 0.08);\n    return min(mouth, eyes);\n}\n\nvec4 fill(float dist, vec4 col) {\n    return col * smoothstep(4.0/iResolution.y, 0.0, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tvec3 background = vec3(0.0);\n    \n    vec4 output_color = vec4(background, 1.0);\n    vec4 happy = fill(happy_face(uv), vec4(1.0, 1.0, 1.0, 1.0));\n    vec4 poker = fill(poker_face(uv), vec4(1.0, 1.0, 1.0, 1.0));\n    output_color = happy;\n\n    fragColor = output_color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}