{
    "Shader": {
        "info": {
            "date": "1674200660",
            "description": "mouse controls camera",
            "flags": 0,
            "hasliked": 0,
            "id": "DlsXRn",
            "likes": 12,
            "name": "waffle sphere maze 2",
            "published": 3,
            "tags": [
                "raymarching",
                "maze",
                "short",
                "waffle"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/dlj3Dd\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                // rotation \n#define H(p)    fract(1e4*sin(dot(p,R.xy-17.)))\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,m, h, r=8.; \n    vec3  R = iResolution, \n          D = normalize(vec3(U+U, -12.*R.y) - R),           // ray direction\n          p = vec3(0,0,20), q,a,                            // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n              :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n    p.y += 7.; \n    for ( O=vec4(1); O.x > 0. && t > .001; O-=.01 )          // march scene\n        q = p, // t = 9.,\n        q.yz *= rot(-M.y),                                  // rotations\n        q.xz *= rot(-M.x-1.57), \n        t = length(q) - r,\n        a = abs(q), \n        m = max(a.x, max(a.y,a.z)), \n     // U = m==a.x ? q.yz : m==a.y ? q.xz : q.xy,           // cube-sphere mapping\n        q = m==a.x ? q.yzx : m==a.y ? q.xzy : q,        \n        U = vec2(atan(q.x,q.z),atan(q.y,q.z))*q.z*4./3.1416,// kastorp's way : more regular\n        U *= 8.*r/m, h = H(ceil(U)),\n        q.xy = ( fract(U) - .5 ) / 8./r *.7,                // distance to walls\n        t = min ( t+.03, max( t ,                           // trimmed by sphere\n                  min( abs(q.x+sign(h-.5)*q.y),                       // wall = random tile diagonal\n                       length(abs(.5-abs(fract(U)-.5)))/8./r*.7) ) ), // columns at wall ends\n        p += .5*t*D;                                        // step forward = dist to obj    \n      \n\n// O *= O*O*1.5;                                            // color scheme\n// O *= .5+.5*vec4(m==a.x, m==a.y, m==a.z, 0)* (.4+.6*mod(ceil(U.x)+ceil(U.y),2.));  // debug\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}