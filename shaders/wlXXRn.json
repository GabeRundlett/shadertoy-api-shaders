{
    "Shader": {
        "info": {
            "date": "1561742723",
            "description": "how a BRDF emerges from micro-relief.\nRight: filtering analytically the specular shading of height field. MIPmapping auto-compute statistics.\n[url]https://hal.inria.fr/hal-00858220v1[/url]\n[url]https://www.csee.umbc.edu/~olano/papers/lean/lean.pdf[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "wlXXRn",
            "likes": 12,
            "name": "LEAN/LEADR LOD of specular",
            "published": 3,
            "tags": [
                "heightfield",
                "shading",
                "lod",
                "gaussian",
                "beckmann",
                "gpmipmap",
                "gpmipmap",
                "lean",
                "leadr",
                "prefiltering"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 964
        },
        "renderpass": [
            {
                "code": "// Filtering specular shading on height fields\n// left: just applying shading on MIPmapped heightfield or Nmap will give the shading of a flat surface.\n// right: using the subpixel variance (indeed, cov matrix) as roughness coefficient preserves appearance.\n//        This can be obtained 'for free' using MIPmap.\n// refs: LEAD-R https://hal.inria.fr/hal-00858220v1\n//       LEAN https://www.csee.umbc.edu/~olano/papers/lean/lean.pdf\n// Same for correct filtering of color LUT: https://www.shadertoy.com/view/XtjBDw\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    float v = .5 + log2(R.y)/2.*(.5+.5*sin(iTime));\n    \n    vec4 M1 = texture(iChannel0, U/R, v),  // read slopes stats through MIPmap \n         M2 = texture(iChannel1, U/R, v),\n          S = vec4( M2.x - M1.x*M1.x, // + 1e-3, // for maps with flat area\n                    M2.y - M1.y*M1.y, // + 1e-3, // (or inverse + normalization = 0 )\n                    M2.z - M1.x*M1.y, 0);\n    mat2 s = mat2(S.x,S.z,S.z,S.y);        // covariant matrix\n    \n    vec2 N = .1* ( 2.*U-R) / R.y;          // mirror micro-specular: only 1 micro-normal contributes\n    N -= M1.xy;                            // Gaussian NdF\n    v = exp( -.5* dot( N, inverse(s) * N) ) / ( 6.28*sqrt(length(vec4(s))) );\n\n    if ( U.x < .5*R.x ) v = exp( -.5*dot(N,N)/1e-3 ) / .3; // without accounting for the variance increase with LOD\n    \n    O = vec4( pow( .25*v , 1./2.2 ) );     // to sRGB\n    if ( U.x-.5 == .5*R.x ) O = vec4(1,0,0,0); // red separator\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// compute slopes of texture.r . MipMAP = order1 moment\n\n#define T(x,y) texelFetch(iChannel0, ( ivec2(U)+ivec2(x,y) ) %textureSize(iChannel0,0), 0).r\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.w = T(0,0);\n    O.x = T(1,0) - O.w;\n    O.y = T(0,1) - O.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// compute slopes^2 of texture. MipMAP = order2 moment\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch(iChannel0,ivec2(U),0);\n    O = vec4( O.x*O.x, O.y*O.y, O.x*O.y, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}