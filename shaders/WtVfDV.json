{
    "Shader": {
        "info": {
            "date": "1615095342",
            "description": "Shiny! Example of direct ray intersections with triangles. It is a MUCH faster way to render meshes on a per-pixel basis. Original: [url=https://www.shadertoy.com/view/3tcfWf]https://www.shadertoy.com/view/3tcfWf[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WtVfDV",
            "likes": 3,
            "name": "Shiny Aluminum Cornell Box",
            "published": 3,
            "tags": [
                "cornellbox",
                "box",
                "metal",
                "shiny",
                "shiny",
                "shiny",
                "aluminum"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 200
        },
        "renderpass": [
            {
                "code": "struct TriIntersect {\n    bool hit;\n    vec3 pos;\n    float dist;\n    vec3 bary;\n};\n\n// Triangle intersector - inefficient but fairly simple\n// For a more efficient triangle intersector (without any square roots), see Inigo Quilez's\n// ray intersectors page: https://iquilezles.org/articles/intersectors\nTriIntersect IntersectTriangle(in vec3 ro, in vec3 rd, in vec3 a, in vec3 b, in vec3 c) {\n    ro -= a; b -= a; c -= a; a = vec3(0.0);\n    vec3 ba = b - a, cb = c - b, ac = a - c;\n\n    // Intersect plane\n    vec3 n = cross(ba, -ac);\n    float denom = dot(rd, n);\n    if (denom != 0.0) {\n        float t = -dot(ro, n) / denom;\n\n        // Triangle subareas for point in triangle test and computing barycoords\n        vec3 p = ro + rd * t;\n        vec3 pa = p - a, pb = p - b, pc = p - c;\n\n        float abc = length(n);\n        float u = length(cross(ba, pa)) / abc;\n        float v = length(cross(cb, pb)) / abc;\n        float w = length(cross(ac, pc)) / abc;\n\n        return TriIntersect(abs(u + v + w - 1.0) < 0.001, p, t, vec3(u, v, w));\n    }\n\n    return TriIntersect(false, vec3(0.0), 0.0, vec3(0.0)); // No hit, dummy values\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 st = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 35.0);\n    vec3 rd = normalize(vec3(st, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Cubemap\n    fragColor = texture(iChannel0, rd) * 0.75;\n\n    bool intersecting = false;\n    float tMin = 1000000.0;\n    vec3 pos, normal;\n    vec2 uv;\n\n    for (int i=0; i < indices.length(); i += 3) {\n        vec3 na = normals[indices[i]];\n        vec3 nb = normals[indices[i + 1]];\n        vec3 nc = normals[indices[i + 2]];\n\n        vec2 uva = uvs[indices[i]];\n        vec2 uvb = uvs[indices[i + 1]];\n        vec2 uvc = uvs[indices[i + 2]];\n\n        vec3 a = vertices[indices[i]];\n        vec3 b = vertices[indices[i + 1]];\n        vec3 c = vertices[indices[i + 2]];\n\n        TriIntersect info = IntersectTriangle(ro, rd, a, b, c);\n        if (info.hit && info.dist > 0.0 && info.dist < tMin) {\n            tMin = info.dist;\n            pos = info.pos;\n            intersecting = true;\n\n            // You can interpolate other things with the barycoords too\n            normal = na * info.bary.x + nb * info.bary.y + nc * info.bary.z;\n            uv = uva * info.bary.x + uvb * info.bary.y + uvc * info.bary.z;\n        }\n    }\n\n    if (intersecting) {\n        normal *= sign(dot(normal, -rd)); // Make sure its oriented torwards the camera\n\n        vec3 mat = texture(iChannel0, reflect(rd, normal)).rgb;\n        vec3 fogColor = vec3(0.0);\n\n        float diff = max(0.0, dot(normal, -rd));\n        float fog = exp(1.0 - 0.025 * tMin);\n\n        fragColor.rgb = mix(fogColor, mat * diff, fog);\n    }\n\n    // Gamma correction, sometimes I like, sometimes I don't\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Mesh data copied from https://www.shadertoy.com/view/3tcfWf\n\n// Triangularized Cornell box mesh data:\nvec3 vertices[20] = vec3[20](\nvec3(-10.0,10.0,10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(10.0,10.0,-10.0),\nvec3(10.0,10.0,10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(10.0,10.0,-10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(-10.0,-10.0,10.0),\nvec3(10.0,-10.0,10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(-10.0,-10.0,10.0),\nvec3(-10.0,-10.0,-10.0),\nvec3(-10.0,10.0,-10.0),\nvec3(-10.0,10.0,10.0),\nvec3(10.0,-10.0,-10.0),\nvec3(10.0,-10.0,10.0),\nvec3(10.0,10.0,10.0),\nvec3(10.0,10.0,-10.0)\n);\n\nvec2 uvs[20] = vec2[20](\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000),\nvec2(0.000000, 0.000000),\nvec2(0.000000, 1.000000),\nvec2(1.000000, 0.000000),\nvec2(1.000000, 1.000000)\n);\n\nvec3 normals[20] = vec3[20](\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000,-1.0000, 0.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 0.0000, 1.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 0.0000, 1.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3( 1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000),\nvec3(-1.0000, 0.0000, 0.0000)\n);\n\n// Mesh vertex data is aligned to use a single index for position/normal/uv values.\nconst int numIndices = 90;\nint indices[30] = int[30]\n(\n0,1,2,\n0,2,3,\n4,5,6,\n4,6,7,\n8,9,10,\n8,10,11,\n12,13,14,\n12,14,15,\n16,17,18,\n16,18,19\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}