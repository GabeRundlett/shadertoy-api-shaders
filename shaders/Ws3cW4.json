{
    "Shader": {
        "info": {
            "date": "1600908612",
            "description": "fork-fast-noise-v3-color",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3cW4",
            "likes": 3,
            "name": "fork-fast-noise-v3-color",
            "published": 3,
            "tags": [
                "forkfastnoisev3color"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 358
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nvec2 opRep2D( in vec2 p, in vec2 c )\n\t{ vec2 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3 opRep3D( in vec3 p, in vec3 c )\n\t{ vec3 q = mod(p+0.5*c,c)-0.5*c; return  q ;}\nvec3  opRep(vec3 p, vec3 r)\n   { return mod(p,r)-0.5*r; }\n///------------------------------------\n\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\nvec4 random4 (const vec4 x) {\n    vec4 z = mod(mod(x, vec4(5612.0)), vec4(3.1415927 * 2.0));\n    return fract ((z*z) * vec4(56812.5453));\n}\nconst float A = 1.0;\nconst float B = 57.0;\nconst float C = 113.0;\nconst vec3 ABC = vec3(A, B, C);\nconst vec4 A3 = vec4(0, B, C, C+B);\nconst vec4 A4 = vec4(A, A+B, C+A, C+A+B);\n\n\nfloat cnoise4 (const in vec3 xx) \n{\n    vec3 x = xx; // mod(xx + 32768.0, 65536.0); // ignore edge issue\n    vec3 fx = fract(x);\n    vec3 ix = x-fx;\n    vec3 wx = fx*fx*(3.0-2.0*fx);\n    float nn = dot(ix, ABC);\n\n    vec4 N1 = nn + A3;\n    vec4 N2 = nn + A4;\n    vec4 R1 = random4(N1);\n    vec4 R2 = random4(N2);\n    vec4 R = mix(R1, R2, wx.x);\n    float re = mix(mix(R.x, R.y, wx.y), mix(R.z, R.w, wx.y), wx.z);\n\n    return 1.0 - 2.0 * re;\n}\nfloat fbm(vec3 p) {\n    float f;\n    f = 0.5000*cnoise4( p ); p = p*2.02;\n    f += 0.2500*cnoise4( p ); p = p*2.03;\n    f += 0.1250*cnoise4( p ); p = p*2.01;\n    f += 0.0625*cnoise4( p ); \n\n  return f;\n}\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp;\n    res = vec3(9999.0, -1.0,-1.0);\n    \n    \n    \n\tvec3 pw = vec3(0.,0.,10.);\n    \n    vec3 p1=p;\n \tfloat cx=120.0;\n    p1.x = mod(p1.x+0.5*cx,cx)-0.5*cx;\n    \n    float pa = sdBox(p1+pw,vec3(50.,5,5.));\n  \tfloat pb = sdBox(p1-pw,vec3(50.,5,5.));\n    \n    res =opU3(res, vec3(pa,33.0,MATERIAL_NO));  //piso 1\n    res =opU3(res, vec3(pb,32.0,MATERIAL_NO));  //piso 2\n    \n  \tpb = sdBox(p1-pw*2.,vec3(30.,50.,1.0));\n    float pb1 = sdBox(p1-pw*2.,vec3(10.,30.,1.5));\n    \n    pb= differenceSDF(pb, pb1);\n    res =opU3(res, vec3(pb,18.0,MATERIAL_NO)); //frente 2\n    \n    vec3 c = opRep(p1,vec3(20.,4.5,14.))-vec3(0.,0.,7.);\n  \tpa = sdBox(c+pw+vec3(0.,0.,-3.),vec3(1.5,25.,0.5));\n  \tpb = sdBox(c+pw+vec3(0.,0.0,-3.),vec3(1.75,2.,0.75));\n    \n    res =opU3(res, vec3(pa,5.0,MATERIAL_NO));  //col ch\n    res =opU3(res, vec3(pb,9.0,MATERIAL_NO));  //columna g\n    \n   res.x= clamp(fbm(p*3.),0.,1.)*0.1+res.x;\n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n\n//------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n  \n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*5.0,1000.0);\n    itime=t;\n\tmObj.blnShadow=false;\n    light_pos1= vec3(0.0, 30.0, -25.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3(0.0, 5.0, 20.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n    \n  \n    \n    vec3 ro=vec3(t,10.0,-25.0);\n    vec3 rd=normalize(vec3(uv.x, uv.y+0.35*cos(iTime),1.0));\n    \n    light_pos1.x+=ro.x;\n    light_pos2.x+=ro.x;\n    \n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\nfloat m;\nif (i==-2 ) {return mObj.color; }       \nif (i==0 ) {return vec3(0,0,0)/255.0; }\nif (i==1 ) {return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) {return vec3(255,0,0)/255.0; }\nif (i==3 ) {return vec3(0,255,0)/255.0; }\nif (i==4 ) {return vec3(0,0,255)/255.0; }\nif (i==5 ) {return vec3(255,255,0)/255.0; }\nif (i==6 ) {return vec3(0,255,255)/255.0; }\nif (i==7 ) {return vec3(255,0,255)/255.0; }\nif (i==8 ) {return vec3(192,192,192)/255.0; }\nif (i==9 ) {return vec3(128,128,128)/255.0; }\nif (i==10 ) {return vec3(128,0,0)/255.0; }\nif (i==11 ) {return vec3(128,128,0)/255.0; }\nif (i==12 ) {return vec3(0,128,0)/255.0; }\nif (i==13 ) {return vec3(128,0,128)/255.0; }\nif (i==14 ) {return vec3(0,128,128)/255.0; }\nif (i==15 ) {return vec3(0,0,128)/255.0; }    \nif (i==16 ) {return vec3(255, 204, 188)/255.0; }\nif (i==17 ) {return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) {return vec3(0.5, 0.5, 0.8); }\nif(i== 19 ) {return vec3(1, 0.5, 0);} \nif(i== 20 ) {return vec3(1.0, 1.0, 1.0);} \nif(i== 21 ) {return vec3(247./255., 168./255.,  184./255.);} \nif(i== 22 ) {return vec3(0, 1, 1);} \nif(i== 23 ) {return vec3(85./255., 205./255., 252./255.);} \nif(i== 24 ) {return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );} \nif(i== 25 ) {return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 26 ){ return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \nif(i== 30 ) { return vec3(0.1, 0.5, 1.0);}   \nif(i== 31 ){ return vec3(0.0, 0.6, 0.0);}\nif(i== 32 ){ return vec3(0.25, 0.26, 0.25);}\nif(i== 33 ){ return vec3(0.35, 0.36, 0.35);}\n\n\n    \n    \n\n}\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}