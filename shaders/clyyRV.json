{
    "Shader": {
        "info": {
            "date": "1700398921",
            "description": "Trying some basic raymarching and repeating structures.",
            "flags": 0,
            "hasliked": 0,
            "id": "clyyRV",
            "likes": 2,
            "name": "a grid and some balls",
            "published": 3,
            "tags": [
                "raymarching",
                "grid",
                "balls",
                "translucency"
            ],
            "usePreview": 0,
            "username": "immibis",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 dir = vec3(fragCoord/iResolution.xy*2.-1.,1.)*0.025;\n    dir.x *= float(iResolution.x)/float(iResolution.y);\n    dir=normalize(dir)*0.025;\n    \n    vec3 campos = vec3(iTime*1.-.3,iTime*.5+.17,iTime*1.);\n    vec3 pos = campos;\n    ivec3 icampos = ivec3(pos);\n    \n    fragColor=vec4(0,0,0,1);\n    \n    float remAlpha = 1.;\n    \n    const float GRID_ALPHA = 0.25;\n    \n    for(int i = 0; i < 400; i++) {\n        pos = campos+dir*float(i);\n        \n        ivec3 ipos = ivec3(pos);\n        vec3 frac1 = pos - floor(pos);\n        vec3 frac = pos - floor(pos+0.5);\n        bool a = abs(frac.x) < 0.05;\n        bool b = abs(frac.y) < 0.05;\n        bool c = abs(frac.z) < 0.05;\n        \n        vec3 ballpos = vec3(0.5+0.25*sin(iTime*5.),0.5+0.25*cos(iTime*3.),0.5);\n        float ballsize = 0.25;\n        \n        if(((ipos.x ^ ipos.y) & 1) != 0) {\n            ballpos.y = 1. - ballpos.y;\n        }\n        if((ipos.y & 1) != 0) {\n            ballpos.y = 1. - ballpos.y;\n            ballpos.x = 1. - ballpos.x;\n        }\n        ballsize = sqrt((length(campos - vec3(ipos) - vec3(0.5)) - 1.)) / 5.;\n        \n        float col = 1.-mod(pos.z - campos.z,100.)/10.;\n        if(a && b) {\n            fragColor.rgb=mix(fragColor.rgb,vec3(0,0,col),remAlpha*GRID_ALPHA);\n            remAlpha=remAlpha*(1.-GRID_ALPHA);\n        }\n        if(a && c) {\n            fragColor.rgb=mix(fragColor.rgb,vec3(0,col,0),remAlpha*GRID_ALPHA);\n            remAlpha=remAlpha*(1.-GRID_ALPHA);\n        }\n        if(b && c) {\n            fragColor.rgb=mix(fragColor.rgb,vec3(col,0,0),remAlpha*GRID_ALPHA);\n            remAlpha=remAlpha*(1.-GRID_ALPHA);\n        }\n        if(length(frac1-ballpos)<ballsize) {\n            float c = 1.-mod(pos.z - campos.z,100.)/10.;\n            c *= dot(normalize(frac1 - ballpos), vec3(-0.5,0,-0.7))*0.5+0.5;\n            \n            fragColor.rgb=mix(fragColor.rgb,vec3(c,c,c),remAlpha);\n            return;\n        }\n    }\n    fragColor.rgb=mix(fragColor.rgb,vec3(0,0,0),remAlpha);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}