{
    "Shader": {
        "info": {
            "date": "1558469712",
            "description": "Tried to recreate what they were doing in this numberphile video: https://www.youtube.com/watch?v=FFftmWSzgmk&t=370s\nWhen the green circle is outside the shape, everything diverges. Try moving it around the edges, pretty cool patterns emerge.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtfGWS",
            "likes": 25,
            "name": "Mandelbrot Orbits",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "grid",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1139
        },
        "renderpass": [
            {
                "code": "\n\nfloat line( in vec2 p, in vec2 a, in vec2 b, float th ){\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return smoothstep(th, th + 0.0005,length( pa - ba*h ));\n}\n\nfloat axis(vec2 uv){\n    float h = 1.0;\n \tvec2 v = smoothstep(0.004, 0.0041, abs(uv));\n    \n    float inc = 1.0 / 5.0;\n    \n    for(float i = -2.0; i < 2.0; i += inc){\n     \th *= line(uv, vec2(i, 0.03), vec2(i, -0.03), 0.004);   \n    }\n    for(float i = -2.0; i < 2.0; i += inc){\n     \th *= line(uv, vec2(0.03, i), vec2(-0.03, i), 0.004);   \n    }\n    \n    return v.x * v.y * h;\n    \n}\n\nfloat Mandelbrot(vec2 c)\n{\n    vec2 z = vec2(0.0);\n    for (int i = 0; i < 64; i++)\n    {\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        if( dot(z,z) > 128.0) return float(i) - log2(log2(dot(z,z)));\n    }\n    return 0.0;\n}\n\nfloat Julia(vec2 uv, vec2 m) {\n    vec2 z = uv;\n    for (int i = 0; i < 100; i++) \n    {\n        if (dot(z,z) > 2.) return float(i);\n        z = mat2(z,-z.y,z.x) * z + m;\n    }\n    return 0.;\n}\n\n// comment out for julia set\n#define mandelbrodt\n\nvoid mainImage( out vec4 f, in vec2 u )\n{\n    \n    vec2 R = iResolution.xy;\n    vec2 uv = 2.0*vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 m = 2.0*(iMouse.xy / R.xy-.5); \n    uv.x -= 0.3; // ultimate lazy way\n    m.x -= 0.17;\n    \n    m.x *= R.x/R.y;\n    \n    vec3 col = vec3(axis(uv));\n\n\t\n    \n    col = mix(vec3(0.0, 1.0, 0.0), col, \n              smoothstep(0.029, 0.0295, length(uv - m.xy)));\n    \n    vec2 p1 = vec2(0);\n    vec2 p2 = m.xy;\n    \n    #ifdef mandelbrodt\n    float mand = Mandelbrot(uv);\n    col = mix(col, vec3(1.0, 0.0, 0.0), mand / 20.);\n    for(float i = 0.0; i < 70.0; i++)\n    {\n    \tvec2 np = vec2((p1.x * p1.x - p1.y * p1.y), \n                         (2.0 * p1.x * p1.y)) + m.xy;\n        \n        np = clamp(np, -4.0, 4.0);\n        col *= line(uv, p1, np, 0.005);\n        col = mix(vec3(0.0, 0.0, 1.0), col, smoothstep(0.024, 0.0245, length(uv - np)));\n    \tp1 = np;\n    }\n  \t#else\n    // Also shows the diverging when the bounds is just the circle\n    for(float i = 0.0; i < 100.0; i++)\n    {\n    \tvec2 np = vec2((p2.x * p2.x - p2.y * p2.y), \n                         (2.0 * p2.x * p2.y));\n         \n        np = clamp(np, -4.0, 4.0);\n        col *= line(uv, p2, np, 0.005);\n        col = mix(vec3(0.0, 0.0, 1.0), col, smoothstep(0.029, 0.0295, length(uv - np)));\n    \tp2 = np;\n        \n    }\n    float circ = smoothstep(1.0, 1.01, length(uv)) + \n        smoothstep(0.999, 0.991, length(uv));\n    col *= circ;\n    float jule = Julia(-uv, m);\n    col = mix(col, vec3(1.0, 0.0, 0.0), jule / 20.);\n    #endif\n    \n    f = vec4(col, 1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}