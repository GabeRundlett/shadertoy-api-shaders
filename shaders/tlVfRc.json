{
    "Shader": {
        "info": {
            "date": "1614803142",
            "description": "53°K",
            "flags": 0,
            "hasliked": 0,
            "id": "tlVfRc",
            "likes": 7,
            "name": "53°K",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "fbm",
                "warp",
                "blue",
                "ice",
                "warped"
            ],
            "usePreview": 0,
            "username": "dyla",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "float prand(vec2 uv) {\n    return fract(sin(dot(mod(uv,153.789),vec2(12.9898,78.233)))*43758.5453) - 0.5;\n}\n\nfloat fprand(vec2 uv, float f){\n    vec2 sp = uv*f;\n    vec2 isp = floor(sp);\n    vec2 fsp = fract(sp);\n    \n    float a = prand(isp+0.5);\n    float b = prand(isp+0.5+vec2(1.0,0.0));\n    float c = prand(isp+0.5+vec2(0.0,1.0));    \n    float d = prand(isp+0.5+vec2(1.0,1.0));\n    float wx = smoothstep(0.0, 1.0, fsp.x);\n    float wy = smoothstep(0.0, 1.0, fsp.y);\n    return mix(mix(a,b,wx), mix(c,d,wx), wy);\n    \n}\n\nfloat perlin(vec2 uv, int octaves, float f0, float fmul, float v0, float vmul){\n    float val = 0.0;\n    float frq = f0;\n    float wei = v0;\n    float time = mod(iTime, 1000.0);\n    vec2 wind = vec2(1.0, 1.0)*0.0005;\n    \n    for (int i=0; i<octaves; i++) {\n        val += wei * fprand(uv+wind*float(i)*time, frq);\n        frq *= fmul;\n        wei *= vmul;\n    }\n    \n    return val;\n}\n\nfloat pdef(vec2 uv) {\n    return perlin(uv, 11, 0.8, 1.7, 1.5, 0.65);\n}\n\nfloat warped(vec2 uv) {\n    return pdef(uv+vec2(pdef(uv+pdef(uv)), pdef(uv+pdef(uv+3.145)+1.25)));\n}\n\nvec4[4] cols = vec4[4](\n    \tvec4(0.05,0.0,0.2,1.0),\n        vec4(0.2,0.4,0.75,1.0),\n    \tvec4(0.4,0.6,0.8,1.0),\n    \tvec4(1.0,1.0,1.0,1.0)\n    );\n\nvec4 getCol(float col) {\n    float lf = float(cols.length()-1);\n    float ci = floor(col * lf);\n    int cii = int(ci);\n    return mix(cols[cii], cols[cii+1], fract(col*lf));\n    //return mix(cols[cii], cols[cii+1], smoothstep(ci/lf, (ci+1.0)/lf, min(max(col,0.0), 1.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/max(iResolution.x, iResolution.y);\n    \n    float t = mod(iTime, 1000.0);\n    float tm = 10.0;\n    float mt = mod(t, tm);\n    float transitionStart = 0.8;\n    float col2Weight = smoothstep(transitionStart,1.0,mt/tm);\n   \n    vec4 col1 = getCol(abs(warped(uv+(t-mt))));\n    vec4 col2 = col2Weight>0.0 ? getCol(abs(warped(uv+(t+tm-mt)))) : col1;\n    \n    fragColor = mix(col1, col2,  col2Weight);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}