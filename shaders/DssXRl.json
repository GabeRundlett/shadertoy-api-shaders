{
    "Shader": {
        "info": {
            "date": "1669394773",
            "description": "My first attempt at pixel sorting, extremely slow but looks cool",
            "flags": 32,
            "hasliked": 0,
            "id": "DssXRl",
            "likes": 4,
            "name": "Video Pixel Sorting",
            "published": 3,
            "tags": [
                "video",
                "pixel",
                "sort",
                "sorting"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texture(iChannel0, fragCoord / iResolution.xy).rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame < 1) {\n        // Initialize color to blue\n        fragColor = vec4(0.1, 0.1, 0.2, 0.0);\n    } else {\n        // Use video color when above color key threshold\n        vec4 vid = texture(iChannel1, fragCoord / iResolution.xy);\n        if (distance(vid.rgb, vec3(0.0, 1.0, 0.0)) > 0.8) {\n            fragColor = vid;\n            return;\n        }\n    \n        // Start with original color\n        ivec2 pos = ivec2(fragCoord);\n        fragColor = texelFetch(iChannel0, pos, 0);\n        \n        // Compare pixels in pairs, sliding window along 1 pixel per frame\n        bool sampleLeft = pos.x % 2 == iFrame % 2;\n        ivec2 offset = pos + ivec2(sampleLeft ? -1 : 1, 0);\n        \n        // Don't read out of bounds pixels\n        ivec2 dims = textureSize(iChannel0, 0);\n        if (offset.x < 0 || offset.x >= dims.x || offset.y < 0 || offset.y >= dims.y) {\n            return;\n        }\n        \n        // Compare red channel and alpha to know whether we need to swap\n        vec4 neighbour = texelFetch(iChannel0, offset, 0);\n        if (fragColor.a <= 0.0 || length(fragColor.rgb) > length(neighbour.rgb) == sampleLeft) {\n            fragColor = neighbour;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}