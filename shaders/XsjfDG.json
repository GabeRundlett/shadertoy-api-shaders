{
    "Shader": {
        "info": {
            "date": "1501986695",
            "description": "demo made for GenArtHackParty4: http://art4.genarthackparty.com/\n\nYou can click-drag left/right on the scene to change the viewpoint (ish)\n\nBased on Inigo Quilez's Raymarching Primitives demo:\nhttps://www.shadertoy.com/view/Xds3zN ",
            "flags": 0,
            "hasliked": 0,
            "id": "XsjfDG",
            "likes": 19,
            "name": "Plant or Starfish?",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "distancefield",
                "implicitsurface"
            ],
            "usePreview": 0,
            "username": "rms80",
            "viewed": 1376
        },
        "renderpass": [
            {
                "code": "// Derivative of Inigo Quilez's Raymarching - Primitives:\n//    https://www.shadertoy.com/view/Xds3zN\n// Edits Copyright (c) 2017 Ryan Schmidt\n// Edits released under MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Original License follows\n\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// A list of useful distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n\n#define AA 1   // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\n#define M_PI 3.1415926535897932384626433832795\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }\n{\n    // Tetrahedron = Octahedron - Cube\n    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );\n \n    float d = 0.0;\n    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));\n    float octa = d - h.z;\n    return max(-box,octa); // Subtraction\n }\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nvec2 smin2( vec2 va, vec2 vb, float k )\n{\n    float a = va.x; float b = vb.x; \n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    float f = mix( b, a, h ) - k*h*(1.0-h);\n    float c = mix( vb.y, va.y, h);\n    return vec2(f,c);\n}\nvec2 opBlend(vec2 d1, vec2 d2, float power) \n{\n    return smin2(d1,d2,power);\n}\n\n\n//------------------------------------------------------------------\n\nvec4 quat_identity() {\n    return vec4(0,0,0,1);\n}\n\n\nvec4 quat_from_to(vec3 from, vec3 to) {\n    vec4 result;\n    from = normalize(from);\n    to = normalize(to);\n    vec3 bisector = normalize(from + to);\n    float w = dot(from, bisector);\n    if (w != 0.0) {\n        result = vec4(cross(from,bisector), w);\n    } else {\n        if (abs(from.x) >= abs(from.y)) {\n            // V1.x or V1.z is the largest magnitude component.\n            float invLength = 1.0 / sqrt(from.x * from.x + from.z * from.z);\n            result = vec4(-from.z * invLength, 0.0, from.x * invLength, w);\n        } else {\n            // V1.y or V1.z is the largest magnitude component.\n            float invLength = 1.0 / sqrt(from.y * from.y + from.z * from.z);\n            result = vec4(0.0, from.z * invLength, -from.y * invLength, w);\n        }\n    }\n    //Normalize();   // aaahhh just to be safe...  \n    return result;  \n}\n\nvec4 quat_from_axis_angle(vec3 axis, float angle) \n{\n    float halfAngle = 0.5 * angle;\n    float sn = sin(halfAngle);\n    return vec4(sn*axis.x, sn*axis.y, sn*axis.z, cos(halfAngle));\n}\n\nvec3 quat_x(vec4 q) {\n    float twoY = 2.0 * q.y; float twoZ = 2.0 * q.z;\n    float twoWY = twoY * q.w; float twoWZ = twoZ * q.w;\n    float twoXY = twoY * q.x; float twoXZ = twoZ * q.x;\n    float twoYY = twoY * q.y; float twoZZ = twoZ * q.z;\n    return vec3(1.0 - (twoYY + twoZZ), twoXY + twoWZ, twoXZ - twoWY);    \n}\nvec3 quat_y(vec4 q) {\n    float twoX = 2.0 * q.x; float twoY = 2.0 * q.y; float twoZ = 2.0 * q.z;\n    float twoWX = twoX * q.w; float twoWZ = twoZ * q.w; float twoXX = twoX * q.x;\n    float twoXY = twoY * q.x; float twoYZ = twoZ * q.y; float twoZZ = twoZ * q.z;\n    return vec3(twoXY - twoWZ, 1.0 - (twoXX + twoZZ), twoYZ + twoWX);    \n}\nvec3 quat_z(vec4 q) {\n    float twoX = 2.0 * q.x; float twoY = 2.0 * q.y; float twoZ = 2.0 * q.z;\n    float twoWX = twoX * q.w; float twoWY = twoY * q.w; float twoXX = twoX * q.x;\n    float twoXZ = twoZ * q.x; float twoYY = twoY * q.y; float twoYZ = twoZ * q.y;\n    return vec3(twoXZ + twoWY, twoYZ - twoWX, 1.0 - (twoXX + twoYY));\n}\nvec3 quat_mul(vec4 q, vec3 v) {\n    float twoX = 2.0 * q.x; float twoY = 2.0 * q.y; float twoZ = 2.0 * q.z;\n    float twoWX = twoX * q.w; float twoWY = twoY * q.w; float twoWZ = twoZ * q.w;\n    float twoXX = twoX * q.x; float twoXY = twoY * q.x; float twoXZ = twoZ * q.x;\n    float twoYY = twoY * q.y; float twoYZ = twoZ * q.y; float twoZZ = twoZ * q.z;\n    return vec3(\n        v.x * (1.0 - (twoYY + twoZZ)) + v.y * (twoXY - twoWZ) + v.z * (twoXZ + twoWY),\n        v.x * (twoXY + twoWZ) + v.y * (1.0 - (twoXX + twoZZ)) + v.z * (twoYZ - twoWX),\n        v.x * (twoXZ - twoWY) + v.y * (twoYZ + twoWX) + v.z * (1.0 - (twoXX + twoYY))); ;    \n}\n\nvec4 quat_mul(vec4 a, vec4 b) {\n    float w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n    float x = a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y;\n    float y = a.w * b.y + a.y * b.w + a.z * b.x - a.x * b.z;\n    float z = a.w * b.z + a.z * b.w + a.x * b.y - a.y * b.x;\n    return vec4(x, y, z, w);    \n}\n\n\nstruct frame3f {\n    vec3 origin;\n    vec4 rotation;\n};\n\nframe3f make_frame(vec3 o, vec3 z) {\n    frame3f f;\n    f.origin = o;\n    f.rotation = quat_from_to(vec3(0,0,1), z);\n    return f;\n}\nframe3f set_frame(vec3 o, vec4 rot) {\n    frame3f f;\n    f.origin = o;\n    f.rotation = rot;\n    return f;\n}\n\nvec3 from_frame_p(frame3f f, vec3 p) {\n    return quat_mul(f.rotation, p) + f.origin;\n}\nvec3 from_frame_v(frame3f f, vec3 v) {\n    return quat_mul(f.rotation, v);\n}\n\n\nvec3 circlePath(float rad, float height, float revPerS, float time) {\n    float a = revPerS * time * 6.28318531;\n    return vec3( rad * cos(a), height, rad * sin(a) );\n}\nvec3 circlePath(frame3f frame, float rad, float revPerS, float time) {\n    float a = revPerS * time * 6.28318531;\n    float x = rad * cos(a); float y = rad * sin(a);\n    return frame.origin + x*quat_x(frame.rotation) + y*quat_y(frame.rotation);\n}\n\n\nvec2 map( in vec3 pos )\n{\n    float groundMat = 1.0;\n    vec2 groundPlane = vec2(sdPlane(pos), groundMat);\n\n    float sphereR = 0.2;\n    float pathRMin = 0.0;\n    float pathRMax = 0.5;\n    float blendmin = 0.7;\n    float blendmax = 0.2;\n\n    vec2 shapes = vec2(0,0);\n    int shape_i = 0;\n    int N = 10;\n    for ( int kk = 0; kk < 5; ++kk ) {\n        float tk = float(kk)/5.0;\n        tk += iTime/20.0;\n        vec4 rotAround = quat_from_axis_angle(vec3(0,1,0), tk*2.0*M_PI);\n        frame3f arcFrame = set_frame(vec3(0,0,0), rotAround);\n\n        for ( int i = 0; i < 10; ++i ) {\n            float t = float(i) / 10.0;\n\n            float cr = 2.0;\n            float ca = 2.5*t;\n            float cx = cr*cos(ca);\n            float cy = cr*sin(ca);\n            vec3 ct = vec3(cr,0,0);\n            vec2 n = normalize(vec2(-cy,cx));\n\n            float h = float(i) * 2.0 * sphereR;\n\n            float useR = sphereR + 0.05*(1.0+cos(t));\n\n            vec3 arcpos = vec3(cx,cy,0) - ct;\n            vec3 arcdir = vec3(n.x, n.y, 0);\n            arcpos = from_frame_p(arcFrame, arcpos);\n            arcdir = from_frame_v(arcFrame, arcdir);\n            frame3f f = make_frame(arcpos, arcdir);\n\n            vec3 spherePos = circlePath(f, mix(pathRMin,pathRMax,t), 0.5, iTime + t );\n            float sphereMat = float(i+1) * 10.0;\n\n            vec3 dv = pos - spherePos;\n            vec2 sphereF = vec2( sdSphere(dv, useR), sphereMat);\n            \n            if ( shape_i == 0 ) {\n                shapes = sphereF;\n            } else {\n                shapes = opBlend(sphereF, shapes, mix(blendmin,blendmax,t)); \n                //shapes = opU(sphereF, shapes); \n            }\n            shape_i++;\n\n        }\n    }\n\n\n    //vec2 final = opU(groundPlane, shapes);\n    vec2 final = shapes;\n    //vec2 final = groundPlane;\n        \n    return final;\n}\n\n\n\n\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 3.0;\n    float tmax = 15.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (-2.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (3.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>3.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<10; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = vec3(0,0,0);\n        //ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.3 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = 1.0;//calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        //dif *= softshadow( pos, lig, 0.02, 2.5 );\n        //dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    \n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n\t\t// camera\t\n        float camH = 6.0;\n        float camD = 4.5;\n        float camTime = 0.0;//time;\n        vec3 ro = vec3( -0.5+3.5*cos(0.1*camTime + 6.0*mo.x), camH + 2.0*mo.y, camD + 4.0*sin(0.1*camTime + 6.0*mo.x) );\n        vec3 ta = vec3( 0, 1.0, 0.0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}