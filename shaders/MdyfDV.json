{
    "Shader": {
        "info": {
            "date": "1530549534",
            "description": "Generating endless seamless non-repeating same-properties texture from example (cf our HPG'18 paper [url]https://hal.inria.fr/hal-01824773[/url])\nMouse.y to scale\nG: show grid   P: show patch\ntry other textures! ( NB:original one does not wrap perfectly )",
            "flags": 16,
            "hasliked": 0,
            "id": "MdyfDV",
            "likes": 76,
            "name": "High-perf by-example Noise",
            "published": 3,
            "tags": [
                "noise",
                "texture",
                "blending",
                "fourier",
                "bombing",
                "gabor",
                "texturebombing",
                "splatting",
                "textons",
                "byexample",
                "contrastpreserving",
                "hpg"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 4646
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------\n// With only 3 texture fetches, generates endless seamless non-repeating \n// same-properties texture from example. ( in the paper: +1 LUT fetch\n// to handle non-Gaussian correlated color histograms).\n\n// Simple implementation of our HPG'18 \n// \"High-Performance By-Example Noise using a Histogram-Preserving Blending Operator\"\n// https://hal.inria.fr/hal-01824773\n// ( color-histogram Gaussianisation not possible in shadertoy ;-) \n//   or possibly via this approx: https://www.shadertoy.com/view/slX3zr  ). \n// ---------------------------------------------------------------------\n\n#define CON 1      // contrast preserving interpolation. cf https://www.shadertoy.com/view/4dcSDr\n#define Z   8.     // patch scale inside example texture\n\n#define rnd22(p)    fract(sin((p) * mat2(127.1,311.7,269.5,183.3) )*43758.5453)\n#define srgb2rgb(V) pow( max(V,0.), vec4( 2.2 )  )          // RGB <-> sRGB conversions\n#define rgb2srgb(V) pow( max(V,0.), vec4(1./2.2) )\n\n// --- texture patch associated to vertex I in triangular/hexagonal grid. key 'P'\n// (textureGrad handles MIPmap through patch borders)\n#define C(I)  ( keyToggle(16) ? vec4( I==P, I==P+vec2(1,0), I==P+vec2(0,1), 1 ) \\\n                              : srgb2rgb( textureGrad(iChannel0, U/Z-rnd22(I) ,Gx,Gy)) - m*float(CON) )\n// --- for tests\n//#define C(I)     ( srgb2rgb( texture(iChannel0, U/8.-rnd22(I)) ) - m*float(CON) )\n//#define C(I)     ( srgb2rgb( textureGrad(iChannel0, U/Z-rnd22(I) ,Gx,Gy)) - m*float(CON) )\n//#define C(I)     H(I)\n//#define C(I)     vec4( I==P, I==P+vec2(1,0), I==P+vec2(0,1), 1 )\n#define S(v)       smoothstep( p,-p, v )                    // antialiased drawing\n#define hue(v)   ( .6 + .6 * cos( v  + vec4(0,23,21,0)  ) ) // from https://www.shadertoy.com/view/ll2cDc\n#define H(I)       hue( (I).x + 71.3*(I).y )\n#define keyToggle(c) ( texelFetch(iChannel3,ivec2(64+c,2),0).x > 0.) // keyboard. from https://www.shadertoy.com/view/llySRh\n\n// ---------------------------------------------------------------------\nvoid mainImage( out vec4 O, vec2 u )\n{\n    mat2 M0 = mat2( 1,0, .5,sqrt(3.)/2. ),\n          M = inverse( M0 );                           // transform matrix <-> tilted space\n    vec2 R = iResolution.xy,\n         z = iMouse.xy/R,\n         U = ( 2.*u - R ) / R.y  *Z/8.* exp2(z.y==0.?2.:4.*z.y+1.) + vec2(2.*iTime),\n         V = M * U,                                    // pre-hexa tilted coordinates\n         I = floor(V),                                 // hexa-tile id\n         P = floor( M * vec2(2.*iTime) );              // center tile (to show patches)\n    float p = .7*dFdy(U.y);                            // pixel size (for antialiasing)\n    vec2 Gx = dFdx(U/Z), Gy = dFdy(U/Z);               // (for cross-borders MIPmap)\n    vec4 m = srgb2rgb( texture(iChannel0,U,99.) );     // mean texture color\n    \n    vec3 F = vec3(fract(V),0), A, W; F.z = 1.-F.x-F.y; // local hexa coordinates\n    if ( F.z > 0. )\n        O = ( W.x=   F.z ) * C(I)                      // smart interpolation\n          + ( W.y=   F.y ) * C(I+vec2(0,1))            // of hexagonal texture patch\n          + ( W.z=   F.x ) * C(I+vec2(1,0));           // centered at vertex\n    else                                               // ( = random offset in texture )\n        O = ( W.x=  -F.z ) * C(I+1.) \n          + ( W.y=1.-F.y ) * C(I+vec2(1,0)) \n          + ( W.z=1.-F.x ) * C(I+vec2(0,1));\n#if CON    \n    O = m + O/length(W);  // contrast preserving interp. cf https://www.shadertoy.com/view/4dcSDr\n#endif\n    O = clamp( rgb2srgb(O), 0., 1.);\n    if (m.g==0.) O = O.rrrr;                           // handles B&W (i.e. \"red\") textures\n    \n    if (keyToggle(7)) O = mix( O, vec4(1), S(min(W.x,min(W.y,W.z))-p) ); // key 'G'; show grid   \n  //O = mix(O, H(floor(V+.5)), S(length(M0*(fract(V+.5)-.5))-.1));       // show nodes\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}