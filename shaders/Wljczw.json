{
    "Shader": {
        "info": {
            "date": "1594475960",
            "description": "Control:\nX - Zoom In\nZ - Zoom Out\nArrow Keys - Movement",
            "flags": 48,
            "hasliked": 0,
            "id": "Wljczw",
            "likes": 3,
            "name": "Basic Mandelbrot - Interactive",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "AmarnathMurugan",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float col = 0.0;\n    vec2 z = vec2(0);\n    vec4 PrevState = texelFetch(iChannel0,ivec2(0,0),0);  \n    vec2 c = (uv+vec2(PrevState.y*PrevState.x*10.0-0.250,PrevState.z*PrevState.x*10.0))/(PrevState.x*10.0);\n    float MaxIter = mix(100.0,5000.0,PrevState.x*0.0007);\n    float iter = 0.0;\n    for(int i=0;i<int(MaxIter);i++)\n    {\n    \tz = vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y)+ c;\n        if(length(z)>5.0)\n            break;\n        iter++;\n    }\n    col = iter/MaxIter; \n    vec3 fColor = vec3(col,col*=1.6,col*=2.0)*(2.0-col);\n    fragColor = vec4(fColor,1.0);\n    \n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int KEY_Z  = 90;\nconst int KEY_X  = 88;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nfloat zoom = 0.05;\nvec2 offset = vec2(0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 m = iMouse/iResolution.xyxy;\n    \n    zoom = texelFetch(iChannel0,ivec2(0,0),0).x;\n    zoom =max(0.05, mix(zoom,zoom+zoom*0.01,texelFetch(iChannel1,ivec2(KEY_X,0),0).x));\n    zoom =max(0.05, mix(zoom,zoom-zoom*0.01,texelFetch(iChannel1,ivec2(KEY_Z,0),0).x));\n    offset = texelFetch(iChannel0,ivec2(0,0),0).yz; \n    offset.x+= (texelFetch(iChannel1,ivec2(KEY_RIGHT,0),0).x - texelFetch(iChannel1,ivec2(KEY_LEFT,0),0).x)*0.001/zoom;\n    offset.y+= (texelFetch(iChannel1,ivec2(KEY_UP,0),0).x - texelFetch(iChannel1,ivec2(KEY_DOWN,0),0).x)*0.001/zoom;\n    fragColor = vec4(zoom,offset.x,offset.y,1.0);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}