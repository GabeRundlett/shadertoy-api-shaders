{
    "Shader": {
        "info": {
            "date": "1582480002",
            "description": "Ray marching tunnel kifs",
            "flags": 0,
            "hasliked": 0,
            "id": "3tGSDR",
            "likes": 6,
            "name": "Glow kifs tunnel",
            "published": 3,
            "tags": [
                "raymarching",
                "tunnel",
                "kifs"
            ],
            "usePreview": 0,
            "username": "rodgzilla",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "#define time .5 * iTime\n#define ZPOS -50. + 300. * (floor(time * .5) + smoothstep(.0, .1, fract(time * .5)))\n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a) {\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat sph(vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat tube(vec3 p, vec3 a, vec3 b, float r) {\n  vec3 ab = b - a;\n  vec3 ap = p - a;\n  float t = dot(ab, ap) / dot(ab, ab);\n  t = clamp(t, 0., 1.);\n  vec3 c = a + ab * t;\n  \n  return length(p - c) - r;\n}\n\nvec3 rep(vec3 p, vec3 r) {\n  vec3 q = mod(p, r) - .5 * r;\n  \n  return q;\n}\n\nvec3 kifs(vec3 p, float s, float r, float it, float tmin, float tmax, float shift) {\n    float t = shift + floor(time * .5) + smoothstep(tmin, tmax, fract(time * .5));\n    \n    for (float i = 0.; i < it; i++) {\n        p.xy *= rot2d(t * .7);\n        p.yz *= rot2d(t * .8 - i);\n        p = abs(p);\n        p -= s;\n        s *= r;\n    }\n\n\treturn p;\n}\n\nfloat at = 0.;\nfloat map(vec3 p) {\n    float basez = p.z / 50.;\n    p.xy *= rot2d(p.z / 30.);\n    p = rep(p, vec3(40.));\n\tp = kifs(p, 3., .7, 3., .8, 1., basez);\n\tp = kifs(p, 3., .7, 2., .6, .8, basez);\n    float d = 1000.;\n  \tfloat obj = 3000.;\n    vec3 base = vec3(1, 0, 0);\n    float ttube = floor(time * .5) + smoothstep(.2, .4, fract(time * .5));\n    float tshift = floor(time * .5) + smoothstep(.4, .6, fract(time * .5));\n    float ntube = 6. + 3. * sin(ttube);\n    for (float i = 0.; i < ntube; i++) {\n        float angle = i * 2. * PI / ntube;\n        vec3 shift = vec3(1., 0, 0);\n        shift.xy *= rot2d(tshift * PI);\n        vec3 a = vec3(0) + shift;\n        vec3 b = vec3(2. * cos(angle), 2. * sin(angle), 0);\n        obj = min(obj, tube(p, a, b, .3));\n    }\n    d = min(d, obj);\n    \n    \n    at += .1 / (.1 + d);\n  \n    return d;\n}\n\n\nvec3 glow = vec3(0, 0, 0);\nfloat rm(vec3 ro, vec3 rd) {\n  float d = 0.;\n  \n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    \n    d += ds * 1.;\n    glow += .02 * at * vec3(0, 1., 0.);\n  }\n  \n  return d;\n}\n\nvec3 normal(vec3 p) {\n  vec2 e = vec2(0.01, 0);\n  \n  vec3 n = map(p) - vec3(\n    map(p - e.xyy),\n    map(p - e.yxy),\n    map(p - e.yyx)\n  );\n  \n  return normalize(n);\n}\n\nfloat light(vec3 p) {\n  vec3 lp = vec3(0, 0, ZPOS);\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  vec3 n = normal(p);\n  float dif = dot(n, tln);\n  float d = rm(p + .01 * n, tln);\n  \n  if (d < length(tl)) {\n    dif *= .1;\n  }\n  \n  return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n\tvec3 ro = vec3(0, 0, ZPOS);\n  \tvec3 rd = normalize(vec3(uv, 1.));\n  \tfloat d = rm(ro, rd);\n  \tvec3 p = ro + d * rd;\n\n//    float dif = light(p);\n//  \tvec3 col = vec3(dif);\n    \n \tvec3 col = .2 * glow;\n   \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}