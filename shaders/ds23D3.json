{
    "Shader": {
        "info": {
            "date": "1668273130",
            "description": "i want to create a equilateral triangle by modifying the radius on a circle",
            "flags": 0,
            "hasliked": 0,
            "id": "ds23D3",
            "likes": 2,
            "name": "i really need this formula",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "vec4 f_o_dist_flower(\n    vec2 o_pix_cor_nor,\n    vec2 o_target, \n    float n_leaves\n){\n    vec2 o_delta = o_pix_cor_nor - o_target;\n    float n_tau = 6.2831;\n    float n_angle = atan(o_delta.x , o_delta.y);\n    float n_leave = n_angle / (n_tau/n_leaves); \n    float n_angle_mod_norm = fract(n_leave);\n    float n_dist_squared = o_delta.x * o_delta.x + o_delta.y * o_delta.y;\n    float n_dist_sqrt_root = sqrt(n_dist_squared);\n    float n_radius_outcircle = n_dist_sqrt_root;\n    float n_dist_sqrt_root_modded = 0.0;\n    \n    float n_incircle_radius_regular_polygon = n_radius_outcircle * cos((n_tau/2.0)/n_leaves);\n    //https://www.desmos.com/calculator/xeiqmbj1ee?lang=de\n    float n_angle_mod_norm_linear_inout = abs(n_angle_mod_norm - 0.5) * -2.0 + 1.0;\n    float n_angle_mod_norm_exp_inout = \n        pow((n_angle_mod_norm - 0.5), 2.0) * -4.0 + 1.0;\n        \n    float n_angle_mod_norm_special_inout = \n        pow(mod(n_angle_mod_norm+0.5, 1.0)-0.5, 2.0)*4.0;\n        \n   float n_angle_mod_norm_sin_inout = \n        sin(n_tau * n_angle_mod_norm * 0.5);\n   \n   float n_angle_mod_norm_sin_mirrored_inout = \n        sin(n_tau * mod(n_angle_mod_norm+0.5, 1.0) * 0.5) *-1.0 + 1.0;     \n    \n    return \n        vec4(\n            //n_radius_outcircle-((n_radius_outcircle-n_incircle_radius_regular_polygon)*n_angle_mod_norm_exp_inout), \n            //n_radius_outcircle-((n_radius_outcircle-n_incircle_radius_regular_polygon)*n_angle_mod_norm_special_inout), \n            //n_radius_outcircle-((n_radius_outcircle-n_incircle_radius_regular_polygon)*n_angle_mod_norm_linear_inout), \n            //n_radius_outcircle-((n_radius_outcircle-n_incircle_radius_regular_polygon)*n_angle_mod_norm_sin_inout),\n            n_radius_outcircle-((n_radius_outcircle-n_incircle_radius_regular_polygon)*n_angle_mod_norm_sin_mirrored_inout), // allmost it!\n            1.,1.,1.\n        );\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_pix_cor_nor = (fragCoord-0.5*iResolution.xy)/iResolution.y; \n    vec4 o_dist = vec4(1.0,1.0,1.0,1.0);\n\n    float n_sides_max = 9.0;\n    float n_sides_min = 3.0; \n    float n_sides_range = n_sides_max - n_sides_min;\n    float n_dist_lwst = 1.0;\n    for(\n        float n_side_norm = (1.0/n_sides_max)*n_sides_min;\n        n_side_norm < 1.0;\n        n_side_norm += 1.0/n_sides_max\n    ){\n        float n_side = n_side_norm*n_sides_max;\n        \n        float n_x = (1.0 / n_sides_range)*(n_sides_max - n_side)-0.5;\n        if(o_pix_cor_nor.x > n_x){\n            o_dist = f_o_dist_flower(o_pix_cor_nor, vec2(n_x+( (1.0 / n_sides_range)/2.0),0.0), n_side);\n        }\n        if(o_dist.x<n_dist_lwst){n_dist_lwst=o_dist.x;}\n\n    }\n\n    fragColor = vec4(\n        sin(n_dist_lwst*333.0)\n    ); \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}