{
    "Shader": {
        "info": {
            "date": "1468750457",
            "description": "This shader combines the previous frame with a frame from a video to give a Rorschach ink blot like effect.\n\nThe model's dark makeup mean the her eyes tend to appear in the resulting white blob, which makes faces appear.\n\n",
            "flags": 40,
            "hasliked": 0,
            "id": "4td3Wn",
            "likes": 7,
            "name": "fun with pareidolia ",
            "published": 3,
            "tags": [
                "2d",
                "face",
                "buffer",
                "rorschach"
            ],
            "usePreview": 0,
            "username": "abznak",
            "viewed": 3489
        },
        "renderpass": [
            {
                "code": "/* the interesting code is all in Buf A */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //copy Buf A to the screen\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* \n * This shader combines the previous frame with a frame for a video to give a Rorschach \n * ink blot like effect.\n * \n * Specifically, it sums the 9 adjacent pixels with 9 copies of the pixel from the video.  \n * If the x channel of the result is more than 9 (i.e. the average colour is more than half) then\n * the resulting pixel is white.  Otherwise it is black.\n */\n\n// old color, reliative to current pixel\nvec4 oldColor(in vec2 fragCoord, in vec2 dxy) {    \n    return texture(iChannel0,  (fragCoord.xy + dxy) / iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // current coordinates, normalised 0..1\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // just the use static texture for the first second.\n    const float start_time = 1.0;\n    if (iTime < start_time) {\n        fragColor = texture(iChannel1, uv);\n        return;\n    }\n \n    // sum the adjacent pixels (including the current pixel)\n    vec4 tot = vec4(0.0, 0.0, 0.0, 0.0);\n    for (float dx = -1.0; dx < 2.0; dx++) {\n        for (float dy = -1.0; dy < 2.0; dy++) {\n            tot += oldColor(fragCoord, vec2(dx, dy));                       \n        }\n    }\n    \n    // add in a pixel from the video, with the same total weight as the existing samples\n    tot += texture(iChannel2, uv) * vec4(9.0, 9.0, 9.0, 9.0);\n    \n\t// output white if x value is more than half of max\n    // I've done the calculations so far with all the channels, even though I only use x because\n    // I'm planning on doing something more interesting with the other channel's data in the future.\n    if (tot.x > 9.0) {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 mainSound( in int samp, float time )\n{\n    return vec2( 0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}