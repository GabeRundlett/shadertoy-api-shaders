{
    "Shader": {
        "info": {
            "date": "1713129127",
            "description": "3d raymarching + feedback = ???\n",
            "flags": 32,
            "hasliked": 0,
            "id": "lfVGz3",
            "likes": 5,
            "name": "3d feedback #WCCChallenge",
            "published": 3,
            "tags": [
                "raymarching",
                "feedback"
            ],
            "usePreview": 0,
            "username": "Alie",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 e = vec2(.5, 0.);\n    vec3 n = normalize(vec3(\n        texture(iChannel0, (fragCoord + e.xy) / iResolution.xy).a -\n            texture(iChannel0, (fragCoord - e.xy) / iResolution.xy).a,\n        texture(iChannel0, (fragCoord + e.yx) / iResolution.xy).a -\n            texture(iChannel0, (fragCoord - e.yx) / iResolution.xy).a,\n        .01\n    ));\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv, 0.);\n    \n    //if (col.a > 999.) {\n    //    col *= 0.;\n    //} else {\n        uv = (fragCoord * 2. - iResolution.xy) / iResolution.yy;\n        vec3 p = vec3(0,0,-5),\n        d = normalize(vec3(uv, 1));\n        p += d * col.a;\n        vec3 lp = vec3(\n            1,\n            -1,\n            -3\n            ) * 5.;\n        float l = max(0., dot(n, normalize(p - lp\n        ))) / sqrt(length(p - lp) + 1.);\n        col = vec4(l * l * 24.);\n    //}\n    col.rgb *= sin(p / 4. + iTime) *.25 + .75;//mix(vec3(1,1,0), vec3(1,0,1), fract(p.z));\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define r2d(p,a) p=cos(a) * p + sin(a) * vec2(-p.y, p.x);\nvec3 hash(vec3 p) {\n    p = fract(p * vec3(443.897,441.423,437.195));\n\tp += dot(p, p.yxz + 19.19);\n\treturn fract((p.xxy + p.yxx) * p.zyx);\n}\n\nvec3 pointOnSphere(vec2 r) {\n\tr= vec2(3.142 * 2. * r.x, 2. * r.y - 1.);\n\treturn vec3(sqrt(1.001 - r.y * r.y) * vec2(cos(r.x), sin(r.x)), r.y);\n}\n\nfloat smin(float a, float b, float k) {\n    k *= 4.;\n    float h = max(k - abs(a - b), 0.) / k;\n    return min(a, b) - h * h * k * (1. / 4.);\n}\n\nfloat df(vec3 p) {\n    return smin(\n        length(p + vec3(\n            sin(iTime * .5389), \n            cos(iTime * .8426), \n            sin(iTime * .74265)\n            ) * 2.) - 1.,\n        length(p + vec3(\n            cos(iTime * .6389), \n            sin(iTime * .7426), \n            cos(iTime * .54265)\n            ) * 2.) - 1.,\n            .9\n            \n    );\n}\n\nfloat rm(vec3 p, vec3 d) {\n    float col = 0.;\n    float td = 0.;\n    \n    for (int i=0; i<50; i++) {\n        float dist = df(p + d * td);\n        if (dist < 0.001) {\n            col = 1.;\n            break;\n        }\n        td += dist;\n       // if (td > 10.) { break; }\n    }\n    return td;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.yy;\n    vec3 p = vec3(0,0,-5),\n    d = normalize(vec3(uv, 1));\n    r2d(p.xy, iTime / 4.);\n    r2d(d.xy, iTime / 4.);\n    \n    float col;\n    if (iFrame == 0) {\n        col = rm(p, d);\n    } else {\n        uv = fragCoord / iResolution.xy;\n        col = texture(iChannel0, uv).a;\n        //if (col < 999.) {\n            vec3 q = p * d * col;\n            vec3 k = hash(vec3(round(q * .25)));\n            //q += pointOnSphere(k.xy) * 0.002;\n            //uv += pointOnSphere(k.xy).xy * 0.006 * k.z;\n            uv += hash(q).xy * 0.001 - 0.0005;\n            uv -= .5;\n            uv = r2d(uv, 0.002);\n            uv *= vec2(\n                sin(uv.x * 8. + iTime  / 3. + cos(uv.y * 12. + iTime / 4.24)),\n                cos(uv.x * 8. + iTime / 3.145 + sin(uv.x * 12. + iTime / 5.247))\n                ) * 0.002 + 1.;\n            uv += .5;\n            float col2 = texture(iChannel0, uv, 2.).a;\n            //if (distance(col, col2) < 2.) \n            col = col2;\n        //}\n        col = min(col+.05, rm(p, d));\n    }\n    \n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}