{
    "Shader": {
        "info": {
            "date": "1461591285",
            "description": "Perfect Spiral Flower - Zoom",
            "flags": 0,
            "hasliked": 0,
            "id": "XstSD2",
            "likes": 5,
            "name": "Perfect Spiral Flower - Zoom",
            "published": 3,
            "tags": [
                "perfectspiralflowerzoom"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 759
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS .001\n\n#define time (float(__LINE__)+iTime/PI)\n\nfloat saw(float x)\n{\n    return acos(cos(x))/3.14;\n}\nvec2 saw(vec2 x)\n{\n    return acos(cos(x))/3.14;\n}\nvec3 saw(vec3 x)\n{\n    return acos(cos(x))/3.14;\n}\nvec4 saw(vec4 x)\n{\n    return acos(cos(x))/3.14;\n}\nfloat stair(float x)\n{\n    return float(int(x));\n}\nvec2 stair(vec2 x)\n{\n    return vec2(stair(x.x), stair(x.y));\n}\n\nvec2 sincos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\nvec3 rotatez( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n      \nvec3 rotatez( const in vec3 vPos, const in float fAngle )\n{\n\treturn rotatez( vPos, sincos(fAngle) );\n}\nvec2 rotatez( const in vec2 vPos, const in float fAngle )\n{\n\treturn rotatez( vec3(vPos, 0.0), sincos(fAngle) ).xy;\n}\nmat4 rotatez( const in mat4 vPos, const in float fAngle )\n{\n\treturn mat4(rotatez( vec3(vPos[0].xy, 0.0), sincos(fAngle) ).xy, 0.0, 0.0,\n                rotatez( vec3(vPos[1].xy, 0.0), sincos(fAngle) ).xy, 0.0, 0.0,\n                rotatez( vec3(vPos[2].xy, 0.0), sincos(fAngle) ).xy, 0.0, 0.0,\n                rotatez( vec3(vPos[3].xy, 0.0), sincos(fAngle) ).xy, 0.0, 0.0);\n}\nvec3 phase(float map)\n{\n    return vec3(saw(map),\n                saw(4.0*PI/3.0+map),\n                saw(2.0*PI/3.0+map));\n}\n\nfloat cross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nfloat jag(float x)\n{\n    return mod(x, 1.0);\n}\nvec2 jag(vec2 x)\n{\n    return vec2(jag(x.x), jag(x.y));\n}\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c)\n{\n    vec2 duv = b-p;\n    \n    vec2 xdir = c-b;\n    vec2 ydir = a-b;\n    float w = cross(xdir, ydir);\n    return vec2((dot(duv, normalize(xdir))), (dot(duv, normalize(ydir))));\n}\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\nvec3 RotateZ( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateZ( vPos, SinCos(fAngle) );\n}\nvec2 RotateZ( const in vec2 vPos, const in float fAngle )\n{\n\treturn RotateZ( vec3(vPos, 0.0), SinCos(fAngle) ).xy;\n}\nmat4 RotateZ( const in mat4 vPos, const in float fAngle )\n{\n\treturn mat4(RotateZ( vec3(vPos[0].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[1].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[2].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[3].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0);\n}\nmat4 translate( const in mat4 vPos, vec2 offset )\n{\n\treturn mat4(vPos[0].xy+offset, 0.0, 0.0,\n                vPos[1].xy+offset, 0.0, 0.0,\n                vPos[2].xy+offset, 0.0, 0.0,\n                vPos[3].xy+offset, 0.0, 0.0);\n} \nmat4 scale( const in mat4 vPos, vec2 factor )\n{\n\treturn mat4(vPos[0].xy*factor, 0.0, 0.0,\n                vPos[1].xy*factor, 0.0, 0.0,\n                vPos[2].xy*factor, 0.0, 0.0,\n                vPos[3].xy*factor, 0.0, 0.0);\n} \nvec4 tree(vec4 uv)\n{\n    vec4 uv0 = uv;\n\n    mat4 last = mat4(0.0);\n    float mind = 1.0E32;\n    float omega = atan(uv.y, uv.x);\n    const int max_iterationts = 18;\n    \n    \n    for(int i = 0; i < max_iterationts; i++)\n    {\n    \tfloat iteration = PI*2.0*(float(i)/(float(max_iterationts) ));//*(1.0+saw(time+float(i)))));\n        \n        mat4 square = mat4(-1.0, -1.0, 0.0, 0.0,\n                           1.0, -1.0, 0.0, 0.0,\n                           1.0, 1.0, 0.0, 0.0,\n                           0.0, 1.0, 0.0, 0.0);\n\n        float size =  .5;\n\n        \n        float r = iteration;\n        float theta = omega+iteration;\n        square = RotateZ(square, theta+PI/2.0);\n        \n        vec2 center = vec2(cos(theta), sin(theta));\n        square = translate(square, center);\n\t\tcenter = square[1].xy;\n        float d = length(center-uv0.xy);\n        if(d < mind)\n        {\n            last = square;\n            mind = d;\n            omega = theta;\n        }\n    }\n    \n    vec4 uv1 = vec4(invBilinear(uv0.xy, last[0].xy, last[1].xy, last[2].xy), mind,omega);\n\n    return vec4(uv1.xy, uv0.z+omega/PI, uv0.w);\n}\n\nvec2 spiral(vec2 uv, out float layer, float turns)\n{\n    //uv = normalize(uv)*log(length(uv)+1.0);\n    float r = length(uv);\n    \n    r += layer;\n    float theta = (atan(uv.y, uv.x)*turns);\n    layer += stair(r/PI/2.0);\n    uv = saw(vec2(r*PI-time*PI*4.0, theta+time));\n    return uv;\n}\n\nfloat square(vec2 uv, float iteration, float depth)\n{\n    return saw(sqrt(clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))*PI+depth)/iteration;\n\tif(abs(abs(saw(uv.x*(1.5+sin(iTime*.654321))*PI+iTime*.7654321)*2.0-1.0)-abs(uv.y)) < .5)\n\t\treturn 1.0-abs(abs(saw(uv.x*(1.5+sin(iTime*.654321))*PI+iTime*.7654321)*2.0-1.0)-abs(uv.y))/.5*uv.x;\n\telse\n\t\treturn 0.0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float z = 0.0;\n    \n    float map = 1.0/length(uv*2.0-1.0);\n    \n    float scale = log(time)/log(PI);//pow(E, amplitude*log(saw(iTime/lambda)+E));\n    uv *= scale*scale*2.0;\n    uv -= scale*scale;\n\tuv.x *= iResolution.x/iResolution.y;\n\n    uv = rotatez(vec3(uv, 0.0), time).xy;\n    uv = normalize(uv)*log(length(uv));\n    \n    \n        map *= 1.0+square(uv, 9.0, z*PI);\n    uv = spiral(uv, z, stair(4.0+3.0*saw(time)));\n    uv = rotatez(vec3(uv, 0.0), time).xy;\n        map *= 1.0+square(uv*2.0-1.0, 1.0, z*PI);\n    uv = spiral(uv*2.0-1.0, z, 2.0+2.0*saw(time));\n\n\n\tconst int max_iterations = 4;\n\n    float noise = 0.0;\n    \n    float wrapup = 1.0;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iterations = float(i)/float(max_iterations);\n        \n        map *= 1.0+iterations*square(uv, iterations, z)*wrapup;\n        uv = saw(tree(vec4(uv, iterations, z)).xy*PI)*wrapup+(1.0-wrapup)*uv; \n        \n        noise += map*wrapup;\n        \n        float orbit = (saw(time/.75)*1.0+.25)*(float(max_iterations));\n        \n        if(i > int(orbit))\n           break;\n        wrapup = clamp(orbit-float(i), 0.0, 1.0);\n    }\n    map = log(map+noise+z)*PI + time/PI;\n    \n    fragColor.rg = uv;\n    fragColor.b = 0.0;\n    \n    vec3 jolt = 1.0-pow(saw(time+z), 4.0)*\n        \t\t\tphase(time+z);\n    \n    fragColor = vec4(vec3(saw(map+jolt.x),\n                          saw(4.0*PI/3.0+map+jolt.y),\n                          saw(2.0*PI/3.0+map+jolt.z)),\n                     1.0);\n\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}