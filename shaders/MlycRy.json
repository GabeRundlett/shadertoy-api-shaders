{
    "Shader": {
        "info": {
            "date": "1536858803",
            "description": "Inspired by https://www.shadertoy.com/view/4sl3Dr.\nVoronoi noise is based on iq's article https://iquilezles.org/articles/voronoilines/voronoilines.htm.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlycRy",
            "likes": 54,
            "name": "Demo - Voronoi Noise",
            "published": 3,
            "tags": [
                "3d",
                "voronoi",
                "noise",
                "octave"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 3182
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n\nvec2 hash2(vec2 p) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*43758.5453); }\n\nmat3 lookAt( in vec3 eye, in vec3 center, in vec3 up )\n{\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nfloat voronoiDistance( in vec2 pos )\n{\n\tvec2 p = floor(pos), f = fract(pos);\n    float u = 0.5 * (sin(iTime-0.5*PI) + 1.0);\n    \n\tvec2 res = vec2(8.0);\n\tfor(int i = -1; i <= 1; i ++)\n\tfor(int k = -1; k <= 1; k ++)\n\t{\n\t\tvec2 b = vec2(i, k);\n\t\tvec2 r = b - f + hash2(p + b) * u;\n\t\t\t\n\t\tfloat d = dot(r, r);\n        \n\t\tif(d < res.x){\n            res.y = res.x; \n            res.x = d; \n        } \n        else if(d < res.y){\n            res.y = d; \n        }\n\t}\n\treturn res.y - res.x;\n}\n\nvec3 render( in vec3 rayOri, in vec3 rayDir )\n{\n    float theta = 2.0 * (acos(0.5*rayDir.x) / PI) - 1.0;\n    float phi = atan(rayDir.y, rayDir.z) / PI;\n    vec2 uv = vec2(theta, phi);\n    \n    float v = 0.0;\n\tfor(float i = 0., a = .6, f = 8.; i < 3.; ++i, f*=2., a*=.6)\n\t{\t\n\t\tfloat v1 = 1.0 - smoothstep(0.0, 0.2, voronoiDistance(uv * f));\n\t\tfloat v2 = 1.0 - smoothstep(0.0, 0.2, voronoiDistance(uv * f * 0.5 + iTime));\n        float intensity = 0.5 * (cos(iTime) + 1.0);\n\t\tv += a * (pow(v1 * (0.5 + v2), 2.0) + v1 * intensity + 0.1);\n\t}\n\t\n\tvec3 c = vec3(8.0, 3.0, 2.0);\n\tvec3 col = vec3(pow(v, c.x), pow(v, c.y), pow(v, c.z)) * 2.0;\n\t\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 rayOri = vec3(0.0);\n    vec2 mouse = (iMouse.z > 0.5) ? 5.0*(2.0*iMouse.xy/iResolution.xy-1.0) : vec2(0.0);\n    vec3 rayTgt = vec3(cos(mouse.x), mouse.y, sin(mouse.x));\n    \n    mat3 viewMat = lookAt(rayOri, rayTgt, vec3(0.0, 1.0, 0.0));\n    vec3 rayDir = normalize(viewMat * vec3(uv, -1.0));\n\n    vec3 col = render(rayOri, rayDir);\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}