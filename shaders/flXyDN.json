{
    "Shader": {
        "info": {
            "date": "1647987536",
            "description": "Another glowing fractal pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "flXyDN",
            "likes": 5,
            "name": "Painted glass",
            "published": 3,
            "tags": [
                "fractal",
                "glass"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += (iTime+8.)/vec2(2.0,3.0)/t1/8.0;\n    float scale = c1.z;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);\n    //float s1 = 1.;\n    for(int k = 0; k < 12; k++){\n        vec2 uv1 = uv;\n        uv -= (t2.yx);\n        \n        //uv.x -= sign(uv.x)/2.;\n        //uv.y -= sign(uv.y)/2.;\n\n        t2 = triangle_wave(uv.yx+.5,scale).yx/2.;\n        t3 = triangle_wave(uv,scale).yx;      \n        uv.yx = t3/1.5-t2;\n        \n        float m1 = uv.x;\n        \n        \n        //More interesting patterns here:\n        //float m1 = (uv.y-uv.x)/(1.-t2.x);\n        //float m1 = (uv.y+uv.x)/2./(1.-t2.x);\n\n        //float m1 = uv.x-uv.y;\n        //float m1 = uv.y-uv.x;\n        //float m1 = uv.x*float(k%2)+uv.y*float((k+1)%2);\n        \n        col.x = max(m1,col.x);\n        col = abs(col.yzx-vec3(col.x*(2.125-t2.y)));\n        uv /= scale+normalize(uv).x/3.;\n        uv -= float(k%3)/2.;\n        //uv -= float(k%3+5)/2.;\n\n        \n        //if(k>3) uv.x += iTime/s1/4.;\n        //s1 *= scale;\n        //uv /= 1.+normalize(t2).x/3.;\n    }\n    fragColor = vec4(col*2.,1.0);   \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}