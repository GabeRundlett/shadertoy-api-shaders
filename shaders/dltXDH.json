{
    "Shader": {
        "info": {
            "date": "1685441474",
            "description": "Trying to make the bi-directional path for cars..\n\nAll year long I'm going to just focus on truchet tiles and the likes!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "dltXDH",
            "likes": 14,
            "name": "Year of Truchets #028",
            "published": 3,
            "tags": [
                "2d",
                "truchet",
                "city",
                "track",
                "cars"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Year of Truchets #028\n    05/30/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n    dual motion tracks - for cars and stuff.\n    \n    @Shane & @iq for compact noise in common tab\n*/\n\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI         3.14159265359\n#define PI2        6.28318530718\n\nconst float tc = .2;\nconst float trs = .45;\nconst float spd = 1.15;\nconst float bl = .05;\nconst vec2 bx = vec2(.45,.075);\nconst float amt = 6.;\n\nfloat scale = 5.;\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a));}\nvec3 hue(float a) { return .65+.35*sin(PI*a*vec3(1,.97,.93)*vec3(0.875,0.400,0.149));}\nfloat hash21(vec2 a) { return fract(sin(dot(a, vec2(27.609, 47.583)))*43758.5453);}\n\n//@iq sdf\nfloat box( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    if(R.x>1200.) scale = 9.; //up scale on fullscreen\n    \n    vec3 C = vec3(.7001);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    \n    uv *= scale;\n    uv *= rot(.06*sin(T*.12));\n    uv += vec2(2.33*sin(T*.15),T*.3);\n\n    float px = fwidth(uv.x); \n    vec2 id = floor(uv);\n    vec2 q = fract(uv)-.5;\n \n    float hs = hash21(id);\n    float ck = mod(id.x+id.y,2.)*2.-1.;\n    if(hs>.5) q.x = -q.x;\n\n    vec2 uv2 = vec2(length(q-.5),length(q+.5));\n    vec2 p = uv2.x<uv2.y? q-.5 : q+.5;\n\n    // main pattern\n    float d = length(p)-.5;\n    d = abs(d)-tc;\n\n    // moving truchet parts\n    vec2 arc = q-sign(q.x+q.y+.001)*.5;\n    float angle = atan(arc.x, arc.y);\n    float ud = length(arc);\n\n    float x = fract(amt*ck*angle/PI+T*spd);\n    float y = (ud/.5)-.5;\n    float z = fract(amt*ck*angle/PI-T*spd);\n\n    vec2 cid = vec2(floor(ud-(.5-tc))/(2.*tc),floor(amt*ck*angle/PI+T*spd));\n    vec2 did = vec2(floor(ud-(.5-tc))/(2.*tc),floor(amt*ck*angle/PI-T*spd));\n    cid.y = mod(cid.y,amt);\n    did.y = mod(did.y,amt);\n    \n    vec3 K = hue((cid.y*.2)+75.);\n    vec3 R = hue((did.y*.2)+125.);\n    if(mod(cid.y,4.)==0.) K=vec3(.6);\n    if(mod(did.y,3.)!=0.) R=vec3(.6);\n    \n    if(hs<.5 ^^ ck>0.) y=1.-y;\n    \n    vec2 tuv = vec2(x,y);\n    float k = box(tuv+vec2(0,.1)-.5, bx)-.012;\n    float k2 = box(vec2(z,y-.1)-.5, bx)-.012;\n\n    // gnd\n    float sc = 6.;\n\n    vec2 iv = floor(uv*sc)+id;\n    vec2 vv = fract(uv*sc)-.5;\n    float xs = fbm(vec3(iv.x,0,iv.y)*.035);\n    xs = smoothstep(.5,.95,xs);\n    float cy = length(vv)-(xs*.55);\n\n    if (xs>.1) {\n        float fx = fwidth(uv.x*sc); \n        C = mix(C,vec3(clamp(.7-xs,.2,1.)),smoothstep(fx,-fx,cy));\n    } \n\n    C = mix(C,C*.65,smoothstep(.05+px,-px,d-.015));\n        \n    C = mix(C,vec3(.4),smoothstep(px,-px,abs(d)-.025));\n    C = mix(C,vec3(.7001),smoothstep(px,-px,d));\n\n    C = mix(C,K,smoothstep(px,-px,k));\n    C = mix(C,R,smoothstep(px,-px,k2));\n\n    C = pow(C,vec3(.4545));\n    O = vec4(C,1.);\n}\n\n\n    \n        \n    \n        \n    \n    ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n*/\n\n// @Shane - a very tightly compacted, self-contained version \n// of IQ's 3D value noise function.\n//---------------------------------------------------------------\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n//---------------------------------------------------------------\n// @iq fbm generator\nfloat fbm( in vec3 x) {\n    float a = 0.1,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for (int i = 0; i < 4; ++i) {      \n        float n = n3D(f*x);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}