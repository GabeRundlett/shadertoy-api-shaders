{
    "Shader": {
        "info": {
            "date": "1708430278",
            "description": "Pi and fractals\n\nMy first shader creation ! Don't be rude with that please ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "M32GW1",
            "likes": 3,
            "name": "PI Fractals",
            "published": 3,
            "tags": [
                "fractals"
            ],
            "usePreview": 0,
            "username": "Lehomar2vinci",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "// Nathan Ch as Lehomar2vinci's creation -----> https://lehomar2vinci.itch.io/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Init config\n    const float PI = 3.141592653589793;\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec2 symUv = uv;\n\n    // Apply symetry\n    symUv.x = abs(symUv.x);\n\n    // Animation\n    float time = iTime * 0.1;\n\n    // Fractals var modified for anim\n    const int maxIterations = 100;\n    float zoom = 0.6 + sin(time) * 0.5; // Animated zoom\n    vec2 c = symUv * zoom - vec2(0.6 + sin(time) * 0.5, sin(time) * 0.5);\n    vec2 z = vec2(0.0, 0.0);\n    int i;\n    for(i = 0; i < maxIterations; i++) {\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        if(length(z) > 2.0) break;\n    }\n\n    // Calculate colour W/animation\n    float hue = float(i) / float(maxIterations) + time;\n    vec3 color = vec3(0.5 + 0.5*cos(PI*hue + vec3(0, 2, 4)));\n\n    // Add lum\n    color = pow(color, vec3(0.5));\n\n    // Final color Rendering\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}