{
    "Shader": {
        "info": {
            "date": "1695737333",
            "description": "Find all of the runtime bugs placed in the Image code tab! None of the code in the Common tab is broken.",
            "flags": 0,
            "hasliked": 0,
            "id": "msKcRR",
            "likes": 0,
            "name": "Fork 566 Debugg Zaleki 227",
            "published": 3,
            "tags": [
                "labwork"
            ],
            "usePreview": 0,
            "username": "Zaleki",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "\nvoid raycast(vec2 uv, out vec3 dir,\n             out vec3 eye, out vec3 ref) {\n    eye = rotateY(vec3(0.0, 0.0, 15.0), sin(iTime * 0.1) * 3.14159 * 0.5);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y; // ============== bug2 ==============\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < 256; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 d, vec3 n) {\n    switch(hitObj) {\n        case 0:\n        // Center sphere\n        return vec3(1.0, 0.67, 0.67);\n        break;\n        case 1:\n        // Back sphere\n        return vec3(0.67, 1.0, 0.67);\n        break;\n        case 2:\n        // Front sphere\n        return vec3(0.67, 0.67, 1.0);\n        break;\n        case 3:\n        // Floor\n        float t = floor(mod((sin(p.x) + sin(p.z)) * 0.5, 2.0));\n        return mix(vec3(0.7, 0.4, 0.2), vec3(1.0), t);\n        break;\n        case -1:\n        // Background\n        break;\n    }\n    return vec3(255.0, 229.0, 119.0) / 255.0;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    if(t == -1.0) {\n        return Intersection(t, skyColor(dir),\n                            vec3(eye + 1000.0 * dir),\n                            -1);\n    }\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 material = computeMaterial(hitObj, isect, dir, nor);\n    \n    // Specular reflection applied to all surfaces\n    dir = reflect(dir, nor); // ============= bug4 =============\n    march(isect + dir * 0.01, dir, t, hitObj);\n    vec3 specReflCol;\n    if(hitObj == -1) {\n        specReflCol = skyColor(dir);\n    }\n    else {\n        vec3 isect2 = isect + t * dir;\n        nor = computeNormal(isect2);\n        specReflCol = computeMaterial(hitObj, isect2, dir, nor);\n    }\n    float fresnel = 1.0 - max(0.0, dot(normalize(eye - isect), nor));\n    fresnel = 0.25 + 0.75 * fresnel;\n    vec3 sdfColor = mix(material, specReflCol * material, fresnel);\n    \n    return Intersection(t, sdfColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0); // =========== bug 1 =============\n    \n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref); // ============= bug3 ===============\n    fragColor = vec4(sdf3D(dir, eye).color, 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define HALF_PI 1.570795\n#define MAIN_LIGHT_DIR normalize(vec3(1.0, 0.2, -0.4))\n\n// put all bugs in Image tab\n\n// todo in broken one, hard code these in two diff scenemap3d\n#define RED_SPH_POS vec3(0.)\n#define GRN_SPH_POS vec3(4.0, 0.0, -4.0)\n#define BLU_SPH_POS vec3(-4.0, 0.0, 4.0)\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n\n\nfloat random1(vec2 p) {\n  return fract(sin(dot(p, vec2(456.789, 20487145.123))) * 842478.5453);\n}\n\nfloat random1( vec3 p ) {\n  return fract(sin(dot(p, vec3(127.1, 311.7, 191.999))) * 43758.5453);\n}\n\nvec2 random2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);\n}\n\nfloat mySmootherStep(float a, float b, float t) {\n  t = t*t*t*(t*(t*6.0 - 15.0) + 10.0);\n  return mix(a, b, t);\n}\n\n\nfloat interpNoise3D1(vec3 p) {\n  vec3 pFract = fract(p);\n  float llb = random1(floor(p));\n  float lrb = random1(floor(p) + vec3(1.0,0.0,0.0));\n  float ulb = random1(floor(p) + vec3(0.0,1.0,0.0));\n  float urb = random1(floor(p) + vec3(1.0,1.0,0.0));\n\n  float llf = random1(floor(p) + vec3(0.0,0.0,1.0));\n  float lrf = random1(floor(p) + vec3(1.0,0.0,1.0));\n  float ulf = random1(floor(p) + vec3(0.0,1.0,1.0));\n  float urf = random1(floor(p) + vec3(1.0,1.0,1.0));\n\n  float lerpXLB = mySmootherStep(llb, lrb, pFract.x);\n  float lerpXHB = mySmootherStep(ulb, urb, pFract.x);\n  float lerpXLF = mySmootherStep(llf, lrf, pFract.x);\n  float lerpXHF = mySmootherStep(ulf, urf, pFract.x);\n\n  float lerpYB = mySmootherStep(lerpXLB, lerpXHB, pFract.y);\n  float lerpYF = mySmootherStep(lerpXLF, lerpXHF, pFract.y);\n\n  return mySmootherStep(lerpYB, lerpYF, pFract.z);\n}\n\n\nfloat fbm(vec3 p, float octaves) {\n  float amp = 0.5;\n  float freq = 8.0;\n  float sum = 0.0;\n  float maxSum = 0.0;\n  for(float i = 0.0; i < 10.0; ++i) {\n    if(i == octaves)\n    break;\n    maxSum += amp;\n    sum += interpNoise3D1(p * freq) * amp;\n    amp *= 0.5;\n    freq *= 2.0;\n  }\n  return sum / maxSum;\n}\n\n\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat box(vec3 p, vec3 b) {\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat torus(vec3 p, vec2 t) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nvec3 rotateX(vec3 p, float amt) {\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Map a ray direction to a color for the background\n// This function is called when a ray hits nothing\nvec3 skyColor(vec3 dir) {\n    float t = smoothstep(0.0, 1.0, dir.y);\n    t = clamp(0.0, 1.0, t + fbm(dir / 8.0, 4.0) * 0.1);\n    t = fbm(dir / 8.0, 6.0);\n    t = smoothstep(0.0, 1.0, t);\n    vec3 dawnGradient = mix(vec3(253.0, 96.0, 81.0) / 255.0, vec3(255.0, 229.0, 119.0) / 255.0, t);\n    vec3 duskGradient = mix(vec3(48.0, 24.0, 96.0) / 255.0, vec3(144.0, 96.0, 144.0) / 255.0, t);\n    t = max(0.0, dot(dir, MAIN_LIGHT_DIR));\n    return mix(duskGradient, dawnGradient, t);\n}\n\n\n\n// Version that just returns the t value, for surface normal computation\nfloat sceneMap3D(vec3 pos) {\n    float t = sphere(pos, 2.0, RED_SPH_POS);\n    t = min(t, sphere(pos, 2.0, GRN_SPH_POS));\n    t = min(t, sphere(pos, 2.0, BLU_SPH_POS));\n    t = min(t, box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0)));\n    return t;\n}\n\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\n// Version that returns t value and the ID of the object hit\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = sphere(pos, 2.0, RED_SPH_POS);\n    float t2;\n    obj = 0; // 0 is center sphere\n    if((t2 = sphere(pos, 2.0, GRN_SPH_POS)) < t) {\n        t = t2;\n        obj = 1; // 1 is left sphere\n    }\n    if((t2 = sphere(pos, 2.0, BLU_SPH_POS)) < t) {\n        t = t2;\n        obj = 2; // 2 is right sphere\n    }\n    if((t2 = box(pos + vec3(0.0, 3.0, 0.0), vec3(50.0, 1.0, 50.0))) < t) {\n        t = t2;\n        obj = 3; // 3 is floor\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}