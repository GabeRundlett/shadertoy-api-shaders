{
    "Shader": {
        "info": {
            "date": "1375316594",
            "description": "Based on Struss - Virus shader, uses his and iq's formulas to map the checkerboard texture and noise it up some, feel free to suggest improvements",
            "flags": 64,
            "hasliked": 0,
            "id": "ldXGRX",
            "likes": 56,
            "name": "Procedural Tech Rings",
            "published": 3,
            "tags": [
                "rings",
                "fast",
                "tech",
                "skyball",
                "struss"
            ],
            "usePreview": 0,
            "username": "weyland",
            "viewed": 4455
        },
        "renderpass": [
            {
                "code": "// srtuss, 2013\n\n#define PI 3.14159265358979323\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat fft(float band)\n{\n    return texture( iChannel1, vec2(band,0.0) ).x;\n}\n\n// iq's fast 3d noise tortured\nfloat noise3(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f * f * (3.0 - 2.0 * f);\n\tvec2 uv = (p.xy + vec2(37.0, 17.0+smoothstep(0.8,0.99, fft(0.))) * p.z) + f.xy;\n\tvec2 rg = texture(iChannel0, (uv + 0.5) / 256.0, -100.0).yx;\n\trg += texture(iChannel0, (uv + iTime) / 64.0, -100.0).yx/10.0;\n\trg += texture(iChannel0, (uv + iTime/3.2 + 0.5) / 100.0, -100.0).zx/5.0;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n// 3d fbm\nfloat fbm3(vec3 p)\n{\n\treturn noise3(p) * 0.5 + noise3(p * 2.02) * 0.25 + noise3(p * 4.01) * 0.125;\n}\n\n// animated 3d fbm\nfloat fbm3a(vec3 p)\n{\n\tvec2 t = vec2(iTime * 0.4, 0.0);\n\treturn noise3(p + t.xyy) * 0.5 + noise3(p * 2.02 - t.xyy) * 0.25 + noise3(p * 4.01 + t.yxy) * 0.125;\n}\n\n// more animated 3d fbm\nfloat fbm3a_(vec3 p)\n{\n\tvec2 t = vec2(iTime * 0.4, 0.0);\n\treturn noise3(p + t.xyy) * 0.5 + noise3(p * 2.02 - t.xyy) * 0.25 + noise3(p * 4.01 + t.yxy) * 0.125 + noise3(p * 8.03 + t.yxy) * 0.0625;\n}\n\n// background\nvec3 sky(vec3 p)\n{\n\tvec3 col;\n\tfloat v = 1.0 - abs(fbm3a(p * 4.0) * 2.0 - 1.0);\n\tfloat n = fbm3a_(p * 7.0 - 104.042);\n\tv = mix(v, pow(n, 0.3), 0.5);\n\t\n\tcol = vec3(pow(vec3(v), vec3(14.0, 9.0, 7.0))) * 0.8;\n    col += vec3(smoothstep(0.75,0.99,fbm3a_(p*6.))*8., 0.0, 0.0)*fft(32.);\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tfloat t = iTime;\n\t\n\tvec3 dir = normalize(vec3(uv, 1.1));\n\t\n\tdir.yz = rotate(dir.yz, sin(t/15.+smoothstep(0.99,0.999, fft(0.))));\n\tdir.xz = rotate(dir.xz, cos(t/13.));\n\tdir.xy = rotate(dir.xy, cos(t/12.+smoothstep(0.5,0.999, fft(213.))));\n\t\n\tvec3 col = sky(dir);\n\n\t// dramatize colors\n\tcol = pow(col, vec3(1.5)) * 2.0;\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 20954,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/osirismusic-uk/kryptic-minds-rule-of-language"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}