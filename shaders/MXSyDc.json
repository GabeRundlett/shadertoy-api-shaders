{
    "Shader": {
        "info": {
            "date": "1727813037",
            "description": "golden raymarched heart ",
            "flags": 0,
            "hasliked": 0,
            "id": "MXSyDc",
            "likes": 6,
            "name": "golden heart",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Lewy2789",
            "viewed": 52
        },
        "renderpass": [
            {
                "code": "float smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nmat2 rot2D(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(.4, .7, .7);\n    vec3 b = vec3(0., .1, .1);\n    vec3 c = vec3(0., .5, 2.);\n    vec3 d = vec3(0., .5, iTime);\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvec3 quintic( vec3 x )\n{\n  return x*x*x*(x*(x*6.0-15.0)+10.0);\n}\n\nvec3 hash33(vec3 seed){\n    seed = fract(seed*vec3(1234.45,2345.56,3456.67));\n    seed += dot(seed, seed+4567.78);\n    return 2.*fract(seed)-1.;\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = quintic(w);\n\n    vec3 ga = hash33( p+vec3(0.0,0.0,0.0) );\n    vec3 gb = hash33( p+vec3(1.0,0.0,0.0) );\n    vec3 gc = hash33( p+vec3(0.0,1.0,0.0) );\n    vec3 gd = hash33( p+vec3(1.0,1.0,0.0) );\n    vec3 ge = hash33( p+vec3(0.0,0.0,1.0) );\n    vec3 gf = hash33( p+vec3(1.0,0.0,1.0) );\n    vec3 gg = hash33( p+vec3(0.0,1.0,1.0) );\n    vec3 gh = hash33( p+vec3(1.0,1.0,1.0) );\n    \n    float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n    float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n    float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n    float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n    float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n    float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n    float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n    float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n\t\n    return va + \n           u.x*(vb-va) + \n           u.y*(vc-va) + \n           u.z*(ve-va) + \n           u.x*u.y*(va-vb-vc+vd) + \n           u.y*u.z*(va-vc-ve+vg) + \n           u.z*u.x*(va-vb-ve+vf) + \n           u.x*u.y*u.z*(-va+vb+vc-vd+ve-vf-vg+vh);\n}\n\nfloat fbm( in vec3 x, in float H )\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    int numOctaves = 5;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        t += a*noise(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\n\nvec3 noiseColor(vec2 uv, float d, float H){\n    float n = fbm(vec3(uv, d), H);\n\n    float mask = smoothstep(-.7,1., n);\n    return mask * palette(n*2.);\n}\n\nfloat sdHeart(vec3 q){\n    float r = 1.0;\n    \n    float x = abs(q.x);\n    float y = q.y;\n    float z = q.z;\n    y = y*1.2 - x*sqrt(max((5.0-x)/15.0,0.0));\n    z *= 2.0 - y/15.0;\n    float d = sqrt(x*x+y*y+z*z) - r;\n    d = d/3.;\n    return d;\n}\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\n\nvec2 map(vec3 p) {\n    p.y -= 2.;\n    p.xy *= rot2D(-sin(iTime));\n    p.y += 2.5;\n    \n    vec3 pc = p;\n    float chain = sdLink(pc-vec3(0.,.9,0.), .2, .2, .1);\n    pc -= vec3(0.,1.5,0.);\n    pc.xz *= rot2D(1.570796);\n    chain = min(chain, sdLink(pc, .2, .2, .1));\n    pc -= vec3(0.,.6,0.);\n    pc.xz *= rot2D(1.570796);\n    chain = min(chain, sdLink(pc, .2, .2, .1));\n    \n    \n    \n    float heart1 = sdHeart(p);\n    float heart2 = sdHeart(p*vec3(1.3, 1.3, .05));\n    float outside = max(heart1, -heart2);\n    outside = smin(outside, chain, .05)-.02;\n    \n    \n   \n    float inside = sdHeart(p);\n    \n    if(inside < outside){\n        return vec2(inside, 0.);\n    }\n   \n    return vec2(outside, 1.);\n}\n\nvec3 getNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat rayMarch(vec3 origin, vec3 dir){\n\n    float dist = 0.;\n    \n    for(int i = 0; i < 80; i++){\n        vec3 p = origin + dist * dir;\n        \n        float d = map(p).x;\n        \n        dist += d;\n        \n        if(d < .005 || dist > 100.) break;\n    }\n    \n    return dist;\n}\n\nfloat getLight(vec3 p, vec3 eyePos){\n    vec3 lightPos = vec3(5., 5., -5.);\n    \n    vec3 n = getNormal(p);\n    vec3 l = normalize(lightPos - p);\n    \n    float diff =  clamp(dot(l, n), 0., 1.);\n    \n    vec3 viewDir = normalize(eyePos - p);\n    vec3 reflectDir = reflect(-l, n);\n    float spec = pow(clamp(dot(viewDir, reflectDir), 0.0, 1.0), 5.0);\n    \n    return max(.05, diff*.3 + spec);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.x;\n    vec3 dir = normalize(vec3(uv, 1.));\n    \n    vec3 origin = vec3(0., 0., -3.);\n    \n    float dist = rayMarch(origin, dir);\n    \n    vec3 p = origin + dist * dir;\n    \n    float c = map(p).y;\n    float diff = getLight(p, origin);\n    \n    vec3 col = vec3(.1);\n    if(dist < 100.){\n        if(c < .5){\n            col = noiseColor(p.xy, p.z+iTime*.1, 1.);\n            col += noiseColor(p.xy+5., p.z+iTime*.2, 1.)*.5;\n        }\n        else{\n            col = vec3(.9,.75,.25);\n            col *= diff;\n        }\n    }\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}