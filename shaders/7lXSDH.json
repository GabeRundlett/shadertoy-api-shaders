{
    "Shader": {
        "info": {
            "date": "1625581345",
            "description": "hand drawing effect\n...i used to draw a lot, now i let computers pursue my hobbies ;)\n\ntook aspect ratio into account, so webcams dont get quenched too much\n...so try your webcam instead of jean claude ;)",
            "flags": 32,
            "hasliked": 0,
            "id": "7lXSDH",
            "likes": 2,
            "name": "Fork notebook polar sin work on",
            "published": 3,
            "tags": [
                "effect",
                "pencil",
                "drawing",
                "hand"
            ],
            "usePreview": 0,
            "username": "firebreathz",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// Fork of \"Fork notebook polar sin\" by firebreathz. https://shadertoy.com/view/7tXSDH\n// 2021-07-06 14:20:40\n\n// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// trying to resemle some hand drawing style\n\n\n#define SHADERTOY\n#ifdef SHADERTOY\n#define Res0 iChannelResolution[0].xy\n#define Res1 iChannelResolution[1].xy\n#else\n#define Res0 textureSize(iChannel0,0)\n#define Res1 textureSize(iChannel1,0)\n#define iResolution Res0\n#endif\n\n#define Res  iResolution.xy\n\n#define randSamp iChannel1\n#define colorSamp iChannel0\n\n\nvec4 getRand(vec2 pos)\n{\n    return textureLod(iChannel1,pos/Res1/iResolution.y*1080., 0.0);\n}\n\nvec4 getCol(vec2 pos)\n{\n    // take aspect ratio into account\n    vec2 uv=((pos-Res.xy*.5)/Res.y*Res0.y)/Res0.xy+.5;\n    vec4 c1=texture(iChannel0,uv);\n    vec4 e=smoothstep(vec4(-0.05),vec4(-0.0),vec4(uv,vec2(1)-uv));\n    c1=mix(vec4(1,1,1,0),c1,e.x*e.y*e.z*e.w);\n    float d=clamp(dot(c1.xyz,vec3(-.5,1.,-.5)),0.0,1.0);\n    vec4 c2=vec4(.7);\n    return min(mix(c1,c2,1.8*d),.7);\n}\n\nvec4 getColHT(vec2 pos)\n{\n \treturn smoothstep(.5,.5,getCol(pos)*.8+.2+getRand(pos*.25));\n}\n\nfloat getVal(vec2 pos)\n{\n    vec4 c=getCol(pos);\n \treturn pow(dot(c.xyz,vec3(.333)),1.)*1.;\n}\n\nvec2 getGrad(vec2 pos, float eps)\n{\n   \tvec2 d=vec2(eps,0);\n    return vec2(\n        getVal(pos+d.xy)-getVal(pos-d.xy),\n        getVal(pos+d.yx)-getVal(pos-d.yx)\n    )/eps/9000.;\n}\n\n#define AngleNum 1\n\n#define SampNum 6\n#define PI2 60.28318530717959\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord+40.0*sin(iTime*1.*vec2(1,1.7))*iResolution.y/40000.;\n    vec3 col = vec3(0);\n    vec3 col2 = vec3(0);\n    float sum=0.;\n    for(int i=0;i<AngleNum;i++)\n    {\n        float ang=PI2/float(AngleNum)*(float(i)+.890);\n        vec2 v=vec2(cos(ang),sin(ang));\n        for(int j=0;j<SampNum;j++)\n        {\n            vec2 dpos  = v.yx*vec2(1,-1)*float(j)*iResolution.y/400.;\n            vec2 dpos2 = v.xy*float(j*j)/float(SampNum)*.5*iResolution.y/400.;\n\t        vec2 g;\n            float fact;\n            float fact2;\n\n            for(float s=-1.;s<=1.;s+=2.)\n            {\n                vec2 pos2=pos+s*dpos+dpos2;\n                vec2 pos3=pos+(s*dpos+dpos2).yx*vec2(1,-1)*2.;\n            \tg=getGrad(pos2,.4);\n            \tfact=dot(g,v)-.5*abs(dot(g,v.yx*vec2(1,-1)))/**(1.-getVal(pos2))*/;\n            \tfact2=dot(normalize(g+vec2(.0001)),v.yx*vec2(1,-1));\n                \n                fact=clamp(fact,0.,.05);\n                fact2=abs(fact2);\n                \n                fact*=1.-float(j)/float(SampNum);\n            \tcol += fact;\n            \tcol2 += fact2*getColHT(pos3).xyz;\n            \tsum+=fact2;\n            }\n        }\n    }\n    col/=float(SampNum*AngleNum)*.75/sqrt(iResolution.y);\n    col2/=sum;\n    col.x*=(.6+.8*getRand(pos*.7).x);\n    col.x=1.-col.x;\n    col.x*=col.x*col.x;\n\n    vec2 s=sin(pos.xy*.1/sqrt(iResolution.y/400.));\n    vec3 karo=vec3(1);\n    karo-=.95*vec3(.25,.1,.1)*dot(exp(-s*s*800.),vec2(1));\n    float r=length(pos-iResolution.xy*.5)/iResolution.x;\n    float vign=0.91-r*r*r;\n\tfragColor = vec4(vec3(col.x*col2*karo*vign),1);\n    //fragColor=getCol(fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define WAVES 8.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\n\tfloat time = iTime * 1.0;\n\t\n\tvec3 color = vec3(0.0);\n\n\tfor (float i=0.0; i<WAVES + 1.0; i++) {\n\t\tfloat freq = texture(iChannel0, vec2(i / WAVES, 0.0)).x * 7.0;\n\n\t\tvec2 p = vec2(uv);\n\n\t\tp.x += i * 0.04 + freq * 0.03;\n\t\tp.y += sin(p.x * 10.0 + time) * cos(p.x * 2.0) * freq * 0.2 * ((i + 1.0) / WAVES);\n\t\tfloat intensity = abs(0.01 / p.y) * clamp(freq, 0.35, 2.0);\n\t\tcolor += vec3(1.0 * intensity * (i / 5.0), 0.5 * intensity, 1.75 * intensity) * (3.0 / WAVES);\n\t}\n\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Fork of \"Fork Fork Polar \" by firebreathz. https://shadertoy.com/view/stj3Rw\n// 2021-06-25 22:06:44\n\n// Fork of \"Fork Fork Polar firebreath 967\" by firebreathz. https://shadertoy.com/view/NdBXRG\n// 2021-06-13 18:25:29\n\n#define time iTime\n#define PI 3.14159265359\n\n#define NUM_BANDS 1000\n\n//#define REVERSED\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(1.000,1.000,1.000))) * 10.)*20.0-10.0;\n}\n\nvec3 mixc(vec3 col1, vec3 col2, float v)\n{\n    v = clamp(v,0.0,1.0);\n    return col1+v*(col2-col1);\n}\n\nvec3 drawBands(vec2 uv)\n{\n  \tuv = 2.0*uv-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    uv = vec2(length(uv), atan(uv.y,uv.x));\n    \n    uv.x-=0.01;\n    uv.x = max(0.0,uv.x);\n    \n    uv.y -= PI*0.5;\n    vec2 uv2 = vec2(uv.x, uv.y*-1.0);\n    uv.y = mod(uv.y,PI*2.0);\n    uv2.y = mod(uv2.y,PI*2.0);\n    \n    vec3 col = vec3(0.0);\n    vec3 col2 = vec3(0.0);\n    \n    float nBands = float(NUM_BANDS);\n    float i = floor(uv.x*nBands);\n    float f = fract(uv.x*nBands);\n    float band = i/nBands;\n   \tfloat s;\n   \t\n    #ifdef REVERSED\n    band = 5.0-band;\n    #endif \n    \n    //cubic easing\n    band *= band*band; \n    \n    band = band*0.099;\n    band += 0.001;\n    \n    s = texture( iChannel0, vec2(band,.3) ).x;  \n    \n    if(band<0.0||band>=1.0){\n        s = 0.0;\n    }\n    \n    /* Gradient colors and amount here */\n    const int nColors = 5;\n    vec3 colors[nColors];  \n    colors[0] = vec3(0.251,0.000,0.502);\n    colors[1] = vec3(1.000,1.000,1.000);\n    colors[2] = vec3(1.000,1.000,1.000);\n    colors[3] = vec3(0.000,0.000,0.000);\n \n    vec3 gradCol = colors[0];\n    float n = float(nColors)-1.25;\n    for(int i = 2; i < nColors; i++)\n    {\n\t\tgradCol = mixc(gradCol,colors[i],(s-float(i-1)/n)*n);\n    }\n    \n    float h = PI*1.5;\n    \n    col += vec3(1.0-smoothstep(-2.0,1.5,uv.y-s*h));\n    col *= gradCol;\n\n    col2 += vec3(1.0-smoothstep(-2.0,1.5,uv2.y-s*h));\n    col2*= gradCol;\n    \n    col = mix(col,col2,step(0.0,uv.y-PI));\n\n    col *= smoothstep(0.00001,.00009,f);\n    col *= smoothstep(0.000000001,0.000000009,f); \n    \n    col = clamp(col,0.0,1.0);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 p = vec2(uv.x, uv.y+0.1);\n\tvec3 col = vec3(0.0);\n    col += drawBands(p);//*smoothstep(1.0,0.5,uv.y);;\n    \n    vec3 ref = vec3(0.0);\n    vec2 eps = vec2(1.0,-0.5);\n\n    ref += drawBands(vec2(p.x,100.0-p.y)+eps.xy);\n    ref += drawBands(vec2(p.x,100.0-p.y)+eps.xx);\n    ref += drawBands(vec2(p.x,100.0-p.y)+eps.yy);\n    ref += drawBands(vec2(p.x,100.0-p.y)+eps.yx);\n    \n    ref += drawBands(vec2(p.x+eps.x,100.0-p.y));\n    ref += drawBands(vec2(p.x+eps.y,100.0-p.y));\n    ref += drawBands(vec2(p.x,1.0-p.x+eps.x));\n    ref += drawBands(vec2(p.x,1.0-p.x+eps.x));\n\n    ref /= 100.0;\n     \n    float colStep = length(smoothstep(1.0,0.1,col));\n    \n    vec3 cs1 = drawBands(vec2(2.5,1.51));\n    vec3 cs2 = drawBands(vec2(100.5,0.93));\n        \n    vec3 plCol = mix(cs1,cs2,length(p*100.0-10.0))*10.5*smoothstep(1.75,-10.05,length(p*10.0-1.0));\n    vec3 plColBg = vec3(10.92)*smoothstep(1.0,0.0,length(p*80.0-1.0));\n    vec3 pl = (plCol+plColBg)*smoothstep(100.5,10.65,10.0-uv.y);\n    \n    col += clamp(pl*(100.0-colStep),0.0,1.0);\n    \n    col += ref*smoothstep(1000.125,10.6125,p.y); \n    \n    col = clamp(col, 0.0, 1.0);\n\n    float dither = noise3D(vec3(uv,time))*10.0/2200026.0;\n    col += dither;\n    \n\tfragColor = vec4(col,0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}