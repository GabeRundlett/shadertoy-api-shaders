{
    "Shader": {
        "info": {
            "date": "1506460281",
            "description": "Quick demo of the Hammersley point set for hemispherical sampling.\n\nSource: [url]http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html[/url]\n\n  * Left: 2D point set sampling\n  * Right: 3D sampling with either Uniform or Cosinus distribution",
            "flags": 32,
            "hasliked": 0,
            "id": "4lscWj",
            "likes": 35,
            "name": "Hammersley Point Set",
            "published": 3,
            "tags": [
                "demo",
                "set",
                "hammersley"
            ],
            "usePreview": 0,
            "username": "ssell",
            "viewed": 3005
        },
        "renderpass": [
            {
                "code": "/**\n * -----------------------------------------------------------\n * - Hammersley Point Set\n * - Created by Steven Sell (ssell) / 2017\n * - License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * - https://www.shadertoy.com/view/4lscWj\n * -----------------------------------------------------------\n *\n * A quick demo of the Hammersley Point Set.\n *\n * This set can be used as an alternative to using random directional \n * vectors for scene sampling (such as in PBR lighting or ambient occlusion).\n *\n * Source:\n *\n *     'Hammersley Points on a Hemisphere' - Holger Dammertz\n *     http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html\n *\n * Screen is split as:\n *\n *    Left:  2D sampling\n *    Right: 3D sampling using either Uniform or Cosinus distribution.\n *\n * UI sliders control:\n *\n *    Num Points:      Number of Hammersley point samples [1, 128]\n *    Uniform/Cosinus: Distribution function for the 3D samples\n */\n\n#define Epsilon  0.01\n#define NearClip Epsilon\n#define FarClip  10.0\n#define MaxSteps 100\n#define PI       3.14159265359\n\nconst vec3 LightDir = normalize(vec3(0.0, 1.0, 0.0));\nconst float MaxNumPoints = 128.0;\n\nfloat NumPoints = MaxNumPoints * 0.5;\nfloat DistrMode = 0.0;     // 0.0 = Uniform; 1.0 = Cosinus\n\n//------------------------------------------------------------------------------------------\n// Hammersley Sampling\n//------------------------------------------------------------------------------------------\n\nvec2 Hammersley(float i, float numSamples)\n{   \n    uint b = uint(i);\n    \n    b = (b << 16u) | (b >> 16u);\n    b = ((b & 0x55555555u) << 1u) | ((b & 0xAAAAAAAAu) >> 1u);\n    b = ((b & 0x33333333u) << 2u) | ((b & 0xCCCCCCCCu) >> 2u);\n    b = ((b & 0x0F0F0F0Fu) << 4u) | ((b & 0xF0F0F0F0u) >> 4u);\n    b = ((b & 0x00FF00FFu) << 8u) | ((b & 0xFF00FF00u) >> 8u);\n    \n    float radicalInverseVDC = float(b) * 2.3283064365386963e-10;\n    \n    return vec2((i / numSamples), radicalInverseVDC);\n} \n\nvec3 SampleHemisphere_Uniform(float i, float numSamples)\n{\n    // Returns a 3D sample vector orientated around (0.0, 1.0, 0.0)\n    // For practical use, must rotate with a rotation matrix (or whatever\n    // your preferred approach is) for use with normals, etc.\n    \n\tvec2 xi = Hammersley(i, numSamples);\n    \n    float phi      = xi.y * 2.0 * PI;\n    float cosTheta = 1.0 - xi.x;\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n    \n    return vec3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);\n}\n\nvec3 SampleHemisphere_Cosinus(float i, float numSamples)\n{\n    vec2 xi = Hammersley(i, numSamples);\n    \n    float phi      = xi.y * 2.0 * PI;\n    float cosTheta = sqrt(1.0 - xi.x);\n    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n     \n    return vec3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);\n}\n\n//--------------------------------------------------------------------\n// UI Functions\n//--------------------------------------------------------------------\n\nfloat uiSlider(int id)\n{\n    return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy).r;\n}\n\nvec4 HandleSliders(in vec2 uv)\n{\n    vec4 sliderVal = texture(iChannel0, uv);\n\t\n    NumPoints = max(1.0, uiSlider(0) * MaxNumPoints);\n    DistrMode = step(0.5, uiSlider(1));\n    \n    return sliderVal;\n}\n\n//------------------------------------------------------------------------------------------\n// Ray / Camera\n//------------------------------------------------------------------------------------------\n\nstruct Ray\n{\n\tvec3 o;\n    vec3 d;\n};\n\nRay Ray_LookAt(in vec2 uv, in vec3 o, in vec3 d)\n{\n    vec3 forward = normalize(d - o);\n    vec3 right   = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up      = normalize(cross(right, forward));\n\n    uv    = (uv * 2.0) - 1.0;\n    uv.x *= (iResolution.x / iResolution.y);\n\n    Ray ray;\n    ray.o = o;\n    ray.d = normalize((uv.x * right) + (uv.y * up) + (forward * 2.0));\n\n    return ray;\n}\n\n//------------------------------------------------------------------------------------------\n// Scene\n//------------------------------------------------------------------------------------------\n\nvec2 U(vec2 d1, vec2 d2) \n{ \n    return (d1.x < d2.x) ? d1 : d2; \n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nvec2 Scene(in vec3 pos)\n{\n    vec2 sphere = vec2(mix(FarClip, length(pos) - 1.0, step(0.0, pos.y)), 1.0);\n    vec2 xAxis  = vec2(sdCapsule(pos, vec3(0.0), vec3(2.5, 0.0, 0.0), 0.01), 2.0);\n    vec2 yAxis  = vec2(sdCapsule(pos, vec3(0.0), vec3(0.0, 2.5, 0.0), 0.01), 3.0);\n    vec2 zAxis  = vec2(sdCapsule(pos, vec3(0.0), vec3(0.0, 0.0, 2.5), 0.01), 4.0);\n    \n\treturn U(sphere, U(xAxis, U(yAxis, zAxis)));\n}\n\n//------------------------------------------------------------------------------------------\n// Marching\n//------------------------------------------------------------------------------------------\n\nvec2 March(in Ray ray)\n{\n    float depth = NearClip;\n    float id    = 0.0;\n    \n    for(int i = 0; i < MaxSteps; ++i)\n    {\n        vec3 pos = ray.o + (ray.d * depth);\n        vec2 sdf = Scene(pos);\n        \n        if(sdf.x < Epsilon) \n        {\n            id = sdf.y;\n            break;\n        }\n        \n        if(sdf.x >= FarClip)\n        {\n            break;\n        }\n        \n        depth += sdf.x;\n    }\n    \n    return vec2(clamp(depth, NearClip, FarClip), id);\n}\n\nvec3 SceneNormal(in vec3 pos, in float depth)\n{\n\tvec2 eps = vec2(0.001 * depth, 0.0);\n    return normalize(vec3(Scene(pos + eps.xyy).x - Scene(pos - eps.xyy).x,\n                          Scene(pos + eps.yxy).x - Scene(pos - eps.yxy).x,\n                          Scene(pos + eps.yyx).x - Scene(pos - eps.yyx).x));\n}\n\n//------------------------------------------------------------------------------------------\n// 2D Render\n//------------------------------------------------------------------------------------------\n\nfloat DistToLine(vec2 p, vec2 a, vec2 b)\n{\n \tvec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    float frac = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    \n    return length(pa - (ba * frac));\n}\n\nfloat Sharpen(float dist, float thickness)\n{\n    float r = (1.0 / min(iResolution.x, iResolution.y));\n    return smoothstep(r, -r, dist - thickness);\n}\n\nfloat Line(vec2 uv, vec2 a, vec2 b, float t)\n{\n    return Sharpen(DistToLine(uv, a, b), t);\n}\n\nconst vec2 GridMin = vec2(0.05, 0.2);\nconst vec2 GridMax = vec2(0.75, 0.9);\n\nvec4 Render2D(in vec2 uv)\n{\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    vec4 color = vec4(0.0);\n    \n    // Draw axis\n    \n    float axis = 0.0;\n    \n    axis += Line(uv, vec2(0.05, 0.2), vec2(0.75, 0.2), 0.0035);\n    axis += Line(uv, vec2(0.05, 0.2), vec2(0.05, 0.9), 0.0035);\n    \n    color = mix(color, vec4(0.0, 0.0, 0.0, 1.0), clamp(axis, 0.0, 1.0));\n    \n    // Draw 2D Hammersley points [0.0, 1.0]\n    \n    float circle = 0.0;\n    \n    for(float i = 0.0; i < floor(NumPoints); ++i)\n    {\n        vec2 s = Hammersley(i, floor(NumPoints));\n        s = s * 0.7 + vec2(0.05, 0.2);\n        \n        circle += Sharpen(distance(uv, s), 0.01);\n    }\n    \n    color = mix(color, vec4(1.0, 1.0, 1.0, 1.0), clamp(circle, 0.0, 1.0));\n    \n    return color;\n}\n\n//------------------------------------------------------------------------------------------\n// 3D Render\n//------------------------------------------------------------------------------------------\n\nvec4 Render3D(in Ray ray)\n{\n    vec4 color = vec4(0.025, 0.025, 0.025, 0.0);\n    vec2 march = March(ray);\n    \n    float depth = march.x;\n    float id    = march.y;\n    \n    if(depth < FarClip)\n    {\n        vec3 pos  = ray.o + (ray.d * depth);\n        vec3 norm = SceneNormal(pos, depth);\n        \n        if(id < 2.0)\n        {\n            // Draw the hemisphere in blue, and the 3D Hammersley sample points in white\n            color.rgb = vec3(0.0, 0.2, 1.0) * clamp(dot(norm, LightDir), 0.05, 1.0);\n\n            float htot = 0.0;\n\n            for(float i = 0.0; i < NumPoints; ++i)\n            { \n                vec3 s = (DistrMode < 0.5 ? \n                    SampleHemisphere_Uniform(i, NumPoints) :\n                    SampleHemisphere_Cosinus(i, NumPoints));\n\n                float a = (max(0.999, dot(s, norm)) - 0.999) / 0.001;\n\n                htot += a;\n            }\n\n            color.rgb = mix(color.rgb, vec3(1.0, 1.0, 1.0), smoothstep(-0.002, 0.2, fract(htot)));\n        }\n        else\n        {\n            // Draw the axis\n        \tcolor.rgb = (id < 3.0 ? vec3(1.0, 0.0, 0.0) : (id < 4.0 ? vec3(0.0, 1.0, 0.0) : vec3(0.0, 0.0, 1.0)));\n        }\n        \n        color.a = 1.0;\n    }\n    \n    return color;\n}\n\n//------------------------------------------------------------------------------------------\n// Main\n//------------------------------------------------------------------------------------------\n\nvec3 OrbitAround(vec3 origin, float radius, float rate)\n{\n    float time = iTime + 4.0f;\n  \treturn vec3((origin.x + (radius * cos(time * rate))), (origin.y), (origin.z + (radius * sin(time * rate))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    Ray ray = Ray_LookAt(uv - vec2(0.25, 0.0), OrbitAround(vec3(0.0, 1.5, 0.0), 2.75, 0.5), vec3(0.0, 0.15, 0.0));\n    \n    vec4 ui = HandleSliders(uv);\n    \n    vec4 c2D = Render2D(uv);\n    vec4 c3D = (uv.x > 0.5 ? Render3D(ray) : vec4(0.0));\n    \n    fragColor.rgb = vec3(0.075);                            // Background color\n    fragColor.rgb = mix(fragColor.rgb, c2D.rgb, c2D.a);     // Mix 2D graph plot\n    fragColor.rgb = mix(fragColor.rgb, c3D.rgb, c3D.a);     // Mix 3D hemisphere samples\n    fragColor.rgb = mix(fragColor.rgb, ui.rgb, ui.a);       // Mix UI\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));    // Gamma correction\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n * -----------------------------------------------------------\n * -- User Interface\n * -----------------------------------------------------------\n *\n *     'UI Easy to Integrate' - XT95\n *     https://www.shadertoy.com/view/ldKSDm\n */\n\n#define MAX_DIGIT 2\n#define FLOAT_PRECISION 2\n#define SLIDER_LENGTH 128.\n#define WIDGET_COLOR vec3(0.0)\n\n/* global var */  vec4  col = vec4(0.); vec2 pos = vec2(0.);  vec2 uv = vec2(0.);\n/* char sprite */ vec4 ch_spc = vec4(0x000000,0x000000,0x000000,0x000000); vec4 ch_exc = vec4(0x003078,0x787830,0x300030,0x300000); vec4 ch_quo = vec4(0x006666,0x662400,0x000000,0x000000); vec4 ch_hsh = vec4(0x006C6C,0xFE6C6C,0x6CFE6C,0x6C0000); vec4 ch_dol = vec4(0x30307C,0xC0C078,0x0C0CF8,0x303000); vec4 ch_pct = vec4(0x000000,0xC4CC18,0x3060CC,0x8C0000); vec4 ch_amp = vec4(0x0070D8,0xD870FA,0xDECCDC,0x760000); vec4 ch_apo = vec4(0x003030,0x306000,0x000000,0x000000); vec4 ch_lbr = vec4(0x000C18,0x306060,0x603018,0x0C0000); vec4 ch_rbr = vec4(0x006030,0x180C0C,0x0C1830,0x600000); vec4 ch_ast = vec4(0x000000,0x663CFF,0x3C6600,0x000000); vec4 ch_crs = vec4(0x000000,0x18187E,0x181800,0x000000); vec4 ch_com = vec4(0x000000,0x000000,0x000038,0x386000); vec4 ch_dsh = vec4(0x000000,0x0000FE,0x000000,0x000000); vec4 ch_per = vec4(0x000000,0x000000,0x000038,0x380000); vec4 ch_lsl = vec4(0x000002,0x060C18,0x3060C0,0x800000); vec4 ch_0 = vec4(0x007CC6,0xD6D6D6,0xD6D6C6,0x7C0000); vec4 ch_1 = vec4(0x001030,0xF03030,0x303030,0xFC0000); vec4 ch_2 = vec4(0x0078CC,0xCC0C18,0x3060CC,0xFC0000); vec4 ch_3 = vec4(0x0078CC,0x0C0C38,0x0C0CCC,0x780000); vec4 ch_4 = vec4(0x000C1C,0x3C6CCC,0xFE0C0C,0x1E0000); vec4 ch_5 = vec4(0x00FCC0,0xC0C0F8,0x0C0CCC,0x780000); vec4 ch_6 = vec4(0x003860,0xC0C0F8,0xCCCCCC,0x780000); vec4 ch_7 = vec4(0x00FEC6,0xC6060C,0x183030,0x300000); vec4 ch_8 = vec4(0x0078CC,0xCCEC78,0xDCCCCC,0x780000); vec4 ch_9 = vec4(0x0078CC,0xCCCC7C,0x181830,0x700000); vec4 ch_col = vec4(0x000000,0x383800,0x003838,0x000000); vec4 ch_scl = vec4(0x000000,0x383800,0x003838,0x183000); vec4 ch_les = vec4(0x000C18,0x3060C0,0x603018,0x0C0000); vec4 ch_equ = vec4(0x000000,0x007E00,0x7E0000,0x000000); vec4 ch_grt = vec4(0x006030,0x180C06,0x0C1830,0x600000); vec4 ch_que = vec4(0x0078CC,0x0C1830,0x300030,0x300000); vec4 ch_ats = vec4(0x007CC6,0xC6DEDE,0xDEC0C0,0x7C0000); vec4 ch_A = vec4(0x003078,0xCCCCCC,0xFCCCCC,0xCC0000); vec4 ch_B = vec4(0x00FC66,0x66667C,0x666666,0xFC0000); vec4 ch_C = vec4(0x003C66,0xC6C0C0,0xC0C666,0x3C0000); vec4 ch_D = vec4(0x00F86C,0x666666,0x66666C,0xF80000); vec4 ch_E = vec4(0x00FE62,0x60647C,0x646062,0xFE0000); vec4 ch_F = vec4(0x00FE66,0x62647C,0x646060,0xF00000); vec4 ch_G = vec4(0x003C66,0xC6C0C0,0xCEC666,0x3E0000); vec4 ch_H = vec4(0x00CCCC,0xCCCCFC,0xCCCCCC,0xCC0000); vec4 ch_I = vec4(0x007830,0x303030,0x303030,0x780000); vec4 ch_J = vec4(0x001E0C,0x0C0C0C,0xCCCCCC,0x780000); vec4 ch_K = vec4(0x00E666,0x6C6C78,0x6C6C66,0xE60000); vec4 ch_L = vec4(0x00F060,0x606060,0x626666,0xFE0000); vec4 ch_M = vec4(0x00C6EE,0xFEFED6,0xC6C6C6,0xC60000); vec4 ch_N = vec4(0x00C6C6,0xE6F6FE,0xDECEC6,0xC60000); vec4 ch_O = vec4(0x00386C,0xC6C6C6,0xC6C66C,0x380000); vec4 ch_P = vec4(0x00FC66,0x66667C,0x606060,0xF00000); vec4 ch_Q = vec4(0x00386C,0xC6C6C6,0xCEDE7C,0x0C1E00); vec4 ch_R = vec4(0x00FC66,0x66667C,0x6C6666,0xE60000); vec4 ch_S = vec4(0x0078CC,0xCCC070,0x18CCCC,0x780000); vec4 ch_T = vec4(0x00FCB4,0x303030,0x303030,0x780000); vec4 ch_U = vec4(0x00CCCC,0xCCCCCC,0xCCCCCC,0x780000); vec4 ch_V = vec4(0x00CCCC,0xCCCCCC,0xCCCC78,0x300000); vec4 ch_W = vec4(0x00C6C6,0xC6C6D6,0xD66C6C,0x6C0000); vec4 ch_X = vec4(0x00CCCC,0xCC7830,0x78CCCC,0xCC0000); vec4 ch_Y = vec4(0x00CCCC,0xCCCC78,0x303030,0x780000); vec4 ch_Z = vec4(0x00FECE,0x981830,0x6062C6,0xFE0000); vec4 ch_lsb = vec4(0x003C30,0x303030,0x303030,0x3C0000); vec4 ch_rsl = vec4(0x000080,0xC06030,0x180C06,0x020000); vec4 ch_rsb = vec4(0x003C0C,0x0C0C0C,0x0C0C0C,0x3C0000); vec4 ch_pow = vec4(0x10386C,0xC60000,0x000000,0x000000); vec4 ch_usc = vec4(0x000000,0x000000,0x000000,0x00FF00); vec4 ch_a = vec4(0x000000,0x00780C,0x7CCCCC,0x760000); vec4 ch_b = vec4(0x00E060,0x607C66,0x666666,0xDC0000); vec4 ch_c = vec4(0x000000,0x0078CC,0xC0C0CC,0x780000); vec4 ch_d = vec4(0x001C0C,0x0C7CCC,0xCCCCCC,0x760000); vec4 ch_e = vec4(0x000000,0x0078CC,0xFCC0CC,0x780000); vec4 ch_f = vec4(0x00386C,0x6060F8,0x606060,0xF00000); vec4 ch_g = vec4(0x000000,0x0076CC,0xCCCC7C,0x0CCC78); vec4 ch_h = vec4(0x00E060,0x606C76,0x666666,0xE60000); vec4 ch_i = vec4(0x001818,0x007818,0x181818,0x7E0000); vec4 ch_j = vec4(0x000C0C,0x003C0C,0x0C0C0C,0xCCCC78); vec4 ch_k = vec4(0x00E060,0x60666C,0x786C66,0xE60000); vec4 ch_l = vec4(0x007818,0x181818,0x181818,0x7E0000); vec4 ch_m = vec4(0x000000,0x00FCD6,0xD6D6D6,0xC60000); vec4 ch_n = vec4(0x000000,0x00F8CC,0xCCCCCC,0xCC0000); vec4 ch_o = vec4(0x000000,0x0078CC,0xCCCCCC,0x780000); vec4 ch_p = vec4(0x000000,0x00DC66,0x666666,0x7C60F0); vec4 ch_q = vec4(0x000000,0x0076CC,0xCCCCCC,0x7C0C1E); vec4 ch_r = vec4(0x000000,0x00EC6E,0x766060,0xF00000); vec4 ch_s = vec4(0x000000,0x0078CC,0x6018CC,0x780000); vec4 ch_t = vec4(0x000020,0x60FC60,0x60606C,0x380000); vec4 ch_u = vec4(0x000000,0x00CCCC,0xCCCCCC,0x760000); vec4 ch_v = vec4(0x000000,0x00CCCC,0xCCCC78,0x300000); vec4 ch_w = vec4(0x000000,0x00C6C6,0xD6D66C,0x6C0000); vec4 ch_x = vec4(0x000000,0x00C66C,0x38386C,0xC60000); vec4 ch_y = vec4(0x000000,0x006666,0x66663C,0x0C18F0); vec4 ch_z = vec4(0x000000,0x00FC8C,0x1860C4,0xFC0000); vec4 ch_lpa = vec4(0x001C30,0x3060C0,0x603030,0x1C0000); vec4 ch_bar = vec4(0x001818,0x181800,0x181818,0x180000); vec4 ch_rpa = vec4(0x00E030,0x30180C,0x183030,0xE00000); vec4 ch_tid = vec4(0x0073DA,0xCE0000,0x000000,0x000000); vec4 ch_lar = vec4(0x000000,0x10386C,0xC6C6FE,0x000000);\n#define _a  col += vec4( char(ch_a) );\n#define _b  col += vec4( char(ch_b) );\n#define _c  col += vec4( char(ch_c) );\n#define _d  col += vec4( char(ch_d) );\n#define _e  col += vec4( char(ch_e) );\n#define _f  col += vec4( char(ch_f) );\n#define _g  col += vec4( char(ch_g) );\n#define _h  col += vec4( char(ch_h) );\n#define _i  col += vec4( char(ch_i) );\n#define _j  col += vec4( char(ch_j) );\n#define _k  col += vec4( char(ch_k) );\n#define _l  col += vec4( char(ch_l) );\n#define _m  col += vec4( char(ch_m) );\n#define _n  col += vec4( char(ch_n) );\n#define _o  col += vec4( char(ch_o) );\n#define _p  col += vec4( char(ch_p) );\n#define _q  col += vec4( char(ch_q) );\n#define _r  col += vec4( char(ch_r) );\n#define _s  col += vec4( char(ch_s) );\n#define _t  col += vec4( char(ch_t) );\n#define _u  col += vec4( char(ch_u) );\n#define _v  col += vec4( char(ch_v) );\n#define _w  col += vec4( char(ch_w) );\n#define _x  col += vec4( char(ch_x) );\n#define _y  col += vec4( char(ch_y) );\n#define _z  col += vec4( char(ch_z) );\n#define _A  col += vec4( char(ch_A) );\n#define _B  col += vec4( char(ch_B) );\n#define _C  col += vec4( char(ch_C) );\n#define _D  col += vec4( char(ch_D) );\n#define _E  col += vec4( char(ch_E) );\n#define _F  col += vec4( char(ch_F) );\n#define _G  col += vec4( char(ch_G) );\n#define _H  col += vec4( char(ch_H) );\n#define _I  col += vec4( char(ch_I) );\n#define _J  col += vec4( char(ch_J) );\n#define _K  col += vec4( char(ch_K) );\n#define _L  col += vec4( char(ch_L) );\n#define _M  col += vec4( char(ch_M) );\n#define _N  col += vec4( char(ch_N) );\n#define _O  col += vec4( char(ch_O) );\n#define _P  col += vec4( char(ch_P) );\n#define _Q  col += vec4( char(ch_Q) );\n#define _R  col += vec4( char(ch_R) );\n#define _S  col += vec4( char(ch_S) );\n#define _T  col += vec4( char(ch_T) );\n#define _U  col += vec4( char(ch_U) );\n#define _V  col += vec4( char(ch_V) );\n#define _W  col += vec4( char(ch_W) );\n#define _X  col += vec4( char(ch_X) );\n#define _Y  col += vec4( char(ch_Y) );\n#define _Z  col += vec4( char(ch_Z) );\n#define _spc  col += vec4( char(ch_spc) );\n#define _float(a)  col += vec4(print_float(a));\n#define _int(a)  col += vec4(print_int(a));\n#define _slider(x,y,id,v) setCursor(x,y);print_slider(id,v);\n#define _color(x,y,id,v) setCursor(x,y);print_color(id,v);\n#define _box(p,s,c) print_box(p,s,c);\n#define _cursor(x,y)  setCursor(x,y);\nvoid setCursor(int x, int y){pos = vec2(float(x),iResolution.y-float(y));}float extract_bit(float n, float b){    b = clamp(b,-1.0,24.0);    return floor(mod(floor(n / pow(2.0,floor(b))),2.0));   }float sprite(vec4 spr, vec2 size, vec2 uv){    uv = floor(uv);    float bit = (size.x-uv.x-1.0) + uv.y * size.x;    bool bounds = all(greaterThanEqual(uv,vec2(0))) && all(lessThan(uv,size));        float pixels = 0.0;    pixels += extract_bit(spr.x, bit - 72.0);    pixels += extract_bit(spr.y, bit - 48.0);    pixels += extract_bit(spr.z, bit - 24.0);    pixels += extract_bit(spr.w, bit - 00.0);        return bounds ? pixels : 0.0;}float char(vec4 ch){    float px = sprite(ch, vec2(8, 12), uv - pos);    pos.x += 8.;    return px;}vec4 get_digit(float d){    d = floor(d);    if(d == 0.0) return ch_0;    if(d == 1.0) return ch_1;    if(d == 2.0) return ch_2;    if(d == 3.0) return ch_3;    if(d == 4.0) return ch_4;    if(d == 5.0) return ch_5;    if(d == 6.0) return ch_6;    if(d == 7.0) return ch_7;    if(d == 8.0) return ch_8;    if(d == 9.0) return ch_9;    return ch_0;}float print_float(float number){    float result = 0.0;        for(int i = MAX_DIGIT-1; i >= -FLOAT_PRECISION;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);                if(i == -1)        {            result += char(ch_per);        }                if((abs(number) > pow(10.0, float(i))) || i <= 0)        {            result += char(get_digit(digit));        }    }     return result;}float print_int(float number){    float result = 0.0;        for(int i = MAX_DIGIT;i >= 0;i--)    {        float digit = mod( number / pow(10.0, float(i)) , 10.0);        if(abs(number) > pow(10.0, float(i)) || i == 0)        {            result += char(get_digit(digit));        }    }       return result;}vec3 hsv2rgb( in vec3 c ){vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );rgb = rgb*rgb*(3.0-2.0*rgb);return c.z * mix( vec3(1.0), rgb, c.y);}vec3 widgetSelected(){    return texture(iChannel0, vec2(.5,2.5)/iResolution.xy).rgb;}vec4 uiSlider(int id){return texture(iChannel0, vec2(float(id)+.5,0.5)/iResolution.xy);}vec4 uiColor(int id){return texture(iChannel0, vec2(float(id)+.5,1.5)/iResolution.xy);}float roundBox( in vec2 p, in vec2 b, in float r ) {    vec2 q = abs(p) - b;    vec2 m = vec2( min(q.x,q.y), max(q.x,q.y) );    float d = (m.x > 0.0) ? length(q) : m.y;     return d - r;}void print_slider( int id, float v ){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 value = uiSlider(id);    if(value.a == 0.)        value.r = v;        bool selected = ( select.r == .1 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tvalue.r = clamp((iMouse.x-pos.x-2.)/SLIDER_LENGTH,0.,1.);    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3((clamp( 1.3-abs(d) , 0., 2.))*max(.0,-sign(uv.x-pos.x-value.r*SLIDER_LENGTH))*.5 );    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        float oldx = pos.x;    pos.x += SLIDER_LENGTH-8.*4.;    _float(value.r)    pos.x = oldx;        if(puv.x == float(id) && puv.y==0.)        col = vec4(value.r,0.,0.,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.1,float(id)/255.,0.,0.);    }}void print_color( int id, vec3 v){    vec2 puv = uv-vec2(.5);    vec3 select = widgetSelected();    float sl2 = SLIDER_LENGTH/2.;    vec4 color = uiColor(id);    if(color.a == 0.)        color.rgb = v;        bool selected = ( select.r == .2 && select.g*255. == float(id) );    bool mouseAndNoSelect = iMouse.w>.5 && roundBox( iMouse.xy-pos-vec2(sl2,6.), vec2(sl2,3.), 5.) < 0. && select.r == 0.;         if(mouseAndNoSelect || selected)    \tcolor.rgb = hsv2rgb( vec3( (iMouse.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );    float d = roundBox( uv-pos-vec2(sl2,6.), vec2(sl2,3.), 5.);    float layer = clamp(sign(-d),0.,1.);    col.rgb += vec3( layer*color*max(.0,sign(uv.x-pos.x-SLIDER_LENGTH*.9)));    col.rgb += WIDGET_COLOR*vec3( clamp( 1.-abs(d)*.75 , 0., 1.) );    col.a += layer + clamp( 1.-abs(d) , 0., 1.);        if((mouseAndNoSelect || selected) && uv.x-pos.x-SLIDER_LENGTH*.9<0.)        col.rgb += layer*hsv2rgb( vec3( (uv.x-pos.x)/(SLIDER_LENGTH*.9),1.,1.) );            if(puv.x == float(id) && puv.y==1.)        col = vec4(color.rgb,1.);        if(puv.x == 0. && puv.y == 2.)    {        if(iMouse.w<.5)            col = vec4(0.);        else if(mouseAndNoSelect)        \tcol = vec4(.2,float(id)/255.,0.,0.);    }}void print_box(vec2 p, vec2 s, vec4 c){    if(uv.x>p.x && uv.x <p.x+s.x && uv.y>p.y && uv.y<p.y+s.y)        col += c;}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    uv = fragCoord.xy;\n    \n    int rx = int(iResolution.x * 0.5) - 150;\n    int ry = int(iResolution.y) - 10;\n    \n    if(uv.x-.5 == 0. && uv.y-.5 == 2.)\n        col = vec4(widgetSelected(),0.);\n        \n    _slider(rx, ry, 0, 0.5) _N _u _m _spc _P _o _i _n _t _s\n        \n    if(uiSlider(1).x < 0.5)\n    {\n        _slider(rx + 150, ry, 1, 0.0) _U _n _i _f _o _r _m\n    }\n    else\n    {\n        _slider(rx + 150, ry, 1, 0.0) _C _o _s _i _n _u _s\n    }\n        \n    fragColor = min(col.rgba, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}