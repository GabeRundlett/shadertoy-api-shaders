{
    "Shader": {
        "info": {
            "date": "1464880037",
            "description": "Ray Marching Experiment 47",
            "flags": 0,
            "hasliked": 0,
            "id": "lsVSRz",
            "likes": 19,
            "name": "Ray Marching Experiment 47",
            "published": 3,
            "tags": [
                "sss",
                "ray",
                "experiment",
                "marching",
                "47"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 948
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nfloat dstepf = 0.0;\n\n// by shane\nfloat Voronesque( in vec3 p )\n{\n\n    vec3 i  = floor(p+dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    vec3 i1 = step(0., p-p.yzx), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    vec3 rnd = vec3(5.46,62.8,164.98); // my tuning\n    vec4 v = max(0.5 - vec4(dot(p, p), dot(p1, p1), dot(p2, p2), dot(p3, p3)), 0.);\n    vec4 d = vec4( dot(i, rnd), dot(i + i1, rnd), dot(i + i2, rnd), dot(i + 1., rnd) ); \n    d = fract(sin(d)*1000.)*v*2.; \n    v.x = max(d.x, d.y), v.y = max(d.z, d.w); \n    return max(v.x, v.y);\n}\n\nfloat df(vec3 p)\n{\n\tp = cos(p*2.);\n\tfloat m = length(p) - 1.6;\n\tp.z += iTime * 0.2;\n\tp.z = sin(p.z);\n    dstepf += 0.002;\n\treturn m + sqrt(Voronesque(p)*0.5);\n}\n\nvec3 nor(vec3 p, float prec)\n{\n    vec2 e = vec2(-1., 1.) * prec; \n    return normalize(e.yxx*df(p + e.yxx) + e.xxy*df(p + e.xxy) \n\t\t+ e.xyx*df(p + e.xyx) + e.yyy*df(p + e.yyy) );\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint) \n{\n\tfloat ms = 0.2; // min step len\n\tvec3 n = nor(surfPoint,0.01); \n\tvec3 p = surfPoint - n * ms; \n\tfloat s = df(p);\n\treturn s/ms; // s < 0. => inside df\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 v)\n{\n    vec3 p = ro + rd * d;\n\tvec3 np = normalize(p);\t\t\t\n\tvec3 n = nor(p, 0.01);\n\treturn (normalize(mix(vec3(max(0.,2.3-d)),np,0.8))\n\t\t* texture(iChannel0, reflect(rd, n)).rgb * v.x\n\t\t+ pow(.35 + dot(n, np) * .6, 15.) * v.y) * v.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 g )\n{\n\tvec4 f = vec4(0);\n    \n    f.xyz = iResolution;\n    g = (g+g-f.xy)/f.y;\n    \n    vec3 \n        ro = vec3(0,0,10.-iTime*0.3), \n        rd=normalize(vec3(g,-1.)),\n        p=ro, np, n, col, colss;\n    \n    f = texture(iChannel0, rd);\n    \n    float d=0.,s=1.;\n\t\n\tfor(int i=0;i<50;i++)\n\t\tif(s>0.001 && d<10.)\n\t\t\td+=s=df(ro+rd*d);\n\t\n\t// surface\n    if (d<10.)\n    {\n\t\t// surface color\n        col = shade(ro, rd, d, vec3(.9,0,1));\n        \n        // sub surface\n        ro = ro+rd*d;\n\t\td = 0.;\n\t\ts = 1.;\n\t\tfloat sgn = sign(df(ro + rd * d));\n\t\trd = refract(rd, nor(ro, 0.01), 0.4);\n\t\tfor (float i=0.;i<10.;i++)\n\t\t\tif(s>0.0001*d)\n\t\t\t\td +=abs(s=max(df(ro + rd * d), 0.1));\n\t\n        // sub surface color\n        colss = shade(ro, rd, d, vec3(1,1,3));\n\t\tcolss = clamp(colss, 0., 1.);\n\t\tf.rgb += mix(col, colss, .2);\n        \n        // heat\n        vec3 p = ro + rd * d;\n\t\tfloat sb = dstepf - SubDensity(p);\n\t\tf.rgb += blackbody(900.*sb-1000.);\n\t}\n\t\n\tfragColor = f;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}