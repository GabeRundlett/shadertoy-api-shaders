{
    "Shader": {
        "info": {
            "date": "1433417027",
            "description": "Another space flipping experiment, similar to [url]https://www.shadertoy.com/view/Xdf3Rn[/url], [url]https://www.shadertoy.com/view/MsXGRf[/url] and [url]https://www.shadertoy.com/view/4dsGD7[/url]. I used an infinite grid like Kali's Inversion Machine.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtSGDK",
            "likes": 136,
            "name": "Rotating Structure",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefield"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 10614
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2015 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2    // set AA to 1 if you have a slow machine  \n#endif\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nvec3 deform( in vec3 p, in float time, out float sca )\n{\n    float s = 0.34*sqrt(dot(p*p,p*p));\n    //float s = 1.0;\n\n    p = p/s;\n\n    p.xyz += 4.0*sin(0.5*vec3(1.0,1.1,1.3)*time+vec3(0.0,2.0,4.0));\n    \n    sca = s;\n    \n\treturn p;\n}\n\nfloat shape( vec3 p )\n{\n    vec3 q = mod( p+1.0, 2.0 ) -1.0;\n\n    float d1 = udRoundBox(q,vec3(0.10,0.02,1.00),0.02);\n    float d2 = udRoundBox(q,vec3(0.02,1.00,0.10),0.02);\n    float d3 = udRoundBox(q,vec3(1.00,0.10,0.02),0.02);\n    float d4 = udRoundBox(q,vec3(0.30,0.30,0.30),0.02);\n\n    return min( min(d1,d2), min(d3,d4) );\n}\n\nfloat map( vec3 p, float t )\n{\n    float s = 1.0;\n    p = deform( p, t, s );\n    return shape( p ) * s;\n}\n\nvec3 calcNormal( in vec3 pos, in float eps, in float t )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy, t ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, t ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, t ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, t ) );\n}\n\nvec3 calcNormal2( in vec3 pos, in float eps )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*shape( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*shape( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*shape( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*shape( pos + e.xxx ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.01 + 0.5*float(i)/7.0;\n        occ += (h-shape( pos + h*nor ));\n    }\n    return clamp( 1.0 - 4.0*occ/8.0, 0.0, 1.0 );    \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k, in float time )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map(ro + rd*t, time);\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n        t += clamp( h, 0.04, 0.1 );\n\t\tif( res<0.01 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n    vec3 m = pow( abs( n ), vec3(k) );\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*m.x + y*m.y + z*m.z) / (m.x + m.y + m.z);\n}\n\nvec3 shade( in vec3 ro, in vec3 rd, in float t, float time )\n{\n    float eps = 0.001;\n    \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos, eps, time );\n    float kk;\n    vec3 qos = deform( pos, time, kk );\n    vec3 qor = calcNormal2( qos, eps );\n\n    vec3 tex = texcube( iChannel0, qos*0.5, qor, 1.0 ).xyz;\n\n    vec3 lig = normalize( vec3(2.0,1.0,0.2) );\n\n    float fre = pow( clamp(1.0+dot(nor,rd), 0.0, 1.0 ), 2.0 );\n    float occ = calcAO( qos, qor );\n\n    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n    float sha = softshadow( pos, lig, 64.0, time ); \n    dif *= sha;\n        \n    vec3 col = 2.0*vec3(1.1,0.8,0.6)*dif*(0.5+0.5*occ) + 0.6*vec3(0.1,0.27,0.4)*occ;\n    col += 1.0*fre*(0.5+0.5*dif)*occ;\n    float sh = 4.0 + tex.x*64.0;\n    col += 0.1*sh*pow(clamp(-dot(rd,nor),0.0,1.0),sh)*occ*sha;\n    col *= clamp(2.0*dot(pos,pos),0.0,1.0);\n\n    col *= 6.0*tex;\n    \n    col *= exp( -1.5*t );\n\n    return col;        \n}\n\nfloat intersect( in vec3 ro, in vec3 rd, const float maxdist, float time )\n{\n    float res = -1.0;\n    vec3 resP = vec3(0.0);\n    float t = 0.1;\n    for( int i=0; i<100; i++ )\n    {\n        vec3 p = ro + t*rd;\n        float h = map( p, time );\n        res = t;\n\n        if( h<(0.001*t) || t>maxdist ) break;\n        \n        t += h*0.5;\n    }\n\treturn res;\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{\n    vec3 col = vec3(0.0);\n    \n    const float maxdist = 32.0;\n    float t = intersect( ro, rd, maxdist, time );\n    if( t < maxdist )\n    {\n        col = shade( ro, rd, t, time );\n    }\n\n    return pow( col, vec3(0.55) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n#if AA>1\n    vec3 col = vec3(0.0);\n    \n    float r = texture( iChannel1, fragCoord/iChannelResolution[1].xy ).x;\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 p = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n\n        float time = iTime + (r+float(AA*j + i))/float(AA*AA) * (0.4/30.0);\n        \n        time = 41.73 + time;\n        \n        float an = 6.0 + 0.1*time;\n\n        vec3 ro = vec3(0.0,1.0,0.5) + 2.0*vec3(cos(an),0.0,sin(an));\n        vec3 ta = vec3(0.0,0.0,0.0);\n        mat3 ca = setCamera( ro, ta, 0.3 );\n        vec3 rd = normalize( ca * vec3(p,-1.5) );\n        \n        col += render( ro, rd, time );\n    }\n    col /= float(AA*AA);\n#else\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float time = iTime;// + (hash1(iRands.x+px.x+px.y*31U))*0.1*(1.0/24.0);\n    time = 41.73 + time;\n    float an = 6.0 + 0.1*time;\n\n    vec3 ro = vec3(0.0,1.0,0.5) + 2.0*vec3(cos(an),0.0,sin(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    mat3 ca = setCamera( ro, ta, 0.3 );\n    vec3 rd = normalize( ca * vec3(p,-1.5) );\n\n    vec3 col = render( ro, rd, time );\n#endif    \n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}