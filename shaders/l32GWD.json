{
    "Shader": {
        "info": {
            "date": "1708476447",
            "description": "3 colored metaballs",
            "flags": 0,
            "hasliked": 0,
            "id": "l32GWD",
            "likes": 2,
            "name": "3 colored metaballs",
            "published": 3,
            "tags": [
                "metaballs"
            ],
            "usePreview": 0,
            "username": "rubix",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "vec2 smin(float a, float b, float k) // https://iquilezles.org/articles/smin/\n{\n    float h = max(k-abs(a-b),0.0)/k, m = h*h*0.5, s = m*k*0.5;\n    return a<b ? vec2(a-s,m) : vec2(b-s,1.0-m);\n}\nfloat hash11(float seed) { return fract(sin(seed*123.456789)*123.456); } // ?\n\n#define t iTime\nfloat sphere(vec3 p, float r) { return length(p)-r; }\n\nstruct S { float d; vec3 col; };\nS mapO(vec3 p) {\n    float s1 = sphere(p, 0.5);\n    float s2 = sphere(p+vec3(cos(1.2*t), sin(.7*t), 0.), 0.5);\n    float s3 = sphere(p-vec3(sin(t*1.6), cos(t*1.8), 0.), 0.5);\n    \n    vec3 c1 = vec3(0., .9, .7),\n         c2 = vec3(1., .3, .8),\n         c3 = vec3(.5, .7, .0);\n    float k = 0.5;\n    vec2 s = smin(s1, s2, k);\n    vec3 col = mix(c1, c2, s.y);\n    s = smin(s.x, s3, k);\n    col = mix(col, c3, s.y);\n    return S(s.x, col);\n}\nfloat map(vec3 p) { return mapO(p).d; }\n\nvec3 norm(vec3 p) { vec2 e = vec2(.001, 0.);\n    return normalize(\n        vec3(map(p+e.xyy),map(p+e.yxy),map(p+e.yyx)) -\n        vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)) );\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n\n    vec3 bgcol = vec3(0., 0., 0.2) + hash11(uv.x+uv.y*456789.+0.1*t); // lol\n\n    vec3 ro = vec3(0., 0., -5.);\n    vec3 rd = vec3(uv, 1.);\n    vec3 p = ro;\n    vec3 col = bgcol;\n    for (int i = 0; i < 50; i++) {\n        S s = mapO(p);\n        float d = s.d;\n        if (d < 0.01) {\n\n            vec3 n = norm(p);\n            vec3 ldir = vec3(cos(t), sin(t), -3.8+sin(t*.6));\n            float diff = clamp(dot(n, ldir), 0., 1.);\n            \n            vec3 refl = normalize(reflect(ldir, n));\n            float spec = clamp(dot(refl, rd), 0., 1.);\n            \n            vec3 amb = vec3(0.2, 0., 0.1);\n            vec3 diffcol = s.col;\n            col = diff * diffcol + pow(spec, 50.) * vec3(1., 0., 1.) + amb;\n            break;\n        }\n        p += rd * d;\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}