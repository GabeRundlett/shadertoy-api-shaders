{
    "Shader": {
        "info": {
            "date": "1617939219",
            "description": "My take on Inigo Quilez's article: https://iquilezles.org/articles/ibilinear/ibilinear.htm\nGoes crazy in some cases.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsSGDV",
            "likes": 6,
            "name": "Point -> Patch UV",
            "published": 3,
            "tags": [
                "uv",
                "quadratic",
                "inverse",
                "interpolation",
                "parametric",
                "bilinear",
                "patch"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "// Set to 0 to see the whole surface\n#define ONLY_PATCH 1\n\n// Drawing utilities\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\n// Computes u and v for a given point and quad\n// There are two solutions\nfloat cross2D(in vec2 a, in vec2 b) { return a.y * b.x - a.x * b.y; }\nbool iBilinear(in vec2 xy, in vec2 a, in vec2 b, in vec2 c, in vec2 d, out vec4 uv) {\n    vec2 p = a - b + c - d;\n    vec2 q = b - a, r = d - a;\n\n    float c1 = cross2D(r, p);\n    float c2 = cross2D(r, q) + cross2D(a, p) + cross2D(p, xy);\n    float c3 = cross2D(a, q) + cross2D(q, xy);\n\n    float discr = c2 * c2 - 4.0 * c1 * c3;\n    if (discr > 0.0) {\n        uv.yw = (vec2(-1.0, 1.0) * sqrt(discr) - c2) / c1 * 0.5;\n        uv.xz = (xy.x - a.x - r.x * uv.yw) / (p.x * uv.yw + q.x);\n        return true;\n    }\n\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.5);\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 a = vec2(c2, s2) * 1.5 + vec2(c1, s3) * 0.5;\n    vec2 b = vec2(c2, s1) * 1.5 + vec2(s1, c2) * 0.5;\n    vec2 c = vec2(c1, c3) * 1.5 + vec2(c2, s3) * 0.5;\n    vec2 d = vec2(s2, s3) * 1.5 + vec2(c1, s2) * 0.5;\n\n    vec4 params;\n    if (iBilinear(uv, a, b, c, d, params)) {\n        float numPoints = 0.0;\n        vec3 patchColor = vec3(0.0);\n        if (ONLY_PATCH == 1 ? all(lessThan(abs(params.xy - 0.5), vec2(0.5))) : true) {\n            patchColor += texture(iChannel0, params.xy).rgb;\n            numPoints++;\n        }\n\n        if (ONLY_PATCH == 1 ? all(lessThan(abs(params.zw - 0.5), vec2(0.5))) : true) {\n            patchColor += texture(iChannel0, params.zw).rgb;\n            numPoints++;\n        }\n\n        if (numPoints > 0.0) color = patchColor / numPoints;\n    }\n\n    draw(sdLine(uv, a, b, 0.005), vec3(1.0, 0.8, 0.0));\n    draw(sdLine(uv, b, c, 0.005), vec3(1.0, 0.8, 0.0));\n    draw(sdLine(uv, c, d, 0.005), vec3(1.0, 0.8, 0.0));\n    draw(sdLine(uv, d, a, 0.005), vec3(1.0, 0.8, 0.0));\n\n    draw(sdDisc(uv, a, 0.05), vec3(1.0));\n    draw(sdDisc(uv, b, 0.05), vec3(1.0));\n    draw(sdDisc(uv, c, 0.05), vec3(1.0));\n    draw(sdDisc(uv, d, 0.05), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}