{
    "Shader": {
        "info": {
            "date": "1649555249",
            "description": "polar coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBcWh",
            "likes": 2,
            "name": "09 polar coordinates",
            "published": 3,
            "tags": [
                "polarcoordinates"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n    \n    vec2 st = vec2(atan(uv.x,uv.y),length(uv));//笛卡尔坐标系转变为极坐标系\n    \n    //极坐标的x表示角度,一周取值范围是(-3.14,3.14),将他变换到(0,1)之间\n    uv = vec2(st.x/6.2831+0.5,st.y);\n    uv.x += iTime*0.3;//角度一直在变化,表现为旋转效果\n    //uv.x += uv.y;//可以通过各种方法扭曲角度,得到一些意想不到的结果\n    \n    float x= uv.x*5.0;//横坐标放大n倍,在这表示将角度放大n倍\n    float m = fract(x);//取余,得到n个角度为(0,1)的区域\n    m = min(m,1.0-m);//角度从(0,1)变成为(0,0.5)和(0.5,0)两个区域\n    \n    float n = m*0.3+0.2;\n    //uv.y表示的是离原点的距离,距离大于n的时候为0,\n    //小于n-0.1的时候是(0,1),大于n-0.1的时候是1\n    float d = smoothstep(0.0,0.05,n-uv.y);\n    \n    vec3 col = d*vec3(1.0,0.2,0.2);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}