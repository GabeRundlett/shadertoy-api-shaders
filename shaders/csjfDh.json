{
    "Shader": {
        "info": {
            "date": "1689671017",
            "description": "Drag to move the middle circle",
            "flags": 0,
            "hasliked": 0,
            "id": "csjfDh",
            "likes": 4,
            "name": "2D Occlusion Test",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "shadows",
                "occlusion"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "vec2 screen_to_world(vec2 coord)\n{\n    vec2 v = (2.0 * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    v *= 5.0;\n    return v;\n}\n\nfloat sd_scene(vec2 p)\n{\n    vec2 circ1_pos = vec2(0.0);\n    if (iMouse.z > 0.0)\n        circ1_pos = screen_to_world(iMouse.xy);\n    \n    vec2 circ2_pos = vec2(4.5 + sin(TAU * 0.6 * iTime) * 0.25, cos(TAU * 0.22 * iTime) * 2.0);\n    vec2 circ3_pos = vec2(-4.5 - cos(TAU * 0.6 * iTime) * 0.25, cos(TAU * 0.22 * iTime + PI) * 2.0);\n\n    float d = 10000000.0;\n    #if 1\n    d = min(d, distance(p, circ1_pos) - 1.0);\n    d = min(d, distance(p, circ2_pos) - 0.7);\n    d = min(d, distance(p, circ3_pos) - 0.7);\n    #else\n    d = min(d, distance_alt(p, circ1_pos) - 1.0);\n    d = min(d, distance_alt(p, circ2_pos) - 0.7);\n    d = min(d, distance_alt(p, circ3_pos) - 0.7);\n    #endif\n    return d;\n}\n\nbool march(vec2 ro, vec2 rd)\n{\n    // Constants\n    const int max_steps = 100;\n    const float max_dist = 100.0;\n    const float hit_thres = 0.005;\n    \n    // March\n    float sd = 1.0;\n    float traveled = 0.0;\n    for (int i = 0; i < max_steps; i++)\n    {\n        // Get SD\n        sd = sd_scene(ro);\n        \n        // Are we inside an object?\n        if (sd < 0.0)\n            break;\n        \n        // Move forward\n        ro += rd * sd;\n        traveled += sd;\n        \n        // Did we hit something?\n        if (sd < hit_thres)\n            break;\n        \n        // Did we go too far?\n        if (traveled > max_dist)\n            break;\n    }\n    \n    return (sd < hit_thres);\n}\n\nvoid mainImage( out vec4 frag_color, in vec2 frag_coord )\n{\n    // Initialize PRNG\n    eprng_init(frag_coord.xy / max(iResolution.x, iResolution.y), iTime);\n\n    // Calculate occlusion\n    const int num_angles = 100;\n    float v = 0.0;\n    for (int i = 0; i < num_angles; i++)\n    {\n        // Ray origin\n        vec2 ro = screen_to_world(frag_coord + vec2(random(), random()) - 0.5);\n    \n        // Ray direction\n        #if 1\n        float angle = TAU * random();\n        vec2 rd = vec2(cos(angle), sin(angle));\n        #else\n        float angle = random();\n        vec2 rd = vec2(cos_alt_use_t(angle), sin_alt_use_t(angle));\n        #endif\n        \n        // March\n        if (!march(ro, rd)) v += 1.0;\n    }\n    v /= float(num_angles);\n    \n    // Colorize\n    v = clamp(v * v * 1.15, 0.0, 1.0);\n    vec3 col = mix(vec3(0.7, 0.03, 0.02), vec3(1.0, 0.95, 0.75), v);\n    \n    // Output\n    col = pow(col, vec3(1.0 / 2.2));\n    frag_color = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535897932384626433832795\n#define TAU 6.283185307179586476925286766559\n\n// Not faster than built-in functions\n// t = angle_in_radians / tau\nfloat cos_alt_use_t(float t)\n{\n    t = fract(t);\n    t -= .25 + floor(t + .25);\n    t *= 16. * (abs(t) - 0.5);\n    #if 1\n    t += .225 * t * (abs(t) - 1.);\n    #endif\n    return t;\n}\nfloat sin_alt_use_t(float t)\n{\n    return cos_alt_use_t(t - 0.25);\n}\n\n// Not faster than built-in functions,\n// I'm just experimenting\nfloat distance_alt(vec2 a, vec2 b)\n{\n    a -= b;\n    return intBitsToFloat(0x1fbb4000 + (floatBitsToInt(a.x*a.x+a.y*a.y) >> 1));  \n}\n\n\n\n// ***********************************************\n// PRNG\n// Source: https://www.shadertoy.com/view/WdSSRt\n// ***********************************************\n\n/* Usage Example:\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Initialize PRNG\n    eprng_init(fragCoord.xy / max(iResolution.x, iResolution.y), iTime);\n\n    // Using the function:\n    float a = random();\n    vec3 b = vec3(random(), random(), random());\n    \n    ...\n}\n\n*/\n\nuint eprng_state[2];\n\nuint eprng_rot(uint x, int k)\n{\n    return (x << k) | (x >> (32 - k));\n}\n\nfloat random()\n{\n    uint s0 = eprng_state[0];\n    uint s1 = eprng_state[1];\n    uint result = eprng_rot(s0 * 0x9e3779bbu, 5) * 5u;\n    s1 ^= s0;\n    eprng_state[0] = eprng_rot(s0, 26) ^ s1 ^ (s1 << 9);\n    eprng_state[1] = eprng_rot(s1, 13);\n    // Not sure this is actually the best way to get evenly-distributed floats -\n    // precision will be lost converting from int to float, but how much depends on the order of magnitude\n    // I could use bit magic to build the bits of a float directly, then use uintBitsToFloat,\n    // but that also loses precision - just in a different way.\n    // I guess precision loss is inevitable, since if we want floats in the range 0.0 <= r <= 1.0 then\n    // there's only so many bits to work with. It's just a matter of how they're distributed.\n    return float(result) / float(0xffffffffu);\n}\n\nvoid eprng_init(vec2 uv, float iTime)\n{\n    uv *= (iTime + 10.258);\n\n    eprng_state[0] = floatBitsToUint(uv.x);\n    eprng_state[1] = floatBitsToUint(uv.y);\n\n    random();\n}\n\n// ***********************************************\n// End\n// ***********************************************\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}