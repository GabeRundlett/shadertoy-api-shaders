{
    "Shader": {
        "info": {
            "date": "1622981590",
            "description": "Dynamics of domino towers (mouseable, new runs start automatically  or by clicking upper-right)",
            "flags": 32,
            "hasliked": 0,
            "id": "7lXGWf",
            "likes": 9,
            "name": "Domino Towers",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "physics",
                "rigidbody"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "// \"Domino Towers\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Based on \"Falling Towers\", with different visuals and more GPU parallelism\n// (as in \"Dominoes Toppling\")\n\n#define AA    0\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBox2Df (vec2 p, vec2 b);\nmat3 QtToRMat (vec4 q);\nfloat Minv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nmat3 StdVuMat (float el, float az);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec3 blkGap, bSize, fcBlk, ltDir;\nvec2 qBlk;\nfloat tCur, dstFar, nRun;\nint idObj;\nconst float pi = 3.1415927;\n\n#define BIG_SYS  1  // same in all shaders\n\n#if BIG_SYS\nconst int nObj = 112;\n#else\nconst int nObj = 56;\n#endif\n\nconst ivec3 nSphObjD = ivec3 (6, 3, 2);\nconst int nSphObj = nSphObjD.x * nSphObjD.y * nSphObjD.z;\nconst int nSphTot = nObj * nSphObj;\nconst int nPre = 2;\n\nvec3 GetR (int k)\n{\n  return Loadv4 (nPre + 4 * k).xyz;\n}\n\nvec4 GetQ (int k)\n{\n  return Loadv4 (nPre + 4 * k + 2);\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp, fId, u;\n  float dMin, dn, df;\n  dMin = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    u = (v + dn) * rd;\n    fId = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qBlk = vec2 (dot (u.zxy, fId), dot (u.yzx, fId));\n  }\n  return vec4 (dMin, fId);\n}\n\nfloat BlkHitSh (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) dMin = dn;\n  return dMin;\n}\n\nfloat ObjHit (vec3 ro, vec3 rd)\n{\n  mat3 mRot;\n  vec4 cdn4;\n  vec3 rm, rom, rdm;\n  vec2 qBlkN;\n  float dMin;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rm = GetR (n);\n    mRot = QtToRMat (GetQ (n));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    cdn4 = BlkHit (rom, rdm, bSize);\n    if (cdn4.x < dMin) {\n      dMin = cdn4.x;\n      fcBlk = cdn4.yzw;\n      qBlkN = qBlk;\n      idObj = n;\n    }\n  }\n  qBlk = qBlkN;\n  return dMin;\n}\n\nfloat ObjHitSh (vec3 ro, vec3 rd, float rng)\n{\n  mat3 mRot;\n  vec3 rm, rom, rdm;\n  float dMin;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rm = GetR (n);\n    mRot = QtToRMat (GetQ (n));\n    rom = (ro - rm) * mRot;\n    rdm = rd * mRot;\n    dMin = min (dMin, BlkHitSh (rom, rdm, bSize));\n  }\n  return smoothstep (0.5 * rng, rng, dMin);\n}\n\nfloat Spots (vec2 q, int nSpot)\n{\n  float bSz, w;\n  bSz = 0.6 * bSize.x;\n  if (nSpot == 2 || nSpot == 3) q = Rot2D (q, 0.25 * pi);\n  else if (nSpot == 6) q = q.yx;\n  w = 1.;\n  if (nSpot == 1) w = length (q);\n  else if (nSpot == 2) w = length (abs (q) - vec2 (0.4 * bSz, 0.));\n  else if (nSpot == 3) w = length (vec2 (mod (q.x + 0.35 * bSz, 0.7 * bSz) - 0.35 * bSz, q.y));\n  else if (nSpot == 4) w = length (abs (q) - 0.4 * bSz);\n  else if (nSpot == 5) w = min (length (abs (q) - 0.4 * bSz), length (q));\n  else if (nSpot == 6) w = length (vec2 (mod (q.x + 0.26 * bSz, 0.52 * bSz) - 0.26 * bSz,\n     abs (q.y) - 0.4 * bSz));\n  return smoothstep (-0.02, 0., w - 0.2 * bSz);\n}\n\nvec3 ObjCol (vec3 rd, float sh)\n{\n  vec3 vn, col, q;\n  float fId, sp, ep, em;\n  int ns1, ns2, n28;\n  col = vec3 (0.95, 0.95, 1.); \n  fId = float (idObj);\n  ep = smoothstep (0., 0.2, PrBox2Df (qBlk, ((abs (fcBlk.x) == 1.) ? bSize.zy :\n     ((abs (fcBlk.y) == 1.) ? bSize.xz : bSize.yx)) - 0.2));\n  col *= 1. - 0.3 * ep;\n  sp = 1.;\n  em = 1.;\n  if (mod (floor (fId / 8.), 2.) != 0. && fcBlk.z == 2. * mod (fId, 2.) - 1. ||\n     mod (floor (fId / 8.), 2.) == 0. && fcBlk.z == 2. * mod (floor (fId / 2.), 2.) - 1.) {\n    n28 = int (mod (fId, 28.));\n    ns1 = int (0.5 * (-1. + sqrt (float (1 + 8 * n28))));\n    ns2 = n28 - ns1 * (ns1 + 1) / 2;\n    sp = Spots (vec2 (qBlk.x, qBlk.y - 0.5 * bSize.x * sign (qBlk.y)),\n       ((qBlk.y > 0.) ? ns1 : ns2));\n    col = mix (vec3 (0., 0., 1.), col, sp);\n    em = smoothstep (0., 0.02, 0.1 - abs (qBlk.y));\n    col *= 1. - 0.3 * em;\n  }\n  vn = fcBlk;\n  if (sp < 1. || max (ep, em) > 0.) {\n    q = vec3 (qBlk, 0.);\n    if (abs (fcBlk.x) == 1.) q = q.zxy;\n    else if (abs (fcBlk.y) == 1.) q = q.xzy;\n    vn = VaryNf (32. * q, vn, 0.5);\n  }\n  vn = QtToRMat (GetQ (idObj)) * vn;\n  col = col * (0.2 +  0.8 * sh * max (dot (vn, ltDir), 0.)) +\n     0.2 * sh * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n  return col;\n}\n\nvec3 BgCol (vec3 ro, vec3 vn, float sh)\n{\n  vec3 col;\n  col = mix (vec3 (0.7, 0.5, 0.5), vec3 (0.8, 0.85, 0.8),\n     smoothstep (0., 0.07, abs (abs (Fbm2 (0.1 * ro.xz) - 0.4) - 0.2)));\n  col *= 0.2 + 0.8 * sh * max (dot (vn, ltDir), 0.);\n  col *= 0.2 + 0.8 * smoothstep (0.85, 0.95, dot (normalize (200. * ltDir - ro), ltDir));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float dstObj, sh;\n  bool isBg;\n  bSize = 0.5 * blkGap * (vec3 (nSphObjD) - 1.) + 0.4;\n  dstObj = ObjHit (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    isBg = false;\n  } else {\n    ro += ((0.5 - ro.y) / rd.y) * rd;\n    isBg = true;\n  }\n  sh = 0.6 + 0.4 * ObjHitSh (ro + 0.01 * ltDir, ltDir, 60.);\n  if (! isBg) col = ObjCol (rd, sh);\n  else col = BgCol (ro, vec3 (0., 1., 0.), sh);\n  if (isBg && rd.y < 0.) {\n    rd = reflect (rd, vec3 (0., 1., 0.));\n    ro += 0.01 * rd;\n    dstObj = ObjHit (ro, rd);\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      col = mix (col, ObjCol (rd, 1.), 0.3);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float az, el, asp, zmFac, sr, h;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  blkGap = stDat.yzw;\n  stDat = Loadv4 (1);\n  mPtr.xyz = stDat.xyz;\n  nRun = stDat.w;\n  dstFar = 300.;\n  az = -0.2 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0. && Minv2 (mPtr.xy + 0.05 * vec2 (1. / asp, 1.) - 0.5) < 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    az -= 0.005 * pi * tCur;\n  }\n  el = clamp (el, -0.45 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0., 0., -120.);\n  h = 0.;\n  for (int n = VAR_ZERO; n < nObj; n ++) h += GetR (n).y;\n  ro.y = h / float (nObj);\n  ro = vuMat * ro;\n  zmFac = 4.;\n  ltDir = vuMat * normalize (vec3 (0.3, 0.7, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (mPtr.z > 0. && Minv2 (uv - vec2 (asp, 1.)) > -0.1) col = mix (col, vec3 (1., 0.7, 0.), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 256.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Domino Towers\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RotToQt (vec3 v, float a);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nmat3 LpStepMat (vec3 a);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkGap;\nfloat todCur, nStep, nRun, farSep;\nconst float pi = 3.1415927;\nconst float txRow = 256.;\n\n#define PAR_SPH 1  // faster (uses extra parallelism, but needs 3 calls to complete)\n\n#define BIG_SYS  1  // same in all shaders\n\n#if BIG_SYS\nconst int nObj = 112;\n#else\nconst int nObj = 56;\n#endif\n\nconst ivec3 nSphObjD = ivec3 (6, 3, 2);\nconst int nSphObj = nSphObjD.x * nSphObjD.y * nSphObjD.z;\nconst int nSphTot = nObj * nSphObj;\nconst int nPre = 2;\n\nvec3 GetR (int k)\n{\n  return Loadv4 (nPre + 4 * k).xyz;\n}\n\nvec3 GetV (int k)\n{\n  return Loadv4 (nPre + 4 * k + 1).xyz;\n}\n\nvec4 GetQ (int k)\n{\n  return Loadv4 (nPre + 4 * k + 2);\n}\n\nvec3 GetW (int k)\n{\n  return Loadv4 (nPre + 4 * k + 3).xyz;\n}\n\n#if PAR_SPH\n\nvec3 GetAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k).xyz;\n}\n\nvec3 GetWAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k + 1).xyz;\n}\n\nvec3 GetRS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k).xyz;\n}\n\nvec3 GetVS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k + 1).xyz;\n}\n\n#endif\n\nvec3 RSph (float s)\n{\n  vec3 b;\n  b = vec3 (nSphObjD);\n  return blkGap * (floor (vec3 (mod (s, b.x), mod (s, b.x * b.y) / b.x,\n      s / (b.x * b.y))) - 0.5 * (b - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float rSepI, vRel, fo, drv;\n  const float fOvlap = 500., fricN = 1., fricT = 2., fricS = 10.;\n  rSepI = 1. / rSep;\n  fo = fOvlap * (rSepI - 1.);\n  drv = dot (dr, dv) * rSepI * rSepI;\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\n#if PAR_SPH\n\nvoid StepRS (int sId, out vec3 rms, out vec3 vms)\n{\n  vec3 rs;\n  int mId;\n  mId = sId / nSphObj;\n  rs = QtToRMat (GetQ (mId)) * RSph (float (sId - mId * nSphObj));\n  rms = GetR (mId) + rs;\n  vms = GetV (mId) + cross (GetW (mId), rs);\n}\n\nvoid InitRS (int sId, out vec3 rms, out vec3 vms)\n{\n  rms = vec3 (0.);\n  vms = vec3 (0.);\n}\n\nvoid StepAS (int sId, out vec3 am, out vec3 wam)\n{\n  vec3 dr, rm, rms, vms, fc;\n  float rSep;\n  int mId, sIdN;\n  mId = sId / nSphObj;\n  rm = GetR (mId);\n  rms = GetRS (sId);\n  vms = GetVS (sId);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int mIdN = VAR_ZERO; mIdN < nObj; mIdN ++) {\n    if (mIdN != mId && length (rms - GetR (mIdN)) < farSep) {\n      for (int j = VAR_ZERO; j < nSphObj; j ++) {\n        sIdN = mIdN * nSphObj + j;\n        dr = rms - GetRS (sIdN);\n        rSep = length (dr);\n        if (rSep < 1.) {\n          fc = FcFun (dr, rSep, vms - GetVS (sIdN));\n          am += fc;\n          wam += cross (rms - rm, fc);\n        }\n      }\n    }\n  }\n  rSep = abs (rms.y);\n  if (rSep < 1.) {\n    fc = FcFun (vec3 (0., rms.y, 0.), rSep, vms);\n    am += fc;\n    wam += cross (rms - rm, fc);\n  }\n}\n\nvoid InitAS (int sId, out vec3 am, out vec3 wam)\n{\n  am = vec3 (0.);\n  wam = vec3 (0.);\n}\n\n#endif\n\nvoid StepM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot;\n  vec3 dr, rs, am, wam, rMom;\n  float fmId, rSep, grav, dt;\n#if ! PAR_SPH\n  mat3 mRotN;\n  vec3 rmN, vmN, wmN, rsN, dv, rms, vms, fc;\n#endif\n  grav = 1.;\n  dt = 0.01;\n  rm = GetR (mId);\n  vm = GetV (mId);\n  qm = GetQ (mId);\n  wm = GetW (mId);\n  mRot = QtToRMat (qm);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n#if ! PAR_SPH\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rmN = GetR (n);\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = GetV (n);\n      mRotN = QtToRMat (GetQ (n));\n      wmN = GetW (n);\n      for (int j1 = VAR_ZERO; j1 < nSphObj; j1 ++) {\n        rs = mRot * RSph (float (j1));\n        rms = rm + rs;\n        vms = vm + cross (wm, rs);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = VAR_ZERO; j2 < nSphObj; j2 ++) {\n          rsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rsN));\n        }\n        am += fc;\n        wam += cross (rs, fc);\n      }\n    }\n  }\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rs = mRot * rs;\n    dr = rm + rs;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rs));\n      am += fc;\n      wam += cross (rs, fc);\n    }\n  }\n#else\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    am += GetAS (mId * nSphObj + j);\n    wam += GetWAS (mId * nSphObj + j);\n  }\n#endif\n  rMom = vec3 (0.);\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rMom += dot (rs, rs) - rs * rs + 1./6.;\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  if (nStep > 100.) {\n    fmId = float (mId);\n    if (! (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) || nStep > 130.) vm += dt * am;\n    rm += dt * vm;\n    wm += dt * wam;\n    qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n  }\n}\n\nvoid InitM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 r, fn;\n  float fmId, rowGap, layGap, blkSpc;\n  int nb;\n  const int npRow = 2;\n  rowGap = 20.;\n  layGap = 2.74;\n  blkSpc = 1.4;\n  nb = mId / (2 * npRow * npRow);\n  fn.y = float (nb);\n  nb *= 2 * npRow * npRow;\n  r.y = (fn.y + 0.5) * layGap + 0.5;\n  for (int nz = 0; nz < 2 * npRow; nz ++) {\n    if (mod (fn.y, 2.) == 1. && nz == npRow) break;\n    fn.z = float (nz);\n    r.z = (mod (fn.y, 2.) == 1.) ? (fn.z + 1.) * rowGap : (floor (0.5 * fn.z) + 1.) * rowGap -\n       blkSpc * (2. - ((mod (fn.z, 2.) == 0.) ? 1. : 3.));\n    for (int nx = 0; nx < 2 * npRow; nx ++) {\n      if (mod (fn.y, 2.) == 0. && nx == npRow) break;\n      fn.x = float (nx);\n      r.x = (mod (fn.y, 2.) == 1.) ? (floor (0.5 * fn.x) + 1.) * rowGap -\n         blkSpc * (2.- ((mod (fn.x, 2.) == 0.) ? 1. : 3.)) : (fn.x + 1.) * rowGap;\n      if (nb == mId) {\n        rm = r;\n        qm = RotToQt (vec3 (0., 1., 0.), 0.5 * pi * mod (fn.y, 2.));\n      }\n      ++ nb;\n    }\n  }\n  rm.xz -= 0.5 * (float (npRow) + 1.) * rowGap;\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  fmId = float (mId);\n  if (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) {\n    vm.xz = 5. * (vec2 (3., -1.) * normalize (rm.xz) +\n       0.4 * (1. - 2. * vec2 (Hashff (fmId * todCur), Hashff (3.1 * fmId * todCur))));\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, qm;\n  vec3 rm, vm, wm, am, wam;\n  vec2 iFrag, canvas;\n  float asp, mxStep, nSubStep;\n  int mId, pxId, kp;\n#if PAR_SPH\n  vec3 rms, vms;\n  int sId, rId;\n#endif\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n#if PAR_SPH\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj + 4 * nSphTot) discard;\n#else\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj) discard;\n#endif\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  kp = nPre + 4 * nObj;\n  mId = (pxId >= nPre && pxId < kp) ? (pxId - nPre) / 4 : -1;\n#if PAR_SPH\n  sId = (pxId >= kp && pxId < kp + 2 * nSphTot) ? (pxId - kp) / 2 : -1;\n  rId = (pxId >= kp + 2 * nSphTot) ? (pxId - (kp + 2 * nSphTot)) / 2 : -1;\n#endif\n  doInit = false;\n  mxStep = 20000.;\n  if (iFrame <= 5) {\n    doInit = true;\n    nRun = 0.;\n    blkGap = vec3 (0.9, 0.9, 0.7);\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    blkGap = stDat.yzw;\n    stDat = Loadv4 (1);\n    mPtrP.z = stDat.z;\n    nRun = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep || nStep > 50. && mPtr.z > 0. && mPtrP.z < 0. &&\n       Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0.) doInit = true;\n  }\n  if (doInit) {\n    ++ nRun;\n    nStep = 0.;\n  }\n  doInit = (doInit || nStep < 20.);\n  nSubStep = mod (nStep, 3.);\n  farSep = length (blkGap * (vec3 (nSphObjD) - 1.)) + 1.;\n#if PAR_SPH\n  if (! doInit && (pxId >= nPre + 4 * nObj && (nSubStep == 2. || nSubStep == 1. && sId < 0 ||\n     nSubStep == 0. && rId < 0))) discard;\n#endif\n  if (mId >= 0) {\n    if (doInit) InitM (mId, rm, vm, qm, wm);\n    else {\n#if PAR_SPH\n      if (nSubStep == 2.) StepM (mId, rm, vm, qm, wm);\n      else {\n        rm = GetR (mId);\n        vm = GetV (mId);\n        qm = GetQ (mId);\n        wm = GetW (mId);\n      }\n#else\n      StepM (mId, rm, vm, qm, wm);\n#endif\n    }\n    kp = nPre + 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n#if PAR_SPH\n  } else if (sId >= 0) {\n    if (doInit) InitAS (sId, am, wam);\n    else StepAS (sId, am, wam);\n    kp = nPre + 4 * nObj + 2 * sId;\n    if      (pxId == kp + 0) stDat = vec4 (am, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (wam, 0.);\n  } else if (rId >= 0) {\n    if (doInit) InitRS (rId, rms, vms);\n    else StepRS (rId, rms, vms);\n    kp = nPre + 4 * nObj + 2 * nSphTot + 2 * rId;\n    if      (pxId == kp + 0) stDat = vec4 (rms, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vms, 0.);\n#endif\n  } else {\n    if      (pxId == 0) stDat = vec4 (nStep, blkGap);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, nRun);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 RotToQt (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi;\n  fi = float (idVar);\n  if (Maxv2 (abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5)) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Domino Towers\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RotToQt (vec3 v, float a);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nmat3 LpStepMat (vec3 a);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkGap;\nfloat todCur, nStep, nRun, farSep;\nconst float pi = 3.1415927;\nconst float txRow = 256.;\n\n#define PAR_SPH 1  // faster (uses extra parallelism, but needs 3 calls to complete)\n\n#define BIG_SYS  1  // same in all shaders\n\n#if BIG_SYS\nconst int nObj = 112;\n#else\nconst int nObj = 56;\n#endif\n\nconst ivec3 nSphObjD = ivec3 (6, 3, 2);\nconst int nSphObj = nSphObjD.x * nSphObjD.y * nSphObjD.z;\nconst int nSphTot = nObj * nSphObj;\nconst int nPre = 2;\n\nvec3 GetR (int k)\n{\n  return Loadv4 (nPre + 4 * k).xyz;\n}\n\nvec3 GetV (int k)\n{\n  return Loadv4 (nPre + 4 * k + 1).xyz;\n}\n\nvec4 GetQ (int k)\n{\n  return Loadv4 (nPre + 4 * k + 2);\n}\n\nvec3 GetW (int k)\n{\n  return Loadv4 (nPre + 4 * k + 3).xyz;\n}\n\n#if PAR_SPH\n\nvec3 GetAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k).xyz;\n}\n\nvec3 GetWAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k + 1).xyz;\n}\n\nvec3 GetRS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k).xyz;\n}\n\nvec3 GetVS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k + 1).xyz;\n}\n\n#endif\n\nvec3 RSph (float s)\n{\n  vec3 b;\n  b = vec3 (nSphObjD);\n  return blkGap * (floor (vec3 (mod (s, b.x), mod (s, b.x * b.y) / b.x,\n      s / (b.x * b.y))) - 0.5 * (b - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float rSepI, vRel, fo, drv;\n  const float fOvlap = 500., fricN = 1., fricT = 2., fricS = 10.;\n  rSepI = 1. / rSep;\n  fo = fOvlap * (rSepI - 1.);\n  drv = dot (dr, dv) * rSepI * rSepI;\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\n#if PAR_SPH\n\nvoid StepRS (int sId, out vec3 rms, out vec3 vms)\n{\n  vec3 rs;\n  int mId;\n  mId = sId / nSphObj;\n  rs = QtToRMat (GetQ (mId)) * RSph (float (sId - mId * nSphObj));\n  rms = GetR (mId) + rs;\n  vms = GetV (mId) + cross (GetW (mId), rs);\n}\n\nvoid InitRS (int sId, out vec3 rms, out vec3 vms)\n{\n  rms = vec3 (0.);\n  vms = vec3 (0.);\n}\n\nvoid StepAS (int sId, out vec3 am, out vec3 wam)\n{\n  vec3 dr, rm, rms, vms, fc;\n  float rSep;\n  int mId, sIdN;\n  mId = sId / nSphObj;\n  rm = GetR (mId);\n  rms = GetRS (sId);\n  vms = GetVS (sId);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int mIdN = VAR_ZERO; mIdN < nObj; mIdN ++) {\n    if (mIdN != mId && length (rms - GetR (mIdN)) < farSep) {\n      for (int j = VAR_ZERO; j < nSphObj; j ++) {\n        sIdN = mIdN * nSphObj + j;\n        dr = rms - GetRS (sIdN);\n        rSep = length (dr);\n        if (rSep < 1.) {\n          fc = FcFun (dr, rSep, vms - GetVS (sIdN));\n          am += fc;\n          wam += cross (rms - rm, fc);\n        }\n      }\n    }\n  }\n  rSep = abs (rms.y);\n  if (rSep < 1.) {\n    fc = FcFun (vec3 (0., rms.y, 0.), rSep, vms);\n    am += fc;\n    wam += cross (rms - rm, fc);\n  }\n}\n\nvoid InitAS (int sId, out vec3 am, out vec3 wam)\n{\n  am = vec3 (0.);\n  wam = vec3 (0.);\n}\n\n#endif\n\nvoid StepM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot;\n  vec3 dr, rs, am, wam, rMom;\n  float fmId, rSep, grav, dt;\n#if ! PAR_SPH\n  mat3 mRotN;\n  vec3 rmN, vmN, wmN, rsN, dv, rms, vms, fc;\n#endif\n  grav = 1.;\n  dt = 0.01;\n  rm = GetR (mId);\n  vm = GetV (mId);\n  qm = GetQ (mId);\n  wm = GetW (mId);\n  mRot = QtToRMat (qm);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n#if ! PAR_SPH\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rmN = GetR (n);\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = GetV (n);\n      mRotN = QtToRMat (GetQ (n));\n      wmN = GetW (n);\n      for (int j1 = VAR_ZERO; j1 < nSphObj; j1 ++) {\n        rs = mRot * RSph (float (j1));\n        rms = rm + rs;\n        vms = vm + cross (wm, rs);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = VAR_ZERO; j2 < nSphObj; j2 ++) {\n          rsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rsN));\n        }\n        am += fc;\n        wam += cross (rs, fc);\n      }\n    }\n  }\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rs = mRot * rs;\n    dr = rm + rs;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rs));\n      am += fc;\n      wam += cross (rs, fc);\n    }\n  }\n#else\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    am += GetAS (mId * nSphObj + j);\n    wam += GetWAS (mId * nSphObj + j);\n  }\n#endif\n  rMom = vec3 (0.);\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rMom += dot (rs, rs) - rs * rs + 1./6.;\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  if (nStep > 100.) {\n    fmId = float (mId);\n    if (! (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) || nStep > 130.) vm += dt * am;\n    rm += dt * vm;\n    wm += dt * wam;\n    qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n  }\n}\n\nvoid InitM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 r, fn;\n  float fmId, rowGap, layGap, blkSpc;\n  int nb;\n  const int npRow = 2;\n  rowGap = 20.;\n  layGap = 2.74;\n  blkSpc = 1.4;\n  nb = mId / (2 * npRow * npRow);\n  fn.y = float (nb);\n  nb *= 2 * npRow * npRow;\n  r.y = (fn.y + 0.5) * layGap + 0.5;\n  for (int nz = 0; nz < 2 * npRow; nz ++) {\n    if (mod (fn.y, 2.) == 1. && nz == npRow) break;\n    fn.z = float (nz);\n    r.z = (mod (fn.y, 2.) == 1.) ? (fn.z + 1.) * rowGap : (floor (0.5 * fn.z) + 1.) * rowGap -\n       blkSpc * (2. - ((mod (fn.z, 2.) == 0.) ? 1. : 3.));\n    for (int nx = 0; nx < 2 * npRow; nx ++) {\n      if (mod (fn.y, 2.) == 0. && nx == npRow) break;\n      fn.x = float (nx);\n      r.x = (mod (fn.y, 2.) == 1.) ? (floor (0.5 * fn.x) + 1.) * rowGap -\n         blkSpc * (2.- ((mod (fn.x, 2.) == 0.) ? 1. : 3.)) : (fn.x + 1.) * rowGap;\n      if (nb == mId) {\n        rm = r;\n        qm = RotToQt (vec3 (0., 1., 0.), 0.5 * pi * mod (fn.y, 2.));\n      }\n      ++ nb;\n    }\n  }\n  rm.xz -= 0.5 * (float (npRow) + 1.) * rowGap;\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  fmId = float (mId);\n  if (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) {\n    vm.xz = 5. * (vec2 (3., -1.) * normalize (rm.xz) +\n       0.4 * (1. - 2. * vec2 (Hashff (fmId * todCur), Hashff (3.1 * fmId * todCur))));\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, qm;\n  vec3 rm, vm, wm, am, wam;\n  vec2 iFrag, canvas;\n  float asp, mxStep, nSubStep;\n  int mId, pxId, kp;\n#if PAR_SPH\n  vec3 rms, vms;\n  int sId, rId;\n#endif\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n#if PAR_SPH\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj + 4 * nSphTot) discard;\n#else\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj) discard;\n#endif\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  kp = nPre + 4 * nObj;\n  mId = (pxId >= nPre && pxId < kp) ? (pxId - nPre) / 4 : -1;\n#if PAR_SPH\n  sId = (pxId >= kp && pxId < kp + 2 * nSphTot) ? (pxId - kp) / 2 : -1;\n  rId = (pxId >= kp + 2 * nSphTot) ? (pxId - (kp + 2 * nSphTot)) / 2 : -1;\n#endif\n  doInit = false;\n  mxStep = 20000.;\n  if (iFrame <= 5) {\n    doInit = true;\n    nRun = 0.;\n    blkGap = vec3 (0.9, 0.9, 0.7);\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    blkGap = stDat.yzw;\n    stDat = Loadv4 (1);\n    mPtrP.z = stDat.z;\n    nRun = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep || nStep > 50. && mPtr.z > 0. && mPtrP.z < 0. &&\n       Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0.) doInit = true;\n  }\n  if (doInit) {\n    ++ nRun;\n    nStep = 0.;\n  }\n  doInit = (doInit || nStep < 20.);\n  nSubStep = mod (nStep, 3.);\n  farSep = length (blkGap * (vec3 (nSphObjD) - 1.)) + 1.;\n#if PAR_SPH\n  if (! doInit && (pxId >= nPre + 4 * nObj && (nSubStep == 2. || nSubStep == 1. && sId < 0 ||\n     nSubStep == 0. && rId < 0))) discard;\n#endif\n  if (mId >= 0) {\n    if (doInit) InitM (mId, rm, vm, qm, wm);\n    else {\n#if PAR_SPH\n      if (nSubStep == 2.) StepM (mId, rm, vm, qm, wm);\n      else {\n        rm = GetR (mId);\n        vm = GetV (mId);\n        qm = GetQ (mId);\n        wm = GetW (mId);\n      }\n#else\n      StepM (mId, rm, vm, qm, wm);\n#endif\n    }\n    kp = nPre + 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n#if PAR_SPH\n  } else if (sId >= 0) {\n    if (doInit) InitAS (sId, am, wam);\n    else StepAS (sId, am, wam);\n    kp = nPre + 4 * nObj + 2 * sId;\n    if      (pxId == kp + 0) stDat = vec4 (am, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (wam, 0.);\n  } else if (rId >= 0) {\n    if (doInit) InitRS (rId, rms, vms);\n    else StepRS (rId, rms, vms);\n    kp = nPre + 4 * nObj + 2 * nSphTot + 2 * rId;\n    if      (pxId == kp + 0) stDat = vec4 (rms, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vms, 0.);\n#endif\n  } else {\n    if      (pxId == 0) stDat = vec4 (nStep, blkGap);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, nRun);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 RotToQt (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi;\n  fi = float (idVar);\n  if (Maxv2 (abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5)) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Domino Towers\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec4 QtMul (vec4 q1, vec4 q2);\nvec4 RotToQt (vec3 v, float a);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nmat3 LpStepMat (vec3 a);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 blkGap;\nfloat todCur, nStep, nRun, farSep;\nconst float pi = 3.1415927;\nconst float txRow = 256.;\n\n#define PAR_SPH 1  // faster (uses extra parallelism, but needs 3 calls to complete)\n\n#define BIG_SYS  1  // same in all shaders\n\n#if BIG_SYS\nconst int nObj = 112;\n#else\nconst int nObj = 56;\n#endif\n\nconst ivec3 nSphObjD = ivec3 (6, 3, 2);\nconst int nSphObj = nSphObjD.x * nSphObjD.y * nSphObjD.z;\nconst int nSphTot = nObj * nSphObj;\nconst int nPre = 2;\n\nvec3 GetR (int k)\n{\n  return Loadv4 (nPre + 4 * k).xyz;\n}\n\nvec3 GetV (int k)\n{\n  return Loadv4 (nPre + 4 * k + 1).xyz;\n}\n\nvec4 GetQ (int k)\n{\n  return Loadv4 (nPre + 4 * k + 2);\n}\n\nvec3 GetW (int k)\n{\n  return Loadv4 (nPre + 4 * k + 3).xyz;\n}\n\n#if PAR_SPH\n\nvec3 GetAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k).xyz;\n}\n\nvec3 GetWAS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * k + 1).xyz;\n}\n\nvec3 GetRS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k).xyz;\n}\n\nvec3 GetVS (int k)\n{\n  return Loadv4 (nPre + 4 * nObj + 2 * nSphTot + 2 * k + 1).xyz;\n}\n\n#endif\n\nvec3 RSph (float s)\n{\n  vec3 b;\n  b = vec3 (nSphObjD);\n  return blkGap * (floor (vec3 (mod (s, b.x), mod (s, b.x * b.y) / b.x,\n      s / (b.x * b.y))) - 0.5 * (b - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float rSepI, vRel, fo, drv;\n  const float fOvlap = 500., fricN = 1., fricT = 2., fricS = 10.;\n  rSepI = 1. / rSep;\n  fo = fOvlap * (rSepI - 1.);\n  drv = dot (dr, dv) * rSepI * rSepI;\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\n#if PAR_SPH\n\nvoid StepRS (int sId, out vec3 rms, out vec3 vms)\n{\n  vec3 rs;\n  int mId;\n  mId = sId / nSphObj;\n  rs = QtToRMat (GetQ (mId)) * RSph (float (sId - mId * nSphObj));\n  rms = GetR (mId) + rs;\n  vms = GetV (mId) + cross (GetW (mId), rs);\n}\n\nvoid InitRS (int sId, out vec3 rms, out vec3 vms)\n{\n  rms = vec3 (0.);\n  vms = vec3 (0.);\n}\n\nvoid StepAS (int sId, out vec3 am, out vec3 wam)\n{\n  vec3 dr, rm, rms, vms, fc;\n  float rSep;\n  int mId, sIdN;\n  mId = sId / nSphObj;\n  rm = GetR (mId);\n  rms = GetRS (sId);\n  vms = GetVS (sId);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int mIdN = VAR_ZERO; mIdN < nObj; mIdN ++) {\n    if (mIdN != mId && length (rms - GetR (mIdN)) < farSep) {\n      for (int j = VAR_ZERO; j < nSphObj; j ++) {\n        sIdN = mIdN * nSphObj + j;\n        dr = rms - GetRS (sIdN);\n        rSep = length (dr);\n        if (rSep < 1.) {\n          fc = FcFun (dr, rSep, vms - GetVS (sIdN));\n          am += fc;\n          wam += cross (rms - rm, fc);\n        }\n      }\n    }\n  }\n  rSep = abs (rms.y);\n  if (rSep < 1.) {\n    fc = FcFun (vec3 (0., rms.y, 0.), rSep, vms);\n    am += fc;\n    wam += cross (rms - rm, fc);\n  }\n}\n\nvoid InitAS (int sId, out vec3 am, out vec3 wam)\n{\n  am = vec3 (0.);\n  wam = vec3 (0.);\n}\n\n#endif\n\nvoid StepM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot;\n  vec3 dr, rs, am, wam, rMom;\n  float fmId, rSep, grav, dt;\n#if ! PAR_SPH\n  mat3 mRotN;\n  vec3 rmN, vmN, wmN, rsN, dv, rms, vms, fc;\n#endif\n  grav = 1.;\n  dt = 0.01;\n  rm = GetR (mId);\n  vm = GetV (mId);\n  qm = GetQ (mId);\n  wm = GetW (mId);\n  mRot = QtToRMat (qm);\n  am = vec3 (0.);\n  wam = vec3 (0.);\n#if ! PAR_SPH\n  for (int n = VAR_ZERO; n < nObj; n ++) {\n    rmN = GetR (n);\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = GetV (n);\n      mRotN = QtToRMat (GetQ (n));\n      wmN = GetW (n);\n      for (int j1 = VAR_ZERO; j1 < nSphObj; j1 ++) {\n        rs = mRot * RSph (float (j1));\n        rms = rm + rs;\n        vms = vm + cross (wm, rs);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (int j2 = VAR_ZERO; j2 < nSphObj; j2 ++) {\n          rsN = mRotN * RSph (float (j2));\n          dr = rms - (rmN + rsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rsN));\n        }\n        am += fc;\n        wam += cross (rs, fc);\n      }\n    }\n  }\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rs = mRot * rs;\n    dr = rm + rs;\n    rSep = abs (dr.y);\n    if (rSep < 1.) {\n      fc = FcFun (vec3 (0., dr.y, 0.), rSep, vm + cross (wm, rs));\n      am += fc;\n      wam += cross (rs, fc);\n    }\n  }\n#else\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    am += GetAS (mId * nSphObj + j);\n    wam += GetWAS (mId * nSphObj + j);\n  }\n#endif\n  rMom = vec3 (0.);\n  for (int j = VAR_ZERO; j < nSphObj; j ++) {\n    rs = RSph (float (j));\n    rMom += dot (rs, rs) - rs * rs + 1./6.;\n  }\n  rMom /= float (nSphObj);\n  wam = mRot * (wam * mRot / rMom);\n  am.y -=  grav;\n  if (nStep > 100.) {\n    fmId = float (mId);\n    if (! (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) || nStep > 130.) vm += dt * am;\n    rm += dt * vm;\n    wm += dt * wam;\n    qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n  }\n}\n\nvoid InitM (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  vec3 r, fn;\n  float fmId, rowGap, layGap, blkSpc;\n  int nb;\n  const int npRow = 2;\n  rowGap = 20.;\n  layGap = 2.74;\n  blkSpc = 1.4;\n  nb = mId / (2 * npRow * npRow);\n  fn.y = float (nb);\n  nb *= 2 * npRow * npRow;\n  r.y = (fn.y + 0.5) * layGap + 0.5;\n  for (int nz = 0; nz < 2 * npRow; nz ++) {\n    if (mod (fn.y, 2.) == 1. && nz == npRow) break;\n    fn.z = float (nz);\n    r.z = (mod (fn.y, 2.) == 1.) ? (fn.z + 1.) * rowGap : (floor (0.5 * fn.z) + 1.) * rowGap -\n       blkSpc * (2. - ((mod (fn.z, 2.) == 0.) ? 1. : 3.));\n    for (int nx = 0; nx < 2 * npRow; nx ++) {\n      if (mod (fn.y, 2.) == 0. && nx == npRow) break;\n      fn.x = float (nx);\n      r.x = (mod (fn.y, 2.) == 1.) ? (floor (0.5 * fn.x) + 1.) * rowGap -\n         blkSpc * (2.- ((mod (fn.x, 2.) == 0.) ? 1. : 3.)) : (fn.x + 1.) * rowGap;\n      if (nb == mId) {\n        rm = r;\n        qm = RotToQt (vec3 (0., 1., 0.), 0.5 * pi * mod (fn.y, 2.));\n      }\n      ++ nb;\n    }\n  }\n  rm.xz -= 0.5 * (float (npRow) + 1.) * rowGap;\n  vm = vec3 (0.);\n  wm = vec3 (0.);\n  fmId = float (mId);\n  if (abs (fmId - 3.) == 1. || abs (fmId - 4.) == 1.) {\n    vm.xz = 5. * (vec2 (3., -1.) * normalize (rm.xz) +\n       0.4 * (1. - 2. * vec2 (Hashff (fmId * todCur), Hashff (3.1 * fmId * todCur))));\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, qm;\n  vec3 rm, vm, wm, am, wam;\n  vec2 iFrag, canvas;\n  float asp, mxStep, nSubStep;\n  int mId, pxId, kp;\n#if PAR_SPH\n  vec3 rms, vms;\n  int sId, rId;\n#endif\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n#if PAR_SPH\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj + 4 * nSphTot) discard;\n#else\n  if (iFrag.x >= txRow || pxId >= nPre + 4 * nObj) discard;\n#endif\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  kp = nPre + 4 * nObj;\n  mId = (pxId >= nPre && pxId < kp) ? (pxId - nPre) / 4 : -1;\n#if PAR_SPH\n  sId = (pxId >= kp && pxId < kp + 2 * nSphTot) ? (pxId - kp) / 2 : -1;\n  rId = (pxId >= kp + 2 * nSphTot) ? (pxId - (kp + 2 * nSphTot)) / 2 : -1;\n#endif\n  doInit = false;\n  mxStep = 20000.;\n  if (iFrame <= 5) {\n    doInit = true;\n    nRun = 0.;\n    blkGap = vec3 (0.9, 0.9, 0.7);\n  } else {\n    stDat = Loadv4 (0);\n    nStep = stDat.x;\n    blkGap = stDat.yzw;\n    stDat = Loadv4 (1);\n    mPtrP.z = stDat.z;\n    nRun = stDat.w;\n    ++ nStep;\n    if (nStep > mxStep || nStep > 50. && mPtr.z > 0. && mPtrP.z < 0. &&\n       Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0.) doInit = true;\n  }\n  if (doInit) {\n    ++ nRun;\n    nStep = 0.;\n  }\n  doInit = (doInit || nStep < 20.);\n  nSubStep = mod (nStep, 3.);\n  farSep = length (blkGap * (vec3 (nSphObjD) - 1.)) + 1.;\n#if PAR_SPH\n  if (! doInit && (pxId >= nPre + 4 * nObj && (nSubStep == 2. || nSubStep == 1. && sId < 0 ||\n     nSubStep == 0. && rId < 0))) discard;\n#endif\n  if (mId >= 0) {\n    if (doInit) InitM (mId, rm, vm, qm, wm);\n    else {\n#if PAR_SPH\n      if (nSubStep == 2.) StepM (mId, rm, vm, qm, wm);\n      else {\n        rm = GetR (mId);\n        vm = GetV (mId);\n        qm = GetQ (mId);\n        wm = GetW (mId);\n      }\n#else\n      StepM (mId, rm, vm, qm, wm);\n#endif\n    }\n    kp = nPre + 4 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = qm;\n    else if (pxId == kp + 3) stDat = vec4 (wm, 0.);\n#if PAR_SPH\n  } else if (sId >= 0) {\n    if (doInit) InitAS (sId, am, wam);\n    else StepAS (sId, am, wam);\n    kp = nPre + 4 * nObj + 2 * sId;\n    if      (pxId == kp + 0) stDat = vec4 (am, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (wam, 0.);\n  } else if (rId >= 0) {\n    if (doInit) InitRS (rId, rms, vms);\n    else StepRS (rId, rms, vms);\n    kp = nPre + 4 * nObj + 2 * nSphTot + 2 * rId;\n    if      (pxId == kp + 0) stDat = vec4 (rms, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vms, 0.);\n#endif\n  } else {\n    if      (pxId == 0) stDat = vec4 (nStep, blkGap);\n    else if (pxId == 1) stDat = vec4 (mPtr.xyz, nRun);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 RotToQt (vec3 v, float a)\n{\n  vec4 q;\n  float c, s;\n  const float tol = 1e-6;\n  c = cos (a);  s = sin (a);\n  q.w = 0.5 * sqrt (max (1. + (1. - c) * dot (v, v) + 3. * c, 0.));\n  if (q.w > tol) q.xyz = s * v.xyz / (2. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + (1. - c) * v.x * v.x + c), 0.));\n    if (q.x > tol) q.yz = ((1. - c) * v.xz * v.yx + s * v.zy) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + (1. - c) * v.y * v.y + c), 0.));\n      q.z = (q.y > tol) ? ((1. - c) * v.y * v.z + s * v.x) / q.y : 1.;\n    }\n  }\n  return q;\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi;\n  fi = float (idVar);\n  if (Maxv2 (abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5)) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}