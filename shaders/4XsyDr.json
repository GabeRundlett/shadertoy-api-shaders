{
    "Shader": {
        "info": {
            "date": "1726490349",
            "description": "textures ",
            "flags": 32,
            "hasliked": 0,
            "id": "4XsyDr",
            "likes": 2,
            "name": "shader))",
            "published": 3,
            "tags": [
                "texture"
            ],
            "usePreview": 0,
            "username": "olegg",
            "viewed": 71
        },
        "renderpass": [
            {
                "code": "struct Surface {\n  float sd;\n  vec3 color;\n};\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nSurface sdfScene(in vec3 p);\n\nvec3 generateNormal ( vec3 z )\n{\n    float e = 0.001;\n    float dx1 = sdfScene(z + vec3(e, 0, 0)).sd;\n    float dx2 = sdfScene(z - vec3(e, 0, 0)).sd;\n    float dy1 = sdfScene(z + vec3(0, e, 0)).sd;\n    float dy2 = sdfScene(z - vec3(0, e, 0)).sd;\n    float dz1 = sdfScene(z + vec3(0, 0, e)).sd;\n    float dz2 = sdfScene(z - vec3(0, 0, e)).sd;\n    \n    return -normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nvec3 getTexture(vec3 p, vec3 normal) {\n    return (abs(texture(iChannel1, p.xy).rgb * normal.z) + abs(texture(iChannel1, p.xz).rgb * normal.y) + abs(texture(iChannel1, p.yz).rgb * normal.x));\n}\n\nvec3 getTextureChannel3(vec3 p, vec3 normal) {\n    return (abs(texture(iChannel0, p.xy).rgb * normal.z) + abs(texture(iChannel0, p.xz).rgb * normal.y) + abs(texture(iChannel0, p.yz).rgb * normal.x));\n}\n\nvec3 getTextureChannel0(vec3 p, vec3 normal) {\n    return (abs(texture(iChannel0, p.xy).rgb * normal.z) + abs(texture(iChannel0, p.xz).rgb * normal.y) + abs(texture(iChannel0, p.yz).rgb * normal.x));\n}\n\nSurface minSD(in Surface s1, in Surface s2) {\n    if (s1.sd < s2.sd) {\n        return s1;\n    }\n    return s2;\n}\n\nfloat sphereSD(vec3 p) {\n    return length(p) - 1.;\n}\n\nvec3 sphereNormal(vec3 z) {\n    float e = 0.001;\n    float dx1 = sphereSD(z + vec3(e, 0, 0));\n    float dx2 = sphereSD(z - vec3(e, 0, 0));\n    float dy1 = sphereSD(z + vec3(0, e, 0));\n    float dy2 = sphereSD(z - vec3(0, e, 0));\n    float dz1 = sphereSD(z + vec3(0, 0, e));\n    float dz2 = sphereSD(z - vec3(0, 0, e));\n    \n    return -normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nSurface sphere ( in vec3 p, in vec3 offset )\n{\n    p -= offset;\n    p *= rotateX(iTime) * rotateY(iTime) * rotateZ(iTime);\n    vec3 normal = sphereNormal(p);\n    return Surface(sphereSD(p), getTextureChannel3(p, normal));\n}\n\nfloat torusSD(vec3 pt, vec2 t) {\n    vec2 q  = vec2 ( length ( pt.xz) - t.x, pt.y );\n    return length ( q ) - t.y;\n}\n\nvec3 torusNormal(vec3 z, vec2 t) {\n    float e = 0.001;\n    float dx1 = torusSD(z + vec3(e, 0, 0), t);\n    float dx2 = torusSD(z - vec3(e, 0, 0), t);\n    float dy1 = torusSD(z + vec3(0, e, 0), t);\n    float dy2 = torusSD(z - vec3(0, e, 0), t);\n    float dz1 = torusSD(z + vec3(0, 0, e), t);\n    float dz2 = torusSD(z - vec3(0, 0, e), t);\n    \n    return -normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nSurface torus ( in vec3 pos, in vec2 t, in vec3 offset ) {\n    vec3 pt = (pos - offset) * rotateX(iTime * 0.3) * rotateY(iTime * 0.2) * rotateX(iTime * 0.5);\n    vec3 normal = torusNormal(pt, t);\n    return Surface(torusSD(pt, t), getTextureChannel0(pt, normal));\n}\n\nfloat cubeSD(vec3 p) {\n    vec3 pt = abs (p) - 1.0;\n    return length ( max ( pt, 0.0 ) ) + min ( max ( pt.x, max ( pt.y, pt.z ) ), 0.0 );\n}\n\nvec3 cubeNormal(vec3 z) {\n    float e = 0.001;\n    float dx1 = cubeSD(z + vec3(e, 0, 0));\n    float dx2 = cubeSD(z - vec3(e, 0, 0));\n    float dy1 = cubeSD(z + vec3(0, e, 0));\n    float dy2 = cubeSD(z - vec3(0, e, 0));\n    float dz1 = cubeSD(z + vec3(0, 0, e));\n    float dz2 = cubeSD(z - vec3(0, 0, e));\n    \n    return -normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\nSurface cube ( in vec3 pos, in vec3 offset)\n{\n    vec3 pt = (pos - offset) * rotateX(iTime) * rotateY(iTime) * rotateZ(iTime);;\n    vec3 col = getTexture(pt, cubeNormal(pt));\n    Surface cube1 = Surface(cubeSD(pt), col);\n    \n    vec3 pt2 = (pos - offset) * rotateX(iTime + 1.) * rotateY(iTime + 1.) * rotateZ(iTime);\n    vec3 col2 = getTexture(pt2, cubeNormal(pt2));\n    Surface cube2 = Surface(cubeSD(pt2), col2);\n\n    return minSD(cube1, cube2);\n    \n}\n\nSurface sdfFloor(vec3 p) {\n  return Surface(p.y + 10., texture(iChannel3, p.xz * 0.0625).rgb);\n}\n\n\nSurface sdfScene(in vec3 p) {\n    return minSD(minSD(minSD(torus(p, vec2(1, 0.5), vec3(-3, 0, -4)), sphere(p, vec3(4, 1, -3))), sdfFloor(p)), cube(p, vec3(1, 0, -2)));\n}\n\n\n#define MAX_ITERS   300\n#define MAX_DIST    200.0\nvec3 trace ( vec3 from, vec3 dir, out bool hit, out int steps )\n{\n    vec3     p         = from;\n    float    totalDist = 0.0;\n    \n    hit = false;\n    \n    for ( steps = 0; steps < MAX_ITERS; steps++ )\n    {\n        Surface    dist = sdfScene( p );\n        \n        if ( dist.sd < 0.00001 )\n        {\n            hit = true;\n            break;\n        }\n        \n        totalDist += dist.sd;\n        \n        if ( totalDist > MAX_DIST )\n            break;\n            \n        p += dist.sd * dir;\n    }\n    \n    return p;\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n    vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n    vec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n    vec3 cu = normalize(cross(cd, cr)); // camera up\n\n    return mat3(-cr, cu, -cd);\n}\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nvec3 powVec3(vec3 vec, float num) {\n    vec.x = pow(vec.x, num);\n    vec.y = pow(vec.y, num);\n    vec.z = pow(vec.z, num);\n    return vec;\n}\n\n\n#define PI 3.14159\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  if (mouseUV == vec2(0, 0)) {\n      mouseUV = vec2(0.5, 0.5);\n  }\n  vec3 col = vec3(0.1, 0.1, 0.1);\n  vec3 lp = vec3(0, 0, 0); // lookat point (aka camera target)\n  vec3 ro = vec3(0, 3, 3); // ray origin that represents camera position\n  float cameraRadius = 2.5;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(PI/2., 0., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z); \n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n  vec3 light = vec3(2, 3, 10);\n  bool hit;\n  int steps;\n  vec3 p = trace(ro, rd, hit, steps);\n  vec3 light_dir = normalize(p - light);\n  vec3 normal = generateNormal(p);\n \n  if (hit) {\n      vec3 specular = pow(max(0., dot(normalize(light_dir + normalize(rd)), normal)), 500.) * vec3(1, 1, 1); \n      col = max(0.25, dot(normal, light_dir)) * sdfScene(p).color + specular;\n      vec3 light_p = trace(light, light_dir, hit, steps);\n      if (length(light_p - p) > 0.1) {\n          col *= 0.5;\n      }\n      \n  } else {\n      col = texture(iChannel2, rd).rgb;\n  }\n  fragColor = vec4(powVec3(col, 0.7), 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat rand(float seed){\n    return fract(sin(seed * 12.9898) * 43758.5453);\n}\n\nfloat smoothRand(float seed) {\n    return sin(2. * PI * fract(sin(seed * 1.9898) * 1.5453));\n}\n\nfloat smoothRand(vec2 seed) {\n    return sin(2. * PI * fract(sin(seed.x * 1.9898) * 1.5453 * seed.y));\n}\n\n\nvec3 random3(float seed) {\n    return normalize(vec3(rand(vec2(seed, seed + 1.)), rand(vec2(seed + 2., seed + 3.)), rand(vec2(seed + 4., seed + 5.))));\n}\n\nvec3 noise(float dist) {\n    return  10. * random3(iTime * 0.01 + dist) / (pow(dist + 1.13, 10.));\n}\n\nfloat sunspot(vec3 cDir) {\n    float spotsNum = 3.;\n    float shadow = 0.;\n    for (float i = 0.; i < spotsNum; ++i) {\n        vec3 spot = vec3(smoothRand(4200. * i + iTime * 0.1), smoothRand(4300. * i + iTime * 0.1), smoothRand(4400. * i + iTime * 0.1)) * 0.1;\n        shadow += .3 / pow((length(spot - cDir) + 1.), 5.);\n    }\n    \n    vec3 spot = vec3(smoothRand(42. + iTime * 0.2), smoothRand(43. + iTime * 0.2), smoothRand(44. + iTime * 0.2)) * 0.1;\n    return min(shadow + abs(smoothRand(iTime * 0.5 + 12.5 * (fract(cDir.y * 10.)))) * 0.05, 0.8);\n}\n\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 center = normalize(vec3 (2, 3, 10));\n    vec3 cDir = (center - rayDir);\n    vec3 col =  0.1 + 0.5 * (rayDir) + 0.5 * vec3(2, 0.5, 0.5) / (length(cDir) + 1.) + \n                7. * random3(5. * iTime + length(cDir)) / (pow(length(cDir) + 1.13, 10.));\n    col.g *= 0.7;\n    if (length (cDir) < 0.2) {\n        col = vec3(1., 3.5 * length(center - rayDir), 0.);\n        float spotIntensity = sunspot(cDir);\n        col *= (1.0 - spotIntensity);\n    } else if (length (cDir) < 0.3 && mod((cDir.x / cDir.y), 0.1) > 0.02) {\n        col *= 0.1 / length (cDir);\n        col += (1. - (0.1 / length (cDir))) * (vec3(1., 3.5 * length(center - rayDir), 0.) - 0.7 * noise(length(cDir)));\n    }\n    \n    // Output to cubemap\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord.x *= iResolution.y / iResolution.x;\n    float step = 57.;\n\n    vec3 col = vec3(0);\n    if (mod(abs(fragCoord.x) / step , 2.) <= 1. && mod(abs(fragCoord.y) / step , 2.) <= 1.) {\n        col.r += 1.;\n    } else if (mod(abs(fragCoord.x) / step , 2.) <= 1. && mod(abs(fragCoord.y) / step , 2.) > 1.) {\n        col.g += 1.;\n    } else if (mod(abs(fragCoord.x) / step , 2.) > 1. && mod(abs(fragCoord.y) / step , 2.) > 1.) {\n        col.b += 1.;\n    } else {\n        col += 1.;\n    }\n    //col += vec3(sin(fragCoord.x / 10.) , sin(fragCoord.y), sin(fragCoord.y / 5.) - cos(fragCoord.x));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}