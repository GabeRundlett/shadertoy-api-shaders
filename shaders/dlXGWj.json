{
    "Shader": {
        "info": {
            "date": "1672440349",
            "description": "Some old never puiblished shader I did on Shader Editor on android.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlXGWj",
            "likes": 17,
            "name": "Reflected tubes",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 495
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a,0.1,1.)\nmat2 r2d(float a){float c = cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  float fov = 3.;\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd,r));\n  return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if(a.x<b.x)\n  return a;\n  return b;\n}\n\nvec2 map(vec3 p)\n{\n  float repv = .5;\n  vec3 pv = p;\n  pv.y= mod(pv.y+iTime+repv*.5,repv)-repv*.5;\n  for (int i = 0;i<6;++i)\n  {\n    float fi = float(i);\n\n\n    p.xz*=r2d(iTime*.15*fi/4.);\n    p = abs(p);\n    p+= vec3(-1.,-2.,.0);\n    p.xy*=r2d(iTime*.25*fi/4.*mod(fi,2.));\n\n  }\n  vec2 acc = vec2(10000.,-1.);\n\nvec2 rep = vec2(1.5);\nvec2 id = floor((p.xz+rep*.5)/rep);\np.xz = mod(p.xz+rep*.5,rep)-rep*.5;\n float h = 2.+sin(length(id)+iTime)+length(id)*.25;\n  float shape = max(length(p.xz)-.05,abs(p.y)-h);\n  shape = max(shape,-(abs(pv.y)-.1));\n  acc = _min(acc, vec2(shape, 0.));\n\n  return acc;\n}\n\nvec3 getNorm(float d, vec3 p)\n{\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\n\nvec3 gradient(float f)\n{\n  vec3 cols[7];\n  cols[0] = vec3(254,241,193)/255.;\n  cols[1] = vec3(254,228,77)/255.;\n  cols[2] = vec3(254,136,85)/255.;\n  cols[3] = vec3(254,49,54)/255.;\n  cols[4] = vec3(79,28,113)/255.;\n  cols[5] = vec3(49, 18,70)/255.;\n  cols[6] = vec3(32,11,45)/255.;\n\n  return cols[int(min(f*7.,6.))];\n}\n\nvec3 getCol(vec2 uv)\n{\n  return gradient(sat(length(uv)*.1));\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accCol = vec3(0.);\n  vec3 p = ro;\n  for (int i = 0;i<steps&&distance(p,ro)<20.;++i)\n  {\n    vec2 res = map(p);\n    if (res.x<0.01)\n      return vec3(res.x,distance(p,ro),res.y);\n      accCol+= getCol(p.xz)\n      *(1.-sat(res.x/.75))*.05\n      *sat(.5+.5*sin(length(p)-iTime*4.));\n    p+=rd*res.x*.85;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col= vec3(0.);\n\nfloat t = iTime*.35;\nfloat d = 3.;\n  vec3 ro = vec3(d*cos(t),-8.+4.*sin(iTime*.1),d*sin(t));\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 rd = normalize(ta-ro);\n\n  rd = getCam(rd,uv);\n\n  vec3 res = trace(ro,rd, 128);\n  if (res.y >0.)\n  {\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(res.x,p);\n    col = n*.5+.5;\n    col = getCol(p.xz);\n    if (abs(dot(n,vec3(0.,1.,0.)))>0.1)\n     col = gradient(sat(length(p.xz)*.1));\n  }\ncol+= accCol;\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.xx;\n\n  vec3 col = rdr(uv);\n  col = pow(col, vec3(1.2));\n  col *= 1.-sat(lenny(uv*2.)-.25);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}