{
    "Shader": {
        "info": {
            "date": "1712233305",
            "description": "Those glyphs from Minecraft\n\nClick and drag â†” to browse through every glyph",
            "flags": 0,
            "hasliked": 0,
            "id": "lct3Wf",
            "likes": 15,
            "name": "SGA Glyphs",
            "published": 3,
            "tags": [
                "minecraft",
                "cc0",
                "fonts",
                "sga",
                "glyphs"
            ],
            "usePreview": 0,
            "username": "cmzw",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "// SGA/Standard Galactic Glyphs - License: CC0\n\n#define GLYPH_SCALE .8\n#define GRID_SCALE 4.\n\n// #define OFFSET_ROWS\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += iDate.z;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat p(vec2 uv, int i) {\n    float ic = float(i);\n\tvec2 gr = 1.0 - abs(uv*7.-0.5 - vec2(mod(ic,7.), floor(ic/7.)));\n\treturn smoothstep(0.2,0.5,min(gr.x,gr.y));\n}\n\nfloat b(int n, int b) { return float(mod(floor(float(n) / exp2(floor(float(b)))), 2.0) != 0.0); }\n\nfloat sga(vec2 uv, int g) {\n\tconst ivec3 n[] = ivec3[](\n\t\tivec3(0x1218, 0x4081, 0x1820),\n        ivec3(0x0408, 0x0102, 0xF901),\n        ivec3(0x0004, 0xC081, 0x2040),\n        ivec3(0x1F00, 0x80C0, 0x0180),\n        ivec3(0x8122, 0x2040, 0xF810),\n        ivec3(0x8000, 0xA00F, 0x0002),\n        ivec3(0x0810, 0x0384, 0x4081),\n        ivec3(0x803E, 0x810F, 0x2040),\n        ivec3(0x0408, 0x8002, 0x2040),\n        ivec3(0x0408, 0x0100, 0x2040),\n        ivec3(0x0408, 0x8542, 0x2040),\n        ivec3(0x0A04, 0x4081, 0x10A0),\n        ivec3(0x1022, 0x0408, 0xF902),\n        ivec3(0x0912, 0x8104, 0x0820),\n        ivec3(0x081E, 0x8104, 0x0820),\n        ivec3(0x0814, 0x4285, 0x5021),\n        ivec3(0x8008, 0x040F, 0xF902),\n        ivec3(0x0012, 0x0000, 0x4800),\n        ivec3(0x0204, 0x8181, 0x2040),\n        ivec3(0x103F, 0x0408, 0x8002),\n        ivec3(0x0000, 0xE005, 0x0003),\n        ivec3(0x0408, 0xE102, 0xF803),\n        ivec3(0x0000, 0x0002, 0x0110),\n        ivec3(0x0822, 0x4104, 0x0820),\n        ivec3(0x0A14, 0x4285, 0x50A1),\n        ivec3(0x8A08, 0x2448, 0x8912)\n\t);\n\t\n\tfloat r = 0.0;\n\tfor (int i = 0; i < 16; i++) {\n\t\tr = max(r, p(uv, i   )*b(n[g].x,i));\n\t\tr = max(r, p(uv, i+16)*b(n[g].y,i));\n\t\tr = max(r, p(uv, i+32)*b(n[g].z,i));\n\t}\n\treturn r;\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = vec2(1,-1) * (2.*I - iResolution.xy) / iResolution.y;\n    vec2 grid = ( uv + vec2(iTime*0.05,0.0))*GRID_SCALE;\n    \n    #ifdef OFFSET_ROWS\n    grid -= vec2(mod(floor(grid).y,2.0)*0.5,0.0);\n    #endif\n    \n    float glyph = sga(1.0/GLYPH_SCALE*(fract(grid)-0.5)+0.5,\n        int(hash12(floor(grid))*26.));\n\n    if(iMouse.z > 0.)\n        glyph = sga(uv*.8 + .5,int(iMouse.x/iResolution.x*26.));\n\n    O = vec4(glyph);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}