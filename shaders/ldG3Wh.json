{
    "Shader": {
        "info": {
            "date": "1454189277",
            "description": "How to check if 2 distance estimates collide.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldG3Wh",
            "likes": 5,
            "name": "map to map collisions",
            "published": 3,
            "tags": [
                "collision",
                "detection"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "//map to map collisions by eiffie\n//It is easy to check collisions between a sphere and a distance estimated object\n//but what about 2 distance estimates. It is pretty easy too if you don't need \n//great accuracy.\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\n\nfloat tym;\nvec2 offset;\nfloat DE(vec2 p){\n\tp=rotate(p-offset,tym);\n\treturn min(length(p)-0.2,length(max(abs(p)-vec2(0.5,0.05),0.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv=2.0*(fragCoord.xy/iResolution.xy-0.5);\n\tfloat y=0.1+0.25*sin(iTime*1.4);\n\tvec2 p=vec2(-0.35,-0.35);\n\tfloat dp=length(p-uv)-0.01;\n\ttym=iTime;\n\toffset=vec2(0.3,y);\n\tfloat d1=DE(uv);\n\ttym=iTime*1.3;\n\toffset=vec2(-0.35,-0.35);\n\tfloat dp2=length(p-uv)-0.01;\n\td1=min(d1,DE(uv));\n\tvec2 psave=p;\n\t\n\tfor(int i=0;i<4;i++){// i changed it to ping-ponging between the surfaces\n\t\ttym=iTime; // should be more robust\n\t\toffset=vec2(0.3,y);\n\t\tfloat d=DE(p);\n\t\tvec2 e=vec2(d,0.0);\n\t\tvec2 N=normalize(vec2(DE(p-e)-DE(p+e),DE(p-e.yx)-DE(p+e.yx)))*d;\n\t\tif(N==N)p+=N;\n\t\tdp=min(dp,length(p-uv)-0.01);\n\t\t\n\t\tpsave=p;\n\t\t\n\t\ttym=iTime*1.3;//switch the the 2nd distance estimate and do the same\n\t\toffset=vec2(-0.35,-0.35);\n\t\td=DE(p);\n\t\te=vec2(d,0.0);\n\t\tN=normalize(vec2(DE(p-e)-DE(p+e),DE(p-e.yx)-DE(p+e.yx)))*d;\n\t\tif(N==N)p+=N;\n\t\tdp2=min(dp2,length(p-uv)-0.01);\n\t}\n\t\n\t\n\tvec3 col=vec3(smoothstep(0.0,0.01,d1));\n\tcol=mix(vec3(0.0,1.0,0.0),col,smoothstep(0.0,0.01,dp));\n\tcol=mix(vec3(0.0,0.0,1.0),col,smoothstep(0.0,0.01,dp2));\n\tcol=mix(vec3(1.0,0.0,0.0),col,smoothstep(0.0,0.01,length(p-uv)+length(p-psave)-0.03));\n\tfragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}