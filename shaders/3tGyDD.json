{
    "Shader": {
        "info": {
            "date": "1610989381",
            "description": "Experimenting with indexes of rotate tile patterns. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tGyDD",
            "likes": 0,
            "name": "Spinning_Tiles",
            "published": 3,
            "tags": [
                "color",
                "rotate",
                "atan",
                "pattern",
                "spin",
                "fract",
                "abs",
                "tiles",
                "fragcoord",
                "resolution"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// Inspired by the Book of Shaders on Patterns and rotateTilePattern() functions\n// Originated from the code of @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n#define PI 3.14159265358979323846\n\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += smoothstep(0.0,1.0,abs(sin(iTime)));\n    return _st;\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st, float scale){\n\n    //  Scale the coordinate system by 2x2\n    _st *= scale;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,scale));\n    index += step(1., mod(_st.y,scale))*2.;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index == 1.0){\n        //  Rotate cell 1 by 90 degrees\n        _st = rotate2D(_st,PI*0.5);\n    } else if(index == 2.0){\n        //  Rotate cell 2 by -90 degrees\n        _st = rotate2D(_st,PI*-0.5);\n    } else if(index == 3.0){\n        //  Rotate cell 3 by 180 degrees\n        _st = rotate2D(_st,PI);\n    }\n\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.xy;\n\n    st = tile(st,2.);\n    st = rotateTilePattern(st,4.);\n\n    // Make more interesting combinations\n    st = rotate2D(st,-PI*iTime*1.5);\n    // st = rotateTilePattern(st*0.5,1.0);\n    st = rotate2D(st,PI*iTime*0.202);\n\n    // step(st.x,st.y) just makes a b&w triangles\n    // but you can use whatever design you want.\n    fragColor = vec4(vec3(atan(st.x,st.y),st.x*0.2,st.y),1.0);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}