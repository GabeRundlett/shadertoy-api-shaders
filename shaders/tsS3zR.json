{
    "Shader": {
        "info": {
            "date": "1547926253",
            "description": "Mostly an art project.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsS3zR",
            "likes": 3,
            "name": "Beneath the Surface",
            "published": 3,
            "tags": [
                "sdf",
                "fish",
                "shoal"
            ],
            "usePreview": 0,
            "username": "texel",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "float opUnion(float d1, float d2) { return min(d1, d2); }\nfloat opIntersection(float d1, float d2) { return max(d1, d2); }\nfloat opSubtraction(float d1, float d2) { return max(d1, -d2); }\nfloat opOnion(float d, float thikness) { return abs(d) - thikness; }\n\nmat2 rotMat(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    \n    return mat2(c, s, -s, c);\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdFish(vec2 p, float r)\n{\n    float upperCircle = sdCircle(p - vec2(0, 0.6) * r, r);\n    float lowerCircle = sdCircle(p - vec2(0, -0.6) * r, r);\n    \n    float upperTail = sdCircle(p - vec2(1.4, 0.5) * r, r);\n    float lowerTail = sdCircle(p - vec2(1.4, -0.5) * r, r);\n    \n    float body = opIntersection(upperCircle, lowerCircle);\n    float tail = opSubtraction(opIntersection(upperTail, lowerTail), sdCircle(p - vec2(2, 0) * r, r));\n    float eye = sdCircle(p - vec2(-0.4, 0.1) * r, 0.07 * r);\n    return opSubtraction(opUnion(body, tail), eye);\n}\n\nfloat sdMovingFish(vec2 p, float r, float t, float speed, float period)\n{\n    float x = mod(p.x + 0.5 + speed * t, period) - 0.5;\n    return sdFish(vec2(x, p.y), r);\n}\n\nfloat sdRect(vec2 p, vec2 r)\n{\n    vec2 d = abs(p) - r;\n    return length(max(d, 0.0))\n        + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdTriangle(vec2 p, vec2 p0, vec2 p1, vec2 p2)\n{\n    vec2 v0 = p1 - p0;\n    vec2 v1 = p2 - p1;\n    vec2 v2 = p0 - p2;\n    \n    vec3 sd = vec3(\n        dot(p - p0, normalize(vec2(-v0.y, v0.x))),\n        dot(p - p1, normalize(vec2(-v1.y, v1.x))),\n        dot(p - p2, normalize(vec2(-v2.y, v2.x)))\n    );\n\n    return max(sd[0], max(sd[1], sd[2]));\n}\n\nfloat sdBoat(vec2 p, float s)\n{\n    vec2[] points = vec2[](\n        vec2(+1.5, 0.0) * s,\n        vec2(-1.5, 0.0) * s,\n        vec2(-2.0, 1.0) * s,\n        vec2(+2.0, 1.0) * s,\n        vec2(0) // to make the array cyclic\n    );\n    points[points.length() - 1] = points[0];\n    int pointCount = points.length() - 1;\n    \n    mat2 normalMat = mat2(0.0, 1.0, -1.0, 0.0);\n    \n    float maxSd = -99999.0;\n    \n    for (int i = 0; i < pointCount; i++)\n    {\n        vec2 p0 = points[i];\n        vec2 p1 = points[i + 1];\n        vec2 normal = normalize(normalMat * (p1 - p0));\n        float sd = dot(p - p0, normal);\n        maxSd = max(maxSd, sd);\n    }\n    \n    return maxSd;\n}\n\nfloat sdSail(vec2 p, float s)\n{\n    return sdTriangle(\n        p,\n        vec2(vec2(-1.0, 1.0) * s),\n        vec2(vec2(+0.0, 2.0) * s),\n        vec2(vec2(+1.0, 1.0) * s)\n    );\n}\n\nfloat sdFisher(vec2 p)\n{\n    float body = sdRect(p, vec2(0.015, 0.05)) - 0.008;\n    float head = sdCircle(p - vec2(0, 0.09), 0.03);\n    float rod = sdRect((p - vec2(0.05, 0.03)) * rotMat(-1.0), vec2(0.004, 0.1));\n    float line = sdRect(p - vec2(0.13, -0.17), vec2(0.002, 0.25));\n    \n    return opUnion(opUnion(body, head), opUnion(rod, line));\n}\n\nfloat sdHook(vec2 p, float s)\n{\n    float base = opUnion(sdCircle(p, s * 0.7), sdRect(p - vec2(0, -1.5) * s, vec2(0.3, 1.0) * s));\n    float hookCircle = opOnion(sdCircle(p - vec2(0, -3.3) * s, s), 0.2 * s);\n    float mask = sdRect(p - vec2(-1.2, -3) * s, vec2(1, 1.0) * s);\n    float hook = opSubtraction(hookCircle, mask);\n    return opUnion(base, hook);\n}\n\nvec2 flipX(vec2 v) { return vec2(-v.x, v.y); }\n\nfloat waterLevel(float xn, float t)\n{\n    return 0.7 + sin(iTime * 2.0 + xn * 2.3) * 0.03;\n}\n\nfloat waterGradient(float xn, float t)\n{\n    return 2.0 * cos(iTime * 2.0 + xn * 2.3) * 0.03;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel coordinates normalized by the screen height\n    vec2 uvn = fragCoord/iResolution.y;\n    // The screen width normalized by screen height;\n    float nWidth = iResolution.x / iResolution.y;\n    \n    float water = waterLevel(uvn.x, iTime);\n    \n    vec3 col = vec3(0.79);\n    if (uvn.y < water)\n    {\n        //col = vec3(0.193, 0.434, 0.8) * uv.y / waterLevel;\n        col = vec3(0, 0.58, 0.58) * uvn.y / water;\n    }\n    \n    float[] fish = float[](\n        sdMovingFish(uvn - vec2(nWidth * 0.0, 0.12), \t\t0.2, iTime, 0.1, 3.0),\n        sdMovingFish(flipX(uvn - vec2(nWidth * 0.9, 0.2)), \t0.12, iTime, 0.1, 2.0),\n        sdMovingFish(uvn - vec2(nWidth * 0.3, 0.33), \t\t0.1, iTime, 0.3, 6.0),\n        sdMovingFish(flipX(uvn - vec2(nWidth * 0.9, 0.4)), \t0.09, iTime, 0.12, 4.0),\n        sdMovingFish(uvn - vec2(nWidth * 0.6, 0.47), \t\t0.08, iTime, 0.16, 2.3),\n        sdMovingFish(flipX(uvn - vec2(nWidth * 0.7, 0.55)), 0.07, iTime, 0.15, 2.0),\n        sdMovingFish(uvn - vec2(nWidth * 0.2, 0.46), \t\t0.06, iTime, 0.13, 2.0),\n        sdMovingFish(uvn - vec2(nWidth * 0.1, 0.35), \t\t0.05, iTime, 0.17, 2.5),\n        sdMovingFish(flipX(uvn - vec2(nWidth * 0.2, 0.43)), 0.04, iTime, 0.1, 2.7),\n        sdMovingFish(flipX(uvn - vec2(nWidth * 0.7, 0.34)), 0.1, iTime, 0.08, 2.2),\n        sdMovingFish(uvn - vec2(nWidth * 0.3, 0.23), \t\t0.1, iTime, 0.07, 2.3)\n        );\n    \n    for (int i = 0; i < fish.length(); i++)\n    {\n        if (fish[i] < 0.0)\n        {\n            col = vec3(0);\n        }\n    }\n    \n    ///// Boat /////\n    \n    float boatX = nWidth / 2.0;\n    float boatY = waterLevel(boatX, iTime) - 0.03;\n    vec2 boatPos = vec2(boatX, boatY);\n    mat2 boatRot = rotMat(waterGradient(boatX, iTime));\n    \n    vec2 fisherPos = (boatRot * vec2(0.10, 0.10)) + boatPos;\n    fisherPos = round(fisherPos * iResolution.y) / iResolution.y; // Round to nearest pixel\n    \n    if (sdSail((uvn - boatPos) * boatRot, 0.1) < 0.0)\n    {\n        col = vec3(0.93);\n    }\n    \n    if (sdFisher(uvn - fisherPos) < 0.0)\n    {\n        col = vec3(0);\n    }\n    \n    if (sdHook(uvn - fisherPos - vec2(0.13, -0.42), 0.01) < 0.0)\n    {\n        col = vec3(0.5);\n    }\n    \n    if (sdBoat((uvn - boatPos) * boatRot, 0.1) < 0.0)\n    {\n        col = vec3(0.99);\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}