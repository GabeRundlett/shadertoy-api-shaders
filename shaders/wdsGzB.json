{
    "Shader": {
        "info": {
            "date": "1546784449",
            "description": "Lace Planes",
            "flags": 0,
            "hasliked": 0,
            "id": "wdsGzB",
            "likes": 10,
            "name": "Lace  Planes",
            "published": 3,
            "tags": [
                "lace",
                "planes"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 532
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec3 path(vec3 p)\n{\n\tp *= RotZ(p.z * 0.1);\n    p += sin(p.zxy * 0.4) * 0.5;\n\tp *= RotZ(p.z * 0.2);\n   \treturn sin(p.zxy * 0.2) * 2.;\n}\n\nfloat pn( in vec3 x ) // iq noise\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture(iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nconst mat3 mx = mat3(1,0,0,0,7,0,0,0,7);\nconst mat3 my = mat3(7,0,0,0,1,0,0,0,7);\nconst mat3 mz = mat3(7,0,0,0,7,0,0,0,1);\n\n// base on shane tech in shader : One Tweet Cellular Pattern\nfloat func(vec3 p)\n{\n    p = fract(p/50.0) - .5;\n    return min(min(abs(p.x), abs(p.y)), abs(p.z)) + 0.1;\n}\n\nvec3 effect(vec3 p)\n{\n\tp *= mz * mx * my * sin(p.zxy); // sin(p.zxy) is based on iq tech from shader (Sculpture III)\n\treturn vec3(min(min(func(p*mx), func(p*my)), func(p*mz))/.6);\n}\n\nvec4 displacement(vec3 p)\n{\n    vec3 col = 1.-effect(p*0.8);\n   \tcol = clamp(col, -.5, 1.);\n    float dist = dot(col,vec3(0.023));\n\tcol = step(col, vec3(0.82));// black line on shape\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n\tp += path(p);\n\tp *= RotZ(p.z * 0.1);\n\tvec4 disp = displacement(sin(p.zxy*3.)*.75);\n\tp.y = mod(p.y, 1.5)-.75;\n    float l = abs(p.y)-0.1;\n    return vec4(max(-l + 0.085, l) - disp.x, disp.yzw);\n}\n\nvec3 nor( in vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec4 light(vec3 ro, vec3 rd, float d, vec3 lightpos)\n{\n\tvec3 p = ro + rd * d;\n\t\n\tvec3 n = nor(p, 0.1);\n\t\n\tvec3 lightdir = vec3(-1.);\n\tfloat lightlen = length(lightpos - p);\n\tlightdir /= lightlen;\n    \n\tfloat amb = 0.6;\n\tfloat diff = clamp( dot( n, lightdir ), 0.0, 1.0 );\n\tfloat spe = pow(clamp( dot(reflect(rd,n), lightdir),0.,1.),5.);\n    \n\tvec3 brdf = vec3(0);\n\tbrdf += amb * vec3(0.8,0.2,0.4); // color mat\n\tbrdf += diff * 1.;\n\tbrdf += spe * 1.;\n\t\n\tbrdf = mix(brdf, map(p).yzw, 0.25);\n\t\t\n\treturn vec4(brdf, lightlen);\n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n    \n\tvec3 ro = vec3(0,0, iTime * 3.); ro -= path(ro);\n\tvec3 cv = ro + vec3(0,0,4); cv -= path(cv);\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n  \tvec3 rd = normalize(uv.x * x + uv.y * y + z);\n\n    float ao = 0.; // ao low cost :)\n    \n    const int iter = 200;\n    float st = 0.;\n    float d = 0.;\n    for(int i=0;i<iter;i++)\n    {            \n        st = map(ro+rd*d).x;\n        d += st * 0.5;\n        ao++;\n        if (st<0.025*log(d*d/st/1e4)) break;\n    }\n\t\n    vec4 li = light(ro, rd, d, ro + vec3(0,0,1));\n    vec3 col = li.xyz/(li.w);\n   \t  \n    col = mix(vec3(1.-ao/float(iter)), col, 0.25);// low cost ao :)\n    fragColor.rgb = mix( col, vec3(0), 1.0-exp( -0.01*d*d ) );\n           \n    vec2 q = fragCoord/si;\n\tfragColor.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}