{
    "Shader": {
        "info": {
            "date": "1645921210",
            "description": "it was a sphere now idk what it is",
            "flags": 0,
            "hasliked": 0,
            "id": "7djBzm",
            "likes": 5,
            "name": "weird sphere",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST 0.0001\n\n#define pi 3.14159\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat mlength(vec2 p) {\n    return max(abs(p.x), abs(p.y));\n}\n\nfloat mlength(vec3 p) {\n    return max(abs(p.x), max(abs(p.y), abs(p.z)));\n}\n\nvec3 distort(vec3 p) {\n    float o = 2.* pi / 3.;\n    float t = 1.5 * length(p) - 0.2 * iTime;\n   // p = abs(p) - 0.5;\n    p.xy *= Rot(t - o);\n    p.yz *= Rot(t);\n    p.zx *= Rot(t + o);\n    return p;//fract(0.8 * p) - 0.5;\n}\n\nfloat thc(float a, float b) {\n    return tanh(a*cos(b))/tanh(a);\n}\n\nfloat GetDist(vec3 p) {\n   vec3 op = p;\n    float cd = length(p);\n   \n   // p = distort(p); \n    float mx = 0.5 + 0.5 * cos(iTime);\n    float m1 = mix(abs(p.y), length(p.xz), mx);\n    float m2 = mix(length(p.xz), p.y, mx);\n   \n    float k = 0.;\n      \n    vec3 t1 = p;\n    t1.xy *= Rot(iTime);\n    \n    float a = atan(t1.x, t1.y);\n    //t1.zy *= Rot(iTime);\n    float d0 = length(t1.xz) - 2.;//  + 0.5 * cos(iTime);\n    \n    vec2 u = vec2(d0, t1.y);\n   // u *= Rot(a + iTime);\n   // u = abs(u) - 0.5;\n    \n    float d1 = 0.5 * length(u) + SURF_DIST;\n    \n    p.xz *= Rot(-0.3 * iTime);\n    p = distort(p);\n    p = fract(8. * p) - 0.5;\n    float e = 0.05;\n    float sd = e * mlength(p) - 0.5 * e * length(p) + SURF_DIST;\n\n    float d = d1;\n    d = sd;//min(sd, d);\n    \n    float m = 1.5 + 0.25 * cos(length(op.xz) * 5. - iTime);\n    d = max(d, abs(abs(m-cd) - 0.3) - 0.12);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    float t = 0.125 * iTime, o = 2. * pi / 3.;\n    vec3 ro = 3.6 * vec3(cos(t - o), cos(t), cos(t + o));\n   //ro *= (2.5 - 1.1 * cos(0.5 * iTime));\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 0.95);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        //p = distort(p);\n\n        float v = smoothstep(0., 1., exp(-0.5 * length(p)));\n        v *= v;\n      \n        // color + lighten\n        vec3 e = vec3(1);\n        col = v * pal(0.5 * v + 0.36, e, e, e, 0.8 * vec3(0,1,2)/3.);    \n        col += 0.1;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}