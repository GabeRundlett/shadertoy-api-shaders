{
    "Shader": {
        "info": {
            "date": "1593161447",
            "description": "Study deterministic chaos in a simple system - see source",
            "flags": 32,
            "hasliked": 0,
            "id": "tllyW2",
            "likes": 10,
            "name": "Lorenz Explorer",
            "published": 3,
            "tags": [
                "fractal",
                "chaos",
                "butterfly",
                "tajectory"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 431
        },
        "renderpass": [
            {
                "code": "// \"Lorenz Explorer\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n A study of the Lorenz system, namely the three coupled first-order differential equations\n\n    dx/dt = s y - s x\n    dy/dt = r x - y - x z\n    dz/dt = x y - b z\n\n where s = 10, b = 8/3, and r is a variable set by the user.\n \n The most recent portion of the orbit u(t) = vec3 (x(t), y(t), z(t)) is shown in 3D.\n The display is approximately centered on the orbit midpoint.\n \n Depending on r the system exhibits periodic or chaotic behavior, as well as\n convergence to a fixed point. The characteristic butterfly shape of the Lorenz\n attractor is well known. Color changes gradually with time.\n\n The three sliders are used for coarse/medium/fine setting of r (to 6 digit precision);\n the value shown is 1000 x r. Changing r restarts the calculation. Mouse rotates axes.\n*/\n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nvec4 Loadv4 (int idVar);\n\nconst int nbTrail = 1200;  // same for image and buffer (the bigger the better)\n\nvec3 ltDir, vnObj, uAv;\nfloat dstFar, nStep, vuScl;\nint idBall;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat BallHit (vec3 ro, vec3 rd, float rad)\n{\n  vec3 u, p, pp;\n  float b, d, w, dMin;\n  bool skip;\n  dMin = dstFar;\n  for (int n = VAR_ZERO; n < nbTrail; n ++) {\n    p = vuScl * (Loadv4 (4 + n).xyz - uAv).xzy;\n    skip = false;\n    if (n == 0) pp = p;\n    else {\n      if (length (pp - p) < 0.5 * rad) skip = true;\n      else pp = p;\n    }\n    if (! skip) {\n      u = ro - p;\n      b = dot (rd, u);\n      w = b * b - dot (u, u) + rad * rad;\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0. && d < dMin) {\n          dMin = d;\n          vnObj = (u + d * rd) / rad;\n          idBall = n;\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  vec3 s;\n  float dMin, d, a, b, w;\n  dMin = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - rad * rad);\n  if (w > 0. && a > 0.) {\n    d = - b - sqrt (w);\n    d /= a;\n    s = ro + d * rd;\n    if (d > 0. && abs (s.z) < len) {\n      dMin = d;\n      vnObj = normalize (vec3 (s.xy, 0.));\n    } else {\n      ro.z -= len * sign (s.z);\n      b = dot (rd, ro);\n      w = b * b - (dot (ro, ro) - rad * rad);\n      if (w > 0.) {\n        d = - b - sqrt (w);\n        if (d > 0.) {\n          dMin = d;\n          vnObj = normalize (ro + d * rd);\n        }\n      }\n    }\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, vnb, vnc, col, roa, rda;\n  float dstBall, dstAx, d, h;\n  dstBall = BallHit (ro, rd, 0.03);\n  vnb = vnObj;\n  dstAx = dstFar;\n  for (int j = 0; j < 3; j ++) {\n    roa = ro + vuScl * uAv.xzy;\n    rda = rd;\n    if (j == 1) {\n      roa.xz = Rot2D (roa.xz, 0.5 * pi);\n      rda.xz = Rot2D (rda.xz, 0.5 * pi);\n    } else if (j == 2) {\n      roa.yz = Rot2D (roa.yz, 0.5 * pi);\n      rda.yz = Rot2D (rda.yz, 0.5 * pi);\n    }\n    roa.z -= 1.;\n    d = CapsHit (roa, rda, 0.02, 1.);\n    if (d < dstAx) {\n      dstAx = d;\n      vnc = vnObj;\n      if (j == 1) vnc.xz = Rot2D (vnc.xz, -0.5 * pi);\n      else if (j == 2) vnc.yz = Rot2D (vnc.yz, -0.5 * pi);\n    }\n  }\n  if (min (dstBall, dstAx) < dstFar) {\n    if (dstBall < dstAx) {\n      ro += rd * dstBall;\n      vn = vnb;\n      col = HsvToRgb (vec3 (mod (0.5 * (float (idBall) + 0.1 * nStep) / float (nbTrail), 1.), 1., 1.));\n    } else {\n      ro += rd * dstAx;\n      vn = vnc;\n      col = vec3 (0.7, 0.7, 1.);\n    }\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = vec3 (0.1);\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, vec3 wgVal)\n{\n  vec4 wgBx[3];\n  vec2 ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  for (int k = 0; k < 3; k ++) {\n    wgBx[k] = vec4 ((-0.46 + 0.06 * float (k)) * asp, 0., 0.012 * asp, 0.2);\n    ust = abs (0.5 * uv - wgBx[k].xy) - wgBx[k].zw;\n    if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0., 1., 0.);\n    ust = 0.5 * uv - wgBx[k].xy;\n    ust.y -= (wgVal[k] - 0.5) * 2. * wgBx[k].w;\n    ust = abs (ust) - vec2 (0.8, 0.7) * wgBx[k].z;\n    if (max (ust.x, ust.y) < 0.) col = vec3 (0.8, 0.8, 0.4);\n  }\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, col, wgVal;\n  vec2 canvas, uv;\n  float tCur, az, el, asp, rVar, v;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  dstFar = 500.;\n  stDat = Loadv4 (0);\n  wgVal = stDat.xyz;\n  stDat = Loadv4 (2);\n  el = stDat.x;\n  az = stDat.y;\n  nStep = stDat.z;\n  stDat = Loadv4 (3);\n  uAv = stDat.xyz;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1., -15.);\n  ltDir = vuMat * normalize (vec3 (0., 0.3, -1.));\n  rd = normalize (vec3 (uv, 4.));\n  rd = vuMat * rd;\n  rVar = 100. * dot (wgVal, vec3 (10., 0.1, 0.001));\n  vuScl = 0.02 + 0.08 * (1. - smoothstep (10., 150., rVar));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, wgVal);\n  v = 10. * floor (100. * wgVal.x) + floor (floor (100. * wgVal.y) / 10.);\n  col = mix (col, vec3 (0., 1., 0.), ShowInt (0.5 * uv - vec2 (-0.4 * asp, -0.35),\n       vec2 (0.07 * asp, 0.04), 3., v));\n  v = 100. * mod (floor (100. * wgVal.y), 10.) + floor (100. * wgVal.z);\n  col = mix (col, vec3 (0., 1., 0.), ShowIntPZ (0.5 * uv - vec2 (-0.32 * asp, -0.35),\n       vec2 (0.07 * asp, 0.04), 3., v));\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    val = max (val, 0.);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Lorenz Explorer\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nbTrail = 1200;  // same for image and buffer\n\nvec3 u;\nfloat delT, rVar, sVar, bVar;\nconst float pi = 3.14159;\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec3 EvalRhs (vec3 u)\n{\n  return vec3 (sVar * (u.y - u.x), (rVar - u.z) * u.x - u.y, u.x * u.y - bVar * u.z);\n}\n\nvec3 RKStep (vec3 u)\n{\n  vec3 k0, k1, k2, k3;\n  k0 = EvalRhs (u);\n  k1 = EvalRhs (u + (delT / 2.) * k0);\n  k2 = EvalRhs (u + (delT / 2.) * k1);\n  k3 = EvalRhs (u + delT * k2);\n  u += (delT / 6.) * (k0 + k3 + 2. * (k1 + k2));\n  return u;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], mPtr, mPtrP, stDat, slVal, s;\n  vec3 uAv, wgVal, u0;\n  vec2 canvas, ust;\n  vec2 iFrag;\n  float asp, vW, parmL, el, az, nStep, gap;\n  int pxId, wgSel, wgReg, kSel;\n  bool doInit;\n  canvas = iResolution.xy;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId > 4 + nbTrail) discard;\n  sVar = 10.;\n  bVar = 8. / 3.;\n  delT = 0.0002;\n  doInit = false;\n  wgReg = -2;\n  if (iFrame <= 5) {\n    rVar = 40.;\n    wgVal = mod (floor (vec3 (rVar / 10., 10. * rVar, 1000. * rVar)), 100.) / 100.;\n    mPtrP = mPtr;\n    el = -0.2 * pi;\n    az = -0.2 * pi;\n    wgSel = -1;\n    doInit = true;\n  } else {\n    stDat = Loadv4 (0);\n    wgVal = stDat.xyz;\n    rVar = 100. * dot (wgVal, vec3 (10., 0.1, 0.001));\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (2);\n    el = stDat.x;\n    az = stDat.y;\n    nStep = stDat.z;\n    stDat = Loadv4 (3);\n    uAv = stDat.xyz;\n    stDat = Loadv4 (4);\n    u = stDat.xyz;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 3; k ++) {\n      wgBx[k] = vec4 ((-0.46 + 0.06 * float (k)) * asp, 0., 0.012 * asp, 0.2);\n      ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[k].xy) - wgBx[k].zw;\n      if (max (ust.x, ust.y) < 0.) wgReg = k;\n    }\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      el = -0.2 * pi + 1.5 * pi * mPtr.y;\n      az = -0.2 * pi + 3. * pi * mPtr.x;\n    }\n  } else {\n    for (int k = 0; k < 3; k ++) {\n      if (wgSel == k) {\n        wgVal[k] = clamp (0.5 + 0.5 * (mPtr.y - wgBx[k].y) / wgBx[k].w, 0., 0.99);\n        break;\n      }\n    }\n    doInit = true;\n  }\n  if (pxId == 2) {\n    if (doInit) nStep = 0.;\n    else ++ nStep;\n  } else if (pxId == 3) {\n    if (nStep < 2000.) {\n      uAv = vec3 (0.);\n      for (int j = 0; j < nbTrail - 10; j ++) uAv += Loadv4 (4 + j).xyz;\n      uAv /= float (nbTrail - 10);\n    }\n  } else if (pxId == 4) {\n    if (doInit) {\n      u = vec3 (0.1);\n    } else {\n      u0 = u;\n      gap = (rVar > 50.) ? 4. : 2.;\n      for (int j = VAR_ZERO; j < 200; j ++) {\n        u = RKStep (u);\n        if (length (u - u0) > gap) break;\n      }\n    }\n  } else if (pxId > 4 && pxId <= 4 + nbTrail) {\n    u = doInit ? vec3 (0.1) : Loadv4 (pxId - 1).xyz;\n  }\n  if      (pxId == 0) stDat = vec4 (wgVal, 0.);\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 2) stDat = vec4 (el, az, nStep, 0.);\n  else if (pxId == 3) stDat = vec4 (uAv, 0.);\n  else if (pxId >= 4) stDat = vec4 (u, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}