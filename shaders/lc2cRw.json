{
    "Shader": {
        "info": {
            "date": "1722591136",
            "description": "this is a color gradient demo",
            "flags": 0,
            "hasliked": 0,
            "id": "lc2cRw",
            "likes": 1,
            "name": "chamfered rectangle",
            "published": 3,
            "tags": [
                "rectangle",
                "colorgradient"
            ],
            "usePreview": 0,
            "username": "nomkcode",
            "viewed": 129
        },
        "renderpass": [
            {
                "code": "vec3 chamferedRectangle(vec2 uv, float w, float h, float r, vec3 innerColor, vec3 outerColor, float offset) \n{\n    vec3 col = vec3(1.0);\n    float bias = 0.002;\n    \n    float len1 = length(uv - vec2(w * 0.5-r, h * 0.5 -r));\n    float len2 = length(uv - vec2(w * 0.5-r, -h * 0.5+r));\n    float len3 = length(uv - vec2(-w * 0.5+r, h * 0.5-r));\n    float len4 = length(uv - vec2(-w * 0.5+r, -h * 0.5+r));\n\n    float alpha1 = (1.0 - smoothstep(r, r + bias, len1));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len2));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len3));\n    alpha1 += (1.0 - smoothstep(r, r + bias, len4));\n    alpha1 *= step(0.5 * w-r, uv.x) + 1.0 - step(-0.5*w+r, uv.x);\n    alpha1 *= step(0.5 * h-r, uv.y) + 1.0 - step(-0.5*h+r, uv.y);\n    \n    float alpha2 = (1.0 - smoothstep(w*0.5 - r, w*0.5-r, abs(uv.x))) * (1.0 - smoothstep(h * 0.5, h *0.5+bias, abs(uv.y)));\n    alpha2 += (1.0 - smoothstep(w * 0.5, w * 0.5 + bias, abs(uv.x))) * (1.0 - smoothstep(h*0.5-r, h*0.5-r, abs(uv.y)));\n    alpha2 = clamp(alpha2, 0.0, 1.0);\n    \n    float alpha12 = clamp(alpha1 + alpha2, 0.0, 1.0);\n    col = alpha12 * innerColor + (1.0 - alpha12) * outerColor;\n    \n    // 中间不显示\n    float r2 = r - offset;\n    float alpha3 = 0.0;\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len1));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len2));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len3));\n    alpha3 += (1.0 - smoothstep(r2, r2 + bias, len4));\n    alpha3 *= step(0.5 * w-r, uv.x) + 1.0 - step(-0.5*w+r, uv.x);\n    alpha3 *= step(0.5 * h-r, uv.y) + 1.0 - step(-0.5*h+r, uv.y);\n    \n    alpha3 += (1.0 - smoothstep(w*0.5-r, w*0.5-r, abs(uv.x))) * (1.0 - smoothstep(h*0.5-offset, h*0.5-offset + bias, abs(uv.y)));\n    alpha3 += (1.0 - smoothstep(w*0.5-offset, w*0.5-offset+bias, abs(uv.x))) * (1.0 - smoothstep(h*0.5-r, h*0.5-r, abs(uv.y)));\n    \n    alpha3 = clamp(alpha3, 0.0, 1.0);\n    col = alpha3 * outerColor + (1.0 - alpha3) * col;\n   \n    return col;\n}\n\nfloat sdRoundBox( in vec2 p, in vec2 b, float r )\n{\n    vec2  w = abs(p)-b;\n    float g = max(w.x,w.y);\n    return ((g>0.0)?length(max(w,0.0)):g) - r;\n}\n \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv - vec2(0.5, 0.5);\n    float scale = iResolution.y / iResolution.x;\n    uv.y *= scale;\n    \n    vec3 color1 = vec3(125.0, 122.0 , 252.0) / 255.0;\n    vec3 color2 = vec3(90.0, 197.0, 255.0) / 255.0;\n    vec3 color3 = vec3(255.0, 209.0, 99.0) / 255.0;\n    vec3 color4 = vec3(255.0, 178.0, 107.0) / 255.0;\n    vec3 color5 = vec3(90.0, 197.0, 255.0) / 255.0;\n    vec3 color6 = vec3(99.0, 171.0, 255.0) / 255.0;\n    \n    \n    float rotate = fract(0.1 * iTime) * 360.0;\n    float angle = mod(degrees(atan(uv.y, uv.x)) + rotate + 0.03*360.0 - 120.0, 360.0);\n    \n    vec3 col = vec3(1.0);\n    \n    vec3 color = vec3(0.0);\n    float alpha1 = smoothstep(0.0, 0.42*360.0, angle);\n    color += (1.0 - alpha1) * step(0.0, angle) * color1 + alpha1 * (1.0 - step(0.42*360.0, angle)) * color2;\n\n    float alpha2 = smoothstep(0.42*360.0, 0.47*360.0, angle);\n    color += (1.0 - alpha2) * step(0.42*360.0, angle) * color2 + alpha2 * (1.0 - step(0.47*360.0, angle)) * color3;\n    \n    float alpha3 = smoothstep(0.47*360.0, 0.57*360.0, angle);\n    color += (1.0 - alpha3) * step(0.47*360.0, angle) * color3 + alpha3 * (1.0 - step(0.57*360.0, angle)) * color4;\n    \n    float alpha4 = smoothstep(0.57*360.0, 0.77*360.0, angle);\n    color += (1.0 - alpha4) * step(0.57*360.0, angle) * color4 + alpha4 * (1.0 - step(0.77*360.0, angle)) * color5;\n    \n    float alpha5 = smoothstep(0.77*360.0, 0.92*360.0, angle);\n    color += (1.0 - alpha5) * step(0.77*360.0, angle) * color5 + alpha5 * (1.0 - step(0.92*360.0, angle)) * color6;\n    \n    float alpha6 = smoothstep(0.92*360.0, 360.0, angle);\n    color += (1.0 - alpha6) * step(0.92*360.0, angle) * color6 + alpha6 * (1.0 - step(360.0, angle)) * color1;\n    \n    \n    //color = chamferedRectangle(uv, 1.0, 0.1, 0.03, color, col, 0.005);\n    \n    float r = 0.03;\n    vec2 size = vec2(1.0, 0.1);\n    float d = 0.006;\n    // 除开圆弧后中间长度（比例）中间宽度（比例）,半径r\n    float len = sdRoundBox(uv, 0.5 * size - r, r);\n    float circleAlpha = smoothstep(-d-0.001, -d+0.001, len)*(1.0 - smoothstep(-0.001, 0.001, len));\n    color = color * circleAlpha + col * (1.0 - circleAlpha);\n\n   \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}