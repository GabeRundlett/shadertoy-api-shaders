{
    "Shader": {
        "info": {
            "date": "1453468139",
            "description": "Basic FPS style WASD controls. I figure I'm going to want this for a lot of my shaders, and I thought other folks would too. Apologies for the ugly scene, that wasn't really the focus. :)\nPress F to fly, Space to jump (when not flying).",
            "flags": 48,
            "hasliked": 0,
            "id": "ldyGzW",
            "likes": 35,
            "name": "WASD movement",
            "published": 3,
            "tags": [
                "cameracontrol"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 2777
        },
        "renderpass": [
            {
                "code": "// Hazel Quantock 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 pattern( in vec3 p )\n{\n    vec4 o;\n    o.a = 1.0;\n    o.rgb = textureLod( iChannel2, (p.xz + p.xy)/11.0, 0.0 ).rgb;\n    o *= textureLod( iChannel1, (p.xz + p.xy)/7.0, 0.0 ).r;\n\treturn o;\n}\n\nfloat scene( in vec3 p )\n{\n    // simple scene\n    \n    float f = p.y - (-2.0);\n    \n    f = min( f, length(fract(p.xz/20.0+.4)-.5)*20.0-.8 );\n    f = min( f, length(fract(p.xz/31.0)-.5)*30.0-1.8 );\n    f = max( f, p.y - 2.0 );\n    \n    f -= .2*pattern(p).a;\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // read camera position & orientation\n    \n    vec4 camPos = textureLod( iChannel0, vec2(.5,.5)/iResolution.xy, 0.0 );\n    vec4 camRot = textureLod( iChannel0, vec2(1.5,.5)/iResolution.xy, 0.0 )*6.28318530718;\n\n    // cast a ray from the camera\n    \n    vec3 ray = normalize( vec3( (fragCoord.xy-iResolution.xy*.5)/iResolution.x, 1.0 ) );\n    \n    ray.zy = ray.zy*cos(camRot.x) + sin(camRot.x)*vec2(1,-1)*ray.yz;\n    ray.xz = ray.xz*cos(camRot.y) + sin(camRot.y)*vec2(1,-1)*ray.zx;\n\n    vec3 p = camPos.xyz;\n    \n    float h = 1.0;\n    for ( int i=0; i < 100; i++ )\n    {\n        if ( h < .001 )\n            break;\n        h = scene(p);\n        p += ray*h;\n    }\n    \n    \n    // sample scene colour\n\n    vec3 col;\n\tif ( h < .001 )\n    {\n        col = pattern(p).rgb;\n        \n        // vague lighting trick\n        float light = max( .0, scene(p + normalize(vec3(3,2,1))*.1) )/.1;\n        light = min( light, max (.0, scene(p + normalize(vec3(3,2,1))*2.) )/2. ); // vague shadows\n\t\tcol *= light*.9+.1;\n    }\n    else\n    {\n       \tcol =( ray.y < .0 ) ?  vec3(.1) : vec3(.3,.5,.9);\n        \n        p += ray*(p.y+2.0)/max(-ray.y,.01);\n    }\n    \n    col = mix( vec3(.3,.5,.9), col, exp2(-length(p-camPos.xyz)/1000.0) );\n\n    fragColor = vec4(pow(col,vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hazel Quantock 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define INVERT_Y 1\n\nconst float accel = .01;\nconst float decay = .95; // how much velocity is preserved per frame (proportionally)\n\n#if INVERT_Y\nconst float yMul = 1.0;\n#else\nconst float yMul = -1.0;\n#endif\n\n\n// keys are javascript keycode\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n\n    if ( int(fragCoord.y) == 0 )\n    {\n        if ( int(fragCoord.x) == 0 )\n        {\n            vec4 camPos = textureLod( iChannel0, vec2(.5,.5)/iResolution.xy, 0.0 );\n            vec4 camVel = textureLod( iChannel0, vec2(3.5,.5)/iResolution.xy, 0.0 );\n            \n            fragColor = camPos + camVel;\n\n            if ( camPos.y < .0 ) { fragColor.y = .0; }\n\n            // fly\n            fragColor.w = ReadKeyToggle(Key_F);\n        }\n        else if ( int(fragCoord.x) <= 2 )\n        {\n            vec4 baseCamRot = textureLod( iChannel0, vec2(2.5,.5)/iResolution.xy, 0.0 );\n            vec4 camRot = textureLod( iChannel0, vec2(1.5,.5)/iResolution.xy, 0.0 );\n\n            vec2 mouseRot = (iMouse.yx/iResolution.yx-.5)*vec2(.5*yMul,1.);\n            \n            camRot.w = iMouse.z;\n            \n            bool press = (camRot.w > .0);\n            bool lastPress = (baseCamRot.w > .0);\n            bool click = press && !lastPress;\n            if ( click )\n            {\n                baseCamRot.xy -= mouseRot;\n            }\n            \n            if ( press )\n            {\n                camRot.xy = baseCamRot.xy + mouseRot;\n            }\n            else\n            {\n                //update the base pos\n                baseCamRot = camRot;\n            }\n\n            baseCamRot.w = camRot.w;\n            \n            // store\n            if ( int(fragCoord.x) == 1 )\n            {\n            \tfragColor = camRot;\n            }\n            else\n            {\n            \tfragColor = baseCamRot;\n            }\n        }\n        else if ( int(fragCoord.x) == 3 )\n        {\n            vec4 camPos = texture( iChannel0, vec2(.5,.5)/iResolution.xy, -100.0 );\n            vec4 camVel = texture( iChannel0, vec2(3.5,.5)/iResolution.xy, -100.0 );\n            vec4 camRot = texture( iChannel0, vec2(1.5,.5)/iResolution.xy, -100.0 )*6.28318530718;\n            \n            bool fly = (camPos.w > .0);\n            \n            vec3 forward = vec3(0,0,1)*accel;\n            vec3 right = vec3(1,0,0)*accel;\n\n            if ( fly ) // allow flying\n            {\n                forward.zy = forward.zy*cos(camRot.x) + sin(camRot.x)*vec2(1,-1)*forward.yz;\n                right.zy = right.zy*cos(camRot.x) + sin(camRot.x)*vec2(1,-1)*right.yz;\n            }\n                \n            forward.xz = forward.xz*cos(camRot.y) + sin(camRot.y)*vec2(1,-1)*forward.zx;\n\t\t    right.xz = right.xz*cos(camRot.y) + sin(camRot.y)*vec2(1,-1)*right.zx;\n            \n            camVel.xyz += (ReadKey(Key_W)-ReadKey(Key_S)) * forward;\n            camVel.xyz += (ReadKey(Key_D)-ReadKey(Key_A)) * right;\n\n            camVel *= decay; // exponential decay\n            \n            if ( !fly )\n            {\n            \tcamVel.y -= .01;\n            \n            \tif ( camPos.y <= .0 )\n            \t{\n                \tcamVel.y = (ReadKey(Key_Space) != .0) ? .3 : 0.0;\n            \t}\n            }\n            \n            fragColor = camVel;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}