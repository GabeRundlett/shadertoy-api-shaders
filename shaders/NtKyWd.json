{
    "Shader": {
        "info": {
            "date": "1662491889",
            "description": "aa",
            "flags": 32,
            "hasliked": 0,
            "id": "NtKyWd",
            "likes": 28,
            "name": "Day 992",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = U/R.xy;\n    vec2 nuv = (U-0.5*R.xy)/min(R.x,R.y);\n    \n    C -= C;\n    for(float i = 0.; i < 50.; i++){\n        //vec2 p = uv + normalize(nuv)*dot(uv,uv)*i/50.*0.01;\n        //vec3 t = texture(iChannel0,p).xyz;\n        //t = lerpHSV(rgb2hsv(t) - vec3(0.2,0,0),rgb2hsv(t) + vec3(0.2,0,0),i/40.);\n        //C.xyz += hsv2rgb(t)/50.;\n    \n    }\n    float n1d = texelFetch(iChannel2,ivec2(mod(U + vec2(float(iFrame)*0.,0.),256.)),0).x*0.5;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(U + n1d*200. ,256.)),0).xyz*0.6;\n    \n        \n    \n    vec3 t = texture(iChannel0,uv).xyz;\n        \n    C = t.xyzz;\n    \n    \n    //C.xyz += smoothstep(1.,0.,length(C))*0.05;\n    \n    //C.xyz -= smoothstep(0.,1.,length(C))*0.02;\n    \n    C.xyz += smoothstep(1.,0.,length(C))*n*0.2;\n    \n    C.xyz -= smoothstep(0.,1.,length(C))*n*0.1;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 pal[] = vec3[](\n    vec3(0.2,0.2,0.9),\n    vec3(0.9,0.8,0.2),\n    vec3(0.8,0.4,0.9)\n);\n\nfloat fun(\n    float param,\n    float seg,\n    float tran\n){\n    float cft = fract(param/seg);\n    float id = mod(floor(param/seg),2.);\n    float coolfun = smoothstep(0.,tran,cft);\n    if(id == 0.)\n        coolfun = 1. - coolfun;\n        \n    return coolfun;\n}\nvoid mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = U/R.xy;\n    vec2 nuv = (U-0.5*R.xy)/min(R.x,R.y);\n    vec2 muv = (iMouse.xy-0.5*R.xy)/min(R.x,R.y);\n\n    vec3 col = vec3(0);\n    \n    int cnt = pal.length();\n    \n\n    \n    col += 1.;\n    \n    for (float i = 0.; i < 144.; i ++){\n        int id = int(i)%cnt;\n        \n        vec3 p = 1.*sin(vec3(3,2,1)*iTime*(0.2 + sin(i )*0.4)*0.2+ sin(iTime + i)*0.2 + i);\n        \n        float d = length(nuv - p.xy);\n        vec2 luv = nuv - p.xz/dot(p.xy,p.xz);\n        d = length(luv);\n        //d = abs(luv.x);\n        vec3 palc = (pal[id]) + sin(vec3(iTime + i,0,0))*0.1;\n        \n        luv /= dot(luv,luv);\n        palc.x *= 1. + smoothstep(1.,0.,dot(luv,luv));\n        col = lerpHSV(\n            col,\n            palc,\n            smoothstep(0.5 + sin(iTime + i)*0.5,0.,d*1.)\n        );\n    \n        \n    }\n    col = hsv2rgb(col);\n      \n    if(max(abs(nuv.x) - 0.6,abs(nuv.x)-0.8) < 0.)\n        col += 0.;\n    else \n        col -= vec3(1);\n        \n    vec2 camOffs = sin((iTime + sin(iTime)*1.)*vec2(1,1.4)*0.4)*0.4 - muv*0.5;\n    \n    \n    float seg = 15.;\n    float tran = 0.2;\n    vec2 cp = uv*5. + iTime*0.2;\n    float param = iTime + abs(dot(sin(cp.xy + 4.),cos(cp.xy)))*0. + uv.x*0. + sin(length(uv))*0.;\n    float cft = fract(param/seg);\n    float id = mod(floor(param/seg),2.);\n    float coolfun = smoothstep(0.,tran,cft);\n    if(id == 0.)\n        coolfun = 1. - coolfun;\n    \n    \n    {\n        vec2 p = nuv;\n        \n        float cfamt = 40.;\n        float cfenv = fract(coolfun*40.);\n        float its = 10. + sin(iTime)*0. + cfamt * coolfun;\n        \n        float cffl = floor(its);\n        \n        for(float i = 0.; i < its; i++){\n            vec2 lp = p;\n            \n            lp += camOffs*max(i/its*2. - 1.,0.);\n            lp -= camOffs*max((1.-i/its)*2. - 1.,0.)*0.2;\n            \n            float poffset = sin(iTime*0.6 + 0.5);\n            \n            lp += sin((i/its*14.+iTime)*vec2(1.1,2.4)*0.6)*0.1*pow((1.-i/its),2.+poffset);\n            \n            lp += vec2(1.89,1)*sin((i/its*4.+iTime)*vec2(1.1,2.4) + 0.*sin((i/its+iTime)*vec2(0.5,0.8))  )*0.7*pow(i/its,5. + poffset)*0.1;\n            lp /= 1. + dot(lp,lp)*5.;\n            float d = length(lp) - (1.-i/its)*0.2*(0.5+0.5*sin(iTime*1. + 15.*i/its))* ( 1. );\n            \n            float df = smoothstep(\n                fwidth((d)) +\n                //    0.1*pow((length(sin(sin(iTime)*0.4 - 0.5 + (i/its)))),2.)\n                    0.2*pow((length(sin(sin(iTime*1.)*0.4 - 0.5 + (i/its)))),2.) \n                \n                ,0.,d);\n            \n            //col = mix(col,vec3(1)*float(mod(i,2.)),df);\n            col = mix(col,\n                vec3(1) \n                //+ 0.*hsv2rgb(vec3(df*0.,-df*.4,1.))\n                *float(mod(i,2.))\n                ,df);\n            \n            \n        }\n    \n    }\n    \n\n    col = 1.-exp(-col*1.78);\n    col = smoothstep(0.,1.,col);\n    col = pow(col,vec3(0.454545));\n    C = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R iResolution.xy\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define iTime (iTime + 100. - texelFetch(iChannel1,ivec2(gl_FragCoord.xy)%8,0).x*0.)\n\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\n\nfloat luma(vec4 color) { return dot(color.rgb, vec3(0.299, 0.587, 0.114)); }\n\nvec4 rgb2cmyki(in vec3 c) { float k = max(max(c.r, c.g), c.b); return min(vec4(c.rgb / k, k), 1.0); }\n\nvec3 cmyki2rgb(in vec4 c) { return c.rgb * c.a; }\n\nvec3 lerpHSV(in vec3 hsv1, in vec3 hsv2, in float rate)\n{\n    float hue = (mod(mod((hsv2.x-hsv1.x), 1.) + 1.5, 1.)-0.5)*rate + hsv1.x;\n    return vec3(hue, mix(hsv1.yz, hsv2.yz, rate));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgbSmooth( in vec3 hsv )\n{\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\n}\n\nvec3 hueShift(vec3 col, vec3 hsv){\n    vec3 h = rgb2hsv(col);\n    h.x += hsv.x;\n\n    h.y *= hsv.y;\n    h.z *= hsv.z;\n\n    return hsv2rgbSmooth(h);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}