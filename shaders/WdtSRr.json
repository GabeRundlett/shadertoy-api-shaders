{
    "Shader": {
        "info": {
            "date": "1571318565",
            "description": "Perfecting the nonlinear wave-fluid technique. \nClick to accelerate: [url]JAVASCRIPT: H=location.host;E=(H?window:opener).Effect;P=E.prototype;if(!E.P)E.P=P.Paint;P.Paint=function(...A){for(i=0;i<12;i++)E.P.apply(this,A);};if(!H)close();[/url]\n",
            "flags": 48,
            "hasliked": 0,
            "id": "WdtSRr",
            "likes": 15,
            "name": "Super fluid ",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "interactive",
                "fluid",
                "physics",
                "nonlinear"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "const int KEY_UP = 38;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    \n    vec4 U = XX(BF, pos, size);\n    vec2 red = vec2(1,0), green = vec2(-0.5,sqrt(3.)*0.5), blue = vec2(-0.5,-sqrt(3.)*0.5);\n    vec3 RGB1 = abs(vec3(dot(U.xy, red),dot(U.xy, green),dot(U.xy, blue)));\n    vec3 RGB2 = abs(vec3(dot(U.zw, red),dot(U.zw, green),dot(U.zw, blue)));\n\n    float density1 = dot(U.xy,U.xy);\n    float density2 = dot(U.zw,U.zw);\n    float D = density1+density2;\n    // Output to screen\n   // fragColor = vec4(vec3(density1,0.,density2)/2.,1.0);\n    \n    vec2 velocity = FluidParam(BF, pos, size).xy;\n    float vort = Divergence(BF, pos, size);\n    vec3 RGB3 = vec3(dot(velocity, red),dot(velocity, green),dot(velocity, blue));\n    \n    if(texelFetch( iChannel3, ivec2(KEY_UP,2), 0 ).x < 0.5)\n    {\n         //sample texture\n         vec3 color = 5.4*vec3(0.3,0.35,1.)*pow(XX(iChannel2, XX(iChannel0, pos, size).xy, size).xyz,vec3(1.8));\n         vec3 background = 1.4*vec3(0.4,0.6,0.8)*(0.6+0.4*pos.y/size.y);\n        float t = clamp(D*4.,0.,1.);\n         fragColor = vec4(t*color + (1.-t)*background, 1.);\n    }\n    else\n    {\n         fragColor = vec4(vec3(vort,0,-vort)*vec3(D)*10., 1.);\n    }\n    \n    if(texelFetch( iChannel3, ivec2(KEY_DOWN,2), 0 ).x > 0.5)\n    {\n         fragColor = vec4(RGB3*vec3(D)*8., 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 dU_dt, in vec2 pos)\n{   \n    vec4 U = XX(BF, pos, size);\n    dU_dt = XX(AF, pos, size);\n   \n    \n    //velocity verlet\n    //intergrating a complex 2 component wave equation\n    dU_dt += dt*(Laplacian(BF, pos, size) + FieldForce(U) - U*potential(pos));\n    \n    //init conditions\n    if(iFrame < 1) dU_dt = 12.*freq*mouse_amplitude*vec4(0.,1.,0.,0.)*gauss(pos-size*vec2(0.3,0.4), mouse_radius);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        dU_dt += freq*mouse_amplitude*vec4(0.,1.,0.,0.)*gauss(pos-iMouse.xy, mouse_radius);\n    \n    #ifdef UPPER_BORDER\n   \t    vec2 X = pos/size; \n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tdU_dt *= vec4(border);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 pos)\n{   \n    U = XX(BF, pos, size);\n    vec4 dU_dt = XX(AF, pos, size);\n    \n    U += dt*dU_dt;\n    \n    U +=  Laplacian(BF, pos, size)*smooth; //pretty useful, smooths the liquid and makes it more stable\n   \n     //init conditions\n    if(iFrame < 1) U = 12.*mouse_amplitude*vec4(1.,0.,0.,0.)*gauss(pos-size*vec2(0.3,0.4), mouse_radius);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n        U += mouse_amplitude*vec4(1.,0.,0.,0.)*gauss(pos-iMouse.xy, mouse_radius);\n    \n    #ifdef UPPER_BORDER\n   \t\tvec2 X = pos/size; \n   \t\tfloat border = clamp((1.-X.y)/0.01,0.,1.);\n    \tU *= vec4(border);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define size iResolution.xy\n#define XX(a, p, s) texture((a), (p)/s)\n#define AF iChannel0\n#define BF iChannel1\n#define CF iChannel2\n\n//scales\n#define dt 0.28\n#define dx 0.5\n\n//nonlinearity\n#define K 0.4\n\n#define PI 3.14159265\n\n//diffusion\n#define smooth 0.005\n\n#define UPPER_BORDER\n#define mouse_amplitude 0.5\n#define mouse_radius 100.\n\n#define freq sqrt(K)*0.5\n\n//gravity\nfloat potential(vec2 X)\n{\n\treturn 0.2*(X.y-500.)/1000.;\n}\n\nfloat FieldPotential(vec4 fval)\n{\n    float F = length(fval); \n    float A = length(fval.xy); \n    float B = length(fval.zw); \n    float k = 20.;\n    float p = 0.8;\n    float ampl = 1.5;\n    return K*(-0.5*F*F - 0.01*pow(F,4.) +(p - 0.0045*dot(fval.xy,fval.zw))*exp(-k*pow(F - ampl,2.))); \n}\n\n\n#define eps 0.005\nvec4 FieldForce(vec4 fval)\n{\n    vec2 d = vec2(eps,  0.);\n    //numerical gradient of the field potential\n    return 0.5*vec4( FieldPotential(fval+d.xyyy)-FieldPotential(fval-d.xyyy),\n                 FieldPotential(fval+d.yxyy)-FieldPotential(fval-d.yxyy),\n                 FieldPotential(fval+d.yyxy)-FieldPotential(fval-d.yyxy),\n                 FieldPotential(fval+d.yyyx)-FieldPotential(fval-d.yyyx) )/eps;\n}\n\n\nvec4 Laplacian(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = XX(F, pos, sz);\n\tvec4 x0 = XX(F, pos + vec2(-1,0), sz);\n    vec4 x1 = XX(F, pos + vec2(1,0), sz);\n    vec4 y0 = XX(F, pos + vec2(0,1), sz);\n    vec4 y1 = XX(F, pos + vec2(0,-1), sz);\n \n\treturn (x0+x1+y0+y1-4.f*a)/(dx*dx);\n}\n\nfloat angle_between(vec2 a,vec2 b)\n{\n    return atan(a.x*b.y-a.y*b.x,dot(a,b));\n}\n\n\n//get the velocity field and density from the complex 2 component wave field\nvec4 FluidParam(sampler2D F, vec2 pos, vec2 sz)\n{\n    vec4 a = XX(F, pos, sz);\n\tvec4 x0 = XX(F, pos + vec2(-1,0), sz);\n    vec4 x1 = XX(F, pos + vec2(1,0), sz);\n    vec4 y1 = XX(F, pos + vec2(0,1), sz);\n    vec4 y0 = XX(F, pos + vec2(0,-1), sz);\n    \n    float a1 = dot(a.xy,a.xy);\n    float a2 = dot(a.zw,a.zw);\n    \n    //gradient of the complex phase of the field components normalized over the densities \n    float vx = ( a1*angle_between(x1.xy,x0.xy) + a2*angle_between(x1.zw,x0.zw) ) /(2.*dx*(a1+a2+eps));\n    float vy = ( a1*angle_between(y1.xy,y0.xy) + a2*angle_between(y1.zw,y0.zw) ) /(2.*dx*(a1+a2+eps));\n\treturn vec4(vx, vy, a1, a2);\n}\n\n//get the vorticity field\nfloat Vorticity(sampler2D F, vec2 pos, vec2 sz)\n{\n\tvec4 x0 = FluidParam(F, pos + vec2(-1,0), sz);\n    vec4 x1 = FluidParam(F, pos + vec2(1,0), sz);\n    vec4 y1 = FluidParam(F, pos + vec2(0,1), sz);\n    vec4 y0 = FluidParam(F, pos + vec2(0,-1), sz);\n    \n\treturn ((x1.y-x0.y)-(y1.x-y0.x))/(2.*dx);\n}\n\n//get the vorticity field\nfloat Divergence(sampler2D F, vec2 pos, vec2 sz)\n{\n\tvec4 x0 = FluidParam(F, pos + vec2(-1,0), sz);\n    vec4 x1 = FluidParam(F, pos + vec2(1,0), sz);\n    vec4 y1 = FluidParam(F, pos + vec2(0,1), sz);\n    vec4 y0 = FluidParam(F, pos + vec2(0,-1), sz);\n    \n\treturn ((x1.x-x0.x)+(y1.y-y0.y))/(2.*dx);\n}\n\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n       \n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//advecting texture coordinates using the extracted velocity field\n\nvoid mainImage( out vec4 uv, in vec2 pos)\n{\n    //extracting velocity from the 2 component complex field \n    vec4 p = FluidParam(BF, pos, size);\n    vec2 velocity = p.xy*sqrt(p.z + p.w);    \n    \n    //advecting \n    uv = XX(CF, pos - 10.*dt*velocity.xy, size);\n    \n    //mouse interaction\n    if(iMouse.z>0.)\n    {\n        float t = gauss(pos-iMouse.xy, mouse_radius);\n        uv = uv*(1.-t) + vec4(pos, 0.,0.)*t;\n    }\n    \n    if(iFrame < 1) uv = vec4(pos, 0.,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}