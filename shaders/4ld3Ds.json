{
    "Shader": {
        "info": {
            "date": "1472514259",
            "description": "Code from Shane, 4rknova, TinyTexel",
            "flags": 32,
            "hasliked": 0,
            "id": "4ld3Ds",
            "likes": 3,
            "name": "+++++++++",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "squid",
            "viewed": 578
        },
        "renderpass": [
            {
                "code": "const float SAMPLES = 24.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 decay = vec4(.93, .87, .94, .92); \n    float density = 0.45; \n    vec4 weight = vec4(0.2, 0.16, 0.2, 1.); \n    vec3 l = vec3(0., .2, 0.);\n    vec2 tuv =  uv - .5 - l.xy*.45;\n    vec2 dTuv = tuv*density/SAMPLES;\n    vec4 col = texture(iChannel0, uv.xy)*0.4;\n   \t    \n    for(float i=0.; i < SAMPLES; i++){\n    \n        uv -= dTuv;\n        col += texture(iChannel0, uv) * weight;\n        weight *= decay;\n        \n    }\n    col *= (1. - dot(tuv, tuv)*.9);\n    \n    fragColor = (smoothstep(0., 1., col));\n    vec4 sprites = texture(iChannel1, fragCoord.xy/iResolution.xy);\n    fragColor = mix(fragColor, vec4(sprites.xyz,1.), sprites.w);\n\t//fragColor = (texture(iChannel1, fragCoord.xy / iResolution.xy));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926535898\n\nmat2 rot2(float a){\n    float c = cos(a); float s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvec2 P(float z){ z = sin(z/24.)*cos(z/12.); return vec2(z*4.2, z); }\n\nfloat SM(float a, float b, float k)\n{\n    float xp = clamp(-(b-a) * k + 0.5, 0.0, 1.0), xp2 = xp*xp;\n   \treturn a+min((b-a), xp2 * (xp2 * 0.5 - xp) / k);\n}\n\nvec2 mapx(vec3 p){\n    vec2 tun = abs(p.xy - P(p.z))*vec2(0.5, 0.7071);\n    tun = pow(tun, vec2(6.));\n    float T = 1.-pow(tun.x + tun.y, 1.0/6.);\n    \n    vec3 q = p; q.z -= iTime*5. + 3.3;\n    q.xy -= P(p.z);\n    q.xy *= rot2(iTime);\n    q.zy *= rot2(iTime*6.);\n    float S = max(length(q)-1., \n                  SM(length(q.xz)-.25, \n                        length(q.yz)-.25, 2.));\n\t\n \treturn vec2(min(T, S), T < S);\n}\nfloat map(vec3 p) { return mapx(p).x; }\n\nvec3 N(in vec3 p)\n{  \n    vec2 e = vec2(-1.,1.)*0.001;   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + \n\t\t\t\t\t e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );   \n}\n\nfloat G(vec3 uv, float width) {\n\tvec3 c = max(step(abs(uv), vec3(width*.5))*.8,step(fract(uv), vec3(width*1.2))*.2);\n\treturn max(c.x,max(c.y,c.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n\tvec3 LA = vec3(0., 0., iTime*5.),ro = LA + vec3(0., .1, -.5),c = vec3(0.3, 1., 1.),sp;\n    \n\tLA.xy += P(LA.z);\n\tro.xy += P(ro.z);\n    \n    vec3 f = normalize(LA-ro),\n        r = normalize(vec3(f.z, 0., -f.x)),\n        u = cross(f, r),\n        rd = normalize(f + uv.x*r + uv.y*u);\n        \n\tfloat t = 0., dt, x;\n\tfor(int i=0; i<128; i++){\n\t\tdt = map(ro + rd*t);\n\t\tif(dt<5e-3) break;\n\t\tt += dt*0.75;\n\t}\n\t\n\tif(dt<5e-3 && t < 10.){\n    \tsp = t * rd+ro;\n        x = mapx(sp).y;\n        if(x == 1.)\n       \t\tc = mix(vec3(.8, .2, .4), vec3(.05, 0., .05), \n          \t   step(G( sp*2., .017), 0.));\n        else {\n        \tc = vec3(0.2, 0.7, 0.1)*max(0., dot(N(sp), -rd));\n        }\n        c.xy *= smoothstep(0., 6., t);\n\t}\n\t\n\tfragColor = c.xyzz;\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n//#define _ 0.\n//#define B 1.\n//#define D 2.\n//#define I 3.\n//#define Q(a,b,c,d,e,f,g,h) if(y==i++)m=(a+4.*(b+4.*(c+4.*(d+4.*(e+4.*(f+4.*(g+h*4.)))))));\n\n\t/*\tQ(_,_,_,B,B,_,_,_)\n        Q(_,_,B,I,I,B,_,_)\n        Q(_,_,B,I,I,B,_,_)\n        Q(_,B,I,I,I,I,B,_)\n        Q(B,I,I,I,I,I,I,B)\n\t\tQ(_,B,B,I,I,B,B,_)\n\t\tQ(_,_,B,I,I,B,_,_)\n\t\tQ(_,B,I,I,I,I,B,_)\n\t\tQ(_,B,I,I,I,I,B,_)\n\t\tQ(B,I,I,I,I,I,I,B)\n\t\tQ(B,I,D,I,I,D,I,B)\n\t\tQ(B,I,I,I,I,I,I,B)\n\t\tQ(_,B,B,B,B,B,B,_)\n        Q(B,_,D,B,_,D,_,B)\n        Q(B,D,D,B,_,D,_,B)\n        Q(B,D,_,B,B,B,_,B)\n        Q(B,D,_,_,D,B,_,B) \n        Q(B,D,_,D,D,B,_,B)\n        Q(B,D,_,D,_,B,_,B)*/\n\nvec4 squid(vec2 p)\n{\n    p = floor(p*1e2 - vec2(4.,4.+sin(iTime*1.5) ));\n        \n    int y=int(18.-p.y);\n    float m=0., b;\n    if(y==0)m=320.;\n\tif(y==1||y==2||y==6)m=2e3;\n\tif(y==3)m=8180.;\n\tif(y==4||y==9||y==11)m=32765.;\n\tif(y==5)m=61e2;\n\tif(y==7||y==8)m=8180.;\n\tif(y==10)m=31725.;\n\tif(y==12)m=5460.;\n\tif(y==13)m=18529.;\n\tif(y==14)m=18537.;\n\tif(y==15)m=17737.;\n\tif(y==16)m=17929.;\n\tif(y==17)m=18057.;\n\tif(y==18)m=17545.;\n          \n       \n    b = (floor(mod(m / pow(4., p.x), 4.)));   \n    \t\n    return\t(b>2.) ? vec4(0.27,0,0.17,0.9) :\n    \t\t(b>1.) ? vec4(0.15,0,0.1, 0.8) :\n    \t\t(b>0.) ? vec4(0.2 ,0,0.1, 0.7) : vec4(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy \n            * vec2(iResolution.x / iResolution.y, 1.);\n    \n    fragColor = squid(p);\n  \n}",
                "description": "",
                "inputs": [],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}