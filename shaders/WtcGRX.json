{
    "Shader": {
        "info": {
            "date": "1577031947",
            "description": "Movement on a simple Sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "WtcGRX",
            "likes": 8,
            "name": "Movement on simple Sphere",
            "published": 3,
            "tags": [
                "simple",
                "sphere",
                "snake",
                "moving",
                "axis",
                "move",
                "movement"
            ],
            "usePreview": 0,
            "username": "Gilga",
            "viewed": 395
        },
        "renderpass": [
            {
                "code": "// References\n// https://www.shadertoy.com/view/XdfczH\n// https://www.shadertoy.com/view/wtfSWH\n// https://www.shadertoy.com/view/tslXRj\n// http://www.sousakuba.com/Programming/gs_two_lines_intersect.html\n\n#define pi 3.14159265358979323846264338327950288419716\n\nvec3 moveOnSphereThetaPhi(float radius, float theta, float phi) {\n    //theta = (mod(lon,360.0) / 360.0)*pi * 2.0;\n    //phi = (mod(lat,360.0) / 360.0)*pi * 2.0;\n    theta = theta * pi;\n    phi = phi * pi;\n    float tsin = sin(theta);\n    return radius * vec3(tsin*cos(phi),tsin*sin(phi),cos(theta));\n}\n\nvec3 moveOnSphereLonLat(float radius, float lon, float lat) {\n    //vec3 pos = vec3(0.0,0.0,0.0);\n    //float lat = asin(pos.z / radius);\n    //float lon = atan(pos.y,pos.x);\n  \n    float x = cos(lat) * cos(lon);\n    float y = cos(lat) * sin(lon);\n    float z = sin(lat);\n\n    vec3 move = radius * vec3(x,y,z);\n            \n    return move;\n}\n\nfloat circle(vec2 fragCoord, float radius)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 cUv = uv;\n    cUv.x -= 0.5;\n    cUv.y -= 0.5;\n    cUv.y *= iResolution.y/iResolution.x;\n    \n    float circleOuter = smoothstep(0.101,0.103,length(cUv*0.5)/radius);\n    float circleInner = smoothstep(0.099,0.097,length(cUv*0.5)/radius);\n    float circle = circleInner + circleOuter;\n\n    float c = 1.0 - circle;\n\n    return c;\n}\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n\tfloat d = DistLine(ro, rd, p);\n    d = smoothstep(.06, .05, d);\n    float z = p.z > 0.0 ? 0.125 : 1.0;\n        \n    return d*z;\n}\n\n\nfloat DrawLine(vec3 ro, vec3 rd, vec3 a, in vec3 b)\n{\n    vec3 ab =normalize(b-a),ao = a-ro;\n\tfloat d0 = dot(rd, ab), d1 = dot(rd, ao), d2 = dot(ab, ao);\n\tfloat len = (d0*d1-d2)/(1.0-d0*d0);\n    len= clamp(len,0.0,length(b-a));\n    vec3 p = a+ab*len;\n    float z = p.z > 0.0 ? 0.0 : 1.0;\n    \n \t//float d = DistLine(ro, rd, p);\n    //d = smoothstep(.06, .05, d);\n    //float z = p.z > 0.0 ? 0.125 : 1.0;\n    \n    return length(cross(p-ro, rd))/(1.-p.z);\n}\n\n\nvec3 lookat(vec3 p, vec3 eye, vec3 target, vec3 up)\n{\n\tvec3 w = normalize(target-eye), u = normalize(cross(w,up));\n\treturn vec3(dot(p,u), dot(p,cross(u,w)), dot(p,w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = uv;\n    \n\tmuv -= 0.5;\n    muv.x *= iResolution.x/iResolution.y;\n    \n    vec3 target = vec3(0.0, 0.0, 0.0);\n    vec3 ro = vec3(3. * cos(t)*0.0, 2. * sin(t)*0.0, -3.); // camera position\n    \n    float zoom = 1.0;\n    \n    vec3 up = vec3(0., 1., 0.);\n    vec3 f = normalize(target - ro);\n    vec3 r = cross(up, f);\n    vec3 u = cross(f, r);\n    \n    vec3 z = ro + f * zoom;\n    vec3 i = z + muv.x*r + muv.y*u;\n    vec3 rd = normalize(i - ro); // camera direction\n    vec3 rd2 = lookat(rd,ro,target,up);\n    //rd=vec3(muv, 1.0);\n    \n    vec3 p = vec3(0);\n    \n    vec3 mover = vec3(0);\n    \n    vec3 o = moveOnSphereLonLat(1.,t,t*2.);\n    vec3 du = o+normalize(o)*.2;\n    vec3 df = moveOnSphereLonLat(1.,(t+.1)*1.0,(t+.1)*2.);\n    vec3 dr = o+cross(du,df);\n    \n    float lu = .01/DrawLine(ro, rd, o, du);\n    float lf = .01/DrawLine(ro, rd, o, df);\n    float lr = .01/DrawLine(ro, rd, o, dr);\n    \n    mover += vec3(DrawPoint(ro, rd, o));\n    mover += mix(mover,vec3(0.,0.,1.),lu);\n    mover += vec3(1.,0.,0)*lf;\n    mover += vec3(0.,1.,0.)*lr;\n    \n    for(int i=0; i<50; i++) {\n        float j = float(i)*.04;\n    \tmover += DrawPoint(ro, rd,  moveOnSphereLonLat(1.,(t-j),(t-j)*2.));\n    }\n    \n    vec3 col = vec3(0);\n    col = vec3(circle(fragCoord,0.9))*.35 + mover;\n    \n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}