{
    "Shader": {
        "info": {
            "date": "1650541904",
            "description": "A subtle bullet trace shader. This effect is apparently called \"Bullet Schlieren\". Imagine bullet flying out of the origin point and being currently in the target point. Shader emulates thinner air along the way.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlsfRH",
            "likes": 2,
            "name": "Bullet trace",
            "published": 3,
            "tags": [
                "trace",
                "bullet",
                "schlieren"
            ],
            "usePreview": 0,
            "username": "chertkov",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "float force = 0.5;\nfloat thickness = 0.1;\nvec2 origin = vec2(0.0, 0.5);\nvec2 target = vec2(0.0, 0.5);\n\n//distance from C to a line defined by two points: A and B\nfloat distance_to_line(vec2 C, vec2 A, vec2 B) {\n    float k = (B.y - A.y) / (B.x - A.x);\n    float t = B.y - k * B.x;\n    \n    return abs((k * C.x - C.y + t) / sqrt(k * k + 1.0));\n}\n\n//closest point to C on a line defined by A and B\nvec2 closest_point(vec2 C, vec2 A, vec2 B){\n    float k = (B.y - A.y) / (B.x - A.x);\n    float t = B.y - k * B.x;\n    \n    float x = (-1.0 * (-C.x - k * C.y) - k * t) / (k * k + 1.0);\n    float y = (k * (C.x + k * C.y) + t) / (k * k + 1.0);\n    return vec2(x, y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    origin.x = sin(iTime * 4.0 - 12.3);\n    target.x = sin(iTime * 4.0);\n    \n    \n    float d_line = distance_to_line(uv, origin, target);\n    float d_origin = distance(uv, origin);\n    float d_target = distance(uv, target);\n    \n    //fragment is close to origin or target\n    float mask = 1.0 - smoothstep(0.0, thickness, \n        min(d_origin, d_target));\n    \n    //fragment is close to the segment of a line between origin and target\n    vec2 P = closest_point(uv, origin, target);\n    if(P.x >= min(origin.x, target.x) && P.x <= max(origin.x, target.x) && \n    P.y <= max(origin.y, target.y) && P.y >= min(origin.y, target.y)) \n    {\n        mask = 1.0 - smoothstep(0.0, thickness, d_line);     \n    }\n    \n    vec2 disp = (uv - P) * force * mask;\n  \n    //fragColor.rgb = vec3(mask);\n    fragColor = texture(iChannel0, uv - disp);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}