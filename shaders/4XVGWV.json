{
    "Shader": {
        "info": {
            "date": "1718254305",
            "description": "A red and blue rug pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "4XVGWV",
            "likes": 4,
            "name": "Red and blue rug 2 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 158
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nfloat scale = 1.5;\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n        t2.y +=\n            1./4.\n            \n            //WOW!\n            //-1./4.*sign(t2.y-.25)\n            \n            //1./3.\n            //1./8.\n        ;\n        //if(t2.y>1./4.)\n        uv =\n            (uv+t2)/scale\n            //(uv-t2*2.)/scale\n        ;\n        //{uv.y = (uv.y+1.); }\n        \n \n\n        t2 =\n            //triangle_wave(uv-.5)*sign(t2.x-.25)\n            triangle_wave(uv+.5)\n        ;\n        uv =\n            t2/2.-triangle_wave(uv.yx)\n        ;\n        \n        {t2.x = (t2.x+1.*sign(t2.y-t2.x)); }\n        //{t2.x = (t2.x+sign(t2.y-.25)); }\n\n        //{t2.x = (t2.x+1.*sign(uv.x)); }\n\n}\n\nvoid pallette(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n        c1 =\n            //max(abs(t2.y-t2.x)/2.,c1)\n            max(abs(t2.y+t2.x)/2.,c1)\n            //max(sign(t2.y-t2.x)/2.,c1)\n        ;\n        c1 =\n            abs(1.-abs(2.*c1-1.))\n            //abs(2.*c1-1.)\n        ;\n        col.x =\n            1.-c1\n        ;\n        if(t2.y>t2.x)\n        col =\n            //abs(col-(1.-(c1*(t2.y-t2.x))))\n            //abs(col/2.-((c1*(t2.y-t2.x))))\n            //abs(col/2.-(1.-(c1*(t2.y-t2.x))))\n            //abs(col/2.-(1.-c1))\n            abs(vec3(1.-c1))\n        ;\n        //if(k>9) uv.y= iTime;\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        //kaleidoscope!\n        //if(k>9) uv.x += iTime/2.;\n        \n        transform(uv,t2,col,c1);\n        pallette(uv,t2,col,c1);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 8.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1,1.0);\n    //fragColor = pow(fragColor ,vec4(1./1.8)); //gamma correction\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\n\nint gcd(int a, int b) \n{ \n    // Find Minimum of a and b \n    int result = ((a < b) ? a : b); \n    while (result > 0) { \n        // Check if both a and b are divisible by result \n        if (a % result == 0 && b % result == 0) { \n            break; \n        } \n        result--; \n    } \n    // return gcd of a nd b \n    return result; \n}\n#define gcd(a,b) float(gcd(int(a),int(b)))\n\nint collatz(int initial, int steps){\n    //hailstone numbers\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\n\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat mod1(float a,float b){\n    //a += mod(floor(a/16.),16.);\n\n    //a += collatz(mod(a/4.,b),8.);\n    //a += collatz(mod(a/4.,8.),b);\n    \n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n        //mod(a+4.*floor(mod(a/4.,b)),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),5.); i++){\n        a /= 2.0;\n        //a /= 1.0+mod(floor(a),2.);\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\nfloat fmod(float a, float b, float tempo){\n    //a += gcd(a,b);\n    float\n    t1 = mod1(floor(b/2.),2.),\n    a1 =\n        floor(a-t1),\n    a2 = mod1(a1,3.),\n    a3 =\n        mod1(a1+mod(a1/4.,3.)*8.,4.)\n    ;\n    return\n        mod1(-a1-a2-a3,b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return fmod(a,b,1.);\n}\n\nfloat prime_rhythm(float time){\n    //time += mod(floor(time/16.),16.);\n\n    //time += floor(time/8.);\n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\nfloat fmod1(float a, float b){\n\n    //a += collatz(a/8./8.,b);\n    return\n        fmod(a,b)\n        //fmod(a+4.+floor(a/4.)*4.,b)\n    ;\n}\n\n#define fract1(a) (1.-pow(fract(-a),2.))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 banjo(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,6./4.));\n}\n\nvec2 harp(vec2 a, vec2 nb){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.));\n}\n\nvec2 synth_drum(vec2 a, vec2 nb,float m2){\nreturn a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.));\n}\n\nvec2 oud(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 steel_drum(vec2 a, vec2 nb){\nreturn a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./4.*abs(synth(1./4.,a,1./8.,1.,nb*2.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n;\n}\n\nvec2 sitar(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./4.+a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar2(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./2.+(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar3(vec2 a, vec2 nb){\nreturn a/16./4.*abs(log(1./2.+.5*a*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./2.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n;\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a*a/16./2.*abs((.5*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a/4.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\n\nvec2 sitar0(vec2 a, vec2 nb){\nreturn a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.)));\n}\n\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  //time += mod(floor(time/16.),16.);\n\n  float s1 =\n      8.,\n  tempo1 =\n      prime_rhythm(time)*prime_rhythm(time/2.)*2.\n      //prime_rhythm(time+floor(time/8.))*prime_rhythm(time/2.)*2.\n  ,t = s1*time/4./tempo1,\n  t7 =\n      (1.+fmod(t/8.,2.))\n      //(1.+fmod(t/8.+mod(t/8.,2.),2.))\n  ,\n  t4 = t/prime_rhythm(time+11.)/t7,\n  t1 =\n       fmod(t4,2.)\n       //fmod(t4+floor(time/8.),2.)\n  ,\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 =\n      (1.+fmod(t5,2.))\n      //(1.+fmod(t5+floor(time/4./4./4.),2.))\n\n  ,\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod1(t6+floor(time/20.+1.)*s1/4.,s1/2.)/2.)\n      //floor(fmod1(t6+floor(time/8./4.),s1/2.)/2.)\n\n  ,\n  m2 =\n      1. + fmod1(t/t3/2.+floor(time/20.)*s1/4.,s1/2.)\n      //1. + fmod1(t/t3/2.+floor(time/4./4.),s1/2.)\n  ,note = (\n      (m3+m2-t1*4.)\n      //(m3+m2-t1*4.+fmod(time*2.,2.5)*2.)\n      //(m3+m2-t1*4.+fmod(time,4.))\n      //mod(m3+m2-t1*4.-floor(time/4.)*4.,8.)-4.\n      //(m3+m2-t1*4.+fmod(time/2.,2.))\n      //(m3+m2+t1*4.-2.)\n      //(m3+m2-t1*4.)+mod(m3,2.)\n  )/7.\n  \n  ;\n  vec2 a=\n      duration/2.*(-vec2((log(1./64.+fract1(t/prime_rhythm(time+7.))/4./duration))))\n      \n      //more complex rhythm\n      //-vec2((log(1./64.+fract1(t*t3/2./prime_rhythm(time+14.))/2./duration)),(log(1./64.+fract1(t*t3/prime_rhythm(time+7.))/4./duration)))\n\n  ,\n  nb =\n      t*vec2(pow(2.,note+scale),pow(2.,note+scale))*tempo1\n  ;\n  //nb /= tempo1/2.;\n  return\n      //oud\n      //oud(a,nb)\n      \n\n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //-.5*synth(1./8.,a,1./8.,1.,nb,1./2.))/2.\n      \n      //sitar\n      //a/16./2.*abs(\n      //synth(1./4.,a,0.,1.,nb*2.,1./2.)\n      //+.5*synth(1./8.,a,1./8.,1./duration,nb,1./2.))/2.\n      \n      //sitar\n      //abs(oud(a,nb)-oud(a,nb*2.)/2.)\n      \n      //banjo\n      //a/16./4.*abs(\n      //synth(1./4.,a,1./8.,1.,nb*4.,4./6.)\n      //+ synth(1./8.,a,1./4.,1.,nb*2.,6./4.))\n      \n      //synth drum\n      //a/16./32.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n      //+ log(1./2.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n      \n      //sitar3(a,nb)\n      //sitar1(a,nb)+sitar1(a/2.,nb/2.)+sitar1(a/4.,nb/4.)\n      sitar0(a,nb/2.)-sitar0(a*a,nb/4.)/2.\n      //sitar1(a,nb)\n      \n      //slap bass\n      //sitar1(a,nb)-sitar1(a*a,nb)\n      \n      //jawharp\n      //sitar6(a/2.,nb)-sitar6(a,nb/2.)\n  ;\n  \n}\n\nvec2 mainSound1(int samp, float time,float scale){\n    return mainSound1(samp,time,scale,1.);\n}\n\nvec2 mainSound(int a,float b){\n    float scale = 7.;\n    return\n        //sounds like sitar (using oud)\n        //abs(mainSound1(a,b,6.25,1./2.)-mainSound1(a,b,7.25)/2.)\n        \n        //abs(mainSound1(a,b,6.25,1./2.)-mainSound1(a,b,8.25,1./2.)/4.)\n        \n        //abs(mainSound1(a,b,6.25,1./2.)-(mainSound1(a,b,7.25,1.)/2.-mainSound1(a,b,8.25,2.)/4.))/2.\n\n        //sounds like sitar (using synth drum)\n        //(mainSound1(a,b,4.5,1.)-mainSound1(a,b,5.5,2.)/2.)*2.\n        \n        //using sitar2\n        //(mainSound1(a,b,6.5,1./2.)-mainSound1(a,b,5.5,2.))*2.\n        //(mainSound1(a,b,6.,1.)-mainSound1(a,b,5.,1./4.))*2.\n \n        //sitar6 (sounds like oud)\n        (mainSound1(a,b,scale-1.,2.)/2.-mainSound1(a,b,scale,1.))*2.\n        \n        //sitar1\n        //mainSound1(a,b,6.25,1.)\n        \n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}