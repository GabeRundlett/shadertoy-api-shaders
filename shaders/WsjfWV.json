{
    "Shader": {
        "info": {
            "date": "1590869154",
            "description": "On OpenGL(linux/nVIDIA)  I see:\n     left ( = const * mat )  as mid-grey, \n     right ( = float * mat ) as mid-red  (instead of mid-grey).\n\nUncomment the last line to see that float * mat() is compiled as diag(float) * mat().",
            "flags": 0,
            "hasliked": 0,
            "id": "WsjfWV",
            "likes": 0,
            "name": "GLSL Bug: float * mat()",
            "published": 3,
            "tags": [
                "glsl",
                "bug"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (int(fragCoord.x)==int(iResolution.x)/2) \n        { fragColor = vec4(0); return; } // separator black line\n\n#define var(v) min( v, v + iTime ) // = v. trick to prevent compiler to simplify const expressions\n    \n    vec2 U = fragCoord/iResolution.xy;\n    mat2 M = U.x < .5 \n               ?     2.  * mat2(1,1,1,1)   // left:   const * mat() is ok\n               : var(2.) * mat2(1,1,1,1);  // right: notConst*mat() is wrong\n\n   fragColor = vec4(M)/4.;         // only r and a are set, i.e., M.xx and M.yy: \n //fragColor = vec4(M).abgr/4.;    // float*mat() is compiled as mat(float)*mat() \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}