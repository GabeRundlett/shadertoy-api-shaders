{
    "Shader": {
        "info": {
            "date": "1586804949",
            "description": "One more day.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsByzG",
            "likes": 5,
            "name": "#724 - Daily Experiments",
            "published": 3,
            "tags": [
                "2d",
                "experiment",
                "daily",
                "everyday"
            ],
            "usePreview": 0,
            "username": "sixclones",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "/* Code by Sixclones\n\nMy boilerplate: https://www.shadertoy.com/view/wdsyzH */\n\n#define E 0.000001\n#define QP 0.785398163397448\n#define TRP 1.047197551196598\n#define HP 1.570796326794897\n#define P 3.141592653589793\n#define TP 6.283185307179586\n\n#define t iTime\n#define ht 0.5 * t\n#define tt 0.1 * t\n\n#define S(a, b, t) smoothstep(a, b, t)\n\nfloat map(float n, float start1, float stop1, float start2, float stop2) {\n  return (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n}\n\nfloat map01(float n) {\n  return 0.5 * n + 0.5;\n}\n\nvec2 rotate2d(vec2 uv, float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a)) * uv;\n}\n\nfloat circleSDF(vec2 uv) {\n  return 2.0 * length(uv);\n}\n\nfloat rectSDF(vec2 uv, vec2 s) {\n  return 2.0 * max(abs(uv.x / s.x), abs(uv.y / s.y));\n}\n\nfloat fill(float x, float s, float p) {\n  p *= 0.1;\n  return 1.0 - S(s - p, s + p, x);\n}\n\nvoid mainImage(out vec4 FragColor, in vec2 FragCoord) {\n  vec4 uv = vec4(FragCoord.xy / iResolution.xy,\n    (FragCoord.xy - 0.5 * iResolution.xy) / iResolution.y);\n  vec2 m = iMouse.xy / iResolution.xy;\n\n  float n = 8.0;\n  vec2 gv = fract(n * uv.xy);\n  vec2 id = floor(n * uv.xy);\n\n  vec3 color = vec3(0.0);\n  vec3 black = vec3(0.129);\n  vec3 white = vec3(0.925);\n  vec3 pal1 = vec3(0.95, 0.22, 0.31);\n  vec3 pal2 = vec3(0.21, 0.24, 0.63);\n\n  // ANIM\n  float speed = 0.75 * t;\n  // speed = 2.0 * m.x; // debug\n  /** ^ `x`\n      |      /\\            /\\            /\\            /\\      \n      |    /    \\        /    \\        /    \\        /    \\    \n      |  /        \\    /        \\    /        \\    /        \\  \n      |/____________\\/____________\\/____________\\/____________\\> `time` */\n  float timer = fract(mix(speed, -speed, step(1.0, mod(speed, 2.0))));\n\n  // SHAPES\n  // angle of the break\n  float angle = map(S(0.2, 0.8, fract(speed)), 0.0, 1.0, 3.0 * TP, 0.0) - QP;\n  // break between the two shapes\n  float breaker = step(0.0, rotate2d(uv.zw, angle).x);\n  // mix the shapes and the palettes\n  float mixer = S(0.45, 0.55, timer);\n\n  // BACKGROUND\n  // rotated uv\n  vec2 rv = rotate2d(uv.zw, -HP - QP);\n  // switch the bounds to change the direction of the rotation\n  vec2 bounds = mix(\n    vec2(1.0, E), vec2(E, 1.0),\n    step(1.0, mod(speed, 2.0))\n  );\n  // MIXERS - mix shapes, colors and background based on time\n  vec2 mixers = vec2(\n    S(0.45, 0.55, timer),\n    S(\n      S(0.5, 1.0, S(0.45, 0.65, timer)),\n      S(0.0, 0.5, S(0.25, 0.9, timer)),\n      map(atan(rv.y, rv.x), -P, P, bounds.x, bounds.y)\n    )\n  );\n\n  /* firstly compute the two sdf, circle and rectangle\n  then mix/interpolate them into a shape\n  finaly morph two values over time\n  */\n  // SDF\n  float circ = circleSDF(uv.zw);\n  float rect = rectSDF(uv.zw, vec2(1.0));\n  float shape = mix(circ, rect, mixers.x);\n  float shadow = rectSDF(rotate2d(uv.zw, angle), vec2(0.02, 0.25));\n  // FIILS\n  vec2 p = vec2(\n    0.1,\n    map(\n      S(0.4, 0.6, 2.0 * fract(mix(speed, -speed, step(0.5, mod(speed, 1.0))))),\n      0.0, 1.0,\n      1.75, 4.5\n    )\n  ); // precisions\n  // compute the fill of the two shapes, the sharp and the blurry7\n  vec2 shapefs = vec2(fill(shape, 0.5, p.x), fill(shape, 0.5, p.y));\n  // combine the two shapes to get this slashed render\n  float shapef = mix(shapefs.x, shapefs.y, breaker); // main effect\n  // compute the shadow\n  float shadowf = 0.125 * fill(shadow, 1.0, 51.0 * p.y);\n  color = mix(\n    mix(white, black, mixers.y),\n    mix(pal1, pal2, mixers.x) * shapef,\n    shapef\n  );\n  // add more depth with a shadow\n  color -= shapef * mix(shadowf, 0.0, breaker);\n\n  FragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}