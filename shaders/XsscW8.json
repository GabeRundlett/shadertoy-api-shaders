{
    "Shader": {
        "info": {
            "date": "1487982100",
            "description": "sample created with https://github.com/darosh/glt/",
            "flags": 0,
            "hasliked": 0,
            "id": "XsscW8",
            "likes": 6,
            "name": "Procedural Texture #2",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "texture"
            ],
            "usePreview": 0,
            "username": "darosh",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "vec3 mod289_1(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}vec2 mod289_1(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec3 permute_1(vec3 x) { return mod289_1(((x * 34.0) + 1.0) * x);}\nfloat Bias(float val, float bias) { return (val / ((((1. / bias) - 2.) * (1. - val)) + 1.));}vec3 Bias(vec3 val, float bias) { return (val / ((((1. / bias) - 2.) * (1. - val)) + 1.));}\nfloat snoise(vec2 v) { const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i = floor(v + dot(v, C.yy)); vec2 x0 = v - i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289_1(i); vec3 p = permute_1(permute_1(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0)); vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0); m = m * m; m = m * m; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h); vec3 g; g.x = a0.x * x0.x + h.x * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) { return a + b * cos(6.28318 * (c * t + d));}\nfloat multifractalA(vec2 point, float H, float lacunarity, float frequency, float octaves, float offset) { float value = 1.0; float rmd = 0.0; float pwHL = pow(lacunarity, -H); float pwr = 1.0; for(int i = 0; i < 65535; i++) {  value *= pwr * snoise(point * frequency) + offset;  pwr *= pwHL;  point *= lacunarity;  if(i == int(octaves) - 1)   break;   } rmd = octaves - floor(octaves); if(rmd != 0.0)  value += (rmd * snoise(point * frequency) * pwr); return value;}\nfloat SinXY(vec2 pos) { return (sin(pos.x) + sin(pos.y) + 2.) / 4.;}\nvec2 Warp(vec2 pos, float wx, float wy, float x, float y) { return pos + vec2(wx * x, wy * y);}\nvec2 Translate(vec2 pos, vec2 shift) { return pos + shift;}\nvec2 Scale(vec2 pos, vec2 scale) { return pos * scale;}\nfloat Gain(float val, float gain) { if(val < 0.5) {  return Bias(val * 2., gain) / 2.; } else {  return Bias(val * 2. - 1., 1. - gain) / 2. + 0.5; }}vec3 Gain(vec3 val, float gain) { return vec3(Gain(val.x, gain), Gain(val.y, gain), Gain(val.z, gain));}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n vec2 pos = fragCoord.xy / iResolution.x * 2. - vec2(1., iResolution.y / iResolution.x);\n vec3 color = cosPalette(Gain(SinXY(Warp(Translate(Scale(pos, vec2(66., 0.57)), vec2(1., 1.)), 8., 2.2, multifractalA(Scale(pos, vec2(-2.4, 1.7)), 1.6, 2., 3., 5.28, 0.8), multifractalA(Translate(Scale(pos, vec2(-2.4, 1.7)), vec2(10., -0.4)), 1.8, 2., 2.7, 60.8, 0.8))), 0.19), vec3(0.5, 0.5, 0.5), vec3(0.38, 0.52, 0.59), vec3(0.36, 0.33, 0.27), vec3(0.56, 0.57, 0.69));\n fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}