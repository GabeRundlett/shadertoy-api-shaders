{
    "Shader": {
        "info": {
            "date": "1586875888",
            "description": "Randomly Moving Blob, pixelized (quantilized?).\nThe next random position is generated from the time stamp.\n(It was probably better to get a regular random number, instead of building one from bits)",
            "flags": 0,
            "hasliked": 0,
            "id": "3djyzy",
            "likes": 1,
            "name": "Random-Walking Blob",
            "published": 3,
            "tags": [
                "randomwalk",
                "pixelized"
            ],
            "usePreview": 0,
            "username": "fisheep",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "#define MASK 123459876\n#define Q 16.0\n#define INV_Q (1.0/Q)\n\n// Taken from \"Numerical Recipes In C\" Cambridge Uni. 2nd ed\nint rbit(inout int s)\n{\n    s ^= MASK;\n    int res = (s >> 17) & 1 ^\n        (s >> 4) & 1 ^ \n    \t(s >> 1) & 1 ^\n        s & 1;\n    s ^= MASK;\n    s = (s << 1) | res;\n    return res;\n}\n\nvec2 hash(float v)\n{\n    int s = int(v);\n    vec2 res = vec2(0);\n    for(int i =0;i<5;i++)\n    {\n        res.x += float(rbit(s)<<i);\n        res.y += float(rbit(s)<<i);\n    }\n    res.x *= (rbit(s) == 1? -1.0:1.0)/64.0;\n    res.y *= (rbit(s) == 1? -1.0:1.0)/64.0;\n    return res;\n}\n\nfloat hitAt(vec2 uv, float v)\n{\n    vec2 p = hash(floor(v));\n    vec2 np = hash(floor(v+1.0));\n    float m = fract(v);\n    m *= m*(3.0-2.0*m);\n    return length(uv - mix(p,np, m)) < 0.25? 1.0:0.0;\n}\n\nvec2 normal(vec2 uv, float s, float v)\n{\n    vec2 u = vec2(s,0.0);\n    return normalize(hitAt(uv,v)-vec2(hitAt(uv-u.xy,v), hitAt(uv-u.yx,v)));\n}\n\nvec3 scene(vec2 uv)\n{\n    uv = INV_Q*floor(Q*uv);\n    float t = iTime;\n    vec3 col = vec3(0,0.2,0.2);\n    col += hitAt(uv,t)*vec3(0,0,0.7);\n    vec2 n = 0.5+0.5*normal(uv,INV_Q, t);\n    return length(n)>0.5? 0.5*col:col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    fragColor = vec4(scene(uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}