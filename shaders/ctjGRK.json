{
    "Shader": {
        "info": {
            "date": "1673547030",
            "description": "Direction of k vector for waves",
            "flags": 32,
            "hasliked": 0,
            "id": "ctjGRK",
            "likes": 8,
            "name": "Wave flow",
            "published": 3,
            "tags": [
                "wave"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 269
        },
        "renderpass": [
            {
                "code": "vec2 kvec(vec2 U)\n{\n    vec2 dadxy = vec2(A(U + vec2(1.0, 0.0)).x, A(U + vec2(0.0, 1.0)).x) - vec2(A(U - vec2(1.0, 0.0)).x, A(U - vec2(0.0, 1.0)).x);\n    float dadt = A(U).y;\n    \n    vec2 d2adtxy = vec2(A(U + vec2(1.0, 0.0)).y, A(U + vec2(0.0, 1.0)).y) - vec2(A(U - vec2(1.0, 0.0)).y, A(U - vec2(0.0, 1.0)).y);\n    float a = A(U).x;\n    \n    vec2 dir2 = -normalize(d2adtxy*a/(a*a+0.001));\n    vec2 dir1 = normalize(dadxy*dadt/(dadt*dadt+0.00001));\n    \n    return (abs(dadt) < 0.5*abs(a))?dir2:dir1;\n}\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 coloring(vec2 delta)\n{\n    float ang = atan(delta.y, delta.x);\n    float d = length(delta);\n    return hsv2rgb(vec3(ang/(2.0*3.14159), 1., d));\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    //render\n    vec4 t = 10.*A(U); \n    //color = amplitude\n    Q.xyz = vec3(1,0,0)*t.x - vec3(0,0,1)*t.x + vec3(0.,0.5,0.)*abs(t.x);\n    vec2 f = vec2(t.x, t.y*2.0);\n    Q.xyz  = coloring(kvec(U));\n    //Q.xyz = vec3(0.25*dot(f,f));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n//a way to sample pixels shorthand \n#define A(U) texelFetch(iChannel0,ivec2(clamp(U, vec2(0.0), R-1.0)),0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//the time step\n#define dt 0.4\n\n//boundary thickness\n#define l 0.0\n\n\nfloat laplacian(vec2 pos)\n{\n    return A(pos+vec2(0,1)).x + A(pos-vec2(0,1)).x + A(pos+vec2(1,0)).x + A(pos-vec2(1,0)).x - 4.0*A(pos).x;\n}\n\nvec2 kvec(vec2 U)\n{\n    vec2 dadxy = vec2(A(U + vec2(1.0, 0.0)).x, A(U + vec2(0.0, 1.0)).x) - vec2(A(U - vec2(1.0, 0.0)).x, A(U - vec2(0.0, 1.0)).x);\n    float dadt = A(U).y;\n    \n    vec2 d2adtxy = vec2(A(U + vec2(1.0, 0.0)).y, A(U + vec2(0.0, 1.0)).y) - vec2(A(U - vec2(1.0, 0.0)).y, A(U - vec2(0.0, 1.0)).y);\n    float a = A(U).x;\n    \n    vec2 dir2 = -normalize(d2adtxy*a/(a*a+0.001));\n    vec2 dir1 = normalize(dadxy*dadt/(dadt*dadt+0.00001));\n    \n    return (abs(dadt) < 0.5*abs(a))?dir2:dir1;\n}\n\nvec2 newField(vec2 pos)\n{\n    vec2 field = A(pos).xy;\n    float time = float(iFrame) * dt;\n    float force = 0.01*exp(-0.1*dot(pos-0.5*R,pos-0.5*R))*cos(0.5*time);\n    force += 0.01*exp(-0.1*dot(pos-0.4*R,pos-0.4*R))*cos(0.25*time);\n    //force += 0.025*exp(-0.025*dot(pos-0.6*R,pos-0.6*R))*cos(0.125*time);\n    field.y += dt*(laplacian(pos) + force); //velocity += force * time step\n    field.x += dt*field.y; //position += velocity*time step\n    return field;\n}\n\nvec2 newAbsorbed(vec2 pos, vec2 n)\n{\n    float uS = 1.0 * dt / 1.0;\n    vec2 field = A(pos).xy;\n    field.x = A(pos + n).x + (newField(pos + n).x - A(pos).x) * (uS - 1.0) / (uS + 1.0);\n    return field;\n}\n\nvoid mainImage( out vec4 field, in vec2 pos )\n{\n    pos = floor(pos);\n\n    //boundary condition\n    if(pos.x <= l) \n        field.xy = newAbsorbed(pos, vec2(1,0));\n    else if(pos.x >= R.x - 1.0 - l)\n        field.xy = newAbsorbed(pos, vec2(-1,0));\n    else if(pos.y <= l)\n        field.xy = newAbsorbed(pos, vec2(0,1));\n    else if(pos.y >= R.y - 1.0 - l)\n        field.xy = newAbsorbed(pos, vec2(0,-1));\n    else\n        field.xy = newField(pos);\n\n    //initial conditions\n    if (iFrame < 1) {\n        field.xy = vec2(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}