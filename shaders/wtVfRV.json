{
    "Shader": {
        "info": {
            "date": "1614721638",
            "description": "aaaa",
            "flags": 32,
            "hasliked": 0,
            "id": "wtVfRV",
            "likes": 20,
            "name": "Day 439",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "// influenced by baugasm https://www.instagram.com/baugasm/ and some acid graphix\n\n\nvec4 r14(float a){\n    vec2 c = vec2(mod(a,256.),floor(a/256.))/256. + 0./iChannelResolution[2].xy;\n    return texture(iChannel2, c);\n}\n\n\nvec4 vn(float a, float t){\n    return mix(r14(floor(a)),r14(floor(a + 1.)),smoothstep(0.,1.,fract(t)));\n} \n\n\nvoid drawBloomed(vec2 uv, inout vec3 col, vec2 fragCoord){\n        vec2 p = uv;\n        \n        p.y += iTime*0.125;\n        \n        float md = 1.;\n        \n        float id = floor(p.y/md - 0.5);\n        \n        \n        float offs = sin(id*110.2 + pi*0.5);\n        offs = sign(offs)*smoothstep(0.,0.1,abs(offs));\n        p.x += offs*0.5;\n        p.y = pmod(p.y,md);\n        p.y += 0.3;\n        \n        \n        float h1 =  + 0.4*float(sin(id*1.5 + 2.) > 0.);\n        float h2 = 0.4*float(sin(id) < 0.);\n        \n        if(abs(h2-h1)<0.51){\n            float o = sin(id*3. + 1.); \n            h2 += sign(o)*max(abs(o),0.71)*0.6;\n             \n        }\n        \n        float d = sdPolygon( vec2[4](\n            vec2(0.,0),\n            vec2(0.2,0.),\n            vec2(0.2,0.2 + h1),\n            vec2(0.,0.2 + h2)\n        ),p) - 0.02;\n        \n        float blueNoise = texture(iChannel3,p*0.3).x;\n        \n        vec4 blurred = texture(iChannel2,fragCoord/iResolution.xy);\n         \n         \n        blurred = clamp(blurred,0.1,1.);\n        //blurred = mix(blurred, col.xyzz, smoothstep(0.5,0.6,blueNoise*1.05));\n        blurred +=  smoothstep(0.3,0.69,blueNoise)*0.03;\n        \n        col = mix(col, blurred.xyz, smoothstep(dFdx(p.x),0.,d));\n        col = mix(col, blurred.xyz*2.*(1. + sin(p.x*20. + p.y*10. + sin(p.y*5.) + iTime)), smoothstep(dFdx(p.x)*1.5,0.,abs(d)));\n            \n            \n\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    {\n        vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n        vec3 col = vec3(1.);\n\n        col = texture(iChannel0,fragCoord/iResolution.xy,0.).xyz;\n\n\n        vec4 blurred = texture(iChannel2,fragCoord/iResolution.xy);\n        vec3 bloom = smoothstep(0.6,2.,length(blurred.xyz))*blurred.xyz;\n        col += bloom*0.2;\n\n        drawBloomed(uv, col, fragCoord);\n        //drawBloomed(uv + vec2(0,30.), col, fragCoord);\n\n     \n    \n    \n        fragColor = col.xyzz;\n    }\n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    //fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    \n    fragColor.xyz = pow(fragColor.xyz, vec3(1.1,1.,0.95));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.8;\n    //fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 + n*0.05));\n    \n    //col = pow(col,vec3(0.454545));\n    \n    \n    //fragColor = texture(iChannel2,fragCoord/iResolution.xy);\n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.08;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.15;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdBox(vec2 p, vec2 s){\n    p = abs(p) - s;\n    return max(p.y,p.x);\n}\n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\n\n\n\n#define pi acos(-1.)\nfloat r11(float i){ return fract(sin(i*15.126)*115.6);}\n\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), smoothstep(0.,1.,fract(i)));}\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\nfloat sdPolygon( in vec2[4] v, in vec2 p )\n{\n    int N = 4;\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=N-1; i<N; j=i, i++ )\n    {\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n        bvec3 c = bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);\n        if( all(c) || all(not(c)) ) s*=-1.0;  \n    }\n    return s*sqrt(d);\n}\n\n#define pmod(p,a) mod(p - 0.5*a,a) - 0.5*a\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + e))\n\nmat3 getOrthogonalBasis(vec3 direction){\n    direction = normalize(direction);\n    vec3 right = normalize(cross(vec3(0,1,0),direction));\n    vec3 up = normalize(cross(direction, right));\n    return mat3(right,up,direction);\n}\nfloat cyclicNoise(vec3 p, bool turbulent, float time){\n    float noise = 0.;\n    \n    p.yz *= rot(2.5);\n    p.xz *= rot(-2.5);\n    float amp = 2.5;\n    float gain = 0.7 ;\n    const float lacunarity = 1.2;\n    const int octaves = 4;\n    \n     float warp = .1 + sin(time*0.5)*0.05;\n    float warpTrk = 1.5 ;\n    const float warpTrkGain = 1.1;\n    \n    vec3 seed = vec3(-1,-2.,0.5);\n    mat3 rotMatrix = getOrthogonalBasis(seed);\n    \n    for(int i = 0; i < octaves; i++){\n        \n        p -= sin(p.zxy*warpTrk + vec3(0,-time*0.2,0) - 0.01*warpTrk)*warp; \n        noise += sin(dot(cos(p), sin(p.zxy + vec3(0,time*0.1,0))))*amp;\n    \n        p *= rotMatrix;\n        p *= lacunarity;\n        \n        warpTrk *= warpTrkGain;\n        amp *= gain;\n    }\n    \n    if(turbulent){\n        return 1. - abs(noise)*0.5;\n    \n    }{\n        return (noise*0.25 + 0.5);\n\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec4 r14(float a){\n    vec2 c = vec2(mod(a,256.),floor(a/256.))/256. + 0./iChannelResolution[2].xy;\n    return texture(iChannel2, c);\n}\n\n\nvec4 vn(float a, float t){\n    return mix(r14(floor(a)),r14(floor(a + 1.)),smoothstep(0.,1.,fract(t)));\n} \n\n\nvoid drawBlobs(vec2 uv, inout vec3 col, float sz, float szoffs, float fallspeed, bool outline){\n        vec3 p = vec3(uv,1);\n        \n        p.y += iTime*0.34*fallspeed;\n        \n        p.yz *= rot(0.6);\n        p.xz *= rot(2.);\n        \n        vec3 op = p;\n        \n        float md = sz;\n        \n        vec3 id = floor(p/md - 0.5);\n        p = pmod(p,md);\n        \n        \n        float d = length(p) - 0.0 - valueNoise(id.x + id.y + id.z + iTime*(0.5 + sin(id.x)) + sin(id.x + iTime + cos(id.z*10.)*5.),1.)*sz*0.2;\n\n        vec3 c = pal(0.5,0.5*vec3(1,-1,1),1.,vec3(1,3,4),1. + id.x*20.  - p.x*20. + 10.*length(p)*smoothstep(0.,0.1,length(p)));\n        \n        d -= cyclicNoise(op*15., false, iTime*2.)*0.05*sz*(1. + szoffs);\n        \n        if(sin(id.x*20. + id.y*50. + sin(id.z*10. + id.x) + cos(id.z*10.)*2.) < -0.5)\n            d = 10e4;\n        if(!outline){\n            if(d < 0.01){\n                col = mix(col,c, smoothstep(fwidth(d)*1.,0.,d));\n                //col = mix(col,vec3(0), smoothstep(fwidth(d)*1.,0.,abs(d) - 0.001));\n    \n            }\n        } else{\n        \n            \n            //d = max(abs(p.x) - 0.1, abs(p.y) - 0.1);\n            col = mix(col,mix(c,vec3(0),1.), smoothstep(fwidth(d)*1.,0.,abs(d)));\n        \n        }\n        \n}\n\nfloat text(vec2 p, float[8] chars, float spacing, float s, bool isAbs, float absWidth) {\n\tp *= s;\n    \n    p.x *= 1. - spacing;\n    vec2 id = floor(p*8.*2.);\n    p = mod(p,1./16.);\n    p.x = p.x/(1. - spacing) + 0.1375*0.;\n    float char = chars[int(id.x)];\n    //char += 112. ;\n    float t;\n    if(abs(id.y) < 1. && id.x >= 0. && id.x < 8.  && char < 200.){\n        vec4 letter = texture(iChannel3,p + vec2(mod(char,16.),-floor(char/16.) )/16.);\n        t = letter.w - 0.5;\n        t /= s*10.1;\n    } else {\n        t = 10e5;\n    \n\t }\n    if (isAbs)\n        t = abs(t) - absWidth;\n    return t;\n}\n     \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(1.);\n\n    \n\n    \n    {\n        vec2 p = uv;\n        \n        p.y += iTime*0.19;\n        //p *= rot(0.25*pi);\n        \n        float na = cyclicNoise(vec3(p*5.,iTime), false, iTime*0.);\n        p += na*0.04;\n        vec2 op = p;\n        float md = .15;\n        \n        p = pmod(p,md);\n        \n        \n        float d = min(abs(p.x),abs(p.y));\n\n        \n        vec3 c = pal(0.5,0.5*vec3(1,1,1),1.,vec3(1,3,4),1.  + 10.*length(op)*smoothstep(0.,0.1,length(op)));\n        \n        \n        float n = cyclicNoise(vec3(op,1. + iTime*0.1)*10., false, iTime*0.);\n        \n        n = na;\n        c = mix(c,vec3(0),1.);\n        \n        c = mix(col,c,smoothstep(0.1,1.,abs(n))*0.2 );\n        \n        col = mix(col,c, smoothstep(fwidth(op.x)*1.5,0.,d + 0.001));\n\n        //col = mix(col,vec3(1), smoothstep(dFdx(p.x),0.,abs(d)));\n\n\n    }\n    \n    drawBlobs(uv, col, 0.125,0. ,0.75, false);\n    \n    drawBlobs(uv, col, 0.4, 1.9, 1., false);\n\n    {\n        vec2 p = uv;\n        \n        p.y += iTime*0.2;\n        \n        float md = 2.;\n        \n        float id = floor(p.y/md - 0.5);\n        \n        p.x += sin(id*pi + pi*0.5)*0.8;\n        p.y = pmod(p.y,md);\n        \n        for(float i = 0.; i < 15.; i++ ){\n            \n            vec2 s = vec2(1.-i/25.)*(0.5 + sin(id)*0.2);\n            \n            float d = sdBox(p*rot(i*(0.1 + sin(id*2.1)*0.3 ) + sin(id + iTime*i/15. )),s);\n            \n            \n            col = mix(col,vec3(1.), smoothstep(dFdx(p.x),0.,d));\n            \n            if(abs(p.y) <md*0.49)\n                col = mix(col,vec3(0), smoothstep(fwidth(d),0.,abs(d) - 0.001*0.));\n            \n        }\n\n    }  \n     \n\n    {\n        \n        vec2 p = uv;\n        p.y += iTime*0.2;\n        \n        float id = floor(p.y/2.);\n        p.y = pmod(p.y,2.);\n        \n        //p.x += 0.5;\n        \n        //p.y -= 0.4;\n        //p *= rot(sin(id + 4.));\n        for(float i = 0.; i < 35.; i++){\n            p.y += 0.01;\n            vec2 lp = p;\n            \n            vec2 offsSz = vec2(8./16.,0.5*8./16.)*1.;\n            \n            \n            lp.x += sin(i/45. + id + iTime)*0.4;\n            lp.x += 0.5;\n            lp -= offsSz*2.5*vec2(0,1);\n            \n            \n            lp -= offsSz*1.;\n            lp *= rot(0.5*sin(id*20. + 4. + iTime + i/25.));\n            \n            lp += offsSz*1.;\n            \n            float t = text( lp, float[8](135.,130.,121.,119.,120.,132.,117.,130.), 0., 0.5, true, 0.);\n            \n            if(i == 0.)\n                t = text( lp, float[8](135.,130.,121.,119.,120.,132.,117.,130.), 0., 0.5, false, 0.);\n                \n            col = mix(col,vec3(0),smoothstep(dFdx(uv.x),0.,t));\n            \n        }\n\n    }\n    \n    \n    col = 1. - col;\n    \n    \n    \n    col = pow(col,vec3(0.454545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n        fragColor *= 0.;\n        float iters = 23.;\n        for(float i = 0.; i < iters*iters; i++){\n            fragColor += texture(iChannel0,(fragCoord + vec2(mod(i,iters),floor(i/iters))- 0.5*iters )/iResolution.xy );\n        }\n        fragColor /= iters*iters;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n        fragColor *= 0.;\n        float iters = 23.;\n        for(float i = 0.; i < iters*iters; i++){\n            fragColor += texture(iChannel0,(fragCoord + vec2(mod(i,iters),floor(i/iters)) - 0.5*iters )/iResolution.xy );\n        }\n        fragColor /= iters*iters;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(1.);\n\n    col = texture(iChannel0,fragCoord/iResolution.xy,0.).xyz;\n    \n    \n    vec4 blurred = texture(iChannel1,fragCoord/iResolution.xy);\n    vec3 bloom = smoothstep(0.6,2.,length(blurred.xyz))*blurred.xyz;\n    col += bloom*0.2;\n        \n    //drawBloomed(uv, col, fragCoord);\n    //drawBloomed(uv + vec2(0,30.), col, fragCoord);\n\n     \n    \n    \n    fragColor = col.xyzz;\n    //fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}