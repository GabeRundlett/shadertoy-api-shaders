{
    "Shader": {
        "info": {
            "date": "1611881869",
            "description": "Distance estimator for bernoulli lemniscate. Useful for propellers and things.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tKyD3",
            "likes": 3,
            "name": "Bernoulli Lemniscate DE",
            "published": 3,
            "tags": [
                "2d",
                "distanceestimation",
                "bernoulli",
                "lemniscate"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "// Desmos graph: https://www.desmos.com/calculator/mbr8h5vo9q\nfloat BernoulliDE(in vec2 p, in vec2 scale) {\n    vec2 ps = p / scale;\n\n    float l = ps.x - 1.0;\n    float r = ps.x + 1.0;\n    float ys = ps.y * ps.y;\n\n    float bernoulli = sqrt(l * l + ys) * sqrt(r * r + ys) - 1.0;\n\n    vec2 pSqrS = p / (scale * scale);\n    float sInvX = 1.0 / scale.x;\n    float ls = pSqrS.x - sInvX;\n    float rs = pSqrS.x + sInvX;\n\n    float psSqrY = ps.y * ps.y;\n    float ld = sqrt(l * l + psSqrY);\n    float rd = sqrt(r * r + psSqrY);\n\n    float pdx = (ls * rd) / ld + (rs * ld) / rd;\n    float pdy = (rd / ld + ld / rd) * pSqrS.y;\n    float bernoulliGrad = sqrt(pdx * pdx + pdy * pdy);\n\n    return bernoulli / bernoulliGrad;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n    float unit = 5.0 / iResolution.y;\n\n    vec2 uv = (fragCoord - screenCenter) / screenCenter.y;\n    vec3 color = vec3(0.0);\n\n    vec2 size = vec2(cos(iTime), sin(iTime));\n\n    float shape = BernoulliDE(uv, size);\n    color.g = smoothstep(unit, 0.0, abs(shape));\n    color.rb = shape < 0.0 ? vec2(0.0, sin(shape * 200.0)) : vec2(sin(shape * 200.0), 0.0);\n\n    vec2 ro = (iMouse.xy - screenCenter) / screenCenter.y;\n    vec2 rd = -normalize(ro);\n    float t = 0.0;\n    for (int i=0; i < 50; i++) {\n        vec2 p = ro + rd * t;\n        float d = BernoulliDE(p, size);\n        color += smoothstep(unit, 0.0, abs(length(uv - p) - abs(d)));\n        if (abs(d) < 0.001 || t > 10.0) {\n            break;\n        }\n\n        t += d;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}