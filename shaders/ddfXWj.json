{
    "Shader": {
        "info": {
            "date": "1669562002",
            "description": "This is the best thing I've ever made. Click pause and reset a few times if the audio isn't working.\n\nPls don't read the code, it's bad, and ty to the forked duck.",
            "flags": 64,
            "hasliked": 0,
            "id": "ddfXWj",
            "likes": 22,
            "name": "Time Traveller",
            "published": 3,
            "tags": [
                "reactive",
                "audio",
                "visual"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "// credit: https://www.shadertoy.com/view/4tGXzt\n\nconst float rn = 64.0;\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\n// i dont understand this function at all (from iq, ty!)\nfloat arc(in vec2 p, in vec2 sc, in float ra, float rb){\n    p.x = abs(p.x);\n    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                  abs(length(p)-ra)) - rb;\n}\n\nfloat getFreq(float x) {\n\treturn texture(iChannel0, vec2(floor(x * rn + 1.) / rn, 0)).x;\n}\n\n\nfloat getFreq_smooth(float x) {\n\tfloat index = floor(x * rn) / rn;\n    float next = floor(x * rn + 1.0) / rn;\n\treturn mix(getFreq(index), getFreq(next), smoothstep(0.0, 1.0, fract(x * rn)));\n}\n\nfloat getFreq_blend(float x) {\n    return mix(getFreq(x), getFreq_smooth(x), 0.5);\n}\n\n#define pi 3.14159\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 ouv = uv;\n    \n    float freq = getFreq_smooth(abs(uv.x));\n\tvec3 col = vec3(freq);\n\n    float v = getFreq_smooth(0.);\n    uv.x = abs(uv.x);\n    uv.y += 0.15;\n    vec2 o = vec2(0.05 + 0.2 * v * v, 0.25);\n    float d = length(uv - o);\n    float t = -pi/4. + v * pi/2. + pi / 8. * cos(2. * pi * v);\n    float d2 = arc(-uv + vec2(0,0.2*v), \n                   vec2(cos(t), sin(t)),\n                   0.25* v * v, 0.);\n\n    float thk = 0.01; //0.005 + 0.01 * v;\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, abs(-d + 0.1 * v * v) - thk);\n    float s2 = smoothstep(-k ,k, abs(-d2 + 0.1 * pow(v,2.5)) - thk);\n    float d3 = length(uv - o);\n\n    uv.y -= 0.15;\n    float d4 = length(uv);\n    float s3 = smoothstep(-k, k, -d3 + 0.05 * v * v);\n    float s4 = smoothstep(-k, k, abs(-d4 + 0.2 + 0.2 * v) - thk);\n\n    col = vec3((s * s2-s3) * s4);\n    float r2 = .2 + .2 * v;\n    vec3 col2 = col * (1.-pow(1.-v,2.)) * \n               (step(d4,r2) + exp(-(20. + 20. * (1.-v)) * abs(d4 - thk - r2)));\n    float tnh = tanh(0.25 * max(0., iTime - 4.));\n    //if (iTime > 7. * pi) \n    //    tnh = pow(0.5 - 0.5 * thc(5., 1. * iTime), 40.);\n    // Uncomment this if you want to lose your eyesight\n    // (STROBE WARNING)\n    //tnh *= 0.5 + 0.5 * thc(4., 30. * iTime + 0. * pi * v);\n    \n    col = mix(col, col2, tnh);\n    //col = mix(col, 0.5 + vec3(ouv.x, ouv.y, 0.), 0.1);\n    col = mix(col, col * vec3(1,v,1.-v) * (0.85 + uv.y), tnh);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30608,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/knowermusic/time-traveler-2?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}