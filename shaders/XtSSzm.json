{
    "Shader": {
        "info": {
            "date": "1442335988",
            "description": "based on my [url=https://www.shadertoy.com/view/MtsSDs]Ray Marching Experiment nÂ°32[/url] with the line 4 uncommented\nnot so beautifull as expected :)\nmouse axis for controling the cam",
            "flags": 0,
            "hasliked": 0,
            "id": "XtSSzm",
            "likes": 7,
            "name": "Sound Experiment 2",
            "published": 3,
            "tags": [
                "sound",
                "experiment",
                "2"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1749
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define INV_MODE\n\nvec4 freqs;\n\nfloat dstepf = 0.0;\n    \nconst vec2 RMPrec = vec2(.5, 0.001); \nconst vec3 DPrec = vec3(0.005, 12., 1e-6); \n\n///////////////////////////////////\n#define pattern sin(1.5)\nvec3 magicSplat(vec2 uv, float t)\n{\n\tfloat a = 0.;\n\tif (uv.x >= 0.) a = atan(uv.x, uv.y) * .275;\n    if (uv.x < 0.) a =  3.14159 - atan(-uv.x, -uv.y) * 1.66;\n    \n\tvec3 p = vec3(uv,a);\n    \n    // from dgreensp => https://www.shadertoy.com/view/4ljGDd\n    p = 1. - abs(1. - mod(p, 2.));\n    float lL = length(p), nL = lL, tot = 0., c = pattern;\n    for (int i=0; i < 12; i++) \n\t{\n\t\tp = abs(p)/(lL*lL) - c;\n\t\tnL = length(p);\n\t\ttot += abs(nL-lL);\n\t\tlL = nL;\n    }\n    \n\tfloat fc = tot + 1.;\n\tfc = 1.-smoothstep(fc, fc+0.001, t/dot(uv,uv));\n\n\tvec3 col;\n    vec3 tex = vec3(1.); \n\tvec3 splash = vec3(1.-fc)*vec3(.42, .02, .03);\n   \n    col = mix(splash, tex, (splash.r==0.?0.:1.));\n\n    return col;\n}\n\n///////////////////////////////////\nfloat coque(vec3 p, float r, float disp, float ratio, float thick)\n{ \n\tfloat sp = length(p) - r;\n    return max(max(-sp - thick, sp), \n    \t\tsp + dot(magicSplat(p.xz, ratio),vec3(disp)));\n}\n\nvec2 map(vec3 p)\n{\n    vec2 res =vec2(0.);\n    vec2 uv = p.xz;\n    \n    dstepf += 0.005;\n\n    vec4 rad = vec4(3.,2.8,2.6,2.4);\n    vec4 sp;\n   \tsp.x = coque(p, rad.x, 0.05, freqs.x * 20., 0.02);\n    sp.y = coque(p, rad.y, 0.05, freqs.y * 15., 0.02);\n    sp.z = coque(p, rad.z, 0.05, freqs.z * 11., 0.02);\n    sp.w = coque(p, rad.w, 0.05, freqs.w * 7., 0.02);\n                   \n    res = vec2(sp.x, 1.);\n    if (sp.y < res.x)\n        res = vec2(sp.y, 2.);\n    if (sp.z < res.x)\n        res = vec2(sp.z, 3.);\n    if (sp.w < res.x)\n        res = vec2(sp.w, 4.);\n\n    return res;\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n    map(pos+e.xyy).x - map(pos-e.xyy).x,\n    map(pos+e.yxy).x - map(pos-e.yxy).x,\n    map(pos+e.yyx).x - map(pos-e.yyx).x );\n    return normalize(n);\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u =  normalize(cross(cu, rov));\n    vec3 v =  normalize(cross(rov, u));\n    vec3 rd = normalize(rov + u*uv.x + v*uv.y);\n    return rd;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    // from CubeScape : https://www.shadertoy.com/view/Msl3Rr\n    freqs.x = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs.y = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs.z = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs.w = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n    freqs = normalize(freqs);\n    \n    vec2 si = iResolution.xy;\n   \tfloat t = iTime;\n    f = vec4(0.);\n    float ca = t*.2; // angle z\n    float ce = 2.; // elevation\n    float cd = 3.; // distance to origin axis\n   \t\n    if ( iMouse.z>0.) cd = iMouse.x/iResolution.x * 10. - 5.; // mouse x axis \n    if ( iMouse.z>0.) ce = iMouse.y/iResolution.y * 10. - 5.; // mouse y axis \n    \n    vec3 cu=vec3(0,1,0);//Change camere up vector here\n    vec3 cv=vec3(0,0,0); //Change camere view here\n    vec2 uv = (g+g-si)/min(si.x, si.y);\n    vec3 ro = vec3(sin(ca)*cd, ce+1., cos(ca)*cd); //\n    vec3 rd = cam(uv, ro, cu, cv);\n    \n    vec3 d = vec3(0.);\n    vec3 p = ro+rd*d.x;\n    vec2 s = vec2(DPrec.y);\n    for(int i=0;i<200;i++)\n    {      \n\t\tif(s.x<DPrec.x||s.x>DPrec.y) break;\n        s = map(p);\n        s.x*=(s.x>DPrec.x?RMPrec.x:RMPrec.y);\n        d.y = d.x;\n        d.x += s.x;\n        p = ro+rd*d.x;\n   \t}\n\n    f += pow(0.6,15.);\n    \n    if (d.x<DPrec.y)\n    {\n    \tfloat nPrec = 0.001;\n        vec3 n = nor(p, nPrec);\n        vec3 ray = reflect(rd, n);\n        f += texture(iChannel0, ray) * 0.6; \n        \n        if (s.y < 1.5) f.rgb = mix(f.rgb, vec3(1,0,0), .5);\n        else if (s.y < 2.5) f.rgb = mix(f.rgb, vec3(0,1,0), .5);\n        else if (s.y < 3.5) f.rgb = mix(f.rgb, vec3(0,0,1), .5);\n        else if (s.y < 4.5) f.rgb = mix(f.rgb, vec3(1,0,1), .5);\n            \n        //f.rgb = mix( f.rgb, map(p).yzw,0.5);  \n   \t}\n    else\n    {\n    \tf = texture(iChannel0, rd);\n    }\n    \n    f += dstepf;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}