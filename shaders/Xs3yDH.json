{
    "Shader": {
        "info": {
            "date": "1518583551",
            "description": "Testing music integration into one of my previous shaders.\nOriginal https://www.shadertoy.com/view/llSSDV",
            "flags": 0,
            "hasliked": 0,
            "id": "Xs3yDH",
            "likes": 37,
            "name": "Fractal music",
            "published": 3,
            "tags": [
                "fractal",
                "music"
            ],
            "usePreview": 0,
            "username": "Aj_",
            "viewed": 14297
        },
        "renderpass": [
            {
                "code": "const float iter    = 64.,\n            divAng  = 24. * 6.2831853/360.,\n            circRad = .23, \n    \t    rat     = .045/circRad;\n\nfloat nearestMult(float v, float of) {\n\tfloat m = mod(v, of);\n\tv -= m * sign(of/2. - m);\n\treturn v - mod(v,of);\n}\n\n//Color palette function taken from iq's shader @ https://www.shadertoy.com/view/ll2GD3\n#define  pal(t) ( .5 + .5* cos( 6.283*( t + vec4(0,1,2,0)/3.) ) )\n\n\n\n\nvoid mainImage( out vec4 o, vec2 uv ) {\n    vec2 R = iResolution.xy,\n         center = vec2(0.), p;\n    float M = max(R.x, R.y);\n    uv = ( uv -.5*R) / M / .7;\n    float l = length(uv);\n    float sl = texture(iChannel0, vec2(0.)).x ;\n    float sl2 = texture(iChannel0, vec2(0.25)).x * .5 ;\n    float sm = texture(iChannel0, vec2(0.5)).x * .2 ;\n    float sm2 = texture(iChannel0, vec2(0.75)).x * .2 ;\n    float sh = texture(iChannel0, vec2(1.)).x * .2;\n    float st = (sl+sl2+sm+sm2+sh);// / 5.;\n\tfloat time = iTime,\n          sCircRad = circRad*rat, \n          ds = (2.+ 1.4*((st)) /*abs(sin(time/10.))*/) * rat,\n          ang, dist;\n    \n \t\n    o = vec4(0.0);\n\tfor(float i=0.;i< iter;i+=1.) {\n        p = uv-center;\n\t\tang =  atan(p.y,p.x);\t\t\n        ang = nearestMult(ang, divAng);     \n\t\tcenter += sCircRad/rat* vec2(cos(ang), sin(ang));\n\t\tdist = distance( center, uv);\n\n\t\tif( dist <=sCircRad )\n             o += 15.*dist * pal( fract(dist/sCircRad + st+l/*+ abs(sin(time/2.))*/) );\n   \n  \t\tsCircRad *= ds;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}