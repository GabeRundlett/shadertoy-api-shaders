{
    "Shader": {
        "info": {
            "date": "1575119326",
            "description": "学习1",
            "flags": 0,
            "hasliked": 0,
            "id": "3dySDc",
            "likes": 1,
            "name": "Study Ray Marching",
            "published": 3,
            "tags": [
                "studyraymarching"
            ],
            "usePreview": 0,
            "username": "familyshadertoy000",
            "viewed": 1381
        },
        "renderpass": [
            {
                "code": "// 屏幕左下角UV(0,0) 右上角UV(1,1) \n// 三维坐标：左手坐标系,X轴指向屏幕右侧，Y轴指向屏幕上面，Z轴垂直于屏幕向里\n\n// 最大步数\n// 最大距离\n// 最小步进的距离\n#define Max_Steps 100\n#define Max_Dist 100.\n#define Surf_Dist 0.01\n\n// \nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0,1,6,1);// 球的位置(s.xyz)和半径（s.w）\n    float sphereDist = length(p-s.xyz)-s.w;// P点到球面的距离\n    float planeDist  = p.y;// P点到平面的距离\n    \n    float d = min(sphereDist,planeDist);\n    return d;\n}\n\n// \nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float d0 = 0.;\n    for(int i = 0; i < Max_Steps; i++)\n    {\n        vec3 p = ro + rd*d0;\n        float ds = GetDist(p);\n        d0+=ds;\n        if(d0>Max_Dist || ds < Surf_Dist) \n            break;           \n    }\n                     \n    return d0;     \n}\n\n// 顶点的法线\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(0.01,0);\n    \n    vec3 n = d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\n// 计算灯光，点光源\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime))*2.0;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    \n    float d = RayMarch(p + n*Surf_Dist*2.0,l);\n    if(d<length(lightPos-p))dif*=0.1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    // Camera：ro 位置， rd 方向\n    vec3 ro = vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    \n    float d = RayMarch(ro,rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    \n    \n    //d/=6.0;\n    col = vec3(dif);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}