{
    "Shader": {
        "info": {
            "date": "1705533133",
            "description": "A fractal pattern with violin music.",
            "flags": 8,
            "hasliked": 0,
            "id": "MflSRX",
            "likes": 12,
            "name": "Violin synthesizer",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 488
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    float scale = 1.5;\n    vec3 col = vec3(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        uv =\n            triangle_wave(uv-.5)-triangle_wave(uv.yx)\n            \n            //another nice pattern\n            //(1./2.+triangle_wave(uv-.5)-triangle_wave(uv.yx)/1.5)\n        ;\n        vec2 uv1 =\n            //uv\n            triangle_wave((uv-.5)/1.5)-triangle_wave((uv.yx)/1.5)\n            //triangle_wave((uv-mod(uv,.5)/3.-.5))-triangle_wave((uv.yx)/1.5)\n        ;\n        \n        c1 =\n            max(abs(max(uv1.y,uv1.x)),(c1))\n            //max(abs(max(uv1.y,uv1.x)),max(uv.y,max(uv.x,c1)))\n            //max(abs(max(-uv1.y,uv1.x)),(c1))\n            //max(abs(max(uv.x,uv1.x)),(c1))\n            //max(abs(max(uv1.y,uv1.x)),1.-(c1))\n        ;\n        c1 = abs(2.*c1-1.)\n        ;\n        col.x =\n            max(c1,col.x)\n\n            //blue and green\n            //max(length(uv-c1)/3.,col.x)\n           \n            //purple\n            //2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n            //black and white\n            //col.x\n        ;\n        //if(uv.y<.25)\n        col =\n            abs(col-1.+c1*col.x)\n            \n            //more colorful\n            //1.-abs(col.yzx+c1*col.x)\n            \n            //1.-abs(col-c1*col.x)\n            //c1*col.x-col\n        ;\n        //if(uv.y<.25)\n        col1 =\n            abs(col1*c1-col-1.).yzx\n            //abs(col1*c1/2.-col).yzx*2.\n        ;\n        //uv -= fract(uv)*2.;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 64.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/16.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/mtSBzV\n\nfloat fmod(float a, float b,float c){\n    float\n    t1 =\n        mod(floor(b/2.),c)\n        //mod(floor(b/2.)*floor(b/4.),2.)\n    ,\n\n    a1 =\n        floor(a+t1)\n        //floor(a-t1)\n        //floor(-a+t1)\n    ,\n    a0 =\n        a1/2.-(mod(floor(a1/4.),4.)-mod(floor(a1/2.),2.))*2.\n        \n        //a more complex rhythm\n        //a1/2.-(mod(floor(a1/4.),4.)-mod(floor(a/2.),2.))*2.\n        \n        //a1/2.-(mod(a1/4.,4.)-mod(a1/4.,2.))*4.\n    ,a2 = mod(a0,3.),\n    a3 =\n        mod(a0,4.)\n    ;\n    return\n        mod(a1-a2-a3,b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod(a,b,2.)\n        //min(fmod(a/2.,b,2.),fmod(a,b,4.))\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    return (1.+fmod(time/4.,2.))/(1.+fmod(time/2.,2.));\n}\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 sitar3(vec2 a, vec2 nb){\n    return a/16./4.*abs((.5*a*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar4(vec2 a, vec2 nb){\n    return (1.+a)/16./8.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a*a/16./4.*abs((abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a/16./4.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 oud1(vec2 a, vec2 nb){\n    return a*a/16./2.*(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.))))\n    ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration,float s1,float attack){\n    \n  float \n  tempo1 =\n      prime_rhythm(time/2.)*prime_rhythm(time)*2.\n  ,\n  tempo2 =\n      prime_rhythm(time+7.)\n      //prime_rhythm(time+7.*floor(time/8.))\n  ,t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 =\n       fmod(t4,2.)\n  ,\n  t5 =\n      t*2./tempo2\n  ,\n  t3 =\n      (1.+fmod(t5,2.))\n  ,\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6,s1/2.)/2.),\n  m2 =\n      1. + fmod(t/t3/2.,s1/2.)\n  ,note=(\n      m3+m2-t1*4.\n      //m3+m2-t1*4.-fmod(t,2.)*4.\n  )/7.,f1=fract1(t/tempo2);\n  vec2 a=\n      -vec2((log(attack+f1/4./duration)))\n  ,\n  nb =\n      t*vec2(pow(2.,note+scale),pow(2.,note+scale))*tempo1\n\n  ;\n  return\n      sitar3(a,nb)+sitar3(a/2.,nb/2.)+sitar3(a/4.,nb/4.)\n      //sitar3(a,nb)-sitar3(a,nb/2.)/2.-sitar3(a,nb/4.)/4.\n      //2.*sitar5(a,nb)\n      //2.*oud1(a,nb)\n  ; \n}\n\nvec2 violin(int a,float b,float c,float attack){\n    return\n        //sounds like violin (using sitar3)\n        (mainSound1(a,b,5.+c,1./2.,8.,attack)-mainSound1(a,b,5.+c,1./4.,8.,attack))\n    \n        //sounds like sitar (using sitar3 or sitar5)\n        //(mainSound1(a,b,4.+c,1.,8.,attack)-mainSound1(a,b,5.+c,1./2.,8.,attack))\n\n    ;\n}\n\nvec2 sitar(int a,float b,float c,float attack){\n    return\n        //sounds like violin (using sitar3)\n        //(mainSound1(a,b,5.+c,1./2.,8.,attack)-mainSound1(a,b,5.+c,1./4.,8.,attack))\n        //-.5*(mainSound1(a,b,4.+c,1./2.,8.,attack)-mainSound1(a,b,4.+c,1./4.,8.,attack))\n    \n        //sounds like sitar (using sitar3 or sitar5)\n        (mainSound1(a,b,4.+c,1.,8.,attack)-2.*mainSound1(a,b,5.+c,1./2.,8.,attack))\n\n    ;\n}\n\nvec2 mainSound(int a,float b){\n    return\n        //sounds like violin (using sitar3)\n        \n        32.*violin(a,b*2.,0.,1./8.)\n        \n        //sounds like sitar (using sitar5 or sitar6)\n        //sitar(a,b*2.,1.-4./7.,1./8.)*8.\n        \n        //violin(a,b*2.,0.,1./64.*2.)\n        \n        //sounds like gamelan (using gamelan2)\n        //violin(a,b*2.,0.,1./64.*2.)\n\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}