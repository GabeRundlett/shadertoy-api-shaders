{
    "Shader": {
        "info": {
            "date": "1687207142",
            "description": "I think it looks a little cool :)\nFor other newbies: I basically scale the uv grid, and scroll noise over a function that, and fill up the edges of the box based on value of noise texture as a percentage of how 'full' the box is.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdXcW2",
            "likes": 2,
            "name": "Spirit Colony",
            "published": 3,
            "tags": [
                "uv",
                "box",
                "matrix"
            ],
            "usePreview": 0,
            "username": "johnCavatelli",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define GHOST_MODE\n\nfloat random (in vec2 st) {// 2D Random\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nmat2 rot(float a){//counterCW rotation matrix\n    float ca= cos(a);\n    float sa= sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;//scale UV\n    vec2 ogUV = uv;//keep origional for noise\n    uv *= 8.;//multiply UV space\n    uv *= rot(iTime*0.01);//rotate it\n    uv = fract(uv);//many tiny boxes\n    uv = uv*2. - 1.;//make space map from -1 to 1 \n    \n    vec3 col;\n    #ifdef GHOST_MODE\n    col = vec3(smoothstep(uv.x,uv.x-0.05,-0.95));//?\n    #else\n    col = vec3(smoothstep(0.9,0.95, uv.x));//only keep edges\n    col += vec3(smoothstep(0.9,0.95, uv.y));\n    col += vec3(step(uv.x,-.95));\n    col += vec3(step(uv.y,-.95));\n    #endif\n    \n    \n    //use 2 layers of scrolling noise, giving what percent full each box should be\n    float perc = noise(-2.5*iTime + (ogUV*10.));\n    perc *= noise(2.*iTime + (ogUV*3.));\n    perc *= 1.8;\n    perc = (2.*PI * perc) - PI;//scale from -pi to pi\n    \n    //if the angle of the pixel to the origin is greater than the percent full, then color it black\n    if(atan(uv.y,uv.x) > perc){col = vec3(0.);}\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}