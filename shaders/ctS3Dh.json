{
    "Shader": {
        "info": {
            "date": "1673197942",
            "description": "Mur's boundary conditions\nhttp://www.cavelab.cs.tsukuba.ac.jp/nsfdtd/theory/beginner_04.html",
            "flags": 32,
            "hasliked": 0,
            "id": "ctS3Dh",
            "likes": 23,
            "name": "Wave equation absorbing boundary",
            "published": 3,
            "tags": [
                "wave"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 473
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 Q, in vec2 U )\n{\n    //render\n    vec4 t = 10.*A(U); \n    //color = amplitude\n    Q.xyz = vec3(1,0,0)*t.x - vec3(0,0,1)*t.x + vec3(0.,0.5,0.)*abs(t.x);\n    vec2 f = vec2(t.x, t.y*2.0);\n    Q.xyz = vec3(0.25*dot(f,f));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n//a way to sample pixels shorthand \n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//the time step\n#define dt 0.4\n\n//boundary thickness\n#define l 1.0\n\n\nfloat laplacian(vec2 pos)\n{\n    return A(pos+vec2(0,1)).x + A(pos-vec2(0,1)).x + A(pos+vec2(1,0)).x + A(pos-vec2(1,0)).x - 4.0*A(pos).x;\n}\n\nvec2 newField(vec2 pos)\n{\n    vec2 field = A(pos).xy;\n    float time = float(iFrame) * dt;\n    float force = 0.1*exp(-0.1*dot(pos-0.5*R,pos-0.5*R))*cos(0.5*time);\n    force += 0.05*exp(-0.1*dot(pos-0.4*R,pos-0.4*R))*cos(0.25*time);\n    force += 0.025*exp(-0.1*dot(pos-0.6*R,pos-0.6*R))*cos(0.125*time);\n    field.y += dt*(laplacian(pos) + force); //velocity += force * time step\n    field.x += dt*field.y; //position += velocity*time step\n    return field;\n}\n\nvec2 newAbsorbed(vec2 pos, vec2 n)\n{\n    float uS = 1.0 * dt / 1.0;\n    vec2 field = A(pos).xy;\n    field.x = A(pos + n).x + (newField(pos + n).x - A(pos).x) * (uS - 1.0) / (uS + 1.0);\n    return field;\n}\n\nvoid mainImage( out vec4 field, in vec2 pos )\n{\n    pos = floor(pos);\n\n    //boundary condition\n    if(pos.x <= l) \n        field.xy = newAbsorbed(pos, vec2(1,0));\n    else if(pos.x >= R.x - 1.0 - l)\n        field.xy = newAbsorbed(pos, vec2(-1,0));\n    else if(pos.y <= l)\n        field.xy = newAbsorbed(pos, vec2(0,1));\n    else if(pos.y >= R.y - 1.0 - l)\n        field.xy = newAbsorbed(pos, vec2(0,-1));\n    else\n        field.xy = newField(pos);\n\n    //initial conditions\n    if (iFrame < 1) {\n        field.xy = vec2(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}