{
    "Shader": {
        "info": {
            "date": "1704216233",
            "description": "WASD to move\nMouse or Arrow keys to rotate\n\nSupports deltatime, tested at 165 and 30 fps, both give same acceleration and velocity decay",
            "flags": 48,
            "hasliked": 0,
            "id": "lcSGDW",
            "likes": 2,
            "name": "basic camera controller",
            "published": 3,
            "tags": [
                "camera",
                "deltatime"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "const int MAX_STEPS = 1024;\nconst float MAX_DIST = 1000.0;\n\n// gets color for given object\nvec3 albedo(vec3 p, vec3 n, int ID) {\n    switch (ID) {\n        case 0:\n            return vec3(mod(floor(p.x) + floor(p.y) + floor(p.z), 2.0)) * 0.5 + 0.5;\n        case 1:\n            return vec3(0.5,0,1);\n        case 2:\n            return vec3(0.5,1,0);\n    }\n}\n\nfloat sceneSDF(vec3 p, out int ID) {\n    // floor\n    ID = 0;\n    float dist = p.y;\n    \n    // spheres\n    if (dist > EPSILON) ID = 1;\n    dist = min(dist, distance(p, vec3(1,0.5,-4)) - 0.5);\n    if (dist > EPSILON) ID = 2;\n    dist = min(dist, distance(p, vec3(-1,0.5,-4)) - 0.5);\n    \n    \n    if (dist > EPSILON) ID = -1;\n    return dist;\n}\n\n// idk how this one works, i stole it from iq >:)\nvec3 calcNormal(in vec3 pos) {\n    int a = 0;\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*sceneSDF(pos + e.xyy, a) + \n\t\t\t\t\t  e.yyx*sceneSDF(pos + e.yyx, a) + \n\t\t\t\t\t  e.yxy*sceneSDF(pos + e.yxy, a) + \n\t\t\t\t\t  e.xxx*sceneSDF(pos + e.xxx, a));\n}\n\n// is this a good way of storing optional data?\nstruct RaycastData {\n    int steps;\n    int ID;\n};\n\n// Sends a ray from input position and marches until a surface is hit\nvec3 raycast(in vec3 rayOrigin, inout vec3 rayDirection, inout RaycastData data) {\n    float dist, rayLength = 0.0; // minimum distance\n    data.ID = -1;\n    \n    // march the ray\n    while (data.steps < MAX_STEPS) {\n        dist = abs(sceneSDF(rayOrigin + rayDirection * rayLength, data.ID));\n        rayLength += dist;\n        \n        // hit\n        if (dist < EPSILON) {\n            break;\n        }\n        // render distance\n        if (rayLength > MAX_DIST) {\n            data.ID = -1;\n            return rayOrigin + rayDirection * rayLength;\n        }\n        data.steps++;\n    }\n    return rayOrigin + rayDirection * (rayLength - EPSILON * 2.0);\n}\n\n// Main code execution\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // debug \n    //fragColor = texelFetch(iChannel0, ivec2(fragCoord / 20.0), 0); return;\n\n    // centered screen coords\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy ) / iResolution.y;\n    \n    vec3 cameraPos = texelFetch(iChannel0, ivec2(0,0), 0).xyz;\n    vec3 rayPosition = vec3(0, 0, 0); // ray origin\n    vec3 sunDirection = normalize(vec3(0,1,0));\n\n    // ray direction for fragCoord.xy... what is this code lol\n    vec3 rayDirection = normalize(vec3(q, 0.) - vec3(0,0,1));\n    // rotate the direction vector using camera direction\n    vec3 camDir = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n    rotate(rayDirection.yz, camDir.x * PI);\n    rotate(rayDirection.xz, camDir.z * PI);\n    \n    rayPosition += cameraPos;\n    RaycastData data = RaycastData(0, -1);\n    \n    // raycast from camera\n    rayPosition = raycast(rayPosition, rayDirection, data);\n    \n    // sky color\n    vec3 color = mix(vec3(1,1,1), vec3(0,0.5,1), dot(rayDirection, vec3(0,1,0)) * 0.5 + 0.5);\n    \n    // if not sky\n    if (data.ID != -1) {        \n        // get the surface normal\n        vec3 normal = calcNormal(rayPosition);\n        \n        // apply material color\n        color = albedo(rayPosition, rayDirection, data.ID);\n        \n        // ambient light\n        float luminance = 0.5;\n        \n        // simple shading\n        luminance += dot(normal, sunDirection) * 0.25;\n        \n        // add ambient occlusion (no performance impact)\n        luminance -= sqrt(float(data.steps) / float(MAX_STEPS)) * 0.5;\n                \n        color *= luminance;\n    }\n\n\n    // DEBUG: show steps\n    //color = vec3(sqrt(float(data.steps) / (float(MAX_STEPS))));\n\n    fragColor = vec4(color, 1);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nint isPressed(int key) {\n    return int(texelFetch(iChannel1, ivec2(key, 0), 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    // ignore unused pixels\n    if (fragCoord.y > 1.0) return;\n    \n    // get data from previous frame\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    /* POSITION */\n    if (fragCoord.x == 0.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0,0.65,0,0);\n        \n        vec3 velocity = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n\n        fragColor.xyz += velocity * iTimeDelta;\n        return;\n    }\n    \n    /* VELOCITY */\n    if (fragCoord.x == 1.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0,0,0,0);\n        \n        vec3 rotation = texelFetch(iChannel0, ivec2(3,0), 0).xyz;\n        vec3 acceleration = vec3(\n            sin(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - cos(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D)),\n            sin(PI * rotation.x) * float(isPressed(KEY_S) - isPressed(KEY_W)),\n            cos(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - sin(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D))\n        ) * 16.0;\n\n        fragColor.xyz += acceleration * iTimeDelta;\n        \n        // friction (thanks to https://iamralpht.github.io/equations/)\n        fragColor.xyz *= pow(0.001, iTimeDelta);\n        \n        return;\n    }\n    \n    /* PREVIOUS MOUSE STATE */\n    if (fragCoord.x == 2.5) {\n        fragColor = iMouse;\n        return;\n    }\n    \n    /* DIRECTION */\n    if (fragCoord.x == 3.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0,0,0,0);\n        \n        // arrow keys\n        fragColor.x -= float(isPressed(KEY_UP) - isPressed(KEY_DOWN)) * iTimeDelta;\n        fragColor.z -= float(isPressed(KEY_RIGHT) - isPressed(KEY_LEFT)) * iTimeDelta;\n        \n        // mouse\n        vec4 prevMouse = texelFetch(iChannel0, ivec2(2,0), 0);\n        if (prevMouse.z > 0.0) {\n            // change the \"-=\" to \"+=\" to invert axes\n            fragColor.z -= (iMouse.x - prevMouse.x) / iResolution.x;\n            fragColor.x -= (iMouse.y - prevMouse.y) / iResolution.y;\n        }\n        \n        // clamp\n        if (fragColor.x > 0.5) fragColor.x = 0.5;\n        if (fragColor.x < -0.5) fragColor.x = -0.5;\n        \n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float EPSILON = .00001;\nconst float PI = asin(1.0) * 2.0;\n\nvoid rotate(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}