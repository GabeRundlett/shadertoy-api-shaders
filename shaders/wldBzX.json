{
    "Shader": {
        "info": {
            "date": "1613188877",
            "description": "Raymarched jerusalem cube with ACES tone mapping and GGX specularity.",
            "flags": 0,
            "hasliked": 0,
            "id": "wldBzX",
            "likes": 5,
            "name": "Jerusalem Cube",
            "published": 3,
            "tags": [
                "fractal",
                "cube",
                "raymarcher",
                "jerusalem"
            ],
            "usePreview": 0,
            "username": "CubeyTheCube",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "#define anti_aliasing 2\n#define iterations 10\n\n#define M_PI 3.1415\n\n#define scl 1./(sqrt(2.)-1.) \n#define a 1.-2.*(sqrt(2.)-1.)\n#define aces_input mat3(0.59719, 0.35458, 0.04823,0.07600, 0.90834, 0.01566,0.02840, 0.13383, 0.83777)\n#define aces_output mat3(1.60475, -0.53108, -0.07367, -0.10208, 1.10813, -0.00605, -0.00327, -0.07276, 1.07602)\n\nfloat sd(vec3 pos){ // ref http://www.fractalforums.com/index.php?topic=14225.msg55051#msg55051\n   float x = pos.x;\n   float y = pos.y;\n   float z = pos.z;\n   float t;\n   float r=x*x+y*y+z*z;float dd=1.0;\n   for(int i=0;i<iterations && r<100.;i++){\n      x=abs(x);y=abs(y);z=abs(z);\n      if(x<y){t=x;x=y;y=t;}\n      if(z<x){t=z;z=x;x=t;}\n      if(x<y){t=x;x=y;y=t;}\n      if(y<a && x>1.-2.*a+y-a){\n         x-=1.;z-=1.;\n         x*=scl*scl;y*=scl*scl;z*=scl*scl;dd*=scl*scl;\n         x+=1.;z+=1.;\n      }else{\n         x-=1.;y-=1.;z-=1.;\n         x*=scl;y*=scl;z*=scl;dd*=scl;\n         x+=1.;y+=1.;z+=1.;\n      }\n      r=x*x+y*y+z*z;\n   }\n   return (sqrt(r)-1.75)/dd;\n}\n\n\nfloat raymarch(in vec3 ro, in vec3 rd) {\n    float t = 0.001;\n    for(int i = 0; i < 40; i++) {\n        vec3 h = ro + rd * t;\n        float dist = sd(h);\n        if(dist < 0.001) break;\n        if(t > 20.) return 20.;\n        t += dist;\n    }\n    return t;\n}\n\nvec3 normal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(sd(p + e.xyy) - sd(p - e.xyy),\n                          sd(p + e.yxy) - sd(p - e.yxy),\n                          sd(p + e.yyx) - sd(p - e.yyx)));\n}\n\nfloat ggx( in float a2, in float cosine) {\n  return (a2 * a2) / (3.14159265 * pow(cosine * cosine * (a2 * a2 - 1.) + 1., 2.0));\n}\n\nvec3 aces(in vec3 c) {\n    vec3 v = c * aces_input; // ref https://64.github.io/tonemapping/\n    vec3 b = v * (v + 0.0245786) - 0.000090537;\n    vec3 d = v * (0.983729 * v + 0.4329510) + 0.238081;\n    v = b/d;\n    return v * aces_output;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float AA = float(anti_aliasing);\n    vec3 finalCol = vec3(0.0);\n    for(float i = 0.0; i < AA; i++) {\n    for(float j = 0.0; j < AA; j++) {\n    vec3 col;\n    float r     = 5.0;\n    float theta = 2.0*M_PI * (iMouse.x / iResolution.x - 0.25);\n    float phi   = 0.5*M_PI * (iMouse.y / iResolution.y + 0.000001);\n\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 o = ta + r * vec3(sin(phi) * cos(theta), cos(phi), sin(phi) * sin(theta));\n\n    vec3 ww = normalize(ta - o);\n    vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu, ww));\n    vec2 uv = (fragCoord+vec2(i,j)/AA-iResolution.xy*0.5)/iResolution.x;\n    vec3 d = normalize(vec3(uv.x * uu + uv.y * vv + 1.0*ww));\n    float t = raymarch(o,d);\n    if(t < 20.0) {\n    vec3 i = o + t * d;\n    vec3 n = normal(i);\n    vec3 l = normalize(vec3(0.0,0.0,-10.0) - i);\n    col = vec3(0.5, 0.38, 0.25) * max(0.0,dot(n,i)) + vec3(ggx(0.1, dot(n, normalize(l-d))));\n    col = clamp(col,0.0,1.0);\n    col = pow(col, vec3(0.4545));\n    col = aces(col*1.5);\n    } else col = texture(iChannel0,vec2(uv.x,8.*(uv.y+0.5))).xyz;\n    finalCol += col/(AA*AA);\n    }\n    }\n\n    fragColor = vec4(finalCol, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}