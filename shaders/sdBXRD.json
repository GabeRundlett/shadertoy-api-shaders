{
    "Shader": {
        "info": {
            "date": "1619771651",
            "description": "Magic orb -- immersive scene projected onto external sphere (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "sdBXRD",
            "likes": 11,
            "name": "Dolphin Orb",
            "published": 3,
            "tags": [
                "projection",
                "spherical",
                "swim"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "// \"Dolphin Orb\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  No. 7 in \"Dolphin\" series\n    \"Atlantis 2\"                (XdlBzX)\n    \"Closely Watched Dolphins\"  (MdlfRl)\n    \"Virtual Dolphins\"          (XlfBD2)\n    \"Golden Dolphin\"            (MtsBWX)\n    \"Cave Dolphins\"             (wdSyRD)\n    \"Nautilus Interior\"         (wt2fzz)\n*/\n\n#define USE_BMAP   false  // try true for stronger GPUs\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrEllipsDf (vec3 p, vec3 r);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 Hashv3v3 (vec3 p);\nfloat Noisefv3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 fishPos, fishAng, vuPos, ltPos, ltDirEx;\nvec2 trkAx, trkAy, trkFx, trkFy;\nfloat dstFar, tCur, bGrid, pScale, dstBMap;\nint idObj;\nbool useBm;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, sin (trkFx * t)), dot (trkAy, sin (trkFy * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (dot (trkAx * trkFx, cos (trkFx * t)), dot (trkAy * trkFy, cos (trkFy * t)), 1);\n}\n\nfloat VPoly (vec3 p)\n{\n  vec3 ip, fp, a, w;\n  p *= pScale;\n  ip = floor (p);\n  fp = fract (p);\n  a = vec3 (4.);\n  for (float gz = -1.; gz <= 1.; gz ++) {\n    for (float gy = -1.; gy <= 1.; gy ++) {\n      for (float gx = -1.; gx <= 1.; gx ++) {\n        w = vec3 (gx, gy, gz) + 0.8 * Hashv3v3 (ip + vec3 (gx, gy, gz)) - fp;\n        a.z = dot (w, w);\n        if (a.z < a.x) a.xy = a.zx;\n        else a.y = min (a.z, a.y);\n      }\n    }\n  }\n  return sqrt (a.y - a.x);\n}\n\nfloat ObjDfG (vec3 p)\n{\n  vec3 q;\n  float d;\n  q = p;\n  q.xy -= TrackPath (p.z).xy;\n  d = SmoothMax (length (fract (q) - 0.5) - 0.2 + 1.1 * (Noisefv3 (4. * q) - 0.5), 0.55 - length (q.xy), 0.2);\n  if ((USE_BMAP || useBm) && dstBMap < 6. && d < 0.05) d -= 0.04 * VPoly (p);\n  return 0.25 * d;\n}\n\nfloat ObjRayG (vec3 ro, vec3 rd)\n{\n  vec3 p, s, rdi;\n  float dHit, d, eps;\n  eps = 0.0002;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi = 1. / rd;\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 320; j ++) {\n    p = ro + dHit * rd;\n    s = (bGrid * (floor (p / bGrid) + step (0., rd)) - p) * rdi;\n    dstBMap = dHit;\n    d = min (ObjDfG (p), abs (Minv3 (s)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNfG (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDfG (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, szFac, d, dBodyF, dBodyB, dMouth, dFinT, dFinP, dFinD, dEye;\n  int id;\n  szFac = 0.25;\n  dMin = dstFar;\n  dMin /= szFac;\n  p = (p - fishPos) / szFac;\n  p.xz = Rot2D (p.xz, fishAng.y);\n  p.yz = Rot2D (p.yz, fishAng.x);\n  p.x = abs (p.x);\n  p.z -= 0.2;\n  p.yz = Rot2D (p.yz, 0.2 * fishAng.z);\n  q = p;\n  q.z -= -0.06;\n  dBodyF = PrEllipsDf (q, vec3 (0.07, 0.08, 0.24));\n  q = p;\n  q.z -= -0.12;\n  q.yz = Rot2D (q.yz, fishAng.z);\n  q.z -= -0.16;\n  dBodyB = PrEllipsDf (q, vec3 (0.035, 0.05, 0.25));\n  q.z -= -0.22;\n  q.yz = Rot2D (q.yz, 2. * fishAng.z);\n  q.xz -= vec2 (0.05, -0.05);\n  q.xz = Rot2D (q.xz, 0.4);\n  dFinT = PrEllipsDf (q, vec3 (0.08, 0.007, 0.04));\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (-0.03, 0.17), 0.1);\n  q.y = abs (q.y) - 0.004;\n  dMouth = PrEllipsDf (q, vec3 (0.025, 0.012, 0.06));\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (0.07, -0.1), 0.6);\n  dFinD = PrEllipsDf (q, vec3 (0.005, 0.1, 0.035));\n  q = p;\n  q.xy = Rot2D (q.xy, 0.8);\n  q.xz = Rot2D (q.xz - vec2 (0.07, -0.01), 0.6);\n  dFinP = PrEllipsDf (q, vec3 (0.09, 0.004, 0.03));\n  q = p - vec3 (0.04, 0.01, 0.11);\n  dEye = PrSphDf (q, 0.015);\n  d = SmoothMin (SmoothMin (dBodyF, dBodyB, 0.03), dFinT, 0.01);\n  d = SmoothMin (SmoothMin (d, dMouth, 0.015), min (dFinD, dFinP), 0.002);\n  if (d < dEye) id = 2;\n  else {\n    d = dEye;\n    id = 3;\n  }\n  DMIN (id);\n  return dMin * szFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float ltDist)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 20; j ++) {\n    p = ro + d * rd;\n    h = min (ObjDf (p), ObjDfG (p));\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05 || d > ltDist) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 SphHit (vec3 ro, vec3 rd, float rad)\n{\n  vec3 vn;\n  float b, d, w;\n  b = dot (rd, ro);\n  w = b * b + rad * rad - dot (ro, ro);\n  d = dstFar;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    vn = (ro + d * rd) / rad;\n  }\n  return vec4 (d, vn);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 4.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0., 0.5, 0.6), vec3 (0.2, 0.4, 0.9), 0.5 + 0.5 * rd.y) *\n     (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) * (1. + 0.2 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, roo, ltVec, ltDir;\n  float dstObj, dstObjG, ltDist, sh, atten, eDark, aDotL;\n  bGrid = 1.;\n  pScale = 10.;\n  roo = ro;\n  useBm = false;\n  bgCol = BgCol (rd);\n  dstObj = ObjRay (ro, rd);\n  dstObjG = ObjRayG (ro, rd);\n  if (dstObjG < min (dstObj, dstFar)) {\n    idObj = 1;\n    dstObj = dstObjG;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    useBm = true;\n    vn = (idObj == 1) ? ObjNfG (ro) : ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (mix (vec3 (0.7, 0.75, 0.7), vec3 (0.7, 0.7, 0.75),\n         smoothstep (0.45, 0.55, Noisefv3 (41.1 * ro))), 0.2);\n      col4 *= 1. - 0.2 * Noisefv3 (19.1 * ro);\n      vn = VaryNf (64. * ro, vn, 2.);\n    } else if (idObj == 2) {\n      col4 = vec4 (vec3 (0.8, 0.7, 0.75) * (1. - 0.3 * smoothstep (-0.5, -0.4, vn.y)), 0.2);\n    } else if (idObj == 3) {\n      col4 = vec4 (0., 0.5, 0.3, -1.);\n    }\n    ltVec = roo + ltPos - ro;\n    ltDist = length (ltVec);\n    ltDir = ltVec / ltDist;\n    if (col4.a >= 0.) {\n      eDark = (idObj == 1) ? 0.4 + 0.6 * smoothstep (0.05, 1., VPoly (ro)) : 1.;\n      useBm = false;\n      sh = ObjSShadow (ro, ltDir, ltDist);\n      atten = 1. / (0.6 + 0.1 * ltDist * ltDist);\n      col = atten * col4.rgb * (0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.) +\n         col4.a * step (0.95, sh) * pow (max (dot (reflect (rd, vn), ltDir), 0.), 32.)) * eDark;\n    } else col = col4.rgb;\n    col = mix (col, bgCol, 0.05 + 0.95 * smoothstep (0., 0.85, dstObj / dstFar));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nfloat ExObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  d = PrSphDf (q, 1.);\n  q.y = abs (q.y) - 0.45;\n  d = max (PrRoundCylDf (q.xzy, 1.02, 0.007, 0.007), - d);\n  DMIN (1);\n  q = p;\n  q.xz = (abs (q.x) > abs (q.z)) ? q.xz : q.zx;\n  d = max (PrTorusDf (q, 0.013, 1.06), abs (q.y) - 0.45);\n  q.xy = abs (q.xy) - vec2 (0.96, 0.46);\n  d = min (d, PrSphDf (q, 0.02));\n  DMIN (2);\n  q = p;\n  d = PrSphDf (q, 1. - 0.01);\n  DMIN (3);\n  return dMin;\n}\n\nfloat ExObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = ExObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ExObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ExObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ExObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ExObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += max (0.03, h);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ExShowScene (vec3 ro, vec3 rd)\n{\n  mat3 vuMat;\n  vec4 ds4, col4;\n  vec3 col, vn, vd;\n  float dstObj, t, sh;\n  int idObjEx;\n  trkAx = 0.5 * vec2 (2., 0.9);\n  trkAy = 0.5 * vec2 (1.3, 0.66);\n  trkFx = 2. * vec2 (0.2, 0.23);\n  trkFy = 2. * vec2 (0.17, 0.24);\n  t = 0.3 * tCur;\n  vuPos = TrackPath (t);\n  vuPos.xy += 0.02 * sin (0.05 * pi * tCur);\n  vd = normalize (TrackVel (t));\n  vuMat = StdVuMat (sin (vd.y), atan (vd.x, vd.z) - pi);\n  t -= 0.25;\n  fishPos = TrackPath (t);\n  vd = normalize (TrackVel (t));\n  fishAng = vec3 (sin (vd.y), atan (vd.x, vd.z), 0.1 * sin (pi * tCur));\n  ltPos = vuMat * vec3 (0., 0.5, -0.5);\n  dstObj = ExObjRay (ro, rd);\n  idObjEx = idObj;\n  ds4 = SphHit (ro, rd, 1.);\n  if (min (ds4.x, dstObj) < dstFar) {\n    if (ds4.x < dstObj) {\n      col = ShowScene (vuPos, ds4.yzw);\n    } else {\n      ro += dstObj * rd;\n      vn = ExObjNf (ro);\n      if (idObjEx == 1) col4 = vec4 (0.5, 0.3, 0.1, 0.) * (0.95 + 0.05 * sin (64. * pi * length (ro.xz)));\n      else if (idObjEx == 2) col4 = vec4 (0.5, 0.4, 0., 0.1);\n      sh = ExObjSShadow (ro, ltDirEx);\n      col = col4.rgb * (0.3 + 0.7 * sh * max (dot (vn, ltDirEx), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (reflect (rd, vn), ltDirEx), 0.), 32.);\n    }\n  } else col = vec3 (0.1, 0.1, 0.2);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 16.;\n  az = 0.;\n  el = -0.05 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -7.);\n  ltDirEx = vuMat * normalize (vec3 (1., 1., -1.));\n  rd = vuMat * normalize (vec3 (uv, 6.5));\n  fragColor = vec4 (ExShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec3 (0., cHashVA3.xy)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}