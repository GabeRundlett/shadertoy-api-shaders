{
    "Shader": {
        "info": {
            "date": "1614540506",
            "description": "Licence CC0: Tunneling through golden fractal III\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WlyfRy",
            "likes": 16,
            "name": "Tunneling through golden fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 538
        },
        "renderpass": [
            {
                "code": "// Licence CC0: Tunneling through golden fractal III\n\n// -----------------------------------------------------------------------------\n// COMMON\n// -----------------------------------------------------------------------------\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define L2(x)           dot(x, x)\n#define PLANE_PERIOD    5.0\n\nconst vec3 std_gamma   = vec3(2.2, 2.2, 2.2);\nconst vec3 planeCol    = vec3(1.0, 1.15, 1.5)*0.95;\nconst vec3 baseRingCol = pow(vec3(1.0, 0.65, 0.25), vec3(0.6));\nconst vec3 sunCol      = vec3(1.25, 1.0, 1.1)/1.25;\n\nstruct effect {\n  float lw;\n  float tw;\n  float sk;\n  float cs;\n};\n\nconst effect effects[] = effect[](\n    effect(0.5, 0.0, 0.0, 0.0)\n  , effect(0.5, 0.0, 0.0, 1.0)\n  , effect(0.5, 0.0, 1.0, 1.0)\n  , effect(0.5, 1.0, 1.0, 1.0)\n  , effect(0.5, 1.0, 1.0, 0.0)\n  , effect(0.5, 1.0, 0.0, 0.0)\n  );\neffect current_effect = effects[5];\n\nfloat hash(float co) {\n  co += 100.0;\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n  hp = toRect(hpp);\n  p = hp;\n  return rn;\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  \n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat hex(vec2 p, float r) {\n  const vec3 k = vec3(-sqrt(3.0)/2.0,1.0/2.0,sqrt(3.0)/3.0);\n  p = p.yx;\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\nfloat apollian(vec4 p, float s) {\n  float scale = 1.0;\n  for(int i=0; i<7; ++i) {\n    p = -1.0 + 2.0*fract(0.5*p+0.5);\n    float r2 = dot(p,p);\n    float k  = s/r2;\n    p       *= k;\n    scale   *= k;\n  }\n\n  float lw = 0.00125*current_effect.lw;\n  \n  float d0 = abs(p.y)-lw*scale;\n  float d1 = abs(circle(p.xz, 0.005*scale))-lw*scale;\n  float d = d0;\n  d = mix(d, min(d, d1), current_effect.tw);\n  return (d/scale);\n}\n\n// -----------------------------------------------------------------------------\n// PATH\n// -----------------------------------------------------------------------------\n\n// The path function\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.075*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\n// The derivate of the path function\n//  Used to generate where we are looking\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/eps;\n}\n\n// The second derivate of the path function\n//  Used to generate tilt\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.125*(doffset(z + eps) - doffset(z - eps))/eps;\n}\n\n// -----------------------------------------------------------------------------\n// PLANE MARCHER\n// -----------------------------------------------------------------------------\n\nfloat weird3(vec2 p, float h) {\n  vec2  c = vec2(-1.25,  -1.25)+0.15*vec2(sin(0.2*TIME+TAU*h*vec2(1.0, sqrt(0.5)*0.5)));\n  vec2 ot = mix(1.5, -1.5, h)*vec2(cos(TAU*h*sqrt(0.5)), sin(TAU*h));\n  vec2 u = p;\n  float lx = 1E6;\n  float ly = 1E6;\n  float lp = 1E6;\n  const int maxi = 7;\n  float s = 1.0;\n\n  for (int i = 0; i < maxi; ++i) {\n    float m = dot(u, u);\n    u = SABS(u, 0.05)/m + c;\n    s *= m;\n    float dx = abs(u.x - ot.x);\n    float dy = abs(u.y - ot.y);\n    float dp = abs(1.65-length(u));\n    if(m > 0.05) {\n      lx = min(lx, dx);\n      ly = min(ly, dy);\n    }\n    lp = min(lp, dp);\n  }\n  \n  \n  float l = lp;\n  l = pmin(l, lx, 0.05);\n  l = pmin(l, ly, 0.05);\n  l -= 0.025;\n  return l*s;\n}\n\n\nfloat circles(vec2 p) {\n  vec2 pp = toPolar(p);\n  const float ss = 2.0;\n  pp.x = fract(pp.x/ss)*ss;\n  p = toRect(pp);\n  float d = circle(p, 1.0);\n  return d;\n}\n\nvec2 df(vec2 p, float h) {\n  vec2 wp = p;\n  float rep = 2.0*round(mix(3.0, 12.0, h*h));\n  float ss = 0.05*6.0/rep;\n\n  if (current_effect.sk > 0.0) {\n    smoothKaleidoscope(wp, ss, rep);\n  }\n  \n  float sss = mix(3.0, 6.0, h*h);\n  float d0 = weird3(wp/sss, h)*sss;\n  float d1 = hex(p, 0.25)-0.1;\n  float d2 = circles(p);\n  const float lw = 0.0125;\n  d2 = abs(d2)-lw;\n  float d = d0;\n\n  if (current_effect.cs > 0.0) {\n    d  = pmin(d, d2, 0.1);\n  }\n\n  d  = pmin(d, abs(d1)-lw, 0.1);\n  d  = max(d, -(d1+lw));\n  return vec2(d, d1+lw);\n}\n\nvec2 df(vec3 p, vec3 off, float s, mat2 rot, float h) {\n  vec2 p2 = p.xy;\n  p2 -= off.xy;\n  p2 *= rot;\n  return df(p2/s, h)*s;\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  float ld = max(dot(rd, vec3(0.0, 0.0, 1.0)), 0.0);\n  return 1.0*sunCol*tanh_approx(3.0*pow(ld, 100.0));\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, float pd, vec3 off, float aa, float n) {\n  int pi = int(mod(n/PLANE_PERIOD, float(effects.length())));\n  current_effect = effects[pi];\n  \n  float h = hash(n);\n  float s = 0.25*mix(0.5, 0.25, h);\n  const float lw = 0.0235;\n  const float lh = 1.25;\n\n  const vec3 loff = 2.0*vec3(0.25*0.5, 0.125*0.5, -0.125);\n  vec3 lp1  = ro + loff;\n  vec3 lp2  = ro + loff*vec3(-2.0, 1.0, 1.0);\n\n  vec2 p = pp.xy-off.xy;\n\n  mat2 rot = ROT(TAU*h);\n\n  vec2 d2 = df(pp, off, s, rot, h);\n\n  float hh = -1.0*smoothstep(-aa, aa*3.0, -d2.x);\n  // Well this doesn't seem to work in shadertoy.\n  float hhx = dFdx(hh);\n  float hhy = dFdy(hh);\n  vec3  hn = normalize(vec3(hhx, hhy, -1));\n\n  const vec3 nn  = vec3(0.0, 0.0, -1.0);\n  vec3 ld1   = normalize(lp1 - pp);\n  vec3 ld2   = normalize(lp2 - pp);\n  float dif1 = pow(max(dot(nn, ld1), 0.0), 5.0);\n  float dif2 = pow(max(dot(nn, ld2), 0.0), 5.0);\n  vec3 ref   = reflect(rd, hn);\n  float spe1= pow(max(dot(ref, ld1), 0.0), 30.0);\n  float spe2= pow(max(dot(ref, ld2), 0.0), 30.0);\n\n  const float boff = 0.0125*0.5;\n  float dbt = boff/rd.z;\n  \n  vec3 bpp = ro + (pd + dbt)*rd;\n  vec2 bp = bpp.xy - off.xy;\n\n  vec3 srd1 = normalize(lp1-bpp);\n  vec3 srd2 = normalize(lp2-bpp);\n  float bl21= L2(lp1-bpp);\n  float bl22= L2(lp2-bpp);\n\n  float st1 = -boff/srd1.z;\n  float st2 = -boff/srd2.z;\n\n  vec3 spp1 = bpp + st1*srd1;\n  vec3 spp2 = bpp + st2*srd2;\n  \n  vec2 bd  = df(bpp, off, s, rot, h);\n  vec2 sd1 = df(spp1, off, s, rot, h);\n  vec2 sd2 = df(spp2, off, s, rot, h);\n\n  vec3 col  = vec3(0.0);\n  const float ss = 200.0;\n\n  col       += 0.1125*planeCol*dif1*(1.0-exp(-ss*(max((sd1.x), 0.0))))/bl21;\n  col       += 0.1125*planeCol*dif2*0.5*(1.0-exp(-ss*(max((sd2.x), 0.0))))/bl22;\n  \n  vec3 ringCol = baseRingCol;\n  ringCol *= vec3(clamp(0.1+2.5*(0.1+0.25*((dif1*dif1/bl21+dif2*dif2/bl22))), 0.0, 1.0));\n  ringCol += sqrt(baseRingCol)*spe1*2.0;\n  ringCol += sqrt(baseRingCol)*spe2*2.0;\n  col       = mix(col, ringCol, smoothstep(-aa, aa, -d2.x));  \n\n  float ha = smoothstep(-aa, aa, bd.y);\n\n  return vec4(col, mix(0.0, 1.0, ha));\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0-0.5*tanh_approx(lp));  // Playing around with rdd can give interesting distortions\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0-0.75;\n  const int furthest = 9;\n  const int fadeFrom = max(furthest-4, 0);\n  const float fadeDist = planeDist*float(furthest - fadeFrom);\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n  // Steps from nearest to furthest plane and accumulates the color\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n  \n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, pd, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = exp(-2.5*max((nz - planeDist*float(fadeFrom))/fadeDist, 0.0));\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.xyz = mix(skyCol, pcol.xyz, (fadeIn));\n      pcol.w *= fadeOut;\n\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency  \n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 color(vec2 p, vec2 q) {\n  float tm  = TIME*0.15+0.3;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  col = postProcess(col, q);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = color(p, q);\n\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}