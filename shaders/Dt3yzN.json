{
    "Shader": {
        "info": {
            "date": "1699740935",
            "description": "Transitioning between two images with rotating circles in the middle.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt3yzN",
            "likes": 3,
            "name": "Rotation Image transition effect",
            "published": 3,
            "tags": [
                "circle",
                "rotate",
                "effect",
                "transition",
                "rotating",
                "swap",
                "change"
            ],
            "usePreview": 1,
            "username": "Nightwarrior",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////\n//                                        //\n//   Made by NightWarrior in ShaderToy    //\n//                                        //\n////////////////////////////////////////////\n\n#define M_PI 3.14159265358979323846264338327950288\n\n// Function to rotate UV coordinates around a given point (rotCenter)\nvec2 rotateUV(vec2 uv, vec2 center, mat2 rotationMatrix) {\n    uv -= center; // Move to origin for rotation\n    uv = rotationMatrix * uv; // Rotate UV coordinates\n    uv += center; // Move back to original position\n    return uv;\n}\n\n// Easing Functions\n\nfloat easeInOutQuint(float x) {\n    if (x < 0.5) {\n        return 16.0 * x * x * x * x * x;\n    } else {\n        return 1.0 - pow(-2.0 * x + 2.0, 5.0) * 0.5;\n    }\n}\n\nfloat easeInOutBack(float x) {\nfloat c1 = 1.70158;\nfloat c2 = c1 * 1.525;\n\nreturn x < 0.5\n  ? (pow(2.0 * x, 2.0) * ((c2 + 1.0) * 2. * x - c2)) / 2.\n  : (pow(2. * x - 2., 2.) * ((c2 + 1.) * (x * 2. - 2.) + c2) + 2.) / 2.;\n}\n\nfloat easeInOutElastic(float x) {\n    const float c5 = (2.0 * 3.14159) / 4.5;\n\n    if (x == 0.0) {\n        return 0.0;\n    } else if (x == 1.0) {\n        return 1.0;\n    } else if (x < 0.5) {\n        return -0.5 * pow(2.0, 20.0 * x - 10.0) * sin((20.0 * x - 11.125) * c5);\n    } else {\n        return 0.5 * pow(2.0, -20.0 * x + 10.0) * sin((20.0 * x - 11.125) * c5) + 1.0;\n    }\n}\n\nmat2 getRot(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nfloat smooth_transition_oscillate(float t, float duration, float start, float end) {\n    float v1 = mod(t, duration);\n    float v2 = mod(t, duration * 2.0);\n    float newT = v2 > v1 ? duration - v1 : v1;\n\n    // The transition points also need to be cyclic, using newT for checking\n    float transitionStart = start; // duration / 2.0 - 0.5; // Transition starts at 2\n    float transitionEnd = end; // duration / 2.0 + 0.5;   // Transition ends at 3\n\n    if (newT < transitionStart) {\n        return 0.; // Before the transition starts\n    } else if (newT >= transitionStart && newT < transitionEnd) {\n        // Linear interpolation between 0 and 1 for the transition period\n        return (newT - transitionStart) / (transitionEnd - transitionStart);\n    } else {\n        return 1.; // After the transition ends\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Aspect ratio correction\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= aspectRatio; // Adjust the x coordinate by aspect ratio\n\n    // Calculate the distance from the current point to the center\n    // Adjusted center.x for aspect ratio\n    float dist = length((fragCoord.xy / iResolution.y) - vec2(aspectRatio * 0.5, 0.5));\n\n    // Define radii for the three circles\n    float outerRadius = 0.41;\n    float middleRadius = 0.31;\n    float innerRadius = 0.;\n\n    // Calculate the ring's thickness\n    float thickness = 0.05; // Thickness based on the normalized units\n\n    // Check if we're within the ring's thickness for each circle\n    bool inOuterRing = abs(dist - outerRadius) < thickness * 0.7;\n    bool inMiddleRing = abs(dist - middleRadius) < thickness * 1.3;\n    bool inInnerRing = abs(dist - innerRadius) < thickness * 5.0;\n\n    // Calculate angle for rotation\n    float angle = iTime; // Rotate based on time\n    \n    // oscillators\n    float transitionDuration = 5.0; // Total duration for a full cycle (up and back down)\n    float period = 10.0; // Total duration for a full cycle (up and back down)\n\n    // Calculating the position for bg texture\n    vec2 texRes = vec2(iChannelResolution[0].xy); // Assuming both 0, 1 textures have same resolutions\n    float scaleToFit = iResolution.y / texRes.y;\n    float xOffset = iResolution.x * 0.5 - (texRes.x * scaleToFit) * 0.5;\n    vec2 uvTex = (fragCoord - vec2(xOffset, 0.0)) / scaleToFit;\n    \n    // Calculate screen center adjusted for aspect ratio and scaling\n    vec2 screenCenter = vec2((iResolution.x) * 0.5, iResolution.y * 0.5);\n    \n    // for rotating\n    vec2 rotCenter = vec2(0.5, 0.5);\n    \n    // Calculate factors with staggered start times and special easing\n    float mix1 = smooth_transition_oscillate(iTime, transitionDuration, transitionDuration * 0.2, transitionDuration * 0.8);\n    float mix2 = smooth_transition_oscillate(iTime, transitionDuration, transitionDuration * 0.3, transitionDuration * 0.7);\n    float mix3 = smooth_transition_oscillate(iTime, transitionDuration, transitionDuration * 0.4, transitionDuration * 0.6);\n\n    // Adding more behavior\n    mix1 = easeInOutElastic(mix1);\n    mix2 = easeInOutElastic(mix2);\n    mix3 = easeInOutQuint(mix3);\n\n    // Apply rotation only within the circles\n    vec2 rot1Uv;\n    vec2 rot2Uv;\n    vec2 rot3Uv;\n    if (inOuterRing || inMiddleRing || inInnerRing) {\n        // Convert screen coordinates to normalized UV coordinates for rotation\n        vec2 uvTexCircle = (fragCoord - screenCenter) / iResolution.y + rotCenter;\n        rot1Uv = rotateUV(uvTexCircle, rotCenter, getRot(mix1 * 2. * M_PI));\n        rot2Uv = rotateUV(uvTexCircle, rotCenter, getRot(mix2 * 2. * M_PI * -1.));\n        rot3Uv = rotateUV(uvTexCircle, rotCenter, getRot(mix3 * 2. * M_PI));\n    }\n    \n    float mix4Duration = 0.07;\n    float mix4 = smooth_transition_oscillate(iTime, transitionDuration, transitionDuration / 2. - mix4Duration, transitionDuration / 2. + mix4Duration);\n\n    // Output to screen\n    if (inOuterRing) {\n        fragColor = mix(texture(iChannel0, rot3Uv), texture(iChannel1, rot3Uv), mix3);\n    } else if (inMiddleRing) {\n        fragColor = mix(texture(iChannel0, rot2Uv), texture(iChannel1, rot2Uv), mix2);\n    } else if (inInnerRing) {\n        fragColor = mix(texture(iChannel0, rot1Uv), texture(iChannel1, rot1Uv), mix1);\n    } else {\n        // Textures for the background\n        uvTex /= texRes;\n        vec4 tex1bgColor = texture(iChannel0, uvTex);\n        vec4 tex2bgColor = texture(iChannel1, uvTex);\n        fragColor = mix(tex1bgColor, tex2bgColor, mix4); // Mix the two textures for the background\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}