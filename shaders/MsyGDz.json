{
    "Shader": {
        "info": {
            "date": "1453993789",
            "description": "Ray Marching Experiment nÂ°37",
            "flags": 32,
            "hasliked": 0,
            "id": "MsyGDz",
            "likes": 17,
            "name": "Ray Marching Experiment n°37",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "gear",
                "37"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 957
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst vec2 vSteps = vec2(1.0,1.0);\n\n/////////////////////////\n// IQ Storage : https://www.shadertoy.com/view/MddGzf\nfloat isInside( vec2 p, vec2 c ) {vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) {vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\nvec4 loadValue( in vec2 re ){return texture( iChannel2, (0.5+re) / iChannelResolution[2].xy, -100.0 );}\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord ){fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;}\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord ){fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;}\n\n/////////////////////////\n// GLSL Number Printing - @P_Malin (CCO 1.0)=> https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin(const in int x){\n    if(x==0) return 480599.0; if(x==1) return 139810.0; if(x==2) return 476951.0; if(x==3) return 476999.0;\tif(x==4) return 350020.0; \n    if(x==5) return 464711.0; if(x==6) return 464727.0; if(x==7) return 476228.0; if(x==8) return 481111.0; if(x==9) return 481095.0; \n    return 0.0;}\nfloat PrintValue(vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n            if((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;} \n        else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;} \n            else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));} } }\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));}\nvec3 WriteValueToScreenAtPos(vec2 fragCoord, float vValue, vec2 vPixelCoord, vec3 vColour, vec2 vFontSize, float vDigits, float vDecimalPlaces, vec3 vColor){\n    float num = PrintValue(fragCoord, vPixelCoord, vFontSize, vValue, vDigits, vDecimalPlaces);\n    return mix( vColour, vColor, num);}\n\n/////////////////////////////////////////////////////////////////\n\n#define y(a) sign(mod(floor(a), 2.) *.5 - .1)\n#define pi 3.14159\n\nvec3 effect(vec2 g) \n{\n    vec2 \n        s = sign(mod(floor(g), 2.) - .2),\n        c, u;\n    \n    float \n        w = s.x * s.y * iDate.w * 5.,\n        k = 1.57079;\n    \n    vec3 f = vec3(0);\n    \n    for (float i=0.;i<4.;i++)\n    {\n        c = sin(i * k + vec2(k,0));\n        \n        u = fract(mat2(c, -c.y, c.x) * g);\n        \n        f += step(\n            min(max(1.5 * cos(atan(u.x, u.y) * 8. + w + k) + 6., 5.), 7.), \n            length(u) * 12.3) / 5.;\n        \n        w *=-1.;\n    }\n    return f;\n}\n\nvec4 displacement(vec3 p)\n{\n    vec2 g = p.xz * 0.7;\n    vec3 col = 1.-effect(g);\n    vec3 tex = texture(iChannel1, g).rgb;\n    col = (col.r<0.2)?col * tex:col;\n    float dist = dot(col,vec3(0.05));\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 disp = displacement(p);\n    return vec4(length(p) - 4. - disp.x, disp.yzw);\n}\n\n///////////////////////////////////////////\n//FROM IQ Shader https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.01, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n///////////////////////////////////////////\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec, float maxStep)\n{\n   \tfloat s = rmPrec;\n    float d = 0.;\n    for(float i=0.;i<250.;i++)\n    {      \n        if (i > maxStep) break;\n        if (s<rmPrec||s>maxd) break;\n        s = map(ro+rd*d).x*mapPrec;\n        d += s;\n    }\n    return d;\n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    vec4 varSteps = loadValue(vSteps); //(x:steps/y:rmPrec/z:maxd/w:mapPrec)\n    \n    float time = iTime*0.25;\n    float cam_a = time; // angle z\n    \n    float cam_e = 5.52; // elevation\n    float cam_d = 1.88; // distance to origin axis\n    \n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float refl_i = 0.45; // reflexion intensity\n    float refr_a = 0.7; // refraction angle\n    float refr_i = 0.8; // refraction intensity\n    float bii = 0.35; // bright init intensity\n    \n    vec2 s = iResolution.xy;\n    vec2 uv = (g+g-s)/s.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, varSteps.y, varSteps.z, varSteps.w, varSteps.x);\n    \n    if (d<varSteps.z)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 refrRay = refract(rd, n, refr_a);\n        \n        vec3 cubeRefl = texture(iChannel0, reflRay).rgb * refl_i;\n        vec3 cubeRefr = texture(iChannel0, refrRay).rgb * refr_i;\n        \n        col = cubeRefl + cubeRefr + pow(b, 15.);\n        \n       \t// lighting        \n        float occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, reflRay.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( reflRay, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( p, lig, 0.02, 2.5 );\n       \tdom *= softshadow( p, reflRay, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n        \n       \tcol = mix(col, map(p).yzw, 0.5);\n    }\n    else\n    {\n        b+=0.1;\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n    col = WriteValueToScreenAtPos(g, iTimeDelta, vec2(150,2), col, vec2(12.0, 15.0), 1., 2., vec3(0.9));\n    col = WriteValueToScreenAtPos(g, varSteps.x, vec2(15,2), col, vec2(12.0, 15.0), 1., 2., vec3(0.9));\n    col = WriteValueToScreenAtPos(g, varSteps.y, vec2(15,20), col, vec2(12.0, 15.0), 1., 5., vec3(0.9));\n    col = WriteValueToScreenAtPos(g, varSteps.z, vec2(15,38), col, vec2(12.0, 15.0), 1., 2., vec3(0.9));\n    col = WriteValueToScreenAtPos(g, varSteps.w, vec2(15,56), col, vec2(12.0, 15.0), 1., 2., vec3(0.9));\n    \n\tf.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2 vSteps = vec2(1.0,1.0);\n/////////////////////////\n// IQ Storage : https://www.shadertoy.com/view/MddGzf\nfloat isInside( vec2 p, vec2 c ) {vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) {vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\nvec4 loadValue( in vec2 re ){return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );}\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord ){fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;}\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord ){fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 varSteps = loadValue(vSteps);//(x:steps/y:rmPrec/z:maxd/w:mapPrec)\n    \n    // init\n    if (iFrame < 10) \n        varSteps = vec4(250.,0.00001, 50., 0.5);//(x:steps/y:rmPrec/z:maxd/w:mapPrec)\n    \n    if (iTimeDelta < 30.)\n    {\n        if (varSteps.x > 100.) varSteps.x -= 10.;\n\t\tif (varSteps.y < 0.1) varSteps.y += 0.001;\n        if (varSteps.z > 5.) varSteps.z -= 1.;\n   \t\tif (varSteps.w < 1.0) varSteps.w += 0.01;\n    }\n    else\n    {\n    \tvarSteps = vec4(250.,0.00001, 50., 0.5);//(x:steps/y:rmPrec/z:maxd/w:mapPrec)\n    }\n    \n    storeValue(vSteps, varSteps, fragColor, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}