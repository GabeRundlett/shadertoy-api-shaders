{
    "Shader": {
        "info": {
            "date": "1581697083",
            "description": "A motion design exercice I tried to solve with shaders and simple cue/easing.\nhttp://www.movecraft.com/wnm205-module-02/\n\nEach animation is 2 seconds long and tries to describe these 5 words:\n1. Bold\n2. Playful\n3. Nervous\n4. Witful\n5. Ordered",
            "flags": 0,
            "hasliked": 0,
            "id": "tl3XDj",
            "likes": 8,
            "name": "Four Black Squares",
            "published": 3,
            "tags": [
                "2d",
                "motion",
                "design",
                "easing"
            ],
            "usePreview": 0,
            "username": "lsdlive",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "/*\n@lsdlive\nCC-BY-NC-SA\n\nFour Black Squares.\n\nA motion design exercice I tried to solve with shaders and simple cue/easing.\nhttp://www.movecraft.com/wnm205-module-02/\n\nEach animation is 2 seconds long and tries to describe these 5 words:\n1. Bold\n2. Playful\n3. Nervous\n4. Witful\n5. Ordered\n\n\nWith the help of:\nhttps://thebookofshaders.com/examples/?chapter=motionToolKit\n\n*/\n\n#define AA 3.\n\n#define pi 3.141592\n#define time iTime\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 col1 = vec3(.133, .137, .137);\nvec3 col2 = vec3(.941, .965, .941);\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat fill(float d) {\n    return 1. - smoothstep(0., AA / iResolution.x, d);\n}\n\nfloat rect(vec2 p, vec2 size) {\n  vec2 d = abs(p) - size;\n  return min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\nfloat linearstep(float begin, float end, float t) {\n    return clamp((t - begin) / (end - begin), 0., 1.);\n}\n\nfloat tri(float x) {\n    return abs(mod((x + .5) * 2., 2.) - 1.);\n}\n\n// https://thebookofshaders.com/edit.php?log=160909064320\nfloat easeInOutExpo(float t) {\n    if (t == 0. || t == 1.) {\n        return t;\n    }\n    if ((t *= 2.) < 1.) {\n        return .5 * exp2(10. * (t - 1.));\n    } else {\n        return .5 * (-exp2(-10. * (t - 1.)) + 2.);\n    }\n}\n\nfloat easeInOutQuad(float t) {\n    if ((t *= 2.) < 1.) {\n        return .5 * t * t;\n    } else {\n        return -.5 * ((t - 1.) * (t - 3.) - 1.);\n    }\n}\n\nfloat easeInOutCubic(float t) {\n    if ((t *= 2.) < 1.) {\n        return .5 * t * t * t;\n    } else {\n        return .5 * ((t -= 2.) * t * t + 2.);\n    }\n}\n\nfloat easeOutQuad(float t) {\n    return -1. * t * (t - 2.);\n}\n\nfloat easeInQuad(float t) {\n    return t * t;\n}\n\nfloat easeInExpo(float t) {\n    return (t == 0.) ? 0. : pow(2., 10. * (t - 1.));\n}\n\nfloat bold(vec2 uv) {\n    uv *= 1.3;\n    float t1 = linearstep(.5, 1., fract(time*.5));\n    float t2 = linearstep(0., .8, fract(time*.5));\n    t2 = easeInExpo(t2);\n    t1 = easeInOutExpo(t1);\n    \n    // alternative\n    /*\n    float s1 = mix(.1, .3, t1);\n    float offs = mix(.2, .4, t1);//.2\n    float alpha = mix(.5, 1., t1);\n    float mask = fill(rect(uv+vec2(0, .2), vec2(s1))) * alpha;\n    mask += fill(rect(uv+vec2(offs, .2), vec2(.1)));\n    mask += fill(rect(uv-vec2(0, -.2 + offs), vec2(.1)));\n    mask += fill(rect(uv-vec2(offs, -.2), vec2(.1)));\n\t*/\n    \n    float s1 = mix(.05, .3, t1);\n    float offs = mix(.7, .42, t2);//.2\n    float alpha = mix(.5, 1., t1);\n    float mask = fill(rect(uv+vec2(0, .2), vec2(s1))) * alpha;\n    mask += fill(rect(uv+vec2(offs, .2), vec2(.12)));\n    mask += fill(rect(uv-vec2(0, -.2 + offs), vec2(.12)));\n    mask += fill(rect(uv-vec2(offs, -.2), vec2(.12)));\n    \n    return mask;\n}\n\nfloat playful(vec2 uv) {\n    float t1 = fract(time);\n    //t1 = easeInOutQuad(t1);\n    \n    float alpha = mix(.5, .8, tri(t1));;\n    \n    vec2 south = vec2(0, .3);\n    vec2 east = vec2(.3, 0);\n    vec2 north = vec2(0, -.3);\n    vec2 west = vec2(-.3, 0);\n    \n    \n    vec2 pos1 = mix(south, east, t1);\n    vec2 pos2 = mix(east, north, t1);\n    vec2 pos3 = mix(north, west, t1);\n    vec2 pos4 = mix(west, south, t1);\n    \n    float mask = fill(rect((uv-pos1)*r2d(t1*pi), vec2(.1))) * alpha;\n    mask += fill(rect((uv-pos2)*r2d(-t1*pi), vec2(.1))) * alpha;\n    mask += fill(rect((uv-pos3)*r2d(t1*pi), vec2(.1))) * alpha;\n    mask += fill(rect((uv-pos4)*r2d(-t1*pi), vec2(.1))) * alpha;\n    \n    return mask;\n}\n\nfloat nervous(vec2 uv) {\n    float t1 = fract(time*.5);\n    t1 = easeInOutQuad((t1));\n    \n    float offs = mix(.5, .25, t1);\n    float alpha = .5;\n    float shake = sin(time*30.*pi)*.01;\n    float mask = fill(rect(uv+vec2(shake, .2), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(offs, .2), vec2(.12)));\n    mask += fill(rect(uv-vec2(0, -.2 + offs), vec2(.12)));\n    mask += fill(rect(uv-vec2(offs, -.2), vec2(.12)));\n    \n    return mask;\n}\n\nfloat wistful(vec2 uv) {\n    float t1 = fract(time*.5);\n    t1 = easeInOutQuad(t1);\n    \n    float dx = mix(0., .3, t1);\n    \n    float alpha = mix(1., 0., t1);\n    float mask = 0.;\n    mask += fill(rect(uv+vec2(dx, -.37), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(-dx, -.12), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(dx, .12), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(-dx, .37), vec2(.1))) * alpha;\n    return mask;\n}\n\nfloat ordered(vec2 uv) {\n    float t1 = fract(time);\n    t1 = easeInOutExpo(t1);\n    \n    if(fract(time*.5) < .5)\n    \tuv.x += mix(.4, 0., t1);\n    else\n    \tuv.x += mix(0., -.4, t1);\n    \n    float alpha = 1.;//mix(1., 0., t1);\n    float mask = 0.;\n    mask += fill(rect(uv+vec2(0, -.37), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(0, -.12), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(0, .12), vec2(.1))) * alpha;\n    mask += fill(rect(uv+vec2(0, .37), vec2(.1))) * alpha;\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float t1 = fract(time*.1);\n    float mask = 0.;\n    if(t1 < 2./10.)\n        mask = bold(uv);\n    else if(t1 < 4./10.)\n        mask = playful(uv);\n\telse if(t1 < 6./10.)\n        mask = nervous(uv);\n    else if(t1 < 8./10.)\n        mask = wistful(uv);\n\telse\n        mask = ordered(uv);\n        \n\t\n    //mask = bold(uv);\n    \n    mask = clamp(mask, 0., 1.);\n    vec3 col = mix(col1, col2, 1. - mask);\n    \n    col += .05 * texture(iChannel0, uv).r * texture(iChannel1, uv).r;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}