{
    "Shader": {
        "info": {
            "date": "1475014129",
            "description": "Something Beautiful",
            "flags": 64,
            "hasliked": 0,
            "id": "ltV3Dw",
            "likes": 5,
            "name": "Something Beautiful",
            "published": 3,
            "tags": [
                "something",
                "beautiful"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 630
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR+1.0/GR)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\n\n//-----------------LOGO COLOR/POSITION/SIZE MACROS-----------------\n\n#define WHITE (vec4(vec3(255.0,255.0,255.0)/255.0, 1.0))\n#define BROWN (vec4(vec3(165.0,42.0,42.0)/255.0, 1.0))\n#define SKIN (vec4((sin(time+seedling)*.25+.5)*WHITE.rgb+(cos(time-seedling)*.25+.75)*BROWN.rgb, 1.0))\n#define CLOTHING (vec4((flux(time+seedling)+(sin(-time/GR/PI-seedling)*.25+.5))*(sin(-time/E/PI)*.125+.875), 1.0))\n#define RED (vec4(vec3(255.0,0.0,0.0)/255.0, 1.0))\n#define GREEN (vec4(vec3(0.0,255.0,0.0)/255.0, 1.0))\n#define BLUE (vec4(vec3(0.0,0.0,255.0)/255.0, 1.0))\n#define YELLOW (vec4(vec3(255.0,255.0,0.0)/255.0, 1.0))\n\n#define female_size (1.0/GR)\n#define female_target (vec2(-sqrt(2.0)/GR/2.0, sqrt(2.0)/GR-female_size/GR))\n#define male_size (1.0/GR)\n#define male_target (vec2(-female_target.x, female_target.y))\n\nfloat saw(float x)\n{\n    x /= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n\n//-----------------SEEDLINGS-----------------------\nfloat seedling = 0.0;\nvec2 offset = vec2(0.0);\nfloat last_height = 0.0;\nfloat scale = 1.0;\nfloat extraTurns = 0.0;\nfloat aspect = 1.0;\n\n//-----------------AUDIO ALGORITHM-----------------\n\nfloat lowAverage()\n{\n    const int iters = 32;\n    float product = 1.0;\n    float sum = 0.0;\n    \n    float smallest = 0.0;\n    \n    for(int i = 0; i < iters; i++)\n    {\n        float sound = texture(iChannel0, vec2(float(i)/float(iters), 0.5)).r;\n        smallest = \n        \n        product *= sound;\n        sum += sound;\n    }\n    return max(sum/float(iters), pow(product, 1.0/float(iters)));\n}\n\n//-----------------SIMPLEX ALGORITHM-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n//-----------------LOGO RENDERING CODE-----------------\n\nvec4 garmet(vec2 uv)\n{\n    float top = smoothstep(0.0, 0.1, (max(-uv.y, 0.0)-abs(uv.x*PI/E)))*smoothstep(0.0, 0.1, (.5/GR+uv.y));\n    return CLOTHING*smoothstep(.25, .5, top);\n}\nvec4 skirt(vec2 uv)\n{\n    float bottom = smoothstep(0.0, 0.1/GR, (max(-uv.y, 0.0)-abs(uv.x*GR*2.0)))*smoothstep(0.0, 0.1, (.75/GR+uv.y))*smoothstep(0.0, .1/GR, -uv.y-1.0/GR/PI);\n    return CLOTHING*smoothstep(.25, .5, bottom);\n}\nfloat pretty_face(vec2 uv)\n{\n    float r = .5/pow(GR, PI);\n    float face = smoothstep(0.0, 0.5/GR, 1.0-length(uv)/r);\n    \n    return face;\n}\nvec4 female(vec2 uv, vec2 o)\n{\n    vec2 uv2 = uv - o - female_target;\n    uv2 *= female_size;\n    float arms = (1.0-smoothstep(0.0, 0.1/GR, abs((-uv2.y/GR)-abs(uv2.x*GR))))\n        \t\t\t*smoothstep(0.0, .1/GR, smoothstep(0.35/GR, .75/GR, (-uv2.y)))\n        \t\t\t*(smoothstep(0.0, .1/GR, .75/GR-length(uv2)));//*smoothstep(0.0, 0.1/GR, (-uv2.y)))*smoothstep(0.0, 0.1, (-.25/GR-uv2.y));\n    float legs = (1.0-smoothstep(0.0, 0.1/GR, abs(.1/GR-abs(uv2.x/GR)-abs(uv2.x))))*smoothstep(0.0, 0.25, (1.0-smoothstep(0.0, 0.125, abs(.5/GR+(uv2.y/GR)))));//*(1.0-smoothstep(0.0, 0.1, -.25/GR+abs(.1/GR-abs(uv2.y))));\n    vec4 top = garmet(uv2);\n    vec4 bottom = skirt(uv2);\n    \n    float top_weight = length(top.rgb);\n    float bottom_weight = length(bottom.rgb);\n    \n    \n    vec4 outfit = top+bottom;\n    \n    float face = pretty_face(uv2);\n    \n    float weight_outfit = clamp(length(outfit.rgb)-face, 0.0, 1.0);\n    float weight_arms = arms*clamp(1.0-weight_outfit, 0.0, 1.0);\n    float weight_legs = legs;\n    float weight_face = face;\n    weight_legs *= 1.0-weight_outfit;\n    \n    float body = (arms+face+legs*(1.0-clamp(weight_outfit-weight_legs, 0.0, 1.0)));\n    float cloths = clamp(1.0-weight_face-weight_arms, 0.0, 1.0);\n    \n    float contrast = pow(1.0-smoothstep(0.0, 1.0/GR, abs(min(cloths, body)-.5)), PI);\n    \n    return (SKIN*body+outfit*cloths)-vec4(vec3(contrast), 0.0);\n}\nfloat shirt(vec2 uv)\n{\n    float top = smoothstep(0.1, .125, 1.0-max(abs(uv.x)*1.5, abs(uv.y*GR+GR/PI/2.0))*GR*PI);\n    return top;\n}\n\nfloat pants(vec2 uv)\n{\n    float bottom = smoothstep(0.125, .25, 1.0-max(abs(uv.x)*2.0, abs(uv.y*GR+GR/PI))*GR*PI);\n    return bottom;\n}\nvec4 handsome_face(vec2 uv, vec2 o)\n{\n    return vec4(0.0);\n}\nvec4 male(vec2 uv, vec2 o)\n{\n    vec2 uv2 = uv - o - male_target;\n    uv2 *= male_size;\n    float arms = (1.0-smoothstep(0.0, 0.1/GR, abs(1.0/GR/PI-abs(uv2.x)-abs(uv2.x))))*smoothstep(0.0, 0.25, (1.0-smoothstep(0.0, 0.1/GR, abs(-1.0/GR/PI-(uv2.y/GR)))));\n    float legs = (1.0-smoothstep(0.0, 0.1/GR, abs(.1/GR-abs(uv2.x/GR)-abs(uv2.x))))*smoothstep(0.0, 0.25, (1.0-smoothstep(0.0, 0.125, abs(.5/GR+(uv2.y/GR)))));//*(1.0-smoothstep(0.0, 0.1, -.25/GR+abs(.1/GR-abs(uv2.y))));\n    float top = shirt(uv2);\n    float bottom = pants(uv2);\n    vec4 outfit =(CLOTHING*top\n        \t\t+CLOTHING*bottom)*vec4(vec3(1.0-top*bottom), 1.0)+\n        top*bottom*CLOTHING;\n    float face = pretty_face(uv2);\n    \n    float weight_outfit = clamp(length(outfit.rgb)-face, 0.0, 1.0);\n    float weight_arms = arms*clamp(1.0-weight_outfit, 0.0, 1.0);\n\n    float weight_legs = length(legs);\n    float weight_face = length(face);\n    weight_legs *= 1.0-weight_outfit;\n    \n    float body = (arms+face+legs*(1.0-clamp(weight_outfit-weight_legs, 0.0, 1.0)));\n    float cloths = clamp(1.0-weight_face-weight_arms, 0.0, 1.0);\n    \n    float contrast = pow(1.0-smoothstep(0.0, 1.0/GR, abs(min(cloths, body)-.5)), PI);\n    \n    return (SKIN*body+outfit*cloths)-vec4(vec3(contrast), 0.0);\n}\n\nvec4 striped_circle(vec2 uv, vec2 o)\n{\n    uv = uv - o;\n    vec2 uv0 = uv;\n    float angle = cos(time/PI/GR)*PI;\n    vec2 up = rotatePoint(vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), angle).xy;\n    vec2 right = rotatePoint(vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), angle-PI/2.0).xy;\n    \n    uv = vec2(dot(uv, up), dot(uv, right));\n    \n    float fade = 1.0/GR/PI;\n    \n    float circle = (smoothstep(0.0, fade/E, clamp(1.0-length(uv), 0.0, 1.0)));\n        \n    float scale = (5.0+sin(time))*PI;\n    uv *= scale;\n    \n    float inversion = smoothstep(-1.0/GR/PI, 1.0/GR/PI, uv0.x)*2.0-1.0;\n    \n    float outline = max(max(pow(sqrt((1.0-(circle)))*circle, fade), \n                            (circle-abs(inversion)*GR)), \n       (1.0-smoothstep(-.1/GR, .1/GR, uv0.y))*smoothstep(0.0, .1, circle/PI/GR/2.0-abs(abs(uv0.y)-abs(uv0.x))));\n    \n    float contrast = smoothstep(0.0, 1.0/GR, circle);\n    \n\tfloat x = smoothstep(0.5, 1.0, sin(uv.x)*.5+.5);\n\tfloat y = smoothstep(0.5, 1.0, sin(uv.y)*.5+.5)*inversion;\n\n    vec4 phase1 = vec4((flux(time*GR+x*PI)+(sin(PI/2.0+time+x*PI)*.25+.25))*(sin(-time+x*PI)*.125+.625), 1.0);\n    vec4 phase2 = vec4((flux(PI+time*GR+y*PI)+(sin(PI+PI/2.0+time+y*PI)*.25+.25))*(sin(PI-time+y*PI)*.25+.625), 1.0);\n    vec4 phase3 = vec4((flux(PI-time*GR-x*PI)+(sin(PI-PI/2.0-time-x*PI)*.25+.25))*(sin(time-x*PI)*.125+.625), 1.0);\n    \n    vec4 stripes = (x*phase1*(1.0-y)+(y)*phase2*(1.0-x))*(1.0-smoothstep(0.0, .5, x*y))+phase3*smoothstep(0.0, .5, abs(x*y));\n    \n    vec3 peace = clamp(flux(seedling+time), 0.0, 1.0);\n    \n    vec3 back = clamp(flux(seedling+time*inversion)*saw(-seedling+time*inversion)+saw(seedling/GR+time/GR*inversion), 0.0, 1.0);\n    \n    return vec4(outline*peace+(1.0-outline)*\n                vec3(stripes*contrast), contrast);\n}\n\nvec4 everything(vec2 uv, vec2 o)\n{\n    vec4 circle = striped_circle(uv, o);\n    vec4 guy = male(uv, o);\n    vec4 girl = female(uv, o);\n    \n    float weight_circle = length(circle);\n    float weight_guy = length(guy);\n    float weight_girl = length(girl);\n    \n    return clamp(vec4((circle*clamp(1.0-weight_guy-weight_girl, 0.0, 1.0)+guy+girl).rgb, circle.a), 0.0, 1.0);\n}\n\n//-----------------ITERATED FUNCTION SYSTEM-----------------\n\nvec2 mobius(vec2 uv)\n{\n    float r = length(uv);\n    uv = normalize(uv)/log(r);\n    \n    float turns = 6.0*extraTurns;\n    float theta = atan(uv.y, uv.x);\n    \n    uv = vec2((theta*turns), (turns/(length(uv))-time*PI));\n    \n    seedling += floor(uv.x/PI)+floor(uv.y/PI);\n    \n    return vec2(saw(uv));\n}\n\nvec2 iterate(vec2 uv, vec2 dxdy, out float magnification)\n{\n    uv += offset;\n    \n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n    vec2 d = uv+vec2(0.0, \t\tdxdy.y);//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = mobius(a);\n    vec2 mb = mobius(b);\n    vec2 mc = mobius(c);\n    vec2 md = mobius(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n\tfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);\n    \n    magnification = stretch;\n    \n    return mobius(uv);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = E;\n    uv = uv*scale-scale/2.0;\n    \n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect;\n    \n    vec2 uv0 = uv;\n    \n\tconst int max_iterations = 4;\n    int target = max_iterations;//-int(saw(spounge)*float(max_iterations)/2.0);\n    \n    float antispeckle = 1.0; \n    float magnification = 1.0;\n  \n\tvec4 color = vec4(0.0);\n    float border = 1.0;\n    \n    seedling = 0.0;\n    \n        \n    offset = sin(vec2(time+seedling,\n                      -time-seedling))*(.5/E);\n    \n    color += everything(uv, -offset);\n    border *= (1.0-color.a);//*antispeckle;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n        \n        seedling = float(i);\n        extraTurns = float(i*i+1);\n        \n        uv = (iterate(uv0, .5/iResolution.xy, magnification)*2.0-1.0);\n        uv = uv*(saw(time+seedling)+1.0);\n        \n    \tuv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, -1.0), sin(seedling+time)*PI).xy;\n\n        color += everything(uv, vec2(0.0))*border*antispeckle;\n        \n        border *= smoothstep(1.0-1.0/GR/E/PI, 1.0, 1.0-color.a);//*antispeckle;\n        \n        float weight = smoothstep(0.0, 0.25, magnification);\n        antispeckle *= 1.0/magnification;\n    }\n    \n    fragColor = texture(iChannel0, uv);\n    \n    vec2 o = 0.0*vec2(cos(time), sin(time));\n    \n    //fragColor = vec4(everything(uv*2.0-1.0, o).a);\n    //fragColor = everything(uv*2.0-1.0, o);\n    \n    fragColor = vec4(everything(uv*2.0-1.0, o).a);\n    fragColor = vec4(uv, 0.0, 1.0);\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 4860,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cardell/imagine-remastered"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}