{
    "Shader": {
        "info": {
            "date": "1651344333",
            "description": "Yet another implementation of Conway's Game of Life.",
            "flags": 48,
            "hasliked": 0,
            "id": "7lsBzl",
            "likes": 16,
            "name": "Shader of Life",
            "published": 3,
            "tags": [
                "2d",
                "conway",
                "gameoflife",
                "multipass",
                "automaton"
            ],
            "usePreview": 0,
            "username": "Yetman",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// -------------------------------------------------------------------\n// Shader of Life: Yet Another Implementation of Conway's Game of Life\n// -------------------------------------------------------------------\n\n// Buffer A: (Inputs: iChannel0 <- Buffer A)\n//   Implements of Conway's Game of Life and handles the user input.\n//   To keep thing interesting over time, the liveness of the border cells are drived by a pseudo random function.\n//\n// Buffer B: (Inputs: iChannel0 <- Buffer A, iChannel1 <- Buffer B)\n//   Keeps track of the energy left behind in each cell.\n//   If the texel's energy is 1.0, it contains a live cell.\n//   If the cell dies, the texel's energy dissipate over time.\n//\n// Image: (Inputs: iChannel0 <- Buffer B)\n//   Maps the cell energy to a fragment color.\n\n// -------------------------------------------------------------------\n\n// User Interactions:\n//  - Hold the mouse button and drag to add live cells within brush radius.\n//  - While Holding SHIFT, Hold the mouse button and drag to kill cells within brush radius.\n//  - If you hold CTRL, the brush will be disabled. This allow for saving an image without adding/killing cells.\n//  - Press space to kill all the cells.\n\n// -------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // procedural palette generation: https://iquilezles.org/articles/palettes/\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.2, 1.3, 1.5);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n    \n    float energy = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    vec3 color = a + b * cos(radians(360.0) * (c * energy + d));\n    fragColor.rgb = energy * color;\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated seeding method. \n\nfloat PHI = 1.61803398874989484820459;  // Φ = Golden Ratio   \n\nfloat gold_noise(in vec2 xy, in float seed){\n       return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\n// -----------------------------------------------------------------------------\n\n// The probability that a texel at the border (or inside the brush) will be live\n#define EMERGE_PROP 0.25\n\n#define RND_CELL(pos) vec4(step(gold_noise(pos, iTime + 0.1), EMERGE_PROP))\n\n#define BRUSH_RADIUS 10.0\n\n#define SHIFT_ASCII 16\n#define CTRL_ASCII 17\n#define SPACE_ASCII 32\n#define IS_PRESSED 0\n#define JUST_PRESSED 1\n\n#define KEY(ascii, event) (texelFetch(iChannel1, ivec2(ascii, event), 0).x != 0.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Press Space to bring the Apocalypse.\n    if(KEY(SPACE_ASCII, JUST_PRESSED))\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    ivec2 coord = ivec2(fragCoord);\n    ivec2 resolution = ivec2(iResolution.xy);\n    \n    if(coord.y == 0 || coord.y == resolution.y - 1 ||coord.x == 0 || coord.x == resolution.x - 1){\n        fragColor = RND_CELL(fragCoord);\n        return;\n    }\n    \n    // Only add/kill cells if CTRL is not pressed. This was added to allow saving an image with drawing cells.\n    if(!KEY(CTRL_ASCII, IS_PRESSED) && iMouse.z > 0.0 && iMouse.w < 0.0 && distance(iMouse.xy, fragCoord) <= BRUSH_RADIUS){\n        if(KEY(SHIFT_ASCII, IS_PRESSED)) // If SHIFT is pressed, kill all cells within brush radius\n        {\n            fragColor = vec4(0.0);\n            return;\n        } \n        else \n        {\n            fragColor = RND_CELL(fragCoord);\n            return;\n        }\n    }\n    \n    \n    const int NEIGHBOR_COUNT = 8;\n\n    const ivec2 NEIGHBORS[NEIGHBOR_COUNT] = ivec2[NEIGHBOR_COUNT](\n        ivec2(-1, -1), ivec2( 0, -1), ivec2( 1, -1),\n        ivec2(-1,  0),                ivec2( 1,  0),\n        ivec2(-1,  1), ivec2( 0,  1), ivec2( 1,  1)\n    );\n\n    int count = 0;\n    for(int index = 0; index < NEIGHBOR_COUNT; index++)\n    {\n        count += int(texelFetch(iChannel0, coord + NEIGHBORS[index], 0).r != 0.0);\n    }\n\n    bool result = texelFetch(iChannel0, coord, 0).r != 0.0;\n    if(result)\n    { // Alive\n        if(count < 2 || count > 3) result = false; // Death due to under- or over-population\n    } \n    else \n    { // Dead\n        if(count == 3) result = true; // Birth of a new cell\n    }\n\n    fragColor = vec4(result);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// How fast the energy in a texel dissipates after the cell dies\n#define DISSIPATION_RATE 0.001\n\n// Inputs:\n//  iChannel 0 <- Buffer A ... The Game of Life 2D grid of live cells.\n//  iChannel 1 <- Buffer B ... The Energy left behind by the last live cell that occupied the texel.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0, coord, 0) + (1.0 - DISSIPATION_RATE) * texelFetch(iChannel1, coord, 0);\n    fragColor = min(vec4(1.0), fragColor); // Clamp the energy value to avoid values > 1.0\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}