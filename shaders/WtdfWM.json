{
    "Shader": {
        "info": {
            "date": "1612871475",
            "description": "Sampling a checkerboard tunnel with a blue noise-like sampling pattern that uses 3 sub-samples per pixel.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtdfWM",
            "likes": 6,
            "name": "3 Sub-Samples Pattern Test",
            "published": 3,
            "tags": [
                "noise",
                "antialiasing",
                "blue",
                "sampling",
                "aa"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 556
        },
        "renderpass": [
            {
                "code": "\n/*\nSampling a checkerboard tunnel with a blue noise-like sampling pattern that uses 3 sub-samples per pixel.\n\nRelated:\n    https://www.shadertoy.com/view/3tdBWM - \"Blue Noise via 3 Sub-Samples\"   (plot of the used sampling pattern)\n    https://www.shadertoy.com/view/WltfDM - \"3 Sub-Samples Pattern Spectrum\" (plot of the spectral response of the pattern)\n*/\n\n#define clamp01(x) clamp(x, 0.0, 1.0)\n\nconst float Pi = 3.14159265359;\nconst float RcpPi = 1.0 / Pi;\n\nvec3  GammaEncode(vec3  x) {return pow(x, vec3(1.0 / 2.2));}\n\n// checkerboard tunnel\nfloat Pattern(vec2 uv)\n{\n    #if 1\n    uv += vec2(cos(iTime), sin(iTime));\n    #endif\n    \n    vec2 vec = (uv - iResolution.xy * 0.5) / iResolution.x;\n    vec3 rdir = normalize(vec3(vec, 1.0));\n    \n    //vec3 n = normalize(rdir - cam.Front * dot(rdir, cam.Front));\n    vec3 n = normalize(vec3(rdir.xy, 0.0));\n    float z = 1.0 / dot(rdir, n);\n    \n    float s = 8.0;\n    bool sz = fract(z*s*0.5) < 0.5;   \n    //bool sc = fract(atan(dot(n, cam.Right), dot(n, cam.Up)) * RcpPi * 2.0 * s) < 0.5;\n    bool sc = fract(atan(n.x, n.y) * RcpPi * 2.0 * s) < 0.5;\n    float p = sz == sc ? 1.0 : 0.0;   \n \n    //p = cos(dot(uv, uv) * 0.003) * 0.5 + 0.5;\n    \n    vec *= 96.0;\n    //p = sin(dot(vec, vec)) * 0.5 + 0.5;\n    \n    return p;\n}\n// http://marc-b-reynolds.github.io/math/2016/03/29/weyl_hash.html\nuint WeylHash(uvec2 c) \n{\n    return ((c.x * 0x3504f333u) ^ (c.y * 0xf1bbcdcbu)) * 741103597u; \n}\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{     \n    vec2 uv = uv0.xy - 0.5;   \n\tvec2 tex = uv0.xy / iResolution.xy;\n    \n    bool flip = (uint(iFrame) & 1u) != 0u;\n    \n    float v = 0.0;\n    \n    uvec2 uvi = uvec2(uv);\n    if(((uvi.x ^ uvi.y) & 4u) == 0u) uvi   = uvi.yx;\n\tif(((uvi.x        ) & 4u) == 0u) uvi.x =-uvi.x;\n\n    // constants of the 1d and 2d Roberts sequences\n    const uint rPhi1  = 2654435761u;\n    const uint rPhi2a = 3242174893u;\n    const uint rPhi2b = 2447445397u;\n\n    float u = float((uvi.x * rPhi2a) + (uvi.y * rPhi2b)) * (1.0 / 4294967296.0);\n    uint  h = WeylHash(uvi);\n\n    //u = float(WeylHash(uvi ^ uvec2(rPhi2a, rPhi2b))) * (1.0 / 4294967296.0);\n    //if(flip) u += 1.5;\n\n  #if 1\n    for(float i = 0.0; i < 3.0; ++i) \n    {\n        float ang = (Pi*0.666667) * (i+u);\n        \n        vec2 off = vec2(cos(ang), sin(ang));\n        \n      #if 0\n        off *= 0.3333333;\n      #elif 0\n        off *= i == 0.0 ? 0.4 : 0.333333;\n      #elif 1\n        off *= 0.4;\n      #elif 1\n        off *= float(h+uint(i)*rPhi1) * (0.111111/4294967296.0) + 0.333333;\n      #elif 1\n        off *= float(h+uint(i)*rPhi1) * (0.25/4294967296.0) + 0.25;\n      #else\n        off *= float(h+uint(i)*rPhi1) * (0.5/4294967296.0);\n      #endif\n      \n        v += Pattern(uv0 + off); \n    }\n    v *= 0.333333;\n  #else\n    for(float i = 0.0; i < 2.0; ++i) \n    {\n        float ang = Pi * (i+u);\n        \n        vec2 off = vec2(cos(ang), sin(ang));\n        \n        off *= 0.333333;\n      \n        v += Pattern(uv0 + off); \n    }\n    v *= 0.5;\n  #endif\n  \n  \n    //v = Pattern(uv0);//no AA\n  \n    vec3 col = vec3(v);\n    \n    outCol = vec4(GammaEncode(col), 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}