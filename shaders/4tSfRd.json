{
    "Shader": {
        "info": {
            "date": "1516808109",
            "description": "worldspace texture sampling using 1 texture sample, mainly designed for terrain texturing",
            "flags": 0,
            "hasliked": 0,
            "id": "4tSfRd",
            "likes": 2,
            "name": "worldspace texture sample",
            "published": 3,
            "tags": [
                "texture",
                "sample",
                "worldspace"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 716
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2018\n\n//2d rotation\nmat2 rot2d(float a) {\n    float s = sin(a),c = cos(a);\n    return mat2(c,s,-s,c);\n}  \n\n#define MAX_DISTANCE 1e5\n\n//returns distance to sphere or -1 if no hit\nfloat raySphere(in vec3 rp, in vec3 rd, in vec3 spherePos, in float radius) {\n    \n    vec3 rc = rp-spherePos;\n    float c = dot(rc, rc) - radius*radius;\n    float b = dot(rd, rc);\n\n    float d = b*b - c;\n    float t = -b - sqrt(abs(d));\n\n    if (d < 0.0 || t < 0.0) return MAX_DISTANCE;\n    return t;\n}\n\n#define PI 3.14\n\n//returns distance to plane or MAX_DISTANCE if plane wasn't hit and outputs uv\nfloat rayPlane(vec3 rayPos, vec3 rayDir, vec3 planePos, vec3 planeDir, vec3 planeRight, vec3 planeUp, vec2 planeSize, out vec2 uv) {\n    float dst = dot(planePos-rayPos, planeDir)/dot(rayDir,planeDir);\n    \n    if (dst < 0.) {\n        dst = MAX_DISTANCE;\n    } else {\n        vec3 hp = (rayPos+rayDir*dst)-planePos;\n        uv = vec2(dot(hp,planeRight),dot(hp,planeUp))/planeSize*0.5+0.5;\n        if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) dst = MAX_DISTANCE;\n    }\n\n\treturn dst;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n\tvec2 uv = (fragCoord.xy - R*.5)/R.x;\n    \n    vec3 cameraLocation = vec3(0.,0.,-1.);\n    vec2 cameraRotation = vec2(iTime, cos(iTime*.3)*.5-2.1);\n    \n    vec3 rp = cameraLocation;\n    vec3 rd = normalize(vec3(uv*vec2(1.,-1.),1.));\n\n   \tmat2 yrot = rot2d(cameraRotation.y),\n        xrot = rot2d(cameraRotation.x);\n    rd.yz *= yrot;\n    rd.xz *= xrot;\n    rp.yz *= yrot;\n    rp.xz *= xrot;\n    vec3 pp = rp;\n    rp *= 4.0;\n    \n    vec2 buv;\n    float sr = raySphere(rp,rd,vec3(0.),1.),\n        bpd = rayPlane(rp,rd,-pp,pp,vec3(0),vec3(0),vec2(2),buv);\n    vec3 hp,n;\n    if (bpd < sr) {\n        sr = bpd;\n\t\tn = pp;\n    } else {\n        n = normalize(rp+rd*sr);\n    }\n    hp = rp+rd*sr;\n    if (sr < MAX_DISTANCE) {        \n        //texture coordinates\n        n = abs(n);\n        vec2 suv = (hp.xz*(2.-n.y)+\n            hp.y*max((n.xz-.99)*100.,0.));\n        fragColor = texture(iChannel0,suv)*2./(1.+sr*.1);\n    } else {\n        fragColor = vec4(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}