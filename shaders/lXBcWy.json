{
    "Shader": {
        "info": {
            "date": "1727652274",
            "description": "For use in our Elevation Escalation Series, see it @ https://www.youtube.com/watch?v=OQOvvLBPJyQ&list=PL8NoK5ZtIEVvj1runnWctVYFl9mpzEsCt&ab_channel=H-Med-TheHypotheticalMedicalCo.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXBcWy",
            "likes": 0,
            "name": "Falling Into Quicksand (fork)",
            "published": 3,
            "tags": [
                "3d",
                "disc"
            ],
            "usePreview": 0,
            "username": "hypotheticalmed",
            "viewed": 31
        },
        "renderpass": [
            {
                "code": "\n    // Fork of The Great Disc Migration \n    //  https://www.shadertoy.com/view/XXSyRK \n    \n    // Fork made by www.H-Med.tv\n    \n    \n    \n    \n    \nfloat sdSphere( vec3 p, float s){\n\n    return length(p) - s;\n\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 7.777*(c*t+d) );\n}\n\n\nfloat sdChoob( vec3 p, float s, float k){\n\n    float choob = pow(p.y,2.)/s + pow(p.z,2.)/s + 0.01 * float(p.x >  + k || p.x <  - k);\n    \n    return choob;\n\n}\n\nfloat smin( float a, float b, float k){\n\n    float h = max( k-abs(a-b), 0.0)/k;\n    \n    return min( a,b ) - h*h*h*k*(3./7.);\n\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat map(vec3 p){\n    \n    vec3 q = p;\n    \n    p.z += iTime * 3.77;\n    \n    p = fract(p) - 0.3;\n    \n    p.xy *= rot2D(33.);\n    //p.xz *= rot2D(iTime);\n    \n    \n    q = p;\n    \n    vec3 spherePos = vec3(0, 0, 0);\n    \n    float choob = sdChoob(q - spherePos, 3., .07 );\n \n    return choob;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 3.3 - iResolution.xy) / iResolution.xy;\n    \n    //Guinitialization\n    vec3 ro = vec3(0,0,-33.);\n    vec3 rd = normalize(vec3(uv, 1.7));\n    vec3 col = vec3(0);\n    \n    float t = 0.;\n\n    int i;\n    for(i = 0; i < 777; i++){\n        vec3 p = ro + rd * t;\n        \n        p.y += sin(t * 1.);// * sin(iTime);\n        p.x += cos(t * .3);\n\n        float d = map(p);\n\n        t += d;\n        \n        if (d < 0.0007) break;\n        if (t > 20.) break;\n        \n    }\n    \n    vec3 a = vec3 (0.610, 0.498, 0.650);\n    vec3 b = vec3 (0.388, 0.498, 0.350);\n    vec3 c = vec3 (0.530, 0.498, 0.620);\n    vec3 d = vec3 (3.438, 3.012, 4.025);\ncol = 0.77 * palette(1. - (t * .07 - float(i)*0.307),a,b,c,d);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}