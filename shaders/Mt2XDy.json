{
    "Shader": {
        "info": {
            "date": "1446333781",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "Mt2XDy",
            "likes": 21,
            "name": "derppppp",
            "published": 3,
            "tags": [
                "circles"
            ],
            "usePreview": 0,
            "username": "lycium",
            "viewed": 423
        },
        "renderpass": [
            {
                "code": "float circleedge(vec2 p, vec2 o, float radius)\n{\n    float s = length(p - o) - radius;\n    return 1.0 - exp2(-28000.0 * s*s);\n}\n\n// polynomial smooth min (k = 0.1) from inigo quilez:\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat circlething(vec2 p)\n{\n    float a0 = iTime * 0.065;\n    float r_sin = sin(iTime * 0.35);\n\n    float result = 1.0;\n\n    const float num_a_circles = 2.0 * 7.0, inv_num_a_circles = 1.0 / num_a_circles;\n    const float num_r_circles = 1.0 * 5.0, inv_num_r_circles = 1.0 / num_r_circles;\n    for (float i = 0.0; i < num_r_circles; i += 1.0)\n    for (float j = 0.0; j < num_a_circles; j += 1.0)\n    {\n        float a = a0 + j * 6.283185307179586476925286766559 * inv_num_a_circles;\n\n        float r = (i + 1.0) * inv_num_r_circles * 0.5;\n        vec2 o_i = vec2(cos(a), sin(a)) * r;\n        \n        float r2 = 0.13 + (1.0 - r) * (1.0 + r_sin * r_sin * r_sin) * 0.136;\n        float r_ = sqrt(r2);\n        result = smin(result, circleedge(p, o_i, r_), 0.625);\n    }\n    \n    return max(0.0, result);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 pixel_scale = vec2(0.75 / iResolution.x);\n\n   \tfloat s = 0.0;\n    const float samples = 5.0;\n    const float norm = 1.0 / samples;\n\tfor (float z = 0.0; z < samples; z += 1.0)\n    {\n\t\tfloat a = z * norm * 3.0 * 6.283185307179586476925286766559;\n        float r0 = sqrt(z * norm);\n        float r = r0 * 1.15;\n        vec2 aa = vec2(cos(a), sin(a)) * r;\n        float w = 1.0 - r0;\n\n\t\ts += circlething((fragCoord - iResolution.xy * 0.5 + aa) * pixel_scale) * w;\n    }\n    s *= norm;\n    \n    vec3 c = vec3(15.8, 1.9, 0.4) * (s * 64.0);\n\n    float gamma_r = sqrt(c.x);\n    float gamma_g = sqrt(c.y);\n    float gamma_b = sqrt(c.z);\n    fragColor = vec4(gamma_r, gamma_g, gamma_b, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}