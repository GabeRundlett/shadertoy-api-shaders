{
    "Shader": {
        "info": {
            "date": "1598879543",
            "description": "Folding space to create complex shapes.\nAs usual, there is no beginning or end to it. Best FULL SCREEN, if you can.\nDefines in Common tab.\n\nThanks to Kali and his inspiring \"Spaghetti Ink\" shader maths: https://www.shadertoy.com/view/WtfXzf",
            "flags": 96,
            "hasliked": 0,
            "id": "wt2fWz",
            "likes": 19,
            "name": "Quantum Weirdness",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "quantum",
                "weirdness"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 1049
        },
        "renderpass": [
            {
                "code": "// Quantum Weirdness\n// by Dave Hoskins. August 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tune:-\n// \"Part of the third Zeitgeist album \"Quantum Weirdness\" // May 2012 [Glitchy.Tonic.Records]\"\n// https://soundcloud.com/zeitgeist-aka-r-cake/zeitgeist-subquantum\n\n\n\n// This function checks a rough area around the light source to see if any partly obscures it,\n// reducing the lense flare accordingly, or let's say, guessingly!\n\nfloat obscurePartsOfLight(vec2 p)\n{\n    float a = 0.0, z;\n    float e = .03;\n    float d = length(sunPos - camera);\n    vec2 asp = vec2(iResolution.y/iResolution.x,1.0);\n   \tvec2 texUV = .5+.5*p*asp;\n   \tz = texture(iChannel0, texUV).w;\n    if (z > d) a +=.5;\n    \n    texUV = .5+.5*(p+vec2(e, e))*asp;\n   \tz = texture(iChannel0, texUV).w;\n    if (z > d) a +=.125;\n\n    texUV = .5+.5*(p+vec2(e, -e))*asp;\n   \tz = texture(iChannel0, texUV).w;\n    if (z > d) a +=.125;\n\n    texUV = .5+.5*(p+vec2(-e, -e))*asp;\n   \tz = texture(iChannel0, texUV).w;\n    if (z > d) a +=.125;\n    \n    texUV = .5+.5*(p+vec2(-e, e))*asp;\n   \tz = texture(iChannel0, texUV).w;\n    if (z > d) a +=.125;\n\n    return a;\n}    \n\n\n//---------------------------------------------------------------------------------\nvec3 lenseFlare(vec2 uv,vec3 dir)\n{\n\n    vec3 col = vec3(0);\n    sunLight = normalize(sunPos - camera);\n\n    mat3 inv = transpose(camMat);\n    vec3 cp = inv * (camera - sunPos);\n\n    if (cp.z < 0.0)\n    {\n    \tvec2 sun2d = zProj * cp.xy / cp.z;\n         if (sun2d.x < -1.0 || sun2d.x > 1. || sun2d.y < -1.0 || sun2d.y > 1.) return col;\n\n        float z = obscurePartsOfLight(sun2d);\n        if (z > 0.0)\n        {\n            vec2 uvT = uv - sun2d;\n            uvT = uvT*(length(uvT));\n            float bri = max(dot(dir, sunLight)*.2, 0.0);\n            bri = pow(bri, 3.)*5.*z;\n\n\n            // glare1\n            float glare1 = max(dot(dir,sunLight),0.0);\n            // glare2\n            float glare2 = max(1.7-length(uvT+sun2d*1.8)*2.0, 0.0);\n            //uvT = mix (uvT, uv, -2.3);\n            // glare3\n\t\t\tfloat glare3 = max(1.-pow(length(uvT+sun2d*4.)*3., 2.), 0.0);\n\n            col += bri * vec3(.5, .5, .5)  * pow(glare1, 18.5)*3.5;\n            col += bri * vec3(.5, .5, .2) * pow(glare2, 2.0)*5.;\n          \tcol += bri * vec3(.2,.5, .5) * pow(glare3, 4.0)*5.0;\n        }\n\t}\n    return max(vec3(0.0),col);\n}\n// https://lime-limelemon.blogspot.com/2016/03/aces-filmic-tone-mapping-curve.html\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n    //return -0.053173 + x*(2.170622 + x*(-2.132296 + x*(0.996822 + x*-0.176583)));\n}\n\n//---------------------------------------------------------------------------------\nvoid mainImage( out vec4 colOut, in vec2 fragCoord )\n{\n    \n    float mouseX = iMouse.x / iResolution.x;\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n \n\n           // Setup camera...\n\ttime = getTime(iTime, mouseX);\n     // Setup camera...\n    camera = getCamPos(time);\n\tvec3 lookat = getTarPos(time);\n    camMat = getCamMat(camera, lookat, 0.);\n    zProj = projectZ(uv);\n    vec3 setDir = normalize( vec3(uv, zProj));\n\tvec3 rd = camMat * setDir;\n\tsunPos = getLightPos(time);\n  \n    \n    // Init output...\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    col += lenseFlare(uv, rd);\n\n    col = clamp(col, 0.0, 1.0);\n    col = acesFilm(col);// Filmic filter AND some over-kill contrast. Yeah!!!! :)\n\tcol = col*col*(3.0-2.0*col);\n    \n\t// Finally some border vignette...\n    uv = fragCoord / iResolution.xy;\n    col *= .5+ .5*pow(100.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.6 );\t\n    col *= smoothstep(0.0, 4.0, iTime);\n    #ifdef OFF_LINE\n    col *= smoothstep(374.0, 360.0, iTime);\n    #endif\n\n    colOut = vec4(sqrt(col), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 24207,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/zeitgeist-aka-r-cake/zeitgeist-subquantum"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Quantum Weirdness\n// by Dave Hoskins. August 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nmat2 rotm;\nfloat pix;\nfloat mist;\n\n//--------------------------------------------------------------------------------\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    d+=fract(time*.2);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//--------------------------------------------------------------------------------\nvec3 texCube(sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec3 x = texture(sam, p.yz).xyz;\n\tvec3 y = texture(sam, p.zx).xyz;\n\tvec3 z = texture(sam, p.xy).xyz;\n\treturn (x*abs(n.x) + y*abs(n.y) + z*abs(n.z))/(abs(n.x)+abs(n.y)+abs(n.z));\n}\n\n//--------------------------------------------------------------------------------\nmat2 rot2D(float a) {\n    a=radians(a);\n\tfloat s=sin(a);\n    float c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n//--------------------------------------------------------------------------------\n// With thanks to Kali...\n// https://www.shadertoy.com/view/WtfXzf\nvec2 de(vec3 p)\n{\n    p=abs(15.-mod(p+15.,30.));\n    float md=200.;\n    float s=1.2;\n    float sc=1., id = 0.;\n    vec3 pc;\n    \n    float turn  = sin(time*1.3)*2.3;\n\n    float rot=sin(time*.3)*220.;\n    for (float i = 0.0; i < 1.0; i+= 1.0/4.0)\n    {\n      \tp.xy=abs(p.xy); \n        p=p*s-4./sc;\n        sc*=s;\n        p.xz*=rotm;\n        p.yz*=rot2D(2.+rot);\n        float d=length(p.xz+sin(p.y*turn));\n        if (d<md)\n        {\n        \tmd=d;\n\t\t\tpc=p;\n            id = i;\n        }\n    }\n    float l=max(0.2,(pc.y*.01));\n    return vec2((md/sc)*l, id);\n}\n\n//--------------------------------------------------------------------------------\nfloat shadow( in vec3 ro, in vec3 rd)\n{\n\tfloat res = 1.0;\n    float t = .1;\n\tfloat h;\n\t\n    for (int i = 0; i < 15; i++)\n\t{\n        vec3 p =  ro + rd*t;\n\n\t\th = de(p).x;\n\t\tres = min(6.*h / t, res);\n\t\tt += h;\n\t}\n    //res += t*t*.08; // Dim over distance\n    return clamp(res, .1, 1.0);\n}\n\n//--------------------------------------------------------------------------------\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//--------------------------------------------------------------------------------\nvec2 rayMarch(vec3 ro, vec3 rd, vec2 uv)\n{\n    float l = hash12(uv)*.5;\n    int i;\n    vec2 d2;\n    mist = 0.0;\n    \n    #ifdef OFF_LINE\n    for (i = 0; i < 800; i++)\n    #else\n    for (i = 0; i < 300; i++)\n    #endif\n    {\n        vec3 p = ro + rd * l;\n        d2 = de(p);\n        mist += smoothstep(.12,.03,d2.x);\n        \n        if (abs(d2.x) < .03 || l > 1000.0) break;\n        #ifdef OFF_LINE\n        l += d2.x*.5;\n        #else\n        l += d2.x*.85;\n        #endif\n\t}\n    mist = pow(mist, 3.) * .0001;\n    return vec2(l, d2.y);\n}\n\n\n//--------------------------------------------------------------------------------\nvec3 lighting(vec3 p, vec3 nor, vec3 rd, vec3 mat)\n{\n    sunLight = normalize(sunPos - p);\n    float sh = shadow(p+sunLight*0.2,  sunLight);\n    float c = max(dot(nor, sunLight), 0.0)+abs(nor.y)*sh*.5;\n    vec3 ref = reflect(rd, nor);\n\n    vec3 spec = texture(iChannel0, ref).xyz;\n    vec3 col = ((mat * c)+ pow(spec, vec3(3.0))*.2)*sh;\n     #ifndef OFF_LINE\n    col+= mist * vec3((cos(time*1.51)+.5)*.1, 0.01, (sin(time*1.37)+.5)*0.1)  * sh;\n    #else\n    col+= mist * vec3((cos(time*1.51)+.5)*.1, 0.01, (sin(time*1.37)+.5)*0.1) * .3 * sh;\n    #endif\n    return col;\n    \n}\n\n\n//--------------------------------------------------------------------------------\nvec3 normal(vec3 p, float ds)\n{\n    ds *= ds;\n\tfloat e = min(.4, pix * ds);\n\n    return normalize( vec3( de(p+vec3(e,0.0,0.0)).x - de(p-vec3(e,0.0,0.0)).x,\n                            de(p+vec3(0.0,e,0.0)).x - de(p-vec3(0.0,e,0.0)).x,\n                            de(p+vec3(0.0,0.0,e)).x - de(p-vec3(0.0,0.0,e)).x));\n}\n\n//----------------------------------------------------------------------------------------\nvec3 lightSource(vec3 spotLight, vec3 dir, float dis)\n{\n    float g = 0.0;\n    if (length(spotLight) < dis)\n    {\n\t\tg = pow(max(dot(normalize(spotLight), dir), 0.0), 2000.0);\n    }\n   \n    return vec3(g, g*.8, g*.7)*.8;\n}\n\n\n//--------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    // Normalise coordinates to whatever resolution / ratio we have...\n    float mouseX = iMouse.x / iResolution.x;\n    vec2 uv = (-iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    pix = .1/iResolution.y;\n    \n    rotm=rot2D(-30.);\n    \n    /// Init output...\n    vec3 col = vec3(0.);\n    \n\n    // Setup camera...\n    time = getTime(iTime, mouseX);\n    camera = getCamPos(time);\n\tvec3 lookat = getTarPos(time);\n    \n    camMat = getCamMat(camera, lookat, 0.);\n    zProj = projectZ(uv);\n\n    vec3 setDir = normalize( vec3(uv, zProj));\n\tvec3 rd = camMat * setDir;\n    \n    //mat3 camMat = getCamMat(uv, camera, lookat,0.0, rd);\n    sunPos = getLightPos(time);\n    \n    vec2 dis = rayMarch(camera, rd, fragCoord);\n    if (dis.x < 1000.0)\n    {\n        vec3 p  = camera + rd * dis.x;\n        vec3 nor = normal(p, dis.x);\n        vec3 matA =  pal( dis.y*1.8, vec3(0.4,0.4,0.3),vec3(.4,.2,.2),vec3(.4, .9, .5),vec3(0.4, 0.1, 1.0) );\n        vec3 matB =  pal( dis.x, vec3(0.4,0.4,0.3),vec3(.4,.2,.2),vec3(.4, .9, .5),vec3(0.4, 0.1, 1.0) );\n        matA = mix(matA, matB, .5);\n        col = lighting(p, nor, rd, matA);\n        \n        \n        float fog = exp(-dis.x*.018);\n        col = mix(vec3(0,0,.1), col, fog);\n    }\n  \n/*\n    #ifndef OFF_LINE\n    col+= mist *vec3(0, .0, 0.1) * .5;\n    #else\n    col+= mist *vec3(.0, .0, 0.1) * .04;\n    #endif\n*/\n    \n    col += lightSource(sunPos - camera, rd, dis.x);\n  \n    col = clamp(col, 0.0, 1.0);\n\n    // Output to buffer\n    fragColour = vec4(col,dis.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Quantum Weirdness\n// by Dave Hoskins. August 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// #define OFF_LINE\n// #define USE_TIME_MOUSE\n\nfloat time;\nvec3 camera;\nmat3 camMat;\nmat4 camMat4;\nvec3 sunLight;\nvec3 sunPos;\nfloat zProj;\nfloat fov = 1.;\n//--------------------------------------------------------------------------------\n\nmat3 getCamMat( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\n//--------------------------------------------------------------------------------\nvec3 getCamPos(float t)\n{\n\n    vec3 p = vec3(28.0*sin(t*.31),\n                  28.0*cos(t*.32),\n                  28.0*cos(t*.30));\n    return p;\n}\n\nvec3 getTarPos(float t)\n{\n    vec3 p = vec3(80.0*cos(t*.51),\n                  80.0*sin(t*.6),\n                  80.0*sin(t*.66));\n    return p;\n}\n\n\n//--------------------------------------------------------------------------------\nvec3 getLightPos(float t)\n{\n\tt+=20.;\n    vec3 p = vec3(30.0*sin(t*1.3+5.),\n                  30.0*sin(t*.5),\n                  30.0*sin(t*1.4));\n    return p;\n}\n\n//--------------------------------------------------------------------------------\nfloat getTime(float iTime, float mx)\n{\n    float t = iTime*.1  +270.0;\n    #ifndef OFF_LINE\n    #ifdef  USE_TIME_MOUSE\n\tt += mx*5.0;\n    #endif\n    #endif\n    return t;\n}\nfloat projectZ(vec2 uv)\n{\n    return .75;\n   //return cos(length(uv*.75));\n}\n    \n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}