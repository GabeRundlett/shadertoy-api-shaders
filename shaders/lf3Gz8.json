{
    "Shader": {
        "info": {
            "date": "1711657953",
            "description": "https://cineshader.com/view/ttKGDt",
            "flags": 34,
            "hasliked": 0,
            "id": "lf3Gz8",
            "likes": 1,
            "name": "Fork Phantom St juk 946",
            "published": 3,
            "tags": [
                "raymarching",
                "ifs",
                "phantommode"
            ],
            "usePreview": 0,
            "username": "juk",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "#define pi 2.*asin(1.)\n    \n\nvec3 toRGB(vec3 ybr)\n{\n    return (ybr-vec3(0,.5,.5))*mat3(1.,0.,1.402,1.,-.344136,-0.714136,1.,1.772,0.);\n}\n\nvec3 inp(vec2 coord){\n    return texelFetch(iChannel0, ivec2(coord),0).xyz;\n}\n\nvec3 IDCT8x8( vec2 coord, vec2 xy ) {\n    vec3 res = vec3(0);\n    #define a(x) (x!=0.?1.:1./sqrt(2.))\n    for(float u = 0.; u < 8.; u++){\n    \tfor(float v = 0.; v < 8.; v++){\n            res += inp(coord + vec2(u,v)) *\n                a(u) * a(v) * \n                cos((2.*xy.x+1.)*u*pi/16.) * \n                cos((2.*xy.y+1.)*v*pi/16.); \n    \t}\n    }\n    return res * .25;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.z==0.?iResolution.xy/2.:iMouse.xy;\n    fragColor.w = 0.;\n    vec2 uv = floor(fragCoord-8.*floor(fragCoord/8.));\n    fragColor.xyz = toRGB(IDCT8x8(8.*floor(fragCoord/8.),uv)/256.+.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "precision highp float;\n\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nconst float pi = acos(-1.0);\nconst float pi2 = pi*2.0;\n\nvec2 pmod(vec2 p, float r) {\n    float a = atan(p.x, p.y) + pi/r;\n    float n = pi2 / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\nfloat box( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat ifsBox(vec3 p) {\n    for (int i=0; i<5; i++) {\n        p = abs(p) - 1.0;\n        p.xy *= rot(iTime*0.3);\n        p.xz *= rot(iTime*0.1);\n    }\n    p.xz *= rot(iTime);\n    return box(p, vec3(0.4,0.8,0.3));\n}\n\nfloat map(vec3 p, vec3 cPos) {\n    vec3 p1 = p;\n    p1.x = mod(p1.x-5., 10.) - 5.;\n    p1.y = mod(p1.y-5., 10.) - 5.;\n    p1.z = mod(p1.z, 16.)-8.;\n    p1.xy = pmod(p1.xy, 5.0);\n    return ifsBox(p1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 cPos = vec3(0.0,0.0, -3.0 * iTime);\n    // vec3 cPos = vec3(0.3*sin(iTime*0.8), 0.4*cos(iTime*0.3), -6.0 * iTime);\n    vec3 cDir = normalize(vec3(0.0, 0.0, -1.0));\n    vec3 cUp  = vec3(sin(iTime), 1.0, 0.0);\n    vec3 cSide = cross(cDir, cUp);\n\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir);\n\n    // Phantom Mode https://www.shadertoy.com/view/MtScWW by aiekick\n    float acc = 0.0;\n    float acc2 = 0.0;\n    float t = 0.0;\n    for (int i = 0; i < 64; i++) {\n        vec3 pos = cPos + ray * t;\n        float dist = map(pos, cPos);\n        dist = max(abs(dist), 0.02);\n        float a = exp(-dist*3.0);\n        if (mod(length(pos)+24.0*iTime, 30.0) < 3.0) {\n            a *= 2.0;\n            acc2 += a;\n        }\n        acc += a;\n        t += dist * 0.5;\n    }\n\n    vec3 col = vec3(acc * 0.01, acc * 0.011 + acc2*0.002, acc * 0.012+ acc2*0.005);\n    fragColor = vec4(col, 1.0 - t * 0.03);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "precision highp float;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 offset = texture(iChannel0, p).xy;\n    fragColor = mix(\n        texture(iChannel1, p + (0.5 - offset)*sin(iTime*0.1)*iMouse.x/iResolution.x),\n        texture(iChannel0, p),\n        0.5 + sin(iTime*0.1)*0.5\n    );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 2.*asin(1.)\n\n\nvec3 toYCbCr(vec3 rgb)\n{\n    return rgb*mat3(0.299,0.587,0.114,-0.168736,-0.331264,0.5,0.5,-0.418688,-0.081312)+vec3(0,.5,.5);\n}\n\nvec3 pre( vec2 coord ){\n    return floor(256.*(toYCbCr(texture(iChannel0, coord/iResolution.xy).xyz) - .5));\n}\n\nvec3 DCT8x8( vec2 coord, vec2 uv ) {\n    vec3 res = vec3(0);\n    for(float x = 0.; x < 8.; x++){\n    \tfor(float y = 0.; y < 8.; y++){\n            res += pre(coord + vec2(x,y)) *\n                cos((2.*x+1.)*uv.x*pi/16.) * \n                cos((2.*y+1.)*uv.y*pi/16.); \n    \t}\n    }\n    #define a(x) (x!=0.?1.:1./sqrt(2.))\n    return res * .25 * a(uv.x) * a(uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.z==0.?iResolution.xy/2.:iMouse.xy;\n    \n    fragColor.w = 0.;\n    vec2 uv = floor(fragCoord-8.*floor(fragCoord/8.));\n    float q = (1.+mouse.y/iResolution.y*20.)*float(\nint[](\n  16,  11,  10,  16,  24,  40,  51,  61,\n  12,  12,  14,  19,  26,  58,  60,  55,\n  14,  13,  16,  24,  40,  57,  69,  56,\n  14,  17,  22,  29,  51,  87,  80,  62,\n  18,  22,  37,  56,  68, 109, 103,  77,\n  24,  35,  55,  64,  81, 104, 113,  92,\n  49,  64,  78,  87, 103, 121, 120, 101,\n  72,  92,  95,  98, 112, 100, 103,  99\n)[int(uv.x+uv.y*8.)]);\n    fragColor.xyz = (floor(.5+DCT8x8(8.*floor(fragCoord/8.),uv)/q))*q;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}