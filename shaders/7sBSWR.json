{
    "Shader": {
        "info": {
            "date": "1620059341",
            "description": "It is the MandelBrot Set. It also has pan and zoom. It stores the data for the pan and zoom in Buffer A.\nZoom in press W\nZoom out press S\nThe pan and zoom code could be better, but this was a proof of concept.",
            "flags": 48,
            "hasliked": 0,
            "id": "7sBSWR",
            "likes": 0,
            "name": "MandelBrot Set Pan and Zoom",
            "published": 3,
            "tags": [
                "mouse",
                "math",
                "interactive",
                "zoom",
                "keyboard",
                "pan"
            ],
            "usePreview": 0,
            "username": "Hitthesurf",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "vec2 cmpxcjg(in vec2 c) {\n\treturn vec2(c.x, -c.y);\n}\n\nvec2 cmpxmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nfloat cmpxmodsquared(in vec2 a)\n{\n    return (a.x*a.x+a.y*a.y);\n}\n\nbool isMandelBrot(in vec2 cnum)\n{\n    vec2 currentnum = cnum;\n    float comparnum = cmpxmodsquared(cnum)*1000.0;\n    for(int i = 0; i <= 50; i++)\n    {\n        currentnum = cmpxmul(currentnum,currentnum)+cnum;\n        if (cmpxmodsquared(currentnum)>=comparnum)\n        {\n        //Diverges\n            return false;\n        }\n    }\n    return true;\n}\n\nfloat MandelBrotNum(in vec2 cnum)\n{\n    //0,0 for diverges, other number convergers to that number\n    vec2 currentnum = cnum;\n    float comparnum = cmpxmodsquared(cnum)*1000.0;\n    for(int i = 0; i <= 50; i++)\n    {\n        currentnum = cmpxmul(currentnum,currentnum)+cnum;\n        if (cmpxmodsquared(currentnum)>=comparnum)\n        {\n        //Diverges\n            return 0.0;\n        }\n    }\n    return cmpxmodsquared(currentnum);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    /*float pan_x = (iMouse.x - iMouse.z);\n    float pan_y = (iMouse.y - iMouse.w) - iResolution.y;\n    \n    if (iMouse.z < 0.0)\n    {\n        pan_x = 0.0;\n        pan_y = 0.0;\n    }*/\n    \n    vec4 pan_vals = textureLod(iChannel0, vec2(0.0,0.0),0.0);\n    float Zoom = textureLod(iChannel0, vec2(10.5,10.5)/iResolution.xy, 0.0).x;\n    //Why do i have to add 0.5?\n    \n    float pan_x = pan_vals.x;\n    float pan_y = pan_vals.y;\n    \n    float ylow = -1.0*Zoom; //Could be stored in vec4\n    float yhigh = 1.0*Zoom;\n    float xleft = -1.0*Zoom;\n    float xright = 1.0*Zoom;\n    \n    float R_x = (fragCoord.x-pan_x*pow(Zoom,-1.0))/iResolution.x;\n    float R_y = (fragCoord.y-pan_y*pow(Zoom,-1.0))/iResolution.y;\n    \n    \n    vec2 cmplxnum = vec2(xleft+(xright-xleft)*R_x,ylow + (yhigh - ylow)*R_y);\n    \n    /*if (isMandelBrot(cmplxnum))\n    {\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0,1.0,0.0,1.0);\n    }*/\n    \n    float MandelBrotVal = MandelBrotNum(cmplxnum);\n    if (MandelBrotVal == 0.0)\n    {\n        fragColor = vec4(0.0,1.0,0.0,1.0);\n    }\n    else\n    {\n        fragColor = vec4(MandelBrotVal/0.5,0.0,0.0,1.0);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Keyboard Code to make it work\n// keys are javascript keycode\n// https://www.shadertoy.com/view/ldyGzW\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\n\n//Storage Code For Pan and Zoom\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    //Only run once each frame\n    \n        if (ivec2(fragCoord.xy) == ivec2(0,0) )\n        {\n            //Mouse Pan Stored In Here\n        \n        \n            vec4 prev_info = textureLod(iChannel0, vec2(0.0,0.0),0.0);\n            float Zoom = textureLod(iChannel0, vec2(10.5,10.5)/iResolution.xy,0.0).x;\n            float prev_pan_x = prev_info.x;\n            float prev_pan_y = prev_info.y;\n            \n            float legacy_pan_x = prev_info.z;\n            float legacy_pan_y = prev_info.w;\n            \n            float pan_x = (iMouse.x - abs(iMouse.z))*Zoom + legacy_pan_x;\n            float pan_y = (iMouse.y - abs(iMouse.w))*Zoom + legacy_pan_y;\n    \n            if (iMouse.z < 0.0)\n            {\n                //Mouse has been lifted up\n                legacy_pan_x = prev_pan_x;\n                legacy_pan_y = prev_pan_y;\n                pan_x = legacy_pan_x;\n                pan_y = legacy_pan_y;\n\n            }\n\n            \n            \n            \n            \n            fragColor = vec4(pan_x, pan_y, legacy_pan_x, legacy_pan_y);\n    \n        \n        }\n        \n    //Zoom settings\n    if (ivec2(fragCoord.xy) == ivec2(10,10) )\n    {\n    \n        float x = textureLod(iChannel0, vec2(10.5,10.5)/iResolution.xy,0.0).y;\n        //Number of times zoom in - zoom out has happend\n        \n        x += ReadKey(Key_W)-ReadKey(Key_S);\n        \n        float Zoom = pow(2.71, -x*0.05); //Times all limits by this value\n        \n        //Save Zoom data to bufferA pixel (10,10)\n        fragColor = vec4(Zoom, x,0.0,0.0);\n    }\n    \n    \n}\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}