{
    "Shader": {
        "info": {
            "date": "1527127382",
            "description": "modified from https://www.shadertoy.com/view/lsdBDf",
            "flags": 32,
            "hasliked": 0,
            "id": "4scBDl",
            "likes": 4,
            "name": "CLOUDS",
            "published": 3,
            "tags": [
                "clouds"
            ],
            "usePreview": 0,
            "username": "Squiggle",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "\nvec4 normalMapalize( sampler2D c, in vec2 uv )\n{\n\tfloat x=1.;\n\tfloat y=1.;\n    \n\tfloat M =abs(texture(c, uv + vec2(0., 0.)/ iResolution.xy).r); \n\tfloat L =abs(texture(c, uv + vec2(x, 0.)/ iResolution.xy).r);\n\tfloat R =abs(texture(c, uv + vec2(-x, 0.)/ iResolution.xy).r);\t\n\tfloat U =abs(texture(c, uv + vec2(0., y)/ iResolution.xy).r);\n\tfloat D =abs(texture(c, uv + vec2(0., -y)/ iResolution.xy).r);\n\tfloat X = ((R-M)+(M-L))*.5;\n\tfloat Y = ((D-M)+(M-U))*.5;\n\t\n\tfloat strength =.15;\n\tvec4 N = vec4(normalize(vec3(X, Y, strength)), 1.0);\n\tvec4 col = vec4(N.xyz * 0.5 + 0.5,1.);\n\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n\n    vec3 n = normalMapalize( iChannel0, uv ).rgb;\n    vec3 light = normalize(vec3(0.0,0.0,1.0));\n    float diff= clamp(dot(n,light),0.0,1.0);\n    \n    float val = texture(iChannel0, uv).r; // * diff * 1.0;\n    vec4 col = vec4(0.0);\n    \n    vec4 sky = vec4(vec3(110.0/255.0, 173.0/255.0, 222.0/255.0)-0.01, 1.0);\n    float skyFlag = 0.2;\n    \n    vec4 white = vec4(1.0);\n    float whiteFlag = 0.5;\n    \n    vec4 interior = vec4(vec3(210.0/255.0), 1.0);\n    float intFlag = 0.89;\n    \n    \n    if( val < skyFlag ) col = sky;\n    else if( val < whiteFlag ) col = mix( sky, white, smoothstep(0.0,1.0,(val-skyFlag)/(whiteFlag-skyFlag)) );\n    else if( val < intFlag ) col = mix( white, interior, smoothstep(0.0,1.0,(val-whiteFlag)/(intFlag-whiteFlag)) );\n    else col = interior;\n      \n    fragColor = col;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\n/*\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\t//return textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n*/\n    \nvec2 hash2( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), \n              dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat iqnoise( in vec2 x, float phase )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\t\n\tfloat k = 1.0;\n\t\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec3 o = hash3( p + g );\n        o = 0.5 + 0.5*sin( phase + 6.2831*o );\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va/wt;\n}\n\nfloat voronoi( in vec2 x, float phase )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n    \n    float md = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash2( n + g );\n        o = 0.5 + 0.5*sin( phase + 6.2831*o );\n        vec2 r = g - f + o;\n        float d = dot( r, r );\n        \n       \tmd += 1.0/pow( d, 8.0 );\n    }\n    return 1.0-pow( 1.0/md, 1.0/8.0 );\n}\n\nfloat flowNoise( in vec2 p, float t )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    mat2 R = mat2(cos(t),-sin(t),sin(t),cos(t));\n    if (mod(i.x+i.y,2.)==0.) R=-R;\n\n    float g = 2.*mix( mix( dot( hash2( i + vec2(0,0) ), (f - vec2(0,0))*R ), \n                     dot( hash2( i + vec2(1,0) ),-(f - vec2(1,0))*R ), u.x),\n                mix( dot( hash2( i + vec2(0,1) ),-(f - vec2(0,1))*R ), \n                     dot( hash2( i + vec2(1,1) ), (f - vec2(1,1))*R ), u.x), u.y);\n    return mix( 0.0, 1.0, .5 + .5* g );\n}\n\nfloat Mnoise(in vec2 uv, float t) {\n  return flowNoise(uv, t);                      // base turbulence\n  //return -1. + 2.* (1.-abs(flowNoise(uv, t)));  // flame like\n  //return -1. + 2.* (abs(flowNoise(uv, t)));     // cloud like\n}\n\nfloat fbm4Voronoi( vec2 p, float t )\n{\n    mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n    \n    float f = 0.0;\n    f += 0.5000*voronoi( p, t*0.1 ); p = m*p*2.02;\n    f += 0.2500*voronoi( p, t*0.2 ); p = m*p*2.03;\n    f += 0.1250*voronoi( p, t*0.5 ); p = m*p*2.01;\n    //f += 0.0625*voronoi( p, t*1.0 );\n    f += 0.0625;\n    f = f/0.9375;\n    \n    return f;\n}\n\nfloat fbm4Mnoise( vec2 p, float t )\n{\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float g = 0.0;\n    g += 0.5000*Mnoise( p, t*0.1 ); p = m*p;\n\tg += 0.2500*Mnoise( p, t*0.4 ); p = m*p;\n\tg += 0.1250*Mnoise( p, t*0.7 ); p = m*p;\n\tg += 0.0625*Mnoise( p, t*0.3 ); p = m*p;\n    g += 0.0325*Mnoise( p, t*0.3 ); p = m*p*2.;\n\tg = g * 1.2;\n\n    return g;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 5.;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv += Mnoise( scale*uv, iTime*0.5 ) * 0.01;\n\tfloat f = fbm4Voronoi( scale*uv, iTime*1.0 );\n    float g = fbm4Mnoise( scale*uv, iTime*1.0 );\n    \n    //g = smoothstep( 0.0, 1.0, g-0.05 );\n    //f = smoothstep( 0.0, 1.0, f-0.05 );\n    \n\tfragColor = vec4( vec3(f*g), 1. );\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}