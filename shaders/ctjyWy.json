{
    "Shader": {
        "info": {
            "date": "1692261268",
            "description": "Domain repetition in the shape of a rectangle. The basic shape SDF (square) is evaluated only ONCE. Better than doing a limited repetition ([url]https://www.shadertoy.com/view/3syGzz[/url]) and then carving out its interior with a max() subtraction.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctjyWy",
            "likes": 34,
            "name": "Rectangle Repetition",
            "published": 3,
            "tags": [
                "2d",
                "repetition"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 918
        },
        "renderpass": [
            {
                "code": "// Domain repetition in the shape of an empty rectangle.\n// The basic shape SDF (rounded square in this case) is\n// evaluated only ONCE.\n//\n// IT ONLY WORKS ON SYMMETRIC SHAPES.\n//\n// Note that this is better than doing a limited repetition\n// (see https://www.shadertoy.com/view/3syGzz) and then\n// carving out its interior with a max() subtraction.\n//\n// More info: https://iquilezles.org/articles/sdfrepetition/\n\n\nfloat sdShape(in vec2 p);\n\n// Created by user \"timestamp\", see comments\nvec2 opRepRectangle( in vec2 p, in ivec2 size, in float spacing )\n{            \n    p = abs(p/spacing) - (vec2(size)*0.5-0.5);\n    p = (p.x<p.y) ? p.yx : p.xy;\n    p.y -= min(0.0, round(p.y));\n    return p*spacing;\n}\n\n// My original version, not nearly as elegant and timestamp's\nvec2 _old_opRepRectangle( in vec2 p, in ivec2 size, in float spacing )\n{\n    vec2 b = vec2(size>>1);\n    p = abs(p/spacing);\n    p += 0.5*vec2(1-(size&1));\n    vec2 w = p - b;\n    p -= round(min(p,b));\n    return spacing*( (w.x<w.y )? vec2(p.x,w.y) : vec2(w.x,p.y) );\n}\n\n\n\nfloat sdShape(in vec2 p)\n{\n    // an sdBox()\n    vec2  w = abs(p)-0.07;\n    float g = max(w.x,w.y);\n    return ((g>0.0)?length(max(w,0.0)):g)-0.05;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    ivec2 size = ivec2(round(vec2(6,4) + vec2(2,1)*sin(floor(iTime/2.0)*vec2(9.7,11.1)+vec2(0,2))));\n    float rep = 0.4;\n\n    float d = sdShape( opRepRectangle(p,size,rep) );\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n  //if( d<0.0 ) { vec2 id = round(p/rep+0.5*(1.0-vec2(size&1)) ); col += sin(id.x*0.31+0.73*id.y+vec3(0,1,2)); } \n    col *= 1.0 - exp2(-24.0*abs(d));\n    col *= 0.8 + 0.2*cos(120.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(-px,px,abs(d)-0.005) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdShape( opRepRectangle(m,size,rep) );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}