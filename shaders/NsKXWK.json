{
    "Shader": {
        "info": {
            "date": "1635311812",
            "description": "Testing a gaussian filtered triangle wave.",
            "flags": 8,
            "hasliked": 0,
            "id": "NsKXWK",
            "likes": 5,
            "name": "Gaussian Filtered Triangle Wave",
            "published": 3,
            "tags": [
                "filter",
                "approximation",
                "waveform",
                "gaussian",
                "trianglewave"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "// https://www.desmos.com/calculator/q94xrjnumr\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 p, in vec2 pos, in vec2 size, in int char) {\n    p = (p - pos) / size + 0.5;\n    if (all(lessThan(abs(p - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, p / 16.0 + fract(vec2(char, 15 - char / 16) / 16.0), dFdx(p / 16.0), dFdy(p / 16.0)).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    uv = (uv - 0.5) * 1.5 + 0.5; // Scale 1.5x\n\n    float unit = 3.0 / iResolution.y; // 2x pixel size\n\n    float w = 0.501 - 0.5 * cos(0.25 * iTime); // Filter width\n    float x = uv.x + iTime;\n\n    // Graph\n    float y = gtri(x, w);\n    float dydx = (gtri(x + 0.001, w) - y) / 0.001;\n    float dist = abs(uv.y - y) / sqrt(1.0 + dydx * dydx);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(unit, 0.0, dist));\n\n    // Undo scale\n    uv = (uv - 0.5) / 1.5 + 0.5;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// Error function approximation\nfloat erf(in float x) {\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x));\n}\n\n// Gaussian filtered triangle wave\n// Works for filter widths between 0 and 1\n// Increase k to allow for larger filter widths\nconst float k = 4.0; // k → ∞\nfloat gtri(in float x, in float w) {\n    x = mod(x, 2.0);\n\n    float v = 0.5641895 * w; // w/sqrt(pi)\n    float s = 1.0 - 2.0 * mod(k, 2.0);\n    float y = (2.0 * k + 1.0) * mod(k, 2.0) - k;\n    for (float n=-k; n <= k; n++) {\n        float p = x - n, u = p / w;\n        y += (p * erf(u) + v * exp(-u * u)) * s;\n        s = -s;\n    }\n\n    return y;\n}\n\nfloat makeNoise(in float time) {\n    return gtri(time * 200.0, 0.501 - 0.5 * cos(0.25 * time));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}