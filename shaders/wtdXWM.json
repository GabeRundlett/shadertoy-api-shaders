{
    "Shader": {
        "info": {
            "date": "1581206201",
            "description": "my second attempt at a traditional eulerian fluid simulation, and it kind of works!\nits probably slighty messy though.",
            "flags": 32,
            "hasliked": 0,
            "id": "wtdXWM",
            "likes": 16,
            "name": "virtual lava lamp (fluid sim)",
            "published": 3,
            "tags": [
                "simulation",
                "fluid",
                "multipass",
                "convection",
                "finitedifference"
            ],
            "usePreview": 0,
            "username": "unnick",
            "viewed": 916
        },
        "renderpass": [
            {
                "code": "//color channel layout\n//xy: velocity\n//z: pressure (inverted)\n//w: temperature/density\n\n//buffers\n//A: velocity update, diffusion / viscosity, & mouse interaction\n//B: pressure update\n//C: smoother\n//D: advection (uses C for velocity)\n\n//i might implement vorticity confinement later, but idk\n//id appreciate any suggestions\n\nvoid mainImage(out vec4 col, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    vec4 c = iA(pos);\n    //vec4 r = iA(pos+ivec2(1,0));\n    //vec4 u = iA(pos+ivec2(0,1));\n    \n    //float curl = c.x+r.y-u.x-c.y; curl *= 10.;\n    \n    float speed = dot(c.xy,c.xy);\n    //col.xyz = mix(vec3(0,.5,1), vec3(1,.5,0), clamp(c.w*speed*.5+.5,0.,1.)) * min(speed,1.);\n    col.xyz = (c.w > 0. ? vec3(1,.5,0) : vec3(0,.5,1)) * abs(c.w) * 4.;\n    //col.xyz = mix(vec3(0,.5,0), vec3(1,0,1), smoothstep(-1.,1.,c.w*1.));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//forces, viscosity, & interaction\nvoid mainImage(out vec4 val, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    val = iA(pos);\n    \n    vec4 r = iA(pos+ivec2(1,0));\n    vec4 u = iA(pos+ivec2(0,1));\n    vec4 l = iA(pos-ivec2(1,0));\n    vec4 d = iA(pos-ivec2(0,1));\n    \n    vec4 ch = vec4(0);\n\n    //change the speed according to the gradient of the pressure\n    ch.xy += vec2(r.z, u.z) - val.z;\n    \n    //convective force\n    ch.y += ((val.w+u.w)*3.\n          - (l.w-r.w-d.w)\n          - iA(pos+ivec2(2, 0)).w\n          - iA(pos+ivec2(1, 1)).w\n          - iA(pos+ivec2(1,-1)).w) * .01;\n    \n    //diffusion\n    ch += ((r+u+l+d) - val*4.) * diffusion;\n    \n    //integrate\n    val += ch*dt;\n    \n    //interaction\n    if(iMouse.z > .5 && distance(iMouse.xy, _pos) < 10.) {\n        val.w = 1.;\n    }\n    \n    //boundary conditions\n    ivec2 cpos = clamp(pos, ivec2(2), ires-2);\n    if(pos != cpos) val = iA(cpos);\n    if(pos.y < 2) {val.y = 0.; val.w = 1.;}\n    if(pos.y >= ires.y-2) {val.y = 0.; val.w = -1.;}\n    if(pos.x < 2) {val.x = 0.; val.w = 0.;}\n    if(pos.x >= ires.x-2) {val.x = 0.; val.w = 0.;}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define res iResolution.xy\n#define ires ivec2(res)\n\n//params\n#define dt .3\n#define diffusion (vec2(.00, .1).xxxy)\n#define pressureloss .999\n#define numsteps 4\n\n//helpers\n#define iA(pos) texelFetch(iChannel0, pos, 0)\n#define iB(pos) texelFetch(iChannel1, pos, 0)\n\n#define fA(pos) texture(iChannel0, (pos) / res)\n#define fB(pos) texture(iChannel1, (pos) / res)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//pressure\nvoid mainImage(out vec4 val, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    val = iA(pos);\n    \n    vec4 l = iA(pos-ivec2(1,0));\n    vec4 d = iA(pos-ivec2(0,1));\n    \n    //change the pressure according to the divergence of velocity\n    val.z += (val.x - l.x + val.y - d.y) * dt * 2.;\n    \n    //idk if this is needed but ill keep this anyway\n    val.z *= pressureloss;\n    \n    //boundary conditions\n    ivec2 cpos = clamp(pos, ivec2(2), ires-2);\n    if(pos != cpos) val = iA(cpos);\n    if(pos.y < 2) {val.y = 0.; val.w = 1.;}\n    if(pos.y >= ires.y-2) {val.y = 0.; val.w = -1.;}\n    if(pos.x < 2) {val.x = 0.; val.w = 0.;}\n    if(pos.x >= ires.x-2) {val.x = 0.; val.w = 0.;}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//smoothed velocity field (to be used in bufc)\nvoid mainImage(out vec4 val, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    \n    //compute a smoothed velocity field (to be used in buf c)\n    val = iA(pos) * 1.;\n    val += iA(pos+ivec2(1,0));\n    val += iA(pos+ivec2(0,1));\n    val += iA(pos-ivec2(1,0));\n    val += iA(pos-ivec2(0,1));\n    val /= 5.;\n    \n    //boundary conditions\n    ivec2 cpos = clamp(pos, ivec2(2), ires-2);\n    if(pos != cpos) val = iA(cpos);\n    if(pos.y < 2) {val.y = 0.; val.w = 1.;}\n    if(pos.y >= ires.y-2) {val.y = 0.; val.w = -1.;}\n    if(pos.x < 2) {val.x = 0.; val.w = 0.;}\n    if(pos.x >= ires.x-2) {val.x = 0.; val.w = 0.;}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//advection\nvoid mainImage(out vec4 val, in vec2 _pos) {\n    ivec2 pos = ivec2(_pos);\n    \n    vec2 p = _pos;            //position of pressure and temp components\n    vec2 px = p + vec2(.5,0); //position of vx component\n    vec2 py = p + vec2(0,.5); //position of vy component\n    \n    //advection\n    //fetches vx and vy and moves current position backwards\n    for(int i = 0; i < numsteps; i++) {\n        p  -= dt * vec2(fB(p -vec2(.5,0)).x, fB(p -vec2(0,.5)).y) / float(numsteps);\n        px -= dt * vec2(fB(px-vec2(.5,0)).x, fB(px-vec2(0,.5)).y) / float(numsteps);\n        py -= dt * vec2(fB(py-vec2(.5,0)).x, fB(py-vec2(0,.5)).y) / float(numsteps);\n    }\n    \n    //fetch advected positions\n    val   = fA(p            )  ;\n    val.x = fA(px-vec2(.5,0)).x;\n    val.y = fA(py-vec2(0,.5)).y;\n    \n    //boundary conditions\n    ivec2 cpos = clamp(pos, ivec2(2), ires-2);\n    if(pos != cpos) val = iA(cpos);\n    if(pos.y < 2) {val.y = 0.; val.w = 1.;}\n    if(pos.y >= ires.y-2) {val.y = 0.; val.w = -1.;}\n    if(pos.x < 2) {val.x = 0.; val.w = 0.;}\n    if(pos.x >= ires.x-2) {val.x = 0.; val.w = 0.;}\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}