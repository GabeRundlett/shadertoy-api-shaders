{
    "Shader": {
        "info": {
            "date": "1667325029",
            "description": "An interesting L-system: [url]https://arxiv.org/pdf/2210.17320.pdf[/url]\n\nNeeds to be full screen for the proper effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "md2GRW",
            "likes": 19,
            "name": "Kochawave!",
            "published": 3,
            "tags": [
                "optimized",
                "lsystem",
                "stack",
                "koch",
                "gosper"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Kochawave! mla, 2022.\n//\n// Thanks to Fabrice for reference: https://arxiv.org/pdf/2210.17320.pdf\n//\n// This one needs to have variable recursion depths (down to a certain\n// segment length - this should be resolution dependent).\n// Inspired by https://www.shadertoy.com/view/cdsGRj by FabriceNeyret2\n//\n// Mouse down shows segments actually drawn around mouse position\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\n#define C(turns,offset) (((turns) << 16) | ((offset) & 0xffff))\nconst int A = 0, END = -1;\nconst int STAR = 1, SLASH = 2, PLUS = 3;\nconst int program[5] = int[]( C(0,A), C(STAR,A), C(SLASH,A), C(PLUS,A), C(0,END) );\n\nconst int MAXDEPTH = 10;\n\nvec2 p = vec2(0);     // The drawing point\nvec2 point = vec2(100); // The moving point\nfloat plen = 0.0;     // Cumulative path length\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\nfloat drawsegment(vec2 pos, float seglen, float theta, float t) {\n  vec2 seg = seglen*vec2(cos(theta),sin(theta));\n  if (t >= plen && t < plen+seglen) point = p + (t-plen)/seglen*seg;\n  vec2 q = p + seg;\n  float d = segment(pos,p,q);\n  polywind(pos,p,q);\n  plen += seglen;\n  p = q;\n  return d;\n}\n\nvec2 map(vec2 pos, float factor) {\n  pos = (2.0*pos - iResolution.xy)/iResolution.y;\n  pos.y += 0.8;\n  pos *= factor/3.0;\n  pos.x += 0.5*factor;\n  return pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float factor = 3.0;// Linear scale factor at each level.\n  int maxdepth = MAXDEPTH;\n  //maxdepth = 1+int(iTime)%MAXDEPTH;\n  vec2 pos = map(fragCoord,factor);\n  vec2 pos2 = pos;\n  if (iMouse.z > 0.0) pos2 = map(iMouse.xy,factor);\n  int stack[MAXDEPTH];\n  int depth = 0;\n  stack[depth++] = 0;\n  float t = mod(iTime,4.0*pow(4.0/factor,float(maxdepth-1))); // Moving point\n  float d = 1e8;\n  float seglen = 1.0;\n  float theta = 0.0;    // Cumulative angle\n  while (depth > 0) {\n    int instr = program[stack[depth-1]++];\n    // Decode instruction\n    int turns = instr>>16;\n    int code = instr<<16>>16;\n    //theta += float(turns)*angle; // Apply turn\n    if (turns == STAR) {\n      theta += PI/6.0;\n      seglen *= sqrt(3.0);\n    } else if (turns == SLASH) {\n      theta -= 5.0*PI/6.0;\n      seglen /= sqrt(3.0);\n    } else if (turns == PLUS) {\n      theta += 2.0*PI/3.0;\n    }\n\n    if (code == END) {\n      depth--;    // Terminate level & unwind\n      seglen *= factor;\n    } else if (depth == maxdepth || seglen < 0.01) {\n      d = min(d,drawsegment(pos,seglen,theta,t)); // Segment\n    } else {\n      // Work out where we would end up if we did the full recursion\n      // For Kochawave, segment length and the angle don't change.\n      vec2 seg = seglen*vec2(cos(theta),sin(theta));\n      vec2 newpoint = p+seg; // Where we end up\n      if (distance(pos2,p+0.5*seg) > 0.75*length(seg)) {\n        polywind(pos,p,p+seg);\n        // Show skipped segments on mouse down.\n        if (iMouse.z > 0.0) d = min(d,segment(pos,p,newpoint));\n        p = newpoint;\n        plen += seglen*pow(4.0/factor,float(maxdepth-depth));\n      } else {\n        stack[depth++] = code;  // Recurse\n        seglen /= factor;\n      }\n    }\n  }\n  vec2 offset = vec2(10,0);\n  polywind(pos,vec2(0),-offset);\n  polywind(pos,-offset,-offset-vec2(0,10));\n  d = min(d,segment(pos,vec2(0),-offset));\n  polywind(pos,p,p+offset);\n  polywind(pos,p+offset,p+offset-vec2(0,10));\n  d = min(d,segment(pos,p,p+offset));\n  float px = fwidth(pos.x);\n  vec3 col = vec3(smoothstep(0.0,px,d));\n  if ((wind&1) == 0) col *= 0.8;\n  //col = mix(vec3(1,0,0), col,smoothstep(0.0,px,distance(pos,point)-0.01*factor/3.0));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}