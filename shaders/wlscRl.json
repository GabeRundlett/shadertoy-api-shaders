{
    "Shader": {
        "info": {
            "date": "1592837544",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "wlscRl",
            "likes": 8,
            "name": "Euler's Identity ",
            "published": 3,
            "tags": [
                "pi",
                "i",
                "euler",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "// Great lecture on the subject! https://youtu.be/ZxYOEwM6Wbk?t=2177\n\n\n#define rot(j) mat2(cos(j),sin(j),sin(j),cos(j))\n\n#define pi acos(-1.)\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + b.y*b.x ); }\n// cpolar() and cpow() I borrowed from some shader on shadertoy! not sure which\nvec2 cpolar( float k , float t ){  return k*vec2(cos(t),sin(t));}\nvec2 cpow( vec2 z , float k ) { return cpolar(pow(length(z),k) , k*atan(z.y,z.x) ); }\n\n\nfloat factoriel(float a){\n\tfloat f = 1.;\n    for(float i = 1.; i <= a; i++){\n    \tf *= i;\n    }\n    return f;\n}\n\n// from iq\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n        \n    \n    vec2 z = vec2(1,0.);\n    \n    \n    \n    col = mix(col,vec3(1.,1.,1.),smoothstep(1.*dFdx(uv.x),0.,abs(length(uv.x)) - 0.002));\n    \n    col = mix(col,vec3(1.,1.,1.),smoothstep(1.*dFdx(uv.x),0.,abs(length(uv.y)) - 0.002));\n    \n    float modD = 0.125;\n    col = mix(col,vec3(1.,1.,1.),smoothstep(1.*dFdx(uv.x),0.,max(\n        abs(length(mod(uv.x - modD/2.,modD) - modD/2.)) - 0.002,\n        abs(uv.y) - 0.01                                            )));\n    \n    col = mix(col,vec3(1.,1.,1.),smoothstep(1.*dFdx(uv.x),0.,max(\n        abs(length(mod(uv.y - modD/2.,modD) - modD/2.)) - 0.002,\n        abs(uv.x) - 0.01                                            )));\n    \n    \n    col = mix(col,vec3(0.2,0.4,0.9),smoothstep(1.*dFdx(uv.x),0.,abs(length(uv) - 0.25) - 0.002));\n    \n    \n    // lines\n    \n    float dotSz = 0.01;\n    \n    float dDots = length(uv - z/4.) - dotSz;\n    float dLines = 10e5;\n    float theta = pi*1. - sin(iTime/2.)*pi*0.75;\n    vec2 numerator = vec2(0,theta);\n    for(float i = 1.; i < 20.; i++){\n        vec2 denominator = vec2(factoriel(i),0.);\n        vec2 oldz = z;\n        z +=  cpow(numerator,i) / denominator.x;\n   \t\t\n        dLines = min(dLines, sdSegment(uv,oldz/4.,z/4.) - 0.002);\n        dDots = min(dDots, length(uv - z/4.) - dotSz);\n    \n    }\n    \n    col = mix(col,vec3(1.,0.4,0.2),smoothstep(1.*dFdx(uv.x),0.,dLines));\n    col = mix(col,vec3(1.,0.2,0.4),smoothstep(1.*dFdx(uv.x),0.,dDots));\n    \n    col = pow(col,vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}