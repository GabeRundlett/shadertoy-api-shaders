{
    "Shader": {
        "info": {
            "date": "1693757847",
            "description": "Simple way to have a diamond tiling + a cool way to sample a gradient",
            "flags": 0,
            "hasliked": 0,
            "id": "dlBfz1",
            "likes": 1,
            "name": "Diamond Gradient",
            "published": 3,
            "tags": [
                "gradientdiamondtiling"
            ],
            "usePreview": 0,
            "username": "dominionxvii",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "float SpicyGradientTime(vec2 uv, float t)\n{\n    //Use the uv to offset value to sample the gradient\n    t += uv.y * 0.1 + sin(uv.x * 25. + t * 5.) * 0.005 + sin(uv.y * 150. + t * 5.) * 0.005;\n    t = fract(t);\n    return t;\n}\n\nvec2 DiamondUV(vec2 uv)\n{\n    uv.x *= 1.5; //form stretched diamond\n    \n    vec2 diamondUV = Rotate(uv, radians(45.));\n    diamondUV = Quantize(diamondUV, vec2(25.));\n    diamondUV = Rotate(diamondUV, -radians(45.));\n    \n    return diamondUV;\n}\n\nvec4 SampleGradient(float t)\n{\n    t = fract(t);\n    \n    const int size = 8;  \n    vec4 cols[size] = vec4[size]\n    (\n        GetCol(86, 167, 204),\n        GetCol(179, 225, 232),\n        GetCol(66, 214, 255),\n        GetCol(235, 214, 163),\n        GetCol(255, 163, 163),\n        GetCol(95, 237, 194), \n        GetCol(29, 26, 176),\n        GetCol(96, 63, 204)\n    );\n    \n    float sizeT = t * float(size);\n    int id1 = int(sizeT);\n    int id2 = (id1 + 1);\n    \n    float tt = unlerp(sizeT, float(id1), float(id2));\n    tt = easeInOutCubic(tt);\n    return mix(cols[id1], cols[id2 % size], tt);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec2 diamondUV = DiamondUV(uv);\n      \n    /*\n    //To visualize diamond uv\n    fragColor = vec4(diamondUV, 0.0, 0.0);\n    return;\n    */\n    \n    float spiceItUpTime = SpicyGradientTime(diamondUV, iTime * 0.05);\n    vec4 bg = SampleGradient(spiceItUpTime);\n\n    fragColor = bg;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 GetCol(int r, int g, int b)\n{\n    return vec4(r, g, b, 255.) / 255.;\n}\n\nfloat unlerp(float x, float fromMin, float fromMax)\n{\n    return (x - fromMin) / (fromMax - fromMin);\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0., 1.);\n}\n\nvec2 Quantize(vec2 x, vec2 resolution)\n{\n    return floor(x * resolution) / resolution;\n}\n\nvec2 Rotate(vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(\n        p.x * c - p.y * s,   \n        p.x * s + p.y * c);\n}\n\nfloat easeInOutCubic(float x)\n{\n    return x < 0.5 ? 4. * x * x * x : 1. - pow(-2. * x + 2., 3.) / 2.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}