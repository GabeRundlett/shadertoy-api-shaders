{
    "Shader": {
        "info": {
            "date": "1477663557",
            "description": " von Koch compaction inspired from nimitz https://www.shadertoy.com/view/Mlf3RX",
            "flags": 0,
            "hasliked": 0,
            "id": "ll3XRn",
            "likes": 13,
            "name": "shortest von Koch (122 chars)",
            "published": 3,
            "tags": [
                "2tweets",
                "short",
                "codegolf",
                "vonkoch"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1104
        },
        "renderpass": [
            {
                "code": "// von Koch compaction inspired from nimitz https://www.shadertoy.com/view/Mlf3RX\n\n/**/  // ---------------- Xor : cleaning + del U\n\nvoid mainImage(out vec4 O, vec2 u) {\n    for( u = abs(u+u-(O.xy=iResolution.xy))/O.x, O*=0.; O.a++<13.; )\n        u.y = 1. - abs(u *= - mat2( 9, 5.2, -5.2, 9 ) / 6.).y;\n    O += u.x; }\n\n // O += sin(U.x/2.-10.*iTime)                    // animated version\n // O += sin(U.x/2.-10.*iTime)*exp(-abs(.1*U.x))  // animated version\n\n/**/\n\n\n\n\n/**  // ---------------- fab: 128 chars\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 U = iResolution.xy;\n    for( U = abs(u+u-U)/U.x ; O.a++<13.; )\n        U.y = 1. - abs( U *= - mat2( 9, 5.2, -5.2, 9 ) / 6. ).y;\n    O += U.x; }\n\n // O += sin(U.x/2.-10.*iTime)                    // animated version\n // O += sin(U.x/2.-10.*iTime)*exp(-abs(.1*U.x))  // animated version\n \n/**/        \n     \n        \n        \n\n/**    // ---------------- fab: 143 chars    -2 by 834144373\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U =  abs( U/iResolution.x - vec2(.5,.28) );          \n // U =  abs( ( U+U - (O.xy=iResolution.xy) ) / O.y /4.); //  autocentered\n\n    for( int i=0; i<12; i++) \n        U.y = .5 - abs( U *= - mat2( 9, 5.2, -5.2, 9 ) / 6. ).y; // -2 by 834144373\n     // U.y = .5 - abs( U *= - mat2( 3, 1.73, -1.73, 3 ) / 2. ).y;\n    \n\tO = U.xxxx;\n}\n\n/**/\n\n\n\n\n/**    // ---------------- iq: 152 chars  \n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U =  abs(abs(U/iResolution.x+vec2(0,.22))-.5);\n\n    for( int i=0; i<12; i++) \n        U *= - mat2( 3, 1.73, -1.73, 3 ) / 2.,\n        U.y = .5 - abs(U.y);\n    \n\tO = U.xxxx;\n}\n\n/**/\n\n\n\n\n/**    // ---------------- 184 chars\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U =  abs( ( U+U - (O.xy=iResolution.xy) ) / O.y);\n    U.y++;\n        \n    if (U.x < 1.) {       //  -4 stduhpf\n//  if ((U*U).x < 1.) {    \n    \tU = abs(--U)/2.;       \n// \t\tfor( float i=0.; i<6.; i+=.5)   floor(i) >  4.+3.*sin(iDate.w) ? U : // anim: +35 chars\n   \t\tfor( int i=0; i<12; i++) \n            U *= - mat2( 3, 1.73, -1.73, 3 ) / 2.,\n            U.x = .5 - abs(U.x);\n    }\n    \n\tO = U.yyyy;\n}\n\n/**/\n\n\n\n\n/**   // ------------------- 187 chars\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = clamp ( ( U+U - (O.xy=iResolution.xy) ) / O.y, -1., 1.);\n    U.y++;\n    U = abs( fract(U.yx/2.) - .5 );\n                          \n// for( float i=0.; i<6.; i+=.5)   floor(i) >  4.+3.*sin(iDate.w) ? U : // anim: +35 chars\n   for( int i=0; i<12; i++) \n          U *= - mat2( 3, -1.73, 1.73, 3 ) / 2.,\n          U.y = .5 - abs(U.y);\n\n\tO = U.xxxx;\n}\n/**/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}