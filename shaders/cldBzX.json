{
    "Shader": {
        "info": {
            "date": "1701441053",
            "description": "aaaa",
            "flags": 0,
            "hasliked": 0,
            "id": "cldBzX",
            "likes": 0,
            "name": "gradation ball",
            "published": 3,
            "tags": [
                "a",
                "a"
            ],
            "usePreview": 0,
            "username": "e2213008",
            "viewed": 119
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 uvShifted = uv - center;\n    uvShifted.x *= iResolution.x / iResolution.y;\n    float r = 0.3;\n    float dist = length(uvShifted);\n\n    if (dist < r){\n        vec3 normal = normalize(vec3(uvShifted, sqrt(r * r - dot(uvShifted, uvShifted))));\n        vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = clamp(dot(normal, lightDir), 0.0, 1.0);\n        vec3 reflectionDir = reflect(-lightDir, normal);\n        vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0));\n        float specular = pow(clamp(dot(reflectionDir, viewDir), 0.0, 1.0), 32.0);\n        float shininess = 16.0;\n        float specularIntensity = 0.5;\n        vec3 baseColor = vec3(0.5 + 0.5 * cos(iTime + uvShifted.xyx + vec3(0, 2, 4))) * smoothstep(0.4, r, r - dist);\n        vec3 litColor = baseColor * (diffuse + specularIntensity * specular);\n        fragColor = vec4(litColor, 1.0);\n    }\n    else{\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}