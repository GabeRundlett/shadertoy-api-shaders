{
    "Shader": {
        "info": {
            "date": "1720818030",
            "description": "WIP motion blur based on signed distance fields. More of a spaghettification than a true blur.\nToDo: Use Inigo's elongation operator on circle SDF instead of a segment.",
            "flags": 0,
            "hasliked": 0,
            "id": "4cfyzN",
            "likes": 0,
            "name": "Circle - SDF motion blur",
            "published": 3,
            "tags": [
                "2d",
                "distancefield",
                "sdf",
                "circle",
                "distance",
                "segment"
            ],
            "usePreview": 0,
            "username": "jafam",
            "viewed": 119
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec2 opElongate(vec2 p, vec2 h) {\n    return p-clamp(p,-h,h);\n}\n\nfloat sdSegment(vec2 p, vec2 a, vec2 ba, float r) {\n    vec2 pa = p-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa-ba*h)-r;\n}\n\nvec4 hash4( float n ) { return fract(sin(vec4(n,n+1.0,n+2.0,n+3.0))*43758.5453123); }\n\nvec4 state(float t, vec4 id) {\n    const float speed = 10.0;\n    const vec2 box = vec2(0.5);\n    vec2 a = speed*(0.75+0.5*id.zw)*t+20.0*id.xy;\n    vec2 pos = box*vec2(sin(a.x),cos(a.y));\n    vec2 vel = box*vec2(cos(a.x),-sin(a.y));\n    vel *= speed;\n    return vec4(pos,vel);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float t = iTime;\n    vec4 disc1 = state(t,hash4(0.0));\n    vec4 disc2 = state(t,hash4(13.13));\n    vec4 disc3 = state(t,hash4(26.26));\n    const float fps = 24.0;\n    const float r = 0.2;\n    float d1 = sdSegment(p, disc1.xy,disc1.zw/fps,r);\n    float d2 = sdSegment(p, disc2.xy,disc2.zw/fps,r);\n    float d3 = sdSegment(p, disc3.xy,disc3.zw/fps,r);\n    vec3 col = vec3(0.2+0.1*p.y);\n    col += clamp(-16.0*vec3(d1,d2,d3),0.0,1.0);\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}