{
    "Shader": {
        "info": {
            "date": "1630157526",
            "description": "crate",
            "flags": 0,
            "hasliked": 0,
            "id": "fscGR2",
            "likes": 7,
            "name": "crate",
            "published": 3,
            "tags": [
                "crate"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 10.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\n#define MATERIAL_DIFFUSE0 0\n#define MATERIAL_REFLECT 10\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat crateSide(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.11,0.11,0.005));\n    float d3 = max(-B3D(p,vec3(0.11,0.11,0.02)),B3D(p,vec3(0.13,0.13,0.015)));\n    p.xy = mod(p.xy,0.03)-0.015;\n    float d2 = B3D(p,vec3(0.01,0.01,0.02));\n    d = max(-d2,d);\n    d = min(d,d3);\n    \n    p = prevP;\n    d2 = B3D(p-vec3(0.0,-0.06,0.0),vec3(0.055,0.025,0.02));\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat crateTop(vec3 p){\n    vec3 prevP = p;\n    float d = B3D(p,vec3(0.11,0.005,0.11));\n    p.xz = mod(p.xz,0.03)-0.015;\n    float d2 = B3D(p,vec3(0.01,0.02,0.01));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat crate(vec3 p){\n    vec3 prevP = p;\n    float dist = 0.115;\n    p.z = abs(p.z);\n    p.z -= dist;\n    float d = crateSide(p);\n    p = prevP;\n    p.xz *= Rot(radians(90.0));\n    p.z = abs(p.z);\n    p.z -= dist;\n    float d2 = crateSide(p);\n    d = min(d,d2);\n    p = prevP;\n    d2 = crateTop(p-vec3(0.0,0.12,0.0));\n    return min(d,d2);\n}\n\nfloat crateAll(vec3 p){\n    vec3 prevP = p;\n    \n    float d = crate(p-vec3(0.0,-0.125,0.0));\n    \n    p.x = abs(p.x);\n    p.x-=.225;\n    p.y+=0.125;\n    float d2 = crate(p);\n    d = min(d,d2);\n    p = prevP;\n    d2 = crate(p-vec3(0.0,0.125,0.0));\n    d = min(d,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    p.x+=iTime*0.5;\n    p.x = mod(p.x,1.5)-0.75;\n    float d = crateAll(p);\n    vec2 res = vec2(d, MATERIAL_REFLECT);\n        \n    vec2 model = res;\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    float IOR = 1.6; //IOR:index of reflection\n    vec3 rdIn = refract(rd,n,1.0/IOR); \n    vec3 refTex = texture(iChannel0,rdIn).rgb;\n    return refTex;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 col) {\n    float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n    return vec3(dif)*col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, 1.0);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-20.0));    \n    \n    if(mod(iTime,20.0)<10.0){\n        ro.xz *= Rot(radians(-30.0));\n    } else {\n        ro.xz *= Rot(radians(0.0));\n    }\n    \n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.);\n    vec3 col = vec3(0.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        \n        int mat = int(d.y);\n        if(mat == MATERIAL_DIFFUSE0){\n            col = diffuseMaterial(n,vec3(1.0));\n        } else if(mat == MATERIAL_REFLECT) {\n            col = reflectMaterial(p,rd,n);\n        }\n\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}