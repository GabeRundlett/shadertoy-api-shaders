{
    "Shader": {
        "info": {
            "date": "1556611408",
            "description": "xor dot pattern tunnel",
            "flags": 0,
            "hasliked": 0,
            "id": "WsfXW7",
            "likes": 8,
            "name": "xor dot pattern tunnel",
            "published": 3,
            "tags": [
                "xordot"
            ],
            "usePreview": 0,
            "username": "run",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n#define R3 1.732051\n\nvec2 rotate(vec2 uv, float radians) {\n\treturn vec2(uv.x * cos(radians) - uv.y * sin(radians),\n\t            uv.x * sin(radians) + uv.y * cos(radians));\n}\n\nvec2 kaleidoscope(vec2 uv, vec2 point, float add) {\n    for(int i = 0; i < 14; i++) {\n        uv = rotate(uv, PI * 2. / 14.);\n        uv.x = abs(uv.x);\n    }\n    uv -= point;\n    return uv;\n}\n\nfloat dist(vec2 uv) {\n   \treturn pow(pow(uv.x, 2.) + pow(uv.y, 2.),0.5);\n}\n\nvec3 color(float p, float offs) {\n    \n    return sin(vec3(12.23,45.23,56.2)+offs*3.)*.5+.5;\n}\n\n\nfloat dot_pattern(vec2 uv, float time) {\n    \n    // Time varying pixel color\n    float col = 0.;\n    \n    \n    for (float i = 0.; i < 16.; i++) {\n      \tfor (float j = 0.; j < 16.; j++) {\n            \n\n            vec2 gv = vec2(i + mod(j, 2.) / 2. - 8., (j - 8.) * 0.707) / 16.;\n            \n            float size = sin(pow(i-8.,2.)+pow(j-8.,2.)+time+25.*dist(uv-gv)) * 0.05;\n            if (dist(uv - gv) < size) {\n                col += 1.;\n            } else {\n                col += 0.;\n            }\n        }\n    }\n    \n    col -= 1.1;\n    col = mod(col, 2.) - .95;\n    \n    return col;\n}\n\nfloat dot_pattern_k(vec2 uv, float time) {\n\tuv = kaleidoscope(uv, vec2(0.3 + 0.2 * sin(time), 0.4), 2. + sin(time/3.));\n    return dot_pattern(uv, time);\n}\n    \n\nfloat N(float p) {\n    return fract(sin(p*123.34)*345.456);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) / vec2(1., 16./9.);\n    uv -= vec2(.5, 9./16./2.);\n\n    float duv= dot(uv, uv);\n    \n    float t = iTime / 5.;\n    \n    float intensity3 = 0.;\n\n    for(float i=0.; i<1.; i+=1./3.) {\n        float t = fract(i+t);\n        float z = mix(5., .1, t);\n        float fade = smoothstep(0., .3, t)*smoothstep(1., .7, t);\n\n        intensity3 += fade*t*dot_pattern_k(uv*z/1.3, iTime);\n    }\n    \n    \n    vec3 colorized = color(iTime, dist(uv));\n    float intensity1 = dot_pattern(uv, iTime);\n    float intensity2 = dot_pattern_k(uv, iTime);\n    \n    float time_stepper = sin(iTime) * 8. - 2.;\n    float output_intensity = smoothstep(0., 1., time_stepper/2.) * intensity1 +\n        \t\t\t\t\t smoothstep(1., 0., time_stepper/2.) * intensity2 -\n        \t\t\t\t     smoothstep(1., 0., time_stepper) * intensity2 +\n        \t\t\t\t\t smoothstep(1., 0., time_stepper) * intensity3;\n    \n    // Output to screen\n    fragColor = vec4(output_intensity*colorized ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}