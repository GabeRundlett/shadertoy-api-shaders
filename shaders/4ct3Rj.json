{
    "Shader": {
        "info": {
            "date": "1712444601",
            "description": "Some simple meters",
            "flags": 0,
            "hasliked": 0,
            "id": "4ct3Rj",
            "likes": 3,
            "name": "speedometers",
            "published": 3,
            "tags": [
                "draft",
                "meter",
                "speedometer"
            ],
            "usePreview": 0,
            "username": "LLB",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "const float PI = acos(-1.);\n\nfloat rect(vec2 uv, float x1, float y1, float x2, float y2) {\n  return float(uv.x > x1 && uv.x < x2 && uv.y > y1 && uv.y < y2);\n}\n\nvec3 meter(vec2 uv, float value) {\n    uv.x += 0.2*cos(3.*pow(uv.y, 1.5));\n    float r = rect(uv, 0., 0., 0.1, 1.);\n    float lines = smoothstep(0.3, 0.4, mod(uv.y, 0.02)/0.02);\n    vec3 baseCol = mix(vec3(1, 1, 0), vec3(1, 0, 0), uv.y);\n    baseCol = mix(baseCol, vec3(0.3, 0, 0), smoothstep(value-0.001, value, uv.y));\n    vec3 col = lines * baseCol;\n    return r * col;\n}\n\nfloat segment(vec2 uv, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n\nvec3 meter2(vec2 uv, float value) {\n  float len = length(uv);\n  float angle = atan(uv.y, uv.x);\n  float outer = 1. - smoothstep(0.01, 0.015, abs(len-0.1));\n  \n  float sh = outer * smoothstep(0.007, 0.011, abs(len-0.1));\n  sh += outer * smoothstep(0.9, 0.95, mod(degrees(angle), 18.)/18.);\n  \n  sh *= smoothstep(0., 1., degrees(angle) + 38.);\n\n  vec3 baseCol = mix(vec3(1, 1, 0), vec3(1, 0, 0), 1. - angle/4.);\n\n  value = (value * 1.2 - 0.5) * PI;\n  vec2 point = vec2(sin(value), cos(value)) * 0.1;\n  vec3 line = segment(uv, vec2(0), point, 0.005) * vec3(0, 0, 1);\n\n  return sh * baseCol + line;\n}\n\nvec3 meter3(vec2 uv, float value) {\n    uv.y *= 1. - smoothstep(0., 1., uv.x);\n    float r = rect(uv, 0., 0., 0.5, 0.05);\n    value *= 0.5;\n\n    float lines = smoothstep(0.3, 0.4, mod(uv.x, 0.02)/0.02);\n    vec3 baseCol = mix(vec3(1, 1, 0), vec3(1, 0, 0), uv.x*2.);\n    baseCol = mix(baseCol, vec3(0.3, 0, 0), smoothstep(0., 0.001, uv.x - value));\n    vec3 col = lines * baseCol;\n    return r * col;\n}\n\nvec3 meter4(vec2 uv, float value) {\n  float len = length(uv);\n  float angle = atan(uv.y, uv.x);\n\n  float lines =\n    smoothstep(0.7, 1., mod(angle, 0.25)/0.25) *\n    smoothstep(0., 0.01, abs(angle + 0.7) - 0.7) * // hide bottom-right\n    smoothstep(0., 0.01, 0.1 - length(uv)) *\n    smoothstep(0., 0.01, length(uv) - 0.06);\n\n  value = (value * 1.5 - 1.) * PI;\n  vec2 point = vec2(sin(value), cos(value)) * 0.07;\n  float line = segment(uv, vec2(0), point, 0.003);\n\n  vec3 col = vec3(0.1, 0.1, 0.8) * lines;\n  col += vec3(0.9, 0.6, 0.9) * line;\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col = vec3(0,0,0);\n\n    col += meter(uv - vec2(0.2, 0.), 0.5+0.5*sin(iTime*4.+0.5));\n    col += meter(uv - vec2(0.5, 0.), 0.5+0.5*sin(iTime*4.+0.5));\n\n\n    col += meter2(uv - vec2(0.85,0.4), 0.5+0.5*sin(iTime));\n\n    col += meter3(uv - vec2(0.6, 0.15), 0.5+0.5*sin(iTime*3.+1.5));\n\n    col += meter4(uv - vec2(1.3, 0.3), 0.5+0.5*sin(iTime*2.+1.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}