{
    "Shader": {
        "info": {
            "date": "1483129558",
            "description": "Wavy oscillations. Using saw() for a bit of a different look than sin()",
            "flags": 0,
            "hasliked": 0,
            "id": "XtySzD",
            "likes": 3,
            "name": "Color Separation by UV",
            "published": 3,
            "tags": [
                "wavy",
                "sprites",
                "colorseparation"
            ],
            "usePreview": 0,
            "username": "cacheflowe",
            "viewed": 799
        },
        "renderpass": [
            {
                "code": "#define PI     3.14159265358\n#define TWO_PI 6.28318530718\n\n// saw method ported from my Processing code to be a drop-in replacement for sin()\n// there's probably a way better way to do this..\nfloat saw(float rads) {\n    rads += PI * 0.5; // sync oscillation up with sin()\n    float percent = mod(rads, PI) / PI;\t\t\t\t\n    float dir = sign(sin(rads));\n    percent *= 2. * dir;\n    percent -= dir;\n    return percent;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 1.5;\n    // center coordinates\n    vec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y,\n         center = vec2(0);\n    // wavy vertical - oscillate x position by sin(y)\n    uv += vec2(0.15 * sin(uv.y * 6. * (1. + sin(time))), 0);\n\t// rotation of uv from: http://stackoverflow.com/questions/28074977/rotating-a-texture-on-a-fragment-shader-in-glsl-es\n    float rotRads = 0.3 + 0.3 * sin(time);\n    uv *= mat2(cos(rotRads), sin(rotRads), -sin(rotRads), cos(rotRads));\n    // stripes\n    float thickness = 35. + 10. * sin(time);\n    // separate color by moving green component by an x offset. use saw() for stripes \n    vec3 color = 0.5 + 0.5 * vec3(\n        saw(uv.x * thickness),\n        saw((uv.x - (0.025 + 0.025 * sin(time))) * thickness),\n        saw(uv.x * thickness)\n    ); \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}