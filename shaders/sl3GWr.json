{
    "Shader": {
        "info": {
            "date": "1636108639",
            "description": "Ray-tracing with refraction and reflection. The only things that are not taken into account are polarization and decomposition of light into spectrum.",
            "flags": 32,
            "hasliked": 0,
            "id": "sl3GWr",
            "likes": 24,
            "name": "Ray-tracing with refraction",
            "published": 3,
            "tags": [
                "raytracing",
                "raycasting"
            ],
            "usePreview": 0,
            "username": "busybeaver",
            "viewed": 708
        },
        "renderpass": [
            {
                "code": "float gamma = 2.2; // For gamma correction.\nfloat exposure = 1.3;\nfloat tone_pow = 0.35; // Represents how strong the tone mapping is.\n\nvec3 correct_color(vec3 c) {\n    c *= exposure;\n    c = pow(c, vec3(1. / tone_pow));\n    c = pow(c / (c + 1.), vec3(tone_pow));\n    c = pow(c, vec3(1. / gamma));\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(correct_color(texture(iChannel0, fragCoord.xy/iResolution.xy).rgb), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Refraction here is almoust the same as in real world.\n// The only things that are not taken into account is polarization and decomposition of light into spectrum.\n\nvec4 s1 = vec4(1.5, 1.1, 0., 1.1); // ball at right side\nvec3 s1_col = vec3(.9, .9, .5); // color\n\nvec4 s2 = vec4(3.0, 5.0, 0.0, 1.0); // lamp\nvec3 lamp_col = vec3(15., 17., 15.); // color of the lamp\n\n// ball = vec3(x, y, z, radious)\nvec4 s3 = vec4(-2.0, 1.6, 1.3, 1.6); // big ball\nfloat s3_n = 2.4; // refractive index (1 - air, 1.33 - water, 1.5 - glass, 1.5-2 - optical glass, 2.4 - diamond)\nvec3 s3_col = vec3(.95, .6, .6); // color\n\nvec4 s4 = vec4(-0.6, 1.7, -1.6, 0.5); // small ball\nfloat s4_n = 2.4; // refractive index\nvec3 s4_col = vec3(.95, .95, .3); // color\n\nvec3 b1_c = vec3(-1.0, 0.601, -1.6); // senter of box\nvec3 b1_r = vec3(1.2, 0.6, 0.9); // size of box\nfloat b1_n = 1.5; // refractive index\nvec3 b1_col = vec3(.6, .6, .95); // color\n\nfloat pi = 3.1415926;\n\nint start_frame = 0; // The frame from which the rendering starts. Increase it to have time to turn on full-screen mode.\nint max_steps = 15;\nfloat min_d = 0.0002;\nfloat max_d = 10000.0;\nfloat w = 2.;\nfloat cam_dist = 10.0;\nfloat rotation_yz = .3;\nfloat rotation_yz_cam = 0.15;\nfloat rotation_xz = -.1;\n\nfloat seed;\n\nvec2 rotate(vec2 v, float a) {\n    vec2 x = vec2(cos(a), sin(a));\n    return v.x * x + v.y * vec2(-x.y, x.x);\n}\n\nfloat rand() {\n    seed = fract(seed + .500009);\n    return fract(sin(seed * 1000.) * seed * 100.);\n}\n\nvec3 rand_ray() {\n    float d = rand() * pi * 2.;\n    float h = rand() * 2. - 1.;\n    float a = sqrt(1. - h * h);\n    return vec3(sin(d) * a, h, cos(d) * a);\n}\n\nvec3 rand_rotate(vec3 v, float w, float conc) {\n    float d = rand() * pi * 2.;\n    float h = 1. - (1. - pow(rand(), conc)) * (1. - cos(w));\n    float a = sqrt(1. - h * h);\n    vec3 r = -vec3(sin(d) * a, cos(d) * a, h);\n    r = vec3(r.x, rotate(r.yz, atan(v.y, length(v.xz))));\n    r = vec3(rotate(r.xz, atan(v.z, v.x) + pi * .5), r.y).xzy;\n    return r * length(v);\n}\n\nvec4 max_dim(vec3 v) {\n    if(v.x > v.y && v.x > v.z) {\n        return vec4(1., 0., 0., v.x);\n    } else if (v.y > v.x && v.y > v.z) {\n        return vec4(0., 1., 0., v.y);\n    } else {\n        return vec4(0., 0., 1., v.z);\n    }\n}\n\nvec4 box(vec3 pos, vec3 ray, vec3 r, vec3 c) {\n    vec3 s = c - pos;\n    vec4 d1 = max_dim((s - r * sign(ray)) / ray);\n    vec4 d2 = max_dim(-(s + r * sign(ray)) / ray);\n    d2.w = -d2.w;\n    if(d2.w < d1.w) return vec4(0., 0., 0., max_d + max_d);\n    if(d1.w < min_d) {\n        if(d2.w < min_d) return vec4(0., 0., 0., max_d + max_d);\n        return vec4(d2.xyz * sign(ray), d2.w);\n    } else\n    return vec4(- d1.xyz * sign(ray), d1.w);\n}\n\nfloat sphere_dist(vec3 pos, vec3 ray, vec4 sphere) {\n    //return length(pos - sphere.xyz) - sphere.w;\n    vec3 s = sphere.xyz - pos;\n    float ds = dot(ray, s);\n    float D = ds * ds - dot(ray, ray) * (dot(s, s) - sphere.w * sphere.w);\n    if(D < 0.) return max_d + max_d;\n    float t1 = ds + sqrt(D);\n    float t2 = ds - sqrt(D);\n    if(t2 < min_d) {\n        if(t1 < min_d) return max_d + max_d;\n        return t1;\n    }\n    return t2;\n}\n\nfloat square(float x) { return x * x; }\n\nfloat reflect_k(float a, float b) {\n    return (square(tan(a - b) / tan(a + b)) + square(sin(a - b) / sin(a + b))) * .5;\n}\n\nvec3 refract2(vec3 pos, vec3 ray, vec3 norm, float n) {\n    float dt = dot(-norm, ray);\n    float n1 = (dt > 0.) ? n : 1. / n;\n    float a1 = sqrt(1. - dt * dt);\n    float a2 = a1 / n1;\n    if(a2 >= 1.) {\n        ray -= dot(ray, norm) * norm * 2.;\n    } else {\n        if(reflect_k(asin(a1), asin(a2)) > rand()) ray -= dot(ray, norm) * norm * 2.;\n        else {\n            ray = normalize(-norm * sqrt(1. - a2 * a2) * sign(dt) + normalize(ray - dot(ray, norm) * norm) * a2);\n            \n        }\n    }\n    return ray;\n}\n\nvec3 march(vec3 pos, vec3 ray) {\n    vec3 color = vec3(1., 1., 1.);\n    for(int i = 0; i < max_steps; i ++) {\n        float d_s1 = sphere_dist(pos, ray, s1);\n        float d_s2 = sphere_dist(pos, ray, s2);\n        float d_s3 = sphere_dist(pos, ray, s3);\n        float d_s4 = sphere_dist(pos, ray, s4);\n        vec4 d_b1 = box(pos, ray, b1_r, b1_c);\n        float d_floor = (ray.y < 0.) ? - pos.y / ray.y : max_d + max_d;\n        float d_wall;\n        float d_wall2 = (ray.z > 0.) ? (7. - pos.z) / ray.z : max_d + max_d;\n        vec3 wall_c;\n        if(ray.x > 0.) {\n            wall_c = vec3(.05, .2, .35);\n            d_wall = (4.5 - pos.x) / ray.x;\n        } else {\n            wall_c = vec3(.35, .05, .05);\n            d_wall = - (5.3 + pos.x) / ray.x;\n        }\n        float d = min(min(min(min(min(min(min(d_s1, d_floor), d_s2), d_s3), d_s4), d_wall), d_wall2), d_b1.w);\n        //if(d_b1.w < max_d) return d_b1.xyz * .5 + .5;\n        if(d > max_d) return vec3(0., 0., 0.);//color * vec3(0.2, 0.2, 0.2);\n        pos += ray * d;\n        if(d_floor == d) {\n            ray = rand_ray();\n            ray.y = abs(ray.y);\n            color *= vec3(.9, .8, .8);\n        } else if(d_s2 == d) {\n            return lamp_col * color;\n        } else if(d_s3 == d) {\n            vec3 norm = normalize(pos - s3.xyz);\n            if(dot(norm, ray) > 0.) color *= pow(s3_col, vec3(d));\n            ray = refract2(pos, ray, norm, s3_n);\n        } else if(d_s4 == d) {\n            vec3 norm = normalize(pos - s4.xyz);\n            if(dot(norm, ray) > 0.) color *= pow(s4_col, vec3(d));\n            ray = refract2(pos, ray, norm, s4_n);\n        } else if(d_wall == d) {\n            color *= wall_c;\n            ray = rand_ray();\n            ray.x = - abs(ray.x) * sign(pos.x);\n        } else if(d_wall2 == d) {\n            color *= vec3(.2, .4, .1);\n            ray = rand_ray();\n            ray.z = - abs(ray.z);\n        } else if(d_b1.w == d) {\n            if(dot(d_b1.xyz, ray) > 0.) color *= pow(b1_col, vec3(d));\n            ray = refract2(pos, ray, d_b1.xyz, b1_n);\n        } else {\n            vec3 prev_ray = ray;\n            ray = rand_rotate(ray, .8, .7);\n            vec3 s = normalize(s1.xyz - pos);\n            if(dot(s, ray) < 0.) ray = rand_rotate(prev_ray, .8, .7);\n            if(dot(s, ray) < 0.) ray = rand_rotate(prev_ray, .8, .7);\n            if(dot(s, ray) < 0.) return vec3(0., 0., 0.);\n            ray -= dot(s, ray) * 2. * s;\n            color *= s1_col;\n        }\n    }\n    return vec3(0., 0., 0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) / (iResolution.x + iResolution.y) * 4.;\n    seed = fract(fract(iTime * .5) + iTime * .000009); seed = rand();\n    seed = fract(seed + uv.x); seed = rand();\n    seed = fract(seed + uv.y); seed = rand();\n    vec3 ray = normalize(vec3(uv.xy, w));\n    ray = vec3(ray.x, rotate(ray.yz, rotation_yz));\n    ray = vec3(rotate(ray.xz, rotation_xz), ray.y).xzy;\n    vec3 cam = vec3(0., 0., -cam_dist);\n    cam = vec3(cam.x, rotate(cam.yz, rotation_yz + rotation_yz_cam));\n    cam = vec3(rotate(cam.xz, rotation_xz), cam.y).xzy;\n    \n    vec3 col = march(cam, ray);\n    for(int i = 2; i < 20; i ++) {\n        col = col * (1. - 1. / float(i)) + march(cam, ray) / float(i);\n    }\n    if(iFrame > start_frame) fragColor = vec4(col, 1.0) / float(iFrame - start_frame) + texture(iChannel0, fragCoord.xy/iResolution.xy) * (1. - 1. / float(iFrame - start_frame));\n    //if(dot(normalize(cam), ray) < -0.7) fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}