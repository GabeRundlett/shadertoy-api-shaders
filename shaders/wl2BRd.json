{
    "Shader": {
        "info": {
            "date": "1599922589",
            "description": "a filter that smoothes the image and makes it progressively more abstract !",
            "flags": 32,
            "hasliked": 0,
            "id": "wl2BRd",
            "likes": 3,
            "name": "smooth filter",
            "published": 3,
            "tags": [
                "filter"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 369
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\n    fragColor = texelFetch( iChannel1, ivec2(fragCoord), 0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define lum(pix) dot( pix, vec4(.3,.59,.11,0) )  //luminance\n\nvec2 grad (vec2 uv) {\n    vec3 pSize = vec3(1.0/iResolution.xy,0.0);\n    float p1 = lum(texture( iChannel1, uv - pSize.xz ));\n    float p2 = lum(texture( iChannel1, uv + pSize.xz ));\n    float p3 = lum(texture( iChannel1, uv - pSize.zy ));\n    float p4 = lum(texture( iChannel1, uv + pSize.zy ));\n    \n\treturn vec2(p1-p2,p3-p4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pSize = 1.0/iResolution.xy;\n    \n    if ( mod(float(iFrame),400.0 ) == 10.0) {\n    \n        fragColor = texture( iChannel0, uv);\n    \n    } else {\n\n        vec2 gradient = grad(uv);\n        if ( length(gradient) > 0.0 ) {\n            \n            gradient = normalize(gradient);\n\n            vec4 t1 = texture( iChannel1, uv - pSize*gradient.yx*1.5);\n            vec4 t2 = texture( iChannel1, uv + pSize*gradient.yx*1.5);\n            vec4 t3 = texture( iChannel1, uv - pSize*gradient.xy*2.0);\n            vec4 t4 = texture( iChannel1, uv + pSize*gradient.xy*2.0);\n            \n         \tfloat midLum = ( lum(t1) + lum(t2) )*0.5;\n            \n            float comp = max(sign(abs(lum(t4)-midLum)-abs(lum(t3)-midLum)),0.0);\n            fragColor = t3*comp + t4*(1.0-comp);\n\n            //strange color blending\n            //if (abs(lum(t3)-lum(t4))<0.015) {\n            //    fragColor = (t3+t4)*0.5;\n            //} \n\n        } else {\n\t        fragColor = texture( iChannel1, uv);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}