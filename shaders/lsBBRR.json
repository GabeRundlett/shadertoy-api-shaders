{
    "Shader": {
        "info": {
            "date": "1499075856",
            "description": "I'm back from holidays and I miss the sea...",
            "flags": 64,
            "hasliked": 0,
            "id": "lsBBRR",
            "likes": 55,
            "name": "Shoreline",
            "published": 3,
            "tags": [
                "2d",
                "wave",
                "animation"
            ],
            "usePreview": 0,
            "username": "glkt",
            "viewed": 1852
        },
        "renderpass": [
            {
                "code": "// The moment one gives close attention to any thing,\n// even a blade of grass,\n// it becomes a mysterious, awesome, indescribably magnificent world in itself.\n\n//-------------------------------------\n\n// visual parameters ------------------\nconst bool reverse = true; // reverse vertically \nconst int waveNumber = 6;\nconst float speed = .1;\nconst float foamDensity = 0.;\nconst float waveCurve = 4.;\nvec3 sandColor = vec3(1.,.95,.8);\nconst vec3 seaColor = vec3(.0,.7,.85);\nconst vec3 deepSeaColor = vec3(0.,.2,.3);\n//-------------------------------------\n\nconst float pi = 3.14159265359;\n\nfloat hash1( float p ) {\n    float h = dot(vec2(p),vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat hash2( vec2 p ) {\n    float h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n// basic 1 dimensionnal noise\nfloat noise1d( float p ) {\n    float i = floor( p );\n    float f = fract( p );\n    float u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    float v = mix( hash1(i), hash1(i + 1.), u);              \n    return v;\n}\n\n// layered noise from texture\nfloat noiseLayer(vec2 p, float ti){\n    float e =0.;\n    for(float j=1.; j<9.; j++){\n        e += texture(iChannel0, p * float(j) + vec2(ti*7.89541) + vec2(j*159.78) ).r / (j/2.);\n    }\n    e /= 8.5;\n    return e;\n}\n\n// another layered noise from texture: less octaves, more granularity\nvec3 sandNoiser(vec2 p, float ti){\n    vec3 e = vec3(0.);\n    for(int j=1; j<3; j++){\n        e += texture(iChannel1, p * (float(j)*1.79) + vec2(ti*7.89541) ).rgb ;\n    }\n    e /= 3.;\n    return e;\n}\n\n// get global curve of each wave\nfloat getWaveNoise(float ti, float wA, vec2 uv){\n    float wN = hash1(ti)/3. + noise1d( (uv.x+ti)*waveCurve) * (max(0.,wA*1.5-.3));\n    return wN;\n}\n\n// get height of each wave\nfloat getWaveOffset(float wN, float t, vec2 uv){\n\t float offset = (uv.y + sin( t *(2.*pi)) /2.2 - 0.3 ) + wN;\n    \treturn offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = mix( 1.-uv.y,uv.y, float(reverse)); \n    float t = iTime * speed + 12.2;\n    \n    // sand color\n    vec3 sandNoise = sandNoiser(uv,1.); // sand noise\n    sandColor = mix(sandColor, vec3(.9,.7,.5), max(0.,uv.y*-2.+2.) ); // vertical gradient\n    sandNoise *= vec3(1.,0.8,.5); // colorize sand noise\n    sandNoise = sandNoise/2.+.5; // lower contrast of noise\n    sandColor *= .3+sandNoise; // add noise\n    float sandDots = clamp(sandNoise.r*5.-1.9,0.,1.); // get small dots from noise\n    sandColor *= sandDots; // add dots\n    vec4 col = vec4(sandColor,0.);\n    \n    // prepare wet sand color\n    vec3 wetSand = sandColor * vec3(.7,.6,.4);\n    \n    float lastwA = 10.;// store last wave age\n        \n    // for each wave\n    for(int i =0; i<waveNumber; i++){\n        \n        float ti = floor(t-.25)+float(i); // get wave \"id\"\n        float wA = fract(t-.25); // wave \"age\" (to know which wave to draw on top and fade away effects)    \n      \n        float wN = getWaveNoise(ti,wA,uv); // wave global curve\n        float offset = getWaveOffset(wN,t,uv); // wave vertical position        \n        vec2 pos = vec2( uv.x, -offset/ (0.2+wA*20.)*2. ); // pos in \"wave\" space        \n        float foam = noiseLayer( pos , ti); // get foam density        \n        offset -= foam/10.; // modify wave front by foam\n        offset -= noiseLayer(uv/10.,0.)/5.; // add global noise for turbulence effect at wave front\n        \n        // the same as above, but with static time : when wave is at maximal height\n        float shiftTi = floor(t-.25)+float(i);\n        float maxWaveNoise = getWaveNoise(ti,.5,uv);\n        float maxOffset = getWaveOffset(maxWaveNoise,ti+.5,uv);\n        vec2 maxPos = vec2( uv.x, -maxOffset/ (0.2+.5*20.)*2. ); \n        float maxFoam = noiseLayer( maxPos, ti);\n        maxOffset -= maxFoam/10.;\n        maxOffset -= noiseLayer(uv/10.,0.)/5.;\n        \n        \n        if( offset < 0.){ // if in the wave area            \n            if (wA < lastwA){ // if is a newer wave, draw on top                \n\n                // get normal from foam\n                vec3 n = vec3(\tfoam - noiseLayer( pos+vec2(0.001,0.) ,ti),\n                              \tfoam - noiseLayer( pos+vec2( 0.,0.001) ,ti),\n                              \t0.5);\n                \n                // make foam weaker with time, and stronger near wave front\n                foam = (foam+ .8 -wA*wA + offset*offset*.5 +  clamp(0.,1.,(offset+.2)) );\n\n                // fake lighting\n                float l = dot(n, vec3(1.,1.,1.) );                \n                \n                // colorize waves. Fade away with time to simulate tranparency of shallow water\n                col.rgb = mix( sandColor , seaColor, clamp(1.5-wA*3.,0.02,1.) );\n                  \n                // darken sea color away from wave front (= color gradient)\n                col.rgb = mix(col.rgb, deepSeaColor, -offset);\n                \n                // make the white, dense, foam at wave front\n                float denseFoam = clamp(foam*20.-20.+foamDensity,0.,1.)*.8;\n                col.rgb = mix(col.rgb, vec3(l)*1.5, denseFoam );\n                \n                // thin white line at wave front\n                col.rgb += max(0.,floor(offset+1.004)*n.r*10.); \n                \n                // fake water specular (little white dots)\n                col.rgb += max(0., dot(n, vec3(1.,.3,.95))*10.-5.); \n                \n                // darken water with foam, to give a bit of texture to the water\n                col.rgb *= foam*foam*(1.-wA)+wA*1.2;\n                \n                // change alpha value to remember this pixel is a wave\n                col.a = 1.;\n            }\n            \n            lastwA = wA;\n        }else{            \n            // sand wetness\n            if( col.a == 0. && wA>.5){\n              float dryNess = 50. * (1.-wA);\n              col.rgb = mix(col.rgb, wetSand, clamp((dryNess-2.5-maxOffset*dryNess*2.),0.,1.) * (1.-wA) );\n            }\n        }\n        t += 1./float(waveNumber);\n\t}        \n    fragColor = col;\n}\n\n// One's destination is never a place,\n// but rather a new way of looking at things.",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 10917,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mesabeachbum/sea-wave-sound-nature-sound"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}