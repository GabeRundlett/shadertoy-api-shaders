{
    "Shader": {
        "info": {
            "date": "1624242454",
            "description": "Inspired by @TinyTexel's super cool and easy to understand construction for solving a cubic partially using an inverse smoothstep (a highly specialized cubic inverse).\n[url=https://www.shadertoy.com/view/3sBcDh]https://www.shadertoy.com/view/3sBcDh[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBGzK",
            "likes": 10,
            "name": "Cubic Equation Solver II",
            "published": 3,
            "tags": [
                "math",
                "solver",
                "cubic",
                "equation",
                "inversesmoothstep"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "/*\nThis turned out pretty clean, simple, and understandable! Also it never evaluates\nmore than four typically expensive functions (e.g. trig, square roots, etc.)\nwhich is one up on my other cubic solvers.\n\nI also added handling for when p=0 which simply blows up the whole thing but I'm not\nchecking for degenerate cubic equations (please don't solve linear equations\nwith this, ok? ;))\n*/\n\n// Special cube root to fix GLSL's negative pow() bug\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float u = b / (3.0 * a);\n\n    // Depress to x^3 + px + q by substituting x-b/3a\n    // This can be found by substituting x+u and solving for u so that the x^2\n    // term gets eliminated (then of course dividing by the leading coefficient)\n    float p = (c - b * u) / a;\n    float q = (d - (c - 2.0 * b * b / (9.0 * a)) * u) / a;\n\n    // Everything blows up when p=0 so give this case special treatment\n    if (abs(p) < 1e-9) { roots.x = cbrt(-q) - u; return 1; }\n\n    // In the case of one root, this construction does not work\n    float h = 0.25 * q * q + p * p * p / 27.0;\n    if (h > 0.0) { // Check depressed cubic discriminant\n        h = sqrt(h);\n        float o = -0.5 * q;\n        roots.x = cbrt(o - h) + cbrt(o + h) - u; // Cardano's formula (see https://en.wikipedia.org/wiki/Cubic_equation)\n        return 1;\n    }\n\n    // Solve by mapping an inverse smoothstep between the critical points\n    // I found a whole lot simplified right out so now it probably looks rather obfuscated\n    float m = sqrt(-p / 3.0);\n    roots.x = -2.0 * m * sin(asin(1.5 * q / (p * m)) / 3.0);\n\n    // Factor out the root to solve for the rest as a quadratic\n    h = sqrt(-3.0 * roots.x * roots.x - 4.0 * p);\n    roots.yz = 0.5 * vec2(h - roots.x, -h - roots.x);\n    roots -= u; // Undo the change in variable\n\n    return 3;\n}\n\n/* Without comments (for size comparison, giant solvers are no fun to tote around)\nfloat cbrt(in float x) { return sign(x) * pow(abs(x), 1.0 / 3.0); }\nint solveCubic(in float a, in float b, in float c, in float d, out vec3 roots) {\n    float u = b / (3.0 * a);\n\n    float p = (c - b * u) / a;\n    float q = (d - (c - 2.0 * b * b / (9.0 * a)) * u) / a;\n\n    if (abs(p) < 1e-9) { roots.x = cbrt(-q) - u; return 1; }\n    float h = 0.25 * q * q + p * p * p / 27.0;\n    if (h > 0.0) {\n        h = sqrt(h);\n        float o = -0.5 * q;\n        roots.x = cbrt(o - h) + cbrt(o + h) - u;\n        return 1;\n    }\n\n    float m = sqrt(-p / 3.0);\n    roots.x = -2.0 * m * sin(asin(1.5 * q / (p * m)) / 3.0);\n\n    h = sqrt(-3.0 * roots.x * roots.x - 4.0 * p);\n    roots.yz = 0.5 * vec2(h - roots.x, -h - roots.x);\n    roots -= u;\n\n    return 3;\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Animated coefficients\n    float a = sin(iTime) * 2.0;\n    float b = sin(iTime) * 5.0;\n    float c = cos(iTime * 0.75);\n    float d = sin(iTime * 0.5);\n\n    float f = a * uv.x * uv.x * uv.x + b * uv.x * uv.x + c * uv.x + d;\n    float g = 3.0 * a * uv.x * uv.x + 2.0 * b * uv.x + c; // Derivative for distance estimate\n    float cubic = abs(uv.y - f) / sqrt(1.0 + g * g); // Distance estimate\n\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, abs(uv.y))); // X axis\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, cubic)); // Cubic function\n\n    // Solve for the roots of the derivative (a quadratic)\n    // to get the extrema\n    float da = 3.0 * a;\n    float db = 2.0 * b;\n    float dc = c;\n\n    float discr = db * db - 4.0 * da * dc;\n    vec2 ex1 = vec2(0.0), ex2 = vec2(0.0);\n    if (discr > 0.0) {\n        discr = sqrt(discr);\n        da *= 2.0;\n\n        // Extrema 1\n        ex1 = vec2((-db + discr) / da, 0.0);\n        ex1.y = ((a * ex1.x + b) * ex1.x + c) * ex1.x + d;\n\n        // Extrema 2\n        ex2 = vec2((-db - discr) / da, 0.0);\n        ex2.y = ((a * ex2.x + b) * ex2.x + c) * ex2.x + d;\n\n        // Draw the segment between the extrema where the inverse smoothstep\n        // gets fitted\n        if (min(ex1.x, ex2.x) < uv.x && uv.x < max(ex1.x, ex2.x)) {\n            color = mix(color, vec3(1.0, 0.8, 0.0), smoothstep(unit, 0.0, cubic - 0.025));\n        }\n\n        // Draw the extrema\n        color = mix(color, vec3(1.0, 0.0, 1.0), smoothstep(unit, 0.0, length(uv - ex1) - 0.05));\n        color = mix(color, vec3(1.0, 0.0, 1.0), smoothstep(unit, 0.0, length(uv - ex2) - 0.05));\n    }\n\n    // Draw roots\n    vec3 roots;\n    int nroots = solveCubic(a, b, c, d, roots);\n    for (int n=0; n < nroots; n++) {\n        vec3 rootColor = vec3(1.0);\n        if (n == 0 && sign(ex1.y) != sign(ex2.y)) rootColor.rb = vec2(0.0); // Draw inverse smoothstepped root in green\n        color = mix(color, rootColor, smoothstep(unit, 0.0, length(uv - vec2(roots[n], 0.0)) - 0.05));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}