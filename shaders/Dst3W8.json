{
    "Shader": {
        "info": {
            "date": "1677201068",
            "description": "@zznewclear13's digital clock with hours, minutes and seconds and some added background hue rotation added.  I also fixed the 4's to look how @zznewclear13 was asking\n\nI also added documentation to the digit rendering function D() within the common block.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dst3W8",
            "likes": 6,
            "name": "Digital Time Clock",
            "published": 3,
            "tags": [
                "2d",
                "time",
                "clock",
                "font"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "// Fork of \"[zznewclear13] Digital Clock\" by zznewclear13. https://shadertoy.com/view/stdGRH\n// 2023-02-24 00:57:24\n\n// A digital clock (only shows minutes and seconds)\n// Inspired by https://www.shadertoy.com/view/Mt3XW8\n// Some functions are borrowed from iq, Dave_Hoskins, and FabriceNeyret2 (see Common tab)\n\n// I want a 4 like this, Fabrice please help!\n//\n//   1   1 \n//   1   1\n//   1 1 1\n//       1\n//       1\n\n#define GRID_COUNT_Y 18.0\n#define ACTIVE_TIME 0.3\n#define TWELVE_HOUR_MODE   true\n#define PI (2.0*3.141592653589793238)\n\nvec3 hueToRGB(float h, float s, float l)\n{\n    h = mod(h,360.0);\n    h = h / 60.0;\n    float c = (1.0 - abs(2.0 * l - 1.0)) * s;\n    float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n    vec3 rgb;\n    if(h <= 1.0)\n        rgb = vec3(c, x, 0.0);\n    else if(h <= 2.0)\n        rgb = vec3(x, c, 0.0);\n    else if(h <= 3.0)\n        rgb = vec3(0.0, c, x);\n    else if(h <= 4.0)\n        rgb = vec3(0.0, x, c);\n    else if(h <= 5.0)\n        rgb = vec3(x, 0.0, c);\n    else if(h <= 6.0)\n        rgb = vec3(c, 0.0, x);\n    \n    float m = l - 0.5 * c;\n        \n    return rgb + m;\n}\n\nfloat getTimeDigits(vec2 blockIndex, float dateW)\n{\n    float n = 0.0f;  \n    \n    // make colons\n    if(abs(blockIndex.y-0.5f)==1.0f && \n            (blockIndex.x==5.5f || blockIndex.x==-4.5f) ) n=1.0f;\n\n    // hours\n    blockIndex += vec2(17.0f, 3.0f);\n    float hours = floor(dateW/3600.0);\n    if(TWELVE_HOUR_MODE) {\n        if(hours>12.0) {\n            hours-= 12.0;\n        } else if (hours==0.0) {\n            hours = 12.0;\n        }\n    }\n    n += N(blockIndex, hours);\n\n    //minutes\n    blockIndex -= vec2(10.0f, 0.0f);\n    float minutes = mod(dateW, 3600.0f) / 60.0f;\n    n += N(blockIndex, minutes);\n    \n    //seconds\n    blockIndex -= vec2(10.0f, 0.0f);\n    float seconds = mod(dateW, 60.0f);\n    n += N(blockIndex, seconds);\n\n    return n;\n}\n\nvec3 renderBlock(vec2 blockUV, vec3 colorTop, vec3 colorBottom, float invPixelCountY, float progress)\n{\n    vec4 box1Params = vec4(0.05f, 0.05f, 0.95f, 0.95f);\n    float box1Radius = 0.05f;\n    float sdfBox1 = sdRoundedBox(blockUV, box1Params.xy, box1Params.zw, box1Radius);  \n    float box1 = smoothstep(0.0f, 1.5f * invPixelCountY, sdfBox1);\n    \n    float sinVal = sin(progress * 1.5708);\n    float cosVal = cos(progress * 1.5708);\n    float seperatorThickness = 0.06f;\n    float seperator = (1.0f - seperatorThickness * 0.5f) - sinVal * (1.0f - seperatorThickness);\n    \n    float minMargin = 0.01f;\n    float maxMargin = 0.05f;\n    float sideMargin = 0.04f;\n    float bottomMargin = minMargin;\n    float topMargin = minMargin;\n    \n    // bottom\n    vec4 box2Params = vec4(0.05f + minMargin, 0.05f + bottomMargin,\n                            0.95f - sideMargin, seperator-seperatorThickness*0.5f);\n    float box2Radius = 0.05f;\n    float sdfBox2 = sdRoundedBox(blockUV, box2Params.xy, box2Params.zw, box2Radius);\n    float box2 = smoothstep(0.0f, 1.5f * invPixelCountY, sdfBox2);\n    \n    // top\n    vec4 box3Params = vec4(0.05f + minMargin, seperator+seperatorThickness*0.5f,\n                            0.95f - sideMargin, 0.95f-topMargin);\n    float box3Radius = 0.05f;\n    float sdfBox3 = sdRoundedBox(blockUV, box3Params.xy, box3Params.zw, box3Radius);\n    float box3 = smoothstep(0.0f, 1.5f * invPixelCountY, sdfBox3);\n    \n    \n    vec2 lightSource = normalize(vec2(0.5, 2.0f));\n    // background\n    vec3 color0 = vec3(0.40f, 0.40f, 0.20f);\n    // edge\n    vec3 color1 = vec3(0.95f, 0.95f, 0.85f) * lightSource.y;\n    // bottom\n    vec3 color2 = colorBottom * (dot(lightSource, vec2(cosVal, -sinVal)) * 0.3f + 0.7f);\n    // top\n    vec3 color3 = colorTop * (dot(lightSource, vec2(sinVal, cosVal)) * 0.3f + 0.7f);\n    \n    vec3 color = mix(color1, color0, box1);\n    color = mix(color2, color, box2);\n    color = mix(color3, color, box3);\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    vec2 pixelCount = iResolution.yy / GRID_COUNT_Y;\n    vec2 centerFragCoord = fragCoord+0.5f*pixelCount-(iResolution.xy)*0.5f;\n\n    float invPixelCountY = 1.0f / pixelCount.y; \n    ivec2 blockIndex = ivec2(floor(centerFragCoord * invPixelCountY));\n    vec2 blockUV = mod(centerFragCoord, pixelCount) * invPixelCountY;\n        \n    float progress = 0.5f;\n    // if(iMouse.z > 0.0f) {progress = 1.0f - fract(2.0f * iMouse.y / iResolution.y);}\n\n    float floorTime = floor(iDate.w);\n    float fractTime = fract(iDate.w);\n    float inactive = 1.0f - ACTIVE_TIME;\n    float randomVal = hash13(vec3(vec2(blockIndex), floorTime)) * inactive;\n\n    float dateW = floorTime;\n    progress = clamp((fractTime-randomVal) / ACTIVE_TIME, 0.0f, 1.0f);\n\n    float d1 = getTimeDigits(vec2(blockIndex)+vec2(0.5f), dateW);\n    float d2 = getTimeDigits(vec2(blockIndex)+vec2(0.5f), dateW+1.0f);\n    \n    vec3 colorBackground = vec3(0.95f, 0.95f, 0.85f);\n    \n    float time = mod(iTime*10.0,360.0);\n    colorBackground = hueToRGB( time+(60.0*(fragCoord.y/iResolution.y)),\n                          1.0, 0.7 );\n    \n    vec3 colorDigit = vec3(0.2f, 0.2f, 0.4f);\n    vec3 color1 = mix(colorBackground, colorDigit, d1);\n    vec3 color2 = mix(colorBackground, colorDigit, d2);\n    vec3 color = renderBlock(blockUV, color2, color1, invPixelCountY, progress);\n\n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/distfunctions2d/\nfloat sdRoundedBox( in vec2 p, in vec4 b, in float r )\n{\n    vec2 q = abs(p-b.xy)-b.zw+r;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r;\n}\n\nfloat sdRoundedBox( in vec2 p, in vec2 bl, in vec2 tr, in float r )\n{\n    vec2 c = (bl+tr)*0.5;\n    vec2 s = (tr-bl)*0.5;\n    vec2 q = abs(p-c)-s+r;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// https://www.shadertoy.com/view/ldKGRR\nfloat D(vec2 p, float n) {  // display digit\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n                         //  0   1   2   3   4   5   6   7   8   9\n        i==5? 973012991: // 111 001 111 111 101 111 111 111 111 111  /* old style 4==972980223 */\n        i==4? 690407533: // 101 001 001 001 101 100 100 001 101 101\n        i==3? 704642687: // 101 001 111 111 111 111 111 001 111 111\n        i==2? 696556137: // 101 001 100 001 001 001 101 001 101 001\n        i==1? 972881535: // 111 001 111 111 001 111 111 001 111 111\n    0 )/b;\n \treturn float(i-i/2*2);\n}\n\nfloat N(vec2 p, float v) {  // display number\n    for (float n=1.; n>=0.; n--)  // print digit 1 to 0 ( negative = fractionals )\n        if ((p.x-=4.)<3.) return D(p,floor(mod(v/pow(10.,n),10.))); \n    return 0.;\n} ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}