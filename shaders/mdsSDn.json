{
    "Shader": {
        "info": {
            "date": "1668737633",
            "description": "randomizing color with three oscillators (horizontal vertical and radial) and cutting off at a vibrating threshold",
            "flags": 0,
            "hasliked": 0,
            "id": "mdsSDn",
            "likes": 3,
            "name": "jigglers",
            "published": 3,
            "tags": [
                "wave"
            ],
            "usePreview": 0,
            "username": "nickbrick",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "float wave(float v, float freq, float scale){\n    return 0.5 + 0.5 * sin(scale * v) * sin(freq * iTime);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #define SMALLDIM min(iResolution.x, iResolution.y)\n    #define C (iResolution.xy / SMALLDIM / 2.0)\n    #define LOW 1.2\n    #define HIGH 1.5\n    #define JIGGLEFREQ 20.0\n    #define JIGGLEAMP 0.0051 \n    #define BLUR (1.0 / SMALLDIM)\n    vec2 uv = fragCoord / SMALLDIM;\n\n    vec4 col = vec4(wave(uv.x, 0.5, 8.0),\n                    wave(uv.y, 0.6, 12.0),\n                    wave(pow(uv.x - C.x, 2.0) + pow(uv.y - C.y, 2.0), 0.7, 16.0),\n                    1.0);\n    float j = JIGGLEAMP * sin(iTime * JIGGLEFREQ);\n    float f = smoothstep(LOW  + j, LOW  + j + BLUR, length(col))\n             -smoothstep(HIGH + j, HIGH + j + BLUR, length(col));\n    fragColor = vec4(vec3(f), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}