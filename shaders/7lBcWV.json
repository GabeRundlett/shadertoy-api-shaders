{
    "Shader": {
        "info": {
            "date": "1666250902",
            "description": "just a dumb feedback shader - Buffer - I dont even know her!",
            "flags": 32,
            "hasliked": 0,
            "id": "7lBcWV",
            "likes": 31,
            "name": "Dumb Feedback Shader",
            "published": 3,
            "tags": [
                "feedback",
                "buffer"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    dumb feedback shader..looks kind of cool and runs pretty good fullscreen.\n    10/20/22 @byt3_m3chanic \n*/\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    vec3 C = vec3(0);\n    vec2 uv = F.xy/R.xy;\n \n    C = texture(iChannel0,uv).rgb;   \n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    dumb feedback shader..looks kind of cool and runs pretty good fullscreen.\n    10/20/22 @byt3_m3chanic  \n*/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI2 6.28318530718\n#define PI  3.14159265359\n\nmat2 rot(float g) {return mat2(cos(g), sin(g),-sin(g), cos(g));}\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n    // Four corners in 2D of a tile\n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3. - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nconst int oct = 2;\nfloat fbm ( in vec2 uv) {\n    uv*=.125;\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rt = rot(.15);\n    for (int i = 0; i < oct; ++i) {\n        v += a * noise(uv);\n        uv = rt * uv * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    dumb feedback shader..looks kind of cool and runs pretty good fullscreen.\n    10/20/22 @byt3_m3chanic  \n*/\n\nfloat time;\nconst float scale = 5.;\n\nvec3 hue(float t){ \n    const vec3 c = vec3(0.122,0.467,0.918);\n    return .4 + .4*cos(PI2*t*(c+vec3(0.000,0.475,0.839))); \n}\nfloat box( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    time = iTime;\n\n    vec2 uv = (2.* F.xy-R.xy)/max(R.x,R.y);\n    vec2 vuv = uv;\n    uv*=rot(T*.1);\n    vec3 C = texture(iChannel0,(F.xy/R.xy)).rgb*exp2(-2.*iTimeDelta);\n    \n    uv.y-=1.25*sin(T*.075);\n    uv.x-=.25*cos((T*.5)+1.*sin(T*.05));\n    \n    float px = scale/R.x;\n\n    vec2 id= floor(uv*scale);\n    vec2 p = fract(uv*scale)-.5;\n    \n    \n    float hf = hash21(id);\n    float xk = .02;\n    if(hf>.8){\n        id= floor(p+id*2.);\n        p = fract(p*2.)-.5;\n        hf = hash21(id);\n        px = scale*2./R.x;\n        xk = .03;\n        if(hf>.7){\n            id= floor(p+id*2.);\n            p = fract(p*2.)-.5;\n            hf = hash21(id);\n            px = scale*4./R.x;\n            xk = .04;\n            if(hf>.9){\n                id= floor(p+id*2.);\n                p = fract(p*2.)-.5;\n                hf = hash21(id);\n                px = scale*8./R.x;\n                xk = .05;\n            }\n        }\n    }\n    \n    float hs = fbm(id*3.25);\n\n    p*=rot(T*(.1*hs)*PI);\n    float d1 = hf>.5?length(p)-(hf*.5):box(p,vec2(.365,hf*.25));\n\n    d1=smoothstep(px,-px,abs(d1)-xk);\n\n    float ff = vuv.y*.075;\n    vec3 clr=mix(hue((ff*PI)+T*.05),hue(((1.-ff)*PI)+T*.025),ff);\n    C = mix(C,hf>.6?clr:vec3(.03),d1);\n\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}