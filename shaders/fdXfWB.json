{
    "Shader": {
        "info": {
            "date": "1679227448",
            "description": "In 2018 I made a giant hash maze, as a stage for a Harry Potter-themed puzzle game I was working on. It's fun to watch a 'flood fill' within the maze grow, as if it's organic. The maze is not a fully-connected graph; isolated areas will remain white.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdXfWB",
            "likes": 9,
            "name": "Flood Fill Maze",
            "published": 3,
            "tags": [
                "maze"
            ],
            "usePreview": 0,
            "username": "ruudhelderman",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "// Output\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //float zoom = max(1.0, 50.0 * exp(-0.3 * iTime));\n    float zoom = 1.0;\n    fragColor = texture(iChannel0, (fragCoord / iResolution.xy - 0.5) / zoom + 0.5);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Flood fill\n// Keeping state in Buffer A\n\nint speed()\n{\n    return 1;       //return max(1, 32 >> (iFrame / 180));\n}\n\nbool need_restart()   // sorry, fails to detect a return from fullscreen\n{\n    return texelFetch(iChannel0, ivec2(iResolution.xy) - 1, 0).a == 0.0;\n}\n\nvoid flood(inout vec4 color, in ivec2 coord)\n{\n    vec4 neighbor = texelFetch(iChannel0, coord, 0);\n    if (color == color_open && neighbor == color_filled) color = neighbor;\n}\n\nvec4 init_color(ivec2 pos)\n{\n    return pos == center_pos ? color_filled : color_open;\n}\n\nvec4 next_color(ivec2 pos, ivec2 coord)\n{\n    vec4 color = texelFetch(iChannel0, coord, 0);\n    if (iFrame % speed() == 0)\n    {\n        if (left(pos)                == 0) flood(color, coord - ivec2(1,0));\n        if (left(pos + ivec2(1,0))   == 0) flood(color, coord + ivec2(1,0));\n        if (bottom(pos)              == 0) flood(color, coord - ivec2(0,1));\n        if (bottom(pos + ivec2(0,1)) == 0) flood(color, coord + ivec2(0,1));\n    }\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 pos = ivec2(fragCoord) - ivec2(0.5 * iResolution.xy) + center_pos;\n    fragColor = need_restart() ? init_color(pos) : next_color(pos, ivec2(fragCoord));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Procedurally generated maze\n// https://helderman.github.io/infinite-hash-maze/\n\nconst vec4 color_wall   = vec4(0, 0, 0, 1);    // black\nconst vec4 color_open   = vec4(1, 1, 1, 1);    // white\nconst vec4 color_filled = vec4(0, 1, 0, 1);    // green\n\nconst ivec2 center_pos  = ivec2(479, 2515);\n\nconst ivec2 seed_bottom = ivec2( 563, 761);\nconst ivec2 seed_left   = ivec2(1409, 397);\n\nint parity(int n)\n{\n\tn ^= n >> 8;\n\tn ^= n >> 4;\n\tn ^= n >> 2;\n\tn ^= n >> 1;\n\treturn n & 1;\n}\n\nint idot(ivec2 a, ivec2 b)\n{\n    return a.x * b.x + a.y * b.y;\n}\n\nint left(ivec2 pos)\n{\n\treturn parity(idot(pos, seed_left));\n}\n\nint bottom(ivec2 pos)\n{\n\treturn parity(idot(pos, seed_bottom));\n}\n\nint junction(ivec2 pos)\n{\n    return left(pos) | left(pos - ivec2(0,1)) | bottom(pos) | bottom(pos - ivec2(1,0));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Draw walls\n\nconst float zoom = 2.0;\nconst vec2 edge = vec2(0.5, 0.5);\n\nint walled(vec2 fraction, ivec2 pos)\n{\n    return fraction.x < edge.x\n            ? fraction.y < edge.y ? junction(pos) : left(pos)\n            : fraction.y < edge.y ? bottom(pos) : 0;\n}\n\nvec4 tile(vec2 coord)\n{\n    ivec2 icoord = ivec2(floor(coord));\n    return walled(fract(coord), icoord + center_pos) > 0\n            ? color_wall\n            : texelFetch(iChannel0, icoord + ivec2(0.5 * iResolution.xy), 0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = tile((fragCoord - 0.5 * iResolution.xy) / zoom);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}