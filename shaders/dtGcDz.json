{
    "Shader": {
        "info": {
            "date": "1700097299",
            "description": "finds the largest circle that fits in a voronoi cell (can generalize to any polygon)\nexceptionally slow\nnote how all the correct circles touch 3 edges\nclick + drag to pan",
            "flags": 32,
            "hasliked": 0,
            "id": "dtGcDz",
            "likes": 7,
            "name": "voronoi largest circle",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "struct VoronoiData {\n    float dist;\n    float edgedist;\n    float edgedist2;\n    float edgecornerdist;\n    vec2 edgenormal;\n    vec2 edgenormal2;\n    vec2 edgecornernormal;\n    vec2 point;\n};\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//https://iquilezles.org/articles/voronoilines/\nVoronoiData voronoi2dedges(vec2 uv){\n    vec2 n = floor(uv);\n    vec2 f = fract(uv);\n\n\tvec2 mr;\n\n    float md = 8.0;\n    for(int j=-1; j<=1; j++)\n    for(int i=-1; i<=1; i++){\n        vec2 g = vec2(i,j);\n\t\tvec2 o = hash22(n + g);\n        vec2 r = g + o - f;\n        float d = dot(r, r);\n\n        if(d < md){\n            md = d;\n            mr = g + o;\n        }\n    }\n\n    float med = 8.0;\n    float med2 = 8.0;\n    float med3 = 8.0;\n    vec2 men = vec2(0);\n    vec2 men2 = vec2(0);\n    vec2 men3 = vec2(0);\n    for(int j=-2; j<=2; j++)\n    for(int i=-2; i<=2; i++){\n        vec2 g = vec2(i,j);\n\t\tg += hash22(n + g);\n        vec2 k = g - mr;\n\n        float l = dot(g + mr - 2.0*f, k)*0.5/length(k);\n        if (l < med){\n            med3 = med2;\n            men2 = men;\n            med2 = med;\n            men3 = men2;\n            men2 = men;\n            men = k;\n            med = l;\n        } else if (l < med2){\n            med3 = med2;\n            med2 = l;\n            men3 = men2;\n            men2 = k;\n        } else if (l < med3){\n            med3 = l;\n            men3 = k;\n        }\n    }\n\n    return VoronoiData(md, med, abs(med - med2), (abs(med - med2) + abs(med - med3))/(med+0.0001), normalize(men), normalize(men2-men), normalize(men - men2 + men - men3), mr + n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - texelFetch(iChannel0, ivec2(1,0), 0).xy)/iResolution.y*2.0;\n    VoronoiData vuv = voronoi2dedges(uv);\n\n    vec2 p = vuv.point;\n    vec2 pi = p; //bad name lol\n    \n    VoronoiData v;\n    for (int i = 0; i < 32; i++){\n        v = voronoi2dedges(p);\n        p -= v.edgenormal*v.edgecornerdist*0.01;\n        if (v.edgecornerdist < 0.0001) break;\n    }\n\n    // Output to screen\n    fragColor = vec4(1);    \n    fragColor = mix(vec4(0.0),fragColor,smoothstep(0.0,1.0,vuv.edgecornerdist*0.5)); //tertiaries\n    fragColor = mix(vec4(1,0,0,0),fragColor,smoothstep(0.0,0.1,distance(uv,pi))); //secondary edges\n    fragColor = mix(vec4(0.000,0.741,0.012,0),fragColor,smoothstep(0.0,0.01,vuv.edgedist2)); //voronoi point\n    fragColor = mix(vec4(0),fragColor,smoothstep(0.0,0.01,abs(distance(uv,p)-v.edgedist))); //largest circle\n    fragColor = mix(vec4(0),fragColor,smoothstep(0.0,0.01,vuv.edgedist)); //edges\n    fragColor = mix(vec4(0.000,0.882,1.000,0),fragColor,smoothstep(0.0,0.1,distance(uv,p))); //center point\n    //fragColor = vec4(vuv.edgecornerdist);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}