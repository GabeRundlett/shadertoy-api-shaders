{
    "Shader": {
        "info": {
            "date": "1537458237",
            "description": "A simple ray tracing demo.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlVyzy",
            "likes": 12,
            "name": "Demo - Simple Ray Tracing",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "demo"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 990
        },
        "renderpass": [
            {
                "code": "#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nconst int NUM_SAMPLES = 50;\nconst int MAX_REFLECTIONS = 5;\n\nstruct Material \n{\n\tvec3 albedo;\n    float roughness;\n};\n\nMaterial shape_materials[] = Material[] (\n    Material(vec3(0.0, 0.7, 0.7), 0.2f),\n    Material(vec3(0.6, 0.6, 0.0), 0.8f),\n    Material(vec3(0.4), 0.1f),\n    Material(vec3(0.8), 0.0f),\n    Material(vec3(0.8), 0.4f),\n    Material(vec3(0.5), 0.9f)\n);\n\nstruct RayCastHitInfo\n{\n    vec3 pos;\n    vec3 normal;\n    Material material;\n};\n\nmat3 lookAt(in vec3 eye, in vec3 center, in vec3 up)\n{\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n//distance operations\nvec2 opU(vec2 a, vec2 b) { return a.x < b.x ? a : b; } //union\n\nfloat opI(float a, float b) { return max(a, b); } //intersection\n\nfloat opS(float a, float b) { return max(-a, b); } //substraction\n\n//distance functions\nfloat sdSphere(vec3 pos, float radius) { return length(pos) - radius; }\n\nfloat sdPlane(vec3 pos, vec3 normal) { return dot(pos, normal); }\n\nfloat sdBox(vec3 pos, vec3 size) \n{\n    vec3 d = abs(pos) - size;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec2 mapScene(vec3 pos) \n{ \n    float shapeIndex = 0.0;\n    vec2 res = vec2(sdSphere(pos - vec3(0, 0, 0), 1.0), shapeIndex++);\n    res = opU(res, vec2(opI(sdBox(pos - vec3(3, 0, 0), vec3(0.8)), sdSphere(pos - vec3(3, 0, 0), 1.0)), shapeIndex++));\n    res = opU(res, vec2(sdSphere(pos - vec3(-3, 0, 0), 1.0), shapeIndex++));\n    res = opU(res, vec2(sdSphere(pos - vec3(0, 0, -3), 1.0), shapeIndex++));\n    res = opU(res, vec2(opS(sdSphere(pos - vec3(0, 0, 3), 1.0), sdBox(pos - vec3(0, 0, 3), vec3(0.8))), shapeIndex++ ));\n    res = opU(res, vec2(sdPlane(pos - vec3(0, -1, 0), vec3(0, 1, 0)), shapeIndex++));\n    return res;\n}\n\nfloat sdScene(vec3 pos) { return mapScene(pos).x; }\n\nvec3 calculateNormal(in vec3 point) \n{\n    const vec3 step = vec3(0.01, 0.0, 0.0);\n    float gradX = sdScene(point + step.xyy) - sdScene(point - step.xyy);\n    float gradY = sdScene(point + step.yxy) - sdScene(point - step.yxy);\n    float gradZ = sdScene(point + step.yyx) - sdScene(point - step.yyx);\n    \n    vec3 normal = vec3(gradX, gradY, gradZ);\n    return normalize(normal);\n}\n\nvec2 rayMarch(vec3 rayOri, vec3 rayDir)\n{\n    const float MAX_TRACE_DISTANCE = 200.0;\n    \n    float totalDistance = 0.0, shapeIndex = -1.0;\n    for (int i = 0; i < 128; ++i) {\n        vec2 res = mapScene(rayOri + totalDistance * rayDir);\n        float minHitDistance = 0.0005 * totalDistance;\n        if (res.x < minHitDistance) {\n            shapeIndex = res.y; break; \n        }\n        if (totalDistance > MAX_TRACE_DISTANCE) break;\n        totalDistance += res.x;\n    }\n    \n\treturn vec2(totalDistance, shapeIndex);\n}\n\nbool scatter(in vec3 rayDir,in RayCastHitInfo hitInfo, out vec3 scatteredDir, out vec3 attenuation)\n{\n    Material mat = hitInfo.material;\n\tscatteredDir = reflect(rayDir, hitInfo.normal) + hash33(1.e4 * hitInfo.pos) * mat.roughness;\n\tattenuation = mat.albedo;\n    return dot(scatteredDir, hitInfo.normal) > 0.0;\n}\n\nvec3 render(in vec3 rayOri, in vec3 rayDir)\n{\n\tvec3 rayColor = vec3(1.0);\n    for (int i = 0; i <= MAX_REFLECTIONS; ++i)\n    {\n\t\tvec2 res = rayMarch(rayOri, rayDir);\n    \tint shapeIndex = int(res.y);\n        bool hit = shapeIndex >= 0;\n        \n    \tif (hit) {\n            RayCastHitInfo hitInfo;\n        \thitInfo.pos = rayOri + rayDir * res.x;\n        \thitInfo.normal = calculateNormal(hitInfo.pos);\n            hitInfo.material = shape_materials[shapeIndex];\n \n            vec3 scatteredDir, attenuation;\n            if (scatter(rayDir, hitInfo, scatteredDir, attenuation)) {\n            \trayColor *= attenuation;\n            \trayOri = hitInfo.pos;\n            \trayDir = scatteredDir;\n            }\n    \t}\n        else {\n        \tbreak;\n        }    \n    }\n    \n    vec3 bgColor = texture(iChannel0, rayDir).rgb;\n\trayColor *= bgColor;\n    \n    return rayColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec3 totalColor = vec3(0.0);\n    vec2 angle = (iMouse.z > 0.5) ? 4.0*(2.0*iMouse.xy/iResolution.xy-1.0) : vec2(0.0);\n    vec3 rayOri = vec3(12.0*cos(angle.x), angle.y+3.0, 12.0*sin(angle.x));\n    vec3 rayTgt = vec3(0.0);\n    mat3 viewMat = lookAt(rayOri, rayTgt, vec3(0.0, 1.0, 0.0));\n    \n    for (int i = 0; i < NUM_SAMPLES; ++i) {\n        vec2 offset = vec2(hash21(float(i)));\n        vec2 uv = (fragCoord + offset - iResolution.xy * 0.5) / iResolution.x;\n\t\tvec3 rayDir = normalize(viewMat * vec3(uv, -1.0));\n\n   \t\tvec3 color = render(rayOri, rayDir);\n        totalColor += color;\n    }         \n    \n\ttotalColor /= float(NUM_SAMPLES);\n    totalColor = pow(totalColor, vec3(1.0/2.2));\n\tfragColor = vec4(totalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}