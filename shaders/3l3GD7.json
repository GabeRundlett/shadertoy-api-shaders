{
    "Shader": {
        "info": {
            "date": "1576483133",
            "description": "Surface coordinates",
            "flags": 0,
            "hasliked": 0,
            "id": "3l3GD7",
            "likes": 21,
            "name": "Decalled Floppy Tube",
            "published": 3,
            "tags": [
                "torus",
                "coordinates",
                "decal"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1381
        },
        "renderpass": [
            {
                "code": "// \"Decalled Floppy Tube\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Provides coordinates useful for flexible shapes based on generalized toroidal\n  sections (e.g. fish bodies, snakes, wings); preferable to sheared coordinates\n  or multiple linear segements.\n*/\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, dLoop, sLoop, rCyl, sDir;\nint idObj;\nconst int idTube = 1, idBase = 2, idGrnd = 3;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 b;\n  float dMin, d, hBase, aLoop, lb;\n  dMin = dstFar;\n  d = p.y;\n  DMIN (idGrnd);\n  hBase = 1.6;\n  p.x *= sDir;\n  aLoop = 0.25 * pi / sLoop;\n  q = p;\n  q.y -= 2. * hBase;\n  d = PrSphDf (q, rCyl);\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.xy = Rot2D (vec2 (q.x, q.y - dLoop), aLoop - 0.5 * pi);\n  b = vec2 (length (q.xy) - dLoop, q.z);\n  lb = length (b);\n  d = min (d, max (lb - rCyl, dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi)))));\n  d = min (d, PrSphDf (vec3 (Rot2D (q.xy, aLoop) + vec2 (dLoop, 0.), q.z), rCyl));\n  if (d < dMin) {\n    dMin = d;\n    idObj = idTube;\n    qHit = vec3 (vec2 (atan (q.y, - q.x) * dLoop / (0.25 * pi), atan (b.x, b.y)) / pi, lb);\n  }\n  q = p;\n  q.y -= hBase - 0.5 * rCyl;\n  d = PrCylDf (q.xzy, rCyl, hBase - 0.5 * rCyl);\n  DMIN (idBase);\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn;\n  vec2 p, ip;\n  float nDotL, sh, c;\n  vn = ObjNf (ro);\n  nDotL = max (dot (vn, ltDir), 0.);\n  if (idObj == idTube) {\n    if (qHit.z < 0.7 * rCyl) {\n      col4 = vec4 (1., 1., 0., 0.2) * (0.2 + 0.8 * smoothstep (0.1, 0.2, qHit.z / rCyl));\n    } else {\n      p = qHit.xy * vec2 (2. * sqrt3, 3.);\n      ip = PixToHex (p);\n      c = mod (dot (mod (2. * ip + ip.yx, 3.), vec2 (1., 2.)), 3.);\n      col4 = vec4 (1., 0., 0., 0.2);\n      if (c == 1.) col4.rgb = col4.gbr;\n      else if (c == 2.) col4.rgb = col4.brg;\n      col4 = mix (vec4 (1., 1., 0., 0.2), col4, smoothstep (0.05, 0.1,\n         HexEdgeDist (p - HexToPix (ip))));\n    }\n    nDotL *= nDotL;\n  } else if (idObj == idBase) {\n    col4 = vec4 (0.8, 0.8, 0.7, 0.1);\n  } else if (idObj == idGrnd) {\n    col4 = vec4 (0.4, 0.4, 0.45, 0.05);\n  }\n  sh = ObjSShadow (ro, ltDir);\n  col4.rgb = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n     0.2 * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  return col4.rgb;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float dstObj, tCyc, t;\n  tCyc = 10.;\n  t = tCur / tCyc;\n  sLoop = 1./3. + 200. * pow (1. - SmoothBump (0.25, 0.75, 0.24, mod (t, 1.)), 8.);\n  sDir = 1.; // 2. * floor (mod (t, 2.)) - 1.;\n  dLoop = 6. * sLoop;\n  rCyl = 0.8;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    col = ObjCol (ro, rd);\n   } else {\n    col = vec3 (0.5);\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\n#define AA  1\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = 0.;\n  az = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.1 * tCur;\n  }\n  el = clamp (el, -0.4 * pi, 0. * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 6., -25.);\n  zmFac = 3.;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 70.;\n  ltDir = vuMat * normalize (vec3 (0.7, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}