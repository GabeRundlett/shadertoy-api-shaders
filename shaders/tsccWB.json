{
    "Shader": {
        "info": {
            "date": "1601626406",
            "description": "The original version; other computations are left as exercises for the reader.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsccWB",
            "likes": 8,
            "name": "Cloud Computing",
            "published": 3,
            "tags": [
                "binary",
                "fog",
                "arithmetic"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "// \"Cloud Computing\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat TriNoise3d (vec3 p);\nfloat Hashfv3 (vec3 p);\n\nfloat dstFar, tCur, tPos, densFac;\nconst float pi = 3.1415927;\n\nvec2 CapsHit (vec3 ro, vec3 rd, float cRad, float cLen)\n{\n  float dIn, dOut, d, a, b, bs, w, s, ws, roz;\n  dIn = dstFar;\n  dOut = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - cRad * cRad);\n  if (w > 0. && a > 0.) {\n    ws = sqrt (w);\n    d = - (b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (d > 0. && abs (s) < cLen) dIn = d;\n    else {\n      roz = ro.z;\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) {\n        d = - bs - sqrt (w);\n        if (d > 0.) dIn = d;\n      }\n      ro.z = roz;\n    }\n  }\n  if (dIn < dstFar) {\n    d = (- b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (abs (s) < cLen) dOut = d;\n    else {\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) dOut = - bs + sqrt (w);\n    }\n  }\n  return vec2 (dIn, dOut);\n}\n\nfloat CldDens (vec3 p, vec2 cldSz)\n{\n  float c;\n  c = max (0., 1.1 * TriNoise3d (vec3 (0.5 * p.xy - 0.1 * p.z + 0.1 * tPos,\n     0.5 * p.z + 0.05 * tPos)) - 0.1);\n  return densFac * c * (1. - smoothstep (-0.3 * cldSz.x, 0., length (vec3 (p.xy,\n     p.z - clamp (p.z, - cldSz.y, cldSz.y))) - cldSz.x));\n}\n\nvec3 CldCol (vec3 col, vec3 ro, vec3 rd, int dir, vec2 cldSz)\n{  // adapted from \"Misty Flight\", but marching through capsule\n  vec4 col4;\n  vec2 dCyl2;\n  vec3 q, c;\n  float s, ds, f, fn, r;\n  const float sMax = 40.;\n  tPos += 10.;\n  col4 = vec4 (col, 0.);\n  ro = (dir == 0) ? ro.yzx : ro.xzy;\n  rd = (dir == 0) ? rd.yzx : rd.xzy;\n  dCyl2 = CapsHit (ro, rd, cldSz.x, cldSz.y);\n  if (dCyl2.x < dstFar) {\n    ds = min (2. * cldSz.x, dCyl2.y - dCyl2.x) / sMax;\n    s = dCyl2.x;\n    q = ro + s * rd;\n    r = length (q.xy) / cldSz.x;\n    q.xy = Rot2D (q.xy, 0.5 * r * q.z);\n    fn = CldDens (q, cldSz);\n    for (float j = 0.; j < sMax; j ++) {\n      s += ds;\n      f = fn;\n      q = ro + (s + ds * Hashfv3 (16. * rd)) * rd;\n      r = length (q.xy) / cldSz.x;\n      q.xy = Rot2D (q.xy, 0.5 * r * q.z);\n      fn = CldDens (q, cldSz);\n      c = mix (vec3 (0.8), vec3 (1.), clamp ((0.3 / ds) * (f - fn), 0., 1.));\n      col4 += (1. - col4.a) * vec4 (c, 1.) * f / sMax;\n      if (col4.a > 1.) break;\n    }\n  }\n  return clamp (col4.rgb, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 cldSz;\n  float tCyc, x, y;\n  tPos = tCur;\n  tCyc = mod (tCur, 24.);\n  cldSz = vec2 (0.4, 2.);\n  col = vec3 (0.1, 0.1, 0.7) * (1. + 0.2 * rd.y);\n  ro.x += 5.;\n  x = ro.x;\n  y = ro.y;\n  densFac = 1. - smoothstep (22., 24., tCyc);\n  if (tCyc > 2.) {\n    ro.xy = vec2 (x + 3.5, y);\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 1.2));\n  }\n  if (tCyc > 4.) {\n    ro.xy = vec2 (x + 1.2, y);\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.3));\n    ro.x -= 2.4;\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.3));\n    ro.x = x;\n    ro.y = y + 1.2;\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 0.3));\n    ro.y -= 2.4;\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 0.3));\n  }\n  if (tCyc > 6.) {\n    ro.xy = vec2 (x - 3.5, y);\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 1.2));\n  }\n  if (tCyc > 8.) {\n    ro.xy = vec2 (x - 6.5, y + 0.6);\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.6));\n    ro.y -= 1.2;\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.6));\n  }\n  if (tCyc > 12.) {\n    ro.xy = vec2 (x - 9.5, y);\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 1.2));\n  }\n  if (tCyc > 14.) {\n    ro.xy = vec2 (x - 12.5, y + 2.4);\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.55));\n    ro.y -= 4.8;\n    col = CldCol (col, ro, rd, 0, cldSz * vec2 (1., 0.55));\n    ro.x += 1.4;\n    ro.y = y;\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 0.8));\n    ro.x -= 2.8;\n    col = CldCol (col, ro, rd, 1, cldSz * vec2 (1., 0.8));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.3 * pi * sin (0.05 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  zmFac = 5.;\n  ro = vuMat * vec3 (0., 0., -30.);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat TriNoise3d (vec3 p)\n{\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx);\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.z + FrAbsf (p.y))));\n    q = 2. * q + 0.2;\n    a *= 0.7;\n  }\n  return f;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}