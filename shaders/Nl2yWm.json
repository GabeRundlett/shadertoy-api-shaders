{
    "Shader": {
        "info": {
            "date": "1649791312",
            "description": "Crappy attempt at an esoteric shader... Those loops certainly need some work.\nAnyways, the default code makes a 10 by 10 (each \"block\" is 10 by 10 pixels) square because I literally cannot make anything more complicated with it :) enjoy.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nl2yWm",
            "likes": 0,
            "name": "Shadef**k",
            "published": 3,
            "tags": [
                "language",
                "esoteric"
            ],
            "usePreview": 0,
            "username": "tungster24",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "/*\nSHADEF**K\n\na (barely) esoteric language for shaders\n\nYou're given a few basic commands, a pointer, and a single memory.\n\nU,D,L,R: Moves pointer by one pixel up,down,left,right respetively.\n\nINC,DEC: Increment/Decrement cell by one.\nRED: Read value at current cell.\n\nMEM: shortcut for the memory value.\nMS: sets memory to a specific value.\n\nC(a): will only work if the given value is equal to the memory\n\nRE: will repeat as much as the value in memory, you can use I if you want.\n\nB: will exit the repeat.\n\ngood luck :)\n*/\n\n#define U ptr.y++;\n#define D ptr.y--;\n#define R ptr.x++;\n#define L ptr.x--;\n#define INC if(ivec2(POS) == ptr) {COL += vec4(vec3(1.0/255.0),0.0);}\n#define DEC if(ivec2(POS) == ptr) {COL -= vec4(vec3(1.0/255.0),0.0);}\n#define RED memory = int(COL.r*255.0);\n#define MEM memory\n#define MS(a) memory = a;\n#define C(a) if(memory == a)\n#define RE for(int i = 0;i<memory;i++)\n#define B break;\n\nvoid mainImage( out vec4 COL, in vec2 POS )\n{\n    int memory;\n    POS /= 10.0;\n    ivec2 ptr = ivec2(iResolution.xy)/20;\n    COL = vec4(0.0);\n    \n    //CODE GOES HERE:\n    \n    MS(10) RE{\n        MS(10) RE{\n            MS(255)\n            RE { INC }\n            D\n            MS(10)\n        }\n        RE { U }\n        L\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}