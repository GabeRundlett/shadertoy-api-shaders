{
    "Shader": {
        "info": {
            "date": "1720179057",
            "description": "black and white fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "lXySzV",
            "likes": 2,
            "name": "Fractal B/W",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "trippy"
            ],
            "usePreview": 0,
            "username": "WilstonOreo",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "uniform float phase;\nuniform float flash;\n\nvec3 hsv(in float h, in float s, in float v)\n{\n\treturn mix(vec3(1.0), clamp((abs(fract(h + vec3(3, 2, 1) / 3.0) * 6.0 - 3.0) - 1.0), 0.0 , 1.0), s) * v;\n}\n\nmat2 rotation2d(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat2(\n    c, -s,\n    s, c\n  );\n}\n\n\nvec3 formula(in vec2 p, in vec2 c)\n{\n\tfloat n = 2.0;\n\tconst int iters = 8;\n\n\tfloat time = iTime*0.01;\n\tfloat col = length(p);\n\tfloat t = 1.0;\n\tfloat dpp = dot(p, p);\n\tfloat lp = sqrt(dpp);\n\tfloat r = smoothstep(0.0, 0.6, lp);\n        \n\tfor (int i = 0; i < iters; i++) {\n\t\t// The transformation\n\t\tp = abs(mod(p/dpp + c, n) - n/2.0);\n\t\t\n\t\tdpp = dot(p, p);\n\t\tlp = sqrt(dpp - 0.05);\n\n\n\t\tt *= smoothstep(0.0, 0.02, abs(n/2.0-p.x)*lp)\n\t\t   * smoothstep(0.0, 0.02, abs(n/2.0-p.y)*lp)\n\t\t   * smoothstep(0.0, 0.02, abs(p.x)*2.0) \n\t\t   * smoothstep(0.0, 0.02, abs(p.y)*2.0);\n\n\n\t\t// Fade out the high density areas, they just look like noise\n\t\tr *= smoothstep(0.0, 0.2, lp);\n\t\t\n\t\t// Add to colour using hsv\n\t\tcol += hsv(1.0 - max(p.x, p.y) + t*2.0 + time, 2.0 + flash - lp + t, r).z;\n\t\t\n\t}\n\t\n\treturn vec3(1.0 - 1.0*pow(abs(cos(col/2.0 - phase)),1.0 / 2.0))*t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x / iResolution.y;\n    p += 0.5;\n\tp *= 1.0 + 0.5*sin(iTime*0.009);\n    p *= rotation2d(iTime*0.013+ 2.0);\n\tvec2 e = vec2(0.06545465634 + sin(iTime*0.021), -0.05346356485 + cos(iTime*0.0089));\n\tvec2 c = iTime*0.001*e - e;\n\t//c = 8.0*iMouse.xy/iResolution.xy;\n\tfloat d = 1.0;\n\tvec3 col = vec3(0.0);\n\tconst float blursamples = 16.0;\n\tfloat sbs = sqrt(blursamples);\n\tfloat mbluramount = 1.0/iResolution.x/length(e)/blursamples*2.0;\n\tfloat aabluramount = 1.0/iResolution.x/sbs*4.0;\n\tfor (float b = 0.0; b < blursamples; b++) {\n\t\tcol += formula(\n\t\t\tp + vec2(mod(b, sbs)*aabluramount, b/sbs*aabluramount), \n\t\t\tc + e*mbluramount*b);\n\t}\n\tcol /= blursamples;\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}