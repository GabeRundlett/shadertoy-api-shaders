{
    "Shader": {
        "info": {
            "date": "1501783056",
            "description": "1996 Quake's \"Pentagram of Protection\" powerup, done using SDF and raymarching.",
            "flags": 0,
            "hasliked": 0,
            "id": "ld2BRd",
            "likes": 4,
            "name": "Pentagram of Protection",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "quake",
                "pentagram"
            ],
            "usePreview": 0,
            "username": "k_kondrak",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "// ----------------------------------------------------------------------------------\n// Raymarched 1996 Quake's \"Pentagram of Protection\" by Krzysztof Kondrak @k_kondrak\n// ----------------------------------------------------------------------------------\n\nconst float M_PI = 3.141592;\n\n// ---------------------------\n//  signed distance functions\n// ---------------------------\n// see https://iquilezles.org/articles/distfunctions for more!\nfloat Box(in vec3 p, in vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat Cylinder(in vec3 p, in float r, in float h) \n{\n    return max(length(p.xz) - r, abs(p.y) - h);\n}\n\nfloat Subtract(in float a, in float b)\n{\n    return max(a, -b);\n}\n\nfloat Union(in float d1, in float d2)\n{\n    return min(d1, d2);\n}\n\nfloat Intersect(in float d1, in float d2)\n{\n    return max(d1, d2);\n}\n\n// -----------\n//  rotation\n// -----------\nmat3 rotX(in float a)\n{\n    return mat3(1.0,    0.0,  0.0,\n                0.0, cos(a), -sin(a),\n                0.0, sin(a),  cos(a));\n}\n\nmat3 rotY(in float a)\n{\n    return mat3(cos(a), 0.0, sin(a),\n                   0.0, 1.0, 0.0,\n               -sin(a), 0.0, cos(a));\n}\n\nmat3 rotZ(in float a)\n{\n    return mat3(cos(a), -sin(a), 0.0,\n                sin(a),  cos(a), 0.0,\n                   0.0,     0.0, 1.0);      \n}\n\n// -------------------------\n//  draw hellish background\n// -------------------------\nvec3 Background(in vec2 pos)\n{\n    vec2 offset = vec2(0.0,0.01 * iTime);\n    vec3 color  = vec3(1.0);\n\n    for(int i = 0; i < 3; i++) \n    {\n        color += mix(texture(iChannel1, pos - 0.25 * offset + 0.5),\n                     texture(iChannel1, pos - offset), \n                     abs(mod(float(i) * 0.666, 2.0) - 1.0)).xyz * color * color;\n    }\n\n    return color * vec3(.0666, .0444, .00444);\n}\n\n// ---------------------------\n//  SDF pentagram composition\n// ---------------------------\nfloat Pentagram(in vec3 p)\n{\n    // pentagram octagonal frame\n    mat3 r1 = rotZ(0.12 * M_PI);\n    mat3 r2 = rotZ(0.38 * M_PI);\n    float a = Box(p * r1, vec3(0.6, 0.6, 0.15));\n    float b = Box(p * r2, vec3(0.6, 0.6, 0.15));\n    float c = Box(p * r1, vec3(0.7, 0.7, 0.05));\n    float d = Box(p * r2, vec3(0.7, 0.7, 0.05));\n\n    float frame = Subtract(Intersect(c, d), Intersect(a, b));\n\n    // inside of the pentagram\n    vec3 offset = vec3(0.22, 0.0, 0.0);\n    float star  = Cylinder( p * rotZ(-0.5 * M_PI) + vec3(0.17, 0.0, 0.0), 0.04, 0.61);\n    star = Union(star, Cylinder(p * rotZ(0.115 * M_PI) - offset, 0.04, 0.61 ));\n    star = Union(star, Cylinder(p * rotZ(-.115 * M_PI) + offset, 0.04, 0.61 ));\n    star = Union(star, Cylinder(p * rotZ(-0.68 * M_PI) - offset, 0.04, 0.61 ));\n    star = Union(star, Cylinder(p * rotZ(-0.32 * M_PI) - offset, 0.04, 0.61 ));\n\n    return Union(frame, star);\n}\n\n// ----------------\n//  surface normal\n// ----------------\nvec3 SurfaceNormal(in vec3 pos, in mat3 matrix)\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    return normalize(-vec3(Pentagram((pos + eps.xyy) * matrix) - Pentagram((pos - eps.xyy) * matrix),\n                           Pentagram((pos + eps.yxy) * matrix) - Pentagram((pos - eps.yxy) * matrix),\n                           Pentagram((pos + eps.yyx) * matrix) - Pentagram((pos - eps.yyx) * matrix)));\n}\n\n// ----------------------\n//  pentagram raymarcher\n// ----------------------\n#define MIN_DIST  0.001\n#define MAX_DIST  3.0\n#define NUM_STEPS 50\nfloat Raymarch(in vec3 from, in vec3 to, in mat3 matrix)\n{\n    float dist  = MIN_DIST;\n    float depth = 0.0;\n\n    for(int i = 0; i < NUM_STEPS; ++i)\n    {\n        if(dist < MIN_DIST || depth > MAX_DIST) \n            break;\n\n        dist  = Pentagram((from + to * depth) * matrix);\n        depth += dist;\n\n        // past maximum raymarch distance - no surface hit\n        if(depth > MAX_DIST)\n            return 0.0;\n    }\n\n    return depth;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float ratio = iResolution.x / iResolution.y;\n    vec2 uv  = fragCoord.xy / iResolution.xy;\n    vec2 pos = 2.0 * uv - 1.0;\n    vec2 bgPos = uv * vec2(0.0666);\n    pos.x   *= ratio;\n    bgPos.x *= ratio;\n\n    // raymarch vectors and initial background pixel color\n    vec3 from  = vec3(0.0, 0.0, -1.666);\n    vec3 to    = normalize(vec3(pos.xy, 1.666));\n    vec3 color = Background(bgPos);\n\n    // pentagram rotation\n    mat3 transform = rotY(iTime);\n\n    float t = Raymarch(from, to, transform);\n\n    // surface hit?\n    if(t > 0.0)\n    {\n        vec3 p = from + t * to;\n        vec3 n = SurfaceNormal(p, transform);\n\n        vec3 tx = texture(iChannel0, p.yz + 0.1666 * iTime).xyz * n.x * 4.666;\n        vec3 ty = texture(iChannel0, p.xz + 0.2666 * iTime).xyz * n.y * 3.666;\n        vec3 tz = texture(iChannel0, p.xy + 0.3666 * iTime).xyz * n.z * 2.666;\n\n        // BLOOD!\n        color.r  = clamp((tx + ty + tz) * 0.333, 0.0, 1.0).r;\n        color.gb = vec2(0.0);\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}