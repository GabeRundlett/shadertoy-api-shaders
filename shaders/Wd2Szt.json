{
    "Shader": {
        "info": {
            "date": "1554729512",
            "description": "It's a simple horizontal offset glitch effect. This one will take into account the music for more fun :) . \n",
            "flags": 96,
            "hasliked": 0,
            "id": "Wd2Szt",
            "likes": 3,
            "name": "[sn001] Horizontal Glitchs",
            "published": 3,
            "tags": [
                "glitch"
            ],
            "usePreview": 0,
            "username": "maeln",
            "viewed": 905
        },
        "renderpass": [
            {
                "code": "#define LINES1 16.0\n#define LINES2 32.0\n#define LINES3 6.0\n\n// Higher = More glitch \n#define GLITCH_AMOUNT 4.0\n\n#define DEBUG\n\n// Comment this to line to display the debug view\n#undef DEBUG \n\n#define saturate(x) (clamp((x), 0.0, 1.0))\n\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec3 aberrationColor(float f)\n{\n\tf = f * 3.0 - 1.5;\n\treturn saturate(vec3(-f, 1.0 - abs(f), f));\n}\n\nvec3 ffts() {   \n    float fftGrave = texelFetch( iChannel1, ivec2(0,0), 0 ).x; \n    float fftMiddle = texelFetch( iChannel1, ivec2(256,0), 0 ).x; \n    float fftAigue = texelFetch( iChannel1, ivec2(511,0), 0 ).x; \n    return vec3(fftGrave, fftMiddle, fftAigue);\n}\n\nfloat glitch(vec2 uv, float lines, float r) {\n    float y = floor(uv.y*lines)/lines;\n   \treturn random(vec2(r, y))*(0.5+GLITCH_AMOUNT*0.01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 music = ffts()*0.4;\n    \n    float gl1 = glitch(uv, LINES1, floor(iTime*2.0));\n    float gl2 = glitch(uv, LINES2, floor(iTime*5.0));\n    float gl3 = glitch(uv, LINES3, floor(iTime));\n    \n#ifndef DEBUG\n    float d1 = round(gl1) * (gl1*music.b);\n    float d2 = round(gl2) * (gl2*music.g);\n    float d3 = round(gl3) * ((0.75 - gl3)*music.r);\n    \n    uv.x += d1;\n    uv.x -= d2;\n    uv.x += d3;\n    \n    float r = texture(iChannel0, uv+(d1-d2+d3)/6.0).r;\n    float g = texture(iChannel0, uv).g;\n    float b = texture(iChannel0, uv-(d1-d2+d3)/6.0).b;\n    \n    vec4 julia = vec4(r,g,b, 1.0);\n#else\n    vec4 julia = vec4(0.0);\n    if(uv.x < 1.0/3.0) {\n        julia = vec4(round(gl1));\n    } else if (uv.x < 2.0/3.0) {\n        julia = vec4(round(gl2));\n    } else {\n        julia = vec4(round(gl3));\n    }\n#endif\n    \n    fragColor = vec4(vec3(julia), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 18306,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/gloom/asd-electric-bullet-remix-by"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAXITER 128\n\nvec2 cmul(vec2 i1, vec2 i2) \n{\n    return vec2(i1.x*i2.x - i1.y*i2.y, i1.y*i2.x + i1.x*i2.y);\n}\n\nint julia(vec2 z, vec2 c)\n{\n    int i = 0;\n    vec2 zi = z;\n    \n    for(int n=0; n < MAXITER; ++n)\n    {\n        if(dot(zi,zi) > 4.0)\n            break;\n        i++;\n        zi = cmul(zi,zi) + c;\n        \n    }\n    \n    return i;\n}\n\nvec4 gen_color(int iter)\n{\n    vec3 c1 = vec3(1.0,1.0,1.0);\n    vec3 c2 = vec3(0.4,0.1,0.7);\n    vec3 c3 = vec3(0.7,0.1,0.4);\n    vec3 m = vec3(float(iter)/float(MAXITER));\n    vec3 base = mix(mix(c1,c2,m), c3, m);\n    return vec4(base,1.0);\n}\n\n// Remap the OpenGL space to the space where the julia set is defined ( [(-2;-2),(2;2)] ).\nvec2 space(vec2 res, vec2 coord)\n{\n    // Center the coordinate so that (0,0) is in the center of the screen.\n    vec2 base = (2.*coord.xy - res.xy) / res.x;\n    // base*2 so that the range is [-2;2] (the julia set is defined on this range)\n    return base*2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = space(iResolution.xy, fragCoord.xy);\n    // Display the julia fractal for C = (-0.8, [0.0;0.3]).\n    int iter = julia(z, vec2(-0.8, mix(0.0, 0.3, sin(iTime))));\n\tfragColor = gen_color(iter);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}