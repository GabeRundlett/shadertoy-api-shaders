{
    "Shader": {
        "info": {
            "date": "1694233458",
            "description": "A zellij tile pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "mtSBzV",
            "likes": 8,
            "name": "Arabesque knots 8 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "rug",
                "gamelan"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //abs(1.-abs(f1((a1)*(a2.x+a2.y))-.5))\n    ;\n}\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nmat2 rotate2D(float r) {\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    bool b = uv.x>uv.y;\n    bool b1 = uv.x>uv.y;\n    vec2 t3 = t2;\n    vec2 uv1 = uv;\n    for(int k = 0; k < 9; k++){\n        \n        //uv -= triwave1_(uv);\n        \n        //uv.y -= t1_(floor(uv),floor(uv))/2.;\n\n        //uv = uv/1.5-.5;\n\n        //uv.y -= mod(floor(uv.x),2.)/2.;\n        b1 = uv.x*float(b1)>uv.y;\n        //uv += binary_digit(k,1)/2.;\n        //uv += binary_digit(k,2)/2.;\n        //uv += binary_digit(k,3)/2.;\n        //if(!b)\n        uv =\n            abs(.5+uv/1.5+t2)\n            //-sign(uv-t2*1.5)-abs(.5+uv/1.5+t2)\n            //abs(.5+uv/1.5+t2)*r\n            //abs(.5+uv/1.5+t2)+sign(uv.y-uv.x)/2.\n            //abs(max(uv,t2)+t2)\n            //abs(.5+abs(uv-t2)/1.5-t2) //looks better zoomed out\n            //abs(.5+uv/1.5+max(t2/1.5,uv))\n            //abs(.5+uv/1.5+t2)*sign(-uv+uv.yx/2.)\n            //abs(.5+uv+t2/1.5)\n            //abs(.5+uv+t2)/1.5\n        ;\n        \n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*3.)-.5)/3.;\n        \n        //if(t2.y>t2.x)\n        //if(t2.y>t2.x||col.x<col.y)\n        b =\n            uv.y>uv.x\n            //uv.y>uv.x||t2.y<t2.x\n            //uv.y>uv.x*float(col.x<col.y||t2.x<t2.y)\n            //uv.y*float(b1)>uv.x\n        ;\n        vec2 uv1 = uv;\n        //if(b||t2.x>t2.y)\n        if(b)\n        uv =\n            uv.yx\n            //uv.yx+1./3.\n        ;\n        //else uv -= t1_(floor(uv),floor(uv))/1.5;\n        \n        //uv.x += sign(t2.y-t2.x);\n        //uv.x += sign(uv.y-uv.x);\n        //uv *= -1.;\n        t2 =\n            -triangle_wave(uv-.5)\n            //-triangle_wave(uv-.5)+floor(t2)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n            \n            //WOW!\n            //t2-triangle_wave(uv.yx)+fract(t2/1.5)\n            \n            //abs(abs(t2)-.5)-triangle_wave(uv.yx)\n        ;\n        \n        //\n        t3 =\n            -triangle_wave(uv-.5)\n        ;\n        //t3 = min(t2,t3);\n        uv1 =\n            t2-triangle_wave(uv1.yx)\n            \n            //WOW!\n            //sqrt(t2)-sqrt(triangle_wave(uv.yx))\n        ;\n        //uv1 = min(uv,uv1);\n        \n        \n        \n        if(\n            //b\n            true\n            //uv.y<uv.x||b\n            //uv.y>uv.x||b\n            //t2.y>t2.x||b\n            //t2.y<t2.x||b\n        )\n        col =\n            vec3(col.zx,max(uv.x-uv.y,0.))\n            \n            //WOW!\n            //vec3(col.zx,max(uv1.x-uv1.y,uv.y-uv.x))\n            //vec3(col.zx,abs(min(uv.x-uv.y,1.)-max(t2.x-t2.y,0.)))\n\n            \n            //vec3(col.xy,max(uv.x+uv.y+1.,0.)).yzx\n            //vec3(col.xy,max(0.,max(uv.x-uv.y,0.))).yzx\n            //vec3(col.zx,max(uv.x-uv.y*float(b),0.))\n            //abs(vec3(col.zx,max(uv.x-uv.y,-col.y)))\n            //vec3(col.zx,max(col.y,max(-uv.x+uv.y,0.)))\n            \n            //vec3(col.xz,max(uv.x-uv.y,0.))\n        ;\n        //else uv.x +=.5;\n        //col.zx = abs(.5-col.zx);\n        //uv.x += float(uv.x<uv.y);\n        //t2.x += 1./2.;\n        //uv -= (floor(uv+floor(iTime)));\n        }\n        return col;\n        }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 16.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n\n    \n    mat2 r = rotate2D(0.785398);\n    vec3 col = fractal(uv);\n\n    \n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int collatz(int initial, int steps){\n    //makes some interesting rhythms\n    for(int i = 0; i < steps; i++){\n        if(initial%2==0) initial /= 2;\n        else initial = initial*3+1;\n    }\n    return initial;\n}\nfloat collatz(float initial, float steps){\n    return float(collatz(int(initial),int(steps)));\n}\n\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nfloat fibonacci(float nthNumber_) {\n        int nthNumber = int(nthNumber_);\n        int previouspreviousNumber, previousNumber = 0, currentNumber = 1;\n        for (int i = 1; i < nthNumber ; i++) {\n\n            previouspreviousNumber = previousNumber;\n\n            previousNumber = currentNumber;\n\n            currentNumber = previouspreviousNumber + previousNumber;\n\n        }\n        return float(currentNumber);\n}\n\nfloat m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a, float b){\n    /*\n    for(float i = 1.; i < mod(floor(a/8.),8.); i++){\n        a += mod(floor(a/8.),b)*i;\n    }\n    */\n    return\n        mod(a,b)\n        //mod(a-mod(a*2.,b),b)\n        //mod(a+floor((a/2.-b)/2.),b)\n        //mod(a+floor(a/2.),b)\n        //mod(a+floor(b*13./7.),b)\n        //floor(mod(floor(a+floor(a)/8.),b))\n        //mod(a-fibonacci(a/32.),b)\n        //mod(a+mod(a-mod(a,3.),5.)+mod(a+mod(a,5.),3.),b)\n        //mod(a-mod(a-mod(a,5.),3.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    \n    //a += mod(floor(a/8.),2.)*4.;\n    \n    //a += collatz(a/8./8.,b)*4.;\n    //a += collatz(mod(a,8.),8.);\n    \n    //a = (a/2. + floor(a))/4.;\n    \n    //a -= fibonacci(a/64.);\n    \n    //a += float(int(a)>>int(b));\n    //a += floor(a/4.);\n    //a += fibonacci(mod(a,8.));\n    //a += m1(a,1.+b*b,4.);\n    //a += m1(a,5.+b,3.+b);\n    //a += float(fibonacci(int(mod(a,8.))));\n\n    //a += abs(mod((a),3.)-mod((a),5.));\n    //a += 2.*floor(1.+mod(floor(a/2.),2.))/(1.+mod(floor(a/4.),2.));\n    //a -= mod(floor(a/2.)/2.,2.)*2.;\n    float m1 =\n        floor(mod1(b/2.,2.))\n        //floor(mod1(collatz(mod(a,16.)+b/2.,16.),2.))\n;\n    \n    a +=\n        //floor(mod(b/2.,2.))+mod(floor(a+3.),4.-b)\n        m1\n        //floor(mod(b/2.,2.))\n        //mod(b/2.+binary_digit(int(a),1),2.)\n        //mod((b/2.+floor(a/4.)),4.)\n    ;\n    float\n    a2 = mod1(floor(a),b),\n    a3 =\n        mod1(floor(a/(b)),b)\n        //mod1(floor((a+floor((b*3.+m1)/4.))/(b)),b)\n        //mod1(floor(floor(a/4.)*b/4.+(a2)/(b)),b)\n    ;\n    \n    //a -= mod(floor(a+b),3.);\n    //a += m1(a,5.+b,3.+b);\n    \n    //a += m1(a,3.,7.);\n    \n    //a += mod(-a*2.,2.)/2.;\n    return\n        mod1(a2*a3,b)\n        //mod1(a2*(a3+floor(a/4.*sign(a2-a3))),b)\n        //mod(floor((1.+a3)/(1.+a2)),b)\n        //mod(-mod(-floor(a),b)*mod(-floor((a)/b),b),b)\n        //mod(floor(a-mod(a,3.)),b)\n        //floor(mod(a/floor(1.+mod(-a/2.+b,2.)),b))\n        //floor(mod(mod(floor(a)/(1.+mod(floor(-a/2.),2.)),b)*mod(floor((a)/b),b),b))\n        //floor(mod((a/(1.+mod(floor(-a/2.),2.))),b))\n        //floor(mod(mod(floor(a),b)*mod(a/b,b),b))\n        //floor(mod(mod(floor(a),2.)+mod(a/2.,6.),b))\n        //mod(floor(mod(a,8./b))*3.,b)\n        //floor(mod(mod(a,1.+abs(mod(a,5.)-mod(a,3.))),b))\n        //mod(floor(floor(a)/1.5)+floor(floor(a)/2.),b)\n        //floor(mod(mod(floor(a/2.)*3.,b)*mod(floor(a/2.)*5.,b),b))\n        //floor(mod(mod(floor(a)*3.,b/3.+3.)*mod(floor(a)*5.,b/5.+5.),b))\n        //mod(mod(floor(a)+2.,b)*mod(floor((a/2.)/b),b)+2.,b)\n        //floor(mod(mod(floor(a)/b,b)*mod(floor((a)/b)+2.,b)+2.,b))\n        //floor(mod((mod(floor(a),b))*mod(floor(a/b*2.)/2.,b),8.))\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    \n    //time += mod(time,5.)-mod(time,3.);\n    //time += mod(floor(time/8.),2.)*4.;\n    \n    //time += mod(-time,5.)+mod(-time,3.)+mod(-time,2.);\n    //time += mod(time/8.,5.) - mod(time/8.,3.);\n    \n    //time = (time/2. + floor(time))/4.;\n    \n    //time += fibonacci(mod(time/8.,8.));\n    \n    return\n        (1.+fmod(time/5.,2.))/(1.+fmod(time/3.,2.))\n        //(1.+fmod(time/8.,2.))/(1.+fmod(time/4.,2.))\n        //(1.+fmod(time/5.,2.))/(1.+fmod(-time/3.,2.))\n    ;\n    //return (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))/(1.+fmod(time/5.,2.))/(1.+fmod(time/7.,2.))*(1.+fmod(time/11.,2.));\n}\n\nfloat fmod1(float a, float b){\n    //a += collatz(a/8.,8.);\n    //change the notes without changing the rhythm\n    //a += mod(-b/2.,2.);\n    //a += prime_rhythm(a);\n    return\n        fmod(a,b)\n        //fmod(a,b-fmod(a/2.,2.))\n        //fmod(floor(a)*5.,b+fmod(floor(a/8.)*3.,b))\n    ;\n}\n\n//#define fract1(a) pow(fract(a),2.)\n//#define fract1(a) pow(fract(a),1.+fract(a))\n//#define fract1(a) (1.-fract(-a)*fract(-a))\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n//#define fract1(a) pow(fract(a),3.)\n\nvec2 sitar1(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./4.+a*(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\n\nvec2 mainSound1(int samp, float time,float scale, int instrument,float duration){\n  float s1 =\n      8.,\n  tempo1 =\n      //1.\n      //divide by prime numbers to get an interesting rhythm\n      prime_rhythm(time)\n      //prime_rhythm(time+collatz(time,time))\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 =\n      fmod(t4,2.)\n      //fmod(t4+collatz(t4,16.),2.)\n  ,\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n      //floor(fmod(t6+floor(t6/8.),s1/2.)/2.),\n      //floor(2.*fmod(floor(t6)*3.,s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.);\n  \n  duration *= tempo1;\n\n  vec2\n  a= vec2(\n      //-log(fract(t/prime_rhythm(time+7.))/4.)*4.\n      //-log(fract(t/2./prime_rhythm(time+14.))*fract(t/prime_rhythm(time+7.))/8.)*4.\n      \n      //sitar\n      //-(log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/16.)),-(log(1./64./4.+fract1(t/prime_rhythm(time+7.))/16.))\n      \n      -vec2(log(1./64.+fract1(t/2./prime_rhythm(time+14.))/8./duration),log(1./64.+fract1(t/prime_rhythm(time+7.))/8./duration))\n      \n      //steel drum / gamelan\n      //(1.-log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/2.)),(1.-log(1./64./4.+fract1(t/prime_rhythm(time+7.))/2.))\n      \n      //hurdy-gurdy\n      //(1.-log(1./32.+abs(1./32.-fract1(t/2./prime_rhythm(time+14.))*2.))),(1.-log(1./4.+2.*abs(1./32.-fract1(t/prime_rhythm(time+7.)))))\n\n  ),\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.)/7.+scale)*tempo1\n      //t*pow(2.,(m3-m2*2.+t1)/7.+6.5)*tempo1\n      \n      //airhorn remix\n      //abs(t*(pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/2.)-a/16.)*2.\n  ),\n  sitar =\n  //log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y*2.)))/2.)),\n  a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  -log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n  ,gamelan = a/16./4.*abs(log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  +.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n  ,\n  steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  ,oud = a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n  ,banjo = a/16./8.*abs(log(1./2.+a*abs(1./8.-.5*abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n  -log(1./2.+a*abs(abs(1./2.-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n  ,guitar = a/16./8.*abs(\n      log(1./2.+a*abs(1./8.-.125/2.*abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n      -log(1./2.+a*abs(1./8.-.5*abs(1./2.-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n  )\n  ,drum = abs(oud*2.-gamelan/2.)/1.5\n  ,synth_drum = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ,synth_drum1 = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4./m2))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.*m2)))\n  ,harp =\n      a/16./4.*abs(\n      synth(1./4.,a,1./8.,1.,nb*4.,2.)\n      + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n  ;\n  switch(instrument){\n  case 1:\n  \n  return\n      gamelan\n      //banjo\n      //oud\n      //steel_drum\n      //sitar\n      //hurdy-gurdy\n      //(abs(log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998*2.),fract1(nb.y*2.)))/2.))-log(1./16.+a*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.))))\n\n      //log(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))*a)\n      \n      //abs(log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      //abs(1.+log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      \n      //log(a*abs(1./4.-abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y*2.)))))\n  ;\n  case 2: return sitar;\n  case 3: return oud;\n  case 4: return steel_drum;\n  case 5: return banjo;\n  case 6: return guitar;\n  case 7: return drum;\n  case 8: return synth_drum;\n  case 9: return synth_drum1;\n  default: return sitar;\n  }\n}\n\nvec2 mainSound1(int samp, float time,float scale, int instrument){\n    return mainSound1(samp,time,scale,instrument,1.);\n}\n\nvec2 mainSound(int a,float b){\n    return\n        //drum\n        //abs(mainSound1(a,b,6.5,1)-mainSound1(a,b,6.5,4)/8.)\n        \n        //abs(mainSound1(a,b,6.5,1,1./2.)-mainSound1(a,b,5.5,1,1.)/2.)\n        \n        (mainSound1(a,b,5.,1,1./4.*2./3.)-mainSound1(a,b,6.,1,1./2.*2./3.)*2.)\n        //(mainSound1(a,b,5.,1,1./4.)-mainSound1(a,b,6.,1,1./2.))\n        \n        //sounds like sitar (using synth drum)\n        //abs(mainSound1(a,b,5.5,8,1./2.)-mainSound1(a,b,6.5,8,1.)/2.)\n        \n        //sounds like sitar (using oud)\n        //abs(mainSound1(a,b,7.75,3,1./2.)-mainSound1(a,b,6.75,3,1.)/2.)\n        \n        //mainSound1(a,b,6.5,1,1.)\n        \n        //abs(mainSound1(a,b,6.5,3,2./2.)+mainSound1(a,b,7.5,3,2.)/2.)/2.\n        \n        //some interesting distortion\n        //abs(mainSound1(a,b+(1.-abs(fract1(b/2.)-.5))/64./32.,6.5,1)+mainSound1(a,b,6.5,1))/2.\n        \n        //abs(mainSound1(a,b,6.5,3)+mainSound1(a,b/2.,6.5,3))/2.\n        \n        //(mainSound1(a,b/2.,7.5,4)+mainSound1(a,b,6.5,3))/2.\n        //(mainSound1(a,b,5.5,4)+mainSound1(a,b*2.,6.5,3))/2.\n        \n        //gong remix (using oud)\n        //abs(mainSound1(a,b,6.5,3)-mainSound1(a,b,6.,3)/2.)\n        \n        //mainSound1(a,b/2.,6.5,1)+mainSound1(a,b,5.5,3)/2.+mainSound1(a,b*2.,4.5,1)/4.+mainSound1(a,b*4.,3.5,1)/8.\n        //(mainSound1(a,b,6.5,1)+mainSound1(a,b/2.,7.5,1)+mainSound1(a,b/4.,8.5,1))\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}