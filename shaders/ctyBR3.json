{
    "Shader": {
        "info": {
            "date": "1702314177",
            "description": "Arc sdf given in terms of start and end angle. Obviously less efficient, but more convenient for some cases.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctyBR3",
            "likes": 6,
            "name": "arc-between-angles-sdf",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "arc"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415927\n\nfloat cro(vec2 a, vec2 b) { return a.x * b.y - a.y * b.x; }\n\nfloat sdArc(in vec2 p, in float r, in float a1, in float a2) {\n    vec2 p1 = vec2(r * cos(a1), r * sin(a1));\n    vec2 p2 = vec2(r * cos(a2), r * sin(a2));\n    float c = cro(p1, p2);\n    float c1 = cro(p, p1);\n    float c2 = cro(p, p2);\n    float d1 = min(length(p - p1), length(p - p2));\n    float d2 = abs(length(p) - r);\n    if (a1 == a2) return d1;\n    return c > 0.0\n        ? c1 < 0.0 && c2 > 0.0 ? d2 : d1\n        : c1 < 0.0 || c2 > 0.0 ? d2 : d1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float t = 1.5 * iTime;\n    float a = floor(t / (2.0 * PI)) * 2.0 * PI / 5.0;\n    \n    // distance\n    float d = sdArc(p, 0.8, a, t + a);\n    \n    // coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(d));\n\tcol = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)));\n\n    if(iMouse.z > 0.001) {\n        d = sdArc(m, 0.8, a, t + a);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}