{
    "Shader": {
        "info": {
            "date": "1658578068",
            "description": "Extrude a SDF along a Quadratic Bezier segment, correctly oriented to spline tangent\nthis example uses a box, hold mouse button to show torus\nTwist was added just for fun, be careful with the twist as it will distort the distance :)\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7dyBz3",
            "likes": 50,
            "name": "BezierExtrude",
            "published": 3,
            "tags": [
                "raymarch",
                "bezier",
                "quadratic",
                "tangent",
                "extrude"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 850
        },
        "renderpass": [
            {
                "code": "// Extrude a SDF along a Quadratic Bezier segment, correctly oriented to tangent\n//\n// based on IQ's https://www.shadertoy.com/view/ldj3Wh , I just added orientation \n//\n// added a couple of minor optimizations\n// might be worth passing in the up vector instead of just using (0,1,0)\n// made it shiny because we got some likes :)\n\n#define TWIST 1 // set this to zero if you want to see just spline oriented sdf\n\n// returns xyz = position, w = spline position (t)\nvec4 sdBezierExtrude(vec3 pos, vec3 A, vec3 B, vec3 C)\n{    \n    // check for colinear\n    //if (abs(dot(normalize(B - A), normalize(C - B)) - 1.0) < 0.0001)\n    //    return sdLinearSegment(pos, A, C);\n\n\t// first, calc curve T value\n    vec3 a = B - A;\n    vec3 b = A - 2.0*B + C;\n    vec3 c = a * 2.0;\n    vec3 d = A - pos;\n\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n\tfloat t;\n\n    if(h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        t = clamp(uv.x+uv.y-kx, 0.0, 1.0);\n        // 1 root\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 _t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0);\n\t\t// 3 roots, but only need two\n\t\tvec3 r1 = d + (c + b * _t.x) * _t.x;\n\t\tvec3 r2 = d + (c + b * _t.y) * _t.y;\n\t\t//t = length(r2.xyz) < length(r1.xyz) ? _t.y : _t.x;\n        t = dot(r2,r2) < dot(r1,r1) ? _t.y : _t.x; // quicker\n        \n    }\n    \n    // now we have t, calculate splineposition and orient to spline tangent\n    //t = clamp(t,0.1,0.9); // clamp spline start/end\n    \n    vec3 _tan = normalize((2.0 - 2.0 * t) * (B - A) + 2.0 * t * (C - B));  // spline tangent\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 binormal = normalize(cross(up, _tan));\n    vec3 _normal = cross(_tan, binormal);\n//\tvec3 t1 = normalize(cross(_normal, _tan));\n\tvec3 t1 = cross(_normal, _tan); // no need to normalize this?\n\tmat3 mm = mat3(t1, cross(_tan, t1), _tan);\n    pos.xyz = mix(mix(A, B, t), mix(B, C, t), t) - pos; // spline position\n    return vec4(pos.xyz*mm, t);\n}\n\n// iq\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// iq\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat map( in vec3 pos )\n{\n    vec3 a = vec3(-5.5,0.0,0.0);\n    vec3 b = vec3(0.0,sin(iTime*1.1)*6.0,(0.5+sin(iTime*2.8)*0.5)*5.0);\n    vec3 c = vec3(5.5,0.0,0.0);\n    vec4 bz = sdBezierExtrude(pos,a,b,c);\n\n    // twist is optional...\n    #if TWIST==1\n    {\n        float twist = (0.5+sin(iTime*1.8)*0.5)*1.1;\n        bz.xy *= rot( (3.14*twist) * bz.w);\n    }\n    #endif\n\n    float d;\n    if (iMouse.z>0.5)\n        d = sdTorus(bz.xyz,vec2(0.75,0.35)); // use a torus\n    else\n    {\n        d = sdBox(bz.xyz, vec3(1.2,0.1,0.01))-0.15; // use a box\n        d = min(length(bz.xyz)-0.3,d); // show the spline center with a sphere  :)\n    }\n    #if TWIST==1\n    d*=0.8;  //twist modifier will distort the distance, so adjust it so it doesn't overshoot\n    #endif\n    \n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.01;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n    \n    float yy = 4.0;\n    \n\tvec3 ro = vec3( 9.*cos(an), yy, 9.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 50.0;\n        float t = 0.0;\n        for( int i=0; i<128; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.01 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\n        vec3 col = vec3(0.22,0.1,0.4)*smoothstep(1.0,0.0,abs(p.y));\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 rf = reflect(ww, nor);\n            float sha = map(pos+rf) + .5;\n            float factor = sha*length(sin(rf*3.)*0.5+0.5)/sqrt(2.);\n            col = mix(vec3(0.15,0.05,0.26), vec3(0.28,0.6,0.2), factor) + pow(factor*0.7, 6.);\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}