{
    "Shader": {
        "info": {
            "date": "1456319813",
            "description": "demonstrating distance transform of images using Jump Flooding as described in http://www.comp.nus.edu.sg/~tants/jfa/i3d06.pdf. also good way to look at SDF ground truth. drag mouse to see gradient / distance information.",
            "flags": 32,
            "hasliked": 0,
            "id": "4syGWK",
            "likes": 131,
            "name": "Jump Flooding",
            "published": 3,
            "tags": [
                "jump",
                "flooding",
                "jfa"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 18266
        },
        "renderpass": [
            {
                "code": "// presentation\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y,1.0); \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv * 2.0 - 1.0) * aspect;    \n    \n    float m = ((iMouse.x / iResolution.x) * 2.0 - 1.0) * aspect.x;\n    \n    vec2 nearest = load1(ivec2(fragCoord + 0.5)).xy / iResolution.xy;\n    vec2 p = (nearest * 2.0 - 1.0) * aspect;    \n    \n    float d = length(uv - p);\n    vec3 n = vec3(normalize(uv - p),0.0) * 0.5 + 0.5;\n    \n    \n    int frame = int(mod(iTime,15.0));\n    \n    vec3 col;\n    if (frame < 12) {\n        col = vec3(nearest, 0.0);\n    } else if (uv.x > m) {\n        float h = d - iTime;\n        vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n        col = rgb;\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    } else {\n        col = n;\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// channel 1: JFA steps\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iter = mod(float(iFrame),13.0);\n    if (iter < 0.5) {\n        // init\n        vec2 uv = fragCoord / iResolution.xy;\n        uv.x = clamp(uv.x * iResolution.x / iResolution.y - 0.3, 0.0, 1.0);\n        float ww = 40.0/256.0;\n        vec4 color = texture(iChannel1, \n\t\t\tfloor(mod(iTime * 5.0,6.0)) * vec2(ww,0.0) + vec2(ww,1.0) * uv);\n        float lum = dot(color.rgb,vec3(0.299,0.587,0.114));\n        if (lum < 0.4) {\n            store(fragColor, vec4(fragCoord,0.0,0.0));\n        } else {\n            store(fragColor, vec4(0.0));\n        }\n    } else {\n        // JFA step (for up to 4096x4096)\n        float level = clamp(iter-1.0,0.0,11.0);\n        int stepwidth = int(exp2(11.0 - level)+0.5);\n        \n        ivec2 tc = ivec2(fragCoord + 0.5);\n        \n        float best_dist = 999999.0;\n        vec2 best_coord = vec2(0.0);\n        vec2 center = vec2(tc);\n        for (int y = -1; y <= 1; ++y) {\n            for (int x = -1; x <= 1; ++x) {\n                ivec2 fc = tc + ivec2(x,y)*stepwidth;\n\t\t        vec2 ntc = load0(fc).xy;\n                float d = length(ntc - center);\n                if ((ntc.x != 0.0) && (ntc.y != 0.0) && (d < best_dist)) {\n                    best_dist = d;\n                    best_coord = ntc;\n                }\n            }\n        }        \n        store(fragColor,vec4(best_coord,0.0,0.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// channel 2: take snapshot of stage\n\nvec4 load0(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv);\n}\n\nvec4 load1(ivec2 p) {\n    vec2 uv = (vec2(p)-0.5) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv);\n}\n\nvoid store(out vec4 t, vec4 v) {\n    t = v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tc = ivec2(fragCoord + 0.5);\n    int iter = int(mod(float(iFrame),13.0));\n    int frame = int(mod(iTime,15.0));\n    if ((iter == frame) || ((frame > 12) && (iter == 12))) {\n        // snapshot\n        store(fragColor,load0(tc));\n    } else {\n        // copy\n        store(fragColor,load1(tc));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}