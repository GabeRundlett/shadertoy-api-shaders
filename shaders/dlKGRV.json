{
    "Shader": {
        "info": {
            "date": "1684324297",
            "description": "Wave watching on a hexagonal grid (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "dlKGRV",
            "likes": 36,
            "name": "Hexagonally Discretized Waves",
            "published": 3,
            "tags": [
                "grid",
                "wave",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 515
        },
        "renderpass": [
            {
                "code": "// \"Hexagonally Discretized Waves\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// Wave watching on a hexagonal grid (mouseable)\n\n/*\n  No. 7 in \"Hexagon Waves\" series\n    \"Cookie Waves\"         (wlSSWy)\n    \"Paper Rolls\"          (WlKSRd)\n    \"Truchet Waves\"        (3tScDc)\n    \"Edible Edifices\"      (3ljBWt)\n    \"Gold Edifices\"        (NldSzM)\n    \"Losing Focus 2\"       (sdSBzc)\n*/\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#define VAR_GRID_SIZE   0  // (= 0/1)\n\n#define VAR_ZERO min (nFrame, 0)\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p, float h);\nfloat Minv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Noisev2v4 (vec4 p);\n\nvec3 qHit, ltDir;\nvec2 cId, cMid;\nfloat dstFar, tCur, hgSize, wavHt, whFac;\nint nFrame, idObj;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p - vec3 (cMid, wavHt).xzy;\n  d = SmoothMax (HexEdgeDist (q.xz, hgSize - 0.005), q.y, 0.1);\n  DMINQ (1);\n  return dMin;\n}\n\nfloat WaveHt (vec2 p, float tWav)\n{ // (from \"Barque Fleet\")\n  vec4 t4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = p;\n  wFreq = 1.;\n  wAmp = 1.;\n  tw = tWav * vec2 (1., -1.);\n  h = 0.;\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    t4 = wFreq * (q.xyxy + tw.xxyy);\n    t4 = abs (sin (t4 + 2. * Noisev2v4 (t4).xxyy - 1.));\n    t4 = (1. - t4) * (t4 + sqrt (1. - t4 * t4));\n    t = 1. - sqrt (t4.xz * t4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    q *= mat2 (1.6, -1.2, 1.2, 1.6);\n    wFreq *= 2.;\n    wAmp *= 0.25;\n  }\n  return h;\n}\n\nvoid SetConf ()\n{\n  cMid = HexToPix (cId * hgSize);\n  wavHt = whFac * WaveHt (0.01 * cMid, 0.1 * tCur);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{ // (mod from \"Cookie Waves\")\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM;\n  float dHit, d, s, eps;\n  bool cNu;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSize;\n  dHit = 0.;\n  cId = PixToHex (ro.xz / hgSize);\n  pM = HexToPix (cId);\n  cNu = true;\n  for (int j = VAR_ZERO; j < 400; j ++) {\n    if (j == 0 || cNu) {\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n      SetConf ();\n      cNu = false;\n    }\n    d = ObjDf (ro + dHit * rd);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      cId = PixToHex ((ro.xz + dHit * rd.xz) / hgSize);\n      pM += sqrt3 * edN[(s == hv.x) ? 0 : ((s == hv.y) ? 1 : 2)];\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cId = PixToHex (p.xz / hgSize);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetConf ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += 0.05;\n    if (sh < 0.05 || d > 5.) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, bgCol;\n  float dstObj, sh, h, nDotL;\n  whFac = 16.;\n  dstObj = ObjRay (ro, rd);\n  bgCol = vec3 (0.4, 0.4, 0.6);\n  col = bgCol;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    h = clamp (wavHt / (2.4 * whFac), 0., 1.);\n    col4 = vec4 (HsvToRgb (vec3 (fract (0.7 * (0.9 - h)), 0.7, 1.)), 0.1);\n    col4 *= 1. - 0.1 * ((qHit.y < -0.01) ? smoothstep (0.5, 0.6, sin (4. * pi * qHit.y)) :\n       smoothstep (0.5, 0.6, sin (12. * pi * HexEdgeDist (qHit.xz/ hgSize, 1.))));\n    sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n    nDotL = max (dot (vn, ltDir), 0.);\n    col = col4.rgb * (0.2 + 0.3 * max (dot (vn, ltDir * vec3 (-1., 1., -1.)), 0.) +\n       0.8 * sh * pow (nDotL, 1.5)) +\n       col4.a * step (0.95, sh) * pow (max (dot (reflect (ltDir, vn), rd), 0.), 32.);\n    col = mix (col, bgCol, smoothstep (0.8, 1., dstObj / dstFar));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, sMax;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n#if VAR_GRID_SIZE\n  sMax = 4.;\n  hgSize = exp2 (sMax - 0.5 - abs (floor (mod (0.3 * tCur, 2. * sMax)) - sMax + 0.5));\n#else\n  hgSize = 1.;\n#endif\n  az = 0.1 * pi;\n  el = -0.12 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, -0.1 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (2. * cos (0.1 * tCur), 60., tCur);\n  zmFac = 3.;\n  dstFar = 300.;\n  ltDir = normalize (vec3 (1., 0.7, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p, float h)\n{\n  p = abs (p);\n  p -= vec2 (0.5, - sqrt3/2.) * min (p.x - sqrt3 * p.y, 0.);\n  p.x -= h * sqrt3/2.;\n  return sign (p.x) * max (abs (p.x), abs (p.y) - 0.5 * h);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, vec2 (1., 57.)));\n  t2 = Hashv4f (dot (ip.zw, vec2 (1., 57.)));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}