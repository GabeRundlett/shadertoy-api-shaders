{
    "Shader": {
        "info": {
            "date": "1461057476",
            "description": "Procedurally generated background from simplex noise",
            "flags": 0,
            "hasliked": 0,
            "id": "4s3SWS",
            "likes": 0,
            "name": "Background seasons",
            "published": 3,
            "tags": [
                "procedural",
                "background"
            ],
            "usePreview": 0,
            "username": "ceniklas",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "vec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n    const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i = floor(v + dot(v, C.yyy) );\n    vec3 x0 = v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    // x0 = x0 - 0.0 + 0.0 * C.xxx;\n    // x1 = x0 - i1 + 1.0 * C.xxx;\n    // x2 = x0 - i2 + 2.0 * C.xxx;\n    // x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i);\n    vec4 p = permute( permute( permute(\n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                              + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                     + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = (1.0/7.0);\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,7)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt( vec4(dot(p0,p0), dot(p1,p1), dot(p2,p2), dot(p3,p3)) );\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                 dot(p2,x2), dot(p3,x3) ) );\n}\n\n//--------------------------------------------------------------------------------------------\n\nfloat noise(vec2 p)\n{\n//return texture(iChannel0,fract(p)).r;\n    //return snoise(vec3(p.x, p.y, 0.0));\n    \n    float nValue = snoise(vec3(p.x, p.y, 0.0));\n    \n    \n//nValue = (nValue < 0.0) ? nValue+1. : nValue;\n    //nValue = (nValue > 0.) ? 1. : nValue;\n    \n    \n    return nValue*0.5 + 0.5;\n}\n\nvec3 grass(vec2 p)\n{\n\treturn vec3( mix(vec3(0.0, 0.0, 0.0), vec3(0.07,0.47,0.), noise(p)) );\n}\n\nfloat wind(vec2 p, in float t)\n{\n    p += vec2(1.4 + cos(t + p.x * 3.33), 1.5 + sin(t * 0.3 + p.y * 4.)) * 0.01;\n    float f = noise(p);\n    return f; \n}\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    const int summer = 1;\n    const int winter = 2;\n    const int spring = 3;\n    const int autumn = 4;\n    \n    /* Interaction values */\n    const int season = summer; // summer winter spring autumn\n    float mainBlobSize = .15; //.25\n    float zoomLevel = 0.1;\t  //.1\n    \n    vec4 baseColor;\n    vec4 blobColor1;\n    vec4 blobColor2;\n    vec4 blobColor3;\n    /* ----------------------------------- */\n    \n    vec2 offset = vec2(iMouse.x*.05, iMouse.y*.05);\n    vec3 R = iResolution;\n    float time = iTime;\n    \n    //p = (p-R.xy/2.)/min(R.x,R.y);\n    //p = p-20000.0;\n    \n    vec4 baseBrown = vec4(164., 101., 19., 255.) / 255.;\n    vec4 black = vec4(0, 0, 0, 1.);\n    vec4 white = vec4(1, 1, 1, 1.);\n    vec4 red = vec4(1.,0.,0.,1.);\n    vec4 green = vec4(0.,1.,0.,1.);\n    vec4 blue = vec4(0.,0.,1.,1.);\n    vec4 yellow = vec4(1.,1.,0.,1.);\n    \n   \n    \n    if(season == summer){\n        baseColor = vec4(0., 102./255., 0.,1.);//green*0.85;\n        blobColor1 = vec4(0., 128./255., 0., 1.);//green*0.9;//vec3(0.0, 0.77, 0.0);\n        blobColor2 = vec4(0., 150./255., 0., 1.);//green*0.95;//vec3(0.0, 0.88, 0.0);\n        blobColor3 = yellow;//vec3(0.0, 0.88, 0.0);\n    }\n    else if(season == winter){\n        baseColor = vec4(204, 255, 255, 255)/255.;\n    \tblobColor1 = vec4(224, 255, 255, 255)/255.;\n        blobColor2 = blobColor1*1.1;\n        blobColor3 = yellow;//vec3(0.0, 0.88, 0.0);\n    }\n    else if(season == spring){\n        baseColor = vec4(204, 255, 255, 255)/255.;\n    \tblobColor1 = vec4(224, 255, 255, 255)/255.;\n        blobColor2 = blobColor1*1.1;\n        blobColor3 = yellow;//vec3(0.0, 0.88, 0.0);\n    }\n    else if(season == autumn){\n        baseColor = vec4(204, 255, 255, 255)/255.;\n    \tblobColor1 = vec4(224, 255, 255, 255)/255.;\n        blobColor2 = blobColor1*1.1;\n        blobColor3 = yellow;//vec3(0.0, 0.88, 0.0);\n    }\n\n    p = p / R.xy;\n    \n    float noiseValue = noise(p/zoomLevel - offset);\n    \n    float baseColorValue = (noiseValue < mainBlobSize) ? 0.0 : 1.0;\n    baseColor = (baseColorValue == 1.0) ? baseColor : blobColor1; \n    \n    if(baseColorValue == 0.)//if Blobs\n    {\n        noiseValue = noise(p*30.);\n        baseColorValue = (noiseValue < .5) ? 0.0 : 1.0;\n    \tbaseColor = (baseColorValue == 1.0) ? blobColor1 : blobColor2; \n    }\n    \n    if(baseColorValue == 0.)//if Blobs\n    {\n        noiseValue = noise(p/zoomLevel*.6);\n        baseColorValue = (noiseValue < mainBlobSize) ? 0.0 : 1.0;\n    \t//baseColor = (baseColorValue == 1.0) ? blobColor2 : blobColor3; \n    }\n    \n    vec4 color = baseColor;\n    \n    o = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}