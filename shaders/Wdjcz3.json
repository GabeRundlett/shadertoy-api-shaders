{
    "Shader": {
        "info": {
            "date": "1587076535",
            "description": "First learning shader",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdjcz3",
            "likes": 2,
            "name": "LearningShaderToy_Lesson01_Task",
            "published": 3,
            "tags": [
                "learningshaders"
            ],
            "usePreview": 0,
            "username": "derko666",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "#define PI 3.14\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //Normalize    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y;\n    \n    float pixelSize = 2.0 / iResolution.y;\n    \n    //Waves\n    float wave1 = sin (uv.x * 3.0 + iTime) * .1 + 0.1;\n    float wave2 = sin (uv.x * 2. + iTime * 2.0) * .1 - 0.2;\n    float wave3 = sin (uv.x * 1. + iTime * 4.0) * .1 - 0.6;\n    \n    //Fields\n    float land = 1.0 - step (wave1, uv.y);\n    float land2 = 1.0 - step (wave2, uv.y);\n    float land3 = 1.0 - step (wave3, uv.y);\n    \n    //Colors\n    vec4 sky = vec4(0.1, 0.6, 0.7, 0.0); \n    vec4 grass = vec4(0.0, 0.1, 0.04, 0.0);\n\tvec4 grass2 = vec4(0.01, .2, 0.09, 0.0);\n    vec4 grass3 = vec4(0.05, .25, 0.1, 0.0);\n    \n\n    \n    //Moon\n    vec2 moonCenter = vec2(cos (iTime),sin (iTime));\n    float radius = .250;\n    float dist = distance(uv, moonCenter);\n    float moon = 1.0 - smoothstep(radius - pixelSize, radius + pixelSize, dist);\n    \n    //MoonLight\n    float distGradient = distance(uv * 1.5, moonCenter * 1.5);\n    float moonLight = clamp((1. - distGradient),0.0, 1.0) / 1.5;\n    \n    //Sun\n    vec2 sunCenter = vec2(cos (iTime + PI),sin (iTime + PI));\n    float radiusSun = .30;\n    float distSun = distance(uv, sunCenter);\n    float sun = 1.0 - smoothstep(radiusSun - pixelSize, radiusSun + pixelSize, distSun);\n    \n    //SunLight\n    float distGradientSun = distance(uv, sunCenter);\n    float sunLight = clamp((1. - distGradientSun),0.0, 1.0) / 1.5;\n    vec4 sunLightColor = vec4(0.3,0.3,0.,0.);\n    sunLightColor = sunLightColor + vec4(clamp((sin(iTime  + PI)), 0.2, 1.0), clamp((sin(iTime + PI)), 0.1, 1.0),0.0,0.0);\n    \n    //Ambient addition   \n    moon += moonLight;\n    sun += sunLight;\n    \n    //gradient overlay\n    vec4 gradient = vec4(-1.,-1.,-1.,0.6);\n    vec4 gradientFront = vec4(-.2,-.2,-.2,0.6);\n    float daynight = clamp(sin(uv.y / 3. + iTime), 0.0, 0.3);\n    \n    \n    vec4 picture = sky;\n    picture = mix(picture, gradient, daynight);\n    picture = mix(picture,  vec4(1.0), moon);\n    picture = mix(picture, sunLightColor, sun);\n    picture = mix(picture, grass, land);\n    picture = mix(picture, grass2, land2);\n    picture = mix(picture, grass3, land3);\n    picture = mix(picture, gradientFront, daynight);\n    picture.rgb = pow(picture.rgb, vec3(1.0/2.2)); \n\n    \n    \n    fragColor = vec4(picture);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}