{
    "Shader": {
        "info": {
            "date": "1667254853",
            "description": "Raytracing",
            "flags": 0,
            "hasliked": 0,
            "id": "msf3zl",
            "likes": 0,
            "name": "Sphere Raytracing 2.0",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "FifthStateOfMatter",
            "viewed": 181
        },
        "renderpass": [
            {
                "code": "#define fogDensity 2.0\n#define fogColor vec3(0.4, 0.6, 0.9)\n#define lPos vec3(10, 20, -20)\n#define PI 3.1415926545\n#define degreesToRadians PI/180.0\n#define FOV 70.0*degreesToRadians\n\nconst float f = 1.0/tan(FOV/2.0);\nconst float aperture = 0.015;\nconst float focalLength = 14.1;\n\nstruct material{\n    vec3 col;\n    float intensity;\n    float type;\n};\n\nstruct sphere{\n    vec3 pos;\n    float rad;\n    material mat;\n};\n\nstruct camera{\n    vec3 o;\n    vec3 d;\n};\n\nsphere[] scene = sphere[](\n    sphere(lPos, 1.0, material(vec3(1), 0.0, 0.0)),\n    sphere(vec3(2, -0.5, 2), 0.5, material(vec3(0, 1, 0), 0.8, 3.0)),\n    sphere(vec3(5, 0, 12), 1.0, material(vec3(1, 0, 0.5), 0.9, 3.0)),\n    sphere(vec3(4, -0.3, 6), 0.7, material(vec3(1, 1, 0), 0.3, 3.0)),\n    sphere(vec3(-4, -0.1, 3), 0.9, material(vec3(0, 1, 1), 0.5, 3.0)),\n    sphere(vec3(0, -1001, 5), 1000.0, material(vec3(1), 0.9, 3.0)),\n    sphere(vec3(-2, 1, 8), 2.0, material(vec3(1, 0.4, 0), 0.8, 3.0)),\n    sphere(vec3(3, 0, 12), 1.0, material(vec3(0, 0, 0.5), 0.9, 3.0)),\n    sphere(vec3(6, -0.3, 8), 0.7, material(vec3(1, 0, 0), 0.3, 3.0)),\n    sphere(vec3(-2, -0.7, 5), 0.3, material(vec3(1, 0.3, 0), 0.5, 3.0))\n);\n\nbool raytraceSphere(vec3 o, vec3 d, out float t, sphere s, out material mat){\n    vec3 oc = o - s.pos;\n    float a = dot(d, d);\n    float b = 2.0*dot(oc, d);\n    float c = dot(oc, oc) - s.rad*s.rad;\n    float disc = b*b - 4.0*a*c;\n    t = (-b - sqrt(disc))/2.0*a;\n    mat = s.mat;\n    if(disc >= 0.0){\n        return true;\n    }\n    return false;\n}\n\nbool raytraceScene(float type, vec3 o, vec3 d, out float t, out material mat, out int Index){\n    float initT = 1000000000.0;\n    bool r;\n    int index;\n    for(int i = 0; i < scene.length(); i++){\n        float testT;\n        bool rt = raytraceSphere(o, d, testT, scene[i], mat);\n        if(rt && testT < initT && testT >= 0.0){\n            r = true;\n            initT = testT;\n            index = i;\n        }\n    }\n    t = initT;\n    Index = index;\n    mat = scene[Index].mat;\n    return r;\n}\n\nvec3 getNormals(vec3 h, sphere s){\n    return normalize(h - s.pos);\n}\n\nvec3 reflectRay(vec3 r, vec3 n){\n    return r - 2.0*n*dot(r, n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec3 initCol = vec3(0);\n    vec3 col = fogColor;\n    \n    //scene[scene.length() - 1].pos = vec3(0, 1, 8);\n\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    mat3 projection;\n    projection[0] = vec3(1, 0, 0);\n    projection[1] = vec3(0, 1, 0);\n    projection[2] = vec3(0, 0, f);\n    \n    camera cam = camera(vec3(0, 5, -6), vec3(20, 0, 0));\n    \n    mat3 xRotation;\n    xRotation[0] = vec3(1, 0, 0);\n    xRotation[1] = vec3(0, cos(cam.d.x*degreesToRadians), -sin(cam.d.x*degreesToRadians));\n    xRotation[2] = vec3(0, sin(cam.d.x*degreesToRadians), cos(cam.d.x*degreesToRadians));\n    \n    mat3 yRotation;\n    yRotation[0] = vec3(cos(cam.d.y*degreesToRadians), 0, -sin(cam.d.y*degreesToRadians));\n    yRotation[1] = vec3(0, 1, 0);\n    yRotation[2] = vec3(sin(cam.d.y*degreesToRadians), 0, cos(cam.d.y*degreesToRadians));\n    \n    vec3 camd = normalize(vec3(uv, 1.0)*projection*xRotation*yRotation);\n    vec3 o = cam.o;\n    \n    float focusRes = 0.05;\n    \n    float iteration = 1.0;\n    \n    for(float originMoveX = -1.0; originMoveX < 1.0; originMoveX += focusRes){\n        for(float originMoveY = -1.0; originMoveY < 1.0; originMoveY += focusRes){\n            o.x += (originMoveX*aperture)/(0.5/focusRes);\n            o.y += originMoveY*aperture;\n            //if(length(o.xy - cam.o.xy) < aperture/1.0){\n                float t;\n                material mat;\n                int i;\n                vec3 focalPoint = cam.o + camd*focalLength;\n                vec3 d = normalize(focalPoint - o);\n                bool r = raytraceScene(0.0, o, d, t, mat, i);\n\n                vec3 n = getNormals(o + d*t, scene[i]);\n\n                vec3 lRay = lPos - (o + d*t);\n\n                float c = dot(n, normalize(lRay));\n\n                float lt;\n                material lMat;\n                int li;\n\n                bool rl;\n\n                if(mat.type != 0.0){\n                    rl = raytraceScene(1.0, o + d*t, lRay, lt, lMat, li);\n                }else{\n                    rl = false;\n                }\n\n                if(rl){\n                    if(lMat.type != 0.0){\n                        c -= 0.4;\n                    }else if(lMat.type == 0.0){\n                        c = dot(n, normalize(lRay));\n                    }\n                }else{\n                    if(lMat.type != 0.0){\n                        c = dot(n, normalize(lRay));\n                    }else{\n                        c = 1.0;\n                    }\n                }\n\n                float spec;\n\n                if(mat.type == 2.0){\n                    spec = pow(max(c, 0.0), 15.0);\n                }else{\n                    spec = 0.0;\n                }\n\n                if(r){\n                    if(mat.type != 3.0){\n                        col = mix(mat.col*max(c, 0.05) + smoothstep(0.0, 1.0, min(spec, 1.0)), fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                    }else{\n                        vec3 reflectO = o + d*t;\n                        vec3 reflectD = normalize(reflectRay(d, n));\n                        float rt;\n                        material reflectMat;\n                        int reflectI;\n                        bool reflectTrace = raytraceScene(0.0, reflectO, reflectD, rt, reflectMat, reflectI);\n\n                        if(reflectTrace){\n                            vec3 reflectN = getNormals(reflectO + reflectD*rt, scene[reflectI]);\n                            float rc = dot(normalize(lRay), reflectN);\n\n                            bool reflectLight;\n\n                            float rlt;\n                            material rlMat;\n                            int rli;\n\n                            if(reflectMat.type != 0.0){\n                                reflectLight = raytraceScene(1.0, reflectO + reflectD*rt, lRay, rlt, rlMat, rli);\n                            }else{\n                                reflectLight = false;\n                                rc = 1.0;\n                            }\n\n                            if(reflectLight){\n                                if(rlMat.type != 0.0){\n                                    rc -= 0.4;\n                                }\n                            }else{\n                                if(rlMat.type != 0.0){\n                                    rc = dot(normalize(lRay), reflectN);\n                                }\n                            }\n\n                            col = mix(mix(reflectMat.col*max(rc, 0.05), mat.col*max(c, 0.2), mat.intensity)*max(c, 0.7) + smoothstep(0.0, 1.0, min(spec, 1.0)), fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                        }else{\n                            col = mix(mix(fogColor, mat.col*max(c, 0.2), mat.intensity)*max(c, 0.7), fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                        }\n                    }\n                }else{\n                    col = fogColor;\n                }\n            //}\n            iteration++;\n            initCol = mix(initCol, col, 1.0/(iteration));\n        }\n    }\n    \n    fragColor = vec4(pow(initCol, vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}