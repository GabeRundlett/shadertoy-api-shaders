{
    "Shader": {
        "info": {
            "date": "1721649900",
            "description": "Mandelbrot Set visually calculated. Very first project and fractal, all by myself.\n\"nloop\" (line19) can be set higher for increased detail, but can lag. 100K is the highest my PC can render smoothly.\nUncomment the whole \"Animation\" section for Animation.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fXcDX",
            "likes": 0,
            "name": "Mandelbrot Set Animated",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "animation",
                "set"
            ],
            "usePreview": 0,
            "username": "Lumely",
            "viewed": 97
        },
        "renderpass": [
            {
                "code": "//Color gradient for longer iterations to escape\nfloat ReduceRBGvalue(float IterationEscN) \n{\n    return (abs(IterationEscN) - 1.0) * -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Mapping uv and ScreenRatio\n    float ScreenRatio = iResolution.x/iResolution.y;\n    vec2 uv = vec2(iResolution.x/ScreenRatio,iResolution.y);\n\n    //Define variables\n    vec3 color = vec3(1.0);\n    vec2 C = vec2(fragCoord.x/uv.x,fragCoord.y/uv.y);\n    C *= 2.5;\n    C -= vec2(ScreenRatio*2.2,ScreenRatio*1.5);\n    vec2 Z = vec2(0.0,0.0);\n    const int nloop = 1000; //Maximum that my PC could handle stable is 100000\n    int Iteration = 0;\n\n    //Animation\n    //C += 1.0;\n    //for (int i = 0; i < 1; i++) {\n    //    C /= pow(2.0,iTime);\n    //    C.x -= 2.04959;\n    //    C.y -= 1.80105;\n    //}\n    //Animation end\n\n    C += 1.415; //Comment if Animated\n\n    //Is Pixel part of set\n    for (int n = 0; n < nloop; n++) {\n        Z = vec2(Z.x * Z.x - Z.y * Z.y, 2.0 * Z.x * Z.y);\n        Z = vec2(Z.x + C.x * +1.0, Z.y + C.y * +1.0);\n        Iteration += 1;\n        \n        //Has Pixel escaped the limit 2.0\n        if (length(Z) > 4.0) {\n            break;\n        }\n    }\n\n    //Color grading\n    float IterationEscaped = float(Iteration) / float(nloop);\n    color = mix(vec3(1.0, 40.0*IterationEscaped, 0.3),\n                     vec3(0.0),\n                     IterationEscaped);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}