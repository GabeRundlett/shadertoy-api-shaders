{
    "Shader": {
        "info": {
            "date": "1654107632",
            "description": "License CC0: Hexler hexes\nI like Hexler's kodelife. When I go to their homepage they often\nhave an image of repeated hexes. \nThis is the result of short hack to try to recreate it\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sstyW2",
            "likes": 17,
            "name": "Hexler hexes",
            "published": 3,
            "tags": [
                "2d",
                "hexler"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "// License CC0: Hexler hexes\n//  I like Hexler's kodelife. When I go to their homepage they often\n//  have an image of repeated hexes. \n//  This is the result of short hack to try to recreate it\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\n// License: CC0, author: M책rten R책nge, found: https://github.com/mrange/glsl-snippets\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  \n  vec2 pp = toPolar(p);\n  float a = pp.y;\n  float hn = mod1(pp.y, TAU/6.0);\n  vec2 hp = toRect(pp);\n  \n  float x = hp.x;\n  float w = mix(0.03, 0.1, 0.5+0.5*cos(sqrt(0.5)*0.125*TIME));\n  float n = mod1(x, w);\n  float d = abs(x)-(0.5*w-aa);\n  \n  float h0 = hash(n+1.234);\n  float h1 = hash(n+2.345);\n  float cut = mix(-0.5, 0.999, 0.5+0.5*sin(TIME+TAU*h0));\n  const float coln = 6.0;\n  vec3 col = hsv2rgb(vec3(0.1*TIME+floor(h0*coln)/coln, 0.9, 1.0))*smoothstep(aa, -aa, d)*smoothstep(cut, cut-0.005, sin(a+2.0*(h1-0.5)*TIME+h1*TAU));\n\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}