{
    "Shader": {
        "info": {
            "date": "1527188559",
            "description": "Voronoi & Flow Noise for shape + Flow Noise for distortion + gradient map for colors.\nUsed Voronoi and Flow Noise because they allow for non-directional movement.\nShout outs to https://www.shadertoy.com/view/MstXWn and iq's website/articles!",
            "flags": 0,
            "hasliked": 0,
            "id": "ldcBWs",
            "likes": 19,
            "name": "Cloudy Movement",
            "published": 3,
            "tags": [
                "voronoi",
                "noise",
                "clouds",
                "sky",
                "flownoise"
            ],
            "usePreview": 1,
            "username": "Squiggle",
            "viewed": 1492
        },
        "renderpass": [
            {
                "code": "    \nvec2 hash2( vec2 p )\n{\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat voronoi( in vec2 x, float phase )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n    \n    float md = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash2( n + g );\n        o = 0.5 + 0.5*sin( phase + 6.2831*o );\n        vec2 r = g - f + o;\n        float d = dot( r, r );\n        \n       \tmd += 1.0/pow( d, 8.0 );\n    }\n    return 1.0-pow( 1.0/md, 1.0/8.0 );\n}\n\nfloat flowNoise( in vec2 p, float t )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    mat2 R = mat2(cos(t),-sin(t),sin(t),cos(t));\n    if (mod(i.x+i.y,2.)==0.) R=-R;\n\n    float g = 2.*mix( mix( dot( hash2( i + vec2(0,0) ), (f - vec2(0,0))*R ), \n                     dot( hash2( i + vec2(1,0) ),-(f - vec2(1,0))*R ), u.x),\n                mix( dot( hash2( i + vec2(0,1) ),-(f - vec2(0,1))*R ), \n                     dot( hash2( i + vec2(1,1) ), (f - vec2(1,1))*R ), u.x), u.y);\n    return mix( 0.0, 1.0, .5 + .5* g );\n}\n\nfloat fbm4Voronoi( vec2 p, float t )\n{\n    mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n    \n    float f = 0.0;\n    f += 0.5000*voronoi( p, t*0.1 ); p = m*p*2.02;\n    f += 0.2500*voronoi( p, t*0.2 ); p = m*p*2.03;\n    f += 0.1250*voronoi( p, t*0.5 ); p = m*p*2.01;\n    //f += 0.0625*voronoi( p, t*1.0 );\n    f += 0.0625;\n    f = f/0.9375;\n    \n    return f;\n}\n\nfloat fbm4FlowNoise( vec2 p, float t )\n{\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    float g = 0.0;\n    g += 0.5000*flowNoise( p, t*0.1 ); p = m*p;\n\tg += 0.2500*flowNoise( p, t*0.4 ); p = m*p;\n\tg += 0.1250*flowNoise( p, t*0.7 ); p = m*p;\n\tg += 0.0625*flowNoise( p, t*0.3 ); p = m*p;\n    g += 0.0325*flowNoise( p, t*0.3 ); p = m*p*2.;\n\tg = g * 1.2;\n\n    return g;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx;\n    uv.y = 0.5 - uv.y;\n    \n    float scale = 8.;\n    float gTime = iTime * 1.;\n    float speed = gTime*0.5;\n    float movement = gTime*0.15;\n    float offset = 0.6;\n    \n    uv += fbm4FlowNoise( uv * vec2(scale*1.,scale*1.) + vec2(0., speed*0.5), speed ) * 0.025;\n\tfloat f = fbm4Voronoi( uv*scale + vec2(0.0,movement), speed*10.0 );\n    float g = fbm4FlowNoise( uv*scale + vec2(0.0,movement), speed*10.0 );\n    \n    \n    float uvy = clamp( uv.y * 1.0, 0.0, 1.0 );\n    \n    g = smoothstep( 0.0, 1.0, g ) * uvy + offset;\n    f = smoothstep( 0.0, 1.0, f ) * uvy + offset;\n    \n    float dist = 0.5;\n    float threshold = 0.5;\n    float lowerLimit = (1.0-dist)-threshold;\n\tfloat upperLimit = (1.0-dist)+threshold;\n    \n    float val = f*g;\n    val *= smoothstep( lowerLimit,upperLimit, val);\n    vec4 col = vec4(0.0);\n    \n    vec4 sky = vec4(vec3(110.0/255.0, 173.0/255.0, 222.0/255.0)-0.01, 1.0);\n    float skyFlag = 0.2;\n    \n    vec4 white = vec4(1.0);\n    float whiteFlag = 0.5;\n    \n    vec4 interior = vec4(vec3(210.0/255.0), 1.0);\n    float intFlag = 0.99;\n    \n    \n    if( val < skyFlag ) col = sky;\n    else if( val < whiteFlag ) col = mix( sky, white, smoothstep(0.0,1.0,(val-skyFlag)/(whiteFlag-skyFlag)) );\n    else if( val < intFlag ) col = mix( white, interior, smoothstep(0.0,1.0,(val-whiteFlag)/(intFlag-whiteFlag)) );\n    else col = interior;\n      \n    fragColor = col;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}