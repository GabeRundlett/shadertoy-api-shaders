{
    "Shader": {
        "info": {
            "date": "1652103946",
            "description": "N-Fold Burning Ship is the Burning Ship fractal generalized the number of folds. The Perpendicular Burning Ship has 1 fold, normal Burning Ship has 2 folds and so on.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBBD1",
            "likes": 4,
            "name": "N-Fold Burning Ship",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "iteration",
                "burningship"
            ],
            "usePreview": 0,
            "username": "Fraktoler",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932\n#define TWO_PI 6.2831853071795865\n\nvec3 HSLtoRGB(vec3 hsl) {\n    float chroma = hsl.y * (1.0 - abs(2.0 * hsl.z - 1.0));\n    float h_prime = hsl.x / 60.0;\n    float x = chroma * (1.0 - abs(mod(h_prime, 2.0) - 1.0));\n    vec3 rgb;\n    if (0.0 <= h_prime && h_prime < 1.0) {\n        rgb = vec3(chroma, x, 0.0);\n    } else if (1.0 <= h_prime && h_prime < 2.0) {\n        rgb = vec3(x, chroma, 0.0);\n    } else if (2.0 <= h_prime && h_prime < 3.0) {\n        rgb = vec3(0.0, chroma, x);\n    } else if (3.0 <= h_prime && h_prime < 4.0) {\n        rgb = vec3(0.0, x, chroma);\n    } else if (4.0 <= h_prime && h_prime < 5.0) {\n        rgb = vec3(x, 0.0, chroma);\n    } else {\n        rgb = vec3(chroma, 0.0, x);\n    }\n    float m = hsl.z - 0.5 * chroma;\n    return rgb + m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float zoom = 3.0;\n    vec2 center = vec2(0.0);\n    vec2 c = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.x * zoom + center;\n    vec2 z = c;\n    float folds = iTime * 0.2 + 1.0;\n    float r = dot(z, z);\n    float theta;\n    float iter = 0.0;\n    const float max_iter = 256.0;\n    while (iter < max_iter) {\n        if (r > 4.0) {\n            break;\n        }\n        //Convert to polar form to minimize the usage of cos(), sin(),...\n        //Multiply and divide by the number of folds to get Burning Ship folds.\n        theta = atan(z.y, z.x) * folds; \n        //Calculate arg = atan(tan(arg)) to get arg in range (-pi, pi].\n        //Trick: atan(tan(x)) = mod(x-pi/2,pi)-pi/2 when x not equal to pi/2+pi*n\n        //Taking the abs of the argument is the same as taking the abs of imaginary component.\n        theta = abs(mod(theta - PI, TWO_PI) - PI) / folds;\n        theta += theta;\n        z = r * vec2(cos(theta), sin(theta)) + c;\n        r = dot(z, z);\n        iter += 1.0;\n    }\n\n    if (iter >= max_iter) {\n        fragColor = vec4(vec3(0.0), 1.0);\n    } else {\n        vec3 col = HSLtoRGB(vec3(mod(iter * 4.0, 360.0), 1.0, 0.5));\n        fragColor = vec4(col, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}