{
    "Shader": {
        "info": {
            "date": "1494877644",
            "description": "Assuming your monitor gamma is correct ( see [url]https://www.shadertoy.com/view/Xdl3DM[/url] ),\ndrawing iso luminance colors  make our visual system uncertain about contours exact location.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dsfzH",
            "likes": 4,
            "name": "floating contours",
            "published": 3,
            "tags": [
                "illusion",
                "luminance",
                "perception"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 649
        },
        "renderpass": [
            {
                "code": "float lum(vec4 C) { return dot( C , vec4(.299,0.587,.114,0) ); } // flat RGB to luminance\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n\tU = ( U+U - R ) / R.y;\n    float t = iTime, M,\n          l = length( U + .2*(sin(8.*U+t)/8.+cos(20.*U-2.*t)/20.) ) ;\n    \n    vec4 C0 = vec4(1,0,0,0), C1 = vec4(0,1,0,0), C2 =  vec4(0,0,1,0), C;  // 3 areas color\n  //vec4 C0 = vec4(1,0,0,0), C1 = vec4(0,1,0,0), C2 =  vec4(0,.1,1,0), C; // brighter\n    \n    C0 /= lum(C0); C1 /= lum(C1); C2 /= lum(C2);         // make area color iso-luminance\n    \n    C = max(C0,max(C1,C2)); M = max(C.r, max(C.g,C.b));  // normalize by the max RGB component\n    C0 /= M; C1 /= M; C2 /= M;\n    \n    O = l < .5 ? C0 : l <.9 ? C1 : C2;                   // draw 3 areas\n // O = mix(C0, mix(C1,C2,smoothstep(.9,.92,l)), smoothstep(.5,.52,l));\n\n    t = R.x/R.y;\n    if (length( U +R/R.y )     <.3) { C0=vec4(0,1,1,0); O = C0 / lum(C0) / M; }\n    if (length( U -R/R.y )     <.3) { C0=vec4(1,0,1,0); O = C0 / lum(C0) / M; }\n    if (length( U +vec2(t,-1) )<.3) { C0=vec4(1,1,0,0); O = C0 / lum(C0) / M; }\n    if (length( U +vec2(-t,1) )<.3) { C0=vec4(1,1,1,0); O = C0 / lum(C0) / M; }\n    \n    O = pow(O, vec4(1./2.2));                            // to sRGB\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}