{
    "Shader": {
        "info": {
            "date": "1574893066",
            "description": "A fun little reimagining of the classic JS1K game Couch 2048 https://js13kgames.com/games/couch-2048/index.html with various modifications such as:\n-Taller Armrests\n-Janky Physics (Not proper blob physics)\n-Narrower Couch\n-Smaller Code Size\n",
            "flags": 32,
            "hasliked": 0,
            "id": "3syXzt",
            "likes": 61,
            "name": "Couch 2048 Shader",
            "published": 3,
            "tags": [
                "game",
                "math",
                "text",
                "pain",
                "2048",
                "misery"
            ],
            "usePreview": 1,
            "username": "mathmasterzach",
            "viewed": 20602
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 O,in vec2 U){\n    vec2 R=iResolution.xy,\n         p=(U+U-R)/R.y;\n    O=vec4(0.);\n    float m0=1000.,\n          m1=1000.;\n    int mi=-3;\n    vec2 mp;\n    for(int i=0;i<NUM_BALLS;i++){\n        vec2 tp=texelFetch(iChannel0,ivec2(i,0),0).xy;\n        float mt=length(tp-p)-getBallRadFromID(i);\n        if(mt<m1){\n        \tm1=mt;\n            if(m1<m0){mi=i;mt=m1;m1=m0;m0=mt;mp=tp;}\n        }\n    }\n    float mt=min(min(p.y+.9,p.x+1.7),1.7-p.x);\n    mt=exSDF(p);\n    if(mt<m1){\n        m1=mt;\n        if(m1<m0){mt=m1;m1=m0;m0=mt;mi=-3;}\n    }\n    float r=texelFetch(iChannel0,ivec2(mi,1),0).x;\n    mat2 rt=mat2(cos(r),sin(r),-sin(r),cos(r));\n    mi=(mi+1)/2;\n    vec3 c=vec3(238.,228.,218.);\n    float cu=SQSDF(p-vec2(0.,-.25),vec2(.7,.24))-.2;\n    float st=1./R.y;\n    vec3 bc=mix(vec3(119.,110.,101)*clamp(3.*min(mt,cu)+.8,0.,1.),\n                vec3(238.,228.,218.)*.75*clamp(.5*p.y+1.,0.,1.),\n                1.-smoothstep(-st,st,cu));\n    //color values based on the original game\n    switch(mi){\n        case  0:c=vec3(237.,194.,46);break;\n        case  1:c=vec3(237.,197.,63);break;\n        case  2:c=vec3(237.,200.,80);break;\n        case  3:c=vec3(237.,204.,97);break;\n        case  4:c=vec3(237.,207.,114);break;\n        case  5:c=vec3(246.,94.,59);break;\n        case  6:c=vec3(246.,124.,95);break;\n        case  7:c=vec3(245.,149.,99);break;\n        case  8:c=vec3(242.,177.,121.);break;\n        case  9:c=vec3(237.,224.,200.);break;\n        case 10:c=vec3(238.,228.,218.);break;\n    }\n    float d=-1.;\n    #define t(a,b) texture(iChannel1,(.5+vec2(a,12.))/16.+(clamp(q+vec2(b,0.)/8.,-.125,.125))/4.).x-127./255.\n    vec2 q=rt*(p-mp);\n    if(mi>-1){\n        switch(mi){\n            case  0:d=max(max(t(2.,1.35),t(0.,.45)),max(t(4.,-.45),t(8.,-1.35)));break;\n            case  1:d=max(max(t(1.,1.35),t(0.,.45)),max(t(2.,-.45),t(4.,-1.35)));break;//WIP\n            case  2:d=max(t(5.,.9),max(t(1.,0.),t(2.,-.9)));break;\n            case  3:d=max(t(2.,.9),max(t(5.,0.),t(6.,-.9)));break;\n            case  4:d=max(t(1.,.9),max(t(2.,0.),t(8.,-.9)));break;\n            case  5:d=max(t(6.,.45),t(4.,-.45));break;\n            case  6:d=max(t(3.,.45),t(2.,-.45));break;\n            case  7:d=max(t(1.,.45),t(6.,-.45));break;\n            case  8:d=t(8.,0.);break;\n            case  9:d=t(4.,0.);break;\n            case 10:d=t(2.,0.);break;\n        }\n        c=mix(c,(mi>8?vec3(119.,110.,101.):vec3(249.,246.,242.)),smoothstep(-st*256.,st*256.,d));\n    }\n    float l=min(smoothstep(-st,st,-m0),smoothstep(-st,st,m1-m0-.01));\n    c=mix(bc,c,l);\n    if(texelFetch(iChannel0,ivec2(0),0).x<100.){\n    \tq=p/3.;\n    \t#define t2(a,b) texture(iChannel1,(.5+a)/16.+(clamp(q+vec2(b,-1.3+.4*sin(.3*b+3.*iTime))/8.,-.125,.125))/4.).x-127./255.\n    \td=      t2(vec2( 9.,10.), 3.);\n        d=max(d,t2(vec2(15.,11.), 2.));\n        d=max(d,t2(vec2( 5.,10.), 1.));\n        d=max(d,t2(vec2( 7.,10.),-1.));\n        d=max(d,t2(vec2( 9.,11.),-2.));\n        d=max(d,t2(vec2(14.,11.),-3.));\n        c=mix(c,vec3(249.,246.,242.),smoothstep(-st*256./3.,st*256./3.,d));\n    }\n   \tc/=255.;\n    O.rgb=c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 O,in vec2 U){\n\tint id=int(U.x);\n    vec2 R=iResolution.xy,\n         M=(2.*iMouse.xy-R)/R.y;\n    bool gd=texelFetch(iChannel0,ivec2(0),0).x<100.;\n    if(id<NUM_BALLS&&U.y<1.){\n        if(iFrame==0){\n            if(id==19||id==20){O=vec4(0.,.5*float(id-20),0.,0.);\n            //Cheats. Comment out the previous line and use one of these instead ;)\n            //You Cheated Not Only the Game, But Yourself Though\n            //if(id==2||id==3||id==5||id==7){O=vec4(0.,1.*float(id-2),0.,0.);\n            //if(id==1||id==2){O=vec4(0.,1.*float(id-1),0.,0.);\n            }else if(id==NUM_BALLS){\n                O=vec4(-1.);\n            }else{\n                O=vec4(100.,0.,0.,0.);\n            }\n        }else{\n            O=texelFetch(iChannel0,ivec2(id,0),0);\n            int ds=19;\n            if(texelFetch(iChannel0,ivec2(1,0),0).x<100.||\n               texelFetch(iChannel0,ivec2(2,0),0).x<100.){\n            \tds=15;\n            }else if(texelFetch(iChannel0,ivec2(3,0),0).x<100.||\n               \t\t texelFetch(iChannel0,ivec2(4,0),0).x<100.){\n            \tds=17;\n            }\n            if(O.x<100.){\n                int db=2*((id+1)/2);\n                vec2 dp0=texelFetch(iChannel0,ivec2(db,0),0).xy;\n                vec2 dp1=texelFetch(iChannel0,ivec2(db-1,0),0).xy;\n                if(id!=0&&dp0.x<100.&&dp1.x<100.&&length(dp0-dp1)<2.*getBallRadFromID(id)){\n                    O=vec4(100.,0.,0.,0.);\n                }else{\n                    for(int i=0;i<NUM_BALLS;i++){\n                        if(i==id){\n                            continue;\n                        }\n                        vec4 b=texelFetch(iChannel0,ivec2(i,0),0);\n                        if(b.x<100.){\n                            float l=length(b.xy-O.xy);\n                            float d=getBallRadFromID(id)+getBallRadFromID(i);\n                            if(l<d){\n                                O.zw+=.08*sign(O.xy-b.xy)*(d-abs(O.xy-b.xy))/d;\n                                O.zw*=.95;\n                            }\n                        }\n                    }\n                    float c=exSDF(O.xy)-getBallRadFromID(id);\n                    if(c<0.){\n                        O.zw-=2.*c*SDFGrad(O.xy);//6.//3.\n                        O.zw*=.97;\n                    }\n                    if(!gd&&id==int(texelFetch(iChannel0,ivec2(NUM_BALLS,0),0).x)&&O.y<1.){\n                        O.zw+=.5*normalize(M-O.xy)*max(0.,min(length(M-O.xy)-.05,.2));\n                    }\n                    O.zw*=.98;\n                    O.w-=.03;\n                    O.xy+=.032*O.zw;\n                    if(O.y<-1.2){O=vec4(100.,0.,0.,0.);}\n                }\n            }else if(id==ds||id==ds+1){\n                bool bc=true;\n                for(int i=1;i<10;i++){\n                    bc=bc&&!(texelFetch(iChannel0,ivec2(2*i,0),0).x<100.&&\n                             texelFetch(iChannel0,ivec2(2*i-1,0),0).x<100.);\n                }\n                if(bc){\n                    O=vec4(sin(iTime+float(id)),3.+float(id-ds),0.,0.)/2.;\n                }\n            }else{\n                int db=2*((id+1)/2)+1;\n                vec2 dp0=texelFetch(iChannel0,ivec2(db,0),0).xy;\n                vec2 dp1=texelFetch(iChannel0,ivec2(db+1,0),0).xy;\n                if(dp0.x<100.&&dp1.x<100.&&length(dp0-dp1)<2.*getBallRadFromID(db)){\n                    if(id%2==1){\n                        if(O.x>=100.){\n                            O=vec4(dp0+dp1,0.,0.)/2.;\n                        }\n                    }else{\n                        if(texelFetch(iChannel0,ivec2(id-1,0),0).x<100.||id==0){\n                            O=vec4(dp0+dp1,0.,0.)/2.;\n                        }\n                    }\n                }\n            }\n        }\n    }else if(id==NUM_BALLS&&U.y<1.){\n        O=texelFetch(iChannel0,ivec2(id,0),0);\n        if(O.x==-1.){\n            if(iMouse.z>0.){\n                float md=1.;\n                int mi=-1;\n                for(int i=0;i<NUM_BALLS;i++){\n                    vec2 b=texelFetch(iChannel0,ivec2(i,0),0).xy;\n                    if(b.x<100.){\n                        float d=length(b-M)/getBallRadFromID(i);\n                        if(d<md){\n                            md=d;\n                            mi=i;\n                        }\n                    }\n                }\n                O.x=float(mi);\n            }\n        }else{\n            vec2 dp=texelFetch(iChannel0,ivec2(O.x,0),0).xy;\n            if(iMouse.z<=0.||dp.x>100.||dp.y>1.){\n                O.x=-1.;\n            }\n        }\n    }else if(id<NUM_BALLS&&U.y<2.){\n        O.x=texelFetch(iChannel0,ivec2(id,1),0).x+.3*texelFetch(iChannel0,ivec2(id,0),0).z;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//ball sequence is as follows (value,size):\n//  2048 | .42\n//2x1024 | .39\n//2x 512 | .36\n//2x 256 | .33\n//2x 128 | .30\n//2x  64 | .27\n//2x  32 | .24\n//2x  16 | .21\n//2x   8 | .18\n//2x   4 | .15\n//2x   2 | .12\n\n#define NUM_BALLS 21\n\n#define getBallRadFromID(id) (.42-.03*float((id+1)/2))\n\n//Thanks IQ for the derivation of this function\nfloat SQSDF(vec2 p,vec2 b){\n    vec2 d=abs(p)-b;\n    return min(max(d.x,d.y),0.)+length(max(d,vec2(0)));\n}\n\nfloat exSDF(vec2 p){\n\tfloat d=SQSDF(p-vec2(0.,-.85),vec2(.6,.05))-.2;\n    d=min(d,SQSDF(p-vec2(.9,-.6),vec2(.04,.4))-.1);\n    d=min(d,SQSDF(p-vec2(-.9,-.6),vec2(.04,.4))-.1);\n    return min(d,SQSDF(p-vec2(0.,-.85),vec2(.5,.03))-.2);\n}\n\nvec2 SDFGrad(vec2 p){\n\tvec2 e=vec2(.001,0.);\n    return normalize(vec2(exSDF(p+e.xy)-exSDF(p-e.xy),\n                          exSDF(p+e.yx)-exSDF(p-e.yx)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}