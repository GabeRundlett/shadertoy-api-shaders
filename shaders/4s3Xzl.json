{
    "Shader": {
        "info": {
            "date": "1460750593",
            "description": "A long radial blur with only 26 texture reads. Use the mouse.\nReprojecting the previous frame saves in sampling and enables cheap blur along the radial in the buffer texture to hide sparse sampling. Also makes texture access more coherent.\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4s3Xzl",
            "likes": 1,
            "name": "Faster radial blur",
            "published": 3,
            "tags": [
                "optimized",
                "radialblur",
                "reprojection"
            ],
            "usePreview": 1,
            "username": "atomim",
            "viewed": 1163
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\n\n#define SAMPLES 16\n//these plus 8 in previous buffer sampling and 2 in copying\n\n#define SHOW_BUFFER 1.\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 blurred( vec2 uv ,float scale){\n    \n    vec4 sum;\n    vec2 center = vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n    float ray = mod(acos(dot(normalize(uv-center),vec2(0.,1.)))/PI/2.,1.);\n    if(sign(uv-center).x==-1.) ray=1.-ray;\n    scale=scale*(0.003*length(uv-center));\n    float dist=length(uv-center)/1.5*2.+scale*rand(uv*16.66+vec2(iTime*137.));\n    for (int i = 0; i < SAMPLES; i++) {\n    \tsum+=vec4(texture(iChannel3,vec2(ray,-float(i)*scale+dist*0.5)));\n\n    };\n    \n    \n\treturn sum/float(SAMPLES);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy; //TODO: aspect ratio\n    \n    float scale=1.6+sin(iTime+sin(iTime/PI*1.5));\n    \n    vec4 col = vec4(texture(iChannel1,uv));\n    vec4 col2 = blurred(uv, scale)*scale*1.1;\n    \n    //some mix of original, blurred and buffer\n\tfragColor = vec4(col*0.8*(1.1-scale*0.6)+col2)+vec4(texture(iChannel3,uv))*SHOW_BUFFER;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Draw something\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x+=sin(iTime*1.+uv.y*3.)*0.01;\n    vec4 col = texture(iChannel0,uv);\n\tfragColor = vec4(col.rgb,dot(vec3(1.),col.rgb*3.-1.-length(uv-0.5)*2.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//copy and apply weight\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center=vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n\n    vec4 col = vec4(texture(iChannel0,uv));\n    vec3 col2 = col.rgb*max(0.,col.w);\n\tfragColor = vec4(col2,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//multisample(8), unwrap, reproject previous frame and blur a bit along radius in the process\n\n//around 75% of the height of the buffer is used. More was not beneficial with this little samples(32)\n\n#define PI 3.1415926535897932384626433832795\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center = vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y);\n    vec4 sum; \n    vec2 unwrapped;\n    float pixrand=rand(vec2(uv.x*443.4+iTime*1454.1,uv.y*86.2+iTime*123.1));\n    for (float i=0.;i<16.;i+=2.){//sample in a spiral pattern to cover a disc under the pixel.\n        float ii=i+pixrand*2.;\n        vec2 offset=vec2(sin(ii*1.2)/iResolution.x,cos(ii*1.2)/iResolution.y)/4.*sqrt(ii);\n        unwrapped = vec2(sin((uv.x+offset.x)*PI*2.),cos((uv.x+offset.x)*PI*2.))*(uv.y+offset.y*2.)*1.5+center;\n        sum+=vec4(texture(iChannel0,unwrapped));//a bit of blur here too. smooths the center a bit.\n    }\n    sum=sum/8.;\n    \n    //reproject previous buffer and offset a bit to blur in y\n    vec2 coordInPic=vec2(vec2(sin((uv.x)*PI*2.),cos((uv.x)*PI*2.))*uv.y*1.5+center);\n    \n    vec2 lastcenter=texture(iChannel1,vec2(0.0)).xy;\n    float ray = mod(acos(dot(normalize(coordInPic-lastcenter),vec2(0.,1.)))/PI/2.,1.);\n    if(sign(coordInPic-lastcenter).x==-1.) ray=1.-ray;\n    float dist=length(coordInPic-lastcenter)/1.5;\n    \n    vec2 reprojecteduv = vec2(ray,dist);\n    \n    vec2 offset=-vec2(0.,(0.45+uv.y*4.)/iResolution.y).xy; //blur more farther from the center\n    vec4 reprojected = vec4(texture(iChannel1,reprojecteduv*1.+offset));\n    \n    \n    fragColor = sum*0.2+reprojected*0.8;//exponential decay (and blur) of reprojected\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//copy radial buffer and blur it a bit\n//and store mouse position in it\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tif(fragCoord.x < 1. && fragCoord.y < 1.)//bad coordinate, but no visual difference.\n    \tfragColor = vec4( vec2(iMouse.x/iResolution.x,iMouse.y/iResolution.y),0.,0.);\n    else\n        //fetch off pixel to blur a bit more and shift a bit back so propagation isnt so visible\n    \tfragColor = vec4(texture(iChannel0,fragCoord.xy / iResolution.xy+vec2(0.,0.4/iResolution.y)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}