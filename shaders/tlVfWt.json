{
    "Shader": {
        "info": {
            "date": "1615339345",
            "description": "2D Procedural generation based off of this article: https://www.redblobgames.com/maps/terrain-from-noise/ Move the mouse left to have more snowy mountains, and move it right to create more water.\n\nUpdate 2/28/2022: Added moisture map and better biome map.",
            "flags": 32,
            "hasliked": 0,
            "id": "tlVfWt",
            "likes": 3,
            "name": "Procedural Generation - Quasar",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "generation"
            ],
            "usePreview": 0,
            "username": "Quasar",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "float getLevel (vec2 pos) {\n    float e = perlin2D(pos, 3) * 1.;\n    \n    if (iMouse.xy != vec2(0)) {\n        e = pow(e, (iMouse.x * 2.) / iResolution.x);\n    }\n    \n    return e;\n}\n\nvec3 getColor (float elevation, float moisture) {\n    return texture(iChannel0, vec2(moisture, elevation)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    uv.x += iTime * 0.2;\n    \n    float elevation = getLevel(uv * 6.);\n    float moisture = perlin2D(uv, 2);\n    \n    //Make elevation and moisture more diverse\n    elevation = (elevation - 0.3) * 3.;\n    moisture = (moisture - 0.1) * 1.1;\n\n    vec3 col = getColor(elevation, moisture);\n\n    fragColor = vec4(col, 1.0);\n    //Uncomment next line to see biome map.\n    //fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 grad (vec2 vec) {\n    return normalize( vec2(\n        fract(cos(vec.x * 3249.432 + vec.y * 439342.23) * 2134.4),\n        fract(sin(vec.x * 239.4576 + vec.y * 948.754) * 44654.5647)) * 2. - 1.);\n}\n\nfloat basic_perlin (vec2 pos) {\n    vec2 grid = floor(pos);\n    vec2 uv = fract(pos);\n    float tl = dot( uv , grad(grid) );\n    float tr = dot( uv - vec2(1., 0.) , grad(grid + vec2(1., 0.)) );\n    float br = dot( uv - vec2(1., 1.) , grad(grid + vec2(1., 1.)) );\n    float bl = dot( uv - vec2(0., 1.) , grad(grid + vec2(0., 1.)) );\n    \n    uv = uv * uv * (3. - 2. * uv);\n    \n    float value = mix(\n            mix(tl, tr, uv.x),\n            mix(bl, br, uv.x), uv.y);\n    \n    return value * .5 + .5;\n}\n\nfloat perlin2D (vec2 pos, int octaves) {\n    float value = 0.;\n    float fre_factor = 1.;\n    float amp_factor = 1.;\n    float normalization = 1.;\n    \n    for (int i = 0; i < octaves; i += 1) {\n        value += basic_perlin(pos * fre_factor) * amp_factor;\n        \n        fre_factor *= 2.;\n        amp_factor *= 0.5;\n        \n        normalization += amp_factor;\n    }\n    \n    return value / normalization;\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Voronoi biome mapping\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    struct Biome {\n        vec2 pos;\n        vec3 color;\n    };\n    \n    Biome biomeList[8] = Biome[8] (\n        Biome(vec2(1., 0.3), vec3(.2, .7, .2)), //Dark Forest\n        Biome(vec2(0.6, 0.4), vec3(.2, .8, .2)), //Light Forest\n        Biome(vec2(0.4, 0.7), vec3(.6, .7, .4)), //Grayish-Green\n        Biome(vec2(0.45, 0.6), vec3(.55, .75, .35)), //Semi-Savannah\n        Biome(vec2(.6, 1.), vec3(.9, .9, .9)), //Snow\n        Biome(vec2(0.2, 1.), vec3(.35, .35, .15)), //Mountains\n        Biome(vec2(0.05, 0.5), vec3(.8, 1., .6)), //Savannah\n        Biome(vec2(0, 0.3), vec3(9., .7, .3)) //Desert\n    );\n    \n    float minDist = 9999.0;\n    vec3 closestColor = vec3(0);\n    for (int i = 0; i < biomeList.length(); i += 1) {\n        float d = length(biomeList[i].pos - uv);\n        if (d < minDist) {\n            minDist = d;\n            closestColor = biomeList[i].color;\n        }\n    }\n    \n    //Check for water\n    if (uv.y + (uv.x * 0.1) < 0.15) {\n        closestColor = vec3(.2, .6, 1.);\n    }\n    \n    fragColor = vec4(closestColor, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}