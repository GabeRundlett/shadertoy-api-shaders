{
    "Shader": {
        "info": {
            "date": "1667575058",
            "description": "something that was found while messing around with symmetry and numbers.\nit is inspired by :\nhttps://www.shadertoy.com/view/NlSyD1\nhttps://www.shadertoy.com/view/7tfBW8\nin my case, the sdf is exact ! but it's less flexible than warping the space.",
            "flags": 0,
            "hasliked": 0,
            "id": "msj3D1",
            "likes": 11,
            "name": "logpolar dots sdf",
            "published": 3,
            "tags": [
                "logpolarsdf"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "#define num 11.\n#define Y   iTime*0.25\n#define v1  1.\n#define v2  1.\n#define v3  1.\n\n#define PI 3.1415926535\n\n//function found here : https://www.shadertoy.com/view/ssByDw\nvec2 foldRotate(vec2 p, float s, float offset) {\n    \n    float t = PI / s;\n    float a = PI * 0.5 + t - atan(p.x, p.y) + offset;\n    a = mod(a, t*2.) - t ;\n    //a = abs(a);\n    \n    return vec2(cos(a), sin(a)) * length(p);\n}\n\nfloat sdDots( in vec2 p ) {\n\n    p = foldRotate(p,num,0.);\n\n    float sa = sin(PI / num)*v1;\n    float n2 = 2./(sa + v3) - 1.; \n    \n    float val = pow(n2, floor( log(p.x) / log(n2) + Y) - Y );\n            \n    float t = length(p-vec2(val,   0.)) - val*sa*v2     ;\n    t = min(t,length(p-vec2(val*n2,0.)) - val*sa*n2*v2 );\n    \n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdDots(p);\n    \n\t// coloring (from IQ's shaders)\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 ) {\n        d = sdDots(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}