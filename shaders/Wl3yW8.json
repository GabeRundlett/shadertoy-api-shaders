{
    "Shader": {
        "info": {
            "date": "1608884842",
            "description": "WIP\nmouse-smear texture by smearing its UV mapping\n( something wrong with normalization )",
            "flags": 48,
            "hasliked": 0,
            "id": "Wl3yW8",
            "likes": 13,
            "name": "smearer",
            "published": 3,
            "tags": [
                "paint",
                "smear",
                "stir"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "// adapted from https://shadertoy.com/view/wsyfRD\n\nvoid mainImage( out vec4 O, vec2 U ) { \n    \n    O = T(U); \n    O /= O.w;                                         // normalize color\n    if (U.x > R.x/2. ) O = texture(iChannel1, O.xy);  // map texture using the painted UV field.\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u / R.y, P,Q,m;\n    vec4 M = iMouse;\n    O = T(u);                                                        // restore previous state\n    if ( iFrame<1 || keyDown(64+3) )                                 // start or 'C': reset\n        O = vec4(u/R,0,1);                                           // canonical UV\n    if ( u == vec2(1.5) ) { O.xy = M.xy; return; }                   // memo prev mouse\n    if ( u == vec2(.5) ) {\n        if ( M.z > 0. )                                              // pick color in paint\n#if 0\n            O.xy = M.xy;\n#else\n            O = T(M.xy), O /= O.w;\n#endif\nreturn;\n    }\n    \n    P = M.w > 0. ? M.xy : T(1).xy;                                   // prev mouse or start stroke \n    m = abs( (M.xy+P)/2. - u ) - abs(M.xy-P)/2.;                     // for bounding box\n    \n    if ( M.z > 0.  && M.xy != P )                                    // paint\n      if ( max(m.x,m.y)< 20. )                                       // optim: bounding box\n        for( float  l = length(M.xy-P), d = 0.; d < l ; d++ )\n#if 0\n        Q = mix( M.xy, P, d/l ),\n        O = mix(O, T(Q+T(0).xy-M.xy), S( length( Q - u ) - 20. )/40. );\n#else\n        O +=  S( length( mix( M.xy, P, d/l ) - u ) - 20. ) / 40. \n         // * T(0); \n            * vec4( ( T(1) - M ).xy/R, 0,0 );                        // from https://www.shadertoy.com/view/3l3yDn\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R               iResolution.xy\n#define T(U)            texelFetch( iChannel0, ivec2(U), 0 )\n#define hue(v)        ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/llySRh\n#define keyToggle(a)  ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n#define keyDown(a)    ( texelFetch(iChannel3,ivec2(a,1),0).x > 0.)\n#define keyClick(a)   ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n#define S(v)            smoothstep( 1.5, 0., v )\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}