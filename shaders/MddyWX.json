{
    "Shader": {
        "info": {
            "date": "1520433491",
            "description": "J - 23 !",
            "flags": 0,
            "hasliked": 0,
            "id": "MddyWX",
            "likes": 41,
            "name": "Confetti canon",
            "published": 3,
            "tags": [
                "raymarching",
                "repeat",
                "cosinepalette"
            ],
            "usePreview": 0,
            "username": "Flopine",
            "viewed": 6227
        },
        "renderpass": [
            {
                "code": "// Code by Flopine\n// Thanks to wsmind and leon for teaching me :)\n\n\n#define PI 3.141592\n#define TAU 2.*PI\n\nmat2 rot (float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a-per/2.,per)-per/2.;\n    return vec2 (cos(a),sin(a))*l;\n}\n\n// iq's palette https://iquilezles.org/articles/palettes\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos(TAU*(c*t+d));\n}\n\n\nfloat sphe (vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    return length(max(abs(p)-c,0.));\n}\n\nfloat prim (vec3 p)\n{\n    float b = box(p, vec3(1.));\n    float s = sphe(p,1.3);\n    return max(-s, b);\n}\n\nfloat row (vec3 p, float per)\n{\n\tp.y = mod(p.y-per/2., per)-per/2.;\n    return prim(p);\n}\n\nfloat squid (vec3 p)\n{\n    p.xz *= rot(PI/2.);\n    p.yz = moda(p.yz, TAU/5.);\n    p.z += sin(p.y+iTime*2.);\n    return row(p,1.5);\n}\n\nfloat SDF(vec3 p)\n{\n    p.xz *= rot (iTime*.8);\n    p.yz *= rot(iTime*0.2);\n    p.xz = moda(p.xz, TAU/12.);\n    return squid(p);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 p = vec3 (0.01,3.,-8.);\n    vec3 dir = normalize(vec3(uv*2.,1.));\n    \n    float shad = 1.;\n    \n    for (int i=0;i<60;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = float(i)/60.;\n            break;\n        }\n        p += d*dir*0.5;\n    }\n    \n    vec3 pal = palette(p.z,\n        \t\t\t\tvec3(0.5),\n                      vec3(0.5),\n                      vec3(.2),\n                      vec3(0.,0.3,0.5)\n                      );\n    // Time varying pixel color\n    vec3 col = vec3(1.-shad)*pal;\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}