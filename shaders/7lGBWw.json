{
    "Shader": {
        "info": {
            "date": "1664615561",
            "description": "neurons sparkling  ",
            "flags": 32,
            "hasliked": 0,
            "id": "7lGBWw",
            "likes": 65,
            "name": "Neural Detonation",
            "published": 3,
            "tags": [
                "abstract",
                "neuron"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1524
        },
        "renderpass": [
            {
                "code": "\n// Neural Detonation\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define repeat(p,r) (mod(p+r/2.,r)-r/2.)\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}\n\nfloat fbm (vec3 seed)\n{\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 3; ++i) {\n        seed += result;\n        result += gyroid(seed/a)*a;\n        a /= 3.;\n    }\n    return result;\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n  p3 += dot(p3, p3.zyx + 31.32);\n  return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// globals\nfloat rng;\nfloat glow;\n\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    // travel\n    p.z -= iTime * .5;\n    vec3 q = p;\n    \n    // repeat\n    float grid = 4.;\n    float id = hash13(floor(p/grid-.5));\n    p = repeat(p,grid);\n    p += (hash31(id*100.)*2.-1.);\n    \n    // spice\n    float noise = fbm(p);\n    \n    // jazz\n    float t = iTime * .2 + rng * .01 + id * 196.;\n    \n    // kaleido\n    float a = 1.;\n    const float count = 5.;\n    for (float i = 0.; i < count; ++i)\n    {\n        // funk\n        float tempo = iTime*.7+i*2.+p.z*.5+q.z*.1;\n    \n        // move\n        float rythm = pow(sin(tempo)*.5+.5, 10.);\n        \n        // rotation\n        p.xz *= rot((rythm*.1+t)/a);\n        p.yx *= rot((rythm*.2+t)/a);\n        \n        // fold\n        float r = (rythm * .5 + .05 + noise*.1)/a;\n        p.xz = abs(p.xz)-r*a;\n        \n        // shape\n        dist = min(dist, length(p.xz));\n        \n        // falloff\n        a /= 1.2 + 0.7 * id;\n    }\n    \n    // shine\n    glow += .0005/dist;\n\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 p = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 ray = normalize(vec3(p, -1.));\n    vec3 pos = vec3(0,0,0) + ray;\n\n    // globals\n    rng = hash13(vec3(fragCoord, iFrame));\n    glow = 0.;\n    \n    // raymarch\n    float total = 0.;\n    float maxDist = 20.;\n    for (float steps = 35.; steps > 0.; --steps)\n    {\n        float dist = map(pos);\n        if (dist < .0001 * total || total > maxDist) break;\n        total += dist;\n        pos += ray * dist;\n    }\n\n    // palette\n    vec3 tint = .5 + .5 * cos(vec3(1,2,3)*5.5 + length(pos) * .2 - .5);\n    \n    fragColor = vec4(tint * glow,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Minimal Temporal Anti Aliasing\n// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) / iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}