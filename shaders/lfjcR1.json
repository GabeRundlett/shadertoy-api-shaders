{
    "Shader": {
        "info": {
            "date": "1722292283",
            "description": "Fluid simulation using gaussian convolutions.\nAdapted from simple detailed fluid by Lomateron.",
            "flags": 32,
            "hasliked": 0,
            "id": "lfjcR1",
            "likes": 8,
            "name": "Waterfall  11",
            "published": 3,
            "tags": [
                "convolution"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 C, in vec2 fragCoord )\n{\n    vec2 u = fragCoord/iResolution.xy;\n    vec4 a = texture(iChannel0,u);\n    C = a.z*(+sin(a.x*4.+vec4(1,3,5,4))*.2\n                     +sin(a.y*4.+vec4(1,3,2,4))*.2+.6);\n    //C = .7*a.z*vec4(1,1.2,2,1);\n    \n    if (g(u)>=1.)C += vec4(.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2 p = u/iResolution.xy;\n    vec4 a = A(u);\n    vec2 v = +a.xy *vd                     //fluid velocity\n             -vec2(0,1)*gf ;                  //gravity\n    //v *= 1.-g(p);\n    vec2 n = normalize(dg(p));\n    if(g(p)>=1.)v = reflect(v,n)*.8;         \n    if(p.x<.02&&v.x<0.)v.x =-v.x;\n    if(p.y<.05&&v.y<0.)v.y =-v.y;      \n    \n    float s = 0.;\n    \n    for(float i=-ks; i<=ks; i++){\n    for(float j=-ks; j<=ks; j++){\n      vec2 c = -v+vec2(i,j);//translate the gaussian 2Dimage using the velocity\n      s += exp(-kf*dot(c,c));  //calculate the gaussian 2Dimage\n    }}\n    if(s!=0.){s = 1./s;}      //avoid division by zero\n    if(p.y<.3&&p.x<.1)s=0.;\n    \n    fragColor = vec4(v,s,0);//velocity in .xy    //convolution normalization in .z\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec4  o = vec4(0);\n    \n    for(float i=-ks; i<=ks; i++){\n    for(float j=-ks; j<=ks; j++){\n      float  a = A(u+vec2(i,j)).z;        //mass\n      vec4  b = B(u+vec2(i,j));           //new velocity in b.xy, normalization of convolution in .z\n      vec2  c = -b.xy-vec2(i,j);          //translate the gaussian 2Dimage\n      float s = a*exp(-kf*dot(c,c))*b.z;//calculate the normalized gaussian 2Dimage multiplied by mass\n      vec2  e = c*(a-af- tf*g(u+vec2(i,j))); //fluid expands or attracts itself depending on mass\n      o.xy += s*(b.xy+e);                 //sum all translated velocities\n      o.z  += s;                          //sum all translated masses\n    }}\n    \n    if(o.z!=0.){o.xy /= o.z;}             //calculate the average velocity \n    float l = length(o.xy);               //clamp velocity to avoid mass leakage\n    if (l>2.)o.xy *=2./l;\n                           \n    if(iMouse.z>0.)                       //mouse click adds velocity\n    {\n        vec2 m = 8.*(u-iMouse.xy)/iResolution.y;\n        o += vec4(m,0,0)*exp(-dot(m,m));\n    }\n    \n    vec2 m = 20.*(u-iResolution.xy*vec2(.1,.9))/iResolution.y;\n        o += vec4(-.01,0.0,.02,1)*exp(-dot(m,m));\n    fragColor = o;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define B(u) texture(iChannel1,(u)/iResolution.xy)\n\n#define ks 4.0   //kernel convolution size\n#define kf .8    //kernel factor\n#define af .7    //attraction force \n#define gf 0.03  //gravity force\n#define vd 1.  //velocity damping\n#define tf 0.   //terrain force \n\n\nfloat g(vec2 p){\n    return max((.7-p.y-.8*p.x-.04*cos(40.*p.x))*40.,0.);\n}\n\nvec2 dg(vec2 u){\n   return vec2( g(u+vec2(1,0))-g(u-vec2(1,0)),g(u+vec2(0,1))-g(u-vec2(0,1))) ;\n   \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}