{
    "Shader": {
        "info": {
            "date": "1463112393",
            "description": "it's blood.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldySzW",
            "likes": 12,
            "name": "Hall of Bloooood",
            "published": 3,
            "tags": [
                "red",
                "blood",
                "bloood",
                "bloooood"
            ],
            "usePreview": 0,
            "username": "VirtuosoChris",
            "viewed": 928
        },
        "renderpass": [
            {
                "code": "const vec3 oceanFloorEmissive = vec3(.1, .02, .02);\n\nconst float PI=3.1415926545;\nconst float oceanWidth=1.0;\n\nfloat intersectPlane(vec3 ray,float height)\n{\n    return height/ray.y;\n}\n\nvec3 cameraRay(vec2 uv)\n{\n\treturn normalize(vec3(uv.xy*2.0-1.0,-1.0)*vec3(iResolution.x/iResolution.y,1.0,1.0));\n}\n\nconst float totalAmplitude = 0.787592;\n\nfloat waveHeight(vec2 xz, float t, vec2 waveDir, float exponent, float wavelength, float amplitude, float speed)\n{\n    \n    float frequency = 2.0 * 3.14159 / wavelength;\n\n    float phaseConstant = speed * frequency;\n\n    float trigParam = dot(waveDir, xz) * frequency + t * phaseConstant;\n  \n    float sineNum = sin(trigParam);\n\n    float sineTerm = pow(.5 * (sineNum + 1.0), exponent);\n\n\treturn sineTerm * amplitude;\n}\n\nvec2 waveGradient(vec2 xz, float t, vec2 waveDir, float exponent, float wavelength, float amplitude, float speed)\n{\n    \n    \n    float frequency = 2.0 * 3.14159 / wavelength;\n\n    float phaseConstant = speed * frequency;\n\n    float trigParam = dot(waveDir, xz) * frequency + t * phaseConstant;\n\n    float cosineTerm = cos(trigParam);\n\n    float sineNum = sin(trigParam);\n\n    float sineTerm = pow(.5 * (sineNum + 1.0), exponent - 1.0);\n\n    float waveFunc = exponent * frequency * amplitude * sineTerm * cosineTerm;\n\n    vec2 derivs = waveDir * waveFunc;\n\n    return derivs;\n}\n\n\nvec2 totalGradient(vec2 tc, float time)\n{\n    return waveGradient (tc, time, vec2(0.124943, 0.992164), 1.0, 1.88928, 0.141696, 1.71661)\n\t+waveGradient (tc, time, vec2(0.887061, 0.461651), 1.0, 1.84052, 0.138039, 1.69431)\n\t+waveGradient (tc, time, vec2(-0.0974991, 0.995236), 1.0, 0.988473, 0.0741355, 1.24167)\n\t+waveGradient (tc, time, vec2(0.843671, 0.53686), 1.0, 0.879293, 0.065947, 1.17109)\n\t+waveGradient (tc, time, vec2(0.159448, 0.987206), 1.0, 0.877588, 0.0658191, 1.16995)\n\t+waveGradient (tc, time, vec2(0.552634, 0.833424),1.0, 0.428791, 0.0321593, 0.817798)\n\t+waveGradient (tc, time, vec2(0.624894, 0.78071), 1.0, 0.399053, 0.029929, 0.788931)\n    +waveGradient (tc, time, vec2(0.872831, 0.488022), 1.0, 0.394675, 0.0296006, 0.78459)\n    +waveGradient (tc, time, vec2(0.926811, 0.375527), 1.0, 0.393116, 0.0294837, 0.783039)\n    +waveGradient (tc, time, vec2(0.139784, 0.990182), 1.0, 0.377771, 0.0283328, 0.767605)\n    +waveGradient (tc, time, vec2(0.370184, 0.928958), 1.0, 0.363149, 0.0272362, 0.752603)\n    +waveGradient (tc, time, vec2(0.58627, 0.810116),1.0, 0.362489, 0.0271867, 0.751918)\n    +waveGradient (tc, time, vec2(0.976126, -0.217206),1.0, 0.336881, 0.025266, 0.724872)\n    +waveGradient (tc, time, vec2(0.780811, 0.624767), 1.0, 0.327074, 0.0245305, 0.714243)\n    +waveGradient (tc, time, vec2(0.0217235, 0.999764), 1.0, 0.322161, 0.0241621, 0.708859)\n    +waveGradient (tc, time, vec2(0.733764, 0.679405), 1.0, 0.320912, 0.0240684, 0.707484);\n}\n\nfloat totalWaveHeight(vec2 tc, float time)\n{\n\treturn waveHeight (tc, time, vec2(0.124943, 0.992164), 1.0, 1.88928, 0.141696, 1.71661)\n\t+waveHeight (tc, time, vec2(0.887061, 0.461651), 1.0, 1.84052, 0.138039, 1.69431)\n\t+waveHeight (tc, time, vec2(-0.0974991, 0.995236), 1.0, 0.988473, 0.0741355, 1.24167)\n\t+waveHeight (tc, time, vec2(0.843671, 0.53686), 1.0, 0.879293, 0.065947, 1.17109)\n\t+waveHeight (tc, time, vec2(0.159448, 0.987206), 1.0, 0.877588, 0.0658191, 1.16995)\n\t+waveHeight (tc, time, vec2(0.552634, 0.833424),1.0, 0.428791, 0.0321593, 0.817798)\n\t+waveHeight (tc, time, vec2(0.624894, 0.78071), 1.0, 0.399053, 0.029929, 0.788931)\n    +waveHeight (tc, time, vec2(0.872831, 0.488022), 1.0, 0.394675, 0.0296006, 0.78459)\n    +waveHeight (tc, time, vec2(0.926811, 0.375527), 1.0, 0.393116, 0.0294837, 0.783039)\n    +waveHeight (tc, time, vec2(0.139784, 0.990182), 1.0, 0.377771, 0.0283328, 0.767605)\n    +waveHeight (tc, time, vec2(0.370184, 0.928958), 1.0, 0.363149, 0.0272362, 0.752603)\n    +waveHeight (tc, time, vec2(0.58627, 0.810116),1.0, 0.362489, 0.0271867, 0.751918)\n    +waveHeight (tc, time, vec2(0.976126, -0.217206),1.0, 0.336881, 0.025266, 0.724872)\n    +waveHeight (tc, time, vec2(0.780811, 0.624767), 1.0, 0.327074, 0.0245305, 0.714243)\n    +waveHeight (tc, time, vec2(0.0217235, 0.999764), 1.0, 0.322161, 0.0241621, 0.708859)\n    +waveHeight (tc, time, vec2(0.733764, 0.679405), 1.0, 0.320912, 0.0240684, 0.707484);\n\n}\n\nvec2 gradient(vec3 pos)\n{\n\treturn totalGradient(pos.xz,iTime)*.01;\n}\n\nfloat height(vec3 pos)\n{\n    return totalWaveHeight(pos.xz,iTime)*.01;\n}\n\nfloat binsearch(float tbottom,float ttop,vec3 a,vec3 b)\n{\n    float t=0.0;\n    for(int i=0;i<16;i++)\n    {\n        t=(tbottom+ttop)*0.5;\n        \n        if((height(a+b*t)-a.y)/b.y > (1.0-t))\n        {\n        \tttop=t;   \n        }\n        else\n        {\n        \ttbottom=t;   \n        }\n    }\n    return t;\n}\n\nvec3 reflectedRay(vec3 ray,float cameraHeight, out vec3 normal)\n{\n    float tTop=intersectPlane(ray,-cameraHeight+oceanWidth);\n    float tBottom=intersectPlane(ray,-cameraHeight);\n    vec3 oceanTopIntersect=ray*tTop+vec3(0.0,cameraHeight,0.0);\n\tvec3 oceanBottomIntersect=ray*tBottom+vec3(0.0,cameraHeight,0.0);\n    \n\tvec3 a=oceanTopIntersect;\n    vec3 b=oceanBottomIntersect-oceanTopIntersect;\n    \n   \n    \n    float t=0.0;\n    float mint=0.0;\n    const int numiters=16;\n    vec3 pos;\n    for(int i=0;i<numiters;i++)\n    {\n        t=float(i)/float(numiters);\n        pos=a+b*t;\n\t\tfloat to=(height(pos)-a.y)/b.y;\n        to=abs(to);\n        if((1.0-to) < t)\n        {\n           break;   \n        }\n    }\n    \n  \n    \n    t=binsearch(t-1.0/float(numiters),t,a,b);\n    pos=a+b*t;\n    vec3 n=vec3(-gradient(pos),1.0);\n    \n    n = n.xzy;\n    \n    n=normalize(n);\n    \n    normal = n;\n    \n    //y.y=-ray.y;\n   //ay.x=-ray.x;\n    ray=reflect(ray,n);\n   \n    return ray;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 ray=cameraRay(uv);\n    \n    float cameraHeight=2.;\n    float t=intersectPlane(ray,-cameraHeight-oceanWidth);\n\n   \n    if(t > 0.0)\n    {\n    \n    \n        vec3 normal;\n     \n        vec3 ray = normalize(reflectedRay(ray,cameraHeight, normal));\n        \n        ray.y=-ray.y;\n        \n        normal = normalize(normal);\n        ray = normalize(ray);\n        \n        vec3  colorTex = 2.0*texture(iChannel0,ray).rgb;\t\t\n        \n        const vec3 specularColor = vec3(1, .02, .02); \n        \n    \tfloat interp =  pow(1.0 - clamp(dot(-ray, normal),0.0,1.0),3.5);\n    \tvec3 reflectance = specularColor + (vec3(1.0) - specularColor)*interp;\n    \n    \t/// output color in linear space\n    \tvec3 linearColor = mix( oceanFloorEmissive, reflectance*colorTex, interp);\n        fragColor = vec4(linearColor, 1.0);\n        \n    }\n    else\n    {\n        ray.y=-ray.y;\n     \tfragColor = 2.0*vec4(texture(iChannel0,ray).rgb,1.0);   \n    }\n    \n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}