{
    "Shader": {
        "info": {
            "date": "1612821129",
            "description": "Getting some serious mileage out of a 4D box. Press space to toggle rounding.",
            "flags": 16,
            "hasliked": 0,
            "id": "wtdBWN",
            "likes": 8,
            "name": "Formful",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "4d"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "// Formful by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat box(in vec4 p, in vec4 b)\n{\n  vec4 d = abs(p) - b;\n  return length(max(d, 0.)) + min(max(d.x, max(d.y, max(d.z, d.w))), 0.);\n}\n\nfloat scene(in vec3 p)\n{\n    vec4 q = vec4(p, sin(dot(p.xz * 3., -p.yz) * .125 + iTime * .25) * .4);\n    q -= vec4(0,0,4,0);\n    float t = iTime * .03125;\n    q.xw *= rot(t);\n    q.yw *= rot(t*7.+q.w*.9);\n    q.zw *= rot(t*13.-q.w*.5);\n    q.xz *= rot(t*11.+q.y*.7);\n    \n    float r = texelFetch( iChannel0, ivec2(32,2), 0 ).x > 0.5 ? .003 : .06;\n    return box(q, vec4(2.5,2,1.5,.5)) * .15 - r;\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat d = scene(p);\n    vec2 e = vec2(.002, .0);\n    return normalize(d - vec3(\n        scene(p - e.xyy),\n        scene(p - e.yxy),\n        scene(p - e.yyx)));\n}\n\nvec3 dither(vec2 p)\n{\n    float r = dot(vec3(p,float(iFrame % 60)), vec3(7., 11., 9.) / 13.);\n    return fract(vec3(r, r + .3334, r + .6667)) * 2. - 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n    vec3 ro = vec3(uv * .025, 0.);\n    vec3 rd = normalize(vec3(uv, .5));\n    float t = 1.4;\n    vec3 p;\n    float i = 0.;\n    \n    for(; i < 1. && t < 10.; i += 1./256.)\n    {\n        p = ro + rd * t;\n        float d = scene(p);\n        t += d;\n        if (abs(d) < .0025) break;\n    }\n\n    vec3 col = vec3(0);\n    if (t >= 10.)\n    {\n        col = vec3(.15 + uv.y * -.15, .35, .6) + smoothstep(.1, .8, i);\n    }\n    else\n    {\n        vec3 n = normal(p);\n        vec3 r = reflect(rd, n);\n        float refl = smoothstep(.8, .4, length(sin(r * 2.+ 2.)));   \n        float l = n.y * .4 + .7;\n        vec3 ao = mix(vec3(1), vec3(.3, .6, 1.) * .3, i * .8);\n        col = vec3(pow(refl,8.) * 2. + pow(l, 3.) * 4. * ao * mix(vec3(.35, .8, 0.), vec3(1., 1., .8), pow(l,9.) * .4));\n    }\n     \n    col = col * (1. + col / 20.) / (1. + col);\n    col = pow(col, vec3(1. / 2.2));\n\n    fragColor = vec4(col.rgb + dither(fragCoord) / 255., 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}