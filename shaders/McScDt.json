{
    "Shader": {
        "info": {
            "date": "1723141659",
            "description": "combination of  https://www.shadertoy.com/view/ssV3zR https://www.shadertoy.com/view/XlfGRj",
            "flags": 0,
            "hasliked": 0,
            "id": "McScDt",
            "likes": 8,
            "name": "create universe",
            "published": 3,
            "tags": [
                "fractal",
                "cosmos",
                "cineshaderuniverse"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n\n\t\n\n\tmat2 rot1=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));\n\t\n\n\tvec3 from=vec3(1.,.5,0.5);\n\tfrom+=vec3(time*2.,time,-2.);\n\tvec4 O=fragColor;\n    vec2 C =fragCoord ;\n    O=vec4(0);\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    for(float i=0.,s,e,g=0.;\n        ++i<99.;\n        e<.023?O.rgb+=mix(vec3(1),H(log(s)*.1+iTime*.05),.36)*.017*exp(-.005*i*i*e):r\n    )\n    {\n        p=g*d;\n        p.z-=.45;\n        p=R(p,normalize(vec3(3,2,3)),iTime);\n        s=1.;\n        vec4 q=vec4(p,.2*iTime);\n        for(int i;i++<6;q*=e)\n            q=sin(q+.01),\n            s*=e=3./dot(q,q);\n        g+=e=length(q)/s;\n    }\n    O*=O*O*O*O;\n\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=rot1;// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03*O.xyz,1.);\t\n\t\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}