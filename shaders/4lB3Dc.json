{
    "Shader": {
        "info": {
            "date": "1432938792",
            "description": "Simulates a VHS being paused.\n\nSome of the textures are upside-down for some reason, so you might need to comment out line 22 if it looks wrong.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lB3Dc",
            "likes": 66,
            "name": "VHS pause effect",
            "published": 3,
            "tags": [
                "2d",
                "vhs"
            ],
            "usePreview": 1,
            "username": "caaaaaaarter",
            "viewed": 8174
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 texColor = vec4(0);\n    // get position to sample\n    vec2 samplePosition = fragCoord.xy / iResolution.xy;\n    float whiteNoise = 9999.0;\n    \n \t// Jitter each line left and right\n    samplePosition.x = samplePosition.x+(rand(vec2(iTime,fragCoord.y))-0.5)/64.0;\n    // Jitter the whole picture up and down\n    samplePosition.y = samplePosition.y+(rand(vec2(iTime))-0.5)/32.0;\n    // Slightly add color noise to each line\n    texColor = texColor + (vec4(-0.5)+vec4(rand(vec2(fragCoord.y,iTime)),rand(vec2(fragCoord.y,iTime+1.0)),rand(vec2(fragCoord.y,iTime+2.0)),0))*0.1;\n   \n    // Either sample the texture, or just make the pixel white (to get the staticy-bit at the bottom)\n    whiteNoise = rand(vec2(floor(samplePosition.y*80.0),floor(samplePosition.x*50.0))+vec2(iTime,0));\n    if (whiteNoise > 11.5-30.0*samplePosition.y || whiteNoise < 1.5-5.0*samplePosition.y) {\n        // Sample the texture.\n    \tsamplePosition.y = 1.0-samplePosition.y; //Fix for upside-down texture\n    \ttexColor = texColor + texture(iChannel0,samplePosition);\n    } else {\n        // Use white. (I'm adding here so the color noise still applies)\n        texColor = vec4(1);\n    }\n\tfragColor = texColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}