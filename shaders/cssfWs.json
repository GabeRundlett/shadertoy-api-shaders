{
    "Shader": {
        "info": {
            "date": "1689297605",
            "description": "A simple 2D visualization of how ray marching works. The ray \"marches\" along the direction from the mouse position to the target point.",
            "flags": 0,
            "hasliked": 0,
            "id": "cssfWs",
            "likes": 7,
            "name": "2D Ray Marching Demo",
            "published": 3,
            "tags": [
                "2d",
                "raymarching",
                "sdf",
                "tutorial",
                "demo",
                "comments"
            ],
            "usePreview": 0,
            "username": "tristanantonsen",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100. \n#define SURF_DIST 0.01\n\nfloat sdCircle(vec2 p, vec2 c, float r) {\n    return length(p-c) - r;\n}\n\n\n// SDFs and operations from iq:\n// https://iquilezles.org/articles/distfunctions2d/\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n\nfloat opUnion(float d1, float d2 ) { return min(d1,d2); }\n\n\n// Scene SDF\nfloat map(vec2 p) {\n    float d = sdCircle(p, vec2(-0.35, 0.5*sin(0.2*iTime)), 0.25);\n    d = abs(d)-0.05;\n    d = opUnion(d, sdCircle(p, vec2(0.15,0.5*cos(0.1*iTime)), 0.125));\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates\n    vec2 uv = (fragCoord - 0.5*iResolution .xy)/iResolution.y;\n    // Mouse\n    vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y / 2.0;  \n\n    // Scene distance\n    float d = map(uv) * 255.;\n    \n    // Ripple frequency\n    float f = 1.;\n    \n    vec3 ripples = mix(vec3(1.), vec3(0.9), smoothstep(0., 1., sin(f*d)*0.5+0.5));\n    \n    // Mixing ripples with (black) SDF\n    vec3 col = mix(vec3(0.), ripples, smoothstep(0., 1., d));\n    \n    // Ray marching:\n    \n    // Ray origin\n    vec2 ro = m;\n    \n    // Ray direction\n    vec2 target = vec2(-0.8, 0.);\n    vec2 rd = normalize(target - ro);\n\n    float t = 0.0; // tracks total distance traveled from origin to target\n    float circles = 1.; // visualization\n    \n    // Ray marching\n    for (int i = 0; i < MAX_STEPS; i++) {\n        if (i >= MAX_STEPS ) break;\n        vec2 p = ro + rd * t; // move point to new evaluation step\n        float ts = map(p); // current SDF value @ p\n        t += ts; // add to total distance traveled\n        \n        // circles for visualization\n        circles = opUnion(circles, abs(sdCircle(uv, p, ts)+0.0001));\n        \n        if (t >= MAX_DIST || ts < SURF_DIST) break; // \"hit\"\n        i++;\n    }\n    \n    // Visuals\n    circles = smoothstep(1., 0., 255. * (circles));\n    \n    float line = udSegment(uv, m, target);\n    line = opUnion(line, sdCircle(uv, ro, 0.01));\n    line = opUnion(line, sdCircle(uv, target, 0.01));\n    line = smoothstep(1., 0., 255. *(line));\n    \n    vec3 fin = mix(col, vec3(0.4,0.7,0.5), circles);\n    fin = mix(fin, vec3(0.2,0.4,0.7), line);\n    \n    fragColor = vec4(fin, 1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}