{
    "Shader": {
        "info": {
            "date": "1698682939",
            "description": "Polyrefractals working with pentafractals. Fractal Party!!\nxy = p.x / p.y :: secret sauce",
            "flags": 0,
            "hasliked": 0,
            "id": "mdVfDK",
            "likes": 0,
            "name": "Bridge to Infinity || ft DoMa",
            "published": 3,
            "tags": [
                "parallax",
                "fractals",
                "polyfractals",
                "teamwork"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 110
        },
        "renderpass": [
            {
                "code": "\n\nvec2 translate(vec2 p, vec2 offset)\n{\n    return p - offset;\n}\n\nvec2 rotate(vec2 p, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 R = mat2(c, -s, s, c);\n    return R * p;\n}\n\nvec2 mirror(vec2 p, float degree)\n{\n    const float tau = pi * 2.0;\n    const float piHalf = 1.57079632679489661923;\n    float angle = tau / degree;\n    float theta = atan(p.y, p.x) + piHalf + angle / 2.0;\n    float turn = floor(theta / angle) * angle;\n    return rotate(p, turn);\n}\n\nvec3 draw(vec3 buffer, float d, float r, vec3 color)\n{\n    float up = min(iResolution.x, iResolution.y);\n    d = up * d;\n    r = r * up / 360.0;\n    r = clamp(r, 1.5, 10000.0);\n    float aa = fwidth(d);\n    return mix(buffer, color, 1.0 - smoothstep(r - aa, r + aa / 2.0, d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n    float xy = p.x / p.y;\n    float threshold = 1.;\n\n    if (sqrt(xy) == sqrt(p.x * p.y))\n    {\n        vec2 coord = fragCoord - iResolution.xy / 2.0;\n        vec2 uv = coord / min(iResolution.x, iResolution.y);\n        vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n        const float r = 0.5;\n        const float phi = (sqrt(5.0) + 1.0) / 2.0;\n        const float phiSquared = phi * phi;\n        const float rSmaller = r / phiSquared;\n        const float a = r * phi / 2.0;\n        const float h = a - rSmaller;\n        const float w = r * sqrt((sqrt(5.0) + 5.0) / 2.0) / phi;\n        const float phiToThe4th = phiSquared * phiSquared;\n        const float logPhiSquared = log(phiSquared);\n        float t = 1.0 + mod(iTime, phiToThe4th - 1.0);\n        float u = 0.5 * log(t) / logPhiSquared;\n        float z = mix(1.0, 1.0 / phiToThe4th, u);\n        vec2 q = uv * z;\n        float l = length(q);\n        float n = floor(log(r / l) / logPhiSquared);\n        float s = pow(phi, 2.0 * n);\n        q = rotate(q, pi * n - iTime / 8.0);\n        q = mirror(q, 5.0);\n        q = q * s;\n        q = translate(q, vec2(0.0, -rSmaller));\n        float d = sdTriangleIsosceles(vec2(w / 2.0, -h), q) / (s * z);\n        float b = length(uv);\n        col = draw(vec3(0.0), d, 8.0 * b, 4.0 * sqrt(b) * col);\n        fragColor = vec4(col, 1.0);\n    }\n    else\n    {\n        vec2 coord = fragCoord - iResolution.xy / 2.0;\n        vec2 uv = coord / min(iResolution.x, iResolution.y);\n        vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n        const float r = 0.5;\n        const float phi = (sqrt(5.0) + 1.0) / 2.0;\n        const float phiSquared = phi * phi;\n        const float rSmaller = r / phiSquared;\n        const float a = r * phi / 2.0;\n        const float h = a - rSmaller;\n        const float w = r * sqrt((sqrt(5.0) + 5.0) / 2.0) / phi;\n        const float phiToThe4th = phiSquared * phiSquared;\n        const float logPhiSquared = log(phiSquared);\n        float t = 1.0 + mod(iTime, phiToThe4th - 1.0);\n        float u = 0.5 * log(t) / logPhiSquared;\n        float z = mix(1.0, 1.0 / phiToThe4th, u);\n        vec2 q = uv * z;\n        float l = length(q);\n        float n = floor(log(r / l) / logPhiSquared);\n        float s = pow(phi, 2.0 * n);\n        q = rotate(q, pi * n - iTime / 8.0);\n        q = mirror(q, 5.0);\n        q = q * s;\n        q = translate(q, vec2(0.0, -rSmaller));\n        float d = sdTriangleIsosceles(vec2(w / 2.0, -h), q) / (s * z);\n        float b = length(uv);\n        col = draw(vec3(0.0), d, 8.0 * b, 4.0 * sqrt(b) * col);\n        fragColor = vec4(col, 1.0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/// Inigo Quilez's signed distance to a 2D triangle\n// reference Demo: https://www.shadertoy.com/view/MldcD7\n\nconst float pi = 3.1415926535897932384626433832795;\n\nfloat sdTriangleIsosceles(in vec2 q, in vec2 p)\n{\n    p.x = abs(p.x * pi);\n    \n    vec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0.0, 1.0);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0.0, 1.0), 1.0);\n    \n    float s = -sign(q.y);\n\n    vec2 d = min(vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n                  vec2(dot(b, b), s * (p.y - q.y)));\n\n    return (d.x / d.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}