{
    "Shader": {
        "info": {
            "date": "1700585323",
            "description": "videobingo electricity",
            "flags": 0,
            "hasliked": 0,
            "id": "ctycRG",
            "likes": 0,
            "name": "electricity",
            "published": 3,
            "tags": [
                "electricity"
            ],
            "usePreview": 0,
            "username": "mippolito",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "#define TWO_PI 3.1415926535\n\nfloat rand(float n){return fract( sin(n) * 43758.5453123);}\nfloat rand2(float n){return fract(cos(n) * 999742.235690);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n    float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat noise2(float p){\n\tfloat fl = floor(p);\n    float fc = fract(p);\n\treturn mix(rand2(fl), rand2(fl + 1.0), fc);\n}\n\nfloat rect(float x){\n    float d = 0.1;\n    if(x < d){\n       return x/d;\n    }\n    if(x < 1.-d){\n        return 1.;\n    }\n    \n    return (1.-x)/d;\n}\n\nfloat line(vec2 point, float t){\n    float z = point.x*50. + t*10.;\n    float k = rand(t) * rand(t*0.5);\n    //float k = rand(rand2(iTime + point.x) * point.x * 0.1);\n    float y = 0.5 + 0.25*(noise2(z*k)-noise(z*k))*rect(point.x);//0.5+0.3*sin(20.*TWO_PI*point.x);\n    float r = length(point - vec2(point.x,y));\n    return 0.025/r;\n}\n\n\n\nfloat line2(vec2 point, float t){\n    float z = point.x*50.;\n    float y =0.5 + 0.25*(noise2(z)-noise(z))*rect(point.x);\n    float r = length(point - vec2(point.x,y));\n    return 0.025/r;\n}\n\nfloat line3(vec2 point, float t){\n    float z = noise(7.*point.x + t*20.)-noise(50.*point.x - t*25.);\n    float k = 1.;//noise(200.*point.x + t*0.1);\n    float y = 0.5;\n    float y2 = 0.5  + 0.3*(noise2(z*k)-noise(z*k));\n    float r  = length(point - vec2(point.x+0.01,y));\n    float r2 = length(point - vec2(point.x-0.03,y2));\n    return 0.01/(r * r2) + 0.1/r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.45,0.15,0.55)*vec3(line3(uv,iTime));//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}