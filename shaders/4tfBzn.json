{
    "Shader": {
        "info": {
            "date": "1515100331",
            "description": "Sample comparing different cloth BRFS's\nPick shading mode, move roughness slider and rotate object with mouse\nMore info: https://knarkowicz.wordpress.com/2018/01/04/cloth-shading/",
            "flags": 32,
            "hasliked": 0,
            "id": "4tfBzn",
            "likes": 63,
            "name": "Cloth Shading",
            "published": 3,
            "tags": [
                "shading",
                "brdf",
                "pbr",
                "gui",
                "cloth"
            ],
            "usePreview": 1,
            "username": "knarkowicz",
            "viewed": 7949
        },
        "renderpass": [
            {
                "code": "const float PI = float(3.14159);\n    \nstruct AppState\n{\n    float\tmenuId;\n    float   roughness;\n    float   focus;\n    vec2    focusObjRot;\n    vec2    objRot;\n};\n\nvec4 LoadValue(int x, int y)\n{\n    return texelFetch(iChannel0, ivec2(x, y), 0);\n}\n\nvoid LoadState(out AppState s)\n{\n    vec4 data;\n\n    data = LoadValue(0, 0);\n    s.menuId    = data.x;\n    s.roughness = data.y;\n    s.focus     = data.z;\n    \n    data = LoadValue(1, 0);\n    s.focusObjRot  \t= data.xy;\n    s.objRot    \t= data.zw;\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0., 1.);\n}\n\nvec3 saturate(vec3 x)\n{\n    return clamp(x, vec3(0.), vec3(1.));\n}\n\nfloat Smooth(float x)\n{\n\treturn smoothstep(0., 1., saturate(x));   \n}\n\nfloat Circle(vec2 p, float r)\n{\n    return (length(p / r) - 1.) * r;\n}\n\nvoid Rotate(inout vec2 p, float a) \n{\n    p = cos(a) * p + sin(a) * vec2(p.y, -p.x);\n}\n\nfloat Capsule(vec2 p, float r, float c) \n{\n\treturn mix(length(p.x) - r, length(vec2(p.x, abs(p.y) - c)) - r, step(c, abs(p.y)));\n}\n\nfloat TextSDF(vec2 p, float glyph)\n{\n    p = abs(p.x - .5) > .5 || abs(p.y - .5) > .5 ? vec2(0.) : p;\n    return 2. * (texture(iChannel3, p / 16. + fract(vec2(glyph, 15. - floor(glyph / 16.)) / 16.)).w - 127. / 255.);\n}\n\nvec3 FresnelTerm(vec3 specularColor, float vdoth)\n{\n\tvec3 fresnel = specularColor + (1. - specularColor) * pow((1. - vdoth), 5.);\n\treturn fresnel;\n}\n\nfloat RoundBox(vec3 p, vec3 b, float r)\n{\n\treturn length(max(abs(p) - b, 0.0)) - r;\n}\n\nfloat Sphere(vec3 p, float s)\n{\n\treturn length(p) - s;\n}\n\nfloat UnionRound(float a, float b, float k)\n{\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat Displace(float scale, float ampl, vec3 p)\n{\n    p *= ampl;\n\treturn scale * sin(p.x) * sin(p.y) * sin(p.z);\n}\n\nfloat Scene(vec3 p, mat3 localToWorld)\n{  \n    p = p * localToWorld;\n    \n    float ret = Sphere(p, 1.2);\n    //ret = RoundBox(p, vec3(1.0, 1.0, 0.3), 0.1);\n    ret += Displace(0.05, 7.0, p);\n    \n\treturn ret;\n}\n\nfloat CastRay(in vec3 ro, in vec3 rd, mat3 localToWorld)\n{\n    const float maxd = 5.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n   \n    for (int i = 0; i < 50; ++i)\n    {\n        if (h < 0.001 || t > maxd) \n        {\n            break;\n        }\n        \n\t    h = Scene(ro + rd * t, localToWorld);\n        t += h;\n    }\n\n    if (t > maxd)\n    {\n        t = -1.0;\n    }\n\t\n    return t;\n}\n\nvec3 SceneNormal(in vec3 pos, mat3 localToWorld)\n{\n\tvec3 eps = vec3(0.001, 0.0, 0.0);\n\tvec3 nor = vec3(\n\t    Scene(pos + eps.xyy, localToWorld) - Scene(pos - eps.xyy, localToWorld),\n\t    Scene(pos + eps.yxy, localToWorld) - Scene(pos - eps.yxy, localToWorld),\n\t    Scene(pos + eps.yyx, localToWorld) - Scene(pos - eps.yyx, localToWorld));\n\treturn normalize(nor);\n}\n\nfloat AshikhminD(float roughness, float ndoth)\n{\n\tfloat r2    = roughness * roughness;\n\tfloat cos2h = ndoth * ndoth;\n\tfloat sin2h = 1. - cos2h;\n\tfloat sin4h = sin2h * sin2h;\n\treturn (sin4h + 4. * exp(-cos2h / (sin2h * r2))) / (PI * (1. + 4. * r2) * sin4h);\n}\n\nfloat AshikhminV(float ndotv, float ndotl)\n{\n\treturn 1. / (4. * (ndotl + ndotv - ndotl * ndotv));\n}\n\nfloat CharlieD(float roughness, float ndoth)\n{\n    float rcpR  = 1. / roughness;\n    float cos2h = ndoth * ndoth;\n    float sin2h = 1. - cos2h;\n    return (2. + rcpR) * pow(sin2h, rcpR * .5) / (2. * PI);\n}\n\nfloat L(float x, float r)\n{\n\tr = saturate(r);\n\tr = 1.0 - (1. - r) * (1. - r);\n\n\tfloat a = mix( 25.3245,  21.5473, r);\n\tfloat b = mix( 3.32435,  3.82987, r);\n\tfloat c = mix( 0.16801,  0.19823, r);\n\tfloat d = mix(-1.27393, -1.97760, r);\n\tfloat e = mix(-4.85967, -4.32054, r);\n\n\treturn a / (1. + b * pow(x, c)) + d * x + e;\n}\n\nfloat CharlieV(float roughness, float ndotv, float ndotl)\n{\n\tfloat visV = ndotv < .5 ? exp(L(ndotv, roughness)) : exp(2. * L(.5, roughness) - L(1. - ndotv, roughness));\n\tfloat visL = ndotl < .5 ? exp(L(ndotl, roughness)) : exp(2. * L(.5, roughness) - L(1. - ndotl, roughness));\n\n\treturn 1. / ((1. + visV + visL) * (4. * ndotv * ndotl));\n}\n\nvoid DrawScene(inout vec3 color, vec2 p, in AppState s)\n{\n    vec3 lightColor    = vec3(1.);\n    vec3 lightDir      = normalize(vec3(-0.3, 0.5, 1.));\n\tvec3 baseColor     = 0.25 * pow(vec3(0.87, 0.53, 0.66), vec3(2.2));\n    vec3 diffuseColor  = 0.25 * baseColor;\n    vec3 specularColor = sqrt(baseColor);\n    float roughness    = max(.001, s.roughness);  \n    \n    p -= vec2(0., 10.);\n    p *= .011;\n    \n    float yaw = 2.7 - s.objRot.x;\n    mat3 rotZ = mat3(\n        vec3(cos(yaw), 0.0, -sin(yaw)),\n\t\tvec3(0.0, 1.0, 0.0),        \n        vec3(sin(yaw), 0.0, cos(yaw))\n       );\n    \n    float phi = -0.1 + s.objRot.y;\n    mat3 rotY = mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(phi), sin(phi)),\n        vec3(0.0, -sin(phi), cos(phi))\n       );\n    \n    mat3 localToWorld = rotY * rotZ;  \n    \n    lightDir = localToWorld * lightDir;\n    \n\tvec3 rayOrigin \t= vec3(0.0, .3, -3.5);\n    vec3 rayDir \t= normalize(vec3(p.x, p.y, 2.0));    \n\tfloat t = CastRay(rayOrigin, rayDir, localToWorld);\n    if (t > 0.0)\n    {\n        vec3 pos = rayOrigin + t * rayDir;\n        vec3 normal = SceneNormal(pos, localToWorld);        \n        vec3 viewDir = -rayDir;\n        vec3 refl = reflect(rayDir, normal);\n\n        vec3 halfVec = normalize(viewDir + lightDir);\n        float vdoth = saturate(dot(viewDir, halfVec));\n        float ndoth\t= saturate(dot(normal, halfVec));\n        float ndotv = saturate(dot(normal, viewDir));\n        float ndotl = saturate(dot(normal, lightDir));\n        \n\n\t\tvec3 diffuse = lightColor * diffuseColor * saturate(dot(normal, lightDir));\n        \n        vec3 f = FresnelTerm(specularColor, vdoth);\n\n        float d = AshikhminD(roughness, ndoth);\n        float v = AshikhminV(ndotv, ndotl);\n        \n\t\tif (s.menuId == 1.)\n        {\n            d = CharlieD(roughness, ndoth);\n        \tv = AshikhminV(ndotv, ndotl);\n        }\n        else if (s.menuId == 2.)\n        {\n            d = CharlieD(roughness, ndoth);\n        \tv = CharlieV(roughness, ndotv, ndotl);\n        }        \n        \n        vec3 specular = lightColor * f * (d * v * PI * ndotl);\n        \n        color = diffuse + specular;\n        color = pow(color, vec3(1. / 2.2));\n    }\n    else\n    {\n        // shadow\n        float planeT = -(rayOrigin.y + 1.2) / rayDir.y;\n        if (planeT > 0.0)\n        {\n            vec3 p = rayOrigin + planeT * rayDir;\n            \n            float radius = .7;\n            color *= 0.7 + 0.3 * smoothstep(0.0, 1.0, saturate(length(p + vec3(0.0, 1.0, -0.5)) - radius));\n        }\t\t\n    }\n}\n\nvoid MenuText(inout vec3 color, vec2 p, in AppState s)\n{\n    p -= vec2(-160, 62);\n    \n    vec2 scale = vec2(4., 8.);\n    vec2 t = floor(p / scale);   \n    \n    uint v = 0u;\n\tv = t.y == 2. ? (t.x < 4. ? 1768452929u : (t.x < 8. ? 1768777835u : (t.x < 12. ? 5653614u : 0u))) : v;\n\tv = t.y == 1. ? (t.x < 4. ? 1918986307u : (t.x < 8. ? 1147496812u : (t.x < 12. ? 1752383839u : (t.x < 16. ? 1835559785u : 5664361u)))) : v;\n\tv = t.y == 0. ? (t.x < 4. ? 1918986307u : (t.x < 8. ? 1147496812u : (t.x < 12. ? 86u : 0u))) : v;\n\tv = t.x >= 0. && t.x < 20. ? v : 0u;\n    \n\tfloat c = float((v >> uint(8. * t.x)) & 255u);\n    \n    vec3 textColor = vec3(.3);\n    if (t.y == 2. - s.menuId)\n    {\n        textColor = vec3(0.74, 0.5, 0.12);\n\t}\n\n    p = (p - t * scale) / scale;\n    p.x = (p.x - .5) * .5 + .5;\n    float sdf = TextSDF(p, c);\n    if (c != 0.)\n    {\n    \tcolor = mix(textColor, color, smoothstep(-.05, +.05, sdf));\n    }\n}\n\nvoid SliderText(inout vec3 color, vec2 p, in AppState s)\n{\n    p -= vec2(67, 76);\n    \n    vec2 scale = vec2(4., 8.);\n    vec2 t = floor(p / scale);   \n    \n    uint v = 0u;\n\tv = t.y == 0. ? (t.x < 4. ? 1735749458u : (t.x < 8. ? 1936027240u : 14963u)) : v;\n\tv = t.x >= 0. && t.x < 12. ? v : 0u;\n    \n\tfloat c = float((v >> uint(8. * t.x)) & 255u);\n    \n    vec3 textColor = vec3(.3);\n\n    p = (p - t * scale) / scale;\n    p.x = (p.x - .5) * .5 + .5;\n    float sdf = TextSDF(p, c);\n    if (c != 0.)\n    {\n    \tcolor = mix(textColor, color, smoothstep(-.05, +.05, sdf));\n    } \n}\n\nvoid DrawRadial(inout vec3 color, vec2 p, in AppState s)\n{\n    p -= vec2(-164, 73);\n    \n\t// radial\n    float c2 = Capsule(p - vec2(0., 1.), 3., 8.5);\n    float c1 = Circle(p + vec2(0., 7. - 8. * (2. - s.menuId)), 2.5);\n    \n    color = mix(color, vec3(0.9), Smooth(-c2 * 2.));\n\tcolor = mix(color, vec3(0.3), Smooth(-c1 * 2.));    \n}\n\nvoid DrawSlider(inout vec3 color, vec2 p, in AppState s)\n{\n    p -= vec2(110, 94.5);\n    \n    p.y += 15.;\n    float c1 = Capsule(p.yx - vec2(0., 20.), 1., 20.);\n    c1 = min(c1, Circle(p - vec2(40. * s.roughness, 0.), 2.5));\n\n\tcolor = mix(color, vec3(0.3), Smooth(-c1 * 2.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1. + 2. * q;\n\tp.x *= iResolution.x / iResolution.y;    \n    p *= 100.;\n    \n    AppState s;\n    LoadState(s);  \n\n    vec3 color = vec3(1., .98, .94) * mix(1.0, 0.4, Smooth(abs(.5 - uv.y)));\n    float vignette = q.x * q.y * (1.0 - q.x) * (1.0 - q.y);\n    vignette = saturate(pow(32.0 * vignette, 0.05));\n    color *= vignette;\n    \n    DrawScene(color, p, s);\n    MenuText(color, p, s);\n    SliderText(color, p, s);\n    DrawRadial(color, p, s);\n    DrawSlider(color, p, s);\n\n\tfragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// control loop\n\nconst float FOCUS_SLIDER = 1.;\nconst float FOCUS_OBJ    = 2.;\n\nstruct AppState\n{\n    float   menuId;\n    float   roughness;\n    float   focus;\n    vec2    focusObjRot;\n    vec2    objRot;\n};\n\nvec4 LoadValue(int x, int y)\n{\n    return texelFetch(iChannel0, ivec2(x, y), 0);\n}\n\nvoid LoadState(out AppState s)\n{\n    vec4 data;\n\n    data = LoadValue(0, 0);\n    s.menuId    = data.x;\n    s.roughness = data.y;\n    s.focus     = data.z;\n    \n    data = LoadValue(1, 0);\n    s.focusObjRot   = data.xy;\n    s.objRot        = data.zw;\n}\n\nvoid StoreValue(vec2 re, vec4 va, inout vec4 fragColor, vec2 fragCoord)\n{\n    fragCoord = floor(fragCoord);\n    fragColor = (fragCoord.x == re.x && fragCoord.y == re.y) ? va : fragColor;\n}\n\nvec4 SaveState(in AppState s, in vec2 fragCoord)\n{\n    if (iFrame <= 0)\n    {\n        s.menuId      = 0.0;\n        s.roughness   = 0.5;\n        s.focus       = 0.0;\n        s.focusObjRot = vec2(0.0);\n        s.objRot      = vec2(0.0);\n    }\n    \n    vec4 ret = vec4(0.);\n    StoreValue(vec2(0., 0.), vec4(s.menuId, s.roughness, s.focus, 0.0), ret, fragCoord);\n    StoreValue(vec2(1., 0.), vec4(s.focusObjRot, s.objRot), ret, fragCoord);\n    return ret;\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0., 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (fragCoord.x >= 8. || fragCoord.y >= 8.) \n    {\n        discard;    \n    }\n\n    AppState s;\n    LoadState(s);\n    \n    vec4 q = iMouse / iResolution.xyxy;\n    vec4 m = -1. + 2. * q;\n    m.xz *= iResolution.x / iResolution.y;    \n    m *= 100.;    \n\n    vec4 sliderM = m - vec2(110, 94.5).xyxy;\n    if (sliderM.z >= -4. && sliderM.z < 44. && sliderM.w >= -20. && sliderM.w < -10.)\n    {\n        s.focus = FOCUS_SLIDER;\n    } \n    else if (m.w > -100. && m.w < 40. && abs(m.z + 20.) < 70.)\n    {\n        if (s.focus != FOCUS_OBJ)\n        {\n            s.focusObjRot = s.objRot; \n        }\n        s.focus = FOCUS_OBJ;\n    }\n    else\n    {\n        s.focus = 0.;\n        vec2 mp = (m.xy - vec2(-160, -1));\n        float menuId = mp.x < 40. || (mp.x < 60. && (mp.y > 18. && mp.y < 24.)) ? 10. - floor(mp.y / 8.) : -1.;\n        if (menuId >= 0. && menuId <= 2.)\n        {\n            s.menuId = menuId;\n        }\n    }\n\n    if (s.focus == FOCUS_SLIDER)\n    {\n        s.roughness = saturate(sliderM.x / 40.);    \n    } \n    if (s.focus == FOCUS_OBJ)\n    {\n        s.objRot = s.focusObjRot + .04 * (m.xy - m.zw);\n    }\n    \n    fragColor = SaveState(s, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}