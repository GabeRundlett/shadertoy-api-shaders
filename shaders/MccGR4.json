{
    "Shader": {
        "info": {
            "date": "1711435899",
            "description": "rorate texture with origin aspec",
            "flags": 0,
            "hasliked": 0,
            "id": "MccGR4",
            "likes": 0,
            "name": "rorate texture with origin aspec",
            "published": 3,
            "tags": [
                "rotate"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "vec2 centerAlign(vec2 bgUv, vec2 bgSize, vec2 fgSize, vec2 anchor, vec2 fgScale) {\n    return (bgUv*bgSize - anchor)/(fgSize*fgScale) + vec2(0.5);\n}\n\nmat2 rotate2d(float _angle) {\n    float c = cos(_angle);\n    float s = sin(_angle);\n    return mat2(c, -s, s, c);\n}\n\nvec4 blendColor(vec2 iuv, sampler2D fgTexture, vec4 baseColor, vec2 bgSize, vec2 fgSize, vec2 anchorCenter, vec2 fgScale) {\n    vec4 resultColor = baseColor;\n    vec2 uv = centerAlign(iuv, bgSize, fgSize, anchorCenter, fgScale);\n    \n    float fgRatio = fgSize.x / fgSize.y;\n    vec2 rotateCenter = vec2(0.5);\n    uv -= rotateCenter;\n    uv.y /= fgRatio;\n    uv = rotate2d(radians(-iTime * 5.0)) * uv;\n    uv.y *= fgRatio;\n    uv += rotateCenter;\n\n    resultColor = vec4(0.0);\n    // Use texture2D with clamp to border to avoid if statement\n    if (all(lessThan(vec2(0.0), uv))&&all((lessThan(uv, vec2(1.0))))) {\n        uv.y = 1.0 - uv.y; // Flip the y-coordinate\n        vec4 blendColor = texture(fgTexture, uv); // Shader will clamp uv coordinates by itself\n        resultColor = mix(baseColor, blendColor, blendColor.a);\n    }\n    return resultColor;\n}\n\nvec2 getScale(vec2 bgSize, vec2 fgSize) {\n    vec2 scale = bgSize / fgSize;\n    return vec2(min(scale.x, scale.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 vTextureCoord = fragCoord.xy / iResolution.xy;\n    vec2 bgSize = iResolution.xy;\n    vec2 fgAnchor = bgSize * 0.5;\n    vec2 fgSize = iChannelResolution[0].xy;\n    \n    vec2 scale = getScale(bgSize, fgSize);\n    vec4 baseColor = vec4(0.0);\n    vec4 resultColor = blendColor(vTextureCoord, iChannel0, baseColor, bgSize, fgSize, fgAnchor, scale);\n    fragColor = resultColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}