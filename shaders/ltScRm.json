{
    "Shader": {
        "info": {
            "date": "1507895196",
            "description": "Implementation of Lewis' 89 noise. http://scribblethink.org/Work/Crunge/crunge.pdf. Tiled along x and y coordinates (uncomment l.29 to check).",
            "flags": 0,
            "hasliked": 0,
            "id": "ltScRm",
            "likes": 3,
            "name": "Tiled Lewis noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "tiled",
                "stochastic",
                "lewis"
            ],
            "usePreview": 0,
            "username": "VinceTavernier",
            "viewed": 742
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.141592653589793\n// Size of cells. Use a factor of iResolution.y\n// 360: 2^3 * 3^2 * 5\n// 450: 2   * 3^2 * 5^2\n#define TILE_SIZE 5.\n// Number of cells\n#define TILE_COUNT int(iResolution.y/TILE_SIZE)\n// Number of splats per cell\n#define SPLATS 4\n\n// Kernel used in the paper\nfloat h(vec2 x) {\n    float r = length(x);\n    return r<1.?(.5+.5*cos(M_PI*r)):0.;\n}\n\n// Hash function\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    //U = fract(2.*U/iResolution.y)*iResolution.y; // uncomment to check tiling\n    // Find out the cell coordinates\n\tivec2 ccell = ivec2(U/TILE_SIZE);\n\n    O -= O;\n\n    // Loop over adjacent cells\n    ivec2 disp;\n    int dispSize = 1;\n    for (disp.x = -dispSize; disp.x <= dispSize; disp.x++)\n    {\n        for (disp.y = -dispSize; disp.y <= dispSize; disp.y++)\n        {\n            // The current cell being considered\n            ivec2 cell = ccell + disp;\n            // The cell number used to seed the PRNG (note: float mod works for negative numbers)\n            ivec2 nc = ivec2(mod(vec2(cell), float(TILE_COUNT)));\n            // Center of this cell in pixels\n            vec2 center = TILE_SIZE*(vec2(cell) + .5);\n            // Loop over splats\n            for (int i = 0; i < SPLATS; i++)\n            {\n                vec3 rnd = hash3(uint(nc.x*TILE_COUNT+nc.y+1)*uint(SPLATS)+uint(i));\n                // The location of this splat\n                vec2 loc = center + TILE_SIZE/2. * (2.*rnd.xy-1.);\n                // The weight of this splat, [-1, 1]\n                float w = 2.*rnd.z-1.;\n\n                // Distance to this splat\n                vec2 x = (U - loc)/TILE_SIZE;\n                O += w * h(x);\n            }\n            // uncomment to see grid coordinates\n            //if (disp.x == 0 && disp.y == 0) O *= float(SPLATS) * vec4(nc,0.,1.)/TILE_COUNT;\n        }\n    }\n\n    // Normalize by variance and map to [0, 1]\n    O = .5*O/(float(SPLATS)*sqrt(.311392))+.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}