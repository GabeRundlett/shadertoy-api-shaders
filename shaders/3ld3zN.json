{
    "Shader": {
        "info": {
            "date": "1575804712",
            "description": "visual experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "3ld3zN",
            "likes": 10,
            "name": "Circle behind lines",
            "published": 3,
            "tags": [
                "circle",
                "simplex",
                "linex"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 426
        },
        "renderpass": [
            {
                "code": "#define BLACK_COL vec3(16,22,26)/255.\n#define WHITE_COL vec3(235,241,245)/255.\n#define RED_COL vec3(245, 73, 139)/255.\n\n\n#define SF 1./min(iResolution.x,iResolution.y)\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n        \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat tsin()\n{\n    float t = iTime * 1.25;\n\treturn sin(t + cos(t*2.))*.5 + .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 ouv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    \n    float COUNT = floor(iResolution.y / 8.);\n    float wSize = 5.;\n        \n    float sf = SF * COUNT * .75;       \n    \n    vec2 uv = ouv * vec2(1., COUNT);\n    vec2 gid = vec2(uv.x, floor(uv.y));\n    vec2 guv = vec2(uv.x, fract(uv.y))  - vec2(0., .5);\n    \n    float g = 1.;\n    for(float i=-wSize; i<=wSize; i+=1.) \n    {                \n        vec2 iuv = guv + vec2(0,i);    \n        vec2 iid = gid - vec2(0,i);  \n\n        vec2 nuv = iid / vec2(1., COUNT/5.);\n        vec2 uv = iuv + simplex_noise(vec3(nuv*COUNT/20., iTime*.5))*wSize/4. - vec2(0., wSize*.5);\n        \n        float itsin = tsin()*.3;\n        float sss = \n            smoothstep(.1 + itsin,.2 + itsin, length(iid / vec2(1., COUNT)));\n        uv += vec2(0., sss )* wSize*1.25 ;\n        \n        g *= smoothstep(abs(uv.y), .0 , sf*0.75);\n    }\n   \n    float ctsin = tsin()*.3;\n    vec3 backCol = mix(BLACK_COL, RED_COL, smoothstep(.15+ctsin+SF, .15+ctsin, length(ouv)));\n    \n    vec3 col = mix(WHITE_COL, backCol, g);\n       \n       \n    \n    //-----------------------------------------------------\n    // postprocessing\n    //-----------------------------------------------------    \n\n    // Border dark\n    col *= 0.2 + 0.8 * pow(32.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.3);\n\n    // Fade in\n    col *= smoothstep(0.0, 1.0, iTime);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}