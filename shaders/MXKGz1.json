{
    "Shader": {
        "info": {
            "date": "1717354325",
            "description": "An experiment to control exactly how many color combinations are possible when quantizing the 3 color channels. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MXKGz1",
            "likes": 1,
            "name": "Ordered Quantizing of 3 Colors",
            "published": 3,
            "tags": [
                "cartoon",
                "cellshading",
                "toon",
                "quantize"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nAn experiment what it would look like if I quanize 3 colors and control exactly how\nmany combinations of colors are possible in total. Turns out integer factorization\nis a pain in the butt and doesn't have elegant solutions, so I cheated. \n\n... least it looks funny.\n*/\n\n// Enable this to have exactly as many color declared, but looks ugly and too complicated\n//#define ACCURATE_COLOR_COUNT\n\n// Generates a smooth mask of isolating a target color\nfloat colorRange(vec3 pixelColor, vec3 targetColor, float range, float fuzziness) {\n    // Calculate the Euclidean distance between pixelColor and targetColor\n    float distance = length(pixelColor - targetColor);\n\n    // Normalize the distance by the maximum possible distance\n    float normalizedDistance = distance / sqrt(3.0);\n\n    // Colors within Range become 1 and colors within Range+ Fuzziness fade to 0\n    return smoothstep(range + fuzziness, range, normalizedDistance);\n}\n\n// Quantizes a 0-1 float into 'levels' many distinct segments\nfloat quantize(float x, int levels) {\n    return round(x * float(levels - 1)) / max(1.0, float(levels - 1));\n}\n\n// Quantizes colors into exactly 'levels' many possible colors\n// See: https://www.desmos.com/calculator/mwotdtluep\nvec3 quantizeColor(vec3 color, int levels) {\n\n    // Number of level per channel\n    int levelsGreen =int(ceil(pow(float(levels), 0.33333))); \n    int levelsRed =  int(round(sqrt(float(levels)) / sqrt(float(levelsGreen)))); \n    int levelsBlue = int(ceil(float(levels) / (float(levelsGreen) * float(levelsRed)))); \n\n    // Number of all color combinations for now\n    int combiGreen = levelsGreen * levelsRed * levelsBlue;\n\n    // Quanize the green color first, so it has the most levels\n    color.g = quantize(color.g, levelsGreen);\n    \n    #ifdef ACCURATE_COLOR_COUNT\n        // If the total number of combinations is more than levels\n        if (combiGreen != levels && color.g == 0.) {\n\n            // if we remove ones colors combinations how many combinations do we have\n            int combiGreenLess = levelsRed * (levelsGreen-1) * levelsBlue;\n\n            // Backfill, how many combinations are still missing if we remove one color\n            int backfillGreen = levels - combiGreenLess;\n\n            // Number of level per channel for the single middle color\n            levelsRed = int(ceil(sqrt(float(backfillGreen))));\n            levelsBlue = int(ceil(float(backfillGreen) / float(levelsRed)));\n\n            // Number of all color combinations for this single color for now\n            int combiRed = levelsRed * levelsBlue;\n\n            // Quanize the red color second\n            color.r = quantize(color.r, levelsRed);\n\n            // If the total number of combinations is more than levels and we are in a middle red\n            if(combiRed != backfillGreen && color.r == 0.) {\n\n                // Backfill, if red color has less combinations how many combinaitons does blue need\n                levelsBlue = levels - (combiGreenLess + (levelsRed-1) * levelsBlue);\n            }        \n        } else {\n            // Quanize the red color second\n            color.r = quantize(color.r, levelsRed);\n        }\n    #else\n        color.r = quantize(color.r, levelsRed);\n    #endif\n    \n    // Quanize the blue color third\n    color.b = quantize(color.b, levelsBlue);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // sample colors to quantize\n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    // If the mouse was clicked, scale mouse coordinates to the 0-1 range of the screen\n    int levels = 64;\n    if (iMouse.x > 0.0) {\n\n        // set the sample position at mouse posiiton\n        vec2 mouse = iMouse.xy / iResolution.xy;    \n        levels = int(mix(2., 255., pow(mouse.x,2.)));\n        \n    } else {\n        // If the mouse was not clicked, animate the direction vector\n        float myTime = iTime * 0.2;        \n        levels = int(mix(2., 512., pow(sin(myTime)*0.5+0.5,2.)));\n    }\n    \n    // quanize the color into levels\n    color = quantizeColor(color, levels);   \n    \n    // Output to screen\n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}