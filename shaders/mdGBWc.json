{
    "Shader": {
        "info": {
            "date": "1698701511",
            "description": "Port of my u32noise4 function from https://gist.github.com/fp64/126289051f0c9e1b70bcba7c3e07a82f\nsuitable as a 2D->1D hash.\nSomewhat expensive. See link for tests of quality.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdGBWc",
            "likes": 3,
            "name": "u32noise4",
            "published": 3,
            "tags": [
                "random",
                "hash"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// GLSL port of u32noise4 function from\n// https://gist.github.com/fp64/126289051f0c9e1b70bcba7c3e07a82f\n// written as a 2D->1D hash.\n// Probably cheaper than Threefry/Philox (with default\n// parameters) from https://github.com/DEShawResearch/random123,\n// (see also e.g. https://www.shadertoy.com/view/XslBR4) but\n// likely also weaker. At least it doesn't promptly fail PractRand.\n// Emphatically NOT cryptographically secure.\n\nuint u32noise4(uvec2 n)\n{\n    n=uvec2(n.x^n.y,~n.x);\n    n^=n.yx>>ivec2(17,15);\n    n*=uvec2(0x01C8E815u,0xA13FC965u);\n    n^=n.yx>>ivec2(15,19);\n    n*=uvec2(0xCF019D85u,0xAC564B05u);\n    n^=n.yx>>ivec2(19,17);\n    n*=uvec2(0x01ED0675u,0x8664F205u);\n    n^=n.yx>>ivec2(17,17);\n    return n.x+n.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    // Thanks to \"hash: visualising bitplanes\" by hornet https://www.shadertoy.com/view/lt2yDm\n    vec2 seed=mod(fragCoord,vec2(iResolution.x/8.0,iResolution.y/4.0));\n    uint bit=uint(int(floor(8.0*uv.x)+8.0*floor(4.0*uv.y)));\n    uvec2 icoord=uvec2(ivec2(floor(seed+10.0*iTime)));\n    float c=float((u32noise4(icoord)>>bit)&1u);\n    fragColor=vec4(c,c,c,1.0);\n    // Grid.\n    fragColor*=step(10.0/iResolution.x,1.0-abs(2.0*fract(8.0*uv.x)-1.0));\n    fragColor*=step(10.0/iResolution.y,1.0-abs(2.0*fract(4.0*uv.y)-1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}