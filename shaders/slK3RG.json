{
    "Shader": {
        "info": {
            "date": "1637921541",
            "description": "Glow imported from https://github.com/Oncorporation",
            "flags": 0,
            "hasliked": 0,
            "id": "slK3RG",
            "likes": 0,
            "name": "Glow 2",
            "published": 3,
            "tags": [
                "filter",
                "glow"
            ],
            "usePreview": 0,
            "username": "turboplay",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "// Change these\n float glow_percent = 40.;\n float blur = 1.;\n float min_brightness= 27.;\n float max_brightness = 100.;\n float pulse_speed = 0.;\n vec4 glow_color = vec4(1,1,1,1);\n bool ease = false;\n\n\nfloat EaseInOutCircTimer(float t,float b,float c,float d){\n\tt /= d/2.;\n\tif (t < 1.) return -c/2. * (sqrt(1. - t*t) - 1.) + b;\n\tt -= 2.;\n\treturn c/2. * (sqrt(1. - t*t) + 1.) + b;\t\n}\n\nfloat BlurStyler(float t,float b,float c,float d,bool ease)\n{\n\tif (ease) return EaseInOutCircTimer(t,0.,c,d);\n\treturn t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n  vec2 offsets[4];\noffsets[0] = vec2(-0.1,  0.125);\noffsets[1] = vec2(-0.1, -0.125);\noffsets[2] = vec2(0.1, -0.125);\noffsets[3] = vec2(0.1,  0.125);\n\n\t// convert input for vector math\n\tvec4 color = texture(iChannel0, uv);\n\tfloat blur_amount = blur /100.;\n\tfloat glow_amount = glow_percent * 0.01;\n\tfloat speed = pulse_speed * 0.01;\t\n\tfloat luminance_floor = min_brightness /100.;\n\tfloat luminance_ceiling = float(max_brightness) /100.;\n\n\tif (color.a > 0.0)\n\t{\n\t\t//circular easing variable\n\t\tfloat t = 1. + sin(iTime * speed);\n\t\tfloat b = 0.0; //start value\n\t\tfloat c = 2.0; //change value\n\t\tfloat d = 2.0; //duration\n\n\t\t// simple glow calc\n\t\tfor (int n = 0; n < 4; n++) {\n\t\t\tb = BlurStyler(t, 0., c, d, ease);\n\t\t\tvec4 ncolor = texture(iChannel0, uv + (blur_amount * b) * offsets[n]);\n\t\t\tfloat intensity = dot(ncolor.rgb * 1., vec3(0.299, 0.587, 0.114));\n\t\t\tif ((intensity >= luminance_floor) && (intensity <= luminance_ceiling))\n\t\t\t{\n\t\t\t\tncolor.a = clamp(ncolor.a * glow_amount, 0.0, 1.0);\n\t\t\t\tncolor.rgb = ncolor.rgb * glow_color.rgb;\n\t\t\t\tcolor += (ncolor * (glow_amount * b));\n\t\t\t}\n\t\t}\n\t}\n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}