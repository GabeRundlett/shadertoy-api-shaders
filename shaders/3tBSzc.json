{
    "Shader": {
        "info": {
            "date": "1566874333",
            "description": "The result of just following the live programming session of Inigo Quilez (@iq)\nI learned a lot from that video! thanks ! ",
            "flags": 0,
            "hasliked": 0,
            "id": "3tBSzc",
            "likes": 5,
            "name": "Inigo taught me this :p",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "thiagoborn",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "// TODO\n// fresnel\n// clouds\n// occlusion\n// reflections \n\nstruct hit {\n    float d;\n    int m;\n};\nfloat sdSphere(vec3 pos,float radius){\n    return length(pos)-radius;\n}\nfloat terrain(vec2 pos){\n   return sin(pos.x*1.4)*0.1+sin(pos.x*0.93)*.3 +\n    sin(pos.y*2.3)*0.1+sin(pos.y*1.45)*0.2;\n}\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n  return mix(a, b, h) - k*h*(1.0-h);\n}\nhit map(vec3 pos){\n    float t = terrain(pos.xz)*.5;\n    float f = pos.y+1.0 + t;\n    hit h;\n    vec2 p2d = vec2(iTime,0.);\n    vec3 q = pos-vec3(iTime,-terrain(p2d)*.5,0.);\n    h.d=sdSphere(q,.5);\n    h.m = 1;\n    if(f<h.d){\n        h.d=f;\n        h.m=2;\n    }\n    \n    p2d += vec2(sin(iTime*1.3),cos(iTime*1.3));\n    vec3 q2 = pos - vec3(p2d.x,-terrain(p2d)*.5-.5,p2d.y);\n    float d = sdSphere(q2,.1);\n    if(d<h.d){\n        h.d=d;\n        h.m=1;\n    }\n    /*\n    vec3 q3 = q2 + vec3(sin(iTime*4.5)*.2,0.0,cos(iTime*4.5)*.2);\n    d = sdSphere(q3,.04);\n    if(d<h.d){\n        h.d=d;\n        h.m=1;\n    }\n*/\n    \n    \n    d = sdSphere(\n        vec3(mod(abs(pos.x),2.0)-1.0,\n             f,\n             mod(abs(pos.z),2.0)-1.0),.1);    \n    if(d<h.d){\n        h.d=d;\n        h.m=3;\n    }\n    return h;\n}\nvec3 normal(vec3 pos){\n    vec2 e = vec2(0.001,0.0);\n    return normalize(vec3(\n    \tmap(pos+e.xyy).d-map(pos-e.xyy).d,    \n    \tmap(pos+e.yxy).d-map(pos-e.yxy).d,    \n    \tmap(pos+e.yyx).d-map(pos-e.yyx).d\n    ));\n}\nhit castRay(vec3 ro ,vec3 rd ){\n   \tint s = 0;\n    float d = 0.0;\n    while(s < 300 && d < 20.0){\n        vec3 p = ro + rd * d;\n        hit h = map(p);\n        float od = abs(h.d);\n        if(od<0.004){\n            h.d = d;\n          \treturn h;\n        }\n        d+=od;\n        s++;\n    }\n    hit h;\n    h.d = d;\n    return h;\n}\nfloat castShadow(vec3 ro ,vec3 rd ){\n    float sha = 1.0;\n   \tint s = 0;\n    float d = 0.01;\n    while(s <200 && d < 20.0){\n        vec3 p = ro + rd * d;\n        hit h = map(p);\n        sha = min(sha,4. * h.d / d);\n        if(h.d<0.001) break;\n        d+=h.d;\n        s++;\n    }\n    return clamp(sha,0.,1.);\n}\nvec3 pixel(vec2 uv){\n    float an = iTime * .3 + iMouse.x/iResolution.x*3.1415*2.;\n    vec3 ro = vec3(iTime + 2.*sin(an),.0,2.*cos(an));\n    vec3 ta = vec3(iTime,.0,.0);   \n    \n    vec3 fo = normalize(ta-ro);\n    vec3 ri = normalize(cross(fo,vec3(0.0,1.0,0.0)));\n    vec3 up = normalize(cross(ri,fo));\n    \n    vec3 rd = normalize(uv.x*ri + uv.y*up + 1.5*fo);\n    vec3 alb = vec3(.0);\n    hit h = castRay(ro,rd);\n    //return vec3(1./h.d); // dist\n    vec3 p = ro+rd*h.d;\n    \n    switch(h.m){\n        case 0:\n        // sky\n        alb = vec3(.1,.2,.8) -1.5*rd.y;\n        alb = mix(alb,vec3(1.,.6,.1),exp(-10.0*rd.y)); // ?\n        //alb=vec3(0.);\n        break;\n        case 1:\n        // ball\n        alb = vec3(.5,.2,.1);\n        break;\n        case 2:\n        // ground\n        alb = vec3(.2,1.0,.1);\n        float ft = sin(p.x*18.) + sin(p.z*18.) + sin(p.y*18.);\n        alb += vec3(.3,.8,.2) * clamp(ft,-.2,.2);\n        break;\n        case 3:\n        // ground things\n        alb = vec3(.8,.6,.1);\n        break;\n    }\n    //return alb; // albedo\n    if(h.m==0) return alb;\n\n    vec3 n = normal(p);\n    // return n; // normals\n    vec3 sun_dir = normalize(vec3(4.0,1.2,2.0));\n    vec3 sun_hal = normalize( sun_dir-rd );\n       \n    vec3 c = vec3(.0);\n        \n    vec3 sun_dif = alb * clamp(dot(n,sun_dir),.0,1.) * vec3(1.0,.9,0.8);\n    //return sun_dif;\n    c+=sun_dif;\n    vec3 sun_spe = vec3(1.0,.6,.1) * pow(clamp(dot(n,sun_hal),0.,1.),16.) * .5;\n    //return sun_spe;\n    c+=sun_spe;\n    vec3 bot_dif = alb * clamp(dot(n,vec3(.0,-1.0,.0)),.0,1.) * vec3(.1,1.0,.2);\n    //return bot_dif;\n    c+=bot_dif;\n    vec3 sky_dif = alb * clamp(dot(n,vec3(.0,1.0,.0)),.0,1.) * vec3(.0,.0,1.4);\n    //return sky_dif;\n    c+=sky_dif;\n    \n    float sha = castShadow(p+n*0.005,sun_dir);\n    c *= .5+.5*sha;\n    \n    //hit = castRay(p+n*0.005,n);\n    //c+=(1.-sha)*vec3(.3,.1,.2);\n    \n\treturn c;\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    //if(iMouse.z<=.0)return;\n    \n    float pix = 1./iResolution.y;\n    vec2 uv = ((i)*2.0-iResolution.xy)/iResolution.y;\n\n    vec2 e = vec2(pix/2.+pix*.2,0.);\n    \n    vec3 c = pixel(uv+e.xy);   \n   // c+=pixel(uv-e.xy);\n   // c+=pixel(uv-e.yx);\n   // c+=pixel(uv-e.yx);\n    //c/=4.0;\n\to = vec4(c,1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}