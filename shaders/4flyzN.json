{
    "Shader": {
        "info": {
            "date": "1720974276",
            "description": "Digital Differential Analysis Visualizer\n\n- to move second point: left click + drag",
            "flags": 0,
            "hasliked": 0,
            "id": "4flyzN",
            "likes": 2,
            "name": "DDA - Visualizer",
            "published": 3,
            "tags": [
                "2d",
                "voxel",
                "dda"
            ],
            "usePreview": 0,
            "username": "anujv",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "\n// in pixles\n#define GRID_SIZE     40\n#define POINT_SIZE_SQ 20.0f\n#define LINE_WIDTH_SQ 2.0f\n\n#define BIAS 0.0001f\n\n#define GRID_COLOR   vec4(0.3f, 0.3f, 0.0f, 1.0f)\n#define POINT_COLOR  vec4(1.0f, 0.0f, 0.0f, 1.0f)\n#define STEP_COLOR   vec4(0.1f, 0.9f, 0.1f, 1.0f)\n#define CELL_COLOR   vec4(0.1f)\n#define LINE_COLOR   vec4(0.1f, 0.6f, 0.4f, 1.0f)\n#define LINE_COLOR2  vec4(0.7f, 0.3f, 0.2f, 1.0f)\n#define BLOCK_COLOR  vec4(0.0f, 1.0f, 0.5f, 1.0f)\n\nfloat draw_point(in vec2 pos, in vec2 frag_coord);\n\n// --------------------------- utils --------------------------- //\n\nstruct Box {\n    vec2 min_pos;\n    vec2 max_pos;\n};\n\nfloat rand(float co) {\n    return fract(sin(co*(91.3458)) * 47453.5453); }\n\nbool aabb_with_line(in vec2 a, in vec2 b, in Box box) {\n    vec2 d = b - a;\n\n    if (d.x < 0.0f) {\n        float temp = box.min_pos.x;\n        box.min_pos.x = box.max_pos.x;\n        box.max_pos.x = temp;\n    }\n    \n    if (d.y < 0.0f) {\n        float temp = box.min_pos.y;\n        box.min_pos.y = box.max_pos.y;\n        box.max_pos.y = temp;\n    }\n    \n    vec2 min_t = (box.min_pos - a) / d;\n    vec2 max_t = (box.max_pos - a) / d;\n    \n    float t_min = max(min_t.x, min_t.y);\n    float t_max = min(max_t.x, max_t.y);\n    \n    if (t_min < t_max && max(t_min, t_max) > 0.0f && min(t_min, t_max) <= 1.0f) {\n        return true;\n    }\n\n    return false;\n}\n\nbool point_with_line(in vec2 a, in vec2 b, in vec2 c, float line_width_sq, out float dist_sq) {\n    vec2 d = b - a;\n    float t = (dot(d, vec2(c)) - dot(d, a)) / dot(d, d);\n    if (t < 0.0f || t > 1.0f) return false;\n    \n    vec2 p = (a + d * t) - c;\n    dist_sq = dot(p, p);\n    return dist_sq < line_width_sq;\n}\n\n// randomly select cells to be filled\nbool is_filled(in vec2 block_coord) {\n    float seed = block_coord.x * block_coord.y;\n    return fract(sin(seed * 91.3458f) * 47453.5453f) > 0.8f;\n}\n\n// return true if line intersect any filled block\n// color is just used to draw step points\nbool dda(in vec2 a, in vec2 b, out float t_out, in vec2 frag_coord, inout vec4 color) {\n    int max_steps = int(ceil(max(iResolution.x / float(GRID_SIZE), iResolution.y / float(GRID_SIZE))));\n    \n    vec2 d = b - a;\n    vec2 d_sign = sign(d);\n    vec2 cell_coord = floor(a / vec2(GRID_SIZE));\n    vec2 next_edge = cell_coord + vec2(1.0f) * vec2(equal(d_sign, vec2(1.0f)));\n    \n    for (int i = 0; i < max_steps; i++) {\n        vec2 t = (next_edge * vec2(GRID_SIZE) - a) / d;\n        float t_min = min(t.x, t.y);\n        vec2 pos = a + d * (t_min + BIAS);\n        cell_coord = floor(pos / vec2(GRID_SIZE));\n        if (is_filled(cell_coord)) {\n            t_out = t_min;\n            return true;\n        }\n        if (t_min >= 1.0f) {\n            break;\n        }\n        color += STEP_COLOR * draw_point(pos, frag_coord);\n        next_edge += d_sign * vec2(lessThanEqual(t, vec2(t_min)));\n    }\n    \n    return false;\n}\n\n// --------------------------------------------------------------//\n\nfloat draw_grid(in vec2 frag_coord) {\n    if (int(abs(frag_coord.x)) % GRID_SIZE == 0 || int(abs(frag_coord.y)) % GRID_SIZE == 0) {\n        return 1.0f;\n    }\n    \n    return 0.0f;\n}\n\nfloat draw_point(in vec2 pos, in vec2 frag_coord) {\n    vec2 diff = frag_coord - pos;\n    float dist = dot(diff, diff);\n    if (dist <= POINT_SIZE_SQ) {\n        return smoothstep(POINT_SIZE_SQ, 0.0f, dist);\n    }\n    \n    return 0.0f;\n}\n\nfloat draw_line(in vec2 pos_a, in vec2 pos_b, in vec2 frag_coord) {\n    float dist = 0.0f;\n    if (point_with_line(pos_a, pos_b, frag_coord, LINE_WIDTH_SQ, dist)) {\n        return smoothstep(LINE_WIDTH_SQ, 0.0f, dist);\n    }\n    \n    return 0.0f;\n}\n\nfloat draw_cell(in vec2 pos_a, in vec2 pos_b, in vec2 frag_coord) {\n    vec2 cell_coord = floor(frag_coord / vec2(GRID_SIZE)) * vec2(GRID_SIZE);\n    Box box;\n    box.min_pos = cell_coord;\n    box.max_pos = cell_coord + vec2(GRID_SIZE);\n    \n    if (aabb_with_line(pos_a, pos_b, box)) {\n        return 1.0f;\n    }\n    \n    return 0.0f;\n}\n\nfloat draw_blocks(in vec2 frag_coord) {\n    vec2 block_coord = floor(frag_coord / vec2(GRID_SIZE));\n    return is_filled(block_coord) ? 1.0f : 0.0f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 color = vec4(0.0f);\n    vec2 frag_coord = fragCoord - (iResolution.xy / 2.0f);\n    \n    vec2 a = vec2(0.0f);\n    vec2 b = vec2(sin(iTime * 0.3f), cos(iTime * 0.3f)) * max(iResolution.x, iResolution.y);\n    if (iMouse.z > 0.0f) {\n        b = iMouse.xy - (iResolution.xy / 2.0f);\n    }\n    vec2 hit_b = b;\n    vec2 d = b - a;\n    \n    float hit_t = 0.0f;\n    bool hit = dda(a, b, hit_t, frag_coord, color);\n    if (hit) {\n        hit_b = a + d * (hit_t - BIAS);\n        color += STEP_COLOR * draw_point(hit_b, frag_coord);\n    }\n    \n    // draw grid\n    color += GRID_COLOR * draw_grid(frag_coord);\n    \n    // draw points a and b\n    color += POINT_COLOR * draw_point(a, frag_coord);\n    color += POINT_COLOR * draw_point(b, frag_coord);\n    \n    // draw lines\n    color += LINE_COLOR * draw_line(a, hit_b, frag_coord);\n    if (hit) {\n        color += LINE_COLOR2 * draw_line(hit_b, b, frag_coord);\n    }\n    \n    // draw tested blocks\n    color += CELL_COLOR * draw_cell(a, hit_b, frag_coord);\n    \n    // draw solid blocks\n    color += BLOCK_COLOR * draw_blocks(frag_coord);\n    \n    fragColor = vec4(color.xyz, 1.0f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}