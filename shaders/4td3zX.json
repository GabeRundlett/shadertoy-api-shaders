{
    "Shader": {
        "info": {
            "date": "1470599926",
            "description": "Use mouse drag to change the kernel. Mouse-x drag changes the rotation in the range [0,2PI], and mouse-y changes the frequency in the range [0.1, 10.0]. Red is the cos component, green is the sin component.",
            "flags": 0,
            "hasliked": 0,
            "id": "4td3zX",
            "likes": 1,
            "name": "gabor-kernel-viewer",
            "published": 3,
            "tags": [
                "experiment",
                "convolution",
                "gabor",
                "kernel",
                "gaborfilter",
                "weights"
            ],
            "usePreview": 0,
            "username": "realazthat",
            "viewed": 502
        },
        "renderpass": [
            {
                "code": "#define RADIUS 10\n\nfloat PI = 3.14159265359;\n\nfloat lerp(float a, float b, float t){\n    return a + (b-a)*t;\n}\n\nfloat gabor_c(vec2 rxy, float sigma, float rotation, float frequency) {\n    float rotation_component = rxy.x*cos(rotation) + rxy.y*sin(rotation);\n    \n    float sigma_square = sigma*sigma;\n    \n    float w = exp(-(rxy.x*rxy.x+rxy.y*rxy.y)/(2.0*sigma_square)) * cos(2.0*PI*frequency*rotation_component);\n    \n    return w;\n}\n\n\nfloat gabor_s(vec2 rxy, float sigma, float rotation, float frequency) {\n    float rotation_component = rxy.x*cos(rotation) + rxy.y*sin(rotation);\n    float sigma_square = sigma*sigma;\n    \n    float w = exp(-(rxy.x*rxy.x+rxy.y*rxy.y)/(2.0*sigma_square)) * sin(2.0*PI*frequency*rotation_component);\n    \n    return w;\n}\n\nvoid blur_s(out vec4 fragColor, in vec2 fragCoord, float sigma, float rotation, float frequency){\n    \n    vec2 xy = fragCoord.xy;\n    \n    \n    fragColor = vec4(0);\n    float wsum = 0.0;\n    \n    for (int ry = -RADIUS; ry <= +RADIUS; ++ry)\n    for (int rx = -RADIUS; rx <= +RADIUS; ++rx)\n    {\n        vec2 rxy = vec2(rx,ry);\n        vec2 nxy = xy + rxy;\n        vec2 nuv = nxy / iResolution.xy;\n        \n        \n        float w = gabor_s(rxy, sigma, rotation, frequency);\n        \n        wsum += w;\n        \n        fragColor += w*texture(iChannel0, nuv);\n    }\n    \n    fragColor /= wsum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    float sigma = 0.2;\n    float rotation = lerp(0.0, 2.0*PI, (iMouse.x / iResolution.x));\n    float frequency = lerp(0.1, 10.0, (iMouse.y / iResolution.y));\n    \n    \n    vec2 rxy = vec2(lerp(-2.0,+2.0, uv.x), lerp(-2.0,+2.0, uv.y));\n    \n    float w_c = gabor_c(rxy, sigma, rotation, frequency);\n    float w_s = gabor_s(rxy, sigma, rotation, frequency);\n    \n    vec4 kernelColor = vec4(w_c,w_s,0,1.0);\n    \n    \n    vec4 filteredColor = vec4(0);\n    blur_s(filteredColor, fragCoord, sigma, rotation, frequency);\n    \n    fragColor = kernelColor;\n    // uncomment to see the filtered image.\n    // fragColor = filteredColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}