{
    "Shader": {
        "info": {
            "date": "1522839671",
            "description": "Sinking spiked objects",
            "flags": 0,
            "hasliked": 0,
            "id": "lsVyz3",
            "likes": 11,
            "name": "Falling Stars",
            "published": 3,
            "tags": [
                "reflection",
                "light",
                "polyhedron"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 4772
        },
        "renderpass": [
            {
                "code": "// \"Falling Stars\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3v3 (vec3 p);\n\nvec3 ltDir;\nvec2 csI, csI2, csD, csD2;\nfloat tCur, dstFar;\nconst vec3 bGrid = vec3 (2.);\nconst float pi = 3.14159;\n\nvec3 IcosSym (vec3 p)\n{\n  float a, w;\n  w = 2. * pi / 3.;\n  p.yz = Rot2Cs (vec2 (p.y, abs (p.z)), csI);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 3; k ++) {\n    if (dot (p.yz, csI) > 0.) p.zy = Rot2Cs (p.zy, csI2) * vec2 (1., -1.);\n    p.xy = Rot2D (p.xy, - w);\n  }\n  if (dot (p.yz, csI) > 0.) p.zy = Rot2Cs (p.zy, csI2) * vec2 (1., -1.);\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.xz = - vec2 (abs (p.x), p.z);\n  return p;\n}\n\nvec3 DodecSym (vec3 p)\n{\n  float a, w;\n  w = 2. * pi / 5.;\n  p.xz = Rot2Cs (vec2 (p.x, abs (p.z)), vec2 (csD.x, - csD.y));\n  p.xy = Rot2D (p.xy, - 0.25 * w);\n  p.x = - abs (p.x);\n  for (int k = 0; k < 3; k ++) {\n    if (dot (p.yz, csD) > 0.) p.zy = Rot2Cs (p.zy, csD2) * vec2 (1., -1.);\n    p.xy = Rot2D (p.xy, - w);\n  }\n  if (dot (p.yz, csD) > 0.) p.zy = Rot2Cs (p.zy, csD2) * vec2 (1., -1.);\n  a = mod (atan (p.x, p.y) + 0.5 * w, w) - 0.5 * w;\n  p.yx = vec2 (cos (a), sin (a)) * length (p.xy);\n  p.xz = - vec2 (abs (p.x), p.z);\n  return p;\n}\n\nfloat ObjDf (vec3 p, vec3 cId)\n{\n  vec3 q, h;\n  float d;\n  d = dstFar;\n  h = Hashv3v3 (cId);\n  if (h.x * step (2., length (cId.xz)) > 0.6) {\n    p -= bGrid * (cId + 0.5);\n    p -= (0.2 + 0.1 * bGrid.x * h.x) * vec3 (cos (h.z * tCur + h.x), 0., sin (h.z * tCur + h.x));\n    p.xz = Rot2D (p.xz, (h.y - 0.5) * tCur);\n    p.xy = Rot2D (p.xy, (h.z - 0.5) * tCur);\n    q = p;\n    d = PrSphDf (q, 0.2);\n    q = IcosSym (p);\n    q.z += 0.48;\n    d = SmoothMin (d, PrCylDf (q, 0.05 * (0.55 + 1.5 * q.z), 0.3), 0.01);\n    q = DodecSym (p);\n    q.z += 0.48;\n    d = 0.9 * SmoothMin (d, PrCylDf (q, 0.05 * (0.55 + 1.5 * q.z), 0.3), 0.01);\n  }\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  dHit = eps;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit;\n    cId.xz = floor (p.xz / bGrid.xz);\n    p.y += 0.2 * tCur * (1. + Hashfv2 (cId.xz));\n    cId.y = floor (p.y / bGrid.y);\n    d = ObjDf (p, cId);\n    s = (bGrid * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (min (min (s.x, s.y), s.z)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nfloat ObjDfN (vec3 p)\n{\n  vec3 cId;\n  cId.xz = floor (p.xz / bGrid.xz);\n  p.y += 0.2 * tCur * (1. + Hashfv2 (cId.xz));\n  cId.y = floor (p.y / bGrid.y);\n  return ObjDf (p, cId);\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (ObjDfN (p + e.xxx), ObjDfN (p + e.xyy), ObjDfN (p + e.yxy), ObjDfN (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 3.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0.25, 0.6, 1.), vec3 (0., 0.4, 0.3), 0.5 * (1. - rd.y)) *\n     (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) * (1. + 0.25 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstObj, dihedIcos, dihedDodec;\n  dihedIcos = 0.5 * acos (sqrt (5.) / 3.);\n  csI = vec2 (cos (dihedIcos), - sin (dihedIcos));\n  csI2 = vec2 (cos (2. * dihedIcos), - sin (2. * dihedIcos));\n  dihedDodec = 0.5 * atan (2.);\n  csD = vec2 (cos (dihedDodec), - sin (dihedDodec));\n  csD2 = vec2 (cos (2. * dihedDodec), - sin (2. * dihedDodec));\n  bgCol = BgCol (rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = mix (vec3 (0.15, 0.35, 0.7), BgCol (reflect (rd, vn)), 0.8);\n    col = col * (0.4 + 0.1 * max (vn.y, 0.) + 0.5 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col *= 0.3 + 0.7 * min (rd.y + 1., 1.5);\n    col = mix (col, bgCol, smoothstep (0.5 * dstFar, dstFar, dstObj));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.02 * pi * tCur;\n  el = 0.2 * pi * sin (0.01 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = 0.6 * pi * mPtr.y;\n  }\n  tCur += 100.;\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (0.5);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ltDir = normalize (vec3 (0.2, 1., -0.2));\n  dstFar = 50.;\n  fragColor = vec4 (pow (ShowScene (ro, rd), vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec3 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}