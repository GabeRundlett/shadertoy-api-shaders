{
    "Shader": {
        "info": {
            "date": "1605759070",
            "description": "Simple cube from what I have learn in university",
            "flags": 0,
            "hasliked": 0,
            "id": "ws3BRs",
            "likes": 3,
            "name": "Simple Cuboid",
            "published": 3,
            "tags": [
                "cube",
                "beginner"
            ],
            "usePreview": 0,
            "username": "andraantariksa",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "#define BACKFACE_CULLING\n\nfloat signVector( in vec2 point, in vec2 arbitraryPoint, in vec2 normal )\n{\n    return dot(point - arbitraryPoint, normal);\n}\n\nvec2 lineNormal( in vec2 a, in vec2 b )\n{\n    return vec2(-(b.y - a.y), b.x - a.x);\n}\n\nbool isInsideTriangle( in vec2 point, in vec2 v1, in vec2 v2, in vec2 v3 )\n{\n    float s1 = signVector(point, v1, lineNormal(v1, v2));\n    float s2 = signVector(point, v2, lineNormal(v2, v3));\n    float s3 = signVector(point, v3, lineNormal(v3, v1));\n    \n    return ((s1 > 0.0f) && (s2 > 0.0f) && (s3 > 0.0f))\n        || ((s1 < 0.0f) && (s2 < 0.0f) && (s3 < 0.0f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 vertices[8] = vec3[8](\n        vec3(-0.3f, 0.3f, -0.3f),\n        vec3(-0.3f, 0.3f, 0.3f), // Front left top\n        \n        vec3(0.3f, 0.3f, -0.3f),\n        vec3(0.3f, 0.3f, 0.3f), // Front right top\n            \n        vec3(-0.3f, -0.3f, -0.3f),\n        vec3(-0.3f, -0.3f, 0.3f), // Front left bottom\n\n        vec3(0.3f, -0.3f, -0.3f),\n        vec3(0.3f, -0.3f, 0.3f)  // Front right bottom\n    );\n    \n    uvec3 verticesIdx[12] = uvec3[12](\n        // Front surface\n        uvec3(1, 5, 7),\n        uvec3(1, 7, 3),\n        // Left surface\n        uvec3(1, 4, 5),\n        uvec3(0, 4, 1),\n        // Right surface\n        uvec3(3, 7, 2),\n        uvec3(7, 6, 2),\n        // Bottom surface\n        uvec3(5, 6, 7),\n        uvec3(5, 4, 6),\n        // Top surface\n        uvec3(1, 3, 2),\n        uvec3(2, 0, 1),\n        // Back surface\n        uvec3(0, 6, 4),\n        uvec3(0, 2, 6)\n    );\n    \n    float zc = 1.0f;\n    float angularSpeed = iTime * 10.0f / (2.0f * 3.14159265359f);\n    mat4 rotXMat = mat4(\n        1.0f, 0.0f, 0.0f, 0.0f,\n        0.0f, cos(angularSpeed), -sin(angularSpeed), 0.0f,\n        0.0f, sin(angularSpeed), cos(angularSpeed), 0.0f,\n        0.0f, 0.0f, 0.0f, 1.0f\n    );\n    mat4 rotYMat = mat4(\n        cos(angularSpeed), 0.0f, sin(angularSpeed), 0.0f,\n        0.0f, 1.0f, 0.0f, 0.0f,\n        -sin(angularSpeed), 0.0f, cos(angularSpeed), 0.0f,\n        0.0f, 0.0f, 0.0f, 1.0f\n    );\n    mat4 perspectiveMat = mat4(\n        1.0f, 0.0f, 0.0f, 0.0f,\n        0.0f, 1.0f, 0.0f, 0.0f,\n    \t0.0f, 0.0f, 1.0f, 1.0f/-zc,\n        0.0f, 0.0f, 0.0f, 1.0f\n    );\n    mat4 st = mat4(\n        1.0f, 0.0f, 0.0f, 0.0f,\n        0.0f, 1.0f, 0.0f, 0.0f,\n    \t0.0f, 0.0f, 1.0f, 0.0f,\n        0.0f, 0.0f, 0.0f, 1.0f\n    );\n    for (int i = 0; i < 8; ++i)\n    {\n        vec4 verticesInPerspective = st * perspectiveMat * rotXMat * rotYMat * vec4(vertices[i], 1.0f);\n        vertices[i] = verticesInPerspective.xyz / verticesInPerspective.w;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5f;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 color = vec3(0.0f, 0.0f, 0.0f);\n    \n    for (int i = 0; i < 12; ++i)\n    {\n        if (\n#ifdef BACKFACE_CULLING\n            dot(\n            \tcross(\n                    vertices[verticesIdx[i][1]] - vertices[verticesIdx[i][0]],\n                    vertices[verticesIdx[i][2]] - vertices[verticesIdx[i][1]]),\n                vec3(0.0f, 0.0f, -1.0f)\n            ) < 0.0f &&\n#endif\n            isInsideTriangle(\n            uv,\n            vec2(vertices[verticesIdx[i][0]]),\n            vec2(vertices[verticesIdx[i][1]]),\n            vec2(vertices[verticesIdx[i][2]])))\n        {\n\t\t\tcolor.r = float(i)/12.0;\n            color.g = float(i)/12.0;\n            color.b = (12.0-float(i))/12.0;\n        }\n    }\n\n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}