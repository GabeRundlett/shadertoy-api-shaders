{
    "Shader": {
        "info": {
            "date": "1504772750",
            "description": "Based on a conway's life-inspired model described at https://link.springer.com/chapter/10.1007/97.  MOUSE CLICK RESETS THE MODEL so you can restart while in full screen!  new births get the average color of the neighbors so gradual color blending occurs.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlXyWN",
            "likes": 4,
            "name": "Life-like automaton w/blending",
            "published": 3,
            "tags": [
                "conway"
            ],
            "usePreview": 0,
            "username": "tomviolin",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "#define SIZE 5.\n#define KEEPMIN 34.\n#define KEEPMAX 59.\n#define BORNMIN 34.\n#define BORNMAX 48.\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nfloat rand(vec2 cop){\n    vec2 co=cop+vec2(iTime*.005, iTime*.006); \n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec4 tex(sampler2D samp, vec2 fc) {\n    return texture(samp,fc/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 nfc=fragCoord/iResolution.xy;\n\t    //fragColor = vec4(0,fragCoord.x/iResolution.x,0,1); //texture(iChannel0,fragCoord);\n  \n    vec4 thisp = texture(iChannel1,nfc);\n\tvec4 fg = thisp;\n//fragColor=vec4(vec3(thisp.a),1.); return;\n    \n\tfragColor = vec4(hsv2rgb(vec3(thisp.y,1.,thisp.x)),1);\n\t//fragColor = vec4(vec3(fragColor.x),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n#define SIZE 3.\n#define KEEPMIN 6.\n#define KEEPMAX 5.\n#define BORNMIN 11.\n#define BORNMAX 23.\n*/\n\n\n\n#define SIZE 5.\n#define KEEPMIN 34.\n#define KEEPMAX 59.\n#define BORNMIN 34.\n#define BORNMAX 48.\n\n\n\nfloat rand(vec2 cop){\n    vec2 co=cop+vec2(iTime*.005, iTime*.006); \n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat rand2(vec2 cop){\n    vec2 co=cop+vec2(iTime*.0034, iTime*.0023334); \n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec4 tex(sampler2D samp, vec2 fc) {\n    return texture(samp,fc/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pu = 1./iResolution.xy;\n    vec2 nfc=fragCoord/iResolution.xy;\n\n    if ( iFrame==0 || iMouse.z > 0. ) {\n        //fragColor = vec4(rand(nfc)>.5?1.:0.,rand2(nfc.yx),0,1);//rand(nfc+5.),rand(nfc+8.),1);\n        float c=pow(floor(nfc.x*3.)/3.,1.);\n        float cell=rand2(nfc)>.7?1.:0.;\n        float period = mod(nfc.x*3.,1.);\n        if (period < 1./3. || period > 2./3.) {\n            cell=0.;\n        }\n        if (nfc.y < 0.2 || nfc.y > 0.8) cell=0.;\n        if (cell==0.) c=-.50;\n        fragColor = vec4(cell,c,0,cell);//rand(nfc+5.),rand(nfc+8.),1);\n        return;\n    }\n\n\n    vec4 self=texture(iChannel1, nfc);\n    //fragColor=vec4(self.xyzw);\n    \n    vec4 oldstate = texture(iChannel0,nfc);\n    float result=0.;\n    float rcolor = oldstate.y;\n    if (self.x == 1. && ((self.z >= KEEPMIN && self.z <= KEEPMAX))) {\n        result=1.;\n        rcolor=self.y;\n    } else if (self.x == 0. && ((self.z >= BORNMIN && self.z <= BORNMAX))) {\n        result=1.;\n        rcolor=self.a;\n    }\n\tfloat v=oldstate.a*.999;\n    fragColor = vec4(result,rcolor,0.,v);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n#define SIZE 3.\n#define KEEPMIN 6.\n#define KEEPMAX 5.\n#define BORNMIN 11.\n#define BORNMAX 23.\n*/\n#define SIZE 5.\n#define KEEPMIN 34.\n#define KEEPMAX 59.\n#define BORNMIN 34.\n#define BORNMAX 48.\n\n\nfloat rand(vec2 cop){\n    vec2 co=cop+vec2(iTime*.005, iTime*.006); \n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec4 tex(sampler2D samp, vec2 fc) {\n    return texture(samp,fc/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 nfc=fragCoord/iResolution.xy;\n    //fragColor = vec4(0,nfc.x,0,1); //texture(iChannel0,fragCoord);\n    \n\tvec2 pu = 1./iResolution.xy;\n    \n    vec3 nn=vec3(0,0,0);\n    vec4 self = texture(iChannel0,nfc);\n    for (int xi = -int(SIZE);xi<=int(SIZE);++xi){\n        for (int yi=-int(SIZE);yi<=int(SIZE);++yi) {\n            float xr=nfc.x+float(xi)*pu.x;\n            float yr=nfc.y+float(yi)*pu.y;\n            vec2 mm = texture(iChannel0, mod(vec2(xr,yr),1.)).xy;\n            //mm.x = mm.x * (1.+mm.x*self.x*(abs(mm.y-self.y))+);\n            nn.xy += mm;\n            nn.z += mm.x*mm.y;\n        }\n    }\n    float sum = nn.x;\n    float cvg = nn.z;\n\tcvg=cvg/sum;\n    cvg = floor(cvg*12.+.5)/12.;\n\tfragColor = vec4(self.x,self.y,sum,cvg);    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}