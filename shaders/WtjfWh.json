{
    "Shader": {
        "info": {
            "date": "1598836520",
            "description": "Source : https://www.youtube.com/watch?v=l-07BXzNdPw\nMy Game :  https://play.google.com/store/apps/details?id=com.BigBUFF.OnetIconConnect",
            "flags": 0,
            "hasliked": 0,
            "id": "WtjfWh",
            "likes": 5,
            "name": "26. Voroni Noise",
            "published": 3,
            "tags": [
                "voroninoise"
            ],
            "usePreview": 0,
            "username": "altera0",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "#define S( a , b , t ) smoothstep( a , b , t )\n\nvec2 N22( vec2 p ) {\n\tvec3 a = fract( p.xyx * vec3( 123.34 , 234.34 , 345.65));\n    a += dot (a , a + 34.45 );\n    return fract( vec2( a.x * a.y , a.y * a.z ) );\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.0 * fragCoord - iResolution.xy ) /iResolution.y;\n\n    vec3 col = vec3(0);\n\n    float m = 0.0;\n    \n    float minDist = 100.0;\n    float cellIndex = 0.0;\n    \n    if ( false ) {\n\t    for ( float i = 0.0 ; i < 50.0 ; i++ ) {\n        \tvec2 n22 = N22( vec2(i , i )) ;\n    \t\tvec2 p = sin( n22 * iTime );\t\t\t// 하나의 UV 마다 50개 전체에 대해서 전부다 공을 만들어서 거리를 비교한다.\n        \n        \tfloat dist = length( uv - p );\n        \t//float dist = distance( uv , p );\n        \n        \tm += S( 0.015, 0.01 , dist );\n        \n        \tif ( dist < minDist ) {\n    \t    \tminDist = dist;\n\t            cellIndex = i;\n        \t}\n    \t} \n   \t\tcol = vec3( minDist );\n\n    } else {\n    \n    \tuv *= 3.0;\n        vec2 gv = fract(uv) - 0.5;\n        vec2 id = floor(uv);\n    \tvec2 cellId = vec2(0);\n        \n        \n        for ( float y = -1.0 ; y <= 1.0 ; y++ ) \n            for ( float x = -1.0 ; x <=1.0 ; x++ ) {\n\t            \n                vec2 offset = vec2( x , y );\n                vec2 n = N22( id + offset );\n                vec2 p = offset + sin( iTime * n ) * 0.3;\n                             \n                float dist = length( gv - p );\n                \n                col += S( 0.03, 0.01 , dist );\n                             \n                if ( dist < minDist ) {\n                \tminDist = dist;   \n                    cellId = id + offset;\n                }\n            \n            }\n       \t\tcol = col + vec3( minDist );\n\t\t    col.rg = cellId * 0.1;\n }\n    \n    \n    \n    \n    \n    \n    \n    fragColor = vec4(col,1.0);\n}\n\n\n/*\n\t1. 기본 아이디어\n\t\t\n\t\t2D 공간에 랜덤하게 점을 찍고 가장 가까운 점들 끼리, 연결하여 색깔을 나타낸다.\n\n\t\t현재의 UV에서 가장 가까운 점까지의 거리의 값을 smoothStep()하면 그것이 [ 보르노이 패턴 선 ]이 된다.\n\n\t2. N22() 함수 만들기\n\n\t\t* Fract()와 곱하기의 조화\n\n\t3. 랜덤한 공 50개를 생성 ( for Loop )\n\n\t4. 가장 가까운 cell 인덱스를 찾는다.\n\n\t5. 이런식의 ( 모든 반복 )은 포인트가 많아 질수록 너무 많은 연산을 필요로 한다.\n\n\t\t* 따라서 이걸 바꾼다.\n\n\t6. 셀을 나누고,  ID와 GV만을 가지고, 주위 9개의 셀과의 연산만을 하도록 한다.\n\n\t\t* Universe에서 했던것과 같다.\n\n\t7. 셀에서 각지는 부분은 Sin() * 0.5를 해서 -0.5와 0.5 사이의 값으로 확실히 만들어 둔다.\n\n\t8. 맨해턴 디스턴스 부분이 있는데, 이건 별다른 의미가 없는 것 같다.\n\n\n*/\n\n/* 공통 아이디어 \n\n\t1. 1보다 작은 수가 필요할때 ==> Fract()\n\t2. 무빙이 필요할때 ==> Sin() cos()\n\t3. 랜덤 무빙이 필요할따. Fract(), sin(), Cos() 조합해서 사용\n\n\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}