{
    "Shader": {
        "info": {
            "date": "1612169670",
            "description": "Computing the distance to an ellipse like in [url]https://www.shadertoy.com/view/4lsXDN[/url] but without trigonometric functions (not necessarily faster). Also see [url]https://www.shadertoy.com/view/4sS3zz[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tttfzr",
            "likes": 10,
            "name": "Ellipse - distance 2D II No Trig",
            "published": 3,
            "tags": [
                "2d",
                "distance",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1199
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computing the distance to an ellipse like in \n// https://www.shadertoy.com/view/4lsXDN, ie, using a\n// Newtwon root solver, but realizing that the deltas\n// in the variable of the solver can be interpreted as\n// rotations, hence removing all sin/cos calls, but\n// introducing a square root. This might or might not\n// be any faster than the trigonometric version, since\n// GPUs are really good at trigs.\n//\n// More information here:\n//\n// https://iquilezles.org/articles/ellipsedist\n//\n//\n// Ellipse distances related shaders:\n//\n// Analytical     : https://www.shadertoy.com/view/4sS3zz\n// Newton Trig    : https://www.shadertoy.com/view/4lsXDN\n// Newton No-Trig : https://www.shadertoy.com/view/tttfzr \n// ?????????????? : https://www.shadertoy.com/view/tt3yz7\n//\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and https://iquilezles.org/articles/distfunctions2d\n\n\nfloat sdEllipse( vec2 p, vec2 ab )\n{\n    // symmetry\n\tp = abs( p );\n    \n    // initial value\n    vec2 q = ab*(p-ab);\n    vec2 cs = normalize( (q.x<q.y) ? vec2(0.01,1) : vec2(1,0.01) );\n    \n    // find root with Newton solver (see https://www.shadertoy.com/view/4lsXDN)\n    for( int i=0; i<5; i++ )\n    {\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        \n        float a = dot(p-u,v);\n        float c = dot(p-u,u) + dot(v,v);\n        float b = sqrt(c*c-a*a);\n        \n        cs = vec2( cs.x*b-cs.y*a, cs.y*b+cs.x*a )/c;\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*cs);\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\n    vec2 ra = vec2(0.5,0.2) + 0.2*cos(iTime*vec2(1.1,1.3)+vec2(0.0,1.0) );\n    \n\tfloat d = sdEllipse( p, ra );\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdEllipse(m, ra);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}