{
    "Shader": {
        "info": {
            "date": "1551428943",
            "description": "easy draw 2d shadow.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlXW7",
            "likes": 5,
            "name": "2d shadow",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "titanswhale",
            "viewed": 731
        },
        "renderpass": [
            {
                "code": "/*     painter’s algorithm:\n1.draw background\n2.draw light\n3.draw shadow\n4.draw box\n\n\nu can calculate the shadow region in cpu .\ndont like this calculate shadow region in fragment process .\n\n\n*/\n\n\n\n\n\nvec2 box = vec2(0.6,0.6);\nfloat boxHeight=0.10;\nvec3 boxColor=vec3(1.,0.,0.);\n\nvec2 lightCenter = vec2(0.5,0.5);\nfloat lightLenth = 0.60;\nfloat a=1.;\t\t\t\t//metaball 缩放比例\n\nvec3 lightColor = vec3(1.0,1.0,1.0);\nvec3 bgColor = vec3(0,0,0);\n\nbool inRect(vec2 t,vec2 p1,vec2 p2,vec2 p3,vec2 p4)//点是否在矩形内部1测试的点,2绘制的四边形\n{\n    vec3 v1=vec3(p1-t,0.0);\n    vec3 v2=vec3(p2-t,0.0);\n    vec3 v3=vec3(p3-t,0.0);\n    vec3 v4=vec3(p4-t,0.0);\n    \n    float a= cross(v1,v2).z;\n    float b= cross(v2,v3).z;\n    float c= cross(v3,v4).z;\n    float d= cross(v4,v1).z;\n    \n    if((a > 0. && b > 0. && c > 0. && d > 0.) || (a < 0. && b < 0. && c < 0. && d < 0.)) \n            return true;\n    return false;\n}\n\nbool draw(vec2 p1,vec2 p2,vec2 c,vec2 uv)//绘制阴影1第一个点,2第二个点,3光心,4uv\n{\n    //获得向量\n    vec2 v1 = p1-c;\n    vec2 v2 = p2-c;\n    \n    v1=normalize(v1);\n    v2=normalize(v2);\n    \n    //获得点\n    vec2 p3=c+v2*2.0;\n    vec2 p4=c+v1*2.0;\n    \n    //绘制点\n    if(inRect(uv,p1,p2,p3,p4))\n    \treturn true;\n    return false;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    box.x=sin(iTime*0.5)*0.3+0.5;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\t\n    \n    //绘制背景\n    vec3 col=bgColor;\n    \n    //绘制metaball\n    float r=distance(lightCenter,uv);\n    \n\tif(r<lightLenth)\n    {\n        float temp=r*r/lightLenth/lightLenth;\n       \ttemp=1.0-temp;\n        temp*=temp;\n        temp*=a;\n        \n    \tcol=temp*lightColor;\n     \n    }   \n\t//绘制阴影\n    \n    vec2 p1 = box;\n    vec2 p2 = vec2(box.x+boxHeight,box.y);\n    vec2 p3 = vec2(box.x,box.y+boxHeight);\n    vec2 p4 = vec2(box.x+boxHeight,box.y+boxHeight);\n    \n    \n    \n    vec2 v1 = p1-lightCenter;\n    vec2 v2 = p2-lightCenter;\n    vec2 v3 = p3-lightCenter;\n    vec2 v4 = p4-lightCenter;\n    \n    v1=normalize(v1);\n    v2=normalize(v2);\n    v3=normalize(v3);\n    v4=normalize(v4);\n    \n    \t//找到最大夹角两个点\n    vec2 outp1=p1;\n    vec2 outp2=p2;\t\t\t\t\t\t\t//1\n    float temp=dot(v1,v2);\n    float min=temp;\n    \n    temp = dot(v1,v3);\t\t\t\t\t\t\t//2\n    if(temp<min)\n    {\n        outp1=p1;\n        outp2=p3;\n        min=temp;\n    }\n    \n    temp = dot(v1,v4);\t\t\t\t\t\t\t//3\n    if(temp<min)\n    {\n        outp1=p1;\n        outp2=p4;\n        min=temp;\n    }\n    \n    temp = dot(v2,v3);\t\t\t\t\t\t\t//4\n    if(temp<min)\n    {\n        outp1=p2;\n        outp2=p3;\n        min=temp;\n    }\n    \n    temp = dot(v2,v4);\t\t\t\t\t\t\t//5\n    if(temp<min)\n    {\n        outp1=p2;\n        outp2=p4;\n        min=temp;\n    }\n    \n    temp = dot(v3,v4);\t\t\t\t\t\t\t//6\n    if(temp<min)\n    {\n        outp1=p3;\n        outp2=p4;\n        min=temp;\n    }\n    \n  \tif(draw(outp1,outp2,lightCenter,uv))\n       col=bgColor;\n    \n    \n    //绘制box\n    if(uv.x<box.x+boxHeight&&uv.x>box.x)\n        if(uv.y<box.y+boxHeight&&uv.y>box.y)\n        {\n            col=boxColor;\n        }\n    \n    if(distance(uv,lightCenter)<0.01)\n        col=vec3(0,1.0,0.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}