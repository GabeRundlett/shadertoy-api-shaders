{
    "Shader": {
        "info": {
            "date": "1718629256",
            "description": "did y'all know the truncated octahedron can tile 3d space?  interesting possibilities",
            "flags": 32,
            "hasliked": 0,
            "id": "X3tSzH",
            "likes": 11,
            "name": "truncated octahedron",
            "published": 3,
            "tags": [
                "raymarch",
                "volumetric",
                "glow"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "//philip,bertani@gmail.com\n//Buffer A is where it is at\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    //distance the ray travelled was saved in alpha channel\n    float maxDist = texture(iChannel0,uv).a;\n    \n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n    \n    fragColor = .2e2*total_color*exp(-maxDist*maxDist/4.);\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n        \n        \n        \n//hard coding the vertices for a truncated octahedron\n\nvec3[] d14 = vec3[]  (\nvec3(0,1,2),\nvec3(0,-1,2),\nvec3(0,1,-2),\nvec3(0,-1,-2),\nvec3(1,0,2),\nvec3(-1,0,2),\nvec3(1,0,-2),\nvec3(-1,0,-2),\nvec3(2,0,1),\nvec3(2,0,-1),\nvec3(-2,0,1),\nvec3(-2,0,-1),\nvec3(1,2,0),\nvec3(-1,2,0),\nvec3(1,-2,0),\nvec3(-1,-2,0),\nvec3(0,2,1),\nvec3(0,2,-1),\nvec3(0,-2,1),\nvec3(0,-2,-1),\nvec3(2,1,0),\nvec3(2,-1,0),\nvec3(-2,1,0),\nvec3(-2,-1,0)\n);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvec3 ifs_color, ro, tc;\nfloat ifs_scale = 1.3, maxDist;\n\nmat2 rot(float a) {return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat de(vec3 z) {\n    \n    vec3 orig_z = z;\n    \n    z.xy *= rot(iTime/2.);\n    z.yz *= rot(6.17/10.+iTime/3.);\n    z.xz *=  rot(5.5/7.+iTime/5.);   \n    vec3 min_vtx;\n\n    int n=0;\n    float min_dist,dist_to_vtx;\n    ifs_color = vec3(0.);\n    for (int i=0; i<4; i++) { \n        min_vtx = d14[0];\n        min_dist=length(z-d14[0]);\n        for (int j=1; j<24; j++) {    \n            dist_to_vtx=length(z-d14[j]); \n            if (dist_to_vtx<min_dist) {min_vtx=d14[j]; min_dist=dist_to_vtx;}   \n        }\n        z = min_vtx + ifs_scale*(z-min_vtx);    \n        n++;\n    }\n \n    float lz = length(z);\n    float dz = pow(ifs_scale, float(n) );\n    \n    vec3 cc = cos(z/dz*5.);\n    \n    ifs_color = cc; \n    return lz / dz; \n\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t = 0.0,d;\n    for(float i = 0.; i < 10.; i++) {\n        d = de(ro + rd*t); \n        t += .7*d; \n        tc += ifs_color*ifs_color*exp(-i*i/5e1);\n    }  \n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float t = march(ro, rd);\n    maxDist = t;   \n    return tc;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y*.5;\n    ro = vec3(0,0,-4.5); \n    vec3 rd = normalize( vec3(p,1.4) );\n    \n    vec3 col = render(ro, rd);\n    col = 1. - exp(-col);\n    fragColor = vec4( pow(col,vec3(16.)), maxDist);\n    \n   \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}