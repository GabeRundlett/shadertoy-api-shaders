{
    "Shader": {
        "info": {
            "date": "1727140617",
            "description": "This performs ray marching on a 3-sphere embedded in four dimensional Euclidean space. The camera is moving with a constant velocity.",
            "flags": 0,
            "hasliked": 0,
            "id": "l3SyDz",
            "likes": 2,
            "name": "S3_Raymarching",
            "published": 3,
            "tags": [
                "noneuclidean"
            ],
            "usePreview": 0,
            "username": "DiophantineHydrogen",
            "viewed": 48
        },
        "renderpass": [
            {
                "code": "//This performs ray marching on a 3-sphere embedded in four dimensional Euclidean space. The camera is moving with a constant velocity.\n//This is based on the introduction to manifolds in Professor Nicolas Boumal's \"Introduction to Optimization on Smooth Manifolds\" and in the associated edX class (https://www.nicolasboumal.net/book/).\n\nvec4 retract(vec4 x, vec4 v)\n{\n    float normV = dot(v,v); //The squared norm\n    \n    normV = sqrt(normV); //Take the square root of this\n    \n    vec4 newX;\n    \n    if(normV > 0.0) {\n        newX = cos(normV)*x + (sin(normV)/normV)*v;\n    } else {\n        newX = x;\n    }\n    \n    return newX;\n}\n\nvec4 parallelTransport(vec4 x, vec4 v, vec4 u, float t)\n{\n    //(I + (cos(t||v||) - 1)v*v.T/(||v||^2) - sin(||v||)x*v.T/||v||)*u\n    return u + v*(dot(v, u)/dot(v,v))*(cos(t*sqrt(dot(v,v))) - 1.0) - x*(sin(t*sqrt(dot(v,v)))*dot(v, u)/sqrt(dot(v,v)));\n}\n\n//This is a metric retraction, just for experimentation\nvec4 metricRetract(vec4 x, vec4 v)\n{\n    vec4 newX = x + v;\n    \n    float newXNorm = sqrt(newX.x*newX.x + newX.y*newX.y + newX.z*newX.z + newX.w*newX.w);\n    \n    newX = newX/newXNorm;\n    \n    return newX;\n}\n\nfloat getDist(vec4 x, vec4 y)\n{\n    float cosTheta = dot(x,y);\n    \n    return acos(cosTheta);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool OCTANT_COLORING = false; //Color the target sphere by octant?\n    bool CONTOUR_COLORING = true; //Color the target sphere with contours?\n    bool WIDE_ANGLE = false; //Use a wide angle view?\n    \n    //Move the camera with some velocity\n    //The former leaves the target at the \"pole\" and orbits an \"equator\"\n    //vec4 cameraVelocity = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 cameraVelocity = vec4(0.0, 0.13, -0.23, 1.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    \n    uv.x = uv.x - 0.5;\n    uv.y = uv.y - 0.5*(iResolution.y/iResolution.x);\n    \n    if(WIDE_ANGLE) {\n        uv.x = 4.0*uv.x;\n        uv.y = 4.0*uv.y;\n    }\n    \n    vec4 cameraPos = vec4(1.0, 0.0, 0.0, 0.0); //Place the camera at (1, 0, 0, 0)\n    \n    vec4 initialCameraPos = cameraPos;\n    \n    float cameraTime = iTime;\n    \n    cameraPos = retract(cameraPos, cameraTime*cameraVelocity);//retract(cameraPos, 0.5*iTime*cameraVelocity);\n    \n    vec4 targetPos = vec4(0.0, 1.0, 0.0, 0.0); //Our target is at (0, 1, 0, 0)\n    \n    float R = 0.25; //What is the radius of the target?\n    float MAX_DISTANCE = 10.0; //iTime; //Stop iterating once t grows past this\n    \n    //vec4 v = vec4(0.0, 1.0, 0.0, 0.0); //This is in T_x(M)\n    vec4 v = vec4(0.0, 1.0, uv.x, uv.y); //This is also in T_x(M) at t = 0\n    \n    //Rotate this around the x axis...\n    float theta = 0.0;//0.2*iTime;\n    \n    mat4 rotation = mat4(1.0, 0.0, 0.0, 0.0,\n                         0.0, cos(theta), -sin(theta), 0.0,\n                         0.0, sin(theta), cos(theta), 0.0,\n                         0.0, 0.0, 0.0, 1.0);\n    v = rotation*v;\n    \n    //Apply a parallel transport to v, as we are not necessarily at t = 0\n    v = parallelTransport(initialCameraPos, cameraVelocity, v, cameraTime/*iTime*/);\n    \n    //Divide this by the norm...\n    float normV = sqrt(dot(v, v));\n    \n    v = v/normV;\n    \n    vec4 x = cameraPos;\n    \n    //Get the distance...\n    float dist = getDist(cameraPos, targetPos) - R;\n    float t = 0.0; //Our distance parameter\n    \n    while(dist > 0.001 && t < MAX_DISTANCE) {\n        t += dist; //> 0, as dist > R\n        x = retract(cameraPos, t*v);\n        \n        dist = getDist(x, targetPos) - R;\n    }\n    \n    // Pixel color\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    if(dist <= 0.001) {        \n        col = vec3(0.5, 0.5, 0.5);\n        \n        if(CONTOUR_COLORING) {\n            if(abs(5.0*x.x - float(int(5.0*x.x))) < 0.01) {\n                col.x = 1.0;\n            } else {\n                col.x = 0.25;\n            }\n\n            if(abs(5.0*x.z - float(int(5.0*x.z))) < 0.01) {\n                col.y = 1.0;\n            } else {\n                col.y = 0.25;\n            }\n\n            if(abs(5.0*x.w - float(int(5.0*x.w))) < 0.01) {\n                col.z = 1.0;\n            } else {\n                col.z = 0.25;\n            }\n        }\n        \n        if(OCTANT_COLORING) {\n            if(x.x > 0.0) {\n                col.x = 1.0;\n            } else {\n                col.x = 0.25;\n            }\n\n            if(x.z > 0.0) {\n                col.y = 1.0;\n            } else {\n                col.y = 0.25;\n            }\n\n            if(x.w > 0.0) {\n                col.z = 1.0;\n            } else {\n                col.z = 0.25;\n            }\n        }\n        \n        /*if(t > 3.1415/2.0) {\n            col.x = 1.0;\n        }*/\n    }\n    \n    //Debug code that displays a minimap of where the camera is on the xw \"equator\"\n    /*if(uv.x < -0.25 && uv.y < -0.25*(iResolution.y/iResolution.x)) {\n        vec2 adjustedUV = vec2(uv.x + 0.375, uv.y + 0.375*(iResolution.y/iResolution.x));\n        adjustedUV /= 0.05;\n        \n        if(dot(cameraPos.xw - adjustedUV, cameraPos.xw - adjustedUV) < 0.1) {\n            col = vec3(0.0, 1.0, 0.0);\n        } else if(abs(dot(adjustedUV, adjustedUV) - 1.0) < 0.1) {\n            col = vec3(0.0, 0.0, 0.5);\n        } else {\n            col = vec3(0.0, 0.0, 0.0);\n        }\n    }*/\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}