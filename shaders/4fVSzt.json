{
    "Shader": {
        "info": {
            "date": "1715624873",
            "description": "Use the keys Z and X to zoom in and out, and use the mouse to pan around :)",
            "flags": 48,
            "hasliked": 0,
            "id": "4fVSzt",
            "likes": 14,
            "name": "Interactive 2D Minecraft",
            "published": 3,
            "tags": [
                "2d",
                "sidescroller",
                "minecraft",
                "scroller"
            ],
            "usePreview": 0,
            "username": "ianertson",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define T (iTime)\n#define M_PI 3.14159265358979323846264338327950288\n#define TAU (M_PI*2.0)\n#define ZERO min(0, iFrame)\n\n// Change this to get another world :)\n#define SEED 10471.071210177033\n// Change this to control peaks\n#define AMPLITUDE 12.0\n// Change to add more layers\n#define NUM_LAYERS 3\n\nuint pixels0[] = uint[](\n  0xff3b9b18U, 0xff338516U, 0xff358a17U, 0xff328116U, 0xff3b9b18U, 0xff338416U, 0xff3b9b18U, 0xff358916U, 0xff358916U, 0xff399318U, 0xff3b9b18U, 0xff399318U, 0xff3da219U, 0xff2f7814U, 0xff399318U, 0xff358916U,\n  0xff3b9b18U, 0xff328116U, 0xff3b9b18U, 0xff338516U, 0xff3da219U, 0xff293d59U, 0xff3b9b18U, 0xff2f7814U, 0xff3da119U, 0xff358a17U, 0xff3b9b18U, 0xff348716U, 0xff3b9a18U, 0xff338216U, 0xff3b9b18U, 0xff328115U,\n  0xff358b17U, 0xff293d59U, 0xff3da219U, 0xff307a15U, 0xff3b9b18U, 0xff293d59U, 0xff338516U, 0xff293d59U, 0xff3b9b18U, 0xff399318U, 0xff358a17U, 0xff3da019U, 0xff293d59U, 0xff2c6f14U, 0xff358a17U, 0xff293d59U,\n  0xff293d59U, 0xff6c6c6cU, 0xff293d59U, 0xff293d59U, 0xff348716U, 0xff293d59U, 0xff293d59U, 0xff293d59U, 0xff2f7614U, 0xff293d59U, 0xff338216U, 0xff293d59U, 0xff3a5579U, 0xff293d59U, 0xff293d59U, 0xff3a5579U,\n  0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff5c85b9U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff293d59U, 0xff293d59U, 0xff6c6c6cU, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U,\n  0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff293d59U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U,\n  0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff878787U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U,\n  0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U,\n  0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U,\n  0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff293d59U, 0xff5c85b9U, 0xff5c85b9U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff878787U, 0xff3a5579U,\n  0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff6c6c6cU, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U,\n  0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U,\n  0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff445874U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff293d59U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff878787U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U\n);\n\nuint pixels1[] = uint[](\n  0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff3a5579U, 0xff5c85b9U,\n  0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff878787U, 0xff293d59U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff293d59U, 0xff293d59U,\n  0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff293d59U, 0xff5c85b9U, 0xff3a5579U,\n  0xff4a6c96U, 0xff6c6c6cU, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff3a5579U,\n  0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff5c85b9U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U, 0xff6c6c6cU, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U,\n  0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff293d59U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U,\n  0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff878787U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U,\n  0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U,\n  0xff3a5579U, 0xff4a6c96U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff293d59U, 0xff293d59U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U,\n  0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff293d59U, 0xff5c85b9U, 0xff5c85b9U, 0xff293d59U, 0xff4a6c96U, 0xff4a6c96U, 0xff878787U, 0xff3a5579U,\n  0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff6c6c6cU, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U,\n  0xff3a5579U, 0xff293d59U, 0xff4a6c96U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff5c85b9U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff3a5579U, 0xff5c85b9U, 0xff5c85b9U,\n  0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff445874U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff293d59U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff3a5579U, 0xff293d59U, 0xff3a5579U, 0xff293d59U, 0xff5c85b9U, 0xff5c85b9U, 0xff3a5579U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U,\n  0xff4a6c96U, 0xff3a5579U, 0xff5c85b9U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff878787U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff3a5579U, 0xff4a6c96U, 0xff4a6c96U, 0xff3a5579U, 0xff293d59U\n);\n\nuint pixels2[] = uint[](\n  0xff263946U, 0xff335469U, 0xff36576cU, 0xff4c7b9bU, 0xff1d303dU, 0xff37586dU, 0xff467595U, 0xff213441U, 0xff305166U, 0xff325368U, 0xff315267U, 0xff3e627cU, 0xff37586dU, 0xff3e627cU, 0xff335469U, 0xff4d7c9cU,\n  0xff1f323fU, 0xff2f5065U, 0xff395a6fU, 0xff182b38U, 0xff1f323fU, 0xff497898U, 0xff213441U, 0xff305166U, 0xff4a7999U, 0xff1d303dU, 0xff325368U, 0xff4b7a9aU, 0xff263d4cU, 0xff3e627cU, 0xff263d4cU, 0xff467595U,\n  0xff1a2d3aU, 0xff2f4b5eU, 0xff2e4f64U, 0xff213441U, 0xff325368U, 0xff4a7999U, 0xff1e313eU, 0xff315267U, 0xff497898U, 0xff1c2f3cU, 0xff315267U, 0xff3e627cU, 0xff263d4cU, 0xff3e627cU, 0xff263d4cU, 0xff4a7999U,\n  0xff37586dU, 0xff253845U, 0xff2d4e63U, 0xff203340U, 0xff3e627cU, 0xff3e627cU, 0xff1e313eU, 0xff325368U, 0xff497898U, 0xff1c2f3cU, 0xff325368U, 0xff497898U, 0xff1d303dU, 0xff4d7c9cU, 0xff223542U, 0xff3e627cU,\n  0xff34556aU, 0xff213441U, 0xff36576cU, 0xff315267U, 0xff3e627cU, 0xff3e627cU, 0xff36576cU, 0xff315267U, 0xff38596eU, 0xff223542U, 0xff34556aU, 0xff4b7a9aU, 0xff1d303dU, 0xff4b7a9aU, 0xff1c2f3cU, 0xff3e627cU,\n  0xff36576cU, 0xff2f4b5eU, 0xff36576cU, 0xff305166U, 0xff4b7a9aU, 0xff325368U, 0xff305166U, 0xff34556aU, 0xff35566bU, 0xff1d303dU, 0xff335469U, 0xff406f8fU, 0xff1e313eU, 0xff3e627cU, 0xff203340U, 0xff315267U,\n  0xff325368U, 0xff3e627cU, 0xff263d4cU, 0xff36576cU, 0xff487797U, 0xff2c4d62U, 0xff325368U, 0xff1c2f3cU, 0xff427191U, 0xff1c2f3cU, 0xff3e627cU, 0xff2c4759U, 0xff172a37U, 0xff3e627cU, 0xff1e313eU, 0xff38596eU,\n  0xff35566bU, 0xff4b7a9aU, 0xff1e313eU, 0xff35566bU, 0xff4c7b9bU, 0xff1d303dU, 0xff4b7a9aU, 0xff213441U, 0xff4a7999U, 0xff1a2d3aU, 0xff3e627cU, 0xff263d4cU, 0xff305166U, 0xff3e627cU, 0xff1f323fU, 0xff38596eU,\n  0xff335469U, 0xff4a7999U, 0xff1f323fU, 0xff3a5b70U, 0xff457494U, 0xff213441U, 0xff335469U, 0xff203340U, 0xff335469U, 0xff223542U, 0xff447393U, 0xff1c2f3cU, 0xff36576cU, 0xff35566bU, 0xff1f323fU, 0xff3e627cU,\n  0xff335469U, 0xff4d7c9cU, 0xff263946U, 0xff315267U, 0xff37586dU, 0xff457494U, 0xff223542U, 0xff34556aU, 0xff34556aU, 0xff192c39U, 0xff467595U, 0xff223542U, 0xff35566bU, 0xff467595U, 0xff213441U, 0xff3e627cU,\n  0xff253845U, 0xff3e627cU, 0xff203340U, 0xff34556aU, 0xff315267U, 0xff477696U, 0xff1a2d3aU, 0xff2e4f64U, 0xff1e313eU, 0xff2f4b5eU, 0xff507f9fU, 0xff203340U, 0xff34556aU, 0xff4c7b9bU, 0xff233643U, 0xff467595U,\n  0xff1e313eU, 0xff3e627cU, 0xff1f323fU, 0xff315267U, 0xff395a6fU, 0xff4b7a9aU, 0xff223542U, 0xff4b7a9aU, 0xff182b38U, 0xff2f4b5eU, 0xff4e7d9dU, 0xff1d303dU, 0xff36576cU, 0xff487797U, 0xff1c2f3cU, 0xff4c7b9bU,\n  0xff1b2e3bU, 0xff4b7a9aU, 0xff192c39U, 0xff305166U, 0xff35566bU, 0xff4b7a9aU, 0xff182b38U, 0xff34556aU, 0xff1f323fU, 0xff2f5065U, 0xff487797U, 0xff1c2f3cU, 0xff34556aU, 0xff2c4d62U, 0xff203340U, 0xff497898U,\n  0xff213441U, 0xff37586dU, 0xff2f4b5eU, 0xff36576cU, 0xff325368U, 0xff3e627cU, 0xff263d4cU, 0xff38596eU, 0xff37586dU, 0xff2d4e63U, 0xff315267U, 0xff1d303dU, 0xff34556aU, 0xff457494U, 0xff4d7c9cU, 0xff1a2d3aU,\n  0xff1a2d3aU, 0xff315267U, 0xff487797U, 0xff203340U, 0xff35566bU, 0xff3e627cU, 0xff263d4cU, 0xff1e313eU, 0xff437292U, 0xff325368U, 0xff497898U, 0xff1b2e3bU, 0xff2f5065U, 0xff3e627cU, 0xff1d303dU, 0xff315267U,\n  0xff2f4b5eU, 0xff325368U, 0xff3e627cU, 0xff1e313eU, 0xff2e4f64U, 0xff335469U, 0xff325368U, 0xff203340U, 0xff335469U, 0xff36576cU, 0xff315267U, 0xff172a37U, 0xff315267U, 0xff335469U, 0xff2f5065U, 0xff3e627cU\n);\n\nuint pixels3[] = uint[](\n  0xff979797U, 0xff2c2c2cU, 0xffadadadU, 0xff9f9f9fU, 0xff5a5a5aU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff7f7f7fU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff565656U, 0xff2c2c2cU, 0xffabababU,\n  0xff878787U, 0xff2c2c2cU, 0xffbbbbbbU, 0xff999999U, 0xff2c2c2cU, 0xff545454U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff565656U, 0xff4e4e4eU, 0xff2c2c2cU, 0xffb3b3b3U, 0xffb4b4b4U, 0xff505050U, 0xff2c2c2cU, 0xff545454U,\n  0xff2c2c2cU, 0xff2c2c2cU, 0xff8f8f8fU, 0xff2c2c2cU, 0xff515151U, 0xffafafafU, 0xffa2a2a2U, 0xff2c2c2cU, 0xff9e9e9eU, 0xffaaaaaaU, 0xff5f5f5fU, 0xffb1b1b1U, 0xff949494U, 0xff2c2c2cU, 0xffb0b0b0U, 0xffabababU,\n  0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xffadadadU, 0xff8a8a8aU, 0xff2c2c2cU, 0xffabababU, 0xff9a9a9aU, 0xff4f4f4fU, 0xffafafafU, 0xff8b8b8bU, 0xff2c2c2cU, 0xffadadadU, 0xff9a9a9aU,\n  0xff2c2c2cU, 0xffa1a1a1U, 0xffa0a0a0U, 0xff2c2c2cU, 0xff2c2c2cU, 0xffa5a5a5U, 0xff525252U, 0xff2c2c2cU, 0xff999999U, 0xff8d8d8dU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff8d8d8dU, 0xff2c2c2cU, 0xff939393U, 0xff8a8a8aU,\n  0xff2c2c2cU, 0xffb0b0b0U, 0xff868686U, 0xff2c2c2cU, 0xff4f4f4fU, 0xff8d8d8dU, 0xff5d5d5dU, 0xff2c2c2cU, 0xff525252U, 0xff9a9a9aU, 0xff2c2c2cU, 0xff575757U, 0xff2c2c2cU, 0xff5b5b5bU, 0xff2c2c2cU, 0xff848484U,\n  0xff535353U, 0xff949494U, 0xff2c2c2cU, 0xff505050U, 0xff585858U, 0xff2c2c2cU, 0xffa2a2a2U, 0xffa7a7a7U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff656565U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff525252U, 0xff595959U, 0xff5c5c5cU,\n  0xffa2a2a2U, 0xffb6b6b6U, 0xff2c2c2cU, 0xffa6a6a6U, 0xffb5b5b5U, 0xff585858U, 0xffafafafU, 0xff919191U, 0xff2c2c2cU, 0xffa8a8a8U, 0xffbbbbbbU, 0xff535353U, 0xff2c2c2cU, 0xff525252U, 0xff2c2c2cU, 0xff626262U,\n  0xffb8b8b8U, 0xff8f8f8fU, 0xff2c2c2cU, 0xff9b9b9bU, 0xff949494U, 0xff545454U, 0xff979797U, 0xff919191U, 0xff2c2c2cU, 0xff949494U, 0xff919191U, 0xff2c2c2cU, 0xff2c2c2cU, 0xffbbbbbbU, 0xff9e9e9eU, 0xff565656U,\n  0xff8d8d8dU, 0xff4e4e4eU, 0xff2c2c2cU, 0xff595959U, 0xff8d8d8dU, 0xff2c2c2cU, 0xff9a9a9aU, 0xff2c2c2cU, 0xff565656U, 0xff2c2c2cU, 0xff959595U, 0xff2c2c2cU, 0xff565656U, 0xffacacacU, 0xff929292U, 0xff2c2c2cU,\n  0xff5f5f5fU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff4b4b4bU, 0xff585858U, 0xff2c2c2cU, 0xffa9a9a9U, 0xffabababU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff585858U, 0xff999999U, 0xff2c2c2cU, 0xff2c2c2cU,\n  0xffadadadU, 0xff2c2c2cU, 0xffadadadU, 0xffb4b4b4U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xffadadadU, 0xff999999U, 0xff2c2c2cU, 0xffabababU, 0xff878787U, 0xff2c2c2cU, 0xff515151U, 0xffa9a9a9U,\n  0xff8a8a8aU, 0xff2c2c2cU, 0xffb2b2b2U, 0xff999999U, 0xff2c2c2cU, 0xffacacacU, 0xffb3b3b3U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff898989U, 0xff2c2c2cU, 0xff949494U, 0xff909090U, 0xff2c2c2cU, 0xff4e4e4eU, 0xffa4a4a4U,\n  0xff939393U, 0xff2c2c2cU, 0xff5a5a5aU, 0xff929292U, 0xff2c2c2cU, 0xffa5a5a5U, 0xff8b8b8bU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff515151U, 0xff2c2c2cU, 0xff949494U, 0xff4f4f4fU, 0xffaeaeaeU, 0xffabababU, 0xff2c2c2cU,\n  0xff666666U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff5a5a5aU, 0xff5c5c5cU, 0xff868686U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff646464U, 0xff505050U, 0xff959595U, 0xff2c2c2cU, 0xffb2b2b2U, 0xff929292U, 0xff585858U,\n  0xffa3a3a3U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff2c2c2cU, 0xff9a9a9aU, 0xff2c2c2cU, 0xff535353U, 0xffabababU, 0xffafafafU, 0xff525252U, 0xff2c2c2cU, 0xff2c2c2cU, 0xff8f8f8fU, 0xff575757U, 0xffafafafU\n);\n\nuint pixels4[] = uint[](\n  0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U, 0xff8f8f8fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U,\n  0xff7f7f7fU, 0xff686868U, 0xff747474U, 0xff747474U, 0xff686868U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff686868U, 0xff7f7f7fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U,\n  0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff686868U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff686868U, 0xff7f7f7fU,\n  0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff808080U, 0xff7f7f7fU, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U,\n  0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff686868U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U, 0xff8f8f8fU, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU,\n  0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff686868U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff747474U, 0xff686868U, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU,\n  0xff686868U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff686868U,\n  0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU,\n  0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff686868U, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU,\n  0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff7f7f7fU,\n  0xff747474U, 0xff747474U, 0xff747474U, 0xff747474U, 0xff686868U, 0xff8f8f8fU, 0xff8f8f8fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff7f7f7fU, 0xff747474U, 0xff747474U, 0xff747474U, 0xff7f7f7fU, 0xff7f7f7fU\n);\n\nuint getPixel32(vec2 uv, int i) {\n    ivec2 coord = clamp(ivec2(floor(uv * 16.0)), ivec2(0), ivec2(16));\n    int idx = clamp((256-1)-(coord.x + 16*coord.y), 0, 256-1);\n    switch (i) { case 0: return pixels0[idx];\n                 case 1: return pixels1[idx];\n                 case 2: return pixels2[idx];\n                 case 3: return pixels3[idx];\n                 case 4: return pixels4[idx];\n                 default: return pixels0[idx];}\n}\n\nvec3 getPixel(vec2 uv, int i) {\n    if (uv.x > 1.0 || uv.y > 1.0 || uv.x < 0.0 || uv.y < 0.0) return vec3(0.0);\n    uint pixel = getPixel32(uv, i);\n    uint r = (pixel >> (0U * 8U)) & 0xFFU;\n    uint g = (pixel >> (1U * 8U)) & 0xFFU;\n    uint b = (pixel >> (2U * 8U)) & 0xFFU;\n    return vec3(r, g, b) / float(0xFF);\n}\n\nmat2 rot(float a) { float s = sin(a); float c = cos(a); return mat2(c, s, -s, c); }\nvec3 aces(vec3 x) { return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.0,1.0); }\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\nfloat smin(float a, float b, float k) {float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0); return mix(a, b, h) - k*h*(1.0-h); }\nfloat smax(float a, float b, float k) {return smin(a, b, -k); }\nfloat sabs(in float v, in float k) {return smax(-v, v, k);}\nfloat sclamp(in float v, in float mi, in float ma, in float k) {return smin(smax(v, mi, k), ma, k);}\nfloat sgt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat slt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\n\nfloat hash(vec2 ip, float seed) {\n  uvec2 p = floatBitsToUint(ip); uint s = floatBitsToUint(seed+SEED); uvec2 k = ~p + ~s;\n  p ^= p << 17U; p ^= p >> 13U; p ^= p << 5U;\n  p += (p ^ k) + p * k; p *= 1013U; p ^= (p >> 4U);\n  return float(p.x * k.y + p.y + p.y * k.x + k.y) / float(0xFFFFFFFFU);\n}\n\nfloat noise(vec2 p, float s) {\n  p += 3.3828714;\n  vec2 id = floor(p); vec2 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n  return mix(mix(hash(id+vec2(0,0),s),hash(id+vec2(1,0),s),lv.x),\n             mix(hash(id+vec2(0,1),s),hash(id+vec2(1,1),s),lv.x),lv.y);\n}\n\nfloat noise(vec2 p, float s, float freq, const in int oct) {\n  float n = 0.0;\n  float div = 0.0;\n  float amp = 1.0;\n  for (int i = ZERO; i < oct; i++) {\n    n += amp*noise(p*freq,s);\n    div += amp;\n    amp *= 0.5;\n    freq *= 2.0;\n\n  }\n  return n / div;\n}\n\nvec3 sky(vec2 p) {\n    vec3 col = vec3(0.0);\n    float up = smax(0.05, -p.y, 0.15);\n    vec3 blue = pow(vec3(0.1, 0.2, 0.6), \n        vec3(mix(1.0, 10.0, smoothstep(0.0, 1.0, up))));\n    \n    col += blue;\n    return col;\n    \n}\n\nfloat getH(vec2 id, float k, float seed) {\n    return mix(noise(id.xx, seed+1.123125, 0.1, 1), 0.3333333, k*0.9);\n}\n\nfloat getTreeH(vec2 id, float k, float seed) {\n    return max((noise(id.xx, seed+77.753, 0.1, 1) * k*0.5), 4.0);\n}\n\n\nstruct Tree {\n  float h;\n  bool b;\n};\n\nTree hasTree(vec2 id, float k, float seed) {\n float h = getH(id, k, seed);\n float treeH = getTreeH(id, k, seed);\n float ks = seed  + 55.12913;\n bool b = hash(id.xx, ks) > 0.69 && id.y >= h\n        && hash(id.xx-1., ks) < 0.69 && id.y < (treeH+h);\n        \n return Tree(treeH, b);\n}\n\nvec3 world(vec2 p, float k, float seed, inout bool mask) {\n    vec3 col = vec3(0.0);\n    vec2 id = floor(p);\n    vec2 lv = fract(p);\n    float ks = seed + SEED;\n    mask = true;\n    \n    float h = getH(id, k, ks);\n    float dh = mix(noise(id*0.1, ks+18.7492871), 2.0, 1.5);\n    float treeH = 0.0;\n    Tree tree = hasTree(id, k, ks);\n    \n    Tree treeR = hasTree(vec2(id.x+1., id.y), k, ks);\n    Tree treeL = hasTree(vec2(id.x-1., id.y), k, ks);\n    \n    float mY = abs((id.y-h)-0.9*min(tree.h, min(treeR.h, treeL.h)));\n    if (tree.b || ((treeR.b || treeL.b)  && mY < 1.6)) {\n    \n        \n        if (mY < 1.6) {\n          return (getPixel(lv, 3)*vec3(0.4, 1, 0.09)) / M_PI;\n        }\n        \n        if (id.y < (tree.h+h)) {\n          return getPixel(lv, 2) / M_PI;\n        }\n        \n        \n    }\n    if (id.y < h) {\n        return getPixel(lv, id.y >= h-1. ? 0 : (id.y < h-dh) ? 4 : 1) / M_PI;\n    }\n    mask = false;\n    return sky(p/k);\n}\n\n\n\n\nvoid mainImage(out vec4 o, in vec2 fc)\n{\n    vec4 inp = texelFetch(iChannel0, ivec2(0), 0);\n    vec4 zm = texelFetch(iChannel0, ivec2(1, 0), 0);\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc.xy - 0.5 * R.xy) / R.y;\n    uv.y += 0.25;\n    uv *= clamp(zm.x, 8.0, 32.0);\n    \n    \n    float il = 1.0 / float(NUM_LAYERS);\n\n    for (int i = ZERO; i < NUM_LAYERS; i++) {\n      float a = float(i)*il;\n      vec2 p = uv - (inp.xy * (1.0 / (1.0 + a)));\n      p.y -= a*12.;\n      bool mask = false;\n      float zz = a*(1.0+a);\n      col = world(p*(1.0 + zz), AMPLITUDE, SEED+(a*10.12398123), mask);\n      if ((i < NUM_LAYERS-1) || mask) {\n          col  /= (1.0+4.0*zz);\n      }\n      if (mask) { break; }\n    }\n    col += col*luma(col);\n    col = aces(col);\n    col = pow(col, vec3(1.0 / 2.2));\n    o = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define T (iTime)\n#define BOUNDS_UP 16.0\n#define BOUNDS_DOWN 16.0\n\nvec4 _mouse_(in vec2 fc) {\n    vec4 m = vec4((iMouse.xy - 0.5 * R.xy) / R.y, iMouse.zw);\n    vec4 prev = texelFetch(iChannel0, ivec2(0, 0), 0);\n    float s = mix(12.0, 14.0, 0.5+0.5*cos(T));\n    vec2 pos = prev.xy;\n    vec2 vel = prev.zw;\n    \n    float dt = clamp(iTimeDelta, 0.0, 1.0);\n    \n    if (m.z > 0.001 && length(m.xy) > 0.0000000000000001) {\n        vel += m.xy*dt*s*length(m.xy);\n        pos += m.xy;\n    } else {\n        pos += vel*dt;\n    }\n    \n    \n    \n    if (pos.y < -BOUNDS_UP) { pos.y = -BOUNDS_UP; vel.y = 0.0; };\n    if (pos.y > BOUNDS_DOWN) { pos.y = BOUNDS_DOWN; vel.y = 0.0; }\n\n    \n    \n    vel = mix(vel, vec2(0.0), dt*0.1);\n    \n\n    return vec4(pos, vel);\n}\nvec4 _keyboard_(in vec2 fc) {\n  float zoom = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n  float Z = texelFetch(iChannel1, ivec2(90, 0), 0).x;\n  float X = texelFetch(iChannel1, ivec2(88, 0), 0).x;\n  \n  \n  if (Z > 0.0 && zoom < 32.0) {\n      zoom += 1.0*iTimeDelta*16.;\n  } else if (X > 0.0 && zoom > 8.0) {\n      zoom -= 1.0*iTimeDelta*16.;\n  }\n  \n  if (iFrame < 4) {\n      zoom = 16.0;\n  }\n\n  \n  return vec4(zoom);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fc )\n{\n    ivec2 c = ivec2(fc);\n    if (c.x <= 0) {\n        fragColor = _mouse_(fc);\n    } else {\n        fragColor = _keyboard_(fc);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}