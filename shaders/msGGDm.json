{
    "Shader": {
        "info": {
            "date": "1678633741",
            "description": "interpolation",
            "flags": 0,
            "hasliked": 0,
            "id": "msGGDm",
            "likes": 3,
            "name": "circle with different radius",
            "published": 3,
            "tags": [
                "interpolation"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\nfloat f_n_rand_dave_hoskins(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat f_n_noise_interpolated(\n    vec2 o\n){\n    vec2 o_xp0yp0 = o + vec2(0.,0.);\n    vec2 o_xp0yp1 = o + vec2(0.,1.);\n    vec2 o_xp1yp0 = o + vec2(1.,0.);\n    vec2 o_xp1yp1 = o + vec2(1.,1.);\n\n    float n_xp0yp0 = f_n_rand_dave_hoskins(floor(o_xp0yp0));\n    float n_xp0yp1 = f_n_rand_dave_hoskins(floor(o_xp0yp1));\n    float n_xp1yp0 = f_n_rand_dave_hoskins(floor(o_xp1yp0));\n    float n_xp1yp1 = f_n_rand_dave_hoskins(floor(o_xp1yp1));\n\n    vec2 o_fract = fract(o);\n    float n1 = \n        (1.-o_fract.x) * n_xp0yp0\n        + o_fract.x * n_xp1yp0;\n    float n2 = \n        (1.-o_fract.x) * n_xp0yp1\n        + o_fract.x * n_xp1yp1;\n    float n3 = \n        (1.-o_fract.y) * n1\n        + o_fract.y * n2;\n    \n    //float n_1 = mix(n_xp0yp0, n_xp1yp0, (o_fract.x));\n    //float n_2 = mix(n_xp0yp1, n_xp1yp1, (o_fract.x));\n    //float n_3 = mix(n_1, n_2, (o_fract.y));\n    return n3; \n}\nfloat f_n_noise_interpolated_stacked(\n    vec2 o, \n    float n_its, \n    float n_it_factor_freq,\n    float n_it_factor_amp\n){\n    float n_freq = 1.;\n    float n_amp = 1.;\n    float n_sum = 0.;\n    float n_factor_amp_sum = 0.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        n_freq *= n_it_factor_freq; \n        n_amp *= n_it_factor_amp;\n        n_factor_amp_sum += n_amp;\n        n_sum += f_n_noise_interpolated(o*n_freq)*n_amp;\n    }\n    return n_sum/n_factor_amp_sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_fc = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n\n\n    float n_ang_nor = fract(atan(o_fc.x, o_fc.y)/n_tau);\n    float n_noise_interpolated_stacked = f_n_noise_interpolated_stacked(\n        vec2(\n            sin((n_ang_nor+iTime*.01)*n_tau)*0.4,\n            cos((n_ang_nor+iTime*.01)*n_tau)*0.4\n        )+vec2(0.,iTime),\n        //o_fc*sin(iTime)*20.,\n        20., \n        6., \n        0.5\n    );\n    float n_dist = length(\n        o_fc\n        + (n_noise_interpolated_stacked-.5) * 0.1\n    );\n    float n_circ;\n\n    n_circ = smoothstep(0.2, 0., abs(n_dist-0.2));\n    if(o_fc.x > 0.){\n        n_circ = smoothstep(0.02, 0., abs(n_dist-0.2));    \n    }\n    fragColor = vec4(\n        n_circ\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}