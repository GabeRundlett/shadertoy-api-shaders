{
    "Shader": {
        "info": {
            "date": "1717437573",
            "description": "far from performant...\n\nreferences/inspiration:\nhttps://www.shadertoy.com/view/XdXXzf\nhttps://www.shadertoy.com/view/4fVXWt",
            "flags": 0,
            "hasliked": 0,
            "id": "lXKGRW",
            "likes": 7,
            "name": "eclipse ritual",
            "published": 3,
            "tags": [
                "moon",
                "eclipse",
                "geometry",
                "magiccircle",
                "summoningcircle"
            ],
            "usePreview": 0,
            "username": "technowizard",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "#define MOONS 24.\n#define SPEEDMOD .07\n#define GRID 96.\n#define RECTS 3.\n\nfloat circle (vec2 uv, float r1, float thickness, float bloom){\n    float p =0.;\n    float d = length(uv);\n    p+=1.-abs(r1-d);\n    float i = 1.-thickness;\n    bloom = (1.-i)*(bloom);\n    p=smoothstep(i,i+bloom,p);\n    return p;\n}\n\n\nvec2 displace(vec2 uv, float d) {\n    return uv+vec2(d,0.);\n}\n\nvec2 rotate(vec2 p, float rad) {\n    mat2 m = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n    return m * p;\n}\n\nvec2 project(vec2 uv, float amt) {  \n    mat3 warp = mat3(\n    1.0-amt/3.,0.0,0.0,\n    0.0,1.+amt,0.0,\n    0.0,0.-amt,1.0);\n    vec3 w = (vec3(uv.xy,1.) *warp);\n    return w.xy/w.z+vec2(0.,-amt*.5);\n}\n\nfloat rectangle(float pre/*existing color*/, vec2 p, vec2 half1, vec2 half2, float power) {\n    p = abs(p);\n    if ((half1.x<p.x || half1.y<p.y) && (p.x<half2.x && p.y<half2.y)) {\n        pre = max(0.01, pre);\n    }\n    float dx1 = (p.y < half1.y) ? abs(half1.x-p.x) : length(p-half1);\n    float dx2 = (p.y < half2.y) ? abs(half2.x-p.x) : length(p-half2);\n    float dy1 = (p.x < half1.x) ? abs(half1.y-p.y) : length(p-half1);\n    float dy2 = (p.x < half2.x) ? abs(half2.y-p.y) : length(p-half2);\n    float d = min(min(dx1, dx2), min(dy1, dy2));\n    float res = power / d;\n    return clamp(pre + res, 0.0, 1.0);\n}\n\nvec2 radMap(vec2 uv){\n    vec2 RadUv = vec2(0.,0.);    \n\tRadUv.x = ((atan(uv.x,uv.y) * 0.15915494309189533576888376337251 /*OneOverTau*/) ) +0.5;\n    RadUv.y = length(uv);\n    return RadUv;\n}\n\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nfloat noise( in vec2 p )\n{\n    vec2 i = vec2(floor( p ));\n    vec2 f = fract( p );\n\n    // cubic interpolant\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( Hash21( i + vec2(0.,0.) ), \n                     Hash21( i + vec2(1.,0.) ), u.x),\n                mix( Hash21( i + vec2(0.,1.) ), \n                     Hash21( i + vec2(1.,1.) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    //flatten\n    //uv*=vec2(.75,1.5);\n    uv = project(uv,.5);\n    \n    \n    // pixelate\n    uv = floor(uv*GRID)/GRID;\n    \n    // random\n    float n = Hash21(uv);\n    \n    vec2 uv0 = uv;\n    \n    // dilate\n    float t = sin(iTime*SPEEDMOD*10.)*.02+0.98;\n    uv/=vec2(t);\n    \n    \n    // eclipse time\n    float ect=iTime*SPEEDMOD*2. - 2.5;\n    // eclipse power\n    float epow = smoothstep(0.,1.,sin(ect+3.14/2.+.5));\n    \n    float col = 0.;\n    float rad = .0001;\n    float bloom = .4*t + epow;\n    float thickness = 0.07+epow/100.;\n    // moons\n    /**/\n    float speedMoon = iTime*SPEEDMOD*0.8;\n    float speedShadow = iTime*SPEEDMOD;\n    for(float i = 0.; i<MOONS;i++){\n        vec2 uv1 = displace(rotate(uv,6.283*i/MOONS+speedMoon),0.8);\n        col+=circle(uv1,rad,thickness,bloom);\n    }\n    // shadows\n    for(float i = 0.; i<(MOONS-1.);i++){\n        vec2 uv1 = displace(rotate(uv,6.283*i/(MOONS-1.)+speedShadow),0.8);\n        col-=clamp(circle(uv1,rad*1.01,thickness*1.01,bloom),0.,1.);\n    }\n    /**/\n    // outline\n    col += circle(uv,.9,.04+0.02*epow, 1.);\n    col -= circle(displace(rotate(uv,(iTime+3.14/2.)*SPEEDMOD*10.),-.01),.9,.012, 1.);\n    col += circle(uv,.7,.04, 1.);\n    col -= circle(displace(rotate(uv,iTime*SPEEDMOD*10.),.01),.7,.012, 1.);\n    \n    // eclipse glow\n    col += circle(uv+vec2(0.,0.08),1.,0.4,1.)*epow*.5;\n    \n    // inner lines\n    float s = .48;\n    for(float i=0.;i<RECTS;i++){\n        vec2 uv1 = rotate(uv,i*1.5707/*pi/2*//RECTS+iTime*SPEEDMOD*.9);\n        col += rectangle(0.,uv1,vec2(s),vec2(s),.0025+epow/200.);\n    }\n    \n    \n    {\n        // inner eclipse\n        float innerEclipse = 0.;\n        // lining\n        innerEclipse += circle(uv,.42,.01,0.);\n        // inner circle\n        innerEclipse += circle(uv,.18,.23,0.2)*.56;\n        innerEclipse -= circle(uv+vec2(-.17,-.1),.04,.15,1.)*.15;\n        innerEclipse += circle(uv+vec2(-.17,-.11),.09,.01,1.)*.2;\n        \n        innerEclipse -= circle(uv+vec2(.17,.1),.02,.15,1.)*.15;\n        \n        innerEclipse -= circle(uv+vec2(-.1,.2),.01,.15,1.)*.1;\n        \n        vec2 uv1 = uv;\n        float displacement = smoothstep(.2,.8,abs(sin((ect+3.14*.95)/2.)))+ smoothstep(0.,1.,sin(ect))-1.;\n        uv1 = displace(uv1,(displacement)*1.3);\n        uv1 = rotate(uv1,3.1415/2.);\n        uv1 = displace(uv1,max(0.,2.*cos(ect-3.14*.75)));\n        innerEclipse -= circle(uv1,.15,.33,0.8);\n\n        innerEclipse = clamp(innerEclipse,0.,1.);\n        col += innerEclipse;\n        \n        // add particles coming from center\n        float m = clamp(noise(((radMap(uv))*vec2(GRID/2.,1.)+vec2(0.,sin(ect+3.14)*GRID))),0.,1.);\n        m = smoothstep(0.9,1.,m);\n        m *= 1.-abs(-.8+length(uv))*1.5;\n        m = clamp(m,0.,1.);\n        col += m*epow;\n    }\n    \n    \n  \n    \n    /*effects*/\n    // brighten foreground\n    //col += (-.7-uv0.y)*.2;\n    // add noise\n    col += (n-.6)*.3;\n    // clamp color\n    col=floor(col+.5);\n    /**/\n    \n    col = min(col,1.);\n    // Output to screen\n    fragColor = vec4(col*.85,col*.92,col,1.0);\n    \n    float d = length(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}