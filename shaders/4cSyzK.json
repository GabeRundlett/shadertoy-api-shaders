{
    "Shader": {
        "info": {
            "date": "1722556184",
            "description": "Yet another sound visualization.",
            "flags": 40,
            "hasliked": 0,
            "id": "4cSyzK",
            "likes": 0,
            "name": "Fork Circular m synthetix 145",
            "published": 3,
            "tags": [
                "sound",
                "spectrum",
                "music",
                "audio"
            ],
            "usePreview": 0,
            "username": "synthetix",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "\n# define RADIUS_MIN\t50.0\n# define RADIUS_MAX 100.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tcenter = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n\tvec2\tvecPix = center - fragCoord.xy;\n\tvec2\tnormVecPix = normalize(vecPix);\n\tvec2\tnormVecRef = normalize(center - vec2(0.0, center.y));\n\t\n\tfloat\tcosAngle = dot(normVecPix, normVecRef);\n\tfloat\tangle = (degrees(acos(cosAngle)) + 360.0) / 1080.0;\n\tfloat\tvalue = texture(iChannel0, vec2(angle, 0.0)).x;\n\tvalue = value * 100.0;\n\t\n\t\n\tfloat\tvecLength = length(vecPix);\n\n\tif (vecLength > RADIUS_MIN + value && vecLength < RADIUS_MAX + value)\n\t{\n\t\tvec4\tcolor = vec4(1.0);\n\t\tfor (float i = RADIUS_MIN ; i < RADIUS_MAX; i += 1.0)\n\t\t{\n\t\t\tif (vecLength > i + value && vecLength < (i + 1.0) + value)\n\t\t\t{\n\t\t\t\tfloat\tintensity = (i - RADIUS_MIN) / (RADIUS_MAX - RADIUS_MIN);\n\t\t\t\tcolor -= vec4(intensity);\n\t\t\t}\n\t\t}\n\t\tfragColor = color * vec4(0.40, 0.50, 0.90, 0.0);\n\t}\n\telse\n\t\tfragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "void mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}