{
    "Shader": {
        "info": {
            "date": "1504362327",
            "description": "Mouse enable.\nChange the checkBox function to build new model.",
            "flags": 0,
            "hasliked": 0,
            "id": "4lscDn",
            "likes": 39,
            "name": "Construction Set",
            "published": 3,
            "tags": [
                "raytracing",
                "reflection",
                "transparency",
                "voxel"
            ],
            "usePreview": 0,
            "username": "ocb",
            "viewed": 4816
        },
        "renderpass": [
            {
                "code": "// Author: ocb\n// Title: Pure Voxels Construction Set\n\n/*\nUse mouse to look around.\nVery cheap reflection and transparency model.\n\nObjective: GetNextBox function demo.\nIs a 3D version of getNextCell used in shader Trip In Tron 3 and Boreal spring.\nGetNextBox return the next voxel on ray path.\n\nDifference betwin old_box and new_box return directly the normal. here call d.\n\nConstrution function is checkBox()\nDescribe in this function your own model\n*/\n\n\n#define PI 3.141592653589793\n#define PIdiv2 1.57079632679489\n#define TwoPI 6.283185307179586\n#define INFINI 1000000.\n\n#define NO_TRANSPARENCY \t// all voxels transparent\n#define BORDER\t\t\t\t// borders of voxels glow a little\n\n#define boxDim 100.\n#define maxBoxRnge 70\n#define emptyChance 30.\t\t// kind of amount of empty voxels (voxels density)\n\n// object name\n#define GND -1\n#define SKY -1000\n#define NONE 0\n#define BOX 1\n\n//Global var\nvec3 color = vec3(0.);\nvec3 lightRay = normalize(vec3(1.,.4,.2));\n\n\nfloat H1 (in float v) { \t\t\t\t\t\t\n    return fract(sin(v) * 437585.);\n}\nfloat H2 (in vec2 st,in float time) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec2(12.9898,8.233))) * 43758.5453123+time);\n}\nfloat H3 (in vec3 st,in float time) { \t\t\t\t\t\t\n    return fract(sin(dot(st,vec3(12.9898,8.233,17.6533107))) * 43758.5453123+time);\n}\n\nvec3 skyGlow(in vec3 ray){\n    float a = dot(lightRay, ray);\n    return vec3(max(0.,sign(a)*pow(a,9.)));\n}\n\nvec3 setBox(in vec3 p){\n    return floor(p/boxDim + .5);\n}\n\nvec3 deBox(in vec3 box){\n    return box*boxDim;\t\t// return the center of the box\n}\n\n// key function to find the next Voxel along the ray\nvec3 getNextBox(in vec3 p, in vec3 v, in vec3 box){\n    vec3 d = sign(v);\n\tvec3 dt = ((box+d*.5)*boxDim-p)/v;\n    float dmin = min(min(dt.x,dt.y),dt.z);\n    d *= step(dt, vec3(dmin));\n    return box+d;\n}\n\n// Here is the construction function to be filled.\n// for now, just random voxel (density depends on emptyChance value)\nbool checkBox(in vec3 box){\n    float h = H3(floor(box),0.)*(emptyChance + 2.);\n    return bool(int(floor( max(0.,h-emptyChance) )));\n}\n\nvoid browseBox(in vec3 box, in vec3 pos, in vec3 ray, inout int hitObj){\n    float t = INFINI;\n    float hitNbr = 0.;\n    for(int i=0; i<maxBoxRnge;i++){\n    \tvec3 newBox = getNextBox(pos,ray,box);\n        vec3 d = newBox - box;\n        \n        if(checkBox(newBox)) {\n            hitNbr ++;\n            color += 1./hitNbr*((dot(-d,lightRay)+1.)*.3+.4)*vec3(.08,H3(newBox,0.)/5.,0.3);\n            \n            #ifdef BORDER\n            vec3 o = deBox(newBox-.5*d);\n            if(d.x != 0.){\n                t = (o.x-pos.x)/ray.x;\n                vec3 p = pos+t*ray;\n                color += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.y-p.y)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.z-p.z)));\n            }\n            else if(d.y != 0.){\n                t = (o.y-pos.y)/ray.y;\n                vec3 p = pos+t*ray;\n                color += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.x-p.x)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.z-p.z)));\n            }\n            else if(d.z != 0.){\n                t = (o.z-pos.z)/ray.z;\n                vec3 p = pos+t*ray;\n                color += .1*(smoothstep(.4*boxDim, .5*boxDim ,abs(o.x-p.x)) + smoothstep(.4*boxDim, .5*boxDim ,abs(o.y-p.y)));\n            }\n            #endif\n            \n            vec3 refl = reflect(ray,d);\n            color += .9*skyGlow(refl);\n            \n            #ifdef NO_TRANSPARENCY\n            if(bool(mod(newBox.y, 2.))){\n                hitObj = BOX;\n                break;\n            }\n            #endif\n        }\n        box = newBox;\n    } \n    color = clamp(color,0.,1.);\n}\n\nvec3 getCamPos(in vec3 camTarget){\n    float \trau = 1300.*(sin(iTime/7.)+1.) + 50.,\n    \t\t//rau = 80.,\n    \t\talpha = iMouse.x/iResolution.x*4.*PI,\n    \t\ttheta = iMouse.y/iResolution.y*PI-(PI/2.001);\t\n    \n    return rau*vec3(-cos(theta)*sin(alpha),sin(theta),cos(theta)*cos(alpha));\n}\n\nvec3 getRay(in vec2 st, in vec3 pos, in vec3 camTarget){\n    float \tfocal = 1.;\n    vec3 ww = normalize( camTarget - pos );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0)) ) ;\n    vec3 vv = cross(uu,ww);\n\t// create view ray\n\treturn normalize( st.x*uu + st.y*vv + focal*ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy-.5;\n    st.x *= iResolution.x/iResolution.y;\n    \n    // camera def\n    vec3 camTarget = vec3(0.);\n    vec3 pos = getCamPos(camTarget);\n    vec3 ray = getRay(st, pos,camTarget);\n    \n\tvec3 lightRay = vec3(1.,0.,0.);\t\n\t\n    float t = INFINI;\n    int hitObj = SKY;\n    vec3 p = pos;\n    \n    vec3 box = setBox(p);\n\n    browseBox(box, pos, ray, hitObj);\n    \n    if(hitObj == SKY) color += skyGlow(ray);\n    \n    \n    fragColor = vec4(color,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}