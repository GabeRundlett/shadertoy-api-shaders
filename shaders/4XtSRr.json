{
    "Shader": {
        "info": {
            "date": "1718525411",
            "description": "/*\nthe sun didn't destroy everything, I'm fine*/\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4XtSRr",
            "likes": 2,
            "name": "crystal tiles and spark",
            "published": 3,
            "tags": [
                "star",
                "tile",
                "crystal",
                "spark",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "/*originals \ncopy-paste from many sources Iâ€™m just learning myself\nhttps://www.shadertoy.com/view/lXdGD2 https://www.shadertoy.com/view/XlfGRj https://www.shadertoy.com/view/4tyfWy and other  \nMIT LICENSE\n*/\n\n\n\n/*\nthe sun didn't destroy everything, I'm fine*/\n\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\n\nfloat happy_rich_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n#define PI 3.141592\n#define TWOPI 6.283184\n\n#define R2D 180.0/PI*\n#define D2R PI/180.0* \n\nmat2 rotMat(in float r){float c = cos(r);float s = sin(r);return mat2(c,-s,s,c);}\n\n\nfloat abs1d(in float x){return abs(fract(x)-0.5);}\nvec2 abs2d(in vec2 v){return abs(fract(v)-0.5);}\nfloat cos1d(float p){ return cos(p*TWOPI)*0.25+0.25;}\nfloat sin1d(float p){ return sin(p*TWOPI)*0.25+0.25;}\n\n#define OC 15.0\nvec3 Oilnoise(in vec2 pos, in vec3 RGB)\n{\n    vec2 q = vec2(0.0);\n    float result = 0.0;\n    \n    float s = 2.2;\n    float gain = 0.44;\n    vec2 aPos = abs2d(pos)*0.5;//add pos\n\n    for(float i = 0.0; i < OC; i++)\n    {\n        \n        float time = (0.5+0.5)*0.2+0.01;\n     \n        q =  pos * s + aPos + time;\n        q = vec2(cos(q));\n\n        result += sin1d(dot(q, vec2(0.3))) * gain;\n\n        s *= 1.07;\n        aPos += cos(smoothstep(0.0,0.15,q));\n        aPos*= rotMat(D2R 5.0);\n        aPos*= 1.232; \n    }\n    \n    result = pow(result,4.504);\n    return clamp( RGB / abs1d(dot(q, vec2(-0.240,0.000)))*.5 / result, vec3(0.0), vec3(1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec2 uv2=fragCoord.xy/iResolution.xy-.5;\nuv2.x+=0.3*cos(iTime);\nuv2.y+=0.2*sin(iTime);\n     vec2 C =fragCoord;\n     \n vec3 col2 = vec3(0.0,0.0,0.0);\n    vec2 st = (fragCoord/iResolution.xy);\n          \n    float stMask = step(0.0, st.x * (1.0-st.x));\n\n\n   \n    st*=5.;\n    \n    vec3 rgb = vec3(1.50, 4.8, 0.700);\n    \n    \n    //berelium, 2024-06-07 - anti-aliasing\n    float AA = 1.0;\n    vec2 pix = 1.0 / iResolution.xy;\n    vec2 aaST = vec2(0.0);\n    \n    for(float i = 0.0; i < AA; i++) \n    {\n        for(float j = 0.0; j < AA; j++) \n        {\n            aaST = st + pix * vec2( (i+0.5)/AA, (j+0.5)/AA );\n            col2 += Oilnoise(aaST, rgb);\n        }\n    \n    }\n    \n    col2 /= AA * AA;\n    \n  \n\n\n\n\t\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    \n\t\n\t\n\tfloat col=0.2;\n\t\n\tfloat t=time*1.0;\n\t\n\tvec2 m=vec2(sin(t*0.2), cos(t*1.))*.50;\n\t\n\n\tcol=smoothstep(0.3, 0.7,col);\n\nvec3 directory=vec3(uv,1.);\nvec3 from=vec3(1.,1.0,1.0);\n\n\n\n   \nfloat s=0.5,fade=1.;\nvec3 output2=vec3(0.);\nfor (int r=0; r<10; r++) {\n\nvec3 p=s+from*col2*directory*.5;\np = abs(vec3(0.8)-mod(p,vec3(0.8*2.)));\nfloat pa,a;\nfor (int i=0; i<10; i++) {\np=abs(p)/dot(p,p)-0.53;\n            p.xy*=mat2(cos(iTime*0.205),sin(iTime*0.205),-sin(iTime*0.205), cos(iTime*0.205));// the magic formula\na+=abs(length(p));\n}\ns+=0.1;\na*=a*a;\n\noutput2+=vec3(0.1,0.1,0.7)*0.0135*a;\n\n\n}\noutput2=mix(vec3(length(output2)),output2,0.7);\n\n\n\n\nfragColor = vec4(output2*.013+col2,1.);\nfragColor*= vec4(happy_rich_star(uv2, anim) * vec3(0.5,0.5,0.55)*0.015, 1.0);\n\n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}