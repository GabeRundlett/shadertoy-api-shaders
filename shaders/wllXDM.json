{
    "Shader": {
        "info": {
            "date": "1563393724",
            "description": "Test of using randomly perturbed step length to \"dither\" the iteration fog on a fractal.",
            "flags": 0,
            "hasliked": 0,
            "id": "wllXDM",
            "likes": 21,
            "name": "foldable cube",
            "published": 3,
            "tags": [
                "fractal",
                "cube",
                "fold"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "\n#define ITERS 100\n#define TOL 1e-3\n#define fdist 0.5\n#define maxdist 100.\n#define LEVELS 7\n#define PI 3.1415926\n\nfloat noise(in vec2 uv)\n{\n\treturn fract(sin(dot(vec2(1484191., 189159.), uv))*9991415.);   \n}\n\nvec4 map(in vec3 pos)   \n{\n    float t = (clamp(abs(mod(iTime*0.25, 6.0) - 3.0), 1.0, 2.0)-1.0) * PI * 0.5;\n    if (iMouse.w > 1.0)\n    {\n    \tt = iMouse.y/iResolution.y*PI*0.5;\n    }\n    float c = cos(t);\n    float s = sin(t);\n    mat3 rotZ = mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n    mat3 rotX = mat3(1, 0, 0, 0, c, -s, 0, s, c);\n    float sc = 0.5;\n    for (int i=0; i<LEVELS; i++)\n    {\n        pos = abs(rotX * rotZ * pos) - sc;\n     \tsc *= 0.5;\n    }\n    \n    return vec4(max(pos.x, max(pos.y, pos.z))-sc*2., pos);\n}\n\nvec4 march(in vec3 pos, in vec3 dir, in vec2 seed)\n{\n    float t = 0.;\n    vec4 dist;\n    for (int i=0; i<ITERS; i++)\n    {\n        vec3 currpos = t*dir+pos;\n    \tdist = map(currpos);\n        t += dist.x * (1.+(noise(seed)-0.5)*0.5);\n        seed.x += dist.x;\n        if (abs(dist.x) < TOL)\n        {\n            return vec4(i, dist.yzw);\n        } else if (t > maxdist) {\n            return vec4(i, dist.yzw);\n        }\n    }\n    return vec4(ITERS, dist.yzw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c = cos(iTime);\n    float s = sin(iTime);\n    mat3 rot = mat3(c, -s, 0, s, c, 0, 0, 0, 1);\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.x;\n    vec3 ro = rot * vec3(1.,1.,1.) * (2.+s*0.3);\n    vec3 nw = -normalize(ro);\n    vec3 up = vec3(0.,0.,1.);\n    vec3 nu = cross(nw, up);\n    vec3 nv = cross(nu, nw);\n   \tvec3 rd = normalize(nw*fdist + uv.x*nu + uv.y*nv);\n    vec4 d = march(ro, rd, uv);\n    fragColor = vec4(d.x/float(ITERS)*2. * (normalize(d.yzw)+1.)*0.5,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}