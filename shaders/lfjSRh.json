{
    "Shader": {
        "info": {
            "date": "1720652396",
            "description": "This desktop monitoring software guarantees productivity at an affordable cost. No observable side effects. Designed for workplaces, call centers, computer labs. Limit continuous exposure 3hrs/day.",
            "flags": 32,
            "hasliked": 0,
            "id": "lfjSRh",
            "likes": 20,
            "name": "Floating Eye Monitor",
            "published": 3,
            "tags": [
                "voronoi",
                "dither",
                "creepy"
            ],
            "usePreview": 0,
            "username": "TheBen27",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord / iResolution.xy;\n    float zoomFactor = mix(1.35, 1.0, smoothstep(0.0, 1.0, distance(uv, vec2(0.5))));\n    uv -= 0.5;\n    uv /= zoomFactor;\n    uv += 0.5;\n    float c = texture(iChannel0, uv).r;\n    \n    vec3 blackColor = vec3(0.1, 0.125, 0.1);\n    vec3 whiteColor = vec3(0.98, 1.0, 0.9);\n    vec3 color = mix(blackColor, whiteColor, max(0.0, c));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float time;\n\nfloat sminCubic( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nmat2 rot(float t) {\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nvec2 noise(vec2 p) {\n    vec2 cc = floor(p);\n    vec2 cm = p - cc;\n    vec2 tl = hash22(cc);\n    vec2 tr = hash22(cc + vec2(1.0, 0.0));\n    vec2 bl = hash22(cc + vec2(0.0, 1.0));\n    vec2 br = hash22(cc + vec2(1.0, 1.0));\n    vec2 t = mix(tl, tr, cm.x);\n    vec2 b = mix(bl, br, cm.x);\n    return mix(t, b, cm.y);\n}\n\nvec2 noise_oct(vec2 p) {\n    vec2 value = vec2(0.0);\n    float total = 0.0;\n    float a = 1.0;\n    float f = 1.0;\n    for (float i = 0.0; i < 5.0; i++) {\n        p *= rot(24.0);\n        value += noise(p * f) * a;\n        total += a;\n        a /= 2.0;\n        f *= 2.0;\n    }\n    return value / total;\n}\n\nfloat fmod(float x, float m) {\n    return x - m * floor(x / m);\n}\n\nfloat angleVoronoi(vec2 uv, vec2 scale, float smoothness, int octave, float twisting) {\n    float theta = 0.5 + atan(uv.y, uv.x) / (2.0 * acos(-1.0));\n    float phi = length(uv);\n    float speed = float(1 + octave) * 0.015;\n    theta += twisting * (0.25 * phi - speed * time);\n    vec2 auv = vec2(theta, phi);\n    \n    vec2 pos = auv * scale;\n    vec2 innerPos = mod(pos, 1.0);\n    vec2 index = floor(pos);\n \n    float minDistance = 1e3;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            vec2 offset = vec2(float(x), float(y));\n            vec2 cellPos = offset + hash22(\n                vec2(\n                    fmod(index.x + offset.x, scale.x),\n                    index.y + offset.y\n                )\n            );\n            float cellDistance = distance(innerPos, cellPos);\n            minDistance = sminCubic(minDistance, cellDistance, smoothness);\n        }\n    }\n    return minDistance;\n}\n\nfloat dither_by(float value, float dither) {\n    return round(dither - 0.5 + value);\n}\n\nfloat vortex(vec2 uv, float dither) {\n    // Waviness\n    uv.x += 0.04 * sin(time + 4.0 * uv.y);\n    \n    float brightness;\n    float total = 0.0;\n    float a = 1.0;\n    vec2 f = vec2(6.0, 3.0);\n    int octaves = 6;\n    for (int i = 0; i < octaves; i++) {\n        brightness += a * angleVoronoi(uv, f, length(uv) * 0.5, i, 1.0);\n        total += a;\n        a *= 0.5;\n        f *= 2.0;\n    }\n    \n    brightness /= total;\n    \n    // Cheat by removing the center\n    float center = smoothstep(0.0, 0.2, length(uv));\n    brightness = mix(0.0, brightness, center);\n    \n    // Postersize and dither\n    brightness *= brightness;\n    brightness = max(0.0, brightness - 0.025);\n    brightness = dither_by(brightness, dither);\n    return brightness;\n}\n\nvec2 eye(vec2 uv, float dither) {\n    float size = 0.3;\n    float thick = 0.03;\n    // Float eye up and down\n    uv.y -= 0.02 * round(sin(time * 0.5) * 5.0) / 5.0;\n    float len = length(uv);\n    float alpha = 1.0 - smoothstep(size - thick, size + thick, len);\n    // Base\n    float value = 1.0;\n    vec2 idisp = 0.02 * (noise_oct(vec2(time)) - 0.5);\n    vec2 iuv = uv - idisp;\n    float ilen = length(iuv);\n    // Iris\n    float a = angleVoronoi(iuv, vec2(32.0, 3.0), 0.1, 0, 0.0);\n    value *= a;\n    // Black pupil\n    value *= smoothstep(0.1, 0.15, ilen);\n    // Black rim around the iris\n    value *= smoothstep(0.0, 0.025, abs(ilen - 0.2));\n    // Sclera\n    value = max(value, smoothstep(0.19, 0.21, ilen));\n    // White highlight\n    float cl = distance(uv, vec2(0.03, 0.07));\n    value = max(value, step(cl, 0.005));\n    \n    value = dither_by(value, dither);\n    alpha = dither_by(alpha, dither);\n    \n    return vec2(value, alpha);\n}\n\nfloat rift(vec2 uv, float dither) {\n    // Base shape\n    float amt = pow(1.0 - abs(uv.y), 1.5);\n    // Distortion\n    amt *= noise_oct(vec2(1.5 * uv.y + time, sign(uv.x))).x;\n    // Blink\n    float blinkTiming = 2.0 * max(0.0, mod(time, 5.0) - 4.5);\n    float blinkAmt = 0.5 + 0.5 * cos(blinkTiming * 2.0 * acos(-1.0));\n    amt *= blinkAmt * blinkAmt;\n    // Sharpen and dither\n    float value = smoothstep(amt * 0.4, amt, abs(uv.x));\n    return dither_by(value, dither);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Limit framerate\n    time = iTime;\n    const float targetHeight = 720.0;\n    float downscale = max(1.0, floor(iResolution.y / targetHeight));\n    \n    vec2 uv = floor(fragCoord / downscale) / iResolution.xy * downscale;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float dither = texelFetch(iChannel0, ivec2(mod(fragCoord / downscale, 8.0)), 0).r;\n    float bg_vortex = vortex(uv, dither);\n    vec2 fg_eye = eye(uv, dither);\n    float bg_rift = rift(uv, dither);\n    \n    float final = bg_vortex;\n    \n    final *= bg_rift;\n    final = mix(final, fg_eye.x, (1.0 - bg_rift) * fg_eye.y);\n    \n    // Output to screen\n    fragColor = vec4(vec3(final),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}