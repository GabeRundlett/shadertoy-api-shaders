{
    "Shader": {
        "info": {
            "date": "1496176877",
            "description": "ray-sphere intersection + ray-box intersection.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsffD4",
            "likes": 2,
            "name": "raytracing experiment",
            "published": 3,
            "tags": [
                "raytracing",
                "repetition",
                "subtraction"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "//a sphere intersection function from iq\n//https://www.shadertoy.com/view/4djSDy\nvec2 sphIntersect( in vec3 ro, in vec3 rd)\n{\n\t\n\tfloat b = dot( ro, rd );\n\tfloat c = dot( ro, ro )-81.0;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0,-2.0);\n\treturn vec2(-b - sqrt( h ),-b+sqrt(h));\n}\n\nvec4 insidebox(vec3 pos, vec3 dir) {\n    vec3 lens = (1.0-pos*sign(dir))/abs(dir)*step(abs(pos),vec3(1.0));\n    float len = min(min(lens.x,lens.y),lens.z);\n    return vec4(len,lens);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 pointlight = vec3(4.0,0.0,-10.0);\n    \n    vec3 pos = vec3(cos(iTime)*3.0,sin(iTime)*3.0,-20.0);\n    vec3 dir = normalize(vec3(uv,1.5));\n    \n    vec2 len = sphIntersect(pos,dir);\n   \tpos += len.x*dir;\n    vec3 normal = normalize(pos);\n    vec4 len2 = insidebox(mod(pos,2.4)-1.2, dir);\n    if (len2.x > 0.0) {\n        normal = -step(len2.yzw,len2.xxx)*sign(dir);\n    }\n    if(len.y > len.x) {\n        fragColor = vec4(abs(normal),1.0);\n        \n        vec3 lightnorm = (pointlight-pos);\n        float lightdist = length(lightnorm);\n        lightnorm /= lightdist;\n        \n        fragColor = vec4(max(dot(normal,lightnorm),0.1));\n        \n    } else {\n        \n\t\tfragColor = vec4(0.0,0.0,sqrt(uv.y*0.25+0.25),1.0);\n        return;\n    }\n    \n\t//fragColor = vec4(fract(pos+0.001),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}