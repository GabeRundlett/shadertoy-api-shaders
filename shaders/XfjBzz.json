{
    "Shader": {
        "info": {
            "date": "1724589798",
            "description": "XorDev shared an interesting gyroid function: https://www.shadertoy.com/view/XcBBRz\nTinkered a bit. Some artifacts left as an excercise to the reader to eliminate ;)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XfjBzz",
            "likes": 37,
            "name": "Red vs Blue",
            "published": 3,
            "tags": [
                "3d",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "// CC0: Red vs Blue\n//  XorDev shared an interesting gyroid function: https://www.shadertoy.com/view/XcBBRz\n//  Tinkered a bit. Some artifacts left as an excercise to the reader to eliminate ;)\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n#define TOLERANCE           0.005\n#define MAX_RAY_LENGTH      40.0\n#define MAX_RAY_MARCHES     70\n#define NORM_OFF            0.001\n\nconst vec3 sunDir    = normalize(vec3(0.,0.5, -1.));\nconst vec3 lightPos1 = 2.0*vec3(-1.0, -1.0, -2.0);\nconst vec3 lightPos0 = 4.0*vec3(1.0, 1.0, -2.0);\n\nconst vec3 sunCol    = HSV2RGB(vec3(0.6, .95, 1E-2))*1.;\nconst vec3 lightCol0 = HSV2RGB(vec3(0.7, 0.85, 1.0))*1.;\nconst vec3 lightCol1 = HSV2RGB(vec3(0.8, 0.75, 1.0))*1.;\nconst vec3 bottomBoxCol = HSV2RGB(vec3(0.7, 0.80, 0.5))*1.;\nconst vec3 topBoxCol    = HSV2RGB(vec3(0.57, 0.90, 1.))*1.;\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6;\n  float a = 2.51;\n  float b = 0.03;\n  float c = 2.43;\n  float d = 0.59;\n  float e = 0.14;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);\n}\n\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// License: Unknown, author: XorDev found: https://github.com/mrange/glsl-snippets\nfloat xorNoise(vec3 p, float S) {\n    //Gyroid with cos scaled separately\n    float d = dot(sin(p), cos(p.yzx*S)) + p.y;\n    //Correct for scaling factor\n    return d*inversesqrt(1.+S*S);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  \n  vec3 ld0 = normalize(lightPos0-ro);\n  vec3 ld1 = normalize(lightPos1-ro);\n\n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -5.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp0 > 0.0) {\n    col += bottomBoxCol*exp(-0.5*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += topBoxCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += 0.2*topBoxCol*exp(-0.5*max(db, 0.0));\n    col += 0.05*sqrt(topBoxCol)*max(-db, 0.0);\n  }\n\n  col += 1E-2*lightCol0/(1.002-dot(ld0, rd));\n  col += 2E-2*lightCol1/(1.005-dot(ld1, rd));\n  col += sunCol/(1.001-dot(sunDir, rd));\n  return col; \n}\n\nvec2 g_mind; \n\nfloat df1(vec3 p) {\n  p.z += TIME;\n  vec3 p1 = p;\n  vec3 p2 = p;\n  vec3 p3 = p;\n  p1.x += sin(0.23*p.z);\n  p1.y += cos(0.3*p.z);\n  float d1 = xorNoise(p1, 1.33);\n  float d2 = xorNoise(p2, exp(0.9));\n\n  float d= d1;\n  d = pmax(d, -(d2-0.05), 1E-1);\n  d = min(d, d2);\n  \n  g_mind = min(g_mind, vec2(d, d2));\n  return d;\n}\n\n// EDGENORMALFIX - a trick I learned from IQ to fix up normal on the edges\n#define EDGENORMALFIX\n// BACKTRACK - Improves the normals as it detects overstepping and backtracks\n#define BACKTRACK\nfloat hirayMarch1(vec3 ro, vec3 rd, float tinit, out int iter) {\n  float t = tinit;\n#if defined(BACKTRACK)\n  float sl = 7./8.;\n  float lt = t;\n#else\n  const float sl = 0.8;\n#endif    \n#if defined(EDGENORMALFIX)\n  vec2 dti = vec2(1e10,0.0);\n#endif  \n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df1(ro + rd*t);\n#if defined(EDGENORMALFIX)\n    if (d<dti.x) { dti=vec2(d,t); }\n#endif\n#if defined(BACKTRACK)\n    if (t > MAX_RAY_LENGTH) {\n      break;\n    } else if (d < TOLERANCE) {\n      if (sl < 0.5) break;\n      sl *= 0.5;\n      t = lt;\n    } else {\n      lt = t;\n      t += sl*d;\n    }\n#else\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += sl*d;\n#endif\n\n  }\n#if defined(EDGENORMALFIX)\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n#endif  \n  iter = i;\n  return t;\n}\n\n\nvec3 normal1(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df1(pos+eps.xyy) - df1(pos-eps.xyy);\n  nor.y = df1(pos+eps.yxy) - df1(pos-eps.yxy);\n  nor.z = df1(pos+eps.yyx) - df1(pos-eps.yyx);\n  return normalize(nor);\n}\n\n\nvec3 render1(vec3 ro, vec3 rd) {\n\n  vec3 col = vec3(.0);\n  g_mind = vec2(1E3);  \n  int i1;\n  float t1 = hirayMarch1(ro, rd, 0., i1);\n  float if1 = float(i1)/float(MAX_RAY_MARCHES);\n  vec3 p1 = ro+rd*t1;\n\n  vec3 n1 = normal1(p1);\n  vec3 r1 = reflect(rd, n1);\n  vec3 rcol1 = render0(p1, r1);\n  float dif1 = (max(dot(n1, sunDir), 0.));\n  float fre1 = 1.+dot(rd,n1);\n  fre1 *= fre1;\n  fre1 = mix(0.0,2., fre1);\n\n  if (t1 < MAX_RAY_LENGTH) {\n\n    if (g_mind.x < g_mind.y) {\n      col = vec3(1.0,0.25,0.5)*dif1;     \n    } else {\n      col = vec3(0.25,0.5,1.0)*dif1;     \n    }\n    col *= 0.25;\n    col *= smoothstep(1., 0.25, if1);\n    vec3 p2 = p1;\n    p2.z += TIME;\n\n    float xd = xorNoise(p2, 1.927);\n    float xaa =0.0125;\n    col *= tanh(abs(100.))*smoothstep(-xaa, xaa, abs(xd)-0.1);\n    col += rcol1*fre1;    \n  }\n  \n  // Edge detection by XorDev\n  //  float e = length(fwidth(p1)*RESOLUTION.y);\n  return col;\n}\n\nvec3 effect(vec2 p) {\n\n  const vec3 up = vec3(0., 1., 0.);\n  const vec3 ro   = vec3(0.0, 5.0, -3.0);\n  const vec3 la   = vec3(0.0, 3.0, 0.);\n\n  const vec3 ww = normalize(la-ro);\n  const vec3 uu = normalize(cross(up, ww));\n  const vec3 vv = cross(ww, uu);\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.*ww);\n\n  vec3 col = render1(ro, rd);\n  col *= 2.5;\n  col -= 0.03*(length(p)+0.25);\n  col = aces_approx(col);\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}