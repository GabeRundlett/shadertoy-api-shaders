{
    "Shader": {
        "info": {
            "date": "1583265018",
            "description": "cubemap version of mudplanet [url]https://www.shadertoy.com/view/4sXfDX[/url]\n",
            "flags": 16,
            "hasliked": 0,
            "id": "ttKSR3",
            "likes": 16,
            "name": "mud planet - cubemapped",
            "published": 3,
            "tags": [
                "fluid",
                "cubemap",
                "cfd",
                "singlepass"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// mud planet\n// single pass CFD on spherical symetry\n// based on \"spilled\" (https://www.shadertoy.com/view/MsGSRd)\n\n// uncomment this for metallic reflections\n//#define METAL_REFLECTIONS\n\n#define MAX_RADIUS 400.\n#define PI 3.14159265359\n\n#define USE_CUBE\n\n#ifndef USE_CUBE\nvec2 sph2frag(vec3 p)\n{\n\tfloat r = min(iResolution.x/4.,MAX_RADIUS);\n    vec2 center = vec2(r,r);\n    p=normalize(p);\n    if(p.z<0.0) center.x += 2.*r;\n    return center+sqrt(1.-abs(p.z))*normalize(p.xy)*r;\n}\n#endif\n\n// final distance funtion\nfloat dist(vec3 pos)\n{\n    vec3 pos0=pos;\n    #ifdef USE_CUBE\n    pos+=(texture(iChannel0,pos).xyz-.5)*.75;\n    #else\n    pos+=(texture(iChannel0,sph2frag(pos)/iResolution.xy).xyz-.5)*.75;\n    #endif\n    float d = 10000.;\n    \n    // sphere in the middle\n\td=min(d,length(pos)-1.);\n        \n    return d;\n}\n\nvec3 getGrad(vec3 pos, float eps)\n{\n    vec2 d=vec2(eps,0);\n    float d0=dist(pos);\n    return vec3(dist(pos+d.xyy)-d0,\n                dist(pos+d.yxy)-d0,\n                dist(pos+d.yyx)-d0)/eps;\n                \n}\n\n// march it...\nvec4 march(inout vec3 pos, vec3 dir)\n{\n    // cull the sphere\n    if(length(pos-dir*dot(dir,pos))>1.3) \n    \treturn vec4(0,0,1,1);\n    \n    float eps=0.001;\n    float bg=1.0;\n    for(int cnt=0;cnt<100;cnt++)\n    {\n        float d = dist(pos);\n        pos+=d*dir*.7;\n        if(d<eps) { bg=0.0; break; }\n    }\n    vec3 n = getGrad(pos,.001);\n    if(dot(n,n)<.0001) n=vec3(0,0,1);\n    return vec4(n,bg); // .w=1 => background\n}\n\nmat3 rotX(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(1,0,0, 0,c,s, 0,-s,c);\n}\n\nmat3 rotZ(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(c,s,0, -s,c,0, 0,0,1);\n}\n\nvec3 getSun()\n{\n    float phi=.2*iTime;\n    float phi2=.7*cos(phi);\n    vec3 sun=vec3(vec2(cos(phi),sin(phi))*cos(phi2),sin(phi2));\n    return sun;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // screen coord -1..1\n    vec2 sc = (fragCoord.xy/iResolution.xy)*2.-1.;\n    // viewer position\n    vec3 pos = vec3(0,-13.5,0);\n    // pixel view direction\n    vec3 dir = normalize(8.*normalize(-pos)+vec3(sc.x,0,sc.y*iResolution.y/iResolution.x));\n    // rotate view around x,z\n    float phi = iMouse.x/iResolution.x*7.;\n    float th  = iMouse.y/iResolution.y*7.;\n    if (iMouse.x==0.) { phi=iTime*.5; th=.27*.5*iTime; }\n    mat3 rx = rotX(th);\n    mat3 rz = rotZ(phi);\n    pos = rz*(rx*pos);\n    dir = rz*(rx*dir);\n    vec3 eye = pos;\n    \n    vec3 sun = getSun();\n    \n    // march it...\n   \tvec4 n=march(pos,dir);\n    float bg=n.w;\n\n    // march the shadow\n    vec3 poss=pos+sun*.01;\n   \tvec4 n2=march(poss,sun);\n    float shadow = n2.w;\n    \n    // calc some ambient occlusion\n    float ao=1.;\n    // calc ao by stepping along normal\n    ao*=dist(pos+normalize(getGrad(pos,.1))*.1)/.1;\n    // adjust contrast of ao\n    //ao=pow(ao,.4);\n    \n    // reflection dir\n    vec3 R = pos-2.0*dot(pos,n.xyz)*n.xyz;\n    R = -((R*rz)*rx).yzx;\n    \n    vec3 c = vec3(1);\n    \n    float diff=clamp(clamp(dot(sun,n.xyz)*2.,0.,1.)*shadow+.3,0.,1.5);\n    // simply add some parts of the normal to the color\n    // gives impression of 3 lights from different dir with different color temperature\n    c += normalize(n.xyz)*.1+.1;\n\n    //c *= 1.*length((texture(iChannel0,sph2frag(pos)/iResolution.xy).xyz-.5)*2.+.5);\n    //c *= (texture(iChannel0,sph2frag(pos)/iResolution.xy).xyz-.5)*.3+.5;\n    c*=.8;\n    \n    //  reflection of cubemap\n    float fres = 1.-(dot(normalize(eye-pos),n.xyz));\n    fres=.1+.9*fres;\n    #ifdef METAL_REFLECTIONS\n    c *= texture(iChannel1,R).xyz/**1.2*fres*/;\n    #else\n    //c += texture(iChannel1,R).xyz*fres;\n    #endif\n    \n    // specular from sun\n    c += clamp(pow(max(0.,dot(R,sun)),.5)*fres,0.,1.);\n    \n    // apply background\n    if(bg>.5) { diff=0.0; ao=1.; }\n    float sdot=clamp(dot(sun,dir),0.,1.);\n    c=mix(c,vec3(.03,.13,.28),1.-diff);\n    \n    // apply ambient occlusion\n    c*=ao;\n    \n    // draw sun\n    float sunmix=(pow(sdot,600.)*2.+.3*sdot);\n    c=c*(.8-2.*sunmix)+vec3(1)*bg*sunmix;\n        \n    // vignetting\n    float vign = (1.06-.3*length(sc.xy));\n    \n\tfragColor = vec4(c*vign,1);\n    //fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// mud planet\n// single pass CFD on spherical symetry\n// based on \"spilled\" (https://www.shadertoy.com/view/MsGSRd)\n\n#define MAX_RADIUS 400.\n#define RotNum 5\n//#define SUPPORT_EVEN_ROTNUM\n\n#define Res  iChannelResolution[0]\n#define Res1 iChannelResolution[1]\n\n#define keyTex iChannel3\n#define KEY_I texture(keyTex,vec2((105.5-32.0)/256.0,(0.5+0.0)/3.0)).x\n\nconst float ang = 2.0*3.1415926535/float(RotNum);\nconst mat2 m = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\nconst mat2 mh = mat2(cos(ang*0.5),sin(ang*0.5),-sin(ang*0.5),cos(ang*0.5));\n\nvec4 randS(vec2 uv)\n{\n    return texture(iChannel1,uv*Res.xy/Res1.xy)-vec4(0.5);\n}\n\n#define USE_CUBE\n\n#ifndef USE_CUBE\nvec2 sph2frag(vec3 p)\n{\n    //p=p.zxy;\n\tfloat r = min(iResolution.x/4.,MAX_RADIUS);\n    vec2 center = vec2(r,r);\n    p=normalize(p);\n    if(p.z<0.0) center.x += 2.*r;\n    return center+sqrt(1.-abs(p.z))*normalize(p.xy)*r;\n}\n\nvec3 frag2sph(vec2 f)\n{\n\tfloat r = min(iResolution.x/4.,MAX_RADIUS);\n    vec2 center = vec2(r,r);\n    float sz=1.;\n    if(f.x>2.*r)  { center.x += 2.*r; sz=-1.; }\n    vec2 R = (f-center)/r/sqrt(2.);\n    if(dot(R,R)>.55) return vec3(100);\n    //R/=sqrt(2.);\n    vec3 n = vec3(R.xy,sqrt(1.-dot(R,R))*sz);\n    vec3 p = reflect(vec3(0,0,-1.*sz),n);\n    //p=p.yzx;\n    return p;\n}\n\nvec3 frag2sphDiff(vec2 p, vec2 dp)\n{\n    float eps=.001;\n    return (frag2sph(p+normalize(dp)*eps)-frag2sph(p))/eps*length(dp);\n}\n#endif\n\nvec4 inverseQuat(vec4 q)\n{\n    //return vec4(-q.xyz,q.w)/length(q);\n    // if already normalized this is enough\n    return vec4(-q.xyz,q.w);\n}\n\nvec4 multQuat(vec4 a, vec4 b)\n{\n    return vec4(cross(a.xyz,b.xyz) + a.xyz*b.w + b.xyz*a.w, a.w*b.w - dot(a.xyz,b.xyz));\n}\n\nvec4 rotateQuatbyAngle(vec4 quat, vec3 angle)\n{\n    float angleScalar=length(angle);\n    if (angleScalar<0.00001) return quat;\n    return multQuat(quat,vec4(angle*(sin(angleScalar*0.5)/angleScalar),cos(angleScalar*0.5)));\n}\n\nvec3 transformVecByQuat( vec3 v, vec4 q )\n{\n    return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w*v );\n}\n\nvec4 transformVecByQuat( vec4 v, vec4 q )\n{\n    return vec4( transformVecByQuat( v.xyz, q ), v.w );\n}\n\nvec3 rotAx(vec3 p, vec3 ang)\n{\n\treturn transformVecByQuat( p, rotateQuatbyAngle(vec4(0,0,0,1), ang) );\n}\n\nvec3 getRot(vec3 pos, vec3 b)\n{\n    vec3 n=normalize(pos);\n    vec3 p = normalize(b-dot(b,n)*n);\n    vec3 rot=vec3(0);\n    for(int i=0;i<RotNum;i++)\n    {\n\t\t#ifdef USE_CUBE\n        vec3 v = texture(iChannel0,pos+p).xyz-.5;\n        #else\n        vec2 fr = sph2frag(pos+p);\n        vec3 v = texture(iChannel0,fr/Res.xy).xyz-.5;\n        #endif\n        //vec3 v = frag2sphDiff(fr,v2d);\n        rot+=cross(v,p);\n        p = rotAx(p,n*ang);\n    }\n    return rot/float(RotNum)/dot(b,b);\n}\n\nvec3 getSun()\n{\n    float phi=.2*iTime;\n    float phi2=.7*cos(phi);\n    vec3 sun=vec3(vec2(cos(phi),sin(phi))*cos(phi2),sin(phi2));\n    return sun;\n}\n\n#ifdef USE_CUBE\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n#endif\n{\n\t#ifdef USE_CUBE\n    vec3 pos = rayDir;\n    #else\n    vec3 pos = frag2sph(fragCoord.xy);\n    if(pos.x>10.) discard;\n    #endif\n    vec3 n = normalize(pos);\n    //float rnd = randS(vec2(float(iFrame)/Res.x,0.5/Res1.y)).x;\n    \n    vec3 b = randS(vec2(float(iFrame)/Res.x,0.5/Res1.y)).xyz;\n    b=normalize(b-dot(b,n)*n)*.01;\n    \n    vec3 v=vec3(0);\n    float bbMax=5.; bbMax*=bbMax;\n    for(int l=0;l<20;l++)\n    {\n        if ( dot(b,b) > bbMax ) break;\n        vec3 p = b;\n        for(int i=0;i<RotNum;i++)\n        {\n            float str=.01;\n            str*=pow(dot(b,b),.25)*5.;\n            v+=cross(getRot(pos+p,b),p)*str;\n            p = rotAx(p,n*ang);\n        }\n        b*=2.;\n    }\n    \n    #ifdef USE_CUBE\n    fragColor=texture(iChannel0,normalize(pos+v));\n    #else\n    fragColor=texture(iChannel0,sph2frag(pos+v)/iResolution.xy);\n    #endif\n    // mix the flow field with its own velocity field for consistency\n    // (actually i have the suspicion that this does not what its supposed to do)\n    fragColor.xyz=mix(fragColor.xyz,v*5.0+.5,.01);\n\n    // add a little \"motor\" where the sun shines most\n    vec3 sun=getSun();\n    vec3 vel = vec3(sun.yx*vec2(1,-1),0)*.5;\n    //vel *= 0.01/(dot(pos-pos0,pos-pos0)/.2+.2);\n    fragColor.xyz = mix(fragColor.xyz,vel+.5,0.01/(dot(pos-sun,pos-sun)/.2+.2));\n\n    // add a little \"freezer\" on the poles\n    //fragColor.xyz = mix(fragColor.xyz,vec3(.5),pow(pos.z*pos.z,10.));\n\n    if(iFrame<=4 || KEY_I>0.5) fragColor=mix(vec4(.5),texture(iChannel2,fragCoord.xy/iResolution.xy*.5),.2);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            }
        ],
        "ver": "0.1"
    }
}