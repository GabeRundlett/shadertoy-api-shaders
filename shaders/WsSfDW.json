{
    "Shader": {
        "info": {
            "date": "1590006988",
            "description": "something random",
            "flags": 0,
            "hasliked": 0,
            "id": "WsSfDW",
            "likes": 4,
            "name": "pixel perlin noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "grid",
                "perlinnoise",
                "grayscale"
            ],
            "usePreview": 0,
            "username": "TheNosiriN",
            "viewed": 281
        },
        "renderpass": [
            {
                "code": "#define _PerlinPrecision 0.2\n#define _PerlinOctaves 2.0\n#define _PerlinSeed 1.0\n#define RES 20.0\n\n\nfloat rnd(vec2 xy)\n{\n    return fract(sin(dot(xy, vec2(12.9898-_PerlinSeed, 78.233+_PerlinSeed)))* (43758.5453+_PerlinSeed));\n}\nfloat inter(float a, float b, float x)\n{\n    //return a*(1.0-x) + b*x; // Linear interpolation\n\n    float f = (1.0 - cos(x * 3.1415927)) * 0.5; // Cosine interpolation\n    return a*(1.0-f) + b*f;\n}\nfloat perlin(vec2 uv)\n{\n    float a,b,c,d, coef1,coef2, t, p;\n\n    t = _PerlinPrecision;\t\t\t\t\t// Precision\n    p = 0.0;\t\t\t\n\n    for(float i=0.0; i<_PerlinOctaves; i++)\n    {\n        a = rnd(vec2(floor(t*uv.x)/t, floor(t*uv.y)/t));\t//\ta---b\n        b = rnd(vec2(ceil(t*uv.x)/t, floor(t*uv.y)/t));\t\t//\t|   |\n        c = rnd(vec2(floor(t*uv.x)/t, ceil(t*uv.y)/t));\t\t//\tc---d\n        d = rnd(vec2(ceil(t*uv.x)/t, ceil(t*uv.y)/t));\n\n        if((ceil(t*uv.x)/t) == 1.0)\n        {\n            b = rnd(vec2(0.0, floor(t*uv.y)/t));\n            d = rnd(vec2(0.0, ceil(t*uv.y)/t));\n        }\n\n        coef1 = fract(t*uv.x);\n        coef2 = fract(t*uv.y);\n        p += inter(inter(a,b,coef1), inter(c,d,coef1), coef2) * (1.0/pow(2.0,(i+0.6)));\n        t *= 2.0;\n    }\n    return p;\n}\n\n\nfloat grid(vec2 fragCoord, float space, float gridWidth)\n{\n    vec2 p  = fragCoord - vec2(.5);\n    vec2 size = vec2(gridWidth - .5);\n    \n    vec2 a1 = mod(p - size, space);\n    vec2 a2 = mod(p + size, space);\n    vec2 a = a2 - a1;\n       \n    float g = min(a.x, a.y);\n    return clamp(g, 0., 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/RES;\n\t\n    uv = floor(uv) + iTime;\n    \n    float col = perlin(uv);\n    \n    col *= clamp(grid(fragCoord, 20.0, 2.0), 0.0, 1.0);\n    \n    fragColor = vec4(vec3(col), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}