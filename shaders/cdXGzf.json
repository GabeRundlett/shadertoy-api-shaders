{
    "Shader": {
        "info": {
            "date": "1666518009",
            "description": "The Dragon Curve using a simple stack. 9 levels deep, following Knuth: [url]https://www.youtube.com/watch?v=v678Em6qyzk[/url] ",
            "flags": 0,
            "hasliked": 0,
            "id": "cdXGzf",
            "likes": 3,
            "name": "Dragon Curve with Stack",
            "published": 3,
            "tags": [
                "lsystem",
                "stack",
                "dragon",
                "gosper"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Dragon Curve, drawn with stack. mla, 2022.\n//\n// Inspired by https://www.shadertoy.com/view/cdsGRj by FabriceNeyret2\n//\n// Uses an explicit stack to keep track of the recursion.\n// We still plot out all of the curve segments. A better approach would be\n// to keep track of intermediate segments and avoid recursing far from\n// the point being plotted.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\n#define C(turns,offset) (((turns) << 16) | ((offset) & 0xffff))\nconst int A = 0, B = 3, END = -1, L = -1, R = 1;\nint program[6] =\n  int[] (C(0,A),C(R,B),C(0,END), C(0,A),C(L,B),C(0,END));\nconst float angle = PI/2.0;\n\nconst int maxdepth = 9;\n\nvec2 p = vec2(0);     // The drawing point\nvec2 point = vec2(0); // The moving point\nfloat theta = 0.0;    // Cumulative angle\nfloat plen = 0.0;     // Cumulative path length\n\nfloat drawsegment(vec2 pos, float t) {\n  vec2 seg = vec2(cos(theta),sin(theta));  // Segment has length 1\n  if (t >= plen && t < plen+1.0) point = p + (t-plen)*seg;\n  vec2 q = p + seg;\n  float d = segment(pos,p,q);\n  plen += 1.0;\n  p = q;\n  return d;\n}\n\nvec3 getcol(float h) {\n  return 0.6*h2rgb(h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  if (iMouse.x > 0.0) pos -= (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  pos = pos.yx*vec2(-1,1);\n  float scale = 0.6*pow(2.0,0.5*float(maxdepth));\n  pos *= scale;\n  pos -= scale*vec2(-0.6,-0.4);\n  int stack[maxdepth];\n  int depth = 0;\n  stack[depth++] = 0;\n  float maxlen = pow(2.0,float(maxdepth));\n  float t = mod(3.0*iTime,maxlen); // Moving point\n  float d = 1e8;\n  float clen = 0.0;\n  while (depth > 0) {\n    int instr = program[stack[depth-1]++];\n    // Decode instruction\n    int turns = instr>>16;\n    int code = instr<<16>>16;\n    theta += float(turns)*angle; // Apply turn\n    if (code == END) depth--;    // Terminate level & unwind\n    else if (depth < maxdepth) stack[depth++] = code;  // Recurse\n    else {\n      float d0 = drawsegment(pos,t); // Segment\n      if (d0 < d) { d = d0; clen = plen; }\n    } \n  }\n  float px = fwidth(pos.x);\n  vec3 col = vec3(1,1,0.8);\n  col = mix(getcol(clen/maxlen),col,vec3(smoothstep(0.0,px,d-0.05)));\n  col = mix(vec3(0), col,smoothstep(0.0,px,distance(pos,point)-0.2));\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}