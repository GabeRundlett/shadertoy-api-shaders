{
    "Shader": {
        "info": {
            "date": "1592738666",
            "description": "A glsl running on NVIDIA may have a lower frame rate than on integrated graphics and mobile phones",
            "flags": 32,
            "hasliked": 0,
            "id": "WlXcRs",
            "likes": 2,
            "name": "if(false)texture performance bug",
            "published": 3,
            "tags": [
                "bug"
            ],
            "usePreview": 0,
            "username": "ffcr",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "/*\nWhen TEST is set to 0, the NVIDIA will occupy a very high rate, \nwhich will cause the frame rate to drop or even make NVIDIA stop running.\nBut when TEST is set to 1 or 2, replace 'if' with 'do' loop,\nthe graphics card occupancy will be normal. \nWhen TEST is set to 3, use \"texelfetch\" instead of \"texture\",\nno bug even with \"if\" statement\nIf it is running in the browser of mobile phone or integrated graphics card,\nsetting TEST to 0 will not increase performance consumption.\n*/\n#define TEST 0\n#define EXECUTE false\n#define IF(a) do{if(!(a))break;\n#define ENDIF }while(false);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    bool b=iTime<0.0;//always false\n                                    if(EXECUTE)b=!b;\n    #if TEST==0\n    if(b){\n    \tfor(float a=0.;a<2000.;a++){\n            col+=texture(iChannel0,uv+a).xyz;\n        }\n    }\n    #elif TEST==1\n    do{\n        if(!b)break;\n        for(float a=0.;a<2000.;a++){\n            col+=texture(iChannel0,uv+a).xyz;\n        }\n    }while(false);\n    #elif TEST==2\n    IF(b)\n        for(float a=0.;a<2000.;a++){\n            col+=texture(iChannel0,uv+a).xyz;\n        }\n    ENDIF\n\t#else\n\tif(b){\n        for(float a=0.;a<2000.;a++){\n        \tcol+=texelFetch(iChannel0,ivec2(fragCoord+a),0).xyz;\n        }\n    }\n    #endif\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}