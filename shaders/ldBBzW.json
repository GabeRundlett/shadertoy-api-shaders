{
    "Shader": {
        "info": {
            "date": "1619400959",
            "description": "An experiment in visual psychophysics.\n\nA realtime autpstereogram using rotating bilinear filtered grid as a heightmap.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldBBzW",
            "likes": 2,
            "name": "Magic Eye Experiment",
            "published": 3,
            "tags": [
                "autostereogram"
            ],
            "usePreview": 0,
            "username": "vsnchips",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "//////////////////////////\n\n/*Author: Dan Aston */\n\n//AutoStereogram Fragment Shader\n\nuniform sampler2D tHeightmap;\nuniform sampler2D tPattern;\n\nuniform float iYTile;\n\n\nbool sDisp = true;\nbool sPat = true;\n\n// Texture uniforms\nfloat iErr = 0.1;\nfloat iCmult = 3.;\nfloat iMmult  = 3.2;\nfloat iYmult = 2.6;\n\n// AutoStereogram key parameters - these ones make it work right\nfloat iCols = 10.;\nfloat iDMult = 0.015;\n//\n\nvec2 iOrigin = vec2(0.5);\nfloat itx = 1.;\nfloat ity = 1.;\n\n\n//varying vec4 vertColor;\n//varying vec4 vertTexCoord;\n\n\n#define PI 3.14159265359\n\n//out vec4 fragColor;\n\nvec2 iTranslate;\nfloat blue = 0.;\nfloat red = 0.;\n\nfloat green = 0.;\n\n/////////////////////\n\n//Audio uniforms\n\nuniform float[512] iSamples;\n\n////////////////////\n\n//STRUCTS\n\nstruct dispTrace\n{\n  vec4 samp;\n  float totaldisp;\n}theDTrace;\n\n\n\n\n////////////////////\n\n////////////////////\n\n//=============================================================================================================================================\n\n                      // Here, I define the texture to be mapped onto the shape.\n\n\nvec4 findCol(vec2 uv,float err){    // This casts an iteratively defined color pattern through a 2D binary search inspired algorithm\n  \n  vec4 rescol = vec4 ( 1.0,0.,1.0,1.0);\n  vec2 tlcnr = vec2(0.0); \n  vec2 brcnr = vec2(1.0);\n  vec4 tl = vec4 (1.,0.,0.,1.);\n  vec4 tr = vec4 (1.,0.,0.,1.);\n  vec4 bl = vec4 (1.,0.,0.,1.);\n  vec4 br = vec4 (1.,0.,0.,1.);\n\n  for (int i = 0; i < 32 ; i ++){\n\n  vec2 mid = tlcnr+0.5*(brcnr - tlcnr);\n\n    float cyan = fract(( tl.r + tr.r + bl.r + br.r)/iCmult)*0.5;\n    float magenta = fract(( tl.g + tr.g + bl.g + br.g)/iMmult)*0.5;\n    float yellow = fract(( tl.b + tr.b + bl.b + br.b)/iYmult)*0.5;\n\n    rescol = vec4(magenta+yellow,yellow+cyan,cyan+magenta,1.);\n\n    //if (abs(mid.x*0.2-uv.x)<err && abs(mid.y-uv.y)<err) break;\n    if (distance(vec2(mid.x*0.2,mid.y),vec2(uv.x*0.2,uv.y))<err) break;\n\n    if (uv.x>mid.x){\n      if (uv.y>mid.y){tlcnr = mid;\n          tl = rescol*1.3; tr = rescol; bl = rescol;} \n      else {tlcnr.x = mid.x;\n          brcnr.y = mid.y; tl = rescol; br = rescol; bl = rescol;}\n    }else{\n       if(uv.y>mid.y){tlcnr.y = mid.y; brcnr.x = mid.x;tl = rescol; tr = rescol; br = rescol;}\n        else {brcnr = mid; bl = rescol; tr = rescol; br = rescol;}\n    }\n}\n   \n    //post processing tint\n\n    rescol.rgb =rescol.bgr;\n    //rescol.g=1-rescol.g;\n    rescol.g*=0.7;\n    return rescol;\n}\n\nvec4 getpattern(vec2 uv){\n\n   \n   // add a constant displacement to hide the default column\n   uv.x+=0.031*sin(uv.y*90.0);\n   uv.x+=0.01*sin(uv.y*300.0);\n   uv.x+=0.00031*sin(uv.y*1500.0);\n   \n   //Transform the pattern coordinates too\n   float rotate = iTime*0.1;\n   uv = iOrigin + mat2(cos(rotate),-sin(rotate), sin(rotate),cos(rotate)) * (uv - iOrigin);\n   \n   //uv.y+=0.25;\n   vec4 c= texture(iChannel0,uv); \n   return c;\n\n    \n}\n// =============================================================================================================================\n\n                                        //////////////////////////////////////////\n    \n                                        // Here is the working displacement method.\n                                    // Its slightly amazing how simple it is compared to the last one\n\n                                        //////////////////////////////////////////\n\n\nvoid dispCol(vec2 uv, vec2 origin){    // This one actually returns a color, in a struct with other stuff\n\n  float secwid = (1.0/iCols);\n\n  uv -= origin;\n\n  float chir = (uv.x < 0. ? -1. : 1.);\n\n  uv.x -= 0.5*chir*secwid;\n\n  float colwid = 1./iCols;\n \n// The loop's checking variables //                                                                                                                             \n  vec2 disp = uv;  \n  float thisD = 0.;\n\n//============================\nif (chir*disp.x>=0.){\n  for (int i = 0; i < 24; i++){        // The loop breaks dynamically. 24 tiles per side is heaps. Well need like 5\n   if (chir*disp.x<0.) break;\n\n    //Get the current displacement sample\n    vec2 transp = disp+iTranslate;\n   //thisD = texture(tHeightmap,transp).r;   \n    \n    //Post displacement sample transforms\n    float rotate = iTime*0.1;\n    transp = origin + mat2(cos(rotate),-sin(rotate), sin(rotate),cos(rotate)) * (transp);\n    \n    \n    //Sample the heightmap\n    thisD = ( texture(iChannel1,transp).r  -0.75 )*3.;\n\n    theDTrace.totaldisp += thisD;\n    \n    //step out the displacement\n    disp.x -= (1./iCols-thisD*iDMult)*chir;\n    \n    //visualse the step count\n    green++;\n\n}}\n//==============================\n\n  theDTrace.samp = getpattern(vec2(fract(disp.x*iCols),fract(uv.y+0.5))); \n}\n\n\n                              // And thats it. Magic eye is go.\n\n//====================================================================================================================================================\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n\n{\n\t\n\ttheDTrace.totaldisp=0.;\n\ttheDTrace.samp=vec4(0.);\n\n\t//vec2 fragCoord = vertTexCoord.xy;\n\t//vec2 uv = vertTexCoord.xy - 0.5;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;//\n    \n    //1000.0;\n\t\n\tiTranslate = vec2(0.0);\n\tiTranslate = vec2(itx,ity);\n\n\tfloat subCeiling = 0.15;\n\n\tdispCol(uv,iOrigin);\n\nvec4 color = theDTrace.samp;\n\n\tif (sDisp){\n\t      //color = vec4(theDTrace.totaldisp*0.5); color.b=pow(-theDTrace.totaldisp*3.,2.);\n          //color.g=green*2.6;\n\t}\n\n\t//color = getpattern(uv.xy);\n    //color = texture(iChannel1,uv.xy);\n\n    color=color.rbga;\n    color*=1.45;\n    float p = 2.;\n    color.rgb = vec3(\n    pow(color.r,p),\n    pow(color.g,p),\n    pow(color.b,p)\n    );\n    color.g*=0.8;\n   \n\tfragColor = color;\n\n}\n  \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}