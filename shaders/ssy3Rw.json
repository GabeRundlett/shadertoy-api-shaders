{
    "Shader": {
        "info": {
            "date": "1631239068",
            "description": "Newton Raphson Test.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ssy3Rw",
            "likes": 9,
            "name": "Newton Raphson Simple Example",
            "published": 3,
            "tags": [
                "intersection",
                "newton",
                "log",
                "raphson"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////\n//                                                         //\n// Author:Yusef28                                          //\n// Start Date: 09-09-2021                                  //\n// Status: On Going                                        //\n// Topic: Newton-Raphson Test                              //\n// Sources: Rudimentary Concept (Google/Wikipedia/Youtube) //\n// Listening to:                                           //\n//                                                         // \n/////////////////////////////////////////////////////////////\n\n#define e 2.71828\n#define m cos(iTime)*0.9 + 2.\n#define newton_steps 5\n#define b1 -sin(iTime)-3.\n#define starting_x 3.39+cos(iTime)\n#define off sin(iTime)\nfloat distToLine(vec2 A, vec2 B, vec2 p){\n    \n    vec2 PA = p - A;\n    vec2 BA = B - A;\n    float d = dot(PA,BA);\n    float t = clamp(d/(length(BA)*length(BA)),0., 1.);//Vektorprodukt\n    vec2 normal = PA - BA*t;\n    return length(normal);\n\n}\n\nfloat newton(vec2 uv, inout vec3 col){\n    float found_x = 0.;\n\n    \n    \n    float fx_prime;\n    float xn = starting_x;\n    float xn_plus1,x_next;\n    float f;\n    vec2 A1, B1, A2, B2;\n    \n    float fx;\n    /*\n        B1 = vec2(xn, 0.);\n        A1 = vec2(xn, log(xn));\n        f = 1.0-smoothstep(0.02,0.06,abs(distToLine(A1, B1, uv)));\n        col = mix(col, vec3(.3,.3,1.), f);\n        */\n    for(int i = 0; i < 5; i++){\n        \n        float x0 = xn;\n        //fx when it's 0 is set to the difference between\n        //log(xn) and the line equation\n        fx = xn*xn + off;\n        //fxPrime is just the derivative of these \n        //and it's the same as the slope at point xn\n        fx_prime = 2.*xn;\n        //our new x is approximated by a line through the tangent\n        //at the pooint it hits the x axis\n        //y = mx + b where y = 0 -> x = -b/m = (-fx/fx_prime)\n\n        //I'll come back to this...\n        \n        //... the true x intersect is xi\n        //xi ~= xguess + xfromtangentlineoffx\n        //xi ~= xguess + (-b/m)\n        //so for example, x^2 with init guess x = 2\n        // fx = 2^2 = 4, fx' = 2*2 = 4, fx/fx' = 1\n        // next x = 2 + (-1) = 1\n        \n        //I think thats the idea\n        \n        xn = xn - fx/fx_prime;\n\n        A1 = vec2(x0, x0*x0+off);\n        B1 = vec2(xn, 0.);\n        \n        f = 1.0-smoothstep(0.02,0.03,abs(distToLine(A1, B1, uv)));\n        col = mix(col, (vec3(1.,.3,.3))*0.5+0.5, f);\n    \n        A2 = vec2(xn, xn*xn+off);\n        B2 = vec2(xn, 0.);\n\n        f = 1.0-smoothstep(0.02,0.03,abs(distToLine(A2, B2, uv)));\n        col = mix(col, (vec3(.99,.3,.2))*0.5+0.5, f);\n        \n        f = 1.-smoothstep(0.03,0.05,length(uv-A1)-0.05);\n        col = mix(col, vec3(.2,0.75,1.), f);\n    }\n    \n    return xn;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5,0.5)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n    \n      ////////////////////////////////////////////\n      //                                       //\n////////      BACKGROUND GRID DESIG          //\n      //                                   //\n      /////////////////////////////////////\n      \n      \n    vec2 st = uv;//save the unscaled uv\n    //I'm only making an 8(*aspect)x8 grid, higher variables\n    //may end up with graphs completely outside it\n    \n    uv*=8.;\n    uv.y+=3.;\n    //graph background\n    vec3 col = vec3(0.1);\n    \n    //center highlights\n    col = mix(col,vec3(0.16),1.0-length(uv/8.));\n    \n    //dust \n    float specks = fract(sin(dot(uv,vec2(123.,16.)))*433413.);\n    \n    //nice soft texture \n    float tex = texture(iChannel0,st).x;\n    col = mix(col,vec3(0.25),pow(tex,2.));\n    \n    //small grid lines\n    vec2 lines = fract(uv*5.);\n    lines = smoothstep(0.45,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.24),lines.x);\n    col = mix(col,vec3(0.24),lines.y);\n    \n    //larger grid lines\n    lines = fract(uv);\n    lines = smoothstep(0.47,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.5),lines.x);\n    col = mix(col,vec3(0.5),lines.y);\n    \n    //axis lines\n    lines = smoothstep(0.0,0.02,abs(uv));\n    col = mix(col,vec3(0.6),1.0-lines.x);\n    col = mix(col,vec3(0.6),1.-lines.y);\n    col = mix(col,vec3(0.1),step(0.1,specks)*0.2);\n    \n    uv.x/=2.;\n      ////////////////////////////////////////////\n      //                                       //\n////////     INTERSECTION CALCULATIONS       //\n      //                                   //\n      /////////////////////////////////////\n\n    //y based on sin\n    float y = uv.x*uv.x + off;\n    \n    \n    //line \n    float m1 = sin(m);\n    //float b1 = cos(iTime+0.4)*2.;\n    \n    float log_plus_line = log(uv.x) - (uv.x*m1 + b1);\n    //newton-raphson\n    float found_x = newton(uv, col);\n    \n\n    //calculate the intersection points\n    vec2 intersectionPoint1 = vec2(found_x, y);\n   // vec2 intersectionPoint2 = vec2(root2, 0.);\n    \n    \n      ////////////////////////////////////////////\n      //                                       //\n////////        DRAWING EVERYTHING           //\n      //                                   //\n      /////////////////////////////////////\n    \n    \n    //Drawing the quadratic line\n    //float f = 1.0-smoothstep(0.02,0.06,abs(y-uv.y)); //old way\n    //new way using derivatives\n    //it's y - uv.y where \"y\" is some quadratic of x\n    float f = 1.0-smoothstep(0.02,0.15,abs(y-uv.y)/fwidth(y-uv.y)/20.);\n    col = mix(col, vec3(1.,.2,0.5), f);\n    \n    //sum of the line and the log funciton\n    //f = 1.0-smoothstep(0.02,0.15,abs(log_plus_line-uv.y)/fwidth(log_plus_line-uv.y)/20.);\n    //col = mix(col, vec3(0.2,.6,0.9), f);\n    \n    //line 1\n    //float f;// = 1.0-smoothstep(0.02,0.06,abs(uv.x*m1 + b1 - uv.y));\n    //f = 1.0-smoothstep(0.05,0.1,abs(uv.x*m1 + b1 - uv.y)/fwidth(uv.x*m1 + b1 - uv.y)/20.);\n    //col = mix(col, vec3(1.,.5,0.2), f);\n   \n    /*\n    //intersection point\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv-intersectionPoint1)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-intersectionPoint1)-0.05);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    */\n\n    \n      ////////////////////////////////////////////\n      //                                       //\n////////          POST PROCESSING            //\n      //                                   //\n      /////////////////////////////////////\n        \n    col = clamp(col,0.,1.);\n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.15); // change pow for modifying the extend of the  vignette\n    col = clamp(col,0.,1.);\n    // Output to screen\n    fragColor = vec4(col*vig,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}