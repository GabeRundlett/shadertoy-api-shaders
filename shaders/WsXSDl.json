{
    "Shader": {
        "info": {
            "date": "1573952009",
            "description": "Interactive knobs.  Values span range -1...1 and are accessed with knob(id) function.\nMove and resize by dragging corners.\nConstant size when switching to fullscreen is intentional.\n\nknob_draw has been heavily hacked on, please forgive silliness.",
            "flags": 32,
            "hasliked": 0,
            "id": "WsXSDl",
            "likes": 18,
            "name": "Knobs",
            "published": 3,
            "tags": [
                "interactive",
                "ui",
                "knob"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 839
        },
        "renderpass": [
            {
                "code": "/*\nInteractive Knobs v0.99.0\nCopyright 2019 Theron Tarigo\n\nInteractive knobs.\nValues span range -1...1 and are accessed with knob(id) function.\nMove and resize by dragging corners.\nConstant size when switching to fullscreen is intentional.\n\nAn earlier version had knob id and current value written below the knob,\nthat is why a space is left (It is to be readded).\n\nknob_draw has been heavily hacked on, please forgive silliness.\n\n*/\n\nvoid knob_draw (inout vec3 f, vec2 d, float s, float p, int n) {\n  if (min(d.x,d.y)<0. || max(d.x,d.y)>s) return;\n  d=d-s/2.;\n  float b=max(abs(d.x),abs(d.y));\n  vec3 g=vec3(.05)*(1.+2.*dot(pow(abs(d/s/.46),vec2(16)),vec2(1)));\n  d.y-=s*.06;\n  f=mix(f,g,.75);\n  f=mix(f,vec3(0.),clamp(exp(8.*(s*.30-length(d))/s),0.,1.)*clamp(s*.46-b,0.,1.));\n  float digsz=round(s*.2/3.)*3.;\n  // There was a routine here for drawing the knob id and value at the bottom\n  // It's been removed for now and needs to be rewritten.\n  float a=p*pi;\n  d=mat2(cos(a),sin(a),-sin(a),cos(a))*d;\n  g=vec3(.3);\n  vec3 l=clamp(vec3(-.5*p,.2*p,p)+p*p/4.,vec3(0),vec3(1));\n  l*=.1+.02/(dot(d,d)/(s*s)+.002);\n  l+=1e-9;\n  const vec3 m = normalize(vec3(5,8,3));\n  l=tanh(length(l*m)*1.)*mix(normalize(l),vec3(1),tanh(length(l*m)*.1));\n  g=mix(g,l,clamp(s*.305-length(d),0.,1.));\n  g=mix(g,vec3(.9),.5*clamp(min(s*.04-abs(d.x),s*.0+d.y),0.,1.));\n  f=mix(f,g,clamp(s*.32-length(d),0.,1.));\n}\n\nvoid mainImage ( out vec4 f, in vec2 df ) {\n  INIT\n  f.r = knob(15)*.5+.5;\n  f.g = knob(16)*.5+.5;\n  f.b = knob(17)*.5+.5;\n  f.rgb = clamp(f.rgb,vec3(0),vec3(1));\n\n  for (int id=0; id<WIDGETS_MAX; id++) {\n    vec4 geom = widget_geom(id);\n    knob_draw(f.rgb, df-geom.xy, geom.z, knob(id), id);\n  }\n  // GAMMA\n  f.rgb = pow(f.rgb,vec3(1./2.2));\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float pi = 3.141592653589793;\n\nvec3 iResolution_;\n#define iResolution iResolution_\n#define INIT iResolution_ = iResolution;\n\nconst int CONTROL_CHANNEL_GEOM = 0;\nconst int CONTROL_CHANNEL_GEOM_LAST = 1;\nconst int CONTROL_CHANNEL_KNOB = 2;\n\nconst int WIDGETS_MAX = 18;\n\n#define widget_geom_last(id) (texelFetch(iChannel3, ivec2((id),CONTROL_CHANNEL_GEOM_LAST), 0))\n#define widget_geom(id) (texelFetch(iChannel3, ivec2((id),CONTROL_CHANNEL_GEOM), 0))\n#define knob(id) (texelFetch(iChannel3, ivec2((id),CONTROL_CHANNEL_KNOB), 0).x)\n\nfloat knob_init(int id) {\n  const float[] init = float[](\n      -1.,-.8,-.6,-.4,-.2, 0., .2, .4, .6, .8, 1.,\n      0., 0., 0., 0.,\n      -1., -1., -1.);\n  return init[id];\n}\n\nvec4 geom_init(int id) {\n  vec4 geom;\n  if (id<11) {\n    geom.zw = vec2(60.);\n    geom.xy = 60.*mat2(1,0,0,0)*vec2(float(id),1);\n  }\n  else if (id<15) {\n    geom.zw = vec2(60.)*2.;\n    geom.xy = 60.*mat2(2,0,0,1)*vec2(float(id-11),1);\n  }\n  else if (id<18) {\n    geom.zw = vec2(60.)*1.5;\n    geom.xy = 60.*mat2(0,1.5,9,2)*vec2(float(id-15),1);\n  }\n  return geom*min(iResolution.x/800.,1.);\n}\n#undef iResolution",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid knob_feedback(int id, inout float v) {\n  if (id==11) v = 1.5*sin(2.*pi*fract(iTime/3.));\n}\n\nvoid mainImage ( out vec4 v, in vec2 d ) {\n  INIT\n  ivec2 i = ivec2(d);\n  v = texelFetch(iChannel3, i, 0);\n  vec2 mouse_latest = iMouse.xy;\n  vec2 mouse_last = abs(iMouse.zw);\n  bool mouse_down = (iMouse.z>0.);\n  vec4 geom_curr = widget_geom(i.x);\n  vec4 geom = widget_geom_last(i.x);\n  if (i.y==CONTROL_CHANNEL_GEOM_LAST) {\n    if (!mouse_down) v = geom_curr;\n  }\n  vec2 origin_frame = geom.xy/geom.z+0.5;\n  vec2 origin_knob = origin_frame+vec2(0,.06);\n  vec2 rframe = mouse_last/geom.z-origin_frame;\n  vec2 rknob = mouse_last/geom.z-origin_knob;\n  vec2 start_knob = mouse_last/geom.z-origin_knob;\n  vec2 drag = mouse_latest-mouse_last;\n  if (i.y==CONTROL_CHANNEL_GEOM) {\n    if (iFrame==0) { v=geom_init(i.x); return; }\n    if (mouse_down) {\n      if (max(abs(rframe.x),abs(rframe.y)) < .5 && length(rknob)>.4) {\n        if (rframe.x>.2 && rframe.y<-.2) {\n          // grabbed corner, resize\n          v.z=v.w = max(32.,geom.z+drag.x);\n        } else {\n          // drag the widget\n          v.xy = geom.xy+drag;\n        }\n      }\n    }\n  }\n  if (i.y==CONTROL_CHANNEL_KNOB) {\n    v.z = v.x;\n    if (mouse_down && length(rknob)<.4) {\n        v.x=v.y-cross(vec3(start_knob,0),vec3(drag,0)).z/length(start_knob)*2./geom.z;\n    } else {\n      knob_feedback(i.x, v.x);\n      v.y=v.x;\n    }\n    if (iFrame==0) v.x=knob_init(i.x);\n    v.x=clamp(v.x,-1.,1.);\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}