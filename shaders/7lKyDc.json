{
    "Shader": {
        "info": {
            "date": "1662388250",
            "description": "shader for homework 1",
            "flags": 32,
            "hasliked": 0,
            "id": "7lKyDc",
            "likes": 3,
            "name": "shader - Gabbasova A",
            "published": 3,
            "tags": [
                "hw"
            ],
            "usePreview": 0,
            "username": "Aigul",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "const vec3 eye = vec3(0,0,9);\nconst vec3 light = vec3(0.0, 3.0, 5.0);\nfloat sphere_move = 1.0;\n\nmat3 rotateX(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1,0,0),\n        vec3(0,c,-s),\n        vec3(0,s,c)\n    );\n}\n\nmat3 rotateY(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c,0,s),\n        vec3(0,1,0),\n        vec3(-s,0,c)\n    );\n}\n\n\nfloat box ( in vec3 pos, in vec3 size )\n{\n    vec3 pt = abs ( pos ) - size;\n\n    return length ( max ( pt, 0.0 ) ) + min ( max ( pt.x, max ( pt.y, pt.z ) ), 0.0 );\n}\n\nfloat sphere ( vec3 p, in vec3 center, in float radius )\n{\n    return length ( p - center ) - radius;\n}\n\nfloat dE1 ( in vec3 p, in mat3 m)\n{\n    vec3  pt = m * p;\n    float d2 = box    ( pt, vec3 ( 0.8, 0.8, 0.8 ) );\n    \n    float res = d2;\n    for (int i = 0; i <= 1; ++i)\n    {\n        for (int j = 0; j <= 1; ++j)\n        {\n            for (int k = 0; k <= 1; ++k)\n            {\n                float ds = sphere ( pt, vec3 ( -0.8 + float(i) * 1.6, -0.8 + float(j) * 1.6, -0.8 + float(k) * 1.6 ), 0.8 );\n                res = max ( -ds, res ); \n            }\n        }\n    }\n    \n    return res;\n}\n\nfloat dE2 ( in vec3 p, in mat3 m)\n{\n    vec3  pt = m * p;\n    \n    float res = 10.0;\n    \n    sphere_move = 1.0 + sin(iTime * 1.5) / 5.0;\n    \n    for (int i = 0; i <= 1; ++i)\n    {\n        for (int j = 0; j <= 1; ++j)\n        {\n            for (int k = 0; k <= 1; ++k)\n            {\n                float ds = sphere ( pt, vec3 ( -0.8 + float(i) * 1.6, -0.8 + float(j) * 1.6, -0.8 + float(k) * 1.6 ) * sphere_move, 0.5 );\n                res = min ( ds, res ); \n            }\n        }\n    }\n    \n    return res;\n}\n\nvec3 trace ( vec3 from, vec3 dir, out bool hit, in mat3 m, out int obj)\n{\n\tvec3\tp         = from;\n\tfloat\ttotalDist = 0.0;\n\t\n\thit = false;\n\t\n\tfor ( int steps = 0; steps < 30; steps++ )\n\t{\n\t\tfloat\tdist1 = dE1 ( p, m);\n\t\tfloat\tdist2 = dE2 ( p, m);\n        \n\t\t\n\t\tif ( min(dist1, dist2) < 0.01 )\n\t\t{\n\t\t\thit = true;\n            if (dist1 < 0.01) \n            {\n                obj = 1;\n            }\n            else\n            {\n                obj = 2;\n            }\n\t\t\tbreak;\n\t\t}\n        \n\t\t\n\t\ttotalDist += min(dist1, dist2);\n\t\t\n\t\tif ( totalDist > 10.0 )\n\t\t\tbreak;\n\t\t\t\n\t\tp += min(dist1, dist2) * dir;\n\t}\n\t\n\treturn p;\n}\n\nvec3 generateNormal(vec3 z, in mat3 m)\n{\n    float e = 0.001;\n    float dx1 = min(dE1(z + vec3(e,0,0), m), dE2(z + vec3(e,0,0), m));\n    float dx2 = min(dE1(z - vec3(e,0,0), m), dE2(z - vec3(e,0,0), m));\n    float dy1 = min(dE1(z + vec3(0,e,0), m), dE2(z + vec3(0,e,0), m));\n    float dy2 = min(dE1(z - vec3(0,e,0), m), dE2(z - vec3(0,e,0), m));\n    float dz1 = min(dE1(z + vec3(0,0,e), m), dE2(z + vec3(0,0,e), m));\n    float dz2 = min(dE1(z - vec3(0,0,e), m), dE2(z - vec3(0,0,e), m));\n    return normalize(vec3(dx1 - dx2, dy1 - dy2, dz1 - dz2));\n}\n\nvec3 getTriplanarWeights ( in vec3 n ) \n{\n\tvec3 triW = abs(n);\n    \n\treturn triW / (triW.x + triW.y + triW.z);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool hit;\n    int obj;\n    vec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5, iMouse.z - 0.5);\n    mat3 m = rotateX(6.0*mouse.y) * rotateY(6.0*mouse.x);\n    vec2 scale = 9.0 * iResolution.xy/max(iResolution.x, iResolution.y);\n    vec2 uv = scale * (fragCoord/iResolution.xy - vec2(0.5));\n    vec3 dir = normalize(vec3(uv, 0) - eye);\n    vec4 color = vec4 (0, 0, 0, 1);\n    vec3 p = trace(eye, dir, hit, m, obj);\n    vec3 l = normalize(light - p);\n    vec3 v = normalize(eye - p);\n    vec3 n = generateNormal(p, m);\n    float nl = max(0.0, dot(n,l));\n    vec3 h = normalize(l + v);\n    float hn = max(0.0, dot(h, n));\n    float sp = pow(hn, 150.0);\n    if (hit)\n    {\n        color = 0.7 * vec4(nl) + 0.9 * sp * vec4(0.5,0.5,0.5,1);\n        vec3 tx = getTriplanarWeights( n );\n        vec3 q  = m * p;\n        \n        if (obj == 1)\n        {\n            vec4 cx = texture ( iChannel0, q.yz );\n            vec4 cy = texture ( iChannel0, q.zz );\n            vec4 cz = texture ( iChannel0, q.xy );\n            color *=  tx.x * cx + tx.y * cy + tx.z * cz;\n        }\n        else\n        {\n            q  /= sphere_move;\n            vec4 cx = texture ( iChannel1, q.yz);\n            vec4 cy = texture ( iChannel1, q.zz);\n            vec4 cz = texture ( iChannel1, q.xy);\n            color *=  tx.x * cx + tx.y * cy + tx.z * cz;\n        }\n    }\n    \n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = vec2(fragCoord.xy / iResolution.xy);\n    vec3 col1 = vec3(0.0, 1.0, cos(iTime) / 2.0 + 1.0);\n    vec3 col2 = vec3(0.0, 0.2, sin(iTime) / 2.0 + 1.0);\n            \n    float arg1 = 14.0 * p.x * (sin(iTime) / 3.0 + 1.2);\n    float arg2 = 14.0 * p.y * (sin(iTime) / 3.0 + 1.2);\n\n    float m1 = smoothstep(0.1, 0.9, sin(arg1));\n    float m2 = smoothstep(0.1, 0.9, sin(arg2));\n            \n    vec3 ret1 = mix(col1, col2, m1);\n    vec3 ret2 = mix(col1, col2, m2);\n    \n    fragColor = vec4(ret1,1.0) + vec4(ret2,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}