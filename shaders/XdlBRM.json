{
    "Shader": {
        "info": {
            "date": "1495410448",
            "description": "raymarch tunnel distortion stuff\n",
            "flags": 32,
            "hasliked": 0,
            "id": "XdlBRM",
            "likes": 31,
            "name": "cosmic aperture",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "mandala"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 1607
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 uv, float theta)\n{\n\tvec2 p = uv - 0.5;\n    \n    p = p * mat2(cos(theta), -sin(theta),\n                 sin(theta), cos(theta));\n    p *= 1.0 ;\n    p += 0.5;\n    return p;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float theta = 0.05 ; //* sin(iTime);\n    vec3 col ;\n    col.r = texture(iChannel0,  rotate(uv, -theta)).r;\n    col.g = texture(iChannel0, uv).g;\n    col.b = texture(iChannel0, rotate(uv, theta)).b;\n    \n    //col = pow(col, vec3(0.5, 0.5, 0.5));\n    fragColor = vec4( col, 1.0);\n    \n  //  fragColor = texture(iChannel0, uv);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat time = 0.1;\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat map(vec3 p)\n{\n\n    vec3 q = p;\n\n    vec3 c = vec3(0.2);\n    p.z = mod(p.z,c.z)-0.5*c.z;\n\n    \n    vec3 p_s;\n    \n    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), sin(floor(q.z) * 10.0) * 4.0 + 0.1 * (time));\n    \n    float bars = 1000.0;\n    int sides = 8;//int(sin(iTime /6.0) * 5.0) + 5;\n    float angle = 3.1415 * 2.0 / float(sides);\n    \n    for ( int i = 0; i < sides; i ++)\n    {\n        \n        p_s = p * rotationMatrix(vec3(0.0, 0.0, 1.0), angle * float(i));\n        \n       \tp_s += vec3(sin(floor(q.z)+ time* 0.2)* 0.5 + 1.0, sin(q.z), 0.0);\n        \n        vec3 boxdim = vec3(\n            0.06 + sin(q.z * 10.0 + 4.0 + iTime) * 0.03 , //0.1 + 0.1 *  sin(iTime /6.0) , //* sin(length(p.xy * 20.0))* 0.2, \n            (1.0 + cos(floor(q.z * 0.1) + time )) * pow(sin((q.z * 2.0) + time)* 0.5 + 0.5, 3.0) * 20.0 * (0.5 + sin(time) * 0.5), \n            0.01);\n     \t\n        \n        bars = min(bars, sdBox(p_s, boxdim));  \n    }\n\n        \n    \n    float result = bars;   \n    return result;\n}\n\n\n// See https://iquilezles.org/articles/palettes for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = time;\n   // ro.x -= sin(iTime) 2.0;\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx) - map(p-e.yxx),\n\t\t\t\t\tmap(p+e.xyx) - map(p-e.xyx),\n\t\t\t\t\tmap(p+e.xxy) - map(p-e.xxy)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.5;\n    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 80; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001) {\n\t\t\thit = true;\n            break;\n        }\n                   \n\t\tdepth += d * 0.2;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 80.0);\n\n    fragColor = vec4(sqrt(col), hit? length(p.xy) : 0.0 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}