{
    "Shader": {
        "info": {
            "date": "1720268226",
            "description": "Fake 3D with noise and a for loop. Just playing with an idea from my last shader, stacked layered noise. - Noise and FBM @Shane & @IQ\n(mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "4XyXRc",
            "likes": 18,
            "name": "Byt3-daily-008",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "fbm",
                "layers"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n    Byt3-daily-008\n\n    Fake 3D with noise and a for loop. Just playing with an idea from my \n    last shader, stacked layered noise. *Noise and FBM @Shane & @IQ\n     \n    07/06/2024  @byt3_m3chanic\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n#define PI          3.141592653\n#define PI2         6.283185307\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a){ return fract(sin(dot(a,vec2(22.54,35.45)))*4823.232);}\n\n//@iq hsv\nvec3 hsv( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*2.+vec3(0,4,2),6.)-3.)-1., 0., 1.0 );\n    return c.z * mix( vec3(1), rgb, c.y);\n}\n\n// @Shane - a very tightly compacted, self-contained version \n// of IQ's 3D value noise function.\n//---------------------------------------------------------------\nfloat n3D(vec3 p){\n    const vec3 s = vec3(113, 57, 27);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n// @iq fbm generator\nfloat fbm3( in vec3 x) {\n    x*=.1;\n    float a = 0.1,b = .5,f = 2.;\n    vec3  d = vec3(0.);\n    for (int i = 0; i < 4; ++i) {      \n        float n = n3D(f*x);\n        a += b*n;\n        b *= 0.5;\n        f *= 1.8;\n    }\n\treturn a;\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) \n{\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y); \n    vec2 vv = uv;\n\n    float px = fwidth(uv.x); \n    vec3 C = vec3(.005);\n    \n    // mouse //\n    float x = M.xy==vec2(0) || M.z <0. ? 0. : -(M.y/R.y*.4-.2)*PI;\n    float y = M.xy==vec2(0) || M.z <0.  ? 0. : -(M.x/R.x*.4-.2)*PI;\n    \n    vv *= 720.;\n    float fx = mod(floor(T*20.),64.);\n    for(float i=1.;i<128.;i++) {\n\n        vec3 h = mod(i,2.)<1.? vec3( (i*.0025) ):hsv(vec3((i*.075),.95,(i*.008)));\n        if (mod(i,64.)==fx) h=vec3((i*.009));\n        if(i==127.)h=vec3(.01);\n        vv *= .979;\n         \n        vv += vec2(y,x)*(i*.08);\n        float ff= (i*.165);\n        float d = fbm3(vec3(vv*.25+vec2(T*.78,0),ff));\n\n        if (d>.59) C = h;\n    }\n\n    // gamma and output\n    C = pow(clamp(C,vec3(0),vec3(1)),vec3(.4545));\n    O = vec4(C,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}