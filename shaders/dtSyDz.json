{
    "Shader": {
        "info": {
            "date": "1695901713",
            "description": "Raymarching practice for a nand2tetris implementation in Jack. Left side is grayscale, right side is binary. I chose 8x8 ordered dithering for its simplicity.\n\nGo to https://github.com/HantosNorbert/Raymarching-in-Jack to see the whole project.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtSyDz",
            "likes": 6,
            "name": "Raymarching with image dither",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Renslay",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "// Parameters\nconst int MAX_MARCHING_STEPS = 64;\nconst int MAX_MARCHING_STEPS_SHADOW = 32;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 12.0;\nconst float PRECISION = 0.01;\nconst float EPSILON = 0.005;\n\nconst float BACKGROUND_COLOR = 0.835;\nconst float BALL_COLOR = 0.7;\n\nconst vec3 CAM_LOOK_AT = vec3(0, 0, 0);\nconst vec3 LIGHT_POS = vec3(2., 5, -1.0);\n\n// ordered dithering 8x8 matrix\nfloat ditherMatrix[64] = float[64]( 0., 48., 12., 60.,  3., 51., 15., 63.,\n                                   32., 16., 44., 28., 35., 19., 47., 31.,\n                                    8., 56.,  4., 52., 11., 59.,  7., 55.,\n                                   40., 24., 36., 20., 43., 27., 39., 23.,\n                                    2., 50., 14., 62.,  1., 49., 13., 61.,\n                                   34., 18., 46., 30., 33., 17., 45., 29.,\n                                   10., 58.,  6., 54.,  9., 57.,  5., 53.,\n                                   42., 26., 38., 22., 41., 25., 37., 21.);\n\nstruct Surface {\n    float sd; // signed distance value\n    float col; // color\n};\n\n// https://iquilezles.org/articles/distfunctions/\nSurface sdSphere( vec3 p, float r, vec3 offset, float col ) {\n  p = p - offset;\n  float d = length(p)-r;\n  return Surface(d, col);\n}\n\nSurface sdTorus( vec3 p, vec2 t, vec3 offset, float col ) {\n  p = p - offset;\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  float d = length(q)-t.y;\n  return Surface(d, col);\n}\n\nSurface sdFloor(vec3 p, float col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\nSurface unionSDF(Surface obj1, Surface obj2) {\n    if (obj1.sd < obj2.sd) return obj1;\n    return obj2;\n}\n\nSurface sdScene(vec3 p) {\n  float floorColor = 1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0);\n  Surface flooor = sdFloor(p, floorColor);\n\n  Surface sphere = sdSphere(p, 1., vec3(-1.5*cos(iTime), 0, 1.5*sin(iTime)), BALL_COLOR);\n  Surface torus = sdTorus(p, vec2(1.0, 0.25), vec3(1.5*cos(iTime), 0, -1.5*sin(iTime)), BALL_COLOR);\n  //Surface sphere = sdSphere(p, 1., vec3(-1.5, 0, 0), BALL_COLOR);\n  //Surface torus = sdTorus(p, vec2(1.0, 0.25), vec3(1.5, 0, 0), BALL_COLOR);\n\n  Surface co = sphere;\n  co = unionSDF(co, torus);\n  co = unionSDF(co, flooor);\n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, int maxMarchingSteps) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < maxMarchingSteps; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\n// https://iquilezles.org/articles/normalsSDF/\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 forward = normalize(cameraPos - lookAtPoint); // camera direction\n\tvec3 right = normalize(cross(vec3(0, 1, 0), forward)); // camera right\n\tvec3 up = normalize(cross(forward, right)); // camera up\n\treturn mat3(right, up, forward);\n}\n\n\nfloat angle(vec3 v1, vec3 v2) {\n    return clamp(dot(v1, v2), 0.0, 1.0);\n}\n\n// Phong reflection model\nfloat lightIntensity(vec3 p, vec3 norm, vec3 camPos, vec3 lightPos) {\n    float kd = 0.9;\n    float ks = 0.7;\n    float id = 0.7;\n    float is = 0.5;\n    float a = 4.0;\n    \n    vec3 lightDir = normalize(lightPos - p);\n    vec3 camDir = normalize(camPos - p);\n    \n    vec3 reflectDir = 2.0 * angle(lightDir, norm) * norm - lightDir;\n    float diffuseLight = kd * angle(lightDir, norm) * id;\n    float specularLight = ks * pow(angle(reflectDir, camDir), a) * is;\n    \n    float color = (diffuseLight + specularLight);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec3 camPos = vec3(4.0*sin(iTime/5.0), 1.5, 4.0*cos(iTime/5.0));\n\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  float col = 0.0;\n  \n  mat3 camMatrix = camera(camPos, CAM_LOOK_AT);\n  vec3 rd = camMatrix * normalize(vec3(uv, -1.)); // ray direction\n\n  Surface co = rayMarch(camPos, rd, MAX_MARCHING_STEPS); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = BACKGROUND_COLOR; // ray didn't hit anything\n  } else {\n    vec3 p = camPos + rd * co.sd; // point on object or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    \n    col = co.col * lightIntensity(p, normal, camPos, LIGHT_POS) + 0.2*BACKGROUND_COLOR;\n    \n    vec3 lightDir = normalize(LIGHT_POS - p);\n    vec3 newRayOrigin = p + normal * PRECISION * 2.;\n    // cast shadow ray to the light source\n    float shadowRayLength = rayMarch(newRayOrigin, lightDir, MAX_MARCHING_STEPS_SHADOW).sd;\n    if (shadowRayLength < length(LIGHT_POS - newRayOrigin))\n        col *= 0.25;\n  }\n  col = clamp(col, 0.0, 1.0);\n  \n  // dithering\n  if (uv.x > -cos(iTime/2.0)) {\n    col = col + ditherMatrix[8 * int(mod(fragCoord.x, 8.0)) + int(mod(fragCoord.y, 8.0))] / 64.0 - 0.5;\n    col = col < 0.5 ? 0.0 : 1.0;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, col, col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}