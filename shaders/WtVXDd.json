{
    "Shader": {
        "info": {
            "date": "1583889498",
            "description": "These rings appear over a fractal landscape.\n\nMove the mouse to zoom in and out!",
            "flags": 0,
            "hasliked": 0,
            "id": "WtVXDd",
            "likes": 1,
            "name": "Saturn rings",
            "published": 3,
            "tags": [
                "fractal",
                "rings",
                "saturn"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "\n//This parameter changes the magnification.\nconst float mag = 9.0;\n\nconst float GREEN = 0.0;\nconst float BLUE = 1.0;\nconst float GRAY = 2.0;\nconst float YELLOW = 3.0;\nconst float WHITE = 4.0;\nconst float FOREST_GREEN = 5.0;\nconst float LIGHTBLUE = 6.0;\nconst float SKYBLUE = 7.0;\nconst float SNOW = 8.0;\nconst float WHITESMOKE = 9.0;\nconst float LIGHTGRAY = 10.0;\nconst float LIME = 11.0;\nconst float LIGHTYELLOW = 12.0;\nconst float BEIGE = 13.0;\nconst float SAND = 14.0;\nconst float TAN = 15.0;\n\n//this function is from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p,float colors[6],float mag)\n{\n    float num_colors = 6.0;\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    //if(mag > 2.0){\n    \tp3 += dot(p3, p3.yzx + 33.33);\n    //}\n    //else{\n    //\tp3 += dot(p3, p3.yzx + 33.33+iTime/(1000.0*mag));\n    //}\n    return colors[int(floor(fract((p3.x + p3.y) * p3.z)*num_colors))];\n}\nfloat hash12(vec2 p,float colors[5],float mag)\n{\n    float num_colors = 6.0;\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    //if(mag > 2.0){\n    \tp3 += dot(p3, p3.yzx + 33.33);\n    //}\n    //else{\n    //\tp3 += dot(p3, p3.yzx + 33.33+iTime/(1000.0*mag));\n    //}\n    return colors[int(floor(fract((p3.x + p3.y) * p3.z)*num_colors))];\n}\n\nfloat hash12(vec2 p,float colors[2],float mag)\n{\n    float num_colors = 6.0;\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    //if(mag > 2.0){\n    \tp3 += dot(p3, p3.yzx + 33.33);\n    //}\n    //else{\n    //\tp3 += dot(p3, p3.yzx + 33.33+iTime/(1000.0*mag));\n    //}\n    return colors[int(floor(fract((p3.x + p3.y) * p3.z)*num_colors))];\n}\n\n\n\nfloat magnify(vec2 fragCoord,float mag,float[6] colors){\n    return hash12(floor(fragCoord/pow(3.0,mag)),colors,mag);\n}\n\nfloat magnify(vec2 fragCoord,float mag,float[5] colors){\n    return hash12(floor(fragCoord/pow(3.0,mag)),colors,mag);\n}\n\nfloat magnify(vec2 fragCoord,float mag,float[2] colors){\n    return hash12(floor(fragCoord/pow(3.0,mag)),colors,mag);\n}\n\nvec4 get_neighbors(vec2 fragCoord,float mag,float[5] colors){\n\treturn vec4(magnify(fragCoord+vec2(0,1),mag,colors),\n        magnify(fragCoord+vec2(1,0),mag,colors),\n        magnify(fragCoord-vec2(0,1),mag,colors),\n        magnify(fragCoord-vec2(1,0),mag,colors));\n}\n\nvec4 get_neighbors(vec2 fragCoord,float mag,float[2] colors){\n\treturn vec4(magnify(fragCoord+vec2(0,1),mag,colors),\n        magnify(fragCoord+vec2(1,0),mag,colors),\n        magnify(fragCoord-vec2(0,1),mag,colors),\n        magnify(fragCoord-vec2(1,0),mag,colors));\n}\n\nvec4 get_neighbors(vec2 fragCoord,float mag,float[6] colors){\n\treturn vec4(magnify(fragCoord+vec2(0,1),mag,colors),\n        magnify(fragCoord+vec2(1,0),mag,colors),\n        magnify(fragCoord-vec2(0,1),mag,colors),\n        magnify(fragCoord-vec2(1,0),mag,colors));\n}\n\nbool is_above(vec2 fragCoord,float mag,float color,float[6] colors){\n\treturn magnify(fragCoord,mag,colors) == color;\n}\nbool is_surrounded_by(vec2 fragCoord,float mag,float color,float[6] colors){\n\treturn magnify(fragCoord+vec2(0,1),mag,colors) == color\n        && magnify(fragCoord+vec2(1,0),mag,colors) == color\n        && magnify(fragCoord-vec2(0,1),mag,colors) == color\n        && magnify(fragCoord-vec2(1,0),mag,colors) == color;\n}\n\nbool is_next_to(float color,vec4 neighbors){\n\treturn (neighbors.x == color)\n        || (neighbors.y == color)\n        || (neighbors.z == color)\n        || (neighbors.w == color);\n}\n\nvec3 rgb(float r,float g,float b){\n\treturn vec3(r,g,b)/255.0;\n}\n\nvec3 get_color(float color){\n    if(color == BLUE){\n    \treturn vec3(0.149,0.141,0.912);\n   \t}\n    else if(color == GREEN){\n    \treturn vec3(0.000,0.833,0.224);\n   \t}\n    else if(color == FOREST_GREEN){\n    \treturn rgb(34.0,139.0,34.0);\n   \t}\n    else if(color == WHITE){\n    \treturn vec3(1.0,1.0,1.0);\n   \t}\n    else if(color == GRAY){\n    \treturn vec3(192.0,192.0,192.0)/255.0;\n    }\n    else if(color == YELLOW){\n    \treturn vec3(1.0,1.0,0.0);\n   \t}\n    else if(color == LIGHTBLUE){\n    \treturn rgb(173.0,216.0,230.0);\n   \t}\n    else if(color == SKYBLUE){\n    \treturn rgb(135.0,206.0,235.0);\n    }\n    else if(color == SNOW){\n    \treturn rgb(255.0,250.0,250.0);\n    }\n    else if(color == WHITESMOKE){\n    \treturn rgb(245.0,245.0,245.0);\n    }\n    else if(color == LIGHTGRAY){\n    \treturn rgb(211.0,211.0,211.0);\n    }\n    else if(color == LIME){\n    \treturn rgb(0.0,255.0,0.0);\n    }\n    else if(color == LIGHTYELLOW){\n    \treturn rgb(255.0,255.0,153.0);\n    }\n    else if(color == BEIGE){\n    \treturn rgb(245.0,245.0,220.0);\n    }\n    else if(color == TAN){\n    \treturn rgb(210.,180.,140.);\n    }\n}\n\nfloat forest_biome(in vec2 fragCoord,float mag,float zoom,float colors[6]){\n    fragCoord *= zoom;\n    fragCoord.x += fragCoord.y;\n    fragCoord.y = fragCoord.x;\n    float BLUE = colors[0];\n    float GREEN = colors[1];\n    float YELLOW = colors[2];\n    float GRAY = colors[3];\n    float FOREST_GREEN = colors[4];\n    float WHITE = colors[5];\n\n    float color1 = magnify(fragCoord,mag,colors);\n    vec4 neighbors;\n    while(mag > 1.0){\n    neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == BLUE && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n\n    else if(color1 == YELLOW){\n        color1 = GREEN;\n    }\n\n    else if(color1 == WHITE && is_next_to(FOREST_GREEN,neighbors)){\n        color1 = FOREST_GREEN;\n    }\n    else if(color1 == GRAY && is_next_to(GREEN,neighbors)){\n        color1 = WHITE;\n    }\n\n    else if(color1 == GREEN && is_next_to(YELLOW,neighbors)){\n        color1 = WHITE;\n    }\n   \n    else if(color1 == GREEN && is_next_to(WHITE,neighbors)){\n        color1 = FOREST_GREEN;\n    }\n    else if(color1 == FOREST_GREEN && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat forest_biome(in vec2 fragCoord,float mag,float zoom){\n\treturn forest_biome(fragCoord,mag,zoom,float[](BLUE,GREEN,YELLOW,GRAY,FOREST_GREEN,WHITE));\n}\n\nfloat savanna_biome(in vec2 fragCoord,float mag,float zoom,float[5] colors){\n    fragCoord *= zoom;\n    float GREEN = colors[0];\n    float BLUE = colors[1];\n    float GRAY = colors[2];\n    float YELLOW = colors[3];\n    float FOREST_GREEN = colors[4];\n\n    float color1 = magnify(fragCoord,mag,colors);\n    vec4 neighbors;\n    while(mag > 1.0){\n    neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == GREEN && is_next_to(GRAY,neighbors)){\n    \tcolor1 = YELLOW;\n    }\n    else if(color1 == YELLOW && is_next_to(GRAY,neighbors)){\n    \tcolor1 = FOREST_GREEN;\n    }\n\n    else if(color1 == GRAY){\n        color1 = GREEN;\n    }\n    else if(color1 == BLUE && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n    else if(color1 == FOREST_GREEN && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n\n\n\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat savanna_biome(in vec2 fragCoord,float mag,float zoom){\n\treturn savanna_biome(fragCoord,mag,zoom,float[](GREEN,BLUE,GRAY,YELLOW,FOREST_GREEN));\n}\n\nfloat glacier_biome(in vec2 fragCoord,float mag,float zoom,float colors[5]){\n    fragCoord *= zoom;\n    float GREEN = colors[0];\n    float BLUE = colors[1];\n    float GRAY = colors[2];\n    float WHITE = colors[3];\n    float YELLOW = colors[4];\n\n    float color1 = magnify(fragCoord,mag,colors);\n    \n    vec4 neighbors;\n    \n    while(mag > 1.0){\n    neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == GREEN && is_next_to(BLUE,neighbors)){\n    \tcolor1 = GRAY;\n    }\n    else if(color1 == GREEN && is_next_to(WHITE,neighbors)){\n    \tcolor1 = GRAY;\n    } \n    else if(color1 == BLUE && is_next_to(GREEN,neighbors)){\n        color1 = WHITE;\n    }\n    else if(color1 == YELLOW && is_next_to(GREEN,neighbors)){\n        color1 = GRAY;\n    }\n    else if(color1 == YELLOW && is_next_to(GRAY,neighbors)){\n        color1 = BLUE;\n    }\n\n    else if(color1 == WHITE && is_next_to(YELLOW,neighbors)){\n        color1 = GRAY;\n    }\n    else if(color1 == YELLOW && is_next_to(WHITE,neighbors)){\n        color1 = WHITE;\n    }\n    else if(color1 == GRAY && is_next_to(BLUE,neighbors)){\n        color1 = BLUE;\n    }\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat glacier_biome(in vec2 fragCoord,float mag,float zoom){\n\treturn glacier_biome(fragCoord,mag,zoom,float[](GREEN,BLUE,GRAY,WHITE,YELLOW));\n}\n\n\n\nfloat swamp_biome(in vec2 fragCoord,float mag,float zoom,float colors[5]){\n    fragCoord *= zoom;\n    float BLUE = colors[0];\n    float GREEN = colors[1];\n    float YELLOW = colors[1];\n    float GEAY = colors[1];\n    float WHITE = colors[1];\n\n    float color1 = magnify(fragCoord,mag,colors);\n    vec4 neighbors;\n    while(mag > 1.0){\n    neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == GREEN && is_next_to(BLUE,neighbors)){\n    \tcolor1 = YELLOW;\n    }\n    else if(color1 == BLUE && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n\n    else if(color1 == YELLOW && is_next_to(GRAY,neighbors)){\n        color1 = BLUE;\n    }\n    else if(color1 == GRAY && is_next_to(YELLOW,neighbors)){\n        color1 = YELLOW;\n    }\n    else if(color1 == WHITE && is_next_to(YELLOW,neighbors)){\n        color1 = GRAY;\n    }\n    else if(color1 == GRAY && is_next_to(BLUE,neighbors)){\n        color1 = BLUE;\n    }\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat swamp_biome(in vec2 fragCoord,float mag,float zoom){\n\treturn swamp_biome(fragCoord,mag,zoom,float[](BLUE,GREEN,YELLOW,GRAY,WHITE));\n}\n\nfloat water_biome(in vec2 fragCoord,float mag,float zoom,float colors[2]){\n    float color1 = magnify(fragCoord,mag,colors);\n    vec4 neighbors;\n    while(mag > 1.0){\n        neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == colors[0] && is_next_to(colors[1],neighbors)){\n    \tcolor1 = colors[1];\n    }\n    else if(color1 == colors[1] && is_next_to(colors[0],neighbors)){\n        color1 = colors[0];\n    }\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat water_biome(in vec2 fragCoord,float mag,float zoom){\n\treturn water_biome(fragCoord,mag,zoom,float[](GREEN,BLUE));\n}\t\n\n\nfloat forests_and_mountains(in vec2 fragCoord,float mag,float zoom,float colors[5]){\n    fragCoord *= zoom;\n    float BLUE = colors[0];\n    float GREEN = colors[1];\n    float YELLOW = colors[2];\n    float GRAY = colors[3];\n    float WHITE = colors[4];\n\n    float color1 = magnify(fragCoord,mag,colors);\n    vec4 neighbors;\n    while(mag > 1.0){\n    neighbors = get_neighbors(fragCoord,mag,colors);\n    if(color1 == GREEN && is_next_to(BLUE,neighbors)){\n    \tcolor1 = YELLOW;\n    }\n    else if(color1 == BLUE && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n    else if(color1 == YELLOW && is_next_to(GREEN,neighbors)){\n        color1 = GREEN;\n    }\n    else if(color1 == YELLOW && is_next_to(GRAY,neighbors)){\n        color1 = BLUE;\n    }\n    else if(color1 == GRAY && is_next_to(YELLOW,neighbors)){\n        color1 = WHITE;\n    }\n    else if(color1 == WHITE && is_next_to(YELLOW,neighbors)){\n        color1 = GRAY;\n    }\n    else if(color1 == YELLOW && is_next_to(WHITE,neighbors)){\n        color1 = WHITE;\n    }\n    else if(color1 == GRAY && is_next_to(BLUE,neighbors)){\n        color1 = BLUE;\n    }\n    mag -= 1.0;\n    }\n    return color1;\n}\n\nfloat forests_and_mountains(in vec2 fragCoord,float mag,float zoom){\n\treturn forests_and_mountains(fragCoord,mag,zoom,float[](BLUE,GREEN,YELLOW,GRAY,WHITE));\n}\n\nfloat combined_savanna_biome(in vec2 fragCoord,float mag,float zoom){\n    float color1 = forest_biome(fragCoord,mag,mag/4.0);\n    if(color1 == FOREST_GREEN){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](BLUE,GREEN,YELLOW,TAN,FOREST_GREEN,LIME));\n    }\n    else if(color1 == WHITE){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](GREEN,BLUE,TAN,YELLOW,WHITE));\n    }\n    else if(color1 == GRAY){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](FOREST_GREEN,BLUE,GREEN,YELLOW,WHITE));\n    }\n    else if(color1 == YELLOW){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](BLUE,GREEN,LIME,FOREST_GREEN,YELLOW,LIGHTYELLOW));\n    }\n    else if(color1 == GREEN){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](BLUE,GREEN,YELLOW,BEIGE,FOREST_GREEN,LIME));\n    }\n    else if(color1 == BLUE){\n    \tcolor1 = savanna_biome(fragCoord,mag,zoom,float[](SKYBLUE,YELLOW,FOREST_GREEN,BLUE,LIGHTBLUE));\n    }\n    return color1;\n}\n\nfloat combined_glacier_biome(in vec2 fragCoord,float mag,float zoom){\n    fragCoord *= zoom;\n    float color1 = glacier_biome(fragCoord,mag,mag/81.0,float[](GREEN,BLUE,GRAY,WHITE,YELLOW));\n\n    if(color1 == GRAY){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](SNOW,GRAY,WHITESMOKE,WHITE,SKYBLUE));\n    }\n    else if(color1 == WHITE){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](GRAY,LIGHTGRAY,WHITESMOKE,WHITE,SKYBLUE));\n    }\n    else if(color1 == GREEN){\n   \t\tcolor1 = forests_and_mountains(fragCoord,mag,zoom,float[](BLUE,SKYBLUE,SNOW,GRAY,WHITE));\n    }\n    else if(color1 == BLUE){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](GREEN,BLUE,SKYBLUE,LIGHTBLUE,WHITE));\n    }\n    return color1;\n}\n\nfloat deserts_and_plains(in vec2 fragCoord,float mag,float zoom){\n    fragCoord *= zoom;\n    float color1 = glacier_biome(fragCoord,mag,mag/81.0,float[](GREEN,YELLOW,GRAY,WHITE,BLUE));\n\n    if(color1 == GRAY){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](GRAY,YELLOW,FOREST_GREEN,GREEN,TAN,LIME));\n    }\n    else if(color1 == WHITE){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](BLUE,FOREST_GREEN,YELLOW,TAN,GREEN,LIME));\n    }\n    else if(color1 == YELLOW){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom,float[](BLUE,YELLOW,FOREST_GREEN,TAN,GREEN,LIME));\n    }\n    else if(color1 == GREEN){\n   \t\tcolor1 = forests_and_mountains(fragCoord,mag,zoom,float[](TAN,LIME,SNOW,GRAY,YELLOW));\n    }\n    else if(color1 == BLUE){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom,float[](GREEN,YELLOW,SKYBLUE,LIGHTBLUE,BLUE));\n    }\n    return color1;\n}\n\nfloat combined_biome(in vec2 fragCoord,float mag,float zoom){\n    float color1 = glacier_biome(fragCoord,mag,mag/3.0);\n    if(color1 == FOREST_GREEN){\n    \tcolor1 = forest_biome(fragCoord,mag,zoom);\n    }\n    else if(color1 == WHITE){\n    \tcolor1 = glacier_biome(fragCoord,mag,zoom);\n    }\n    else if(color1 == GRAY){\n    \tcolor1 = savanna_biome(fragCoord,mag,zoom);\n    }\n    else if(color1 == GREEN){\n    \tcolor1 = forests_and_mountains(fragCoord,mag,zoom);\n    }\n    else if(color1 == BLUE){\n    \tcolor1 = savanna_biome(fragCoord,mag,zoom,float[](LIGHTBLUE,YELLOW,FOREST_GREEN,SKYBLUE,BLUE));\n    }\n    return color1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = mag*(((iMouse.x-iMouse.y)*2.0+iResolution.x)/iResolution.x);\n    fragCoord *= zoom;\n    fragCoord = fragCoord + floor(iTime*100.0)*vec2(zoom,0.0);\n\n    //choose the biome here\n\tfloat biome =\n        //forest_biome\n    \t//savanna_biome\n        //glacier_biome\n        //swamp_biome\n        //combined_glacier_biome\n        //combined_biome\n        combined_savanna_biome\n        //deserts_and_plains\n        //forests_and_mountains\n    (fragCoord,mag,1.0);\n    \n    fragColor = vec4(get_color(biome),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}