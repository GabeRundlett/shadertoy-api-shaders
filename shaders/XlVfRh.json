{
    "Shader": {
        "info": {
            "date": "1541802760",
            "description": "a small raymarching project",
            "flags": 0,
            "hasliked": 0,
            "id": "XlVfRh",
            "likes": 1,
            "name": "bb8",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "Benstyle",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "\n\n#define epsilon 0.0001\n#define maxSteps 256.\n\n\n#define nbLight  3\n// on défini ici les lumières\nvec3 lPos[3] = vec3[](vec3(4.,4.,-.3), vec3(-2.,.5,1.),vec3(-1.,0.,-1.6)) ;\n\nvec3 lInt[3] = vec3[](10.*vec3(8.,9.,10.),3.*vec3(10.,.98,0.8),3.*vec3(.3,1.,1.));\n\n\nvec2 rot2D( vec2 v, float a)\n{\n    float c = cos(a); // rotation selon un axe\n\tfloat s = sin(a);\n    \n    return mat2(c,-s,s,c)*v;\n}\n\n\n\n\nfloat expoRapide(float a,float n)\n{ //exponentiation rapide pour la spéculaire\n    float s = 1.;\n    \n    while(n > 0.)\n    {\n        if(mod(n,2.) == 0.)\n        {\t\n            a = a*a;\n        \tn /= 2.;\n        }\n        else\n        {\n            s = s*a;\n            n -= 1.;\n        }\n    }\n    \n    return s;\n        \t\n    \n    \n}\n\n\n\n\n\n// formes de base\nfloat sphere( vec3 p, float r)\n{\n    \n    return length(p)-r;\n}\n\nfloat cube (vec3 p, vec3 dim)\n{\n    vec3 d = abs(p) - dim;\n        \n    return max( max(d.y,d.x), d.z);\n}\n\n\nfloat plan(vec3 p)\n{\n    return p.y ;\n}\n\n\n// objets dans la scene\nfloat bb8(vec3 p, out vec2 uv, out int idLoc)\n{\n    float d1 = sphere( p, .5);\n    float d2 = sphere( p - vec3(0.,.49,0.),.3);\n    \n    \n    \n    float d3 = sphere(p - vec3(0.,0.05,0.), .5);\n    \n    float d4 = sphere(p- vec3(0.,0.30,0.),.3);\n    \n    float d5 = sphere(p - vec3(0.,.59,0.25),0.05);\n    \n    float d6 = sphere(p - vec3(0.1,.51,0.27),0.03);\n    \n    float d7 = cube(p - vec3(0.1,.60,0.),vec3(0.015,0.5,0.015));\n        \n    \n    float d =  max( -d3,  d2);\n    \n    d = max(d, -d4);\n    \n    d = min(d, d5);\n    d = min(d, d6);\n    d = min(d, d7);\n    \n    d = min(d1,d);\n    \n    \n    \n    if(d == d1)\n    {   \n        uv.x = p.x;\n        uv.y = p.y;\n        \n        uv = rot2D(uv, -iTime); // uv pour les textures\n        \n        uv *= 2.;\n        \n        uv += 1.;\n        \n        idLoc = 0;\n        \n        //uv.x = uv.x*uv.x*uv.x;\n        //uv.y = uv.y*uv.y*uv.y;\n    }\n    else if( d == d2)\n    {\n        uv.x = p.x;\n        uv.y = p.y;\n        uv *= 2.;\n        \n        idLoc = 0;\n        \n    }\n    else if( (d == d5) || (d == d6))\n    {\n        idLoc = 1;\n    }\n    \n    else\n    {\n        uv = vec2(0.);\n    }\n\n    \n    \n    \n    return d;\n}\n\n\n\n\n\n\nfloat map(  vec3 p, out int id, out vec2 uv) // carte des différents objets\n{\n    float d1 = sphere( p - vec3( 2.,0.,0.), .5);\n    \n    vec2 uv2 = vec2(0.);\n    \n    vec3 pbb8 = p - vec3(0.,-.18,0.);\n    \n    \n    pbb8.xz = rot2D(pbb8.xz, -iTime/2. + 1.5);\n    \n    pbb8 = pbb8 - vec3(1.,0.,0.);\n    \n    pbb8.xz = rot2D(pbb8.xz, -1.5);\n    \n    \n    int idBb8 = 0;\n    \n    float d2 = bb8(pbb8, uv2, idBb8);\n    \n    \n    vec3 posPlan1 =p - vec3(0.,-.68,0.);\n    float d3 = plan(posPlan1);\n    \n    \n    \n    float mini = min(d2,d3);\n    \n    if(mini == d3)\n    {\n        vec2 uv3 = posPlan1.xz;\n    \n    \n    \tuv3.x = mod(uv3.x, 3.);\n    \tuv3.y = mod(uv3.y, 3.);\n    \n    \tuv3 /= 3.;\n        \n        uv = uv3;\n        \n        id = 2;\n    }\n    else\n    {\n        uv = uv2;\n        id = 1 + idBb8*10;\n    }\n    \n    \n    \n    return min( d2 , d3 );\n}\n\n\n\n\n\nvec3 intersect( vec3 ro, vec3 rd, out int id, out float nbSteps, out bool inter, out vec2 uv)\n{\n    float t = 0.;\n    \n    float d = 0.; // calcul d'intersection\n    \n    nbSteps = maxSteps;\n    for(float i = 0.0; i <= maxSteps ; i += 1.)\n    {\n        d = map(ro + t*rd, id, uv);\n    \t\n        if (d < epsilon)\n        {\n            nbSteps = i;\n            inter = true;\n            \n            break;\n        }\n        \n        \n        t += d;\n    }\n               \n    \n \n return ro + t*rd;   \n}\n\n\nvec3 grad( vec3 p) // calcul du gradient approché\n{\n    vec3 a = vec3(1.,0.,0.);\n    vec3 b = vec3(0.,1.,0.);\n    vec3 c = vec3(0.,0.,1.);\n    vec2 uv = vec2(0.);\n    \n    vec3 g = vec3(0.);\n    int id = 0;\n    \n    g.x += map( p + epsilon*a, id, uv) - map(p - epsilon*a, id, uv);\n    g.y += map( p + epsilon*b, id, uv) - map(p - epsilon*b, id, uv);\n    g.z += map( p + epsilon*c, id, uv) - map(p - epsilon*c, id, uv);\n\n\treturn g;\n}\n\n\n\n\nfloat ombreDouce(vec3 ro, vec3 rd, float mint, float maxt, float k)\n{ \n    \n    float res = 1.;\n    float d = 0.;\n    int id = 0;\n    vec2 uv = vec2(0.);\n    \n    for(float t = mint; t <= maxt; t += d)\n    {\n        d = map( ro + t*rd, id, uv);\n        \n        if(d <= epsilon)\n        {\n            return 0.;\n        }\n        \n        res = min(res, k*d/t);\n    }\n    \n    return res;\n}\n    \n\t\n\n\n\n\n\n\n\n\n\n\nvec3 shader(vec3 ro, vec3 pImp, int id, float nbSteps, bool inter, vec2 uv)\n{\n    vec3 ambCol = 1.*vec3(0.2,0.,1.);\n    \n    \n    if(!inter)\n        return vec3(0.,0.,0.2);\n    \n    /// eclairage ambiant\n    \n    if(id == 2)\n        {\n            ambCol.x *= texture(iChannel0, uv).x;\n            ambCol.y *= texture(iChannel0, uv).y;\n            ambCol.z *= texture(iChannel0, uv).z;\n            \n        }\n        else if(id == 1)\n        {\n            \n            ambCol.x *= texture(iChannel1, uv).x;\n            ambCol.y *= texture(iChannel1, uv).y;\n            ambCol.z *= texture(iChannel1, uv).z;\n\t\t\t\n        }\n    \n    \n    ambCol *= 100./(100.+nbSteps);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    /// eclairage par les lumieres\n    \n    \n    vec3 n = normalize(grad(pImp));\n    \n    vec3 col = vec3(0.);\n        \n    vec3 lPosActu = vec3(0.);\n    vec3 lIntActu = vec3(0.);\n    \n    vec3 rc = normalize(ro - pImp);\n    \n    \n    \n    \n    for( int i = 0; i < nbLight; i++)\n    {\n    \tlPosActu = lPos[i];\n    \tlIntActu = lInt[i];\n        \n        vec3 rl = lPosActu - pImp;\n        float dl = length(rl);\n        rl = rl/dl;\n        \n        dl += .1;\n        \n    \t///Diff///\n    \tvec3 diff = vec3(0.);\n        \n        diff += max(0., dot(rl,n)) * lIntActu / (dl*dl);\n        \n        \n        ///Spec///\n        vec3 spec = vec3(0.);\n        \n        vec3 sRefl = rl - 2.*dot(rl,n)*n;\n        sRefl = - sRefl;\n        \n        if(id == 1)\n        {\n        \n        spec += expoRapide( max(0.,dot(sRefl,rc)) , 64.)*.1  * lIntActu;\n        }\n        else\n        {\n            spec += expoRapide( max(0.,dot(sRefl,rc)) , 16.)*.1  * lIntActu;\n        }\n        \n     \t///Shadow///\n        \n \n        \n        if (dot(n,rl) > 0.)\n        {\n        \tfloat shadow = ombreDouce(pImp, rl, 0.01, length(lPosActu - pImp), 20.);\n            diff *= shadow;\n            spec *= shadow;\n        }\n        \n        //// Textures ///\n        \n        if(id == 2)\n        {\n            diff.x *= texture(iChannel0, uv).x;\n            diff.y *= texture(iChannel0, uv).y;\n            diff.z *= texture(iChannel0, uv).z;\n            \n            spec.x *= texture(iChannel0, uv).x;\n            spec.y *= texture(iChannel0, uv).y;\n            spec.z *= texture(iChannel0, uv).z;\n        }\n        else if(id == 01)\n        {\n            \n            \n            \n            diff.x *= texture(iChannel1, uv).x;\n            diff.y *= texture(iChannel1, uv).y; // textures\n            diff.z *= texture(iChannel1, uv).z;\n            \n            spec.x *= .8*texture(iChannel1, uv).x;\n            spec.y *= .8*texture(iChannel1, uv).y;\n            spec.z *= .8*texture(iChannel1, uv).z;\n\t\t\t\n            //diff = vec3(1.,1.,1.);\n        }\n        else if(id == 11)\n        {\n         diff = vec3(0.);\n            \n         float Blink = (max(sin(5.*iTime),0.));\n            \n         Blink = 50.*expoRapide(Blink,200.);\n            \n         diff = vec3(Blink,Blink,Blink*.05);\n        }\n        \n        col += diff;\n        col += spec;\n            }\n    \n    col += ambCol;\n    \n    return col;\n        }\n        \n    \n\nvec3 Reflsuiv(vec3 p, vec3 posCam, out int id, out float nbSteps, out bool inter, out vec2 uv)\n{\n    vec3 n = normalize(grad(p));\n    \n    vec3 rc = normalize( posCam - p);\n    \n    vec3 rRefl = rc - 2.*dot(rc,n)*n;\n    rRefl = - rRefl;\n    \n    vec3 ro = p + 0.01*rRefl;\n    \n    return intersect(ro,rRefl, id, nbSteps, inter,uv);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - .5;\n\t\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.,0.1,3.);\n    \n    vec3 rd = normalize( vec3(uv.xy,-1.));\n    \n    float a = iTime/2.;\n    \n  \trd.xz = rot2D(rd.xz,a);\n    ro.xz = rot2D(ro.xz,a);\n    \n    int id = 0;\n    float nbSteps = 0.;\n    bool inter = false;\n    vec2 uvTex = vec2(0.);\n    \n    vec3 pImp = intersect(ro,rd,id,nbSteps,inter,uv);\n    \n    vec3 col = shader(ro,pImp, id, nbSteps, inter,uv);\n    \n    \n    \n    if (inter && id == 1)\n    {\n        \n    bool interRef = false;\n    vec3 pImpR = Reflsuiv(pImp,ro,id,nbSteps,interRef,uvTex);            \n    vec3 colRefl = shader(pImp,pImpR, id, nbSteps, interRef,uvTex);\n        \n    float fresnel = max(0.,1. - dot( normalize(ro - pImp), normalize(grad(pImp))));\n    \n    col += colRefl*  fresnel*fresnel*  (1.+texture(iChannel1, uv).x)/1.3;\n        \n    }\n\n\t\n    \n    col = 1. - 1./(col + 1.);\n\n    //sortie vers l'ecran\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}