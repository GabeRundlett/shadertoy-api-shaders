{
    "Shader": {
        "info": {
            "date": "1524977017",
            "description": "Scattering function is not physically accurate, but efficiently shifts a random direction towards the normal to create a hemisphere. ",
            "flags": 32,
            "hasliked": 0,
            "id": "MdtBD8",
            "likes": 16,
            "name": "Minimal Pathtracer",
            "published": 3,
            "tags": [
                "raymarch",
                "tracing",
                "path",
                "scatter",
                "monte",
                "carlo"
            ],
            "usePreview": 0,
            "username": "tehsauce",
            "viewed": 1739
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture( iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This enables/disables the pretty but\n// expensive background wall\n\n//#define FUN_WALL\n\n// These delays can be used to switch to\n// to fullscreen before accumulation begins\n#ifdef FUN_WALL\n#define DELAY 10\n#else\n#define DELAY 30\n#endif\n\nconst vec3 box_size = vec3(3.0,1.0,3.0);\nconst vec4 spherePos = vec4( 0.0,-0.4,1.8, 0.4);\nconst vec3 sphereCol = vec3( 1.0, 0.4, 0.6 );\nconst float wiggle = 1.0;\nconst float tau = 6.28318;\n\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\n#ifdef FUN_WALL\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * \n        fract(vec3((p3.x + p3.y)*p3.z, \n                   (p3.x+p3.z)*p3.y, \n                   (p3.y+p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), \n                            dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), \n                                  dot(d1, hash33(i + i1)), \n                                  dot(d2, hash33(i + i2)), \n                                  dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat noise_sum_abs(vec3 p)\n{\n    float f = 0.0;\n    p = p * 3.0;\n    f += 1.0000 * abs(simplex_noise(p)); p = 2.0 * p;\n    f += 0.5000 * abs(simplex_noise(p)); p = 2.0 * p;\n\tf += 0.2500 * abs(simplex_noise(p)); p = 2.0 * p;\n\tf += 0.1250 * abs(simplex_noise(p)); p = 2.0 * p;\n\tf += 0.0625 * abs(simplex_noise(p)); p = 2.0 * p;\n    \n    return f;\n}\n\nfloat noise_sum_abs_sin(vec3 p)\n{\n    float f = noise_sum_abs(p);\n    f = sin(f * 2.5 + p.x * 5.0 - 1.5);\n    \n    return f ;\n}\n#endif\n\nfloat hash71( vec3 p, vec3 dir, int t) {\n    float a = hash1( uint(t) );\n \tfloat b = hash31(p);\n    float c = hash31(dir);\n    return hash31(vec3(a,b,c));\n}\n\n// from https://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\nvec3 randomDir( vec3 p, vec3 dir, int t) {\n    float a = hash1( uint(t) );\n \tfloat b = hash31(p);\n    float c = hash31(dir);\n    float theta = tau*hash31(vec3(a,b,c));\n    float z = 2.0*hash31( \n        vec3( c+1.0, 2.0*a+3.5, b*1.56+9.0 ) ) - 1.0;\n    float m = sqrt(1.0-z*z);\n   \treturn vec3( m*sin(theta), m*cos(theta), z );\n}\n\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n#ifdef FUN_WALL\n  if (p.z>1.45 && abs(p.x) < 2.7){\n\tp.z += \n        0.25*(smoothstep(2.7, 1.5, abs(p.x)))\n        *noise_sum_abs_sin(0.3*p);\n  }\n#endif\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) \n    + length(max(d,0.0));\n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdSphereReg( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  p.x *= 0.3;\n  return length(p+vec3(0.0,0.2*sin(15.0*p.x),0.0))-s;\n}\n\nfloat map( vec3 p) {\n    float d = 1000000.0;\n    d = min( d, sdSphere(p-spherePos.xyz, spherePos.w));\n    d = min( d, -sdBox( p, box_size ) );\n    return d;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec3 boxCol( vec3 p )\n{\n    vec3 c = vec3( 0.9, 0.9, 0.9);\n    if (p.x>box_size.x-0.001) {\n        c.rb = vec2(0.0);\n    }\n    if (p.x<-box_size.x+0.001) {\n        c.rg = vec2(0.0);\n    }\n\treturn c;\n}\n\nvoid intersect( inout vec3 ray_pos, vec3 ray_dir) \n{\n    float thresh = 0.0002;\n    float d;\n    for (int i=0; i<96; i++)\n    {\n     \td = map(ray_pos);\n        if (d<thresh) {\n        \tbreak;\n        }\n        ray_pos += ray_dir*d*0.4;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvt = fragCoord.xy/iResolution.xy;\n    vec2 uv = uvt - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Jitter pixel start coordinates for free antialiasing \n    vec2 p_size = 2.0/iResolution.xy;\n    uv.x += p_size.x*hash1( uint( 10000.0*iTime ) );\n    uv.y += p_size.y*hash1( uint( 20000.0*iTime+3535.0 ) );\n    vec3 ray_dir = normalize(vec3(uv, 1.0));\n    vec3 ray_pos = vec3(0.0, 0.0, -1.0);\n    vec3 col = vec3(1.0,1.0,1.0);\n    \n    vec3 incoming = vec3(0.0);\n    \n\tfor (int b=0; b<6; b++)\n    {\n    \tintersect(ray_pos, ray_dir);\n        \n        vec3 n = calcNormal(ray_pos);\n\n        if (sdSphere(ray_pos-spherePos.xyz, \n            spherePos.w) < 0.01) {\n         // hit sphere\n            vec3 c = vec3(sin(4.0*ray_pos.x)+1.0, 0.2, 0.5);\n       \t\tcol *= c;\n            incoming += 0.03*c;\n        } else if (\n            \tray_pos.y > 0.99 &&\n            \tall( lessThan( mod( \n                abs(ray_pos.xz+vec2(4.4,0.0)), 1.5 ), \n                vec2(1.3) ) ) ) {\n           \t// hit ceiling           \n            incoming += vec3(5.0);\n            break;\n        } else {\n            // hit walls or floor\n            col *= boxCol(ray_pos);\n            incoming += vec3(0.01);\n        }\n        \n\t\tfloat perp = length(cross(n,ray_dir));\n        float rand = hash71(ray_pos, ray_dir, iFrame);\n        if (rand > 0.9-0.7*perp*perp*perp) {\n            // specular reflection\n        \tray_dir = reflect(ray_dir, n);\n        } else {\n            // diffuse scatter\n         \tvec3 ndir = randomDir( ray_pos, ray_dir, iFrame+10 );\n            ray_dir = normalize(8.0*(ndir+n*1.002));\n        }\n        ray_pos += 0.01*ray_dir;\n    }\n    \n\tcol = incoming*col;\n\n    // adjust color space\n    col = pow(col, vec3(0.44));\n\n    // delay accumulation to allow time for full screen\n    float m = 1.0-1.0/float(iFrame-DELAY);\n    if (iFrame < DELAY+1) m = 0.0;\n    //m = 0.99;\n    vec3 prev = texture( iChannel0, uvt).rgb;\n    fragColor = vec4(mix(col,prev,m), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}