{
    "Shader": {
        "info": {
            "date": "1664577499",
            "description": "i have zero clue what this is, very similar to fork / fork fork",
            "flags": 32,
            "hasliked": 0,
            "id": "7lKBWD",
            "likes": 19,
            "name": "PIXEL ART ABCDEFHGIP",
            "published": 3,
            "tags": [
                "feedback",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "vec4 cell(ivec2 f) {\n    return texelFetch(iChannel0, f, 0);\n}\n\nvec4 ncell(ivec2 f) {\n    return texelFetch(iChannel1, f, 0);\n}\n\nvoid mainImage(out vec4 col, in vec2 f)\n{\n    col = vec4(0.0);\n    vec4 ncol, ncol2 = vec4(0.0);\n    \n    vec2 uv = (f - 0.5 * iResolution.xy) / iResolution.y;\n    f.xy += 2. * cos(f.x / 80. + 0.5 * iTime);\n    \n    // Translate and zoom\n    f -= 0.5 * iResolution.xy;\n    f *= 2. * dim.y/iResolution.y; \n    f += vec2(0.5,1) * dim;\n\n    // Mirrored coords \n    float s = step(floor(f.x), 0.5 * dim.x);   \n    ivec2 ff = ivec2(s * dim.x + (1. - f.x) * (2. * s - 1.), f.y);\n    col = cell(ff);\n    vec4 col2 = cell(ff + ivec2(1,0)); // was 0,1\n\n    vec3 pl = pal(4. * col.r, vec3(0,1,1)/3.);\n    col.rgb = (1. - step(col.r, 0.)) * pl;\n    col.rgb += 0.5 * col.r * pal(1.5, vec3(0,1,2)/3.);\n    col.rgb += 0.5 * col2.r * pl;\n    float csh = 1. / cosh((10. - 8.8 * tanh(iTime)) * max(abs(uv.x), abs(uv.y)));\n    col = mix(col, vec4(0.5,0.5 + 0.5 * cos(0.25 * uv.y + iTime),1,1), 1.-csh);\n\n    ff.y -= int((1.-tanh(0.4 * iTime)) * 100.);\n    ncol = ncell(ff);\n    ncol2 = ncell(ff + ivec2(1,0)); \n\n    vec3 npl = pal(4. * ncol.r, vec3(0,1,1)/3.);\n    ncol.rgb = (1. - step(ncol.r, 0.)) * npl;\n    ncol.rgb += 0.5 * ncol.r * pal(1.5, vec3(0,1,2)/3.);\n    ncol.rgb += 0.5 * ncol2.r * npl;\n    ncol = mix(ncol, vec4(0.5,0.5 + 0.5 * cos(0.25 * uv.y + iTime),1,1), 1.-csh);\n\n    if (ff.y > 0 && ff.y < int(0.58 * dim.y))\n        col = ncol;\n    //col = mix(col, ncol, 0.5 + 0.5 * thc(4., 8. * uv.x + 0.4 * iTime));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 cell(in ivec2 p) {\n    if (iFrame == 0) // maybe this fixes uninitialized vectors?\n        return vec4(0.0);\n        \n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nvoid mainImage(out vec4 col, in vec2 f)\n{\n    col = vec4(0.0);\n    ivec2 px = ivec2(f);\n    int frame = iFrame;//iFrame % 120;\n    \n    // not my finest line of code!\n    int h = 3 + int(floor(9. * h21(vec2(floor(float(iFrame)/120.), 19.))));\n\n    float rand = h21(f / iResolution.y + vec2(0.1, 0.151) * mod(iDate[3], 5.));\n           \n    if (frame == 0) {     \n        col = vec4(0.0, step(0.9, rand), 0.0, 1.0);\n        return;\n    }\n           \n    // Center cell\n    vec4 e = vec4(0.0);\n    e = cell(px);\n    col = e;\n    \n    // Neighbour cells\n    vec4 b = cell(px - ivec2(0,1));\n    vec4 t = cell(px + ivec2(0,1));\n    vec4 l = cell(px - ivec2(1,0));\n    vec4 r = cell(px + ivec2(1,0));   \n    vec4 bl = cell(px + ivec2(-1,-1));\n    vec4 br = cell(px + ivec2(1, -1));\n    vec4 tl = cell(px + ivec2(-1, 1));\n    vec4 tr = cell(px + ivec2(1,  1));   \n    \n    vec4 bb = cell(px - ivec2(0,2));\n    vec4 tt = cell(px + ivec2(0,2));\n    vec4 ll = cell(px - ivec2(2,0));\n    vec4 rr = cell(px + ivec2(2,0));  \n    \n    vec4 sum = b + t + l + r;\n    vec4 diag = bl + br + tl + tr;\n    vec4 dif = abs(b-t) * abs(l-r);\n    vec4 dif2 = (t + b) * (l + r);\n    vec4 diDif = (tl + br) * (tr + bl);\n    \n    if (frame < 10) {\n        col.g = 0.4 * diag.g - e.g;\n        //col.g = 0.3 * diag.g + 0.2 * sum.g - e.g;\n    } else if (frame == 10) {\n        col.g = step(0.01, e.g);\n    } else if (frame < 13) {\n        if (f.x < 0.5 * dim.x + 1. && abs(f.y - 0.5 * dim.y) < 4.) //could replace 4 with random val\n           col.r = 1.;\n    } else if (frame == 13) {\n        col.b = e.g;\n     //  if (e.g == 1. && dif2.g == 1.)\n      //     col.g = 0.;\n    } else { \n        //if (e.g < 0.5 && sum.r >0.5)\n        //    e.g = 1.;\n        if (e.g == 1. && col.r < 0.2 && (sum+diag).r > 0.5)\n            col.r = 1.;\n        \n        col.r += 0.005 * ((sum+diag).r/8. - 1.);\n               \n        float v = step(tl.r, 0.) + step(tr.r,0.) + \n                  step(bl.r,0.) + step(br.r,0.);\n        if (e.g < 1. && (sum).r >= 2. && v <= 1.)\n            col.g = 1.;\n           \n        if (col.g > 0. && dif.r != 0.) {\n            col.g = 0.;\n        }\n        \n        col.rg = clamp(col.rg, 0., 1.);\n    } \n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi 3.14159\n#define dim vec2(64, 52)\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}