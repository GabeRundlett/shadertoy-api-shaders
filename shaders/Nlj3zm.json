{
    "Shader": {
        "info": {
            "date": "1623606830",
            "description": "Shader for the tutorial:\nhttps://learn.lookingglassfactory.com/tutorials/making-holograms-with-shadertoy\n",
            "flags": 1,
            "hasliked": 0,
            "id": "Nlj3zm",
            "likes": 0,
            "name": "Looking Glass: Hyperdodecahedron",
            "published": 3,
            "tags": [
                "tutorial",
                "glass",
                "4d",
                "dodecahedron",
                "tesseract",
                "looking",
                "hypercube",
                "r4",
                "lookingglass"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 275
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n#if HW_PERFORMANCE==0\n#else\n//#define AA\n#endif\n\n#define BIASED_NORMAL \t1\n#define MAX_DIST\t\t150.\nconst float PI = radians(180.);\n\n#define THICKNESS\t0.1\n#define LIGHTHEIGHT\t1.10\n#define SCALE\t\t1.7\n\n\nmat4 rot4d;\n\nvoid init4d()\n{\n\tfloat a1 = iTime * 0.5;\n\tfloat a2 = iTime * 0.5;\n\n    vec4 x = vec4(cos(a1), -sin(a1),     0.0,     0.0);\n    vec4 y = vec4(sin(a1),  cos(a1),     0.0,     0.0);\n    vec4 z = vec4(    0.0,      0.0, cos(a2), -sin(a2));\n    vec4 w = vec4(    0.0,      0.0, sin(a2),  cos(a2));\n    rot4d = mat4(x, y, z, w);\n}\n\nvec3 transform4d(vec4 p)\n{\n    p = rot4d * p;\n\tfloat a = LIGHTHEIGHT / (p.w - LIGHTHEIGHT);\n    return p.xyz * a * SCALE;    \n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nmat3 fromEuler(vec3 ang)\n{\n    mat3 mx = mat3(\n\t\t\t1.0,\t\t0.0,\t\t0.0,\n\t\t\t0.0,\t\tcos(ang.x),\t-sin(ang.x),\n\t\t\t0.0,\t\tsin(ang.x),\tcos(ang.x));\n    mat3 my = mat3(\n\t\t\tcos(ang.y), 0.0,\t\tsin(ang.y),\n\t\t\t0.0,\t\t1.0,\t\t0.0,\n\t\t\t-sin(ang.y),0.0,\t\tcos(ang.y));\n    mat3 mz = mat3(\n\t\t\tcos(ang.z), -sin(ang.z),0.0,\n\t\t\tsin(ang.z),\tcos(ang.z),\t0.0,\n\t\t\t0.0,\t\t0.0,\t\t1.0);\n        \n    return mx*my*mz;\n}\n\nconst float k = 15.0;\n\nfloat map(vec3 p)\n{\n    p *= fromEuler(vec3(iTime * 0.12, iTime * 0.15, iTime * 0.136));\n    float sminAcc = 0.;\n    for( int i = 0; i < numVertices / 2; i++)\n    {\n        sminAcc += exp2(-k * sdCapsule(p, transform4d(vertices[i*2 + 0]), transform4d(vertices[i*2 + 1]), THICKNESS));\n    }\n\treturn -log2( sminAcc ) / k;\n}\n\nvec3 getSkyColor(vec3 rd)\n{\n    vec3 col = texture(iChannel0, rd).rgb;\n    return col*col;\n}\n\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n  float t = 5.0;\n  for (int i = 0; i < 40; i++)\n  {\n    float h = map(ro + rd * t);\n    t += h;\n    if (h < 0.001 || t > MAX_DIST)\n        break;\n  }\n  return t;\n}\n\n#define EPS  0.01\n\n#if BIASED_NORMAL\nvec3 calcNormal(vec3 pos)\n{\n    float\tref;\n    float\ttrans;\n    vec3\tabsorb;\n    vec3\tcol;\n    vec2\teps = vec2(EPS, 0);\n\tfloat d = map(pos);\n\treturn normalize(vec3(map(pos + eps.xyy) - d, map(pos + eps.yxy) - d, map(pos + eps.yyx) - d));\n}\n#else\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = EPS;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n#endif\n\nvec3 applyFog(vec3 rgb,float distance, vec3 fogColor)\n{\n    float fogAmount = 1.0 - exp( -distance*0.2 );\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvec3 Render(in vec3 ro, in vec3 rd)\n{\n    float t = rayMarch(ro, rd);\n    vec3\tcol = vec3(0);\n    if(t < MAX_DIST)\n    {\n        vec3 p = ro + rd * t;\n        vec3 n = calcNormal(p);   \n        col = texture(iChannel0, reflect(rd, n)).rgb * pow(dot(rd, n), 2.);\n        col = mix(col, vec3(dot(col, vec3(1.0 / 3.0))), 0.5);\t\t// Desaturate\n        //col = applyFog(col, t / 2., vec3(0));\n    }\n    return col;\n}\n\nvec3 contrast( in vec3 color, in float c)\n{\n    float t = 0.5 - c * 0.5; \n    return color * c + t;\n}\n\nvec3 vignette(vec3 color, vec2 q, float v)\n{\n    color *= 0.3 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), v);\n    return color;\n}\n\nvec3 postProcess(in vec3 col, in vec2 q)\n{\n\tcol = pow(col, vec3(0.8));\n\tcol = contrast(col, 1.2);\n\tcol = vignette(col, q, 0.8);\n\treturn col;\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 ta )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 up = vec3(0, 1, 0);\n\tvec3 cu = normalize( cross(cw,up) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\tinit4d();\n    fragColor = vec4(Render(ro + vec3(0.0, 0.0, 9.0), rd), 1);\n}\n\n\n// Comment the original mainImage\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\tinit4d();\n\n    vec3 tot = vec3(0.0);\n#ifdef AA\n\tvec2 rook[4];\n    rook[0] = vec2( 1./8., 3./8.);\n    rook[1] = vec2( 3./8.,-1./8.);\n    rook[2] = vec2(-1./8.,-3./8.);\n    rook[3] = vec2(-3./8., 1./8.);\n    for( int n=0; n<4; ++n )\n    {\n        // pixel coordinates\n        vec2 o = rook[n];\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else //AA\n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif //AA\n \n        // camera\n        float theta\t= radians(360.)*(iMouse.x/iResolution.x-0.5) + PI * 0.3;\n        float phi\t= radians(90.)*(iMouse.y/iResolution.y-0.5) - PI / 2.;\n        vec3 ro = 9. * vec3( sin(phi)*cos(theta),cos(phi),sin(phi)*sin(theta));\n        vec3 ta = vec3( 0 );\n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta );\n        //vec3 cd = ca[2];    \n        \n        vec3 rd =  ca*normalize(vec3(p,1.5));        \n        \n        tot += Render(ro ,rd);\n            \n#ifdef AA\n    }\n    tot /= 4.;\n#endif\n        \n    tot = postProcess(tot,fragCoord / iResolution.xy);\n    \n\tfragColor = vec4( sqrt(tot), 1.0 );\n}\n*/\n\n#define QAA\t2                                     \n\nconst float\tsideAngle = radians(35.0);\nconst float\thorizontalAngle = radians(14.0);\nconst float\tcameraSize      = 9.5;\nconst float\taspectRatio     = 0.75;\nconst float quiltColumns\t= 8.0;\nconst float quiltRows\t\t= 6.0;\nconst float nearClip        = 9.5;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4\taccColor = vec4(0.);\n    for( int m = 0; m < QAA; m++ )\n    for( int n = 0; n < QAA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = (vec2(float(m), float(n)) / float(QAA) - 0.5) / iResolution.xy                                                                                 ;\n\t\t\n\t\tvec2\tcoord = (fragCoord / iResolution.xy  + o) * vec2(quiltColumns,quiltRows);\n\t\tvec2\tfract = fract(coord);\n\t\tvec2\tfloor = floor(coord);\n\t\tfloat\timageId = floor.x + floor.y * quiltColumns;\n\t\tfloat\tvalueId = imageId / (quiltColumns * quiltRows - 1.);\n\t\tfloat\tdist = (cameraSize / 2.) / tan(horizontalAngle / 2.);\n\t\tfloat\tminCam = -(cameraSize / 2.) - tan(sideAngle / 2.) * dist;\n\t\t\n\t\tvec3\tcamPos = mix(vec3(minCam,0,dist),vec3(-minCam,0,dist),valueId);\n\t\tvec3\tscreenPos = vec3((fract.x-0.5)*cameraSize,(fract.y-0.5)*cameraSize/aspectRatio,0);\n\t\t\n\t\tvec3\tdirRay = normalize(screenPos - camPos);\n\t\tvec4\tcolor;\n\t\tmainVR(color, fragCoord, screenPos - vec3(0, 0, 9) - nearClip * dirRay, dirRay);\n\t\taccColor += clamp(color, 0.0, 1.0);\n\t}\n\tfragColor = accColor / float(QAA*QAA);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int numVertices = 160;\n\nconst vec4 vertices[160] = vec4[](\nvec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), \nvec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.0, -0.603005826473, -0.78934442997, 0.3), \nvec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), \nvec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), \nvec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(0.0, -0.975683927536, -0.18633890152, 0.3), \nvec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), \nvec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), \nvec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), \nvec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, 0.3), \nvec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), \nvec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), \nvec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), \nvec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), \nvec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), \nvec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), \nvec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), \nvec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, 0.3), \nvec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), \nvec4(0.0, 0.975683867931, 0.18633890152, 0.3), vec4(0.0, 0.603005826473, 0.78934442997, 0.3), \nvec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), \nvec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), \nvec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), \nvec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), \nvec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), \nvec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), \nvec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), \nvec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), \nvec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), \nvec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(0.0, -0.603005826473, -0.78934442997, -0.3), \nvec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), \nvec4(0.0, -0.603005826473, -0.78934442997, -0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), \nvec4(0.0, -0.603005826473, -0.78934442997, -0.3), vec4(0.0, -0.975683927536, -0.18633890152, -0.3), \nvec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), \nvec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), \nvec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), \nvec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), \nvec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(0.0, -0.975683927536, -0.18633890152, -0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(0.0, -0.975683927536, -0.18633890152, -0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), \nvec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(0.0, 0.975683867931, 0.18633890152, -0.3), vec4(0.0, 0.603005826473, 0.78934442997, -0.3), \nvec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(0.0, 0.603005826473, 0.78934442997, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(0.0, 0.603005826473, 0.78934442997, -0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(0.354437857866, 0.48784211278, -0.78934431076, -0.3), \nvec4(0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(0.573492586613, -0.186338871717, -0.789344370365, -0.3), \nvec4(0.0, -0.603005826473, -0.78934442997, 0.3), vec4(0.0, -0.603005826473, -0.78934442997, -0.3), \nvec4(-0.573492586613, -0.186338871717, -0.789344370365, 0.3), vec4(-0.573492586613, -0.186338871717, -0.789344370365, -0.3), \nvec4(-0.354437857866, 0.48784211278, -0.78934431076, 0.3), vec4(-0.354437857866, 0.48784211278, -0.78934431076, -0.3), \nvec4(-0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(-0.573492586613, 0.789345026016, -0.186338797212, -0.3), \nvec4(-0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(-0.927930414677, -0.301502913237, -0.186338871717, -0.3), \nvec4(0.0, -0.975683927536, -0.18633890152, 0.3), vec4(0.0, -0.975683927536, -0.18633890152, -0.3), \nvec4(0.927930414677, -0.301502913237, -0.186338871717, 0.3), vec4(0.927930414677, -0.301502913237, -0.186338871717, -0.3), \nvec4(0.573492586613, 0.789345026016, -0.186338797212, 0.3), vec4(0.573492586613, 0.789345026016, -0.186338797212, -0.3), \nvec4(0.0, 0.975683867931, 0.18633890152, 0.3), vec4(0.0, 0.975683867931, 0.18633890152, -0.3), \nvec4(-0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(-0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(-0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(-0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(0.573492586613, -0.789345026016, 0.186338797212, 0.3), vec4(0.573492586613, -0.789345026016, 0.186338797212, -0.3), \nvec4(0.927930414677, 0.301502913237, 0.186338871717, 0.3), vec4(0.927930414677, 0.301502913237, 0.186338871717, -0.3), \nvec4(0.0, 0.603005826473, 0.78934442997, 0.3), vec4(0.0, 0.603005826473, 0.78934442997, -0.3), \nvec4(0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(0.573492586613, 0.186338871717, 0.789344370365, -0.3), \nvec4(0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(-0.354437857866, -0.48784211278, 0.78934431076, 0.3), vec4(-0.354437857866, -0.48784211278, 0.78934431076, -0.3), \nvec4(-0.573492586613, 0.186338871717, 0.789344370365, 0.3), vec4(-0.573492586613, 0.186338871717, 0.789344370365, -0.3) );\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}