{
    "Shader": {
        "info": {
            "date": "1590601914",
            "description": "Made for my website background.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdBfRd",
            "likes": 4,
            "name": "Rings and Lines",
            "published": 3,
            "tags": [
                "rings",
                "lines",
                "voronoise"
            ],
            "usePreview": 0,
            "username": "Tezza48",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "// Remove for just the noise\n#define SWEEP\n\n// Hash without Sine 2 - https://www.shadertoy.com/view/XdGfRR\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xffffffffU))\n\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*UI2;\n\tq = (q.x ^ q.y) * UI2;\n\treturn vec2(q) * UIF;\n}\n\nvec3 hash33(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * UI3;\n\tq = (q.x ^ q.y ^ q.z)*UI3;\n\treturn vec3(q) * UIF;\n}\n\n// -\t-\t-\t-\t-\t-\t-\t-\n\nfloat calcVoro31(vec3 p)\n{\n    vec3 cellPos = fract(p);\n    vec3 cellId = floor(p);\n    \n    float len = 2.0;\n    \n    for (int z = -1; z < 2; z++)\n    for (int y = -1; y < 2; y++)\n    for (int x = -1; x < 2; x++)\n    {\n        vec3 offs = vec3(x, y, z);\n        len = min(len, length(cellPos + offs - hash33(cellId - offs)));\n    }\n    \n    return len;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    float timeScale = 20.0f;\n    \n    vec3 p = vec3(uv, iTime / timeScale);\n    \n    float res;\n    float voro = calcVoro31(p * 3.0);\n    \n    res += voro;\n    \n    //res = cla(res, 0.3);\n    res *= 2.0;\n    \n    res = abs(res - 0.4);   \n    \n    res = smoothstep(0.02, 0.025, res);\n    \n    col.rgb = mix(vec3(0.9, 0.9, 0.9), vec3(0.2, 0.4, 0.6),res);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}