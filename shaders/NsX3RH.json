{
    "Shader": {
        "info": {
            "date": "1615457884",
            "description": "Drive the buggy; try to stay on the marked path; wheel tracks remain on ground (temporarily)",
            "flags": 32,
            "hasliked": 0,
            "id": "NsX3RH",
            "likes": 23,
            "name": "Lunar Buggy",
            "published": 3,
            "tags": [
                "moon",
                "path",
                "car",
                "drive",
                "nasa",
                "vehicle",
                "trajectory"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 560
        },
        "renderpass": [
            {
                "code": "// \"Lunar Buggy\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Drive the buggy; try to stay on the marked path; wheel tracks remain on ground (temporarily).\n\n/*\n  Knob controls speed and direction (overrides randomized auto mode); mouseable;\n  view direction is either relative to buggy, or to ground at high elevation;\n  on-path distance shown.\n  \n  (Bits from \"Segway Driving\", \"Drive The Rover\", \"Moon Flight\".)\n*/\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int npTrail = 512;  // same for image and buffer\nconst int npFst = 6;\n\nvec3 sunDir, qHit, carPos, wlBase;\nvec2 wlRot;\nfloat dstFar, tCur, wlRad, carRot, strRot, hgSize, trWidf;\nint idObj;\nbool isSh;\nconst int idBase = 1, idArch = 2, idWhl = 3, idCon = 4, idAxl = 5, idStr = 6, idChr = 7,\n   idAnt = 8, idDish = 9, idCam = 10, idGrbl = 11;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 kRot;\n  float dMin, d, r, a;\n  p -= carPos;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (wlRad + 0.02, wlBase.z);\n  dMin = dstFar;\n  q = p;\n  if (! isSh) d = PrRoundBoxDf (q, vec3 (2., 2.5, 2.5), 0.03);\n  if (isSh || d < 0.1) {\n    d = PrRoundBoxDf (q, vec3 (1.2, 0.03, 1.2), 0.03);\n    d = min (d, PrRoundBoxDf (q, vec3 (0.7, 0.03, wlBase.z + 0.2), 0.03));\n    d = min (d, PrTorusBxDf ((q - vec3 (0., 0.06, 0.)).xzy, vec3 (1.1, 1.1, 0.05), 0.03));\n    DMINQ (idBase);\n    q = p;\n    q.xz = abs (q.xz) - wlBase.xz;\n    q.xy -= vec2 (0.13, -0.2);\n    d = SmoothMax (abs (length (q.xy) - wlRad - 0.58) - 0.025, max (max (q.x, 0.2 - q.y), abs (q.z) - 0.2), 0.01);\n    q.xy -= vec2 (-0.13, 1.07);\n    d = min (d, PrCylDf (q.xzy, 0.08, 0.1));\n    DMINQ (idArch);\n    q = p;\n    q.xz = abs (q.xz) - wlBase.xz;\n    if (p.z > 0.) q.xz = Rot2D (q.xz, - strRot * sign (p.x));\n    q.yz = Rot2D (q.yz, - ((p.x < 0.) ? wlRot.x : wlRot.y) * sign (p.z));\n    r = length (q.yz);\n    d = length (max (vec2 (r - wlRad, abs (q.x) - 0.1) - 0.1, 0.));\n    if (d < 0.1) {\n      d = max (length (max (vec2 (r - wlRad, abs (q.x) - 0.15), 0.)) - 0.05, wlRad - 0.02 - r);\n      a = (r > 0.) ? atan (q.z, - q.y) / (2. * pi) : 0.;\n      d = SmoothMax (d, 0.03 - length (Rot2D (q.yz, 2. * pi * floor (24. * a + 0.5) / 24.) +\n         vec2 (wlRad + 0.05, 0.)), 0.01);\n      d = min (d, max (abs (r - wlRad + 0.04) - 0.02, abs (q.x) - 0.07));\n      q.yz = Rot2D (q.yz, 2. * pi * floor (6. * a + 0.5) / 6.);\n      d = min (d, max (PrTorusBxDf (q - vec3 (0., -0.31, 0.), vec3 (0.08, 0.05, 0.1), 0.02), - q.x));\n      d = min (d, min (max (abs (r - 0.15) - 0.03, abs (q.x) - 0.15), max (r - 0.12, abs (q.x) - 0.12)));\n      DMINQ (idWhl);\n    } else dMin = min (dMin, d);\n    q = p;\n    q -= vec3 (-0.4, 0.4, 1.);\n    d = PrRoundBoxDf (q, vec3 (0.1, 0.4, 0.03), 0.05);\n    q.y -= 0.45;\n    d = min (d, PrRoundBoxDf (q, vec3 (0.25, 0.07, 0.03), 0.05));\n    DMINQ (idCon);\n    q = p;\n    q.xz = abs (q.xz) - wlBase.xz;\n    if (p.z > 0.) q.xz = Rot2D (q.xz, - strRot * sign (p.x));\n    q.y -= 0.85;\n    d = PrCapsDf (q.xzy, 0.04, 0.18);\n    q.y -= -0.5;\n    d = min (d, max (PrTorusBxDf (q, vec3 (0.2, 0.2, 0.12), 0.04), q.x));\n    DMIN (idAxl);\n    q = p;\n    q -= vec3 (-0.4, 0.73, 0.7);\n    q.yz = Rot2D (q.yz, -0.1 * pi);\n    q.xy = Rot2D (q.xy, -2.5 * strRot);\n    d = PrCylDf (q, 0.05, 0.3);\n    q.z -= -0.3;\n    d = min (d, PrRoundCylDf (q.yzx, 0.03, 0.02, 0.35));\n    DMINQ (idStr);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.4, 0.4, -0.2);\n    d = PrRoundBoxDf (q, vec3 (0.35, 0.05, 0.3), 0.02);\n    q.z -= -0.25;\n    q.yz = Rot2D (q.yz, 0.1 * pi);\n    q.y -= 0.3;\n    d = min (d, PrRoundBoxDf (q, vec3 (0.35, 0.3, 0.05), 0.02));\n    DMINQ (idChr);\n    q = p;\n    q -= vec3 (-0.3, 0.7, - wlBase.z + 0.2);\n    q.z = abs (q.z) - 0.1;\n    d = PrCylDf (q.xzy, 0.02, 0.6);\n    DMIN (idAnt);\n    q = p;\n    q -= vec3 (0.5, 1., - wlBase.z - 0.1);\n    d = PrCylDf (q.xzy, 0.02, 1.);\n    DMIN (idAnt);\n    q.y -= 1.;\n    q.xy = Rot2D (q.xy, 0.1 * pi);\n    q.y -= 0.47;\n    d = max (abs (PrSphDf (q, 0.5)) - 0.01, q.y + 0.25);\n    DMINQ (idDish);\n    q = p;\n    q.yz -= vec2 (0.9, wlBase.z + 0.15);\n    q.xz = Rot2D (q.xz, 0.3 * pi * sin (0.15 * pi * tCur));\n    q.yz = Rot2D (q.yz, -0.05 * pi);\n    d = PrCapsDf (q, 0.1, 0.1);\n    DMINQ (idCam);\n    q = p;\n    q.xz = abs (q.xz);\n    q -= vec3 (0.9, 0.05, 0.3);\n    d = PrTorusBxDf (q.yzx, vec3 (0.06, 0.08, 0.03), 0.02);\n    DMIN (idGrbl);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.4, 0.2, -0.2);\n    q.xz = abs (q.xz) - 0.2;\n    d = PrCylDf (q.xzy, 0.05, 0.2);\n    DMIN (idGrbl);\n    q = p;\n    q.xz = abs (q.xz);\n    q -= vec3 (0.3, 0.1, 1.6);\n    d = PrRoundBoxDf (q, vec3 (0.1, 0.1, 0.2), 0.02);\n    DMIN (idGrbl);\n    q = p;\n    q.x = abs (abs (q.x) - 0.6);\n    q -= vec3 (0.3, 0.1, -0.9);\n    d = PrRoundCylDf (q.xzy, 0.1, 0.05, 0.1);\n    DMIN (idGrbl);\n    q = p;\n    q.yz -= vec2 (0.05, 0.6);\n    d = PrRoundBoxDf (q, vec3 (0.1, 0.05, 0.2), 0.02);\n    DMIN (idGrbl);\n    q.z = abs (q.z);\n    q.yz -= vec2 (0.25, 0.1);\n    d = PrRoundCylDf (q.xzy, 0.01, 0.02, 0.15);\n    DMINQ (idStr);\n    q = p;\n    q.yz -= vec2 (0.4, wlBase.z + 0.1);\n    d = PrCylDf (q.xzy, 0.03, 0.4);\n    DMIN (idGrbl);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 CarCol ()\n{\n  vec4 col4;\n  float r;\n  if (idObj <= idAxl) {\n    if (idObj == idBase) {\n      col4 = vec4 (0.8, 0.85, 0.8, 0.1) * (1. - 0.05 * step (0.03, qHit.y) * cos (16. * pi * qHit.z));\n    } else if (idObj == idArch) {\n      col4 = vec4 (0.8, 0.4, 0.2, 0.1) * (0.8 + 0.2 * smoothstep (0., 0.02, abs (abs (qHit.z) - 0.13) - 0.01));\n    } else if (idObj == idWhl) {\n      r = length (qHit.yz);\n      col4 = vec4 (((r > 0.115) ? vec3 (0.95, 0.95, 1.) * (1. - 0.5 * step (0.47, r)) :\n         vec3 (0., 0.5, 0.) * (0.3 + 0.7 * smoothstep (0., 0.02, r - 0.05))), 0.);\n    } else if (idObj == idCon) {\n      col4 = vec4 (0.8, 0.8, 0.4, 0.1) * (1. - 0.5 * step (qHit.z, 0.) * (1. - smoothstep (0., 0.02,\n         length (vec2 (abs (qHit.x) - 0.15, qHit.y)) - 0.04)));\n    } else if (idObj == idAxl) {\n      col4 = vec4 (0.5, 0.5, 0.6, 0.1);\n    }\n  } else {\n    if (idObj == idStr) {\n      col4 = vec4 (0.8, 0.8, 1., 0.2) * (1. - 0.5 * smoothstep (0., 0.02, abs (qHit.x) - 0.15));\n    } else if (idObj == idChr) {\n      col4 = vec4 (0.8, 0.6, 0.4, 0.) * (0.8 + 0.2 * cos (4. * pi * qHit.x / 0.35));\n    } else if (idObj == idAnt) {\n      col4 = vec4 (0.5, 0.5, 0.5, 0.1);\n    } else if (idObj == idDish) {\n      col4 = vec4 (0.8, 0.8, 0.6, 0.2) * (1. - 0.3 * smoothstep (0., 0.02,\n         abs (mod (16. * atan (qHit.x, qHit.z) / (2. * pi) + 0.5, 1.) - 0.5) - 0.35));\n    } else if (idObj == idCam) {\n      col4 = mix (vec4 (0.2, 0.2, 0.2, 0.), vec4 (0.9, 0.7, 0.5, 0.1), (1. - step (0., qHit.z) *\n         smoothstep (0., 0.01, 0.095 - length (qHit.xy))));\n    } else if (idObj == idGrbl) {\n      col4 = vec4 (0.5, 0.7, 0.5, 0.1);\n    }\n  }\n  return col4;\n}\n\nfloat TrailShd (vec2 p)\n{\n  vec3 u;\n  vec2 gB[2], gF[2], dg, q;\n  float st, s, gLen;\n  st = 1.;\n  gB[0] = carPos.xz;\n  gF[0] = gB[0] + Rot2D (vec2 (0., 2. * wlBase.z), - carRot);\n  for (int j = VAR_ZERO; j < npTrail; j ++) {\n    gB[1] = gB[0];\n    gF[1] = gF[0];\n    u = Loadv4 (npFst + j).xyz;\n    if (u.z >= 0.) {\n      gB[0] = u.xy;\n      gF[0] = gB[0] + Rot2D (vec2 (0., 2. * wlBase.z), - u.z);\n      s = 1.;\n      dg = gB[0] - gB[1];\n      gLen = length (dg);\n      if (gLen > 0.) {\n        q = Rot2Cs (p - 0.5 * (gB[0] + gB[1]), dg.yx / gLen);\n        s = min (s, PrRoundBox2Df (vec2 (abs (q.x) - wlBase.x, q.y), vec2 (0.1, 0.5 * gLen), 0.05));\n      }\n      for (float k = -1.; k <= 1.; k += 2.) {\n        dg = gF[0] - gF[1];\n        gLen = length (dg);\n        if (gLen > 0.) {\n          s = min (s, PrRoundBox2Df (Rot2Cs (p - 0.5 * (gF[0] + gF[1]) +\n             Rot2D (vec2 (k * wlBase.x, 0.), - u.z), dg.yx / gLen), vec2 (0.1, 0.5 * gLen), 0.05));\n        }\n      }\n      st = min (st, 1. - 0.3 * sqrt (1. - float (j) / float (npTrail)) *\n         (1. - smoothstep (0., 0.05, s)));\n    } else break;\n  }\n  return st;\n}\n\nvec3 GrndCol (vec3 ro, float dstGrnd, float sh)\n{\n  vec3 col, vn;\n  vec2 vf, q;\n  vec2 gId;\n  float a, f, ff, st;\n  gId = PixToHex (ro.xz / hgSize);\n  q = Rot2D ((ro.xz - HexToPix (gId * hgSize)) / hgSize, (2. * step (Hashfv2 (gId), 0.5) - 1.) * pi / 6.);\n  q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 1.;\n  col = 0.8 * mix (vec3 (0.7, 0.6, 0.4), vec3 (0.6, 0.5, 0.3), smoothstep (0.3, 0.7, Fbm2 (0.5 * ro.xz)));\n  f = abs (length (q) - 0.5) - trWidf;\n  if (f < 0.) {\n    a = abs (mod (4. * (mod (15. * atan (q.y, - q.x) / (2. * pi), 1.) - 0.5) + 0.5, 1.) - 0.5) - 0.3;\n    for (float s = 1.; s >= 0.; s -= 1.) {\n      col = mix (vec3 (0.4, 0.6, 1.), col, max (smoothstep (0., 0.02, a - 0.03 * s),\n         smoothstep (0., 0.002, abs (f + 0.02) - 0.005)));\n    }\n  }\n  st = TrailShd (ro.xz);\n  ff = 1. - smoothstep (0.1, 0.3, dstGrnd / dstFar);\n  vf = vec2 (2., 1.) * (1. + 2. * step (st, 0.99));\n  vn = vec3 (0., 1., 0.);\n  if (ff > 0.) vn = VaryNf (vf.x * ro, vn, vf.y * ff);\n  col *= (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) * (0.3 + 0.7 * st);\n  return col;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ErCol (vec3 rd)\n{\n  vec3 erDir, col, vn;\n  float erRad, bs, ts;\n  erDir = normalize (vec3 (0.02, 0.06, 1.));\n  erRad = 0.03;\n  col = vec3 (0.);\n  bs = dot (rd, erDir);\n  ts = bs * bs - 1. + erRad * erRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - erDir) / erRad);\n      col = mix (vec3 (0.3, 0.4, 0.8), vec3 (1., 1., 0.95),\n         smoothstep (0.2, 0.8, Fbm2 (6. * vn.xy + 7.1))) * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n    }\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, dstGrnd, sh;\n  bool isBg;\n  isBg = false;\n  isSh = false;\n  dstGrnd = dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = CarCol ();\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    vn = vec3 (0., 1., 0.);\n  } else {\n    isBg = true;\n    col = ErCol (rd);\n  }\n  if (! isBg) {\n    isSh = true;\n    sh = (min (dstObj, dstGrnd) < dstFar) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n    if (dstObj < dstFar) col = col4.rgb * (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    else col = GrndCol (ro, dstGrnd, sh) * (1. - smoothstep (0.5, 1., dstGrnd / dstFar));\n  }\n  if (min (dstObj, dstGrnd) >= dstFar || length (col) < 0.03) col += StarPat (rd, 6.);\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0 \n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 rd, ro, col, wgBox;\n  vec2 canvas, uv, ud, cnPos;\n  float el, az, asp, zmFac, onPath, trvDist, s, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  wlRad = wlBase.y;\n  stDat = Loadv4 (2);\n  hgSize = stDat.x;\n  trWidf = stDat.y;\n  onPath = stDat.z;\n  trvDist = stDat.w;\n  stDat = Loadv4 (3);\n  az = stDat.x;\n  el = stDat.y;\n  cnPos = stDat.zw;\n  stDat = Loadv4 (4);\n  strRot = stDat.y;\n  wlRot = stDat.zw;\n  stDat = Loadv4 (5);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  el = clamp (el, -0.45 * pi, 0.02 * pi);\n  if (el > -0.37 * pi) az += carRot;\n  vuMat = StdVuMat (el, az);\n  ro = carPos + vec3 (Rot2D (vec2 (0., wlBase.z), - carRot), 0.).xzy + vuMat * vec3 (0., 2., -10.);\n  zmFac = 3. + 1.85 * el;\n  dstFar = 150.;\n  sunDir = normalize (vec3 (-1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  wgBox = vec3 (0.41, -0.32, 0.135);\n  ud = 0.5 * uv - wgBox.xy * vec2 (asp, 1.);\n  s = (length (ud) - wgBox.z) * canvas.y;\n  col = mix (vec3 (0.5), col, smoothstep (0., 1., abs (s) - 1.));\n  if (s < 0.) {\n    col = mix (vec3 (0.5), col, step (1., Minv2 (abs (ud)) * canvas.y));\n    col = mix (((onPath > 0.) ? vec3 (0., 1., 0.) : vec3 (0.8, 0., 0.)), col,\n       smoothstep (2.5, 3.5, abs (length (ud - cnPos) * canvas.y - 10.)));\n  }\n  col = mix (col, vec3 (0., 1., 0.), ShowIntPZ (0.5 * uv - vec2 (0.44 * asp, -0.15),\n     vec2 (0.06 * asp, 0.03), 4., mod (floor (trvDist / (2. * wlRad)), 1e4)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    val = max (val, 0.);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Lunar Buggy\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Noiseff (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int npTrail = 512;  // same for image and buffer\nconst int npFst = 6;\n\nvec3 carPos, wlBase;\nfloat carRot, hgSize, trWidf;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\nconst float txRow = 128.;\n\nfloat OnPath ()\n{\n  vec2 q, gId;\n  q = carPos.xz + Rot2D (vec2 (0., wlBase.z), - carRot);\n  gId = PixToHex (q / hgSize);\n  q = Rot2D ((q - HexToPix (gId * hgSize)) / hgSize,\n     (2. * step (Hashfv2 (gId), 0.5) - 1.) * pi / 6.);\n  q = Rot2D (q, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n  q.x += 1.;\n  return (abs (length (q) - 0.5) < trWidf) ? 1. : 0.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 wgBox;\n  vec2 iFrag, canvas, cnPos, wlRot, cp, ud, w;\n  float tCur, autoMd, cRotN, strRot, wlRad, rTurn, spd, onPath, trvDist, tc, nStep,\n     az, el, asp, s;\n  int pxId, wgSel, nFrame;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= npFst + npTrail) discard;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  init = (nFrame <= 5);\n  asp = canvas.x / canvas.y;\n  if (init) {\n    mPtrP = mPtr;\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlRad = 0.5;\n    wlBase = vec3 (1.6, wlRad, 1.8);\n    wlRot = vec2 (0.);\n    az = 0.;\n    el = -0.1 * pi;\n    nStep = 0.;\n    cnPos = vec2 (0.);\n    wgSel = 0;\n    autoMd = 1.;\n    hgSize = 40.;\n    trWidf = 0.12;\n    onPath = 0.;\n    trvDist = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP.xyz = stDat.xyz;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    autoMd = stDat.w;\n    stDat = Loadv4 (2);\n    hgSize = stDat.x;\n    trWidf = stDat.y;\n    onPath = stDat.z;\n    trvDist = stDat.w;\n    stDat = Loadv4 (3);\n    az = stDat.x;\n    el = stDat.y;\n    cnPos = stDat.zw;\n    stDat = Loadv4 (4);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    wlRot = stDat.zw;\n    stDat = Loadv4 (5);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n  }\n  if (pxId < npFst) {\n    wgBox = vec3 (0.41, -0.32, 0.135);\n    if (mPtr.z > 0.) {\n      if (wgSel == 0 && mPtrP.z > 0.) {\n        az = -2.5 * pi * mPtr.x;\n        el = - pi * mPtr.y;\n      } else {\n        ud = mPtr.xy * vec2 (asp, 1.) - wgBox.xy * vec2 (asp, 1.);\n        if (wgSel == 1) {\n          autoMd = - tCur;\n          cnPos = ud;\n          s = length (cnPos);\n          if (s > 0.) cnPos = min (s, wgBox.z) * cnPos / s;\n        } else if (mPtrP.z <= 0. && length (ud) < wgBox.z) wgSel = 1;\n      }\n    } else {\n      wgSel = 0;\n      cnPos *= 1. - 5e-3;\n    }\n    wlRad = wlBase.y;\n    ++ nStep;\n    if (autoMd > 0.) {\n      tc = 0.005 * nStep;\n      s = 2. * Noiseff (37.1 * mod (floor (tc), 16.)) - 1.;\n      s = max (0.3, abs (s)) * sign (s);\n      strRot = 0.15 * pi * s * SmoothBump (0.2, 0.8, 0.1, mod (tc, 1.));\n      spd = 0.12 - 0.06 * abs (strRot / (0.15 * pi));\n      w = vec2 (- strRot / (0.15 * pi), spd / 0.5);\n      w = pow (abs (w), 1. / vec2 (1.5)) * sign (w);\n      cnPos = w * wgBox.z;\n    } else {\n      w = cnPos / wgBox.z;\n      w = pow (abs (w), vec2 (1.5)) * sign (w);\n      strRot = -0.18 * pi * w.x;\n      spd = 0.2 * w.y;\n      if (tCur + autoMd > 10.) autoMd = 1.;\n    }\n    cp = carPos.xz;\n    w = vec2 (1.);\n    if (abs (strRot) > 1e-4) {\n      cRotN = carRot - strRot * spd / pi;\n      rTurn = wlBase.z / asin (0.5 * strRot);\n      carPos.xz += rTurn * (sin (carRot - vec2 (0.5 * pi, 0.)) - sin (cRotN - vec2 (0.5 * pi, 0.)));\n      carRot = mod (cRotN, 2. * pi);\n      w += vec2 (-1., 1.) * wlBase.x / rTurn;\n    } else {\n      carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n    }\n    wlRot += w * spd / wlRad;\n    if (pxId == 2) {\n      onPath = OnPath ();\n      if (onPath > 0.) trvDist += length (carPos.xz - cp);\n      else trvDist = 0.;\n    }\n  }\n  if (! init) {\n    if (mod (float (nFrame), 6.) == 0.) {\n      if (pxId == npFst) stDat = vec4 (Loadv4 (5).xzw, 0.);\n      else if (pxId < npFst + npTrail) stDat = Loadv4 (pxId - 1);\n    } else if (pxId >= npFst && pxId < npFst + npTrail) stDat = Loadv4 (pxId);\n  } else {\n    stDat = vec4 (0., 0., -1., 0.);\n  }\n  if      (pxId == 0) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (wlBase, autoMd);\n  else if (pxId == 2) stDat = vec4 (hgSize, trWidf, onPath, trvDist);\n  else if (pxId == 3) stDat = vec4 (az, el, cnPos);\n  else if (pxId == 4) stDat = vec4 (nStep, strRot, wlRot);\n  else if (pxId == 5) stDat = vec4 (carPos, carRot);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}