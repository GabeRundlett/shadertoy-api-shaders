{
    "Shader": {
        "info": {
            "date": "1711247180",
            "description": "just glow",
            "flags": 32,
            "hasliked": 0,
            "id": "4XBSWw",
            "likes": 10,
            "name": "glowystuff",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "//philip,bertani@gmail.com\n//Buffer A is where it is at\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    \n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n    fragColor = total_color;\n    \n \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float[] params = float[] ( \n-.1,\n7.,\n-.3,\n.17,\n0.,\n.02,\n0.,\n.1,\n0.,\n0.,\n0.,\n0.,\n0.,\n1.,\n0.,\n0.1,\n2.,\n0.,\n-1.,\n-0.,\n0.,\n0.,\n0.,\n.2,\n.1,\n.1,\n-4.,\n0.1,\n0.2,\n0.3,\n0.,\n0.2,\n0.\n);\n\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float num_iter, objid, glow=0., glow2=0., mmaxDist=50.;\nvec3 ifs_color, ro, light_dir;\n\nmat2 rot(float an) {return mat2(cos(an),-sin(an),sin(an),cos(an));}\n\nfloat random(vec2 p) {return fract( sin( dot( p, vec2(12., 90.)))* 1e4 );}\n\n\nfloat de(vec3 p) {\n  vec3 origP= p;  \n  ifs_color = vec3(0.);  \n  if (p.z < -.6) { objid=3.; return 0.3;}   //sky \n  float nn = 1.7;\n  p.xz = mod(p.xz  + nn, 2.*nn) -nn; p.yz = mod(p.yz  + nn, 2.*nn) -nn;  \n  float shellNum =  p.z/10.;  \n  vec4 q0 = vec4 (p, 2.), q = q0; float i=0.;\n  for (; i<params[1]; i ++) {\n    q.xyz = clamp (q.xyz, -1.-params[5], 1.+params[5]) * (2.+params[4]) \n            - (1.+params[3])*q.xyz; \n    q = q * (2.52+params[2] - shellNum  ) \n        / clamp (  max( dot(q.yz,q.yz), max(dot (q.xz, q.xz),  dot(q.xy,q.xy) ) ), \n        (-1.+params[4])-params[0], 1.+params[0]) + q0;\n    if (q.x*q.y > 0. ) ifs_color.x ++;\n    if (q.y*q.z > 0. ) ifs_color.y ++;\n    if (q.z*q.x > 0. ) ifs_color.z ++;  \n  } \n  ifs_color /= i;\n  objid = 0.;\n  return max( length (q.xyz) / q.w, -(length(origP-ro)-params[7] ) ) ; \n}\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    \n    float t=0.,eps = 1e-5, distfac=50., hitThreshold = eps;\n    for(int i = 0; i < 200; i++) {\n        vec3 pos = ro + rd*t;\n        float d = de(pos);      \n        if (objid == 1. || objid == 3.) { return d; }       \n        if (d < hitThreshold || t >= mx) break;\n        t += d;\n        hitThreshold = eps*(1.+t*t*distfac);       \n        float zz = pos.y - light_dir.y;  zz*=zz;\n        glow += exp(-max( 8.*(1.-exp(-zz*4.))-d,0.)/10.);        \n        float zz2 = ro.z - 0. - pos.z; zz2*=zz2;        \n        glow2 += exp( -max(1.-d,0.)/300.);        \n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float tt = mod(iTime,7.), tf = tt*tt; \n    vec3 col = vec3(0.);\n    light_dir = ro ;  light_dir.y += tf;\n    vec3 color = vec3( params[27], params[28], params[29]);\n    float t = march(ro, rd, mmaxDist);\n    vec3 glowCol;\n    vec3 pos = ro + rd*t; \n    vec3 glowSource = light_dir;\n    float glowStr = exp( -length(pos.y - glowSource.y) / 4.);\n    glow *= glowStr; \n    float glowStr2 = (exp( -length( pos - ro + vec3(0,0,0.) ) / 6.));\n    glow2 *= glowStr2;          \n    vec3 addColor = cos(ifs_color*3.);      \n    color = addColor;\n    color*=color;  \n    glowCol = .5*(color*color);\n    if (objid == 1.) {\n        return vec3(0,0,.5) + 8e-9*pow(glow2,7.)*vec3(t*t,.001,0.); \n    }\n    else if (objid == 2.) {\n        return vec3(0.,.2,0.) - 8e-9*pow(glow2,7.)*vec3(0.,0.,t*t); \n    }\n    else if (objid == 3. ) {                     \n        return    \n            8e-5*pow(glow2,3.)*vec3(0.,0.,.2+t*t*t)\n            + 3e-9*pow(glow,8.)*vec3(0.2,.02,-.03)*glowCol \n            ;     \n    }\n    return   3e-12*pow(glow2,9.)*glowCol + 1e-10*pow(glow,11.)*vec3(0.05,.03,.001)*glowCol\n        + .01*(cos(pos.x/15.+iTime*1.7))*1e-9*glowCol*(pos.z < (-.2 + .2*random(pos.xy)  ) ? pow(glow2,11.) :  0.)\n        ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;    \n    ro = vec3(0.,1.5, 3.2 ) ;     \n    vec3 rd = normalize( vec3(p,1.2 * (1.+.2*sin(iTime/2.) ))) ;\n\n\n    rd.yz *= rot(-1.);\n    ro.y += iTime/5.;\n    rd.xy *= rot(.6);\n \n    vec3 col = clamp(render(ro, rd),1e-4,1e6);\n    col = pow ( ( 1. - exp(-.4 * (1.+params[16]) * col) ) , vec3(.3) );\n    \n    fragColor = vec4( col, 1.);\n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}