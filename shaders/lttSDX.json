{
    "Shader": {
        "info": {
            "date": "1481934880",
            "description": "Without Sound",
            "flags": 0,
            "hasliked": 0,
            "id": "lttSDX",
            "likes": 6,
            "name": "Without Sound",
            "published": 3,
            "tags": [
                "sound",
                "without"
            ],
            "usePreview": 0,
            "username": "voz",
            "viewed": 607
        },
        "renderpass": [
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR/E/PI+1.0/PI/GR/E/PI)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n//-----------------SEEDLINGS-----------------------\nfloat seedling = 0.0;\nfloat stretch = 1.0;\nvec2 offset = vec2(0.0);\nvec2 last_uv = vec2(0.0);\nfloat last_height = 0.0;\nfloat scale = 1.0;\nfloat extraTurns = 0.0;\nfloat aspect = 1.0;\n//-----------------TREES---------------------------\nfloat distTree = 0.0;\nfloat angleTree = 0.0;\n\n//-----------------BASE IMAGE--------------------------\n\nvec4 stars(vec2 uv)\n{\n    float density = 2.0*PI;\n    uv *= density;\n    float s = floor(uv.x)*1234.1234+floor(uv.y)*123.123;\n    vec2 p = floor(uv)+saw(floor(uv)+iTime+s)*.5+.25;\n    \n    float l = length(p-uv);\n    float f = smoothstep(.1*GR, 1.0, exp(-l*8.0));\n    \n\tfloat plant = f+s+seedling+ (last_uv.x+last_uv.y)/2.0/PI;    \n    vec3 c = vec3(flux(plant)+\n                      (1.0-smoothstep(0.0, 1.0/5.0, saw(plant-time))))\n        *(1.0-smoothstep(4.0/5.0, 1.0, saw(plant-time)));\n    return vec4(clamp(c*f+f*f*f*f, 0.0, 1.0), (saw(f*1.0*PI)));\n}\n\nvec4 galaxy(vec2 uv)\n{\n    uv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, 1.0), time*(saw(seedling)+4.0)*PI*14.0).xy;;\n    vec2 uv0 = uv;\n    float r = length(uv);\n\tuv *= 2.5*(GR);\n    \n    \n    float r1 =  pow(log(length(uv)+1.), 2.0);\n    float r2 = pow(log(length(uv)+1.), 1.5);\n    \n    float rotation = time*4.0*PI;\n    \n    float theta1 = atan(uv.y, uv.x)-r1*PI+rotation*.5+seedling-rotation;\n    float theta2 = atan(uv.y, uv.x)-r2*PI+rotation*.5+seedling-rotation;\n    \n    float plant = (seedling*GR+1.0/GR+time)*4.0*PI;\n    plant += texture(iChannel1, vec2(saw(seedling), 0.5)).r;\n    \n    \n    float arms = acos(1.0-(cos(theta1)*cos(theta1)+sqrt(cos(theta1+PI)*cos(theta1+PI)))/2.0)\n              + cos(1.0-(cos(theta2)*cos(theta2)+cos(theta2+PI/2.)*cos(theta2+PI/2.))/2.0);\n    \n    plant = plant*PI+arms+ \n                           atan(last_uv.x,last_uv.y)\n                           ;\n    \n    vec4 color = vec4(flux(plant)+\n                      (1.0-smoothstep(0.0, .5/5.0, saw(plant-time))), 1.0)\n        *(1.0-smoothstep(4.5/5.0, 1.0, saw(plant-time)));\n    \n    color += stars(uv)*arms;\n    vec4 final = clamp(color/2.0, 0.0, 1.0);\n         \n    final /= r1;\n    \n\tfinal = (clamp(final, 0.0, 1.0));\n    \n    \n    float weight = smoothstep(1.0/PI/GR/E, 1.0/PI, saw(arms*PI*2.0+time)*length(clamp(final.rgb, 0.0, 1.0)));\n    return weight*clamp(final*smoothstep(0.0, 1.0/GR/PI/E, 1.0-r), 0.0, 1.0);\n}\n\n//-----------------IMAGINARY TRANSFORMATIONS-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\nvec2 mobius(vec2 uv)\n{\n    \n    //numerator /= (abs(denominator)+1.0);\n    \n    vec2 quotient = vec2(0.0);\n    const int bends = 4;\n    for(int i = 0; i < bends; i++)\n    {\n       \tfloat iteration = float(i)/float(bends);\n        vec2 numerator = uv;\n        vec2 denominator =rotatePoint(vec3(cmul(uv, sin(vec2(time+\n                                                             seedling-2.0*PI*sin(-iteration+\n                                                                                 time/GR), \n                                                             time/GR+seedling-2.0*PI*sin(iteration+\n                                                                                         time)))), 0.0), vec3(0.0, 0.0, 1.0), \n                                      time*PI).xy\n            +vec2(cos(iteration*16.0*PI-(time*\n                                         PI+seedling)*PI*2.0), sin(iteration*16.0*PI-(time*\n                                                                                      PI+seedling)*PI*2.0))*(iteration+last_height*PI)*2.0;\n        vec2 final = (cdiv(numerator, denominator));\n        quotient += final/(float(bends))*(GR+sin(time+seedling+iteration));\n        \n        \n    }\n    for(int i = 0; i < bends; i++)\n    {\n       \tfloat iteration = float(i)/float(bends);\n        vec2 numerator = uv;\n        vec2 denominator =rotatePoint(vec3(cmul(uv, sin(vec2(time+\n                                                             seedling-2.0*PI*sin(-iteration+\n                                                                                 time/GR), \n                                                             time/GR+seedling-2.0*PI*sin(iteration+\n                                                                                         time)))), 0.0), vec3(0.0, 0.0, 1.0), \n                                      time*PI).xy\n            +vec2(cos(iteration*16.0*PI-(time*\n                                         PI+seedling)*PI*2.0), sin(iteration*16.0*PI-(time*\n                                                                                      PI+seedling)*PI*2.0))*PI*PI*PI;\n        vec2 final = (cdiv(numerator, denominator));\n        quotient += final/(float(bends))*(GR+sin(time+seedling+iteration));\n        \n        \n    }\n        \n    float a = atan(quotient.y, quotient.x);\n    \n    angleTree = a/PI;\n    distTree = length(quotient.xy);\n    \n    //quotient = rotatePoint(vec3(quotient, 0.0), vec3(0.0, 0.0, 1.0), a).xy;\n    vec2 next = quotient;\n\n\n    float denom = length(fwidth(uv));//max(fwidth(uv.x),fwidth(uv.y));\n    denom += 1.0-abs(sign(denom));\n\n    float numer = length(fwidth(next));//min(fwidth(next.x),fwidth(next.y));\n    numer += 1.0-abs(sign(numer));\n\n    \n    \n    stretch = denom/numer;\n    \n    return quotient;\n}\n\n//-----------------ITERATED FUNCTION SYSTEM-----------------\n\nvec2 iterate(vec2 uv)\n{\n    uv += offset;\n    \n    \n    vec2 final = mobius(uv);\n    \n    seedling = (floor(final.x)+floor(final.y));\n    \n    return final;\n}\n    \nvec3 weights[32];\n\n\nfloat lowAverage()\n{\n    const int iters = 32;\n    float product = 1.0;\n    float sum = 0.0;\n    \n    float smallest = 0.0;\n    \n    for(int i = 0; i < iters; i++)\n    {\n        float sound = texture(iChannel1, vec2(float(i)/float(iters), 0.5)).r;\n        smallest = \n        \n        product *= sound;\n        sum += sound;\n    }\n    return max(sum/float(iters), pow(product, 1.0/float(iters)));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = max(lowAverage(), last_height)-1.0/30.0;\n    float beat = clip(height);\n\n    last_height = height;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = PI*PI*E*(1.0+saw(time*PI*4.0+last_height*PI*2.0)*PI);\n    uv = uv*scale-scale/2.0;\n    \n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect;\n    \n    vec2 uv0 = uv;\n    \n\tconst int max_iterations = 8;\n    int target = max_iterations;//-int(saw(spounge)*float(max_iterations)/2.0);\n    \n    float antispeckle = 1.0; \n    float magnification = 1.0;\n  \n\tvec4 color = vec4(0.0);\n    float center = 1.0E32;\n    float angle = atan(uv.y, uv.x)/PI;\n    float border = 1.0;\n    \n    seedling = height*2.0*PI;\n    \n        \n    offset = sin(vec2(time+seedling,\n                      -time-seedling))*(.5/E);\n    \n    border *= (1.0-color.a);//*antispeckle;\n    \n    for(int i = 0; i < max_iterations; i++)\n        weights[i] = vec3(vec2(0.0), 1.0);\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n\n        seedling = float(i);\n        extraTurns = float(i*i+1);\n\n        last_uv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, 1.0), time*(1.0+iteration)).xy;\n        uv = iterate(uv);\n        \n        antispeckle /= length(fwidth(uv));\n\n        float weight = pow(clamp(antispeckle, 0.0, 1.0), 1.0/float(i+1));\n        \n        \n\n        float draw = border*(1.0-color.a);\n\n        float skip = saw(floor(uv.x)*PI*123.0+floor(uv.y)*PI*321.0);\n\n        vec3 p = vec3(saw(uv*PI), sphereN(saw(uv*PI)));\n        \n        center = min(center, distTree);\n        \n        angle = (angle*angleTree);\n        \n        color += skip*(galaxy((p.xy)*2.0-1.0)+\n                  stars(p.xy))*draw*weight;//+stars(p.xy)*draw, 0.0, 1.0);\n        border *= draw;\n        \n        \n    }\n    float core = (1.0-smoothstep(0.0, 1.0/PI/GR/E, antispeckle));\n    antispeckle = pow(antispeckle, 1.0/float(max_iterations));\n    float v = smoothstep(0.0, 1.0/PI/GR/E, core);\n    fragColor = (vec4((color)*(1.0-v)+v*vec4(flux(seedling), 1.0)));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}