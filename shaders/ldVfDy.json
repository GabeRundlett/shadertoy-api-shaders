{
    "Shader": {
        "info": {
            "date": "1530375556",
            "description": "I think I did raymarching? I am new at this.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldVfDy",
            "likes": 2,
            "name": "Fluttering Flag",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "_polymath",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "vec2 r(vec2 a, float b)\n{\n  float c = cos(b);\n  float s = sin(b);\n  return vec2(\n    a.x*c-a.y*s,\n    a.y*c+a.x*s\n  );\n}\n\nvec4 flag(vec4 def, in vec3 ray, in vec3 cam) {\n    vec2 flagUv = ray.zy / (ray.x / cam.x) - cam.zy;\n    \n    if (flagUv.y < -.25 || flagUv.y > .25 || flagUv.x < 0. || flagUv.x > 1.)\n        return def;\n    \n    return texture(iChannel0, flagUv * vec2(1.,-2.));\n}\n\n#define MAXFLUT 0.07\n#define FLUTSTEP 0.0025\n#define FLUTTOL 0.005\n#define SPEED -4.\n#define WAVELEN 24.\n#define OPACITY .7\n#define VWLEN 8.\n#define VFLUT 0.02\n#define HFLUT 0.05\n\nvec4 flagCol(vec2 uv) {\n    if (uv.y > .3) return vec4(.1,.1,.1,1.);\n    if (uv.y > .2) return vec4(.4,.2,.1,1.);\n    if (uv.y > .1) return vec4(.9,.1,.1,1.);\n    if (uv.y > .0) return vec4(.9,.5,.1,1.);\n    if (uv.y > -.1) return vec4(.8,.7,.1,1.);\n    if (uv.y > -.2) return vec4(.1,.9,.1,1.);\n    if (uv.y > -.3) return vec4(.1,.4,.9,1.);\n    return vec4(.8,.1,.8,1.);\n  \t// return texture(iChannel0, uv * vec2(1.,-2.));  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    vec3 ray = normalize(vec3(uv, 1.));\n  \n    ray.zy = r(ray.zy,0.2);\n    ray.xz = r(ray.xz,1.2);\n    vec3 cam = vec3(-.5, .2, -.16);\n    \n    // the flag is at x = 0, y = -0.4..0.4; z = 0..1\n    \n    fragColor = vec4(0.,0.6,1.,1.);\n    \n    // fluttering\n    for (float i = MAXFLUT; i >= -MAXFLUT; i -= FLUTSTEP) {\n        vec2 flagUv = ray.zy / (ray.x / (cam.x - i)) - cam.zy;\n        if (flagUv.y < -.4 || flagUv.y > .4 || flagUv.x < 0. || flagUv.x > 1.)\n            continue;\n        float flut = sin(flagUv.x * WAVELEN + iTime * SPEED) * HFLUT * flagUv.x \n            + cos(flagUv.y * VWLEN) * VFLUT * flagUv.x;\n        if (flut > i + FLUTTOL || flut < i - FLUTTOL)\n            continue;\n        float dFlut = -cos(flagUv.x * WAVELEN + iTime * SPEED) * HFLUT * flagUv.x \n            + sin(flagUv.y * VWLEN) * VFLUT * flagUv.x;\n        fragColor = (dFlut * 26. + fragColor) * (1.-OPACITY) + OPACITY * \n            flagCol(flagUv);\n        //fragColor = flag(fragColor, ray, cam - vec3(i, 0., 0.));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}