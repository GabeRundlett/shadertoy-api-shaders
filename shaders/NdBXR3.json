{
    "Shader": {
        "info": {
            "date": "1620668034",
            "description": "test for removing noise from an image with low spp",
            "flags": 32,
            "hasliked": 0,
            "id": "NdBXR3",
            "likes": 15,
            "name": "denoiser test",
            "published": 3,
            "tags": [
                "globalillumination"
            ],
            "usePreview": 0,
            "username": "mdb",
            "viewed": 760
        },
        "renderpass": [
            {
                "code": "#define Kernel 8\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    float z = 0.0;\n    float k =  (iMouse.x == 0.0) ? 0.5 + 0.5*cos(iTime) : iMouse.x/iResolution.x;\n    if(uv.x > k){\n        vec4 n0 = texture(iChannel1, uv).xyzw;\n\n        //create the 1-D kernel\n        float sigma = 6.0;\n        float kernel[Kernel*2+1];\n        for (int j = 0; j <= Kernel; ++j)\n        {\n            kernel[Kernel+j] = kernel[Kernel-j] = normpdf(float(j), sigma);\n        }\n\n        for(int i = - Kernel; i <= Kernel; i++){\n        for(int j = - Kernel; j <= Kernel; j++){\n            vec4 n = texture(iChannel1, uv + vec2(i, j)/iResolution.xy);\n            if (dot(n.xyz*2.0-1.0, n0.xyz*2.0-1.0)>0.95 && abs(n0.w-n.w)<0.03){\n                col += kernel[Kernel+j]*kernel[Kernel+i]*texture(iChannel0, uv + vec2(i, j)/iResolution.xy).rgb;\n                z += kernel[Kernel+j]*kernel[Kernel+i];\n            }\n        }\n        }\n        col /= z;\n    \n    }else{\n        col =  texture(iChannel0, uv).rgb;\n    }\n    \n    //col *= 10.0;\n    col = 1.0-exp(-9.0*col); \n    col = pow(col, vec3(0.7));\n    \n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.8 );\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAXDEPTH 4\n#define PI 3.14159265359\n#define MAXSTEP 400\n#define MAXDIST 10.0\n#define MINDIST 0.001\nconst vec3 camPos = vec3(0.0, 0.3, -0.4);\n//const vec3 camPos = vec3(0.0, 0.7, -0.06); // up view\nconst vec3 target = vec3(0.0, 0.2, 0.0);\nstruct Mat{vec3 c, e;}; //color, emission\n\n// pseudo random numbers////////////////////////////////////////////////\nfloat seed = 0.0;\n\nvoid initSeed(vec2 uv){\n    seed = mod(fract(sin(uv.x*875.87+12.8+iTime)*776.978)*2378.0 + fract(sin(uv.y*594.87+57.75)*689.655)*8938.0\n            + fract(sin(iTime*798.43+89.24)*875.365)*5685.0 ,10000.0);\n}\nvoid next(){seed=mod(seed*348.12+77.0, 10000.0);}\nfloat random(){\n    next();\n    return seed/10000.0;\n}\n/////////////////////////////////////////////////////////////////////////\n\nfloat sdPerso(vec3 pos){\n    float d = 1e5;\n    vec3 p;\n    //stick\n    p = pos - vec3(0.0, 0.2, 0.0);\n    d = min(d, sdCylinder(p, vec2(0.01, 0.2))-0.003);\n    \n    p = pos-vec3(-0.05, 0.36, 0.0);\n    d = min(d, sdCappedTorus(p, vec2(0.866025,-0.5), 0.04, 0.01));\n    p = pos-vec3(-0.05, 0.36, 0.0);\n    d = min(d, sdSphere(p, 0.01));\n    p = pos-vec3(-0.11, 0.35, 0.0);\n    d = min(d, sdSphere(p, 0.01));\n    \n    float teta = 1.0;\n    p = mat3x3(cos(teta), 0.0, sin(teta),\n                  0.0   , 1.0,   0.0,\n              -sin(teta), 0.0, cos(teta))*(pos - vec3(-0.11, 0.25, 0.0));\n    d = min(d, sdBoundingBox(p, vec3(0.06, 0.08, 0.06), 0.005 )); \n    //body\n    \n    //d = min(d, sdCappedCone(pos, vec3(0.05, 0.16, 0.0), vec3(0.13, 0.03, 0.0), 0.05, 0.12));\n    p = pos;\n    p.z = abs(p.z);\n    d = min(d, sdCapsule(p, vec3(0.1, 0.0, 0.02), vec3(0.25, 0.1, 0.05), 0.04 ));\n    d = min(d, sdCapsule(p, vec3(0.25, 0.1, 0.05), vec3(0.31, 0.01, 0.03), 0.03 ));\n    d = min(d, sdCapsule(p, vec3(0.07, 0.15, 0.0), vec3(0.1, 0.0, 0.0), 0.04 ));\n    d = min(d, sdCapsule(p, vec3(0.06, 0.1, 0.08), vec3(0.06, 0.18, 0.08), 0.02 ));\n    //head\n    p = pos-vec3(0.07, 0.25, 0.0);\n    d = min(d, sdSphere(p, 0.05));\n    p -= vec3(0.0, 0.08, 0.0);\n    d = min(d, sdCone(p, vec2(0.1, 0.04), 0.05 ));  \n    \n    return d;\n}\n\n\nfloat DE(vec3 pos, out Mat obj){\n    float dist = 1e6;\n    float t;\n    \n    //working light\n    //t = sdSphere(pos - vec3(-2.0, 2.0, -2.0), 1.8);\n    //if (t<dist){dist = t; obj = Mat(vec3(1.0), vec3(1.0));}\n    \n    //ground\n    t = sdPlane(pos);\n    if (t<dist){dist = t; obj = Mat(vec3(0.1), vec3(0.0));}\n    \n    //backbround sphere\n    t = -sdSphere(pos, 3.0);\n    if (t<dist){dist = t; obj = Mat(vec3(0.0), vec3(0.0));}\n    \n    //perso\n    t = sdPerso(pos);\n    if (t<dist){dist = t; obj = Mat(vec3(0.1), vec3(0.0));}\n    \n    //lights\n    t = sdCapsule(pos, vec3(-0.11, 0.22, 0.0), vec3(-0.11, 0.28, 0.0), 0.05);\n    if (t<dist){dist = t; obj = Mat(vec3(0.8, 0.0, 0.0), vec3(40.0, 13.0, 13.0));}\n    vec3 p = pos - vec3(0.105, 0.25, -0.028);\n    p.z = abs(p.z);\n    t = sdSphere(p, 0.01);\n    if (t<dist){dist = t; obj = Mat(vec3(0.8, 0.0, 0.0), vec3(10.0));}\n    \n    return dist;\n}\n\nfloat intersect(vec3 ro, vec3 rd, out vec3 normal, out Mat obj){\n    normal = rd;\n    obj = Mat(vec3(0.9, 0.1, 0.1), vec3(0.0));\n    float t = 0.0;\n    for(int i = 0; i < MAXSTEP; i++){\n        vec3 p = ro + t * rd;\n        float delta = DE(p, obj);\n        t += delta;\n        if(t > MAXDIST)return -1.0;\n        if(abs(delta) < MINDIST){//end\n            float off=0.001;\n            Mat m;\n            normal = normalize(vec3(DE(p+vec3(off,0,0), m)-DE(p-vec3(off,0,0), m),\n                                    DE(p+vec3(0,off,0), m)-DE(p-vec3(0,off,0), m),\n                                    DE(p+vec3(0,0,off), m)-DE(p-vec3(0,0,off), m))); \n            break;\n        }\n        \n    }\n    return t;\n}\n\nvec3 newDir(vec3 n){\n    float teta = random()*2.0*PI;\n    float z = random()*2.0-1.0;\n    vec3 v = vec3(sqrt(1.0-z*z)*cos(teta), sqrt(1.0-z*z)*sin(teta), z); \n    if (dot(n, v)<0.0);\n        return -v;\n    return v;\n}\n\nvec3 march(vec3 ro, vec3 rd){\n\tvec3 col = vec3(0.0);\n\tvec3 mask = vec3(1.0);\n\tfor (int depth = 0; depth < MAXDEPTH; ++depth) {\n\t\tMat obj;\n        vec3 n;\n        float t = intersect(ro, rd, n, obj);\n        if(t<=0.0)break;\n        \n\t\tro = ro + t * rd + n * MINDIST * 3.0;\n\t\trd = newDir(n);\n        \n\t\tcol += mask * obj.e;\n\t\tmask *= obj.c;\n        \n        if (dot(mask, mask)<0.00001)break;\n\t\t\n\t}\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    initSeed(uv);\n    \n    vec3 dir0 = normalize(target-camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(up, dir0));\n    up = cross(dir0, right);\n    vec3 rd = normalize(dir0 + right*uv.x + up*uv.y);\n        \n    vec3 col = march(camPos, rd);\n    \n    \n    \n    vec3 last = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    float weight = 1.0/float(iFrame + 1);\n    col = col * weight + last * (1.0-weight);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// https://www.shadertoy.com/view/Xds3zN\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\nfloat sdBoundingBox( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// vertical\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x,-c.y)/c.y;\n    vec2 w = vec2( length(p.xz), p.y );\n    \n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\n//smouth min to blend material\nfloat smin( float a, float b, float k )\n{\n    if (k <=0.)return min(a,b);\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define PI 3.14159265359\n#define MAXSTEP 400\n#define MAXDIST 10.0\n#define MINDIST 0.001\nconst vec3 camPos = vec3(0.0, 0.3, -0.4);\n//const vec3 camPos = vec3(0.0, 0.7, -0.06); // up view\nconst vec3 target = vec3(0.0, 0.2, 0.0);\nstruct Mat{vec3 c, e;}; //color, emission\n\n// pseudo random numbers////////////////////////////////////////////////\nfloat seed = 0.0;\n\nvoid initSeed(vec2 uv){\n    seed = mod(fract(sin(uv.x*875.87+12.8+iTime)*776.978)*2378.0 + fract(sin(uv.y*594.87+57.75)*689.655)*8938.0\n            + fract(sin(iTime*798.43+89.24)*875.365)*5685.0 ,10000.0);\n}\nvoid next(){seed=mod(seed*348.12+77.0, 10000.0);}\nfloat random(){\n    next();\n    return seed/10000.0;\n}\n/////////////////////////////////////////////////////////////////////////\n\nfloat sdPerso(vec3 pos){\n    float d = 1e5;\n    vec3 p;\n    //stick\n    p = pos - vec3(0.0, 0.2, 0.0);\n    d = min(d, sdCylinder(p, vec2(0.01, 0.2))-0.003);\n    \n    p = pos-vec3(-0.05, 0.36, 0.0);\n    d = min(d, sdCappedTorus(p, vec2(0.866025,-0.5), 0.04, 0.01));\n    p = pos-vec3(-0.05, 0.36, 0.0);\n    d = min(d, sdSphere(p, 0.01));\n    p = pos-vec3(-0.11, 0.35, 0.0);\n    d = min(d, sdSphere(p, 0.01));\n    \n    float teta = 1.0;\n    p = mat3x3(cos(teta), 0.0, sin(teta),\n                  0.0   , 1.0,   0.0,\n              -sin(teta), 0.0, cos(teta))*(pos - vec3(-0.11, 0.25, 0.0));\n    d = min(d, sdBoundingBox(p, vec3(0.06, 0.08, 0.06), 0.005 )); \n    //body\n    \n    //d = min(d, sdCappedCone(pos, vec3(0.05, 0.16, 0.0), vec3(0.13, 0.03, 0.0), 0.05, 0.12));\n    p = pos;\n    p.z = abs(p.z);\n    d = min(d, sdCapsule(p, vec3(0.1, 0.0, 0.02), vec3(0.25, 0.1, 0.05), 0.04 ));\n    d = min(d, sdCapsule(p, vec3(0.25, 0.1, 0.05), vec3(0.31, 0.01, 0.03), 0.03 ));\n    d = min(d, sdCapsule(p, vec3(0.07, 0.15, 0.0), vec3(0.1, 0.0, 0.0), 0.04 ));\n    d = min(d, sdCapsule(p, vec3(0.06, 0.1, 0.08), vec3(0.06, 0.18, 0.08), 0.02 ));\n    //head\n    p = pos-vec3(0.07, 0.25, 0.0);\n    d = min(d, sdSphere(p, 0.05));\n    p -= vec3(0.0, 0.08, 0.0);\n    d = min(d, sdCone(p, vec2(0.1, 0.04), 0.05 ));  \n    \n    return d;\n}\n\n\nfloat DE(vec3 pos, out Mat obj){\n    float dist = 1e6;\n    float t;\n    \n    //working light\n    //t = sdSphere(pos - vec3(-2.0, 2.0, -2.0), 1.8);\n    //if (t<dist){dist = t; obj = Mat(vec3(1.0), vec3(1.0));}\n    \n    //ground\n    t = sdPlane(pos);\n    if (t<dist){dist = t; obj = Mat(vec3(0.1), vec3(0.0));}\n    \n    //backbround sphere\n    t = -sdSphere(pos, 3.0);\n    if (t<dist){dist = t; obj = Mat(vec3(0.0), vec3(0.0));}\n    \n    //perso\n    t = sdPerso(pos);\n    if (t<dist){dist = t; obj = Mat(vec3(0.1), vec3(0.0));}\n    \n    //lights\n    t = sdCapsule(pos, vec3(-0.11, 0.22, 0.0), vec3(-0.11, 0.28, 0.0), 0.05);\n    if (t<dist){dist = t; obj = Mat(vec3(0.8, 0.0, 0.0), vec3(40.0, 13.0, 13.0));}\n    vec3 p = pos - vec3(0.105, 0.25, -0.028);\n    p.z = abs(p.z);\n    t = sdSphere(p, 0.01);\n    if (t<dist){dist = t; obj = Mat(vec3(0.8, 0.0, 0.0), vec3(10.0));}\n    \n    return dist;\n}\n\nfloat intersect(vec3 ro, vec3 rd, out vec3 normal, out Mat obj){\n    normal = rd;\n    obj = Mat(vec3(0.9, 0.1, 0.1), vec3(0.0));\n    float t = 0.0;\n    for(int i = 0; i < MAXSTEP; i++){\n        vec3 p = ro + t * rd;\n        float delta = DE(p, obj);\n        t += delta;\n        if(t > MAXDIST)return -1.0;\n        if(abs(delta) < MINDIST){//end\n            float off=0.001;\n            Mat m;\n            normal = normalize(vec3(DE(p+vec3(off,0,0), m)-DE(p-vec3(off,0,0), m),\n                                    DE(p+vec3(0,off,0), m)-DE(p-vec3(0,off,0), m),\n                                    DE(p+vec3(0,0,off), m)-DE(p-vec3(0,0,off), m))); \n            break;\n        }\n        \n    }\n    return t;\n}\n\n\n\nvec4 march(vec3 ro, vec3 rd){\n    Mat obj;\n    vec3 n = vec3(0.0);\n    float t = intersect(ro, rd, n, obj);\n    if (dot(obj.e, obj.e)>0.000001) t = -1.0;\n\treturn vec4(n*0.5+0.5, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame > 2){\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n        return;\n    }\n    \n    \n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    initSeed(uv);\n    \n    vec3 dir0 = normalize(target-camPos);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(up, dir0));\n    up = cross(dir0, right);\n    vec3 rd = normalize(dir0 + right*uv.x + up*uv.y);\n        \n    vec4 col = march(camPos, rd);\n    \n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}