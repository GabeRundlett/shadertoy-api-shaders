{
    "Shader": {
        "info": {
            "date": "1525787908",
            "description": "Draw an X or an O with the mouse (you have 15 seconds to Draw Things), the network will then recognize which one. \n\nIf convergence is too slow, decrease NO_UPDATE_LIKELIHOOD.",
            "flags": 32,
            "hasliked": 0,
            "id": "MdtBRB",
            "likes": 6,
            "name": "Hopfield Network",
            "published": 3,
            "tags": [
                "neuralnetwork"
            ],
            "usePreview": 0,
            "username": "halcy",
            "viewed": 828
        },
        "renderpass": [
            {
                "code": "// Read a single pixel from the pattern buffer\nfloat getPatternPixel(int whichPattern, float coordX, float coordY) { \n    float coordStart = floor(float(whichPattern * WIDTH * HEIGHT));\n    float coordReal = floor(coordStart + coordY * float(WIDTH) + coordX);\n\n    float coordYReal = (floor(coordReal / iResolution.x) + 0.5) / iResolution.y;\n    float coordXReal = (floor(mod(coordReal, iResolution.x)) + 0.5) / iResolution.x;\n    \n    return(texture(iChannel1, vec2(coordXReal, coordYReal)).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int showPattern = 0;\n    \n\tvec2 uvOrig = (floor(fragCoord.xy) / iResolution.xy);\n    float coordY = floor(uvOrig.y * float(HEIGHT));\n    float coordX = floor(uvOrig.x * float(WIDTH));\n    \n    fragColor = vec4(0.1, 0.1, 0.1, 1.0); //vec4(getPatternPixel(showPattern, coordX, coordY));\n    if (getPatternPixel(showPattern, coordX, coordY) == -1.0) {\n\t\tfragColor = vec4(0.9, 0.9, 0.9, 1.0);\n    }\n    \n    if (getPatternPixel(showPattern, coordX, coordY) == 1.0) {\n\t\tfragColor = vec4(0.1, 0.1, 0.1, 1.0);\n    }\n\n    if(uvOrig.y > 0.98) {\n        if(uvOrig.x * 15.0 < mod(iTime, 20.0) && mod(iTime, 20.0) < 15.0) {\n    \t\tfragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }\n    }\n    //fragColor = vec4(getPatternPixel(showPattern, coordX, coordY));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Read a single pixel from the pattern buffer\nfloat getPatternPixel(int whichPattern, float coordX, float coordY) { \n    float coordStart = floor(float(whichPattern * WIDTH * HEIGHT));\n    float coordReal = floor(coordStart + coordY * float(WIDTH) + coordX);\n\n    float coordYReal = (floor(coordReal / iResolution.x) + 0.5) / iResolution.y;\n    float coordXReal = (floor(mod(coordReal, iResolution.x)) + 0.5) / iResolution.x;\n    \n    return(texture(iChannel1, vec2(coordXReal, coordYReal)).r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 outColor = vec4(0.0);\n    vec2 fcProper = vec2(int(fragCoord.x), int(fragCoord.y));\n    \n    // Update all four colour components with hebbian-rule weights\n    if(iTime < 0.5) {\n        for(int component = 0; component < 4; component++) {\n            int idx = int(fcProper.y * iResolution.x + fcProper.x) * 4 + component;\n            int thisNeuron = idx / (WIDTH * HEIGHT);\n            int incomingNeuron = idx % (WIDTH * HEIGHT);\n\n            int thisX = thisNeuron % WIDTH;\n            int thisY = thisNeuron / WIDTH;\n\n            int incX = incomingNeuron % WIDTH;\n            int incY = incomingNeuron / WIDTH;\n\n            float weight = 0.0;\n            for(int pattern = 1; pattern <= PATTERNS; pattern++) {\n                weight += getPatternPixel(pattern, float(thisX), float(thisY)) * \n                          getPatternPixel(pattern, float(incX), float(incY));\n            }\n            \n            // Cool Hack(tm): since this is a hopfield net, we can wire it to retrieve\n            // one pattern if another is specified (this will oscillate wildly)\n            /*weight += getPatternPixel(1, float(thisX), float(thisY)) * \n                      getPatternPixel(2, float(incX), float(incY));\n            weight += getPatternPixel(2, float(thisX), float(thisY)) * \n                      getPatternPixel(1, float(incX), float(incY));\n\t\t\t*/\n            \n            outColor[component] = (weight / float(PATTERNS)) * 0.1;\n        }\n\t\tfragColor = outColor;\n    }\n    else {\n        fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Read a single pixel from the pattern buffer\nfloat getPatternPixel(int whichPattern, float coordX, float coordY) { \n    float coordStart = floor(float(whichPattern * WIDTH * HEIGHT));\n    float coordReal = floor(coordStart + coordY * float(WIDTH) + coordX);\n\n    float coordYReal = (floor(coordReal / iResolution.x) + 0.5) / iResolution.y;\n    float coordXReal = (floor(mod(coordReal, iResolution.x)) + 0.5) / iResolution.x;\n    \n    return(texture(iChannel1, vec2(coordXReal, coordYReal)).r);\n}\n\n// Read weight for connection going from neuron incomingNeuron into thisNeuron\nfloat readWeight(int thisNeuron, int incomingNeuron) {\n    int idx = WEIGHT_IDX(thisNeuron, incomingNeuron);\n    \n    int component = idx % 4;\n    idx = idx / 4;\n    \n    int row = idx % int(iResolution.x);\n    idx = idx / int(iResolution.x);\n    \n    int col = idx;\n    \n\treturn texelFetch(iChannel0, ivec2(row, col), 0)[component];\n}\n\nvec3 hash33(vec3 p){ \n    float n = sin(dot(p, vec3(7, 157, 113)));    \n    return fract(vec3(2097152, 262144, 32768)*n); \n}\n\n// Generate patterns or, for pattern 0, evaluate.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int coord = int(int(fragCoord.y) * int(iResolution.x) + int(fragCoord.x));\n    \n    float pattern = float(coord / (WIDTH * HEIGHT));\n    coord = coord % (WIDTH * HEIGHT);\n    \n    float y = float(coord / WIDTH);\n    float x = float(coord % WIDTH);\n    \n    vec2 mouseCoords = (iMouse.xy / iResolution.xy) * vec2(WIDTH, HEIGHT);\n    \n    float outColor = 1.0;\n    vec2 coords = vec2(x - float(WIDTH / 2), y - float(HEIGHT / 2));\n    if(iTime < 1.5) {\n        // Pattern generation\n        if(int(pattern) == 1) {\n            if(abs(coords.x - coords.y) <= 1.0 || abs(coords.x + coords.y) <= 1.0) {\n                if(length(coords) < 15.0) {\n                    outColor = -1.0;\n                }\n            }\n        }\n\n        if(int(pattern) == 2) {\n            if(length(coords) < 10.0 && length(coords) > 7.5) {\n                outColor = -1.0;   \n            }\n        }\n        \n        if(int(pattern) == 3) {\n            if(length(coords) < 7.5 && length(coords) > 4.5) {\n                outColor = -1.0;   \n            }\n        }\n        \n        /*if(int(pattern) == 2) {\n            if(coords.x > -12.0 && coords.x < -9.0) {\n                if(coords.y > -12.0 && coords.y < 12.0) {\n                    outColor = -1.0;\n                }\n            }\n\n            if(coords.y > -12.0 && coords.y < -8.0) {\n                if(coords.x > -12.0 && coords.x < 12.0) {\n                    outColor = -1.0;\n                }\n            }\n        }*/\n    }\n    \n    // Net evaluation\n    if(int(pattern) == 0) {\n        // Init\n        if(mod(iTime, 20.0) < 0.5) {\n            // Try to compensate for biases a little. Might cause net to hit spurious patterns.\n            outColor = texture(iChannel2, vec2(x, y) / vec2(WIDTH, HEIGHT)).r > 0.65 ? -0.99 : 0.99;\n        }\n        else {\n         \toutColor = getPatternPixel(0, float(x), float(y));\n        }\n        // Allow draw\n        if(mod(iTime, 20.0) < 15.0) {\n            if(length(vec2(x, y) - mouseCoords) < 0.5) {\n                outColor = -1.0;\n            }\n        }\n        \n        // Evaluate\n        if(mod(iTime, 20.0) >= 15.0) {\n            float neuronUpdate = 0.0;\n            if(hash33(vec3(iTime, x, y)).r > NO_UPDATE_LIKELIHOOD) {\n                int thisNeuron = int(y) * WIDTH + int(x);\n                for(int incX = 0; incX < WIDTH; incX++) {\n                    for(int incY = 0; incY < HEIGHT; incY++) {\n                        int incomingNeuron = incY * WIDTH + incX;\n\n                        float netState = getPatternPixel(0, float(incX), float(incY));\n                        float incWeight = readWeight(thisNeuron, incomingNeuron);\n\n                        neuronUpdate += netState * incWeight;\n                    }\n                }\n\n                outColor = 1.0;\n                if(neuronUpdate < 0.0) {\n                    outColor = -1.0;\n                }\n            }\n            else {\n               outColor = getPatternPixel(0, float(x), float(y));\n            }\n               \n        }\n    }\n    \n    fragColor = vec4(outColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WIDTH 30\n#define HEIGHT 25\n#define WEIGHT_IDX(neuronTo, neuronFrom) ((neuronTo) * WIDTH * HEIGHT + (neuronFrom))\n#define NO_UPDATE_LIKELIHOOD 0.8\n#define PATTERNS 2\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}