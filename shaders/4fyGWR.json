{
    "Shader": {
        "info": {
            "date": "1712581189",
            "description": "This is a reimplementation of the unreal engine 1 software texture filtering.\nUse mouse to move around, pause the shader to stop the animation.\nHold left click to switch to nearest filtering.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fyGWR",
            "likes": 5,
            "name": "Unreal Engine 1 Texture Filter",
            "published": 3,
            "tags": [
                "2d",
                "texture",
                "filter"
            ],
            "usePreview": 1,
            "username": "peterekepeter",
            "viewed": 169
        },
        "renderpass": [
            {
                "code": "\n// The trick is to use nearest sampling but to offset the texel fetch using the screen space pixel.\n// This is still 1 texel fetch per pixel so it's next to 0 cost to do this even on a CPU\n// With GPU this is easily replimeneted in a GPU shader\n// For shadertoy I'm using texelFetch so that I bypass the default filtering\nvec3 textureWithUnreal1SoftwareFiltering(vec2 uv, vec2 fragCoord, bool bFilter)\n{\n    ivec2 pcoord = ivec2(fragCoord);\n    pcoord.x&=1;\n    pcoord.y&=1;\n   \n    vec2 offset=vec2(\n        pcoord.yx*ivec2(2,2)\n        +pcoord.xy*ivec2(1,-1)\n    )*0.25\n    + vec2(-0.125-0.25,-0.125);\n    \n    if (!bFilter) offset *= vec2(0);\n    \n    vec2 fcoord = mod(uv + offset, iChannelResolution[0].xy); \n    int lod = 0;\n    vec3 col = texelFetch(iChannel0, ivec2(fcoord), lod).xyz;\n    return col;\n}\n\nmat2 rotate(float a) { \n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n    uv.xy-=0.5;\n    uv.xy*=rotate(iTime*0.1);\n    uv = uv*(20.0+sin(iTime)*15.0)+iMouse.xy;\n    \n    bool bFilter = iMouse.z < 0.5; // disable on mouse click\n    \n    vec3 col = textureWithUnreal1SoftwareFiltering(uv, fragCoord, bFilter);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}