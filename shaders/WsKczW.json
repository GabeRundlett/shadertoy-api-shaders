{
    "Shader": {
        "info": {
            "date": "1602345628",
            "description": "http://paulbourke.net/geometry/toroidal/",
            "flags": 32,
            "hasliked": 0,
            "id": "WsKczW",
            "likes": 7,
            "name": "parametric_thingy_0",
            "published": 3,
            "tags": [
                "klein",
                "parametric"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nfloat\tline(vec2 p1, vec2 p2, vec2 p, float thickness);\nvoid\tr(inout vec2 p, float a);\n\n#define SHOW_LINES\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    vec2\tR = iResolution.xy;\n    vec2\tu = 1.*(f.xy-.5*R) / R.y;\n    \n    float md = 1e5;\n    for (float k = 0.; k <= NUM; k++)\n    for (float i = 0.; i <= NUM; i++)\n    {\n        vec2 coord = vec2(k-.5, i-.5) / R;\n        vec3 pos = texture(iChannel0, coord).xyz;\n    \tmd = min(md,\n                 length(u - pos.xy)-5./R.x\n                 );\n        // make 2 lines from each point drew, from point to his bottom and point to his right\n\t\t#ifdef SHOW_LINES\n\t\tmd = min(md, \n                 1.-line(pos.xy, \n                      texture(iChannel0, vec2(k-.5+1., i-.5)/R ).xy\n                      , u, 1./R.x)\n                 );\n        md = min(md, \n                 1.-line(pos.xy, \n                      texture(iChannel0, vec2(k-.5-0., i-.5+1.)/R ).xy\n                      , u, 1./R.x)\n                 );\n        #endif\n    }\n    //o.xyz = texture(iChannel0, .25*f.xy/R.xy-vec2(.0, .0)).xyz;\n    o.x = smoothstep(.03, -.01, md);\n    o = o.xxxx;\n//    o.xyz = vec3(step(md, .00001));//*step(-1.752500001, md);    \n}\n\nfloat line(vec2 p1, vec2 p2, vec2 p, float thickness)\n{\n\tp -= p1;\n\tvec2 lineVector = p2-p1;\n\t\t\n\tfloat angle = atan(lineVector.y,lineVector.x);\n\tr(p,angle);\n\t\n\tfloat dx = 0.0;\n\tif(p.x<0.0)\n\t\tdx = abs(p.x);\n\telse if(p.x>length(lineVector))\n\t\tdx = abs(p.x) - length(lineVector);\n\t\t\n\treturn ( thickness/(dx+abs(p.y)) );\n}\n\nvoid r(inout vec2 p, float a)\n{\n    p.xy = vec2(cos(a)*p.x+sin(a)*p.y, -sin(a)*p.x+cos(a)*p.y);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n/*\n* BUFFER A : Particle System\n* coord.x < NUM --> col = pos\n* coord.x > NUM --> col = vit\n*/\n\nvoid r(inout vec2 p, float a)\n{\n    p.xy = vec2(cos(a)*p.x+sin(a)*p.y, -sin(a)*p.x+cos(a)*p.y);\n}\n\nstruct\tparticle\n{\n    vec3\tpos;\n    vec3\tacc;\n    vec3\tvit;\n};\n\nvoid\tpos_klein(inout vec3 pos, vec2 ij)\n{\n    float u,v;\n    ij *= 6.28/NUM; // 2.*PI/NUM\n    u = ij.x;\n    v = ij.y;\n    float r = 4.*(1.-cos(u)*.5);\n    if (u >= .0 && u < 3.14)\n    \tpos.x = 6.*cos(u)*(1.+sin(u)) + r*cos(u)*cos(v);\n    else\n        pos.x = 6.*cos(u)*(1.+sin(u))+r*cos(v+3.14);\n    if (u >= .0 && u < 3.14)\n    \tpos.y = 16.*sin(u) + r*sin(u)*cos(v);\n    else\n        pos.y = 16.*sin(u);\n    pos.z = r*sin(v);\n    pos /= 42.;\n}\n\nvoid mainImage( out vec4 o, in vec2 f )\n{\n    o -= o;\n    particle parts;\n    vec4\ttexture_buff;\n    vec2\tR = iResolution.xy;\n    vec2\tmous = (iMouse.xy-.0*R/2.) / R.xy;\n    if (f.x > NUM*2.+1. || f.y > NUM+1.)\n        discard;\n        texture_buff = texture(iChannel0, f/R.xy ).xyzw;\n        parts.pos.xyz = texture_buff.xyz;\n    \tif (iChannelResolution[0].x < 1. || iFrame < 10 || R.x != texture_buff.w)\n\t        pos_klein(parts.pos.xyz, f);\n    r(parts.pos.xz, -iTimeDelta);\n    r(parts.pos.yz, +iTimeDelta*.125);\n    //        r(parts.pos.xz, 3.5*sin(1.57*1.+5.*((iMouse.x-R.x/2.)/R.x)));\n//        r(parts.pos.yz, 3.5*sin(1.57*3.5+5.*((iMouse.y-R.y/2.)/R.y)));\n\n//      texture_buff = texture(iChannel0, ((vec2(1.,1.)*f-0.+vec2(1.+1.0*NUM*1.+.0, .0))/R.xy) ).xyzw;\n//    \tparts.vit.xyz = texture_buff.xyz;\n//      parts.vit.xyz += parts.acc.xyz;\n//\t    parts.pos += parts.vit;\n    o.w = R.x;\n\t    \to.xyz += \n                \t(f.x+.5 <= NUM +1. ? 1. :.0)\n\t                *\n\t           \t\tparts.pos.xyz\n           \t\t;\n    /*\n\t\t\to.xyz += \n\t                (f.x+.5 > NUM +1. ? 1. :.0)\n\t                *\n\t\t            parts.vit.xyz\n\t            ;\n    */\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// Care, NUM = NUM*NUM\n#define NUM 15. // 225 points should be ok for most gpu I hope\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}