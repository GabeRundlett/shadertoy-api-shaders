{
    "Shader": {
        "info": {
            "date": "1552145443",
            "description": "A wild Galois jumps out of the tall grass Field\nBlue Noise uses Band Filter\nGalois hurt itself in confusion\n\nyou might want to pause time. holding left mouse removes all time-effects. it only loops [f] over numEl",
            "flags": 32,
            "hasliked": 0,
            "id": "3dfXDj",
            "likes": 3,
            "name": "fract ( galoisGrey - blueNoise )",
            "published": 3,
            "tags": [
                "modulo",
                "pattern",
                "bluenoise",
                "galois",
                "findwaldo"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "//this shader is mostly copied from \n//https://www.shadertoy.com/view/XsScD1\n//and i added +1 function that adds a blue noise overlay\n\n/*\nblue noise hides its (long frequency) pattern\ngalois is proud of all its patterns\nlets mix() them!\n\nno lets fract (a-b) them!\n\nIs this the silliest thing you can do in terms of fourier analysis?\nthis is the new the \"find waldo\" of galois fields!\n\nIt seems that the blueNoise texture nicely hides the galois patterns.\n\nI dont know what i expected.\nbluenoise dominates galoisPatterns, no matter how i put this.\nthis is the now the \"find waldo\" of galois fields!\n\ni was hoping that i could somehow turn a galoisField into BlueNoise.\nbut that maybe a null set to attempt to explore in another day.\n\n2022 addendum, costas-arrays are a great basis for blueNoise\n*/\n\n// MODE 1: Rainbow\n// MODE 2: Greyscale\n// MODE 3: Just the zeros of the equation\n#define RENDER_MODE 2\n\n// For a Galios field, this number must be a prime\n// (or prime power). This ensures that multiplicative\n// inverses exist for all non-zero elements\nconst float nef = 1./3.;\nconst int numEl = 128\n;const float numElf = float(numEl);\n\n// shoutouts to the amazing tool at\n//   http://dev.thi.ng/gradients/\n// for generating these color palettes\nvec3 color(float t){\n    vec3 a = vec3(0.500, 0.500, 0.500);\n    vec3 b = vec3(0.508, 0.508, 0.500);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(0.000, 0.333, 0.667);    \n    vec3 ret = a + b * cos(2.0 * 3.14159 * (c * t + d));\n    return clamp(ret,0., 1.);}\n\nfloat absCircular(float t){\n    float a = floor(t + 0.5);\n    return mod(abs(a - t), 1.0);}\n\nint m(int x){\tint n = x/numEl;    return x - n * numEl;}\n\nint func(int x, int y){\n    int a = 1+int(numElf * texture(iChannel0, vec2(0.5, 1.0/6.0 - 1.0/12.0)).x);\n    int b = 1+int(numElf * texture(iChannel0, vec2(0.5, 2.0/6.0 - 1.0/12.0)).x);\n    int c = 1+int(numElf * texture(iChannel0, vec2(0.5, 3.0/6.0 - 1.0/12.0)).x);\n    int d = 1+int(numElf * texture(iChannel0, vec2(0.5, 4.0/6.0 - 1.0/12.0)).x);\n    int e = 1+int(numElf * texture(iChannel0, vec2(0.5, 5.0/6.0 - 1.0/12.0)).x);\n    int f = 1+int(numElf * texture(iChannel0, vec2(0.5, 6.0/6.0 - 1.0/12.0)).x);\n  if(iMouse.z<=0.)f=iFrame%numEl\n    ;return m(a*x*x + b*x + c*x*y + d*y*y + e*y + f);}\n\n// This was going to be used to show the difference between the Gallios \n// field and the real-valued function of the same equation, but I couldn't\n// get it to look nice. If you want to take a crack at it, be my guest.\nfloat funcReal(float x, float y){\n    float a = numElf * texture(iChannel0, vec2(0.5, 1.0/6.0 - 1.0/12.0)).x;\n    float b = numElf * texture(iChannel0, vec2(0.5, 2.0/6.0 - 1.0/12.0)).x;\n    float c = numElf * texture(iChannel0, vec2(0.5, 3.0/6.0 - 1.0/12.0)).x;\n    float d = numElf * texture(iChannel0, vec2(0.5, 4.0/6.0 - 1.0/12.0)).x;\n    float e = numElf * texture(iChannel0, vec2(0.5, 5.0/6.0 - 1.0/12.0)).x;\n    float f = numElf * texture(iChannel0, vec2(0.5, 6.0/6.0 - 1.0/12.0)).x;\n    return 2.0* mod(a*x*x + b*x + c*x*y + d*y*y + e*y + f, numElf) /  \n            length( vec2( 2.0*a*x + b*y + d, 2.0*c*y + b*x + e ) );}\n\nvec3 drawFunction(vec2 p){   \n    vec3 final;    \n    int x = int(p.x * numElf);\n    int y = int(p.y * numElf);    \n    int f = func(x, y);\n    float diff = float(f) / numElf;\n    final = color(diff);    \n    if (RENDER_MODE == 2)   final = vec3(diff);\n    if (RENDER_MODE == 3){\n        final = vec3(0);\n        if (f == 0)       final = vec3(1,1,1);\n    }\n    return final;}\n\nvec3 drawSidebar(vec2 p){\n    p.x -= 1.0;\n    p.x *= iResolution.y / iResolution.x;\n    float t = texture(iChannel0,p).x;\n    vec3 final = vec3(0.85,0.85,0.85);\n    final = mix(color(1.0), final, pow(smoothstep(0.0, 0.004, absCircular(p.x - t)), 3.0));\n    final = mix(color(0.4), final, pow(smoothstep(0.0, 0.04, absCircular(p.y*6.0)), 3.0));\n    return final;}\n\n\nvec4 noiseblue(vec2 uv){\n\n          uv=uv/iResolution.xy/8.\n              ;\n    uv.x*=iResolution.x/iResolution.y;\n      //uv/=iResolution.xy\n ;\n    vec3 a=vec3(texture(iChannel1,uv));\n    return vec4(a,1.);  \n    ;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord\n){vec4 g=noiseblue(fragCoord);\n\tfloat frameWidth = iResolution.y / numElf;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec3 final = vec3(0,0,0);\n    \n  if (uv.x > 1.0){\n      g.xyz*=.5\n      ;final = drawSidebar(uv);}\n    else\n        final = drawFunction(uv);\n    \n  \n\tfragColor = vec4(final,1.0);\n \n  float i=cos(iTime)*.25+.5;\n  //i=sqrt(5.)*.5-.5;\n  i=1.;\n  \n //fragColor=fract(mix(vec4(g.x),fragColor,i));\n  \n  fragColor=fract(vec4(g.xxx*i,1.)-fragColor);\n  //fragColor=fract(fragColor-vec4(g.xyz,1.));\n;}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tfloat final = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    \n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 mouse = iMouse.xy / iResolution.y;\n    mouse.x -= 1.0;\n    mouse.x *= iResolution.y / iResolution.x;\n    \n    float sliderNumMouse = floor(mouse.y * 6.0);\n    float sliderNumUV = floor(uv.y * 6.0);\n    if (mouse.x >= 0.0 && sliderNumMouse == sliderNumUV)\n    {\n        final = mouse.x;\n    }\n    \n    final = clamp(final, 0.0, 1.0);\n    \n    fragColor = vec4(final);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}