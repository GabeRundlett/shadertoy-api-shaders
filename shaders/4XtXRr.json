{
    "Shader": {
        "info": {
            "date": "1718526846",
            "description": "sjjj",
            "flags": 0,
            "hasliked": 0,
            "id": "4XtXRr",
            "likes": 2,
            "name": "5aam stuff",
            "published": 3,
            "tags": [
                "filter"
            ],
            "usePreview": 0,
            "username": "antoinefortin",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "\nvec3 edgeDetection(vec2 uv) {\n    float kernelX[9];\n    float kernelY[9];\n    \n    kernelX[0] = -1.0; kernelX[1] = 0.0; kernelX[2] = 1.0;\n    kernelX[3] = -2.0; kernelX[4] = 0.0; kernelX[5] = 2.0;\n    kernelX[6] = -1.0; kernelX[7] = 0.0; kernelX[8] = 1.0;\n    \n    kernelY[0] = -1.0; kernelY[1] = -2.0; kernelY[2] = -1.0;\n    kernelY[3] =  0.0; kernelY[4] =  0.0; kernelY[5] =  0.0;\n    kernelY[6] =  1.0; kernelY[7] =  2.0; kernelY[8] =  1.0;\n    \n    vec2 texSize = vec2(textureSize(iChannel0, 0));\n    vec2 texel = 1.0 / texSize;\n\n    float gx = 0.0;\n    float gy = 0.0;\n    \n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 offset = vec2(float(i), float(j)) * texel;\n            vec3 color = texture(iChannel0, uv + offset).rgb;\n            float luminance = dot(color, vec3(0.299, 0.587, 0.114)); // Convert to grayscale\n            gx += kernelX[(i+1)*3 + (j+1)] * luminance;\n            gy += kernelY[(i+1)*3 + (j+1)] * luminance;\n        }\n    }\n    \n    float edgeStrength = sqrt(gx * gx + gy * gy);\n    vec3 normal = vec3(gx, gy, edgeStrength);\n    if (edgeStrength != 0.0) {\n        normal = normalize(normal);\n    }\n    return vec3(edgeStrength, normal.xy);\n}\n\n\nfloat calculateDepth(vec2 uv) {\n    vec3 color = texture(iChannel0, uv).rgb;\n    return dot(color, vec3(0.299, 0.587, 0.214)); // Convert to grayscale\n}\n\n// Parallax mapping function\nvec2 parallaxMapping(vec2 texCoords, vec3 viewDir, float heightScale) {\n    float depth = calculateDepth(texCoords);\n    vec2 p = viewDir.xy * (depth * heightScale) / viewDir.z;\n    return texCoords - p;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Mouse interaction for parallax effect\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.0 - 1.0; // Transform to range [-1, 1]\n    mouse.y = -mouse.y; // Invert y-axis for correct orientation\n\n    // View direction based on mouse position\n    vec3 viewDir = normalize(vec3(mouse, 2.0));\n\n    // Parallax mapping to animate the result\n    float heightScale = 0.05; // Adjust the height scale as needed\n    vec2 parallaxUV = parallaxMapping(uv, viewDir, heightScale);\n\n    // Sample the original texture with parallax UV\n    vec3 originalColor = texture(iChannel0, parallaxUV).rgb;\n\n    // Calculate edge strength and normals with parallax UV\n    vec3 edgeData = edgeDetection(parallaxUV);\n    float edge = edgeData.x;\n    vec2 edgeNormal = edgeData.yz;\n    vec3 lightDir = normalize(vec3(15.0, 2.0, 1.0)); // Light direction\n    vec3 lightColor = vec3(0.2, .14848, 0.12321); // Light color\n    float diff = max(dot(vec3(edgeNormal, 1.0), lightDir), 0.0);\n\n    // Combine the original image with the edge detection result and lighting\n    vec3 edgeColor = vec3(edge* diff * lightColor);\n    vec3 combinedColor = mix(originalColor, edgeColor, edge);\n\n    // Output the final color\n    fragColor = vec4(combinedColor, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}