{
    "Shader": {
        "info": {
            "date": "1592804437",
            "description": "reading the blue noise texture as 4*1024 independent lines ( + cycling), plot the probability of value x knowing that the previous value was y.\nNB: result looks similar in R,G,B,A so I average. result also look similar columnwise.\nNot cycling: same result",
            "flags": 32,
            "hasliked": 0,
            "id": "Wllyzl",
            "likes": 3,
            "name": "joint probability in bluenoise",
            "published": 3,
            "tags": [
                "bluenoise",
                "histogram",
                "probability"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 O, in vec2 U) {\n    float t = texelFetch(iChannel0,ivec2(270),0).w;   // number or computed lines\n    U /= max(1.,floor(iResolution.y/256.));           // pixel-friendly zoom\n              \n    O = 25.* texelFetch(iChannel0,ivec2(U),0) / min(MAX,t); //  25 = 32-stddev\n    //O = step(vec4(1),O); return;         // check overflow ( to find the gain above )\n    O = vec4(O.r+O.g+O.b+O.a)/4.;          // average 4 channels\n  //O = pow(O, vec4(1./2.2));              // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(x,y) ivec4(round(255.*texelFetch(iChannel1, dir ? ivec2(x,y) : ivec2(y,x) ,0)))\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( textureSize(iChannel1,1).x <2 ) {          // wait for texture load\n        if (U.y > 280.) O = vec4(int(U.x)<iFrame);  // waiting scroll \n        return;                           \n    }\n    ivec2 I = ivec2(U);\n    O = texelFetch(iChannel0,I,0);                  // previous state\n    if ( I==ivec2(270) ) O.w++;                     // frame counter\n    if (max(U.x,U.y) > 256.) return;                // only use 256x256 grid\n    float y = texelFetch(iChannel0,ivec2(270),0).w; // current treated line\n    if (y>=MAX) return;                             // scan finished.\n\n    bool dir = y<1024.;                             // if stats on lines then columns\n    ivec4 P,V = T(1023,y);\n    for (int x=0; x<1024; x++) {\n        P = V; \n     // P = T((x+OFS)%1024,y);\n        V = T(x,y);                                 // prev and cur values ( x4 channels )\n        for (int i=0; i < 4; i++ )\n            if ( I == ivec2(V[i],P[i]) ) O[i]++;    // add to joint histogramm\n   }      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "  #define MAX 1024.   // stats only on lines\n//#define MAX 2048.   // stats on lines + columns\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}