{
    "Shader": {
        "info": {
            "date": "1451957821",
            "description": "A 2D Discrete Fourier Transform (DFT) effect using the new multipass feature to split the calculation into two 1D horizonal and vertical DFTs. ",
            "flags": 32,
            "hasliked": 0,
            "id": "MscGWS",
            "likes": 43,
            "name": "Multipass 2D DFT",
            "published": 3,
            "tags": [
                "fft",
                "spectrum",
                "frequency",
                "fourier",
                "dft",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 2867
        },
        "renderpass": [
            {
                "code": "//Size must be changed in each tab.\n#define SIZE 256.0\n\n//Display modes\n#define MAGNITUDE 0\n#define PHASE 1\n#define COMPONENT 2\n\n#define DISPLAY_MODE MAGNITUDE\n\n//Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\nvec3 rainbow(float x)\n{\n    vec3 col = vec3(0);\n    col.r = cos(x * tau - (0.0/3.0)*tau);\n    col.g = cos(x * tau - (1.0/3.0)*tau);\n    col.b = cos(x * tau - (2.0/3.0)*tau);\n    \n    return col * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = fragCoord - iResolution.xy/2.0 + (vec2(2,1)*SIZE)/2.0;\n    \n\tvec2 uv = fract(pixel / SIZE);\n    \n    vec2 tile = floor(pixel / SIZE);\n    \n    vec3 color = vec3(0.1);\n    \n    //Input effect (Left)\n    if(tile == vec2(0,0))\n    {\n        vec2 dft_in = texture(iChannel0, uv * (SIZE / iResolution.xy)).rg;\n        \n        color = vec3(length(dft_in));\n    }\n    \n    //2D DFT of input (Right)\n    if(tile == vec2(1,0))\n    {\n        vec2 dft_out = texture(iChannel1, uv * (SIZE / iResolution.xy)).rg;\n        \n        #if DISPLAY_MODE == MAGNITUDE\n        \t#if MAG_SCALE == LOG\n        \t\tcolor = vec3(log(length(dft_out)) / log(SIZE*SIZE));\n        \t#elif MAG_SCALE == LINEAR\n        \t\tcolor = vec3(length(dft_out) / SIZE);\n        \t#endif\n        #elif DISPLAY_MODE == PHASE\n        \tcolor = vec3(rainbow(atan(dft_out.y,dft_out.x) / pi + 0.5));        \n        #elif DISPLAY_MODE == COMPONENT      \n        \tcolor = vec3((dft_out / SIZE) * 0.5 + 0.5, 0.0);        \n        #endif\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//DFT input effect.\n//fragColor.x = Real part\n//fragColor.y = Imaginary part (usually 0 for input)\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nfloat sinc(float x)\n{\n    return (x == 0.0) ? 1.0 : sin(x)/x;\n}\n\nfloat average(vec3 v)\n{\n\treturn dot(v, vec3(1.0)) / 3.0;   \n}\n\nmat2 rotate(float a)\n{\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord / SIZE;\n    \n    vec2 comp = vec2(0.0);\n    \n    comp.x = average(texture(iChannel0,uv).rgb);\n    \n    fragColor = vec4(comp,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Horizontal DFT of the input.\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord;\n    \n    float w = uv.x - SIZE/2.0;\n    \n    vec2 xw = vec2(0);\n    \n    for(float n = 0.0;n < SIZE;n++)\n    {\n        float a = -(tau * w * n) / SIZE;\n        \n        vec2 xn = textureLod(iChannel0, vec2(n, uv.y) / iResolution.xy, 0.0).xy;\n        \n        xw += cmul(xn, polar(1.0, a));\n    }\n    \n    fragColor = vec4(xw,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Vertical DFT of horizontal DFT (final 2D dft).\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord;\n    \n    float w = uv.y - SIZE/2.0;\n    \n    vec2 xw = vec2(0);\n    \n    for(float n = 0.0;n < SIZE;n++)\n    {\n        float a = -(tau * w * n) / SIZE;\n        \n        vec2 xn = textureLod(iChannel0, vec2(uv.x, n) / iResolution.xy, 0.0).xy;\n        \n        xw += cmul(xn, polar(1.0, a));\n    }\n    \n    fragColor = vec4(xw,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}