{
    "Shader": {
        "info": {
            "date": "1727887722",
            "description": "This shader tests the behaviour of function overloading in GLSL.",
            "flags": 0,
            "hasliked": 0,
            "id": "43jcWd",
            "likes": 0,
            "name": "Function overloading test",
            "published": 3,
            "tags": [
                "test",
                "glsl",
                "overloading"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 25
        },
        "renderpass": [
            {
                "code": "//\n// This shader tests the behaviour of function overloading,\n// by confirming it is valid code that compiles, and behaves\n// as expected.\n// This aspect of the language can be used for minification.\n//\n// Each function returns a different number.\n// All the functions are evaluated based on the horizontal\n// coordinate, and a vertical red stripe will indicate if\n// the function called is not the correct one (its returned\n// value is different from the expected one).\n// \n// --\n// Zavie\n\nstruct S { float f; };\n\n\nint n(float a)\n{\n    return 0 + int(1e-6 * a);\n}\n\nint n(float a, float b)\n{\n    return 1 + int(1e-6 * a * b);\n}\n\nint n(float a, float b, float c)\n{\n    return 2 + int(1e-6 * a * b);\n}\n\nint n(S s, vec3 b, vec3 c, vec3 d, vec3 e, vec3 f, float g)\n{\n    return 3 + int(1e-6 * s.f * length(b) * length(c) * length(d) * length(e) * length(f) * g);\n}\n\nint n(vec2 a)\n{\n    return 4 + int(1e-6 * length(a));\n}\n\nint n(vec2 a, int b, float c, float d)\n{\n    return 5 + int(1e-6 * length(a) * float(b) * c * d);\n}\n\nint n(vec2 a, vec2 b)\n{\n    return 6 + int(1e-6 * length(a) * length(b));\n}\n\nint n(vec2 a, vec2 b, float c)\n{\n    return 7 + int(1e-6 * length(a) * length(b) * c);\n}\n\nint n(vec2 a, vec2 b, vec2 c)\n{\n    return 8 + int(1e-6 * length(a) * length(b) * length(c));\n}\n\nint n(vec2 a, vec2 b, vec2 c, float d)\n{\n    return 9 + int(1e-6 * length(a) * length(b) * length(c) * d);\n}\n\nint n(vec2 a, vec2 b, vec2 c, vec2 d)\n{\n    return 10 + int(1e-6 * length(a) * length(b) * length(c) * length(d));\n}\n\nint n(vec2 a, vec3 b, vec3 c, vec3 d, vec3 e)\n{\n    return 11 + int(1e-6 * length(a) * length(b) * length(c) * length(d) * length(e));\n}\n\nint n(vec2 a, vec4 b)\n{\n    return 12 + int(1e-6 * length(a) * length(b));\n}\n\nint n(vec3 a)\n{\n    return 13 + int(1e-6 * length(a));\n}\n\nint n(vec3 a, float b, float c)\n{\n    return 14 + int(1e-6 * length(a) * b * c);\n}\n\nint n(vec3 a, float b, vec3 c, float d, float e, float f)\n{\n    return 15 + int(1e-6 * length(a) * b * length(c) * d * e * f);\n}\n\nint n(vec3 a, vec2 b)\n{\n    return 16 + int(1e-6 * length(a) * length(b));\n}\n\nint n(vec3 a, vec3 b)\n{\n    return 17 + int(1e-6 * length(a) * length(b));\n}\n\nint n(vec3 a, vec3 b, float c)\n{\n    return 18 + int(1e-6 * length(a) * length(b) * c);\n}\n\nint n(vec3 a, vec3 b, vec3 c, float d)\n{\n    return 19 + int(1e-6 * length(a) * length(b) * length(c) * d);\n}\n\n\nvec3 check(int expected, int value)\n{\n    return value == expected ? vec3(0.5, 1., 0.5) : vec3(1., 0., 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int i = int(floor(uv.x * 20.));\n    float f = 1.;\n    vec2 v2 = vec2(1.);\n    vec3 v3 = vec3(1.);\n    vec4 v4 = vec4(1.);\n    S s = S(1.);\n\n    vec3 color = vec3(0.5);\n    if (i == 0)\n        color = check(i, n(f));\n    if (i == 1)\n        color = check(i, n(f, f));\n    if (i == 2)\n        color = check(i, n(f, f, f));\n    if (i == 3)\n        color = check(i, n(s, v3, v3, v3, v3, v3, f));\n    if (i == 4)\n        color = check(i, n(v2));\n    if (i == 5)\n        color = check(i, n(v2, i, f, f));\n    if (i == 6)\n        color = check(i, n(v2, v2));\n    if (i == 7)\n        color = check(i, n(v2, v2, f));\n    if (i == 8)\n        color = check(i, n(v2, v2, v2));\n    if (i == 9)\n        color = check(i, n(v2, v2, v2, f));\n    if (i == 10)\n        color = check(i, n(v2, v2, v2, v2));\n    if (i == 11)\n        color = check(i, n(v2, v3, v3, v3, v3));\n    if (i == 12)\n        color = check(i, n(v2, v4));\n    if (i == 13)\n        color = check(i, n(v3));\n    if (i == 14)\n        color = check(i, n(v3, f, f));\n    if (i == 15)\n        color = check(i, n(v3, f, v3, f, f, f));\n    if (i == 16)\n        color = check(i, n(v3, v2));\n    if (i == 17)\n        color = check(i, n(v3, v3));\n    if (i == 18)\n        color = check(i, n(v3, v3, f));\n    if (i == 19)\n        color = check(i, n(v3, v3, v3, f));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}