{
    "Shader": {
        "info": {
            "date": "1719933648",
            "description": "Found out how to use buffers. Shitty first game. It is possible, just hard! New: Added win screen :)\n\nCONTROLS:\nClick & drag your mouse inside the green box. Let go while still dragging to throw.",
            "flags": 48,
            "hasliked": 0,
            "id": "XXGSWW",
            "likes": 10,
            "name": "Hoop game (impossible edition)",
            "published": 3,
            "tags": [
                "game",
                "simulation",
                "fun",
                "physics",
                "challenge"
            ],
            "usePreview": 1,
            "username": "Falafel",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "#define C(c) U.x-=.5; fragColor += vec4(0., char(U,64+c).x, 0., 1.)\n\n// text: stolen from here: https://www.shadertoy.com/view/4sBfRd\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel1, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = fragCoord/iResolution.x;\n    \n    fragColor = vec4(uv.x, uv.y, uv.x, uv.y) / 4.;\n    \n    // ball variable\n    vec2 loc = texture(iChannel0, vec2(0.)).xy;\n    \n    // win screen\n    if (texture(iChannel0, vec2(.1)).x > 200.) {\n        fragColor += vec4(uv.y, uv.x * 2.0, uv.x - uv.y, 1.) * .3;\n        //text \"throw the ball from here\"\n        vec2 position = vec2(.35, .4);\n        float FontSize = 5.;\n        vec2 U = ( uv - position)*64.0/FontSize;\n        C(25);C(15);C(21);C(-32);U.y+=1.;U.x+=2.45;C(23);C(15);C(14);C(-31);C(-35);\n        \n    } else {\n        //text \"you won!\"\n        vec2 position = vec2(.75, .4);\n        float FontSize = 3.;\n        vec2 U = ( uv - position)*64.0/FontSize;\n        C(20);C(8);C(18);C(15);C(23);C(-32);U.y+=1.;U.x+=3.;C(20);C(8);C(5);C(-32);C(2);C(1);C(12);C(12);C(-32);U.y+=1.;U.x+=4.5;C(6);C(18);C(15);C(13);C(-32);C(8);C(5);C(18);C(5);\n    }\n    \n    // green lines\n    if ((uv.x > 0.8 && uv.x < 0.802 && uv.y < .3) || (uv.x > 0.8 && uv.y > 0.3 && uv.y < 0.302)) {\n        fragColor = vec4(0., 1., 0., 1.);\n    }\n    // green box\n    if (uv.x > 0.8 && uv.y < 0.3) {\n        fragColor += vec4(0.01, 0.1, 0.01, 0.);\n    }\n    \n    // red hoop lines\n    if ((uv.x < 0.1 && uv.x > 0.098 && uv.y > 0.2 && uv.y < 0.3) || \n        (uv.x < 0.2 && uv.x > 0.198 && uv.y > 0.2 && uv.y < 0.3) || \n        (uv.y > 0.2 && uv.y < 0.202) && uv.x < 0.2 && uv.x > 0.1) {\n        fragColor = vec4(1., 0., 0., 1.);\n    }\n    // red hoop box\n    if (uv.x > 0.1 && uv.x < 0.2 && uv.y > 0.2 && uv.y < 0.3) {\n        fragColor += vec4(0.1, 0.01, 0.01, 0.);\n    }\n    \n    // ball trail\n    fragColor += texture(iChannel2, uv);\n    \n    // ball\n    fragColor += 0.01 * (1. / distance(loc, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// reset with r\n#define RESET_KEY 82\n\n// tolerance function - otherwise buffer variables don't work\nbool tol(vec2 a, vec2 b)\n{\n    vec2 c = vec2(.05);\n    if (a.x - b.x < c.x && a.x - b.x > -c.x){\n        if (a.y - b.y < c.y && a.y - b.y > -c.y){\n            return true;\n        }\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.x;\n    \n    fragColor = vec4(0.);\n    \n    \n    if (tol(uv, vec2(.1))) {\n        fragColor.x = texture(iChannel0, vec2(.1)).x;\n        if (fragColor.x > 99.) {\n            fragColor.x += 1.;\n            return;\n        }\n    }\n\n    // ball variable and code\n    // ball speed\n    fragColor.zw = texture(iChannel0, vec2(0.)).zw + vec2(0., -0.0006);\n    // ball position\n    fragColor.xy = texture(iChannel0, vec2(0.)).xy + fragColor.zw;\n\n    // hold/throw the ball\n    if (iMouse.z > .0 && iMouse.x / iResolution.x > 0.8 && iMouse.y / iResolution.x < 0.3) {\n        fragColor.xy = iMouse.xy / iResolution.x;\n        fragColor.zw = iMouse.xy / iResolution.x - (texture(iChannel0, vec2(.0)).xy);\n    }\n\n    // walls\n\n    if (fragColor.y < 0.0) {\n        fragColor.y = 0.0001;\n        fragColor.w = -fragColor.w * .8;\n        fragColor.z = fragColor.z * .8;\n    }\n    else if (fragColor.y > .58) {\n        fragColor.y = 0.5799;\n        fragColor.w = -fragColor.w * .8;\n    }\n    else if (fragColor.x < 0.0) {\n        fragColor.x = 0.0001;\n        fragColor.z = -fragColor.z * .8;\n    }\n    else if (fragColor.x > 1.0) {\n        fragColor.x = 0.9999;\n        fragColor.z = -fragColor.z * .8;\n    }\n    // hoop\n    if (fragColor.x < 0.12 && fragColor.x > 0.08 && fragColor.y > 0.19 && fragColor.y < 0.31) {\n        fragColor.z = -fragColor.z * .8;\n        fragColor.x = 0.1 + (fragColor.z > .0 ? 0.02 : -0.02);\n    }\n    else if (fragColor.x < 0.22 && fragColor.x > 0.18 && fragColor.y > 0.19 && fragColor.y < 0.31) {\n        fragColor.z = -fragColor.z * .8;\n        fragColor.x = 0.2 + (fragColor.z > .0 ? 0.02 : -0.02);\n    }\n    if (fragColor.y > 0.18 && fragColor.y < 0.22 && fragColor.x < 0.21 && fragColor.x > 0.09) {\n        fragColor.w = -fragColor.w * .925; // change to 0.8 to make much easier\n        fragColor.y = 0.2 + (fragColor.w > .0 ? 0.02 : -0.02);\n    }\n    \n    // win\n    if (fragColor.x > 0.13 && fragColor.x < 0.18 && fragColor.y > 0.2 && fragColor.y < 0.24 && fragColor.w < 0.005 && fragColor.w > -0.005) {\n        if (tol(uv, vec2(.1))) {\n            fragColor.x = 100.;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 ballpos = texture(iChannel0, vec2(.0)).xy;\n    \n    fragColor = texture(iChannel1, uv);\n    \n    if (iMouse.z > 0.) {\n        fragColor = vec4(0.);\n    }\n    \n    // Saves the ball position into each pixel it's been.\n    fragColor += vec4(max(0.000015 * (1. / pow((distance(ballpos, uv) + .15), 5.)) - .1, 0.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}