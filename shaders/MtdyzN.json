{
    "Shader": {
        "info": {
            "date": "1531887684",
            "description": "Having fun messing around with the coordinate space.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtdyzN",
            "likes": 5,
            "name": "Reflections of Sin",
            "published": 3,
            "tags": [
                "blackandwhite"
            ],
            "usePreview": 0,
            "username": "momoro",
            "viewed": 512
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec3 rect(vec2 st) {\n    vec2 f = max(abs(st) - .1, 0.);\n\tfloat c = length(f);\n\tc = smoothstep(.1, .3, c);\n    \n    return vec3(1. - c);\n}\n\n\nmat2 rotate2d(float _angle) {\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nmat2 scale(vec2 _scale) {\n    return mat2(_scale.x, 0.1,\n                0.0, _scale.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 st = fragCoord/iResolution.y; // thanks FabriceNeyret2\n\t\n    st.x -= .1;\n    st.xy /=1.6;\n    \n    vec2 uv = st;\n    \n    vec3 color = vec3(0.);\n    \n    float f = 0.;\n\n    st -= vec2(.5);\n\tuv=  rotate2d(2. * length(uv)) * st ;\n\n    st = rotate2d(3. *sin(iTime/20.) * length(st)) * st;\n    \n    uv = uv / 1.3;\n    st.x *= tan(length(st)) + -1.552 * cos(st.x*5.);\n    st.y = tan(uv.y + cos(iTime/1.5) /10.) + .2;\n    st.y -= tan(length(uv));\n    st.y -= cos(uv.y + iTime)/2.;\n    //st.y -= cos(uv.y + iTime)/2.+.5 * tan((200. * sin(iTime) + 8000.)/(10.*sin(iTime)+170.) * uv.y) / 15.;\n    st.y -= cos(uv.y + iTime)/2.+.5 * clamp(tan((200. * sin(iTime) + 8000.)/(10.*sin(iTime)+170.) * uv.y) / 15., -5., .5); // thanks davidar\n\n    st.y /= tan(iTime/4. );\n    \n\n\n    \n    color += rect(rotate2d(iTime/2.) * scale(vec2(1.5)) * st);\n\t//color += vec3(uv.x, 0., 0);\n\n    color -= rect(rotate2d(-iTime/3.) * scale(vec2(3.))* st);\n  \t//color *= mix(vec3(0.945,0.080,0.017), vec3(0.925,0.840,0.910), (rotate2d(u_time*2.) * uv).y);\n\n    \n\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}