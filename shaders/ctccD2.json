{
    "Shader": {
        "info": {
            "date": "1699636906",
            "description": "gyroid with reflects\nmouse controls camera",
            "flags": 0,
            "hasliked": 0,
            "id": "ctccD2",
            "likes": 32,
            "name": "gyroid 3",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/4stfRX\n\nfloat i;                                                      // face id\n\nfloat G( vec3 q ) {\n    vec3 a = abs(q); \n    return max( abs( i = dot(sin(q),cos(q.yzx)) ),            // gyroid.  Is thickness -.1 or -.3 better ?\n                max(a.x,max(a.y,a.z)) -6. );                  // clamped to cube\n}\n\n#define R(a) mat2( sin( a + vec4(0,33,11,0)) )                // rotation\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    vec3  q = iResolution, e = vec3(1e-3,0,0), N,\n          D = vec3(.3*(U+U-q.xy)/q.y, -1),                    // ray direction\n          C = iMouse.z > 0. ? 8.*iMouse.xyz/q -4.             // camera control\n                          : 3.* cos(.3*iTime + vec3(0,11,0)), // demo mode\n         p = 30./q;                                           // marching point along ray \n    p.xz *= R(C.x), p.yz *= R(C.y),                           // rotation\n    D.xz *= R(C.x), D.yz *= R(C.y);\n    O *= 0.; \n    float d = 1.;\n    for ( O++; O.x > 0. && d > .01 ; O-=.015 )\n        q = p,\n        d = G(q),\n        p += .5*d*D;                                          // step forward = dist to obj\n    \n    O *= i>0. ? vec4(1,.9,.9,1) : vec4(.9,.9,1,1);            // face coloring\n     \n    N = vec3( G(q+e), G(q+e.yxy), G(q+e.yyx) ) - d ;          // normal\n    O.x < 0. ? O = .5*texture(iChannel0, D) :                 // uncomment to display environment \n    O *= length( texture(iChannel0, reflect(D,N/length(N) ) ).rgb ); // reflect of environment map\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}