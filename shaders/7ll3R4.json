{
    "Shader": {
        "info": {
            "date": "1621679924",
            "description": "originally made for shadow party 2021 live shader coding",
            "flags": 32,
            "hasliked": 0,
            "id": "7ll3R4",
            "likes": 14,
            "name": "KIF screensaver",
            "published": 3,
            "tags": [
                "kif"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 589
        },
        "renderpass": [
            {
                "code": "// KIF screensaver\n// originally made for shadow party 2021 live shader coding\n//\n// by Leon Denise 2021.05.19\n// \n// thanks to Inigo Quilez, Dave Hoskins, Koltes, NuSan\n// for sharing useful lines of code\n//\n// Licensed under hippie love conspiracy\n\nvoid mainImage( out vec4 color, in vec2 position )\n{\n    // display the result of buffer A tab\n    color = texture(iChannel0, position/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// KIF screensaver\n// originally made for shadow party 2021 live shader coding\n//\n// by Leon Denise 2021.05.19\n// \n// thanks to Inigo Quilez, Dave Hoskins, Koltes, NuSan\n// for sharing useful lines of code\n//\n// Licensed under hippie love conspiracy\n\n#define time iTime\n\nfloat dither;\nfloat material;\n\n// rng function\nfloat hash (vec2 seed)\n{\n    return fract(sin(dot(seed*.1684,vec2(54.649,321.547)))*450315.);\n}\n\n// rotation matrix\nmat2 rot (float a)\n{\n    float c=cos(a), s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat map(vec3 p)\n{\n    float dist = 1000.;\n    float shape = 1000.;\n\n    float r = 1.5; // distance from center\n    float s = 0.1; // geometry radius\n    float f = 1.8; // falloff after each iteration\n    float h = 0.4; // geometry height\n    float a = 1.0; // amplitude\n    float t = time*0.5+dither*0.05+p.x*.2;\n    \n    // kaleidoscopic iterated function system\n    const int count = 6;\n    for (int index = count; index > 0; --index)\n    {\n        // rotations\n        p.xy *= rot(0.1*t/a);\n        p.xz *= rot(sin(t/a)+t);\n        p.yz *= rot(t+sin(t*4.));\n        \n        // mirror\n        p.z = abs(p.z)-r*a;\n        \n        // cylinder shape\n        shape = max(length(p.xz)-s*a, abs(p.y)-h*a);\n        \n        // material management (inspired by evvvvil)\n        material = shape < dist ? float(index) : material;\n        \n        // shape union\n        dist = min(shape, dist);\n        \n        // falloff amplitude\n        a /= f;\n    }\n    \n    // sphere bump\n    float spawn = pow(sin(fract(time)*3.14), 10.);\n    dist = min(dist, length(p)-.05*spawn);\n\n    return dist;\n}\n\nvoid mainImage( out vec4 color, in vec2 pixel )\n{\n    // init color\n    color = vec4(0);\n    \n    // coordinates\n    vec2 uv = (pixel.xy-0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = vec3(0,0,-6);\n    vec3 ray = normalize(vec3(uv, 1.));\n    vec3 pos = eye;\n    \n    // random\n    dither = hash(uv+fract((time)));\n\n    // raymarch loop\n    const int steps = 20;\n    for (int index = steps; index > 0; --index)\n    {\n        // distance estimation\n        float dist = map(pos);\n        if (dist < 0.01)\n        {\n            // shadow from iteration steps\n            float shade = float(index)/float(steps);\n            \n            // rainbow palette from iq (https://iquilezles.org/articles/palettes)\n            vec3 tint = vec3(0.25)+vec3(0.75)*cos(vec3(1,2,3)*.8+material*.4+1.+pos.z*2.+uv.y*1.+shade);\n            \n            // coloring\n            color.rgb = tint * shade;\n            \n            // stop raymarch\n            break;\n        }\n        // step further\n        pos += dist * ray;\n    }\n\n    // frame offset\n    vec2 offset = -20. * uv * length(uv) / iResolution.xy;\n    vec4 frame = texture(iChannel0, pixel.xy/iResolution.xy+offset);\n\n    // frame additive\n    color = max(color, frame*0.99);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}