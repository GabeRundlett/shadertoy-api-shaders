{
    "Shader": {
        "info": {
            "date": "1546718902",
            "description": "get the source code from:\nhttps://www.shadertoy.com/view/lsBfRc\n\nThank You. \n",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsl3RB",
            "likes": 3,
            "name": "Simple Triangle 2D",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "dennyraymond",
            "viewed": 768
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define colorRange 24.0\n\nfloat getTriangle(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    // Remap the space to -1. to 1.\n    p = p *2.-1.;\n\n    // Number of sides of your shape\n    int N = 3;\n\n    // Angle and radius from the current pixel\n    float a = atan(p.x,p.y)+PI;\n    float r = TWO_PI/float(N);\n\n    // Shaping function that modulate the distance\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    return 1.0-step(.12,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / vec2(iResolution.x, iResolution.y);\n\n   vec3 triangle = getTriangle(uv, vec2(0.0, -0.23)) * vec3(2.0, 30.0, 2.0) * 2.0;\n     vec3 color = triangle;\n    // Output to screen\n    fragColor = vec4(pow(color, vec3(1.0,1.,3.)) / colorRange,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}