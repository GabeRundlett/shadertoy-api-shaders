{
    "Shader": {
        "info": {
            "date": "1586007627",
            "description": "License: CC0\nResult after playing around with warped FBMs for a few hours\nBased on: https://iquilezles.org/articles/warp/warp.htm\n",
            "flags": 0,
            "hasliked": 0,
            "id": "td2yzR",
            "likes": 13,
            "name": "Icecream warped FBM",
            "published": 3,
            "tags": [
                "2d",
                "fbm",
                "warp"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "// License: CC0\n//   Result after playing around with warped FBMs for a few hours\n//   Based on: https://iquilezles.org/articles/warp\n\n#define PI    3.141592654\n#define TAU   (2.0*PI)\n#define TTIME (iTime*TAU)\n\nconst mat2 frot = mat2(0.80, 0.60, -0.60, 0.80);\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat noise(vec2 p) {\n  float a = sin(p.x);\n  float b = sin(p.y);\n  float c = 0.5 + 0.5*cos(p.x + p.y);\n  float d = mix(a, b, c);\n  return d;\n}\n\nfloat fbm(vec2 p) {    \n  float f = 0.0;\n  float a = 1.0;\n  float s = 0.0;\n  float m = 2.0;\n  for (int x = 0; x < 4; ++x) {\n    f += a*noise(p); p = frot*p*m;\n    m += 0.01;\n    s += a;\n    a *= 0.5;\n  }\n  return f/s;\n}\n\nfloat warp(vec2 p, out vec2 v, out vec2 w) {\n\n  vec2 vx = vec2(0.0, 0.0);\n  vec2 vy = vec2(3.2, 1.3);\n\n  vec2 wx = vec2(1.7, 9.2);\n  vec2 wy = vec2(8.3, 2.8);\n\n  rot(vx, TTIME/1000.0);\n  rot(vy, TTIME/900.0);\n\n  rot(wx, TTIME/800.0);\n  rot(wy, TTIME/700.0);\n\n  v = vec2(fbm(p + vx), fbm(p + vy));\n  \n  w = vec2(fbm(p + 3.0*v + wx), fbm(p + 3.0*v + wy));\n  \n  return fbm(p + 2.25*w);\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(0.0001, 0);\n  \n  vec3 n;\n  n.x = warp(p + e.xy, v, w) - warp(p - e.xy, v, w);\n  n.y = 2.0*e.x;\n  n.z = warp(p + e.yx, v, w) - warp(p - e.yx, v, w);\n  \n  return normalize(n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= iResolution.x/iResolution.y;\n\n  p += TTIME*0.01;\n  p *= 2.0;\n  vec3 col = vec3(1.0);\n \n  vec2 v;\n  vec2 w;\n \n  float f = warp(p, v, w);\n  vec3 n = normal(p);\n\n  vec3 lig = normalize(vec3(0., 0.2, -0.4));\n  rot(lig.xy, TTIME/10.0);\n  float dif = max(dot(lig, n), 0.5);\n\n  const vec3 col1 = vec3(0.1, 0.7, 0.8);\n  const vec3 col2 = vec3(0.7, 0.3, 0.5);\n  \n  col = pow(dif, 0.75)*tanh(pow(abs(f + 0.5), 1.5)) + (length(v)*col1 + length(w)*col2);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}