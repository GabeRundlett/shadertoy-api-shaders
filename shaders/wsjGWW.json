{
    "Shader": {
        "info": {
            "date": "1548919267",
            "description": "Looking into how this transition works. Doesn't work properly now. I think it needs a vertex shader, but dont know :/\nSource: https://github.com/transitive-bullshit/react-fluid-gallery/blob/master/src/frag.js\nWebsite: http://taotajima.jp",
            "flags": 0,
            "hasliked": 0,
            "id": "wsjGWW",
            "likes": 16,
            "name": "taotajima image transition",
            "published": 3,
            "tags": [
                "imagetransition"
            ],
            "usePreview": 0,
            "username": "anemolo",
            "viewed": 1226
        },
        "renderpass": [
            {
                "code": "\n\n#define PI 3.14159265359\nvec2 accel = vec2(0.01);\n// https://github.com/transitive-bullshit/react-fluid-gallery/blob/master/src/frag.js    \n    \nvec2 mirror(vec2 v) {\n    // The progress is added to vector making it 0 to 2\n    // Se we mod by 2\n  vec2 m = mod(v, 2.0);\n    // Not sure about this one\n  return mix(m, 2.0 - m, step(1.0, m));\n}\n\n\nfloat tri(float p) {\n  return mix(p, 1.0 - p, step(0.5, p))*2.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 vuv1 = uv - 0.5;\n    vuv1 *= vec2(1.,iResolution.y/iResolution.x);\n    vuv1 += 0.5;\n    \n    \n   float p = pow(min(cos(PI * (mod(iTime,2.)-1.) / 2.), 1. - abs(mod(iTime,2.) - 1.)  ), 1. );\n    \n    float delayValue = p*7. - uv.y*2. + uv.x - 2.0 ;\n    delayValue = clamp(delayValue,0.,1.);\n    \n    vec2 acc = vec2(0.5,2.);\n    \n    vec2 translateValue = p + delayValue * acc;\n    vec2 translateValue1 = vec2(-0.5,1.)* translateValue;\n    vec2 translateValue2 = vec2(-0.5,1.) * (translateValue - 1.0 - acc);\n    \n  \tvec2 w = sin( sin(iTime)*vec2(0,0.3) + uv*vec2(0,4.)) * vec2(0, 0.5);\n  \tvec2 xy = w*(tri(p)*0.5 + tri(delayValue)*0.5);\n    \n    \n    vec2 uv1 = vuv1 + translateValue1 + xy;\n    vec2 uv2 = vuv1 + translateValue2 + xy;\n    \n    \n    vec4 t0 = texture(iChannel0,mirror(uv1),0.);\n    vec4 t1 = texture(iChannel1,mirror(uv2),0.);\n fragColor = mix(t0, t1, delayValue);\n  // gl_FragColor = vec4(tri(progress));\n  // gl_FragColor = vec4(delayValue);\n  // gl_FragColor = vec4(uv,1.,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}