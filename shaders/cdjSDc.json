{
    "Shader": {
        "info": {
            "date": "1671044156",
            "description": "Music synced version of an older project of mine (https://www.shadertoy.com/view/WtG3Rd)\n\nWatch at least 90 seconds in fullscreen - enjoy the ride!",
            "flags": 64,
            "hasliked": 0,
            "id": "cdjSDc",
            "likes": 12,
            "name": "[phreax] being synced",
            "published": 3,
            "tags": [
                "2d",
                "rainbow",
                "kifs"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2020\n\n   Elaboration of by previous experiment https://www.shadertoy.com/view/wlV3zy\n   and https://shadertoy.com/view/WtG3Rd\n\n   Introducing more kaleidoscopic shapes as attractor for the basic kifs pattern.\n   The attractor idea goes to evvvvil - it's very interesting method to shape your kifs.\n*/\n\n#define PI 3.141592\n#define TAU 2.*PI\n#define hue(v) ( .6 + .6 * cos( 6.3*(v) + vec3(0,23,21) ) )\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define COUNT 40.\n#define N 10.\n#define DISTORT .6\n#define SQR(x) ((x)*(x))\n#define SIN(x) sin(x)*.5+.5\n#define T iChannelTime[0]\n#define S(a, b) smoothstep(a, b, T)\n#define F(a, b, s) (S(a, a+s)-S(b, b+s))\n#define F2(a, b, s1, s2) (S(a, a+s1)-S(b, b+s2))\n#define F3(t, s1, s2) (F2(t, t, s1, s2))\n\nfloat tt;\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 5.));\n}\n\nfloat flower(vec2 uv) {\n    float n = 3.;\n    float a = atan(uv.y,uv.x);\n\n    float d = length( uv) - cos(a*n);\n    \n    float emph = .1*F2(20.6, 21., .2, 2.)+.07*F3(35.4, .2, 1.5);\n    emph += .03*F2(50.4, 50.4, .2, 1.);\n    emph += .05*F3(64., .2, 1.);\n    emph += .07*F3(65., .2, 1.);\n    emph += .1*F3(79.8, .2, 1.);\n    emph += .1*F3(88.8, .2, 1.);\n    emph += .15*F3(57.4, .2, 1.);\n    emph += .1*F3(72.4, .2, 1.);\n    emph += .1*F3(93.4, .2, 1.);\n    emph += .15*F3(109.3, .2, 1.);\n    emph += .1*F3(118.3, .2, 1.);\n    emph += .1*F3(124., .2, 1.);\n    emph += .1*F3(133.3, .2, 1.);\n    emph += .1*F3(138.8, .2, 1.);\n    emph += .1*F3(153.7, .2, 1.);\n    emph += .1*F3(183., .2, 1.);\n    emph += .1*F3(257., .2, 1.5);\n    emph += .07*F3(271.8, .2, 1.);\n    return smoothstep(fwidth(d)+.01, -.07, abs(d+.2)-emph);    \n}\n\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) {\n\n    id = id % 7;\n\n    vec3          col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return col;\n}\n\n\n\nfloat entity(vec2 uv) {\n    \n\tuv *= mix(.1, .7, smoothstep(0., 14., tt));       // transition effect in the beginning\n \tuv = mix(fract(uv*.2-.5)-.5, uv, smoothstep(14., 14., tt));\n    \n\n    uv *= rot(PI/2.);\n\n    vec2 bp = uv;\n    \n    uv = abs(uv)-.2;\n        \n    uv *= rot(-0.5*tt);\n    uv = abs(uv-.2*SIN(tt))-.2;\n    uv *= rot(0.93*tt);\n    \n    if(tt < 14.) bp.x = abs(bp.x);\n    uv += smoothstep(0.0, 1., bp.x);\n\n    \n    float r = length(uv);\n    float a = atan(uv.y,uv.x);\n\n    float f = cos(a*4.);\n    \n    return smoothstep(f, (f+.1), r); \n}\n\nvec2 kalei(vec2 uv) { \n    vec2 bp = uv;\n\n    float n = N;\n    float r = TAU/n;\n    \n    float at = entity(uv);\n    for(float i=0.; i<n; i++) {     \n    \tuv = abs(uv);\n        uv.x -= (.2*i*at)+.2;\n    \tuv *= rot(r*i-.2*tt-.1*at);\n    }\n\n    uv = abs(uv) - (sin(.15*tt)+1.2);\n    \n    return uv;\n}\n\n\nvec3 spiral(vec2 uv, float i) {  \n    uv *= rot(i*PI+tt*.3);\n    uv += DISTORT*sin(5.*uv.yx);\n\treturn flower(uv)*SQR(getPal(0, i+tt*.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n   // uv *= rot(-.5*PI);\n\n    if(T < 20.) tt = .7*T;\n    else tt = (.7*20.) + (T*0.99-20.)*.5;\n    \n    if(T > 50.35 && T < 79.8) {\n        tt += 2.*curve(T+.3 ,1.);\n    }\n    uv = kalei(uv*5.);\n\n    float s = 1./COUNT;\n\t\n    for(float i=0.; i<1.; i+=s) {   \n        float z = fract(i-.1*tt);\n        float fade = smoothstep(0., .2, 1.-abs(2.*z-1.));\n        col += spiral(uv*z, i)*fade;\n    }\n\n    \n    col = sqrt(col);\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 31284,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/thordavid1968/abakus-igmatik"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}