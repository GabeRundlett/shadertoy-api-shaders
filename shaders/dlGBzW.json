{
    "Shader": {
        "info": {
            "date": "1701907561",
            "description": "Thanks Inigo Quilez for the intuitive explanation of the menger sponge!  I didn't use his code though, it didn't make enough sense to me so I spent like two days making my own ",
            "flags": 32,
            "hasliked": 0,
            "id": "dlGBzW",
            "likes": 2,
            "name": "Menger Sponge Pathtracer 2",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "menger",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "joteakus",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "int s = 3;\n\nvec3 sample_texture(vec2 p){\n    vec4 temp = texture(iChannel0, p/iResolution.xy);\n    return temp.xyz/temp.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame <= -1){\n        fragColor = postprocess(vec4(sample_texture(fragCoord), 0.));\n    }else{\n        vec3 total = vec3(0.);\n        float max_magnitude = 1.+length(vec2(s));\n        float magnitude_total = 0.;\n        for(int x = -s; x <= s; x++){\n            for(int y = -s; y <= s; y++){\n                vec3 temp = (max_magnitude-length(vec2(x, y)))*sample_texture(fragCoord+vec2(x, y));\n                magnitude_total += max_magnitude-length(vec2(x,y));\n                total += temp*length(temp)*0.02;\n            }\n        }\n        fragColor = postprocess(vec4(sample_texture(fragCoord)+total/magnitude_total, 0.)); \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "Ray ray;\n\nfloat sde;\nfloat intersect_result;\nvec2 uv;\nvec2 uv2;\nvec3 col;\n\nvec3 camera_pos = vec3(6., 6., -15.);\nvec3 camera_rot = degree_to_rad*vec3(-25., -25., 0.);\n\n//settings\nconst int bounces = 4;\nconst int pass_per_frame = 1;\n\nconst bool ambient_light_enabled = true;\nconst bool use_three_light_model = false;\nconst bool camera_is_light = true;\n\nvec3 rotate(vec3 base, float rotation, int type){\n    vec3 temp = base;\n    if(type == 2){\n        temp.x = base.x*cos(rotation) - base.z*sin(rotation);\n        temp.z = base.x*sin(rotation) + base.z*cos(rotation);\n    }else if(type == 1){\n        temp.z = base.z*cos(rotation) - base.y*sin(rotation);\n        temp.y = base.z*sin(rotation) + base.y*cos(rotation);\n    }\n    return temp;\n}\n\nvec3 camera_transform(vec3 base){\n\n    vec3 temp = base;\n    temp = rotate(temp.xyz, camera_rot.x, 1); //rotation about x\n    temp = normalize(temp);\n    temp = rotate(temp.xyz, -camera_rot.y, 2); //rotation about y axis\n    temp = normalize(temp);\n    return temp;\n}\n\nvoid intersect(float max_len){\n    sde = inf;\n    //ray.pos += ray.dir*eps;\n    while(sde > eps || ray.len < max_len){\n        sde = get_scene_distance(ray.pos, false);\n        if(sde > eps && ray.len < max_len){\n            ray.pos += ray.dir*sde;\n            ray.len += sde;\n        }else{\n            intersect_result = (sde <= eps) ? HIT : MISS;\n            break;\n        }\n    }\n}\n\nvec3 apply_light(vec3 light_dir, vec3 light_col, bool ambient, bool falloff){\n\n    vec3 n_dir = normalize(light_dir);\n    vec3 fresnel1 = (scene_surface == matte) ? scene_col : vec3(0.5);\n    \n    vec3 half_not_illegal = normalize(n_dir-ray.dir);\n    float diffuse = max(0., dot(n_dir, normal));\n    \n    float specular = 0.;//(1.-scene_roughness)*pow(clamp(dot(n_dir,reflect(ray.dir, normal)),0.,1.),10.*(1.-scene_roughness));\n    vec3  fresnel = fresnel1 + (1.-fresnel1)*pow(clamp(1.-dot(half_not_illegal,n_dir),0.,1.),50.);\n    \n    \n    float shadow_strength = 1.;\n    float d = 1.;\n    if(diffuse >= 0. && !ambient){\n        d = length(light_dir);\n        Ray ray2 = ray;\n        ray.dir = n_dir;\n        ray.len = 0.;\n        intersect(d);\n        shadow_strength = (intersect_result == HIT) ? 0. : 1.;\n        ray = ray2;\n    }else{\n        shadow_strength = 1.;\n    }\n    vec3 back = vec3(0.);\n    if(scene_surface == matte){\n        back += diffuse*scene_col*light_col;\n        back += diffuse*light_col*fresnel*(1.+specular);\n    }else if(scene_surface == metal){\n        back += diffuse*light_col*fresnel*(1.+specular);\n    }else{\n        \n    }\n    back *= shadow_strength;\n    return back;\n\n}\n\nvec3 apply_lighting(){\n\n    vec3 temp = vec3(0.);\n    float distance_to_center = hash13(cross(ray.pos, ray.dir)*2.3+iTime*500.);\n    vec3 offset = random_equal_vec3(cross(ray.pos, ray.dir)*(iTime+500.));\n    //temp += apply_light(normalize((distance_to_center*offset+vec3(100., 1000., 0.))-ray.pos), vec3(5., 5., 2.5)); \n    //temp += apply_light(normalize(vec3(-1., 10., 0.)), vec3(1., 1., 3.)); \n    temp += apply_light((100.*offset+vec3(1000., 10000., -500.)-ray.pos), vec3(10., 10., 5.), false, false); \n    if(ambient_light_enabled){\n        temp += apply_light((normalize(offset)), vec3(0.5, 0.5, 0.5), true, false); \n        temp += apply_light((100.*normalize(vec3(1., 3., 1.))), sky_col, false, false); \n    }\n    if(camera_is_light){\n        temp += apply_light((distance_to_center*0.25*offset+camera_pos-ray.pos), vec3(5., 5., 2.5), false, true); \n    }\n    if(use_three_light_model){\n        temp += apply_light((distance_to_center*0.5*offset+vec3(-7., 9., -1.)-ray.pos), vec3(1., 1., 1.), false, true); \n        temp += apply_light((distance_to_center*0.5*offset+vec3(7., 9., -1.)-ray.pos), vec3(1., 1., 1.), false, true); \n    }\n    \n    return temp;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 total_color = vec3(0.);\n\n    for(int pass = 0; pass <= pass_per_frame; pass++){\n        uv = fragCoord/iResolution.xy;\n        uv2 = (uv-0.5)*2.;\n        uv2.x *= iResolution.x/iResolution.y;\n        vec2 uv3 = uv2+(hash31(iTime*1234.5).xy/(iResolution.xy-10.));\n        col = vec3(0.);\n        vec3 ray_col = vec3(1.);\n        vec3 accumulated = vec3(0.);\n        float depth = 0.;\n        \n        ray = Ray(camera_pos, normalize(vec3(uv3, 2.)), 0.);\n        ray.dir = camera_transform(ray.dir);\n        \n\n        for(int i = 0; i <= bounces; i++){\n            intersect(max_t);\n            if(intersect_result == HIT){\n                if(i == 0){\n                    depth = ray.len;\n                }\n                get_scene_distance(ray.pos, true);\n                get_normal(ray.pos);\n                ray.pos += normal*eps;\n                //lighting goes here??? maybe???\n                vec3 scene_color2 = scene_col;\n                scene_col *= ray_col;\n                vec3 temp_col = apply_lighting();\n                ray_col *= scene_color2;\n                accumulated += temp_col;\n                //tint *= temp_col;\n                vec3 specular_dir = reflect(ray.dir, normal);\n                vec3 diffuse_dir = vec3_near(cross(ray.pos, ray.dir)*(iTime+500.), normal, 1.-scene_diffuse);\n                ray.dir = mix(specular_dir, diffuse_dir, scene_roughness);\n                ray.len = 0.;\n            }else{\n                accumulated += sky_col*ray_col;\n                break;\n            }\n            if(depth != 0.){\n                accumulated = mix(accumulated, fog_col, depth/fog_dist);\n            }\n        }\n    \n        \n        col = accumulated/float(bounces+1);\n        total_color += col;\n    }\n\n    vec4 total = texture(iChannel0, uv);\n    total += vec4(total_color, pass_per_frame);\n    if(iTime <2.){\n        fragColor = vec4(0.);\n    }else{\n        fragColor = total;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float HIT = 1.;\nconst float MISS = 2.;\nconst float inf = 9999999.;\nconst float eps = 0.01;\nconst float max_t = 100.;\nconst float pi = 3.14159265359;\nconst float degree_to_rad = pi/180.;\nconst float rad_to_degree = 180./pi;\nconst int matte = 1;\nconst int metal = 2;\nfloat sde_v_1;\nfloat sde_v_2;\nvec3 normal;\nconst vec3 sky_col = vec3(4., 4., 12.);\nconst vec3 fog_col = vec3(4., 4., 12.);\nconst float fog_dist = 500.;\n\nvec3 scene_col;\nfloat scene_diffuse;\nfloat scene_roughness;\nint scene_surface;\n\nvec4 postprocess(vec4 og){\n    vec4 temp = og;\n    temp *= 0.8;\n    temp = temp/(temp+1.);\n    temp = 1.1*(temp-0.5)+0.5-0.;\n    temp = pow(temp, vec4(1.5));\n    return temp;\n\n}\n\nstruct Ray{\n    vec3 pos;\n    vec3 dir;\n    float len;\n};\n\nvoid object(bool update_surface, float sde, vec3 col, float diffuse, float roughness, int surface_type){\n    if(sde <= sde_v_1){\n        sde_v_1 = sde;\n        if(update_surface){\n            scene_col = col;\n            scene_diffuse = diffuse;\n            scene_roughness = roughness;\n            scene_surface = surface_type;\n        }\n    }\n}\n\nfloat sphere(vec3 from, vec3 pos, float radius){\n    return distance(from, pos)-radius;\n}\n\nfloat plane(vec3 from, vec3 normal, float offset){\n    return(dot(normalize(normal), from)-offset);\n}\n\nfloat box(vec3 from, vec3 pos, vec3 dimensions)\n{\n  vec3 q = abs(from-pos) - dimensions;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat cross_but_not_reserved(vec3 from, vec3 pos, float radius, float len){\n    float d1 = box(from, pos, vec3(len, radius, radius));\n    float d2 = box(from, pos, vec3(radius, len, radius));\n    float d3 = box(from, pos, vec3(radius, radius, len));\n    return min(d1, min(d2, d3));\n}\n\nvec2 menger(vec3 from, vec3 pos, float size, float iterations){\n    float dist = box(from, pos, vec3(size));\n    float break_i = 0.;\n    vec3 cross_pos = pos;\n    for(float i = 1.; i<=iterations; i+=1.){\n        float m = 3.*(size/pow(3., i-1.));\n        cross_pos = floor((0.5*m+1.5*from)/m)*m/1.5;\n        float cross_size = size/pow(3., i);      \n        float cross_dist = cross_but_not_reserved(from, cross_pos, cross_size/1., inf);\n        if(-cross_dist > dist) break_i = i;\n        dist = max(dist, -cross_dist);\n        \n    }    \n    return vec2(dist, break_i);\n}\n\nfloat get_scene_distance(vec3 pos, bool colors){\n\n    sde_v_1 = inf;\n    vec2 menger_dist = menger(pos, vec3(0.), 5., 3.);\n    \n    vec3 menger_col = vec3(0.1);\n    if(menger_dist.y == 0.){\n        menger_col = vec3(0.7);\n    }else if(menger_dist.y == 1.){\n        menger_col = vec3(0.6, 0.5, 0.5);\n    }else if(menger_dist.y == 2.){\n        menger_col = vec3(0.1, 0.2, 0.6);\n    }else if(menger_dist.y == 3.){\n        menger_col = vec3(0.7, 0.4, 0.3);\n    }else{\n        menger_col = vec3(0.1, 0.1, 0.1);\n    }\n    object(colors,\n           menger_dist.x,\n           vec3(menger_col), 0.2, 0.1, matte);   \n\n    return sde_v_1;\n}\n\nvoid get_normal(vec3 pos){\n    vec2 oz = vec2(1., 0.);\n    normal = vec3(0.);\n    normal.x += get_scene_distance(pos+eps*oz.xyy, false)-get_scene_distance(pos-eps*oz.xyy, false);\n    normal.y += get_scene_distance(pos+eps*oz.yxy, false)-get_scene_distance(pos-eps*oz.yxy, false);\n    normal.z += get_scene_distance(pos+eps*oz.yyx, false)-get_scene_distance(pos-eps*oz.yyx, false);\n    normal = normalize(normal);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   vec3 temp = fract((p3.xxy+p3.yzz)*p3.zyx); \n   return (temp-0.5)*2.;\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 random_equal_vec3(vec3 seed){\n    float azimuth = hash13(seed)*360.;\n    float polar = hash13(seed*2.5+103.)*360.;\n    vec3 temp = vec3(0.);\n    temp.x = sin(polar)*cos(azimuth);\n    temp.y = sin(polar)*sin(azimuth);\n    temp.z = cos(polar);\n    return temp;\n}\n\n\n//    normalize(hash31(abs(time*50.+100.+abs(seed.x*25.)+abs(seed.y*1234.)+abs(seed.z*100.))));\n\n\nvec3 vec3_near(vec3 seed, vec3 dir, float threshold){\n    if(threshold > 0.9){\n        return dir;\n    }else{\n        float modify = 100.;\n        vec3 temp = random_equal_vec3(seed+modify*10.);\n        while(dot(temp, dir) <= threshold){\n            modify += 0.5;\n            temp = random_equal_vec3(seed+modify*10.);\n        }\n        return temp;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}