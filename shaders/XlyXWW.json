{
    "Shader": {
        "info": {
            "date": "1484273964",
            "description": "dithering how does it work?",
            "flags": 0,
            "hasliked": 0,
            "id": "XlyXWW",
            "likes": 4,
            "name": "dithers how do they work",
            "published": 3,
            "tags": [
                "work",
                "dithers",
                "how",
                "do",
                "they"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "//Ethan Alexander Shulman 2017\n\n\n#define DITHER 10.\n\n\nfloat mod_dither0(vec2 p) {\n    return (mod(floor(p.x*iResolution.x)+floor(p.y*iResolution.y),10.)-5.)/5.;\n}\nfloat mod_dither1(vec2 p) {\n    vec2 fp = floor(p*iResolution.xy);\n    return ((mod(fp.x*.75+mod(floor(fp.y/4.),4.),2.)+mod(fp.y*.8+mod(floor(fp.x/2.88),8.),2.))-2.)/2.;\n}\n\nfloat mod_dither2(vec2 u) {\n\treturn mod(u.x+u.y+mod(u.x*8.86,13.),7.)*.143*2.-1.;\n}\nfloat mod_dither3(vec2 u) {\n    return mod(u.x+u.y+mod(208.+u.x*3.58,13.+mod(u.y*22.9, 9.)),7.)*.143*2.-1.;\n}\n\nfloat voronoi_dither(vec2 u) {\n    #define l(i) length(fract(u*.7+fract(i*vec2(1,8))+cos(u.yx*.2333+i*8.))-.5)\n\treturn min(l(.1),l(.6))*2.66-1.;\n}\n\n\nvec2 rotate(vec2 p, float a) {\n\treturn cos(radians(a))*p + cos(radians(a-90.))*vec2(p.y, -p.x);\n}\nfloat mod_dither4(vec2 p) {\n    p=rotate(p-.5,iTime);\n    p=rotate(p,p.x*3.618*p.y*2.618);\n    p=rotate(p,p.x*2.618+p.y*1.618);\n    vec2 fp = p*iResolution.xy;\n    return ((mod(fp.x+mod((fp.y/8.),2.),5.)-mod(fp.y+mod((fp.x/8.),2.),5.)))/5.;\n}\n\n\nfloat noise_dither0(vec2 p) {\n    return texture(iChannel0, p*8.).x*2.0-1.0;\n}\n\nfloat noise_dither1(vec2 p) {\n    return (1./(1.+exp(-pow(texture(iChannel0, p*8.).x,2.2))))*7.-4.;\n}\n\n//nrand noise dither from here https://www.shadertoy.com/view/XtGXRV\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\nfloat n4rand( vec2 n )\n{\n\tfloat t = .8173;\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\tfloat nrnd1 = nrand( n + 0.11*t );\t\n\tfloat nrnd2 = nrand( n + 0.13*t );\n\tfloat nrnd3 = nrand( n + 0.17*t );\n\treturn (nrnd0+nrnd1+nrnd2+nrnd3)-2.0;\n}\n\n//blue noise from here https://www.shadertoy.com/view/4dSyDR\nfloat hash( uint n ) { // from https://www.shadertoy.com/view/llGSzw  Base: Hugo Elias. ToFloat: https://iquilezles.org/articles/sfrand\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.;\n}\n\nfloat noise(vec2 U) {\n    U-=.5; return hash(uint(U.x+iResolution.x*U.y));\n}\n\nfloat bluenoise(vec2 U) {\n#define V(i,j)  noise(U+vec2(i,j))\n    float N = 8./9.* noise( U ) \n           - 1./9.*( V(-1,-1)+V(0,-1)+V(1,-1) +V(-1,0)+V(1,0) +V(-1,1)+V(0,1)+V(1,1) );  \n    return N*2.0+0.5;\n}\n\n//correlation from here https://www.shadertoy.com/view/XsSyDR\nfloat correlated_bluenoise(vec2 U) {\n    return mix(bluenoise(U),\n               bluenoise(mod(U,64.)),\n               0.5)/0.75;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    if (uv.y < 0.5) {\n        //non-dithered\n        fragColor = vec4(floor(uv.x*(DITHER+.999))/DITHER);\n    } else {\n        //dithered\n        \n        //try different methods\n        float dither = 0.;\n        \n        //dither = mod_dither0(uv); \n        //dither = mod_dither1(uv);\n        //dither = mod_dither2(fragCoord);\n        dither = mod_dither3(fragCoord);\n        \n        \n        //dither = voronoi_dither(fragCoord);\n        \n        \n        // mod_dither4 by TimoKunnunen\n        //dither = mod_dither4(uv);\n        \n        \n        //dither = noise_dither0(uv);\n        //dither = noise_dither1(uv);\n        //dither = n4rand(uv);\n        \n        //blue noise and correlated blue noise by FabriceNeyret2\n        //dither = (bluenoise(fragCoord+0.5)-0.5);\n        //dither = (correlated_bluenoise(fragCoord+0.5)-0.5);\n        \n        \n        //apply dither to lumscale\n        float lum = floor(uv.x*(DITHER+.999)+dither)/DITHER;\n        \n        fragColor = vec4(lum);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}