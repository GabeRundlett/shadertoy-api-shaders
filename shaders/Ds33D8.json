{
    "Shader": {
        "info": {
            "date": "1677166326",
            "description": "Put integers on a spiral and a black dot on each prime.\nCheck out the mysterious lines!\n\nPublic domain.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds33D8",
            "likes": 4,
            "name": "Animated Ulam spiral",
            "published": 3,
            "tags": [
                "spiral",
                "pixels",
                "prime",
                "factorization"
            ],
            "usePreview": 0,
            "username": "rrrola",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "// Animated Ulam spiral\n\n// Put integers on a spiral and a black dot on each prime. Check out the mysterious lines!\n\n// The lines are generated by quadratic polynomials, for example n²+n+41 or n²-n+27941.\n// Some contain many primes and numbers with only large factors.\n\n// Primes are black.\n// Numbers with large factors are red->yellow (the color depends on the smallest factor).\n// The red numbers make the lines even more visible.\n\n\n// Return a position on a square ring of radius r.\n// Position 1 is at [r, -(r-1)].\nint to_ring(int r, int x, int y) {\n    if (x == r && y != -r) return r + y;\n    if (y == r) return 3*r - x;\n    if (x == -r) return 5*r - y;\n    return 7*r + x;\n}\n\n// Return a position on a square spiral.\nint to_spiral(int x, int y) {\n    int r = max(abs(x), abs(y));\n    int n = 2*r - 1;\n    return n*n - 1 + to_ring(r, x, y);\n}\n\n// Return the smallest prime factor of x (using wheel factorization).\n// If x is zero or one, return x.\nint smallest_factor(int x) {\n    if (x <= 3) return x;\n    int p = 2, i = 0;\n    while (p*p <= x) {\n        if (x % p == 0) return p;\n        p += int[11]( 1,2,2, 4,2,4,2,4,6,2,6 )[i];\n        i++; if (i == 11) { i = 3; }\n    }\n    return x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 p = ivec2(fragCoord) - ivec2(iResolution.xy) / 2;  // centered integer position\n    int n = to_spiral(p.x, p.y) + iFrame - 360;  // 6 seconds of negative numbers (black hole)\n    int f = smallest_factor(n);\n    fragColor = f==n ? vec4(0) : 1. - float(f) * vec4(0, 0.004, 0.04, 0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}