{
    "Shader": {
        "info": {
            "date": "1686906031",
            "description": "Derived from \"Alien Structures\" by Chris Webb\nhttps://www.shadertoy.com/view/MtdBD8",
            "flags": 0,
            "hasliked": 0,
            "id": "ddXyRS",
            "likes": 11,
            "name": "Fractal Voyage",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal"
            ],
            "usePreview": 0,
            "username": "djstomp",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "#define ANTIALIAS 1\n#define MAX_STEPS 512\n#define PRECISION 0.001\n#define ITERATIONS 20\n\nstruct keyframe\n{\n    float time;\n    vec3 position;\n    vec3 direction;\n    float rotation;\n    float yOffset;\n    float scale;\n    vec3 offset;\n    float fieldOfView;\n    float fade;\n    vec3 g0position;\n    float g0Size;\n    float g0Strength;\n    vec3 g0c0;\n    vec3 g0c1;\n    float g1Strength;\n    vec3 g1c0;\n    vec3 g1c1;\n};\n\nkeyframe frames[] = keyframe[] \n(          \n    keyframe(0.0, \n        vec3(0.0, 0.0, 5.025), \n        vec3(0.0, 0.0, 1.0), \n        0.0, 0.74, 1.8, \n        vec3(2.8, 0.5, 0.0), \n        0.35, 0.5, \n        vec3(0.0, 0.0, 5.04), \n        0.03, 2.0, \n        vec3(1.0, 0.3, 0.1), \n        vec3(0.9, 0.25, 0.1), \n        1.5, \n        vec3(0.5, 0.2, 0.0), \n        vec3(0.5, 0.95, 0.0)),\n    keyframe(30.0, \n       vec3(0.0, 0.0, 4.975), \n       vec3(1.0, 1.0, 0.0),\n       0.0, 0.74, 1.8, \n       vec3(2.8, 0.5, 0.0),\n       1.0, 0.5, \n       vec3(0.0, 0.0, 5.04),\n       0.01, \n       1.0, \n       vec3(1.0, 0.5, 0.0), \n       vec3(0.9, 0.05, 0.0), \n       1.0, \n       vec3(0.5, 0.1, 0.0), \n       vec3(0.5, 0.7, 0.0)),\n\n    keyframe(30.0, \n       vec3(2.0, 2.0, 0.4), \n       vec3(-1.0, -1.0, -1.0), \n       0.0, 0.64, 1.8, \n       vec3(1.669, 0.022, 0.0765), \n       1.0, 0.5, \n       vec3(0.0, 0.0, 5.04), \n       0.1, 1.0, \n       vec3(0.5, 0.4, 0.9), \n       vec3(0.2, 0.5, 0.6), \n       2.0, \n       vec3(0.3, 0.5, 0.5), \n       vec3(0.9, 0.2, 0.0)),\n    keyframe(60.0, \n       vec3(2.5, 2.5, 1.0), \n       vec3(-1.0,-1.0,1.0), \n       0.0, 0.64, 1.8, \n       vec3(1.659, 0.02, 0.0765), \n       1.0, 0.5, \n       vec3(0.0, 0.0, 0.0), \n       5.0, 0.5, \n       vec3(0.9, 0.2, 0.0), \n       vec3(0.3, 0.5, 0.5), \n       3.0, \n       vec3(0.3, 0.4, 0.5), \n       vec3(0.9, 0.2, 0.0)),\n       \n    keyframe(60.0, \n       vec3(-1.10, 0.0, 3.5), \n       vec3(-1.0, 0.0,-1.0), \n       0.0, 0.74, 1.8, \n       vec3(2.1, 2.1, 0.4), \n       3.0, 0.5, \n       vec3(0.0, 0.0, 5.04), \n       0.1, 2.0, \n       vec3(0.5, 0.4, 0.9), \n       vec3(0.2, 0.5, 0.7), \n       2.0, \n       vec3(0.73, 0.5, 0.1), \n       vec3(0.5, 0.95, 0.3)),\n    keyframe(90.0, \n       vec3(0.0, 0.0, 4.8), \n       vec3(0.0, 0.0,-1.0), \n       0.0, 0.74, 1.8, \n       vec3(2.1, 2.1, 0.4), \n       1.0, 0.5, \n       vec3(0.0, 0.0, 5.04), \n       0.1, 1.0, \n       vec3(0.5, 0.4, 0.9), \n       vec3(0.2, 0.5, 0.7), \n       10.0, \n       vec3(0.73, 0.5, 0.1), \n       vec3(0.5, 0.95, 0.3)),\n\n    keyframe(90.0, \n       vec3(0.0,0.1, 2.25), \n       vec3(1.0,0.0,0.7), \n       0.0, 0.75, 1.8, \n       vec3(2.59, 0.5, 0.05), \n       1.0, 0.5, \n       vec3(0.0, 0.1, 2.25), \n       1.0, 0.5, \n       vec3(0.7, 0.2, 0.2), \n       vec3(0.3, 0.3, 0.9), \n       3.0, \n       vec3(0.7, 0.2, 0.2), \n       vec3(0.3, 0.3, 0.9)),\n    keyframe(120.0, \n       vec3(0.0, 1.5, 2.35), \n       vec3(1.0, -0.5, 0.7), \n       0.0, 0.75, 1.8, \n       vec3(2.59, 0.5, 0.05),\n       0.85, 0.5, \n       vec3(0.0, 0.1, 2.25), \n       1.5, 0.5, \n       vec3(0.2, 0.2, 0.5), \n       vec3(0.3, 0.3, 0.9), \n       3.0, \n       vec3(0.5, 0.2, 0.2), \n       vec3(0.3, 0.3, 0.9)),\n\n    keyframe(120.0, \n       vec3(0.0, 0.0, 4.0), \n       vec3(1.0, 0.0, 0.0), \n       1.0, 1.25, 2.5, \n       vec3(2.028, 1.0, 0.48), \n       1.0, 0.5, \n       vec3(0.0, 0.0, 5.04), \n       0.3, \n       1.0, \n       vec3(0.5, 0.4, 0.9), \n       vec3(0.2, 0.5, 0.7), \n       5.0, \n       vec3(0.73, 0.5, 0.1), \n       vec3(0.5, 0.95, 0.3)),\n    keyframe(150.0, \n       vec3(0.0, 1.0, 2.0), \n       vec3(1.0, 0.0, 1.0), \n       0.0, 1.4, 3.25, \n       vec3(4.0,0.5,0.8), \n       1.0, 1.0, \n       vec3(0.0, 0.0, 5.04), \n       0.3, 1.0, \n       vec3(0.5, 0.4, 0.9), \n       vec3(0.2, 0.5, 0.7), \n       5.0, \n       vec3(0.73, 0.5, 0.1), \n       vec3(0.5, 0.95, 0.3)),\n\n    keyframe(150.0, \n       vec3(2.0, 2.0, 1.0), \n       vec3(1.0, 1.0, 1.0), \n       0.0, 0.64, 1.8, \n       vec3(1.45, 0.01, 0.17), \n       1.0, 0.5, \n       vec3(2.0, 2.0, 1.0), \n       0.0, 0.3, \n       vec3(1.0, 0.0, 0.0), \n       vec3(0.2, 0.2, 0.2), \n       3.5, \n       vec3(0.4, 0.4, 0.9), \n       vec3(0.9, 0.3, 0.3)),\n    keyframe(180.0, \n       vec3(1.75, 1.75, 0.99), \n       vec3(1.0,-1.0,1.0), \n       1.0, 0.64, 1.8, \n       vec3(1.45, 0.01, 0.17), \n       1.0, 0.5, \n       vec3(2.0, 2.0, 1.0), \n       0.0, 0.3, \n       vec3(1.0, 1.0, 1.0), \n       vec3(0.2, 0.2, 0.2), \n       3.5, \n       vec3(0.3, 0.4, 1.0), \n       vec3(1.0, 0.4, 0.3))\n);\n\nkeyframe interpolateFrames(keyframe a, keyframe b, float time)\n{\n  \tkeyframe frame;\n    frame.time = time;\n    frame.position = mix(a.position, b.position, time);\n    frame.direction = mix(a.direction, b.direction, time);\n    frame.rotation = mix(a.rotation, b.rotation, time);\n    frame.yOffset = mix(a.yOffset, b.yOffset, time);\n    frame.scale = mix(a.scale, b.scale, time);\n    frame.offset = mix(a.offset, b.offset, time);\n    frame.fieldOfView = mix(a.fieldOfView, b.fieldOfView, time);\n    float timeotalTime = b.time-a.time;\n    frame.fade = clamp(0.0, 1.0, min(time * (timeotalTime/a.fade), (1.0-time) * (timeotalTime/b.fade)));    \n    frame.g0position = mix(a.g0position, b.g0position, time);\n    frame.g0Size = mix(a.g0Size, b.g0Size, time);\n    frame.g0Strength = mix(a.g0Strength, b.g0Strength, time);\n    frame.g0c0 = mix(a.g0c0, b.g0c0, time);\n\tframe.g0c1 = mix(a.g0c1, b.g0c1, time);    \n    frame.g1Strength = mix(a.g1Strength, b.g1Strength, time);\n    frame.g1c0 = mix(a.g1c0, b.g1c0, time);\n\tframe.g1c1 = mix(a.g1c1, b.g1c1, time);\n    return frame;  \n}\n\nkeyframe evaluateFrame()\n{\n    float t = 0.0;\n    float timeLoop = mod(iTime, frames[frames.length()-1].time);\n\n    int i = 0;\n    for(; i < frames.length()-1; ++i)\n    {\n        if(timeLoop < frames[i+1].time)\n        {\n            float tTime = frames[i+1].time - frames[i].time;\n            float tUp = timeLoop - frames[i].time;\n            t = tUp / tTime;\n            break;\n        }\n    }\n    \n    return interpolateFrames(frames[i], frames[i+1], t);\n}\n\nfloat map(vec3 p, keyframe frame)\n{\n    p /= 2.0;\n    float ov = 1.0 / 3.0;\n\tfloat r;\n\tint i = 0;\n\twhile (i < ITERATIONS && dot(p, p) < 10000.0)\n\t{\n\t\tp.xy = abs(p.xy);\n\t\tif(p.y > p.x) p.xy = p.yx;\n\t\tp.y = frame.yOffset - abs(p.y - frame.yOffset);\n\t\tp.x += ov;\n\t\tif(p.z > p.x) p.xz = p.zx;\n\t\tp.x -= ov;\n\t\tp.x -= ov;\n\t\tif(p.z > p.x) p.xz = p.zx;\n\t\tp.x += ov;\n\t\tp = frame.scale * (p - frame.offset) + frame.offset;\n\t\tr = dot(p, p);\n\t\t++i;\n\t}\n\n\treturn abs(length(p) - length(frame.offset)) * pow(frame.scale, float(-i));\n}\n\nvec3 render(in vec3 ro, in vec3 rd, in vec2 uv, keyframe frame)\n{ \n    const float breakout = 20.0;\n    \n    int iteration = 0;\n    float depth = 0.0;\n    \n    for(; iteration < MAX_STEPS; ++iteration)\n    {\n\t    float precis = PRECISION * depth;\n\t    float dist = map(ro + rd * depth, frame);\n        \n        if(dist < precis || depth > breakout) \n        {\n            break;\n        }\n        depth += dist;\n    }\n    \n    vec3 position = ro + depth * rd;\n    \n    float glow0 = float(iteration) / float(MAX_STEPS);\n    glow0 = clamp(pow(glow0 * 3.0, 1.0), 0.0, 1.0);\n    float glow1 = pow(glow0, 3.20);\n    \n    float distFromPoint = clamp(0.0, 1.0, distance(position, frame.g0position) / frame.g0Size);\n\t\n    vec3 glowColor0 = mix(frame.g0c0, frame.g0c1, clamp(distFromPoint, 0.0, 1.0));\n    vec3 col = glowColor0 * glow0 * frame.g0Strength;\n    \n    vec3 glowColor1 = mix(frame.g1c0, frame.g1c1, clamp(0.0, 1.0, uv.y/2.0));\n\tcol.rgb += glowColor1 * glow1 * frame.g1Strength;\n    \n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tkeyframe frame = evaluateFrame();\n    \n    vec3 cSum = vec3(0.0, 0.0, 0.0);\n    \n    for(int i = 0; i < ANTIALIAS; ++i)\n    {\n        for(int j = 0; j < ANTIALIAS; ++j)\n        {\n            vec2 o = vec2(float(i),float(j)) / float(ANTIALIAS) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord+o)) / iResolution.y;\n            vec3 ro = frame.position;\n            float cr = frame.rotation;\n            vec3 cw = normalize(frame.direction);\n            vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n            vec3 cu = normalize(cross(cw ,cp));\n            vec3 cv = normalize(cross(cu, cw));\n            mat3 ca = mat3(cu, cv, cw);\n            vec3 rd = ca * normalize(vec3(p.xy, 2.0 * frame.fieldOfView));\n\n            cSum += render(ro, rd, p, frame);\n        }\n    }\n    \n    cSum /= float(ANTIALIAS*ANTIALIAS);\n    \n    #ifndef OVERRIDE_FRAME\n    cSum.rgb *= frame.fade;\n    #endif\n\n    cSum = pow(cSum, vec3(0.4545));\n    cSum = cSum * 1.2 - 0.1;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv *=  1.0 - uv.yx;\n    \n    cSum *= clamp(0.0, 1.0, pow(uv.x*uv.y * 5.0, 0.1));\n    \n    float n = texture(iChannel0, fragCoord.xy/iChannelResolution[0].xy).r;\n    cSum.rgb += mix(-3.0 / 255.0, 3.0 / 255.0, n);\n\n    fragColor = vec4(cSum, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}