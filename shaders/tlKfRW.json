{
    "Shader": {
        "info": {
            "date": "1614005092",
            "description": "much cheating, maybe too much",
            "flags": 40,
            "hasliked": 0,
            "id": "tlKfRW",
            "likes": 26,
            "name": "8 Track",
            "published": 3,
            "tags": [
                "racing"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 517
        },
        "renderpass": [
            {
                "code": "//8 Track by eiffie, lots of trucks, only want to check 1, much cheating\n#define time iTime\nfloat T=-1.,ff=.5;vec2 pos;mat2 wrm,brm;//T=closest truck,ff=fudge factor (.5,.25)\nmat2 face(vec2 a){a=normalize(a);return mat2(a.y,-a.x,a.x,a.y);}\nfloat trk(vec2 pG){//mimic cos(t/2),sin(t)\n  pG=abs(pG);\n  float d2=abs(pG.x*2.0-pG.y-pG.x*pG.x*0.69);\n  float d3=abs(length(vec2((pG.x-0.7)*3.3333,pG.y))-1.0);\n  return mix(d2,d3,smoothstep(0.55,0.66,pG.x));\n}\nfloat GetT(vec2 p){//get closest truck\n  vec4 O=texture(iChannel0,(p+vec2(25.))/50.);\n  if(T!=O.x){\n    T=O.x;ff=O.w;pos=path(O.z,T);\n    vec2 p2=path(O.z+.314159,T);\n    brm=face(p2-pos);wrm=face(path(O.z+.6283,T)*brm-p2*brm);//body and steering rots\n  }\n  float d=(trk(p/20.)-.4)*20.;//distance to track .25\n  return max(0.,min((O.y-70./rez.y-1.)*.5,d));//subtract size of pixel and truck\n}\nvec4 mcol=vec4(0);\n\nfloat DE(vec3 p0){\n  float st=sin(T);//\"random\" number\n  float AX=.33+st*.02,AZ=.5;//axle\n  float TW=.05,TR=.125,TS=.02;//tire\n  float BH=.1,BL=.75,BS=.04;//body\n  p0.xz=(p0.xz-pos)*brm;p0.y-=TR;//rotate body\n  vec3 p=p0;p.xz=abs(p.xz)-vec2(AX,AZ);\n  float yz=length(p.yz)-TR;\n  if(p0.z>0.)p.xz=(p0.x>0.?p.xz*wrm:wrm*p.xz);//steer\n  float dT=length(max(vec2(abs(p.x)-TW,length(p.yz)-TR),0.0))-TS;\n  float dB=length(max(vec3(abs(p0.x)-AX,abs(p0.y-BH)-BH+p0.z*0.01,abs(p0.z)-BL),0.0))-BS;\n  float dP=max(abs(p0.x)-AX,max(abs(p0.y-BH-.14)-.2,abs(p0.z+BL*.6)-BL*.4));\n  dB=min(dB,length(max(vec3(abs(p0.x)-AX+p0.y*0.1,abs(p0.y-BH*2.75)-BH,abs(p0.z-BL*.15+(p0.z>0.?p0.y-.23:0.))-BL*.3),0.))-BS)*.7;\n  dB=max(dB,-min(p0.z>0.?yz-.05:dT-.05,dP));\n  float d=min(dT,dB);\n  if(mcol.x>0.){//coloring when needed\n    if(d==dT){//tire\n      if(p0.z>0.)yz=length(p.yz)-TR;\n      mcol+=vec4(vec3(abs(sin(yz*16.+.52))*.5-yz*2.),0);\n    }else{\n      p=sin(p0*20.+2.4*sin(p0.zxy*17.));\n      vec4 BC=abs(vec4(sin(T*1.3),st,sin(T+2.),.5+(p.x+p.y+p.z)*.1));//base color\n      BC.rgb+=p*.1;\n      float ax=abs(p0.x)-AX+p0.y*0.1;\n      if(ax<d){\n        if(abs(p0.y-BH*3.-BS*.75)<BH-BS*.5){\n          mcol+=vec4(.1,.1,.2,1);//windshield\n        }else if(abs(p0.z)>BL){\n          float lt=length(vec2(abs(p0.x)-.28,p0.y-.15));\n          if(lt<.06){\n            lt=sqrt(.06-lt)*5.;\n            mcol+=(p0.z>0.?vec4(lt,lt,lt,2):vec4(lt,lt*.3,0,2));//lights\n          }else{\n            if(abs(p0.x)<.22-p0.z*.1)mcol+=vec4(vec3(abs(sin(p0.y*61.+1.34))),.7);//chrome\n            else mcol+=BC;\n          }\n        }else{\n          mcol+=BC;\n        }\n      }else{\n        if(abs(p0.y-BH*3.-BS*.75)<BH-BS*.5 && p0.z<.57-p0.y&& p0.z>-BL*.13){\n          mcol+=vec4(.1,.1,.2,1);//side window\n        }else{\n          mcol+=BC;\n        }\n      }\n    }\n  }\n  return d*ff;\n}\nvec3 normal(vec3 p, float d){//from dr2\n  vec2 e=vec2(d,-d);vec4 v=vec4(DE(p+e.xxx),DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx));\n  return normalize(2.*v.yzw+vec3(v.x-v.y-v.z-v.w));\n}\nfloat rand(vec2 p){return fract(sin(dot(p,vec2(13.3145,117.7391)))*4237.76543);}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=rand(p+mod(time*10.,150.));}//fract(float(time)+sin(dot(p,vec2(13.3145,117.7391)))*4237.76543);}\n\nfloat ShadAO(in vec3 ro, in vec3 rd){\n float t=0.01*rnd,s=1.0,d,mn=0.01;ff=1.;//turn off fudge\n for(int i=0;i<12;i++){\n  d=max(DE(ro+rd*t)*1.5,mn);\n  s=min(s,d/t+t*0.5);\n  t+=d;\n }\n return s;\n}\n\nvec3 sky(vec3 rd, vec3 L){return vec3(1.-rd.y,0.9,1.+(rd.y-dot(rd,L))*.5)*(0.4*dot(rd,L)+0.6);}\nvec3 bg(vec3 ro, vec3 rd, float t, vec3 L){//background\n  if(rd.y<0. && t<250.){//track\n    vec2 pG=ro.xz+rd.xz*t;\n    float d3=trk(pG/20.),r1=rand(floor(pG*3.*(d3+.1))),r2=rand(floor(pG.yx*10.));\n    return (mix(vec3(.4,.3,.1),vec3(.3,.4,.2),smoothstep(.2,.25,d3))\n     +(r1*vec3(.0,.1,.2)+r2*vec3(.05))/(1.+.05*length(pG)))*(.5+.5*ShadAO(ro+rd*t,L));\n  }else return sky(rd,L);\n}\nvec3 scene(vec3 ro, vec3 rd){\n  float st=clamp(-(ro.y-.55)/rd.y,0.,250.);//start just above trucks\n  st+=GetT(ro.xz+rd.xz*st);\n  float t=st+DE(ro+rd*st)*rnd,d,px=1.0/rez.x;\n  float dG=rd.y<0.?min(-ro.y/rd.y,250.):250.;//end at the ground\n  for(int i=0;i<99;i++){\n    t+=d=DE(ro+rd*t);\n    if(t>dG || d<px*t)break;\n    t+=GetT(ro.xz+rd.xz*t);\n  }\n  vec3 L=normalize(vec3(0.4,0.025,0.5));\n  t=min(dG,t);\n  vec3 col=bg(ro,rd,t,L);\n  if(d<px*t*2.0){\n    mcol=vec4(0.001);\n    vec3 so=ro+rd*t;\n    vec3 N=normal(so,d);\n    vec4 scol=mcol*0.25;\n    if(scol.w>1.5)col=scol.rgb;\n    else{\n      float dif=0.5+0.5*dot(N,L);\n      float vis=clamp(dot(N,-rd),0.0,.9);\n      float fr=pow(1.-vis,5.0)*scol.w;\n      float shad=0.5+.5*ShadAO(so,L);\n      if(d<0.){shad=.5;fr=0.;}\n      col=mix((scol.xyz*dif)*shad+fr*sky(reflect(rd,N),L),col,d/(px*t*2.0));\n    }\n  }\n  return col;\n}\nmat3 lookat(vec3 fw){ \n  fw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0,1,0)));return mat3(rt,cross(rt,fw),fw); \n} \nvoid mainImage(out vec4 O, in vec2 U){\n  randomize(U);\n  vec2 uv=(2.*U-rez)/rez.x;\n  float t=iTime*RS;\n  vec2 p1=path(t-t*t*.006,13.)*.8,p2=path(iTime*RS,11.);\n  vec3 ro=vec3(1)+vec3(p1.x,1.75+2.*sin(iTime*.3),p1.y),rd=lookat(vec3(p2.x,0,p2.y)-ro)*normalize(vec3(uv,1));\n  O=vec4(scene(ro,rd),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//less than half way between a hack and a physical model\nvec2 mainSound(int samp, float time){\n  float t=time*RS;\n  vec2 a=vec2(0);\n  vec2 ear=vec2(1)+path(t-t*t*.006,13.)*.8,fw=normalize(path(t,11.)-ear);\n  for(float i=0.;i<32.;i+=1.){\n    vec2 car=path(t,i);\n    float d=length(ear-car)*.1;\n    float s=(125.-abs(car.y)*.5)/(1.+time*.025);//should be length(path(t+?,i)-car...\n    car=normalize(car-ear);\n    float f=dot(car,fw);\n    float p=.5+.5*dot(car,vec2(-fw.y,fw.x));//should be 2 ears so timing is correct\n    //p=pan,s=speed,d=distance,f=front facing\n    a+=vec2(1.-p,p)*pow(abs(fract((time-d)*s)-.5),1.5+f)/(1.+d*d-f*.5);\n  }\n  return a; \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//find the closest truck with minimal checks then fudge\n#define time iTime\nvoid mainImage(out vec4 O, in vec2 U){\n  vec2 uv=25.*(2.0*U-rez)/rez;\n  float t=time*RS,dm=250.,c=-1.,ff=.5;\n  for(float i=0.;i<32.;i+=1.){\n    float d=length(uv-path(t,i));\n    if(d<dm){if(dm<2.)ff=.25;dm=d;c=i;}\n  }\n  O=vec4(c,dm,t,ff);//car,min dist,time,fudge factor \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define rez iResolution.xy\n#define RS .5\nvec2 path(float t, float i){\n  t+=i;\n  vec2 p=vec2(cos(t/2.),sin(t))*20.;\n  p*=vec2(1)+vec2(sin(i*.35),sin(2.+i*.21))*.08;\n  return p;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}