{
    "Shader": {
        "info": {
            "date": "1712222705",
            "description": "Sphere Sponge",
            "flags": 0,
            "hasliked": 0,
            "id": "4fd3Df",
            "likes": 9,
            "name": "Sphere Sponge",
            "published": 3,
            "tags": [
                "sponge"
            ],
            "usePreview": 0,
            "username": "starielsl",
            "viewed": 157
        },
        "renderpass": [
            {
                "code": "#define FAR 100.\n#define NEAR .0001\n#define STEPS 256\n#define ITERATIONS 6\n\n#define SCALE 3.\n\nvec4 orbitTrap = vec4(FAR);\n\nfloat Scene(vec3 p, bool isLight)\n{\n    if (!isLight) orbitTrap = vec4(FAR);\n    float scale = SCALE;\n\tfloat spongeScale = 2.05;\n\tfloat k = scale;\n\tfloat d = -FAR, md = FAR;\n\tfloat d1, r;\n\n\tfor (int i = 0; i < ITERATIONS; i++) \n    {\n        vec3 z = mod(p * k, 4.) - vec3(.5 * 4.);\n        r = length(z);\n        d1 = (spongeScale - r) / k;\n        k *= scale;\n        d = max(d, d1);\n        if (!isLight)\n        {\n            md = min(md, d);\n            orbitTrap = vec4(md, md, md, r);\n            orbitTrap.z *= sin(iTime);\n            orbitTrap.y *= cos(iTime);\n        }\n    }\n\treturn d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, bool isLight)\n{\n    float ad = 0.;\n    for (int i = 0; i < STEPS; i++)\n    {\n        vec3 p = ro + rd * ad;\n        float d = Scene(p, isLight);\n        ad += d;\n        if(ad > FAR || d < NEAR) break;\n    }\n    return ad;\n}\n\nvec3 GetNormal(vec3 p)\n{ \n    float d = Scene(p, true);\n    vec2 e = vec2(NEAR, 0);\n    vec3 n = d - vec3(\n        Scene(p - e.xyy, true),\n        Scene(p - e.yxy, true),\n        Scene(p - e.yyx, true)\n    );\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{ \n    vec3 lp = p + .2;\n    vec3 ld = normalize(lp - p); \n    vec3 n = GetNormal(p);\n   \n    float dif = dot(n, ld);\n    dif = clamp(dif, 0., 1.);\n\n    float d = RayMarch(p + n * NEAR * 2., ld, true); \n    \n    if (d < length(lp - p)) dif *= .1;\n \n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord -.5 * iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(2. / SCALE, 2. / SCALE, -iTime);\n    vec2 mo = vec2(iMouse.xy / iResolution.xy - .5);\n    if (iMouse.z < 1.) mo = vec2(0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, -0.5) + vec3(mo, 0));\n    float d = RayMarch(ro, rd, false);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    vec3 color = vec3(orbitTrap.x * 0.2, orbitTrap.y * 0.4, orbitTrap.z * 0.9) * orbitTrap.w + dif + .2;\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}