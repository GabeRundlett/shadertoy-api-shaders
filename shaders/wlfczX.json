{
    "Shader": {
        "info": {
            "date": "1592598014",
            "description": "everyone's first instinct when they learn about raymarching infinite things is to rip off the big man himself, m.c. escher.  so that's exactly what i did",
            "flags": 0,
            "hasliked": 0,
            "id": "wlfczX",
            "likes": 11,
            "name": "Broken Space Division",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "petet",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "float hash3d(vec3 p3) {\n    //thank you mr. hoskins\n   \tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z); \n}\n\nfloat valueNoise(vec3 v) {\n    vec3 vfloor=floor(v);\n \tfloat aaa=hash3d(vfloor);\n    float aab=hash3d(vfloor+vec3(0,0,1));\n    float aba=hash3d(vfloor+vec3(0,1,0));\n    float abb=hash3d(vfloor+vec3(0,1,1));\n    float baa=hash3d(vfloor+vec3(1,0,0));\n    float bab=hash3d(vfloor+vec3(1,0,1));\n    float bba=hash3d(vfloor+vec3(1,1,0));\n    float bbb=hash3d(vfloor+vec3(1,1,1));\n    \n    vec3 vfrac=v-vfloor;\n    vfrac=smoothstep(0.,1.,vfrac);\n    \n    float aa=mix(aaa,aab,vfrac.z);\n    float ab=mix(aba,abb,vfrac.z);\n    float ba=mix(baa,bab,vfrac.z);\n    float bb=mix(bba,bbb,vfrac.z);\n    \n    return mix(mix(aa,ab,vfrac.y),mix(ba,bb,vfrac.y),vfrac.x);\n}\n\nfloat sphereSDF(vec3 v, vec3 p, float r) {\n    return length(v-p)-r;\n}\n\nfloat boxSDF(vec3 v, vec3 p, vec3 b) {\n \tvec3 q=abs(v-p)-b;\n\treturn length(max(q,vec3(0.)))+min(0.,max(q.x,max(q.y,q.z)));\n}\n\nfloat SDF(vec3 v) {\n    float decay=clamp(valueNoise(30.*v)*valueNoise(80.*v+sin(20.*v.zxy))-0.3,0.,1.);\n    float rounding=0.02*(1.-decay);\n    //vec3 vmod = v-vec3(0.2,0.2,3);\n    vec3 vmod = mod(v,1.);\n    float box1 = boxSDF(vmod, vec3(0.5,0.5,0.5), vec3(.12,.12,.12));\n    float box2 = boxSDF(vmod, vec3(0.5,0.5,0.5),vec3(1.,.03,.03));\n    float box3 = boxSDF(vmod, vec3(0.5,0.5,0.5),vec3(.03,1.,.03));\n    float box4 = boxSDF(vmod, vec3(0.5,0.5,0.5),vec3(.03,.03,1.));\n    \n    \n    float morphtime=iTime*0.1+(v.x-v.y-v.z)*0.02;\n    \n    float noisemorph = 2.*(floor(morphtime)+smoothstep(0.3,0.7,fract(morphtime)));\n    \n    return max(min(box1,min(box2,min(box3,box4))),valueNoise(v+vec3(0.5)+noisemorph)-0.5)-rounding;\n    \t\t\n}\n\nvec3 normal(vec3 v) {\n    const float epsilon = 0.0001;\n    float sdf1=SDF(v);\n \treturn normalize(vec3(SDF(v+vec3(epsilon,0,0))-sdf1,\n                SDF(v+vec3(0,epsilon,0))-sdf1,\n                SDF(v+vec3(0,0,epsilon))-sdf1));\n}\n\nmat2 rotate2d(float theta) {\n \treturn mat2(cos(theta),-sin(theta),sin(theta),cos(theta));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.x;\n\tvec3 col = vec3(1);\n    const int ITERATIONS = 60;\n    \n    \n    vec3 camera = vec3(iTime*0.2,0,iTime*0.5);\n    vec3 pos = camera;\n    vec3 dir = normalize(vec3(uv,1.));\n    float theta=iTime*0.1;\n    \n    dir.yz=rotate2d(sin(iTime*0.1))*dir.yz;\n    \n    dir.xz=rotate2d(theta)*dir.xz;\n                  \n    vec3 light=normalize(vec3(-1,1,-2));\n    \n    float fogdist=13.;\n    \n    const float surf_threshold = 0.002;\n    \n    for (int i = 0; i < ITERATIONS; i++) {\n    \tfloat dist = SDF(pos);\n        if (dist < surf_threshold) {\n            //vec3 light = normalize(vec3(0,0,iTime)-pos);\n            vec3 norm = normal(pos);\n            float luminance = 0.5+0.5*dot(norm,light);\n            //col = vec3(valueNoise(pos*10.));\n            col = vec3(0.2)+0.2*texture(iChannel0,vec2(fract(pos.xy+vec2(0,pos.z)))).xyz;\n            col *= luminance;\n            col *= 0.4+0.6*(SDF(pos+norm*0.1)-dist)/0.1;\n            \n           \t//col += length(pos-camera)/fogdist;\n            \n            float fog=float(i)/float(ITERATIONS);\n            \n            col += fog*fog;\n            break;\n        }\n        pos += dir*dist;\n    }\n\t//col+=vec3(hash3d(vec3(200.*uv,iTime)))*0.05; //ez dither\n\tcol += smoothstep(0.3,2.0,length(uv)); //vignette\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}