{
    "Shader": {
        "info": {
            "date": "1647861048",
            "description": "blobs",
            "flags": 0,
            "hasliked": 0,
            "id": "stlcWr",
            "likes": 4,
            "name": "3D Blobs",
            "published": 3,
            "tags": [
                "blobs"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a,0.,1.)\n\nvec3 camp;\n\nvec2 map(vec3 p)\n{\n  vec2 acc = vec2(1000.,-1.);\n\n  float a = texture(iChannel0, p.xz*.01+vec2(0.,iTime)*0.001).x-.4;\n  float b = texture(iChannel0,p.xy*0.02+vec2(iTime,0.)*0.002).x-.1;\n  return vec2(max(-a*b+.2,-(length(p-camp)-1.)),0.);//*texture2D(noise,p.xz).x-.5,0.);\n\n  return acc;\n}\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  camp = ro;\n  vec3 p = ro;\n  for (int i = 0; i<steps&& distance (p,ro)<15.;++i)\n  {\n    vec2 res = map(p);\n    res.x = min(res.x,.9);\n    if (res.x<0.001)\n      return vec3(res.x,distance(p,ro),res.y);\n    accCol+= .75*sat(sin(p.y+p.z+iTime)*.5+.5)*.05\n    *mix(vec3(.12,.45,.78),vec3(.2,.5,.4),abs(p.x*1.))*(1.-sat(res.x/.5));\n    p+= rd*res.x*.75;\n  }\n  return vec3(-1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  float fov = 1.;\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd,r));\n  return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n  vec2 e = vec2(0.001,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x,map(p-e.yxy).x,map(p-e.yyx).x));\n}\n\n\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n\n  float z = mod(iTime,18.);\n  vec3 ro = vec3(0.,-5.,-5.+z);\n  vec3 ta = vec3(0.,-1.,z);\n  float t = mod(iTime,9.);\n  if (t<3.)\n  {\n  }\n  else if(t<6.)\n  {\n    ta = vec3(-5.,0.,0.);\n  }\n  else\n  {\n    ro = vec3(sin(iTime),sin(iTime*.5),cos(iTime));\n  }\n  vec3 rd = normalize(ta-ro);\n\n  rd = getCam(rd,uv);\n  accCol = vec3(0.);\n  vec3 res = trace(ro,rd,128);\n  float depth = 5.;\n  if (res.y>0.)\n  {\n    vec3 p = ro+rd*res.y;\n    vec3 n = getNorm(p,res.x);\n    col = n*.5+.5;\n    vec3 rgb = mix(vec3(0.),vec3(.2,.7,.4)*2.,sat((sin((p.x+p.z)*20.)-.975)*400.));\n    col = rgb;\n    depth = res.y;\n  }\n  col+= accCol.zxy;\n  col = mix(col,\n    mix(vec3(.1,.67,.78),\n      vec3(.1),sat(uv.y*1.)),.5*sat(depth/5.));\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy-vec2(.5)*iResolution.xy) / iResolution.xx;\n  vec3 col = rdr(uv);\n  col = pow(col,vec3(1.45));\n  col += col/(2.+col);\n  col *= 1.5*(1.-sat(length(uv)));\n  col *= pow(1.-sat(length(uv)-.2), 2.);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}