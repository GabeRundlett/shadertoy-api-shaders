{
    "Shader": {
        "info": {
            "date": "1571063238",
            "description": "Applying some simple layering techniques to an octagonal diamond Truchet object to give it an extruded appearance.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wsc3Ds",
            "likes": 63,
            "name": "Faux Layered Extrusion",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "diamond",
                "truchet",
                "octagon",
                "faux",
                "extrusion"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 1883
        },
        "renderpass": [
            {
                "code": "/*\n\n\tFaux Layered Extrusion\n\t----------------------\n\n\tApplying some simple layering techniques to an octagonal diamond Truchet object \n    to give it an extruded appearance -- No 3D was harmed during the making of this \n    example, as they say. :)\n\n\tGraphics designers have been layering 2D fields to produce faux 3D effects for \n\tyears. A lot of it is common sense, and easy to apply. Referring to the imagery, \n\tyou can see that it's a simple application of three main layers -- A drop shadow \n    layer, an extruded layer on top of that, and the top layer. Each layer requires \n    a separate sample. The main object, in this case, is a simplified blobby Truchet \n    based on an octagon diamond grid, but it can be anything simple -- The Truchet\n    is simplified because not all octagonal tile combinations are used. I've also \n    sprinkled in some extra beacon-like objects between the layers to enhance the \n    illusion a bit.\n\n\tThe code itself is just an application of the above, with some extra window\n\tdressing thrown in. I made a lot of it up as I went along, so I wouldn't pay too \n    much attention to it. It's helpful to be comfortable with applying a 2D field \n\tlayer using the \"mix\" and \"smoothstep\" functions, and for anyone who's not, it\n    only takes a few minutes to figure out.\n\t\n\t\n    References:\n\n\t// Fizzer put together a Truchet pattern based on an octagonal diamond grid a\n    // while back. The Truchet here is a different kind (blobs instead of arcs), but \n    // is essentially based on the same premise.\n    4.8^2 Truchet - Fizzer\n    https://www.shadertoy.com/view/MlyBRG\n\n    // BigWIngs's popular Youtube channel. It's always informative seeing how others \n    // approach various graphics topics.\n    Shader Coding: Truchet Tiling Explained! -  The Art of Code\n\thttps://www.youtube.com/watch?v=2R7h76GoIJM\n    \n    // A fancier octagon-diamond blobby Truchet pattern rendered using 3D \n    // techniques, which, ironically, was much easier to produce. :)\n    Extruded Octagon Diamond Truchet - Shane\n    https://www.shadertoy.com/view/3tGBWV\n    \n*/\n\n\n// Display the octagonal diamond grid. If you'd like a rough idea how the Truchet is \n// constructed, uncomment this. From more information, see the \"distField\" function.\n//#define SHOW_GRID\n    \n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){  return fract(sin(dot(p, vec2(27.619, 57.583)))*43758.5453); }\n \n// vec2 to vec2 hash.\nvec2 hash22(vec2 p) { \n\n    // Faster, but doesn't disperse things quite as nicely. However, when framerate\n    // is an issue, and it often is, this is a good one to use. Basically, it's a tweaked \n    // amalgamation I put together, based on a couple of other random algorithms I've \n    // seen around... so use it with caution, because I make a tonne of mistakes. :)\n    float n = sin(dot(p, vec2(27, 57)));\n    return fract(vec2(262144, 32768)*n)*2. - 1.; \n    \n    // Animated.\n    //p = fract(vec2(262144, 32768)*n);\n    //return sin(p*6.2831853 + iTime); \n    \n}\n\n// Based on IQ's gradient noise formula.\nfloat n2D3G( in vec2 p ){\n   \n    vec2 i = floor(p); p -= i;\n    \n    vec4 v;\n    v.x = dot(hash22(i), p);\n    v.y = dot(hash22(i + vec2(1, 0)), p - vec2(1, 0));\n    v.z = dot(hash22(i + vec2(0, 1)), p - vec2(0, 1));\n    v.w = dot(hash22(i + 1.), p - 1.);\n\n#if 1\n    // Quintic interpolation.\n    p = p*p*p*(p*(p*6. - 15.) + 10.);\n#else\n    // Cubic interpolation.\n    p = p*p*(3. - 2.*p);\n#endif\n\n    return mix(mix(v.x, v.y, p.x), mix(v.z, v.w, p.x), p.y);\n    //return v.x + p.x*(v.y - v.x) + p.y*(v.z - v.x) + p.x*p.y*(v.x - v.y - v.z + v.w);\n}\n\n\n// Truchet distance formula. It's set to circles, but you could try\n// the octagonal distance metric, if you wanted.\nfloat distT(vec2 p){\n    \n    return length(p);\n    \n    //p = abs(p);\n    //return max(max(p.x, p.y), (p.x + p.y)*.7071);\n}\n\n// Beacon ID hack, based on the way the Truchet is produced.\nfloat id = 0.01;\n\n\n// A blobby octagonal diamond structure. Test to see whether the pixel is inside\n// a diamond tile or an octagonal tile, then render the appropriate tile.\n// A diamond tile will have two circles cut out at opposite ends, and an octagon\n// will have four circles cut out at the correct positions. It's all pretty simple.\n// However blobby Truchet tiles on square-based grids need to have their distances\n// flipped on alternating checkered tiles. It slightly complicates the code, but\n// I'm sure it's nothing that people can't handle. :)\n//\n// Uncomment the \"SHOW_GRID\" define and refer to imagery get better idea.\nvec3 distFieldT(vec2 q){\n    \n    \n    float d = 1e5;\n    \n    // Offsetting the diamond tiles by half a unit.\n    vec2 p = q - .5;\n    \n    // Tile ID and local coordinates.\n    vec2 ip = floor(p);\n    p -= ip + .5;\n    \n    \n    const float sqrt2 = sqrt(2.);\n    \n    \n    // Side length. Due to the symmetry, it's the side length of both the\n    // octagon and diamond.\n    float s = 1./(1. + sqrt2);\n    \n    \n    // 2D diamond field... The dimensions are calculated using basic trigonometry. \n    // Although, I was still too lazy to do it myself.\n    float dia = (abs(p.x) + abs(p.y))/sqrt2 - s/2.;\n    \n   \n    id = -1.;\n    \n    // If we're inside a diamond, then render the diamond tile. Anything outside of this\n    // will obviously be inside an octagon tile. In case it isn't obvious, you could test\n    // for an octagonal hit too, but a diamond is easier.\n    if(dia<.0){\n        \n        \n        // Rotate random tiles.\n        float rnd = hash21(ip);\n        if(rnd<.5) p = rot2(3.14159/2.)*p;\n        \n        // Chop out two circles on opposite corners. Use the define to display\n        // the grid and refer to the imagery.\n        p.y = abs(p.y);\n        d = min(d, distT(p - vec2(0, s/sqrt2)) - s/2.);\n        \n        // Flip the distances on alternating checkered tiles.\n        float ch = mod(ip.x + ip.y, 2.);\n        if(ch<.5) d = -d;\n        \n        // Flip the distances on random tiles as well.\n        if(rnd<.5) d = -d;\n        \n        // Moving the tile ID away from the center of the octagonal tile\n        // to the center of the diamond tile.\n        ip += .5;\n        \n    }\n    else {\n        \n        // If we're inside an octagon cell (outside a diamond), then obtain the \n        // ID (similar to the diaomond ID, but offset by half a cell) and \n        // fractional coordinates.\n        p = q;\n        vec2 ip = floor(p);\n        p -= ip + .5; // Equivalent to: fract(p) - .5;\n        \n        // Rotate random tiles. You don't really the extra addition, but I \n        // figured it might mix things up more... maybe. :)\n        float rnd = hash21(ip + vec2(.1, .3));\n        if(rnd<.5) p = rot2(3.14159/4.)*p;\n        \n        // Chop out four circles on opposite corners. Use the define to display\n        // the grid and refer to the imagery.\n        d = min(d, distT(p - vec2(-.5, s/2.)) - s/2.);\n        d = min(d, distT(p - vec2(s/2., .5)) - s/2.);\n        d = min(d, distT(p - vec2(.5, -s/2.)) - s/2.);\n        d = min(d, distT(p - vec2(-s/2., -.5)) - s/2.);\n        \n        // Flip the distances on alternating checkered tiles.\n        float ch = mod(ip.x + ip.y, 2.);\n        if(ch>.5) {\n            d = -d;\n            id = -id;\n        }\n        \n        // Flip the distances on random tiles as well.\n        if(rnd<.5) {\n            d = -d;\n            id = -id;\n        }\n    }\n    \n    // Return the distance and center tile ID.\n    return vec3(d, ip);\n    \n}\n \n\n// The beacon distance function.\nfloat distS(vec2 p){\n    \n    // Circle.\n    return length(p);\n    \n    // Other metrics to try.\n    //p = abs(p);\n    //return max(max(p.x, p.y), (p.x + p.y)*.7071);\n    \n    //return max(p.x, p.y);\n    //return max(p.x*.8660254 + p.y*.5, p.y);\n    //return (p.x + p.y)*.7071;\n    \n    \n    \n}\n\n// The beacon-like shape distance field function.\nvec3 distFieldS(vec2 p){\n    \n    // p += vec2(0, .5); \n    vec2 ip = floor(p);\n    p -= ip + .5;\n   \n    // Applying just a small random center offset.\n    float d = distS(p - (hash22(ip) - .5)*.05) - .115;\n    \n    return vec3(d, ip);\n}  \n\n\n#ifdef SHOW_GRID\n// The ocatagonal-dimond grid boundaries.\nfloat gridField(vec2 q){\n    \n    // Offsetting the diamond tiles by half a unit. \n    vec2 p = q - .5;\n    vec2 ip = floor(p);\n    p -= ip + .5;\n\n    \n    // 2D diamond field... The dimensions are calculated using basic trigonometry. \n    // Although, I was still too lazy to do it myself.\n    float dia = abs(p.x) + abs(p.y) - (1. - sqrt(2.)/2.);\n    \n    float d = 1e5;\n    \n    // If we're inside a diamond, then render the diamond tile. Anything outside of this\n    // will obviously be inside an octagon tile.\n    if(dia<.0){\n        \n        d = dia;\n        \n        ip += .5;\n        \n    }\n    else {\n        \n        // If we're inside an octagon cell (outside a diamond), then obtain the \n        // ID (similar to the diaomond ID, but offset by half a cell) and \n        // fractional coordinates.\n        p = q;\n        vec2 ip = floor(p);\n        p -= ip + .5; // Equivalent to: fract(p) - .5;\n        \n        \n        float oct = max((abs(p.x) + abs(p.y))/sqrt(2.), max(abs(p.x), abs(p.y))) - .5;\n        d = oct;\n    }\n    \n    d = abs(d) - .01;\n    \n    \n    return d;\n    \n}\n#endif\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Aspect correct screen coordinates.\n    float iRes = min(iResolution.y, 800.);\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    // Scaling and translation.\n    float gSc = 4.5;\n    //rot2(3.14159/4.)*\n    // Depending on perspective; Moving the oject toward the bottom left, \n    // or the camera in the north east (top right) direction. \n    vec2 p = uv*gSc - vec2(cos(iTime/3.)*1.5, -.5*iTime);\n    \n    \n    vec2 oP = p;\n    \n    // Smoothing factor, based on resolution and scale.\n    float sf = 1./iResolution.y*gSc;\n    \n    // Wobbling the coordinates, just a touch, in order to give a subtle hand drawn appearance.\n    p += vec2(n2D3G(p*4.), n2D3G(p*4. + 7.3))*.025;\n\n\n    // Main layer shadow distance and shadow vector. The distance and angle are chosen to suit\n    // the example.\n    float vsd = .08;\n    vec2 vs = rot2(6.2831/8.*3.5)*vec2(0, 1);\n    //\n    // The top layer of the main object. Without the extrusion and shadows, this would be\n    // all that you'd need.\n    vec3 d = distFieldT(p);\n    float svID = id; // An ID hack to distinguish between sea and land beacons.\n    //\n    // Extrusion layer, shadow layer and highlight layer. I think you could get away with one\n    // less sample, but I was feeling lazy. At any rate, four samples is much cheaper than an\n    // the work required to produce real 3D extrusion.\n    vec3 d3d = distFieldT(p - vs*vsd);\n    vec3 dsh = distFieldT(p - vs*vsd*2.5);\n    vec3 dh = distFieldT(p + vs*vsd);\n    \n    // The same for the beacons. I've offset the beacon's top layer a bit to give the impression\n    // that it's... sitting higher... I put this together a while back and I'm pretty sure I was\n    // sober, so I must have had my reasons. :D\n    float vsd2 = .06;\n    vec3 d2 = distFieldS(p + vs/2.*vsd2);\n    vec3 d3d2 = distFieldS(p - vs/2.*vsd2);\n    vec3 dsh2 = distFieldS(p - vs*vsd2*2.5);\n    vec3 dh2 = distFieldS(p + vs*vsd2);\n    \n    \n    // Random beacon numbers. Some are rendered and some are not.\n    float rnd = hash21(d2.yz + .07);\n    float rnd2 = hash21(d2.yz + .34);\n    float rndS = hash21(dsh2.yz + .07);\n    \n    // It took me a while to figure out how I'd named these -- Botton color,\n    // top color and side (extruded) color. :)\n    vec3 bCol = vec3(.26, .52, 1); //vec3(.7, .55, .45);\n    vec3 tCol = vec3(.9, .7, .55); //vec3(.7, .9, .4); //vec3(.9, .8, .7);\n    vec3 sCol = vec3(1.2, .6, .4);\n    \n    // Initializing the overall scene color to the blue sea color.\n    vec3 col = bCol;\n    \n    // Texture coordinates -- Rotated to match the angle of the extruded layer.\n    vec2 pTx = rot2(-6.2831/8.*3.5)*p;\n    // Rotating the top layers an extra 45-90 degrees, but it can be anything that \n    // you feel looks OK.\n    vec2 pTx2 = rot2(-6.2831/8.*3.5 - 3.14159/4.)*p;\n    \n    // Extruded and top line patterns.\n    float lnPat = clamp(cos(pTx.x*6.2831*22.)*2. + 1.5, 0., 1.);\n    float lnPat2 = clamp(cos(pTx2.x*6.2831*22.)*2. + 1.5, 0., 1.);\n    \n    // Extruded layer texture, combined with the extruded layer line pattern.\n    vec3 tx = texture(iChannel0, pTx/gSc).xyz; tx *= tx;\n    tx = min(smoothstep(-.1, .3, tx), 1.);\n    tx *= lnPat*.5 + .7;\n    \n    // Top layer texture, combined with the top layer line pattern.\n    vec3 tx2 = texture(iChannel0, pTx2/gSc).xyz; tx2 *= tx2;\n    tx2 = min(smoothstep(-.1, .3, tx2), 1.);\n    tx2 *= lnPat2*.3 + .8;\n    \n    // Applying some texturing to the blue sea-like layer.\n    col *= tx2;\n    \n    // Varying the thickness of the layers with a time varying function. This is just\n    // a little animation to add extra visual interest. Set it to zero to see what it does.\n    float sFunc = (n2D3G(p/gSc*3. - iTime/4.)*.67 + n2D3G(p/gSc*6. - iTime/2.)*.33)*.16;\n    // Adding the variance to the main layers.\n    d.x += sFunc;\n    d3d.x += sFunc;\n    dsh.x += sFunc;\n    // Adding a little less to the beacon layers.\n    d2.x += sFunc/1.5;\n    d3d2.x += sFunc/1.5;\n    dsh2.x += sFunc/1.5;     \n    \n    \n    // The main extruded layer, complete with fake AO and stroke lines.\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., d3d.x - vsd/2. - .07))*.5);\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, d3d.x - vsd/2. - .035)));\n    col = mix(col, sCol*tx, (1. - smoothstep(0., sf, d3d.x - vsd/2.)));\n    \n    // The main object drop shadow.\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., dsh.x - vsd*2.5/2.))*.5);\n    \n    \n \n    // The extruded layers of the beacons that sit at water level... Why they'd do that\n    // is anyone's guess, but I thought it looked more interesting. :)\n    if(rnd<.5){\n        \n        col = mix(col, vec3(0), (1. - smoothstep(0., sf, d3d2.x - vsd2/2. - .035)));\n        col = mix(col, sCol*tx, (1. - smoothstep(0., sf, d3d2.x - vsd2/2.)));\n        \n        // Shadow.\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., dsh2.x - vsd2*2.5/2.))*.5);\n\n    }\n    \n\n    // The top layer of the main Truchet object. Commenting these out looks interesting,\n    // but takes away the extruded look.\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, d.x - .035))*.98);\n    col = mix(col, tCol*tx2, (1. - smoothstep(0., sf, d.x)));\n    \n   \n    \n    // Highlighting -- This gives the scene objects a shiny specular-like rounded look.\n    // Without it, everything looks extruded, but flat. Note the (450./iRes) term; It's\n    // hacked in there to keep the highlighting width consistant with screen changes.\n    col = mix(col, min(col*1.5, 1.), (1. - smoothstep(0., sf*4., max(-d3d.x, d.x)))*.9);\n    col = mix(col, vec3(1.5)*tx2, (1. - smoothstep(0., sf*4., max(-d3d.x, d.x + vsd*(450./iRes))))*.9);\n   \n    \n     \n    // Beacon layer.\n    if(rnd<.5 && rndS<.5){\n        \n        \n        // Extruded beacon layers.\n     \tif(svID>0.){\n        \tcol = mix(col, vec3(0), (1. - smoothstep(0., sf, d3d2.x - vsd2/2. - .035)));\n         \tcol = mix(col, sCol*tx, (1. - smoothstep(0., sf, d3d2.x - vsd2/2.)));\n            \n            col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., dsh2.x - vsd2*2.5/2.))*.5);\n    \t}\n\n        // Beacon color.\n        //vec3 dCol = vec3(1, rnd*.65 + .35, rnd);\n        // IQ's handy palette formula.\n    \tvec3 dCol = .525 + .425*cos(rnd2*6.2831 + vec3(11, 22, 3)/3.);\n       \n        // Beacon tops.\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf, d2.x - .035))*.98);\n        col = mix(col, dCol*tx2, (1. - smoothstep(0., sf, d2.x)));\n        //\n        // Beacon top centers.\n        dCol = .525 + .425*cos(rnd2*6.2831 + vec3(11, 22, 3)/3. + .25);\n        float sz = (.05 + rnd2*.035);\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf, d2.x + sz - .035))*.98);\n        col = mix(col, dCol*tx2, (1. - smoothstep(0., sf, d2.x + sz)));\n        \n        \n        // Highlighting.\n        col = mix(col, min(col*1.5, 1.), (1. - smoothstep(0., sf*4., max(-d3d2.x, d2.x)))*.9);\n        col = mix(col, min(col*3., 1.), (1. - smoothstep(0., sf*4., max(-d3d2.x, d2.x + vsd2*(450./iRes))))*.9);\n\n        \n    }\n\n    \n    #ifdef SHOW_GRID\n    float grid = gridField(p);\n    col = mix(col, col*5., (1. - smoothstep(0., sf*2., grid - .035)));\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, grid - .0275)));\n    col = mix(col, vec3(1.25)*tx2, (1. - smoothstep(0., sf, grid + .005)));\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}