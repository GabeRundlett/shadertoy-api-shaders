{
    "Shader": {
        "info": {
            "date": "1649752596",
            "description": "need to find way to follow the edge of the picked color from the edge_point to the click_edge_point (buffer a)",
            "flags": 32,
            "hasliked": 0,
            "id": "sljcWW",
            "likes": 2,
            "name": "instant flood fill",
            "published": 3,
            "tags": [
                "fill"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord),0 ).xyz;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord),0 ).xyz;\n    vec3 picked_col = texelFetch( iChannel0, ivec2(iMouse.xy),0 ).xyz;\n    if (col == picked_col){\n        vec2 edge_point = floor(fragCoord); //a point on the edge of the same area as this pixel\n        vec2 click_edge_point = floor(iMouse.xy); //a point on the edge of the same area as the last click\n        //trace from the coord of this pixel to the edge of the color\n        //count edge of screen as edge\n        while (texelFetch( iChannel0, ivec2(edge_point) + ivec2(0,1),0 ).xyz == col){\n            if (edge_point.y + 1.0 < iResolution.y) {\n                edge_point += vec2(0,1);\n            } else {\n                break;\n            }\n        }\n        //trace from the coord of the last click to the edge of the color\n        //count edge of screen as edge\n        while (texelFetch( iChannel0, ivec2(click_edge_point) + ivec2(0,1),0 ).xyz == col){\n            if (click_edge_point.y + 1.0 < iResolution.y) {\n                click_edge_point += vec2(0,1);\n            } else {\n                break;\n            }\n        }\n        //follow edge from edge_point to click_edge_point\n        //if it reaches click_edge_point change col\n        //if it wraps back to edge_point exit\n        //treat screen edge as edge\n    }\n    \n    //outline (for testing)\n    if (col == picked_col){\n        vec3 x_pos_col = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(1,0),0 ).xyz;\n        vec3 x_neg_col = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1,0),0 ).xyz;\n        vec3 y_pos_col = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(0,1),0 ).xyz;\n        vec3 y_neg_col = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(0,-1),0 ).xyz;\n        if (x_pos_col + x_neg_col + y_pos_col + y_neg_col != picked_col*4.0){\n            col = vec3(0);\n        }\n        //follow edge\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}