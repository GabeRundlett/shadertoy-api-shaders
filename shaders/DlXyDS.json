{
    "Shader": {
        "info": {
            "date": "1691080688",
            "description": "Homero basico",
            "flags": 0,
            "hasliked": 0,
            "id": "DlXyDS",
            "likes": 20,
            "name": "Homero basico",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "homer",
                "homerobasico"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "///por jorge2017a2\n///Homero basico\n//3-ago-2023-\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.0),b,d)\n#define PI 3.141516\n\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nfloat sdCircle( vec2 p, float r )\n{return length(p) - r; }\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b; return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\nvec2 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\ncolOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.001,0.0));\nreturn colOut;\n}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\n\n\nvec3 lineasBz(vec2 uv, vec3 col)\n{\nvec2 pc1p1=vec2(3.650,3.770);\nvec2 pc1p2=vec2(4.360,4.290);\nvec2 pc1p3=vec2(4.490,3.480);\nvec2 pc2p1=vec2(3.980,3.750);\nvec2 pc2p2=vec2(4.650,4.280);\nvec2 pc2p3=vec2(4.680,3.320);\nvec2 pc3p1=vec2(2.630-0.05,1.730);\nvec2 pc3p2=vec2(2.800-0.05,1.720);\nvec2 pc3p3=vec2(2.710-0.05,1.570);\nvec2 pc4p1=vec2(4.540,1.410);\nvec2 pc4p2=vec2(4.560,1.730);\nvec2 pc4p3=vec2(4.690,1.620);\nvec2 pc5p1=vec2(2.890,1.870);\nvec2 pc5p2=vec2(3.010,2.050);\nvec2 pc5p3=vec2(3.220,2.020);\nvec2 pc6p1=vec2(2.990,1.620);\nvec2 pc6p2=vec2(2.820,1.760);\nvec2 pc6p3=vec2(2.890,1.880);\nvec2 pc7p1=vec2(3.230,2.010);\nvec2 pc7p2=vec2(3.340,2.050);\nvec2 pc7p3=vec2(3.460,2.080);\nvec2 pc8p1=vec2(4.490,1.690-0.05);\nvec2 pc8p2=vec2(4.520,1.860-0.05);\nvec2 pc8p3=vec2(4.720,1.770-0.05);\nvec2 pc9p1=vec2(4.440,1.340);\nvec2 pc9p2=vec2(4.500,1.250);\nvec2 pc9p3=vec2(4.610,1.280);\nvec3 colNegro=vec3(0.0);\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\nfloat d4= sdBezier(uv,pc4p1,pc4p2,pc4p3);\nfloat d5= sdBezier(uv,pc5p1,pc5p2,pc5p3);\nfloat d6= sdBezier(uv,pc6p1,pc6p2,pc6p3);\nfloat d7= sdBezier(uv,pc7p1,pc7p2,pc7p3);\nfloat d8= sdBezier(uv,pc8p1,pc8p2,pc8p3);\nfloat d9= sdBezier(uv,pc9p1,pc9p2,pc9p3);\ncol=DrawFigBorde(colNegro,col,d1); //pelo1\ncol=DrawFigBorde(colNegro,col,d2); //pelo2\ncol=DrawFigBorde(colNegro,col,d3); //oreja\ncol=DrawFigBorde(colNegro,col,d4);\ncol=DrawFigBorde(colNegro,col,d5);\ncol=DrawFigBorde(colNegro,col,d6);\ncol=DrawFigBorde(colNegro,col,d7);\ncol=DrawFigBorde(colNegro,col,d8);\ncol=DrawFigBorde(colNegro,col,d9);\n    return col;\n}\n\n\nvec3 Ojos(vec2 p, vec3 col)\n{ float t=iTime;\nfloat px=abs(0.5*sin(t));\nfloat py=abs(0.15*sin(t*cos(t*0.25)))-0.1;\n\nfloat r15=0.46;\nvec2 p15=vec2(3.89,2.28);\nfloat d15= sdCircle(p-p15,r15);\n\nfloat r16=0.44;\nvec2 p16=vec2(3.07,2.29);\nfloat d16= sdCircle(p-p16,r16);\n\nfloat r17=0.1;\nvec2 p17=vec2(2.72+px,2.46+py);\nfloat d17= sdCircle(p-p17,r17);\n\nfloat r18=0.1;\nvec2 p18=vec2(3.52+px,2.38+py);\nfloat d18= sdCircle(p-p18,r18);\n    col= DrawFigBorde(vec3(1.0),col,d16);\n    col= DrawFigBorde(vec3(1.0),col,d15);\n    col= DrawFigBorde(vec3(0.0),col,d17);\n    col= DrawFigBorde(vec3(0.0),col,d18);\n    return col;\n}\n\nvec3 pelos02(vec2 p, vec3 col)\n{\nvec2 A,B;\np.y=4.15-p.y;\nA= vec2(4.36,2.47);\nB= vec2(4.6,1.84);\nfloat d1=sdSegment(p,A,B);\nA= vec2(4.61,1.87);\nB= vec2(4.64,2.37);\nfloat d2=sdSegment(p,A,B);\n\nA= vec2(4.62,2.36);\nB= vec2(4.86,1.9);\nfloat d3=sdSegment(p,A,B);\nA= vec2(4.84,1.91);\nB= vec2(4.77,2.31);\nfloat d4=sdSegment(p,A,B);\n    col= DrawFigBorde(vec3(0.0),col,d1);\n    col= DrawFigBorde(vec3(0.0),col,d2);\n    col= DrawFigBorde(vec3(0.0),col,d3);\n    col= DrawFigBorde(vec3(0.0),col,d4);\n    return col;\n}\n\nvec3 Homero(vec2 p, vec3 col)\n{float r1=1.0;\nvec2 p1=vec2(3.81,2.83);\nfloat d1= sdCircle(p-p1,r1);\n\nfloat r2=1.0;\nvec2 p2=vec2(3.87,2.84);\nfloat d2= sdCircle(p-p2,r2);\n\nfloat r3=0.9;\nvec2 p3=vec2(3.65,1.35);\nfloat d3= sdCircle(p-p3,r3);\n\n    d1=min(d1,d2);\n    d1=min(d1,d3);\n    vec3 colc=vec3(0.94,0.72,0.01);\n\nvec2 pos=vec2(3.21,2.07);\nvec2 med=vec2(0.425,1.025);\nfloat d4= sdBox(p-pos, med );\n\nfloat ang = 5.0 * PI / 180.0;\nvec2 pr = Rotate(p- pos, med/2.0, ang);\nd4 = sdBox(pr, med);\n    d1=min(d1,d4);\n\npos=vec2(4.24,1.96);\nmed=vec2(0.425,1.025);\nang = 10.0 * PI / 180.0;\npr = Rotate(p- pos, med/2.0, ang);\nfloat d5 = sdBox(pr, med);\n    d1=min(d1,d5);\n    //da,d2,d3,d4,d5 =cabeza\n    \npos=vec2(3.87,0.62);\nmed=vec2(0.67,0.65);\nfloat d6= sdBox(p-pos, med );\n    d1=min(d1,d6); //cuello\n\nfloat r7=0.6;\nvec2 p7=vec2(3.62,0.91);\nfloat d7= sdCircle(p-p7,r7);\n    d1=min(d1,d7);// barba\n    vec3 colb=vec3(0.85,0.76,0.67);\n\nfloat r8=0.46;\nvec2 p8=vec2(3.08,1.12);\nfloat d8= sdCircle(p-p8,r8);\n    d7=min(d7,d8); //barba\n\npos=vec2(3.4,1.1);\nmed=vec2(0.79,0.48);\nfloat d9=sdEllipse(p-pos,med);\nd7=min(d7,d9);    \n\npos=vec2(3.08,0.65);\nmed=vec2(0.16,0.13);\nfloat d10=sdEllipse(p-pos,med); //barba\n\n    d7=min(d7,d10);\n\npos=vec2(2.84,0.81);\nmed=vec2(0.31,0.13);\n ang = -5.0 * PI / 180.0;\n pr = Rotate(p-pos, med/2.0, ang);\nfloat d11  = sdEllipse(pr, med);\n    d7=min(d7,d11);\n\npos=vec2(2.76,0.87);\nmed=vec2(0.24,0.14);\nang = -5.0 * PI / 180.0;\n pr = Rotate(p-pos, med/2.0, ang);\nfloat d12  = sdEllipse(pr, med);\n    d7=min(d7,d12);\n\n//oreja\npos=vec2(4.4,1.58);\nmed=vec2(0.25,0.19);\nang = -60. * PI / 180.0;\n pr = Rotate(p-pos, med/2.0, ang);\nfloat d13  = sdEllipse(pr, med);\n    d1=min(d1,d13);\n\n\npos=vec2(2.77,1.5);\nmed=vec2(0.25,0.19);\nang = 60.0 * PI / 180.0;\npr = Rotate(p-pos, med/2.0, ang);\nfloat d14  = sdEllipse(pr, med);\n\nfloat py=abs(0.05*sin(iTime));\nfloat r19=0.08;\nvec2 p19=vec2(3.09,0.65+py);\nfloat d19= sdCircle(p-p19,r19);\n\npos=vec2(2.81,2.7);\nmed=vec2(0.17,0.18);\nfloat d20=sdEllipse(p-pos,med);\n    d1=min(d1,d20);\n\n//nariz\npos=vec2(3.29,1.8);\nmed=vec2(0.4,0.2);\nfloat d1a=sdEllipse(p-pos,med);\n\n pos=vec2(3.5,1.82);\n med=vec2(0.158,0.2);\n ang = -20.0 * PI / 180.0;\n pr = Rotate(p-pos, med, ang);\nfloat d2a  = sdEllipse(pr, med);\n\n pos=vec2(3.14,1.82);\n med=vec2(0.25,0.18);\nfloat d3a=sdEllipse(p-pos,med);\n    d1a=min(d1a,d2a);\n    d1a=min(d1a,d3a);\n    \n    col= DrawFigBorde(colc, col, d14);\n    col= DrawFigBorde(colc, col, d1);\n    col= DrawFigBorde(colb, col, d7);//barba\n    col= DrawFigBorde(vec3(0.0),col,d19); //boca\n    col=Ojos(p,col);\n    col=lineasBz(p,col);\n    col= DrawFigSolo(colc, col, d1a);\n    col= pelos02(p,col);\n    return col;\n}\n\nvec3 escena(vec2 p, vec3 col)\n{ col= Homero(p,col);  return col; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 uv2=uv*5.0;\n    uv-=vec2(-1.0,-0.5);\n    uv*=4.0;\n    vec3 col=vec3(0.,0.58,0.99);\n    col=escena(uv,col);\n    col=escena(vec2(-uv.x+4.0,uv.y)+vec2(sin(iTime),0.0),col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}