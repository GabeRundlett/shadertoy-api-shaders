{
    "Shader": {
        "info": {
            "date": "1707923248",
            "description": "sci-fi box",
            "flags": 0,
            "hasliked": 0,
            "id": "lXf3W2",
            "likes": 25,
            "name": "sci-fi box",
            "published": 3,
            "tags": [
                "ui",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 759
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 64\n#define MAX_DIST 64.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define MAT0 0\n#define MAT1 1\n#define MAT2 2\n#define MAT3 3\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nfloat B3D(vec3 p, vec3 s) {\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat bevelCube(vec3 p, float s, float bevel){\n    vec3 prevP = p;\n    float size = s;\n    float bevelSize = bevel;\n    float d = B3D(p,vec3(size));\n    \n    float a = radians(45.);\n    p = abs(p)-(size-bevelSize);\n    float bevelMask = dot(p,vec3(0.0,cos(a),sin(a)));\n    d = max(bevelMask,d);\n    bevelMask = dot(p,vec3(sin(a),cos(a),0.0));\n    d = max(bevelMask,d);\n    bevelMask = dot(p,vec3(cos(a),0.0,sin(a)));\n    d = max(bevelMask,d);\n    return d;\n}\n\nfloat sdBase( in vec3 p)\n{\n    p = mod(p,2.)-1.;\n    return bevelCube(p,0.95,0.05);\n}\n\nfloat arrowItem0(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.12,0.023));\n    \n    float a = radians(45.);\n    p.x+=0.04;\n    p.x = abs(p.x)-0.028;\n    d = max(-max(p.y+0.011,dot(p,vec2(cos(a),sin(a)))),d);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.12;\n    d = max(dot(p,vec2(cos(a),sin(a))),d);\n    \n    p = prevP;\n    a = radians(-45.);\n    p.x-=0.025;\n    p.x = abs(p.x)-0.025;\n    d = max(-max(-(p.y-0.011),dot(p,vec2(cos(a),sin(a)))),d);\n    \n    d = max(-B(p,vec2(0.03,0.006)),d);\n    \n    p.x -= 0.067;\n    d = max(-B(p,vec2(0.01,0.006)),d);\n    \n    return d;\n}\n\nfloat arrowBase(vec2 p){\n    p.x+=iTime*0.15+0.1;\n    p.x = mod(p.x,0.2)-0.1;\n    p.y = abs(p.y)-0.05;\n    p*=Rot(radians(-45.));\n    float d = arrowItem0(p);\n    return d;\n}\n\nfloat arrow(vec2 p, float dir){\n    vec2 prevP = p;\n    p.x=abs(p.x);\n    p.x*=dir;\n    float d = arrowBase(p);\n    return d;\n}\n\nfloat arrow2(vec2 p){\n    vec2 prevP = p;\n    float d = abs(Tri(p,vec2(0.08)))-0.005;\n    p*=Rot(radians(1.5*iTime*-20.));\n    d = max((abs(p.y)-0.02),d);\n    p = prevP;\n    float d2 = abs(Tri(p,vec2(0.08)))-0.002;\n    p.y+=0.05;\n    d2 = max(-Tri(p,vec2(0.08)),d2);\n    d = min(d,d2);\n    p = prevP;\n    p.y+=0.03;\n    d2 = Tri(p,vec2(0.03));\n    d = min(d,d2);\n    return d;\n}\n\nfloat drawPanels(vec2 p){\n    vec2 prevP = p;\n    float d = arrow(p,1.0);\n    p*=Rot(radians(90.));\n    float d2 = arrow(p,1.0);\n    d = min(d,d2);\n    \n    p = prevP;\n    p = abs(p)-0.29;\n    p*=Rot(radians(45.));\n    d2 = arrow2(p);\n    d = min(d,d2);\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = sdBase(p);\n    \n    d = max(-B3D(p,vec3(6.)),d);\n    vec2 res = vec2(d,MAT0);\n    \n    float size = 0.38;\n    float bevelSize = 0.015;\n    float innerSize = 0.32;\n    d = bevelCube(p,size,bevelSize);\n    d = max(-B3D(p,vec3(innerSize,innerSize,1.)),d);\n    d = max(-B3D(p,vec3(1.,innerSize,innerSize)),d);\n    d = max(-B3D(p,vec3(innerSize,1.,innerSize)),d);\n    \n    p.xz*=Rot(radians(45.));\n    d = max(-B3D(p,vec3(size+0.2,size-0.06,0.01)),d);\n    p = prevP;\n    p.xz*=Rot(radians(-45.));\n    d = max(-B3D(p,vec3(size+0.2,size-0.06,0.01)),d);\n    \n    vec2 res2 = vec2(d,MAT1);\n    res = combine(res,res2);\n    \n    p = prevP;\n    d = drawPanels(p.xy)*0.15;\n    d = max(abs(p.z)-(size-0.02),d);\n    d = max(abs(p.x)-(size-0.05),d);\n    d = max(abs(p.y)-(size-0.05),d);\n    d = max(-(abs(p.z)-(size-0.03)),d);\n    res2 = vec2(d,MAT3);\n    res = combine(res,res2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(90.));\n    d = drawPanels(p.yz)*0.15;\n    d = max(abs(p.x)-(size-0.02),d);\n    d = max(abs(p.y)-(size-0.05),d);\n    d = max(abs(p.z)-(size-0.05),d);\n    d = max(-(abs(p.x)-(size-0.03)),d);\n    res2 = vec2(d,MAT3);\n    res = combine(res,res2);\n        \n    p = prevP;\n    d = drawPanels(p.xz)*0.15;\n    d = max(abs(p.y)-(size-0.02),d);\n    d = max(abs(p.x)-(size-0.05),d);\n    d = max(abs(p.z)-(size-0.05),d);\n    d = max(-(abs(p.y)-(size-0.03)),d);\n    \n    res2 = vec2(d,MAT3);\n    res = combine(res,res2);\n    \n    return res;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    float lastDistEval = 1e10;\n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,1,0));\n    float diff = clamp(dot(n,lightDir),-1.,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.9)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(2.), smoothstep(pi*0.35, pi*0.98, uv.y));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    float IOR =\t1.309; //IOR:index of reflection\n    vec3 rdir = refract(-rd,n,1.0/IOR); \n    if (mat == MAT0){\n        vec2 uv = p.xy;\n        vec2 prevUV = p.xz;\n        uv.y-=iTime*3.+4.5;\n        uv.y = mod(uv.y,8.)-4.;\n        float d = abs(uv.y)-0.0001;\n        \n        col = mix(vec3(0.015),vec3(1.2),1.-smoothstep(0.,0.3,d));\n        \n        float thick = 0.005;\n        uv = p.xz;\n        uv = mod(uv,0.3)-0.15;\n        d = min(abs(uv.x)-thick,abs(uv.y)-thick);\n        \n        uv = p.yz;\n        uv = mod(uv,0.3)-0.15;\n        float d2 = min(abs(uv.x)-thick,abs(uv.y)-thick);\n        d = min(d,d2);\n        \n        col = mix(col,vec3(0.03),S(d,0.0));\n        col = diffuseMaterial(n,rd,p,col);\n    } else if(mat == MAT1){\n        col = reflectionBg(SUV(rdir))*0.3;\n    } else if(mat == MAT2){\n        col = reflectionBg(SUV(rdir))*1.5;\n    } else if(mat == MAT3){\n        col = reflectionBg(SUV(rdir));\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0.0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.+sin(iTime*0.5)*20.));\n        ro.xz *= Rot(radians(mod(iTime*20.0,360.0)));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n\n    // testing the box panels drawing based on the 2D shape\n    /*\n    col = vec3(0.);\n    float dd = drawPanels(uv);\n    col = mix(col,vec3(1.),S(dd,0.0));\n    */\n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}