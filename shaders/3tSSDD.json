{
    "Shader": {
        "info": {
            "date": "1565843320",
            "description": "for more information see: https://www.desmos.com/calculator/kbjqpiv0qq\nusing iq's raymarching implementation from https://www.shadertoy.com/view/tl23RK",
            "flags": 0,
            "hasliked": 0,
            "id": "3tSSDD",
            "likes": 0,
            "name": "Lemon SDF",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "lemon"
            ],
            "usePreview": 0,
            "username": "spac",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define TAU 6.28318530718\n\n#define SDF_GRADIENT 1\n#define SDF_GRADIENT_PERIOD 0.075\n//\n// `Lemon` is defined as the self-intersecting region of a spindle torus\n//\n// `position` defines the centre of the lemon (point of symmetry)\n//\n// `vertical` defines the axis of rotation\n//\n// `radius` defines the minor radius of the torus\n// `focus` defines the major radius of the torus\n//\n// `vertical`, `radius`, and `focus` are multiplied by the scale of the lemon\n//\nstruct Lemon\n{\n    vec3 position;\n    vec3 vertical;\n    float radius;\n    float focus;\n};\n\nLemon lemon = Lemon(\n\tvec3(0.0, 0.0, 0.0),\n    normalize(vec3(0.0, 0.0, 1.0)),\n    1.15470053838,\n    0.57735026919\n);\n\n// `sagitta` defines the shape of the lemon and is between 0 (zero volume) and 1 (sphere)\nvoid makeLemon(in float sagitta, out float radius, out float focus)\n{\n    radius = (sagitta*sagitta + 1.0) / (2.0*sagitta);\n    focus  = radius - sagitta;\n}\n\nfloat sdLemonPerfect(vec3 p, Lemon lemon)\n{\n    vec3 s = p - lemon.position;\n    float t = dot(s, lemon.vertical) / dot(lemon.vertical, lemon.vertical);\n\n    vec3 x = t*lemon.vertical;\n    vec3 y = s - x;\n    float y2 = dot(y, y);\n    if (abs(t) >= 1.0) {\n        float l = lemon.focus*(abs(t) - 1.0);\n        if (y2 <= l*l) {\n            // corner case\n            return length(sign(t) * lemon.vertical - s);\n        }\n    }\n    // general case\n    return length(lemon.focus*-(y/sqrt(y2)) - s) - lemon.radius;\n}\n\nfloat sdLemon(vec3 p, Lemon lemon)\n{\n    vec3 s = p - lemon.position;\n    float t = dot(s, lemon.vertical) / dot(lemon.vertical, lemon.vertical);\n\n    vec3 y = s - t*lemon.vertical;\n\n    return length(lemon.focus*-normalize(y) - s) - lemon.radius;\n}\n\n// ===========================\n\nfloat intersectPlane(vec3 p, vec3 v, vec3 n, float k)\n{\n    return (k - dot(p, n)) / dot(v, n);\n}\n\nfloat map( in vec3 pos )\n{\n    float an = 2.5*(0.5+0.5*sin(iTime*1.1+3.0));\n    vec2 c = vec2(sin(an),cos(an));\n    //return sdCappedTorus(pos, c, 0.4, 0.1 );\n    return sdLemonPerfect(pos, lemon);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius, focus;\n    //makeLemon(0.6 + sin(0.5*iTime)*0.25, radius, focus);\n    //lemon.radius = radius;\n    //lemon.focus  = focus;\n    \n    // camera movement\t\n\tfloat an = 0.7*iTime;\n\tvec3 ro = 5.0*normalize(vec3( 1.0*cos(an), 0.5, 1.0*sin(an) ));\n    vec3 ta = vec3(0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv =          ( cross(uu,ww));\n    \n    // render\n    vec3 tot = vec3(0.0);\n\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n        \n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        } else {\n            \n        }\n        // gamma        \n        col = sqrt( col );\n      \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}