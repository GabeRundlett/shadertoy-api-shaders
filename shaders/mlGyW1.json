{
    "Shader": {
        "info": {
            "date": "1700162890",
            "description": "sdf grass instead of [url=DlKyzG]shell texturing[/url]. I don't like it tbh. ",
            "flags": 32,
            "hasliked": 0,
            "id": "mlGyW1",
            "likes": 1,
            "name": "sdf grass",
            "published": 3,
            "tags": [
                "smol"
            ],
            "usePreview": 0,
            "username": "01000001",
            "viewed": 128
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U ){\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 muv = (2.*iMouse.xy-r)/r.y;\n    \n    O = texture(iChannel0, uv + .5/r);\n    O = pow(O, vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define s(x) m = min(m, x)\nconst float farPlane = 1e5;\nconst float minDist = 1e-5;\nconst int maxSteps = 2<<7;\n\nvec2 masterCell;\n\n#define bladeH 500.\n#define bladeW 2.\n\n\n//hash by IQ https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\nfloat ellipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n} // By Inigo Quilez\n\n\nfloat df(vec3 p){\n    float m = farPlane;\n    \n\n    if (p.z > bladeH/2. + .3 ) return p.z - bladeH/2.;\n    \n    vec2 cell = floor(p.xy), tempCell;\n    vec2 cellUV = (p.xy-cell-.5)/2.;\n\n\n    //*\n    for (float x = -1.; x<=1.; x++){\n        for (float y = -1.; y <= 1.; y++){\n            tempCell = cell + vec2(x,y);\n            vec3 h = (hash(uvec3(0, mod(tempCell, 1e6)))-.5);\n\n            float d = ellipsoid(\n                vec3(cellUV + h.xy - vec2(x,y)*.5 + vec2(sin(p.z*h.z*3.), cos(p.z*h.z*3.))*.15, p.z), \n                vec3(bladeW, bladeW, bladeH)*.5\n            );\n            \n            if (d < m){\n                m = d;\n                masterCell = tempCell;\n            }\n        }\n    }\n    /*/\n    vec3 h = hash(uvec3(0, mod(cell, 1e6)))-.5;\n\n    s(\n        ellipsoid(\n            vec3(cellUV + h.xy, p.z), \n            vec3(bladeW, bladeW, bladeH)*.5\n        )\n    );\n\n    //*/\n    \n    return m;\n}\n\nvec3 norm(vec3 p, float e){\n    \n    return vec3(\n        \n        df(p + vec3(e, 0, 0)) - df(p - vec3(e, 0, 0)),\n        df(p + vec3(0, e, 0)) - df(p - vec3(0, e, 0)),\n        df(p + vec3(0, 0, e)) - df(p - vec3(0, 0, e))\n        \n    ) / (2. * e);\n\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    vec2 cuv = (2.*U-r)/r.y;\n    vec2 muv = (2.*iMouse.xy-r)/r.y;\n    \n    \n    vec3 o = vec3(0, iTime, bladeH*.5);\n    vec3 camf = vec3(sin(muv.x)*cos(muv.y), cos(muv.x)*cos(muv.y), sin(muv.y));\n    o -= camf*50.;\n    vec3 camr = normalize(cross(camf, vec3(0,0,1)));\n    vec3 camu = cross(camr, camf);\n    vec3 dir = normalize(camf*2. + camu*cuv.y + camr*cuv.x);\n\n    float d,t = 0.;\n    vec3 p;\n    \n    for (int i = 0; i<maxSteps; i++){\n        \n        p = o + dir * t;\n        d = df(p);\n        \n        t += d*.8;\n        \n        if (d < minDist) break;\n        if (d > farPlane) break;\n        \n    }\n    if (p.z > bladeH/2.){\n        O = vec4(1.,exp(-dir.z),exp(dir.z-1.)*.5,1);\n        return;\n    }\n    \n    \n    vec3 h = hash(uvec3(0, mod(masterCell, 1e5)));\n    \n    O = vec4(h.x*.02 + .02 + h.y*.04, .06 + h.y*.07, h.z * .01 + .02 + h.y*.02, 1)\n    *exp((p.z-bladeH/2.)/2.)\n    *(dot(norm(p, t*1e-2), vec3(0, 0, 1))*.5 + .5)\n    *3.\n    ;\n    //vec4(1.-pow(1.-dot(norm(p, t*1e-2).xyz, -dir), 5.));\n    //vec4(exp(-t/30.));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}