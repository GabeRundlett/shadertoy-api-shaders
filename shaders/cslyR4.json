{
    "Shader": {
        "info": {
            "date": "1686616066",
            "description": "Smoothly interpolates over a pseudorandom color gradient over time",
            "flags": 64,
            "hasliked": 0,
            "id": "cslyR4",
            "likes": 2,
            "name": "Endless Rainbow Gradient w/ Dots",
            "published": 3,
            "tags": [
                "gradient",
                "abstract",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "djstomp",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "float absin( in float f)\n{\n    return abs(sin(f));\n}\n\nvec3 timify( in vec3 a)\n{\n    float lTime = 20.+0.07*iTime;\n    return vec3(a.x*absin(lTime/5.), a.y*absin(lTime/3.), a.z*absin(lTime/1.));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 paltime( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d, in float y_factor )\n{\n    return timify(a) + timify(b)*cos( 6.28318*(timify(c)*t+timify(d)) + y_factor );\n}\n// Modified signed distance function for multiple circles\nfloat circleSDF(vec2 p, vec2 center, float radius, int numCircles)\n{\n    float sdf = 1e3;\n    for(int i = 0; i < numCircles; i++)\n    {\n        float phase = float(i) / float(numCircles) * 2.0 * 3.1416; // Calculate phase based on current circle\n        vec2 circleCenter = center + vec2(cos(phase), sin(phase)) * 0.3; // Move the center of each circle\n        float dist = length(p - circleCenter) - radius;\n        sdf = min(sdf, dist); // Keep the minimum distance (creates a \"union\" of the circles)\n    }\n    return sdf;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    float lTime = 2.*abs(sin(iTime/11.)*1.2) + 3.;\n    // Apply zoom\n    float zoom = 3. + 2.*sin(iTime/5.)+1.+sin(2./(lTime-0.5));\n    uv /= zoom;\n    \n    // Apply camera rotation\n    float cameraRotation = abs(cos(iTime/13.))*3.14*sin(0.2+ iTime/7.); // Rotate over time\n    float cs = cos(cameraRotation);\n    float sn = sin(cameraRotation);\n    vec2 p = mat2(cs, -sn, sn, cs) * uv;\n\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    float windowSize = 0.01;\n    \n    // animate\n    p.x += .02* (lTime + cos(lTime*0.1));\n    vec3 col = paltime(max(p.x, p.y), vec3(0.8,0.5,0.4), vec3(0.2,0.4,0.2), vec3(2.0,1.0,1.0), vec3(0.0,0.25,0.25), \n        0.5*(cos(lTime+10.) + 0.8*cos(lTime+10.) + 0.45*sin(lTime+10.))*p.y*3.14159 );\n\n    // Smoothly interpolate colors\n    float edge0 = 0.1; // define minimum value of the color components\n    float edge1 = 0.9; // define maximum value of the color components\n    col = mix(vec3(edge0), vec3(edge1), smoothstep(edge0, edge1, col));\n    \n    // Add the SDF to the color\n    vec2 center = vec2(0.0); // Center of the circle\n    float radius = 0.005; // Radius of the circle\n    int numCircles = 100; // Number of circles\n    float sdf = circleSDF(p, center, radius, numCircles);\n    float line = fract(sdf * 2.0); // Create a repeating pattern of lines\n    col += vec3(line); // Add the line color to the existing color\n\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33598,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/djstompzone/because-why-not?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}