{
    "Shader": {
        "info": {
            "date": "1641206360",
            "description": "Julia fractal. Use your mouse to change how it renders! Uses orbit trapping for coloring. Mandelbrot is rendered in the background to aid in finding interesting Julia constants.",
            "flags": 0,
            "hasliked": 0,
            "id": "flKXR3",
            "likes": 2,
            "name": "Fork Mouse Juli rogo1965 771",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "mouse",
                "orbit"
            ],
            "usePreview": 0,
            "username": "rogo1965",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "#define ITERS 32\n\nstruct Window {\n    float x;\n    float y;\n    float w;\n    float h;\n};\n\nvec2 complexFromUv(in Window win, in vec2 uv) {\n    return vec2(uv.x * win.w + win.x,\n                uv.y * win.h + win.y);\n}\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 juliaPalette(in float t) {\n    return palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), \n                      vec3(1.0, 1.0, 0.5), vec3(0.80, 0.90, 0.30));\n}\n\nvec3 mbrotPalette(in float t) {\n    return palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), \n                      vec3(1.0, 1.0, 0.5), vec3(0.80, 0.90, 0.30));\n}\n\nfloat julia(in vec2 c, in vec2 z, in vec2 target) {\n    float x;\n    float d = 1e20;\n    for (int j = 0; j < ITERS; j++) {\n        if (z.x * z.x + z.y * z.y > 4.0) {\n            return d;\n        }\n        \n        x = z.x * z.x - z.y * z.y + c.x;\n        z.y = 2.0 * z.x * z.y + c.y;\n        z.x = x;\n        \n        d = min(d, length(z - target));\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    Window win = Window(-1.5, -1.0, 3.0, 2.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 z = complexFromUv(win, uv);\n    vec2 c = complexFromUv(win, iMouse.xy / iResolution.xy);\n    \n    vec2 t = vec2(sin(iTime) + 0.1 * sin(iTime * 2.0), \n                  cos(iTime) + 0.1 * cos(iTime * 2.0));\n    \n    t *= sin(iTime * 2.1) * 1.5;\n\n    vec3 j = juliaPalette(pow(julia(c, z, t), 0.3));\n    //vec3 m = mbrotPalette(pow(julia(z, z, t), 0.7));\n    float amt = 0.75 + 0.25 * sin(iTime * 0.1);\n    fragColor = vec4(j,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}