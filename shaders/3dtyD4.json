{
    "Shader": {
        "info": {
            "date": "1600967181",
            "description": "key 0..9 to swap push knots\nmaking rectangle and equilateral triangles just with a rope with 13 equally spaced knots.\nrect: push away knots 0, 3, 7 (i.e. sides = 3,4,5 units ).\nequi; knots 0,4,8\ncf [url]https://en.wikipedia.org/wiki/Arithmetic_rope[/url]\n",
            "flags": 48,
            "hasliked": 0,
            "id": "3dtyD4",
            "likes": 15,
            "name": "13 knot rope / arithmetic rope",
            "published": 3,
            "tags": [
                "simulation",
                "geometry",
                "ethnomathematics"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 957
        },
        "renderpass": [
            {
                "code": "float line(vec2 p, vec2 a,vec2 b) {                 // --- distance to line. https://www.shadertoy.com/view/llySRh\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.); // proj coord on line\n    return length(p - b * h);                       // dist to segment\n}\n\nvec4 char(vec2 p, int c) {                          // --- draw char. https://www.shadertoy.com/view/llySRh\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\n\nvoid mainImage( out vec4 O, vec2 u )               // === diplay knoted rope\n{\n    vec2 R = iResolution.xy, P, o,\n         U = ( 2.*u - R ) / R.y;\n    \n    O -= O;\n    float l = 1e5, p = 1e5, d; int _i;\n    for (int i=0; i<N; i++) {\n        P = P(i).xy, d = length( P - U ) - .02;\n        o = 1.2 * normalize(P);\n        if (i>9) O += char( (U-P) * 12. -vec2(-.9,-.5) - o , 48+i/10 ); // knot number\n                 O += char( (U-P) * 12. -vec2(-.4,-.5) - o , 48+i%10 ); \n        if ( d < p ) p = d, _i =i;                  // current knot\n        l = min(l, line( U, P(i).xy, P(i+1).xy ) ); // rope segment\n    }\n    O = O.xxxx; \n    l = min(l,p);\n    O += smoothstep(3./R.y,0.,l );                  // display knot or rope\n    if (l==p && P(_i).z > 0. ) O.gb *= 0.;          // pushed knot: red\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define spring( v, l0)  3.* ( length( v ) - l0 ) * normalize( v ) \n#define keyDown(a)      ( texelFetch(iChannel3,ivec2(a,1),0).x > 0.) // https://www.shadertoy.com/view/llySRh\n#define shift           ( texelFetch(iChannel3,ivec2(16,0),0).x  > 0.)\n#define ctrl            ( texelFetch(iChannel3,ivec2(17,0),0).x  > 0.)\n#define alt             ( texelFetch(iChannel3,ivec2(18,0),0).x  > 0.)\n#define modifier        ( int(shift) +2*int(ctrl) + 4*int(alt) )\n\nvec2 Newton( vec2 P, int i , float w ) {\n    vec2 F =   .2* w * normalize(P)                   // radial pressure\n              + spring( P(i-1).xy - P , L )           // l0-length spring with neighborhs\n              + spring( P(i+1).xy - P , L );\n    return .1* F;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    u -= .5;\n    if ( u.y>1. || u.x >= n ) return;\n    int i = int(u.x);\n    O = texelFetch( iChannel0, ivec2(u), 0 );         // restore states\n\n    if (u.y>0.) {                                     // --- manage keyboard: keys 0-9 + shift\n      if ( iFrame < 1 ) {                             // default state ( init pushed knots )\n          O = vec4( i==0 || i == 3 || i == 7 );       // knots 0,3,7 : rectangle triangle \n       // O = vec4( i==0 || i == 4 || i == 8 )        // knots 0,4,8 : equilateral triangle \n      } else\n#if 1                                                 // < 20 knots\n          if (keyDown(48+i%10) && ( i>9 ? shift : !shift )) O = 1.-O; // flip state\n#else                                                 // up to 40 knots\n          if (        keyDown(48+i%10) \n              && (    i/10==0 && modifier==0 \n                   || i/10==1 && modifier==1\n                   || i/10==2 && modifier==2\n                   || i/10==3 && modifier==4\n             )   ) O = 1.-O;                          // flip state\n#endif\n          return;\n      }\n\n    if ( iFrame < 1 ) {                               // --- init knots along the rope\n        O.xy = .5* cos( 6.28*u.x/n + vec2(0,11) );\n        O.zw = vec2(0);\n        return;\n    }\n       \n    vec2 P = O.xy;                                    // --- simulate forces on the knots\n    #define push texelFetch(iChannel0, ivec2(i,1), 0).r\n    O.z = push;                                       // memo for display pushed ones\n    \n    // P += Newton( P, i , push );                    // semi-Newton\n    O.xy += Newton( P, i , push );                    // Newton \n    \n // P-=P; for(int i=0; i<N; i++) P += P(i).xy / 13.; // --- recenters \n    P-=P; for(int i=0; i<N; i++) if ( push > 0. ) P += .01 * normalize(P(i).xy);     \n    O.xy -= P;\n    \n    if (push>0.)                                     // --- time jitter\n        O.xy += .001*cos( 20.*iTime + 6.28*fract(1e4*sin(1e4*u.x)) + vec2(0,11));\n     // O.xy += .003*cos( .3*iTime + 6.28*fract(1e4*sin(1e4*dot(O.xy,vec2(1,17)))) + vec2(0,11));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float n = 12.,   // number of knots\n            L = 3.6/n; // segment length\nconst int   N = int(n);\n\n#define P(i) texelFetch( iChannel0, ivec2( (int(i)+N)%N , 0 ), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}