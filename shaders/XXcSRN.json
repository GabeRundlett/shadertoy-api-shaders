{
    "Shader": {
        "info": {
            "date": "1718672569",
            "description": "Map one arbitrary quadrilateral to another arbitrary quadrilateral. Fast, general, and well-behaved. Derived by me. Generalization and improvement over https://www.particleincell.com/2012/quad-interpolation/",
            "flags": 0,
            "hasliked": 0,
            "id": "XXcSRN",
            "likes": 0,
            "name": "Quadrilateral Transformation",
            "published": 3,
            "tags": [
                "transformation",
                "quadrilateral"
            ],
            "usePreview": 0,
            "username": "annie_weaver",
            "viewed": 87
        },
        "renderpass": [
            {
                "code": "uniform vec2 uSize;\nuniform vec4 hs;\nuniform vec4 ks;\nuniform vec4 xs;\nuniform vec4 ys;\n\nuniform sampler2D image;\n\nfloat roundedBoxSDF(vec2 coord, float r) {\n    vec2 wh = vec2(0.95, 0.95);\n    return length(max(abs(coord-vec2(0.5, 0.5))-wh*0.5+r,0.0))-r;\n}\n\n// counterpart to dot()!!!\nfloat wedge(vec2 a, vec2 b) {\n    return a.x*b.y - a.y*b.x;\n}\n\n// for animating\nvec2 rot(vec2 z, float theta) {\n    return vec2(z.x*cos(theta) + z.y*sin(theta), z.y*cos(theta) - z.x*sin(theta));\n}\nvec2 f(vec2 z) {\n    vec2 center = vec2(0.5, 0.5);\n    float theta = iTime*1.3 + cos(iTime*0.8)*cos(iTime*0.8);\n    return 0.6*rot(z - center, cos(theta*0.1)) + center;\n}\nvec2 g(vec2 z) {\n    vec2 center = vec2(0.5, 0.5);\n    return (z-center) * (0.8 + 0.4*cos(iTime*1.1)) + center;\n}\nvec2 h(vec2 z) {\n    vec2 center = vec2(0.5, 0.5);\n    return (z-center) * (0.6 + 0.5*cos(iTime/2.237)) + center;\n}\n\n// the meat and potatoes of the transformation. It ranges from 0 along the\n// line defined by p0 and p1, to 1 along the line with P2 and P3.\nfloat alpha(vec2 x, vec2 p0, vec2 p1, vec2 p2, vec2 p3) {\n    x = x - p0;\n    p1 = p1 - p0;\n    p2 = p2 - p0;\n    p3 = p3 - p0;\n    float r2r3 = wedge(p2, p1) - wedge(p3, p1),\n          dXd3 = dot(x, p1) - dot(p3, p1),\n          d2d3 = dot(p2, p1) - dot(p3, p1);\n    float den = r2r3 * dXd3 / d2d3 + wedge(p3, p1);\n    return wedge(x, p1) / den;\n}\n\nfloat dist(vec2 a, vec2 b) {\nb -= a;\n    return b.x*b.x + b.y*b.y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   \n    \n    float size = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord.xy - iResolution.xy*0.5) / vec2(size, size) + vec2(0.5, 0.5);\n    \n    // Artifact of how I did this earlier that I'm too lazy to remove.\n    vec4 hs = vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 ks = vec4(0.0, 1.0, 1.0, 0.0);\n    vec4 xs = vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 ys = vec4(0.0, 1.0, 1.0, 0.0);\n\n    // input points. These get mapped to the corresponding X points\n    vec2 H0 = f(g(vec2(hs.x, ks.x)));\n    vec2 H1 = f(h(vec2(hs.y, ks.y)));\n    vec2 H2 = f(g(vec2(hs.z, ks.z)));\n    vec2 H3 = f(vec2(hs.w, ks.w));\n\n    // input points\n    vec2 X0 = vec2(xs.x, ys.x);\n    vec2 X1 = vec2(xs.y, ys.y);\n    vec2 X2 = vec2(xs.z, ys.z);\n    vec2 X3 = vec2(xs.w, ys.w);\n\n    float alpha01 = alpha(uv, H0, H1, H2, H3),\n          alpha12 = alpha(uv, H1, H2, H3, H0),\n          alpha23 = 1.0 - alpha01,\n          alpha30 = 1.0 - alpha12;\n\n    vec2 np = alpha23*alpha12*X0 +\n              alpha23*alpha30*X1 +\n              alpha01*alpha30*X2 +\n              alpha01*alpha12*X3;\n              \n    vec3 col = texture(iChannel0, np).xyz*0.8 + vec3(0, 1, 1)*0.2;\n              \n    if(alpha01 < 0.0 || alpha01 > 1.0 || alpha12 < 0.0 || alpha12 > 1.0) {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n              \n    float eps = 0.01*0.01;\n    if(dist(H0, uv) < eps || dist(H1, uv) < eps ||\n            dist(H2, uv) < eps || dist(H3, uv) < eps)\n        col = vec3(0.0, 0.0, 0.0);\n        \n        \n    if(uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0)\n        col = vec3(0.0, 0.0, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}