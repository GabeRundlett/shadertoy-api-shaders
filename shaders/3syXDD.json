{
    "Shader": {
        "info": {
            "date": "1574024200",
            "description": "this is clicker(made for last two days...)\n\nGamplay:\nLeft side is for player, player click same buttons (in mirror) as on right side.\n\nRight side spawn 10 elements at same time max, when player clean all spawn again.\nGoal is-get max score as you can.",
            "flags": 32,
            "hasliked": 0,
            "id": "3syXDD",
            "likes": 24,
            "name": "we need more likes, playable",
            "published": 3,
            "tags": [
                "2d",
                "game"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 1653
        },
        "renderpass": [
            {
                "code": "// self https://www.shadertoy.com/view/3syXDD\n\n// this is clicker(made for last two days...)\n\n// Gamplay:\n// Left side is for player, player click same buttons (in mirror) as on right side.\n// right side spawn 10 elements at same time max, when player clean all spawn again.\n// Goal is-get max score as you can.\n// score is numbers in right of screen\n\n// Created by Danil (2019+) https://github.com/danilw\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SS(x, y, z) smoothstep\t(x, y, z)\n#define MD(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define PI atan(0.,-1.)\n#define TAU (2.*PI)\n#define E exp(1.)\n#define res (iResolution.xy / iResolution.y)\n\nfloat global_zoom=3.;\nconst float smooth_zoom=2.;\n\nconst vec3 redocol=vec3(ivec3(0xff,0x78,0x78))/float(0xff);\nconst vec3 reddcol=vec3(ivec3(0xe8,0x00,0x00))/float(0xff);\nconst vec3 darkcol=vec3(ivec3(0x22,0x22,0x22))/float(0xff);\nconst vec3 bluocol=vec3(ivec3(0xd4,0xe6,0xff))/float(0xff);\nconst vec3 colhl1=vec3(0x7a,0xda,0xfd)/float(0xff);\nconst vec3 colhl2=vec3(0xfa,0x1a,0x0d)/float(0xff);\nconst vec3 redd = vec3(0xe1, 0x46, 0x14) / float(0xff);\n\nvec4 mix_alpha(vec4 src1, vec4 src2){\n    return vec4(mix(src1.rgb, src2.rgb, src2.a), \tmax(src1.a, src2.a));\n}\n\nvec4 loadval(ivec2 ipx) {\n    return texelFetch(iChannel0, ipx, 0);\n}\n\nbool get_map_by_id(ivec2 idx){\n    ivec2 ipx=ivec2(idx.x,0);\n    float val=texelFetch(iChannel0,ipx,0)[idx.y];\n    return val>0.;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//https://iquilezles.org/articles/distfunctions2d\n\nfloat sdCircle( vec2 p, float r )\n{\n  return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max(q.y,q.x);\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n    return sign(k)*length(max(w,0.0)) + r;\n}\n\n//https://www.shadertoy.com/view/ldsyz4\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Digit data by P_Malin (https://www.shadertoy.com/view/4sf3RN)\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000, 100000, 1000000);\n\nint PrintInt( in vec2 uv, in int value, const int maxDigits )\n{\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        int iu = int(floor(uv.x));\n        if( iu>=0 && iu<maxDigits )\n        {\n            int n = (value/powers[maxDigits-iu-1]) % 10;\n            uv.x = fract(uv.x);//(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv*vec2(4.0,5.0)));\n            return (font[n] >> (p.x+p.y*4)) & 1;\n        }\n    }\n    return 0;\n}\n\nfloat hand_dist(vec2 p){\n    p.y+=0.05;\n    float dsq1=sdBox(p+vec2(-0.25,-0.1),vec2(0.035,0.15))-0.01;\n    float dsq2=sdBox(p+vec2(0.0,-0.1),vec2(0.11,0.11))-0.05;\n    float dtr1=sdTriangleIsosceles(p*vec2(1.,-1.)+vec2(0.1275,0.25-0.03),vec2(0.07,0.18))-0.03;\n    float dsq3=max(min(1.,step(0.05,p.x)+step(0.04,p.y)),sdBox(p+vec2(0.0276,-0.14),vec2(0.13,0.13))-0.07);\n    float dtr2=max(step(p.x,-0.03),sdTriangleIsosceles(p+vec2(0.05,0.2),vec2(0.18,0.18))-0.03);\n    float duc1=max(step(-0.03,p.x),sdUnevenCapsule(p+vec2(-0.001,0.148),0.05,0.005,0.2)-0.03);\n    float dcr1=max(min(1.,step(0.05,p.x)+step(0.1,p.y)),sdCross(p+vec2(-0.011,-0.017),vec2(0.15,0.1),0.025));\n    float dsum=min(min(min(min(dsq1,dsq2),min(dtr1,dsq3)),min(dtr2,duc1)),dcr1);\n    return dsum;\n}\n\nvec4 draw_dlike(vec2 p){\n    float a=1.;\n    vec3 col=vec3(0.);\n    float px=global_zoom/iResolution.y;\n    px*=smooth_zoom;\n    \n    float dc=SS(0.,0.+px,sdCircle(p,0.5));\n    \n    float dh=hand_dist(p);\n    \n    float dsum=SS(0.,0.+px,dh);\n    \n    col=mix(vec3(1.),reddcol,dc);\n    col=mix(darkcol,col,dsum);\n\n    float dhq=sdBox(p,vec2(0.5));\n    float dq=SS(0.-px,0.+px,dhq-0.1);\n    a=1.-dq;\n    col.rgb*=a;\n    a=min(1.,a+0.5-0.5*SS(0.,0.+px+0.015*global_zoom,dhq-0.1));\n    \n    return vec4(col,1.-dq);\n    \n}\n\nvec2 heart_uv(vec2 p){\n    p.x *= 1.;\n    p.y -= sqrt(abs(p.x))*.65; \n    return p;\n}\n\nfloat heartLength(vec2 p,float z){\n    p.y -= 0.1;\n    p*=z;\n    float r = abs(atan(p.x, p.y) / PI);\n    float r2 = r * r;\n    float s = (39.0 * r - 66.0 * r2 + 30.0 * r2 * r) / (6.0 - 5.0 * r);   \n    return length(p) / s;\n}\n\nvec4 draw_heart(vec2 p){\n    float heart_zoom=7.;\n    float px=global_zoom/iResolution.y;\n    float heart_dist = heartLength(p,heart_zoom);\n    float dh = (1.0 - SS(1.0, 1.0+px*heart_zoom*smooth_zoom, heart_dist));\n    float a=1.;\n    vec3 col=vec3(0.);\n    float dc=SS(0.-px,0.+px,sdCircle(p,0.5));\n    col=mix(redocol,vec3(1.),dh);\n    col=mix(col,vec3(1.),dc);\n    a=1.-dc;\n    col.rgb*=a;\n    a=min(1.,a+0.5-0.5*SS(0.,0.+px+0.015*global_zoom,sdCircle(p,0.5)));\n    return vec4(col,a);\n}\n\n//this is bad, dont use it\nvec4 tile_uv(vec2 p){\n    vec2 tuv=p;\n    tuv=(p)/3.*vec2(3.5*1.77,6.);\n    tuv.x=sqrt(1.*floor(abs(tuv.x)+0.50));\n    vec2 op=p;\n    op.y+=-.03;\n    op.y+=-0.15*(tuv.x);\n    op=mod(op*vec2(4.,6.)*2.+(1./2.)*vec2(4.,6.),vec2(4.,6.))-(1./2.)*vec2(4.,6.);\n    return vec4(op,tuv);\n}\n\nvec2 local_res(){\n    vec2 p=loadval(ivec2(1,1)).xy;\n    vec2 ores=loadval(ivec2(4,1)).xy;\n    ores=ores.xy/ores.y;\n    return (p-0.5)*ores;\n}\n\nivec2 tile_idx(vec2 p){\n    vec4 tup=tile_uv(p);\n    vec2 ti=tup.zw;\n    vec2 etd=(p+res/2.*3.)/3.*vec2(3.5*1.77,6.);\n    etd.y+=-.25*3.;\n    etd.y+=1.-0.1*(ti.x)*2.;\n    vec2 ftid=vec2(etd+vec2(((16./9.)-res.x)*3.1+1.,0.));\n    ivec2 tid=ivec2(ftid);\n    return clamp(tid-ivec2(1),ivec2(0),ivec2(10,3));\n}\n\nvec2 get_posidx(ivec2 idx){\n    vec2 tid=vec2(idx)-vec2(5.,2.);\n    tid*=vec2((0.5)/1.,0.5);\n    tid.y+=0.15*sqrt(1.*floor(abs(tid.x*2.)+0.50));\n    return tid;\n}\n\nfloat map(vec2 p) {\n    float hz=8.;\n    vec2 tp=heart_uv(p*hz);\n    vec2 otp=tp;\n    tp=mod(tp+1.*2.,2.*2.)-1.*2.;\n    float d=1.;\n    d=(1.-length(tp));\n    float td = smoothstep(-0.05,0.35,-otp.y-hz-2.);\n    td = max(td,smoothstep(0.,0.4,otp.y-hz+2.));\n    td = max(td,smoothstep(0.4,0.,otp.x+hz*2.+4.5+0.5*res.x));\n    td = max(td,smoothstep(0.4,0.,-otp.x+hz*2.+4.5+0.5*res.x));\n    if(loadval(ivec2(1,1)).x>=0.){\n        ivec2 tidx=tile_idx(((local_res()))*3.);\n        if(get_map_by_id(tidx))\n            d=min(d,sdCircle(0.5*hz*((p-get_posidx(tidx))),0.65));\n    }\n    if(loadval(ivec2(0,1)).y>=0.){\n        ivec2 rr=ivec2(6,0);\n        int rnd=int(loadval(ivec2(0,1)).y);\n        ivec2 tidx=ivec2(rr.x+rnd-5*(rnd/5),rr.y+rnd/5);\n        if(get_map_by_id(tidx))\n        d=min(d,sdCircle(0.5*hz*((p-get_posidx(tidx))),0.65));\n    }\n    d=max(td,d);\n\treturn max(d,0.0001);\n}\n\nvec4 calcNormal(vec2 p) {\n\tvec2 e = vec2(0.001, 0.00);\n    float m=map(p);\n\tvec3 nor = vec3(\n\t\tmap(p + e.xy) - map(p - e.xy),\n\t\tmap(p + e.yx) - map(p - e.yx),\n\t\tm * 0.13\n\t);\n    return vec4(normalize(nor),m);\n}\n\n/*\nvec3 calcNormal(vec2 p) {\n    return texture(iChannel3,(p/3.)/(res)+0.5).rgb;\n}*/\n\nfloat lineSegToBrightness(vec2 U, vec2 P0, vec2 P1)\n{\n    P0 -= U; P1 -= U;\n    float a = mod ( ( atan(P0.y,P0.x) - atan(P1.y,P1.x) ) / PI, 2.);  \n    return min( a, 2.-a );\n}\n\nvec4 ggnergne( vec2 p ) \n{\n\tfloat sx = 0.;\n    //sx=0.18 * cos( 4.0 * p.y - iTime*2.)*SS(0.2,0.84,p.y+0.5*3.)*SS(2.28,1.5,p.y+0.5*3.);\n    p*=12.;\n\tfloat dy = 79./ ( 423. * abs(p.x-sx)); //-sx\n\tdy += 11./ (200. * max(-0.01+length(p.yx - vec2(p.y, \t0.0)),0.0001));\n\treturn vec4( (p.y + 0.2) * dy, 0.43 * dy, dy, 1. );\n\n}\n\nvec4 draw_bg(vec2 p){\n    float ed2=SS(.15,0.0,(p.y-01.));\n    vec3 rd = normalize(vec3(0.0, 0.0, -1.0));\n\tvec3 nor = calcNormal(p).rgb;\n    vec3 col=vec3(0.);\n    \n    vec4 tup=tile_uv(p);\n    vec2 ti=tup.zw;\n    vec2 etd=(p+res/2.*3.)/3.*vec2(3.5*1.77,6.);\n    etd.y+=-.25*3.;\n    etd.y+=1.-0.1*(ti.x)*2.;\n    vec2 ftid=vec2(etd+vec2(((16./9.)-res.x)*3.1+1.,0.));\n    ivec2 tid=ivec2(ftid);\n    vec2 tuv=tup.xy;\n    vec3 ecol=clamp(ggnergne(p).rgb*(0.05+0.95*SS(0.2,0.4,p.y+0.5*3.)*SS(2.28,2.1,p.y-0.15*sqrt(abs(p.x))*1.5+0.5*3.))*SS(01.5,0.3,abs(p.x)),0.,15.);\n    vec4 tile_col=vec4(0.);\n    if((tid.y<5)&&(tid.y>=1)&&(tid.x<12)&&(tid.x>=1)){\n        if(get_map_by_id(tid-ivec2(1))){\n            float odz=global_zoom;\n            global_zoom=global_zoom*3.;\n            if(ftid.x<=6.5){\n                tile_col=draw_heart(tuv*(vec2(1.,.67))*0.5+vec2(0.,0.));\n            }else{\n                tile_col=draw_dlike(tuv*(vec2(1.,.67))*0.5+vec2(0.,0.));\n            }\n            tile_col*=tile_col;\n            global_zoom=odz;\n        }\n    }\n    \n    {\n        vec3 elc=0.8*vec3((redocol*0.3+0.7)*lineSegToBrightness((vec2(-(p.x),p.y)+vec2(-1.1,-1.5)),vec2(0.),vec2(1.,0.)));\n        vec3 lig = normalize(vec3(p.x, p.y, 0.0) - vec3(-1.5-0.1, 01.5, -1.0));\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float spea=clamp(dot(reflect(rd, nor), lig), 0.0, 1.0);\n        float spe = pow(spea, 64.0);\n        float fre = 1.0 - dot(-rd, nor);\n        vec3 c=1.25*elc+redocol*0.1*step(p.x,0.)+redocol*ecol*dif+tile_col.rgb*dif;\n        col =  (1.)*(c * dif + spe*ed2 + fre * 0.2*elc.r);\n    }\n    {\n        vec3 elc=0.7*vec3((bluocol*0.3+0.7)*lineSegToBrightness((vec2((p.x),p.y)+vec2(-1.1,-1.5)),vec2(0.),vec2(1.,0.)));\n        vec3 lig = normalize(vec3(p.x, p.y, 0.0) - vec3(1.5+0.1, 01.5, -1.0));\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float spea=clamp(dot(reflect(rd, nor), lig), 0.0, 1.0);\n        float spe = pow(spea, 64.0);\n        float fre = 1.0 - dot(-rd, nor);\n        vec3 c=1.25*elc+bluocol*0.1*step(0.,p.x)+bluocol*ecol*dif+tile_col.rgb*dif;\n        col =  max(col,(1.)*(c * dif  + spe*ed2  + fre *0.2*elc.r));\n    }\n    {\n        vec3 lig = normalize(vec3(p.x, p.y, 0.0) - vec3(vec2(0.,0.03)+get_posidx(tile_idx((local_res())*3.)), -.50));\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float spea=clamp(dot(reflect(rd, nor), lig), 0.0, 1.0);\n        float spe = pow(spea, 128.0);\n        float fre = 1.0 - dot(-rd, nor);\n        vec3 c=mix(2.*(colhl1)*(0.2+0.8*SS(0.3,0.,length(lig.xy))),tile_col.rgb,+tile_col.a)*SS(1.,0.,iTime-loadval(ivec2(1,1)).w);\n        col =  max(col,c*( dif + spe + fre * 0.2));\n    }\n    {\n        ivec2 rr=ivec2(6,0);\n        int rnd=int(loadval(ivec2(0,1)).y);\n        vec3 lig = normalize(vec3(p.x, p.y, 0.0) - vec3(vec2(0.,0.03)+get_posidx(ivec2(rr.x+rnd-5*(rnd/5),rr.y+rnd/5)), -.50));\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float spea=clamp(dot(reflect(rd, nor), lig), 0.0, 1.0);\n        float spe = pow(spea, 128.0);\n        float fre = 1.0 - dot(-rd, nor);\n        vec3 c=mix(2.*(colhl2)*(0.2+0.8*SS(0.3,0.,length(lig.xy))),tile_col.rgb,+tile_col.a)*SS(1.,0.,iTime-loadval(ivec2(0,1)).z);\n        col =  max(col,c*( dif + spe + fre * 0.2));\n    }\n    //col=mix_alpha(vec4(col,1.),tile_col).rgb;\n    col += (rand(p)-.5)*.057;\n    return vec4(col,1.);\n}\n\nvec4 draw_it(vec2 fragCoord){\n    vec2 uv = (fragCoord.xy) / iResolution.y - res/2.0;\n    uv*=global_zoom;\n    vec4 col=vec4(0.);\n    col=draw_bg(uv);\n    col.rgb+=float(PrintInt((uv+vec2(-0.68,0.43)*global_zoom)*6.,int(max(loadval(ivec2(3,1)).x,0.)),3))*redd.rrg*0.35;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = draw_it(fragCoord);\n\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// self https://www.shadertoy.com/view/3syXDD\n\n// Created by Danil (2019+) https://github.com/danilw\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//logic\n\n#define res (iResolution.xy / iResolution.y)\n\nconst int spawn_per_frame=60;\n\nvec4 loadval(ivec2 ipx) {\n    return texelFetch(iChannel0, ipx, 0);\n}\n\nbool is_end(){\n    return loadval(ivec2(2,1)).x>0.;\n}\n\nbool get_map_by_id(ivec2 idx){\n    ivec2 ipx=ivec2(idx.x,0);\n    float val=texelFetch(iChannel0,ipx,0)[idx.y];\n    return val>0.;\n}\n\nvec4 tile_uv(vec2 p){\n    vec2 tuv=p;\n    tuv=(p)/3.*vec2(3.5*1.77,6.);\n    tuv.x=sqrt(1.*floor(abs(tuv.x)+0.50));\n    vec2 op=p;\n    op.y+=-.03;\n    op.y+=-0.15*(tuv.x);\n    op=mod(op*vec2(4.,6.)*2.+(1./2.)*vec2(4.,6.),vec2(4.,6.))-(1./2.)*vec2(4.,6.);\n    return vec4(op,tuv);\n}\n\nivec2 tile_idx(vec2 p){\n    vec4 tup=tile_uv(p);\n    vec2 ti=tup.zw;\n    vec2 etd=(p+res/2.*3.)/3.*vec2(3.5*1.77,6.);\n    etd.y+=-.25*3.;\n    etd.y+=1.-0.1*(ti.x)*2.;\n    vec2 ftid=vec2(etd+vec2(((16./9.)-res.x)*3.1+1.,0.));\n    ivec2 tid=ivec2(ftid);\n    return clamp(tid-ivec2(1),ivec2(0),ivec2(10,3));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nint spawner(int ifr){\n    return int(20.*rand(vec2(float(ifr),iTime)));\n}\n\nint timer_cd(){\n    return spawn_per_frame;\n}\n\n// map in [x[0-10],y[0]], [0,0].x==[0,0] element [0,0].y=[0,1] elem...etc\nvec4 logic_map(ivec2 ipx){\n    if(is_end()){\n        return vec4(-1.);\n    }\n    vec4 retc=vec4(0.);\n    vec4 ocol=loadval(ipx);\n    retc=ocol;\n    if((loadval(ivec2(1,1)).x>=0.)&&(loadval(ivec2(1,1)).z>0.)){\n        ivec2 tidx=tile_idx((loadval(ivec2(1,1)).xy-0.5)*res*vec2(3.));\n        if(ipx==ivec2(tidx.x,0))retc[tidx.y]=1.;\n        ivec2 mtidx=ivec2(5,0)+ivec2(-tidx.x,tidx.y)+ivec2(5,0);\n        if(ipx==ivec2(mtidx.x,0))retc[mtidx.y]=-1.;\n    }\n    \n    int local_iFrame=iFrame-int(loadval(ivec2(2,1)).w);\n    if(local_iFrame/timer_cd()<=10){\n    if(local_iFrame%timer_cd()==0){\n        ivec2 rr=ivec2(-1);\n        rr=ivec2(6,0);\n        int rnd=spawner(iFrame);\n        bool br=false;\n        for(int a=0;a<20;a++){\n            if(!br){\n                rnd=rnd%20;\n                ivec2 trr=ivec2(rr.x+rnd-5*(rnd/5),rr.y+rnd/5);\n                if(!get_map_by_id(trr)){\n                    br=true;\n                    rr=trr;\n                    break;\n                }\n                rnd+=1;\n            }\n        }\n        if(ipx==ivec2(rr.x,0))retc[rr.y]=1.;\n        if(br){\n            ivec2 mtidx=ivec2(5,0)+ivec2(-rr.x,rr.y)+ivec2(5,0);\n            if(ipx==ivec2(mtidx.x,0))retc[mtidx.y]=-1.;\n        }\n        \n    }\n    }\n    \n    return retc;\n}\n\n//[3,1]\n//[score,last_click.x,last_click,y,0]\nvec4 logic_vals3(){\n    if(is_end()){\n        return vec4(-1.);\n    }\n    vec4 self_dat=loadval(ivec2(3,1));\n    float a=self_dat.x;\n    float b=self_dat.y;\n    float c=self_dat.z;\n    float d=self_dat.w;\n    \n    if(a<0.)a=0.;\n    \n    if((loadval(ivec2(1,1)).x>=0.)&&(loadval(ivec2(1,1)).z>0.)){\n        ivec2 tidx=tile_idx((loadval(ivec2(1,1)).xy-0.5)*res*vec2(3.));\n        ivec2 ltidx=ivec2(b,c);\n        if((!get_map_by_id(tidx))||(tidx!=ltidx)){\n            a+=1.;\n            b=float(tidx.x);\n            c=float(tidx.y);\n        }\n    }\n    \n    vec4 sc_dat=loadval(ivec2(2,1));\n    \n    \n    return vec4(a,b,c,d);\n}\n\n//[2,1]\n//[is_end,timer,spwan_at_score,iFrame_spawn_start]\nvec4 logic_vals2(){\n    vec4 self_dat=loadval(ivec2(2,1));\n    float a=self_dat.x;\n    float b=self_dat.y;\n    float c=self_dat.z;\n    float d=self_dat.w;\n    if(a<0.){\n        if((loadval(ivec2(1,1)).x>=0.)&&(loadval(ivec2(1,1)).z>0.)){\n            ivec2 tidx=tile_idx((loadval(ivec2(1,1)).xy-0.5)*res*vec2(3.));\n            ivec2 mtidx=ivec2(5,0)+ivec2(-tidx.x,tidx.y)+ivec2(5,0);\n            if((!get_map_by_id(tidx))&&(!get_map_by_id(mtidx))){\n                a=1.;\n                b=iTime;\n            }\n        }\n    }else{\n        if(iTime-b>1.){\n            a=-1.;\n        }\n    }\n    \n    if((c<0.)||(a>0.)){\n        c=10.;\n        d=float(iFrame);\n    }else{\t\n        vec4 sc_val=loadval(ivec2(3,1));\n        int score=int(sc_val.x);\n        if(int(c)<=score){\n            c=float(score)+10.;\n            d=float(iFrame);\n        }\n    }\n    return vec4(a,b,c,d);\n}\n\n//[0,1]\n//[last_rand,this_rand,timer,0]\nvec4 logic_vals1(){\n    if(is_end()){\n        return vec4(-1.);\n    }\n    vec4 self_dat=loadval(ivec2(0,1));\n    float a=self_dat.x;\n    float b=self_dat.y;\n    float c=self_dat.z;\n    float d=self_dat.w;\n    int local_iFrame=iFrame-int(loadval(ivec2(2,1)).w);\n    if(local_iFrame/timer_cd()<=10){\n    if(local_iFrame%timer_cd()==0){\n        ivec2 rr=ivec2(-1);\n        rr=ivec2(6,0);\n        int rnd=spawner(iFrame);\t\n        bool br=false;\n        for(int a=0;a<20;a++){\n            if(!br){\n                rnd=rnd%20;\n                ivec2 trr=ivec2(rr.x+rnd-5*(rnd/5),rr.y+rnd/5);\n                if(!get_map_by_id(trr)){\n                    br=true;\n                    rr=trr;\n                    break;\n                }\n                rnd+=1;\n            }\n        }\n        if(br)c=iTime;\n        a=b;\n        b=float(rnd);\n        if(!br)b=-1.;\n    }\n    }\n    \n    return vec4(a,b,c,d);\n}\n\n//[1,1]\n//[m.x,m.y,click,timer]\nvec4 focus_mouse(){\n    if(is_end()){\n        return vec4(-1.);\n    }\n    \n    int local_iFrame=iFrame-int(loadval(ivec2(2,1)).w);\n    if(local_iFrame==1){\n        return vec4(-1.);\n    }\n    \n    \n    vec4 self_dat=loadval(ivec2(1,1));\n    float fpx=self_dat.x;\n    float fpy=self_dat.y;\n    float a=self_dat.z;\n    float b=self_dat.w;\n\n    if(iMouse.z>0.){\n        if(a<0.){\n            ivec2 tidx=tile_idx((iMouse.xy/iResolution.xy-0.5)*res*vec2(3.));\n            if(!get_map_by_id(tidx))\n                if(tidx.x<6)\n                    if(tidx.x!=5){\n                        fpx=iMouse.x/iResolution.x;\n                        fpy=iMouse.y/iResolution.y;\n                        b=iTime;\n                    }\n        }\n        a=1.;\n    }\n    else{\n        a=-1.;\n    }\n    vec4 col = vec4(fpx,fpy,a,b);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //init\n    if(iFrame<10){\n        fragColor=vec4(-10.);\n        return;\n    }\n    fragColor=vec4(0.);\n    ivec2 ipx = ivec2(fragCoord);\n    if((ipx.x<=10)&&(ipx.y<1)){\n        fragColor=logic_map(ipx);\n    }\n    if(ipx==ivec2(1,1)){\n        fragColor=focus_mouse();\n    }\n    if(ipx==ivec2(0,1)){\n        fragColor=logic_vals1();\n    }\n    if(ipx==ivec2(2,1)){\n        fragColor=logic_vals2();\n    }\n    if(ipx==ivec2(3,1)){\n        fragColor=logic_vals3();\n    }\n    if(ipx==ivec2(4,1)){\n        fragColor=vec4(iResolution.xy,0.,0.);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}