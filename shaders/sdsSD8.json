{
    "Shader": {
        "info": {
            "date": "1618592899",
            "description": "License CC0: Team Omega\nI recently joined a new team called Team Omega. I like making \"team shaders\" so created one. It's a \"remix\" of previous shaders so now nothing ground breaking.  After 27 seconds you seen all this shader has to offer :)\n",
            "flags": 64,
            "hasliked": 0,
            "id": "sdsSD8",
            "likes": 14,
            "name": "Team Omega",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "// License CC0: Team Omega\n// I recently joined a new team called Team Omega. I like making \"team shaders\" so created one. \n// It's a \"remix\" of previous shaders so now nothing ground breaking. \n// After 27 seconds you seen all this shader has to offer :)\n// Song: Omega by vowl. https://soundcloud.com/vowlmusic/omega\n#define TIME        mod(iTime, 198.0)\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define L2(x)       dot(x, x)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define TTIME       (TAU*TIME)\n#define PSIN(x)     (0.5+0.5*sin(x))\n\nconst float corner0 = 0.02;\nconst float corner1 = 0.075;\nconst float topy    = 0.0475+corner0*0.5;\n\nfloat hash(vec2 co) {\n  return fract(sin(dot(co, vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// See Art of Code: Hexagonal Tiling Explained!\n// https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n  \n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = mix(p2, p1, vec2(dot(p1, p1) < dot(p2, p2)));\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)/2.0;\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat vmax(vec2 v) {\n  return max(v.x, v.y);\n}\n\n// http://mercury.sexy/hg_sdf/\nfloat corner(vec2 p) {\n  return length(max(p, vec2(0))) + vmax(min(p, vec2(0)));\n}\n\n\n// Distance fields by IQ\n// https://iquilezles.org/articles/distfunctions2d\nfloat roundedBox(vec2 p, vec2 b, vec4 r) {\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat box(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat parallelogram(vec2 p, float wi, float he, float sk) {\n    vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p)-r;\n}\n\nvec2 refl(vec2 p, vec2 n) {\n  p -= n*min(0.0, dot(p, n))*2.0;\n  return p;\n}\n\n// http://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// Smooth min by IQ\n// https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) { \n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) { \n  return pmax(a, -a, k);\n}\n\nfloat omega(vec2 p) {\n  const float lw = 0.07;\n  const float sm = 0.066;\n  p.x = abs(p.x);\n  vec2 p0 = p;\n  p0.y -= 0.075;\n  float d0 = circle(p0, 0.36);\n  d0 = abs(d0)-lw;\n\n  vec2 p1 = p;\n  p1 -= vec2(0.175, -0.445);\n  p1.y = -p1.y;\n  p1  = refl(p1, normalize(vec2(1.0)));\n  float d1 = parallelogram(p1, 0.31, lw, 0.04);\n  \n  vec2 p2 = p;\n  float d2 = p2.y+0.20;\n  d1 = pmax(d1, d2, sm);\n  \n  vec2 p3 = p;\n  float d3 = min(-p3.y+0.075, -p3.x+0.105);\n  d0 = pmax(d0, d3, sm);\n\n  vec2 p4 = p;\n  p4 -= vec2(0.175, -0.445)-vec2(lw);\n  float d4 = length(p4);\n  d1 = sign(p4) == vec2(-1.0) ? d4 : d1;\n  \n  float d = d0;\n  d = min(d, d1);\n//  d = min(d, d4);\n  \n  return d;\n}\n\nfloat df(vec2 p) {\n  return omega(p);\n}\n\nfloat height_(vec2 p) {  \n  p *= 0.25;\n  vec2 p0 = p;\n  vec2 n0 = hextile(p0);\n  float h = hash(n0);\n  p0 *= ROT(TAU*h);\n  const float ss = 0.625;\n  float d0 = omega(p0/ss)*ss;\n  float d = d0;\n  d -= 0.02;\n  const float aa = 0.02;\n  float a = fract(127.0*h) > 0.5 ? 0.125 : -0.25;\n  return a*tanh_approx(smoothstep(aa, -aa, d));\n}\n\nfloat height(vec2 p) {\n  const mat2 rot1 = ROT(1.23);\n  float tm = 123.0+TTIME/320.0;\n  p += 5.0*vec2(cos(tm), sin(tm*sqrt(0.5)));\n  const float aa = -0.33;\n  const mat2  pp = (1.0/aa)*rot1;\n  float h = 0.0;\n  float a = 1.0;\n  float d = 0.0;\n  \n  float tm2 = 0.5*TIME;\n  h += 1.0*sin(0.75*tm2+dot(normalize(vec2(-1.0, 1.5)), 4.0*p));\n  h += 0.5*sin(tm2+dot(normalize(vec2(1.0, 1.0)), 7.0*p));\n  h += 0.25*sin(1.25*tm2+dot(normalize(vec2(-2, 1.0)), 13.0*p));\n  h += 1.75;\n  h*= 0.2;\n  \n  for (int i = 0; i < 5; ++i) {\n    h += a*height_(p);\n    d += a;\n    a *= aa;\n    p *= pp;\n  }  \n  const float hf = -0.125;\n  return hf*(h/d)+hf;\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy) - height(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = height(p + e.yx) - height(p - e.yx);\n  \n  return normalize(n);\n}\n\nfloat synth(vec2 p) {\n  const float z = 4.0;\n  const float st = 0.02;\n  float dob = box(p, vec2(1.55, 0.5));\n  p.x = abs(p.x);\n  p.x += st*20.0;\n  p /= z;\n  float n = mod1(p.x, st);\n  float dib = 1E6;\n  const int around = 1;\n  for (int i = -around; i <=around ;++i) {\n    float fft = texture(iChannel0, vec2((n+float(i))*st*1.5, 0.25)).x; \n    float dibb = box(p-vec2(st*float(i), 0.0), vec2(st*0.25, 0.05*fft+0.001));\n    dib = min(dib, dibb);\n  }\n  \n  float dl = p.y;\n  dl = abs(dl) - 0.005;\n  dl = abs(dl) - 0.0025;\n  dl = abs(dl) - 0.00125;\n  float d = dib;\n  d = max(d, -dl);\n  d = pmax(d, dob, 0.025);\n  return d*z;\n}\n\nfloat omega_a(vec2 p) {\n  p.x = abs(p.x);\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(corner1, corner0, corner1, corner0));\n  float dc = corner(p-vec2(0.045, -0.07))-corner0;\n  \n  float d = db;\n  d = max(d, -dc);\n  \n  return d;\n}\n\nfloat omega_e(vec2 p) {\n  p.y = abs(p.y);\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(corner1, corner0, corner1, corner0));\n  float di = roundedBox(p-vec2(0.175, topy), vec2 (0.25, corner0), vec4(corner0));\n  \n  float d = db;\n  d = max(d, -di);\n  return d;\n}\n\nfloat omega_g(vec2 p) {\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(corner0, corner1, corner1, corner1));\n  float dc = corner(-(p-vec2(-0.045, -0.057)));\n  dc = abs(dc) - corner0;\n  float dd = max(p.x-0.065, p.y-topy-corner0);\n  float d = db;\n  d = max(d, -max(dc, dd));\n  return d;\n}\n\nfloat omega_m(vec2 p) {\n  float db = roundedBox(p, vec2 (0.255, 0.166), vec4(corner1, corner0, corner0, corner0));\n  p.x = abs(p.x);\n  float dl = abs(p.x-0.095)-corner0*2.0;\n  float dt = p.y-topy;\n  \n  float d = db;\n  d = max(d, -max(dl,dt));\n  \n  return d;\n}\n\nfloat omega_o(vec2 p) {\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(corner1));\n  float di = roundedBox(p, vec2 (0.19, 0.166)*0.45, vec4(corner0));\n  float d = db;\n  d = max(d, -di);\n  return d;\n}\n\nfloat omegaText(vec2 p) {\n  vec2 pn = p;\n  pn.y -= topy;\n  float dn = abs(pn.y)-corner0;\n  p.x += 0.95;\n  \n  vec2 po = p;\n  po.x += 0.0;\n  float do_ = omega_o(po);\n\n  vec2 pm = p;\n  pm.x -= 0.51;\n  float dm = omega_m(pm);\n\n  vec2 pe = p;\n  pe.x -= 1.02;\n  float de = omega_e(pe);\n\n  vec2 pg = p;\n  pg.x -= 1.465;\n  float dg = omega_g(pg);\n\n  vec2 pa = p;\n  pa.x -= 1.91;\n  float da = omega_a(pa);\n\n  \n  float d = 1E6;\n  d = min(d, do_);\n  d = min(d, dm);\n  d = min(d, de);\n  d = min(d, dg);\n  d = min(d, da);\n  d = max(d, -dn);\n\n  return d;\n}\n\nfloat beat() {\n  float beat = 0.0;\n  const float samples = 5.0;\n  const float st = 0.01;\n  for (float i = 0.0; i < samples; ++i) {\n    beat += texture(iChannel0, vec2(st*1.0+st*i, 0.25)).x; \n  }\n  return smoothstep(0.66, 1.0, beat/samples);\n}\n\nvec3 color(vec2 p) {\n  vec2 ppp = p;\n  const float s = 1.0;\n  const vec3 lp1 = vec3(1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2 = vec3(-1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n\n  float aa = 2.0/RESOLUTION.y;\n\n  float h = height(p);\n  vec3  n = normal(p);\n\n  vec3 ro = vec3(0.0, mix(-3.0, -10.0, PSIN(TIME+PI*p.x)), 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  const vec3 lcol1 = sqrt(vec3(1.25, 1.35, 2.0).zxy*0.15);\n  const vec3 lcol2 = vec3(2.0, 1.55, 1.25).zyx*0.85;\n  vec3 lpow1 = 0.15*lcol1/L2(ld1);\n  vec3 lpow2 = 0.25*lcol2/L2(ld2);\n  vec3 dm = vec3(1.0)*tanh_approx(-h*10.0+0.125);\n  vec3 col = vec3(0.0);\n  col += dm*pow(diff1, 4.0)*lpow1;\n  col += dm*pow(diff2, 4.0)*lpow2;\n  vec3 rm = vec3(1.0)*mix(0.25, 1.0, tanh_approx(-h*1000.0));\n  col += rm*pow(ref1, 20.0)*lcol1;\n  col += rm*pow(ref2, 20.0)*lcol2;\n  col *= smoothstep(6.0, 14.0, TIME);\n  \n  float ds = synth(ppp-vec2(0.0, -0.75));\n  float beat = beat();\n\n  const float zp = 1.35;\n  \n  vec2 op = ppp;\n  op.x += -0.25*ppp.y;\n  op /= zp;\n  float di = omegaText(op);\n  di *= zp;\n  float dio = di;\n  dio -= 0.025;\n  dio = abs(dio) - 0.005;\n  di = pmin(di, dio, 0.025);\n  di = min(di, ds);\n  float dg = di;\n\n  float off = -0.3 + 0.75*p.x-p.y;\n  float angle = -0.5+off-TTIME/16.0;\n\n  float gmix = pow(PSIN(angle), 14.0);\n  float gmix2 = mix(1.0, abs(1.0/(mod(angle, PI)-PI*0.5)), beat*smoothstep(1.75, 1.55, abs(off)));\n  col += -lcol2*0.25*(exp(-9.0*max(di, 0.0)));\n \n  dg = abs(dg-0.025);\n  float glow = exp(-20.0*max(dg+0., 0.0));\n  vec3 glowCol = mix(lcol2.zyx*lcol2.zyx/6.0, lcol2.zyx, glow*glow)*gmix2;\n  col = mix(col, vec3(mix(vec3(0.9), sqrt(glowCol*0.5), gmix)), smoothstep(-aa, aa, -di));\n  col += glowCol*glow*gmix;\n\n  return col;\n}\n\n// Post processing I found somewhere on shadertoy years ago\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/vec3(2.2));\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  float aa = 2.0/RESOLUTION.y;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  \n  vec3 col = color(p);  \n  col = clamp(col, 0.0, 1.0);\n  col *= smoothstep(1.0, 4.0, TIME);\n  col *= 1.0-smoothstep(180.0, 198.0, TIME);\n  col = postProcess(col, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26669,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/vowlmusic/omega"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}