{
    "Shader": {
        "info": {
            "date": "1674523291",
            "description": "Tried using fwidth to make antialiased noise contours and this was the result!",
            "flags": 0,
            "hasliked": 0,
            "id": "ctXXWn",
            "likes": 16,
            "name": "Abstract noise contours",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "contours",
                "fwidth"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "#define saturate(x) clamp(x,0.0, 1.0)\n#define smooth(x) smoothstep(0., 1., x)\n\n#define PERIOD 10.\n\n#define iTime iDate.w\n\nfloat pulse(float x, float k)\n{\n    return 1.-min(1., abs(fract(x)-0.5)/k);\n}\n\nmat2 r(float t)\n{\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat perlinNoise(vec2 p, float t)\n{\n    mat2 r = r(t);\n    \n    vec2 tlVal = r*(hash22(vec2(floor(p.x),  ceil(p.y))) - 0.5) * 2.0;\n    vec2 blVal = r*(hash22(vec2(floor(p.x), floor(p.y))) - 0.5) * 2.0;\n    vec2 trVal = r*(hash22(vec2( ceil(p.x),  ceil(p.y))) - 0.5) * 2.0;\n    vec2 brVal = r*(hash22(vec2( ceil(p.x), floor(p.y))) - 0.5) * 2.0;\n    \n    float tl = dot(p - vec2(floor(p.x),  ceil(p.y)), tlVal);\n    float bl = dot(p - vec2(floor(p.x), floor(p.y)), blVal);\n    float tr = dot(p - vec2( ceil(p.x),  ceil(p.y)), trVal);\n    float br = dot(p - vec2( ceil(p.x), floor(p.y)), brVal);\n    \n    return mix(mix(bl, tl, smooth(fract(p.y))), \n               mix(br, tr, smooth(fract(p.y))),\n               smooth(fract(p.x)))*0.5 + 0.5;\n}\n\nfloat vignette(vec2 p, float s)\n{\n    p = 1.-(4.*p*p-4.*p+1.)*s;\n    return p.x*p.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    float v = perlinNoise(uv*2.+iTime*0.05, iTime*0.2);\n    float fw = fwidth(v);\n    float t = 0.8;\n    vec3 col = (smoothstep(t, t+fw*PERIOD*2., pulse(v*PERIOD, 1.))*0.8+0.2)*vec3(1.000,0.812,0.643);\\\n    col = mix(col.xyz, col.xyy, smoothstep(0., .25, sin(v*6.2831)));\n\n    // Output to screen\n    fragColor = vec4(col*vignette(fragCoord/iResolution.xy, 0.3),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}