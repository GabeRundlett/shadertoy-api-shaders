{
    "Shader": {
        "info": {
            "date": "1586882298",
            "description": "teehee",
            "flags": 0,
            "hasliked": 0,
            "id": "wd2yRG",
            "likes": 1,
            "name": "Gotta Catch em All",
            "published": 3,
            "tags": [
                "gottacatchemall"
            ],
            "usePreview": 0,
            "username": "Skatzogirous",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "    \nstruct Material\n{\n    vec3 albedo;\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n    \n};\n    \nstruct Sphere\n{\n    vec3 center;\n    float radius;\n    Material material;\n};\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspect_ratio = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect_ratio;\n\n\tSphere sph;   \n\n\tfloat outlineLength = 0.006;\n    sph.center = vec3(0.5,0.5,5.0);\n    sph.center.x *= aspect_ratio;\n    sph.radius = 0.3;\n    \n    sph.material.albedo = vec3(1.0,0.1,0.1);\n    \n    sph.material.ambient = vec3(0.52,0.52,0.52);\n    \n    sph.material.diffuse = vec3(0.1,0.1,0.1);\n    \n    sph.material.specular = vec3(0.52,0.52,0.52);\n    sph.material.shininess = 16.0;\n    \n    vec3 camera = vec3 (0.5,0.5,0.0);\n    \n    float centerDist = 0.23;\n    vec3 lightPos = vec3(9.0 * sin(iTime)*0.5,6.0 * cos(iTime)*0.5,-5.0);\n    vec3 lightColor = vec3(1.0);\n    \n    vec3 col = vec3(0.0);\n    if(length(uv - vec2(sph.center.x,sph.center.y)) < sph.radius - centerDist)\n    {\n        if(length(uv - vec2(sph.center.x,sph.center.y)) > sph.radius - centerDist-0.015)\n        {\n            float custom_z = (sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0)));\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * vec3(0.1,0.1,0.1) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * vec3(0.0,0.0,0.0) * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = vec3(0.2,0.2,0.2) * spec;\n        \n        col = ambient + diffuse + specular;\n        }\n        else if(length(uv - vec2(sph.center.x,sph.center.y)) > sph.radius - centerDist-0.035)\n        {\n           float custom_z = (sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0)) + 0.8);\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * vec3(1.0,1.0,1.0) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * sph.material.diffuse * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = sph.material.specular * spec;\n        \n        col = ambient + diffuse + specular;\n        }\n        else\n        {\n            float custom_z = sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0) + 1.0);\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * vec3(0.98,0.98,0.98) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * sph.material.diffuse * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = sph.material.specular * spec;\n        \n        col = ambient + diffuse + specular;\n        }\n       \n    }\n    if(length(uv - vec2(sph.center.x,sph.center.y)) <= sph.radius && length(uv - vec2(sph.center.x,sph.center.y)) >= sph.radius - outlineLength )\n    {\n        float custom_z = sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0));\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = vec3(0.8,0.8,0.8) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * sph.material.diffuse * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = sph.material.specular * spec;\n        \n        col = ambient + diffuse + specular;\n    }\n    if(length(uv - vec2(sph.center.x,sph.center.y)) < sph.radius - outlineLength && length(uv - vec2(sph.center.x,sph.center.y)) >= sph.radius - centerDist)\n    {\n        if(uv.y <= 0.485)\n        {\n            float custom_z = sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0) + 0.8);\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * vec3(1.0,1.0,1.0) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * sph.material.diffuse * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = sph.material.specular * spec;\n        \n        col = ambient + diffuse + specular;\n        }else if (uv.y>=0.505)\n        {\n             float custom_z = sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0) + 0.8);\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * sph.material.albedo * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * sph.material.diffuse * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = sph.material.specular * spec;\n        \n        col = ambient + diffuse + specular;\n        }else\n        {\n            float custom_z = (sph.center.z - sqrt(pow(sph.radius,2.0) - pow(uv.y - sph.center.y,2.0)));\n        \n        vec3 uv_3D = vec3(uv,custom_z);\n\t\n        vec3 ambient = vec3(0.0);\n        vec3 diffuse = vec3(0.0);\n        vec3 specular = vec3(0.0);\n        \n        ambient = sph.material.ambient * vec3(0.1,0.1,0.1) * lightColor;\n        \n        vec3 normal = normalize(uv_3D - sph.center);\n        vec3 lightDir = normalize(lightPos - uv_3D);\n        float diff = max(dot(normal, lightDir),0.0);\n        \n        \n        diffuse = sph.material.albedo * vec3(0.0,0.0,0.0) * lightColor * diff;\n        \n        vec3 viewDir = normalize(camera - uv_3D);\n        vec3 reflectDir = reflect(-lightDir,normal); //might need normalize\n        float spec = pow(max(dot(viewDir, reflectDir),0.0),sph.material.shininess);\n        specular = vec3(0.2,0.2,0.2) * spec;\n        \n        col = ambient + diffuse + specular;\n        }\n       \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}