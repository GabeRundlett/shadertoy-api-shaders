{
    "Shader": {
        "info": {
            "date": "1444021607",
            "description": "A rough parallax scrolling star field.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtjSDh",
            "likes": 18,
            "name": "Parallax Scrolling Star Field",
            "published": 3,
            "tags": [
                "parallax",
                "starfield"
            ],
            "usePreview": 0,
            "username": "AxleMike",
            "viewed": 2781
        },
        "renderpass": [
            {
                "code": "// Voronoi and fractal noise functions based on iq's https://www.shadertoy.com/view/MslGD8\n\nfloat Hash(in vec2 p)\n{\n\tfloat h = dot(p, vec2(12.9898, 78.233));\n    return -1.0 + 2.0 * fract(sin(h) * 43758.5453);\n}\n\nvec2 Hash2D(in vec2 p)\n{\n\tfloat h = dot(p, vec2(12.9898, 78.233));\n    float h2 = dot(p, vec2(37.271, 377.632));\n    return -1.0 + 2.0 * vec2(fract(sin(h) * 43758.5453), fract(sin(h2) * 43758.5453));\n}\n\nfloat Noise(in vec2 p)\n{\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(Hash(n), Hash(n + vec2(1.0, 0.0)), u.x),\n               mix(Hash(n + vec2(0.0, 1.0)), Hash(n + vec2(1.0)), u.x), u.y);\n}\n\nfloat FractalNoise(in vec2 p)\n{\n    p *= 5.0;\n    mat2 m = mat2(1.6,  1.2, -1.2,  1.6);\n\tfloat f = 0.5000 * Noise(p); p = m * p;\n\tf += 0.2500 * Noise(p); p = m * p;\n\tf += 0.1250 * Noise(p); p = m * p;\n\tf += 0.0625 * Noise(p); p = m * p;\n    \n    return f;\n}\n\nvec3 Voronoi(in vec2 p)\n{\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for(int j = -1; j <= 1; ++j)\n    {\n        for(int i = -1; i <= 1; ++i)\n        {\n            vec2 g = vec2(float(i), float(j));\n            vec2 o = Hash2D(n + g);\n\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n                mg = g;\n            }\n        }\n    }\n\treturn vec3(md, mr);\n}\n\nvec3 ApplyFog(in vec2 texCoord)\n{\n    vec3 finalColor = vec3(0.0);\n    \n    vec2 samplePosition = (4.0 * texCoord.xy / iResolution.xy) + vec2(0.0, iTime * 0.0025);\n    float fogAmount = FractalNoise(samplePosition) * 0.175;\n        \n    vec3 fogColor = vec3(texCoord.xy / iResolution.xy + vec2(0.5, 0.0), sin(iTime) * 0.25 + 0.5);\n    finalColor = fogColor * fogAmount * vec3(sin(iTime) * 0.00125 + 0.75);  \n    \n    return finalColor;\n}\n\nvec3 AddStarField(vec2 samplePosition, float threshold)\n{\n    vec3 starValue = Voronoi(samplePosition);\n    if(starValue.x < threshold)\n    {\n        float power = 1.0 - (starValue.x / threshold);\n        return vec3(power * power * power);\n    }\n    return vec3(0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float maxResolution = max(iResolution.x, iResolution.y);\n    \n\tvec3 finalColor = ApplyFog(fragCoord.xy);\n    \n    // Add Star Fields\n    vec2 samplePosition = (fragCoord.xy / maxResolution) + vec2(0.0, iTime * 0.01);\n    finalColor += AddStarField(samplePosition * 16.0, 0.00125);\n    \n    samplePosition = (fragCoord.xy / maxResolution) + vec2(0.0, iTime * 0.004);\n    finalColor += AddStarField(samplePosition * 20.0, 0.00125);\n    \n    samplePosition = (fragCoord.xy / maxResolution) + vec2(0.0, iTime * 0.0005 + 0.5);\n    finalColor += AddStarField(samplePosition * 8.0, 0.0007);\n    \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}