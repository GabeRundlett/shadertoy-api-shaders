{
    "Shader": {
        "info": {
            "date": "1479880307",
            "description": "A recreation of the Pokémon Go map! (with better graphics, of course)",
            "flags": 32,
            "hasliked": 0,
            "id": "Mt3XDM",
            "likes": 3,
            "name": "Pokémon Go",
            "published": 3,
            "tags": [
                "raymarcher",
                "world",
                "go",
                "pokemon",
                "pokestop"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "// Pokémon Go by jackdavenport\n// All credits are in comments above the relevant code.\n// Please give credit if you use any of my code below!\n// Enjoy the shader :)\n\n#define RES iChannelResolution[0]\n\n// ACES tonemapping by knarkowicz (based on UE4)\n// Source: https://knarkowicz.wordpress.com/\nvoid aces(inout vec3 col) {\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    col = clamp((col*(a*col+b))/(col*(c*col+d)+e),0.,1.);\n}\n\n// Very crude (but simple) DOF by me\nvoid dof(inout vec3 col, in vec2 uv, in float depth) {\n\tfloat blr = (1.-smoothstep(5.,7.,depth))+\n        \t\t\tsmoothstep(14.,15.,depth);\n    col = mix(col, texture(iChannel1,uv).xyz, clamp(blr,0.,1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / RES.xy;\n\tfragColor = texture(iChannel0, uv);\n    \n    dof(fragColor.xyz, uv, fragColor.w);\n    aces(fragColor.xyz);\n    fragColor.w = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Pokémon Go by jackdavenport\n// All credits are in comments above the relevant code.\n// Please give credit if you use any of my code below!\n// Enjoy the shader :)\n\n// Main renderer\n\n// Just me being lazy :P\n#define RES iResolution\n#define RGB(r,g,b) vec3(r/255.,g/255.,b/255.)\n\n// Math constants\n#define E 2.71828\n#define PI 3.14159265359\n\n// Raymarcher settings\n#define MAX_ITERATIONS 256\n#define PRIMARY_ITER   MAX_ITERATIONS\n#define SECONDARY_ITER 64\n\n// Distance/shadow biases\n#define EPSILON .001\n#define SHADOW_BIAS .01\n\n// Soft shadow settings\n#define SHADOW_SAMPLES 32\n#define SHADOW_HARDNESS 64.\n#define SHADOW_MAX_DIST 256.\n\n// Light settings\n#define LIGHT_AMB .35\n#define LIGHT_DIR vec3(0.241121, 0.868037, -0.434019) // (25,90,-45) normalized\n//#define LIGHT_DIR normalize(vec3(25.,90.,45.)) // normalizes on the fly, less efficient\n\n// Fog settings\n#define CLEAR_COLOR vec3(.4,.6,.9)\n#define FOG_DENSITY .02\n\nvec2 rot2D(vec2 p, float angle) {\n    angle = radians(angle);\n    float s = sin(angle), c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}\n\n// Distance functions by iq\n// Source: https://iquilezles.org/articles/distfunctions\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 dstPokestop(vec3 p) {\n    float off = cos(floor(p.x/6.)) * 1.5;\n    p.xz -= off;\n    p.xz = rot2D(p.xz, 180.*floor(p.z));\n    float dst = udBox(vec3(0.,1.,0.)-p, vec3(.3,.05,.3))-.05;\n    dst = min(dst, udBox(vec3(0.,.5,0.)-p, vec3(.04,.5,.04)));\n    vec3 q = p;\n    q.xz = rot2D(q.xz, 35.+iTime*4.);\n    dst = min(dst, udBox(vec3(0.,2.,0.)-q, vec3(.225)));\n    dst = min(dst, sdCappedCylinder(p, vec2(.2,.05)));\n    return vec2(dst, 1.);\n}\n\nvec2 dstUnion(vec2 a, vec2 b) {\n    if(a.x < b.x || b.y < 0.) return a;\n    return b;\n}\n\nvec2 dstScene(vec3 p) {\n    float h  = texture(iChannel0, p.xz*.01).x*.015;\n    vec2 dst = vec2(p.y-h, 0.);\n    vec3 q = p + vec3(0.,h,0.);\n    q.xz   = mod(q.xz, vec2(7.5))-3.75;\n    dst    = dstUnion(dst, dstPokestop(q));\n    return dst;\n}\n\nvec2 raymarch(vec3 ro, vec3 rd, int iter) {\n    float  t = 0.;\n    float id = -1.;\n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n        if(i >= iter) {\n            break;\n        }\n        vec2 scn = dstScene(ro+rd*t);\n        if(scn.x < EPSILON) {\n            id = scn.y;\n            break;\n        }\n        t += scn.x * .75;\n    }\n    return vec2(t,id);\n}\n\nvec3 calcNormal(vec3 p, float t) {\n    vec2 e = vec2(EPSILON*t,0.);\n    vec3 n = vec3(dstScene(p+e.xyy).x-dstScene(p-e.xyy).x,\n                  dstScene(p+e.yxy).x-dstScene(p-e.yxy).x,\n                  dstScene(p+e.yyx).x-dstScene(p-e.yyx).x);\n    return normalize(n);\n}\n\n// Soft shadows by iq\n// Source: https://www.shadertoy.com/view/Xds3zN\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<SHADOW_SAMPLES; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t ).x;\n        res = min( res, SHADOW_HARDNESS*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcLighting(vec3 col, vec3 p, vec3 n, vec3 r, float sh) {\n    float d = max(dot(LIGHT_DIR,n),0.);\n    float s = pow(max(dot(LIGHT_DIR,r),0.),sh);\n    float a = softshadow(p, LIGHT_DIR, SHADOW_BIAS, SHADOW_MAX_DIST);\n    d *= a;\n    s *= a;\n    return (col*(LIGHT_AMB+d))+(s);\n}\n\nvec3 shadeGround(vec3 p, vec3 n, vec3 r) {\n    vec3 col = RGB(147.,215.,139.);\n    float tx = texture(iChannel0, p.xz*.01).x;\n    col *= .7+.3*tx;\n        \n    col = calcLighting(col, p, n, r, 60.);\n    return col;\n}\n\nvec3 shadePokestop(vec3 p, vec3 n, vec3 r) {\n    vec3 col = RGB(20.,234.,251.);\n    col = calcLighting(col, p, n, r, 20.);\n    return col;\n}\n\nvec4 shade(vec3 ro, vec3 rd) {\n    vec2 scn = raymarch(ro, rd, PRIMARY_ITER);\n    vec4 col = vec4(CLEAR_COLOR,0.);\n    if(scn.y >= 0.) {\n        vec3 p = ro+rd*scn.x;\n        vec3 n = calcNormal(p, scn.x);\n        vec3 r = normalize(reflect(rd, n));\n        \n        float fp = 1.;\n        if(scn.y == 0.) {\n            fp = .075;\n            col.xyz = shadeGround(p,n,r);\n        }\n        if(scn.y == 1.) {\n            col.xyz = shadePokestop(p,n,r);\n        }\n            \n        vec3 rc = CLEAR_COLOR;\n        vec2 rs = raymarch(p+r*SHADOW_BIAS,r,SECONDARY_ITER);\n        if(rs.y > -1.) {\n            vec3 rp = p+r*rs.x;\n            vec3 rn = calcNormal(rp,rs.x);\n            vec3 rr = normalize(reflect(r, rn));\n            if(rs.y == 0.) {\n                rc = shadeGround(p,n,r);\n            } else if(rs.y == 1.) {\n             \trc = shadePokestop(p,n,r);   \n            }\n        }\n        \n        float f = 1.-clamp(pow(max(-dot(rd,n),0.),fp),0.,1.);\n        col.xyz = mix(col.xyz, rc, f);\n        \n        float fog = 1.-clamp(1./(pow(E,pow((scn.x*FOG_DENSITY),2.))),0.,1.);\n        col.xyz = mix(col.xyz, CLEAR_COLOR, fog);\n    }\n    col.w = scn.x;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - RES.xy * .5) / RES.y;\n    vec3 ro = vec3(sin(iTime*.05)*50., 4., iTime);\n    vec3 rd = vec3(uv, 1.);\n    \n    vec3 trg = ro+vec3(cos(iTime*.25),-1.15,2.);\n    //if(iMouse.z > 0.) {\n    //    float ca = (iMouse.x/iResolution.x)*(2.*PI);\n    //    ro.x = cos(ca)*3.;\n    //    ro.z = sin(ca)*3.;\n    //    trg  = vec3(ro.x,0.,ro.z);\n    //}\n    \n    vec3 f = normalize(trg-ro);\n    vec3 u = normalize(cross(f, vec3(0.,1.,0.)));\n    vec3 v = normalize(cross(u, f));\n    rd = mat3(u,v,f)*rd;\n    \n    fragColor = shade(ro, normalize(rd));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Pokémon Go by jackdavenport\n// All credits are in comments above the relevant code.\n// Please give credit if you use any of my code below!\n// Enjoy the shader :)\n\n// DOF Horizontal Blur\n\n#define SAMPLES 32\n#define RADIUS .02\n\nvec3 blur(vec2 uv) {\n    vec3 sum = vec3(0.);\n    float sm = float(SAMPLES);\n    for(int i = 0; i < SAMPLES; i++) {\n        float p = (float(i)/sm)*2.-1.;\n        sum += texture(iChannel0, uv+vec2(p*RADIUS,0.)).xyz;\n    }\n    return sum / sm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.xyz = blur(fragCoord/iResolution.xy);\n    fragColor.w   = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Pokémon Go by jackdavenport\n// All credits are in comments above the relevant code.\n// Please give credit if you use any of my code below!\n// Enjoy the shader :)\n\n// DOF Vertical Blur\n\n#define SAMPLES 32\n#define RADIUS .02\n\nvec3 blur(vec2 uv) {\n    vec3 sum = vec3(0.);\n    float sm = float(SAMPLES);\n    for(int i = 0; i < SAMPLES; i++) {\n        float p = (float(i)/sm)*2.-1.;\n        sum += texture(iChannel0, uv+vec2(0.,p*RADIUS)).xyz;\n    }\n    return sum / sm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor.xyz = blur(fragCoord/iResolution.xy);\n    fragColor.w   = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}