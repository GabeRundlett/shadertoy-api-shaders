{
    "Shader": {
        "info": {
            "date": "1680373802",
            "description": "based on https://www.shadertoy.com/view/4lcfDl",
            "flags": 32,
            "hasliked": 0,
            "id": "DstSWB",
            "likes": 3,
            "name": "Water fall fork",
            "published": 3,
            "tags": [
                "simulation",
                "water",
                "fluid"
            ],
            "usePreview": 0,
            "username": "ddinhddoong",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n    vec4 data = T(U);\n\n    // density display\n    float d = data.w*3.;\n    vec4 cd = d*vec4(.1, .5, 1, 1);\n    \n    // velocity display\n    vec2 ve = data.xy*.1;\n    vec4 cv = vec4(ve.x, ve.y, 0, 1);\n    \n    // pressure display\n    float p = data.z;\n    vec4 cp = p*vec4(1, 1, 1, 1);\n    \n    \n    //C = cp;\n    //C = cv;\n    C = cd;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 data, in vec2 coord)\n{\n    R = iResolution.xy;\n\n    vec4 e = T(coord + vec2(1, 0)),\n         n = T(coord + vec2(0, 1)),\n         w = T(coord + vec2(-1, 0)),\n         s = T(coord + vec2(0, -1));\n\n    //advection\n    vec2 vu = T(coord - dt * T(coord).xy).xy;\n    data = T(coord - dt * vu);\n    \n    //test, max density = maxD;\n    float ww = max(w.w - maxD, 0.),\n          nn = max(n.w - maxD, 0.),\n          ee = max(e.w - maxD, 0.),\n          ss = max(s.w - maxD, 0.);\n    float sigma = (ww+nn+ee+ss)/4.;\n    if (data.w < maxD) data.w += sigma;\n    else\n    data.w -= sigma;\n    \n    float waterLevel = ceil(data.w - .2);\n    //pressure gradient\n    vec2 gp = vec2(e.z - w.z, n.z - s.z);\n\n    //density gradient\n    vec2 gw = vec2(e.w - w.w, n.w - s.w)*waterLevel;\n\n    //divergence\n    float div = (e.x - w.x + n.y - s.y)*waterLevel;\n    float p = (w.z + n.z + e.z + s.z) / 4.;\n    data.z = p + 0.01 * div;\n\n    //vorticity\n    vec2 vort = vec2(abs(n.z) - abs(s.z), abs(e.z) - abs(w.z));\n    vort *= VORTICITY_AMOUNT / length(vort + 1e-9) * (data.z);\n\n    //update velocity\n    float r = (1.+ 10.* data.w) * .1;\n    data.xy += r * k * gp - l * gw + vort;\n\n    //vertical gravity\n    if(data.w > 0.)\n    data.y -= r * g * (data.w + .1);\n\n    //spherical gravity\n    //data.xy -= r*g * data.w * normalize(coord.xy -  R*.5);\n\n    // dissipation\n    if (data.w < 0.001) data.z *= .998; //move slower in air\n    data.xyz *= .9998;\n    data.w *= 1.003;\n\n    //initial data\n    if (iFrame < 1)\n        data = vec4(0);\n\n    //obstacle\n    bool isWall = (coord.x < 1.|| coord.y < 1.|| coord.x > R.x - 1. || coord.y > R.y - 1.); //1px border\n    if (isWall ||\n       isBlock(vec2(0., 0.), vec2(.15, .5), coord) ||\n       isBlock(vec2(0., 0.), vec2(.35, .25), coord) ||\n       isBlock(.45 * vec2(1., 1.), .55 * vec2(1., 1.), coord))\n    {\n        data.xy *= 0.;\n        data.w *= .5;\n    }\n    //water source\n    if (length(coord - R * vec2(.0, .75)) < 8.)\n    {\n        data.x = 30.;\n        //data.y = 50.;\n        data.w = 1.;\n    }\n    // mouse interaction\n    if (length(coord - iMouse.xy) < 10. && iMouse.z > 0.)\n    {\n        //data.xy = (iMouse.xy - abs(iMouse.zw)) * 3.;\n        data.w = 1.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define k 20. //pressure diffuse\n#define l 7. //density diffuse\n#define dt .5\n#define g 2.5 // g = m*9.8\n#define t iTime\n#define maxD .5\n#define T(p) texture(iChannel0,(p)/iResolution.xy)\n#define T1(p) texture(iChannel1,(p)/iResolution.xy)\n#define T2(p) texture(iChannel2,(p)/iResolution.xy)\n\n//Recommended values between 0.03 and 0.2\n//higher values simulate lower viscosity fluids (think billowing smoke)\n#define VORTICITY_AMOUNT 0.03\n\nvec2 R;\n\nbool isBlock(vec2 startPoint, vec2 endPoint, vec2 coord)\n{\n    return (coord.x > startPoint.x * R.x && coord.y > startPoint.y * R.y &&\n            coord.x < endPoint.x * R.x && coord.y < endPoint.y * R.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 data, in vec2 coord)\n{\n    R = iResolution.xy;\n    \n    vec4 e = T(coord + vec2(1, 0)),\n         n = T(coord + vec2(0, 1)),\n         w = T(coord + vec2(-1, 0)),\n         s = T(coord + vec2(0, -1));\n    \n\n    data = texture(iChannel0, coord/R);\n    if(data.w <= 0.0) data.z *= .99;\n    \n    //data.xy += (w.w*vec2(1, 0) + n.w*vec2(0, 1) + e.w*vec2(-1, 0) + s.w*vec2(0, -1))*2.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 data, in vec2 coord)\n{\n    R = iResolution.xy;\n\n    vec4 e = T(coord + vec2(1, 0)),\n         n = T(coord + vec2(0, 1)),\n         w = T(coord + vec2(-1, 0)),\n         s = T(coord + vec2(0, -1));\n    \n    data = T(coord);\n    //test, max density = maxD;\n    float ww = max(w.w - maxD, 0.),\n          nn = max(n.w - maxD, 0.),\n          ee = max(e.w - maxD, 0.),\n          ss = max(s.w - maxD, 0.);\n    float sigma = (ww+nn+ee+ss)/4.;\n    if (data.w < maxD) data.w += sigma;\n    else\n    data.w -= sigma;\n    \n    //divergence\n    float div = (e.x - w.x + n.y - s.y);\n    float p = (w.z + n.z + e.z + s.z) / 4.;\n    data.z = p + 0.01 * div;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 data, in vec2 coord)\n{\n    R = iResolution.xy;\n\n    vec4 e = T(coord + vec2(1, 0)),\n         n = T(coord + vec2(0, 1)),\n         w = T(coord + vec2(-1, 0)),\n         s = T(coord + vec2(0, -1));\n    \n    data = T(coord);\n    //test, max density = maxD;\n    float ww = max(w.w - maxD, 0.),\n          nn = max(n.w - maxD, 0.),\n          ee = max(e.w - maxD, 0.),\n          ss = max(s.w - maxD, 0.);\n    float sigma = (ww+nn+ee+ss)/4.;\n    if (data.w < maxD) data.w += sigma;\n    else\n    data.w -= sigma;\n    \n    //divergence\n    float div = (e.x - w.x + n.y - s.y);\n    float p = (w.z + n.z + e.z + s.z) / 4.;\n    data.z = p + 0.01 * div;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}