{
    "Shader": {
        "info": {
            "date": "1415024350",
            "description": "try noiseA, noiseB and noiseC with real non-ANGLE OpenGL and you will notice some differences or no any differences, depending on your used GPU and/or graphics driver version",
            "flags": 0,
            "hasliked": 0,
            "id": "XdjXRd",
            "likes": 2,
            "name": "noise differences",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "BeRo",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "      \n\nfloat noiseA(in vec2 p){ // The reference function                \n  vec2 f = fract(p);\n  f = (f*f)*(3.0-(2.0*f));\n  p = floor(p); \n  vec4 b = vec4(12.34, 56.78, 1.0, 0.0);\n  vec4 r = fract(sin(vec4(dot(p.xy + b.ww, b.xy), dot(p.xy + b.zw, b.xy), dot(p.xy + b.wz, b.xy), dot(p.xy + b.zz, b.xy))) * 12345.6789);     \n  return mix(mix(r.x,r.y,f.x),mix(r.z,r.w,f.x),f.y);\t\n}\n\nfloat noiseB(in vec2 p){ // With manual by-hand dot products                \n  vec2 f = fract(p);\n  f = (f*f)*(3.0-(2.0*f));\n  p = floor(p); \n  vec4 b = vec4(12.34, 56.78, 1.0, 0.0);\n  vec2 pa = p.xy + b.ww;\n  vec2 pb = p.xy + b.zw;\n  vec2 pc = p.xy + b.wz;\n  vec2 pd = p.xy + b.zz;\n  vec4 r = fract(sin(vec4((pa.x * b.x) + (pa.y * b.y), (pb.x * b.x) + (pb.y * b.y), (pc.x * b.x) + (pc.y * b.y), (pd.x * b.x) + (pd.y * b.y))) * 12345.6789);     \n  return mix(mix(r.x,r.y,f.x),mix(r.z,r.w,f.x),f.y);\t\n}           \n\nfloat noiseC(in vec2 p){ // With a mat4 term optimized (hint: mat4 * vec4 != vec4 * mat4)               \n  vec2 f = fract(p);\n  f = (f*f)*(3.0-(2.0*f));\n  vec4 r = fract(sin((floor(p.xyxy) + vec4(0.0, 0.0, 1.0, 1.0)) * mat4(12.34, 56.78, 0.0, 0.0, 0.0, 56.78, 12.34, 0.0, 12.34, 0.0, 0.0, 56.78, 0.0, 0.0, 12.34, 56.78)) * 12345.6789);     \n  return mix(mix(r.x,r.y,f.x),mix(r.z,r.w,f.x),f.y);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  fragColor = vec4(noiseA(uv * 16.0)); // CHANGE HERE noiseA with noiseB or noiseC\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}