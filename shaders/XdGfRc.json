{
    "Shader": {
        "info": {
            "date": "1529760450",
            "description": "move with arrow keys or wasd to move, space to fly.\nsettings and key mappings in common.",
            "flags": 48,
            "hasliked": 0,
            "id": "XdGfRc",
            "likes": 4,
            "name": "snake with broken physics",
            "published": 3,
            "tags": [
                "snake",
                "physics"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "vec4 getbuffer(ivec2 coord) {\n    return texelFetch(iChannel0,coord,0);\n}\n\nvec4 getindex(int x) {\n    return texelFetch(iChannel0,ivec2(x,0),0);\n}\n\n//line df by iq https://iquilezles.org/articles/distfunctions\nfloat line( vec3 p, vec3 a, vec3 b ) \n{\n    vec3 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//distance field, rendering and collision detection\nfloat map(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = (p.y+sin(p.x*0.4)+sin(p.x*0.1)*4.0)*0.8;\n    \n    float tree = length(p2);\n    tree = length(max(vec2(tree-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    \n    \n    float len = min(min(plane,tree),top);\n    \n    \n    \n    return len;\n}\n\nint mapid(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    \n    float plane = p.y+sin(p.x*0.4)+sin(p.x*0.1)*4.0;\n    \n    float trunk = length(p2);\n    trunk = length(max(vec2(trunk-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    \n    \n    return (plane < 0.01) ? 1 : ((trunk < 0.01) ? 2 : ((top < 0.01) ? 3 : 0));\n}\n\nvec3 rotatecam(vec3 dir)\n{\n    \n    vec4 rotation = getindex(INDEX_ROT);\n    \n    //dir.xy *= rot(rotation.y);\n    dir.yz *= rot(rotation.y);\n    dir.xz *= rot(rotation.x);\n    \n    return dir;\n}\n\nfloat castray(vec3 pos, vec3 dir)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 500; i++)\n    {\n        len = map(pos);\n        dist += len;\n        pos += dir*len;\n        if (dist > 100.0 || len < 0.001) break;\n    }\n    if (dist > 100.0) return 10000.0;\n    return dist;\n}\n\nvec3 calcnormal(vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    \n    vec3 normal = normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                                 map(p+eps.yxy)-map(p-eps.yxy),\n                                 map(p+eps.yyx)-map(p-eps.yyx)));\n    return normal;\n}\n\nfloat charmap(vec3 p)\n{\n    float snake = 10000.0;\n    \n    for (int i = INDEX_SNAKE_START; i < INDEX_SNAKE_END; i++) {\n        snake = min(snake, line(p,getindex(i).xyz,getindex(i+1).xyz)-0.5);\n    }\n    \n    return snake;\n}\n\nvec3 calcnormalcharacter(vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    \n    vec3 normal = normalize(vec3(charmap(p+eps.xyy)-charmap(p-eps.xyy),\n                                 charmap(p+eps.yxy)-charmap(p-eps.yxy),\n                                 charmap(p+eps.yyx)-charmap(p-eps.yyx)));\n    return normal;\n}\n\nfloat castraycharacter(vec3 pos, vec3 dir, vec3 head)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        \n        len = charmap(pos);\n        \n        dist += len;\n        pos += dir*len;\n        if (dist > 50.0 || len < 0.01) break;\n    }\n    if (dist > 50.0) return 10000.0;\n    return dist;\n}\n\nfloat castshadowcharacter( in vec3 ro, in vec3 rd, vec3 head, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t < maxt; )\n    {\n        \n        float h = charmap(ro+rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n\n    vec3 dir = normalize(vec3(uv,1.0));\n    //dir *= matrix;\n    dir = rotatecam(dir);\n\n    vec3 pos2 = getindex(INDEX_HEAD).xyz;\n\n    vec3 camdir = vec3(0,1,0)-rotatecam(vec3(0.0,0.0,1.0))*DIST_THIRDPERSON;\n\n    float thirdpers = getindex(INDEX_CAM).r;\n\n    vec3 pos = pos2 + camdir*thirdpers;\n    float dist1 = castraycharacter(pos, dir, pos2);\n    float dist2 = castray(pos,dir);\n    float dist = min(dist1,dist2);\n\n    vec3 ldir = normalize(vec3(-1,-1,-1));\n\n    float opacity = 1.0;\n    float opacity2 = clamp(1.5-thirdpers*2.0,0.0,1.0);\n    if (dist1 < dist2)\n    {\n        opacity = clamp(1.3-dist1*0.5,0.0,1.0);\n        vec3 pos3 = pos+dir*dist1;\n        vec3 normal = calcnormalcharacter(pos3);\n        fragColor = vec4(normal*0.5+0.5,1.0);\n\n        float diffusion = dot(normal,-ldir);\n        float ambient = 0.1;\n\n        fragColor *= clamp(diffusion,ambient,1.0);\n    }\n\n    vec4 col = vec4(0);\n    if (dist2 < 1000.0)\n    {\n        vec3 pos3 = pos+dir*dist2;\n        vec3 normal = calcnormal(pos3);\n\n        int id = mapid(pos3);\n\n        if (id == 1)\n        {\n            col = texture(iChannel2,pos3*0.2).r*vec4(0.5,0.3,0.1,1);\n            col *= col;\n        }\n        else if (id == 2)\n        {\n            col = vec4(0.5,0.3,0.1,1);\n        }\n        else if (id == 3)\n        {\n            float noise = textureLod(iChannel2,pos3*0.4,0.0).r;\n            col = mix(vec4(0.2,1,0.1,1),vec4(0.3,0.4,0.2,1),noise);\n        }\n\n        float shadow = 1.0-(1.0-castshadowcharacter(pos3,-ldir,pos2,0.0,4.0,5.0))*(1.0-opacity2);\n\n        float diffusion = clamp(dot(normal,-ldir),0.0,1.0);\n        float ambient = 0.1;\n\n        col *= clamp(diffusion*shadow,ambient,1.0);\n    }\n    else\n    {\n        col = texture(iChannel3,dir);\n        col *= col;\n    }\n\n    fragColor = mix(fragColor,col,opacity);\n    fragColor = sqrt(fragColor);\n    \n    vec2 temp = abs(fragCoord-iResolution.xy*0.5);\n    vec2 crosshair = vec2(min(temp.x,temp.y)-2.0,abs(max(temp.x,temp.y)-16.0)-6.0);\n    \n    if (crosshair.x <= 0.0 && crosshair.y <= 0.0) {\n        fragColor = vec4(crosshair.x <= -1.0 && crosshair.y <= -1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 getindex(int x)\n{\n    int y = x/int(iResolution.x);\n    x = x%int(iResolution.x);\n    return texelFetch(iChannel0,ivec2(x,y),0);\n}\n\nvec4 getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0);\n}\n\n//distance field, rendering and collision detection\nfloat map(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y+sin(p.x*0.4)+sin(p.x*0.1)*4.0;\n    \n    float tree = length(p2);\n    tree = length(max(vec2(tree-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    float len = min(min(plane,tree),top);\n    \n    float len2 = 1e6;\n    \n    return max(len,2.0-sqrt(len2));\n}\n\nint mapid(vec3 p)\n{\n    vec2 p2 = mod(p.xz,16.0)-8.0;\n    \n    float plane = p.y;\n    \n    float trunk = length(p2);\n    trunk = length(max(vec2(trunk-1.0,p.y-10.0),0.0));\n    \n    float top = length(vec3(p2,p.y-10.0))-4.0;\n    \n    return (plane < 0.01) ? 1 : ((trunk < 0.01) ? 2 : ((top < 0.01) ? 3 : 0));\n}\n\nvec3 rotatecam(vec3 dir)\n{\n    \n    vec4 rotation = getindex(INDEX_ROT);\n    \n    //dir.xy *= rot(rotation.y);\n    dir.yz *= rot(rotation.y);\n    dir.xz *= rot(rotation.x);\n    \n    return dir;\n}\n\nfloat castray(vec3 pos, vec3 dir)\n{\n    \n    float dist = 0.0;\n    float len;\n    \n    for (int i = 0; i < 500; i++)\n    {\n        len = map(pos);\n        dist += len;\n        pos += dir*len;\n        if (dist > 100.0 || len < 0.01) break;\n    }\n    if (dist > 100.0) return 10000.0;\n    return dist;\n}\n\nvec3 calcnormal(vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.0);\n    \n    vec3 normal = normalize(vec3(map(p+eps.xyy)-map(p-eps.xyy),\n                                 map(p+eps.yxy)-map(p-eps.yxy),\n                                 map(p+eps.yyx)-map(p-eps.yyx)));\n    return normal;\n}\n\nvec4 setvariables(int index)\n{\n    bool bufferloaded = all(equal(getindex(INDEX_LOADED),vec4(iResolution,1)));\n    vec4 fragColor;\n    if (index == INDEX_HEAD)\n    {\n        fragColor = getindex(INDEX_SNAKE_HEAD);\n        return fragColor;\n    }\n    \n    if (index == INDEX_MOUSE)\n    {\n        fragColor = iMouse/iResolution.xyxy;\n        return fragColor;\n    }\n    \n    if (index == INDEX_ROT)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(0);\n            return fragColor;\n        }\n        fragColor = getindex(index);\n        \n    \tvec4 lastiMouse = getindex(INDEX_MOUSE)*iResolution.xyxy;\n        vec4 mousedelta = vec4(0.0);\n        if (all(greaterThan(min(lastiMouse,iMouse).xy,vec2(0.0)))) {\n            mousedelta = (iMouse-lastiMouse)/iResolution.y;\n        }\n        fragColor.x += mousedelta.x*SENSITIVITY_X;\n        fragColor.y = clamp(fragColor.y+mousedelta.y*SENSITIVITY_Y,-HALF_PI,HALF_PI);\n        return fragColor;\n    }\n    \n    if (index == INDEX_LOADED)\n    {\n        fragColor = vec4(iResolution,1);\n        return fragColor;\n    }\n    if (index == INDEX_CAM)\n    {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(1,0,0,0);\n            return fragColor;\n        }\n        float lastdist = getindex(index).r;\n        vec3 pos = getindex(INDEX_HEAD).xyz;\n        vec3 camdir = vec3(0,1,0)-rotatecam(vec3(0.0,0.0,1.0))*DIST_THIRDPERSON;\n        \n        float dist = castray(pos,normalize(camdir));\n        \n        fragColor.r = min(min(dist/length(camdir)-0.1,lastdist+1.0/60.0),1.0);\n        //fragColor.r = min(min(dist/length(camdir)-0.1,lastdist+iTimeDelta),1.0);\n        return fragColor;\n    }\n    if (index >= INDEX_SNAKE_START && index <= INDEX_SNAKE_END) {\n        if (!bufferloaded)\n        {\n            fragColor = vec4(index,3,0,1);\n            return fragColor;\n        }\n        \n        vec3 prev  = getindex(index-1).xyz;\n        vec3 joint = getindex(index+0).xyz;\n        vec3 next  = getindex(index+1).xyz;\n        \n        vec3 movement = vec3(0);\n        vec3 stretch = vec3(0.001);\n        if (index != INDEX_SNAKE_START && joint != prev) {\n            stretch += prev-joint;\n            movement += (prev-joint+normalize((joint-prev))*0.5)*vec3(0.5,0.5,0.5);\n        }\n        if (index != INDEX_SNAKE_END && joint != next) {\n            stretch += next-joint;\n            movement += (next-joint+normalize((joint-next))*0.5)*vec3(0.5,0.5,0.5);\n        }\n        \n        if (index == INDEX_SNAKE_HEAD) {\n            movement *= 0.005;\n        } else {\n\n            float collision = map(joint+movement);\n\n            if (collision<0.5)\n            {\n                vec3 normal = calcnormal(joint+movement);\n\t\t\t\tmovement -= normal*dot(normal,movement)-normal*0.01;\n            }\n        }\n        \n        joint += movement;\n        \n        joint.y -= clamp(map(joint)-0.5,-1.0/6.0,1.0/6.0);\n        //joint.y -= clamp(map(joint)-0.5,-iTimeDelta*10.0,iTimeDelta*10.0);\n        \n        fragColor.xyz = joint;\n        \n        if (index == INDEX_SNAKE_HEAD)\n        {\n            vec2 movement = vec2(getkey(MOVE_RIGHT1,0).x-getkey(MOVE_LEFT1,0).x,\n                        \t    getkey(MOVE_FORW1 ,0).x-getkey(MOVE_BACK1,0).x);\n            \tmovement+= vec2(getkey(MOVE_RIGHT2,0).x-getkey(MOVE_LEFT2,0).x,\n                \t            getkey(MOVE_FORW2 ,0).x-getkey(MOVE_BACK2,0).x);\n            movement *= iTimeDelta*MOVE_SPEED/max(length(movement),1.0);\n\t\t\t\n            vec4 rotation = getindex(INDEX_ROT);\n            mat2 dir2 = rot(rotation.x);\n\n            movement *= dir2;\n        \n            vec3 collider = vec3(movement,0.1).xzy;\n\n            float collision = map(joint+collider);\n\n            if (collision<0.5)\n            {\n                vec2 eps = vec2(0.01,0.0);\n                vec2 normal = vec2(map(joint+collider+eps.xyy),\n                              map(joint+collider+eps.yyx))\n                             -collision;\n\n                if (normal != vec2(0))\n                {\n                    //normal = normal/max(length(normal),0.001)*iTimeDelta*MOVE_SPEED;\n                    normal = normal/max(length(normal),0.001)*1.0/60.0*MOVE_SPEED;\n\n                    joint.xz += normal;\n                }\n            }\n            joint.y += min(getkey(MOVE_UP,0).x/stretch.y/stretch.y*FLYING_FORCE,0.3);\n            joint.xz += movement;\n        }\n        \n        fragColor.xyz = joint;\n        \n        return fragColor;\n    }\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = setvariables(int(fragCoord.x)+int(floor(fragCoord.y)*iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//settings\n#define SNAKE_JOINTS 50\n#define FLYING_FORCE (1.0)\n#define DIST_THIRDPERSON 4.0\n#define MOVE_SPEED 10.0\n#define SENSITIVITY_Y 5.0\n#define SENSITIVITY_X 10.0\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_E     69\n#define KEY_W     87\n#define KEY_A     65\n#define KEY_S     83\n#define KEY_D     68\n#define KEY_SPACE 32\n\n//movement keys\n#define MOVE_FORW1  KEY_W\n#define MOVE_LEFT1  KEY_A\n#define MOVE_RIGHT1 KEY_D\n#define MOVE_BACK1  KEY_S\n\n#define MOVE_FORW2  KEY_UP\n#define MOVE_LEFT2  KEY_LEFT\n#define MOVE_RIGHT2 KEY_RIGHT\n#define MOVE_BACK2  KEY_DOWN\n\n#define MOVE_UP     KEY_SPACE\n\n//constants\n#define HALF_PI 1.5\n\n//buffer pixels indexes\n#define INDEX_HEAD      \t0\n#define INDEX_MOUSE     \t1\n#define INDEX_ROT       \t2\n#define INDEX_LOADED    \t3\n#define INDEX_CAM       \t4\n#define INDEX_SNAKE_HEAD\t5\n#define INDEX_SNAKE_START\t5\n#define INDEX_SNAKE_END\t\t(INDEX_SNAKE_START+SNAKE_JOINTS)\n\n//functions\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define dot2(p) dot(p,p)\n\n#define normalize(x) (x/max(length(x),0.01))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}