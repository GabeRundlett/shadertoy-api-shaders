{
    "Shader": {
        "info": {
            "date": "1393175533",
            "description": "Edited from guil's \"Orbiting\" - https://www.shadertoy.com/view/4dj3Wy . Which was inspired by IQs \"Julia - Traps 1\" https://www.shadertoy.com/view/4d23WG  !  : )",
            "flags": 0,
            "hasliked": 0,
            "id": "Md2GDy",
            "likes": 25,
            "name": "Eye traps",
            "published": 3,
            "tags": [
                "julia",
                "mandelbrot",
                "eyetraps"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 2176
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// David Hoskins.\n// https://www.shadertoy.com/view/Md2GDy\n\nfloat gTime;\n\n\nvec3 Fractal(vec2 uv)\n{\n\tvec2 p = gTime * ((iResolution.xy-uv)/iResolution.y) - gTime * 0.5 + 0.363 - (smoothstep(0.05, 1.5, gTime)*vec2(.5, .365));\n\tvec2 z = p;\n\tfloat g = 4., f = 4.0;\n\tfor( int i = 0; i < 90; i++ ) \n\t{\n\t\tfloat w = float(i)*22.4231+iTime*2.0;\n\t\tvec2 z1 = vec2(2.*cos(w),2.*sin(w));\t\t   \n\t\tz = vec2( z.x*z.x-z.y*z.y, 2.0 *z.x*z.y ) + p;\n\t\tg = min( g, dot(z-z1,z-z1));\n\t\tf = min( f, dot(z,z) );\n\t}\n\tg =  min(pow(max(1.0-g, 0.0), .15), 1.0);\n\t// Eye colours...\n\tvec3 col = mix(vec3(g), vec3(.3, .5, .1), smoothstep(.89, .91, g));\n\tcol = mix(col, vec3(.0), smoothstep(.98, .99, g));\n\tfloat c = abs(log(abs(f))/25.0);\n\tcol = mix(col, vec3(f*.03, c*.4, c ), 1.0-g);\n\treturn clamp(col, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    gTime = pow(abs((.57+cos(iTime*.2)*.55)), 3.0);\n\n    float expand = smoothstep(1.2, 1.6, gTime)*32.0+.5;\n\t// Anti-aliasing...\n\tvec3 col = vec3(0.0);\n\tfor (float y = 0.; y < 2.; y++)\n\t{\n\t\tfor (float x = 0.; x < 2.; x++)\n\t\t{\n\t\t\tcol += Fractal(fragCoord.xy + vec2(x, y) * expand);\n\t\t}\n\t}\n\t\n\tfragColor = vec4(sqrt(col/4.0), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}