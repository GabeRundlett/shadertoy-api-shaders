{
    "Shader": {
        "info": {
            "date": "1504094341",
            "description": "A plausible procedural wood texture displayed on a cube. The cube can be rotated with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tK3DV",
            "likes": 15,
            "name": "Wooden Cube",
            "published": 3,
            "tags": [
                "texture",
                "wood"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 1153
        },
        "renderpass": [
            {
                "code": "// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\nconst float PI = 3.1415926;\n\n//From http://marc-b-reynolds.github.io/math/2016/03/29/weyl_hash.html\nuint hash(uvec2 x) {\n    x = uvec2(0x3504f333, 0xf1bbcdcb)*x; \n    return (x.x^x.y) * 741103597u;\n}\n\n//From https://iquilezles.org/articles/sfrand\nfloat uintBitsToFloat01(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x3f800000u) - 1.0;\n}\n\nfloat uintBitsToFloat11(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x40000000u) - 3.0;\n}\n\nvec2 hash22(vec2 p) {\n\tuvec2 x = floatBitsToUint(p);   \n\treturn vec2(uintBitsToFloat11(hash(x)),\n                uintBitsToFloat11(hash(x + 868867u))); \n}\n\nfloat hash21(vec2 p) {\n    uvec2 x = floatBitsToUint(p);\n    return uintBitsToFloat01(hash(x));\n}\n\nfloat hash11(float p) {\n\tuint x = floatBitsToUint(p);\n    return uintBitsToFloat01(hash(uvec2(x, 324034u)));\n}\n\nfloat vnoise2(vec2 p) {\n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    \n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n    \n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\t\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n   \treturn a + u.x*c1 + u.y*c2 + u.x*u.y*c3;\n}\n\nfloat vnoise1(float p) {\n    float i = floor(p);\n\tfloat f = fract(p);\n    \n    float a = hash11(i);\n    float b = hash11(i + 1.0);\n    \n    float u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(a, b, u);\n}\n\nfloat fbm(vec2 p) {\n\treturn vnoise2(p)*0.5 + vnoise2(p*2.0)*0.25 + vnoise2(p*4.0)*0.125;  \n}\n\nfloat fbm(float p) {\n\treturn vnoise1(p)*0.5 + vnoise1(p*2.0)*0.25 + vnoise1(p*4.0)*0.125;  \n}\n\nfloat gnoise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float a = dot(hash22(i), f);\n\tfloat b = dot(hash22(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\n\tfloat c = dot(hash22(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\n\tfloat d = dot(hash22(i + vec2(1.0)), f - vec2(1.0));\n\n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\n    vec2 q = f*f*f*(f*(f*6.0 - 15.0) + 10.0);\n    \n   \treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\n}\n\nfloat gnoise(float p) {\n    float i = floor(p);\n\tfloat f = fract(p);\n    \n    float a = hash11(i) * f;\n    float b = hash11(i + 1.0) * (f - 1.0);\n    \n    float u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(a, b, u);\n}\n\nvec3 wood(vec3 p) {\n    const vec4 q = vec4(sin(0.25) * normalize(vec3(1.0, 1.0, 1.0)), cos(0.25));\n    p +=  2.0 * cross(q.xyz, cross(q.xyz, p) + q.w * p);\n    \n    vec2 U = 40.0*p.xz + 15.0;\n   \n    vec4 O = vec4(0.0);\n    \n    //Main Rings\n    O.w = length(U);\n    O.w += fbm(O.w*.5);\n    O.w *= log(max(.001, O.w*.2))*.1;\n    O.w += fbm(U*.05 + p.y*.5 + 500.);\n    O.y = floor(O.w);\n    O.z = fract(O.w);\n    O.x = O.z*smoothstep(0., 1., 1. - O.z)*2.7;\n    \n    //Grain\n    O.y = 0.5*(1.0 + gnoise(U.xy*8. + 100. + p.y*5.0))*.5 + \n        gnoise((O.z + O.y + 100. + fbm(U.xy + 200.)*0.06)*20.0 )*.5;\n    O.x = mix(O.x, O.y, .5);\n    \n    return clamp((O.x*1.5 + .3) * vec3(.7, .4, .2)*1., .0, 1.);\n}\n\nvoid camera(in vec2 fragCoord, out vec3 ro, out vec3 rd) {\n    rd = normalize(vec3((fragCoord - iResolution.xy*0.5)/iResolution.y, 0.8));\n    ro = vec3(0.0, 0.0, -2.0);\n    \n    const vec4 q = vec4(vec3(0.0, -1.0, 0.0), 0.0);\n    rd += 2.0 * cross(q.xyz, cross(q.xyz, rd) + q.w * rd);\n    ro += 2.0 * cross(q.xyz, cross(q.xyz, ro) + q.w * ro);\n}\n\nmat3 orientation() {\n\tfloat ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    //ff = 0.0;\n    vec2 m = ff*(PI, -PI*0.4) + vec2(((iMouse.xy + 0.1) / iResolution.xy) * vec2(2.0*PI, PI));\n    m += (1.0 - ff) * iTime*0.2;\n    m *= -vec2(0.5);\n    \t\t\t\t\n    vec2 sm = sin(m);\n    vec2 cm = cos(m);\n    vec4 q = vec4(sm.y*cm.x, sm.x*cm.y, sm.x*sm.y, cm.x*cm.y); \n    \n    float xx = 2.0*q.x*q.x;\n    float yy = 2.0*q.y*q.y;\n    float zz = 2.0*q.z*q.z;\n    float xy = 2.0*q.x*q.y;\n    float xz = 2.0*q.x*q.z;\n    float yz = 2.0*q.y*q.z;\n\n    float w = 2.0*q.w;\n    float wx = w*q.x;\n    float wy = w*q.y;\n    float wz = w*q.z;\n\n    return mat3(1.0 - yy - zz, xy + wz, xz - wy,\n                xy - wz, 1.0 - xx - zz, yz + wx,\n                xz + wy, yz - wx, 1.0 - xx - yy);\n    \n}\n\nbool iRayAABox(in vec3 ro, in vec3 rd, in vec3 invrd, in vec3 b, \n               out vec3 p, out vec3 n) {\n    vec3 t0 = (-b - ro) * invrd;\n    vec3 t1 = (b - ro) * invrd;\n\n    vec3 tmin = min(t0, t1);\n    vec3 tmax = max(t0, t1);\n    \n    float fmin = max(max(tmin.x, tmin.y), tmin.z);\n    float fmax = min(min(tmax.x, tmax.y), tmax.z);\n    \n    p = ro + rd*fmin;\n    n = -sign(rd)*step(tmin.yzx, tmin.xyz)*step(tmin.zxy, tmin.xyz);\n    \n    return fmax >= fmin;   \n}\n\nvec3 lighting(vec3 a, vec3 n, vec3 v) {\n    \n    //float s = (a.r + a.g + a.b)*0.35;\n    float s = 0.6;\n    float fs = 0.04 + (s - 0.04) \n        * pow(1.0 - max(0.0, dot(n, v)), 5.0);\n    \n\treturn (1.0 - fs) * a * texture(iChannel0, n).rgb \n        + fs * texture(iChannel0, reflect(n, v)).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 ro = vec3(0.0), rd = vec3(0.0);\n    vec3 p = vec3(0.0), n = vec3(0.0);\n    \n    mat3 t = orientation();\n    \n    camera(fragCoord, ro, rd);\n    vec3 crd = rd*t;\n    vec3 cro = ro*t;\n    if(!iRayAABox(cro, crd, 1.0/crd, vec3(0.5 + 0.01), p, n)) {\n        fragColor = vec4(pow(texture(iChannel1, rd).rgb, vec3(0.4545)), 1.0);\n        return;\n    }\n    \n    vec3 c = vec3(0.0);\n    for (int i = 0; i < 16; ++i) {\n    \tcamera(fragCoord - 0.5 + vec2(i>>2, i&3)*0.25, ro, rd);\n    \t\n        crd = rd*t;\n        cro = ro*t;\n    \tif (!iRayAABox(cro, crd, 1.0/crd, vec3(0.5), p, n)) {\n        \tc += texture(iChannel1, rd).rgb;\n            continue;\n    \t}\n    \n    \tc += lighting(wood(p), t*n, -rd);\n    }\n    \n    fragColor = vec4(pow(c/16.0, vec3(0.4545)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}