{
    "Shader": {
        "info": {
            "date": "1728087322",
            "description": "MIS, but with quaternion math",
            "flags": 0,
            "hasliked": 0,
            "id": "XXlBR4",
            "likes": 0,
            "name": "MIS - Quaternion Rendering",
            "published": 3,
            "tags": [
                "fractal",
                "mis"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 29
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision highp float;\n#endif\n#define MAX_ITER 5\n#define ESCAPE_RADIUS 1000.0\n#define MIN_RADIUS 1e-5\n\n// 4D vector operations\nvec4 quatMul(vec4 a, vec4 b) {\n    return vec4(\n        a.x*b.x - a.y*b.y - a.z*b.z - a.w*b.w,\n        a.x*b.y + a.y*b.x + a.z*b.w - a.w*b.z,\n        a.x*b.z - a.y*b.w + a.z*b.x + a.w*b.y,\n        a.x*b.w + a.y*b.z - a.z*b.y + a.w*b.x\n    );\n}\n\nvec4 quatExp(vec4 a) {\n    float r = length(a.yzw);\n    float er = exp(a.x);\n    float cosr = cos(r);\n    float sinr = sin(r);\n    return er * vec4(cosr, a.y*sinr/r, a.z*sinr/r, a.w*sinr/r);\n}\n\nvec4 quatLog(vec4 a) {\n    float r = length(a);\n    float theta = acos(a.x / r);\n    float sintheta = sin(theta);\n    return vec4(log(r), \n                sintheta == 0.0 ? 0.0 : theta * a.y / sintheta,\n                sintheta == 0.0 ? 0.0 : theta * a.z / sintheta,\n                sintheta == 0.0 ? 0.0 : theta * a.w / sintheta);\n}\n\nfloat sigmoid(float x) {\n    return 1.0 / (1.0 + exp(-x));\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec4 alpha = vec4(0.5, 0.3, 0.2, 0.1);\n    vec4 beta  = vec4(0.5, 0.1, 0.2, 0.3);\n    \n    float t = iTime * 0.1 + 12.;\n    \n    vec4 z = vec4(uv * 2.0, sin(t), cos(t));\n    vec4 c = z;  // Store initial point for orbit trapping\n    \n    float orbit_trap = 1e10;\n    float min_radius = 1e10;\n    float last_radius = length(z);\n    \n    int escape_iter = MAX_ITER;\n    \n    for(int iter = 0; iter < MAX_ITER; iter++) {\n        vec4 z_alpha = quatExp(quatMul(alpha, quatLog(z)));\n        vec4 logz_beta = quatExp(quatMul(beta, quatLog(quatLog(abs(z) + 1.0))));\n        vec4 exp_term = quatExp(vec4(0.0, t * logz_beta.y, t * logz_beta.z, t * logz_beta.w));\n        z = quatMul(z_alpha, exp_term);\n        \n        float r = length(z);\n        \n        orbit_trap = min(orbit_trap, length(z - c));\n        min_radius = min(min_radius, r);\n        \n        if(r > ESCAPE_RADIUS) {\n            escape_iter = iter;\n            break;\n        }\n        \n        if(abs(r - last_radius) < MIN_RADIUS) {\n            break;\n        }\n        \n        last_radius = r;\n    }\n    \n    float escape_factor = float(escape_iter) / float(MAX_ITER);\n    float orbit_factor = sigmoid(1.0 - orbit_trap);\n    float radius_factor = sigmoid(1.0 / min_radius - 1.0);\n    \n    float combined_factor = \n        0.4 * escape_factor + \n        0.3 * orbit_factor + \n        0.3 * radius_factor;\n    \n    // Dynamic range compression with increased contrast\n    combined_factor = pow(combined_factor, 0.4);\n    \n    // Create a more vibrant base color using HSV\n    float hue = fract(combined_factor * 3.0 + iTime * 0.1);\n    float saturation = 0.7 + 0.3 * sin(combined_factor * 6.28318 + iTime);\n    float value = 0.8 + 0.2 * cos(combined_factor * 9.42477 + iTime * 0.5);\n    vec3 hsv_color = vec3(hue, saturation, value);\n    vec3 rgb_color = hsv2rgb(hsv_color);\n    \n    // Add color variations based on position and time\n    rgb_color += 0.1 * sin(uv.xyx * 10.0 + iTime);\n    rgb_color += 0.05 * cos(uv.yxy * 15.0 - iTime * 0.5);\n    \n    // Apply a subtle color shift based on the orbit trap\n    rgb_color = mix(rgb_color, rgb_color.gbr, orbit_factor * 0.3);\n    \n    // Final color adjustments\n    rgb_color = clamp(rgb_color, 0.0, 1.0);\n    rgb_color = pow(rgb_color, vec3(0.8)); // Gamma correction\n    \n    // Add a subtle glow effect\n    float glow = exp(-orbit_trap * 2.0) * 0.5;\n    rgb_color += vec3(1.0, 0.8, 0.6) * glow;\n    \n    fragColor = vec4(rgb_color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}