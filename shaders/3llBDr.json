{
    "Shader": {
        "info": {
            "date": "1596484050",
            "description": "Created a team logo for my team at work in neon wave style. Thougnt it turned out ok so sharing it.",
            "flags": 64,
            "hasliked": 0,
            "id": "3llBDr",
            "likes": 6,
            "name": "Pulse team logo in neonwave",
            "published": 3,
            "tags": [
                "2d",
                "neon"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 530
        },
        "renderpass": [
            {
                "code": "// License CC0: Pulse team logo in neonwave\n//  Created a team logo for my team at work in neon wave style. Thougnt it turned out ok so sharing it.\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define RESOLUTION  iResolution\n#define TIME        iTime\n\n#define SCA(a) vec2(sin(a), cos(a))\n\nconst vec2 sca0 = SCA(0.0);\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat emin(float a, float b, float k) {\n  float res = exp2( -k*a ) + exp2( -k*b );\n  return -log2( res )/k;\n}\n    \nfloat emax(float a, float b, float k) {\n  return -emin(-a, -b, k);\n}\n\nfloat planex(vec2 p, float w) {\n  return abs(p.y) - w;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat horseshoe(vec2 p, vec2 c, float r, vec2 w) {\n  p.x = abs(p.x);\n  float l = length(p);\n  p = mat2(-c.x, c.y, c.y, c.x)*p;\n  p = vec2((p.y>0.0)?p.x:l*sign(-c.x),(p.x>0.0)?p.y:l);\n  p = vec2(p.x,abs(p.y-r))-w;\n  return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\nfloat letterp(vec2 p) {\n  float b = box(p - vec2(-0.45, -0.25), vec2(0.1, 0.75));\n  float c = max(circle(p, 0.5), -circle(p, 0.3));\n  return min(b, c);\n}\n\nfloat letteru(vec2 p) {\n  return horseshoe(p - vec2(0.0, 0.125), sca0, 0.5, vec2(0.375, 0.1));\n}\n\nfloat letterl(vec2 p) {\n  return box(p, vec2(0.125, 0.75));\n}\n\nfloat letters(vec2 p) {\n  rot(p, -PI/6.0);\n  rot(p, -PI/2.0);\n  float u = horseshoe(p - vec2(-0.25*3.0/4.0, -0.125/2.0), sca0, 0.375, vec2(0.2, 0.1)) - 0.0;\n  rot(p, PI);\n  float l = horseshoe(p - vec2(-0.25*3.0/4.0, -0.125/2.0), sca0, 0.375, vec2(0.2, 0.1));\n  return min(u,l);\n}\n\nfloat lettere(vec2 p) {\n  return min(box(p, vec2(0.4, 0.1)), max(circle(p, 0.5), -circle(p, 0.3)));\n}\n\nfloat pulse(vec2 p) {\n  p.x += 1.95;\n  const float op = +0.10;\n  const float ou = +1.25;\n  const float ol = +2.10;\n  const float os = +2.80;\n  const float oe = +3.85;\n  float dp = letterp(p - vec2(op, 0.0));\n  float du = letteru(p - vec2(ou, 0.0));\n  float dl = letterl(p - vec2(ol, 0.0));\n  float ds = letters(p - vec2(os, 0.0));\n  float de = lettere(p - vec2(oe, 0.0));\n  float oo = 0.1;\n  float dx = abs(p.y) - oo;\n  dx = abs(dx) - oo*0.5;\n  float d = 1000000.0;\n  d = min(d, dp);\n  d = min(d, du);\n  d = min(d, dl);\n  d = min(d, ds);\n  d = min(d, de);\n  d = max(d, -dx);\n  return d;\n}\n\nfloat sun(vec2 p) {\n  const float ch = 0.0125;\n  vec2 sp = p;\n  vec2 cp = p;\n  mod1(cp.y, ch*6.0);\n  float d0 = circle(sp, 0.5);\n  float d1 = planex(cp, ch);\n  float d2 = p.y+ch*3.0;\n  float d = d0;\n  d = pmax(d, -max(d1, d2), ch*2.0);\n  return d;\n}\n\nfloat df(vec2 p) {\n  const vec2 off = vec2(0.0, -10.0+0.5);\n  const vec2 coff = vec2(0);\n  const float si = 5.0;\n  const float sc = 25.0;\n  float di = pulse((p - off)/si)*si;\n  float ds = sun(p/sc)*sc;\n  float d = ds;\n  d = emax(d, -(di - 0.5), 2.0+sin(0.5*TIME+p.x));\n  d = min(d, di);\n  return d;\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col = clamp(col,0.0,1.0);\n  col=col*0.6+0.4*col*col*(3.0-2.0*col);\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 sound(vec2 q, vec3 baseCol) {\n  // the sound texture is 512x2\n  int tx = int(q.x*512.0);\n  int ty = int(q.y*512.0);\n    \n  // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n  const int dfft = 7;\n  float fft  = 0.0; \n  for (int i = -dfft; i <= dfft; ++i) {\n    fft += sqrt(texelFetch(iChannel0, ivec2(ty+i,0), 0).x); \n  }\n  fft /= float(dfft)*2.0 + 1.0;\n\n  // second row is the sound wave, one texel is one mono sample\n  float wave = 0.0;\n  const int dwave = 5;\n  for (int i = -dwave; i <= dwave; ++i) {\n    wave += texelFetch(iChannel0, ivec2(tx+i,1), 0).x; \n  }\n  wave /= float(dwave)*2.0 + 1.0;\n\t\n  vec3 col = vec3(0.0);\n    \n  float xamp = sqrt(1.0-2.0*abs(q.x - 0.5));\n  col += 1.0*mix(vec3(0.0), baseCol, fft*fft);\n  float xoff = abs(0.125*(xamp*wave - 0.5) + 0.185 - q.y);\n  col += 1.25*xamp*vec3(1.0, 0.9, 1.0)*exp(-30.0*xoff);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  float dc = min(abs(p.x), abs(p.y));\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float aa = 2.0/RESOLUTION.y;\n\n  vec3 sunCol = mix(vec3(1.0, 1.0, 0.0), vec3(1.0, 0.0, 1.0), clamp((0.85 - p.y)*0.75, 0.0, 1.0));\n  vec3 glareCol = sqrt(sunCol);\n  float ss = smoothstep(-1.05, 0.0, p.y);\n  vec3 glow = mix(vec3(1.0, 0.7, 0.6).zyx, glareCol, ss);\n \n  float s = 15.0;\n  float d = df(p*s)/s;\n  float db = abs(d) - 0.0025;\n \n  vec3 col = vec3(1.0, 0.0, 1.0)*0.125;\n  vec3 corona = 0.65*glow*exp(-2.5*d)*ss;\n  col += sound(q, corona);\n  col += corona;\n  col = mix(col, sunCol*ss, smoothstep(-aa, aa, -d));\n  col = mix(col, glow*1.55, smoothstep(-aa, aa, -db));\n//  col = mix(col, vec3(1.0), smoothstep(-aa, aa, -dc));\n  \n  col += 1.0-smoothstep(0.0, 2.0, TIME);\n  col = postProcess(col, q);\n\n    \n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23688,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/futurejoust/sunset-drive"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}