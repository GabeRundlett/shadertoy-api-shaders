{
    "Shader": {
        "info": {
            "date": "1598253651",
            "description": "4Tap Kawase Blur Test",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2fRz",
            "likes": 3,
            "name": "TS Kawase Blur",
            "published": 3,
            "tags": [
                "blurkawase"
            ],
            "usePreview": 0,
            "username": "tigershan1130",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "const float BlurRadius =1.0;\n\nvec3 getTexture(vec2 uv){\n\treturn texture(iChannel0, uv).rgb;\n}\n\nvec3 KawaseBlur(vec2 uv, vec2 texelSize, vec2 scaleFactor)\n{\n    vec3 res = vec3(0,0,0);\n    vec2 invScaleFactor = vec2(1.0 / scaleFactor.x, 1.0 / scaleFactor.y);\n     vec2 pixelOffset = 1.0 / (scaleFactor) * BlurRadius;\n    \n    \n    vec2 downScaleUV = floor(uv * scaleFactor) * invScaleFactor;\n    \n    \n    //return getTexture(downScaleUV);\n    \n   \n    /*\n    vec2 uv00 = downScaleUV + vec2(pixelOffset + 0.5, pixelOffset + 0.5) * texelSize;\n    vec2 uv01 = downScaleUV + vec2(-pixelOffset - 0.5, pixelOffset + 0.5) * texelSize;\n    vec2 uv10 = downScaleUV + vec2(-pixelOffset + 0.5, -pixelOffset - 0.5) * texelSize;\n    vec2 uv11 = downScaleUV + vec2(pixelOffset - 0.5, -pixelOffset - 0.5) * texelSize;\n    \n    res += getTexture(uv00);\n    res += getTexture(uv01);\n    res += getTexture(uv10);\n    res += getTexture(uv11);\n    \n    \n    return res * 0.25;\n*/\n    \n    \n    vec2 uv00 = downScaleUV + vec2(pixelOffset.x + 0.5 *invScaleFactor.x , pixelOffset.y + 0.5*invScaleFactor.y) * texelSize;\n    vec2 uv01 = downScaleUV + vec2(-pixelOffset.x - 0.5*invScaleFactor.x, pixelOffset.y + 0.5*invScaleFactor.y) * texelSize;\n    vec2 uv10 = downScaleUV + vec2(-pixelOffset.x + 0.5*invScaleFactor.x, -pixelOffset.y - 0.5*invScaleFactor.y) * texelSize;\n    vec2 uv11 = downScaleUV + vec2(pixelOffset.x - 0.5*invScaleFactor.x, -pixelOffset.y - 0.5*invScaleFactor.y) * texelSize;\n    \n    res += getTexture(uv00);\n    res += getTexture(uv01);\n    res += getTexture(uv10);\n    res += getTexture(uv11);\n    \n    \n    return res * 0.25;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    vec2 scaleFactor = vec2(1.0, 1.0);\n    \n    // pixel offset is the blur radius\n    // pixel offset =  1 / (RTDownScaling + BlurRadius);\n    \n    vec2 texelSize = vec2(1.0, 1.0);\n    vec2 uv = fragCoord/ iResolution.xy;\n    \n    // hack for iteration count,we should just sample smaller texture\n    vec3 col = KawaseBlur(uv, texelSize, iResolution.xy /scaleFactor);\n    col += KawaseBlur(uv, texelSize, iResolution.xy /(scaleFactor* 2.0));\n    col += KawaseBlur(uv, texelSize, iResolution.xy /(scaleFactor* 3.0));\n    col += KawaseBlur(uv, texelSize, iResolution.xy /(scaleFactor* 4.0));\n    // Output to screen\n    fragColor = vec4(col * 0.25,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}