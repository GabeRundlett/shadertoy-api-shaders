{
    "Shader": {
        "info": {
            "date": "1629527522",
            "description": "easeOutElastic is a new favorite. ",
            "flags": 0,
            "hasliked": 0,
            "id": "sstGRM",
            "likes": 24,
            "name": "2 x Gyroid ",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "gyroid",
                "rubiks"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define on(a,x) (abs(a)-(x))\n#define pi 3.1415926535\n#define pmod(p,x) (mod(p,x)*0.5*(x))\n#define STEPS 128.0\n#define MDIST 150.0\nvec3 glow;\nfloat gyr(vec3 p){\n    return dot(sin(p),cos(p.yzx));\n}\nfloat rand(float a){\n    return fract(sin(a*4131.22)*94935.34);\n}\n\n//iq stuff\nfloat smin(float d1, float d2, float k){\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n}\nfloat box(vec3 p, vec3 b){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat frame( vec3 p, vec3 b, float e ){\n  p = abs(p)-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n//end iq stuff\n\nvec3 rubik(vec3 p, float t, float id){\n    float rt = floor(rand(id)*3.0);\n    float s = sign(rand(id*100.0)-0.5);\n    float s2 = sign(rand(id*200.0)-0.5);\n    if(rt == 0.0){\n    p.xy*=rot(s*step(s2*p.z,0.0)*t*pi/2.0);\n    }\n    if(rt == 1.0){\n    p.yz*=rot(s*step(s2*p.x,0.0)*t*pi/2.0);\n    }\n    if(rt == 2.0){\n    p.zx*=rot(s*step(s2*p.y,0.0)*t*pi/2.0);\n    }\n    return p;\n}\n\nfloat easeOutElastic(float x) {\n    float c4 = (2. * pi) / 3.;\n    return x = pow(1.5,-10.*x) * sin((x*5.5-.75)*c4)+1.;\n}\n\nvec2 map(vec3 p){\n    vec3 po = p;\n    float tt = iTime*pi/3.0;\n    float t = easeOutElastic(fract(tt))+floor(tt);\n    \n    p.xy*=rot(t*0.6);\n    p.yz*=rot(t*0.6);\n    p.zx*=rot(t*0.6);\n    p.y+=t*2.0;\n    \n    vec2 a = vec2(1.0);\n    a.x = on(on(gyr(p*2.0)/2.0,0.1),0.3+(sin(t)*0.5+0.5)*0.2);\n    \n    p = po;\n    p = rubik(p,t,floor(tt));\n\n    p = abs(p)-3.1-abs(asin(sin(t*pi*0.25)))*2.;\n    float clipBox = box(p,vec3(3));\n    \n    a.x = smin(-clipBox,a.x,0.3);\n    glow+=mix(vec3(0.639,0.180,0.318),vec3(0.412,0.180,0.639),sin(length(p)*3.0)*0.5+0.5)\n    *1./(1.+a.x*a.x);\n    \n    float fr = frame(p,vec3(3.1),0.2);\n\n    vec2 b = vec2(fr,2);\n    a.x = -a.x;\n    \n    a=(a.x<b.x)?a:b;\n    \n    //anti artifact fuckery\n    p = po;\n    p = abs(p)-3.1;\n    float domBox = box(p-2.2,vec3(6.0));\n    float outBox = box(po,vec3(8.25));\n    domBox = max(outBox,-domBox);\n    a.x = min(domBox,a.x);\n    \n    return a;  \n}\nvec3 norm(vec3 p){\n    vec2 e= vec2(0.05,0);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,11,20);\n    ro.xz*=rot(iTime*pi/6.0);\n    \n    vec3 lk = vec3(0,-2,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = f*0.65+uv.x*r+uv.y*cross(f,r);\n    \n    vec3 p = ro;\n    float shad, dO;\n    vec2 d;\n    bool hit = false;\n    \n    for(float i = 0.; i <STEPS; i++){\n        d = map(p);\n        if(abs(d.x)<0.001){ \n            hit = true; \n            shad = i/STEPS;\n            break;\n        }\n        if(d.x>MDIST) {dO = MDIST;break;}\n        dO+=d.x*0.8;\n        p =ro+rd*dO;\n    }\n    if(hit){\n        vec3 n = norm(p);\n        //vec3 r = reflect(rd, n);\n        float ao = smoothstep(-.1,.1,map(p+n*.1).x)*smoothstep(-.2,.2,map(p+n*.2).x);\n        //ao*=ao;\n        \n        col = 1.0-(n*0.5+0.5);\n        if(d.y == 2.0) col *=0.2;\n        //col*=pow(1.0-shad,3.0);\n        \n        //fabe ibl from blackle\n        float diff = length(sin(n*3.0)*.4+.6)/sqrt(3.);\n        col=col*diff*vec3(0.996,0.784,0.784);\n        col*=ao;\n    }\n    col = mix(col,vec3(0.145,0.067,0.435),(dO/(MDIST)));\n        col = pow(col,vec3(0.7));\n\n    col*=(1.0-length(uv*uv));\n    col+=glow*0.02;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}