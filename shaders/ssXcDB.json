{
    "Shader": {
        "info": {
            "date": "1642618481",
            "description": "red particles automatically follow the green particles with even spacing.\nCan be use to evenly resample a point distribution.",
            "flags": 32,
            "hasliked": 0,
            "id": "ssXcDB",
            "likes": 1,
            "name": "attraction - repulsion 2b",
            "published": 3,
            "tags": [
                "bluenoise",
                "resampling"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/7dXcDB\n// version2 of https://shadertoy.com/view/7sXyWS\n\n// === draw particles ===============================\n#define l2(v) dot(v,v)\n\nvoid mainImage( out vec4 O, vec2 u )\n{   \n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    O-=O;\n    \n    float d = 1e9; \n    for( float y=0.; y < 8.; y++ )               // draw red points\n        for( float x = N-N0; x < N; x++ )\n            d = min(d, l2( U  -T(x,y).xy ) );\n    O.r = smoothstep(3., 0., sqrt(d)*R.y -6.);          \n       \n    d = 1e9;        \n    for( float y=9.; y < 16.; y++ )              // draw green points\n        for( float x = 0.; x < N; x++ )\n            d = min(d, l2( U  -T(x,y).xy ) );\n    O.g = smoothstep(3., 0., sqrt(d)*R.y );          \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === manage particles ===============================\n// [0..N[ x [0..7 ] = red particles  \n// [0..N[ x [8..15] = green particles\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( u.x>N ) return; \n    \n    if (iFrame < 1) {                                  // --- init positions\n        vec2 r = H(u);\n        O.xy = u.y<8. ? 2.*r-1.                                    // rouges: Uniform\n                      : (vec2(1,.5)+.5*(r.y-.5)) * cos( 6.28*r.x + vec2(0,11) ); // verts : ellipse\n        return;\n    }\n    O = T(u.x,u.y);                                    // previous state\n    \n    if (u.y>8.) {\n#if 1                                                  // animation\n        vec2 r = H(u);\n#  if 1                      // deformed ring\n        O.xy = (.75+.25*cos(iTime+vec2(0,11))+.5*(r.y-.5)) * cos( 6.28*r.x + vec2(0,11) ); // verts : ellipse\n#  else                      // 2 components\n        O.xy = .5*sqrt(r.y) * cos( 6.28*r.x + vec2(0,11) ); // verts : ellipse\n        O.x += cos(.5*iTime)*( u.y>12. ? 1. : -1. );\n#  endif\n#endif\n        return;\n    }\n    \n    vec2 V = vec2(0);                                  // --- optimize reds\n    for( float y=0.; y < 8.; y++ )\n        for( float x = 0.; x < N; x++ ) {\n            if ( vec2(x,y) != u-.5 && x >= N-N0 )      // Freud forbid to attract or repulse yourself\n                V -= N/N0* normalize( T(x,y).xy - O.xy );    // repulsed by reds\n            V += normalize( T(x,y+8.).xy - O.xy );     // attracted by greens\n        }\n    O.xy += V/(16.*N);                                 // new position\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float N = 128.,  // number of target green points\n     N0 = 16.;   // number of red points ( <= N )\n#define H(p)     fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)-0.*fract(iDate.w)) *43758.5453123)\n#define T(x,y)   texelFetch( iChannel0, ivec2(x,y), 0)\n\n\n\n\n//#define normalize(v) normalize(v+1e-5) \n//#define normalize(v) sign(v)\n//#define normalize(v) ( length(v) < 1e-5 ? vec2(0) : (v)/length(v) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}