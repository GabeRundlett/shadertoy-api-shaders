{
    "Shader": {
        "info": {
            "date": "1609447656",
            "description": "Hello demoscene, I did a drawing\nWould you like to put it on the fridge?\n\nHogmanay Party 2020(/2021)\n\nUses shapes from https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm\nUses Perlin noise from https://www.shadertoy.com/view/4lB3zz",
            "flags": 0,
            "hasliked": 0,
            "id": "3ldczS",
            "likes": 16,
            "name": "By Molive, Aged 18",
            "published": 3,
            "tags": [
                "2d",
                "drawing"
            ],
            "usePreview": 0,
            "username": "Molive",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "#define offset floor((iTime+4.0)*10.0)*2.2\n#define pi acos(-1.)\n\nfloat sdCircle( vec2 p, float r, float r2 )\n{\n    return abs(length(p) - r) -r2;\n}\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - 0.04;\n}\n\nfloat child(vec2 p) {\nreturn min(min(min(min(min(\nsdSegment(p,vec2(0.25,0.075),vec2(0.35,0.28)),\nsdSegment(p,vec2(0.45,0.075),vec2(0.35,0.25))),\nsdSegment(p,vec2(0.34,0.4),vec2(0.35,0.25))),\nsdSegment(p,vec2(0.34,0.4),vec2(0.45,0.3))),\nsdSegment(p,vec2(0.34,0.4),vec2(0.25,0.3))),\nsdCircle(p-vec2(0.35,0.48),0.06,0.03));\n}\n\nfloat parent(vec2 p) {\nreturn min(min(min(min(min(\nsdSegment(p,vec2(0.65,0.1),vec2(0.76,0.4)),\nsdSegment(p,vec2(0.85,0.12),vec2(0.76,0.41))),\nsdSegment(p,vec2(0.75,0.6),vec2(0.76,0.43))),\nsdSegment(p,vec2(0.75,0.6),vec2(0.9,0.52))),\nsdSegment(p,vec2(0.75,0.6),vec2(0.6,0.56))),\nsdCircle(p-vec2(0.73),0.08,0.035));\n}\n\nfloat sun(vec2 p) {\nreturn min(min(min(\nsdSegment(p,vec2(0.35,0.45),vec2(0.5,0.43)),\nsdSegment(p,vec2(0.25,0.34),vec2(0.45,0.25))),\nsdSegment(p,vec2(0.13,0.23),vec2(0.2,0.1))),\nsdCircle(p-vec2(0.1,0.5),0.08,0.08));\n}\n\nfloat grass(vec2 p) {\nreturn sdSegment(p+(vec2(0.0,sin(p.x*60.0)+sin(p.x*23.0)*0.1+fract((p.x+1.0)*10.0/pi))*0.05),vec2(0.0,0.2),vec2(2.0,0.2))-0.04;\n}\n\nfloat house(vec2 p) {\nreturn min(min(min(min(min(min(min(min(\nsdSegment(p,vec2(0.02,0.0),vec2(0.0,0.58)),\nsdSegment(p,vec2(0.0,0.58),vec2(0.5,0.6))),\nsdSegment(p,vec2(0.5,0.6),vec2(0.48,0.05))),\nsdSegment(p,vec2(0.0,0.58),vec2(0.24,0.8))),\nsdSegment(p,vec2(0.24,0.8),vec2(0.5,0.6))),\nsdSegment(p,vec2(0.15,0.0),vec2(0.18,0.28))),\nsdSegment(p,vec2(0.18,0.28),vec2(0.3,0.3))),\nsdSegment(p,vec2(0.3),vec2(0.32,0.05))),\nsdSegment(p,vec2(0.0),vec2(0.52,0.05)));\n}\n\nvec2 distort (vec2 p) {\nreturn p+(vec2(sin(p.x*104.0+offset)+cos(p.y*113.0+offset))*0.0015);\n}\n\nfloat noise (vec2 p) {\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat smoothNoise(vec2 p)\n{\n    return noise(p)/4.0+(noise(p+vec2(1.0,0.0))+noise(p-vec2(1.0,0.0))+noise(p+vec2(0.0,1.0))+noise(p-vec2(0.0,1.0)))/8.0+(noise(p+vec2(1.0,1.0))+noise(p+vec2(1.0,-1.0))+noise(p-vec2(1.0,-1.0))+noise(p-vec2(1.0,1.0)))/16.0;\n}\n\nfloat COSInterpolation(float x,float y,float n)\n{\n    float r = n*pi;\n    float f = (1.0-cos(r))*0.5;\n    return x*(1.0-f)+y*f;\n    \n}\n\nfloat InterpolationNoise(vec2 p)\n{\n    vec2 fracp = fract(p);    \n    vec2 florp = floor(p);\n    \n    float v1 = smoothNoise(florp);\n    float v2 = smoothNoise(florp+vec2(1.0,0.0));\n    float v3 = smoothNoise(florp+vec2(0.0,1.0));\n    float v4 = smoothNoise(florp+vec2(1.0,1.0));\n    \n   \tfloat i1 = COSInterpolation(v1,v2,fracp.x);\n    float i2 = COSInterpolation(v3,v4,fracp.x);\n    \n    return COSInterpolation(i1,i2,fracp.y);\n    \n}\n\nfloat PerlinNoise2D(vec2 p)\n{\n    float sum = 0.0;\n    float frequency =0.0;\n    float amplitude = 0.0;\n    for(int i=3;i<9;i++)\n    {\n        frequency = pow(2.0,float(i));\n        amplitude = pow(0.6,float(i));\n        sum = sum + InterpolationNoise(p*frequency)*amplitude;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\n    float grassv = min(min(min(\n    grass(distort(uv)+vec2(0.0,0.1)),\n    grass(distort(uv)+vec2(0.12,0.2))),\n    grass(distort(uv)+vec2(0.08))),\n    grass(distort(uv)+vec2(0.04)));\n    \n    float housev = house(distort(uv+vec2(0.03))-vec2(1.25,0.1));\n    \n    float childv = child(distort(uv-vec2(0.8,-0.06))+vec2(0.8,-0.06));\n    \n    float parent1 = parent(distort(uv-vec2(0.9,0.1))+vec2(0.9,0.1));\n    \n    float parent2 = parent(mat2(0.96,-0.1,0.1,0.96)*(distort(uv-vec2(0.22,-0.06))));\n    \n    float sunv = sun(distort(uv)+vec2(0.1,-0.5));\n    \n    fragColor = vec4(0.9,0.9,0.95,0.1)*PerlinNoise2D(uv+vec2(5.0))*2.0+0.5;\n    \n    fragColor = mix(fragColor,vec4(0.8,0.8,0.03,1.0),clamp(sunv*-80.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(1.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(17.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = mix(fragColor,vec4(0.6,0.3,0.1,1.0),clamp(housev*-80.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(2.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(19.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = mix(fragColor,vec4(0.1,0.7,0.6,1.0),clamp(childv*-80.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(3.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(21.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = mix(fragColor,vec4(0.9,0.45,0.6,1.0),clamp(parent1*-80.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(7.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(23.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = mix(fragColor,vec4(0.33,0.5,0.77,1.0),clamp(parent2*-80.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(11.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(29.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = mix(fragColor,vec4(0.2,0.7,0.0,1.0),clamp(grassv*-30.0+0.2,0.0,1.0)*PerlinNoise2D(distort(uv+vec2(13.0)+offset))*5.0*(smoothNoise(distort(uv+vec2(31.0)+mod(offset,100.0)))*0.2+0.6));\n    fragColor = log(fragColor+1.0)+0.15;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}