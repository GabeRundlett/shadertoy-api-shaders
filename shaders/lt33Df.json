{
    "Shader": {
        "info": {
            "date": "1472052685",
            "description": "An audio vizualiser. The height of the balls corresponds to the amplitude of the 5 sampled frequency bands.",
            "flags": 0,
            "hasliked": 0,
            "id": "lt33Df",
            "likes": 7,
            "name": "Rainbow Audio Visualiser",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 1,
            "username": "geoff",
            "viewed": 6760
        },
        "renderpass": [
            {
                "code": "//#define AO\n#define SHADOWS\n#define MAX_DIST 100.0\n\n//Based on iq's polynomial smooth-min - https://iquilezles.org/articles/smin\nvec2 vecSMin(vec2 a, vec2 b){\n    float k = 0.2;\n    float h = clamp(0.5 + 0.5 * (b.x - a.x) / k, 0.0, 1.0);\n    return vec2(mix(b.x, a.x, h) - k * h * (1.0 - h), a.y);\n}\n\nfloat closeObj = 0.0;\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\nfloat tSphere(vec3 p, float xoffset, float yoffset){\n    return length(p - vec3(xoffset, yoffset, 0.0)) - 0.5;\n}\n\nfloat sampleFreq(float freq){\n    return texture(iChannel0, vec2(freq, 0.0)).x;\n}\n\nvec2 mapMat(vec3 p){\n    vec2 lows = vec2(tSphere(p, -3.0, (sampleFreq(0.1)) * 5.0), 1.0);\n    vec2 lowmids = vec2(tSphere(p, -1.5, (sampleFreq(0.4)) * 5.0), 1.0);\n    vec2 mids = vec2(tSphere(p, 0.0, (sampleFreq(0.6)) * 5.0), 1.0);\n    vec2 highmids = vec2(tSphere(p, 1.5, (sampleFreq(0.8)) * 5.0), 1.0);\n    vec2 highs = vec2(tSphere(p, 3.0, (sampleFreq(1.0)) * 5.0), 1.0);\n    vec2 ground = vec2(p.y, 1.0);\n    return vecSMin(highs, vecSMin(highmids, vecSMin(mids, vecSMin(lowmids, vecSMin(lows, ground)))));\n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 1000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        t += d;\n        if(t > MAX_DIST){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 1.0, 0.0);\nvec3 lightPos = vec3(0.0, 1.0, -1.0);\n\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.4;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 1000; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 16.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 25; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(2.0 * occ, 0.0, 1.0);\n}\n\nfloat s = 1.0;\nfloat ao = 1.0;\n\nvec3 colour(vec3 p, float id){\n    \n    #ifdef SHADOWS\n    float s = shadow(p, normalize(lightPos - p));\n    #endif\n    \n    #ifdef AO\n    float ao = occlusion(p, normal(p));\n    #endif\n    \n    if(id == 1.0){\n        vec3 col = vec3(1.0);\n        if(abs(p.x + 3.0) < 0.6){\n            col = vec3(1.0, 0.0, 0.0);\n        }else if(abs(p.x + 1.5) < 0.6){\n            col = vec3(1.0, 0.5, 0.0);\n        }else if(abs(p.x) < 0.6){\n            col = vec3(1.0, 1.0, 0.0);\n        }else if(abs(p.x - 1.5) < 0.6){\n            col = vec3(0.0, 1.0, 0.0);\n        }else if(abs(p.x - 3.0) < 0.6){\n            col = vec3(0.0, 0.0, 1.0);\n        }else{\n            return col;\n        }\n    \treturn amb(col, 0.5) * ao + diff(col, 0.75, p) + floor(s) * spec(vec3(1.0), 0.8, p, 16.0) - vec3(0.4 - 0.4 * s);\n    }\n    return vec3(0.0, 1.0, 0.0);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0, 1.5, -3.0);\n    lightPos = vec3(0.0, 2.0, -3.0);\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n    \tcol = colour(c, closeObj);\n    }else{\n        col = vec3(1.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}