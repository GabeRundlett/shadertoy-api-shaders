{
    "Shader": {
        "info": {
            "date": "1692279088",
            "description": "ChatGPT made this, I have no idea how to code (yet)",
            "flags": 0,
            "hasliked": 0,
            "id": "clScDV",
            "likes": 2,
            "name": "Epic Fractal Odyssey",
            "published": 3,
            "tags": [
                "weird",
                "chatgpt"
            ],
            "usePreview": 0,
            "username": "KarmaDeezy",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "// Shadertoy 2023. \"Epic Fractal Odyssey\" by ChatGPT\n\n// Author: OpenAI\n\nuniform vec2 Mouse; // Mouse position in pixels (x, y)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n    p *= 3.5;\n\n    vec2 c = vec2(cos(iTime), sin(iTime)) * 0.3;\n    c *= 1.0 + 0.5 * sin(iTime * 0.5);\n\n    // Convert mouse position to fractal coordinates\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    mousePos = mix(vec2(-1.0, -1.0), vec2(1.0, 1.0), mousePos);\n    c += 0.6 * mousePos;\n\n    float zoom = 1.5 + 1.0 * sin(iTime * 0.3);\n    p /= zoom;\n\n    vec2 z = p;\n    float intensity = 0.0;\n\n    for (int i = 0; i < 400; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        intensity += length(z);\n\n        if (length(z) > 100.0)\n            break;\n    }\n\n    intensity = pow(intensity / 400.0, 0.6);\n\n    // Color variation based on distance from the center\n    vec3 baseColor = vec3(intensity * 0.7, 0.3 + intensity * 0.2, 0.4 + intensity * 0.6);\n    vec3 colorVariation = 0.5 + 0.5 * vec3(sin(iTime), cos(iTime * 0.7), sin(iTime * 1.3));\n    vec3 color = baseColor * colorVariation;\n\n    // Add subtle animated waves\n    float waves = 0.03 * sin(p.y * 10.0 + iTime);\n    color += vec3(waves);\n\n    // Apply vignette effect based on distance from the center\n    float vignette = 1.0 - 0.7 * length(p);\n    color *= vignette;\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}