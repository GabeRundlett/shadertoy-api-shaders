{
    "Shader": {
        "info": {
            "date": "1560711338",
            "description": "mainly made to experiment with coloring.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtB3zt",
            "likes": 10,
            "name": "Coast v.2 (improved lighting)",
            "published": 3,
            "tags": [
                "terrain",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "dagbrynildsentholander",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "float maxDist = 500.;\nvec3 camRot = vec3(0, 0, 0);\nvec3 lightDir = vec3(1,.5,.2);\nvec3 lightColor = vec3(1.2,.9,.5);\nvec3 ambientLight = vec3(0.3);\n\nfloat noise(vec2 p)\n{\n    return fract(sin(p.x*2.+p.y*2463.)*8732.);\n}\n\nfloat smoothNoise(vec2 p)\n{\n    vec2 id = floor(p*10.);\n    vec2 ld = fract(p*10.);\n    \n    ld = ld*ld*(3.-2.*ld);\n    \n    float bl = noise(id);\n    float br = noise(id+vec2(1., 0.));\n    float b = mix(bl, br, ld.x);\n    \n    float tl = noise(id+vec2(0., 1.));\n    float tr = noise(id+vec2(1., 1.));\n    float t = mix(tl, tr, ld.x);\n    \n    float bt = mix(b, t, ld.y);\n    \n    return abs(bt);\n}\n\nfloat ridged(float x)\n{\n    return abs(1.-abs(x));\n}\n\nvec2 map(vec3 p)\n{\n    float a = p.y/10.;\n    p += vec3(sin(a), 1, cos(a))*10.;\n    float height = 40.;\n    float base = 90.-length(p.xz)/5.;\n    base-=ridged(smoothNoise(p.xz/500.))*height;\n    base+=.5*ridged(smoothNoise(p.xz/250.))*height;\n    base-=.1*ridged(smoothNoise(p.xz/100.))*height;\n    base-=.01*ridged(smoothNoise(p.xz/40.))*height;\n    base+=.008*ridged(smoothNoise(p.xz/15.))*height;\n    return vec2(base-p.y, 0);\n}\n\nfloat plaIntersect( in vec3 ro, in vec3 rd)\n{\n    return -(dot(ro,vec3(0, 1., 0))-5.)/dot(rd,vec3(0, 1., 0));\n}\n\nvec3 ray(vec3 ro, vec3 rd, float minD, float maxD, float stepSize) // x channel - distance to hit, y channel - material\n{\n    float t = minD;\n    float ut = 0.;\n    float lastVal = 0.; \n    \n    while(t < maxD)\n    {\n        vec2 mapSample = map(ro+rd*t);\n        \n        if((ro+rd*t).y <= 5.)\n            ut = t-plaIntersect(ro, rd);\n\t\t\n        if(mapSample.x > 0.)\n            return vec3(t-(abs(mapSample.x)/(abs(mapSample.x)+abs(lastVal)))*stepSize, mapSample.y, ut);\n        t+=stepSize;\n        stepSize*=1.01;\n        lastVal = mapSample.x;\n    }\n    \n    return vec3(maxD, 0, maxD-plaIntersect(ro, rd));\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat delta = 0.01;\n    vec3 x = vec3 (delta, 0.00, 0.00);\n\tvec3 y = vec3 (0.00, delta, 0.00);\n\tvec3 z = vec3 (0.00, 0.00, delta);\n    \n    float val = map(p).x;\n    vec3 grad = vec3(val - map(p - x).x, val - map(p - y).x, val - map(p - z).x);\n    return -normalize(grad);\n}\n\n\nvec3 lighting(vec3 n)\n{\n    return  max(pow(dot(normalize(lightDir), n), 2.), 0.0) * lightColor +ambientLight;\n}\n\nvec3 doFog(vec3 rgb, float dist, float maxD, vec3 rd, vec3 p)\n{\n    lightDir = normalize(lightDir);\n    vec3 fogColor = vec3(.5, .5, .7);\n    fogColor += .5*vec3(.7, .1, 0)*pow(abs(1.-abs(rd.y)), 6.);\n    fogColor += .3*lightColor*pow(clamp(dot(rd, lightDir), 0., 1.), 3.);\n    if(dist == maxD)\n    {\n    \tfogColor += vec3(.5, .4, .5)*smoothNoise(vec2(p.x, p.z)/rd.y/3000.)*smoothNoise(vec2(p.x, p.z)/5./rd.y/3000.)*pow(abs(rd.y), .5);\n        fogColor += .4*lightColor*pow(clamp(dot(rd, lightDir), 0., 1.), 50.); \n    }\n    return mix(rgb, fogColor, pow(abs(dist/maxD), 1.));\n}\n\nvec3 terrainColor(vec3 p)\n{\n    vec3 n = normal(p);\n    float yAlpha = pow(abs(n.y), 6.);\n    float xAlpha = pow(abs(n.x), 6.);\n    float zAlpha = pow(abs(n.z), 6.);\n    vec3 terrainColor = vec3(0);\n    vec3 heightColor = vec3(1);\n    \n    heightColor = mix(vec3(3), vec3(1), clamp(abs(p.y-6.)/3., 0., 1.));\n    heightColor = mix(vec3(.7, .8, 0.), heightColor, clamp(abs(p.y-30.)/20., 0., 1.));\n    \n    terrainColor += texture(iChannel0, vec2(p.z, p.y)/15.).xyz*xAlpha*.5;\n    terrainColor += .3*texture(iChannel1, vec2(p.x, p.z)/10.).xyz*yAlpha*heightColor;\n    terrainColor += .2*texture(iChannel1, vec2(p.x, p.z)/3.).xyz*yAlpha*heightColor;\n    terrainColor += texture(iChannel0, vec2(p.x, p.y)/15.).xyz*zAlpha*.5;\n    terrainColor += vec3(smoothNoise((p.xz+p.y)/100.), .5, .5)/15.;\n    return terrainColor*lighting(n);\n}\n\nvec3 water(vec3 rgb, vec3 p, float ut, float dist, vec3 rd)\n{\n    vec3 surfacePoint = p-rd*ut;\n    float waterBump = smoothNoise(surfacePoint.xz/5.+iTime/10.)/20.;\n    vec3 waterNormal = normalize(vec3(waterBump, 1.-waterBump, waterBump));\n    vec3 reflectedRd = reflect(rd, waterNormal);\n    vec3 rayResult = ray(surfacePoint, reflectedRd, .5, maxDist, 1.);\n    vec3 reflection = doFog(terrainColor(surfacePoint+rayResult.x*reflectedRd), rayResult.x, maxDist, reflectedRd, p);\n    vec3 underwaterColor = rgb*mix(vec3(.6, 1.2, 1.5), vec3(.1, .1, .2), clamp(abs(p.y-5.)/10., 0., 1.));\n    vec3 result = mix(underwaterColor, reflection, 1.-abs(rd.y));\n    result += vec3(.6)*pow(clamp(p.y-3.8, 0., 1.), 10.)*texture(iChannel0, vec2(surfacePoint.xz+iTime/10.)/3.).x;\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord -  iResolution.xy*.5)/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float lastXInput = 0.;\n    float lastYInput = 0.;\n    float deltaXInput = iMouse.x-lastXInput;\n    float deltaYInput = iMouse.y-lastYInput;\n    \tcamRot+=vec3(deltaYInput/100., deltaXInput/100., 0);\n    \n    vec3 camP = vec3(cos(iTime/20.+68.)*350., 16., sin(iTime/20.+68.)*350.);\n    vec3 camDir = normalize(vec3(sin(camRot.y), sin(camRot.x), cos(camRot.y)));\n    vec3 camRight = cross(camDir, vec3(0, 1., 0));\n    vec3 rd = normalize(camDir + camRight*1.*uv.x + vec3(0,1.,0)*1.*uv.y);\n    vec3 rayResult = ray(camP, rd, .3, maxDist, 0.1);\n    vec3 p = camP+rd*rayResult.x;\n\tvec3 col = vec3(0);\n\t\n    if(p.y > 5.)\n    \tcol = doFog(terrainColor(p), rayResult.x, maxDist, rd, p);\n    else\n    \tcol = doFog(water(terrainColor(p), p, rayResult.z, rayResult.x, rd), rayResult.x-rayResult.z, maxDist, rd, p);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    lastXInput = iMouse.x;\n    lastYInput = iMouse.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}