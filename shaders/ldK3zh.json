{
    "Shader": {
        "info": {
            "date": "1457883749",
            "description": "A simple raymarching test.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldK3zh",
            "likes": 0,
            "name": "Testing Raymarching",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "maeln",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n#define ITER_DIST 64\n#define saturate(x) (clamp((x), 0.0, 1.0))\n\nvec2 interval(float d) {\n    return vec2(1.0-d, 1.0+d);\n}\n\nfloat hash2(vec2 n)\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec2 remap(vec2 t, vec2 a, vec2 b) { return clamp((t - a) / (b - a), 0.0, 1.0); }\n\n// RGB ramp stolen from Ferris\nvec3 aberrationColor(float f)\n{\n\tf = f * 3.0 - 1.5;\n\treturn saturate(vec3(-f, 1.0 - abs(f), f));\n}\n\n\nvec2 scale(vec2 uv, float ratio) {\n    return  0.5 + (uv-0.5) * ratio;\n}\n\nvec4 getcolor(vec2 uv, float ratio) {\n    vec2 nuv = scale(uv, ratio);\n    if(nuv.x > 1.0f || nuv.x < 0.0f || nuv.y > 1.0f || nuv.y < 0.0f)\n        return vec4(0.0);\n    else\n        return texture(iChannel0, nuv);\n}\n\nvec2 distort(vec2 uv, float f, float min_d, float max_d) { return scale(uv, mix(min_d, max_d, f)); }\n\nvec3 frame(vec2 uv) { return texture(iChannel0, uv).rgb; }\n\n\n// Quite literally stolen from Elysian by Logicoma\nvec3 elysian_aberation(vec2 uv, float amount) {\n    vec3 color = vec3(0.0);\n    const int taps = 100;\n    \n    for(int i = 0; i < taps; i++) {\n        float f = float(i) / float(taps - 1);\n        vec2 nv = uv * 2.0 - 1.0;\n        float d = length(nv);\n        vec2 scaled = nv / d * (d * (1.0 - f * amount * 0.1));\n        scaled  = mix(nv, scaled, d / length(vec2(1.0)));\n        vec2 nuv = scaled * 0.5 + 0.5;\n        vec3 tap = texture(iChannel0, nuv).rgb;\n        color += tap * aberrationColor(f);\n    }\n    \n    color /= float(taps) / 3.0;\n    return color;\n}\n\nvec2 remapuv(vec2 uv, float amount) {\n    float f = 0.9;\n    vec2 nv = uv * 2.0 - 1.0;\n    float d = length(nv);\n    vec2 scaled = nv / d * (d * (1.0 - f * amount * 0.1));\n    scaled  = mix(nv, scaled, d / length(vec2(1.0)));\n    vec2 nuv = scaled * 0.5 + 0.5;\n    return nuv;\n}\n\nvec3 standard_excess_like_aberation(vec2 uv, vec2 scd) {\n    const float step_size = 1.0 / (float(ITER_DIST) - 1.0);\n    float t = step_size * hash2(uv + sin(iTime)); // We pseudo randomize the step to have some dithering pattern.\n\n    vec3 sum_color = vec3(0.0);\n    vec3 sum_weight = vec3(0.0);\n    for (int i = 0; i < ITER_DIST; ++i) {\n\t    vec3 weight = aberrationColor(t);\n        sum_weight += weight;\n        sum_color += weight * frame(distort(uv, t, scd.x, scd.y));\n        t += step_size;\n    }\n\n    sum_color /= sum_weight;\n    return sum_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 scd = interval(iMouse.y/iResolution.y/2.0);\n    \n    \n    //vec3 sum_color = standard_excess_like_aberation(uv, scd);\n    vec3 sum_color = elysian_aberation(uv, 0.75);\n\t\n    \n    // sum_color = texture(iChannel0, remapuv(uv, 6.0)).rgb;\n    \n   \t// Very bad film grain\n    // sum_color += ((0.5 - hash2(uv * cos(iTime))) / 20.0);\n    \n    // Gamma correction\n    sum_color = pow(sum_color, vec3(2.2));\n    \t\n   \t//fragColor = vec4(sum_color, 1.0);\n    // fragColor = vec4(vec3(hash2(uv + sin(iTime))), 1.0);\n    // fragColor = vec4(vec3(length(texture(iChannel1, uv+iTime))/4.0), 1.0);\n    fragColor = pow(texture(iChannel0, uv), vec4(2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAXSTEPS 128\n#define MINDIST  0.0005\n#define MAXDIST  20.0\n#define saturate(x) (clamp(0.0, 1.0, x))\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = 0.5;\n    //\n    // Loop of octaves\n    for (int i = 0; i < 5; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\n// Primitive fun from Iq: \n// https://iquilezles.org/articles/distfunctions\n\nstruct pLight {\n    vec3 position;\n    vec3 ambiant;\n    vec3 diffuse;\n    vec3 specular;\n};\n\nvec3 ffts() {   \n    float fftGrave = texelFetch( iChannel0, ivec2(0,0), 0 ).x; \n    float fftMiddle = texelFetch( iChannel0, ivec2(256,0), 0 ).x; \n    float fftAigue = texelFetch( iChannel0, ivec2(511,0), 0 ).x; \n    return vec3(fftGrave, fftMiddle, fftAigue);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    return length(max(abs(p)-b,0.0));\n}\n\n\nfloat sdPlane(vec3 p)\n{\n  return p.y;\n}\n\nfloat sphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\t\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 cubes(vec3 p)\n{\n    p.z = min(p.z, 0.0);\n   \tvec3 c = vec3(1.0, 0.0, 1.0);\n    vec3 q = mod(p,c)-0.5*c;\n    float y = 0.25+0.25*(ffts().x*2.0);\n    float prism = sdHexPrism(q-vec3(0.0, y, 0.0), vec2(0.25,0.1));\n    float cube = sdBox(q-vec3(0.0, y, 0.0), vec3(0.25));\n    return vec2(mix(cube, prism, (sin(iTime)+1.0)/2.0), 2.0);\n}\n\nvec2 spheres(vec3 p)\n{\n    p.z = max(p.z, 0.0);\n   \tvec3 c = vec3(4.0, 0.0, 4.0);\n    vec3 q = mod(p,c)-0.5*c;\n    \n    float s1 = sphere(q-vec3(0,0.5,1.5*ffts().z), 0.5);\n    float s2 = sphere(q-vec3(0,ffts().y,1.0), 0.5);\n    vec2 u1 = vec2(smin(s1,s2,0.3), 1.0);\n    \n    return u1;\n}\n\nvec2 centralSphere(vec3 p) {\n    float centralSphere = sphere(p - vec3(1.0, 1.0+sin(iTime)*sin(iTime*2.0), cos(cos(cos(iTime)*0.3)*2.0)), 0.5);\n    \n    return vec2(centralSphere, 2.0);\n}\n\nvec2 scene(vec3 ray)\n{\n    vec2 plane = vec2(sdPlane(ray), 0);\n    vec2 b1 = cubes(ray);\n    vec2 u1 = spheres(ray);\n    vec2 c = centralSphere(ray);\n    return opU(c, opU(plane, opU(b1, u1)));\n}\n\nvec2 DE(vec3 ray) {\n    return scene(ray);\n}\n\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.0, MINDIST);\n\treturn normalize(vec3(\n    DE(pos + eps.yxx).x - DE(pos - eps.yxx).x,\n    DE(pos + eps.xyx).x - DE(pos - eps.xyx).x,\n    DE(pos + eps.xxy).x - DE(pos - eps.xxy).x));\n}\n\nvec2 raymarch(vec3 from, vec3 direction)\n{\n    float t = 1.0*MINDIST;\n    int i = 0;\n    float obj = -1.0;\n    for(int steps=0; steps<MAXSTEPS; ++steps)\n    {\n        ++i;\n        vec2 dist = DE(from + t * direction);\n        if(dist.x < MINDIST || t >= MAXDIST) break;\n        t += dist.x;\n        obj = dist.y;\n    }\n    \n    return vec2(t, t > MAXDIST ? -1.0 : obj);\n}\n\nfloat grid(vec2 p, float factor)\n{\n\tfloat N = factor; // grid ratio\n\tvec2 w = fwidth(p)+MINDIST;\n\tvec2 a = p + 0.5*w;                        \n\tvec2 b = p - 0.5*w;           \n\tvec2 i = (floor(a)+min(fract(a)*N,1.0) - floor(b)-min(fract(b)*N,1.0))/(N*w);\n\treturn (1.0-i.x)*(1.0-i.y);\n}\n\nvec3 fog(vec3 sky, vec3 mat, float dist) {\n    float fogAmount = 1.0 - min(exp(-dist*0.15), 1.0);\n    return mix(mat, sky, fogAmount);\n}\n\nvec3 material(vec2 c, vec3 hit, vec3 sky) {\n    vec3 color = sky;\n    if(c.y < 0.0) return color;\n    if(c.y < 1.0) {\n    \tcolor = vec3(grid(hit.xz*4.0, 12.0));\n    } else if(c.y < 2.0) {\n        // phong(hit, eye, norm, l1, 2.0);\n     \tcolor = vec3(0,1,0);\n    } else if(c.y >= 2.0 && c.y < 3.0) {\n        // phong(hit, eye, norm, l1, 2.0);\n    \tcolor = vec3(0.3,0.2,1);\n    } else {\n        // phong(hit, eye, norm, l1, 2.0);\n    \tcolor = vec3(c.x);\n    }\n    return fog(sky, color, c.x);\n}\n\nvec3 phong(vec3 hit, vec3 eye, vec3 N, pLight light, float ks) {\n    vec3 L = normalize(light.position - hit);\n    vec3 V = normalize(eye - hit);\n    vec3 R = reflect(L, N);\n    vec3 ambiant = light.ambiant;\n    vec3 diffuse = max(dot(L,N), 0.0)*light.diffuse;\n    vec3 specular = pow(max(dot(R,V), 0.0), ks)*light.specular;\n    return ambiant + 0.5*(diffuse+specular);\n}\n\nfloat shininess(vec3 hit, vec3 eye, vec3 normal, pLight light) {\n    float ks = 1.0; // Specular component, should be part of the material.\n    vec3 L = light.position - hit;\n    vec3 R = reflect(L, normal);\n    vec3 V = eye - hit;\n    return pow(dot(R, V), ks);\n}\n\nvec3 reflection(vec3 rayDir, vec3 normal, vec3 hit, vec3 sky) {\n    vec3 refle = reflect(rayDir, normal);\n    vec2 r = raymarch(hit, refle);\n    return material(r, hit+r.x*refle, sky);\n}\n\nmat3 rotationX(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, c, s,\n                0.0, -s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pLight l1 = pLight(vec3(iTime-3.0, 2.0*sin(iTime), cos(iTime)*3.0),\n                       vec3(0.8), vec3(1.0, 0.0, 0.0), vec3(0.8, 0.0, 0.0));\n    \n   \tpLight l2 = pLight(vec3(iTime-3.0, -2.0, -3.0),\n                       vec3(0.3), vec3(0.0, 0.0, 1.0), vec3(0.0, 0.0, 0.8));\n    \n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    \n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    int tx = int(uv2.x*512.0);\n    \n    vec3 target  = vec3(0.0, .5, 0.0);\n\tvec3 eye     = vec3(sin(iTime)*3.0, 1.5, cos(iTime)*3.0);\n    vec3 up      = vec3(0.0, 1.0, 0.0);\n    \n    vec3 eyeDir   = normalize(target - eye);\n    vec3 eyeRight = normalize(cross(up, eye));\n    vec3 eyeUp    = normalize(cross(eye, eyeRight));\n    \n    vec3 rayDir = normalize(eyeRight * uv.x + eyeUp * uv.y + eyeDir);\n    \n    vec3 hi = vec3(255.0, 122.0, 122.0)/255.0;\n    vec3 lo = vec3(134.0, 22.0, 87.0)/255.0;\n    vec3 color = mix(lo, hi, fragCoord.y/iResolution.y);\n    vec3 sky = color;\n    vec2 c = raymarch(eye, rayDir);\n    vec3 hit = eye+c.x*rayDir;\n    vec3 norm = normal(hit);\n    \n    if(c.y >= 0.0) {\n        if(c.y >= 1.0 && c.y < 2.0) {\n            // Reflexion\n            vec3 reflColor = reflection(rayDir, norm, hit, color);\n            reflColor *= phong(hit, eye, norm, l1, 2.0);\n            color = reflColor; // mix(material(c, hit, color), reflColor, 0.7)*phong(hit, eye, norm, l1, 1.5);\n        } else {\n            color = material(c, hit, color);\n            color = color * phong(hit, eye, norm, l1, 2.0);\n\n        }\n    }\n    \n\tfragColor = vec4(color, c.x/MAXDIST);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}