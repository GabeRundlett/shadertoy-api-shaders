{
    "Shader": {
        "info": {
            "date": "1605035065",
            "description": "Sparking Julia",
            "flags": 0,
            "hasliked": 0,
            "id": "wsdBDH",
            "likes": 2,
            "name": "Sparking Julia",
            "published": 3,
            "tags": [
                "fractal",
                "julia"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "vec2 cmult(vec2 z, vec2 w) {\n\treturn vec2(\n\t\tz.x * w.x - z.y * w.y,\n\t\tz.x * w.y + z.y * w.x\n\t);\n}\n\nvec2 cpow(vec2 z, int n) {\n\tvec2 res = vec2(1.0);\n\tfor (int i = 0; i < n; i++)\n\t\tres = cmult(res, z);\n\treturn res;\n}\n\nfloat julia(vec2 z, vec2 c) {\n\tfloat res = 0.0;\n\tfor (int i = 0; i < 100; i++) {\n\t\tz = cpow(z, 4) + c;\n\t\tif (length(z) > 10.0) break;\n\t\tres += exp(-19.0 * length(z));\n\t}\n\treturn clamp(res, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    float asp = iResolution.x / iResolution.y;\n    vec2 centralizer = vec2(0.5 * asp, 0.5);\n\tvec2 z = 2.2 * (uv - centralizer);\n\tvec2 c = 0.625 * vec2(cos(iTime * 1.43), sin(iTime * 1.43));\n\tfloat res = julia(z, c);\n\tfragColor = vec4(res, res, res * res, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}