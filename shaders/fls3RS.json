{
    "Shader": {
        "info": {
            "date": "1622323612",
            "description": "A ray marching scene made by combining different types of noise.\nIt'd probably look better with anti-aliasing but I think the shader is already resource-intensive as is.",
            "flags": 0,
            "hasliked": 0,
            "id": "fls3RS",
            "likes": 20,
            "name": "Styx",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "noise",
                "water"
            ],
            "usePreview": 0,
            "username": "R3N",
            "viewed": 630
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 500.0\n#define MIN_DIST 0.01\n#define pi acos(-1.0)\n#define sat(t) clamp(t, 0.0, 1.0)\n\n// 2D rotation\nvec2 rot(vec2 p, float a) {\n\treturn p*mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\n// random [0,1]\nfloat rand(vec2 p) {\n\treturn fract(sin(dot(p, vec2(12.543,514.123)))*4732.12);\n}\n\n// value noise\nfloat noise(vec2 p) {\n\tvec2 f = smoothstep(0.0, 1.0, fract(p));\n\tvec2 i = floor(p);\n\tfloat a = rand(i);\n\tfloat b = rand(i+vec2(1.0,0.0));\n\tfloat c = rand(i+vec2(0.0,1.0));\n\tfloat d = rand(i+vec2(1.0,1.0));\n\treturn mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n\t\n}\n\n// fractal noise\nfloat fbm(vec2 p) {\n    float a = 0.5;\n    float r = 0.0;\n    for (int i = 0; i < 8; i++) {\n        r += a*noise(p);\n        a *= 0.5;\n        p *= 2.0;\n    }\n    return r;\n}\n\n// sky SDF\nfloat sky(vec3 p) {\n    vec2 puv = p.xz;\n    // move clouds\n    puv += vec2(-2, 4)*iTime;\n    // plane with distortion\n\treturn 0.4*(-p.y+25.0+noise(puv/20.0)*1.5*fbm(puv/7.0));\n}\n\n// mountains SDF\nfloat mountains(vec3 p) {\n    // add slope so it forms a valley\n    float addSlope = -clamp(abs(p.x/20.0), 0.0, 7.0);\n    // increase intensity of distortion as it moves away from the river\n    float rockDist = clamp(2.0*abs(p.x/3.0), 0.0, 30.0);\n    // rock formations\n    float rocks = fbm(vec2(0, iTime/5.0)+p.xz/15.0);\n    // plane with distortion\n    return p.y-rockDist*rocks+addSlope+10.0;\n}\n\n// river SDF\nfloat river(vec3 p) {\n    // underwater rocks that disturb the flow of the river\n    // with a modification by pyBlob that adds a pressure hole after each rock\n    float rocks = pow(noise(p.xz/6.0+vec2(0, iTime/1.5)),4.0)\n                  - pow(noise((p.xz-vec2(0,1.5))/6.0+vec2(0, iTime/1.5)),4.0);\n    // surface waves\n    float waves = 0.75*fbm(noise(p.xz/4.0)+p.xz/2.0-vec2(0,iTime/1.75-pow(p.x/7.0,2.0)))\n                  + 0.75*fbm(noise(p.xz/2.0)+p.xz/2.0-vec2(0, iTime*1.5));\n    // Plane with distortion\n    return p.y+4.0-rocks+waves;\n}\n\n// scene\nfloat dist(vec3 p) {\n\treturn min(river(p), min(mountains(p), sky(p)));\n}\n\n// classic ray marcher that returns both the distance and the number of steps\nvec2 rayMarch(vec3 cameraOrigin, vec3 rayDir) {\n\tfloat minDist = 0.0;\n\tint steps = 0;\n\twhile (steps < MAX_STEPS) {\n\t\tvec3 point = cameraOrigin + rayDir * minDist;\n\t\tfloat d = dist(point);\n\t\tminDist += d;\n\t\tif(d < MIN_DIST || minDist > MAX_DIST) {\n\t\t\tbreak;\n\t\t}\n\t\tsteps++;\n\t}\n\treturn vec2(minDist, steps);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy/(iResolution.y);\n\tuv -= iResolution.xy/iResolution.y/2.0;\n    // camera setup\n\tvec3 cameraOrigin = vec3(0, noise(vec2(0, iTime/4.0))-1.5, 0);\n\tvec3 ray = normalize(vec3(uv.x, uv.y, 0.4));\n    // camera sway\n    ray.yz = rot(ray.yz, mix(-0.5 , 0.5, 0.25*noise(vec2(0, 0.5+iTime/4.0))+noise(vec2(3.0-iTime/9.0))));\n    ray.xz = rot(ray.xz, mix(-1.0 , 1.0, noise(vec2(5.0+iTime/10.0))));\n    // ray march\n    vec2 rm = rayMarch(cameraOrigin, ray);\n    // color is based on the number of steps and distance\n\tvec4 col = pow(vec4(rm.y/100.0),vec4(3.0))+pow(rm.x/MAX_DIST,2.5);\n    // gamma correction\n\tfragColor = pow(col, vec4(1.0/2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}