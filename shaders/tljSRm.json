{
    "Shader": {
        "info": {
            "date": "1589841343",
            "description": "Some particles spinning around and doing random walks.\nJust another 2d sketch I had laying around from some time ago and was unpublished for some reason.\nPay no attention to the uncommented and unreadable code. ;)",
            "flags": 32,
            "hasliked": 0,
            "id": "tljSRm",
            "likes": 10,
            "name": "Particle sketch",
            "published": 3,
            "tags": [
                "2d",
                "particles",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Lallis",
            "viewed": 527
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec3 col = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n    float pls = texelFetch(iChannel0, ivec2(iResolution)-ivec2(2,1), 0).r;\n    //float pls = texture(iChannel2, vec2(0.0078125,0.25)).r;\n    //pls*=pls*pls;\n    pls = 1.0-pls;\n    col = smoothstep(0.025*pls+0.01,0.10*pls+0.05,col);\n    \n    \n    col = pow(col,vec3(1.0/2.2));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch(iChannel0, ivec2(iResolution)-1, 0);\n    if( int(fragCoord.x) == int(iResolution.x)-1 \n       && int(fragCoord.y) == int(iResolution.y)-1 ) {\n        \n        float dt = time - data.z;\n    \tfragColor = vec4(iResolution.x, iResolution.y, time, dt);\n        return;\n    }\n    \n    float pls = texture(iChannel2, vec2(0.0078125,0.25)).r;\n    if( int(fragCoord.x) == int(iResolution.x)-2 \n       && int(fragCoord.y) == int(iResolution.y)-1 ) {\n\t\t\n        fragColor = vec4(pls);\n        return;\n    }\n\n    \n    int idx = int(fragCoord.x) + int(fragCoord.y)*int(iResolution.x);\n    \n    if( idx >= nParticles || iFrame == 0 || iResolution.x != data.x || iResolution.y != data.y) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    float dt = data.w;\n    \n    vec4 res = vec4(0.0); \n    vec4 state = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec3 r = hash3(uint(idx+nParticles*int(time*0.5)));\n    \n    \n\n    float v = r.y*0.25+0.05;\n    \n    float phi;\n    \n    phi = r.x*2.0*PI;//+PI/8.0*(2.0*r.z*r.z-1.0)*time*25.0*v;\n    res.z = phi;\n    \n    if(fract(time/16.0) > 0.25) {\n        vec3 r2 = hash3(uint(time/16.0));\n       \n        float xi = r2.x*2.0-1.0;\n        float dir = sign(xi);\n        \n        //float rot = 2.0*PI*abs(xi);\n        \n        vec2 ps = state.xy;\n        \n        phi = atan(ps.y,ps.x);\n           \n        float n = floor(r2.z*6.0)*0.5 + 1.5;\n       \n\n        float inw = r2.y > 0.75 ? 1.0 : 0.0;\n        \n        if(abs(xi) < 0.5)\n        \tphi = (floor(phi/(PI/n)) + 0.5 + 0.5*dir*inw )*(PI/n);\n \n        \n        phi += PI*0.5*dir;\n \t\t//phi = r.x*2.0*PI+PI/8.0*fract(time)*25.0;\n    }\n    \n    \n    res.xy = state.xy + vec2( cos(phi), sin(phi) )*v*dt;\n    \n\n    \n    float sx = iResolution.x/iResolution.y;\n    if(res.x > sx)\n        res.x = sx;\n    if(res.y > sx)\n        res.y = sx;\n    if(res.x < -sx)\n        res.x = -sx;\n    if(res.y < -sx)\n        res.y = -sx;\n    \n    \n    fragColor = res;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define time iTime*2.0\n#define PI 3.14159265359\n\nconst int nParticles = 512;\n\n// Integer Hash\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 p = 2.0*uv-1.0;\n    p.x *= iResolution.x/iResolution.y;\n    \n\tfloat pls = texelFetch(iChannel0, ivec2(iResolution)-ivec2(2,1), 0).r;\n    pls = smoothstep(0.8,1.0,pls);\n    float a = pls*PI/8.0;\n    \n    p = vec2(cos(a)*p.x+sin(a)*p.y, -sin(a)*p.x+cos(a)*p.y);\n    \n    vec3 col = vec3(0.011);\n    \n    vec4 data = texelFetch(iChannel0, ivec2(iResolution)-1, 0);\n    \n    float dt = data.w;\n    \n    for(int i = 0; i < nParticles; ++i) {\n        ivec2 idx = ivec2( i % int(iResolution.x), i / int(iResolution.x));\n    \tvec4 state = texelFetch(iChannel0, idx, 0);\n        \n        float d = length(p-state.xy);\n        float cd = length(state.xy);\n        \n        vec3 c = mix(vec3(0.5,sin(time*0.1)*0.5+0.5,0.2), vec3(0.2,0.3,0.6), clamp(0.0,1.0,cd*0.78));\n        col += smoothstep(0.01, 0.005, d)*c;\n    }\n\tvec3 old = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n    col = mix(col, old,(1.0-dt));\n    col = clamp(col,vec3(0.0),vec3(1.0));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}