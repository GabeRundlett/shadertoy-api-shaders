{
    "Shader": {
        "info": {
            "date": "1494970954",
            "description": "Quantum String Field",
            "flags": 64,
            "hasliked": 0,
            "id": "ldsBRn",
            "likes": 32,
            "name": "String Field (Audio)",
            "published": 3,
            "tags": [
                "fft",
                "torus",
                "audioreactive",
                "strings"
            ],
            "usePreview": 0,
            "username": "scottdarby",
            "viewed": 954
        },
        "renderpass": [
            {
                "code": "// lots of inspiration from IQ and hg_sdf\n\nconst float PI = 3.14159265359;\nconst int MAX_MARCHING_STEPS = 50;\nconst float EPSILON = 0.0001;\n\nvec2 rotate2d(vec2 v, float a) {\n\treturn vec2(v.x * cos(a) - v.y * sin(a), v.y * cos(a) + v.x * sin(a)); \n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\n\nfloat opTwist( vec3 p, float fftValue, float time ) {\n    float c = cos((fftValue*1.5) *p.y);\n    float s = sin((fftValue+0.25)*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m * p.xz, p.y);\n    \n    return sdTorus(q, vec2(abs(sin(iTime*0.1))+0.5*(fftValue*0.03), fftValue*0.0001));\n\n}\n\nfloat opRep( vec3 p, vec3 c ) {\n            \n    float idx = mod((floor((p.x)/c.x)), 32.0);\n    float idy = mod((floor((p.y)/c.y)), 32.0);\n    float idz = mod((floor((p.z)/c.z)), 32.0);\n    \n\tfloat id = length(vec3(idx, idy, idz));\n       \n    float fftValue = (((texture( iChannel0, vec2(id+1.0, 0.0) ).x)) * 10.0);\n    \n    vec3 q = mod(p, c) - 0.5 * c;\n\n    vec3 r = q;  \n    \n    float rotationAmount = (id * 5.0) + (iTime * 2.0);\n   \n    bool xmod2 = mod(idx, 2.0) == 0.0;\n    \n    // offset even rows\n    if (xmod2) {\n    \tq.y += 1.5;\n        r.y -= 1.5;\n    }\n    \n\tpR(q.xy, rotationAmount);\n    pR(q.xz, rotationAmount * 0.1);\n    \n    float shape1 = opTwist(q, fftValue, iTime);\n    \n    if (xmod2) {\n    \n        pR(r.xy, rotationAmount);\n        pR(r.xz, rotationAmount * 0.1);\n        \n        float shape2 = opTwist(r, fftValue, iTime);\n        \n    \treturn min(shape1, shape2);\n        \n    } else {\n        \n        return shape1;\n        \n    }\n}\n\n\nfloat sceneSDF(vec3 samplePoint) {\n\treturn opRep(samplePoint, vec3(3.0, 3.0, 3.0));\n}\n\nvec3 castRay(vec3 pos, vec3 dir) {\n\tfor (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n\t\tfloat dist = sceneSDF(pos);\n        if (dist < EPSILON) {\n\t\t\treturn pos;\n        }\n\t\tpos += dist * dir;\n\t}    \n\treturn pos;\n}\n\n\nfloat lightPointDiffuse(vec3 pos, vec3 lightPos) {\n\tfloat lightDist = length(lightPos - pos);\n\tfloat color = 3.0 / (lightDist * lightDist);\n\treturn max(0.0, color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tvec4 mousePos = (iMouse / iResolution.xyxy) * 2.0 - 1.0;\n    \n\tmousePos *= vec2(PI / 2.0, PI / 2.0).xyxy;\n    \n    if (iMouse.zw == vec2(0.0)) {\n        mousePos.xy = vec2(0.5, -0.2); \n    }\n\t\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\t\n\tvec3 cameraPos = vec3(0.0, 0.0, -8.0);\n\t\n\tvec3 cameraDir = vec3(0.0, 0.0, 1.0);\n\tvec3 planeU = vec3(2.0, 0.0, 0.0);\n\tvec3 planeV = vec3(0.0, iResolution.y / iResolution.x * 2.0, 0.0);\n\tvec3 rayDir = normalize(cameraDir + screenPos.x * planeU + screenPos.y * planeV);\n\t\n\tcameraPos.yz = rotate2d(cameraPos.yz, mousePos.y);\n\trayDir.yz = rotate2d(rayDir.yz, mousePos.y);\n\t\n\tcameraPos.xz = rotate2d(cameraPos.xz, mousePos.x);\n\trayDir.xz = rotate2d(rayDir.xz, mousePos.x);\n    \n    cameraPos.zy += iTime;\n\t\n\tvec3 rayPos = castRay(cameraPos, rayDir);\n\t\n    // base color\n\tvec3 color = vec3(0.01, 0.23, 0.43);\n    \n    color += (rayDir*0.02);\n    \n    vec3 lightPos = cameraPos;\n\n    color *= 10.0 * lightPointDiffuse(rayPos, lightPos) * 10.0;\n    \n\tcolor = pow(color, vec3(0.4));\t\n\t\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21027,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/scottdarby/fallingforwardsforever"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}