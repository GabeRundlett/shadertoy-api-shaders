{
    "Shader": {
        "info": {
            "date": "1590006589",
            "description": "Just testing",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSfDW",
            "likes": 7,
            "name": "Fireish calejdoskop",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "codecontemplator",
            "viewed": 500
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nfloat sdHorseshoe( in vec2 p, in vec2 c, in float r, in vec2 w )\n{\n    p.x = abs(p.x);\n    float l = length(p);\n    p = mat2(-c.x, c.y, \n              c.y, c.x)*p;\n    p = vec2((p.y>0.0)?p.x:l*sign(-c.x),\n             (p.x>0.0)?p.y:l );\n    p = vec2(p.x,abs(p.y-r))-w;\n    return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\nfloat circle(in vec2 p, in float r ) {\n    return length(p) - r;\n}\n\nfloat map(in vec2 p){    \n    float d1 = sdEquilateralTriangle(p*0.5);\n    float d2 = sdStar5(p*0.1, 1.0, 0.4);\n    float d3 = sdStar5(p*0.2, 1.0, 0.4);\n    //float d4 = sdHorseshoe(p-vec2(2.0,-0.1), vec2(0.4, -1.5), 1.5, vec2(0.750,0.25));\n    float d4 = circle(p, 8.0);\n    return min(min(d1, max(d2,-d3)), -d4);\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 modMirror2(inout vec2 p, vec2 size) {\n  vec2 halfsize = size*0.5;\n  vec2 c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  p *= mod(c,vec2(2.0))*2.0 - vec2(1.0);\n  return c;\n}\n\nvec3 postProcess(in vec3 col, in vec2 q) \n{\n  col=pow(clamp(col,0.0,1.0),vec3(0.45)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=vec3(0.15+0.85*pow(29.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7));  // vigneting\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord/iResolution.xy;\n    vec2 uv = -1. + 2. * q;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float sc = 25.0;\n    vec2 p = uv*sc;\n    p = toPolar(p);\n    modMirror2(p, vec2(150., 2.*PI/16.));\n    p = toRect(p);\n    modMirror2(p, vec2(15., 15.));\n    p = rotate(p, iTime*0.5*PI);\n    float d = map(p + vec2(0.4, 0)) / sc;\n    \n    float r = smoothstep(0.0, 0.001, d);\n    float g = smoothstep(0.0, 0.01, d);\n    float b = smoothstep(0.0, 0.1, d);\n    \n    vec3 color = vec3(r, g ,b);\n    //color = 1.0 - color;\n    color = postProcess(color, q);\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}