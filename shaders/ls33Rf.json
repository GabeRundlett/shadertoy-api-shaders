{
    "Shader": {
        "info": {
            "date": "1451293913",
            "description": "Perlin Noise simpleness test",
            "flags": 0,
            "hasliked": 0,
            "id": "ls33Rf",
            "likes": 4,
            "name": "fire cloud",
            "published": 3,
            "tags": [
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "DeMaCia",
            "viewed": 859
        },
        "renderpass": [
            {
                "code": "// 0 ~ 4\n#define TYPE 1\n\n// vec2 noise22(vec2 p)\n// {\n//     p = p*mat2(127.1,311.7,269.5,183.3);\n// \tp = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n// \treturn sin(p*6.283 + iTime);\n// }\n\nfloat randomNoise(vec2 p)\n{\n    //gray noise\n    //vec2 uv = p/iResolution.xy;\n\t//return texture(iChannel0, uv).r;\n    \n\n    //p = p*mat2(127.1,311.7,269.5,183.3);\n    //return fract(sin((fract(sin(p.x)*cos(p.y)*43758.5453123))*6.283 + iTime));\n    \n\treturn fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\n}\n\n\nfloat smoothNoise(vec2 p)\n{//cross filter \n\n\treturn (randomNoise(p + vec2(-1,1)) + \n            randomNoise(p + vec2(1,-1)) + \n            randomNoise(p + vec2(-1,-1)) + \n            randomNoise(p + vec2(1,1)) ) / 16.0 \t\t\n\t\t   + ( randomNoise(p + vec2(1,0)) + \n               randomNoise(p + vec2(-1,0)) + \n               randomNoise(p + vec2(0,1)) + \n               randomNoise(p + vec2(0,-1)) ) / 8.0 \t\t\n    \t   + randomNoise(p) / 4.0;\n}\n\n\nfloat BINoise(vec2 p)\n{//Bilinear interpolation\n\n\tfloat tiles = 32.;\n\n\tvec2 base = floor(p/tiles);\n\tp = fract(p/tiles);\n\tvec2 f = smoothstep(0., 1., p);\n\n\tfloat q11 = smoothNoise(base);\n\tfloat q12 = smoothNoise(vec2(base.x, base.y+1.));\n\tfloat q21 = smoothNoise(vec2(base.x+1., base.y));\n\tfloat q22 = smoothNoise(vec2(base.x+1., base.y+1.));\n\n\tfloat r1 = mix(q11, q21, f.x);\n\tfloat r2 = mix(q12, q22, f.x);\n\n\treturn mix (r1, r2, f.y);\n} \n\n\nfloat perlinNoise(vec2 p)\n{\n\tfloat total=0., frequency=1., amplitude=1., angle=.5;\n\tfor (float i = 0.; i < 6.; i++)\n\t{\n\t\tvec2 sp = p * frequency;\n\t\t//vec2 tp = vec2(sp.x*cos(angle*i)-sp.y*sin(angle*i), sp.x*sin(angle*i)+sp.y*cos(angle*i));\n\t\ttotal += BINoise(sp) * amplitude; \n\t\tfrequency *= 2.;\n\t\tamplitude *= .5;\n\t}\n\treturn total;\n}\n\n\nvec4 clound(vec2 fragCoord )\n{\n\n\tfloat speed = 4.;\n\n\tfloat t = iTime * speed;\n\n\tvec2 d1 = vec2(t * 1.,t * .5);\n\tvec2 d2 = vec2(t * 2.,t * -4.);\n\tvec2 d3 = vec2(t * -6.,t * 8.);\n\n\tfloat z = perlinNoise(fragCoord - d1);\n\tfloat x = perlinNoise(fragCoord + d2);\n\tfloat c = perlinNoise(fragCoord - d3);\n\n\tvec3 color1 = vec3(.5, .5, .0);\n\tvec3 color2 = vec3(.8, .8, .0);\n\tvec3 color3 = vec3(.0, .0, .0);\n\tvec3 color4 = vec3(.2, .2, .2);\n\tvec3 color5 = vec3(.0, .0, .6);\n\tvec3 color6 = vec3(.0, .6, .0);\n\n    return vec4(\n                mix(color1, color2, z) +\n                mix(color3, color4, x) -\n                mix(color5, color6, c),\n                1.);\n}\n\nvec4 wave(vec2 fragCoord )\n{\n\n\tfloat speed = 4.;\n\n\tfloat t = iTime * speed;\n\n\tvec2 d1 = vec2(t * 1.,t * .5);\n\tvec2 d2 = vec2(t * 2.,t * -4.);\n\tvec2 d3 = vec2(t * -6.,t * 8.);\n\n\tfloat p1 = perlinNoise(fragCoord - d1);\n\tfloat p2 = perlinNoise(fragCoord + d2);\n\tfloat p3 = perlinNoise(fragCoord - d3);\n\n\tfloat pn = mix(p1, p2, p3);\n\n\tvec2 pos = fragCoord * 0.02;\n\tpos -= vec2(t*.5+20., t*.5);\n\tfloat c = sqrt(pos.x * pos.x + pos.y * pos.y);\t\n\tc = fract(c+pn);\n    \n\tvec3 color1 = vec3(.2, .65, .95);\n\tvec3 color2 = vec3(1., 1., 1.);\n\n    return vec4(mix(color1, color2, c), 1.);\n}\n\n\nvec4 ink(vec2 fragCoord )\n{\n\tfloat speed = 4.;\n\n\tfloat t = iTime * speed;\n\n\tvec2 d1 = vec2(t * 2.,t * .5);\n\tvec2 d2 = vec2(t * 6.,t * -.7);\n\tvec2 d3 = vec2(t * -6.,t * 16.);\n\n\tfloat p1 = perlinNoise(fragCoord - d1);\n\tfloat p2 = perlinNoise(fragCoord + d2);\n\tfloat p3 = perlinNoise(fragCoord - d3);\n\n\tfloat p = mix(p1, p2, p3);\n\n\tfloat r=0., g=0., b=0.;\n\n\tfloat q = fract(p*5.0);\n\tfloat w = fract(p*10.0);\n\tfloat e = fract(p*20.0);\n\n\tif (q>w)\n\t{\n\t\tif (q>e)\n\t\t{\n\t\t\tr = q;\n\t\t}else{\n\t\t\tb = e;\n\t\t}\n\t}else{\n\t\tif (w>e)\n\t\t{\n\t\t\tg = w;\n\t\t}else{\n\t\t\tb = e;\n\t\t}\n\t}\n\n\treturn vec4(r, g, b, 1.);\n}\n\nvec4 vein(vec2 fragCoord )\n{\n\tfloat speed = 4.;\n\n\tfloat t = iTime * speed;\n\n\tvec2 d1 = vec2(t * 1.,t * .5);\n\tvec2 d2 = vec2(t * 4.,t * -8.);\n\tvec2 d3 = vec2(t * -6.,t * 8.);\n\n\tfloat p1 = perlinNoise(fragCoord - d1);\n\tfloat p2 = perlinNoise(fragCoord + d2);\n\tfloat p3 = perlinNoise(fragCoord - d3);\n\n\tfloat p = mix(p1, p2, p3);\n\tfloat c = abs(cos(fragCoord.x*0.1 + p*20.0));\n\n\tvec3 color1 = vec3(1., .6, .0);\n\tvec3 color2 = vec3(1., 1., 1.);\n\treturn vec4(mix(color1, color2, c), 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    #if TYPE == 0\n        fragColor = vec4(randomNoise(fragCoord));\n    #elif TYPE == 1\n        fragColor = clound(fragCoord);\n    #elif TYPE == 2\n        fragColor = wave(fragCoord);\n    #elif TYPE == 3\n        fragColor = ink(fragCoord);\n    #elif TYPE == 4\n        fragColor = vein(fragCoord);\n    #else  \n        fragColor = vec4(perlinNoise(fragCoord));\n    #endif\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}