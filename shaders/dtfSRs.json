{
    "Shader": {
        "info": {
            "date": "1675190446",
            "description": "This is a very simple way of graphing functions. If the thickness is set too high you get artifacts. It uses dFdx to try and ensure a consistent line thickness, which works well for thin lines. Uncomment BETTER_APPROX to see without it.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtfSRs",
            "likes": 5,
            "name": "Simplest antialiased graph",
            "published": 3,
            "tags": [
                "graph",
                "derivative",
                "dfdx",
                "fwidth"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "#define BETTER_APPROX\n#define THICKNESS 0.01\n\n// Put your function here\nfloat f(float x)\n{\n    int s = int(mod(iTime*0.5, 4.));\n    switch(s)\n    {\n    case 0:\n        return sin(x*5.+iTime)*0.5;\n        break;\n    case 1:\n         x -= 0.3;\n        return -x*x-x*x*x;\n        break;\n    case 2:\n        x += 0.5;\n        return 3.*x*x-2.*x*x*x-0.5;\n        break;\n    case 3:\n        return (sin(x*5.)+cos(x*10.+iTime))*0.25;\n        break;\n    }\n}\n\nfloat graph(vec2 p)\n{\n    float f = f(p.x);\n    return abs(p.y-f)\n    #ifdef BETTER_APPROX\n    -abs(dFdx(f))\n    #endif\n    ;\n}\n\nfloat map(vec2 uv)\n{\n    return graph(uv);\n}\n\nvec3 colorSdf(vec2 uv, vec4 m, float px)\n{\n    #define PERIOD 200.\n    #define STR 0.2\n    #define STROKE_WIDTH 0.005\n    #define MOUSE_WIDTH 0.005\n    float d = map(uv);\n    float md = map(m.xy);\n    vec3 col = mix(vec3(0.094,0.494,0.988), vec3(1.000,0.082,0.980), sign(d)*0.5+0.5);\n    col *= smoothstep(-px*PERIOD, px*PERIOD, cos(d*PERIOD))*STR+1.-STR;\n    col = mix(col, vec3(1), smoothstep(STROKE_WIDTH+px, STROKE_WIDTH-px, abs(d)));\n    if(m.z > 0.)\n    {\n        float mdc = smoothstep(px, -px, min(abs(distance(m.xy, uv)-md+MOUSE_WIDTH)-MOUSE_WIDTH, distance(m.xy, uv)-MOUSE_WIDTH*2.));\n        col = mix(col, vec3(1.000,0.875,0.000), mdc);\n    }\n    col /= d+1.;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec4 m = (iMouse*2.-iResolution.xyxy)/iResolution.y;\n    float px = 2./iResolution.y;\n\n    float g = graph(uv);\n    float fw = fwidth(g);\n    vec3 col = vec3(smoothstep(THICKNESS+fw, THICKNESS-fw, g));\n\n    // Output to screen\n    fragColor = vec4(mix(col, colorSdf(uv, m, px), clamp(iMouse.z, 0., 1.)),1.0);\n}\n\n\n\n\n\n\n\n// Alias: return of the jaggies",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}