{
    "Shader": {
        "info": {
            "date": "1615458284",
            "description": "top right shows characters using the x channel of the font image (antialiased bitmap data)\nbottom right shows characters using the w channel of the font image (distance field data)",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXGz8",
            "likes": 6,
            "name": "font zoom explorer",
            "published": 3,
            "tags": [
                "font",
                "texfont",
                "fontpage"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 496
        },
        "renderpass": [
            {
                "code": "/*\nThis is a demo of the new font texture. \nIt has a distance field and gradients in the texture.\nRed channel:   Antialiased font if you just want something simple and easy to use.\nGreen channel: x gradient of distance field.\nBlue channel:  y gradient of distance field.\nAlpha channel: distance field.\n\nThe characters that are encoded are the characters from the first 8 bits of unicode (aka Latin-1 codepage).\nThat includes ASCII. In the blanks, there are symbols that seemed useful for shadertoy. Math symbols,\ngreek letters, play/pause controls, arrows, musical notes, and some others.\n\nThe distance field lets you use the font for ray marching. Since the texture didn't have enough precision\nfor a clean distance field, nice smooth gradients have been put in the green/blue channels to get smooth edges.\n\nSometimes you might see some artifacts in the font edges when you look from an angle. To fix those,\nthe ray marching would have to pause at the boundary between each letter since the distance field is\nnot continuous between letters. That would complicate this code a bit, so it was left out.\n*/\n\n#define R iResolution.xy\n\nfloat linscale(float x, float x1, float x2, float y1, float y2){\n    return (y2-y1)/(x2-x1)*(x-x2) + y2;\n}\n\nvoid mainImage(out vec4 color, in vec2 xy){\n    float R_min = min(R.x, R.y);\n    float R_max = max(R.x, R.y);\n    \n    vec2 uv = (xy - 0.5*R)/R_min + 0.5;\n    vec2 muv = (iMouse.xy - 0.5*R)/R_min + 0.5;\n    float uv_max = 0.5*R_max/R_min + 0.5;\n    float uv_min = uv_max - R_max/R_min;\n    /*\n                   1.0\n        __________________________\n       |       |    |    |        |\n       |       |    |    |        |\n     uv_min   0.0  0.5  1.0     uv_max\n       |       |    |    |        |\n       |       |    |    |        |\n       |__________________________|\n                   0.0\n       |------ R_max/R_min -------|\n    */\n    \n    float c = 0.0;\n    float blur = 0.04;\n    \n    vec2 st_legend = vec2(uv.x - uv_min, uv.y);\n    float d = texture(iChannel0, st_legend).w;\n    c += 1.0 - smoothstep(0.5-blur, 0.5+blur, d);\n    \n    vec2 st_pixelated = vec2(\n        linscale(muv.x, uv_min, uv_min+1.0, 0.0, 1.0),\n        muv.y\n    );\n    float zoom = 1.0/9.0;\n    float cpx = (uv_min+1.0+uv_max)*0.5;\n    \n    if (uv.y>0.5 && uv.x>cpx-0.25 && uv.x<cpx+0.25){\n        vec2 offset = uv - vec2(cpx, 0.75);\n        c += texture(iChannel0, st_pixelated + offset*zoom).x;\n    }\n    \n    if (uv.y<0.5 && uv.x>cpx-0.25 && uv.x<cpx+0.25){\n        vec2 offset = uv - vec2(cpx, 0.25);\n        float d = texture(iChannel0, st_pixelated + offset*zoom).w;\n        c += 1.0 - smoothstep(0.5-blur, 0.5+blur, d);      \n    }\n    \n    color = vec4(vec3(c),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}