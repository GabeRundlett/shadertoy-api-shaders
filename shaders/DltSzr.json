{
    "Shader": {
        "info": {
            "date": "1684962559",
            "description": "test progressive blur,my article about this effect:https://martinrgb.github.io/blog/#/Namedrop_Animation",
            "flags": 32,
            "hasliked": 0,
            "id": "DltSzr",
            "likes": 6,
            "name": "Progressive Dual Kawase Blur",
            "published": 3,
            "tags": [
                "blur",
                "kawase",
                "dualfiltering"
            ],
            "usePreview": 0,
            "username": "MartinRGB",
            "viewed": 888
        },
        "renderpass": [
            {
                "code": "// Simply display the texture\n//\n// Try switching the iChannel0 to Buffer A, B, C and D to see the intermediate steps\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy));\n    \n    if(uv.y>progressAVal){\n        vec4 origCol = texture(iChannel1, vec2(uv.x,uv.y));\n        vec4 sampleCol = texture(iChannel0, vec2(uv.x,uv.y));\n        //mix by progress position\n        fragColor = origCol;\n    }\n    else{\n        fragColor = texture(iChannel0, vec2(uv.x,uv.y));\n    }\n    \n    float handleBarVal;\n    \n    if(abs(uv.y-progressAVal) > 0.005){\n        handleBarVal = 0.;\n    }\n    else{\n        handleBarVal = 1.;\n    }\n    \n    \n    fragColor = mix(fragColor,vec4(0.,0.,0.,1.),handleBarVal);\n    \n    //fragColor = texture(iChannel0, vec2(uv.x,uv.y));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// downsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / iResolution.xy) * bufferADownScale;\n    float progressUV = (progressAVal-uv.y);\n    float clampedProgress = max(0.,progressUV);\n    clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy / (2.0 + (1.-clampedProgress) * 1.));\n    float offset = blurOffset*clampedProgress; \n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    \n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n\n    fragColor = sum / 8.0;\n    \n    //fragColor = sum / 8.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// downsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / iResolution.xy) * bufferADownScale;\n    float progressUV = (progressBVal-uv.y);\n    float clampedProgress = max(0.,progressUV);\n     clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy / (2.0 + (1.-clampedProgress) * 1.));\n    float offset = blurOffset*clampedProgress; \n\n    vec4 sum = texture(iChannel0, uv) * 4.0;\n    \n    sum += texture(iChannel0, uv - halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + halfpixel.xy * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset);\n    sum += texture(iChannel0, uv - vec2(halfpixel.x, -halfpixel.y) * offset);\n    \n    fragColor = sum / 8.0;\n    \n    //fragColor = sum / 8.0;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// upsample pass 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * bufferCUpScale));\n    float progressUV = (progressCVal - uv.y);\n    float clampedProgress = max(0.,progressUV);\n     clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy * (1. + 3.*clampedProgress));\n    float offset = blurOffset*clampedProgress;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n    \n    //fragColor = sum / 12.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// upsample pass 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / (iResolution.xy * bufferDUpScale));\n    float progressUV = (progressDVal - uv.y);\n    float clampedProgress = max(0.,progressUV);\n    clampedProgress = curveInterplation(clampedProgress);\n    vec2 halfpixel = pixelOffset / (iResolution.xy * (1. + 3.*clampedProgress));\n    float offset = blurOffset*clampedProgress;\n\n    vec4 sum = texture(iChannel0, uv +vec2(-halfpixel.x * 2.0, 0.0) * offset);\n    \n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(halfpixel.x * 2.0, 0.0) * offset);\n    sum += texture(iChannel0, uv + vec2(halfpixel.x, -halfpixel.y) * offset) * 2.0;\n    sum += texture(iChannel0, uv + vec2(0.0, -halfpixel.y * 2.0) * offset);\n    sum += texture(iChannel0, uv + vec2(-halfpixel.x, -halfpixel.y) * offset) * 2.0;\n\n    fragColor = sum / 12.0;\n    \n    //fragColor = sum / 12.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bufferADownScale 2.\n#define bufferBDownScale 2.\n#define bufferCUpScale 2.\n#define bufferDUpScale 2.\n#define blurOffset 24.\n#define pixelOffset 8.\n\n#define progressAVal max(0.33,iMouse.y/iResolution.y)\n#define progressBVal progressAVal/bufferADownScale //0.125\n#define progressCVal progressBVal/bufferBDownScale //0.125/4.\n#define progressDVal progressCVal*bufferCUpScale\n\nfloat curveInterplation(in float val){\n    //return(exp(val/1.45) -1.);\n    return 1. - exp(-val/12.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}