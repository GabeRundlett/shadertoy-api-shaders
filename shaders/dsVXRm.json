{
    "Shader": {
        "info": {
            "date": "1680895060",
            "description": "Fork of https://www.shadertoy.com/view/DdcSz8\nThis acts as a test for a bigger 3d model (228 triangles in this case)",
            "flags": 32,
            "hasliked": 0,
            "id": "dsVXRm",
            "likes": 5,
            "name": "3D low poly rotating Amogus",
            "published": 3,
            "tags": [
                "3d",
                "rasterizer",
                "lowpoly",
                "sus",
                "amogus",
                "sussy"
            ],
            "usePreview": 0,
            "username": "GetItemFromBlock",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "// Fork of \"Space Ship with Anaglyph 3D\" by GetItemFromBlock. https://shadertoy.com/view/DdcSz8\n// GetItemFromBlock - 2023-04-07\n\n// Based on \"Rasterizer - Cube\" by iq. https://shadertoy.com/view/XdlGzn\n\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Update - 2023-05-30\n// Added reflection on the glass, not sure if this is an improvement...\n\n// Update - 2024-02-09\n// Added environment cubemap for background, to go with the glass reflection\n\nvec3 rasterize(in vec2 fragCoord)\n{\n    vec2 px = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n    vec3 cameraPos = texelFetch(iChannel1, ivec2(0,4), 0).rgb;\n    mat4 m = mat4(\n        texelFetch(iChannel1,ivec2(0,5),0),\n        texelFetch(iChannel1,ivec2(0,6),0),\n        texelFetch(iChannel1,ivec2(0,7),0),\n        texelFetch(iChannel1,ivec2(0,8),0)\n    );\n    //vec3 color = vec3(0.478,0.478,0.478);\n    vec3 color = texture(iChannel2, (m * vec4(normalize(vec3(px, 1.5)), 0.)).xyz).rgb;\n    // clear zbuffer\n    float mindist = -1000000.0;\n    \n    for (int i = 0; i < TRIANGLE_COUNT; i++)\n    {\n        vec4 bounds = texelFetch(iChannel0, ivec2(i, 3), 0);\n        if (px.x < bounds.x || px.x > bounds.y || px.y < bounds.z || px.y > bounds.w)\n        {\n            continue;\n        }\n        vec4 frb = texelFetch(iChannel0, ivec2(i, 1), 0);\n        vec4 frc = texelFetch(iChannel0, ivec2(i, 2), 0);\n        vec2 cp0 = frb.xy;\n        vec2 cp1 = frb.zw;\n        vec2 cp2 = frc.xy;\n\n        vec3 di = vec3( cross2d( cp1 - cp0, px - cp0 ), \n\t\t\t\t\t    cross2d( cp2 - cp1, px - cp1 ), \n\t\t\t\t\t    cross2d( cp0 - cp2, px - cp2 ) );\n                        \n        if( all(greaterThan(di,vec3(0.0))) )\n        {\n            vec4 fra = texelFetch(iChannel0, ivec2(i, 0), 0);\n            float w0 = fra.x;\n            float w1 = fra.y;\n            float w2 = fra.z;\n            \n            vec3 p0 = vectors[triangles[i].a] * w0;\n            vec3 p1 = vectors[triangles[i].b] * w1;\n            vec3 p2 = vectors[triangles[i].c] * w2;\n            \n            // calc barycentric coordinates\n            vec3 ba = di.yzx / (di.x+di.y+di.z);\n            \n            // barycentric interpolation of attributes and 1/z\n            float iz = ba.x*w0 + ba.y*w1 + ba.z*w2;\n\n            // recover interpolated attributes\n            float z = 1.0/iz;\n\n\t\t\t// depth (-1/z) buffer test\n\t\t\tif( z>mindist )\n\t\t\t{\n\t\t\t\tmindist = z;\n                \n                vec3 na = vectors[triangles[i].na] * w0;\n                vec3 nb = vectors[triangles[i].nb] * w1;\n                vec3 nc = vectors[triangles[i].nc] * w2;\n                vec3 n = ba.x*na + ba.y*nb + ba.z*nc;\n                \n\t\t\t\t// perform lighting/shading \n                vec3 worldPos = p0 * ba.x + p1 * ba.y + p2 * ba.z;\n                worldPos *= z;\n                n = normalize(n*z);\n                vec3 viewdir = normalize(cameraPos-worldPos);\n\t\t\t\tcolor = shader(-viewdir, n, vectors[triangles[i].col]);\n                float f = 0.95;\n                if (vectors[triangles[i].col].r < .5)\n                {\n                    f = 0.9;\n                }\n                color = mix(texture(iChannel2, reflect(viewdir, n)).rgb, color, f);\n\t\t\t}\n        }\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(rasterize(fragCoord), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    if (coord.x < 1)\n    {\n        if (coord.y < 9)\n        {\n            float rx = iMouse.z <= 0. ? .3 + .3 * sin(iTime * .55) : (iMouse.y/iResolution.y-.5)*-3.1415;\n            float ry = iMouse.z <= 0. ? .3*iTime : iMouse.x/iResolution.x*10.;\n            if (coord.y == 4)\n            {\n                fragColor = vec4(0,0,-8,0) * setRotation( rx, 0.,  0. ) * setRotation( 0., ry, 0. );\n            }\n            else if (coord.y < 4)\n            {\n                mat4 mv = setTranslation(0., 0., -8. ) * \n                   setRotation( rx, 0.,  0. ) * \n                   setRotation( 0., ry, 0. );\n                fragColor = mv[coord.y];\n            }\n            else\n            {\n                mat4 m = setRotation(rx, ry, 0.);\n                fragColor = m[coord.y - 5];\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TRIANGLE_COUNT 228\n\nstruct Triangle\n{\n    int a;\n    int na;\n    int b;\n    int nb;\n    int c;\n    int nc;\n    int col;\n};\n\nconst Triangle triangles[TRIANGLE_COUNT] = Triangle[TRIANGLE_COUNT](\n    Triangle(0, 1, 2, 3, 4, 5, 6),\n    Triangle(7, 8, 0, 1, 9, 10, 6),\n    Triangle(2, 3, 11, 12, 13, 14, 6),\n    Triangle(15, 16, 17, 18, 19, 20, 6),\n    Triangle(0, 1, 21, 22, 17, 18, 6),\n    Triangle(23, 24, 25, 26, 27, 28, 6),\n    Triangle(29, 30, 25, 26, 23, 24, 6),\n    Triangle(0, 1, 4, 5, 21, 22, 6),\n    Triangle(29, 30, 31, 32, 33, 34, 6),\n    Triangle(31, 32, 23, 24, 35, 36, 6),\n    Triangle(35, 36, 23, 24, 27, 28, 6),\n    Triangle(19, 20, 17, 18, 37, 38, 6),\n    Triangle(4, 5, 13, 14, 39, 40, 6),\n    Triangle(41, 42, 43, 44, 45, 46, 6),\n    Triangle(4, 5, 33, 34, 45, 46, 6),\n    Triangle(47, 48, 15, 16, 49, 50, 6),\n    Triangle(11, 12, 51, 52, 53, 54, 6),\n    Triangle(47, 48, 9, 10, 15, 16, 6),\n    Triangle(55, 56, 7, 8, 9, 10, 6),\n    Triangle(57, 58, 55, 56, 47, 48, 6),\n    Triangle(59, 60, 53, 54, 51, 52, 6),\n    Triangle(61, 62, 51, 52, 55, 56, 6),\n    Triangle(37, 38, 47, 48, 49, 50, 6),\n    Triangle(63, 64, 57, 58, 37, 38, 6),\n    Triangle(35, 36, 65, 66, 67, 68, 6),\n    Triangle(17, 18, 43, 44, 69, 70, 6),\n    Triangle(11, 12, 53, 54, 59, 60, 6),\n    Triangle(7, 8, 55, 56, 51, 52, 6),\n    Triangle(59, 60, 61, 62, 71, 72, 6),\n    Triangle(71, 72, 61, 62, 25, 26, 6),\n    Triangle(57, 58, 61, 62, 55, 56, 6),\n    Triangle(9, 10, 0, 1, 15, 16, 6),\n    Triangle(35, 36, 27, 28, 65, 66, 6),\n    Triangle(65, 66, 27, 28, 69, 70, 6),\n    Triangle(2, 3, 7, 8, 11, 12, 6),\n    Triangle(2, 3, 0, 1, 7, 8, 6),\n    Triangle(15, 16, 0, 1, 17, 18, 6),\n    Triangle(27, 28, 25, 26, 61, 62, 6),\n    Triangle(27, 28, 61, 62, 63, 64, 6),\n    Triangle(63, 64, 61, 62, 57, 58, 6),\n    Triangle(29, 30, 71, 72, 25, 26, 6),\n    Triangle(21, 22, 4, 5, 45, 46, 6),\n    Triangle(33, 34, 39, 40, 71, 72, 6),\n    Triangle(73, 74, 35, 36, 67, 68, 6),\n    Triangle(67, 68, 65, 66, 41, 42, 6),\n    Triangle(39, 40, 13, 14, 71, 72, 6),\n    Triangle(33, 34, 31, 32, 73, 74, 6),\n    Triangle(43, 44, 21, 22, 45, 46, 6),\n    Triangle(31, 32, 29, 30, 23, 24, 6),\n    Triangle(27, 28, 63, 64, 69, 70, 6),\n    Triangle(63, 64, 37, 38, 69, 70, 6),\n    Triangle(43, 44, 17, 18, 21, 22, 6),\n    Triangle(45, 46, 33, 34, 73, 74, 6),\n    Triangle(4, 5, 2, 3, 13, 14, 6),\n    Triangle(45, 46, 73, 74, 67, 68, 6),\n    Triangle(67, 68, 41, 42, 45, 46, 6),\n    Triangle(4, 5, 39, 40, 33, 34, 6),\n    Triangle(49, 50, 15, 16, 19, 20, 6),\n    Triangle(11, 12, 7, 8, 51, 52, 6),\n    Triangle(13, 14, 11, 12, 59, 60, 6),\n    Triangle(47, 48, 55, 56, 9, 10, 6),\n    Triangle(61, 62, 59, 60, 51, 52, 6),\n    Triangle(37, 38, 57, 58, 47, 48, 6),\n    Triangle(33, 34, 71, 72, 29, 30, 6),\n    Triangle(41, 42, 65, 66, 69, 70, 6),\n    Triangle(73, 74, 31, 32, 35, 36, 6),\n    Triangle(41, 42, 69, 70, 43, 44, 6),\n    Triangle(71, 72, 13, 14, 59, 60, 6),\n    Triangle(37, 38, 17, 18, 69, 70, 6),\n    Triangle(49, 50, 19, 20, 37, 38, 6),\n    Triangle(75, 76, 77, 78, 79, 80, 6),\n    Triangle(81, 82, 79, 80, 83, 84, 6),\n    Triangle(85, 86, 79, 80, 81, 82, 6),\n    Triangle(77, 78, 87, 88, 89, 90, 6),\n    Triangle(79, 80, 89, 90, 83, 84, 6),\n    Triangle(91, 92, 93, 94, 95, 96, 6),\n    Triangle(91, 92, 95, 96, 97, 98, 6),\n    Triangle(99, 100, 97, 98, 87, 88, 6),\n    Triangle(101, 102, 103, 104, 105, 106, 6),\n    Triangle(103, 104, 107, 108, 109, 110, 6),\n    Triangle(111, 112, 113, 114, 93, 94, 6),\n    Triangle(115, 116, 117, 118, 81, 82, 6),\n    Triangle(119, 120, 121, 122, 123, 124, 6),\n    Triangle(125, 126, 127, 128, 121, 122, 6),\n    Triangle(127, 128, 129, 130, 123, 124, 6),\n    Triangle(125, 126, 131, 132, 127, 128, 6),\n    Triangle(127, 128, 131, 132, 133, 134, 6),\n    Triangle(127, 128, 133, 134, 129, 130, 6),\n    Triangle(135, 136, 137, 138, 103, 104, 6),\n    Triangle(137, 138, 107, 108, 103, 104, 6),\n    Triangle(137, 138, 85, 86, 117, 118, 6),\n    Triangle(99, 100, 75, 76, 139, 140, 6),\n    Triangle(131, 132, 141, 142, 133, 134, 6),\n    Triangle(133, 134, 143, 144, 129, 130, 6),\n    Triangle(145, 146, 129, 130, 143, 144, 6),\n    Triangle(141, 142, 115, 116, 143, 144, 6),\n    Triangle(143, 144, 81, 82, 145, 146, 6),\n    Triangle(147, 148, 113, 114, 149, 150, 6),\n    Triangle(113, 114, 101, 102, 105, 106, 6),\n    Triangle(105, 106, 109, 110, 141, 142, 6),\n    Triangle(141, 142, 131, 132, 149, 150, 6),\n    Triangle(125, 126, 149, 150, 131, 132, 6),\n    Triangle(119, 120, 97, 98, 95, 96, 6),\n    Triangle(95, 96, 147, 148, 119, 120, 6),\n    Triangle(151, 152, 89, 90, 123, 124, 6),\n    Triangle(129, 130, 83, 84, 151, 152, 6),\n    Triangle(87, 88, 119, 120, 123, 124, 6),\n    Triangle(85, 86, 75, 76, 79, 80, 6),\n    Triangle(77, 78, 75, 76, 99, 100, 6),\n    Triangle(77, 78, 99, 100, 87, 88, 6),\n    Triangle(79, 80, 77, 78, 89, 90, 6),\n    Triangle(99, 100, 139, 140, 91, 92, 6),\n    Triangle(91, 92, 139, 140, 153, 154, 6),\n    Triangle(139, 140, 135, 136, 153, 154, 6),\n    Triangle(153, 154, 111, 112, 93, 94, 6),\n    Triangle(91, 92, 153, 154, 93, 94, 6),\n    Triangle(99, 100, 91, 92, 97, 98, 6),\n    Triangle(111, 112, 103, 104, 101, 102, 6),\n    Triangle(111, 112, 135, 136, 103, 104, 6),\n    Triangle(105, 106, 103, 104, 109, 110, 6),\n    Triangle(153, 154, 135, 136, 111, 112, 6),\n    Triangle(113, 114, 111, 112, 101, 102, 6),\n    Triangle(109, 110, 117, 118, 115, 116, 6),\n    Triangle(109, 110, 107, 108, 117, 118, 6),\n    Triangle(81, 82, 117, 118, 85, 86, 6),\n    Triangle(147, 148, 125, 126, 121, 122, 6),\n    Triangle(121, 122, 127, 128, 123, 124, 6),\n    Triangle(123, 124, 129, 130, 151, 152, 6),\n    Triangle(119, 120, 147, 148, 121, 122, 6),\n    Triangle(135, 136, 139, 140, 137, 138, 6),\n    Triangle(139, 140, 75, 76, 137, 138, 6),\n    Triangle(137, 138, 117, 118, 107, 108, 6),\n    Triangle(137, 138, 75, 76, 85, 86, 6),\n    Triangle(133, 134, 141, 142, 143, 144, 6),\n    Triangle(141, 142, 109, 110, 115, 116, 6),\n    Triangle(143, 144, 115, 116, 81, 82, 6),\n    Triangle(147, 148, 93, 94, 113, 114, 6),\n    Triangle(113, 114, 105, 106, 149, 150, 6),\n    Triangle(105, 106, 141, 142, 149, 150, 6),\n    Triangle(147, 148, 149, 150, 125, 126, 6),\n    Triangle(95, 96, 93, 94, 147, 148, 6),\n    Triangle(87, 88, 97, 98, 119, 120, 6),\n    Triangle(151, 152, 83, 84, 89, 90, 6),\n    Triangle(89, 90, 87, 88, 123, 124, 6),\n    Triangle(129, 130, 145, 146, 83, 84, 6),\n    Triangle(145, 146, 81, 82, 83, 84, 6),\n    Triangle(155, 156, 157, 158, 159, 160, 6),\n    Triangle(161, 162, 163, 164, 157, 158, 6),\n    Triangle(165, 166, 167, 168, 163, 164, 6),\n    Triangle(167, 168, 169, 170, 171, 172, 6),\n    Triangle(171, 172, 173, 174, 175, 176, 6),\n    Triangle(175, 176, 177, 178, 179, 180, 6),\n    Triangle(179, 180, 181, 182, 159, 160, 6),\n    Triangle(179, 180, 159, 160, 163, 164, 6),\n    Triangle(175, 176, 179, 180, 163, 164, 6),\n    Triangle(183, 156, 184, 185, 186, 187, 6),\n    Triangle(188, 162, 189, 190, 184, 185, 6),\n    Triangle(191, 192, 193, 194, 189, 190, 6),\n    Triangle(193, 194, 195, 196, 197, 198, 6),\n    Triangle(197, 198, 199, 200, 201, 202, 6),\n    Triangle(201, 202, 203, 204, 205, 206, 6),\n    Triangle(205, 206, 207, 178, 208, 209, 6),\n    Triangle(208, 209, 210, 182, 186, 187, 6),\n    Triangle(184, 185, 208, 209, 186, 187, 6),\n    Triangle(201, 202, 205, 206, 197, 198, 6),\n    Triangle(189, 190, 208, 209, 184, 185, 6),\n    Triangle(189, 190, 193, 194, 208, 209, 6),\n    Triangle(155, 156, 161, 162, 157, 158, 6),\n    Triangle(161, 162, 165, 166, 163, 164, 6),\n    Triangle(165, 166, 211, 212, 167, 168, 6),\n    Triangle(211, 212, 169, 170, 167, 168, 6),\n    Triangle(171, 172, 169, 170, 213, 214, 6),\n    Triangle(171, 172, 213, 214, 173, 174, 6),\n    Triangle(175, 176, 173, 174, 177, 178, 6),\n    Triangle(179, 180, 177, 178, 181, 182, 6),\n    Triangle(181, 182, 155, 156, 159, 160, 6),\n    Triangle(171, 172, 175, 176, 163, 164, 6),\n    Triangle(167, 168, 171, 172, 163, 164, 6),\n    Triangle(159, 160, 157, 158, 163, 164, 6),\n    Triangle(183, 156, 188, 162, 184, 185, 6),\n    Triangle(188, 162, 191, 192, 189, 190, 6),\n    Triangle(191, 192, 215, 212, 193, 194, 6),\n    Triangle(215, 212, 195, 196, 193, 194, 6),\n    Triangle(197, 198, 195, 196, 199, 200, 6),\n    Triangle(201, 202, 199, 200, 203, 204, 6),\n    Triangle(205, 206, 203, 204, 207, 178, 6),\n    Triangle(208, 209, 207, 178, 210, 182, 6),\n    Triangle(210, 182, 183, 156, 186, 187, 6),\n    Triangle(197, 198, 205, 206, 208, 209, 6),\n    Triangle(193, 194, 197, 198, 208, 209, 6),\n    Triangle(216, 217, 218, 219, 220, 221, 222),\n    Triangle(223, 224, 218, 219, 216, 217, 222),\n    Triangle(218, 219, 225, 226, 220, 221, 222),\n    Triangle(218, 219, 227, 228, 229, 230, 222),\n    Triangle(231, 232, 233, 234, 235, 236, 222),\n    Triangle(231, 232, 237, 238, 233, 234, 222),\n    Triangle(229, 230, 235, 236, 225, 226, 222),\n    Triangle(239, 240, 223, 224, 216, 217, 222),\n    Triangle(216, 217, 241, 242, 243, 244, 222),\n    Triangle(235, 236, 220, 221, 225, 226, 222),\n    Triangle(245, 246, 247, 248, 239, 240, 222),\n    Triangle(239, 240, 249, 250, 245, 246, 222),\n    Triangle(233, 234, 237, 238, 251, 252, 222),\n    Triangle(251, 252, 249, 250, 253, 254, 222),\n    Triangle(249, 250, 239, 240, 253, 254, 222),\n    Triangle(253, 254, 239, 240, 216, 217, 222),\n    Triangle(227, 228, 231, 232, 229, 230, 222),\n    Triangle(223, 224, 247, 248, 218, 219, 222),\n    Triangle(218, 219, 229, 230, 225, 226, 222),\n    Triangle(218, 219, 247, 248, 227, 228, 222),\n    Triangle(241, 242, 216, 217, 220, 221, 222),\n    Triangle(229, 230, 231, 232, 235, 236, 222),\n    Triangle(233, 234, 251, 252, 255, 256, 222),\n    Triangle(255, 256, 253, 254, 243, 244, 222),\n    Triangle(255, 256, 251, 252, 253, 254, 222),\n    Triangle(235, 236, 233, 234, 255, 256, 222),\n    Triangle(235, 236, 255, 256, 257, 258, 222),\n    Triangle(255, 256, 243, 244, 257, 258, 222),\n    Triangle(235, 236, 257, 258, 220, 221, 222),\n    Triangle(227, 228, 247, 248, 245, 246, 222),\n    Triangle(237, 238, 231, 232, 227, 228, 222),\n    Triangle(247, 248, 223, 224, 239, 240, 222),\n    Triangle(251, 252, 237, 238, 245, 246, 222),\n    Triangle(237, 238, 227, 228, 245, 246, 222),\n    Triangle(251, 252, 245, 246, 249, 250, 222),\n    Triangle(220, 221, 257, 258, 241, 242, 222),\n    Triangle(241, 242, 257, 258, 243, 244, 222),\n    Triangle(243, 244, 253, 254, 216, 217, 222)\n);\n\nconst vec3 vectors[] = vec3[](\n    vec3(-1.467723, 1.402789, 2.793147),\n    vec3(-0.9203  , 0.2487  , 0.3018  ),\n    vec3(-1.390775, 1.580521, 1.996575),\n    vec3(-0.7356  , 0.5517  ,-0.393   ),\n    vec3(-1.411498, 1.156415, 1.847106),\n    vec3(-0.8643  , 0.106   ,-0.4917  ),\n    vec3( 0.603827, 0.001314, 0.      ),\n    vec3(-1.36174 , 1.647689, 2.73756 ),\n    vec3(-0.5053  , 0.7799  , 0.3694  ),\n    vec3(-1.300665, 1.395768, 2.978765),\n    vec3(-0.3311  , 0.433   , 0.8384  ),\n    vec3(-1.28026 , 1.726427, 2.190668),\n    vec3(-0.3523  , 0.9208  ,-0.1676  ),\n    vec3(-1.268954, 1.508682, 1.840646),\n    vec3(-0.2984  , 0.5351  ,-0.7904  ),\n    vec3(-1.357872, 0.951839, 3.078538),\n    vec3(-0.5358  , 0.0964  , 0.8388  ),\n    vec3(-1.40081 ,-1.367545, 3.047107),\n    vec3(-0.6128  ,-0.3116  , 0.7262  ),\n    vec3(-1.295568,-1.061999, 3.118558),\n    vec3(-0.2574  ,-0.0679  , 0.9639  ),\n    vec3(-1.480515,-1.104696, 2.663844),\n    vec3(-0.9969  ,-0.0574  , 0.0541  ),\n    vec3( 1.352643,-1.110194, 1.804947),\n    vec3( 0.7963  ,-0.1519  ,-0.5856  ),\n    vec3( 1.365353, 1.0269  , 1.826562),\n    vec3( 0.869   , 0.0625  ,-0.4908  ),\n    vec3( 1.407727,-1.352349, 2.164311),\n    vec3( 0.9684  ,-0.2158  ,-0.1254  ),\n    vec3( 1.212074,-0.951105, 1.698061),\n    vec3( 0.2902  ,-0.0916  ,-0.9526  ),\n    vec3( 1.222955,-1.378182, 1.814199),\n    vec3( 0.3432  ,-0.5075  ,-0.7904  ),\n    vec3(-1.300193,-1.096719, 1.706141),\n    vec3(-0.4828  ,-0.1866  ,-0.8556  ),\n    vec3( 1.284787,-1.566153, 2.039392),\n    vec3( 0.5078  ,-0.7497  ,-0.4243  ),\n    vec3( 1.307832,-1.32026 , 3.060651),\n    vec3( 0.5811  ,-0.3151  , 0.7504  ),\n    vec3(-1.260415, 1.061015, 1.717737),\n    vec3(-0.3195  , 0.1121  ,-0.9409  ),\n    vec3(-1.32314 ,-1.659542, 2.685035),\n    vec3(-0.4541  ,-0.8825  , 0.1224  ),\n    vec3(-1.396928,-1.548611, 2.917764),\n    vec3(-0.6126  ,-0.6372  , 0.4677  ),\n    vec3(-1.428629,-1.405746, 1.99554 ),\n    vec3(-0.8667  ,-0.356   ,-0.3495  ),\n    vec3( 1.206166, 0.967467, 3.084249),\n    vec3( 0.3064  , 0.1041  , 0.9462  ),\n    vec3( 1.200113,-1.03675 , 3.119145),\n    vec3( 0.2298  ,-0.0535  , 0.9718  ),\n    vec3( 1.262524, 1.688401, 2.634125),\n    vec3( 0.4992  , 0.8075  , 0.3143  ),\n    vec3( 1.139729, 1.73404 , 2.328427),\n    vec3( 0.187   , 0.9814  ,-0.0435  ),\n    vec3( 1.289506, 1.440924, 2.956904),\n    vec3( 0.5483  , 0.4791  , 0.6855  ),\n    vec3( 1.365445, 1.065426, 2.951288),\n    vec3( 0.8815  , 0.0792  , 0.4656  ),\n    vec3( 1.250601, 1.651799, 1.990116),\n    vec3( 0.4023  , 0.7373  ,-0.5427  ),\n    vec3( 1.401426, 1.569483, 2.154963),\n    vec3( 0.877   , 0.454   ,-0.1572  ),\n    vec3( 1.401238,-1.12958 , 2.765244),\n    vec3( 0.9869  ,-0.067   , 0.147   ),\n    vec3( 1.291773,-1.66797 , 2.426756),\n    vec3( 0.5403  ,-0.8403  ,-0.044   ),\n    vec3(-1.302087,-1.646724, 2.252542),\n    vec3(-0.4463  ,-0.8738  ,-0.1928  ),\n    vec3( 1.301057,-1.609408, 2.844538),\n    vec3( 0.556   ,-0.7175  , 0.4195  ),\n    vec3( 1.227662, 1.19807 , 1.719471),\n    vec3( 0.3854  , 0.2605  ,-0.8852  ),\n    vec3(-1.285415,-1.493353, 1.922389),\n    vec3(-0.3093  ,-0.6951  ,-0.649   ),\n    vec3(-1.217086, 2.938846,-0.176011),\n    vec3(-0.6477  , 0.7552  ,-0.101   ),\n    vec3(-1.622429, 1.862037,-0.606663),\n    vec3(-0.9235  , 0.2141  ,-0.3182  ),\n    vec3(-1.68248 , 1.841972, 0.695523),\n    vec3(-0.9332  , 0.2348  , 0.2721  ),\n    vec3(-1.068662, 1.82449 , 1.552062),\n    vec3(-0.5704  , 0.2287  , 0.7889  ),\n    vec3(-1.689393,-0.869488, 1.075233),\n    vec3(-0.882   ,-0.144   , 0.4486  ),\n    vec3(-1.152853, 2.722428, 0.967582),\n    vec3(-0.6137  , 0.6536  , 0.4429  ),\n    vec3(-1.415963,-0.776979,-1.260082),\n    vec3(-0.7346  ,-0.1299  ,-0.666   ),\n    vec3(-1.93473 ,-0.922571,-0.08375 ),\n    vec3(-0.9794  ,-0.1716  ,-0.1068  ),\n    vec3(-0.175346, 1.971682,-1.629237),\n    vec3(-0.0857  , 0.2119  ,-0.9735  ),\n    vec3( 1.310212,-0.764196,-1.391554),\n    vec3( 0.6317  ,-0.1223  ,-0.7655  ),\n    vec3( 0.03659 ,-1.247743,-1.767346),\n    vec3( 0.034   ,-0.3467  ,-0.9374  ),\n    vec3(-0.709323,-0.873116,-1.673044),\n    vec3(-0.3481  ,-0.1378  ,-0.9273  ),\n    vec3(-1.142164, 2.421096,-1.127311),\n    vec3(-0.6135  , 0.4187  ,-0.6696  ),\n    vec3( 1.785885, 1.874228, 0.104558),\n    vec3( 0.9778  , 0.1951  , 0.0765  ),\n    vec3( 1.502465, 2.705021, 0.341846),\n    vec3( 0.7915  , 0.5977  , 0.1279  ),\n    vec3( 1.832933,-0.525335, 0.844863),\n    vec3( 0.9321  ,-0.069   , 0.3555  ),\n    vec3( 0.924295, 2.905094, 1.039198),\n    vec3( 0.4459  , 0.7508  , 0.4873  ),\n    vec3( 1.090202, 2.001804, 1.543903),\n    vec3( 0.5834  , 0.2657  , 0.7675  ),\n    vec3( 1.49786 , 2.053238,-0.864546),\n    vec3( 0.8192  , 0.2818  ,-0.4996  ),\n    vec3( 1.868159,-0.883777,-0.38379 ),\n    vec3( 0.9457  ,-0.1969  ,-0.2588  ),\n    vec3(-0.145196, 1.793973, 1.891736),\n    vec3(-0.0473  , 0.2204  , 0.9743  ),\n    vec3(-0.164957, 2.916597, 1.374194),\n    vec3(-0.0938  , 0.736   , 0.6704  ),\n    vec3(-1.001877,-1.804617,-1.106118),\n    vec3(-0.435   ,-0.6612  ,-0.6112  ),\n    vec3(-0.226168,-2.217284,-0.586741),\n    vec3(-0.05    ,-0.9624  ,-0.2671  ),\n    vec3(-1.453075,-1.949871,-0.244972),\n    vec3(-0.6469  ,-0.7469  ,-0.1538  ),\n    vec3( 1.180051,-2.03489 ,-0.146759),\n    vec3( 0.5018  ,-0.8558  ,-0.1257  ),\n    vec3( 0.247903,-2.215911, 0.783412),\n    vec3( 0.0869  ,-0.9714  , 0.2208  ),\n    vec3(-0.980138,-1.907405, 1.265499),\n    vec3(-0.3976  ,-0.7508  , 0.5275  ),\n    vec3( 1.117519,-1.737701, 1.234505),\n    vec3( 0.548   ,-0.653   , 0.5227  ),\n    vec3( 0.186035,-1.763462, 1.680504),\n    vec3( 0.1068  ,-0.6502  , 0.7522  ),\n    vec3( 0.859297, 3.033141,-0.69366 ),\n    vec3( 0.4295  , 0.8218  ,-0.3743  ),\n    vec3(-0.000116, 3.341052, 0.069966),\n    vec3(-0.0135  , 0.9999  , 0.0098  ),\n    vec3(-0.364997, 2.897427,-1.150696),\n    vec3(-0.1594  , 0.7449  ,-0.6479  ),\n    vec3( 1.204457,-0.873788, 1.658136),\n    vec3( 0.5741  ,-0.1682  , 0.8013  ),\n    vec3(-0.225264,-1.033825, 2.026991),\n    vec3(-0.0771  ,-0.2006  , 0.9766  ),\n    vec3(-1.187404,-0.920757, 1.666351),\n    vec3(-0.5754  ,-0.1717  , 0.7996  ),\n    vec3( 0.935133,-1.767241,-1.217108),\n    vec3( 0.4317  ,-0.6673  ,-0.6069  ),\n    vec3( 1.708557,-1.59444 , 0.34817 ),\n    vec3( 0.8348  ,-0.5396  , 0.1093  ),\n    vec3(-1.434041,-1.800185, 0.822176),\n    vec3(-0.7014  ,-0.6422  , 0.3094  ),\n    vec3( 0.831202, 2.356372,-1.365111),\n    vec3( 0.3996  , 0.3879  ,-0.8306  ),\n    vec3(-0.93491 ,-1.618467,-0.451282),\n    vec3(-0.1377  ,-0.1789  ,-0.9742  ),\n    vec3(-0.530737,-2.889741,-0.133112),\n    vec3( 0.3739  ,-0.7006  ,-0.6077  ),\n    vec3(-0.999855,-2.889733,-0.190104),\n    vec3(-0.2628  ,-0.6993  ,-0.6648  ),\n    vec3(-0.367151,-1.618192,-0.329993),\n    vec3( 0.5581  ,-0.1936  ,-0.8069  ),\n    vec3(-0.313601,-2.889274, 0.184539),\n    vec3( 0.6963  ,-0.7026  ,-0.1466  ),\n    vec3(-0.052068,-1.617912, 0.155811),\n    vec3( 0.9554  ,-0.2095  ,-0.2082  ),\n    vec3(-0.386844,-2.889226, 0.567175),\n    vec3( 0.5652  ,-0.7124  , 0.416   ),\n    vec3(-0.378584,-1.616668, 0.918831),\n    vec3( 0.52    ,-0.185   , 0.8339  ),\n    vec3(-0.813541,-2.889732, 0.804367),\n    vec3(-0.0313  ,-0.6939  , 0.7193  ),\n    vec3(-1.421094,-1.618265, 0.72398 ),\n    vec3(-0.8018  ,-0.2014  , 0.5626  ),\n    vec3(-1.226044,-2.889809, 0.562201),\n    vec3(-0.586   ,-0.6968  , 0.4137  ),\n    vec3(-1.542358,-1.618513, 0.15584 ),\n    vec3(-0.9715  ,-0.1871  ,-0.1454  ),\n    vec3(-1.298914,-2.889162, 0.186281),\n    vec3(-0.6986  ,-0.697   ,-0.1615  ),\n    vec3(-1.325592,-1.619295,-0.234516),\n    vec3(-0.7009  ,-0.1768  ,-0.691   ),\n    vec3( 0.58163 ,-1.618467,-0.451283),\n    vec3( 0.985781,-2.889972,-0.13307 ),\n    vec3( 0.4927  ,-0.6176  ,-0.6131  ),\n    vec3( 0.516732,-2.890274,-0.190001),\n    vec3(-0.2102  ,-0.7563  ,-0.6196  ),\n    vec3( 1.149391,-1.618192,-0.329991),\n    vec3( 1.202925,-2.889342, 0.184543),\n    vec3( 0.6914  ,-0.7222  , 0.0191  ),\n    vec3( 1.464474,-1.617913, 0.155839),\n    vec3( 0.9554  ,-0.2095  ,-0.2081  ),\n    vec3( 1.129697,-2.889226, 0.567173),\n    vec3( 0.5929  ,-0.7124  , 0.3755  ),\n    vec3( 1.137954,-1.616668, 0.918831),\n    vec3( 0.5166  ,-0.1866  , 0.8357  ),\n    vec3( 0.901738,-2.889104, 0.742969),\n    vec3( 0.2527  ,-0.7221  , 0.6439  ),\n    vec3( 0.581628,-1.617971, 1.039093),\n    vec3(-0.1784  ,-0.1914  , 0.9652  ),\n    vec3( 0.608176,-2.889617, 0.77928 ),\n    vec3(-0.1992  ,-0.8297  , 0.5215  ),\n    vec3( 0.095441,-1.618265, 0.723978),\n    vec3(-0.8072  ,-0.1916  , 0.5583  ),\n    vec3( 0.290496,-2.889809, 0.562202),\n    vec3(-0.5958  ,-0.7021  , 0.3899  ),\n    vec3(-0.02582 ,-1.618513, 0.155844),\n    vec3( 0.21772 ,-2.889588, 0.186276),\n    vec3(-0.6964  ,-0.7002  ,-0.1571  ),\n    vec3( 0.190945,-1.619295,-0.234516),\n    vec3(-0.106058,-1.618755, 0.580282),\n    vec3( 0.9054  ,-0.2039  , 0.3724  ),\n    vec3(-0.934912,-1.617971, 1.039093),\n    vec3(-0.1891  ,-0.1956  , 0.9623  ),\n    vec3( 1.410479,-1.618755, 0.580282),\n    vec3(-0.960804, 1.288955,-0.684665),\n    vec3(-0.5033  ,-0.2777  , 0.8182  ),\n    vec3(-1.358191, 1.751234,-1.389909),\n    vec3(-0.9951  , 0.0858  ,-0.0501  ),\n    vec3(-1.079545, 0.825385,-1.393688),\n    vec3(-0.648   ,-0.7599  ,-0.0525  ),\n    vec3( 0.012758, 0.233458, 0.8     ),\n    vec3(-1.062384, 1.96787 ,-0.8331  ),\n    vec3(-0.6389  , 0.3591  , 0.6804  ),\n    vec3(-0.887294, 0.954699,-1.876111),\n    vec3(-0.3988  ,-0.666   ,-0.6304  ),\n    vec3(-0.916477, 2.242859,-1.838715),\n    vec3(-0.4541  , 0.6825  ,-0.5727  ),\n    vec3(-0.97117 , 1.454208,-2.086228),\n    vec3(-0.5252  ,-0.116   ,-0.843   ),\n    vec3( 0.106831, 1.920776,-2.159937),\n    vec3( 0.0235  , 0.2341  ,-0.9719  ),\n    vec3( 1.307449, 1.70823 ,-1.950975),\n    vec3( 0.6963  , 0.1068  ,-0.7097  ),\n    vec3( 1.015787, 0.917776,-1.84717 ),\n    vec3( 0.4196  ,-0.688   ,-0.5921  ),\n    vec3( 0.844611, 2.298428,-1.840639),\n    vec3( 0.2996  , 0.7721  ,-0.5605  ),\n    vec3(-0.529151, 2.049039,-0.659852),\n    vec3(-0.1397  , 0.4637  , 0.8749  ),\n    vec3(-0.864466, 0.862488,-0.987976),\n    vec3(-0.3271  ,-0.7945  , 0.5116  ),\n    vec3( 1.044633, 1.046928,-0.817629),\n    vec3( 0.455   ,-0.5831  , 0.673   ),\n    vec3( 0.045353, 2.489471,-1.193927),\n    vec3(-0.0083  , 0.9822  , 0.1874  ),\n    vec3(-1.067586, 2.288848,-1.218919),\n    vec3(-0.5835  , 0.7928  , 0.176   ),\n    vec3( 0.793809, 2.103578,-0.737679),\n    vec3( 0.2323  , 0.5827  , 0.7788  ),\n    vec3( 1.2354  , 2.263201,-1.239253),\n    vec3( 0.6771  , 0.7184  , 0.1593  ),\n    vec3( 1.127047, 1.606074,-0.651544),\n    vec3( 0.5295  , 0.0297  , 0.8478  ),\n    vec3( 1.484032, 1.411086,-1.31485 ),\n    vec3( 0.9762  ,-0.2037  , 0.0747  ),\n    vec3( 0.858789, 0.754818,-1.180439),\n    vec3( 0.3027  ,-0.9355  , 0.1825  )\n);\n\nfloat cross2d( in vec2 a, in vec2 b )\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nconst vec3 lightDir = normalize(vec3(.5, 1, -1));\nconst vec3 lightCol = vec3(.3, .3, .3);\nconst float smoothness = 256.;\n\nvec3 shader(vec3 view, vec3 normal, vec3 color)\n{\n    float deltaA = dot(lightDir,normal);\n    if (deltaA < 0.) deltaA = 0.;\n    vec3 halfV = normalize(lightDir + view);\n    float deltaB = pow(max(dot(normal,halfV), 0.0), smoothness);\n    return color + lightCol * deltaA + deltaB;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 processTriangle(ivec2 coord)\n{\n\tmat4 mvp = mat4(\n        texelFetch(iChannel0,ivec2(0,0),0),\n        texelFetch(iChannel0,ivec2(0,1),0),\n        texelFetch(iChannel0,ivec2(0,2),0),\n        texelFetch(iChannel0,ivec2(0,3),0)\n    );\n    vec3 ep0 = (mvp * vec4(vectors[triangles[coord.x].a],1.0)).xyz;\n    vec3 ep1 = (mvp * vec4(vectors[triangles[coord.x].b],1.0)).xyz;\n    vec3 ep2 = (mvp * vec4(vectors[triangles[coord.x].c],1.0)).xyz;\n\n    // transform to clip space\n    float w0 = 1.0/ep0.z;\n    float w1 = 1.0/ep1.z;\n    float w2 = 1.0/ep2.z;\n\n    if (coord.y == 0)\n    {\n        return vec4(w0,w1,w2,0);\n    }\n\n    vec2 cp0 = 2.0*ep0.xy * -w0;\n    vec2 cp1 = 2.0*ep1.xy * -w1;\n    vec2 cp2 = 2.0*ep2.xy * -w2;\n    if (coord.y == 1)\n    {\n        return vec4(cp0, cp1);\n    }\n    else if (coord.y == 2)\n    {\n        return vec4(cp2, 0, 0);\n    }\n    float minY = min(min(cp0.y, cp1.y), cp2.y);\n    float maxY = max(max(cp0.y, cp1.y), cp2.y);\n    float minX = min(min(cp0.x, cp1.x), cp2.x);\n    float maxX = max(max(cp0.x, cp1.x), cp2.x);\n    return vec4(minX, maxX, minY, maxY);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    if (coord.x < TRIANGLE_COUNT)\n    {\n        if (coord.y < 4)\n        {\n            fragColor = processTriangle(coord);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}