{
    "Shader": {
        "info": {
            "date": "1484939264",
            "description": "Trying to get into the somewhat more interesting fractals.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtGSzK",
            "likes": 3,
            "name": "fractal test 3876568",
            "published": 3,
            "tags": [
                "fractal",
                "test"
            ],
            "usePreview": 0,
            "username": "Jespertheend",
            "viewed": 835
        },
        "renderpass": [
            {
                "code": "#define FRACTAL_ITERATIONS 14\n\nfloat maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nvec2 map( vec3 p )\n{\n    p += 3.;\n    p = mod(p, 6.);\n    p -= 3.;\n    \n    \n    float rot = iTime*0.1;\n    mat2 m1 = mat2(sin(rot), cos(rot), cos(rot), -sin(rot));\n    float rot2 = iTime*0.085;\n    mat2 m2 = mat2(sin(rot2), cos(rot2), cos(rot2), -sin(rot2));\n    vec3 q = p;\n    float d = 5e10;\n    float s = 1.;\n    int hitIter = 0;\n    for( int i=0; i<FRACTAL_ITERATIONS; i++ )\n    {\n        float sph = length(p) - 1.;\n        //sph = sdBox(p, vec3(0.5));\n        sph /= s;\n        \n        p = abs(p);\n        \n        p += normalize(vec3(-1.,-1.,-1.));\n        float m = 1.6;\n        p *= m;\n        s *= m;\n        p.xy = p.xy*m1;\n        p.yz = p.yz*m2;\n        \n        if(sph < d){\n            d = sph;\n            hitIter = i;\n        }\n   }\n\n   return vec2(d,float(hitIter));\n}\n\n#define AO_SAMPLES 4.\n#define AO_RANGE 50.\n#define saturate(x) clamp(x, 0., 1.)\nfloat calculateAO(vec3 p, vec3 n) {\n\n    float r = 0., w = 1., d;\n\n    for (float i = 1.; i <= AO_SAMPLES; i++){\n        d = i / AO_SAMPLES / AO_RANGE;\n        r += w * (d - map(p + n * d).x);\n        w *= .5;\n    }\n\n    return 1.-saturate(r * AO_RANGE);\n}\n\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.003, 0);\n    return normalize(vec3(\n        map(p + e.xyy).x - map(p - e.xyy).x,\n        map(p + e.yxy).x - map(p - e.yxy).x,\n        map(p + e.yyx).x - map(p - e.yyx).x\n\t));\n}\n\nvec2 raymarch(in vec3 ro, in vec3 rd){\n    float t = 0.;\n    for(int i=0; i<100; i++){\n        vec3 p = ro + t * rd;\n        vec2 res = map(p);\n        if(res.x < 0.001*t  || t > 100.){\n            return vec2(t, res.y);\n        }\n        t += res.x;\n    }\n    return vec2(t, 0.);\n}\n\nvec3 render(in vec3 ro, in vec3 rd){\n    vec2 res = raymarch(ro,rd);\n    float z = res.x;\n    float iters = res.y / float(FRACTAL_ITERATIONS);\n    iters = pow(iters, 0.5);\n    vec3 iterColor = mix(vec3(.3,.5,.9), vec3(.8,.4,.1), iters);\n    vec3 pos = ro + rd * z;\n    vec3 nor = getNormal(pos);\n    vec3 l = normalize(vec3(1.,0.4,0.8));\n    float b = dot(l, nor);\n    vec3 col = vec3(b*0.5+0.5);\n    col = iterColor * col;\n    \n    float ao = calculateAO(pos, nor);\n    col = col * ao;\n    \n    vec3 bgCol = vec3(0.5, 0.1, 0.);\n    float fogAmount = 1. - exp(-z*0.3);\n    col = mix(col, bgCol, clamp(fogAmount, 0., 1.));\n    \n    return col;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float camDist = 3.5;\n    vec2 m = iMouse.xy/iResolution.xy;\n    m -= 0.5;\n    m *= 5.;\n    if(iMouse.x <= 0. && iMouse.y <= 0.){\n        m = vec2(iTime*0.2,-1.);\n    }\n    vec3 camPos = vec3(cos(m.x)*camDist,0.,sin(m.x)*camDist);\n    camPos.y = -m.y;\n    \n    mat3 camMat = calcLookAtMatrix(camPos, vec3(0.), 0.);\n    \n    vec3 ro = camPos;\n    vec3 rd = normalize(camMat * vec3(uv, 1.5));\n    \n    vec3 col = render(ro, rd);\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}