{
    "Shader": {
        "info": {
            "date": "1614202629",
            "description": "The universe is no longer round. It has a flower shape but it changes with the sound in space. ",
            "flags": 64,
            "hasliked": 0,
            "id": "wtVfWR",
            "likes": 0,
            "name": "Dance Till Your Toes Off",
            "published": 3,
            "tags": [
                "noise",
                "time",
                "sin",
                "color",
                "circle",
                "rotate",
                "cos",
                "galaxy",
                "distance",
                "radius",
                "pancake",
                "shadershop"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "// 2D Noise exercise with distance field \n\n\n#define PI 3.14159265359\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat circle (in vec2 _st, in float _radius, in float _size){\n    vec2 dist = _st-vec2(0.5);\n    return smoothstep(_radius-_radius*_size,_radius+_radius*_size,dot(dist,dist)*4.0) ;       \n}\n\n//shadershop function generation:http://tobyschachman.com/Shadershop/editor/\nfloat extension(in float x){\n        return ((abs( x/3. )) + floor( x / 3. / 4.22 ) + ((x / 3.)) + (fract( x / 3. ))) * 0.35;\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 st = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec3 color=vec3(0.0);\n    float t = iTime*0.2;\n    float fft = texelFetch(iChannel1, ivec2(0,0),0).x;\n\n    // assign color value to the vec3 color with the extension function\n    // smoothstep to create blur effect of the middle circle \n    float colorVal = circle(fft/st/5.+.5,extension(abs(tan(iTime))),random(vec2(100.)*smoothstep(0.,PI,tan(iTime))));\n\n    st*=rotate2d(t);\n\n    colorVal *= circle(fft/st/5.+.5,extension(abs(tan(iTime))),random(vec2(100.)*smoothstep(0.,PI,tan(iTime))));\n   \n    st*=rotate2d(t+PI*2.)/2.;\n\n    colorVal /= circle(fft/st/5.+.5,extension(abs(tan(iTime))),random(vec2(100.)*smoothstep(0.,PI,tan(iTime))));\n  \n    \n    // find the center of the shortest side \n    st-=st.x*2./sin(t);\n    st = 1.-rotate2d( sin(cos(iTime))*PI*(abs(cos(iTime))/1e2+1.)) * st/abs(sin(iTime));\n    vec2 pos = vec2(st*0.756*abs(tan(iTime))*10.);\n        st+=st.x*2./sin(t);\nst+=min(st.x/2.,st.y/2.);\n\n\n    st-=st.y/sin(t);\n    st *= fft/rotate2d( PI*(fract(iTime))/1e3+fract(sin(t))) * st/(0.1+abs(sin(iTime)));\n    st *= rotate2d( PI*(cos(iTime))/1e2+1.) * st/3.280;\n    // Use the noise function with distance field \n    float n = noise(pos)*distance(st-vec2(.5)*abs(tan(t)),pos);\n    st+=st.y/sin(t);\n   //st+=min(st.y/2.,st.x/2.);\n    \n    // color manipulation based on time and shapes \n    color=texture(iChannel0,st*20.).rgb;\n\n    color+=vec3(n+fft,colorVal*abs(cos(t)),random(st-vec2(t/20.)));\n    color*=vec3(st.x/st.y*fft,colorVal*abs(cos(t))*st.y,random(st-vec2(clamp(abs(sin(t)),0.2,0.8))));\n    color-=color*colorVal*10.;\n\n\nfragColor = vec4(vec3(color), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 25502,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/yitingliu/dance-till-your-toes-off"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}