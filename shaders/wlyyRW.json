{
    "Shader": {
        "info": {
            "date": "1611669226",
            "description": "plotting test",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyyRW",
            "likes": 1,
            "name": "T_Plotting",
            "published": 3,
            "tags": [
                "plotplotting"
            ],
            "usePreview": 0,
            "username": "Thalikoth",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.14159265359\n\n\nfloat noise(float x) {\n    return fract(sin(x)*345.456);\n}\n\nfloat noise(vec2 x) {\n    return fract(sin(dot(x, vec2(2234.456, 1567.789)))*423.234);\n}\n\n// smooth gradient noise\nfloat grNoise(float x, float k) {\n\n    x *= k;\n    \n    // get integer / fractional parts\n    float i = floor(x);\n    float f = fract(x);\n\n    // smooth interpolation\n    float n1 = noise(i); \n    float n2 = noise(i+1.);\n    return mix(n1, n2, smoothstep(0., 1., f));\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nfloat noiseLine(vec2 uv) {\n    uv.y -= grNoise(uv.x + iTime, 2. + sin(iTime*0.002));\n    \n    return smoothstep(0.02, 0., uv.y) -\n            smoothstep(0., -0.02, uv.y);\n    \n}\n\nfloat sineLine(vec2 uv) {\n    uv.y += .6;\n    uv.x += iTime / .9;\n    uv.y -= sin(uv.x * 6.) / 5.;\n    \n    return smoothstep(0.02, 0., uv.y) -\n            smoothstep(0., -0.02, uv.y);\n    \n}\n\nfloat axis(vec2 uv) {\n    float y = smoothstep(0.005, 0., uv.y) -\n            smoothstep(0., -0.005, uv.y);\n    float x = smoothstep(0.005, 0., uv.x) -\n            smoothstep(0., -0.005, uv.x);\n    return x + y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.y *= iResolution.y / iResolution.x;\n\n    uv *= 5.;\n\n    vec3 col = vec3(0.);\n    \n    \n    \n    col = vec3(axis(uv));\n    col.r = noiseLine(uv);\n    col.b = sineLine(uv);\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}