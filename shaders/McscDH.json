{
    "Shader": {
        "info": {
            "date": "1721111265",
            "description": "originals  https://www.shadertoy.com/view/XcfyWH",
            "flags": 0,
            "hasliked": 0,
            "id": "McscDH",
            "likes": 2,
            "name": "black and white3",
            "published": 3,
            "tags": [
                "fractal",
                "blackandwhite",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "\nfloat intensity = 1.0;\nfloat radius2 = 0.05;\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n//Distance functions from\n//https://iquilezles.org/articles/distfunctions2d\nfloat triangleDist(vec2 p){\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat boxDist(vec2 p){\n    vec2 d = abs(p)-1.0;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat circleDist( vec2 p){\n  return length(p) - 1.0;\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n   \n   \n   \n    vec2 uv2  =fragCoord/iResolution.xy-0.5;\nuv*=2.5;\n\n    float widthHeightRatio = iResolution.x/iResolution.y;\n    vec2 centre;\n    vec2 pos;\n\n    float t = -iTime * 0.05;\n   \n    float dist;\n    float glow;\n    vec3 col = vec3(0);\n   \n    //The spacing between shapes\n    const float scale = 150.0;\n    //Number of shapes\n    const float layers = 10.0;\n   \n    float depth;\n    vec2 bend;\n   \n    const vec3 purple = vec3(0.611, 0.129, 0.909);\n    const vec3 green = vec3(0.133, 0.62, 0.698);\n   \n    float angle;\n    float rotationAngle;\n    mat2 rotation;\n   \n    //For movement of the anchor point in time\n    float d = 2.5*(sin(t) + sin(3.0*t));\n\n    //Create an out of frame anchor point where all shapes converge to    \n    //vec2 anchor = vec2(0.5 + cos(d), 0.5 + sin(d));\n    vec2 anchor = vec2(0.5);\n\n    //Create light purple glow at the anchor loaction\n    pos = anchor - uv;\n  \n    dist = length(pos);\n    glow = getGlow(dist, 0.35, 0.9);\n\n   \nfor(float i = 0.0; i < layers; i++){\n       \n       \n        depth = fract(i/layers + t);\n\n        //Move the focus of the camera in a circle\n        //centre = vec2(0.5 + 0.2 * sin(t), 0.5 + 0.2 * cos(t));\n        centre = vec2(0.0);\n        //Position shapes between the anchor and the camera focus based on depth\n        bend = mix(anchor, centre, depth);\n     \n        pos =  uv;\n\n\n        //Rotate shapes\n        rotationAngle = 3.14 * sin(depth + fract(t) * 6.28) + i;\n        rotation = mat2(cos(rotationAngle), -sin(rotationAngle),\n                        sin(rotationAngle),  cos(rotationAngle));\n       \n        pos *= rotation;\n       \n        //Position shapes according to depth\n    pos *= mix(scale, 0.0, depth);\n   \n        float m = mod(i, 3.0);\n        if(m == 0.0){\n        dist = abs(boxDist(pos));\n        }else if(m == 1.0){\n        dist = abs(triangleDist(pos));\n        }else{\n        dist = abs(circleDist(pos));\n        }\n       \n        //Get glow from base radius and intensity modified by depth\n    glow = getGlow(dist, radius2+(1.0-depth)*2.0, intensity + depth);\n       \n        //Find angle along shape and map from [-PI; PI] to [0; 1]\n        angle = (atan(pos.y, pos.x)+3.14)/6.28;\n        //Shift angle depending on layer and map to [1...0...1]\nangle = abs((2.0*fract(angle + i/layers)) - 1.0);\n       \n        //White core\n    col += 10.0*vec3(smoothstep(0.03, 0.02, dist));\n       \n        //Glow according to angle value\n      col += glow * mix(green, purple, angle);\n}\n   \n  \n   \n    float radius = 0.8;\n    float smoothEdge = 0.01;\n\n    float dist2 = length(uv);\n float time = iTime;\n\n    float angle3 = atan(uv.y, uv.x);\n    float radius3 = length(uv);\n    angle3 = mod(angle3, 3.14159265 / 3.0) * 6.0;\n    uv = vec2(cos(angle3), sin(angle3)) * radius3;\n\n    vec3 color = vec3(0.0);\n\n    float r1 = 0.5;\n    float r2 = 0.2;\n\n    float scale3 = 1.;\n\n    for (int i = 0; i < 95; i++) {\n    \n        uv2 += vec2(sin(time), cos(time)) * 0.05; \n        \n        uv2 = fract(uv * scale3) - 0.5;\n        float len = length(uv2);\n        float angle3 = atan(uv2.y, uv2.x);\n\n        float d = abs(r1 - len) - r2;\n\n        vec3 kColor = vec3(.7, .7, .1) * (0.5 + 0.5 * cos(6.0 * angle3 + time));\n        color += kColor / (d * scale + 0.0);\n        \n        scale3 *= 1.3;\n    }\n\n    color = pow(color, vec3(0.4545));\n    float angle2 = iTime * 0.523598776;\nfloat t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 1.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n    \n    vec2 rotatedUV = uv;\n    rotatedUV.x+=cos(iTime);\n         rotatedUV.y+=sin(iTime);\n    if (dist2 < radius)\n    {\n        float s = sin(angle2);\n        float c = cos(angle2);\n        rotatedUV = vec2(c * uv.x - s * uv.y, s * uv.x + c * uv.y)*ma;\n         \n    }\n\n    vec2 checker = floor(uv * 10.0);\n  \n    vec2 rotatedChecker = floor(rotatedUV *col.xy* 10.0);\n    float checkerPattern = mod(rotatedChecker.x + rotatedChecker.y, 2.0);\n \n    float circleEdge = smoothstep(radius - smoothEdge, radius + smoothEdge, dist);\n\n    float pattern = mix(checkerPattern, checkerPattern, circleEdge);\n\n    vec3 color2 = vec3(pattern);\n\n    fragColor = vec4(color*color2, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}