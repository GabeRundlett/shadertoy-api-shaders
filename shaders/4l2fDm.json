{
    "Shader": {
        "info": {
            "date": "1516157310",
            "description": "cloud",
            "flags": 0,
            "hasliked": 0,
            "id": "4l2fDm",
            "likes": 1,
            "name": "cyq_PerlinNoise_cloud",
            "published": 3,
            "tags": [
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "alise_fly",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "// ========= Hash ===========\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// ========= Noise ===========\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n\n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n\n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))),\n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))),\n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))),\n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))),\n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\n// ========== Different function ==========\n\nfloat noise_sum(vec3 p)\n{\n    float f = 0.0;\n    p = p * 4.0 * 2.0;\n    f += 1.0000 * perlin_noise(p); p = 2.0 * p;\n    f += 0.5000 * perlin_noise(p); p = 2.0 * p;\n\tf += 0.2500 * perlin_noise(p); p = 2.0 * p;\n\tf += 0.1250 * perlin_noise(p); p = 2.0 * p;\n\tf += 0.0625 * perlin_noise(p); p = 2.0 * p;\n\n    return f;\n}\n\n\n// ========== Draw ==========\n\nvec3 draw_cloud(float f)\n{\n    f = f * 0.5 + 0.5;\n    return mix(\tvec3(8.0/255.0, 65.0/255.0, 82.0/255.0),\n              \tvec3(178.0/255.0, 161.0/255.0, 205.0/255.0),\n               \tf*f);\n}\n\n// ========= Marching ===========\n#define FAR 30.0\n#define PRECISE 0.001\n#define SPEED 0.05\n\nfloat map(vec3 pos)\n{\n    return length(pos - (vec3(0.0, 0.0, 1.5))) - 1.0;\n}\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n                    \t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n                         \tmap(pos + eps.yyx) - map(pos - eps.yyx)));\n}\n\nvec3 getBackground(vec2 uv) // 绘制背景\n{\n    float tm = 1.0;\n    tm = tm + 1.0;\n    vec3 pos = vec3(uv * vec2(iResolution.x/iResolution.y, 1.0),  tm * SPEED);\n    float f = noise_sum(pos);\n\n    return vec3(f * 0.5 + 0.5);\n}\n\n\nvec3 marching(vec3 ro, vec3 rd, vec2 uv)\n{\n    float t = 0.0;\n    float d = 1.0;\n    vec3 pos;\n    for (int i = 0; i < 50; i++) {\n        pos = ro + rd * t;\n        d = map(pos);\n        t += d;\n        if (d < PRECISE || t > FAR) break;\n    }\n\n    vec3 col = getBackground(uv);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    vec3 rd = vec3((p * 2.0 - 1.0) * vec2(iResolution.x/iResolution.y, 1.0), 1.0);\n    col = marching(ro, rd, p);\n\n    //col = draw_circle_outline(p * vec2(iResolution.x/iResolution.y, 1.0), 0.9, col);\n    col = mix(vec3(0.3, 0.0, 0.0), col, smoothstep(0.0, 0.005, p.x)); // abs(x) 返回x绝对值\n    col = mix(vec3(0.3, 0.0, 0.0), col, smoothstep(0.0, 0.005*iResolution.x/iResolution.y, p.y));\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}