{
    "Shader": {
        "info": {
            "date": "1569969033",
            "description": "Ink shaders for inktober #1\n\nUse the mouse to paint.",
            "flags": 32,
            "hasliked": 0,
            "id": "Wsy3DR",
            "likes": 31,
            "name": "Ink Drawing Pad",
            "published": 3,
            "tags": [
                "inktober"
            ],
            "usePreview": 0,
            "username": "ivansafrin",
            "viewed": 1332
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(mix(vec3(0.80, 0.78, 0.75), vec3(0.027, 0.239, 0.411), texture(iChannel0, uv).r), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BRUSH_SIZE 20.0\n#define STROKE_LENGTH 600.0\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord/iResolution.xy;   \n    vec4 brushData = texture(iChannel0, vec2(0.0));\n    float brushStrength = brushData.z;\n    \n    vec3 col = texture(iChannel0, uv).rgb; \n\tvec2 dirVec = normalize(iMouse.xy -  brushData.xy);\n\tdirVec = vec2(dirVec.y, -dirVec.x);\n\tfloat vd = dot(fragCoord, dirVec);\n    \n\tfloat brushStregthRamp = clamp(sin(brushStrength*3.1415926), 0.0, 1.0);\n    \n    for(int i=0; i < 20; i++) {\n        vec2 mPos = mix(iMouse.xy, brushData.xy, float(i)/20.0);\n    \tfloat d = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp);\n        d *= smoothstep(0.2, 1.0, (noise(fragCoord-mPos)+0.75)/5.0) * 10.0;               \n        float bd = 1.0 - smoothstep(0.0, 1.0, distance(fragCoord, mPos) / BRUSH_SIZE / brushStregthRamp / 1.5);\n        bd *= smoothstep(0.1, 1.0, (noise(vec2(brushStrength * 20.0, 0.0) + (fragCoord-mPos)/2.0)+0.0)/5.0) * 10.0;               \n        col += vec3(bd) + vec3(d);\n    }\n    \n    brushStrength -= distance(iMouse.xy, brushData.xy) / STROKE_LENGTH;\n    if(iMouse.z != brushData.w) {\n        if(iMouse.w > 0.0) {\n    \t\tbrushStrength = 1.0;\n        } else {\n            brushStrength = 0.0;\n        }\n    }\n    brushStrength = clamp(brushStrength, 0.0, 1.0);\n    vec4 newBrushData = vec4(iMouse.xy, brushStrength, iMouse.z);\n    fragColor = mix(newBrushData, vec4(col, 1.0), smoothstep(0.99, 1.0, fragCoord.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}