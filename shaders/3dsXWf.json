{
    "Shader": {
        "info": {
            "date": "1552380800",
            "description": "Hollowed out sparsely-filled truncated octahedral grid ",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsXWf",
            "likes": 20,
            "name": "Truncated Octahedral Voxels",
            "published": 3,
            "tags": [
                "octahedron"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 739
        },
        "renderpass": [
            {
                "code": "// \"Truncated Octahedral Voxels\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1\n\nvec3 vuOrg, ltPos, cMid;\nfloat dstFar, tCur, rVoid, fcId;\nconst float pi = 3.14159;\n\nvec3 HsvToRgb (vec3 c);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\n\nvec3 FcVec (float k)\n{\n  vec3 u, e;\n  e = vec3 (1., 0., -1.);\n  if (k <= 3.) u = (k == 1.) ? e.xyy : ((k == 2.) ? e.yxy : e.yyx);\n  else if (k <= 5.) u = 0.5 * ((k == 4.) ? e.xxx : e.zxx);\n  else u = 0.5 * ((k == 6.) ? e.xzx : e.xxz);\n  return u;\n}\n\nbool CellOcc (vec3 p)\n{\n  return (length (p - vuOrg) > rVoid && Hashfv3 (17.3 * p) < 0.2);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cm, fv;\n  float dHit, dm, d, s;\n  cMid = sign (ro) * floor (abs (ro) + 0.5);\n  cm = mod (cMid, 2.);\n  if (dot (cm, vec3 (1.)) > 0.) cMid += step (abs (cm.yzx - cm.zxy), vec3 (0.5)) *\n     sign (ro - cMid);\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    p = cMid - (ro + dHit * rd);\n    fcId = 0.;\n    dm = dstFar;\n    for (float k = 1.; k < 8.; k ++) {\n      fv = FcVec (k);\n      s = dot (fv, rd);\n      if (s != 0.) {\n        d = dot (p + sign (s) * fv, fv)  / s;\n        if (d < dm) {\n          dm = d;\n          fcId = sign (s) * k;\n        }\n      }\n    }\n    cMid = floor (cMid + 2. * sign (fcId) * FcVec (abs (fcId)) + 0.5);\n    dHit += dm;\n    if (CellOcc (cMid) || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat ObjHitSh (vec3 ro, vec3 rd, float rng)\n{\n  vec3 p, cm, fv;\n  float dHit, dm, d, s;\n  cMid = sign (ro) * floor (abs (ro) + 0.5);\n  cm = mod (cMid, 2.);\n  if (dot (cm, vec3 (1.)) > 0.) cMid += step (abs (cm.yzx - cm.zxy), vec3 (0.5)) *\n     sign (ro - cMid);\n  dHit = 0.;\n  for (int j = 0; j < 20; j ++) {\n    p = cMid - (ro + dHit * rd);\n    fcId = 0.;\n    dm = dstFar;\n    for (float k = 1.; k < 8.; k ++) {\n      fv = FcVec (k);\n      s = dot (fv, rd);\n      if (s != 0.) {\n        d = dot (p + sign (s) * fv, fv)  / s;\n        if (d < dm) {\n          dm = d;\n          fcId = sign (s) * k;\n        }\n      }\n    }\n    cMid = floor (cMid + 2. * sign (fcId) * FcVec (abs (fcId)) + 0.5);\n    dHit += dm;\n    if (CellOcc (cMid) || dHit > rng) break;\n  }\n  return 0.3 + 0.7 * smoothstep (0.5 * rng, rng, dHit);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltDir;\n  float dstObj, sh, ltDist, lDotV, atten;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = - normalize (sign (fcId) * FcVec (abs (fcId)));\n    if (length (ro - cMid) > 0.9) col = HsvToRgb (vec3 (Hashfv3 (21.3 * cMid), 0.6, 1.));\n    else col = vec3 (1., 0.8, 0.8) * (0.6 + 0.4 * cos (4. * pi * (0.4 +\n       0.6 * Hashfv3 (17.3 * cMid)) * tCur)) * pow (0.7 - 0.3 * dot (rd, vn), 4.);\n    ltDir = ltPos - ro;\n    ltDist = max (length (ltDir), 0.1);\n    ltDir /= ltDist;\n    sh = ObjHitSh (ro + 0.01 * vn, ltDir, 15.);\n    atten = 1. / (1. + 0.05 * (ltDist - rVoid + 1.) * (1. + 0.2 * (ltDist - rVoid + 1.)));\n    lDotV = max (dot (ltDir, vn), 0.);\n    col = col * (0.2 + 0.8 * atten * sh * lDotV * lDotV) +\n       0.2 * atten * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 16.);\n    col += vec3 (0.5) * max (- dot (rd, vn), 0.) * (1. - smoothstep (0., 0.002,\n       abs ((dstObj - rVoid + 2.) / dstFar - 0.5 * mod (0.1 * tCur, 1.))));\n  } else {\n    col = vec3 (0.5, 0.5, 0.6) * (0.2 + 0.8 * rd.z * rd.z);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, ori, ca, sa, col;\n  vec2 canvas, uv;\n  float sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) ori = vec3 (pi * mPtr.y, 2. * pi * mPtr.x, 0.22 * pi);\n  else ori = vec3 (0.017, 0.007, 0.019) * pi * tCur;\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.);\n  rVoid = 16.;\n  vuOrg = vec3 (0., 0., 8.);\n  ro = vuOrg + vuMat * vec3 (1.1);\n  ltPos = vuOrg + vuMat * vec3 (Rot2D (vec2 (5., 0.), 0.5 * tCur), 0.);\n  dstFar = 50.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 2.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}