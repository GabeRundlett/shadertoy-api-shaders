{
    "Shader": {
        "info": {
            "date": "1457239375",
            "description": "Matrix form version of https://www.shadertoy.com/view/Xd2Xz1",
            "flags": 0,
            "hasliked": 0,
            "id": "lsV3Wd",
            "likes": 10,
            "name": "1D Cubic Bezier Matrix Form",
            "published": 3,
            "tags": [
                "2d",
                "bezier"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 2160
        },
        "renderpass": [
            {
                "code": "#define A 0.0\n#define B (sin(iTime*1.5) * 0.5)\n#define C (iMouse.x <= 0.0 ? 0.25 : iMouse.y / iResolution.y - 0.5)\n#define D 0.0\n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\nconst mat4 c_matrixCubicBez =\n    mat4(\n        1.0, -3.0,  3.0, -1.0,\n        0.0,  3.0, -6.0,  3.0,\n\t\t0.0,  0.0,  3.0, -3.0,\n        0.0,  0.0,  0.0,  1.0\n\t);\n\nfloat CubicBezierMatrixForm (in float T)\n{\n\tvec4 powerSeries = vec4(1.0, T, T*T, T*T*T);\n    \n#if 1\n    vec4 controlPoints = vec4(A, B, C, D);\n\tvec4 result = powerSeries * c_matrixCubicBez * controlPoints;\n#else\n    // Note that you could pre-multiply the control points into the matrix \n    // like below if you wanted to, so you didn't have to transfer around\n    // both the matrix and control points separately.\n\tmat4 curveMatrix = c_matrixCubicBez;\n\n    curveMatrix[0] *= A;\n    curveMatrix[1] *= B;\n    curveMatrix[2] *= C;\n    curveMatrix[3] *= D;\n    \n    vec4 result = powerSeries * curveMatrix;\n#endif\n    \n    // sum the components of the result\n    return result.x+result.y+result.z+result.w;\n}\n\n// F(x,y)\nfloat F ( in vec2 coords )\n{\n    return CubicBezierMatrixForm(coords.x) - coords.y;\n}\n\n// gradiant function for finding G for a generic function F\nvec2 Grad( in vec2 coords )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( F(coords+h.xy) - F(coords-h.xy),\n                 F(coords+h.yx) - F(coords-h.yx) ) / (2.0*h.x);\n}\n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.5));\n    percent.x *= aspectRatio;\n\n    vec3 color = vec3(1.0,1.0,1.0);\n    float dist = SDFCircle(percent, vec2(0.0,A));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }\n    \n    dist = SDFCircle(percent, vec2(0.33,B));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(0.66,C));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(1.0,D));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }      \n    \n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(dist) : vec3(0.95);\n    }\n    \n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}