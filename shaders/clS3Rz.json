{
    "Shader": {
        "info": {
            "date": "1672717926",
            "description": "高斯模糊0",
            "flags": 0,
            "hasliked": 0,
            "id": "clS3Rz",
            "likes": 0,
            "name": "高斯模糊0",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "ZhuKai_Jul",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 计算uv, iResolution.xy是screen大小\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // 模拟像素\n    vec2 pixed = 2.0 / iResolution.xy;\n    // 相邻像素的uv\n    vec2 texcoords[24];\n    texcoords[0] = uv + vec2(-1.0, 0.0) * pixed;\n    texcoords[1] = uv + vec2(0.0, -1.0) * pixed;\n    texcoords[2] = uv + vec2(1.0, 0.0) * pixed;\n    texcoords[3] = uv + vec2(0.0, 1.0) * pixed;\n    texcoords[4] = uv + vec2(-1.0, -1.0) * pixed;\n    texcoords[5] = uv + vec2(-1.0, 1.0) * pixed;\n    texcoords[6] = uv + vec2(1.0, -1.0) * pixed;\n    texcoords[7] = uv + vec2(1.0, 1.0) * pixed;\n    texcoords[8] = uv + vec2(-2.0, 0.0) * pixed;\n    texcoords[9] = uv + vec2(2.0, 0.0) * pixed;\n    texcoords[10] = uv + vec2(0.0, 2.0) * pixed;\n    texcoords[11] = uv + vec2(0.0, -2.0) * pixed;\n    texcoords[12] = uv + vec2(-2.0, -1.0) * pixed;\n    texcoords[13] = uv + vec2(-2.0, 1.0) * pixed;\n    texcoords[14] = uv + vec2(-1.0, -2.0) * pixed;\n    texcoords[15] = uv + vec2(-1.0, 2.0) * pixed;\n    texcoords[16] = uv + vec2(1.0, -2.0) * pixed;\n    texcoords[17] = uv + vec2(1.0, 2.0) * pixed;\n    texcoords[18] = uv + vec2(2.0, -1.0) * pixed;\n    texcoords[19] = uv + vec2(2.0, 1.0) * pixed;\n    texcoords[20] = uv + vec2(-2.0, -2.0) * pixed;\n    texcoords[21] = uv + vec2(-2.0, 2.0) * pixed;\n    texcoords[22] = uv + vec2(2.0, -2.0) * pixed;\n    texcoords[23] = uv + vec2(2.0, 2.0) * pixed;\n    // 相邻像素对应的权重, 卷积核\n    float w[24];\n    w[0] = w[1] = w[2] = w[3] = weight[0];\n    w[4] = w[5] = w[6] = w[7] = weight[1];\n    w[8] = w[9] = w[10] = w[11] = weight[2];\n    w[12] = w[13] = w[14] = w[15] = w[16] = w[17] = w[18] = w[19]= weight[3];\n    w[20] = w[21] = w[22] = w[23] = weight[4];\n    // 权重总和, 用来归一化卷积核\n    float totalWeight = w[0] * 4.0 + w[4] * 4.0 + w[8] * 4.0 + w[12]*8.0 + w[20]*4.0;\n    // 卷积运算\n    vec4 gaussColor = vec4(0.0);\n    for (int i = 0; i < 24; i++) {\n        gaussColor += texture(iChannel0, texcoords[i]) * w[i] / totalWeight;\n    }\n    // 原图\n    vec4 originalColor = texture(iChannel0, uv);\n    // sin + time动态变化\n    float normalTime =0.7;// abs(sin(iTime));\n    // mix输出颜色\n    fragColor = mix(originalColor, gaussColor, normalTime);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}