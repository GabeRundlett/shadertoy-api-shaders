{
    "Shader": {
        "info": {
            "date": "1426386386",
            "description": "Interpolating texels using 3x3 natural neighbor interpolation, a technique for interpolating voronoi cells that also works for regular grids.",
            "flags": 0,
            "hasliked": 0,
            "id": "XlSGRR",
            "likes": 24,
            "name": "Natural Neighbor Interpolation",
            "published": 3,
            "tags": [
                "mattdamon"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 3038
        },
        "renderpass": [
            {
                "code": "float m;\n\nfloat compute_area(vec2 uv) {\n    vec2 n = abs(normalize(uv));\n    vec4 p = (vec4(n.xy,-n.xy)-length(uv)*0.5) / n.yxyx;\n    vec4 h = max(vec4(0.0),sign(1.0-abs(p)));\n    // fix p becoming NaN; unfortunately 0*(1/0) doesn't\n    // fix the value\n    p.x = (h.x < 0.5)?0.0:p.x;\n    p.y = (h.y < 0.5)?0.0:p.y;\n    p.z = (h.z < 0.5)?0.0:p.z;\n    p.w = (h.w < 0.5)?0.0:p.w;\n    p = (p+1.0)*0.5;\n    return 0.5*(h.y*(p.y*p.x*h.x + (p.y+p.w)*h.w) + (p.x+p.z)*h.x*h.z);\n}\n\nconst vec2 texsize = vec2(64.0);\nvec3 fetch(ivec2 uv) {\n    return texture(iChannel0, (vec2(uv) + 0.5) / texsize).rgb;\n}\n\nvec3 samplef(vec2 uv) {\n    vec2 suv = uv + iTime;\n    vec2 n = floor(suv);\n    vec2 f = fract(suv)*2.0-1.0;\n    \n    ivec2 iuv = ivec2(n);\n    vec3 total = vec3(0.0);\n    float w = 0.0;\n    for (int i = -1; i <= 1; ++i) {\n        for (int j = -1; j <= 1; ++j) {\n            float a;    \n            a = compute_area(f-vec2(float(i),float(j))*2.0);\n            total += fetch(iuv + ivec2(i,j)) * a;\n            w += a;\n        }\n    }\n    \n    return ((uv.x+uv.y-m*8.0) < 0.0)?fetch(iuv):(total/w);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 8.0;\n    m =( iMouse.x / iResolution.x)*2.0-1.0;\n    \n\tfragColor = vec4(samplef(uv),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}