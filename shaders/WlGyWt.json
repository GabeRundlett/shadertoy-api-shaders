{
    "Shader": {
        "info": {
            "date": "1612468170",
            "description": "A fun project far from the original intent but who cares ?\nThe code is provided as is whithout any warranty :)",
            "flags": 64,
            "hasliked": 0,
            "id": "WlGyWt",
            "likes": 1,
            "name": "Block city",
            "published": 3,
            "tags": [
                "city",
                "block"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0.,1.)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c); }\n\nfloat lenny(vec2 v)\n{\n    return abs(v.x)+abs(v.y);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 _max(vec2 a, vec2 b)\n{\n    if (a.x > b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(max(l.x, l.y), l.z);\n}\n\nfloat getFog(float dist, float offset, float density)\n{\n    return exp((-dist+max(offset, 0.))*density);\n}\n\nvec2 map2(vec3 p)\n{\n    vec2 lim = vec2(1.25);\n    vec2 rep = vec2(1.);\n    ivec2 idx;\n    \n    vec3 pBat = p;\n    idx = ivec2(((pBat.xz+rep*.5) / rep));\n    vec2 fidx = vec2(float(idx.x), float(idx.y));\n    //pBat.xz = clamp(pBat.xz, -lim, lim);\n    //pBat.xz = pBat.xz-rep*clamp(fidx, -lim, lim);// clamp(pBat.xz, -lim, lim);\n    pBat.xz = mod(pBat.xz+rep*.5, rep)-rep*.5;\n    \n    float d = 0.2*sin(5.*length(vec2(idx))+iTime*5.);\n    vec2 sz = 0.1*texture(iChannel1, fidx*.1).xx;\n    vec2 bats = vec2(_cube(pBat, vec3(sz.x, d+(1.-sat(.1*length(fidx)))*2.+pow(texture(iChannel1, fidx*.5).x,.7)*2., sz.y)), 0.);\n    vec2 ground = vec2(-p.y, 1.);\n    \n    return _min(ground, bats);\n}\n\nvec2 map(vec3 p)\n{\n    vec3 p2 = p*vec3(1.,-1.,1.)+vec3(0.,-8.,0.);\n    p2.xz *= r2d(iTime*.5);\n    return _min(map2(p), map2(p2));\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 eps = vec3(0.001, 0., 0.);\n    return normalize(map(p).xxx-vec3(map(p-eps.xyy).x, map(p-eps.yxy).x, map(p-eps.yyx).x));\n}\n\nvec3 getCam(vec3 dir, vec2 uv)\n{\n    vec3 l = normalize(cross(dir, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(dir, l));\n    return dir+l*uv.x+u*uv.y;\n}\n\nstruct material\n{\n    vec3 SpecularColor;\n    float SpecularPower;\n    vec3 DiffuseColor;\n};\n\n// x is distance to point\n// y is index to object (for material)\n// -1.,-1. if no hit\nvec2 traceRay(vec3 p, vec3 rd, float maxDist, int steps)\n{\n    vec2 hit = vec2(-1.); \n    vec3 ro = p;\n    float totDist = 0.0;\n    for (int i = 0; (i < steps) && (totDist < maxDist); ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n        {\n            hit = res;\n            hit.x = length(ro-p);\n            break;\n        }\n        float distF = 0.5; // To avoid glitch due to mod\n        totDist += res.x*distF;\n        p += res.x * rd*distF;\n    }\n    \n    return hit;\n}\n\nvec3 getSky(vec3 rd)\n{\n    return texture(iChannel0, normalize(rd)).xyz;\n}\nvec3 grid(vec2 uv)\n{\n  vec2 r = clamp(mod(uv,vec2(.25))-vec2(.001),vec2(0.),vec2(1.));\n  return vec3(.5)*(1.-sat(10.*(min(r.x,r.y))))*(.5+.5*sin(uv.y*500.))\n  *(.5+.5*sin(uv.x*500.))*(sat(length(uv)-.4));\n}\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    vec3 ta = vec3(0.,-3.,0.);\n    float rad = 10.;\n    float spd = -.3;\n    float t = iTime*spd;\n    vec3 ro = vec3(sin(t)*rad,-5.+sin(t)*.5,cos(t)*rad);\n    \n    vec3 dir = normalize(ta-ro);\n    vec3 rd = normalize(getCam(dir, uv));\n    \n    vec3 p = ro;\n\n    vec2 res = traceRay(ro, rd, 100.0, 128);\n    \n    \n    float dist;\n    if (res.x > 0.0)\n    {\n        vec3 n = normal(p+rd*res.x);\n        vec3 inter =  ro + rd*res.x + n*0.1;\n        dist = res.x;\n        vec3 lPos = vec3(5.,25.,0.);\n        vec3 lDir = lPos-inter;\n        vec3 baseCol = vec3(1.);\n        if (inter.z > 0.5 && inter.z < 1.5)\n            baseCol = vec3(0.000,1.000,0.298);\n        col = baseCol*(1.-sat(dot(n,normalize(lDir))))*(sat(length(lDir)/35.));\n        if (res.y > 0.5)\n        {\n            //col *= .5;\n            float ao = 1.0;\n            int aoSamples = 8;\n            for (int i = 0; i < aoSamples; ++i)\n            {\n                float fi = float(i);\n                \n                vec2 giRes = traceRay(inter, normalize(vec3(sin(fi), 1., cos(fi))), 1., 16);\n                if (giRes.x > 0.0)\n                    ao -= pow(giRes.x/1., .25)/float(aoSamples);\n                    //col += pow(1.-(sat(giRes.x/10.)/15.),5.1);\n            }\n            col = vec3(pow(1.-sat(ao), 1.));\n        }\n        else\n        {\n            vec3 refl = normalize(reflect(rd, n));\n            col *= mix(vec3(1.), getSky(refl), 1.);\n        }\n        \n       // col = n * .5+.5;\n    }\n    else\n    {\n        dist = 100.0;\n    }\n    \n    col = mix(col, vec3(209, 246, 255)/255., 1.-getFog(dist, 5.5, 0.15));\n    //col *= pow(1.-sat(fwidth(col.x)), 1.5)*1.1;\n    \n    \n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(0.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    \n    float beat = 1./2.;\n    float beatF = mod(iTime, beat)/beat;\n    vec2 ouv = uv;\n    // I know this makes the below \"antialising\" malfunction\n    // but I found the effect cool\n    uv *= mix(1.,1.05, pow(beatF, 5.));\n    float diff = pow(fwidth(col.z), .6);\n\n    { // Not so cheap antialiasing SSAA x4\n\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        vec3 acc = col;\n        // To avoid too regular pattern yielding aliasing artifacts\n        mat2 rot = r2d(uv.y*5.); // a bit of value tweaking, appears to be working well\n        acc += rdr(uv-off.xx*rot);\n        acc += rdr(uv-off.xy*rot);\n        acc += rdr(uv-off.yy*rot);\n        acc += rdr(uv-off.yx*rot);\n        col = acc/5.;\n    }\n    \n    col *= 1.-sat((length(uv)-.3)*2.);\n    col = pow(col, vec3(1.45));\n    \n    col = col.yzx*(1.-col.xxx)+col.yzx;\n    \n    col = pow(col, vec3(1.45));\n    \n    col = mix(col, pow(col.yyy, vec3(5.)), sat((abs(uv.x+uv.y)-.4)*iResolution.x));\n    \n    col -= grid(uv*2.)*2.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 25351,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/d-leria/d-leria-makumba-mst-4416"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}