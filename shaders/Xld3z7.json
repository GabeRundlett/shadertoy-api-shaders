{
    "Shader": {
        "info": {
            "date": "1468457537",
            "description": "My first attempt at different materials in the same scene. Probably not that well laid out, but it works on this simple scene. Move the light source with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xld3z7",
            "likes": 1,
            "name": "Sphere Tracer with Materials",
            "published": 3,
            "tags": [
                "3d",
                "csg",
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 25.0\n#define MAX_ITER 1000\n#define EPSILON 0.00001\n#define CAM_POS vec3(0.0, 0.0, -5.0)\n#define LIGHT_POS vec3(12.0 * iMouse.x / iResolution.x - 6.0, 2.0, 6.0 * iMouse.y / iResolution.y - 9.0)\n#define T_MIN 0.01\n#define AO_SAMPLES 15\n#define AO_STRENGTH 3.0\n\nmat3 rotY(float r){\n    float c = cos(r);\n    float s = sin(r);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c);\n}\n\nvec2 mapMat(vec3 p){\n    vec3 q = p;\n    q -= vec3(0.5 * cos(iTime), 0.0, 0.5 * sin(iTime));\n    vec3 r = p;\n    r -= vec3(-2.5 * cos(iTime), 0.0, -2.5 * sin(iTime));\n    r *= rotY(iTime);\n    vec2 sphere = vec2(max(-(length(p) - 1.0), length(q) - 1.0), 1.0);\n    vec2 cube = vec2(length(max(abs(r)-1.0,0.0)), 1.0);\n    vec2 hplane = vec2(p.y + 1.0, 2.0);\n    vec2 vplane = vec2(-p.z + 4.0, 3.0);\n    \n    float m = min(cube.x, min(sphere.x, min(hplane.x, vplane.x)));\n    return m == cube.x ? cube : m == sphere.x ? sphere : (m == hplane.x ? hplane : vplane); \n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nvec2 trace(vec3 ro, vec3 rd){\n \tfloat t = 0.0;\n    float d = 0.0;\n    vec2 coll;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        coll = mapMat(ro + rd * t);\n        d = coll.x;\n        if(d < EPSILON){\n            break;\n        }\n        if(t > MAX_DIST){\n        \tt = 0.0;\n            break;\n    \t}\n        t += d;\n    }\n    return vec2(t, coll.y);\n}\n\n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = T_MIN;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        d = map(ro + rd * t);\n        if(d < EPSILON){\n            return 0.0;\n        }\n        if(t > MAX_DIST){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nvec3 normal(vec3 p){\n    return vec3(map(vec3(p.x + EPSILON, p.yz)) - map(vec3(p.x - EPSILON, p.yz)),\n                map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n                map(vec3(p.xy, p.z + EPSILON)) - map(vec3(p.xy, p.z - EPSILON)));\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < AO_SAMPLES; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(AO_STRENGTH * occ, 0.0, 1.0);\n}\n\n//Material colours\nvec3 matCol(float id, vec3 p){\n    if(id == 1.0){\n        return vec3(1.0, 1.0, 0.0);\n    }\n    if(id == 2.0){\n        return (mod(floor(p.z), 2.0) == 0.0 && mod(floor(p.x), 2.0) != 0.0) \n            \t|| (mod(floor(p.z), 2.0) != 0.0 && mod(floor(p.x), 2.0) == 0.0) ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 0.0, 1.0);\n    }\n    return vec3(0.0, 0.0, 1.0);\n}\n\n//Material properties AMB DIFF SPEC ALPHA\nvec4 matProp(float id){ \n    if(id == 1.0){\t\t\n        return vec4(0.25, 0.8, 0.5, 64.0);\n    }\n    if(id == 2.0){\n        return vec4(0.25, 0.5, 0.5, 2.0);\n    }\n    return vec4(0.25, 0.9, 0.2, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = CAM_POS;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec2 coll = trace(ro, rd);\n    float d = coll.x;\n    float matID = coll.y;\n    vec3 col;\n    if(d == 0.0){\n        col = vec3(0.0);\n    }else{\n        vec3 x = ro + (rd * d);\n    \tvec3 l = normalize(LIGHT_POS - x);\n        vec3 n = normalize(normal(x));\n    \tfloat nl = dot(n, l);\n    \tfloat s = shadow(x, l);\n        \n        //Get material properties\n        vec4 consts = matProp(matID);\n        vec3 matC = matCol(matID, x);\n        \n        //Calculate ambient light\n    \tvec3 amb = consts.x * matC * occlusion(x, n);\n    \t\n        //Calculate diffuse\n        vec3 diff = consts.y * matC * max(nl, 0.0);\n    \t\n        //Calculate specular\n        vec3 spec = vec3(0.0);\n        //If in shadow, no specular highlight\n        if(s == 1.0){\n    \t\tfloat facing = nl > 0.0 ? 1.0 : 0.0;\n    \t\tvec3 h = 2.0 * nl * n - l;\n    \t\tspec = facing * consts.z * matC * pow(max(dot(n, h), 0.0), consts.w);\n        }\n    \t\n    \tcol = amb + diff + spec;\n        \n        //Shadows\n    \tcol -= vec3(0.5 - 0.5 * s);\n        \n        //Fog\n        col *= vec3(1.0 / exp(d * 0.08));\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}