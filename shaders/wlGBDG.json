{
    "Shader": {
        "info": {
            "date": "1614954655",
            "description": "RGB To Normal Map By Sobelï¼ŒYou can used Diffuse Map or video.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlGBDG",
            "likes": 0,
            "name": "RGB To Normal Map By Sobel",
            "published": 3,
            "tags": [
                "sobel",
                "rgb",
                "normal"
            ],
            "usePreview": 0,
            "username": "CaesarSun",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "            vec3 GrayToNormalSobel(mat3 SobelPx)\n            {\n                mat3 SobelX = mat3(1.0, 0.0, -1.0,\n                                           2.0, 0.0, -2.0,\n                                           1.0, 0.0, -1.0);\n                mat3 SobelY = mat3(1.0, 2.0, 1.0,\n                                           0.0, 0.0, 0.0,\n                                           -1.0, -2.0, -1.0);\n\n\n                SobelX = SobelX * SobelPx;\n                SobelY = SobelY * SobelPx;\n                float Sx = SobelX[0][0] + SobelX[0][2]\n                    + SobelX[1][0] + SobelX[1][2]\n                    + SobelX[2][0] + SobelX[2][2];\n                float Sy = SobelY[0][0] + SobelY[0][1]\n                    + SobelY[0][2] + SobelY[2][0]\n                    + SobelY[2][1] + SobelY[2][2];\n\n                float Sz = sqrt(1.0 - clamp (0.0 ,1.0 , (Sx * Sx + Sy * Sy)));\n               // float Sz = sqrt(1.0 - (dot(Sx , Sy)));\n\n                vec3 normal = clamp (vec3(0.0), vec3(Sx, Sy, Sz), vec3(Sx, Sy, Sz));\n                // vec3 normal =(vec3(Sx, Sy, Sz) +4) / 8;\n                // normal = (vec3(Sx, Sy, Sz);\n                return normal;\n            }\n            \n                        mat3 CurrentPixel(sampler2D RGBMap, vec2 TexUV, float TexSize, int Channel)\n            {\n                mat3 ADPixels;\n                ADPixels[0][0] = texture(RGBMap, TexUV + vec2(- TexSize, - TexSize))[Channel];\n                ADPixels[0][1] = texture(RGBMap, TexUV + vec2(0, - TexSize))[Channel];\n                ADPixels[0][2] = texture(RGBMap, TexUV + vec2(TexSize, - TexSize))[Channel];\n\n                ADPixels[1][0] = texture(RGBMap, TexUV + vec2(- TexSize, 0))[Channel];\n                ADPixels[1][1] = texture(RGBMap, TexUV)[Channel];\n                ADPixels[1][2] = texture(RGBMap, TexUV + vec2(TexSize, 0))[Channel];\n\n                ADPixels[2][0] = texture(RGBMap, TexUV + vec2(- TexSize, TexSize))[Channel];\n                ADPixels[2][1] = texture(RGBMap, TexUV + vec2(0, TexSize))[Channel];\n                ADPixels[2][2] = texture(RGBMap, TexUV + vec2(TexSize, TexSize))[Channel];\n\n                return ADPixels;\n            }\n            \n            vec3 UnpackNormalmapRGorAG1(vec3 packednormal)\n            {\n                vec3 normal;\n                normal.xy = (packednormal.xy +1.0) / 2.0;\n                return vec3(normal.xy, packednormal.z);\n            }\n            \n            \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat3 ce = CurrentPixel(iChannel1,fragCoord.xy/iResolution.xy, 1.0/iResolution.xy.x, 0); // red only\n    \n    vec3 normal = GrayToNormalSobel(ce);\n    normal = normalize(vec3(normal.x *  1.0, normal.y * -1.0, normal.z * 1.0));\n    normal = UnpackNormalmapRGorAG1(normal);\n    //float Lambert = clamp(0.0 ,1.0 ,dot(normal, vec3(1.0,1.0,1.0)));\n    \n\n     //Output to screen\n    fragColor = vec4(normal,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}