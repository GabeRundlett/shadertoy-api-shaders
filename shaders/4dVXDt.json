{
    "Shader": {
        "info": {
            "date": "1467421743",
            "description": "something a little calmer, heavily inspired by the beautiful work Anders Hoff (@inconvergent on Twitter) has been doing lately. happy Friday!",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVXDt",
            "likes": 133,
            "name": "smoke rings",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "ring",
                "smoke",
                "wisp"
            ],
            "usePreview": 1,
            "username": "mahalis",
            "viewed": 4476
        },
        "renderpass": [
            {
                "code": "const float falloffPower = 0.3;\nfloat halfWidth = pow(0.03, falloffPower);\nconst float radius = 0.38;\nconst vec2 noiseSampleDirection = vec2(1.0, 0.319);\n\nfloat waves(vec2 coord, vec2 coordMul1, vec2 coordMul2, vec2 phases, vec2 timeMuls) {\n    return 0.5 * (sin(dot(coord, coordMul1) + timeMuls.x * iTime + phases.x) + cos(dot(coord, coordMul2) + timeMuls.y * iTime + phases.y));\n}\n\nfloat ringMultiplier(vec2 coord, float distortAmount, float phase, float baseXOffset) {\n    vec2 sampleLocation1 = noiseSampleDirection * phase;\n    vec2 sampleLocation2 = vec2(1.0, 0.8) - noiseSampleDirection * phase;\n    vec3 noise1 = texture(iChannel0, sampleLocation1).rgb;\n    vec3 noise2 = texture(iChannel0, sampleLocation2).rgb;\n    \n    float distortX = baseXOffset + 0.6 * waves(coord, vec2(1.9 + 0.4 * noise1.r, 1.9 + 0.4 * noise1.g) * 3.3, vec2(5.7 + 1.4 * noise1.b, 5.7 + 1.4 * noise2.r) * 2.8, vec2(noise1.r - noise2.r, noise1.g + noise2.b) * 5.0, vec2(1.1));\n    float distortY = 0.5 + 0.7 * waves(coord, vec2(-1.7 - 0.9 * noise2.g, 1.7 + 0.9 * noise2.b) * 3.1, vec2(5.9 + 0.8 * noise1.g, -5.9 - 0.8 * noise1.b) * 3.7, vec2(noise1.g + noise2.g, noise1.b - noise2.r) * 5.0, vec2(-0.9));\n    float amount = 0.2 + 0.3 * (abs(distortX) + abs(distortY));\n    vec2 distortedCoord = coord + normalize(vec2(distortX, distortY)) * amount * distortAmount * 0.2;\n    return smoothstep(-halfWidth,halfWidth, pow(abs(length(distortedCoord) - radius), falloffPower));\n}\n\n#define RING_COUNT 30\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(0.5) - fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 accumulatedColor = vec3(1.0);\n    const vec3 tint1 = vec3(0.1, 0.5, 0.4);\n    const vec3 tint2 = vec3(0.4, 0.7, 0.2);\n    \n    float baseXOffset = 0.5 * (0.6 * cos(iTime * 0.3 + 1.1) + 0.4 * cos(iTime * 1.2));\n    for (int i = 0; i < RING_COUNT; i++) {\n        float ringsFraction = float(i) / float(RING_COUNT);\n        float amount = ringMultiplier(uv, 0.1 + pow(ringsFraction, 3.0) * 0.7, pow(1.0 - ringsFraction,0.3) * 0.09 + iTime * 0.0001, baseXOffset);\n        accumulatedColor *= mix(mix(tint1, tint2, pow(ringsFraction, 3.0)), vec3(1.0), pow(amount, 2.0));\n    }\n\tfragColor = vec4(accumulatedColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}