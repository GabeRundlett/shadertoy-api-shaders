{
    "Shader": {
        "info": {
            "date": "1722691295",
            "description": "cosmos https://www.shadertoy.com/new",
            "flags": 1,
            "hasliked": 0,
            "id": "lfBcR3",
            "likes": 0,
            "name": "cosmos light 3",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nfloat sdStar(in vec2 p, in float r, in float n, in float w)\n{\n    // these 5 lines can be precomputed for a given shape\n    //float m = n*(1.0-w) + w*2.0;\n    float m = n + w*(2.0-n);\n    \n    float an = 3.1415927/n;\n    float en = 3.1415927/m;\n    vec2  racs = r*vec2(cos(an),sin(an));\n    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= racs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t vec2 uv = fragCoord/iResolution.xy;\n\n  \n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.02),sin(iTime*0.02),-sin(iTime*0.02),cos(iTime*0.02) );// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.02,1.);\t\n}\nconst float a=1.0;\nconst float b=.1759;\nconst float PI=3.14159265359;\n#define THICKNESS .11\n#define ARMS 4.\n#define GRID 96.\n#define COLORS 2.\n#define STARS 2.\n#define SPEED 1.\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat spiralSDF(vec2 p,vec2 c, float phase){\n    p = p - c;\n    float t=atan(p.y, p.x) + phase;\n    float r=length(p.xy);\n    float n=(log(r/a)/b-t)/(2.*PI);\n\n    // Cap the spiral\n    float upper_r=a*exp(b*(t+2.*PI*ceil(n)));\n    float lower_r=a*exp(b*(t+2.*PI*floor(n)));\n    return min(abs(upper_r-r),abs(r-lower_r));\n}\n#define R iResolution.xy\n\n#define A(U) texture(iChannel3,(U)/R)\n#define B(U) texture(iChannel1,(U)/R)\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(1.1031, 1.1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+330.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nvec4 noise (vec2 U) {\n    vec2 f = floor(U);\n    vec2 c = ceil(U);\n    vec4 _00 = pow(hash44(vec4(f,f)),vec4(3,3,3,3));\n    vec4 _01 = pow(hash44(vec4(f.x,c.y,f.x,c.y)),vec4(1,3,3,3));\n    vec4 _10 = pow(hash44(vec4(c.x,f.y,c.x,f.y)),vec4(1,3,3,3));\n    vec4 _11 = pow(hash44(vec4(c,c)),vec4(1,3,3,3));\n    vec4 _0 = mix(_00,_01,fract(U.y));\n    vec4 _1 = mix(_10,_11,fract(U.y));\n    return mix(_0,_1,fract(U.x));\n}\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pi 3.14159265359\n#define phi 1.618\nfloat ln (vec2 p, vec2 a, vec2 b) { \n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\n#define R3(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(1.,1,1.))*.5+.5)\nvec3 pow3(vec3 x, int y) {\n    while (y>0) {\n        x*=x;\n        y=y-1;\n    }\n    return x;\n}\nfloat fft(float x ) {\n    return texelFetch( iChannel0, ivec2(128.*x,128.*x), 0 ).x; \n }\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    float phase = 2.*3.14159/ARMS;\n    \n    vec4 O=vec4(0);\n         \n\n\n  \n\n    \n   \n    vec3 p=vec3(0),r=iResolution,\n   \n    d=normalize(vec3((fft(uv.x)*2.+fragCoord-.5*r.xy)/r.y,1)); \n       \n       \n       \n    for(\n        float i=0.,g=0.,e,s;\n        ++i<99.;\n        O.rgb+=mix(vec3(0.2) ,H(log(vec3(1.0,0.2,1.1))),.17)*.18*exp(-i*i*e))\n    {\n       \n        p=g*d;\n    \n       \n        p.z-=0.1*cos(iTime);\n        p=R3(p,normalize(vec3(0,0.,1.)),fft(iTime));\n        s=4.;\n        for(int j=0;j++<8;) {\n            p=abs(p),p=p.x<p.y?p.zxy:p.zyx,\n                \n            s*=e=1.8/min(dot(p,p),1.3),\n            p=p*e-vec3(3.+0.5*fft(e),5.*fft(e),3.+0.51*cos(iTime))+3.*fft((p.z/e)/99.);\n        }\n        g+=e=length(p.xz)/s;\n  \n    }\n    O=vec4(pow3(O.rgb,2),1.);\n    \n    vec3 col = 1.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    vec2 texCoords1 = uv + vec2(iTime * 0.12, 0.34);\n    \n    texCoords1 += texture(iChannel1, texCoords1).xy;\n\n    vec2 texCoords2 = uv - vec2(iTime * 0.13, 0.26);\n    \n    texCoords2 += texture(iChannel2, texCoords2).yx;\n    \n    vec2 texCoords = uv + (texCoords1 + texCoords2) * 0.01;\n    for(float i = 0.;i<ARMS;i++){\nfloat d2= 01.-spiralSDF(texCoords,vec2(0.),.3*SPEED*iTime*i);\nuv*=d2;\n}\n\n\n\tvec3 dir=vec3(texCoords*zoom,1.);\n\tfloat time=iTime*speed+.25;\nvec2 p3 = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    ;\n    float t = iTime/3.0;\n    vec4 Q = fragColor; \n    vec2 U=fragCoord ;\n      Q = A(U);\n    vec4 h = hash44(vec4(U,iTime,iTime));\n    float a = h.x*2.*pi;\n    vec2 d3 = (1.+h.w)*vec2(cos(a),sin(a));\n    for (float i = 0.; i <300.; i++) {\n        vec4 h = hash44(vec4(round(U/8.).xy,round(d)));\n        float a = h.x*2.*pi;\n        d3 += length(d)*0.5*h.y*h.z*h.z*vec2(cos(a),sin(a));\n        U += R.y/400.*d3;\n        Q += dot(d,d)*30./(1.+1.*dot(U-.5*R,U-.5*R))*max(sin(-3.+2.*length(d)+vec4(1,2,3,4)),0.);\n    }\n    \n\n\n   \n\n\tvec3 from=vec3(1.,.5,0.5);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \nfragColor*=Q*10.*O;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}