{
    "Shader": {
        "info": {
            "date": "1664096952",
            "description": "happy accident design",
            "flags": 32,
            "hasliked": 0,
            "id": "NlVBz1",
            "likes": 27,
            "name": "Wasp Blanket",
            "published": 3,
            "tags": [
                "feedback"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "\n// Wasp Blanket\n\n// i was playing with Conway's game of life cellular automaton\n// thinking i had an intuition for a smooth fading version\n// with a lifetime gradient and a neighbor ratio\n\n// found by accident that it can make reaction diffusion patterns\n// got overwhelmed but couldn't posted another turing pattern feedback\n// so i went a bit too far and now it's weird enough as i like it\n\n#define N(v) normalize(v)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 frame = texture(iChannel0, uv);\n    \n    vec3 normal = texture(iChannel1, uv).xyz;\n    \n    // tint\n    vec3 tint = .5 + .5 * cos(vec3(1,2,3)*5. + length(uv-.5)*2.);\n    fragColor = vec4(frame.r * tint, 1);\n    \n    // light\n    fragColor += vec4(0.5+1.*frame.r) * clamp(dot(normal, N(vec3(-1,4,1))), 0., 1.);\n    \n    // shadows\n    fragColor -= vec4(0.5) * clamp(dot(normal, N(vec3(0,-4,1))), 0., 1.);\n    fragColor *= pow(max(abs(frame.b),.0), .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float speed = 1.0;\nconst float turbulences = 1.;\nconst float attraction = 2.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/R;\n    vec2 mouse = (iMouse.xy - R.xy / 2.)/R.y;\n    vec2 p = (fragCoord.xy - R.xy / 2.)/R.y;\n    vec2 offset = vec2(0);\n    float dist = length(p);\n    \n    // noise\n    float noise = fbm(vec3(p * 4., dist-iTime*.1*speed));\n    \n    // slide along normals\n    vec3 normal = texture(iChannel1, uv).xyz;\n    normal.x *= -1.;\n    offset -= turbulences * normal.xy;\n\n    // attraction\n    offset += attraction * normalize(p) * sin(dist * 9. + iTime);\n    \n    float dt = 30. * iTimeDelta;\n    \n    // displace frame buffer\n    vec4 frame = texture(iChannel0, uv + dt * offset * speed / R);\n    \n    // edge spawn\n    bool spawn = fragCoord.x < 1. || fragCoord.x > R.x-1.\n              || fragCoord.y < 1. || fragCoord.y > R.y-1.\n              || (iMouse.z > .0 && length(p-mouse) < 50./R.y);\n    \n    // spawn from noise\n    float rng = hash13(vec3(fragCoord, iFrame));\n    if (spawn) frame = vec4(step(0.5, rng),0,0,0);\n    \n    // neighbor values\n    float neighbors = 0.;\n    for (float x = -1.; x <= 1.; ++x)\n    {\n        for (float y = -1.; y <= 1.; ++y)\n        {\n            if (x == 0. && y == 0.) continue;\n            neighbors += texture(iChannel0, uv+vec2(x,y)/R).r;\n        }\n    }\n    \n    // animation fade\n    float life = frame.r + 4.0 * (neighbors > 4.0 ? 1. : -1.) * iTimeDelta;\n    \n    fragColor = vec4(clamp(life, 0., 1.), 0., noise, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R iResolution.xy\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}\n\nfloat fbm (vec3 seed)\n{\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 3; ++i) {\n        seed += result * .5;\n        result += gyroid(seed/a)*a;\n        a /= 2.;\n    }\n    return result;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define T(uv) abs(texture(iChannel0,uv).b)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // normal\n    float height = 2.;\n    vec3 unit = vec3(10./iResolution.xy, 0);\n    vec3 normal = normalize(vec3(T(uv+unit.xz)-T(uv-unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 T(uv) * height));\n                                 \n    fragColor = vec4(normal, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}