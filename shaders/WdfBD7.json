{
    "Shader": {
        "info": {
            "date": "1588330496",
            "description": "Trying to replicate a hand-drawn aesthetic.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfBD7",
            "likes": 10,
            "name": "Pencil Sketches",
            "published": 3,
            "tags": [
                "handdrawn"
            ],
            "usePreview": 1,
            "username": "samhattangady",
            "viewed": 995
        },
        "renderpass": [
            {
                "code": "\n/*\n * 01 May 2020\n * Wanted to try to see if I could replicate some kind of hand drawn aesthetic\n * It looks alright. Definitely doesn't look hand drawn though. Maybe need to\n * make the lines not straight. But it's alright\n */\n\nfloat PI = 3.14159;\n\nvec3 paper_colour = vec3(0.9, 0.9, 0.85);\nvec3 pencil_colour = vec3(0.3, 0.3, 0.40);\nfloat line_thickness = 1.7;\nfloat line_variation = 3.0508;\nfloat line_smoothness = 0.5;\n\nfloat rand(vec2 c) {\n\treturn fract(sin(dot(c.xy ,vec2(12.868,781.233))) * 4378.5453);\n}\n\nfloat noise(vec2 p, float freq ){\n\tfloat unit = iResolution.x/freq;\n\tvec2 ij = floor(p/unit);\n\tvec2 xy = mod(p,unit)/unit;\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\txy = .5*(1.-cos(PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\nfloat pNoise(vec2 p, int res){\n\tfloat persistance = .5;\n\tfloat n = 0.;\n\tfloat normK = 0.;\n\tfloat f = 30.3;\n\tfloat amp = 1.;\n\tint iCount = 0;\n\tfor (int i = 0; i<50; i++){\n\t\tn+=amp*noise(p, f);\n\t\tf*=2.;\n\t\tnormK+=amp;\n\t\tamp*=persistance;\n\t\tif (iCount == res) break;\n\t\tiCount++;\n\t}\n\tfloat nf = n/normK;\n\treturn nf*nf*nf*nf;\n}\n\nfloat get_noise(vec2 p) {\n    float noise = pNoise(p, 3);\n    noise *= 2.0;\n    // noise -= 0.5;\n    return noise;\n}\n\nfloat rectangle(vec2 samplePosition, vec2 halfSize){\n    vec2 componentWiseEdgeDistance = abs(samplePosition) - halfSize;\n    float outsideDistance = length(max(componentWiseEdgeDistance, 0.0));\n    float insideDistance = min(max(componentWiseEdgeDistance.x, componentWiseEdgeDistance.y), 0.0);\n    return outsideDistance + insideDistance;\n}\n\nvec3 draw_line(vec2 p, vec2 p1, vec2 p2, vec3 current_colour) {\n    float d;\n    float l_sq = pow(distance(p1, p2), 2.0);\n    if (l_sq == 0.0)\n        d = distance(p, p1);\n    else {\n        float t = max(0.0, min(1.0, dot(p - p1, p2 - p1) / l_sq));\n        vec2 projection = p1 + t * (p2 - p1);  // Projection falls on the segment\n        d = distance(p, projection);\n    }\n    float noise;\n    // TODO (01 May 2020 sam): Figure out how to to better line check\n    if (p1.y<p.y) noise = get_noise(p.yx);\n    else noise = get_noise(p);\n    d += noise*line_variation;\n    float pencil = smoothstep(line_thickness, line_thickness+line_smoothness, d);\n    return mix(pencil_colour, current_colour, pencil);\n}\n\nvec3 draw_box(vec2 p, vec2 p1, vec2 p3, vec3 current_colour) {\n    vec3 colour = current_colour;\n    vec2 p2 = vec2(p1.x, p3.y);\n    vec2 p4 = vec2(p3.x, p1.y);\n    vec2 box_center = (p1 + p3)/2.0;\n    float bd = rectangle(p-box_center, (p3-p1)/2.0);\n    float noise = get_noise(p);\n    noise *= 5.0;\n    if (bd-noise<0.0)\n        colour = paper_colour;\n    colour = draw_line(p, p1, p2, colour);\n    colour = draw_line(p, p2, p3, colour);\n    colour = draw_line(p, p3, p4, colour);\n    colour = draw_line(p, p4, p1, colour);\n    return colour;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 colour;\n    float WIDTH = iResolution.x;\n\tfloat HEIGHT = iResolution.y;\n\n    vec2 pos = fragCoord;\n    vec2 uv = pos/iResolution.xy;\n    pos.x += (tan(iTime)/100.0)*iResolution.x*20.0;\n    colour = paper_colour;\n    // horizon\n    colour = draw_line(pos, vec2(-50000.0, iResolution.y/3.0), vec2(iResolution.x*5000.0, iResolution.y/3.0), colour);\n    // pillars\n    colour = draw_box(pos, vec2(WIDTH*0.22, HEIGHT*0.41), vec2(WIDTH*0.26, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.30, HEIGHT*0.41), vec2(WIDTH*0.34, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.37, HEIGHT*0.41), vec2(WIDTH*0.41, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.44, HEIGHT*0.41), vec2(WIDTH*0.48, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.51, HEIGHT*0.41), vec2(WIDTH*0.55, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.59, HEIGHT*0.41), vec2(WIDTH*0.63, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.66, HEIGHT*0.41), vec2(WIDTH*0.70, HEIGHT*0.59), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.74, HEIGHT*0.41), vec2(WIDTH*0.78, HEIGHT*0.59), colour);\n    // base\n    colour = draw_box(pos, vec2(WIDTH*0.2, HEIGHT*0.3), vec2(WIDTH*0.8, HEIGHT*0.4), colour);\n    colour = draw_box(pos, vec2(WIDTH*0.24, HEIGHT*0.32), vec2(WIDTH*0.76, HEIGHT*0.38), colour);\n    // roof\n    colour = draw_box(pos, vec2(WIDTH*0.2, HEIGHT*0.6), vec2(WIDTH*0.8, HEIGHT*0.66), colour);\n    colour = draw_line(pos, vec2(WIDTH*0.2, HEIGHT*0.68), vec2(WIDTH*0.5, HEIGHT*0.8), colour);\n    colour = draw_line(pos, vec2(WIDTH*0.8, HEIGHT*0.68), vec2(WIDTH*0.5, HEIGHT*0.8), colour);\n    colour = draw_line(pos, vec2(WIDTH*0.2, HEIGHT*0.68), vec2(WIDTH*0.8, HEIGHT*0.68), colour);\n    fragColor = vec4(colour, 1.0);\n    float c = get_noise(pos.yx);\n    // fragColor = vec4(vec3(c), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}