{
    "Shader": {
        "info": {
            "date": "1580063471",
            "description": "3D Tree Forest",
            "flags": 0,
            "hasliked": 0,
            "id": "WlV3W3",
            "likes": 5,
            "name": "3D Tree Forest",
            "published": 3,
            "tags": [
                "3d",
                "tree",
                "forest"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n#define FAR (20.)\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR+1.0)*iTime/PI)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.0, 1.0, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n#define circle(x) (vec2(cos((x)*PI), sin((x)*PI)))\n#define saw(x) fract( sign( 1.- mod( abs(x), 2.) ) * abs(x) )\n\n#define TAO 6.283\nvec2 Rotate(in vec2 v, float angle) {return v*mat2(cos(angle),sin(angle),-sin(angle),cos(angle));}\nvec2 Kaleido(in vec2 v,float power){return Rotate(v,floor(.5+atan(v.x,-v.y)*power/TAO)*TAO/power);}\nfloat HTorus(in vec3 z, float radius1, float radius2){return max(-z.y-0.055,length(vec2(length(z.xy)-radius1,z.z))-radius2-z.x*0.035);}\n\nmat2 rot(float x) {\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n\nfloat scale = 3.;\nfloat seed;\nvec3 mcol;\nfloat dfScene(in vec3 z0){\n\tvec4 z=vec4(z0,1.0);\n    float d = 1E32;\n    \n    float height =1.;\n    float width = .05;\n    const int iterations = 4;\n    float loop = float(1.)/float(iterations);\n\tfloat dB=sdCapsule(z0.xyz, vec3(0.,width,0.), vec3(0.,-height*2.,0.),width); \n    \n    if(dB < d)\n    {\n        d = dB;\n    \tmcol = vec3(loop/GR+(1.-loop)/E, loop, 0.);\n    }\n    \n    dB = z0.y+height*2.;\n    \n    if(dB < d)\n    {\n        d = dB;\n        float grass = pow(cos(z0.x*2.*PI/scale)*cos(z0.z*2.*PI/scale)*.5+.5, 4.);\n    \tmcol = vec3(loop/GR+(1.-loop)/E, loop+grass/PI/GR, 0.);\n    }\n    \n    \n\tfor(int i=0;i<5;i++){\n\t\tz.xz=Kaleido(z.xz,float(i+2)*(1.+floor(saw(seed*float(i+1))*4.)));\n\t\tz.yz=Rotate(z.yz,(saw(time*PI+seed)*.5-.5));\n\t\t\n        float dcap = sdCapsule(z.xyz+vec3(0., 0., .5), vec3(0.,0.,.5), vec3(0.,.5,0.),width);\n        dB = dcap/z.w;\n        if(dB < d)\n        {\n\t\t\td=dB;\n            loop = float(i+1)/float(iterations);\n            mcol = vec3(loop/GR+(1.-loop)/GR, loop, 0.);\n        }\n\t\tz.z+=.5;\n        z.y -= .5;\n\t\tz*=vec4(2.0,2.0,2.0,2.0);\n\t}\n\t//dB=(length(z.xyz)-1.0)/z.w;\n\treturn d;\n\treturn d;\n}\n\nvec3 surfaceNormal(vec3 p) { \n    vec2 e = vec2(5.0 / iResolution.y, 0);\n\tfloat d1 = dfScene(p + e.xyy), d2 = dfScene(p - e.xyy);\n\tfloat d3 = dfScene(p + e.yxy), d4 = dfScene(p - e.yxy);\n\tfloat d5 = dfScene(p + e.yyx), d6 = dfScene(p - e.yyx);\n\tfloat d = dfScene(p) * 2.0;\t\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n//main march\nvec3 marchScene(vec3 ro, vec3 rd) {\n    \n    vec3 pc = vec3(0.0); //returned pixel colour\n    float d = 0.0; //distance marched\n    vec3 rp = vec3(0.0); //ray position\n    vec3 lp = normalize(vec3(5.0, 8.0, -3.0)); //light position\n   \tfloat ns;\n    vec3 p;\n    for (int i = 0; i <32; i++) {\n        rp = ro + rd * d;\n        p = rp;\n        seed = floor((rp.x)/scale)*1.2345+floor((rp.z)/scale)*5.4321;\n        p.xz = (fract((rp.xz)/scale)-.5)*scale;\n        ns = dfScene(p);\n        d += ns;\n        if(d > FAR)\n        {\n            break;\n        }\n        \n    }\n    vec3 sky_color = vec3(.35, .35, .85);\n    float fog = smoothstep(.75, .9, d/FAR);\n    \n\n    vec3 n = surfaceNormal(p);\n    vec3 sc = mcol; //surface colour\n\n    float diff = max(dot(n, lp), 0.0); //diffuse\n    pc = sc * 0.5 + diff * sc ;\n    float spe = pow(max(dot(reflect(rd, n), lp), 0.), 16.); //specular.\n    pc = (pc + spe * vec3(1.0))*(1.-fog)+fog*sky_color;\n    \n    return pc;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    \n    //coordinate system\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //camera\n    vec3 rd = normalize(vec3(uv, 2.));\n    vec3 ro = vec3(0.0, -.5, -PI)*2.;\n    \n    float movement = time;\n    \n    ro += vec3((sin(movement*PI))*scale, 0., (movement+.5)*scale);\n    //rotate camera\n    rd.yz *= rot(.25+sin(movement/GR)*.1); \n    rd.xz *= rot(cos(movement*PI) * 0.5);\n    //*/\n    \n    \n    fragColor = vec4(marchScene(ro, rd), 1.0);    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}