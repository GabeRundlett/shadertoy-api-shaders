{
    "Shader": {
        "info": {
            "date": "1599302965",
            "description": "... another sin function using the sine wave formula by the time\nsee: https://en.wikipedia.org/wiki/Sine_wave",
            "flags": 0,
            "hasliked": 0,
            "id": "3tSBzV",
            "likes": 1,
            "name": "sin functions - 002",
            "published": 3,
            "tags": [
                "sin",
                "functions",
                "catafest"
            ],
            "usePreview": 0,
            "username": "catafest",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "// this size of line to paint each pixel from screen\nconst float size = 0.01;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // resize uv \n    uv = uv  * 2.0;\n    // translate normalized pixel coordinates uv from [0,1] to [-1, 1] with \n    uv = (uv - 1.0);\n\n    // get uv.x aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n  \n    // get simple sine \n    //float t = sin(uv.x);\n\n    // get sine * 3 with same size uv will zoom the sine graphic\n    // see also https://en.wikipedia.org/wiki/Sine_wave\n    float t = sin(uv.x * 3.0);\n    \n\t// select domain area of sine and drwa yellow color \n    // else put an blue color on rest\n    if (uv.y >= t - size && uv.y <= t + size) {\n        // draw sine\n    \tfragColor = vec4(1.0,1.0,0.0,1.0);\n    } else {\n        // draw background\n        fragColor = vec4(0.0,0.0,1.0,1.0);\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}