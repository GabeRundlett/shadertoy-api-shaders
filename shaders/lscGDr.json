{
    "Shader": {
        "info": {
            "date": "1448975675",
            "description": "High-quality smoothstep gradient in linear color space. Drag with mouse to move the gradient. Also has some noise to reduce color banding.\n\nUpdate 2-Jun-2018: Added gradient noise and comments.",
            "flags": 0,
            "hasliked": 0,
            "id": "lscGDr",
            "likes": 80,
            "name": "Just A High-Quality Gradient",
            "published": 3,
            "tags": [
                "gradient"
            ],
            "usePreview": 0,
            "username": "tsone",
            "viewed": 8405
        },
        "renderpass": [
            {
                "code": "//\n// Demonstrates high-quality and proper gamma-corrected color gradient.\n//\n// Does interpolation in linear color space, mixing colors using smoothstep function.\n// Also adds some gradient noise to reduce banding.\n//\n// References:\n// http://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/\n// https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch24.html\n// http://loopit.dk/banding_in_games.pdf\n//\n// This shader is dedicated to public domain.\n//\n\n#define SRGB_TO_LINEAR(c) pow((c), vec3(2.2))\n#define LINEAR_TO_SRGB(c) pow((c), vec3(1.0 / 2.2))\n#define SRGB(r, g, b) SRGB_TO_LINEAR(vec3(float(r), float(g), float(b)) / 255.0)\n\nconst vec3 COLOR0 = SRGB(255, 0, 114);\nconst vec3 COLOR1 = SRGB(197, 255, 80);\n\n// Gradient noise from Jorge Jimenez's presentation:\n// http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare\nfloat gradientNoise(in vec2 uv)\n{\n    const vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(magic.z * fract(dot(uv, magic.xy)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 a; // First gradient point.\n    vec2 b; // Second gradient point.\n    if (iMouse == vec4(0.0)) {\n        a = 0.1 * iResolution.xy;\n        b = iResolution.xy;\n    } else {\n        a = abs(iMouse.zw);\n        b = iMouse.xy;\n    }\n\n    // Calculate interpolation factor with vector projection.\n    vec2 ba = b - a;\n    float t = dot(fragCoord - a, ba) / dot(ba, ba);\n    // Saturate and apply smoothstep to the factor.\n    t = smoothstep(0.0, 1.0, clamp(t, 0.0, 1.0));\n    // Interpolate.\n    vec3 color = mix(COLOR0, COLOR1, t);\n\n    // Convert color from linear to sRGB color space (=gamma encode).\n    color = LINEAR_TO_SRGB(color);\n\n    // Add gradient noise to reduce banding.\n    color += (1.0/255.0) * gradientNoise(fragCoord) - (0.5/255.0);\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}