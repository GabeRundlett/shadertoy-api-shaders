{
    "Shader": {
        "info": {
            "date": "1470147005",
            "description": "divergence-free flow from Perlin noise.\n( NB: time evolution is not physically correct: better change slowly )\nNote that you can combine flow fields; e.g. a coarse river flow + flownoise with translation.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xl3Gzj",
            "likes": 71,
            "name": "flow by Perlin noise",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "fluid",
                "flow",
                "curlnoise",
                "incompressible",
                "stream",
                "divergencefree"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 4572
        },
        "renderpass": [
            {
                "code": "// see also https://www.shadertoy.com/view/ldtSzn\n\n// --- Perlin noise by inigo quilez - iq/2013   https://www.shadertoy.com/view/XdXGW8\n//     (extended to 3D)\nvec3 hash( vec3 p )\n{\n\tp *= mat3( 127.1,311.7,-53.7,\n\t\t\t   269.5,183.3, 77.1,\n\t\t\t  -301.7, 27.3,215.3 );\n\n\treturn 2.*fract(sin(p)*43758.5453123) -1.;\n}\n\nfloat noise( vec3 p )\n{\n    vec3 i = floor( p ),\n         f = fract( p ),\n\t     u = f*f*(3.-2.*f);\n      // u = f*f*f* ( 10. + f * ( -15. + 6.* f ) ); // smoother. from http://staffwww.itn.liu.se/~stegu/TNM022-2005/perlinnoiselinks/paper445.pdf\n \n    return 2.*mix(\n              mix( mix( dot( hash( i + vec3(0,0,0) ), f - vec3(0,0,0) ), \n                        dot( hash( i + vec3(1,0,0) ), f - vec3(1,0,0) ), u.x),\n                   mix( dot( hash( i + vec3(0,1,0) ), f - vec3(0,1,0) ), \n                        dot( hash( i + vec3(1,1,0) ), f - vec3(1,1,0) ), u.x), u.y),\n              mix( mix( dot( hash( i + vec3(0,0,1) ), f - vec3(0,0,1) ), \n                        dot( hash( i + vec3(1,0,1) ), f - vec3(1,0,1) ), u.x),\n                   mix( dot( hash( i + vec3(0,1,1) ), f - vec3(0,1,1) ), \n                        dot( hash( i + vec3(1,1,1) ), f - vec3(1,1,1) ), u.x), u.y), u.z);\n}\n\nfloat Mnoise(vec3 U ) {\n    return noise(U);                      // base turbulence\n  //return -1. + 2.* (1.-abs(noise(U)));  // flame like\n  //return -1. + 2.* (abs(noise(U)));     // cloud like\n}\n\nfloat turb( vec2 U, float t )\n{ \tfloat f = 0., q=1., s=0.;\n\t\n    float m = 2.; \n // mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    for (int i=0; i<2; i++) {\n      U -= t*vec2(.6,.2);\n      f += q*Mnoise( vec3(U,t) ); \n      s += q; \n      q /= 2.; U *= m; t *= 1.71;  // because of diff, we may rather use q/=4.;\n    }\n    return f/s; \n}\n// -----------------------------------------------\n\n#define L(a,b) O+= .3/R.y/length( clamp( dot(U-(a),v=b-(a))/dot(v,v), 0.,1.) *v - U+a )\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U /= R.y;\n\tfloat S = 3.,                              // scaling of noise\n        eps = 1e-3, t=.4*iTime;\n    //U -= t*vec2(.3,.1);                      // translation (or do it per band)\n    \n    float n = turb(S*U,t);                     // pure noise = stream\n \n                                               // flow = rot(stream) \n // vec2  V = vec2( turb(S*U+vec2(0,-eps),t) - turb(S*U+vec2(0,eps),t),\n //                 turb(S*U+vec2(eps,0),t)  - turb(S*U+vec2(-eps,0),t) ) / eps;\n    vec2 V = vec2( -dFdy(n), dFdx(n) )* R.y*.7;// using hardware derivatives\n    //V += vec2(3,0);                          // linearly combine other base flows\n    V /= R.y;\n    \n\tO = clamp(vec4(n,0,-n,0),0.,1.);           // draw stream value (note that curl = lapl(stream) so they are very similar)\n    \n    S = R.y/10.;\n    vec2 p = floor(U*S+.5)/S, v;           // draw velocity vectors\n    L ( p-V*2., p+V*2.);               \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}