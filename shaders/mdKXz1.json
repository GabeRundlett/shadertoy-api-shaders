{
    "Shader": {
        "info": {
            "date": "1680751134",
            "description": "A remix of my \"fractal labyrithic mosaic\" shader.",
            "flags": 8,
            "hasliked": 0,
            "id": "mdKXz1",
            "likes": 7,
            "name": "Fractal labyrinth mosaic remix",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "labyrinth",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 = vec2(1.,.5);\n    return abs(fract((a+a2)*(a2.x+a2.y))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.x += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    bool t3 = false;\n    vec2 uv1=uv;\n    for(int k = 0; k < 6; k++){\n        //uv = uv.yx;\n        uv = triangle_wave(uv+.5)-triangle_wave(uv.yx);\n        //uv *= sign(uv.x);\n        col.x =\n            max(abs(uv.y-uv.x)/(1.5+sign(uv.x-uv.y)),col.x)\n            //max(abs(uv.y*sign(uv.x)+uv.x*sign(uv.y))/2.,col.x)\n        ;\n        //if(uv.x<0.)\n        col = abs(col-1.+col.x);\n        //if(uv.x>uv.y){uv=uv.yx;}\n        //uv -= floor(1.)/8.;\n        //uv = (fract(vec2(uv+vec2(.5,1.5))*2.)-.5)/2.;\n\n    }\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //divide by prime numbers to get interesting rhythms\n    float a1 = a;\n    //a /= 1. + mod(floor(a1/3.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //mod(floor(a+floor(a*pow(2.,mod(floor(a/8./8.),2.)))),b)\n        //max(mod(floor(a+1.)*floor(a),b),mod(floor(a),b))\n        //max(mod(floor(a),b),mod(floor(a)*floor(a),b))\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n        //mod(mod(floor((a)),floor(1.+(a)/3.)),b)\n        //fmod(a,b) mod(floor(a) + floor(b*fract(((a)/b))),b)\n        //abs(mod(floor(a)*2.,(b)*2.)-mod(floor(a),b))\n        //floor(mod(floor(pow(b,mod(floor((a)*2.)/b/b,b))/b/b),b))\n        //floor(mod(floor(pow(b,mod(floor((a)*2.)/b/b,b))/b/b),b))\n    ;\n}\n\n\nvec2 mainSound(int samp, float time){\n  float tempo = 8.;\n  tempo *= pow(2.,fmod(time*tempo,3.));\n\n  time /= tempo;\n  //time *= (1.+fmod(time*2.,2.));\n  //time /= (1.+fmod(time/2.,2.));\n  \n  float s1 =\n      8.;\n  //for(int i = 0; i < 5; i++){ time += fmod(floor(time*s1),2.); }\n\n  //time += floor(time*4.)/4.;\n\n  float s2 = tempo,\n  t=\n      time*tempo\n      //time*2./pow(2.,fmod(time*2.,3.))\n      //time + mod(time,2.)\n      //time*2.+floor(time/2.)*2.\n  ,\n  m1 =\n      fmod(t*4.,s2)\n      //fmod(t*3.+mod(t,2.),s2)\n  ,\n  m3 =\n      (fmod(t,abs(s2*2.-m1)+1.)-m1);\n  t /=\n      (1.+fmod(t/s1,2.))*4./s1/s1\n  ;\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  \n  float a=\n      64.*(1.-sqrt(fract(t/s1)/1.25))*.2\n  ,\n\n  nb = time*tempo*pow(2.,floor((m3+m2)/2.)/5.+6.5);\n\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      //vec2(fract(time*nb*.998/4.*m2*s1)*a,fract(time*nb/4.*m2)*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}