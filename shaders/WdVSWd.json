{
    "Shader": {
        "info": {
            "date": "1575348439",
            "description": "Click + move\nGLSL fragment shader https://pastebin.com/ZTR6Ztgm\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdVSWd",
            "likes": 18,
            "name": "Fake bokeh",
            "published": 3,
            "tags": [
                "bokeh"
            ],
            "usePreview": 1,
            "username": "fb",
            "viewed": 1081
        },
        "renderpass": [
            {
                "code": "/*\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\n\nIn jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain.\nWe make this dedication for the benefit of the public at large and to the detriment of our heirs and successors.\nWe intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n*/\n\nconst float GoldenAngle = 2.39996323;\n\n// more is better quality\nconst float Iterations = 400.0;\n\nconst mat2 Rotation = mat2(\n    cos(GoldenAngle),\n    sin(GoldenAngle),\n   -sin(GoldenAngle),\n    cos(GoldenAngle)\n);\n\nconst float ContrastAmount = 150.0;\nconst vec3 ContrastFactor = vec3(9.0);\nconst float Smooth = 2.0;\n\n\n///////////\n/*\n\tcalculates circle of confusion diameter for each fixel from physical parameters and depth map\n\n\tthis function is unused\n\n\tsee http://ivizlab.sfu.ca/papers/cgf2012.pdf, page 10\n*/\nfloat blurRadius(\n    float A, // aperture\n    float f, // focal length\n    float S1, // focal distance\n    float far, // far clipping plane\n    float maxCoc, // mac coc diameter\n    \n\tvec2 uv,\n\tsampler2D depthMap)\n{\n    vec4 currentPixel = texture(depthMap, uv);\n    \n    float S2 = currentPixel.r * far;\n    \n    //https://en.wikipedia.org/wiki/Circle_of_confusion\n    float coc = A * ( abs(S2 - S1) / S2 ) * ( f / (S1 - f) );\n    \n    float sensorHeight = 0.024; // 24mm\n    \n    float percentOfSensor = coc / sensorHeight;\n    \n    // blur factor\n    return clamp(percentOfSensor, 0.0, maxCoc);\n}\n///////////\n\nvec3 bokeh(sampler2D tex, vec2 uv, float radius) {\n\tvec3 num, // numerator                       acc = areas concentric circles? ( ͡° ͜ʖ ͡°)\n\t\t weight;\n    \n    float rec = 1.0; // reciprocal \n    \n    vec2 horizontalAngle = vec2(0.0, radius * 0.01 / sqrt(Iterations));\n    \n    vec2 aspect = vec2(iResolution.y/iResolution.x, 1.0);\n    \n\tfor (float i; i < Iterations; i++) {\n        rec += 1.0 / rec;\n        \n\t    horizontalAngle = horizontalAngle * Rotation;\n        \n        vec2 offset = (rec - 1.0) * horizontalAngle;\n        \n        vec2 sampleUV = uv + aspect * offset;\n        \n        vec3 col = texture(tex, sampleUV).rgb;\n        \n        // increase contrast and smooth\n\t\tvec3 bokeh = Smooth + pow(col, ContrastFactor) * ContrastAmount;\n        \n\t\tnum += col * bokeh;\n\t\tweight += bokeh;\n\t}\n\treturn num / weight;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float rad = (iMouse.x/iResolution.x) * 14.0;\n\tfragColor = vec4(bokeh(iChannel0, uv, rad), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}