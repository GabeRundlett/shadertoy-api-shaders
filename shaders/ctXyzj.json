{
    "Shader": {
        "info": {
            "date": "1691191244",
            "description": "Start of some tests on music visualization in shadertoy",
            "flags": 32,
            "hasliked": 0,
            "id": "ctXyzj",
            "likes": 5,
            "name": "Lissajous visualizer",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "lissajous",
                "fourier",
                "notes"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 236
        },
        "renderpass": [
            {
                "code": "const float pi = 4.*atan(1.);\nconst int steps = 200;\n\nvec2 lissajous(float t, float a, float b, float d)\n{\n\treturn vec2(sin(a*t+d), sin(b*t));\n}\n\nfloat render_lissajous(vec2 uv, float a, float b, float d) {\n\n\tfloat m = 1.0;\n\tfloat period = 2.*pi;\n    vec2 lp = lissajous(iTime, a, b, d)*0.8;\n    for(int i = 1; i <= steps; i++) \n    {\n        float t = float(i)*period / float(steps);\n\t\tt += iTime;\n        vec2 p = lissajous(t, a, b, d)*0.8;\n\n        vec2 pa = uv - p;\n        vec2 ba = lp - p;\n        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n        vec2 q = pa - ba*h;\n        m = min( m, dot( q, q ) );\n\t\t\n        lp = p;\n    }\n    \n    return m;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor = vec4(0);\n    fragColor.a = 1.0;\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    float a = texture(iChannel0, uv).r;\n    float b = texture(iChannel0, uv).g;\n\n    int y_ix = int(uv.y > 0.5);\n    int x_ix = int(step(0.333, uv.x) + step(0.666, uv.x));\n\n    int octave = y_ix + 2*x_ix;\n\n    uv -= vec2(0.333, 0.5)*vec2(x_ix, y_ix);\n    uv *= vec2(3, 2);\n    uv *= 2.0;\n    uv -= 1.0;\n\n    float lissajous_dist = pow(\n        render_lissajous(uv, a, b,\n                         float(octave) + iTime), 0.4);\n    float brightness = 1.0 - 8.0*lissajous_dist;\n    vec3 col;\n    if(x_ix == 0) {\n        col = vec3(0.2, 0.2, 1.0);\n    } else if(x_ix == 1) {\n        col = vec3(0.6, 0.1, 0.7);\n    } else {\n        col = vec3(0.8, 0.1, 0.5);\n    }\n    fragColor.rgb = brightness*col;\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// low pass filter of the power in each frequency seems to stabilize note identification\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame < 5) {\n        fragColor = vec4(0, 0, 0, 1);\n    } else {\n        fragColor = 0.95*pow(texture(iChannel0, fragCoord/iResolution.xy), vec4(2))\n                  + 0.05*pow(texture(iChannel1, fragCoord/iResolution.xy), vec4(2));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 13,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// sampling of the texture thanks to Gibj\n// https://www.shadertoy.com/view/4dc3zH\n\nconst float A = 0.0370;\nconst float semitone  = pow(2.0, 1.0/12.0);\n\nfloat note_to_freq(int n){\n    return pow(semitone, float(n - 49))*440.;\n}\n\nfloat freq_to_text(float freq){\n    return freq*A/440.;\n}\n\nivec3 current_notes(float[12] texture_indices) {\n\n    float[12] texture_values;\n    for(int i = 0; i < 12; i++) {\n        texture_values[i] = texture(iChannel1, vec2(texture_indices[i], 0.25)).r;\n    }\n\n    ivec3 result = ivec3(0);\n    int count = 0;\n    \n    for(int i = 0; i < 12; i++) {\n        if(texture_values[i] > 0.02) {\n            if(texture_values[i] > texture_values[result[2]]) {\n                result[0] = result[1];\n                result[1] = result[2];\n                result[2] = i;\n            }\n            else if(texture_values[i] > texture_values[result[1]]) {\n                result[0] = result[1];\n                result[1] = i;\n            }\n            else if(texture_values[i] > texture_values[result[0]]) {\n                result[0] = i;\n            }\n        }\n    }\n\n    return result;    \n}\n\nint denominator_from_steps(int note1, int note2) {\n    int n = note2 - note1;\n    if(n < 0) {\n        return 1;\n    }\n    else if(n == 0) {\n        return 1;\n    }\n    else if(n == 1) {\n        return 8;\n    }\n    else if(n == 2) {\n        return 6;\n    }\n    else if(n == 3) {\n        return 7;\n    }\n    else if(n == 4) {\n        return 4;\n    }\n    else if(n == 5) {\n        return 3;\n    }\n    else if(n == 6) {\n        return 32;\n    }\n    else if(n == 7) {\n        return 2;\n    }\n    else if(n == 8) {\n        return 6;\n    }\n    else if(n == 9) {\n        return 8;\n    }\n    else if(n == 10) {\n        return 5;\n    }\n    else {\n        return 11;\n    }\n}\n\nivec2 get_ratios(ivec3 notes) {\n    return ivec2(denominator_from_steps(notes[0], notes[1]),\n                 denominator_from_steps(notes[1], notes[2]));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    int y_ix = int(uv.y > 0.5);\n    int x_ix = int(step(0.333, uv.x) + step(0.666, uv.x));\n\n    int octave = y_ix + 2*x_ix;\n    int start_note = 12*octave + 10;\n    float[12] texture_indices;\n    for(int i = 0; i < 12; i++) {\n        texture_indices[i] = freq_to_text(note_to_freq(start_note + i));\n    }\n    \n    ivec3 current_notes = current_notes(texture_indices);\n    ivec2 ratios = get_ratios(current_notes);\n    \n    fragColor.rg = 0.2*texture(iChannel0, uv).rg + 0.8*vec2(1 + current_notes.yz);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}