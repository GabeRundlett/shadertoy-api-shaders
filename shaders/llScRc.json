{
    "Shader": {
        "info": {
            "date": "1509495562",
            "description": "Frozen Swamp Phantom Mode",
            "flags": 0,
            "hasliked": 0,
            "id": "llScRc",
            "likes": 8,
            "name": "Frozen Swamp Phantom Mode",
            "published": 3,
            "tags": [
                "frozen",
                "swamp",
                "mode",
                "phantom"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 667
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n// link : https://www.shadertoy.com/view/lt2yWw\n\nvec2 path(float t)\n{\n\treturn vec2(cos(t * .1), sin(t * .1)) * 3.;\n}\n\nfloat fullAtan(vec2 p)\n{    return step(0.0,-p.x)*3.1415926535 + sign(p.x) * atan(p.x, sign(p.x) * p.y);\n}\n\nfloat fractus(vec2 p, vec2 v)\n{\n\tvec2 z = p;\n    vec2 c = v;\n\tfloat k = 1., h = 1.0;    \n    for (float i=0.;i<5.;i++)\n    {\n        h *= 4.*k;\n\t\tk = dot(z,z);\n        if(k > 4.) break;\n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    }\n\treturn sqrt(k/h)*log(k);   \n}\n\nvec4 dfFractus(vec3 p)\n{\n\tfloat st = 5.;\n    \n    float id = floor(p.z / st);\n    \n    float a = fullAtan(p.xy);\n    \n    vec2 c;\n    c.x = mix(0.2, -0.5, cos(a * 4. + id));\n    c.y = mix(0.5, 0.0, sin(a * 3. + id));\n    \n    p.z = mod(p.z, st) - st * .5;\n    \n    float path = length(p.xy) - 3.;\n    \n    vec2 rev = vec2(path, p.z);\n    float aa = a + id;\n    rev *= mat2(cos(aa),-sin(aa),sin(aa),cos(aa));\n\t\n\treturn vec4(fractus(rev, c) - 0.05, rev, 20.0);;\n}\n\nvec2 getTunnelPath(float t, vec2 s)\n{\n\tvec2 p = vec2(cos(t*0.2), sin(t*-0.2)) * s * 2.;\n\tt *= 0.1;\n\tp *= mat2(cos(t),-sin(t),sin(t), cos(t));\n\treturn p;\n}\n\nfloat getTutu(vec3 p)\n{\n    //p.x = mod(p.x+2.5, 5.)-2.5;\n\treturn length(p.xy)-0.5; // thick\n}\n\nvec4 minObj(vec4 a, vec4 b)\n{\n\tif (a.x < b.x) \n        return a;\n    return b;\n}\n\nvec4 df(vec3 p)\n{\n    // texture here get a error on some gpu, get a graidnet in loop error.\n    // textureLod is ok\n    vec3 tex = textureLod(iChannel0, p.xz * 0.5, 0.).rgb;\n    float disp = dot(tex, vec3(0.01));\n    \n    vec2 q = p.xy + path(p.z);\n    \n    float plane = q.y + cos(q.x * .1) - 0.8 + disp;\n\n    p.xy -= getTunnelPath(p.z,vec2(0.2,0.2));\n    float tutu = getTutu(p * vec3(0.2,0.5,1));\n    \n    vec4 ftus = dfFractus(p);\n    \n    vec4 ground = vec4(max(plane,-min(ftus.x-0.1,tutu)),0,0,10.);\n    \n    return minObj(ground, ftus);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vars\n\tvec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 mo = iMouse.xy;\n\tfloat time = iTime * 5.;\n\t\n\tvec3 col = vec3(0);\n            \n\tvec3 ro = vec3(0,0,time);\n\tro.xy += getTunnelPath(ro.z,vec2(0.2,0.2));\n    \n\tvec3 lp = ro + vec3(0,2,5);\n\t\n    vec3 cv = ro + vec3(0,0,1);\n    cv.xy += getTunnelPath(cv.z,vec2(0.2,0.2));\n    \n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n    \n  \tvec2 uv = (g+g-si)/si.y;\n   \tvec3 rd = normalize(z + uv.x*x + uv.y*y);\n\n\tfloat md = 100.;\n\n    float accum = 0.0;\n    \n\tfloat s = 1., d = 0.;\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (d*d/s > 1e6 || d > md) break;\n\t\ts = df(ro+rd*d).x;\n        s = max(abs(s), 0.01);\n\t\td += s * .4;\n        accum += 0.004;\n\t}\n\n    fragColor = vec4(0) + accum  * (1.0-exp(-0.005*d*d));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}