{
    "Shader": {
        "info": {
            "date": "1503870099",
            "description": "Display julia fractal for the mouse point. Add some jiggle to help explore the space. Aspect ratio fixed thanks to help from the user named iq",
            "flags": 0,
            "hasliked": 0,
            "id": "ltlyzN",
            "likes": 1,
            "name": "Julia fractal viewer",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "asteriskman",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "\nfloat absVal2(float r, float i) {\n  return r*r + i*i;\n}\n\nfloat rnd(float seed) {\n  float x = sin(seed) * 10000.0;\n  return x - floor(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n    float width = iResolution.x;\n    float height = iResolution.y;\n    \n    float maxTime = 5.0;\n    float modTime = mod(floor(iTime), maxTime) + fract(iTime);\n    float modNum = floor(iTime / maxTime);\n    float modRnd = rnd(modNum);\n    \n    \n    float targetX;\n    float targetY;\n    targetX = -0.5495;\n    targetY = 0.5377;\n    //targetX = rnd(modRnd*11.0) * 4.0 - 2.0;\n    //targetY = 0.0;\n    targetX = 0.0;\n    targetY = 0.0;\n\n    \n    \n    float minx = -2.0;\n    float maxx = 2.0;\n    float miny = -1.5;\n    float maxy = 1.5;\n    \n    float scale;\n    scale = pow(2.0, - modTime);\n    scale = 1.0;\n    \n    minx = targetX - 2.0 * scale;\n    maxx = targetX + 2.0 * scale;\n    miny = targetY - 1.5 * scale;\n    maxy = targetY + 1.5 * scale;\n    \n\n    //float x = (fragCoord.x / width) * (maxx - minx) + minx;\n    //float y = (fragCoord.y / height) * (maxy - miny) + miny;\n    float x = ((fragCoord.x-width*0.5) / height) * (maxy - miny);\n    float y = (fragCoord.y / height) * (maxy - miny) + miny;\n    \n    int maxIter = 200;\n    \n    float zr = 0.0;\n    float zi = 0.0;\n    float cr = x;\n    float ci = y;\n    float zrt;\n    float zit;\n    \n    int i = 0;\n    \n    zr = x ;\n    zi = y ;\n    float mouseScale = 2.0;\n    //cr = mouseScale * (iMouse.x / width - 0.5) * sin(iTime * 1.3);\n    //ci = mouseScale * (iMouse.y / height - 0.5) * cos(iTime * 0.98);\n    float timeScale = 50.0;\n    float wiggleScale = 0.001;\n    cr = mouseScale * (iMouse.x / width - 0.5) + wiggleScale * sin(iTime * timeScale);\n    ci = mouseScale * (iMouse.y / height - 0.5) + wiggleScale * cos(iTime * timeScale);\n    \n    while ((absVal2(zr, zi) < 4.0) && (i < maxIter)) {\n        //z = z^2 + c\n        //    (zr + zi)^2 + cr + ci\n        //    zr*zr -zi*zi + 2*zr*zi + cr + ci\n        zrt = zr*zr - zi*zi + cr;\n        zit = 2.0*zr*zi + ci;\n        zr = zrt;\n        zi = zit;\n        i = i + 1;\n    }\n    \n    float r = 0.0;\n    float g = 0.0;\n    float b = 0.0;\n    /*\n    if (i < maxIter) {\n        //r = float(i) / float(maxIter);\n        r = sin((float(i)/float(maxIter)) * 3.14159/2.0 + iTime*0.1);\n        g = sin((float(i)/float(maxIter)) * 3.14159/2.0 + iTime*0.3);\n        b = sin((float(i)/float(maxIter)) * 3.14159/2.0 + iTime*0.9);\n    } else {\n        r = 1.0-sin(iTime*0.1);\n        g = 1.0-sin(iTime*0.3);\n        b = 1.0-sin(iTime*0.9);\n    }\n    */\n    //r = absVal2(zr, zi) / 10.0;\n    g = 1.0 - absVal2(zr, zi) / 10.0;\n    //r = sin(absVal2(zr, zi));\n    r = absVal2(zr, zi) * float(i) / float(maxIter);\n    b = absVal2(zr, zi) / 10.0;\n    \n    fragColor = vec4(r, g, b, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}