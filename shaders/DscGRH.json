{
    "Shader": {
        "info": {
            "date": "1676941153",
            "description": "Key-board util to find the key-code corresponding to a key-press.\nTop (blue) : Is key toggled ?\nMid (green) : Did key become pressed this frame ?\nBot (red) : Is key currently pressed ?",
            "flags": 16,
            "hasliked": 0,
            "id": "DscGRH",
            "likes": 7,
            "name": "what the key",
            "published": 3,
            "tags": [
                "utility",
                "keyboard"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "float PrintInt(const in vec2 uv, const in float value);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float maxKeyCode = 200.0;\n    \n    ivec2 IJ = ivec2(fragCoord / iResolution.xy * maxKeyCode);\n    \n    vec3 keyState;\n    for (int n = 0; n < 3; ++n) {\n        keyState[n] = texelFetch(iChannel0, ivec2(IJ.x, n), 0).x;\n    }\n\n    vec3 rgb;\n\n    if (fragCoord.y > iResolution.y * 2.0 / 3.0) {\n        rgb[2] = keyState[2];\n    }\n    else if (fragCoord.y < iResolution.y * 1.0 / 3.0) {\n        rgb[0] = keyState[0];\n    }\n    else {\n        rgb[1] = keyState[1];\n    }\n\n    // draw number of smallest pressed keycode\n    for (float n = 0.0; n <= maxKeyCode; ++n) {\n        if (texelFetch(iChannel0, ivec2(n, 0), 0).x != 0.0) {\n            vec2 textP = fragCoord + vec2(-1.0, 1.0) * 20.0;\n            textP.y -= iResolution.y;\n            textP /= 100.0;\n            textP += 1.0;\n            rgb = mix(rgb, vec3(0.5, 0.6, 0.4), PrintInt(textP, n));\n            break;            \n        }\n    }\n\n    fragColor = vec4(rgb, 1.0);\n}\n\n\n//-----------------------------------------------------------------\n// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n\nfloat SampleDigit(const in float n, const in vec2 vUV)\n{       \n    if(vUV.x  < 0.0) return 0.0;\n    if(vUV.y  < 0.0) return 0.0;\n    if(vUV.x >= 1.0) return 0.0;\n    if(vUV.y >= 1.0) return 0.0;\n    \n    float data = 0.0;\n    \n         if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    else if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n    else if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n    else if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n    else if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n    else if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n    else if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    else if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n    \n    vec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n    float fIndex = vPixel.x + (vPixel.y * 4.0);\n    \n    return mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(const in vec2 uv, const in float value )\n{\n    float res = 0.0;\n    float maxDigits = 1.0+ceil(log2(value + 0.00001)/log2(10.0));\n    float digitID = floor(uv.x);\n    if( digitID>0.0 && digitID<maxDigits )\n    {\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n    }\n\n    return res; \n}\n// end of number-printing\n///////////////////////////////////////////////\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}