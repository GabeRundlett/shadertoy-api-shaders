{
    "Shader": {
        "info": {
            "date": "1656794833",
            "description": "License CC0: 2nd attempt multiscale truchet\nEveryone loves truchet tiles. Shane did an amazing one: https://www.shadertoy.com/view/4t3BW4\nBeen tinkering a bit more with multiscale truchet inspired by Shane's\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fddfRj",
            "likes": 20,
            "name": "2nd attempt multiscale truchet",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "// License CC0: 2nd attempt multiscale truchet\n// Everyone loves truchet tiles. Shane did an amazing one: https://www.shadertoy.com/view/4t3BW4\n// Been tinkering a bit more with multiscale truchet inspired by Shane's.\n// Made a height field and applied lighting to it. Kind of neat\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define DOT2(x)     dot(x,x)\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat df0(vec2 p) {\n  p -= 0.5;\n  vec2 n = round(p);\n  p -= n;\n  float h0 = hash(n+100.0);\n\n  if (h0 > 0.5) {\n    p = vec2(p.y, -p.x);;\n  }\n\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d) - 0.125;\n  return d;\n}\n\nfloat df1(vec2 p) {\n  vec2 op = p;\n  p -= 0.5;\n  vec2 n = round(p);\n  p -= n;\n  float h0 = hash(n+200.0);\n  float h1 = fract(8667.0*h0);\n\n  if (h1 < 0.5) {\n    return -(df0(2.0*op))*0.5;\n  }\n\n  if (h0 > 0.5) {\n    p = vec2(p.y, -p.x);;\n  }\n\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  p = abs(p);\n  float d2 = circle(p-0.5, 0.125*1.5);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d)-0.125*1.5;\n  d = min(d, d2);\n  return d;\n}\n\nfloat df2(vec2 p) {\n  vec2 op = p;\n  p -= 0.5;\n  vec2 n = round(p);\n  p -= n;\n  float h0 = hash(n+300.0);\n  float h1 = fract(8667.0*h0);\n\n  if (h1 < 0.5) {\n    return -(df1(2.0*op))*0.5;\n  }\n\n  if (h0 > 0.666) {\n    p = vec2(p.y, -p.x);;\n  }\n\n  float d0 = circle(p-0.5, 0.5);\n  float d1 = circle(p+0.5, 0.5);\n  p = abs(p);\n  float d2 = circle(p-0.5, 0.125);\n  float d = d0;\n  d = min(d, d1);\n  d = abs(d)-0.125;\n  d = min(d, d2);\n  d = abs(d)-0.0125*2.5;\n  return d;\n}\n\nfloat df(vec2 p) {\n  return df2(p);\n}\n\nfloat hf(vec2 p) {\n  float aa = 0.0275;\n  float d = df(p);\n  return -0.033*smoothstep(aa, -aa, -d);\n}\n\nfloat g_h3 = 0.0;\n\nfloat height(vec2 p) {\n  p *= 0.3333;\n  float h = hf(p);\n  p *= 3.0;\n  h += 0.5*hf(p);\n  p *= 3.0;\n  float h3 = hf(p);\n  h += 0.25*h3;\n  g_h3 = h3;\n  return h;\n}\n\nvec3 normal(vec2 p) {\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy) - height(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = height(p + e.yx) - height(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 effect(vec2 p) {\n  const float s = 1.0;\n  \n  const float amp = 10.0;\n  vec2 off = amp*sin(vec2(1.0, sqrt(0.5))*TIME*TAU/(30.0*amp));\n  const vec3 lp1 = vec3(1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2 = vec3(-1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n\n  vec2 p0 = p;\n  p0 += off;\n  float h = height(p0);\n  float h3= g_h3;\n  vec3  n = normal(p0);\n\n  vec3 ro = vec3(0.0, -10.0, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n  float fre   = 1.0+dot(n,rd);\n  float mh3  = smoothstep(-0.033, -0.015, h3);\n  vec3 mat   = HSV2RGB(vec3(0.66, 0.55, mix(0.75, 0.05, mh3)));\n  const vec3 lcol1 = HSV2RGB(vec3(0.60, 0.66, 6.0));\n  const vec3 lcol2 = HSV2RGB(vec3(0.05, 0.66, 2.0));\n  vec3 col = vec3(0.);\n  float dm = tanh_approx(-h*10.0+0.05);\n  float dist1 = DOT2(lp1 - po);\n  float dist2 = DOT2(lp2 - po);\n  col += (lcol1*mat)*(diff1*diff1/dist1);\n  col += (lcol2*mat)*(diff2*diff2/dist2);\n  col *= dm;\n  float rm = mix(0.125, 0.5, fre);\n  float spread = mix(80.0, 40.0, mh3);\n  col += (rm/dist1)*(pow(ref1, spread)*lcol1);\n  col += (rm/dist2)*(pow(ref2, spread)*lcol2);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p);\n  col *= smoothstep(0.0, 4.0, TIME);\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}