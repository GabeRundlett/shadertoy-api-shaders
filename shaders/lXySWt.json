{
    "Shader": {
        "info": {
            "date": "1720630696",
            "description": "attracting particles one pixel at a time",
            "flags": 32,
            "hasliked": 0,
            "id": "lXySWt",
            "likes": 76,
            "name": "Strange Attractor Party",
            "published": 3,
            "tags": [
                "particles"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 991
        },
        "renderpass": [
            {
                "code": "\n// Strange Attractor Party\n// based on \"Particles Party\" https://shadertoy.com/view/mssXDf\n// 2024-07-10 Leon Denise\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 blu = texture(iChannel1, fragCoord/1024.).rgb;\n    vec2 aspect = vec2(iResolution.y/iResolution.x, 1.);\n    \n    // background\n    vec3 background = vec3(.25);\n    float vignette = smoothstep(-.5,.5,length(uv-.5)+blu.z*.1);\n    background *= vignette;\n    \n    // drawing data\n    vec4 data = texture(iChannel0, uv);\n    float shade = data.r;\n    float id = data.g;\n    \n    // particles data\n    vec3 position = texelFetch(iChannel0, ivec2(id, 1.), 0).xyz;\n    vec3 previous = texelFetch(iChannel0, ivec2(id, 2.), 0).xyz;\n    float velocity = distance(position, previous);\n    \n    // coloring\n    vec3 tint = .5+.5*cos(vec3(1,2,3)*5. + velocity*10.+3.);\n    velocity = smoothstep(.0,.1,velocity-.2);\n    color = vec3(.5);\n    color *= mod(id, 2.);\n    color = mix(color, tint, velocity);\n    \n    // lighting\n    vec3 un = vec3(0.005*aspect, 0);\n    #define T(un) texture(iChannel0, uv+un).r\n    vec3 normal = normalize(vec3(T(un.xz)-T(-un.xz),T(un.zy)-T(-un.zy), .5));\n    float d = dot(normal, normalize(vec3(0,-1,-1)))*.5+.5;\n    color += pow(d, 1.5);\n    \n    // background\n    float alpha = smoothstep(.0,.1,shade);\n    alpha *= smoothstep(4.,10.,fragCoord.y);\n    color = mix(background, color, alpha);\n    \n    /*\n    uv.y = 1.-uv.y;\n    uv *= 1./aspect*4.;\n    if (uv.x < 1. && uv.y < 1.)\n    {\n        uv.x = floor(uv.x*20.) + floor(uv.y*20.) * 20.;\n        uv.y = 1.;\n        color = ((texelFetch(iChannel0, ivec2(uv.x, 0.), 0).rgb/4.));\n    }\n    */\n    \n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Strange Attractor Party\n// based on \"Particles Party\" https://shadertoy.com/view/mssXDf\n// 2024-07-10 Leon Denise\n\nconst float count = 400.;\n\n// https://www.dynamicmath.xyz/strange-attractors/\nvec3 thomas(vec3 p, float rng)\n{\n    float b = 0.208186;//-0.1*rng;\n    float speed = mix(0.1, 0.25, rng);\n    vec3 offset = vec3(sin(p.y)-b*p.x, sin(p.z)-b*p.y, sin(p.x)-b*p.z);\n    //offset = normalize(offset) * min(length(offset), .9);\n    return p + speed*offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float id = fragCoord.x;\n    \n    // buffer\n    vec4 frame = texture(iChannel0, uv);\n    \n    // first line of particles data (force field)\n    if (fragCoord.y < 1. && fragCoord.x < count)\n    {\n        // init\n        if (iFrame < 1)\n        {\n            // random position\n            frame = vec4(hash41(id)*2.-1.)* 4.;\n        }\n        else\n        {\n            // coordinates\n            vec2 aspect = vec2(iResolution.x/iResolution.y, 1.);\n            \n            // apply strante attractor\n            frame.xyz = thomas(frame.xyz, hash11(id));\n            \n            // jitter\n            frame.xyz += (hash41(id).xyz-.5)*.01;\n            \n            // extra displace\n            //vec4 seed = hash41(id+196.);\n            //frame.xz *= rot(-0.1*seed.x);\n        }\n    }\n    \n    // second line of data (rotate)\n    else if (fragCoord.y > 0. && fragCoord.y < 2. && fragCoord.x < count)\n    {\n        frame = texelFetch(iChannel0, ivec2(id,0), 0);\n        \n        // mouse interaction\n        if (iMouse.z > 0.)\n        {\n            // mouse control\n            vec2 m = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n            frame.xz *= rot(m.x);\n            frame.yz *= rot(m.y);\n        }\n        else\n        {\n            // constant rotation\n            frame.xz *= rot(iTime*.5);\n            \n            // funky rotation\n            float time = iTime + frame.z * .1;\n            vec2 anim = vec2(fract(time), floor(time));\n            anim.x = easeInOut(anim.x);\n            vec4 rng = mix(hash41(anim.y), hash41(anim.y+1.), anim.x);\n            rng = rng*2.-1.;\n            frame.xyz = rndrot(frame.xyz, rng);\n        }\n    }\n    \n    // third line of data (save previous state)\n    else if (fragCoord.y > 1. && fragCoord.y < 3. && fragCoord.x < count)\n    {\n        frame = texelFetch(iChannel0, ivec2(fragCoord.x,1), 0);\n    }\n    \n    // draw disks\n    else\n    {\n        float matID = 0.;\n        float dist = 100.;\n\n        // blue noise scroll https://www.shadertoy.com/view/tlySzR\n        ivec2 pp = ivec2(fragCoord);\n        pp = (pp+(iFrame*196)*ivec2(113,127)) & 1023;\n        vec3 blu = texelFetch(iChannel1,pp,0).xyz;\n\n        // fetch particles data\n        for (float i = min(0., iTime); i < count; ++i)\n        {\n            vec4 data = texelFetch(iChannel0, ivec2(i,1), 0);\n            vec4 previous = texelFetch(iChannel0, ivec2(i,2), 0);\n            data = mix(data, previous, blu.z);\n            float z = data.z*2.+10.;\n            vec2 pos = data.xy / z;\n            float shape = length(pos-p)+z*.002-.01-.01*hash11(i);\n            \n            matID = shape < dist ? i : matID;\n            dist = min(dist, shape);\n        }\n\n        // grayscale\n        float thin = 0.02;\n        frame.r = smoothstep(thin,.0,dist);\n        \n        // material layer\n        if (dist < thin) frame.g = matID;\n    }\n    \n    fragColor = frame;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nmat2 rot (float a) { float c=cos(a),s=sin(a);return mat2(c,-s,s,c); }\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 3; ++i, a/=2.)\n    {\n        result += (gyroid(seed/a))*a;\n    }\n    return result;\n}\n\n\nfloat easeInOut (float x)\n{\n    return x * x * (3. - 2. * x);\n}\n\n// https://suricrasia.online/blog/shader-functions/\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\nvec3 rndrot(vec3 p, vec4 rnd) {\n  return erot(p, normalize(tan(rnd.xyz)), rnd.w*acos(-1.));\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}