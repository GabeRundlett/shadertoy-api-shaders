{
    "Shader": {
        "info": {
            "date": "1479732646",
            "description": "After Sol Lewitt\n\nfor Codevember 2016, day 21",
            "flags": 0,
            "hasliked": 0,
            "id": "MldSD4",
            "likes": 16,
            "name": "Complex Form with Black and Whit",
            "published": 3,
            "tags": [
                "voronoi",
                "codevember"
            ],
            "usePreview": 0,
            "username": "xorxor",
            "viewed": 771
        },
        "renderpass": [
            {
                "code": "// Created by XORXOR, 2016\n// Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\n// https://www.shadertoy.com/view/MldSD4\n//\n// Thanks to iq for voronoi\n// https://www.shadertoy.com/view/ldl3W8\n\nvec2 hash( vec2 p )\n{\n\treturn fract( sin( vec2( p.x * p.y, p.x + p.y ) ) * vec2( 234342.1459123, 373445.3490423 ) );\n}\n\n// iq's voronoi\n// https://www.shadertoy.com/view/ldl3W8\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr, mo;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n            mo = o;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mo );\n}\n\nvoid mainImage( out vec4 O, vec2 p )\n{\n\tvec2 b = p / iResolution.x;\n    p /= iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 v = voronoi( b * 6.0 );\n    \n    float rr = 5.28 * v.z;\n    float c = cos( rr );\n    float s = sin( rr );\n    mat2 r = mat2( c, -s, s, c );\n    vec2 q = b * r;\n    \n    float o = smoothstep( 0.25, 0.4, 0.48 + 0.5 * sin( 150.0 * q.y + 5.0 * iTime ) );\n    o = mix( 0.0, o, smoothstep( .03, 0.06, v.x ) );\n    \n    vec2 border = vec2( 0.03 );\n    border.x /= aspect;\n    for ( float i = 3.0; i > 0.0; i -= 1.0 )\n    {\n        float c = mod( i + 1.0, 2.0 );\n    \to = mix( c, o, step( i * border.x, p.x ) );\n    \to = mix( c, o, step( i * border.y, p.y ) );\n    \to = mix( c, o, 1.0 - step( 1.0 - i * border.x, p.x ) );\n    \to = mix( c, o, 1.0 - step( 1.0 - i * border.y, p.y ) );\n    }\n\tO = vec4( vec3( o ), 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}