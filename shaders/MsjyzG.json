{
    "Shader": {
        "info": {
            "date": "1492626663",
            "description": "Watching an old Numberphile video i decided to give it a go.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsjyzG",
            "likes": 5,
            "name": "Super Basic Mandelbrot",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "b"
            ],
            "usePreview": 0,
            "username": "Karambit",
            "viewed": 1744
        },
        "renderpass": [
            {
                "code": "/********************************\n\nVery basic Mandelbrot fractal rendering.\n\nIt uses the smooth iteration count as described here: \nhttps://iquilezles.org/articles/msetsmooth\n\n\n********************************/\n\n#define MAX_ITERATIONS 128\n#define B 4.0\n#define ZOOM 1.15\n#define POSITION vec2(-0.5, 0.0)\n\n//Function to square complex numbers\nvec2 ipow2(vec2 i)\n{\n    return vec2(i.x*i.x - i.y*i.y, 2.0*i.x*i.y);\n}\n\nvec2 ipow3 (vec2 i)\n{\n    return vec2 ( pow(i.x, 3.0) - 3.0 * i.x * pow(i.y, 2.0), \n                 3.0 *pow(i.x, 2.0) * i.y - pow(i.y, 3.0));\n}\n\nvec2 ipow4 (vec2 i)\n{\n    return vec2(pow(i.x, 4.0) - 6.0 * pow(i.x, 2.0) * pow(i.y, 2.0) + pow(i.y, 4.0),\n               4.0 * pow(i.x, 3.0) * i.y - 4.0 * i.x * pow(i.y, 3.0));\n}\n\n//Fractal calculation loop\nfloat mandelbrot(in vec2 c, inout vec2 z){\n    //Don't use floating point numbers in a for loop, it's evil.\n    float t;\n    for(int i=0;i<MAX_ITERATIONS;++i){\n        z = ipow2(z) + c;\n        //Does it go off bounds?\n        if( dot(z,z)>B*B ) {\n            break;\n        }\n        t+=1.0;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = ( fragCoord.xy / iResolution.xy\n        \t\t* 2.0 - 1.0)\n        \t\t* vec2(iResolution.x/iResolution.y, 1.0);\n    \n    float time = iTime;\n    \n    //Center the uv coordinates\n    vec2 c = uv * ZOOM + POSITION;\n    vec3 col = vec3(0.0);\n    vec2 z = vec2(0.0);\n    \n\tfloat f = mandelbrot(c, z);\n    \n    //Smooth iteration count by IÃ±igo Quilez\n    f = f - log2(log2(dot(z,z))) + 4.0;\n    \n    //color gradient\n    col = vec3(cos(f*0.3+time), sin(f*0.2+time), cos(f*0.5+time));\n    \n\tfragColor = vec4(normalize(col), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}