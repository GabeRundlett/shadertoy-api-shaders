{
    "Shader": {
        "info": {
            "date": "1535748156",
            "description": "Tulip animation (was originally supposed to be Pacman but whatever)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKyWR",
            "likes": 3,
            "name": "Tulip",
            "published": 3,
            "tags": [
                "flower",
                "animation",
                "tulip"
            ],
            "usePreview": 0,
            "username": "Redline",
            "viewed": 612
        },
        "renderpass": [
            {
                "code": "#define tau 6.28318530718\n\nconst int res = 128;\nconst float speed = .1;\nconst float detune = .5;\nconst float zoom = 1.3;\nconst float blur = .1;\n\nfloat rectSin(float phase){\n\treturn sin(phase) / 2. + 1.;\n}\nfloat circle(float radius, vec2 pos){\n\treturn radius - length(pos);\n}\nfloat ring(float radius, vec2 pos){\n\treturn abs(radius - length(pos));\n}\nvec3 leaf(vec2 uv,float angle){\n\tvec3 col = vec3(0);\n    for(int i = 0; i < res;i++){\n\t    float prog = float(i) / float(res);\n\t    float phase = (iTime * speed + prog * detune) * tau;\n    \tfloat radius = 1. - abs(atan(uv.x,uv.y) + angle) * 1. * rectSin(phase);\n        float ringBright = smoothstep(1.,0.,ring(radius,uv) / blur);\n        float fillBright = smoothstep(0.,1.,circle(radius,uv) / blur) / 20.;\n        float bright = ringBright + fillBright;\n    \tcol += vec3(\n                prog,\n                rectSin(phase) + .5,\n                rectSin(prog*tau) + prog\n            ) * bright;\n    }\n\n    return col / (float(res) * blur * 10.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy ;\n    uv.x = uv.x *  2. -1.;\n    uv.x /= iResolution.y / iResolution.x;\n    uv.y = uv.y * zoom + (1. - zoom) + .1;\n\n    vec3 col = vec3(0);\n    col = max(col,leaf(uv,0.));\n    \n    float angle = rectSin(iTime / tau) / 2.;\n    col = max(col,leaf(uv,angle));\n    col = max(col,leaf(uv,-angle));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}