{
    "Shader": {
        "info": {
            "date": "1536399396",
            "description": "noise test 4",
            "flags": 0,
            "hasliked": 0,
            "id": "XtGcWw",
            "likes": 7,
            "name": "noise test line",
            "published": 3,
            "tags": [
                "noisetest4"
            ],
            "usePreview": 0,
            "username": "teebnike",
            "viewed": 1714
        },
        "renderpass": [
            {
                "code": "float hash(float y){\n\treturn fract(sin(y)*100.123);\n}\n\nfloat fade(float t){\n\treturn t*t*t*(t*(t*6.-15.)+10.);\n}\n\nfloat noise1(float x){\n   \n    float s = floor(x);\n    float e = fade(fract(x));\n    \n\treturn mix(\n    \tmix(hash(s),hash(s-1.),e),\n        mix(hash(s-1.),hash(s+1.),e),\n        e\n    );\n}\n    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    float speed = 0.8;\n    float y = noise1(fragCoord.x*0.001 + iTime*speed);\n    float y2 = noise1(fragCoord.x*0.001 + iTime *speed*0.8);\n    float y3 = noise1(fragCoord.x*0.001 + iTime*speed*0.6);\n    float y4 = noise1(fragCoord.x*0.001 + iTime*speed*0.4);\n    vec3 col = vec3(1.);\n    \n    \n    col = vec3( pow(1.-distance(uv.y,y) ,10.) )*vec3(.9,.2,.3);\n    col += vec3( pow(1.-distance(uv.y,y2) , 10.) )*vec3(.2,.9,.3);\n    col += vec3( pow(1.-distance(uv.y,y3) , 10.) )*vec3(.4,.5,.9);\n    col += vec3( pow(1.-distance(uv.y,y4) , 10.) )*vec3(.7,.4,.3);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}