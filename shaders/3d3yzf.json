{
    "Shader": {
        "info": {
            "date": "1601364002",
            "description": "variant of \"Smooth Winding Number\" by Ultraviolet. [url]https://shadertoy.com/view/Wddyz2[/url]\ntesting \"hand drawing\": discontinuous superimposed contours\n\nclick to threshold in/out\nchange comments for hatching parameters",
            "flags": 0,
            "hasliked": 0,
            "id": "3d3yzf",
            "likes": 22,
            "name": "Smooth Winding Number - discont",
            "published": 3,
            "tags": [
                "number",
                "smooth",
                "hatching",
                "filling",
                "expressive",
                "winding",
                "handdrawing"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 716
        },
        "renderpass": [
            {
                "code": "// variant of \"Smooth Winding Number\" by Ultraviolet. https://shadertoy.com/view/Wddyz2\n// see papers:   https://igl.ethz.ch/projects/winding-number \n//               https://www.dgp.toronto.edu/projects/fast-winding-numbers/\n\n#define ang(p)          atan((p).y, (p).x)\n#define angle(p0,p1)  ( mod( ang(p1) - ang(p0) - PI, 2.*PI ) -PI )\n#define P(n)            cos(PI*2.*(n+phase)/N + vec2(0,11) ) + .2* hash(n)\n#define hash(p)         fract(sin( (p)* vec2(12.9898, 78.233)) * 43758.5453) // https://www.shadertoy.com/view/llySRh\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 3.* ( u - R*.5)/R.y;\n    \n    float  N = 50.,\n          PI = 3.1416,\n           t = floor( fract(iTime*.2) *N*2. ),\n       N_min = max(0.,t-N),\n       N_max = min(N ,t),\n       phase = 10.*iTime,\n           a = 0.;\n    for(float i = N_min; i < N_max; i++ ) \n        if ( mod(i,2.) < 1. ) \n            a += angle( P(i-.9) -U, P(i+1.9) - U ) * 2./2.9;\n         // a += angle( P(i   ) -U, P(i+1.9) - U ) * 2./1.9;\n         // a += angle( P(i   ) -U, P(i+1. ) - U ) * 2./1.;\n    \n    O = vec4( .5 + .5* a/6.28  ); \n // O = vec4(floor(O*16.)/16.);  // see isovalues\n    if ( iMouse.z > 0.) {\n        if (a < 0.  ) O.b++;\n        if (a > 3.14) O.b--;\n    }\n    if ( fract(iTime/5.) > .5 ) O = ( .6 + .6 * cos( 6.3 * O.r + vec4(0,23,21,0) ) );  // hue. https://www.shadertoy.com/view/llySRh\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}