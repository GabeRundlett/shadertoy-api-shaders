{
    "Shader": {
        "info": {
            "date": "1469470802",
            "description": "Experimenting with more complex csg. Rotate the camera with the mouse. Disable AO/shadows by commenting out the defines. \nTorus and capsule distance functions from https://iquilezles.org/articles/distfunctions/distfunctions.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "ltdGD4",
            "likes": 4,
            "name": "Column Room",
            "published": 3,
            "tags": [
                "csg",
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 767
        },
        "renderpass": [
            {
                "code": "#define AO\n#define SHADOWS\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nfloat closeObj = 0.0;\n\nfloat capsule(vec3 p, vec3 a, vec3 b, float r){\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz) - t.x, p.y);\n  return length(q) - t.y;\n}\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\nvec2 mapMat(vec3 p){\n    vec3 q = p;\n    p = vec3(mod(p.x, 5.0) - 2.5, p.y, mod(p.z, 5.0) - 2.5);\n    p -= vec3(0.0, 0.0, 0.0);\n    float qpi = 3.141592 / 4.0;\n    float sub = 10000.0;\n    for(float i = 0.0; i < 8.0; i++){\n        float x = 0.2 * cos(i * qpi);\n        float z = 0.2 * sin(i * qpi);\n        vec3 transp = p - vec3(x, 0.0, z);\n        vec3 a = vec3(x, 1.2, z);\n        vec3 b = vec3(x, -1.2, z);\n        sub = min(sub, capsule(transp, a, b, 0.1));\n    }\n    float ttorus = torus(p - vec3(0.0, -1.5, 0.0), vec2(0.22));\n    float btorus = torus(p - vec3(0.0, 1.5, 0.0), vec2(0.22));\n    float u = min(btorus, ttorus);\n    vec2 column = vec2(min(u, max(-sub, length(p.xz) - 0.35)), 2.0);\n    vec2 flo = vec2(q.y + 1.5, 1.0);\n    vec2 roof = vec2(-q.y + 1.5, 1.0);\n    return vecMin(column, vecMin(flo, roof));\n}\n\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0.0;\n    float d = 0.0;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 1000; i++){\n        c = mapMat(ro + rd * t);\n        d = c.x;\n        if(d < 0.0001){\n            inter = 1;\n            break;\n        }\n        t += d;\n        if(t > 30.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        t = -1.0;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(0.0, 1.0, 0.0);\nvec3 lightPos = vec3(0.0, 1.0, -1.0);\n\nvec3 amb(vec3 c, float k){\n    return c * k;\n}\n\nvec3 diff(vec3 c, float k, vec3 p){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    return c * k * max(0.0, dot(n, l));\n}\n\nvec3 spec(vec3 c, float k, vec3 p, float a){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - camPos);\n    float facing = dot(l, n) > 0.0 ? 1.0 : 0.0;\n    vec3 r = reflect(l, n);\n    return c * k * facing * pow(max(0.0, dot(r, v)), a);\n}\n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.4;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 1000; iter++){\n        d = map(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 25; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(2.0 * occ, 0.0, 1.0);\n}\n\nfloat s = 1.0;\nfloat ao = 1.0;\n\nvec3 colour(vec3 p, float id){\n    \n    #ifdef SHADOWS\n    float s = shadow(p, normalize(lightPos - p));\n    #endif\n    \n    #ifdef AO\n    float ao = occlusion(p, normal(p));\n    #endif\n    \n    if(id == 1.0){\n        vec3 col;\n        vec2 t = mod(floor(p.xz), 2.0);\n        if(t == vec2(0.0) || t == vec2(1.0)){\n            col = vec3(0.2);\n        }else{\n            col = vec3(0.8);\n        }\n        //floor(s) is 1.0 only when the point is completely unshadowed - removes specular highlight from shadowed areas\n        return amb(col, 0.5) * ao + diff(col, 0.9, p) + floor(s) * spec(vec3(1.0), 0.3, p, 4.0) - vec3(0.4 - 0.4 * s);;\n    }else if(id == 2.0){\n    \tvec3 col = vec3(0.929412, 0.882353, 0.788235);\n    \treturn amb(col, 0.5) * ao + diff(col, 0.9, p) + floor(s) * spec(vec3(1.0), 0.3, p, 4.0) - vec3(0.4 - 0.4 * s);\n    }\n    return vec3(0.0, 1.0, 0.0);\n} \n\nfloat lastx = 0.0;\nfloat lasty = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    camPos = vec3(0.0 , 0.0, 0.0);\n    lightPos = vec3(0.0, 0.0, 10.0 * sin(iTime/ 2.0));\n    lastx += iMouse.x - 0.5;\n    lasty += iMouse.y - 0.5;\n    vec3 ro = camPos;\n    vec3 rd = normalize(rotY(radians(lastx)) * rotX(radians(lasty)) * vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(1.0);\n    //If intersected\n    if(d > 0.0){\n    \tcol = colour(c, closeObj);\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}