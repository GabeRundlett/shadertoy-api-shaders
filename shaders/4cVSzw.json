{
    "Shader": {
        "info": {
            "date": "1715046742",
            "description": "道生一、一生二、二生三、三生万物 (0 to 1 - 1 to 2 - 2 to 3 - 3 to everything)",
            "flags": 32,
            "hasliked": 0,
            "id": "4cVSzw",
            "likes": 4,
            "name": "The Way of Taoism",
            "published": 3,
            "tags": [
                "2d",
                "taichi",
                "gossip",
                "philosophy"
            ],
            "usePreview": 0,
            "username": "Delincoter",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\nmat2 Rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    \n    return mat2(c, -s, s, c);\n}\n\nvec3 gua(vec2 uv, float a, vec3 b)\n{\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    float Yao = abs(sin(length(uv*100.)));\n    \n\n    \n    uv *= Rot(PI*0.125*a);\n    Yao *= smoothstep(0.0,0.01,uv.y) * smoothstep(0.0,0.01,uv.x);\n    uv *= Rot(PI*0.25);\n    Yao *= smoothstep(0.41,0.4,length(uv)) * smoothstep(0.31,0.32,length(uv));\n    Yao *= smoothstep(0.0,0.01,uv.x);\n    \n    uv *= Rot(PI*0.125);\n    float m = pow(1.-smoothstep(0.005,-0.005,uv.x)*smoothstep(-0.005,0.005,uv.x),100.);\n    \n    if(length(uv)<0.345) m = mix(m, 1., b.x);\n    else if(length(uv)>0.377) m = mix(m, 1., b.z);\n    else m = mix(m, 1., b.y);\n    \n    Yao *= max(m,0.);\n    \n    return Yao * vec3(b.x,b.z,b.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 karma = texture(iChannel0, uv).rgb;\n    \n    float event = smoothstep(15., 20., time);\n    \n    karma += gua(uv, 1., vec3(0.,1.,0.)) * event; //坎\n    karma += gua(uv, 3., vec3(0.,0.,1.)) * event; //艮\n    karma += gua(uv, 5., vec3(-1.,-1.,-1.)) * event; //坤\n    karma += gua(uv, 7., vec3(1.,0.,0.)) * event; //震\n    karma += gua(uv, 9., vec3(1.,0.,1.)) * event; //离\n    karma += gua(uv, 11., vec3(1.,1.,0.)) * event; //兑\n    karma += gua(uv, 13., vec3(1.,1.,1.)) * event; //乾\n    karma += gua(uv, 15., vec3(0.,1.,1.)) * event; //巽\n    \n    uv.x *= iResolution.x/iResolution.y;\n    karma += texture(iChannel1, uv).rgb * smoothstep(20.,25., time);\n    \n    fragColor = vec4(karma, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 space = fragCoord/iResolution.xy;\n    \n    vec3 karma = texture(iChannel0, space).rgb;\n    space -= .5;\n    space.x *= iResolution.x/iResolution.y;\n\n    \n    float Yang = length(space + vec2(sin(time*5.), cos(time*5.)) * min(time * 0.01, 0.1));//阳\n    float Yin = length(-space + vec2(sin(time*5.), cos(time*5.)) * min(time * 0.01, 0.1));//阴\n    \n    Yang = smoothstep(min(time,0.1), min(time*0.1, 0.09), Yang);\n    Yin = smoothstep(min(time,0.1), 0.09, Yin)*clamp((time-5.)*0.1,0.,1.);\n\n    karma += Yang - Yin;\n\n    fragColor = vec4(karma*0.9, 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float event = smoothstep(10.,15., time);\n    \n    float background = 0.25 * event;\n    \n    vec3 karma = clamp(texture(iChannel0, uv).rgb + background, 0., 1.);\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float Yang = length(uv+vec2(sin(time*5.),cos(time*5.))*0.1);\n    float Yin = length(-uv+vec2(sin(time*5.),cos(time*5.))*0.1);\n    \n    Yang = smoothstep(.025, 0.024, Yang);\n    Yin = smoothstep(.025, 0.024, Yin);\n    \n    \n    karma -= (Yang - Yin) * event;\n\n\n    fragColor = vec4(karma, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}