{
    "Shader": {
        "info": {
            "date": "1510315377",
            "description": "surely you'll recognize ...",
            "flags": 0,
            "hasliked": 0,
            "id": "ltBcD3",
            "likes": 33,
            "name": "Portal 2 Box Flip Rotation",
            "published": 3,
            "tags": [
                "2d",
                "transition",
                "portal",
                "flip"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 3233
        },
        "renderpass": [
            {
                "code": "// inspired by shader from VoidChicken\n// https://www.shadertoy.com/view/XtdXR2\n// ... and portal of course ;)\n\n// 1 .. 3\nconst int transitionType = 1;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    float depth = -1e3;\n    for (float i=0. ; i<=1. ; ++i)\n    {\n        vec2 xy = fragCoord - iResolution.xy / 2.0;\n        float grid_width = 64.0;\n        xy /= grid_width;\n        xy.y += i + .5;\n        xy.y /= 2.;\n        vec2 grid = floor(xy);\n        xy -= grid + 0.5;\n        xy.y *= 2.;\n        grid.y = grid.y * 2. - i;\n\n        float phase = 0.0;//iMouse.x / iResolution.x;\n        float offset = (grid.y - grid.x)*0.1;\n        float time = iTime*1.0 - offset;\n        if (transitionType == 1)\n            // looping + wrapping\n            time = mod(time, 6.0);\n        else if (transitionType == 2)\n            // flip once\n            time = clamp(time - 1., 0., 1.);\n        else if (transitionType == 3)\n            ;// flip and return once\n        phase += smoothstep(0.0, 1.0, time);\n        phase += 1.0 - smoothstep(3.0, 4.0, time);\n        phase = abs(mod(phase, 2.0)-1.0);\n        \n        float side = step(0.5, phase);\n\n        float angle = radians(phase * 180.), z = 2.;\n        vec3 p = inverse(mat3(cos(angle),0,-sin(angle), 0,1,0, 0,0,z)) * vec3(xy, z);\n        vec2 uv = p.xy / p.z + .5;\n\n        float alpha = 1.;\n        if (uv.x>=0.0&&uv.y>=0.0&&uv.x<=1.0&&uv.y<=1.0 && p.z>depth)\n            depth = p.z;\n        else\n            alpha = 0.;\n\n        vec2 scale = grid_width / iResolution.xy;\n        vec2 uv1 = (grid + uv                   ) * scale + .5;\n        vec2 uv2 = (grid + vec2(1. - uv.x, uv.y)) * scale + .5;\n        vec4 c1 = texture(iChannel0, uv1);\n        vec4 c2 = texture(iChannel1, uv2);\n\n        fragColor = mix(fragColor, mix(c1, c2, side), alpha);\n        //fragColor = mix(fragColor, vec4(p.z-1., 1.-p.z, 0, 1)*10., alpha);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// original shader\n\n/*\n// inspired by shader from VoidChicken\n// https://www.shadertoy.com/view/XtdXR2\n// ... and portal of course ;)\n\n// 1 .. 3\n#define TRANSITION_TYPE 1\n\nvec2 plane(vec3 p, vec3 d, vec3 normal)\n{\n    vec3 up = vec3(0,1,0);\n    vec3 right = cross(up, normal);\n    \n    float dn = dot(d, normal);\n    float pn = dot(p, normal);\n    \n    vec3 hit = p - d / dn * pn;\n    \n    vec2 uv;\n    uv.x = dot(hit, right);\n    uv.y = dot(hit, up);\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord - iResolution.xy / 2.0;\n    float grid_width = 64.0;\n    xy /= grid_width;\n    vec2 grid = floor(xy);\n    xy = mod(xy, 1.0) - 0.5;\n    \n    float alpha = 0.0;//iMouse.x / iResolution.x;\n    float offset = (grid.y - grid.x)*0.1;\n    float time = iTime*1.0 - offset;\n#if TRANSITION_TYPE == 1\n    // looping + wrapping\n    time = mod(time, 6.0);\n#elif TRANSITION_TYPE == 2\n    // flip once\n    time = clamp(time - 1., 0., 1.);\n#elif TRANSITION_TYPE == 3\n    // flip and return once\n#endif\n    alpha += smoothstep(0.0, 1.0, time);\n    alpha += 1.0 - smoothstep(3.0, 4.0, time);\n    alpha = abs(mod(alpha, 2.0)-1.0);\n    \n    float side = step(0.5, alpha);\n    \n    alpha = radians(alpha*180.0);\n    vec4 n = vec4(cos(alpha),0,sin(alpha),-sin(alpha));\n    vec3 d = vec3(1.0,xy.y,xy.x);\n    vec3 p = vec3(-1.0+n.w/4.0,0,0);\n    vec2 uv = plane(p, d, n.xyz);\n    \n    uv += 0.5;\n    if (uv.x<0.0||uv.y<0.0||uv.x>1.0||uv.y>1.0)\n    {\n        fragColor *= 0.0;\n        return;\n    }\n    \n    vec2 guv = grid*grid_width/iResolution.xy+0.5;\n    vec2 scale = vec2(grid_width)/iResolution.xy;\n    vec4 c1 = texture(iChannel0, guv + vec2(1.0-uv.x,uv.y)*scale);\n    vec4 c2 = texture(iChannel1, guv + vec2(uv.x,uv.y)*scale);\n    \n    fragColor = mix(c1, c2, side);\n}\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}