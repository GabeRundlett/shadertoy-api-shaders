{
    "Shader": {
        "info": {
            "date": "1610092469",
            "description": "So i made a fourier editor and then realized that this just doesn't make sense, how should a fourier compress images?\n(if you set EPS in buf A to 0.5 you should gain an image compressed at 50%, i was expecting more...)\n\nClick on the screen to edit.",
            "flags": 32,
            "hasliked": 0,
            "id": "WldcWf",
            "likes": 4,
            "name": "Fourier editor",
            "published": 3,
            "tags": [
                "fourier"
            ],
            "usePreview": 0,
            "username": "Ric3cir121",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "#define _a \\\n/|----------------- Fourier Editor -------------------|\\\n/| This editor allow you to play with a 1D Fourier    |\\\n/| Buffer A: Fourier process                          |\\\n/| Image   : Display the result                       |\\\n/|                                                    |\\\n/| Up  : Show the fourier version of the down version |\\\n/| Down: Click with the mouse to draw                 |\\\n/|----------------------------------------------------|\\\n\n\nvoid mainImage(out vec4 o,vec2 u){\n    float t1 = texelFetch(iChannel0,ivec2(u.x,0),0).x;\n    float t2 = texelFetch(iChannel0,ivec2(u.x,2),0).x;\n    \n    float df = texelFetch(iChannel0,ivec2(0),0).x-texelFetch(iChannel0,ivec2(0,2),0).x;\n    \n    float p1 = abs(t1*iResolution.y/2.-u.y);\n    float p2 = abs((t2+df+1.)*iResolution.y/2.-u.y);\n    \n    o = 1.-vec4(clamp(min(p1,p2),0.,1.));\n    if(u.y>iResolution.y/2.)o += t2+df;\n    else                    o += t1;\n    o += abs(u.y-floor(iResolution.y/2.)+.5)<1.?vec4(1.,.5,0,0):vec4(0);\n    float d1 = floor(iResolution.x/100.)*10.;\n    o += min(fract(u.x/d1),fract(u.y/d1))<1./d1?.25:0.;\n    float d2 = floor(iResolution.x/100.);\n    o += max(fract(u.x/d2),fract(u.y/d2))<1./d2?.25:0.;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _b \\\n/|------------------------------------- Buffer A --------------------------------------|\\\n/| Part 1: The image that you can edit by clicking with the mouse on screen            |\\\n/| Part 2: Fourier data get stored                                                     |\\\n/| Part 3: The upper image on the screen that is the compressed image using fouriers   |\\\n/|                                                                                     |\\\n/| Precision: Set EPS to: 2 = original image, 1 = no compression, 0.5 = 50% compressed |\\\n/|-------------------------------------------------------------------------------------|\\\n\n#define EPS .2\n#define PI acos(-1.)\n\nfloat csin(float p){return sin(p)/2.+.5;}\n\nvoid mainImage(out vec4 o,vec2 u){\n    if(int(u.y)==0){\n        // Part 1\n        o = texelFetch(iChannel0,ivec2(u),0);\n\n        if(floor(iMouse.xy) == vec2(0)){\n            float Wave = (u.x/iResolution.x+0.25)*PI*2.;\n            o = vec4(csin(Wave+iTime)+csin((Wave+iTime)*2.)+fract(sin(floor(u.x/10.)*10.)*100.)/10.,0,0,0)/3.;\n        }\n\n        if(iMouse.z>0.&&length(iMouse.x-u.x)<10.&&iMouse.y<iResolution.y/2.)\n        o = vec4(iMouse.y/iResolution.y*2.,0,0,0);\n    }\n    \n    if(int(u.y)==1){\n        // Part 2\n        float Speed = floor(u.x/1.)*2.;\n        vec2 Result = vec2(0);\n        int Precision = int(iResolution.x*2.);\n        for(int i=0 ; i<Precision ; i++){\n            float Pos = float(i)/float(Precision);\n            float Height = texelFetch(iChannel0,ivec2(Pos*iResolution.x,0),0).x;\n            float Rotation = Pos * Speed * PI;\n            Result += vec2(sin(Rotation),cos(Rotation))*Height/float(Precision);\n        }\n        o = vec4(length(Result),atan(Result.x,Result.y)/PI/2.+.5,0,0);\n    }\n    \n    if(int(u.y)==2){\n        // Part 3\n        float r = 0.;\n        int mxi = int(iResolution.x*(EPS)/2.);\n        for(int i = 1;i<mxi;i++){\n            vec2 par = texelFetch(iChannel0,ivec2(i,1),0).xy;\n            float s = float(i);\n            float h = par.x;\n            float o = par.y+.25;\n            r += (sin((u.x/iResolution.x*s-o)*PI*2.)+1.)*h*2.;\n        }\n        o = vec4(r,0,0,0)/1.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}