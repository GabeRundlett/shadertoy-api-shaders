{
    "Shader": {
        "info": {
            "date": "1496961369",
            "description": "demonstrates a bug in chrome",
            "flags": 0,
            "hasliked": 0,
            "id": "MdfBR2",
            "likes": 2,
            "name": "ChromeBug",
            "published": 3,
            "tags": [
                "bug"
            ],
            "usePreview": 0,
            "username": "hubbe",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "#define BUG   // works if you comment this out\n\n#define NOHIT 20000.0\n\n#define CYLINDER\n#ifdef BUG\n#define CAPPEDCYLINDER\n#endif\n    \nstruct Plane {\n    vec3 pos;\n    vec3 normal;\n};\n\n#ifdef CYLINDER\nstruct Cylinder {\n    vec3 a, b;\n    float r;\n};\n#endif\n#ifdef CAPPEDCYLINDER\nstruct CappedCylinder {\n    vec3 a, b;\n    float r;\n};\n#endif\n\n        \nstruct Ray {\n    vec3 start, dir;\n};\n\nstruct Hit {\n    float dist;\n    vec3 normal;\n};\n\nstruct Range {\n    Hit begin;\n    Hit end;\n};\n    \n\nHit FAR() {\n    return Hit(NOHIT, vec3(0));\n}\nHit NEAR() {\n    return Hit(0.0, vec3(0));\n}\n \nRange Everything() {\n    return Range(NEAR(), FAR());\n}\n\nRange Nothing() {\n    return Range(FAR(), NEAR());\n}\n\nHit Max(Hit a, Hit b) {\n    if (a.dist > b.dist)\n        return a;\n    else\n        return b;\n}\n\nHit Min(Hit a, Hit b) {\n    if (a.dist < b.dist)\n        return a;\n    else\n        return b;\n}\n\nRange Intersect(Range a, Range b) {\n    return Range(Max(a.begin, b.begin),\n                 Min(a.end, b.end));\n}\n\nbool Empty(Range a) {\n    return a.begin.dist >= a.end.dist;\n}\n\n\nvec3 Project( vec3 a, vec3 b )\n{\n\treturn a - b * dot(a, b);\n}\n\nfloat SQ(vec3 x) { return dot(x,x); }\n\n\nRange Trace(Ray ray, Plane o) {\n    vec3 pos = o.pos;\n    vec3 normal = o.normal;\n    float tmp = dot(pos - ray.start, normal);\n   \tfloat div = dot(ray.dir, normal);\n    if (div == 0.0) {\n        if (tmp > 0.0) {\n            return Everything();\n        } else {\n            return Nothing();\n        }\n    }\n    float dist = tmp / div;\n    if (div > 0.0) {\n        return Range(NEAR(), Hit(dist, normal));\n    } else {\n        return Range(Hit(dist, normal), FAR());\n    }\n}\n\n\n\nRange cut(Range hit, Ray ray, vec3 p, vec3 n) {\n    return Intersect(hit, Trace(ray, Plane(p, n)));\n}\n\n#ifdef CYLINDER\nRange Trace(Ray ray, Cylinder o) {\n    vec3 A = o.a;\n    vec3 B = o.b;\n    float r = o.r;\n    vec3 O = ray.start;\n    vec3 V = ray.dir;\n    vec3 AB = B - A;\n    vec3 AO = O - A;\n    vec3 AOxAB = cross(AO, AB);\n    vec3 VxAB = cross(V, AB);\n    float ab2 = dot(AB, AB);\n    float a = dot(VxAB, VxAB);\n    float b = 2.0 * dot(VxAB, AOxAB);\n    float c = dot(AOxAB, AOxAB) - (r * r * ab2);\n    float toroot = b * b - 4.0 * a * c;\n    if (toroot < 0.0) return Nothing();\n    float root = sqrt(toroot);\n\n    Range ret;\n    ret.begin.dist = (-b - root) / (2.0 * a);\n    ret.begin.normal = Project(ray.start + ret.begin.dist * ray.dir - A, AB);\n    ret.end.dist = (-b + root) / (2.0 * a);\n    ret.end.normal = Project(ray.start + ret.begin.dist * ray.dir - A, AB);    \n    return ret;   \n}\n#endif\n\n\n#ifdef CAPPEDCYLINDER\nRange Trace(Ray ray, CappedCylinder o) {\n    Range ret = Trace(ray, Cylinder(o.a, o.b, o.r));\n    ret = cut(ret, ray, o.a, normalize(o.a - o.b));\n    ret = cut(ret, ray, o.b, -normalize(o.a - o.b));\n    return ret;\n}\n#endif\n\n\nHit Range2Hit(Range r) {\n    if (r.begin.dist >= r.end.dist) return FAR();\n    if (r.end.dist <= 0.0) return FAR();\n    if (r.begin.dist <= 0.0) return NEAR();\n    return r.begin;\n}\n\nHit Trace(Ray ray) {\n\t#ifdef CAPPEDCYLINDER\n    Range ret = Trace(ray, CappedCylinder(vec3(0.0, -0.4, 1.0), vec3(0.0, 0.4, 1.0), 0.2));\n\t#else\n    Range ret = Trace(ray, Cylinder(vec3(0.0, -0.4, 1.0), vec3(0.0, 0.4, 1.0), 0.2));\n\n    #endif\n  \n    return Range2Hit(ret);\n}\n\nvec3 GetColor(vec2 xy) {\n    vec3 ret;\n \tvec2 uv = (xy.xy - iResolution.xy / 2.0) / iResolution.xx;\n    Ray ray = Ray(vec3(0, 0, -6), normalize(vec3(uv, 1)));\n    \n    float s = sin(iTime/3.0);\n    float c = cos(iTime/3.0);\n    mat3 rot = mat3(c, 0, s,\n         0, 1, 0,\n         -s,0, c);\n    ray.start = rot * ray.start;\n    ray.dir = rot * ray.dir;\n     \n    // Cast a ray, see if we hit anything.\n    Hit t = Trace(ray);\n    \n    // Just set the output color to the distance.\n    vec3 hp = ray.start + ray.dir * t.dist;\n    int grid1 = int( (hp.x + hp.y + hp.z + 100.0) * 5.0 ) % 2;\n    int grid2 = int( (hp.x + hp.y - hp.z + 100.0) * 5.0 ) % 2;\n    int grid3 = int( (hp.x - hp.y - hp.z + 100.0) * 5.0 ) % 2;\n        \n\tret = vec3(grid1, grid2, grid3);\n    if (t.dist == NOHIT) ret=vec3(0);\n\treturn ret;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  fragColor = vec4(GetColor(fragCoord), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}