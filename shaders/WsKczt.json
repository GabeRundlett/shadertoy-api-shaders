{
    "Shader": {
        "info": {
            "date": "1603499339",
            "description": "..in sRGB colorspace.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsKczt",
            "likes": 3,
            "name": "Equal Relative Luminance plane..",
            "published": 3,
            "tags": [
                "luminance",
                "srgb",
                "colorscience",
                "relativeluminance"
            ],
            "usePreview": 0,
            "username": "hanfling",
            "viewed": 421
        },
        "renderpass": [
            {
                "code": "\n// Configuration.\nconst bool  bAnimateRelativeLuminancePlane = true;  // Set to true automatically modulate relative luminance input.\nconst float AnimationAngularFrequency      = 0.3;   // Angular frequency for rl modulation in 1/s.\nconst float StaticRelativeLuminancePlane   = 0.707; // If bAnimatePlane is not set, use this relative lumianance.\nconst float BorderFraction                 = 0.379; // Amount of combined top-bottom or left-right fraction.\n\n// Piecewise gamma transfer functions for sRGB colorspace.\nvec3 GammaCompress_sRGB( vec3 Color )\n{\n\tvec3 Step = step(vec3(0.0031308),Color);\n\treturn (12.92*Color)*(vec3(1.0)-Step) + (1.055*pow(Color,vec3(0.41666))-vec3(0.055))*Step;\n}\n\n\nconst vec3 Rec709RelativeLuminanceWeights = vec3( 0.2126, 0.7152, 0.0722 );\n\nvoid mainImage( out vec4 FragColor, in vec2 FragCoord )\n{\n    float RelativeLuminancePlane;\n\n    if ( bAnimateRelativeLuminancePlane )\n    {\n        // Use the square of the modulation, to make it look a little more brightness uniform over time.\n    \tRelativeLuminancePlane = pow( 0.5+0.5*cos(AnimationAngularFrequency*iTime), 2.0 );\n    }\n    else // !bAnimateRelativeLuminancePlane\n    {\n    \tRelativeLuminancePlane = StaticRelativeLuminancePlane;\n    }\n    \n    vec3 LinearFragColor;\n\n    if ( RelativeLuminancePlane<0.0 )\n    {\n        LinearFragColor = vec3(0.0,0.0,1.0); // Blue.\n    }    \n    //else if ( RelativeLuminancePlane<0.001 )\n    //{\n    //    LinearFragColor = vec3(0.0,0.0,0.0); // Black.\n    //}\n    else if ( RelativeLuminancePlane>1.0 )\n    {\n        LinearFragColor = vec3(1.0,0.0,0.0); // Red.\n    }\n    //else if ( RelativeLuminancePlane>0.999 )\n    //{\n    //    LinearFragColor = vec3(1.0,1.0,1.0); // White.\n    //}\n    else // RelativeLuminancePlane in (0,1).\n    {\n        // Start with coloring everything with border/out of gamut color.\n        //LinearFragColor = vec3(RelativeLuminancePlane);\n        \n        // Turns out, the above is really annoying, and that black seems to be preferable.\n        LinearFragColor = vec3(0.0);\n        \n        //vec2 NormalizedFragCoord = 2.0*FragCoord/iResolution.xy-vec2(1.0);\n        vec2 NormalizedFragCoord = 2.0*FragCoord/min(iResolution.x,iResolution.y)-vec2(max(iResolution.x/iResolution.y,1.0),max(iResolution.y/iResolution.x,1.0));\n        \n        //\n        \n        vec2 SquareFragCoords = (NormalizedFragCoord)/(1.0-BorderFraction);\n        \n        //SquareFragCoords = NormalizedFragCoord;\n        \n        if ( SquareFragCoords.x>=-1.0 && SquareFragCoords.x<=1.0 && SquareFragCoords.y>=-1.0 && SquareFragCoords.y<=1.0 )\n        {\n            float Red   = (1.0+SquareFragCoords.y)/2.0;\n            float Blue  = (1.0+SquareFragCoords.x)/2.0;\n\n            float Green = (RelativeLuminancePlane-Red*Rec709RelativeLuminanceWeights.r-Blue*Rec709RelativeLuminanceWeights.b)/Rec709RelativeLuminanceWeights.g;\n\n            // Color is in gamut and we can just display it, otherwise gray background remains.\n            if ( Green>=0.0 && Green<=1.0 )\n            {\n                LinearFragColor = vec3(Red,Green,Blue);\n            }\n        }\n    }\n\n    // Output to screen\n    FragColor.rgb = GammaCompress_sRGB( LinearFragColor );\n    FragColor.a   = 1.0;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}