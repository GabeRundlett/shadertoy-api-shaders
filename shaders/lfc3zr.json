{
    "Shader": {
        "info": {
            "date": "1711305890",
            "description": "CC0: Sunday weirdness\nContinuation from Saturday weird stuff",
            "flags": 32,
            "hasliked": 0,
            "id": "lfc3zr",
            "likes": 45,
            "name": "Sunday weirdness",
            "published": 3,
            "tags": [
                "kali",
                "weird"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 681
        },
        "renderpass": [
            {
                "code": "// CC0: Sunday weirdness\n//  Continuation from Saturday weird stuff\n//  This was more along the lines what I wanted to create\n//  after I saw Kali's tweet\n\n#define FXAA\n\n// License: Unknowon, author: XorDev, found: https://github.com/XorDev/GM_FXAA\nvec4 fxaa(sampler2D tex, vec2 uv, vec2 texelSz) {\n  // See this blog\n  // https://mini.gmshaders.com/p/gm-shaders-mini-fxaa\n\n  // Maximum texel span\n  const float span_max    = 8.0;\n  // These are more technnical and probably don't need changing:\n  // Minimum \"dir\" reciprocal\n  const float reduce_min  = (1.0/128.0);\n  // Luma multiplier for \"dir\" reciprocal\n  const float reduce_mul  = (1.0/32.0);\n\n  const vec3  luma        = vec3(0.299, 0.587, 0.114);\n\n  // Sample center and 4 corners\n  vec3 rgbCC = texture(tex, uv).rgb;\n  vec3 rgb00 = texture(tex, uv+vec2(-0.5,-0.5)*texelSz).rgb;\n  vec3 rgb10 = texture(tex, uv+vec2(+0.5,-0.5)*texelSz).rgb;\n  vec3 rgb01 = texture(tex, uv+vec2(-0.5,+0.5)*texelSz).rgb;\n  vec3 rgb11 = texture(tex, uv+vec2(+0.5,+0.5)*texelSz).rgb;\n\n  //Get luma from the 5 samples\n  float lumaCC = dot(rgbCC, luma);\n  float luma00 = dot(rgb00, luma);\n  float luma10 = dot(rgb10, luma);\n  float luma01 = dot(rgb01, luma);\n  float luma11 = dot(rgb11, luma);\n\n  // Compute gradient from luma values\n  vec2 dir = vec2((luma01 + luma11) - (luma00 + luma10), (luma00 + luma01) - (luma10 + luma11));\n\n  // Diminish dir length based on total luma\n  float dirReduce = max((luma00 + luma10 + luma01 + luma11) * reduce_mul, reduce_min);\n\n  // Divide dir by the distance to nearest edge plus dirReduce\n  float rcpDir = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n\n  // Multiply by reciprocal and limit to pixel span\n  dir = clamp(dir * rcpDir, -span_max, span_max) * texelSz.xy;\n\n  // Average middle texels along dir line\n  vec4 A = 0.5 * (\n      texture(tex, uv - dir * (1.0/6.0))\n    + texture(tex, uv + dir * (1.0/6.0))\n    );\n\n  // Average with outer texels along dir line\n  vec4 B = A * 0.5 + 0.25 * (\n      texture(tex, uv - dir * (0.5))\n    + texture(tex, uv + dir * (0.5))\n    );\n\n\n  // Get lowest and highest luma values\n  float lumaMin = min(lumaCC, min(min(luma00, luma10), min(luma01, luma11)));\n  float lumaMax = max(lumaCC, max(max(luma00, luma10), max(luma01, luma11)));\n\n  // Get average luma\n  float lumaB = dot(B.rgb, luma);\n\n  //If the average is outside the luma range, using the middle average\n  return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? A : B;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 isz = 1./RESOLUTION.xy;\n  vec2 q = fragCoord*isz;\n#ifdef FXAA\n  fragColor = fxaa(iChannel0, q, sqrt(2.)*isz);\n#else\n  fragColor = texture(iChannel0, q);\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// CC0: Sunday weirdness\n//  Continuation from Saturday weird stuff\n//  This was more along the lines what I wanted to create\n//  after I saw Kali's tweet\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n#define TOLERANCE           0.0001\n#define MAX_RAY_LENGTH      10.0\n#define MAX_RAY_MARCHES     90\n#define NORM_OFF            0.005\n\nconst vec3 sunDir    = normalize(vec3(0.,0., 1.));\nconst vec3 lightPos1 = 2.0*vec3(-1.0, -1.0, -2.0);\nconst vec3 lightPos0 = 4.0*vec3(1.0, 1.0, -2.0);\n\nconst vec3 sunCol    = HSV2RGB(vec3(0.6, .95, 1E-2))*1.;\nconst vec3 lightCol0 = HSV2RGB(vec3(0.7, 0.85, 1.0))*1.;\nconst vec3 lightCol1 = HSV2RGB(vec3(0.8, 0.75, 1.0))*1.;\nconst vec3 bottomBoxCol = HSV2RGB(vec3(0.7, 0.80, 0.5))*1.;\nconst vec3 topBoxCol    = HSV2RGB(vec3(0.57, 0.90, 1.))*1.;\nconst vec3 glowCol0 = HSV2RGB(vec3(0.58, 0.9, 4E-3))*1.;\nconst vec3 glowCol1 = HSV2RGB(vec3(0.03, 0.9, 5E-3))*1.;\n\n  \n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/noacos/\nmat3 rot(vec3 d, vec3 z) {\n  vec3  v = cross( z, d );\n  float c = dot( z, d );\n  float k = 1.0/(1.0+c);\n\n  return mat3( v.x*v.x*k + c,     v.y*v.x*k - v.z,    v.z*v.x*k + v.y,\n               v.x*v.y*k + v.z,   v.y*v.y*k + c,      v.z*v.y*k - v.x,\n               v.x*v.z*k - v.y,   v.y*v.z*k + v.x,    v.z*v.z*k + c    );\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n  \n\nmat3 g_rot;\n\nfloat sphere4(vec3 p, float r) {\n  p*=p;\n  return pow(dot(p,p), 0.25) -r;\n}\n\nfloat sphere8(vec3 p, float r) {\n  p*=p;\n  p*=p;\n  return pow(dot(p,p), 0.125) -r;\n}\n\nfloat df(vec3 op) {\n  vec3 p0 = op*g_rot;\n  vec3 p1 = g_rot*op;\n  float d0 = sphere4(p0, 1.);\n  float d1 = sphere4(p1, 0.65);\n  float d = d0;\n  d = pmax(d, -d1, 0.5);\n  return d;\n}\n\n#define BACKSTEP\nfloat rayMarch(vec3 ro, vec3 rd, float tinit, out int iter) {\n  float t = tinit;\n  const float tol = TOLERANCE;\n#if defined(BACKSTEP)\n  vec2 dti = vec2(1e10,0.0);\n#endif  \n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n#if defined(BACKSTEP)\n    if (d<dti.x) { dti=vec2(d,t); }\n#endif  \n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n#if defined(BACKSTEP)\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n#endif  \n  iter = i;\n  return t;\n}\n\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 render0(vec3 ro, vec3 rd) {\n  vec3 col = vec3(0.0);\n  \n  vec3 ld0 = normalize(lightPos0-ro);\n  vec3 ld1 = normalize(lightPos1-ro);\n\n  float tp0  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), -5.0));\n  float tp1  = rayPlane(ro, rd, vec4(vec3(0.0, -1.0, 0.0), 6.0));\n\n  if (tp0 > 0.0) {\n    col += bottomBoxCol*exp(-0.5*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(5.0, 9.0))-3.0;\n    \n    col += topBoxCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += 0.2*topBoxCol*exp(-0.5*max(db, 0.0));\n    col += 0.05*sqrt(topBoxCol)*max(-db, 0.0);\n  }\n\n  col += 1E-2*lightCol0/(1.002-dot(ld0, rd));\n  col += 2E-2*lightCol1/(1.005-dot(ld1, rd));\n  col += sunCol/(1.001-dot(sunDir, rd));\n  return col; \n}\n\nvec3 render1(vec3 ro, vec3 rd) {\n  \n  int ii;\n  float t = rayMarch(ro, rd, 0., ii);\n\n  vec3 col = render0(ro, rd);\n  \n  if (t < MAX_RAY_LENGTH) {\n    vec3 p = ro+rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    vec3 rcol = render0(p, r);\n    float fre = 1.0+dot(rd,n);\n    fre *= fre;\n    fre = mix(0.5, 1.0, fre);\n    vec3 ld0 = normalize(lightPos0-p);\n    vec3 ld1 = normalize(lightPos1-p);\n    \n    float dif0 = pow(max(dot(ld0, n), 0.), 4.0)*0.1;\n    float dif1 = pow(max(dot(ld1, n), 0.), 4.0)*0.1;\n\n    col = vec3(0.);\n    col += dif0*lightCol0;\n    col += dif1*lightCol1;\n    col += rcol*fre;\n    mat3 rot = (g_rot);\n    vec3 tp3 = p;\n    vec3 tn3 = n;\n    tp3 *= rot;\n    tn3 *= rot;\n    vec2 p2 = -(tp3.xy*tn3.z+tp3.zx*tn3.y+tp3.yz*tn3.x);\n    float l2 = length(p2);\n    p2.x *= RESOLUTION.y/RESOLUTION.x;\n    vec2 tp2 = 0.5+0.5*p2;\n\n    vec3 pcol = texture(iChannel0, tp2).xyz;\n    pcol *= pcol;\n    float dc = l2-0.6;\n    col = mix(col, pcol*sqrt(.5)*vec3(1., .5, .75)*smoothstep(0.9, 0.0, l2), smoothstep(-0.1250, 0.125, -dc));\n    col += glowCol0/max(abs(dc), 1E-3);\n    col += glowCol1/max(abs(l2*l2-0.05), 1E-4);\n  }\n  \n  return col;\n}\n\nvec3 effect(vec2 p) {\n  float a = TIME*0.25;\n  vec3 r0 = vec3(1.0, sin(vec2(sqrt(0.5), 1.0)*a));\n  vec3 r1 = vec3(cos(vec2(sqrt(0.5), 1.0)*0.913*a), 1.0);\n  mat3 rot = rot(normalize(r0), normalize(r1));\n  g_rot = rot;\n\n  const vec3 up = vec3(0., 1., 0.);\n  const vec3 ro   = vec3(0.0, 0.5, -3.0);\n  const vec3 la   = vec3(0.0);\n\n  const vec3 ww = normalize(la-ro);\n  const vec3 uu = normalize(cross(up, ww));\n  const vec3 vv = cross(ww, uu);\n  vec3 rd = normalize(p.x*uu + p.y*vv + 2.*ww);\n\n  vec3 col = vec3(0.0); \n  col = render1(ro, rd);\n  col -= 2E-2*vec3(1.,2.,3.).zyx*(length(p)+0.25); \n  col = aces_approx(col);\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// CC0: Sunday weirdness\n//  Continuation from Saturday weird stuff\n//  This was more along the lines what I wanted to create\n//  after I saw Kali's tweet\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}