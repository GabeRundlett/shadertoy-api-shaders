{
    "Shader": {
        "info": {
            "date": "1672217104",
            "description": "Modified from my \"Hall of Mirrors\" shader (shadertoy.com/view/dsSGWm). Click to drag offset position :)",
            "flags": 0,
            "hasliked": 0,
            "id": "dtfGRl",
            "likes": 9,
            "name": "Hall of Claude 2",
            "published": 3,
            "tags": [
                "mirror",
                "redgiant",
                "aftereffects",
                "hallofmirrors",
                "plugin",
                "obsolete"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "// Modification of https://www.shadertoy.com/view/dsSGWm\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t// Number of images to display\n\tint images = 96;\n\t// Scale factor per image\n\tfloat scale = 0.9 + cos(iTime) * 0.05;\n\t// Rotation per image in degrees\n\tfloat rotation = sin(iTime * 0.25) * 45.0;\n\t// Position offset per image in normalized coordinates (0-1)\n\tvec2 offset = iMouse.z > 0.0 ? vec2(iMouse.xy / iResolution.xy) : 0.5 + vec2(cos(iTime), sin(iTime)) * 0.25;\n\n\tfloat rad = radians(-rotation);\n\tvec2 uv = fragCoord / iResolution.xy;\n\tfragColor = vec4(0.0);\n    \n\tfor (int i = 0; i < images; ++i) {\n\t\t// SCALING: Offset, apply scale, reset offset\n\t\tvec2 pos = uv - offset;\n\t\tpos /= pow(scale, float(i));\n\t\tpos += offset;\n\n\t\t// ROTATION\n\t\tfloat theta = rad * float(i);\n\t\tfloat cs = cos(theta);\n\t\tfloat sn = sin(theta);\n\t\t// Offset to center, fix aspect ratio\n\t\tpos -= vec2(0.5);\n\t\tpos *= iResolution.xy;\n\t\t// Rotate coordinate space\n\t\tpos = vec2(pos.x * cs - pos.y * sn, pos.x * sn + pos.y * cs);\n\t\t// Reset aspect ratio, reset offset\n\t\tpos /= iResolution.xy;\n\t\tpos += vec2(0.5);\n        \n        // Below is required if the wrap mode isn't repeat\n        pos = fract(pos);\n\n\t\t// Color key\n        vec4 color = texture(iChannel0, pos);\n        color.a = smoothstep(0.5, 0.8, distance(color.rgb, vec3(0.0, 1.0, 0.0)));\n        // Tint towards red/yellow\n        color.rgb += vec3(float(i * 4) / float(images), float(i) / float(images), 0.0);\n        // Premultiply color\n        color.rgb *= color.a;\n        // Composite behind\n        fragColor += (1.0 - fragColor.a) * color;\n        // Early exit\n        if (fragColor.a >= 1.0) return;\n\t}\n    \n    // Make background yellow\n    fragColor += (1.0 - fragColor.a) * vec4(1.0, 1.0, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}