{
    "Shader": {
        "info": {
            "date": "1608488428",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WttcR8",
            "likes": 28,
            "name": "Day 367",
            "published": 3,
            "tags": [
                "tornado",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "\n// ACES from knarkowitz\n// cheap noise from nimitz\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nfloat valueNoise(in vec3 p,float pw)\n{\n    vec3 ip = floor(p);\n    vec3 fp = fract(p);\n\tfp = fp*fp*(3.0-2.0*fp);\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rz = textureLod( iChannel0, (tap+0.5)/256.0, 0.0 ).yx;\n\treturn mix( rz.x, rz.y, fp.z );\n}\n\nfloat T;\nfloat fa,fb,fc,fd;\nfloat fbma(vec3 p){\n\n    vec3 op = p;\n    float n = 0.;\n    p *= 0.5;\n    p.y -= T*0.5;\n    fa = valueNoise(p,1.); \n    \n    p.y -= fa*(0.2 + sin(op.z + T*0.2)*0.5);\n    p.x += T*.325;\n    p.y -= T*0.25;\n    \n    fb = valueNoise(p*2.,1.);\n    \n    \n    p.x += fb*.2 + T*0.04;\n    p.z += fb*.4 + T*0.02;\n    fd = valueNoise(p*9.8,1.);\n    \n    fc = valueNoise(p*5.2,1.);\n    \n    \n\n    n = fa*1. + fb*.55 + fc*0.244 + fd*0.; /*fa*/;// + valueNoise(op*5.8,1.)*0.0;\n    \n    //n*= 1.1;\n    \n    //n = smoothstep(0.,1.,n);\n    //n = pow(n,1. + fa*2.);\n    \n    \n    \n    n*= 0.4 + pow(valueNoise(p*0.7 - vec3(0.3,T*0.15,0),7.),3.)*1.*smoothstep(0.,1.,(op.y + 9.)*0.2) ;\n    \n    //n = smoothstep(0.,1.,n);\n    //n = pow(n,1. + fa*3.5);\n    \n    //n *= pow(valueNoise(op*0.3 + 1.,1.),0.4)*1.;\n    n *= 1.;\n    \n    return n;\n}\n\nfloat fbmb(vec3 p){\n\n    vec3 op = p;\n    float n = 0.;\n    p *= 0.5;\n    p.xz *= rot(length(p.xz)*0.2 + T*0.2);\n    //p.y -= T*0.5;\n    fa = valueNoise(p,1.); \n    \n    p.y -= fa*(1. + sin(op.z + T*0.2)*0.5);\n    //p.x += T*.25;\n    p.y -= T*0.125;\n    \n    fb = valueNoise(p*2.,1.);\n    \n    \n\n    n = fa*1. + fb*.55 /*fa*/;// + valueNoise(op*5.8,1.)*0.0;\n    \n    \n    n*= 0.4;\n    return n;\n}\n\n\nfloat getParticles(vec3 p){\n    p.xz *= rot(T*.23);\n    p.y -= T;\n    vec4 partP = vec4(p,1.);\n    \n    \n    #define pmod(p,a) mod(p - 0.5*a,a) - 0.5*a\n    partP.wz *= rot(0.4);\n    partP = abs(partP);\n    partP.xz *= rot(2.4);\n    partP = abs(partP);\n    partP.yw *= rot(1.4);\n    partP = abs(partP);\n    \n    vec4 partPa = pmod(partP, 0.6);\n    \n    vec4 partPb = pmod(partP + 1., 0.4);\n    vec4 partPc = pmod(partP + 4.24, 0.9);\n    \n    \n    float d = smoothstep(0.04,0.,length(partPa) - 0.001)*2.;\n    \n    d += smoothstep(0.02,0.,length(partPb) - 0.003)*4.;\n    d += smoothstep(0.02,0.,length(partPc) - 0.033)*4.;\n    return d;\n}\nfloat particles = 0.;\nfloat map( vec3 p ){\n\n    vec3 op = p;\n    \n    p.xz = p.xz * rot((p.y*(0.5))*2.);\n    \n    float fl = smoothstep(0.,1.,op.y);\n    \n    float noiseA = fbma(p*3.);\n    \n    float d = smoothstep(1.,0.,length(p.xz) - 0. - fl*0.4 - noiseA*(1. + fl*1.) );\n    \n    \n    float noiseB = fbmb(op*3.);\n    //d = mix(d,1., smoothstep(0.,1.,p.y - 0.4 + fbm(op*3.)));\n    d += smoothstep(0.,1.,p.y - 1.2 + noiseB*1.4);\n    \n    p = op;\n    \n    p.xz *= rot(T*0.3 + p.y*0.2);\n    \n    p.y -= T;\n    \n    d += smoothstep(0.,1.,valueNoise(p*1.,1.)*0.144)*smoothstep(0.,1.,op.z + 2.6 );\n    \n    d += particles = getParticles(p);\n    //return smoothstep(1.,0.4,length(p)-0.2 - d);\n    return d*3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 ouv = uv;\n    vec3 col = vec3(0);\n    \n    float dith = texture(iChannel0,fragCoord/8.).x;\n    T = iTime*4. - dith/60.;iFrameRate;\n\n    uv.x += sin(iTime*0.4 + 0.2)*0.3;    \n    vec3 ro = vec3(0);\n    \n    ro.z -= 5.;\n\n    ro.xz *= rot(sin(T*0.2)*0.1);\n    ro.yz *= rot(sin(T*0.25 )*0.1);\n    \n    vec3 rd = normalize(vec3(uv,1));\n    \n    rd.yz *= rot(sin(T*0.25 )*0.1);\n    ro += rd*dith*0.02;\n    vec3 p = ro;\n\n    float t = 0.;\n\n    float stSz = 0.05;\n    \n    float steps = 110.;\n\n    vec3 accum = vec3(0);\n    float totalD = 0.;\n    \n    vec3 lDir = normalize(vec3(5.2,0.2,1.));\n    vec3 lDirB = normalize(-vec3(2.2,0.2,1.));\n    \n    vec3 lCol = vec3(0.9,.48,0.3)*3.;\n\n\n    // --  sun and bg\n    #define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n    \n    float sunW = 0.95;\n    \n    \n    float sun = dot(rd,lDir);\n    \n    vec3 bg = pal(0.5,vec3(0.7,0.8,0.9)*0. + 0.5,vec3(3,1.4,0.2),.5,4. + sun*2. + 7.4);\n    col = bg *0.02;\n\n    col += sin(uv.xyx + T)*0.004;\n    \n    // --  marching\n    for(float i = 0.; i < steps; i++){\n        \n        float d = map(p);\n        \n        float difffact = clamp( (d - map(p + lDir*.1))*1.6,0.,1.);\n        float difffactb = clamp( (d - map(p - normalize(p)*0.03))*1.,0.,1.);\n        float difffactc = clamp( (d - map(p + lDirB*.1))*0.3,0.,1.);\n        \n        vec3 diff = mix(vec3(0.3,0.2,0.3)*0.072,vec3(0.5,0.1,0.1) + col*0.5 + lCol*0.5 + vec3(0.3,0.2,0.1)*pow(fb,5.)*13. ,difffact);\n        diff = mix(diff,vec3(6.5,0.6,0.4) + col*0.5 + lCol*0.5 ,difffactb);\n        diff = mix(diff,vec3(1.5,0.6,0.3)*0.4 + col*0. + vec3(0.4,0.3,0.7)*0.4 ,difffactc);\n        \n        //vec3 absorption = mix(vec3(0.2,0.4,0.2),vec3(0.09,0.11,0.09)*4.4, totalD);\n        vec3 absorption = mix(vec3(0.2,0.4,0.2)*0.,vec3(0.2,0.4,0.2), totalD);\n        \n        vec3 fringe = clamp( 1. - d*2.,0.,1.)*lCol*0.1;\n\n        vec3 oCol = 1.*diff*(mix(absorption,vec3(1.),0.2)) + fringe*(1. + diff*7.);\n\n\n        d *= stSz;\n        accum += d*oCol*(1.-totalD);\n\n            \n        \n        \n        if(totalD > 1.){\n            break;\n        }\n        totalD += d*(1.-totalD);\n        \n        \n        \n        p += rd*stSz;\n    }\n\n    \n    // -- post\n\n    //col += accum;\n    col = mix(col,accum,totalD);\n    \n    col += texture(iChannel2,fragCoord.xy/iResolution.xy).xyz*0.6;\n\n    \n    col *= vec3(1.06,0.94,0.92);\n    //col = mix(col,smoothstep(0.,1.,col*1.7),0.6);\n    col *= 1. - dot(ouv,ouv*0.2)*4.;\n    col = mix(col, acesFilm(col*1.8),0.5);\n    \n    col = pow(max(col,0.),vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Lens Dir\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n  vec2 uv = vec2(U / iResolution.y);\n  \n  vec3 sunCol = vec3(1,0.6,0.2);\n  \n  if(iFrame < 10){\n      for(float i = 0.; i < 42.; i++){\n          vec2 pos = hash33(vec3(i) + 3.).xy*vec2(iResolution.xy / iResolution.y);\n          float dfl = length(uv - pos) - (0.1 + 0.1*sin(i*5.))*0.2;\n          dfl *= 0.5;\n          vec3 flare = 0.01*(sunCol)*smoothstep(0.02,0.,dfl);\n          flare += 0.003*(sunCol*sunCol)*smoothstep(0.04,0.,abs(dfl - dFdx(uv.x)));\n          C += flare.xyzz*abs(sin(i*10.));\n      }\n  } else {\n    \n      C = texture(iChannel0,U/iResolution.xy);\n  }\n  \n  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}