{
    "Shader": {
        "info": {
            "date": "1594231207",
            "description": "Trying out cubemap based simulations. A 128^3 simulation domain.\nQuantum vortex rings",
            "flags": 0,
            "hasliked": 0,
            "id": "wtScD1",
            "likes": 15,
            "name": "3D Landau Ginzburg",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "data",
                "landau",
                "ginsburg"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "// Fork of \"Wave equation 3D\" by michael0884. https://shadertoy.com/view/WtBcDz\n// 2020-07-08 14:45:14\n\n// Fork of \"Cubemap utils\" by rory618. https://shadertoy.com/view/wdsBRn\n// 2020-07-06 22:07:44\n\n//bilinear sampling\nvec4 S(vec3 x)\n{\n    vec4 X = vec4(x, 0.);\n    float zf = fract(X.z);\n    float zi = floor(X.z);\n    X.z = zi;\n    vec3 r0 = XYFaceToRayDir(getC(X));\n    vec3 r1 = XYFaceToRayDir(getC(X+vec4(0,0,1,0)));\n    return mix(texture(iChannel0, r0),texture(iChannel0, r1),zf);\n}\n\nfloat rho(vec3 x)\n{\n    x = x + vec3(B)*0.5;  \n    vec3 b = step(2., x)*step(x, vec3(B) -2.);\n    vec4 v = S(x);\n    return b.x*b.y*b.z*abs(1. - dot(v.xy,v.xy));\n}\n\nvec4 calcGrad( in vec3 pos )\n{\n    vec4 e = vec4(0.25,-0.25, 0.25, -0.25);\n    return   (e.zwwz*rho( pos + e.xyy ) + \n  \t\t\t  e.wwzz*rho( pos + e.yyx ) + \n\t\t\t  e.wzwz*rho( pos + e.yxy ) + \n              e.zzzz*rho( pos + e.xxx ) )/vec4(e.xxx, 1.);\n}\n\nvec3 ray; vec3 cpos; vec2 angles;\nmat3 rmat;\nvec2 p;\nvec3 getRay(vec2 pos)\n{\n    rmat = getRot(angles);\n    vec2 uv = FOV*(pos - R*0.5)/R.x;\n    return normalize(rmat[0]*uv.x + rmat[1]*uv.y + rmat[2]);\n}\n\n// this noise, including the 5.58... scrolling constant are from Jorge Jimenez\nfloat InterleavedGradientNoise(vec2 pixel, int frame) \n{\n    pixel += (float(frame) * 5.588238f);\n    return fract(52.9829189f * fract(0.06711056f*float(pixel.x) + 0.00583715f*float(pixel.y)));  \n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    float size = min(iResolution.y/3., iResolution.x/4.);\n    \n    //setup camera\n    angles = (iMouse.z>0.)?(iMouse.xy/R)*vec2(2.*PI, PI):vec2(0.2*iTime, PI*0.5+0.5*sin(0.1*iTime));\n    cpos = -camd*getRay(R*0.5);\n    ray = getRay(I);\n    \n    vec4 c = vec4(0., 0., 0., 1.);\n    float td = 0.;\n    float dtd = 5.; //+ 10.*InterleavedGradientNoise(I, iFrame);\n    for(int i = 0; i < 150; i++)\n    {\n        float r = rho(cpos + ray*td);\n        vec3 col = 0.1*(0.5 - 0.5*cos(1.*vec3(1,2,3)*r*r));\n        dtd = 1./(0.7 + 10.*r*r);\n        td += dtd;\n        float alpha = smoothstep(1.,0.8, r);\n        c.w = c.w*alpha;\n        if(c.w < 0.01) break;\n        c.xyz += col*(1. - alpha)*dtd; \n    }\n    \n    if(c.w < 0.05)\n    {\n        vec3 p = cpos + ray*td;\n        vec4 g = calcGrad(p);\n        vec3 n = -normalize(g.xyz);\n        vec3 r = reflect(ray, n);\n        c.xyz += 0.5*n.z + 0.5 + texture(iChannel3, r.xzy).xyz;\n    }\n    else\n    {\n        c.xyz += 0.5*texture(iChannel2, ray.xzy).xyz;\n    }\n   \n    \n    \n    \n    \n    O = tanh(1.3*c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define dt 0.6\n#define freq 0.04\n\n//sample the domain\nvec4 S(ivec4 X)\n{\n    vec3 r = XYFaceToRayDir(getC(vec4(X)));\n    return texture(iChannel0, r);\n}\n\nvoid mainCubemap( out vec4 Q, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{        \n    ivec3 XYFace = RayDirToXYFace(rayDir);\n   \tivec4 X = getX(XYFace);\n    \n    if(X.w == 0)\n    {\n    \tQ = S(X);\n    \tvec4 L = (S(X + DX.zyyy) + S(X + DX.xyyy) +\n        \t\t  S(X + DX.yzyy) + S(X + DX.yxyy) +\n         \t\t  S(X + DX.yyzy) + S(X + DX.yyxy))/6. -  Q;\n    \n        //schrodinger equation integraion\n        if(iFrame%2 == 0)\n        \tQ.x += dt*(L.y - Q.y*F(Q.xy));\n        else\n        \tQ.y -= dt*(L.x - Q.x*F(Q.xy));\n        \n    \tQ.xy = Rot(freq*dt)*Q.xy;\n        \n        vec3 x = vec3(X.xyz);\n        vec3 border = smoothstep(3.,0., x)*smoothstep(vec3(B)-3.,vec3(B),x);\n        \n       \n        \n        //normalization border conditions\n        Q.xy = mix(Q.xy, vec2(0,0.), border.x*border.y*border.z);\n        \n        //vortex generator\n        vec3 tpos = vec3(B)*vec3(0.6, 0.6, 0.5)-   vec3(0, 15, 0)*sin(iTime);\n        float am = max(cos(iTime), 0.);\n         Q.xy *= mix(1.,smoothstep(-1., 1., sdTorus(x - tpos, vec2(15.,2.))), am);\n        \n        \n        tpos = vec3(B)*vec3(0.3, 0.3, 0.5)- vec3(15, 0,0)*cos(iTime);\n        am = max(sin(iTime), 0.);\n        Q.xy *=  mix(1.,smoothstep(-1., 1., sdTorus((x - tpos).yxz, vec2(15.,2.))), am);\n        \n        \n        \n        if(iFrame < 100)\n        {\n            Q = vec4(1., 0., 0., 0.);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "#define R iResolution.xy\n#define PI 3.14159265\n\n//render range\n#define range 500.\n#define FOV 2.\n#define camd 75.\n\n//number of variables\n#define VAR 3\n\n#define CUBE 1024\n\n//the domain\n#define B ivec3(128,128,128)\n\n#define DX ivec3(-1, 0, 1)\n\n\n//nonlinear potential\nfloat F(vec2 psi)\n{\n    return -0.46*(1. - length(psi));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n//convert to domain coordinates\nivec4 getX(ivec3 XYface)\n{\n    int s = 6/VAR;\n    ivec2 N = CUBE/B.xy; //number of slices\n    \n    int var = XYface.z/s;\n    ivec2 z2 = XYface.xy/B.xy;\n    int Z = z2.x + z2.y*N.x + (XYface.z%s)*N.x*N.y;\n    ivec2 XY = XYface.xy%B.xy;\n    \n    return ivec4(XY, Z, var);\n}\n\n//convert to cubemap coordinates\nvec3 getC(vec4 p)\n{\n    int s = 6/VAR;\n    ivec2 N = CUBE/B.xy; //number of slices\n    \n    int pz = int(p.z);\n    ivec3 z3 = ivec3(pz%N.x, (pz/N.x)%N.y, pz/(N.x*N.y));\n    vec2 XY = p.xy + vec2(z3.xy*B.xy);\n    \n    return vec3(XY, p.w*float(s) + float(z3.z));\n}\n\n\nfloat G(vec3 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec3 x)\n{\n    return exp(-length(x));\n}\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nmat3 getRot(vec2 a)\n{\n    \n   mat3 theta_rot = mat3(1,     0,        0,\n                         0,  cos(a.y), sin(a.y), \n                         0, -sin(a.y), cos(a.y)); \n        \n   mat3 phi_rot = mat3(cos(a.x),  sin(a.x), 0,\n        \t\t       -sin(a.x), cos(a.x), 0,\n        \t\t        0,            0,    1); \n   return phi_rot*theta_rot;\n}\n\n\n\nvec3 XYFaceToRayDir(vec3 p){\n    vec2 x = vec2(p-512.) + 0.5;\n           if (p.z==0.){     return vec3( 512.,-x.y,-x.x);\n    } else if (p.z==1.){     return vec3( x.x, 512., x.y);\n    } else if (p.z==2.){     return vec3( x.x,-x.y, 512.);\n    } else if (p.z==3.){     return vec3(-512.,-x.y, x.x);\n    } else if (p.z==4.){     return vec3( x.x,-512.,-x.y);\n    } else if (p.z==5.){     return vec3(-x.x,-x.y,-512.);\n    } else return vec3(0);\n}\nivec3 RayDirToXYFace(vec3 dir){\n    \n    if        (dir.x>max(abs(dir.y),abs(dir.z))){\n        dir /= dir.x/512.;\n        return ivec3(-dir.z+512., -dir.y+512., 0);\n    } else if (dir.y>max(abs(dir.z),abs(dir.x))){\n        dir /= dir.y/512.;\n        return ivec3(dir.x+512., dir.z+512.,1);\n    } else if (dir.z>max(abs(dir.x),abs(dir.y))){\n        dir /= dir.z/512.;\n        return ivec3(dir.x+512.,-dir.y+512.,2);\n    } else if (-dir.x>max(abs(dir.y),abs(dir.z))){\n        dir /=-dir.x/512.;\n        return ivec3(dir.z+512.,-dir.y+512.,3);\n    } else if (-dir.y>max(abs(dir.z),abs(dir.x))){\n        dir /=-dir.y/512.;\n        return ivec3(dir.x+512.,-dir.z+512.,4);\n    } else if (-dir.z>max(abs(dir.x),abs(dir.y))){\n        dir /=-dir.z/512.;\n        return ivec3(-dir.x+512.,-dir.y+512.,5);\n    } else return ivec3(0,0,-1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}