{
    "Shader": {
        "info": {
            "date": "1640066157",
            "description": "[url=https://twitter.com/david_ar/status/1473611601626341376]Fluid simulation implemented in one tweet[/url]\n\nTakes a few seconds to start. Remove the indicated line in Buffer A to reduce the character count.",
            "flags": 32,
            "hasliked": 0,
            "id": "ftySzR",
            "likes": 43,
            "name": "270char fluid",
            "published": 3,
            "tags": [
                "simulation",
                "fluid",
                "convolution",
                "2tweets",
                "golf"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 3209
        },
        "renderpass": [
            {
                "code": "M-1.+A.z;}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "M;\n  for(int k=0; k++<196; v = A.xy+i, r += vec4(v-i + v-v*A.z,1,1) * A.z / exp(dot(v,v)) / 3.142)\n    i = vec2(k%14,k/14)-7.;\n  //r.z > 0. ? r.xy /= r.z : u; // slightly more accurate, but slightly longer and slightly more buggy on some devices\n  r.xy /= r.z + 1e-6; // add epsilon to avoid division by zero\n\n  iFrame%500<2 ? r += vec4(u/1e3-.5\n      * iResolution.xy/1e3 // this line can safely be removed when the resolution is >500px\n      ,.3,0) : r;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define M void mainImage(out vec4 r, vec2 u) { vec2 v, i = u-u; r -= r//\n#define A texelFetch(iChannel0,ivec2(i+u),0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}