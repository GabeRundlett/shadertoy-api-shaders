{
    "Shader": {
        "info": {
            "date": "1553439358",
            "description": "A mystic creature from the depths. Made as an exercise to learn shapes and 2d transforms.",
            "flags": 0,
            "hasliked": 0,
            "id": "3s2XWR",
            "likes": 8,
            "name": "Octoshape",
            "published": 3,
            "tags": [
                "shapes",
                "tentacles",
                "octopus"
            ],
            "usePreview": 0,
            "username": "abelu",
            "viewed": 719
        },
        "renderpass": [
            {
                "code": "#define PI              3.14159265359\n#define TWO_PI          6.28318530718\n#define HALF_PI         1.57079632679\n#define JOINTS_COUNT    12.0\n#define JOINTS_GLOW     0.16\n#define EYES_GLOW       0.014\n#define TENTACLES_COUNT 8.0\n#define PUPIL_OFFSET    0.01\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x, 0.0, 0.0, _scale.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nfloat triangle(\n    in vec2 ps,\n    in float size\n) {\n   \tfloat N = 3.0;\n    float a = atan(ps.x,ps.y)+PI;\n    float r = TWO_PI/floor(N);\n    float d = cos(floor(.5+a/r)*r-a)*length(ps);\n    return 1.-smoothstep(size,size+JOINTS_GLOW,d);\n}\n\nfloat circle(\n    in vec2 ps,\n    in float radius,\n    in float glow\n) {\n    return 1.-smoothstep(radius,radius+glow,length(ps));\n}\n\nfloat joint(\n    in vec2 ps,\n    in vec2 tr,\n    in float s,\n    in float a\n) {\n    return triangle((ps+tr)*scale(vec2(s))*rotate2d(a),.1);\n}\n\nfloat tentacle(\n    in vec2 ps,\n    in float timeScale,\n    in float c\n) {\n    float tr = 0.;\n    float t = sin(iTime);\n    float a = 0.;\n    float d = mod(iTime*timeScale*PI,PI*2.);\n    vec2 p = vec2(0.);\n    for (float i = .0; i < JOINTS_COUNT; i++) {\n        tr += .1+t*.005;\n        p = vec2(-tr*.7,sin(d+PI*-tr)*.2*tr);\n        a = HALF_PI+(cos(d)*.5)*HALF_PI*tr;\n        c += joint(ps*scale(vec2(1.+i*.1)),p,3.+tr*2.,a)*(1.-tr*.5);\n    }\n    return c;\n}\n\nfloat ttentacle(\n    in vec2 position, \n    in float timeScale, \n    in float scaleRatio, \n    in float angle,\n    in float color\n) {\n    return tentacle(\n        position*scale(vec2(scaleRatio))*rotate2d(angle),\n        timeScale,\n        color\n    );\n}\n\nfloat eye(\n    in vec2 st, \n    in float timeOffset,\n    in float timeScale,\n    in float size, \n    in float c\n) {\n    float t = timeOffset+iTime*timeScale;\n    float o = floor(abs(sin(t*.4))/(1./3.));\n    vec2 pst = vec2(\n        st.x+size*.1+(step(1.,o)-step(2.,o)*2.)*PUPIL_OFFSET,\n        st.y-size*.2+step(1.,o)*PUPIL_OFFSET\n    );\n    return circle(st,size,EYES_GLOW) - \n        circle(st,size*.5,0.03)*.2 -\n        circle(pst,size*.05+.0005*sin(t),.01)*.7;\n}\n\nfloat tentacles(in vec2 st, in float c) {\n    float color = c;\n    for (float i = .0; i < TENTACLES_COUNT; i++) {\n        c += ttentacle(\n            st,\n            1.+i*.01,\n            1.+mod(i,4.)*.01,\n            PI*2./TENTACLES_COUNT*i + mod(i,3.)*.16,\n            color\n        );\n    }\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = gl_FragCoord.xy / iResolution.xy;\n  \tst.y *= iResolution.y / iResolution.x;\n    \n    st -= vec2(.5,.3);\n\n    float s = sin(iTime*2.)*2.;\n    float body = circle(vec2(st.x,st.y+s*.01),.1,.02);\n    float eyes = \n        eye(vec2(st.x+.05,st.y-.05+s*.005),1.,1.2,.020,.01) +\n        eye(vec2(st.x-.06,st.y-.01+s*.005),2.,1.4,.032,.01) +\n        eye(vec2(st.x+.03,st.y+.06+s*.005),3.,1.0,.024,.01) + \n        eye(vec2(st.x+.01,st.y-.01+s*.005),4.,1.6,.016,.01) +\n        eye(vec2(st.x-.04,st.y+.06+s*.005),5.,1.8,.022,.01) +\n        eye(vec2(st.x-.02,st.y-.06+s*.005),5.,1.8,.014,.01) +\n        eye(vec2(st.x+.07,st.y+.01+s*.005),6.,1.2,.020,.01);\n\n    // Output to screen\n    fragColor = vec4(\n        vec3(.0,.0,.1)+\n        (\n            vec3(.65+.15*s,.6+.3*s,.3)*body +\n            vec3(.7+.1*s,.65+.25*s,.3)*tentacles(st*rotate2d(s*.1),0.)*.75\n        )*(1.-eyes),\n        1.\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}