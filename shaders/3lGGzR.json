{
    "Shader": {
        "info": {
            "date": "1578055429",
            "description": "asdf",
            "flags": 0,
            "hasliked": 0,
            "id": "3lGGzR",
            "likes": 8,
            "name": "Day 15",
            "published": 3,
            "tags": [
                "asdf"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "\n#define iTime (iTime + 9.)\n#define rot(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n#define PI acos(-1.)\n#define pi acos(-1.)\n#define dmin(a, b) a.x < b.x ? a : b\n#define fov (0.8 + sin(iTime)*0.05)\n\n// thx nusan for refractions\n// and knighty/lsdlive/tdhooper and others for folding\n\nvec3 fold(vec3 p) {\n\tvec3 nc = vec3(-.5, -.809017, .309017 + sin(iTime)*0.002);\n\tfor (int i = 0; i < 5; i++) {\n\t\tp.xy = abs(p.xy);\n\t\tp -= 2.*min(0., dot(p, nc))*nc;\n\t}\n\treturn p - vec3(0, 0, 1.275);\n}\n\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return dir + right*uv.x*fov + up*uv.y*fov;\n}\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e5);\n    \n    \n    vec3 q = p;\n    p = fold(p);\n    vec3 z = p;\n    float b = pow((1. + sin(p.x*3.)), 0.7) - 1.;\n    vec3 l = p;\n    l.xz *= rot(sin(iTime*0.7)*0.4 - 0.2);\n    b = min(b, sin(l.x*3.)*3.);\n    z.z += 0.2;\n    z.x += 0.82;\n    d = dmin(d, vec2(mix(dot(z - 0.6, vec3(0.1,0.1,0.2)), b, 0.1),1.));\n    q = fold(q) - vec3(0.5,0.6,-0.2);\n    q = abs(q);\n    q.z -= 0.2;\n    d = dmin(d, vec2( dot(q, normalize(vec3(1))),2.));\n    p.x -= 0.2;\n    p.y += 0.7;\n    \n    p = fold(p) - vec3(0.4,0.4,20.);\n    p = fold(p) - vec3(0.,0.4,20.);\n    p = fold(p) - vec3(0.,0.,1.);\n    \n    for (int i = 0;i < 2; i++){\n    \tp = abs(p);\n        p.x -= 0.2;\n    }\n    \n    p -= 7.;\n    \n    p = fold(p);\n    \n    p -= 0.6;\n    d = dmin(d, vec2( max(p.x, p.y), 1. ));\n    p.xy *= rot(2.5);\n    \n    d.x *= 1.;\n    d.x += sin(p.x*10.)*0.06;\n    return d;\n}\n    \n   \nvec3 getNormal(vec3 p){\n    vec2 t = vec2(0.001,0.);\n    return normalize(map(p).x - vec3(\n        map(p - t.xyy).x,\n        map(p - t.yxy).x,\n        map(p - t.yyx).x\n    ));\n}\n\n\n#define zoom (7. + sin(iTime)*0.4)\n#define rotSpeed (iTime*0.2 + cos(iTime*0.7)*0.5 - sin(iTime*0.5)*0.9)\n\n#define pal(x,t) (0.5 + sin(x*vec3(2.9,5.,1.2) + t + sin(iTime)))\n\nvec3 glow = vec3(0);\n#define mx (20.*iMouse.x/iResolution.x)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(sin(rotSpeed + mx)*zoom,0. + sin(iTime),cos(rotSpeed + mx)*zoom);\n    vec3 lookAt = vec3(0);\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    vec3 p = ro; float t, tBeforeRefraction = 0.;\n    \n    float bounce = 0.;\n    vec3 attenuation = vec3(1);\n    float side = 1.;\n    #define ITERS 200.\n    for(float i = 0.; i <= ITERS ; i ++){\n    \tvec2 d = map(p);\n        d.x *= side;\n\t\tglow += pal(t*0.2 + exp(-d.x*10.) + 2., 2.6)* .095 / (.01 + d.x*d.x);\n        \n        if (d.x < 0.002){\n            vec3 lDir = normalize(vec3(1));\n            vec3 n = getNormal(p)*side;\n            vec3 h = normalize(lDir - rd);\n            \n            float diff = max(dot(lDir,n),0.);\n            float fres = pow(1. - max(dot(-rd,n),0.), 20.);\n            float spec = pow(max(dot(h,n),0.), 10.);\n            if (d.y == 2.) {\n            \tcol += mix( (sin(vec3(2.9,2.9,2.6)*glow*0.005) + 7.)*0.1 *diff ,vec3(0.005*glow*min(fres*spec*diff, 1.)), 0.2)*attenuation;\n                break;\n            } else {\n                col += mix( 0.001*glow *diff ,vec3(0.005*glow*min(fres*spec, 1.)), 0.5)*attenuation;\n                attenuation *= vec3(0.2,0.4,0.9)*0.6;\n                ro = p;\n                rd = refract(rd, n, 1. + n.y*0.07 + n.x*0.2);\n                side = -side;\n                bounce++;\n                if(bounce == 1.) {\n                    tBeforeRefraction = t;\n                }\n\n                t = 0.;\n                d.x = 0.2;\n            }\n            \n\n            \n            //break;\n        }\n        if (t > 50. || i == ITERS) {\n            if (bounce == 0.) {\n\t\t\t\ttBeforeRefraction = t;\n            }\n        \tbreak;\n        }\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    col -= exp(-7. +tBeforeRefraction*0.14);\n    \n    col *= 1.9;\n    col = clamp(col, 0., 1.);\n    \n    col = mix(col, vec3(0.02,0.03,0.05),smoothstep(0.,1.,0.2 + tBeforeRefraction*0.01));\n    col = pow(col, vec3(0.45));\n    \n    col *= 1.5;\n    col *= 1. - pow(length(uv)*0.5 + 0.37, 4.);\n    fragColor = vec4(col,tBeforeRefraction);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}