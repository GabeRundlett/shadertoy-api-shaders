{
    "Shader": {
        "info": {
            "date": "1630509649",
            "description": "ray marching test ",
            "flags": 0,
            "hasliked": 0,
            "id": "7dt3Rl",
            "likes": 1,
            "name": "Ray Marching Test Part 2",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "dcyang",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "const int MAX_STEP = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.001;\n\n/* 一个球的SDF */\nfloat sphereSDF(vec3 samplePoint){\n    return length(samplePoint) - 1.0;\n}\n\n/* 场景的SDF，目前只是一个球 */\nfloat sceneSDF(vec3 samplePoint){\n    return sphereSDF(samplePoint);\n}\n\n/* 从眼睛朝某一方向，发出光线，直到击中场景表面，之间的距离 */\nfloat shortestDistanceFromEyeToSurface(vec3 eye, vec3 rayDirection, float start, float end){\n    float depth = start;\n    for(int i = 0; i < MAX_STEP && depth < end;i++){\n        float dist = sceneSDF(eye+depth*rayDirection);\n        if(dist < EPSILON) \n            return depth;\n        else \n            depth += dist;\n    }\n    return end;\n}\n/* 根据视场角以及视口的尺寸，生成到每一个像素的光线方向 */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/* 根据SDF的梯度来估计法线方向 \n   p 点在SDF表面，n = (dp/dx,dp/dy,dp/dz)\n\n*/\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n/* 计算 Phong 光照 c = c_r(c_a + c_l*max(0.0,dot(N,L)) + c_l*c_p*pow(max(0.0,dot(R,E)),s))\n*/\nvec3 PhongLight(vec3 c_r, vec3 c_a, vec3 c_p, vec3 c_l,vec3 eye, vec3 p_l, vec3 p, float s){\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(p_l - p);\n    vec3 E = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotNL = max(0.0,dot(N,L));\n    float dotRE = max(0.0,dot(R,E));\n    vec3 c = c_r*(c_a + c_l*dotNL + c_l*c_p*pow(dotRE,s));\n    return c;\n}\n/* 计算光照，在这个函数设定光源参数，然后调用 PhongLight 计算光照\n*/\nvec3 illumination(vec3 c_r, vec3 c_a, vec3 c_p, vec3 eye, vec3 p, float s) {\n    vec3 c_l = vec3(1.0);\n    vec3 p_l = vec3(4.0 * sin(iTime),\n                          1.0,\n                          4.0 * cos(iTime));\n    vec3 color = PhongLight(c_r,c_a,c_p,c_l,eye,p_l,p,s);    \n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceFromEyeToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    vec3 p = eye + dist * dir;\n    \n    vec3 c_r = vec3(0.0, 1.0, 1.0);\n    vec3 c_a = vec3(0.2, 0.2, 0.2);\n    vec3 c_p = vec3(1.0, 1.0, 1.0);\n    float s = 10.0;\n    \n    vec3 color =  illumination(c_r, c_a, c_p, eye, p, s);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}