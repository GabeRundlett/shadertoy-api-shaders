{
    "Shader": {
        "info": {
            "date": "1687297006",
            "description": "Exploring rotating patterns. ",
            "flags": 0,
            "hasliked": 0,
            "id": "dsXcDl",
            "likes": 3,
            "name": "Rotational Patterns",
            "published": 3,
            "tags": [
                "patterns",
                "rotation",
                "fract"
            ],
            "usePreview": 0,
            "username": "mgmbass",
            "viewed": 131
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\nfloat box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotate2D(vec2 _st, float _angle){\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Rotate space\n    uv = rotate2D(uv, PI *sin(iTime));\n    \n    // fract space \n    float frac = 4.0;\n    vec2 uvf = tile(uv, frac);\n    \n    // Rotate each fraction \n    uvf = rotate2D(uvf, PI *cos(iTime / 2.));\n\n    vec3 col = vec3(0.0);\n    vec3 color;\n    color = vec3(box(uvf, vec2(0.7), 0.01));\n    \n    //Color transitions. \n    color.rb = rotate2D(color.rb, PI * cos(iTime));\n    color.g = 1. / sin(iTime / 2.);\n    \n    // Output to screen\n    fragColor = vec4(color + col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}