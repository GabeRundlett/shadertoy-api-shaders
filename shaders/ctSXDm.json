{
    "Shader": {
        "info": {
            "date": "1676135761",
            "description": "Using poission filters + previous frame as initial assumption to get an almost exact gravity solution in 2D.",
            "flags": 48,
            "hasliked": 0,
            "id": "ctSXDm",
            "likes": 40,
            "name": "Stellar evolution Poisson filter",
            "published": 3,
            "tags": [
                "particles",
                "ca"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 535
        },
        "renderpass": [
            {
                "code": "vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 mixN(vec3 a, vec3 b, float k)\n{\n    return sqrt(mix(a*a, b*b, clamp(k,0.,1.)));\n}\n\n\nfloat getDensity(ivec2 p)\n{\n    return texelFetch(iChannel0, p, 0).z;\n}\n\nfloat getEstimatedDensity(ivec2 p)\n{\n    ivec2 resol = ivec2(iResolution.xy);\n    //the laplacian of the density field is the source term for the poisson equation\n    return \n    texelFetch(iChannel1, wrap(p + ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p - ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p + ivec2(0,1),resol), 0).x +\n    texelFetch(iChannel1, wrap(p - ivec2(0,1),resol), 0).x - \n    4.0*texelFetch(iChannel1, p, 0).x;\n}\n\nvec2 getPotentialGrad(ivec2 p)\n{\n    ivec2 resol = ivec2(iResolution.xy);\n    //the laplacian of the density field is the source term for the poisson equation\n    return \n    vec2(texelFetch(iChannel1, wrap(p + ivec2(1,0),resol), 0).x - texelFetch(iChannel1, wrap(p - ivec2(1,0),resol), 0).x,\n         texelFetch(iChannel1, wrap(p + ivec2(0,1),resol), 0).x - texelFetch(iChannel1, wrap(p - ivec2(0,1),resol), 0).x);\n}\n\nfloat getDensityError(ivec2 p)\n{\n    //find how far off the estimated density is from the actual density and use that as the source term\n    return getDensity(p) + getEstimatedDensity(p);\n}\n\nvec4 Va(vec2 p)\n{\n    return  100.0*Gscale * length(getPotentialGrad(ivec2(p))) * vec4(0,0,0,1) +2.0*pixel(ch0, p).z * vec4(1,1,1,0);\n}\n\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n\tR = iResolution.xy; time = iTime;\n    //pos = R*0.5 + pos*0.1;\n    ivec2 p = ivec2(pos);\n    \n    vec4 data = texel(ch0, pos);\n    particle P = getParticle(data, pos);\n    \n    //border render\n    vec3 Nb = bN(P.X);\n    float bord = smoothstep(2.*border_h,border_h*0.5,border(pos));\n    \n    vec4 rho = Va(pos);\n    rho.z *= 5.;\n    //rho.w = tanh(rho.w);\n    vec3 dx = vec3(-3., 0., 3.);\n    vec4 grad = -0.5*vec4(Va(pos + dx.zy).zw - Va(pos + dx.xy).zw,\n                         Va(pos + dx.yz).zw - Va(pos + dx.yx).zw);\n    vec2 N = pow(length(grad.xz),0.2)*normalize(grad.xz+1e-5);\n    float specular = pow(max(dot(N, Dir(1.4)), 0.), 3.5);\n    float specularb = G(0.4*(Nb.zz - border_h))*pow(max(dot(Nb.xy, Dir(1.4)), 0.), 3.);\n    \n    float a = pow(smoothstep(fluid_rho*0.5, fluid_rho*2., rho.z),0.1);\n   \n    col.xyz = 0.02*vec3(0.2, 0.5, 1.)*rho.w;\n    col.xyz += vec3(1., 0.7, 0.5)*rho.z;\n   // col.xyz = vec3(100.0)*abs(getDensityError(p));\n    col.xyz = tanh(col.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Bf(p) mod(p,R)\n#define Bi(p) ivec2(mod(p,R))\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define PI 3.14159265\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 1.\n\n#define border_h 5.\nvec2 R;\nvec4 Mouse;\nfloat time;\n\n#define temporal_blurring 0.98\n\n#define mass 1.\n\n#define fluid_rho 0.5\n\n\nconst float Gscale = 0.1;\n\nfloat Pf(float rho)\n{\n    return rho*0.1 + 1.*rho*rho + 0.*pow(rho, 10.); //gas + supernova\n}\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat border(vec2 p)\n{\n    float bound = -sdBox(p - R*0.5, R*vec2(0.5, 0.5)); \n    float box = sdBox(Rot(0.*time)*(p - R*vec2(0.5, 0.2)) , R*vec2(0.05, 0.01));\n    float drain = -sdBox(p - R*vec2(0.5, 0.6), R*vec2(1.5, 2.));\n    return max(drain,min(bound, box));\n}\n\n#define h 1.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1./h, 0., 1./h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nstruct particle\n{\n    vec2 X; //\n    vec2 V; //velocity\n    float M; //mass\n    float I; //angular velocity\n};\n    \nparticle getParticle(vec4 data, vec2 pos)\n{\n    particle P; \n    P.X = decode(data.x) + pos;\n    P.V = decode(data.y);\n    P.M = data.z;\n    P.I = data.w;\n    return P;\n}\n\nvec4 saveParticle(particle P, vec2 pos)\n{\n    P.X = clamp(P.X - pos, vec2(-0.5), vec2(0.5));\n    return vec4(encode(P.X), encode(P.V), P.M, P.I);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat G(vec2 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x)\n{\n    return exp(-length(x));\n}\n\n//diffusion amount\n#define dif 0.8\nvec3 distribution(vec2 x, vec2 p, float K)\n{\n    vec4 aabb0 = vec4(p - 0.5, p + 0.5);\n    vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);\n    vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));\n    vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n    vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n    float m = size.x*size.y/(K*K); //relative amount\n    //if any of the dimensions are 0 then the mass is 0\n    return vec3(center, m);\n}\n\n//diffusion and advection basically\nvoid Reintegration(sampler2D ch, inout particle P, vec2 pos)\n{\n    //basically integral over all updated neighbor distributions\n    //that fall inside of this pixel\n    //this makes the tracking conservative\n   \n    //pass 1 - get center of mass\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n       \n        particle P0 = getParticle(data, tpos);\n       \n        P0.X += P0.V*dt; //integrate position\n\n        vec3 D = distribution(P0.X, pos, dif);\n       \n        //the deposited mass into this cell\n        float m = P0.M*D.z;\n        \n        //add weighted by mass\n        P.X += D.xy*m;\n        \n        //add mass\n        P.M += m;\n    }\n    \n    //normalization\n    if(P.M != 0.)\n    {\n        P.X /= P.M;\n    }\n    \n    //moment of inertia\n    float I = 0.;\n    //pass 2 - get velocity and angular momentum\n    range(i, -1, 1) range(j, -1, 1)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n       \n        particle P0 = getParticle(data, tpos);\n       \n        P0.X += P0.V*dt; //integrate position\n\n        vec3 D = distribution(P0.X, pos, dif);\n       \n        //the deposited mass into this cell\n        float m = P0.M*D.z;\n        \n        vec2 dx = P0.X - P.X;\n      \n\t\tfloat W = P0.I; \n        //relative velocity of this part of the square\n        vec2 rel_V = P0.V + W*vec2(dx.y, -dx.x);\n        float v = length(P.V);\n    \trel_V /= (v > 2.)?v:1.;\n        \n        //add momentum\n        P.V += rel_V*m;\n        //add angular momentum\n        P.I += (dx.x*P0.V.y - dx.y*P0.V.x)*m;\n        //add moment of inertia\n        I += dot(dx, dx)*m;\n    }\n   // I = max(I, 0.1);\n    //normalization\n    if(P.M != 0.)\n    {\n        P.V /= P.M; //get velocity\n        P.I /= I;\n    }\n}\n\n//force calculation and integration\nvoid Simulation(sampler2D ch, sampler2D chG, inout particle P, vec2 pos)\n{\n    //Compute the forces\n    vec2 F = vec2(0.);\n    float w = 0.;\n    vec3 avgV = vec3(0.);\n    //local gravity potential\n    float lU = pixel(chG, P.X).w;\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n        particle P0 = getParticle(data, tpos);\n        vec2 dx = P0.X - P.X;\n        float avgP = 0.5*P0.M*(Pf(P.M) + Pf(P0.M)); \n        //gas pressure\n        F -= 0.5*G(1.*dx)*avgP*dx;\n        \n        //neighbor gravity potential\n        float rU = pixel(chG, P0.X).w;\n        \n        //gas gravity\n        F -= Gscale * 0.025*P.M*dx*clamp(lU - rU, -15., 15.)*G(1.*dx);\n        avgV += G(1.*dx)*vec3(P0.V,1.);\n    }\n    \n    avgV /= avgV.z;\n\n\n    if(Mouse.z > 0.)\n    {\n        vec2 dm =(Mouse.xy - Mouse.zw)/10.; \n        float d = distance(Mouse.xy, P.X)/9.;\n        F += 0.003*dm*exp(-d*d);\n       // P.M.y += 0.1*exp(-40.*d*d);\n    }\n    \n    //integrate\n    P.V += F*dt/P.M;\n\n    //border \n    vec3 N = bN(P.X);\n    float vdotN = step(N.z, border_h)*dot(-N.xy, P.V);\n    P.V += 0.5*(N.xy*vdotN + N.xy*abs(vdotN));\n    P.V += 2.*P.M*N.xy*exp(-abs(N.z));\n    if(N.z < 5.) \n    {\n        //P.X = pos;\n        P.V *= 0.;\n       // P.M = 2.*fluid_rho;\n    }\n    //velocity limit\n    float v = length(P.V);\n    P.V /= (v > 1.)?v:1.;\n    //angular momentum limit\n    P.I = P.M*clamp(P.I/P.M, -0.5, 0.5);\n}\n\n\n//The first 4 columns of the U matrix: \nfloat U[516] = float[](-4.9245E-04, -1.2542E-03, -2.2055E-03, -3.2879E-03, -4.4913E-03, -5.8014E-03, -7.1809E-03, -8.6281E-03, -1.0138E-02, -1.1689E-02, -1.3303E-02, -1.4958E-02, -1.6672E-02, -1.8424E-02, -2.0218E-02, -2.2054E-02, -2.3945E-02, -2.5875E-02, -2.7843E-02, -2.9853E-02, -3.1902E-02, -3.3991E-02, -3.6115E-02, -3.8287E-02, -4.0503E-02, -4.2764E-02, -4.5069E-02, -4.7415E-02, -4.9812E-02, -5.2256E-02, -5.4747E-02, -5.7291E-02, -5.9888E-02, -6.2535E-02, -6.5240E-02, -6.8001E-02, -7.0822E-02, -7.3704E-02, -7.6651E-02, -7.9663E-02, -8.2744E-02, -8.5899E-02, -8.9129E-02, -9.2437E-02, -9.5830E-02, -9.9308E-02, -1.0288E-01, -1.0654E-01, -1.1031E-01, -1.1418E-01, -1.1816E-01, -1.2226E-01, -1.2649E-01, -1.3085E-01, -1.3535E-01, -1.4000E-01, -1.4483E-01, -1.4982E-01, -1.5502E-01, -1.6043E-01, -1.6607E-01, -1.7198E-01, -1.7820E-01, -1.8480E-01, -1.9188E-01, -1.8480E-01, -1.7820E-01, -1.7198E-01, -1.6607E-01, -1.6043E-01, -1.5502E-01, -1.4982E-01, -1.4483E-01, -1.4000E-01, -1.3535E-01, -1.3085E-01, -1.2649E-01, -1.2226E-01, -1.1816E-01, -1.1418E-01, -1.1031E-01, -1.0654E-01, -1.0288E-01, -9.9308E-02, -9.5830E-02, -9.2437E-02, -8.9129E-02, -8.5899E-02, -8.2744E-02, -7.9663E-02, -7.6651E-02, -7.3704E-02, -7.0822E-02, -6.8001E-02, -6.5240E-02, -6.2535E-02, -5.9888E-02, -5.7291E-02, -5.4747E-02, -5.2256E-02, -4.9812E-02, -4.7415E-02, -4.5069E-02, -4.2764E-02, -4.0503E-02, -3.8287E-02, -3.6115E-02, -3.3991E-02, -3.1902E-02, -2.9853E-02, -2.7843E-02, -2.5875E-02, -2.3945E-02, -2.2054E-02, -2.0218E-02, -1.8424E-02, -1.6672E-02, -1.4958E-02, -1.3303E-02, -1.1689E-02, -1.0138E-02, -8.6281E-03, -7.1809E-03, -5.8014E-03, -4.4913E-03, -3.2879E-03, -2.2055E-03, -1.2542E-03, -4.9245E-04, 3.9763E-03, 7.3026E-03, 9.5644E-03, 1.0917E-02, 1.1331E-02, 1.0875E-02, 9.9083E-03, 8.4459E-03, 6.5456E-03, 4.4496E-03, 1.9250E-03, -7.7003E-04, -3.8168E-03, -6.9826E-03, -1.0283E-02, -1.3724E-02, -1.7401E-02, -2.1135E-02, -2.4924E-02, -2.8759E-02, -3.2622E-02, -3.6495E-02, -4.0335E-02, -4.4201E-02, -4.8062E-02, -5.1898E-02, -5.5689E-02, -5.9418E-02, -6.3084E-02, -6.6668E-02, -7.0161E-02, -7.3537E-02, -7.6782E-02, -7.9895E-02, -8.2831E-02, -8.5595E-02, -8.8133E-02, -9.0449E-02, -9.2482E-02, -9.4232E-02, -9.5648E-02, -9.6656E-02, -9.7247E-02, -9.7353E-02, -9.6875E-02, -9.5782E-02, -9.3976E-02, -9.1327E-02, -8.7758E-02, -8.3124E-02, -7.7257E-02, -6.9949E-02, -6.1007E-02, -5.0154E-02, -3.7058E-02, -2.1316E-02, -2.4165E-03, 2.0250E-02, 4.7498E-02, 8.0410E-02, 1.2047E-01, 1.6982E-01, 2.3182E-01, 3.1239E-01, 4.2417E-01, 3.1239E-01, 2.3182E-01, 1.6982E-01, 1.2047E-01, 8.0410E-02, 4.7498E-02, 2.0250E-02, -2.4165E-03, -2.1316E-02, -3.7058E-02, -5.0154E-02, -6.1007E-02, -6.9949E-02, -7.7257E-02, -8.3124E-02, -8.7758E-02, -9.1327E-02, -9.3976E-02, -9.5782E-02, -9.6875E-02, -9.7353E-02, -9.7247E-02, -9.6656E-02, -9.5648E-02, -9.4232E-02, -9.2482E-02, -9.0449E-02, -8.8133E-02, -8.5595E-02, -8.2831E-02, -7.9895E-02, -7.6782E-02, -7.3537E-02, -7.0161E-02, -6.6668E-02, -6.3084E-02, -5.9418E-02, -5.5689E-02, -5.1898E-02, -4.8062E-02, -4.4201E-02, -4.0335E-02, -3.6495E-02, -3.2622E-02, -2.8759E-02, -2.4924E-02, -2.1135E-02, -1.7401E-02, -1.3724E-02, -1.0283E-02, -6.9826E-03, -3.8168E-03, -7.7003E-04, 1.9250E-03, 4.4496E-03, 6.5456E-03, 8.4459E-03, 9.9083E-03, 1.0875E-02, 1.1331E-02, 1.0917E-02, 9.5644E-03, 7.3026E-03, 3.9763E-03, 3.9355E-03, 1.3650E-02, 2.3904E-02, 3.2938E-02, 3.9832E-02, 4.4184E-02, 4.6843E-02, 4.7742E-02, 4.7008E-02, 4.5548E-02, 4.2430E-02, 3.8683E-02, 3.3605E-02, 2.8133E-02, 2.2223E-02, 1.5883E-02, 8.8690E-03, 1.7994E-03, -5.2834E-03, -1.2309E-02, -1.9204E-02, -2.5905E-02, -3.2485E-02, -3.8726E-02, -4.4600E-02, -5.0063E-02, -5.5110E-02, -6.0029E-02, -6.4241E-02, -6.7899E-02, -7.1391E-02, -7.4020E-02, -7.6015E-02, -7.7796E-02, -7.8704E-02, -7.9309E-02, -7.8953E-02, -7.8208E-02, -7.6467E-02, -7.4255E-02, -7.1337E-02, -6.7179E-02, -6.2323E-02, -5.6538E-02, -4.9348E-02, -4.1208E-02, -3.1913E-02, -2.1097E-02, -9.0917E-03, 4.2374E-03, 1.8978E-02, 3.5285E-02, 5.2822E-02, 7.1460E-02, 9.0918E-02, 1.1069E-01, 1.2995E-01, 1.4714E-01, 1.5994E-01, 1.6446E-01, 1.5407E-01, 1.1667E-01, 2.8240E-02, -1.6583E-01, -6.1374E-01, -1.6583E-01, 2.8240E-02, 1.1667E-01, 1.5407E-01, 1.6446E-01, 1.5994E-01, 1.4714E-01, 1.2995E-01, 1.1069E-01, 9.0918E-02, 7.1460E-02, 5.2822E-02, 3.5285E-02, 1.8978E-02, 4.2374E-03, -9.0917E-03, -2.1097E-02, -3.1913E-02, -4.1208E-02, -4.9348E-02, -5.6538E-02, -6.2323E-02, -6.7179E-02, -7.1337E-02, -7.4255E-02, -7.6467E-02, -7.8208E-02, -7.8953E-02, -7.9309E-02, -7.8704E-02, -7.7796E-02, -7.6015E-02, -7.4020E-02, -7.1391E-02, -6.7899E-02, -6.4241E-02, -6.0029E-02, -5.5110E-02, -5.0063E-02, -4.4600E-02, -3.8726E-02, -3.2485E-02, -2.5905E-02, -1.9204E-02, -1.2309E-02, -5.2834E-03, 1.7994E-03, 8.8690E-03, 1.5883E-02, 2.2223E-02, 2.8133E-02, 3.3605E-02, 3.8683E-02, 4.2430E-02, 4.5548E-02, 4.7008E-02, 4.7742E-02, 4.6843E-02, 4.4184E-02, 3.9832E-02, 3.2938E-02, 2.3904E-02, 1.3650E-02, 3.9355E-03, -2.8697E-04, 2.2993E-03, 8.9515E-03, 1.8986E-02, 3.2109E-02, 4.7412E-02, 6.3502E-02, 7.9787E-02, 9.5611E-02, 1.1102E-01, 1.2477E-01, 1.3760E-01, 1.4772E-01, 1.5667E-01, 1.6404E-01, 1.6948E-01, 1.7070E-01, 1.7058E-01, 1.6884E-01, 1.6543E-01, 1.6046E-01, 1.5429E-01, 1.4888E-01, 1.4070E-01, 1.3073E-01, 1.1945E-01, 1.0744E-01, 9.6486E-02, 8.3808E-02, 7.0604E-02, 5.8515E-02, 4.5302E-02, 3.2083E-02, 2.0118E-02, 7.9839E-03, -2.9234E-03, -1.3739E-02, -2.3292E-02, -3.2394E-02, -4.0164E-02, -4.6821E-02, -5.2890E-02, -5.7655E-02, -6.1257E-02, -6.4026E-02, -6.5502E-02, -6.5774E-02, -6.5026E-02, -6.3045E-02, -5.9908E-02, -5.5715E-02, -5.0610E-02, -4.4614E-02, -3.7877E-02, -3.0599E-02, -2.3030E-02, -1.5459E-02, -8.2046E-03, -1.6536E-03, 3.7415E-03, 7.4873E-03, 9.1017E-03, 8.2388E-03, 5.0100E-03, 9.1062E-04, 5.0100E-03, 8.2388E-03, 9.1017E-03, 7.4873E-03, 3.7415E-03, -1.6536E-03, -8.2046E-03, -1.5459E-02, -2.3030E-02, -3.0599E-02, -3.7877E-02, -4.4614E-02, -5.0610E-02, -5.5715E-02, -5.9908E-02, -6.3045E-02, -6.5026E-02, -6.5774E-02, -6.5502E-02, -6.4026E-02, -6.1257E-02, -5.7655E-02, -5.2890E-02, -4.6821E-02, -4.0164E-02, -3.2394E-02, -2.3292E-02, -1.3739E-02, -2.9234E-03, 7.9839E-03, 2.0118E-02, 3.2083E-02, 4.5302E-02, 5.8515E-02, 7.0604E-02, 8.3808E-02, 9.6486E-02, 1.0744E-01, 1.1945E-01, 1.3073E-01, 1.4070E-01, 1.4888E-01, 1.5429E-01, 1.6046E-01, 1.6543E-01, 1.6884E-01, 1.7058E-01, 1.7070E-01, 1.6948E-01, 1.6404E-01, 1.5667E-01, 1.4772E-01, 1.3760E-01, 1.2477E-01, 1.1102E-01, 9.5611E-02, 7.9787E-02, 6.3502E-02, 4.7412E-02, 3.2109E-02, 1.8986E-02, 8.9515E-03, 2.2993E-03, -2.8697E-04); \n//The first 4 rows of the V matrix: \nfloat V[516] = float[](-6.3313E-03, -1.6125E-02, -2.8355E-02, -4.2272E-02, -5.7744E-02, -7.4587E-02, -9.2324E-02, -1.1093E-01, -1.3034E-01, -1.5028E-01, -1.7104E-01, -1.9232E-01, -2.1435E-01, -2.3688E-01, -2.5994E-01, -2.8355E-01, -3.0786E-01, -3.3266E-01, -3.5798E-01, -3.8381E-01, -4.1016E-01, -4.3702E-01, -4.6433E-01, -4.9224E-01, -5.2073E-01, -5.4980E-01, -5.7944E-01, -6.0961E-01, -6.4042E-01, -6.7185E-01, -7.0387E-01, -7.3658E-01, -7.6996E-01, -8.0400E-01, -8.3878E-01, -8.7427E-01, -9.1054E-01, -9.4759E-01, -9.8548E-01, -1.0242E+00, -1.0638E+00, -1.1044E+00, -1.1459E+00, -1.1884E+00, -1.2321E+00, -1.2768E+00, -1.3227E+00, -1.3698E+00, -1.4182E+00, -1.4679E+00, -1.5191E+00, -1.5719E+00, -1.6262E+00, -1.6823E+00, -1.7402E+00, -1.8000E+00, -1.8620E+00, -1.9263E+00, -1.9930E+00, -2.0625E+00, -2.1351E+00, -2.2111E+00, -2.2911E+00, -2.3759E+00, -2.4670E+00, -2.3759E+00, -2.2911E+00, -2.2111E+00, -2.1351E+00, -2.0625E+00, -1.9930E+00, -1.9263E+00, -1.8620E+00, -1.8000E+00, -1.7402E+00, -1.6823E+00, -1.6262E+00, -1.5719E+00, -1.5191E+00, -1.4679E+00, -1.4182E+00, -1.3698E+00, -1.3227E+00, -1.2768E+00, -1.2321E+00, -1.1884E+00, -1.1459E+00, -1.1044E+00, -1.0638E+00, -1.0242E+00, -9.8548E-01, -9.4759E-01, -9.1054E-01, -8.7427E-01, -8.3878E-01, -8.0400E-01, -7.6996E-01, -7.3658E-01, -7.0387E-01, -6.7185E-01, -6.4042E-01, -6.0961E-01, -5.7944E-01, -5.4980E-01, -5.2073E-01, -4.9224E-01, -4.6433E-01, -4.3702E-01, -4.1016E-01, -3.8381E-01, -3.5798E-01, -3.3266E-01, -3.0786E-01, -2.8355E-01, -2.5994E-01, -2.3688E-01, -2.1435E-01, -1.9232E-01, -1.7104E-01, -1.5028E-01, -1.3034E-01, -1.1093E-01, -9.2324E-02, -7.4587E-02, -5.7744E-02, -4.2272E-02, -2.8355E-02, -1.6125E-02, -6.3313E-03, 5.8353E-03, 1.0717E-02, 1.4036E-02, 1.6021E-02, 1.6629E-02, 1.5960E-02, 1.4541E-02, 1.2395E-02, 9.6060E-03, 6.5301E-03, 2.8250E-03, -1.1301E-03, -5.6013E-03, -1.0247E-02, -1.5091E-02, -2.0141E-02, -2.5537E-02, -3.1016E-02, -3.6578E-02, -4.2205E-02, -4.7875E-02, -5.3559E-02, -5.9194E-02, -6.4867E-02, -7.0533E-02, -7.6162E-02, -8.1726E-02, -8.7199E-02, -9.2579E-02, -9.7838E-02, -1.0296E-01, -1.0792E-01, -1.1268E-01, -1.1725E-01, -1.2156E-01, -1.2561E-01, -1.2934E-01, -1.3274E-01, -1.3572E-01, -1.3829E-01, -1.4037E-01, -1.4185E-01, -1.4271E-01, -1.4287E-01, -1.4217E-01, -1.4056E-01, -1.3791E-01, -1.3403E-01, -1.2879E-01, -1.2199E-01, -1.1338E-01, -1.0265E-01, -8.9530E-02, -7.3603E-02, -5.4384E-02, -3.1282E-02, -3.5463E-03, 2.9717E-02, 6.9706E-02, 1.1801E-01, 1.7679E-01, 2.4922E-01, 3.4020E-01, 4.5845E-01, 6.2249E-01, 4.5845E-01, 3.4020E-01, 2.4922E-01, 1.7679E-01, 1.1801E-01, 6.9706E-02, 2.9717E-02, -3.5463E-03, -3.1282E-02, -5.4384E-02, -7.3603E-02, -8.9530E-02, -1.0265E-01, -1.1338E-01, -1.2199E-01, -1.2879E-01, -1.3403E-01, -1.3791E-01, -1.4056E-01, -1.4217E-01, -1.4287E-01, -1.4271E-01, -1.4185E-01, -1.4037E-01, -1.3829E-01, -1.3572E-01, -1.3274E-01, -1.2934E-01, -1.2561E-01, -1.2156E-01, -1.1725E-01, -1.1268E-01, -1.0792E-01, -1.0296E-01, -9.7838E-02, -9.2579E-02, -8.7199E-02, -8.1726E-02, -7.6162E-02, -7.0533E-02, -6.4867E-02, -5.9194E-02, -5.3559E-02, -4.7875E-02, -4.2205E-02, -3.6578E-02, -3.1016E-02, -2.5537E-02, -2.0141E-02, -1.5091E-02, -1.0247E-02, -5.6013E-03, -1.1301E-03, 2.8250E-03, 6.5301E-03, 9.6060E-03, 1.2395E-02, 1.4541E-02, 1.5960E-02, 1.6629E-02, 1.6021E-02, 1.4036E-02, 1.0717E-02, 5.8353E-03, 1.4748E-03, 5.1153E-03, 8.9583E-03, 1.2344E-02, 1.4927E-02, 1.6558E-02, 1.7555E-02, 1.7891E-02, 1.7616E-02, 1.7069E-02, 1.5901E-02, 1.4497E-02, 1.2593E-02, 1.0543E-02, 8.3282E-03, 5.9520E-03, 3.3237E-03, 6.7431E-04, -1.9800E-03, -4.6130E-03, -7.1968E-03, -9.7081E-03, -1.2174E-02, -1.4513E-02, -1.6714E-02, -1.8761E-02, -2.0653E-02, -2.2496E-02, -2.4075E-02, -2.5445E-02, -2.6754E-02, -2.7739E-02, -2.8487E-02, -2.9154E-02, -2.9495E-02, -2.9721E-02, -2.9588E-02, -2.9308E-02, -2.8656E-02, -2.7827E-02, -2.6734E-02, -2.5176E-02, -2.3356E-02, -2.1188E-02, -1.8493E-02, -1.5443E-02, -1.1959E-02, -7.9062E-03, -3.4071E-03, 1.5880E-03, 7.1121E-03, 1.3223E-02, 1.9795E-02, 2.6780E-02, 3.4072E-02, 4.1481E-02, 4.8698E-02, 5.5143E-02, 5.9938E-02, 6.1633E-02, 5.7737E-02, 4.3722E-02, 1.0583E-02, -6.2144E-02, -2.3000E-01, -6.2144E-02, 1.0583E-02, 4.3722E-02, 5.7737E-02, 6.1633E-02, 5.9938E-02, 5.5143E-02, 4.8698E-02, 4.1481E-02, 3.4072E-02, 2.6780E-02, 1.9795E-02, 1.3223E-02, 7.1121E-03, 1.5880E-03, -3.4071E-03, -7.9062E-03, -1.1959E-02, -1.5443E-02, -1.8493E-02, -2.1188E-02, -2.3356E-02, -2.5176E-02, -2.6734E-02, -2.7827E-02, -2.8656E-02, -2.9308E-02, -2.9588E-02, -2.9721E-02, -2.9495E-02, -2.9154E-02, -2.8487E-02, -2.7739E-02, -2.6754E-02, -2.5445E-02, -2.4075E-02, -2.2496E-02, -2.0653E-02, -1.8761E-02, -1.6714E-02, -1.4513E-02, -1.2174E-02, -9.7081E-03, -7.1968E-03, -4.6130E-03, -1.9800E-03, 6.7431E-04, 3.3237E-03, 5.9520E-03, 8.3282E-03, 1.0543E-02, 1.2593E-02, 1.4497E-02, 1.5901E-02, 1.7069E-02, 1.7616E-02, 1.7891E-02, 1.7555E-02, 1.6558E-02, 1.4927E-02, 1.2344E-02, 8.9583E-03, 5.1153E-03, 1.4748E-03, 8.3758E-05, -6.7109E-04, -2.6127E-03, -5.5415E-03, -9.3716E-03, -1.3838E-02, -1.8534E-02, -2.3288E-02, -2.7906E-02, -3.2404E-02, -3.6416E-02, -4.0163E-02, -4.3115E-02, -4.5726E-02, -4.7877E-02, -4.9467E-02, -4.9824E-02, -4.9789E-02, -4.9280E-02, -4.8284E-02, -4.6833E-02, -4.5032E-02, -4.3454E-02, -4.1067E-02, -3.8156E-02, -3.4863E-02, -3.1359E-02, -2.8161E-02, -2.4461E-02, -2.0607E-02, -1.7079E-02, -1.3222E-02, -9.3641E-03, -5.8718E-03, -2.3303E-03, 8.5326E-04, 4.0101E-03, 6.7982E-03, 9.4547E-03, 1.1723E-02, 1.3666E-02, 1.5437E-02, 1.6828E-02, 1.7879E-02, 1.8687E-02, 1.9118E-02, 1.9198E-02, 1.8979E-02, 1.8401E-02, 1.7485E-02, 1.6261E-02, 1.4772E-02, 1.3022E-02, 1.1055E-02, 8.9311E-03, 6.7218E-03, 4.5121E-03, 2.3947E-03, 4.8263E-04, -1.0920E-03, -2.1853E-03, -2.6565E-03, -2.4047E-03, -1.4623E-03, -2.6578E-04, -1.4623E-03, -2.4047E-03, -2.6565E-03, -2.1853E-03, -1.0920E-03, 4.8263E-04, 2.3947E-03, 4.5121E-03, 6.7218E-03, 8.9311E-03, 1.1055E-02, 1.3022E-02, 1.4772E-02, 1.6261E-02, 1.7485E-02, 1.8401E-02, 1.8979E-02, 1.9198E-02, 1.9118E-02, 1.8687E-02, 1.7879E-02, 1.6828E-02, 1.5437E-02, 1.3666E-02, 1.1723E-02, 9.4547E-03, 6.7982E-03, 4.0101E-03, 8.5326E-04, -2.3303E-03, -5.8718E-03, -9.3641E-03, -1.3222E-02, -1.7079E-02, -2.0607E-02, -2.4461E-02, -2.8161E-02, -3.1359E-02, -3.4863E-02, -3.8156E-02, -4.1067E-02, -4.3454E-02, -4.5032E-02, -4.6833E-02, -4.8284E-02, -4.9280E-02, -4.9789E-02, -4.9824E-02, -4.9467E-02, -4.7877E-02, -4.5726E-02, -4.3115E-02, -4.0163E-02, -3.6416E-02, -3.2404E-02, -2.7906E-02, -2.3288E-02, -1.8534E-02, -1.3838E-02, -9.3716E-03, -5.5415E-03, -2.6127E-03, -6.7109E-04, 8.3758E-05); \n//center of the convolution \nint Nc = 64; \n//number of ranks \nint Nr = 4; \n//convolution size \nint N = 129; \n\n\n\nfloat pack2(vec2 a)\n{\n    return uintBitsToFloat(packHalf2x16(a));\n}\n\nvec2 unpack2(float packed)\n{\n    return unpackHalf2x16(floatBitsToUint(packed));\n}\n\nivec2 wrap(ivec2 p, ivec2 res)\n{\n    return (p + res)%res;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n        \n    //particle velocity, mass and grid distributed density\n    vec2 F = vec2(0.);\n    \n    vec4 data = texel(ch0, pos); \n    \n    particle P;// = getParticle(data, pos);\n       \n    Reintegration(ch0, P, pos);\n   \n    //initial condition\n    if(iFrame < 1)\n    {\n        //random\n        vec3 rand = hash32(pos);\n        if(rand.z < 1.) \n        {\n            vec2 dC = pos - R*0.5;\n            P.X = pos;\n            P.V = 0.*(rand.xy-0.5) + 0.5*vec2(dC.y/R.x, -dC.x/R.x);\n            P.M = 0.005*mass;\n            P.I = 0.;\n        }\n        else\n        {\n            P.X = pos;\n            P.V = vec2(0.);\n            P.M = 1e-6;\n            P.I = 0.;\n        }\n    }\n    \n   \n    \n    U = saveParticle(P, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n    \n    vec4 data = texel(ch0, pos); \n    \n    particle P = getParticle(data, pos); \n    \n   \n    if(P.M != 0.) //not vacuum\n    {\n        Simulation(ch0, ch1, P, pos);\n    }\n    \n   \n\t/*\n    if(length(P.X - R*vec2(0.2, 0.9)) < 10.) \n    {\n        P.X = pos;\n        P.V = 0.5*Dir(-PI*0.25 + 0.3*sin(0.3*time));\n        P.M = mix(P.M, vec2(fluid_rho, 0.), 0.4);\n    }*/\n    \n    if(length(pos - R*vec2(0.5, 0.1)) < 10.) \n    {\n      // P.I = 0.2;\n    }\n    \n    U = saveParticle(P, pos);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float getDensity(ivec2 p)\n{\n    return texelFetch(iChannel0, p, 0).z;\n}\n\nfloat getEstimatedDensity(ivec2 p)\n{\n    ivec2 resol = ivec2(iResolution.xy);\n    //the laplacian of the density field is the source term for the poisson equation\n    return \n    texelFetch(iChannel1, wrap(p + ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p - ivec2(1,0),resol), 0).x + \n    texelFetch(iChannel1, wrap(p + ivec2(0,1),resol), 0).x +\n    texelFetch(iChannel1, wrap(p - ivec2(0,1),resol), 0).x - \n    4.0*texelFetch(iChannel1, p, 0).x;\n}\n\nfloat getDensityError(ivec2 p)\n{\n    //find how far off the estimated density is from the actual density and use that as the source term\n    return getDensity(p) + 0.995*getEstimatedDensity(p);\n}\n\n\n//single component convolution pass x\n//first pass of separable poisson filter convolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //do a convolution in the x direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy);\n    ivec2 coord = ivec2(fragCoord.xy);\n\n    vec4 sum = vec4(0.0);\n    \n    for (int i = -Nc; i <= Nc; i++) \n    {\n        ivec2 pos = wrap(coord + ivec2(i, 0), resol);\n       \n        float density = getDensityError(pos);\n\n        int id = (i + Nc);\n        //loop over ranks\n        for(int j = 0; j < 4; j++)\n        {\n            sum[j] += density * U[id + j * N];\n        }\n    }\n\n    fragColor = sum;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//second pass: do the convolution in the y direction\n//and write the result to the output\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //do a convolution in the y direction on iChannel0\n    ivec2 resol = ivec2(iResolution.xy);\n    ivec2 coord = ivec2(fragCoord.xy);\n\n    float sum = 0.0;\n    for (int i = -Nc; i <= Nc; i++) \n    {\n        //use texelFetch to get the pixel at the current index\n        ivec2 pos = wrap(coord + ivec2(0, i), resol);\n        \n        //wrap around\n        pos.x = (pos.x + resol.x) % resol.x;\n        pos.y = (pos.y + resol.y) % resol.y;\n        \n        vec4 data = texelFetch(iChannel0, pos, 0);\n    \n        int id = (i + Nc);\n        //loop over pairs of ranks\n        for(int j = 0; j < 4; j++)\n        {\n            sum += data[j] * V[id + j * N];\n        }\n    }\n\n    //get previous poisson solution\n    float prev = 0.995*texelFetch(iChannel1, coord, 0).x;\n\n    //add the previous poisson solution to the convolution\n    sum += prev;\n\n    //return the final poisson solution\n    fragColor = vec4(sum);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}