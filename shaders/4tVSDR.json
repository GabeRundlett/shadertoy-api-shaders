{
    "Shader": {
        "info": {
            "date": "1483868832",
            "description": "I want to look at the time-domain waveform. Is this the correct way to do the inverse fourier transform on the given data?!",
            "flags": 96,
            "hasliked": 0,
            "id": "4tVSDR",
            "likes": 6,
            "name": "Coasing",
            "published": 3,
            "tags": [
                "coasing"
            ],
            "usePreview": 0,
            "username": "voz",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR/E+1.0/GR/PI/E)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.333, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec4 sample1 = texture(iChannel0, uv);\n    vec4 sample2 = texture(iChannel1, uv);\n    \n    float w = smoothstep(0.0, 1.0, length(sample2.zw*2.0-1.0)/sqrt(2.0));\n    \n    fragColor.rgb = (sample1.rgb*w+\n                     \n                      (1.0-w));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR/E+1.0/GR/PI/E)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.333, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rormal(x) (normalize(sin(vec3(time, time/GR, time*GR)+seedling)*.25+.5))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\nconst int iters = 512;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = 0.0;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    const float N = 512.0;\n    for(float n = 0.0; n < N; n += 1.0)\n    {\n        float Xk = texture(iChannel0, vec2(n/N, .25)).r;\n        float theta = (uv.x)*2.0*PI*n/N;\n        h += (cos(theta))*Xk/N;\n    }\n    \n    uv.y = uv.y*2.0;\n    \n    fragColor = vec4(1.0-smoothstep(0.0, 1.0/PI/GR/E, abs(uv.y-.25-h)));\n    uv.y -= 1.0;\n    fragColor +=\n        vec4(1.0-smoothstep(0.0, 1.0/PI/GR/E, abs(uv.y-texture(iChannel0, vec2(uv.x, .75)).r)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 6657,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ronthedon-2/zion-i-coastin"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//-----------------USEFUL-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n#define time ((saw(float(__LINE__))/GR+.5/GR)*(iTime/PI+12345.12345))\n\nfloat saw(float x)\n{\n    x/= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\nvec4 saw(vec4 x)\n{\n    return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w));\n}\n\n#define R 3.0\n#define RESTITUTION .5\n\nvec4 FindArrivingParticle( vec2 arriveCoord )\n{\n    vec4 p = vec4(0.0);\n    float sum = 0.0;\n    for( float i = -R; i <= R; i++ )\n    {\n        for( float j = -R; j <= R; j++ )\n        {\n            vec2 partCoord = arriveCoord + vec2( i, j )/ iResolution.xy;\n            \n            vec4 part = texture( iChannel1, partCoord );\n            \n            \n            vec2 nextPos = part.xy + .5*(part.zw*2.0-1.0)/ iResolution.xy * R* R;\n            // arrival means within half a pixel of this bucket\n            vec2 off = (nextPos - arriveCoord)*iResolution.xy;\n            if( abs(off.x)<= sqrt(1.0)/2.0*GR && abs(off.y)<=sqrt(1.0)/2.0*GR )\n            {\n                // yes! greedily take this particle.\n                // a better algorithm might be to inspect all particles that arrive here\n                // and pick the one with the highest velocity.\n                p += part;\n                sum += 1.0;\n            }\n        }\n    }\n    // no particle arriving at this bucket.\n    return p/sum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv0 = uv;\n    vec4 sample0 = texture(iChannel1, uv0);\n    vec4 sample1 = texture(iChannel0, uv0);\n    vec4 arrival = FindArrivingParticle(uv);\n    \n    if(iFrame == 0)\n    {\n        fragColor = vec4(vec2(uv), vec2(0.5, 0.5));\n        return;\n    }\n    \n    float thresh = (128.0+64.0+32.0)/255.0;\n    \n    float w = clamp(sample1.a, 0.0, 1.0);\n    \n    if(w > thresh )//|| length(sample0.xy-uv) > sqrt(100.0)/length(iResolution.xy))\n    {\n        w = (w - thresh)/(1.0-thresh);\n        fragColor = vec4(uv0, (saw(sample1.xy/w+uv+time)));\n        return;\n    }\n    \n    w = (thresh-w)/(thresh);\n    arrival.xy += .5*(arrival.zw*2.0-1.0)/ iResolution.xy * R * R;\n    //arrival.zw = ((arrival.zw*2.0-1.0)*.975)*.5+.5;\n    \n    fragColor.xyzw = (arrival.xyzw);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}