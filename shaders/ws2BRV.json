{
    "Shader": {
        "info": {
            "date": "1590442871",
            "description": "Playing around with raymarching and learn how textures work. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ws2BRV",
            "likes": 5,
            "name": "Wobbly Floor",
            "published": 3,
            "tags": [
                "raymarching",
                "texture"
            ],
            "usePreview": 0,
            "username": "donnerbrenn",
            "viewed": 354
        },
        "renderpass": [
            {
                "code": "\nvec3 color;\nfloat approx=.001;\nfloat renderDist=15.;\nfloat maxIter=500.;\n\nuniform sampler2D Texture;\nvec3 ro=vec3(0);\n\nvec3 rotate(vec3 p,vec3 t)\n{\n      float c=cos(t.x),s=sin(t.x);\n      mat3 m=mat3(vec3(1,0,0),vec3(0,c,-s),vec3(0,s,c));\n\n      c=cos(t.y);s=sin(t.y);\n      m*=mat3(vec3(c,0,s),vec3(0,1,0),vec3(-s,0,c));\n\n      c=cos(t.z);s=sin(t.z);\n      m*=mat3(vec3(c,-s,0),vec3(s,c,0),vec3(0,0,1));\n\n      return m*p;\n}\n\nfloat sdPlane(vec3 p, vec4 n)\n{\n    return dot(p, n.xyz) + n.w;\n}\n\nfloat sdRoundbox( vec3 p, vec3 b, float r)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat map(vec3 p)\n{\n\n    p.z+=iTime;\n    p=rotate(p,vec3(0,0,sin(iTime*1.+p.z))*.25);\n    float plane=sdPlane(p,vec4(.0,3.14/4.,.0,.5));   \n    p.xz=mod(p.xz,2.)-1.;\n\n    float pillar=sdRoundbox(p,vec3(.1,8,.3),.1);\n    return min(plane,pillar);\n}\n\nvec3 normal(vec3 p) \n{\n    mat3 k = mat3(p,p,p) - mat3(0.005);\n    return normalize(map(p) - vec3( map(k[0]),map(k[1]),map(k[2])) );\n}\n\nfloat lightRender(vec3 n,vec3 l, vec3 v, float strength)\n{\n      return ((dot(n,normalize(l))*.5+.5)+pow(max(dot(v,reflect(normalize(l),n)),.0),10.))*strength;\n}\n\n\n//from https://github.com/electricsquare/raymarching-workshop\nvec3 triplanarMap(sampler2D t, vec3 p, vec3 n, float o)\n{\n        p=rotate(p,vec3(0,0,sin(iTime+p.z))*.25);\n\n    // Take projections along 3 axes, sample texture values from each projection, and stack into a matrix\n    mat3 triMapSamples = mat3(\n        texture(t, p.yz+o).rgb,\n        texture(t, p.xz+o).rgb,\n        texture(t, p.xy+o).rgb\n        );\n    triMapSamples[0] *= triMapSamples[0];\n    triMapSamples[1] *= triMapSamples[1];\n    triMapSamples[2] *= triMapSamples[2];\n \n    // Weight three samples by absolute value of normal components\n    return triMapSamples * abs(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=((fragCoord.xy/iResolution.xy)*2.-1.)*vec2(1.,iResolution.y/iResolution.x);\n    \n    vec3 rd=normalize(vec3(uv,1));\n    vec3 p=ro;\n\n    float iterations;\n    float d=1.;\n    while(distance(p,ro)<renderDist&&d>approx&&iterations<maxIter)\n    {\n        d=map(p);\n        p+=d*rd;\n        iterations++;\n    }\n    if(d<approx)\n    {\n        vec3 n=normal(p);\n        color=triplanarMap(Texture,p+vec3(0,0,iTime),n,.5);\n        color*=lightRender(n,vec3(10),rd,.5);\n        color*=pow((1.-distance(ro,p)/renderDist),2.);\n    }\n    color = pow (color, vec3 (0.45454));\n\n    fragColor=vec4(color,1.);\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}