{
    "Shader": {
        "info": {
            "date": "1723014835",
            "description": "漩涡",
            "flags": 0,
            "hasliked": 0,
            "id": "4f2cWV",
            "likes": 1,
            "name": "xuanwo",
            "published": 3,
            "tags": [],
            "usePreview": 0,
            "username": "571574085",
            "viewed": 66
        },
        "renderpass": [
            {
                "code": "// Shadertoy: Vortex Shader with Custom Pattern  \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)   \n{  \n    // 标准化坐标  \n    vec2 texCoord2D = fragCoord.xy / iResolution.xy;  \n\n    // 计算坐标相对中心点的偏移  \n    float u = texCoord2D.x - 0.5;  \n    float v = texCoord2D.y - 0.5;  \n\n    // 初始化参数  \n    float maxTheta = 6.283185; // 2 * PI  \n    float maxRho2 = 0.5;  \n    float thetaMin = 0.0;  \n    float thetaMax = maxTheta;  \n\n    // 计算平方距离和旋转角度  \n    float rho2 = u * u + v * v;  \n    float theta = mix(thetaMin, thetaMax, rho2 / maxRho2);  \n\n    // 计算旋转  \n    float s = sin(theta);  \n    float c = cos(theta);  \n    float u0 = c * u + s * v;  \n    float v0 = -s * u + c * v;  \n\n    // 重新计算标准化坐标  \n    vec2 uv0 = vec2(u0 + 0.5, v0 + 0.5);  \n\n    // 生成自定义图案，例如渐变色  \n    vec3 customColor = vec3(uv0.x, uv0.y, 0.5); // 创建一个简单的色彩渐变  \n\n    // 也可以创建其他类型的图案，例如条纹  \n    /*  \n    vec3 customColor = vec3(0.0);  \n    if (mod(floor(uv0.x * 10.0), 2.0) == 0.0)  \n        customColor = vec3(1.0, 0.5, 0.0); // 橙色条纹  \n    else  \n        customColor = vec3(0.0, 0.5, 1.0); // 蓝色条纹  \n    */  \n\n    // 输出最终颜色  \n    fragColor = vec4(customColor, 1.0);  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}