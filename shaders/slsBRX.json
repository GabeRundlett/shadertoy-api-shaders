{
    "Shader": {
        "info": {
            "date": "1651243506",
            "description": "maybe this will be useful to someone",
            "flags": 0,
            "hasliked": 0,
            "id": "slsBRX",
            "likes": 15,
            "name": "Parabola - L-inf Distance",
            "published": 3,
            "tags": [
                "sdf",
                "linf"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat linf(vec2 p) {\n    return max(abs(p.x),abs(p.y));\n}\n\nvec3 parabola_SDF(vec2 p, float h) {\n    vec2 p2 = p - min(p.x+p.y,0.)*.5;\n    float t = (sqrt(1.-4.*h*(-abs(p2.x)-p2.y))-1.)/h/2.;\n    t*=p.x<0.?-1.:1.;\n    vec2 closest = vec2(t,t*t*h);\n    float dist = linf(p-closest) * sign(p.x*p.x*h-p.y);\n    return vec3(dist,closest);\n}\n\nvec3 shadeDistance(float d) {\n    d *= .5;\n    float dist = d*120.;\n    float banding = max(sin(dist), 0.0);\n    float strength = sqrt(1.-exp(-abs(d)*2.));\n    float pattern = mix(strength, banding, (0.6-abs(strength-0.5))*0.3);\n    \n    vec3 color = vec3(pattern);\n    \n    color *= d > 0.0 ? vec3(0.769,0.918,0.624) : vec3(0.671,0.506,0.875);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\tfloat scale = 5.;\n    uv*=scale; mouse*=scale;\n    uv.y+=1.; mouse.y+=1.;\n    float pixel_size = scale/iResolution.y;\n    \n    float t = sin(iTime)*.25+.75;\n    float h = mix(.1,20.,pow(t,8.));\n\n    vec3 mousedist = parabola_SDF(mouse, h);\n    vec3 col = shadeDistance(parabola_SDF(uv, h).x);\n    if (iMouse.z > 0.) {\n        float dst = max(abs(mouse.x-uv.x),abs(mouse.y-uv.y));\n        col *= smoothstep(-pixel_size,pixel_size, dst - abs(mousedist.x)) *.5 +.5;\n        col = mix(vec3(0.396,0.894,0.902), col, smoothstep(-pixel_size,pixel_size, distance(mousedist.yz, uv) - .05));\n    }\n    //float sn = abs(uv.y+cos(uv.x*h))-.01;\n    //float snl = 0.*smoothstep(fwidth(sn),0.,sn);\n\n    fragColor = vec4(col,1.0);// + snl;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}