{
    "Shader": {
        "info": {
            "date": "1726269405",
            "description": "Raytrace the inside of a prolate spheroid until a small marble is hit. This was featured on John Baez' AMS blog Visual Insight: https://blogs.ams.org/visualinsight/2015/04/15/sphere-in-mirrored-spheroid/",
            "flags": 0,
            "hasliked": 0,
            "id": "MXfyDM",
            "likes": 0,
            "name": "Sphere in Mirrored Spheroid",
            "published": 3,
            "tags": [
                "raytracing",
                "fractal"
            ],
            "usePreview": 0,
            "username": "Refurio",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "\nconst float speed = 0.1;\n\n// quality\nint depth = 50;\nbool supersampling = true;\n\nfloat angle = 30.;\n// minor half-axis is always 1\nfloat major = 1.1;\nfloat light_r = 0.1;\nfloat light_pitch = 0.;\nvec3 light_c;\n\nvec3 right;\nvec3 up;\nvec3 look_at;\n\nconst float pi = radians(180.);\nfloat eps = 0.001;\n\nfloat sqr(float x) {\n  return x*x;\n}\nfloat osc(float t, float lo, float hi) {\n  return (.5+.5*sin(t*pi))*(hi-lo)+lo;\n}\n\nvoid cam(vec2 coord, vec2 res, out vec3 pos, out vec3 dir) {\n  float r = min(res.x, res.y);\n  pos = (2.*coord.x/r - 1.*res.x/res.y)*right + (2.*coord.y/r - 1.)*up;\n  dir = look_at;\n}\n\nbool sphere_intersect(vec3 c, float r, inout vec3 pos, vec3 l) {\n  vec3 o = pos - c;\n\n  // https://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection\n  float dotlo = dot(l,o);\n  float ll = dot(l,l);\n  float z = sqr(dotlo) - ll*(dot(o,o) - sqr(r));\n  if(z < 0.)\n    return false;\n  z = sqrt(z);\n  float d1 = -dotlo + z;\n  float d2 = -dotlo - z;\n  if(     d1 > eps && (d1 < d2 || d2 < eps))\n\tpos = o + (d1/ll)*l;\n  else if(d2 > eps && (d2 < d1 || d1 < eps))\n    pos = o + (d2/ll)*l;\n  else\n    return false;\n  return true;\n}\nvec3 sphere_normal(vec3 pos) {\n  return pos;\n}\nstruct Model {\n  float a;\n  float r;\n  float c;\n};\nModel model;\nModel make_spheroid(float a) {\n  const float b = 1.;\n  float s = (a < 1.) ? a/b : b/a;\n  float f = 1.-s; // flattening\n  float e = sqrt(2.*f - f*f); // eccentricity\n  float c = e*a; // half focal distance\n  return Model(a, b, c);\n}\nbool spheroid_intersect(inout vec3 pos, vec3 l) {\n  float a = model.a;\n  pos = vec3(pos.x, pos.y/a, pos.z);\n  l = vec3(l.x, l.y/a, l.z);\n  bool ret = sphere_intersect(vec3(0,0,0), 1., pos, l);\n  pos = vec3(pos.x, pos.y*a, pos.z);\n  return ret;\n}\nvec3 spheroid_normal(vec3 p) {\n  float a = model.a;\n  float c = model.c;\n  float y = p.y;\n  float r = length(p.xz);\n  float q = y / (r+c);\n  vec3 n = vec3(p.x, r*q, p.z);\n  return normalize(n);\n}\nvoid refl(inout vec3 d, vec3 n) {\n    d = d - 2.*dot(d, n)*n;\n}\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv(float h, float s, float v) {\n    vec3 c = vec3(h, s, v);\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 draw(vec3 pos, vec3 dir) {\n  if(sphere_intersect(light_c, light_r, pos, -dir))\n    return vec3(1.);\n  int i;\n  for(i = 0; i <= depth; ++i) {\n    if(sphere_intersect(light_c, light_r, pos, dir))\n      break;\n    spheroid_intersect(pos, dir);\n    vec3 n = spheroid_normal(pos);\n    refl(dir, n);\n  }\n  float s = float(i)/float(depth);\n  return hsv(.63, s, 1.-s/2.);\n}\n\nvoid mainImage0( out vec4 fragColor, in vec2 fragCoord ) {\n  float t = iTime*speed;\n  \n  // some animation ideas:\n  angle = osc(t/4., -90., 90.);\n  major = osc(t/6., 1., 2.);\n  light_pitch = radians(t/8.*360.);\n//  depth = int(osc(t,1.,100.));\n//  light_r = osc(t*10., 0.01, 0.5);\n  \n  right = vec3(1,0,0);\n  up = vec3(0, cos(radians(angle)), sin(radians(angle)));\n  look_at = cross(right, up);\n  light_c = (1.-light_r) * vec3(cos(light_pitch), sin(light_pitch), 0.);\n\n  model = make_spheroid(major);\n  vec3 pos, dir;\n  cam(fragCoord, iResolution.xy, pos, dir);\n  \n  fragColor = vec4(draw(pos, dir), 1.);\n}\n\n// https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\nvoid mainImage(out vec4 O, vec2 U) {\n  mainImage0(O,U);\n  if(!supersampling)\n    return;\n  if(fwidth(length(O)) > .01) { // difference threshold between neighbor pixels\n    vec4 o;\n    for(int k=0; k < 9; k+= k==3?2:1 ) {\n      mainImage0(o,U+vec2(k%3-1,k/3-1)/3.);\n      O += o;\n    }\n    O /= 9.;\n//    O.r++; // uncomment to see where the oversampling occurs\n  }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}