{
    "Shader": {
        "info": {
            "date": "1684702375",
            "description": "Lens distortion / chromatic shif",
            "flags": 0,
            "hasliked": 0,
            "id": "DlV3DV",
            "likes": 8,
            "name": "Lens distortion, chromatic shift",
            "published": 3,
            "tags": [
                "lens",
                "chromatic"
            ],
            "usePreview": 0,
            "username": "matiasgf",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "// Lens distortion, chromatic shift\n// by matiasgf\n// https://www.shadertoy.com/view/DlV3DV\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = fragCoord.xy;\n  vec3 result = vec3(1.0);\n\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 vUv = fragCoord/iResolution.xy;\n     \n  vec2 textureSize = iResolution.xy;\n  vec2 sphereCenter = iMouse.xy == vec2(0., 0.) ? iResolution.xy / 2. : iMouse.xy;\n  vec2 spehereCenterUv = sphereCenter / textureSize;\n\n  float sphereRadius = iResolution.y * 0.35;\n  float focusFactor = 0.7;\n  float chromaticAberrationFactor = 0.2;\n\n  float zoom = 1.5;\n  vec2 zoomedUv = zoomUV(\n      vUv, spehereCenterUv, zoom\n  );\n\n  DistortedLens distortion = getLensDistortion(\n    p, zoomedUv, sphereCenter, sphereRadius, focusFactor, chromaticAberrationFactor\n  );\n  \n  float imageDistorted_R = texture(iChannel0, distortion.uv_R).x;\n  float imageDistorted_G = texture(iChannel0, distortion.uv_G).y;\n  float imageDistorted_B = texture(iChannel0, distortion.uv_B).z;\n\n  vec3 imageDistorted = vec3(\n      imageDistorted_R,\n      imageDistorted_G,\n      imageDistorted_B\n  );\n  vec3 image = texture(iChannel0, vUv).xyz;\n  \n  image = mix(image, imageDistorted, distortion.inside);\n  result = vec3(image);\n  \n  // Output to screen\n  fragColor = vec4(result,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 getDistortedUv(vec2 uv, vec2 direction, float factor) {\n  return uv - direction * factor;\n}\n\nstruct DistortedLens {\n  vec2 uv_R;\n  vec2 uv_G;\n  vec2 uv_B;\n  float focusSdf;\n  float speherSdf;\n  float inside;\n};\n\nDistortedLens getLensDistortion(\n  vec2 p,\n  vec2 uv,\n  vec2 sphereCenter,\n  float sphereRadius,\n  float focusFactor,\n  float chromaticAberrationFactor\n) {\n  vec2 distortionDirection = normalize(p - sphereCenter);\n\n  float focusRadius = sphereRadius * focusFactor;\n  float focusStrength = sphereRadius / 2000.0;\n\n  float focusSdf = length(sphereCenter - p) - focusRadius;\n  float speherSdf = length(sphereCenter - p) - sphereRadius;\n  float inside = clamp( -speherSdf / fwidth(speherSdf), 0., 1.);\n  \n  float magnifierFactor = focusSdf / (sphereRadius - focusRadius);\n    \n  float mFactor = clamp(magnifierFactor * inside, 0., 1.);\n  mFactor = pow(mFactor, 4.0);\n\n  vec3 distortionFactors = vec3(\n    mFactor * focusStrength * (1.0 + chromaticAberrationFactor),\n    mFactor * focusStrength,\n    mFactor * focusStrength * (1.0 - chromaticAberrationFactor)\n  );\n  vec2 uv_R = getDistortedUv(uv, distortionDirection, distortionFactors.r);\n  vec2 uv_G = getDistortedUv(uv, distortionDirection, distortionFactors.g);\n  vec2 uv_B = getDistortedUv(uv, distortionDirection, distortionFactors.g);\n\n  return DistortedLens(\n    uv_R,\n    uv_G,\n    uv_B,\n    focusSdf,\n    speherSdf,\n    inside\n  );\n}\n\nvec2 zoomUV(vec2 uv, vec2 center, float zoom) {\n  float zoomFactor = 1.0 / zoom;\n  vec2 centeredUV = uv - center;\n  centeredUV *= zoomFactor;\n  return centeredUV + center;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}