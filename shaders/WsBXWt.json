{
    "Shader": {
        "info": {
            "date": "1555233741",
            "description": "Further experimenting with my glass-shader. Fresnel still not working as intended (removed for now), but the overall look is ok for my taste. Somehow, I like this one better than the jelly glass cubes. There is an options to control the camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBXWt",
            "likes": 21,
            "name": "Hollow glass cube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "phong",
                "sdf",
                "shadow",
                "glass",
                "material",
                "blinn"
            ],
            "usePreview": 1,
            "username": "MacSlow",
            "viewed": 964
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Hollow glass cube - More experimenting with the glass shader. Fresnel still\n// not working correctly. Share and enjoy!\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// set to 1 for manual camera-control\n#define MANUAL_CAMERA 0\n\nbool isInside = false;\n\nmat2 r2d (float deg) {\n\tfloat rad = radians (deg);\n\tfloat c = cos (rad);\n\tfloat s = sin (rad);\n\treturn mat2 (c,s,-s,c);\n}\n\nfloat smin (float d1, float d2, float k) {\n\tfloat h = clamp (.5 + .5*(d2 - d1)/k, .0, 1.);\n\treturn mix (d2, d1, h) - h*k*(1. - h);\n}\n\nfloat sdBox (in vec3 p, in vec3 size, in float r)\n{\n\tvec3 d = abs(p) - size;\n\treturn min (max (d.x, max (d.y,d.z)), .0) + length (max (d, .0)) - r;\n}\n\nfloat map (vec3 p, inout int id, inout vec3 pout) {\n    vec3 pground = p;\n\tfloat ground = pground.y + 1.;\n    vec3 pwall = p;\n\tfloat wall = pwall.z + 1.;\n\tvec3 pbox = p + vec3 (.0, -.4, -.2);\n\tpbox.xz *= r2d (14.*iTime);\n\tpbox.yz *= r2d (26.*iTime);\n\tfloat r = .75 + .1*(.5+.5*cos(4.*iTime + 9.*pbox.y));\n\tfloat box = sdBox (pbox, vec3 (.6), .05);\n\tfloat box2 = sdBox (pbox, vec3 (.55), .06);\n\tbox = max (box, -box2);\n\tp -= vec3 (2.5*cos (1.25*iTime), .75, .2);\n\tp.xz *= r2d (-60.*iTime);\n\tp.yz *= r2d (-90.*iTime);\n\tfloat ball = sdBox (p , vec3 (.4), .05);\n\tbox = (isInside? -1. : 1.)*box; //smin (box, ball, .5);\n\tfloat d = min (ground, min (wall, box));\n\tif (d == ground) {id = 1; pout = pground;}\n\tif (d == wall) {id = 2; pout = pwall;}\n\tif (d == box) {id = 3; pout = p;}\n    return d;\n}\n\nfloat march (vec3 ro, vec3 rd, inout int id, inout vec3 pout)\n{\n\tfloat t = .0;\n\tfloat d = .0;\n\tfor (int i = 0; i< 48; ++i) {\n\t\tvec3 p = ro+d*rd;\n\t\tt = map (p, id, pout);\n\t\tif (abs (t) < .00001*(1. + .125*t)) break;\n\t\td += t*.75;\n\t}\n\treturn d;\n}\n\nvec3 norm (vec3 p){\n\tint foo;\n\tvec3 bar;\n\tfloat d = map (p, foo, bar);\n\tvec2 e = vec2 (.001, .0);\n\treturn normalize (vec3 (map (p+e.xyy, foo, bar),\n                            map (p+e.yxy, foo, bar),\n                            map (p+e.yyx, foo, bar))-d);\n}\n\nfloat sha (vec3 p, vec3 lp, vec3 n, vec3 ldir) {\n\tfloat d2l = distance (lp, p);\n\tint foo;\n\tvec3 bar;\n\tfloat d2w = march (p+.01*n, ldir, foo, bar);\n\treturn d2l < d2w ? 1. : .1;\n}\n\nfloat ao (vec3 p, vec3 n, float stepsize, float i){\n\tfloat ao = .0;\n\tfloat dist = .0;\n\tint foo;\n\tvec3 bar;\n\tfor (int a = 1; a <= 8; ++a) {\n\t\tdist = float (a)*stepsize;\n\t\tao += max (.0, (dist - map (p+n*dist, foo, bar))/dist);\n\t}\n\treturn 1. - ao*i;\n}\n\nvec2 normalMap(in vec2 uv)\n{\n    vec2 s = 1./iChannelResolution[1].xy;\n    float p = texture(iChannel1, uv).r;\n    float h = texture(iChannel1, uv + s*vec2(1., .0)).r;\n    float v = texture(iChannel1, uv + s*vec2(.0, 1.)).r;\n   \treturn p - vec2(h, v);\n}\n\nvec3 shade (vec3 ro,\n\t\t\tvec3 rd,\n\t\t\tfloat d,\n\t\t\tvec3 n,\n\t\t\tvec3 lp,\n\t\t\tvec3 lc,\n\t\t\tfloat li,\n\t\t\tint id,\n\t\t\tvec3 pout) {\n    vec3 p = ro + d*rd;\n\tfloat ld = distance (p, lp); \n\tvec3 ldir = normalize (lp - p);\n\tfloat att = 5. / (ld*ld);\n\tvec3 mat = vec3 (.2);\n\tif (id == 1) {\n\t    vec2 noffset = -4.*normalMap(.25*pout.xz*r2d (-20.));\n        n = normalize (n + vec3 (noffset.x, .0, noffset.y));\n\t\tmat = texture (iChannel1, .25*pout.xz*r2d(-20.)).rgb;\n\t}\n\tif (id == 2) {\n\t    vec2 noffset = -4.*normalMap(.25*pout.xy*r2d (20.));\n        n = normalize (n + vec3 (noffset.x, noffset.y, .0));\n\t\tmat = texture (iChannel1, .25*pout.xy*r2d(20.)).rgb;\n\t}\n\tif (id == 3) {\n\t\tmat = vec3 (.9, .5, .2);\n\t}\n\tfloat s = sha (p, lp, n, ldir);\n\tfloat diff = max (.0, dot (n, ldir));\n\tvec3 h = normalize (-rd + ldir);\n\tfloat shiny = 100.;\n\tfloat lf = .0;\n\tfloat hf = .0;\n    float fac = 1.;\n\tshiny *= fac;\n\tfloat sp = pow (max (.0, dot (n, h)), shiny);\n\tvec3 am = vec3 (.05);\n\tfloat ao = ao (p, n, .1, .1);\n\tao *= (isInside ? 1.25 : 1.);\n\t\n\treturn ao*att*s*(am + diff*lc*li*mat + sp*vec3 (1.));\n}\n\nvec3 cam (vec2 uv, vec3 ro, vec3 aim, float zoom) {\n\tvec3 f =normalize (aim - ro);\n\tvec3 wu = vec3 (.0, 1., .0);\n\tvec3 r = normalize (cross (wu, f));\n\tvec3 u = normalize (cross (f, r));\n\tvec3 c = ro + f*zoom;\n\treturn normalize (c + r*uv.x+u*uv.y - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uvRaw = fragCoord.xy/iResolution.xy;\n\tvec2 uv = uvRaw*2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\tuv *= 1. + .25*length (uv);\n\n    #if MANUAL_CAMERA == 1\n    float x = -2.*(iMouse.x/iResolution.x * 2. - 1.);\n    float y = 2.*(iMouse.y/iResolution.y * 2. - 1.);\n\tvec3 ro = vec3 (x, 1. + y, 2.5);\n    #else\n\tvec3 ro = vec3 (cos (iTime), 1. + .125*(.5+.5*cos(5.*iTime)), 2.5);\n    #endif\n\n    vec3 rd = cam (uv, ro, vec3 (.0), 1.7);\n\tint id = 0;\n\tvec3 pout = vec3 (.0);\n\tisInside = false;\n\tfloat d = march (ro, rd, id, pout);\n\tvec3 p = ro + d*rd;\n\tvec3 n = norm (p);\n\tvec3 col = vec3 (.0);\n\n\tvec3  lp1 = vec3 (2., 1., 2.);\n\tvec3  lc1 = vec3 (.9, .8, .7);\n\tfloat li1 = 3.;\n\tvec3  lp2 = vec3 (.7, 3., .0);\n\tvec3  lc2 = vec3 (.2, .2, .9);\n\tfloat li2 = 6.;\n\tvec3  lp3 = vec3 (-2., 2., .5);\n\tvec3  lc3 = vec3 (.9, .3, .2);\n\tfloat li3 = 3.;\n\n\tfloat fac = 1.;\n\tif (id == 3) {\n\t\tfac = .025;\n\t}\n\n\tcol = fac*shade (ro, rd, d, n, lp1, lc1, li1, id, pout);\n\tcol += fac*shade (ro, rd, d, n, lp2, lc2, li2, id, pout);\n\tcol += fac*shade (ro, rd, d, n, lp3, lc3, li3, id, pout);\n\tif (id == 3) {\n\t\tn = normalize (n + texture (iChannel0, .75*p.xy).r);\n\t\tro = p - .05*n;\n\t\tfloat ior = .85;\n\t\trd = normalize (refract (rd, n, ior));\n\t\tisInside = true;\n\t\td = march (ro, rd, id, pout);\n\t\tp = ro + d*rd;\n\t\tn = norm (p);\n\t\tcol += shade (ro, rd, d, n, lp1, lc1, li1, id, pout);\n\t\tcol += shade (ro, rd, d, n, lp2, lc2, li2, id, pout);\n\t\tcol += shade (ro, rd, d, n, lp3, lc3, li3, id, pout);\n\n\t\tro = p - .01*n;\n\t\trd = normalize (refract (rd, n, ior));\n\t\tisInside = false;\n\t\td = march (ro, rd, id, pout);\n\t\tp = ro + d*rd;\n\t\tn = norm (p);\n\t\tcol += shade (ro, rd, d, n, lp1, lc1, li1, id, pout);\n\t\tcol += shade (ro, rd, d, n, lp2, lc2, li2, id, pout);\n\t\tcol += shade (ro, rd, d, n, lp3, lc3, li3, id, pout);\n\n\t\tif (id == 3) {\n\t\t\tn = normalize (n + texture (iChannel0, .75*p.xy).r);\n\t\t\tro = p - .05*n;\n\t\t\trd = normalize (refract (rd, n, ior));\n\t\t\tisInside = true;\n\t\t\td = march (ro, rd, id, pout);\n\t\t\tp = ro + d*rd;\n\t\t\tn = norm (p);\n\t\t\tcol += shade (ro, rd, d, n, lp1, lc1, li1, id, pout);\n\t\t\tcol += shade (ro, rd, d, n, lp2, lc2, li2, id, pout);\n\t\t\tcol += shade (ro, rd, d, n, lp3, lc3, li3, id, pout);\n\n\t\t\tro = p - .01*n;\n\t\t\trd = normalize (refract (rd, n, ior));\n\t\t\tisInside = false;\n\t\t\td = march (ro, rd, id, pout);\n\t\t\tp = ro + d*rd;\n\t\t\tn = norm (p);\n\t\t\tcol += shade (ro, rd, d, n, lp1, lc1, li1, id, pout);\n\t\t\tcol += shade (ro, rd, d, n, lp2, lc2, li2, id, pout);\n\t\t\tcol += shade (ro, rd, d, n, lp3, lc3, li3, id, pout);\n\t\t}\n\t}\n\n\tcol = col / (1. + col);\n\tcol *= 1. - .5*length(uvRaw*2.-1.);\n\tcol = pow (col, vec3 (1./2.2));\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}