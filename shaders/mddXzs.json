{
    "Shader": {
        "info": {
            "date": "1680292188",
            "description": "This shader brings the vibrant and playful look of 80's Ordered dithering graphics to life.",
            "flags": 2,
            "hasliked": 0,
            "id": "mddXzs",
            "likes": 4,
            "name": "Simple Ordered Dither",
            "published": 3,
            "tags": [
                "80s",
                "dither",
                "elmrealm",
                "ditherpunk"
            ],
            "usePreview": 0,
            "username": "outofpaper",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "#define Mode Mode_Monochrome\n\n#define Dither\n#define DownScale 4.0\n#define DistanceParam 0.25 // [0-1]\n\n#define Mode_Monochrome 2\n#define Mode_Color 3\n\n#if (Mode == Mode_Monochrome)\n#define PaletteSize 2\n\nvec3 palette[PaletteSize];\n\nvoid init()\n{\n\tpalette = vec3[]\n    (\n        vec3(  0,   0,   0)/255.0,\n        vec3(0, 255, 200)/255.0\n\t);\n}\n#endif\n\n#if (Mode == Mode_Color)\n#define PaletteSize 16\n\nvec3 palette[PaletteSize];\n\nvoid init()\n{\n\tpalette = vec3[]\n    (\n       vec3(0,0,0)/255.0,\n        vec3(255,255,255)/255.0,\n        vec3(255,0,0)/255.0,\n        vec3(0,255,0)/255.0,\n        vec3(0,0,255)/255.0,\n        vec3(255,255,0)/255.0,\n        vec3(0,255,255)/255.0,\n        vec3(255,0,255)/255.0,\n        vec3(192,192,192)/255.0,\n        vec3(128,128,128)/255.0,\n        vec3(128,0,0)/255.0,\n        vec3(128,128,0)/255.0,\n        vec3(0,128,0)/255.0,\n        vec3(128,0,128)/255.0,\n        vec3(0,128,128)/255.0,\n        vec3(0,0,128)/255.0\n\t);\n}\n#endif\n\nfloat colorDistance(vec3 color, vec3 c1, vec3 c2, float frac)\n{\n    return mix(distance(color, mix(c1, c2, frac)), distance(color, c1) + distance(color, c2), 0.5*DistanceParam*DistanceParam);\n}\n\nvec3 getPalettifiedColor(vec3 color, vec2 coord)\n{\n    color *= color;\n\n    vec3 c1 = vec3(0);\n    vec3 c2 = vec3(0);\n    \n    float frac = 0.0;\n\n    for (int i = 0; i < (PaletteSize - 1); ++i)\n    {\n        for (int j = i + 1; j < PaletteSize; ++j)\n        {\n            vec3 p1 = palette[i];\n            vec3 p2 = palette[j];            \n            \n            p1 *= p1;\n            p2 *= p2;\n           \n            vec3 num = p1*p1 - p1*color - p1*p2 + p2*color;\n            vec3 den = p1*p1 - 2.0*p1*p2 + p2*p2;\n            \n            float a = (num.r + num.g + num.b)/(den.r + den.g + den.b);\n            \n            if (colorDistance(color, p1, p2, a) < colorDistance(color, c1, c2, frac))\n            {\n                c1 = p1;\n                c2 = p2;\n                frac = a;\n            }\n        }\n    }\n    \n#ifdef Dither\n    return sqrt(mix(c1, c2, float(frac > texture(iChannel0, coord/iChannelResolution[0].xy).r)));\n#else\n    return sqrt(mix(c1, c2, frac));\n#endif\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    init();\n    \n    fragCoord = floor(fragCoord/DownScale)*DownScale;\n    \n    vec2 uv = fragCoord.xy / iResolution.y;\n  \n    vec3 outColor = texture(iChannel1, fragCoord.xy/iResolution.xy).rgb;\n    \n    outColor = getPalettifiedColor(outColor, fragCoord.xy/DownScale);\n    \n    if (uv.x < 0.05)\n    {\n        float idx = clamp(uv.y, 0.0, 1.0)*float(PaletteSize);\n        outColor = palette[int(idx)];\n    }\n\n    fragColor = vec4(outColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}