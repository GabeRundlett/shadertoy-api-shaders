{
    "Shader": {
        "info": {
            "date": "1662219506",
            "description": "Dynamic Animated Wave Background\nInspired by new dynamic Keynote backgrounds",
            "flags": 0,
            "hasliked": 0,
            "id": "stGyDV",
            "likes": 2,
            "name": "Dynamic Animated Wave Background",
            "published": 3,
            "tags": [
                "dynamic"
            ],
            "usePreview": 0,
            "username": "janekb04",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "// Global speed of the animation: higher means faster; default(0.15)\n#define SPEED 0.15\n\n// You can use the 'time' variable inside of these defines\n// like e.g. #define OPACITY sin(time)\n\n// How much are background layers blured: higher gives more blur; default(0.03)\n#define BLUR_FACTOR 0.03\n// The opacity of a layer: 0.0 means transparent, 1.0 means opaque; default(0.35)\n#define OPACITY 0.35\n// Layer count: how many layers are there; default(10)\n#define LAYER_COUNT 10\n// Horizon height: higher makes peaks higher\n#define HORIZON_HEIGHT map_range(smoothstep(0.0, 0.5, abs(fract(time*0.05) - 0.5)), 0.0, 0.5, 0.2, 0.4)\n// Moves everything up or down (default 0.05)\n#define Y_OFFSET 0.05\n// Fog: the higher, the more transparent are deeper layers; default(2.5)\n#define FOG 2.5\n\n// Background color (default vec3(0.03, 0.06, 0.19)) \n#define BACKGROUND vec3(0.03, 0.06, 0.19)\n// Front Hue: the Hue of the front most layer color; default(0.45)\n#define H0 0.45\n// Middle Hue: the Hue of the middle layer color; default(0.53)\n#define H1 0.53\n// Last Hue: the Hue of the last layer color; default(0.84)\n#define H2 0.84\n// Saturation all layer colors; default(0.59)\n#define SATURATION 0.59\n// Value of all layer colors; default(1.0)\n#define VALUE 1.0\n\n// Enable MSAA; default(0)\n#define MSAA 0\n// Size of MSAA lookup area: larger gives a more antialiased output; (default 0.5)\n#define MSAA_SIZE 0.5\n// Number of MSAA samples: more gives higher quality, but slower; default(4.0)\n#define MSAA_SAMPLES 4.0\n\nfloat map_range(float val, float old_min, float old_max, float new_min, float new_max)\n{\n    return mix(new_min, new_max, (val - old_min) / (old_max - old_min));\n}\n\nfloat wave(vec2 UV, vec2 translate, vec2 scale, float time)\n{\n    return sin((UV.x + time) * scale.x + translate.x) * scale.y + translate.y;\n}\nfloat layer(vec2 UV, float depth, float time)\n{\n    float scaleX = depth * 0.25;\n    float scaleY = 0.1 / depth;\n    vec2 translate = vec2(pow(depth, 5.0) * 1.618033, (HORIZON_HEIGHT + Y_OFFSET) - HORIZON_HEIGHT / depth);\n\n    const int SIZE = 2;\n    vec2[] s = vec2[](\n        vec2(5.0 * scaleX, scaleY),\n        vec2(7.0 * scaleX, scaleY)\n    );\n\n    float r = 0.0;\n    for (int i = 0; i < SIZE; ++i) {\n        r += wave(UV, translate, s[i], time * 0.1 + time * 0.1 * float(i + 1));\n    }    \n    \n    float x = UV.y - r;\n    float f = (depth - 1.0) * BLUR_FACTOR;\n    float a = smoothstep(0.0, 1.0, clamp(-x / f + 0.5, 0.0, 1.0));\n    \n    return float(a) * OPACITY;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat map(int i, int n)\n{\n    float x = float(i) / float(n);\n    return clamp(pow(x, 0.3) - 0.1, 0.0, 1.0);\n}\n\nvec3 color(float x, float time)\n{\n    float h;\n    if (x <= 0.5)\n        h = mix(H0, H1, smoothstep(0.0, 0.5, x));\n    else\n        h = mix(H1, H2, smoothstep(0.5, 1.0, x));\n    return hsv2rgb(vec3(h, SATURATION, VALUE));\n}\n\nvec3 calculate(vec2 UV, float time)\n{\n    vec3 r = BACKGROUND;\n    for (int i = LAYER_COUNT - 1; i >= 0; --i)\n    {\n        float opacity = max(layer(UV, float(i), time), 0.0);\n        opacity *= pow((1.0 - float(i) / float(LAYER_COUNT)), FOG);\n        r = opacity * color(map(i, LAYER_COUNT), time) + (1.0 - opacity) * r;\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * SPEED;\n    \n    vec2 UV = fragCoord/iResolution.xy;\n    \n#if MSAA\n    vec3 r = vec3(0.0);\n    float samples = 0.0;\n    for (float x = fragCoord.x - MSAA_SIZE; x <= fragCoord.x + MSAA_SIZE; x += 2.0 * MSAA_SIZE / MSAA_SAMPLES) {\n    for (float y = fragCoord.y - MSAA_SIZE; y <= fragCoord.y + MSAA_SIZE; y += 2.0 * MSAA_SIZE / MSAA_SAMPLES) {\n        r += calculate(vec2(x, y)/iResolution.xy, time);\n        samples += 1.0;\n    }}\n    r /= samples;\n#else\n    vec3 r = calculate(fragCoord/iResolution.xy, time);\n#endif\n    fragColor = vec4(r, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}