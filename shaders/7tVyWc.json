{
    "Shader": {
        "info": {
            "date": "1662383954",
            "description": "A constellation-esque shader based on an Art Of Code video",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVyWc",
            "likes": 16,
            "name": "Inner Space",
            "published": 3,
            "tags": [
                "space"
            ],
            "usePreview": 1,
            "username": "Manlibear",
            "viewed": 790
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa -ba *t);\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n    float d = DistLine(p,a,b);\n    float d2= length(a-b);\n    float m = S(.02, .001, d);\n    m *= S(1.2, .001, length(a-b)) *.5 + S(.1, .03, abs(d2-.75));\n     return m;\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.213, 853.23));\n    p += dot(p, p+23.24);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p){\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\nvec2 GetPos(vec2 id, vec2 off){\n    vec2 n = N22(id + off) * iTime;\n    return off + sin(n) *.4;\n}\n\nfloat Layer(vec2 uv){\n\n\n    vec2 gv = fract(uv) -.5;\n    vec2 id = floor(uv);\n    float m = 0.;\n\n    vec2 p[9];\n    int i = 0;\n    \n    for(float y=-1.;y<=1.;y++){\n        for(float x=-1.;x<=1.;x++){\n            p[i++] = GetPos(id, vec2(x, y));\n        }\n    }\n    \n    float t=iTime* 5.;\n    \n    \n    for(int i = 0; i < 9;i++)\n    {\n        m += Line(gv, p[4], p[i]);\n        \n        vec2 j = (p[i] - gv) *30.;\n        float sparkle =  1./dot(j, j);\n        \n        m+= sparkle*(sin(t+fract(p[i].x)*10.)*.5 + .5);\n    }\n    \n     m += Line(gv, p[1], p[3]);\n     m += Line(gv, p[1], p[5]);\n     m += Line(gv, p[3], p[7]);\n     m += Line(gv, p[5], p[7]);\n     \n     return m;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy )/iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n\n    //zoom\n    uv *= 2.;\n    float m = 0.;\n    float t = iTime * .07;\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    \n    float mouseFac = (length(uv - mouse));\n    \n    uv *= rot;\n    \n    for(float i=0.;i<1.;i+= 1./4.){\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float fade = S(0., .9, z) * S(1., .8, z);\n        \n        m += Layer(uv * size + i*24. + mouse) * fade;\n    }\n    \n    vec2 uvBg = (fragCoord / iChannelResolution[0].xy + (iTime * .1)) *.1;\n    float bg =  texture(iChannel0, uvBg).x * .15;\n    \n    vec3 col = vec3(.04, .04, .1) + ((vec3(m, m, .7*m))) + bg;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}