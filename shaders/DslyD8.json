{
    "Shader": {
        "info": {
            "date": "1686946518",
            "description": " Mandelbrot Zoom\nMy first shader program.\nRuns out of float precision pretty fast!",
            "flags": 0,
            "hasliked": 0,
            "id": "DslyD8",
            "likes": 2,
            "name": "Mandelbrot Zoom (cuzzo008)",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "cuzzo008",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "const float E = exp(1.0);\nconst float PI = radians(180.0);\nconst int depth = 1000;\nconst float logDepth = log(float(depth));\nconst float limitNorm = 100.0;\nconst float squaredLimitNorm = limitNorm * limitNorm;\nconst vec2 zoomCenter = vec2(-0.77568377, 0.13646737);\nconst float timeConstant = 2.0;\nconst float baseWidth = 1.0;\nconst float baseWidthInverse = 1.0 / baseWidth;\n\nconst vec2 redMap = vec2(0.0, 1.0);\nconst vec2 greenMap = vec2(PI/3.0, 1.0);\nconst vec2 blueMap = vec2(2.0*PI/3.0, 1.0);\nconst vec3 colorMin = vec3(0.0, 0.0, 0.0);\nconst vec3 colorMax = vec3(1.0, 1.0, 1.0);\nconst float colorChangeFiddleFactor = 1.0;\n\nvec2 complexProd( in vec2 p1, in vec2 p2) {\n    float imaginaryPart = dot(p1.xy, p2.yx);\n    p1.y = -p1.y;\n    float realPart = dot(p1.xy, p2.xy);\n    return vec2(realPart, imaginaryPart);\n}\n\nfloat invLerp( in float a, in float b, in float c) {\n    return (b - a) / (c - a);\n}\n\nfloat iterationsBeforeLimit( in vec2 c) {\n    int iterations = 1;\n    vec2 currentPoint = vec2(0.0,0.0);\n    float lastContainedSquaredNorm = 0.0;\n    float currentPointSquaredNorm = 0.0;\n    for (int i = 0; i < depth; i++) {\n        currentPoint = complexProd(currentPoint, currentPoint);\n        currentPoint += c;\n        currentPointSquaredNorm = dot(currentPoint, currentPoint);\n        iterations += (currentPointSquaredNorm < squaredLimitNorm) ? 1 : 0;\n        lastContainedSquaredNorm = (currentPointSquaredNorm < squaredLimitNorm)\n                                 ? currentPointSquaredNorm\n                                 : lastContainedSquaredNorm;\n    }\n    float fractionalPart = invLerp(limitNorm, lastContainedSquaredNorm, squaredLimitNorm);\n    return float(iterations) - fractionalPart;\n}\n\nvec3 color( in float iterations )\n{\n    float a = 4.0*PI * log(iterations) / logDepth;\n    float adjTime = iTime*colorChangeFiddleFactor;\n    vec3 b = sin(a + vec3(redMap.x + adjTime*redMap.y, greenMap.x + adjTime*greenMap.y, blueMap.x + adjTime*blueMap.y));\n    b *= b;\n    return b;\n}\n\nvec2 complexCoord( in vec2 NDC ) {\n    vec2 coord = vec2(0.5 - NDC.x, NDC.y - 0.5);\n    coord /= (baseWidthInverse * exp(iTime/timeConstant));\n    coord.y *= iResolution.y / iResolution.x;\n    coord += zoomCenter;\n    return coord;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 complexCoord = complexCoord(uv);\n\n    // Time varying pixel color\n    vec3 col = color(iterationsBeforeLimit(complexCoord));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}