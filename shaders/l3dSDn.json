{
    "Shader": {
        "info": {
            "date": "1718898452",
            "description": "based on: https://www.shadertoy.com/view/MXtXz8",
            "flags": 32,
            "hasliked": 0,
            "id": "l3dSDn",
            "likes": 8,
            "name": "blue aurora",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "pb",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "//philip,bertani@gmail.com\n//Buffer A is where it is at\n\n//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    \n    vec2 texel = 1./iResolution.xy;\n    vec4 total_color;\n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n    fragColor = total_color;\n    \n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float glow=0., mmaxDist=100., angle;\nvec3 ro, light_dir,cc;\n\nmat2 rot(float an) {return mat2(cos(an),-sin(an),sin(an),cos(an));}\n\nfloat de(vec3 p) {\n\n  float nn = 1.;\n  p = mod(p  + nn, 2.*nn) -nn;\n \n  p.xz *= rot(iTime/3.); \n  \n  vec4 q0 = vec4 (p, 2.), q = q0; float i=0.;\n  \n  for (; i<3.; i ++) {\n    q.xyz = clamp (q.xyz, -1.3, 1.) * 2.4 - 1.4*q.xyz;   \n            \n    q.xz *= rot(i*i + iTime*1.5 );\n    q.yz *= rot(i*q.x + length(q.xz) + iTime);\n\n    q = q * .8\n        / clamp (  max( dot(q.yz,q.yz), max(dot (q.xz, q.xz),  dot(q.xy,q.xy) ) ), \n        .3*(1.+.9*sin(4.5+iTime/2.)), 1.1) + q0;\n        \n  } \n  \n  cc = q.xyz;\n  \n  angle = cos(q.z/6.);\n  \n  return length (q.xyz) / q.w ; \n}\n\nfloat march(vec3 ro, vec3 rd, float mx) {\n    \n    float t=0.,eps = 3e-4, distfac=20., hitThreshold = eps;\n    for(int i = 0; i < 200; i++) {\n        vec3 pos = ro + rd*t;\n        float d = de(pos);      \n           \n        if ( t> 20.)  break;\n        \n        t += d;\n        hitThreshold = eps*(1.+t*t*distfac);  \n        \n        float zz = pos.y - light_dir.y;\n        zz*=zz;\n        \n        glow += exp( -max(  zz-d, 0. )); \n        \n    }\n    return t;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    \n\n    light_dir = ro  ;  light_dir.y += .33;\n  \n    float t = march(ro, rd, mmaxDist);\n    vec3 glowCol;\n    vec3 pos = ro + rd*t; \n    vec3 glowSource = light_dir;\n    float glowStr = exp( -length(pos.y - glowSource.y)/2. );\n    glow *= glowStr;\n    \n\n    return     \n             +2e-7*pow(glow,6.) * vec3(.03+cos(cc.z/7.),.03,1.+.5*t*t) \n \n        ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = (2.*fragCoord.xy-iResolution.xy)/iResolution.y*.2;    \n    \n    vec3 rd = normalize( vec3(p,1.6 ) );\n    \n    ro = vec3(.9,3., iTime*1.3);\n    \n    rd.xz *= rot(.4);\n    rd.yz *=rot(-.25);\n\n \n    vec3 col = clamp(render(ro, rd),1e-4,1e6);\n    col = 1. - exp(-sqrt(col));\n    \n    fragColor = vec4( col, 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}