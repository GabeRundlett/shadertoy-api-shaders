{
    "Shader": {
        "info": {
            "date": "1587104668",
            "description": "4k intro for Revision Online 2020\n\nmusic: keen\n\npouet: https://www.pouet.net/prod.php?which=85243",
            "flags": 64,
            "hasliked": 0,
            "id": "wsjczV",
            "likes": 11,
            "name": "[4k] stuck by jetlag",
            "published": 3,
            "tags": [
                "4k",
                "refraction",
                "caustics",
                "pathtracing",
                "dispersion",
                "revision2020"
            ],
            "usePreview": 0,
            "username": "w23",
            "viewed": 658
        },
        "renderpass": [
            {
                "code": "float t;\nuniform sampler2D Tex;\n\nvec3 E=vec3(0.,.01,1.);\n\nfloat hash1(float f){return fract(sin(f)*46347.4238);}\nfloat hash2(vec2 v){return hash1(dot(v,vec2(79.53248,31.4328)));}\n\nfloat noise2(vec2 v) {\n\tvec2 V=floor(v);v-=V;\n\tv*=v*(3.-2.*v);\n\treturn mix(\n\t\tmix(hash2(V+E.xx), hash2(V+E.zx), v.x),\n\t\tmix(hash2(V+E.xz), hash2(V+E.zz), v.x), v.y);\n}\n\n// Real 4k uses real GDI-generated texture\nfloat getchar(vec2 char_pos) {\n    const float J = 74., L = 76., S = 83.;\n    const float a = 97.,  b = 98.,  c = 99.,  d = 100., e = 101., f = 102., g = 103., h = 104.;\n    const float i = 105., j = 106., k = 107., l = 108., m = 109., n = 110., o = 111., p = 112.;\n    const float q = 113., r = 114., s = 115., t = 116., u = 117., v = 118., w = 119., x = 120.;\n    const float y = 121., z = 122.;\n    const float dash = 45., slash = 47.;\n    const float n0 = 48., n2 = 50.;\n    const float space = 32.;\n    float cursor = 0.;\n    #define C(c) if (cursor == char_pos.x) { return c; } else { cursor++; } \n    if (char_pos.y == 0.) { C(n) C(o) C(t) C(i) C(c) C(e) C(space) C(m) C(e) C(space) C(s) C(e) C(m) C(p) C(a) C(i) }\n    else if (char_pos.y == 1.) { C(a) C(l) C(c) C(a) C(t) C(r) C(a) C(z) }\n\telse if (char_pos.y == 2.) { C(c) C(o) C(n) C(s) C(p) C(i) C(r) C(a) C(c) C(y) }\n\telse if (char_pos.y == 3.) { C(c) C(t) C(r) C(l) C(dash) C(a) C(l) C(t) C(dash) C(t) C(e) C(s) C(t) }\n\telse if (char_pos.y == 4.) { C(f) C(a) C(i) C(r) C(l) C(i) C(g) C(h) C(t)  }\n\telse if (char_pos.y == 5.) { C(f) C(a) C(r) C(b) C(r) C(a) C(u) C(s) C(c) C(h)  }\n\telse if (char_pos.y == 6.) { C(L) C(J)  }\n\telse if (char_pos.y == 7.) { C(l) C(o) C(g) C(i) C(c) C(o) C(m) C(a)  }\n\telse if (char_pos.y == 8.) { C(m) C(e) C(r) C(c) C(u) C(r) C(y)  }\n\telse if (char_pos.y == 9.) { C(o) C(r) C(a) C(n) C(g) C(e)  }\n\telse if (char_pos.y == 10.) { C(p) C(r) C(i) C(s) C(m) C(b) C(e) C(i) C(n) C(g) C(s)  }\n\telse if (char_pos.y == 11.) { C(q) C(u) C(i) C(t) C(e)  }\n\telse if (char_pos.y == 12.) { C(S) C(a) C(n) C(d) C(S)  }\n\telse if (char_pos.y == 13.) { C(s) C(t) C(i) C(l) C(l)  }\n\telse if (char_pos.y == 14.) { C(t) C(dash) C(r) C(e) C(x)  }\n\telse if (char_pos.y == 15.) { C(t) C(h) C(r) C(o) C(b)  }\n\telse if (char_pos.y == 16.) { C(t) C(i) C(t) C(a) C(n)  }\n\telse if (char_pos.y == 17.) { C(j) C(e) C(t) C(l) C(a) C(g) C(slash) C(s) C(t) C(u) C(c) C(k)  }\n\telse if (char_pos.y == 18.) { C(k) C(e) C(e) C(n) C(space) C(p) C(r) C(o) C(v) C(o) C(d)  }\n\telse if (char_pos.y == 19.) { C(r) C(e) C(v) C(i) C(s) C(i) C(o) C(n) C(space) C(n2) C(n0) C(n2) C(n0)  }\n    return 32.;\n\n}\nfloat text(vec2 p) {\n    p *= 1024.;\n    const vec2 glyph_size = vec2(21., 44.);\n    vec2 char_pos = floor(p / glyph_size);\n    p = fract(p / glyph_size) - .5;\n    vec2 t_glyph_size = iChannelResolution[1].xy / 16.;\n    \n    char_pos.y = -1. - char_pos.y;\n    float char = getchar(char_pos);\n    vec2 t_glyph_pos = vec2(mod(char, 16.), 15. - floor(char / 16.));\n    p.x *= glyph_size.x / glyph_size.y;\n    return smoothstep(.53, .48, texture(iChannel1, (t_glyph_pos + .5 + p) * t_glyph_size / iChannelResolution[1].xy, -8.).a);\n}\n\nfloat mask(vec2 p) {\n\tif (t < 1016.) return 0.;\n\tif (p.x < 0. || p.x > 32.) return 0.;\n\tif (p.y > 2.8 ) return 0.;\n\tp -= 2.;\n\n\tfloat line = floor(p.y / 1.5);\n\tif (t < 1152.) {\n\t\tif (line == -1.) {\n\t\t} else if (line == -2.) {\n\t\t\tline = (t < 1056.) ? 0. : -2. - floor(t-1056.)/8.;\n\t\t} else {\n\t\t\treturn 0.;\n\t\t}\n\t} else {\n\t\tline -= 16.;\n\t}\n\tp.y = line * 1.5 + mod(p.y, 1.5);\n\treturn text(p/32.);\n}\n\nfloat w(vec3 p) { return min(p.y+2., length(p)-2.); }\nvec3 wn(vec3 p) { return normalize(vec3(\n\tw(p+E.yxx),w(p+E.xyx),w(p+E.xxy))-w(p));\n}\nfloat tr(vec3 O, vec3 D, float l, float L) {\n\tfor (float i = 0.; i < 40.; ++i) {\n\t\tfloat d = w(O + D * l);\n\t\tl += d;\n\t\tif (d < .001 || l > L) break;\n\t}\n\treturn l;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {        \n    t = 4. * iTime * 125. / 60.;\n    t = mod(t, 1232.);\n    //t = 4. * iChannelTime[0] * 125. / 60.; /* iChannelTime[0] is updated like 10 times per second :( */\n\tvec2 uv=(fragCoord.xy/iResolution.xy)*2.-1.;uv.x*=iResolution.x/iResolution.y;\n    \n\tvec3 c=vec3(0.);\n\tvec3 O, D, P, N;\n\tvec2 UV;\n\tfloat M;\n\tfloat l;\n\tfloat seed = fract(t + uv.x);\n\tfloat bar = floor(t/16.);\n\n\tvec3 sundir = normalize(vec3(1.));\n\tfloat dof = .4;\n\tfloat fov = 1. + 1. * fract(t/32.);\n\n\tvec3 ca = vec3(0., -1., 0.);\n\tvec3 cp = vec3(0., 1.9, 5.);\n\tcp.z += 4. * fract(t/32.);\n\tfloat lfoc = 0.;\n\n\tfloat mskymat = 0.;\n\tfloat mballmat = 0.;\n\tfloat mfloormat = 0.;\n\tfloat yu = 0.;\n\n\tif (t < 304.) {\n\t\tmskymat = 0.;\n\t\tmballmat = 0.;\n\t\tmfloormat = 0.;\n\t\tdof = .01;\n\t\tfov = 2.;\n\n\t\tca = vec3(0., 0., 0.);\n\t\tcp = vec3(0., 1., 5. + 2. * fract(t/16.));\n\t} else {\n\t\tca = vec3(\n\t\t\tsin(bar*3.) * 4.,\n\t\t\tsin(bar*4.),\n\t\t\tsin(bar*5.) * 4.);\n\n\t\tmskymat = 1.;\n\t\tmballmat = 0.;\n\t\tmfloormat = 0.;\n\t\tdof = .2;\n\t\tfov = 2.;\n\n\t\tcp = vec3(\n\t\t\tsin(bar) * 10.,\n\t\t\t2. + 2. * sin(bar*7.),\n\t\t\t10. * cos(bar*3.));\n\t}\n\n\tif (t > 362.) {\n\t\tmskymat = 1.;\n\t\tmfloormat = 3.;\n\t\tmballmat = 0.;\n\n\t\tfloat ph = fract((t-362.) / 128.);\n\t\tca = vec3(0., 0., 0.);\n\t\tcp = vec3(0., 1., 5. + 32. * ph);\n\t\tfov = 1. + 4. * ph;\n\t}\n\n\tif (t > 490.) {\n\t\tmballmat = 1.;\n\t\tdof = .4;\n\t}\n\n\tif (t > 580.) {\n\t\tca = vec3(\n\t\t\tsin(bar*3.) * 4.,\n\t\t\tsin(bar*4.),\n\t\t\tsin(bar*5.) * 4.);\n\t\tcp = vec3(\n\t\t\tsin(bar) * 10.,\n\t\t\t2. + 2. * sin(bar*7.),\n\t\t\t10. * cos(bar*3.));\n\t}\n\n\tif (t > 704.) {\n\t\tmballmat = 2.;\n\t\tmskymat = 2.;\n\t\tdof = .4;\n\t}\n\n\tif (t > 832.) {\n\t\t// FIXME proper material ranges\n\t\tmskymat = mod(floor(t/8.),4.);\n\t\tmballmat = mod(floor(t/4.)/*TODO beat sync, 4th beat is earlier*/,5.);\n\t\tmfloormat = mod(floor(t/6.),4.);\n\t\tif (mskymat == 3.)\n\t\t\tmfloormat = 1.;\n\n\t\tfloat ph = fract(t/16.);\n\t\tfloat a = sin(bar), b = sin(bar+3.);\n\t\tcp = ca + mix(\n\t\t\tvec3(cos(a)*10.,2.+2.*sin(bar*2.),sin(a)*10.),\n\t\t\tvec3(cos(b)*10.,2.+2.*sin(bar*3.),sin(b)*10.), ph * ph);\n\t\tcp *= max(1., 8. / length(cp));\n\t\tca = vec3(\n\t\t\tsin(bar*3.) * 2.,\n\t\t\tsin(bar*4.),\n\t\t\tsin(bar*5.) * 2.);\n\t\t\tyu = sin(bar*17.);\n\t}\n\n\tif (t > 1016.) {\n\t\tca = vec3(5., 1., 0.);\n\t\tcp.z = abs(cp.z);\n\t\tcp *= max(1., 8. / length(cp));\n\n\t\tfloat ph = fract(t/64.);\n\t\tfov = 1. + 2. * ph;\n\t\tcp = vec3(8. + 10. * sin(bar + t/16.), 2., 10.);\n\t}\n\n\tif (t > 1152.) {\n\t\tmskymat = 0.;\n\t\tcp = vec3(10., 2., 10.);\n\t\tyu = 0.;\n\t}\n\n\tif (t > 1184.) {\n\t\tmfloormat = 3.;\n\t}\n\n\tif (t > 1216.) {\n\t\tmballmat = 1.;\n\t}\n\n\tlfoc += length(ca-cp);\n\n\t// PATHTRACER STARTS\n    const float samples_per_pixel = 32.;\n\tfor (float s=0.;s<samples_per_pixel;++s) {\n\t\tD = normalize(cross(O = normalize(ca-cp), vec3(yu,1.,0.)));\n\t\tvec3 up = normalize(cross(D, O));\n\t\tmat3 mv = mat3(D, up, -O);\n\n\t\tif (t < 266.) {\n\t\t\tD = mv*normalize(vec3(uv/fov, -1.)*lfoc - O);\n\t\t\tO = mv*O + cp;\n\n\t\t\tfloat L = 100., l = tr(O, D, 0., L);\n\t\t\tif (l < L) {\n\t\t\t\tP = O + D * l;\n\t\t\t\tvec3 n = wn(P);\n\t\t\t\tif (bar < 2.) c = vec3(1.);\n\t\t\t\telse if (bar < 4.) c = vec3(l/L);\n\t\t\t\telse if (bar < 6.) c = P;\n\t\t\t\telse if (bar < 8.) c = fract(P);\n\t\t\t\telse if (bar < 10.) c = n;\n\t\t\t\telse {\n\t\t\t\t\tc += .8 * vec3(max(0., dot(n, sundir)));\n\t\t\t\t\tif (bar > 14.)\n\t\t\t\t\t\tc *= step(5., tr(P, sundir, .1, 5.));\n\t\t\t\t\tif (bar > 12.)\n\t\t\t\t\t\tc = vec3(.01) + .5 *c;\n\t\t\t\t}\n\t\t\t\tc *= samples_per_pixel;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tfloat a = hash1(seed+=O.x)*6.2831;\n\t\tO = vec3(vec2(cos(a),sin(a))*sqrt(hash1(seed+=uv.y))*dof,0.);\n\t\tD = mv*normalize(vec3(uv / fov, -1.)*lfoc - O);\n\t\tO = mv*O + cp;\n\n\t\tfloat ins = 1.;\n\t\tfloat hue = hash1(seed += P.x);\n\t\tvec3 kc = clamp(abs(fract(vec3(3.,2.,1.)/3. + hue)*6.-3.)-1.,0.,1.);\n\n\t\tfor (float i = 0.; i < 6.; ++i) {\n\t\t\tvec3 me = vec3(0.), ma = vec3(.8);\n\t\t\tfloat mr = 1.;\n\t\t\tvec2 mf = vec2(1., 1.);\n\t\t\tl = 1e6;\n\t\t\tM = 0.;\n\n\t\t\tif (D.y < 0.) {\n\t\t\t\tl = (-2. - O.y) / D.y;\n\t\t\t\tP = O + D * l;\n\t\t\t\tN = E.xzx;\n\t\t\t\tUV = P.xz;\n\t\t\t\tM = 1.;\n\t\t\t}\n\n\t\t\tfloat b = dot(-O, D);\n\t\t\tfloat det2 = b * b - dot(-O, -O) + 4.;\n\t\t\tif (det2 >= 0.) {\n\t\t\t\tdet2 = sqrt(det2);\n\t\t\t\tfloat t1 = b - det2, t2 = b + det2;\n\t\t\t\tif (t1 < 0.) t1 = 1e6;\n\t\t\t\tif (t2 < 0.) t2 = 1e6;\n\t\t\t\tfloat ls = min(t1, t2);\n\t\t\t\tif (ls < l) {\n\t\t\t\t\tl = ls;\n\t\t\t\t\tP = O + D * l;\n\t\t\t\t\tN = ins * normalize(P);\n\t\t\t\t\tM = 2.;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// text plane\n\t\t\tfloat lp = -O.z / D.z;\n\t\t\tif (lp > 0. && lp < l) {\n\t\t\t\tvec3 p = O + D * lp;\n\t\t\t\tif (mask(p.xy) > .5) {\n\t\t\t\t\tP = p;\n\t\t\t\t\tl = lp;\n\t\t\t\t\tN = E.xxz;\n\t\t\t\t\tUV = P.xy;\n\t\t\t\t\tM = 3.;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (M == 0.) { // SKY\n\t\t\t\tma = vec3(0.);\n\t\t\t\tif (mskymat == 0.) {\n\t\t\t\t\t\tme = vec3(100.) * pow(max(0., dot(D,sundir)), 300.);\n\t\t\t\t} else if (mskymat == 1.) {\n\t\t\t\t\tvec2 skp = D.xz*(10.-O.y)/D.y * .1;\n\t\t\t\t\tfloat sk = noise2(skp)*.5 + noise2(skp*12.1)*.125 + noise2(skp*3.8)*.125 + noise2(skp*9.)*.0625;\n\t\t\t\t\tme = .3 * vec3(.3,.5,.9)\n\t\t\t\t\t\t+ 400.*vec3(.9,.6,.2) * pow(max(0., dot(D,sundir)), 400.)\n\t\t\t\t\t\t+ vec3(smoothstep(.4,.6,sk));\n\t\t\t\t\t\t;\n\t\t\t\t} else if (mskymat == 2.) {\n\t\t\t\t\tme = 10. * vec3(step(abs(dot(D,sundir)+mod(t/16.,1.)-1.), .05));\n\t\t\t\t\tvec3 bd = normalize(vec3(-1., .5, .1));\n\t\t\t\t\tme += .2 * vec3(.4, .1, .3) * pow(max(0., dot(D,bd)), 3.);\n\t\t\t\t\tbd = normalize(vec3(1., .3, .3));\n\t\t\t\t\tme += .2 * vec3(.1, .5, .4) * pow(max(0., dot(D,bd)), 4.);\n\t\t\t\t}\n\t\t\t} else if (M == 2.) { // BALL\n\t\t\t\tif (mballmat == 0.) {\n\t\t\t\t} else if (mballmat == 1.) {\n\t\t\t\t\tma = vec3(.8);\n\t\t\t\t\tmf = vec2(.5, mix(.95,.8,hue)); // FIXME fresnel angle dependent?\n\t\t\t\t\tmr = .0;\n\t\t\t\t} else if(mballmat == 2.) {\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tmf = vec2(1.,1.);\n\t\t\t\t\tmr = .2;\n\t\t\t\t} else if(mballmat == 3.) {\n\t\t\t\t\tme = N;\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tmf = vec2(1.,1.);\n\t\t\t\t\tmr = .4;\n\t\t\t\t} else if(mballmat == 4.) {\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tmf = vec2(.0, mix(.85,.8,hue)); // FIXME fresnel angle dependent?\n\t\t\t\t\tmr = .4;\n\t\t\t\t}\n\t\t\t} else if (M == 1.) { // GROUND\n\t\t\t\tif (mfloormat == 0.) {\n\t\t\t\t} else if (mfloormat == 1.) {\n\t\t\t\t\tma = vec3(.9);\n\t\t\t\t\tmr = .5;\n\t\t\t\t\tUV *= 4.;\n\t\t\t\t\tvec2 cid = floor(UV);\n\t\t\t\t\tvec2 cc = fract(UV)*2. - 1.;\n\n\t\t\t\t\tvec2 rcid = vec2(floor(t/2.) + length(cid), atan(cid.x, cid.y));\n\n\t\t\t\t\tme += vec3(1.,.6,.3) * step(.97,hash2(rcid));\n\t\t\t\t\tme += vec3(.3,.4,.9) * step(.98,hash2(rcid+1.));\n\t\t\t\t\tme += vec3(.3,.8,.3) * step(.98,hash2(rcid+2.));\n\n\t\t\t\t\tme *= vec3(\n\t\t\t\t\t\tstep(length(cc),.8),\n\t\t\t\t\t\tstep(length(cc+vec2(.1,0.)),.8),\n\t\t\t\t\t\tstep(length(cc+vec2(.0,.1)),.8)\n\t\t\t\t\t);\n\t\t\t\t\tmr = .001 + hash2(cid)*.3;\n\t\t\t\t\tma *= step(abs(cc.x),.9)*step(abs(cc.y),.9);\n\n\t\t\t\t\tme *= 10.;\n\t\t\t\t} else if (mfloormat == 2.) {\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tfloat ns =\n\t\t\t\t\t\t.5 * noise2(UV)\n\t\t\t\t\t\t+ .25 * noise2(UV * 1.9)\n\t\t\t\t\t\t+ .125 * noise2(UV * 3.9)\n\t\t\t\t\t\t+ .0625 * noise2(UV * 9.);\n\t\t\t\t\tmr = .2 + .2 * ns;\n\t\t\t\t} else if (mfloormat == 3.) {\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tUV *= .7;\n\t\t\t\t\tfloat ns =\n\t\t\t\t\t\t.5 * noise2(UV)\n\t\t\t\t\t\t+ .25 * noise2(UV * 1.9)\n\t\t\t\t\t\t+ .125 * noise2(UV * 3.9)\n\t\t\t\t\t\t+ .0625 * noise2(UV * 9.);\n\t\t\t\t\tmr = .01 + .2 * smoothstep(.4, .5, ns);\n\t\t\t\t} else if (mfloormat == 4.) {\n\t\t\t\t\tma = vec3(1.);\n\t\t\t\t\tmr = .3;\n\t\t\t\t\tme = vec3(step(abs(P.z + 2. * floor(mod(t, 8.)) - 8.), 1.));\n\t\t\t\t}\n\t\t\t} else { // TEXT\n\t\t\t\tme = vec3(4.);\n\t\t\t\tma = vec3(0.);\n\t\t\t}\n\n\t\t\tc += kc * me;\n\t\t\tkc *= ma;\n\n\t\t\tif (all(lessThan(kc,vec3(.001)))) break;\n\n\t\t\tif (hash1(seed+=P.y) > mf.x) {\n\t\t\t\tO = P - .01 * N;\n\t\t\t\tD = normalize(refract(D, N, mf.y));\n\t\t\t\tins = -ins;\n\t\t\t} else {\n\t\t\t\tO = P + .01 * N;\n\t\t\t\tD = normalize(mix(\n\t\t\t\t\treflect(D, N),\n\t\t\t\t\tvec3(hash1(seed+=P.z),hash1(seed+=D.x),hash1(seed+=P.y))-.5, mr));\n\t\t\t\tD *= sign(dot(D, N));\n\t\t\t}\n\t\t}\n\t}\n\n\tfragColor=vec4(sqrt(c/samples_per_pixel), 0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22040,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/keensky/stuck"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}