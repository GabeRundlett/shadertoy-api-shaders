{
    "Shader": {
        "info": {
            "date": "1667972063",
            "description": "Another bizarre fractal structure.\nUse the mouse to look around.",
            "flags": 8,
            "hasliked": 0,
            "id": "msj3R3",
            "likes": 5,
            "name": "Glowing fractal tunnel",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "#define t iTime*4.\n#define r iResolution\n#define iterations 250 //number of raymarching steps\n#define EPSILON .001\n#define MAX_DIST 40.0\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\n\n//Based on https://www.shadertoy.com/view/3tXyRN\n\nvec3 stars(vec3 uv)\n{\n    uv = -uv.yzx;\n    vec3 col = vec3(0.);\n    \n    for(int k = 0; k < 6; k++){ \n        uv =\n            //min(uv*vec3(uv.y+uv.x+.5,uv.z+uv.y+.5,uv.x+uv.z)*3.,abs(fract(vec3(uv.y+uv.x+.5,uv.z+uv.y+.5,uv.x+uv.z))-.5))\n            min(uv*vec3(uv.y+uv.x,uv.z+uv.y+1.,uv.x+uv.z)*2.,abs(fract(vec3(uv.y+uv.x+1.,uv.z+uv.y,uv.x+uv.z)+uv)-.5))\n            //min(uv/2.*vec3(sqrt(uv.x*uv.y),sqrt(uv.z*uv.y),uv.x+uv.z)*4.,abs(fract(vec3(uv.y+uv.x,uv.z+uv.y,uv.x+uv.z)+uv)-.5))\n            //min(uv*vec3(uv.y+uv.x+.125,uv.z+uv.y+.75,uv.x+uv.z)*4.,abs(fract(vec3(uv.y+uv.x+1.,uv.z+uv.y,uv.x+uv.z)+uv)-.5))\n            //min(uv*vec3(uv.y*4.,uv.z,uv.x+uv.z)*4.,abs(fract(vec3(uv.y+uv.x+1.,uv.z+uv.y,uv.x+uv.z)+uv)-.5))\n        ;\n        col =\n            vec3(col.yz,uv.x-uv.y).yzx\n            //vec3(col.yz,uv.x).yzx\n            //vec3(col.yz,sqrt(uv.x*uv.y)).yzx\n        ;\n    }\n    \n    return\n        col.yzx\n        //col - uv;\n    ;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n{\n    o = vec4(0.0);\n    vec3 d=vec3(U/r.xy-.5,.5),p0=vec3(t,9.,7.),p=p0;\n    if (length(iMouse.xy) > 40.0) {\n        d.yz *= rot(-3.14*0.5+iMouse.y/iResolution.y*3.14);\n        d.xz *= rot(-3.14+iMouse.x/iResolution.x*3.14*2.0);\n    }\n    float l1;\n    vec3 col = vec3(0.);\n    for(int i=0;i<iterations;i++)\n    {\n        col = stars(p/16.);\n        float sd1 = col.z-.12;\n        if(-sd1 < EPSILON*(length(l1)+1.0) || l1 > MAX_DIST){ break; }\n        p+=d*(-sd1);\n        l1 = distance(p,p0);\n    }\n    o+=(vec4(col/2.,0)+l1/100.0)*3.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fmod0(x,y) mod(floor(x),y)\n#define fmod1(x,y) mod(floor((x)/s1+floor(t*s1)/s1),y)\n#define fmod(x,y) mod(floor(x+floor(t/s1)/s1),y)\nvec2 mainSound(int samp, float t){\n  float s1 =\n      8.,\n  m1 =\n      fmod(t*s1,s1),\n      //fmod(mod(t*s1,floor(t*s1/4.)),s1),\n      //fmod(floor(t*s1)+floor(t*s1/2.)+floor(t*s1/4.),s1),\n      //fmod(t*s1-floor(t),s1),\n  z1 =\n      (1.+fmod(t,2.))\n      //(1.+fmod(floor(t/4.)*4.+floor(t/3.)*3.,2.))\n  ;\n  t /=\n      1.+fmod(floor(t*s1)*floor(t/s1+z1),2.)\n  ;\n  float m3 =\n      fmod((t)/(m1+.5),s1)\n  ;\n  t *=\n      1.+fmod(floor(t*s1)*floor(t/s1+z1),2.)\n  ;\n\n  float a= ((1.-sqrt(fract(t*s1))))*.2,\n\n  nb = pow(2.,(m3+z1)/5.+7.);\n\n  return vec2(fract(t*nb*.998)\n   ,fract(t*nb))*a;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}