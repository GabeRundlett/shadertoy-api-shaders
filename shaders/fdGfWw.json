{
    "Shader": {
        "info": {
            "date": "1658240014",
            "description": "planet earth is alive",
            "flags": 32,
            "hasliked": 0,
            "id": "fdGfWw",
            "likes": 22,
            "name": "Tectonic Turbulence Timelapse",
            "published": 3,
            "tags": [
                "terrain",
                "fluid",
                "planet"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "\n// Tectonic Turbulence Timelapse\n\n// buffer A: fake fluid simulation\n// buffer B: raymarching terrain and rendering\n// buffer C: temporal anti aliasing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// the fluidish simulacre buffer\n// basically a animated heightmap fading with turbulence\n\n// fbm gyroid noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 3; ++i) {\n        seed.z += iTime*.1;\n        result += (gyroid(seed/a))*a;\n        a /= 3.;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // init\n    if (iFrame < 1) {\n        fragColor = vec4(1,1,1,1);\n        return;\n    }\n    \n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    \n    // noise\n    vec3 blue = texture(iChannel1, fragCoord/1024.).rgb;\n    \n    // shape\n    vec2 spawn = hash22(fragCoord)*2.-1.;\n    float shape = length(p-spawn);\n    float shade = smoothstep(.1,.0,shape);\n    \n    // force\n    vec2 offset = vec2(0);\n    \n    // bubble\n    vec2 pp = fract(p*.5-vec2(.5,iTime*.2))-.5;\n    float lpp = length(pp);\n    float mask = smoothstep(.5,.0,lpp);\n    offset -= pp*mask*10.;\n    \n    // expansion\n    vec4 data = texture(iChannel0, uv);\n    vec3 unit = vec3(blue.x*60./iResolution.xy,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv - unit.xz)-TEX(uv + unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        0.)-.001);\n    offset -= normal.xy;\n    \n    // turbulence\n    vec3 seed = vec3(p*4.,p.x);\n    float angle = fbm(seed)*6.28;\n    offset += vec2(cos(angle),sin(angle));\n    \n    // fading\n    vec4 frame = texture(iChannel0, uv+offset/iResolution.xy);\n    shade = max(shade, frame.r-iTimeDelta*.2);\n    fragColor = vec4(shade);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define TEX(uv) texture(iChannel0, uv).r\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash23(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec4 hash41(float p) {\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);   \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// raymarching buffer\n// rendering the heightmap from buffer A\n// with lighting and coloring\n\nfloat height;\n\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    // uv scroll and mirror\n    vec2 uv = p.xz*.1-.5;\n    uv.y -= iTime*.1;\n    uv = abs(mod(uv+1.,2.)-1.);\n    \n    // heightmap\n    height = texture(iChannel0, uv).r;\n    dist = p.y + height;\n    \n    return dist;\n}\n\n\nvoid coloring (inout vec3 color, in vec3 pos, in vec3 normal, in vec3 ray, in float shade)\n{\n    // water, sand, grass and snow gradient\n    float h = 1.-height;\n    vec3 tint = vec3(0,0,2.*h);\n    tint = mix(tint, vec3(1), smoothstep(0.,.2,h-.3));\n    tint = mix(tint, vec3(h*.5,h,0), smoothstep(0.,.1,h-.4));\n    tint = mix(tint, vec3(1), smoothstep(0.,.2,h-.5));\n    \n    // lighting\n    color = tint * pow(dot(normal, vec3(0,1,0.))*.5+.5, 10.);\n    color += dot(normal, ray)*.5+.5;\n    color *= shade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 p = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 pos = vec3(0,1,1.5);\n    vec3 ray = lookAt(pos, vec3(0), p, 1.);\n    \n    // noise\n    vec3 white = hash33(vec3(fragCoord, iFrame));\n    \n    // raymarch\n    const float count = 20.;\n    float steps = 0.;\n    float total = 0.;\n    float maxDist = 30.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < 4.*total/iResolution.y || total > maxDist) break;\n        dist *= 0.9+0.1*white.z;\n        ray += white * total*.0005;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    // coloring\n    float shade = steps/count;\n    if (shade > .001 && total < maxDist) {\n\n        // NuSan https://www.shadertoy.com/view/3sBGzV\n        vec2 noff = vec2(.01,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n\n        coloring(color, pos, normal, ray, shade);\n    }\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Temporal Anti Aliasing from:\n// https://www.elopezr.com/temporal-aa-and-the-quest-for-the-holy-trail/\n\n// but only the color clamping...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) / iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}