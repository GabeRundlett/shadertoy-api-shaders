{
    "Shader": {
        "info": {
            "date": "1618467351",
            "description": "A slow trek through a nearly-infinite span of changing colorful noise. Position changes over time, so the type of visual may change somewhat.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dfSDn",
            "likes": 6,
            "name": "Northern Journey",
            "published": 3,
            "tags": [
                "noise",
                "plasma",
                "lights",
                "journey",
                "northern"
            ],
            "usePreview": 0,
            "username": "TEttinger",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "// CC0 licensed, do what thou wilt.\nconst float SEED = 42.0;\nconst vec3 COEFFS = fract((SEED + 23.4567) * vec3(0.8191725133961645, 0.6710436067037893, 0.5497004779019703)) + 0.5;\n\nvec3 swayRandomized(vec3 seed, vec3 value)\n{\n    return sin(seed.xyz + value.zxy - cos(seed.zxy + value.yzx) + cos(seed.yzx + value.xyz));\n}\n\n// this function, if given steadily-increasing values in con, may return exponentially-rapidly-changing results.\n// even though it should always return a vec3 with components between -1 and 1, we use it carefully.\nvec3 cosmic(vec3 c, vec3 con)\n{\n    vec3 n = con;\n    n += swayRandomized(c, con.yzx);\n    n += swayRandomized(c + 1.0, con.xyz);\n    n += swayRandomized(c + 2.0, con.zxy);\n    return n * 0.25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 64.0 + swayRandomized(COEFFS.zxy, (iTime * 0.25) * COEFFS.yzx).xy * 32.0;\n    // aTime, s, and c could be uniforms in some engines.\n    float aTime = iTime * 0.0625 + 32.0;\n    vec3 adj = vec3(-1.11, 1.41, 1.61);\n    vec3 s = (swayRandomized(vec3(34.0, 76.0, 59.0), aTime + adj)) * 0.25;\n    vec3 c = (swayRandomized(vec3(27.0, 67.0, 45.0), aTime - adj)) * 0.25;\n    vec3 con = vec3(0.0004375, 0.0005625, 0.0008125) * aTime + c * uv.x + s * uv.y;\n    \n    con = cosmic(COEFFS, con);\n    con = cosmic(COEFFS, con);\n    con = cosmic(COEFFS, con);\n    \n    fragColor = vec4(swayRandomized(COEFFS + 3.0, con * (2.0 * 3.14159265)) * 0.5 + 0.5,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}