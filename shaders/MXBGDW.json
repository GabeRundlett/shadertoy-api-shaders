{
    "Shader": {
        "info": {
            "date": "1708455330",
            "description": "Based on https://en.m.wikipedia.org/wiki/Diffraction_from_slits",
            "flags": 32,
            "hasliked": 0,
            "id": "MXBGDW",
            "likes": 13,
            "name": "Diffraction from slits",
            "published": 3,
            "tags": [
                "2d",
                "light",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "Nguyen2007",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "// Tone Mapping\nvec3 tone(vec3 v)\n{\n    mat3 m = mat3(84, 4, 4, 8, 88, 8, 8, 8, 88);\n    \n    v = clamp(log2(m * v) / 16.5 + .35, 0., 1.);\n    \n    v = (((((15.5 * v - 40.14) * v + 31.96) * v - 6.868) * v + .4298) * v + .1191) * v - .00232;\n    \n    v = 1e2 * inverse(m) * (tanh(3. * v * v - 1.5) / 1.81 + .5);\n    \n    return pow(v, vec3(.45));\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O.xyz = tone(texture(iChannel0, abs(U / R.xy - .5)).xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution\n#define sqr(x) (x) * (x)\n\n// PRNG\nuvec2 seed;\n\nvec2 PCG(inout uvec2 v)\n{\n    uint k = 1664525u;\n    \n    v = v * k + 1013904223u;\n    \n    v.x += v.y * k;\n    v.y += v.x * k;\n    v   ^= v >> 16u;\n    \n    v.x += v.y * k;\n    v.y += v.x * k;\n    v   ^= v >> 16u;\n\n    return vec2(v) / 4294967296.;\n}\n\n#define rand PCG(seed).x\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Wavelength To RGB\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y - a.y*b.x; }\n\nvec2 intersectSegment(vec2 p0, vec2 p1, vec2 p2, vec2 p3)\n{\n    vec2 s1 = p1 - p0, s2 = p3 - p2, s3 = p0 - p2;\n\n    float d = cross2(s1, s2),\n          s = cross2(s1, s3) / d,\n          t = cross2(s2, s3) / d;\n\n    return s > 0. && s < 1. && t > 0. && t < 1. ? p0 + t*s1 : p0;\n}\n\nvec3 WaveToRGB(float l)\n{\n    vec3 v = vec3(.4, 1.011, 2.06) / exp2(vec3(866.433976, 1.442695, 22.18071) * sqr(vec3(log2(l * .000986 +  .56213), l * .015325 - 8.522368, log2(l *  .005543 - 1.474501))));\n    \n    v.x += 1.13 / exp2(162.19644 * sqr(log2(1.799597 - l * .001345)));\n    \n    vec2 xy = v.xy / (v.x + v.y + v.z);\n    \n    vec2 red   = vec2(.64,   .33 ),\n         green = vec2(.3,    .6  ),\n         blue  = vec2(.15,   .06 ),\n         white = vec2(.3127, .329);\n    \n    xy = intersectSegment(xy, white, red,   green);\n    xy = intersectSegment(xy, white, green, blue );\n    xy = intersectSegment(xy, white, blue,  red  );\n    \n    return v.y * vec3(xy, 1. - xy.x - xy.y) / xy.y * mat3( 3.240479, -1.537150, -0.498535,\n\t                                                      -0.969256,  1.875991,  0.041556,\n\t                                                       0.055648, -0.204043,  1.057311 );\n}\n\n// N: the number of slits\n// lambda: wavelength(nm)\n// a: the width of the slits\n// d: the distance between the slits\n// x: position on the screen\nfloat multslits(int N, float lambda, float a, float d, float x)\n{\n    float res = abs(a *= x *= 3.141593 / lambda) > 1e-4 ? sqr(sin(a) / a) : 1.;\n    \n    if(N > 1) d *= x,\n              res *= sqr(abs(sin(d)) > 1e-4 ? sin(float(N) * d) / sin(d) : float(N));\n    \n    return res;\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float N = round(5. + 4. * cos(iTime));\n    \n    if (vec2(U) == vec2(.5))\n    {\n        O = vec4(R, N);\n        return;\n    }\n    \n    if(any(lessThan(R.xy, U + U))) return;\n    \n    seed = uvec2(U.x + R.x * U.y, iFrame);\n    \n    float res = 2e2;\n    \n    vec3 col = vec3(0);\n    \n    for(float i = 0.; i < res; i++)\n    {\n        vec2 uv = (U + PCG(seed) - .5) / R.y;\n        \n        float a = 6.283185 * rand;\n        \n        if(rand < .5) uv += vec2(cos(a), sin(a)) * atanh(rand) * .05;\n        \n        float l = 4e2 + 3e2 * fract((i + 2. * rand) / res);\n        \n        col += 10. * WaveToRGB(l) * multslits(int(N), l, 1e3 / N, 1e4/ N, uv.x)\n                                  * multslits(1, l, 1e4, 0., uv.y) / N / N / res;\n    }\n    \n    if(any(isnan(col))) col *= 0.;\n\n    if (texelFetch(iChannel0, ivec2(0), 0) == vec4(R, N))\n    {\n        vec4 pre = texture(iChannel0, U / R.xy);\n        O = vec4(mix(pre.rgb, col, pre.a /= pre.a + 1.), pre.a);\n    }\n    \n    else O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}