{
    "Shader": {
        "info": {
            "date": "1568438763",
            "description": "I'm just going to keep preaching this. This is made the same way you would make a mandelbrot or julia fractal, but this is the divergence map of the 1234 system. explanation in main",
            "flags": 32,
            "hasliked": 0,
            "id": "wdtGWH",
            "likes": 1,
            "name": "My little Soapbox",
            "published": 3,
            "tags": [
                "1234"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "/*\n\n\t( ()  ()()  ()()() )\n\n\n\n\tIT USES the above group pattern in the following equation :\n\n\n\tdd/dtt () = ()/SUPERGROUP - ()/SUBGROUP\n\n\n    each part represents a very real thing :\n\n\t( mass   positive/negative   red/green/blue )\n\n\t( gravity, electromagnetism, chromodynamics ) \t\n\n\tThese are the forms that energy can take.\n\n\tSo explicitly this is the equation set :\n\n\n\tdd/dtt m = m/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - m/sqrt(m^2)\n    dd/dtt p = p/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - p/sqrt(p^2+n^2)\n    dd/dtt n = n/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - n/sqrt(p^2+n^2)\n\tdd/dtt r = r/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - r/sqrt(r^2+g^2+b^2)\n\tdd/dtt g = g/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - g/sqrt(r^2+g^2+b^2)\n\tdd/dtt b = b/sqrt(m^2+p^2+n^2+r^2+g^2+b^2) - b/sqrt(r^2+g^2+b^2)\n\n\n\n\tI swear to you, this is legit. oh yeah and the transformation of \n\t\t\t\t\t\t\t\t\tcontact is the wave equation - so \n\t\t\t\t\t\t\t\t\t\tadd in  : dd/dxx () to each equation \n\n\n\tBut the sad thing is....\n\n\t\t\t.... I'm afraid it will be impossible\n\t\t\t\tto ever know if this trully represents the universe...\n\n\t\t\t\tbecause it is computationally impossible to even \n\t\t\t\tsimulate a nanosecond of one cubic nanometer of spacetime....\n\n\t\t\nBUT IN MY YOUNG LITTLE HEART I FUCKING BELIEVE THIS IS THE MATH OF CREATION\n\nbut it won't do anyone any good other than satisfy a little curiosity\nAll the funding is is the physics of war! fuck! or like fucking videogames or gambling or who the fuck knows it just seems like we're all up to no good.\nThere is literally no fucking insentive to figure this stuff out...\n\n..... but .....\n\n\nIM DRUNK IN TENNESSEEE YEEEHAAAAAHHHH !!!!!!!!\n\n\nwow you got to here... embarrassing\n\n*/\n\n\n\n#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    Q = A(U);\n    vec4 \n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0));\n    vec3 no = normalize(vec3(e.x-w.x,n.x-s.x,1));\n    \n    \n    Q = (.5+0.5*no.x)*abs(sin(.2*iTime+Q.x*vec4(1,2,-1,4)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    Q = A(U);\n    if (iFrame<1) {\n    U = (U-0.5*R)/R.y;\n    \n \tfloat \n        dt = 0.001,\n        m = 2.*U.y,\n        p = U.x,\n        n =-U.x,\n        r = .09,\n        g = .1,\n        b = .06,\n        dm = 0.,\n        dn = 0.,\n        dp = 0.,\n        dr = 0.,\n        db = 0.,\n        dg = 0.\n        ;\n    \n    for (int i = 0; i < 6000; i++) {\n    \tfloat mag = sqrt(m*m+n*n+p*p+r*r+g*g+b*b);\n        float pn = sqrt(p*p+n*n);\n        float rgb = sqrt(r*r+g*g+b*b);\n\n        dm += dt*(m/mag-m/abs(m));\n        dp += dt*(p/mag-p/pn);\n        dn += dt*(n/mag-n/pn);\n        dr += dt*(r/mag-r/rgb);\n        dg += dt*(g/mag-g/rgb);\n        db += dt*(b/mag-b/rgb);\n\n        m += dt*dm;\n        p += dt*dp;\n        n += dt*dn;\n        r += dt*dr;\n        g += dt*dg;\n        b += dt*db;\n        \n    \t\n    }\n    \n    \tQ = vec4(r+g+b);\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}