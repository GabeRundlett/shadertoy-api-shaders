{
    "Shader": {
        "info": {
            "date": "1694263009",
            "description": "try it fullscreen.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt2fzV",
            "likes": 4,
            "name": "golf123random",
            "published": 3,
            "tags": [
                "golf",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 851
        },
        "renderpass": [
            {
                "code": "#define I iResolution\n#define PI 3.1415926\n#define T( s ) fract( iTime * s ) * PI * 4.\n\n// smax\nfloat s(float a, float b, float c) {\n  float d = clamp(.5 + .5 * (-b + a) / c, 0., 1.);\n  return -(mix(-b, -a, d) - c * d * (1. - d));\n}\n\nmat2 rot(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c, s, -s, c);\n}\n\nfloat cs( vec3 p ){\n    p.xy *= rot( PI * -.25 );\n    p.yz *= rot( PI * .25 );\n    p.xy *= rot( T( .025 ) );\n    p.xy *= rot( p.z * 40. );\n    \n    float d = abs( p.x ) - .2;\n    \n    d = -min( -d, -( abs( p.y ) - .2 ) );\n    \n    p.xy *= 1.5;\n    \n    float s2 = abs( p.x ) - .2;\n    s2 = min( -s2, -( abs( p.y ) - .2 ) );\n    d = max( d, s2 );\n    \n    \n    return max( d, abs( p.z ) - 1. );\n}\n\nfloat cd( vec3 p ){\n    p.xy *= rot( PI * -.25 );\n    p.yz *= rot( PI * .25 );\n    \n    p = mod( p, .01 ) - .005;\n    return length( p * vec3( 1., .6, 1. ) ) - .001;\n}\n\n// sdf\nfloat df(vec3 p) {\n    p.xz *= rot( T( .0025 ) );\n    p.xy *= -rot( T( .0025 ) );\n    p.xz *= rot( PI * .25 );\n    p.xy *= rot( PI * .125 );\n    float k = 0.;\n    \n    for( float i = 0.; i < 7.; i++ ){\n        p.xz *= rot( i );\n        k += .8;\n        p = abs( p ) - .5;\n        p.xy *= rot( i * k * ( i - k ) );\n        p.xy = abs( p.xy ) - .5;\n        p.yz *= rot( i * k * ( i - k ) );\n        p.x = abs( p.x ) - k * .121;\n    }\n    \n    return clamp( s( cs( p ), -cd( p ), .06 ), 0., 1. );\n}\n\n// calcNormal (IQ)\nvec3 l(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * df(b + a.xyy * 5e-4) + a.yyx * df(b + a.yyx * 5e-4) +\n                   a.yxy * df(b + a.yxy * 5e-4) + a.xxx * df(b + a.xxx * 5e-4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( (fragCoord/I.xy - .5) * 2. ) * vec2( I.x / I.y, 1. );\n    \n    vec3 c, p, o = vec3( 0., 0., -1. ), r = vec3( u * .1, 1. );\n    float t, d, i;\n    c += .1;\n    \n    for( ; i < 64.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        t += d;\n    \n    if( d < 1e-3 )\n        c += vec3( clamp(dot( l( p ) , vec3(.4, 1., -.5)), 0.0, 1.0) );\n\n    // Output to screen\n    fragColor = vec4(sqrt( c ),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}