{
    "Shader": {
        "info": {
            "date": "1575059746",
            "description": "Why not use SDFs for 1D too? It can be an easy introduction for a beginner in the concept.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdVXWV",
            "likes": 12,
            "name": "1D SDF Primitives",
            "published": 3,
            "tags": [
                "sdf",
                "distance",
                "1d"
            ],
            "usePreview": 0,
            "username": "edubart",
            "viewed": 697
        },
        "renderpass": [
            {
                "code": "// Created by edubart - https://github.com/edubart\n//\n// Why not use SDFs for 1D too? It can be an easy introduction\n// for a beginner in the concept. If you consider the space of\n// a single line the signed distance from points and segments\n// can be computed using a SDF function. Operatios like\n// limited repetition, space scaling, translating, etc\n// works the same as in 2D/3D.\n//\n// This shader contains the following 1D SDF primitives examples:\n// 1. The first line shows the signed field for a point.\n// 2. The second line shows the signed field for a segment.\n// 3. The third line shows the signed field for a half line.\n// 4. The forth line shows SDF operations like scale and limited repetition.\n//\n// Inspired by Inigo Quilez 2D/3D SDF primitives.\n\n#define LINE_HEIGHT 0.03\n\n// Point at the origin\nfloat sd_point(float p) {\n\treturn abs(p);\n}\n\n// Line segment with its center at the origin\nfloat sd_segment(float p, float size) {\n\treturn abs(p) - size;\n}\n\n// Half line begining at the origin and going to the left\nfloat sd_halfline(float p) {\n\treturn p;\n}\n\n// 1D limited repetition\nfloat op_rep_lim(float p, float c, float l) {\n    return p-c*clamp(round(p/c),-l,l);\n}\n\n// First scene (point)\nfloat map1(float p) {\n    float q = p - sin(iTime)*0.1;\n   \treturn sd_point(q);\n}\n\n// Second scene (line segment)\nfloat map2(float p) {\n    float size = 0.3 + sin(iTime)*0.2;\n    return sd_segment(p, size);\n}\n\n// Third scene (half line)\nfloat map3(float p) {\n    float q = p - sin(iTime)*0.1;\n   \treturn sd_halfline(q);\n}\n\n// Fourth scene (many elements)\nfloat map4(float p) {\n    // scale space\n    p *= 0.9+0.1*sin(iTime);\n    \n    // repeated points\n    float q = op_rep_lim(p - -0.4, 0.1, 2.0);\n    float d = sd_point(q);\n    \n    // line segment\n    d = min(d, sd_segment(p - 0.2, 0.1));\n    \n    // half line\n    d = min(d, sd_halfline(-(p - 0.6)));\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // screen uv coords in the range [-1,1]\n    vec2 uv = 2.0*fragCoord.xy/iResolution.xy - 1.0;\n    \n    // current view point in the line in the range [-1,1]\n\tfloat p = uv.x;\n    \n    // compute the neartest point\n    float d;\n    if(abs(uv.y - 0.6) < LINE_HEIGHT) { // first line\n        d = map1(p);\n    } else if(abs(uv.y - 0.2) < LINE_HEIGHT) { // second line\n        d = map2(p);\n    } else if(abs(uv.y + 0.2) < LINE_HEIGHT) { // third line\n        d = map3(p);\n    } else if(abs(uv.y + 0.6) < LINE_HEIGHT) { // third line\n        d = map4(p);\n    } else {\n        // background\n    \tfragColor = vec4(vec3(0.03),1.0);\n        return;\n    }\n\n    // colorize distance field\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(d));\n    col *= 0.8 + 0.2*cos(320.0*d);\n    col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}