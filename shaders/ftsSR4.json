{
    "Shader": {
        "info": {
            "date": "1625255073",
            "description": "Tightest bounding box of an arc (given translation, rotation, and scale as degrees of freedom).",
            "flags": 0,
            "hasliked": 0,
            "id": "ftsSR4",
            "likes": 8,
            "name": "Tight BBox of Arc",
            "published": 3,
            "tags": [
                "2d",
                "arc",
                "bbox",
                "tight"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "// Constants\n#define PI 3.14159265359\n\n// Utilities\n#define drawSDF(dist, col, opaq) color = mix(color, col, smoothstep(unit, 0.0, dist) * opaq)\nstruct TightBBox { mat2 ori; vec2 bmin; vec2 bmax; };\n\n// SDFs\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\n// ax: vec2(cos(axis), sin(axis))\n// ap: vec2(cos(aperture), sin(aperture))\nfloat sdArc(in vec2 p, in vec2 ax, in vec2 ap, in float r, in float t) {\n    p = vec2(dot(p, ax), abs(p.y * ax.x - p.x * ax.y));\n    return (p.y * ap.x < p.x * ap.y ? abs(length(p) - r) : length(p - ap * r)) - t;\n}\n\nTightBBox arcBoundingBox(in vec2 ax, in vec2 ap, in float r, in float t) {\n    float y = (ap.x < 0.0 ? r : ap.y * r) + t;\n    return TightBBox(mat2(ax, -ax.y, ax.x), vec2(ap.x * r - t, -y), vec2(r + t, y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 2.0;\n    vec3 color = vec3(pow(max(0.0, 1.0 - length(fragCoord / iResolution.xy - 0.5)), 0.8));\n    float unit = 4.0 / iResolution.y;\n\n    // Animated arc parameters\n    float axis = PI * sin(iTime);\n    float aper = PI * (0.5 + 0.5 * cos(iTime));\n    float thick = 0.025 + 0.025 * sin(iTime);\n    float rad = 0.55;\n\n    // Set to be equivalent to axis aligned bbox\n    // of a circle\n    if (iTime < 3.0) {\n        axis = 0.5 * PI;\n        aper = PI;\n    }\n\n    // Start rotating the bbox\n    else if (iTime < 8.0) {\n        axis = PI * sin(0.5 * iTime);\n        aper = PI;\n    }\n\n    // Transition to full animation with tight bbox\n    else {\n        float transition = smoothstep(8.0, 13.0, iTime);\n        axis = mix(PI * sin(0.5 * iTime), axis, transition);\n        aper = mix(PI, aper, transition);\n    }\n\n    // Draw arc\n    vec2 csAxis = vec2(cos(axis), sin(axis));\n    vec2 csAper = vec2(cos(aper), sin(aper));\n    drawSDF(abs(sdArc(uv, csAxis, csAper, rad, thick)), vec3(0.0), 1.0);\n\n    // Compute tight bbox\n    TightBBox bbArc = arcBoundingBox(csAxis, csAper, rad, thick);\n\n    // Transform into bbox local coordinate frame\n    vec2 bp = uv * bbArc.ori;\n\n    // Point in bounding box test\n    //if (bp.x > bbArc.bmin.x && bp.x < bbArc.bmax.x &&\n    //    bp.y > bbArc.bmin.y && bp.y < bbArc.bmax.y) {\n    //    color -= 0.25;\n    //}\n\n    // Draw as SDF instead for free antialiasing\n    drawSDF(sdBox(bp - 0.5 * (bbArc.bmin + bbArc.bmax), 0.5 * (bbArc.bmax - bbArc.bmin)), vec3(0.0), 0.25);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}