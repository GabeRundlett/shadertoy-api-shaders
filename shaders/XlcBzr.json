{
    "Shader": {
        "info": {
            "date": "1538346192",
            "description": "Raymarching through an unstable wormhole. The wormhole is defined by a heightmap which suggests a 4d surface, allowing the 3d ray to be embedded. Not necessarily accurate.\n\nDo not attempt to cross.",
            "flags": 32,
            "hasliked": 0,
            "id": "XlcBzr",
            "likes": 5,
            "name": "Unstable Wormhole",
            "published": 3,
            "tags": [
                "wormhole"
            ],
            "usePreview": 0,
            "username": "JeroenDStout",
            "viewed": 715
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 samp = texture(iChannel1, uv);\n    float off = 4. / iResolution.x;\n    \n    \n    for (int i = -8; i < 8; i++) {\n    \tfragColor.xyz += texture(iChannel0, vec2(uv.x, uv.y + off * float(i))).xyz * blurW[abs(i)];\n    }\n    \n    fragColor.xyz /= 256.;\n    fragColor.xyz *= vec3(0.8, 0.82, 1.5);\n    fragColor.xyz += samp.xyz;\n    \n    fragColor.xyz *= pow(length(fragColor.xyz), 0.5) * 0.5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float blurW[9] = float[9]( 1.0, 0.95, 0.9, 0.8, 0.7, 0.5, 0.3, 0.2, 0.1 );\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i);\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float getWhHeight( vec3 pos, float time )\n{\n    float dist = min(1., length(pos));\n    float invDist = 1. - dist;\n    \n    float eff = 1.;\n    \n    float timeNoise = sin( time * 4.1 ) * cos( time * 3.1 ) * 0.1;\n    float depthRed = sin( time * 0.1 ) + cos( time * 37.1 ) * 1.5;\n    \n    float depthEff = timeNoise * snoise( vec4(pos.x*1.6, pos.y*1.6, pos.z*1.6, 5. + time *142.));\n    \n    eff = 1.0 + sin(depthEff * 11.4) + sin(0.4 + depthEff * 56.2) + sin(0.68 * depthEff * 85.1);\n    eff *= 1. + depthEff;\n    eff *= .05;\n    eff = abs(eff);\n    \n    eff = pow(eff, max(0., 1. + .2 * snoise( vec4(pos.x*.3, pos.y*.3, pos.z*.3, 5. + time *10.))));\n    //eff *= 0.5;\n    \n    float noiseScale = cos(time * 3.2) * 10.;\n    noiseScale += snoise( vec4(pos.x*noiseScale, pos.y*noiseScale, pos.z*noiseScale, time *120.));\n    \n    float wild = (1. + sin(time * 130.) + sin(0.4 + sin(time) * 210.) + sin(0.68 * time * 290.)) * 0.4;\n    wild *= pow(max(0., wild), 1. + sin(time * 2000.));\n    eff += (-0.5 + snoise( vec4(pos.x*noiseScale, pos.y*noiseScale, pos.z*noiseScale, time *100.))) * wild * .015;\n    \n    eff += 0.5 + sin(time * 10.) * 1.;\n    \n    eff *= pow(.5 - .5 * cos(invDist * 3.1415 * 1.), 3.);\n    eff *= 1.5;\n    \n    return eff;\n}\n\nvec4 getWhNormal( vec3 pos, out bool switched, float time )\n{\n    float stepSize = 1e-2;\t\n    \n    float baseHeight = getWhHeight(pos, time);\n    \n    vec4 normal = vec4(0., 0., 0., stepSize * -2.0);\n    \n    normal.x = getWhHeight(vec3(pos.x + stepSize, pos.y, pos.z), time) - baseHeight;\n    normal.y = getWhHeight(vec3(pos.x, pos.y + stepSize, pos.z), time) - baseHeight;\n    normal.z = getWhHeight(vec3(pos.x, pos.y, pos.z + stepSize), time) - baseHeight;\n    \n    switched = (baseHeight >= 1.0);\n    \n    return normalize(normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rotYZ = 0.3;//(0.5 + (iMouse.y / iResolution.y * 1.)) * 3.1415;\n    float rotXZ = iMouse.x / iResolution.x * 4. * 3.1415 * 1. + 3.;\n\n    uint width = uint(iResolution.x);\n    uint height = uint(iResolution.y);\n\n    vec3 camFw  = vec3(sin(rotXZ) * cos(rotYZ), sin(rotYZ), -cos(rotXZ) * cos(rotYZ));\n    vec3 camPos = camFw * -1.0 * (2.0 / (1.+iMouse.y*.01));\n    vec3 camR   = normalize(cross(camFw, vec3(0., 1., 0.)));\n        \n    vec3 camUp  = vec3(0., 1., 0.);\n    camUp -= camFw * dot(camUp, camFw);\n    camUp = normalize(camUp);\n    vec3 camRt  = cross(camFw, camUp);\n        \n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    vec2 uv = fragCoord.xy;\n    uv = (2.0 * (uv / iResolution.xy) - 1.0) * aspect * 0.5;\n    uv *= 1.3 - length(camPos) * 0.2;\n\n    vec3 camDir = normalize(camFw + camRt * uv.x + camUp * uv.y);\n\n    vec3 rayPos;\n    vec4 rayDir;\n    \n    rayPos = camPos;\n    rayDir.xyz = camDir;\n    rayDir.w;\n    \n    float rayClose = -dot(rayPos, rayDir.xyz);\n    float eff      = dot(rayPos, rayPos) - rayClose*rayClose;\n    \n    if (eff >= 1.) {\n    \tfragColor.xyz = texture(iChannel1, rayDir.xyz).xyz;\n    }\n    \n    rayPos.xyz += rayDir.xyz * max(0., (rayClose - sqrt(1. - eff)));\n    \n    //fragColor.xyz = 0.5 + 0.5 * vec3(getWhNormal(rayPos).xyz);\n   // return;\n    \n    bool switched = false;\n    \n    float time = iTime * 0.01;\n    \n    if (eff < 1.0) {\n        for (int i = 0; i < 512; i++) {\n\t\t\tvec3 normDir = rayDir.xyz;\n            float normL = length(normDir);\n            normDir /= min(1e-1, normL);\n            \n            vec3 nxPos = rayPos + normDir * 5e-3;\n\n            if (dot(nxPos.xyz, nxPos.xyz) > 1.) {\n                if (!switched) {\n                    fragColor.xyz = texture(iChannel1, rayDir.xyz).xyz;\n                }\n                else {\n                    fragColor.xyz = texture(iChannel0, -rayDir.zyx).xyz;\n                }\n                break;\n            }\n\n            bool nxSwitch;\n            vec4 norm = getWhNormal(nxPos, nxSwitch, time);\n            if (nxSwitch && !switched) {\n                switched = !switched;\n\n                vec3 nor = normalize(norm.xyz);\n                vec3 mid = nor * dot(nor, rayDir.xyz);\n\n                rayDir.xyz -= (rayDir.xyz - mid) * 2.;\n            }\n            if (switched) {\n                norm.w *= -1.;\n            }\n\n            rayDir -= norm * dot(rayDir, norm);\n            rayDir = normalize(rayDir);\n\n            rayPos = nxPos;\n        }\n    }\n    \n    fragColor.xyz += pow(fragColor.xyz, vec3(5., 5., 3.)) *2.;\n    \n    //sampleRay(camPos, camDir, finColour, finWeight, seed, min(0.1, fragColor.w * 1e-1));\n\n    //fragColor.xyz += finColour * finWeight;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 samp = texture(iChannel0, uv);\n    float off = 4. / iResolution.x;\n    \n    for (int i = -8; i < 8; i++) {\n    \tfragColor.xyz += texture(iChannel0, vec2(uv.x - off * float(i), uv.y)).xyz * blurW[abs(i)];\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}