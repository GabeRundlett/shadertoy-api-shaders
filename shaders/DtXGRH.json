{
    "Shader": {
        "info": {
            "date": "1671236265",
            "description": "multiplying the distance of each sphere results in a morphing effect\n\nleft, multiplied distance \nright: only the closest distance to the current coordinate of the image",
            "flags": 0,
            "hasliked": 0,
            "id": "DtXGRH",
            "likes": 5,
            "name": "morphing spheres",
            "published": 3,
            "tags": [
                "morphing"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "float f_n_rand(float n){\n    return fract(sin(234.32)*123.3*cos(n*23.23)*23.33);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trpino = (fragCoord.xy - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_trmono = (iMouse.xy - iResolution.xy*0.5)/ iResolution.y;\n    if(iMouse.z ==0.){o_trmono = vec2(0.);}\n    vec2 o_trmono_nooffset = (iMouse.xy )/ iResolution.y;\n    float n_tau = 6.2831;\n    float n_angle = n_tau / 3.;\n    float n_its = 50.;\n    float n_index = 0.;\n    float n_index_nor = 0.;\n    float n_dist_clst = 1.;\n    float n_t = iTime*2.;\n    float n_mixed = 0.;\n    float n_dist = 0.5;\n    float n_col_nor = 0.;\n    float n_dist_mul = 1.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        float n_itnor = n_it / n_its;\n        float n_rnd1 = f_n_rand(n_it);\n        float n_rnd2 = f_n_rand(n_rnd1);\n        vec2 o = o_trpino + vec2(\n            sin(n_rnd1*n_tau+iTime)*(iResolution.x/iResolution.y)*0.5,\n            cos(n_rnd2*n_tau+iTime)*0.5\n            //n_itnor\n            //(f_n_rand(n_it+iTime*0.00001)-0.5)*2.,\n            //(f_n_rand(n_it+iTime*0.00001)-0.5)*2.\n        );\n        n_dist = length(o);\n        n_dist_mul *= pow(n_dist, 0.2)*1.;\n        if(n_dist < n_dist_clst){\n            n_dist_clst = n_dist;\n        }\n    }\n    \n    fragColor = vec4(\n        n_dist_mul\n    );\n    if(o_trpino.x>o_trmono.x){\n     fragColor = vec4(n_dist_clst*10.);\n    }\n    fragColor = sqrt(fragColor);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}