{
    "Shader": {
        "info": {
            "date": "1611198260",
            "description": "sdPie3d",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGyRG",
            "likes": 3,
            "name": "sdPie3d",
            "published": 3,
            "tags": [
                "sdpie"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 1\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\n// The calculation is based on the `sdPie` distance from the following 2d distance reference.\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdPie3d(vec3 p, float rad, float r, float h) {\n    p.xy = abs(p.xy);\n    vec2 c = vec2(sin(rad),cos(rad));\n    float d = max(p.y-h,length(p.xz) - r);\n    float m = length(p.xz-c*clamp(dot(p.xz,c),0.0,r)); \n    return max(d,m*sign(c.y*p.x-c.x*p.z));\n}\n\nvec4 GetDist(vec3 p) {\n    vec3 prevP = p;\n    float lt = mod(iTime*20.0,420.0);\n    if(lt>=360.0){\n        lt = 360.0-((lt-360.0)/60.0*360.0);\n    }\n    \n    float rad = radians((lt<180.0)?lt:180.0);\n    float rad2 = radians((lt>=180.0)?lt-180.0:0.0);\n    \n    float t = mod(iTime*20.0,240.0);\n    t = (t<180.0)?t:180.0-((t-180.0)/60.0*180.0);\n    float rad3 = radians(t);\n    \n    // loading demo\n    p.z+=1.6;\n    float d = sdPie3d(p,rad,1.5,0.05);\n    d = max(p.x,d);\n    p*=-1.0;\n    float d2 = sdPie3d(p,rad2,1.5,0.05);\n    d2 = (rad2 != 0.0)?max(p.x,d2):100.0;\n    d = min(d,d2);\n    d2 = sdPie3d(p,radians(180.),0.75,0.06);\n    d = max(-d2+0.01,d);\n    \n    // other demo\n    p =prevP;\n    p.z-=1.6;\n    float d3 = sdPie3d(p,rad3,1.5,0.05);\n    d2 = sdPie3d(p*matRotateY(radians(180.0))*matRotateZ(radians(90.0)),rad3,1.2,0.1);\n    d3 = min(d3,d2);\n    \n    d = min(d,d3);\n    \n    vec3 col = 0.5 + 0.5*cos(iTime+p.xyz+vec3(0,1,2));\n    vec4 res = vec4(col,d);\n        \n    vec4 model = res;\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Bg(vec3 rd) {\n    float k = rd.y*0.5+0.5;\n    vec3 col = mix(vec3(.9,.8,.8),vec3(.7,.9,.5),k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -5.5);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-60.0));\n    ro.xz *= Rot(iTime*.3+1.0);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,-0.3,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float spec = pow(max(0.0,r.y),30.);\n        float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n        col = mix(Bg(r),vec3(dif),0.5)+spec;\n    } else {\n        // background\n        col += Bg(rd);\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}