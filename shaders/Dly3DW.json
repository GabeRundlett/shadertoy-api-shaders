{
    "Shader": {
        "info": {
            "date": "1684143673",
            "description": "Shrimple path tracing of a quadtree of extruded rectangular prisms with polygonal bokeh for depth of field\n\nMouse drag to look around\nDefines in Common",
            "flags": 32,
            "hasliked": 0,
            "id": "Dly3DW",
            "likes": 54,
            "name": "Extruded Quadtree Path Tracing",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "dof",
                "pathtracing"
            ],
            "usePreview": 1,
            "username": "gelami",
            "viewed": 1267
        },
        "renderpass": [
            {
                "code": "\n// Extruded Quadtree Path Tracing - gelami\n// https://www.shadertoy.com/view/Dly3DW\n\n/* \n * Shrimple path tracing of a quadtree of extruded rectangular prisms\n *   with polygonal bokeh for depth of field\n *\n * Mouse drag to look around\n * Defines in Common\n * \n * This was originally made for an SVGF implementation\n * but its still work in progress for now,\n * so I gave it some color and we have this instead ^ - ^\n * \n * Quadtree traversal method based from my other shader:\n * Rectangular Pillar LOD Traversal - gelami\n * https://www.shadertoy.com/view/mttGWX\n * \n */\n\n// Fork of \"Quadtree Path Tracing SVGF\" by gelami. https://shadertoy.com/view/Dly3Dh\n// 2023-05-13 06:41:06\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    \n    if (fc == ivec2(0, 0)) fc = ivec2(0, 1);\n    if (fc == ivec2(1, 0)) fc = ivec2(1, 1);\n    \n    vec3 col = texelFetch(iChannel0, fc, 0).rgb;\n    \n    col = col / (1. + col);\n    \n    fragColor = vec4(linearTosRGB(col), 1);\n    fragColor += (dot(hash23(vec3(fragCoord, iTime)), vec2(1)) - 0.5) / 255.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define BOUNCES 3\n    \n#define CAMERA_DIST 6.0\n//#define STATIC_CAMERA\n#define CAMERA_POSITION vec3(0, MAX_HEIGHT*0.9, 0)\n#define CAMERA_ANGLE vec2(0.09, 0.8)\n\n//#define REPROJECT\n\n#define DOF_STRENGTH 0.12\n#define DOF_FOCUS_DISTANCE CAMERA_DIST\n#define DOF_SIDES 6\n\n#define MAX_HEIGHT 5.0\n#define MAX_LOD 3.0    \n\n#define STEPS 256\n#define MAX_DIST 100.\n#define EPS 1e-4\n\n#define PI (acos(-1.))\n#define TAU (PI*2.)\n\nmat3 getCameraMatrix(vec3 ro, vec3 lo)\n{\n    vec3 cw = normalize(lo - ro);\n    vec3 cu = normalize(cross(cw, vec3(0, 1, 0)));\n    vec3 cv = cross(cu, cw);\n\n    return mat3(cu, cv, cw);\n}\n\nfloat safeacos(float x) { return acos(clamp(x, -1.0, 1.0)); }\n\nfloat saturate(float x) { return clamp(x, 0., 1.); }\nvec2 saturate(vec2 x) { return clamp(x, vec2(0), vec2(1)); }\nvec3 saturate(vec3 x) { return clamp(x, vec3(0), vec3(1)); }\n\nfloat sqr(float x) { return x*x; }\nvec2 sqr(vec2 x) { return x*x; }\nvec3 sqr(vec3 x) { return x*x; }\n\nfloat luminance(vec3 col) { return dot(col, vec3(0.2126729, 0.7151522, 0.0721750)); }\n\nmat2 rot2D(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n// https://iquilezles.org/articles/smin/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \nfloat smax( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\n\n// https://iquilezles.org/articles/palettes/\nvec3 palette(float t)\n{\n    return .5 + .5 * cos(TAU * (vec3(1, 1, 1) * t + vec3(0, .33, .67)));\n}\n\nvec3 palette2(float t)\n{\n    return .5 + .5 * cos(TAU * (vec3(1, 1, 0.8) * t + vec3(0, 0.25, 0.5)));\n}\n\n// Hash without Sine\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n\n// RNG\nuint state;\nvoid initState(vec2 coord, int frame)\n{\n    state = uint(coord.x) * 1321u + uint(coord.y) * 4123u + uint(frame) * 4123u*4123u;\n}\n\n// From Chris Wellons Hash Prospector\n// https://nullprogram.com/blog/2018/07/31/\n// https://www.shadertoy.com/view/WttXWX\nuint hashi(inout uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat hash(inout uint x)\n{\n    return float( hashi(x) ) / float( 0xffffffffU );\n}\n\nvec2 hash2(inout uint x)\n{\n    return vec2(hash(x), hash(x));\n}\n\nvec3 hash3(inout uint x)\n{\n    return vec3(hash(x), hash(x), hash(x));\n}\n\nvec4 hash4(inout uint x)\n{\n    return vec4(hash(x), hash(x), hash(x), hash(x));\n}\n\n#define coprimes vec2(2,3)\nvec2 halton (vec2 s)\n{\n  vec4 a = vec4(1,1,0,0);\n  while (s.x > 0. && s.y > 0.)\n  {\n    a.xy = a.xy/coprimes;\n    a.zw += a.xy*mod(vec2(s),coprimes);\n    s = floor(s/coprimes);\n  }\n  return a.zw;\n}\n\nvec2 getJitter(vec2 pos, int frame)\n{\n    pos = floor(pos);\n    return halton(vec2(frame%8+1)) - .5;\n}\n\n// Random unit vector\n// Generate a random unit circle and scaled the z with a circular mapping\nvec3 randomUnitVector()\n{\n    vec2 rand = hash2(state);\n    rand.y = rand.y*2.-1.;\n    rand.x *= PI*2.;\n    \n    float r = sqrt(1. - rand.y*rand.y);\n    vec2 xy = vec2(cos(rand.x), sin(rand.x)) * r;\n    \n    return vec3(xy, rand.y);\n}\n\nvec3 randomHemisphere(vec3 n)\n{\n    vec3 r = randomUnitVector();\n    return dot(r, n) < 0.0 ? -r : r;\n}\n\n// Random cosine-weighted unit vector on a hemisphere\n// Unit vector + random unit vector\nvec3 randomCosineHemisphere(vec3 n)\n{\n    return normalize(randomUnitVector() + n);\n}\n\nvec3 randomUniformCone(float angle)\n{\n    vec2 rand = hash2(state);\n    rand.y = mix(cos(angle), 1.0, rand.y);\n    rand.x *= PI*2.;\n    \n    float r = sqrt(1. - rand.y*rand.y);\n    vec2 xy = vec2(cos(rand.x), sin(rand.x)) * r;\n    \n    return vec3(xy, rand.y);\n}\n\n// Random point in circle\n// Very straightforward, unit circle scaled by sqrt of the radius\nvec2 randomPointInCircle()\n{\n    vec2 rand = hash2(state);\n    \n    float a = rand.x * TAU;\n    float r = sqrt(rand.y);\n    return vec2(cos(a), sin(a)) * r;\n}\n\n// Random point in polygon\n// Pick a random side and\n// generate a point in a rhombus (equal quadrilateral),\n// and fold it if the point is outside the inner triangle\nvec2 randomPointInPolygon(float sides)\n{\n    vec3 rand = hash3(state);\n    float n = floor(rand.x * sides) / sides;\n    float a1 = n * TAU;\n    float a2 = a1 + TAU / sides;\n    vec2 s1 = vec2(cos(a1), sin(a1));\n    vec2 s2 = vec2(cos(a2), sin(a2));\n    vec2 p1 = s1 * rand.y + s2 * rand.z;\n    vec2 p2 = s1 * (1.0 - rand.y) + s2 * (1.0 - rand.z);\n    \n    return rand.y + rand.z > 1.0 ? p2 : p1;\n}\n\n// Random point in star\n// Same as the random point in polygon,\n// but without folding the rhombus into a triangle\nvec2 randomPointInStar(float sides)\n{\n    vec3 rand = hash3(state);\n    float n = floor(rand.x * sides) / sides;\n    float a1 = n * TAU;\n    float a2 = a1 + TAU / sides;\n    vec2 s1 = vec2(cos(a1), sin(a1));\n    vec2 s2 = vec2(cos(a2), sin(a2));\n    \n    return s1 * rand.y + s2 * rand.z;\n}\n\n// Orthonormal Basis\n// https://www.shadertoy.com/view/tlVczh\n// MBR method 2a variant\nmat3 getBasis(in vec3 n)\n{\n    float sz = n.z >= 0.0 ? 1.0 : -1.0;\n    float a  =  n.y/(1.0+abs(n.z));\n    float b  =  n.y*a;\n    float c  = -n.x*a;\n\n    vec3 xp = vec3(n.z+sz*b, sz*c, -n.x);\n    vec3 yp = vec3(c, 1.0-b, -sz*n.y);\n    \n    return mat3(xp, yp, n);\n}\n\nvoid getBasis(in vec3 n, out vec3 xp, out vec3 yp)\n{\n    float sz = n.z >= 0.0 ? 1.0 : -1.0;\n    float a  =  n.y/(1.0+abs(n.z));\n    float b  =  n.y*a;\n    float c  = -n.x*a;\n\n    xp = vec3(n.z+sz*b, sz*c, -n.x);\n    yp = vec3(c, 1.0-b, -sz*n.y);\n}\n\nvec3 sRGBToLinear(vec3 col)\n{\n    return mix(pow((col + 0.055) / 1.055, vec3(2.4)), col / 12.92, lessThan(col, vec3(0.04045)));\n}\n\nvec3 linearTosRGB(vec3 col)\n{\n    return mix(1.055 * pow(col, vec3(1.0 / 2.4)) - 0.055, col * 12.92, lessThan(col, vec3(0.0031308)));\n}\n\n// ACES tone mapping curve fit to go from HDR to LDR\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n// Fork of \"Gelami Raymarching Template\" by gelami. https://shadertoy.com/view/mslGRs\n// 2023-05-12 02:58:47\n\nvec2 map(vec2 p, float lod)\n{\n    float h = 1.0;\n    bool leaf = false;\n    for (float i = MAX_LOD; i >= lod; i--)\n    {\n        float s = exp2(MAX_LOD-i);\n        vec2 o = floor(p * s) / exp2(MAX_LOD-i);\n        \n        vec2 r = texture(iChannel1, (floor(p * s) + 0.5) / iChannelResolution[1].xy).xy;\n        //vec2 r = hash22(o);\n        float k = r.x;\n        \n        if (i == MAX_LOD)\n        {\n            h = (k*0.25+0.75) * 0.9999;\n            //h = mix(k, 1.0, 0.95);\n        } else\n        {\n            k = mix(k, 1.0, 0.95);\n            h *= k;\n        }\n        if (i != MAX_LOD && r.y < 0.1 + (MAX_LOD-i) * 0.1)\n        {\n            leaf = true;\n            break;\n        }\n    }\n    \n    return vec2(h * MAX_HEIGHT, leaf);\n}\n\nstruct HitInfo\n{\n    float t;\n    vec3 n;\n    vec2 id;\n};\n\nbool trace(vec3 ro, vec3 rd, out HitInfo hit)\n{\n\n    vec3 ird = 1.0 / rd;\n    vec3 srd = sign(ird);\n    vec3 ard = abs(ird);\n    \n    vec3 iro = ro * ird;\n    \n    vec2 id = floor(ro.xz);\n    vec2 pid = id;\n\n    float s = 1.0;\n    float lod = MAX_LOD;\n    vec3 pos = ro;\n    \n    vec2 nrd = vec2(0);\n    float t = 0.0;\n\n    for (int i = 0; i < STEPS; i++)\n    {\n        vec2 p = (id + 0.5) * s;\n        \n        vec2 h = map(id * s, lod);\n        \n        if (pos.y < h.x)\n        {\n            if (lod > 0.0 && h.y < 0.5)\n            {\n                id *= 2.0;\n                id += step(vec2(0), pos.xz - p);\n                pid = id;\n                \n                s *= 0.5;\n                lod--;\n                continue;\n            } else\n            {\n                hit.t = t;\n                hit.n = -vec3(nrd.x, 0, nrd.y);\n                hit.id = id;\n                return true;\n            }\n        }\n        \n        vec2 n = iro.xz - p * ird.xz;\n        vec2 k = ard.xz * s * 0.5;\n        \n        vec2 t2 = -n + k;\n        \n        float nt = min(t2.x, t2.y);\n        \n        vec3 npos = ro + rd * nt;\n        \n        if (rd.y > 0.0 && npos.y > MAX_HEIGHT)\n            return false;\n        \n        if (npos.y < h.x)\n        {\n            \n            if (lod > 0.0 && h.y < 0.5)\n            {\n                id *= 2.0;\n                id += step(vec2(0), pos.xz - p);\n                pid = id;\n                \n                s *= 0.5;\n                lod--;\n                continue;\n                \n            } else\n            {\n                hit.t = -(ro.y - h.x) / rd.y;\n                hit.n = vec3(0, 1, 0);\n                hit.id = id;\n                return true;\n            }\n        }\n        \n        pos = npos;\n        t = nt;\n        \n        nrd = step(t2, t2.yx) * srd.xz;\n        pid = id;\n        id += nrd;\n        \n        if (floor(pid*0.5) != floor(id*0.5) && lod < MAX_LOD)\n        {\n            id = floor(id*0.5);\n            pid = id;\n            s *= 2.0;\n            lod++;\n        }\n    }\n\n    return false;\n}\n\nfloat fresnel(float r0, vec3 rd, vec3 n)\n{\n    return r0 + (1.0 + r0) * pow(1.0 - dot(-rd, n), 5.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initState(fragCoord, iFrame);\n    \n    ivec2 iFragCoord = ivec2(fragCoord);\n    \n    vec2 o = getJitter(fragCoord, iFrame);\n    vec2 pv = (2. * (fragCoord + o) - iResolution.xy) / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, CAMERA_DIST);\n    vec3 pro = vec3(0, 0, CAMERA_DIST);\n    vec3 lo = CAMERA_POSITION;\n    \n    #define MOUSE_DEFAULT vec4(CAMERA_ANGLE, 0, 0)\n    vec4 m = texelFetch(iChannel0, ivec2(0, 0), 0);\n    vec4 pm = texelFetch(iChannel0, ivec2(1, 0), 0);\n    \n    if (iFrame < 2)\n    {\n        m = MOUSE_DEFAULT;\n        pm = MOUSE_DEFAULT;\n    }\n    \n    #ifdef STATIC_CAMERA\n    m = MOUSE_DEFAULT;\n    #endif\n    \n    if (iFragCoord == ivec2(0, 0))\n    {\n        if (iFrame < 2)\n        {\n            fragColor = MOUSE_DEFAULT;\n        } else\n        {\n            vec2 mn = iMouse.xy / iResolution.xy;\n            fragColor = vec4(m);\n            if (iMouse.z > 0.0)\n            {\n                if (fragColor.zw != vec2(0))\n                {\n                    fragColor.xy += (mn - m.zw);\n                    fragColor.y = clamp(fragColor.y, 1e-4, 1.0 - 1e-4);\n                }\n                fragColor.zw = mn;\n            } else\n            {\n                fragColor.zw = vec2(0);\n            }\n        }\n        return;\n    } else if (iFragCoord == ivec2(1, 0))\n    {\n        if (iFrame < 2)\n            fragColor = MOUSE_DEFAULT;\n        else\n            fragColor = texelFetch(iChannel0, ivec2(0, 0), 0);\n        return;\n    }\n    \n    float ax = -m.x * TAU + PI;\n    float ay = m.y * PI - PI * 0.5;\n    \n    ro.yz *= rot2D(ay);\n    ro.xz *= rot2D(ax);\n    ro += lo;\n\n    mat3 cmat = getCameraMatrix(ro, lo);\n    \n    const float invTanFov = 2.5;\n    \n    const float dofStrength = DOF_STRENGTH;\n    const float dofDist = DOF_FOCUS_DISTANCE / invTanFov;\n    \n    vec3 nro = ro;\n    \n    #ifndef REPROJECT\n    \n    #if DOF_SIDES == 0\n    vec2 rc = randomPointInCircle();\n    #else\n    vec2 rc = randomPointInPolygon(float(DOF_SIDES));\n    #endif\n    \n    rc *= dofStrength * dofDist;\n    \n    pv -= rc / dofDist;\n    nro += cmat * vec3(rc, 0);\n    #endif\n    \n    vec3 rd = normalize(cmat * vec3(pv, invTanFov));\n    \n    vec3 sunDir = normalize(vec3(0.7, 1.2, 1));\n    \n    vec3 ligCol = (vec3(1,0.6,0.15)*0.8+0.2)*1.5;\n    vec3 skyCol = vec3(0.2, 0.3, 0.5) * 0.4;\n    \n    vec3 ldir = randomUniformCone(radians(0.56 * 2.0));\n    \n    mat3 sunMat = getBasis(sunDir);\n    \n    ldir = sunMat * ldir;\n    \n    vec3 col = vec3(0);\n    vec3 thr = vec3(1);\n    \n    vec3 pos = nro;\n    float pt = 0.0;\n    \n    if (pos.y > MAX_HEIGHT)\n    {\n        pt = -(pos.y - MAX_HEIGHT) / rd.y;\n        pos = pos + rd * pt;\n    }\n    \n    HitInfo hit;\n    bool isHit = trace(pos, rd, hit);\n    \n    vec3 cpos = pos;\n    vec3 crd = rd;\n    \n    float t = isHit ? pt + hit.t : MAX_DIST;\n    pos = pos + rd * hit.t;\n    \n    for (int i = 0; i < BOUNCES; i++)\n    {\n        if (!isHit)\n        {\n            col += skyCol * thr;\n            break;\n        }\n        \n        cpos = cpos + crd * hit.t + hit.n * EPS;\n        \n        vec3 alb = vec3(hash12(hit.id.yx) * 0.2 + 0.8);\n        alb = palette2(hash12(hit.id.yx));\n        \n        float fre = fresnel(0.08, crd, hit.n);\n        \n        if (hash(state) < fre && i < BOUNCES-1)\n            crd = reflect(crd, hit.n);\n        else\n            crd = randomCosineHemisphere(hit.n);\n        \n        thr *= alb;\n        \n        float dif = max(dot(hit.n, ldir), 0.0);\n        \n        HitInfo hitL;\n        bool isHitL = trace(cpos, ldir, hitL);\n\n        if (!isHitL)\n        {\n            col += dif * ligCol * thr;\n        }\n        \n        isHit = trace(cpos, crd, hit);\n        \n        if (!isHit)\n        {\n            col += skyCol * thr;\n            break;\n        }\n    }\n    \n    #ifdef REPROJECT\n    float blend = iFrame == 0 ? 1.0 : 1.0 / 16.0;\n    \n    float pax = -pm.x * TAU + PI;\n    float pay = pm.y * PI - PI * 0.5;\n    \n    pro.yz *= rot2D(pay);\n    pro.xz *= rot2D(pax);\n    pro += lo;\n\n    mat3 pmat = getCameraMatrix(pro, lo);\n    \n    vec3 pvpos = (pos - pro) * pmat;\n    vec2 pndc = invTanFov * pvpos.xy / pvpos.z;\n    vec2 puv = pndc * vec2(iResolution.y / iResolution.x, 1) * .5 + .5 - o / iResolution.xy;\n    \n    vec2 ppv = (2.0 * puv * iResolution.xy - iResolution.xy) / iResolution.y;\n    vec2 pfc = puv * iResolution.xy;\n    \n    vec3 prd = normalize(pmat * vec3(ppv, invTanFov));\n    \n    vec4 prev = texture(iChannel0, puv);\n    \n    vec3 ppos = pro + prd * prev.a;\n    \n    if (puv != saturate(puv))\n        blend = 1.0;\n    \n    #ifndef STATIC_CAMERA\n    if (m.zw != vec2(0) && abs(t - prev.a) > 0.05) blend = 1.0;\n    #endif\n    \n    col = max(col, vec3(0));\n    col = mix(prev.rgb, col, blend);\n    \n    fragColor = vec4(col, t);\n    \n    #else\n        \n    vec4 prev = texture(iChannel0, uv);\n    \n    float blend = iFrame == 0 ? 1.0 : 1.0 / (1.0 + 1.0 / prev.a);\n    \n    #ifndef STATIC_CAMERA\n    if (m.zw != vec2(0)) blend = 1.0;\n    #endif\n    \n    col = max(col, vec3(0));\n    col = mix(prev.rgb, col, blend);\n    \n    fragColor = vec4(col, blend);\n    \n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}