{
    "Shader": {
        "info": {
            "date": "1611823455",
            "description": "Same as 2a except that instead of wrapping around the ray is reflected. So not a \"projective disc\" but a \"mirror disc\".\n\nEDIT: changed background so the geometry is easier to follow.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlycDV",
            "likes": 1,
            "name": "Projective disc study 2b",
            "published": 3,
            "tags": [
                "geometric"
            ],
            "usePreview": 0,
            "username": "sig",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nfloat signedpow(float x, float e) {\n    return sign(x) * pow(abs(x), e);\n}\n\nvec4 _tex_bg(vec2 p, float R_background) {\n    vec2 center = vec2(cos(iTime), sin(iTime) * 0.3) * R_background * 0.2; \n    return vec4(texture(iChannel0, (p + center) / R_background * 0.4 - vec2(0.5, 0.55)));\n}\n\nvec4 tex_bg(vec2 p, float R_background) {\n    return vec4(1, 0, 0, 1) * cos(length(p) / R_background * PI * 10.0)\n        + vec4(0, 0.4, 0, 1) * step(-cos(p.x / R_background * PI * 8.0), -0.9)\n        + vec4(0, 0, 1, 1) * step(-cos(p.y / R_background * PI * 8.0), -0.9);\n}\n\nvec4 tex_cursor(vec2 p, float R_cursor) {\n    if (length(p) > R_cursor) { return vec4(0); }\n    vec2 sprite_size = vec2(0.159, 1.0);\n    float sprite_i = mod(floor(iTime * 6.0), 6.0);\n    vec2 tex_uv = sprite_size * (0.5 - 0.5 * p / R_cursor);\n    return texture(iChannel1, tex_uv + sprite_i * vec2(sprite_size.x, 0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float R = 0.4 + 0.3 * signedpow(sin(iTime / 5.0), 0.3);\n\n    // pixel to evaluate\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // clamp the cursor cat to the edge of the disc\n    vec2 c = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    vec2 cursor = normalize(c) * min(length(c), R - 0.0001);\n    vec4 cursorSample = tex_cursor(cursor - p, R * 0.3);\n    \n    vec2 p0 = p;\n    if (length(p) > R) {\n        // direction from cursor to pixel in screen space (without wrapping)\n        vec2 look_dir = normalize(p - cursor);\n\n        // calculate distances for the inside-the-disc part\n        // q = projection of origin on look-dir line\n        // c = cursor\n        // a = intersection point\n        float qc = dot(cursor, look_dir);\n        vec2 d = cursor - qc * look_dir; // == 0q, perpendicular vector from origin to look_dir line\n        float qa = sqrt(R*R - d.x*d.x - d.y*d.y);\n        float chord_len = 2.0 * qa;\n        float len_before_wrap = qa - qc; // since p is outside the disc, this should be < distance(p, cursor)\n        \n        // find look_dir chord (intersection points of disc and look_dir line relative to origin)\n        // first wrap point = end of first chord = intersection point towards look_dir\n        vec2 intersect1 = d + qa * look_dir;\n        vec2 intersect2 = d - qa * look_dir;\n        float first_end_angle = atan(intersect1.y, intersect1.x);\n        float first_start_angle = atan(intersect2.y, intersect2.x);\n        float chord_angle = first_end_angle - first_start_angle;\n                \n        // number of wraps\n        float len_after_wrap = distance(p, cursor) - len_before_wrap; // since p is outside the disc, this should be positive\n        float n_wraps = floor(len_after_wrap / chord_len);        \n        \n        // find last chord by rotating the chord n_wraps times\n        float last_start_angle = first_end_angle + chord_angle * n_wraps;\n        float last_end_angle = last_start_angle + chord_angle;\n        vec2 last_start = R * vec2(cos(last_start_angle), sin(last_start_angle));\n        vec2 last_dir = normalize(R * vec2(cos(last_end_angle), sin(last_end_angle)) - last_start);\n\n        // add the remainder\n        float remainder = len_after_wrap - n_wraps * chord_len;\n        p0 = last_start + last_dir * remainder;\n    }\n        \n    fragColor = mix(tex_bg(p0, R), cursorSample, cursorSample.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}