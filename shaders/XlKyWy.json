{
    "Shader": {
        "info": {
            "date": "1537546095",
            "description": "Quality pogo time.\nAnti-aliasing is done by dynamically smoothing the texture generation function, so it's not 100% perfect, but screen-space sampling may be added later.\nFeedback appreciated!",
            "flags": 0,
            "hasliked": 0,
            "id": "XlKyWy",
            "likes": 17,
            "name": "Bouncing on Marble",
            "published": 3,
            "tags": [
                "demoscene",
                "motionblur",
                "demoeffect",
                "rotozoomer",
                "bouncing",
                "chromaticabberation",
                "pogo"
            ],
            "usePreview": 1,
            "username": "Blokatt",
            "viewed": 2210
        },
        "renderpass": [
            {
                "code": "/*\nBouncing on Marble 1.0\nBy Blokatt (@blokatt | blokatt.net)\n22/09/18\n*/\n\n#define MOTION_BLUR_LENGTH 0.025\n#define MOTION_BLUR_SAMPLES 10.0\n#define ARC_MAX_LEN 8.0\n#define ARC_MAX 0.3\n#define TIME_OFFSET 13.75 + (iMouse.x / iResolution.x - .5)\n#define JUMPING_SPEED 1.0\n\nconst float PI = 3.141592653589793238462643;\nconst float HPI = PI * 0.5;\nconst float FPI = ARC_MAX_LEN / PI;\nconst float MOTION_BLUR_FALOFF = 1.0 - (1.0 / (1. + MOTION_BLUR_SAMPLES * 0.3));\nconst float MOTION_BLUR_LENGTH_OFFSET = MOTION_BLUR_LENGTH / MOTION_BLUR_SAMPLES;\n#define RATIO iResolution.x / iResolution.y\n\nmat2 rot(float a){\n\treturn mat2(cos(a), -sin(a),\n        \t\tsin(a), cos(a));\n}\n\nfloat smoothmod(float v, float d, float p){\n\tfloat res = mod(v, d);\n    return res * (1. - smoothstep(d - p, d, res)); \n}\n\nvec4 baseTexture(in vec2 uv, float depth){    \n    float size = 1.;    \n    float blur = min(.0005 * (depth * 10.5), .0030);    \n    return vec4(.5) * smoothstep(0., blur, smoothmod(uv.x * size, .05, blur * 5.)) * smoothstep(0., blur * RATIO, smoothmod(uv.y * size, .05, blur * RATIO * 3.)) * smoothstep(1., 1. - blur, mod(uv.x * size + .05 * floor(mod(uv.y * size, .1) * 20.), .1) * 20.) + texture(iChannel0, uv * 5.) - vec4(.14, .15, .01, 0.);\t\n}\n\nfloat arcExtreme(float t) {\n\treturn ARC_MAX * floor(abs(HPI - mod(t / ARC_MAX_LEN - HPI, PI)) * FPI);\n}\n\nvec4 zoomer(in vec2 uv, in float t){    \n    uv.x *= RATIO; \n    vec2 _uv = uv;\n    \n    float bounceT = t * JUMPING_SPEED + .2;    \n    float z = .1 + abs(sin(bounceT)) * (1. + arcExtreme(bounceT));         \n    uv *= z;          \n    uv.x += cos(t * 1.) * .25 * sin(t * .2 + .2);\n    uv.y -= sin(t * 1.) * .25 * sin(t * .2 + .2);        \n\tuv *= rot(t * .3 + length(uv) * .5);  \n    \n    float l = length(uv);\n    float depth = sin(l * 10. - t * 5.) * ((1. / (1. + l * .25)) * .03);\n    float size = 1.5 + depth * 1.5;  \n    float _l = length(_uv * size);\n    return vec4(1. - depth * 15.) * baseTexture(uv * size, z) * (mix(smoothstep(.25 * .15, .5 * .15, _l * z - max(0., max(0., .006 - z * 2.5))), 1., clamp(0., 1., .15 + z + depth)));\t\n}\n\nvec4 trail(in vec2 uv, in float t){\n    t += TIME_OFFSET;\n\tvec4 col = zoomer(uv, t);\n    float factor = .5;\n    for (float i = 1.; i < MOTION_BLUR_SAMPLES; i += 1.){\n    \tcol = mix(col, zoomer(uv, t - i * MOTION_BLUR_LENGTH_OFFSET), 1. * factor);\n        factor *= MOTION_BLUR_FALOFF;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy - .5;                   \n    fragColor = vec4(trail(uv, iTime - .005).r, trail(uv * .996, iTime).g, trail(uv * .993, iTime + .005).b, 1.) * (1. - smoothstep(.5, .9, length(uv)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}