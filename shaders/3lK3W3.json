{
    "Shader": {
        "info": {
            "date": "1580063806",
            "description": "Heart <3 the Recursive Flower!!",
            "flags": 0,
            "hasliked": 0,
            "id": "3lK3W3",
            "likes": 2,
            "name": "Recursive Flower",
            "published": 3,
            "tags": [
                "flower",
                "recursive"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "//-----------------CONSTANTS MACROS-----------------\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define MAX_DIM (max(iResolution.x,iResolution.y))\n//--------------------------------------------------\n\n#define time ((sin(float(__LINE__))/PI/GR+1.0)*iTime/PI)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\n\nvec2 saw(vec2 x) { return vec2(saw(x.x), saw(x.y)); }\nvec3 saw(vec3 x) { return vec3(saw(x.x), saw(x.y), saw(x.z)); }\nvec4 saw(vec4 x) { return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w)); }\n\n\nmat2 rotate(float x) { return mat2(cos(x), sin(x), sin(x), -cos(x)); }\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 res = vec2(-1.0);\n\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross2d( g, f );\n    float k1 = cross2d( e, f ) + cross2d( h, g );\n    float k0 = cross2d( h, e );\n    \n    // if edges are parallel, this is a linear equation. Do not this test here though, do\n    // it in the user code\n    if( abs(k2)<0.001 )\n    {\n        float v = -k0/k1;\n        float u  = (h.x*k1+f.x*k0) / (e.x*k1-g.x*k0);\n        //if( v>0.0 && v<1.0 && u>0.0 && u<1.0 ) \n            res = vec2( u, v );\n    }\n\telse\n    {\n        // otherwise, it's a quadratic\n        float w = k1*k1 - 4.0*k0*k2;\n        //if( w<0.0 ) return vec2(-1.0);\n        w = sqrt( w );\n\n        float ik2 = 0.5/k2;\n        float v = (-k1 - w)*ik2;// if( v<0.0 || v>1.0 ) v = (-k1 + w)*ik2;\n        float u = (h.x - f.x*v)/(e.x + g.x*v);\n        //if( u<0.0 || u>1.0 || v<0.0 || v>1.0 ) return vec2(-1.0);\n        res = vec2( u, v );\n    }\n    return (res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy)/iResolution.xy*2.-1.;\n    \n    p.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 col = vec3(0.);\n\n    vec2 c = vec2(0., 1./MAX_DIM);\n    vec2 d = vec2(0., -1./MAX_DIM);\n\n    const float max_iterations = 4.;\n    \n    float map = 0.;\n    \n    for(float f = 0.; f < max_iterations; f+=1.){\n        float iteration = (f/max_iterations+1.);\n        float rots = floor(2.+8.*saw(time))+1./MAX_DIM;\n        float angle = atan(-p.y, -p.x);\n        angle = floor(((angle/PI)*.5+.5)*rots);\n\n        vec2 a = vec2(1., 0.);\n        vec2 b = vec2(1., 0.);\n        \n        b *= rotate(angle/rots*2.*PI);\n        angle += 1.;\n        a *= rotate(angle/rots*2.*PI);\n\n        p = (invBilinear( p, a, b, c, d ));\n\n        map += 1.-smoothstep(0., 1., abs(p.y-.5));\n        p = p*2.-1.;\n    }\n    fragColor = vec4(flux(map*PI), 1.0 )*clamp(map, 0., 1.)+clamp(1.-map, 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}