{
    "Shader": {
        "info": {
            "date": "1613868751",
            "description": "Recursive tiling.",
            "flags": 2,
            "hasliked": 0,
            "id": "3tKBzh",
            "likes": 10,
            "name": "House of Mirrors",
            "published": 3,
            "tags": [
                "grid",
                "webcam",
                "tiling",
                "recurse"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 452
        },
        "renderpass": [
            {
                "code": "float Hash11a(in float x) { return fract(474.951 * cos(284.385 * x)); }\nfloat Hash11b(in float x) { return fract(381.79 * cos(974.385 * x)); }\nfloat Hash21a(in vec2 p) { return fract(585.394 * cos(dot(p, vec2(495.385, 395.978)))); }\nfloat Hash21b(in vec2 p) { return fract(968.385 * cos(dot(p, vec2(375.483, 384.484)))); }\n\nvoid Rotate(inout vec2 p, in float r) {\n    float c = cos(r), s = sin(r);\n    p *= mat2(c, -s, s, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y + iTime * 0.1;\n\n    uv *= 1.5;\n    vec2 cell = floor(uv);\n    vec2 local = fract(uv) - 0.5;\n\n    for (float iter=0.0; iter < 10.0; iter++) {\n        Rotate(local, floor(Hash21a(cell) * Hash11a(iter) * 4.0) * 1.57);\n        if (Hash21b(cell) * Hash11b(iter) > 0.232) break;\n        local *= 3.0;\n        cell = floor(local);\n        local = fract(local) - 0.5;\n    }\n\n    fragColor = texture(iChannel0, local + 0.5);\n    float border = step(0.0, max(abs(local.x), abs(local.y)) - 0.45);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.6, 0.35, 0.0), border);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}