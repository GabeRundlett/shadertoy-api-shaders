{
    "Shader": {
        "info": {
            "date": "1666464221",
            "description": "Implementation of parallax occlusion mapping to create a land of vaguely metallic cubes. It's slow and leaves lots of artefacts but here we are.",
            "flags": 32,
            "hasliked": 0,
            "id": "dslGR2",
            "likes": 2,
            "name": "Voxel Land.",
            "published": 3,
            "tags": [
                "raymarching",
                "voxel",
                "bloom"
            ],
            "usePreview": 0,
            "username": "thepinkpanzer",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "#define D(p) texture(iChannel0, ((p)/iResolution.xy))\n#define A(p) texture(iChannel1, ((p)/iResolution.xy))\n\nvec4 GB(vec2 fc)\n{\n    vec4 t = vec4(0);\n    for (float x = -2.*SIGMA; x <= 2.*SIGMA; x++)\n    {\n        float N = 1./sqrt(2.*PI*SIGMA*SIGMA);\n        t += R(fc+vec2(x,0.)) * N * exp(-0.5*(float(x*x)/(SIGMA*SIGMA)));\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 gb = GB(fragCoord);\n    fragColor = tanh(0.6*gb*gb + 0.8*A(fragCoord));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define T(p) texture(iChannel0, round((p) * 64.)/64.).r\n\n#define NSAMPLES 1000\n#define NBINARY 6\n\n#define GRIDSCALE 16.\n\n#define MINDEPTH 0.2\n#define MAXDEPTH 0.8\n\n#define MAXJUMP 0.02\n\n#define BINSTART 0.02\n\nfloat r(float i, float l)\n{\n    return fract(i*(l-i));\n}\n\nfloat hash(float seed)\n{\n    return r(r(r(seed, 5.), 5.), 5.);\n}\n\nstruct surface\n{\n    vec3 normal;\n    float smoothness;\n    vec4 color;\n    vec4 on;\n};\n\nfloat height(vec3 position)\n{\n    vec2 newCoords = position.xz;\n    newCoords = fract(newCoords / GRIDSCALE);\n    float height = T(newCoords);\n    height = clamp(height, 0., 1.);\n    float f = 2. + 0.5 * hash(height);\n    float t = hash(f - 0.5);\n    height *= (0.5 + 9./16.*(cos(iTime * f + t*PI) + 1./9. * cos(3.*(iTime*f + t*PI))));\n    return height*(MAXDEPTH - MINDEPTH) + MINDEPTH;\n}\n\nsurface GetSurface(vec3 position, vec3 iViewDirection)\n{\n    vec2 newCoords = position.xz;\n    newCoords = fract(newCoords * 64. / GRIDSCALE);\n        \n    vec3 normal = vec3(0,1,0) * sign(iViewDirection.g);\n    \n    if (abs(newCoords.x - 0.5) < 0.012)\n    {\n        if (height(position + vec3(0.012,0,0)) < height(position - vec3(0.012,0,0)))\n        {\n            position = position + vec3(0.1,0,0);\n            normal = vec3(1,0,0);\n        }\n        else\n        {\n            position = position - vec3(0.1,0,0);\n            normal = vec3(-1,0,0);\n        }\n    }\n    if (abs(newCoords.y - 0.5) < 0.012)\n    {\n        if (height(position + vec3(0,0,0.012)) < height(position - vec3(0,0,0.012)))\n        {\n            position = position + vec3(0,0,0.1);\n            normal = vec3(0,0,1);\n        }\n        else\n        {\n            position = position - vec3(0,0,0.1);\n            normal = vec3(0,0,-1);\n        }\n    }\n    \n    newCoords = position.xz;\n    newCoords = fract(newCoords / GRIDSCALE);\n    \n    float smoothness = 0.4 + 0.2*hash(T(newCoords));\n    \n    vec4 color = vec4(0.4 + 0.2*hash(T(newCoords)+0.1))+0.2*vec4(0,0.1,0.4,1)*hash(T(newCoords)-0.1);\n    \n    vec4 on = hash(smoothness+0.1) < 0.03 ? normalize(vec4(hash(color.r), hash(color.g), hash(color.b),0)) : vec4(0);\n    \n    return surface(normal, smoothness, color, on);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fCoord )\n{\n    vec2 fragCoord = fCoord + 0.5 - 0.5*hash(fract(length(fCoord)+tan(iTime)));\n    float theta = (iMouse.x - iResolution.x / 2.) / iResolution.y * PI;\n    float phi   = (iMouse.y - iResolution.y / 2.) / iResolution.y * PI;\n\n    // CAMERA\n    vec3 iCameraFwd     = vec3(sin(theta)*cos(phi),sin(phi),cos(theta)*cos(phi));\n    vec3 iCameraUp      = vec3(-sin(theta)*sin(phi),cos(phi),-cos(theta)*sin(phi));\n    vec3 iCameraRight   = normalize(cross(iCameraUp, iCameraFwd));\n    \n    vec3 iCameraPosition      = vec3(0,0,0);\n    \n    float m = 2.0;\n    \n    vec3 iViewDirection = iCameraFwd + ((fragCoord.x - iResolution.x/2.0) * iCameraRight + (fragCoord.y - iResolution.y/2.0) * iCameraUp) / iResolution.x * m;\n    iViewDirection      = normalize(iViewDirection);\n    \n    // Now we MARCH!\n    bool entered = false;\n    float firstEntry = 0.;\n    \n    float jumpDist = min((MAXDEPTH - MINDEPTH)/float(NSAMPLES)/abs(iViewDirection.g), MAXJUMP);\n    vec3 jumpVec = jumpDist * iViewDirection;\n    \n    float dist = MINDEPTH/abs(iViewDirection.g);\n    vec3 position = dist * iViewDirection + iCameraPosition;\n    \n    for (int n = 0; n < NSAMPLES; n++)\n    {\n        if (height(position) <= abs(position.g) && !entered)\n        {\n            firstEntry = dist;\n            entered = true;\n        }\n        dist += jumpDist;\n        position += jumpVec;\n    }\n    \n    jumpDist = BINSTART;\n    jumpVec  = iViewDirection;\n    \n    position = firstEntry * iViewDirection + iCameraPosition;\n    \n    for (int n = 0; n < NBINARY; n++)\n    {\n        bool inside1 = height(position - jumpVec * jumpDist / 2.) <= abs(position.g - jumpVec * jumpDist / 2.).g;\n        bool inside2 = height(position + jumpVec * jumpDist / 2.) <= abs(position.g + jumpVec * jumpDist / 2.).g;\n        \n        if (inside1 && inside2)\n        {\n            position -= jumpDist * jumpVec;\n            firstEntry -= jumpDist;\n        }\n        if (!inside1 && !inside2)\n        {\n            position += jumpDist * jumpVec;\n            firstEntry += jumpDist;\n        }\n        \n        jumpDist /= 2.;\n    }\n    \n    surface iCurrentSurface = GetSurface(position, iViewDirection);\n    \n    vec3 iSunDirection = normalize(vec3(1,0,1));\n    \n    fragColor  = vec4(0);\n    fragColor += iCurrentSurface.color * (0.4 + 0.6*max(0.,dot(iCurrentSurface.normal, iSunDirection)));\n    fragColor += iCurrentSurface.color * iCurrentSurface.color * exp((6./(1.-iCurrentSurface.smoothness))*(-1. - dot(reflect(iViewDirection, iCurrentSurface.normal), iSunDirection)))*(1.+dot(iCurrentSurface.normal, iSunDirection))*17.*iCurrentSurface.smoothness;\n    \n    fragColor = iCurrentSurface.on != vec4(0) ? (iCurrentSurface.on+vec4(0.2))*5. : fragColor;\n    \n    float t = exp(-firstEntry / 3.);\n    \n    fragColor = entered ? t*fragColor + (1.-t)*vec4(0.2 + 2.*exp(30.*(-1. - dot(iViewDirection, iSunDirection)))) : vec4(0.2 + 2.*exp(30.*(-1. - dot(iViewDirection, iSunDirection))));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 GB(vec2 fc)\n{\n    vec4 t = vec4(0);\n    for (float y = -3.*SIGMA; y <= 3.*SIGMA; y++)\n    {\n        float N = 1./sqrt(2.*PI*SIGMA*SIGMA);\n        t += R(fc+vec2(0.,y)) * N * exp(-0.5*(float(y*y)/(SIGMA*SIGMA)));\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = GB(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R(p) texture(iChannel0,(p)/iResolution.xy)\n#define PI 3.1415926\n#define SIGMA 28.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}