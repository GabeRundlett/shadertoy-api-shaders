{
    "Shader": {
        "info": {
            "date": "1482992606",
            "description": "Original : https://www.shadertoy.com/view/4lKGzm\nForked to test / optimize / tweak on my mobile.",
            "flags": 3,
            "hasliked": 0,
            "id": "llVSzh",
            "likes": 1,
            "name": "Webcam Sphere [tweaked]",
            "published": 3,
            "tags": [
                "webccam"
            ],
            "usePreview": 0,
            "username": "MobileForks01",
            "viewed": 1236
        },
        "renderpass": [
            {
                "code": "\nbool rayVsSphere(vec3 ro, vec3 rd, vec3 sp, float sr, out vec3 pos, out vec3 nor)\n{\n    vec3 diff = rd - ro;\n    vec3 diff2 = ro - sp;\n\n    float a = dot(diff, diff);\n    float b = dot(2.0 * diff, diff2);\n    float c = dot(sp, sp) + dot(ro, ro) + -2.0 * dot(sp, ro) - sr*sr;\n\n    float dis = b*b - 4.0 * a * c;\n\n    if (dis < 0.0)\n        return false;\n   \n    float t = (-b - sqrt(dis)) / 2.0 * a;\n\n    pos = ro + t * diff;\n    nor = normalize((pos - sp) / sr);\n\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Fire rays as a portion of an elipsoid\n    float pi = 3.14159265;\n    float aspectRatio = iResolution.x/iResolution.y;// iResolution.z\n    float hfov = pi / 2.0 * aspectRatio; //3.4906585039886591538473815369772f;\n    float vfov = pi / 2.0;\t\t\t\t //2.2689280275926284500007979990352f;\n    float hFactor = float(fragCoord.x) / float(iResolution.x);\n    float hAngle = hFactor * hfov - hfov / 2.0;\n    float vFactor = float(fragCoord.y) / float(iResolution.y);\n    float vAngle = vFactor * vfov - vfov / 2.0 - pi / 2.0;\n    float spX = cos(hAngle) * sin(vAngle);\n    float spZ = sin(hAngle) * sin(vAngle);\n    float spY = cos(vAngle);\n    vec3 rd = vec3(spZ, -spY, spX);\n    rd = normalize(rd);\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    \n    // TODO: Create sphere and reflect to webcam behind camera\n    // TODO: Create elipsoid to represent screen\n    // TODO: Create uncapped box + above to create \"monitor\"\n    \n    vec3 hitp;\n    vec3 hitn;\n    if(rayVsSphere(ro, rd, vec3(0.0,1.0*sin(iTime*2.0)*4.0,5.0), 2.0, hitp, hitn))\n    {\n        fragColor = vec4(vec3(1.0), 1.0);\n        vec3 nrd = reflect(rd, hitn);\n        vec3 pp = vec3(0.0,0.0,-1.0);\n        vec3 pn = vec3(0.0,0.0,1.0);\n        vec3 rayToPlane = normalize(pp - hitp);\n        float ndp = dot(pn, rayToPlane);\n\t\tfloat t = dot(pp, rayToPlane) / ndp;\n        //nrd = (nrd + 1.0) / 2.0;\n        //fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n       \t#if 1\n\t\tif (ndp < 0.0)\n        {\n            float vo = -(dot(pn, hitp) + length(pp));\n           \tfloat t = vo/ndp;\n            if( t >= 0.0 )\n            {\n            \tvec3 pos = hitp + t * nrd;\n            \t// TODO: fix this\n        \t\tfragColor = texture(iChannel0, vec2((pos.x+25.0)/50.0,(pos.y+25.0)/50.0));\n            \t//fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n            }\n            else\n            \tfragColor = vec4(vec3(1.0),1.0);\n        }\n        else\n            fragColor = vec4(vec3(0.0),1.0);\n        #endif\n    }\n    else\n    {\n        if(rayVsSphere(ro, rd, vec3(sin(iTime*2.0)*4.0,0.0,5.0), 1.0, hitp, hitn))\n        {\n        fragColor = vec4(vec3(1.0), 1.0);\n        vec3 nrd = reflect(rd, hitn);\n        vec3 pp = vec3(0.0,0.0,-1.0);\n        vec3 pn = vec3(0.0,0.0,1.0);\n        vec3 rayToPlane = normalize(pp - hitp);\n        float ndp = dot(pn, rayToPlane);\n\t\tfloat t = dot(pp, rayToPlane) / ndp;\n        //nrd = (nrd + 1.0) / 2.0;\n        //fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n       \t#if 1\n\t\tif (ndp < 0.0)\n        {\n            float vo = -(dot(pn, hitp) + length(pp));\n           \tfloat t = vo/ndp;\n            if( t >= 0.0 )\n            {\n            \tvec3 pos = hitp + t * nrd;\n            \t// TODO: fix this\n        \t\tfragColor = texture(iChannel0, vec2((pos.x+25.0)/50.0,(pos.y+25.0)/50.0));\n            \t//fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n            }\n            else\n            \tfragColor = vec4(vec3(1.0),1.0);\n        }\n        else\n            fragColor = vec4(vec3(0.0),1.0);\n        #endif\n        }\n        else\n        {\n           fragColor = texture(iChannel1, rd);///vec4(vec3(rd.x, rd.y, rd.z),1.0);\n        }\n    }\n    \n    float hRangeAngle = hfov;//2.0*pi;\n    float hOffset = hRangeAngle/2.0;\n    \n    float vRangeAngle = vfov;//2.0*pi;\n    float vOffset = vRangeAngle/2.0;\n    \n    //fragColor = vec4(vec3((hAngle+hOffset)/hRangeAngle), 1.0);\n    //fragColor = vec4((hAngle+hOffset)/hRangeAngle, (vAngle+vOffset)/vRangeAngle, 0.0, 1.0);\n    //fragColor = vec4(aspectRatio);\n    //fragColor = vec4(fragCoord / iResolution.xy, 0.0, 1.0);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    // Fire rays as a portion of an elipsoid\n    float pi = 3.14159265;\n    float aspectRatio = iResolution.x/iResolution.y;// iResolution.z\n    float hfov = pi / 2.0 * aspectRatio; //3.4906585039886591538473815369772f;\n    float vfov = pi / 2.0;\t\t\t\t //2.2689280275926284500007979990352f;\n    float hFactor = float(fragCoord.x) / float(iResolution.x);\n    float hAngle = hFactor * hfov - hfov / 2.0;\n    float vFactor = float(fragCoord.y) / float(iResolution.y);\n    float vAngle = vFactor * vfov - vfov / 2.0 - pi / 2.0;\n    float spX = cos(hAngle) * sin(vAngle);\n    float spZ = sin(hAngle) * sin(vAngle);\n    float spY = cos(vAngle);\n    vec3 rd = fragRayDir;//vec3(spZ, -spY, spX);\n    rd = normalize(rd);\n    \n    vec3 ro = fragRayOri;///vec3(0.0, 0.0, 0.0);\n    \n    // TODO: Create sphere and reflect to webcam behind camera\n    // TODO: Create elipsoid to represent screen\n    // TODO: Create uncapped box + above to create \"monitor\"\n    \n    vec3 hitp;\n    vec3 hitn;\n    if(rayVsSphere(ro, rd, vec3(0.0,1.0*sin(iTime*2.0)*4.0,5.0), 2.0, hitp, hitn))\n    {\n        fragColor = vec4(vec3(1.0), 1.0);\n        vec3 nrd = reflect(rd, hitn);\n        vec3 pp = vec3(0.0,0.0,-1.0);\n        vec3 pn = vec3(0.0,0.0,1.0);\n        vec3 rayToPlane = normalize(pp - hitp);\n        float ndp = dot(pn, rayToPlane);\n\t\tfloat t = dot(pp, rayToPlane) / ndp;\n        //nrd = (nrd + 1.0) / 2.0;\n        //fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n       \t#if 1\n\t\tif (ndp < 0.0)\n        {\n            float vo = -(dot(pn, hitp) + length(pp));\n           \tfloat t = vo/ndp;\n            if( t >= 0.0 )\n            {\n            \tvec3 pos = hitp + t * nrd;\n            \t// TODO: fix this\n        \t\tfragColor = texture(iChannel0, vec2((pos.x+25.0)/50.0,(pos.y+25.0)/50.0));\n            \t//fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n            }\n            else\n            \tfragColor = vec4(vec3(1.0),1.0);\n        }\n        else\n            fragColor = vec4(vec3(0.0),1.0);\n        #endif\n    }\n    else\n    {\n        if(rayVsSphere(ro, rd, vec3(sin(iTime*2.0)*4.0,0.0,5.0), 1.0, hitp, hitn))\n        {\n        fragColor = vec4(vec3(1.0), 1.0);\n        vec3 nrd = reflect(rd, hitn);\n        vec3 pp = vec3(0.0,0.0,-1.0);\n        vec3 pn = vec3(0.0,0.0,1.0);\n        vec3 rayToPlane = normalize(pp - hitp);\n        float ndp = dot(pn, rayToPlane);\n\t\tfloat t = dot(pp, rayToPlane) / ndp;\n        //nrd = (nrd + 1.0) / 2.0;\n        //fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n       \t#if 1\n\t\tif (ndp < 0.0)\n        {\n            float vo = -(dot(pn, hitp) + length(pp));\n           \tfloat t = vo/ndp;\n            if( t >= 0.0 )\n            {\n            \tvec3 pos = hitp + t * nrd;\n            \t// TODO: fix this\n        \t\tfragColor = texture(iChannel0, vec2((pos.x+25.0)/50.0,(pos.y+25.0)/50.0));\n            \t//fragColor = vec4(nrd.x,nrd.y,nrd.z,1.0);\n            }\n            else\n            \tfragColor = vec4(vec3(1.0),1.0);\n        }\n        else\n            fragColor = vec4(vec3(0.0),1.0);\n        #endif\n        }\n        else\n        {\n            fragColor = texture(iChannel1, rd);///vec4(vec3(rd.x, rd.y, rd.z),1.0);\n        }\n    }\n    \n    float hRangeAngle = hfov;//2.0*pi;\n    float hOffset = hRangeAngle/2.0;\n    \n    float vRangeAngle = vfov;//2.0*pi;\n    float vOffset = vRangeAngle/2.0;\n    \n    //fragColor = vec4(vec3((hAngle+hOffset)/hRangeAngle), 1.0);\n    //fragColor = vec4((hAngle+hOffset)/hRangeAngle, (vAngle+vOffset)/vRangeAngle, 0.0, 1.0);\n    //fragColor = vec4(aspectRatio);\n    //fragColor = vec4(fragCoord / iResolution.xy, 0.0, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}