{
    "Shader": {
        "info": {
            "date": "1580898700",
            "description": "Whoosh",
            "flags": 0,
            "hasliked": 0,
            "id": "wttXDH",
            "likes": 1,
            "name": "Whoosh",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pi acos(-1.)\n\nfloat DirLineDst(vec2 A, vec2 B, vec2 C){\n    vec2 tmp = vec2(-(A - B).y, (A - B).x);\n    return dot(tmp, C - B) / length(tmp);\n}\n\nconst float r = 0.4;\nconst int k = 7;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n    // Output to screen\n    vec2 cntr = vec2(iResolution.x / iResolution.y / 2., 0.5);\n    float t = 0.2 + 0.1*sin(iTime) + 0.5;\n    //float t = iTime;\n    if (length(uv - cntr) < r){\n    \tfragColor = vec4(vec3(1),1.0);\n    } else {\n        fragColor = vec4(vec3(0),1.0);            \n    }\n    /*vec2 spec = vec2(r / 2., 0.) + vec2(r / 2., 0.) * rot(pi * t);\n    \n    for (int i = 0; i < k; i++){\n        vec3 col = vec3(1. - float(i) / float(k), float(i) / float(k), 0.0);\n        float dst1 = DirLineDst(cntr + vec2(r, 0.) * rot(2. * pi * float(i) / float(k)), cntr + spec * rot(2. * pi * float(i) / float(k)), uv);\n        float dst2 = DirLineDst(cntr + spec * rot(2. * pi * float(i) / float(k)), cntr + vec2(r, 0.) * rot(2. * pi / float(k) * (float(i) + 2. * t)), uv);\n        \n        if (dst1 > 0. && dst2 > 0. && length(cntr - uv) < r){\n            fragColor = vec4(col,1.0);\n           \treturn;\n        }        \n    }*/\n    vec2 spec = vec2(r / 2., 0.) * rot(pi * t / 2. - pi) + vec2(r / 2., 0.);\n    vec2 base = vec2(r, 0.);\n    float baseDst = length(spec - base);\n    for (int i = 0; i < k; i++){\n    \tvec3 col = vec3(1. - float(i) / float(k - 1), float(i) / float(k - 1), 0.0);\n        float dst1 = length(cntr + spec * rot(2. * pi / float(k) * float(i)) - uv);\n        //float dst2 = length(cntr + spec * rot(2. * pi / float(k) * float(i)) - base);\n        vec2 speccntr = vec2(r / sqrt(2.), 0.) * rot(2. * pi / float(k) * float(i + 1) - pi / 4.);\n        vec2 specpoint = vec2(r, 0.) * rot(2. * pi / float(k) * float(i) + sqrt(2. * t));\n        if (length(uv - cntr) < r  && dst1 > baseDst && length(specpoint - speccntr) > length(cntr + speccntr - uv)){\n            fragColor = vec4(col,1.0);\n        }\n    }\n    if (fragColor.g > 0.99){\n        vec3 col = vec3(1. - float(0.) / float(k), float(0.) / float(k), 0.0);\n        float dst1 = length(cntr + spec * rot(2. * pi / float(k) * float(0.)) - uv);\n        //float dst2 = length(cntr + spec * rot(2. * pi / float(k) * float(i)) - base);\n        vec2 speccntr = vec2(r / sqrt(2.), 0.) * rot(2. * pi / float(k) * float(1.) - pi / 4.);\n        vec2 specpoint = vec2(r, 0.) * rot(2. * pi / float(k) * float(0.) + sqrt(2. * t));\n        if (length(uv - cntr) < r  && dst1 > baseDst && length(specpoint - speccntr) > length(cntr + speccntr - uv)){\n            fragColor = vec4(col,1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}