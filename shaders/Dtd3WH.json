{
    "Shader": {
        "info": {
            "date": "1682359447",
            "description": "i think a little more interesting with rotate/zoom exploration -tmm\nMelting Chromatic Liquid Smoke Effect",
            "flags": 0,
            "hasliked": 0,
            "id": "Dtd3WH",
            "likes": 14,
            "name": "Abstract Liquid w/rotate/zoom",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 1,
            "username": "timmaffett",
            "viewed": 442
        },
        "renderpass": [
            {
                "code": "// Fork of \"Abstract Liquid\" by SentientCymatic. https://shadertoy.com/view/ctd3z4\n// 2023-04-24 18:02:54\n\nvec2 hash2( float n ){return fract(sin(vec2(n,n+1.0))*vec2(432.14159,528.14159));}\n\nconst vec2 randConst = vec2(432., 528.);\nconst float randMultiplier = 3.14159;\nfloat rand(const vec2 co) {\n    return fract(sin(co.x * randConst.x + co.y * randConst.y) * randMultiplier);}\n\nfloat custom_smoothstep(float edge0, float edge1, float x) {\n    float t = clamp((x - edge0) / (edge1 - edge0), 0.1, 1.0);\n    return t * t * (3.0 - 2.0 * t);}\n\nfloat noise(in vec2 x){\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    vec2 n = p + vec2(2.5, -2.5);\n    float a = mix(rand(n), rand(n + vec2(1.0, 0.0)), f.x);\n    float b = mix(rand(n + vec2(0.0, 1.0)), rand(n + vec2(1.0, 1.0)), f.x);\n    return mix(a, b, f.y);}\n\nvec2 turbulence(vec2 p, float t, float scale){\n    float sum = 0.1;\n    float freq = scale;\n    float smoothness;\n    vec2 noise_coord;\n    for (int i = 0; i < 5; i++){\n        smoothness = custom_smoothstep(0.0, 10.0, float(i));\n        noise_coord = vec2(p + t * 0.25) + vec2(cos(float(i) * 0.6), sin(float(i) * 0.6)) * smoothness;\n        sum += abs(noise(noise_coord)) / freq;\n        freq *= 0.25;}\n    return vec2(sum, sum) * 0.1;}\n\nmat2 mtx = mat2( 0.87,  0.50, -0.50,  0.87 );\n\nfloat fbm( vec2 p ){\n    float f = 0.03;\n    f += 0.980000*noise( p ); p = mtx*p*3.0;\n    f += 0.210000*noise( p ); p = mtx*p*2.0;\n    f += 0.070000*noise( p ); p = mtx*p*2.0;\n    f += 0.060000*noise( p ); p = mtx*p*2.0;\n    f += 0.030000*noise( p ); p = mtx*p*1.0;\n    f += 0.010000*noise( p );\n    p = mtx*p*2.0;\n    f += 0.004000*noise( p );\n    p = mtx*p*2.0;\n    f += 0.002000*noise( p );\n    return f/0.90000;}\n\nfloat pattern(in vec2 p, in float t, in vec2 uv, out vec2 q, out vec2 r, out vec2 g) {\n    float s = dot(uv + 0.5, uv + 0.5);\n    float iMelty = 50.0, iFlowing = 10.0;\n    float l = custom_smoothstep(0., iMelty, sin(t * iFlowing));\n    q = mix(vec2(fbm(p + vec2(t * 1. + sin(t), t * 0.2 + cos(t))),\n                 fbm(p + vec2(t * 0.5 + sin(t + 0.7), t * 0.3 + cos(t + 1.3)))),\n            vec2(fbm(p), fbm(p + vec2(10.49, 1.37))),\n            l);\n    r = mix(vec2(fbm(p + 3.14159 * q + vec2(t * 0.2 + sin(t * 0.5), t * 0.2 + cos(t * 0.7)) + vec2(1.73, 9.6)),\n                 fbm(p + 2. * q + vec2(t * 0.5 + sin(t * 0.3), t * 0.4 + cos(t * 0.9)) + vec2(8.5, 4.8))),\n            vec2(fbm(p + 5. * q + vec2(t) + vec2(33.33, 66.66)), fbm(p + 4. * q + vec2(t) + vec2(8.3, 2.8))),\n            l);\n    g = mix(vec2(fbm(p + 2. * r + vec2(t * 0.5 + sin(t * 0.2), t * 0.3 + cos(t * 0.8)) + vec2(2, 6)),\n                 fbm(p + 1.5 * r + vec2(t * 0.76 + sin(t * 0.4), t * 0.6 + cos(t * 0.6)) + vec2(5, 3))),\n            vec2(fbm(p + 2.5 * r + vec2(t * 5.0) + vec2(2, 6)), fbm(p + 2. * r + vec2(t * 11.0) + vec2(5, 3))),\n            l);\n    vec2 v = turbulence(p * 0.1, t * 0.1, 20.);\n    vec2 m = vec2(fbm(p * 0.5 + vec2(t * 0.9, t * 0.9) + v * 0.5),\n                  fbm(p * 0.5 + vec2(t * 0.9, t * 0.9) + v * 0.5));\n    return mix(fbm(p + 3. * g + vec2(-t * 0.7 + sin(t * 0.5), -t * 0.5 + cos(t * 0.3)) + v * 2. + m * 0.3),\n               fbm(p + 5. * g + vec2(-t * 7.) + v * 3.),\n               l);}\n\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0) : iMouse.xy/iResolution.xy;\n    uv.xy *= r2d(-(mouse.x)*pi*2.);\n    uv *= (1./(10.0*mouse.y));\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float iSmoke = 0.01;\n    float iSpeed = 0.25;\n    \n    // center for rotate and zoom\n    fragCoord -= iResolution.xy/2.0;\n    fragCoord = mouseRotZoom(fragCoord);\n\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    vec2 q, r, g;\n    float noise = pattern(fragCoord * vec2(iSmoke), iTime * iSpeed, uv, q, r, g);\n    vec3 col = mix(vec3(0.2, 0.4, 0.2), vec3(0.0, 0.25, 0.5), custom_smoothstep(0.1, 1.0, noise));\n    col = mix(col, vec3(0.4, 0.2, 0.2), dot(q, q) * 1.5);\n    col = mix(col, vec3(0.2, 0.4, 0.0), 0.25 * g.y * g.y);\n    col = mix(col, vec3(0.4, 0.2, 0.2), custom_smoothstep(0.2, 0.5, 1.0 * r.g * r.g));\n    col = mix(col, vec3(0.2, 0.4, 0.6), 0.5 * g.x);\n    float timeScale = .25;\n    float xDrift = sin(uv.x * 3.14159 + iTime * timeScale);\n    float yDrift = cos(uv.y * 3.14159 + iTime * timeScale);\n    vec3 drift = vec3(xDrift, yDrift, -xDrift - yDrift) * .1;\n    col += drift;\n    col = mix(col, vec3(1), custom_smoothstep(0., 1000., noise) * custom_smoothstep(0., 1000., noise));\n    col *= noise * 2.;\n    fragColor = vec4(col, 1.);}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}