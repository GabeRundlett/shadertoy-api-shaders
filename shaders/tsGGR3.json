{
    "Shader": {
        "info": {
            "date": "1589482976",
            "description": "traversing a 2 dimensional grid of voxels with a line. said line reflects on non-empty cells.\nuse mouse determine the starting position",
            "flags": 0,
            "hasliked": 0,
            "id": "tsGGR3",
            "likes": 7,
            "name": "2D voxel traversal",
            "published": 3,
            "tags": [
                "2dvoxeltraversaltraverse"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "float n21(vec2 n)\n{\n\treturn fract(sin(dot(n, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nmat2 rot(float a)\n{\n\treturn mat2(\n    \tcos(a), -sin(a),\n        sin(a), cos(a)\n    );\n}\n\nfloat grid(vec2 uv)\n{\n\treturn n21(uv) < .1 ? 1. : 0.;\n}\n\nfloat line(vec2 uv, vec2 lo, vec2 ld)\n{\n    uv -= lo;\n\tvec2 p = dot(uv, ld) / dot(ld, ld) * ld;\n    return length(p - uv);\n}\n\nfloat line_segment(vec2 uv, vec2 lo, vec2 ld)\n{\n\tuv -= lo;\n\tvec2 p = dot(uv, ld) / dot(ld, ld) * ld;\n    float l = clamp(length(p), 0., length(ld));\n    p = normalize(ld) * l;\n    return length(p - uv);\n}\n\nvec2 line_intersect_line(vec2 s1, vec2 v1, vec2 s2, vec2 v2)\n{\n    float b = (-s1.y - v1.y * ((s2.x - s1.x) / v1.x) + s2.y) / (v2.x / v1.x * v1.y - v2.y);\n    return s2 + v2 * b;\n}\n\nvoid cube_line(vec2 n, out vec2 o, out vec2 d)\n{\n\td = -n.yx;\n    o = clamp(n, vec2(0, 0), vec2(1, 1));\n}\n\nbool traverse_voxel(vec2 ro, vec2 rd, out vec2 id, out vec2 p, out vec2 n)\n{\n    const int len = 128;\n    //const int size = 16;\n    int x = int(floor(ro.x));\n    int y = int(floor(ro.y));\n    int stepX = int(sign(rd.x));\n    int stepY = int(sign(rd.y));\n    int cstepX = clamp(stepX, 0, 1);\n    int cstepY = clamp(stepY, 0, 1);\n    //int outX = size * stepX;\n    //int outY = size * stepY;\n    float tDeltaX = abs(rd.y);\n    float tDeltaY = abs(rd.x);\n    float tMaxX = tDeltaX - fract(ro.x * sign(rd.x)) * tDeltaX;\n    float tMaxY = tDeltaY - fract(ro.y * sign(rd.y)) * tDeltaY;\n    int status = -1; // unresolved\n    int i = 0;\n    \n    do {\n        if(tMaxX < tMaxY) {\n            tMaxX += tDeltaX;\n            x += stepX;\n            n = vec2(-stepX, 0);\n        } else {\n            tMaxY += tDeltaY;\n            y += stepY;\n            n = vec2(0, -stepY);\n        }\n        \n        if (grid(vec2(x, y)) == 1.) {\n            status = 0; // hit\n            id = vec2(x, y);\n        }\n        \n        //if (x == outX || y == outY) status = 1; // outside\n    } while(status == -1 && i++ < len);\n    \n    if (status == 0) {\n        vec2 lo, ld;\n        cube_line(n, lo, ld);\n        p = line_intersect_line(ro, rd, id + lo, ld);\n        \n        return true;\n    }\n    return false;\n}\n\nvoid bounce(vec2 uv, vec2 ro, vec2 rd, vec2 id, float scale, inout vec3 col)\n{\n    for (int i = 0; i < 8; i++) {\n        vec2 pid, p, n;\n        col.rg += traverse_voxel(ro, rd, pid, p, n) ? (id == pid ? 1. : 0.) : 0.;\n        col.b += smoothstep(scale / iResolution.y * 2., .0, line_segment(uv, ro, rd * length(p - ro)));\n        ro = p + n * .001;\n        rd = reflect(rd, n);\n    }\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord)\n{\n    float scale = 32.;\n    vec2 uv = frag_coord / iResolution.y * scale;\n    vec2 id = floor(uv);\n    vec3 col = vec3(0);\n    \n    vec2 ro = iMouse.xy / iResolution.y * scale + .001;\n    vec2 rd = rot(iTime * .1) * normalize(vec2(5, 1) + .001);\n    \n    /*\n    vec2 pid, p, n;\n    col.rg += traverse_voxel(ro, rd, pid, p, n) ? (id == pid ? 1. : 0.) : 0.;\n    col.r += smoothstep(.23, .2, length(uv - p));\n    vec2 co, cd;\n    cube_line(n, co, cd);\n    col.r += smoothstep(scale / iResolution.y * 2., .0, line(uv, pid + co, cd));\n    col.rg += smoothstep(scale / iResolution.y * 2., .0, line(uv, pid, n));\n    */\n    \n    col.g += grid(id) * .3;\n    col.bg += smoothstep(.23, .2, length(uv - ro));\n    bounce(uv, ro, rd, id, scale, col);\n\n    frag_color = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}