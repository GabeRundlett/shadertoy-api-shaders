{
    "Shader": {
        "info": {
            "date": "1593940436",
            "description": "Process Web Camera image as if it were polished metal surface in desert landscape.",
            "flags": 34,
            "hasliked": 0,
            "id": "ttSczW",
            "likes": 4,
            "name": "tinface",
            "published": 3,
            "tags": [
                "reflection",
                "camera",
                "metalsurface"
            ],
            "usePreview": 0,
            "username": "olli666",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "// Process Web Camera image as reflective metal surface. Written by Olli Parviainen\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n//\n// - Buffer B averages the web camera image to reduce camera noise. This is non-critical step.\n// - Buffer A calculates normal vector from the camera image lightness gradient.\n// - The mainImage() renders image as if the camera picture were a polished reflective surface\n\nvec3 VEC_LIGHT1 = normalize(vec3(0.5, -0.5, -1));\n\nconst vec4 COLOR_SKY1 = vec4(0.0,0.1,1.0,0);\nconst vec4 COLOR_SKY2 = vec4(0.6,0.7,1.0,0);\nconst vec4 COLOR_GROUND2 = vec4(0.6,0.4,0.0,0);\nconst vec4 COLOR_GROUND1 = vec4(0.9,0.7,0.5,0);\n\n// Render simple background of sky and dunes\nvec4 background(in vec2 coord)\n{    \n    // to-do: smoothen boundary layer between horizon and sky\n    float h = 0.5+0.05*cos(8.0*coord.x) + 0.04*cos(13.0*coord.x);\n    if (coord.y < h) {\n        // ground\n        float c = 0.5*(1.0+cos(10.0*coord.x)+cos(25.0*coord.y+15.0*coord.x))*cos(20.0*coord.y-1.0*cos(10.0*coord.x)) + 1.0;\n        return mix(COLOR_GROUND1, COLOR_GROUND2,c*(h-coord.y));\n    } else {\n        // sky\n        return mix(COLOR_SKY1, COLOR_SKY2, 3.0*(1.0-coord.y));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dx = vec2(1.0, 0)/iChannelResolution[0].xy;\n    vec2 dy = vec2(0, 1.0)/iChannelResolution[0].xy;\n\n    // channel0 has normal vector calculated from camera image.\n    // filter the normal vector by -FILTER..FILTER square to\n    // create smoother surface\n    vec4 pix = vec4(0);\n    const int FILTER = 3;\n    for (int i = -FILTER; i <= FILTER; i ++) {\n        vec2 fi = float(i) * dy;\n        for (int j = -FILTER; j <= FILTER; j ++) {\n            vec2 fj = float(j) * dx;\n            pix += texture(iChannel0, uv + fj + fi);\n        }\n    }\n    const float ISCALE = 1.0/float((2*FILTER+1)*(2*FILTER+1));\n    pix *= ISCALE;\n\n    // calculate reflection vector\n    vec3 camera = normalize(vec3(0,0,-1));\n    vec3 normal = pix.xyz;\n    vec3 vreflect = normalize(reflect(camera, normal));\n      \n\t// apply a spotlight beam highlight:\n    float l1 = smoothstep(0.8, 1.0, dot(vreflect, -VEC_LIGHT1));\n    fragColor = 0.3 *vec4(l1);\n\n    // apply some of original camera image lighting\n    float cameraLight = 0.5*(1.0*texture(iChannel2, uv).a + 1.0*pix.a);\n   \tfragColor += 0.4*vec4(cameraLight);\n    \n\t// reflect background image:\n   \tfragColor += 0.6*background(uv + 3.0 * vreflect.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Calculate \"normal vector\" for camera image based on lightness gradient.\n// Stores the normal vector into result .xyz and pixel brigtness into .a\n//\n// Written by Olli Parviainen\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n\n\nconst float THIRDTH = 1.0/3.0;\nconst vec3 vec3THIRDTH = vec3(THIRDTH);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 dx = vec2(1.0, 0)/iChannelResolution[0].xy;\n    vec2 dy = vec2(0, 1.0)/iChannelResolution[0].xy;\n\n    // calculate brigthness gradient\n    vec4 ax = (texture(iChannel0, uv+dx) - texture(iChannel0, uv-dx));\n    vec4 ay = (texture(iChannel0, uv+dy) - texture(iChannel0, uv-dy));\n    \n    vec3 gradx = vec3(1.0,   0, dot(ax.rgb, vec3THIRDTH));\n    vec3 grady = vec3(  0, 1.0, dot(ay.rgb, vec3THIRDTH));\n\n    vec4 a = texture(iChannel0, uv);\n    float brightness = dot(a.rgb, vec3THIRDTH);\n    \n    fragColor = vec4(normalize(cross(gradx, grady)), brightness);\n}\n                     ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Filter camera image to reduce noise. Written by Olli Parviainen\n// Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = mix(texture(iChannel1, uv), texture(iChannel0, uv), 0.2);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}