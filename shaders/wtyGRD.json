{
    "Shader": {
        "info": {
            "date": "1578385272",
            "description": "Ancient ceremony...",
            "flags": 0,
            "hasliked": 0,
            "id": "wtyGRD",
            "likes": 10,
            "name": "Snake Worship",
            "published": 3,
            "tags": [
                "fire",
                "light",
                "kinematics",
                "weave"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 414
        },
        "renderpass": [
            {
                "code": "// \"Snake Worship\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// (Mostly from \"Multisegment Floppy Tube\", \"Parthenon 2\" and \"Woven Basket\")\n\n#define AA  1   // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noiseff (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 hxHit;\nvec3 qHit, fCylPos;\nfloat tCur, dstFar, aMin, dLoop, aLoop, hLen, snbRad, fCylRad, fCylLen, flmFlkr;\nint idObj;\nconst int idBask = 1, idEye = 2, idSnk = 3, idAltr = 4, idLogs = 5, idCoal = 6;\nconst float pi = 3.14159, sqrt3 = 1.73205;\nconst float nSeg = 2.;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat SnakeDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 b, c;\n  float d, lb;\n  p.z = 0.6 * (abs (p.z) - 1.5);\n  p.xy = Rot2D (p.xy, 0.5 * pi - 0.5 * aLoop);\n  p.x -= - hLen + (dLoop + snbRad) * sin (0.5 * aLoop);\n  p.xy = Rot2D (p.xy, 0.5 * pi - aLoop);\n  q = p;\n  q.z = abs (q.z);\n  q -= vec3 (-0.5, -0.5, 0.5) * snbRad;\n  d = PrSphDf (q, 0.3 * snbRad);\n  DMIN (idEye);\n  d = dMin;\n  for (float k = 0.; k < nSeg; k ++) {\n    q = p;\n    q.xy = vec2 (- q.y, q.x);\n    q.xy = Rot2D (vec2 (q.x, q.y - dLoop), aLoop - 0.5 * pi);\n    b = vec2 (length (q.xy) - dLoop, q.z);\n    lb = length (b);\n    c = atan (vec2 (q.y, b.x), vec2 (- q.x, b.y)) * vec2 (4. * dLoop / pi, 1.) / pi;\n    d = max (lb - snbRad, dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi))));\n    if (k == 0.) d = min (d, PrSphDf (p, snbRad));\n    p.xy = Rot2D (q.xy, aLoop) + vec2 (dLoop, 0.);\n    p.x *= -1.;\n    if (k == nSeg - 1.) d = min (d, PrSphDf (p, snbRad));\n    if (d < dMin) hxHit = vec4 (c, lb, k);\n    DMIN (idSnk);\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 cs;\n  float dMin, d, szFac, rt, rc, h, s;\n  dMin = dstFar;\n  q = p;\n  q.y -= 0.5;\n  d = min (max (max (PrSphDf (q, 0.78), -0.01 + q.y), -0.3 - q.y),\n     PrCylDf ((q - vec3 (0., -0.7, 0.)).xzy, 0.15, 0.42));\n  DMINQ (idAltr);\n  qq = p;\n  qq.y -= fCylPos.y - fCylLen + 0.09;\n  d = PrCylDf (qq.xzy, fCylRad, 0.1);\n  if (d < 0.05) {\n    cs = sin (pi * vec2 (1.3, 0.8));\n    for (int j = 0; j < 5; j ++) {\n      qq.xz = Rot2Cs (qq.xz, cs);\n      q = qq;\n      q.x += 0.21;\n      d = PrRoundCylDf (q, 0.05 - 0.01 * sin (10. * pi * q.z), 0.02, 0.666);\n      DMIN (idLogs);\n    }\n    q = p;\n    q.y -= fCylPos.y - fCylLen - 0.02;\n    d = PrCylDf (q.xzy, fCylRad- 0.03, 0.01);\n    DMIN (idCoal);\n  } else dMin = min (dMin, d);\n  szFac = 0.2;\n  dMin /= szFac;\n  p /= szFac;\n  p.xz = Rot2D (abs (p.xz) - 12., -0.25 * pi);\n  qq = p;\n  rt = 0.1;\n  rc = 16. / pi;\n  h = 2.;\n  p.y -= -2.6 + h + 2. * rt;\n  p.xz *= 1.1 - 0.1 * (p.y + h) / h;\n  q = p;\n  q.xz = vec2 (rc * atan (q.z, - q.x), length (q.xz) - rc);\n  d = length (vec2 (abs (q.y) - h, q.z)) - 2. * rt;\n  q.xy = mod (q.xy + 0.5, 1.) - 0.5;\n  s = rt * cos (2. * pi * q.x);\n  d = min (d, max (min (length (vec2 ((mod ((q.x - q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z + s)),\n     length (vec2 ((mod ((q.x + q.y) + 0.5, 1.) - 0.5) / sqrt (2.), q.z - s))) - rt, abs (p.y) - h));\n  q = p;\n  q.y -= - h;\n  d = min (d, PrCylDf (q.xzy, rc, 2. * rt));\n  DMIN (idBask);\n  p = qq;\n  dMin = SnakeDf (p, dMin);\n  dMin *= szFac;\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dLight)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.1, h);\n    if (sh < 0.05 || d > dLight) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec2 CylHit (vec3 ro, vec3 rd, float cylRad, float cylHt)\n{\n  vec3 s;\n  float dCylIn, dCylOut, a, ai, b, w, ws, srdy;\n  dCylIn = dstFar;\n  dCylOut = dstFar;\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - cylRad * cylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      ai =  1. / a;\n      dCylIn = (- b - ws) * ai;\n      dCylOut = (- b + ws) * ai;\n    }\n    if (a > 0.) s = ro + dCylIn * rd;\n    else s.y = cylHt;\n    if (abs (s.y) > cylHt) {\n      if (srdy * ro.y < - cylHt) {\n        dCylIn = - (srdy * ro.y + cylHt) / abs (rd.y);\n        if (length (ro.xz + dCylIn * rd.xz) > cylRad) dCylIn = dstFar;\n      } else dCylIn = dstFar;\n    }\n    if (dCylIn < dstFar) {\n      if (a > 0.) s = ro + dCylOut * rd;\n      else s.y = cylHt;\n      if (abs (s.y) > cylHt && srdy * ro.y < cylHt)\n         dCylOut = (- srdy * ro.y + cylHt) / abs (rd.y);\n    }\n  }\n  return vec2 (dCylIn, dCylOut);\n}\n\nfloat FlmAmp (vec3 ro, vec3 rd, vec2 dst)\n{\n  vec3 p, q;\n  float fh, fr, aSum, a, d;\n  const float ns = 24.;\n  p = ro + dst.x * rd;\n  d = dst.x + fCylRad / ns;\n  aSum = 0.;\n  for (float j = 0.; j < ns; j ++) {\n    p = ro + d * rd;\n    fr = 1. - length (p.xz) / fCylRad;\n    fh = 0.5 * (1. - p.y / fCylLen);\n    q = 2. * p;\n    q.xz = Rot2D (q.xz, 0.3 * q.y);\n    a = 1.1 * Fbm3 (q - vec3 (0., 4. * tCur, 0.));\n    q = 5. * p;\n    q.xz = Rot2D (q.xz, -0.4 * q.y);\n    a += 0.9 * Fbm3 (q - vec3 (0., 5. * tCur, 0.));\n    aSum += max (0.3 * fr * fr * fh * (a * a - 0.6), 0.);\n    q = 73. * p;\n    aSum += step (0.85, Fbm3 (q - vec3 (0., 16. * tCur, 0.))) * smoothstep (0.1, 0.2, fr) *\n       smoothstep (0.3, 0.4, fh);\n    d += fCylRad / ns;\n    if (d > dst.y || aSum > 1.) break;\n  }\n  return clamp (aSum, 0., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec4 SnkCol ()\n{\n  vec4 col4;\n  vec2 p, ip;\n  float c, s, sx;\n  sx = sign (hxHit.x);\n  s = sign (2. * mod (hxHit.w, 2.) - 1.);\n  if (hxHit.z < 0.3 * snbRad && hxHit.x < 0.) {\n    col4 = vec4 (0., 0., 1., -1.);\n  } else if (s * sx < 0. && abs (hxHit.y - 0.5 * sx) < 0.03 ||\n     s * sx > 0. && abs (hxHit.y + 0.5 * sx) < 0.03) {\n    col4 = vec4 (1., 0., 0., 0.2);\n  } else {\n    p = 4. * hxHit.xy * vec2 (3. * sqrt3, 3.);\n    ip = PixToHex (p);\n    c = mod (dot (mod (2. * ip + ip.yx, 3.), vec2 (1., 2.)), 3.);\n    col4 = (c == 0.) ? vec4 (0.7, 0.6, 0., 0.2) : ((c == 1.) ? vec4 (0.8, 0.8, 0.4, 0.2) :\n       vec4 (0.4, 0.2, 0., 0.2));\n    col4 *= 0.3 + 0.7 * smoothstep (0.05, 0.07, HexEdgeDist (p - HexToPix (ip)));\n  }\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, foVec;\n  vec2 dstFlm;\n  float dstObj, dstGrnd, tCyc, sLoop, sh, fIntens, f, lDist, grDep;\n  int idObjF;\n  grDep = 0.48;\n  tCyc = 10.;\n  aMin = 0.5;\n  sLoop = aMin + 5. * pow (1. - SmoothBump (0.25, 0.75, 0.24, mod (tCur / tCyc, 1.)), 4.);\n  aLoop = 0.25 * pi / sLoop;\n  dLoop = 7. * 0.25 * pi * sLoop;\n  hLen = 2. * nSeg * dLoop * sin (aLoop);\n  snbRad = 0.25;\n  fCylPos = vec3 (0., 2.53, 0.);\n  fCylRad = 0.8;\n  fCylLen = 2.;\n  dstFlm = CylHit (ro - fCylPos, rd, fCylRad, fCylLen);\n  fIntens = (dstFlm.x < dstFar) ? FlmAmp (ro - fCylPos, rd, dstFlm) : 0.;\n  flmFlkr = Noiseff (tCur * 64.);\n  dstObj = ObjRay (ro, rd);\n  idObjF = idObj;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idBask) {\n      col4 = vec4 (0.4, 0.2, 0., 0.);\n      vn = VaryNf (16. * ro, vn, 2.);\n    } else if (idObj == idEye) {\n      col4 = vec4 (0., 1., 0., -1.);\n    } else if (idObj == idSnk) {\n      col4 = SnkCol ();\n    } else if (idObj == idAltr) {\n      col4 = vec4 (0.1, 0.4, 0.1, 0.2);\n      if (qHit.y < -0.4) col4 = mix (col4, vec4 (0.5, 0., 0., -1.),\n         SmoothBump (0.3, 0.6, 0.05, 0.5 + 0.5 * sin (2. * pi * (4. * qHit.y + 0.5 * tCur))));\n    } else if (idObj == idLogs || idObj == idCoal) {\n       f = clamp (1.2 * Fbm3 ((idObj == idLogs) ? 32. * vec3 (qHit.z,\n          atan (qHit.y, - qHit.x) / (2. * pi), 2. * length (qHit.xy) - 0.03 * tCur) :\n          vec3 (64. * qHit.xz, qHit.y + 0.5 * tCur).xzy) - 0.2, 0.1, 1.);\n       col4.rgb = (idObj == idLogs) ? vec3 (1., 0.7 * f, 0.3 * f * f) * (0.5 +\n          0.5 * max (- dot (rd, VaryNf (4. * qHit, vn, 1.)), 0.)) *\n          (1. - 0.5 * smoothstep (0.5, 0.666, abs (qHit.z))) :\n          f * vec3 (1., 0.2, 0.1) * (1. - 0.5 * pow (length (qHit.xz) / fCylRad, 4.));\n       col4 = vec4 (min (3. * f * col4.rgb * (1. + 0.1 * flmFlkr), 1.), -1.);\n    }\n    if (col4.a >= 0.) {\n      foVec = fCylPos - ro;\n      lDist = length (foVec);\n      foVec /= lDist;\n      sh = ObjSShadow (ro, foVec, lDist);\n      col = col4.rgb * (0.2 + sh * (0.3 + 0.7 * smoothstep (0., 0.05, - dot (rd, vn))) *\n         max (dot (vn, foVec), 0.) * (0.25 + 5. * (0.6 + 0.4 * flmFlkr) *\n         pow (lDist, -1.5) * vec3 (1., 0.3, 0.2)));\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n  } else if (rd.y < 0.) {\n    dstGrnd = - (ro.y + grDep) / rd.y;\n    ro += dstGrnd * rd;\n    foVec = fCylPos - ro;\n    lDist = length (foVec);\n    foVec /= lDist;\n    sh = ObjSShadow (ro, foVec, lDist);\n    col = sh * mix (vec3 (0.3, 0.4, 0.3), vec3 (0.4, 0.3, 0.3),\n       smoothstep (0.3, 0.7, Fbm2 (8. * ro.xz))) * pow (lDist, -1.5);\n  } else {\n    col = vec3 (0.03);\n  }\n  if (! (dstObj < dstFar && idObjF == idAltr || dstObj < dstFlm.x))\n     col = mix (col, mix (vec3 (1., 0.2, 0.2), vec3 (0.8, 0.6, 0.2),\n        smoothstep (0.5, 0.8, fIntens)), fIntens);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  el = -0.1 * pi;\n  az = 0.25 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n  } else {\n    az += 0.3 * pi * sin (0.02 * 2. * pi * tCur);\n    el -= 0.3 * (az - 0.25 * pi) * (az - 0.25 * pi);\n  }\n  zmFac = 4.;\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1., -16.);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  dstFar = 100.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}