{
    "Shader": {
        "info": {
            "date": "1669138776",
            "description": "An infinite procedural maze.",
            "flags": 8,
            "hasliked": 0,
            "id": "mdsSRS",
            "likes": 5,
            "name": "Infinite maze",
            "published": 3,
            "tags": [
                "maze",
                "dungeon",
                "labyrinth",
                "roguelike"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "float threshold = .5;\nint iters = 4;\n\n#define noise2D(p) float(((p).x * 68657387u ^ (p).y * 361524851u + (p).x) % 890129u) / 890128.\n\nbool labyrinth(uvec3 U,float n2){\n    //to do: make this work in 3 dimensions\n    //this would need a 3D noise function\n    uint c1 = 1u; //change this constant to get more interesting patterns\n    bvec3 b = bvec3(U & 1u+(U%c1));\n    return (b.x && b.y || b.x != b.y && n2 < threshold);\n}\n\nbool labyrinth(uvec2 U,float n2){\n    return labyrinth(uvec3(U,0.),n2);\n}\n\nvec4 maze1(uvec2 I){\n    vec4 O = vec4(1);\n    bool b = false;\n    float threshold = .5;\n    float n = 0.;\n    for(int i = 0; i++ < iters;I =\n    //Multiply and divide by prime numbers to get interesting patterns\n    I*2u/3u\n    //I*13u/17u\n    ){\n        //I += uint(i)+1u+uint(b);\n        \n        n =\n            noise2D(I)\n            //(noise2D(I)+n)/2.\n        ;\n        \n        //vertical tunnels\n        //I.y += uint(n*2.);\n        \n        //I.x += uint(n<1./16.);\n\n        b =\n            !b || labyrinth(I,n)\n            //!b || labyrinth(I,n) || labyrinth(I/2u,n)\n            //!b || labyrinth(I,n) || n > (8.*abs(.5-fract(iTime/16.))-.5);\n        ;\n        O -= float(n > .125)/float(iters)/4.;\n        \n        //some random-looking distortion\n        //{I = I+I.yx/(31u)-I.yx/(29u)-I.yx/(23u);}\n        //{I = I-I.yx/13u/11u/7u/5u+I.yx/11u/7u/5u-I.yx/7u/5u;}\n    }\n    if (b) O = 1.-O;\n    return O;\n}\n\nvec4 maze(uvec2 I){\n    return\n        maze1(I)\n        //max(maze1(I),maze1(I/2u))\n        //min(maze1(I),maze1(I/3u))\n    ;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    uvec2 I = uvec2( U/8.+ iTime*8.);\n    O = maze(I);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define fmod(x,y) floor(max(mod(floor(-(x))/2.,y),mod(floor(x),y)))\n\nvec2 mainSound(int samp, float time){\n  \n  time /= 8.;\n  float s1 =\n      5.,\n\n  s2 = 7.,\n\n  m1 =\n      fmod(time/s1,s2)\n  ,\n  t=\n      time*s2\n  ,\n  m4 =\n      fmod(t*s1,s2)\n  ,\n  m3 =\n      fmod((t+m4)*s1,s2);\n\n  float m2 =\n      1. + fmod(t,s1);\n  ;\n  \n  float a=\n      //32.*pow((1.-sqrt(fract(t*s1/4.)/(1.+m1)))/4.,2.)\n      log(1./4.+fract(-t*s1/4.)/4.)\n      //pow((1.-log(fract(t*s1/4.)/(1.+m1))),2.)\n  ;\n  \n  float nb = time*pow(2.,(m3+m2)/5.+9.5);\n\n  return\n      log(.1+abs(.5-vec2(fract(nb*.998),fract(nb))))*a\n  ;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}