{
    "Shader": {
        "info": {
            "date": "1555695551",
            "description": "Like SF",
            "flags": 0,
            "hasliked": 0,
            "id": "3tX3R4",
            "likes": 210,
            "name": "Hologram Boxes",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "hologram"
            ],
            "usePreview": 0,
            "username": "kaneta",
            "viewed": 8654
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n#define TAU (PI*2.0)\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\nfloat fbm(vec2 p) {\n    float r = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    for(int i = 0; i < 3; i++) {\n        r += amp * noise(freq*p);\n        amp *= 0.5;\n        freq *= 1.0/0.5;\n    }\n    return r;\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\nfloat remap(float val, float im, float ix, float om, float ox)\n{\n    return clamp(om + (val - im) * (ox - om) / (ix - im), om, ox);\n}\n\nfloat cio(float t) {\n\treturn t < 0.5\n\t? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\n\t: 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\n}\n\nfloat animHeight(vec2 p)\n{\n    float s = 0., hs = 1.;\n    float t = mod(iTime, 7.);\n    float tt = remap(t, 1., 2., 0., 1.);\n    s = mix(0., .3, cio(tt));\n\n    tt = remap(t, 3., 4., 0., 1.);\n    p *= rot(cio(tt) * 3.);\n\n    tt = remap(t, 4., 5., 0., 1.);\n    s = mix(s, 1.0, cio(tt));\n\n    tt = remap(t, 5., 6., 0., 1.);\n    p *= rot(-cio(tt) * 3.);\n\n    tt = remap(t, 6.5, 7., 0., 1.);\n    p *= rot(cio(tt) * 1.);\n    hs = mix(1., 0., cio(tt));\n\n    float pls = (sin(t * TAU - PI*.5) * .5 + .5) * step(mod(t, 2.), 1.) * .2;\n    return (fbm(p * s + t * .5) + pls) * hs;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0));\n}\n\nvec2 rep( in vec2 p, in vec2 c)\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat map(vec3 p)\n{\n    float bd = length(p.xz) - 5.0;\n    if (bd > 0.1) {\n    \treturn bd;\n    }\n    vec2 id = floor(p.xz / 0.2);\n    float height = animHeight(id * 0.2) * 0.5;\n    p.xz = rep(p.xz, vec2(0.2));\n    p.y -= height;\n    float box = sdBox(p, vec3(0.03, height, 0.03));\n    return max(box, bd) * .5;\n}\n\nvec2 trace(vec3 p, vec3 ray, float mx)\n{\n    float t = 0.0;\n    vec3 pos;\n    float dist;\n    for (int i = 0; i < 128; i++) {\n        pos = p + ray * t;\n        dist = map(pos);\n        if (dist < 0.002 || t > mx) {\n        \tbreak;\n        }\n        t += dist;\n    }\n    return vec2(t, dist);\n}\n\nvec3 getColor(vec3 p, vec3 ray)\n{\n    vec2 t = trace(p, ray, 100.0);\n    vec3 pos = p + ray * t.x;\n    if (t.x > 100.0) {\n        return vec3(0.0);\n    }\n    return max(vec3(0.2, 0.5, 0.8) * 7.0 * pow(pos.y, 4.0) * smoothstep(0.0, -1.0, length(pos.xz) - 5.0), vec3(0.0));\n}\n\nmat3 camera(vec3 ro, vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat luminance(vec3 col)\n{\n    return dot(vec3(0.3, 0.6, 0.1), col);\n}\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d ) + e), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float t = iTime * 0.1;\n    vec3 ro = vec3(cos(t) * 10.0, 5.5, sin(t) * 10.0);\n    vec3 ta = vec3(0.0, 1.0, 0.0);\n    mat3 c = camera(ro, ta, 0.0);\n    vec3 ray = c * normalize(vec3(p, 2.5));\n    vec3 col = getColor(ro, ray);\n    \n    vec3 lp = vec3(0.0, 6.0, 0.0), rd = ray;\n\n    float s = 7.5, vol = 0.0;\n    for(int i = 0; i < 60; i++) {\n        vec3 pos = ro + rd*s;\n        \n        vec3 v = -normalize(lp - pos);\n        \n    \tfloat tt = -(lp.y-2.) / v.y;\n        \n        vec3 ppos = lp + v * tt;\n\t    vol += pow(animHeight(ppos.xz), 3.0) * 0.05 * smoothstep(0.0, 1.5, pos.y) * smoothstep(-1.0, -4.0, length(ppos.xz) - 5.0);\n\n        s += 0.1;\n    }\n\n    col += 1.6*vec3(0.3*vol, 0.5*vol, vol);\n\n    col = acesFilm(col * 0.5);\n    col = pow(col, vec3(1.0/2.2));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}