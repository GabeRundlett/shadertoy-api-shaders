{
    "Shader": {
        "info": {
            "date": "1522077713",
            "description": "click anywahre for start the diffusion\nbetter in full screen",
            "flags": 32,
            "hasliked": 0,
            "id": "MdKyWW",
            "likes": 20,
            "name": "Reaction Diffusion 6",
            "published": 3,
            "tags": [
                "reaction",
                "diffusion6"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1361
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy / ZOOM;\n\n    float r = texture(iChannel0, uv).r;\n    //float v = texture(iChannel1, uv).r;\n    //float b = texture(iChannel2, uv).r;\n    //float a = texture(iChannel3, uv).r;\n    \n    fragColor = vec4(smoothstep(0.2,.8,vec4(r)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FEED_RATE r * 0.05\n#define KILL_RATE r * 0.15\n#define DIFF vec2(0.4,0.1)\n#define ZOOM 1.0\n\nfloat getChannel(sampler2D sam, vec2 uv)\n{\n    vec4 c = texture(sam,uv);\n    return max(min(c.r, c.g), min(max(c.r, c.g), c.b)); // https://github.com/Chlumsky/msdfgen\n}\n\nfloat pn(vec3 p) \n{\n   vec3 i = floor(p);\n   vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n   vec3 f = cos((p-i)*3.14159)*(-.5) + .5;\n   a = mix(sin(cos(a)*a), sin(cos(1.+a)*(1.+a)), f.x);\n   a.xy = mix(a.xz, a.yw, f.y);\n   return mix(a.x, a.y, f.z);\n}\n\nvec2 cell(vec2 fragCoord, vec2 pixel, vec2 dir, float scale, sampler2D sam, vec2 size)\n{\n    pixel *= dir;\n    \n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > size.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > size.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = size.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = size.y;\n    \n\tvec2 uv = (fragCoord + pixel) / size.xy;\n    return texture(sam, uv).rg * scale;\n}\n\nvec2 laplacian2D(vec2 fragCoord, vec2 dir, float a, float b, sampler2D sam, vec2 size) \n{\n    float st = 1.;\n    a /= 4.;\n    b /= 4.;\n    return \n        cell(fragCoord, vec2(0., -st), dir, a, sam, size) +\n        cell(fragCoord, vec2(0., st), dir, a, sam, size) +\n        cell(fragCoord, vec2(st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, 0.), dir, a, sam, size) +\n        cell(fragCoord, vec2(-st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(-st, st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, -st), dir, b, sam, size) +\n        cell(fragCoord, vec2(st, st), dir, b, sam, size) -\n        cell(fragCoord, vec2(0., 0.), dir, 1., sam, size);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n   \tif (iFrame < 120)\n    {\n        vec2 v = (fragCoord*2.-iResolution.xy)/iResolution.y;\n        fragColor = vec4(step(length(v+vec2(1.5,0)),0.01));\n    }\n    else if (iMouse.z > 0.0)\n\t{\n\t\tvec2 mo = iMouse.xy / iResolution.xy / ZOOM;\n    \tfragColor = texture(iChannel0, uv);\n        if (length(uv-mo) < 0.003)\n\t\t\tfragColor = mix(vec4(0,1,0,1), vec4(1,0,0,1), length(uv-mo)); \n\t}\n    else\n    {\n        float a = float(iFrame) * 0.1;\n        \n\t\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n        dir = vec2(1);\n        \n        float r = getChannel(iChannel1, uv);\n        \n        vec2 diffusionCoef = DIFF;\n        float feedCoef = FEED_RATE;\n        float killCoef = KILL_RATE;\n            \n        vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n        vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),ab*r);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n    float a = float(iFrame) * 0.1;\n        \n\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n    dir = vec2(1);\n        \n    float r = getChannel(iChannel1, uv);\n            \n    vec2 diffusionCoef = DIFF;\n    float feedCoef = FEED_RATE;\n    float killCoef = KILL_RATE;\n            \n    vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n    vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        \n    float reaction = ab.x * ab.y * ab.y;\n    vec2 diffusion = diffusionCoef * lp;\n    float feed = feedCoef * (1. - ab.x);\n    float kill = (feedCoef + killCoef) * ab.y;\n        \n    ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    fragColor = vec4(clamp(ab,0.,1e4),ab*r);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n    float a = float(iFrame) * 0.1;\n        \n\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n    dir = vec2(1);\n        \n    float r = getChannel(iChannel1, uv);\n            \n    vec2 diffusionCoef = DIFF;\n    float feedCoef = FEED_RATE;\n    float killCoef = KILL_RATE;\n            \n    vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n    vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        \n    float reaction = ab.x * ab.y * ab.y;\n    vec2 diffusion = diffusionCoef * lp;\n    float feed = feedCoef * (1. - ab.x);\n    float kill = (feedCoef + killCoef) * ab.y;\n        \n    ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    fragColor = vec4(clamp(ab,0.,1e4),ab*r);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n    float a = float(iFrame) * 0.1;\n        \n\tvec2 dir = normalize(vec2(a+cos(a),a-sin(a)));\n        \n    dir = vec2(1);\n        \n    float r = getChannel(iChannel1, uv);\n            \n    vec2 diffusionCoef = DIFF;\n    float feedCoef = FEED_RATE;\n    float killCoef = KILL_RATE;\n            \n    vec2 ab = cell(fragCoord, vec2(0,0), vec2(0,0), 1., iChannel0, iResolution.xy);\n    vec2 lp = laplacian2D(fragCoord, dir, .5, .5, iChannel0, iResolution.xy);\n        \n    float reaction = ab.x * ab.y * ab.y;\n    vec2 diffusion = diffusionCoef * lp;\n    float feed = feedCoef * (1. - ab.x);\n    float kill = (feedCoef + killCoef) * ab.y;\n        \n    ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    fragColor = vec4(clamp(ab,0.,1e4),ab*r);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}