{
    "Shader": {
        "info": {
            "date": "1720071662",
            "description": "original sources https://www.shadertoy.com/view/XlfGRj https://www.shadertoy.com/view/lXySDw",
            "flags": 1,
            "hasliked": 0,
            "id": "XXGXRG",
            "likes": 5,
            "name": "cosmos fly3",
            "published": 3,
            "tags": [
                "fractal",
                "cosmos",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "\n\n#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h + vec3(85,12,2)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h*h/3. + vec3(1,1,2)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n                p.xy *= rot(iTime*0.05);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec2 uv2=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n    float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n\n\tfloat time=iTime*speed+.25;\nvec4 O =fragColor;\nvec2 U =fragCoord;\n\t  O = vec4(0);\n    uv2.x+=0.2;\n    uv2.y+=0.2;\n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, R.y, R.y*2.))*80.;\n    \n    float sc,dotp,totdist=0., t=.7, tt=iTime/4.;\n    \n    for (float i=0.; i<200.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(0,0,-1.7);\n        \n           \n        p.yzw = ROT(p.xyz, normalize( vec3(sin(t/2.), sin(t), cos(t/3.) )  ),t);\n\n        sc = 1.1; \n        \n     p.xy*=ma;\n  \n        \n        vec4 w = p;\n        \n        for (float j=0.; j<7.; j++) {\n          \n            p = abs(p)*.77;\n          \n            dotp = max(1./dot(w,w),.1);\n            \n            sc *= dotp; \n            \n            p = p * dotp - .42 ;\n            \n            w = .75*p - .025 ;\n            \n     \n        }\n         \n        float dist = abs( length(p)-.025)/sc ;  //funky distance estimate\n        float stepsize2 = dist/15. ;     \n        totdist += stepsize2;              //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n             3e-3* H2(  atan( p.w, p.z )) + \n             + mix( vec3(1), H(M(sc)),.95) *.03*  exp(-i*i*stepsize2*stepsize2*8e3);\n    }\n    \n    c = 1. - exp(-c*c);\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\tdir+=c;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor*=vec4(c,1.);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,1.0,1.55), 1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}