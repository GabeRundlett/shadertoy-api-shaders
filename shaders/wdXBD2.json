{
    "Shader": {
        "info": {
            "date": "1589098187",
            "description": "various objects that can be made by applying a handful of operations to a 4 dimensional vector before passing it into a 4 dimensional cube.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdXBD2",
            "likes": 12,
            "name": "4 Dimensional Modelling",
            "published": 3,
            "tags": [
                "4d"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 511
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nint INSTRUCTIONS;\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\n//this is a multiplication by the quaternion (.5, .5, .5, .5)\n//somehow this results in a good rotation\nvec4 rot4d(vec4 b) {\n    return vec4(dot(b,vec4(1)), b.yzw + b.zwy - b.wyz - b.xxx)*0.5;\n}\n\nfloat super(vec4 p) {\n    return sqrt(length(p*p));\n}\n\nfloat box(vec4 p, vec4 d) {\n    vec4 q = abs(p)-d;\n    return super(max(q,0.))+min(0.,max(max(q.x,q.w),max(q.y,q.z)));\n}\n\nvec4 smin(vec4 a, vec4 b, float k) {\n    vec4 h = max(vec4(0),-abs(a-b)+k)/k;\n    return min(a,b)-h*h*h*k/6.;\n}\n\nfloat scene(vec3 p) {\n    int inst = INSTRUCTIONS;\n    int off = inst % 3; inst /= 3;\n    vec4 pp = vec4(p,vec3(1.,0.5,0.)[off]);\n    for (int i = 0; i < 6; i++) {\n    \tint op = inst % 3; inst /= 2;\n        if (op == 0) pp = sqrt(pp*pp+0.001); //smooth abs\n        if (op == 1) pp = rot4d(pp); //fixed 4d rotation\n        if (op == 2) pp.x -= 0.25; //offset\n    }\n    pp = smin(pp,rot4d(pp),0.1);\n    float b1 = box(pp,vec4(1.))-0.1;\n    return b1;\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\nfloat bayer(vec2 uv) {\n    return texelFetch(iChannel0,ivec2(uv)%8,0).x/128.;\n}\n\nint hash(int x) {\n    x += 45758;\n    for (int i = 0; i < 16; i++) {\n    \tx ^= x << 13;\n\t\tx ^= x >> 7;\n\t\tx ^= x << 17;\n    }\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    INSTRUCTIONS = hash(int(iTime));\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.2,uv));\n    vec3 samplepos = erot(vec3(-10,0,0), vec3(0,0,1), iTime*.2);\n    float radius = 10.-scene(samplepos);\n    vec3 init = vec3(-radius-4.,0,0);\n    \n    float yrot = 0.5;\n    float zrot = iTime*.2;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 250 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>50.) break;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    float ss = smoothstep(-.1,.1,scene(p+vec3(.1)));\n    float ao = smoothstep(-.1,.1,scene(p+n*.1));\n    float diff = mix(length(sin(n*3.5)*0.5+0.5)/sqrt(3.),ss,.3)*ao*1.5;\n    float spec = length(sin(r*3.)*0.5+0.5)/sqrt(3.);\n    float frens = 1.-pow(dot(cam,n),2.)*0.98;\n    vec3 col = mix(srgb(0.05,0.01,0.),srgb(0.45,0.6,0.8), diff) + pow(spec,5.)*frens;\n    vec3 bg = vec3(smoothstep(1.5,0.,length(uv))*.1);\n    fragColor.xyz = (hit ? col : bg) + bayer(fragCoord);\n    fragColor.xyz = sqrt(fragColor.xyz);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}