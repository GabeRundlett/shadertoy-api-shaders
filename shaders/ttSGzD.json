{
    "Shader": {
        "info": {
            "date": "1561208267",
            "description": "A tunnel effect with walls made of moving square towers\nOriginal idea by hamneggs: [url]https://www.shadertoy.com/view/wt23z1[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ttSGzD",
            "likes": 16,
            "name": "box wall tunnel",
            "published": 3,
            "tags": [
                "3d",
                "voxels",
                "cubes",
                "shadows",
                "mengersponge"
            ],
            "usePreview": 1,
            "username": "abje",
            "viewed": 1020
        },
        "renderpass": [
            {
                "code": "#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n\n#define FAR 100.0\n\n#define ID_MENGER 0\n#define ID_TUNNEL 1\n\nfloat smoothSquare(in float x) { return smoothstep(.3, .7, pow(sin(x),2.)); }\n\n\nfloat rand( in vec2 co )\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 path(float d)\n{\n    return vec3(cos(d*0.3)*2.0,sin(d*0.3)*2.0,d);\n}\n\nfloat wave(float a)\n{\n    \n    float b = min(mod(-iTime*2.0+a*0.1,10.0),3.14);\n    \n    return max(sin(b),0.0)*2.0;\n}\n\nvec4 trace(vec3 ro, vec3 rd, float far)\n{\n    \n    \n    \n    float d = 0.0;\n    float d2 = 9999.0;\n    vec3 fp = floor(ro);\n    vec3 lp = ro-fp;\n    vec3 ird = 1.0/abs(rd);\n    vec3 srd = sign(rd);\n    vec3 n;\n    \n    vec3 lens = abs(step(0.0,rd)-lp)*ird;\n    \n    for (int i = 0; i < 100; i++)\n    {\n        \n        vec3 g = path(fp.z);\n        \n        vec3 h = g-fp;\n        \n        float j = wave(fp.z);\n        \n        //towers pointing in negative x,y,z direction (the ceiling and two walls)\n        vec2 a = vec2( g.x+4.0-j+(2.0-j)*0.8*smoothSquare(.25*iTime + 3.14*rand(fp.yz-0.1)),\n                       g.y+4.0-j+(2.0-j)*0.8*smoothSquare(.25*iTime + 3.14*rand(fp.xz-0.2)));\n        \n        //towers pointing in positive x,y,z direction (the floor and two walls)\n        vec2 b = vec2( g.x-4.0+j-(2.0-j)*0.8*smoothSquare(.25*iTime + 3.14*rand(fp.yz-0.4)),\n                       g.y-4.0+j-(2.0-j)*0.8*smoothSquare(.25*iTime + 3.14*rand(fp.xz-0.5)));\n        \n        vec2 c = (a-b)*0.5;\n        vec2 e = b+c;\n        \n        vec2 p = (ro.xy+rd.xy*d)-e;\n        \n        vec2 f = (c-srd.xy*p)*ird.xy*step(abs(p),vec2(c));\n        \n        vec2 mask2 = f.x < f.y ? vec2(1,0) : vec2(0,1);\n        \n        float d2 = dot(mask2,f);\n        float d3 = d;\n        \n        vec3 mask;\n        if (lens.x < min(lens.y,lens.z)) {\n        \tmask = vec3(1,0,0);\n        } else if (lens.y < lens.z) {\n            mask = vec3(0,1,0);\n        } else {\n            mask = vec3(0,0,1);\n        }\n        \n        d = dot(mask,lens);\n        \n        if (d > min(d2+d3, far)) {\n            d = d2+d3;\n            if (d2 > 0.0) n = vec3(mask2,0)*srd;\n            break;\n        }\n        \n        n = mask*srd;\n        \n        fp += n;\n        \n        lens += mask*ird;\n    }\n    \n    \n    return vec4(d, -n);\n}\n\nfloat sphere( in vec3 ro, in vec3 rd, float far)\n{\n\t\n\tfloat b = dot( ro, rd );\n\tfloat c = dot( ro, ro )-0.03;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return far;\n\treturn -b-sqrt( h );\n}\n\nfloat mid(vec3 p) {\n    p = max(p,p.yzx);\n    return min(min(p.x,p.y),p.z);\n}\n\n//box intersection from iq\n//https://www.shadertoy.com/view/ld23DV\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad, float far) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n\tfloat tN = max(max( t1.x, t1.y ), t1.z);\n\tfloat tF = min(min( t2.x, t2.y ), t2.z);\n\n\treturn vec2(max(tN,0.0), min(tF,far));\n}\n\nvec4 mengersponge(vec3 ro, vec3 rd, float size, float far) {\n    \n    vec3 ird = 1.0/abs(rd);\n    \n    vec2 d = iBox(ro, rd, vec3(size), far);\n    \n    vec3 c = vec3(0);\n    \n    for (int i = 0; i < 16; i++) {\n        if (d.x > d.y) return vec4(far,0,0,0);\n        vec3 p = ro+rd*d.x;\n        \n        float l = 0.0;\n        float s = size;\n        for (int j = 0; j < 4; j++) {\n            vec3 a = mod(p,s*2.0)-s;\n            a = s/1.5-a*sign(rd);\n            vec3 dists = a*ird*step(a,vec3(s*2.0/1.5));\n            \n            float b = mid(dists);\n            \n            if (b > l) {\n                l = b;\n                c = dists;\n            }\n            \n            s /= 3.0;\n        }\n        \n        if (l == 0.0) break;\n        \n        d.x += l;\n    }\n    \n    vec3 n;\n    if (c == vec3(0)) {\n        vec3 p = abs(ro+rd*d.x);\n        n = vec3(equal(p,vec3(max(max(p.x,p.y),p.z))));\n    } else {\n        n = vec3(equal(c,vec3(mid(c))));\n    }\n    \n    return vec4(d.x,-sign(rd)*n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = path(iTime*2.0);\n    vec3 rd = vec3(uv,1);\n    \n    if (length(iMouse.xy/iResolution.y) > 0.1)\n    {\n        rd.yz *= rot(-iMouse.y/iResolution.y*3.14+3.14*0.5);\n        rd.xz *= rot(-iMouse.x/iResolution.x*6.28+3.14);\n    }\n    else\n    {\n        vec3 lookatz = normalize(path(iTime*2.0+1.0)-ro);\n        vec3 lookatx = normalize(cross(vec3(0,1,0),lookatz));\n        vec3 lookaty = cross(lookatz,lookatx);\n        \n        rd = lookatx*rd.x+lookaty*rd.y+lookatz*rd.z;\n    }\n    \n    vec3 light = path(iTime*2.0+5.0);\n    vec3 menger = light+vec3(sin(iTime+0.8),cos(iTime*0.4),sin(iTime/3.14));\n    \n    vec4 l = mengersponge(ro-menger, rd, 1.0, FAR);\n    \n    int id = ID_MENGER;\n    float d = l.x;\n    vec3 n = l.yzw;\n    \n    l = trace(ro,rd, d);\n    \n    if (l.x < d)\n    {\n        id = ID_TUNNEL;\n        n = l.yzw;\n        d = l.x;\n    }\n    \n    vec3 p = ro+rd*d;\n    \n    vec3 lightn = p-light;\n    float lightd = length(lightn);\n    lightn /= lightd;\n    \n    if (id == ID_TUNNEL)\n    {\n        fragColor = vec4(l.yzw*0.2+sin(p)*0.3+0.5,1.0);\n    }\n    else if (id == ID_MENGER)\n    {\n        fragColor = vec4(0.8,0.2,0.4,1);\n    }\n    float diff = -dot(n,lightn);\n    \n    vec3 shadowro = p-lightn*0.001;\n    vec3 shadowrd = -lightn;\n    \n    float shadow = 0.0;\n    if (mengersponge(shadowro-menger,shadowrd, 1.0, lightd).x == lightd) {\n        shadow = trace(shadowro,shadowrd, lightd).x < lightd ? 0.0 : 1.0;\n    }\n    \n    diff = max(diff*shadow,0.05);\n    \n    fragColor *= diff;\n    \n    fragColor = sqrt(fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}