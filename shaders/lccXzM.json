{
    "Shader": {
        "info": {
            "date": "1713718286",
            "description": "neato doods",
            "flags": 32,
            "hasliked": 0,
            "id": "lccXzM",
            "likes": 13,
            "name": "galaxioooo",
            "published": 3,
            "tags": [
                "spiral",
                "galaxy",
                "ellipse"
            ],
            "usePreview": 1,
            "username": "acoo",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "// Heavily inspired by https://www.shadertoy.com/view/4dcyzX\n\n#define PI 3.14159265359\n\nmat2 rotate2d(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sphere(vec2 p, float r, float b)\n{\n    return smoothstep(r + b, r - b, length(p));\n}\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) \n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// https://iquilezles.org/articles/fbm\nfloat fbm( in vec2 p )\n{\n    float f = 0.0;\n    float s = 0.5;\n    for( int i=0; i<9; i++ )\n    {\n        float n = texture(iChannel1,p).x;\n        f += s*n;\n        p *= 2.01*mat2(4.0,-3.0,3.0,4.0)/5.0;\n        s *= 0.55;\n    }\n    return f;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\n    vec2 tuv = fragCoord.xy / iResolution.xy;\n    vec2 m = texture(iChannel2, tuv).xy;\n    \n    vec2 uv = 2.0 * (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    \n    vec3 color = vec3(0.0);\n    \n    float effect_radius = 0.15;\n    float effect_falloff = 0.1;\n    float noise = fbm(uv * 0.005 * (cos(iTime * 0.5 + 0.5)));\n    float m_col = sphere(uv - m, effect_radius * noise, effect_falloff * noise * 2.0);\n        \n    vec2 ellipseRatio = vec2(0.4, 0.3) * (1.0 - m_col);\n    \n    float a_t = (cos(iTime * 0.0075) * 0.5 + 0.5) + 0.2;\n    float angle = -PI / a_t;               \n    float vx_e = 0.05;       \n        \n    float length_scale = 7.0;\n    float iter_length = 0.075;\n    float t = length_scale / iter_length;\n\n    for (float l = iter_length; l < length_scale; l += iter_length) \n    {\n        float e_thickness = 0.35;\n        float e_time = iTime * (0.25 / l - vx_e);\n        \n        vec2 e_uv = rotate2d(angle + angle * l) * uv;\n        vec2 inv_e = 1.0 / ellipseRatio * e_uv;\n        float d = dot(inv_e, inv_e);\n\n        vec3 tex_color = (texture(iChannel0, rotate2d(e_time) * inv_e / l)).rgb;\n        \n        vec3 p = palette(l);\n        \n        float intensity = smoothstep(e_thickness, 0.0, abs(sqrt(d) - l));\n        vec3 contrib = tex_color * tex_color * p * p * l;\n        color += intensity * contrib / l;\n    }\n    \n    color = pow(color, vec3(0.4545));\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 compute_gravitation(in vec2 p, float size, float gravity_strength)\n{\n    vec2 acceleration = vec2(0.0);\n        \n    vec2 v = -p;\n    float d = length(v);\n\n    if(d > 0.0000001) \n        acceleration += (v / d) / pow(max(d, size * 1.0) * gravity_strength, 2.0);\n        \n    return acceleration;\n}\n\nvoid initialize(inout vec2 prev_position, inout vec2 current_position)\n{\n\tcurrent_position = vec2(-1.0);\n    prev_position = vec2(-1.0);\n}\n\nvec2 get_extent_normal(vec2 p, float a, float b)\n{\n    if(p.x > a)\n        return vec2(-1.0, 0.0);\n    \n    if(p.x < -a)\n        return vec2(1.0, 0.0);\n    \n    if(p.y > b)\n        return vec2(0.0, -1.0);\n    \n    if(p.y < -b)\n        return vec2(0.0, 1.0);\n        \n    return vec2(0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 previous_p = vec2(-1.0);\n    vec2 current_p = vec2(-1.0);\n    \n    if(iFrame <= 1 || iTime == 0.0)\n    {\n        initialize(previous_p, current_p);\n    }    \n    else\n    {\n        vec2 m = 2.0 * (iMouse.xy - iResolution.xy * 0.5) / iResolution.y;\n        vec4 last_buffer = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        if(dot(last_buffer, last_buffer) == 0.0)\n        {\n            current_p = m;\n        }\n        else\n        {\n            previous_p = last_buffer.zw;\n            current_p = iMouse.z > 0.0 ? m : last_buffer.xy;\n        }\n    }\n        \n    float radius = 1.0;\n    vec2 acceleration = compute_gravitation(current_p, radius, 200.0);\n    vec2 intertia = current_p - previous_p;\n    vec2 velocity = intertia + acceleration;\n    \n    previous_p = current_p;\n    \n        \n    float aspect = iResolution.x / iResolution.y;\n    float r_aspect = 1.0;\n\n    vec2 next = current_p + velocity;\n\n    if(abs(next.x) > aspect || abs(next.y) > r_aspect)\n    {\n        vec2 i = normalize(next - previous_p);\n        vec2 n = get_extent_normal(next, aspect, r_aspect);\n        vec2 reflect_dir = reflect(i, n);\n        velocity = reflect_dir * length(velocity) * 0.9;\n    }\n    \n    \n    float v_lim = 0.025;\n    velocity = clamp(velocity, -vec2(v_lim), vec2(v_lim));\n    current_p += velocity;\n    \n    fragColor = vec4(current_p, previous_p);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}