{
    "Shader": {
        "info": {
            "date": "1529527464",
            "description": "A base tool for games, etc:\nMouse paints (SPACE erase). \nA pacing timer propagates from screen borders to detect areas enclosed by paint (i.e. where pacing stop).\nProblem: #STILL duration threshold should be large for complex shapes.",
            "flags": 48,
            "hasliked": 0,
            "id": "MsGBRV",
            "likes": 1,
            "name": "hexa3 propagate/connect util",
            "published": 3,
            "tags": [
                "util",
                "short",
                "propagation",
                "closure"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 552
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/ldVfDw\n// detect enclosed areas\n\n// --- read map T.y and color cycle timer T.x\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    float d;\n    U = Hcoords(U/PIX,d);                              // hexa cell center and distance\n    O = T( U );                                        // cell content\n    O = O.y==1. ? vec4(1)                              // painted\n        : ( .5+.5*sin( O.x + vec4(0,23,21,0) ) ) * .4; // void + pace\n    O = mix( vec4(.5), O, smoothstep(0., 3./PIX, d) ); // hexa cells border\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- paint and propagate timer, same in medium\n\nfloat id = 1.;          // if you want to test mixing several tracks\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    float d; \n    bool s = int(U.y) % 2 > 0;\n    vec2 R0 = iResolution.xy,  \n         R = R0/PIX,        \n         M = iMouse.xy/PIX,\n         P = U -.5*vec2(s,0); \n    M = Hcoords(M,d);                         // hexa cell under Mouse\n    \n    if (iFrame==0) {                          // init \n        O -= O;\n        vec2 A = R0/2.-abs(U-R0/2.); O.x = -min(A.x,A.y);      // init bg pace.\n        if ( abs( length( P - R/2.) -R.x/4. ) < 1. && P.x < R.x*.72 ) O.y = 1.; // init drawing\n        return;\n    }\n    \n    O = T(U);\n    \n    if ( U == floor(M) )                      // on mouse: paint\n        O.y = id-keyClick(32);                 \n    \n    // --- detection of enclosed regions ( not painted + not pacing )\n    else if (U.x==0. || U.y==0. || U.x==R0.x-1. || U.y==R0.y-1. ) // borders pace\n        O.x = float(iFrame);\n        \n    else if ( O.y != id ){                    // propagate pacing in free areas\n        O.z = O.x;\n        for (int k =0; k<9; k++) \n          if ( s && k!=2 && k != 8 || !s && k != 0 && k != 6 ) {\n       // ( maybe compiles better if separating 2 loops s, !s ? )\n            vec4 T = T(U+vec2(k%3-1,k/3-1));  //   propagate max neighbor time\n              if ( T.y != id ) O.x =  max(O.x,T.x);\n          }\n        O.w = O.x==O.z ? O.w+1. : 0.;         // count duration of unchanged\n        if ( O.w > STILL ) O.x = O.y = id;    // longly unchanged: closed -> eaten\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PIX 16.   // pixel size (i.e. zoom )\n\n#define STILL 40. // number of frames to consider area is still (thus closed)\n\n#define SQR3S2 0.866\n    \n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n#define keyToggle(c) (texture(iChannel3,vec2((.5+float(c))/256.,0.75)).x > 0.)\n#define keyClick(c)   texture(iChannel3,vec2((.5+float(c))/256.,0.25)).x\n\n// --- return hexa cell center + dist to center\n\nvec2 Hcoords( vec2 U, out float d ) {\n    U.y /= SQR3S2;\n    float s = sign(mod(U.y,2.)-1.); \n    U.x -= .5*fract(U.y*s); \n\n    vec2 F = fract(U);                       // triangular barycentric coordinates\n    if (s<0.) F.x = 1.-F.x;\n    bool u = F.x+F.y > 1.;       \n    vec3 q = vec3(F, fract(1.-F.x-F.y));\n    if (u) q = 1.-q;\n    vec3   r = q - q.zxy;\n\n\tvec2 S;                                  // hexagonal center, d = dist to border\n    if      ( r.x>0. && r.y<0. ) S = vec2(!u,u), d = min(r.x,-r.y);\n    else if ( r.y>0. && r.z<0. ) S = vec2(u,!u), d = min(r.y,-r.z);\n    else                         S = vec2(u)   , d = min(r.z,-r.x);\n    if (s<0.) S.x = 1.-S.x;    \n   \n    return floor(U)+S;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}