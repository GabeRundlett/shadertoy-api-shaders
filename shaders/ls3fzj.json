{
    "Shader": {
        "info": {
            "date": "1525898190",
            "description": "rock heightfield. (WIP)\nreference: [url]https://www.youtube.com/watch?v=9fwwSzN_0NI[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ls3fzj",
            "likes": 12,
            "name": "rocks",
            "published": 3,
            "tags": [
                "voronoi",
                "perlin",
                "worley",
                "pattern",
                "cracks",
                "bark",
                "mz"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 991
        },
        "renderpass": [
            {
                "code": "#define MM 0\nvec2  CYCLE = vec2(0);             // pattern repeat scale ( in #cells )\n\nfloat RATIO = 1.,                  // rock length/width ratio\n      CELL = 4.,                   // number of cells along height\n      ROCK_radius = .6,            // rock size (%cell)\n      ROCK_radiusD = .2,           //     and spread aroud size\n      BEVEL = 1./4.,               // rock border\n      ROCK_depth = 3.,             // number of rock layers (of smaller size)\n      ROCK_noise_scale = 1.,       // fractal distortion of rock\n      ROCK_noise_amp = .37,\n      LACUNARITY = 4.;             // scale jump per level\n    \nint   ROCK_nb = 1,                 // number of rock per cell ( >1 means less even)\n      BLEND = 0;                   // rock combination: 0: add 1: max\nvec2  grad = vec2(.5,0);           // grad direction & strength\nfloat grad_randA = 2.;             // spread in amplitude ( amp * [1/A,A] )\n\n#define VARIANT 0                  // 1: enlarge tested region around cell\nfloat ofs = 0.; //.5;              // jitter centers in -ofs ... 1.+ofs\n\n\n// std int hash, inspired from https://www.shadertoy.com/view/XlXcW4\nvec3 hash3( uvec3 x ) \n{\n#   define scramble  x = ( (x>>8U) ^ x.yzx ) * 1103515245U // GLIB-C const\n    scramble; scramble; scramble; \n    return vec3(x) / float(0xffffffffU) + 1e-30; // <- eps to fix a windows/angle bug\n}\n#define hash3i(x) hash3(uvec3(ivec3(floor(x)))) // because of uint(-float) bug\n\n// === Voronoi =====================================================\n\n#define hash22(p)  fract( 18.5453 * sin( p * mat2(127.1,311.7,269.5,183.3)) )\n#define disp(p) ( -ofs + (1.+2.*ofs) * hash22(p) )\n\n\n// === pseudo Perlin noise =============================================\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nint MOD = 1;  // type of Perlin noise\n    \n// --- 2D\n#define hash21(p) fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123)\nfloat noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix(hash21(i+vec2(0,0)),hash21(i+vec2(1,0)),f.x),\n                  mix(hash21(i+vec2(0,1)),hash21(i+vec2(1,1)),f.x), f.y);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\nfloat fbm2(vec2 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 9; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise2(p);\n\n    return v;\n}\n#define noise22(p) vec2(noise2(p),noise2(p+17.7))\nvec2 fbm22(vec2 p) {\n    vec2 v = vec2(0);\n    float a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 5; i++, p*=2.,a/=2.) \n        p *= R,\n        v += a * noise22(p);\n\n    return v;\n}\n\n    \n// ======================================================\n\n// rock texturing user function. in: rotated CELL coords. out: [-1,1]\nfloat func(vec2 U) {\n    return 0.;                         // no modulation\n  //return .1*sin(6.28*5.*U.x);        // dummy texturing\n  //return texture(iChannel1, U.yx).x;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.y;\n    demo( floor(U.x-iTime-.2*sin(4.*U.y-3.*iTime)) ); // demo mode\n    U *= CELL;\n    U.x += iTime;                                     // for demo\n    vec2 U0 = U, id0=vec2(0); \n    O-=O;\n\tfloat s = .5, height, dir = 0., ICslope = 1.;\n    \n    for (float i=0.; i<ROCK_depth ; i++) {            // cascade of layers\n        vec2 V =  U / vec2(RATIO,1);                  // cell shape\n        height = 0.;\n        \n        vec2 u = V, iu = floor(u);\n        #if VARIANT\n        for( int k=0; k < 25; k++ ) {                 // loop on neighbord cells\n            vec2 p = iu + vec2(k%5-2,k/5-2);          // searching for rock\n        #else\n        for( int k=0; k < 9; k++ ) {\n            vec2 p = iu + vec2(k%3-1,k/3-1);\n        #endif\n            vec2 pc = CYCLE==vec2(0) ? p : mod(p,CYCLE);  // cyclicle version\n            for( int n=0; n<ROCK_nb; n++) {\n                vec2 //o = disp(p),\n                       o = hash3i(vec3(pc,n)).xy,\n                       r = p - u + o;\n                #if 0                                     // last level = peebles\n                if (i==ROCK_depth-1.) {\n                    O =  max(O,.4*sqrt(max(0.,1.-dot(r,r)*2.))); continue;\n                }\n                #endif\n                vec2 id = pc+o; //r+u;                    // rock location\n                vec3 H =  hash3i(vec3(id*1e4,1));\n                // noisify the rock shape\n                V = r + ROCK_noise_amp * fbm22(id+r/ROCK_noise_scale) * ROCK_noise_scale;\n                V *= rot(6.28*H.x);                      // random rotation\n                V = abs(V);\n                float h = clamp((ROCK_radius+ROCK_radiusD*(2.*H.y-1.)-max(V.x,V.y))/BEVEL, 0.,1.);\n                H = -1.+2.*hash3i(vec3(id*1e4,3));       // rand grad variation\n                vec2 g = grad * rot(3.14*H.x) * pow(grad_randA,H.y);\n                h *= ( .5 + dot(g,r));\n                if (i==0. && h>height) id0 = o, dir = 180.*H.x, ICslope = length(g);\n                if (BLEND == 0)  height += h ;\n                else             height = max(height, h);\n        }   }\n     // modulates rock with user defined function       \n     if (i==0.) height *= 1.+func(( (U+1e3*id0) *vec2(ICslope,1) )*rot(-radians(dir)) );\n     O += s * height;\n     U *= LACUNARITY; s /= LACUNARITY; CYCLE *= LACUNARITY;\n    }\n    if (BLEND == 0) O /= float((1+ROCK_nb)/2); // in ADD mode, renormalize\n\n#if !MM        \n    O = max(O, .4*texture(iChannel0, U0).r);   // for demo: peebles\n    O = vec4(1,.85,.6,0)*(.2+.8*O);            // for demo: fake colors\n    if (iMouse.z>0.) O-=O, O.rg = id0;         // click to see ids\n#else  \n // O-=O;\n    O.r = id0.x;                               // tile id\n // O.g = O.g;                                 // image(height)\n    O.b = dir;                                 // direction (degrees)\n#endif\n  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// autodemo touches some parameters\n\n#define demo(t) {                                    \\\n    vec3 h1 = hash3i(t*vec3( 1  , 7.2,-3.1 )),       \\\n         h2 = hash3i(t*vec3( 7.2,-3.1, 9.7 ));       \\\n       ROCK_nb = 1+int(3.*h1.x);                     \\\n    ROCK_depth = ceil(3.*h1.y);                      \\\n         BEVEL = .05+h1.z/2.;                        \\\nROCK_noise_amp = .37+.0*h2.x;                        \\\n         BLEND = int(2.*h2.y);                       \\\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}