{
    "Shader": {
        "info": {
            "date": "1541152520",
            "description": "Fractal-like extension of \"Fibonacci's Cones\" following idea in iq's \"Planet Fall\" (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "lttfW2",
            "likes": 3,
            "name": "Fibonacci's Fractal Flower",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "flower",
                "fibonacci"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 782
        },
        "renderpass": [
            {
                "code": "// \"Fibonacci's Fractal Flower\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nvec3 HueToRgb (float c);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashff (float p);\n\nvec3 ltDir;\nfloat dstFar, tCur, sclVar, qHue;\nvec2 sRot;\nint qLev;\nconst int nLev = 3;\nconst float pi = 3.14159, phi = 1.618034;\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, aMin, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n      aMin = a;\n    }\n  }\n  return vec4 (aMin, vfMin);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 f4;\n  vec3 pn;\n  float dMin, d, sTot, s, t;\n  dMin = PrSphDf (p, 2.1);\n  if (dMin < 0.05) {\n    p.xz = Rot2Cs (p.xz, sRot);\n    t = length (p);\n    pn = p / t;\n    f4 = SphFib (pn, 512.);\n    dMin = t - 1.1 + 0.1 * smoothstep (0.05, 0.15, length (pn - f4.yzw));\n    qLev = 0;\n    qHue = 0.1;\n    sTot = 1.;\n    for (int j = 0; j < nLev; j ++) {\n      if (j > 0) {\n        p.z -= 3.;\n        f4 = SphFib (normalize (p), 128.);\n      }\n      s = sclVar + 2. * Hashff (31. * f4.x);\n      p = s * vec3 (1.3, 1.3, 1.) * RotToDir (f4.yzw, vec3 (0., 0., 1.), p - f4.yzw);\n      sTot /= s;\n      d = sTot * PrCapsDf (p, 0.3, 3.);\n      if (d < dMin) {\n        dMin = d;\n        qLev = j + 1;\n        t = 0.5 * Hashff (41. * f4.x);\n        if (j == 0) qHue = 0.1 + t;\n        else qHue += (1. - (float (j) / float (nLev))) * t;\n      }\n    }\n    dMin *= 0.3;\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, s;\n  sRot = sin (0.1 * pi * (floor (0.2 * tCur) + smoothstep (0., 0.2, mod (0.2 * tCur, 1.))) +\n     vec2 (0.5 * pi, 0.));\n  sclVar = 38. - 29. * SmoothBump (0.18, 0.75, 0.15, mod (0.05 * tCur, 1.));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    s = float (qLev) / float (nLev);\n    col = HueToRgb (mod (qHue, 1.)) * (0.2 + 0.8 * s) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n      0.5 * s * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n  } else col = mix (vec3 (1., 1., 0.5), vec3 (0., 0., 0.3 * (0.7 + 0.3 * rd.y)),\n     smoothstep (0.0035, 0.004, length (SphFib (rd, 8192.).yzw - rd)));\n  return col;\n}\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  zmFac = 5.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n    zmFac += 15. * abs (mPtr.x);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -8.);\n  dstFar = 15.;\n  ltDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.7)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec3 HueToRgb (float c)\n{\n  return clamp (abs (fract (c + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 RotToDir (vec3 v1, vec3 v2, vec3 p)\n{\n  vec3 n;\n  float c;\n  n = normalize (cross (v1, v2));\n  c = dot (v1, v2);\n  return c * p + sqrt (1. - c * c) * cross (n, p) + (1. - c) * dot (n, p) * n;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}