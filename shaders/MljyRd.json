{
    "Shader": {
        "info": {
            "date": "1538796218",
            "description": "A Peano-like curve in 3d.\n\n(I wanted to make more out of it (there's some commented out unfinished stuff in the code, try commenting out the first line of sdf_particle) but never got around to doing it, so publishing as is.)",
            "flags": 0,
            "hasliked": 0,
            "id": "MljyRd",
            "likes": 23,
            "name": "Space-filling curve",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "hilbert",
                "spacefilling"
            ],
            "usePreview": 0,
            "username": "al13n",
            "viewed": 858
        },
        "renderpass": [
            {
                "code": "#define STEPS 100\n#define STOPDIST 1e-3\n#define FUDGE 1.\n#define ITERS 4\n#define PI 3.141592653589793\n\nvec3 color=vec3(1.,1.,1.);\nvec3 cam_pos;\nfloat total_len;\n\nvec3 peano_transform(vec3 p){\n    const float blockiness = ITERS>0 ? .8 : 1.;\n    const float gap=pow(2.,float(-ITERS))/(1.-pow(2.,float(-ITERS))+blockiness);\n    const float final_piece=2.*(pow(2.,float(-ITERS))-gap*(1.-pow(2.,float(-ITERS)))) + PI*.5*gap;\n    \n    float sublen=total_len=pow(8.,float(ITERS))*final_piece;\n    float s=1.;\n\tfloat add=0.;\n    float rev=1.;\n    float flip=1.;\n    for(int i=0;i<ITERS;++i){\n        sublen*=1./8.;\n        float a=(s+gap)*.5;\n        vec3 sp=sign(p);\n        if(sp==vec3(-1.,-1.,-1.)){p=vec3(+p.z+a,+p.y+a,+p.x+a); add-=rev*sublen*3.5; flip*=-1.; }\n        if(sp==vec3(+1.,-1.,-1.)){p=vec3(+p.z+a,+p.x-a,+p.y+a); add-=rev*sublen*2.5; }\n        if(sp==vec3(+1.,+1.,-1.)){p=vec3(+p.z+a,+p.x-a,-p.y+a); add-=rev*sublen*1.5; rev*=-1.; }\n        if(sp==vec3(-1.,+1.,-1.)){p=vec3(-p.y+a,-p.x-a,+p.z+a); add-=rev*sublen*0.5; flip*=-1.; }\n        if(sp==vec3(-1.,+1.,+1.)){p=vec3(-p.y+a,-p.x-a,-p.z+a); add+=rev*sublen*0.5; flip*=-1.; rev*=-1.; }\n        if(sp==vec3(+1.,+1.,+1.)){p=vec3(-p.z+a,+p.x-a,-p.y+a); add+=rev*sublen*1.5; }\n        if(sp==vec3(+1.,-1.,+1.)){p=vec3(-p.z+a,+p.x-a,+p.y+a); add+=rev*sublen*2.5; rev*=-1.; }\n        if(sp==vec3(-1.,-1.,+1.)){p=vec3(+p.y+a,-p.z+a,+p.x+a); add+=rev*sublen*3.5; rev*=-1.; }\n        s=(s-gap)*.5;\n    }\n    if(p.y>-gap && p.z<gap) p=vec3(p.x,length(p.yz-vec2(-gap,gap))-gap,(atan(p.y+gap,gap-p.z)-PI*.25)*gap);\n    else if(-p.y>p.z) p=vec3(p.x,-p.z,p.y+(1.-PI*.25)*gap);\n    else p.z+=(PI*.25-1.)*gap;\n    p.z=p.z*rev+add;\n    p.x*=flip;\n    return p;\n}\n\nfloat sdf_particle(vec3 p){\n    return length(p.xy)-.02;\n    float z=p.z*7.+iTime;\n    p.xy*=mat2(cos(z*1.3),sin(z*1.3),-sin(z*1.3),cos(z*1.3));\n    p.yz*=mat2(cos(z*1.7),sin(z*1.7),-sin(z*1.7),cos(z*1.7));\n    p.zx*=mat2(cos(z*2.1),sin(z*2.1),-sin(z*2.1),cos(z*2.1));\n    p=abs(p);\n    //return max(max(p.x,p.y),p.z)-.02;\n    return length(p)-.02;\n}\n\nfloat sdf_inner(vec3 p){\n    const float period=.05;\n    float z=p.z+iTime*.1;\n    p.z=mod(z,period)-.5*.05;\n    if(mod(floor(z/period),10.)==0.) color=vec3(.8,.2,.2)*4.;\n    else color=vec3(.2,.8,.2)*1.5;\n    return sdf_particle(p);\n    \n    const float blockiness = ITERS>0 ? .5 : 1.;\n    const float gap=pow(2.,float(-ITERS))/(1.-pow(2.,float(-ITERS))+blockiness);\n    const float final_piece=2.*(pow(2.,float(-ITERS))-gap*(1.-pow(2.,float(-ITERS)))) + PI*.5*gap;\n    //color=vec3(fract(p.z), fract(p.z*2.3), fract(p.z*1.7))*2.;\n \t\n    //float ang=sin(p.z+iTime*1.3)*sin(iTime*3.);\n    float ang=p.z*2.;\n    float thickness=pow(max(0.,sin(p.z*3.+iTime*3.)-.95)*20.,.4)*.03+.02;\n    //float thickness=step(.93,sin(p.z*3.+iTime*3.))*.03+.02;\n    //float thickness=.04;\n    p.xy*=mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n    p.xy=abs(p.xy);\n    //return length(p.xy)-thickness;\n    return max(p.x,p.y)-thickness;\n}\n\nfloat sdf_main(vec3 p){\n    vec3 ap=abs(p);\n    float d_bbox=-1.1+max(max(ap.x,ap.y),ap.z);\n    float d_cam=.2-distance(p,cam_pos);\n    float d_cuts=max(d_bbox,d_cam);\n\n    float d_curve=sdf_inner(peano_transform(p));\n    if(d_cuts>d_curve && abs(d_curve)<1e-2) color=vec3(3.);\n    return max(d_cuts,d_curve);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord.xy*2.-iResolution.xy)/iResolution.x;\n    vec2 mouse=(iMouse.xy*2.-iResolution.xy)/iResolution.x;\n    vec2 click=(iMouse.zw*2.-iResolution.xy)/iResolution.x;\n    \n    vec2 pan;\n    if(iMouse.z<=0.){\n        //pan=vec2(iTime/3., sin(iTime/2.)*.4); // inside view\n        pan=vec2(iTime/1., sin(iTime/2.)*.4); // outside view\n    }else{\n     \tpan=mouse-click;\n        pan.x*=6.;\n        pan.y*=1.5;\n    }\n\n    //vec3 pos0=vec3(sin(pan.x),pan.y,cos(pan.x))*.8; // inside view\n    vec3 pos0=vec3(sin(pan.x),pan.y,cos(pan.x))*3.; // outside view\n    cam_pos=pos0;\n    //vec3 dir=normalize(cross(-pos0,vec3(0.,1.,0.))); // inside view\n    vec3 dir=normalize(-pos0); // outside view\n    vec3 xdir=normalize(cross(vec3(0.,1.,0.),dir));\n    vec3 ydir=normalize(cross(xdir,dir));\n    dir+=uv.x*xdir+uv.y*ydir;\n    dir=normalize(dir);\n\n    vec3 pos=pos0;\n    for(int i=0;i<STEPS;++i){\n    \tfloat d=sdf_main(pos)*FUDGE;\n        pos+=dir*d;\n        if(abs(d)<STOPDIST){\n            fragColor=vec4(vec3(sqrt(float(i)/float(STEPS)))*color,1.);\n            return;\n        }\n        if(length(pos)>1e3){\n            fragColor=vec4(vec3(sqrt(float(i)/float(STEPS)))*vec3(1.,.5,.7),1.);\n            return;\n        }\n    }\n\tfragColor = vec4(.2,.5,.7, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}