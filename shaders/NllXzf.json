{
    "Shader": {
        "info": {
            "date": "1626206284",
            "description": "Create a julia fractal by reading from the same buffer we are writing to",
            "flags": 32,
            "hasliked": 0,
            "id": "NllXzf",
            "likes": 6,
            "name": "Video feedback julia",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "feedback"
            ],
            "usePreview": 0,
            "username": "TheJimJames40",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    vec2 s = 1.5 * ratio;\n    vec2 c2 = (texture(iChannel0, uv).xy*2.0 - 1.0)*s;\n    vec2 c3 = (iMouse.xy / iResolution.xy *2.0 - 1.0)*s;\n    vec2 c = (uv*2.0 - 1.0)*s;\n    \n    vec2 z = c;\n    vec2 z2;\n    \n    \n    // enable for bonus algorithm\n    #if 0\n    z = abs(z);\n    z2.x = z.x*z.x - z.y*z.y;\n    z2.y = z.x*z.y*2.0;\n    z2 += c3;\n    z = z2;\n    #endif\n    \n\n    z2.x = z.x*z.x - z.y*z.y;\n    z2.y = z.x*z.y*2.0;\n    z2 += c3;\n\n\n    \n    vec2 uv2 = (z2/s + 1.0)/2.0;\n    vec4 t = texture(iChannel0, uv2);\n    \n    fragColor = max(t*0.99, smoothstep(0.1, 0.0, dot(c, c))); // vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}