{
    "Shader": {
        "info": {
            "date": "1674827889",
            "description": "Most difficult part of a journey is the first step -- One day, someone",
            "flags": 8,
            "hasliked": 0,
            "id": "DlXSW7",
            "likes": 4,
            "name": "Kebabogauchiste - Sin(Banger)",
            "published": 3,
            "tags": [
                "banger"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "float rand(float co){\n    return fract(sin(dot(vec2(co,co), vec2(12.9898, 78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    float s = length(uv)-.4;\n    float tempo = iTime*135./60.;\n    s = smoothstep(sqrt(dFdx(s)*dFdx(s)+dFdy(s)*dFdy(s)),.0,abs(s)-.1-sin(tempo+atan(uv.x,uv.y)*(8.-floor(rand(floor(tempo))*7.*pow(fract(tempo),.1))))*.05);\n                  // ^--- Apparently it's more correct than fwidth \n                  // I'm expecting this code will invoke a\n                  // FabriceNeyret to explain why :D \n    vec3 col = vec3(1.)*s;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\n\n\nYou need to start with something.....\n\nGreets to @0b5vr, getting understanding of this madness to\nmaybe get something released in JS one day ? \nhttps://github.com/0b5vr/js-4k-test\n\nThe kick is mainly from 0b5vr framework.\n\n**/\nfloat rand(float co){\n    return fract(sin(dot(vec2(co,co), vec2(12.9898, 78.233))) * 43758.5453);\n}\nvec2 mainSound( int samp, float time )\n{\n   float tempo = time*135./60.;\n   float bpm = floor(tempo*4.);\n   float seq[4];\n   seq[0] = 660.;\n   seq[1] = 330.;\n   seq[2] = 660.*4.*sin(time*2.)*.5+1.;\n   seq[3] = 660.*1.5;\n   \n   vec2 dest = vec2(0.);\n // kick\n   \n    float t = fract(tempo);\n    float env = smoothstep( 0.95, 0.1, t);\n\n    dest += 0.5 * env * tanh(fract(cos(t*1.)*50.+t*100.)+ 1.5 * sin(\n      100.0 * t\n      - 45.0 * exp( -1. * t )\n      - 30.0 * exp( -500.0 * t )\n      \n      + sin(t)\n    ) )*2.;\n\n\n   \n   dest = max(dest,sin(t*seq[int(rand(bpm)*3.+2.)]));\n   dest +=fract(time*(rand(ceil(time))*50.+100.))*.5;\n    // A 440 Hz wave that attenuates quickly overt time\n    return dest;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}