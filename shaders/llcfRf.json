{
    "Shader": {
        "info": {
            "date": "1540444715",
            "description": "Intersection of a ray and a generic (oriented in any direction) capped cone. I got it down to a single square root and one division. Many rejections are actually sqrt/div free! Computes normals too, but naturally code simplifies even further if you don't.",
            "flags": 0,
            "hasliked": 0,
            "id": "llcfRf",
            "likes": 26,
            "name": "Cone - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raycast"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4578
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Intersection of a ray and a capped cone oriented in an arbitrary direction\n\n// List of ray-surface intersectors at https://www.shadertoy.com/playlist/l3dXRf\n//\n// and https://iquilezles.org/articles/intersectors\n\n\n// Other cone functions:\n//\n// Cone bbox:         https://www.shadertoy.com/view/WdjSRK\n// Cone distance:     https://www.shadertoy.com/view/tsSXzK\n// Cone intersection: https://www.shadertoy.com/view/llcfRf\n\n\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nvec4 iCappedCone( in vec3  ro, in vec3  rd, \n                  in vec3  pa, in vec3  pb, \n                  in float ra, in float rb )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n    vec3  ob = ro - pb;\n    \n    float m0 = dot(ba,ba);\n    float m1 = dot(oa,ba);\n    float m2 = dot(ob,ba); \n    float m3 = dot(rd,ba);\n\n    //caps\n         if( m1<0.0 ) { if( dot2(oa*m3-rd*m1)<(ra*ra*m3*m3) ) return vec4(-m1/m3,-ba*inversesqrt(m0)); }\n    else if( m2>0.0 ) { if( dot2(ob*m3-rd*m2)<(rb*rb*m3*m3) ) return vec4(-m2/m3, ba*inversesqrt(m0)); }\n    \n    // body\n    float m4 = dot(rd,oa);\n    float m5 = dot(oa,oa);\n    float rr = ra - rb;\n    float hy = m0 + rr*rr;\n    \n    float k2 = m0*m0    - m3*m3*hy;\n    float k1 = m0*m0*m4 - m1*m3*hy + m0*ra*(rr*m3*1.0        );\n    float k0 = m0*m0*m5 - m1*m1*hy + m0*ra*(rr*m1*2.0 - m0*ra);\n    \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return vec4(-1.0);\n\n    float t = (-k1-sqrt(h))/k2;\n\n    float y = m1 + t*m3;\n    if( y>0.0 && y<m0 ) \n    {\n        return vec4(t, normalize(m0*(m0*(oa+t*rd)+rr*ba*ra)-ba*hy*y));\n    }\n    \n    return vec4(-1.0);\n}\n\nvec4 iCappedConeVertical( in vec3  ro, in vec3 rd, in float he, in float ra, in float rb )\n{\n    vec3  ob = ro - vec3( 0.0, he,0.0);\n    \n    //caps\n         if( ro.y<0.0 ) { if( dot2(ro*rd.y-rd*ro.y)<(ra*ra*rd.y*rd.y) ) return vec4(-ro.y/rd.y,-vec3(0.0,1.0,0.0)); }\n    else if( ro.y>he  ) { if( dot2(ob*rd.y-rd*ob.y)<(rb*rb*rd.y*rd.y) ) return vec4(-ob.y/rd.y, vec3(0.0,1.0,0.0)); }\n    \n    // body\n    float m4 = dot(rd,ro);\n    float m5 = dot(ro,ro);\n    float rr = ra - rb;\n    float hy = he*he + rr*rr;\n    \n    float k2 = he*he    - rd.y*rd.y*hy;\n    float k1 = he*he*m4 - ro.y*rd.y*hy + ra*(rr*he*rd.y*1.0 );\n    float k0 = he*he*m5 - ro.y*ro.y*hy + ra*(rr*he*ro.y*2.0 - he*he*ra);\n    \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return vec4(-1.0);\n\n    float t = (-k1-sqrt(h))/k2;\n\n    float y = ro.y + t*rd.y;\n    if( y>0.0 && y<he ) \n    {\n        return vec4(t, normalize(\n        he*he*(ro+t*rd) + vec3(0.0,rr*he*ra - hy*y,0.0)\n        ));\n    }\n    \n    return vec4(-1.0);\n}\n\n#define AA 3\n\nvec3 pattern( in vec2 uv )\n{\n    vec3 col = vec3(0.6);\n    col += 0.4*smoothstep(-0.01,0.01,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        #if 1\n        vec3  pa = vec3(-0.1,-0.1,0.2);\n        vec3  pb = vec3( 0.4, 0.3,0.3);\n        float ra = 0.4;\n        float rb = 0.1;\n        #else\n        vec3  pa = 0.4*cos(iTime*vec3(1.0,1.3,0.8)+vec3(0.0,2.0,4.0));\n        vec3  pb = 0.4*cos(iTime*vec3(0.9,1.1,0.7)+vec3(1.0,3.0,6.0));\n        float ra = 0.2 + 0.1*sin(iTime*1.7+0.0);\n        float rb = 0.2 + 0.1*sin(iTime*1.8+2.0);\n        #endif\n        \n        // raytrace\n        vec4 tnor = iCappedCone( ro, rd, pa, pb, ra, rb );\n\n        float t = tnor.x;\n    \n        // shading/lighting\t\n        vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = tnor.yzw;\n            vec3 lig = normalize(vec3(0.7,0.6,0.3));\n            vec3 hal = normalize(-rd+lig);\n\t\t    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n\t\t    float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n            \n            vec3 w = normalize(pb-pa);\n            vec3 u = normalize(cross(w,vec3(0,0,1)));\n            vec3 v = normalize(cross(u,w) );\n            vec3 q = (pos-pa)*mat3(u,v,w);\n            col = pattern( vec2(16.0,64.0)*vec2(atan(q.y,q.x),q.z) );\n\n\t\t    col *= vec3(0.2,0.3,0.4)*amb + vec3(1.0,0.9,0.7)*dif;\n            \n            col += 0.4*pow(clamp(dot(hal,nor),0.0,1.0),12.0)*dif;\n\n        }\n\n        // gamma\n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}