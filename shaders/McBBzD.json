{
    "Shader": {
        "info": {
            "date": "1724901960",
            "description": "with heart, circle and star sdf and morphing between then Via Mouse\nCC0: Starry planes\n  Revisited the ye olde \"plane-marcher\".\n  A simple result that I think turned out pretty nice\n",
            "flags": 0,
            "hasliked": 0,
            "id": "McBBzD",
            "likes": 3,
            "name": "Fork Starry w/mouse SDF morphing",
            "published": 3,
            "tags": [
                "stars",
                "planes"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 80
        },
        "renderpass": [
            {
                "code": "// Fork of \"Fork Starry pla /w Circle\" by ShaderDizzle. https://shadertoy.com/view/lcBfRD\n// Fork of \"Starry planes\" by mrange. https://shadertoy.com/view/MfjyWK\n// 2024-08-26 22:05:50\n\n\n// CC0: Starry planes\n//  Revisited the ye olde \"plane-marcher\".\n//  A simple result that I think turned out pretty nice\n\n//All of these SDF merge functions derived from\n//  https://www.artstation.com/blogs/briz/28br/2d-sdf-combine-shapes-material-function-library-ue5\nfloat interpolate(float ShapeA, float ShapeB, float Alpha)\n{\n    return mix(ShapeA, ShapeB, Alpha); // was lerp\n}\nfloat merge(float ShapeA, float ShapeB)\n{\n    return min(ShapeA, ShapeB);\n}\nfloat intersect(float ShapeA, float ShapeB)\n{\n    return max(ShapeA, ShapeB);\n}\nfloat subtract(float Base, float Subtraction)\n{\n    return intersect(Base, -Subtraction);\n}\nfloat round_merge(float ShapeA, float ShapeB, float Radius)\n{\n    vec2 intersectionSpace = vec2(min(ShapeA - Radius,0.0), min(ShapeB - Radius,0.0));\n    //intersectionSpace = min(intersectionSpace, 0);\n    float insideDistance = -length(intersectionSpace);\n    float simpleUnion = merge(ShapeA, ShapeB);\n    float outsideDistance = max(simpleUnion, Radius);\n    return  outsideDistance + insideDistance;\n}\nfloat round_intersect(float ShapeA, float ShapeB, float Radius)\n{\n    vec2 intersectionSpace = vec2(max(ShapeA + Radius,0.0), max(ShapeB + Radius,0.0));\n    //intersectionSpace = max(intersectionSpace, 0);\n    float outsideDistance = length(intersectionSpace);\n    float simpleIntersection = intersect(ShapeA, ShapeB);\n    float insideDistance = min(simpleIntersection, -Radius);\n    return outsideDistance + insideDistance;\n}\nfloat round_subtract(float Base, float Subtraction, float Radius)\n{\n    return round_intersect(Base, -Subtraction, Radius);\n}\nfloat champfer_merge(float ShapeA, float ShapeB, float ChampferSize)\n{\n    const float SQRT_05 = 0.70710678118;\n    float simpleMerge = merge(ShapeA, ShapeB);\n    float champfer = (ShapeA + ShapeB) * SQRT_05;\n    champfer = champfer - ChampferSize;\n    return merge(simpleMerge, champfer);\n}\nfloat champfer_intersect(float ShapeA, float ShapeB, float ChampferSize)\n{\n    const float SQRT_05 = 0.70710678118;\n    float simpleIntersect = intersect(ShapeA, ShapeB);\n    float champfer = (ShapeA + ShapeB) * SQRT_05;\n    champfer = champfer + ChampferSize;\n    return intersect(simpleIntersect, champfer);\n}\nfloat champfer_subtract(float Base, float Subtraction, float ChampferSize)\n{\n    return champfer_intersect(Base, -Subtraction, ChampferSize);\n}\nfloat groove_border(float Base, float Groove, float Width, float Depth)\n{\n    float circleBorder = abs(Groove) - Width;\n    float grooveShape = subtract(circleBorder, Base + Depth);\n    return subtract(Base, grooveShape);\n}\nfloat round_intersection(float ShapeA, float ShapeB, float Radius)\n{\n    vec2 position = vec2(ShapeA, ShapeB);\n    float distanceFromBorderIntersection = length(position);\n    return distanceFromBorderIntersection - Radius;\n}\n\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\n// simple mouse rotate and zoom for shader\n#define pi 3.14159265359 \n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec2 mouseRotZoom(vec2 uv) {\n    // allow mouse zoom and rotate    \n//    vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(1.0,10.1) : iMouse.xy/iResolution.xy;\n//    uv.xy *= r2d(-(mouse.x*2.)*pi*2.);\n//    uv *= (1./(10.0*mouse.y));\n    return uv;\n}\n\nconst float\n tau       = 2.*pi\n, planeDist = 0.5 //.2\n, furthest  = 16.\n, fadeFrom  = 8.  //1.\n;\n\nconst vec2 \n  pathA_const = vec2(.10, .41)\n, pathB = vec2(1.0,sqrt(0.5))\n;\n\nvec2 pathA() {\n    return mouseRotZoom(pathA_const);\n}\n\nconst vec4 \n  U = vec4(0, 1, 2, 3)\n  ;\n  \n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6;\n  float a = 2.51;\n  float b = 0.03;\n  float c = 2.43;\n  float d = 0.59;\n  float e = 0.14;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);\n}\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    d *= sign( q.x*b.y + q.y*b.x - b.x*b.y );\n    \n\treturn d;\n}\n\n// sca is the sin/cos of the orientation\n// scb is the sin/cos of the aperture\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, in float rb )\n{\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n#define PI 3.1415926\nfloat sdHeart(in vec2 p, in float radius) {\n\tfloat offset = 3.0-2.0*sqrt(2.0);\n\tfloat extra = 0.05;\n\tvec2 center = vec2(0.0, offset+extra);\n    float r = 1.0-center.y;\n    \n    // Construct the heart in normalized coordinates where radius of inner circle is 1.0\n\tvec2 _p = (p/radius)*r+center;\n    \n    float br = sqrt(2.0)/2.0;\n    float d = sdRhombus( _p, vec2(1.0) );\n\tfloat dc1 = sdCircle( _p-vec2(0.5, 0.5), br );\n\tfloat dc2 = sdCircle( _p-vec2(-0.5, 0.5), br );\n\n/*\n\tif(dc1 < 0.0 && d < 0.0)\n        d = min(d, -sdArc(_p-vec2(0.5, 0.5), vec2(sin(3.0*PI/4.0), cos(3.0*PI/4.0)), vec2(sin(PI/2.0), cos(PI/2.0)), br, 0.0));\n    else\n        d = min(d, dc1);\n                      \n    if(dc2 < 0.0 && d < 0.0)\n        d = min(d, -sdArc(_p-vec2(-0.5, 0.5), vec2(sin(PI/4.0), cos(PI/4.0)), vec2(sin(PI/2.0), cos(PI/2.0)), br, 0.0));\n    else\n        d = min(d, dc2);\n*/\n\n    d = min(min(d,dc1),dc2);\n\tif(_p.y < 0.0) d += 1.5*abs(_p.x)*abs(_p.y)*abs(_p.y)*r*r\n        ; // pull the sides of the heart inward\n\n    // Fix scaling\n    return d*radius/r;\n}\n\nvec3 offset(float z) {\n  return vec3(pathB*sin(pathA_const*z), z);\n}\n\nvec3 doffset(float z) {\n  return vec3((pathA())*(pathB)*cos(pathA_const*z), 1.0);\n}\n\nvec3 ddoffset(float z) {\n  return vec3(-pathA_const*pathA()*(pathB)*sin(pathA_const*z), 0.0);\n}\n\nvec4 alphaBlend(vec4 back, vec4 front) {\n  // Based on: https://en.wikipedia.org/wiki/Alpha_compositing\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// Circle distance function\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions2d/\n//   Slightly tweaked to round the inner corners\nfloat star5(vec2 p, float r, float rf, float sm) {\n  p = -p;\n  const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n  const vec2 k2 = vec2(-k1.x,k1.y);\n  p.x = abs(p.x);\n  p -= 2.0*max(dot(k1,p),0.0)*k1;\n  p -= 2.0*max(dot(k2,p),0.0)*k2;\n  p.x = pabs(p.x, sm);\n  p.y -= r;\n  vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n  float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n  return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n\nvec3 palette(float n) {\n  return 0.5+0.5*sin(vec3(0.,1.,2.)+n);\n}\n\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, float pd, vec3 cp, vec3 off, float n) {\n\n  float aa = 3.*pd*distance(pp.xy, npp.xy);\n  vec4 col = vec4(0.);\n  vec2 p2 = pp.xy;\n  p2 -= offset(pp.z).xy;\n  vec2 doff   = ddoffset(pp.z).xz;\n  vec2 ddoff  = doffset(pp.z).xz;\n  float dd = dot(doff, ddoff);\n  p2 *= ROT(dd*pi*5.);\n\n  vec2 mouse = (iMouse.xy == vec2(0.)) ? vec2(0.5,0.5) : iMouse.xy/iResolution.xy;\n\n  float d0;\n  float circle_d0 = circle(p2, 0.35);//-0.02; // Using circle instead of star\n  float star_d0 = star5(p2, 0.45, 1.6,0.2)-0.02;\n  //float radius = 0.5;// + 0.1*sin(10.0*iTime);\n  float heart_d0 = sdHeart(p2, 0.4 );\n\n  vec2 fromCenter = mouse - 0.5;\n  float dist = length(fromCenter);\n  if(mouse.x<0.5){\n      if(mouse.y<0.5) {\n          d0 = champfer_merge(circle_d0, star_d0, dist ); //abs(mouse.x-0.5));\n      } else {\n          d0 = champfer_merge(circle_d0, heart_d0, dist ); //abs(mouse.x-0.5));\n      }\n  } else {\n      if(mouse.y<0.5) {\n          d0 = champfer_merge(star_d0, heart_d0, dist );//abs(mouse.x)*2.);\n      } else {\n          d0 = champfer_merge(star_d0, heart_d0, dist );//bs(mouse.x-0.5)*2.);\n      }\n  }\n\n  \n  \n  \n  float d1 = d0-0.01;\n  float d2 = length(p2);\n  const float colp = pi*100.;\n  float colaa = aa*200.;\n  \n  col.xyz = palette(0.5*n+2.*d2)*mix(0.5/(d2*d2), 1., smoothstep(-0.5+colaa, 0.5+colaa, sin(d2*colp)))/max(3.*d2*d2, 1E-1);\n  // white edge\n  col.xyz = mix(col.xyz, palette(0.5*(n-1.0)+2.*d2)\n                          /*^^^^COLORPLANE BEFORE  WHITE-->vec3(2., 0.0, 0.0)*/,\n                              smoothstep(aa, -aa, d1)); \n  col.w = smoothstep(aa, -aa, -d0);\n  return col;\n\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1./RESOLUTION.xy;\n  float rdd = 2.0-0.25;\n  \n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec4 acol = vec4(0.0);\n\n  vec3 aro = ro;\n  float apd = 0.0;\n\n  for (float i = 1.; i <= furthest; ++i) {\n    if ( acol.w > 0.95) {\n      break;\n    }\n    float pz = planeDist*nz + planeDist*i;\n\n    float lpd = (pz - aro.z)/rd.z;\n    float npd = (pz - aro.z)/nrd.z;\n    float cpd = (pz - aro.z)/ww.z;\n\n    {\n      vec3 pp = aro + rd*lpd;\n      vec3 npp= aro + nrd*npd;\n      vec3 cp = aro+ww*cpd;\n\n      apd += lpd;\n\n      vec3 off = offset(pp.z);\n\n      float dz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*furthest, planeDist*fadeFrom, dz);\n      float fadeOut = smoothstep(0., planeDist*.1, dz);\n      float fadeOutRI = smoothstep(0., planeDist*1.0, dz);\n\n      float ri = mix(1.0, 0.9, fadeOutRI*fadeIn);\n\n      vec4 pcol = plane(ro, rd, pp, npp, apd, cp, off, nz+i);\n\n      pcol.w *= fadeOut*fadeIn;\n      acol = alphaBlend(pcol, acol);\n      aro = pp;\n    }\n    \n  }\n\n  return acol.xyz*acol.w;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 r = RESOLUTION.xy, q = fragCoord/r, pp = -1.0+2.0*q, p = pp;\n  p.x *= r.x/r.y;\n\n  float tm  = planeDist*TIME;\n\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(U.xyx+ddro, ww));\n  vec3 vv = cross(ww, uu);\n  \n  vec3 col = color(ww, uu, vv, ro, p);\n  col = aces_approx(col);\n  col = sqrt(col);\n  fragColor = vec4(col, 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}