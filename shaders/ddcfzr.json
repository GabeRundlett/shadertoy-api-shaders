{
    "Shader": {
        "info": {
            "date": "1696797556",
            "description": "Inspired by https://github.com/andandandand/1d-continuous-cellular-automata\n\nresolution dependent, looks best at ~4k",
            "flags": 32,
            "hasliked": 0,
            "id": "ddcfzr",
            "likes": 0,
            "name": "weirdlife",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "Retr0id",
            "viewed": 34
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 draw = texture(iChannel0, uv);\n    //draw.r = pow(draw.b, 0.9);\n    //draw.b = pow(draw.b, 0.8);\n    //fragColor = vec4(pow(draw.rgb, vec3(2.8)),1.);\n    fragColor = vec4(pow(cos(fract(draw.rgb*1.0)*3.14159265358979*2.0+3.14159265358979*0.5)*0.5+0.5, vec3(2.2)),1.);\n    //float val = smoothstep(1.0, 0.0, abs(fract(draw.x*10.0-iTime*1.0-fragCoord.x*0.019)-0.5) * 10.0);\n    //float val = smoothstep(1.0, 0.0, abs(fract(draw.x*10.0-iTime*1.0)-0.5) * 10.0);\n    //fragColor = vec4(vec3(val), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.1415926535;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.5*1.618033988749;//+gaussian_rand(vec2(0.0,0.0))*0.1;\n    float sum = 0.0;\n    float divisor = 0.0;\n    float steps = 32.0;\n    float radius = 10.0;\n    // ensure symmetry\n    //fragCoord.y = fragCoord.y > iResolution.y / 2.0 ? iResolution.y - fragCoord.y: fragCoord.y;\n    for (float i=0.0; i<PI*2.0; i+=PI/steps) {\n        float weight = 1.0;//cos(i)+1.0;\n        sum += texture(iChannel0, (fragCoord.xy + vec2(sin(i)*radius, cos(i)*radius)) / iResolution.xy).x * weight;\n        divisor += weight;\n    }\n    float foo = sum/divisor;\n    float prev = texture(iChannel0, fragCoord.xy / iResolution.xy).x;\n    float interp = 1.0;\n    vec4 val = vec4(fract(foo*1.005)*interp+prev*(1.0-interp));\n    fragColor = iTime < 0.1 ? vec4(vec3(sin(fragCoord.x/50.0)*sin(fragCoord.y/60.0)+1.0),1.0) : vec4(val.rgb,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}