{
    "Shader": {
        "info": {
            "date": "1495694433",
            "description": "glorious raymarching artifacts",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlBDn",
            "likes": 33,
            "name": "how many sides?",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "nshelton",
            "viewed": 17791
        },
        "renderpass": [
            {
                "code": "\nfloat time = 0.1;\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat map(vec3 p)\n{\n\n    vec3 q = p;\n\n    vec3 c = vec3(0.2);\n    p.z = mod(p.z,c.z)-0.5*c.z;\n\n    \n    vec3 p_s;\n    \n    p = p * rotationMatrix(vec3(0.0, 0.0, 1.0), sin(floor(q.z * 10.0) * 10.0) * 4.0 + 0.1 * (time));\n    \n    float bars = 1000.0;\n    int sides = 9; // not really sides\n    float angle = 3.1415 * 2.0 / float(sides) + sin(iTime/10.0)+ 1.0;\n    \n    for ( int i = 0; i < sides; i ++)\n    {\n        \n        p_s = p * rotationMatrix(vec3(0.0, 0.0, 1.0), angle * float(i));\n        \n       \tp_s += vec3(\n            sin(30.0 * floor(q.z))* 0.5 + 1.0, \n            cos(iTime + sin(q.z* 9.0)), \n            0.0);\n        \n        vec3 boxdim = vec3(\n        \t0.05 + 0.05 * sin(q.z*5.0 + iTime* 2.0), \n            sin(q.z * 10.0) * 0.5  + 0.5, \n            0.01 + pow(sin(iTime), 0.5)\n        );\n     \t\n        \n        bars = min(bars, sdBox(p_s, boxdim));  \n    }\n\n        \n    \n    float result = bars;   \n    return result;\n}\n\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = time;\n   // ro.x -= sin(iTime) 2.0;\n}\n\n vec3 gradient(vec3 p, float t) {\n\t\t\tvec2 e = vec2(0., t);\n\n\t\t\treturn normalize( \n\t\t\t\tvec3(\n\t\t\t\t\tmap(p+e.yxx) - map(p-e.yxx),\n\t\t\t\t\tmap(p+e.xyx) - map(p-e.xyx),\n\t\t\t\t\tmap(p+e.xxy) - map(p-e.xxy)\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttime = iTime * 0.5;\n    vec2 _p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);\n    \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 40; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001) {\n\t\t\thit = true;\n            break;\n        }\n                   \n        float ratio = 0.2;\n\t\tdepth += d * ratio;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 40.0);\n\t\n    \n    \n    col = pow(col, vec3(\n        0.5,\n         0.1 + sin(iTime - p.z * 3.6)* 0.4 + 0.5,\n        0.1 + sin(iTime - p.z * 10.0)* 0.4 + 0.5));\n\n    \n    \n    fragColor = vec4(col, hit? length(p.xy) : 0.0 );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}