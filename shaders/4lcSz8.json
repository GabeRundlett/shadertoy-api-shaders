{
    "Shader": {
        "info": {
            "date": "1480769665",
            "description": "When one gets bored... ",
            "flags": 0,
            "hasliked": 0,
            "id": "4lcSz8",
            "likes": 1,
            "name": "some wavy noise",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "wave",
                "trig"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 644
        },
        "renderpass": [
            {
                "code": "// play with these to alter the pattern\nconst float SCALE = 11.;\nconst float DETAIL = 7.;\n\n// some colors made up in gimp\nconst vec3 ruby  = vec3 ( 84. / 255.,  31. / 255.,  20. / 255.);\nconst vec3 nude  = vec3 (147. / 255., 129. / 255., 114. / 255.);\nconst vec3 nylon = vec3 (204. / 255., 158. / 255.,  97. / 255.);\nconst vec3 pony  = vec3 ( 98. / 255., 98. / 255., 102. / 255.);\n\nfloat wave (vec2 p, float angle)\n{\n    vec2 dir = vec2 (cos (angle), sin(angle));\n    return cos (dot (p, dir));\n}\n\nfloat wrap (float value)\n{\n\treturn abs (mod (value, 2.) - 1.);\n}\n\n// map normalized scalar to some rgb-color\nvec3 gradient (float value)\n{\n    if (value < 0.25) {\n        return mix (ruby, nude, value / 0.25);\n    } else if (value >= 0.25 && value < 0.5) {\n        return mix (nude, nylon, (value - 0.25) / 0.25);\n    } else if (value >= 0.5 && value < 0.75) {\n        return mix (nylon, pony, (value - 0.5) / 0.25);\n    } else {\n        return mix (pony, ruby, (value - 0.75) / 0.25);\n    }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize, center and aspect-correct texture-space\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv *= vec2 (iResolution.x / iResolution.y, 1.0);\n\n    // \"scale\" the resulting pattern\n    vec2 p = uv * SCALE;\n    \n    float brightness = .0;\n    for (float i = 1.; i < DETAIL; i++) {\n        brightness += wave (p, iTime / i);\n    }\n\n    brightness = wrap (brightness);\n    fragColor = vec4 (gradient (brightness), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}