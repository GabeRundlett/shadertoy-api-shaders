{
    "Shader": {
        "info": {
            "date": "1598302070",
            "description": "Linear gradient background and 3 star layers, moving in parallax.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlBfz1",
            "likes": 16,
            "name": "Parallax Nightsky",
            "published": 3,
            "tags": [
                "parallax",
                "sky",
                "stars",
                "night"
            ],
            "usePreview": 0,
            "username": "hugoaboud",
            "viewed": 1397
        },
        "renderpass": [
            {
                "code": "/**\n\tParallax Stars\n\tshader by @hugoaboud\n\t\n\tLicense: GPL-3.0\n**/\n\n/**\n\tProperties\n**/\n\n// Background Gradient\nvec4 _TopColor = vec4(0.24,0.27,0.41,1);\nvec4 _BottomColor = vec4(0.07,0.11,0.21,1);\n\n// Star colors\nvec4 _Star1Color = vec4(1,0.94,0.72,0.7);\nvec4 _Star2Color = vec4(0.18,0.03,0.41,0.7);\nvec4 _Star3Color = vec4(0.63,0.50,0.81,0.7);\n\n// Star grid\nfloat _Grid = 40.0;\nfloat _Size = 0.15;\n\n// Parallax Speed\nvec2 _Speed = vec2(0, 3);\n\n/**\n\tUtilities\n**/\n\n// Generates a random 2D vector from another 2D vector\n// seed must be a large number\n// output range: ([0..1[,[0..1[)\nvec2 randVector(in vec2 vec, in float seed)\n{\n    return vec2(fract(sin(vec.x*999.9+vec.y)*seed),fract(sin(vec.y*999.9+vec.x)*seed));\n}\n\n/**\n\tStar shader\n**/\n\n// Draw star grid\nvoid drawStars(inout vec4 fragColor, in vec4 color, in vec2 uv, in float grid, in float size, in vec2 speed, in float seed)\n{\n    uv += iTime * speed;\n    \n    // Split UV into local grid\n    vec2 local = mod(uv,grid)/grid;\n    \n    // Random vector for each grid cell\n    vec2 randv = randVector(floor(uv/grid), seed)-0.5;\n    float len = length(randv);\n    \n    // If center + random vector lies inside cell\n    // Draw circle\n    if (len < 0.5) {\n        // Draw circle on local grid\n        float radius = 1.0-distance(local, vec2(0.5,0.5)+randv)/(size*(0.5-len));\n        if (radius > 0.0) fragColor += color*radius;\n    }\n}\n\n/**\n\tMain frag shader\n**/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Background\n    fragColor = mix(_TopColor, _BottomColor, fragCoord.y/iResolution.y);\n    \n    // Stars\n    drawStars(fragColor, _Star1Color, fragCoord, _Grid, _Size, _Speed, 123456.789);\n   \tdrawStars(fragColor, _Star2Color, fragCoord, _Grid*2.0/3.0, _Size, _Speed/1.2, 345678.912);\n    drawStars(fragColor, _Star3Color, fragCoord, _Grid/2.0, _Size*3.0/4.0, _Speed/1.6, 567891.234);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}