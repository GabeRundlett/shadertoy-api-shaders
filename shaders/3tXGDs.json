{
    "Shader": {
        "info": {
            "date": "1557995883",
            "description": "Somewhere, a rover has a restless night.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tXGDs",
            "likes": 9,
            "name": "Night Stroll",
            "published": 3,
            "tags": [
                "voronoi",
                "space",
                "moon",
                "night",
                "rover"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 533
        },
        "renderpass": [
            {
                "code": "#define HEIGHT 0.8\n#define SCALE 0.25\n#define FDIST 0.5\n#define GRADIENT_EPS 0.01\n#define ITERS 30\n#define TOL 0.01\n#define LEVELS 4\n#define CRATER_RADIUS 0.15\n#define CRATER_HEIGHT 35.\n#define CRATER_SCALE 0.05\n#define CRATER_LEVELS 2\n#define SPEED 2.\n\nvec2 noise2D(vec2 uv) {\n    vec2 k = vec2(2234.4, 18100.1);\n    return fract(k*sin(dot(k, uv)));\n}\n\nfloat noise1D(float t) {\n    return fract(14950.5*sin(1905.1*t));\n}\n\nfloat cubemix(float a, float b, float t) {\n    float c = t*t*(3.-2.*t);\n    return mix(a, b, c);\n}\n\nfloat voronoi(vec2 uv) {\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    int i;\n    int j;\n    float d = 2.;\n    for (i=-1;i<=1;i++) {\n        for (j=-1;j<=1;j++) {\n            d = min(d, length(fuv-vec2(i,j)-noise2D(iuv+vec2(i,j))));\n        }\n    }\n    \n    return d*d;\n}\n\nfloat voronoifract(vec2 uv) {\n    float d = 0.;\n    int i;\n    float fac = 1.;\n    for (i=0; i<LEVELS; i++) {\n        d += fac*voronoi(uv);\n        uv *= 4.;\n        fac *= 0.25;\n    }\n    return d;\n}\n\nfloat craters(vec2 uv) {\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 pos = noise2D(iuv)*(1.-2.*CRATER_RADIUS)+CRATER_RADIUS;\n    float d = length(pos-fuv);\n    d*=d;\n    return min(d, CRATER_RADIUS*CRATER_RADIUS)-CRATER_RADIUS*CRATER_RADIUS;\n}\n\nfloat cratersfract(vec2 uv) {\n    float d = 0.;\n    int i;\n    float fac = 1.;\n    for (i=0; i<CRATER_LEVELS; i++) {\n        d += fac*craters(uv);\n        uv *= 8.;\n        fac *= 0.125;\n    }\n    return d;\n}\n\nfloat map(vec3 pos) {\n    float h = pos.y;\n    h -= HEIGHT*voronoifract(pos.zx*SCALE);\n    h -= CRATER_HEIGHT*cratersfract(pos.zx*CRATER_SCALE);\n    return h;\n}\n\nvec2 raymarch(vec3 ro, vec3 rd) {\n    float d=0.;\n    int i;\n    for (i=0; i<ITERS; i++) {\n        float dist = map(ro+d*rd);\n        d += dist;\n        if (dist < TOL) {\n\t\t\treturn vec2(d, 1.);\n        }\n    }\n    return vec2(d, 0.);\n}\n\nvec3 gradient(in vec3 pos) {\n    vec3 offset = vec3(-GRADIENT_EPS, 0.0, GRADIENT_EPS);\n    float dx0 = map(pos+offset.xyy);\n    float dxf = map(pos+offset.zyy);\n    float dy0 = map(pos+offset.yxy);\n    float dyf = map(pos+offset.yzy);\n    float dz0 = map(pos+offset.yyx);\n    float dzf = map(pos+offset.yyz);\n    return normalize(vec3(dxf - dx0, dyf - dy0, dzf - dz0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = SPEED*iTime;\n    float height1 = -map(vec3(0.,0.,t));\n    float height2 = -map(vec3(0.,0.,t-0.2));\n    vec3 ro = vec3(0., 3.+0.11*(height1+height2), t);\n    vec3 up = vec3(0., 1., 0.);\n    vec3 w = normalize(vec3(0., -0.7+0.11*(height1-height2), 1.));\n    vec3 u = cross(w, up);\n    vec3 v = cross(u, w);\n    vec2 coord = fragCoord/iResolution.xy-0.5;\n    vec3 rd = normalize(w*FDIST+u*coord.x+v*coord.y);\n    \n    vec2 d = raymarch(ro, rd);\n    vec3 n = gradient(ro+d.x*rd);\n    vec3 col = vec3(pow(dot(rd, w), 10.)*dot(n, -rd));\n    fragColor = vec4(col,1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}