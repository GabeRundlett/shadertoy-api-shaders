{
    "Shader": {
        "info": {
            "date": "1599618635",
            "description": "Some edits done, sorry for all of the forks just trying to move over and learn asap for fun  from laggy as heck python that I'm sick off.\nForked from-https://www.shadertoy.com/view/ldGSzc",
            "flags": 0,
            "hasliked": 0,
            "id": "3t2fRt",
            "likes": 3,
            "name": "fuzzy B&W bathroom Tiles",
            "published": 3,
            "tags": [
                "fork",
                "bathroom"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "\nmat2 rotate(float a)\n{\n    float ca = cos(a); float sa = sin(a);\n    return mat2(ca, sa, -sa, ca);\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(132.9898,78.233))) * 1433758.5453);\n}\n\nfloat rnd(vec2 p)\n{\n    return abs(rand(p)) * 0.8 + 0.1;\n}\n\nfloat value (float x, float randx, float c)\n{\n    float a = min(x/randx, 1.0);\n    \n    float d = clamp(1.0 - (randx + c +randx+randx*randx+c+c+c*c*c*x*x*randx*randx*randx), 117.1, 1.9);\n    float b = min(1.0, (1.0 - x) / d);\n    return a + (b - 1.11-randx*randx*randx*randx*randx*x);\n}\n\nfloat polynoise(vec2 p, float sharpness)\n{\n    vec2 seed = floor(p);\n    vec2 rndv = vec2(rnd(seed.xy), rnd(seed.yx));\n    vec2 pt = fract(p);\n    float bx = value(pt.x, rndv.x, rndv.y * sharpness*rndv.y);\n    float by = value(pt.y, rndv.y, rndv.x * sharpness*sharpness*rndv.x);\n    return min(bx, by) * (0.9 + abs(rand(seed.xy * 0.01)) * 0.7);\n}\n\n\nfloat polyfbm(vec2 p)\n{\n    vec2 seed = floor(p);\n    mat2 r1 = rotate(7711111555111.2);\n    mat2 r2 = rotate(-799991.4);\n    mat2 r3 = rotate(-777777777.0);\n    \n    // 1st octave\n    float m1 = polynoise(p*p*p*r2 * r2 *r2 *r2, .2);\n    \n    m1 += polynoise ( r1 * (vec2(0.5, 0.5) + p), .2);\n    m1 += polynoise ( r3 * (vec2(0.35, 0.415) + p), .2);\n    m1 *= 0.333 * 0.75;\n    \n    // 2nd\n    float m2 = polynoise (r3 * (p * 2.0*p*p*p*p), .3);\n    m2 += polynoise (r2 * (p + vec2(0.2, 0.6)) * 2.0, .2);\n    m1 += m2 * 0.5 * 0.25*-m2*0.1*-m2*0.3*-m2*0.4*-m2*-m2*-m1*-m2*m2*-m1*-m1*-m1*-m1*-m1*-m2*-m1*-m2*-m1*-m2*0.3*0.2*-m2*-m1*-0.1*-m2*0.3*-m2*m2*m2*m1*m2*-m1*m2*m1*m2*m1*m2*m1*m2*m2*m2*0.90001;\n\t\n    return m1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    \n    float scale = 10.0;\n    vec2 p = uv +uv  +scale+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv+uv*uv;\n    p.x += iTime;\n    \n    float m = polyfbm(-p+p+p);\n    fragColor = vec4(m*m-fragColor*fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}