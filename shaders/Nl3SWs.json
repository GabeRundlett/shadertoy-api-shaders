{
    "Shader": {
        "info": {
            "date": "1645300347",
            "description": "Buzzing a Remnant crash site on Solar Zen 4.\n",
            "flags": 104,
            "hasliked": 0,
            "id": "Nl3SWs",
            "likes": 54,
            "name": "Remnant Lost",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "raymarch",
                "remnant",
                "lost"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 1460
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// By David Hoskins, 2022.\n\n// https://www.shadertoy.com/view/Nl3SWs\n\n#define USE_TEX_NOISE_DERIVATIVE\n// Uses a texture to store derivative noise data.\n// Needs only one texture look-up.\n// We can't set buffer sizes, so the speed up is good, but not great.\n// because there's still an enormous amount of texture cache thrashing during the ray march.\n// It really needs a 256x256 buffer.\n\n// @Shadertoy - Please enable selectable buffer sizes! (That would be ðŸ’“)\n\n\n#define THRESHOLD .4\n#define FAR 12000.0\n#define SCALE 2.8\n#define MINRAD2 .25\nconst float minRad2 = clamp(MINRAD2, 1.0e-9, 1.0);\nconst float absScalem1 = abs(SCALE - 1.0);\nconst float AbsScaleRaisedTo1mIters = pow(abs(SCALE), float(1-10));\nconst vec3 surfaceColour1 = vec3(.8, .0, 0.);\nconst vec3 surfaceColour2 = vec3(.6, .6, 0.6);\nconst vec3 surfaceColour3 = vec3(.7, .7, 0.00);\nconst vec4 scale =vec4(SCALE, SCALE, SCALE, abs(SCALE)) / minRad2;\n\nconst vec3 sunLight  = normalize( vec3(  1.1, 0.8,  -0.8 ) );\nconst vec3 sunColour = vec3(1.0, .8, .6);\nconst vec3 cloudColour = vec3(.52, .35, .3);\n\nvec3 cameraPos;\nfloat gTime = 0.0;\n\n//#define MOUSE_SCRUB\n\n//-------------------------------------------------------------------------------------------------------\n\n#ifdef USE_TEX_NOISE_DERIVATIVE\n\n// Uses one texture LUT...\nvec3 noiseD(in vec2 x) \n{\n    vec2 f = fract(x);\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.*f*f*(f*(f-2.0)+1.);\n//    vec2 u = f*f*(3.0-2.0*f);\n//    vec2 du = 6.0*f*(1.0-f);\n\n\n    ivec2 p = ivec2(floor(x));\n\tvec4 n = texelFetch(iChannel0, p & TWRAP, 0);\n\n\treturn vec3(n.x + n.y * u.x + n.z * u.y + n.w * u.x*u.y,\n\t\t\t\tdu * (n.yz + n.w*u.yx));\n}\n\n#else\n\n// iq's original code from 'elevated'...\n// Thanks Inigo!\nvec3 noiseD(in vec2 x )\n{\n    vec2 f = fract(x);\n    \n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.*f*f*(f*(f-2.0)+1.0);\n//    vec2 u = f*f*(3.0-2.0*f);\n//    vec2 du = 6.0*f*(1.0-f);\n\n    ivec2 p = ivec2(floor(x));\n    float a = texelFetch(iChannel0, p&TWRAP, 0 ).x;\n\tfloat b = texelFetch(iChannel0, (p+ivec2(1,0))&TWRAP, 0 ).x;\n\tfloat c = texelFetch(iChannel0, (p+ivec2(0,1))&TWRAP, 0 ).x;\n   \tfloat d = texelFetch(iChannel0, (p+ivec2(1,1))&TWRAP, 0 ).x;\n\n\treturn vec3(a + (b-a) * u.x+(c-a) *u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\tdu*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\n#endif\n\n//-------------------------------------------------------------------------------------------------------\n// Basic 3D noise using texture channel...\nfloat noise( in vec3 p )\n{\n    vec3 f = fract(p);\n    p = floor(p);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel3, (uv+ 0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n//-------------------------------------------------------------------------------------------------------\n\n#define ANG2 1.33\n#define ANG3 1.4\nconst mat2 rotMat = mat2(cos(ANG2), sin(ANG3), -sin(ANG3), cos(ANG2)) * 2.;\n\n#define REM_SCALE 0.0035\n#define RIM_POSITION  vec3(-1500.,-220.,-1500)\n\n//-------------------------------------------------------------------------------------------------------\nfloat terrain( in vec2 p, float z)\n{\n   \n    float disObj = length(p+RIM_POSITION.xz)*.00044;\n\tfloat sc = clamp(disObj, 0.0,1.0);\n    \n    float a = 0.0;\n    \n    p+= vec2(200,222);\n    \n\tp = p*0.0004;\n    \n    vec2  d = vec2(0.0);\n    float b = 800.0 * sc;\n\n\n    \n    // Decrease iteration detail with distance with forced version...\n    int iter;\n    if (z >= 0.)\n        iter = 16-int(log2(z*.2+.05));\n    else\n        iter = -int(z);\n    \n    iter = clamp(iter, 1, 16);\n    \n\tfor (int i = 0; i < iter; i++)\n\t{\n       vec3 n = noiseD(p);\n        \n        d += n.yz;\n        a += b*n.x/(1.+dot(d,d));\n\t\tb *= 0.483;\n        p = rotMat*p;\n        p -= n.yz*.3;\n\t} \n    \n\n\n\treturn a;\n}\n\nmat3 rot3D; // ...Set in main\n//-------------------------------------------------------------------------------------------------------\n// Do the Mandelbox....\nfloat mapRemnant(vec3 pos) \n{\n\n    pos = pos + RIM_POSITION;\n    pos = rot3D * pos;\n    vec4 p = vec4(pos*REM_SCALE,1);\n\tvec4 p0 = p;\n    \n    // Shape always needs 8 iterations...\n\tfor (int i = 0; i < 8; i++)\n\t{\n\t\tp.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n\n\t\tfloat r2 = dot(p.xyz, p.xyz);\n\t\tp *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n\t\tp = p*scale + p0;\n\t}\n\tfloat l = ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters) / REM_SCALE;\n\n    return l;\n}\n\nvec3 remnantColour(vec3 pos) \n{\n    pos = pos + RIM_POSITION;\n    pos = rot3D * pos;\n    vec4 p = vec4(pos*REM_SCALE,1);\n\tvec4 p0 = p;\n    \n\tfloat trap = 1.0;\n    \n    // Just 6 iterations for colour selection...\n\tfor (int i = 0; i < 6; i++)\n\t{\n        \n\t\tp.xyz = clamp(p.xyz, -1.0, 1.0) * 2.0 - p.xyz;\n\n\t\tfloat r2 = dot(p.xyz, p.xyz);\n\t\tp *= clamp(max(minRad2/r2, minRad2), 0.0, 1.0);\n\n\t\tp = p*scale + p0;\n\t\ttrap = min(trap, r2);\n\t}\n\t// |c.x|: log final distance (fractional iteration count)\n\t// |c.y|: spherical orbit trap at (0,0,0)\n\tvec2 c = clamp(vec2( 0.00015*length(p)-1., sqrt(trap) ), 0.0, 1.0);\n\n    float t = mod(length(pos * REM_SCALE) - gTime*31.5, 16.0);\n    vec3 surf = mix( surfaceColour1, vec3(.1, 2., 5.), smoothstep(0.0, .3, t) * smoothstep(0.6, .3, t));\n\treturn mix(mix(surf, surfaceColour2, c.y), surfaceColour3, c.x);\n}\n\n\n//-------------------------------------------------------------------------------------------------------\n// A big background sky drop... without sun or clouds for fogging.\nvec3 getSky(in vec3 rd)\n{\n\tfloat sunAmount = max( dot( rd, sunLight), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),4.);\n\tvec3  sky = mix(vec3(.0, .06, .2), cloudColour, v);\n\tsky = sky + sunColour * pow(sunAmount, 4.0) * .2;\n\treturn clamp(sky, 0.0, 1.0);\n}\n\n//-------------------------------------------------------------------------------------------------------\nfloat findClouds2D(in vec2 p)\n{\n\tfloat a = 1.0, r = 0.0;\n    \n    p*= .00008;\n    p += 3.5;\n    for (int i = 0; i < 6; i++)\n    {\n        r+= noise2D(p).x*a;\n        a*=.51;\n        p = rotMat *p;\n    }\n\treturn max(r-1., 0.0);\n}\n\n//-------------------------------------------------------------------------------------------------------\n//..used by...\nvec4 getClouds(vec3 pos, vec3 dir)\n{\n    if (dir.y < 0.0) return vec4(0.0);\n    float d = (8000. / dir.y);\n    vec2 p = pos.xz+dir.xz*d;\n    float r = findClouds2D(p);\n    float t = findClouds2D(p+normalize(sunLight.xz)*200.);    \n    t = (max((r-t)*40., .3))+.8;\n    vec3 col = cloudColour *t;\n    float f = pow(max(dot(sunLight, dir), 0.0), 8.0)*5.;\n    col= mix(col, sunColour*vec3(2., .9, .4), clamp(f, 0.0, 1.0));\n    // returns colour and alpha...\n    return vec4(col, r*.3);\n}\n\n//-------------------------------------------------------------------------------------------------------\nvec3 addSun(in vec3 rd)\n{\n    float sunAmount = max( dot( rd, sunLight), 0.0 );\n    return sunColour * pow(sunAmount, 300.0)*2.;\n}\n\n//-------------------------------------------------------------------------------------------------------\n// Merge ground into the sky background for correct fog colouring...\nvec3 applyFog( in vec3  col, in vec3 sky, in float dis,in vec3 pos, in vec3 dir)\n{\n\n    vec3 v = exp2(-dis*0.00006*vec3(1.,1.4,4)); \n    return mix(sky, col, v);\n\n}\n\n\n//-------------------------------------------------------------------------------------------------------\n// Map the whole scene with two objects...\nfloat map(vec3 p, float z)\n{\n    return  min(p.y-terrain(p.xz, z), mapRemnant(p));\n}\n\n//-------------------------------------------------------------------------------------------------------\n\n// March the whole scene...\nfloat rayMarch(in vec3 rO, in vec3 rD, in float t)\n{\n\tfloat d = 0.;\n    float adj = .4;// Estimate error adjust starts very small\n\n    for(int j = min(0, iFrame); j < 300 && t < FAR; j++)\n\t{\n        d = map(rO + t*rD, t);\n        if (d < THRESHOLD) break;\n        t += d * adj;\n        // Instead of adding an arbitrary value to the estimation to speed up marching,\n        // scale the value instead.\n        adj += .004; // ... Works like magic here!\n\t}\n \n\treturn t;\n}\n\n//-------------------------------------------------------------------------------------------------------\nvec3 cameraPath( float t )\n{\n    vec2 p = vec2(2500.0 * sin(2.63*t), 2500.0 * cos(1.715*t) );\n    p += 600.;\n\treturn vec3(p.x,   terrain(p, -4.)+200.0+sin(gTime*3.+2.0)*100.0, p.y);\n} \n\n\n//-------------------------------------------------------------------------------------------------------\nvec3 getNormal(vec3 p, float dis)\n{\n    dis = dis*1.5/iResolution.y;\n\tvec2 e = vec2(0,clamp(dis, .1, 144.));\n\treturn normalize(map(p, -15.0)-vec3(map(p - e.yxx, -15.), map(p - e.xyx, -15.), map(p - e.xxy, -15.)));\n}\n\n//------------------------------------------------------------------------------\nfloat shadow( in vec3 ro, in vec3 rd, in float dis)\n{\n\tfloat res = 1.0;\n    float t = 1.0;\n\tfloat h;\n\t\n    // Thankfully only a few steps are needed...\n    for (int i = min(0, iFrame); i < 35; i++)\n\t{\n        vec3 p =  ro + rd*t;\n\n\t\th = map(p, dis);\n\t\tres = min(.6*h / t*t, res);\n\t\tt += h+6.0;\n\t}\n    return clamp(res, .2, 1.0);\n}\n\n//-------------------------------------------------------------------------------------------------------\nvec4 getDiffuse(vec3 pos, vec3 dir,  vec3 nor, float dis)\n{\n    vec4 dif = vec4(0);\n    if ((pos.y-terrain(pos.xz, dis)) < THRESHOLD)\n    {\n        // Simple Terrain colouring...\n        float n = cos(pos.z*.001+pos.x*.004+.8+pos.y*.001)*.4+.4;\n        float dark = smoothstep(8000.0,3000.0,length(pos.xz+RIM_POSITION.xz));\n        \n    \n        dif.xyz = vec3(mix(vec3(1.,.6,.4), vec3(.6, .6, .6), n));\n\n        \n        float s = max(0.,nor.y*nor.y);\n\n        dif.xyz = mix(dif.xyz, vec3(s*.4, s*.1,0.), clamp(nor.x+nor.z+.4, 0.0, 1.));\n        dif.w += .4;\n        dif *= dark;\n        \n\n        \n     }else\n     {\n         // Remnant colour...\n         dif.xyz = remnantColour(pos)*2.; //... Wasted processing faffing around!\n         dif.w = 1.5;\n     }\n    return dif;\n}\n\n//-------------------------------------------------------------------------------------------------------\n// Calculate lighting from the sun...\nvec3  doLighting(in vec4 dif, in vec3 pos, in vec3 nor, in vec3 eyeDir, in float dis)\n{\n\tfloat h = dot(sunLight,nor);\n\tvec3 mat = dif.xyz * sunColour*(max(h, 0.0));\n    vec3 ref = reflect(eyeDir, nor);\n    mat += sunColour * pow(max(dot(ref, sunLight), 0.0), 80.0) * dif.w;\n\n    mat *= shadow(pos+nor*2., sunLight, dis);\n    // Some fake sky lighting...\n    mat += vec3(.7,.6,.5) * max(0.0, -nor.y) *.05;\n     \n    return min(mat, 1.0);\n}\n\n//-------------------------------------------------------------------------------------------------------\n\nvec3 cw, cu, cv;\nvec3 getCamera(vec2 uv)\n{\n    vec3 cameraTar;\n\tcameraPos = cameraPath(gTime + 0.0);\n\tcameraTar = cameraPath(gTime + .25);\n    cameraTar.y = cameraPos.y +sin(gTime*8.+2.5)*200.;\n    \n    // Camera lean on corners...\n    // not working\n    //vec3 far\t \t= cameraPath(gTime + .2);\n    //vec2 v1 = normalize(far.xz-cameraTar.xz);\n    //vec2 v2 = normalize(cameraTar.xz-cameraPos.xz);\n    //float roll = clamp(atan(cross2(v1,v2), dot(v1,v2))*.6, -.8, .8);\n\n    // Boat-roll it instead...\n\tfloat roll = .4*sin(gTime*10.);\n\n\tvec3 cp = vec3(sin(roll), cos(roll),0.0);\n    cw = normalize(cameraTar-cameraPos);\n\tcu = normalize(cross(cw,cp));\n\tcv = normalize(cross(cu,cw));\n    return normalize(uv.x*cu + uv.y*cv + (length(uv*0.3)+.6)*cw);;\n}\n\n//-------------------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat m = 0.0;\n    #ifdef MOUSE_SCRUB\n    m = (iMouse.x/iResolution.x)*50.0;\n    #endif\n\tgTime = (iTime*.5+m+234.)*.1;\n    vec2 xy = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (-1.0 + 2.0 * xy) * vec2(iResolution.x/iResolution.y,1.0);\n\n    rot3D = rotY(0.785398) * rotX(0.885398);\n\n    if (abs(xy.y -.5) > .37)\n\t{\n\t\t// Top and bottom cine-crop. Don't discard; - it won't always be black.\n\t\tfragColor = vec4(0.0);\n\t\treturn;\n\t}\n\n    vec3 dir = getCamera(uv);\n\n\tvec3 col;\n\tfloat dist;\n\n    float st = hash12(uvec2(fragCoord*iTime))*80.;\n\tdist = rayMarch(cameraPos, dir, st);\n    \n    vec3 sky = getSky(dir);\n    \n\tif (dist >= FAR)\n    {\n\t\t// Completely missed the scene...\n\t\tcol = sky;\n        \n        col = min(vec3(1.0), col+addSun(dir));\n        vec4 cc = getClouds(cameraPos, dir);\n       \n        col = mix(col, cc.xyz, cc.w);\n\t}\n\telse\n\t{\n        // Render the objects...\n        vec3 pos = cameraPos + dist * dir;\n        vec3 nor = getNormal(pos, dist);\n        vec4 dif = getDiffuse(pos, dir, nor, dist);\n        col = doLighting(dif, pos, nor, dir, dist);\n        col = applyFog(col, sky, dist, pos, dir);\n\t}\n\n\n    // Post screen effects...\n    // Sun flare stuff...\n\tfloat bri = dot(cw, sunLight)*.75;\n\tif (bri > 0.0)\n\t{\n\t\tvec2 sunPos = vec2( dot( sunLight, cu ), dot( sunLight, cv ) );\n\t\tvec2 uvT = uv-sunPos;\n\t\tuvT = uvT*(length(uvT));\n\t\tbri = pow(bri, 6.0)*.8;\n\n\t\t// glare = the red shifted blob...\n\t\tfloat glare1 = max(dot(normalize(vec3(dir.x, dir.y+.3, dir.z)),sunLight),0.0)*1.4;\n\t\t// glare2 is the cyan ring...\n\t\tfloat glare2 = max(1.0-length(uvT+sunPos*.5)*4.0, 0.0);\n\t\tuvT = mix (uvT, uv, -2.3);\n\t\t// glare3 is a yellow ring...\n\t\tfloat glare3 = max(1.0-length(uvT+sunPos*5.0)*1.2, 0.0);\n\n\t\tcol += bri * vec3(1.0, .0, .0)  * pow(glare1, 12.5)*.1;\n\t\tcol += bri * vec3(.2, 1.0, 1.) * pow(glare2, 2.0)*4.;\n\t\tcol += bri *vec3(0.5, .5,0.0) * pow(glare3, 2.0)*5.;\n\t}\n   \n    // Got fed up of bloody smoothstepping everything ðŸ™„\n    // Use exponential curve instead (see in Common)\n    col =  clamp(col, 0.0, 1.0);\n    col *= fader(0.0, 4.0, iTime); \n    \n    // Fade out to 4 mins for video rendering.\n    //col *= fader(240.0, 230.0, iTime);\n    \n    // Contrast...\n    col = col*.4 + (col*col*(3.0-2.0*col))*.6;\n    // Gamma...\n    col = sqrt(col);\n    \n    xy.y = xy.y*1.37 -.185; // ...for letterbox crop\n\tcol *= 0.4 + .6*pow( 40.0*xy.x*xy.y*(1.0-xy.x)*(1.0-xy.y), .5);  // ...Vignette.\n\tfragColor=vec4(col, 1.0);\n}\n\n//-------------------------------------------------------------------------------------------------------",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 28272,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/sergenarcissovmusic/space-ambient?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// By David Hoskins, 2022.\n\n// Create derivative noise texture\n\n// @Shadertoy - PLease enable selectable buffer sizes.\n\n\n// Normal random data with a sneaky curve...\nfloat derivHash(ivec2 q2)\n{\n   uvec2 q = uvec2((q2+10) & TWRAP);  // ...Seeded and wrapped.\n   float f = hash12(q);\n   return pow(f, 1. );\n}\n\n\nvoid mainImage( out vec4 colour, in vec2 coord )\n{\n\n// Draw it ony once to relavent area...\n\n// It seems the buffers are also doubled as I need to draw 2 frames...\n  if (iFrame < 2 && coord.x < TSIZE && coord.y < TSIZE)\n  {\n\n    vec4 data, n;\n    ivec2 co = ivec2(floor(coord));\n\n    float a = derivHash(co);\n    float b = derivHash((co+ivec2(1,0)));\n    float c = derivHash((co+ivec2(0,1)));\n    float d = derivHash((co+ivec2(1,1)));\n\n// Pre-calc all the sums...\n    data.x = a;\t \t\t\n    data.y = b-a; \t\t\t\n    data.z = c-a; \t\t\t\n    data.w = a - b - c + d;\n\n    colour = data;\n  }\n  else discard;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// By David Hoskins, 2022.\n\n#define TSIZE 256.\n#define TWRAP 255\n\n#define UI0 1597334673U\n#define UI1 3812015801U\n#define UI2 uvec2(UI0, UI1)\n#define UI3 uvec3(UI0, UI1, 2798796415U)\n#define UIF (1.0 / float(0xfffffffeU))\n\nfloat hash12(uvec2 q)\n{\n\tq *= UI2;\n\tuint n = (q.x ^ q.y) * UI0;\n\treturn float(n) * UIF;\n}\n\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*UI2;\n\tq = (q.x ^ q.y) * UI2;\n\treturn vec2(q) * UIF;\n}\n\n//----------------------------------------------------------------------------------------\nvec2 noise2D( in vec2 n )\n{\n\n    vec2 p = floor(n);\n    n = fract(n);\n    n = n*n*(3.0-2.0*n);\n    \n    vec2 res = mix(mix( hash22(p), hash22(p+vec2(1.0 ,0.0)),n.x),\n                    mix( hash22(p + vec2(0.0,1.0)), hash22(p + vec2(1.0,1.0)),n.x),n.y);\n    return res;\n}\n\nfloat sMin( float a, float b, float k )\n{\n    \n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\nmat3 rotX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n\nmat3 rotY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\n// Exponential falloff.. \nfloat fader(float edge0, float edge1, float x)\n{\n    float t = (x - edge0) / (edge1 - edge0);\n    return  clamp(exp((t-.9825)*3.)-.0525, 0.0, 1.0);\n}\n\n/*\n float cross2(vec2 A, vec2 B)\n {\n\treturn A.x*B.y-A.y*B.x;\n }\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// By David Hoskins, 2022.\n\n\n//----------------------------------------------------------------------------------------\nvec2 mainSound( in int samp, float time )\n{\n    // Engine noise...\n    vec2 noi = (noise2D(vec2(time*220.0))-.5)*.5 * noise2D(vec2(time*.3)+.1);\n    noi += (noise2D(vec2(time*600.0))-.5)*.4 * noise2D(vec2(time*.2)+.1);\n    noi += (noise2D(vec2(time*88.0))-.5)*.9 *  noise2D(vec2(time*2.)+.2);\n    noi *= fader(.0, 3.0,time) * fader(180.0, 170.0,time);\n    return noi;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}