{
    "Shader": {
        "info": {
            "date": "1653767670",
            "description": "License CC0: Neon Sunset\nCode is hackish but I thought it looked good enough to share\nThe music from GTA III - RISE FM, the best radio channel in GTA III IMHO",
            "flags": 64,
            "hasliked": 0,
            "id": "7dtcRj",
            "likes": 71,
            "name": "Neonwave Sunset",
            "published": 3,
            "tags": [
                "raytracerneon"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 2284
        },
        "renderpass": [
            {
                "code": "// License CC0: Neon Sunset\n//  Code is hackish but I thought it looked good enough to share\n//  The music from GTA III - RISE FM, the best radio channel in GTA III IMHO\n#define LAYERS            5.0\n#define PI                3.141592654\n#define TAU               (2.0*PI)\n#define TIME              iTime\n#define TTIME             (TAU*TIME)\n#define RESOLUTION        iResolution\n#define ROT(a)            mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1./2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n\n// License: Unknown, author: Unknown, found: don't remember\nvec2 hash2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return fract(sin(p)*43758.5453123);\n}\n\n// License: CC BY-NC-SA 3.0, author: Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick), found: https://www.shadertoy.com/view/Mt3GW2\nvec3 blackbody(float Temp) {\n  vec3 col = vec3(255.);\n  col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n  col.y = 100.04 * log(Temp) - 623.6;\n  if (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n  col.z = 194.18 * log(Temp) - 1448.6;\n  col = clamp(col, 0., 255.)/255.;\n  if (Temp < 1000.) col *= Temp/1000.;\n  return col;\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/smin\nfloat pmin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors\nfloat rayPlane(vec3 ro, vec3 rd, vec4 p) {\n  return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nfloat sun(vec2 p) {\n  const float ch = 0.0125;\n  vec2 sp = p;\n  float d0 = circle(sp, 0.5);\n  float d = d0;\n  return d;\n}\n\nfloat segmentx(vec2 p) {\n  float d0 = abs(p.y);\n  float d1 = length(p);\n  return p.x > 0.0 ? d0 : d1;\n}\n\nfloat segmentx(vec2 p, float l) {\n  float hl = 0.5*l;\n  p.x = abs(p.x);\n  float d0 = abs(p.y);\n  float d1 = length(p-vec2(hl, 0.0));\n  return p.x > hl ? d1 : d0;\n}\n\nfloat synth(vec2 p, float aa, out float h, out float db) {\n  const float z = 75.0;\n  p.y -= -70.0;\n  const float st = 0.04;\n  p.x = abs(p.x);\n  p.x -= 20.0-3.5;\n  p.x += st*20.0;\n  p /= z;\n  float n = mod1(p.x, st);\n  float dib = 1E6;\n  const int around = 0;\n  for (int i = -around; i <=around ;++i) {\n    float fft = texture(iChannel0, vec2((n+float(i))*st, 0.25)).x; \n    fft *= fft;\n    if (i == 0) h = fft;\n    float dibb = segmentx((p-vec2(st*float(i), 0.0)).yx, fft+0.05)-st*0.4;\n    dib = min(dib, dibb);\n  }\n  \n  float d = dib;\n  db = abs(p.y)*z;\n  return smoothstep(aa, -aa, d*z);\n}\n\nvec3 road(vec3 ro, vec3 rd, vec3 nrd, float glare, vec4 pl, out float pt) {\n  const float szoom   = 0.5;\n  const float bsz     = 25.0;\n  const float sm      = 1.0;\n  float off = abs(pl.w);\n  float t = rayPlane(ro, rd, pl);\n  pt = t;\n\n  vec3 p  = ro+rd*t;\n  vec3 np = ro+nrd*t;\n\n  vec2 pp   = p.xz;\n  vec2 npp  = np.xz;\n  vec2 opp  = pp;\n\n  float aa  = length(npp-pp)*sqrt(0.5);\n  pp.y += -60.0*TIME;\n\n  vec3 gcol = vec3(0.0);\n\n  float dr = abs(pp.x)-off;\n  vec2 cp = pp;\n  mod1(cp.y, 6.0*off);\n  vec2 sp = pp;\n  sp.x = abs(sp.x);\n  mod1(sp.y, off);\n  float dcl = segmentx(cp.yx, 1.5*off);\n  float dsl = segmentx((sp-vec2(0.95*off, 0.0)).yx, off*0.5);\n\n  vec2 mp = pp;\n  mod2(mp, vec2(off*0.5));\n    \n  vec2 dp = abs(mp);\n  float d = dp.x;\n  d = pmin(d, dp.y, sm);\n  d = max(d, -dr);\n  d = min(d, dcl); \n  d = min(d, dsl); \n  vec2 s2 = sin(TIME+2.0*p.xz/off);\n  float m = mix(0.75, 0.9, tanh_approx(s2.x+s2.y));\n  m *= m;\n  m *= m;\n  m *= m;\n  vec3 hsv = vec3(0.4+mix(0.5, 0.0, m), tanh_approx(0.15*mix(30.0, 10.0, m)*d), 1.0);\n  float fo = exp(-0.04*max(abs(t)-off*2., 0.0));\n  vec3 bcol = hsv2rgb(hsv);\n  gcol += 2.0*bcol*exp(-0.1*mix(30.0, 10.0, m)*d)*fo;\n\n  float sh;\n  float sdb;\n  float sd =synth(opp, aa,sh, sdb)*smoothstep(aa, -aa, -dr);\n  sh = tanh_approx(sh);\n  sdb *= 0.075;\n  sdb *= sdb;\n  sdb += 0.05;\n  vec3 scol = sd*(sdb)*pow(tanh(vec3(0.1)+bcol), mix(vec3(1.0), vec3(1.5, 0.5, 0.5), smoothstep(0.4, 0.5, sh)));\n  gcol += scol;\n\n\n  gcol = t > 0.0 ? gcol : vec3(0.0);\n  return gcol+scol;\n}\n\nvec3 stars(vec2 sp, float hh) {\n  vec3 col = vec3(0.0);\n  \n  const float m = LAYERS;\n  hh = tanh_approx(20.0*hh);\n\n  for (float i = 0.0; i < m; ++i) {\n    vec2 pp = sp+0.5*i;\n    float s = i/(m-1.0);\n    vec2 dim  = vec2(mix(0.05, 0.003, s)*PI);\n    vec2 np = mod2(pp, dim);\n    vec2 h = hash2(np+127.0+i);\n    vec2 o = -1.0+2.0*h;\n    float y = sin(sp.x);\n    pp += o*dim*0.5;\n    pp.y *= y;\n    float l = length(pp);\n  \n    float h1 = fract(h.x*1667.0);\n    float h2 = fract(h.x*1887.0);\n    float h3 = fract(h.x*2997.0);\n\n    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*blackbody(mix(3000.0, 22000.0, h1*h1));\n\n    vec3 ccol = col + exp(-(mix(6000.0, 2000.0, hh)/mix(2.0, 0.25, s))*max(l-0.001, 0.0))*scol;\n    ccol *= mix(0.125, 1.0, smoothstep(1.0, 0.99, sin(0.25*TIME+TAU*h.y)));\n    col = h3 < y ? ccol : col;\n  }\n  \n  return col;\n}\n\nvec3 meteorite(vec2 sp) {\n  const float period = 3.0;\n  float mtime = mod(TIME, period);\n  float ntime = floor(TIME/period);\n  float h0 = hash(ntime+123.4);\n  float h1 = fract(1667.0*h0);\n  float h2 = fract(9967.0*h0);\n  vec2 mp = sp;\n  mp.x += -1.0;\n  mp.y += -0.5*h1;\n  mp.y += PI*0.5;\n  mp *= ROT(PI+mix(-PI/4.0, PI/4.0, h0));\n  float m = mtime/period;\n  mp.x += mix(-1.0, 2.0, m);\n  \n  float d0 = length(mp);\n  float d1 = segmentx(mp);\n  \n  vec3 col = vec3(0.0);\n  \n  col += 0.5*exp(-4.0*max(d0, 0.0))*exp(-1000.0*max(d1, 0.0));\n  col *= 2.0*HSV2RGB(vec3(0.8, 0.5, 1.0));\n  float fl = smoothstep(-0.5, 0.5, sin(12.0*TTIME));\n  col += mix(1.0, 0.5, fl)*exp(-mix(100.0, 150.0, fl)*max(d0, 0.0));\n  \n  col = h2 > 0.8 ? col: vec3(0.0);\n  return col;\n}\n\nvec3 skyGrid(vec2 sp) {\n  const float m = 1.0;\n\n  const vec2 dim = vec2(1.0/12.0*PI);\n  float y = sin(sp.x);\n  vec2 pp = sp;\n  vec2 np = mod2(pp, dim*vec2(1.0/floor(1.0/y), 1.0));\n\n  vec3 col = vec3(0.0);\n\n  float d = min(abs(pp.x), abs(pp.y*y));\n  \n  float aa = 2.0/RESOLUTION.y;\n  \n  col += 0.25*vec3(0.5, 0.5, 1.0)*exp(-2000.0*max(d-0.00025, 0.0));\n  \n  return col;\n}\n\n\nvec3 sunset(vec2 sp, vec2 nsp) {\n  const float szoom   = 0.5;\n  float aa = length(nsp-sp)*sqrt(0.5);\n  sp -= vec2(vec2(0.5, -0.5)*PI);\n  sp /= szoom;\n  sp = sp.yx;\n  sp.y += 0.22;\n  sp.y = -sp.y;\n  float ds = sun(sp)*szoom;\n  \n  vec3 bscol = hsv2rgb(vec3(fract(0.7-0.25*(sp.y)), 1.0, 1.0));\n  vec3 gscol = 0.75*sqrt(bscol)*exp(-50.0*max(ds, 0.0));\n  vec3 scol = mix(gscol, bscol, smoothstep(aa, -aa, ds));\n  return scol;\n}\n\nvec3 glow(vec3 ro, vec3 rd, vec2 sp, vec3 lp) {\n  float ld = max(dot(normalize(lp-ro), rd),0.0);\n  float y = -0.5+sp.x/PI;\n  y = max(abs(y)-0.02, 0.0)+0.1*smoothstep(0.5, PI, abs(sp.y));\n  float ci = pow(ld, 10.0)*2.0*exp(-25.0*y);\n  float h = 0.65;\n  vec3 col = hsv2rgb(vec3(h, 0.75, 0.35*exp(-15.0*y)))+HSV2RGB(vec3(0.8, 0.75, 0.5))*ci;\n  return col;\n}\n\n\n\nvec3 neonSky(vec3 ro, vec3 rd, vec3 nrd, out float gl) {\n  const vec3 lp       = 500.0*vec3(0.0, 0.25, -1.0);\n  const vec3 skyCol   = HSV2RGB(vec3(0.8, 0.75, 0.05));\n\n\n  float glare = pow(abs(dot(rd, normalize(lp))), 20.0);\n  \n  vec2 sp   = toSpherical(rd.xzy).yz;\n  vec2 nsp  = toSpherical(nrd.xzy).yz;\n  vec3 grd  = rd;\n  grd.xy *= ROT(0.025*TIME);\n  vec2 spp = toSpherical(grd).yz;\n\n  float gm = 1.0/abs(rd.y)*mix(0.005, 2.0, glare);\n  vec3 col = skyCol*gm;\n  float ig = 1.0-glare;\n  col += glow(ro, rd, sp, lp);\n  if (rd.y > 0.0) {\n    col += sunset(sp, nsp);\n    col += stars(sp, 0.0)*ig;\n    col += skyGrid(spp)*ig;\n    col += meteorite(sp)*ig;\n  }\n  gl = glare;\n  return col;\n}\n\nvec3 color(vec3 ro, vec3 rd, vec3 nrd) {\n  const float off1  = -20.0;\n  const vec4 pl1    = vec4(normalize(vec3(0.0, 1.0, 0.15)), -off1);\n  float glare;\n  vec3 col = neonSky(ro, rd, nrd, glare);\n  if (rd.y < 0.0) {\n    float t;\n    col += road(ro, rd, nrd, glare, pl1, t);\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  vec3 ro = vec3(0.0, 0.0, 10.0);\n  vec3 la = vec3(0.0, 2.0, 0.0);\n  vec3 up = vec3(0.0, 1.0, 0.0);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  const float fov = tan(TAU/6.0);\n  vec2 np = p + vec2(aa); \n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n  vec3 nrd = normalize(-np.x*uu + np.y*vv + fov*ww);\n\n\n  vec3 col = vec3(0.1);\n  col = color(ro, rd, nrd);\n//  col += synth(p, np);\n  col *= smoothstep(0.0, 4.0, TIME);\n  col = aces_approx(col);\n  col = sRGB(col); \n\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29046,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/furtheram-9/grand-theft-auto-iii-gta-3-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}