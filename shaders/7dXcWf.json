{
    "Shader": {
        "info": {
            "date": "1643564651",
            "description": "Statelessly subdividing a 2D terrain space around the camera position (interactively represented by mouse position). The principle straightforwardly generalizes from 1D to higher dimensions.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXcWf",
            "likes": 18,
            "name": "Implicit Terrain LOD Subdivision",
            "published": 3,
            "tags": [
                "terrain",
                "lod",
                "quadtree"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 607
        },
        "renderpass": [
            {
                "code": "const int MAXLEVEL = 8;\nint RES = 1 << MAXLEVEL;\n\nivec2 mouse() {\n    vec2 p = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    ivec2 ip = ivec2((p + 1.0)/2.0 * float(RES));\n    return ip;\n}\n\nivec3 pos2tile(ivec2 ip, int stp) {\n    return ivec3(ip >> stp, stp);\n}\n\nivec2 tile2pos(ivec3 tile) {\n    return tile.xy << tile.z;\n}\n\nbool subdivide1d(int p, int t, int S) {\n    S = S>>1;\n    t = (t - p)>>1; \n    t = ((t >= 0)?(t - 2 * S + 1):(- t - S));\n    return (t < 0);\n}\n\n// T = tile position [0 .. 1<<level]x[0 .. 1<<level], tile level 0..N\nbool subdivide2d(ivec3 T, ivec2 t) {    \n#if 0\n    // descend if tile contains point\n    t = (t >> T.z) - T.xy;\n    return max(abs(t.x),abs(t.y)) <= 0;\n#elif 0\n    // descend if 3x3 tile contains point\n    t = (t >> T.z) - T.xy;\n    return max(abs(t.x),abs(t.y)) <= 1;\n#else\n    // descend if distance to target falls below 1:2 threshold\n    int S = 1 << T.z;\n    ivec2 p = T.xy << T.z;    \n    return subdivide1d(p.x, t.x, S) && subdivide1d(p.y, t.y, S);\n#endif\n}\n\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = fragCoord / iResolution.xy * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    if (max(abs(p.x),abs(p.y)) > 1.0)\n        return;\n    ivec2 ip = ivec2((p + 1.0)/2.0 * float(RES));\n    const int N = MAXLEVEL;\n    vec3 color = vec3(1.0);\n    int steps = 0;\n    float dist = 0.0;\n    int L = 3;\n    for (int i = 0; i <= N; ++i) {\n        ivec3 T = pos2tile(ip, N - i);\n        if (!subdivide2d(T, mouse())||(i+1 == N)) {\n            color = viridis(float(i)/float(N-1));\n            vec2 q0 = vec2(tile2pos(T))/float(RES)*2.0 - 1.0;\n            vec2 q1 = vec2(tile2pos(ivec3(T.xy+1,T.z)))/float(RES)*2.0 - 1.0;\n            vec2 c = (q1 + q0)/2.0;\n            vec2 h = (q1 - q0)/2.0;\n            float q = abs(max(abs(p.x - c.x), abs(p.y - c.y)) - h.x);\n            q = clamp(q*iResolution.y/2.0, 0.0, 1.0);\n            color *= vec3(q);\n            break;\n        }        \n    }    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}