{
    "Shader": {
        "info": {
            "date": "1697386731",
            "description": "A simple implementation of two-dimensional Worley Noise. Then I layer it multiple times before displaying it to the screen.",
            "flags": 0,
            "hasliked": 0,
            "id": "mtjSWD",
            "likes": 4,
            "name": "Some Worley noise",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "worley"
            ],
            "usePreview": 0,
            "username": "SpinningCube",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "// Worley noise implementation by SpinningCube\n\n// Hash by Dave_Hoskins:\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n// 2D Worley noise\nfloat worley(vec2 pos) {\n    // Find current grid cell within the infinite grid.\n    vec2 cell = floor(pos);\n    \n    // Each grid cell has a single point randomly placed within it.\n    // Find the distance from the sample position to the closest point\n    // by calculating the distance to every point in the nearest 9 cells.\n    \n    float dist = 10.0; // safe upper bound\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 offset = vec2(x, y);\n            dist = min(dist, distance(fract(pos), hash22(cell + offset) + offset));\n        }\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float weight = 1.0;\n    float scale = 3.0;\n    const int numOctaves = 10;\n    \n    float noise = 0.0;\n    \n    // Multiple combined octaves\n    for (int i = 0; i < numOctaves; i++) {\n        weight *= 0.5;\n        noise += weight * (worley(scale * uv + 0.2 * scale * iTime));\n        scale *= 2.0;\n    }\n    \n    //noise = 1.0 - noise; // Invert the noise\n    //noise = 2. * (noise - 0.5); // Threshold\n    \n    vec3 col = vec3(noise);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}