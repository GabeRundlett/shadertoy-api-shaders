{
    "Shader": {
        "info": {
            "date": "1545587851",
            "description": "derp",
            "flags": 0,
            "hasliked": 0,
            "id": "Wdf3Wn",
            "likes": 2,
            "name": "Rainbowify",
            "published": 3,
            "tags": [
                "rainbow"
            ],
            "usePreview": 0,
            "username": "Limeth",
            "viewed": 417
        },
        "renderpass": [
            {
                "code": "vec3 rgb_from_hsv(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 hsv_from_rgb(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 get_fragment(vec2 uv) {\n    const vec2 textureSize = vec2(700, 700);\n    const float maxTextureSize = max(textureSize.x, textureSize.y);\n    const float minTextureSize = min(textureSize.x, textureSize.y);\n    const float scale = 1.0;\n    \n    // resized to fit into iResolution.xy\n    vec2 resLogoSize = textureSize * min(iResolution.x, iResolution.y) / max(textureSize.x, textureSize.y);\n    vec2 relLogoSize = resLogoSize / iResolution.xy;\n    \n    // scale\n    uv = (uv - vec2(0.5)) * 2.0;\n    uv /= scale;\n    uv = uv / 2.0 + vec2(0.5);\n    uv.x += -relLogoSize.x / 2.0;\n    \n    //\n    if(uv.x < 0.0 || uv.x >= relLogoSize.x || uv.y < 0.0 || uv.y >= relLogoSize.y) {\n        return vec3(0.0);\n    }\n    \n    vec2 texUv = uv / relLogoSize;\n    \n    vec3 rgb = texture(iChannel0, texUv).rgb;\n    vec3 hsv = hsv_from_rgb(rgb);\n    \n    hsv.x += (texUv.x - texUv.y) * 0.5 - iTime;\n    hsv.y = min(hsv.y + 0.25, 1.0);\n    hsv.z = min(hsv.z + 0.25, 1.0);\n    \n    return rgb_from_hsv(hsv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = get_fragment(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}