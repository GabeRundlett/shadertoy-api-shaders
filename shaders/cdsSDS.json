{
    "Shader": {
        "info": {
            "date": "1671116745",
            "description": "- sdf for the equilateral triangular facet of capsid structures\n- sdf is a bound due to infinite plane clipping via opIntersection (max)",
            "flags": 0,
            "hasliked": 0,
            "id": "cdsSDS",
            "likes": 17,
            "name": "caspar-klug sdf",
            "published": 3,
            "tags": [
                "sdf",
                "tile",
                "construction",
                "schwarz",
                "wythoff",
                "casparklug"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "float scene(vec2 p) {\n    // Caspar-Klug parameters\n    float h = mod(round((iTime + 3.0 / 2.0) / 2.0), 3.0) + 1.0;\n    float k = mod(round((iTime + 6.0 + 3.0 / 2.0) / 3.0), 3.0);\n    \n    // Wythoff parameters\n    //// pick point within fundamental triangle\n    //// https://mathworld.wolfram.com/TrianglePointPicking.html\n    //// http://extremelearning.com.au/evenly-distributing-points-in-a-triangle/\n    float a1 = 0.5 + sin(0.25 * iTime) / 2.0;\n    float a2 = 0.5 + cos(2.00 * iTime) / 2.0;\n    //// generator point\n    vec2 g = (((a1 + a2) < 1.0) ? (a1 * v3 + a2 * v2) : ((1.0 - a1) * v3 + (1.0 - a2) * v2));\n    //// mirror\n    float m = mod(round((iTime - 2.0 / 2.0) / 2.0), 10.0);\n    //// wall\n    float w = 0.0;\n    \n    // distance\n    float s = 1.0 / length(mat2(1.5, cos30, 0.0, 2.0 * cos30) * vec2(h, k));\n    float d = sdCasparKlugFacet(p / s, h, k, g, m, w, 0.05) * s;\n    // float d = sdSchwartz632Plane(p, g, m, 0.05);\n    // d = opUnion(d, opOnion(sdCircle(p + vec2(+0.5, +(sqrt3 / 6.0)), 0.05), 0.0005));\n    // d = opUnion(d, opOnion(sdCircle(p + vec2(-0.5, +(sqrt3 / 6.0)), 0.05), 0.0005));\n    // d = opUnion(d, opOnion(sdCircle(p + vec2(+0.0, -(sqrt3 / 3.0)), 0.05), 0.0005));\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // uv\n\tvec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 q = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    p *= 1.5;\n    q *= 1.5;\n    p = rotmat2(iTime * -0.25) * p;\n    q = rotmat2(iTime * -0.25) * q;\n    \n    // dist\n    float d = scene(p);\n    \n    // color\n    vec3 col = vec3(0);\n    vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n  \n    col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcol *= 1.0 - exp(-24.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(240.0 * d);\n    \n    {\n        if (iMouse.z > 0.001) {\n            float d = scene(q);\n            col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(p - q) - abs(d)) - 0.0005));\n            col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, length(p - q) - 0.0015));\n        }\n    }\n    \n    float aa = 2.0 / iResolution.y;\n    col = max(col, rnd * smoothstep(aa, 0.0, d));\n    \n    \n    \n    // output\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define cos30 cos(radians(30.0))\n#define sqrt3 sqrt(3.0)\n#define v1 vec2(0, 0)\n#define v2 vec2(0, cos30)\n#define v3 vec2(0.5, cos30)\n\nmat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat facetAltitude(float h, float k) {\n    return sqrt3 / 2.0 * length(mat2(1.5, cos30, 0.0, 2.0 * cos30) * vec2(h, k));\n}\n\nvec2 intersection(vec2 p1, vec2 p2, vec2 p3, vec2 p4) {\n    // http://paulbourke.net/geometry/pointlineplane/\n    float d = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n    float ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / d;\n    // float ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / d;\n    return p1 + ua * (p2 - p1);\n}\n\nfloat opIntersection( float d1, float d2 ) { \n    // https://iquilezles.org/articles/distfunctions2d/\n    return max(d1, d2); \n}\n\nfloat opUnion(float d1, float d2) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    return min(d1, d2); \n}\n\nfloat opOnion(in float sdf, in float thickness) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    return abs(sdf) - thickness;\n}\n\nvec2 opRep(in vec2 p, in vec2 c) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    return length(p) - r;\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    vec2 e0 = p1 - p0, e1 = p2 - p1, e2 = p0 - p2;\n    vec2 t0 = p  - p0, t1 = p  - p1, t2 = p  - p2;\n    vec2 pq0 = t0 - e0 * clamp(dot(t0, e0)/ dot(e0, e0), 0.0, 1.0);\n    vec2 pq1 = t1 - e1 * clamp(dot(t1, e1)/ dot(e1, e1), 0.0, 1.0);\n    vec2 pq2 = t2 - e2 * clamp(dot(t2, e2)/ dot(e2, e2), 0.0, 1.0);\n    float s = sign(e0.x * e2.y - e0.y * e2.x );\n    vec2 d = min(min(vec2(dot(pq0, pq0), s * (t0.x * e0.y - t0.y * e0.x)),\n                     vec2(dot(pq1, pq1), s * (t1.x * e1.y - t1.y * e1.x))),\n                     vec2(dot(pq2, pq2), s * (t2.x * e2.y - t2.y * e2.x)));\n    return -sqrt(d.x) * sign(d.y);\n}\n\nfloat sdEquilateralTriangle(in vec2 p, in float r) {\n    // https://iquilezles.org/articles/distfunctions2d/\n    // r is half of the side\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r / k;\n    if (p.x + k * p.y > 0.0) p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n    p.x -= clamp(p.x, -2.0 * r, 0.0);\n    return -length(p) * sign(p.y);\n}\n\nvec2 snub632() {\n    // fermat point\n    vec2 pf = intersection(vec2(-0.75, cos30 / 2.0), v3, vec2(1, 0), v2);\n    // reflect over side (y-axis)\n    vec2 q1 = vec2(-1.0 * pf.x, pf.y);\n    // vec2 q2 = vec2(pf.x, pf.y + 2.0 * (cos30 - pf.y));\n    // project to hypotenuse then double to obtain reflection\n    vec2 q3 = dot(pf, v3) / dot(v3, v3) * v3;\n    q3 = pf + 2.0 * (q3 - pf);\n    // snub point is at half the hypotenuse of the new right triangle (Thales's theorem)\n    return q1 + ((q3 - q1) / 2.0);\n}\n\nfloat sdSchwartz632Snub(vec2 p, float t) {\n    // p the uv\n    // t the thickness\n    // take advantage of symmetry\n    float a = atan(p.y, p.x);\n    float M = floor(mod(degrees(a) - 30.0, 360.0) / 60.0) * 60.0;\n    p = rotmat2(radians(M)) * p;\n    // central point\n    float d = sdCircle(p, t);\n    // snub point\n    vec2 g = snub632();\n    // rotate\n    vec2 G = rotmat2(radians(180.0)) * (g - v2) + v2;\n    // d = opUnion(d, opOnion(sdTriangle(p, v1, v2, v3), t*0.25)); \n    d = opUnion(d, sdSegment(p, g, G) - t);\n    // fix by https://www.shadertoy.com/user/mla\n    d = opUnion(d, sdSegment(rotmat2(radians(-60.0)) * p, g, G) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(-60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+120.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+180.0)) * (G - g) + g) - t);\n    return d;\n}\n\nfloat sdSchwartz632DualSnub(vec2 p, float t) {\n    // p the uv\n    // t the thickness\n    // snub point\n    vec2 g = snub632();\n    // take advantage of symmetry\n    float a = atan(p.y, p.x) - (atan(g.y, g.x) - radians(60.0));\n    float M = floor(mod(degrees(a), 360.0) / 60.0) * 60.0;\n    p = rotmat2(radians(M)) * p;\n    // central point\n    float d = sdCircle(p, t);\n    float R3 = sqrt3 / 2.0 * length(g);\n    float r3 = sqrt3 / 6.0 * length(g); \n    vec2 n0 = normalize(rotmat2(radians(+30.0)) * g);\n    vec2 n1 = (R3 + r3) * n0;\n    vec2 n2 = n1 + rotmat2(radians(-60.0)) * (2.0 * r3 * n0);\n    vec2 n3 = n1 + rotmat2(radians(+60.0)) * (2.0 * r3 * n0);\n    d = opUnion(d, sdSegment(p, v1, n1) - t);\n    d = opUnion(d, sdSegment(p, n1, n2) - t);\n    d = opUnion(d, sdSegment(p, n1, n3) - t);\n    d = opUnion(d, sdSegment(p, n2, n1 + n2 + -n3) - t);\n    d = opUnion(d, sdSegment(p, n3, n1 + n3 + -n2) - t);\n    return d;\n}\n\nfloat sdSchwartz632(vec2 p, vec2 g, float m, float w, float t) {\n    // p the uv\n    // g the generator point\n    // m the mirror toggle\n    // w the wall toggle\n    // t the thickness\n    // snub case\n    if (m == 8.0) {\n        return sdSchwartz632Snub(p, t);\n    }\n    // snub case\n    else if (m == 9.0) {\n        return sdSchwartz632DualSnub(p, t);\n    }\n    p = abs(p);\n    if (p.y < 2.0 * cos30 * p.x) {\n        p = rotmat2(radians(-60.0)) * p;\n        p = abs(p);\n    }\n    float d = sdCircle(p, t); \n    // d = opUnion(d, opOnion(sdTriangle(p, v1, v2, v3), t*0.25)); \n    d = opUnion(d, sdCircle(p - g, t));\n    d = bool(mod(m, 2.0)) ? opUnion(d, sdSegment(p, g, vec2(0, g.y)) - t) : d;\n    vec2 v = v3 - v1;\n    d = bool(mod(floor(m / 2.0), 2.0)) ? opUnion(d, sdSegment(p, g, dot(g, v) / dot(v, v) * v) - t) : d;\n    d = bool(mod(floor(m / 4.0), 2.0)) ? opUnion(d, sdSegment(p, g, vec2(g.x, v2.y)) - t) : d;\n    d = bool(mod(w, 2.0)) ? opUnion(d, sdSegment(p, v1, v2) - t) : d;\n    d = bool(mod(floor(w / 2.0), 2.0)) ? opUnion(d, sdSegment(p, v1, v3) - t) : d;\n    d = bool(mod(floor(w / 4.0), 2.0)) ? opUnion(d, sdSegment(p, v2, v3) - t) : d;\n    return d;\n}\n\nfloat sdSchwartz632Plane(vec2 p, vec2 g, float m, float w, float t) {\n    // p the uv\n    // g the generator point\n    // m the mirror toggle\n    // w the wall toggle\n    // t the thickness\n    vec2 v = vec2(3.0, 2.0 * cos30);\n    vec2 p1 = opRep(p, v);\n    vec2 p2 = opRep(p + v / 2.0, v);\n    return opUnion(\n        sdSchwartz632(p1, g, m, w, t),\n        sdSchwartz632(p2, g, m, w, t)\n    );\n}\n\nfloat sdCasparKlugFacet(vec2 p, float h, float k, vec2 g, float m, float w, float t) {\n    // @p vec2 the uv\n    // @h float the h-parameter (steps on plane)\n    // @k float the k-parameter (steps on plane after 60-degree turn)\n    // @g vec2 the generator point for Wythoff construction\n    // @m float the bits representing the activated mirrors for Wythoff construction\n    // @w float the bits representing the fundamental triangle wall display\n    // @t float the edge thickness\n    mat2 b = mat2(1.5, cos30, 0.0, 2.0 * cos30);\n    // vec2 t1 = vec2(0);\n    vec2 t2 = b * vec2(h, k);\n    vec2 t3 = rotmat2(radians(-60.0)) * t2;\n    \n    float s = length(t2); // side\n    // vec2 c = (t1 + t2 + t3) / 3.0; // centroid\n    vec2 c = (t2 + t3) / 3.0; // centroid\n    \n    float d = sdSchwartz632Plane((rotmat2(-atan(t2.y, t2.x)) * p) + c, g, m, w, t);\n    // d = opUnion(d, opOnion(sdCircle(p, 1.5 * t), t)); \n    // d = opUnion(d, opOnion(sdEquilateralTriangle(p, s / 2.0), t));\n    d = opIntersection(d, sdEquilateralTriangle(p, s / 2.0));\n\n    return d;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}