{
    "Shader": {
        "info": {
            "date": "1617410120",
            "description": "Something cool.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sBGWW",
            "likes": 7,
            "name": "Raymarching Creation #?",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "creation",
                "smoothmod"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718 // 2 * pi\n#define RHO 1.57079632679 // pi / 2\n\n// SDFs\nfloat sdBox(in vec3 p, in vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(0.0, max(q.x, max(q.y, q.z)));\n}\n\n// Distance operators\nfloat smoothMod(in float x, in float size, in float smoothness) {\n    return asin(sin(x / size) * (1.0 - smoothness)) * size;\n}\n\n// r: vec2(horizontal repeats, vertical repeats)\n// Not sure if this actually \"works\"\nvoid pSmoothModSpherical(inout vec3 p, in vec2 r, in float s) {\n    vec2 a = TAU / r, ha = 0.5 * a;\n    p.xz = sin(smoothMod(atan(p.z, p.x) + ha.x, a.x, s) - ha.x + vec2(RHO, 0.0)) * length(p.xz);\n    p.xy = sin(smoothMod(atan(p.y, p.x) + ha.y, a.y, s) - ha.y + vec2(RHO, 0.0)) * length(p.xy);\n}\n\n// Scene\nfloat mapScene(in vec3 p) {\n    float c = cos(244.18), s = sin(244.18);\n    p.xz *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n\n    pSmoothModSpherical(p, vec2(100.0), 0.5);\n    p.yz *= mat2(c, -s, s, c);\n    vec3 q = abs(p - vec3(2.0, 0.0, 0.0)) - 0.1;\n    float boxes = max(q.x, max(q.y, q.z));\n\n    return boxes;\n}\n\n// Gradient\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 mouse = true ? (iMouse.xy - center) / iResolution.y * 3.14 : vec2(0.0);\n    vec2 uv = (fragCoord - center) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 6.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Sky\n    fragColor = vec4(mix(vec3(0.25, 0.25, 1.0), vec3(1.0), 0.5 + 0.5 * rd.y), 1.0);\n\n    // Raymarch\n    float t = 0.0, d;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n\n            vec3 color = abs(n) * 1.25;\n            fragColor.rgb = color * max(0.2, dot(n, l));\n\n            break;\n        }\n\n        if (t > 50.0) {\n            break;\n        }\n\n        t += d;\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}