{
    "Shader": {
        "info": {
            "date": "1618256863",
            "description": "The first real thing I've made with ray marching. I've mostly using bits from Bigwings, and evvvil's tutoirals. I'm sure I'm doing a lot of things wrong. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NdsSzn",
            "likes": 11,
            "name": "Donut Holes",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "#define MAX_STEP 128\n#define MAX_DIST 300.0\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nvec2 Dist(vec3 p){\n    float tt= iTime;\n    vec3 po = p;\n    vec3 p2 = p;\n    \n    p.xz = mod(p.xz,3.0)-1.5;\n    \n    vec2 h; vec2 t;\n    \n    float y = 1.5*sin((floor(p2.x/3.0)+0.5)*sin(tt)*0.6)*cos((floor(p2.z/3.0)+0.5)*sin(tt)*0.6);\n    \n    t = vec2(sdTorus(p+vec3(0,y,0),vec2(1.0,0.4)*0.8),1.0);\n    h = vec2(sdSphere(p+vec3(0,y*3.0,0),0.4),3.0);\n    \n    t=(t.x<h.x)?t:h;\n    p2.xz = mod(p.xz-1.5,3.0)-1.5;\n    vec2 d = abs(p2.xz)-1.9 ;\n    vec2 b = vec2(max(d.x,d.y),0);\n   // b.x = min(-(abs(p.y)-2.1),b.x);\n    b.x = -b.x;\n    if(length(po)<50.0)t=(t.x<b.x)?t:b;\n    \n    return vec2(t.x,t.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float t = iTime*0.25;\n   \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(7.0*sin(t),5.5,7.0*cos(t));\n    \n    vec3 lookat = vec3(0,3.1,0); \n    float zoom = 1.1;\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f,r);\n    \n    vec3 c = ro + f*zoom; \n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    vec3 rd = i-ro; \n    float dO = 0.0;\n    float shad = 1.0;\n    vec2 d;\n    for(int i = 0; i<MAX_STEP; i++){\n        vec3 p = ro + rd * dO;    \n        d = Dist(p);       \n        dO += d.x;\n        if(dO>MAX_DIST || d.x < 0.0001) {\n            shad = float(i)/float(MAX_STEP); //found this in one of flopine's shader\n            break;\n        }\n    }\n    col = vec3(shad)*(1.0-dO/MAX_DIST);\n    //col *= 1.0-(dO/MAX_DIST)*1.0;\n    col = 1.2-col;\n    if(d.y > 0.5)col*=mix(vec3(0.710,0.549,1.000),vec3(0.000,0.000,0.000),(dO/MAX_DIST));\n    if(d.y > 1.5)col*=vec3(1.000,0.035,0.059)+0.2;\n    \n    col = mix(col, vec3(0.369,0.000,0.357), clamp(dO/MAX_DIST,0.0,1.0));\n     \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}