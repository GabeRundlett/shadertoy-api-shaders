{
    "Shader": {
        "info": {
            "date": "1461091170",
            "description": "clcik with mouse to see in yellow the var S and in violet the var T. (x axis is the iteration, y axis is the value)\nthe label in top left is the iteration before break\nthe two curve has not the same scaled\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XdcXDS",
            "likes": 4,
            "name": "RM Study : Convergence S vs T",
            "published": 3,
            "tags": [
                "d",
                "rm",
                "study",
                "convergence",
                "s",
                "vs"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2015 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nconst vec2 ballParams = vec2(4.78, 4.5);\n\n#define break_condition 0.01*log(t*t/s/1e4)\n#define curve1_var s\n#define curve2_var log(t*t/s)\n\n#define MAX_DISTANCE 20.\n/////////////////////////\n// GLSL Number Printing - @P_Malin (CCO 1.0)=> https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin(const in int x){\n    if(x==0) return 480599.0; if(x==1) return 139810.0; if(x==2) return 476951.0; if(x==3) return 476999.0;\tif(x==4) return 350020.0; \n    if(x==5) return 464711.0; if(x==6) return 464727.0; if(x==7) return 476228.0; if(x==8) return 481111.0; if(x==9) return 481095.0; \n    return 0.0;}\nfloat PrintValue(vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n            if((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;} \n        else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;} \n            else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));} } }\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));}\nvec3 WriteValueToScreenAtPos(vec2 fragCoord, float vValue, vec2 vPixelCoord, vec3 vColour, vec2 vFontSize, float vDigits, float vDecimalPlaces, vec3 vColor){\n    float num = PrintValue(fragCoord, vPixelCoord, vFontSize, vValue, vDigits, vDecimalPlaces);\n    return mix( vColour, vColor, num);}\n\n/////////////////////////////////////////////////////////////////\n\nvec4 displ(vec3 p)\n{\n    vec2 g = p.xz;\n    vec3 col =  texture(iChannel0, g+iTime*0.1).rrr;\n   \tcol = clamp(col, 0., 1.);\n    float dist = dot(col,vec3(0.11));\n    return vec4(dist,col);\n}\n\nfloat df(vec3 p)\n{\n    vec4 disp1 = displ(p*0.07); // 0.1 ca merde 0.11 ca marche....\n    float m = length(p);\n    float me = m - ballParams.x + disp1.x;\n    float mi = m - ballParams.y - disp1.x;\n    return max(-mi, me);\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy) - df(pos-eps.xyy),\n\t    df(pos+eps.yxy) - df(pos-eps.yxy),\n\t    df(pos+eps.yyx) - df(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 uvn = fragCoord/si*vec2(1.,20.);\n\tvec2 g = fragCoord;\n    if (iMouse.z > 0.)\n\t\tg = iMouse.xy;\n\t\n\tvec2 uv = (g+g-si)/min(si.x, si.y);\n\tfloat d = 1.88;\n\tfloat a = iTime;\n\tfloat e = 10.52;\n    vec3 ro = vec3(cos(a)*d,e, sin(a)*d);\n\n    vec3 cu = vec3(0,1,0);\n    vec3 co = vec3(0);\n\t\n\tfloat fov = 0.5;\n\tvec3 z = normalize(co - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * uv.x * x + fov * uv.y * y);\n\t\n\tfloat s = 1., so = 1.;;\n\tfloat t = 0.0;\n\tvec3 p = ro;\n\t\n\tfloat c = 0.;\n\tvec3 curve0 = vec3(0);\n\tvec3 curve1 = vec3(0);\n    vec3 curve2 = vec3(0);\n    float outStep = 0.;\n\tfor (float i=0.; i< 950.; i++)\n\t{\n\t\tif (iMouse.z > 0. && abs(fragCoord.x - i) < 1.)\n\t\t{\n\t\t\tcurve0 += 0.048 * vec3(1,1,0) / length(uvn.y - curve1_var);\n\t\t\tcurve1 += 0.048 * vec3(0.48,0,0.48) / length(uvn.y - curve2_var);\n            if(t>MAX_DISTANCE)\n            \tcurve2 += 0.2 * vec3(0,0,1) / uvn.x;\n            else if(s < break_condition)\n            \tcurve2 += 0.2 * vec3(1,0,1) / uvn.x;\n        }\n\t\tif (s < break_condition || t > MAX_DISTANCE ) break;\n\t\ts = df(p);\n        s *= (s>so?2.:1.);so=s; // Enhanced Sphere Tracing => lgdv.cs.fau.de/get/2234 \n\t\tt += s * 0.2;\n\t\tp = ro + rd * t;\n\t\toutStep++;\n\t}\n\tif (iMouse.z > 0.)\n    {\t\n        fragColor = vec4(curve0 + curve1 + curve2,1);\n    \tfragColor.rgb = WriteValueToScreenAtPos(fragCoord, outStep, vec2(20,si.y-20.), \n                                                fragColor.rgb, vec2(12.0, 15.0), 1., 0., vec3(0.9));\n    }\n\telse\n\t\tfragColor = vec4(nor(p,s), 1);\n\t\t\n\t\t\n\t\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}