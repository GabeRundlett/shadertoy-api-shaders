{
    "Shader": {
        "info": {
            "date": "1548441435",
            "description": "modification of https://www.shadertoy.com/view/Wss3Df",
            "flags": 0,
            "hasliked": 0,
            "id": "3d2GRw",
            "likes": 4,
            "name": "skin face II",
            "published": 3,
            "tags": [
                "subsurface",
                "face",
                "skin",
                "inhuman",
                "freckle"
            ],
            "usePreview": 1,
            "username": "mds2",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 4.0\n\n\n\nconst float cutoff = 0.81; // ad-hoc, should be much larger\n\nfloat pill(in vec3 pt, in float l, in float r) {\n    vec3 to_core = abs(pt - vec3(0.0, 0.5 * l, 0.0));\n    to_core.y -= 0.5 * l;\n    to_core = max(vec3(0.0), to_core);\n    return length(to_core) - 2.0 * r;\n}\n\n\nfloat dist_sqrd(in vec3 p1, in vec3 p2) {\n    vec3 rel = p1 - p2;\n    return dot(rel, rel);\n}\n\nfloat balls_sdf(in vec3 pt) {\n    float l_squared = min(dist_sqrd(pt, vec3(0.085, 0.25, 0.15)),\n                          dist_sqrd(pt, vec3(-0.085, 0.25, 0.15)));\n    return sqrt(l_squared) - 0.04;\n}\n\nvec3 balls_sdf_grad(in vec3 pt) {\n    float f = balls_sdf(pt);\n    const float h = 0.001;\n    const float h_inv = 1000.0;\n    \n    return h_inv *\n        vec3(balls_sdf(pt + vec3(h, 0.0, 0.0)) - f,\n             balls_sdf(pt + vec3(0.0, h, 0.0)) - f,\n             balls_sdf(pt + vec3(0.0, 0.0, h)) - f);\n}\n\nfloat sdf(in vec3 pt) {\n    float d1 = pill(pt - vec3(0.0, 0.25, 0.0), 0.0, 0.1);\n    float d2 = pill(pt - vec3(0.0, 0.05, 0.075), 0.1, 0.055);\n    float socket1 = -pill(pt - vec3(0.075, 0.25, 0.15), 0.0, 0.025);\n\tfloat socket2 = -pill(pt - vec3(-0.075, 0.25, 0.15), 0.0, 0.025);\n\tfloat face = smooth_min(d1, d2, 0.15);\n    float sockets = smooth_max(socket1, socket2, 0.05);\n    return smooth_max(face, sockets, 0.05);\n}\n\nvec3 sdf_grad(in vec3 pt) {\n    float f = sdf(pt);\n    const float h = 0.001;\n    const float h_inv = 1000.0;\n    \n    return h_inv *\n        vec3(sdf(pt + vec3(h, 0.0, 0.0)) - f,\n             sdf(pt + vec3(0.0, h, 0.0)) - f,\n             sdf(pt + vec3(0.0, 0.0, h)) - f);\n}\n\nfloat raymarch_to_eyes(in vec3 pt, in vec3 dir) {\n    vec3 d = normalize(dir);\n    vec3 p = pt;\n    float accum = 0.0;\n    float s = balls_sdf(pt);\n    for(int i = 0; i < 128; ++i) {\n        if (accum > MAX_DIST || s < 1.0e-3) {\n            return accum;\n        }\n        accum += 0.75 * s;\n        p = pt + accum * d;\n        s = balls_sdf(p);\n    }\n    if (s > 1.0e-3) {\n        return MAX_DIST + 1.0;\n    }\n    return accum;\n}\n\n\nfloat raymarch(in vec3 pt, in vec3 dir) {\n    vec3 d = normalize(dir);\n    vec3 p = pt;\n    float accum = 0.0;\n    float s = sdf(pt);\n    for(int i = 0; i < 128; ++i) {\n        if (accum > MAX_DIST || s < 1.0e-3) {\n            return accum;\n        }\n        accum += 0.75 * s;\n        p = pt + accum * d;\n        s = sdf(p);\n    }\n    if (s > 1.0e-3) {\n        return MAX_DIST + 1.0;\n    }\n    return accum;\n}\n\nfloat raymarch_out(in vec3 pt, in vec3 dir) {\n    vec3 d = normalize(dir);\n    vec3 p = pt;\n    float accum = 0.0;\n    float s = sdf(pt);\n    for(int i = 0; i < 2; ++i) {\n        if (accum > 1.0e-3 && s > -1.0e-3) {\n            return accum;\n        }\n        accum += 0.75 * max(abs(s), 1.0e-3);\n        p = pt + accum * d;\n        s = sdf(p);\n    }\n    if (s < -1.0e-3) {\n        return 1000.0;\n    }\n    return accum;\n}\n\nfloat ramp(in float a, in float b, in float x) {\n    float p = (x-a)/(b-a);\n    return clamp(p, 0.0, 1.0);\n}\n\nvec4 color_at(in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 dir = normalize(vec3(uv, 6.0));\n    \n    vec3 orig = vec3(0.0, 0.25, -2.5);\n    \n    float theta = 0.25 * sin(iTime) + 3.141592654;\n    float ct = cos(theta);\n    float st = sin(theta);\n    \n    mat3 spin = mat3(ct, 0.0, st,\n                     0.0, 1.0, 0.0,\n                     -st, 0.0, ct);\n    \n    theta = 0.25 * sin(iTime);\n    vec2 trigs = cos(vec2(theta, theta + 0.5 * 3.141592654));\n    ct = 0.8 * trigs.x - 0.6 * trigs.y;\n    st = 0.6 * trigs.x + 0.8 * trigs.y;\n\ttheta = 0.25 * sin(1.21 * iTime);\n    trigs = cos(vec2(theta, theta + 0.5 * 3.141592654));\n    ct = 0.6 * trigs.x - 0.8 * trigs.y;\n    st = 0.8 * trigs.x + 0.6 * trigs.y;\n    \n    \n    theta = 0.25 * sin(0.93 * iTime);\n    trigs = cos(vec2(theta, theta + 0.5 * 3.141592654));\n    ct = 0.8 * trigs.x - 0.6 * trigs.y;\n    st = 0.6 * trigs.x + 0.8 * trigs.y;\n    \n    orig = spin * orig;\n    dir = spin * dir;\n    \n    float dist = raymarch(orig, dir);\n    float eye_dist = raymarch_to_eyes(orig, dir);\n    \n    vec3 color_mul = vec3(1.0);\n    float bright = 0.0;\n    \n    if (eye_dist < dist && eye_dist < MAX_DIST) {\n    \torig = orig + eye_dist * dir;\n        vec3 n = normalize(balls_sdf_grad(orig));\n        dir = normalize(reflect(dir, n));\n        dist = MAX_DIST + 1.0; // raymarch(orig, dir);\n        float to_face = raymarch(orig, dir);\n        color_mul = vec3(vec2(1.0), 2.5);\n        if (to_face < MAX_DIST) {\n            color_mul = vec3(0.1);\n        } else {\n            bright = 1.0;\n        }\n    }\n    \n    \n    vec3 refl_color = vec3(1.0);\n    vec3 trans_color = vec3(1.0, 0.5, 0.4);\n    const vec3 light_dir = vec3(1.0, 0.0, 0.0);\n    float thru_dist = 1000.0;\n    vec3 n = dir;\n    vec2 freckles = vec2(0.0, 0.0);\n    if (dist < MAX_DIST) {\n        vec3 pt = orig + dir * dist;\n        n = normalize(normalize(sdf_grad(pt)) + 0.1 * noise3(20.0 * pt, 102.1));\n        float dist_out = raymarch_out(orig + dir * (dist + 1.0e-2), dir);\n        freckles = smoothstep(0.2, 2.0, noise2(42.0 * pt, 10.1));\n        // freckles = vec2(0.0, 1.0);\n        bright = ramp(0.0, 1.0 / iResolution.y, dist_out);\n        dir = mix(dir, normalize(reflect(dir, n)), bright);\n        thru_dist = raymarch_out(orig + dir * (dist + 1.0e-2), light_dir);\n        refl_color = vec3(0.8, 0.7, 0.6);\n    }\n\n    vec3 col = (0.5 + 0.5 * bright) *\n        (0.1 * (1.0 + 2.0 * freckles.x) * smoothstep(0.7, 1.0, dot(dir, light_dir)) + 0.7 * smoothstep(0.1, 1.0,\n                                                                      dot(n, light_dir)))*\n        refl_color;\n    \n    col += bright * (0.25 + 1.5 * freckles.y) * (1.0 / max(abs((1.0 + freckles.y) * thru_dist), 0.5)) * trans_color;\n\n    // col = vec3(freckles, 0.0);\n    // Output to screen\n    return  vec4(color_mul * col,1.0);\n}\n\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 col_out = 0.25 * color_at(fragCoord);\n    const float scatter_scale = 0.8;\n    col_out += 0.25 * color_at(fragCoord + scatter_scale * vec2(0.6, 0.8));\n    col_out += 0.25 * color_at(fragCoord + scatter_scale * vec2(-1.0, 0.0));\n    col_out += 0.25 * color_at(fragCoord + scatter_scale * vec2(0.0, -1.0));\n    fragColor = col_out;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat squircle_max(in float x, in float y, float off) {\n    float x2 = (x + off) * (x + off);\n    float x4 = x2 * x2;\n    float y2 = (y + off) * (y + off);\n    float y4 = y2 * y2;\n    return sqrt(sqrt(x4 + y4)) - off;\n}\n\n\nvec3 squircle_max(in vec3 x, in vec3 y, float off) {\n\treturn vec3(squircle_max(x.x, y.x, off),\n                squircle_max(x.y, y.y, off),\n                squircle_max(x.z, y.z, off));\n}\n\nfloat smooth_max(in float x, in float y, in float s) {\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return max(x,y) + 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\n\nvec3 smooth_max(in vec3 x, in vec3 y, float s) {\n\treturn vec3(smooth_max(x.x, y.x, s),\n                smooth_max(x.y, y.y, s),\n                smooth_max(x.z, y.z, s));\n}\n\nfloat smooth_min(in float x, in float y, in float s) {\n\n    float bridge =\n        clamp(abs(x-y)/s, 0.0, 1.0);\n    return min(x,y) - 0.25 * s * (bridge - 1.0) * (bridge - 1.0);\n}\n\nvec3 smooth_min(in vec3 x, in vec3 y, float s) {\n\treturn vec3(smooth_min(x.x, y.x, s),\n                smooth_min(x.y, y.y, s),\n                smooth_min(x.z, y.z, s));\n}\n\n\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// All hash functions copied from https://www.shadertoy.com/view/Xt3cDn\n// Thanks, nimitz!\n\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\n//Faster than \"full\" xxHash and good quality\nuint baseHash(uvec2 p)\n{\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\n//--------------------------------------------------\n\nfloat hash13(vec3 x)\n{\n    uint n = baseHash(floatBitsToUint(x.xy)) ^\n        baseHash(floatBitsToUint(x.yz)) ^\n        baseHash(floatBitsToUint(x.zx));\n    \n    return float(n & 0x7fffffffU)/float(0x7fffffff);\n}\n\n\nfloat noise_term(in vec3 x, in float scale_val) {\n    vec3 s = vec3(scale_val);\n    vec3 x000 = x - mod(x, s);\n    vec3 x001 = x + vec3(0.0, 0.0, scale_val);\n    x001 = x001 - mod(x001, s);\n    vec3 x010 = x + vec3(0.0, scale_val, 0.0);\n    x010 = x010 - mod(x010, s);\n    vec3 x011 = x + vec3(0.0, s.xy);\n    x011 = x011 - mod(x011, s);\n    vec3 x100 = x + vec3(scale_val, 0.0, 0.0);\n    x100 = x100 - mod(x100, s);\n    vec3 x101 = x + vec3(scale_val, 0.0, scale_val);\n    x101 = x101 - mod(x101, s);\n    vec3 x110 = x + vec3(s.xy, 0.0);\n    x110 = x110 - mod(x110, s);\n    vec3 x111 = x + s;\n    x111 = x111 - mod(x111, s);\n    \n    float v000 = hash13(x000);\n    float v001 = hash13(x001);\n    float v010 = hash13(x010);\n    float v011 = hash13(x011);\n    float v100 = hash13(x100);\n    float v101 = hash13(x101);\n    float v110 = hash13(x110);\n    float v111 = hash13(x111);\n    \n    vec3 uvw = mod(x, s) / s;\n    \n    float zweight = smoothstep(0.0, 1.0, uvw.z);\n    float v00 = mix(v000, v001, zweight);\n    float v01 = mix(v010, v011, zweight);\n    float v10 = mix(v100, v101, zweight);\n    float v11 = mix(v110, v111, zweight);\n    \n    float yweight = smoothstep(0.0, 1.0, uvw.y);\n    float v1 = mix(v10, v11, yweight);\n    float v0 = mix(v00, v01, yweight);\n    \n    float xweight = smoothstep(0.0, 1.0, uvw.x);\n    \n    return mix(v0, v1, xweight);\n}\n\nfloat noise(in vec3 x, in float base_scale, in float space_decay, in float height_decay,\n           in float shift_by) {\n\tfloat h = 1.0;\n    float s = base_scale;\n\n    float summation = 0.0;\n    \n    for (int i = 0; i < 5; ++i) {\n    \tsummation = summation + h * noise_term(x + vec3(0.0, 0.0, s * shift_by), s);\n        s *= space_decay;\n        h *= height_decay;\n    }\n    return summation;\n}\n\nfloat simple_noise(in vec3 uv, in float shift_by) {\n  return noise(uv * 10.0, 5.0, 0.75, 0.75, shift_by);\n}\n\nvec2 noise2(in vec3 uv, in float shift_by) {\n    return vec2(simple_noise(uv, shift_by),\n                simple_noise(uv + vec3(0.0, 0.0, 101.0), shift_by));\n}\n\nvec3 noise3(in vec3 uv, in float shift_by) {\n    return vec3(simple_noise(uv, shift_by),\n                simple_noise(uv + vec3(0.0, 0.0, 101.0), shift_by),\n               simple_noise(uv + vec3(0.0, 101.0, 0.0), shift_by));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}