{
    "Shader": {
        "info": {
            "date": "1708956831",
            "description": "The implementation based on Wikipedia: https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model",
            "flags": 0,
            "hasliked": 0,
            "id": "XXSGRV",
            "likes": 4,
            "name": "Blinn-Phong Test",
            "published": 3,
            "tags": [
                "normal",
                "blinnphong"
            ],
            "usePreview": 1,
            "username": "1095",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// Learning Blinn-Phong...\n// Happy coding!\n//\n// The implementation based on Wikipedia: https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model\n//\n// SPDX-License-Identifier: Unlicense\n// This is free and unencumbered software released into the public domain.\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat luminance(vec3 color) {\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec3 normalMap(vec2 uv, sampler2D tex, vec2 texelSize, float scale) {\n\tvec2 d = vec2(\n        luminance( texture(tex, uv + vec2(texelSize.x, 0)).rgb ) -\n        luminance( texture(tex, uv - vec2(texelSize.x, 0)).rgb ),\n        luminance( texture(tex, uv + vec2(0, texelSize.y)).rgb ) -\n        luminance( texture(tex, uv - vec2(0, texelSize.y)).rgb )\n    );\n    \n    return .5+.5*normalize(vec3(-d*scale, 1.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 ts = 1. / iChannelResolution[0].xy;\n\n    vec3  LIGHT_COLOR    = vec3(1., 1., 1.);\n    vec3  AMBIENT_COLOR  = vec3(0., 0., 0.);\n    vec3  SPECULAR_COLOR = vec3(1., 1., 1.);\n    vec3  DIFFUSE_COLOR  = texture(iChannel0, uv).rgb;\n    float SHININESS      = 64.;\n    \n    vec3 p = vec3(uv, 0.);\n    vec3 LightPos = vec3( mouse, .3);\n    vec3 ViewPos  = vec3(.5, .5, 4.);\n    \n    vec3 LightDir = normalize( LightPos - p );\n    vec3 ViewDir  = normalize( ViewPos  - p );\n    vec3 HalfDir  = normalize( LightDir + ViewDir );\n    \n    vec3 Normal = normalMap(uv, iChannel0, ts, 5.);\n    Normal = 2.*Normal-1.;\n    \n    float diffuseFactor  = max(dot(Normal, LightDir), 0.);\n    vec3  diffuse  = DIFFUSE_COLOR  * LIGHT_COLOR * diffuseFactor;\n    \n    float specularFactor = pow(max(dot(Normal, HalfDir), 0.), SHININESS);\n    vec3  specular = SPECULAR_COLOR * LIGHT_COLOR * specularFactor;\n    \n    vec3  color = AMBIENT_COLOR + diffuse + specular;\n    \n    fragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}