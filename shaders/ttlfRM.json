{
    "Shader": {
        "info": {
            "date": "1596372589",
            "description": "Visual experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlfRM",
            "likes": 52,
            "name": "Floating color bubbles",
            "published": 3,
            "tags": [
                "circles",
                "colors",
                "depth",
                "focus"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 1322
        },
        "renderpass": [
            {
                "code": "#define TOTAL_LAYERS 12.0 \n\n#define hue(h) clamp( abs( fract(h + vec4(3,2,1,0)/3.) * 6. - 3.) -1. , 0., 1.)\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n { \n    vec2 uv = (fragCoord.xy) / iResolution.x + vec2(100.);    \n                             \n    vec3 col = vec3(0.); \n        \n     \n    for(float layer =1.; layer <= TOTAL_LAYERS; layer++ ) {\n    \n        float SIZE = (17. - layer) * .5;\n        vec2 luv = uv * SIZE;\n    \tvec2 id = floor(luv);\n    \tluv = fract(luv) - 0.5;\n                       \n        for(float y =- 1.0; y <= 1.0; y++ ) {\n        \tfor(float x =- 1.0; x <= 1.0; x++ ) {\n                vec2 rid = id - vec2(x, y);\n\n                float rFactor1 = hash12(rid + 542. * layer);\n                float rFactor2 = hash12(rid + 159. * layer);\n                \n                float t = iTime*5.5/(10. + layer*5./rFactor1) + 100. * rFactor2;\n\n                vec2 ruv = luv + vec2(x, y) +                 \n                    vec2(\n                        sin(iTime*.1 + t + rFactor1),\n                        sin(iTime*.2 + t*.9 + rFactor2)                    \n                    );            \n\n                float l = length(ruv);            \n                float ld = length(ruv - vec2(.075));  \n                \n                float SF = 1./min(iResolution.x,iResolution.y)*SIZE*(layer*2.);\n\n                float d = smoothstep(SF,-SF,l-(.125 + hash12(rid + 700.)*.25));      \n\n                // Remove some bubbles to make breath space\n                d *= step(hash12(rid*75.4 + 100.), .5 + (layer/TOTAL_LAYERS));\n\n                // Determine bubble color factor\n                float colFactor = hash12(rid + 500.); // + iTime*.1;\n\n                vec3 iCol = hue(colFactor).rgb * d * (.7 + smoothstep(.1,.5,ld)*1.);\n\n                col = col + iCol*(.25 + (1. - layer/TOTAL_LAYERS)*.2); \n            \n        \t}\n    \t}                \n    }\n     \n    \n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}