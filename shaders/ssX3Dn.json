{
    "Shader": {
        "info": {
            "date": "1615763624",
            "description": "A blobby structure. Arrow keys to move and mouse to look around.",
            "flags": 48,
            "hasliked": 0,
            "id": "ssX3Dn",
            "likes": 3,
            "name": "Gloopy Honeycomb",
            "published": 3,
            "tags": [
                "blobby",
                "integration",
                "honey",
                "sticky",
                "gloopy"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "// ∫(cos(2(o + dt)) •〈 1, 1, 1 〉- 1) / 2\n// Integrals get very complicated very fast it seems :(\nfloat getVolume(in vec3 ro, in vec3 rd, in float tmin, in float tmax) {\n    return 0.25 * dot(sin(2.0 * (ro + rd * tmin)) - sin(2.0 * (ro + rd * tmax)), 1.0 / rd) + 0.5 * (tmax - tmin);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec3 ro = getCameraPosition() + vec3(HALF_PI, HALF_PI, 0.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    vec2 viewDir = (iMouse.xy - center) / iResolution.y * TWO_PI * ROTATION_SPEED;\n    float cy = cos(viewDir.x), sy = sin(viewDir.x);\n    float cp = cos(viewDir.y), sp = sin(viewDir.y);\n\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float volume = getVolume(ro, rd, 0.0, 5.0) / 5.0;\n    fragColor = vec4(vec3(1.0, 0.7, 0.4) * volume, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame > 0) {\n        ivec2 addr = ivec2(fragCoord);\n        if (addr == CAM_POS_ADDR) {\n            fragColor = vec4(getCameraPosition(), 1.0);\n\n            vec2 viewDir = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * TWO_PI * ROTATION_SPEED;\n            mat3 cam = getCamera(viewDir);\n\n            if (keyUpPressed()) {\n                fragColor.xyz += cam[2] * STEP_SIZE;\n            }\n\n            if (keyDownPressed()) {\n                fragColor.xyz -= cam[2] * STEP_SIZE;\n            }\n\n            if (keyRightPressed()) {\n                fragColor.xyz += cam[0] * STEP_SIZE;\n            }\n\n            if (keyLeftPressed()) {\n                fragColor.xyz -= cam[0] * STEP_SIZE;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define HALF_PI 1.57079632679\n\n// Camera control:\n#define STEP_SIZE 0.1\n#define ROTATION_SPEED 0.5\n\n// Data addresses:\n#define CAM_POS_ADDR ivec2(0, 0)\n\n// Key codes from iq's keyboard input demo (https://www.shadertoy.com/view/lsXGzf):\n#define    KEY_UP 38\n#define  KEY_DOWN 40\n#define KEY_RIGHT 39\n#define  KEY_LEFT 37\n\n#define getCameraPosition() texelFetch(iChannel0, CAM_POS_ADDR, 0).xyz\n\n#define     keyUpPressed() bool(texelFetch(iChannel1, ivec2(38, 0), 0).x)\n#define   keyDownPressed() bool(texelFetch(iChannel1, ivec2(40, 0), 0).x)\n#define  keyRightPressed() bool(texelFetch(iChannel1, ivec2(39, 0), 0).x)\n#define   keyLeftPressed() bool(texelFetch(iChannel1, ivec2(37, 0), 0).x)\n\n// Computes camera matrix:\nmat3 getCamera(in vec2 viewDir) {\n    vec2 c = cos(viewDir); vec2 s = sin(viewDir);\n    return mat3(       c.x, 0.0,         s.x,  // Right\n                s.x * -s.y, c.y, -c.x * -s.y,  // Up\n                s.x *  c.y, s.y, -c.x *  c.y); // Forward\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}