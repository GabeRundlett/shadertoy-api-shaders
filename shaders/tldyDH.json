{
    "Shader": {
        "info": {
            "date": "1609811569",
            "description": "Making an eye shader to get more comfortable with fbm noise manipulation and polar coordinates.\n\nShader is following the tutorial by Inigo Quilez\nhttps://www.youtube.com/watch?v=emjuqqyq_qc",
            "flags": 0,
            "hasliked": 0,
            "id": "tldyDH",
            "likes": 3,
            "name": "Eye for Radial Fbm Practice",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "distortion",
                "eye",
                "radial",
                "practice"
            ],
            "usePreview": 0,
            "username": "specialsaucewc",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n\n// random hash via https://www.shadertoy.com/view/3d2GRh\n// I didnt update this hash until after I styled it -_- so it stays\nfloat hash( in ivec2 q )\n{\n    // You SHOULD replace this by something better. Again, Do Not Use in production.\n    int n = q.x*131 + q.y*57;\n    n = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float((n>>8)&0x007fffff)/float(0x007fffff);\n}\n\nfloat noise (in vec2 x, in int p)\n{\n    ivec2 i = ivec2(floor(x));\n    vec2 f = fract(x);\n    \n    f = f*f*(3.-2.*f);\n    \n    return mix(mix( hash((i+ivec2(0,0))&(p-1)), \n                    hash((i+ivec2(1,0))&(p-1)),f.x),\n               mix( hash((i+ivec2(0,1))&(p-1)), \n                    hash((i+ivec2(1,1))&(p-1)),f.x),f.y);\n}\n\nfloat fbm (in vec2 x, in int p)\n{\n    float f = 0.;\n    float s = .5;\n    for (int i=0; i<9; i++)\n    {\n        f += s*noise(x,p);\n        s *= .5;\n        x *= 2.;\n        p *= 2;\n    }\n    return f;\n}\n\nvec3 eye(in vec2 uv)\n{\n    vec2 ar = vec2(atan(uv.y, uv.x)/PI, length(uv));\n    vec3 bkgd = vec3(251.,247.,245.)/256.;\n    float f = fbm(8.*ar, 4);\n    vec3 col = vec3(0., .3, .4);\n    col = mix(col, vec3(.2, .5, .4), f);\n    \n    float t = .8 * iTime;\n    float ss = pow(abs(sin(t)), 4.) + pow(abs(sin(t + 2.)), 4.);\n    float anim = 1. + .2*ss*clamp(1.-2.*ar.y, 0., 1.);\n    ar.y *= anim;\n    \n    ar.x += .05 * fbm(20.*ar, 8);\n    \n    //pupil glow\n    f = smoothstep(.25, .15, ar.y);\n    vec3 glow = vec3(.9, .6, .2);\n    col = mix(col, glow, f);\n    \n    //strands\n    f = smoothstep(.3, 1., fbm(vec2(64., 10.)*ar, 16));\n        //mixed mainlines\n    vec3 strands = mix(vec3(12, 122, 4)/256., vec3(57, 237, 171)/256., fbm(8.*ar, 12));\n        //white striations\n    strands = mix(strands, vec3(1), pow(abs(sin(18.*PI*ar.x)), 8.));\n    col = mix(col, strands, f);\n    \n    //black\n    f = smoothstep( .4, .9, fbm(vec2(24., 8.)*ar, 8));\n    col *= 1. - .5*f;\n    \n    //dim edges\n    f = smoothstep(.55, .3, ar.y);\n    col *= f;\n    \n    //pupil\n    col *= smoothstep(.1, .15, ar.y);\n    \n    //reflection\n    f = smoothstep(.25, .0, length(uv - vec2(.1, .1)));\n    col += vec3(1., .9, .8)*f;\n    \n    //outer edge\n    f = smoothstep(.45, .43, ar.y);\n    col = mix(bkgd, col, f);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    col = eye(uv);\n    \n    //Debug tools\n    //col.rg = ar;\n    //vec2 ar = vec2(atan(uv.y, uv.x)/PI, length(uv));\n    //ar.x += .05 * fbm(20.*ar, 8);\n    //col = vec3(fbm(8.*ar, 12));\n    //col.gb = vec2(0.);col.r = ar.x * .5 + .5;col.g=ar.y;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}