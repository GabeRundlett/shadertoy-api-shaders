{
    "Shader": {
        "info": {
            "date": "1605819454",
            "description": "My take on the classic.\n\nBased on this shader: https://www.shadertoy.com/view/lsX3WM",
            "flags": 0,
            "hasliked": 0,
            "id": "3stfzj",
            "likes": 2,
            "name": "Twister effect",
            "published": 3,
            "tags": [
                "2d",
                "oldschool",
                "twister"
            ],
            "usePreview": 0,
            "username": "maksy",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "#define S smoothstep\nconst float M_PI = 3.141;\nconst float twister_thick = 0.22;\nconst float thick = 0.012;\n\nvec4 borderColor(float x0, float x1, vec2 uv, \n                 float leftVisible, float rightVisible, \n                 vec4 intCol, vec4 extCol) {\n\n    vec4 white = vec4(1.);\n    \n   \t// the exterior side of the left border\n\tfloat outside = (step(uv.x, x0-thick) + step(x0, uv.x));\n    vec4 borderLeft = mix(white, extCol, S(x0, x0-thick, uv.x)) \n    \t* (1. - outside) * leftVisible;\n        \n    // the interior side of the left border\n    outside = (step(uv.x, x0) + step(x0+thick, uv.x));\n    vec4 borderLeft2 = mix(intCol, white, S(x0+thick, x0, uv.x)) \n    \t* (1. - outside)* leftVisible;      \n    \n    // the exterior side of the right border\n    outside = (step(uv.x, x1) + step(x1+thick, uv.x));        \n    vec4 borderRight = mix(white, extCol, S(x1, x1+thick, uv.x))\n        * (1.- outside) * rightVisible ;\n    \n    // the interior side of the right border\n    outside = (step(uv.x, x1-thick) + step(x1, uv.x));            \n    vec4 borderRight2 = mix(intCol, white, S(x1-thick, x1, uv.x))\n    \t* (1.- outside) * rightVisible;\n    \n    return borderLeft + borderLeft2 + borderRight + borderRight2;     \n}\n\nvec4 getColor(float x0, float x1, vec2 uv, vec4 intCol, vec4 extCol,\n              vec4 fragColor) {\n      \n    vec4 rightCol = vec4(0.);\n    vec4 leftCol = vec4(0.);\n        \n    leftCol = borderColor(x0, x1, uv, 1., 0., intCol, extCol);       \n    rightCol = borderColor(x0, x1, uv, 0., 1., intCol, extCol);\n   \n    if (leftCol != vec4(0.))\n        return leftCol;\n    else if (rightCol != vec4(0.))\n   \t\treturn rightCol;                 \n   \n    return fragColor;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\t\t\n\t\n    vec2 uv = (fragCoord-0.5*iResolution.xy) / iResolution.y;\n\tvec4 white = vec4(1.0);\n\t\n    /* Creates four points and rotates them by sin of y, time and stuff.\n     * If p1 < p2, a side is visible. Draw a line between each such\n     * pair of points.\n     */\n    float twist = (M_PI / 180.0 * (iTime * 75.0 + \n\t\t\t\t(uv.y * 120.0) * sin((((iTime * 32.5) + \n\t\t\t\t(uv.y * 120.0)) * 3.0 / 4.0) * M_PI / 110.0) )) / .5;\n    \n\tfloat x0 = sin(twist) * twister_thick;\n\tfloat x1 = sin(0.5 * M_PI + twist) * twister_thick;\n\tfloat x2 = sin(1.0 * M_PI + twist) * twister_thick;\n\tfloat x3 = sin(1.5 * M_PI + twist) * twister_thick;\t\n    \n    // Background color\n    fragColor = mix(vec4(0.01), vec4(0.15),smoothstep(.6, .002, abs(uv.x) * 0.59));\n    \n    // Add color onto the visible sides.\n\tvec4 C1 = vec4(1.,0.,0.,0.);\n\tvec4 C2 = vec4(0.,1.,0.,0.);\n\tvec4 C3 = vec4(0.,0.,1.,0.);\n\tvec4 C4 = vec4(1.0,0.52, 0.0, 1.0);\n    \n    if (x0 < x1 && uv.x > x0-thick && uv.x < x1+thick) { \n    \tfragColor = mix(vec4(0.1), C1, S(0.3, 0.002, abs(uv.x) *.95));\n    }\n    if (x1 < x2 && uv.x > x1-thick && uv.x < x2+thick)\n        fragColor = mix(vec4(0.1), C2, S(0.3, 0.002, abs(uv.x) *.95));\n    \n    if (x2 < x3 && uv.x > x2-thick && uv.x < x3+thick) {\n        fragColor = mix(vec4(0.1), C3, S(0.3, 0.002, abs(uv.x) *.95));\n    }        \n    if (x3 < x0 && uv.x > x3-thick && uv.x < x0+thick) {\n        fragColor = mix(vec4(0.1), C4, S(0.3, 0.002, abs(uv.x) *.95));\n    }\n    \n    // Add borders.\n    vec4 extCol = vec4(0.15);\n    vec4 intCol = vec4(0.2);\n    \n\tif (x0 < x1) {\n        fragColor = getColor(x0, x1, uv, intCol, extCol, fragColor);\n    }    \n    \n\tif (x1 < x2) {\n    \tfragColor = getColor(x1, x2, uv, intCol, extCol, fragColor);\n    }\n   \n   \tif (x2 < x3) {\n    \tfragColor = getColor(x2, x3, uv, intCol, extCol, fragColor);\n    }\n    \n    if (x3 < x0) {\n    \tfragColor = getColor(x0, x3, uv, intCol, extCol,fragColor);\n    \tif (x2 < x3) {\n            fragColor = getColor(x3, x0, uv, intCol, extCol, fragColor);    \t\n    \t}\n    }\n       \n    vec3 col2 = pow(fragColor.xyz,vec3(.454545));\n \tfragColor = vec4(col2,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}