{
    "Shader": {
        "info": {
            "date": "1692319657",
            "description": "Computing a 2D signed distance field per-pixel via jump flood algorithm. Higher paint calls work well for faster update. Interactive-only: use mouse to draw a shape.\n\n* mouse to draw *\n* space to reset *",
            "flags": 48,
            "hasliked": 0,
            "id": "ct2cDV",
            "likes": 28,
            "name": "Truly Signed Distance Field JFA",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "interactive",
                "sdf",
                "flood",
                "jump",
                "codegolf",
                "multipass",
                "jfa"
            ],
            "usePreview": 0,
            "username": "fenix",
            "viewed": 574
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  This shader was inspired by MysteryPancake's comment on this shader's fork parent,\n//  asking to support interior distances (in other words, an actually *signed* distance\n//  field). Fair enough, but it does present an extra challenge. It made the shader\n//  sufficiently more complicated that it seemed like posting a new one was warranted.\n//\n//  The difficulty with interior distances is the same as the problem with supporting\n//  erasing: the way jump flood works, each pixel stores the location of its nearest\n//  zero-distance cell. When any pixel on the screen disappears, any of the other pixels\n//  in the buffer might point to it. This can be solved by having each pixel reset itself\n//  if it finds it is pointing to a pixel being drawn on. You can see this happening in\n//  the blue interior area as you draw, a chunk of the buffer gets much worse momentarily\n//  before fixing itself.\n//\n//  An extra trick is that not only might our own cell be pointing to an invalidated\n//  cell, we might also find an invalidated cell while performing the jump flood. So\n//  the jump flood also had to be modified slightly to prevent cells that \"refused to\n//  be erased\".\n//\n//  The way I did this, there are essentially two different jump floods happening, one\n//  on the exterior and one on the interior. It seems like it might be possible to\n//  still do just a single jump flood, which keeps track of the closest zero-distance\n//  cell both interior and exterior, and record whether we're inside or out in another\n//  channel. I tried this briefly, but it was tricky writing the cells when drawing\n//  with the mouse, because it's easy to add zero distance cells that you didn't expect.\n//\n//   * Set the brush size via BRUSH_SIZE in Buffer A\n// ---------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O.x = D(T(u).xy, u) - D(T(u).zw, u);\n\n    O = mix( vec4(1), (O.x > 0. ? vec4(0.9,0.6,0.3, 1) : vec4(0.65,0.85,1.0, 1)) // iq's standard SDF distance visualization\n\t                     * (1. - exp(-6.*abs(O.x * .002)))\n\t                     * (.8 + .2*cos(O.x * .3)), smoothstep(0., 3.,abs(O.x)) );\n                         \n    vec2 c = (vec2(sin(iTime * .3), cos(iTime)) * .45 + .5) * iResolution.xy; // circle center\n    O = mix(O, vec4(1, 1, 0, 1), smoothstep(3., 0., abs(D(c, u) - D(T(c).xy, c) - D(T(c).zw, c)))); // render circle\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ---------------------------------------------------------------------------------------\n//   XY coordinates hold the location for exterior cells of nearest zero-distance (drawn-on) pixel\n//   ZW coordinates hold the location for interior cells of nearest zero-distance (drawn-on) pixel\n// ---------------------------------------------------------------------------------------\n\n#define BRUSH_SIZE .05 * R.y\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 R = iResolution, m = iMouse.xyz;\n    \n    if (max(u.x, u.y) < 1.)\n        O = vec4(0, 0, 0, R.x * R.y); // resolution stored in lower left corner\n    else if (iFrame == 0 || // bootstrap\n        texelFetch(iChannel0,ivec2(0,0),0).w != R.x * R.y || // detect resolution changes\n        texelFetch(iChannel3,ivec2(32,0),0).x > 0.) // support keyboard \"space\" reset)\n    {\n        O.xy = vec2(1e6);\n        O.zw = u;\n    }\n    else\n    {        \n        O = T(u);\n        if (m.z > 0. && D(m.xy, O.zw) < BRUSH_SIZE) // clear any cells that point to a cell under active mouse\n            O.zw = vec2(1e6);\n        else\n        {\n            // search nearby cells for new shorter path\n            for (int x = -1; x <= 1; ++x)\n            for (int y = -1; y <= 1; ++y)\n            {\n                vec4 a = T(u + exp2(float(iFrame % 8)) * vec2(x, y));\n                O.xy = D(u, a.xy) < D(O.xy, u) ? a.xy : O.xy; // when we find a shorter path, update our root\n                if (m.z <= 0. || D(a.zw, m.xy) >= BRUSH_SIZE) // don't let the jump flood grab pixels being drawn on, right as they're resetting themselves\n                    O.zw = D(u, a.zw) < D(O.zw, u) ? a.zw : O.zw; // update interior shortest path\n            }\n        }\n        \n        // support drawing with mouse\n        O = m.z > 0. && D(m.xy, u) < BRUSH_SIZE ? vec4(u.xy, vec2(1e7)) : O;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(u) Timpl(u, iChannel0, iResolution.xy)\nvec4 Timpl(vec2 u, sampler2D smp, vec2 R)\n{\n   if (u.x < 0. || u.y < 0. || u.x >= R.x || u.y >= R.y) return vec4(1e6);\n   if (max(u.x, u.y) < 1.) return vec4(1e6);\n   return texelFetch(smp, ivec2(u), 0);\n}\n#define D distance",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}