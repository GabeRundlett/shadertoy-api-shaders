{
    "Shader": {
        "info": {
            "date": "1556477128",
            "description": "coneTrace, safeConeTrace, sphereTrace, safeSphereTrace",
            "flags": 48,
            "hasliked": 0,
            "id": "ttX3WM",
            "likes": 1,
            "name": "safeIncResVYZJIZ",
            "published": 3,
            "tags": [
                "safeincres"
            ],
            "usePreview": 0,
            "username": "vyzjiz",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*if((fragCoord.x < iResolution.x / 2. && fragCoord.y < iResolution.y /2.))\n        fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0) / 100.;\n    else\n    \n    \tfragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);*/\n\t\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct Ray\n{\n\tvec3 P;\n\tfloat Tmin;\n\tvec3 V;\n\tfloat Tmax;\n};\n    \nstruct TraceResult\n{\n    float T;\t\t// Distance taken on ray\n    int flags;\t\t// bit 0:   distance condition:     true if travelled to far t > t_max\n                    // bit 1:   surface condition:      true if distance to surface is small < error threshold\n};                  // bit 2:   iteration condition:    true if took too many iterations\n\nstruct SphereTraceDesc\n{\n    float epsilon;  //Stopping distance to surface\n    int maxiters;   //Maximum iteration count\n};\n    \n    \nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\n/**\n\tconeTrace\n*/\nTraceResult coneTrace(in Ray ray, in SphereTraceDesc params, float tana)\n{\n    TraceResult traceRes = TraceResult(ray.Tmin, 0);\n    float dist = 0.0;\n    int i = 0;\n    \n    do\n    {\n        dist = sdf(ray.P + traceRes.T * ray.V);\n        traceRes.T += dist;\n        i++;\n    }\n    while \n    ( \n        \n\t\ttraceRes.T < ray.Tmax &&    // Stay within bound box\n\t\tdist > traceRes.T * tana &&\t// Stop if cone is close to surface\n\t\ti < params.maxiters\t        // Stop if too many iterations\n\t);\n    \n    traceRes.flags =  int(traceRes.T >= ray.Tmax)\n              | (int(dist <= traceRes.T * tana)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return traceRes;\n}\n\n/**\n\tsafeConeTrace\n*/\nTraceResult safeConeTrace(in Ray ray, in SphereTraceDesc params, float tana)\n{\n    TraceResult traceRes = TraceResult(ray.Tmin, 0);\n    float dist = 0.0;\n    int i = 0; \n    \n    do\n    {\n        dist = (sdf(ray.P + traceRes.T * ray.V) - traceRes.T * tana) / (1.0 + abs(tana));\n        traceRes.T += dist;\n        i++;\n    } \n    while \n    ( \n\t\ttraceRes.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\tdist > params.epsilon* traceRes.T &&\t// Stop if cone is close to surface\n\t\ti < params.maxiters\t        \t\t\t// Stop if too many iterations\n\t);\n    \n    traceRes.flags =  int(traceRes.T >= ray.Tmax)\n              | (int(dist <= params.epsilon * traceRes.T)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return traceRes;\n}\n\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    //fragCoord *= 2.;\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n    // Keyboard and mouse handling:\n\n    if (isKeyHeld(KeyLeft )) eye -= u;\n    if (isKeyHeld(KeyRight)) eye += u;\n    if (isKeyHeld(KeyUp   )) eye += w;\n    if (isKeyHeld(KeyDown )) eye -= w;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if(!(fragCoord.x < iResolution.x / 2.0 && fragCoord.y < iResolution.y /2.0))\n        discard;\n    \n    vec3 eye; \n    vec2 data; // this will be saved into first two pixels\n    Ray ray = Camera(fragCoord * 2.0, eye, data);\n    SphereTraceDesc params = SphereTraceDesc(0.001, 128);\n    \n    float angle = 45.0;\n    angle *= 3.14159 / 180.;\n    float tana = sqrt(2.0) * tan(angle) / length(iResolution);\n    TraceResult result = safeConeTrace(ray, params, tana * 2.0);\n    \n    fragColor = vec4(result.T,result.T,result.T,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "struct Ray\n{\n\tvec3 P;\n\tfloat Tmin;\n\tvec3 V;\n\tfloat Tmax;\n};\n    \nstruct TraceResult\n{\n    float T;\t\t// Distance taken on ray\n    int flags;\t\t// bit 0:   distance condition:     true if travelled to far t > t_max\n                    // bit 1:   surface condition:      true if distance to surface is small < error threshold\n};                  // bit 2:   iteration condition:    true if took too many iterations\n\nstruct SphereTraceDesc\n{\n    float epsilon;  //Stopping distance to surface\n    int maxiters;   //Maximum iteration count\n};\n    \n    \nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\n/**\n\tsphereTrace\n*/\nTraceResult sphereTrace(in Ray ray, in SphereTraceDesc params)\n{\n    TraceResult traceRes = TraceResult(ray.Tmin, 0);\n    float dist = 0.0;\n    int i = 0; \n    \n    do\n    {\n        dist = sdf(ray.P + traceRes.T * ray.V);\n        traceRes.T += dist;\n        i++;\n    } \n    while\n    (\n\t\ttraceRes.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\tdist > params.epsilon * traceRes.T &&\t// Stop if cone is close to surface\n\t\ti < params.maxiters\t        \t\t\t// Stop if too many iterations\n\t);\n    \n    traceRes.flags =  int(traceRes.T >= ray.Tmax)\n              | (int(dist <= params.epsilon* traceRes.T)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return traceRes;\n}\n\n/**\n\tsafeConeTrace\n*/\nTraceResult safeConeTrace(in Ray ray, in SphereTraceDesc params, float tana)\n{\n    TraceResult traceRes = TraceResult(ray.Tmin, 0);\n    float dist = 0.0;\n    int i = 0; \n    \n    do\n    {\n        dist = (sdf(ray.P + traceRes.T * ray.V)- traceRes.T * tana) / (1. + abs(tana));\n        traceRes.T += dist;\n        i++;\n    } \n    while \n    ( \n        \n\t\ttraceRes.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\tdist > params.epsilon* traceRes.T &&\t// Stop if cone is close to surface\n\t\ti < params.maxiters\t        \t\t\t// Stop if too many iterations\n\t);\n    \n    traceRes.flags =  int(traceRes.T >= ray.Tmax)\n              | (int(dist <= params.epsilon* traceRes.T)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return traceRes;\n}\n\nvec3 normal(const in vec3 p)\n{\n    const float eps=0.001;\n    vec3 plus = vec3(sdf(p+vec3(eps,0,0)),sdf(p+vec3(0,eps,0)),sdf(p+vec3(0,0,eps)));\n    vec3 minu = vec3(sdf(p-vec3(eps,0,0)),sdf(p-vec3(0,eps,0)),sdf(p-vec3(0,0,eps)));\n    return normalize(plus-minu);\n}\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.V).xyz,1.);\n}\nvec4 errorColor(Ray ray, float t)\n{\n    return vec4(1.,0.,0.,1.);\n}\nvec4 hitColor(Ray ray,float t, int options)\n{\n    vec3 n = normal(ray.P+ray.V*t);\n    \n\n    vec3 lightPos=vec3(10.,-10.,10.);\n    \n    vec3 p = ray.P + ray.V*t;\n    vec3 v = -ray.V;\n    vec3 l = normalize(p -lightPos);\n    \n    Ray shadowRay = Ray(p+n,0.05,l,distance(p,lightPos));\n    SphereTraceDesc params = SphereTraceDesc(0.001, 128);\n    TraceResult result = sphereTrace(shadowRay, params);\n    \n    vec3 col;\n    if(bool(result.flags & 1))\n        col = vec3(1,1,1)*max(dot(n,l),0.0);\n    else if(bool(result.flags & 2))\n        col=vec3(0,0,0);\n    else\n    \tcol =vec3(1,0,0);\n    \n    return vec4(col,1.);\n}\n\n// ---- CAMERA and EVENTs ----\n\n// Common codes (WASD instead of arrows)\n\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n    // Keyboard and mouse handling:\n\n    if (isKeyHeld(KeyLeft )) eye -= u;\n    if (isKeyHeld(KeyRight)) eye += u;\n    if (isKeyHeld(KeyUp   )) eye += w;\n    if (isKeyHeld(KeyDown )) eye -= w;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\n\n// ---- MAIN ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Generate ray from pixel\n    vec3 eye; vec2 data; // this will be saved into first two pixels\n    Ray ray = Camera(fragCoord, eye, data);\n    int options = 0; // 0 -> Sphere tracing\n    \t\t\t \t // 1 -> Relaxed Sphere tracing\n    \t\t\t \t // 2 -> Enhanced Sphere tracing\n    \n    // Set epsilon and maximum iteration\n    SphereTraceDesc params = SphereTraceDesc(0.005, 128);\n    \n    // Raytrace\n        \n    float angle = 45.0;\n    angle *= 180. / pi;\n    float tana = sqrt(2.0) * tan(angle) / length(iResolution);\n    \n    float dStart = texelFetch(iChannel3, ivec2(fragCoord / 2.), 0).x;\n    \n    ray.Tmin = dStart;\n    TraceResult result = safeConeTrace(ray, params, tana);\n    \n    if(bool(result.flags & 1))    \n        fragColor = missColor(ray);    \n    else if(bool(result.flags & 2)) \n        fragColor = hitColor(ray, result.T, options);\n    else \t        \t\t\t  \n        fragColor = errorColor(ray, result.T);\n\n\n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.0*prev + 1.0*fragColor;\n        fragColor.w = result.T;\n\n    // First two pixels are reserved\n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//This file contains the code for the scene\n\nconst float pi = 3.1415926535897932384626433832795;\n\n//\tPRIMITIVES are from\n//\thttps://iquilezles.org/articles/distfunctions\n// SHAPE FORMULAS\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n// signed distance functions\n\nfloat sdf(in vec3 p)\n{\n    p-=vec3(0, 0, 10);\n    vec3 originalP = p;\n    \n    float surface = p.y + 4.0;\n    \n    float sphere = sdSphere(p, 1.);\n    float g = sdBox(p-vec3(2,0,0),vec3(1,1,1));\n    \n    return min(min(g, sphere), surface);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}