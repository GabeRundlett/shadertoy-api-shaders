{
    "Shader": {
        "info": {
            "date": "1629343139",
            "description": "I am using someone's library from GitHub. I know it isn't practical, but it sure is cool!\nhttps://github.com/alexozer/glsl-arb-prec",
            "flags": 0,
            "hasliked": 0,
            "id": "fs33zM",
            "likes": 5,
            "name": "Arbitrary Precision Mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot",
                "precision",
                "arbitrary"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "// ####### Arbitrary Precision Mandelbrot #######\n// Demo Made by Jacob Bingham (Zi7ar21) on August 18th, 2021\n\n/*\nThis is a demo of a cool arbitrary-precision library I found on GitHub:\nhttps://github.com/alexozer/glsl-arb-prec/issues/1\n*/\n\n// ##### Parameters #####\n\n// Mandelbrot Set Iterations\n#define iterations 128\n\n// Offset\n#define offset vec2(-0.8216345, 0.2000020)\n\n// Scale Factor (Higher = More Zoomed)\n//#define scaling loadFloat(2.0);\n#define scaling loadFloat(1.0/exp(5.0*sin(0.125*pi*iTime)+5.0))\n\n// ##### Constants and Macros #####\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.141592653589793\n\n// Traditional Uniform Identifiers\n#define resolution iResolution\n#define time iTime\n\n// ##### Rendering #####\n\n//\nfloat mandelbrot(int[n_int] c_r, int[n_int] c_i)\n{\n    int z_r[n_int], z_i[n_int], pz_r[n_int], pz_i[n_int];\n    result = loadFloat(0.0);\n    z_r = result;\n    z_i = result;\n    pz_r = result;\n    pz_i = result;\n\n    for(int i = 0; i < iterations; i++)\n    {\n        mul(pz_r, pz_r);\n        int orbitSize[n_int];\n        orbitSize = result;\n        mul(pz_i, pz_i);\n        add(orbitSize, result);\n        orbitSize = result;\n        int bailoutRadius[n_int] = loadFloat(4.0);\n        negate(bailoutRadius);\n        add(orbitSize, bailoutRadius);\n        // I have no idea how this works lol, I just played until the bailout worked\n        // I guess I could use signp...\n        if(signp(result))\n        {\n            float t = float(i)/float(iterations);\n            return 0.5*sin(4.0*pi*t)+0.5;\n        }\n\n        mul(pz_r, pz_r);\n        z_r = result;\n        mul(pz_i, pz_i);\n        negate(result);\n        add(z_r, result);\n        z_r = result;\n\n        mul(pz_r, pz_i);\n        z_i = result;\n        mul(z_i, loadFloat(2.0));\n        z_i = result;\n\n        add(z_r, c_r);\n        z_r = result;\n        add(z_i, c_i);\n        z_i = result;\n\n        pz_r = z_r;\n        pz_i = z_i;\n    }\n\n    return 0.0;\n}\n\n// Render and Output the Frame\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen UV Coordinates\n    vec2 uv = 2.0*(gl_FragCoord.xy-0.5*resolution.xy)/max(resolution.x, resolution.y);\n\n    // Initialize Variables\n    int uv_x[n_int], uv_y[n_int], offset_x[n_int], offset_y[n_int], scale[n_int];\n\n    // Convert Screen UV Coordinates to Arbitrary-Precision\n    uv_x = loadFloat(uv.x);\n    uv_y = loadFloat(uv.y);\n\n    // Convert Transformations to Arbitrary-Precision\n    offset_x = loadFloat(offset.x);\n    offset_y = loadFloat(offset.y);\n    scale = scaling;\n\n    // Apply Scale Transformations\n    mul(uv_x, scale);\n    uv_x = result;\n    mul(uv_y, scale);\n    uv_y = result;\n\n    // Apply Offset Transformations\n    add(uv_x, offset_x);\n    uv_x = result;\n    add(uv_y, offset_y);\n    uv_y = result;\n\n    // Calculate and Color the Mandelbrot Set\n    vec3 color = vec3(1.000, 1.000, 1.000)*mandelbrot(uv_x, uv_y);\n\n    // Output the Rendered Frame\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// GLSL Arbitrary Precision (modified a little bit)\n// https://github.com/alexozer/glsl-arb-prec\n\n// Number of Integers used to store an Arbitrary-Precision Number\n//const int n_int = 3;\n#define n_int 3\n\n// Power of 10 one larger than the maximum value per int\n//const int limit = 10000;\n#define limit 32768\n\nconst float limitFlt = float(limit);\n\nint result[n_int];\n\n#define zero(x, len) for(int i=0;i<len;i++){x[i]=0;}\n#define assign(x, y) for(int i=0;i<n_int;i++){x[i]=y[i];}\n#define negate(x) for(int i=0;i<n_int;i++){x[i]=-x[i];}\n\nbool signp(int[n_int] a)\n{\n    return a[n_int-1] >= 0;\n}\n\nint keepVal, carry;\n\nvoid roundOff(int x)\n{\n    carry = x/limit;\n    keepVal = x-carry*limit;\n}\n\nvoid add(int[n_int] a, int[n_int] b) {\n    bool s1 = signp(a), s2 = signp(b);\n\n    carry = 0;\n\n    for(int i = 0; i < n_int-1; i++) {\n        roundOff(a[i] + b[i] + carry);\n\n        if(keepVal < 0) {\n            keepVal += limit;\n            carry--;\n        }\n\n        result[i] = keepVal;\n    }\n    roundOff(a[n_int-1] + b[n_int-1] + carry);\n    result[n_int-1] = keepVal;\n    \n    if(s1 != s2 && !signp(result)) {\n        negate(result);\n\n        carry = 0;\n\n        for(int i = 0; i < n_int; i++) {\n            roundOff(result[i] + carry);\n\n            if(keepVal < 0) {\n                keepVal += limit;\n                carry--;\n            }\n\n            result[i] = keepVal;\n        }\n\n        negate(result);\n    }\n}\n\nvoid mul(int[n_int] a, int[n_int] b) {\n    bool toNegate = false;\n\n    if(!signp(a)) {\n        negate(a);\n        toNegate = !toNegate;\n    }\n    if(!signp(b)) {\n        negate(b);\n        toNegate = !toNegate;\n    }\n\n    const int lenProd = (n_int-1)*2+1;\n    int prod[lenProd];\n    zero(prod, lenProd);\n\n    for(int i = 0; i < n_int; i++) {\n        for(int j = 0; j < n_int; j++) {\n            prod[i+j] += a[i] * b[j];\n        }\n    }\n\n    carry = 0;\n    const int clip = lenProd - n_int;\n    for(int i = 0; i < clip; i++) {\n        roundOff(prod[i] + carry);\n        prod[i] = keepVal;\n    }\n\n    if(prod[clip-1] >= limit/2) {\n        carry++;\n    }\n\n    for(int i = clip; i < lenProd; i++) {\n        roundOff(prod[i] + carry);\n        prod[i] = keepVal;\n    }\n\n    for(int i = 0; i < lenProd - clip; i++) {\n        result[i] = prod[i+clip];\n    }\n\n    if(toNegate) {\n        negate(result);\n    }\n}\n\nint[n_int] loadFloat(float f)\n{\n    int x[n_int];\n\n    for(int i = n_int-1; i >= 0; i--)\n    {\n        int fCurr = int(f);\n        x[i] = fCurr;\n        f -= float(fCurr);\n        f *= limitFlt;\n    }\n\n    return x;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}