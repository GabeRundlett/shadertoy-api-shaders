{
    "Shader": {
        "info": {
            "date": "1591268774",
            "description": "International shipping, ported to shadertoy! complete with the correct water heightmap and multisampling.\n\nTakes about 2 seconds at 60 fps for the water heightmap to finish computing and multisampling to begin. watch the loading bar.",
            "flags": 32,
            "hasliked": 0,
            "id": "tlXyzr",
            "likes": 135,
            "name": "International Shipping",
            "published": 3,
            "tags": [
                "boat",
                "origami",
                "revision2019"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 3040
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x-y)*(y*y+x)-x)/2.14e9 * .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    float ltime = float(iFrame)/float(WAVE_DEPTH);\n\n\tvec2 uv = (fragCoord/iResolution.xy*2.0-1.0)/2.0;\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor.xyz /= fragColor.w;\n\n    float seed = hash(min(1.,ltime), hash(uv.x,uv.y));\n\tfragColor += pow(seed,2.)*0.2 *vec4(0.8,0.9,1.0,0.); //noise\n\tfragColor *= (1.0 - pow(length(uv)*0.70, 2.0)); //vingetting lol\n\tfragColor = pow(log(fragColor+1.0), vec4(1.3))*1.25; //colour grading\n    \n    if (fragCoord.y < 10. && ltime < 1.) {\n        float grad = sin(fragCoord.y/10.*3.14);\n        float bright = pow(clamp(sin(fragCoord.y/15.*3.14),0.,1.),20.);\n        float barpos = smoothstep(-1., 1., ltime*iResolution.x - fragCoord.x);\n        fragColor.xyz = grad*mix(vec3(.1), vec3(.9,0.1,0), barpos) + bright*0.3;\n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//generates the heightmap for the waves.\n//in the original C code, there was only one seed. in order to improve performance by doing this on the GPU,\n//I split the FFT calculation across multiple frames, and each frame has a different starting seed.\n#define WAVE_SAMPLES 1024\nuint rndseeds[WAVE_DEPTH] = uint[WAVE_DEPTH](\n920413359u,344147060u,354025938u,2510083042u,2912208450u,663489309u,61347429u,1209816006u,2738590810u,1234092029u,2528347578u,650889515u,2709794373u,2069110031u,3520323237u,2915168753u,\n2322632710u,2989421851u,4280850451u,1474778517u,2881594422u,2265295789u,1910491705u,2277565322u,707509521u,4060625072u,1372978273u,1639299946u,3485656693u,2998509085u,782651004u,2758988468u,\n493098580u,3703975077u,1132795244u,576308370u,4166192603u,3865744844u,778731983u,3968879059u,2600244750u,3395962586u,2377424722u,4075108333u,315984429u,1583277414u,3826192035u,586903153u,\n1054474534u,745246921u,4256406772u,463193934u,4136561045u,3304490676u,341015040u,1744393505u,972704065u,1478460815u,1812621133u,1603688544u,133969005u,2700557178u,331483363u,3460139081u,\n2871210438u,728092432u,1103924991u,3631508649u,754385041u,3315783261u,2534947633u,4169942121u,2234451975u,784357094u,2163247278u,736096301u,46193931u,561970122u,1297583479u,2406700841u,\n3250333395u,4178599644u,3702373126u,765792619u,2445818533u,2923499364u,2779363917u,3023050847u,1398972607u,1789970279u,609453859u,2893149445u,1569196009u,849325608u,2774450625u,3723681545u,\n2566077401u,3280027661u,3653271294u,4104918169u,1195760183u,4160009305u,3870009279u,1062551007u,2914502300u,909266381u,319407879u,3833525574u,3364539115u,2669656718u,2439999609u,4245366155u,\n2936252450u,1040930787u,2376589173u,1582139829u,1312299439u,539453860u,982510869u,1214352644u,652148852u,3976312046u,4133709151u,2936335549u,3245026616u,2197966989u,1791165629u,616285886u);\n\nuint randomstate;\nfloat rand_float() {\n\trandomstate = randomstate ^ (randomstate << 13u);\n\trandomstate = randomstate ^ (randomstate >> 17u);\n\trandomstate = randomstate ^ (randomstate << 5u);\n\trandomstate *= 1685821657u;\n\tuint intermediate = ( (randomstate & 0x007FFFFFu) | 0x3F800000u );\n\treturn uintBitsToFloat(intermediate) - 1.0;\n}\n\nfloat rand_gauss() {\n\tfloat a = 0.0;\n\tfor (int i = 0; i < 12; i++) {\n\t\ta += rand_float();\n\t}\n\treturn a - 6.0;\n}\n\nfloat phillips_spectrum(float x, float y) {\n\tfloat scale = 250.0;\n\tx *= scale; y *= scale;\n\tfloat k = x*x+y*y;\n    if (k == 0.) return 0.0;\n\tif (k > float(WAVE_SAMPLES/2)) return 0.0;\n\treturn exp(-2.0/k)/(k*k) * y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int i = iFrame;\n    if (i >= WAVE_DEPTH) return;\n    randomstate = rndseeds[i];\n    for (int j = 0; j < WAVE_DEPTH; j++) {\n\t\tfloat x = float(i)/float(WAVE_SAMPLES);\n\t\tfloat y = float(j)/float(WAVE_SAMPLES);\n        float ps = phillips_spectrum(x, y);\n        \n    \tif (i == 0 && j <= 92) continue;\n        float re = rand_gauss()*ps;\n        float im = rand_gauss()*ps;\n        float t = dot(-uv, vec2(j,i))*acos(-1.)*2.;\n        fragColor += sin(t)*re + cos(t)*im;\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//original International Shipping shader. not much different here.\n//it waits until the wave heightmap is done calculating (WAVE_DEPTH frames, see Common) before doing multisampling.\n\n#define MAXDEPTH 4\n\nfloat maxdist = 100.0;\nvec3 suncol = vec3(1.5,1.0,0.6);\nvec3 skycol = vec3(0.4,0.75,1.0);\nvec3 sundir = normalize(vec3(-1.0,-1.0,0.1));\n\nuint rand = 0u;\nvoid stepState()\n{\n\trand = rand ^ (rand << 13u);\n\trand = rand ^ (rand >> 17u);\n\trand = rand ^ (rand << 5u);\n\trand *= 1685821657u;\n}\n\nvoid feed(float value)\n{\n\trand += floatBitsToUint(value);\n\tstepState();\n}\n\nfloat getFloat() {\n\tstepState();\n\treturn uintBitsToFloat( (rand & 0x007FFFFFu) | 0x3F800000u ) - 1.5;\n}\n\nvec3 getVec3() {\n\treturn vec3(getFloat(),getFloat(),getFloat());\n}\n\nstruct Ray\n{\n\tvec3 m_origin;\n\tvec3 m_direction;\n\tvec3 m_point;\n\tint m_intersected;\n\tvec3 m_color;\n\tvec3 m_attenuation;\n};\n\nRay newRay(vec3 origin, vec3 direction, vec3 attenuation) {\n\t// Create a default ray\n\treturn Ray(origin, direction, origin, 0, vec3(0.0), attenuation);\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n\tvec3 cb = c - b; vec3 pb = p - b;\n\tvec3 ba = b - a; vec3 pa = p - a;\n\tvec3 ac = a - c; vec3 pc = p - c;\n\tvec3 nor = cross( ba, ac );\n\n\treturn sqrt(\n\t(sign(dot(cross(ba,nor),pa)) +\n\t sign(dot(cross(cb,nor),pb)) +\n\t sign(dot(cross(ac,nor),pc))<2.0)\n\t ?\n\t min( min(\n\t dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n\t dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n\t dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n\t :\n\t dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n\nfloat scene(vec3 p) {\n\tvec3 point = vec3(abs(p.xy), p.z+0.04);\n\tif (length(point)>0.8) return 0.8;\n\tfloat scale = 3.5;\n\tpoint *= scale;\n\tpoint += sin(point.yzx*6.0)*0.005;\n\n\t// return bottle(p4b);\n\tvec3 mast = vec3(0.03, 0.0, 1.8);\n\tvec3 keel = vec3(0.0, 0.3, 0.0);\n\tvec3 port = vec3(0.0, 0.9, 0.7);\n\tvec3 port_bow = vec3(1.0, 0.0, 0.0);\n\tvec3 bow = vec3(1.9, 0.0, 1.2);\n\tvec3 mid = vec3(0.02, 0.5, 0.4);\n\n\tfloat tri1 = udTriangle(point, mast, mid, port_bow);\n\tfloat tri2 = udTriangle(point, port, keel, port_bow);\n\tfloat tri3 = udTriangle(point, port, bow, port_bow);\n\n\treturn (min(min(tri2, tri3),tri1)-0.01+cos(p.x*8.0)*.005)/scale;\n}\n\nfloat wake(vec2 uv) {\n\tvec2 uvm = vec2(uv.x,sqrt(uv.y*uv.y+0.0004));\n\tvec2 wakeangle = normalize(vec2(1.0));\n\tvec2 wakeangleflipped = vec2(wakeangle.y,-wakeangle.x);\n\n\tfloat wakeangledot = dot(uvm,wakeangle);\n\tfloat wakeangleflippeddot = dot(uvm,wakeangleflipped);\n\n\n\tfloat xwiggly = sqrt(1.0-8.0*wakeangledot/(1.0+8.0*abs(wakeangledot)));\n\n\tfloat distance = xwiggly*(wakeangledot > 0.0 ? abs(wakeangleflippeddot) : length(uvm));\n\treturn sign(wakeangleflippeddot)*sin(distance*120.0)*exp(-distance*20.0-wakeangledot*5.0);\n}\n\nfloat heightmap(vec2 uv) {\n\tfloat height = texture(iChannel0, uv*0.15).x*0.04+0.01;\n\treturn height - (wake(vec2(0.28,0.0)-uv)+wake(-uv)+0.1*wake(vec2(-0.3,0.0)-uv))*0.025;\n}\n\nvec2 epsi = vec2(0.0005, 0.0);\nvec3 heightmapNormal(vec2 uv) {\n\tfloat xdiff = heightmap(uv) - heightmap(uv+epsi.xy);\n\tfloat ydiff = heightmap(uv) - heightmap(uv+epsi.yx);\n\treturn normalize(cross(vec3(epsi.yx, -xdiff), vec3(epsi.xy, -ydiff)));\n}\n\nvec3 sceneGrad(vec3 point) {\n  float t = scene(point);\n  return normalize(vec3(\n    t - scene(point + epsi.xyy),\n    t - scene(point + epsi.yxy),\n    t - scene(point + epsi.yyx)));\n}\n\nvoid castRay(inout Ray ray) {\n\t// Cast ray from origin into scene\n\tfloat dt = 0.008;\n\tfloat lastdiff = 0.0;\n\tfor (int i = 0; i < 200; i++) {\n\t\tif (length(ray.m_origin - ray.m_point) > maxdist) return;\n\t\tif (ray.m_point.z > 0.1 && ray.m_point.y + ray.m_point.x < -0.5 && ray.m_direction.z > 0.0) return;\n\t\tfloat dist2scene = scene(ray.m_point);\n\t\tfloat diff = ray.m_point.z - heightmap(ray.m_point.xy);\n\n\t\tif (abs(dist2scene) < epsi.x) {\n\t\t\tray.m_intersected = 2;\n\t\t\treturn;\n\t\t}\n\n\t\tif (diff < 0.0) {\n\t\t\tray.m_point -= dt * diff / (diff - lastdiff) * ray.m_direction;\n\t\t\tray.m_intersected = 1;\n\t\t\treturn;\n\t\t}\n\n\t\tdt = dt*1.02;\n\t\tray.m_point += min(dt*max(diff*(1.0-abs(ray.m_direction.z)+max(ray.m_direction.z,0.0)*30.0)*80.0,1.0),dist2scene) * ray.m_direction;\n\t\tlastdiff = diff;\n\t}\n}\n\n//this is trash and needs to be better\nvec3 skyDomeShade(vec3 angle) {\n\treturn mix(vec3(1.71, 1.31, 0.83),skycol, pow(abs(angle.z), 0.5)) + pow(max(dot(angle, sundir),0.0),1500.0)*suncol*4.0;\n}\n\nRay reflectionForRay(Ray ray, float fade) {\n\tvec3 normal = -heightmapNormal(ray.m_point.xy);\n\tfloat frensel = abs(dot(ray.m_direction, normal));\n\tvec3 atten = fade * ray.m_attenuation * 0.9 * (1.0 - frensel*0.98);\n\tvec3 reflected = reflect(ray.m_direction, normal);\n\n\treturn newRay(ray.m_point + normal*0.01, reflected, atten);\n}\n\nvoid shadeBoat(inout Ray ray) {\n\t//this code is super spaghetti and I'm so fucking sorry\n\tvec3 normal = -sceneGrad(ray.m_point);\n\tfloat frensel = abs(dot(ray.m_direction, normal));\n\tfloat nearness = abs(ray.m_point.z);\n\tnearness = sqrt(min(nearness*6.0+.1,1.0));\n\tvec3 reflected_sun = reflect(sundir, normal);\n\tvec3 reflected_sky = reflect(vec3(0.0,0.0,1.0), normal);\n\tfloat specular_sun = pow(max(dot(ray.m_direction, reflected_sun),0.0), 20.0) * (1.0-frensel*0.98);\n\tfloat specular_sky = pow(max(dot(ray.m_direction, reflected_sky)+0.75,0.0)/1.75, 2.0) * (1.0-frensel*0.98);\n\n\tfloat ao = mix(1.0,scene(ray.m_point + normal*0.1)/0.1,0.3);\n\n\tfloat shitty_shadow_approximation = scene(ray.m_point + sundir*0.1) < scene(ray.m_point + sundir*0.2) ? 1.0 : 0.0;\n\n#ifdef FINLANDSFARJAN\n    vec2 crds = vec2(-abs(ray.m_point.x), ray.m_point.z);\n\tbool mst = sin(dot(crds,vec2(.5,2))*20.+.5) > 0.;\n\tvec3 diffusecol = mst ? vec3(0.9) : vec3(0.9, 0.05, 0.01);\n#else\n    vec3 diffusecol = vec3(.8,.3,.1);\n#endif\n\tfloat sundot = dot(normal, sundir);\n\tsundot = max(sundot, 0.0) + frensel*0.0;\n\tray.m_color += ao * (sundot*suncol*diffusecol + (1.0+normal.z)/2.0 * mix(suncol,skycol,0.6) * diffusecol ) * nearness + shitty_shadow_approximation*specular_sun*suncol + specular_sky * skycol * nearness + skycol*0.02;\n}\n\nRay rayQueue[MAXDEPTH];\nint raynum = 1;\nvoid addToQueue(Ray ray) {\n\tif (raynum >= MAXDEPTH) return;\n\trayQueue[raynum] = ray;\n\traynum++;\n}\n\nvoid recursivelyRender(inout Ray ray) {\n\t//jump close to surface of water\n\t//this was useful in the demo to only jump if not in the middle of the frame but here it makes no sense\n\tfloat t = -(dot(ray.m_point, vec3(0.0,0.0,1.0)) - 0.08)/dot(ray.m_direction, vec3(0.0,0.0,1.0));\n\t//except near boat\n\tray.m_point += ray.m_direction*t*0.5;\n\trayQueue[0] = ray;\n\n\tfor (int i = 0; i < MAXDEPTH; i++) {\n\t\tif (i >= raynum) break;\n\n\t\tcastRay(rayQueue[i]);\n\t\t//shading...\n\t\tfloat fading = (rayQueue[i].m_intersected > 0) ? pow(max(maxdist - distance(rayQueue[i].m_origin, rayQueue[i].m_point), 0.0)/maxdist, 2.0) : 0.0;\n\t\trayQueue[i].m_color = (1.0-fading)*skyDomeShade(rayQueue[i].m_direction);\n\t\t//reflection\n\t\tif (rayQueue[i].m_intersected == 1) {\n\t\t\taddToQueue(reflectionForRay(rayQueue[i], fading));\n\t\t} else if (rayQueue[i].m_intersected == 2) {\n\t\t\tshadeBoat(rayQueue[i]);\n\t\t}\n\t}\n\tfor (int i = 0; i < raynum; i++) {\n\t\tray.m_color += rayQueue[i].m_color * rayQueue[i].m_attenuation;\n\t}\n\traynum = 1;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(ax,p)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\n\tvec2 uv_base = (fragCoord/iResolution.xy*2.0-1.0)/2.0;\n\tuv_base.x *= iResolution.x/iResolution.y;\n\n\tfeed(uv_base.x);\n\tfeed(uv_base.y);\n    feed(float(iFrame));\n\n\t// Camera parameters\n\n\tvec2 uv = uv_base + getVec3().xy/500.0;\n\tvec3 cameraOrigin = vec3(3.5, 3.5, heightmap(vec2(3.5, 3.5))+1.5) + normalize(getVec3())*0.04;\n\tvec3 focusOrigin = vec3(0.0, 0.0, 0.15);\n\tvec3 cameraDirection = normalize(focusOrigin-cameraOrigin);\n\n    vec3 up = vec3(0.0,0.0,-1.0);\n\tvec3 plateXAxis = normalize(cross(cameraDirection, up));\n\tvec3 plateYAxis = normalize(cross(cameraDirection, plateXAxis));\n\n\tvec3 platePoint = (plateXAxis * -uv.x + plateYAxis * uv.y) * 0.3;\n\n\tRay ray = newRay(cameraOrigin, normalize(platePoint + cameraDirection), vec3(1.0));\n\trecursivelyRender(ray);\n\n    //skip multisampling while wave heightmap is being computed\n    if (iFrame < WAVE_DEPTH) {\n\t\tfragColor = vec4(0);\n    }\n    fragColor += vec4(ray.m_color, 1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WAVE_DEPTH 128",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}