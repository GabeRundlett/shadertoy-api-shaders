{
    "Shader": {
        "info": {
            "date": "1583663413",
            "description": "Super simple sorting",
            "flags": 32,
            "hasliked": 0,
            "id": "wlKSWV",
            "likes": 6,
            "name": "Odd-Even sorting",
            "published": 3,
            "tags": [
                "sort",
                "sorting",
                "parallel",
                "oddeven"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "vec2 getID(float id)\n{\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{    \n    p = floor(vec2(0.15,0.15)*p);\n    if(p.x < N && p.y < N)\n    {\n    \tfloat id = p.x + p.y*N;\n        vec2 i = getID(id);\n    \tfragColor.xyz = 1.*vec3(1,1,1)*jet_range(getParticle(i.x).z,0.,1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//particle buffer\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch0, pos);\n\n        float id = 1.3668*2.*3.14159*(pos.x + pos.y*N)/(N*N);\n        if(iFrame < 1)\n        {\n           // U.xy = size*0.5 + size.x*(vec2(1,0)*cos(id) + vec2(0,1)*sin(id))*0.25;\n            U.xy = size*hash22(pos);\n            U.zw = hash22(2.*pos);\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n#define N 50.\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p) - 0.5;\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat nbase(float x)\n{\n    return mix(hash11(floor(x)),hash11(ceil(x)), fract(x));\n}\n\nfloat fbm(float x, float t)\n{\n    float a = 1., b = 1., c = 0.;\n    for(int i = 0; i < 3; i++)\n    {\n        c += a*nbase(b*x + t);\n        a *= 2.5;\n        b *= 4.5;\n    }\n    return c;\n}\n\n//functions\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\nfloat gauss(float x, float r)\n{\n    return exp(-pow(x/r,2.));\n}\n   \n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\n//Laplacian operator\nvec4 Laplace(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return texel(ch, p+dx.xy)+texel(ch, p+dx.yx)+texel(ch, p+dx.zy)+texel(ch, p+dx.yz)-4.*texel(ch, p);\n}\n\n//Gradient\nvec2 Grad(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return vec2(length(texel(ch, p+dx.zy)),length(texel(ch, p+dx.yz))) - length(texel(ch, p));\n}\n\n\nfloat angle_between(vec2 a,vec2 b)\n{\n    return atan(a.x*b.y-a.y*b.x,dot(a,b));\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nuniform sampler2D fake;\n\nvec4 getParticle(float id)\n{\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(fake, vec2(x,y));\n}\n    ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//sorting network\n\n//get particle id from id array\nfloat getID(float id)\n{\n    id = clamp(id, 0., N*N-1.);\n    float y = floor(id/N);\n    float x = id - N*y;\n    return texel(ch1, vec2(x,y)).x;\n}\n\nfloat just_sorting(float id1, float id2)\n{\n    vec4 a0 = getParticle(getID(id1));\n    vec4 a1 = getParticle(getID(id2));\n    if(id2 < id1)\n    {\n        if(a1.z > a0.z)\n        \treturn getID(id2);\n    \telse\n        \treturn getID(id1);\n    } \n    else\n    {\n        if(a1.z < a0.z)\n        \treturn getID(id2);\n    \telse\n        \treturn getID(id1);\n    }\n}\n\n\n#define slowdown 1.\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    if(pos.x < N && pos.y < N)\n    {\n        pos = floor(pos);\n        //this pixel value\n        U = texel(ch1, pos);\n        \n        float id = pos.x + pos.y*N;\n        \n        \n        if(mod(float(iFrame), slowdown) == 0.)\n        {\n            \n            //odd even sort\n            float oe = floor(mod(float(iFrame)/slowdown,2.)); \n            //pair id\n            float pair = abs(floor((id+oe)/2.));\n            //left or right on the pair\n            float pairid = (id + oe) - 2.*pair; //0 or 1\n            //partners id\n            float id1 = mod((2.*pairid - 1.) + id, N*N);\n\n            U.y = pairid;\n\n            U.x = just_sorting(id, id1);\n        }\n        \n\t\t\n        if(iFrame < 1)\n        {\n            U.x = id;\n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}