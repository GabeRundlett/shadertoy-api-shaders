{
    "Shader": {
        "info": {
            "date": "1609375685",
            "description": "Why would anyone need 4D noise?",
            "flags": 0,
            "hasliked": 0,
            "id": "WttcRB",
            "likes": 11,
            "name": "4D Fractal Noise",
            "published": 3,
            "tags": [
                "noise",
                "4d",
                "fractalnoise"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "#define SIN_15 0.2588190451\n#define COS_15 0.96592582628\n\n// New hash based on hash13() from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nfloat noise(in vec4 p) {\n\tp = fract(p * 0.1031);\n    p += dot(p, p.zwyx + 31.32);\n    return fract((p.x + p.y) * p.z - p.x * p.w);\n}\n\nfloat snoise(in vec4 p) {\n    vec4 cell = floor(p);\n    vec4 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldbq = noise(cell);\n    float rdbq = noise(cell + vec4(1.0, 0.0, 0.0, 0.0));\n    float ldfq = noise(cell + vec4(0.0, 0.0, 1.0, 0.0));\n    float rdfq = noise(cell + vec4(1.0, 0.0, 1.0, 0.0));\n    float lubq = noise(cell + vec4(0.0, 1.0, 0.0, 0.0));\n    float rubq = noise(cell + vec4(1.0, 1.0, 0.0, 0.0));\n    float lufq = noise(cell + vec4(0.0, 1.0, 1.0, 0.0));\n    float rufq = noise(cell + vec4(1.0, 1.0, 1.0, 0.0));\n    float ldbw = noise(cell + vec4(0.0, 0.0, 0.0, 1.0));\n    float rdbw = noise(cell + vec4(1.0, 0.0, 0.0, 1.0));\n    float ldfw = noise(cell + vec4(0.0, 0.0, 1.0, 1.0));\n    float rdfw = noise(cell + vec4(1.0, 0.0, 1.0, 1.0));\n    float lubw = noise(cell + vec4(0.0, 1.0, 0.0, 1.0));\n    float rubw = noise(cell + vec4(1.0, 1.0, 0.0, 1.0));\n    float lufw = noise(cell + vec4(0.0, 1.0, 1.0, 1.0));\n    float rufw = noise(cell + 1.0);\n\n    return mix(mix(mix(mix(ldbq, rdbq, local.x),\n                       mix(lubq, rubq, local.x),\n                       local.y),\n\n                   mix(mix(ldfq, rdfq, local.x),\n                       mix(lufq, rufq, local.x),\n                       local.y),\n\n                   local.z),\n\n               mix(mix(mix(ldbw, rdbw, local.x),\n                       mix(lubw, rubw, local.x),\n                       local.y),\n\n                   mix(mix(ldfw, rdfw, local.x),\n                       mix(lufw, rufw, local.x),\n                       local.y),\n\n                   local.z),\n\n               local.w);\n}\n\nfloat fnoise(in vec4 p, in float scale, in float octaves) {\n    p *= scale;\n    float nscale = 1.0;\n    float tscale = 0.0;\n    float value = 0.0;\n\n    for (float octave=0.0; octave < octaves; octave++) {\n        value += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nfloat mapScene(in vec3 p) {\n    float octaves = 4.0;\n    float threshold = 0.4;\n\n    if (iMouse.z > 0.0) {\n        octaves = iMouse.y / iResolution.y * 4.0;\n        threshold = iMouse.x / iResolution.x * 0.9;\n    }\n\n    vec3 q = abs(p) - 1.5;\n    float bbox = max(q.x, max(q.y, q.z));\n\n    return max(fnoise(vec4(p, iTime * 0.5), 2.0, octaves) - threshold, bbox);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0), rd = normalize(vec3(uv, -1.0)), p;\n    float t = 0.0, d;\n    bool hit = false;\n\n    for (int iter=0; iter < 100; iter++) {\n        p = ro + rd * t;\n\n        p.y -= 0.3;\n        p.yz *= mat2(COS_15, SIN_15, -SIN_15, COS_15);\n        float c = cos(iTime), s = sin(iTime);\n        p.xz *= mat2(c, s, -s, c);\n\n        d = mapScene(p);\n        if (d < 0.001) {\n            hit = true;\n            break;\n        }\n\n        if (t > 10.0) {\n            break;\n        }\n\n        t += d;\n    }\n\n    if (hit) {\n        vec3 n = getNormal(p);\n        fragColor.rgb += 0.5 + 0.5 * n;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}