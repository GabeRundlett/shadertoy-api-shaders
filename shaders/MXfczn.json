{
    "Shader": {
        "info": {
            "date": "1725721850",
            "description": "Effect used in \"Fifth\" by Oftenhide. Released on Xenium 2024\nhttps://www.pouet.net/prod.php?which=97700",
            "flags": 32,
            "hasliked": 0,
            "id": "MXfczn",
            "likes": 8,
            "name": "Poisoned cube",
            "published": 3,
            "tags": [
                "rme5dofblur"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "#define W\tvec2\n#define BLOOM\n#define time\tiTime\n\nfloat alpha;\n\n#define res\tiResolution\n\nvec4 bloom = vec4(0),\n     blur = vec4(0);\n\n#define GA\t2.399\n\nmat2 rot = mat2(cos(GA), sin(GA), -sin(GA), cos(GA));\nvec3 pixel = vec3(.001 * 8. / 6., .001, 0) * .1;\nfloat intensity(vec4 col) { return dot(col.rgb, vec3(0.2126, 0.7152, 0.0722)); }\n\n// \tsimplyfied version of Dave Hoskins blur\nvoid dof(sampler2D tex, vec2 uv, float rad, vec4 org) {\n\tvec2 angle = vec2(0, rad);\n\trad = 1.;\n\tfor (int j = 0; j < 70; j++) {\n\t\trad += 1. / rad;\n\t\tangle *= rot;\n\t\tvec4 col = texture(tex, uv + pixel.xy * (rad - 1.) * angle);\n\t\tif (intensity(col) > .5) bloom += col;\n\t\tblur += col;\n\t}\n\n\tblur /= 96.;\n}\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = gl_FragCoord.xy / res.xy;\n\tvec4 orgColor = (texture(iChannel0, uv) + (texture(iChannel0, uv + pixel.xz) + texture(iChannel0, uv + pixel.zx) + texture(iChannel0, uv - pixel.xz) + texture(iChannel0, uv - pixel.zx)) * .25) / 2.;\n\talpha = texture(iChannel0, uv).a;\n\tdof(iChannel0, uv, 2., orgColor);\n\tfloat df = smoothstep(0., 1., alpha * alpha * 1.2);\n\torgColor = mix(orgColor, blur, clamp(df, 0., 1.));\n\torgColor += bloom * 0.003;\n\tfragColor = vec4(df);\n\tfragColor = orgColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define getNormal\tgetNormalHex\n#define FAR\t330.\n#define INFINITY\t1e32\n\n/* Music utils */\nconst float BPM = 114.;\nfloat MusicTime, BeatTime, CurrentBeat, CurrentBeatStartTime, CurrentBeatElapsed, NormalizedCurrentBeatElapsed;\nint CurrentBeatInt;\nvoid calcMusicTime() {\n\tfloat musicTimeDelta = 0.;\n\tMusicTime = iTime + musicTimeDelta;\n\tBeatTime = 60. / BPM * 16.;\n\tCurrentBeat = floor(MusicTime / BeatTime);\n\tCurrentBeatStartTime = CurrentBeat * BeatTime;\n\tCurrentBeatElapsed = MusicTime - CurrentBeatStartTime;\n\tNormalizedCurrentBeatElapsed = CurrentBeatElapsed / BeatTime;\n\tCurrentBeatInt = int(CurrentBeat);\n}\n\n#define PI\t3.14159265\n\n//#define TAU (2*PI)\n#define PHI\t(1.618033988749895)\n\nfloat Z = 0., J = 1., vol = 0., noise = 0.;\n\n#define H(P)\tfract(sin(dot(P, vec2(127.1, 311.7))) * 43758.545)\n\nfloat n(in vec3 p){\n\tvec3 i = floor(p), f = fract(p), u = f * f * (3. - f - f);\n\tvec2 ii = i.xy + i.z * 5. + 5.;\n\n#define II(a, b)\tH(i.xy + i.z * vec2(5.0) + vec2(a, b))\nfloat v1 = mix(mix(II(Z, Z), II(J, Z), u.x), mix(II(Z, J), II(J, J), u.x), u.y);\n\n#define I2(a, b)\tH(ii + vec2(a, b))\n\treturn max(mix(v1, mix(mix(I2(Z, Z), I2(J, Z), u.x), mix(I2(Z, J), I2(J, J), u.x), u.y), u.z), Z);\n}\n\n#define A\tw *= .5; s *= 2.; r += w * n(s * x);\nfloat  B(vec3 x){\n\tfloat r = Z, w = J, s = J;\n\tA A A A;\n\treturn r;\n}\n\n#define fromRGB(a, b, c)\tvec3(F(a), F(b), F(c)) / 255.;\n\nvec3 light = vec3(0., 1., 1.);\nvoid pR(inout vec2 p, float a) { p = cos(a) * p + sin(a) * vec2(p.y, -p.x); }\n\nstruct geometry {\n\tfloat dist;\n\tfloat materialIndex;\n\tfloat specular;\n\tfloat diffuse;\n\tfloat fresnel;\n\tvec3 color;\n\tvec3 emmisive;\n\tvec3 space;\n\tfloat mirror;\n};\n\ngeometry geoU(geometry g1, geometry g2) {\n\tif (g1.dist < g2.dist) return g1;\n\treturn g2;\n}\n\n// Maximum/minumum elements of a vector\nfloat vmax(vec2 v) { return max(v.x, v.y); }\n\nfloat vmax(vec3 v) { return max(max(v.x, v.y), v.z); }\n\nfloat vmax(vec4 v) { return max(max(v.x, v.y), max(v.z, v.w)); }\n\n// Repeat around the origin by a fixed angle.\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\nconst float nudge = 1.739513;\n // size of perpendicular vector\nconst float normalizer = 1.0 / sqrt(1.0 + nudge * nudge);\n // pythagorean theorem on that perpendicular to maintain scale\nfloat SpiralNoiseC(vec3 p) {\n\tfloat n = 0.5;\n\tfloat iter = 1.0;\n\tfor (int i = 0; i < 12; i++) {\n\t\tn += -abs(sin(p.y * iter) + cos(p.x * iter)) / iter; // abs for a ridged look\n\t\tn -= (cos(p.y * iter) + sin(p.x * iter)) / iter; // abs for a ridged look\n\t\tp.xy += vec2(p.y, -p.x) * nudge;\n\t\tp.xy *= normalizer;\n\t\tp.xz += vec2(p.z, -p.x) * nudge;\n\t\tp.xz *= normalizer;\n\t\titer *= 1.3733733;\n\t}\n\n\treturn n;\n}\n\nfloat NebulaNoise(vec3 p) {\n\tfloat final = p.y + 4.5;\n\tfinal += SpiralNoiseC(p.zxy * 0.6123 + 100.0 + iTime * .2) * (4.0 + abs(sin(CurrentBeatElapsed))); // large scale features\n\treturn final;\n}\n\ngeometry map(vec3 p) {\n\tgeometry box, nbox, box2;\n\tvec3 bp2 = p;\n\tpR(p.xy, 0.2);\n\tbox.dist = fBox(p, 2. * vec3(5., 5., 5.)) - .2;\n\tif (CurrentBeatInt > 1) {\n\t\tbox2.dist = max(box.dist, -length(bp2.xz) + 9.);\n\t\tbox2.dist = max(box2.dist, -length(bp2.yz) + 8.);\n\t\tbox2.dist = max(box2.dist, -length(bp2.yx) + 8.);\n\t\tbox.dist = mix(box.dist, box2.dist, sin(NormalizedCurrentBeatElapsed * 6.28) * 0.5 + 0.5);\n\t}\n\n\tbox.diffuse = 0.;\n\tbox.specular = 12.;\n\tbox.mirror = .4;\n\tbox.color = vec3(0.);\n\tbox.emmisive = vec3(1., 1.0, 1.) * 0.1;\n\tbox.fresnel = 4.;\n\tnbox = box;\n\tnbox.diffuse = 1.;\n\tnbox.mirror = 0.5;\n\tnbox.specular = 1.1;\n\tnbox.color = vec3(1., .3, .0);\n\tnbox.emmisive = nbox.color * .4;\n\tnbox.fresnel = 3.;\n\tfloat nb = NebulaNoise(1. + bp2 * .405 + vec2(-iTime * .1, 0.).xxx);\n\tnb = nb - 3.;\n\tnbox.dist = min(nb, -box.dist) * 1. + 3.;\n\tnbox.dist = mix(box.dist + 3.9, nbox.dist, .2) * .3;\n\tbox = geoU(nbox, box);\n\treturn box;\n}\n\nfloat t_max = FAR;\nconst int MAX_ITERATIONS = 190;\ngeometry trace(vec3 o, vec3 d, int maxI) {\n\tfloat omega = 1.0;\n\tfloat t = .001;\n\tfloat candidate_error = INFINITY;\n\tfloat candidate_t = t;\n\tfloat previousRadius = 0.;\n\tfloat stepLength = 0.;\n\tfloat pixelRadius = 1. / 250.;\n\tfloat functionSign = map(o).dist < 0. ? -1. : + 1.;\n\tgeometry mp;\n\tfor (int i = 0; i < MAX_ITERATIONS; ++i) {\n\t\tif (maxI > 0 && i > maxI) break;\n\t\tmp = map(d * t + o);\n\t\tfloat signedRadius = functionSign * mp.dist;\n\t\tfloat radius = abs(signedRadius);\n\t\tbool sorFail = omega > 1. && (radius + previousRadius) < stepLength;\n\t\tif (sorFail) {\n\t\t\tstepLength -= omega * stepLength * .1;\n\t\t\tomega = 0.5;\n\t\t}\n\t\telse stepLength = signedRadius * omega;\n\n\t\tpreviousRadius = radius;\n\t\tfloat error = radius / t;\n\t\tif (!sorFail && error < candidate_error) {\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif (!sorFail && error < pixelRadius || t > t_max) break;\n\t\tt += stepLength;\n\t}\n\n\tmp.dist = candidate_t;\n\tif ((t > t_max || candidate_error > pixelRadius)) mp.dist = INFINITY;\n\treturn mp;\n}\n\n\nconst float eps = 0.01;\nfloat softShadow(vec3 ro, vec3 lp, float k) {\n\tconst int maxIterationsShad = 33;\n\tvec3 rd = (lp - ro); // Unnormalized direction ray.\n\tfloat shade = 1.;\n\tfloat dist = 0.;\n\tfloat end = max(length(rd), 0.01);\n\tfloat stepDist = end / float(maxIterationsShad);\n\trd /= end;\n\tfor (int i = 0; i < maxIterationsShad; i++) {\n\t\tfloat h = map(ro + rd * dist).dist * .5;\n\t\tshade = min(shade, smoothstep(0.0, 1.0, k * h / dist));\n\t\tdist += min(h, stepDist * 2.);\n\t\tif (h < 0.001 || dist > end) break;\n\t}\n\n\treturn clamp(shade, 0.0, 1.);\n}\n\n//\tnormal calculation\nvec3 normal(vec3 pos) {\n\tfloat eps = .001,\n\t      d = map(pos).dist;\n\treturn normalize(vec3(map(pos + vec3(eps, 0, 0)).dist - d, map(pos + vec3(0, eps, 0)).dist - d, map(pos + vec3(0, 0, eps)).dist - d));\n}\n\nfloat getAO(vec3 hitp, vec3 normal, float dist) {\n\tvec3 spos = hitp + normal * dist;\n\tfloat sdist = map(spos).dist;\n\treturn clamp(sdist / dist, 0.0, 1.0);\n}\n\n// Calulcate a fresnel term for reflections\nfloat fresnelTerm(in vec3 rd, in vec3 n, in float power) {\n\tfloat fresnel = min(1., dot(rd, n) + 1.0);\n\tfresnel = pow(fresnel, power);\n\treturn fresnel;\n}\n\nvec3 doColor(in vec3 sp, in vec3 rd, in vec3 sn, in vec3 lp, geometry obj) {\n\tlp = sp + lp;\n\tvec3 ld = lp - sp; // Light direction vector.\n\tfloat lDist = max(length(ld / 2.), 0.01); // Light to surface distance.\n\tld /= lDist; // Normalizing the light vector.\n\tfloat diff = max(dot(sn, ld), obj.diffuse) / 2.;\n\n\tfloat spec = max(dot(reflect(ld, sn), rd), obj.specular);\n\n\tvec3 objCol = obj.color;\n\n\treturn (objCol * (diff + .15) + spec * .1 + fresnelTerm(rd, sn, 2.) * obj.fresnel) * smoothstep(0., .1, .5 - fract(sp.y * .5 * sn.x + sp.y * .5 * sn.z + (sp.x + sp.z) * .5 * sn.y));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tcalcMusicTime();\n\tfloat mat = 0., camShY = 0.;\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tuv *= tan(radians(120.) / 2.);\n\tlight = vec3(1., 0., 10.);\n\tvec3 vuv = vec3(0., 1., 0.),\n\t     ro = vec3(0., 0., -30.); // pos\n\t\n    //\n\tpR(ro.yz, PI / 6. - NormalizedCurrentBeatElapsed + CurrentBeatStartTime);\n\tpR(ro.xy, NormalizedCurrentBeatElapsed * .1 + CurrentBeat);\n    \n\tvec3 vrp = vec3(0., 0., 0.),\n\t     vpn = normalize(vrp - ro),\n\t     u = normalize(cross(vuv, vpn)),\n\t     rd = normalize(vpn + uv.x * u * iResolution.x / iResolution.y + uv.y * cross(vpn, u)), hit;\n\tvec3 sceneColor = vec3(0.);\n\tgeometry tr = trace(ro, rd, 90);\n\tgeometry otr = tr;\n\thit = ro + rd * tr.dist;\n\t\n    float alpha = 1.;\n\tvec3 sky = vec3(.05);\n\tvec3 sn;\n\t\n    float ao, sh;\n\t\n    if (tr.dist < FAR) {\n\t\tsn = normal(hit);\n\t\tsh = softShadow(hit, light, 22132.1);\n\t\tao = getAO(hit, sn, .5);\n\t\tsceneColor = (doColor(hit, rd, sn, light, tr));\n\t\tsceneColor *= ao;\n\t\tsceneColor *= sh;\n\t\tsceneColor += tr.emmisive;\n\t\talpha = tr.dist / 26.;\n\n\t\t//\n\t\tif (tr.mirror > 0.) {\n\t\t\trd = reflect(rd, sn);\n\t\t\tro = hit + rd * .01;\n\t\t\ttr = trace(ro, rd, 90);\n\t\t\tvec3 refSceneColor;\n\t\t\thit = ro + rd * tr.dist;\n\t\t\tsn = normal(hit);\n\t\t\trefSceneColor = (doColor(hit, rd, sn, light, tr));\n\t\t\tif (tr.dist < FAR) {\n\t\t\t\trefSceneColor *= getAO(hit, sn, .5);\n\t\t\t\trefSceneColor *= softShadow(hit, light, 32.1);\n\t\t\t\trefSceneColor += tr.emmisive;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsky = vec3(.05);\n\t\t\t\trefSceneColor = sky;\n\t\t\t}\n\n\t\t\tsceneColor = mix(sceneColor, refSceneColor, otr.mirror);\n\t\t}\n\t}\n\telse {\n\t\talpha = 0.;\n\t\tsceneColor = vec3(1.) - abs(rd.y);\n\t}\n\n\tfragColor = vec4(clamp(sceneColor * (1. - length(uv) / 3.5), 0.0, 1.0), 1.0);\n\tfragColor.a = alpha;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}