{
    "Shader": {
        "info": {
            "date": "1497568810",
            "description": "More FBM stuff, mouse rotates camera",
            "flags": 0,
            "hasliked": 0,
            "id": "4dsfzf",
            "likes": 10,
            "name": "Simple Procedural Sun",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raytracing",
                "fractal",
                "noise",
                "fbm"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 928
        },
        "renderpass": [
            {
                "code": "#define urx 1920U\n#define ury 1080U\n#define pi 3.141592654\n//sun\n#define sunCenter vec3(0.0)\n#define sunRad .25\n#define fractalIterations 4\n#define fractalScale 10.0\n#define fractalFreq 2.0\n#define sunBrightness .87\n#define redMean .55\n#define greenMean .35\n#define blueMean .0\n//corona\n#define coronaCol vec3(.8, .5, .1)\n#define coronaDropOff 15.0\n\nfloat iSphere(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n\tvec3 rc = ray-center;\n\tfloat c = dot(rc, rc) - (radius*radius);\n\tfloat b = dot(dir, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn mix(-1.0, t, st);\n}\n\n\nvec4 iPlane(vec3 ro, vec3 rd, vec3 po, vec3 pd){\n    float d = dot(po - ro, pd) / dot(rd, pd);\n    return vec4(d * rd + ro, d);\n}\n\nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nfloat hash(uint n){//Hugo Elias's hash\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return 1.0 - float(n & 0x7fffffffU)/float(0x7fffffff);\n}\n\nfloat hashNoise3(vec3 x){\n    vec3 fr = fract(x);\n    fr = smoothstep(0.0, 1.0, fr);\n    uvec3 p = uvec3(x);\n    return mix(mix(mix(hash(p.x + ury * p.y + urx * p.z), \n                        hash(p.x + 1U + ury * p.y + urx * p.z),fr.x),\n                   mix(hash(p.x + ury * (p.y + 1U) + urx * p.z), \n                        hash(p.x + 1U + ury * (p.y + 1U) + urx * p.z),fr.x),fr.y),\n               mix(mix(hash(p.x + ury * p.y + urx * (p.z + 1U)), \n                        hash(p.x + 1U + ury * p.y + urx * (p.z + 1U)),fr.x),\n                   mix(hash(p.x + ury * (p.y + 1U) + urx * (p.z + 1U)), \n                        hash(p.x + 1U + ury * (p.y + 1U) + urx * (p.z + 1U)),fr.x),fr.y),fr.z);\n}\n\nfloat fractalNoise3(vec3 pos){\n    float acc = 0.0;\n    float scale = 1.0;\n    for(int n = 0; n < fractalIterations; n++){\n        acc += hashNoise3(scale * pos) / scale;\n        scale *= 2.0;\n    }\n    return acc / 2.0;\n}\n\nvec3 colorSun(float x){\n    vec3 result = vec3(0.0);\n    result.x += exp(-(x - redMean) * (x - redMean) * 16.0);\n    result.y += exp(-(x - greenMean) * (x - greenMean) * 16.0);\n    //result.z += exp(-(x - blueMean) * (x - blueMean) * 16.0);\n    if(result.y > .5) result.x += result.y;\n    return result;\n}\n\nvec3 render(vec3 rd, vec3 ro){\n    float d = iSphere(ro, rd, sunCenter, sunRad);\n    if(d > 0.0){\n        vec3 n = normalize(d * rd + ro - sunCenter);\n        float f = fractalNoise3(fractalScale * n + (.3 + .2 * sin(fractalFreq * iTime)\n                                      + fractalFreq * vec3(iTime + 13.0)));\n        vec3 col = colorSun(f);\n        return col + dot(rd, n) * (1.0 - sunBrightness);\n    }\n    else{\n        vec4 intersect = iPlane(ro, rd, sunCenter, normalize(sunCenter - ro));\n        return pow(coronaCol, vec3(coronaDropOff * (length(intersect.xyz - sunCenter) - sunRad)));\n    }\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n\tfragColor = vec4(0.0);\n    vec2 xy = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 cam = vec3(0.0, 0.0, -1.0);\n    vec3 dir = normalize(vec3(xy, 2.5));\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    m *= 2.0;\n    dir = r(dir, m);\n    cam = r(cam, m);\n    fragColor.xyz = render(dir, cam);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}