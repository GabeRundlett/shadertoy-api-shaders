{
    "Shader": {
        "info": {
            "date": "1400417967",
            "description": "curvature of implicit surfaces",
            "flags": 0,
            "hasliked": 0,
            "id": "lssXD8",
            "likes": 6,
            "name": "Implicit Curvature",
            "published": 3,
            "tags": [
                "mattdamon"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 709
        },
        "renderpass": [
            {
                "code": "// marching cube on dual grid visualization\n// -- @paniq\n\n#define GRIDRES 10\n\n//#define HEROKU\n#ifdef HEROKU\n#ifdef GL_ES\nprecision mediump float;\n#endif\n// compatibility for glsl.heroku.com \nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define iMouse mouse\n#define iTime time\n#define iResolution resolution\n#endif\n\nvec2 aspect;\nvec2 uv;\nvec2 position;\nfloat ScreenH;\nfloat AA;\nfloat AAINV;\n\n//////////////////////////////////////////////////////////\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n//////////////////////////////////////////////////////////\n\nvec3 hue(float hue) {\n    return clamp( \n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, \n        0.0, 1.0);\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = hue(h);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nvec4 hsl(float h, float s, float l, float a) {\n    return vec4(hsl(h,s,l),a);\n}\n\n//////////////////////////////////////////////////////////\n\n#define DEFAULT_SHAPE_V 1e+20\n\nstruct Context {\n    vec2 position;\n    float scale;\n    float shape;\n    float line_width;\n    vec2 blur;\n    vec4 source;\n    vec2 start_pt;\n    vec2 last_pt;\n} _stack;\nvec3 _color = vec3(1.0);\n\nContext save() {\n    return _stack;\n}\n\nvoid restore(Context ctx) {\n    // preserve shape\n    float shape = _stack.shape;\n    _stack = ctx;\n    _stack.shape = shape;\n}\n\nmat3 mat2x3_invert(mat3 s)\n{\n    float d = det(s[0].xy,s[1].xy);\n    d = (d != 0.0)?(1.0 / d):d;\n\n    return mat3(\n        s[1].y*d, -s[0].y*d, 0.0,\n        -s[1].x*d, s[0].x*d, 0.0,\n        det(s[1].xy,s[2].xy)*d,\n        det(s[2].xy,s[0].xy)*d,\n        1.0);\n}\n\nvoid identity_matrix() {\n    _stack.position = position;\n    _stack.scale = 1.0;\n}\n\nvoid set_matrix(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position = (mtx * vec3(position,1.0)).xy;\n    _stack.scale = length(vec2(mtx[0].x,mtx[1].y));\n}\n\nvoid transform(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position = (mtx * vec3(_stack.position,1.0)).xy;\n    vec2 u = vec2(mtx[0].x, mtx[1].x);\n    _stack.scale *= length(u);\n}\n\nvoid rotate(float a) {\n    float cs = cos(a), sn = sin(a);\n    transform(mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0));\n}\n\nvoid scale(float s) {\n    transform(mat3(s,0.0,0.0,0.0,s,0.0,0.0,0.0,1.0));\n}\n\nvoid translate(vec2 p) {\n    transform(mat3(1.0,0.0,0.0,0.0,1.0,0.0,p.x,p.y,1.0));\n}\n\nvoid translate(float x, float y) { translate(vec2(x,y)); }\n\nvoid clear() {\n    _color = mix(_color, _stack.source.rgb, _stack.source.a);\n}\n\nvoid add(float d) {\n    _stack.shape = min(_stack.shape, d / _stack.scale);\n}\n\nvec4 blit() {\n    return vec4(_color.xyz, 1.0);\n}\n\nvoid new_path() {\n    _stack.shape = DEFAULT_SHAPE_V;\n}\n\nvoid debug_gradient() {\n    _color = mix(_color, \n        hsl(_stack.shape * 6.0, \n            1.0, (_stack.shape>=0.0)?0.5:0.3), \n        0.5);\n}\n\nvoid set_blur(float b) {\n    if (b == 0.0) {\n        _stack.blur = vec2(AA, 0.0);\n        return;\n    }\n    float a = 1.0 / max(AAINV, b);\n    _stack.blur = vec2(\n        a,\n        0.0); // 0 = blur ends at outline, 1 = blur starts at outline\n}\n\nvoid fill_preserve() {\n    float w = clamp(-_stack.shape*AA, 0.0, 1.0);\n    _color = mix(_color, _stack.source.rgb, w * _stack.source.a);\n}\n\nvoid fill() {\n    fill_preserve();\n    new_path();\n}\n\nvoid set_line_width(float w) {\n    _stack.line_width = w;\n}\n\nvoid set_line_width_px(float w) {\n    _stack.line_width = w*_stack.scale/AA;\n}\n\nvoid stroke_preserve() {\n    float w = abs(_stack.shape)- _stack.line_width/_stack.scale;\n    vec2 blur = _stack.blur;// / _stack.scale;\n    w = clamp(-w*blur.x + blur.y, 0.0, 1.0);\n    _color = mix(_color, _stack.source.rgb, w * _stack.source.a);\n}\n\nvoid stroke() {\n    stroke_preserve();\n    new_path();\n}\n\nvoid set_source_rgba(vec4 c) {\n    _stack.source = c;\n}\n\nvoid set_source_rgba(float r, float g, float b, float a) { \n    set_source_rgba(vec4(r,g,b,a)); }\n\nvoid set_source_rgb(vec3 c) {\n    set_source_rgba(vec4(c,1.0));\n}\n\nvoid set_source_rgb(float r, float g, float b) { set_source_rgb(vec3(r,g,b)); }\n\nvoid set_source(sampler2D image) {\n    set_source_rgba(texture(image, _stack.position));\n}\n\nvoid rectangle(vec2 o, vec2 s) {\n    s*=0.5;\n    o = o - _stack.position + s;\n    vec2 d = abs(o) - s;\n    add(min(max(d.x,d.y),0.0) + length(max(d,0.0)));\n}\n\nvoid rectangle(float ox, float oy, float sx, float sy) {\n    rectangle(vec2(ox,oy), vec2(sx,sy));\n}\n\nvoid circle(vec2 p, float r) {\n    add(length(_stack.position - p) - r);\n}\nvoid circle(float x, float y, float r) { circle(vec2(x,y),r); }\n\nvoid move_to(vec2 p) {\n    _stack.start_pt = p;\n    _stack.last_pt = p;\n}\n\nvoid move_to(float x, float y) { move_to(vec2(x,y)); }\n\n// stroke only\nvoid line_to(vec2 p) {\n    vec2 pa = _stack.position - _stack.last_pt;\n    vec2 ba = p - _stack.last_pt;\n    float h = clamp(dot(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    add(length(pa - ba*h));\n    \n    _stack.last_pt = p;\n}\n\nvoid line_to(float x, float y) { line_to(vec2(x,y)); }\n\nvoid close_path() {\n    line_to(_stack.start_pt);\n}\n\n// from \"Random-access rendering of general vector graphics\"\n// by Nehab and Hoppe\n// only quadratic, not cubic\nvoid curve_to(vec2 b1, vec2 b2)\n{\n    vec2 b0 = _stack.last_pt - _stack.position;\n    b1 -= _stack.position;\n    b2 -= _stack.position;\n    float a=det(b0,b2), b=2.0*det(b1,b0), d=2.0*det(b2,b1);\n    float f=b*d-a*a;\n    vec2 d21=b2-b1, d10=b1-b0, d20=b2-b0;\n    vec2 gf=2.0*(b*d21+d*d10+a*d20);\n    gf=vec2(gf.y,-gf.x);\n    vec2 pp=-f*gf/dot(gf,gf);\n    vec2 d0p=b0-pp;\n    float ap=det(d0p,d20), bp=2.0*det(d10,d0p);\n    float t=clamp((ap+bp)/(2.0*a+b+d), 0.0, 1.0);\n    add(length(mix(mix(b0,b1,t),mix(b1,b2,t),t)));\n}\n\nvoid curve_to(float b1x, float b1y, float b2x, float b2y) {\n    curve_to(vec2(b1x,b1y),vec2(b2x,b2y));\n}\n\n//////////////////////////////////////////////////////////\n\nfloat box(vec3 p, vec3 size) {\n\tvec3 d = abs(p) - size;\n    \n\tvec3 dm = max(d, 0.0);\n    \n    return min(max(d.x,max(d.y,d.z)),0.0) + length(dm);\n}\n\nfloat sphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat plane(vec3 p, vec4 n) {\n\treturn dot(p,n.xyz) - n.w;\n}\n\n// c must be normalized\nfloat cone(vec3 p, vec2 a, float l) {\n    return max(max(a.x*length(p.xy)+a.y*p.z, p.z), abs(p.z)-l);\n}\n\nvec2 ms;\n\nvec3 rotate(vec3 p, float a) {\n\tfloat sa = sin(a);\n\tfloat ca = cos(a);\n\treturn vec3(\n\t\tp.x*ca - p.z*sa,\n\t\t0.0,\n\t\tp.x*sa + p.z*ca\n\t);\n}\n\nfloat map(vec3 p) {\n\tp.xz -= ms;\n    \n\tfloat w = plane(p, vec4(0.0,0.0,1.0,-0.6));\n\tfloat s = sphere(p - vec3(1.0,0.0,0.0), 0.5);\n\tfloat s2 = sphere(p - vec3(0.67,0.0,0.0), 0.2);\n\tfloat c = cone(p - vec3(-0.5,0.0,-0.3), normalize(vec2(1.0,0.5)), 0.5);\n\tfloat b = box(rotate(p - vec3(-0.5,0.0,0.2),iTime), vec3(0.3,1.0,0.1))-0.1;\n\treturn min(b, min(c, min(max(s,-s2),w)));\n}\n\nvec3 grad0(vec3 p, float e) {\n\tvec2 d = vec2(0.0, e);\n\treturn -vec3(\n\t\tmap(p + d.yxx) - map(p - d.yxx),\n\t\tmap(p + d.xyx) - map(p - d.xyx),\n\t\tmap(p + d.xxy) - map(p - d.xxy));\n}\n\nconst float ERR = 1e-2;\nvec3 grad(vec3 p) {\n\treturn grad0(p,ERR) / (2.0 * ERR);\n}\n\nconst float H_ERR = 1e-2;\nconst float G_ERR = 1e-2;\nmat3 hessian(vec3 p) {\n\tvec2 d = vec2(0.0, H_ERR);\n\t\n\tfloat f = 2.0*H_ERR;\n\treturn mat3(\n\t\tgrad0(p + d.yxx,G_ERR) - grad0(p - d.yxx,G_ERR),\n\t\tgrad0(p + d.xyx,G_ERR) - grad0(p - d.xyx,G_ERR),\n\t\tgrad0(p + d.xxy,G_ERR) - grad0(p - d.xxy,G_ERR)) / f;\n}\n\nconst mat3 identity = mat3(\n\t1.0, 0.0, 0.0,\n\t0.0, 1.0, 0.0,\n\t0.0, 0.0, 1.0\n);\n\n//Curvature only, 5 taps, with epsilon width as input\nfloat curvature(in vec3 p)\n{\n    vec2 e = vec2(-1., 1.)*0.01;\n    \n    float t1 = map(p + e.yxx), t2 = map(p + e.xxy);\n    float t3 = map(p + e.xyx), t4 = map(p + e.yyy);\n    \n    return .125/(e.x*e.x) *(t1 + t2 + t3 + t4 - 4. * map(p));\n}\n\n\nvec2 grad2d(vec3 p) {\n\tvec2 d = vec2(0.0, 1e-3);\n\treturn normalize(vec2(\n\t\tmap(p + d.yxx) - map(p - d.yxx),\n\t\tmap(p + d.xxy) - map(p - d.xxy)));\n}\n\nvoid arrow(vec2 u, vec2 n) {\n\tvec2 o = vec2(n.y, -n.x);\n\tmove_to(u);\n\tu += n;\n\tline_to(u);\n\tmove_to(u - o*0.2);\n\tline_to(u + o*0.2);\n\tline_to(u + n*0.4);\n\tclose_path();\n}\n\nfloat mlen(vec2 c) {\n\tc = abs(c);\n\treturn max(c.x, c.y);\n}\n\nfloat mlen(vec3 c) {\n\tc = abs(c);\n\treturn max(c.x, max(c.y, c.z));\n}\n\nbool gravitymarch(vec3 ro, float maxt, out vec3 p) {\n\tfloat precis = 0.001;\n\tfloat h = 1000.0;\n\tp = ro;\n\tfor(int i = 0; i < 5; i++) {\n\t\tif(abs(h) < precis || length(p - ro) > maxt) break;\n\t\th = map(p);\n\t\tvec2 n = grad2d(p);\n\t\tp.xz -= n*h;\n\t}\t\n\treturn (abs(h) < precis);\n}\n\n\n\nvec3 sigcolor(float k) {\n\treturn hue(k*0.01);\n}\n\nvoid paint() {\n\tif (iMouse.z < 0.0)\n\t\tms *= 0.0;\n\t\n\tvec3 mp = vec3(position.x,0.0,position.y);\n\n\tfloat k1k2 = curvature(mp);\n\t\n\t// clear screen\n\t\n\tset_source_rgb(sigcolor(k1k2)*0.2);\n\tclear();\n\n\tset_line_width_px(5.0);\n\t\n\tfloat d = map(mp);\n\t_stack.shape = d;\n\tset_source_rgb(sigcolor(k1k2));\n\t//fill_preserve();\n\tstroke();\n\t\n\n\n}\n\n//////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    uv = fragCoord.xy / iResolution.xy;\n    position = (uv*2.0-1.0)*aspect;\n    ScreenH = min(iResolution.x,iResolution.y);\n    AA = ScreenH*0.4;\n    AAINV = 1.0 / AA;\n    \n    ms = ((iMouse.xy/iResolution.xy)*2.0-1.0) * aspect;\n    _stack = Context(\n        position, 1.0,\n        DEFAULT_SHAPE_V,\n        1.0,\n        vec2(AA,0.0),\n        vec4(vec3(0.0),1.0),\n        vec2(0.0),\n        vec2(0.0)\n    );\n    paint();\n    \n    fragColor = blit();\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}