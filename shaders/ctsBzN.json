{
    "Shader": {
        "info": {
            "date": "1692706783",
            "description": "bayer tato",
            "flags": 32,
            "hasliked": 0,
            "id": "ctsBzN",
            "likes": 22,
            "name": "Day 1342",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 407
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = U/R.xy;\n    vec2 uvn = (U - 0.5*R.xy)/min(R.x,R.y);\n    C = vec4(0);\n    \n    C = Ta(uv);\n    //C += Ta(uv - 0.2*sin(iTime)*clamp(fwidth(C.x),0.,0.01)*0.4).y*0.8;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nfloat sdBox(vec2 p, vec2 sz){\n    p = abs(p) - sz;\n    return max(p.x,p.y);\n}\nvoid mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = U/R.xy;\n    vec2 uvn = (U - 0.5*R.xy)/min(R.x,R.y);\n    C = vec4(0);\n    int F = iFrame % 120;\n    seed += uint(iFrame/120)*1000u;\n    if(F == 0){\n        C = Ta(uv);\n        C.w = 1.0;\n    } else{\n        if(F == 1){\n            uv += step(valueNoise( uv*rot(5.5+ hash_f()*20.)*vec2(0.01,5.) ),0.5)*0.4;\n            C = Tb(uv); \n            if(sdBox(mod(uvn*rot(0.) - hash_v2()*1. - 0.5,4.), vec2(0.7,5.)) < 0.){\n                C.w = 15.;\n                C += 11.5;\n            }  \n        } else if (F == 2){\n            uv -= smoothstep(valueNoise( uv*rot(5.5 + hash_f()*20.)*vec2(0.01,5.) ),0.1,0.104)*0.4;\n            C = Tb(uv)*vec4(0.5,1.5,1,1.) - Ta(uv*14.).yyyy; \n            \n            if(length(fwidth(uv)) > 0.5){\n                C = vec4(1);\n            }\n        } else if (F == 3){\n            uv -= smoothstep(valueNoise( uv*rot(5.5+ hash_f()*20. + 3.14/2.)*vec2(0.01,5.) + 5. * hash_f() ),0.1,0.104)*0.4;\n            C = Tb(uv)*vec4(1,1,1,1.); \n            C = Tb(uv + 0.1 * float(C.w > 0.9))*vec4(1,1,1,1.); \n            \n            if(length(fwidth(uv)) > 0.42){\n                C = vec4(1);\n            }\n        } else {\n            C = Tb(uv);\n            \n            if(hash_f() > 0.5 || true){\n                C = Ta(uv*1.);\n                uv -= vec2(dFdx(C.y),dFdy(C.x))*0.41 * mix(0.,2.5,hash_f());\n                vec2 muv = (iMouse.xy - 0.5*R.xy)/min(R.x,R.y);\n                if (iMouse.z > 0.)\n                    uv += 0.1*normalize(muv - uvn) * smoothstep(0.1,0.,length(muv-uvn));\n                //C.xy += -15.*vec2(dFdx(C.y),dFdy(C.x))*0.41 * mix(7.,.5,hash_f());\n                //uv -= vec2(1)*rot(hash_f()*20.)*step(valueNoise( uv*rot(5.5+ hash_f()*20.)*vec2(0.01,5.) ),0.5)*0.001;\n                \n                C = Tb(uv);\n            }\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define R iResolution.xy\n#define Ta(u) texture(iChannel0,u)\n#define Tb(u) texture(iChannel1,u)\n#define Tc(u) texture(iChannel2,u)\n#define Td(u) texture(iChannel3,u)\n\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n\nuint seed = 11425u;\n\nuint hash_u(uint _a) {\n   uint a = _a;\n   a ^= a >> 16;\n   a *= 0x7feb352du;\n   a ^= a >> 15;\n   a *= 0x846ca68bu;\n   a ^= a >> 16;\n   return a; \n }\nfloat hash_f(){ uint s = hash_u(seed); seed = s;return ( float( s ) / float( 0xffffffffu ) ); }\nvec2 hash_v2(){ return vec2(hash_f(), hash_f()); }\nvec3 hash_v3(){ return vec3(hash_f(), hash_f(), hash_f()); }\nvec4 hash_v4(){ return vec4(hash_f(), hash_f(), hash_f(), hash_f()); }\n\nfloat hash_f_s(uint s){ s = hash_u(s); return ( float( s ) / float( 0xffffffffu ) ); }\n// vec2 hash_22_s(uvec2 s){ uint _s = hash_u(s.x) + hash_u(s.y); return vec2(hash_f_s(_s.x), hash_f_s(_s.y)); }\nfloat hash_21_s(ivec2 _s_){ \n  uvec2 s = uvec2(_s_);\n  uint _s = hash_u(s.x + hash_u(s.y)) + hash_u(s.y + hash_u(s.x)); \n  return hash_f_s(_s); \n}\n// vec3 hash_23_s(){ return vec3(hash_f_s(), hash_f_s(), hash_f_s()); }\n// vec4 hash_24_s(){ return vec4(hash_f_s(), hash_f_s(), hash_f_s(), hash_f_s()); }\n\n\nfloat valueNoise( in vec2 p ){\n    p += 100.;\n    ivec2 i = ivec2(floor( p ));\n    vec2 f = fract( p );\n\n    // cubic interpolant\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash_21_s( i + ivec2(0,0) ), \n                     hash_21_s( i + ivec2(1,0) ), u.x),\n                mix( hash_21_s( i + ivec2(0,1) ), \n                     hash_21_s( i + ivec2(1,1) ), u.x), u.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = U/R.xy;\n    vec2 uvn = (U - 0.5*R.xy)/min(R.x,R.y);\n    C = vec4(0);\n\n  const float bayer[] = float[64](\n     0./63., 32./63., 8./63., 40./63., 2./63., 34./63., 10./63., 42./63., /* 8x8 Bayer ordered dithering */\n    48./63., 16./63., 56./63., 24./63., 50./63., 18./63., 58./63., 26./63., /* pattern. Each input pixel */\n    12./63., 44./63., 4./63., 36./63., 14./63., 46./63., 6./63., 38./63., /* is scaled to the 0..63 range */\n    60./63., 28./63., 52./63., 20./63., 62./63., 30./63., 54./63., 22./63., /* before looking in this table */\n     3./63., 35./63., 11./63., 43./63., 1./63., 33./63., 9./63., 41./63., /* to determine the action. */\n    51./63., 19./63., 59./63., 27./63., 49./63., 17./63., 57./63., 25./63.,\n    15./63., 47./63., 7./63., 39./63., 13./63., 45./63., 5./63., 37./63.,\n    63./63., 31./63., 55./63., 23./63., 61./63., 29./63., 53./63., 21./63.\n  );    \n    \n    C = Ta(uv);\n    C = C + texture(iChannel0,uv,2. + mod(iTime*float(sin(iTime*5.)>0.),2.))*0.1;\n    vec4 oC = C;\n\t//vec2 fuv = floor((uv + 5.)/ sc) * sc;\n\t//vec2 buv = mod(fuv/sc, 8.);\n    \n    float luma = dot(C.xyz,C.xyz);\n    \n    seed = uint(iFrame/60);\n\n    vec2 bay_mult = vec2(1.0);\n    if(luma  < 0.02){\n        bay_mult *= 2.;\n    } else if(luma > 0.02){\n        bay_mult.y *= 1. + 1114442. * fwidth(oC.w);\n        if(fwidth(oC.x) > 0.07){\n            bay_mult *= 4.;\n        }\n    }\n    \n    \n\tvec2 buv = mod(floor(U.xy/bay_mult), 8.);\n    \n\tfloat bay = bayer[int(buv.x) + int(buv.y)*8];\n    if(C.w > 0.8){\n        if(luma > bay){\n            C = vec4(1);\n        } else {\n            C = vec4(0);\n        }\n    } else {\n        if(luma > 0.02){\n            C = vec4(1);\n        } else {\n            C = vec4(0);\n        }\n    }\n    C = 1.-C;\n    C.x += dFdx(oC.w)*1.;\n    for(int i = 0; i < 4; i++){\n        seed = uint(iFrame/60 + i);\n        if(hash_f() > 0.5)\n            C[i] += fwidth(oC.x * valueNoise( uvn*1. + 4.))*(14.)*hash_f();\n    }\n    \n    C = clamp(C,0.,1.);\n    \n    if(C.x < 0.1){\n        C += 0.1;\n    }\n    C -= 0.05 * valueNoise( uvn*400.) + 0.02;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}