{
    "Shader": {
        "info": {
            "date": "1645534457",
            "description": "Directly rasterise font glyphs from a list of quadratic bezier segments, by casting horizontal rays and counting the intersections (i.e. the even-odd rule).",
            "flags": 0,
            "hasliked": 0,
            "id": "NdXfWs",
            "likes": 6,
            "name": "vector glyph by even-odd",
            "published": 3,
            "tags": [
                "bezier",
                "font",
                "quadratic",
                "glyph"
            ],
            "usePreview": 0,
            "username": "swiftcoder",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "// directly rasterise font glyphs from a list of quadratic bezier segments\n\n// bezier segments are stored as 2d vecs packed in to pairs of vec3,\n// i.e. segemnt a->b->c is stored as vec3(a.x, a.y, b.x), vec3(b.y, c.x, c.y).\n//\n// segments are preprocessed on the CPU to each be monotonically decreasing\n// along the y-axis.\nconst vec3 letter_e[] = vec3[] (\n    vec3(0.8253138,0.08301527,0.70711297), vec3(0,0.50627613,0),\n    vec3(0.30230126,0.035305344,0.39539748), vec3(0,0.50627613,0),\n    vec3(0.14225942,0.13549618,0.20920502), vec3(0.07061069,0.30230126,0.035305344),\n    vec3(0.9874477,0.2977099,0.94351465), vec3(0.16603054,0.8253138,0.08301527),\n    vec3(0.037656903,0.29007635,0.07531381), vec3(0.20038168,0.14225942,0.13549618),\n    vec3(0.25941423,0.22709924,0.3493724), vec3(0.14122137,0.51046026,0.14122137),\n    vec3(0.6380753,0.15648855,0.583682), vec3(0.14122137,0.51046026,0.14122137),\n    vec3(0.73117155,0.19847329,0.69246864), vec3(0.17175573,0.6380753,0.15648855),\n    vec3(0.79393303,0.26049617,0.76987445), vec3(0.22519083,0.73117155,0.19847329),\n    vec3(0.16317992,0.45419848,0.16945606), vec3(0.3129771,0.25941423,0.22709924),\n    vec3(0.832636,0.33587787,0.8179916), vec3(0.29580152,0.79393303,0.26049617),\n    vec3(0,0.48854962,0), vec3(0.379771,0.037656903,0.29007635),\n    vec3(0.832636,0.33587787,0.91004187), vec3(0.3167939,0.9874477,0.2977099),\n    vec3(1,0.5763359,1), vec3(0.5152672,1,0.45419848),\n    vec3(1,0.45419848,0.58158994), vec3(0.45419848,0.16317992,0.45419848),\n    vec3(0,0.53435117,0), vec3(0.5114504,0,0.48854962),\n    vec3(0.038702928,0.7194657,0), vec3(0.6335878,0,0.53435117),\n    vec3(0.9717573,0.71374047,1), vec3(0.639313,1,0.5763359),\n    vec3(0.8043933,0.70229006,0.832636), vec3(0.65267175,0.83682007,0.59160304),\n    vec3(0.16736402,0.59160304,0.50209206), vec3(0.59160304,0.83682007,0.59160304),\n    vec3(0.2039749,0.69751906,0.17573221), vec3(0.648855,0.16736402,0.59160304),\n    vec3(0.27719665,0.78244275,0.23221758), vec3(0.7461832,0.2039749,0.69751906),\n    vec3(0.73117155,0.78625953,0.77615064), vec3(0.7519084,0.8043933,0.70229006),\n    vec3(0.8838912,0.851145,0.94351465), vec3(0.78816795,0.9717573,0.71374047),\n    vec3(0.14644352,0.86736643,0.077405855), vec3(0.8053435,0.038702928,0.7194657),\n    vec3(0.38179916,0.83874047,0.32217574), vec3(0.8187023,0.27719665,0.78244275),\n    vec3(0.6286611,0.8396947,0.68619245), vec3(0.8206107,0.73117155,0.78625953),\n    vec3(0.51046026,0.85877866,0.44142258), vec3(0.85877866,0.38179916,0.83874047),\n    vec3(0.51046026,0.85877866,0.5711297), vec3(0.85877866,0.6286611,0.8396947),\n    vec3(0.73117155,0.95706105,0.8242678), vec3(0.91412216,0.8838912,0.851145),\n    vec3(0.30857742,0.9646947,0.21548118), vec3(0.9293893,0.14644352,0.86736643),\n    vec3(0.51046026,1,0.6380753), vec3(1,0.73117155,0.95706105),\n    vec3(0.51046026,1,0.40167364), vec3(1,0.30857742,0.9646947)\n);\n\n// evaluate only the x coordinate of the bezier specified by the control points\nfloat eval_bezier_x(float t, vec2 p1, vec2 p2, vec2 p3) {\n    float s = 1.0 - t;\n    return s * s * p1.x + 2.0 * s * t * p2.x + t * t * p3.x;\n}\n\n// returns the x coordinate of the intersection beteen a horizontal line at y=b, and the\n// bezier specified by the control points, or a very negative value if no intersection.\nfloat bezier_intersect_horizontal_line(float b, vec2 p1, vec2 p2, vec2 p3) {\n    // bezier is entirely above or below the line, no intersection\n    if (min(p1.y, p3.y) > b || max(p1.y, p3.y) < b) {\n        return -1000.0;\n    }\n    \n    // find the intersection by solving for t in the standard bezier equation\n    // https://www.wolframalpha.com/input?i=b+%3D+%281-t%29%5E2*p1%2B+2*t*%281-t%29*p2+%2B+t%5E2*p3+solve+t\n    \n    // we need to precalculate the denominator to avoid a divide by zero\n    float a = p1.y - 2.0*p2.y + p3.y;\n\n    // bezier is a straight line, so we can calculate the intersection directly\n    if (abs(a) < 0.0002) {\n        float t = (b - p1.y) / (p3.y - p1.y);\n        return p1.x + t * (p3.x - p1.x);\n    }\n\n    // now solve for t\n    float t = (p1.y - p2.y - sqrt(b*a + p2.y*p2.y - p1.y*p3.y)) / a;\n    \n    // finally feed t back into the bezier equation to find our x\n    return eval_bezier_x(t, p1, p2, p3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv = uv * 1.2 - 0.1;\n    \n    float intersections = 0.0;\n    for (int i = 0; i < 66; i+=2)\n    {\n        vec3 dataA = letter_e[i + 0];\n        vec3 dataB = letter_e[i + 1];\n        \n        // unpack the bezier control points\n        vec2 p1 = dataA.xy;\n        vec2 p2 = vec2(dataA.z, dataB.x);\n        vec2 p3 = dataB.yz;\n\n        // cast a line rightward from our point, if it intersects bump the counter \n        if (bezier_intersect_horizontal_line(uv.y, p1, p2, p3) >= uv.x) {\n            intersections += 1.0;\n        }\n    }\n\n    // point is inside the glyph everywhere the intersection count is odd\n    float inside = mod(intersections, 2.0);\n    \n    fragColor = vec4(vec3(inside), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}