{
    "Shader": {
        "info": {
            "date": "1467374484",
            "description": "simplified version of  joeedh's  https://www.shadertoy.com/view/Md3GWf\n\"Attempt at a procedurally generated blue noise mask\"\nto experiment and understand it.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldyXDd",
            "likes": 44,
            "name": "Blue Noise Stippling 2",
            "published": 3,
            "tags": [
                "dither",
                "halftone",
                "diffusion",
                "bluenoise",
                "stippling",
                "ordered"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 3441
        },
        "renderpass": [
            {
                "code": "// simplified version of joeedh's https://www.shadertoy.com/view/Md3GWf\n// see also https://www.shadertoy.com/view/MdtGD7\n\n// --- checkerboard noise : to decorelate the pattern between size x size tiles \n\n// simple x-y decorrelated noise seems enough\n#define stepnoise0(p, size) rnd( floor(p/size)*size ) \n#define rnd(U) fract(sin( 1e3*(U)*mat2(1,-7.131, 12.9898, 1.233) )* 43758.5453)\n\n//   joeedh's original noise (cleaned-up)\nvec2 stepnoise(vec2 p, float size) { \n    p = floor((p+10.)/size)*size;          // is p+10. useful ?   \n    p = fract(p*.1) + 1. + p*vec2(2,3)/1e4;    \n    p = fract( 1e5 / (.1*p.x*(p.y+vec2(0,1)) + 1.) );\n    p = fract( 1e5 / (p*vec2(.1234,2.35) + 1.) );      \n    return p;    \n}\n\n// --- stippling mask  : regular stippling + per-tile random offset + tone-mapping\nfloat mask(vec2 p) { \n#define SEED1 1.705\n#define DMUL  8.12235325       // are exact DMUL and -.5 important ?\n    p += ( stepnoise0(p, 5.5) - .5 ) *DMUL;   // bias [-2,2] per tile otherwise too regular\n    float f = fract( p.x*SEED1 + p.y/(SEED1+.15555) ); //  weights: 1.705 , 0.5375\n  //return f;  // If you want to skeep the tone mapping\n    f *= 1.03; //  to avoid zero-stipple in plain white ?\n    // --- indeed, is a tone mapping ( equivalent to do the reciprocal on the image, see tests )\n    // returned value in [0,37.2] , but < 0.57 with P=50% \n    return  (pow(f, 150.) + 1.3*f ) / 2.3; // <.98 : ~ f/2, P=50%  >.98 : ~f^150, P=50%\n}                                          // max = 37.2, int = 0.55\n\n// --- for ramp at screen bottom \n#define tent(f) ( 1. - abs(2.*fract(f)-1.) )\n// --- fetch luminance( texture (pixel + offset) )\n#define s(x,y) dot( texture(iChannel0, (U+vec2(x,y))/R ), vec4(.3,.6,.1,0) ) // luminance\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tvec2 R = iResolution.xy; O-=O;\n    // --- fetch video luminance and enhance the contrast\n    float f =  s(-1,-1) + s(-1,0) + s(-1,1)\n             + s( 0,-1) +         + s( 0,1)\n             + s( 1,-1) + s( 1,0) + s( 1,1),\n         f0 = s(0,0);          \n    f = ( .5*f + 2.*f0 ) / 6.;\n    \n    f = f0 - ( f-f0 ) * 40.;\n\n    // --- stippling\n    O += step(mask(U), U.y/R.x < .05 ? tent(U.x/R.x*.5) : f);\n  //f = f<.565 ? f/.565 : pow((f-.565)/.434,1./150.); // tone map (reciprocal of mask's)\n  //O += f0;                        // original video\n  //O += f;                         // contrast enhanced video\n  //O += tent(U.x/R.x*.5);          // gradient\n  //O += mask(U);                   // test mask alone\n  //O = vec4(stepnoise(U, 1.),0,0); // test stepnoise alone\n  //O = vec4(stepnoise0(U, 1.).x > .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}