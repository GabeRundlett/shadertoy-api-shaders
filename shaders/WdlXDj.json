{
    "Shader": {
        "info": {
            "date": "1552249306",
            "description": "Animated Colorized Disk\nmy step by step tutorial 5\nby Arthur Stammet, 03.2019",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlXDj",
            "likes": 1,
            "name": "Tuto005 Animated Box & Disk",
            "published": 3,
            "tags": [
                "tutorial",
                "animation",
                "rectangle",
                "disk"
            ],
            "usePreview": 0,
            "username": "arthurstammet",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "/* ************************************************************************************* \n\nAnimated Box & Disk\n\nBasic tutorial 5\nby Arthur Stammet, 03.2019\n\n************************************************************************************* */\n\n\nfloat Circle (vec2 coord, vec2 center, float radius, float blur) {\n    float distance = length( coord - center );\n    float color = smoothstep( radius-(blur/2.), radius+(blur/2.), distance );\n    return color;\n}\n\nfloat Rectangle (vec2 uv, vec2 center, float width, float height, float blur) {\n\tfloat w = width/2.;\n    float h = height/2.;\n    float x = uv.x;\n    float y = uv.y;\n    float r = (center.x-smoothstep(w,w-blur,abs(x) ))*(center.y-(smoothstep(h,h-blur,abs(y) )));\n    return r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set the center to the middle of the screen and make the pixels quadratic\n    vec2 p = (fragCoord-.5*iResolution.xy)/iResolution.y; \n\n    // change values here --------------------------------------------------------------\n\n\t// Disk Color-Cycling RGB-Values\n    float SpeedDR = iTime * 0.7;\n    float SpeedDG = iTime * 0.8;\n    float SpeedDB = iTime * 0.9;\n\n\t// Rectangle Color-Cycling RGB-Values\n    float SpeedRR = iTime * 0.3;\n    float SpeedRG = iTime * 0.4;\n    float SpeedRB = iTime * 0.5;\n\n\t// Background Color-Cycling RGB-Values\n    float SpeedBR = iTime * 0.11;\n    float SpeedBG = iTime * 0.12;\n    float SpeedBB = iTime * 0.13;\n\n\t// Parameters for the Lissajous Curve ( Ellipse if SpeedX = SpeedY )\n    float SpeedX = iTime * 0.62;\n    float SpeedY = iTime * 0.75;\n\n    float radius = 0.25; // radius of the disk ( 0.5 = height of the screen ) \n    float blur = 0.03; // low values for sharper edges\n\n    float SpeedW = iTime * 0.32;\n    float SpeedH = iTime * 0.45;\n    \n    // ---------------------------------------------------------------------------------\n    \n    float DR = 0.5 + (sin(SpeedDR) * 0.5); \t\t// 0.0 <> 1.0\n\tfloat DG = 0.5 + (sin(SpeedDG) * 0.5);\t\t// 0.0 <> 1.0\n\tfloat DB = 0.5 + (sin(SpeedDB) * 0.5); \t\t// 0.0 <> 1.0\n\n    float RR = 0.5 + (sin(SpeedRR) * 0.5 ); \t// 0.0 <> 1.0\n\tfloat RG = 0.5 + (sin(SpeedRG) * 0.5 );\t\t// 0.0 <> 1.0\n\tfloat RB = 0.5 + (sin(SpeedRB) * 0.5 ); \t// 0.0 <> 1.0\n\n    float BR = 0.5 + (sin(SpeedBR) * 0.5 ); \t// 0.0 <> 1.0\n\tfloat BG = 0.5 + (sin(SpeedBG) * 0.5 );\t\t// 0.0 <> 1.0\n\tfloat BB = 0.5 + (sin(SpeedBB) * 0.5 ); \t// 0.0 <> 1.0\n\n    // creating a Lissajous Curve\n    float CenterX = sin( SpeedX ) * 0.4;\n\tfloat CenterY = cos( SpeedY ) * 0.2;\n\tvec2 CenterXY = vec2( CenterX, CenterY );\t// center of the disk (animated)\n\n    vec3 disk = vec3( DR, DG, DB ); \t\t\t// colorized disk (animated)\t\n\tvec3 back = vec3 ( BR, BG, BB );  \t\t\t// colorized screen (animated)\n    disk *= Circle(p, CenterXY, radius, blur); \t// moving disk (animated)\n    vec3 rect = vec3 ( RR, RG, RB ); \t\t\t// colorized rectangle (animated)\n\t\n    float width = 0.35 + (sin(SpeedW)*0.3);\n\tfloat height = 0.2 + (sin(SpeedH)*0.15);\n\tvec2 CenterRect = vec2(0.0);\t\t\t\t// center of the rectangle\n\n    rect *= Rectangle (p, CenterRect, width, height, blur);\n    \n    fragColor = vec4(disk + back + rect, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}