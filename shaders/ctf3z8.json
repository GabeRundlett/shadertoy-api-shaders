{
    "Shader": {
        "info": {
            "date": "1671234980",
            "description": "Multiply 24bit signed integer by float using 12 bits of mantissa into whole part and fract part without loss of precision over the integer argument's range.\nClick left/right to compare one at a time.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctf3z8",
            "likes": 5,
            "name": "24-bit fixed * 12-mantis-bit mul",
            "published": 3,
            "tags": [
                "precision",
                "arithmetic"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "/*\n\n24-bit fixed * 12-mantissa-bit multiply\nhttps://www.shadertoy.com/view/ctf3z8\n\nMultiply 24-bit signed integer by float using 12 bits of mantissa into\nwhole part and fract part without loss of precision over the integer argument's\nrange.\nClick left/right to compare one at a time.\n\nCopyright 2022 Theron Tarigo.  All rights reserved.\nThis file may be used and copied under the terms of the ISC License;\nsee end of file.\n\n*/\n\n// https://www.shadertoy.com/view/ctf3z8\n// requires abs(a) < (1<<24), recognizes only 12 significand bits of b\n// logical operation: returns fract(a*b+x), ret_n=floor(a*b+x)\nfloat frac_mad_i24_m12_f32 (out int ret_n, int a, float b, float x) {\n#ifdef SAFE\n  int _M=~0xFFF;\n  if (a!=(a&0xFFFFFF)) return 0.;\n  b = intBitsToFloat(floatBitsToInt(b)&_M);\n#endif\n  vec2 p = vec2(a&0xFFF,a&~0xFFF)*b,i=floor(p),f=p-i,r=f+f.y+x;\n  ret_n = int(i.x+i.y+(r.y=floor(r.x)));\n  return r.x-r.y;\n}\n\nvoid mainImage (out vec4 O, vec2 f) {\n  vec2 uv = f/iResolution.xy;\n  float yplt=fract(uv.y*2.);\n  int i=int(floor(uv.x*160.))+0x1000000; // index\n  float b=intBitsToFloat(0x3da3d000); // frequency = 7.9986572e-02\n  float x=.2; // phase shift\n  \n  float Af,Bf;\n  int Ai,Bi;\n  \n  // mad f32 result (imprecise)\n  Af=fract(float(i)*b+x);\n  Ai=int(floor(float(i)*b+x));\n  \n  // frac_mad_i24_m12_f32 result\n  Bf=frac_mad_i24_m12_f32(Bi,i,b,x);\n  \n  vec3 col=vec3(0.);\n  if(uv.y>.5){\n    col.r=float(yplt<Af);\n    col.g=float(yplt<Bf);\n  }\n  else{\n    int shift=1341950;\n    int range=20;\n    col.r=float(yplt<float(Ai-shift)/float(range));\n    col.g=float(yplt<float(Bi-shift)/float(range));\n  }\n  if(iMouse.z>0.){\n    float m=iMouse.x/iResolution.x;\n    if(m<.5)col=vec3(col.r);\n    else col=vec3(col.g);\n  }\n  \n  // sRGB output https://www.shadertoy.com/view/sl3cRs\n  {vec3 c=col;O.rgb=min(12.9*c,abs(1.054*pow(c,c-c+.4166)-.095)+.04);}\n}\n\n/*\nCopyright 2022 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}