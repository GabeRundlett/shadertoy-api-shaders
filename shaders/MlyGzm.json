{
    "Shader": {
        "info": {
            "date": "1473855725",
            "description": "rigged, ruffled wing\nmove mouse to animate\nx=rotate, y=bend",
            "flags": 32,
            "hasliked": 0,
            "id": "MlyGzm",
            "likes": 54,
            "name": "ruffled wing",
            "published": 3,
            "tags": [
                "wing",
                "ruffled",
                "rigged"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 1450
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor=texture(iChannel0,uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SegNum 48\n\nfloat motion = 0.;\n\nvec4 multQuat(vec4 a, vec4 b)\n{\n    return vec4(cross(a.xyz,b.xyz) + a.xyz*b.w + b.xyz*a.w, a.w*b.w - dot(a.xyz,b.xyz));\n}\n\nvec4 rotateQuatbyAngle(vec4 quat, vec3 angle)\n{\n    float angleScalar=length(angle);\n    if (angleScalar<0.00001) return quat;\n    return multQuat(quat,vec4(angle*(sin(angleScalar*0.5)/angleScalar),cos(angleScalar*0.5)));\n}\n\nvec3 transformVecByQuat( vec3 v, vec4 q )\n{\n    return v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w*v );\n}\n\n#define PI 3.14159265\n\nvec4 getTexRand(vec2 pix)\n{\n    return texture(iChannel0,pix/iChannelResolution[0].xy)-.5;\n}\n\nfloat getRand(float x)\n{\n\treturn getTexRand(vec2(mod(x,64.),floor(x/64.))).y;\n}\n\nfloat sFade(float xf, float w, float v1, float v2, float x)\n{\n    return mix(v1,v2,clamp((x-xf+w)/2./w,0.,1.));\n}\n\nfloat wingFunc(float x)\n{\n    return sFade(0.4,0.15,-.3,.7,x);\n}\n\nvec3 distArcE(vec2 pos, vec2 p0, vec2 dir, float curve, float len)\n{\n    float r = 1.0/curve;\n    vec2 pc = p0+dir.yx*vec2(1,-1)*r;\n    float ang0=atan(-(p0-pc).y*sign(r),(p0-pc).x);\n    float ang=atan(-(pos-pc).y*sign(r),(pos-pc).x); float ang2=ang; //if(ang<ang0-PI) ang+=PI*2.;\n    float ang1=ang0+len/abs(r);\n    if(ang<.5*(ang0+ang1)-PI) ang+=PI*2.;\n    if(ang>.5*(ang0+ang1)+PI) ang-=PI*2.;\n\tif(ang>ang0 && ang<ang1)\n    \treturn vec3(abs(length(pos-pc)-abs(r)),(length(pos-pc)-abs(r)),(ang-ang0)/(ang1-ang0));\n    vec2 p1 = pc+abs(r)*vec2(cos(ang1),-sin(ang1)*sign(r));\n    float d=100000.;\n    d=min(d,length(pos-p0));\n    d=min(d,length(pos-p1));    \n    return vec3(d,(length(pos-pc)-abs(r)),(ang-ang0)/(ang1-ang0));\n}\n\nvec3 getDistE(vec2 coord)\n{\n    float growFact = clamp(iTime*.1,0.,1.);\n    growFact=1.;\n    vec2 mouse=iMouse.xy/iResolution.xy*2.-1.;\n    //if(iMouse.x==0. && iMouse.y==0.) mouse=0.1*vec2(-.5-sin(3.*iTime),3.*cos(3.*iTime));\n    if(iMouse.x==0. && iMouse.y==0.) mouse=0.02*vec2(-.5-sin(3.*iTime),3.*cos(3.*iTime));\n    if(iFrame<10) mouse=vec2(0);\n    float d=100000.0;\n    vec3 p0=vec3(5,150,0);\n    vec4 q0=vec4(0,0,0,1);\n    vec4 dq0;\n    vec4 dq1;\n    vec3 dp0=vec3(6.*cos(mouse.x),6.*sin(mouse.x),0)*growFact*growFact;\n    vec3 dp1=vec3(1.5*cos(sin(iTime)),1.5*sin(sin(iTime)),0);\n    vec2 wingCoord=vec2(0);\n    float wingSum=0.;\n    vec2 uv=vec2(0);\n    for(int i=0;i<SegNum;i++)\n    {\n        p0+=dp0;\n        float wingArg = float(i)/float(SegNum)*growFact;\n        float wingDiff = .005*(wingFunc(wingArg)-wingFunc(wingArg+.001))/.001;\n        dq0=rotateQuatbyAngle(vec4(0,0,0,1), vec3(0,0,1)\n                              *(.05*wingFunc(wingArg)-wingDiff*(1.3+5.*mouse.y))\n                             );\n        dp0 = transformVecByQuat(dp0,dq0);\n        vec3 p1=p0;\n        float rnd=getRand(float(i)+iTime);\n        vec3 dp1 = (0.2+float(i*i)*.00025+.5*clamp(getRand(float(i+123)),-.2,.5))*transformVecByQuat(dp0,\n                                   rotateQuatbyAngle(vec4(0,0,0,1), \n                                                     vec3(0,0,-70.+float(i)*(.7-.3*mouse.y)-rnd*0.0)/180.*PI));\n        dp1*=growFact;\n\t    dq1=rotateQuatbyAngle(vec4(0,0,0,1), vec3(0,0,-0.02+float(i)*0.0001\n                                                  +.75*sin(1.2*float(i)+3.9)*0.01)\n                                                  +.75*(.04+motion)*sin(iTime*5.+1.2*float(i))*0.01);\n\n        vec3 d2=distArcE(coord,\n                         p1.xy,\n                         normalize(dp1.xy),\n                         -2.*dq1.z/length(dp1.xy)+.005*wingArg*mouse.x,\n                         length(dp1)*float(SegNum));\n\n        vec2 uv2=d2.yz*vec2(.1/float(SegNum),1)+vec2(i,0)/float(SegNum);\n        float rnd2=(texture(iChannel0,uv2*vec2(2.,.04)).x-.5);\n        rnd2=rnd2*.7+.3*(texture(iChannel0,uv2*vec2(2.,.04)*3.).x-.5);\n        rnd2=rnd2*.8+.2*(texture(iChannel0,uv2*vec2(2.,.04)*9.).x-.5);\n\t    d2.x+=20.*rnd2*(.3+2.*uv2.y);\n        if(d2.x<d) { d=d2.x; uv=uv2; }\n    }\n    wingCoord/=wingSum;\n    return vec3(d,uv);\n}\n\nbool isPixel(int x, int y, vec2 fragCoord) { return (int(fragCoord.x)==x && int(fragCoord.y)==y); }\nvec4 getPixel(int x, int y, sampler2D s) { vec2 res=iChannelResolution[1].xy; return texture(s,(vec2(x,y)+vec2(0.5))/res); }\nvec4 getPixel(int x, int y) { return getPixel(x,y,iChannel1); }\n\nvec2 readMousePos()\n{\n    return getPixel(0,0).xy;\n}\n\nvoid writeMousePos(vec2 val, inout vec4 fragColor, in vec2 fragCoord)\n{\n    if(isPixel(0,0,fragCoord)) fragColor.xy=val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 mouse = readMousePos();\n    mouse = mix(mouse,iMouse.xy,.02);\n    motion = clamp(length(mouse-iMouse.xy)/iResolution.y*3.,0.,2.);\n    \n    vec2 pos = fragCoord*300./iResolution.y;\n    fragColor.xyz=vec3(abs(getDistE(pos).x*.05-1.));\n    \n    writeMousePos(mouse,fragColor,fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}