{
    "Shader": {
        "info": {
            "date": "1717704939",
            "description": "Tetrahedral fractal experiments, using Effie's old antialiased raymarching technique",
            "flags": 0,
            "hasliked": 0,
            "id": "XdlfWB",
            "likes": 42,
            "name": "Tetrahedral fractal object",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nimitz",
            "viewed": 355
        },
        "renderpass": [
            {
                "code": "//Tetrahedral fractal object by nimitz 2024 (https://www.shadertoy.com/view/XdlfWB)\n\n#define ITR 200\n#define FAR 27.\n#define time iTime\n\nconst float fov = 1.3;\nfloat dfog = 0.;\nfloat matid = 0.;\n\n#define TYPE 2\n\n#if TYPE == 1\nconst vec3 ofst1 = vec3(2.35,-2.4,0.0);\nconst vec3 ofst2 = vec3(0.2,0.5,.1);\nconst float fixed_radius2 = 13.5;\nconst float min_radius2 = 9.;\nconst float folding_limit = 4.1;\nconst float scale = -3.;\nconst float thresh = 2.9;\n#elif TYPE == 2\nconst vec3 ofst1 = vec3(2.5,-1.5,-0.5);\nconst vec3 ofst2 = vec3(0.,1.,0.);\nconst float fixed_radius2 = 14.;\nconst float min_radius2 = 8.;\nconst float folding_limit = 3.7;\nconst float scale = -2.8;\nconst float thresh = 3.7;\n#else\nconst vec3 ofst1 = vec3(2.3,-2.3,0.);\nconst vec3 ofst2 = vec3(0.2,10.,0.);\nconst float fixed_radius2 = 14.;\nconst float min_radius2 = 10.;\nconst float folding_limit = 4.;\nconst float scale = -2.9;\nconst float thresh = 2.9;\n#endif\n\nvec3 sphere_fold(vec3 p, inout float d) \n{\n    float p2 = dot(p, p);\n    if(p2 < min_radius2) \n    {\n        float t = (fixed_radius2 / min_radius2);\n        p *= t;\n        d *= t;\n    }\n    else if(p2 < fixed_radius2) \n    {\n        float t = (fixed_radius2 / p2);\n        p *= t;\n        d *= t;\n    }\n    return p;\n}\n\nvec3 fold_tet(in vec3 p)\n{\n    const vec3 nc = vec3(-0.5,-0.5,0.7071);\n    p.xy = abs(p.xy);\n   \tfloat t = 2.*dot(p,nc);\n    p -= t*nc;\n    p.xy = abs(p.xy);\n    t = 2.*min(0.,dot(p,nc));\n    p -= t*nc;\n    return p;\n}\n\nmat2 rot(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);} \n\nfloat map(vec3 p) \n{\n    p = fold_tet(p);\n    p += ofst1;\n    vec3 c = p;\n    p += ofst2;\n    float dr = 1.;\n    for(int n = 0; n < 10; ++n) \n    {\n        p = clamp(p, -folding_limit, folding_limit) * 2.0 - p;\n        p = sphere_fold(p, dr);\n        p = scale*p + c;\n        dr = dr * abs(scale) + 1.0;\n    }\n    float dd = length(p)/abs(dr);\n    dd= max(dd, (max(abs(c.x), max(abs(c.y),abs(c.z)))-thresh));\n    return dd;\n}\n\nvec3 normal(const in vec3 p)\n{  \n    vec2 e = vec2(-1., 1.)*0.005;   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + \n\t\t\t\t\t e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );   \n}\n\nfloat getAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp(occ*-2.+1., 0.0, 1.0 );    \n}\n\nfloat shadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<10; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.2, 0.5);\n        if( h<0.0005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nfloat shadow2( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<5; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.2, 1.);\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n//5 taps total, returns both normal and curvature\nvec3 norcurv(in vec3 p, out float curv, out float t0)\n{\n    vec2 e = vec2(-1., 1.)*0.01;\n    t0 = map(p);\n    float t1 = map(p + e.yxx), t2 = map(p + e.xxy);\n    float t3 = map(p + e.xyx), t4 = map(p + e.yyy);\n\t\n    \n    //curv = .25/e.y*(t1 + t2 + t3 + t4 - 4.0*t0);\n    curv = 10./(e.y)*(t1 + t2 + t3 + t4 - 4.0*t0);\n    return normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4);\n}\n\n//Curvature only, 5 taps, with epsilon width as input\nfloat curv(in vec3 p, in float w, in float t0)\n{\n    vec2 e = vec2(-1., 1.)*w;   \n    \n    float t1 = map(p + e.yxx), t2 = map(p + e.xxy);\n    float t3 = map(p + e.xyx), t4 = map(p + e.yyy);\n    \n    return .125/(e.x*e.x)*(t1 + t2 + t3 + t4 - 4.0*t0);\n}\n\nstruct mtl{float rough; vec3 alb; vec3 f0;};\nvec3 lgt = normalize( vec3(-1., 0.2, 0.3) );\n//vec3 lgt = normalize( vec3(-1., 0.2, -0.3) );\nvec3 lcol = vec3(1.,0.87,0.95);\n\nvec3 shade(in vec3 pos, in vec3 rd)\n{\n    float crv2 = 0.;\n    float tb = 0.;\n    vec3 nor = norcurv(pos, crv2, tb);\n\n    //lighting\n    float crv = curv(pos, 0.022, tb)*0.15;\n    vec3 mat = sin(vec3(0.7,0.8,0.9)+crv + 4.5)*0.6+0.4;\n    mat *= mat;\n    //vec3 mat = Colour(pos, rz);\n    float dif = max(dot(nor,lgt),0.);\n    float bac = clamp( dot( nor, -lgt), 0., 1. )*clamp( 1.0-rd.y,0.0,1.0);\n    float fre = pow( clamp(1.+dot(nor,rd), 0., 1.), 2. );\n    float spe = pow(max(dot(reflect(rd,nor),lgt),0.),30.);\n    \n    float shd = shadow2(pos, lgt, 0.1,4.)+0.0001;\n    return (dif*mat*lcol + spe*0.75 + fre*0.1*spe)*shd;\n    \n}\n\n\nvec3 marchAA(in vec3 ro, in vec3 rd, in vec3 bgc, in float px, in mat3 cam)\n{\n\tfloat precis = 0.005;\n    float h=precis*2.0;\n    float d = 0.;\n    float told = 0.;\n    for( int i=0; i<120; i++ )\n    {\n        if( (abs(h)<precis || d>FAR)) break;\n        told = d;\n        d += h;\n\t    float res = map(ro+rd*d);\n        h = res;\n    }\n    \n    d += map(ro+rd*d);\n    d += map(ro+rd*d);\n    \n    vec3 col = bgc;\n    \n\tif ( d < FAR )\n    {   \n        vec3 pos = ro+d*rd;\n        col = shade(pos, rd);\n    }\n    \n    col = mix(col, vec3(0.6), smoothstep(11., FAR, d));\n    return col;\n}\n\nvec3 bgt(in vec3 rd)\n{\n    //Bg color\n    float sun = clamp(dot(lgt,rd),0.0,1.0 );\n\tvec3 hor = mix( vec3(0.2,.1,.3), vec3(1.,.5,0.55), sun );\n    vec3 col = mix( vec3(0.1,0.,.4)*0.2, hor, exp(-(4.0+2.0*(1.-sun))*max(0.0,rd.y)) )*0.5;\n\tcol += vec3(1.0,0.8,1.)*pow(sun,128.0);\n\tcol += 0.2*vec3(1.0,0.3,0.5)*pow(sun,32.0);\n    col += 0.1*vec3(1.0,0.3,0.5)*pow(sun,4.0);\n    return col;\n}\n\nmat3 rot_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rot_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rot_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float px= .5/(iResolution.y*fov);\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = q - 0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy / iResolution.xy-.5;\n    mo = (mo==vec2(-.5))?mo=vec2(0.15,0.05):mo;\n\tmo.x *= iResolution.x/iResolution.y;\n    mo*=4.14;\n\t\n    vec3 ro = vec3(0.,-0.,10.);\n    vec3 rd = normalize(vec3(p,-fov));\n    \n    mat3 cam = rot_x(-mo.y)*rot_y(-mo.x);\n   \tro *= cam;\n\trd *= cam;\n    \n    vec3 bg = bgt(rd);\n    vec3 col = bg;\n    \n    col = marchAA(ro, rd, bg, px, cam);\n    col = clamp(col, 0.,1.);\n    \n\tcol = pow(clamp(col,0.,1.), vec3(0.416667))*1.055 - 0.055; //sRGB\n\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1)*0.8+0.2; //Vign\n    \n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}