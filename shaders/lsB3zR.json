{
    "Shader": {
        "info": {
            "date": "1382567168",
            "description": "Another one of those fractal things.",
            "flags": 65,
            "hasliked": 0,
            "id": "lsB3zR",
            "likes": 43,
            "name": "Fractal Soup",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 2654
        },
        "renderpass": [
            {
                "code": "// Fractal Soup - @P_Malin\n// https://www.shadertoy.com/view/lsB3zR\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// See the golfed version of this shader made for the 2017 shadertoy competition https://www.shadertoy.com/view/MsBBzm\n\nvec2 CircleInversion(vec2 vPos, vec2 vOrigin, float fRadius)\n{\t\n\tvec2 vOP = vPos - vOrigin;\n\treturn vOrigin - vOP * fRadius * fRadius / dot(vOP, vOP);\n}\n\nfloat Parabola( float x, float n )\n{\n\treturn pow( 4.0*x*(1.0-x), n );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vPos = fragCoord.xy / iResolution.xy;\n\n\tvPos = vPos - 0.5;\n\t\n\tvPos.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 vScale = vec2(1.2);\n\tvec2 vOffset = vec2( sin(iTime * 0.123), sin(iTime * 0.0567));\n\t\t\n\tif(iMouse.z > 0.0)\n\t{\n\t\tvOffset = (vec2(iMouse.x, iMouse.y) / iResolution.xy) - 0.5;\n\t}\n\t\n\tfloat l = 0.0;\n\tfloat minl = 10000.0;\n\t\n\tfor(int i=0; i<48; i++)\n\t{\n\t\tvPos.x = abs(vPos.x);\n\t\tvPos = vPos * vScale + vOffset;\t\n\t\t\n\t\tvPos = CircleInversion(vPos, vec2(0.5, 0.5), 1.0);\n\t\t\n\t\tl = length(vPos);\n\t\tminl = min(l, minl);\n\t}\n\t\n\t\n\tfloat t = 4.1 + iTime * 0.025;\n\tvec3 vBaseColour = normalize(vec3(sin(t * 1.890), sin(t * 1.345), sin(t * 1.123)) * 0.5 + 0.5);\n\n\t//vBaseColour = vec3(1.0, 0.15, 0.05);\n\t\n\tfloat fBrightness = 15.0;\n\t\n\tvec3 vColour = vBaseColour * l * l * fBrightness;\n\t\n\tminl = Parabola(minl, 5.0);\t\n\t\n\tvColour *= minl + 0.1;\n\t\n\tvColour = 1.0 - exp(-vColour);\n\tfragColor = vec4(vColour,1.0);\n}\n\nfloat SphereIntersect( vec3 vSphereOrigin, float fSphereRadius, vec3 vRayOrigin, vec3 vRayDir )\n{\n\tvec3 vToOrigin = vSphereOrigin - vRayOrigin;\n\tfloat fProjection = dot(vToOrigin, vRayDir);\n\tvec3 vClosest = vRayOrigin + vRayDir * fProjection;\n\t\n\tvec3 vClosestToOrigin = vClosest - vSphereOrigin;\n\tfloat fClosestDist2 = dot(vClosestToOrigin, vClosestToOrigin);\n\n\tfloat fSphereRadius2 = fSphereRadius * fSphereRadius;\n\t\n\tif(fClosestDist2 < fSphereRadius2)\n\t{\n\t\tfloat fHCL = sqrt(fSphereRadius2 - fClosestDist2);\n\t\n\t\tfloat t = fProjection + fHCL;\n\t\t\n        return t;\n\t}\n    \n    return -1.0;\n}\n\nvoid mainVR( out vec4 vFragColor, in vec2 vFragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n\tfloat fSphereT = SphereIntersect( vec3(0,0,0.0), 4.0, fragRayOri, fragRayDir );\n\tvec3 vHit = fragRayOri + fragRayDir * fSphereT;  \n    \n    vHit *= 0.5;\n    \n    vec2 vUV = vHit.xy * 0.5 + 0.5;\n        \n    //vUV = clamp( vUV, vec2(0), vec2(1));\n    \n    mainImage( vFragColor, vUV * iResolution.xy );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 4685,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/mrgrinderman/the-orb-a-huge-evergrowing-pulsating-brain-that-rules-from-the-centre-of-the-ultraworld"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}