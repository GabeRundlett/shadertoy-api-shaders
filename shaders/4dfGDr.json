{
    "Shader": {
        "info": {
            "date": "1366939629",
            "description": "A distancefield tunnel with a palette stolen from a spectrum analyzer.",
            "flags": 1,
            "hasliked": 0,
            "id": "4dfGDr",
            "likes": 91,
            "name": "Tunnel #1",
            "published": 3,
            "tags": [
                "tunnel",
                "vr"
            ],
            "usePreview": 0,
            "username": "WAHa_06x36",
            "viewed": 4412
        },
        "renderpass": [
            {
                "code": "\nvec3 palette(float i)\n{\n\tif(i<4.0)\n\t{\n\t\tif(i<2.0)\n\t\t{\n\t\t\tif(i<1.0) return vec3(0.0,0.0,0.0);\n\t\t\telse return vec3(1.0,3.0,31.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i<3.0) return vec3(1.0,3.0,53.0);\n\t\t\telse return vec3(28.0,2.0,78.0);\n\t\t}\n\t}\n\telse if(i<8.0)\n\t{\n\t\tif(i<6.0)\n\t\t{\n\t\t\tif(i<5.0) return vec3(80.0,2.0,110.0);\n\t\t\telse return vec3(143.0,3.0,133.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(i<7.0) return vec3(181.0,3.0,103.0);\n\t\t\telse return vec3(229.0,3.0,46.0);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif(i<10.0)\n\t\t{\n\t\t\tif(i<9.0) return vec3(252.0,73.0,31.0);\n\t\t\telse return vec3(253.0,173.0,81.0);\n\t\t}\n\t\telse if(i<12.0)\n\t\t{\n\t\t\tif(i<11.0) return vec3(254.0,244.0,139.0);\n\t\t\telse return vec3(239.0,254.0,203.0);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn vec3(242.0,255.0,236.0);\n\t\t}\n\t}\n}\n\n\nvec4 colour(float c)\n{\n\tc*=12.0;\n\tvec3 col1=palette(c)/256.0;\n\tvec3 col2=palette(c+1.0)/256.0;\n\treturn vec4(mix(col1,col2,c-floor(c)),1.0);\n}\n\nfloat periodic(float x,float period,float dutycycle)\n{\n\tx/=period;\n\tx=abs(x-floor(x)-0.5)-dutycycle*0.5;\n\treturn x*period;\n}\n\nfloat pcount(float x,float period)\n{\n\treturn floor(x/period);\n}\n\nfloat distfunc(vec3 pos)\n{\n\tvec3 gridpos=pos-floor(pos)-0.5;\n\tfloat r=length(pos.xy);\n\tfloat a=atan(pos.y,pos.x);\n\ta+=iTime*0.3*sin(pcount(r,3.0)+1.0)*sin(pcount(pos.z,1.0)*13.73);\n\treturn min(max(max(\n\tperiodic(r,3.0,0.2),\n\tperiodic(pos.z,1.0,0.7+0.3*cos(iTime/3.0))),\n\tperiodic(a*r,3.141592*2.0/6.0*r,0.7+0.3*cos(iTime/3.0))),\n\t0.25);\n\t//return max(length(gridpos)-0.5,\n\t//\t  abs(r-floor(r)-0.5)-0.1);\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 dir)\n{\n\tvec3 ray_dir=-dir;\n\tvec3 ray_pos=pos;\n\n\tfloat a=cos(iTime)*0.0*0.4;\n\tray_dir=ray_dir*mat3(\n\t\tcos(a),0.0,sin(a),\n\t\t0.0,1.0,0.0,\n\t\t-sin(a),0.0,cos(a)\n\t);\n\n\tfloat i=192.0;\n\tfor(int j=0;j<192;j++)\n\t{\n\t\tfloat dist=distfunc(ray_pos);\n\t\tray_pos+=dist*ray_dir;\n\n\t\tif(abs(dist)<0.001) { i=float(j); break; }\n\t}\n\n\tfloat c=i/192.0;\n\tfragColor=colour(c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 coords=(2.0*fragCoord.xy-iResolution.xy)/max(iResolution.x,iResolution.y);\n\n\tvec3 ray_dir=normalize(vec3(coords,1.0+0.0*sqrt(coords.x*coords.x+coords.y*coords.y)));\n\tvec3 ray_pos=vec3(0.0,-1.0,iTime*1.0);\n\n\n    mainVR(fragColor, fragCoord, ray_pos, -ray_dir);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}