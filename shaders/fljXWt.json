{
    "Shader": {
        "info": {
            "date": "1629573141",
            "description": "Retro-y pixelated blur, or rather scatter.\nThe background in Buffer A is taken straight from https://www.shadertoy.com/view/XstXR2",
            "flags": 32,
            "hasliked": 0,
            "id": "fljXWt",
            "likes": 4,
            "name": "Primitive retro blur",
            "published": 3,
            "tags": [
                "blur",
                "pixel",
                "scatter",
                "serenity"
            ],
            "usePreview": 0,
            "username": "frhun",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixCo = ivec2(fragCoord.xy);\n    int s = 8;\n    int a = pixCo.x>>1,\n        b = pixCo.y>>1,\n        c = ((pixCo.x) + (pixCo.y))&3,\n        d = ((a&1) + ((b&1)) )*s;\n    ivec2 offset = ivec2(0);\n    \n    if(c == 1){\n        offset.x = d;\n    }else if(c == 2){\n        offset.y = d;\n    }else{\n        offset.x = d;\n        offset.y = d;\n    }\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(offset), 0).rgb;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.1415926535897932384626433832795\n\nconst float wave_amplitude = 0.076;\nconst float period = 2.*PI;\n\nfloat wave_phase() {\n    return iTime;\n}\n\nfloat square(vec2 st) {\n    vec2 bl = step(vec2(0.), st);       // bottom-left\n    vec2 tr = step(vec2(0.),1.0-st);   // top-right\n    return bl.x * bl.y * tr.x * tr.y;\n}\n\nvec4 frame(vec2 st) {\n    float tushka = square(st*mat2((1./.48), 0., 0., (1./.69)));\n    \n    mat2 sector_mat = mat2(1./.16, 0., 0., 1./.22);\n    float sectors[4];\n    sectors[0] = square(st * sector_mat + (1./.16)*vec2(0.000,-0.280));\n    sectors[1] = square(st * sector_mat + (1./.16)*vec2(0.000,-0.060));\n    sectors[2] = square(st * sector_mat + (1./.16)*vec2(-0.240,-0.280));\n    sectors[3] = square(st * sector_mat + (1./.16)*vec2(-0.240,-0.060));\n    vec3 sector_colors[4];\n    sector_colors[0] = vec3(0.941, 0.439, 0.404) * sectors[0];\n    sector_colors[1] = vec3(0.435, 0.682, 0.843) * sectors[1];\n    sector_colors[2] = vec3(0.659, 0.808, 0.506) * sectors[2];\n    sector_colors[3] = vec3(0.996, 0.859, 0.114) * sectors[3];\n    \n    return vec4(vec3(sector_colors[0] + sector_colors[1] +\n                     sector_colors[2] + sector_colors[3]), tushka);\n}\n\nvec4 trail_piece(vec2 st, vec2 index, float scale) {\n    scale = index.x * 0.082 + 0.452;\n    \n    vec3 color;\n    if (index.y > 0.9 && index.y < 2.1 ) {\n        color = vec3(0.435, 0.682, 0.843);\n        scale *= .8;\n    } else if (index.y > 3.9 && index.y < 5.1) {\n        color = vec3(0.941, 0.439, 0.404);\n        scale *= .8;\n    } else {\n        color = vec3(0., 0., 0.);\n    }\n    \n    float scale1 = 1./scale;\n    float shift = - (1.-scale) / (2. * scale);\n    vec2 st2 = vec2(vec3(st, 1.) * mat3(scale1, 0., shift, 0., scale1, shift, 0., 0., 1.));\n    float mask = square(st2);\n\n    return vec4( color, mask );\n}\n\nvec4 trail(vec2 st) {\n    // actually 1/width, 1/height\n    const float piece_height = 7. / .69;\n    const float piece_width = 6. / .54;\n  \n    // make distance between smaller segments slightly lower\n    st.x = 1.2760 * pow(st.x, 3.0) - 1.4624 * st.x*st.x + 1.4154 * st.x;\n    \n    float x_at_cell = floor(st.x*piece_width)/piece_width;\n    float x_at_cell_center = x_at_cell + 0.016;\n    float incline = cos(0.5*period + wave_phase()) * wave_amplitude;\n    \n    float offset = sin(x_at_cell_center*period + wave_phase())* wave_amplitude + \n        incline*(st.x-x_at_cell)*5.452;\n    \n    float mask = step(offset, st.y) * (1.-step(.69+offset, st.y)) * step(0., st.x);\n    \n    vec2 cell_coord = vec2((st.x - x_at_cell) * piece_width,\n                           fract((st.y-offset) * piece_height));\n    vec2 cell_index = vec2(x_at_cell * piece_width, \n                           floor((st.y-offset) * piece_height));\n    \n    vec4 pieces = trail_piece(cell_coord, cell_index, 0.752);\n    \n    return vec4(vec3(pieces), pieces.a * mask);\n}\n\nvec4 logo(vec2 st) {\n    if (st.x <= .54) {\n        return trail(st);\n    } else {\n        vec2 st2 = st + vec2(0., -sin(st.x*period + wave_phase())*wave_amplitude);\n        return frame(st2 + vec2(-.54, 0));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    st += vec2(.0);\n    st *= 1.472;\n    st += vec2(-0.7,-0.68);\n    float rot = PI*-0.124;\n    st *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n    vec3 color = vec3(1.);\n    \n    vec4 logo_ = logo(st);    \n    fragColor = mix(vec4(0.,.5,.5,1.000), logo_, logo_.a);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}