{
    "Shader": {
        "info": {
            "date": "1526881736",
            "description": "Trying to fold the sphere. Mouse moves the camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "lddBD2",
            "likes": 13,
            "name": "KIFS Sphere",
            "published": 3,
            "tags": [
                "sdf",
                "sphere",
                "ifs",
                "folding",
                "kifs"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "#define EPS       0.002\n#define STEPS      1028\n#define FAR       100.0\n#define PI acos( -1.0 )\n#define FOLDS        30\n#define SPEED      0.05\n\n// Reference https://www.shadertoy.com/view/MtSGRt\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a ) );\n    \n}\n\nfloat sph( vec3 p, float r )\n{\n    \n\treturn length( p ) - r;    \n    \n}\n\nvec2 map( vec3 p )\n{\n\n    vec2 pla = vec2( p.y + 4.0, 0.0 );\n    mat3 rota = mat3( 1.0 );\n    float tim = iTime * SPEED;\n    //p = mod( p, 15.0 ) - 15.0 * 0.5;\n    for( int i = 0; i < FOLDS; ++i )\n    {\n    \n        p = abs( p * rota + vec3(0.1, .0, .0) );\n        p.y -= 0.1;\n        p.x -= 0.03;\n        p.z -=  0.1;\n        p.xy = p.yx;\n        p.xy *= rot( tim );\n        p.zx *= rot( tim );\n        p.yz *= rot( tim );\n        \n    }\n\tvec2 sphe = vec2( sph( p, 0.6 ), 1.0 );\n    if( sphe.x < pla.x ) pla = sphe;\n    return pla;\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          )\n                    );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    d = EPS; float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        \n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n    \n    }\n\n    return t;\n    \n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 tex = texture( iChannel0, reflect( rd, n ) ).rgb;\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 ref = reflect( rd, n );\n    vec3 col = vec3( 0.0 );\n    \n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float rim = pow( 1.0 + dot( n, rd ), 2.0 );\n    \n    col = tex;\n    col += 1.0 * spe;\n    col += 0.5 * rim;\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    vec3 ro = vec3( 0.0 );\n    //if( mou.y == 0.0 ) mou.y = 0.5;\n    if( mou.x == 0.0 ) ro = 6.0 * vec3( sin( iTime * 0.2 ), 0.0, cos( iTime * 0.2 ) );;\n    if( mou.y != 0.0 ) ro = 12.0 * mou.y * vec3( sin( mou.x * 2.0 * PI ), 0.0, cos( -mou.x * 2.0 * PI ) );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shad( ro, rd ) : texture( iChannel0, rd ).rgb;\n    \n    if( map( p ).y == 0.0 )\n\n    rd = normalize( reflect( rd, n ) );\n    ro = p + rd * 0.02;\n\n    if( d < EPS )\n    col = shad( ro, rd );\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}