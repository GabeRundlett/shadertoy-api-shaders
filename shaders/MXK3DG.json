{
    "Shader": {
        "info": {
            "date": "1718186021",
            "description": "cindeshader",
            "flags": 0,
            "hasliked": 0,
            "id": "MXK3DG",
            "likes": 7,
            "name": "spiralus rotation",
            "published": 3,
            "tags": [
                "fractal",
                "rotate",
                "cindeshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "\n#define H(a) (cos(radians(vec3(0, 60, 120))+(a)*6.2832)*.5+.5)  // hue\n\n// fraction grid\nfloat F(float x, float t)\n{\n    float p = 10., // precision\n          a = max(1.-abs(sin(3.1416*round(x)*t))*p, 0.), // denominator\n          b = max(sqrt(abs(x)), 1.),   // darken\n          c = (1.-abs(sin(x*3.1416))); // smooth\n    return a/b*c;\n}\n\n// points: 2d coords, overlap loop, value, size\nfloat P(vec2 u, float l, float t, float r)\n{\n    float i = 0., f = i, c = i;\n    vec2 w = fwidth(u), p;\n    for (; i++<l;)\n    {\n        p.x = round((u.x-i)/l)*l+i; // skip i rows\n        f = mod(trunc(p.x)*t, 1.);  // multiply ints with value\n        p.y = round(u.y-f)+f;       // set as y\n        c = max(c, r/length((u-p)/w));\n    }\n    return clamp(c, 0., 4.) / max(1., abs(u.x));\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float t = 1. + mod(iTime, 600.)/60.,\n          pi2 = 6.2832, i, r;\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*4.,\n         v = (U - R/2.)/R.y*30.,\n         u, g;\n    vec3 c = vec3(0);\n   float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(v.xy) + .01)) * 2.2;\nfloat si = sin(t2);\nfloat co = cos(t2);\nmat2 ma = mat2(co, si, -si, co);\n  v*=-ma;\n    for(i = .1; i <= 1.; i += .1)\n    {\n    v*=ma;\n        u = v*i/i; // scale coords with i\n        r = sqrt(length(u)); // radial\n        u = vec2( r, (r-3.)*u.y - u.x*sin(c.x/3.) ) ; // coord transform\n        g = min( max(fwidth(u), .05) / abs(fract(u+.5)-.5), 2.) / max(abs(u), 1. ); // form grid\n        c += g.x*.1 + g.y*.2; // draw grid\n        c += F(u.x, 1./t+i) * vec3(.0, .6, .1) * .8; // numerator & multiples\n        c += F(u.y,    t+i) * vec3(.0, .4, .9) * .8; // denominator\n        c += P(u.yx, 2.,    t+i, 2.) * .6; // denominator points\n        r = length(u); // redefine\n        c += H(r+i) / max(1., sqrt(r)) * c * i; // color\n        c *= .6;\n    }\n    c -= .5*H(t+.5)*c*i+0.1*cos(iTime);\n    C = vec4(c*.7 + c*c, 1);\n}\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}