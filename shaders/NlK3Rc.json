{
    "Shader": {
        "info": {
            "date": "1652511876",
            "description": "Thought I had published it, but I did not",
            "flags": 0,
            "hasliked": 0,
            "id": "NlK3Rc",
            "likes": 5,
            "name": "ShadowDemoparty2021",
            "published": 3,
            "tags": [
                "zef"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nmat2 r2d(float a) { float c = cos(a); float s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n  float fov = 1.;\n  vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n  vec3 u = normalize(cross(rd, r));\n  return normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n  if (a.x < b.x)\n    return a;\n  return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n  vec3 l = abs(p)-s;\n    l.xz *= r2d(iTime*.1);\n  l+= vec3(.5,0.1,0.);\n    l.xy *= r2d(iTime*.1+sin(p.x));\n  l = abs(l)-.5;\n\n\n  return max(l.x, max(l.y, l.z));\n}\n\nvec3 accCol;\n\nvec2 map(vec3 p)\n{\n  p.xy *= r2d(iTime*.25);\n  p.xz *= r2d(iTime*.25);\n  float acc = 1000.;\n  \n  for (int i = 0; i < 16; ++i)\n  {\n    float fi = float(i)*.25;\n    vec3 pc = p;\n    float r = 5.;\n    pc.x += sin(iTime*.25+fi*3.3)*r;\n    pc.y += cos(iTime*.5+fi*2.)*r;\n    pc.z += abs(sin(iTime*.1+fi*2.));\n    pc.xy *= r2d(iTime+fi);\n    pc.xz *= r2d(iTime*.5+fi*2.);\n    acc = min(acc, _cube(pc, fi+vec3(5.5)*sin(fi+iTime)));\n  }  \n  vec2 main = vec2(_cube(p, vec3(.5)),0.);\n  return _min(main, vec2(acc, 1.));\n}\n\nvec3 getNorm(float d, vec3 p)\n{\n  //return normalize(cross(dFdx(p), dFdy(p)));\n  vec2 e = vec2(0.01,0.);\n  return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n  accCol = vec3(0.);\n  vec3 p = ro;\n  for (int i = 0; i < steps; ++i)\n  {\n    float fi = float(i);\n    vec2 res = map(p);\n    if (res.x < 0.01)\n    {\n        return vec3(res.x, distance(p, ro), res.y);\n    }\n   \n    vec3 rgb = vec3(1.);\n     if (res.y == 1.)\n       rgb = vec3(1.,.5,.25);\n      accCol += rgb*(rd+.5)*vec3(sin(fi)*.5+.5, cos(fi)*.5+.5,.5)*pow(1.-sat(res.x/0.75),2.)*.15;\n     \n    p += rd * res.x;\n  }\n  return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n\n\n  vec3 ro = vec3(sin(iTime*.25),5.*sin(iTime),-15.*cos(iTime));\n  vec3 ta = vec3(0.,0.,0.);\n  vec3 rd = normalize(ta-ro);\n    vec3 col = pow(texture(iChannel0, uv*5.).x, 5.)*vec3(2.)+mix(vec3(.5,.5,.6)*.25, vec3(.95,.56,.34), (1.-sat(abs(uv.y*5.)))*sat(length(uv)));\n  rd = getCam(rd, uv);\n  vec3 res = trace(ro, rd, 32);\n  if (res.y > 0.)\n  {\n      vec3 p = ro + rd * res.y;\n      vec3 n  = getNorm(res.x, p);\n      col = n * .5 + .5;\n    if (res.z == 1.)\n    {\n      col = vec3(.25);\n      col += vec3(.75,0.2,.14)*pow(sat(-dot(rd, n)),5.);\n      if (res.z == 0.)\n        col = vec3(0.);\n    }\n  }\n  col += accCol.zxy;\n  return col;\n}\n\nvec3 rdr2(vec2 uv)\n{\n  vec2 dir = normalize(vec2(1.));\n  float strength = .01;\n  vec3 col = vec3(0.);\n  col.r = rdr(uv+strength*dir).x;\n  col.g = rdr(uv).y;\n  col.b = rdr(uv-strength*dir).z;\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n  /*\n\tfloat f = texture( texFFT, d ).r * 100;\n\tm.x += sin( fGlobalTime ) * 0.1;\n\tm.y += fGlobalTime * 0.25;\n*/\n    vec3 col = vec3(0.);\n    col = rdr2(uv)*.5;\n  \n  float stp = 0.025;\n  uv = floor(uv/stp)*stp;\n  col = mix(rdr(uv), col, 1.-sat(length(uv*2.))*sat(abs(uv.y*3.)));\n  col += (1.-sat(length(uv*2.)))*vec3(.1,.2,.3)*5.*(sat((abs(sin((uv.x+uv.y)*5.+iTime))-.95)*400.));\n\t\tfragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}