{
    "Shader": {
        "info": {
            "date": "1668855771",
            "description": "CC0: F# Windows Terminal Shader\nA shader background for Windows Terminal featuring the F# logo\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DdfXW4",
            "likes": 19,
            "name": "F# Windows Terminal Shader",
            "published": 3,
            "tags": [
                "f",
                "windowsterminal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// CC0: F# Windows Terminal Shader\n//  A shader background for Windows Terminal featuring the F# logo\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hexagon(vec2 p, float r) {\n//  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  const vec3 k = 0.5*vec3(-sqrt(3.0),1.0,sqrt(4.0/3.0));\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n  const vec2 sz       = vec2(1.0, sqrt(3.0));\n  const vec2 hsz      = 0.5*sz;\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;\n  vec2 n = ((p3 - p + hsz)/sz);\n  p = p3;\n\n  n -= vec2(0.5);\n  // Rounding to make hextile 0,0 well behaved\n  return round(n*2.0)*0.5;\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nvec2 pmin(vec2 a, vec2 b, float k) {\n  vec2 h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nvec2 pabs(vec2 a, float k) {\n  return -pmin(-a, a, k);\n}\n\nvec2 dfsharp(vec2 p) {\n  vec2 p0 = p;\n  vec2 p1 = p;\n  vec2 p3 = p;\n  const float sm = 0.03;\n  p0 = pabs(p0, sm);\n  const vec2 n = normalize(vec2(1.0));\n  float d0 = abs(dot(n, p0)-0.38)-0.12;\n  float d1 = abs(p1.x)-0.025;\n  float d2 = dot(n, p0)-0.19;\n  float d3 = -p3.x-0.025;\n  d2 = pmax(d2, -d3, sm);\n  float d = d0;\n\n  d = pmax(d, -d1, sm);\n  d = min(d,  d2);\n  return vec2(d, p.x > 0.0 ? 1.0 : 0.0);\n}\n\nfloat cellf(vec2 p, vec2 n) {\n  const float lw = 0.01;\n  return -hexagon(p.yx, 0.5-lw);\n}\n\nvec2 df(vec2 p, out vec2 hn0, out vec2 hn1) {\n  const float sz = 0.25;\n  p /= sz;\n  vec2 hp0 = p;\n  vec2 hp1 = p+vec2(1.0, sqrt(1.0/3.0));\n\n  hn0 = hextile(hp0);\n  hn1 = hextile(hp1);\n\n  float d0 = cellf(hp0, hn0);\n  float d1 = cellf(hp1, hn1);\n  float d2 = length(hp0);\n\n  float d = d0;\n  d = min(d0, d1);\n\n  return vec2(d, d2)*sz;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const float pa = 20.0;\n  const float pf = 0.0025;\n  const float hoff = 0.0;\n  const vec3 fcol0 = HSV2RGB(vec3(hoff+0.62, 0.95, 1.0));\n  const vec3 fcol1 = HSV2RGB(vec3(hoff+0.62, 0.75, 1.0));\n  const vec3 bcol0 = HSV2RGB(vec3(hoff+0.63, 0.85, 0.5));\n\n  float aa = 2.0/RESOLUTION.y;\n  vec2 hn0;\n  vec2 hn1;\n  vec2 df2 = dfsharp(p);\n  vec2 dfs2 = dfsharp(p-vec2(0.01, -0.01));\n  vec2 pb = p + pa*sin(TIME*pf*vec2(1.0, sqrt(0.5)));\n  vec2 d2 = df(pb, hn0, hn1);\n\n  vec3 col = vec3(0.0);\n\n  float h0 = hash(hn1);\n  float l = mix(0.25, 0.75, h0);\n\n  if (hn0.x <= hn1.x+0.5) {\n    l *= 0.5;\n  }\n\n  if (hn0.y <= hn1.y) {\n    l *= 0.75;\n  }\n  \n  col += l*bcol0;\n  \n  col = mix(col, vec3(0.), smoothstep(aa, -aa, d2.x));\n  col *= mix(0.75, 1.0, smoothstep(0.01, 0.2, d2.y));\n  col = mix(col, col*0.2, smoothstep(aa, -aa, 0.125*dfs2.x));\n  col = mix(col, smoothstep(-1.5, 0.5, p.y)*mix(fcol0, fcol1, df2.y > 0.0 ? 1.0 : 0.0), smoothstep(aa, -aa, df2.x)); \n  col *= 1.25*smoothstep(1.5, 0.25, length(pp));\n//  col *= mix(vec3(0.5), vec3(1.0),smoothstep(-0.9, 0.9, sin(0.25*TAU*p.y/aa+TAU*vec3(0.0, 1., 2.0)/3.0)));\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}