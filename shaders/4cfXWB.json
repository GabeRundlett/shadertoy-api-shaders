{
    "Shader": {
        "info": {
            "date": "1705629409",
            "description": "Added in mouse factor and uv factor to color palette - uv provides illusion of more movement and mouse allows tweeking base hues.\notherwise credit to @wainggan",
            "flags": 0,
            "hasliked": 0,
            "id": "4cfXWB",
            "likes": 10,
            "name": "oily primordial soup",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "// Fork of \"primordial soup\" by wainggan. https://shadertoy.com/view/lfsXzl\n// 2024-01-19 01:54:28\n\n\n#define OCTAVES 6\n\nfloat random(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise(vec2 p) {\n    \n    vec2 s = floor(p);\n    \n    float a = random(s);\n    float b = random(s + vec2(1.0, 0.0));\n    float c = random(s + vec2(0.0, 1.0));\n    float d = random(s + vec2(1.0, 1.0));\n    \n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    \n    float ab = mix(a, b, f.x);\n    float cd = mix(c, d, f.x);\n    \n    float o = mix(ab, cd, f.y);\n    \n    return o;\n    \n}\n\nfloat fractal(vec2 p) {\n\n    float o = 0.0;\n    float strength = 0.5;\n    vec2 position = p;\n    \n    for (int i = 0; i < OCTAVES; i++) {\n        \n        o += noise(position) * strength;\n        position *= 2.0;\n        strength *= 0.5;\n        \n    }\n    \n    // attempt to fix darkness issues\n    o /= 1.0 - 0.5 * pow(0.5, float(OCTAVES - 1));\n    \n    return o;\n    \n}\n\nmat2 rotate(float r) {\n    return mat2(\n        cos(r), -sin(r),\n        sin(r), cos(r)\n    );\n}\n\n// customizable color from @WhiteTophat  in https://www.shadertoy.com/view/dlBczW\nvec4 lerp(vec4 a, vec4 b, float t) {\n    return (a * vec4(t)) + (b * vec4(1.0-t));\n}\nvec4 lerp(vec4 a, vec4 b, vec4 t) {\n    return (a * t) + (b * (vec4(1.0) * t));\n}\n\nvec4 hue2rgb(float hue) {\n    hue = fract(hue); //only use fractional part of hue, making it loop\n    float r = abs(hue * 6.0 - 3.0) - 1.0; //red\n    float g = 2.0 - abs(hue * 6.0 - 2.0); //green\n    float b = 2.0 - abs(hue * 6.0 - 4.0); //blue\n    vec4 rgb = vec4(r,g,b, 1.0); //combine components\n    rgb = clamp(rgb, 0.0, 1.0); //clamp between 0 and 1\n    return rgb;\n}\nvec4 hsv2rgb(vec3 hsv) {\n    vec4 rgb = hue2rgb(hsv.x); //apply hue\n    rgb = lerp(vec4(1.0), rgb, 1.0 - hsv.y); //apply saturation\n    rgb = rgb * hsv.z; //apply value\n    return rgb;\n}\n\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float n = fractal((uv + iTime / 200.0) * 1.0);\n    float r = n * 3.1415 * 2.0;\n    \n    uv += vec2(0.0, 1.0) * rotate(r);\n    \n    float n_0 = fractal((uv + iTime / 100.0) * 8.0);\n    float r_0 = n_0 * 3.1415 * 2.0;\n    \n    float n_1 = fractal((uv + vec2(0.0, 0.1) * rotate(r_0) - iTime / 200.0) * 8.0);\n    float r_1 = n_1 * 3.1415 * 2.0;\n    \n    uv += vec2(0.0, 0.1) * rotate(r_1);\n    \n    float m1 = sin(uv.y * 60.0 + iTime / 1.0) / 2.0 + 0.5;\n    float m2 = sin(uv.y * 5.0 + iTime / 2.0) / 2.0 + 0.5;\n    float m3 = sin(uv.y * 10.0 + iTime / 5.0) / 2.0 + 0.5;\n\n    vec2 mouseUV = iMouse.xy / iResolution.xy;\n\n    vec3 c1 = hsv2rgb(vec3(uv.x+mouseUV.x, 0.9, 1.0)).rgb;\n    vec3 c2 = hsv2rgb(vec3(uv.y+mouseUV.x+mouseUV.y, 0.9, 1.0)).rgb;\n    vec3 c3 = hsv2rgb(vec3(uv.x/uv.y+mouseUV.x-mouseUV.y, 0.9, 1.0)).rgb;\n    \n    vec3 col = vec3(0.0) + (m1 * c1) + (m2 * c2) + (m3 * c3);\n    col /= c1 + c2 + c3;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}