{
    "Shader": {
        "info": {
            "date": "1631189745",
            "description": "Consider every line/if/comment as a potential toggle/radio-button.\n\nTop: Complex Plane, value = eval(R * O.x + I * O.y)\nBottom: Plot, value = eval(R * O.x) - (R + I) * O.y\n\nContours at integers:\n  - Red: Re(value)\n  - Green: Im(value)\n  - Blue: Abs(value)",
            "flags": 16,
            "hasliked": 0,
            "id": "7dVGR1",
            "likes": 7,
            "name": "Contours of Complex Polynomials",
            "published": 3,
            "tags": [
                "complex",
                "polynomial"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "float T_AA = 5.;\nfloat S_AA = 5.;\n\nmat2 S, R0, R1, R2;\nmat2 eval(vec2 O, float iTime)\n{\n    mat2 o = O.x * R + O.y * I;\n    mat2 v = mat2(0);\n    \n    // polynomial\n    v += (o - R0) * (o - R1) * (o - R2);\n    \n    // parts of 1st derivative\n    if (false)\n    {\n        v += (o - R0) * (o - R1);\n        v += (o - R0) * (o - R2);\n        v += (o - R1) * (o - R2);\n    }\n    \n    // parts of 2nd derivative\n    if (false)\n    {\n        v += (o - R0);\n        v += (o - R1);\n        v += (o - R2);\n    }\n\n    // parts of 3rd derivative\n    v *= S;\n\n    // use inverse(...) to turn root into pole\n    //v *= inverse(o - -R0) * inverse(o - -R1) * inverse(o - -R2); // -Rn, so that they are distinct to roots\n    \n    // use transpose(...) to turn a node into an anti-node\n    //v = (o - R1) * transpose(o - -R1);\n\n    // Warp along green contours of Im(v), Re(v) stays not changed, Roots move, Poles stay put\n    //v += R * iTime;\n    //v += R * iTime * -0.1;\n    //if (demo) v += R * tzig(iTime, 2.);\n    //v += R * tzig(iTime, 2.);\n    //v += R * -M.x;\n\n    // Warp along red contours of Re(v), Im(v) stays constant, Roots move, Poles stay put\n    //v += I * iTime;\n    //v += I * iTime * 0.1;\n    //v += I * zig(iTime * .1) * 10.;\n    //v += I * -M.y;\n\n    // warp Im + Re\n    if (demo) v += loop(iTime, 2.);\n\n    // Rotate around blue contours of Abs(v), Roots stay put, Poles stay put\n    // Roots rotate counter-cockwise, Poles rotate clockwise, Anti-Roots rotate clockwise\n    float a = iTime * +0.0 + 0.0;\n    float b = iTime * +0.0 + 0.0;\n    //b += 2. * atan(M.y, M.x);\n    //v += cos(a) * R + sin(a) * I;\n    //v += -2. * R;\n    //v *= cos(-a / 2.) * R + sin(-a / 2.) * I;\n    v *= cos(-b) * R + sin(-b) * I;\n\n    // Note, that the count of points on a blue contour where a red (or green) contour\n    // crosses at right angles (or touches) is equal to \"2 * abs(#roots - #poles)\" that\n    // are enclosed by the blue contour. As a consequence, blue contours have a rotation\n    // speed of \"1 / (#roots - #poles)\".\n    if (false)\n    {\n        float b = iTime * +0.1;\n        mat2 T = cos(-b) * R + sin(-b) * I;\n        //v = T * o;\n        //v = T * o * (o - R1);\n        v = T * inverse(o - R0) * inverse(o - R1) * inverse(o - R2) * o * o;\n        //v = T * inverse(o - R0) * inverse(o - R1) * inverse(o - R2) * o * o * o;\n    }\n\n    return v;\n}\n\nvec4 image(vec2 O, float iTime)\n{\n    float f = 4. / iResolution.y;\n    O = (O - iResolution.xy / 2.) * f;\n    \n    vec2 M = (iMouse.xy - iResolution.xy / 2. + .5) * f;\n    M = mix(M, vec2(1, 0), float(demo));\n    \n    S = R;\n    //R0 = - 0. * R +  0.  * I;\n    R0 = -2. * M.x * R +  0.  * I;\n    //R1 =   0. * R +  0.  * I;\n    R1 =  M.x * R +  M.y * I;\n    //R2 =   0. * R +  0.  * I;\n    //R2 = -M.x * R + -M.y * I;\n    R2 = M.x * R + -M.y * I;\n\n    mat2 v = eval(O, iTime);\n    vec3 c = vec3(Re(v), Im(v), Abs(v));\n    vec3 wc = fwidth(c);\n    vec4 C = vec4(0);\n\n    // Top\n    //C.xy = step(fract(pow(abs(c.xy), vec2(1. / 2.)) + .05), vec2(.1)); // preview stroke, exponent varies slope spacing\n    //C.z = step(fract(pow(c.z, 1. / 2.) * 1. + .05), .1);\n    //C.xyz = .7 - abs(c - round(c)) / fwidth(c); // gleboneloner: anti-aliased 1px stroke, can be used with S_AA = 1\n    C.xyz = step(abs(edge(c)), .25 * wc); // 1px stroke, integer spacing\n    //C.xy += c.xy * .05; // continous\n    //C.xy += .000 + .2 * step(vec2(0), c.xy); // fill Re(v)>0 and Im(v)>0\n    \n    if (c.z < 2.25 * wc.z) C.xyz = vec3(1, 1, 0);\n    \n    // Bottom\n    if (!toggled(key_B))\n    {\n        vec4 CB = C;\n        if (abs(0. - O.y) < .5 * f) CB.xyz = vec3(1.); // Separator\n        if (O.y < 0.)\n        {\n            //if (abs(Re(eval(vec2(O.x, 0), iTime)) * x - O.y) < .5 * f)\n            //if (abs(fract(Re(eval(vec2(O.x, 0), iTime))) * x - O.y) < .5 * f)\n            //if (abs(edge(Re(eval(vec2(O.x, 0), iTime)) - O.y / x)) * x < .5 * f)\n            if (false)\n                C.xyz = vec3(1.);\n            {\n                mat2 v = eval(vec2(O.x, 0), iTime);\n                vec3 c = vec3(Re(v), Im(v), Abs(v)) - O.y;\n                vec3 wc = fwidth(c);\n                CB.xyz = step(abs(edge(c)), .25 * wc);\n                CB.z = 0.;\n            }\n        }\n        C = mix(C, CB, max(float(!demo), smoothstep(0., .5, tzig(iTime, 3.))));\n        //C = CB;\n    }\n    \n    //if (length(O - 1. * vec2(-sin(a), cos(a))) < .1) C.xyz = vec3(1.);\n\n    return C;\n}\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    demo = iMouse.z == 0.;\n    C = vec4(0);\n    for (vec3 d=vec3(.5) ; d.z<T_AA ; ++d.z)\n    for (d.y=.5 ; d.y<S_AA ; ++d.y)\n    for (d.x=.5 ; d.x<S_AA ; ++d.x)\n    {\n        float t = 0.;\n        t = iTime + d.z / T_AA * iTimeDelta;\n        //t = (float(iFrame) + d.z / T_AA) / 60.;\n        //t = iTime + d.z / T_AA / 60.;\n        C += image(d.xy / S_AA - 0.5 + O, t);\n    }\n    C /= S_AA * S_AA * T_AA;\n    //C.xyz *= vec3(.7, .5, 1);\n    C.xyz = pow(C.xyz, vec3(1. / 2.2));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool demo;\n\nmat2 R = mat2(1,  0, 0, 1);\nmat2 I = mat2(0, -1, 1, 0);\n\nfloat Re(mat2 v)\n{\n    return v[0].x;\n}\n\nfloat Im(mat2 v)\n{\n    return v[1].x;\n}\n\nfloat Abs(mat2 v)\n{\n    return length(vec2(Re(v), Im(v)));\n}\n\n#define zig(x) \\\n    (abs(mod((x) + 1., 4.) - 2.) - 1.)\n\n#define tzig(x, t) \\\n    (zig((x) / (t)) * (t))\n\n#define edge(x) \\\n    ((x) - round(x))\n\n#define loop(x, t) \\\n    ( R * clamp(tzig((x)           , 2. * (t)), -(t), (t)) \\\n    + I * clamp(tzig((x) + 2. * (t), 2. * (t)), -(t), (t)) \\\n    )\n\nconst ivec2 key_B = ivec2(0x42, 2);\n\n#define toggled(key) \\\n    (texelFetch(iChannel3, (key), 0).r > .5)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}