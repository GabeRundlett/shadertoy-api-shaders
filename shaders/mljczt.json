{
    "Shader": {
        "info": {
            "date": "1692195814",
            "description": "/",
            "flags": 0,
            "hasliked": 0,
            "id": "mljczt",
            "likes": 1,
            "name": "the radiant gradient",
            "published": 3,
            "tags": [
                "warp"
            ],
            "usePreview": 0,
            "username": "coreythuro",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*sin( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord / exp2(-1.) - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.40; i++) {\n        uv = fract(uv / sin(iTime)) * tan(iTime);\n\n        float d = length(uv) * exp(length(uv0));\n\n        vec3 col = palette(length(uv0) + i/4.4 + iTime/0.4);\n\n        d = sin(d*8. + iTime)/8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n\n    vec2 offsetUV2 = uv0 - vec2(sin(119.), sin(-110.1)); // Adjust the offset amount for the second layer\n    vec3 secondLayerColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.40; i++) {\n        offsetUV2 = fract(uv * cos((iTime))) / sin((-iTime));\n\n        float d = length(offsetUV2) * exp(length(uv0));\n\n        vec3 col = palette(length(uv0) + i/4.4 + iTime/0.4 / 0.2); // Adjust the time offset for the second layer\n\n        d = sin(d*8. + iTime)/8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        secondLayerColor += col * d;\n    }\n\n    vec2 offsetUV3 = uv0 + vec2(110.1, 110.1); // Adjust the offset amount for the third layer\n    vec3 thirdLayerColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.40; i++) {\n        offsetUV3 = fract(offsetUV2 / cos(iTime)) / cos(iTime);\n\n        float d = length(offsetUV3) * exp(length(uv0));\n\n        vec3 col = palette(length(uv0) + i/4.4 / iTime/0.4 + 0.3); // Adjust the time offset for the third layer\n\n        d = sin(d*8. + iTime)/8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        thirdLayerColor += col * d;\n    }\n\n    vec2 offsetUV4 = uv0 + vec2(-110.05, -110.0); // Adjust the offset amount for the fourth layer\n    vec3 fourthLayerColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.40; i++) {\n        offsetUV4 = fract(offsetUV4 / sin(iTime)) * tan(iTime);\n\n        float d = length(offsetUV4) * exp(length(uv0));\n\n        vec3 col = palette(length(uv0) + i*4.4 + iTime*0.4 + 0.4); // Adjust the time offset for the fourth layer\n\n        d = sin(d*8. + iTime)/8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        fourthLayerColor += col * d;\n    }\n\n    // Combine the four layers with appropriate blending\n    vec3 blendedColor = (finalColor + secondLayerColor + thirdLayerColor + fourthLayerColor) / 4.0;\n    fragColor = vec4(blendedColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}