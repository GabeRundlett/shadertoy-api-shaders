{
    "Shader": {
        "info": {
            "date": "1724017684",
            "description": "arms",
            "flags": 0,
            "hasliked": 0,
            "id": "McfBzj",
            "likes": 4,
            "name": "x-arms ",
            "published": 3,
            "tags": [
                "arms"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 133
        },
        "renderpass": [
            {
                "code": "const float n_tau = radians(360.0);\n\nfloat f_n_quadrant(vec2 o) {\n    float n_x_bit = step(0.0, o.x); // 0 if o.x < 0.0, 1 if o.x >= 0.0\n    float n_y_bit = step(0.0, o.y); // 0 if o.y < 0.0, 1 if o.y >= 0.0\n\n    // Combine the bits to form the quadrant number\n    float n_quadrant = (n_x_bit * 2.0) + n_y_bit;\n\n    return n_quadrant;\n}\n\nvec2 f_o_rotd(vec2 o_p, float n_radians) {\n    float n_cos = cos(n_radians);\n    float n_sin = sin(n_radians);\n\n    float n_x = o_p.x * n_cos - o_p.y * n_sin;\n    float n_y = o_p.x * n_sin + o_p.y * n_cos;\n\n    return vec2(n_x, n_y);\n}\n\nfloat f_n(vec2 o_trn_nor_pix, float n_t, float n_its) {\n    float n_sum = 0.0;\n    for(int n_it = 1; n_it <= int(n_its); n_it++) {\n        n_sum += (float(n_it) * 2.0);\n    }\n    vec2 o_trn_nor2 = o_trn_nor_pix * n_sum;\n    float n_it_nor_one = 1.0 / n_its;\n    float n = 1.0;\n    vec2 o = vec2(0.0, 0.0);\n    \n    float n_min = 1.0;\n    for(float n_it_nor = 0.0; n_it_nor < 1.0; n_it_nor += n_it_nor_one) {\n        float n_it_norr = 1.0 - n_it_nor;\n        float n_it = floor(n_it_nor * n_its);\n        float n_itr = n_its - n_it; // iteration reversed\n\n        if(n_it > 0.0) {\n            o.y -= n_itr;\n        }\n        o.x = sin((n_t + n_it_nor) * n_tau) * n_itr * 4.0 * n_it_nor;\n        float nl = length(o_trn_nor2 - o);\n        \n        float n_radius = n_itr;\n        nl = abs(nl - n_radius) / n_radius;\n        nl = smoothstep(0.0, 10.0, nl);\n        float b = 1.0 / n_its * 0.03;\n        nl = -b * (1.0 / (nl + b)) + 1.0; \n        n *= nl;\n        n_min = min(nl, n_min);\n    }\n    return n;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Viewport resolution (in pixels)\n    vec2 o_scl_screen = iResolution.xy;\n\n    // Pixel coordinates (center of pixel, origin at bottom left)\n    vec2 o_trn_nor_pix = (fragCoord - 0.5 * o_scl_screen) / o_scl_screen.y;\n    \n    float n_quadrant_nor = f_n_quadrant(o_trn_nor_pix) / 4.0;\n    \n    o_trn_nor_pix *= 1.2;\n    o_trn_nor_pix = -1.0 * abs(o_trn_nor_pix);\n    o_trn_nor_pix = f_o_rotd(o_trn_nor_pix, n_tau / 8.0);\n\n    float n_t = iTime;\n    \n    vec3 o_col = clamp(vec3(\n        1.0 - f_n(o_trn_nor_pix, (1.0 / 3.0) + n_t, 18.0),\n        1.0 - f_n(o_trn_nor_pix, (2.0 / 3.0) + n_t, 18.0),\n        1.0 - f_n(o_trn_nor_pix, (3.0 / 3.0) + n_t, 18.0)\n    ), vec3(0.0), vec3(1.0));\n    \n    fragColor = vec4(o_col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}