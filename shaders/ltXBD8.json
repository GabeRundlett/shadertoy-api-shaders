{
    "Shader": {
        "info": {
            "date": "1511723239",
            "description": "About a week ago, I saw a video of a demo that looked a bit like this.\nI can't find it anymore...",
            "flags": 64,
            "hasliked": 0,
            "id": "ltXBD8",
            "likes": 10,
            "name": "Lost in the grid",
            "published": 3,
            "tags": [
                "raymarching",
                "monochrome"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 802
        },
        "renderpass": [
            {
                "code": "// Coded by Anton (2017)\n// Inspiered by an unkown demo\n// Tweaked for \"humans are such an easy prey\" by Perturbator\n\n\nfloat rep(inout float p, float r)\n{\n    float hr = r/2.;\n    p += hr;\n    float id = floor(p * r);\n    p = mod(p , r) - hr;\n    return id;\n}\n\n#define PI 3.1415926\n#define TAU (PI * 2.)\n#define HPI (PI / 2.)\n\nmat2 rot(float a)\n{\n    float c = cos(a);float s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat bounce(float p)\n{\n\n    float b = .25;\n    \n    return .5 - cos(p * PI) * .5 + sin(p * PI) * p * b ;\n}\n\nfloat multiplexer(float channel,float nbChannel,float t)\n{\n    float ft = floor(t);\n    float mt = t- ft;\n    mt *= nbChannel;\n    channel = clamp(mt - channel,0.,1.);\n    channel = bounce(channel) ;\n    return ft + channel;\n}\n\n#define time mod( iChannelTime[0],endEnd)\nfloat introDuration = 44.65;\nfloat introKick = 12.;\nfloat endStart = 237.9;\nfloat endEnd = 262.5;\n#define introKickProgression (clamp(time / introKick , 0. ,1.))\n#define introProgression (clamp(max(time - introKick,0.) / (introDuration - introKick),0.,1.))\n\nfloat map(vec3 pos)\n{\n    float nbChannel = 12.;\n    \n    float endProgression = clamp((time - endStart) / (endEnd - endStart),0.,1.);\n    \n    pos.z -= pow(1. - introProgression,2.) * 60.;\n    \n    float ti = max(0.,time - introDuration) ;\n    ti +=  pow(endProgression,2.) * 100.;\n    float bpm = 121.;\n    \n    ti *= (bpm / 60.) * 2.;\n    \n    float ts = ti / nbChannel;\n\n    float dir =  mod(floor(ts),2.) * 2. - 1.;\n    \n    float multiTime = ti / nbChannel;\n    \n    float r1 = multiplexer(2.,nbChannel,multiTime) * PI / 2. * dir;\n    pos.xz *= rot(r1);\n    \n    float r2 = multiplexer(6.,nbChannel,multiTime) * PI / 2. * dir;\n    pos.yz *= rot(r2);\n    \n    float r3 = multiplexer(10.,nbChannel, multiTime) * PI / 2. * dir;\n    pos.xy *= rot(r3);\n    \n    float dec = 4.;\n    pos.xyz += dec / 2.;\n    \n    \n    \n    pos.z += multiplexer(0. ,nbChannel,multiTime) * dec * -dir;\n    pos.x += multiplexer(4. ,nbChannel,multiTime) * dec * -dir;\n    pos.y += multiplexer(8.,nbChannel,multiTime) * dec * -dir;\n    \n    \n    \n    rep(pos.x,dec);\n    rep(pos.y,dec);\n    rep(pos.z,dec);\n    float r =max(max((abs(pos.x)), abs(pos.y)),abs(pos.z));\n    r = texture(iChannel0,vec2(r *.25,.5)).r;\n    \n    r = (exp(r)) * .35 - .25;\n    \n    \n    float grid = min(min(length(pos.xy),length(pos.yz)),length(pos.xz)) - r;\n    \n    return grid;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(.1,0);\n    return normalize(vec3(\n        map(p - e.xyy) - map(p + e.xyy),\n        map(p - e.yxy) - map(p + e.yxy),\n        map(p - e.yyx) - map(p + e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2. * fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.,0.,-0.);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 cp = ro;\n    \n    float id =0.;\n    float STEP = 64.;\n    for(float st = 0.; st < 1.; st += 1./STEP)\n    {\n        float cd =  map(cp);\n        if(cd < .01)\n        {\n            id = 1. - st;\n            break;\n        }\n        cp += rd * cd;\n    }\n \n    vec3 norm = normal(cp);\n \n    float li = clamp(dot(rd,norm),0.,1.);\n    float qt =6.;\n    li = floor(li * qt) / qt;\n    \n    vec4 bg = vec4(.0,0.,0.,0.) ; // back color\n    vec4 lc = vec4(.7,.0,.05,1.); // light color\n    vec4 gc = vec4(.1,.15,.15,1.); // grid color\n    \n    float f = id * introKickProgression;\n \n    vec4 c = mix(gc,lc, pow(li,2.));\n \n    fragColor = mix(bg,c,f) ;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 12657,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/perturbator/perturbator-humans-are-such-easy-prey"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}