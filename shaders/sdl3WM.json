{
    "Shader": {
        "info": {
            "date": "1636898814",
            "description": "Bending camera rays by treating them as particles whose velocity is affected by their pseudo-mass, their normal trajectory in the 3d camera plane. The spheres are the gravity \"nodes\".  Three iterations is enough for the simulation to get smooth results.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdl3WM",
            "likes": 10,
            "name": "Ray Bender",
            "published": 3,
            "tags": [
                "analytic",
                "gravity",
                "raybending"
            ],
            "usePreview": 0,
            "username": "kick",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define ut (iTime * 1.)\n#define n(x) normalize(x)\n#define l(x) length(x)\n#define f(x) fract(x)\n#define v3 vec3(0)\n#define sb 0.5\n#define rv(x) (vec2(cos(x),sin(x)))\n\n#define USE_TEXTURE\n\nfloat t;\nvec2 m, tc1, tc2, tc3;\n\nfloat pD(vec3 ro,vec3 rd,vec4 p) {\n\treturn -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nvec4 pI(vec3 ro,vec3 rd,vec4 p) {\n\tfloat d=pD(ro,rd,p);\n\treturn vec4(ro+rd*d,d);\n}\n\nfloat sD(vec3 ro,vec3 rd,vec4 sph) {\n\tvec3 oc=ro-sph.xyz;\n\tfloat b=dot(oc,rd), c=dot(oc,oc)-sph.w*sph.w, h=b*b-c;\n\tif(h<0.0) return -1.0;\n\treturn -b-sqrt(h);\n}\n\nvec4 sI(vec3 ro,vec3 rd,vec4 sph) {\n\tvec4 i=vec4(-1.);\n\tfloat d=sD(ro,rd,sph);\n\tif(d > 0.) { i.xyz=ro+rd*d; i.w=d; }\n\treturn i;\n}\n\nvec4 pl, pl2, s, s2;\n\nvoid cv(inout vec3 pos,inout vec3 vel) {\n\tvec3 h=s.xyz-pos,h2=s2.xyz-pos;\n\tvel+=n(h)/dot(h,h)+n(h2)/dot(h2,h2); pos+=vel;\n}\n\nvec4 i2p(vec3 ro,inout vec3 v) {\n\tvec3 pos=ro;\n\tcv(pos,v); cv(pos,v); cv(pos,v);\n\tcv(pos,v); cv(pos,v); cv(pos,v);\n\treturn pI(ro,n(v),pl);\n}\n\nvec3 pal(float t) {\n\t// return vec3(1.);\n\tt=(t-ut*0.08);\n\treturn abs(vec3(0.5,0,0.5)+0.5*cos(15.*(1.*t+vec3(0,0.33,0.67))));\n}\n\n// vec3 pal(float t) {\n// \treturn (0.5+0.5*cos(3.*(1.*t+vec3(0,0.33,0.67))));\n// }\n\nfloat tex(vec2 uv) {\n#ifdef USE_TEXTURE\n    return dot(texture(iChannel0,uv*0.25).rgb,vec3(0.333));\n#else    \n\treturn mix(1.-l(f(uv)*2.-1.),0.25,min(l(fwidth(uv)),1.));\n#endif\n}\n\nvec3 pC(vec4 pi, vec4 p) {\n\tvec3 c=vec3(0);\n\tif(pi.w<0.) return c;\n\tc += tex(pi.xy+vec2(t,tc1.y)*vec2(sign(pi.z)));\n\tpi.w=dot(n(vec3(0,0,1)),n(vec3(pi.xy,1)));\n\tc *= pal(f(-pi.w));\n\tfloat sl=1./min(pow(sD(pi.xyz,n(s.xyz-pi.xyz),s),2.),10.);\n\tfloat sl2=1./min(pow(sD(pi.xyz,n(s2.xyz-pi.xyz),s2),2.),10.);\n\tc *= (sl+sl2)*1.;\n\tif(p==pl) c+=pow(dot(n(vec3(pi.xy,1)),pl.xyz),16.);\n\t// c *= pow(pi.w,0.5);\n\treturn pow(c,vec3(0.666));\n}\n\nvoid pR(inout vec2 p,float a) {\n\tp=cos(a)*p+sin(a)*vec2(p.y,-p.x);\n}\n\nvec3 sC(vec4 sp,vec4 si,vec3 ro) {\n\tvec3 sc=v3, c, c2;\n\tvec3 n=n(si.xyz-sp.xyz),ci=n(si.xyz-ro);\n\tvec3 lp=0.-(pl.xyz*pl.w),l=n(lp-si.xyz);\n\tsc += max(0.,dot(l,n)) * 0.5;\n\n\tvec3 r=reflect(ci,n);\n\tvec4 pi=pI(si.xyz,r,pl), pi2=pI(si.xyz,r,pl2);\n\tc = mix(sc,pC(pi,pl),sb);\n\tc2 = mix(sc,pC(pi2,pl2),sb);\n\tfloat md = pi.w;\n\tif( pi2.w > pi.w ) { c = c2; md = pi2.w; }\n\n\tvec4 so=s;\n\tif(sp.x == s.x) so = s2;\n\tsp=so; ro=si.xyz; si=sI(si.xyz,n(r),so);\n\n\tif( si.w > 0. && si.w < md ) {\n\t\tvec3 osc=v3, osc2 = v3;\n\t\tn=n(si.xyz-sp.xyz),ci=n(si.xyz-ro);\n\t\tlp=-(pl.xyz*pl.w),l=n(lp-si.xyz);\n\t\tosc += max(0.,dot(l,n)) * 0.5;\n\t\tr=reflect(ci,n);\n\t\tpi=pI(si.xyz,r,pl),pi2=pI(si.xyz,r,pl2);\n\t\tosc = mix(osc,pC(pi,pl),sb);\n\t\tosc2 = mix(osc,pC(pi2,pl2),sb);\n\t\tif( pi2.w > pi.w ) { osc = osc2; }\n\t\tc = mix(sc,osc,sb);\n\t}\n\treturn c;\n}\n\nvec3 gPC(vec2 uv) {\n\tvec3 ro=vec3(0,7.2,0), rd=n(vec3(uv*2.,-1.0));\n\tvec3 c=v3;\n\tpR(rd.yz,PI*(m.y-0.5));\n\tpR(rd.xy,2.*PI*(m.x-0.5));\n\n\tvec4 pi=i2p(ro,rd), pi2=pI(ro,n(rd),pl2);\n\tvec4 sip=sI(ro,n(rd),s2), si=sI(ro,n(rd),s);\n\tfloat md=1e10;\n\tif(sip.w>0. && sip.w<md) {md=sip.w; c=sC(s2,sip,ro);}\n\tif(si.w>0. && si.w<md) {md=si.w; c=sC(s,si,ro);}\n\tif(pi2.w>0. && pi2.w<md) {md=pi2.w; c+=pC(pi2,pl2);}\n\tif(pi.w>0. && pi.w<md) {md=pi.w; c+=pC(pi,pl);}\n\tc *= exp( -0.05*md );\n\n\treturn c;\n}\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  m=iMouse.xy / iResolution.xy * vec2(1,-1);\n  t=ut*0.2;\n  tc1=rv(t*PI*0.5);\n  tc2=rv(t*PI);\n  tc3=rv(ut*PI*0.125);\n  pl=vec4(n(vec3(0, 0, 3)),3.9);\n  pl2=vec4(n(vec3(0,0,-1)),1.9);\n  s=vec4(5.5*tc3.x,5.5*-tc3.y,0.+4.*tc2.x,1.9);\n  s2=vec4(-s.x,-s.y,0.-4.*tc2.x,1.9);\n\n\n  vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n  vec2 q = fragCoord.xy / iResolution.xy;\n  vec3 col = gPC(uv.xy);\n\t//-----------------------------------------------------\n  // postprocess\n  //-----------------------------------------------------\n\n  // gama\n  col = pow( col, vec3(0.44,0.5,0.55) );\n\n  // contrast\n  col = mix( col, smoothstep( 0.0, 1.0, col ), 0.5 );\n\n  // saturate\n  col = mix( col, vec3(dot(col,vec3(0.333))), -0.2 );\n\n  // vigneting\n  col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n\n  // dithering\n  col += (1.0/255.0)*hash3(q.x+13.3214*q.y);\n\n\tfragColor=vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}