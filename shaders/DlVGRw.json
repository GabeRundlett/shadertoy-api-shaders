{
    "Shader": {
        "info": {
            "date": "1683731965",
            "description": "Iterated quadrilateral subdivision, using skew cuts, randomly placed but always subdividing the longer sides.\nMouse changes how centred the cuts are.",
            "flags": 16,
            "hasliked": 0,
            "id": "DlVGRw",
            "likes": 41,
            "name": "Quadrilateral Subdivision",
            "published": 3,
            "tags": [
                "subdivision",
                "quadrilateral"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 441
        },
        "renderpass": [
            {
                "code": "//////////////////////////////////////////////////////////////////\n//\n// Quadrilateral subdivision, mla, 2023\n//\n//////////////////////////////////////////////////////////////////\n\nvec3 getcolor(float h) {\n  if (!key(CHAR_C)) h = pow(h,0.75);\n  if (key(CHAR_H)) h = pow(h,1.75);\n  if (key(CHAR_M)) return vec3(h);\n  if (key(CHAR_X)) return h2rgb(h);\n  vec3 colors[] =\n    vec3[](vec3(0.996078,0.152941,0.0705882),\n           vec3(0.988235,0.376471,0.0392157),\n           vec3(0.984314,0.6,0.00784314),\n           vec3(0.988235,0.8,0.101961),\n           vec3(0.996078,0.996078,0.2),\n           vec3(0.698039,0.843137,0.196078),\n\n           vec3(0.4,0.690196,0.196078),\n           vec3(0.203922,0.486275,0.596078),\n           vec3(0.00784314,0.278431,0.996078),\n           vec3(0.266667,0.141176,0.839216),\n           vec3(0.52549,0.00392157,0.686275),\n           vec3(0.760784,0.0784314,0.376471));\n  vec3 c = colors[int(12.0*h)%12];\n  c = pow(c,vec3(2.2));\n  return c;\n}\n\nfloat uint2float(uint n) {\n  // Visually, both ways give the same results, AFAICT.\n  //return float(n)/exp2(32.0); // The lazy way.\n  float x = uintBitsToFloat((n >> 9) | 0x3f800000u);\n  return x - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float lwidth = 0.0015;\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  float px = fwidth(p.x);\n  vec3 col = vec3(0.25);\n  float border = 0.03;\n  float w = iResolution.x/iResolution.y-border;\n  float h = 1.0-border;\n  vec2 a = vec2(-w,h), b = vec2(w,h), c = vec2(-w,-h), d = vec2(w,-h);\n  if (abs(p.x) <= w && abs(p.y) <= h) {\n    uint h = 0x12345678u;\n    int N = 10;\n    for (int i = 0; i < N; i++) {\n      float r0 = uint2float(h);\n      float r1 = uint2float(xorshift(h));\n      vec2 k = vec2(0.2);\n      if (iMouse.x > 0.0) k = 0.5*iMouse.xy/iResolution.xy;\n      r0 = 0.5+k.x*sin(0.1*iTime+2.0*PI*r0);\n      r1 = 0.5+k.y*sin(0.0618*iTime+2.0*PI*r1);\n      // a -- b\n      // |    |\n      // c -- d\n      if (distance(a,b)+distance(c,d) > distance(a,c)+distance(b,d)) {\n        vec2 e = r0*a+(1.0-r0)*b;\n        vec2 f = r1*c+(1.0-r1)*d;\n        if (linedist(p,e,f) > 0.0) { a = e; c = f; }\n        else { b = e; d = f; h ^= 1u; }\n      } else {\n        vec2 e = r0*a+(1.0-r0)*c;\n        vec2 f = r1*b+(1.0-r1)*d;\n        if (linedist(p,e,f) < 0.0) { a = e; b = f; }\n        else { c = e; d = f; h ^= 1u; }\n      }\n      h = ihash(h);\n    }\n    col = getcolor(uint2float(h));\n  }\n  col *= smoothstep(0.0,1.4*px,quaddist(p,a,b,c,d)-lwidth);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.141592654;\nconst float TWOPI = 2.0*PI;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n\nfloat segment0(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  return segment0(p,a,b);\n  return min(segment0(p,a,b),segment0(p,-a,-b));\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nfloat rand(int n) {\n  uint h = ihash(uint(n));\n  return float(h)/exp2(32.0);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  // x²(3-2x) = 3x²-2x³, f'(x) = 6x-6x² = 6x(1-x)\n  // f'(x) = 1-x², f = 0.5*(3.0*x-x³)\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\nfloat quaddist(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {\n  return min(min(segment(p,a,b),segment(p,c,d)),\n             min(segment(p,a,c),segment(p,b,d)));\n}\n\nfloat linedist(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  b = vec2(-b.y,b.x);\n  return dot(p,b);\n}\n\nuint xorshift(uint value) {\n  //return ihash(value);\n  // Xorshift*32\n  // By George Marsaglia: http://www.jstatsoft.org/v08/i14/paper\n  value ^= value << 13;\n  value ^= value >> 17;\n  value ^= value << 5;\n  return value;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}