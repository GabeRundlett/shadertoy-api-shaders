{
    "Shader": {
        "info": {
            "date": "1506008177",
            "description": "A standard cubic Truchet pattern, rendered in a simplistic style. Nothing exciting. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4lfcRl",
            "likes": 91,
            "name": "Cubic Truchet Pattern",
            "published": 3,
            "tags": [
                "raymarching",
                "truchet",
                "polar",
                "cubic",
                "tile"
            ],
            "usePreview": 0,
            "username": "Shane",
            "viewed": 6204
        },
        "renderpass": [
            {
                "code": "/*\n\n\tCubic Truchet Pattern\n\t---------------------\n\n\tI have a more elaborate 3D Truchet related example to post, but wanted to put up a \n\tsimpler version first. There are a few cubic Truchet examples on here, including one\n\tof my own, so I'm not bringing anything particularly new to the table. :)\n\n\tI like 3D cubic Truchet patterns, because they're geometrically interesting, and are\n\treasonably easy to produce. A standard 3D Truchet tile consists of three toroids \n\tcentered on three edges of a cube, positioned to enter and exit six cube faces... Look \n\tone up on the internet, and that diatribe should make more sense. :) The idea is to \n\tinterconnect the tiles in a 3D grid - by randomly rotating each around one of the axes - \n\tto produce an interesting spaghetti looking pattern.\n\n\tConstructing the individual tiles is as simple as breaking space into a cubic grid then\n\tpositioning three torii in each cell. If you can position, rotate and render a torus,\n\tthen it should be rudimentary.\n\n\tDetailed scenes look cool, but sometimes it can be difficult to separate the main point \n\tof the code from the details themselves. The Truchet code requires but a few lines. \n\tAdding a few decorations complicates things slightly, and trying to do it in a more \n\tefficient way can confuse things even further. I've tried my best to mitigate this.\n    However, you'll see some esoteric object ID code scattered throughout the example, which\n\tconsists of last minute logic that I put together to get the job done... You can safely \n\tignore it. :)\n\t\n\tI code most things on a fast computer these days, which doesn't exactly help when it\n\tcomes to optimization. As a rough guage, I'll try to get it running as smoothly as\n\tpossible in fullscreen. This one seems to run OK in fullscreen, but it could do with\n\ta few extra tweaks. Aesthetically speaking, I had the 800 by 450 canvas in mind.\n\n\tI'm not really sure what kind of look I was going for, but I wanted something simple\n\tand clean looking that clearly showed the Truchet pattern. The lighting is very basic,\n\tbut reasonably effective.\n\n\tAnyway, I'll put up my more interesting example next... provided I don't get \n\tsidetracked. :)\n\n\n\tOther cubic Truchet examples:\n\n\t// The first cubic Truchet example I saw on here. Really cool, and shiny. :)\n\tTruchet Tentacles - WAHa_06x36\n\thttps://www.shadertoy.com/view/ldfGWn\n\n\t// Dr2's interpretation.\n\tTruchet Flythrough 2 - Dr2\n\thttps://www.shadertoy.com/view/4dsBWf\n\n\t// Another one I did a while back. Less detailed, so probably easier to understand.\n\tTwisted Tubes - Shane\n\thttps://www.shadertoy.com/view/lsc3DH\n\n*/\n\n// Maximum ray distance.\n#define FAR 80.\n\n// Scene object ID: Main tube, colored inner tube or colored band.\nfloat objID; // Global ID to keep a copy of the above from pass to pass.\n\n// Storage vectors to help determine the above and produce the blinking light effect. They're\n// used inside the distance function. I'm not fond of using globals inside distance field\n// functions, but felt it was necessary in this case.\nvec3 vObjID;\nfloat gID; \n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n// Tube: Cylindrical tube, square tube, etc. In this case, it's a squarish tube with some\n// beveled sides.\nfloat tube(vec2 p){\n    \n    // Normally needed, but in this example \"p\" is passed to the function in its absoluted form.\n    //p = abs(p); \n\n    return max(max(p.x, p.y), (p.x + p.y)*.5773); // .7071 for an octagon, etc.\n    //return max(p.x, p.y); // Square tube, etc.\n}\n\n\n\n// The toroidal tube objects. Each consist of a white squarish outer tube, a similar colored \n// inner one (only visible through the holes) and some colored bands.\nvec4 torTube(vec3 p){\n\n\n    // Tube width.\n    const float rad2 = .065;\n    \n    \n    // Main tube. If it were not for the additional tube decorations, the following \n    // would be all that'd be required.\n    //\n    // Note that we're converting one of the coordinates to its circular form. That way, \n    // we're rendering a circular tube, instead of a straight one. It's an oversimplification, \n    // but that's basically all a torus is. By the way, it doesn't have to be circular, \n    // converting \"p.xy\" to an octagonal form, etc, would work also.\n    float tb = tube(abs(vec2(length(p.xy) - .5, p.z))) - rad2;\n    \n\n    \n    // Adding some details to the tube. \n    //\n    \n    // Inner tube for colored lights.\n    float innerTb = tb + .015; \n    \n    \n    // Tube segments - for the bands and holes.\n    //\n    // Number of tube segments. Breaking a circle into 8 lots of 3. Other combinations can\n    // work though.\n    const float aNum = 24.; \n    \n    // To place things evenly around the tube, you need to obtain the angle subtended to the center,\n    // partition it into the required number of cells (aNum), then obtain the angle at the center.\n    float a = atan(p.y, p.x);    \n    float ia = floor(a/6.283*aNum) + .5; // .5 to move to the cell center.\n\n    // Converting to polar coordinates - In effect: Radial position, \"p.x,\" and angular position, \"p.y.\"\n    p.xy = rot2(ia*6.283/aNum)*p.xy;\n    // The radial coordinate effective starts off at the center, so to spread the objects out, you have\n    // to advance them  along the radial coordinate in the radial direction. In this case, we want the \n    // objects to have the same radius as the torus we're attaching them to, which is \".5.\"\n    p.x -= .5;\n\n    // Drawing the objects within each of the partitioned cells. In this case, we're rendering some \n    // colored sleeves (or bands), and boring out some holes.\n    \n    p = abs(p);\n    \n    float band = 1e5;\n    \n    // Group the 24 cell partitions into groups of 3 - in order to cover every third cell with the \n    // colored band and bore some holes out in the others... I figured it'd break up the monotony. :)\n    // On a side note, I try to avoid \"if\" statements inside distance functions when I can, but I \n    // figured this would be the best way for readability. Although, I might rework it later.\n    if(mod(ia + 1., 3.)>2.){\n \n        band = max(tube(p.xz) - rad2 - .01, p.y - .04);\n    \tband = max(band, min(band + .005, -p.y + .015));\n    }\n    else {\n        \n        // Cute trick to break the cell into four - in order to bore out four holes in each cell.\n        // Comment it out to produce just one hole.\n        p = abs(p - .02);\n        \n        // Cut out two cross sections from the main tube.\n        tb = max(tb, -min(tube(p.xy) - rad2 + .055, tube(p.yz) - rad2 + .055)); \n        \n    }\n \n    \n    // Return the tube, bands, and inner tube objects.\n    return vec4(tb, band, innerTb, ia);\n}\n\n\n/*\n\n\tThe Truchet pattern:\n\n\tA standard 3D Truchet tile consists of three toroids centered on three edges of a cube, \n    positioned to enter and exit six cube faces... Look one up on the internet, and that \n\tdiatribe will make more sense. :) The idea is to connect the tiles in a 3D grid, then \n\trandomly rotate each around one of the axes to produce an interesting spaghetti looking \n\tpattern.\n\n\tConstructing the individual tiles is as simple as breaking space into a cubic grid then\n\tpositioning three torii in each cell. If you can position, rotate and render a torus,\n\tthen it should be rudimentary.\n\n\tOn a side note, if you're one of those people who have trouble with the torus concept, \n    you're basically rendering a straight tube that has had one of its coordinates warped \n    into a circle first:\n\n\tfloat torus(vec3 p, vec3 center){\n\n\t    // Position the torus.\n        p -= center;\n\t\t// Warp - Comment out below, and you're left with a straight tube.\n    \tvec2 q = vec2(length(p.xy) - .5, p.z); // vec2(length(p.xz) - .5, p.y), etc.\n    \t// Render a circular tube.\n\t\tfloat dist = length(q) - rad;\n\t}\n\n*/\n\n\n// I can thank Mattz for reminding me of this. You don't need to call all three decorated tubes,\n// then determine the minimum. You can determine the minimum main tube, then call the function\n// for the tube containing the more elaborate detailing that corresponds to it. And by that I\n// mean return the unique oriented point that corresponds to the nearest tube segment distance.\n//\nvec4 torTubeTest(vec3 p){\n    \n    vec2 v = vec2(length(p.xy) - .5, p.z);\n    \n    // Main tube distance squared. Note: If a + c < b + c, then a*a<b*b.\n    // Ie: we don't need to test length(v) - r, just dot(v, v);\n    return vec4(p, dot(v, v));\n}\n\n\nfloat map(vec3 p)\n{\n \n    // Random ID for each grid cube.\n    float rnd = fract(sin(dot(floor(p + vec3(111, 73, 27)), vec3(7.63, 157.31, 113.97)))*43758.5453);\n\n    // Partition space into a grid of unit cubes - centered at the origin and ranging from\n    // vec3(-.5, -.5, -.5) to vec3(-.5, -.5, -.5).\n    p = fract(p) - .5;\n      \n    // Use each cube's random ID to rotate it in such a way that another one of its faces is \n    // facing forward. In case you're not aware, the swizzling below is a cheap trick used to\n    // achieve this. By the way, there may be a faster way to write the conditionals - using \n    // ternary operators, or something to that effect, but I'm leaving it this way for now... \n    // However, if a GPU expert feels that it's unnecessarily slow, then feel free to let me \n    // know, and I'll change it.\n    if(rnd>.833) p = p.xzy;\n    else if(rnd>.666) p = p.yxz;\n    else if(rnd>.5) p = p.yzx;\n    else if(rnd>.333) p = p.zxy;\n    else if(rnd>.166) p = p.zyx;\n        \n    // I can thank Mattz for reminding me of this step. Each Truchet tile contains three decorated\n    // tubes. However, you only need to find the closest tube, \"not\" the closest decorated tube, which\n    // requires a lot more GPU power. Each of these return the closest point and the distance...\n    // Actually, the squared distance, which for comparisson purposes, is the same thing.\n    vec4 tb1 = torTubeTest(vec3(p.xy + .5, p.z));\n    vec4 tb2 = torTubeTest(vec3(p.yz - .5, p.x));\n    vec4 tb3 = torTubeTest(vec3(p.xz - vec2(.5, -.5), p.y));\n     \n    // Sort the distances, then return the closest point.\n    p = tb1.w<tb2.w && tb1.w<tb3.w ? tb1.xyz : tb2.w<tb3.w ? tb2.xyz : tb3.xyz;\n \n    // Render the randomly aligned Truchet block. Ie, the three torii - plus bells and whistles.\n    // Each quarter torus consists of three separate objects: A white tube with some holes in it, \n    // some bracing (the colored sleeve looking things) and a colored inner tube. That's nine\n    // objects returned in all. If it were not for the need to sort objects and attain a segment\n    // identifier (tb.w), only a float would be necessary.\n    vec4 tb = torTube(p);\n        \n\n    /// A unique angular segment identifier - used to produce the blinking lights.\n    gID = tb.w;\n    \n     \n    // Each torus segment contains three individual objects. Here, we're finding the minimum in\n    // each category. We're keeping a global copy here that will be sorted for object identification\n    // outside the raymarching loop. The reason this step is necessary is because the line below\n    // finds the closest object, but doesn't tell us which object that is. That requires sorting,\n    // which is best done outside the loop, for speed reasons.\n    vObjID = tb.xyz;\n    \n    // Finding the minimum of the above to determine the overall minimum object in the scene.\n    return min(min(vObjID.x, vObjID.y), vObjID.z);\n    \n    \n}\n\n\n\n// Recreating part of the distance function to obtain the segment IDs, which in turn is used\n// to create the blink effect.\nfloat lightBlink(vec3 p, float gID){\n    \n    // Unique identifier for the cubic grid cell.\n    float rnd = fract(sin(dot(floor(p + vec3(111, 73, 27)), vec3(7.63, 157.31, 113.97)))*43758.5453);\n \n    // Reusing \"rnd\" to produce a new random number, then using that\n    // random number to create lights that blink at random intervals.\n    rnd = fract(rnd + gID*43758.54571);\n    \n    // Blink at random.\n    return smoothstep(0.33, .66, sin(rnd*6.283 + iTime*3.)*.5 + .5);\n\n    \n}\n\n//float glow;\n// Standard raymarching algorithm.\nfloat trace(vec3 o, vec3 r){\n    \n    //glow = 0.;\n    \n    // Total ray distance travelled, and nearest distance at the current ray position.\n    float t = 0., d;\n    \n    for (int i = 0; i<128; i++) {\n        \n        // Surface distance.\n        d = map(o + r*t);\n        \n        //if(abs(d)<.05) glow += (.05 - abs(d))/(1. + d*d);\n        // If the ray position is within the surface threshold (\"abs\" means either side of the \n        // surface), or if we've traversed beyond the maximum, exit the loop.\n        if(abs(d)<.001*(t*.125 + 1.) || t>FAR) break;\n        \n        \n        // Standard jump.\n        t += d; \n        \n        // Shortening the ray jump right near the camera to alleviated near-camera artifacts.\n        //t += t<.125 ? d*.7 : d; \n    }\n    \n    // Clamp the total distance to \"FAR.\" It can sometimes get rid of far surface artifacts.\n    return min(t, FAR);\n}\n\n// Cheap shadows are the bain of my raymarching existence, since trying to alleviate artifacts is an excercise in\n// futility. In fact, I'd almost say, shadowing - in a setting like this - with limited  iterations is impossible... \n// However, I'd be very grateful if someone could prove me wrong. :)\nfloat shadow(vec3 ro, vec3 lp, float k, float t){\n\n    // More would be nicer. More is always nicer, but not really affordable... Not on my slow test machine, anyway.\n    const int maxIterationsShad = 32; \n    \n    vec3 rd = lp-ro; // Unnormalized direction ray.\n\n    float shade = 1.;\n    float dist = .001*(t*.125 + 1.);  // Coincides with the hit condition in the \"trace\" function.  \n    float end = max(length(rd), 0.0001);\n    //float stepDist = end/float(maxIterationsShad);\n    rd /= end;\n\n    // Max shadow iterations - More iterations make nicer shadows, but slow things down. Obviously, the lowest \n    // number to give a decent shadow is the best one to choose. \n    for (int i=0; i<maxIterationsShad; i++){\n\n        float h = map(ro + rd*dist);\n        //shade = min(shade, k*h/dist);\n        shade = min(shade, smoothstep(0.0, 1.0, k*h/dist)); // Subtle difference. Thanks to IQ for this tidbit.\n        // So many options here, and none are perfect: dist += min(h, .2), dist += clamp(h, .01, stepDist), etc.\n        dist += clamp(h, .01, .2); \n        \n        // Early exits from accumulative distance function calls tend to be a good thing.\n        if (h<0.0 || dist > end) break; \n    }\n\n    // I sometimes add a constant to the final shade value, which lightens the shadow a bit. It's a preference \n    // thing. Really dark shadows look too brutal to me. Sometimes, I'll also add AO, just for kicks. :)\n    return min(max(shade, 0.) + .0, 1.); \n}\n\n// I keep a collection of occlusion routines... OK, that sounded really nerdy. :)\n// Anyway, I like this one. I'm assuming it's based on IQ's original.\nfloat cAO(in vec3 pos, in vec3 nor)\n{\n\tfloat sca = 1., occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.35/4.0;        \n        float dd = map(nor * hr + pos);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n// Normal calculation, with some edging and curvature bundled in.\nvec3 nrm(vec3 p, inout float edge, inout float crv, float t) { \n\t\n    // It's worth looking into using a fixed epsilon versus using an epsilon value that\n    // varies with resolution. Each affects the look in different ways. Here, I'm using\n    // a mixture. I want the lines to be thicker at larger resolutions, but not too thick.\n    // As for accounting for PPI; There's not a lot I can do about that.\n    vec2 e = vec2(1./mix(400., iResolution.y, .5)*(1. + t*.5), 0);\n\n\tfloat d1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\tfloat d3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\tfloat d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\tfloat d = map(p)*2.;\n\n    edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n    //edge = abs(d1 + d2 + d3 + d4 + d5 + d6 - d*3.);\n    edge = smoothstep(0., 1., sqrt(edge/e.x*2.));\n/*    \n    // Wider sample spread for the curvature.\n    e = vec2(12./450., 0);\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx);\n    crv = clamp((d1 + d2 + d3 + d4 + d5 + d6 - d*3.)*32. + .5, 0., 1.);\n*/\n    \n    e = vec2(.002, 0); //iResolution.y - Depending how you want different resolutions to look.\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\t\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Aspect correct screen coordinates.\n\tvec2 uv = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    \n    // Ray origin, or camera - Moving along the Z-axis.\n    vec3 o = vec3(0., 0., iTime); \n    // Light. Situated near the camera whilst moving along with it.\n\tvec3 lp = vec3(-1, 3, -.25) + o;\n    \n    // Unit ray vector.\n    vec3 r = normalize(vec3(uv, 1));\n    // Slight bulbous scene warp.\n    //vec3 r = (vec3(uv, 1.1));\n    //r = normalize(vec3(r.xy, r.z - length(r.xy)*.1));\n\n    \n    \n    // Rotating \"r\" back and forth along various axes for some cheap camera movement. \n    r.xz *= rot2(sin(iTime/2.) * 0.4);\n    r.xy *= rot2(cos(iTime/2.) * 0.2);\n    \n    // Trace out the scene.\n    float t = trace(o, r);\n    \n    // Determining the object ID. Sorting the three different objects outside the loop\n    // is a little less readable, but usually faster. See the distance function.\n    objID = (vObjID.x<vObjID.y && vObjID.x<vObjID.z) ? 0. : (vObjID.y<vObjID.z) ? 1. : 2.;\n\n    // Segment ID: Sorting the segments to determine the unique ID. This ID is fed\n    // into a function to give the blinking light effect.\n    float svGID = gID;\n     \n \n\t// Initiate the scene color to zero.\n    vec3 sc = vec3(0);\n\n    \n    // An object in the scene has been hit, so light it.\n    if(t<FAR){\n        \n        // Hit position.\n        vec3 sp = o + r*t;\n        \n        // Normal, plus edges and curvature. The latter isn't used.\n        float edge = 0., crv = 1.;\n        vec3 sn = nrm(sp, edge, crv, t);\n        \n        // Producing a gradient color based on position. Made up on the spot.\n        vec3 oCol = mix(vec3(1, .1, .3), vec3(1, .5, .1), dot(sin(sp*8. - cos(sp.yzx*4.)), vec3(.166)) + .5);\n        oCol = mix(oCol, oCol.yzx, smoothstep(.3, 1., dot(sin(sp*4. + cos(sp.zxy*4. + iTime)), vec3(.166*.6)) + .3));\n        \n        // Color the individual objects, based on object ID.\n        if(objID<.5)oCol = mix(oCol, vec3(1), .97); // The whitish tube.\n        else if(objID<1.5) oCol = mix(oCol, vec3(1), .05); // The colorful bands.\n        else {\n            \n            oCol = mix(oCol, vec3(1), .05); // Inner tube color. Same as above, but you could change it.\n          \t//oCol = mix(oCol, oCol.zyx, dot(cos(sp*32. + sin(sp.yzx*16.)), vec3(.166)) + .5);\n            \n            // The blinking light effect. In effect, the number varies color intensity is periodically\n            // ramped right up. The individual segment ID is responsible for the randomness.\n            oCol *= lightBlink(sp, svGID)*7.5 + .5;\n        }\n        \n        \n        // Ambient occlusion and shadows.\n        float ao = cAO(sp, sn);\n        float sh = shadow(sp + sn*.002, lp, 16., t); \n        \n\n        // Point light direction vector.\n        vec3 ld = lp - sp;\n        float dist = max(length(ld), 0.001); // Distance.\n        ld /= dist; // Using the distance to nomalize the point light direction vector.\n        \n\n        // Attenuation - based on light to surface distance.\n        float atten = 3.5/(1. + dist*0.05 + dist*dist*0.05);\n        \n        // Diffuse light.\n        float diff = max(dot(ld, sn), 0.);\n        \n       \n        \n        // Combining the above terms to produce the final color.\n    \tsc = oCol*(diff + ao*.35);\n        \n        \n        // Fake caustic lighting... It didn't sit right with the scene, so it didn't make the cut. :)\n        //sc += .02/max(abs(.05 - map(sp*1.5)), .01)*oCol*vec3(1, .7, .5);\n        //sc += oCol*abs(tan(t*1.5 + iTime/2.))*vec3(.1, .2, 1)*.05;\n         \n        // Applying the dark edges, attenuation, shadows and ambient occlusion.\n        sc *= (1. - edge*.7)*atten*(sh + ao*.3)*ao;\n        \n        \n    }\n    \n    \n    // Applying some basic camera distance fog. Not to be confused with the light\n    // to surface attenuation.\n    float fog = 1./(1. + t*.125 + t*t*.05);\n    sc = mix(vec3(0), sc, fog);//\n    //sc = mix(sc, vec3(0), smoothstep(0.0, .2, t/FAR));\n    \n    \n    // Subtle vignette.\n    uv = fragCoord/iResolution.xy;\n    //sc *= pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , .125);\n    // Colored variation.\n    sc = mix(pow(min(vec3(1.5, 1, 1).zyx*sc, 1.), vec3(1, 3, 16).zyx), sc, \n             pow(16.*uv.x*uv.y*(1. - uv.x)*(1. - uv.y) , .125)*.75 + .25);\n    \n    \n\tfragColor = vec4(sqrt(max(sc, 0.)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}