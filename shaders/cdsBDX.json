{
    "Shader": {
        "info": {
            "date": "1689233778",
            "description": "More antiquated flying machines; an alternative to the original (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "cdsBDX",
            "likes": 16,
            "name": "Biplanes in the Badlands 2",
            "published": 3,
            "tags": [
                "landscape",
                "aircraft",
                "flight"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "// \"Biplanes in the Badlands 2\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// The Red Baron's personal flyer (and Snoopy's nemesis)\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrConeDf (vec3 p, vec3 b);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat Ssign (float x);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define PLEN    17\n#define N_FLYER 6\n\nmat3 flyerMat[N_FLYER];\nvec4 cPath[PLEN];\nvec3 flyerPos[N_FLYER], qHit, sunDir;\nvec2 cIdS, cMidS, cIdB, cMidB;\nfloat dstFar, tCur, tEnd[PLEN + 1], hgSizeB, hgSizeS, tLen, cDir, cType, colHt, flSzFac;\nint nFrame, idObj, idObjGrp;\nbool isSh;\nconst int idFus = 1, idPipe = 2, idWngM = 3, idStrut = 4, idWngT = 5, idTail = 6, idLeg = 7,\n   idWhl = 8, idNose = 9, idGun = 10, idPlt = 11, idWal = 12, idGrnd = 13;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\n// When is a biplane not a biplane? (from \"Snoopy and the Red Baron 2\")\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 ws;\n  float d, wr, h, qy;\n  int ig;\n  ig = idObjGrp / 256;\n  dMin /= flSzFac;\n  p /= flSzFac;\n  if (! isSh) d = PrRoundBoxDf (p, vec3 (1.2, 0.5, 1.1), 0.02);\n  if (isSh || d < dMin) {\n    q = p;\n    wr = -0.2 + q.z;\n    d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n       0.11 * (1. - 0.6 * wr * wr), 1.), 0.05);\n    d = max (d, - PrRoundBoxDf (q - vec3 (0., 0.16, 0.), vec3 (0.04, 0.03, 0.07), 0.04));\n    DMINQ (idObjGrp + idFus);\n    q = p;\n    q.yz -= vec2 (0.17, 0.5);\n    d = PrCylDf (q, 0.015, 0.15);\n    DMINQ (idObjGrp + idGun);\n    q = p;\n    q.y -= 0.17;\n    d = PrSphDf (q, 0.04);\n    DMINQ (idObjGrp + idPlt);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, 0.03, 0.8);\n    d = PrCapsDf (q, 0.02, 0.15);\n    DMINQ (idObjGrp + idPipe);\n    q = p;\n    q.yz -= vec2 (0.03, 1.1);\n    d = PrConeDf (q, vec3 (0.8, 0.6, 0.06));\n    DMINQ (idObjGrp + idNose);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.4);\n    qy = q.y;\n    if (ig == 1) q.y += 0.12;\n    h = (ig == 1) ? 0.24 : 0.42;\n    q.y = mod (q.y, h) - 0.5 * h;\n    d = min (1.2 - abs (q.x), abs (PrBox2Df (vec2 (abs (q.x) - 1., q.z + 0.2), vec2 (0.25, 0.05))));\n    wr = 0.47;\n    h = (q.z - 0.1) / wr;\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.25), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.22);\n    d = max (d, abs (qy) - 0.26);\n    q.y = qy;\n    DMINQ (idObjGrp + idWngM);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.42);\n    q.xz = abs (q.xz) - vec2 (0.5, 0.1);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.24 : 0.21));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, ((ig == 1) ? 0.24 : 0.15), 0.42);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.12 : 0.15));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.z -= -0.9;\n    wr = 0.33;\n    h = (q.z - 0.05) / wr;\n    q.x = abs (q.x);\n    d = min (0.42 - q.x, abs (q.z + 0.06));\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.18), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.14);\n    d = max (d, 0.02 - 1.5 * q.x - q.z);\n    DMINQ (idObjGrp + idWngT);\n    q = p;\n    wr = 0.28;\n    q.yz -= vec2 (-0.1, -0.98);\n    h = (q.z - 0.1) / wr;\n    d = min (0.24 - abs (q.y - 0.3), abs (PrBox2Df (vec2 (q.y - 0.35, q.z + 0.02), vec2 (0.16, 0.04))));\n    d = SmoothMax (PrCaps2Df (vec2 (q.x, dot (q.zy, sin (0.1 * pi + vec2 (0.5 * pi, 0.)))),\n       0.03 * (wr - h * h), wr), - d, 0.01);\n    d = max (d, - q.z - 0.04);\n    DMINQ (idObjGrp + idTail);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.135, -0.24, 0.7);\n    q.xy = Rot2D (q.xy, -0.55);\n    q.yz = Rot2D (q.yz, 0.15);\n    d = PrCylDf (q.xzy, 0.012, 0.12);\n    DMINQ (idObjGrp + idLeg);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.22, -0.34, 0.715);\n    d = PrCylDf (q.yzx, 0.01, 0.035);\n    DMINQ (idObjGrp + idLeg);\n    q.x -= 0.01;\n    d = PrCylDf (q.yzx, 0.1, 0.015);\n    DMINQ (idObjGrp + idWhl);\n  } else dMin = min (dMin, d);\n  return flSzFac * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    idObjGrp = ((k < N_FLYER - 1) ? 2 : 1) * 256;\n    dMin = FlyerDf (flyerMat[k] * (p - flyerPos[k]), dMin);\n  }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar / flSzFac;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    idObjGrp = ((k < N_FLYER - 1) ? 2 : 1) * 256;\n    q = flyerMat[k] * (p - flyerPos[k]) / flSzFac - vec3 (0., 0.02, 1.07);\n    d = PrCylDf (q, 0.3, 0.007);\n    DMINQ (0);\n  }\n  return flSzFac * dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > 30.) break;\n  }\n  return 0.7 + 0.3 * sh;\n}\n\nfloat Insig (vec2 p, int ig)\n{\n  float s;\n  if (ig == 2) s = (1. - SmoothBump (0.08, 0.12, 0.005, length (p))) *\n     (1. - SmoothBump (-0.01, 0.03, 0.005, length (p)));\n  else s = 1. - SmoothBump (0.03, 0.06, 0.005, length (abs (p) - 0.07));\n  return s;\n}\n\nvec4 FlyerCol (int ig, int id, vec3 vn)\n{\n  vec4 col4;\n  vec2 w;\n  float s;\n  col4 = (ig == 2) ? vec4 (0.1, 1., 0.1, 0.2) : vec4 (1., 0.1, 0.1, 0.2);\n  if (id == idFus) {\n    if (qHit.z > 1.01) {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.3);\n      if (length (abs (qHit.xy + vec2 (0., 0.05)) * vec2 (0.6, 1.)) < 0.03) col4.rgb *= 1. -\n         0.7 * SmoothBump (0.2, 0.8, 0.05, mod (64. * ((ig == 1) ? qHit.y : qHit.x), 1.));\n    }\n    w = abs (qHit.xz) - vec2 (0.09, 0.12);\n    if (abs (qHit.y - 0.1) < 0.04 && Maxv2 (w) < 0.) col4.rgb = vec3 (0.2, 0.15, 0.05);\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (1.5 * qHit.yz + vec2 (0., 0.4), ig));\n  } else if (id == idWngM) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.14 - 0.07 *\n       abs (sin ((8./1.2) * pi * qHit.x))));\n    s = 1.2 / 8.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, s);\n    if (abs (qHit.y) > 0.1 && qHit.y * vn.y > 0.) {\n      col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (vec2 (abs (qHit.x) - 0.9, qHit.z), ig));\n    }\n  } else if (id == idWngT) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.11 - 0.03 *\n       abs (sin (17. * pi * qHit.x))));\n    s = 1. / 17.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.005, 0.005, 0.001, s);\n  } else if (id == idTail) {\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (2.5 * qHit.yz + vec2 (-0.9, -0.25), ig));\n  } else if (id == idNose) {\n    col4 = (qHit.z > -0.04) ? mix (col4, vec4 (1., 1., 1., 0.5), 0.5) : vec4 (0.1);\n  } else if (id == idPipe) {\n    col4 = vec4 (0.8, 0.8, 0.85, 0.3) * (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05,\n       mod (16. * qHit.z, 1.)));\n  } else if (id == idStrut || id == idLeg) {\n    col4.rgb = 0.6 * col4.rgb + vec3 (0.4);\n  } else if (id == idGun) {\n    col4.rgb = vec3 (0.6, 0.6, 0.7);\n  } else if (id == idPlt) {\n    col4 = vec4 (0.4, 0.2, 0.1, 0.);\n    if (qHit.z > 0.02 && qHit.y < 0.03) col4.rgb = (ig == 2) ? vec3 (0.9) : vec3 (0.6, 0.4, 0.4);\n    if (qHit.z > 0. && length (vec2 (abs (qHit.x) - 0.011, qHit.y - 0.015)) < 0.01)\n       col4 = vec4 (0., 0.2, 0., 0.2);\n    if (qHit.z > 0. && ig == 2 && length (qHit.xy - vec2 (0., -0.02)) < 0.012)\n       col4.rgb = vec3 (0.1);\n  } else if (id == idWhl) {\n    if (length (qHit.yz) > 0.07) col4 = vec4 (0.05);\n  }\n  return col4;\n}\n\n// (from \"Truchet Path Journey\")\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * Ssign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * Ssign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * Ssign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = Ssign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= Ssign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - Ssign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, sin (tt * a + vec2 (0.5 * pi, 0.)))) * hgSizeB;\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nvoid SConf ()\n{\n  vec2 q;\n  float h, hh, s;\n  cMidS = HexToPix (cIdS * hgSizeS);\n  cIdB = PixToHex (cMidS / hgSizeB);\n  BConf ();\n  q = (cMidS - cMidB) / hgSizeB;\n  s = min (hgSizeB * abs (TruchSDist (q).x) - 6., hgSizeB * abs (HexEdgeDist (q)));\n  if (s > 0.) {\n    h = Fbm2 (0.05 * cMidS * vec2 (1., 0.5));\n    hh = h * h;\n    colHt = 1. + (2. * h + 2. * hh + 80. * hh * hh) * smoothstep (0., 4., s);\n    colHt = min (colHt, 40.);\n    if (colHt > 0.1) colHt = 0.5 * (floor (2. * colHt + 0.5) - 0.5);\n  } else colHt = 0.;\n}\n\nfloat SObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p - vec3 (cMidS, colHt).xzy;\n  d = SmoothMax (length (q.xz) - hgSizeS * sqrt3/2. - 0.01, q.y, ((colHt > 0.3) ? 0.3 : 0.001));\n  DMINQ (idWal);\n  q = p;\n  d = q.y - 0.05;\n  DMINQ (idGrnd);\n  return dMin;\n}\n\nfloat SObjRay (vec3 ro, vec3 rd)\n{  // (from \"Hexagonally Discretized Waves\")\n  vec3 vri, vf, hv;\n  vec2 edN[3], pM;\n  float dHit, d, s, eps;\n  bool cNu;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.01;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= Ssign (dot (edN[k], rd.xz));\n  vri = hgSizeS / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSizeS;\n  dHit = 0.;\n  cIdS = PixToHex (ro.xz / hgSizeS);\n  pM = HexToPix (cIdS);\n  cNu = true;\n  for (int j = VAR_ZERO; j < 420; j ++) {\n    if (cNu) {\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n      SConf ();\n      cNu = false;\n    }\n    d = SObjDf (ro + dHit * rd);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      cIdS = PixToHex ((ro.xz + dHit * rd.xz) / hgSizeS);\n      pM += sqrt3 * edN[(s == hv.x) ? 0 : ((s == hv.y) ? 1 : 2)];\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 SObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = SObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, cg4;\n  vec3 col, vn, roo, bgCol;\n  vec2 vf;\n  float dstObj, dstObjS, sh, c;\n  int ig, id;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  dstObjS = SObjRay (ro, rd);\n  bgCol = SkyCol (rd);\n  col = bgCol;\n  if (min (dstObj, dstObjS) < dstFar) {\n    ro += min (dstObj, dstObjS) * rd;\n    if (dstObj < dstObjS) {\n      vn = ObjNf (ro);\n    } else {\n      vn = SObjNf (ro);\n      dstObj = dstObjS;\n    }\n    if (dstObj == dstObjS) {\n      c = Fbm2 (ro.xz);\n      cg4 = vec4 (0.6, 0.4, 0., 0.) * (0.8 + 0.2 * c);\n      if (idObj == idWal) {\n        col4 = vec4 (0.9, 0.5, 0.2, 0.1) * (0.8 + 0.2 * smoothstep (4., 20., ro.y));\n        col4 *= 1. - 0.1 * smoothstep (0.4, 0.47, abs (fract (2. * (ro.y + 0.1) + 0.5) - 0.5));\n        if (vn.y > 0.2) col4 *= (0.8 + 0.2 * c) * (1. - 0.3 * smoothstep (0.2, 0.5, vn.y));\n        col4 = mix (cg4, col4, smoothstep (1., 2., ro.y));\n        col4 = mix (col4, vec4 (1., 1., 1., 0.5), smoothstep (20., 35., ro.y));\n        vf = vec2 (4., 2.);\n      } else if (idObj == idGrnd) {\n        col4 = cg4 * (0.98 + 0.02 * cos (pi * hgSizeB * TruchSDist ((ro.xz - cMidB) /\n           hgSizeB).x));\n        vf = vec2 (1., 1.);\n      }\n      vn = VaryNf (vf.x * ro, vn, vf.y * (1. - smoothstep (0.2, 0.5, dstObj / dstFar)));\n    } else {\n      ig = idObj / 256;\n      id = idObj - 256 * ig;\n      col4 = FlyerCol (ig, id, flyerMat[ig] * vn);\n    }\n    sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n    col = col4.rgb * (0.25 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n       0.75 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    col = mix (col, bgCol, 1. - exp (min (0., 2. - 5. * dstObj / dstFar)));\n  }\n  if (TrObjRay (roo, rd) < min (dstObj, dstFar)) col = mix (col, mix (vec3 (1.), vec3 (0.8),\n     step (0.02, abs (length (qHit.xy) - 0.26))), 0.2);\n  return clamp (col, 0., 1.);\n}\n\nfloat EvalPHt (vec2 p)\n{\n  return 2. + 5. * Fbm2 (0.01 * p);\n}\n\nvoid FlyerPM (float s, float flDir, out vec3 flPos, out mat3 flMat)\n{\n  vec3 p, pf, pb, vel, acc, va, ori, ca, sa;\n  float ds, vm, az, el, rl;\n  ds = 0.3;\n  p.xz = EvalPPos (s);\n  p.y = 0.;\n  flPos = p;\n  flPos.y = EvalPHt (p.xz);\n  pf.xz = EvalPPos (s + ds);\n  pf.y = 0.;\n  pb.xz = EvalPPos (s - ds);\n  pb.y = 0.;\n  vel = (pf - pb) / (2. * ds);\n  acc = (pf + pb - 2. * p) / (ds * ds);\n  vm = length (vel);\n  va = cross (acc, vel) / vm;\n  az = atan (vel.z, vel.x) - 0.5 * pi;\n  el = - sin (vel.y) / vm;\n  rl = 0.03 * sign (flDir) * length (va) * sign (va.y);\n  if (flDir < 0.) az += pi;\n  else rl += 0.06 * sin (0.5 * pi * tCur);\n  ori = vec3 (el, az, rl);\n  ca = cos (ori);\n  sa = sin (ori);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\n#define N_WIN  2\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col, vd, p;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr, t, tGap, trVel, flDir;\n  int vuId, regId;\n  bool sWin;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 1200.) + 10. * floor (dateCur.w / 3600.) + 10.;\n  asp = canvas.x / canvas.y;\n  sWin = true;\n  if (sWin) {\n    mSize = (1./6.) * vec2 (asp, 1.);\n    mMid[0] = (1. - mSize.y) * vec2 (asp, -1.);\n    mMid[1] = (1. - mSize.y) * vec2 (- asp, -1.);\n    for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    if (sWin) {\n      for (int k = 0; k < N_WIN; k ++) {\n        msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n        if (Maxv2 (abs (msw)) < mSize.y) {\n          regId = k + 1;\n          msw /= 2. * mSize.y;\n          break;\n        }\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0.) {\n        uv = (uv - mMid[k]) / mSize.y;\n        vuId = k + 1;\n        break;\n      }\n    }\n    if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  }\n  hgSizeB = 64.;\n  hgSizeS = 1.;\n  SetPath ();\n  flSzFac = 2.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  tGap = 7.;\n  trVel = 0.5;\n  for (int k = 0; k < N_FLYER; k ++) {\n    flDir = (k < N_FLYER - 1) ? -1. : 1.;\n    t = (flDir < 0.) ? tGap * (floor (trVel * tCur / tGap + 0.5) - fract (tCur / tGap) -\n       0.5 * float (N_FLYER - 1)) : trVel * tCur;\n    FlyerPM (t + ((flDir < 0.) ? tGap * float (k + 1) : 0.), flDir, flyerPos[k], flyerMat[k]);\n    if (flDir > 0.) flyerPos[k].y += 6.;\n  }\n  if (vuId <= 1 && length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.01,\n     fract (tCur / 60.))) vuId = 1 - vuId;\n  t = trVel * tCur;\n  if (vuId == 0 || vuId == 1) {\n    ro.xz = EvalPPos (t - 0.8 * ((vuId == 0) ? 1. : -1.));\n    ro.y = EvalPHt (ro.xz) + 10.;\n    p.xz = EvalPPos (t - 0.6 * ((vuId == 0) ? 1. : -1.));\n    p.y = EvalPHt (p.xz) + 8.;\n    p = flyerPos[N_FLYER - 1];\n    p.y -= 4.;\n    vd = normalize (p - ro);\n    az += atan (vd.z, - vd.x) - 0.5 * pi;\n    el += 0.5 * asin (vd.y);\n    el = clamp (el, -0.3 * pi, 0.1 * pi);\n    zmFac = 1.8 * (1. + 2. * SmoothBump (0.25, 0.75, 0.2, fract (0.03 * tCur)));\n    dstFar = 300.;\n  } else if (vuId == 2) {\n    ro = vec3 (0., 80., (2. / tLen) * t * hgSizeB);\n    ro.xz = Rot2D (ro.xz, - pi / 3.);\n    ro.x -= 1.5 * hgSizeB;\n    p = flyerPos[N_FLYER - 1];\n    p.y -= 4.;\n    vd = normalize (p - ro);\n    az = 0.3 * az + atan (vd.z, - vd.x) - 0.5 * pi;\n    el = 0.3 * el + asin (vd.y);\n    el = clamp (el, -0.4 * pi, -0.12 * pi);\n    zmFac = 5.;\n    dstFar = 400.;\n  }\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 2. * pi * sin (0.005 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.4, 0.6, 0.4);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (vec3 (p.xy, sign (p.z) * (max (0., abs (p.z) - h)))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (vec2 (p.x, sign (p.y) * (max (0., abs (p.y) - h)))) - r;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Ssign (float x)\n{\n  return (x != 0.) ? sign (x) : 1.;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}