{
    "Shader": {
        "info": {
            "date": "1652192665",
            "description": "Check Common for settings. \n\nBufferB is for postfx.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "7l2BWh",
            "likes": 3,
            "name": "SUesque Dynamics",
            "published": 3,
            "tags": [
                "field"
            ],
            "usePreview": 0,
            "username": "graygoose",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "#ifndef POSTPROCESS\n#define CHANNEL iChannel0\n#else\n#define CHANNEL iChannel2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = texture(CHANNEL, fragCoord.xy/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Scene\n#define SRC_SIZE .005\n#define SOURCE(p, o, r, col) length(o - p) < r ? col : vec4(0.);\nvoid init_scene(in vec2 uv, inout vec4 col) {\n    col += SOURCE(uv, vec2(.33, .33), SRC_SIZE, vec4(1., 0., 0., 0.));\n    col += SOURCE(uv, vec2(.5, .75), SRC_SIZE,vec4(0., 1., 0., 0.));\n    col += SOURCE(uv, vec2(.66, .33), SRC_SIZE, vec4(0., 0., 1., 0.));\n}\n\n\n\n    //// Field Parameters\n#ifdef MOUSE\n#define MU sin(iMouse.x/iResolution.x)\n#define RHO cos(iMouse.y/iResolution.y)\n#define DECAY .99\n#define S1 vec4(cos(iMouse.x/iResolution.y), sin(iMouse.y/iResolution.y), (iMouse.x-iMouse.y)/max(iResolution.x,iResolution.y), 0.)\n#define S2 vec4(iMouse.x/iResolution.y, iMouse.y/iResolution.y, (iMouse.y-iMouse.x)/max(iResolution.x,iResolution.y), 0.).yzxw\n#define S3 vec4(iMouse.x/iResolution.y, iMouse.y/iResolution.y, (iMouse.y-iMouse.x)/max(iResolution.x,iResolution.y), 0.).yzxw\n#else\n#ifdef SPONTANEOUS\n// Spontaneous used CHG+ACHG and only S1,S2\n#define S1 vec4(.87)\n#define S2 (vec4(1.)-S1)\n#define MU 0.85\n#define RHO 1.1\n#define DECAY 0.9815\n#else\n// S1|2|3=.87|.13|.13 -> {1: MU 0.33 RHO 1.0 DECAY 0.9643, 2: MU 0.33 RHO 1.12, DECAY .9812 }\n#define MU 0.33\n#define RHO 1.12\n#define DECAY 0.9812\n#define S1 vec4(.87, .87, .87, 0.)\n#define S2 vec4(.13, .13, .13, 0.)\n#define S3 vec4(.13, .13, .13, 0.)\n#endif\n#endif\n\n\n\n    //// Field Definition\n#define OP(a, b, c)    ((a * cos(b)) + (a * sin(c)))\n#define OPBAR(a, b, c) ((a * sin(b)) + (a * cos(c)))\n\n#define BR OP(b, r, g)\n#define RG OP(r, g, b)\n#define GB OP(g, b, r)\n#define BRbar OPBAR(r, b, g)\n#define RGbar OPBAR(g, r, b)\n#define GBbar OPBAR(b, g, r)\n\n#define P1 BR - (RG * MU)\n#define P2 RG - (GB * MU)\n#define P3 GB - (BR * MU)\n#define AP1 BRbar + (RGbar * MU)\n#define AP2 RGbar + (GBbar * MU)\n#define AP3 GBbar + (BRbar * MU)\n\n#ifdef SPONTANEOUS\n#define _CHG (vec4( P1,  P2,  P3, 0.).zxyw * S1)\n#define ACHG (vec4(AP1, AP2, AP3, 0.).zxyw * S2)\n#define CHG (_CHG + ACHG)\n#else\n#define PHI 1.0\n#define BRCHG (vec4(P1,  P2,  P3, 0.).zxyw * S1 * PHI)\n#define RGCHG (vec4(P1,  P2,  P3, 0.).xyzw * S2 * PHI)\n#define GBCHG (vec4(P1,  P2,  P3, 0.).yzxw * S3 * PHI)\n#define CHG (BRCHG + RGCHG + GBCHG)\n#endif\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    int cFrame;\n    vec4 col = texelFetch(iChannel0, ivec2(P), 0);\n\n    // Field Pass - Physics\n    vec4 lap = kfilter(P, iChannel0, RES, LAPLACIAN);\n    col += lap * RHO;\n    \n    float r = col.x, g = col.y, b = col.z;\n    col += CHG;\n    \n    \n    // Init (Post field so we don't get visual noise while the mouse is held.) \n    #ifdef DRAW\n    if (sign(iMouse.z) == 1. ) {\n        col += SOURCE(UV, iMouse.xy/iResolution.xy, 0.01, vec4(abs(cos(sin(iTime))), abs(cos(iTime)), abs(sin(iTime)), 0.));\n    }\n    #endif\n    \n    #ifndef MOUSE\n    if (sign(iMouse.z) == 1.) {\n        cFrame = iFrame;\n        #ifndef DRAW\n        col = vec4(0.);\n        #endif\n    } \n    #else\n    if (iFrame == 0) { cFrame = iFrame; }\n    #endif\n    if (iFrame - cFrame < 100) init_scene(UV, col);\n    \n  \n    fragColor = col * DECAY;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define DRAW\n//#define MOUSE\n//#define SPONTANEOUS\n//#define POSTPROCESS\n\n\n\n// Utilities\n    // macros\n#define RES iResolution.xy\n#define P fragCoord.xy\n#define UV (fragCoord.xy/iResolution.xy)\n\n    // math\nfloat c_sum(vec4 v) { return v.x + v.y + v.z + v.w; }\nfloat c_magsqrd(vec2 c) { return c.x * c.x + c.y * c.y; }\n\n    // screen\nvec2 wrap(in vec2 p, vec2 res) {\n    if (p.x > res.x) p.x = mod(p.x, res.x);\n    else if (p.x < 0.) p.x = res.x + p.x;\n    \n    if (p.y > res.y) p.y = mod(p.y, res.y);\n    else if (p.y < 0.) p.y = res.y + p.y;\n    \n    return p;\n}\n    // input\n\n    // drawing\nvec4 draw_point(inout vec4 col, vec2 pos, vec2 pt, float r){\n    return c_magsqrd(pos - pt) < r ? vec4(1) : col;\n}\n\n\n\n// Math\n#define GAUSSIAN vec3(.204, .124, .075)\n#define LAPLACIAN vec3(-1., .2, 0.05)\nvec4 kfilter(in vec2 pos, in sampler2D channel, in vec2 reso, in vec3 kernel) {\n    vec4 sum = vec4(0.);\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            float weight = (i==0 && j==0) ? kernel[0] : (abs(i-j) == 1 ? kernel[1] : kernel[2]);\n            sum += weight * texelFetch(channel, ivec2(wrap(pos + vec2(i, j), reso)), 0);\n        }\n    }\n    \n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    #ifdef POSTPROCESS\n    vec4 col = texelFetch(iChannel0, ivec2(P), 0); // Buffer A\n    vec4 lap = kfilter(P, iChannel0, RES, LAPLACIAN);\n    vec4 avg = (kfilter(P, iChannel0, RES, GAUSSIAN) + kfilter(P, iChannel1, RES, GAUSSIAN))*0.5 ;\n    float n = c_sum(abs(lap));\n    \n    #ifndef SPONTANEOUS\n    col += 0.25*avg+0.5*n;\n    col = (col * .75) + (texelFetch(iChannel1, ivec2(P), 0) * 2.5); // Buffer \n    col *= 0.25;\n    #endif\n    \n    fragColor = col;  \n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef POSTPROCESS\n    vec4 col = texelFetch(iChannel0, ivec2(P), 0);\n    vec4 avg = (kfilter(P, iChannel0, RES, GAUSSIAN) + kfilter(P, iChannel1, RES, GAUSSIAN) + kfilter(P, iChannel2, RES, GAUSSIAN))*0.33 ;\n    vec4 lap = (kfilter(P, iChannel0, RES, LAPLACIAN) + kfilter(P, iChannel1, RES, LAPLACIAN) + kfilter(P, iChannel2, RES, LAPLACIAN))*0.33 ;\n    \n    col *= lap*0.05;\n    col = max(max(avg, col), lap);\n    fragColor += (col+avg)*0.5;\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}