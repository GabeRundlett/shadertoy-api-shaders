{
    "Shader": {
        "info": {
            "date": "1571243959",
            "description": "Cell shades the inputted texture by adding an outline and shading the textures to have contour line colors. Admittedly, this is not the best video for the filter, but it works. At times it almost looks like something out of a video game.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKGWd",
            "likes": 4,
            "name": "Cell Shader Filter",
            "published": 3,
            "tags": [
                "filter",
                "cellshader"
            ],
            "usePreview": 0,
            "username": "Nihilistic_Furry",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "// Line thickness\n#define LINE_THICKNESS 8\n\nfloat bracketiseNumber (float color)\n{\n    if (color < 0.1)\n    \treturn 0.1;\n    else if (color < 0.2)\n        return 0.2;\n    else if (color < 0.3)\n        return 0.3;\n    else if (color < 0.4)\n        return 0.4;\n    else if (color < 0.5)\n        return 0.5;\n    else if (color < 0.6)\n        return 0.6;\n    else if (color < 0.7)\n        return 0.7;\n    else if (color < 0.8)\n        return 0.8;\n    else if (color < 0.9)\n        return 0.9;\n    else\n        return 1.0;\n}\n\nvec4 bracketiseColor (vec4 color)\n{\n    return vec4 (bracketiseNumber (color.r), bracketiseNumber (color.g), bracketiseNumber (color.b), 1.0);\n}\n\nvec4 outline (sampler2D tex, vec2 fragCoord)\n{\n    // Edge detection matrix [0,1,0],[1,-4,1],[0,1,0]\n    // Colors\n    vec4 up = texture (tex, (fragCoord + vec2 (0, LINE_THICKNESS))/iResolution.xy);\n    vec4 left = texture (tex, (fragCoord + vec2 (-LINE_THICKNESS, 0))/iResolution.xy);\n    vec4 center = texture (tex, fragCoord/iResolution.xy);\n    vec4 right = texture (tex, (fragCoord + vec2 (LINE_THICKNESS, 0))/iResolution.xy);\n    vec4 down = texture (tex, (fragCoord + vec2 (0, -LINE_THICKNESS))/iResolution.xy);\n    \n    // Return edge detection\n    vec4 edgeDetection = up + left - 4.0*center + right + down;\n    float edges = max (0.0, edgeDetection.r + edgeDetection.g + edgeDetection.b - 0.25);\n    \n    return vec4 (edges, edges, edges, 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //\n    fragColor = bracketiseColor (texture (iChannel0, uv)) - outline (iChannel0, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}