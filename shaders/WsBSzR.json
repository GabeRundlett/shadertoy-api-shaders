{
    "Shader": {
        "info": {
            "date": "1552608882",
            "description": "Green bar at top is value of Pi.\nYellow bar is approximation of Pi.\nBlue bar at bottom is progress.",
            "flags": 16,
            "hasliked": 0,
            "id": "WsBSzR",
            "likes": 1,
            "name": "Converging on Pi",
            "published": 3,
            "tags": [
                "circle",
                "pi",
                "piday"
            ],
            "usePreview": 0,
            "username": "kubiak",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\nfloat startTime = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if(keyDown(82)) {\n        startTime = iTime;\n    }\n    \n    float time = iTime - startTime;\n    float iterations = 40.0;\n        \n    // Normalized pixel coordinates (from 0 to 1)    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    vec2 ctr = vec2(0.5, 0.5);\n    ctr.x *= iResolution.x / iResolution.y;\n    \n    float r = 0.4;\n    \n    float a = r;        ;\n    float b = r;\n    //b = PI * r / piBroken\n    float range = trunc(mod(time, iterations));\n    float piBroken = 0.0;\n    \n    if(range < 1.0)\n        piBroken = PI;\n    \n    for(float i = 0.0; i < range; i+=1.0) {\n        int iInt = int(i);\n        if(iInt % 2 == 0)\n            piBroken = piBroken + 4.0 / (i*2.+1.0);\n        else\n            piBroken = piBroken - 4.0 / (i*2.+1.0);\n    } \n    \n    b = PI * r / piBroken;\n    \n    float t0 = (uv.x - ctr.x);\n    float t1 = (uv.y - ctr.y);\n    \n    float t0sq = t0*t0;\n    float t1sq = t1*t1;\n    float res = t0sq / (a*a) + t1sq / (b*b);\n    \n    float progressTotal = ctr.x * 2.0;\n    float progress = (range / iterations) * progressTotal;\n    \n        \n    if(res < 1.0) {\n        col = vec3(1.0);\n    }\n    else {\n        \n        float piNorm = ctr.x / PI;\n        float brokenPiNorm = piNorm * piBroken;\n        if(uv.x < ctr.x && uv.y > 0.98) {\n            col = vec3(0.0, 1.0, 0.0);\n        }\n        else if(uv.x < brokenPiNorm && uv.y > 0.96 && uv.y < 0.98) {\n            col = vec3(1.0, 1.0, 0.0);\n        }\n        \n        if(uv.y < 0.02 && uv.x < progress) {\n            col = vec3(0.7, 0.7, 1.0);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}