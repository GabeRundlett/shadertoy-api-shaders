{
    "Shader": {
        "info": {
            "date": "1675568621",
            "description": "Bouncing Balls Test 1",
            "flags": 32,
            "hasliked": 0,
            "id": "sltfz7",
            "likes": 2,
            "name": "Bouncing Balls Test 1",
            "published": 3,
            "tags": [
                "balls",
                "bouncing"
            ],
            "usePreview": 0,
            "username": "NEAR_DREAM_UNITY",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "\n\nvoid  mainImage  (out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.y;\n\n    float v = 0.;\n    for (int ball = 0; ball < TotalBalls; ball++) {\n        vec4 data = BallData(ball);\n        float tocore = 1. - length(uv - data.Position) / BallRadius;\n        if (tocore >= 0.)\n            v = max(v, tocore);\n    }\n    \n    color.rgb = vec3(1. - pow(v, 0.4));\n    color.g = 0.5 + 0.5 * color.g;\n    color.a = 1.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n#define  TotalBalls      (50)\n#define  BallRadius      (0.03)\n#define  TemporalAA      (8)\n#define  Gravity         vec2(0., -0.00006)\n#define  BounceIn        (0.12)\n#define  BounceOut       (0.1)\n\n#define  Tau             (6.283185307179586476925286766559)\n#define  IsDataPoint(P)  ((P).y == 0 && (P).x < TotalBalls)\n#define  Init            (iFrame < 50)\n#define  AspectRatio     (iResolution.x / iResolution.y)\n#define  AspectGap       ((AspectRatio - 1.) / 2.)\n#define  IC0(P)          (texelFetch(iChannel0, (P), 0))\n#define  BallData(B)     IC0(ivec2((B), 0))\n#define  Position        xy\n#define  Velocity        zw\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n\nvoid  mainImage  (out vec4 data, vec2 addr_float) {\n    ivec2 addr = ivec2(addr_float);\n    if (!IsDataPoint(addr))\n        discard;\n\n    data = IC0(addr);\n    if (Init) {\n        float progress = pow(0.2 + 0.7 * float(addr.x) / float(TotalBalls), 1.8);\n        data.Position.x = 0.5 + 0.4 * (1.1 - progress) * -cos(22. * progress) + AspectGap;\n        data.Position.y = 0.5 + 0.4 * (1.1 - progress) * sin(22. * progress);\n        data.Velocity = vec2(0.);\n    }\n    \n    for (int i = 0; i < TemporalAA; i++) {\n    \n        for (int ball2 = 0; ball2 < TotalBalls; ball2++) if (addr.x != ball2) {\n            \n            vec4 data2 = BallData(ball2);\n            \n            vec2 ball_out_n = data.Position - data2.Position;\n            float ball_out_l = length(ball_out_n);\n            ball_out_n /= ball_out_l;\n            ball_out_l = 2. * BallRadius - ball_out_l;\n            \n            if (ball_out_l > 0.)\n                data.Velocity += ball_out_n * ball_out_l * BounceIn;\n        }\n        \n        float floor_inter = BallRadius - data.Position.y;\n        if (floor_inter > 0.)\n            data.Velocity.y += floor_inter * (\n                data.Velocity.y < 0. ? BounceIn : BounceOut\n            );\n        \n        data.Velocity += Gravity;\n    \n        data.Position += data.Velocity;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}