{
    "Shader": {
        "info": {
            "date": "1714528536",
            "description": "¯\\_(ツ)_/¯ ",
            "flags": 0,
            "hasliked": 0,
            "id": "XftXWX",
            "likes": 3,
            "name": "textured voxels",
            "published": 3,
            "tags": [
                "uv",
                "voxel",
                "dda"
            ],
            "usePreview": 0,
            "username": "lolnoob",
            "viewed": 127
        },
        "renderpass": [
            {
                "code": "const int MAX_RAY_STEPS = 64;\n\nfloat sdSphere(vec3 p, float d) { return length(p) - d; } \n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\t\nbool getVoxel(ivec3 c) {\n\tvec3 p = vec3(c);\n\tfloat d = min(max(-sdSphere(p,7.5), sdBox(p, vec3(7.0))), sdBox(p, vec3(1.0)));\n\treturn d < 0.0;\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 rayPos = vec3(0.0, 2.0 * sin(iTime * 2.7), -12.0);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, iTime);\n\trayDir.xz = rotate2d(rayDir.xz, iTime);\n    rayDir = normalize(rayDir);\n\tivec3 mapPos = ivec3(floor(rayPos + 0.));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\tbvec3 mask;\n \n    fragColor.rgb = vec3(0.4, 0.5, 1.0);\n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\n        if (!getVoxel(mapPos)) { continue; }\n        \n        \n        vec3 ps = vec3(mask) * (sideDist - deltaDist);\n        float t = max(ps.x, max(ps.y, ps.z));\n        vec3 P = rayPos + rayDir * t;\n        vec3 uv = P - vec3(mapPos);\n        // probably insanely inefficient lol\n        fragColor.rgb = (rayDir.x > 0.0 ? texture(iChannel0, uv.zy).rgb : 1.0 - texture(iChannel0, uv.zy).rgb ) * float(mask.x); \n        fragColor.rgb += (rayDir.y > 0.0 ? texture(iChannel1, uv.xz).rgb : 1.0 - texture(iChannel1, uv.xz).rgb ) * float(mask.y); \n        fragColor.rgb += (rayDir.z > 0.0 ? texture(iChannel2, uv.xy).rgb : 1.0 - texture(iChannel2, uv.xy).rgb ) * float(mask.z); \n        break;\n\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}