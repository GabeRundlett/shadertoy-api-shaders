{
    "Shader": {
        "info": {
            "date": "1602442067",
            "description": "#2 Monochromatic\nmade during the Ink-MAC-tober 2020",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyyzw",
            "likes": 0,
            "name": "truchetFlipLoop",
            "published": 3,
            "tags": [
                "truchet",
                "loop",
                "imac"
            ],
            "usePreview": 0,
            "username": "Kaeylos",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "// source: https://www.shadertoy.com/view/ttc3zr\nuint murmurHash11(uint src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash11(float src) { return uintBitsToFloat(murmurHash11(floatBitsToUint(src)) & 0x007fffffu | 0x3f800000u) - 1.0; }\n\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash12(vec2 src) { return uintBitsToFloat(murmurHash12(floatBitsToUint(src)) & 0x007fffffu | 0x3f800000u) - 1.0; }\n\n// ----- easingFunct -----//\nfloat quadIn(float t) { return t*t;}\nfloat quadOut(float t) { return -t*(t-2.0);}\nfloat quadInOut(float t) { return t < 0.5 ? 2. * t * t : 1. - (-2. * t + 2.)*(-2. * t + 2.) / 2.;}\n\n#define PI  3.14159265358979323846264338327\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n    uv *= 6. + 1.*(sin(iTime*PI/12.) + 0.5* sin(iTime*PI/6.)); // zoom\n    \n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    vec3 col = vec3(0.);\n    \n    float width = 0.1 + 0.3 * (sin(iTime*PI/3.)+1.)/2.;\n    \n    float n = hash12(id); // noise\n\n    if(n<.5) gv.x *= -1.; // flip\n    \n    float d = abs(gv.x + gv.y);// distance to center\n    d = abs(d-.5); // shift center\n    \n\tvec2 cUv = gv-sign(gv.x+gv.y+0.001)*.5; // curved\n    \n    d = mix(d, length(cUv), quadInOut((sin(iTime*PI/6.)+1.)/2.));\n    \n    float mask = smoothstep(0.01, -0.01, abs(d-.5)-width);\n    \n    col = vec3(mask);\n    \t\n    vec2 lv = fract(uv);\n    // if(lv.x>.98 || lv.y>.98) col = vec3(1., 0., 0.); // grid helper\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}