{
    "Shader": {
        "info": {
            "date": "1609852423",
            "description": "tracemontecarlobufferpoawuejrpoa",
            "flags": 48,
            "hasliked": 0,
            "id": "3ttyRl",
            "likes": 2,
            "name": "Montecarlo path tracer",
            "published": 3,
            "tags": [
                "tracemontecarlobufferpoawuejrpoa"
            ],
            "usePreview": 0,
            "username": "cas",
            "viewed": 483
        },
        "renderpass": [
            {
                "code": "//created by Cas Brugman\n\n//move with arrows(left, right, forward, backward), H+J(up and down) and Q+E(rotate left and right).\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0);\n  \n    if(iFrame > 0)\n    {\n        col = texture(iChannel0, uv).xyz;\n        int changedFrame = int(texelFetch(iChannel1, ivec2(BUFF_CHD, 0), 0).x) - 1;\n        col /= float(iFrame - changedFrame) * float(SAMPLES);\n        col = pow(col, vec3(0.4545));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//created by Cas Brugman\n\nconst float PI = 3.14159;\nconst float MAX_DISTANCE = 100.0;\nconst float COLLISION_DISTANCE = 0.001;\n\nfloat si = 1.0;\nvec2 seed;\n\nfloat rand()\n{\n    return fract(sin(dot(seed.xy * si++, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 rotateY(vec3 vec, float angle)\n{\n    mat3 mat;\n    mat[0] = vec3(cos(angle), 0, sin(angle));\n    mat[1] = vec3(0, 1, 0);\n    mat[2] = vec3(-sin(angle), 0, cos(angle));\n    \n    return vec * mat;\n}\n\n//credit to iq for some sd functions\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdTurningBox(vec3 p, vec3 b)\n{\n    //p = rotateY(p, radians(30.0) * p.y);\n    return sdBox(p,b);\n}\n\nfloat sdSphere(vec3 ro, vec3 pos, float rad)\n{\n    return distance(ro, pos) - rad;\n}\n\nfloat map(vec3 pos)\n{\n    float dist = MAX_DISTANCE;\n    \n    dist = min(dist, sdSphere(pos, vec3(-1.5, 0.5,0), 1.0));\n    dist = min(dist, sdPlane(pos, vec3(0,1,0), 0.5));\n    dist = min(dist, sdTurningBox(pos - vec3(1.5,.5, 0), vec3(1,1,1)));\n    \n    return dist;\n}\n\nvec3 normal(vec3 pos)\n{\n    float epsilon = COLLISION_DISTANCE * 0.1;\n    float dist = map(pos);\n    return normalize(vec3(\n        map(vec3(pos.x + epsilon, pos.y, pos.z)) - dist,\n        map(vec3(pos.x, pos.y + epsilon, pos.z)) - dist,\n        map(vec3(pos.x, pos.y, pos.z + epsilon)) - dist));\n        \n    //return normalize(vec3(\n        //map(vec3(pos.x + epsilon, pos.y, pos.z)) - map(vec3(pos.x - epsilon, pos.y, pos.z)),\n        //map(vec3(pos.x, pos.y + epsilon, pos.z)) - map(vec3(pos.x, pos.y - epsilon, pos.z)),\n        //map(vec3(pos.x, pos.y, pos.z + epsilon)) - map(vec3(pos.x, pos.y, pos.z - epsilon))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(iFrame == 0)\n    {\n        return;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    if (texelFetch(iChannel1, ivec2(BUFF_CHD, 0), 0).y > 0.5)\n    {\n        col = vec3(0);\n    }\n    \n    seed = uv * iTime * 0.01;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 co = texelFetch(iChannel1, ivec2(BUFF_POS, 0), 0).xyz;\n    vec3 angle = texelFetch(iChannel1, ivec2(BUFF_ROT, 0), 0).xyz;\n    vec3 cd = vec3(sin(angle.x), 0, -cos(angle.x));\n    \n    float fov = radians(90.0);\n    \n    vec3 skyLight = 1.5*vec3(0.18, 0.27, 0.8);\n    vec3 sunLight = 50.0*vec3(1.0, 1.0, 0.9);\n    vec3 sunDirection = normalize(vec3(-1.0, 0.3, 0.3));\n    float sunAngle = radians(10.0);\n    float reflectance = 0.6;\n    \n    for(int i = 0; i < SAMPLES; i++)\n    {\n        float weight = 1.0;\n        vec3 light = vec3(0);\n        \n        vec2 r = vec2(rand() * 2.0 - 1.0, rand() * 2.0 - 1.0) / iResolution.xy / 2.0;\n        vec2 suv = (uv + r) * 2.0 - 1.0;\n        vec2 aspectsuv = vec2(suv.x, suv.y / aspect);\n        vec2 offset = aspectsuv * tan(fov / 2.0);\n\n        vec3 front = (cd);\n        vec3 right = normalize(cross(front, vec3(0,1,0)));\n        vec3 up = cross(right, front);\n\n        vec3 rd = normalize(front + right * offset.x + up * offset.y);\n        vec3 ro = co;\n        \n        int maxBounces = 10;\n        for(int bounces = 0; bounces < maxBounces; bounces++)\n        {\n            bool hit = false;\n            vec3 pos = ro;\n            int maxSteps = 1000;\n\n            for(int steps = 0; distance(co, pos) < MAX_DISTANCE && steps < maxSteps;steps++)\n            {\n                float dist = map(pos);\n\n                if(abs(dist) < COLLISION_DISTANCE)\n                {\n                    hit = true;\n                    break;\n                }\n\n                pos += rd * dist;\n            }\n\n            if (hit)\n            {                \n                weight *= reflectance;\n\n                vec3 normal = normal(pos);\n                ro = pos + normal * (COLLISION_DISTANCE * 2.0);\n                \n                bool x = mod(round(pos.x), 2.0) == 0.0;\n                bool z = mod(round(pos.z), 2.0) == 0.0;\n                \n                bool mirror = (x || z) && !(x && z);\n                \n                if(mirror || rand() > .5)\n                {\n                    float theta = (rand() * 2.0 -1.0) * PI / 2.0;\n                    float phi = rand() * PI * 2.0;\n                    vec3 random = vec3(sin(theta)*cos(phi), cos(theta), sin(theta) * sin(phi));\n                \n                    vec3 helper = vec3(0,1,0);\n                    if(abs(normal.y) > 0.9)\n                    {\n                        helper = vec3(-1,0,0);\n                    }\n                \n                    vec3 xaxis = normalize(cross(helper, normal));\n                    vec3 zaxis = normalize(cross(normal, xaxis));\n                    mat3 mat = mat3(xaxis, normal, zaxis);\n               \n                    rd = random * inverse(mat);\n                }\n                else\n                {\n                    rd = reflect(rd, normal);\n                }\n                \n            }\n            else\n            {\n                if(dot(rd, sunDirection) > 1.0 - (1.0 / PI / 2.0) * (sunAngle / 2.0))\n                {\n                    light = sunLight;\n                }\n                else\n                {\n                    light = skyLight;\n                }\n                break;\n            }\n        }\n        \n        col += light * weight;\n        \n    }\n    \n    fragColor.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//created by Cas Brugman\n\nconst int BUFF_POS = 0;\nconst int BUFF_ROT = 1;\nconst int BUFF_CHD = 2;\nconst int BUFF_RES = 3;\n\nconst int SAMPLES = 1;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//created by Cas Brugman\n\nconst float MOVE_SPEED = 0.1;\nconst float ROT_SPEED = 0.05;\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int KEY_Q     = 81;\nconst int KEY_E     = 69;\n\nconst int KEY_H     = 72;\nconst int KEY_J     = 74;\n\nbool isKeyPressed(int key)\n{\n    return texelFetch(iChannel1, ivec2(key,0),0).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (int(fragCoord.y) > 0)\n    {\n        return;\n    }\n    \n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    float changed = 1.0;\n    \n    if(iFrame < 1)\n    {\n        switch(int(fragCoord.x))\n        {\n            case(BUFF_POS):\n                col = vec3(0,.5,6);\n                break;\n\n            case(BUFF_ROT):\n                col = vec3(0,0,0);\n                break;\n            case(BUFF_RES):\n                col = iResolution;\n                break;\n        }\n    }\n    else\n    {\n        switch(int(fragCoord.x))\n        {\n            case(BUFF_POS):\n                vec3 vec = vec3(0);\n                if(isKeyPressed(KEY_LEFT))\n                {\n                    vec.x = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_RIGHT))\n                {\n                    vec.x = -1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_UP))\n                {\n                    vec.z = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_DOWN))\n                {\n                    vec.z = -1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_H))\n                {\n                    vec.y = 1.0;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_J))\n                {\n                    vec.y = -1.0;\n                    changed = 0.0;\n                }\n                \n                vec3 angle = texelFetch(iChannel0, ivec2(BUFF_ROT, 0), 0).xyz;\n                vec3 cd = vec3(sin(angle.x), 0, -cos(angle.x));\n                \n                vec3 helper = vec3(0,1,0);\n                vec3 xaxis = normalize(cross(helper, cd));\n                \n                vec3 movement = vec3(0);\n                \n                movement += cd * vec.z;\n                movement += xaxis * vec.x;\n                movement += helper * vec.y;\n                \n                col += movement * MOVE_SPEED;\n                break;\n                \n            case(BUFF_ROT):\n            \n                if(isKeyPressed(KEY_Q))\n                {\n                    col.x -= ROT_SPEED;\n                    changed = 0.0;\n                }\n                \n                if(isKeyPressed(KEY_E))\n                {\n                    col.x += ROT_SPEED;\n                    changed = 0.0;\n                }\n                break;\n            case(BUFF_RES):\n                if (col.xy != iResolution.xy){\n                    changed = 0.0;\n                    col = iResolution;\n                }\n                break;\n                \n                \n                \n            case(BUFF_CHD):\n                if (texelFetch(iChannel0, ivec2(BUFF_POS, 0), 0).w < 0.5 ||\n                    texelFetch(iChannel0, ivec2(BUFF_ROT, 0), 0).w < 0.5 ||\n                    texelFetch(iChannel0, ivec2(BUFF_RES, 0), 0).w < 0.5)\n                {\n                    col.x = float(iFrame);\n                    col.y = 1.0;\n                }\n                else\n                {\n                    col.y = 0.0;\n                }\n                break;\n        }\n    }\n    \n    fragColor = vec4(col, changed);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}