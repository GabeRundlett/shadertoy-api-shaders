{
    "Shader": {
        "info": {
            "date": "1511625661",
            "description": "Fractal rule is mutated as each 3x3 division is performed.",
            "flags": 32,
            "hasliked": 0,
            "id": "4llBDr",
            "likes": 5,
            "name": "Mutating Sierpinski",
            "published": 3,
            "tags": [
                "fractal",
                "random",
                "generative",
                "genetic"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 655
        },
        "renderpass": [
            {
                "code": "/*\n\nMutating Sierpinski\nCopyright 2017 Theron Tarigo\n\nfractal, random, genetic, generative\n\nFractal rule is mutated as each 3x3 division is performed.\n\n*/\n\n// Passthrough to Buf B\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\nMutating Sierpinski\nCopyright 2017 Theron Tarigo\n\nfractal, random, genetic, generative\n\nFractal rule is mutated as each 3x3 division is performed.\n\n*/\n\nvec4 rand(int i) {\n  if (i>256*256) return vec4(0.);\n  return texelFetch(iChannel0, ivec2(i/256,i%256),0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  fragColor = vec4(0.);\n  fragCoord += rand((int(fragCoord.y*iResolution.x+iResolution.x)+iFrame)%(256*256)).xy;\n  vec2 uv = (fragCoord.xy - iResolution.xy*0.5) / iResolution.x + 0.5;\n  float v = 1.;\n  if (uv.x<0. || uv.x>1. || uv.y<0. || uv.y>1.) return;\n\n  int[9] f = int[9](0,0,0,0,0,0,0,0,0);\n\n  int d = 0;\n  for (int i = 0; i <= 6; i++) {\n    ivec2 u = ivec2(mod(uv*pow(3.,float(i)),1.)*3.);\n    ivec2 ur = ivec2(uv*pow(3.,float(i))*3.);\n    for (int j = 0; j < 9; j++) {\n      vec4 r = rand(j+9*(32*ur.y+ur.x)+9*9*f[3*u.y+u.x]);\n      if (fract(r.x+iTime*0.01)<0.3/pow(3.,float(i)) ) f[j]+=int(r.y*4.0);\n      f[j] = f[j]%4;\n    }\n    int c = f[3*u.y+u.x];\n    int nd = d;\n    // This little state machine is probably\n    // not the best way to accomplish this\n    if (d==0 && c==3) nd=3;\n    if (d==3 && c==3) nd=0;\n    if (d==0 && c==1) nd=1;\n    if (d==0 && c==2) nd=2;\n    if (d==3 && c==1) nd=2;\n    if (d==3 && c==2) nd=1;\n    d = nd;\n  }\n  if (d==3) fragColor+=1.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n\nMutating Sierpinski\nCopyright 2017 Theron Tarigo\n\nfractal, random, genetic, generative\n\nFractal rule is mutated as each 3x3 division is performed.\n\n*/\n\nvoid mainImage( out vec4 f, in vec2 d ) {\n    vec4 f0 = texelFetch(iChannel0, ivec2(d), 0);\n    vec4 f1 = texelFetch(iChannel1, ivec2(d), 0);\n    f = mix(f1, f0, 0.002*vec4(1.,2.,3.,4.)*60.*iTimeDelta);\n    if (iMouse.z>0.) f = f0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}