{
    "Shader": {
        "info": {
            "date": "1707128114",
            "description": "Introducing 'Quasar Mix': a method for approximating Barycentric (3-sample) interpolation using only 2 samples.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdKyDc",
            "likes": 10,
            "name": "Two Sample Barycentric Mix",
            "published": 3,
            "tags": [
                "mix",
                "approximation",
                "approximation",
                "hexagon",
                "barycentric",
                "lerp",
                "sample",
                "tiling",
                "interpolation",
                "bilinear",
                "bary",
                "quasar"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/* Finished on: 08.Oct.2023\n\nHere’s a trick I came up with for approximating Barycentric (3 sample) \ninterpolation using just two samples. This lets us skip one sample. \nI’ve named this technique, ‘Quasar Mix’ because the weights resemble \nthe jets of gas expelled from a quasar. This resemblence becomes a lot \nclearer in it's cousin tilings.\n\nBut, this method has a singularity where three values attempt to \ninterpolate but can’t, because we only have two samples. In practice, \nit’s almost unnoticeable unless you know exactly where to look or the \nsamples you’re interpolating have high contrast. So, use this with a \nbit of caution and maybe test it first. \n\nThis method is pretty niche but can be super useful when performance is \nyour top priority and you’re okay with a slight dip in visual quality.\nIt can be applied to any barycentric interpolations like directional\nflowmaps or triplanar mapping. Using CODs method to hide the grid \nusing vector noise and height-blend makes method because virtually \nunnoticable.\n\nYou can enable mouse controls with a click. X controls the border and \nY the contrast. Additionally there are some global constants to enable\ndifferent views of the alpha or with textures.\n\nTurns out Inigo Quilez found this first and wrote a great article:\nhttps://iquilezles.org/articles/biplanar/\n\nA cousin tiling is described here; however, the method is rather crude. \nIf only someone not under NDA could spend 5 minutes to fix it, ◕‿↼: \nhttps://playerunknownproductions.net/news/stochastic-texturing\n\nIf you want to see the general rule for Quasar Approximation see:\nhttps://www.shadertoy.com/view/MfdXz4\n*/\n\n// Enable debug grid where the two mappings blend with each other\n//#define SHOWBLEND\n#define LINETHICKNESS 0.005\n\n// Switch values around to show different things\n// 0 = Interpolated Textures\n// 1 = Interpolated Colors\n// 2 = Weight/Alpha values (Weights use colormap)\n#define SHOWVALUES 1\n\n// Generates hexagonal barycentric weights, but other barycentric weights work too\nvec3 barycentricWeights(vec2 pos) {\n    float weightA = hexagonalTiling(pos);\n    float weightB = hexagonalTiling(pos + vec2(INV_SQRT3, 0.));\n    float weightC = 1. - weightA - weightB; // because sum(weights)==1\n    \n    return vec3(weightA, weightB, weightC);\n}\n\n// simple usecase for barycentric interpolation\nvec3 barycentricSampler(vec2 uv, float contrast) {\n\n    // generate weights or alpha for interpolation\n    vec3 weights = barycentricWeights(uv);\n    \n    // Increase contrast of alpha\n    weights = smoothContrast(weights, contrast);\n\n    #if SHOWVALUES == 0\n        // scale UV coordinates, is static for this demo\n        float scale = 4.;\n        vec2 uvA = uv * scale;\n\n        // generate 2 more set's of UVs, is arbitrary\n        vec2 uvB = rotateUV(uvA, vec2(-0.5, -0.866));\n        vec2 uvC = rotateUV(uvA, vec2(-0.5, 0.866));\n        \n        // Sample texture 3 times\n        vec3 colA = texture(iChannel0, uvA).xyz;\n        vec3 colB = texture(iChannel0, uvB).xyz;\n        vec3 colC = texture(iChannel0, uvC).xyz;\n\n        // interpolate the 3 samples\n        vec3 color = colA * weights.x + colB * weights.y + colC * weights.z;\n        \n        // NB: trick published in https://hal.inria.fr/inria-00536064v2\n        // Deeper conservation: see histogram-preserving here: https://hal.inria.fr/hal-01824773\n        // Modified version of FabriceNeyret2 https://www.shadertoy.com/view/4dcSDr    \n        float squaredAlphaSum = dot(weights, weights);\n\n        // Sampling mips lowest level to get the mean. Can be a constant if known.\n        vec3 mean = textureLod(iChannel0, uvA, 12.).xyz; \n\n        // Variance restoration with normalization (very visible in the Stars)\n        color = mean + (color - mean) / sqrt(squaredAlphaSum);        \n    #else \n        // alpha as rgb which doubles up as interpolated colors\n        vec3 color = weights; \n    #endif\n    \n    #ifdef SHOWBLEND\n        // the edges of the alpha mask blending\n        vec3 blend = step(abs(weights - 0.1), vec3(LINETHICKNESS));\n        color = max(blend.xyz, color);\n    #endif\n    \n    return color;\n}\n\n// approximates Barycentric Weights using only 2 Samples\nvec3 approxBarySampler(vec2 uv, float contrast) {\n    // scale UV coordinates, is static for this demo\n    float scale = 4.;\n    vec2 uvA = uv * scale;\n\n    // generate 2 more set's of UVs, is arbitrary\n    vec2 uvB = rotateUV(uvA, vec2(-0.5, -0.866));\n    vec2 uvC = rotateUV(uvA, vec2(-0.5, 0.866));\n    \n    // generate actual barycentric weights\n    vec3 bary = barycentricWeights(uv);\n    \n    // more accurate contrast and set the second smoothContrast's \n    // contast to 1, but is hardly visible\n    //bary = smoothContrast(bary, contrast);\n    \n    // Generate partial Weights for sides\n    float CB = bary.z - bary.y;    \n    float AB = bary.x - bary.y;\n    float AC = bary.x - bary.z;\n    \n    // Alternate Weights and samples\n    vec2 weights;\n    vec2 uvMixA; // sets of UVs for texture sample\n    vec2 uvMixB;\n    vec3 colorMixA; // sets of colors for color interpolation\n    vec3 colorMixB;\n    if (bary.x > bary.y && bary.z > bary.y) {\n        // A-C Side\n        weights = vec2(CB,AB); \n        \n        uvMixA = uvA;\n        uvMixB = uvC;\n        colorMixA = vec3(1,0,0);\n        colorMixB = vec3(0,0,1);\n    } else if (bary.x > bary.z) {\n        // A-B Side\n        weights = vec2(AC,-CB); \n        \n        uvMixA = uvB;\n        uvMixB = uvA;\n        colorMixA = vec3(0,1,0);\n        colorMixB = vec3(1,0,0);\n    } else {\n        // B-C Side\n        weights = vec2(-AB, -AC);\n        \n        uvMixA = uvC;\n        uvMixB = uvB;\n        colorMixA = vec3(0,0,1);\n        colorMixB = vec3(0,1,0);\n    }\n    \n    // normalize with smooth contrast + optional contrast (SC)\n    float weight = smoothContrast(weights, contrast);\n    //float weight = weights.x / (weights.x + weights.y); // no contrast\n\n    #if SHOWVALUES == 0\n        // Calculate partial derivatives since mips don't work\n        vec2 duvdx = dFdx(uvA);\n        vec2 duvdy = dFdy(uvA);\n\n        // Sample texture 2 times\n        vec3 colA = textureGrad(iChannel0, uvMixA, duvdx, duvdy).xyz;\n        vec3 colB = textureGrad(iChannel0, uvMixB, duvdx, duvdy).xyz;\n\n        // interpolate the 2 samples\n        vec3 color = mix(colA, colB, weight);\n        \n        // NB: trick published in https://hal.inria.fr/inria-00536064v2\n        // Deeper conservation: see histogram-preserving here: https://hal.inria.fr/hal-01824773\n        // Modified version of FabriceNeyret2 https://www.shadertoy.com/view/4dcSDr \n        weights = vec2(weight, 1.-weight);        \n        float squaredAlphaSum = dot(weights, weights);\n\n        // Sampling mips lowest level to get the mean. Can be a constant if known.\n        vec3 mean = textureLod(iChannel0, uvA, 12.).xyz; \n\n        // Variance restoration with normalization (very visible in the Stars)\n        color = mean + (color - mean) / sqrt(squaredAlphaSum);\n        \n    #elif SHOWVALUES == 1\n        // interpolate color for each corner\n        vec3 color = mix(colorMixA, colorMixB, weight); \n        \n    #else\n        // alpha as colormap for readability\n        vec3 color = viridis(weight); \n    #endif\n    \n    #ifdef SHOWBLEND\n        // the edges of the alpha mask blending\n        vec2 blend = step(abs(vec2(weight, 1.-weight)-0.1), vec2(LINETHICKNESS));\n        color = max(color, vec3(blend, 0.));\n    #endif\n    \n    return color; \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    // Calculate centered UV coordinates\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y -vec2(0,.5);\n        \n    // enable mouse controls when clicked, otherwise animate\n    float contrast;\n    float border;    \n    if (iMouse.x > 0.0)\t{  \n        vec2 mouse = (iMouse.xy - iResolution.xy * 0.5) / iResolution.y -vec2(0,.5);\n        border = mouse.x;\n        contrast = mix(1., 8., pow(mouse.y,2.));\n    } else {\n        float myTime = iTime * 0.5;\n        border = mix(-INV_SQRT3, INV_SQRT3, sin(myTime) * 0.5 + 0.5);\n        contrast = 2.;\n    }\n    \n    // zoom into UV so one triangle is fullscreen\n    vec2 detailUV = uv * 0.5;\n    \n    // Alternate between smooth alpha and dithered alpha\n    vec3 color;\n    if (uv.x > border) {\n        // Sample 2 weight approximation of Barycentric\n        color = approxBarySampler(detailUV ,contrast);\n    } else {\n        // Sample 3 weights as comparison\n        color = barycentricSampler(detailUV ,contrast); \n    }\n    \n    // Calculate anti-aliasing effect\n    vec2 uvFwidth = fwidth(uv);\n    float aa = max(uvFwidth.x, uvFwidth.y);\n    \n    // mask for borders of triangle    \n    vec3 weights = barycentricWeights(detailUV);\n    weights = smoothstep(LINETHICKNESS-aa, LINETHICKNESS+aa, weights);    \n    float mask = weights.x * weights.y * weights.z;\n    color = clamp(color * mask, 0., 1.);\n            \n    // Add a dividing line\n    color += smoothstep(LINETHICKNESS+aa, LINETHICKNESS-aa, abs(uv.x - border));\n    \n    #if SHOWVALUES == 1\n        // When mixing color (NOT weights) adjust Gamma. Thanks to xrx\n        color = pow(color, vec3(1./2.2));\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//_____________________________Generic Functions________________________________\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See 2 value example (https://www.desmos.com/calculator/dpxa6mytnv)\nvec3 smoothContrast(vec3 alpha, float contrast) {\n    // increase steepness using power\n    vec3 powAlpha = pow(alpha, vec3(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha/(powAlpha.x + powAlpha.y + powAlpha.z);\n}\n\n// Increases the steepness of Alpha while preserving 0-1 range and 1 sum\n// See 2 value example https://www.desmos.com/calculator/n6gpory8yq\nfloat smoothContrast(vec2 alpha, float contrast) {\n    // increase steepness using power\n    vec2 powAlpha = pow(alpha, vec2(contrast));\n    \n    // normalize back to precentage of 1\n    return powAlpha.x/(powAlpha.x + powAlpha.y);\n}\n\n// Rotate UV in vector direction\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2( direction.y, direction.x,\n                                -direction.x, direction.y );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n// makes viridis colormap with polynimal 6\nvec3 viridis(float t) {\n    const vec3 c0 = vec3(0.274344,0.004462,0.331359);\n    const vec3 c1 = vec3(0.108915,1.397291,1.388110);\n    const vec3 c2 = vec3(-0.319631,0.243490,0.156419);\n    const vec3 c3 = vec3(-4.629188,-5.882803,-19.646115);\n    const vec3 c4 = vec3(6.181719,14.388598,57.442181);\n    const vec3 c5 = vec3(4.876952,-13.955112,-66.125783);\n    const vec3 c6 = vec3(-5.513165,4.709245,26.582180);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\n// Hexagon Tiling Functions ______________________________________________\n\n#define INV_SQRT3\t\t0.5773502693 // 1/sqrt(3)\n#define INV_TWO_SQRT3 0.2886751346 // 1/(2 sqrt(3))\n\n// if you want (hex rotated by 30deg) swap xy in hr and the p.x to p.y in hexDist\n#define HEX_GRID vec2(1.7320508076, 1) // sqrt(3), 1\n#define HEX_CENTER vec2(0.8660254038, 0.5) // sqrt(3) /2, 1/2\n\n// Hexagonal tiling based on BigWIngs https://www.shadertoy.com/view/3sSGWt\nfloat hexagonalTiling(vec2 uv) {\n    // Calculate distances from the center of two potential hexagons\n    vec2 sideA = mod(uv, HEX_GRID) - HEX_CENTER;\n    vec2 sideB = mod(uv - HEX_CENTER, HEX_GRID) - HEX_CENTER;\n\n    // Choose the side with shorter distance to the hexagon center\n    vec2 grid = dot(sideA, sideA) < dot(sideB, sideB) ? sideA : sideB;\n\n    // Calculate the edge distance with a range of 0-1\n    vec2 mirror = abs(grid);\n    float edgeDistance = max(dot(mirror, HEX_CENTER), mirror.y);\n\n    return (0.5 -edgeDistance) * 2.0; // Scale the edge distance\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}