{
    "Shader": {
        "info": {
            "date": "1623388156",
            "description": "oh fuck yeah, spread it\nthis cheats. badly. looks pretty good tho!",
            "flags": 32,
            "hasliked": 0,
            "id": "7t2Gz1",
            "likes": 1,
            "name": "Heat Spreader",
            "published": 3,
            "tags": [
                "heat"
            ],
            "usePreview": 0,
            "username": "itishappy",
            "viewed": 111
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n\tfragColor = vec4(color.xyz, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float gaussian_avg(vec2 xy, float heat) { //A trick to approximate a guassian\n    float neighbors = -3.*heat; // (black magic)\n    for(float i=-1.; i<=1.; i+=1.) {\n        for(float j=-1.; j<=1.; j+=1.) {\n        \tvec2 offset = vec2(i,j) / iResolution.xy;\n            float m = 3. - abs(i) - abs(j); // (black magic)\n        \tneighbors += m * texture(iChannel0, xy+offset).a; // Accumulate the result\t\t\t\t\t\t\t \n        }\n    }\n    return neighbors / 12.; // (black magic) Turn the sum into an avg\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 xy = fragCoord.xy / iResolution.xy;\n\n    float heat = texture(iChannel0, xy).a;\n    \n    float avg = gaussian_avg(xy, heat);\n    \n    float alpha = 0.3;\n    \n    heat = alpha*avg + (1.-alpha)*heat; // This is probably cheating\n    \n    if(iTime < .1) { // Show iChannel1 for an instant\n        vec4 tex = texture(iChannel1, fragCoord.xy / iResolution.xx);\n        heat = dot(tex, vec4(.2126,.7152,.0722,0.)); // Relative luminance\n    }\n    \n    vec3 col = vec3(heat,0.,0.); // pick a fun color here\n\n    // Output to screen\n    fragColor = vec4(col,heat); // use the value for heat as alpha\n    \n}\n\n\n\n// Change the texture in iChannel1 for different inputs",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}