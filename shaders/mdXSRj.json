{
    "Shader": {
        "info": {
            "date": "1669187562",
            "description": "...",
            "flags": 0,
            "hasliked": 0,
            "id": "mdXSRj",
            "likes": 2,
            "name": "My Raytrace",
            "published": 3,
            "tags": [
                "raytracing",
                "ray",
                "raycasting",
                "lighting",
                "spheres",
                "raytrace",
                "pathtracing",
                "tracing",
                "tracing",
                "chess",
                "scene",
                "trace",
                "path",
                "cast",
                "casting"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "#define AA 1\n\nstruct Inter{\n  float t;\n  vec3 nor;\n  float id;\n};\n\nInter iUn(Inter a,Inter b){\n  if(b.t > -1.0 && b.t < a.t) return b;\n  return a;\n}\n\nInter iSphere(float id,vec3 ro,vec3 rd,Inter a,vec4 sph){\n\tInter t;\n\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tt.t = -b - sqrt(h);\n\tif(h < 0.0) t.t = -1.0;\n\n\tt.id = id;\n\n\tvec3 pos = ro+rd*iUn(a,t).t;\n\tt.nor = (pos-sph.xyz)/sph.w;\n\n\treturn t;\n}\n\nInter iPlane(float id,vec3 ro,vec3 rd,vec4 pln){\n\tInter t;\n\tt.t = -(dot(rd,pln.xyz)+pln.w)/dot(rd,pln.xyz)+pln.w;\n\tt.id = id;\n\tt.nor = pln.xyz;\n\treturn t;\n}\n\nInter raycast(vec3 ro,vec3 rd){\n\tInter t;\n\tt.id = -1.0;\n\tt.t = 99999999.9;\n    t.nor = vec3(0.0);\n\tvec3 pos = ro+rd*t.t;\n\n  // scene //\n\n\tt = iUn(t,iPlane(3.0,ro,rd,vec4(0.0,1.0,0.0,1.0)));\n\tt = iUn(t,iSphere(1.0,ro,rd,t,vec4(0.0,0.0,0.0,1.0)));\n\tt = iUn(t,iSphere(2.0,ro,rd,t,vec4(1.0,-0.7,1.0,0.3)));\n\tt = iUn(t,iSphere(0.0,ro,rd,t,vec4(-0.8,-0.85,1.0,0.15)));\n\n\treturn t;\n}\n\nvec3 render(vec2 uv){\n\tvec3 col = vec3(0.0);\n\n\tvec3 ro = vec3(0.0,0.0,3.5);\n\tvec3 rd = normalize(vec3(uv,-2.0));\n\n\tInter t = raycast(ro,rd);\n\tvec3 nor = t.nor;\n\tvec3 pos = ro+rd*t.t;\n  vec3 mate = vec3(0.0);\n\n\tif(t.id == 0.0){\n\t\tmate = vec3(0.0,0.0,1.0);\n\t}else if(t.id == 1.0){\n\t\tmate = vec3(1.0,0.0,0.0);\n\t}else if(t.id == 2.0){\n\t\tmate = vec3(0.0,1.0,0.0);\n\t}else if(t.id == 3.0){\n\t\tmate += 0.5+0.5*mod(floor(pos.x*5.0)+floor(pos.z*5.0),2.0);\n\t}\n\n\tvec3 bgCol = vec3(0.5,0.5,0.5);\n\tvec3 fogCol = vec3(0.0,0.0,0.0);\n\tvec3 fog = mix(bgCol,fogCol,1.0-rd.y);\n\n\tif(t.id != -1.0){\n\t\tcol = vec3(0.0);\n\t\tvec3 lig = normalize(vec3(0.5));\n\t\tfloat dif = clamp(dot(nor,lig),0.0,1.0);\n\t\tfloat sha = step(1.0,raycast(pos+0.58,lig).t);\n\t\tcol += mate * dif * sha;\n\t}\n\n\tcol = mix(col,fog,clamp(0.0001*t.t*t.t*t.t,0.0,1.0));\n\n\t//col = pow(col,vec3(1.0/3.3));\n\n\treturn col;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec3 col = vec3(0.0);\n\n  #if AA > 1\n  for(int i=0;i<AA;i++)\n  for(int j=0;j<AA;j++){\n    vec2 o = vec2(float(i),float(j));\n    vec2 uv = (2.0*(fragCoord-o)-iResolution.xy)/iResolution.y;\n  #else\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  #endif\n    col += render(uv);\n  #if AA > 1\n  }\n  col /= float(AA*AA);\n  #endif\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}