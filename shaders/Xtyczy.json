{
    "Shader": {
        "info": {
            "date": "1536707911",
            "description": "moving squircle dots",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtyczy",
            "likes": 4,
            "name": "dot animation",
            "published": 3,
            "tags": [
                "dots",
                "motion",
                "squircle"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 537
        },
        "renderpass": [
            {
                "code": "#define LIGHT_AND_DARK 1 // set to 0 to make all dots light against a black background\n\nfloat squash_squircle(in vec2 in_pos, in float aspect_ratio, in float rad4) {\n    vec2 aspect = vec2(aspect_ratio, 1.0);\n    vec2 pos = aspect * in_pos;\n    vec2 tmp = pos * pos;\n    vec2 deriv = 4.0 * pos * tmp;\n    tmp = tmp * tmp;\n    float val4 = dot(vec2(1.0, 1.0), tmp);\n    float deriv_mag = length(aspect * deriv);\n    float sdf = (val4 - rad4) / deriv_mag;\n    return clamp(0.2 * sdf * iResolution.y, 0.0, 1.0);\n}\n\nfloat ob_dot(in vec2 pos, in vec2 dotloc, in float size) {\n    return 1.0 - squash_squircle(pos - dotloc, 2.0, size * size * size * size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n#if LIGHT_AND_DARK\n    vec3 col = vec3(0.5);\n#else\n    vec3 col = vec3(0.0);\n#endif    \n    \n    const float size = 0.2;\n    \n    float color_sign = 1.0;\n    \n    for (int j = -1; j < 2; ++j) {\n        float fj = float(2 * j);\n        if (abs(uv.y - 0.25 * fj) > 1.1 * size) {\n            continue;\n        }\n    \tfor (int i = 0; i < 7; ++i) {\n        \tvec2 h_lookup = vec2(float(i), 0.1 * iTime + 0.2 * fj);\n        \tfloat lr = 2.0 * simple_noise(h_lookup) - 3.0;\n        \t\n        \tcol += 0.2 * color_sign * ob_dot(uv, vec2(lr, 0.25 * fj), size);\n            \n#if LIGHT_AND_DARK            \n            color_sign *= -1.0;\n#endif            \n    \t}\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// All hash functions copied from https://www.shadertoy.com/view/Xt3cDn\n// Thanks, nimitz!\n\n//Modified from: iq's \"Integer Hash - III\" (https://www.shadertoy.com/view/4tXyWN)\n//Faster than \"full\" xxHash and good quality\nuint baseHash(uvec2 p)\n{\n    p = 1103515245U*((p >> 1U)^(p.yx));\n    uint h32 = 1103515245U*((p.x)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\n//--------------------------------------------------\n\nfloat hash12(vec2 x)\n{\n    uint n = baseHash(floatBitsToUint(x));\n    \n    return float(n & 0x7fffffffU)/float(0x7fffffff);\n}\n\n\nfloat noise_term(in vec2 x, in float scale_val) {\n    vec2 s = vec2(scale_val);\n    vec2 x00 = x - mod(x, s);\n    vec2 x01 = x + vec2(0.0, scale_val);\n    x01 = x01 - mod(x01, s);\n    vec2 x10 = x + vec2(scale_val, 0.0);\n    x10 = x10 - mod(x10, s);\n    vec2 x11 = x + s;\n    x11 = x11 - mod(x11, s);\n    \n    float v00 = hash12(x00);\n    float v01 = hash12(x01);\n    float v10 = hash12(x10);\n    float v11 = hash12(x11);\n    \n    vec2 uv = mod(x, s) / s;\n    \n    float yweight = smoothstep(0.0, 1.0, uv.y);\n    float v1 = mix(v10, v11, yweight);\n    float v0 = mix(v00, v01, yweight);\n    \n    float xweight = smoothstep(0.0, 1.0, uv.x);\n    \n    return mix(v0, v1, xweight);\n}\n\nfloat noise(in vec2 x, in float base_scale, in float space_decay, in float height_decay,\n           in float shift_by) {\n\tfloat h = 1.0;\n    float s = base_scale;\n\n    float summation = 0.0;\n    \n    for (int i = 0; i < 5; ++i) {\n    \tsummation = summation + h * noise_term(x + vec2(0.0, s * shift_by), s);\n        s *= space_decay;\n        h *= height_decay;\n    }\n    return summation;\n}\n\nfloat simple_noise(in vec2 uv) {\n  return noise(uv * 10.0, 5.0, 0.75, 0.75, 0.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}