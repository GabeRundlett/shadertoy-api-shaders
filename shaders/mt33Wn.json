{
    "Shader": {
        "info": {
            "date": "1682211821",
            "description": "Wow, so magic...",
            "flags": 0,
            "hasliked": 0,
            "id": "mt33Wn",
            "likes": 4,
            "name": "Magic Keyboard",
            "published": 3,
            "tags": [
                "raymarching",
                "magic",
                "keyboard",
                "push",
                "buttons"
            ],
            "usePreview": 0,
            "username": "Rex109",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdButton(vec3 p)\n{\n    float base = sdBox(p, vec3(.5));\n    \n    vec3 cp1 = p - vec3(.0,.0,1.3);\n    cp1.yz *= Rot(PI/5.);\n    float cutout1 = sdBox(cp1, vec3(.5,1.0,1.0));\n    \n    vec3 cp2 = p - vec3(-1.35,.0,.0);\n    cp2.xy *= Rot(PI/10.);\n    float cutout2 = sdBox(cp2, vec3(1.0));\n    \n    vec3 cp3 = p - vec3(1.35,.0,.0);\n    cp3.xy *= Rot(-PI/10.);\n    float cutout3 = sdBox(cp3, vec3(1.0));\n    \n    vec3 cp4 = p - vec3(.0,2.0,.0);\n    cp4.xy *= Rot(PI/2.);\n    cp4.yz *= Rot(PI/2.);\n    float cutout4 = sdCylinder(cp4, 1.0, 2.);\n    \n    return max(max(max(max(base, -cutout1), -cutout2), -cutout3), -cutout4) * .5;\n}\n\nfloat Hash21(vec2 p)\n{\n    p = fract(p*vec2(422.53, 321.13));\n    p += dot(p, p+2003.123);\n    return fract(p.x*p.y);\n}\n\nfloat GetDist(vec3 p) {\n    p.x += T;\n    p.z -= T;\n    \n    vec3 P = p;\n    vec2 id = floor(P.xz);\n    P.xz = fract(p.xz)-.5;\n    \n    float n = Hash21(id)*.5+.5;\n    \n    if(n > .5) P.y += (cos((T+n*5.)*5.0)*.5+.5)*.35;\n    \n    float d = sdButton(P);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = vec2(0.47,0.3);\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,0), 1.);\n    vec3 col = vec3(0.188,0.173,0.153);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        col *= vec3(0.620,0.553,0.439);\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}