{
    "Shader": {
        "info": {
            "date": "1691893701",
            "description": "it was written by ChatGPT-3.5 with some coaching, you dolt!",
            "flags": 0,
            "hasliked": 0,
            "id": "DtBcRy",
            "likes": 1,
            "name": "eindacor_ai_psychadelic",
            "published": 3,
            "tags": [
                "psychadelic"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "float hash(float n) { return fract(sin(n) * 43758.5453); }\n\nfloat noise(in vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0;\n    return mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n               mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y);\n}\n\nvec3 blendColors(float t, vec3 c1, vec3 c2, vec3 c3) {\n    return mix(mix(c1, c2, t), c3, t);\n}\n\n// Function to generate ocean wave refraction pattern\nfloat waterRefraction(vec2 uv) {\n    float wave1 = 0.5 + 0.5 * sin(uv.x * 10.0 + iTime * 1.5);\n    float wave2 = 0.5 + 0.5 * sin(uv.x * 6.0 + uv.y * 6.0 + iTime * 1.5);\n    float wave3 = 0.5 + 0.5 * sin(uv.y * 12.0 + iTime * 1.0);\n    return (wave1 + wave2 + wave3) / 3.0; // Normalize to the range of 0.5 to 1.0\n}\n\n// Function to generate a wireframe 3D grid\nfloat geometricPattern(vec2 uv, float thickness) {\n    float scale = 10.0;\n    vec2 p = uv * scale;\n    float lines = step(thickness, mod(p.x, 1.0)) + step(thickness, mod(p.y, 1.0));\n    return lines;\n}\n\n// Function to add colorful glittery effect\nvec3 glitteryEffect(vec2 uv, float glitterIntensity) {\n    vec3 glitterColor = vec3(1.0, 1.0, 1.0);\n    float glitter = noise(uv * 50.0 + iTime * 5.0) * glitterIntensity;\n    return glitterColor * glitter;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized coordinates\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    // Create a brighter and more pastel color palette with blues and greens\n    vec3 col = 0.5 + 0.5 * cos(iTime + 3.0 + vec3(0, 2, 4)) * vec3(0.3, 0.6, 0.8);\n\n    // Create a dynamic pattern using sine waves and Perlin noise\n    float r = length(p);\n    float stripes = 0.5 * (sin(r * 20.0 - iTime) + 1.0) + 0.5;\n    float waves = 0.5 * (sin(10.0 * r + iTime) + 1.0) + 0.5;\n\n    // Add Perlin noise to the pattern\n    float perlinNoise = 0.5 * noise(p * 5.0 + iTime) + 0.5;\n\n    // Mix colors for the final pattern, and adjust output to the range of 0.5 to 1.0\n    vec3 invertedPattern = mix(col, vec3(1.0), stripes) * waves * perlinNoise * 0.5 + 0.5;\n\n    // Shifting blend of blues, greens, and cyans\n    vec3 blue = vec3(0.2, 0.4, 1.0);\n    vec3 green = vec3(0.4, 1.0, 0.5);\n    vec3 cyan = vec3(0.5, 1.0, 1.0);\n    float blendT = 0.5 + 0.5 * sin(iTime);\n    vec3 otherColor = 0.25 * blendColors(blendT, blue, green, cyan); // Scale down otherColor\n\n    // Mix otherColor with vec3(1.0) using invertedPattern\n    vec3 finalColor = mix(otherColor, vec3(1.0), invertedPattern);\n\n    // Overlay old film burning effect (slowed down and clamped)\n    vec3 burnColor = vec3(1.0, 0.3, 0.1);\n    float burnEffect = mix(0.0, 1.0, sin(iTime * 0.5) * 0.2); // Slow down burn effect\n    finalColor = clamp(finalColor + burnEffect * burnColor, 0.0, 1.0);\n\n    // Generate ocean wave refraction pattern and modify green channel of finalColor\n    float wavePattern = waterRefraction(p);\n    finalColor.g *= wavePattern;\n\n    // Generate wireframe 3D grid with specified thickness and modify blue channel of finalColor\n    float gridPattern = geometricPattern(p, 0.2); // Adjust thickness here\n    finalColor.b *= gridPattern;\n\n    // Add colorful glittery effect\n    vec3 glitter = glitteryEffect(p, 0.2); // Adjust glitter intensity here\n    finalColor += glitter;\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}