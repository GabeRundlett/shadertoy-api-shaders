{
    "Shader": {
        "info": {
            "date": "1496318242",
            "description": "Just doodling, testing ordered dithers.",
            "flags": 0,
            "hasliked": 0,
            "id": "4dfBWM",
            "likes": 1,
            "name": "3bpp Britney",
            "published": 3,
            "tags": [
                "dither",
                "bayer"
            ],
            "usePreview": 0,
            "username": "grinist",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "// source image:\n//#define GRAYSCALERAMP \t// grayscale ramp\n//#define DEFAULT_SHADER\t// default shader color roll\n// if neither is defined, iChannel1 is used\n\n// visualize dither:\n//#define ANIMATE_SELECT\n#define ANIMATE_SLICES\n// if neither is defined uses function below\n#define DITHER dither4x4\n\nvec3 quantize(vec3 col, ivec2 iuv)\n{\n    return step(0.5, col);\n}\n\nvec3 dither2x2(vec3 col, ivec2 iuv)\n{\n    // precalced thresholds for default 2x2 bayer pattern\n    const float[4] pattern = float[4] (1.0 / 5.0, 3.0 / 5.0,\n                                       4.0 / 5.0, 2.0 / 5.0);\n    float d = pattern[((iuv.y & 1) << 1) + (iuv.x & 1)];\n    return step(d, col);\n}\n\nvec3 dither3x3(vec3 col, ivec2 iuv)\n{\n    // precalced thresholds for default 3x3 bayer pattern\n    const float[9] pattern = float[9] (1.0 / 10.0, 8.0 / 10.0, 4.0 / 10.0,\n                                       7.0 / 10.0, 6.0 / 10.0, 3.0 / 10.0,\n                                       5.0 / 10.0, 2.0 / 10.0, 9.0 / 10.0);\n    float d = pattern[((iuv.y % 3) * 3) + (iuv.x % 3)];\n    return step(d, col);\n}\n\nvec3 dither4x4(vec3 col, ivec2 iuv)\n{\n    // precalced thresholds for default 4x4 bayer pattern\n    const float[16] pattern = float[16] (1.0 / 17.0, 9.0 / 17.0, 3.0 / 17.0, 11.0 / 17.0,\n                                         13.0 / 17.0, 5.0 / 17.0, 15.0 / 17.0, 7.0 / 17.0,\n                                         4.0 / 17.0, 12.0 / 17.0, 2.0 / 17.0, 10.0 / 17.0,\n                                         16.0 / 17.0, 8.0 / 17.0, 14.0 / 17.0, 6.0 / 17.0);\n    float d = pattern[((iuv.y & 3) << 2) + (iuv.x & 3)];\n    return step(d, col);\n}\n\nvec3 dither8x8(vec3 col, ivec2 iuv)\n{\n    vec2 duv = vec2(iuv & 7) * 0.125 + 0.0625;\n    float d = (texture(iChannel0, duv).r * 63.0 + 1.0) / 65.0;\n    return step(d, col);\n}\n\nvec3 raw(vec3 col, ivec2 iuv)\n{\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    ivec2 iuv = ivec2(fragCoord.xy);\n#ifdef GRAYSCALERAMP\n    vec3 color = vec3(uv.x);\n#elif defined(DEFAULT_SHADER)\n    vec3 color = vec3(uv, 0.5 + 0.5 * sin(iTime));\n#else\n    vec3 color = texture(iChannel1, uv).rgb;\n#endif\n    \n#ifdef ANIMATE_SELECT\n    float tri = abs((fract(iTime * 0.25) - 0.5) * 2.0);\n\tcolor = tri > 0.1 ? (tri > 0.3 ? (tri > 0.5 ? (tri > 0.7 ? (tri > 0.9 ? color : dither8x8(color, iuv)) : dither4x4(color, iuv)) : dither3x3(color, iuv)) : dither2x2(color, iuv)) : quantize(color, iuv);\n#elif defined(ANIMATE_SLICES)\n    float tri = abs((fract(uv.x * 0.6 - 0.05 + iTime * 0.2) - 0.5) * 2.0);\n\tcolor = tri > 0.1 ? (tri > 0.3 ? (tri > 0.5 ? (tri > 0.7 ? (tri > 0.9 ? color : dither8x8(color, iuv)) : dither4x4(color, iuv)) : dither3x3(color, iuv)) : dither2x2(color, iuv)) : quantize(color, iuv);\n#else\n    color = DITHER(color, iuv);\n#endif\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}