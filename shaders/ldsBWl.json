{
    "Shader": {
        "info": {
            "date": "1498877182",
            "description": "////",
            "flags": 0,
            "hasliked": 0,
            "id": "ldsBWl",
            "likes": 11,
            "name": "Strobescent One///",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "MrHenryBemis",
            "viewed": 770
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define iTime (iTime*19.8)\nvec2 hash2( float n )\n{\n    return fract(sin(vec2(n,n+1.0))*vec2(13.5453123,31.1459123));\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(13.5453123,31.1459123,37.3490423));\n}\n\nvec3 noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash3(p+0.0), hash3(p+1.0),f);\n}\n\n\nmat4 rotationMat( in vec3 xyz )\n{\n    vec3 si = sin(xyz);\n    vec3 co = cos(xyz);\n\n\treturn mat4( co.y*co.z,                co.y*si.z,               -si.y,       0.0,\n                 si.x*si.y*co.z-co.x*si.z, si.x*si.y*si.z+co.x*co.z, si.x*co.y,  0.0,\n                 co.x*si.y*co.z+si.x*si.z, co.x*si.y*si.z-si.x*co.z, co.x*co.y,  0.0,\n\t\t\t     0.0,                      0.0,                      0.0,        1.0 );\n}\n\nconst float s = 1.0977777741;\n\nmat4 mm;\n\nvec3 map( vec3 p )\n{\n\tfloat k = 1.0;\n\tfloat m = 1e10;\n\tfor( int i=0; i<18; i++ ) \n\t{\n\t\tm = min( m, dot(p,p)/(k*k) );\n\t\tp = (mm*vec4((abs(p)),1.0)).xyz;\n\t\tk*= s;\n\t}\n\t\n\n\tfloat d = (length(p)-0.25)/k;\n\t\n\tfloat h = p.z - 0.35*p.x;\n\t\n\treturn vec3( d, m, h );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    for( int i=0; i<200; i++ )\n\t{\n        vec3 res = map( ro+rd*t );\n        if( res.x<0.0002 ) return vec3(t,res.yz);\n        t += res.x;\n\t\tif( t>9.0 ) break;\n    }\n\n    return vec3( -1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float e )\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<12; i++ )\n    {\n        float h = map(ro + rd*t).x;\n\t\th = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.001, 0.1 );\n\t\tif( res<0.01 || t>6.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n\t\tvec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47);\n\t\taopos *= sign( dot(aopos,nor) );\n\t\taopos = pos + nor*0.01 + aopos*0.04;\n        float dd = clamp( map( aopos ).x*4.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao /= 16.0;\n\t\n    return clamp( totao*totao*50.0, 0.0, 1.0 );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 of = hash2( float(iFrame)*1113.1 + fragCoord.x + fragCoord.y*119.1 );\n    \n\tvec2 q = (fragCoord + of) / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // animation\t\n    float rtime = iTime;\n    \n\tfloat time = rtime;\n\ttime += 15.0*smoothstep(  15.0, 25.0, rtime );\n\ttime += 20.0*smoothstep(  65.0, 80.0, rtime );\n\ttime += 35.0*smoothstep( 105.0, 135.0, rtime );\n\ttime += 20.0*smoothstep( 165.0, 180.0, rtime );\n\ttime += 40.0*smoothstep( 220.0, 290.0, rtime );\n\ttime +=  5.0*smoothstep( 320.0, 330.0, rtime );\n\tfloat time1 = (time-10.0)*1.5 - 167.0;\n\tfloat time2 = time;\n\t\n    mm = rotationMat( vec3(0.4,0.1,3.4) + \n                      0.15*sin(0.1*vec3(0.40,0.30,0.61)*time1) + \n                      0.15*sin(0.1*vec3(0.11,0.53,0.48)*time1));\n    mm[0].xyz *= s;\t\n    mm[1].xyz *= s;\n    mm[2].xyz *= s;\t\n\tmm[3].xyz = vec3( 0.15, 0.05, -0.07 ) + 0.05*sin(vec3(0.0,1.0,2.0) + 0.2*vec3(0.31,0.24,0.42)*time1);\n\t\n    // camera\n\tfloat an = 1.0 + 0.1*time2 - sin(18.2)*m.x;\n\tfloat cr = 0.15*sin(0.22*time2);\n    vec3 ro = (2.4 + 0.6*smoothstep(10.0,20.0,time2))*vec3(sin(an),0.75,cos(an));\n    vec3 ta = vec3( 0.0, 0.0 + 0.213*cos(0.3*time2), 0.0 );\n\tta += 0.05*noise(  0.0 + 1.0*time );\n\tro += 0.05*noise( 11.3 + 1.0*time );\n    // camera-to-world transformation    \n    mat3 ca = setCamera( ro, ta, cr );\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,3.0) );\n\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n\t\n\t// shade\n    vec3 col = vec3(0.0);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos, 0.005);\n\t\tvec3 sor = calcNormal(pos, 0.010);\n\n        // material\n\t\tvec3 mate = vec3(1.0);\n\t\tmate = mix( vec3(0.5,0.5,0.2), vec3(0.5,0.3,0.0), 0.5 + 0.5*sin(4.0+8000.0*tmat.y)  );\n\t\tmate = mix( vec3(1.0,0.9,0.8), mate, 0.5 + 0.5*sin(4.0+20.0*tmat.z) );\n        mate.x *= 1.15;\n\n\t\t// lighting\n\t\tfloat occ = 1.1*calcAO( pos, nor );\n\t\tocc *= 0.75 + 0.25*clamp(tmat.y*400.0,0.0,1.0);\n\t\t\n\t\t// diffuse\n\t\tcol = vec3(0.0);\n\t\tfor( int i=0; i<32; i++ )\n\t\t{\n\t\t\t//vec3 rr = normalize(-1.0 + 2.0*texture( iChannel2, vec2((0.5+float(i)),0.5)/256.0,-100.0).xyz);\n\t\t\tvec3 rr = normalize(-1.0 + 2.0*hash3(float(i)*123.5463));\n\t\t\trr = normalize( nor + 7.0*rr );\n\t\t\trr = rr * sign(dot(nor,rr));\t\t\t\t\t\t\t  \n\t\t\tfloat ds = occ;//softshadow( pos, rr, 0.01, 32.0 );\n            col += pow( texture( iChannel0, rr ).xyz, vec3(2.2) ) * dot(rr,nor) * ds;\n\t\t}\n        col /= 32.0;\t\t\t\t\t\t\t\t\t\t\n\n\t\tcol *= 1.8;\n\n        // subsurface\t\t\n\t\tcol *= 1.0 + 1.0*vec3(1.0,0.6,0.1)*pow(clamp(1.0+dot(rd,sor),0.0,1.0),2.0)*vec3(1.0);\n\t\t\n        // specular\t\t\n\t\tfloat fre = pow( clamp(1.0+dot(rd,nor),0.0,1.0), 5.0 );\n\t\tvec3 ref = reflect( rd, nor );\n\t\tfloat rs = softshadow( pos, ref, 0.01, 32.0 );\n        col += 1.8 * (0.04 + 12.0*fre) * occ * pow( texture( iChannel0, ref ).xyz, vec3(2.0) ) * rs;\n\n        col *= mate;\n    }\n\telse\n\t{\n        // background\t\t\n\t\tcol = pow( texture( iChannel0, rd ).xyz, vec3(2.2) );\n\t}\n\n\t// gamma\n\tcol = pow( clamp( col*1.5, 0.0, 1.0 ), vec3(0.45) );\n\n\t// vigneting\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    float l = length(col)*2.82814*1.5+cos(time*0.52707777);\n    fragColor = vec4( vec3(cos(l), cos(l+sin(4.5277782814)*sin(7.48280/3.0)), cos(l+sin(3.14*6.77280/3.0)))*sin(.4725777)+.475, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}