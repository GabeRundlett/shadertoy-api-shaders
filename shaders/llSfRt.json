{
    "Shader": {
        "info": {
            "date": "1516834798",
            "description": "If you know what I can do against the aliasing on the beacon, please tell me!\n[b]Update:[/b] Randomly changing the width of the beam worked and added a nice glow around it.\n\nSpace to reset.",
            "flags": 48,
            "hasliked": 0,
            "id": "llSfRt",
            "likes": 37,
            "name": "My Slightly Less Shit Pathtracer",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "basic",
                "reflections",
                "pathtracer"
            ],
            "usePreview": 0,
            "username": "slerpy",
            "viewed": 1633
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 col = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    fragColor = col / col.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.28318530718\n\n#define AA 1.6\n\n#define FAR 50.\n#define ITER 80\n#define NORK 5e-4\n\n#define RITER 8\n#define RRFB .001\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hashHs( vec3 n, uint seed )\n{\n    float a=(float((seed*0x73493U)&0xfffffU)/float(0x100000))*2.-1.;\n    float b=6.283*(float((seed*0xAF71fU)&0xfffffU)/float(0x100000));\n    float c=sqrt(1.-a*a);\n    vec3 r=vec3(c*cos(b),a,c*sin(b));\n    return dot(r,n)>0.?r:-r;\n}\n\nmat3 rx(float a){ float s=sin(a), c=cos(a); return mat3(1.,0.,0.,0.,+c,+s,0.,-s,+c); }\nmat3 ry(float a){ float s=sin(a), c=cos(a); return mat3(+c,0.,+s,0.,1.,0.,-s,0.,+c); }\nmat3 rz(float a){ float s=sin(a), c=cos(a); return mat3(+c,+s,0.,-s,+c,0.,0.,0.,1.); }\n\nfloat box(vec3 p){ p=abs(p); return max(max(p.x, p.y), p.z); }\nfloat box(vec2 p){ p=abs(p); return max(p.x, p.y); }\n\nvec2 amod(vec2 p, float m)\n{\n    float a=mod(atan(p.x, p.y), m) - m/2.;\n    return vec2(cos(a),sin(a)) * length(p);\n}\n\nvoid dmin(inout vec2 d, in float x, in float y)\n{\n    if(x < d.x) d = vec2(x,y);\n}\n\nvec4 tex(sampler2D chn, vec3 p, vec3 n)\n{\n    n = abs(n);\n    vec4 col = vec4(0);\n    \n    col += texture(chn, p.xy) * n.z;\n    col += texture(chn, p.yz) * n.x;\n    col += texture(chn, p.xz) * n.y;\n    \n    return col;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 d = vec2(1e+31, 0);\n    \n    float jiggle = .1 * pow(2.*fract(TAU*float(iFrame))-1., 9.);\n    \n    dmin(d, p.y + .5, 0.);\n    dmin(d, jiggle + length(p.xz) - .5, 2.);\n    if(dot(p.xy,p.xy) > 12.25)return d;\n    \n    p.xz = amod(p.xz, TAU/8.);\n    dmin(d, length(p - vec2(0, 2).yxx) - .5, .99);\n\treturn d;\n}\n\nvec3 normal(vec3 p, float k)\n{\n\tvec2 e = vec2(0,k);\n\treturn normalize(vec3(\n\t\tmap(p + e.yxx).x - map(p - e.yxx).x,\n\t\tmap(p + e.xyx).x - map(p - e.xyx).x,\n\t\tmap(p + e.xxy).x - map(p - e.xxy).x\n\t));\n}\n\nvec2 tracer(vec3 ro, vec3 rd)\n{    \n    vec2 m;\n    float t=RRFB;\n    for(int i=0; i < ITER; i++)\n    {\n        m = map(ro + rd*t);\n        if(t > FAR)break;\n        t += m.x; \n    }\n    return vec2(t, m.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    if(iFrame > 0 && texelFetch(iChannel1, ivec2(0x20, 0), 0).r < .5)\n\t\tfragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).xyzw;\n    \n    fragCoord.xy += AA * (hash23(vec3(fragCoord.xy, iFrame)) - .5);\n    \n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    uvec2 temp = uvec2(fragCoord + 1234.);\n    uint uvSeed = (temp.x + 2u*temp.y) * temp.y;\n    \n    mat3 rm = ry(.1) * rx(.5);\n\tvec3 ro = rm * vec2(0, -5).xxy;\n    vec3 rd = rm * normalize(vec3(uv, 2));\n    \n    vec3 emit = vec3(0);\n    \n    for(int i=0; i<RITER; i++)\n    {\n        vec2 t = tracer(ro, rd);\n        if(t.x > FAR)break;\n        \n\t\tvec3 sp = ro + rd*t.x;\n\t\tvec3 sn = normal(sp,NORK);\n        \n        if(t.y > 1.)\n        {\n            emit += t.y * vec3(0.3, 0.6, 1.0);\n            break;\n        }\n        \n        uint seed = uvSeed ^ ( uint(iFrame) / uint(i+1) );\n        \n        vec3 scatter = hashHs(sn, seed);\n        if(i > RITER/2 && dot(scatter.xz, -sp.xz) < .0)\n            scatter = reflect(scatter, normalize(-vec3(sp.x, 0, sp.z)));\n        \n        rd = mix(scatter, reflect(rd, sn), t.y);\n        ro = sp;\n    }\n    \n    emit = 10. * emit / (1. + box(emit));\n    emit = pow(emit, vec3(0.454545454545454545454545454545454545454545));\n    \n    fragColor += vec4(emit, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}