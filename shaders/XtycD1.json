{
    "Shader": {
        "info": {
            "date": "1535958713",
            "description": "\"Leizex\", a procedural graphics I made in 2008, as my 3rd ever SDF raymarched image (I was still investigating the technique). I copy+pasted the 10 years old code, which was C++ at the time, adjusted it a bit for GLSL and just worked!",
            "flags": 32,
            "hasliked": 0,
            "id": "XtycD1",
            "likes": 67,
            "name": "Leizex (made in 2008)",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "voronoi",
                "distancefields"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4268
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2018 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\n// This is \"Leizex\", a procedural graphics I made in 2008, which was my 3rd ever\n// raymarched SDF image (I was still investigating and learning the technique).\n//\n// I just copy pasted the code here to Shadertoy from my original C version I\n// made at the time and made it more GLSL native. It has pretty much worked out\n// of the box. And I could read it easily, I'm glad to see that after 10 years\n// my coding habits haven't changed that much really, including vaiable names!\n//\n// Link to the original piece: https://iquilezles.org/demoscene/\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = fragCoord.x/iResolution.x;\n    float f = clamp( 4.0*abs(x-0.5)-1.0, 0.0, 1.0 );\n\n    // blur edges (could be optimized by making it separable,\n    // sampling in-between texels and reading from mip 1 or 2)\n    vec3 col = vec3(0.0);\n    for( int m=-4; m<=4; m++ )\n    for( int n=-4; n<=4; n++ )\n    {\n        vec2 uv = (fragCoord + f*2.0*vec2(float(m),float(n)) )/iResolution.xy;\n        col += textureLod(iChannel0, uv, 0.0 ).xyz;\n    }\n    col /= 81.0;\n    \n    // vignette\n    col *= 1.0-0.1*f;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hash( int n )\n{\n\tn = (n << 13) ^ n;\n    n = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;\n    return float(n)/2147483647.0;\n}\n\n// value noise\nfloat noise3f( in vec3 p, in int sem )\n{\n    ivec3 i = ivec3( floor(p) );\n    vec3  f = p - vec3(i);\n\n    // quintic smoothstep\n    vec3 w = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    int n = i.x + i.y * 57 + 113*i.z + sem;\n\n\treturn 1.0 - 2.0*mix(mix(mix(hash(n+(0+57*0+113*0)),\n                                 hash(n+(1+57*0+113*0)),w.x),\n                             mix(hash(n+(0+57*1+113*0)),\n                                 hash(n+(1+57*1+113*0)),w.x),w.y),\n                         mix(mix(hash(n+(0+57*0+113*1)),\n                                 hash(n+(1+57*0+113*1)),w.x),\n                             mix(hash(n+(0+57*1+113*1)),\n                                 hash(n+(1+57*1+113*1)),w.x),w.y),w.z);\n}\n\nfloat fbm( in vec3 p )\n{\n    return 0.5000*noise3f( p*1.0, 0 ) + \n           0.2500*noise3f( p*2.0, 0 ) + \n           0.1250*noise3f( p*4.0, 0 ) +\n           0.0625*noise3f( p*8.0, 0 );\n}\n\nvec2 celular( in vec3 p )\n{\n    ivec3 q = ivec3( floor(p) );\n    vec3  f = p - vec3(q);\n\n\tvec2 dmin = vec2( 2.0 );\n\n\tfor( int k=-1; k<=1; k++ )\n\tfor( int j=-1; j<=1; j++ )\n\tfor( int i=-1; i<=1; i++ )\n\t{\n\t\tint nn = (q.x+i) + 57*(q.y+j) + 113*(q.z+k);\n        vec3 di = vec3( float(i) + hash(nn     ),\n\t\t                float(j) + hash(nn+1217),\n\t\t                float(k) + hash(nn+2513) ) - f;\n\t\tfloat d2 = dot(di,di);\n\n        if( d2<dmin.x )\n        {\n            dmin.y = dmin.x;\n            dmin.x = d2;\n        }\n        else if( d2<dmin.y )\n        {\n            dmin.y = d2;\n        }\n\t}\n    \n    return 0.25*sqrt(dmin);\n}\n\nfloat map( in vec3 pos, out float occ )\n{\n    pos.yz -= 1.0;\n    \n    vec3 dd = fract(1024.0+pos) - 0.5;\n\tfloat dis = length(dd) - 0.09;\n\n\tfloat disp = noise3f( 4.0*pos, 0 );\n\tdis += 0.8*disp;\n\tocc = clamp(0.75-disp, 0.0, 1.0);\n\n    if( dis<0.25 )\n    {\n        vec2 cel = celular( 16.0*pos );\n        float disp2 = clamp(cel.y - cel.x, 0.0, 1.0);\n        dis -= 1.0*disp2;\n        occ *= clamp(disp2*12.0,0.0,1.0);\n    }\n\n    return dis;\n}\n\n#define ZERO (min(iFrame,0))\n\nvec3 calcNormal( in vec3 pos )\n{\n    float kk;\n    float eps = 0.0002;\n#if 0    \n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy, kk ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, kk ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, kk ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, kk ) );\n\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 nor = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        nor += e*map(pos+eps*e, kk);\n    }\n    return normalize(nor);\n#endif    \n}\n\nfloat cast_ray( in vec3 ro, in vec3 rd, const float mindist, const float maxdist, out float matInfo )\n{\n    float t = mindist;\n    for( int i=0; i<256; i++ )\n    {\n        vec3 p = ro + t*rd;\n        float h = map( p, matInfo );\n        if( abs(h)<(0.005*t) || t>maxdist ) break;\n        t += h*0.1;\n    }\n    \n\treturn (t<maxdist)?t:-1.0;\n}\n\nfloat bump( in vec3 pos )\n{\n\treturn fbm( 256.0*pos );\n}\n\nvec3 addbump( in vec3 xnor, float bumpa, in vec3 pos)\n{\n    const float ke = 0.0005;\n\n\tfloat kk =        bump( pos );\n    vec3 gra = vec3(  bump( pos+vec3(ke,0.0,0.0))-kk,\n                      bump( pos+vec3(0.0,ke,0.0))-kk,\n                      bump( pos+vec3(0.0,0.0,ke))-kk );\n\n    return normalize(xnor + bumpa*gra);\n}\n\nconst vec3 lig = vec3( 0.8, 0.5, -0.1 );\n\nvec3 shade( in vec3 pos, in vec3 nor, in vec3 ro, in vec3 rd, float dis, in float occ )\n{\n    // material\n    float f = 1.0 + 0.5*fbm(96.0*pos);\n    vec3 mate = vec3(f);\n\n    // bump\n    vec3 xnor = addbump( nor, 1.0, 0.25*pos );\n\n    // lighting\n    vec3 rgb = vec3(0.0);\n    rgb += mate*vec3(0.50,0.55,0.60)*occ;\n    rgb += mate*vec3(0.6,0.5,0.3)*3.0*occ*clamp(dot( xnor, lig ), 0.0, 1.0);\n    rgb *= 0.55;\n\n    // fog extintion\n    rgb *= exp2(-dis*1.5);\n    // fog inscattering\n\trgb += vec3(0.53,0.57,0.50)*2.0*(1.0 - exp2(-0.25*dis));\n\n    //gain\n    rgb *= 2.0/(1.5+rgb);\n    \n\treturn rgb;\n}\n\nvec3 colorCorrect( in vec3 rgb, in vec2 px )\n{\n    // grade\n    rgb = clamp( (rgb-0.1)*vec3(1.5,1.7,1.5)*1.1, 0.0, 1.0 );\n\n\t// vigneting\n    float v = px.x/iResolution.x;\n\trgb *= 0.5 + 2.0*v*(1.0-v);\n    \n    return rgb;\n}\n\n// ===========================================================================\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in vec3 ru )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cu = normalize( cross(cw,ru) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid generateRay(out vec3 rayDir, out vec3 rayPos, in vec2 px )\n{\n    vec2 s = (2.0*px-iResolution.xy)/iResolution.y;\n    \n\n    // barrel distort\n\tfloat r2 = s.x*s.x*0.32 + s.y*s.y;\n\ts *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n    \n    // set camera position and orientation\n#if 0\n         rayPos = vec3( -0.1564345, 1.0938345,  0.0123116 );\n\tvec3 rayTar = vec3( -0.0408938, 0.4444526,  1.0619653 );\n\tvec3 rayUp  = vec3(  0.0,       0.9999299, -0.0118397 );\n#else\n    float time = 0.5 - 0.4*(iTime);\n\n    vec3 rayTar = vec3( 0.0, 0.5, 1.0 );\n\trayPos = rayTar - vec3(1.0,-0.75,1.0)*cos(6.2831853*time/20.0 + vec3(-1.5708,0.5,0.0));\n\trayTar += 0.055*vec3(noise3f(vec3(2.0*iTime,0.0,0.5),0),\n\t                     noise3f(vec3(2.0*iTime,0.1,0.4),7),\n\t                     noise3f(vec3(2.0*iTime,0.2,0.3),9));\n\tfloat roll = 0.1*noise3f(vec3(2.0*time,0.0,0.0),13);\n\tvec3 rayUp = vec3( 0.0, cos(roll), sin(roll) );\n#endif\n        \n    // compute camera matrix\n    mat3 mat = setCamera( rayPos, rayTar, rayUp );\n\n    // create ray direction\n    rayDir = normalize( mat * vec3( -s.x, s.y, -1.0 ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create ray\n    vec3 rd, ro; generateRay( rd, ro, fragCoord );\n\n    // ray march scene\n    vec3 col = vec3(0.0);\n    \n\tfloat matInfo;\n\tfloat t = cast_ray( ro, rd, 0.01, 15.0, matInfo );\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        col = shade( pos, nor, ro, rd, t, matInfo );\n    }\n    \n    // color grade\n\tcol = colorCorrect( col, fragCoord );\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}