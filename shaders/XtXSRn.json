{
    "Shader": {
        "info": {
            "date": "1433852493",
            "description": "An attempt at rotation that maintains the \"squircle\" (super-quadratic) distance.\nThis is close but if you know a better way (faster or more accurate or just more logical) please comment.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXSRn",
            "likes": 5,
            "name": "Squircle Rotation v1",
            "published": 3,
            "tags": [
                "rotation",
                "squircle"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 1456
        },
        "renderpass": [
            {
                "code": "//Squircle Rotation v1 by eiffie - this is my first attempt and its not quite there yet\n//This is rotation that retains the squircle length, or tries to. :)\n//If anyone knows a correct formula please leave a comment. I haven't been able\n//to find much out about these rotations other than experimenting.\n\nfloat fsgn(float a){return a<0.0?-1.0:1.0;}\nfloat spow(float a, float n){return fsgn(a)*pow(abs(a),n);}\nfloat Atan(vec2 p){return atan(p.y,p.x);}\n#define TAU 6.283185\nfloat Cos(float a, float n){//this is cos(a)^n except the power of angle a is used\n\ta=mod(a,TAU)*8.0/TAU; //to try and keep the \"arc\" lengths the same\n\tfloat sgn=1.0;\n\tfloat b=floor((a+1.0)/2.0)*2.0; //this could all just be a folding but I'm not seeing it\n\ta=mod(a,2.0);\n\tif(a>1.0){sgn=-1.0;a=2.0-a;}\n\treturn spow(cos((b+sgn*pow(a,n/2.0))*TAU/8.0),2.0/n);//you can also use a triangle wave and drop the 2's\n}\nfloat Length(vec2 p, float n){return pow(pow(abs(p.x),n)+pow(abs(p.y),n),1.0/n);}\nvec2 CosSin(float a, float n){return vec2(Cos(a,n),Cos(a-0.25*TAU,n));}\nvec2 Rotate(vec2 p, float a, float n){return Length(p,n)*CosSin(Atan(p)+a,n);}\n\nfloat DE(vec2 p){\n\tp=abs(p);\n\tfloat d1=abs(length(p)-1.0);\n\tfloat d2=abs(p.x+p.y-1.0);\n\tfloat d3=abs(Length(p,4.0)-1.0);\n\treturn min(d1,min(d2,d3));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv=1.5*(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tfloat a=iTime;//the angle\n\tfloat n=1.0;\t\t//the power\n\tfloat tim=mod(iTime,9.0); //some bs to select the power\n\tif(tim>2.0){\n\t\tn=min(tim-1.0,2.0);\n\t\tif(tim>5.0){\n\t\t\tn=min(tim-3.0,4.0);\n\t\t\tif(tim>8.0)n=max(28.0-tim*3.0,1.0);\n\t\t}\n\t}\n\tuv=Rotate(uv,a,n);\n\tfloat d=DE(uv);\n\tvec3 col=mix(vec3(0.0),texture(iChannel0,uv*0.5-0.5).rgb,smoothstep(0.0,0.02,d));\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}