{
    "Shader": {
        "info": {
            "date": "1701962322",
            "description": "Sphere Phong lighting.\nhttps://alexmalyutindev.github.io/posts/blinn-phong-lighting/",
            "flags": 0,
            "hasliked": 0,
            "id": "DtGfWR",
            "likes": 1,
            "name": "Sphere Phong 2",
            "published": 3,
            "tags": [
                "3d",
                "sphere"
            ],
            "usePreview": 0,
            "username": "alexmalyutndev",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.1415926535897932384626433832795\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nmat3 rotation3dY(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    c, 0.0, -s,\n    0.0, 1.0, 0.0,\n    s, 0.0, c\n  );\n}\n\nmat3 rotation3dX(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    1.0, 0.0, 0.0,\n    0.0, c, s,\n    0.0, -s, c\n  );\n}\n\n//=====================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.z > 0.0) ? (iMouse.xy / iResolution.xy - 0.5) * 2.0 : vec2(0.0);\n    \n    mat3 rot = rotation3dY(-m.x * M_PI) * rotation3dX(m.y * M_PI);\n    \n\tvec3 ro = rot * vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = rot * normalize( vec3(p, -2.0) );\n    \n\n    vec4 sph = vec4( 0.0, 0.0, 0.0, 1.0 );\n    \n    vec3 lig = normalize( vec3(0.5,0.5,0.5) );\n    vec3 col = vec3(0.2);\n\n    float tmin = 1e10;\n    vec3 nor;\n\n\n    float t2 = sphIntersect( ro, rd, sph );\n    if (t2 > 0.0 && t2 < tmin)\n    {\n        tmin = t2;\n        vec3 pos = ro + t2*rd;\n        nor = sphNormal( pos, sph );\n\t}\n\n    if (tmin < 1000.0)\n    {\n        vec3 pos = ro + tmin*rd;\n        \n\t\tcol = vec3(1.0);\n        col *= clamp(dot(nor, lig), 0.0, 1.0);\n    }\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}