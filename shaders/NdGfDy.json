{
    "Shader": {
        "info": {
            "date": "1658766010",
            "description": "free aa",
            "flags": 32,
            "hasliked": 0,
            "id": "NdGfDy",
            "likes": 7,
            "name": "Pastel Cake Smoothie (Spiral)",
            "published": 3,
            "tags": [
                "spiral",
                "aa",
                "pastel"
            ],
            "usePreview": 0,
            "username": "cutesthypnotist",
            "viewed": 651
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright 2021 Kit\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#define TIMESCALE 1.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec4 ui = texture(iChannel1,q);\n    vec3 col = vec3(0.);\n    float t = iTime * TIMESCALE;\n    col.gb = texture(iChannel0, fragCoord.xy / iResolution.xy).gb;\n    col.r = texture(iChannel0, fragCoord.xy / iResolution.xy \n            + step(length(texture(iChannel0, fragCoord.xy / iResolution.xy)), 0.) \n            * vec2(0.006 + 0.006 * sin(t / 3.141592), 0.)).r;\n    col = mix(col,ui.rgb, ui.a*.8);\n    \n    fragColor = vec4( col, 1. );    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//FabriceNeyret\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n\n//https://www.shadertoy.com/view/4djSRW\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\n\n// https://www.shadertoy.com/view/stK3Rm\n// The MIT License\n// Copyright 2021 Charles Lohr\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define HIGHQ\n#define BORDERIZE\n\n\nconst int shader5x7[144] = int[144](\n\t0x00000000, 0x00000000, 0x000000f6, 0x60006000, 0xfe280000, 0x0028fe28, 0x92ff9264, 0xc8c6004c, \n\t0x00c62610, 0x046a926c, 0x0000000a, 0x00000060, 0x42241800, 0x42000000, 0x00001824, 0x083e0814, \n\t0x10100014, 0x0010107c, 0x06010000, 0x10100000, 0x00101010, 0x00060600, 0x04020000, 0x00201008, \n\t0xa2928a7c, 0x4200007c, 0x000002fe, 0x928a8642, 0x82840062, 0x008cd2a2, 0xfe482818, 0xa2e40008, \n\t0x009ca2a2, 0x9292523c, 0x8e80000c, 0x00c0a090, 0x9292926c, 0x9260006c, 0x00789492, 0x006c6c00, \n\t0x6d000000, 0x0000006e, 0x82442810, 0x28280000, 0x00282828, 0x10284482, 0x8a800000, 0x00006090, \n\t0x525a423c, 0x907e0034, 0x007e9090, 0x929292fe, 0x827c006c, 0x00448282, 0x448282fe, 0x92fe0038, \n\t0x00828292, 0x809090fe, 0x827c0080, 0x005c9292, 0x101010fe, 0x828200fe, 0x008282fe, 0xfe818102, \n\t0x10fe0080, 0x00824428, 0x020202fe, 0x40fe0002, 0x00fe4020, 0x081020fe, 0x827c00fe, 0x007c8282, \n\t0x909090fe, 0x827c0060, 0x007a848a, 0x949890fe, 0x92640062, 0x004c9292, 0x80fe8080, 0x02fc0080, \n\t0x00fc0202, 0x040204f8, 0x02fc00f8, 0x00fc021c, 0x281028c6, 0x20c000c6, 0x00c0201e, 0xa2928a86, \n\t0xfe0000c2, 0x00008282, 0x08102040, 0x82000004, 0x0000fe82, 0x40804020, 0x01010020, 0x00010101, \n\t0x20400000, 0x2a040000, 0x001e2a2a, 0x222214fe, 0x221c001c, 0x00042222, 0x1422221c, 0x2a1c00fe, \n\t0x00102a2a, 0x40483e08, 0x25180020, 0x003e2525, 0x202010fe, 0x2200001e, 0x000002be, 0x00be0102, \n\t0x08fe0000, 0x00002214, 0x02fe8200, 0x203e0000, 0x001e2018, 0x2020103e, 0x221c001e, 0x001c2222, \n\t0x2424183f, 0x24180018, 0x003f1824, 0x2020103e, 0x2a120010, 0x0000242a, 0x227e2020, 0x023c0022, \n\t0x00023c02, 0x04020438, 0x023c0038, 0x003c0204, 0x14081422, 0x39000022, 0x003e0505, 0x322a2a26, \n\t0x6c100000, 0x00008282, 0x00ee0000, 0x82820000, 0x0000106c, 0x08102010, 0x00000010, 0x00000000\n );\n \nconst int ipow10[12] = int[12]( 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 2147483647, 2147483647 );\n#define calc_ipow10(x) ipow10[x]\n//#define calc_ipow10(x) int(round(pow(10.0,float(x))))\n\n#define _SPACE 0\n#define _BANG 1\n#define _A 33\n#define _B 34\n#define _C 35\n#define _D 36\n#define _E 37\n#define _F 38\n#define _G 39\n#define _H 40\n#define _I 41\n#define _J 42\n#define _K 43\n#define _L 44\n#define _M 45\n#define _N 46\n#define _O 47\n#define _P 48\n#define _Q 49\n#define _R 50\n#define _S 51\n#define _T 52\n#define _U 53\n#define _V 54\n#define _W 55\n#define _X 56\n#define _Y 57\n#define _Z 58\n\n#define _a 65\n#define _b 66\n#define _c 67\n#define _d 68\n#define _e 69\n#define _f 70\n#define _g 71\n#define _h 72\n#define _i 73\n#define _j 74\n#define _k 75\n#define _l 76\n#define _m 77\n#define _n 78\n#define _o 79\n#define _p 80\n#define _q 81\n#define _r 82\n#define _s 83\n#define _t 84\n#define _u 85\n#define _v 86\n#define _w 87\n#define _x 88\n#define _y 89\n#define _z 90\n\n\n#ifdef HIGHQ\n\n// Perform a fake \"texel\" lookup, and return all 4 cells.\nvec4 g5x7d( int ch, vec2 uv )\n{\n    ivec2 cell = ivec2(uv);\n    int x = ch * 6 + cell.x;\n    ivec2 xres = ivec2( x, x-1 );\n    // Fixup gross edges.\n    if( cell.x >= 6 ) xres.x = 0; //Special shader5x7 #0 is all zeroes.\n    ivec2 cv = ivec2( shader5x7[xres.x/4], shader5x7[xres.y/4] );\n    ivec2 movfs = (xres%4)*8;\n    cv = (cv>>movfs)&0xff;\n    ivec4 value  = ivec4(\n        cv>>(cell.yy-1), \n        cv>>(cell.yy+0))&1;\n\n    return vec4(value.yxwz);\n}\n\n\nvec2 fast_inverse_smoothstep( vec2 x )\n{\n    // Uncomment for blobbier letters\n    //return x;\n    return 0.5 - sin(asin(1.0-2.0*x)/3.0); //Inigo Quilez trick.\n}\n\nvec2 roundstep( vec2 x )\n{\n\tvec2 coss = cos( x*3.14159 + 3.14159 );\n\tvec2 sins = sign( coss );\n\tcoss = abs( coss );\n\tcoss = pow( coss, vec2( 1.0 ) );\n\tcoss *= sins;\n\treturn coss / 2.0 + 0.5;\n}\n\n\nvec3 char5x7( int ch, vec2 uv )\n{\n#ifdef BORDERIZE\n    uv *= vec2( 7./6., 9./8. );\n    uv += vec2( 0.0, 0.0);\n    \n#else\n    uv += vec2( 0., -.25);\n#endif\n    vec4 d = g5x7d( ch, uv );\n\n    vec2 lp;\n    lp = fast_inverse_smoothstep(fract( uv ));\n    \n    float top =  mix( d.x, d.y, lp.x );\n    float bottom = mix( d.z, d.w, lp.x );\n    float v = ( mix( top, bottom, lp.y ) );\n\n    // This makes it be a harder edge (But still kinda soft)\n    v = (v-.15)*( 25.+ 1./length( dFdx(uv) + dFdy(uv) ));\n    \n    v = clamp( v, 0., 1. );\n    \n    vec3 col = mix( vec3( 0, 0, 0 )*.5, vec3( 0., uv.y+3., 10.0 )/10.0, float(v) );\n    //vec3 col = mix( vec3( 0, 0, 0 )*.5, vec3( 10., 10., 10.0 )/10.0, float(v) );\n    return col;\n\n}\n\n#else\n\n\nvec3 char5x7( int ch, vec2 uv )\n{\n#ifdef BORDERIZE\n    uv *= vec2( 7./6., 9./8. );\n    if( uv.x < 0. || uv.y < 0. || uv.x > 6. || uv.y > 8. ) return vec3(1.);\n#endif\n    ivec2 cell = ivec2(uv);\n    int x = ch * 6 + int(cell.x);\n    int cv = shader5x7[x/4];\n    int movfs = (x%4)*8;\n    int value  = ((cv>>(movfs+cell.y))&1);\n    int value2 = ((cv>>(movfs+int(uv.y+.5)))&1);\n    if( uv.y >= 7.0 ) value2 = 0;\n    vec3 col = mix( vec3( value2, 0, value2 )*.5, vec3( cell.y+3, cell.y+3, 10.0 )/10.0, float(value) );\n    \n    return col;\n}\n\n#endif\n\n\nvec3 print5x7int( int num, vec2 uv, int places, int leadzero )\n{\n    vec2 cuv = uv*vec2( places, 1. );\n    vec2 luv = cuv*vec2( 6, 8. );\n    ivec2 iuv = ivec2( luv );\n    int posi = int(iuv.x)/6;\n    int marknegat = -1;\n    if( num < 0 )\n    {\n        marknegat = places-int(log(-float(num))/log(10.0))-2;\n    }\n    num = abs(num);\n    int nn = (num/calc_ipow10(places-posi-1));\n    if( posi == marknegat )\n        nn = -3;\n    else if( nn <= 0 && posi != places-1)\n        nn = leadzero;\n    else\n        nn %= 10;\n    int ch = nn+48-32;\n    return char5x7( ch, fract(cuv)*vec2(6.,8.) );\n}\n\n\n// Zero Leading Integer Print\nvec3 print5x7intzl( int num, vec2 uv, int places )\n{\n    vec2 cuv = uv*vec2( places, 1. );\n    vec2 luv = cuv*vec2( 6, 8. );\n    ivec2 iuv = ivec2( luv );\n    int posi = int(iuv.x)/6;\n    int nn = (num/calc_ipow10(places-posi-1));\n    nn %= 10;\n    int ch = nn+48-32;\n    return char5x7( ch, fract(cuv)*vec2(6.,8.) );\n}\n\nvec3 print5x7float( float num, vec2 uv, int wholecount, int decimalcount )\n{\n    vec2 cuv = uv*vec2( wholecount+decimalcount+1, 1. );\n    vec2 luv = cuv*vec2( 6, 8. );\n    ivec2 iuv = ivec2( luv );\n    int posi = int(iuv.x)/6;\n    int nn = -2;\n    \n    int marknegat = -1;\n    if( num < 0.0 )\n    {\n        marknegat = wholecount-2-int(log(-num)/log(10.0));\n    }\n    \n    num = abs(num);\n    num +=  pow(.1f,float(decimalcount))*.499;\n    int nv = int( num );\n    \n    if( posi < wholecount )\n    {\n        int wholediff = posi - wholecount+1;\n        float v = (pow( 10.0 , float(wholediff)));\n        int ni = int( float(nv) * v);\n        if( posi == marknegat ) nn = -3;\n        else if( ni <= 0 && wholediff != 0 ) nn = -16; //Blank out.\n        else         nn = ni%10;\n    }\n    else if( posi > wholecount )\n    {\n        num -= float(nv);\n        nn = int( num * pow( 10.0 , float(posi-wholecount)));\n        nn %= 10;\n    }\n    int ch = nn+48-32;\n\n    return char5x7( ch, fract(cuv)*vec2( 6, 8. ));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define AA 24.\n#define SWIRLY 0.75\n#define SCALE 4.\n#define THIC 0.25\n#define TIMESCALE 6.0\n\n\n\nvec3 hue(float x) {\n    x = 1.5 + 1.5 * cos(sin(x / 6.283185) * 6.283185);\n    return clamp(abs(vec3(x) - vec3(1., 2., 3.)), 0., 1.);\n}\n\n//https://www.shadertoy.com/view/sljfW1\nvec3 color(float r, float aa) {\n    float mix0 = smoothstep(0., aa, r);\n    float mix1 = smoothstep(0., aa, r - 0.25);\n    float mix2 = smoothstep(0., aa, r - 0.5);\n    float mix3 = smoothstep(0., aa, r - 0.75);\n    \n    vec3 color0 = HEX(0x009BE8);\n    vec3 color1 = HEX(0xEB0072);\n    vec3 color2 = HEX(0xfff100);\n    vec3 color3 = hue(r);\n    \n    return (\n        color0 * (mix0 - mix1) +\n        color1 * (mix1 - mix2) +\n        color2 * (mix2 - mix3) +\n        color3 * (mix3 - mix0 + 1.)\n    );\n}\n\n\nvoid mainImage( out vec4 O, in vec2 FC )\n{\n    vec2 R = iResolution.xy;\n    vec2 U = ( FC - 0.5 * R ) / R.y;   \n    vec2 m = ( iMouse.xy - 0.5 * R) * 2.0 / R.y;\n    float t = mod(-iTime, 6.283285 / 2.) * TIMESCALE;\n    \n    // Which side of screen?\n    // Now with janky mouse control.\n    float side = iMouse.z > 0. ? ( FC.x - (0.5 + 0.3 * m.x) * R.x) : ( FC.x - (0.5 + sin(iTime)*0.20) * R.x );\n    //side = 5.;\n    \n    float dist = log2( length(U) ) * SCALE;\n    float angle = atan(U.x,U.y);\n    vec2 derv = vec2( dFdx(dist), dFdy(dist) );\n    float width = ( side > 0. ) \n        ? length(derv) \n        : fwidth(dist);\n        \n    // Apply anti-aliasing.\n    float aa = min( AA, AA * width );\n    float swirls1 = smoothstep(\n        -aa, \n        aa * width, \n        THIC - 0.5 + 0.5 * sin(  dist  * SWIRLY + angle + t)\n    );\n    float swirls2 = smoothstep(\n        -aa, \n        aa * width, \n        THIC - 0.5 + 0.5 * cos(  dist  * SWIRLY + angle + t)\n    );    \n\n    vec2 s = vec2(\n        swirls1, \n        swirls2 \n    );\n    // Screen divider\n    float divider = min( side * side / 8., 1.);\n        \n    O = vec4(divider * \n        clamp(normalize(mix(\n            //hue( s.x + t * 0.1 ) , \n            //hue( s.y + t * 0.1 ) , \n            color( s.x , length(derv)) * 2.0, \n            color( s.y , length(derv))  * 2.0 ,             \n            0.5\n        ))*1.5,0.0,1.0), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    // Normalized pixel coordinates (from 0 to 1)\n\n    \n    vec2 uvtrue = fragCoord.xy / iResolution.xy;\n    vec2 uvorig = fragCoord.xy / iResolution.yy;\n    vec3 col = vec3( 0.0 );\n\n    \n    if(  uvtrue.y < .05 && uvtrue.x < 0.5 )\n    {\n        ivec4 lines[6] = ivec4[6]( \n            ivec4( 0, _P, _a, _s ),\n            ivec4( _t,  _e, _l, 0 ),\n            ivec4(  _C, _a, _k,  _e ),\n            ivec4( 0, _S, _m, _o ),\n            ivec4( _o, _t, _h, _i ), \n            ivec4( _e, 0, 0, 0 )\n            );\n            \n        ivec2 cell = ivec2(floor(uvorig*vec2(160.)/vec2(6.,8.)));\n        vec2 px = mod(uvorig*160.,vec2(6.,8.));\n        col += char5x7( lines[cell.x/4][cell.x%4], px );\n    }\n\n    fragColor = vec4( col , step(1., length(col)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}