{
    "Shader": {
        "info": {
            "date": "1560477805",
            "description": "Quadtone gradient test",
            "flags": 0,
            "hasliked": 0,
            "id": "ttBGzc",
            "likes": 2,
            "name": "four color gradient",
            "published": 3,
            "tags": [
                "gradient",
                "four",
                "quadtone"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 629
        },
        "renderpass": [
            {
                "code": "vec3 quadGradient(float x, vec3 c0, vec3 c1, vec3 c2, vec3 c3, float k0, float k1, float k2, float k3){\n    \n    float g0 = smoothstep(k0, k1, x);\n    float g1 = smoothstep(k1, k2, x);\n    float g2 = smoothstep(k2, k3, x);\n    \n    vec3 o0 = mix(c0, c1, g0);\n    vec3 o1 = mix(c1, c2, g1);\n    vec3 o2 = mix(c2, c3, g2);\n    \n    vec3 fc = vec3(0.0);\n    \n    float s0 = step(x, k1);\n    float s1 = step(x, k2);\n    \n    fc = o0 * s0;\n    fc += o1 * (s1 - s0);\n    fc += o2 * (1.0-s1);\n    \n    const float gamma = 2.2;\n    float exponent = mix(1.0, 1.0/gamma, x);\n\n    return pow(fc, vec3(exponent));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 r = vec3(1.0,0.0,0.0);\n    vec3 g = vec3(0.0,1.0,1.0);\n    vec3 b = vec3(0.0,1.0,0.0);\n    vec3 k = vec3(1.0,1.0,0.0);\n    \n    vec3 quadTone = quadGradient(uv.x, r, g, b, k, 0.1, 1.0/3.0+0.1, 1.0/1.5-0.1, 0.9);\n    fragColor = vec4(quadTone,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}