{
    "Shader": {
        "info": {
            "date": "1633893524",
            "description": "Implement a seven-segment-ish digital display for a hexagonal grid where each character is bit-encoded.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdSDS",
            "likes": 4,
            "name": "hex segment digital display",
            "published": 3,
            "tags": [
                "grid",
                "text",
                "hexagon",
                "segment",
                "encoding",
                "bits",
                "digitaldisplay"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "#define N   9.0\n#define ON  0.75\n#define OFF 0.25\n#define COS30 cos(radians(30.0))\n#define WIDTH 0.125\n\nfloat hex_codes[49] = float[] (\n    16127.0, 12735.0, 09087.0, 10681.0, 16313.0, 11263.0, 19199.0, 14719.0, 16063.0, 14527.0,\n    12289.0, 16145.0, 14015.0, 08511.0, 15549.0, 14521.0, 14777.0, 03839.0, 16071.0, 18617.0,\n    13287.0, 10687.0, 14649.0, 16191.0, 14617.0, 23709.0, 14007.0, 16263.0, 10227.0, 16255.0,\n    15873.0, 12283.0, 16363.0, 16015.0, 15343.0, 15359.0, 15939.0, 16383.0, 16079.0, 08481.0,\n    18569.0, 16425.0, 11777.0, 20219.0, 08193.0, 16391.0, 17927.0, 16767.0, 16193.0\n);\n\nfloat cross2(vec2 p, vec2 q)\n{\n    return p.x * q.y - p.y * q.x;\n}\n\nbool intri(vec2 uv, vec2 v1, vec2 v2, vec2 v3)\n{\n    // https://mathworld.wolfram.com/TriangleInterior.html\n    // http://www.sunshine2k.de/coding/java/pointInTriangle/pointInTriangle.html\n    vec2 w1 = v2 - v1;\n    vec2 w2 = v3 - v1;\n    float d = determinant(mat2(w1, w2));\n    // check for d â‰ˆ 0.0 ?\n    float s = determinant(mat2(uv - v1, w2)) / d;\n    float t = determinant(mat2(w1, uv - v2)) / d;\n    return s >= 0.0 && t >= 0.0 && (s + t) <= 1.0;\n}\n\nbool inreg(vec2 uv, vec2 c, float n, float R, float theta)\n{\n    // break-up regular polygon into triangles\n    float dt = radians(360.0 / n);\n    for (float i = 0.0, j = 1.0; i < n; i++, j++)\n    {\n        vec2 a = R * vec2(cos(dt * i + theta), sin(dt * i + theta)) + c;\n        vec2 b = R * vec2(cos(dt * j + theta), sin(dt * j + theta)) + c;\n        if (intri(uv, a, b, c))\n            return true;\n    }\n    return false;\n}\n\nvec2 uv_to_hex(vec2 uv, float R) {\n    // get central hex coordinate\n    float r = R * COS30;\n    float theta = radians(30.0);\n    vec2 hvec = vec2(2.0 * r, 0.0);\n    vec2 kvec = vec2(r, 1.5 * R);\n    mat2 b = mat2(hvec, kvec);\n    vec2 cell = b * round(inverse(b) * uv);\n    bool inhex = inreg(uv, cell, 6.0, R, radians(theta));\n    // adjust hex coordinate due to overlap\n    if (!inhex)\n        if (cross2(vec2(r, 0.5 * R), cell - uv) < 0.)\n            cell += (uv.x > cell.x) ? kvec : -hvec;\n        else\n            cell += (uv.x > cell.x) ? hvec : -kvec;\n    return cell;\n}\n\nvec3 hex_display(vec2 uv, vec2 pos, float chr, float R, float B, vec3 col) {\n    // uv  the uv\n    // pos the centreal display position\n    // chr the character code to display\n    // R   the hexagon circumradius\n    // B   the border width\n    // col the default color\n    //\n    //     0    5    8  -\n    //    1         9    |\n    //   2    6    A      > display bit mapping\n    //  3         B      |\n    // 4    7    C      -\n    //\n    // A a 16127          n 14521        0 16255  _ 08481\n    // b   12735          o 14777        1 15873  - 18569\n    // C c 09087 10681  P   03839        2 12283  : 16425\n    //   d 16313          q 16071        3 16363  ! 11777\n    // E   11263          r 18617        4 16015  ? 20219\n    // F   19199        S   13287        5 15343  . 08193\n    // G g 14719          t 10687        6 15359  ' 16391\n    // H h 16063 14527  U u 16191 14649  7 15939  \" 17927\n    //   i 12289        V   14617        8 16383  [ 16767\n    // J   16145          w 23709        9 16079  ] 16193\n    // K   14015        X   14007\n    // L   8511           y 16263\n    // M   15549        Z   10227\n    \n    float r = R * COS30;\n    float theta = radians(30.0);\n    float n = chr;\n    // set display according to bit index\n    for (int i = 0; i < 13; i++) {\n        float q = floor(n / 2.0);\n        if (mod(q, 2.0) == 1.0) {\n            float ir = 0.0;\n            float ic = 0.0;\n            switch (i) {\n                case  0:\n                case  5:\n                case  8:\n                    ir = +2.0;\n                    break;\n                case  1:\n                case  9:\n                    ir = +1.0;\n                    break;\n                case  3:\n                case 11:\n                    ir = -1.0;;\n                    break;\n                case  4:\n                case  7:\n                case 12:\n                    ir = -2.0;\n                    break;\n            }\n            /**/ if (i <= 4) ic = -1.0;\n            else if (i >= 8) ic = +1.0;\n            float dx = ic * 2.0 * r + ir * r;\n            float dy = ir * 1.5 * R;\n            if (inreg(uv, pos + vec2(dx, dy), 6.0, R - B, theta)) {\n                col = vec3(ON);\n                break;\n            }\n        }\n        n = q;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n    \n    float R = 1.0 / N;\n    float r = R * COS30;\n    float B = R * WIDTH;\n\n    vec2 hex = uv_to_hex(vec2(iResolution.x / iResolution.y / 2.0, 0.5), R);\n\n    vec3 col = (\n        inreg(uv, uv_to_hex(uv, R), 6.0, R - B, radians(30.0)) ? \n        vec3(OFF) : \n        0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4))\n    );\n    float code = hex_codes[int(mod(float(iFrame / 30), float(hex_codes.length())))];\n    col = hex_display(uv, hex, code, R, B, col);\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}