{
    "Shader": {
        "info": {
            "date": "1678866840",
            "description": "4th degree polynomial p gets similar treatment as the x^y - y^x, i.e. sketch points where p(x) = p(y)\n\nthe line x = y is the trivial solution, others are where the function p is non-injective (gets the same value p(x1) = p(x2) in many different x1 != x2)",
            "flags": 0,
            "hasliked": 0,
            "id": "ddGGz3",
            "likes": 1,
            "name": "p(x) - p(y)",
            "published": 3,
            "tags": [
                "math"
            ],
            "usePreview": 0,
            "username": "sig",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "float f(float x) {\n    return step(1., x) / abs(2. - x) + (1. - step(1., x)) * x;\n}\n\nfloat infTo1(float x) {\n    return 1. - exp(-x);\n}\n\nfloat p(float x, float a1, float a2, float a3) {\n    float x2 = x  * x;\n    float x3 = x2 * x;\n    float x4 = x3 * x;\n    return x4 + a3 * x3 + a2 * x2 + a1 * x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //float x = f(uv.x * 4.); float y = f(uv.y * 4.);\n    float x = uv.x * 5. - 3.; float y = uv.y * 5. - 3.;\n  \n    // coefficients a of the polynomial p(x, a) are chosen in a \"balanced\" way:\n    // sum of coeffs = sum(a)   = c\n    // sqsum of coef = sum(a*a) = d\n    // => the coefficients are found in an intersection of sphere and plane\n    // => the coefficients are on a circle with normal n, radius r\n    // fi is the angle on that circle to choose the final point a\n    float c = .5;\n    float d = 2.;\n    float fi= iTime;\n    float r = sqrt(d*d - c*c);\n    vec3  n = c / sqrt(3.) * vec3(1., 1., 1.);\n    vec3 r1 = r / sqrt(2.) * vec3(1.,-1., 0.);\n    vec3 r2 = r / sqrt(6.) * vec3(1., 1.,-2.);\n    vec3  a = n + sin(fi) * r1 + cos(fi) * r2;\n    \n    //float z = pow(x, y) - pow(y, x);\n    //float z = sin(x * 10.) + sin(y * 10.);\n    float z = p(x, a.x, a.y, a.z) - p(y, a.x, a.y, a.z);\n\n    fragColor = vec4(\n        //infTo1(z * z),\n        infTo1(-min(z, 0.)),\n        smoothstep(0.01, 0., z*z),\n        infTo1(max(z, 0.)),\n        1.\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}