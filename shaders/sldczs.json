{
    "Shader": {
        "info": {
            "date": "1660387586",
            "description": "I read this article https://calebkruse.com/10-projects/seeing-blue/ and wanted to replicate it's effect\nPress and hold 1, 2 or 3 keys to blur R, G, B channels respectively and composite that into the main image\nAlso pressing Q, W, E shows the blu",
            "flags": 16,
            "hasliked": 0,
            "id": "sldczs",
            "likes": 1,
            "name": "Seeing blue color in focus",
            "published": 3,
            "tags": [
                "perception"
            ],
            "usePreview": 0,
            "username": "NoxWings",
            "viewed": 283
        },
        "renderpass": [
            {
                "code": "// I read this article https://calebkruse.com/10-projects/seeing-blue/ and wanted to replicate it's effect\n// Press and hold 1, 2 or 3 keys to blur R, G, B channels respectively and composite that into the main image\n// Also pressing Q, W, E shows the blurred image for that channel\n\n// Run this line on the js console to load the original article image:\n// gShaderToy.mEffect.NewTexture(gShaderToy.mActiveDoc, 0, { mSrc: \"https://calebkruse.com/10-projects/seeing-blue/original.jpg\", mType:\"texture\", mID:\"4dXGRn\", mSampler: { filter:\"linear\", wrap:\"clamp\", vflip:\"true\", srgb:'true', internal:'byte' }});\n\n#define BLUR_DIRECTIONS 16.0\n#define BLUR_QUALITY 8.0\n#define BLUR_SIZE 0.03\n\n#define BLUR_CHANNEL 0\n#define OUTPUT 0\n\nconst int KEY_1 = 0x31;\nconst int KEY_2 = 0x32;\nconst int KEY_3 = 0x33;\nconst int KEY_Q = 0x51;\nconst int KEY_W = 0x57;\nconst int KEY_E = 0x45;\n\nbool isKeyPressed(int keyCode) {\n    return texelFetch(iChannel1, ivec2(keyCode, 0), 0).x > 0.5;\n}\n\nconst float PI = 3.14159;\nconst float TAU = PI*2.0;\n\nvec4 sampleBlur(\n    sampler2D tex, \n    vec2 res, \n    vec2 pos, \n    float directions, \n    float quality, \n    float size\n) {\n    vec2 radius = size / res.xy;\n    vec2 uv = pos / res.xy;\n    \n    vec4 color = texture(tex, uv);\n    \n    float directionStep = TAU/directions;\n    float qualityStep = 1.0/quality;\n    \n    float importance = 1.0;\n    \n    for(float arc = 0.0; arc < TAU; arc += directionStep)\n    for(float q = 1.0; q > 0.0; q -= qualityStep) {\n        vec2 offset = vec2(cos(arc),sin(arc)) * q * radius * res.y;\n        vec2 cuv = uv + offset;\n        \n        // Avoid sampling outside the edges\n        if (\n            cuv.x < 0.0 ||\n            cuv.y < 0.0 ||\n            cuv.x > res.x ||\n            cuv.y > res.y\n        ) {\n            continue;\n        }\n        \n        float sampleImportance = 1.0 + (1.0 - q); // linear fallof\n        importance += sampleImportance;\n        color += texture(tex, cuv) * sampleImportance;\n    }\n    \n    return color / importance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 regular = texture(iChannel0, uv);\n    vec4 blurred = sampleBlur(\n        iChannel0, \n        iResolution.xy,\n        fragCoord.xy, \n        BLUR_DIRECTIONS,\n        BLUR_QUALITY, \n        BLUR_SIZE\n    );\n    \n    vec4 color = regular;\n    \n    if (isKeyPressed(KEY_1)) {\n        color.r = blurred.r;\n    }\n    if (isKeyPressed(KEY_2)) {\n        color.g = blurred.g;\n    }\n    if (isKeyPressed(KEY_3)) {\n        color.b = blurred.b;\n    }\n    if (isKeyPressed(KEY_Q)) {\n        color = vec4(blurred.r);\n    }\n    if (isKeyPressed(KEY_W)) {\n        color = vec4(blurred.g);\n    }\n    if (isKeyPressed(KEY_E)) {\n        color = vec4(blurred.b);\n    }\n    \n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}