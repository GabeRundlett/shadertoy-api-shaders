{
    "Shader": {
        "info": {
            "date": "1655847163",
            "description": "License CC0: Mandelbrot variation\nTinkered with julia mapping. Not amazing but different enough to share.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdVyWt",
            "likes": 18,
            "name": "Mandelbrot variation",
            "published": 3,
            "tags": [
                "mandelbrotjulia"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "// License CC0: Mandelbrot variation\n//  Tinkered with julia mapping. Not amazing but different enough to share.\n#define RESOLUTION  iResolution\n#define TIME        iTime\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat cell_df(vec2 np, vec2 mp, vec2 off) {\n  const vec2 n0 = normalize(vec2(1.0, 1.0));\n  const vec2 n1 = normalize(vec2(-1.0, 1.0));\n\n  np += off;\n  mp -= off;\n  \n  float hh = hash(np);\n  vec2 n = hh > 0.5 ? n0 : n1;\n  vec2 t = vec2(n.y, -n.x);\n\n\n  vec2  p0 = mp;  \n  p0 = abs(p0);\n  p0 -= 0.5;\n  float d0 = length(p0)-0.0;\n\n  vec2  p1 = mp;\n  float d1 = dot(n, p1);\n  float px = dot(t, p1);\n  d1 = abs(px) > sqrt(0.5) ? d0 : abs(d1); \n\n  float d = d0;\n  d = min(d, d1);\n  \n  return d;\n}\n\nfloat truchet_df(vec2 p) {\n  vec2 np = floor(p+0.5);\n  vec2 mp = fract(p+0.5) - 0.5;\n  float d = 1E6;\n  const float off = 1.0;\n  for (float x=-off;x<=off;++x) {\n    for (float y=-off;y<=off;++y) {\n      vec2 o = vec2(x,y);\n      d = min(d,cell_df(np, mp, o));\n    }\n  }\n  return d;\n}\n\nvoid julia_map(inout vec2 p, vec2 c) {\n  for (int i = 0; i < 89; ++i) {\n    vec2 p2 = p*p;\n    p = vec2(p2.x-p2.y, 2.0*p.x*p.y);\n    p += c;\n  }\n}\n\nvec2 transform(vec2 p) {\n  p *= 0.0125;\n  p.x -= 0.5;\n  p += vec2(0.59, 0.62);\n  julia_map(p, p);\n  p *= 30.0;\n  p += 0.2*TIME;\n  return p;\n}\n\nvec3 effect(vec3 col, vec2 p_, vec2 np_) {\n  vec2 p  = transform(p_);\n  vec2 np = transform(np_);\n  float aa = distance(p, np)*sqrt(0.5);\n\n  float d = truchet_df(p)-aa;\n  \n  col = mix(col, vec3(0.1), smoothstep(aa, -aa, d));\n\n  return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec2 np = p+2.0/RESOLUTION.y;\n  \n  vec3 col = vec3(1.0);\n  col = effect(col, p, np);\n  \n  col = sqrt(col);\n  \n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}