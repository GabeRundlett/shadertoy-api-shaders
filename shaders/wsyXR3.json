{
    "Shader": {
        "info": {
            "date": "1574575439",
            "description": "domain alteration to create blocks from otherwise smooth terrain. The ray march position gets discretized to create this effect. This is not the ideal way of doing it - but was playing with this idea to make it faster than the traditional approach.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyXR3",
            "likes": 2,
            "name": "Terrain Blocks",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "athlete",
            "viewed": 365
        },
        "renderpass": [
            {
                "code": "#define BLOCKSIZE 2.\nfloat cosNoise(in vec2 pos)\n{\n\treturn 0.5* sin(pos.x) + sin(pos.y);\n}\n\nconst mat2 m2 = mat2(0.8, -0.6,\n                     0.6, 0.8); //rotation matrix\n\nvoid discretizeDomain(inout vec3 pos)\n{\n\t//here we manipulate the current position to align with a grid in 3D\n    pos = floor(pos)/BLOCKSIZE + smoothstep(.4, .6, fract(pos))/BLOCKSIZE;\n}\n\nfloat map(in vec3 pos)\n{\n    vec3 startPos = pos;\n    discretizeDomain(pos); //<- here's the trick!\n    \n    //actual distance function\n    vec2 q = pos.xz * 0.5;\n    float h = 2.5*cosNoise(q);\n\tpos.y -= h;\n    \n    return pos.y /2.5;\n}\n\n//calc gradient by looking at the local neighborhood\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 nor;\n    \n    vec2 e = vec2(0.01, 0.0);\n    \n    nor.x = map(pos + e.xyy) - map(pos - e.xyy);\n    nor.y = map(pos + e.yxy) - map(pos - e.yxy);\n    nor.z = map(pos + e.yyx) - map(pos - e.yyx);\n    \n    return normalize(nor);\n}\n\nfloat calcShadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 10.0;\n\tfor(int i=0; i<64; i++)\n    {\n    \tvec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        res = min(res, h/t);\n        if(res< .1)\n            break;\n        \n        t += h;\n    }\n    \n    return res;\n}\n\nfloat castRay(in vec3 ro, in vec3 rd, float tmax, inout bool edge)\n{\n    //only used for edge detection\n    float lastDistEval = 1e10;\n    float dist = 0.0;\n    \n    float t = 0.1;//progress along the ray, start with tmin\n    //int maxMarches = 8000;\n    for(int i=0; i<256; i++)\n    {\n    \tvec3 pos = ro + rd*t;\n        \n        float h = map(pos); //returns positive or negative value\n        \n        if(h<.0005 || t>tmax) //second term represents far dist clipping plane\n            break;\n        \n        t += h;//0.1;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0 + 2.0*p;\n    q.x *= 1.777; //make square pixels\n    \n    //ray\n    vec3 ro = vec3(0.0, 10.0, -iTime); //camera origin\n    vec3 rd = normalize( vec3(q, -1.0) ); //camera view direction\n    \n    //init color.. 'sky'\n    vec3 col = vec3(0.7, 0.8, 1.0);\n    col *= 1.0 - 0.9*rd.y;\n    \n    //marching\n    float tmax = 75.0;\n    bool edge = false;\n   \tfloat t = castRay(ro, rd, tmax, edge);\n    \n    //define light\n    vec3 light = normalize(vec3(1.0, 1.5, 2.5)); //light direction\n    \n    if(t<tmax)\n    {\n        vec3 pos = ro + rd*t;\n        vec3 nor = calcNormal(pos);\n        \n        //ray march soft shadows\n        float sha = calcShadow(pos, light);\n        \n        //lighting:\n        float dif = clamp( dot( nor, light ), 0.0, 1.0 );\n        vec3 lig = vec3(.1, 1., .4)* dif * 1.5 * sha;\n        //adding light\n        \tlig += vec3(0.2, 0.2, 0.2)*nor.y*1.5;\n        \n        vec3 material = vec3(0.3, 0.3, 0.3);\n\t\t\n        col = lig * material;\n    }\n    \n    //moving color space in preparation for lighting .. gamma\n    col = sqrt(col);\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}