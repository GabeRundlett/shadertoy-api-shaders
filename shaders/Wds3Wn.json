{
    "Shader": {
        "info": {
            "date": "1570826644",
            "description": "Some neon lights in a haze. Using distance fields for the lights. Use mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wds3Wn",
            "likes": 33,
            "name": "Gas Station",
            "published": 3,
            "tags": [
                "raymarch",
                "fog",
                "lights"
            ],
            "usePreview": 0,
            "username": "ztri",
            "viewed": 842
        },
        "renderpass": [
            {
                "code": "//\n// Raymarching lights within a fog experimental thingy\n// Trying to use distance fields for lights.\n// \n\n\nvec3 saucerpos = vec3(0.0);\nvec3 carpos = vec3(0.0);\n\n\nfloat terrain(vec3 pos){\n\n    float s = 99999.9;\n    \n    float n = noise(pos.zxy*7.0);\n    s = min(s,pos.y + max(0.0,(sin(n)*0.1))); // wet ground\n\n   \n    s = min(s,300.0-length(pos)); // sky\n    s = min(s,sdRoundBox(pos+vec3(10,8.5+noise(pos.zxy*10.6)*0.007,0.0),vec3(3.0,3.0,40.0),6.0)); // road\n    s = min(s,sdRoundBox(opRep(pos,vec3(0.0,0.0,30.0))+vec3(15.0,0.0,0.0),vec3(0.01,9.0,0.01),0.1)); // poles\n    s = min(s,sdRoundBox(opRep(pos,vec3(0.0,0.0,1.5))+vec3(16.0,-1.0,0.0),vec3(0.05,1.0,0.1),0.01)); // fence\n    s = min(s,max(sdEllipsoid(opRep(pos+vec3(0.0,0.0,0.0),vec3(6.0,0.0,6.0)),vec3(2.0,10.0,2.1)), 40.0 - length(pos*vec3(1.0,1.0,0.2)))); // trees\n   \n      \n\n    s = min(s,sdRoundBox(pos+vec3(-10.0,1.0,0.0),vec3(15.,0.7,15.0),0.5)); // floor\n   \n    vec3 sym = pos;\n    sym.z = abs(sym.z);\n    s = min(s,sdRoundBox(sym+vec3(-20.0,-2.0,-5.0),vec3(3.,3.0,3.0),0.01)-abs(cos(pos.y*10.0))*0.01); // house\n    float c = min(s,sdRoundBox(sym+vec3(-19.0,-3.3,-5.0),vec3(4.1,2.0,2.1),0.02)); // window\n    s = max(-c,min(s,sdRoundBox(sym+vec3(-20.0,-3.3,-5.0),vec3(3.1,2.3,2.5),0.02))); // window\n    s = min(s,sdRoundBox(sym+vec3(-18.0,-5.3,-4.0),vec3(7.,0.5,4.6),0.04)); // roof\n    s = min(s,sdRoundBox(sym+vec3(-13.0,-0.5,-4.5),vec3(.3,1.9,0.3),0.3)); // pump\n    \n    \n    // sign\n    s = min(s,sdRoundBox(pos+vec3(-12.0,-9.0,0.0),vec3(2.2,2.1,0.1),0.1));\n    s = min(s,sdRoundBox(pos+vec3(-12.0,-5.7,0.0),vec3(1.0,1.4,0.2),0.01));    \n\n    \n    // saucer\n\tvec3 fs = pos+saucerpos;\n    s = min(s,sdEllipsoid(fs,vec3(3.0,1.0,3.0))); \n    s = min(s,sdEllipsoid(fs+vec3(0.0,-0.5,0.0),vec3(1.5,1.5,1.5))); \n  \n    \n\t// car\n    vec3 cp = pos+carpos+vec3(0.8,1.0,0.0);\n    s = min(s,sdRoundBox(cp ,vec3(1.0,1.0,1.7),0.3)+min(0.0,sin(cp.z-2.5)*0.3)); // car\n\t\n    return s;\n}\n\n\n\n\nvec4 lights(vec3 pos){\n    \n    \n    float s = 99999.9;\n    float p = 99999.9;\n    float lw = 0.0;\n    vec3 l = vec3(0.0);\n     \n   \n    // street lights \n    p = length(opRep(pos,vec3(0.0,0.0,30.0))+vec3(12.0,-10.0,0.0))-0.2;\n    l += vec3(2.1) / (abs(p)+1.0);\n    lw += p;\n    s = min(s,p); \n\n    \n    if(mod(iTime,5.0)<3.0){\n        // neon lamp\n        \n        vec3 lpos = pos+vec3(-25.1,-5.5,0.0);\n        vec3 mirror = vec3(7.1,0.2,1000.0);\n        lpos = abs(lpos+mirror)-mirror;\n        \n        p = sdRoundBox(lpos,vec3(0.01,0.01,8.0),0.05);\n        l += vec3(0.0,2.0,0.0)  / (abs(p)+1.0);      \n        lw += p;\n        s = min(s,p); \n\t}\n    \n    \n   \n    // back lamp\n    vec3 sym = pos;\n    sym.z = abs(sym.z);\n    p = sdRoundBox(sym+vec3(-20.0,-4.4,-8.5),vec3(1.5,0.05,0.1),0.01);\n    l += vec3(0.1,0.1,1.0)  / (abs(p)+1.0);      \n    lw += p;\n    s = min(s,p); \n\n    \n    // shop lamp\n    vec3 sym2 = pos;\n    sym2.z = abs(sym2.z);\n    p = sdRoundBox(sym2+vec3(-21.0,-3.0,-5.0),vec3(0.2,0.5,1.0),0.1);\n    l += vec3(0.5,0.5,0.0)  / (abs(p)+1.0);      \n    lw += p;\n    s = min(s,p); \n\n    \n    \n    \n  \t// roof sign\n    if(mod(iTime,20.0)>10.0){\n       p = sdRoundBox(pos+vec3(-12.0,-9.5,0.0),vec3(2.2,1.2,0.1),0.1);\n        l += vec3(5.0,0.0,0.5)  / (abs(p)+1.0);  \n        lw += p;\n        s = min(s,p); \n    }\n    \n    \n    // saucer\n    vec3 fs = pos+saucerpos;\n    p = sdEllipsoid(fs+vec3(0.0,-0.5,0.0),vec3(1.5,1.5,1.5));\n    l +=  vec3(3.0,3.0,5.0) / (abs(p)+1.0)*max(0.0,sin(iTime));    \n    lw += p;\n    s = min(s,p); \n\n    if(mod(iTime,0.1)<0.05 && mod(iTime,5.0)< 1.0 && iTime > 80.0){    \n        vec3 sym = pos;\n        p = sdRoundBox(fs+vec3(-0.0,20.0,0.0),vec3(0.1,20.00,0.1),0.1);\n        p = min(p,length(vec3(fs.x,pos.y,fs.z))-1.0);\n        l += vec3(3.0,3.0,0.0)  / (abs(p)+1.0);      \n        lw += p;\n        s = min(s,p); \n    }\n    \n           \n    // pump screens\n    vec3 pump = pos;\n    pump.z = abs(pump.z);\n    p = sdRoundBox(pump+vec3(-12.5,-1.8,-4.5),vec3(0.2,0.3,0.2),0.01);\n    l += vec3(0.0,0.0,1.0) / (abs(p)+1.0);;\n    lw += p;\n    s = min(s,p); \n\n       \n  \n    // car\n\tvec3 car = pos+carpos;\n    car.x = abs(car.x+0.8)-0.8; \n   \t\n    // car lamps front\n    p = length(car+vec3(0.0,0.0,2.0))-0.4;    \n\tl += vec3(5.1,5.0,5.1) / (abs(p)+1.0);   \n    lw += p;\n    s = min(s,p); \n\t\n    // car lamps back\n    p = length(car+vec3(0.0,0.0,-2.0))-0.2;\n\tl += vec3(5.1,0.0,0.1) / (abs(p)+1.0);;    \n    lw += p;\n    s = min(s,p); \n\n    \n    return vec4(l,s);\n}\n\n\n\nvoid march( vec3 ro, vec3 rd, int raymarchStepsMax,  float stepSizeMax, out vec3 march_normal,  out vec3 march_pos, out vec3 march_color ){\n    \n  vec3 pos = ro;\n    float ts = 99999.9;\n    float l = 99999.9;\n    vec4 ls = vec4(0.0);\n    vec3 lc = vec3(0.0);\n    float stepMax = stepSizeMax; \n\tfloat t = 9999.9;\n    float dist = 0.0;\n    // geometry\n  \n    for (int i=0;i < raymarchStepsMax;i++){\n        // geometry\n        float ts = terrain(pos);\n        vec4 ls = lights(pos);\n        t = min(ts,ls.w); \n        \n        // step\n        float cstep = min(stepMax+dist*0.01,t);\n        \n        // haze\n        float h = pow(noise(pos*vec3(0.2,0.3,0.1)+vec3(0.0,iTime*-0.2,iTime*0.5)),4.0)*10.0;\n        l = min(l,ls.w); \n        lc += clamp(cstep/ls.w,0.0,1000.0) * ls.rgb / (1.0+h) ;\n           \n        // move  \n        pos += rd*cstep;\n        dist += cstep;\n        if (abs(t) < 0.001 || dist > 150.0) break;\n        \n    }\n\t\n   \n    \n\tfloat raylength = distance(ro,pos);\n\tvec4 posl = lights(pos);\n    vec3 emission = (posl.rgb * smoothstep(0.001,0.0,posl.w)) * smoothstep(200.0,0.1,raylength); //emissive pieces;\n    \n    vec3 haze = lc/float(raymarchStepsMax); \n    float hazer = smoothstep(0.0,50.0,raylength); // hazyness;\n        \n    vec3 ns = vec3(0.0,0.0,0.01);\n    vec3 norm = normalize(vec3(terrain(pos+ns.zxx),terrain(pos+ns.xzx),terrain(pos+ns.xxz))-terrain(pos)); \n    \n    \n    float ao = smoothstep(-2.0,2.0,terrain(pos+norm*5.0))*smoothstep(-1.0,1.0,terrain(pos+norm*0.5));\n\t\n    // lights\n    vec3 lightfield = max(posl.rgb-lights(pos-(norm*0.05)).rgb,vec3(0.0));\n    vec3 lightmix = lightfield*150.0*ao;\n    \n       \n    float rough = noise(pos.xyz*vec3(3.0,3.0,1.0))*0.02;\n    float road = smoothstep(sdRoundBox(pos+vec3(10,8.5,0.0),vec3(3.0,3.0,40.0),6.0),-0.8,0.2);\n\tvec3 col = mix(vec3(rough),vec3(0.1,0.1,0.05)+rough*1.0,road);\n    \n    col = col * lightmix + emission; \n    \n    \n    col = mix(col,haze+emission,hazer);\n    \n    march_normal = norm;\n    march_pos = pos;\n    march_color = col.rgb;\n       \n\n}\n\n\n\n\nvoid render( vec3 ro, vec3 rd, out vec3 color )\n{ \n    \n    \n    vec3 n1 = vec3(0.0);\n\tvec3 p1 = vec3(0.0);\n\tvec3 col = vec3(0.0);\n    march(ro, rd, 80, 1.0, n1,p1,col);\n    vec3 texpos = p1*0.1;\n    float texup = max(0.0,n1.y);\n    float n = noise(texpos.xyz*100.0)*0.3+noise(texpos.xzz*5.0);\n       \n    \n    vec3 n2 = vec3(0.0);\n\tvec3 p2 = vec3(0.0);\n    vec3 col2 = vec3(0.0);\n    march( p1 +(n1*0.01), reflect(rd,n1), 30, 100.0 ,n2,p2,col2);  \n\t\n    \n    vec3 col3 = col2*smoothstep(-0.2,1.3,n)*texup;\n    float ref = smoothstep(0.3,0.55,noise(p1.xyz*vec3(0.5,0.001,0.3)));\n    \n    col += col3*0.03*ref;\n    color = col+(ref*0.001*step(p1.y,0.5));\n     \n    \n}\n\n\n\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 10.0 + iTime;\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // camera\t\n    float dist = 25.0 + (smoothstep(10.0,0.0,iTime)*30.0);\n    float height = 3.0 + (smoothstep(10.0,0.0,iTime)*30.0);\n    \n    float rotime = time + (smoothstep(0.0,15.0,iTime)*30.0);\n    vec3 ro = vec3( 10.0 +dist*cos(0.1*rotime + 6.0*mo.x), height + dist*mo.y, 0.5 + dist*sin(0.1*rotime + 6.0*mo.x) );\n    vec3 ta = vec3( 1.5, 2.0, -4.0 );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    vec3 rd = ca * normalize( vec3(p.xy,1.8));\n\n    float t = time;\n    saucerpos = vec3(sin(t*0.3)*20.0+30.0,sin(t*0.73)*8.0-20.0,sin(t*0.51)*16.0-15.0)-(smoothstep(40.0,30.0,t)*100.0);\n    carpos = vec3(10.0,-1.5,mod(time*30.0,800.0)-400.0);\n        \n    // render\t\n    vec3 col = vec3(0.0);\n    render( ro, rd, col );\t\n\n    col = pow(col,vec3(0.44));\n    col = max(vec3(0.0),col - pow(dot(p,p)*0.1,2.0));\n    \n    fragColor = vec4( col,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n    \n\n// A list of useful distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n    \n}\n\nfloat sdRoundBox( in vec3 p, in vec3 b, in float r ) \n{\n    vec3 q = abs(p) - b;\n    return min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0)) - r;\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 1\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n#endif    \n#if 0    \n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\n\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = 1.73205;//sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x += 2.0 - 2.0*clamp( (p.x+2.0)/2.0, 0.0, 1.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d1 = q.z-h.y;\n    h.x *= 0.866025;\n    float d2 = sdEquilateralTriangle(p.xy/h.x)*h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }\n{\n    // Tetrahedron = Octahedron - Cube\n    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );\n \n    float d = 0.0;\n    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));\n    float octa = d - h.z;\n    return max(-box,octa); // Subtraction\n }\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\n\n\n//------------------------------------------------------------------   \n// 3D noise function (IQ)\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    vec3 s=vec3(7,157,113);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\n\n//------------------------------------------------------------------   \n \nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}