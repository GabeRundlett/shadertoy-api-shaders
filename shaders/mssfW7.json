{
    "Shader": {
        "info": {
            "date": "1712720059",
            "description": "starting from scratch\nhttps://www.youtube.com/watch?v=sl9x19EnKng",
            "flags": 0,
            "hasliked": 0,
            "id": "mssfW7",
            "likes": 3,
            "name": "doublethink",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "prishainabox",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "const int AA = 2; // sqrt(number of samples per pixel) add later\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nfloat sdBox(in vec3 pt, in vec3 r) {\n    return length(max(abs(pt) - r, 0.0));\n}\n\nfloat sdSphere(vec3 pt, float r) {\n    return length(pt) - r;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n// return vec4( signed distance, pt )\nvec4 sdf(in vec3 pt) {\n\n    float time = iTime;\n    float d = 100.0;\n\n    // center\n    d = sdSphere(pt - vec3(cos(time), sin(time), 0.0) * 3.0, 0.2);\n    \n    // teeth 1\n    {   \n        vec3 q = pt;\n\n        float sectorSize = 6.283185/32.0;\n        float sectorId = round(atan(pt.z, pt.x)/sectorSize);\n        float an = sectorId * sectorSize;\n        \n        // rotate q to x axis\n        q.xz = mat2(cos(an), -sin(an), sin(an), cos(an)) * q.xz;\n        \n        float t = sdBox(q - vec3(1.0, 0, 0), vec3(0.04, 0.05, 0.1)) - 0.05;\n        q.xy = mat2(cos(0.5), -sin(0.5), sin(0.5), cos(0.5)) * q.xy;\n        t = min(t, sdBox(q - vec3(0.9, -0.4, 0), vec3(0.5, 0.01, 0.01)) - 0.01);\n        \n        \n        d = min(d, t);\n        \n    }\n    \n    //experiment\n    {\n        vec3 q = pt - vec3(0.0, -0.2, 0.0);\n        float ex = length(abs(vec2(pt.x, pt.x*pt.x*pt.x*2.0) - q.xy)) - 0.03;\n        ex = max(ex, abs(q.x) - 0.5);\n        ex = max(ex, abs(q.z) - 0.5);\n        d = min(ex, d);\n    }\n\n    return vec4(d, pt);\n\n}\n\nvec3 calcNormal(in vec3 pt) {\n\n    vec2 h = vec2(0.001, 0.0);\n\n    return normalize(vec3(\n        sdf(pt + h.xyy).x - sdf(pt - h.xyy).x,\n        sdf(pt + h.yxy).x - sdf(pt - h.yxy).x,\n        sdf(pt + h.yyx).x - sdf(pt - h.yyx).x\n    ));\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nvec4 raymarch(in vec3 ro, in vec3 rd) {\n\n    vec4 res = vec4(-1);\n    \n    float td = 0.001;\n    float tmax = 5.0;\n    for (int i = 0; i < 128 && td < tmax; i++) {\n        vec4 h = sdf(ro + td*rd);\n        if (abs(h.x) < 0.001) {\n            res = vec4(td, h.yzw);\n            break;\n        }\n        td += h.x;\n    }\n    \n    return res;\n\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\nvec3 render(in vec2 uv, in vec3 ro, in vec3 rd) {\n\n    vec3 clr = vec3(0);\n    \n    vec4 intersection = raymarch(ro, rd);\n    float dist = intersection.x;\n    \n    if (dist > 0.0) {\n        clr = 0.5 + 0.5*vec3(calcNormal(ro + rd*dist));\n    }\n   \n    \n    clr.r = smoothstep(0.0, 1.0, clr.r);\n    clr.g = smoothstep(0.0, 1.0, clr.g);\n    clr.b = smoothstep(0.0, 1.0, clr.b);\n    \n    return clr;\n    \n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nvec3 setCamera(in vec2 uv, in vec3 ro, in vec3 target, in float zoom) {\n    vec3 f = normalize(target - ro);\n    vec3 r = normalize(cross(f, vec3(0, 1, 0)));\n    vec3 u = normalize(cross(r, f));\n    return normalize(uv.x * r + uv.y * u + zoom * f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Normalized pixel coordinates\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    float time = iTime * 0.5;\n    \n    vec3 ro = vec3(sin(time) * 1.8, 1.0, cos(time) * 1.8);\n    vec3 target = vec3(0);\n    vec3 rd = setCamera(uv, ro, target, 1.2);\n    \n    vec3 clr = render(uv, ro, rd);\n\n    // Output to screen\n    fragColor = vec4(clr, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}