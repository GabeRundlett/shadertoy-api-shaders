{
    "Shader": {
        "info": {
            "date": "1513278491",
            "description": "refracted sphere video filter",
            "flags": 0,
            "hasliked": 0,
            "id": "ltfBWj",
            "likes": 2,
            "name": "refraction_filter",
            "published": 3,
            "tags": [
                "filter"
            ],
            "usePreview": 0,
            "username": "xxyxxy",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "// screenspace refractive sphere\n// screenspace refractive sphere\n// screenspace refractive sphere\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // convert screenspace (origin at top left, [0, 1]) to myspace (origin at middle, [-1, 1])\n    vec2 fixed_up_uv = 2.0 * (uv - vec2(0.5));\n\n    // fake camera, funny behavior when too close to (0, 0, 0)\n    vec3 camera_position = vec3(0.0, 0.0, 1.0);\n \n    // sphere mask\n    vec2 center = vec2(0.5);\n    float distance_to_center = distance(center, uv);\n    if (distance_to_center < 0.3) {\n        \n        // I is the direction FROM the point on the sphere TO the camera...\n        vec3 I = normalize(camera_position - vec3(fixed_up_uv, 0.0));\n        \n        // N is the direction FROM the point on the sphere OUTWARD...\n        vec3 N = normalize(vec3(fixed_up_uv, 0.12));\n        \n        // eta is the ration of IOR of the two materials, aka bullshit...\n        float eta = 0.99;\n        \n        vec3 R = refract(I, N, eta);\n        \n        // refract() returns a unit vector pointing anywhere in space, usually used to sample cubemap\n        // we are only sampling a 2D texture so convert [-1, 1] to [0, 1] and ignore z-coordinate\n        vec3 distorted_uv = R / 2.0 + 0.5;\n        \n        fragColor = texture(iChannel0, distorted_uv.st);\n        \n        // DEBUG VISUALIZATION\n        // fragColor = vec4(I, 0.0);\n        // fragColor = vec4(N, 0.0);\n        // fragColor = vec4(R, 0.0);\n    } else {\n        fragColor = texture(iChannel0, uv);\n        fragColor.rgb *= 1.0;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}