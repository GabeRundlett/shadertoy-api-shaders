{
    "Shader": {
        "info": {
            "date": "1667848800",
            "description": "An endless series of blue and yellow fractal stars.",
            "flags": 8,
            "hasliked": 0,
            "id": "DsS3zV",
            "likes": 7,
            "name": "Blue and yellow stars (3D)",
            "published": 3,
            "tags": [
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define t iTime*4.\n#define r iResolution\n#define iterations 250 //number of raymarching steps\n#define EPSILON .001\n#define MAX_DIST 40.0\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n\n\n//Based on https://www.shadertoy.com/view/3tXyRN\n\nvec3 stars(vec3 uv)\n{\n    vec3 col = vec3(0.);\n    for(int k = 0; k < 6; k++){ \n        vec3 offset =\n            //(vec3(uv.x-.45,uv.y+.45,uv.z-uv.x))\n            vec3(uv.y+uv.x+.5,uv.z+uv.y+.5,uv.x+uv.z)\n            //vec3(uv.y-uv.x+1.5,uv.z-uv.y+1.5,uv.x+uv.z)\n\n            //vec3(uv.y-uv.x+.5,uv.z-uv.y+.5,uv.x+uv.z)\n            //vec3(uv.y+uv.x-.25,uv.z+uv.y+.25,uv.x+uv.z)\n        ;\n        uv =\n            min(offset+uv,abs(fract(offset)-.5))\n        ;\n        \n        //uv += abs(fract(uv*4.+iTime)-.5)/64.;\n\n        col = vec3(col.yz,uv.x-uv.y);\n    }\n    \n    return\n        col\n        //col - uv;\n    ;\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n{\n    o = vec4(0.0);\n    vec3 d=vec3(U/r.xy-.5,.5),p0=vec3(0,6,t),p=p0;\n    if (length(iMouse.xy) > 40.0) {\n        d.yz *= rot(-3.14*0.5+iMouse.y/iResolution.y*3.14);\n        d.xz *= rot(-3.14+iMouse.x/iResolution.x*3.14*2.0);\n    }\n    float l1;\n    vec3 col = vec3(0.);\n    for(int i=0;i<iterations;i++)\n    {\n        col = stars(p/16.);\n        float sd1 = col.z-.14;\n        if(-sd1 < EPSILON*(length(l1)+1.0) || l1 > MAX_DIST){ break; }\n        p+=d*(-sd1);\n        l1 = distance(p,p0);\n    }\n    o+=(vec4(col/2.,0)+l1/100.0)*3.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\nvec2 mainSound(int samp, float t){\n  t += 1.;\n  float s1 =\n      8.,\n  m2 = floor(t/s1)+floor(t),\n  m4 = floor(t*s1)+floor(t),\n  m3 =\n      fmod(mod(m4,m2),s1)\n  ;\n  t /=\n      1.+fmod(m2,2.)\n  ;\n      \n      \n  float a=sqrt((1.-sqrt(fract(t))))*.2,\n\n  nb = pow(2.,(m3)/5.+7.5);\n\n  return abs(.5-vec2(fract(t*nb*.998)*a\n   ,fract(t*nb)*a));\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}