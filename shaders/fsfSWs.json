{
    "Shader": {
        "info": {
            "date": "1619420479",
            "description": "Distance to quadratic bezier by mapping it to a parabola. Using @iq's parabola distance function. Clamping bounds seems to be trickier since the parameter space is different.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsfSWs",
            "likes": 5,
            "name": "Quadratic Bezier to Parabola",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "mapping",
                "quadratic",
                "parabola"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "float sdBezier(in vec2 pos, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 v = a - 2.0 * b + c, ab = a - b; float d = v.y / v.x;\n    float infl = (d * ab.y + ab.x) / (v.x + d * v.y);\n\n    float inflInv = 1.0 - infl;\n    vec2 offs = a * inflInv * inflInv + b * 2.0 * inflInv * infl + c * infl * infl;\n\n    vec2 right = normalize(a * (infl - 1.0) + (1.0 - 2.0 * infl) * b + c * infl);\n    mat2 basis = mat2(right, -right.y, right.x);\n\n    a -= offs, c -= offs;\n    vec2 bt = vec2(dot(a, basis[0]), dot(c, basis[0])); // How to apply these clamping bounds?\n    float k = dot(a, basis[1]) / (bt.x * bt.x), ik = 1.0 / k;\n\n    pos = (pos - offs) * basis;\n    pos.x = abs(pos.x);\n\n    float p = ik * (pos.y - 0.5 * ik) / 3.0;\n    float q = 0.25 * ik * ik * pos.x;\n    float h = q * q - p * p * p;\n    float r = sqrt(abs(h));\n\n    float x = h > 0.0 ? pow(q + r,1.0 / 3.0) - pow(abs(q - r), 1.0 / 3.0) * sign(r - q) : 2.0 * cos(atan(r, q) / 3.0) * sqrt(p);\n    return length(pos - vec2(x, k * x * x));\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    // Control points\n    vec2 a = vec2(-0.5, 0.0);\n    vec2 b = iMouse.z > 0.0 ? mouse : vec2(0.0, 0.4);\n    vec2 c = vec2(0.3, -0.4);\n\n    // Distance\n    float d = sdBezier(uv, a, b, c) * 2.0;\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\n    // Lines between control points\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, a, b) - 0.002));\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, sdLine(uv, b, c) - 0.002));\n\n    // Bezier curve\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, abs(d * 0.5) - 0.002));\n\n    // Control points\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - a) - 0.015));\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, length(uv - b) - 0.015));\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(uv - c) - 0.015));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}