{
    "Shader": {
        "info": {
            "date": "1633614034",
            "description": "falling blocks",
            "flags": 32,
            "hasliked": 0,
            "id": "sdcSRf",
            "likes": 1,
            "name": "falling blocks",
            "published": 3,
            "tags": [
                "buffer"
            ],
            "usePreview": 0,
            "username": "elamolo",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "// Conway's Game of Life\n// https://iquilezles.org/articles/gameoflife\n//\n// State based simulation. Buffer A contains the simulated world,\n// and it reads and writes to itself to perform the simulation.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nint Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2( fragCoord );\n\n    int k1 = Cell(px+ivec2(0,1));\n    int k2 = Cell(px+ivec2(0,-1)); \n\n    int e = Cell(px);\n\n\n    float f = ((k2 == 0&&e==1||k1==0&&e==0||px.y == 449) && (px.y!=0))?0.0:1.0;\n    \n\n    \n\n    if( iFrame==0 ) f = step(0.7, hash1(fragCoord.x*13.0+hash1(fragCoord.y*71.1)));\n    \n    float fx = fragCoord.x-iMouse.x;\n    float fy = fragCoord.y-iMouse.y;\n \n            \n    if( iMouse.z>0.5){  \n    f = f + (1.0-step(100.0, (fx*fx+fy*fy)))*\n    step(0.99, hash1(iTime*fragCoord.x*13.0+hash1(iTime*fragCoord.y*71.1)));\n    }\n\t\n\tfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}