{
    "Shader": {
        "info": {
            "date": "1700251191",
            "description": "population automata",
            "flags": 48,
            "hasliked": 0,
            "id": "ctyyWw",
            "likes": 1,
            "name": "population automata",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 131
        },
        "renderpass": [
            {
                "code": "#define GRAYSCALE 0\n\n#if GRAYSCALE\n#define color_method vec3\n#else\n#define color_method h2rgb\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = texelFetch(AUTOMATA, ivec2(fragCoord), 0).x;\n    fragColor = vec4(color_method(h), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int x_offsets[8] = int[8](-1, 0, 1,  -1, 1,  -1,  0,  1);\nint y_offsets[8] = int[8]( 1, 1, 1,   0, 0,  -1, -1, -1);\n\nivec2 wrap(vec2 coord) {\n    vec2 new = coord;\n    if (coord.x >= iResolution.x) new.x = coord.x - iResolution.x;\n    if (coord.x < 0.0) new.x = iResolution.x + coord.x;\n    if (coord.y >= iResolution.y) new.y = coord.y - iResolution.y;\n    if (coord.y < 0.0) new.y = iResolution.y + coord.y;\n    return ivec2(new);\n}\n\nvec4 get_cell(vec2 c) {\n    return texelFetch(AUTOMATA, wrap(c), 0);\n}\n\nbool key_pressed(int k) {\n    return texelFetch(KEYBOARD, ivec2(k, 0), 0).x == 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    init_random(fragCoord, iResolution, iFrame);\n    vec2 p = fragCoord / iResolution.xy;\n    vec4 cell_old = get_cell(fragCoord);\n    if (cell_old.a == 0.0 || key_pressed(82)) {\n        float r = random();\n        fragColor = vec4(r, 0.0, 0.0, 1.0);\n    } else {\n        int i = int(random() * 8.0);\n        vec2 offset = vec2(x_offsets[i], y_offsets[i]);\n        float color_new = get_cell(fragCoord+offset).x;\n        fragColor = vec4(color_new, 0.0, 0.0, 1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define RESOLUTION iResolution\n\n#define AUTOMATA iChannel0\n#define KEYBOARD iChannel1\n\n#define COLOR_R vec3(1.0, 0.0, 0.0)\n#define COLOR_G vec3(0.0, 1.0, 0.0)\n#define COLOR_B vec3(0.0, 0.0, 1.0)\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 h2rgb(float h){\n    return hsv2rgb(vec3(h, 1.0, 1.0));\n}\n\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid init_random(vec2 fragCoord, vec3 iResolution, int iFrame){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\nvec3 random_choice(float r, vec3 a, vec3 b) {\n    return (r <= 0.5) ? a : b;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}