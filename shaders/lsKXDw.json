{
    "Shader": {
        "info": {
            "date": "1464834874",
            "description": "Sphere Light",
            "flags": 0,
            "hasliked": 0,
            "id": "lsKXDw",
            "likes": 0,
            "name": "hjyRaytracingTest01",
            "published": 3,
            "tags": [
                "hjy"
            ],
            "usePreview": 0,
            "username": "hongjeongyun",
            "viewed": 559
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//uv í”½ì…€ ì¢Œí‘œê°’\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y; // ã…‡ã…‡ ì¢…íš¡ë¹„\n    uv *= 2.0; // í¬ê¸°ë¥¼ ë‘ë°°ë¡œ ìž¡ìŒ x y ì—  2ê³±\n    uv -= vec2(1.0,1.0); // ê°ê° 1ì„ ë¹¼ì¤Œ\n    uv.x *= aspectRatio; // ì›ì ì„ ìž¡ì•˜ìŠ´\n    \n    \n    // ray ì™€ ì¤‘ì‹¬ì„ - í™” í•˜ë©´ ê¸°ì¤€ë°©í–¥ì„ ë°”ê¿ˆ\n    // ë¼ì´íŠ¸ ê´‘ì› ìœ„ì¹˜\n    vec3 light = vec3(-1.0,1.0,-2.0);\n    \n    \n    vec3 sphere = vec3(0.0,0.0 + 1.0 * sin(iTime * 4.0),-5.0);\n    \n    //vec3 sphere = vec3(0.0,0.0,-5.0);  // êµ¬ì˜ ì¤‘ì‹¬ì„ ìž¡ìŒ ì›ì (ì¹´ë©”ë¼)ë¶€í„°z ê±°ë¦¬ë§Œí¼ ë–¨ì–´ì§„ê³³\n    \n    float R = 1.0; // ã…‡ã…‡ ë°˜ì§€ë¦„\n    \n    vec3 ray = vec3(uv,-2.0); // z  ê±°ë¦¬ ì•žì— ê°€ìƒì˜ ìŠ¤í¬ë¦°ì´ ìžˆìŠ´\n    //dot ë‚´ì í•¨ìˆ˜\n    \n    float A = dot(ray,ray);\n    float B = -2.0 * dot(ray, sphere);\n    float C = dot(sphere, sphere) - R * R;\n    //íŒë³„ì‹ D\n    float D = B * B - 4.0*A*C;\n    \n    //ë°”ë‹¥ìš©\n    \n    vec3 n = vec3(0.0, 1.0, 0.0); // í‰ë©´ì˜ ìˆ˜ì§ë°©í–¥ì„ ë‚˜íƒ€ë‚´ëŠ” ë²¡í„° (ë…¸ë§)\n    //í‰ë©´ì´ ì›ì ìœ¼ë¡œë¶€í„° ë–¨ì–´ì§„ ë¶€í˜¸ìžˆëŠ” ê±°ë¦¬\n    float Dist = -1.0;\n    \n    \n    \n    vec3 color;\n    \n    if(D > 0.0) // ì¶©ëŒì´ ë˜ì—ˆë‹¤ë©´\n    {\n        color = vec3(1.0,1.0,0.0);\n        // -B  ëŠ” ì–‘ìˆ˜ê°€ ë˜ê³  ì§€ê¸ˆì€ ì´ê°’ì´ ìž‘ì•„ì ¸ì•¼ í•˜ë¯€ë¡œ - í•´ì¤Œ\n        float t = (-B - sqrt(D) ) / (2.0 * A); //1\n        \n        vec3 pos = t * ray; // P\n        //Normal Vec\n        vec3 N = normalize(pos - sphere);\n        //color = pos;\n        //ë¼ì´íŠ¸ ë²¡í„°\n        vec3 L = normalize(light - pos);\n        float diffuse = max( dot(N,L), 0.0); // ìŒìˆ˜ ë¬´ì‹œ // max ìµœëŒ€ê°’\n        //color = N;\n        color *= diffuse;\n    }\n    else\n    {\n        //ë°”ë‹¥ë§Œë“¤ê¸° \n        float d = dot(ray, n); // ë‚´ì ê°’\n        if(d < 0.0)\n        {\n           color = vec3(0.0, 1.0,0.0);\n           \n           // 2 ì´ë¶€ë¶„ì´ ë°–ìœ¼ë¡œ ë‚˜ì˜¤ê³  1 ê³¼ ë¹„êµë¥¼ í•˜ë©´ ì œëŒ€ë¡œ ë°”ë‹¥ì— íŒŒë¬»íž˜\n           float t = Dist / d;\n           //êµì  pos \n           vec3 pos = t * ray;\n           //ë°”ë‹¥ ì¡°ëª…\n           //ë°”ë‹¥ì— ëŒ€í•œ ë¼ì´íŠ¸ ë²¡í„° ìƒˆë¡œêµ¬í•¨\n           vec3 L = normalize(light - pos);\n            \n           float diffuse = max( dot(L,n), 0.0);\n           color *= diffuse;\n        }\n        else\n        {\n            color = vec3(0.5,0.5,1.0);\n        }\n    }\n    \n    fragColor = vec4(color,1.0);\n    \n    //fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}