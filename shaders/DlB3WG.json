{
    "Shader": {
        "info": {
            "date": "1673809487",
            "description": "CC0: Mind flowers\nSaw some twitter art that inspired me to do weird colorful stuff\nTurn on, tune in, drop out!\nAnd full screen!\n\n",
            "flags": 64,
            "hasliked": 0,
            "id": "DlB3WG",
            "likes": 96,
            "name": "Mind flowers",
            "published": 3,
            "tags": [
                "colorful"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 1947
        },
        "renderpass": [
            {
                "code": "// CC0: Mind flowers\n//  Saw some twitter art that inspired me to do weird colorful stuff\n//  Scry's twitter post: https://twitter.com/Scrygl/status/1614578715123683333\n//  Colorful circles from Xor's: https://www.shadertoy.com/view/msjXRK\n//  Turn on, tune in, drop out!\n//  And full screen!\n#define RESOLUTION  iResolution\n#define TIME        iTime\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n#define BPM         (157.0/4.0)\n#define PCOS(a)     0.5*(cos(a)+1.0)\n\nconst float planeDist = 1.0-0.80;\nconst int   furthest  = 16;\nconst int   fadeFrom  = max(furthest-4, 0);\nconst float fadeDist  = planeDist*float(furthest - fadeFrom);\n\nconst float overSample  = 4.0;\nconst float ringDistance= 0.075*overSample/4.0;\nconst float noOfRings   = 20.0*4.0/overSample;\nconst float glowFactor  = 0.05;\n\n\n// License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.15*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\nvec3 doffset(float z) {\n  float eps = 0.05;\n  return 0.5*(offset(z + eps) - offset(z - eps))/(2.0*eps);\n}\n\nvec3 ddoffset(float z) {\n  float eps = 0.05;\n  return 0.5*(doffset(z + eps) - doffset(z - eps))/(2.0*eps);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  return vec3(0.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan_approx(p.y, p.x));\n}\n\nvec3 glow(vec2 pp, float h) {\n  float hh = fract(h*8677.0);\n  float b = TAU*h+0.5*TIME*(hh > 0.5 ? 1.0 : -1.0);\n  float a = pp.y+b;\n  float d = max(abs(pp.x)-0.001, 0.00125);\n  return \n    (   smoothstep(0.667*ringDistance, 0.2*ringDistance, d)\n      * smoothstep(0.1, 1.0, cos(a))\n      * glowFactor\n      * ringDistance\n      / d\n    )\n    * (cos(a+b+vec3(0,1,2))+vec3(1.0))\n    ;\n}\n\nvec3 glowRings(vec2 p, float hh) {\n  vec2 pp = toPolar(p);\n\n//  pp.y += TAU*hh;\n  vec3 col = vec3(0.0);\n  float h = 1.0;\n  const float nr = 1.0/overSample;\n\n  for (float i = 0.0; i < overSample; ++i) {\n    vec2 ipp = pp;\n    ipp.x -= ringDistance*(nr*i);\n    float rn = mod1(ipp.x, ringDistance); \n    h = hash(rn+123.0*i);\n    col += glow(ipp, h)*step(rn, noOfRings);\n  }\n  \n  col += (0.01*vec3(1.0, 0.25, 0.0))/length(p);\n\n  return col;\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  float h = hash(n+123.4);\n\n  vec3 hn;\n  vec2 p = (pp-off*vec3(1.0, 1.0, 0.0)).xy;\n  float l = length(p);\n  float fade = smoothstep(0.1, 0.15, l);\n  if (fade < 0.1) return vec4(0.0);\n  vec4 col = vec4(0.0);\n  \n  col.xyz = glowRings(p*mix(0.5, 4.0, h), h);\n  float i = max(max(col.x, col.y), col.z);\n\n  col.w = (tanh_approx(0.5+max((i), 0.0))*fade);\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  const float rdd_per   = 10.0;\n  float rdd =  (1.75+0.75*pow(lp,1.5)*tanh_approx(lp+0.9*PCOS(rdd_per*p.x)*PCOS(rdd_per*p.y)));\n//  float rdd = 2.0;\n  \n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n\n  float maxpd = 0.0;\n\n  // Steps from nearest to furthest plane and accumulates the color \n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0 && acol.w < cutOff) {\n      vec3 pp = ro + rd*pd;\n      maxpd = pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(planeDist*float(furthest), planeDist*float(fadeFrom), nz);\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.w *= fadeOut*fadeIn;\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      acol.w = acol.w > cutOff ? 1.0 : acol.w;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n// To debug cutouts due to transparency  \n//  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm  = planeDist*TIME*BPM/60.0;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = cross(ww, uu);\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  \n  // Random color tweaks\n  col -= 0.075*vec3(2.0, 3.0, 1.0);\n  col *= sqrt(2.0);\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 31975,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ultimatespinach-music/mind-flowers-2"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}