{
    "Shader": {
        "info": {
            "date": "1540261940",
            "description": "Never really tried a tunnel before but I want to learn more about it. Anyways, I came up with this. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml3fR2",
            "likes": 10,
            "name": "Corny tunnel",
            "published": 3,
            "tags": [
                "3d",
                "tunnel",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 627
        },
        "renderpass": [
            {
                "code": "#define FAR 80.0\n#define DISTANCE_BIAS 0.75\n\n\nconst float pi = 3.14159265359;\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat opU(float d1, float d2){return min(d1, d2);}\n\n\nfloat map(vec3 rp)\n{\n \n   float res;\n   \n   // messed around till it looked like a tunnel\n   rp.z += iTime;\n   float c = sin(rp.z*1.5 + rp.y*0.4 + iTime )*0.5 ;\n   rp.xy *= rot(sin(c*1.0));\n   \n   rp.x += c;\n   \n   // simple tunnel distance function\n   res =  3.0-max(rp.x, -rp.y) ;\n   res = opU(res, 3.0 - max(-rp.x, rp.y));\n    \n   return res;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0.0035, -0.0035); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\nvec3 color(vec3 ro, vec3 rd, vec3 norm, float md, float t)\n{\n    // Lighting\n    vec3 lp = ro + vec3(-1.0, 2.5, -5.0)*10.0; \n\tvec3 ld = normalize(lp - (ro + rd*t));\n    vec3 p = (ro+rd)*t;\n    \n    vec3 tex = texture(iChannel0, norm.xy*0.2).xyz;\n    \n    // Snowy stuff\n    float avg = (tex.r + tex.b + tex.g) / 3.0;\n    //float d = smoothstep(0.4,0.6, avg); // smoother looking but I liked the rough one\n   float d = step(0.45, avg);\n    \n    tex += d;\n    \n    // Diffuse\n    float diff = max(dot(norm, ld), 0.0);\n    \n    vec3 sceneCol;\n    \n    // Get final color\n    sceneCol = (tex*(diff + 0.15));\n    \n    // fog\n    sceneCol =  mix( sceneCol, vec3(0.0,0.0,0.0), 1.0 - exp( -0.005*t*t*t ) );\n    \n    return sceneCol;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n   \n    // Ray origin (camera)\n     vec3 ro = vec3(0.0, 0.0, 0.0); \n    \n    // Ray direction\n    vec3 rd = normalize(vec3(uv,1.0));\n    \n    float t = 0.0; \n    float d; \n    \n    float minDist = 999.0; \n    \n    bool hit = false;\n    \n    for (int i = 0; i < 64; i++) // raymarch\n    {\n        d = map(ro + rd*t);\n        \n        minDist = min(minDist, d); \n        \n        if(abs(d)<0.0001) \n        {\n            minDist = abs(d);\n            hit = true;\n            break;  \n        }\n        if(t>FAR) \n        {\n            minDist = min(minDist, d);\n            t = FAR;\n            hit = false;\n            break;\n        }\n        \n        t += d * DISTANCE_BIAS;\n    }\n    \n    vec3 col = vec3(0.0, 0.0, 0.0); // main color\n    \n    vec3 norm = getNormal(ro + rd * t); // get normal of hit point\n    \n     // final color with the gamma correction \n    col = color(ro, rd, norm, minDist, t);\n    \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}