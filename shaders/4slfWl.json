{
    "Shader": {
        "info": {
            "date": "1498816761",
            "description": "No more Voronoi corners (use the mouse)",
            "flags": 0,
            "hasliked": 0,
            "id": "4slfWl",
            "likes": 15,
            "name": "Smoothed Voronoi Tunnel",
            "published": 3,
            "tags": [
                "voronoi",
                "tunnel",
                "raymarch",
                "hexagon",
                "smoothing"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 783
        },
        "renderpass": [
            {
                "code": "// \"Smoothed Voronoi Tunnel\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Smoothed hexagonal-lattice-based Voronoi partitioning.\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nvec3 ltDir;\nvec2 gVec[7], hVec[7];\nfloat dstFar, tCur, wdTun, htTun, lmpSep;\nint idObj;\nconst int idWal = 1, idCeil = 2, idFlr = 3, idLmp = 4;\nconst float pi = 3.14159;\n\nfloat TrackPath (float t)\n{\n  return wdTun * (0.7 * sin (0.005 * 2. * pi * t) + 0.4 * cos (0.009 * 2. * pi * t));\n}\n\n#define SQRT3 1.73205\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 vc;\n  vec3 q;\n  float dMin, d, db;\n  dMin = dstFar;\n  p.x -= TrackPath (p.z);\n  q = p;\n  q.y -= htTun;\n  d = wdTun - abs (q.x);\n  if (d < dMin) { dMin = d;  idObj = idWal; }\n  vc = HexVor (q.zx);\n  d = q.y + htTun - 0.05 * smoothstep (0.05 + 0.03 * vc.w, 0.14 + 0.03 * vc.w, vc.x);\n  if (d < dMin) { dMin = d;  idObj = idFlr; }\n  q.y -= htTun;\n  d = max (wdTun - length (q.xy), - q.y);\n  if (d < dMin) { dMin = d;  idObj = idCeil; }\n  q.z = mod (q.z + lmpSep, 2. * lmpSep) - lmpSep;\n  q.y -= 0.5 * wdTun;\n  d = PrCylDf (q.xzy, 0.1 * wdTun, 0.01 * wdTun);\n  q.y -= 0.25 * wdTun;\n  d = min (d, PrCylDf (q.xzy, 0.005 * wdTun, 0.25 * wdTun));\n  q.y -= 0.25 * wdTun;\n  d = min (d, PrCylDf (q.xzy, 0.05 * wdTun, 0.02 * wdTun));\n  q.y -= - wdTun - htTun;\n  if (d < dMin) { dMin = d;  idObj = idLmp; }\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, col, q;\n  float dstObj, bh, s, spec, att;\n  HexVorInit ();\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    q = ro;\n    q.x -= TrackPath (q.z);\n    vn = ObjNf (ro);\n    spec = 0.1;\n    if (idObj == idWal) {\n      vc = HexVor (5. * q.zy);\n      col = HsvToRgb (vec3 (0.6 + 0.1 * vc.w, 1., 1.)) * (0.3 + 0.7 *\n         smoothstep (0.05, 0.06 + 0.03 * vc.w, vc.x));\n    } else if (idObj == idCeil) {\n      q.x = wdTun * atan (q.x, q.y - 2. * htTun);\n      vc = HexVor (2. * q.zx);\n      col = HsvToRgb (vec3 (0.4 + 0.1 * vc.w, 1., 1.)) * (0.3 + 0.7 *\n         smoothstep (0.05, 0.06 + 0.03 * vc.w, vc.x));\n      spec = 0.05;\n    } else if (idObj == idFlr) {\n      vc = HexVor (q.zx);\n      col = mix (vec3 (0.2), HsvToRgb (vec3 (vc.w, 1., 1.)),\n         step (0.06 + 0.03 * vc.w, vc.x)) * (1. - 0.1 * Noisefv2 (150. * q.xz));\n      q.z = mod (q.z + lmpSep, 2. * lmpSep) - lmpSep;\n      col *= 1. - 0.3 * smoothstep (0.4, 0.85, length (q.xz) / wdTun);\n      spec = 0.3;\n      vn = VaryNf (100. * q, vn, 1.);\n    } else if (idObj == idLmp) {\n      if (q.y < htTun + wdTun) {\n        col = vec3 (1., 1., 0.7) * 0.5 * (1. - vn.y);\n        spec = -1.;\n      } else col = vec3 (0.6, 0.4, 0.1);\n    }\n    if (spec >= 0.) col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n       spec * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.));\n    att = min (600. / pow (dstObj, 1.5), 1.);\n    col *= att;\n  } else col = vec3 (0.01, 0.01, 0.05);\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  wdTun = 8.;\n  htTun = 4.;\n  lmpSep = 10.;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    el = clamp (el + pi * mPtr.y, -0.4 * pi, 0.4 * pi);\n    az = az + 2.5 * pi * mPtr.x;\n  }\n  dstFar = 300.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ro.z = 10. * tCur;\n  ro.x = TrackPath (ro.z);\n  rd.zx = Rot2D (rd.zx, 0.1 * atan (ro.x));\n  ro.y = 1.5 * htTun;\n  ltDir = vuMat * normalize (vec3 (0., 0.2, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}