{
    "Shader": {
        "info": {
            "date": "1667383733",
            "description": "Koch curves but where the central triangle has an arbitrary apex, set by the mouse, so including the original curve, the Kochawave & many others. Heavily overlapping curves (with mouse toward top or sides) can get a bit slow.",
            "flags": 16,
            "hasliked": 0,
            "id": "dsSGzw",
            "likes": 18,
            "name": "Metakoch!",
            "published": 3,
            "tags": [
                "lsystem",
                "koch"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Metakoch! mla, 2022.\n//\n// Koch curves but where the central triangle has an arbitrary apex, \n// set by the mouse, so including the original curve, the Kochawave & \n// many others. Heavily overlapping curves (with mouse toward top or sides) \n// can get a bit slow.\n//\n// Code should generalize to more than 4 segments, all non-end points being\n// adjustable etc.\n//\n// Inspired by https://www.shadertoy.com/view/Dsj3zD by FabriceNeyret2\n//\n// Uses an explicit stack to keep track of the recursion.\n// This one keeps track of intermediate segments and avoids recursing far from\n// the point being plotted.\n//\n// 'a': adaptive mode where we iterate down to a minimum segment length\n// 'x': show segments actually drawn around mouse position\n// 'w': showing winding number\n// 'f': show moving point\n// 'r': show radius\n// 'c': cycle\n// 'p': progressive depth\n// 'k': Kochawave curve (just to check)\n//\n////////////////////////////////////////////////////////////////////////////////\n\n\n// Stack representation\n#if 1\n#define PACK(x) (pack(x))\n#define UNPACK(x) (unpack(x))\n#define STACKTYPE uint\n#else\n#define PACK(x) x\n#define UNPACK(x) x\n#define STACKTYPE vec2\n#endif\n\nconst int MAXDEPTH = 12; //Maximum stack depth\nconst vec2 initp = vec2(-1,0); // Initial drawing point\n\nvec2 p = initp;                // The drawing point\nvec2 point = vec2(0);          // The moving point\nbool gotpoint = false;\nfloat plen = 0.0;              // Cumulative path length\nint wind = 0; // Compute winding number here\n\n// Fixed point packing for floats [0,1)\nuint pack(float s) {\n  s = round(s*65536.0);\n  uint n = uint(s);\n  assert(n < 65536u);\n  return n;\n}\n\n// Divide length multiplier by 16 and angle by 2PI.\nuint pack(vec2 s) {\n return (pack(s.x/8.0)<<16)|pack(mod(s.y/(2.0*PI)+0.5,1.0));\n}\n\nvec2 unpack(uint n) {\n return vec2(float(n>>16)/65536.0*8.0,\n             2.0*PI*(float(n&0xffffu)/65536.0-0.5));\n}\n\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.x <= 0.0) {\n    if (r.x > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.x <= 0.0 && t < 0.0) wind--;\n  }\n}\n\nfloat drawsegment(vec2 pos, float seglen, float theta, float t) {\n  vec2 seg = seglen*vec2(cos(theta),sin(theta));\n  if (t < plen+seglen && !gotpoint) {\n    gotpoint = true;\n    point = p + (t-plen)/seglen*seg;\n  }\n  vec2 q = p + seg;\n  float d = segment(pos,p,q);\n  polywind(pos,p,q);\n  plen += seglen;\n  p = q;\n  return d;\n}\n\n// Map screen coordinates\nvec2 map(vec2 pos) {\n  pos = (2.0*pos - iResolution.xy)/iResolution.y;\n  pos.y += 0.65;\n  pos /= 1.5;\n  return pos;\n}\n\n// This should get something from a buffer so we can set all three points\nvec2 getpoint(int i) {\n\n  if (i == 1) return vec2(1.0/3.0,0);\n  if (i == 2) {\n    if (key(CHAR_K)) return vec2(1.0/3.0,0) + vec2(0.5,0.5/sqrt(3.0));\n    else if (length(iMouse.xy) > 10.0) return iMouse.xy/iResolution.xy;\n    else if (!key(CHAR_C)) return vec2(0.5,0.25-0.25*cos(0.5*iTime));\n    else return vec2(0.5);\n  }\n  if (i == 3) return vec2(2.0/3.0,0);\n  assert(false);\n  return vec2(0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  int maxdepth = 8;\n  bool adaptive = key(CHAR_A);\n  if (adaptive) maxdepth = MAXDEPTH;\n  else if (key(CHAR_P)) maxdepth = 1+int(iTime)%maxdepth;\n  vec2 pos = map(fragCoord);\n  vec2 pos2 = pos;\n  if (key(CHAR_X)) pos2 = map(iMouse.xy);\n  float pwidth = fwidth(pos.x);\n  STACKTYPE program[5];\n  float radius = 0.0;\n  float pathlen = 0.0;\n  {\n    #define C(a,b) (PACK(vec2(a,b)))\n    vec2 p[] =\n      vec2[](vec2(0,0),\n             getpoint(1),\n             getpoint(2),\n             getpoint(3),\n             vec2(1,0));\n    float theta = 0.0;\n    float seglen = 1.0;\n    for (int i = 0; i < 4; i++) {\n      radius = max(radius,distance(vec2(0.5,0),p[i]));\n      float theta1 = arg(p[i+1]-p[i]);\n      float seglen1 = length(p[i+1]-p[i]);\n      pathlen += seglen1;\n      program[i] = C(seglen1/seglen,theta1-theta);\n      theta = theta1;\n      seglen = seglen1;\n    }\n    program[4] = C(1.0/seglen,-theta);\n    #undef C\n  }\n  int stack[MAXDEPTH];\n  int depth = 0;\n  stack[depth++] = 0;\n  float d = 1e8;\n  float seglen = 2.0;\n  float theta = 0.0;    // Cumulative angle\n  float t = mod(iTime,seglen*pow(pathlen,float(maxdepth))); // Moving point\n  while (depth > 0) {\n    vec2 instr = UNPACK(program[stack[depth-1]++]);\n    float lenfact = instr[0];\n    float angle = instr[1];\n    theta += angle; // Apply turn\n    seglen *= lenfact;\n    if (stack[depth-1] == program.length()) {\n      depth--;    // Terminate level & unwind\n    } else if (depth == maxdepth || seglen < 2.0*pwidth) {\n      d = min(d,drawsegment(pos,seglen,theta,t)); // Segment\n    } else {\n      vec2 seg = seglen*vec2(cos(theta),sin(theta));\n      vec2 next = p+seg; // Where we end up\n      if (distance(pos2,p+0.5*seg) > 1.5*radius*length(seg)) {\n        polywind(pos,p,next);\n        // Show skipped segments on mouse down.\n        if (key(CHAR_X)) d = min(d,segment(pos,p,next));\n        p = next;\n        plen += seglen*pow(pathlen,float(maxdepth-depth));\n      } else {\n        stack[depth++] = 0;  // Recurse\n      }\n    }\n  }\n  // A bodge to close off the winding number calculation\n  vec2 offset = vec2(10,0);\n  polywind(pos,initp,initp-offset);\n  d = min(d,segment(pos,initp,initp-offset));\n  polywind(pos,p,p+offset);\n  d = min(d,segment(pos,p,p+offset));\n  float px = fwidth(pos.x);\n  vec3 col = vec3(smoothstep(0.0,px,d));\n  if (!key(CHAR_W) && (wind&1) != 0) col *= mix(0.2,0.8,1.0-fragCoord.y/iResolution.y);;\n  if (key(CHAR_F) && gotpoint) col = mix(vec3(1,0,0), col,smoothstep(0.0,px,distance(pos,point)-0.01));\n  if (key(CHAR_R)) col = mix(vec3(1,0,0), col,smoothstep(0.0,px,abs(distance(pos,vec2(0))-2.0*radius)));\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.1415927;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\n// Complex argument\nfloat arg(vec2 z) {\n  return atan(z.y,z.x);\n}\n\n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\nconst int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}