{
    "Shader": {
        "info": {
            "date": "1579160480",
            "description": "Approximates pow(x,2.2), the usual gamma to linear map, through an EXP2M1 (2ˣ-1) and a linear term. It runs 2.0x faster. In blue, pow(x,2.2). In yellow, (2ˣ-1 - x·ln2)/(1-ln2)",
            "flags": 0,
            "hasliked": 0,
            "id": "WlG3zG",
            "likes": 35,
            "name": "pow(x,2.2) approximation",
            "published": 3,
            "tags": [
                "gamma",
                "pow",
                "approximatoin"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3140
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Approximating pow(x,2.2), the usual gamma-to-linear\n// mapping, through (2ˣ-1 - x·ln2)/(1-ln2), resulting\n// in a 2x speed up (in my GPU)\n//\n// In blue, pow(x,2.2)\n// In yellow, (2ˣ-1 - x·ln2)/(1-ln2)\n//\n// Note that GPUs implement exp2m1(x) = 2ˣ-1 in hardware,\n// so this _should_ translate to EXP2M1, MAD, MUL, while\n// regular pow(x,2.2) does in principle involve a log and\n// an exponential.\n\n// Set to 1 to measure performance, then go to line 63 and 64\n#define DISPLAY_OR_MEASURE 0\n\nfloat exp2m1( in float x ) { return exp2(x)-1.0; }\n\n// Different approximations to pow(x,2.2)\nfloat my_pow_22( float x )\n{\n\t// By iq, f(x) = (2ˣ-1 - x·ln2)/(1-ln2) \n    return (exp2m1(x)-x*0.693147)*3.258891;\n    \n    // Same idea (one extra mul), but better match. By Marc B.Reynolds\n    // return (exp2m1(0.718151*x)-0.503456*x)*7.07342;\n\n    // By BigWIngs (see comments), probably best tradeof perf and accuracy\n    // return x*x*(0.75 + 0.25*x);\n\n    // By iq (see comments)\n    // return x*(1.12*x - 0.12);\n\n    // By Marc B.Reynolds (http://marc-b-reynolds.github.io/math/2019/12/10/GammaRamp.html)\n    // return (0.5*x*x)*(sqrt(x)+1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n#if DISPLAY_OR_MEASURE==0\n    float dx = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    if( p.x>0.0 && p.x<1.0 )\n    {\n        col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n        // yellow: pow(x,2.2), usual gamma-to-linear\n        {\n        float y = pow( p.x, 2.2 );\n        float dy = pow(p.x-dx,2.2) - y;\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.5, di ) );\n        }\n        // blue: approximation\n        {\n        float y = my_pow_22( p.x );\n        float dy = my_pow_22(p.x-dx) - y;\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 2.0, di ) );\n        }\n    }\n#else    \n    // measure performance\n    float x = fragCoord.x/iResolution.x + min(iTime,0.1);\n\n    vec3 col = vec3(0.0);\n\n    float f = 0.0;\n    uint num = 100000u+min(uint(iFrame),0u);\n    for( uint i=0u; i<num; i++ )\n    {\n        float g = x+f*0.0000001;\n      //f += pow(g, 2.2);  // gamma curve\n        f += my_pow_22(g); // approximation\n    }\n    col.x = f/float(num);\n#endif\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}