{
    "Shader": {
        "info": {
            "date": "1546866573",
            "description": "Electric field simulation and visualization;\nRunge kutta integrated physics simulation.",
            "flags": 32,
            "hasliked": 0,
            "id": "tsfGz2",
            "likes": 6,
            "name": "ElectricField",
            "published": 3,
            "tags": [
                "simulation",
                "field",
                "physics",
                "electric",
                "rk4"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 784
        },
        "renderpass": [
            {
                "code": "const float tau=8.*atan(-1.);\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord/iResolution.xy;\n    \n\tvec4 info=texture(iChannel0,uv);\n    fragColor=vec4(0);\n    fragColor+=0.001*info.w/(zoom*zoom)*vec4(1,0.2,0.2,1);\n    fragColor+=0.001*info.z/(zoom*zoom)*vec4(0.2,0.2,1,1);\n    \n    #ifdef ElectricField\n    fragColor.rgb+=hsv2rgb(vec3(atan(info.x,info.y)/tau,1.,clamp(length(info.xy)*affects,0.,1.)));\n    #endif\n    //fragColor=info;\n    //fragColor=fragCoord.y==1.5?vec4(0):vec4(1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord*2.-iResolution.xy;\n\tuv/=iResolution.y;\n    uv/=zoom;\n\t\n\t\n\t\n    //===DATA===\n\t//vec3(hidden ,acelerable,charge,mass)\n\tdataset\n        \n    \n    if(iFrame==0){\n\t\t//===CHARGES===\n\t\t//charges[n]=vec4(x,y,speed x,speed y);\n\t\tcharges[0]=vec4(-1.,0.,0.,-5.);\n\t\tcharges[1]=vec4(1.,0,0.,5);\n        //charges[2]=vec4(0,0,0,0);\n    }else if(fragCoord.y<2.&&fragCoord.x<float(objects)){\n        for(int i=0;i<objects;i++){\n\t\t\tcharges[i]=texture(iChannel0,vec2(float(i)+0.5,0.5)/iResolution.xy);\n\t\t};\n    }\n    \n\t//==VAR==\n\tvec2 dist;\n\tfloat dist2;\n\tvec2 f;\n    float f2;\n    vec2 angle;\n    fragColor = vec4(0);\n\n    \n    //===SIMULATION===\n\tfor(int i=0;i<objects;i++){\n        if(data[i].x==1.)continue;\n        if(fragCoord.y==1.5&&fragCoord.x==float(i)+0.5){\n        \tif(data[i].y==1.){\n                fragColor.xy=charges[i].zw;\n         \t\tfragColor.zw=A(i,charges);\n        \t}\n        }\n        if(fragCoord.y==0.5&&fragCoord.x==float(i)+0.5){\n\t\t\tfragColor=charges[i];\n        }\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//#define ElectricField\n#define affects 0.01\n#define zoom 0.6\n//vec3(hidden ,acelerable,charge,mass)\n#define dataset data[0]=vec4(0,1,100,100);data[1]=vec4(0,1,-100,100);\n//data[2]=vec4(0,1,-1,1000);\n\nconst int objects=2;\nvec4 charges[objects];\n\nvec4 data[objects];\n\nconst float dt=1./60.;\n\nvec2 E(vec2 p1, vec2 p2,vec2 ch){\n    vec2 d=p1-p2;\n    return normalize(d)*ch.y*ch.x/dot(d,d);\n}\nvec2 A(int i,vec4 charg[objects]){\n    if(data[i].y==0.)return vec2(0);\n    vec2 f2;\n\tfor(int u=0;u<objects;u++){\n\t\tif(u==i)continue;\n       \tif(data[u].x==1.)continue;\n\t\tf2+=E(charg[i].xy,charg[u].xy,vec2(data[u].z,data[i].z));\n\t}\n\treturn f2/data[i].w;\n}\nfloat kk=1.5;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 k[objects];\nvec4 s[objects];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord*2.-iResolution.xy;\n\tuv/=iResolution.y;\n    uv/=zoom;\n\t\n\t\n\t\n    //===DATA===\n\t//vec3(hidden ,acelerable,charge,mass)\n\tdataset\n        \n    \n    if(fragCoord.y<2.&&fragCoord.x<float(objects)){\n    \tfor(int i=0;i<objects;i++){\n\t\t\tcharges[i]=texture(iChannel0,vec2(float(i)+0.5,0.5)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n\t\t\tk[i]=texture(iChannel0,vec2(float(i)+0.5,kk)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n    \t\ts[i]=charges[i]+k[i]*dt*0.5;\n    \t}\n    }\n    \n\t//==VAR==\n\tvec2 dist;\n\tfloat dist2;\n\tvec2 f;\n    float f2;\n    vec2 angle;\n    fragColor = vec4(0);\n\n    \n    //===SIMULATION===\n\tfor(int i=0;i<objects;i++){\n        if(data[i].x==1.)continue;\n        if(fragCoord.y==1.5&&fragCoord.x==float(i)+0.5){\n        \tif(data[i].y==1.){\n                fragColor.xy=s[i].zw;\n         \t\tfragColor.zw=A(i,s);\n        \t}\n        }\n        if(fragCoord.y==0.5&&fragCoord.x==float(i)+0.5){\n\t\t\tfragColor=charges[i];\n        }\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 k[objects];\nvec4 s[objects];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord*2.-iResolution.xy;\n\tuv/=iResolution.y;\n    uv/=zoom;\n\t\n\t\n\t\n    //===DATA===\n\t//vec3(hidden ,acelerable,charge,mass)\n\tdataset\n        \n    \n    if(fragCoord.y<2.&&fragCoord.x<float(objects)){\n    \tfor(int i=0;i<objects;i++){\n\t\t\tcharges[i]=texture(iChannel0,vec2(float(i)+0.5,0.5)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n\t\t\tk[i]=texture(iChannel0,vec2(float(i)+0.5,kk)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n    \t\ts[i]=charges[i]+k[i]*dt*0.5;\n    \t}\n    }\n    \n\t//==VAR==\n\tvec2 dist;\n\tfloat dist2;\n\tvec2 f;\n    float f2;\n    vec2 angle;\n    fragColor = vec4(0);\n\n    \n    //===SIMULATION===\n\tfor(int i=0;i<objects;i++){\n        if(data[i].x==1.)continue;\n        if(fragCoord.y==1.5&&fragCoord.x==float(i)+0.5){\n        \tif(data[i].y==1.){\n         \t\tfragColor.xy=s[i].zw;\n                fragColor.zw=A(i,s);\n        \t}\n        }\n        if(fragCoord.y==0.5&&fragCoord.x==float(i)+0.5){\n\t\t\tfragColor=charges[i];\n        }\n\t}\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 k[objects];\nvec4 k1[objects];\nvec4 k2[objects];\nvec4 k4[objects];\nvec4 s[objects];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord*2.-iResolution.xy;\n\tuv/=iResolution.y;\n    uv/=zoom;\n\t\n\t\n\t\n    //===DATA===\n\t//vec3(hidden ,acelerable,charge,mass)\n\tdataset\n        \n    for(int i=0;i<objects;i++){\n\t\tcharges[i]=texture(iChannel0,vec2(float(i)+0.5,0.5)/iResolution.xy);\n\t}\n    if(fragCoord.y<1.&&fragCoord.x<float(objects)){\n    \t\n    \tfor(int i=0;i<objects;i++){\n\t\t\tk[i]=texture(iChannel0,vec2(float(i)+0.5,kk)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n\t\t\tk1[i]=texture(iChannel1,vec2(float(i)+0.5,kk)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n\t\t\tk2[i]=texture(iChannel2,vec2(float(i)+0.5,kk)/iResolution.xy);\n\t\t}\n    \tfor(int i=0;i<objects;i++){\n    \t\ts[i]=charges[i]+k[i]*dt;\n    \t}\n    }\n    \n\t//==VAR==\n\tvec2 dist;\n\tfloat dist2;\n\tvec2 f;\n    float f2;\n    vec2 angle;\n    fragColor = vec4(0);\n\n    \n    //===SIMULATION===\n    for(int i=0;i<objects;i++){\n        if(fragCoord.y==0.5&&fragCoord.x==float(i)+0.5){\n            k4[i].xy=s[i].zw;\n            k4[i].zw=A(i,s);\n    \t\tcharges[i].xy+=dt*(k1[i].xy+2.*k2[i].xy+2.*k[i].xy+k4[i].xy)/6.;\n        \tcharges[i].zw+=dt*(k1[i].zw+2.*k2[i].zw+2.*k[i].zw+k4[i].zw)/6.;\n\n            fragColor=charges[i];\n        }\n    }\n    for(int i=0;i<objects;i++){\n        if(fragCoord.y>0.5){\n    \t\tdist=uv-charges[i].xy;\n\t\t\tdist2=dot(dist,dist);\n        \tif(data[i].z>0.)fragColor.w+=1./dist2;\n\t\t\tif(data[i].z<=0.)fragColor.z+=1./dist2;\n        \t#ifdef ElectricField\n        \tangle=dist;\n        \tfragColor.xy+=normalize(dist)*data[i].z/dist2;\n        \t#endif\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}