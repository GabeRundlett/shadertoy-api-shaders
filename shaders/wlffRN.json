{
    "Shader": {
        "info": {
            "date": "1596143315",
            "description": "spiralyRects",
            "flags": 0,
            "hasliked": 0,
            "id": "wlffRN",
            "likes": 2,
            "name": "spiralyRects",
            "published": 3,
            "tags": [
                "spiralyrects"
            ],
            "usePreview": 0,
            "username": "pohy",
            "viewed": 204
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n\nfloat Circle(vec2 uv, vec2 p, float r) {\n\tfloat d = distance(uv, p);\n    d = smoothstep(r, r * .99, d);\n    return d;\n}\n\nvec2 rotate(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, s, -s, c);\n    return m * v;\n}\n\nfloat Rect(vec2 uv, vec2 p, vec2 wh, float rot) {\n    vec2 sizeH = wh * .5;\n    vec2 uvRot = rotate(uv - p, rot);\n    float d = distance(uvRot, vec2(clamp(uvRot.x, -sizeH.x, sizeH.x), clamp(uvRot.y, -sizeH.y, sizeH.y)));\n    d = smoothstep(.001, .0, d);\n    return d;\n}\n\nfloat vecAngle(vec2 a, vec2 b) {\n\tfloat cosA = dot(a, b) / length(a) * length(b);\n    return acos(cosA);\n}\n\nfloat posSin(float x) {\n    return sin(x) * .5 + .5;\n}\n\nfloat posCos(float x) {\n    return cos(x) * .5 + .5;\n}\n\nfloat remap(float val, vec2 from, vec2 to) {\n    return val / from.x * to.x;\n}\n\nfloat triangle(float x, float p) {\n    return 4. / p * (x - p / 2. * floor(2. * x / p + .5)) * pow(-1., floor(2. * x / p + .5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 mouse = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n    float t = 10. + iTime * .2;\n\n    // Time varying pixel color\n    vec3 col;// = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //uv *= .1 + posSin(t) * 3.;\n    uv *= 1.7;\n    \n    \n    //col += Rect(uv, vec2(1), .25, PI * sin(t) * .5 + PI * mouse.x);\n    \n    float start = 150. * posCos(300. + sin(t) + posCos(t));\n    //float start = 0.;\n    float it = 5. + 300. * posSin(cos(t) + posSin(t));//posSin(t) * 1000.;\n    for (float i = start; i < it; i++) {\n        float iN = i / it;\n    \tfloat r =  .005;\n        float rotR = i * .002;\n        float spread = i * .1;\n        vec2 p = vec2(sin(spread) * rotR, cos(spread) * rotR);\n        //float d = Circle(uv, p, r);\n        float a = vecAngle(vec2(.0001, .00001), p) + sin(t + i * .1);\n        vec2 wh = vec2(.1 * iN, distance(vec2(0), p) * .1 + iN * .3);\n        float d = Rect(uv, p, wh, a);\n        d *= iN * .2;\n        //d *= texture(iChannel0, p).rgb;\n        //col += texture(iChannel0, rotate(uv - p * wh, a) * 4.).rgb * (iN * .3) * d;\n        col += d * vec3(.9 * iN, .2 * iN, .9);\n        ///*\n        if (i > it - 1.) {\n        \tcol *= .3 + fract(it) * iN;\n        }\n\t\t//*/\n        //col.r +=  vecAngle(vec2(.0001, .00001), p);\n        //col = sampleNoise.rgb;\n        //col.rg += samplePos;\n    }\n\t    \n    //col.rg += uv;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}