{
    "Shader": {
        "info": {
            "date": "1480487099",
            "description": "I was going for something sort of calm and psychedelic here; the codeâ€™s a bit of a mess but I think it looks interesting.",
            "flags": 0,
            "hasliked": 0,
            "id": "MldXRS",
            "likes": 10,
            "name": "uncertain rings",
            "published": 3,
            "tags": [
                "stripes",
                "lensing"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 880
        },
        "renderpass": [
            {
                "code": "// hash functions from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 443.8975\nfloat hash11(float p) // assumes p in ~0-1 range\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash21(float p) // assumes p in larger integer range\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n\n\nvec4 scaledAndLocalUVs(vec2 uv) {\n\tconst float cellResolution = 3.0;\n    vec2 scaledUV = uv * cellResolution;\n    scaledUV.x += floor(mod(scaledUV.y, 2.)) * 0.5;\n    vec2 localUV = (fract(scaledUV) - vec2(0.5)) * 2.;\n    localUV.y += sin(iTime * 1.3 + (hash12(floor(scaledUV) * 0.123) * 2. - 1.) * 3.14) * 0.1;\n    \n    vec4 result;\n    result.xy = scaledUV;\n    result.zw = localUV;\n    return result;\n}\n\nfloat gridMask(vec4 uvs, float thresholdOffset) {\n    return smoothstep(0.8, 0.9, length(uvs.zw) - thresholdOffset) + smoothstep(0.05, 0., length(uvs.zw) - 0.4 + thresholdOffset);\n}\n\nvec2 gridDistortion(vec4 uvs) {\n    vec2 scaledUV = uvs.xy;\n    vec2 localUV = uvs.zw;\n    \n    float localAngle = atan(localUV.y, localUV.x);\n    vec2 cellIndices = floor(scaledUV);\n    float layer1Speed = 2.9 * (hash12(cellIndices * 0.211) * 2. - 1.);\n    float layer2Speed = 2.3 * (hash12(cellIndices * 0.43 + 0.03) * 2. - 1.);\n    \n    float distortAmount = 1. + 0.3 * pow(sin(2.*localAngle - iTime * layer1Speed + hash12(cellIndices + vec2(5.3, 1.7))), 2.) + 0.25 * cos(5. * localAngle + iTime * layer2Speed + 3. * hash12(floor(scaledUV) * 100.) );\n    return normalize(localUV) * 0.2 * distortAmount * (1. - pow(1. - length(localUV), 3.));\n    \n}\n\nfloat stripes(float t) {\n    return smoothstep(-0.1, 0.1, abs(mod(t, 2.) - 1.) - 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float overallShiftAngle = iTime * -0.19;\n\tvec2 uv = (fragCoord.xy / iResolution.y) + 0.3 * vec2(cos(overallShiftAngle), sin(overallShiftAngle));\n    \n    vec4 uvs = scaledAndLocalUVs(uv);\n    float mask = gridMask(uvs, -.05);\n    float stripeAngle = 2. + iTime * 0.1;\n    vec2 stripeDirection = vec2(cos(stripeAngle), sin(stripeAngle));\n    float stripeOffset = iTime * 0.1;\n    const float stripeMultiplier = 7.;\n    float backgroundStripeValue = stripes((dot(uv + .3*sin(uv.y*2.13), stripeDirection)) * stripeMultiplier  + stripeOffset);\n    float lensedStripeValue = stripes((dot(uv + gridDistortion(uvs), stripeDirection)) * stripeMultiplier + stripeOffset);\n    float lensColorMultiplier = (.6+1.4*pow(smoothstep(.5, 1., length(uvs.zw)), 0.6));\n    vec3 lensedColor = mix(vec3(0.4, 1.0, 0.05), vec3(0.1, 0.6, 1.), lensedStripeValue) * lensColorMultiplier;\n    vec3 backgroundColor = .4 * mix(vec3(0.1, 0.6, 1.0), vec3(0.0,0.2, 0.7), backgroundStripeValue);//mix(vec3(0.4, 1., 0.6), vec3(0.4, 0.8, 1.), backgroundStripeValue);//mix(vec3(1.0, 0.6, 0.1), vec3(1.0, 0.9, 0.1), backgroundStripeValue);\n    float shadowAmount = .1 * (mask - gridMask(uvs + vec4(0., 0., 0., .04), 0.02));\n\tfragColor = vec4(mix(lensedColor, backgroundColor, mask) - shadowAmount,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}