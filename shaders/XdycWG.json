{
    "Shader": {
        "info": {
            "date": "1523041373",
            "description": "Noise derivates rocks !",
            "flags": 32,
            "hasliked": 0,
            "id": "XdycWG",
            "likes": 112,
            "name": "Paroi Jaune",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "terrain",
                "sdf",
                "clouds"
            ],
            "usePreview": 1,
            "username": "XT95",
            "viewed": 32256
        },
        "renderpass": [
            {
                "code": "// ---------------------------------------------------------------------------------------\n//\tCreated by anatole duprat - XT95/2018\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//\n//  Very slow... disabling clouds in Buf A can help !\n//\n// ---------------------------------------------------------------------------------------\n\n\n// ---------------------------------------------\n// Depth of field\n// ---------------------------------------------\nvec3 farBlur(vec2 uv, vec2 invRes, float r)\n{\n    const float gauss[4] = float[4](1.0, 0.38774, 0.24477, 0.06136);\n    \n    vec3 c = vec3(0.);\n    float w = 0.;\n    \n    for(int x=-3; x<=3; x++)\n    for(int y=-3; y<=3; y++)\n    {\n        vec2 offset = vec2(float(x), float(y)) * invRes;\n        vec4 tap = textureLod(iChannel0, uv + offset, 2.);\n        \n        float match = tap.a * gauss[abs(x)] * gauss[abs(y)];\n        w += match;\n        c += tap.rgb * match;\n    }\n    \n    if(w == 0.)\n        return vec3(0.);\n    return c / w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invRes = vec2(1.)/ iResolution.xy;\n    vec2 uv = fragCoord * invRes;\n\n    // post processing effects\n    float coc = texture(iChannel0, uv).a;\n    vec3 col = mix(texture(iChannel0, uv).rgb, farBlur(uv,invRes,coc), coc);\n    \n    vec3 bloom = texture(iChannel1, uv).rgb;\n    bloom = mix(bloom, vec3(dot(bloom,bloom)), vec3(.3));\n    col += pow(bloom, vec3(2.))*.7;\n   \n    \n    // vignetting\n    col *= saturate(pow( uv.x * uv.y * (1.-uv.x) * (1.-uv.y)*100., .2 ));\n    \n    // tone mapping\n    col = acesToneMapping( col );\n    \n    \n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// math\n#define time iTime\n#define PI 3.141592653589\n#define saturate(x) clamp(x,0.,1.)\nfloat hash( vec3 x );\nfloat hash( vec2 p );\nfloat hash( float p );\nfloat hash2Interleaved( vec2 x );\nfloat noise( vec3 x );\nvec4 noised( vec3 x );\nmat2 rotate( float t );\n\n// mapping\nvec3 randomSphereDir( vec2 rnd );\nvec3 randomHemisphereDir( vec3 dir, float i );\nvec4 tex3D( sampler2D tex, vec3 p, vec3 n );\nvec3 bumpMapping( sampler2D tex, vec3 p, vec3 n, float bf );\n\n// tone mapping\nvec3 acesToneMapping( vec3 col );\nvec3 filmicToneMapping( vec3 col );\n\n\n\n\n\n// ---------------------------------------------\n// Math\n// ---------------------------------------------\nfloat hash( vec3 p )\n{\n    return fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123);\n}\n\nfloat hash( vec2 p )\n{\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453123);\n}\n\nfloat hash( float p ) \n{\n    return fract(sin(p)*43758.5453123);\n}\n\nfloat hash2Interleaved( vec2 x )\n{\n    // between random & dithered pattern\n    // good for jittering and blur as well as blue noise :)\n    // http://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare\n    vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n    return fract( magic.z * fract( dot( x, magic.xy ) ) );\n}\n\nvec4 noised( vec3 x )\n{\n\t// https://iquilezles.org/articles/gradientnoise\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float a = hash( p+vec3(0,0,0) );\n    float b = hash( p+vec3(1,0,0) );\n    float c = hash( p+vec3(0,1,0) );\n    float d = hash( p+vec3(1,1,0) );\n    float e = hash( p+vec3(0,0,1) );\n    float f = hash( p+vec3(1,0,1) );\n    float g = hash( p+vec3(0,1,1) );\n    float h = hash( p+vec3(1,1,1) );\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z), \n                      2.0* du * vec3( k1 + k4*u.y + k6*u.z + k7*u.y*u.z,\n                                      k2 + k5*u.z + k4*u.x + k7*u.z*u.x,\n                                      k3 + k6*u.x + k5*u.y + k7*u.x*u.y ) ).yzwx;\n}\nfloat noise( vec3 x )\n{\n\t// https://iquilezles.org/articles/gradientnoise\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n\n    float a = hash( p+vec3(0,0,0) );\n    float b = hash( p+vec3(1,0,0) );\n    float c = hash( p+vec3(0,1,0) );\n    float d = hash( p+vec3(1,1,0) );\n    float e = hash( p+vec3(0,0,1) );\n    float f = hash( p+vec3(1,0,1) );\n    float g = hash( p+vec3(0,1,1) );\n    float h = hash( p+vec3(1,1,1) );\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);\n}\n\nmat2 rotate( float t ) {\n    float a = cos(t);\n    float b = sin(t);\n    \n    return mat2( a, b, -b, a );\n}\n\n\n// ---------------------------------------------\n// Mapping\n// ---------------------------------------------\nvec3 randomSphereDir( vec2 rnd )\n{\n    float s = rnd.x*PI*2.;\n    float t = rnd.y*2.-1.;\n    return vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\n\nvec3 randomHemisphereDir( vec3 dir, float i )\n{\n    vec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n    return v * sign(dot(v, dir));\n}\n\nvec4 tex3D( sampler2D tex, vec3 p, vec3 n )\n{\n    n = abs(n);\n    \n    vec4 c = texture(tex, p.yz) * n.x;\n    c += texture(tex, p.xz) * n.y;\n    c += texture(tex, p.xy) * n.z;\n    \n    return c / 3.;\n}\n\nvec3 bumpMapping( sampler2D tex, vec3 p, vec3 n, float bf )\n{\n    // clever code taken from Shane\n    // https://www.shadertoy.com/view/MscSDB\n    const vec2 e = vec2(0.001, 0);\n    \n    mat3 m = mat3( tex3D(tex, p - e.xyy, n).rgb,\n                   tex3D(tex, p - e.yxy, n).rgb,\n                   tex3D(tex, p - e.yyx, n).rgb);\n    \n    vec3 g = vec3(0.299, 0.587, 0.114) * m;\n    g = (g - dot( tex3D(tex,  p , n).rgb, vec3(0.299, 0.587, 0.114)) )/e.x;\n    g -= n * dot(n, g);\n                      \n    return normalize( n + g*bf );\n    \n}\n\n\n\n\n\n// ---------------------------------------------\n// Tone mapping\n// ---------------------------------------------\nvec3 acesToneMapping( vec3 col )\n{\n    // https://www.shadertoy.com/view/XlKSDR\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (col * (a * col + b)) / (col * (c * col + d) + e);\n}\n\nvec3 filmicToneMapping( vec3 col )\n{\n    // Good reference\n    // https://www.shadertoy.com/view/lslGzl\n    col = max(vec3(0.), col - vec3(0.004));\n    col = (col * (6.2 * col + .5)) / (col * (6.2 * col + 1.7) + 0.06);\n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ---------------------------------------------\n// Main Rendering\n// ---------------------------------------------\n#define ENABLE_CLOUDS\n#define ENABLE_CLOUDS_SHADOWING\n//#define ENABLE_TEMPORAL_JITTERING\n\n\n// raymarching\nvec3 raymarch( vec3 ro, vec3 rd, const vec2 nf, const float eps );\nvec3 normal( vec3 p, const float eps );\nfloat ambientOcclusion( vec3 p, vec3 n, float maxDist, float falloff );\nfloat shadow( vec3 ro, vec3 rd, float mint, float tmax );\nfloat shadowFast( vec3 ro, vec3 rd, float mint, float tmax );\n\n\nvec3 sunDir;\n\n\n\n// ---------------------------------------------\n// SDF\n// ---------------------------------------------\nfloat displacement( vec3 p )\n{\n    // more cool tricks -> https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\n    vec3 pp = p;\n    float mgn = .5;\n    float d = 0.;\n    float s = 1.;\n    for(int i=0; i<5; i++)\n    {\n        vec4 rnd = noised(p+10.);\n        d += rnd.w * mgn;\n        \n        p *= 2.;\n        p += rnd.xyz*.2*s;\n        if(i==2)\n            s *= -1.;\n        mgn *= .5;\n        \n    }\n    \n    p = pp*pow(2.,5.);\n    for(int i=0; i<4; i++)\n    {\n        vec4 rnd = noised(p);\n        d += rnd.w * mgn;\n        \n        p *= 2.;\n        mgn *= .5;\n        \n    }\n    \n    \n    return d;\n}\n\n\nfloat clouds( vec3 p )\n{\n    vec3 pp = p;\n    p.y -= time*.1;\n    p *= .23;\n    float mgn = .5;\n    float d = 0.;\n    for(int i=0; i<5; i++)\n    {\n        float rnd = noise(p);\n        d += rnd * mgn;\n        \n        p *= 2.;\n        mgn *= .6;\n        \n    }\n    return -(pp.y*.2+1.) + d*.5+.5;\n}\n\n\nfloat map( vec3 p )\n{\n    float d = p.y*.5 + (displacement(p*.1))*10.3;\n    \n    return d*.4;\n}\n\n\n\n// ---------------------------------------------\n// Shading\n// ---------------------------------------------\nvec3 skyColor( vec3 rd )\n{\n    // Heavely inspired by https://www.shadertoy.com/view/Ml2cWG\n    rd.y = max(rd.y+0.03, 0.02);\n\tconst float anisotropicIntensity = 0.03; \n\tconst float density = .3;\n    \n    \n    float l = length(rd - sunDir);\n    \n    vec3 col = vec3(0.39, 0.57, 1.0) * (1.0 + anisotropicIntensity);\n    \n\tfloat zenith = density / pow(max(rd.y, 0.35e-2), 0.75);\n    vec3 absorption = exp2(col * -zenith) * 2.;\n\tfloat rayleig = 1.0 + pow(1.0 - clamp(l, 0.0, 1.0), 2.0) * PI * 0.5;\n    \n    vec3 sun = vec3(1.,.5,.1) * smoothstep(0.03, 0.0, l) * 100.0;\n    \n    return col * zenith * rayleig * absorption*.5 + sun;\n}\nvec3 clouds( vec3 col, vec3 ro, vec3 rd, float l )\n{\n    for(int i=0; i<32; i++)\n    {\n        vec3 p = ro + rd * (1. - float(i)/64.) * l;\n        float d = clouds(p);\n        \n        #ifdef ENABLE_CLOUDS_SHADOWING\n        float shad = 1.;\n        if(d > .01)\n            shad = shadowFast(p, sunDir, .4, 30.);\n        #else\n        float shad = 1.;\n        #endif\n        vec3 c = vec3(.4)*exp(-d*10.) + vec3(1.,.7,.4)*3. *shad*pow(saturate(d-clouds(p+sunDir)*2.),1.);\n        \n        col = mix(col, c, saturate(d*.7));\n    }\n    return col;\n}\nvec3 shade( vec3 p, vec3 n, vec3 ro, vec3 rd )\n{\n    float d = length(p-ro);\n    vec3 sky = skyColor(rd);\n    vec3 col = sky;\n    \n    if (d < 80.)\n    {\n        vec3 albedo = mix(vec3(1.,.6,.34)*.1, vec3(.7)*.1, pow(saturate(n.y),4.)+(noised(p*vec3(.1,1.,1.)).w*.3));\n        \n\t\tn = bumpMapping(iChannel0, p*1.5, n, 1.);\n\n\n        float ao = ambientOcclusion(p,n, 5.1, 2.) * ambientOcclusion(p,n, 1., 1.5);\n        float shad = shadow(vec3(p), vec3(sunDir), float(0.4), float(30.));\n\n        vec3 amb = vec3(.3,.4,.5) * ao;\n        vec3 diff = vec3(1.,.9,.7) * max(0., dot(n, sunDir) ) * shad;\n        vec3 bnc = vec3(1.,.7,.4) * saturate(-n.y) * ao;\n        \n        col = albedo * ( diff*10. + amb*10. + bnc*3. );\n\n        //return vec3(ao);\n        #ifdef ENABLE_CLOUDS\n    \tcol = clouds(col,ro,rd,d);\n        #endif\n        col = mix(col, vec3(.6,.7,1.)*.5, 1. - exp(-0.005*d) );\n        \n    }\n    \n    \n    return col;\n}\n\n\n\n// ---------------------------------------------\n// SDF\n// ---------------------------------------------\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    vec2 uv = fragCoord * invRes;\n    \n    vec2 jitt = vec2(0.);\n    #ifdef ENABLE_TEMPORAL_JITTERING\n    jitt = vec2(hash(iTime)-.5, hash(iTime+1.)-.5) * invRes;\n\t#endif\n    vec2 v = -1.0+2.0*(uv+jitt);\n\tv.x *= iResolution.x/iResolution.y;\n    \n    \n\tsunDir = normalize( vec3(cos(time*.02+1.)+1., 1., .4) );\n    \n    // camera ray\n    vec3 ro = vec3(-1., 4.5, 182.);\n    vec3 rd = normalize( vec3(v, 1.45) );\n    rd.yz = rotate(.15) * rd.yz;\n    rd.xz = rotate(.1) * rd.xz;\n    \n    // classic sdf rendering\n    vec3 p = raymarch(ro, rd, vec2(5.,80.), 0.001);\n    vec3 n = normal(p, 0.001);\n    vec3 col = shade(p, n, ro, rd);\n    \n    \n    \n    float depth = length(ro-p)/100.;\n    float coc = saturate(pow(depth+.65,50.));\n    fragColor = vec4(col,coc);\n    \n    // temporal jittering\n    #ifdef ENABLE_TEMPORAL_JITTERING\n    fragColor = mix(fragColor, texture(iChannel1,uv), vec4(.8));\n    #endif\n}\n\n\n\n\n\n\n// ---------------------------------------------\n// Raymarching\n// Can't be to Common because of the map() dependency :(\n// ---------------------------------------------\nvec3 raymarch( vec3 ro, vec3 rd, const vec2 nf, const float eps ) {\n    vec3 p = ro + rd * nf.x;\n    float l = 0.;\n    for(int i=0; i<128; i++) {\n\t\tfloat d = map(p);\n        l += d;\n        p += rd * d;\n        \n        if(d < eps || l > nf.y)\n            break;\n    }\n    \n    return p;\n}\n\nvec3 normal( vec3 p, const float eps ) {\n    float d = map(p);\n    vec2 e = vec2(eps, 0.);\n    \n    vec3 n;\n    \n    n.x = d - map(p-e.xyy);\n    n.y = d - map(p-e.yxy);\n    n.z = d - map(p-e.yyx);\n    \n    return normalize(n);\n}\n\nfloat ambientOcclusion( vec3 p, vec3 n, float maxDist, float falloff )\n{\n\tconst int nbIte = 8;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(map( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n// https://www.shadertoy.com/view/lsKcDD\nfloat shadow( vec3 ro, vec3 rd, float mint, float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n\t\tres = min( res, 10.0*h/t );\n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0.0, 1.0 );\n}\nfloat shadowFast( vec3 ro, vec3 rd, float mint, float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    \n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t )*2.;\n\t\tres = min( res, 10.0*h/t );\n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ---------------------------------------------\n// Bilateral blur for the bloom\n// ---------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    \n    vec2 uv = fragCoord * invRes;\n    vec2 offset = vec2(3.,0.) * invRes;\n    \n    vec3 col = vec3(0);\n    \n    for(float i=-6.; i<=6.; i += 1.)\n        col += textureLod( iChannel0, uv+offset*i, 3.).rgb;\n    \n    fragColor = vec4(col/12.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ---------------------------------------------\n// Bilateral blur for the bloom\n// ---------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invRes = vec2(1.) / iResolution.xy;\n    \n    vec2 uv = fragCoord * invRes;\n    vec2 offset = vec2(0.,3.) * invRes;\n    \n    vec3 col = vec3(0);\n    \n    for(float i=-6.; i<=6.; i += 1.)\n        col += texture( iChannel0, uv+offset*i).rgb;\n    \n    fragColor = vec4(col/12.,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}