{
    "Shader": {
        "info": {
            "date": "1691674812",
            "description": "Simple raymarched scene, featuring infinite and atmospheric liminal spaces with vhs effect. Made just for fun!",
            "flags": 96,
            "hasliked": 0,
            "id": "Dl2yWz",
            "likes": 9,
            "name": "Walking Through Liminal Space",
            "published": 3,
            "tags": [
                "raymarching",
                "backrooms",
                "liminalspace"
            ],
            "usePreview": 1,
            "username": "propagant",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "// Walk through liminal atmospheric spaces written by Matej Vanco, August 2023.\n\n////////////////////////////////////////////////////////////////\n//                                                            //\n//                      GUI                                   //\n//                                                            //\n////////////////////////////////////////////////////////////////\n\nfloat rect(in vec2 st, in vec2 size)\n{\n    vec2 uv = step(0.25 - size, st * (1.0-st));\n\treturn uv.x * uv.y;\n}\n\nvec3 renderGUI(vec2 uv, in vec2 uvVHS)\n{\n#if GUI == 0\n    return ZERO;\n#endif\n\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 recIcon = vec3(1.,0.2,0.4) * step(length(vec2(uv.x-0.15,uv.y-0.9) + uvVHS * 0.01),0.015);\n    vec3 recIconSmh = vec3(1.,0.2,0.2) * \n    (1.-smoothstep(1.0e-4,0.05, length(vec2(uv.x-0.15,uv.y-0.9) + uvVHS * 0.01)));\n    float blinking = step(fract(iTime*0.5),.5);\n    recIcon *= blinking;\n    recIconSmh *= blinking;\n    \n    vec3 panel = ONE * 0.1 * rect(uv-vec2(.5,0.4)+uvVHS * 0.01,vec2(.4,1.e-5));\n    vec3 panel2 = ONE * 0.1 * rect(uv-vec2(.4,-0.4)+uvVHS * 0.01,vec2(.6,1.e-5));\n    \n    return recIcon + recIconSmh + panel + panel2;\n}\n\n////////////////////////////////////////////////////////////////\n//                                                            //\n//                      MAIN + Post Processing                //\n//                                                            //\n////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n#if VHS == 1\n    float tf = fract(iTime);\n    float uvy = uv.y * 0.001;\n    vec2 vhs = fract(vec2(HASH1(uvy-tf), uv.y-tf * HASH1(uvy) * 0.1) * 20.) * VHSIntens;\n    vec2 chVhs = vhs * 0.0075;\n    vec4 color = vec4(texture(iChannel2, uv + chVhs).r, \n                texture(iChannel2, uv + CHROMATIC_ABERRATION + chVhs).g,\n                texture(iChannel2, uv - CHROMATIC_ABERRATION + chVhs).b, 1.);\n#else\n    vec2 vhs = vec2(0.);\n    vec4 color = texture(iChannel2, uv);\n#endif\n\n    vec4 guiColor = vec4(renderGUI(uv, vhs), 0.);\n    color.rgb += color.rgb;\n    \n    // Gamma\n    fragColor = color + vec4(0.14,0.118 + sin(iTime * 64.) * 0.005,0.099,0.) + guiColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 34405,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/leylandkirby/01-all-you-are-going-to-want?in=leylandkirby/sets/the-caretaker-an-empty-bliss&si=c941021b310043dcbae70cea878d6a1e&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Renderer essentials\n\n#define MAX_DIST 64.0\n#define ITERS 32\n\n// 0 = default, 1 = depth, 2 = normals\n#define RENDER_MODE 0\n// 0 = disabled, 1 = enabled\n#define VHS 1\n#define VHSIntens 1.5\n#define CHROMATIC_ABERRATION 0.008\n#define GUI 1\n\nstruct Ray\n{\n    vec3 o,d;\n};\n\n#define EPSILON 1.0e-4\n\n// Hashes\n\n#define HASH1(v) fract(sin(v * 1024.32) * 768.4096)\n\n// Transform\n\n#define UP vec3(0.,1.,0.)\n#define FWD vec3(0.,0.,1.)\n#define ONE vec3(1.)\n#define ZERO vec3(0.)\n\nmat3 rotateY(float theta) \n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Operations (iq's solutions)\n\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p + s * 0.5, s) - s * 0.5;\n}\n\nfloat ops(float a, float b, float s)\n{\n    float k = s;\n    float h = clamp( 0.5 - 0.5*(b+a)/k, 0.0, 1.0 );\n    return mix( a, -b, h ) + k*h*(1.0-h);\n}\n\nfloat opu(float a, float b, float s)\n{\n    float k = s;\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Scene render\n\nfloat sdfBox(in vec3 c, in vec3 s, in float r)\n{\n\treturn length(max(abs(c),s)-s)-r;\n}\n\nfloat sdfPlane(in vec3 c, in vec3 n, in float h)\n{\n    return dot(c+UP*h,normalize(n));\n}\n\n////////////////////////////////////////////////////////////////\n//                                                            //\n//                      CORE                                  //\n//            SDFs, Raymarching, lighting etc...              //\n////////////////////////////////////////////////////////////////\n\n\nfloat SDF(in vec3 p)\n{\n    vec3 rp = p;\n    rp.xz = opRep(p.xz, 2.5);\n        \n    float box = sdfBox(rp, vec3(.3,1.5,.3), 0.01);\n    float pool = sdfBox(rotateY(rp.x+rp.z) * (rp), vec3(0.8,.5,.6), 0.1);\n    \n    float ground = sdfPlane(p, UP, 0.5);\n    float roof = sdfPlane(p, -UP, -1.5);\n    \n    return opu(box, ops(min(roof,ground), pool, 0.1),0.3);\n}\n\nvec3 normal(in vec3 p)\n{\n    vec2 of = vec2(1.e-3,0.);\n    float sdf = SDF(p);\n    return normalize(sdf - vec3(SDF(p - of.xyy), SDF(p - of.yxy), SDF(p - of.yyx)));\n}\n\nfloat rayMarch(in Ray r)\n{\n    float t = 0.;\n    for(int i = 0; i < ITERS; i++)\n    {\n        vec3 cp = r.o + t * r.d;\n        float sdf = SDF(cp);\n        t+=sdf;\n        if(t > MAX_DIST)\n            break;\n    }\n    return t;\n}\n\nfloat lighting(vec3 p)\n{\n    p.xz = opRep(p.xz, 10.);\n    \n    vec3 lp = vec3(1.0,.5,1.);\n    \n    vec3 ld = lp - p;\n    vec3 ldn = normalize(ld);\n    vec3 n = normal(p);\n    \n    float atten = dot(n, ldn) * (.1/length(ld))*30.;\n    \n    return clamp(atten - abs(sin(iTime*50.)*0.2),0.,3.);\n}\n\n////////////////////////////////////////////////////////////////\n//                                                            //\n//                      SCENE                                 //\n//                                                            //\n////////////////////////////////////////////////////////////////\n\nvec3 Texture(in vec3 uv)\n{\n    vec2 pp = fract((uv.xz+uv.xy)*15.);\n    return ONE * step(pp.y,0.25);\n}\n\nvec3 renderScene(in vec2 uv)\n{\n    Ray r;\n    r.o = vec3(1.25, sin(iTime * 15.) * 0.008, iTime * 0.5);\n    r.d = rotateY(cos(r.o.z / 2.)) * vec3(uv, 1.);\n    \n    float march = rayMarch(r);\n    float depth = 1. / march;\n    vec3 cp = r.o + r.d * march;\n    if(cp.y < -0.55)\n        cp.xz += texture(iChannel1, cp.xz*2.).r*0.5;\n    \n    vec3 color = vec3(0.);\n\n// Depth only\n#if RENDER_MODE == 1\n    color = vec3(depth);\n// Normals only\n#elif RENDER_MODE == 2\n    color = normal(cp);\n// Full render (albedo+lambert+fog)\n#else\n    float light = lighting(cp);\n    vec3 fog = mix(ZERO, vec3(.8,1.,0.1)/5., clamp(pow(depth,1.5),0.,1.));\n    vec3 tex = Texture(cp);\n    \n    color = (tex * 0.5 + light) * fog;\n#endif\n\n    return color;\n}\n\n////////////////////////////////////////////////////////////////\n//                                                            //\n//                      MAIN                                  //\n//                                                            //\n////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - (.5 * iResolution.xy)) / iResolution.y;\n    fragColor = vec4(renderScene(uv), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}