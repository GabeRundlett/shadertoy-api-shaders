{
    "Shader": {
        "info": {
            "date": "1489952945",
            "description": "Lots of books",
            "flags": 0,
            "hasliked": 0,
            "id": "4slcW2",
            "likes": 13,
            "name": "Babel's Library",
            "published": 3,
            "tags": [
                "raymarch",
                "architecture",
                "books"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 694
        },
        "renderpass": [
            {
                "code": "// \"Babel's Library\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\n\nconst float pi = 3.14159;\n\nmat3 vuMat;\nvec3 ltDir;\nvec2 bsa1, bsa2, bsa3;\nfloat dstFar, tCur, spFlr, spShf, htShf, htFlr, rOut, wFlr, wWal;\nint idObj;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, rBar;\n  dMin = dstFar;\n  rBar = rOut - 2. * wFlr + 0.05;\n  q = p;\n  a = atan (q.z, - q.x) / (2. * pi);\n  d = abs (length (q.xz) - rOut) - wWal;\n  q.y = mod (q.y - 5.5 + 0.5 * spFlr, spFlr) - 0.5 * spFlr;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (8. * a) + 0.5) / 8.);\n  q.z = abs (q.z);\n  d = max (d, - max ((length (q.zy) - 1.5),\n     - min (abs (q.y) - 0.03, dot (q.xz, bsa3))));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = p;\n  q.y = mod (q.y + 0.5 * spFlr, spFlr) - 0.5 * spFlr;\n  d = PrCylAnDf (q.xzy, rOut - wFlr, wFlr, htFlr);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (16. * a) + 0.5) / 16.);\n  q.x -= - rBar;\n  q.z = abs (q.z) - 0.25;\n  d = length (q.xz) - 0.15;\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  q = p;\n  q.y = mod (q.y - 3. + 0.5 * spFlr, spFlr) - 0.5 * spFlr;\n  d = PrTorusDf (q.xzy, 0.08, rBar);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = p;\n  q.y = abs (abs (mod (q.y - 1.5 + 0.5 * spFlr, spFlr) - 0.5 * spFlr) - 0.6) - 0.3;\n  d = PrTorusDf (q.xzy, 0.04, rBar);\n  if (d < dMin) { dMin = d;  idObj = 4; }\n  q = p;\n  a = mod (a - 1./16. + 0.5, 1.) - 0.5;\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (8. * a) + 0.5) / 8. + 1. / 16.));\n  q.z = abs (q.z);\n  d = max (abs (length (q.xz) - rOut + wWal + 0.3 * wFlr) - 0.3 * wFlr,\n     dot (q.xz, bsa2));\n  if (d < dMin) { dMin = d;  idObj = 5; }\n  d = max (abs (length (q.xz) - rOut + wWal + 0.4 * wFlr) - 0.4 * wFlr,\n     dot (q.xz, bsa1));\n  d = max (d, min (abs (mod (mod (q.y, spFlr) + htFlr + 0.167 * spShf, spShf) -\n     0.5 * spShf) - htShf, - dot (q.xz, bsa2)));\n  if (d < dMin) { dMin = d;  idObj = 6; }\n  q.y = mod (q.y + 0.5 * spFlr + htFlr, spFlr) - 0.5 * spFlr;\n  d = max (PrTorusDf (q.xzy, 0.15, rOut - 1.5 * wFlr), dot (q.xz, bsa1));\n  if (d < dMin) { dMin = d;  idObj = 7; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 4.;\n  f = dot (vec3 (Fbm2 (p.zy * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.xy * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.8, 0.5, 0.3), vec3 (0.55, 0.35, 0.1), f);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, q;\n  vec2 gb;\n  float dstObj, a, s, bh, spec;\n  int idObjT;\n  rOut = 20.;\n  wFlr = 4.;\n  wWal = 0.5;\n  spFlr = 8.;\n  htShf = 0.05;\n  htFlr = 0.2;\n  spShf = 0.167 * (spFlr - htFlr) - htShf;\n  bsa1 = vec2 (sin (1.2 * 2. * pi / 32.), cos (1.2 * 2. * pi / 32.));\n  bsa2 = vec2 (sin (0.95 * 1.2 * 2. * pi / 32.), cos (0.95 * 1.2 * 2. * pi / 32.));\n  bsa3 = vec2 (sin (0.01 * 2. * pi / 32.), cos (0.01 * 2. * pi / 32.));\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += rd * dstObj;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    spec = 0.1;\n    q = ro;\n    a = 8. * atan (q.z, - q.x) / (2. * pi);\n    gb = floor (vec2 (q.y / spFlr, a));\n    if (idObj == 1) {\n      col = vec3 (0.6, 0.6, 0.55);\n      col *= 1. - 0.6 * smoothstep (0.15, 0.45, abs (0.5 - mod (a - 0.5, 1.)));\n      q.xy = vec2 (5. * (mod (a, 1.) - 0.5), 0.5 * (mod (q.y, spFlr) - 2.5));\n      if (abs (q.x) < 0.325 && abs (q.y) < 0.125) {\n        if (ShowInt (vec2 (q.x - 0.3, q.y + 0.09),\n           vec2 (0.6, 0.15), 4., mod (4242. + gb.x, 10000.)) != 0.)\n           col = vec3 (0.8, 0.6, 0.);\n      }\n      vn = VaryNf (100. * ro, vn, 2.);\n    } else if (idObj == 2) {\n      if (abs (vn.y) > 0.9) {\n        if (vn.y > 0.) col = vec3 (0.4, 0.2, 0.2) * (0.5 + 0.5 * smoothstep (0., 0.4,\n           (1. - (rOut - length (ro.xz)) / (2. * wFlr))));\n        else col = vec3 (0.8) *(1. - 0.4 * smoothstep (0.3, 0.5,\n           abs (rOut - 1.5 * wFlr - length (ro.xz)) / wFlr));\n        col *= 1. - 0.6 * smoothstep (0.15, 0.45, abs (0.5 - mod (a - 0.5, 1.)));\n      } else col = vec3 (0.65, 0.7, 0.7);\n      vn = VaryNf (100. * ro, vn, 1.);\n    } else if (idObj == 3) {\n      col = vec3 (0.7);\n      spec = 0.1;\n    } else if (idObj == 4) {\n      col = vec3 (0.5, 0.5, 0.55);\n      spec = 0.8;\n    } else if (idObj == 5) {\n      q.y = mod (q.y, spFlr) + htFlr + 0.5 * spShf + 0.167 * spShf;\n      gb = 0.5 * (gb + floor (vec2 (q.y / spShf, 48. * mod (a, 1.))));\n      bh = (0.7 + 0.3 * Fbm2 (gb * vec2 (19., 31.))) * spShf;\n      q.y = mod (q.y, spShf);\n      if (q.y < bh) { \n        s = mod (48. * mod (a, 1.), 1.);\n        col = vec3 (HsvToRgb (vec3 (Fbm2 (gb * vec2 (17., 11.)), 1.,\n           SmoothBump (0.08, 0.92, 0.01, 0.1 + 0.9 * s) *\n           (1. - 0.5 * step (abs (abs (q.y / bh - 0.5) - 0.35), 0.02)))));\n        vn.xz = Rot2D (vn.xz, 2. * (s - 0.5));\n        vn = VaryNf (20. * ro, vn, 1.);\n      } else col = vec3 (0.1);\n    } else if (idObj == 6) {\n      col = WoodCol (vec3 (5. * (mod (a, 1.) - 0.5), ro.y, length (ro.xz)), vn);\n    } else if (idObj == 7) {\n      col = vec3 (1., 1., 0.6) * 0.5 * (1. - vn.y);\n    }\n    if (idObj != 7) {\n      col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n         spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.));\n      col *= smoothstep (0.7, 0.85, dot (rd, - ltDir)) *\n         (1. - 0.7 * smoothstep (0.5, 0.7, dstObj / 50.));\n    } \n  } else {\n    col = vec3 (0., 0., 0.07);\n    rd = (rd + vec3 (1., 0.7, 0.3));\n    for (int j = 0; j < 14; j ++) rd = 11. * abs (rd) / dot (rd, rd) - 3.;\n    col += min (1., 1.5e-6 * pow (min (16., length (rd)), 5.)) *\n       vec3 (0.7, 0.6, 0.6);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  az = -0.2 * tCur;\n  el = -0.17 * pi * sin (0.2 * tCur);\n  dstFar = 100.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.1));\n  ro = vuMat * vec3 (0., 0., -10.);\n  ro.y += tCur;\n  ltDir = vuMat * vec3 (0., 0., -1.);\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return step (abs (q.x), 0.12) * step (abs (q.y), 0.6);\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.5, 2.2);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}