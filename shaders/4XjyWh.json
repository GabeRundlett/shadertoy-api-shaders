{
    "Shader": {
        "info": {
            "date": "1727200930",
            "description": "fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "4XjyWh",
            "likes": 3,
            "name": "color spheres",
            "published": 3,
            "tags": [
                "fractal",
                "sphere",
                "color"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define time iTime\n#define resolution  iResolution.xy\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n\nvoid mainImage(out vec4 O, vec2 C)\n{\n   \n    \n      // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = C/iResolution.xy-0.5;\nfloat scale = 10. / 20.0;\n\tfloat ring = 15.0;\n\tfloat radius = resolution.x*1.0;\n\tfloat gap = scale*.5;\n\tvec2 pos = gl_FragCoord.xy - resolution.xy*.5;\n\t\n\tfloat d2 = length(pos);\n\t  uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n\n\n\t\n\t// Compute the distance to the closest ring\n\tfloat v = mod(d2 + radius/(ring*0.09*time), radius/ring);\n\tv = abs(v - radius/(ring*2.0));\n\t\n\tv = clamp(v-gap, 0.0, 1.0);\n\t\n\td2 /= radius;\n\tvec3 m = fract((d2-1.0)*vec3(ring*-.5, -ring, ring*.2)*0.5);\n\t\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n   O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1)); \n    \n    \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.3,0.1,1.),H(g*.1),.8)*5./e/8e3\n    )\n    {\n        \n        p=g*d*m*v;\np.z+=iTime;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n         p =R(p, vec3(0,1,0), iTime);\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.011)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 );\n         }\n         g+=e=length(p.yzxz)/s;\n    }\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}