{
    "Shader": {
        "info": {
            "date": "1586401584",
            "description": "use soble and gaussian blur to  achieve surface blur.  inspired by  https://www.shadertoy.com/view/4sVyzR",
            "flags": 32,
            "hasliked": 0,
            "id": "wdScWR",
            "likes": 2,
            "name": "surfaceBlur",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "indere",
            "viewed": 485
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(texture(iChannel0, uv));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define kernelSize 39\n#define halfKernelSize 19\n\n#define blurStrength 1.0\n#define blurEdge 0.3\n\nvec3 fastSurfaceBlur( sampler2D inputColor, sampler2D inputEdge, vec2 uv, vec2 blurStep)\n{\n\t// Normalized gauss kernel\n\tfloat blurKernel[kernelSize] = float[kernelSize](\n\t\t1.9576873456045e-10,\n        2.6102497941393e-09,\n        2.5449935492859e-08,\n        1.9341950974573e-07,\n        1.192753643432e-06,\n        6.134161594793e-06,\n        2.6836956977219e-05,\n        0.00010138405969172,\n        0.00033456739698267,\n        0.00097328697304049,\n        0.0025143246803546,\n        0.0058022877238952,\n        0.012019024570926,\n        0.022435512532395,\n        0.037859927398416,\n        0.057903418374049,\n        0.080421414408401,\n        0.10158494451587,\n        0.11682268619326,\n        0.12238567125008,\n        0.11682268619326,\n        0.10158494451587,\n        0.080421414408401,\n        0.057903418374049,\n        0.037859927398416,\n        0.022435512532395,\n        0.012019024570926,\n        0.0058022877238952,\n        0.0025143246803546,\n        0.00097328697304049,\n        0.00033456739698267,\n        0.00010138405969172,\n        2.6836956977219e-05,\n        6.134161594793e-06,\n        1.192753643432e-06,\n        1.9341950974573e-07,\n        2.5449935492859e-08,\n        2.6102497941393e-09,\n        1.9576873456045e-10\n   \t);\n\t\n\tvec3 result = blurEdge*blurKernel[halfKernelSize]*texture(inputColor,uv).rgb;\n\tfloat norma = blurEdge*blurKernel[halfKernelSize];\n\t\n\tfloat mainEdge = texture(inputEdge,uv).x;\n\t\n\t// Right direction\n\tfloat weight = blurEdge;\n\tfor(int i = 1; i<halfKernelSize; i++){\n\t\tvec2 currentPos = uv+float(i)*blurStep;\n\t\t\n\t\tweight-=abs(texture(inputEdge,currentPos).x-mainEdge)/blurStrength;\n\t\tif(weight<=0.0) continue;\n\t\t\n\t\tfloat coef = weight*blurKernel[halfKernelSize+i];\n\t\tresult+=coef*texture(inputColor,currentPos).rgb;\n\t\tnorma+=coef;\n\t}\n\t// Left direction\n\tweight = blurEdge;\n\tfor(int i = 1; i<halfKernelSize; i++){\n\t\tvec2 currentPos = uv-float(i)*blurStep;\n\t\t\n\t\tweight-=abs(texture(inputEdge,currentPos).x-mainEdge)/blurStrength;\n\t\tif(weight<=0.0) continue;\n\t\t\n\t\tfloat coef = weight*blurKernel[halfKernelSize-i];\n\t\tresult+=coef*texture(inputColor,currentPos).rgb;\n\t\tnorma+=coef;\n\t}\n    return result/norma;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Sobel edge detection from https://gist.github.com/Hebali/6ebfc66106459aacee6a9fac029d0115\n#define texture2D texture\n\nvoid make_kernel(inout vec4 n[9], sampler2D tex, vec2 coord)\n{\n\tfloat w = 1.0 / iResolution.x;\n\tfloat h = 1.0 / iResolution.y;\n\n\tn[0] = texture2D(tex, coord + vec2( -w, -h));\n\tn[1] = texture2D(tex, coord + vec2(0.0, -h));\n\tn[2] = texture2D(tex, coord + vec2(  w, -h));\n\tn[3] = texture2D(tex, coord + vec2( -w, 0.0));\n\tn[4] = texture2D(tex, coord);\n\tn[5] = texture2D(tex, coord + vec2(  w, 0.0));\n\tn[6] = texture2D(tex, coord + vec2( -w, h));\n\tn[7] = texture2D(tex, coord + vec2(0.0, h));\n\tn[8] = texture2D(tex, coord + vec2(  w, h));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 n[9];\n\tmake_kernel( n, iChannel0, fragCoord/iResolution.xy );\n\n\tvec4 sobel_edge_h = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);\n  \tvec4 sobel_edge_v = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);\n\tvec4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));\n    \n    fragColor = vec4(clamp((sobel.rgb),0.0,1.0),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 result;\n\tresult = fastSurfaceBlur(iChannel0,iChannel1,fragCoord/iResolution.xy,vec2(1.0/iResolution.x,0.0)).rgb;\n    \n    fragColor = vec4(result.rgb,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 originColor = texture(iChannel0,uv).rgb;\n    vec3 bluredColor = fastSurfaceBlur(iChannel2,iChannel1,fragCoord/iResolution.xy,vec2(0.0,1.0/iResolution.y)).rgb;\n    \n    vec3 e = texture(iChannel1,uv).rgb;\n    float edge = texture(iChannel1,uv).r;\n    //float edge = max(e.r, max(e.g, e.b));\n    edge = pow(edge,2.0);\n    bluredColor = mix(bluredColor,originColor,edge);\n    \n\tvec3 finalColor;\n    if(fragCoord.x < mod(iTime * 150.0, iResolution.x))\n        finalColor = bluredColor;\n    else\n        finalColor = originColor;\n    fragColor = vec4(finalColor,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}