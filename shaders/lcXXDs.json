{
    "Shader": {
        "info": {
            "date": "1706013029",
            "description": "comparing cellular automata evolution with no target (left) vs a target equal to phi (right)",
            "flags": 32,
            "hasliked": 0,
            "id": "lcXXDs",
            "likes": 1,
            "name": "golden evolution",
            "published": 3,
            "tags": [
                "evolution",
                "goldenratio",
                "cellularautomata",
                "naturalselection",
                "darwian"
            ],
            "usePreview": 0,
            "username": "GoldenRatioScience",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "// comparing cellular automata evolution with no target (left) vs a target equal to phi (right)\n// --------------------------------------------------------------------------------------------\n// goldenratioscience\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 a = textureLod(iChannel0, uv, 0.0f).rg;\n    vec2 b = textureLod(iChannel1, uv, 0.0f).rg;\n    \n    vec3 color = vec3(0); \n    color = vec3(mix(a.x, b.x*b.y, uv.x > 0.5f));\n    \n    if (uv.x > 0.49f && uv.x < 0.5f)\n        color = (1.0f - color) * vec3(0.7,0,0);\n    else if (uv.x > 0.5f && uv.x < 0.51f)\n        color = (1.0f - color) * vec3(0,0.7,0);\n    \n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 gridSize = iResolution.xy / grid_size; // Adjust grid size\n    vec2 cell = floor(uv * gridSize);\n    \n    if ( iFrame < 8 ) {\n    \n        fragColor = vec4(textureLod(iChannel1, fragCoord.xy/1024.0f, 0.0f).r, 0,0,0);\n        return;\n    }\n    \n    int alive = 0;\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx == 0 && dy == 0) continue;\n            vec2 neighborUv = (cell + vec2(dx, dy) + gridSize) / gridSize;\n            alive += textureLod(iChannel0, neighborUv, 0.0f).r > 0.5 ? 1 : 0;\n        }\n    }\n\n    vec2 cellUv = (cell + 0.5) / gridSize;\n    float currentState = textureLod(iChannel0, cellUv, 0.0f).r;\n    bool isAlive = currentState > 0.5;\n\n    bool newState = isAlive ? (alive == 2 || alive == 3) : (alive == 3);\n    \n    fragColor = vec4(newState,1.0,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 gridSize = iResolution.xy / grid_size; // Adjust grid size\n    vec2 cell = floor(uv * gridSize);\n\n    if ( iFrame < 8 ) {\n    \n        fragColor = vec4(textureLod(iChannel1, fragCoord.xy/1024.0f, 0.0f).r, iphi,0,0);\n        return;\n    }\n    \n    vec2 alive = vec2(0);\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx == 0 && dy == 0) continue;\n            vec2 neighborUv = (cell + vec2(dx, dy) + gridSize) / gridSize;\n            vec2 samp = textureLod(iChannel0, neighborUv, 0.0f).rg;\n            alive += vec2(step(0.5f, samp.x), samp.y);\n        }\n    }\n        \n    vec2 cellUv = (cell + 0.5) / gridSize;\n    float currentState = textureLod(iChannel0, cellUv, 0.0f).r;\n    bool isAlive = currentState > 0.5;\n\n    alive = alive / 8.0f;\n    float ratio = 1.0f / (1.0f + alive.y);\n    bool nearGoldenRatio = abs(ratio - iphi) < golden_epsilon;\n\n    bool newState = (isAlive && nearGoldenRatio) ? (alive.x == 2.0f/8.0f || alive.x == 3.0f/8.0f) \n                                                 : (alive.x == 3.0f/8.0f);\n    \n    fragColor = vec4(newState,mix(1.0f / (1.0f + alive.x), 1.0f / (1.0f + ratio), abs(alive.x-alive.y)),0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define phi 1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243\n#define iphi 0.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243\n#define pi 3.14159265359\n#define eps 0.00001f\n\n#define fma(a,b,c)(a*b+c)\n\n#define golden_epsilon (iphi*iphi*iphi*iphi*iphi*iphi)\n#define grid_size 3.0\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}