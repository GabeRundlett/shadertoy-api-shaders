{
    "Shader": {
        "info": {
            "date": "1707479496",
            "description": "i have seen this youtube video https://www.youtube.com/watch?v=TdTMeNXCnTs",
            "flags": 32,
            "hasliked": 0,
            "id": "XXsGDn",
            "likes": 4,
            "name": "opposite pixel changing effect",
            "published": 3,
            "tags": [
                "opposite"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "float f_n_rand(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 o_trn_pix_nor = fragCoord.xy / iResolution.xy;\n    vec4 o_col_last = texture(iChannel0, o_trn_pix_nor);\n    float n_dist = length(o_trn_pix_nor);\n    fragColor = o_col_last;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float f_n_rand(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 o_trn_pix_scaled = f_o_trn_pix_scaled(\n        fragCoord, \n        iResolution\n    );\n    vec2 o_trn_pix_scaled_floor = o_trn_pix_scaled.xy;\n    vec2 o_trn_pix_scaled_full = o_trn_pix_scaled.zw;\n    vec2 o_scl_res = f_o_scl_res(); \n    vec2 o_trn_pix_sclaed_floor_nor =  o_trn_pix_scaled_floor / o_scl_res;\n    if(mod(float(iFrame), 1000.) == 0.){\n        float n_rand = f_n_rand(\n            o_trn_pix_scaled_floor.xy\n        );\n        fragColor = vec4(\n            (n_rand > .5) ? 1. : 0.\n        );\n        return;\n    }\n    \n    vec2 o_trn_pix_nor = fragCoord.xy / iResolution.xy;\n    vec4 o_col_last = texture(iChannel0, o_trn_pix_nor);\n    //fragColor = vec4((o_col_last.x > .5) ? 0. : 1.);\n    float n_d = length(o_trn_pix_sclaed_floor_nor);\n    float n_t = iTime*3.;\n    //sphere \n    float n_rad = (sin(n_t)*.5+.5)*.5;\n    n_d = abs(n_d-n_rad);\n    n_d = smoothstep(0., 1./o_scl_res.y, n_d);\n    \n    //square\n    float n_dsqr = abs(max(\n        abs(o_trn_pix_sclaed_floor_nor.x),\n        abs(o_trn_pix_sclaed_floor_nor.y)\n    )-(sin(n_t+3.14)*.5+.5)*.5);\n    n_dsqr = smoothstep(0., 1./o_scl_res.y, n_dsqr);\n    n_d *= n_dsqr;\n    \n    //ball\n    n_d *= length(o_trn_pix_sclaed_floor_nor+vec2(\n        sin(iTime), \n        cos(iTime)\n    )*.6)*5.; \n    \n    fragColor = vec4(n_d);\n    //return;\n    \n    float n_fps = f_n_fps();\n    float n_factor = float(iFrameRate) / n_fps; \n    //if(mod(float(iFrame), float(int(n_fps*n_factor)))==0.){\n    if(mod(float(iFrame),4.) == 0. ){\n        if(n_d <= .5){\n            fragColor = vec4((o_col_last.x > .5) ? 0. : 1.);\n        }else{\n            fragColor = o_col_last;\n        }\n    }else{\n       fragColor = o_col_last; \n    }\n    if(sign(iMouse.z) == 1.){\n        fragColor = vec4(0.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float f_n_fps(){\n    return 30.;\n}\nvec2 f_o_scl_res(){\n    return vec2(90.,90.);\n}\nvec4 f_o_trn_pix_scaled(\n    vec2 fragCoord,\n    vec3 iResolution\n){\n    vec2 o_trn_pix_scaled = ((fragCoord-(iResolution.xy*.5))/iResolution.yy)*f_o_scl_res();\n    return vec4(\n        floor(o_trn_pix_scaled).xy, \n        (o_trn_pix_scaled).xy\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}