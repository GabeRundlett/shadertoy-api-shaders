{
    "Shader": {
        "info": {
            "date": "1720024058",
            "description": "De simples formes geometriques peuvent elles casser des briques\nhttps://matthieu-totet.fr/De_simples_formes_geometriques_peuvent_elles_casser_des_briques_3337.html\nScene 2",
            "flags": 0,
            "hasliked": 0,
            "id": "4XyXzz",
            "likes": 21,
            "name": "大龙猫 - DSFGPECDB2",
            "published": 3,
            "tags": [
                "dsfgpecdb"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "const float PI =3.141592;\nconst float foldcos = cos( PI / 5.0 );\n const float foldrem = sqrt( 0.75 -foldcos * foldcos );\n const vec3 foldvec = vec3( -0.5, -foldcos, foldrem );\n const vec3 foldsurf = normalize( vec3( 0.0, foldrem, foldcos ) );\n \n float sdicosahedron( vec3 p ) {\n   for ( int i = 0; i < 5; i ++ ) {\n     p.xy = abs( p.xy );\n    p -= 2.0 * min( 0.0, dot( p, foldvec ) ) * foldvec;\n   }\n   return dot( foldsurf, p ) - 1.0;\n }\nmat3 orth(vec3 p){\n    vec3 z = normalize(p);\n    vec3 x = vec3(z.z,0.,-z.x);\n    return mat3(x,cross(z,x),z);\n}\nfloat diam(vec2 p,float s){\n    p= abs(p);\n    return (p.x+p.y-s)*inversesqrt(3.);\n}\nvec3 pcg3d(vec3 p){\n    uvec3 q=floatBitsToUint(p)*1234567u+1234567890u;\n    q.x+=q.y*q.z;q.y+=q.x*q.z;q.z+=q.y*q.x;\n    q^=q>>16u;\n       q.x+=q.y*q.z;q.y+=q.x*q.z;q.z+=q.y*q.x;\n       return vec3(q)/float(-1u);\n}\nvec3 erot(vec3 p,vec3 ax,float t){return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\nfloat bpm = iTime*140./60.;\n    vec2 uv = (fragCoord.xy -.5* iResolution.xy)/iResolution.y;\n    vec3 rrnd = pcg3d(vec3(uv,iTime));\n    vec3 ro=vec3(0.,2.,-10.),rt=vec3(0.,0.,0.);\n    ro = erot(ro,normalize(vec3(-.3,1.,.2)),bpm/32.);\n    vec3 rd = orth(rt-ro)*erot(normalize(vec3(uv,1.)),vec3(0.,0.,1.),bpm/64.);;\n    vec3 p;\n    vec3 col = vec3(0.);\n    float i=0.,g=0.,e=0.,sc;\n    for(;i++<50.;){\n        p = ro+g*rd;\n\n       \n        vec3 op=p,rnd=pcg3d(floor(p)+floor(bpm*.0));\n \n        p= fract(p)-.5;\n        sc = 1.;\n        for(int a=0;a++<3 && rnd.y>.5 ;) {\n            rnd= pcg3d(floor(p)+rnd.y+floor(bpm*.0));\n            p*=2.;\n            p = fract(p)-.5;\n            sc*=2.;\n        }    \n  \n                    p = erot(p,normalize(rnd),floor(bpm*2.+rrnd.z*.2));\n        vec2 q = rnd.x>.3 ? (rnd.x>.6? vec2(length(p.xz)-.4,p.y):vec2(length(p.yz)-.4,p.x)):vec2(length(p.xy)-.4,p.z);\n  \n        float h = rnd.z >.3 ? (rnd.z >.6? length(q)-.02: sdicosahedron(p*5.)/5.) :\n        max(length(p)-.5,min(diam(p.yz,.01),min(diam(p.xy,.01),diam(p.xz,.01))));\n\n        float z = step(.5,sin(length(op)+bpm+length(rnd)*55.));\n        g+=e=max(.0001,(z<=0.?abs(h):h)/(sc*1.5));\n        col += exp(-5.*fract(bpm+rnd.x+rrnd.z*.1))*( (rnd.x+rnd.y)/2. >.7 ? vec3(.1,.3,.9):vec3(.9,.3,.1))*(.0525+z*.3)/exp(2.*i*i*e+rrnd.x*.1);\n    }//.1/(.1+sqrt(col))\n    vec3 rnd = pcg3d(floor(vec3(uv*10.,bpm+rrnd.z*.5)));\n     col = mix((fwidth(col*50.5)),sqrt(col),\n     step(.01,rnd.x));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}