{
    "Shader": {
        "info": {
            "date": "1541943223",
            "description": "USE_PLUCKER_COORDINATES 1\nis just always worse than \nUSE_PLUCKER_COORDINATES 0\n\nafter i optimized booth variants, and made them use shared subroutines, and similar structure, so you can see the clear contextual differences.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtGBRW",
            "likes": 8,
            "name": "aabvh pluecker sucks!",
            "published": 3,
            "tags": [
                "triangle",
                "box",
                "trace",
                "plucker",
                "bunny",
                "context",
                "aabvh",
                "pluecker"
            ],
            "usePreview": 1,
            "username": "ollj",
            "viewed": 848
        },
        "renderpass": [
            {
                "code": "//self  : https://www.shadertoy.com/view/MtGBRW\n//parent: https://www.shadertoy.com/view/XlVXDz\n//3d AABVH\n\n//how about just using homogeneous/barycrntric coordinates in the LUT-BVH that defines all triangles\n//, it speeds up testing if a point (rayToPlasneIntersection) is inside a trianalge (on the plane)\n//, no dot() needed (except for tracing a plane) , no cross() needed (precumpputed as barycentric LUT)\n\n/*\nollj disagrees with pluecker coordinate fanatism below: pluecker coordinate are slower AND-logic:\nif(max(a,b)<0.) hints at slower AND-logic  (max() inherits AND)\nif(min(a,b)>0.) hints at faster  OR-logic  (min() inherits  OR)\nas a rule of thumb, try to change AND to OR identities, where ever that has an identity.\nORlogic is often 2/3 as fast as ANDlogic, depends on contexts and how much you can fold identities.\nOR-logic likely needs less operands and less longer-term-memory.\n- many languages skip the second (a OR b) [b] expression, if the first [a] espresison is already true\n- because there is a bias in favor of true, because in set-theory (gratients), min(a,b) > max(a,b)\n- for zBuffering, you keep the min() distance, and rarely the max() distance, another win for ORlogic.\nmulti-domain-folds are either done with AND-logic (slow, dumb) or with OR-logic (fast, smart)\n[USE_PLUCKER_COORDINATES 1] is the slower AND-logic version of \n[USE_PLUCKER_COORDINATES 0] is the faster  OR-logic version\n[USE_PLUCKER_COORDINATES 1] needs 6 tripleProduct(), where 3/6 share the same cross()\n[USE_PLUCKER_COORDINATES 1] needs 3 tripleProduct(), all offset by -uv\nBoth have the same early [;else return] escapeTime exits, so number of domains makes no difference.\napparently, here we do not need to care if any AABV interval is an open or closed interval?\n*/\n\n//Tracing of 292 polygon Stanford bunny in pure GLSL.\n\n//A hardcoded bounding volume hierarchy is used to speed up the trace.\n//By doing this we are effectively encoding the bounding volume tree in the Abstract Syntax Tree\n\n//compilation times seem like more of showstopper than the actual tracing performance(yet again).\n//It is possible that the compilation time can be improved by massaging the code or by going multipass.\n\n//The triangle intersection test can use Plücker coordinates\n//,which seem particularly well suited for this use case. <- WRONG\n//- Plücker coordinates for the triangle edges can be precomputed       <- wasting long term memory\n//- Plücker coordinates for the ray can be shared between all triangles <- wasting a buffer for a cross()\n//- even with all that, you just feed up to 3 uneccessary tripleProduct()s, so just dont [USE_PLUCKER_COORDINATES 1]\n//- The intersection test itself then reduces to 6 tripleProduct()s for [USE_PLUCKER_COORDINATES 1]\n//- - instead of                            just 3 tripleProduct()s for [USE_PLUCKER_COORDINATES 0]\n\nconst float zFar=1000.;\n\n#define USE_PLUCKER_COORDINATES 0\n#define USE_HIERARCHY true\n#define SHOW_HIERARCHY true\n\n\n\n\n/* //original code by iq, likely insignificantly slower, definitely more source code.\nbool intersectBox(vec3 u,vec3 d,vec3 mn,vec3 mx,float t\n){if(!USE_HIERARCHY)return true\n ;vec3 t0=(mn-u)*d\n ;vec3 t1=(mx-u)*d\n ;float tmin=max(max(min(t0.x,t1.x),min(t0.y,t1.y)),min(t0.z,t1.z))\n ;float tmax=min(min(max(t0.x,t1.x),max(t0.y,t1.y)),max(t0.z,t1.z))\n ;return tmax>=tmin&&tmin<t ;}//halfopen interval is insignificant difference here\n*/\n\n//crunched subroutine to a faster variant (that does not have a halfOpen interval):\nfloat mi(vec3 a){return min(min(a.x,a.y),a.z);}\nfloat ma(vec3 a){return -mi(-a);}\nbool intersectBox(vec3 u,vec3 d,vec3 mn,vec3 mx,float t\n){if(!USE_HIERARCHY)return true\n ;mn=(mn-u)*d\n ;mx=(mx-u)*d\n ;return min(mi(max(mn,mx)),t)>ma(min(mn,mx))\n ;}\n\n//tripleProduct(a,b,c) == tripleProduct(c,b,a), theres some unintuitive Troppleproduct identities folds!\n#define tripleProduct(a,b,c) dot(a,cross(b,c))\n\nvoid ass(vec3 u,vec3 v0,vec3 v1,vec3 v2,vec3 d,inout float t,inout vec3 outNormal){\n ;vec3 n=normalize(cross(v1-v0,v2-v0))//surface normal of 3 points of a plane.\n ;float p=dot(v0-u,n)/dot(d,n)//trace plane (see hessian normal form)\n ;if(p<t)outNormal=n//normal of nearest\n ;t=min(t,p)//distance of nearest\n ;}\n\n//if(ray intersets triangle) && (intersection is closer than t) update t and n\n#if USE_PLUCKER_COORDINATES\nvoid Root1Triangle(vec3 u,vec3 d,vec3 v0,vec3 v1,vec3 v2,inout float t,inout vec3 n //out vec3  n fails on linux.\n){vec3 v=cross(d,u);//yes, this can be a more global buffer, alongside v1-v0, v2-v1 v0-v2\n     //and then you still just waste memory and operands, compared to USE_PLUCKER_COORDINATES\n ;float e=1.//assume outside, and check for inside AND\n ;        e=min(e,dot(v1-v0,v)+tripleProduct(d,v1,v0))//(a minimum of) 2 tripleProduct()s (per domain)\n ;if(e>0.)e=min(e,dot(v2-v1,v)+tripleProduct(d,v2,v1));else return\n ;if(e>0.)e=min(e,dot(v0-v2,v)+tripleProduct(d,v0,v2));else return\n ;if(e>0.)ass(u,v0,v1,v2,d,t,n)\n ;}\n \n#else\n\nvoid Root1Triangle(vec3 u,vec3 d,vec3 v0,vec3 v1,vec3 v2,inout float t,out vec3 n\n){float e=-1.//assume inside, and check 3 outside OR\n ;vec3 w0=v0-u,w1=v1-u,w2=v2-u//just some short time cache.\n ;        e=max(e,tripleProduct(d,w0,w1))//(a minimum of) 1 tripleProduct() (per domain)\n ;if(e<0.)e=max(e,tripleProduct(d,w1,w2));else return\n ;if(e<0.)e=max(e,tripleProduct(d,w2,w0));else return\n ;if(e<0.)ass(u,v0,v1,v2,d,t,n)\n ;}\n#endif\n\n\n\n//root1 trace triangle\n#define I(a,b,c,d,e,f,g,h,i) Root1Triangle(pos,dir,vec3(a,b,c),vec3(d,e,f),vec3(g,h,i),t,outNormal);\n//root2 trace AABVbox\n#define B(_mnx,_mny,_mnz,_mxx,_mxy,_mxz) intersectBox(pos,invDir,vec3(_mnx,_mny,_mnz),vec3(_mxx,_mxy,_mxz),t)\n\n\n\n\nvoid torsoBackLeft(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(42.551,60.189,6.074,67.757,75.249,31.091)\n    ){numNodesVisited+=1.0;\n     I(42.551,64.352,31.091,62.428,60.189,28.382,47.881,72.038,23.292);\n     I(67.757,64.533,19.785,48.752,75.249,10.750,47.881,72.038,23.292);\n     I(48.752,75.249,10.750,67.757,64.533,19.785,63.770,69.473,6.074);\n     I(62.428,60.189,28.382,67.757,64.533,19.785,47.881,72.038,23.292);\n    }}\n    \nvoid torsoBackRightANDleftEarTip(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(31.117,63.727,-30.643,59.223,112.434,-1.508)){\n     numNodesVisited+=1.0;\n     I(38.196,110.779,-23.468,36.363,93.381,-19.850,35.363,105.769,-30.643);\n     I(31.117,112.434,-26.499,38.196,110.779,-23.468,35.363,105.769,-30.643);\n     I(50.796,72.233,-1.508,59.223,63.991,-11.887,43.605,63.727,-11.608);\n     I(38.196,110.779,-23.468,35.530,95.245,-14.819,36.363,93.381,-19.850);}}\n\nvoid torsoBackANDleftEarTip(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(31.117,60.189,-30.643,67.757,112.434,31.091)){\n    numNodesVisited+=1.0;\n    I(48.752,75.249,10.750,63.770,69.473,6.074,50.796,72.233,-1.508);\n    I(50.796,72.233,-1.508,63.770,69.473,6.074,59.223,63.991,-11.887);\n\n    ;torsoBackRightANDleftEarTip(pos,dir,invDir,t,outNormal,numNodesVisited)\n    ;torsoBackLeft(pos,dir,invDir,t,outNormal,numNodesVisited)\n   ;}}\n\nvoid ass(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(62.886,30.358,9.293,82.997,51.513,34.118)\n ){numNodesVisited+=1.0\n  ;I(71.848,51.513,25.795,62.886,37.383,34.118,77.160,40.036,20.248)\n  ;I(75.235,30.358,20.462,82.997,31.685,9.758,77.444,31.786,9.293)\n  ;I(77.160,40.036,20.248,75.235,30.358,20.462,77.444,31.786,9.293);}}\n      \nvoid ass2(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(67.266,5.281,10.809,84.233,25.699,25.762)\n ){numNodesVisited+=1.0\n  ;I(74.378,5.281,16.983,82.012,25.699,22.449,67.266,5.336,25.762)\n  ;I(82.012,25.699,22.449,74.378,5.281,16.983,84.233,23.274,10.809);}}\n\n\n\nvoid ass3(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(62.886,5.281,9.293,84.233,51.513,34.118)\n ){numNodesVisited+=1.0\n ;I(82.997,31.685,9.758,82.012,25.699,22.449,84.233,23.274,10.809)\n ;      I(77.160,40.036,20.248,64.278,17.090,29.077,75.235,30.358,20.462)\n ;      I(75.235,30.358,20.462,82.012,25.699,22.449,82.997,31.685,9.758)\n ;      I(67.266,5.336,25.762,82.012,25.699,22.449,75.235,30.358,20.462)\n ;      I(67.266,5.336,25.762,75.235,30.358,20.462,64.278,17.090,29.077)\n ;      I(77.160,40.036,20.248,62.886,37.383,34.118,64.278,17.090,29.077)\n ;ass2(pos,dir,invDir,t,outNormal,numNodesVisited)\n     ;ass(pos,dir,invDir,t,outNormal,numNodesVisited);}}\n\n\nvoid ass4(inout vec3 pos,inout vec3 dir,inout vec3 invDir,inout float t,inout vec3 outNormal,inout float numNodesVisited\n){if(B(31.181,5.312,29.121,55.260,50.349,41.428)\n ){numNodesVisited+=1.0\n  ;I(31.181,27.114,41.307,46.751,10.309,33.683,42.713,30.459,41.428)\n  ;      I(39.498,46.218,40.304,31.181,27.114,41.307,42.713,30.459,41.428)\n  ;      I(46.751,10.309,33.683,55.136,21.712,33.819,42.713,30.459,41.428)\n  ;if(B(31.181,5.312,29.121,55.260,27.114,41.307)\n  ){numNodesVisited+=1.0\n   ;       I(46.751,10.309,33.683,55.260,14.605,29.121,55.136,21.712,33.819)\n   ;       I(46.470,5.312,32.180,46.751,10.309,33.683,31.453,15.389,34.744)\n   ;       I(31.181,27.114,41.307,31.453,15.389,34.744,46.751,10.309,33.683)\n   ;I(46.751,10.309,33.683,46.470,5.312,32.180,55.260,14.605,29.121)\n  ;}\n  ;if(B(39.498,30.459,35.401,55.152,50.349,41.428)\n  ){numNodesVisited+=1.0;\n   ;I(39.498,46.218,40.304,42.713,30.459,41.428,49.208,41.972,39.966)\n   ;I(55.152,50.349,35.401,39.498,46.218,40.304,49.208,41.972,39.966)\n ;}}}\n\n\nfloat numNodesVisited=.0;\nfloat intersectMesh(vec3 pos,vec3 dir,out vec3 outNormal\n){\n vec3 invDir=1.0/dir;\n float t=zFar;\n if(B(-23.890,5.254,-45.197,84.233,112.514,41.428)\n ){\n  numNodesVisited+=1.0;\n  I(29.227,44.540,-18.707,46.160,49.961,-16.626,36.519,43.722,-26.357);\n  I(31.117,112.434,-26.499,23.362,106.939,-20.396,29.543,111.693,-11.766);\n  I(49.960,29.367,-21.494,38.374,16.789,-19.974,28.565,32.567,-26.427);\n  I(10.393,14.842,-6.125,31.863,15.076,-17.091,13.467,8.858,-17.503);\n  I(19.874,7.225,37.050,31.453,15.389,34.744,17.848,17.253,29.948);\n  I(28.902,94.550,-20.603,36.363,93.381,-19.850,9.658,79.936,-7.294);\n  I(54.832,5.352,-12.991,54.923,5.376,0.265,22.396,5.312,-18.550);\n  I(47.881,72.038,23.292,48.752,75.249,10.750,27.161,64.590,20.211);\n  I(22.396,5.312,-18.550,54.923,5.376,0.265,-6.453,5.376,22.765);\n  I(32.651,59.562,-16.574,46.160,49.961,-16.626,29.227,44.540,-18.707);\n  I(21.051,31.485,-14.744,31.863,15.076,-17.091,6.239,21.570,-4.279);\n  I(22.396,5.312,-18.550,13.467,8.858,-17.503,31.863,15.076,-17.091);\n  I(42.551,64.352,31.091,47.881,72.038,23.292,27.161,64.590,20.211);\n  I(27.724,41.869,39.777,31.181,27.114,41.307,39.498,46.218,40.304);\n  I(36.519,43.722,-26.357,28.565,32.567,-26.427,29.227,44.540,-18.707);\n  I(31.863,15.076,-17.091,28.565,32.567,-26.427,38.374,16.789,-19.974);\n  I(29.237,68.702,-1.372,48.752,75.249,10.750,50.796,72.233,-1.508);\n  I(28.565,32.567,-26.427,31.863,15.076,-17.091,21.051,31.485,-14.744);\n  I(43.605,63.727,-11.608,29.237,68.702,-1.372,50.796,72.233,-1.508);\n  I(67.266,5.336,25.762,-6.453,5.376,22.765,70.472,5.295,5.591);\n  I( 5.592,48.569,-20.200,32.651,59.562,-16.574,29.227,44.540,-18.707);\n  I(27.161,64.590,20.211,23.549,47.895,31.616,42.551,64.352,31.091);\n  I(41.233,32.639,-26.832,28.565,32.567,-26.427,36.519,43.722,-26.357);\n  I(36.363,93.381,-19.850,28.902,94.550,-20.603,30.041,103.613,-30.601);\n  I(32.651,59.562,-16.574,29.237,68.702,-1.372,43.605,63.727,-11.608);\n  I(42.551,64.352,31.091,23.549,47.895,31.616,27.724,41.869,39.777);\n  I(29.237,68.702,-1.372,32.651,59.562,-16.574,11.323,68.510,-10.695);\n  I(46.470,5.312,32.180,-6.453,5.376,22.765,67.266,5.336,25.762);\n  I(41.233,32.639,-26.832,49.960,29.367,-21.494,28.565,32.567,-26.427);\n  I(38.196,110.779,-23.468,31.117,112.434,-26.499,29.543,111.693,-11.766);\n  I(31.117,112.434,-26.499,35.363,105.769,-30.643,30.041,103.613,-30.601);\n  I(31.181,27.114,41.307,27.724,41.869,39.777,16.296,28.902,30.711);\n  I(48.752,75.249,10.750,29.237,68.702,-1.372,27.161,64.590,20.211);\n  I(19.874,7.225,37.050,12.698,5.310,28.182,46.470,5.312,32.180);\n  I(54.923,5.376,0.265,70.472,5.295,5.591,-6.453,5.376,22.765);\n  I(42.551,64.352,31.091,27.724,41.869,39.777,39.498,46.218,40.304);\n  I(19.874,7.225,37.050,46.470,5.312,32.180,31.453,15.389,34.744);\n  I(10.393,14.842,-6.125,6.239,21.570,-4.279,31.863,15.076,-17.091);\n  I(30.041,103.613,-30.601,35.363,105.769,-30.643,36.363,93.381,-19.850);\n  I(22.617,96.787,-2.459,38.196,110.779,-23.468,29.543,111.693,-11.766);\n  I(36.363,93.381,-19.850,13.185,81.566,-0.511,9.658,79.936,-7.294);\n  I(17.848,17.253,29.948,31.453,15.389,34.744,31.181,27.114,41.307);\n  I(31.181,27.114,41.307,16.296,28.902,30.711,17.848,17.253,29.948);\n  I(22.617,96.787,-2.459,13.185,81.566,-0.511,35.530,95.245,-14.819);\n  I(35.530,95.245,-14.819,38.196,110.779,-23.468,22.617,96.787,-2.459);\n  I(32.651,59.562,-16.574,5.592,48.569,-20.200,17.374,62.435,-15.596);\n  I(17.374,62.435,-15.596,11.323,68.510,-10.695,32.651,59.562,-16.574);\n  I(31.863,15.076,-17.091,54.832,5.352,-12.991,22.396,5.312,-18.550);\n  I(12.698,5.310,28.182,-6.453,5.376,22.765,46.470,5.312,32.180);\n  I(30.041,103.613,-30.601,23.362,106.939,-20.396,31.117,112.434,-26.499);\n  I(35.530,95.245,-14.819,13.185,81.566,-0.511,36.363,93.381,-19.850);\n  if(B(-23.890,5.254,-45.197,30.041,112.514,39.777)\n  ){\n   numNodesVisited+=1.0;\n   I(13.977,65.434,17.522,12.460,52.312,27.631,27.161,64.590,20.211);\n   I(-19.512,57.556,24.398,-22.722,64.221,26.361,-22.557,60.116,7.864);\n   I(-17.363,54.556,2.177,-17.016,62.738,-6.631,-5.463,58.637,-11.137);\n   I(11.323,68.510,-10.695,5.592,48.569,-20.200,-5.463,58.637,-11.137);\n   I(-4.712,55.313,24.599,12.460,52.312,27.631,13.977,65.434,17.522);\n   I(11.323,68.510,-10.695,17.374,62.435,-15.596,5.592,48.569,-20.200);\n   I(-17.016,62.738,-6.631,-17.363,54.556,2.177,-22.557,60.116,7.864);\n   I(-2.565,77.949,-12.458,-5.463,58.637,-11.137,-7.096,82.828,-11.379);\n   I(-19.512,57.556,24.398,-5.818,62.804,33.935,-14.483,70.881,32.905);\n   I(12.460,52.312,27.631,23.549,47.895,31.616,27.161,64.590,20.211);\n   I(-4.712,55.313,24.599,13.977,65.434,17.522,1.501,65.005,25.918);\n   I(-2.565,77.949,-12.458,11.323,68.510,-10.695,-5.463,58.637,-11.137);\n   I(-4.712,55.313,24.599,1.501,65.005,25.918,-5.818,62.804,33.935);\n   I(-15.295,55.173,17.340,-22.557,60.116,7.864,-17.363,54.556,2.177);\n   I(-22.722,64.221,26.361,-19.512,57.556,24.398,-14.483,70.881,32.905);\n   I(-19.512,57.556,24.398,-22.557,60.116,7.864,-15.295,55.173,17.340);\n   I(-7.096,82.828,-11.379,-5.463,58.637,-11.137,-17.016,62.738,-6.631);\n   I(-4.712,55.313,24.599,-5.818,62.804,33.935,-19.512,57.556,24.398);\n   if(B(-20.512,5.254,-26.427,29.227,58.637,39.777))\n     {\n    numNodesVisited+=1.0;\n    I(-16.082,36.272,-1.183,-7.136,23.835,15.087,-10.108,31.132,20.984);\n    I(-17.363,54.556,2.177,-16.082,36.272,-1.183,-20.512,46.442,9.215);\n    I(-5.434,7.631,-1.448,8.905,5.275,-5.377,-0.457,5.254,12.882);\n    I(-20.512,46.442,9.215,-15.295,55.173,17.340,-17.363,54.556,2.177);\n    I(-0.457,5.254,12.882,-1.815,11.859,7.485,-5.434,7.631,-1.448);\n    I(-0.457,5.254,12.882,22.396,5.312,-18.550,-6.453,5.376,22.765);\n    I(-5.434,7.631,-1.448,-1.815,11.859,7.485,6.420,13.852,6.828);\n    I( 8.905,5.275,-5.377,22.396,5.312,-18.550,-0.457,5.254,12.882);\n    I( 6.239,21.570,-4.279,10.393,14.842,-6.125,6.420,13.852,6.828);\n    I(-16.082,36.272,-1.183,-7.554,24.985,-1.506,-7.136,23.835,15.087);\n    I(-20.512,46.442,9.215,-16.082,36.272,-1.183,-10.108,31.132,20.984);\n    I(-7.554,24.985,-1.506,6.239,21.570,-4.279,-7.136,23.835,15.087);\n    I(-5.434,7.631,-1.448,6.420,13.852,6.828,10.393,14.842,-6.125);\n    I( 6.239,21.570,-4.279,7.373,19.886,20.273,-7.136,23.835,15.087);\n    I( 6.420,13.852,6.828,7.373,19.886,20.273,6.239,21.570,-4.279);\n    if(B(-17.363,5.275,-26.427,29.227,58.637,2.177)\n    ){\n     numNodesVisited+=1.0;\n     I(29.227,44.540,-18.707,21.051,31.485,-14.744,5.592,48.569,-20.200);\n     I(-16.082,36.272,-1.183,-8.192,44.902,-14.455,-7.554,24.985,-1.506);\n     I( 2.113,32.445,-16.716,21.051,31.485,-14.744,6.239,21.570,-4.279);\n     I(29.227,44.540,-18.707,28.565,32.567,-26.427,21.051,31.485,-14.744);\n     I( 2.113,32.445,-16.716,-7.554,24.985,-1.506,-8.192,44.902,-14.455);\n     I(-7.554,24.985,-1.506,2.113,32.445,-16.716,6.239,21.570,-4.279);\n     I( 2.113,32.445,-16.716,5.592,48.569,-20.200,21.051,31.485,-14.744);\n     if(B(-5.434,5.275,-18.550,22.396,14.842,-1.448))\n       {\n      numNodesVisited+=1.0;\n      I( 8.905,5.275,-5.377,10.393,14.842,-6.125,13.467,8.858,-17.503);\n      I(13.467,8.858,-17.503,22.396,5.312,-18.550,8.905,5.275,-5.377);\n      I( 8.905,5.275,-5.377,-5.434,7.631,-1.448,10.393,14.842,-6.125);\n     }\n     if(B(-17.363,32.445,-20.200,5.592,58.637,2.177)){\n      numNodesVisited+=1.0;\n      I( 5.592,48.569,-20.200,-8.192,44.902,-14.455,-5.463,58.637,-11.137);\n      I(-17.363,54.556,2.177,-8.192,44.902,-14.455,-16.082,36.272,-1.183);\n      I( 5.592,48.569,-20.200,2.113,32.445,-16.716,-8.192,44.902,-14.455);\n      I(-5.463,58.637,-11.137,-8.192,44.902,-14.455,-17.363,54.556,2.177);\n     }\n    }\n    if(B(-20.512,5.254,6.828,27.724,57.556,39.777))\n      {\n     numNodesVisited+=1.0;\n     I(-1.426,35.928,28.698,7.373,19.886,20.273,16.296,28.902,30.711);\n     I(-1.426,35.928,28.698,-1.693,44.654,30.415,-10.108,31.132,20.984);\n     I(23.549,47.895,31.616,16.296,28.902,30.711,27.724,41.869,39.777);\n     I(16.296,28.902,30.711,23.549,47.895,31.616,12.460,52.312,27.631);\n     I(-1.426,35.928,28.698,16.296,28.902,30.711,-1.693,44.654,30.415);\n     I(-20.512,46.442,9.215,-10.108,31.132,20.984,-15.620,41.254,19.235);\n     I(16.296,28.902,30.711,12.460,52.312,27.631,-1.693,44.654,30.415);\n     I(-10.108,31.132,20.984,7.373,19.886,20.273,-1.426,35.928,28.698);\n     I(-15.620,41.254,19.235,-10.108,31.132,20.984,-1.693,44.654,30.415);\n     if(B(-10.108,5.254,6.828,19.874,31.132,37.050))\n       {\n      numNodesVisited+=1.0;\n      I( 7.373,19.886,20.273,10.061,10.217,10.792,7.338,15.426,24.843);\n      I(16.296,28.902,30.711,7.373,19.886,20.273,17.848,17.253,29.948);\n      I(-6.453,5.376,22.765,10.061,10.217,10.792,-0.457,5.254,12.882);\n      I(17.848,17.253,29.948,7.373,19.886,20.273,7.338,15.426,24.843);\n      I(10.061,10.217,10.792,-6.453,5.376,22.765,7.338,15.426,24.843);\n      if(B(-10.108,5.254,6.828,10.061,31.132,20.984))\n        {\n       numNodesVisited+=1.0;\n       I(-1.815,11.859,7.485,-0.457,5.254,12.882,10.061,10.217,10.792);\n       I( 7.373,19.886,20.273,6.420,13.852,6.828,10.061,10.217,10.792);\n       I(-10.108,31.132,20.984,-7.136,23.835,15.087,7.373,19.886,20.273);\n       I(10.061,10.217,10.792,6.420,13.852,6.828,-1.815,11.859,7.485);\n      }\n      if(B(-6.453,5.310,22.765,19.874,17.253,37.050))\n        {\n       numNodesVisited+=1.0;\n       I( 1.372,8.036,29.638,7.338,15.426,24.843,-6.453,5.376,22.765);\n       I( 7.338,15.426,24.843,1.372,8.036,29.638,12.698,5.310,28.182);\n       I( 1.372,8.036,29.638,-6.453,5.376,22.765,12.698,5.310,28.182);\n       if(B( 7.338,5.310,24.843,19.874,17.253,37.050)){\n        numNodesVisited+=1.0;\n        I(12.698,5.310,28.182,17.848,17.253,29.948,7.338,15.426,24.843);\n        I(17.848,17.253,29.948,12.698,5.310,28.182,19.874,7.225,37.050);\n       }\n      }\n     }\n     if(B(-20.512,41.254,9.215,12.460,57.556,30.415))\n       {\n      numNodesVisited+=1.0;\n      I(-4.712,55.313,24.599,-15.620,41.254,19.235,-1.693,44.654,30.415);\n      I(12.460,52.312,27.631,-4.712,55.313,24.599,-1.693,44.654,30.415);\n      if(B(-20.512,41.254,9.215,-4.712,57.556,24.599))\n        {\n       numNodesVisited+=1.0;\n       I(-20.512,46.442,9.215,-15.620,41.254,19.235,-15.295,55.173,17.340);\n       I(-15.295,55.173,17.340,-15.620,41.254,19.235,-4.712,55.313,24.599);\n       I(-4.712,55.313,24.599,-19.512,57.556,24.398,-15.295,55.173,17.340);\n      }\n     }\n    }\n   }\n   if(B(-23.890,60.116,-45.197,30.041,112.514,33.935))\n     {\n    numNodesVisited+=1.0;\n    I(-23.890,67.722,7.029,-17.016,62.738,-6.631,-22.557,60.116,7.864);\n    I(13.185,81.566,-0.511,16.882,71.507,3.675,9.658,79.936,-7.294);\n    I( 4.804,89.171,-14.353,-2.582,90.300,-3.292,6.386,90.644,-8.426);\n    I(-9.317,87.905,-8.589,-19.342,78.162,1.291,-21.594,86.379,5.909);\n    I( 7.052,92.853,3.030,29.543,111.693,-11.766,9.680,100.125,-4.998);\n    I(-9.317,87.905,-8.589,-7.096,82.828,-11.379,-19.342,78.162,1.291);\n    I(-9.317,87.905,-8.589,-21.594,86.379,5.909,-2.582,90.300,-3.292);\n    I( 9.680,100.125,-4.998,23.362,106.939,-20.396,6.386,90.644,-8.426);\n    I(-7.096,82.828,-11.379,-17.016,62.738,-6.631,-19.342,78.162,1.291);\n    I(23.362,106.939,-20.396,9.680,100.125,-4.998,29.543,111.693,-11.766);\n    I( 9.680,100.125,-4.998,6.386,90.644,-8.426,-2.582,90.300,-3.292);\n    I(22.617,96.787,-2.459,29.543,111.693,-11.766,7.052,92.853,3.030);\n    I(11.323,68.510,-10.695,16.882,71.507,3.675,29.237,68.702,-1.372);\n    I(-2.155,100.336,-20.624,-9.317,87.905,-8.589,-2.582,90.300,-3.292);\n    I(-2.582,90.300,-3.292,4.804,89.171,-14.353,10.608,101.517,-28.954);\n    I(-19.342,78.162,1.291,-17.016,62.738,-6.631,-23.890,67.722,7.029);\n    I(-2.155,100.336,-20.624,-2.582,90.300,-3.292,10.608,101.517,-28.954);\n    I( 9.658,79.936,-7.294,16.882,71.507,3.675,11.323,68.510,-10.695);\n    if(B(-9.317,68.510,-45.197,30.041,112.514,-7.294))\n      {\n     numNodesVisited+=1.0;\n     I(-7.096,82.828,-11.379,6.276,90.716,-42.755,4.598,84.129,-36.359);\n     I( 6.386,90.644,-8.426,4.805,78.931,-10.328,4.804,89.171,-14.353);\n     I( 6.386,90.644,-8.426,28.902,94.550,-20.603,9.658,79.936,-7.294);\n     I(-4.246,94.470,-23.641,-7.096,82.828,-11.379,-9.317,87.905,-8.589);\n     I( 4.804,89.171,-14.353,3.331,82.537,-19.617,19.485,93.621,-38.630);\n     I(19.485,93.621,-38.630,21.241,104.227,-36.329,4.804,89.171,-14.353);\n     I(18.309,97.114,-45.197,4.598,84.129,-36.359,6.276,90.716,-42.755);\n     I( 3.270,94.083,-34.316,6.276,90.716,-42.755,-7.096,82.828,-11.379);\n     I(-2.155,100.336,-20.624,-4.246,94.470,-23.641,-9.317,87.905,-8.589);\n     I( 4.598,84.129,-36.359,19.485,93.621,-38.630,3.331,82.537,-19.617);\n     I(19.485,93.621,-38.630,4.598,84.129,-36.359,18.309,97.114,-45.197);\n     I( 3.270,94.083,-34.316,-7.096,82.828,-11.379,-4.246,94.470,-23.641);\n     I( 4.804,89.171,-14.353,21.241,104.227,-36.329,10.608,101.517,-28.954);\n     I( 6.386,90.644,-8.426,9.658,79.936,-7.294,4.805,78.931,-10.328);\n     if(B(-7.096,68.510,-36.359,11.323,89.171,-7.294))\n       {\n      numNodesVisited+=1.0;\n      I( 4.598,84.129,-36.359,-2.565,77.949,-12.458,-7.096,82.828,-11.379);\n      I( 3.331,82.537,-19.617,-2.565,77.949,-12.458,4.598,84.129,-36.359);\n      if(B(-2.565,68.510,-19.617,11.323,89.171,-7.294)){\n       numNodesVisited+=1.0;\n       I( 4.805,78.931,-10.328,9.658,79.936,-7.294,11.323,68.510,-10.695);\n       I( 4.805,78.931,-10.328,3.331,82.537,-19.617,4.804,89.171,-14.353);\n       I( 3.331,82.537,-19.617,4.805,78.931,-10.328,-2.565,77.949,-12.458);\n       I(-2.565,77.949,-12.458,4.805,78.931,-10.328,11.323,68.510,-10.695);\n      }\n     }\n     if(B(-4.462,90.644,-45.197,30.041,112.514,-8.426))\n       {\n      numNodesVisited+=1.0;\n      I(-4.462,103.480,-33.056,3.270,94.083,-34.316,-4.246,94.470,-23.641);\n      I(-4.462,103.480,-33.056,-4.246,94.470,-23.641,-2.155,100.336,-20.624);\n      I(28.902,94.550,-20.603,23.362,106.939,-20.396,30.041,103.613,-30.601);\n      I(-2.155,100.336,-20.624,1.880,110.211,-37.066,-4.462,103.480,-33.056);\n      I(-2.155,100.336,-20.624,10.608,101.517,-28.954,1.880,110.211,-37.066);\n      if(B(-4.462,90.716,-45.197,21.241,112.514,-28.954))\n        {\n       numNodesVisited+=1.0;\n       I( 8.380,107.664,-43.984,18.309,97.114,-45.197,6.276,90.716,-42.755);\n       I(16.220,112.514,-41.004,18.309,97.114,-45.197,8.380,107.664,-43.984);\n       I( 1.880,110.211,-37.066,16.220,112.514,-41.004,8.380,107.664,-43.984);\n       I(10.608,101.517,-28.954,16.220,112.514,-41.004,1.880,110.211,-37.066);\n       if(B(-4.462,90.716,-43.984,8.380,110.211,-33.056))\n         {\n        numNodesVisited+=1.0;\n        I( 8.380,107.664,-43.984,-4.462,103.480,-33.056,1.880,110.211,-37.066);\n        I(-4.462,103.480,-33.056,8.380,107.664,-43.984,3.270,94.083,-34.316);\n        I( 8.380,107.664,-43.984,6.276,90.716,-42.755,3.270,94.083,-34.316);\n       }\n       if(B(10.608,93.621,-45.197,21.241,112.514,-28.954))\n         {\n        numNodesVisited+=1.0;\n        I(16.220,112.514,-41.004,21.241,104.227,-36.329,18.309,97.114,-45.197);\n        I(21.241,104.227,-36.329,19.485,93.621,-38.630,18.309,97.114,-45.197);\n        I(10.608,101.517,-28.954,21.241,104.227,-36.329,16.220,112.514,-41.004);\n       }\n      }\n      if(B( 6.386,90.644,-20.603,28.902,106.939,-8.426))\n        {\n       numNodesVisited+=1.0;\n       I(23.362,106.939,-20.396,28.902,94.550,-20.603,6.386,90.644,-8.426);\n      }\n     }\n    }\n    if(B(-23.890,60.116,-4.998,29.237,100.125,33.935))\n      {\n     numNodesVisited+=1.0;\n     I(-2.582,90.300,-3.292,7.052,92.853,3.030,9.680,100.125,-4.998);\n     I(-4.205,93.740,8.040,7.052,92.853,3.030,-2.582,90.300,-3.292);\n     I( 3.630,88.539,19.402,-14.117,88.406,16.907,-6.772,83.070,27.367);\n     I( 5.315,80.260,17.000,-5.818,62.804,33.935,1.501,65.005,25.918);\n     I( 5.315,80.260,17.000,1.501,65.005,25.918,13.977,65.434,17.522);\n     I( 5.315,80.260,17.000,-6.772,83.070,27.367,-5.818,62.804,33.935);\n     I(-6.772,83.070,27.367,5.315,80.260,17.000,3.630,88.539,19.402);\n     I(10.398,89.710,3.888,-4.205,93.740,8.040,3.630,88.539,19.402);\n     I(-4.205,93.740,8.040,-14.117,88.406,16.907,3.630,88.539,19.402);\n     I( 7.052,92.853,3.030,-4.205,93.740,8.040,10.398,89.710,3.888);\n     if(B(-23.890,60.116,-3.292,-2.582,93.740,33.935))\n       {\n      numNodesVisited+=1.0;\n      I(-21.594,86.379,5.909,-14.117,88.406,16.907,-4.205,93.740,8.040);\n      I(-23.890,67.722,7.029,-20.018,77.263,24.491,-19.342,78.162,1.291);\n      I(-22.722,64.221,26.361,-20.018,77.263,24.491,-22.557,60.116,7.864);\n      I(-21.594,86.379,5.909,-19.342,78.162,1.291,-20.018,77.263,24.491);\n      I(-21.594,86.379,5.909,-20.018,77.263,24.491,-14.117,88.406,16.907);\n      I(-20.018,77.263,24.491,-23.890,67.722,7.029,-22.557,60.116,7.864);\n      if(B(-21.594,86.379,-3.292,-2.582,93.740,8.040))\n        {\n       numNodesVisited+=1.0;\n       I(-21.594,86.379,5.909,-4.205,93.740,8.040,-2.582,90.300,-3.292);\n      }\n      if(B(-22.722,62.804,16.907,-5.818,88.406,33.935))\n        {\n       numNodesVisited+=1.0;\n       I(-6.772,83.070,27.367,-14.117,88.406,16.907,-20.018,77.263,24.491);\n       I(-20.018,77.263,24.491,-14.483,70.881,32.905,-6.772,83.070,27.367);\n       I(-20.018,77.263,24.491,-22.722,64.221,26.361,-14.483,70.881,32.905);\n       I(-5.818,62.804,33.935,-6.772,83.070,27.367,-14.483,70.881,32.905);\n      }\n     }\n     if(B( 3.630,64.590,-2.459,29.237,96.787,20.211))\n       {\n      numNodesVisited+=1.0;\n      I(13.185,81.566,-0.511,13.977,65.434,17.522,16.882,71.507,3.675);\n      I( 5.315,80.260,17.000,13.977,65.434,17.522,10.398,89.710,3.888);\n      I(10.398,89.710,3.888,13.977,65.434,17.522,13.185,81.566,-0.511);\n      I( 5.315,80.260,17.000,10.398,89.710,3.888,3.630,88.539,19.402);\n      if(B(13.977,64.590,-1.372,29.237,71.507,20.211))\n        {\n       numNodesVisited+=1.0;\n       I(29.237,68.702,-1.372,16.882,71.507,3.675,27.161,64.590,20.211);\n       I(16.882,71.507,3.675,13.977,65.434,17.522,27.161,64.590,20.211);\n      }\n      if(B( 7.052,81.566,-2.459,22.617,96.787,3.888))\n        {\n       numNodesVisited+=1.0;\n       I(10.398,89.710,3.888,22.617,96.787,-2.459,7.052,92.853,3.030);\n       I(10.398,89.710,3.888,13.185,81.566,-0.511,22.617,96.787,-2.459);\n      }\n     }\n    }\n   }\n  }\n  if(B(31.117,5.281,-30.643,84.233,112.434,41.428))\n    {\n   numNodesVisited+=1.0;\n   I(59.223,63.991,-11.887,68.242,51.547,-9.495,57.814,53.833,-13.205);\n   I(55.152,50.349,35.401,71.848,51.513,25.795,62.428,60.189,28.382);\n   I(59.223,63.991,-11.887,76.141,55.116,2.216,68.242,51.547,-9.495);\n   I(76.141,55.116,2.216,59.223,63.991,-11.887,63.770,69.473,6.074);\n   I(76.141,55.116,2.216,63.770,69.473,6.074,67.757,64.533,19.785);\n   I(55.152,50.349,35.401,62.428,60.189,28.382,39.498,46.218,40.304);\n   I(62.428,60.189,28.382,42.551,64.352,31.091,39.498,46.218,40.304);\n   I(32.651,59.562,-16.574,57.814,53.833,-13.205,46.160,49.961,-16.626);\n   I(59.223,63.991,-11.887,57.814,53.833,-13.205,43.605,63.727,-11.608);\n   I(67.757,64.533,19.785,62.428,60.189,28.382,71.848,51.513,25.795);\n   I(67.757,64.533,19.785,71.848,51.513,25.795,76.141,55.116,2.216);\n   I(43.605,63.727,-11.608,57.814,53.833,-13.205,32.651,59.562,-16.574);\n   if(B(31.181,5.281,-26.832,84.233,55.116,41.428))\n     {\n    numNodesVisited+=1.0;\n    I(76.141,55.116,2.216,77.160,40.036,20.248,77.444,31.786,9.293);\n    I(76.141,55.116,2.216,77.444,31.786,9.293,74.177,41.443,-6.972);\n    I(82.997,31.685,9.758,79.977,21.759,3.088,74.104,25.026,2.433);\n    I(82.997,31.685,9.758,84.233,23.274,10.809,79.977,21.759,3.088);\n    I(74.177,41.443,-6.972,77.444,31.786,9.293,74.104,25.026,2.433);\n    I(74.104,25.026,2.433,77.444,31.786,9.293,82.997,31.685,9.758);\n    I(74.378,5.281,16.983,67.266,5.336,25.762,70.472,5.295,5.591);\n    I(79.977,21.759,3.088,84.233,23.274,10.809,70.472,5.295,5.591);\n    I(71.848,51.513,25.795,77.160,40.036,20.248,76.141,55.116,2.216);\n    I(84.233,23.274,10.809,74.378,5.281,16.983,70.472,5.295,5.591);\n    if(B(31.863,5.295,-26.832,79.977,55.116,5.591))\n      {\n     numNodesVisited+=1.0;\n     I(63.936,34.695,-15.736,63.092,22.043,-13.910,49.960,29.367,-21.494);\n     I(74.104,25.026,2.433,63.936,34.695,-15.736,74.177,41.443,-6.972);\n     I(74.104,25.026,2.433,63.092,22.043,-13.910,63.936,34.695,-15.736);\n     I(36.519,43.722,-26.357,49.960,29.367,-21.494,41.233,32.639,-26.832);\n     I(63.936,34.695,-15.736,49.960,29.367,-21.494,36.519,43.722,-26.357);\n     if(B(31.863,5.295,-21.494,79.977,29.367,5.591))\n       {\n      numNodesVisited+=1.0;\n      I(56.439,14.206,-12.568,49.960,29.367,-21.494,63.092,22.043,-13.910);\n      I(54.832,5.352,-12.991,56.439,14.206,-12.568,54.923,5.376,0.265);\n      I(54.923,5.376,0.265,65.393,12.979,-1.685,70.472,5.295,5.591);\n      I(56.439,14.206,-12.568,54.832,5.352,-12.991,31.863,15.076,-17.091);\n      I(38.374,16.789,-19.974,56.439,14.206,-12.568,31.863,15.076,-17.091);\n      I(56.439,14.206,-12.568,65.393,12.979,-1.685,54.923,5.376,0.265);\n      I(49.960,29.367,-21.494,56.439,14.206,-12.568,38.374,16.789,-19.974);\n      if(B(56.439,5.295,-13.910,79.977,25.026,5.591))\n        {\n       numNodesVisited+=1.0;\n       I(63.092,22.043,-13.910,74.104,25.026,2.433,65.393,12.979,-1.685);\n       I(63.092,22.043,-13.910,65.393,12.979,-1.685,56.439,14.206,-12.568);\n       I(79.977,21.759,3.088,70.472,5.295,5.591,74.104,25.026,2.433);\n       I(74.104,25.026,2.433,70.472,5.295,5.591,65.393,12.979,-1.685);\n      }\n     }\n     if(B(36.519,34.695,-26.357,76.141,55.116,2.216))\n       {\n      numNodesVisited+=1.0;\n      I(56.677,42.754,-18.934,63.936,34.695,-15.736,36.519,43.722,-26.357);\n      I(56.677,42.754,-18.934,36.519,43.722,-26.357,46.160,49.961,-16.626);\n      I(57.814,53.833,-13.205,56.677,42.754,-18.934,46.160,49.961,-16.626);\n      if(B(56.677,34.695,-18.934,76.141,55.116,2.216))\n        {\n       numNodesVisited+=1.0;\n       I(57.814,53.833,-13.205,68.242,51.547,-9.495,56.677,42.754,-18.934);\n       I(76.141,55.116,2.216,74.177,41.443,-6.972,68.242,51.547,-9.495);\n       I(63.936,34.695,-15.736,56.677,42.754,-18.934,68.242,51.547,-9.495);\n       I(63.936,34.695,-15.736,68.242,51.547,-9.495,74.177,41.443,-6.972);\n      }\n     }\n    }\n    if(B(31.181,5.281,9.293,84.233,51.513,41.428))\n      {\n     numNodesVisited+=1.0;\n     I(42.713,30.459,41.428,62.886,37.383,34.118,49.208,41.972,39.966);\n     I(55.136,21.712,33.819,64.278,17.090,29.077,62.886,37.383,34.118);\n     I(55.260,14.605,29.121,46.470,5.312,32.180,67.266,5.336,25.762);\n     I(55.136,21.712,33.819,55.260,14.605,29.121,64.278,17.090,29.077);\n     I(62.886,37.383,34.118,42.713,30.459,41.428,55.136,21.712,33.819);\n     I(55.152,50.349,35.401,62.886,37.383,34.118,71.848,51.513,25.795);\n     I(55.152,50.349,35.401,49.208,41.972,39.966,62.886,37.383,34.118);\n     I(55.260,14.605,29.121,67.266,5.336,25.762,64.278,17.090,29.077);     \n     ;ass4(pos,dir,invDir,t,outNormal,numNodesVisited)    \n     ;ass3(pos,dir,invDir,t,outNormal,numNodesVisited)\n    ;}\n   }\n   ;torsoBackANDleftEarTip(pos,dir,invDir,t,outNormal,numNodesVisited)\n  ;}\n }\n return t;\n}\n\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord\n){\n float time=iTime*0.25+1.0;\n \n vec3 viewDir=normalize(vec3((fragCoord.xy-iResolution.xy*0.5)/iResolution.y,1.0));\n \n vec3 camUp=vec3(0,1,0);\n vec3 camTarget=vec3(30,50,9);\n vec3 camPos=camTarget+vec3(cos(time)*150.0,50.0,sin(time)*150.0);\n \n vec3 forward=normalize(camTarget-camPos);\n vec3 left=normalize(cross(forward,camUp));\n vec3 up=cross(left,forward);\n\n mat3 viewToWorld=mat3(left,up,forward);\n \n vec3 worldDir=viewToWorld*viewDir;\n \n vec3 worldNormal;\n float t=intersectMesh(camPos,worldDir,worldNormal);\n\n vec3 color=vec3(.45,.5,.55)+vec3(.3,.4,.5)*worldDir.y;\n if(t<zFar)\n   {\n  const vec3 lightDir=normalize(vec3(1,.9,.3));\n  color=max(.1+.9*dot(worldNormal,lightDir),0.)*vec3(1.1,.85,.6);\n  color+=(.5+.5*worldNormal.y)*vec3(.1,.2,.4)*.375;\n  color+=max(.4+.6*dot(worldNormal,lightDir*vec3(-1,1,-1)),0.)*0.0875;\n  color+=vec3(.03);\n  color*=.8;\n }\n\n ;if (SHOW_HIERARCHY)color+=numNodesVisited*.02\n ;fragColor=vec4(pow(color,vec3(.4545)),1.)\n ;}\n \n \n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}