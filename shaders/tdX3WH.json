{
    "Shader": {
        "info": {
            "date": "1546001585",
            "description": "Lambda Fractal, julia variation",
            "flags": 0,
            "hasliked": 0,
            "id": "tdX3WH",
            "likes": 1,
            "name": "Lambra fractal (Julia)",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Pork",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "vec2 cmul (vec2 c1, vec2 c2)\n{\n\tfloat a = c1.x;\n\tfloat b = c1.y;\n\tfloat c = c2.x;\n\tfloat d = c2.y;\n\n\treturn vec2 (a * c - b * d, b * c + a * d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = fragCoord.xy / iResolution.xy;\n    //scaling real axis to [-2.5, 1.5] and  imaginary axis to  [-1.5, 1.5]/\n    //Eyeballed coordinates to center the fractal\n    c = c * vec2(4,3) - vec2(1.5, 1.5); \n\n    vec2 z = c;\n    fragColor = vec4(0);\n    \n    int i = 0;\n    \n    for (;i<100;i++)\n    {\n        if (z.x * z.x + z.y * z.y >= 4.) \n        {\n            break;\n        }\n       vec2 constant = vec2(0.85, 0.6);\n       vec2 oneminusz = vec2(1, 0) - z;\n       vec2 zTimesOneMinusZ = cmul(z, oneminusz);\n       z = cmul(vec2(constant), zTimesOneMinusZ);\n    }\n    \n    fragColor = vec4(i)/100.;\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}