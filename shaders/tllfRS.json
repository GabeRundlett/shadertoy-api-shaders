{
    "Shader": {
        "info": {
            "date": "1597085668",
            "description": "Electronic board\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tllfRS",
            "likes": 6,
            "name": "Electronic board by MareeBree",
            "published": 3,
            "tags": [
                "digital"
            ],
            "usePreview": 0,
            "username": "mareebree",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define S(x,y,z) smoothstep(x,y,z)\n#define AR (iResolution.x/iResolution.y)\n\n#define pUP 0\n#define pEND 1\n#define pLEFT 2\n#define pRIGHT 3\n#define pFLEFT 4\n#define pFRIGHT 5\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\n// All components are in the range [0â€¦1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat dist(vec2 uv,vec2 x)\n{\n\treturn length(uv-x*vec2(1.0,1.0/AR));\n}\n\nvec3 circle(vec2 uv,float r, float lt)\n{\n    float lb = 0.005; // line blur\n    float d = dist(uv,vec2(0.5));\n    return vec3(min(S(r-lb-lt,r-lt,d),S(r+lb+lt,r+lt,d)));\n}\n\nvec3 lineUp(vec2 uv, float lt /*line thickness*/)\n{\n    float lb = 0.005; // line blur\n    return vec3(min(S(0.5-lb-lt,0.5-lt,uv.x),S(0.5+lb+lt,0.5+lt,uv.x)));\n}\n\nvec3 lineLeft(vec2 uv, float lt)\n{\n    vec3 colUp = lineUp(uv,lt);\n    float lb = 0.005; // line blur\n    \n    lt += 0.001;\n    vec3 colDiag = vec3(min(S(1.0-lb-lt,1.0-lt,uv.x+uv.y),S(1.0+lb+lt,1.0+lt,uv.x+uv.y)));\n    \n    return mix(colUp,colDiag,S(0.5,0.51,uv.y));\n}\n\nvec3 lineFromLeft(vec2 uv, float lt)\n{\n    uv.y = 1.0-uv.y;\n    return lineLeft(uv,lt);\n}\n\nvec3 lineRight(vec2 uv, float lt)\n{\n    uv.x = 1.0-uv.x;\n    return lineLeft(uv,lt);\n}\n\nvec3 lineFromRight(vec2 uv, float lt)\n{\n\tuv.y = 1.0-uv.y;\n    return lineRight(uv,lt);\n}\n\nvec3 lineEnd(vec2 uv, float lt, float lp /* line percent*/)\n{\n    lp /= AR;\n    vec3 lineCol = lineUp(uv,lt);\n    \n    float circleR = 0.1;\n    vec2 circleUV = uv;\n    circleUV.y += 0.5*(1.0/AR);\n    circleUV.y -= circleR+lt;\n    circleUV.y -= lp;\n    vec3 circleCol = circle(circleUV,circleR,lt);\n    \n    return mix(lineCol,circleCol,S(lp-0.01,lp,uv.y));\n}\n\nint calcType(vec2 id)\n{\n    float r = rand(id);\n    \n    if(r > 0.5) return pUP;\n    else if(r > 0.3) return pEND;\n    else if(r > 0.15) return pFLEFT;\n    else return pFRIGHT;\n}\n\nint getType2(vec2 id)\n{\n    return calcType(id);\n}\n\nint getType1(vec2 id)\n{\n    int upType = getType2(id+vec2(0.0,1.0));\n    int ulType = getType2(id+vec2(-1.0,1.0));\n    int urType = getType2(id+vec2(1.0,1.0));\n    \n    int type = calcType(id);\n    \n    if(ulType == pFRIGHT) return pLEFT;\n    if(urType == pFLEFT)  return pRIGHT;\n    if(upType == pFLEFT || upType == pFRIGHT) return pUP;\n    if(upType == pUP && type == pUP) return pUP;\n    \n\treturn type;\n}\n\nint getType0(vec2 id)\n{\n    int upType = getType1(id+vec2(0.0,1.0));\n    int ulType = getType1(id+vec2(-1.0,1.0));\n    int urType = getType1(id+vec2(1.0,1.0));\n    \n    int type = calcType(id);\n    \n    if(ulType == pFRIGHT) return pLEFT;\n    if(urType == pFLEFT)  return pRIGHT;\n    if(upType == pFLEFT || upType == pFRIGHT) return pUP;\n    if(upType == pUP && type == pUP) return pUP;\n    \n\treturn type;\n}\n\nint getType(vec2 id)\n{\n    int upType = getType0(id+vec2(0.0,1.0));\n    int ulType = getType0(id+vec2(-1.0,1.0));\n    int urType = getType0(id+vec2(1.0,1.0));\n    \n    int type = calcType(id);\n    \n    if(ulType == pFRIGHT) return pLEFT;\n    if(urType == pFLEFT)  return pRIGHT;\n    if(upType == pFLEFT || upType == pFRIGHT) return pUP;\n    if(upType == pUP && type == pUP) return pUP;\n    \n\treturn type;\n}\n\nvec3 getColor(vec2 id)\n{\n    int type = getType(id);\n    while(type != pEND)\n    {\n        id.y+=1.0;\n        if(type==pRIGHT) id.x += 1.0;\n        else if(type==pLEFT) id.x -= 1.0;\n        type = getType(id);\n    }\n    \n    float r = fract(rand(id)*231.0);\n    r = 0.5*r + 0.1;\n    \n    \n    vec3 hsvColor = vec3(r,0.7,0.9);\n    return hsv2rgb(hsvColor);\n}\n\nvec3 linesLayer(vec2 uv,vec2 id)\n{\n    vec3 col = vec3(0.0);\n    \n    int type = getType(id);\n    \n    float lt = 0.03;\n    \n    if(type==pUP) col = lineUp(uv,lt);\n    else if(type==pEND) col = lineEnd(uv,lt,0.5);\n    else if(type==pLEFT) col = lineLeft(uv,lt);\n   \telse if(type==pRIGHT) col = lineRight(uv,lt);\n   \telse if(type==pFRIGHT) col = lineFromRight(uv,lt);\n   \telse if(type==pFLEFT) col = lineFromLeft(uv,lt);\n    \n    col *= getColor(id);\n        \n   \treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = 0.15*iTime;\n    vec2 globalUV = fragCoord/iResolution.xy;\n    globalUV.y /= AR;\n    globalUV.x += 0.2*globalUV.y;\n    vec2 uv = globalUV;\n\n    uv.y -= t;\n    \n    uv *= vec2(10.0+2.5*globalUV.y,16.0);\n    \n    vec2 id = floor(uv);\n    uv = fract(uv);\n    \n    float rnd = rand(id);\n    \n    vec3 col = vec3(0.0);\n    \n\tcol = linesLayer(uv,id);\n        \n    vec3 bgMask = vec3(1.0)-col;\n    \n    bgMask *= abs(sin(1.2*6.18*globalUV.x));\n    bgMask = clamp(bgMask,0.7,0.85);\n    \n    for(float y = 0.1;y<1.0;y+=0.2)\n    \tbgMask *= max(S(0.03,0.1,uv.y-y),S(0.1,0.05,uv.y-y));\n       \n    vec3 bgColor = hsv2rgb(vec3(0.3,0.7,0.4));\n    bgColor -= vec3(0.1 + 0.05*sin(id.x));\n    \n    col += bgMask*bgColor;    \n    \n    //if(uv.x > 0.98 || uv.y > 0.98) col.r = 1.0;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}