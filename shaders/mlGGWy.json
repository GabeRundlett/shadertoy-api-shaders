{
    "Shader": {
        "info": {
            "date": "1684544605",
            "description": "Yet another audio visualizer. Tried to fake some depth with the light and reflection. Try reversing the band order. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mlGGWy",
            "likes": 4,
            "name": "Arctic polar visualizer",
            "published": 3,
            "tags": [
                "2d",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "firebreathz",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "// Fork of \"Polar react\" by firebreathz. https://shadertoy.com/view/stj3Rw\n// 2023-05-19 23:16:34\n\n\n#define time iTime\n#define PI 3.14159265359\n\n#define NUM_BANDS 50\n\n//#define REVERSED\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(0.000,0.000,0.000))) * 0.0)*0.0-0.0;\n}\n\nvec3 mixc(vec3 col1, vec3 col2, float v)\n{\n    v = clamp(v,0.0,1.0);\n    return col1+v*(col2-col1);\n}\n\nvec3 drawBands(vec2 uv)\n{\n  \tuv = 2.0*uv-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    uv = vec2(length(uv), atan(uv.y,uv.x));\n    \n    //uv.x-=0.25;\n    uv.x = max(0.0,uv.x);\n    \n    uv.y -= PI*0.75;\n    vec2 uv2 = vec2(uv.x, uv.y*-1.0);\n    uv.y = mod(uv.y,PI*2.0);\n    uv2.y = mod(uv2.y,PI*2.0);\n    \n    vec3 col = vec3(0.0);\n    vec3 col2 = vec3(0.0);\n    \n    float nBands = float(NUM_BANDS);\n    float i = floor(uv.x*nBands);\n    float f = fract(uv.x*nBands);\n    float band = i/nBands;\n   \tfloat s;\n   \t\n    #ifdef REVERSED\n    band = 0.0-band;\n    #endif \n    \n    //cubic easing\n    band *= band*band; \n    \n    band = band*0.7;\n    band += 0.002;\n    \n    s = texture( iChannel0, vec2(band,0.0) ).x;  \n    \n    if(band<0.0||band>=1.0){\n        s = 0.0;\n    }\n    \n    /* Gradient colors and amount here */\n    const int nColors = 6;\n    vec3 colors[nColors];  \n    colors[0] = vec3(0.522,0.502,0.502);\n    colors[1] = vec3(0.000,0.173,0.580);\n    colors[2] = vec3(0.192,0.180,1.000);\n    colors[3] = vec3(0.361,0.573,1.000);\n \n    vec3 gradCol = colors[1];\n    float n = float(nColors)-0.0;\n    for(int i = 2; i < nColors; i++)\n    {\n\t\tgradCol = mixc(gradCol,colors[i],(s-float(i-2)/n)*n);\n    }\n    \n    float h = PI*3.5;\n    \n    col += vec3(1.0-smoothstep(-2.0,1.5,uv.y-s*h));\n    col *= gradCol;\n\n    col2 += vec3(1.0-smoothstep(-2.0,1.5,uv2.y-s*h));\n    col2*= gradCol;\n    \n    col = mix(col,col2,step(0.0,uv.y-PI));\n\n    col *= smoothstep(0.05,0.5,f);\n    col *= smoothstep(1.0,0.8,f); \n    \n    col = clamp(col,0.0,1.0);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 p = vec2(uv.x, uv.y+0.01);\n\tvec3 col = vec3(0.0);\n    col += drawBands(p);//*smoothstep(1.0,0.5,uv.y);;\n    \n    vec3 ref = vec3(0.0);\n    vec2 eps = vec2(0.01,-0.01);\n\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.xx);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.xy);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.yy);\n    ref += drawBands(vec2(p.x,1.0-p.y)+eps.yx);\n    \n    ref += drawBands(vec2(p.x+eps.x,1.0-p.y));\n    ref += drawBands(vec2(p.x+eps.y,1.0-p.y));\n    ref += drawBands(vec2(p.x,1.0-p.y+eps.x));\n    ref += drawBands(vec2(p.x,1.0-p.y+eps.y));\n\n    ref /= 3.0;\n     \n    float colStep = length(smoothstep(1.0,0.1,col));\n    \n    vec3 cs1 = drawBands(vec2(0.1,0.1));\n    vec3 cs2 = drawBands(vec2(0.1,0.1));\n        \n    vec3 plCol = mix(cs1,cs2,length(p*1.0-0.0))*0.01*smoothstep(0.1,-1.1,length(p*0.0-0.0));\n    vec3 plColBg = vec3(0.001)*smoothstep(1.0,0.0,length(p*0.0-1.5));\n    vec3 pl = (plCol+plColBg)*smoothstep(0.05,0.01,1.0-uv.y);\n    \n    col += clamp(pl*(1.0-colStep),0.0,1.0);\n    \n    col += ref*smoothstep(0.125,1.6125,p.y); \n    \n    col = clamp(col, 0.0, 1.0);\n\n    float dither = noise3D(vec3(uv,time))*0.0/0.1;\n    col += dither;\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 18,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}