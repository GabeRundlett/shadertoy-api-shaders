{
    "Shader": {
        "info": {
            "date": "1679101296",
            "description": "Close where I live, there is a fascinating radio tower which has an interesting light pattern at night. I tried to closely simulate that effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdVGWG",
            "likes": 6,
            "name": "Radio Tower Lights",
            "published": 3,
            "tags": [
                "tower",
                "night",
                "lights",
                "radio"
            ],
            "usePreview": 0,
            "username": "oemfoe",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "\n\nconst float E = 0.01;\nconst float PI = 3.14159265359;\nconst float TWOPI = 6.28318530718;\nconst float tmax = 10000.;\nconst float inf = 10000.0;\n\nmat3 rotY(float r){return mat3(cos(r), 0., sin(r), 0., 1., 0., -sin(r), 0., cos(r));}\nmat3 rotX(float r){return mat3(1., 0., 0., 0., cos(r), sin(r), 0., -sin(r), cos(r));}\nmat3 rotZ(float r){return mat3(cos(r), sin(r), 0., -sin(r), cos(r), 0., 0., 0., 1.);}\n\n\n\nfloat line(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat vline(vec3 p, float h, float r)\n{\n    p.y -= clamp(p.y, 0.0, h);\n    return length(p) - r;\n}\n\nfloat vlineCyl(vec3 p, float h, float r)\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat plane(vec3 p, vec3 n, float h)\n{\n    return dot(p,n) + h;\n}\n\nfloat sphere(vec3 p, float radius){\n    return length(p) - radius;\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 map(vec3 p) {\n    vec3 p0 = p;\n    p = rotX(0.2) * p;\n    p = rotY(mod(iTime, TWOPI)) * p;\n    \n    float fSphere = sphere(p, 1.);\n    vec3 pp = p;\n    pp.y += 0.5 * texture(iChannel0, vec2(pp.x / 100., pp.z / 100.)).x;\n    float fPlane = plane(pp, vec3(0., 1., 0.), 1.);\n    \n    vec3 tp = p;\n    \n    float tm = 0.2;\n    float ts = 0.2;\n    float tt = 0.01;\n    float truss1 = line(tp, vec3(-ts,-2.,ts), vec3(0., 2., 0.), tt);\n    float truss2 = line(tp, vec3(ts,-2.,-ts), vec3(0., 2., 0.), tt);\n    float truss3 = line(tp, vec3(ts,-2.,ts), vec3(0., 2., 0.), tt);\n    float truss4 = line(tp, vec3(-ts,-2.,-ts), vec3(0., 2., 0.), tt);\n    float trussTop = line(tp, vec3(0., 1.8, 0.), vec3(0., 2.2, 0.), tt * 2.);\n    float fTruss = min(min(min(truss1, truss2), min(truss3, truss4)), trussTop);\n    for (float iy = -2.; iy < 2.; iy += 0.4)\n    for (float ix = -1.; ix < 3.; ix += 2.)\n    for (float iz = -1.; iz < 3.; iz += 2.)\n    {\n        float hd = ix * iz > 0. ? 1. : -1.;\n        vec3 pos = mix(vec3(0.2 * ix, -2., 0.2 * iz), vec3(0., 2., 0.), smoothstep(-2., 2., iy + 0.2 * hd));\n        vec3 next = rotY(PI / 2.) * mix(vec3(0.2 * ix, -2., 0.2 * iz), vec3(0., 2., 0.), smoothstep(-2., 2., iy - 0.2 * hd));\n        vec3 pos2 = mix(vec3(0.2 * ix, -2., 0.2 * iz), vec3(0., 2., 0.), smoothstep(-2., 2., iy + 0.2));\n        vec3 next2 = rotY(PI / 2.) * pos2;\n        float support = line(tp, pos, next, tt / 2.);\n        float support2 = line(tp, pos2, next2, tt / 2.);\n        //float support = box(tp - 0.5 * (pos + next), vec3(0.01));\n        fTruss = min(fTruss, min(support, support2));\n    }\n    \n    // TODO: operator kotteke\n    float fBox = box(p - vec3(0., -1.3, 0.), vec3(0.4, 0.2, 0.4));\n    fBox = min(fBox, box(p - vec3(5., -1., 0.), vec3(0.5, 0.5, 1.)));\n    \n    float combined = min(fPlane, min(fBox, fTruss));\n    float id = -1.;\n    if (combined == fSphere)\n        id = 0.;\n    if (combined == fPlane)\n        id = 1.;\n    if (combined == fTruss)\n        id = 2.;\n    if (combined == fBox)\n        id = 3.;\n    if (combined == trussTop)\n        id = 4.;\n    return vec4(combined, id, 0., 0.);\n}\n\nfloat scene(vec3 p) {\n    return map(p).x;\n}\n\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + E, p.y, p.z)) - scene(vec3(p.x - E, p.y, p.z)),\n        scene(vec3(p.x, p.y + E, p.z)) - scene(vec3(p.x, p.y - E, p.z)),\n        scene(vec3(p.x, p.y, p.z + E)) - scene(vec3(p.x, p.y, p.z - E))\n    ));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord/iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    uv -= 0.5;\n    uv.y /= aspect;\n    \n    vec3 ro = vec3(0.0, 0.0, -10.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 ld = vec3(.5, 1., -1.);\n    float t = 0.0;\n    float d = 0.0;\n    vec3 c = vec3(0.000,0.000,0.000);\n    float id;\n    \n    \n    \n    for (int i = 0; i < 32 && t < tmax; i++){\n        vec3 p = ro + t * rd;\n        vec4 r = map(p);\n        d = r.x;\n        id = r.y;\n        if (d < E) {\n            // hit\n            vec3 n = normal(p);\n            float l = smoothstep(0.0, 1.0, dot(n, ld));\n            c = vec3(l * 0.8 + 0.2) * col;\n            if (id == 1.)\n                c = vec3(0.255,0.165,0.004) * l;\n            else if (id == 2.)\n                c = (mod(p.y, 0.2) > 0.1 ? vec3(1., 0., 0.) : vec3(1.)) * l * 0.5;\n            else if (id == 3.)\n                c = vec3(0.722,0.722,0.722) * (0.2 + 0.8 * l);\n            else if (id == 4.)\n                c = (mod(p.y, 0.1) > 0.05 ? vec3(1., 0., 0.) : vec3(1.)) * l * 0.5;\n            \n            \n            break;\n        }\n        t += d * 1.;\n    }\n    \n    vec3 lampColor = vec3(0.827,0.949,0.973);\n    \n    float ib = fract(iTime / 1.75);\n    \n    for (float ix = -1.; ix < 3.; ix += 2.)\n    for (float iy = -1.; iy < 3.; iy += 2.)\n    {\n        vec3 lampPos1 = rotY(iTime) * mix(vec3(0.2 * ix, -2., 0.2 * iy), vec3(0., 2., 0.), 0.7);\n        vec2 lampUv1 = normalize(lampPos1 - ro).xy;\n        float lamp1 = 1. - smoothstep(0., 0.0075, length(uv - lampUv1));\n        vec3 lampPos2 = rotY(iTime) * mix(vec3(0.2 * ix, -2., 0.2 * iy), vec3(0., 2., 0.), 0.8);\n        vec2 lampUv2 = normalize(lampPos2 - ro).xy;\n        float lamp2 = 1. - smoothstep(0., 0.0075, length(uv - lampUv2));\n        vec3 lampPos3 = rotY(iTime) * mix(vec3(0.2 * ix, -2., 0.2 * iy), vec3(0., 2., 0.), 0.9);\n        vec2 lampUv3 = normalize(lampPos3 - ro).xy;\n        float lamp3 = 1. - smoothstep(0., 0.0075, length(uv - lampUv3));\n        //c += lamp * vec3(0.8, 0.8, 1.);\n        if (ib > 0.10 && ib < 0.85) c = mix(c, lampColor, pow(lamp1, 2.));\n        if (ib > 0.15 && ib < 0.9)  c = mix(c, lampColor, pow(lamp2, 2.));\n        if (ib > 0.20 && ib < 0.95) c = mix(c, lampColor, pow(lamp3, 2.));\n    }\n    vec3 lampPos4 = rotY(iTime) * mix(vec3(0., -2., 0.), vec3(0., 2., 0.), 1.);\n    vec2 lampUv4 = normalize(lampPos4 - ro).xy;\n    float lamp4 = 1. - smoothstep(0., 0.01, length(uv - lampUv4));\n    if (ib > 0.25 && ib < 1.) c = mix(c, lampColor, pow(lamp4, 2.));\n    \n    \n    // float wave = texelFetch(iChannel0, ivec2(int(512.0 * uv2.x), 1.), 0).x;\n    \n    // Output to screen\n    fragColor = vec4(c /* + texture(iChannel0, uv2).xxx*/, 1.0);\n    \n    //if (abs(wave - uv2.y) < 0.002)\n    //    fragColor = vec4(1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}