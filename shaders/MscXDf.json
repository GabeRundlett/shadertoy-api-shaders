{
    "Shader": {
        "info": {
            "date": "1461823762",
            "description": "Our solar system.  Heavily modified from a ball occlusion example by iq.\n\nSimple at the moment.  Might add more later.",
            "flags": 0,
            "hasliked": 0,
            "id": "MscXDf",
            "likes": 18,
            "name": "Sol System",
            "published": 3,
            "tags": [
                "3d",
                "sun",
                "earth",
                "raytrace",
                "moon",
                "planets"
            ],
            "usePreview": 0,
            "username": "dencarl",
            "viewed": 1735
        },
        "renderpass": [
            {
                "code": "// Inspired by https://www.shadertoy.com/view/ldX3Ws (inigo quilez - iq/2013)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// TODO: \n//    - Saturn rings\n//    - asteroid belt\n//    - shading\n//    - textures\n//    - shadows / eclipses\n//    - skybox / milky way\n\n#define eps 0.001\n#define NUMSPH 9\nvec4 sphere[NUMSPH];\n\nvoid getPlanet( in int i, out float r, out float d, out vec3 c, out float op, out float rp, out float ga)\n{\n    // i index\n    // r radius (km)\n    // d distance (km)\n    // c color (rgb)\n    // op orbital period (days)\n    // rp rotation period (days)\n    // ga geometric albedo (fraction)\n    \n    if( i == 0 )\n    {\n        // Sol\n\t\tr = 695700.0;\n\t\td = 0.0;\n\t\tc = vec3( 1.0, 0.5, 0.0 );\n        op = 0.0;\n        rp = 0.0;\n        ga = 1.0;\n        return;\n    }\n    if( i == 1 )\n    {\n        // Mercury\n\t\tr = 2439.7;\n\t\td = (69816.9+46001.2+57909.05)/3.0*1000.0;\n\t\tc = vec3( 0.6, 0.6, 0.6 );\n        op = 87.9691;\n        rp = 58.646;\n        ga = 0.142;\n        return;\n    }\n    if( i == 2 )\n    {\n        // Venus\n\t\tr = 6051.8;\n\t\td = (108939.0+107477.0+108208.0)/3.0*1000.0;\n\t\tc = vec3(0.8, 0.76, 0.66 );  // 204, 195, 168\n        op = 224.701;\n        rp = -243.025;\n        ga = 0.67;\n        return;\n    }\n    if( i == 3 )\n    {\n        // Earth\n\t\tr = 6378.1;\n\t\td = (152100.0+147095.0+149598.0)/3.0*1000.0;\n\t\tc = vec3(0.3, 0.3, 0.5);\n        op = 365.256363;\n        rp = 0.99726968;\n        ga = 0.367;\n        return;\n    }\n    if( i == 4 )\n    {\n        // Mars\n\t\tr = 3389.5;\n\t\td = (249.2+206.7+227.9392)/3.0*1000.0*1000.0;\n\t\tc = vec3(0.66, 0.44, 0.28); // 168, 112, 72\n        op = 686.971;\n        rp = 1.025957;\n        ga = 0.170;\n        return;\n    }\n\tif( i == 5 )\n    {\n        // Jupiter\n\t\tr = 69911.0;\n\t\td = (816.04+740.55+778.299)/3.0*1000.0*1000.0;\n\t\tc = vec3( 0.73, 0.68, 0.62 ); // 187, 173, 157\n        op = 4332.59;\n        rp = 9.925/24.0;\n        ga = 0.52;\n        return;\n    }\n    if( i == 6 )\n    {\n        // Saturn\n\t\tr = 58232.0;\n\t\td = (1509.0+1350.0+1429.39)/3.0*1000.0*1000.0;\n\t\tc = vec3( 0.65, 0.58, 0.43 ); // 166, 149, 109\n        op = 10759.22;\n        rp = 10.55/24.0;\n        ga = 0.47;\n        return;\n    }\n    if( i == 7 )\n    {\n        // Uranus\n\t\tr = 25362.0;\n\t\td = (3008.0+2742.0+2875.04)/3.0*1000.0*1000.0;\n\t\tc = vec3( 0.75, 0.88, 0.91 ); // 190, 228, 231\n        op = 30688.5;\n        rp = 0.71833;\n        ga = 0.51;\n        return;\n    }\n    if( i == 8 )\n    {\n        // Moon\n\t\tr = 1737.1;\n\t\td = (362600.0+405400.0+384399.0)/3.0;\n\t\tc = vec3( 0.39, 0.38, 0.37 ); // 100, 97, 94\n        op = 27.321661;\n        rp = 27.321661;\n        ga = 0.136;\n        return;\n    }\n}\n\n// test if position is inside sphere boundary\nvec3 nSphere( in vec3 pos, in vec4 sph )\n{\n    return (pos-sph.xyz)/sph.w;\n}\n\n// ?\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\n// ?\nfloat sSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n\t\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n\n// return negative if nothing hit\nfloat intersect( in vec3 ro, in vec3 rd, out vec3 nor, out float rad, out float id )\n{\n\tfloat res = 1e20;\n\tfloat fou = -1.0;\n\t\n\tnor = vec3(0.0);\n\n\tfor( int i=0; i<NUMSPH; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float t = iSphere( ro, rd, sph ); \n\t\tif( t>eps && t<res ) \n\t\t{\n\t\t\tres = t;\n\t\t\tnor = nSphere( ro + t*rd, sph );\n\t\t\tfou = 1.0;\n\t\t\trad = sphere[i].w;\n            id = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    return fou * res;\t\t\t\t\t  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\t\n    //-----------------------------------------------------\n    // animate planets\n    //-----------------------------------------------------\n\tfloat time = iTime + 0.7/0.3*0.5;\n\tfloat an = 0.3*time - .7*m.x;\n\n    // other planets\n    for( int i=0; i<NUMSPH; i++ )\n\t{\n        // get planet info\n        float r, d, op, rp, ga;\n        vec3 c;\n        getPlanet( i, r, d, c, op, rp, ga );\n        \n        // rescale for illustrative purposes\n        d = max(0.0, pow(d+1.0,1.0/2.125) ) / 2.5;\n        r = pow(r+1.0,1.0/1.9) / 1.0;\n        \n        // find rotation from time elapsed and orbital period\n        //float a = -an / pow(op+1.0, 1.0/2.0 ) * 50.0;\n        float a = -an / op * 600.0;\n\n        // set animated position of planets\n        sphere[i] = vec4( d*cos(a), 0.0, d*sin(a), r );\n    }\n    // the sun\n\t//sphere[0].w = sphere[5].w;\n    //sphere[0].w = log(sphere[0].w);\n    sphere[0].xyz = vec3(0.0);\n    // moon\n    float r = sphere[8].w;\n    //sphere[8] /= 10.0;\n\tsphere[8] += sphere[3];\n    sphere[8].w = r;\n    \n\t\t\t\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t//vec3(3.5*sin(an),1.5*cos(0.5*an)+22.2,2.5*cos(an));\n    //vec3 ro = vec3(200.0, 200.0,100.0);\n    //vec3 ta = vec3(0.0,0.0,-1000.0);\n\n    //vec3 ro1 = normalize( vec3(0.1,1.0,0.75)) * sphere[0].w * 7.0;\n    //vec3 ta1 = vec3(0.0,-1.0,-1.0) * length(sphere[7].xyz);\n    //vec3 ro2 = normalize( vec3(1.0,0.0,0.01)) * sphere[0].w * 1.01;\n    //vec3 ta2 = vec3(2.50,0.0,-5.0) * length(sphere[7].xyz);\n\n    vec3 ro1 = normalize( vec3(0.0,1.0,0.0) - normalize( sphere[7].xyz )) * length(sphere[7].xyz) * 1.0;\n    vec3 ta1 = vec3(0.0,0.0,0.0) * length(sphere[7].xyz);\n\n    vec3 ro2 = normalize( cross(sphere[7].xyz, vec3(0.0,1.0,0.0) )) * sphere[0].w * 1.0095;\n    vec3 ta2 = sphere[7].xyz; // vec3(2.50,0.0,-5.0) * length(sphere[7].xyz);\n\n    // set ray origin and target\n    vec3 ro = mix( ro1, ro2, 1.0-smoothstep(-1.0,1.0,cos(an*0.3)) );\n    vec3 ta = mix( ta1, ta2, 1.0-smoothstep(-1.0,1.0,cos(an*0.3)) );\n\n    // calculate camera orientation\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    \n    // background colour\n    vec3 col = vec3(0.0, 0.0, 0.15);\n    \n    // vertical gradient\n    // col *= (0.98+0.1*rd.y);\n\tcol.z += (0.1+0.1*rd.y);\n    \n\t// cast ray to find planets\n\tvec3 nor;\n\tfloat rad = 0.5;\n    float id;\n\tfloat t = intersect(ro,rd,nor, rad, id);\n\tif( t>0.0 )\n\t{\n        // planet stats do-hickey\n\t\tfloat r, d, op, rp, ga;\n        getPlanet( int(id), r, d, col, op, rp, ga );        \n    }\n    // vigneting\n    //col *= 1.0 - 0.45*dot((q-0.5),(q-0.5));\n\n    fragColor = vec4( col, 1.0 );\n    return;\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}