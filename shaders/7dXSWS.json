{
    "Shader": {
        "info": {
            "date": "1619122171",
            "description": "basic castle",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXSWS",
            "likes": 2,
            "name": "basic castle",
            "published": 3,
            "tags": [
                "basiccastle"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "//por jorgefloresp.  ==jorge2017a1---22/abril/2021\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define PI 3.14\n#define roundnes 0.025\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n//Constants\nconst float tau = atan(1.0)*8.0;\nconst float pi = atan(1.0)*4.0;\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nfloat rand(float x) { return fract(sin(x) * 4358.5453123); }\nfloat rand(vec2 co) { return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5357); }\n\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nvec2 rotate(vec2 p, float a) {\n    float sa = sin(a);\n    float ca = cos(a);\n\treturn p * mat2(ca, -sa, sa, ca);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat opRep1D( float p, float c )\n{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nfloat MarOnda(vec2 uv,float  t)\n{\n    uv.y += sin(uv.x*5.+t)*0.1;\n    return uv.y;\n}\n\nvec3 hacerOndasPasto(vec2 p, vec3 col)\n{\n    \n    float mo1= MarOnda(p-vec2(0.0,-0.6),0.0);\n    float sol= sdCircle( p-vec2(1.5*sin(iTime*0.5),0.6), 0.15) ;\n    \n    float dif1=-mo1;\n    float dif2=-mo1+0.1;\n    \n    float cielo=-p.y+0.1;\n    vec3 colcielo= nubes(p, iTime);\n    \n    col = mix(col,vec3(0.8,0.4646,0.1313),S(mo1,0.0));\n    col = mix(col,vec3(0.3,0.8,0.3),S(dif1,0.0));\n    col = mix(col,vec3(0.0,0.9,0.0),S(dif2,0.0));\n    //col = mix(col,vec3(0.0,0.0,1.0),S(cielo,0.0));\n    colcielo=mix(colcielo,vec3(0.0,0.0,1.0),0.5*sin(iTime));\n    col = mix(col,colcielo,S(cielo,0.0));\n    col = mix(col,vec3(1.0,0.8,0.5),S(sol,0.0));\n    return col;\n}\n\nvec3 castillo(vec2 p, vec3 col)\n{\n    float scolumna1=sdBox(p-vec2(-0.52,0.0), vec2(0.15,0.4) );\n    float scolumna2=sdBox(p-vec2(0.0,-0.15), vec2(0.4,0.25) );\n    float scolumna3=sdBox(p-vec2(0.52,0.0), vec2(0.15,0.4) );\n    float scolumnaC=sdBox(p-vec2(0.0,0.35), vec2(0.2,0.25) );\n    float ventana1=sdBox(p-vec2(-0.52,0.2), vec2(0.05,0.05) );\n    float ventana2=sdBox(p-vec2(0.0,0.5), vec2(0.05,0.05) );\n    float ventana3=sdBox(p-vec2(0.52,0.0), vec2(0.05,0.05) );\n    \n    float puerta1=sdBox(p-vec2(0.0,-0.25), vec2(0.1,0.15) );\n    \n    \n    vec2 pr= rotatev2( p, radians(180.0));\n    vec2 prb= rotatev2( p, radians(90.0));\n    float tr1= sdTriangleIsosceles(pr-vec2(0.53,-0.6), vec2(0.2,0.2) );\n    float tr2= sdTriangleIsosceles(pr-vec2(-0.52,-0.6), vec2(0.2,0.2) );\n    float tr3C= sdTriangleIsosceles(pr-vec2(0.0,-0.8), vec2(0.27,0.2) );\n    \n    float tr1ban= sdTriangleIsosceles(prb-vec2(-0.65,-0.725), vec2(0.05,0.2) );\n    float tr2ban= sdTriangleIsosceles(prb-vec2(-0.85,-0.2), vec2(0.05,0.2) );\n    float tr3ban= sdTriangleIsosceles(prb-vec2(-0.65,0.325), vec2(0.05,0.2) );\n    \n    //bloque ladrillos\n    vec2 prep=p;\n    prep.x=clamp(prep.x,-0.4,0.35);\n     prep.x= opRep1D( prep.x, 0.15 );\n    float bloques1=sdBox(prep-vec2(0.0,0.15), vec2(0.03,0.05) );\n    \n    col = mix(col,vec3(0.68,0.68,0.68),S(scolumna1,0.0));\n    col = mix(col,vec3(0.68,0.68,0.68),S(scolumna3,0.0));\n    col = mix(col,vec3(0.6,0.6,0.6),S(scolumna2,0.0));\n    col = mix(col,vec3(0.7,0.7,0.7),S(scolumnaC,0.0));\n    \n    col = mix(col,vec3(0.0,0.0,0.2),S(ventana1,0.0));\n    col = mix(col,vec3(0.0,0.0,0.2),S(ventana2,0.0));\n    col = mix(col,vec3(0.0,0.0,0.2),S(ventana3,0.0));\n    col = mix(col,vec3(0.0,0.0,0.2),S(puerta1,0.0));\n    \n    col = mix(col,vec3(0.6,0.6,0.6),S(tr1,0.0));\n    col = mix(col,vec3(0.6,0.6,0.6),S(tr2,0.0));\n    col = mix(col,vec3(0.6,0.6,0.6),S(tr3C,0.0));\n    \n    col = mix(col,vec3(1.0),S(tr1ban,0.0));\n    col = mix(col,vec3(1.0),S(tr2ban,0.0));\n    col = mix(col,vec3(1.0),S(tr3ban,0.0));\n    \n    col = mix(col,vec3(0.58,0.58,0.58),S(bloques1,0.0));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 p=uv;\n    vec3 col=vec3(0.65);\n   \n    col= hacerOndasPasto(p, col);\n    col= castillo(p-vec2(0.0,0.1), col);\n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Hashless Noise Experiment\nvec3 nubes(  in vec2 puv, float ptime )\n{\n    \n    vec2 c = puv/0.25;\n    \n    float g = 0.;\n    vec2 d = vec2(1,0);\n    for(float i = 1.;i++<=64.;)\n    {\n        //Use precomputed kernels here?\n        d = cos(cos(i*i-i)*246.+vec2(0,1.57));\n        //Or just rotate?\n        //d *= mat2(.8,.6,-.6,.8);\n        g += cos(dot(c++,d*sqrt(i))+ptime)/i;\n    }\n\n    vec3 col = vec3(g/3.+.5);\n\n    \n    return col;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}