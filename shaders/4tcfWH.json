{
    "Shader": {
        "info": {
            "date": "1540602434",
            "description": "experimenting with coloring stuff. Mouseable eyeball ",
            "flags": 0,
            "hasliked": 0,
            "id": "4tcfWH",
            "likes": 9,
            "name": "LooK",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "raymarch",
                "eye",
                "color"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 636
        },
        "renderpass": [
            {
                "code": "#define FAR 30.0\n#define DISTANCE_BIAS 0.75\nconst float pi = 3.1415926;\n\n\nvec2 m() // normalized mouse coords\n{\n    vec2 m = iMouse.xy / iResolution.xy-.5; \n    m.x *= iResolution.x/iResolution.y;\n\treturn m;\n}\n\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n\nfloat map(vec3 rp)\n{\n   vec3 pos = rp - vec3( 0.0 , 0.0, 2.0); // eye pos\n    \n   // pos.xy -= m().xy*2.0;\n   \n    // distance to eye \n   float res = length(pos)-0.5;\n    \n   return res;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.0035, -0.0035); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\n\n// fbm noise stuff\nfloat rand(vec2 n){ \n\treturn fract(sin(dot(n, vec2(17.12037, 5.71713))) * 12345.6789);\n}\nfloat noise(vec2 n)\n{\n\tvec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b + d.xx), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\nfloat fbm(vec2 n, float m)\n{\n\tfloat sum = 0.0, amp = 1.0;\n\tfor (int i = 0; i < 10; i++)\n    {\n        n.y-=iTime * m;\n\t\tsum += noise(n) * amp;\n\t\tn += n;\n\t\tamp *= 0.5;\n\t}\n\treturn sum;\n}\n\nvec3 eye(vec2 uv)\n{\n    \n    float pupil = 0.15; // pupil size\n    \n    float p = smoothstep(pupil - 0.04, pupil,  length(uv)*9.0); // pupil shape / shading\n    float p2 = smoothstep(0.15 + 0.18, 0.15 - 0.06 + 0.18,  length(uv)*9.0); // iris shape / shading\n    \n    float a = atan(uv.y, uv.x)*3.0; // angle from center of eye\n    float i = p2 * sin(a*18.0); // iris pattern\n    float vb = smoothstep(0.34, 0.5, length(uv*8.0)) * 0.5; // Where the veins stop\n    \n    // vein shape \n    float y = sin(max(a, pi) * 24.0 + fbm(uv, 0.0)*364.0) * vb; \n    float vv = smoothstep(0.05, 0.05 - 0.6, y) * 1.1;\n    \n    // main color\n    vec3 col = vec3(1.0, 1.0, 1.0) * 1.5;\n    \n    // iris and vein color\n    vec3 iris = mix(vec3(0.01, 0.5, 0.6), vec3(0.0, 0.8, 0.7), i);\n    vec3 veins = vec3(1.0, 0.0, 0.0);\n    \n    // make the final color\n    col = mix(col, veins, vv);\n    col = mix(col, iris , p2 );\n   \n    \n    return col * p; // add the pupil\n    \n}\n\n// not used unless you uncomment in main. A mask that blinks.\nfloat mask(vec2 uv)\n{\n    uv.x *= 0.58;\n    if(mod(iTime, 6.0) > 5.9)\n    {\n    \tuv.y *= 20.0;\n    }\n    float m = smoothstep(0.3, 0.27, length(uv));\n    return m;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n     \n    uv.y+=1.0;\n \t\n    uv = mod(((uv)), 2.0) - 1.0;\n    \n    // Ray origin (camera)\n    vec3 ro = vec3(0.0, 0.0, 0.0); \n    \n    // Ray direction\n    vec3 rd = normalize(vec3(uv,2.0));\n   \n    \n    float t = 0.0; // total distance\n    float d = 0.0; // distance to nearest scene object\n    \n    float minDist = 999.0; // If a ray hits nothing, this will store how close it came to hitting.\n    \t\t\t\t\t\t// I use this for the black outline\n    \n    bool didHit = false;\n    \n    for (int i = 0; i < 30; i++) // raymarch\n    {\n        d = map(ro + rd*t);\n        \n        minDist = min(minDist, d); // Getting the minimum distance to an object for this ray\n        \n        if(abs(d)<0.001) // hit somthing\n        {\n            minDist = abs(d);\n            didHit = true;\n            break;  \n        }\n        if(t>FAR) // went too far\n        {\n            minDist = min(minDist, d);\n            t = FAR;\n            break;\n        }\n        \n        t += d * DISTANCE_BIAS;\n    }\n    \n    vec3 norm = getNormal(ro + rd * t); // normals of hit location in scene\n    \n     // Lighting\n    vec3 l = ro + vec3(1.0, 1.0, -1.0);  \n    float lDist = max(length(l), 0.001); \n    float atten = 1.0 / (1.0 + lDist*0.2 + lDist*lDist*0.1); \n    \n    \n    vec3 col = vec3(0.8, 0.4, 0.1);\n    \n    float spec = pow(max(dot(reflect(-l - vec3(0.0, -0.5, 1.4), norm), -rd ), 0.0 ), 16.0);\n    float diff = max(dot(norm + 0.5, l), 0.0); \n    \n    norm.xz *= rot(-m().x * 0.9);\n    norm.yz *= rot(-m().y * 0.9);\n    norm.yz *= rot(pi / 2.0);\n    \n    \n    vec3 objCol = vec3(0.25, 0.25, 0.25) * eye(norm.xz * 0.08); \n   \n    if(didHit)\n    {\n    \tcol = mix(col, (objCol*(diff + 0.05) + vec3(1.0, 0.6, 0.2)*spec*0.08 ) * atten, 1.0);\n    }\n    else\n    {\n        col = mix(col, vec3(0.0, 0.0, 0.0), 0.017 / minDist); // black outline\n    }\n \n    // Experiment with a mask that blinks\n    //col = mix(vec3(0.7, 0.7, 0.6)*uv.y,col , mask(uv));\n    \n   \n    // final color with the gamma correction \n    fragColor = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}