{
    "Shader": {
        "info": {
            "date": "1613161367",
            "description": "Ok so today i made a revolutionary raytracing using denoising and temporal antialiasing, did you ever expected to be able to run a raytracing with a really high number of samples at 60 frames per second?\n\nEdit: no it's not revolutionary - me from 2024",
            "flags": 32,
            "hasliked": 0,
            "id": "Wtdfz2",
            "likes": 11,
            "name": "Perfection = Temporal aa+Denoise",
            "published": 3,
            "tags": [
                "procedural",
                "raytracing",
                "distancefunction",
                "fast",
                "pathtracing",
                "evolution",
                "objects",
                "distanceestimator",
                "denoising",
                "temporalantialiasing"
            ],
            "usePreview": 0,
            "username": "Ric3cir121",
            "viewed": 714
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o,vec2 u){\n    vec4 o1 = texelFetch(iChannel0,ivec2(u)+ivec2(0,0),0);\n    vec4 o2 = texelFetch(iChannel0,ivec2(u)+ivec2(1,0),0);\n    vec4 o3 = texelFetch(iChannel0,ivec2(u)+ivec2(2,0),0);\n    vec4 o4 = texelFetch(iChannel0,ivec2(u)+ivec2(0,1),0);\n    vec4 o5 = texelFetch(iChannel0,ivec2(u)+ivec2(1,1),0);\n    vec4 o6 = texelFetch(iChannel0,ivec2(u)+ivec2(2,1),0);\n    vec4 o7 = texelFetch(iChannel0,ivec2(u)+ivec2(0,2),0);\n    vec4 o8 = texelFetch(iChannel0,ivec2(u)+ivec2(1,2),0);\n    \n    float p = 5.;\n    \n    float d1 = dot(o1,vec4(1))/4.;\n    float d2 = clamp(1.-abs(dot(o2,vec4(1))/4.-d1)*p,0.,1.);\n    float d3 = clamp(1.-abs(dot(o3,vec4(1))/4.-d1)*p,0.,1.);\n    float d4 = clamp(1.-abs(dot(o4,vec4(1))/4.-d1)*p,0.,1.);\n    float d5 = clamp(1.-abs(dot(o5,vec4(1))/4.-d1)*p,0.,1.);\n    float d6 = clamp(1.-abs(dot(o6,vec4(1))/4.-d1)*p,0.,1.);\n    float d7 = clamp(1.-abs(dot(o7,vec4(1))/4.-d1)*p,0.,1.);\n    float d8 = clamp(1.-abs(dot(o8,vec4(1))/4.-d1)*p,0.,1.);\n    \n    o = (o1+o2*d2+o3*d3+o4*d4+o5*d5+o6*d6+o7*d7+o8*d8)/(1.+d2+d3+d4+d5+d6+d7+d8);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct obj{\n    float d;\n    vec3 col;\n    int ref;\n};\nmat2 rotate(float p){return mat2(cos(p),sin(p),-sin(p),cos(p));}\nvec3 rotate(vec3 c,float p){return vec3(c.xz*rotate(p),c.y).xzy;}\n#define hash13(a) fract(sin(a*vec3(1.239,5.283,2.294))*1000000.)\n#define mn(a,b) obj((a.d>b.d?b.d:a.d),(a.d>b.d?b.col:a.col),(a.d>b.d?b.ref:a.ref))\n#define mx(a,b) obj((a.d<-b.d?-b.d:a.d),(a.col),(a.ref))\n#define sphere(a,b,c,d,e) obj(length(a-b)-c/2.,d,e)\n#define cube(a,b,c,d,e,f) obj(length(clamp(a,b-(c-d)/2.,b+(c-d)/2.)-a)-d/2.,e,f)\n#define plane(a,b,c,d) obj(a.y-b.y,c,d)\nobj de(vec3 pos){\n    obj res = obj(10000.,vec3(0),0);\n    res = mn(res,sphere(pos,vec3(0 , -1,-.5),1.    ,vec3(.9,.5,.5),1));\n    res = mn(res,  cube(pos,vec3(-1,-.5,-1 ),1. ,.3,vec3(.9,.5,.9),0));\n    res = mx(res, plane(pos,vec3(0 ,-.99,0 )       ,vec3(.9,.9,.9),2));\n    res = mn(res, plane(pos,vec3(0 , -1, 0 )       ,vec3(.9,.9,.9),2));\n    res = mx(res,  cube(pos,vec3(0 ,-1. ,.5),2. ,1.,vec3(.9,.5,.9),1));\n    res = mn(res,sphere(pos,vec3(.3,  0, 1 ),1.    ,vec3(.5,.5,.9),2));\n    return res;\n}\nvec3 getmarch(vec3 pos,vec3 cam,bool rev){\n    float r = rev?-1.:1.;\n    float d = 9.;\n    vec3 mov = vec3(0);\n    for(int i = 0;i < 100;i++){\n        d = de(mov+pos).d*r;\n        mov += d*cam;\n        if(length(mov)>50.||d<0.0001)break;\n    }\n    return mov+pos;\n}\nvec3 getcolor(vec3 pos){return de(pos).d>0.01?vec3(1):de(pos).col;}\nvec3 getnormal(vec3 pos){\n    vec2 e = vec2(1,-1)*0.0001;\n    return normalize(e.xyy*de(pos+e.xyy).d+e.yyx*de(pos+e.yyx).d+e.yxy*de(pos+e.yxy).d+e.xxx*de(pos+e.xxx).d);\n}\n#define _pos(x) vec3(3.+sin(x),3,-3.+sin(x))\n#define _look(x) vec2(-.7,.8+sin(x*2.)*0.2)\nvec3 image(out vec4 o,vec2 u){\n    vec2 uv = (u+hash13(iTime).xy-iResolution.xy/2.)/iResolution.y;\n    vec3 pos = _pos(iTime);\n    vec2 look = _look(iTime);\n    vec3 cam = rotate(rotate(normalize(vec3(uv,1)).yxz,-look.y).yxz,look.x);\n    vec3 norm, col = vec3(1),oldmarch;\n    bool rev = false;\n    vec3 march = getmarch(pos,cam,false);\n    vec3 ret = march;\n    for(int i = 0;i < 10;i++){\n        norm = getnormal(march);\n        col *= getcolor(march);\n        if(de(march).d>0.0001)break;\n        if(de(march).ref==1){\n            cam = reflect(cam,norm);\n            march += norm*0.01;\n        }else if(de(march).ref==0){\n            if(!rev)cam = normalize(mix(cam,-norm,0.1));\n            rev = !rev;\n            march+= cam*0.01;\n        }else{\n            cam = normalize(reflect(cam,norm)+(hash13(fract(dot(norm,cam)*iTime))-.5)*0.5);\n            march += norm*0.01;\n        }\n        oldmarch = march;\n        march = getmarch(march,cam,rev);\n        if(rev)col /= pow(length(march-oldmarch),3.)*20.+1.;\n    }\n    col *= getcolor(march);\n\n    o = vec4(col,length(ret));\n    return ret;\n}\nvoid mainImage(out vec4 o,vec2 u){\n    vec3 pos = _pos((iTime-iTimeDelta));\n    vec2 look = _look((iTime-iTimeDelta));\n    \n    vec4 new;\n    vec3 opos = image(new,u);\n    \n    vec3 oldl = rotate(rotate(normalize(opos-pos),-look.x).yxz,look.y).yxz;\n    vec2 R = iResolution.xy;\n    vec2 read = ((oldl.xy/normalize(oldl).z*R.yy/R/1.-.5)*R-hash13(iTime-iTimeDelta).xy)/R;\n    o = new;\n    vec4 tex = texture(iChannel0,read);\n    o = mix(o,mix(o,tex,clamp(1.3-abs(tex.w-length(opos))*5.,0.,1.)),0.95);\n    o.w = length(opos);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}