{
    "Shader": {
        "info": {
            "date": "1599682994",
            "description": "Classic motion illusion.\nBest viewed in full-screen mode.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lBBDG",
            "likes": 8,
            "name": "Coffee beans illusion",
            "published": 3,
            "tags": [
                "2d",
                "illusion"
            ],
            "usePreview": 0,
            "username": "zduny",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1416;\n\nconst vec3 green = vec3(0.6, 0.8, 0.105);\nconst vec3 brown = vec3(0.627, 0.313, 0.113);\nconst vec3 black = vec3(0.286, 0.086, 0.027);\nconst vec3 white = vec3(0.976, 0.968, 0.937);\n\nfloat grid = 47.0;\n\nconst bool animate = false;\n\nvec3 toSRGB(in vec3 color) { return pow(color, vec3(1.0 / 2.2)); }\n\nvec3 toLinear(in vec3 color) { return pow(color, vec3(2.2)); }\n\nvoid drawDisk(in vec2 fragmentCoordinates, in vec2 center, in float radius,\n              in vec4 color, inout vec4 outputColor) {\n  float d = distance(fragmentCoordinates, center);\n  float a = 1.0 - clamp(d - radius + 0.5, 0.0, 1.0);\n\n  outputColor = mix(outputColor, color, a * color.a);\n}\n\nfloat sdSegment(in vec2 point, in vec2 a, in vec2 b) {\n  vec2 pa = point - a;\n  vec2 ba = b - a;\n\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\n  return length(pa - ba * h);\n}\n\nvoid drawSegment(in vec2 fragmentCoordinates, in vec2 p0, in vec2 p1,\n                 in float thickness, in vec4 color, inout vec4 outputColor) {\n  float d = sdSegment(fragmentCoordinates, p0, p1);\n  float a = 1.0 - clamp(d - thickness / 2.0 + 0.5, 0.0, 1.0);\n\n  outputColor = mix(outputColor, color, a * color.a);\n}\n\nvec2 rotate(in vec2 vector, in float angle) {\n  return vector * mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvoid drawBlob(in vec2 position, float angle, inout vec4 outputColor) {\n  position = rotate(position, angle);\n  float radius = 25.0;\n  vec3 color = position.y > 0.0 ? white : black;\n  drawDisk(vec2(position.x, position.y * 1.63), vec2(0.0, 0.0), radius, vec4(toLinear(color),  1.0), outputColor);\n  drawDisk(vec2(position.x, position.y * 1.9), vec2(0.0, 0.0), radius * 0.87, vec4(toLinear(brown),  1.0), outputColor);\n  drawSegment(position, vec2(-radius, -0.5), vec2(radius, -0.5), 0.7, vec4(toLinear(black), 1.0), outputColor);\n}\n\nfloat angle(int x, int y) {\n  return pi / 4.0 + float(x - y) * (animate ? (0.4 + iTime * 0.01) : 0.4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(toLinear(green), 1.0);\n    fragCoord.y = iResolution.y - fragCoord.y;\n    ivec2 iFragCoord = ivec2(abs(fragCoord / grid));\n    fragCoord = mod(fragCoord, grid) - 0.5 * grid;\n    fragCoord += vec2(15.0, -15.0);\n    drawBlob(fragCoord, angle(iFragCoord.x, iFragCoord.y), fragColor);\n    drawBlob(vec2(fragCoord.x - grid, fragCoord.y), angle(iFragCoord.x + 1, iFragCoord.y), fragColor);\n    drawBlob(vec2(fragCoord.x, fragCoord.y + grid), angle(iFragCoord.x, iFragCoord.y - 1), fragColor);\n    drawBlob(vec2(fragCoord.x - grid, fragCoord.y + grid), angle(iFragCoord.x + 1, iFragCoord.y - 1), fragColor);\n    fragColor = vec4(toSRGB(fragColor.rgb), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}