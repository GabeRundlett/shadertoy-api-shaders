{
    "Shader": {
        "info": {
            "date": "1656686913",
            "description": "I didn't find anywhere a satisfying previous frame (aka backbuffer) hello world so I wrote that!",
            "flags": 32,
            "hasliked": 0,
            "id": "7dcfRB",
            "likes": 15,
            "name": "Backbuffer example",
            "published": 3,
            "tags": [
                "example",
                "helloworld",
                "demo",
                "frame",
                "backbuffer",
                "previousframe"
            ],
            "usePreview": 0,
            "username": "ninofiliu",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "// This just paints whatever is in BufferA\nvoid mainImage(out vec4 color, in vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = texture(iChannel0, uv);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This shader can read and write to iChannel0 that is set to BufferA\n// That allows to draw something, and to read it on the next frame\nvoid mainImage(out vec4 color, in vec2 coord) {\n\n    // On the previous frame, read 4 pixels around the pixels to be painted,\n    // then average and dim them, creating a disappearing blur effect\n    vec2 uv = coord / iResolution.xy;\n    float diff = 0.005;\n    float dim = 0.999;\n    color = dim * (\n        texture(iChannel0, vec2(uv.x-diff, uv.y-diff))+\n        texture(iChannel0, vec2(uv.x-diff, uv.y+diff))+\n        texture(iChannel0, vec2(uv.x+diff, uv.y-diff))+\n        texture(iChannel0, vec2(uv.x+diff, uv.y+diff))\n    )/4.;\n    \n    // Draws a circle around a rotating point\n    if (distance(uv, 0.5 + 0.2*vec2(cos(iTime), sin(iTime))) < 0.01) {\n        color.rgb += 1.;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}