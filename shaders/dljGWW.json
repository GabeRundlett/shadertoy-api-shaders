{
    "Shader": {
        "info": {
            "date": "1673345526",
            "description": "it is possible to create a polygon by using the closes distance to a set of points which are located at the corners of a polygon, ",
            "flags": 0,
            "hasliked": 0,
            "id": "dljGWW",
            "likes": 2,
            "name": "vonoroi polygon",
            "published": 3,
            "tags": [
                "vonoroi"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "vec2 f_o_p(\n     float n_radians, \n     float n_radius\n){\n    vec2 o_p = vec2(\n        sin(n_radians)*n_radius,\n        cos(n_radians)*n_radius\n    );\n    return o_p;\n}\nvec4 f_o_less_efficient_way(\n    vec2 o_trn_fc_nor_offset,\n    float n_its,\n    float n_radius\n){\n\n    // the less efficient way is to iterate over all corners of the polygon\n    // the advantage is that the distance of the fragCoord to all the points\n    // can by added up to a sum or be multiplied with each other\n    float n_tau = 6.283158;\n\n    float n_dmin = 1.;\n    float n_it_dmin = 0.;\n    float n_ang_nor = atan(o_trn_fc_nor_offset.x, o_trn_fc_nor_offset.y)/n_tau+0.5;\n    \n    float n_dsum = 0.;\n    float n_dprod = 1.;\n    \n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n\n        float n_it_nor = n_it / n_its;\n        //point in the middle \n        if(n_it == 0.){\n            n_radius = 0.;\n        }\n        vec2 o_p = f_o_p(n_it_nor*n_tau, n_radius);\n        float n_d = length(o_trn_fc_nor_offset - o_p);\n        if(n_d < n_dmin){\n            n_dmin = n_d; \n            n_it_dmin = n_it;\n            if(n_it == 0.){\n                n_it_dmin = -1.;\n            }\n        }\n        n_dsum+=n_d;\n        n_dprod*=n_d;\n    }\n    return vec4(\n        n_dmin, \n        n_it_dmin/n_its,\n        n_dsum, \n        n_dprod\n    );\n    \n}\nvec4 f_o_more_efficient(\n    vec2 o_trn_fc_nor_offset,\n    float n_its,\n    float n_radius\n){\n    float n_tau = 6.283158;\n\n    float n_dmin = 1.;\n    float n_it_dmin = 0.;\n    float n_ang_nor = (atan(o_trn_fc_nor_offset.x, o_trn_fc_nor_offset.y)/n_tau)+0.5;\n    \n    float n_one_it_nor = (1./ n_its);\n    float n_it = floor(n_ang_nor/n_one_it_nor);\n    float n_it_nor = n_it/n_its;\n    \n    float n_max = 3.;\n        \n    float n_dsum = 0.;\n    float n_dprod = 1.;\n    \n    for(float n = 0.;n < n_max;n+=1.){\n\n        float n_pm = (n - 1.);\n        float n_radians = ((n_it_nor)+(n_pm*n_one_it_nor))*n_tau+n_tau/2.;\n\n        vec2 o_p = f_o_p(n_radians, n_radius);\n        float n_d = length(o_trn_fc_nor_offset - o_p);\n        if(n_d < n_dmin){\n            n_dmin = n_d; \n            n_it_dmin = mod(n_it+n_pm, n_its);\n        }\n        n_dsum+=n_d;\n        n_dprod*=n_d;\n    }\n    float n_d = length(o_trn_fc_nor_offset - vec2(0.));\n    if(n_d < n_dmin){\n        n_dmin = n_d; \n        n_it_dmin = -1.;\n    }\n    n_dsum+=n_d;\n    n_dprod*=n_d;\n    \n    return vec4(\n        n_dmin, \n        n_it_dmin/n_its,\n        n_dsum, \n        n_dprod\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_ratio_1to_iresx = 1./ iResolution.x;\n    //needed for anti aliasing ?\n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n\n    float n_its = floor((sin(iTime)*0.5+0.5)*9.+3.);\n    vec4 o_dvonoroipoly;\n    float n_radius = 0.5;\n    o_dvonoroipoly = f_o_less_efficient_way(o_trn_fc_nor_offset, n_its, n_radius);\n    o_dvonoroipoly = f_o_more_efficient(o_trn_fc_nor_offset, n_its, n_radius);\n    \n    fragColor = vec4(o_dvonoroipoly.y);\n    float b_polygon = float(o_dvonoroipoly.y < 0.);\n    fragColor = vec4(b_polygon);\n    \n    if(o_trn_fc_nor.y > 1./3.*1.){\n        fragColor = vec4(o_dvonoroipoly.x);\n        \n        //if(o_trn_fc_nor.x > (o_trn_mo_nor.x/2.)*1.){\n        //     fragColor = vec4(o_dvonoroipoly.x);\n        // }\n        // float n_tau = 6.2831;\n        // if(o_trn_fc_nor.x > (o_trn_mo_nor.x/2.)*2.){\n        //     float n = pow(o_dvonoroipoly.w, 1./10.);\n        //     float nss = n_tau/n_its*0.2;\n        //     n = smoothstep(nss,nss*3., n);\n        //     fragColor = vec4(n);\n        // }\n        // fragColor = sqrt(fragColor);\n    }\n    \n    if(o_trn_fc_nor.y > 1./3.*2.){\n        fragColor = vec4(o_dvonoroipoly.y);\n    }\n\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}