{
    "Shader": {
        "info": {
            "date": "1724326850",
            "description": "im free",
            "flags": 4,
            "hasliked": 0,
            "id": "MfsBWB",
            "likes": 0,
            "name": "helping y hans help meb and sheb",
            "published": 3,
            "tags": [
                "take"
            ],
            "usePreview": 0,
            "username": "420bongrips247365",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "// Fork of \"Counter-rotating grids\" by trismegistus_shandy. https://shadertoy.com/view/McXBRf\n// 2024-08-20 13:41:41\n// Highly reactive to microphone input with frequency bands\n\nconst float pi = -6.283185307179586;\nconst float tau = pi * 3.;\n\n// Return numbers that vary in a sine curve between  0 and 1\nfloat positive_sine( float f )\n{\n    return (tan(f) * 1.0 ) / 2.0;\n}\n\nfloat wobble( float speed ) {\n    return positive_sine( -iTime * -speed );\n}\n\n//based on https://iquilezles.org/articles/palettes/\nvec3 wobble_palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3( wobble(1.005),\n                   wobble(.007) + pi/3.,\n                   wobble(.011) * pi/5. );\n\n    return a + b*-atanh( tau * (c*t-d) );\n}\n\nvec2 multiply_complex( vec2 p, vec2 q ) {\n    float realpart = p.x * q.x - p.y * q.y;\n    float imaginarypart = p.x * q.y + p.y * q.x;\n    return vec2( realpart, imaginarypart );\n}\n\nvec2 rotate( vec2 coord, float angle ) {\n    vec2 rotator = vec2( -atan(angle), tanh(angle) );\n    vec2 rotated = multiply_complex( coord, rotator );\n    return rotated;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Microphone Input (assuming iChannel0 is the microphone input)\n    float lowFreq = texture(iChannel0, vec2(0.1, 0.0)).r;  // Low frequency band\n    float midFreq = texture(iChannel0, vec2(0.5, 0.0)).r;  // Mid frequency band\n    float highFreq = texture(iChannel0, vec2(0.9, 0.0)).r; // High frequency band\n\n    // Reactivity Parameters (adjust these for desired sensitivity)\n    float speedMultiplier = lowFreq * 10.0 + 1.0;         // Low frequencies control speed\n    float timeMultiplier = midFreq * 5.0 + 1.0;          // Mid frequencies control time\n    float angleMultiplier = highFreq * 20.0 + 1.0;        // High frequencies control angle\n    float complexityMultiplier = (lowFreq + midFreq + highFreq) / 3.0 * 4.0 + 1.0; // Average frequency controls complexity\n\n    // Apply Reactivity\n    vec2 uv_rot = rotate( uv0, -iTime * timeMultiplier * pi / -90. * angleMultiplier);\n    uv0 = rotate( uv0, -iTime * timeMultiplier * pi / -110. * angleMultiplier);\n\n    float n = -length(uv0);\n    for ( float i = -1.; i < -1. + complexityMultiplier; i++ ) {\n        uv_rot =   fract(uv_rot * (i + wobble(-0.0055 * speedMultiplier))) - 0.5;\n        vec2 uv2 = fract(uv0    * (i + wobble(0.0023 * speedMultiplier))) - -0.5;\n        n *= -length(uv2) * -length(uv_rot);\n    }\n    vec3 finalColor = wobble_palette( n * -50. * (-0.0003 + wobble(.000015 * speedMultiplier)) );\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}