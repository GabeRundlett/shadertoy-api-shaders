{
    "Shader": {
        "info": {
            "date": "1724984453",
            "description": "SDF torus + Casting torodial warped noise, kinematics",
            "flags": 0,
            "hasliked": 0,
            "id": "4fBfWm",
            "likes": 0,
            "name": "Torus #1",
            "published": 3,
            "tags": [
                "sdf",
                "kinematics",
                "toroidal"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 49
        },
        "renderpass": [
            {
                "code": "// ShaderToy shader\n\n#define MAX_MARCHING_STEPS 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define EPSILON 0.001\n\nmat3 rotateAxis(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(\n        oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,\n        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c\n    );\n}\n\n// Kinematic velocity components\nvec3 velocity(vec3 p, float R0, float thetaDot, float zetaDot) {\n    vec3 e_r = vec3(cos(p.y) * cos(p.z), cos(p.y) * sin(p.z), sin(p.y));\n    vec3 e_theta = vec3(-sin(p.y) * cos(p.z), -sin(p.y) * sin(p.z), cos(p.y));\n    vec3 e_zeta = vec3(-sin(p.z), cos(p.z), 0.0);\n\n    return thetaDot * e_theta + zetaDot * (R0 + p.x * cos(p.y)) * e_zeta;\n}\n\n// Kinematic acceleration components\nvec3 acceleration(vec3 p, float R0, float thetaDot, float thetaDDot, float zetaDot, float zetaDDot) {\n    vec3 e_r = vec3(cos(p.y) * cos(p.z), cos(p.y) * sin(p.z), sin(p.y));\n    vec3 e_theta = vec3(-sin(p.y) * cos(p.z), -sin(p.y) * sin(p.z), cos(p.y));\n    vec3 e_zeta = vec3(-sin(p.z), cos(p.z), 0.0);\n\n    float radialAcc = thetaDDot - p.x * thetaDot * thetaDot - p.x * zetaDot * zetaDot * cos(p.y) * cos(p.y) - R0 * zetaDot * zetaDot * cos(p.y);\n    float poloidalAcc = 2.0 * thetaDot * zetaDot * p.x * cos(p.y) * sin(p.y) + R0 * zetaDot * zetaDot * sin(p.y) + p.x * thetaDot * zetaDot * zetaDot * sin(2.0 * p.y);\n    float toroidalAcc = 2.0 * zetaDot * (p.x * thetaDot * sin(p.y) - thetaDDot) + zetaDDot * (R0 + p.x * cos(p.y));\n\n    return radialAcc * e_r + poloidalAcc * e_theta + toroidalAcc * e_zeta;\n}\n\n// Modulated noise functions with kinematic components\nfloat noise(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(mix( dot(i + vec3(0,0,0), f - vec3(0,0,0)),\n                        dot(i + vec3(1,0,0), f - vec3(1,0,0)), f.x),\n                   mix( dot(i + vec3(0,1,0), f - vec3(0,1,0)),\n                        dot(i + vec3(1,1,0), f - vec3(1,1,0)), f.x), f.y),\n               mix(mix( dot(i + vec3(0,0,1), f - vec3(0,0,1)),\n                        dot(i + vec3(1,0,1), f - vec3(1,0,1)), f.x),\n                   mix( dot(i + vec3(0,1,1), f - vec3(0,1,1)),\n                        dot(i + vec3(1,1,1), f - vec3(1,1,1)), f.x), f.y), f.z);\n}\n\nfloat modulatedNoise(vec3 p, float time, vec3 velocity, vec3 acceleration) {\n    float noiseValue = noise(p);\n    noiseValue += dot(velocity, p) * sin(time);\n    noiseValue += dot(acceleration, p) * cos(time);\n    return noiseValue;\n}\n\nvec3 finalNoise(vec3 p, float time, float R0, float thetaDot, float thetaDDot, float zetaDot, float zetaDDot) {\n    vec3 vel = velocity(p, R0, thetaDot, zetaDot);\n    vec3 acc = acceleration(p, R0, thetaDot, thetaDDot, zetaDot, zetaDDot);\n\n    float noise1 = modulatedNoise(p + 0.5, time, vel, acc);\n    float noise2 = modulatedNoise(p - 0.5, time, vel * 1.5, acc * 0.5);\n    float noise3 = modulatedNoise(p * 0.5, time, vel * 0.8, acc * 1.2);\n\n    return vec3(noise1, noise2, noise3);\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat shortestDistanceToSurface(vec3 ro, vec3 rd, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sdTorus(ro + depth * rd, vec2(1.0, 0.25));\n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 colorGradient(float noiseValue) {\n    return mix(vec3(0.0, 0.5, 0.7), vec3(0.2, 0.7, 1.0), noiseValue);\n}\n\nfloat intensityControl(float noiseValue) {\n    return log(1.0 + 2.0 * noiseValue);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float dist = shortestDistanceToSurface(ro, rd, MIN_DIST, MAX_DIST);\n\n    vec3 p = ro + dist * rd;\n\n    // Apply final modulated noise with kinematic effects\n    vec3 noiseValue = finalNoise(p, iTime, 1.0, 0.5, 0.05, 0.3, 0.02);\n\n    // Map noise to color\n    vec3 color = colorGradient(noiseValue.x);\n\n    // Adjust intensity with logarithmic control\n    color *= intensityControl(noiseValue.y);\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}