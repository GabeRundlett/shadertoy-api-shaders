{
    "Shader": {
        "info": {
            "date": "1721230009",
            "description": "combination of  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/7lKSDz and fbm mix",
            "flags": 1,
            "hasliked": 0,
            "id": "XcfczB",
            "likes": 5,
            "name": "other shine star",
            "published": 3,
            "tags": [
                "star",
                "galaxy",
                "shine",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "\n#define iterations 15\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define NUM_OCTAVES 5\n#define time iTime\n#define resolution iResolution.xy\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.05-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\n\n\nmat3 rotX(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n    1, 0, 0,\n    0, c, -s,\n    0, s, c\n    );\n}\nmat3 rotY(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n    c, 0, -s,\n    0, 1, 0,\n    s, 0, c\n    );\n}\n\nfloat random(vec2 pos) {\n    return fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise(vec2 pos) {\n    vec2 i = floor(pos);\n    vec2 f = fract(pos);\n    float a = random(i + vec2(0.0, 0.0));\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n    for (int i=0; i<NUM_OCTAVES; i++) {\n        v += a * noise(pos);\n        pos = rot * pos * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n#define time iTime\n\nconst float PI = 3.1415925358;\n\nfloat safety_sin( in float x ) { return sin( mod( x, PI ) ); }\n\nfloat rand( vec2 p ) { return fract( safety_sin( dot(p, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 + time * .35 ); }\n\nfloat noise2( vec2 x )\n{\n\tvec2 i = floor(x);\n\tvec2 f = fract(x);\n\tvec4 h;\n\t// Smooth Interpolation\n\tf = f * f * ( f * -2.0 + 3.0 );\n\t// Four corners in 2D of a tile\n\th.x = rand( i + vec2( 0., 0. ) );\n\th.y = rand( i + vec2( 1., 0. ) );\n\th.z = rand( i + vec2( 0., 1. ) );\n\th.w = rand( i + vec2( 1., 1. ) );\n\t// Mix 4 coorners porcentages\n\treturn mix( mix( h.x, h.y, f.x ), mix( h.z, h.w, f.x ), f.y );\n}\n\nfloat star_burst( vec2 p )\n{\n\tfloat k0 = 2.0;\n\tfloat k1 = 1.0;\n\tfloat k2 = 0.5;\n\tfloat k3 = 12.0;\n\tfloat k4 = 12.0;\n    float k5 = 2.0;\n    float k6 = 5.2;\n    float k7 = 4.0;\n    float k8 = 6.2;\n\t\n\tfloat l  = length( p );\n    float l2 = pow( l * k1, k2 );\n\tfloat n0 = noise2( vec2( atan(  p.y,  p.x ) * k0, l2 ) * k3 );\n\tfloat n1 = noise2( vec2( atan( -p.y, -p.x ) * k0, l2 ) * k3 );\n\tfloat n  = pow( max( n0, n1 ), k4 ) * pow( clamp( 1.0 - l * k5, 0.0, 1.0 ), k6 );\n\tn += pow( clamp( 1.0 - ( l * k7 - 0.1 ), 0.0, 1.0 ), k8 );\n\treturn n;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n    \tuv*=fract(-iTime*1.1);\n\tvec3 dir=vec3(uv*zoom,iTime*0.009);\n\nvec2 p = (gl_FragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n\n    float t = 0.0, d;\n\n    float time2 = 2.6 * time / 5.0;\n\n    vec2 q = vec2(0.0);\n    q.x = fbm(p + 0.00 * time2);\n    q.y = fbm(p + vec2(1.0));\n    vec2 r = vec2(0.0);\n    r.x = fbm(p + 1.0 * q + vec2(1.7, 9.2) + 0.15 * time2);\n    r.y = fbm(p + 1.0 * q + vec2(8.3, 2.8) + 0.126 * time2);\n    float f = fbm(p + r);\n    vec3 color = mix(\n    vec3(1.90, 0.2, 0.1),\n    vec3(1.50, 0.07, 0.07),\n    clamp((f * f) * 4.0, 1.0, 0.0)\n    );\n\n    color = mix(\n    color,\n    vec3(0.3, 0.5, 0.90),\n    clamp(length(q), 1.0, 2.0)\n    );\n vec2 p2 = fragCoord / min( iResolution.x, iResolution.y );\n    \n    p2 -= 0.5; p2.x -= 0.35;\n    p2 *= 0.5;\n    \n\tfloat r2 = star_burst( p2 * 1.1 );\n\tfloat g = star_burst( p2 );\n\tfloat b = star_burst( p2 * 0.2 );\n\n    // Output to screen\n    vec3 col = pow( vec3( r2, g, b ), vec3( 1.0 / 2.2 ) );\n\n    color = mix(\n    color,\n    vec3(.0, 1.0, 0.0),\n    clamp(length(r.y), 0.2, 0.0)\n    );\n\n    color = ( f + 1.09 * f * + 0.8 * f) * color;\n\n\tvec3 from=vec3(1.,.5,0.5)*col;\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor+=vec4(color+col,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}