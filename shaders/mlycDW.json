{
    "Shader": {
        "info": {
            "date": "1700222755",
            "description": "just a little droplet generator i made while testing out a bokeh effect",
            "flags": 0,
            "hasliked": 0,
            "id": "mlycDW",
            "likes": 2,
            "name": "droplet lmao",
            "published": 3,
            "tags": [
                "effect",
                "droplet"
            ],
            "usePreview": 0,
            "username": "hatenal",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "//smoothstep but shorter lmao\n#define S(a, b, t) smoothstep(a, b, t)\n\n// declare the ray\nstruct ray {\n    vec3 o, d;\n};\n\n//function to create the ray from the camera point and return it\nray GetRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom) {\n    ray a;\n    a.o = camPos;\n    vec3 f = normalize(lookat-camPos);\n    vec3 r = cross(vec3(0, 1, 0), f);\n    vec3 u = cross(f, r);\n    vec3 c = a.o + f*zoom; \n    vec3 i = c + uv.x * r + uv.y * u;\n    \n    a.d = normalize(i-a.o);\n    \n    return a;\n}\n\n//math to return the closest point using some math\nvec3 ClosestPoint(ray r, vec3 p) {\n    return r.o + max(0., dot(p-r.o, r.d))*r.d;\n}\nfloat DistRay(ray r, vec3 p) {\n    return length(p-ClosestPoint(r, p));\n}\n\n//simple Bokeh function\nfloat Bokeh(ray r, vec3 p, float size, float blur) {\n    float d = DistRay(r, p);\n   \n    float c = S(size, size*(1.-blur), d);\n    c *= mix(.7, 1., S(size*.8, size, d));\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalize pixel coordinates (from 0 to 1)\n   vec2 uv = fragCoord/iResolution.xy;\n   \n   //make canvas square\n   uv -= .5;\n   uv.x *= iResolution.x/iResolution.y;\n   \n   // declare camera position and rotation \n   vec3 camPos = vec3(0., 0., 0.);\n   vec3 lookat = vec3(0., 0., .000000000000001);\n\n   //generate the ray\n   ray r = GetRay(uv, camPos, lookat, 2.);\n   \n   vec3 p = vec3(0, 0, 5.);\n   \n   float c = Bokeh(r, p, tan(iTime-1.), tan(iTime-1.));\n   \n   vec3 col = (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)))*c;\n   \n   fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}