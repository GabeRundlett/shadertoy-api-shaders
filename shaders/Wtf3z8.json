{
    "Shader": {
        "info": {
            "date": "1555569838",
            "description": "Reminds me of those old tube cameras they filmed Doctor Who with on the BBC.",
            "flags": 34,
            "hasliked": 0,
            "id": "Wtf3z8",
            "likes": 3,
            "name": "Liquify Webcam for Doctor Who",
            "published": 3,
            "tags": [
                "webcam",
                "multipass"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 817
        },
        "renderpass": [
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n#define webcam(g) texture(iChannel2, (g)/iResolution.xy)\n#define width int 100\n#define height int 100\n#define cellCol[height] uniform float \n#define toxic 10000.0\n#define toxfactor 0.001\n#define redness 0.125\n#define blueness 0.25\nfloat sigmoid(float a, float f)\n{\n\treturn 1.0/(1.0+exp(-f*a));\n}\n\n//void mainImage(out vec4 fragColor, vec2 fragCoord)\n//{\n  //  edgeStrength = sigmoid(edgeStrength - 0.2, 32.0); \n//}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{       \n    // x,y => pos\n\t// z => pressure\n\t// w => ink\t\n\n   \tvec4 aa = tex(fragCoord+vec2(1,0));\n\tvec4 bb = tex(fragCoord+vec2(0,1));\n\tvec4 cc = tex(fragCoord+vec2(-1,0));\n\tvec4 dd = tex(fragCoord+vec2(0,-1));\n\tvec4 herbivore = herbtex(fragCoord);\n\tvec4 webcamPixel = webcam(fragCoord);\n\tvec4 tomachi = vec4(0.75, 0.5, 0., 1.);\n    float r, g, b, pressure;\n  \tfloat rh, gh, bh;\n    float biomass = abs( aa.w + bb.w +  cc.w + dd.w) + abs(aa.z + bb.z + cc.z + dd.z); // abs converts to positive\n\tfloat pollenSpeed = max(max(abs(aa.x) , abs(bb.x)),max(abs(cc.x) , abs(dd.x)));   \n\n    r = (abs(tex(fragCoord).x));// + (tex(fragCoord).w*0.13);\n    g = ((tex(fragCoord).z));// + (tex(fragCoord).w);\n    b = (abs(tex(fragCoord).y));// + (tex(fragCoord).w*0.00016);\n    \n    rh = herbivore.r; // RED\n    gh = (herbivore.g*0.2) + rh; // GREEN \n    bh = (herbivore.b*0.1)+ rh; // BLUE\n    if (rh > 0.) { rh*=10.; } // 10X BRIGHTEN\n\n    fragColor = vec4(0.);//herbivore;// * tomachi;//*vec4(0.001);\n  \t//fragColor += (sin(herbtex(fragCoord).w)*115.) * vec4(69.7,16.0,3.9,1.0);\n    fragColor += vec4(r, g, b, 1.) * vec4(0.55,0.15,0.25,1.);\n    fragColor += vec4(rh, gh, bh,1.);\n    fragColor += (0.99*sin(tex(fragCoord).w * 0.595 ) * sin(vec4(0.5,5.0,4.9,1.0)));\n    fragColor += 0.1152459*((sin(tex(fragCoord).z*0.5) * vec4(1.27,16.0,4.9,1.0)));\n   \tfragColor += 0.1695*sin(tex(fragCoord).w * vec4(69.7,16.0,3.9,1.0));\n    fragColor += webcamPixel;\n    //fragColor -=  sin(vec4(0.5,5.0,4.9,1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://github.com/aiekick/NoodlesPlate/blob/master/fluid.glsl\n//NoodlesPlate widgets\n//uniform(hidden) \tint\t\t\t(frame) \t\t\t\t\t\tuFrame;\n//uniform(hidden) \tfloat\t\t(deltatime) \t\t\t\t\tuDeltaTime;\n//uniform(hidden) \tsampler2D\t(buffer:0) \t\t\t\t\t\tbuffer;\n//uniform(hidden) \tsampler2D\t(buffer:1) \t\t\t\t\t\tbuffer1;\n//uniform(hidden) \tvec2\t\t(buffer:0) \t\t\t\t\t\tsize;\n//uniform(color) \tvec3\t\t(0:10:7.7,6.0,7.5) \t\t\t\tcolor;\n//uniform(physic) \tfloat\t\t(0.0:1.0:0.1) \t\t\t\t\tforce;\n//uniform(prism) \tfloat\t\t(0.00001:0.1:0.01) \t\t\t\tconstraint;\n//uniform(prism) \tfloat\t\t(-1.0:1.0:0.0) \t\t\t\t\teffect;\n//uniform(prism) \tfloat\t\t(0.99:1.0:1.0) \t\t\t\t\tviscosity;\n//uniform(emit) \tfloat\t\t(1.0:20.0:5.0) \t\t\t\t\temitSize;\n//uniform(emit) \tint\t\t\t(0:50:1) \t\t\t\t\t\tcount;\n//uniform(emit) \tfloat\t\t(0.0:0.5:0.3) \t\t\t\t\tradius;\n//uniform(emit) \tfloat\t\t(checkbox:true) \t\t\t\temit;\n//uniform(shape) \tint\t\t\t(combobox:circle,triangle,quad) shapeType;\n//#define magic 0.25012303\n//#define magic 0.25\n//#define magic 0.250000000000001\n#define magic 0.25012345\n#define webcam(g) texture(iChannel2, (g)/iResolution.xy)\n#define webcamPixel webcam(fragCoord)\n\n#define topspeed 10.76\n#define tides 0.0833\n#define rotation 0.2583\n#define expansion 0.001\n#define count 28\n#define radius 0.943\n#define emitSize 2.\n#define force 1.01\n#define constraint 0.01\n#define effect 0.99\n#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n#define toxic 1000.\n#define border 80.\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.w = 1.0\n#define wallCircle(v,d) if (length(g-(v)) < (d)) fragColor.w = fragColor.z / (length(fragColor.xy)+0.0001), fragColor.xy *= 0.\n#define s iResolution.xy\n#define theTides(offset) 0.003951*(sin((iTime*tides)+offset+30.)-0.5)\nfloat shape(vec2 p, vec2 d)\n{\n\tfloat r = min(d.x, d.y);\n\tfloat tri = max(abs(p.x)-p.y,p.y) - r;\n    return tri;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // x,y => pos\n\t// z => pressure\n\t// w => ink\n\t\n\tvec2 g = fragCoord;\n\tvec4 a = tex(g+vec2(1,0));\n\tvec4 b = tex(g+vec2(0,1));\n\tvec4 c = tex(g+vec2(-1,0));\n\tvec4 d = tex(g+vec2(0,-1));\n    \n    float red = webcamPixel.r;\n    float green = webcamPixel.g;\n    float blue = webcamPixel.b;\n    \n    \n\tvec4 tomachiBoost = vec4(1.0001,1.0001,1.0001,0.99);\n\tvec4 tomachiSuppress = vec4(-0.999,-0.999,0.99,0.99);\n    vec4 tomachi = tomachiBoost;\n    vec4 herbi = herbtex(g);\n\n    // LOAD PREVIOUS COLOUR FROM TEXTURE\n\tfragColor = tex(g-tex(g).xy) * tomachi*0.1; // last state\n    fragColor.r += webcamPixel.r*0.91;\n    fragColor.g += webcamPixel.g*0.95;\n    fragColor.b += webcamPixel.b;\n\n    \n\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    float sidepresh = abs(gp.x);\n    float vertpresh = abs(gp.y);\n    \n\t// ANYTHING ABOVE 0.25 CREATES BEAUTIFUL CHAOS. 0.2499 BORING. \n    //float pressure = (0.259519-theTides()) * ((a.z + b.z + c.z + d.z) - 0.05) * (c.x - a.x + d.y - b.y);\n    gp += vec2(theTides(1.), theTides(0.)); // TIDES GENTLY MOVE SHIT\n\tfloat pressure = magic  * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n    // float pressure = 0.2499 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n    //if (sidepresh > toxic || vertpresh > toxic || abs(pressure) > 0.26 ) { // OVERPRESSURE VALVE\n    if (abs(pressure) > 10.51) { // OVERPRESSURE VALVE\n    \tpressure *= 0.589;\n       \t//gp.x = 0.;\n      \tgp.y += 0.001;\n    } else {\n        \n    }\n    if (abs(gp.x) > topspeed) { // OVERSPEED VALVE\n       gp.x += -0.1;\n       pressure *= 0.99;\n    } \n    if (abs(gp.y) > topspeed) {\n       gp.y += -0.1;\n       pressure *= 0.99;\n    }\n    \n    // IF EATEN BY HERBIVORE ZERO THE CELL:\n    if (herbi.r > 0. || herbi.g > 0. || herbi.b > 0.  ) {fragColor = vec4(0.8,0.,0.8,0.);} \n\n    \n   //if (iFrame < 2) {\n       // fragColor = vec4(\n           // sin(g.x*1000.),\n           // sin(g.y*1000.),\n           // sin(g.x*g.y),\n           // 0.00015); // *vec4(0.91);\n   \t\t//fragColor = vec4(-0.15);\n    //}\n\t\n    if (g.x < 1. || g.y < 1. || g.x > s.x - 1. || g.y > s.y - 1.) fragColor.xy *= -0.5;\n    if (g.x < border || g.y < border || g.x > s.x - border || g.y > s.y - border) {\n        fragColor.z *= 0.78941;\n        fragColor.xy *= 1.01;// 0.8002;  // 1.002      \n    }\n\tif (g.x < 1. || g.y < 1. || g.x > s.x - 1. || g.y > s.y - 1.) fragColor.xy *= 0.;\n\t\n \n\tfor (int i=0;i<count;i++)\n\t{\n\t\tfloat a = 6.28318 * float(i)/float(count);\n\t\tvec2 dir = vec2(cos(a+iTime*rotation),sin(a+iTime*rotation));\n\t\tvec2 p = s * 0.95 - dir * radius * min((s.x*iTime*expansion)-(iResolution.x/8.),(s.y*iTime*expansion)-(iResolution.y/8.));\n\t\temit(p, dir);\n\t}\n\t\n\t// wall\n\t//vec2 p = g - s * 0.015;\n\t//vec2 dim = vec2(s.x * 0.0152);\n\t//if (shape(g-s*0.25*iTime, dim) < 0.1) \n\t//{\n\t\t//fragColor.w = fragColor.z / (shape(fragColor.xy, vec2(constraint)));\n\t\t//fragColor.xy *= effect * (shape(fragColor.xy, vec2(constraint)));\n\t//}\n    \tfragColor.xyz = vec3(\n\t\tfragColor.x + gp.x,\n\t\tfragColor.y + gp.y,\n\t\tpressure);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define tex(g) texture(iChannel0, (g)/iResolution.xy)\n#define herbtex(g) texture(iChannel1, (g)/iResolution.xy)\n#define toxic 12.\n#define emit(v,s) if (length(g-(v)) < emitSize) fragColor.xy = fragColor.xy * (1.0 - force) + force * (s), fragColor.z = 1.0\n#define emitSize 1.950\n#define force 0.99\n\nfloat smoothbump(float center, float width, float x) {\n  float w2 = width/2.0;\n  float cp = center+w2;\n  float cm = center-w2;\n  float c = smoothstep(cm, center, x) * (1.0-smoothstep(center, cp, x));\n  return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// tomachiAmp = vec4(0.75, 0., 0.75, 1.);\n    float red, green, blue = 0.;\n    vec2 g = fragCoord;\n    vec4  tomachiAmp = herbtex(g);\n    \n    // SAMPLE THE HERBIVORE\n    vec4 a = herbtex(g+vec2(1,0));\n\tvec4 b = herbtex(g+vec2(0,1));\n\tvec4 c = herbtex(g+vec2(-1,0));\n\tvec4 d = herbtex(g+vec2(0,-1));\n    float population = a.r + b.r + c.r + d.r; // HERBIVORE IS STORED IN THE RED CHANNEL\n    // SAMPLE THE AMOEBA\n    vec4 aa = tex(fragCoord+vec2(1,0));\n\tvec4 bb = tex(fragCoord+vec2(0,1));\n\tvec4 cc = tex(fragCoord+vec2(-1,0));\n\tvec4 dd = tex(fragCoord+vec2(0,-1));\n    \n    // IF CURRENT AREA CONTAINS HERBIVORES (RED PIXELS),\n    // DECIDE WHICH WAY TO MOVE AND PARTY \n    if (population > 0.) {\n     float bestCellSoFar = 0.;\n     int bestCellIndex = -1;\n        // RIGHT\n        if (aa.g > bestCellSoFar && a.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            bestCellIndex++; // which cell \n            bestCellSoFar = aa.g; // high score\n            \n        // DOWN \n        } else if (bb.g > bestCellSoFar && b.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            bestCellIndex++; // which cell \n            bestCellSoFar = bb.g; // high score\n        // LEFT\n        } else if (cc.g > bestCellSoFar && c.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            bestCellIndex++; // which cell \n            bestCellSoFar = cc.g; // high score\n        // UP\n        } else if (dd.g > bestCellSoFar && d.r == 0.) { // IF THE BEST AND NOT OCCUPIED\n            bestCellIndex++; // which cell \n            bestCellSoFar = dd.g; // high score\n        }\n        \n            \n    }\n    \n    // PULL LAST STATE:\n \t//tomachiAmp += herbtex(g-herbtex(g).xy); // last state\n \ttomachiAmp += population + tomachiAmp; // last state\n    \n    // ANALYSE THE SAMPLE\n    float pressure = 0.250919 * (a.z + b.z + c.z + d.z) - 0.05 * (c.x - a.x + d.y - b.y);\n\tvec2 gp = vec2(a.z-c.z,b.z-d.z); // pressure gradient\n    float biomass =abs( a.w + b.w +  c.w + d.w + a.z + b.z + c.z + d.z); // abs converts to positive\n  \n    // GENESIS\n    if (abs(pressure) > 10.99) {\n    \tred += 0.015;\n    }\n\n    // support mouse clicks \n    float mouseX = iMouse.x;\n    float mouseY = iMouse.y;\n    float mouseZ = iMouse.z;\n    float mouseW = iMouse.w;\n    \n    \n    \n  vec2  uv = (fragCoord.xy / iResolution.xy);\n  vec4  m  = iMouse / iResolution.xyxy;\n  float m0 = 0.;//(m.z > 0.0) ? 0.1 : 0.2;\n  float m1 = smoothbump(abs(m.z),0.1,uv.x) *\n             smoothbump(abs(m.w),0.1,uv.y);\n  float m2 = smoothbump(m.x,0.05,uv.x) *\n             smoothbump(m.y,0.05,uv.y);\n\t\tvec4 mouseClick = vec4(m1,m1,0.,0.5);\n\n    tomachiAmp *= vec4(m1,m0,m2,1.0);\n   \temit(uv,m.z);\n    //fragColor = vec4(0.);\n    fragColor = tomachiAmp + vec4(red, green,blue,1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}