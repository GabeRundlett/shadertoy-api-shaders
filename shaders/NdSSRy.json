{
    "Shader": {
        "info": {
            "date": "1620425599",
            "description": "Generated using the node based material maker using my raymarching lib (see code comments)\nYoutube video making this https://youtu.be/VzV9zOzzUVA",
            "flags": 0,
            "hasliked": 0,
            "id": "NdSSRy",
            "likes": 12,
            "name": "Material Maker Experiment 003",
            "published": 3,
            "tags": [
                "generated",
                "materialmaker",
                "nodes"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "// Material Maker Experiment 003\n// By PauloFalcao\n//\n// Made in the node base material maker\n//\n// Youtube video making this https://youtu.be/VzV9zOzzUVA\n//\n// MaterialMaker is a nodebased shader maker to make procedural textures\n// With custom nodes GLSL nodes created directly in the tool,\n// it's possible to make complex stuff like raymarching :)\n//\n// It's also possible to export the generated code to Shadertoy!\n//\n// I made a library with Ray Marching nodes\n// 1st version 0.01 have 44 new nodes\n// Some nodes are based in code from other authors from shadertoy\n// I always refer the shader author and the shadertoy original code\n// The idea is to reuse the code to quicky create something without coding experience\n// Or just focus on the code of a single node\n//\n// You need Material Maker - https://rodzilla.itch.io/material-maker\n// And my library - https://github.com/paulofalcao/MaterialMakerRayMarching\n// \n// The Material Maker source is here\n//    https://github.com/paulofalcao/MaterialMakerRayMarching/blob/main/Examples/pxf003.mms\n// Just copy-paste into Material Maker\n\nfloat sdSmoothXYUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n\nconst float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat/vec2(2.0*PI,PI);\n}\n\n\n//Simple HDRI START\n\n//Hash without Sine Dave_Hoskins\n//https://www.shadertoy.com/view/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n//Simple HDRI END\n\nconst float p_o349467_CamY = 0.997000000;\nconst float p_o349467_LookAtX = 0.000000000;\nconst float p_o349467_LookAtY = -0.266000000;\nconst float p_o349467_LookAtZ = 0.000000000;\nconst float p_o349467_CamD = 1.825000000;\nconst float p_o349467_CamZoom = 0.977000000;\nconst float p_o349467_Reflection = 0.200000000;\nconst float p_o349467_Specular = 0.000000000;\nconst float p_o349467_Pow = 64.000000000;\nconst float p_o349467_SunX = 2.500000000;\nconst float p_o349467_SunY = 2.500000000;\nconst float p_o349467_SunZ = 1.000000000;\nconst float p_o349467_AmbLight = 0.250000000;\nconst float p_o349467_AmbOcclusion = 0.502000000;\nconst float p_o349467_Shadow = 1.000000000;\nconst float p_o538946_s = 0.330000000;\nconst float p_o528578_x = 0.000000000;\nconst float p_o528578_y = -1.000000000;\nconst float p_o528578_z = 0.000000000;\nconst float p_o663512_r = 1.270000000;\n\nfloat o360551_input_obj3d(vec3 p) {\n    float o663512_0_1_sdf3d = length((p))-p_o663512_r;\n    return o663512_0_1_sdf3d;\n}\n\nconst float p_o373061_x = 1.000000000;\nconst float p_o373061_y = 1.000000000;\nconst float p_o373061_z = 1.000000000;\nconst float p_o382957_xyz = 0.452000000;\nconst float p_o382957_x = 1.000000000;\nconst float p_o382957_y = 1.000000000;\nconst float p_o382957_z = 1.000000000;\n\nvec4 o360551_input_trans3d(vec4 p) {\n    vec4 o370386_0_1_v4v4 = (vec4(rotate3d((vec4((vec4((vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).xyz-vec3(p_o373061_x, p_o373061_y, p_o373061_z),(vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).w)).xyz/vec3(p_o382957_x, p_o382957_y, p_o382957_z)/p_o382957_xyz,(vec4((vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).xyz-vec3(p_o373061_x, p_o373061_y, p_o373061_z),(vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).w)).w)).xyz, -vec3((sin(iTime*0.05)*360.0), (sin(iTime*0.07)*360.0), (sin(iTime*0.03)*360.0))*0.01745329251), (vec4((vec4((vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).xyz-vec3(p_o373061_x, p_o373061_y, p_o373061_z),(vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).w)).xyz/vec3(p_o382957_x, p_o382957_y, p_o382957_z)/p_o382957_xyz,(vec4((vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).xyz-vec3(p_o373061_x, p_o373061_y, p_o373061_z),(vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).w)).w)).w));\n    vec4 o371615_0_1_v4v4 = o370386_0_1_v4v4;\n    vec4 o_o382957_0=o371615_0_1_v4v4;vec4 o382957_0_1_v4v4 = vec4(o_o382957_0.xyz,(vec4((vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).xyz-vec3(p_o373061_x, p_o373061_y, p_o373061_z),(vec4(vec3(sqrt((p).xyz*(p).xyz+(sin(iTime*0.2)*0.2+0.2))),(p).w)).w)).w/min(min(p_o382957_x, p_o382957_y), p_o382957_z)/p_o382957_xyz);\n    vec4 o373061_0_1_v4v4 = o382957_0_1_v4v4;\n    vec4 o391263_0_1_v4v4 = o373061_0_1_v4v4;\n    return o391263_0_1_v4v4;\n}\n\nconst float p_o694452_k = 0.010000000;\n\nfloat o360551_input_custombool(vec2 uv) {\n    float o694452_0_1_sdf2d = sdSmoothXYUnion((uv).x, (uv).y, p_o694452_k);\n    return o694452_0_1_sdf2d;\n}\n\nfloat for_custom_o360551(vec4 p) {\n  float d=o360551_input_obj3d(p.xyz);\n  float m=o360551_input_custombool(vec2(999999.0,d));\n  for(int i=0;i<6;i++){\n    p=o360551_input_trans3d(p);\n\td=o360551_input_obj3d(p.xyz);\n\tm=o360551_input_custombool(vec2(m,d/p.w));\n  }\n  return m;\n}\n\nfloat o349467_input_sdf_a(vec3 p) {\n    float o360551_0_1_sdf3d = for_custom_o360551(vec4((rotate3d(((((p))/p_o538946_s)-vec3(p_o528578_x, p_o528578_y, p_o528578_z)), -vec3((iTime*21.0), (iTime*27.0), (iTime*23.0))*0.01745329251)),1.0));\n    vec2 o512498_0_1_sdf3dc = vec2(o360551_0_1_sdf3d, 0.0);\n    vec2 o528578_0_1_sdf3dc = o512498_0_1_sdf3dc;\n    vec2 o538946_0_in = o528578_0_1_sdf3dc;vec2 o538946_0_1_sdf3dc = vec2(o538946_0_in.x*p_o538946_s, o538946_0_in.y);\n    return (o538946_0_1_sdf3dc).x;\n}\n\nvec3 o349467_input_tex3d_a(vec4 p) {\n    return vec3(1.0,0.1,0.1);\n}\n\nfloat o349467_input_sdf_b(vec3 p) {\n    return max((p).y+1.0,length(vec3((p).x,(p).y+1.0,(p).z))-10.0);\n}\n\nvec3 o349467_input_tex3d_b(vec4 p) {\n    return vec3(mod(floor((p).x*2.0)+floor((p).z*2.0),2.0))*0.9+0.1;\n}\n\nvec3 o349467_input_hdri(vec2 uv) {\n    return Simple360HDR_make360hdri(vec2((uv).x,-(uv).y+1.0),normalize(vec3(-p_o349467_SunX,p_o349467_SunY,-p_o349467_SunZ)));\n}\n\nvec2 input_o349467(vec3 p) {\n    float sdfa=o349467_input_sdf_a(p);\n\tfloat sdfb=o349467_input_sdf_b(p);\n\tif (sdfa<sdfb) {\n\t  return vec2(sdfa,0.0);\n\t} else {\n\t  return vec2(sdfb,1.0);\n\t}\n}\n\n//tetrahedron normal by PauloFalcao\n//https://www.shadertoy.com/view/XstGDS\nvec3 normal_o349467(vec3 p){  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=input_o349467(p+e.xyy).x;\n  float v2=input_o349467(p+e.yyx).x;\n  float v3=input_o349467(p+e.yxy).x;\n  float v4=input_o349467(p+e.xxx).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_o349467(inout float d,inout vec3 p,inout vec2 dS, vec3 ro, vec3 rd){\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = input_o349467(p);\n        d += dS.x;\n        if (d > 50.0 || abs(dS.x) < 0.0001) break;\n    }\n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcAO_o349467( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)/4.0;\n        float d = input_o349467( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n//from https://www.shadertoy.com/view/lsKcDD\nfloat calcSoftshadow_o349467( in vec3 ro, in vec3 rd, in float mint, in float tmax){\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = input_o349467( ro + rd*t ).x;\n        res = min( res, 10.0*h/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_o349467(vec2 uv) {\n    uv-=0.5;\n\tvec3 cam=vec3((sin(sin(iTime*0.2)*0.5+0.5)*4.0),p_o349467_CamY,(sin(sin(iTime*0.3)*0.5+0.5)*4.0))*p_o349467_CamZoom;\n\tvec3 lookat=vec3(p_o349467_LookAtX,p_o349467_LookAtY,p_o349467_LookAtZ);\n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*p_o349467_CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tvec2 dS=vec2(0);\n\tmarch_o349467(d,p,dS,ro,rd);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=(dS.y<0.5)?o349467_input_tex3d_a(vec4(p,1.0)):o349467_input_tex3d_b(vec4(p,1.0));\n\tvec3 light=normalize(vec3(p_o349467_SunX,p_o349467_SunY,p_o349467_SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_o349467(p);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_o349467(p,n),p_o349467_AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_o349467(p,light,0.05,5.0),p_o349467_Shadow);\n\t\tcolor=min(vec3(max(shadow,p_o349467_AmbLight)),max(l,p_o349467_AmbLight))*max(cAO,p_o349467_AmbLight)*objColor+pow(r,p_o349467_Pow)*p_o349467_Specular;\n\t\t//reflection\n\t\td=0.01;\n\t\tmarch_o349467(d,p,dS,p,ref);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=(dS.y<0.5)?o349467_input_tex3d_a(vec4(p,1.0)):o349467_input_tex3d_b(vec4(p,1.0));\n\t\t\tn=normal_o349467(p);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,p_o349467_AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=o349467_input_hdri(equirectangularMap(ref.xzy)).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,p_o349467_Reflection);\n\t} else {\n\t\tcolor=o349467_input_hdri(equirectangularMap(rd.xzy)).xyz;\n\t}\n\treturn color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float minSize = min(iResolution.x, iResolution.y);\n    vec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\n    vec3 o349467_0_1_rgb = raymarch_o349467((UV));\n    fragColor = vec4(o349467_0_1_rgb, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}