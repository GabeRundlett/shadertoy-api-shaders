{
    "Shader": {
        "info": {
            "date": "1643036921",
            "description": "playing around with more cylinder stretching stuff\n\ncouldnt get a nice background working - most code is from TheArtOfCode",
            "flags": 0,
            "hasliked": 0,
            "id": "ss2cRz",
            "likes": 17,
            "name": "3D Twirly Things",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 475
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 20.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    vec2 uv = p.xz;\n   \n    uv *= Rot(0.18 * p.y + 0.18 * cos(1.5 * iTime + 2. * p.y + 0.2 * dot(uv, uv)));\n    uv = abs(uv) - 1.6;\n    \n    float time = iTime + 2. * p.y;\n    float sc = 2.; //length(uv) * 32.;\n    \n    float r = 0.05;\n    //r += 0.05 * cos(4. * length(uv));\n    float sp = 1.;\n    float n = 7.;\n    float d = 100.;\n    for (float i = 0.; i < n; i++) {\n        float e = (i/n) * pi;\n        vec2 p = 0.5 * cos(time + e + 0.25 * pi * cos(iTime + 2. * e)) * vec2(cos(e), sin(e));\n        d = smin(d, length(uv - p) - 0.1 - 0.05 * cos(iTime + 10. * p.y + e));\n    }\n\n    return 0.7 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat GetLight(vec3 p, vec3 lightPos) {\n   // vec3 lightPos = vec3(0, 5, 6);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    dif = 0.2 + 0.8 * dif * step(length(lightPos-p), d);\n   // if(d<length(lightPos-p)) dif = 0.;\n    \n    return dif;\n}\n\nvec3 Bg(vec3 rd) {\n    float k = 0.5 + 0.5 * rd.y;\n   // k = smoothstep(0., 1., k);\n    \n    vec3 e = vec3(1.);\n    vec3 col = pal(0.9 * rd.y - 0.08, vec3(k), e, vec3(k), 1.15 * vec3(0.,0.33,0.66));\n    \n    //col = mix(col, vec3(1.), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    float l = 0.5 + 0.5 * thc(3., 0.5 * iTime);\n\n    float r = 5.;\n    float time = 0.25 * iTime;\n    vec3 ro = vec3(r * cos(time), 0. * iTime, r * sin(time));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.2);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float ambient = .3;\n        float difPower = .4;\n        //float dif = max(dot(n, normalize(vec3(1,2,3))), 0.);\n       // col = vec3(dif*difPower + ambient);\n\n        //float dif2 = GetLight(p, vec3(0.));\n       // col *= 1. * vec3(dif2);\n\n        //col *= texture(iChannel0,r).rgb;\n        float k = 0.5;\n        col = vec3(smoothstep(-k, k, r.y -n.y));\n        //col = clamp(col, 0., 1.);\n\n        vec3 e = vec3(1.);\n        col *= pal(r.y * 0.25, col, e, col, 1.15 *vec3(0.,0.33,0.66));\n        col *= 0.9 + 0.1 * h21(p.xz);\n        //col += mix(col, Bg(rd), 0.58* length(n.xz));\n    }\n    else { \n      //  col = Bg(rd);\n      /*\n       float d = length(uv);\n       float k = 1./iResolution.y;\n       float s = smoothstep(-k, k, -abs(d-0.4) + 0.01);\n       col = vec3(s);\n       */\n    }\n\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n// (SdSmoothMin) stolen from here: https://www.shadertoy.com/view/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}