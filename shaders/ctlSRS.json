{
    "Shader": {
        "info": {
            "date": "1674960456",
            "description": "high dimensional",
            "flags": 0,
            "hasliked": 0,
            "id": "ctlSRS",
            "likes": 3,
            "name": "4D Sphere",
            "published": 3,
            "tags": [
                "raymarch",
                "fractals"
            ],
            "usePreview": 0,
            "username": "oseday",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "//Sphere sdf from https://www.shadertoy.com/view/wtVGDR\n\n#define PI 3.14159265359\n#define rot(a) mat2(cos(a + PI*0.5*vec4(0,1,3,0)))\n\n#define complex\n\nfloat time;\n\nfloat cross4D(vec4 p) {\n    float aa = length(p.xy)-0.0001;\n    float bb = length(p.zw)-0.0001;\n    float cc = length(p.yw)-0.0001;\n    float dd = length(p.xw)-0.0001;\n    //float de = smin(smin(aa, bb, 0.1), cc, 0.1)-0.01;\n    return min(min(min(aa,bb),cc),dd);\n}\n\nfloat de4d(vec4 p) {\n    p.zw *= rot(PI/2.);\n    //p.xz *= rot(time*5.);\n    //p.xw *= rot(time*3.187);\n    //p.x += time*1.687;\n   \t//p.y -= time*1.87454;\n   \tp.w -= time*1.87454;\n   \tp.z -= 1.24;//time*1.87454;\n    //p.z = 0.;\n    vec4 inG = (fract(p*0.45) - 0.5);\n    return cross4D(inG);\n}\n\nfloat de(vec3 p) {\n    float d = dot(p, p);\n    d = de4d(vec4(p/d, 0.))*d;\n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n\tvec3 e = vec3(0.0, 0.00005, 0.0);\n\treturn normalize(vec3(\n\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\tde(p+e.xxy)-de(p-e.xxy)));\t\n}\n\nstruct rayresult{\n    vec3 o; //origin\n    vec3 v; //direction\n    float dist; //distance\n};\n\n#define EPSILON 0.0005\n\nmat4 cam = mat4(\n    1,0,0,0,\n    0,1,0,0,\n    0,0,1,0,\n    0,0,0,1\n);\n\nmat4 addmv(mat4 mat, vec3 v){\n    mat4 n = mat;\n    n[3]=n[3]+vec4(v,0);\n    return n;\n}\n\nmat4 mat4v(vec3 v){\n    return mat4(\n        1,0,0,v.x,\n        0,1,0,v.y,\n        0,0,1,v.z,\n        0,0,0,1\n    );\n}\n\nvec3 matpos(mat4 mat){\n    return mat[3].xyz;\n}\n\nconst float planedist = 1.00;\n\n\nfloat map(vec3 p)\n{\n    return de(p);\n}\n\n\nconst int kRaymarchIterations = 100;\nconst float mapddivisor = 1.08;\n\nconst vec3 sundir = normalize(vec3(0,1,1));\nconst vec3 suncol = vec3(0.8,0.8,0.8);\nconst vec3 objcol = vec3(0.9,0.9,0.8);\n\nvec3 manager(rayresult io){\n\n    vec3 skycol = texture(iChannel0,io.v).xyz;\n    \n\tfloat t = 0.00;\n    \n\tfor(int i=0; i<kRaymarchIterations; i++)\n\t{\n        vec3 pos = io.o + io.v * t;\n    \n\t\tfloat d = map(pos);\n        \n        \n\t\tif(d < 0.002){\n        if (length(pos) > 0.95)  return skycol;\n            if (length(pos-io.o) > 0.3){\n\n                vec3 n = getNormal(pos);\n\n                float sundot = dot(n,sundir);\n\n                vec3 col = suncol * sundot + objcol;\n\n                vec3 sdir = reflect(io.v,n);\n                col *= texture(iChannel0,sdir).xyz;\n\n                return col;\n            }else{\n                skycol *= 0.2;\n                t+=0.05;\n            }\n\t\t}\n        \n        t += d/mapddivisor;\n\t}\n    \n    return skycol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tick = iTime/5.;\n    time = tick;\n    \n    vec2 mouseuv = (iMouse.xy-iResolution.xy/2.0)/iResolution.xx*2.;\n\n    mat4 ncam = cam\n        *build_transform(vec3(0,0,0),vec3(0,-mouseuv.x*PI,0))\n        *build_transform(vec3(0,0,0),vec3(-mouseuv.y*PI,0,0))\n        ;\n        \n    ncam = ncam\n        *build_transform(vec3(0,0,-1.00),vec3(0,0,0))\n        ;\n    \n    vec3 campos = matpos(ncam);\n        \n    vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.xx*2.;\n\n    vec3 v = normalize(uv.x*ncam[0].xyz+uv.y*ncam[1].xyz+ncam[2].xyz*planedist);\n\n    vec3 color = vec3(0,0,0);\n\n    rayresult ray;\n    \n    ray.o=campos;\n    ray.v=v;\n    ray.dist=0.10;\n\n    color += manager(ray);\n\n    color = clamp(color,0.,1.);\n\n    fragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat4 build_transform(vec3 pos, vec3 ang) \n{\n  float cosX = cos(ang.x);\n  float sinX = sin(ang.x);\n  float cosY = cos(ang.y);\n  float sinY = sin(ang.y);\n  float cosZ = cos(ang.z);\n  float sinZ = sin(ang.z);\n\n  mat4 m;\n\n  float m00 = cosY * cosZ + sinX * sinY * sinZ; \n  float m01 = cosY * sinZ - sinX * sinY * cosZ; \n  float m02 = cosX * sinY;\n  float m03 = 0.0;\n  \n  float m04 = -cosX * sinZ; \n  float m05 = cosX * cosZ; \n  float m06 = sinX;\n  float m07 = 0.0;\n  \n  float m08 = sinX * cosY * sinZ - sinY * cosZ;\n  float m09 = -sinY * sinZ - sinX * cosY * cosZ;\n  float m10 = cosX * cosY;\n  float m11 = 0.0;\n  \n  float m12 = pos.x;\n  float m13 = pos.y;\n  float m14 = pos.z;\n  float m15 = 1.0;\n\n  /*\n  //------ Orientation ---------------------------------\n  m[0] = vec4(m00, m01, m02, m03); // first column.\n  m[1] = vec4(m04, m05, m06, m07); // second column.\n  m[2] = vec4(m08, m09, m10, m11); // third column.\n\n  //------ Position ------------------------------------\n  m[3] = vec4(m12, m13, m14, m15); // fourth column.\n  */\n\n  //------ Orientation ---------------------------------\n  m[0][0] = m00; // first entry of the first column.\n  m[0][1] = m01; // second entry of the first column.\n  m[0][2] = m02;\n  m[0][3] = m03;\n  \n  m[1][0] = m04; // first entry of the second column.\n  m[1][1] = m05; // second entry of the second column.\n  m[1][2] = m06;\n  m[1][3] = m07;\n\n  m[2][0] = m08; // first entry of the third column.\n  m[2][1] = m09; // second entry of the third column.\n  m[2][2] = m10;\n  m[2][3] = m11;\n  \n  //------ Position ------------------------------------\n  m[3][0] = m12; // first entry of the fourth column.\n  m[3][1] = m13; // second entry of the fourth column.\n  m[3][2] = m14;\n  m[3][3] = m15;\n\n  return m;\n}\n\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotateabout(vec3 vec, vec3 axis, float angle) {\n    return (rotationMatrix(axis, angle) * vec4(vec, 1.0)).xyz;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}