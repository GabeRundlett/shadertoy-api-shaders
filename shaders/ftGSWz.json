{
    "Shader": {
        "info": {
            "date": "1640442157",
            "description": "CC0 - 10 PRINT CHR$(205.5+RND(1)); : GOTO 10\nAttempting to recreate the classic C64 truchet pattern\nCan be found here for example: https://en.wikipedia.org/wiki/Truchet_tiles\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGSWz",
            "likes": 8,
            "name": "10 PRINT CHR$(205.5+RND(1)",
            "published": 3,
            "tags": [
                "c64",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "// CC0 - 10 PRINT CHR$(205.5+RND(1)); : GOTO 10\n//  Attempting to recreate the classic C64 truchet pattern\n//  Can be found here for example: https://en.wikipedia.org/wiki/Truchet_tiles\n\n// While very simple (especially the C64 version) the labyrinth it creates is fascinating.\n\n#define RESOLUTION  iResolution\n#define TIME        iTime\n\nfloat hash(vec2 p) {\n  float a = dot(p, vec2 (127.1, 311.7));\n  return fract(sin (a)*43758.5453123);\n}\n\nfloat cell_df(vec2 np, vec2 mp, vec2 off) {\n  const vec2 n0 = normalize(vec2(1.0, 1.0));\n  const vec2 n1 = normalize(vec2(-1.0, 1.0));\n\n  np += off;\n  mp -= off;\n  \n  float hh = hash(np);\n  vec2 n = hh > 0.5 ? n0 : n1;\n  vec2 t = vec2(n.y, -n.x);\n\n\n  vec2  p0 = mp;  \n  p0 = abs(p0);\n  p0 -= 0.5;\n  float d0 = length(p0)-0.0;\n\n  vec2  p1 = mp;\n  float d1 = dot(n, p1);\n  float px = dot(t, p1);\n  d1 = abs(px) > sqrt(0.5) ? d0 : abs(d1); \n\n  float d = d0;\n  d = min(d, d1);\n  \n  return d;\n}\n\nfloat truchet_df(vec2 p) {\n  vec2 np = floor(p+0.5);\n  vec2 mp = fract(p+0.5) - 0.5;\n  float d = 1E6;\n  const float off = 1.0;\n  for (float x=-off;x<=off;++x) {\n    for (float y=-off;y<=off;++y) {\n      vec2 o = vec2(x,y);\n      d = min(d,cell_df(np, mp, o));\n    }\n  }\n  return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  \n  float a = 0.1*TIME;\n  float z = mix(0.125, 0.25, 0.5+0.5*sin(sqrt(1.0/3.0)*a))*0.5;\n  p /= z;\n  p += 20.0*sin(vec2(sqrt(0.5)*a, a));\n  float d = truchet_df(p);\n  d -= 0.1;\n  d *= z;\n\n  const vec3 bgcol = vec3(68.0, 71.0, 226.0)/vec3(255.0);\n  const vec3 fgcol = vec3(164.0, 166.0, 251.0)/vec3(255.0);\n\n  vec3 col = bgcol;\n  col = mix(col,  fgcol, smoothstep(aa, -aa, d));\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}