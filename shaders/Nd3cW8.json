{
    "Shader": {
        "info": {
            "date": "1653345089",
            "description": "Exact distance to a shape made of four parabolic sections connected together, which can be solved analytically with a cubic equation. A bit squarer than a circle, and a lot circler than a square.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd3cW8",
            "likes": 28,
            "name": "Quadratic Circle - distance",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "quadratic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1694
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a shape made of four parabolic sections connected\n// together, which can be solved analytically with a cubic (unlike\n// Squircles and other similar shapes).\n//\n// This is an EXACT distance. I also provide a version (see line 48) which\n// is correct in the exterior of the shape and also in some interior parts.\n// Use the #define in lie 19 to enable. Use the mouse to to see the distances.\n//\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n\n// Make this 1 to see the simpler but sometimes incorrect versin\n#define USE_SIMPLIFICATION 0\n\n\n#if USE_SIMPLIFICATION==0\nfloat sdQuadraticCircle( in vec2 p )\n{\n    p = abs(p); if( p.y>p.x ) p=p.yx; // symmetries\n\n    float a = p.x-p.y;\n    float b = p.x+p.y;\n    float c = (2.0*b-1.0)/3.0;\n    float h = a*a + c*c*c;\n    float t;\n    if( h>=0.0 )\n    {   \n        h = sqrt(h);\n        t = sign(h-a)*pow(abs(h-a),1.0/3.0) - pow(h+a,1.0/3.0);\n    }\n    else\n    {   \n        float z = sqrt(-c);\n        float v = acos(a/(c*z))/3.0;\n        t = -z*(cos(v)+sin(v)*1.732050808);\n    }\n    t *= 0.5;\n    vec2 w = vec2(-t,t) + 0.75 - t*t - p;\n    return length(w) * sign( a*a*0.5+b-1.5 );\n}\n#else\n// This version is correct everywhere except at the center of the shape\nfloat sdQuadraticCircle( in vec2 p )\n{\n    p = abs(p); if( p.y>p.x ) p=p.yx; // symmetries\n\n    float a = p.x-p.y;\n    float b = p.x+p.y;\n    float c = (2.0*b-1.0)/3.0;\n    float h = sqrt(max(a*a+c*c*c,0.0));\n    float u = pow(max(h-a,0.0),1.0/3.0);\n    float v = pow(    h+a,     1.0/3.0);\n    float t = (u-v)*0.5;\n    vec2  w = vec2(-t,t) + 0.75 - t*t - p;\n    return length(w)*sign( a*a*0.5+b-1.5 );\n}\n#endif\n\n/*\n// VERY BAD approximation, not usable\nfloat sdQuadraticCircle( in vec2 pos )\n{\n    pos = abs(pos); if( pos.y>pos.x ) pos=pos.yx;\n    float a = pos.x-pos.y; float a2 = a*a;\n    float b = pos.x+pos.y;\n    return (a2*0.5+b-1.5)/sqrt(a2+1.0)/sqrt(2.0);\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n\tvec2  p  = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2  m  = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n    \n    const float si = 0.8;\n    \n    // distance\n    float d = sdQuadraticCircle(p/si)*si; \n    \n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 0.6 + 0.4*smoothstep(-0.5,0.5,cos(130.0*abs(d)));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.01-px,0.01+px,abs(d)) );\n    \n    // mouse interaction\n    if( iMouse.z>0.001 )\n    {\n    d = sdQuadraticCircle(m/si)*si; \n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n \n   \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}