{
    "Shader": {
        "info": {
            "date": "1692172042",
            "description": "Total unreadable code mess. Just playing getting a feel of shadertoy.",
            "flags": 32,
            "hasliked": 0,
            "id": "mtByzd",
            "likes": 1,
            "name": "Texture FeedBack",
            "published": 3,
            "tags": [
                "feedback"
            ],
            "usePreview": 0,
            "username": "Blindman67",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec4 col = texture(iChannel0, fragCoord / iResolution.xy);\n  fragColor = vec4(col *col); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 col = texture(iChannel0, uv)  * 2.0;\n    if (iFrame < WAIT_TO_START) {\n        col = texture(iChannel1, uv);\n    } else {\n        col -= texture(iChannel1, uv) * 5.4;\n    }\n    fragColor = col; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n      vec2 uv = fragCoord / iResolution.xy;\n      vec4 col1 = texture(iChannel0,uv);\n      float t = Time(iFrame);\n      float ang = (col1.x + col1.y + col1.z) * TAU * 0.3 + t * 0.3;\n      float len = (col1.x * col1.z * 10.0) / iResolution.x;\n      vec2 off1 = vec2(cos(ang), sin(ang)) * len;\n      vec4 col0 = texture(iChannel1,uv);\n      ang = (col0.x * col0.y * col0.z) * TAU * 30.3 + t * 0.13;\n      len = (col0.x * col0.z * 130.0) / iResolution.x;\n      vec2 off0 = vec2(cos(ang), sin(ang)) * len;\n      if (iFrame < WAIT_TO_START) {\n          fragColor  = texture(iChannel0, uv);// * (1.0 - iTime);\n      } else {\n          vec4 c1 = texture(iChannel1, uv + off1);\n          vec4 c2 = texture(iChannel2, uv + off0);\n          fragColor = pow((c1 * c1 + c2 * c2) * 0.5, vec4(0.5));\n      }      \n      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265359\n#define TAU (PI * 2.0)\n#define WAIT_TO_START 60\n\nconst float invTAU = 1.0 / TAU;\n\n\nvec2 points[4] = vec2[](\n    vec2(-100, 100),\n    vec2(100, 100),\n    vec2(100, -100),\n    vec2(-100, -100)\n);\nconst float inv_60 = 1.0 / 60.0;\nfloat Time(int f) { return float(f) * inv_60; }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 col1 = texture(iChannel0,uv);\n    float t = TAU * Time(iFrame) * (2.0 + uv.x + uv.y * 2.0);\n    vec2 px = vec2(cos(col1.x * t), sin(col1.y * t)) * 1.5 /  iResolution.xy;\n\n    vec4 col3 = texture(iChannel1,uv + px);\n    \n  if (iFrame < WAIT_TO_START) {\n      fragColor = col1;\n      } else {\n        vec3 dif2 = (vec3((col1.x - col3.x), (col1.y - col3.y), (col1.z - col3.z)));\n    fragColor = ( col1  - vec4(dif2 , 1.0) ) ;\n      \n      }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}