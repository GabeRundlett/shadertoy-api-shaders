{
    "Shader": {
        "info": {
            "date": "1654541600",
            "description": "Click-Position = Blue line\nDrag-Position = Orange line",
            "flags": 0,
            "hasliked": 0,
            "id": "fdVcR1",
            "likes": 8,
            "name": "Evenly Spaced Line",
            "published": 3,
            "tags": [
                "visualization",
                "geometry",
                "projective"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "/*\nStreamlined version using two directions in 3D-space: https://www.shadertoy.com/view/7sKcz1\n\n# Problem\n\nGiven the directions to following points in 2D-space:\n    - Zero (blue dot)\n    - Unit (orange dot)\n    - Infinity (end of green line)\nWhere are integer multiples of Unit (green dots)?\n\n# Solution\n\nNote: 0 is the projection center. It is different from Zero of the sought line.\n\n1. Choose an arbitrary point Zero != 0 on the Zero-direction\n2. Find Unit by intersecting two lines:\n    - Line(via=Zero, to=Infinity)\n    - Line(via=0   , to=Unit)\n3. Multiples = Zero + i * (Unit - Zero)\n*/\n\nvoid mainImage(out vec4 C, in vec2 O)\n{\n    initView(iResolution);\n    vec2 uv = fromView(O - .5);\n    vec2 click = fromView(abs(iMouse.zw));\n    vec2 mouse = fromView(abs(iMouse.xy));\n    if (iMouse == vec4(0))\n        click = vec2(-.5+sin(iTime), -2.), mouse = vec2(.3+sin(iTime), -1.);\n    \n    vec2 a = click;\n    vec2 b = mouse;\n    vec2 bw = perp(b);\n    vec2 v = b - a;\n    v = vec2(cos(cos(iTime)*.5), sin(cos(iTime)*.5));\n    vec2 w = perp(v);\n    float vf = -dot(a, bw) / dot(v, bw);\n\n    C = vec4(1);\n    float af = dot(uv, w) / dot(a, w);\n    float i = -dot(a * af - uv, v) / (vf * af * dot(v, v));\n    i = round(i);\n    {\n        vec2 x = a + i * vf * v;\n        C = blend(C, vec3(0), sdLine(uv, vec2(0), x, 0., inf) / f);\n        vec3 color = colors[2];\n        float size = 2.;\n        if (round(i) == 0.)\n            color = colors[0], size = 3.;\n        if (round(i) == 1.)\n            color = colors[1], size = 3.;\n        C = blend(C, color, length(uv - x) / f - size);\n    }\n    C = blend(C, vec3(0,0.5,0), sdLine(uv, vec2(0), v, -inf, inf) / f - .5);\n    C = blend(C, vec3(0,.2,1), sdLine(uv, vec2(0), a, 0., inf) / f - .5);\n    C = blend(C, vec3(1,.2,0), sdLine(uv, vec2(0), b, 0., inf) / f - .5);\n    C = blend(C, vec3(1,.2,0), length(uv - b) / f - 4.5);\n    C = blend(C, vec3(1), length(uv - b) / f - 2.5);\n    C = sqrt(C);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float inf = 1e3;\n\nfloat sdLine(vec2 p, vec2 a, vec2 b, float i, float j)\n{\n    vec2 v = b - a;\n    vec2 l = p - a;\n    float h = dot(l, v) / dot(v, v);\n    return length(l - v * clamp(h, i, j));\n}\n\nfloat sdLine(vec2 p, vec2 a, vec2 b)\n{\n    return sdLine(p, a, b, 0., 1.);\n}\n\nvec4 blend(vec4 C, vec3 c, float r)\n{\n    return mix(C, vec4(c, 1), clamp(1. - r, 0., 1.));\n}\n\nfloat f;\nvec2 cResolution;\n\nvoid initView(vec3 iResolution)\n{\n    f = 5. / iResolution.y;\n    cResolution = iResolution.xy;\n}\n\nvec2 fromView(vec2 O)\n{\n    vec2 uv = O;\n    uv.x -= cResolution.x / 2.;\n    uv.y -= cResolution.y / 2.;\n    uv *= f;\n    return uv;\n}\n\nconst vec3 colors[] = vec3[](vec3(0,.2,1), vec3(1,.2,0), vec3(0,0.5,0));\n\nvec2 perp(vec2 v)\n{\n    return vec2(-v.y, v.x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}