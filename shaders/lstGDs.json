{
    "Shader": {
        "info": {
            "date": "1453124592",
            "description": "Low quality but fast Buddhabrot rendering. More info here: [url]http://iquilezles.org/articles/budhabrot/budhabrot.htm[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "lstGDs",
            "likes": 31,
            "name": "Fast Buddhabrot",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandelbrot",
                "orbit",
                "buddhabrot",
                "divergent"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3265
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-ShareAlike 3.0 Unported\n// https://creativecommons.org/licenses/by-sa/3.0/\n\n\n\n// Low quality (somehow blurred) but fast Buddhabrot rendeirng. More info \n// here: https://iquilezles.org/articles/budhabrot and\n// here: https://iquilezles.org/articles/mset1bulb\n\nconst float precission = 350.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 f = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n\n    f *= precission*0.4/float(iFrame+1);\n    \n    f = pow( f, vec3(1.0,0.83,0.7) );\n    f *= 1.3;\n    f = min(f,1.0);\n    //f = f*f*(3.0-2.0*f);\n\n    fragColor = vec4( f, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Low quality (somehow blurred) but fast Buddhabrot rendeirng. More info \n// here: https://iquilezles.org/articles/budhabrot and\n// here: https://iquilezles.org/articles/mset1bulb\n\nvec2 p2c( in vec2 p )\n{\n    vec2 q = p/iResolution.xy; \n    q = -1.0 + 2.0*q;\n    q.x *= iResolution.x/iResolution.y;\n    return (q - vec2(0.5,0.0))*1.1;\n}\n\nvec2 c2p( in vec2 c )\n{\n    vec2 q = c/1.1 + vec2(0.5,0.0);\n    q.x *= iResolution.y/iResolution.x;\n\tq = (q+1.0)/2.0;    \n    return q*iResolution.xy;\n}\n\nvec2 rand( inout uint seed )\n{\n    seed = seed*0x343fdU + 0x269ec3U; uint x = seed;\n    seed = seed*0x343fdU + 0x269ec3U; uint y = seed;\n    return vec2( (uvec2(x,y)>>16)&32767U)/32767.0;\n}\n\nconst float precission = 350.0; // change in the image shader as well\nconst vec3  thresholds = vec3(512.0,256.0,128.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 g = texture( iChannel0, fragCoord/iResolution.xy ).xyz;\n    \n    float a = (500.0/iResolution.x);\n    \n    uvec2 p = uvec2(fragCoord-0.5);\n    uint seed = uint(iFrame)*512U*8U + p.y*1920U+p.x;\n    seed ^= (seed<<13);\n    \n    // do 8 passes per frame (since texture memory bandwidh is slow, the \n    // more computations I do per frame the better)\n    for( int j=0; j<8; j++ )\n    {\n        vec3 f = g;\n\n        // pick a random point, but not in H1 or H2\n        vec2 c = vec2(0.0);\n        for( int i=0; i<32; i++ )\n        {\n            vec2 of = rand(seed);\n            c = p2c( of*iResolution.xy)*1.1;\n            // test H1 and H2\n            float c2 = dot(c,c);\n            vec2  d = c + vec2(1.0,0.0);\n            float h1 = 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0;\n            float h2 = 16.0*dot(d,d) - 1.0;\n            if( h1>0.0 && h2>0.0 ) break;\n        }\n\n        // compute and draw orit    \n        vec2 z  = vec2(0.0);\n        float n = 0.0;\n        for( int i=0; i<512; i++ )\n        {\n            z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n            if( dot(z,z)>9.0 ) break;\n\n            vec2  p1 = c2p(z);\n            vec2  p2 = c2p(vec2(z.x,-z.y));\n            float m1 = dot(p1-fragCoord,p1-fragCoord);\n            float m2 = dot(p2-fragCoord,p2-fragCoord);\n            vec3 ma = step( n, thresholds );\n            f += exp( -a*a*m1 )*ma;\n            f += exp( -a*a*m2 )*ma;\n            n += 1.0;\n        }\n\n        // accumulate, if divergent    \n        g = mix( g, f, step( n, thresholds-1.0 ) );\n    }\n\n    fragColor = vec4( g, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}