{
    "Shader": {
        "info": {
            "date": "1568689636",
            "description": "Extension of my first shader: https://www.shadertoy.com/view/3scGWM with perpendicular junctions as well as the usual diagonal lines.\nNew parallax truchet: https://www.shadertoy.com/view/3dcGWM",
            "flags": 0,
            "hasliked": 0,
            "id": "3ddGW7",
            "likes": 26,
            "name": "Parallax Truchet 2",
            "published": 3,
            "tags": [
                "2d",
                "tiled",
                "lines",
                "parallax",
                "truchet",
                "tiling",
                "maze",
                "tiles",
                "pipes",
                "weave",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "Jordan",
            "viewed": 7137
        },
        "renderpass": [
            {
                "code": "float hash31( vec3 p ) // randomization function\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n    \n    p = fract(sin(p)*43758.5453);\n\n\treturn fract(p.x + p.y + p.z);\n}\n\n\nfloat width = 0.1; // line width\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int j;\n    for(j=0;j<3;j+=1) // loop over rgb channels\n    {\n        float t = iTime + 0.04*float(j);\n        vec2 pos = 2.*vec2(sin(t*0.5)+0.1*t,cos(t*0.5)+0.3*t); // movement\n        vec3 col = vec3(1.); // background\n\n        // Loop over parallax layers\n        for(float i=10.;i<17.; i+=0.75)\n        {\t\n            vec2 uv = pos+(0.2*sin(t)*sin(t)+0.5)*((20. - 0.7*i)*(fragCoord-.5*iResolution.xy)/iResolution.y);\n            vec2 gv = (fract(uv)-0.5);\n            vec2 id = floor(uv);\n            vec3 col2 = (vec3(1.0)*(11./(i+5.))); // change this to make line colors more interesting\n            float mask1 = 1.; // Used for hard edges\n            float mask2 = 1.; // used for glows / \"shadows\"\n\n            if (hash31(vec3(id.x,id.y,i))>0.75) // Intersections \n            {\n                float a1 = smoothstep(-0.01,0.01,width-(abs(gv.x)));\n                float b1 = smoothstep(-0.01,0.01,width-(abs(gv.y)));\n                float a2 = smoothstep(-0.3,0.3,width-(abs(gv.x)));\n                float b2 = smoothstep(-0.3,0.3,width-(abs(gv.y)));\n                mask1 = a1 + b1 - a1*b1;\n                mask2 = a2 + b2 - a2*b2;\n            }\n            else // Diagonals\n            {\t\n                gv.x *= (float(hash31(vec3(i,id.x,id.y))>0.5)-0.5)*2.; // Flip half of them\n                mask1 = smoothstep(-0.01,0.01,width-abs(gv.x+gv.y-0.5*sign(gv.x+gv.y+0.01)));\n                mask2 = smoothstep(-0.3,0.3,width-abs(gv.x+gv.y-0.5*sign(gv.x+gv.y+0.01)));\n\n            }\n\n            // Output to screen\n            col = - 0.2*mask2 + 0.9*(col2.r*col2.r+col2.g*col2.g+col2.b*col2.b + col2*col2)*col2*mask1 + col*(1.-mask1);\n\n            // Enavble to show grid:\n            //if (abs(gv.x)>0.475 || abs(gv.y)>0.475) col.r=1.;\n\n        }\n        fragColor[j] = col[j];\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}