{
    "Shader": {
        "info": {
            "date": "1725711705",
            "description": "Three different blur versions for testing - they have different window sizes and performance so you can compare. Its an area average, a linear  \"fake gaussian\" and an actual gaussian.\n\nNeeded it to fix my broken gel shader - turns out coeff sum was > 1.0.",
            "flags": 32,
            "hasliked": 0,
            "id": "lfBBD3",
            "likes": 2,
            "name": "Blur test sandbox",
            "published": 3,
            "tags": [
                "blur",
                "testing"
            ],
            "usePreview": 0,
            "username": "d00fd00f",
            "viewed": 65
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0,uv).xyz,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= (iResolution.y/iResolution.x);\n    uv.y += (.55/sqrt(2.0))*(iResolution.y/iResolution.x);\n    \n    // crosshair\n    vec3 col = vec3(\n        (1.0-step(0.1,length(uv-0.5)))\n        -(1.0-step(0.09,length(uv-0.5)))\n        -(1.0-step(-0.005, uv.x-0.5))\n        -(1.0-step(-0.005, uv.y-0.5))\n        +(1.0-step(0.005, uv.x-0.5))\n        +(1.0-step(0.005, uv.y-0.5))\n    );\n\n    // Output to screen\n    fragColor = clamp(\n    vec4(col*vec3(1.0,uv),1.0)\n    ,0.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 pOffs = 1.0/iResolution.xy;\n    vec2 uv = fragCoord*pOffs;\n    \n    float r = getBlurRadius(iTime)*(iResolution.x/1800.0);\n    float hs =getHalfSide(r,iTime);\n    \n    vec4 res = vec4(0.);\n    for(float o = -hs; o <= hs; o++){    \n        res += blurCoeff(o, r, iTime)\n        *texture(iChannel0, uv+vec2(o*pOffs.x, 0.0));\n    }\n\n    // Output to screen\n    fragColor = clamp(vec4(res.xyz, 1.0)\n    ,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 pOffs = 1.0/iResolution.xy;\n    vec2 uv = fragCoord*pOffs;\n    \n    float r = getBlurRadius(iTime)*(iResolution.x/1800.0);\n    float hs = getHalfSide(r,iTime);\n    \n    vec4 res = vec4(0.);\n    for(float o = -hs; o <= hs; o++){    \n        res += blurCoeff(o, r, iTime)\n        *texture(iChannel0, uv+vec2(0.0,o*pOffs.y));\n    }\n\n    // Output to screen\n    fragColor = clamp(vec4(res.xyz, 1.0)\n    ,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265359\n#define PI2 (2.0*PI)\n\n// start at 1 and round up to next odd number\nfloat getHalfSide(float radius, float t){\n    int s =int(t*.5)%3;\n    float f = 0.0;\n    switch(s){\n        case 0:\n        {\n            f = 1.25;\n        }\n        break;\n        case 1:{\n            f = 2.0;\n        }\n        break;\n            \n        case 2:{\n            f = 3.0;\n        }\n        break;\n    }\n    float b = 1.0+2.0*ceil(radius);\n    return b*f;\n}\n\n\n#define vmax(v) max(v.x,v.y)\n#define vmin(v) min(v.x,v.y)\n\nfloat getBlurRadius(float t){\n    \n    return 50.0 * ((-.5*sin( fract(.5*t) * 2.0 * PI )) + .5);\n}\n\nfloat coeff_gauss(float offset, float radius){\n\n    return min( \n        (1.0/sqrt(2.0*PI*radius*radius))\n        *\n        exp(\n            -offset*offset/(2.0*radius*radius)\n        ),1.0);\n}\n\nfloat coeff_avg(float offset, float radius){\n    radius *= 1.25;\n    float a = min(\n    (1.0-abs(offset))+radius\n    ,1.0);\n    \n    float s = 1.0 + 2.0*radius;\n    \n    s= max(s, 1.0);\n    \n    return \n    min(max(a,0.0),1.0)\n    /s\n    ;\n}\n\nfloat coeff_linear(float offset, float radius){\n    radius *= 2.0;\n    float ar = 1.0 + radius;\n    float as = ar*ar;\n    return min(max(1.0+radius-abs(offset),0.0)/as\n    ,1.0);\n}\n\nfloat blurCoeff(float o, float r, float t){\n    int s =int(t*.5)%3;\n    switch(s){\n        case 0:\n            return coeff_avg(o, r);\n            \n        case 1:\n            return coeff_linear(o, r);\n            \n        case 2:\n            return coeff_gauss(o, r);\n    }\n}\n\n//#define blurCoeff(a,b) coeff_gauss(a,b)\n//#define blurCoeff(a,b) coeff_avg(a,b)\n//#define blurCoeff(a,b) coeff_linear(a,b)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}