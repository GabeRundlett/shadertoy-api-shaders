{
    "Shader": {
        "info": {
            "date": "1650417500",
            "description": "basic math graph",
            "flags": 0,
            "hasliked": 0,
            "id": "ft2cDd",
            "likes": 4,
            "name": "basic math graph",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "graph",
                "formula",
                "basicmathgraph"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n//19-abril-2022\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n//https://graphtoy.com/\n// http://patriciogonzalezvivo.com\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(8.0*antialiasing(1.0),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 GraficarPlot(vec2 p, vec3 colOut)\n{   float t=iTime*5.0;\n    float x=p.x;\n    \n    float fx1=4. + 4.*smoothstep(0.0,0.7,sin(x+t));\n    float y1=p.y+fx1;\n    float y2=p.y+fx1+0.2;\n    float yg0= differenceSDF(y1,y2);\n    float fxy1=yg0;\n    \n    float fx2=3.0*sin(x)/x;\n    y1=p.y+fx2;\n    y2=p.y+fx2+0.2;\n    float yg1= differenceSDF(y1,y2);\n    \n    float fx3= 2.0*noise(vec2(3.*x+t,1.0))+fx2;\n    y1=p.y+fx3;\n    y2=p.y+fx3+0.2;\n    float yg2= differenceSDF(y1,y2);\n    \n    float fx5= (t + floor(x-t))/2. - 5.0;\n    float fx6= sin(fx5) - 5.;\n    y1=p.y+fx6;\n    y2=p.y+fx6+0.2;\n    float yg6= differenceSDF(y1,y2);\n    \n    //linea horizontal\n    float fx7=2.0;\n    y1=p.y+fx7;\n    y2=p.y+fx7+0.1;\n    float yg7= differenceSDF(y1,y2);\n    \n    //linea vertical\n    float fx8=0.0;\n    y1=p.x+fx8;\n    y2=p.x+fx8+0.1;\n    float yg8= differenceSDF(y1,y2);\n    \n   \n    vec3 col;\n    col=colOut;\n    col= DrawFigBorde(vec3(0.0), col, yg7); //linea hor\n    col= DrawFigBorde(vec3(0.0), col, yg8); //linea vert\n    \n    col= DrawFigBorde(vec3(0.2,0.2,1.0), col, yg0);\n    col= DrawFigBorde(vec3(0.7,0.1,0.2), col, yg1); //cafe\n    col= DrawFigBorde(vec3(0.5,0.9,0.2), col, yg2);\n    col= DrawFigBorde(vec3(0.5,0.9,0.2), col, yg6);\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=8.0;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    col= GraficarPlot(uv-vec2(0.0,6.0), col)    ;\n    \n  \n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}