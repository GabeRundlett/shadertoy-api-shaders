{
    "Shader": {
        "info": {
            "date": "1612653452",
            "description": "Trying to avoid as many texture() calls as possible.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ltBWH",
            "likes": 3,
            "name": "Polar Visualizer Fork",
            "published": 3,
            "tags": [
                "ray",
                "raymarch",
                "circle",
                "visualizer",
                "polar",
                "march"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float TAU = 6.28318530718;\nconst float HALF_PI = 1.57079632679;\n\nconst float        COUNT = 12.0;  // Number of bars to draw in the visualizer\nconst float    THICKNESS = 0.01;  // Line thickness\nconst float INNER_RADIUS =  0.1;  // Inner circle radius\nconst float OUTER_RADIUS =  0.5;  // Outer circle radius\nconst float  START_ANGLE =  0.0;  // Rotation\n\nconst vec3 OFFSET = vec3(0.0, 0.1, 0.0);\n\nconst float  MIN_DIST = 0.001;\nconst float  MAX_DIST =   4.0;\nconst   int MAX_STEPS =    50;\n\nmat2 Rotate(in float r) {\n    float s = sin(r), c = cos(r);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdLine(in vec3 p, in vec3 a, in vec3 b, in float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat mapScene(in vec3 p) {\n    float angle = atan(p.z, p.x);\n    float cell = floor(angle / TAU * COUNT) / COUNT;\n\n    float repAngle = TAU / COUNT;\n    float hRepAngle = repAngle * 0.5;\n    p.xz = sin(mod(angle + START_ANGLE, repAngle) - hRepAngle + vec2(HALF_PI, 0.0)) * length(p.xz);\n\n    float amplitude = texture(iChannel0, vec2(cell, 0.0)).x;    \n    float musicBars = sdLine(p - OFFSET, vec3(INNER_RADIUS, 0.0, 0.0), vec3(INNER_RADIUS + amplitude * (OUTER_RADIUS - INNER_RADIUS), 0.0, 0.0), THICKNESS);\n\n    return min(p.y, musicBars);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec2 e = vec2(MIN_DIST, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float t = MIN_DIST;\n    for(int i=0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        t += d;\n        if ((t > MAX_DIST) || (abs(d) < MIN_DIST)) break;\n    }\n\n    return t;\n}\n\nfloat pointLight(in vec3 p, in vec3 pos, in float range) {\n    vec3 k = pos - p;\n    float m = length(k);\n    vec3 l = k / m;\n    vec3 n = getNormal(p);\n\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    dif *= smoothstep(range, 0.0, m);\n\n    dif *= step(length(pos - p), RayMarch(p + n * MIN_DIST, l));\n\n    return dif;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.5, -0.7);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    rd.zy *= Rotate(-radians(30.0));\n    ro.xz *= Rotate(iTime * radians(10.0));\n    rd.xz *= Rotate(iTime * radians(10.0));\n\n    float t = RayMarch(ro, rd);\n    vec3 p = ro + rd * t;\n\n    vec3 color = vec3(0.0);\n\n    vec3 lp = vec3(1.0, 0.5, 0.0);\n    lp.xz *= Rotate(radians(120.0));\n    color += pointLight(p, lp, 3.0) * vec3(1.0, 0.4, 0.4);\n\n    lp.xz *= Rotate(radians(120.0));\n    color += pointLight(p, lp, 3.0) * vec3(0.4, 1.0, 0.4);\n\n    lp.xz *= Rotate(radians(120.0));\n    color += pointLight(p, lp, 3.0) * vec3(0.4, 0.4, 1.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}