{
    "Shader": {
        "info": {
            "date": "1624790667",
            "description": "License CC0: Random sunday fractal\nResult after a bit of random coding on sunday\n",
            "flags": 0,
            "hasliked": 0,
            "id": "sl23DV",
            "likes": 14,
            "name": "Random sunday fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 381
        },
        "renderpass": [
            {
                "code": "// License CC0: Random sunday fractal\n// Result after a bit of random coding on sunday\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)         (0.5+0.5*cos(x))\n#define DOT2(x)         dot(x, x)\n\nconst vec3 std_gamma        = vec3(2.2);\n\nfloat g_cd = 0.0;\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// From: https://stackoverflow.com/a/17897228/418488\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = pow(col, 1.0/std_gamma);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat torus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat boxf(vec3 p, vec3 b, float e) {\n  p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nvec3 pmin(vec3 a, vec3 b, float k) {\n  vec3 h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 pabs(vec3 a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat df(vec3 p) {\n  float d = 1E6;\n  vec3 op = p;\n\n  const float zf = 2.0-0.1;\n  const vec3 nz = normalize(vec3(1.0, .0, -1.0));\n  const vec3 ny = normalize(vec3(1.0, -1., 0.0));\n  float z = 1.0;\n  const float rsm = 0.125*0.25;\n  float a = 124.7+TIME*TAU/173.0; \n  mat2 rxy = ROT(a);\n  mat2 ryz = ROT(a*sqrt(0.5));\n  \n  float off = 0.8; \n  vec3 cp = vec3(0.55, 0.5, 0.45);\n  float cd = 1E6;\n\n  const int mid   = 0; \n  const int upper = 7; \n  for (int i = 0; i < mid; ++i) {\n    cd = min(cd, length(p-cp));\n    z *= zf;\n    p *= zf;\n    p.xy *= rxy;\n    p.yz *= ryz;\n    p  = pabs(p, rsm);\n    p -= nz*pmin(0.0, dot(p, nz), rsm)*2.0;\n    p -= ny*pmin(0.0, dot(p, ny), rsm)*2.0;\n\n    p -= vec3(off/zf, 0.0, 0.0);\n  }\n\n\n  for (int i = mid; i < upper; ++i) {\n    cd = min(cd, length(p-cp));\n    vec3 pp = p;\n    float dd4 = torus(pp.zxy, 0.5*vec2(1.0, 0.2));\n    float dd5 = boxf(pp, vec3(0.2), 0.00)-0.025;\n    float dd  = dd5;\n    dd = min(dd5, dd4);\n    dd  /= z;\n    \n    z *= zf;\n    p *= zf;\n    p.xy *= rxy;\n    p.yz *= ryz;\n    p  = pabs(p, rsm);\n    p -= nz*pmin(0.0, dot(p, nz), rsm)*2.0;\n    p -= ny*pmin(0.0, dot(p, ny), rsm)*2.0;\n\n    p -= vec3(off/zf, 0.0, 0.0);\n    d = pmax(d, -(dd-0.1/z), 0.05/z);\n    \n    d = min(d, dd);\n  }\n\n  g_cd = cd;\n  return d;\n}\n\nfloat df(vec2 p) {\n  vec3 p3 = vec3(p, mix(0.0, 1.0, PCOS(TAU*TIME/331.0)));\n  p3.xz *= ROT(TAU*TIME/127.0);\n  p3.yz *= ROT(TAU*TIME/231.0);\n  const float z = 0.25;\n  p3 *= z;\n  return df(p3)/z;\n}\n\nfloat hf(vec2 p) {\n  float d = df(p);\n  float aa = 0.0125;\n  return -0.025*smoothstep(-aa, aa, -d);\n}\n\nvec3 normal(vec2 p) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = hf(p + e.xy) - hf(p - e.xy);\n  n.y = 2.0*e.x;\n  n.z = hf(p + e.yx) - hf(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 color(vec2 p, vec2 q) {\n  vec2 ppp = p;\n  const float s = 1.0;\n  const vec3 lp1 = vec3(1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2 = vec3(-1.0, 1.25, 1.0)*vec3(s, 1.0, s);\n\n  float aa = 2.0/RESOLUTION.y;\n\n  float h = hf(p);\n  float cd   = g_cd;\n  vec3  n = normal(p);\n\n  vec3 ro = vec3(0.0, mix(-3.0, -10.0, PCOS(TIME+PI*p.x)), 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  const vec3 lcol1 = sqrt(vec3(1.25, 1.35, 2.0).zxy*0.15);\n  const vec3 lcol2 = vec3(2.0, 1.55, 1.25).zyx*0.85;\n  vec3 lpow1 = 0.15*lcol1/DOT2(ld1);\n  vec3 lpow2 = 0.25*lcol2/DOT2(ld2);\n  vec3 dm = vec3(1.0)*tanh_approx(-h*50.0+0.125);\n  vec3 col = vec3(0.0);\n  col += dm*pow(diff1, 4.0)*lpow1;\n  col += dm*pow(diff2, 4.0)*lpow2;\n  vec3 rm = vec3(1.0)*mix(0.25, 1.0, tanh_approx(-h*1000.0));\n  col += rm*pow(ref1, 40.0)*lcol1;\n  col += rm*pow(ref2, 40.0)*lcol2;\n  \n  float hue  = fract(0.85-0.5*PI*cd);\n  float sat  = clamp(0.85*PCOS(10.0*cd), 0.0, 1.0);\n  float vue  = 1.0-1.0*PCOS(8.0*cd);\n  vec3 hsv   = vec3(hue, sat, vue);\n  vec3 color = (1.0*hsv2rgb(hsv));\n\n  return p.x > 0.0 ? color : col ;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = color(p, q);\n\n  col = postProcess(col, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}