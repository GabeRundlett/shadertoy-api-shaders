{
    "Shader": {
        "info": {
            "date": "1615157740",
            "description": "this is a test for a cirt :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wlKBDV",
            "likes": 17,
            "name": "Magma city",
            "published": 3,
            "tags": [
                "test",
                "city",
                "neon"
            ],
            "usePreview": 0,
            "username": "Daizuukee",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "#define CityDepth 10\n#define Paralax .01\n#define CityWidth 1\n#define BuildingWidth 10.\n//#define BackCol vec4(0.6,0.3,0.05,1)\n#define BackCol lerp(vec4(.9,.3,.3,1),vec4(.6,.3,.05,1),.5+.5*sin(iTime))\n#define FrontCol vec4(.3,0,.3,1)\n#define BalcCol vec4(.2,.1,.3,1)\n\n/*Remove for Low Quality -> */\n#define HighQ\n/**/\n\nvec4 lerp(vec4 v1,vec4 v2,float t){\n    return(v2-v1)*t+v1;\n}\n\nfloat random(vec2 st){\n    return fract(sin(dot(st,\n                vec2(12.9898,78.233)))*\n            43758.5453123);\n        }\n        \n        float noise(vec2 st){\n            vec2 st0=floor(st);\n            vec2 st1=.5-cos((st-st0)*3.14)*.5;\n            float a0=random(vec2(int(st0.x),int(st0.y)));\n            float a1=random(vec2(int(st0.x)+1,int(st0.y)));\n            \n            float a2=random(vec2(int(st0.x),int(st0.y)+1));\n            float a3=random(vec2(int(st0.x)+1,int(st0.y)+1));\n            \n            float b0=(a1-a0)*st1.x+a0;\n            \n            float b1=(a3-a2)*st1.x+a2;\n            return(b1-b0)*st1.y+b0;\n        }\n        \n        bool isBuilding(vec2 uv){\n            for(int j=-CityWidth;j<=CityWidth;j++){\n                for(int n=0;n<5;n++){\n                    float h=float(n)*.01+(random(vec2(floor(uv.x*BuildingWidth+float(j)),n))-.5)/2.+.25;\n                    if(h>=uv.y&&\n                        fract(uv.x*BuildingWidth)-.5-float(j)*1.5<float(CityWidth+1)*1.-float(n)/7.+fract(floor((h-uv.y)*100.*random(vec2(floor(uv.x*BuildingWidth))))/2.)*.1&&\n                        fract(uv.x*BuildingWidth)-.5-float(j)*1.5>-float(CityWidth-2)*float(n)/7.-fract(floor((h-uv.y)*100.*random(vec2(floor(uv.x*BuildingWidth))))/2.)*.1){\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n            \n            bool isBalc(vec2 uv){\n                return fract((uv.x+iTime*.3)*3.)<.1||\n                uv.y<.3||\n                (uv.y<.4&&uv.y>.37)||\n                (uv.y<.4&&fract((uv.x+iTime*.35)*10.)<.2);\n            }\n            \n            void mainImage(out vec4 fragColor,in vec2 fragCoord)\n            {\n                fragColor = vec4(0);\n                vec2 uv=fragCoord/iResolution.xy;\n                vec2 sv=uv;\n                uv+=noise(uv*10.+iTime)*.002;\n                uv.x+=iTime/10.-947.2984;\n                if(isBalc(uv)){\n                    if(isBalc(uv+vec2(.005,0))){\n                        if(isBalc(vec2(uv.x+(sv.x-.5)*(sv.y-.3),.5-uv.y))||uv.y>.2)\n                        fragColor=BalcCol;\n                        else\n                        fragColor=lerp(BackCol,BalcCol,.5-uv.y/.5);\n                    }\n                    else\n                    fragColor=BackCol;\n                }\n                else{\n                    bool broke=false;\n                    for(int i=0;i<CityDepth;i++){\n                        float mult=iTime*Paralax*float(CityDepth-i);\n                        if(isBuilding(uv+vec2(mult,0))){\n                            fragColor+=lerp(BackCol,FrontCol,1./float(i+1));\n                            broke=true;\n                            break;\n                        }\n                        if(broke){\n                            break;\n                        }\n                        else{\n                            #ifdef HighQ\n                            vec4 c=lerp(BackCol,FrontCol,1./float(i+1));\n                            fragColor+=c*2.*max(0.,.7+.3*noise(vec2(uv.x+mult,float(i)*292.293))-sv.y);\n                            if(fract(uv.x+mult+.2723)<.1){\n                                fragColor+=vec4(0,0,.1,0)*max(0.,(8.-uv.y*10.));\n                            }\n                            #endif\n                        }\n                        uv.x*=1.1;\n                        uv.y-=1./float(CityDepth)/4.;\n                    }\n                    if(!broke){\n                        fragColor+=lerp(vec4(.9,.5,.2,1),vec4(.01,.01,.2,1.),uv.y);\n                        float f=noise(vec2(iTime*10.,0)+sv*iResolution.xy*.5);\n                        if(f>.95&&noise(vec2(iTime*10.,0)+sv*50.)>.5)\n                        fragColor+=(f-.9)/.1;\n                    }\n                }\n            }\n            ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}