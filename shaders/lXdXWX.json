{
    "Shader": {
        "info": {
            "date": "1719775178",
            "description": "A sphere render. Use the mouse to change the roughness parameter.",
            "flags": 0,
            "hasliked": 0,
            "id": "lXdXWX",
            "likes": 1,
            "name": "Oren-Nayar Sphere",
            "published": 3,
            "tags": [
                "sphere",
                "rendering",
                "diffuse"
            ],
            "usePreview": 0,
            "username": "ArolaunTech",
            "viewed": 102
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n\nfloat gamma(float brightness) {\n    float result = 1.055 * pow(brightness, 5.0/12.0) - 0.055;\n    if (brightness < 0.0031308) {\n        result = 12.92 * brightness;\n    }\n    if (brightness < 0.0) {\n        result = 0.0;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Sphere settings\n    float sphereRadius = 1.5;\n    vec3 sphereCenter = vec3(0.0, 0.0, 3.0);\n    float roughness = 2.0*iMouse.x/iResolution.x;\n    \n    //Lighting settings\n    //vec3 lightDirection = normalize(vec3(cos(iTime), 0.0, sin(iTime)));\n    vec3 lightDirection = vec3(1.0, 0.0, 0.0);\n\n    //Calculate direction vector\n    float m = iResolution.y;\n    vec2 uv = vec2(fragCoord.x-.5*(iResolution.x - m), fragCoord.y)/m;\n    vec2 xy = 2.0 * uv - 1.0;\n    \n    vec3 D = normalize(vec3(xy, 1.0));\n    \n    //Sphere intersection\n    float tca = dot(D, sphereCenter);\n    float d = sqrt(dot(sphereCenter, sphereCenter) - tca * tca);\n    float thc = sqrt(sphereRadius * sphereRadius - d * d);\n    float dist = tca - thc;\n    \n    //Normal vector\n    vec3 normal = normalize(D * dist - sphereCenter);\n    \n    //Calculate angles\n    float roughSquare = roughness*roughness;\n    \n    vec3 tangentLight = normalize(cross(normal, cross(lightDirection, normal)));\n    vec3 tangentView = normalize(cross(normal, cross(-D, normal)));\n    float cosDiff = dot(tangentLight, tangentView);\n    \n    float cosThetaLight = dot(normal, lightDirection);\n    float cosThetaView = dot(normal, -D);\n    \n    float thetaLight = acos(abs(cosThetaLight));\n    float thetaView = acos(abs(cosThetaView));\n    \n    float alpha = max(thetaLight, thetaView);\n    float beta = min(thetaLight, thetaView);\n    \n    float c1 = 1.0 - 0.5 * roughness*roughness/(roughness*roughness + 0.33);\n    float c2Mult = sin(alpha);\n    if (cosDiff < 0.0) {\n        c2Mult -= pow(2.0*beta/pi,3.0);\n    }\n    float c2 = 0.45 * roughSquare/(roughSquare + 0.09) * c2Mult;\n    float c3 = 0.125 * roughSquare * pow(4.0*thetaLight*thetaView/(pi*pi),2.0)/(roughSquare + 0.09);\n    \n    float l1 = 1.0 * cosThetaLight * (c1 + c2*cosDiff*tan(beta) + c3*(1.0-abs(cosDiff))*tan(0.5*(alpha+beta)));\n    float l2 = 0.17 * cosThetaLight * roughSquare * (1.0 - cosDiff*pow(2.0*beta/pi,2.0))/(roughSquare+0.13);\n   \n    //Lighting calculations\n    //float lighting = dot(normal, lightDirection); //Lambertian diffuse\n    float lighting = l1 + l2; //Oren-Nayar reflection model\n    //float lighting = cosThetaLight/(cosThetaLight + cosThetaView); //Lommel-Seeliger law? idk\n    \n    if (dot(normal, lightDirection) < 0.0) {\n        lighting = 0.0;\n    }\n    \n    //Aesthetics\n    lighting = mix(lighting, 1.0, 0.003);\n\n    // Output to screen\n    fragColor = vec4(vec3(gamma(lighting)), 1.0);\n    if (tca < 0.0) {\n        fragColor = vec4(0.0);\n    }\n    if (d > sphereRadius) {\n        fragColor = vec4(0.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}