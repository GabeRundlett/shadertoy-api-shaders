{
    "Shader": {
        "info": {
            "date": "1599264207",
            "description": "Low effort, weird geometric effects I whipped up. I made this purely out of boredom so it's sloppy.",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2Bzy",
            "likes": 2,
            "name": "Cross-Stitched Sky",
            "published": 3,
            "tags": [
                "line",
                "sine",
                "wiggly",
                "logarithm",
                "scrolling"
            ],
            "usePreview": 0,
            "username": "timeisbeautifulhere",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "\n#define LWIDTH 0.01\n#define TIME_CONST 1.0\n#define DELTA_CONST 1.0\n\n#define NUM_NESTED 15\n#define NESTED_SPACING 0.25\n\n#define WIGGLE_SIZE 0.10\n#define WIGGLE_FREQ 450.0\n#define WIGGLE_VELOC 200.0\n\n#define SLANT_SLOPE 1.0\n#define SKYLINE_WIDTH 0.01\n\n\n//Line scrolling effect in sky. \n//Not completely sure how this works.\nvec3 weird_effect(vec2 uv){\n    vec3 col = vec3(1.0);\n    \n    float mod_x = mod(uv.x+(iTime*TIME_CONST), NESTED_SPACING);\n    float x_offset = uv.y*SLANT_SLOPE;\n    float mod_offset = mod(x_offset, NESTED_SPACING);\n    \n    if(abs((mod_x+x_offset)-uv.x) < SKYLINE_WIDTH)\n        col = vec3(0.0);\n    \n    if(mod_x<0.01)\n        col = vec3(0.0);\n    \n    if(abs(uv.x-x_offset)<SKYLINE_WIDTH)\n        col = vec3(1.0,0.0,0.0);\n    \n    if(abs(mod_x-mod_offset)<SKYLINE_WIDTH)\n        col = vec3(0.0,1.0,0.0);\n    \n    return col;\n}\n\n//Get y value of warped logarithm curve\n//relative to an origin point.\nfloat get_line_y(float x, vec2 origin){\n    float relative_x = x - origin.x;\n    float xDelta = sign(relative_x) * DELTA_CONST;\n    \n    float warp_warp_const = 1.0 + sin(iTime*TIME_CONST);\n    //float warp_warp_const = 1.0;\n    float warp_const = log(abs(relative_x + xDelta)) * warp_warp_const;\n    \n    float line_y = origin.y + warp_const;\n    \n    return line_y;\n}\n\nbool on_curve(vec2 uv, float line_y){\n    return abs(uv.y - line_y)<LWIDTH;\n}\n\n//Wiggly sine wave line underneath log curve\nbool on_wiggly_line(vec2 uv, float x, float line_y){\n    if(uv.y>line_y)\n        return false;\n    \n    float wiggle_offset = WIGGLE_SIZE*sin(WIGGLE_FREQ*uv.y+(WIGGLE_VELOC*iTime));\n    \n    float wiggle_pos = x + wiggle_offset;\n    return abs(uv.x-wiggle_pos)<0.01;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1.0);\n    \n    vec2 origin = vec2(0.0,-1.0);\n    float line_y = get_line_y(uv.x, origin);\n    \n    //First log curve\n    if(on_curve(uv, line_y))\n        col=vec3(0.0);\n    \n    //Check for position on \"nested\" log curves\n    //along the first curve, to make a stitching pattern\n    for(int i=1; i<=NUM_NESTED; i++){\n        float offset = float(i)*NESTED_SPACING;\n        \n        vec2 rorigin = vec2(offset,get_line_y(offset,origin));\n        float r_line_y = get_line_y(uv.x, rorigin);\n        \n        vec2 lorigin = vec2(-offset,get_line_y(-offset,origin));\n        float l_line_y = get_line_y(uv.x, lorigin);\n        \n        if(on_curve(uv, r_line_y) || on_curve(uv, l_line_y))\n        \tcol=vec3(0.0);\n       \t\n        //At every nested curve origin, draw a wiggly line\n        //underneath at that x value\n        if(on_wiggly_line(uv, lorigin.x, line_y) || on_wiggly_line(uv, rorigin.x, line_y))\n            col=vec3(0.0);\n        \n        //Draw weird sky effect above top of\n        //nested curves\n        if(i==NUM_NESTED){\n        \tfloat top_y = max(l_line_y,r_line_y);\n            \n            if(uv.y>top_y)\n                col = weird_effect(uv);\n        }\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}