{
    "Shader": {
        "info": {
            "date": "1555216589",
            "description": "see image tab\n\nit sucks a bit to define gapWidth in dependence to lineThickness.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdSSWt",
            "likes": 1,
            "name": "TheWitness0 MouseQuadrant gap",
            "published": 3,
            "tags": [
                "maze",
                "quadrant",
                "thewitness",
                "gap"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "//self 0: https://www.shadertoy.com/view/WdSSWt\n//child1: https://www.shadertoy.com/view/3dBSWt\n\n/*\nblue enumerates 2 diagonalQuadrants\ngreen calculates diagonalQuadrant of mouse, and shows it.\nred draws a rectangle with gaps in the border-lines:\n\nthe trick is that each green triangle only contains one \nred straight borderLine.\nand we use the quadrantID to read data from a DoubleBuffer \nthat stores the maze-state of (that segment)\n\nplanning to a doubleBuffer that defines a maze with gaps\nbut also a maze with gaps to QIICKLY draw a long and winded line over\nand that line collides with itself to have no self-intersetion\n\nfor fast rendering, we must check the diagonal-quadrant \n(in rectangular tiling) for any uv\n*/\n\n//goal is to draw a path trough a static maxe\n//that collides with itself to avoid self-intersection\n//drawn segments to be defined inbuffA\n//maze gaps to be defined in buffA\n\n//step 1;\n//define boxquadrants, that only contain 1 nonDiagonal border\n//and maybe 2 diagonal line segments.\n\n//BuffA defines maze shape\n//mazeUv.x defines 1 horizontalLine (gapwidth float)\n//mazeUv.y defines 1 vertical__Line (gapwidth float)\n//mazeUv.z defines 1 diagonal       (gapwidth float) //likely 100% by default\n//(we only do from bottpmleft-to topright diagonals)\n//mazeUv.w defines 1 nodeExists     (gapwidth float) //for speed.\n\n//so, all nodes and connections exist on a square-lattice\n\n\nvec4 imageEntry(float t,vec2 u,vec3 r,vec4 m\n){float aa=2./Aa(t,u,r,m)//bokeh\n ;float c=length(u-m.xy)//debug circle around mouse\n ;c=smoothstep(aa,-aa,c-.125)//smoothstep bokeh\n ;vec2 b=vec2(0);\n ;float g=0.\n ;b.x=quadrant(u)\n ;b.y=quadrant(m.xy)\n ;if(b.x==b.y)g=1.//if(mouse is in the same quadrant as uv)\n ;//c=min(c,box(u));\n ;float o=box(u)\n ;////t=cos(t)*.5+.5;\n ;m.x=abs(m.x)\n  //r.z=lineThickness\n  //t=gapWidth //not too intuitive scaling as subset of lineThickness\n ;//t=mix(-r.z,1.,clamp(m.y,.1,1.))//override gap width with m.y\n ;r.z=.7\n ;r.z=mix(.1,.5,sin(t*2.061));\n ;r.z=mix(.01 ,1.,clamp(m.x,0.,1.))//override thickness width with m.x\n ;//t sets width of the gap in a line\n ;//t  =mix(-r.z,1.,clamp(m.y,.1,1.))//override gap width with m.y\n ;//t=-r.z //no gap, smooth kerning\n ;//t=0.   //hairline gap of width 0.\n ;//t=1.   //maximum gap\n //we use explicit branching here, because the quadrant (+lus tileUD)\n  //actually sets what fragment of a doubleBuffer we get the [r]-data from.\n ;if(b.x==3.//top , \n ){t=.2+r.z//enforce constant gap width by substratting r.z\n  ;u-=vec2(0,1)\n ;}else if(b.x==2.//left read fragment of tileID.uv+vec2(1,0) t is its .x valuie\n ){t=mix(-r.z,1.,(sin(t*1.61)*.5+.5))//override gap width with sin-time\n  ;u=u.yx-vec2(0,1)\n ;}else if(b.x==1.//left read fragment of tileID.uv t is its .x valuie\n ){t=mix(-r.z,1.,(cos(t*1.61)*.5+.5))//override gap width with cos-time\n  ;u=u.yx+vec2(0,1)\n ;}else if(b.x==0.//left read fragment of tileID.uv t is its .y value\n ){t=mix(-r.z,1.,clamp(abs(m.y+r.z*.5)-r.z,.0,1.))//override gap width with m.y\n  ;u+=vec2(0,1)\n  ;}\n ;o=lineGap(t,u,r,m)\n ;o=mix(smoothstep(aa,-aa,o),fract(o),.61)//smoothstep bokeh\n ;c=fract(mix(o,1.-o,c)-c) //mix(o,1.-o,c) s invicible in 50%\n ;return vec4(c,g,b.x/5.+.2,1)\n ;}\n\n\nvoid mainImage(out vec4 o,in vec2 u\n){vec3 r=iResolution.xyz\n ;vec4 m=iMouse.xyzw\n ;float t=iTime\n ;if(m.z<0.)m.xy=((cos(1.+iTime*vec2(1,.61)*.5))*.075+.5)*iResolution.xy//auto-mouse\n ;u=fra(t,u,r,m)//contextualize uv (square scaling)\n ;m.xy=fra(t,m.xy,r,m)//contextualize iMouse (square scaling)\n //;m.zw=fra(t,m.zw,r,m)//contextualize iMouse (square scaling)\n ;o=imageEntry(t,u,r,m);}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//this is going to be a common subroutine\n//therefore it is declared in the common tao with my (t,u,t,m) structure\n//the most common identity of (t,u,r,m) parameters are in the Image Tab\n//(iTime,u,iResolution.xyz,iMouse.xyzw)\n//and {tuem] as german word toe [tower] is a neat memonic device.\n//r.z was initially intended for projective mapping (mostly a z-buffer)\n//but is rarely used as such, and instead r is contecually ANY vec3\n//once we are deep enough to make iResolution irrelevant.\n\n//2d camera FoV just zooms out.\n#define viewZoom(t,u,r,m) 4.\n\n//#define viewZoom(t,r) (hl2(r)/floor(mix(1.,hl2(r)*.1,u5(-cos(t)))))\n//viewZoom() returns a float; is defined in a local channel context, to quickly modify its scaling\n//divide by/aa for hairline drawing and sharp smoothstep()\n#define Aa(t,u,r,m) (min(r.x,r.y)/viewZoom(t,u,r,m))\n//fta insists on TURM-parameters because it contains Viewzoom(), that (locally) insists on TURM\n#define fra(t,u,r,m) (u-.5*r.xy)*viewZoom(t,u,r,m)/(r.y)\n\n\nfloat quadrant(vec2 u//return quadrant[0..3] of u (diagonal borders)\n){vec2 r=mix(vec2(0),vec2(1,2),step(u.x*vec2(1,-1),u.yy))\n //0=down,1=left,2=right,3=up\n //;if(u.x<u.y)r.x+=1.\n //;if(-u.x<-u.y)r.y+=2.\n ;return r.x+r.y;\n ;}\n//this function is a multi-purpose function for maze-lattice games\n//where you actually draw a maze, like in [the Witness]\n\nfloat box(vec2 u\n){u=abs(u)\n ;u.x=abs(max(u.x,u.y)-1.)\n ;return u.x\n ;}\n\n//nite, gaps should be constraine to stay within a single quadrant\n//this seems to be a simple constrain thickness<=1\n//gap width is constrained by thickness\n//you needthinner lines to allow for wider gaps.\nfloat lineGap(float t,vec2 u,vec3 r,vec4 m\n){//t=cos(t)*.5+.5; \n ;t=clamp(t,-r.z,1.)\n ;//r.z=.7//r.z=line thickness\n ;//r.z=mix(.1,.5,sin(t*2.061));\n ;//r.z=mix(.01 ,1.,clamp(m.x,.1,1.))//override thickness width with m.x\n ;//t  =mix(-r.z,1.,clamp(m.y,.1,1.))//override gap width with m.y\n ;u=abs(u)\n ;float c=u.y\n ;c=max(c,u.x-1.)\n ;c=max(c,-u.x+t)//gap of width t\n ;return c-r.z;}\n\n\n//may one day lead into []: https://www.shadertoy.com/view/3dSSWt",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}