{
    "Shader": {
        "info": {
            "date": "1681305999",
            "description": "raycast",
            "flags": 0,
            "hasliked": 0,
            "id": "msySRm",
            "likes": 0,
            "name": "raycast trying to do",
            "published": 3,
            "tags": [
                "raycast"
            ],
            "usePreview": 0,
            "username": "Virg",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n\nvec3 camPose = vec3(-20.,8.,0.);\nvec3 camDir = vec3(0.8,-0.3,0.2);\n\n                                    \nvec3 light = vec3(0.,20.,0.);\nfloat rev;\nvec2 ext;\nfloat castDist = 100.;\nfloat displayDisCenter = 1.;\n\nfloat stepC = 0.01;\nfloat gFov = PI/2.;\n\n\nvoid rayCast(out vec4 fragColor, vec2 ang);\nvec3 rotateX(vec3 vec, float ang);\nvec3 rotateZ(vec3 vec, float ang);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    camDir.x = cos(iTime);\n    camDir.z = sin(iTime);\n\n    camPose.x = sin(iTime)*40.;\n    camPose.z = -cos(iTime)*40.;\n    \n    light.x = cos(iTime)*20.;\n    light.z = sin(iTime)*20.;\n    \n    rev = iResolution.x/iResolution.y;\n    ext = iResolution.xy;\n    \n    fragColor = vec4(vec3(0),1.0); //bg\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *=rev;\n    float vFov = gFov/rev;\n\n    float gFov2 = gFov/2.;\n    float vFov2 = vFov/2.;\n    \n    \n    vec2 ang = vec2(\n                    gFov*(uv.x/rev)-gFov/2.,\n                    vFov*(uv.y/1.)-vFov/2.\n                   );\n    //ang = vec2(-3.,0.);\n    \n    \n    rayCast(fragColor,ang);\n    \n    //if(distance(vec2(0.7,0.8),uv)<0.1){\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    //}\n    \n\n    // Time varying pixel color\n    \n}\n\n\n\nvec3 rotateXYZ(vec3 vec, vec3 axis, float t){\n    float x2 = vec.x;\n    float y2 = vec.y;\n    float z2 = vec.z;\n    \n    float x = axis.x;\n    float y = axis.y;\n    float z = axis.z;\n    \n    return axis * (dot(axis,vec)) + cos(t)*cross(cross(axis,vec),axis) + sin(t)*(cross(axis,vec));\n}\n\n\nvoid rayCast(out vec4 fragColor, vec2 ang){\n\n\tvec4 spheres[2];\n\tspheres[0]=vec4(vec3(0.,2.,0.),5.);\n     spheres[1]=vec4(vec3(0.,0.,12.),4.);\n    \n    vec3 diagonalAxis = normalize(cross(camDir,vec3(0.,1.,0.)));\n    \n    vec3 verticalAxis = normalize(cross(camDir,diagonalAxis));\n    \n    \n    \n    vec3 res = rotateXYZ(camDir,verticalAxis,ang.x);\n    res = normalize(rotateXYZ(res,diagonalAxis,ang.y));\n    \n    //gl_FragColor = vec4(vec3(abs(res.x),abs(res.y),abs(res.z)),1.);\n    //return;\n\n    float dist=0.;\n    vec3 color = vec3(0.,0.,0.);\n    bool breakCasting = false;\n\n    for(float i = 1.;i<100.;i+=0.1){\n        if(breakCasting){\n            break;\n        }\n        vec3 pnt = camPose + res*i;\n        \n        dist = i/100.;\n        // pnt.y =1.;\n        if(pnt.y<0.){\n            color=vec3(1.);\n            break;\n        }\n        \n        for(int sp = 0;sp<2;sp++){\n           if(distance(pnt,spheres[sp].xyz)<spheres[sp].w){\n                vec3 normal = normalize(pnt - spheres[sp].xyz);\n                vec3 shapeToLight = normalize(light - pnt);\n                float colorAberation = dot(normal,shapeToLight);\n                float codir = dot(-res,normal)/2.;\n\n                //float val = length(colorAberation);\n                vec3 softLight = vec3(0.5,0.5,0.5);\n                color = mix(softLight,vec3(1.),colorAberation);\n                // color = mix(softLight,color,1.-codir);\n                breakCasting = true;\n                break;\n            //    gl_FragColor = vec4(vec3(1.),1.);\n            //    return;\n           }\n        }\n\n        \n    }\n    color = mix(color,vec3(0.,0.,0.),dist);\n    fragColor=vec4(color,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}