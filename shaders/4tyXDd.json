{
    "Shader": {
        "info": {
            "date": "1486390571",
            "description": " [url=https://www.shadertoy.com/view/lttXDn]Ray Marching Experiment 60[/url] with another lighting try :)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tyXDd",
            "likes": 31,
            "name": "Ray Marching Experiment 62",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "62"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nmat3 rotx(float a){return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 roty(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 rotz(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\nvec4 df(vec3 p) // from https://www.shadertoy.com/view/ltcSDr\n{\n\tp *= rotz(p.z * 0.07);\n\tvec2 uv = p.xz;\n\tfloat a = length(uv) - iTime*2.;\n\tuv *= mat2(cos(a), -sin(a), sin(a), cos(a));\n\tuv = abs(uv);\n\tuv = vec2(atan(uv.x, uv.y)/3.14159, length(uv));\n\tfloat b = sqrt(uv.x) + sqrt(uv.y);\n\tfloat c = sqrt(uv.x + uv.y);\n\tfloat s = b-c;\n\tfloat d = 6. - abs(p.y)  - smoothstep(0.128,1.-0.128, s*1.32);\n\treturn vec4(d);\n}\n\nvec3 nor( in vec3 p, float prec )\n{\n\tvec3 e = vec3( prec, 0., 0. );\n\tvec3 n = vec3(\n\t    df(p+e.xyy).x - df(p-e.xyy).x,\n\t    df(p+e.yxy).x - df(p-e.yxy).x,\n\t    df(p+e.yyx).x - df(p-e.yyx).x );\n\treturn normalize(n);\n}\n\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n    //return col;\n    \n    // thansk to public_int_i\n    float i1 = sin(iTime)*0.5+0.5,\n          i2 = cos(iTime)*0.5+0.5;\n   \treturn col*max(0., 1.0-(i1+i2))+\n           col.zxy*i1+\n           col.yzx*i2;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float prec, float ms) \n{\n\tvec3 n;\n\tfloat s = 0.;\n    const int iter = 10;\n\tfor (int i=0;i<iter;i++)\n\t{\n\t\tn = nor(surfPoint,prec); \n\t\tsurfPoint = surfPoint - n * ms; \n\t\ts += df(surfPoint).x;\n\t}\n\t\n\treturn 1.-s/(ms*float(iter)); // s < 0. => inside df\n}\n\nfloat SubDensity(vec3 p, float s) \n{\n\tvec3 n = nor(p,s); \t\t\t\t\t\t\t\n\treturn df(p - n * s).x;\t\t\t\t\t\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    vec2 g = fragCoord.xy;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n\tfloat t = -iTime * 0.2;\n\tvec3 ro = vec3(cos(t),0., sin(t)) * 12.; \n    vec3 cv = vec3(0); \n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n    float fov = .9;\n  \tvec3 rd = normalize(fov * (uv.x * x + uv.y * y) + z);\n    \n    float s = 1., d = 0.;\n\tfor (int i=0; i<200; i++) \n\t{\n\t\tif (log(d*d/s/1e5)>0.) break;\n\t\td += (s=df(ro+rd*d).x)*.5;\n        fragColor.rgb += d/400.; // new lighting try system\n\t}\n\t\n    fragColor.rgb = mix(fragColor.rgb, vec3(d*d/400.), .5);\n    \n\tvec3 p = ro + rd * d;\t\t\t\t\t\t\t\t\t\t\t// surface point\n\tvec3 lid = normalize(ro-p); \t\t\t\t\t\t\t\t\t// light dir\n\tvec3 n = nor(p, 0.1);\t\t\t\t\t\t\t\t\t\t\t// normal at surface point\n\tvec3 refl = reflect(rd,n);\t\t\t\t\t\t\t\t\t\t// reflected ray dir at surf point \n\tfloat diff = clamp( dot( n, lid ), 0.0, 1.0 ); \t\t\t\t\t// diffuse\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\t// fresnel\n\tfloat spe = pow(clamp( dot( refl, lid ), 0.0, 1.0 ),16.);\t\t// specular\n\tvec3 col = vec3(.8,.5,.2);\n    float sss = df(p - n*0.001).x/0.1;\t\t\t\t\t\t\t\t// quick sss 0.001 of subsurface\n\tfloat sb = SubDensity(p, 1., 0.1);\t\t\t\t\t\t\t\t// deep subdensity from 0.01 to 0.1 (10 iterations)\n\tvec3 bb = clamp(blackbody(100. * sb),0.,1.);\t\t\t\t\t// blackbody color\n\tfloat sss2 = 1. - SubDensity(p, 3.); \t\t\t\t\t\t\t// one step sub density of df of 3 of subsurface\n\t\n    fragColor.rgb *= (diff + fre + bb * sss2 * .8 + col * sss * .2) * 0.25 + spe * 1.2;\n\n\t// vigneting from iq Shader Mike : https://www.shadertoy.com/view/MsXGWr\n    vec2 q = g/si;\n    fragColor.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.55 );\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}