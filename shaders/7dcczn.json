{
    "Shader": {
        "info": {
            "date": "1652948642",
            "description": "visualize it for a guy",
            "flags": 0,
            "hasliked": 0,
            "id": "7dcczn",
            "likes": 3,
            "name": "draw reflected ray",
            "published": 3,
            "tags": [
                "reflect"
            ],
            "usePreview": 0,
            "username": "jcyuan",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n#define ARROW_SIZE .05\n#define LINE_W 2.\n\n#define ORANGE vec3(1, .3, 0)\n#define BLUE vec3(0, .3, 1)\n#define GREEN vec3(0, 1, 0)\n#define BLACK vec3(.3)\n\nfloat lineBetween(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba * h);\n}\n\n// Piecewise Polynomial from https://iquilezles.org/articles/smoothsteps/\nfloat ss_pp(float a, float b, float n) {\n    float x = clamp((n - a) / (b - a), 0.0, 1.0);\n    const float P = 2.;\n    return (x < 0.5) ? 0.5 * pow(2.0 * x, 1.0 / P) : 1.0 - 0.5 * pow(2.0 * (1.0 - x), 1.0 / P);\n}\n\nvec2 reflectRay(vec2 inputRay, vec2 normal) {\n    return inputRay - 2. * normal * dot(normal, inputRay);\n    // uncomment to use the native function, actually the same thing\n    // return reflect(inputRay, normal);\n}\n\nstruct Surface {\n    vec2 a;\n    vec2 b;\n    vec2 origin;\n    vec2 normal;\n};\n\nSurface getSurface(vec2 a, vec2 b, float r) {\n    float cs = cos(r), ss = sin(r);\n    mat2 mat = mat2(cs, ss, -ss, cs);\n    a = mat * a;\n    b = mat * b;\n    vec2 d = b - a;\n    return Surface(a, b, a + d * .5, normalize(vec2(-d.y, d.x)));\n}\n\nvec3 visualizeLine(float d, float w, vec3 color, inout vec3 oc) {\n    oc = mix(oc, color, 1. - ss_pp(-w, w, d));\n    return oc;\n}\n\nvec3 visualizeLine(vec2 p, vec2 a, vec2 b, float w, vec3 color, inout vec3 oc) {\n    return visualizeLine(lineBetween(p, a, b), w, color, oc);\n}\n\nconst float ArrowAngle = 20. * PI / 180.;\nconst float ArrowCS = cos(ArrowAngle);\nconst float ArrowSS = sin(ArrowAngle);\n\nvec3 visualizeArrow(vec2 p, vec2 origin, vec2 n, float h, float w, vec3 color, inout vec3 oc) {\n    vec2 o2 = origin + n * h * 2.;\n    visualizeLine(p, origin, o2, w, color, oc);\n    \n    float a = atan(n.y, n.x);\n    \n    float cs = cos(a + PI), ss = sin(a + PI);\n    vec2 e1 = mat2(cs, ss, -ss, cs) * (vec2(ArrowCS, ArrowSS) * h);\n    visualizeLine(p, o2, o2 + e1, w, color, oc);\n    \n    cs = cos(a), ss = sin(a);\n    vec2 e2 = mat2(cs, ss, -ss, cs) * (vec2(ArrowCS, ArrowSS) * vec2(-h, h));\n    visualizeLine(p, o2, o2 + e2, w, color, oc);\n    \n    return oc;\n}\n\nvec3 visualizeSurface(vec2 p, Surface s, float w, vec3 color, inout vec3 oc) {\n    visualizeLine(p, s.b, s.a, w, color, oc);\n    visualizeArrow(p, s.origin, s.normal, ARROW_SIZE, w, color, oc);\n    return oc;\n}\n\nvec4 charLUT(in vec2 p, in int c) {\n    p.y += 1.;\n    vec2 range = step(vec2(0.), p) * step(p, vec2(1.));\n    float check = range.x * range.y;\n    if (check == 0.) return vec4(vec3(0.), 1e+3);\n    vec2 o = p / 16.;\n\treturn textureGrad(iChannel0, o + fract(vec2(c, 15 - c / 16) / 16.), dFdx(o), dFdy(o));\n}\n\n#define SS pow(1. - ss_pp(-w, w, textOutput.w), 1.5)\n\nvec3 drawDesc(in vec2 p, float size, float spacing, float w, inout vec3 col) {\n    textUv = p * 64. / size;\n    charSpacing = spacing;\n    \n    float sx = textUv.x;\n    w *= 4.;\n    \n    _G _r _e _e _n\n    col = mix(col, GREEN, SS);\n    textOutput.w = 1e+3;\n    \n    _colon _space _space _S _u _r _f _a _c _e\n    col = mix(col, BLACK, SS);\n    textOutput.w = 1e+3;\n    textUv.y += spacing * 2.2;\n    textUv.x = sx;\n    \n    _O _r _a _n _g _e\n    col = mix(col, ORANGE, SS);\n    textOutput.w = 1e+3; \n    \n    _colon _space _I _n _p _u _t _space _R _a _y\n    col = mix(col, BLACK, SS);\n    textOutput.w = 1e+3;\n    textUv.y += spacing * 2.2;\n    textUv.x = sx;\n    \n    _B _l _u _e\n    col = mix(col, BLUE, SS);\n    textOutput.w = 1e+3;\n    \n    _colon _space _space _space _R _e _f _l _e _c _t _e _d _space _R _a _y\n    col = mix(col, BLACK, SS);\n    textOutput.w = 1e+3;\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 ouv = fragCoord / iResolution.xy;\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.);\n    \n    vec3 col = vec3(.95, .99, .9);\n    \n    vec2 tUv = 2. * (ouv - vec2(0., 1.)) * ratio;\n    drawDesc(tUv + vec2(-.05, .05), 6., .45, dFdy(tUv.y) * 2., col);\n    \n    vec2 uv = 2. * (ouv - .5) * ratio;\n    uv.y += .45;\n    float w = dFdy(uv.y) * LINE_W;\n    \n    Surface surface = getSurface(vec2(-.8, 0.) + vec2(cos(iTime) * .5, 0.), vec2(.8, 0.), cos(iTime * 2.) * .2);\n    \n    vec2 inputRay = normalize(surface.origin - vec2(-.6, .3));\n    vec2 reflectedRay = normalize(reflectRay(inputRay, surface.normal));\n    \n    visualizeSurface(uv, surface, w, GREEN, col);\n    \n    visualizeLine(uv, surface.origin - inputRay, surface.origin, w, ORANGE, col);\n    visualizeArrow(uv, surface.origin - inputRay * .5, inputRay, ARROW_SIZE, w, vec3(1, 0, 0), col);\n    \n    visualizeLine(uv, surface.origin, surface.origin + reflectedRay, w, BLUE, col);\n    visualizeArrow(uv, surface.origin + reflectedRay * .5, reflectedRay, ARROW_SIZE, w, vec3(0, 0, 1), col);\n    \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define S(c) _tmpChrVal = charLUT(textUv, c); textOutput.xyz += _tmpChrVal.xyz; textOutput.w = min(textOutput.w, 2. * _tmpChrVal.w - 1.); textUv.x -= charSpacing;\n\n#define _A S(65)\n#define _B S(66)\n#define _C S(67)\n#define _D S(68)\n#define _E S(69)\n#define _F S(70)\n#define _G S(71)\n#define _H S(72)\n#define _I S(73)\n#define _J S(74)\n#define _K S(75)\n#define _L S(76)\n#define _M S(77)\n#define _N S(78)\n#define _O S(79)\n#define _P S(80)\n#define _Q S(81)\n#define _R S(82)\n#define _S S(83)\n#define _T S(84)\n#define _U S(85)\n#define _V S(86)\n#define _W S(87)\n#define _X S(88)\n#define _Y S(89)\n#define _Z S(90)\n\n#define _a S(97)\n#define _b S(98)\n#define _c S(99)\n#define _d S(100)\n#define _e S(101)\n#define _f S(102)\n#define _g S(103)\n#define _h S(104)\n#define _i S(105)\n#define _j S(106)\n#define _k S(107)\n#define _l S(108)\n#define _m S(109)\n#define _n S(110)\n#define _o S(111)\n#define _p S(112)\n#define _q S(113)\n#define _r S(114)\n#define _s S(115)\n#define _t S(116)\n#define _u S(117)\n#define _v S(118)\n#define _w S(119)\n#define _x S(120)\n#define _y S(121)\n#define _z S(122)\n\n#define _0 S(48)\n#define _1 S(49)\n#define _2 S(50)\n#define _3 S(51)\n#define _4 S(52)\n#define _5 S(53)\n#define _6 S(54)\n#define _7 S(55)\n#define _8 S(56)\n#define _9 S(57)\n\n#define _add  S(43)\n#define _dot  S(46)\n#define _exc  S(33)\n#define _space S(32)\n#define _colon S(58)\n\nvec4 _tmpChrVal = vec4(vec3(0.), 1e+3);\n\nfloat charSpacing = .5;\nvec2 textUv = vec2(0);\nvec4 textOutput = vec4(vec3(0), 1e+3);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}