{
    "Shader": {
        "info": {
            "date": "1571234572",
            "description": "Every pixel has a color representing the change of that color around that pixel. For example, if there is a change in red around a pixel, then that pixel will be red. The directional factor increases the width of lines(for high-resolution viewing).",
            "flags": 0,
            "hasliked": 0,
            "id": "wsVGWt",
            "likes": 4,
            "name": "Edge Detection Filter Mask",
            "published": 3,
            "tags": [
                "edgedetection",
                "filtermax"
            ],
            "usePreview": 0,
            "username": "Nihilistic_Furry",
            "viewed": 593
        },
        "renderpass": [
            {
                "code": "// Increase for thicker lines (this is necessary for higher resolutions)\n#define DIRECTIONAL_FACTOR 1\n\nvec4 edgeDetection (sampler2D tex, vec2 fragCoord)\n{\n    // Edge detection matrix [0,1,0],[1,-4,1],[0,1,0]\n    // Colors\n    vec4 up = texture (tex, (fragCoord + vec2 (0, DIRECTIONAL_FACTOR))/iResolution.xy);\n    vec4 left = texture (tex, (fragCoord + vec2 (-DIRECTIONAL_FACTOR, 0))/iResolution.xy);\n    vec4 center = texture (tex, fragCoord/iResolution.xy);\n    vec4 right = texture (tex, (fragCoord + vec2 (DIRECTIONAL_FACTOR, 0))/iResolution.xy);\n    vec4 down = texture (tex, (fragCoord + vec2 (0, -DIRECTIONAL_FACTOR))/iResolution.xy);\n    \n    // Return edge detection\n    return up + left - 4.0*center + right + down;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Detect edges and output to screen\n    fragColor = edgeDetection (iChannel0, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}