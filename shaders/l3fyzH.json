{
    "Shader": {
        "info": {
            "date": "1725832298",
            "description": "look at those rats go, finding distances and simulating light\nfeatures bad fake ambient occlusion",
            "flags": 0,
            "hasliked": 0,
            "id": "l3fyzH",
            "likes": 0,
            "name": "rat racer",
            "published": 3,
            "tags": [
                "raytracer",
                "rat",
                "racer"
            ],
            "usePreview": 0,
            "username": "derpygamer2142",
            "viewed": 9
        },
        "renderpass": [
            {
                "code": "const float renderDist = 1000.0;\nconst float focalLength = 120.0;\nconst vec3 lightVec = normalize(vec3(1,1,0.5));\nconst float pi = 3.14159;\n\n  const uint k = 1103515245U;  // GLIB C\nvec3 hash33( uvec3 x ) {\n    // https://www.shadertoy.com/view/XlXcW4\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nfloat hash14(vec4 p4)\n{\n//https://www.shadertoy.com/view/4djSRW\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\nfloat hash11(float p)\n{\n//https://www.shadertoy.com/view/4djSRW\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \n\nfloat gold_noise(in vec2 xy, in float seed)\n{\nreturn fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\nvec3 sampleHemisphere(float u1, float u2) {\n    // https://www.rorydriscoll.com/2009/01/07/better-sampling/\n    float r = sqrt(u1);\n    float theta = 2.0 * pi * u2;\n \n    float x = r * cos(theta);\n    float y = r * sin(theta);\n \n    return vec3(x, y, sqrt(max(0.0, 1.0 - u1)));\n}\n\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra ) {\n    // https://iquilezles.org/articles/intersectors/\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nfloat plaIntersect( in vec3 ro, in vec3 rd, in vec4 p ) {\n    // https://iquilezles.org/articles/intersectors/\n    return -(dot(ro,p.xyz)-p.w)/dot(rd,p.xyz);\n}\n\n\nfloat[5] intersect(vec3 ro, vec3 rd) {\n    float heldDist = 99999.9;\n    int obj = -1;\n    {\n        vec2 d = sphIntersect(ro, rd, vec3(0,0,100),75.0);\n        if (d.y < 0.0) {}\n        else if (d.x < 0.0) {\n            if (d.y < heldDist) {\n                heldDist = d.y;\n                obj = 1;\n            }\n        }\n        else {\n            if (d.x < heldDist) {\n                heldDist = d.x;\n                obj = 1;\n            }\n        }\n    }\n    \n    {\n        float p = plaIntersect(ro, rd, vec4(0,1,0,-75.0/2.0));\n        if (p >= 0.0 && p < heldDist) {\n            heldDist = p;\n            obj = 2;\n        }\n    }\n    \n    vec3 norm = vec3(-1.0);\n    if (heldDist != 99999.9) {\n        switch (obj) {\n            case 1: {\n                norm = normalize((ro + (rd*heldDist)) - vec3(0,0,100));\n                break;\n            }\n            case 2: {\n                norm = vec3(0,1,0);\n                break;\n            }\n        }\n    }\n    \n    return float[5](heldDist,norm.x,norm.y,norm.z,float(obj));\n}\n\nfloat shadow(vec3 ro,vec3 rd, float obj) {\n    float[5] i = intersect(ro,rd);\n    if (i[0] == 99999.9 || i[4] == obj) return 1.0;\n    else return clamp(1.0/(1.0/i[0]),0.0,0.3);\n}\n\nfloat ao(vec3 ro,vec2 fc,vec3 norm) {\n// very broken do not use\n    float total = 0.0;\n    const float p = 1.9;\n    const float imax = 50.0; // not to be confused with the movie thing\n    for (float i = 0.0; i < imax; i++) {\n        //vec3 rd = normalize(vec3(hash14((fc*45.0)+i*25.0),hash14(fc+i*35.0),hash14(fc+i*45.0))-0.5);\n        /*vec3 rd = normalize(vec3(\n        gold_noise(fragCoord,\n        ))*/\n        //vec3 rd = normalize((normalize(sampleHemisphere(hash14(fract(sin(fc/15.0))*125.0+i*25.0),hash14(fc+i*35.0)*25.0))+norm));\n        //gold_noise(fc,hash14(vec4(norm.xz,fc)))\n        //gold_noise(fc,hash14(vec4(fc.x,norm.yx,fc.y)))\n        //vec3 rd = normalize( normalize(sampleHemisphere(gold_noise(fc,hash14(vec4(norm.xz,fc))), gold_noise(fc,hash14(vec4(fc.x,norm.yx,fc.y)))))+norm );\n        //vec3 rd = normalize(normalize(sampleHemisphere(hash11(i*245.0),hash11(i*565.0)))+norm);\n        vec3 rd = normalize( sampleHemisphere(gold_noise(fc+i*350.0,hash14(vec4(norm.xz*25.0,fc*i))), gold_noise(fc+i*35.0,hash14(vec4(fc.x*i,norm.yx,fc.y*i))))*1.0 +norm );\n        float[5] t = intersect(ro,rd); // was going to name this variable i, but it was used in the loop, and in and int are reserved, and i already have a function called intersect\n        if (t[0] != 99999.9) total += t[0];\n    }\n    \n    return pow(total/imax,p)/pow(total/imax + 1.0,p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenCoord = (fragCoord/iResolution.xy)*vec2(800,450) - vec2(400,225);\n    vec3 rd = normalize(vec3(screenCoord,focalLength));\n    float mult = 1.0;\n    float[5] i = intersect(vec3(0),rd);\n    vec3 snorm = vec3(i[1],i[2],i[3]);\n    if (i[0] == 99999.9) {\n        fragColor = vec4(.0);\n    }\n    else {\n        float l = dot(lightVec,snorm);\n        fragColor = vec4((l+1.0)/2.0 * shadow(rd*i[0]*0.999,lightVec,i[4])*ao(rd*i[0]*0.999,screenCoord,snorm)/**dot(reflect(rd,snorm),snorm)*/);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}