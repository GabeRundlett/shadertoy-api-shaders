{
    "Shader": {
        "info": {
            "date": "1682583348",
            "description": "I spent quite some time going from 800+ down to 483 chars!",
            "flags": 0,
            "hasliked": 0,
            "id": "Dt33RS",
            "likes": 56,
            "name": "Disco Godrays [411 chars]",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "rays",
                "fog",
                "rotation",
                "god",
                "neon",
                "short",
                "density",
                "golf"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 2018
        },
        "renderpass": [
            {
                "code": "/* \"Disco Godrays\" by @kishimisu (2023) - https://www.shadertoy.com/view/Dt33RS\n   [68 chars shorter thanks to the amazing shadertoy community!]\n   \n   These are \"fake\" godrays made without tracing any additional ray.\n   The maximum raymarching step size is set to 0.1 in order to sample the scene\n   frequently (very inneficient) and some blue noise is added to reduce artefacts.\n*/\n\n#define M(p) p *= mat2(cos(round((atan(p.x,p.y)+k)/.3)*.3-k + vec4(0,33,11,0)));//\n#define S cos( k - t + vec4(0,.5,1,0)) * smoothstep( 1., 0.//\n#define L length(p\n\nvoid mainImage(out vec4 O, vec2 F) {\n    float i = .0, t = i, d=.3, k = iTime*d, l;\n    for ( O *= i; \n          i++ < 60. && d > .01;\n          t -= d = min(max(l,-d), .1 + texture(iChannel0, F/1024.).r*.06) )\n    {\n        vec3 R = iResolution,\n        p = R-vec3(F+F,R.y);\n        p = t/L)*p-2./R;\n        M(p.zx) M(p.yx)\n        O +=  S, (d = L.yz) -.05) / .02) \n            * S,  l = L)    - 1.       ) + .002;\n    }\n    O *= exp(t*.1);   \n}\n\n/* Original version [483 chars]\n\n#define r(p) mat2(cos(round((atan(p.y,p.x)+k)/f)*f-k + vec4(0,33,11,0)))\n\nvoid mainImage(out vec4 O, vec2 F) {\n    float i = 0., f = .2856, d = f, k = iTime*f, t;\n    vec4  p, a = O *= t = i;\n          \n    for (vec2 R = iResolution.xy; i++ < 6e1 && d > .01;\n        p = t*normalize(vec4((F+F-R)/R.y, 1, 0))) {\n        p.z -= 2.;\n        p.zx *= r(p.xz);\n        p.yx *= r(p.xy);\n        \n        a += smoothstep(.02, .0, length(p.yz) - .05) *\n             smoothstep( 1., .0, length(p)    -  1.) *\n             (1. + cos(k+k + t+t + vec4(0,1,2,0)));\n             \n        t += d = min(max(length(p) - 1., .05 - length(p.yz)),\n                 .1 + texture(iChannel0, F/1024.).r*.06);\n    }\n                 \n    O = .5*mix(O+.3, a, exp(-t*.1));\n}*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}