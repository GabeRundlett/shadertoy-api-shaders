{
    "Shader": {
        "info": {
            "date": "1603260040",
            "description": "This uses a simple algorithm I came up with to perform simple edge detection. It doesn't handle noisy images very well but it is pretty good in my opinion.",
            "flags": 2,
            "hasliked": 0,
            "id": "3sVcRV",
            "likes": 8,
            "name": "Simple Webcam Edge Detection",
            "published": 3,
            "tags": [
                "edgedetection",
                "webcam"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "const float sensitivity = 0.035;\nconst float SQRT_2 = sqrt(2.0);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 samples = mat3(0.0);\n    vec2 uv = vec2(0.0);\n\n    // Collect samples from the surrounding texels:\n    for (int i=-1; i < 2; i++) {\n        for (int j=-1; j < 2; j++) {\n            uv = (fragCoord + vec2(i, j)) / iResolution.xy;\n            vec3 curTexel = texture(iChannel0, uv).rgb;\n            samples[i + 1][j + 1] = (curTexel.r + curTexel.g + curTexel.b) / 3.0;\n        }\n    }\n\n    // Check whether the gradient over the area around the current texel is continuous:\n    // If it is not continuous, theoretically there is some sort of division or edge.\n    bool onEdge = false;\n    for (int i=0; i < 3; i++) {\n        for (int j=0; j < 3; j++) {\n            // Compute the difference between the texel the loop is currently on and the current (center) texel:\n            float gradient1 = samples[1][1] - samples[i][j];\n            // Compute the difference between the current (center) texel and the texel opposite the texel the loop is currently on:\n            float gradient2 = samples[2 - i][2 - j] - samples[1][1];\n            // If (i, j) is a corner, the differences need to be divided by sqrt(2) to be normalized:\n            if (i == j || (2 - i) == j) {\n                gradient1 /= SQRT_2;\n                gradient2 /= SQRT_2;\n            }\n            // Check whether both gradients are going in the same direction (whether the overall gradient is continuous):\n            if ((gradient1 >= sensitivity && gradient2 >= sensitivity) || (gradient1 < -sensitivity && gradient2 < -sensitivity)) {\n                onEdge = true;\n                break;\n            }\n        }\n    }\n\n    // Return a color based on whether the current texel is on an edge:\n    vec3 color = onEdge ? vec3(1.0, 0.6, 0.0) : vec3(samples[1][1]);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}