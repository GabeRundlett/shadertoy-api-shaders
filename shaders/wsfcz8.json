{
    "Shader": {
        "info": {
            "date": "1584291729",
            "description": "Get creative while you are told to stay at home :D",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfcz8",
            "likes": 5,
            "name": "Contaminated",
            "published": 3,
            "tags": [
                "newbie",
                "corona",
                "fun",
                "bored",
                "virus",
                "biohazard",
                "contamination"
            ],
            "usePreview": 0,
            "username": "raabix",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "#define S(a,b,x) smoothstep((a),(b),(x))\n#define SMOOTH 0.01\n#define blend(a, b, x) mix((a),(b),(x))\n\n\n// Hash by Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\n//----------------------------------------------------------------------------------------\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat value_noise(vec2 uv)\n{\n    vec2    ID = floor(uv);\n    // cell coord\n    vec2 cc = fract(uv);\n\n    float n1, n2, n3, n4, n12, n34;\n    \n    n1 = hash12(ID);\n    n2 = hash12(ID + vec2(1, 0));\n    n3 = hash12(ID + vec2(0, 1));\n    n4 = hash12(ID + vec2(1, 1));\n   \n    n12 = (blend(n1, n2, cc.x));\n    n34 = (blend(n3, n4, cc.x));\n    \n    return (blend(n12, n34, cc.y));\n}\n\nfloat oct_value_noise(float levels, float roughness, float descale, vec2 uv)\n{\n    float n = 0.,\n        scale = 1.; \n    float final_divisor =0.;\n    for(float i = 0.; i < levels; i++)\n    {\n        float octave_intensity = mix(1./(i+1.), 1., roughness);\n        final_divisor += octave_intensity;\n        n+= value_noise(uv * scale) * octave_intensity;\n        scale *= descale;\n        uv += vec2(7., 7.);\n    }\n    return n/final_divisor;\n}\n\nfloat sphere(vec2 pos, float r, vec2 uv)\n{\n    return length(uv - pos) -r;\n}\n\nfloat ring(vec2 pos, float r, vec2 uv)\n{\n    return abs(sphere(pos, r, uv));\n}\n\nfloat box(vec2 lw,  vec2 uv )\n{\n    vec2 d = abs(uv)-lw;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec2 rot(vec2 pos, float angle, vec2 uv)\n{\n    uv -= pos; \n    uv = vec2(uv.x * cos(angle) - uv.y * sin(angle) , uv.x * sin(angle) + uv.y * cos(angle));\n    return uv + pos;\n}\n\n\n\nfloat biohazard(vec2 pos, float size, vec2 uv)\n{\n    uv *= size;\n    uv = rot(vec2(0), float(iFrame)/180., uv);\n    float val = 0.;\n    float ring_punchout = 0.;\n    float ring_w;\n    // Doing the first part of the Symbol\n    for(float i = 0.; i<3. ; i++)\n    {\n        float th_rad = .5;\n        float dist = 0.;\n        float angle = 3.1415/1.5 * i;\n        vec2 uv_tmp = rot(vec2(0., -th_rad), angle, uv - vec2(0.0, 0.5));\n        val = max(S(SMOOTH, 0.0, sphere(vec2(0.0), th_rad , uv_tmp)), val);\n        val -= S(SMOOTH, 0.0, sphere(vec2(0.0, 0.11), .39, uv_tmp));\n        // center of 2nd sphere, but smaller\n        dist = ring(vec2(0.0, 0.11), th_rad - .125 , uv_tmp) ;\n        \n        float ring_w = 0.022;\n        ring_punchout = max(S(SMOOTH+ring_w, ring_w, dist), ring_punchout);\n        \n        uv_tmp = rot(vec2(0., -th_rad), angle, uv - vec2(0.0, 0.5)) + vec2(0, 0.34); //UV for box\n        val = min(S(0., SMOOTH,  ( box(vec2(0.023, 0.06), uv_tmp)) ), val); // BOX\n\n    }\n    // the punchout ring\n    ring_w = 0.04;\n    \n    val = max(val,S(SMOOTH + ring_w, ring_w,   ring(vec2(0), .4, uv)));\n    val -= ring_punchout;\n    \n    \n    val -= S(SMOOTH, 0.0, sphere(vec2(0), 0.11, uv));\n    \n    return val;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\n    // Centered pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord/iResolution.xy)-.5)*2., uv_vignette = uv;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    \n    // draw symbol\n\tfloat val = clamp(biohazard(vec2(0), 1., uv), 0., 1.);\n    \n    // dirt\n    float n = oct_value_noise(8., 1., 1.6, uv*7. * vec2(1.5, .6));\n    n = S(value_noise((uv + vec2(45., 67.))* vec2(10, 4))*.6,\n          value_noise((uv + vec2(145., 167.))*9.)*.7+.4, n);\n  \n    vec4 bg = mix(vec4(.9, .9, .2, 0), vec4(0.8, 0.75, 0.14,0),1.- n);\n    float v = value_noise((uv + vec2(45., 67.))* vec2(320, 320));\n    // Output to screen               *    Vignette\n    O = bg*vec4(1.-val) * (1.-pow(length(uv_vignette*.6), v*3.+1.2));\n    \n   \n  // O = vec4(v);\n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}