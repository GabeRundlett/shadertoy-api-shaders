{
    "Shader": {
        "info": {
            "date": "1645464077",
            "description": "click to move\n\nplaying around with the usual, refraction, p.y stretching 2d stuff, colors + fresnel stuff\n\n(looks cool when you look directly upwards)",
            "flags": 0,
            "hasliked": 0,
            "id": "NdXBWf",
            "likes": 13,
            "name": "Column thingy",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    //float sd = sdBox(p, vec3(4.)) - 2.;\n    \n    vec2 uv = p.xz;\n    \n    // buggy + laggy:\n    // float sc = 3.;\n    // uv = floor(sc * uv)/sc + 0.5;\n\n    uv *= Rot(0.1 * p.y);\n    //uv.x = sabs(uv.x) - 1.5;\n   \n    float ext = 4.2 + 1.2 * cos(0.1 * p.y + iTime);\n    uv = abs(uv) - ext;\n    uv *= Rot(pi/4.);\n    uv.x = abs(uv.x) - sqrt(ext) * sqrt(3./2.);\n   \n    uv *= Rot(p.y * 2.4 + iTime);\n   \n    float t = iTime;\n    float r = 0.5;\n    r *= 0.5 + 0.5 * cos(0.5 * t + 1.2 * p.y);       \n    vec2 p0 = r * vec2(cos(t), sin(t));\n    vec2 p1 = r * vec2(cos(t + pi), sin(t + pi));\n    float d = sdSegment(uv * 1.35, p0, p1) - .8 - .5 * length(uv);\n    \n    // looks cool too:\n     //d = sdSegment(uv * (1. + 0.1 * cos(3. * 3. * length(uv))), p0, p1) -0.055 - .5 * length(uv);  \n\n    //d *= 0.8;\n    return d;//-smin(d, -sd);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -20);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n           \n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit);\n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        vec3 e = vec3(1);\n        vec3 bcol = pal(dif * 0.35 + 0.2 + 0.2 * cos(0.1 * p.y + iTime), e, e, e, 0.5 * vec3(0,1,2)/3.);\n       // col = 0.02 * clamp(col, 0., 1.);\n       \n        col = bcol;\n        col *= 0.75 - 0.25 * n.y;\n        \n        // fresnel (interior + exterior)\n        col += pow(1.+dot(rdIn, nExit), 5.);    \n        col += pow(1.+dot(rd, n), 5.);\n        col *= col * (1. + dot(rd, n));\n\n        // cartoony outline effect (0.5 determines thickness, looks cool with smoothstep)\n        col += bcol * step(0., 0.5 + dot(rd, n));\n    }\n    \n    col = pow(col, vec3(.4545)) + 0.05;\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}