{
    "Shader": {
        "info": {
            "date": "1591310331",
            "description": "Better for something in the background, based on https://www.shadertoy.com/view/3lscRr",
            "flags": 0,
            "hasliked": 0,
            "id": "ttlcRr",
            "likes": 4,
            "name": "Slow fractal clock",
            "published": 3,
            "tags": [
                "clock"
            ],
            "usePreview": 0,
            "username": "creikey",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define P 3.14159265359\n#define DARK_THEME\n#define SPEED 0.2\nmat2 r(float a) { float c = cos(a), s = sin(a); return mat2(c,s,-s,c); }\nfloat sq(vec2 p, vec2 sz, float r) { return length(max(abs(p) - sz,0.)) - r; }\n\nfloat anim1(float x) { float sp = P*12.; x = x*sp; return (x + sin(x - P))/sp; }\n\nvec2 m;\nfloat t;\nfloat aa;\nfloat shape(vec2 p) {\n    float d = 10e+9;\n    vec2 s1 = vec2(0.,(0.34444));\n    float s2 = .3;\n    for(int i = 0; i < 8; i++) {\n        float d1 = min(d,sq(p, s1, .002));\n        float d2 = sq(p*r(P*.25),vec2(.15)*s2, max(.001,aa));\n        d2 = min(d2,sq(p*r(P*.25) + .5*s2,vec2(.075)*s2, max(.001,aa)));\n        d2 = min(d2,sq(p*r(P*.25) - .5*s2,vec2(.075)*s2, max(.001,aa)));\n        float d3 = abs(length(p) - .7155*s2) - .001;\n        \n        d =  min(d1,d2);\n        d =  min(d,d3);\n        \n        p *= r(P*anim1(-t*.125)*.5);\n        p *= r(P*-0.3333);\n        p.y = abs(p.y) - s2*m.y;\n        p.x = abs(p.x) - s2*m.x;\n        p *= r(P);\n        s2 *= 0.5;\n        s1.y *= 0.496;\n    }\n    \n    //d = abs(d - .001) - .0005;\n    float dd = d;\n    d = smoothstep(-aa,aa,d);\n    float color = mix(0.,1.,d);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy - .5;\n    st.x *= iResolution.x/iResolution.y;\n    t = iTime*SPEED;\n    m = iMouse.xy/iResolution.xy - .1;\n    aa = (1./iResolution.x);\n    \n    vec3 color = vec3(0.);\n    /*color.r += shape(st + vec2(aa + length(st*.002),0.));\n    color.g += shape(st + vec2(0.,0.));\n    color.b += shape(st + vec2(0.,aa + length(st*.002)));*/\n    color = vec3(shape(st));\n    \n    #ifdef DARK_THEME\n    color = vec3(1.0) - color;\n    #endif\n    \n    fragColor = vec4(color, 1.0);\n    //fragColor = vec4(color - pow(length(st)*.9,1.),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}