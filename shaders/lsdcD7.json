{
    "Shader": {
        "info": {
            "date": "1519220821",
            "description": "Colorful pavilions (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "lsdcD7",
            "likes": 19,
            "name": "Hexpo",
            "published": 3,
            "tags": [
                "lighting",
                "hexagon",
                "architecture"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 5379
        },
        "renderpass": [
            {
                "code": "// \"Hexpo\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HueToRgb (float c);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\n\nvec3 sunDir, qHit;\nvec2 gId;\nfloat tCur, dstFar, gcRnd, hgSize;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, w, s, r, rh, a, s3;\n  dMin = dstFar;\n  s3 = 0.5 * sqrt3 * hgSize;\n  rh = 3.07;\n  w = 0.1;\n  p.xz -= HexToPix (gId * hgSize);\n  r = length (p.xz);\n  a = (r > 0.) ? atan (p.z, - p.x) / (2. * pi) : 0.;\n  q = p;\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (6. * a + 0.5)) / 6.));\n  qq = q;\n  s = 1. - sqrt (1. - smoothstep (0.65, 0.85, q.y));\n  d = max (max (abs (q.x + 3.) - 0.07, abs (q.y - 0.5) - 0.5),\n     - PrBox2Df (vec2 (mod (q.z, 0.25) - 0.125, q.y - 0.41), vec2 (0.08 - 0.08 * s, 0.45)));\n  s = smoothstep (1., 2.2, q.y);\n  d = min (d, max (max (mix (abs (q.x + 0.5 * rh) - 0.5 * rh, r - 2. - w, s),\n     - mix (abs (q.x + 0.5 * rh - w) - 0.5 * rh + w, r - 2. + w, s)), abs (q.y - 1.6) - 0.6));\n  d = min (d, max (abs (r - 2.) - w, abs (q.y - 2.25) - 0.05));\n  s = smoothstep (2.3, rh, q.y);\n  d = min (d, max (max (mix (r - 2. - w, r - 1.4 - w, s), - mix (r - 2. + w, r - 1.4 + w, s)), abs (q.y - 2.6) - 0.3));\n  DMINQ (1);\n  q.xy -= vec2 (- s3 + 0.06, 0.06);\n  d = length (q.xy) - 0.05;\n  DMINQ (2);\n  q.y -= 1.15 - 0.2 * q.x * q.x;\n  d = PrCylDf (vec3 (q.xy, abs (q.z) - 0.04).yzx, 0.03, s3 - rh);\n  DMINQ (3);\n  q = qq;  q.xy -= vec2 (- s3, 1.21);\n  d = PrCylDf (q.xzy, 0.1, 0.04);\n  q = qq;  q.z = abs (q.z);  q -= vec3 (- s3, 0.07, 0.5 * hgSize);\n  d = min (d, PrCylDf (q.xzy, 0.15, 0.07));\n  DMINQ (4);\n  q = qq;  q.y -= 2.2;\n  d = PrCylDf (q.xzy, 0.3, 2.2);\n  DMINQ (5);\n  q = qq;  q.xy -= vec2 (-0.6, 1.8);\n  d = PrCylDf (q.xzy, 0.25, 1.8);\n  DMINQ (6);\n  return 0.6 * dMin;\n}\n\nvoid SetGrdConf ()\n{\n  gcRnd = Hashfv2 (17.3 * gId);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = min (hv.x, min (hv.y, hv.z));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = 0; j < 320; j ++) {\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrdConf ();\n    }\n    d = ObjDf (p);\n    if (dHit + d < s) dHit += d;\n    else {\n      dHit = s + 0.001;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = min (hv.x, min (hv.y, hv.z));\n    }\n    if (d < 0.0005 || dHit > dstFar || p.y < 0. || p.y > 5.) break;\n  }\n  if (d >= 0.0005) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec2 TrackPath (float t)\n{\n  vec2 r;\n  float tt;\n  tt = mod (t, 4.);\n  if (tt < 1.) r = mix (vec2 (sqrt3 * 0.5, -0.5), vec2 (sqrt3 * 0.5, 0.5), tt);\n  else if (tt < 2.) r = mix (vec2 (sqrt3 * 0.5, 0.5), vec2 (0., 1.), tt - 1.);\n  else if (tt < 3.) r = mix (vec2 (0., 1.), vec2 (0., 2.), tt - 2.);\n  else r = mix (vec2 (0., 2.), vec2 (sqrt3 * 0.5, 2.5), tt - 3.);\n  r *= hgSize;\n  r += vec2 (0.001, hgSize * 3. * floor (t / 4.));\n  return r;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return 0.2 * mix (vec3 (0.2, 0.3, 0.5) + 0.3 * pow (max (dot (rd, sunDir), 0.), 8.), vec3 (1.),\n     0.2 + 0.8 * rd.y * Fbm2 (2. * rd.xz / max (rd.y, 0.0001)));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, gCol, vn, qc, qh;\n  vec2 vf;\n  float dstObj, dstGrnd, spec, f, s;\n  bool isLit;\n  dstGrnd = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstObj = ObjRay (ro, rd);\n  isLit = true;\n  if (min (dstObj, dstGrnd) < dstFar) {\n    vf = vec2 (0.);\n    ro += min (dstObj, dstGrnd) * rd;\n    gId = PixToHex (ro.xz / hgSize);\n    SetGrdConf ();\n    gCol = HueToRgb (mod (77.7 * gcRnd, 1.));\n    spec = 0.1;\n    if (dstObj < dstGrnd) {\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        qc = ro - vec3 (hgSize * HexToPix (gId).xy, 0.).xzy;\n        f = dot (vn, normalize (qc));\n        col = gCol;\n        vf = vec2 (1024., 0.5);\n        if (f < 0. || ro.y < 1. && f < 0.6) {\n          col = 0.8 * mix (vec3 (1.), col, 0.5) * (0.55 - 0.45 * f) * (0.7 +\n             0.3 * SmoothBump (0.25, 0.75, 0.1, mod (tCur + gcRnd, 1.)));\n          isLit = false;\n        } else {\n          col = 0.2 * mix (vec3 (1.), col, 0.2) * (0.2 + 0.8 * f);\n          s = atan (qc.z, - qc.x) / (2. * pi);\n          if (ro.y < 2.6) {\n            s = SmoothBump (1., 2.5, 0.1, ro.y) * SmoothBump (0.4, 0.6, 0.02, mod (128. * s, 1.)) *\n               SmoothBump (0.4, 0.6, 0.02, mod (8. * qc.y - 2. * tCur, 1.));\n            col *= 1. + 5. * s;\n          } else {\n            s = smoothstep (2.6, 2.85, ro.y) * SmoothBump (0.4, 0.6, 0.05, mod (32. * s +\n               2. * (2. * step (gcRnd, 0.5) - 1.) * tCur, 1.));\n            col *= 1. + 4. * s;\n          }\n          isLit = (s > 0.1);\n        }\n      } else if (idObj == 2) {\n        col = 0.8 * gCol * (0.4 + 0.6 * SmoothBump (0.25, 0.75, 0.05, mod (2. * qHit.z + tCur, 1.)));\n      } else if (idObj == 3) {\n        col = 0.8 * HueToRgb (mod (0.1 * tCur, 1.)) * (0.4 +\n           0.6 * SmoothBump (0.25, 0.75, 0.05, mod (4. * qHit.x + 2. * tCur * sign (qHit.z), 1.)));\n      } else if (idObj == 4) {\n        col = vec3 (0.7, 0.7, 0.2) * (0.3 + 0.7 * smoothstep (0., 0.4, - dot (vn, rd)));\n        isLit = false;\n      } else if (idObj == 5 || idObj == 6) {\n        col = 0.8 * ((idObj == 5) ? gCol : HueToRgb (mod (mod (77.7 * gcRnd, 1.) + 0.5, 1.)));\n        if (vn.y < 0.99) col *= (0.4 + 0.6 * SmoothBump (0.25, 0.75, 0.05, mod (8. * qHit.y +\n           atan (vn.z, vn.x) / (2. * pi) + ((idObj == 5) ? - 4. : 4.) * tCur, 1.)));\n        else col *= 0.5;\n      }\n    } else {\n      qh = HexGrid (32. * sqrt3 * ro.zx / hgSize);\n      f = max (length (qh.xy) - 0.5, 0.);\n      vn = vec3 (0., Rot2D (vec2 (1., 0.), 4. * f * f));\n      vn.zx = vn.z * normalize (qh.xy);\n      s = HexGrid (ro.xz / hgSize).z;\n      col = 0.3 * mix (vec3 (1.), gCol, 0.2) * (0.8 + 0.2 * smoothstep (0.025, 0.03, s)) *\n         (0.8 + 0.2 * smoothstep (0.03, 0.06, qh.z));\n      col = mix (col, 0.5 * gCol * (0.7 + 0.3 * SmoothBump (0.25, 0.75, 0.1, mod (tCur + gcRnd, 1.))),\n         smoothstep (0.1, 0.35, s));\n    }\n    if (isLit) {\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = col * (0.5 + 0.5 * max (dot (vn, sunDir), 0.)) +\n         spec * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    }\n    s = min (dstObj, dstGrnd) / dstFar;\n    col = mix (col * (1. - 0.95 * smoothstep (0.3, 1., s)), SkyCol (rd), smoothstep (0.4, 1., s));\n  } else {\n    col = SkyCol (rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa, vd, p1, p2;\n  float el, az, zmFac, asp, vel, tCyc, tt, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  hgSize = 5.;\n  vel = 0.3;\n  tCyc = 4. / vel;\n  tCur = mod (tCur, 36000.) + floor (2. + floor (dateCur.w / 600.) / tCyc + 1.) * tCyc;\n  p1 = TrackPath (vel * tCur + 0.3);\n  p2 = TrackPath (vel * tCur - 0.3);\n  s = SmoothBump (0.25, 0.75, 0.02, mod (tCur / (4. * tCyc), 1.));\n  ro = vec3 (0.5 * (p1 + p2), 0.7 + 3.3 * s).xzy;\n  vd = p1 - p2;\n  az = atan (vd.x, vd.y);\n  el = -0.1 * pi * s;\n  zmFac = 1.5 + s;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  asp = canvas.x / canvas.y;\n  dstFar = 300.;\n  uv.xy /= zmFac;\n  rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uv.x / asp)) * asp, uv.y, 1.));\n  sunDir = normalize (vec3 (0.5, 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p = p - HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nvec3 HueToRgb (float c)\n{\n  return clamp (abs (fract (c + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}