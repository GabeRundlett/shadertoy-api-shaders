{
    "Shader": {
        "info": {
            "date": "1529227384",
            "description": "deform texture (top left) by blurring it with gradients of a grey texture (here noise, bottom left).\nResult on right. \n\nSPACE toggle:  show ordinary displacement instead. ( comment: variant using slope )\n",
            "flags": 16,
            "hasliked": 0,
            "id": "4sGBRy",
            "likes": 13,
            "name": "directional blur 2",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "tool",
                "transforms",
                "lic",
                "mz"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1032
        },
        "renderpass": [
            {
                "code": "// following of https://shadertoy.com/view/XddfRH\n// inspired by https://support.allegorithmic.com/documentation/display/SDDOC/Slope+Blur\n\nfloat  BLUR_A = .3,\n      NOISE_A = .4,\n      NOISE_S = 8.;\nint NBsamples = 32;\n\n// --- tilers / warper / profile functions ---------------- \n\nvec2 scale(vec2 U, vec2 S) {\n    return clamp( .5+(U-.5)/S, 0., 1. );\n}\n\nvec2 noise2(vec2 p);\nvec2 Noise2(vec2 p);\nvec2 fbm2(vec2 p);\nvec2 displace(vec2 U, float amp, float scale) {\n    return  U += amp/scale* Noise2(U*scale);\n}\n\nvec2 displaceG(vec2 U, float amp, float scale) {\n    float n = amp/scale * Noise2(U*scale).x;\n    vec2 dU = vec2(dFdx(n),dFdy(n))/length(fwidth(U*scale)); // may be replaced by finite difference or analytical derivative\n    return  U + dU;\n}\n\n\nvec4 slopeBlur(vec2 U, float amp, float scale, sampler2D ch) {\n    vec4 O = vec4(0);\n    float n = amp/scale * Noise2(U*scale).x;\n    vec2 dU = vec2(dFdx(n),dFdy(n))/length(fwidth(U*scale)); // may be replaced by finite difference or analytical derivative\n  //U += .1*iTime;                                           // for demo\n    \n    for (float i=-.5; i<.5; i+= 1./float(NBsamples)) {       // blur sum \n        vec2 u = U + i*dU;\n        O += texture(ch,u);\n    }\n    return O / float(NBsamples);\n}\n// --------------------------------------------------------\n\n#define hash22(p)  fract( 18.5453 * sin( (p) * mat2(127.1,311.7,269.5,183.3)) )\nvec2 noise2(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n    vec2 v= mix( mix(hash22(i+vec2(0,0)),hash22(i+vec2(1,0)),f.x),\n                 mix(hash22(i+vec2(0,1)),hash22(i+vec2(1,1)),f.x), f.y);\n    return 2.*v-1.;\n}\nvec2 fbm2(vec2 p ) { return noise2(p)/2. + noise2(2.*p)/4. + noise2(4.*p)/8.; }\nvec2 Noise2(vec2 x) {     // pseudoperlin improvement from foxes idea \n    return (noise2(x)+noise2(x+11.5)) / 2.;\n}\n\nbool keyToggle(int ascii) {\n\treturn (texture(iChannel3,vec2((.5+float(ascii))/256.,0.75)).x > 0.);\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O -= O;\n    U *= 2./iResolution.y;\n    if (U.x<1.) if (U.y > 1.){             // top left: base textuer\n        O =  texture(iChannel0, U);\n    } else  {                              // bottom left: base noise\n        O = .5 + .5* Noise2(U*NOISE_S).xxxx;\n    } else  {                              //  right: \n        U.x -= 1.2; U/=2.;\n        if ( U.x==fract(U.x) )\n            if (keyToggle(32)) {\n                U = displace(U,4.*BLUR_A,NOISE_S);\n              //U = displaceG(U,BLUR_A,NOISE_S);\n                O = texture(iChannel0, U);\n            }\n            else\n                O = slopeBlur(U,BLUR_A,NOISE_S,iChannel0);\n    }   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}