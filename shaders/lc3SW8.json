{
    "Shader": {
        "info": {
            "date": "1714045231",
            "description": "Click palette in corner to select population to inject into the domain, and click in domain to inject selected population at the location. May exhibit numerical instability.\n\nRed = predator\nGreen = prey\n\nTip: rewind and pause to set up initial conditions.",
            "flags": 32,
            "hasliked": 0,
            "id": "lc3SW8",
            "likes": 1,
            "name": "predator-prey with diffusion",
            "published": 3,
            "tags": [
                "pdes"
            ],
            "usePreview": 0,
            "username": "alanlu",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "// it's all in Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float forcingRate = 1.;\nconst float forcingInvSize = .5;\nconst int paletteSize = 50;\nconst int paletteOffset = 2;\nconst int pureStripSize = 10;\nconst ivec2 indicatorLoc = ivec2(10, 62);\nconst int indicatorSize = 8;\n\n// model parameters\nconst vec3 diffusionCoeffs = vec3(.4, .1, 0.);\nconst float preyGrowthRate = .1;\nconst float preyInvCarryingCapacity = 1./1.1;\nconst float predationRate = .5;\nconst float conversionRate = .3;\nconst float predatorDeathRate = .1;\n\nbool inDomain(ivec2 coord)\n{\n    return length(vec2(coord) - .5*iResolution.xy) < .46875*iResolution.y;\n}\n\nbool inPalette(ivec2 coord)\n{\n    return coord.x >= paletteOffset && coord.x <= paletteSize + paletteOffset &&\n           coord.y >= paletteOffset && coord.y <= paletteSize + paletteOffset;\n}\n\nvec3 getMixture(vec2 fragCoord)\n{\n    return vec3(clamp((fragCoord - vec2(paletteOffset + pureStripSize)) / vec2(paletteSize - pureStripSize), 0., 1.), 0.);\n}\n\nvec3 getPopulations(ivec2 coord)\n{\n    return texelFetch(iChannel0, ivec2(coord),0).rgb;\n}\n\n// used to enforce Neumann boundary conditions\nvec3 getPopulationsBounded(ivec2 coord, vec3 fallback)\n{\n    if(inDomain(coord)) return getPopulations(coord);\n    return fallback;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    vec3 forcingMixture = getPopulations(indicatorLoc);\n    \n    fragColor = vec4(0.);\n\n    if(abs(fragCoord.x - .5*iResolution.x) < .5*iResolution.y)\n        fragColor = vec4(1.,1.,1.,0.);    \n\n    ivec2 off = abs(coord - indicatorLoc);\n    if(off.x <= indicatorSize && off.y <= indicatorSize) {\n        if(iMouse.z > 0.0 && inPalette(ivec2(iMouse.xy))) {\n            forcingMixture = getMixture(iMouse.xy);\n        }\n        fragColor.rgb = forcingMixture;\n    }\n    \n    if(inDomain(coord)) {\n        fragColor = vec4(0.,0.,0.,1.);\n        vec3 curPops = getPopulations(coord);\n    \n        // Oono-Puri nine-point stencil Laplacian\n        vec3 laplacian = -3.*curPops\n            + .25 * getPopulationsBounded(coord + ivec2(1, 1), curPops)\n            + .25 * getPopulationsBounded(coord + ivec2(1, -1), curPops)\n            + .25 * getPopulationsBounded(coord + ivec2(-1, 1), curPops)\n            + .25 * getPopulationsBounded(coord + ivec2(-1, -1), curPops)\n            + .5 * getPopulationsBounded(coord + ivec2(1, 0), curPops)\n            + .5 * getPopulationsBounded(coord + ivec2(0, 1), curPops)\n            + .5 * getPopulationsBounded(coord + ivec2(-1, 0), curPops)\n            + .5 * getPopulationsBounded(coord + ivec2(0, -1), curPops);\n\n        curPops +=\n            // diagonal diffusion matrix\n            diffusionCoeffs * laplacian +\n            // Kolmogorov driver\n            curPops * vec3(\n                // predator\n                conversionRate * curPops.g - predatorDeathRate,\n                // prey\n                preyGrowthRate * (1. - curPops.g * preyInvCarryingCapacity) - predationRate * curPops.r,\n                // unused\n                0.\n            );\n\n        if(iMouse.z > 0.0) {\n            // inject populations as a gaussian\n            curPops += forcingRate * forcingMixture * exp( \n                -forcingInvSize * dot(iMouse.xy - fragCoord, iMouse.xy - fragCoord));\n        }\n        \n        fragColor.rgb = curPops;\n    } else if(inPalette(coord)) {\n        fragColor.rgb = getMixture(fragCoord);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}