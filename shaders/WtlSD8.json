{
    "Shader": {
        "info": {
            "date": "1562808321",
            "description": "venn lights",
            "flags": 0,
            "hasliked": 0,
            "id": "WtlSD8",
            "likes": 2,
            "name": "CircleLightVenn",
            "published": 3,
            "tags": [
                "circle",
                "lights"
            ],
            "usePreview": 0,
            "username": "sequential",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "vec3 CircleLightWithRGB(float circleLight, float r, float g, float b) {\n\tfloat red = circleLight * r;\n    float green = circleLight * g;\n    float blue = circleLight * b;\n    return vec3(red, green, blue);\n}\n\nfloat CircleLight(vec2 uv, vec2 position, float outer_radius, float inner_radius) {\n    // Distance from center to the pixel at (uv - position)\n    float d = length(uv - position);\n    \n    // smoothstep(a, b, value) <=> easeInOut(a, b, value)\n    // if d > outer_radius, return 0.\n    // if d < inner_radius, return 1.\n    // otherwise, map d smoothly between outer radius and inner radius.\n\treturn smoothstep(outer_radius, inner_radius, d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Aspect ratio of the screen\n\tfloat aspect_ratio = iResolution.x / iResolution.y;\n    \n    // Center coordinates around (0, 0)\n    vec2 offset = vec2(-0.5, -0.625);\n    uv = uv + offset;\n    \n    // Equalize width and height\n    uv.x = uv.x * aspect_ratio;\n    \n    // Outer radius of the desired circle\n\tfloat outer_radius = 0.4;\n        \n    // Inner radius of the desired circle\n\tfloat inner_radius = 0.125;\n    \n    // Determine the reference coordinate for the circles.\n    float x = 0.0;\n    float y = 0.0;\n    \n    // Calculate the brightness for each circle light.\n    float light1 = CircleLight(uv, vec2(x,  - outer_radius / 1.5), outer_radius, inner_radius);\n    float light2 = CircleLight(uv, vec2(x + outer_radius / 1.75, 0.0), outer_radius, inner_radius);\n    float light3 = CircleLight(uv, vec2(x - outer_radius / 1.75, 0.0), outer_radius, inner_radius);\n    \n    // Calculate rgb color values for each circle light.\n    float time = iTime / 0.7;\n    float red = abs(sin(time));\n    float green = abs(sin(time + 1.0));\n    float blue = abs(sin(time + 2.0));\n    vec3 color1 = CircleLightWithRGB(light1, red, green, blue);\n    vec3 color2 = CircleLightWithRGB(light2, green, blue, red);\n    vec3 color3 = CircleLightWithRGB(light3, blue, red, green);\n    \n    // Add up all of the colors.\n    vec3 color_sum = color1 + color2 + color3;\n     \n    // Output to screen.\n    fragColor = vec4(color_sum, 0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}