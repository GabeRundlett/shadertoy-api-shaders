{
    "Shader": {
        "info": {
            "date": "1580564033",
            "description": "Applying KIFS recursively and mixing different recursion depth space.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttdXzN",
            "likes": 1,
            "name": "KIFS experiments 6",
            "published": 3,
            "tags": [
                "raymarching",
                "kifs",
                "recursion"
            ],
            "usePreview": 0,
            "username": "rodgzilla",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define ZPOS -50.\n\nfloat PI = acos(-1.);\n\nfloat wave(float tempo) {\n    return .5 * cos(time * tempo) + .5;\n}\n\nvec3 palette(float x) {\n\n    vec3 a = vec3(1., .7, .7);\n    vec3 b = vec3(.8, 1., 1.);\n    vec3 c = vec3(1., .8, 1.);\n    vec3 d = vec3(1., 1., 1.);\n\n    return a + b * sin(2. * PI * (c + x * d));\n}\n\nmat2 rot2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nvec3 kifs(vec3 p, float it, float s, float tf) {\n    for (float i = 0.; i < it; i++) {\n        p.xy *= rot2d(tf * time);\n        p.yz *= rot2d(tf * time + i);\n        p = abs(p);\n        p -= s;\n        s *= .8;\n    }\n    \n    return p;\n}\n\nfloat sph(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat map(vec3 p) {\n    float d = 1000.;\n    vec3 pk1 = kifs(p, 2., 2., .5); \n    vec3 pk2 = kifs(pk1, 4., 1.5, .3);\n    vec3 pk3 = kifs(pk2, 8., 1.3, .2);\n    \n    float sph1 = sph(pk1, 1.);\n    float sph2 = sph(pk2, 1.);\n    float sph3 = sph(pk3, 1.);\n  \td = min(d,\n            mix(\n                mix(\n                \tsph1, \n\t                sph2, \n    \t            wave(1.)\n       \t\t    ),\n                sph3,\n                wave(.3)\n        )\n    );   \n\n    return d;\n}\n\nfloat rm(vec3 ro, vec3 rd) {\n    float d = 0.;\n        \n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + d * rd;\n        float ds = map(p);\n        \n        if (ds < .001 || ds > 100.) {\n            break;\n        }\n        d += ds;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = map(p) - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat light(vec3 p) {\n\tvec3 lp = vec3(2, 2, ZPOS);\n    vec3 n = normal(p);\n    vec3 tl = normalize(lp - p);\n    float dif = dot(tl, n);\n    float dl = rm(p + .01 * n, tl);\n    \n    if (dl < length(lp - p)) {\n        dif *= .1;\n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\tvec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, ZPOS);\n    vec3 rd = normalize(vec3(uv, 1));\n    float d = rm(ro, rd);\n    vec3 p = ro + d * rd;\n    float dif = light(p);\n    \n  \tcol = dif * palette(.5 * cos(length(p) / 20. + .5) + p.z / 5.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}