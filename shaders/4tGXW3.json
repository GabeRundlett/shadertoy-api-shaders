{
    "Shader": {
        "info": {
            "date": "1486069823",
            "description": "A simple test for anaglyph rendering.\nIt is based on https://www.shadertoy.com/view/Xds3zN from @iq\nIt does no culling.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4tGXW3",
            "likes": 3,
            "name": "test of anaglyph",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "raymarching",
                "distancefields",
                "anaglyph"
            ],
            "usePreview": 0,
            "username": "loic_fejoz",
            "viewed": 830
        },
        "renderpass": [
            {
                "code": "float sum3(vec3 p) {\n  return p.x + p.y + p.z;\n}\n\n//----------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\n/*\nvec3 opTx( vec3 p, mat4 m )\n{\n    vec3 q = invert(m)*p;\n    return primitive(q);\n}\n*/\n\nvec2 map( in vec3 pos )\n{\n  vec2 res = vec2(\n\t\t  sdBox(pos-vec3(1.0, 0.0, 0.0),vec3(0.5, 0.6, 0.7)), 46.9);\n  res = opU( res, vec2( sdTorus(pos-vec3( 0.0,0.5, 0.5), vec2(0.50,0.1) ), 25.0 ) );\n  mat3 rotate90 = mat3(vec3(0, -1, 0), vec3(1, 0, 0), vec3(0, 0, 1));\n  res = opU( res, vec2( sdTorus(rotate90 * (pos-vec3( 0.0,0.5, 1.0)), vec2(0.50,0.1) ), 25.0 ) );\n\n  return opU(res, vec2(sdPlane(pos), 1.0));\n}\n\n// Copy'n paste from https://www.shadertoy.com/view/Xds3zN\n// Then modified from anaglyph\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 50.0;\n\n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n\n\tfloat precis = 0.0001;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.00001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n\n        // material\n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\n        if( m<1.5 )\n        {\n\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lightning\n\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n\n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n\n\t\tfloat occ = calcAO( pos, nor );\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\n\tfloat time = 15.0 + iTime;\n\n\t// Camera\n\tfloat dist = 3.0;\n\tvec3 ro = vec3(\n\t\t\t-0.5+dist*cos(0.1*time + 6.0*mo.x),\n\t\t\t1.0 + 2.0*mo.y,\n\t\t\t-0.5 + dist*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3(0.0);\n\tvec3 eyes_line = normalize(cross(vec3(0.0, 1.0, 0.0), ro));\n\tfloat d_eyes_2 = 0.08;\n\tvec3 ro_left = ro + d_eyes_2 * eyes_line;\n\tvec3 ro_right = ro - d_eyes_2 * eyes_line;\n    vec3 ta_left = ta + d_eyes_2 * eyes_line;\n    vec3 ta_right = ta - d_eyes_2 * eyes_line;\n\n\n\t// camera-to-world transformation\n    mat3 ca_left  = setCamera(ro_left, ta_left, 0.0);\n    mat3 ca_right = setCamera(ro_right, ta_right, 0.0);\n\n    // rays' direction\n\tvec3 rd_left = ca_left * normalize( vec3(p.xy,1.0) );\n\tvec3 rd_right = ca_right * normalize( vec3(p.xy,1.0) );\n\n    // render both eye\n    vec3 col_left = render( ro_left, rd_left );\n    vec3 col_right = render( ro_right, rd_right );\n\n    //vec3 col = vec3( col_right.r, col_left.g, col_left.b);\n    vec3 col = vec3( col_left.r, col_right.g, col_right.b);\n    col = pow( col, vec3(0.4545) );\n\n\tfragColor=vec4( col, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}