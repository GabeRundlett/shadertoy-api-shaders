{
    "Shader": {
        "info": {
            "date": "1653680587",
            "description": "fo shamana",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3cRj",
            "likes": 2,
            "name": "shamana",
            "published": 3,
            "tags": [
                "display"
            ],
            "usePreview": 0,
            "username": "vow",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "// Created by randy read - rcread/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//\tsdSegment from iq -- https://www.shadertoy.com/view/Xlf3zl \nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b ) {\n\tvec2 pa = p - a, ba = b - a;\n\treturn length( pa - ba * clamp( dot( pa, ba ) / dot( ba, ba ), 0.0, 1.0 ) );\n}\n\nfloat segment_dist( vec2 p, vec4 s ) {\n\treturn sdSegment( p, s.xy, s.zw );\n}\n\nfloat abc[26];\n\nvoid init_abc() {\n\tabc[0]\t= .949951171875;\t\tabc[1]\t= .863037109375;\t\tabc[2]\t= .80859375;\t\t\tabc[3]\t= .800537109375;\n\tabc[4]\t= .93359375;\t\t\tabc[5]\t= .88671875;\t\t\tabc[6]\t= .871337890625;\t\tabc[7]\t= .199951171875;\n\tabc[8]\t= .7998046875;\t\t\tabc[9]\t= .051513671875;\t\tabc[10] = .1367950439453125;\tabc[11] = .05859375;\n\tabc[12] = .01263427734375;\t\tabc[13] = .0125885009765625;\tabc[14] = .809326171875;\t\tabc[15] = .94970703125;\n\tabc[16] = .8093414306640625;\tabc[17] = .9497222900390625;\tabc[18] = .992431640625;\t\tabc[19] = .7529296875;\n\tabc[20] = .059326171875;\t\tabc[21] = .011810302734375;\t\tabc[22] = .0124969482421875;\tabc[23] = .0002288818359375;\n\tabc[24] = .19677734375;\t\t\tabc[25] = .796966552734375;\n}\n\nfloat get_abc( float i ) {\n\treturn\ti < 16. ?\t( i < 8. ?\t( i < 4. ?\t( i < 2. ?\t( i <  1. ? abc[ 18] : abc[ 7] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i <  3. ? abc[ 0] : abc[ 12] ) ) :\n\t\t\t\t\t\t\t\t\t\t\t\t( i < 6. ?\t( i <  5. ? abc[ 0] : abc[ 13] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i <  7. ? abc[ 0] : abc[ 0] ) ) ) :\n\t\t\t\t\t\t\t\t\t( i < 12. ?\t( i < 10. ?\t( i <  9. ? abc[ 18] : abc[ 7] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i < 11. ? abc[ 0] : abc[ 12] ) ) :\n\t\t\t\t\t\t\t\t\t\t\t\t( i < 14. ?\t( i < 13. ? abc[ 0] : abc[ 13] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i < 15. ? abc[ 0] : abc[ 0]  ) ) ) ) :\n\t\t\t\t\t\t( i < 24. ?\t( i < 20. ?\t( i < 18. ?\t( i < 17. ? abc[18] : abc[ 7] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i < 19. ? abc[ 0] : abc[12] ) ) :\n\t\t\t\t\t\t\t\t\t\t\t\t( i < 22. ?\t( i < 21. ? abc[ 0] : abc[13] ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i < 23. ? abc[ 0] : abc[ 0] ) ) ) :\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t( i < 25. ? abc[ 0] : abc[ 0] ) );\n}\n\nvec4 sgmt[16];\nvec2 sk = vec2( 2. );\t//\tvec2( 2.5, 2.25 ) for stone age\n\nvoid init_segments( vec4 r ) {\n\tvec2 a=r.xy, c=r.zy, b=(a+c)/2., g=r.xw, d=(a+g)/sk.x, i=r.zw, e=(a+i)/sk.y, f=(c+i)/2., h=(g+i)/2.;\n\tsgmt[ 0]=vec4(a,b); sgmt[ 1]=vec4(b,c); sgmt[ 2]=vec4(d,e); sgmt[ 3]=vec4(e,f);\n\tsgmt[ 4]=vec4(g,h); sgmt[ 5]=vec4(h,i); sgmt[ 6]=vec4(a,d); sgmt[ 7]=vec4(d,g);\n\tsgmt[ 8]=vec4(b,e); sgmt[ 9]=vec4(e,h); sgmt[10]=vec4(c,f); sgmt[11]=vec4(f,i);\n\tsgmt[12]=vec4(a,e); sgmt[13]=vec4(c,e); sgmt[14]=vec4(e,g); sgmt[15]=vec4(e,i);\n}\n\nvoid init_segments( vec2 r ) {\n\tinit_segments( vec4( 0., r.y, r.x, 0. ) );\n}\n\nvec3 segment_display( vec2 p, float a, float line_width, vec3 color ) {\n\tfloat d = iResolution.x, s = .5, pixel_size = 1., c = mod( iTime * 3. / 26., 3. );\n\tfor ( int i = 0 ; i < 16 ; i++ ) {\n\t\tif ( a >= s ) {\n\t\t\td = min( d, segment_dist( p, sgmt[i] ) );\n\t\t\ta -= s;\n\t\t}\n\t\ts *= .5;\n\t}\n    if ( c <= 1. ) {\n        return mix( vec3( 0. ), color, 1. - ( d - line_width ) * 2. / ( line_width * pixel_size  ) );\n    } else if ( c <= 2. ) {\n        return mix( vec3( 0. ), color, 1. - ( d - line_width ) * 2. / ( line_width * pixel_size  ) )\n        \t+ color * 1e3 / ( d * d );\n    } else {\n    \treturn color * 2e1 * line_width * line_width / ( d * d );\n    }\n}\n\nvec3 my_main( vec2 p ) {\n    vec2 gr = vec2( 2., 1. + sqrt( 5. ) );\t//\tgolden ratio\n    float m = .1 * iResolution.y;\n\n\tinit_abc();\n\tinit_segments( floor( m * gr ) );\n\treturn segment_display( floor( p + m - iResolution.xy / 2. ), \n                        \tget_abc( mod( iTime * 3., 26. ) ), \n                            floor( m  / 1e1 ),\n                          \tvec3( 1., fract( p / 3. ) * vec2( .35, .55 ) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor.rgb = my_main( floor( fragCoord.xy ) );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}