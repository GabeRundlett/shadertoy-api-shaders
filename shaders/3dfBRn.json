{
    "Shader": {
        "info": {
            "date": "1587565314",
            "description": "A basic loading indicator, you can change the scale of the ellipse, the width of the border ...",
            "flags": 0,
            "hasliked": 0,
            "id": "3dfBRn",
            "likes": 1,
            "name": "Loading Ellipse",
            "published": 3,
            "tags": [
                "loadingellipse"
            ],
            "usePreview": 0,
            "username": "Paltoquet",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "\n\n/***\nAuthor: Thibault Ober\nThere is no license attach feel free to enjoy  \n***/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float PI = 3.14159;\n    \n    vec3 color = vec3(0.448,0.800,0.785);\n    vec3 background = vec3(0.418,0.421,0.440);\n    \n    float width = iResolution.x;\n    float height = iResolution.y;\n    float ellipseScale = 2.0;\n    \n    float animationSpeed = 0.5;\n\t\n    float x = (fragCoord.x / iResolution.x);\n    float y = (fragCoord.y / iResolution.y);\n    \n    x = (x * 2.0) - 1.0;\n    y = (y * 2.0) - 1.0;\n    \n    float theta = atan(y, x);\n    float tanTheta = y/x;\n\t\n    float a = width / ellipseScale;\n    float b = height / ellipseScale;\n\n    //intersections with the ellipse and the function y = x * tan(theta) https://math.stackexchange.com/questions/22064/calculating-a-point-that-lies-on-an-ellipse-given-an-angle\n    float x1 = a*b / sqrt(b*b + a*a * tanTheta * tanTheta);\n    float y1 = a*b*tanTheta / sqrt(b*b + a*a * tanTheta * tanTheta);\n    \n    vec2 point = vec2(x, y) * max(width, height); // work in a square space\n    vec2 pointOnEllipse = vec2(x1, y1);\n    \n    float distanceToEllipse = abs(length(pointOnEllipse) - length(point)) / max(width, height);\n    float borderWidth = 0.120;\n    float r = 1.0 - (distanceToEllipse / borderWidth);\n    \n    float current = (theta + PI); //[0 - 360]\n    current = mod(current + PI / 2.0, 2.0 * PI);  //offset to put the beguining at the top\n    current = current / (2.0 * PI); //ratio for animation\n    float angular = mod(iTime * animationSpeed, 1.0); \n    if(current < angular){\n    \tfragColor = vec4(r * color, 1.0);\n    } else {\n        fragColor = vec4(r * background, 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}