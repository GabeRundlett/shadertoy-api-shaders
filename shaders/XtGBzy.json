{
    "Shader": {
        "info": {
            "date": "1542891762",
            "description": "Click to reset. Based on https://shadertoy.com/view/Xsd3DB and https://www.shadertoy.com/view/ltVBWm .",
            "flags": 32,
            "hasliked": 0,
            "id": "XtGBzy",
            "likes": 50,
            "name": "Chaos Wave Propagation Effect",
            "published": 3,
            "tags": [
                "water",
                "feedback",
                "multipass"
            ],
            "usePreview": 1,
            "username": "emh",
            "viewed": 2018
        },
        "renderpass": [
            {
                "code": "// Fork of \"Wave Propagation Effect\" by tomkh. https://shadertoy.com/view/Xsd3DB\n// 2018-11-22 10:37:40\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n\n    vec3 e = vec3(vec2(1.)/iResolution.xy,0.);\n    float f = 10.0;\n    float p10 = texture(iChannel0, q-e.zy).z;\n    float p01 = texture(iChannel0, q-e.xz).z;\n    float p21 = texture(iChannel0, q+e.xz).z;\n    float p12 = texture(iChannel0, q+e.zy).z;\n    \n    vec4 w = texture(iChannel0, q);\n    \n    // Totally fake displacement and shading:\n    vec3 grad = normalize(vec3(p21 - p01, p12 - p10, 0.5));\n    vec2 uv = fragCoord.xy*2./iChannelResolution[1].xy + grad.xy*.35;\n    uv = uv * 0.5;\n    vec4 c = texture(iChannel1, uv);\n    c += c * 0.5;\n    c += c * w * (0.5 - distance(q, vec2(0.5)));\n    vec3 lightDir = vec3(0.2, -0.5, 0.7);\n    vec3 light = normalize(lightDir);\n    \n    float diffuse = dot(grad, light);\n    float spec = pow(max(0.,-reflect(light,grad).z),32.);\n    fragColor = mix(c,vec4(.7,.8,1.,1.),.25)*max(diffuse,0.) + spec;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 getTexture(sampler2D sam, vec2 g, vec2 p, vec2 s)\n{\n\tvec2 gp = g+p;\n\t\n\tif (gp.x >= s.x) gp.x = gp.x - s.x;\n\tif (gp.y >= s.y) gp.y = gp.y - s.y;\n\tif (gp.x < 0.0) gp.x = s.x + gp.x;\n\tif (gp.y < 0.0) gp.y = s.y + gp.y;\n\t\n\treturn texture(sam, gp / s);\n}\n\nvec4 getState(sampler2D sam, vec2 g, vec2 s, float n)\n{\n\tvec4 p = vec4(0);\n\tfor (float i=0.;i<n;i++)\n\t{\n        p = getTexture(sam, g, -p.xy, s);\n\t}\n\treturn p;\n}\n\n/*float line(vec2 v, vec2 p0, vec2 p1)\n{\n\tvec2 a = v - p0;\n\tvec2 b = p1 - p0;\n\tfloat h = clamp(dot(a,b)/dot(b,b),0.,1.);\n\treturn length(a-b*h);\n}*/\n\n#define tex(p) getTexture(iChannel0, g, p, s)\n#define emit(v,k) if (length(g-(s * (0.5 + v))) < 5.) f.x = k, f.w = 1.\n\n#define frameStep 10000.\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    float frame = float(iFrame);\n\t//frame = mod(frame, frameStep);\n\t\n\tvec2 s = iResolution.xy;\n\t\n\tvec4 r = tex(vec2(1,0));\n    vec4 t = tex(vec2(0,1));\n    vec4 l = tex(vec2(-1,0));\n    vec4 b = tex(vec2(0,-1));\n        \n    vec2 v = g/s;\n    \n    // pifometre :)\n    vec2 c = sin(v * 6.28318)*.5+.5;\n    float cc = c.x + c.y;\n    \n\tf = getState(iChannel0, g, s, cc * 2. + 1.);\n    \n    f.xy += vec2(r.z - l.z, t.z - b.z);\n    \n\tvec4 dp = (r + t + l + b)/4.;\t\t\t\n\tfloat div = ((l-r).x + (b-t).y)/20.;\t\n\t\n    f.z = dp.z - div;\t\t\t\t\t\n    \n    emit(vec2(-0.45,0.),50.0);\n    emit(vec2(0.45,0.),-50.0);\n    \n    \n\tif (frame < 2. || iMouse.z > 0.) f *= 0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}