{
    "Shader": {
        "info": {
            "date": "1724436420",
            "description": "originals  https://www.shadertoy.com/view/MfsfDj https://www.shadertoy.com/view/XcXBD2",
            "flags": 0,
            "hasliked": 0,
            "id": "lfXBDX",
            "likes": 0,
            "name": "fractalic caleidoscope 2",
            "published": 3,
            "tags": [
                "fractal",
                "caleidoscope"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 81
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t) {\n    vec3 a = vec3(0.2, 0.1, 0.5);\n    vec3 b = vec3(0.2, 0.1, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * sin(6.28318 * (c * t + d)*2.0);\n}\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    vec3 col1 = col;\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n    \n        uv.y -= 1./5.;\n        \n        uv = (uv+t2)/scale;\n        \n        uv = (fract(vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            \n            t2-triangle_wave(uv.yx)-fract(t2/2.)-vec2(floor(-uv.x),0.)\n        ;\n        \n        c1 =\n            \n            max(abs(uv.y+uv.x)/2.,c1)\n        ;\n        c1 =\n            1.-abs(2.*c1-1.)\n            \n        ;\n        col.x =\n            \n            2. - max((abs(uv.y-uv.x))/3.,col.x)\n           \n        ;\n        col =\n            abs(col-(1.-(c1*col.x)));\n        col1 =\n            abs(col1*c1-col-1.).yzx\n          \n        ;\n    }\n    return col1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 6.;\n    \n    \n     vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec2 squareCenter = vec2(0.0, 0.0);\n    float squareSize = 1.0;\n    float numAxes = 5.0;\n    for (float i = 3.1415926535; i < numAxes; i++) {\n        float angle = i * (3.1415926535 / numAxes);\n        vec2 rotatedUV = vec2(cos(angle) * uv.x - sin(angle) * uv.y,\n                               sin(angle) * uv.x + cos(angle) * uv.y);\n  vec2 symUV = fract(rotatedUV * 1.5) - 0.5;\n \n        vec2 scaledUV = uv0 * 0.5 ;\n        float squareUV = max(abs(symUV.x), abs(symUV.y));\n        float d = squareUV * exp(-length(scaledUV) * 0.8); \n        vec3 col = palette(length(scaledUV) + i * 0.3 + iTime * 0.0 + sin(iTime*0. + i));\n        d =  cos(d * 12.0 + iTime*0.) / 1.0 * sin(d * 12.0 + iTime) / 1.0;\n        \n        d = abs(d);\n        \n        d = pow(0.01 / d, 1.2);\n        \n         finalColor += col * d;\n       \n    }\n     uv = (fragCoord)/iResolution.y/t1/2.0;\n  \n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv+finalColor.xy);\n    fragColor = vec4(col1/2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}