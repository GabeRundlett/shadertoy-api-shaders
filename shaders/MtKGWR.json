{
    "Shader": {
        "info": {
            "date": "1474230112",
            "description": "click in cell for fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "MtKGWR",
            "likes": 9,
            "name": "Weird Shapes Grid",
            "published": 3,
            "tags": [
                "grid",
                "shapes",
                "weird"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 694
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nvec3 cell;\n\nconst vec2 gridSize = vec2(5.,4.);//grid size (columns, rows)\n\n// framework ////////////////////////////////////////////\nfloat EncID(vec2 s, vec2 h, vec2 sz) // encode id from coord // s:screenSize / h:pixelCoord / sz=gridSize\n{\n    vec2 c = floor(h/s*sz);\n    return c.y*sz.x+c.x;\n}\n\nvec3 getCell(vec2 s, vec2 g, vec2 sz) // return id / uv // s:screenSize / h:pixelCoord / sz=gridSize\n{\n\tvec2 si = s/sz;\n\tvec2 c = floor(g/si);\n    float id = c.y*sz.x+c.x;\n    vec2 uv = (2.*(g-c*si)-si)/si.y;\n    return vec3(id, uv);\n}\n/////////////////////////////////////////////////////////\n\nfloat shape,camd,time;\n\t\nmat3 RotX(float a){a = radians(a); return mat3(1.,0.,0.,0.,cos(a),-sin(a),0.,sin(a),cos(a));}\nmat3 RotY(float a){a = radians(a); return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\nmat3 RotZ(float a){a = radians(a); return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\n\n// 1ere ligne\nfloat cp0(vec3 p)\n{\n\tp = abs(p);\n\tfloat s = max(p.x, max(p.y, p.z)) - 2.;\n\treturn s;\n}\n\nfloat cp1(vec3 p)\n{\n\tp = abs(p);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp2(vec3 p)\n{\n\tp = abs(p);\n\tp.x += sin(p.z);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp3(vec3 p)\n{\n\tp = abs(p);\n\tp.x += sin(p.z);\n\tfloat y = clamp(log(p.y/0.61), -0.54, 0.52 * sin(p.x) * cos(p.z) * p.y);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp4(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * 5.* sin(p.z), abs(p.y - length(p.xz) * 1.28), length(p.xy));\n\tp.x += sin(p.z);\n\tfloat y = clamp(log(p.y/0.61), -0.54, 0.52 * sin(p.x) * cos(p.z) * p.y);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\n// 2eme ligne\nfloat cp5(vec3 p)\n{\n\tp = abs(p+length(p.xy)*p.z);\n\tfloat s = max(p.x, max(p.y, p.z)) - 2.;\n\treturn s;\n}\n\nfloat cp6(vec3 p)\n{\n\tp = abs(p-length(p.xz)*p.y);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp7(vec3 p)\n{\n\tp = abs(p*p.y*0.2+length(p.xz)*0.5);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp8(vec3 p)\n{\n\tp = abs(p*p.y*0.2+length(p.xz)*0.5);\n\tfloat y = clamp(sin(p.y*(p.z-11.) *0.336), -0.7, 0.7);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp9(vec3 p)\n{\n\tp = abs(p*p.y*0.2+length(p.xz)*0.5);\n\tfloat y = clamp(log(p.z/0.3348), -0.7, 0.7);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\n// 3eme ligne\n\nfloat cp10(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * p.z, abs(p.y - length(p.xz) * 1.28), length(p.xy));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp11(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * sin(p.z), abs(p.x*p.z - p.y + length(p.xz) * 0.5), length(p.xy));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp12(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * sin(p.y), abs(length(p.xz) * 0.3), length(p.xy - p.z));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp13(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * 5.9 *sin(p.y), abs(length(p.xz) * 0.3), length(p.xy - p.z));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nfloat cp14(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * sin(p.z), abs(p.y - length(p.xz) * 1.28), length(p.xy));\n\tp.x += sin(p.z);\n\tp.z *= cos(p.x);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\n// 4eme ligne\n\nfloat cp15(vec3 p)\n{\n\tp.xy = abs(abs(p.xy)-abs(p.z));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.61), -0.54, 0.52 * sin(p.z+p.x) * (0.6-sin(p.y/0.31)));\n\tfloat s = max(p.x+y, max(p.y, p.z+y)+y) - 2.;\n\treturn s;\n}\n\nfloat cp16(vec3 p)\n{\n\tp.xy = abs(abs(p.xy)-abs(p.z));\n\tp = vec3(atan(p.x,p.z) / 3.1415 * 5.9 *sin(p.y), abs(length(p.xz) * 0.3), length(p.xy - p.z));\n\tp.x += sin(p.z);\n\tp.z += cos(p.x);\n\tfloat y = clamp(log(p.y/0.61), -0.54, 0.52 * sin(p.z+p.x) * (0.6*sin(p.y/0.31)));\n\tfloat s = max(p.x+y, max(p.y, p.z+y)+y) - 2.;\n\treturn s;\n}\n\n\nfloat cp17(vec3 p)\n{\n\tp.xy = abs(abs(p.xy)-abs(p.z));\n\tp = vec3(atan(p.x,p.z) / 3.1415 * 5.9 *sin(p.y), abs(length(p.xz) * 0.3), length(p.xy - p.z));\n\tp.xy += sin(p.z);\n\tfloat y = clamp(log(p.y/0.61), -0.54, 0.52 * sin(p.z+p.x) * (0.6*sin(p.y/0.31)));\n\tfloat s = max(p.x+y, max(p.y, p.z+y)+y) - 2.;\n\treturn s;\n}\n\nfloat cp18(vec3 p)\n{\n\tp.xy = abs(abs(p.xy)-abs(p.z));\n\tp = vec3(atan(p.x,p.z) / 3.1415 * sin(p.y+p.x), abs(length(p.xz) * log(p.z*0.31)), length(p.xy - p.z)*1.31);\n\tfloat y = clamp(log(p.y/0.1), -0.54, 0.52 * sin(p.z+p.x) * (0.6*sin(p.y/0.31)));\n\tfloat s = max(p.x+y, max(p.y, p.z+y)+y) - 2.;\n\treturn s;\n}\n\nfloat cp19(vec3 p)\n{\n\tp = abs(p);\n\tp = vec3(atan(p.x,p.z) / 3.1415 * sin(p.z), abs(p.y - length(p.xz) * 1.28), length(p.xy));\n\tp.x += sin(p.z);\n\tp.z *= cos(p.x+p.y);\n\tfloat y = clamp(log(p.y/0.31), -0.64, 0.12);\n\tfloat s = max(p.x+y, max(p.y, p.z)+y) - 2.;\n\treturn s;\n}\n\nvec4 df(vec3 p)\n{\n    vec4 plane = vec4(p.y + 10., vec3(0));\n\tp *= RotX(time * 100.) * RotY(time * 75.) * RotZ(time * 50.);\n\t\n\tfloat cube = 1e5;\n\t\n\tif (cell.x == 0.) cube = cp0(p);\n\tif (cell.x == 1.) cube = cp1(p);\n\tif (cell.x == 2.) cube = cp2(p);\n\tif (cell.x == 3.) cube = cp3(p);\n\tif (cell.x == 4.) cube = cp4(p);\n\t\n\tif (cell.x == 5.) cube = cp5(p);\n\tif (cell.x == 6.) cube = cp6(p);\n\tif (cell.x == 7.) cube = cp7(p);\n\tif (cell.x == 8.) cube = cp8(p);\n\tif (cell.x == 9.) cube = cp9(p);\n\t\n\tif (cell.x == 10.) cube = cp10(p);\n\tif (cell.x == 11.) cube = cp11(p);\n\tif (cell.x == 12.) cube = cp12(p);\n\tif (cell.x == 13.) cube = cp13(p);\n\tif (cell.x == 14.) cube = cp14(p);\n\t\n\tif (cell.x == 15.) cube = cp15(p);\n\tif (cell.x == 16.) cube = cp16(p);\n\tif (cell.x == 17.) cube = cp17(p);\n\tif (cell.x == 18.) cube = cp18(p);\n\tif (cell.x == 19.) cube = cp19(p);\n\t\n\tif (cube < plane.x)\n\t\treturn vec4(cube);\n\t\t\n\treturn plane;\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy).x - df(pos-eps.xyy).x,\n\t    df(pos+eps.yxy).x - df(pos-eps.yxy).x,\n\t    df(pos+eps.yyx).x - df(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 n, vec3 lp, vec3 lc, float li)\n{\n\tvec3 p = ro + rd * d;\n\tvec3 ld = normalize(lp-p);\n\tvec3 refl = reflect(rd,n);\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 );\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. );\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.);\n\treturn ((diff + fre + spe) * lc * li + spe);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 g = fragCoord.xy;\n    vec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)/si.y;\n\n\tcell = getCell(si,g,gridSize);\n    \n    if(iMouse.z>0.) \n        cell = vec3(EncID(si,iMouse.xy,gridSize), uv); // cell.x => cell id, cell.yz => central uv of the cell\n        \n    time = iTime;\n\tshape = 0.3;\n    camd = 8.;\n\t\n\tvec3 ro = vec3(cos(-time), sin(2.2), sin(-time)) * camd;\n  \tvec3 rov = normalize(vec3(0)-ro);\n    vec3 u = normalize(cross(vec3(0,1,0),rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + cell.y*u + cell.z*v);\n    \n    float s = 1.;float d = 1.;\n    for(int i=0;i<250;i++)\n    {      \n        // from shane shader Maze Lattice https://www.shadertoy.com/view/llGGzh\n       \tif (abs(s) < 0.005*(d*.25 + 1.)||d > 60.) break;\n        s = df(ro+rd*d).x;\n        d += s * 0.2;\n    }\n\t\n\tvec3 n = nor(ro+rd*d, 0.1);\n\t\n\tvec3 lp0 = vec3(cos(time), 10., sin(time)); lp0.xz *= 20.;\n\tvec3 lp1 = vec3(cos(time + 1.6), 10., sin(time + 1.6)); lp1.xz *= 15.;\n\tvec3 lp2 = vec3(cos(time + 3.12), 10., sin(time + 3.12)); lp2.xz *= 10.;\n\t\n\tvec3 ca = shade(ro, rd, d, n, lp0, vec3(1,0.49,0.22), 3.5);\n\tvec3 cb = shade(ro, rd, d, n, lp1, vec3(0,0.33,0.56), 3.5);\n\tvec3 cc = shade(ro, rd, d, n, lp2, vec3(0,0.69,0.31), 3.5);\n\n\tfragColor.rgb = (ca+cb+cc)/3.*(exp(-0.001*d*d));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}