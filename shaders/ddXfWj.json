{
    "Shader": {
        "info": {
            "date": "1689242592",
            "description": "An auto-VJ utilizing the audio spectrum over time to draw passing surfaces. One could potentially use such passing sound textures as triggers for a more complex design, e.g. an audio-responsive train ride.\n\n- Use with music in iChannel0 of Buffer A - ",
            "flags": 96,
            "hasliked": 0,
            "id": "ddXfWj",
            "likes": 2,
            "name": "Audio Passage",
            "published": 3,
            "tags": [
                "2d",
                "music",
                "buffer"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "// Audio Passage 0.8.230713 by QuantumSuper\n// 2.5d buffered auto-vj utilizing the audio spectrum over time to draw passing surfaces\n// \n// - use with music in iChannel0 of Buffer A -\n\nvec3 getCol(float id){ //color definitions, for triplets\n    vec3 setCol = vec3(0);\n    id = mod(id,15.);\n         if (id< 1.) setCol = vec3(244,  0,204); //vw2 pink\n    else if (id< 2.) setCol = vec3(  0,250,253); //vw2 light blue\n    else if (id< 3.) setCol = vec3( 30, 29,215); //vw2 blue\n    else if (id< 4.) setCol = vec3(252,157,  0); //miami orange\n    else if (id< 5.) setCol = vec3( 26,246,138); //miami green\n    else if (id< 6.) setCol = vec3(131, 58,187); //nordic violet\n    else if (id< 7.) setCol = vec3(231, 15, 20); //arena red\n    else if (id< 8.) setCol = vec3( 35, 87, 97); //arena dark blue\n    else if (id< 9.) setCol = vec3(103,211,225); //arena blue\n    else if (id<10.) setCol = vec3(241,204,  9); //bambus2 yellow\n    else if (id<11.) setCol = vec3( 22,242,124); //bambus2 green\n    else if (id<12.) setCol = vec3( 30,248,236); //magic turquoise\n    else if (id<13.) setCol = vec3( 28,142, 77); //matrix green\n    else if (id<14.) setCol = vec3( 66,120, 91); //matrix green 2\n    else if (id<15.) setCol = vec3(173,  0, 27); //matrix red\n    return setCol/256.;\n}\n\nfloat aaStep( float fun){return smoothstep( fwidth(fun), .0, fun);} //simple antialiasing\n\nfloat sdBox( vec2 p, vec2 b){ //source: https://iquilezles.org/articles/distfunctions2d/\n    vec2 d = abs(p) - b;\n    return length(max(d,.0)) + min(max(d.x,d.y),.0);\n}\n\nfloat sdSegment( vec2 p, vec2 a, vec2 b){//source: https://iquilezles.org/articles/distfunctions2d/\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n\n    // Read compression values from buffer\n    vec4 fft, ffts;\n    for (int n=0;n<4;n++) \n        fft[n] = getDat( iChannel0, vec2( mod(float(iFrame),iResolution.x), n)).a,\n        ffts[n] = getDat( iChannel0, vec2( mod(float(iFrame),iResolution.x), n+4)).a;\n    if (getDat( iChannel0, vec2( mod(float(iFrame),iResolution.x), 1)).b > getDat( iChannel0, vec2( mod(float(iFrame-1),iResolution.x), 1)).b)\n        fft.x *= 10.; //amplify when 44.1kHz/512. to 44.1kHz/512.*2. amplitude is larger than buffered maximum amplitude\n\n    // Prepare view\n    vec2 uv = (2.*fragCoord-iResolution.xy) / max(iResolution.x,iResolution.y); //long edge -1 to 1\n    vec2 uv0 = uv; \n    uv.x = abs(uv.x); //1 to 0 to 1\n    uv.y /= uv.x*2.+.002; //approx. -.5 to -inf to inf to .5\n    float tmp = .93+.07*cos(iTime*.123)*sin(iTime*.456);\n    uv *= tmp, uv0 *= tmp; //scale over time\n    \n    // Front \"landscape\" layer\n    vec3 col = vec3(0.);\n    for (int n=0;n++<3;)\n        col.r += getDatN( iChannel0, vec2( mod( float(-pow(uv.x * iResolution.x,.6))*.5 + mod(float(iFrame)+pow(.105 * iResolution.x,.6)*.5,iResolution.x), iResolution.x) , n+1));\n    col.r = clamp( (pow((col.r/3.-.98)/.02,9.)-.75*uv.y)*4.*getDat( iChannel0, fragCoord).r, .0, 1.);\n    \n    // Mid \"landscape\" layer \n    tmp = mod( -pow(uv.x * iResolution.x,1e-3)*7e4+ mod(float(iFrame)+pow(.09 * iResolution.x,1e-3)*7e4,iResolution.x), iResolution.x);\n    col.g = (getDat( iChannel0, vec2( tmp, 1.)).a - .33) / .67;\n    col.g = clamp( (col.g*col.g - uv.y*3.) * getDat( iChannel0, vec2( tmp, (.4999+.5*cos(uv.y*3.))*iResolution.y)).r * 2., .0, 1.);\n    \n    // Back \"landscape\" layer\n    tmp = mod( -pow(uv.x * iResolution.x,1e-5)*13e6 + mod( float(iFrame)+pow(.09 * iResolution.x,1e-5)*13e6, iResolution.x), iResolution.x);\n    col.b = getDat( iChannel0, vec2( tmp, 7.)).a;\n    col.b = clamp( clamp( (col.b*col.b*col.b-uv.y*.6) * getDat( iChannel0, vec2( tmp, (.4999+.5*sin(uv.y*6.))*iResolution.y)).r, .0, 1.) * 1.3 - max(col.r,col.g), .0, 1.);\n    \n    // \"Hallway\" geometry \n    tmp = 1.-aaStep( sdBox( uv, vec2(1)));\n    float amp = min( \n        max( \n            aaStep( sdBox( uv, vec2(1.,.7))), //triangle shapes\n            sign(uv.y)*tmp), //top cutout\n        (1.-aaStep( sdBox( uv0, vec2(.095,.16))))); //center rectangular\n    if (uv0.y<-.16) amp *= (1.-tmp); //bottom delete\n    col *= amp; //delete col    \n    col += ((1.-amp) *.4 //hallway\n        + tmp * getDat( iChannel0, vec2(mod(float(iFrame),iResolution.x), (1.4+uv0.y*2.5)*iResolution.y)).r) //floor texture\n        * getDat( iChannel0, vec2(mod(float(iFrame),iResolution.x),mod((1.2+uv0.y*2.),1.)*iResolution.y)).b * (.017 + .08*fft.xyz*fft.xyz) * 1.8; //overall texture\n    col *= 1.-aaStep( sdBox( uv0, vec2(.05,.11))-.02); //delete col, \"door\"\n    \n    // Smiley\n    uv0 *= smoothstep( .0, .33, ffts.w); //scale\n    col += max( \n        .001 / length( vec2( abs(uv0.x), uv0.y) - vec2( .018, .05)), //\"eyes\"\n        .001 / sdSegment( uv0+vec2( .0, .013*cos(uv0.x*42.+3.142*(1.-max(fft.x,fft.y)))), vec2(-.02,.01), vec2(.02,.01))) //\"mouth\"\n        * (1.-fft.x) * vec3(ffts.x<=ffts.y,ffts.y<=ffts.z,ffts.z<=ffts.x); //color   \n    \n    // Remap colors\n    float colId = 3. * floor(mod(127./60./16.*iTime,5.)); //color set id \n    col = mat3(getCol(colId+0.),getCol(colId+1.),getCol(colId+2.)) * col;\n    col = (col + (fft.x-1.) * smoothstep(.1,.0,length(col))) * 1.7; //flashes \n    fragColor = vec4( col, 1.); //output \n    \n    // Utility\n    //fragColor = vec4( getDat( iChannel0, fragCoord).rrr, 1); //audio spectrum over time\n    //fragColor = vec4( getDat( iChannel0, fragCoord).ggg, 1); //wave form over time\n    //fragColor = vec4( getDat( iChannel0, fragCoord).bbb, 1); //average amplitude over time\n    //fragColor = vec4( getDat( iChannel0, vec2(fragCoord.x,fragCoord.y/iResolution.y*8.)).aaa, 1); //compressed over time\n    //fragColor = vec4(step(.0,(fragCoord.y/iResolution.y-.9)),vec2(dot(step(.0,fft-abs(floor(fragCoord.x/iResolution.x*4.-vec4(0,1,2,3)))-fragCoord.y/iResolution.y/.9),vec4(1))),1); //final compression data\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// COMMON (0.1) of Audio Passage Of Sound by QuantumSuper\n// \n// - use with audio in iChannel0 of Buffer A -\n\n#define getDat( buf, addr) texelFetch( buf, ivec2(addr), 0)\n#define getDatN( buf, addr) getDat( buf, addr).r / getDat( buf, addr).b",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// BUFFER A (0.1) of Audio Passage by QuantumSuper\n// audio spectrum over time\n// red: amplitude by brightness of frequency by y-axis at time by x-axis\n// green: waveform by brightness of frequency by y-axis at time by x-axis\n// blue: average amplitude by brightness of frequency by y-axis at time by x-axis\n// alpha: (fft,ffts,0..0)\n// \n// - use with audio in iChannel0 of Buffer A -\n\n#define TRACKDURATIONINFRAMES 3600.\nvec4 fft, ffts; //compressed frequency amplitudes\n\nvoid compressFft(){ //v1.2, compress sound in iChannel0 to simplified amplitude estimations by frequency-range\n    fft = vec4(0), ffts = vec4(0);\n\n\t// Sound (assume sound texture with 44.1kHz in 512 texels, cf. https://www.shadertoy.com/view/Xds3Rr)\n    for (int n=0;n<3;n++) fft.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //bass, 0-517Hz, reduced to 0-258Hz\n    for (int n=6;n<8;n++) ffts.x  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech I, 517-689Hz\n    for (int n=8;n<14;n+=2) ffts.y  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech II, 689-1206Hz\n    for (int n=14;n<24;n+=4) ffts.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //speech III, 1206-2067Hz\n    for (int n=24;n<95;n+=10) fft.z  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //presence, 2067-8183Hz, tenth sample\n    for (int n=95;n<512;n+=100) fft.w  += texelFetch( iChannel0, ivec2(n,0), 0 ).x; //brilliance, 8183-44100Hz, tenth2 sample\n    fft.y = dot(ffts.xyz,vec3(1)); //speech I-III, 517-2067Hz\n    ffts.w = dot(fft.xyzw,vec4(1)); //overall loudness\n    fft /= vec4(3,8,8,5); ffts /= vec4(2,3,3,23); //normalize\n\t\n\t//for (int n=0;n++<4;) fft[n] *= 1. + .3*pow(fft[n],5.); fft = clamp(fft,.0,1.); //limiter? workaround attempt for VirtualDJ\n}\n\nfloat estMax(float p){ //estimate changing maximum over time of sound texel by weighted amplitude tracking\n    float curVal = clamp( getDat( iChannel0, vec2( p/iResolution.y*512., 0)).x, .0, 1.); //current amplitude\n    float maxVal = clamp( getDat( iChannel1, vec2( (mod(float(iFrame-1)+.001,iResolution.x)), p)).z, .0, 1.); //latest max amp\n    \n    if (curVal >= maxVal) maxVal = 0.; //check for new max    \n    \n    if (maxVal != 0.) //avoid uninitialized state & deprecated maxVal\n        curVal *=    1./TRACKDURATIONINFRAMES,\n        maxVal *= 1.-1./TRACKDURATIONINFRAMES;\n  \n    return maxVal+curVal; //returns value between 0 and 1\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    compressFft(); //initializes fft, ffts\n    fragColor = (mod(fragCoord.x-float(iFrame),iResolution.x)<1.)? vec4( \n        getDat( iChannel0, vec2( fragCoord.y/iResolution.y*512., 0)).x, //amplitudes\n        getDat( iChannel0, vec2( fragCoord.y/iResolution.y*512., 1)).x, //waveform\n        estMax( fragCoord.y), //average amplitude\n        (fragCoord.y<4.)? fft[int(fragCoord.y)] : (fragCoord.y<8.)? ffts[int(fragCoord.y)-4] : 0.) //compressed amplitude\n        : getDat( iChannel1, fragCoord); //carry over \"long-term\" memory    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 33941,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/notmytype030/sweating-on-the-dancefloor"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}