{
    "Shader": {
        "info": {
            "date": "1590281444",
            "description": "angel 3",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd2fRG",
            "likes": 3,
            "name": "angel 3",
            "published": 3,
            "tags": [
                "the",
                "mirage"
            ],
            "usePreview": 0,
            "username": "Aman",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "\n// S/o https://www.shadertoy.com/view/MlcGRf for the dodecahedron SDF\n// & mercury.sexy for these ops\n\nvec2 opU2(vec2 x, vec2 y) {\n    return vec2(min(x.x, y.x), x.x < y.x ? x.y : y.y);\n}\n\nvec3 polar(vec3 cart) {\n    return vec3(length(cart), atan(cart.y, cart.z), atan(cart.z, cart.x));\n}\n\nvoid pR(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat fOpIntersectionRound(float a, float b, float r) {\n    vec2 u = max(vec2(r + a,r + b), vec2(0));\n    return min(-r, max (a, b)) + length(u);\n}\n\nfloat fOpDifferenceRound (float a, float b, float r) {\n    return fOpIntersectionRound(a, -b, r);\n}\n\nfloat fOpIntersectionChamfer(float a, float b, float r) {\n    return max(max(a, b), (a + r + b)*sqrt(0.5));\n}\n\n// Difference can be built from Intersection or Union:\nfloat fOpDifferenceChamfer (float a, float b, float r) {\n    return fOpIntersectionChamfer(a, -b, r);\n}\n\nfloat fOpPipe(float a, float b, float r) {\n    return length(vec2(a, b)) - r;\n}\n\n\n\n#define GDFVector3 normalize(vec3(1, 1, 1 ))\n#define GDFVector4 normalize(vec3(-1, 1, 1))\n#define GDFVector5 normalize(vec3(1, -1, 1))\n#define GDFVector6 normalize(vec3(1, 1, -1))\n\n#define GDFVector7 normalize(vec3(0, 1, PHI+1.))\n#define GDFVector8 normalize(vec3(0, -1, PHI+1.))\n#define GDFVector9 normalize(vec3(PHI+1., 0, 1))\n#define GDFVector10 normalize(vec3(-PHI-1., 0, 1))\n#define GDFVector11 normalize(vec3(1, PHI+1., 0))\n#define GDFVector12 normalize(vec3(-1, PHI+1., 0))\n\n#define GDFVector13 normalize(vec3(0, PHI, 1))\n#define GDFVector14 normalize(vec3(0, -PHI, 1))\n#define GDFVector15 normalize(vec3(1, 0, PHI))\n#define GDFVector16 normalize(vec3(-1, 0, PHI))\n#define GDFVector17 normalize(vec3(PHI, 1, 0))\n#define GDFVector18 normalize(vec3(-PHI, 1, 0))\n\n#define fGDFBegin float d = 0.;\n#define fGDF(v) d = max(d, abs(dot(p, v)));\n#define fGDFEnd return d - r;\n\n#define PI 3.14159265359\n#define PHI (1.618033988749895)\n#define TAU 6.283185307179586\n\nfloat fDodecahedron(vec3 p, float r) {\n    fGDFBegin\n    fGDF(GDFVector13) fGDF(GDFVector14) fGDF(GDFVector15) fGDF(GDFVector16)\n    fGDF(GDFVector17) fGDF(GDFVector18)\n    fGDFEnd\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n    float angle = 2.0*PI/repetitions;\n    float a = atan(p.y, p.x) + angle/2.;\n    float r = length(p);\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*r;\n    // For an odd number of repetitions, fix cell index of the cell in -x direction\n    // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n    if (abs(c) >= (repetitions/2.0)) c = abs(c);\n    return c;\n}\n\nvec2 sdf(vec3 _p) {\n    vec3 p = _p;\n    p.y -= 0.2;\n    pR(p.yz, 0.7);\n    vec3 pol = polar(p);\n    float n = texture(iChannel0, pol.yz * 0.06 + vec2(0., 1.0 * 0.1)).r ;\n    float n2 = texture(iChannel0, pol.zy * (1.0 + n) + vec2(0., 1.0 * 0.2)).r;\n\n    vec3 pol2 = pol;\n    pol2.yz = mod(pol2.yz * 1.0, PI * 4.0);\n    vec3 dp = p;\n    dp.y -= 0.5;\n    pModPolar(dp.yx,2.0);\n    pR(dp.xz, sin(iTime));\n    vec2 sp = vec2(fDodecahedron(dp, 0.44), 1.0);\n    \n    pR(dp.yz, cos(iTime));\n    sp.x = fOpDifferenceRound(fDodecahedron(dp, 0.5), sp.x, 0.1);\n    \n    pR(dp.yz, sin(-iTime));\n    sp.x = fOpDifferenceRound(fDodecahedron(dp, 0.5), sp.x, 0.1);\n    \n    sp.x = fOpDifferenceRound(sp.x, sp.x * 1.34 * pol.r, 0.);\n\n    float n3 = texture(iChannel0, fract(pol.xz * 0.4 + iTime * 0.1)).r;\n    n3 = n3 * n3 * n3;\n    vec2 mirror = vec2(_p.y + 0.1 + n3 * 0.1, 0.0);\n    mirror.x = fOpIntersectionRound(length(p) - 0.8, mirror.x, 0.06);\n    \n    vec2 ring = vec2(length(p - vec3(0.0, -0.3, 0.0)) - 0.79, 1.0);\n    ring.x = fOpPipe(ring.x, mirror.x, 0.1);\n    \n    return opU2(sp, opU2(ring, mirror));\n}\n\n\nbool march(vec3 ro, vec3 rd, out vec3 hitPos, out float mat) {\n    float t = 0.0;\n    for(int i = 0; i < 50; i++) {\n        vec2 d = sdf(ro);\n        t += d.x;\n        ro += rd * d.x;\n        if(d.x < 0.001) {\n            hitPos = ro;\n            mat = d.y;\n            return true;\n        }\n    }\n    return false;\n}\n\nvec3 estimateNormal(vec3 p) {\n    float h = 0.0001;\n    vec2 k = vec2(1.0, -1.0);\n    return normalize(\n        k.xyy * sdf(p + h * k.xyy).x +\n        k.yxy * sdf(p + h * k.yxy).x +\n        k.yyx * sdf(p + h * k.yyx).x +\n        k.xxx * sdf(p + h * k.xxx).x\n    );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = -1.0 + 2.0 * fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.3, -1.3);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    vec3 hitPos;\n    float mat;\n    \n    vec3 col = vec3(1.0);\n    if(march(ro, rd, hitPos, mat)) {\n        vec3 normal = estimateNormal(hitPos);\n        if(mat < 0.5) {\n          //  col = vec3(1.0, 0.0, 0.0);\n            vec3 refl = reflect(rd, normal);\n            vec3 reflHit;\n            if(march(hitPos + refl * 0.1, refl, reflHit, mat)) {\n                \n                col = estimateNormal(reflHit) * 0.5 + 0.5;\n                col.rb *= 2.0;\n                col.r = sqrt(col.r);\n                col = mix(col, vec3(1.0), 0.1);\n                //col = vec3(1.0);\n            } else {\n                col = vec3(0.0);\n                \n            }\n        } else {\n        \n            col = estimateNormal(hitPos) * 0.5 + 0.5;\n            col.rb *= 2.0;\n            float spec =  pow(clamp(dot(normal, normalize(vec3(1.0, 1.5, -1.0) - hitPos)), 0.0, 1.0), 4.0);\n            col = mix(col, vec3(1.0), spec * 4.0);\n            col.r = sqrt(col.r);\n            col.g *= 0.5;\n        }   \n        \n       \n        \n        \n    \n    }\n    \n    //if(time < 0.01) { col = vec3(1.0); }\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}