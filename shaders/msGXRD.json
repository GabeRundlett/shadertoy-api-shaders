{
    "Shader": {
        "info": {
            "date": "1680782276",
            "description": "CC0: Logarithmic spiral of spheres\nMeh, been struggling coming up with shaders that\nTwitter art came to the rescue and this inspired me:\nhttps://twitter.com/MaxDrekker/status/1643694297605103630?s=20\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "msGXRD",
            "likes": 34,
            "name": "Logarithmic spiral of spheres",
            "published": 3,
            "tags": [
                "spiral"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "// CC0: Logarithmic spiral of spheres\n//  Meh, been struggling coming up with shaders that\n//  Twitter art came to the rescue and this inspired me:\n//  https://twitter.com/MaxDrekker/status/1643694297605103630?s=20\n\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float ExpBy = log2(1.2);\n\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = TAU/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\nfloat forward(float l) {\n  return exp2(ExpBy*l);\n}\n\nfloat reverse(float l) {\n  return log2(l)/ExpBy;\n}\n\nvec3 sphere(vec3 col, mat2 rot, vec3 bcol, vec2 p, float r, float aa) {\n  vec3 lightDir = normalize(vec3(1.0, 1.5, 2.0));\n  lightDir.xy *= rot;\n  float z2 = (r*r-dot(p, p));\n  vec3 rd = -normalize(vec3(p, 0.1));\n  if (z2 > 0.0) {\n    float z = sqrt(z2);\n    vec3 cp = vec3(p, z);\n    vec3 cn = normalize(cp);\n    vec3 cr = reflect(rd, cn);\n    float cd= max(dot(lightDir, cn), 0.0);\n    vec3 cspe = pow(max(dot(lightDir, cr), 0.0), 10.0)*tanh(8.0*(bcol))*0.5;\n    vec3 ccol = mix(0.2, 1.0, cd*cd)*bcol;\n    ccol += cspe;\n    float d = length(p)-r;\n    col = mix(col, ccol, smoothstep(0.0, -aa, d));\n  }\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float aa = 4.0/RESOLUTION.y;\n\n  float ltm = 0.75*TIME;\n  mat2 rot0 = ROT(-0.125*ltm); \n  p *= rot0;\n  float mtm = fract(ltm);\n  float ntm = floor(ltm);\n  float gd = dot(p, p);\n  float zz = forward(mtm);\n\n  vec2 p0 = p;\n  p0 /= zz;\n\n  float l0 = length(p0);\n  \n  float n0 = ceil(reverse(l0));\n  float r0 = forward(n0);\n  float r1 = forward(n0-1.0);\n  float r = (r0+r1)/2.0;\n  float w = r0-r1;\n  float nn = n0;\n  n0 -= ntm;\n\n  vec2 p1 = p0;\n  float reps = floor(TAU*r/(w));\n  mat2 rot1 = ROT(0.66*n0); \n  p1 *= rot1;\n  float m1 = modPolar(p1, reps)/reps;\n  p1.x -= r;\n  \n  vec3 ccol = (1.0+cos(0.85*vec3(0.0, 1.0, 2.0)+TAU*(m1)+0.5*n0))*0.5;\n  vec3 gcol = (1.5+cos(0.5*vec3(0.0, 1.0, 2.0) + 0.125*ltm))*0.005;\n  mat2 rot2 = ROT(TAU*m1);\n\n  vec3 col = vec3(0.0);\n  float fade = 0.5+0.5*cos(TAU*m1+0.33*ltm);\n  col = sphere(col, rot0*rot1*rot2, ccol*mix(0.25, 1.0, sqrt(fade)), p1, mix(0.125, 0.5, fade)*w, aa/zz);\n  col += gcol*vec3(0.25, 0.125, 1.0)/max(gd, 0.0015);\n  col -= 0.1*vec3(0.0, 1.0, 2.0).zyx*(length(pp)+0.25);\n  col = clamp(col, 0.0, 1.0);\n  col = sqrt(col);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, p);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}