{
    "Shader": {
        "info": {
            "date": "1550866616",
            "description": "Thank for the lunch talk :-D",
            "flags": 0,
            "hasliked": 0,
            "id": "wsXXz7",
            "likes": 1,
            "name": "Lunch Study from antovsky",
            "published": 3,
            "tags": [
                "texture",
                "learn",
                "lunch"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "// tutorial credit: antovsky\n// retyped by starea\n\n#define DEBUG 0\n#define MODE 3\n\nfloat noise(vec2 p) {\n\tvec2 s = vec2(1.0);\n    p *= s;\n    vec2 f = fract(p);\n    vec2 i = floor(p);\n    \n    f = smoothstep(0.0, 1.0, f);\n    \n    vec3 col = vec3(hash12(i));\n    \n    vec2 dx = vec2(1.0, 0.0);\n    vec2 dy = vec2(0.0, 1.0);     \n    float nx0 = mix(hash12(i), hash12(i + dx), f.x);\n    float nx1 = mix(hash12(i + dy), hash12(i + dx + dy), f.x); \n    float n = mix(nx0, nx1, f.y);\n    return n;\n    \n}\n\nvec3 fbm(vec2 p) {\n\tfloat n = (noise(p * 2.0) + 1.0) * 0.5;\n    n += noise(p * 4.0) * 0.5;\n    n += noise(p * 8.0) * 0.25;\n    n += noise(p * 16.0) * 0.125;\n    n += noise(p * 32.0) * 0.125 * 0.5;\n    n += iMouse.x / iResolution.x;\n    vec3 col = mix(vec3(0.4, 0.3, 0.2), vec3(0.9, 0.9, 1.0), sin(n * 10.0));\n    //vec3 col = mix(vec3(1.0, 0.7, 0.2), vec3(0.9, 0.9, 1.0), sin(n * 10.0));\n    col = pal(n,  vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15 + 0.1 * cos(iTime), 0.20  + 0.1 * sin(iTime)) );\n    return col;\n}\n\nvec3 texmap(vec2 p) {\n\tvec2 s = vec2(5.0);\n    p *= s;\n    \n    vec2 f = fract(p);\n    vec2 i = floor(p);\n    \n    float d_res = 100000.0;\n   \tvec3 col = vec3(1.0);\n    \n    // boundary condition handling\n    for (int x = -1; x <= 1; ++x)\n        for (int y = -1; y <= 1; ++y) {\n            vec2 li = i + vec2(x, y); // local i\n            vec2 c = li + 0.5 + (hash22(li) * 2.0 - 1.0) * 0.5;\n            float d = length(p - c) - mix(0.1, 0.25, hash12(li)); // 1.5 voronoi, 0.5 sphere, 0.25 dots, 0.05\n            if (d < d_res) {\n            \td_res = d;\n                col = vec3(1.0 - smoothstep(-0.01, 0.01, d));\n                col *= hash32(li);\n            }\n        }\n    \n    #if DEBUG\n    \tcol += vec3(hash12(i));\n    #endif\n    \n    return col;\n}\n\n\nvec3 texmap0(vec2 p) {\n \tvec2 s = vec2(5.0);\n    p *= s;\n    \n    vec2 f = fract(p);\n    vec2 i = floor(p);\n    f += vec2(-0.5) + (hash22(i) * 2.0 - 1.0) * 0.25;\n    \n    float d = length(f) - mix(0.1, 0.25, hash12(i));\n    vec3 col = vec3(1.0 - smoothstep(-0.01, 0.01, d));\n    \n    col *= vec3(hash32(i));\n    return col;\n}\n\n\nvec3 texmap3(vec2 p) {\n\tvec2 s = vec2(5.0);\n    vec2 f = fract(p * s);\n    vec2 where = p * s - f;\n    float off = where.x - 8.0 * where.y;\n    f += vec2(-0.5);\n    \n    float d = length(f) - 0.25 - max(0.0, sin(iTime - 0.1 * off) - 0.8);\n    return vec3(1.0 - smoothstep(-0.01, 0.01, d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    // Time varying pixel color\n    \n    vec3 col =\n    #if MODE == 0\n        texmap0(uv);\n    #elif MODE == 1\n        texmap(uv);\n    #elif MODE == 2\n        vec3(noise(uv));\n    #elif MODE == 3\n    \tfbm(uv);\n   \t#else\n    \ttexmap3(uv);\n    #endif\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// from Dave's Hash without sine: https://www.shadertoy.com/view/4djSRW\n\n#define ITERATIONS 4\n\n\n// *** Change these to suit your range of random numbers..\n\n// *** Use this for integer stepped ranges, ie Value-Noise/Perlin noise functions.\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n// For smaller input rangers like audio tick or 0-1 UVs use these...\n//#define HASHSCALE1 443.8975\n//#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n//#define HASHSCALE4 vec3(443.897, 441.423, 437.195, 444.129)\n\n\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//###############################################################################\n\n//----------------------------------------------------------------------------------------\nfloat hashOld12(vec2 p)\n{\n    // Two typical hashes...\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // This one is better, but it still stretches out quite quickly...\n    // But it's really quite bad on my Mac(!)\n    //return fract(sin(dot(p, vec2(1.0,113.0)))*43758.5453123);\n\n}\n\nvec3 hashOld33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}