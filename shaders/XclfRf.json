{
    "Shader": {
        "info": {
            "date": "1724182858",
            "description": "lots of 'em\nand they change sizes\nit's trippy now",
            "flags": 0,
            "hasliked": 0,
            "id": "XclfRf",
            "likes": 0,
            "name": "flowie",
            "published": 3,
            "tags": [
                "flower"
            ],
            "usePreview": 0,
            "username": "Lumgol",
            "viewed": 36
        },
        "renderpass": [
            {
                "code": "const int numPetals = 5;\n// must be greater than 0\nconst int numColors = 5;\n\n// sdEgg from Inigo Quilez's website\nfloat sdEgg( in vec2 p, in float he, in float ra, in float rb, vec2 up )\n{\n    float ce = 0.5*(he*he-(ra-rb)*(ra-rb))/(ra-rb);\n    \n    vec2 side = vec2(-up.y, up.x);\n    vec2 newp = vec2(dot(p, side), dot(p, up) );\n    newp.x = abs(newp.x);\n    \n\n    if( newp.y<0.0 )                return length(newp)-ra;\n    if( newp.y*ce-newp.x*he>he*ce ) return length(vec2(newp.x,newp.y-he))-rb;\n                                    return length(vec2(newp.x+ce,newp.y))-(ce+ra);\n}\n\nfloat largePetalOffset = 0.5;\nfloat largePetalHe = 0.6;\nfloat largePetalRadius1 = 0.3;\n\nfloat smallPetalOffset = 0.3;\nfloat smallPetalHe = 0.5;\nfloat smallPetalRadius1 = 0.2;\n\nfloat makeLargePetal(in vec2 uv, in float theta, in float swell) {\n    vec2 up = vec2(cos(theta), sin(theta));\n    float egg = sdEgg(uv - largePetalOffset * up, \n                      largePetalHe + swell, \n                      largePetalRadius1 + 0.3 * swell, \n                      0.02, \n                      up);\n    float wiggle = 0.07 * cos(2. * float(numPetals) * atan(uv.y, uv.x));\n    return egg+wiggle;\n}\n\nfloat makeSmallPetal(in vec2 uv, in float theta, in float swell) {\n    theta += radians(360. / float(numPetals) / 2.);\n    vec2 up = vec2(cos(theta), sin(theta));\n    float egg = sdEgg(uv - smallPetalOffset * up, \n                      smallPetalHe + swell, \n                      smallPetalRadius1 + 0.3 * swell, \n                      0.02, \n                      up);\n    float wiggle = 0.05 * cos(3. * float(numPetals) * atan(uv.y, uv.x));\n    return egg + wiggle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord*2. - iResolution.xy) / iResolution.y;\n    vec2 uv2 = uv * 0.6;\n    uv = 1.5 * uv;\n    float checker = mod(floor(uv.x) + floor(uv.y), 2.);\n    uv = 2.7*(fract(uv) - 0.5);\n    \n    float baseRotationSpeed  = (1./3.) * iTime;\n    float largeRotationSpeed =           baseRotationSpeed + radians(180. * checker);\n    float smallRotationSpeed = (5./3.) * baseRotationSpeed + radians(180. * checker);\n    \n    float swell = 0.4 * cos(5./3. * baseRotationSpeed) * (checker-0.5);\n    float largeFlower = makeLargePetal(uv, 0. + largeRotationSpeed, swell);\n    float smallFlower = makeSmallPetal(uv, 0. - smallRotationSpeed, swell);\n    float hugeFlower = makeLargePetal(uv2, 0. + baseRotationSpeed, 0.);\n    for (int i = 1; i < numPetals; i++) {\n        float theta = radians(float(i) * (360. / float(numPetals)));\n        largeFlower = min(largeFlower, \n                          makeLargePetal(uv, theta + largeRotationSpeed, swell));\n        smallFlower = min(smallFlower, \n                          makeSmallPetal(uv, theta - smallRotationSpeed, swell));\n        hugeFlower = min(hugeFlower, \n                         makeLargePetal(uv2, theta + baseRotationSpeed, 0.));\n    }\n    float largeFlowerStep = smoothstep(-0.02, 0.02, largeFlower);\n    float smallFlowerStep = smoothstep(-0.06, 0.06, smallFlower);\n    \n    float largeRadius = largePetalOffset + largePetalHe + largePetalRadius1 + 0.02;\n    float smallRadius = smallPetalOffset + 0.5 + 0.2 + 0.02;\n    \n    vec4 red    = vec4(0.7, 0.1, 0.4, 1.);\n    vec4 orange = vec4(0.9, 0.4, 0.3, 1.);\n    vec4 yellow = vec4(0.8, 0.8, 0.1, 1.);\n    vec4 green  = vec4(0.1, 0.8, 0.2, 1.);\n    vec4 blue   = vec4(0.3, 0.1, 0.9, 1.);\n    vec4 purple = vec4(0.4, 0.2, 0.7, 1.);\n    \n    vec4[numColors] cols = vec4[numColors](orange, yellow, red, blue, purple);\n    \n    vec4 smallColor1 = checker < 0.5 ? cols[0]             : cols[4 % numColors];\n    vec4 smallColor2 = checker < 0.5 ? cols[1 % numColors] : cols[5 % numColors];\n    vec4 largeColor1 = checker < 0.5 ? cols[2 % numColors] : cols[6 % numColors];\n    vec4 largeColor2 = checker < 0.5 ? cols[3 % numColors] : cols[7 % numColors];\n    \n    \n    vec4 largeFlowerBlend = mix(largeColor1, largeColor2, 3. * abs(largeFlower));\n    vec4 smallFlowerBlend = mix(smallColor1, smallColor2, 4. * abs(smallFlower));\n    float mask = 1. - abs(hugeFlower);\n    vec4 hugeFlowerBlend  = mix(purple, vec4(1.), 0.5*sin(30.*mask) + 0.5);\n    vec4 tiling = mix(\n                      (1. - largeFlowerStep) * largeFlowerBlend, \n                      (1. - smallFlowerStep) * smallFlowerBlend, \n                       1. - smallFlowerStep\n                  );\n    vec4 ghost = vec4(vec3(.8 - abs(hugeFlower)), 1.) * hugeFlowerBlend;\n    ghost *= length(uv2) < 0.3 ? length(uv2) / 0.3 : 1.;\n    \n    fragColor = tiling.x + tiling.y + tiling.z >= 1.5 ? 2.*ghost*tiling : 1. - 2.*(1.-ghost)*(1.-tiling);\n    // (1. - 2.*tiling) * ghost*ghost + 2.*ghost*tiling;\n    //((tiling.x + tiling.y + tiling.z) >= 1.5 ? 2.*ghost*tiling : 1. - 2.*(1.-ghost)*(1.-tiling));\n} ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}