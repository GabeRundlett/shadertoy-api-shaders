{
    "Shader": {
        "info": {
            "date": "1680626312",
            "description": "truchet experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "ddGXzR",
            "likes": 43,
            "name": "Graphic Design Experiment 7",
            "published": 3,
            "tags": [
                "graphicdesign",
                "cineshader",
                "y2k"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2160
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(3.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define R45(p) (( p + vec2(p.y,-p.x) ) *.707)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SymdirY(p) mod(floor(p).y,2.)*2.-1.\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat animateAarrow(vec2 p){\n    float dir = SymdirY(p);\n    p.y+=iTime*0.2*dir;    \n    p.y = mod(p.y,0.3)-0.15;\n    p*=Rot(radians(45.));\n    float d = abs(B(p,vec2(0.05)))-0.02;\n    return d;\n}\n\nfloat arrow(vec2 p){\n    float d = Tri(p,vec2(0.15));\n    p-=vec2(0.0,-0.1);\n    float d2 = Tri(p,vec2(0.12));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat pattern0(vec2 p, float dir, float n, float size){\n    float d = length(p)-size;\n    p*=Rot(radians(45.+iTime*dir*30.+(n*5.)));\n    float d2 = abs(length(p)-0.25)-0.05;\n    d2 = max(-(abs(p.x)-0.05),d2);\n    return min(d,d2);\n}\n\nfloat pattern1(vec2 p, float dir, float n){\n    p*=Rot(radians(-45.+iTime*dir*60.+(n*10.)));\n    vec2 prevP = p;\n    p = DF(p,4.);\n    p -= vec2(0.17);\n    p*=Rot(radians(45.));\n    float d = B(p,vec2(0.001,0.03));\n    \n    p = prevP;\n    p = DF(p,2.);\n    p -= vec2(0.18);\n    p*=Rot(radians(45.));\n    float d2 = B(p,vec2(0.001,0.05));\n    \n    d = min(d,d2);\n    p = prevP;\n    \n    d2 = abs(length(p)-0.12)-0.04;\n    \n    p = DF(p,1.5);\n    p -= vec2(0.18);\n    p*=Rot(radians(45.));\n    d2 = max(-B(p,vec2(0.02,0.2)),d2);\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat pattern2(vec2 p, float dir, float n){\n    p*=Rot(radians(-45.+iTime*dir*60.+(n*10.)));\n    float d = abs(length(p)-0.29)-0.001;\n    p.x = abs(p.x)-0.12;\n    float d2 = length(p)-0.07;\n    \n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat pattern3(vec2 p, float dir, float n){\n    p*=Rot(radians(-45.+iTime*dir*60.+(n*10.)));\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p -= vec2(0.2);\n    p*=Rot(radians(45.));\n    float d = Tri(p,vec2(0.06));\n    \n    p = prevP;\n    p = DF(p,2.);\n    p -= vec2(0.1);\n    p*=Rot(radians(45.));\n    float d2 = B(p,vec2(0.001,0.03));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat pattern4(vec2 p, float dir, float n){\n    p*=Rot(radians(-45.+iTime*dir*60.+(n*10.)));\n    vec2 prevP = p;\n    p = DF(p,2.);\n    p -= vec2(0.1);\n    p*=Rot(radians(45.));\n    float d = B(p,vec2(0.001,0.15));\n    \n    p = prevP;\n    p = DF(p,2.);\n    p -= vec2(0.17);\n    float d2 = B(p,vec2(0.04));\n    d = min(d,d2);\n    \n    p = prevP;\n    p*=Rot(radians(45.));\n    d2 = B(p,vec2(0.08));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawGraphics(vec2 p){\n    vec2 prevP = p;\n\n    p.y+=iTime*0.1;\n    p*=5.;\n    vec2 id = floor(p);\n    vec2 gr = fract(p)-0.5;\n    vec2 prevGr = gr;\n    \n    float n = random(id);\n    float d = 10.;\n    if(n<0.5){\n        if(n<0.25){\n            gr*=Rot(radians(90.));\n            prevGr*=Rot(radians(90.));\n        }\n    \n        gr-=vec2(0.49);\n        d = abs(length(gr)-0.49)-0.05;\n        gr = prevGr;\n\n        gr+=vec2(0.49);\n        float d2 = abs(length(gr)-0.49)-0.05;\n        d = min(d,d2);\n        \n        gr-=vec2(0.08);\n        gr*=Rot(radians(225.));\n\n        d2 = arrow(gr);\n        d = min(d,d2);\n         \n        gr = prevGr;\n        gr-=vec2(0.42);\n        gr*=Rot(radians(45.));\n\n        d2 = arrow(gr);\n        d = min(d,d2);\n        \n        gr = prevGr;\n        gr*=Rot(radians(-45.));\n        d2 = animateAarrow(gr);\n        d = min(d,d2);\n    } else {\n        float size = 0.05;\n        \n        float dir = (n>=0.75)?1.:-1.;\n        \n        if(n>=0.5 && n<0.6){\n            d = pattern0(gr,dir,n, size);\n        } else  if(n>=0.6 && n<0.7){\n            d = pattern1(gr,dir,n);\n        } else  if(n>=0.7 && n<0.8){\n             d = pattern2(gr,dir,n);\n        } else  if(n>=0.8 && n<0.9){\n            d = pattern3(gr,dir,n);\n        } else {\n            d = pattern4(gr,dir,n);\n        }\n        \n        gr = prevGr;\n        gr = abs(gr)-0.42;\n        gr*=Rot(radians(45.));\n\n        float d2 = arrow(gr);\n        d = min(d,d2);\n        \n        gr = prevGr;\n        if(n>=0.65){\n            d2 = length(gr-vec2(0.49,0.))-size;\n            d = min(d,d2);\n\n            gr = prevGr;\n            gr-=vec2(-0.365,0.);\n            gr*=Rot(radians(90.));\n\n            d2 = Tri(gr,vec2(size*2.5));\n            gr = prevGr;\n            d2 = min(B(gr-vec2(-0.49,0.0),vec2(0.05)),d2);\n            d = min(d,d2);\n        } else {\n            d2 = length(gr-vec2(-0.49,0.))-size;\n            d = min(d,d2);\n\n            gr = prevGr;\n            gr-=vec2(0.365,0.);\n            gr*=Rot(radians(-90.));\n\n            d2 = Tri(gr,vec2(size*2.5));\n            gr = prevGr;\n            d2 = min(B(gr-vec2(0.49,0.0),vec2(0.05)),d2);\n            d = min(d,d2);\n        }\n        \n        gr = prevGr;\n        gr.y = abs(gr.y)-0.49;\n        d2 = length(gr)-size;\n        d = min(d,d2);\n    }\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    float thick = 0.008;\n    float d = drawGraphics(p);\n    col = mix(col,vec3(1.),S(abs(d)-thick,-0.01));\n\n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}