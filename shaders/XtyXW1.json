{
    "Shader": {
        "info": {
            "date": "1484234345",
            "description": "Learning path tracing from scratch, with ye olde traditional cornell box. Spheres transition from reflective to matte and back. ",
            "flags": 32,
            "hasliked": 0,
            "id": "XtyXW1",
            "likes": 16,
            "name": "Cornell box nr. 5367",
            "published": 3,
            "tags": [
                "raytracing",
                "pathtracing",
                "cornell"
            ],
            "usePreview": 0,
            "username": "psonice",
            "viewed": 1735
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAXRAYS 10\n#define MAXBOUNCES 7\n#define PI 3.142\n#define INF 100000.0\n#define BRIGHTNESS 1.0\n\n#define R(p,a) p=cos(a)*p+sin(a)*vec2(-p.y,p.x);\n    \nstruct Ray {\n\tvec3 origin;\n\tvec3 dir;\n};\n\n// A camera. Has a position and a direction. \nstruct Camera {\n    vec3 pos;\n    Ray ray;\n};\n\nstruct Sphere {\n\tvec3 pos;\n\tfloat radius;\n};\n    \nstruct Box {\n\tvec3 pos;\n\tvec3 size;\n};\n\nstruct HitTest {\n\tbool hit;\n\tfloat dist;\n    vec3 normal;\n    vec4 col;\n    float ref;\n};\n    \nfloat t;\nfloat divergence;\n    \n#define NOHIT HitTest(false, INF, vec3(0), vec4(0), 0.0)\n    \nHitTest minT(in HitTest a, in HitTest b) {\n    if (a.dist < b.dist) { return a; } else { return b; }\n}\n\nHitTest minT(in HitTest a, in HitTest b, in HitTest c) {\n    return minT(a, minT(b, c));\n}\n\nHitTest minT(in HitTest a, in HitTest b, in HitTest c, in HitTest d) {\n    return minT(a, minT(b, c, d));\n}\n\nHitTest minT(in HitTest a, in HitTest b, in HitTest c, in HitTest d, in HitTest e) {\n    return minT(minT(a,b), minT(c,d,e));\n}\n\nHitTest intersectFloor(in Ray r) {\n    if (r.dir.y >= 0.0) { return NOHIT; }\n    return HitTest(true, r.origin.y / -r.dir.y, vec3(0,1,0), vec4(0), 0.0);\n}\n\nHitTest intersectBox(in Ray r, in Box b) {\n \t// box, 0 on y, +/-10 on x, +20 on y\n   // vec3 p = vec3(0);\n   // vec3 s = vec3(30);\n    b.size *= 0.5;\n    vec3 ba = b.pos-b.size, bb = b.pos+b.size;\n    \n    HitTest h = NOHIT;\n    float d = INF;\n    \n    //r.origin -= p;\n    \n    vec3 dA = (r.origin - ba) / -r.dir;\n    vec3 dB = (r.origin - bb) / -r.dir;\n    \n    dA.x = dA.x <= 0.0 ? INF : dA.x;\n    dA.y = dA.y <= 0.0 ? INF : dA.y;\n    dA.z = dA.z <= 0.0 ? INF : dA.z;\n    dB.x = dB.x <= 0.0 ? INF : dB.x;\n    dB.y = dB.y <= 0.0 ? INF : dB.y;\n    dB.z = dB.z <= 0.0 ? INF : dB.z;\n    \n    float d1 = min(dA.x, min(dA.y, dA.z));\n    float d2 = min(dB.x, min(dB.y, dB.z));\n    \n    d = min(d1, d2);\n    \n    vec3 endPoint = r.origin + r.dir * d;\n    endPoint -= b.pos;\n    //endPoint = abs(endPoint);\n    \n    \n    if (d != INF) {\n        h.hit = true;\n        h.dist = d;\n        h.ref = 0.0;\n        \n        if (abs(abs(endPoint.x) - bb.x) < 0.01) {\n            bool l = endPoint.x < 0.0;\n       \t\th.normal = vec3(l ? 1 : -1,0,0);\n        \th.col = l ? vec4(1,0.5,0.5,1) : vec4(0.5,0.5,1,1);\n    \t\treturn h;\n        }\n        if (abs(abs(endPoint.z) - bb.z) < 0.01) {\n       \t\th.normal = vec3(0,0,-sign(endPoint.z));\n        \th.col = vec4(1);\n           // h.ref = 0.5;\n    \t\treturn h;\n        }\n        \n        // floor\n       \th.normal = vec3(0,-sign(endPoint.y),0);\n        h.col = vec4(1);\n    \treturn h;\n    }\n    return h;\n}\n\nHitTest intersectSphere(in Ray r, in Sphere s) {\n\tvec3 o = r.origin - s.pos;\n\tfloat v = dot(o, r.dir);\n\tif(v > 0.) return NOHIT;\n    \n\tfloat disc = (s.radius * s.radius) - (dot(o, o) - (v * v));\n\t\n\tif(disc < 0.) return NOHIT;\n\t\n\tfloat dist = length(o) - (sqrt(disc));\n\treturn HitTest(true, dist, normalize((r.origin + r.dir * dist) - s.pos), vec4(0), sin(iTime * 0.25)*.5+.5);\n}\n\nfloat nrand(in vec2 n) {\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec3 trand(in vec2 n) {\n    return texture(iChannel0, n).rgb;\n}\n\nvec4 traceScene(in Camera cam, vec2 seed) {\n    vec3 startPos = cam.pos;\n    \n    vec4 result = vec4(0);\n    \n    float eps = 0.0;\n    \n    for (int i=0; i<MAXRAYS; i++) {\n    \tRay r = cam.ray;\n        \n        r.dir.x += (nrand(seed)*2.-1.) * divergence;\n        r.dir.y += (nrand(seed.yx)*2.-1.) * divergence;\n        r.dir.z += (nrand(seed.xx)*2.-1.) * divergence;\n        r.dir = normalize(r.dir);\n        vec4 impact = vec4(BRIGHTNESS);\n        seed++;\n        \n        for (int j=0; j<MAXBOUNCES; j++) {\n    \t\tHitTest t0 = intersectBox(r, Box(vec3(0,10,0), vec3(30,20,25)));\n    \t\tHitTest t1 = intersectSphere(r, Sphere(vec3(-1,2,0), 2.0));\n            t1.col = vec4(1);\n    \t\tHitTest t2 = intersectSphere(r, Sphere(vec3(4,5,4), 5.0));\n            t2.col = vec4(1,1,0,1);\n    \t\tHitTest t3 = intersectSphere(r, Sphere(vec3(-10.,6,0.), 1.0));\n    \t\tHitTest t4 = intersectSphere(r, Sphere(vec3(0,20,0), 10.0));\n    \t\t\n    \t\tHitTest test = minT(t0, t1, t2, t4);//, t4);\n    \t\n    \t\tif ((test == t3) && test.hit) { \n        \t    result += vec4(1) * impact;\n        \t    break;\n        \t} else if ((test == t4) && test.hit) { \n        \t    result += vec4(1) * impact;\n        \t    break;\n        \t}\n    \t\tif (test.hit) {\n        \t    r.origin += r.dir * test.dist;\n                r.origin += test.normal * 0.01;\n                vec3 random = vec3(\n        \t\t            nrand(r.origin.xy+seed),\n        \t\t            nrand(r.origin.yz+seed),\n        \t\t            nrand(r.origin.zx+seed)\n        \t\t            )*2. - 1.;\n               \t//random = normalize(random);\n                eps += divergence * test.dist*0.1;\n                r.dir = normalize(mix(\n                    test.normal + random,\n                    reflect(r.dir, test.normal),\n                    test.ref\n                    ));\n                r.origin += r.dir * eps;\n                //r.dir = test.normal;\n        \t\timpact *= test.col;\n            } else {\n                break;\n            }\n        }\n    }\n    return result / float(MAXRAYS);\n}\n\n// Sets up a camera at a position, pointing at a target.\n// uv = fragment position (-1..1) and fov is >0 (<1 is telephoto, 1 is standard, 2 is fisheye-like)\nCamera setupCam(in vec3 pos, in vec3 target, in float fov, in vec2 uv) {\n\t\t// cam setup\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.;// - 1.;\n    R(pos.xz, mouse.x);\n    // Create camera at pos\n\tCamera cam;\n    cam.pos = pos;\n    \n    // A ray too\n    Ray ray;\n    ray.origin = pos;\n    \n    // FOV is a simple affair...\n    uv *= fov;\n    \n    // Now we determine hte ray direction\n\tvec3 cw = normalize (target - pos );\n\tvec3 cp = vec3 (0.0, 1.0, 0.0);\n\tvec3 cu = normalize ( cross(cw,cp) );\n\tvec3 cv = normalize ( cross (cu,cw) );\n    \n\tray.dir = normalize ( uv.x*cu + uv.y*cv + 0.5 *cw);\n    \n    // Add the ray to the camera and our work here is done.\n\tcam.ray = ray;\n    \n    // Ray divergence\n    divergence = fov / iResolution.x;\n    divergence = divergence + length(uv) * 0.02;\n\treturn cam;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.y /= iResolution.x/iResolution.y;\n    Camera cam = setupCam(vec3(0,3,-8), vec3(0,5,0), 1.0, uv);\n        //Camera(vec3(0, 5, -10), normalize(vec3(uv, 1.0)));\n    \n    vec4 c = traceScene(cam, uv + iTime);\n    vec4 l = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor = mix(c, l, iMouse.z > 0.5 ? 0.0 : 0.98);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}