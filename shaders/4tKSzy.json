{
    "Shader": {
        "info": {
            "date": "1485101050",
            "description": "Possible sizecoding target.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKSzy",
            "likes": 6,
            "name": "Hypnotoad Eyes",
            "published": 3,
            "tags": [
                "eye",
                "distance",
                "morph",
                "hypnotoad"
            ],
            "usePreview": 0,
            "username": "mlkn",
            "viewed": 998
        },
        "renderpass": [
            {
                "code": "#define eyeSize 0.07\n#define speed1 2.5\n#define speed2 3.3\n#define colorFlickerSpeed 11.\n\nconst vec3 red = vec3(0.4, 0.05, 0.0);\nconst vec3 yellow = vec3(1.0, 0.8, 0.05);\nconst vec3 green = vec3(0.67, 0.6, 0.3);\n\nfloat getHypnoEyeDistance(vec2 p, vec2 center, float size, float t) {\n    vec2 c = p - center;\n\n    float sph = length(c * vec2(1., 0.8)) / (size * (1. + t) * 0.7);\n    \n    float el = length(c * vec2(0.6 + 0.1*t, 1.2 * (1. + t))) / size;\n    float staticEl = length(c * vec2(0.4, 1.15)) / size;\n    \n    c *= vec2(0.3, 0.55);\n    vec2 v = vec2(0., 1.1 * size);\n    float subSph = min(length(c + v), length(c - v)) / size;\n\n    return (1. - el) * (1. - sph) + (1. - t) * (1. - subSph * subSph) - (1. - staticEl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aR = iResolution.x / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= aR;\n    \n    float t = abs(mod(iTime * speed1, 2.) - 1.);\n    float t2 = abs(mod(iTime * speed2, 2.) - 1.);\n\n    vec2 eyePos1 = vec2(aR / 4., 0.5);\n    vec2 eyePos2 = vec2(3. * aR / 4., 0.5);\n\n    float d = min(\n        getHypnoEyeDistance(uv, eyePos1, eyeSize, t),\n    \tgetHypnoEyeDistance(uv, eyePos2, eyeSize, t2)\n    );\n    vec3 col = mix(vec3(0), red, d * 3.);\n    col = mix(col, yellow, clamp((d - 0.5) * 1.5, 0., 1.));\n    col = mix(col, green, clamp((d - 0.5) * 0.4 + 0.15 * (sin(t * colorFlickerSpeed) + 1.), 0., 1.));\n\t\n    d = min(length(uv - eyePos1), length(uv - eyePos2));\n\n    col *= smoothstep(-0.02, 0.0, eyeSize*3.45 - d);\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}