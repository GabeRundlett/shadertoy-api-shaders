{
    "Shader": {
        "info": {
            "date": "1715453361",
            "description": "This is an example demonstrating the FIS technique for stochastically evaluating the bilinear/biquadratic/Gaussian filters.\nhttps://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/",
            "flags": 32,
            "hasliked": 0,
            "id": "MfyXzV",
            "likes": 10,
            "name": "Stochastic FIS",
            "published": 3,
            "tags": [
                "textures",
                "filtering",
                "stochastic",
                "dsp"
            ],
            "usePreview": 1,
            "username": "bartwronski",
            "viewed": 1252
        },
        "renderpass": [
            {
                "code": "// This is an example demonstrating the FIS technique for stochastically evaluating the bilinear/biquadratic/Gaussian filters.\n// https://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/\n// Starting from top, going clockwise:\n// Full bilinear, stochastic bilinear, stochastic (bi)quadratic, stochastic Gaussian.\n\n// Click somewhere in the shader to disable the temporal accumulation.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nconst float PI = 3.1415926;\n\nvec2 boxMullerTransform(vec2 u)\n{\n    vec2 r;\n    float mag = sqrt(-2.0 * log(u.x));\n    return mag * vec2(cos(2.0 * PI * u.y), sin(2.0 * PI * u.y));\n}\n\nvec3 stochastic_gauss(in vec2 uv, in vec2 rand) {\n    vec2 orig_tex_coord = uv * iChannelResolution[0].xy - 0.5;\n    vec2 uv_full = (round(orig_tex_coord + boxMullerTransform(rand)*0.5)+0.5) / iChannelResolution[0].xy;\n\n    return texture(iChannel0, uv_full).xyz;  \n}\n\n\nvec3 stochastic_bilin(in vec2 uv, in vec2 rand) {\n    vec2 orig_tex_coord = uv * iChannelResolution[0].xy - 0.5;\n    vec2 uv_full = (round(orig_tex_coord + rand - 0.5)+0.5) / iChannelResolution[0].xy;\n\n    return texture(iChannel0, uv_full).xyz;  \n}\n\n// Inverse CDF sampling for a tent / bilinear kernel. Followed by rounding - nearest-neighbor box kernel,\n// UV jittering this way produces a biquadratic B-Spline kernel.\n// See the paper for the explanation: https://research.nvidia.com/labs/rtr/publication/pharr2024stochtex/\nvec2 bilin_inverse_cdf_sample(vec2 x) {\n    return mix(1.0 - sqrt(2.0 - 2.0 * x), -1.0 + sqrt(2.0 * x), step(x, vec2(0.5)));\n}\n\nvec3 stochastic_quadratic(in vec2 uv, in vec2 rand) {\n    vec2 orig_tex_coord = uv * iChannelResolution[0].xy - 0.5;\n    vec2 uv_full = (round(orig_tex_coord + bilin_inverse_cdf_sample(rand))+0.5) / iChannelResolution[0].xy;\n\n    return texture(iChannel0, uv_full).xyz;  \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 orig_uv = uv;\n    uv *= 0.04;\n    uv += 0.1;\n    // \n    vec4 random = texture(iChannel2, orig_uv+vec2(rand(float(iFrame)), rand(iTime)));\n    vec3 col = orig_uv.x > orig_uv.y ? stochastic_quadratic(uv, random.xy) : stochastic_gauss(uv, random.xy);\n\n    if (1.0-orig_uv.x < orig_uv.y) {\n        col = texture(iChannel0, uv).xyz;\n        if (orig_uv.x > orig_uv.y) {\n            col = stochastic_bilin(uv, random.xy);\n        }\n    }\n    if (abs(1.0-orig_uv.x - orig_uv.y) < 0.005)\n        col = vec3(1,1,1);\n    if (abs(orig_uv.x - orig_uv.y) < 0.005)\n        col = vec3(1,1,1);    \n    \n    if (iTime > 0.1 && iMouse.z < fragCoord.x) {\n        col = col * 0.02 + texture(iChannel1, orig_uv).xyz * 0.98;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}