{
    "Shader": {
        "info": {
            "date": "1621025647",
            "description": "реймарчинг",
            "flags": 0,
            "hasliked": 0,
            "id": "ttyBz1",
            "likes": 3,
            "name": "planet01",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "cody_shader",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "#define ITERATION 500\n#define MAX_DIST 10.\n#define EX vec3(0.001, 0., 0.)\n#define EY vec3(0., 0.001, 0.)\n#define EZ vec3(0., 0., 0.001)\n#define w iResolution.x\n#define h iResolution.y\n\n// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat random (vec2 st) {\n    \n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return fract(abs(sin(st)*43758.5453123));\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .6;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\nfloat dist(vec3 a, vec3 b) { //Считает расстояние между точками в трехмерном пространстве\n\treturn sqrt(pow(a.x - b.x, 2.) + pow(a.y - b.y, 2.) + pow(a.z - b.z, 2.));\n}\n\nvec3 normalize(vec3 a) { //Нормализует вектор\n    float l = dist(a, vec3(0.,0.,0.));\n    return vec3(a.x / l, a.y / l, a.z / l);\n}\n\nvec3 sum(vec3 a, vec3 b) { //Суммирует вектора\n\treturn vec3(a.x + b.x, a.y + b.y, a.z + b.z);\n}\n\nvec3 sub(vec3 a, vec3 b) { //Вычитает вектора\n\treturn vec3(a.x - b.x, a.y - b.y, a.z - b.z);\n}\n\nvec3 mul(vec3 a, float value) { //Умножает вектор на значение\n\treturn vec3(a.x * value, a.y * value, a.z * value);\n}\n\nfloat smin(float a, float b, float k) {\n\tfloat m = max(min(0.5 + 0.5 * (b - a) / k, 1.), 0.);\n\treturn a * m + b * (1. - m) - k * m * (1. - m);\n}\n\n\n\n\nfloat getDistdotsentra(vec3 p) { //ПОЛУЧИТЬ РАССТОЯНИЕ ОТ ТОЧКИ ДО центра сферы\n\tvec3 sphere = vec3(0.,0.,0.);\n\tfloat sphereDist = dist(p, sphere) - 1.5 ;\n\tfloat d = sphereDist;\n\treturn d;\n\n}\n\nvec3 normalforlit(vec3 p) {\n\tfloat d = getDistdotsentra(p);\n\tfloat p1 = getDistdotsentra(sub(p, EX));\n\tfloat p2 = getDistdotsentra(sub(p, EY));\n\tfloat p3 = getDistdotsentra(sub(p, EZ));\n\tvec3 tri = vec3(p1, p2, p3);\n\tvec3 n = sub(vec3(d,d,d), tri);\n\treturn normalize(n);\n}\n\n\nvec2 getDist(vec3 p) { //ПОЛУЧИТЬ РАССТОЯНИЕ ОТ ТОЧКИ ДО СФЕРЫ\n\tvec3 sphere = vec3(0.,0.,0.);\n    vec3 n = normalforlit(p);\n    \n    vec2 st = p.xy;\n    \n    st.y+= iTime*0.1;\n    \n     // Масштаб\n    float mashtab = 15.;\n    st *= mashtab;\n\n    // Разбиение пространства\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 100.0;\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Соседняя клетка\n            vec2 neighbor = vec2(float(x),float(y));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5+0.5*sin(iTime + 6.2831*point);\n            vec2 diff = neighbor + point - f_st; //вектор до точки\n            float dist = length(diff) + 1.*sin(point.x); // Расстояние до точки\n            m_dist = min(m_dist, dist); // Сохранить наименьшее расстояние\n        }\n    }\n\n    //float line = 1./(iResolution.y/mashtab);\n    //vec3 col = vec3(m_dist);\n    //fragColor = vec4(col,1.0);\n    \n    \n\tfloat sphereDist = dist(p, sphere) - m_dist*0.1 - 1.3 ;\n    float fraktal_noise = dist(p, sphere)  - fbm(vec2(n.x*4.+iTime*0.7, n.y*4.))*0.7 - 1. ; \n    \n    float d = smin(sphereDist, fraktal_noise, 0.1);\n    //  + fbm(vec2(n.x*5.+iTime, n.y*5.))*0.5\n    // фрактальный шум\n    float t = 0.;\n    if (sphereDist>fraktal_noise) t = 1.;\n    \n\t//float d = sphereDist;\n\treturn vec2(d, t);\n\n}\n\n\nvec3 normal(vec3 p) {\n\tfloat d = getDist(p).x;\n\tfloat p1 = getDist(sub(p, EX)).x;\n\tfloat p2 = getDist(sub(p, EY)).x;\n\tfloat p3 = getDist(sub(p, EZ)).x;\n\tvec3 tri = vec3(p1, p2, p3);\n\tvec3 n = sub(vec3(d,d,d), tri);\n\treturn normalize(n);\n}\n\n\n\n\n\nfloat light(vec3 p) {\n\t//vec3 lightPos = vec3(-10., 4., 0.);\n    vec3 lightPos = vec3(sin(iTime)*3., 1., cos(iTime)*3.);\n\tvec3 lightDir = normalize(sub(lightPos, p));\n\tvec3 n = normalforlit(p);\n\treturn dot(n, lightDir) * 0.5  + 0.5;\n}\n\nvec3 rayMarching(vec3 ro, vec3 rd) {\n\tvec3 p = ro;\n\tfor (int i = -0; i < 500; i++){\n\t\tfloat d = getDist(p).x;\n        float t = getDist(p).y;\n\t\tif (d > MAX_DIST) {break;}\n\t\tp = sum(p, mul(rd, d));\n\t\tif (d < 0.0001){\n\t\t\t//let dif = i / ITERATION\n\t\t\t//dif = dif+dif\n            float l = light(p);\n            float n = 2.;\n\t\t\treturn vec3(\n            pow(l*t,5.),\n            pow(l,n),\n            pow(l*(1.-t),n)\n            \n            );\n\t\t} \n\t}\n\treturn vec3(0.,0.,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int iteration = 500;\n    const float max_dist = 10.0;\n\n\t//координаты камеры\n\tvec3 ro = vec3(0., 0., -2.5);\n\n    float x = (fragCoord.x / w) * 2. - 1.;\n    float y = (fragCoord.y / h) * 2. - 1.;\n    x *= w / h;\n\n    //направление луча\n    vec3 rd = vec3(x, y , 1.);\n    rd = normalize(rd);\n\n    //круг\n    vec3 color = rayMarching(ro, rd);\n\t\t\t\n\t\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}