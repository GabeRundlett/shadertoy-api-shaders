{
    "Shader": {
        "info": {
            "date": "1705805831",
            "description": "20240120\n\nAdapted from The Book of Shaders by Patricio Gonzalez Vivo and Jen Lowe\nhttps://thebookofshaders.com/09/",
            "flags": 0,
            "hasliked": 0,
            "id": "4flSWf",
            "likes": 3,
            "name": "crissed crosses",
            "published": 3,
            "tags": [
                "pattern",
                "cross"
            ],
            "usePreview": 0,
            "username": "dissident",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "// Original author @patriciogv ( patriciogonzalezvivo.com ) - 2015\n\n// Adapted from The Book of Shaders - Patterns\n// https://thebookofshaders.com/09/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec2 correctedUV(vec2 fragCoord) {\n    // // map to [0, 1]\n    // vec2 uv = fragCoord / iResolution.xy;\n    // // adjust x so that x and y have the same unit size\n    // uv.x = uv.x * iResolution.x / iResolution.y - (0.5 * (iResolution.x - iResolution.y) / iResolution.y);\n    // // map to [-1, 1]\n    // return uv * 2.0 - 1.0;\n\n    return (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nfloat rect(float width, float height, vec2 center, vec2 uv) {\n    // vec2 hwhh = vec2(width, height) / 2.0;\n    // vec2 tr = vec2(1.0) - (center + hwhh);\n    // tr = step(tr, vec2(1.0) - uv);\n    // vec2 bl = center - hwhh;\n    // bl = step(bl, uv);\n\n    // return tr.x * tr.y * bl.x * bl.y;\n\n    // uv = step(abs(uv - center), vec2(width, height) / 2.0);\n    float pixel_width = 12.0 / iResolution.y;\n    uv = smoothstep(pixel_width, 0.0, abs(uv) - vec2(width, height) / 2.0);\n    return min(uv.x, uv.y);\n}\n\nfloat cruciate(vec2 uv, float size) {\n    vec2 center = vec2(0.0);\n    float wide = size;\n    float thin = size / 4.0;\n\n    float horizontal = rect(wide, thin, center, uv);\n    float vertical = rect(thin, wide, center, uv);\n    // return horizontal + vertical;\n    return max(horizontal, vertical);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = correctedUV(fragCoord);\n    vec3 color = vec3(0.0);\n\n    uv *= 3.0;\n    vec2 is_even = mod(ceil(uv), 2.0) * 2.0 - 1.0;\n    uv = fract(uv);\n\n    // translate\n    vec2 translate = vec2(-0.5);\n    uv += translate;\n\n    // rotate the space\n    uv = rotate2d(iTime * is_even.x * is_even.y) * uv;\n\n    // Add the shape on the foreground\n    color += vec3(cruciate(uv, 1.4));\n\n    fragColor = vec4(color,1.0);\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}