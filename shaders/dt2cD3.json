{
    "Shader": {
        "info": {
            "date": "1692378940",
            "description": "ey",
            "flags": 32,
            "hasliked": 0,
            "id": "dt2cD3",
            "likes": 7,
            "name": "Strange Lab Goop",
            "published": 3,
            "tags": [
                "clay"
            ],
            "usePreview": 0,
            "username": "N8Shader",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "float w0(float a)\n{\n    return (1.0/6.0)*(a*(a*(-a + 3.0) - 3.0) + 1.0);\n}\n\nfloat w1(float a)\n{\n    return (1.0/6.0)*(a*a*(3.0*a - 6.0) + 4.0);\n}\n\nfloat w2(float a)\n{\n    return (1.0/6.0)*(a*(a*(-3.0*a + 3.0) + 3.0) + 1.0);\n}\n\nfloat w3(float a)\n{\n    return (1.0/6.0)*(a*a*a);\n}\n\n// g0 and g1 are the two amplitude functions\nfloat g0(float a)\n{\n    return w0(a) + w1(a);\n}\n\nfloat g1(float a)\n{\n    return w2(a) + w3(a);\n}\n\n// h0 and h1 are the two offset functions\nfloat h0(float a)\n{\n    return -1.0 + w1(a) / (w0(a) + w1(a));\n}\n\nfloat h1(float a)\n{\n    return 1.0 + w3(a) / (w2(a) + w3(a));\n}\n\nvec4 texture_bicubic(sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod)\n{\n\tuv = uv*texelSize.zw + 0.5;\n\tvec2 iuv = floor( uv );\n\tvec2 fuv = fract( uv );\n\n    float g0x = g0(fuv.x);\n    float g1x = g1(fuv.x);\n    float h0x = h0(fuv.x);\n    float h1x = h1(fuv.x);\n    float h0y = h0(fuv.y);\n    float h1y = h1(fuv.y);\n\n\tvec2 p0 = (vec2(iuv.x + h0x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p1 = (vec2(iuv.x + h1x, iuv.y + h0y) - 0.5) * texelSize.xy;\n\tvec2 p2 = (vec2(iuv.x + h0x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\tvec2 p3 = (vec2(iuv.x + h1x, iuv.y + h1y) - 0.5) * texelSize.xy;\n\t\n    vec2 lodFudge = pow(1.95, lod) / fullSize;\n    return g0(fuv.y) * (g0x * \n        textureLod(tex, p0, lod)  +\n                        \n        g1x * textureLod(tex, p1, lod)\n                    ) +\n           g1(fuv.y) * (\n            g0x * textureLod(tex, p2, lod)  +\n                        g1x * textureLod(tex, p3, lod));\n}\n\n\nvec4 textureBicubic(sampler2D s, vec2 uv, float lod) {\n vec2 lodSizeFloor = vec2(textureSize(s, int(lod)));\n vec2 lodSizeCeil = vec2(textureSize(s, int(lod + 1.0)));\n vec2 fullSize = vec2(textureSize(s, 0));\n vec4 floorSample = texture_bicubic( s, uv, vec4(1.0 / lodSizeFloor.x, 1.0 / lodSizeFloor.y, lodSizeFloor.x, lodSizeFloor.y), fullSize, floor(lod));\n vec4 ceilSample = texture_bicubic( s, uv, vec4(1.0 / lodSizeCeil.x, 1.0 / lodSizeCeil.y, lodSizeCeil.x, lodSizeCeil.y), fullSize, ceil(lod));\n return mix(floorSample, ceilSample, fract(lod));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = texture(iChannel0, fragCoord.xy / iResolution.xy, 0.0).r;\n    //float mippedHeight = textureLod(iChannel0, fragCoord.xy / iResolution.xy, 4.0).r;\n    //float occlusion = 10.0 * max(mippedHeight - height, 0.0);\n    float occlusion = 0.0;\n    for(float i = 2.0; i <= 5.0; i++) {\n        float mippedHeight = textureBicubic(iChannel0, fragCoord.xy / iResolution.xy, i).r;\n        occlusion += 4.0 * max(mippedHeight - height, 0.0) * (1.0 / i);\n    }\n    vec3 col = mix(vec3(0.8, 0.6, 0.4), vec3(1.0), height) * (1.0 - occlusion);\n    vec3 pos = vec3(fragCoord.xy, height);\n    vec3 totalNormal = vec3(0.0);\n    for(float i = 3.0; i <= 5.0; i++) {\n    float mipLevel = i;\n    float texelStep =pow(2.0, mipLevel);\n    vec3 normal = normalize(vec3(\n        5.0 * (textureBicubic(iChannel0, (fragCoord.xy + vec2(texelStep, 0.0)) / iResolution.xy, mipLevel).r -  textureBicubic(iChannel0, (fragCoord.xy - vec2(texelStep, 0.0)) / iResolution.xy, mipLevel).r),\n        5.0 * (textureBicubic(iChannel0, (fragCoord.xy + vec2(0.0, texelStep)) / iResolution.xy, mipLevel).r -  textureBicubic(iChannel0, (fragCoord.xy - vec2(0.0, texelStep)) / iResolution.xy, mipLevel).r),\n        1.0\n    ));\n    totalNormal += normal;\n    }\n    vec3 normal = normalize(totalNormal);\n    float lambert = max(dot(normal, vec3(0.0, 0.0, 1.0)), 0.0);\n    vec3 rayDir = normalize(vec3((fragCoord.xy - iResolution.xy / 2.0) / iResolution.y, 1.0));\n    vec3 envSampleDir = reflect(rayDir, normal);\n    vec3 envSample = textureLod(iChannel1, envSampleDir, 3.0).rgb;\n    vec3 applied = 0.6 * col + 0.4 * col * envSample;\n    fragColor = vec4(applied,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NUM_OCTAVES 3\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * snoise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n    // Time varying pixel color\n    float fbmRes = fbm(vec3(fragCoord * 0.001, fbm(vec3(fragCoord * 0.001, fbm(vec3(0.001 * fragCoord, 0.1 * iTime + fbm(vec3(fragCoord * 0.0001, 0.1 * iTime))))))));\n    float ramp = 0.5 + 0.5 * fbmRes;\n    ramp = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, ramp));\n    ramp = smoothstep(0.0, 1.0, smoothstep(0.0, 1.0, ramp));\n    float fRamp = ramp;\n    // Output to scree\n    fragColor = vec4(ramp, 0.0, 0.0, 0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}