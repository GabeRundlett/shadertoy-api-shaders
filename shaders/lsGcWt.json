{
    "Shader": {
        "info": {
            "date": "1528511951",
            "description": "Conway's Game of Life experiment. Running several simultaneous simulations.\n\nDraw with mouse. Press '1' to fill with noise. Press '2' to clear all cells.",
            "flags": 48,
            "hasliked": 0,
            "id": "lsGcWt",
            "likes": 16,
            "name": "Life Soup",
            "published": 3,
            "tags": [
                "automata",
                "conway",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "ChrisK",
            "viewed": 1047
        },
        "renderpass": [
            {
                "code": "#define ABERRATION_STRENGTH 1.01\n#define ABERRATION_STEP 0.2\n\n\nvec3 hash ( vec3 p ) {\n\tvec3 v = vec3( sin( dot( p, vec3( 113.0, 317.0, 233.0 ) ) ) * 43758.5453123,\n\t\t\t\t   sin( dot( p, vec3( 179.0, 547.0, 409.0 ) ) ) * 94113.5982186,\n\t\t\t\t   sin( dot( p, vec3( 251.0, 727.0, 661.0 ) ) ) * 77821.9648357 );\n\treturn fract( v ) * 2.0 - 1.0;\n}\n\n\nvec3 spectrum( float d ) {\n\tvec3 rgb;\n\tfloat w = 380.0+d*400.0;\n\n\tif (w<440.0) rgb = vec3((440.0-w)/60.0, 0.0, 1.0);\n\telse if (w<490.0) rgb = vec3(0.0, (w-440.0)/50.0, 1.0);\n\telse if (w<510.0) rgb = vec3(0.0, 1.0, (510.0-w)/20.0);\n\telse if (w<580.0) rgb = vec3((w-510.0)/70.0, 1.0, 0.0);\n\telse if (w<645.0) rgb = vec3(1.0, (645.0-w)/65.0, 0.0);\n\telse rgb = vec3(1.0, 0.0, 0.0);\n\n\tif (w>700.0) rgb *= 0.3+0.00875*(780.0-w);\n\telse if (w<420.0) rgb *= 0.3+0.0175*(w-380.0);\n\n\treturn rgb;\n}\n\n\nvec3 processtexture( vec4 t ) {\n    return vec3( (t.r+t.g+t.b+t.a)/4.0 );\n    //return t.r*vec3(1.0, 0.5, 0.2) + t.g*vec3(0.4, 0.6, 0.2) + t.b*vec3(0.4, 0.3, 0.6) + t.a*vec3(0.3, 0.4, 0.2);\n}\n\n\nvec3 chromaticaberration( vec2 uv ) {\n\tvec3 col = vec3(0.0);\n\tvec3 total = vec3(0.0);\n\tvec2 redend = 0.5+(uv-0.5)/ABERRATION_STRENGTH;\n\tvec2 blueend = 0.5+(uv-0.5)*ABERRATION_STRENGTH;\n\n\tfor(float d=0.0; d<1.0; d+=ABERRATION_STEP) {\n        float r = hash(vec3(uv,iTime)).x*ABERRATION_STEP;\n        float p = clamp(d+r, 0.0, 1.0);\n\t\tvec3 c = spectrum(p);\n        vec4 t = texture(iChannel0, mix(blueend, redend, p));\n\t\tcol += processtexture(t)*c;\n        total += c;\n\t}\n\treturn col /= total;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = chromaticaberration( uv );\n    \n    col *= 1.1;\n    col += hash(vec3(fragCoord,iTime)) / 10.0;\t\t\t//grain\n    col *= 1.0 - pow(length(uv-vec2(0.5)), 0.75);\t\t//vignette\n    \n    fragColor = vec4(col.rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//run one Game of Life simulation in each texture channel\n//NDIST = distance between 'neighbouring' cells\n//effective number of simultaneous games is 4*NDIST^2 (not accounting for screen wrap)\n\n#define NDIST 2.0\n#define BRUSHSIZE 0.05\n#define ROUNDBRUSH\n\n\nvec3 hash ( vec3 p ) {\n\tvec3 v = vec3( sin( dot( p, vec3( 113.0, 317.0, 233.0 ) ) ) * 43758.5453123,\n\t\t\t\t   sin( dot( p, vec3( 179.0, 547.0, 409.0 ) ) ) * 94113.5982186,\n\t\t\t\t   sin( dot( p, vec3( 251.0, 727.0, 661.0 ) ) ) * 77821.9648357 );\n\treturn fract( v );\n}\n\n\nvec4 checkneighbour( vec2 f, float x, float y ) {\n    vec4 t = texture(iChannel0, fract((f+vec2(x,y))/iResolution.xy));\n    t.r = (t.r==1.0) ? 1.0 : 0.0;\n    t.g = (t.g==1.0) ? 1.0 : 0.0;\n    t.b = (t.b==1.0) ? 1.0 : 0.0;\n    t.a = (t.a==1.0) ? 1.0 : 0.0;\n    return t;\n}\n\n\nfloat gameoflife( float c, float n ) {\n    return ((n==3.0) || (c==1.0 && n==2.0)) ? 1.0 : 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0.0);\n    \n    if (iFrame<10 || texelFetch(iChannel2,ivec2(49,0),0).x==1.0) {\n    \tcol = round( texture(iChannel1, uv) );\t\t\t\t\t\t\t// Initialize with noise\n    } else if (texelFetch(iChannel2,ivec2(50,0),0).x==1.0) {\n        col = vec4(0.0);\t\t\t\t\t\t\t\t\t\t\t\t// Clear simulation\n    } else {\n    \tvec4 cell = texture(iChannel0, uv);\n        vec4 neighbourcount = vec4(0.0);\n        neighbourcount += checkneighbour(fragCoord, -NDIST, -NDIST);\n        neighbourcount += checkneighbour(fragCoord,  0.0,   -NDIST);\n        neighbourcount += checkneighbour(fragCoord,  NDIST, -NDIST);\n        neighbourcount += checkneighbour(fragCoord, -NDIST,  0.0  );\n        neighbourcount += checkneighbour(fragCoord,  NDIST,  0.0  );    \n        neighbourcount += checkneighbour(fragCoord, -NDIST,  NDIST);\n        neighbourcount += checkneighbour(fragCoord,  0.0,    NDIST);\n        neighbourcount += checkneighbour(fragCoord,  NDIST,  NDIST);\n        col.r = gameoflife(cell.r, neighbourcount.r);\n        col.g = gameoflife(cell.g, neighbourcount.g);\n        col.b = gameoflife(cell.b, neighbourcount.b);\n        col.a = gameoflife(cell.a, neighbourcount.a);\n    }\n    \n    if( iMouse.z>0.0 ) {\n    \t// Draw with mouse\n    \tvec2 p = uv-iMouse.xy/iResolution.xy;\n        p.y *= iResolution.y/iResolution.x;\n        \n        #ifdef ROUNDBRUSH\n        float m = length(p);\t\t\t\t//circles\n        #else\n        float m = max(abs(p.x),abs(p.y));\t//squares\n        #endif\n        \n        m = 1.0-m/BRUSHSIZE;\n        vec3 h = hash(vec3(fragCoord, iFrame));\n        col.r = m*h.r\t   >0.5 ? 1.0 : col.r;\n    \tcol.g = m*h.g\t   >0.5 ? 1.0 : col.g;\n    \tcol.b = m*h.b\t   >0.5 ? 1.0 : col.b;\n    \tcol.a = m*(1.0-h.r)>0.5 ? 1.0 : col.a;\n    }\n\t\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//add box blurred trails to simulation from buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 col = vec4(0.0);\n    \n    float b = 0.25;\n    col += texture(iChannel1, fract((fragCoord+vec2(-b, -b))/iResolution.xy));\n    col += texture(iChannel1, fract((fragCoord+vec2(-b,  b))/iResolution.xy));\n    col += texture(iChannel1, fract((fragCoord+vec2( b, -b))/iResolution.xy));\n    col += texture(iChannel1, fract((fragCoord+vec2( b,  b))/iResolution.xy));\n    col /= 4.05;\n    \n    vec4 sim = texture(iChannel0, fragCoord/iResolution.xy).rgba;\n    col = max(col, sim);\n    \n    if (texelFetch(iChannel2,ivec2(50,0),0).x==1.0) col = vec4(0.0);\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}