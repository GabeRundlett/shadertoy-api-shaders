{
    "Shader": {
        "info": {
            "date": "1727675314",
            "description": "Dear fellow scholars; this is glowing text trope with KylBlz",
            "flags": 32,
            "hasliked": 0,
            "id": "XX2yWy",
            "likes": 15,
            "name": "Glowing Text Trope",
            "published": 3,
            "tags": [
                "computer",
                "trope",
                "graphics"
            ],
            "usePreview": 0,
            "username": "KylBlz",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "\nconst float exposure = 0.75;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor.rgb = linear_srgb(ACESFitted(\n        exposure * fragColor.rgb / fragColor.a\n    ));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// message texture, red: grad x, green: grad y, blue: unused, alpha: alpha\n\n// upper case\n#define _A res = min(res, pl(vec2(1., 11.), uv));\n#define _B res = min(res, pl(vec2(2., 11.), uv));\n#define _C res = min(res, pl(vec2(3., 11.), uv));\n#define _D res = min(res, pl(vec2(4., 11.), uv));\n#define _E res = min(res, pl(vec2(5., 11.), uv));\n#define _F res = min(res, pl(vec2(6., 11.), uv));\n#define _G res = min(res, pl(vec2(7., 11.), uv));\n#define _H res = min(res, pl(vec2(8., 11.), uv));\n#define _I res = min(res, pl(vec2(9., 11.), uv));\n#define _J res = min(res, pl(vec2(10., 11.), uv));\n#define _K res = min(res, pl(vec2(11., 11.), uv));\n#define _L res = min(res, pl(vec2(12., 11.), uv));\n#define _M res = min(res, pl(vec2(13., 11.), uv));\n#define _N res = min(res, pl(vec2(14., 11.), uv));\n#define _O res = min(res, pl(vec2(15., 11.), uv));\n#define _P res = min(res, pl(vec2(0., 10.), uv));\n#define _Q res = min(res, pl(vec2(1., 10.), uv));\n#define _R res = min(res, pl(vec2(2., 10.), uv));\n#define _S res = min(res, pl(vec2(3., 10.), uv));\n#define _T res = min(res, pl(vec2(4., 10.), uv));\n#define _U res = min(res, pl(vec2(5., 10.), uv));\n#define _V res = min(res, pl(vec2(6., 10.), uv));\n#define _W res = min(res, pl(vec2(7., 10.), uv));\n#define _X res = min(res, pl(vec2(8., 10.), uv));\n#define _Y res = min(res, pl(vec2(9., 10.), uv));\n#define _Z res = min(res, pl(vec2(10., 10.), uv));\n// special\n#define _sp   _cur.x += _sz.z;\n// state\nvec3 _cur, _sz, _rto;\n// font modifiers\nvoid setCursor(vec2 cur) {\n    _cur = vec3(cur.xyx);\n}\n// \nvoid setSize(vec2 sz) {\n    _sz = vec3(sz, sz.x*0.5);\n    _rto = vec3(1.0 / 16.0);\n}\n// dont use\nvec4 pl(vec2 ltr, vec2 uv) {\n    _cur.x += _sz.z;\n    if (any(lessThan(uv, _cur.xy)) || any(greaterThan(uv, _cur.xy+_sz.xy)))\n        return vec4(1.0);\n    vec2 dlta = uv - _cur.xy,\n    smp = (dlta / _sz.xy + ltr) * _rto.xy;\n    return texture(iChannel0, smp, 0.0) - 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    // this needs to exist\n    vec4 res = vec4(1.0);\n    // this is all the options\n    setSize(vec2(0.31) * vec2(0.5, 0.7));\n    setCursor(vec2(-_sz.z, 0.0));\n    \n    // message:\n    _G _L _O _W _I _N _G _sp _T _E _X _T\n    \n    // end message\n    fragColor = res;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Rendering\n\nvoid textureMap(in float mat, in vec3 hitloc, in vec3 normal, out vec3 diffCol, out vec3 specCol, out vec3 emisCol, out float rough, out float alpha) {\n\n    if (mat == mat_water) {\n        \n        diffCol = vec3(0.1, 0.3, 0.5);\n        specCol = vec3(1.0, 1.0, 0.8);\n        emisCol = vec3(0.0);\n        rough = 0.0;\n        alpha = 1.414;\n        \n    } else if (mat == mat_text) {\n        \n        vec2 texUv = fract((hitloc.xy - texLoc.xy + texSiz.xy) / (texSiz.x * 2.0));\n        vec4 texSmp = texture(iChannel0, texUv, 0.0);\n        \n        float letters = float(texSmp.a < 0.0);\n        float ltrTxtr = pow(noise(8.0 * hitloc.xy - vec2(0.0, float(iFrame) * 0.05)), 2.0);\n        \n        diffCol = vec3(1.0);\n        specCol = vec3(1.0 - letters);\n        emisCol = vec3(1.0 + ltrTxtr * 50.0, 0.3, 0.1) * letters * 4.0;\n        rough = 0.0;\n        alpha = letters * 2.0;\n        \n    }\n    \n}\n\n// modify ray properties\nvoid bsdf(in vec2 fc, in vec3 ro, in vec3 rd, in vec3 n, in vec3 h, in float rough, in float alpha, out vec3 ro2, out vec3 rd2) {\n    \n    // perfect transparency?\n    if (alpha < eps) {\n        rd2 = rd;\n        ro2 = h + rd * 0.01;\n        return;\n    }\n    \n    // decide to reflect or transmit\n    float rng = r21(genSeed(iFrame, ivec2(fc)));\n    float sch = F_Schlick(0.0, 1.0, dot(n, -rd));\n    if (rng < alpha*sch) {\n    \n        rd2 = normalize(reflect(rd, n));\n        ro2 = h + n * eps;\n        \n    } else {\n    \n        rd2 = normalize(refract(rd, n, 1.0003 / 1.333));\n        ro2 = h - n * 0.01 + rd2 * 0.01;\n        \n    }\n}\n\n// calc additive and multiplicative parts\nvec3 luminance(in vec2 fc, in vec3 ro, in vec3 rd, in float t, in float m, in vec3 h, in vec3 n, inout vec3 rc, out float rough, out float alpha) {\n    \n    // main material properties\n    vec3 diffCol = vec3(0.0);\n    vec3 specCol = vec3(1.0);\n    vec3 emisCol = vec3(0.0);\n    textureMap(m, h, n, diffCol, specCol, emisCol, rough, alpha);\n    \n    // perfect transparency?\n    if (alpha < eps) {\n        return vec3(0.0);\n    }\n    \n    // shade ray\n    vec3 col = shade_ggx(genSeed(iFrame, ivec2(fc)), float(iFrame) * 0.001, fc, iChannel0, diffCol, specCol, emisCol, rough, -rd, h, t, n);\n    \n    // distance fog\n    vec3 sky = skyCol(rd) * 0.5;\n    float nz = t / zfar * ieps;\n    col = mix(sky, col, exp2(nz * -TWOPI));\n    \n    // conservation of energy\n    col *= rc;\n    rc *= specCol;\n    \n    return col;\n}\n\nvoid getCameraMatrices(in vec3 pos, in vec3 fwd, in int frameDelta, out mat4 view, out mat4 proj) {\n    view = viewMat(pos, fwd);\n    proj = projectionMat(vec2(0.0), iResolution.x / iResolution.y, FOV);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float time = float(iFrame) * 0.01;\n    vec2 rng = concentric(r22(genSeed(iFrame, ivec2(fragCoord))));\n    \n    // display\n    vec2 uv = (fragCoord.xy + rng * 0.25) / iResolution.xy;\n    vec2 ndc = uv * 2.0 - 1.0;\n    \n    // camera parameters\n    vec3 curpos = vec3(0.5 * sin(-time), 1.0, -5.0) + vec3(rng.xy, 0.0) * 0.007;\n    vec3 curfwd = -normalize(curpos - vec3(0.0, 1.0, 1.0));\n    // camera matrices\n    mat4 view = mat4(1.0);\n    mat4 proj = mat4(1.0);\n    getCameraMatrices(curpos, curfwd, 0, view, proj);\n    \n    // get ray to trace\n    vec3 ro, rd;\n    getCameraRay(view, proj, ndc, ro, rd);\n    \n    // remember first hit for reprojection depth\n    bool firstMarch = true;\n    vec3 firstHit = vec3(0.0);\n    float ttlt = 0.0;\n    \n    // output, conservation of energy\n    vec3 col = vec3(0.0);\n    vec3 rc = vec3(1.0);\n    for (int i = 0; i < 3; i++) {\n        \n        // raymarch scene\n        float dist = zfar;\n        float mat = mat_air;\n        vec3 hit = vec3(0.0);\n        raymarch(ro, time * 0.1, rd, MAX_RAY_STEPS, dist, mat, hit);\n        ttlt += dist;\n        \n        // record first hit?\n        if (firstMarch) {\n            firstHit = hit;\n            firstMarch = false;\n        }\n        \n        // hit nothing? gtfo\n        if (mat == mat_air) {\n            col += skyCol(rd) * rc;\n            break;\n        }\n        \n        // normal xyz, isotropic curvature w\n        vec4 nc = norcurv(hit, time * 0.1, eps);\n        \n        // luminance and update conservation\n        float rough = 1.0;\n        float alpha = 1.0;\n        col += luminance(fragCoord, ro, rd, ttlt, mat, hit, nc.xyz, rc, rough, alpha);\n        \n        // not enough energy to continue? gtfo\n        if (dot(rc, rc) < eps) {\n            break;\n        }\n        \n        // reflect or refract\n        bsdf(fragCoord, ro, rd, nc.xyz, hit, rough, alpha, ro, rd);\n        \n    }\n    \n    // vignette\n    col *= min(1.0, 1.414 - 0.5 * dot(ndc, ndc));\n    col = max(vec3(eps), col);\n    \n    float lsttime = float(iFrame - 1) * 0.01;\n    vec2 lstrng = concentric(r22(genSeed(iFrame - 1, ivec2(fragCoord))));\n    \n    // last camera parameters\n    vec3 lstpos = vec3(0.5 * sin(-lsttime), 1.0, -5.0) + vec3(lstrng.xy, 0.0) * 0.007;\n\tvec3 lstfwd = -normalize(lstpos - vec3(0.0, 1.0, 1.0));\n    // last camera matrices\n    mat4 lstview = mat4(1.0);\n    mat4 lstproj = mat4(1.0);\n    getCameraMatrices(lstpos, lstfwd, -1, lstview, lstproj);\n    \n    // last frame reprojection\n    vec3 lastNDC = reprojCoordsNDC(lstview, lstproj, firstHit);\n    vec2 lastPx = (lastNDC.xy * 0.5 + 0.5) * iChannelResolution[0].xy - 0.5;\n    vec4 lastFrame = reprojectBuffer(iChannel1, ivec2(iChannelResolution[0].xy), lastPx);\n    \n    // temporal smoothing\n    if (lastFrame.a > float(TEMPORALSMOOTHING))\n        lastFrame *= float(TEMPORALSMOOTHING) / lastFrame.a;\n    \n    // encode sample number in w componenet\n    fragColor = lastFrame + vec4(col, 1.0);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SHADOWS\n#define USE_DFD_SMOOTH\n\n// math constants\nconst highp float\n    SQRT2 = 1.4142136, SC45 = 0.7071068, D2R = 0.0174533,\n    eps = 0.001, ieps = 0.999, epsCol = 0.0039062,\n    QTRPI = 0.7853981, HPI = 1.5707963, PI = 3.1415926, TWOPI = 6.2831853,\n    iQTRPI = 1.2732396, iHPI = 0.6366197, iPI = 0.3183098, iTWOPI = 0.1591549;\n\nconst highp float PHI1 = 1.0 - 1.0 / float(1.61803398);\nconst highp vec2  PHI2 = 1.0 - 1.0 / pow(vec2(1.32471795), vec2(1.0, 2.0));\nconst highp vec3  PHI3 = 1.0 - 1.0 / pow(vec3(1.22074408), vec3(1.0, 2.0, 3.0));\n\n// camera properties\nconst float\tznear = 0.03125, zfar = 128.0, FOV = 80.0;\nconst int MAX_RAY_STEPS = 128;\nconst int MAX_SHADOW_STEPS = 32;\nconst int TEMPORALSMOOTHING = 8;\n\n// thanks iradicator\nfloat dfSmooth1(in vec2 fc, in float v) { \n    vec2 q = vec2(uvec2(fc.xy) & uvec2(1));\n    q = q * 2.0 - 1.0;    \n    v -= 0.5 * dFdx(v) * q.x;\n    v -= 0.5 * dFdy(v) * q.y;\n    return v;\n}\nvec3 dfSmooth3(in vec2 fc, in vec3 v) { \n    vec2 q = vec2(uvec2(fc.xy) & uvec2(1));\n    q = q * 2.0 - 1.0;    \n    v -= 0.5 * dFdx(v) * q.x;\n    v -= 0.5 * dFdy(v) * q.y;\n    return v;\n}\n\n// thanks iq - https://www.shadertoy.com/view/llfcRl\nuint spheremap32(in vec3 nor) {\n    vec2 v = nor.xy * inversesqrt(2.0*nor.z+2.0);\n    return packSnorm2x16(v);\n}\n\nvec3 ispheremap32(in uint data) {\n    vec2 v = unpackSnorm2x16(data);\n    float f = dot(v,v);\n    return vec3( 2.0*v*sqrt(1.0-f), 1.0-2.0*f );\n}\n\n// generate a z order curve for each pixel/frame\nint genSeed(in int f, in ivec2 c) {\n    return (c.x + c.y*2 + f) + (c.x*1155 ^ c.y*2244);\n}\n\n// r2 low discrepancy sequence\nfloat r21(in int v) {\n    return fract(PHI1 * float(v));\n}\nvec2 r22(in int v) {\n    return fract(PHI2 * float(v));\n}\nvec3 r23(in int v) {\n    return fract(PHI3 * float(v));\n}\n\n// smoothstepped noise 0 mean\nfloat noise(in vec2 l) {\n    vec2 i = floor(l);\n    vec2 f = fract(l);\n    vec2 m = f * f * (3.0 - 2.0 * f);\n    \n    int seed = 1;\n    float r00 = r21(genSeed(seed, ivec2(i)               ));\n    float r01 = r21(genSeed(seed, ivec2(i) + ivec2(0, 1) ));\n    float r10 = r21(genSeed(seed, ivec2(i) + ivec2(1, 0) ));\n    float r11 = r21(genSeed(seed, ivec2(i) + ivec2(1, 1) ));\n    \n    return mix(mix(r00, r10, m.x), mix(r01, r11, m.x), m.y) - 0.5;\n}\n\n// fractional brownian noise\nfloat fbm(in vec2 l, in float H, const int oct) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    vec2 shift = vec2(0.0);\n    mat2 rot = mat2(cos(0.45), sin(0.45), -sin(0.45), cos(0.45));\n\n    for (int i = 0; i < oct; ++i) {\n        value += amplitude * noise(l);\n        l = rot * l * 2.0 + shift;\n        amplitude *= H;\n    }\n\n    return value;\n}\n\n// orthonormal basis assuming up is +y\nmat3 basisUp(in vec3 forward) {\n    vec3 down = vec3(0.0, -1.0, 0.0);\n    vec3 right = normalize(cross(forward, down));\n    return mat3(right, normalize(cross(forward, right)), forward);\n}\n\n// orthonormal basis at normal\nvoid basis(in vec3 n, out vec3 f, out vec3 r) {\n    float s = (n.z >= 0.0)? 1.0: -1.0;\n    float a = 1.0 / (s + n.z);\n    float b = -n.x*n.y*a;\n    f = vec3(1.0 - n.x*n.x*a*s, b*s, -n.x*s);\n    r = vec3(b, s - n.y*n.y*a, -n.y);\n}\n\nvec2 rotate2d(in vec2 v, in float a) {\n    float sinA = sin(a);\n    float cosA = cos(a);\n    return vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\n// concentric mapping square [0,1] to circle [-1,1]\nvec2 concentric(in vec2 v) {\n    vec2 w = v * 2.0 - 1.0;\n    float thta, rad;\n    if (abs(w.x) > abs(w.y)) {\n        rad = w.x;\n        thta = QTRPI * (w.y/w.x);\n    } else {\n        rad = w.y;\n        thta = HPI - QTRPI * (w.x/w.y);\n    }\n    return rad * vec2(cos(thta), sin(thta));\n}\n\n// uniform sample cone\nvec3 uniformConeDir(vec3 lv, float lr, in vec2 rng) {\n    // cone section\n    float b = length(lv);\n    float sa = lr / sqrt(b*b - lr*lr);\n    vec3 u, r, nlv = normalize(lv);\n    basis(nlv, r, u);\n    return normalize(nlv + sa * (r * rng.x + u * rng.y));\n}\n\n// thanks XT95 - https://www.shadertoy.com/view/Dtl3WS\nfloat F_Schlick(float f0, float f90, float theta) {\n    return f0 + (f90 - f0) * pow(1.0 - theta, 5.0);\n}\n\nfloat D_GTR(float roughness, float NoH, float k) {\n    float a2 = roughness*roughness;\n    return a2 / (PI * pow(NoH*NoH * (a2*a2 - 1.0) + 1.0, k));\n}\n\nfloat G_Smith(float NoV, float roughness2) {\n    float b = NoV*NoV;\n    float a = roughness2*roughness2;\n    return 2.0 * NoV / (NoV + sqrt(a+b - a*b));\n}\n\nfloat GeometryTerm(float NoL, float NoV, float roughness) {\n    float a2 = roughness*roughness;\n    float G1 = G_Smith(NoV, a2);\n    float G2 = G_Smith(NoL, a2);\n    return G1*G2;\n}\n\nfloat ggxDiffuse(float NoL, float NoV, float LoH, float roughness) {\n    float FD90 = 0.5 + 2.0 * roughness * LoH*LoH;\n    float a = F_Schlick(1.0, FD90, NoL);\n    float b = F_Schlick(1.0, FD90, NoV);\n    return a*b / PI;\n}\n\nfloat ggxSpecular(float roughness, float NoH, float NoV, float NoL) {\n    float alpha = roughness*roughness;\n    float beta = 0.5 + roughness * 0.5;\n    float D = D_GTR(alpha, NoH, 2.0);\n    float G = GeometryTerm(NoL, NoV, beta*beta);\n    return D*G / (4.0 * NoL * NoV);\n}\n\n// fast orthogonal matrix inverse\nmat4 orthoInverse(in mat4 m) {\n    mat3 r = transpose(mat3(m));\n    return mat4(\n        vec4(r[0], 0.0),\n        vec4(r[1], 0.0),\n        vec4(r[2], 0.0),\n        vec4(r * -m[3].xyz, 1.0)\n    );\n}\n\n// construct 4x4 view mat from camera origin, forward direction\nmat4 viewMat(in vec3 origin, in vec3 direction) {\n    mat3 bas = basisUp(direction);\n    return mat4(\n        vec4(bas[0], 0.0),\n        vec4(bas[1], 0.0),\n        vec4(bas[2], 0.0),\n        vec4(origin, 1.0)\n    );\n}\n\n// construct 4x4 projection mat using offaxis parameters, aspect ratio, FOV\nmat4 projectionMat(in vec2 offaxis, in float aspect, in float fov) {\n    // proj parameters\n    float f = zfar;\n    float n = znear;\n    float fovrad = fov * D2R;\n    float r =  n * aspect * tan(0.5 * (fovrad - offaxis.x));\n    float l = -n * aspect * tan(0.5 * (fovrad + offaxis.x));\n    float t =  n          * tan(0.5 * (fovrad - offaxis.y));\n    float b = -n          * tan(0.5 * (fovrad + offaxis.y));\n    // construct proj mat\n    return mat4(\n        2.0*n/(r-l),         0.0, (r+l)/(r-l),           0.0,\n                0.0, 2.0*n/(t-b), (t+b)/(t-b),           0.0,\n                0.0,         0.0, (f+n)/(f-n), 2.0*f*n/(f-n),\n                0.0,         0.0,         1.0,           0.0\n    );\n}\n\n// project the pixel at ndc into a worldspace ray\nvoid getCameraRay(in mat4 view, in mat4 proj, in vec2 ndc, out vec3 ro, out vec3 rd) {\n    ro = view[3].xyz;\n    vec4 ndch = transpose(inverse(proj)) * vec4(ndc, 1.0, 1.0);\n    rd = normalize(mat3(view) * vec3(ndch.xy, 1.0));\n}\n\n// project a worldspace location hl into camera NDC using its view projection\nvec3 reprojCoordsNDC(in mat4 view, in mat4 proj, in vec3 hl) {\n    vec4 camspace = orthoInverse(view) * vec4(hl, 1.0);\n    vec4 ndch = camspace * proj;\n    return vec3(ndch.xy / ndch.w, length(camspace));\n}\n\n// 3D reproject given image, distance, pixel location (see reprojCoordsNDC)\nvec4 reprojectBuffer(in sampler2D iChannel, in ivec2 iChanRes, in vec2 fc) {\n    ivec2 ifc = ivec2(fc);\n    // bound check\n    if (any( lessThan( ifc, ivec2(0) )) || any( greaterThan( ifc, iChanRes - 1)))\n        return vec4(0.0);\n    // get the 4 neighboring pixel values\n    vec4 b   = texelFetch(iChannel, ifc,               0);\n    vec4 bx  = texelFetch(iChannel, ifc + ivec2(1, 0), 0);\n    vec4 by  = texelFetch(iChannel, ifc + ivec2(0, 1), 0);\n    vec4 bxy = texelFetch(iChannel, ifc + ivec2(1, 1), 0);\n    // fancy bilinear interpolation\n    vec2 a = fract(fc);\n    return max(vec4(eps), mix(mix(b, bx, a.x), mix(by, bxy, a.x), a.y));\n}\n\n// Thanks Paniq\nvec3 linear_srgb(in vec3 x) {\n    return mix(1.055*pow(x, vec3(1./2.4)) - 0.055, 12.92*x, step(x, vec3(0.0031308)));\n}\n\nvec3 srgb_linear(in vec3 x) {\n    return mix(pow((x + 0.055)/1.055,vec3(2.4)), x / 12.92, step(x, vec3(0.04045)));\n}\n\n// Thanks TheRealMJP - https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\nvec3 ACESFitted(in vec3 color) {\n    // ODT_SAT => XYZ => D60_2_D65 => sRGB\n    color = color * mat3(\n        0.59719, 0.35458, 0.04823,\n        0.07600, 0.90834, 0.01566,\n        0.02840, 0.13383, 0.83777\n    );\n    // Apply RRT and ODT\n    vec3 a = color * (color + 0.0245786) - 0.000090537;\n    vec3 b = color * (0.983729 * color + 0.4329510) + 0.238081;\n    color = a / b;\n    // Back to color space\n    color = color * mat3(\n         1.60475, -0.53108, -0.07367,\n        -0.10208,  1.10813, -0.00605,\n        -0.00327, -0.07276,  1.07602\n    );\n    // Clamp to [0, 1]\n    return clamp(color, 0.0, 1.0);\n}\n\nvec2 sdMin(in vec2 a, in vec2 b) {\n    return (a.x < b.x)? a: b;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec3 texLoc = vec3(0.0, 0.7, 0.0);\nvec3 texSiz = vec3(5.0, 1.0, eps);\n\nconst float mat_air = 0.0;\nconst float mat_water = 1.0;\nconst float mat_text = 2.0;\n\nvec3 skyCol(in vec3 rd) {\n    vec3 col1 = pow(vec3(1.83, 2.15, 2.45) * 0.42, vec3(4.4));\n    vec3 col2 = pow(vec3(1.28, 1.79, 2.50) * 0.28, vec3(4.4));\n    vec3 sky = mix(col1, col2, sqrt(max(eps, rd.y)));\n    return mix(sky, vec3(0.0), sqrt(max(eps, -rd.y)));\n}\n\nvec2 sdf(in vec3 c, in float t) {\n    vec2 d = vec2(zfar, mat_air);\n    \n    // waves\n    float terr = -abs(fbm(c.zx * vec2(0.5, 0.5) + vec2(t, t),   1.0,    1)) +\n                0.2 * fbm(c.zx * vec2(4.0, 1.0) - vec2(t, 0.0), 0.7071, 2);\n    d = sdMin(d, vec2(c.y - terr * 0.5, mat_water));\n    \n    // glowing text\n    d = sdMin(d, vec2(sdBox(c - texLoc, texSiz), mat_text));\n    \n    return d;\n}\n\n// Thanks Nimitz https://www.shadertoy.com/view/Xts3WM\nvec4 norcurv(in vec3 p, in float t, in float ep) {\n    vec2 e = vec2(-1.0, 1.0)*ep;\n    float t1 = sdf(p + e.yxx, t).x, t2 = sdf(p + e.xxy, t).x;\n    float t3 = sdf(p + e.xyx, t).x, t4 = sdf(p + e.yyy, t).x;\n    return vec4(normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4), (t1+t2+t3+t4 - 4.0*sdf(p, t))/(ep*ep));\n}\n\nvoid raymarch(in vec3 rayPos, in float time, in vec3 rayDir, const int MAX_STEPS, out float t, out float mat, out vec3 hitloc) {\n    hitloc = rayPos;\n    mat = mat_air;\n    t = eps;\n    float inside = sign(sdf(hitloc, time).x);\n    float relax = 1.0;\n    float lastT = t;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec2 sd = sdf(hitloc, time) * inside;\n        if (sd.x < eps) {\n            if (relax >= 1.0) {\n                relax = 0.5;\n                t = lastT;\n            } else {\n                mat = sd.y;\n                break;\n            }\n        }\n        lastT = t;\n        t += sd.x * relax;\n        hitloc = rayPos + rayDir * t;\n        if (t > zfar)\n            return;\n    }\n}\n\nvec3 sampleText(in vec3 hitloc, in sampler2D glowtxt, in int seed) {\n    // uniform cube [0,1]\n    vec3 u = r23(seed);\n    // scale to text size, pos\n    u = u * 2.0 - 1.0;\n    u *= texSiz;\n    u += texLoc;\n    // sample texture for sd and grad\n    // snap to nearest surface\n    // pdf has to do with average density of text (high mip lvl of channel?)\n    return u;\n}\n\nvoid sampleLight(in vec3 hitloc, in float time, in sampler2D glowtxt, in int seed, out vec3 lv, out float pdf) {\n#ifdef SHADOWS\n    vec3 ll = sampleText(hitloc, glowtxt, seed);\n    lv = normalize(ll - hitloc);\n    float t;\n    float m;\n    vec3 h;\n    raymarch(hitloc, time, lv, MAX_RAY_STEPS, t, m, h);\n    pdf = 16.0 * float(m == mat_text) / (1.0+t*t);\n#else\n    lv = vec3(0.0, 1.0, 0.0);\n    pdf = 1.0;\n#endif\n}\n\n\n// pixel, material properties, surface properties, light properties\nvec3 shade_ggx(in int seed, in float time, in vec2 fc, in sampler2D glowtxt, in vec3 diffCol, in vec3 specCol, in vec3 emisCol, in float rough, in vec3 v, in vec3 h, in float t, in vec3 n) {\n    \n    // sample light\n    vec3 lv = vec3(0.0);\n    float pdf = 1.0;\n    sampleLight(h + n * eps, time, glowtxt, seed, lv, pdf);\n    \n#ifdef USE_DFD_SMOOTH\n    bool shouldSmooth = dot(dfSmooth3(fc, n), n) > 0.9;\n#endif\n\n    float dnl = max(0.0, dot(n, lv));\n    float dnv = max(0.0, dot(n, v));\n    \n    // decide to shade\n    float diff = 0.0;\n    float spec = 0.0;\n    if (dnl > 0.0) {\n    \n        // light stuff\n        vec3 hv = normalize(lv + v);\n        float dnh = max(0.0, dot(n, hv));\n        float dlh = max(0.0, dot(lv, hv));\n        // value sharing\n#ifdef USE_DFD_SMOOTH\n        if (shouldSmooth)\n            pdf = dfSmooth1(fc, pdf);\n#endif\n        // ggx\n        diff = ggxDiffuse(dnl, dnv, dlh, rough) * pdf;\n        spec = ggxSpecular(rough, dnh, dnv, dnl) * pdf;\n    }\n    \n    // base ambient\n    float amb = 0.01;\n    // integrate, clamping spec is biased\n    vec3 color = (amb + diff) * diffCol;\n    color += spec * specCol;\n    color += emisCol;\n    return color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}