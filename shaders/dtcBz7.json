{
    "Shader": {
        "info": {
            "date": "1701082564",
            "description": "From https://www.shadertoy.com/view/ctdfzN",
            "flags": 0,
            "hasliked": 0,
            "id": "dtcBz7",
            "likes": 2,
            "name": "Colored speed lines",
            "published": 3,
            "tags": [
                "speed"
            ],
            "usePreview": 0,
            "username": "michael_dll",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "// Modified fork of \"Speed lines\" by \"Hadyn\": https://www.shadertoy.com/view/4dSyWK\n\n#define RADIUS 12.0\n#define EDGE 0.3\n\nconst vec3 COLOR = vec3(1., 1., 0.);\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n\t vec3 s = floor(p + dot(p, vec3(0.3333333)));\n\t vec3 x = p - s + dot(s, vec3(0.1666667));\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t vec3 x1 = x - i1 + 0.1666667;\n\t vec3 x2 = x - i2 + 2.0*0.1666667;\n\t vec3 x3 = x - 1.0 + 3.0*0.1666667;\n\t vec4 w, d;\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t w = max(0.6 - w, 0.0);\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t return dot(d, vec4(52.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 2.;\n    float scale = 50.0;\n    vec2 uv = (fragCoord.xy*2. - iResolution.xy) / iResolution.y * 0.5;\n    vec2 p = vec2(0.5*iResolution.x/iResolution.y, 0.5) + normalize(uv) * min(length(uv), 0.05);\n    vec3 p3 = scale*0.25*vec3(p.xy, 0) + vec3(0, 0, time*0.025);\n    float noise = simplex3d(p3 * 32.0) * 0.5 + 0.5;\n    float dist = abs(clamp(length(uv)/RADIUS, 0.0, 1.0)*noise*2.-1.);\n    float stepped = smoothstep(EDGE-.5,EDGE+.5, noise * (1.0-pow(dist, 4.0)));\n    float final = smoothstep(EDGE - 0.05, EDGE + 0.05, noise*stepped);\n    \n    \n\tfragColor = vec4(COLOR * final,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}