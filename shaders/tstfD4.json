{
    "Shader": {
        "info": {
            "date": "1605157490",
            "description": "I had some fun working out a line-line intersection formula today and made a shader to go with it. You can see (and interact with) it on desmos too if you would like. Desmos line-line intersection graph: https://www.desmos.com/calculator/o4acq0akw8",
            "flags": 0,
            "hasliked": 0,
            "id": "tstfD4",
            "likes": 4,
            "name": "Line-Line Intersection",
            "published": 3,
            "tags": [
                "math",
                "lines",
                "intersection"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 676
        },
        "renderpass": [
            {
                "code": "float InfiniteLine(in vec2 p, in vec2 a, in vec2 b, in float thickness) {\n    vec2 pa = p - a, ba = b - a;\n    return smoothstep(thickness, 0.0, length(pa - ba * dot(pa, ba) / dot(ba, ba)));\n}\n\nfloat Point(in vec2 p, in vec2 o, in float r, in float softness) {\n    return smoothstep(softness, 0.0, length(p - o) - r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\n    // First line's control points:\n    vec2 a1 = vec2(cos(iTime * 0.3125), sin(iTime * 0.125)) * 0.5;\n    vec2 b1 = vec2(sin(iTime *  0.25), cos(iTime * 0.75)) * 0.5;\n\n    // Draw the first line's control points and the first line:\n    color += Point(uv, a1, 0.01, 0.01);\n    color += Point(uv, b1, 0.01, 0.01);\n\n    color += InfiniteLine(uv, a1, b1, 0.01);\n\n    // Second line's control points:\n    vec2 a2 = vec2(cos(iTime * 0.325), sin(iTime * 0.3125)) * 0.5;\n    vec2 b2 = vec2(sin(iTime * 0.325), cos(iTime *  0.125)) * 0.5;\n\n    // Draw the second line's control points and the second line:\n    color += Point(uv, a2, 0.01, 0.01);\n    color += Point(uv, b2, 0.01, 0.01);\n\n    color += InfiniteLine(uv, a2, b2, 0.01);\n\n    // Calculate their slopes and y-intercepts:\n    float deltaX1 = b1.x - a1.x;\n    float deltaX2 = b2.x - a2.x;\n\n    float slope1 = 1000000.0;\n    float slope2 = 1000000.0;\n\n    if (deltaX1 != 0.0) {\n        slope1 = (b1.y - a1.y) / deltaX1;\n    }\n\n    if (deltaX2 != 0.0) {\n        slope2 = (b2.y - a2.y) / deltaX2;\n    }\n\n    float yIntercept1 = a1.y - a1.x * slope1;\n    float yIntercept2 = a2.y - a2.x * slope2;\n\n    if (slope1 != slope2) {\n        // Calculate the intersection:\n        float intersectX = (yIntercept1 - yIntercept2) / (slope2 - slope1);\n        float intersectY = intersectX * slope1 + yIntercept1;\n\n        // Draw the intersection:\n        color += Point(uv, vec2(intersectX, intersectY), 0.025, 0.01);\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}