{
    "Shader": {
        "info": {
            "date": "1713294040",
            "description": "fakes diffraction spikes (if it doesn't display, try increasing the resolution)",
            "flags": 32,
            "hasliked": 0,
            "id": "4cVGWV",
            "likes": 0,
            "name": "star blur",
            "published": 3,
            "tags": [
                "2d",
                "stars",
                "sampler"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "const vec3 directions[] = vec3[](\n    vec3(1,0,1.5),\n    vec3(-1,0,1.5),\n    vec3(0,1,0.5),\n    vec3(0,-1,0.5),\n    vec3(-0.5,sqrt(3.0)/2.0,1),\n    vec3(0.5,sqrt(3.0)/2.0,1),\n    vec3(-0.5,-sqrt(3.0)/2.0,1),\n    vec3(0.5,-sqrt(3.0)/2.0,1)\n);\n\nvec4 sampleBlurred(vec2 uv){\n    vec4 acc = vec4(0);\n    const float lengthFactor = 800.0;\n    for (int i = 0; i < directions.length(); i++){\n        for (float j = 0.0; j < 60.0*directions[i].z; j++){\n            acc += pow(texture(iChannel1,fract(uv + directions[i].xy*j*0.001)/2.0)*lengthFactor*directions[i].z/(j*j + lengthFactor*directions[i].z),vec4(2.0));\n        }\n    }\n    return acc;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.y;\n\n    fragColor = sampleBlurred(fract(uv))*0.5 + maxc(texture(iChannel0,fract(uv)).xyz)*4.0 + texture(iChannel2,fract(uv)/8.0)*4.0;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 col = hash22(fragCoord).xy;\n    fragColor = vec4(blackbody(fpow(col.x,0.999)*15000.0)*(col.y*col.y),0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy*2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy*2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0,fragCoord/iResolution.xy*2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float fpow(float x, float k){\n    return x > k ? pow((x-k)/(1.0-k),2.0) : 0.0;\n}\n\nfloat maxc(vec3 x){\n    return max(max(x.x,x.y),x.z);\n}\n\n//by user FabriceNeyret2, https://www.shadertoy.com/view/4tdGWM\nvec3 blackbody(float T){\n    vec3 col = vec3(0);\n    const float target_exposure = 0.5; //0.1 to 5.1\n    float h = 6.6e-34, k=1.4e-23, c=3e8; // Planck, Boltzmann, light speed  constants\n    vec3 f = 4e14 * (1.+.5*vec3(0,1,2)); \n    col += 1e7/target_exposure*2.*(h*f*f*f)/(c*c) / (exp((h*f)/(k*T)) - 1.);  // Planck law\n    return col;\n}\n\nvec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}