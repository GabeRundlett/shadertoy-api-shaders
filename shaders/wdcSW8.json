{
    "Shader": {
        "info": {
            "date": "1571962617",
            "description": "A proof of concept demo for simulating satellite/planet/comet orbits using semi-implicit Euler method of solving differential equations. ",
            "flags": 32,
            "hasliked": 0,
            "id": "wdcSW8",
            "likes": 13,
            "name": "Oribital Mechanics",
            "published": 3,
            "tags": [
                "star",
                "planet",
                "orbit",
                "physics",
                "gravity",
                "euler",
                "force",
                "satellite"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 894
        },
        "renderpass": [
            {
                "code": "/**\nA simple proof of concept 2D demo how a star's gravitational force affects\na planet's orbit revolving around it. I used the semi-implicit Euler's method\nof integrating differential equations for calculating the planet's position\nand velocity every step. The code for the simulation is contained in the common\ntab. Buffer A draws the planet's orbits and Buffer B performs FXAA on the orbits\nto get rid of some jaggedness, and Buffer C draws the planet and the star itself.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = textureLod(iChannel0, uv, 0.).rgb;  \n    if (fragCoord.y < 1.)\n    {\n\t\tcol *= 0.;   \n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\nThis buffer calculates and draws the planet's orbit. It takes the planet's\nprevious and current position to use for a 2D line sdf. I should be using \nsplines for drawing the orbit but in this case delta is so small that it\nhardly makes any difference.\n*/\n\n// 2D line sdf from SFPGMR (www.shadertoy.com/view/4ltSzH)\nfloat line3( in vec2 p, in vec2 a, in vec2 b,in float t)\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float d = length( pa - ba*h );\n    \n    return smoothstep(t / iResolution.y, 0., d );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = textureLod(iChannel0, uv, 0.).rgb;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // current position and velocity\n    vec4 earthData = texelFetch(iChannel0, ivec2(0, 0), 0);\n\n    CelestialBody sun, earth;\n    // calculate new position and velocity using Euler's integration \n    updateOrbit(sun, earth, earthData, iFrame);\n    \n    // draw the orbit\n    if (iFrame > 20)\n    {\n    \tfloat o = line3(uv, earthData.xy, earth.pos, 1.5);\n        col = mix(col*.9995, vec3(o), o); // Thanks FabriceNeyret2 for suggesting this! <3\n    }\n    \n    col = clamp(col, 0., 1.);\n    fragColor = vec4(col, 1.);\n    \n    // store planet vel and pos for the next frame\n    if (fragCoord.y < 1.)\n    {\n        fragColor = vec4(earth.pos, earth.vel);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\nFXAA performed on orbit lines to get rid of SOME aliasing. This is not a perfect solution\nthough. I will change it to TAA or use splines or some other better solution eventually. \nFXAA code is taken directly from: github.com/mattdesl/glsl-fxaa\n*/\n\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#define FXAA_SPAN_MAX     8.0\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\n//optimized version for mobile, where dependent \n//texture reads can be a bottleneck\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture(tex, v_rgbSE).xyz;\n    vec4 texColor = texture(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    \n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    \n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    \n    vec3 rgbA = 0.5 * (\n        texture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\n\t//compute the texture coords\n\ttexcoords(fragCoord, iResolution.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n\t\n\t//compute FXAA\n\tfragColor = fxaa(iChannel0, fragCoord, iResolution.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/**\nThe code for simulation lies here. The value of G is set to 2 for simplicity\nand for the sake of this demo. The integration is done in line 55 and 56 and\nis repeated 100 times for accuracy. I just chose the number 100 by sheer trial\nand error (:p) where it seemed like a reasonable number to yield acccurate results and\nbe fast enough for the whole simulation.\n*/\n\n#define G 2.\n\nconst vec2 earthPosition = vec2(.4, .4);\nconst vec2 earthVelocity = vec2(1., -2.);\nconst vec2 sunPosition = vec2(1.2, .5);\nconst float sunMass = 4.2;\nconst float h = 1./28800.; // sim delta\n\nstruct CelestialBody\n{\n    vec2 pos, vel;\n    float mass;\n};\n\nvec2 gravitationalForce(vec2 planetPos, vec2 sunPos, float sunMass)\n{\n    vec2 toCenter = sunPos-planetPos;\n    float r = length(toCenter);\n\treturn toCenter * ((G * sunMass) / (r*r*r)); // F = rvector * GmM/(r)^3\n}\n\n// Calculate next tangent velocity\nvec2 calcVel(vec2 currVel, vec2 currPos, vec2 sunPos, float sunMass, float h)\n{\n    return currVel + gravitationalForce(currPos, sunPos, sunMass) * h;\n}\n\n// Calculate next tangent acceleration\nvec2 calcAccl(vec2 currVel, vec2 currPos, vec2 sunPos, float sunMass, float h)\n{\n \treturn (gravitationalForce(currPos, sunPos, sunMass) +\n        gravitationalForce(currPos + currVel * h, sunPos, sunMass) * h);\n}\n\nvoid updateOrbit(inout CelestialBody sun, inout CelestialBody earth, vec4 earthData, int iFrame)\n{\n    sun.pos = sunPosition;\n    sun.mass = sunMass;\n    if (iFrame < 20)\n    {\n        earth.pos = earthPosition;\n    \tearth.vel = earthVelocity;\n    }\n    else\n    {\n        earth.pos = earthData.xy;\n    \tearth.vel = earthData.zw;\n    }\n    \n    // Semi-implicit Euler's method\n    for (int i = 0; i < 100; ++i)\n    {\n        earth.vel += calcAccl(earth.vel, earth.pos, sun.pos, sun.mass, h) * h;\n    \tearth.pos += calcVel(earth.vel, earth.pos, sun.pos, sun.mass, 0.) * h;  \n    }\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/**\nThis buffer performs the integration and draws the sun and the earth using the\nnewly calculated position and velocity.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 orbit = textureLod(iChannel1, uv, 0.);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // current position and velocity\n    vec4 earthData = texelFetch(iChannel0, ivec2(0, 0), 0);\n\n    CelestialBody sun, earth;\n    // calculate new position and velocity using Euler's integration \n\tupdateOrbit(sun, earth, earthData, iFrame);\n\n    vec3 col = vec3(0.);   \n    \n    // draw the planet\n   \tcol += smoothstep(.03, .025, length(uv-earth.pos)) * vec3(.6, .9, 1.3);\n    \n    if (fragCoord.y > 1.)\n        col = mix(orbit.rgb, col, 1.-step(.028, length(uv-earth.pos)));\n    \n    // draw the sun\n    col += (1.- smoothstep(.03, .0, .001/pow(length(uv-sun.pos), 1. + sin(iTime*3.)*.04)))\n        * vec3(1.6, .8, .5); \n    \n    fragColor = vec4(col,1.0);\n    \n    // store planet vel and pos for the next frame\n    if (fragCoord.y < 1.)\n    {\n        fragColor = vec4(earth.pos, earth.vel);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}