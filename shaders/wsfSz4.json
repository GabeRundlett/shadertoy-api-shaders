{
    "Shader": {
        "info": {
            "date": "1550700034",
            "description": "Experimenting with cheap green screen combined with shader with reflections.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsfSz4",
            "likes": 2,
            "name": "JCVD Green Screen + Animation",
            "published": 3,
            "tags": [
                "reflection",
                "greenscreen",
                "greenscreen",
                "lights",
                "rotation",
                "film",
                "funny",
                "jcvd",
                "humor",
                "artofshaders"
            ],
            "usePreview": 0,
            "username": "synergyseeker1",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "// chroma key step 1\n\n\nconst float PI = 3.14;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n}\n\n\nvec4 drawShape(vec2 uv, vec2 position, int sides,float size, vec3 color) {\n\t// Angle from current pixel\n    uv = rotate2d((iTime*-.2)*3.14)*uv;\n  \tfloat a = atan(uv.x,uv.y)+PI;\n    // radius from current pixel\n \tfloat r = 2.0*PI/float(sides);\n  \t// modulate the distance\n    \n  \tfloat d = cos(floor(.5+a/r)*r-a)*length(uv);\n\t//define the edges, and make smooth\n  \tvec4 shape = vec4(1.0-smoothstep(size,size+.08,d));\n  \t//color the shape\n    shape.rgb*=color;\n\treturn shape;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0,uv);\n     \n    // normalize and adjust for aspect ratio\n    vec2 res = iResolution.xy;\n    uv = (fragCoord*2.0- res ) / res.y;\n    uv *= rotate2d(sin(iTime*.01)*6.28);\n\t\n    //initilize colors\n\tvec4 background = vec4(.2,.6,.9,1.0); \n    background*=-uv.y*.7*cos(uv.x);\n    vec4 color = vec4(1.0,.7,.3,1.0);\n    \n    // set shape properties\n    int sides = 3;\n    float size = .5;\n\tvec2 position = vec2(0.0);\n    vec4 shape = drawShape(uv,position,sides,size,color.rgb);\n   \n    // distance field\n    float d = length(shape*1.1)-.5;\n    uv = rotate2d((iTime*.2)*3.14)*uv;\n    uv-=clamp(1.0-d,0.0,1.0)*(cos(d - iTime*.5) );\n\t\n    //combine\n    color*=vec4(.1/length(mod(uv,1.0)-.5) );\n    background*=shape*2.0-d -shape*cos(uv.y)*1.5;\n        \n\t//output final color\n\tvec4 col2 = mix(background, color, color.a);\n\n    \n    if(col.g>=.5 && col.b<=.5 && col.r<=.3){\n        //vec2 uv2 = fragCoord.xy / iResolution.xy;\n    \tvec2 uv2 = (fragCoord*2.0- res ) / res.y;\n    \tcol =  col2  + (shape* texture(iChannel0,vec2(uv2.x,uv2.y)*1.5)) ;\n       \n    }\n   \n    fragColor = vec4(col.rgb, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}