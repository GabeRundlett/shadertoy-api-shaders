{
    "Shader": {
        "info": {
            "date": "1573113245",
            "description": "My participation at codevember 2019 3rd day, the subject is deep.",
            "flags": 0,
            "hasliked": 0,
            "id": "wscSWl",
            "likes": 7,
            "name": "Codevember03 - Deep",
            "published": 3,
            "tags": [
                "2d",
                "octopus",
                "deep",
                "codevember"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nmat2 r2d(float a){float sa = sin(a);float ca = cos(a);return mat2(ca,sa,-sa,ca);}\nfloat lenny(vec2 uv)\n{\n  return abs(uv.x)+abs(uv.y);\n}\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nfloat sdf_cir(vec2 uv,float r)\n{\n  return length(uv)-r;\n}\n\nfloat sdf_rect(vec2 uv, vec2 sz)\n{\n  vec2 r = abs(uv)-sz;\n\n  return max(r.x,r.y)+0.005*cos(iTime+10.*atan(uv.y,uv.x)/(3.1415));\n}\n\nfloat _union(float a, float b)\n{\n  return min(a, b);\n}\n\nfloat _sub(float a, float b)\n{\n  return max(-a,b);\n}\nfloat _inter(float a, float b)\n{\n  return max(a,b);\n}\n\nfloat sdf_tentacle(vec2 uv, float thick, float amp,float freq, float off)\n{\n  uv.x += thick+amp;\n  return (uv.x+thick*0.5)-thick-(sin(off+freq*uv.y)*amp+amp);\n}\n\nfloat sdf_tentacle2(vec2 uv, float thick, float len, float freq, float amp, float off)\n{\n  return _inter(_sub(sdf_tentacle(uv, thick,amp,freq,off),sdf_tentacle(uv-vec2(thick,0.),thick,amp,freq,off)),\n    sdf_rect(uv, vec2(2.,len)));\n}\n\n\nfloat sdf_medusa(vec2 uv)\n{\n  float ret =  mix(sdf_rect(uv, vec2(.07)),length(uv)-0.15,0.5);\n//  ret = _union(sdf_rect(uv, vec2(.1)),tent);\n   ret = _union(sdf_tentacle2(uv-vec2(0.,-.2), 0.001,0.3,30.,0.05*uv.y,iTime),ret);\n   ret = _union(sdf_tentacle2(r2d(sin(0.5*iTime+uv.y*2.)*.5)*uv-vec2(0.,-.2), 0.001,0.3,30.,0.05*uv.y,iTime),ret);\n   ret = _union(sdf_tentacle2(r2d(sin(1.+0.3*iTime+uv.y*2.)*.5)*uv-vec2(0.,-.2), 0.001,0.1,25.,0.05*uv.y,iTime+0.3),ret);\n   ret = _union(sdf_tentacle2(r2d(sin(0.7+0.5*iTime+uv.y*2.)*.5)*uv-vec2(0.,-.2), 0.02,0.2,15.,0.1*uv.y,iTime+1.),ret);\n\n\n   return ret;\n  return sdf_rect(uv+vec2(0.1,0.),vec2(0.15));\n}\n\nint mat = -1;\n\n\nfloat map(vec2 uv)\n{\n  uv += vec2(sin(uv.x+uv.y+iTime)*0.03);\n  return sdf_medusa(uv*r2d(-0.2+sin(iTime*0.5)*0.2));\n}\n\n// This one must change, it does not work as intended and does not contribute a lot to the final image)\nvec3 rdrBack(vec2 uv)\n{\n  const int lines = 8;\n  vec3 acc= vec3(1.);\n\n  for (int i = 0; i< lines;++i)\n  {\n    float fi = float(i);\n    vec2 pos= 1.*vec2(rand(vec2(fi*12., 8.-fi)), rand(vec2(mod(fi,0.5),fi)));\n    pos-= vec2(0.2);\n    pos-=pos;\n    float speed = 0.5;\n    pos -= max((fi/8.),0.1)*vec2(sin(speed*(iTime+fi)),cos(speed*(fi+iTime*(mod(fi,2.)<0.1?1.:-1.))));\n    acc -= 3.*pow(length(uv-pos)*0.005*fi,1.);\n  }\n  return acc;\n}\n\n\nvec3 rdr(vec2 uv)\n{\n  vec3 overlay;\n  vec3 col;\n  vec3 back;\n  back = pow(length(uv),4.)+vec3(.5)*rand(uv);\n  back *= rdrBack(uv);\n  float obj = map(uv);\n  float obs = float(0.05*sin(uv.x*5.+iTime)<uv.y+0.1*sin(iTime*0.1));\nvec3 light = obs*2.*vec3(0.15,0.21,0.24)*sat(1.-lenny(uv*vec2(0.5,3.)));\n\n  col = mix(vec3(.0),back+light,clamp(obj*50.,.0,1.))*3.;\nfloat freq = 200.;\nback*= vec3(0.5)*((sin(uv.x*freq)*0.5+0.5)+\n  (sin(uv.y*freq+iTime)*0.5+0.5))\n  +sin((sin(uv.x*20.-iTime*0.5)*uv.y*1.2+iTime*0.1)*20.5);\n  overlay = back;\n  float a = atan(uv.y,uv.x);\n  return clamp(1.-length(uv*1.3),0.,1.  )*(col+overlay)*(1.-(sin(a*30.))*(length(uv)*(sin(a*20.+iTime))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv-= vec2(.5)*(iResolution.xy/iResolution.xx);\n  uv *= 2.;\n  vec3 col;\n\n\n  col = rdr(uv);\n  col*= mix(vec3(0.23,0.12,clamp(-uv.y,0.,1.)*0.5).zyx*5.,col,0.8);\n  col += 1.5*vec3(0.15,0.31,0.24)*(1.-lenny(uv*vec2(1.,1.)));\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}