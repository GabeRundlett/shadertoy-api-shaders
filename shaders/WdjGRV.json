{
    "Shader": {
        "info": {
            "date": "1549377423",
            "description": "I just wanted to do something new that I've never done before, but It's trash.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdjGRV",
            "likes": 6,
            "name": "SimpleIFS Test",
            "published": 3,
            "tags": [
                "ifs"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 429
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdCross( in vec3 p , float inf)\n{\n  float da = sdBox(p.xyz,vec3(inf,1.0,1.0));\n  float db = sdBox(p.yzx,vec3(1.0,inf,1.0));\n  float dc = sdBox(p.zxy,vec3(1.0,1.0,inf));\n  return min(da,min(db,dc));\n}\n\nvec3 lineTex(vec2 uv)\n{\n    float stripeSize = 50.0;\n    float t = iTime*10.0;\n    return vec3(tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize);\n}\n\nvec4 map(vec3 p){\n    float speed = iTime*3.0;\n\n    float d = 0.0;\n    mat3 rot = matRotateY(iTime)*matRotateX(iTime);\n    mat3 rot2 = matRotateX(iTime)*matRotateY(iTime);\n    \n    vec3 p2 = p;\n    float dist = 0.5+sin(iTime)*0.2;\n    int iter = 2;\n    p2 = abs(p2);\n    p2 -= dist;\n    p2 *= rot;\n    d = sdCross(p2+vec3(0.0,0.0,0.0), 0.3);\n    p2 = p;\n    \n    for(int i = 1; i<=iter; i++){\n        p2 = abs(p2);\n        p2 -= dist*float(i);\n        p2 *= rot2;\n        d = min(d,sdCross(p2+vec3(0.0,sin(iTime*float(i))*0.5,0.0), 0.3));\n        p2 = p;\n    }\n    \n    return vec4(lineTex(p.xy),d);\n}\n\nvec3 normalMap(vec3 p){\n\tfloat d = 0.0001;\n\treturn normalize(vec3(\n\t\tmap(p + vec3(  d, 0.0, 0.0)).w - map(p + vec3( -d, 0.0, 0.0)).w,\n\t\tmap(p + vec3(0.0,   d, 0.0)).w - map(p + vec3(0.0,  -d, 0.0)).w,\n\t\tmap(p + vec3(0.0, 0.0,   d)).w - map(p + vec3(0.0, 0.0,  -d)).w\n\t));\n}\n\nfloat shadowMap(vec3 ro, vec3 rd){\n\tfloat h = 0.0;\n\tfloat c = 0.001;\n\tfloat r = 1.0;\n\tfloat shadow = 0.5;\n\tfor(float t = 0.0; t < 30.0; t++){\n\t\th = map(ro + rd * c).w;\n\t\tif(h < 0.001){\n\t\t\treturn shadow;\n\t\t}\n\t\tr = min(r, h * 16.0 / c);\n\t\tc += h;\n\t}\n\treturn 1.0 - shadow + r * shadow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tmat3 camRotY = matRotateY(radians(iTime*10.0));\n    \n\tvec3 ro=vec3(0.,0.0,-4.);\n    vec3 rd=normalize(vec3(p,1.0));\n\t\n    float t, dist;\n\tt = 0.0;\n\tvec3 distPos = vec3(0.0);\n\tvec4 distCl = vec4(0.0);\n\tfor(int i = 0; i < 60; i++){\n\t\tdistCl = map(distPos);\n\t\tdist = distCl.w;\n        if(t>13.)break;\n\t\tt += dist;\n\t\tdistPos = (ro+rd*t)*camRotY;\n\t}\n\n\tvec3 color;\n\tfloat shadow = 1.0;\n\t\n\tif(t < 13.){\n\t\t// lighting\n\t\tvec3 lightDir = vec3(.0);\n\t\tvec3 light = normalize(lightDir);\n\t\tvec3 normal = normalMap(distPos);\n\n\t\t// difuse color\n\t\tfloat diffuse = clamp(dot(light, normal), 1.0, 1.0);\n\t\tfloat lambert = max(.0, dot( normal, light));\n\t\t\n\t\t// shadow\n\t\tshadow = shadowMap(distPos + normal * 0.001, light);\n\n\t\t// result\n\t\tcolor += vec3(lambert);\n\t\tcolor = diffuse*(distCl.xyz+(.1-length(p.xy)/3.))*vec3(1.0);\n\t}else{\n        color = vec3(0.0);\n\t}\n\n\t// rendering result\n\tfloat brightness = 1.0;\n\tvec3 dst = (color * max(0.5, shadow))*brightness;\n\tfragColor = vec4(dst, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}