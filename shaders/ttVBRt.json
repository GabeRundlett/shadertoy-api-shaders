{
    "Shader": {
        "info": {
            "date": "1614903818",
            "description": "Synced to music.\nPress space to clear.",
            "flags": 112,
            "hasliked": 0,
            "id": "ttVBRt",
            "likes": 4,
            "name": "Bezier Strokes and Chill",
            "published": 3,
            "tags": [
                "bezier",
                "brush",
                "chill"
            ],
            "usePreview": 0,
            "username": "Qendolin",
            "viewed": 477
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 25970,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/kudasaibeats/the-girl-i-havent-met"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float seed = 0.;\n\nfloat hash(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n/* unused\nfloat hash2(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n*/\n\nfloat rand(float p, float s) {\n    return hash(p+seed+s);\n}\n\nfloat smoothRand(float interval, float x, float seed) {\n    float a = floor(x / interval);\n    return mix(rand(a, hash(seed)), rand(a+1., hash(seed)), fract(x/interval));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/* unused\nvec2 bezier4(vec2 A, vec2 B, vec2 C, vec2 D, float t) {\n  vec2 E = mix(A, B, t);\n  vec2 F = mix(B, C, t);\n  vec2 G = mix(C, D, t);\n\n  vec2 H = mix(E, F, t);\n  vec2 I = mix(F, G, t);\n\n  vec2 P = mix(H, I, t);\n\n  return P;\n}\n*/\n\nvec2 bezier5(vec2 A, vec2 B, vec2 C, vec2 D, vec2 E, float t) {\n  vec2 A1 = mix(A, B, t);\n  vec2 B1 = mix(B, C, t);\n  vec2 C1 = mix(C, D, t);\n  vec2 D1 = mix(D, E, t);\n\n  vec2 A2 = mix(A1, B1, t);\n  vec2 B2 = mix(B1, C1, t);\n  vec2 C2 = mix(C1, D1, t);\n\n  vec2 A3 = mix(A2, B2, t);\n  vec2 B3 = mix(B2, C2, t);\n  \n  vec2 P = mix(A3, B3, t);\n\n  return P;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SUBSAMPLES 10.\n#define KEY_SPACE 32\n\nvec2 uv;\nvec2 px;\n\nvec4 brush(float iTime) {\n    const float speed = 8.*60./140.; // Song is 140 bpm, 8 beat measure\n    vec3 col = hsv2rgb(vec3(\n        2.*smoothRand(speed, iTime, 1.), \n        0.3+smoothRand(speed, iTime, 2.)*0.2, \n        1.)); \n    \n    vec2 A = vec2(smoothRand(speed, iTime, 4.)*1.25-0.125, smoothRand(speed, iTime, 5.)*1.25-0.125);\n    vec2 B = vec2(smoothRand(speed, iTime, 6.)*1.25-0.125, smoothRand(speed, iTime, 7.)*1.25-0.125);\n    vec2 C = vec2(smoothRand(speed, iTime, 8.)*1.25-0.125, smoothRand(speed, iTime, 9.)*1.25-0.125);\n    vec2 D = vec2(smoothRand(speed, iTime, 10.)*1.25-0.125, smoothRand(speed, iTime, 11.)*1.25-0.125);\n    vec2 E = vec2(smoothRand(speed, iTime, 12.)*1.25-0.125, smoothRand(speed, iTime, 13.)*1.25-0.125);\n    \n    vec2 pos = bezier5(A, B, C, D, E, mod(iTime/speed, 1.));\n    float r = smoothRand(1., iTime, 6.) * length(px)*10.;\n    \n    float a = smoothstep(r+px.x*2., r, length(pos-uv));\n    return vec4(col, a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord/iResolution.xy;\n    px = 1./iResolution.xy;\n    \n    vec4 color;\n    vec4 last = texture(iChannel0, uv);\n    last = mix(last, vec4(1.), 0.003*iTimeDelta);\n    if(texelFetch( iChannel1, ivec2(KEY_SPACE,0), 0).x > 0.5) last = vec4(1.);\n    \n    for(float i = 1.; i <= SUBSAMPLES; i++) {\n        float p = 1. - i/SUBSAMPLES;\n        vec4 s = brush(iTime-iTimeDelta*p+3./7.);\n        \n        color = mix(last, vec4(s.rgb, 1.), s.a);\n        last = color;\n    }\n    \n    fragColor = mix(vec4(1.), color, color.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}