{
    "Shader": {
        "info": {
            "date": "1672275218",
            "description": "Shader for drawing chars and string in specific places with specific sizes and spacing.\nString needs to be of a specific length, in this case 20.\nChars are representes as ints by the ASCII ord(char). ",
            "flags": 32,
            "hasliked": 0,
            "id": "dtl3Rl",
            "likes": 1,
            "name": "String Engine",
            "published": 3,
            "tags": [
                "font",
                "string",
                "char"
            ],
            "usePreview": 0,
            "username": "ang_rq",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "//#define debug\n\n\nvec4 getCharBoundsOnMap(in int char) {\n    char += 32;\n    float x = mod(float(char), 16.0);\n    float y = 1.-(float(char) - x) / 16.0;\n    vec2 uv = vec2(x, y) / 16.0;\n    return vec4(uv, uv + 0.0625);\n}\n\nbool inBounds(in vec2 uv, in vec4 bounds) {\n    return (uv.x >= bounds.x && uv.x <= bounds.z) && (uv.y >= bounds.y && uv.y <= bounds.w);\n}\n\nvec2 map(vec2 x, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n    return ((x-a)*(d-c))/(b-a) + c;\n}\n\n\nvec4 drawChar(in vec2 uv, in vec2 charDrawPos, in vec2 charSize,\nin vec3 charColorRGB, in vec2 charWidthEdge, vec2 zoomChar, in int char)\n{\n\n    vec4 whereDrawChar = vec4(charDrawPos-charSize/2., charDrawPos+charSize/2.);\n    if(inBounds(uv, whereDrawChar))\n    {\n        \n        vec4 zoom = vec4(zoomChar, -zoomChar);\n        float width = charWidthEdge.x;\n        float edge = charWidthEdge.y;\n        vec4 charSample = vec4(0.);\n        vec4 charBounds = getCharBoundsOnMap(char) + zoom;\n        charSample = texture(iChannel0, map(uv, whereDrawChar.xy, whereDrawChar.zw,\n                                             charBounds.xy, charBounds.zw));\n                                             \n        \n        float dist = 1. - charSample.a;\n        float alpha = smoothstep(width, width + edge, dist);\n        vec4 charColorRGBA = vec4(charColorRGB, alpha);\n        \n        return charColorRGBA;\n    }\n    else\n        return vec4(-1., -2., -3., 0.);\n}\n\n//vec4 drawString(in vec2 uv, in ve2\n\n\nvec4 drawString(in vec2 uv, in vec2 stringPos, in vec2 charSize, \n        in vec3 charColorRGB, in vec2 charWidthEdge, in vec2 zoomChar,\n                in float charSpacing, in int[20] string)\n{\n    int slen = string.length();\n    int slenp2 = slen/2;\n    float x = 0.;\n    for(int i = 0; i < slen; i++)\n    {\n        \n        x = float(i-slenp2)*(charSize.x + charSpacing) + float(slen%2==0)*(charSize.x + charSpacing)/2.;\n        \n        vec2 charPos = vec2(stringPos.x + x, stringPos.y);\n        vec4 color = drawChar(uv, charPos, charSize, charColorRGB,\n                                    charWidthEdge, zoomChar, string[i]);\n        if(color.x != -1.)\n        {\n            return color;\n            break;\n        }\n        x += charSize.x + charSpacing;\n        \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    return vec4(-1., -2., -3., 0.);\n}\n\nint[] string = int[20](65, 66, 67, 68, 65,\n65, 66, 67, 68, 65,\n65, 66, 67, 68, 65,\n65, 66, 67, 68, 65);\n\n\n\n//blending from https://www.shadertoy.com/view/MstfWl\nvec4 oneMinusSrcAlpha(vec4 srcColor, vec4 dstColor)\n{\n    return (srcColor.a * srcColor) + ((1.0 - srcColor.a) * dstColor);\n}\n\n// Pick a blend func for testing\nvec4 blendFunc(vec4 srcColor, vec4 dstColor)\n{\n    return oneMinusSrcAlpha(srcColor, dstColor);\n}\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 charPos = iMouse.xy/iResolution.xy;\n    vec2 charSize = vec2(0.055, 0.19);\n    vec3 charColorRGB = vec3(1.0, 0.5, 0.9);\n    vec2 zoomChar = vec2(0.015, 0.01);\n    float charSpacing = 0.01;\n    vec2 charWidthEdge = vec2(0.5, 0.007); // width and edge\n    \n    vec2 stringPos = iMouse.xy/iResolution.xy;\n    \n    vec4 background = vec4(0.4, 0.7, 0.8, 1.0);\n    \n    \n    //vec4 charColorRGBA = drawChar(uv, charPos, charSize, charColorRGB\n    //                                    , charWidthEdge, 65);\n    vec4 charColorRGBA = drawString(uv, stringPos, charSize, charColorRGB\n                                  , charWidthEdge, zoomChar, charSpacing, string);\n    \n    if(charColorRGBA.r == -1.)\n    {\n        fragColor = background;\n        return;\n    }\n \n    fragColor = blendFunc(charColorRGBA, background);\n    \n \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sLen 20\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}