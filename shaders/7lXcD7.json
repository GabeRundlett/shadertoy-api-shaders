{
    "Shader": {
        "info": {
            "date": "1648184180",
            "description": "创建离散曲线",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXcD7",
            "likes": 1,
            "name": "learnshader007-创建曲线",
            "published": 3,
            "tags": [
                "learn"
            ],
            "usePreview": 0,
            "username": "hi347",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "//顶点着色器：用几个顶点构成几何图形\n//颜色着色器：用几个图形并集，合集，交集，互拆，分割构成几何图形\n\n\n//创建第一个图形\nfloat draw1(vec2 uv,float pct) {    \n    return smoothstep(pct -0.02 ,pct ,uv.y) ;\n}\n\n//创建第二个图形\nfloat draw2(vec2 uv,float pct) {    \n    return smoothstep(pct, pct+0.02 ,uv.y);\n}\n\n//两个图形相减 = 互拆，只保留不重合的部分\nfloat draw3(vec2 uv,float pct) {    \n    return smoothstep(pct -0.02 ,pct ,uv.y) - smoothstep(pct, pct+0.02 ,uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(1.0 *draw3(uv ,pow(uv.x ,5.0)),0.0 ,0.0 ,1.0);\n    /*\n        draw1（）和draw2()功能一样\n        draw3（）只是互拆计算\n        所以分析draw1（）即可掌握曲线制作方法\n        \n        pow()功能= 幂函数  例 pow（2 ,5） = 2 *2 *2 *2 *2 = 32\n        我们画的曲线，本质上是pow（）幂函数\n        通过smoothstep(pct -0.02 ,pct ,uv.y)划分颜色区\n        如果 小于 pow()-0.02 ，返回0，     黑色\n        如果 大于 pow() ，     返回1，     红色\n        如果 区间 pow()        返回0~0.02，淡红色\n    */\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}