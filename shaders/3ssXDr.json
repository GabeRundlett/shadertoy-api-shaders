{
    "Shader": {
        "info": {
            "date": "1551098284",
            "description": "Experimenting with faster ways to sample the volume created by 4 points in the color space ",
            "flags": 0,
            "hasliked": 0,
            "id": "3ssXDr",
            "likes": 3,
            "name": "Color Generation - 4 Keys",
            "published": 3,
            "tags": [
                "colorgeneration"
            ],
            "usePreview": 0,
            "username": "ircss",
            "viewed": 534
        },
        "renderpass": [
            {
                "code": "#define iTime iTime*1.\n#define _Color1 vec3(abs(cos(iTime+12.) + sin(iTime*0.7 + 71.124)),abs(cos(iTime) + sin(iTime*0.8 + 41.)) ,abs(cos(iTime+61.) + sin(iTime*0.8 + 831.32)))*0.5\n#define _Color2 vec3(abs(sin(iTime ) + sin(0.6 * iTime+ 21.)),abs(sin(iTime *0.9 +215.12) + sin(0.93 * iTime+ 52.231)),abs(sin(iTime+ 12.512 ) + sin(0.8 * iTime+ 58.15)))*0.5\n#define _Color3 vec3(abs(sin(iTime *0.58 +89.21) + sin(0.76 * iTime+ 7232.)),abs(sin(iTime *1.1 +0.124) + sin(0.5 * iTime+ 712.)),abs(sin(iTime+ 1.6) + sin(iTime *0.5 + 12.512) ))*0.5\n#define _Color4 vec3(abs(sin(iTime *0.62 +35.28) + sin(0.54 * iTime+ 72.672)),abs(sin(iTime *0.8 +234.124) + sin(0.65 * iTime+ 2.612)),abs(sin(iTime+ 12.4) + sin(iTime *0.4 + 1123.52)))*0.5\n\n\n// creating a parallelogramm based on 2 vectors and using whatever is on the surface of this parallelogramm \n//as color pallete\nvec3 ReturnColor(float r1, float r2){\n return abs(_Color2 - _Color1) * r1 + abs(_Color4 - _Color3) *r2;\n  \n}\nvec3 ReturnColor_2(float r1, float r2){\n return (_Color1+_Color3+  (_Color2 - _Color1) * r1 + (_Color4 - _Color3) *r2)/2.;\n  \n}\nvec3 ReturnColor_3(float r1, float r2){\n return (abs(_Color4 -_Color1) * (1.-r2)+  abs(_Color2 - _Color1) * r1 + abs(_Color3 - _Color1) *r2)/2.;\n  \n}\nvec3 sampleOnATriangle(float r1, float r2, vec3 corner1, vec3 corner2, vec3 corner3 ){\n  return (1. - sqrt(r1))*corner1 + (sqrt(r1)*(1. - r2))*corner2\n\t\t\t\t+ (r2*sqrt(r1)) * corner3;   \n}\n\n\n// Given four points p1, p2, p3, p4, a volume is created with all the points on their corner.\n// If we assume p1 is the origin then the vectors P12, P13, P14are the edges of this volume\n// The linear combination of  aP12 + b P13 + c P14 wgere 0<a,b,c<1 and a+b+c< 1, incapsulates this volume\n// One way of sampeling this with three input is for given r1, r2 and r3, a+b+c = r3 for 0<r3<1\n// in this situation, the different values for a,b,c fill in a triangle which has the three corners\n// P12*r3, P13*r3, P14*r3. Using this https://www.shadertoy.com/view/3s23D3 method we can take a uniform\n// sample on this triangle. These would be the colors shown. The main problem with this method is the \n// Distubrution. For smaller values of r3 the triangle is infinitly small where as it approaches its maximum \n// surface area for r3 -> 1. It like the perspective divid, though not implemented, the distrubution needs\n// to get linearaly more populated as r3-> 1\nvec3  ReturnColor_4(float r1, float r2, float r3){\n\tvec3 P12 = _Color2- _Color1;\n    vec3 P13 = _Color3-_Color1;\n    vec3 P14 = _Color4 - _Color1;\n    return sampleOnATriangle(r1, r2, _Color1+P12*r3, _Color1+P13*r3, _Color1+P14*r3);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 tilingXY = vec2(10., 30.);\n    vec2 uv_2 = uv;\n    uv_2.x *= 5.;\n    float r2 = floor(uv_2.x)/5.;\n    float r1 = floor(fract(uv_2.x)*5.);\n    uv.xy *=tilingXY;\n    vec2 id = floor(uv.xy);\n    uv.xy = fract(uv.xy);\n\t\n    \n    \n    // Output to screen\n   // fragColor = vec4( ReturnColor_3(id.x/tiling, id.y/tiling),1.);\n     //fragColor = vec4( ReturnColor_2(id.x/tiling, id.y/tiling),1.);\n     fragColor = vec4( ReturnColor_4(r1, r2,id.y/tilingXY.y ),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}