{
    "Shader": {
        "info": {
            "date": "1519558645",
            "description": "Heavily inspired by this fan-made picture found online:\nhttps://i.redd.it/ql4q61zyale01.jpg\n\nPractising with signed distance field, recreating shapes from an image",
            "flags": 0,
            "hasliked": 0,
            "id": "4sdyzj",
            "likes": 5,
            "name": "Rebel scum",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "star",
                "space",
                "distance",
                "field",
                "wars",
                "rebel",
                "scum"
            ],
            "usePreview": 0,
            "username": "Gaktan",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "// Inspired by https://i.redd.it/ql4q61zyale01.jpg\n\n#define STARS_STILL 0\n#define STRIPES 3\n\n// Couldn't decide which background to use. It's up to you now\n#define BACKGROUND STARS_STILL\n\n// Boring functions you've seen before are in Common\n\nfloat sceneDist(vec2 p)\n{\n    // Main circle + substract\n    float c = circleDist(translate(p, vec2(250, 150)), 130.0);\n    float c2 = circleDist(translate(p, vec2(250, 200)), 90.0);\n    \n    float m = subtract(c2, c);\n    \n    // Main shaft\n    float sh = boxDist(translate(p, vec2(250, 175.5)), vec2(27.9, 80.0), 0.0);\n    \n    // Curve shaft left and right\n    float shcl = circleDist(translate(p, vec2(125, 190)), 120.0);\n    float shcr = circleDist(translate(p, vec2(375, 190)), 120.0);\n    \n    // Triangle on top of shaft\n    {\n        float t = triangleDist(translate(p, vec2(250, 220)), 110.0, 70.0);\n\n        // Croissant left\n        float tcl = circleDist(translate(p, vec2(132, 120)), 150.0);\n        float ml = subtract(tcl, shcl);\n\n        // Croissant right\n        float tcr = circleDist(translate(p, vec2(368, 120)), 150.0);\n        float mr = subtract(tcr, shcr);\n\n        float tm = merge(mr, ml);\n        float shm = merge(t, sh);\n        tm = subtract(tm, shm);\n        m = merge(m, tm);\n    } \n    \n    // \"Egg\" shaped curves on each sides of the shaft\n    float height = 0.3;\n    vec2 r = vec2(height-0.13, height);\n    vec2 pp1 = translate(p, vec2(197, 175));\n    vec2 pp2 = translate(p, vec2(303, 175));\n    pp1 = rotateCCW(pp1, 3.14/7.5);\n    pp2 = rotateCW(pp2, 3.14/7.5);\n    float eggl = (length(pp1 / r) - 185.0) * min(r.x, r.y);\n    float eggr = (length(pp2 / r) - 185.0) * min(r.x, r.y);\n    \n    // Fill holes\n    float cfl = circleDist(translate(p, vec2(225, 135)), 90.0);\n    float cfr = circleDist(translate(p, vec2(275, 135)), 90.0);\n    \n    m = merge(m, cfl);\n    m = merge(m, cfr);\n\n    m = subtract(eggl, m);\n    m = subtract(eggr, m);\n    \n\t\n\treturn m;\n}\n\n\nfloat sceneSmooth(vec2 p, float r)\n{\n\tfloat accum = sceneDist(p);\n\taccum += sceneDist(p + vec2(0.0, r));\n\taccum += sceneDist(p + vec2(0.0, -r));\n\taccum += sceneDist(p + vec2(r, 0.0));\n\taccum += sceneDist(p + vec2(-r, 0.0));\n\treturn accum / 5.0;\n}\n\nvec3 palette(float x)\n{\n    vec3 c1 = vec3(0.1, 0.1, 0.2);\n\tvec3 c2 = vec3(0.6, 0.1, 0.2);\n\tvec3 c3 = vec3(1.0, 0.5, 0.25);\n\tvec3 c4 = vec3(1.0, 0.9, 0.6);\n    \n    //if (x < 0.5)\n    //{\n    //\treturn c1;\n    //}\n    //if (x < 0.75)\n    //{\n    //    float s = 0.75 - 0.5;\n    //\treturn mix(c1, c2, (x / s) - 2.0);\n    //}\n    //else if(x < 0.85)\n    //{\n    //    float s = 0.85 - 0.75;\n    //    return mix(c2, c3, (x / s) - 7.5);\n    //}\n    //else\n    //{\n    //    float s = 1.0 - 0.85;\n    //    return mix(c3, c4, (x / s) - 5.65);\n    //}\n    \n    vec3 r = vec3(0.0);\n    \n    {\n    \tr = c1;\n    }\n    {\n        float s = 0.75 - 0.5;\n        float X = clamp(x, 0.5, 0.75);\n    \tr = mix(r, c2, (X / s) - 2.0);\n    }\n    {\n        float s = 0.85 - 0.75;\n        float X = clamp(x, 0.75, 0.85);\n        r = mix(r, c3, (X / s) - 7.5);\n    }\n    {\n        float s = 1.0 - 0.85;\n        float X = max(x, 0.85);\n        r = mix(r, c4, (X / s) - 5.65);\n    }\n    \n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = vec2(500.0, 300.0);\n\tvec2 p = fragCoord.xy / iResolution.xy * r;\n\tvec2 c = r * 0.5;\n\t\n\tfloat dist = sceneDist(p);\n    float mask = fillMask(dist);\n\t\n\t// gradient\n\tvec4 col = vec4(0.05, 0.1, 0.2, 1.0) * (1.0 - length(c - p) / (r.x*0.5)) * 1.5;\n\t// ambient occlusion\n\tcol *= AO(p, sceneSmooth(p, 10.0), 40.0, 0.4);\n    \n#ifdef LOOP\n    float speed = 405.1+cos((PI*0.5) * iTime * 0.2)*1.0;\n#else\n    float speed = 405.1+((PI*0.5) * iTime * 0.2)*1.0;\n#endif\n    \n    float n = fbm(vec3(50.0 + p*0.008, speed*0.5)) * 0.5 + 0.5;\n    n = n * 1.3 - 0.3;\n    \n    float n2 = max(0.3-abs(fbm(vec3(p*0.02, speed))), 0.0);\n    float n3 = abs(fbm(vec3(4.0 + p*0.03, speed*2.0)));\n    \n    n = n * 0.8 + (n2*n2*1.2) - n3*0.2;\n    \n\t//vec3 color = palette(fragCoord.x / iResolution.x);\n  \tvec3 color = palette(0.05+n*2.2) * 0.8;\n    \n    // grandient (bis)\n    color = color * (1.0 - length(c - p) / (r.x*0.55)) * 1.5;\n    \n    color = mix(col.rgb, color, mask);\n    \n    // static in the background\n    float static_ = 0.0;\n    \n#if BACKGROUND == STARS_STILL\n    static_ = fbm(vec3(p*0.5, speed*0.5));\n#elif BACKGROUND == STRIPES\n    vec2 pos = vec2(p*0.5);\n    pos = rotateCW(pos, 1.0 + mask*0.18);\n    pos *= vec2(0.02, 1.2);\n\n    static_ = fbm(vec3(pos, iTime*0.2));\n#endif\n    \n    color += pow(static_*0.8, 3.0) * (0.5 * (1.5 - mask)) * 10.0;\n    \n    fragColor.rgb = vec3(color);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.14159265359;\n\n//3D simplex noise\n// from: https://www.shadertoy.com/view/XsX3zB\n// ---------------------------------------------------------\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c)\n{\n    float j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0 * j);\n    j *= 0.125;\n    r.x = fract(512.0 * j);\n    j *= 0.125;\n    r.y = fract(512.0 * j);\n    return r - 0.5;\n}\n\nfloat simplex3d(vec3 p)\n{\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t vec4 w, d;\n\t \n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t w = max(0.6 - w, 0.0);\n\t \n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p)\n{\n\tfloat f = 0.0;\t\n\tfloat frequency = 1.0;\n\tfloat amplitude = 0.5;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplex3d(p * frequency) * amplitude;\n\t\tamplitude *= 0.5;\n\t\tfrequency *= 2.0 + float(i) / 100.0;\n\t}\n\treturn min(f, 1.0);\n}\n\n// ---------------------------------------------------------\n\n// 2D signed distance\n// from: https://www.shadertoy.com/view/4dfXDn\n// ---------------------------------------------------------\n\n//////////////////////////////////////\n// Combine distance field functions //\n//////////////////////////////////////\n\n\nfloat merge(float d1, float d2)\n{\n\treturn min(d1, d2);\n}\n\nfloat subtract(float d1, float d2)\n{\n\treturn max(-d1, d2);\n}\n\n//////////////////////////////\n// Rotation and translation //\n//////////////////////////////\n\nvec2 rotateCCW(vec2 p, float a)\n{\n\tmat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n\treturn p * m;\t\n}\n\nvec2 rotateCW(vec2 p, float a)\n{\n\tmat2 m = mat2(cos(a), -sin(a), sin(a), cos(a));\n\treturn p * m;\n}\n\nvec2 translate(vec2 p, vec2 t)\n{\n\treturn p - t;\n}\n\n//////////////////////////////\n// Distance field functions //\n//////////////////////////////\n\nfloat circleDist(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\nfloat triangleDist(vec2 p, float width, float height)\n{\n\tvec2 n = normalize(vec2(height, width / 2.0));\n\treturn max(\tabs(p).x*n.x + p.y*n.y - (height*n.y), -p.y);\n}\n\nfloat boxDist(vec2 p, vec2 size, float radius)\n{\n\tsize -= vec2(radius);\n\tvec2 d = abs(p) - size;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\n\n///////////////////////\n// Masks for drawing //\n///////////////////////\n\nfloat fillMask(float dist)\n{\n\treturn clamp(-dist, 0.0, 1.0);\n}\n\nfloat AO(vec2 p, float dist, float radius, float intensity)\n{\n\tfloat a = clamp(dist / radius, 0.0, 1.0) - 1.0;\n\treturn 1.0 - (pow(abs(a), 5.0) + 1.0) * intensity + (1.0 - intensity);\n\treturn smoothstep(0.0, 1.0, dist / radius);\n}\n\n// ---------------------------------------------------------\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}