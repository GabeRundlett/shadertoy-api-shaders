{
    "Shader": {
        "info": {
            "date": "1701449245",
            "description": "a demo of a proper (as of 2007) weighted rotation averaging\n[url=https://www.shadertoy.com/playlist/fXjyRd]GEOMETRY PLAYLIST[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdBRB",
            "likes": 7,
            "name": "Quaternion Averaging",
            "published": 3,
            "tags": [
                "quaternion",
                "rotation",
                "interpolation",
                "average",
                "smoothing",
                "orientation"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "/*\nby Dom Mandy in 2023\n*/\n\n\n/*\nQuaternion Averaging (18) by Markley, Cheng, Crassidis, and Oshman in 2007\nhttps://www.acsu.buffalo.edu/~johnc/ave_sfm07.pdf\nhttps://ntrs.nasa.gov/api/citations/20070017872/downloads/20070017872.pdf\n*/\nvec4 qmix(vec4 start, vec4 end, float weight) {\n    float w = 1. - weight - weight,\n          d = dot(start, end);\n    return normalize(2.*weight*end*d + start*(w + sqrt(w*w + 4.*d*d*(weight*(1. - weight)))));\n}\n\n\n/*\nrandom orientation quaternion\nhttps://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation\n*/\nvec4 quaternion(float x) {\n    float q = 3. * texelFetch(iChannel0, ivec2(x, 2), 0).r - 1.5;\n    return vec4(cos(q), normalize(texelFetch(iChannel0, ivec2(x, 1), 0).rgb - .5) * sin(q));\n}\n\n\n/*\npastel colors\nhttps://www.shadertoy.com/view/mltyRN\n*/\nvec3 palette(float l, float h) { return l + l * vec3(.7874, .2848, .9278) * cos(h - vec3(0, 2.1, 4.2)); }\n\n\nvoid mainImage(out vec4 pixel, vec2 uv) {\n    // quaternions\n    float t = mod(1e-9 + iTime / 2., 256.),\n          f = floor(t),\n          m = ceil(t);\n    vec4 Q = qmix(quaternion(f), quaternion(mod(m, 256.)), smoothstep(f, m, t));\n\n    // animation\n    vec2 i = iResolution.xy;\n    uv += uv - i;\n    vec3 eye = vec3(0, 0, -3),\n         ray = normalize(vec3(uv * .4 / i.y, 1)),\n         up = vec3(0, 1, 0),\n         z = normalize(Q.yzw);\n    float angle = 2. * atan(length(Q.yzw), Q.x),\n          c = cos(angle),\n          s = sin(angle);\n    eye = cross(z, eye) * s + mix(z * dot(z, eye), eye, c);\n    ray = cross(z, ray) * s + mix(z * dot(z, ray), ray, c);\n\n    // lighting\n    float d = dot(ray, eye);\n    vec3 normal = eye - ray * (d + sqrt(1. + d * d - dot(eye, eye))),\n         r = reflect(ray, normal);\n    pixel.rgb = sqrt(\n        isnan(normal.x)\n            ? palette(pow(.5 + .5 * dot(up, ray), 2.), atan(ray.z, ray.x))\n            : mix(vec3(max(0., .5 + .5 * dot(up, normal))), palette(2. * pow(.5 + .5 * dot(up, r), 2.) * mix(pow(1. + dot(normal, ray), 5.), 1., .04), atan(r.z, r.x)), .9)\n    );\n}\n\n\n/*\nSEE ALSO\n\nrotation\nhttps://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n\nlighting\nhttps://en.wikipedia.org/wiki/Schlick%27s_approximation\nhttps://developer.nvidia.com/gpugems/gpugems/part-iii-materials/chapter-16-real-time-approximations-subsurface-scattering\n\nsphere\nhttps://en.wikipedia.org/wiki/Line%E2%80%93sphere_intersection#Calculation_using_vectors_in_3D\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}