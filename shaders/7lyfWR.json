{
    "Shader": {
        "info": {
            "date": "1664321382",
            "description": "Basically the audio of a guitar from a bunch of weird nerd symbols I found on the internet",
            "flags": 8,
            "hasliked": 0,
            "id": "7lyfWR",
            "likes": 8,
            "name": "The harmonics of a Guitar",
            "published": 3,
            "tags": [
                "harmonics",
                "guitar"
            ],
            "usePreview": 0,
            "username": "AlexApps99",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "// Go to the \"sound\" tab for the code and tunable parameters\n\n// Text from https://www.shadertoy.com/view/MtyXRW\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.) )\nfloat message(vec2 U) {\n    vec4 T = vec4(0);\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x;\n}\n\n\nfloat sdbEllipsoidV2(in vec2 p, in vec2 r) {\n    float k1 = length(p/r);\n    float k2 = length(p/(r*r));\n    return k1*(k1-1.0)/k2;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);if(c>=0.){fragColor=vec4(c);return;}\n\n    vec2 uv = 3. * (fragCoord / iResolution.xy - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    float body = min(sdbEllipsoidV2(uv-vec2(-.5,0.),vec2(1.2)), sdbEllipsoidV2(uv-vec2(.75,0.), vec2(1.0)));\n    body = max(body, -sdbEllipsoidV2(uv-vec2(.5,0.), vec2(0.25)));\n    body = min(body, sdBox(uv-vec2(3.,0.), vec2(2., .2)));\n    vec3 col = mix(vec3(.5, .3, 0.), vec3(0.), smoothstep(0., fwidth(body), body));\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// based on a bunch of math I found on the internet, put into code\n// http://large.stanford.edu/courses/2007/ph210/pelc2/\n\n// maximum number of harmonics to compute\n// fiddle with this number to see what it's like with less harmonics\nconst uint MAX_HARMONICS = 50u;\n\n// fundamental frequencies of each string\n// changing these will \"tune\" the guitar\nconst float FUNDAMENTAL[6] = float[6](\n    329.63, // E4\n    246.94, // B3\n    196.00, // G3\n    146.83, // D3\n    110.00, // A2\n    082.41  // E2\n);\n\n// length of string (approx 25 inches, standard guitar string length)\nconst float L = 0.635;\n// height of pluck (12.5 cm, just a random number to make it clearly audible)\nconst float h = 0.125;\n// position of pluck along string (5 inches from lower bridge)\nconst float d = 0.15;\n\n// Damping coefficient (bigger = shorter)\nconst float GAMMA = 2.5;\n\n// String stiffness coefficient\nconst float b = 0.008;\n\n// The stuff below is code that isn't really worth fiddling with\n// =============================================================\n\nconst float TAU = 6.283185307179586476925286766559;\nconst float PI = TAU / 2.0;\n\nvec2 mainSound(int samp, float time) {\n    float sig = 0.0;\n    // for each string\n    for (uint s = 0u; s < 6u; s++) {\n        // repeat at a different offset\n        // I fixed some floating point errors by using the sample number directly and using integers\n        //float t = mod(time + (float(s) / 6.), 8./6.);\n        float t = float((6 * samp + int(iSampleRate) * int(s)) % (8 * int(iSampleRate))) / (6. * iSampleRate);\n        // for each harmonic\n        for (uint n = 0u; n < MAX_HARMONICS; n++) {\n            // amplitude for each harmonic\n            float a_n = ((2. * h * L * L)/(PI * PI * d * (L - d) * float(n+1u) * float(n+1u))) * sin((float(n+1u) * PI * d)/L);\n            // frequency for each harmonic\n            float f_n = float(n+1u) * FUNDAMENTAL[s] * sqrt(1. + b * b * float(n+1u) * float(n+1u));\n            // add value to total sound signal, with exponential falloff\n            sig += a_n * sin(TAU * f_n * t) * exp(-float(n+1u) * GAMMA * t);\n        }\n    }\n\n    return vec2(sig);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}