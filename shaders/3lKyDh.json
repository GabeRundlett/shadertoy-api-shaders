{
    "Shader": {
        "info": {
            "date": "1610924598",
            "description": "testing some stuff from https://www.osar.fr/notes/logspherical/",
            "flags": 32,
            "hasliked": 0,
            "id": "3lKyDh",
            "likes": 4,
            "name": "Molecules",
            "published": 3,
            "tags": [
                "raymarch",
                "logspherical"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "\nconst vec2 w = vec2(4.25);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec4 c0 = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec4 c1 = texture(iChannel0, (fragCoord.xy - w) / iResolution.xy);\n    vec4 c2 = texture(iChannel0, (fragCoord.xy + w) / iResolution.xy);\n    vec4 c3 = texture(iChannel0, (fragCoord.xy - w*1.5) / iResolution.xy);\n    vec4 c4 = texture(iChannel0, (fragCoord.xy + w*1.5) / iResolution.xy);\n    vec4 c5 = texture(iChannel0, (fragCoord.xy - w*2.0) / iResolution.xy);\n    vec4 c6 = texture(iChannel0, (fragCoord.xy + w*2.0) / iResolution.xy);\n    vec4 c7 = texture(iChannel0, (fragCoord.xy - w*2.5) / iResolution.xy);\n    vec4 c8 = texture(iChannel0, (fragCoord.xy + w*2.5) / iResolution.xy);\n    vec4 bluredImg = 0.1752 * c0 + 0.1658 * (c1 + c2) + 0.1403 * (c3 + c4) + 0.1063 * (c5 + c6) + 0.1001 * (c7 + c8);\n    \n    float base = 0.3*length( (-1.0+2.0*(fragCoord.xy / iResolution.xy) \n                        + vec2(0.5) ));\n    \n\tfragColor = mix( c0, bluredImg, base );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Res iResolution.xy\n#define inf 999.\n#define MAX_DIST 100.\n#define aa 4.\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nmat2 rotate(float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, si, -si, co);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox(p.xyz,vec3(inf,1.0,1.0));\n  float db = sdBox(p.yzx,vec3(1.0,inf,1.0));\n  float dc = sdBox(p.zxy,vec3(1.0,1.0,inf));\n  return min(da,min(db,dc));\n}\n\n#define PI 3.1415\n\nvec2 id = vec2(0);\n\nfloat map(in vec3 pos3d)\n{\n    // https://www.osar.fr/notes/logspherical/\n    float time = iTime;\n    time *= 0.2;\n    pos3d.xz *= rotate(iMouse.x/Res.x*8. + fract(time/3.)*PI*2.);\n    float radius = 0.4;\n    float scale = 6.0/PI;\n    vec2 pos2d = pos3d.xz;\n    float r = length(pos2d);\n    pos2d = vec2(log(r) - 1.89*time, atan(pos2d.y, pos2d.x));\n    pos2d *= scale;\n    id = pos2d;\n    pos2d = fract(pos2d) - 0.5;\n    id -= pos2d;\n    float mul = r/scale;\n    float a = (length(vec3(pos2d, pos3d.y/mul)) - radius) * mul;\n    \n    float b = sdVerticalCapsule(abs(vec3(pos2d, pos3d.y/mul)), 0.5, .12);\n    \n    a = min(a,b);\n    \n    return a;\n}\n\nstruct hit {\n    float t;\n    float occl;\n};\n\nhit march(vec3 ro, vec3 rd) {\n    float t = 0., \n          i = 0.,\n          steps = 60.;\n    for(i=0.; i < steps; i++) {\n        vec3 p = ro + t*rd;\n        float d = map(p);\n        if(d < 0.0001) {\n            break;\n        }\n        t += d;\n        if(t > MAX_DIST) {\n            break;\n        }\n    }\n    if(i == steps) t = 20.;\n    return hit(t, 1.-t/steps);\n}\n\nvec3 normal(vec3 p) {\n    vec2 h = vec2(0.0001, 0);\n    return normalize(vec3(map(p+h.xyy) - map(p-h.xyy),\n                          map(p+h.yxy) - map(p-h.yxy),\n                          map(p+h.yyx) - map(p-h.yyx)));\n}\n\nvec3 brdf(vec3 N, vec3 L, vec3 V, vec3 diff, vec3 spec, float exponent) {\n    vec3 R = reflect(L,N);\n    vec3 H = normalize(L+V);\n    return diff * clamp(dot(N, L), 0., 1.)\n         + spec * pow(max(0., dot(R,V)), exponent);\n}\n\nvec3 shade(vec3 P, vec3 N, vec3 ro) {\n    vec3 V = normalize(P-ro);\n    vec3 ambient = vec3(.1);\n    vec3 diffuse = vec3(1.,.2,.2);\n    vec3 specular = vec3(.8,.8,.6);\n    \n    if(mod(id.x, 2.0) < 1.) {\n        diffuse = vec3(0,0,1);\n    }\n    \n    if(mod(id.y, 2.0) < 1.0 && mod(id.x, 2.0) < 1.\n    || mod(id.y, 2.0) > 1.0 && mod(id.x, 2.0) > 1.) {\n        diffuse = vec3(1);\n    }\n    \n    vec3 R = reflect(normalize(ro-P), N);\n    vec3 tex = texture(iChannel0, R).rgb;\n    \n    //diffuse = mix(diffuse, tex, 0.3);\n    \n    vec3 light1 = brdf(N, normalize(vec3(-4.,5,-6) - P), V, diffuse, vec3(0), 32.);\n    vec3 light2 = brdf(N, normalize(vec3(1,0,4) - P), V, diffuse, specular, 32.);\n    return ambient + light1 + light2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float stratSize = 1./aa;\n    vec3 fcol = vec3(0);\n    for(float aax=0.; aax<aa; aax++)\n    for(float aay=0.; aay<aa; aay++) {\n        vec2 strat = vec2(aax, aay) * stratSize;\n        vec2 jitter = vec2(random(fragCoord + 4.1252 + aax + fract(iTime)), \n                           random(fragCoord + 1.3483 + aay + fract(iTime))) * stratSize;\n        vec2 uv = (2.*fragCoord + strat + jitter - Res)/Res.y;\n        vec3 col = vec3(0);\n        vec3 ro = vec3(.0,1.,-1.);\n        vec3 ta = vec3(.0,0,0);\n        vec3 ww = normalize( ta-ro );\n        vec3 uu = normalize( cross(ww, vec3(0,1,0)) );\n        vec3 vv = normalize( cross(uu,ww) );\n        vec3 rd = normalize( uv.x*uu + uv.y*vv + 1.8*ww );\n        hit hit = march(ro, rd);\n        if(hit.t < MAX_DIST) {\n            vec3 p = ro + hit.t*rd;\n            vec3 N = normal(p);\n            col = shade(p, N, ro) \n                    * exp(-0.1*hit.t)\n                    * hit.occl;\n        }\n        fcol += col;\n    }\n\n    fragColor = vec4(pow(fcol/(aa*aa), vec3(2.2)),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}