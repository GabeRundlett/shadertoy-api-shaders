{
    "Shader": {
        "info": {
            "date": "1703157721",
            "description": "raymarching, shading, contour",
            "flags": 32,
            "hasliked": 0,
            "id": "lfs3DM",
            "likes": 9,
            "name": "3D SDF outlined",
            "published": 3,
            "tags": [
                "raymarching",
                "shading",
                "contour"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "#define R iResolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/R.xy;\n    // Very cheap antialiasing pass 2 \n    vec3 res = texture(iChannel0, uv- vec2(.5)/R.xy).rgb;\n    fragColor = vec4(res, .0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdSphere(vec3 p, float r )\n{\n  return length(p) - r;\n}\nmat2 rotate2d(float a){\n    \n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\nfloat ssub( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define tz iTime*.3\n#define tr iTime*4.1\n#define tf iTime*3.\n#define th iTime\n\nfloat map_finger(vec3 p)\n{\n  float d = 1e10;\n    \n  \n  float[4] amp = float[4](1.,1.1,.9,.8);\n  float SF = .1;  \n  float size_f = .21;\n  int i = 0;\n  vec3 q = p;\n  q.xz *= rotate2d(.3*float(i));\n  vec3 S0 = vec3(.7,-.1,.4)*amp[i], \n  S1 = vec3(.9,0.,.8)*amp[i] + vec3(.0, .05*cos(tf*.95 - .4 + 1.), .0),\n  S2 = vec3(1., -.1, 1.2)*amp[i] + vec3(.0, .1+.2*cos(tf*.95 - .2 + 1.), .0),\n  S3 = vec3(1.,-.3,1.6)*amp[i] + vec3(.0, .1*cos(tf*.95 - .0 + 1.), .0);\n  float df = sdCapsule(q, S0, S1, size_f);\n  df = smin(df, sdCapsule(q, S1, S2, size_f), SF);\n  df = smin(df, sdCapsule(q, S2, S3, size_f), SF);\n  d = smin(d, df, .1);\n  \n  \n  i = 1;\n  q = p;\n  q.xz += vec2(+.6,-.2);\n  S0 = vec3(.8,.2,.4)*amp[i], \n  S1 = vec3(.9,.3,.8)*amp[i]+ vec3(.0, .05*cos(tf - .4), .0),\n  S2 = vec3(1., .2, 1.2)*amp[i]+ vec3(.0, .1+.2*cos(tf - .2), .0),\n  S3 = vec3(1.1,.0,1.6)*amp[i] + vec3(.0, .1*cos(tf), .0);\n\n  df = sdCapsule(q, S0, S1, size_f);\n  df = smin(df, sdCapsule(q, S1, S2, size_f), SF);\n  df = smin(df, sdCapsule(q, S2, S3, size_f), SF);\n  d = smin(d, df, .05);\n    \n    \n  i = 2;\n  q = p;\n  q.xz += vec2(+1.,-.3);\n  S0 = vec3(.9,-.1,.4)*amp[i], \n  S1 = vec3(.9,0.,.8)*amp[i]+ vec3(.0, .05*cos(tf*1.15 - .4 + 2.), .0),\n  S2 = vec3(1., -.1, 1.2)*amp[i]+ vec3(.0, .1+.2*cos(tf*1.15 - .4 + 2.), .0),\n  S3 = vec3(1.2,-.3,1.6)*amp[i]+ vec3(.0, .1*cos(tf*1.15 - .4 + 2.), .0);\n\n  df = sdCapsule(q, S0, S1, size_f);\n  df = smin(df, sdCapsule(q, S1, S2, size_f), SF);\n  df = smin(df, sdCapsule(q, S2, S3, size_f), SF);\n  d = smin(d, df, .05);\n  \n  \n  \n  i = 2;\n  q = p;\n  q.xyz += vec3(+1.5, .5, -.2);\n  S0 = vec3(.9,-.1,.4)*amp[i], \n  S1 = vec3(.9,-.1,.8)*amp[i]+ vec3(.05*cos(tf*1.05 - .0 + 2.), .0, .0),\n  S2 = vec3(1., -.2, 1.2)*amp[i]+ vec3(-.05+.1*cos(tf*1.05 - .2 + 2.), .0, .0),\n  S3 = vec3(1.2,-.35,1.6)*amp[i]+ vec3(.1*cos(tf*1.05 - .4 + 2.), .0, .0);\n\n  df = sdCapsule(q, S0, S1, size_f);\n  df = smin(df, sdCapsule(q, S1, S2, size_f), SF);\n  df = smin(df, sdCapsule(q, S2, S3, size_f), SF);\n  d = smin(d, df, .05);\n \n  \n  \n  q = p;\n  q.x += .1;\n  q.y += .5;\n  q.z -= .25;\n  S0 = vec3(-.3,-.8,.4)*amp[i], \n  S1 = vec3(-.3,-1.,.8)*amp[i]+ vec3(.05*cos(tf*.85 - .2), .0, .0),\n  S2 = vec3(.0, -1.2, 1.2)*amp[i]+ vec3(.1*cos(tf*.85 - .4), .3, .0),\n\n  df = sdCapsule(q, S0, S1, size_f);\n  df = smin(df, sdCapsule(q, S1, S2, size_f), SF);\n  d = smin(d, df, .05);  \n  return d;\n}\n\n\nfloat map(vec3 p, inout float df, inout float dp){\n\n    float d = 1e10;\n    \n    \n    vec3 q = p-vec3(.0,.55+.05*cos(th), 1.);\n    d = sdSphere(q, .45);\n\n    q = p-vec3(.0,-.45-.05*cos(th), 1.);\n    d = opSmoothUnion(d, sdSphere(q, .5), 1.);\n    \n    float dH = 10.;\n    \n    d = min(d, dH);\n    \n    \n    float scale = 2.+cos(tz);\n    q = p*scale;\n    q.z *= -1.;\n    q.z += 1.5;\n    q.x = abs(q.x);\n    q.x -= 2.;\n    q.xy *= rotate2d(-1.25 + .75*cos(tr*.1));\n    df = map_finger(q)/scale;\n    dp = d;\n    d = min(d,df);\n    \n\n    return d;\n}\n#define PI 3.14159\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    vec3 ro = vec3(.0, .0, -3.);\n    vec3 rd = normalize(vec3(uv, 1.));\n\n    int i = 0;\n    float d = .0;\n    float depth = .0;\n    float dmin = 100.;\n    float edge = .0;\n    float edge_p = .0;\n    float d_p = .0;\n    float d_f = 100.;\n    float d_ef = .0;\n    float d_ep = .0;\n    for (; i<60; i++){\n        vec3 p = ro + rd*depth;\n        d = map(p, d_f, d_p);\n        depth += d*.5;\n        dmin = min(abs(d), dmin);\n        if (d<.001 || depth>5.) break;\n        if (d_f<.06 - .04*cos(tz)) {edge = 1.; d_ef = depth;}\n        if (d_p<.04){edge_p = 1.; d_ep = depth;}\n    }\n    float edge_finger = (d_f<.001 && i<60) ? .0:edge;\n    edge_p = (d_p<.001) ? .0: edge_p;\n    edge = max(edge_finger, edge_p);\n    d_ef = max(d_ef, d_ep);\n    fragColor = vec4(edge, d_ef, d, depth);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define th iTime\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nvec3 palette(float t){\n    vec3 a = vec3(0.204,0.396,0.643);\n    vec3 b = vec3(0.361,0.208,0.400);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(0.961,0.475,0.000)*.1;\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 uvE = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    // Very cheap antialiasing pass 1\n    vec4 res = texture(iChannel0, uv+vec2(.5)/iResolution.xy).rgba;\n    float eye = sdBox(uvE*5.+vec2(-.3,-1.35-.1*cos(th)), vec2(.01,.08 + .02*cos(th) ));\n    eye = min(eye, sdBox(uvE*5.+vec2(.3,-1.35-.1*cos(th)), vec2(.01,.08+ .02*cos(th) )));\n    eye = smoothstep(.02, .0, eye-.05);\n    vec3 col = pow(palette(res.y*.4-iTime)*.8+.2, vec3(2.))*res.x;\n    fragColor = vec4(col+eye*palette(res.x*.4-iTime),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}