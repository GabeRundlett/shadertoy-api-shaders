{
    "Shader": {
        "info": {
            "date": "1455904980",
            "description": "Interactive demonstration showing the differences between common vector interpolation techniques.  Use the mouse to control the white destination vector. Green = slerp, Blue = lerp, Orange = nlerp. Green (slerp) is the same as the true normal.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sV3zt",
            "likes": 24,
            "name": "Vector Interpolation",
            "published": 3,
            "tags": [
                "2d",
                "vector",
                "interpolation"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 3769
        },
        "renderpass": [
            {
                "code": "/*\n\nRelated post with more info on my blog:\nhttp://blog.demofox.org/2016/02/19/normalized-vector-interpolation-tldr/\n\n*/\n\n#define AA_AMOUNT 2.0 / iResolution.x\n\nconst float c_circleSize = 0.075;\nconst float c_vectorLength = 0.1;\nconst float c_lineWidth = 0.01;\n\n//============================================================\n// Signed Distance Functions taken/adapted/inspired by from:\n// https://iquilezles.org/articles/distfunctions\n\nfloat UDCircle( in vec2 coords, in vec2 circle, float radius)\n{    \n    return max(length(coords - circle.xy) - radius, 0.0);\n}\n\n//============================================================\nfloat UDFatLineSegment (in vec2 coords, in vec2 A, in vec2 B, in float height)\n{    \n    // calculate x and y axis of box\n    vec2 xAxis = normalize(B-A);\n    vec2 yAxis = vec2(xAxis.y, -xAxis.x);\n    float width = length(B-A);\n    \n\t// make coords relative to A\n    coords -= A;\n    \n    vec2 relCoords;\n    relCoords.x = dot(coords, xAxis);\n    relCoords.y = dot(coords, yAxis);\n    \n    // calculate closest point\n    vec2 closestPoint;\n    closestPoint.x = clamp(relCoords.x, 0.0, width);\n    closestPoint.y = clamp(relCoords.y, -height * 0.5, height * 0.5);\n    \n    return length(relCoords - closestPoint);\n}\n\n//============================================================\n// adapted from source at:\n// https://keithmaggio.wordpress.com/2011/02/15/math-magician-lerp-slerp-and-nlerp/\nvec2 slerp(vec2 start, vec2 end, float percent)\n{\n     // Dot product - the cosine of the angle between 2 vectors.\n     float dot = dot(start, end);     \n     // Clamp it to be in the range of Acos()\n     // This may be unnecessary, but floating point\n     // precision can be a fickle mistress.\n     dot = clamp(dot, -1.0, 1.0);\n     // Acos(dot) returns the angle between start and end,\n     // And multiplying that by percent returns the angle between\n     // start and the final result.\n     float theta = acos(dot)*percent;\n     vec2 RelativeVec = normalize(end - start*dot); // Orthonormal basis\n     // The final result.\n     return ((start*cos(theta)) + (RelativeVec*sin(theta)));\n}\n\n//============================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // set up our camera\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = (fragCoord / iResolution.xy) - vec2(0.5);\n    uv.x *= aspectRatio;\n    uv *= 0.5;\n        \n    // calculate the starting and ending vector\n    vec2 startVector = vec2(cos(0.0), sin(0.0));\n\tvec2 endVector = vec2(0.0, 1.0);\n    if (iMouse.x > 0.0)\n    {\n    \tvec2 mouseuv = (iMouse.xy / iResolution.xy) - vec2(0.5);\n    \tmouseuv.x *= aspectRatio;     \n        endVector = normalize(mouseuv);\n    }\n    \n    // calculate our interpolation factor\n\tfloat t = abs(1.0 - (fract(iTime / 4.0) * 2.0));   \n    \n    // calculate the true vector\n    float trueAngle = atan(endVector.y, endVector.x) * t;\n    vec2 trueVector = vec2(cos(trueAngle), sin(trueAngle));\n    \n    // calculate the interpolated vectors\n    vec2 lerpVector = mix(startVector, endVector, t);\n    vec2 nlerpVector = normalize(lerpVector);\n    vec2 slerpVector = slerp(startVector, endVector, t);\n    \n    // background color\n    vec3 pixelColor = vec3(0.2);\n    \n    // the starting vector in dark grey\n    float dist = UDFatLineSegment(uv, vec2(0.0), startVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.5), dist);\n\n    // the ending vector in lighter grey\n    dist = UDFatLineSegment(uv, vec2(0.0), endVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.9), dist); \n    \n    // the slerp vector in green\n    dist = UDFatLineSegment(uv, vec2(0.0), slerpVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.2, 1.0, 0.2), dist);\n    \n    // the nlerpVector in orange\n    dist = UDFatLineSegment(uv, vec2(0.0), nlerpVector * (c_circleSize + c_vectorLength), c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(1.0, 0.5, 0.2), dist);  \n    \n    // the lerpvector in blue. Note that we must start it at the edge of the circle so use nlerpvector * c_circleSize to start there.\n    dist = UDFatLineSegment(uv, vec2(0.0), nlerpVector * c_circleSize + lerpVector * c_vectorLength, c_lineWidth);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.2, 0.4, 0.8), dist);      \n                           \n\t// the true vector in skinny yellow\n    //dist = UDFatLineSegment(uv, vec2(0.0), trueVector * (c_circleSize + c_vectorLength), c_lineWidth / 6.0);\n    //dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    //pixelColor = mix(pixelColor, vec3(1.0, 1.0, 0.0), dist);      \n    \n\t// the central circle\n\tdist = UDCircle(uv, vec2(0.0), c_circleSize);\n    dist = 1.0 - smoothstep(0.0, AA_AMOUNT, dist);\n    pixelColor = mix(pixelColor, vec3(0.7), dist);    \n        \n    // make the final color\n\tfragColor = vec4(pixelColor,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}