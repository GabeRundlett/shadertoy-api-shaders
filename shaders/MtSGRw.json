{
    "Shader": {
        "info": {
            "date": "1427539065",
            "description": "This shader demonstrates the hue shift when using different precision for RGB channels.\nIt follows a discussion with Mikkel Gjoel on Twitter.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtSGRw",
            "likes": 1,
            "name": "Hue shift in R11G11B10",
            "published": 3,
            "tags": [
                "hue",
                "colordepth"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 827
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader demonstrates the hue shift when using different\nprecision for RGB channels. The shades have very little saturation,\nto make the hue shift more noticeable.\n\nBy default it uses R11G11B10, which has more depth than R8G8B8,\nyet yields hue shift due to the blue channel using on bit less.\n\nThe difference are shown in linear and gamma space.\n\n--\nZavie\n\n*/\n\nivec3 bitsPerChannel = ivec3(11, 11, 10);\nfloat gamma = 2.2;\n\nvec3 shade(vec2 uv, vec3 color)\n{\n  float intensity = uv.x;\n  return intensity * color;\n}\n\nvec3 quantized(vec3 color, ivec3 bits)\n{\n  vec3 range = pow(vec3(2.), vec3(bits));\n  return floor(color * range) / range;\n}\n\n\nvec3 getColor(float x)\n{\n  int i = int(floor(13. * x));\n\n  if (i == 0) return vec3(1.0, .90, .90);\n  if (i == 1) return vec3(1.0, .95, .90);\n  if (i == 2) return vec3(1.0, 1.0, .90);\n  if (i == 3) return vec3(.95, 1.0, .90);\n  if (i == 4) return vec3(.90, 1.0, .90);\n  if (i == 5) return vec3(.90, 1.0, .95);\n  if (i == 6) return vec3(.90, 1.0, 1.0);\n  if (i == 7) return vec3(.90, .95, 1.0);\n  if (i == 8) return vec3(.90, .90, 1.0);\n  if (i == 9) return vec3(.95, .90, 1.0);\n  if (i == 10) return vec3(1.0, .90, 1.0);\n  if (i == 11) return vec3(1.0, .90, .95);\n\n  return vec3(1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color;\n\n\tcolor = shade(uv, getColor(uv.y));\n\n\tfloat halfLuminosity = 0.5;\n\t\n\tif (mod(iDate.w, 8.) > 4.)\n\t{\n\t\thalfLuminosity = pow(halfLuminosity, 1./gamma);\n\t\tcolor = pow(color, vec3(gamma));\n\t}\n\tif (mod(iDate.w, 4.) > 2.)\n    {\n\t\tcolor = quantized(color, bitsPerChannel);\n    }\n\tcolor = pow(color, vec3(1./gamma));\n\n\tif (abs(uv.x - halfLuminosity) < 0.001)\n\t\tcolor = mix(color, vec3(1.), 0.3);\n\n\tfragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}