{
    "Shader": {
        "info": {
            "date": "1709335405",
            "description": "Use the mouse to look around",
            "flags": 0,
            "hasliked": 0,
            "id": "M3XXDr",
            "likes": 6,
            "name": "Burning orb",
            "published": 3,
            "tags": [
                "fire",
                "orb"
            ],
            "usePreview": 1,
            "username": "ianertson",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define T (iTime)\n#define M_PI 3.14159265358979323846264338327950288\n#define TAU (M_PI*2.0)\n#define FUI floatBitsToUint\n#define ZERO min(0, iFrame)\n\nmat2 rot(float a) { float s = sin(a); float c = cos(a); return mat2(c, s, -s, c); }\nvec3 aces(vec3 x) { return clamp((x*(2.51*x+0.03))/(x*(2.43*x+0.59)+0.14),0.0,1.0); }\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\nfloat smin(float a, float b, float k) {float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0); return mix(a, b, h) - k*h*(1.0-h); }\nfloat smax(float a, float b, float k) {return smin(a, b, -k); }\nfloat sgt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (a - b) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\nfloat slt(in float a, in float b, in float s) {float h = clamp(0.5 + 0.5 * (b - a) / s, 0.0, 1.0); return mix(0.0, 1.0, h*h*(3.0-2.0*h));}\n\nfloat hash(vec2 ip, float seed) {\n  uvec2 p = FUI(ip); uint s = FUI(seed); uvec2 k = ~p + ~s;\n  p ^= p << 17U; p ^= p >> 13U; p ^= p << 5U;\n  p += (p ^ k) + p * k; p *= 1013U; p ^= (p >> 4U);\n  return float(p.x * k.y + p.y + p.y * k.x + k.y) / float(0xFFFFFFFFU);\n}\n\nfloat hash(vec3 ip, float seed) {\n  uvec3 p = FUI(ip); uint s = FUI(seed); uvec3 k = ~p + ~s;\n  p ^= p << 17U; p ^= p >> 13U; p ^= p << 5U;\n  p += (p ^ k) + p * k; p *= 1013U; p ^= (p >> 4U);\n  return float(1031U*((p.x * k.y + p.y + p.y * k.x + k.y + p.z * k.y + p.x * k.z)>>2U)) / float(0xFFFFFFFFU);\n}\n\nfloat noise(vec2 p, float s) {\n  p += 3.3828714;\n  vec2 id = floor(p); vec2 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n  return mix(mix(hash(id+vec2(0,0),s),hash(id+vec2(1,0),s),lv.x),\n             mix(hash(id+vec2(0,1),s),hash(id+vec2(1,1),s),lv.x),lv.y);\n}\n\nfloat noise(vec3 p, float s) {\n  p += 3.3828714;\n  vec3 id = floor(p); vec3 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n  float a = mix(mix(hash(id+vec3(0,0,0),s),hash(id+vec3(1,0,0),s),lv.x),\n                mix(hash(id+vec3(0,1,0),s),hash(id+vec3(1,1,0),s),lv.x),lv.y);\n  float b = mix(mix(hash(id+vec3(0,0,1),s),hash(id+vec3(1,0,1),s),lv.x),\n                mix(hash(id+vec3(0,1,1),s),hash(id+vec3(1,1,1),s),lv.x),lv.y);\n  return mix(a, b, lv.z);\n             \n}\n\n\nfloat noise(vec2 p, float s, float freq, float dec, float warp, const in int oct) {\n  float n = 0.0;\n  float div = 0.0;\n  float amp = 1.0;\n  vec2 tx = vec2(0.0);\n  for (int i = ZERO; i < oct; i++) {\n    n += amp*noise((p+tx)*freq,s);\n    div += amp;\n    amp *= dec;\n    freq *= exp(dec*1.386294401);\n    tx += warp * vec2(sin(n*6.28), cos(n*6.28));\n    \n  }\n  return n / div;\n}\n\nfloat noise(vec3 p, float s, float freq, float dec, float warp, const in int oct) {\n  float n = 0.0;\n  float div = 0.0;\n  float amp = 1.0;\n  vec3 tx = vec3(0.0);\n  for (int i = ZERO; i < oct; i++) {\n    n += amp*noise((p+tx)*freq,s);\n    div += amp;\n    amp *= dec;\n    freq *= exp(dec*1.386294401);\n    tx += warp * vec3(sin(n*6.28), cos(n*6.28), cos(n*3.1415));\n  }\n  return n / div;\n}\n\nvec3 fastnoise(vec3 p) {\n\n\n    #define HSH(PV, SS) textureLod(iChannel3, (PV)/(64.0), 0.0).rgb\n  vec3 id = floor(p); vec3 lv = fract(p);lv = lv*lv*(3.0-2.0*lv);\n  vec3 a = mix(mix(HSH(id+vec3(0,0,0),s),HSH(id+vec3(1,0,0),s),lv.x),\n                mix(HSH(id+vec3(0,1,0),s),HSH(id+vec3(1,1,0),s),lv.x),lv.y);\n  vec3 b = mix(mix(HSH(id+vec3(0,0,1),s),HSH(id+vec3(1,0,1),s),lv.x),\n                mix(HSH(id+vec3(0,1,1),s),HSH(id+vec3(1,1,1),s),lv.x),lv.y);\n  return mix(a, b, lv.z);\n    #undef HSH\n}\n\n\n////////////////////////////////////////////////////////\n\n#define STEPS (25.0)\n#define STEP_SIZE (0.5)\n#define NEAR 0.1\n#define TOLERANCE 0.6\n\nfloat sdf(vec3 p) {\n    float d = 0.0;\n    float wd = 0.0;\n    float freq = 9.992842;\n    float t = T*2.;\n    float k = noise(p*freq*0.39, 22.292185)-0.5;\n    freq /= (1.0 + abs(k));\n    vec3 kw = vec3(sin(k*M_PI+3.0*t), cos(k*M_PI+3.0*t), cos(k*M_PI+3.0*t));\n    vec3 A = vec3(sin((kw.x+k)*0.05*freq), cos((kw.y+k)*0.05*freq), cos((kw.z+k)*0.05*freq));\n    vec3 B = fastnoise((A+p*freq*0.1)-(p*0.3*kw));\n    vec3 C = fastnoise(\n    (B+p+2.31285+vec3(cos(B.x+t+p.y), sin(B.y+t+p.z), sin(B.z+t+p.x)))*freq*0.1)*2.0-1.0;\n    \n    \n    float DA = dot(normalize(p-kw), normalize(k+A*2.0-1.0));\n    float DB = dot(normalize(p+kw), normalize(k-B*2.0-1.0));\n    \n    //max\n    wd += DA;\n    wd += DB;\n\n    wd *= k;\n    d += length((p- C)) - (1.6 + 0.25*k);\n    d = smax(d, -wd, 0.1);\n    \n    return (d-0.003)/2.;\n    \n}\n  \n\nvec3 render(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.0);\n    \n    float d = 0.0;\n    float c = 0.0;\n    float inside = 0.0;\n    float outside = 0.0;\n    float avg = 0.0;\n    float ac = 0.0;\n    float t = 0.0;\n    \n    vec2 e = vec2(0.075, 0.0);\n    float NdotL = 0.0;\n    vec3 L = normalize(vec3(1, 2, -3));\n    \n    for (float i = min(iTime, 0.0); i < STEPS; i+= STEP_SIZE) {\n        vec3 p = ro+rd*d;\n        float next = sdf(p);\n        \n        d += next;\n        c += STEP_SIZE;\n        inside += (next)*slt(next, -NEAR, TOLERANCE);\n        outside += (next)*sgt(next, -(NEAR+0.25*TOLERANCE), TOLERANCE) * slt(next, (NEAR+0.25*TOLERANCE), TOLERANCE);\n        if (abs(next) <= NEAR*10.) {\n            avg += next;\n            ac += 1.0;\n            vec3 N = normalize(sdf(p) - vec3(\n                sdf(p - e.xyy),\n                sdf(p - e.yxy),\n                sdf(p - e.yyx)\n            ));\n          \n            NdotL = abs(dot(N, L));\n            col += NdotL*(((inside*inside*30. * vec3(0.96, 0.15, 0.03)) + (outside*outside * vec3(0.77, 0.35, 0.39))));\n\n\n        }\n        \n        t += next;\n    }\n    \n    ac = max(1.0, ac);\n    vec3 p =ro+rd*t;\n    col /= ac;\n    avg /= ac;\n    col = max(col, vec3(0.0));\n   // col *= (t)/100000.;\n    col += 0.36*(clamp((inside/outside), 0.0, 1.0) / 3.0*vec3(1.0 + (col*col)));\n    \n    return col;\n}\n\n\nvoid mainImage(out vec4 o, in vec2 fc) {\n  vec3 col = vec3(0.0);\n  vec2 uv = (fc-0.5*R.xy)/R.y;\n  vec4 m = vec4((iMouse.xy-0.5*R.xy)/R.y,iMouse.zw);\n  \n  float t = T*0.5;\n  vec3 ro = vec3(0, 0.15, mix(-6.0, -8.0, 0.5+0.5*sin(t)));\n  vec3 rd = normalize(vec3(uv, 1.0));\n  \n  float ry = sin(t)*0.25;\n  float rx = t;\n  if (m.z > 0.001) {\n      ry = m.y*TAU;\n      rx = m.x*TAU;\n\n  }\n  ro.yz *= rot(ry);\n  ro.xz *= rot(rx);\n  rd.yz *= rot(ry);\n  rd.xz *= rot(rx);\n  \n  \n  col += render(ro, rd);\n  vec3 gradient = mix(vec3(0, 0, 0), vec3(1., 0.18, 0.18), smoothstep(0.0, 1.0, dot(rd, vec3(0, -1, 0))));\n  col = mix(col, gradient, smoothstep(0.156, 0.0, luma(col)));\n  col = aces(col);\n  col += col*luma(col);\n  col = pow(col, vec3(1.0/2.2));\n  \n  o = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}