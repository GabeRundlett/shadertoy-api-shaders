{
    "Shader": {
        "info": {
            "date": "1610238322",
            "description": "move= ESDF             +TG (=up down)   \nrotate= arrows/mouse +WR(roll)\nplaceLight = P+L\n\nshortened version of\nhttps://www.shadertoy.com/view/wl3yDs",
            "flags": 48,
            "hasliked": 0,
            "id": "ttdyDl",
            "likes": 14,
            "name": "RepVolQuat",
            "published": 3,
            "tags": [
                "fractal",
                "cloud",
                "globalillumination",
                "volumetric",
                "pathtracing",
                "importance",
                "pcg",
                "quaternioncamera",
                "crepustularity",
                "warpspeed"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "//Volumetric fractal explorer \n\n//parent               : https://www.shadertoy.com/view/ttdyDl\n//grandparent (voluRep): https://www.shadertoy.com/view/wttyDX\n//grandparent (Quatcam): https://www.shadertoy.com/view/wtdyRs\n//older       (Quatcam): https://www.shadertoy.com/view/4tSyRz\n\n//Features:\n//Multiple light sources(importance sampled)\n//Anisotripic scattering\n//Multibounce scattering\n//Approximate volumetric reprojection for temporal denoising\n//quaternion camera movement with inertia and collision option\nvoid mainImage(out vec4 c,vec2 p\n){\n ;//p-=1.\n ;//p=(p-iResolution.xy/2.)*2.\n ;c=texture(iChannel0,p/iR.xy)\n ;//p=abs(p)\n ;//c=texture(iChannel0,tHammerI(p))\n ;c=1.07*tanh(pow(c/c.w,vec4(.6))) ;}//essential gamma\n \n//MIT License\n//Copyright 2020 Mykhailo Moroz\n//Permission is hereby granted,free of charge,to any person obtaining a copy of this software and associated documentation files (the \"Software\"),to deal in the Software without restriction,including without limitation the rights to use,copy,modify,merge,publish,distribute,sublicense,and/or sell copies of the Software,and to permit persons to whom the Software is furnished to do so,subject to the following conditions:\n//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n//THE SOFTWARE IS PROVIDED \"AS IS\",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,DAMAGES OR OTHER LIABILITY,WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE,ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//assume as \"Do whatever you want\" License",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define vec1 float\nstruct v22{vec3 a,b;};//for 2 domains(density/distance field)\n\n\n#define camType 1\n\n//its not just broken during rotation\n//, there are just-as-broken ghost-images during straving\n\n\nconst vec2 MOUSE_SENSITIVITY = vec2(-1.,1.)*9.;\nconst float\n //set to -100. to skip collisions\n //=.01 is reasonable for the mandelbulb distanceField\n PHYSICS_RADIUS=-100.\n,LIN_ACCE=5.*.5//linear accelleration\n,ANG_ACCE=5.*2.//angular accelleration\n,LIN_DRAG=5.*1.//linear drag\n,ANG_DRAG=5.*2.//angular drag\n;\n\n//radius of lightSource sphere\n#define LIGHT_RADIUS .01\n\n//specific buffereB Addresses\nconst float \n camP0=0.//camera position (0th derivative/time)\n,camA0=1.//camera angle    (0th derivative/time)\n,camP1=2.//camera position (1th derivative/time) == camera velocity\n,camA1=3.//camera angle    (1th derivative/time) == camera momentum\n,li0P0=4.//light0 position\n,li1P0=5.//light1 position\n,camP0p=6.//camera position of previous frame\n,camA0p=7.//camera angle    of previous frame\n,li2P0 =8.//light0 position\n,li3P0 =9.//light1 position\n,NBuffB=8.//max address count\n;\n#define tf(i)texelFetch(iChannel2,ivec2(i,0),0)\nvec4 get(ivec2 a,sampler2D b){return texelFetch(b,a,0);}\nvec4 get(float a,sampler2D b){return texelFetch(b,ivec2(a,0),0);}\nvec4 get(int   a,sampler2D b){return texelFetch(b,ivec2(a,0),0);}\n\nconst float tau=acos(-1.)*2.// 1/1 rotation in radians\n,pi=acos(-1.)               // 1/2 rotation in radians\n,pi2=acos(0.)               // 1/4 rotation in radians\n//,pi4=acos(0.)*.5            // 1/8 rotation in radians\n;\n#define dd(a) dot(a,a)\n#define sat(a) clamp(a,0.,1.)\n#define u2(u) ((u)*2.-1.)\n#define iR iResolution\n#define iM iMouse\nvec1 mav(vec2 a){return max(a.x,a.y);}\nvec1 mav(vec3 a){return max(mav(a.xy),a.z);}\nvec3 ma0(vec3 a){return max(a,0.);}\nvec1 mu(vec2 a){return a.x*a.y;}\nvec1 mu(vec3 a){return a.x*a.y*a.z;}\nvec1 su(vec2 a){return a.x-a.y;}\nvec1 su(vec3 a){return a.x+a.y-a.z;}\nvec1 ad(vec2 a){return a.x+a.y;}\nvec1 ad(vec3 a){return a.x+a.y+a.z;}\n\n//internal RNG state \nuvec4 s0,s1;\nivec2 pixel;\n\nvoid rng_initialize(vec2 p,int frame\n){pixel=ivec2(p)\n ;s0=uvec4(p,uint(frame),uint(p.x)+uint(p.y))//white noise seed\n ;s1=uvec4(frame,frame*15843,frame*31+4566,frame*2345+58585)//blue noise seed\n ;}\n\nuvec4 pcg4d(uvec4 v//https://www.pcg-random.org/\n){v=v*1664525u+1013904223u\n ;v.x+=v.y*v.w;v.y+=v.z*v.x;v.z+=v.x*v.y;v.w+=v.y*v.z\n ;v=v ^ (v>>16u)\n ;v.x+=v.y*v.w;v.y+=v.z*v.x;v.z+=v.x*v.y;v.w+=v.y*v.z\n ;return v;}\n\nfloat rand(){return float(pcg4d(s0).x)/float(0xffffffffu);}\nvec2 rand2(){return  vec2(pcg4d(s0).xy)/float(0xffffffffu);}\nvec3 rand3(){return  vec3(pcg4d(s0).xyz)/float(0xffffffffu);}\nvec4 rand4(){return  vec4(pcg4d(s0))/float(0xffffffffu);}\n\nivec2 shift2(//random blue noise sampling pos\n){return (pixel+ivec2(pcg4d(s1).xy%0x0fffffffu))%1024;}\n\nvec3 udir(//uniformly spherically distributed\n){vec2 rng=rand2()\n ;vec2 r=vec2(2.*pi*rng.x,acos(2.*rng.y-1.))\n ;vec2 c=cos(r),s=sin(r)\n ;return vec3(c.x*s.y,s.x*s.y,c.y);}\n\nfloat HenyeyGreenstein(float g,float c//g,costh\n){return (4.*pi*pow(1.0+g*g-2.0*g*c,3./2.))/(1.-g*g);}\n \nfloat sdBox(vec3 p,vec3 b\n){vec3 q=abs(p)-b;return length(ma0(q))+min(mav(q),0.);}\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n \n//from https://www.shadertoy.com/view/XsSXDy\nvec4 pwS(float x){return vec4(x*x*x,x*x,x,1.0);}\n\nvec4 spline(float x,vec4 a,vec4 b,vec4 c,vec4 d\n){const vec4 ca=vec4( 3,-5, 0,2)/2.\n ;const vec4 cb=vec4(-1, 5,-8,4)/2.\n ;return a*dot(cb,pwS(1.+x))\n        +b*dot(ca,pwS(   x))\n        +c*dot(ca,pwS(1.-x))\n        +d*dot(cb,pwS(2.-x));}\n//We could expand the powers and build a matrix instead (twice as many coefficients\n//would need to be stored,but it could be faster.\n\nvec3 pq(vec2 a){return vec3(a.x*a.x,a.x*a.y,a.y*a.y);}\nfloat pow7(float a){float b=a*a;float c=b*b;return a*b*c;}\n//mandelbulb.core \n//o.x=distance , o.yzw=orbittrap\n//w.xyz=uv     ,w.w=dd(uv)\nvoid mandelCore(inout vec4 o,inout vec4 w,vec3 u\n){o.x=8.*sqrt(pow7(w.w))*o.x+1.\n ;vec3 w2=w.xyz*w.xyz,w4=w2*w2\n ,e=vec3(ad(w2.xz)\n        ,ad(w4)-6.*dot(w2.zx,w2.yy)+2.*mu(w2.xy)\n        ,su(w2.zxy))\n ;w.xyz=u+vec3( 64.*mu(w.xyz)*su(w2.xz)*ad(pq(w2.xz)*vec3(1,-6,1))\n              ,-16.*w2.y*mu(e.xzz)+e.y*e.y\n              ,-8.*w.y*(dd(w4.xz)+mu(w2.xz)*(-28.*w4.x+70.*mu(w2.xz)-28.*w4.z)))\n              *(vec3(0,1,0)+vec3(1,0,1)*e.z*e.y*inversesqrt(pow7(e.x)))\n ;w.w=dd(w.xyz);o.yzw=min(abs(w.xyz)*1.2,o.yzw);}\n\nvec4 mandelBulbO(vec3 u//return distance.x,orbittrap.yzw\n){vec4 w=vec4(u,dd(u)),o=vec4(1)\n ;for(int i=0;i<5;i++\n ){if(w.w>1.2)break;mandelCore(o,w,u);}\n ;o.x=.25*log(w.w)*sqrt(w.w)/o.x;return o;}\n\nvec1 mandelBulb(vec3 u//return distance.x,orbittrap.yzw\n){vec4 w=vec4(u,dd(u)),o=vec4(1)\n ;for(int i=0;i<5;i++\n ){if(w.w>1.2)break;mandelCore(o,w,u);}\n ;return .25*log(w.w)*sqrt(w.w)/o.x;}\n\n//subroutines of   https://www.shadertoy.com/view/XlVyDK\n#define le(a) sqrt(dd(a))\n#define co(a) cos(a)\n#define si(a) sin(a)\n//real and imaginary parts for polar z\nfloat arg(vec2 a){return atan(a.y,a.x);}\nvec2 c2p(vec2 a){return vec2(arg(a),le(a));}\nvec2 p2c(vec2 a){return vec2(co(a.x),si(a.x))*a.y;}\nfloat real(vec2 z){return p2c(z).x;return z.s*co(z.t);}\nfloat imag(vec2 z){return p2c(z).y;return z.s*si(z.t);}\n#define pMOD(d,e) d e(inout d a,d b){d c=floor((a/b)+.5);a=(fract((a/b)+.5)-.5)*b;return c;}\npMOD(vec1,pmod)pMOD(vec2,pmod)pMOD(vec3,pmod)pMOD(vec4,pmod)//repetitive only for less repetitive legacy namespace support.\n/*\nvec1 pModMirror1(inout vec1 p,vec1 s){float c=pmod(p,s);p*=u2(mod(c,2.));return c;}\nvec2 pModMirror1(inout vec2 p,vec2 s){vec2 c=pmod(p,s);p*=u2(mod(c,2.));return c;}\nfloat pModInterval1(inout float p,float s,float b,float x){float c=pmod(p,s);if(c>x){p+=s*(c-x);c=x;}if(c<b){p+=s*(c-b);c=b;}return c;}\nfloat pModSingle1(inout float p,float s){float c=floor((p/s)+.5);p=mix(p,(fract((p/s)+.5)-.5)*s,step(p,0.));return c;}\nfloat pModPolar(inout vec2 p,float t\n){vec2 q=c2p(p)\n ;float v=pi/t\n ;q.x+=v//offset by half-axis\n ;float c=floor(q.x*.5*v)\n ;q.x=mod(q.x,2.*v)-v\n ;p=p2c(q)\n ;if(abs(c)>=t*.5)c=abs(c)\n ;return c;}\nvec2 pModGrid2(inout vec2 p,vec2 size\n){vec2 c=floor((p+size*.5)/size)\n ;p=mod(p+size*.5,size)-size*.5;p*=mod(c,2.)*2.-vec2(1);p-=size*.5\n ;if(p.x>p.y)p.xy=p.yx;return floor(c*.5)\n ;}*/\n\nvec3 repeat(vec3 u){//return u;\n ;vec3 v=pmod(u,vec3(2.8));return u\n ;}\n\nvec1 df (vec3 u){u=repeat(u);return mandelBulb (u);}\nvec4 dfo(vec3 u){u=repeat(u);return mandelBulbO(u);}\n\nvec3 normal(in vec3 p\n){vec2 e=vec2(-1,1)*.001\n ;return normalize(e.yxx*df(p+e.yxx)+e.xxy*df(p+e.xxy)\n                  +e.xyx*df(p+e.xyx)+e.yyy*df(p+e.yyy));}\n\n//return smallest angle between 2 vectors\nfloat AngleBetween(vec3 a,vec3 b){;return acos(dot(a,b)/length(a)/length(b));}\n\n//--- quaternionRotation math (updated 2021-Jan-7) //https://www.shadertoy.com/view/4tSyRz\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\nvec4 qid(){return vec4(0,0,0,1);}//quaternion Identity\n//\n//---quaternion & AxisAngle (==quaternion multiplication)\n//\n//return quaternion from Axis[a] and Angle[r]\nvec4 aa2q(vec3 a,float r){vec2 g=vec2(sin(r),cos(r))*.5;return normalize(vec4(a*g.x,g.y));}\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q){return vec4(q.xyz/sqrt(1.0-q.w*q.w),acos(q.w)*2.);}//assumed q is normalized coverts to axis&angle\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2){return vec4(q1.xyz*q2.w+q2.xyz*q1.w+cross(q1.xyz,q2.xyz),(q1.w*q2.w)-dot(q1.xyz,q2.xyz));}\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f\n){float d=dot(a,b),t=acos(abs(d)),o=(1./sin(t));return normalize(a*sin(t*(1.0-f))*o*sign(d)+b*sin(t*f)*o);}\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q){return q/dd(q);}//return normalize(q);}\n//\n// quaternion & vectors\n//\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\nvec4 qBetween(vec3 a,vec3 b// http://wiki.secondlife.com/wiki/LlRotBetween\n){float v=sqrt(dd(a)*dd(b));if(v==0.)return qid();v=dot(a,b)/v\n ;vec3 c=a.yzx*b.zxy-a.zxy*b.yzx/v;float d=dd(c)\n ;if(d!=0.){float s=(v>-0.707107) ? 1.+v : d/(1.+sqrt(1.-d));return vec4(c,s)/sqrt(d+s*s);}\n ;if(v>0.)return qid()\n ;float m=length(a.xy);return (m!=0.) ? vec4(a.y,-a.x,0,0)/m : vec4(1,0,0,0);\n ;}//Written by Moon Metty, optimized by Strife Onizuka (faster version, without trigonometry)\nvec4 qBetween2(vec3 a,vec3 b){if(a==b)return qid();return aa2q(cross(a,b),AngleBetween(a,b));}//less code, but has some slower or less precise cases.\n//return inverse of quaternion\nvec4 qinv(vec4 q){return vec4(-q.xyz,q.w)/dd(q);}\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q,vec3 p){return qq2q(q,qq2q(vec4(p,.0),qinv(q))).xyz;}\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it i rotated by VECTOR p (asif it is a quaternion)\n//vec3 vq2v(vec3 p,vec4 q){return qq2q(qinv(q),qq2q(vec4(p,0.0),q)).xyz;}\n//vec3 vq2v(vec4 a,vec3 b){return qv2v(a,b);}//in case of namespace confuction\n//vec3 qv2v(vec3 a,vec4 b){return vq2v(a,b);}//in case of namespace confuction\n//\n//---quaternion & matrix (second to last in list, because they are bulky)\n//\n//return mat3 of [q]uaternion (rotation matrix without translation)\nmat3 q2m(vec4 q //https://www.shadertoy.com/view/WsGfWm\n){vec3 a=vec3(-1,1,1);mat3 m=mat3(.5)+mat3(0,q.zyz*a,0,q.xyx*a.xxy,0)*q.w\n +matrixCompMult(outerProduct(q.xyz,q.xyz),1.-mat3(1))//3 unnecessary multy by 0.\n ;q*=q//<-everythig except the main diagonal\n ;m-=mat3(q.y+q.z,0,0,0,q.x+q.z,0,0,0,q.x+q.y)//<- only the main diagonal\n ;return m*2.;}//this *2 scalar may not need to be internal\n//return q2m() as mat4, with [t]ranslation\nmat4 q2m(vec4 q,vec3 t //studying https://www.shadertoy.com/view/WsGfWm\n){mat3 m=q2m(q);return mat4(m[0],0,m[1],0,m[2],0,t,0);}//*=2,and add tranlation\n//return rotation matrix sub of mat4\nmat3 m42Rot(mat4 a){return mat3(a[0].xyz,a[1].xyz,a[2].xyz);}\n#define m2f(a,b) m[a][b]-m[b][a]\nvec4 m2q(mat3 m//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\n){float q=2.*sqrt(abs(1.+m[0][0]+m[1][1]+m[2][2]))//http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n ;return vec4(vec3(m2f(2,1),m2f(0,1),m2f(1,0))/q/4.,q);}\n//\n//---quaternion+ EulerRot (last in list, because they are the worst)\n//\n//eulerRot2Quaternion and back \n//- not elegant, not fast\n//- and theres 6 arbitiary, incompatible and non commutative permutatuions of [yaw opitch roll] order\n//BUT, your keyboard inputs are most likely Euler-rotations, so we have to chose one:\n//wikipedia does (jaw pitch roll) order: of a plane taking of;\n//; (jaw)   first    steers like a car\n//, (pitch) secondly the nose pulls up\n//, (roll)  lastly   and in the air to roll\n//\n//above function is used here, but it lacks an inverse, unlike below other order:\n//\nfloat at2e(vec2 a){a*=2.;return atan(a.x,1.-a.y);}\n//return quaternion of Euler[yaw,pitch,roll]     //this one needs to be phased out\n//float mu(vec3 a){return a.x*a.y*a.z;}\nvec4 eYPR2q(vec3 o){o*=.5;vec3 s=sin(o);o=cos(o)\n//https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n ;vec4 a=vec4(s.xz,o.xz);return  a.yyww*a.zxxz*o.y+a.wwyy*a.xzzx*s.y*vec4(-1,1,-1,1);}\n//return Euler[yaw,pitch,roll]  of quaternion \nvec3 q2eYPR(vec4 q){vec3 r=vec3(0,2.*(q.w*q.y-q.z*q.x),0)\n ;return vec3(at2e(vec2(dot(q.wx,q.zy),dd(q.yz)))          //yaw   (z-axis rotation)\n             //at2e(vec2(q.w*q.z+q.x*q.y,q.y*q.y+q.z*q.z)) //yaw   (z-axis rotation)\n              ,(abs(r.y)>=1.)?r.y=sign(r.y)*pi*.5:asin(r.y)//pitch (y-axis rotation) (worksaved asin())\n              ,at2e(vec2(dot(q.wy,q.xz),dd(q.xy))))        //roll  (x-axis rotation)\n            //,at2e(vec2(q.w*q.x+q.y*q.z,q.x*q.x+q.y*q.y)))//roll  (x-axis rotation)\n ;}//<-untested function\n/*\n//these EulerOrders are being phased out:\n//return quaternion of Euler [pitch, yaw, roll]  //this one needs to be phased out\nvec4 ePYR2q(vec3 o){//return eYPR2q(o.zyx)\n;o*=.5;vec3 s=sin(o);o=cos(o);vec4 a=vec4(s.xy,o.xy)//https://www.shadertoy.com/view/4tSyRz\n ;return a.xyxz*a.wzyw*o.z+a.yxzx*a.zwwy*s.z*vec4(1,-1,1,-1);}\n//return quaternion of EulerRotation [around axes in (Z,Y,X)==(roll,pitch,yaw) order]\nvec4 eRPY2q(vec3 c){c*=.5;vec3 s=sin(c);c=cos(c)//http://wiki.secondlife.com/wiki/LlEuler2Rot\n ;return qq2q(qq2q(vec4(0,0,s.z,c.z),vec4(0,s.y,0,c.y)),vec4(s.x,0,0,c.x));}\n/**/\n//---end__ quaternion\n\n\n//https://www.shadertoy.com/view/ldjyRK\nconst float s2=sqrt(2.);\nvec2 scm(float a){return sin(vec2(a,a+pi2));}//NOT a rotation, but a reflection at a halfRotated axis.\nvec2 sc(float a){return scm(a);//lazy override\n return vec2(sin(a),cos(a)); ;}//actual reflection\n//Hammer.transform:\nvec2 tHammer(vec2 p){\n vec2 s=sc(p.y),o=sc(p.y*.5);\n return s2*vec2(2.*s.y*o.x,s.x)/sqrt(1.+s.y*o.y);}\n//Hammer.transform.Inverse\nvec2 tHammerI(vec2 p){float z=1.-(p.x*p.x/16.)-(p.y*p.y/4.);\n if(z<0.)discard;float s=sqrt(z);\n return vec2(2.*atan((s*p.x),(2.*(2.*z-1.))),asin(s*p.y));}\n \n//scale: (-0.5.-0.5) x (0.5..0.5) -> (l[0]..l[1]) x (l[2]..l[3])\nvec2 scale(vec2 p, vec4 l){\n return (p+vec2(.5))*vec2(l[1]-l[0],l[3]-l[2])+vec2(l[0],l[2]);}\n//scale.inverse p=scale1(scale_forward(p));\nvec2 scale1(vec2 p, vec4 l){\n return (p-vec2(l[0],l[2]))/vec2(l[1]-l[0], l[3]-l[2])-vec2(.5);}\n\nvec2 hammerScale(vec2 u,vec2 r\n){u=u.xy/r.xy-.5\n ;u*=sqrt(2.)\n ;//u*=1.; //fieldOfView\n ;vec4 CarLim=vec4(-2,2,-1,1);//carthesian limits\n ;return scale(u,CarLim);}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//#define LOW_QUALITY\n\n#ifdef LOW_QUALITY\n    #define MAX_STEPS 16\n    #define SCALING 0.1\n    #define DITHER 0.5\n    #define TRACE_STEPS 8\n    //potato mode\n    //#define TRACE_STEPS 3\n    #define MAX_DIST 10.0\n#else\n    #define MAX_STEPS 40\n    #define SCALING 0.1\n    #define DITHER 0.5\n    #define TRACE_STEPS 50\n    #define MAX_DIST 10.0\n#endif\n\n\nconst float FOV=1.\n,LUMINOUSITY     =80.\n,ABSORPSION      =sat(.999)\n,TAA             =sat(.97)//temporal Antialiasing factor (multiplies by the 2 below)\n,TAAMA           =sat(.85)//reprojection ammount\n,TAAMS           =sat(.01)//reprojection smoothness\n,ANISOTROPY      =.3//temporal Anisotropy denoise\n,AMBIENT_FOG     =max(0.001,abs(0.1))//0.001 improves performace\n;\n\nfloat density(//must not be <2. for the mandelbulb\n){\n ;return  mix(200.,3.,cos(iTime*.3)*.5+.5)\n ;return  16.;}\n\nfloat min_step(){return 1.25/density();}\n\n//cloud sharpness\n#define sharpness .0001\n\n\n//light positions\nvec3 lpos0,lpos1,lpos2,lpos3;\n\n#define SAM(a,b) texture(tex,(i+vec2(float(a),float(b))+.5)/r,-99.)\nvec4 textureBicubic(sampler2D tex,vec2 t\n){//return texture(tex,t)//skip override\n ;vec2 r=vec2(textureSize(tex,0))\n ;vec2 p=r*t-.5\n ;vec2 f=fract(p)\n ;vec2 i=floor(p)\n ;return spline(f.y,spline(f.x,SAM(-1,-1),SAM(0,-1),SAM(1,-1),SAM(2,-1))\n                   ,spline(f.x,SAM(-1,0),SAM(0,0),SAM(1,0),SAM(2,0))\n                   ,spline(f.x,SAM(-1,1),SAM(0,1),SAM(1,1),SAM(2,1))\n                   ,spline(f.x,SAM(-1,2),SAM(0,2),SAM(1,2),SAM(2,2)));}\n\n//blue noise\nvec4 rand4blue(){return texelFetch(iChannel1,shift2(),0);}\n\nvec4 mandelbulb_fog(vec3 p,float K\n){vec4 d=dfo(p)\n ;return vec4(density()*ma0(1.-d.yzw)*smoothstep(K,0.,d.x),d.x);}\n\nvec4 box_fog(vec3 p,vec3 b,float k\n){vec3 refl=normalize(vec3(0.4,0.6,0.9))\n ;float sc=1.0\n ;for(int i=0;i < 6;i++\n ){refl.xy=rot(1.6)*refl.xy\n  ;p-=2.*max(dot(refl,p),0.)*refl\n  ;refl.yz=rot(2.1)*refl.yz\n  ;p+=0.015*sin(10.*dot(refl,p)+sin(p.x*p.y));}\n ;float sdf=sdBox(p,b)/sc\n ;return vec4(density()*(vec3(.3,.6,.9)*+(.5+.5*sin(40.*vec3(.392,.580,1.000)*p.x)))*smoothstep(k,-k,sdf),sdf);}\n\nvec4 fogDens(vec3 p\n){vec4 box=mandelbulb_fog(p,sharpness)//box_fog(p,vec3(0.7,0.3,0.2),sharpness);\n ;float shells=min(MAX_DIST+0.6-length(p),\n \n min(\n min(length(p-lpos0),length(p-lpos1))\n ,min(length(p-lpos2),length(p-lpos3)))\n \n) //light source and background\n ;return vec4(box.xyz+vec3(0.141,0.439,1.000)*AMBIENT_FOG,min(box.w,shells));}\n\n\nvec4 lp0(vec3 p,float r\n){float t0=length(lpos0-p)\n ;float t1=length(lpos1-p)\n ;float prob=t0/(t0+t1)\n ;return (r>prob)?vec4(lpos0,prob):vec4(lpos1,1.-prob) ;}\n \n\n /*\n //trying and failing to add more lights\nvec4 lp1(vec3 p,float r\n){float t0=length(lpos2-p)\n ;float t1=length(lpos3-p)\n ;float prob=t0/(t0+t1)\n ;return (r>prob)?vec4(lpos0,prob):vec4(lpos1,1.-prob) ;}\n\nvec4 lp2(vec3 p,float r,vec3 ro\n){vec4 l0=lp0(ro,r)    //sample light importance \n ;vec4 l1=lp1(ro,r)    //sample light importance \n ;float t0=length(l0.xyz-p)\n ;float t1=length(l1.xyz-p)\n ;float prob=t0/(t0+t1)\n ;return (r>prob)?vec4(l0.xyz,prob):vec4(l1.xyz,1.-prob) ;}\n*/\n\n//trace a multibounce light path to the lights\nvec3 trace(vec3 ro,vec3 id,float dither\n){//acc opacity\n ;vec3 k=vec3(1)\n ;float step_size\n ;float td =0.\n ;float pdf=1.\n ;vec2 r=rand2()\n ;vec4 l0=lp0(ro,r.x)//sample light importance \n ;//vec4 la=lp1(ro,r.x)   \n ;//vec4 lb=lp2(ro,r.x,ro) \n ;pdf*=l0.w//*lb.w\n ;vec3 rd=id\n ;float dist=MAX_DIST\n ;//scatter samples \n ;int ss=(r.y < 0.5)?(TRACE_STEPS/3):0  \n //ooh i see, we randomly trace one of all lights\n ;int i=0\n ;for(;i < TRACE_STEPS;i++\n ){vec4 rho=fogDens(ro)\n  ;step_size=(1.0-DITHER*dither)*max(rho.w,max(max(min_step(),SCALING*td),5e-5*length(rho)))\n  ;k *=exp(-step_size*rho.xyz*ABSORPSION)//acc\n  ;rd=(i < ss)?normalize(mix(rd,udir(),1.-exp(-step_size*length(rho.xyz)*(1.-ANISOTROPY)))):rd//scatter\n  ;if(i ==ss //GI shadow ray\n  ){dist=length(l0.xyz-ro)+2e-2\n   ;rd=(l0.xyz-ro)/dist\n   ;pdf*=4.*pi*dist*dist //light distance pdf\n   ;pdf*=HenyeyGreenstein(ANISOTROPY,dd(rd));}\n  ;if(length(k)<.07||td>dist) break\n  //;if(dd(ro)>17.)break  //shaded sphere break\n  ;ro+=rd*step_size\n  ;td+=step_size;}\n ;if(i<ss)return vec3(0)\n ;return LUMINOUSITY*k*smoothstep(.068,.07,length(k))/pdf;}\n\n//return previous screenspace address to be returned\n//use previous camera matrix and camera position to reproject a point onto previos frame\nvec2 reproject(vec3 p){\n ;mat3 cam=q2m(tf(camA0p))//stores quaternion\n ;vec3 s=inverse(cam)*normalize(p)\n ;return vec2(s.yz*iR.y/(FOV*s.x)+.5*iR.xy);}\n\n#define FieldOfView 2.5\nv22 getRay(vec2 u//uU is not normalized\n){u=(u-iR.xy*.5)/iR.y\n ;mat4 ct=q2m(tf(camA0),tf(camP0).xyz)\n ;mat3 m=m42Rot(ct) //;mat3 m=q2m(tf(camA0))\n ;vec3 rd=normalize(m*vec3(0,0,1)   //up\n                   +(m*vec3(1,0,0)*u.x//right+forward...\n                   +m*vec3(0,1,0)*u.y)*pi/FieldOfView)\n ;return v22(ct[3].xyz,rd);}\n\nvoid mainImage(out vec4 c,in vec2 p\n){if(iFrame<1){c=vec4(0);return;}\n ;rng_initialize(p,iFrame)\n ;vec3 campos=tf(camP0).xyz\n ;vec3 ro=campos\n ;vec3 rd=normalize(q2m(tf(camA0))*vec3(1.,FOV*(p-.5*iR.xy)/iR.y))\n ;lpos0=tf(li0P0).xyz\n ;lpos1=tf(li1P0).xyz\n ;lpos2=tf(li2P0).xyz\n ;lpos3=tf(li3P0).xyz\n ;vec4 brand=rand4blue()\n ;vec3 k=vec3(1)//acc opacity\n ;vec3 col=vec3(0)//acc light to camera\n ;int L=0    //main camera ray\n ;float step_size\n ;float td=0.\n ;vec4 maxl_p=vec4(0)\n ;int i=0\n ;for(;i<MAX_STEPS;i++\n ){vec4 rho=fogDens(ro)\n  ;step_size=(1.0-DITHER*brand.x)*max(rho.w,max(max(min_step(),SCALING*td),2e-5*length(rho)))\n  ;vec3 absorption=exp(-ABSORPSION*step_size*rho.xyz)\n  ;vec4 ldis=vec4(length(lpos0-ro),length(lpos1-ro)\n                 ,length(lpos2-ro),length(lpos3-ro))\n  ;vec3 scattering=k.xyz*(1.-absorption.xyz)\n  ;col+=vec3(LUMINOUSITY/10.)*k.xyz*(step(ldis.x,LIGHT_RADIUS)\n                                    +step(ldis.y,LIGHT_RADIUS)\n                                    +step(ldis.z,LIGHT_RADIUS)\n                                    +step(ldis.w,LIGHT_RADIUS))\n  ;if(((rho.z>1.)||rho.z>.005 && i%4 ==0)\n  ){float pdf=(rho.z>0.005 && rho.z<1.)?.25:1.\n   ;col+=scattering*trace(ro,rd,brand.z)/pdf;}\n  ;k*=absorption//acc\n  ;td+=step_size\n  ;ro+=step_size*rd\n  ;float ls=length(scattering)\n  ;maxl_p=(ls>maxl_p.w)?vec4(ro,ls):maxl_p\n  ;if(length(k) < 0.2 || distance(ro,vec3(0))>MAX_DIST) break;}\n ;if(i >=MAX_STEPS && length(k)>1.05) maxl_p.xyz=ro\n ;//col=vec3(distance(maxl_p.xyz,campos)/3.)//monochrome distance overwrite\n ;vec3 prev=tf(camP0p).xyz\n ;vec2 r=reproject(prev-maxl_p.xyz)/iR.xy\n ;//r=tHammerI(r)\n ;c=vec4(col,1)+textureBicubic(iChannel0,r)\n               *TAA*mix(1.,TAAMA,smoothstep(0.,TAAMS,length(prev-campos)))//accumulation movement\n               *mu(step(abs(r-vec2(.5)),vec2(.5)))//accumulation outside prev frame\n ;}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Controller\n\n//Keyboard constants\nconst int keyLe=37,keyUp=38,keyRi=39,keyDn=40\n,keyA=65,keyB=66,keyC=67,keyD=68,keyE=69,keyF=70,keyG=71,keyH=72,keyI=73,keyJ=74,keyK=75,keyL=76,keyM=77,keyN=78,keyO=79,keyP=80,keyQ=81,keyR=82,keyS=83,keyT=84,keyU=85,keyV=86,keyW=87,keyX=88,keyY=89,keyZ=90;\nbool key(int k){return texelFetch(iChannel3,ivec2(k,0),0).x>0.5;}\n  \n//modify inputs by changing the ivec3() below (keys are defined in CommonTab)\nconst ivec3 klp=ivec3(keyF ,keyT ,keyE).zxy//right ,up  ,front      ==+linear\n           ,kln=ivec3(keyS ,keyG ,keyD).zxy//left  ,down,back       ==-linear\n           //... above .zxy swivel is a porting artefact\n           ,kap=ivec3(keyLe,keyUp,keyR) //kPitchLeft ,kJawUp  ,kRollRight ==+angular\n           ,kan=ivec3(keyRi,keyDn,keyW);//kPitchRight,kJawDown,kRollLeft  ==-angular\n\n//constant code:\nfloat kg(int key_code){return texelFetch(iChannel3, ivec2(key_code,0), 0).x;}\nvec3 ks(ivec3 a){return vec3(kg(a.x),kg(a.y),kg(a.z));}//key input subroutine\nvec3 drag(vec3 r,vec3 a,float d){return (r+a*iTimeDelta)*(1.-d*iTimeDelta);}\n  \nvec4 cp0(//return camera linear Position.xyz (.w is unused)\n){if (iFrame<1)return vec4(-1.5,1.5,0,1);\n ;vec3 r=tf(camP0).xyz\n ;if(PHYSICS_RADIUS>-99.){//optional collision\n  ;float d=PHYSICS_RADIUS-df(r.xyz)\n  ;if (d>0.)r.xyz+=normal(r)*d ;} \n ;return vec4(r+(q2m(tf(camA0),vec3(0))\n               *vec4(tf(camP1).xyz,0)).xyz*iTimeDelta,0);}\n\nvec4 cp1(//return camera linear velocity.xyz (.w is unused)\n){return vec4(drag(tf(camP1).xyz,LIN_ACCE*(ks(klp)-ks(kln)),LIN_DRAG),0);}\n \nconst vec4 rotStart=vec4(-.27,.5,0,0)*pi;\nvec4 ca0(//return camera angular Position.xyz (quaternion)\n){if (iFrame <1)return aa2q(vec3(0,0,1),-2.75)\n ;return normalize(qq2q(eYPR2q(iTimeDelta*tf(camA1).zxy),tf(camA0)));}\n\nvec4 ca1(//return camera angular velocity.xyzw (quaternion)\n){vec3 a=ks(kap)-ks(kan)\n ;if(sign(iMouse.z)==1.)a.xy+=MOUSE_SENSITIVITY*(iM.xy-abs(iM.zw))/iR.xy;\n ;a=clamp(a,-1.,1.)\n ;return vec4(drag(tf(camA1).xyz,a.yzx*ANG_ACCE,ANG_DRAG),0.);}\n\nvec4 lightPos(float q,int k,vec4 d\n){if(iFrame<1)return d\n ;vec4 c=tf(q)\n ;if(key(k))c.xyz=tf(camP0).xyz+vec3(LIGHT_RADIUS*1.3);\n ;return c;}\n \nvec4 cam4(float u//4 buffers for CameraControl\n){if(u<2.){if(u==camP0)return cp0();return ca0();}\n ;         if(u==camP1)return cp1();return ca1();}\n\nvec4 switchcase(float u\n){u=floor(u)//essential\n ;if(u<4.)return cam4(u);\n ;if(u==camP0p)return tf(camP0)//memorize previous pos\n ;if(u==camA0p)return tf(camA0)//memorize previous angle\n ;if(u==li0P0)return lightPos(u,keyL,vec4(.2,.9,0,0))\n ;if(u==li1P0)return lightPos(u,keyP,vec4(-.9,0,0,0))\n ;if(u==li2P0)return lightPos(u,keyO,vec4(-.1,.5,.5,0))\n ;if(u==li3P0)return lightPos(u,keyK,vec4(1.2,-1.,0,0))\n ;return vec4(0);}\n\nvoid mainImage(out vec4 c,vec2 u\n){if(!(u.y<0.||u.x<NBuffB))discard\n ;c=switchcase(u.x);}\n \n ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}