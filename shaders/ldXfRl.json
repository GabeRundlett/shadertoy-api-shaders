{
    "Shader": {
        "info": {
            "date": "1497468971",
            "description": "Voxel tracing with hexagonal prisms",
            "flags": 0,
            "hasliked": 0,
            "id": "ldXfRl",
            "likes": 17,
            "name": "Mandel Hex Vox",
            "published": 3,
            "tags": [
                "mandelbrot",
                "voxel",
                "hexagon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 752
        },
        "renderpass": [
            {
                "code": "// \"Mandel Hex Vox\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Hexagonal prism voxel traversal derived from shader by mattz; architecture\n// from \"Mandel City\".\n\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\n#define MULTI 0   // set =1 for extra reflections\n#define SQRT3 1.73205\n\nvec3 sunDir, cHit, qnHit;\nfloat tCur, dstFar;\nconst float hcScale = 1.2;\nconst vec3 hcSize = vec3 (0.5 * SQRT3, 1., 2.);\nconst float pi = 3.14159;\n\nbool HexCellFull (vec3 p)\n{\n  vec2 v, w;\n  float h;\n  p = (p * hcSize).yzx / hcScale;\n  p.xz *= 0.03;\n  p.x -= 0.85;\n  h = 0.;\n  if (length (p.xz + vec2 (0.25, 0.)) > 0.45 &&\n     length (p.xz + vec2 (1., 0.)) > 0.2 &&\n     (p.x < 0. || abs (p.z) > 0.04)) {\n    v = p.xz;\n    h = 80.;\n    for (int j = 0; j < 80; j ++) {\n      w = v * v;\n      if (w.x + w.y > 4.) {\n        h = float (j + 1);\n        break;\n      } else v = p.xz + vec2 (w.x - w.y, 2. * v.x * v.y);\n    }\n  }\n  return (0.3 * h > p.y);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec2 c, r, dr;\n  c = vec2 ((2. / SQRT3) * p.x, p.y);\n  r = floor (c);\n  r += mod (vec2 (r.x, r.y + step (2., mod (r.x + 1., 4.))), 2.);\n  dr = c - r;\n  r += step (1., 0.5 * dot (abs (dr), vec2 (SQRT3, 1.))) * sign (dr) * vec2 (2., 1.);\n  return r;\n}\n\nfloat HexVolRay (vec3 ro, vec3 rd)\n{\n  vec3 ht, htt, w;\n  vec2 hv[3], ve;\n  float dHit, ty, dy;\n  ro *= hcScale;\n  cHit = vec3 (PixToHex (ro.zx), floor (ro.y / hcSize.z + 0.5));\n  hv[0] = vec2 (0., 1.);\n  hv[1] = vec2 (1., 0.5);\n  hv[2] = vec2 (1., -0.5);\n  for (int k = 0; k < 3; k ++)\n     hv[k] *= sign (dot (hv[k], vec2 (0.5 * SQRT3 * rd.z, rd.x)));\n  dy = sign (rd.y);\n  qnHit = vec3 (0.);\n  dHit = dstFar * hcScale + 0.01;\n  for (int j = 0; j < 160; j ++) {\n    w = ro - (cHit * hcSize).yzx;\n    ht.z = 1e6;\n    for (int k = 0; k < 3; k ++) {\n      ve = vec2 (0.5 * SQRT3 * hv[k].x, hv[k].y);\n      htt = vec3 (hv[k], (1. - dot (ve, w.zx)) / dot (ve, rd.zx));\n      if (htt.z < ht.z) ht = htt;\n    }\n    ty = (0.5 * dy * hcSize.z - w.y) / rd.y;\n    if (ht.z < ty) cHit.xy += 2. * ht.xy;\n    else cHit.z += dy;\n    if (HexCellFull (cHit)) {\n      if (ht.z < ty) {\n        qnHit = - vec3 (0.5 * SQRT3 * ht.x, ht.y, 0.);\n        dHit = ht.z;\n      } else {\n        qnHit = - vec3 (0., 0., dy);\n        dHit = ty;\n      }\n      break;\n    }\n  }\n  return dHit / hcScale;\n}\n\nfloat EdgeDist (vec3 p)\n{\n  vec2 dh;\n  float d;\n  p *= hcScale;\n  dh = p.zx - cHit.xy * vec2 (0.5 * SQRT3, 1.);\n  if (qnHit.z == 0.) {\n    d = abs (fract (p.y / hcSize.z) - 0.5) * hcSize.z;\n    dh -= qnHit.xy * dot (dh, qnHit.xy);\n    d = min (d, abs (length (dh) - 1. / SQRT3));\n  } else {\n    dh = abs (dh);\n    d = max (0.5 * dot (dh, vec2 (SQRT3, 1.)), dh.y) - 1.;\n  }\n  return d;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w, e;\n  float f;\n  if (rd.y >= 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - rd.y, 8.) +\n       0.35 * pow (max (dot (rd, sunDir), 0.), 6.);\n    col = mix (col, vec3 (0.9), clamp (0.1 + 0.8 * rd.y *\n       Fbm2 (5. * rd.xz / max (rd.y, 0.001)), 0., 1.));\n  } else {\n    ro -= rd * ro.y / rd.y;\n    w = 0.5 * ro.xz;\n    f = Fbm2 (w);\n    e = vec2 (0.01, 0.);\n    vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.1, f - Fbm2 (w + e.yx)));\n    col = mix (vec3 (0.4, 0.5, 0.2), vec3 (0.35, 0.3, 0.1), f) *\n       (1. - 0.1 * Noisefv2 (31. * w));\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.1, 0.2, 0.4) + 0.25, pow (1. + rd.y, 32.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float dHit;\n  ro += 50. * rd;\n  ro.x += 8.;\n  dHit = HexVolRay (ro, rd);\n  ro += rd * dHit;\n  if (length (ro.xz - vec2 (8., 0.)) > 50.) dHit = dstFar;\n  if (dHit < dstFar) {\n    if (abs (EdgeDist (ro)) > 0.15) {\n      rd = reflect (rd, qnHit.yzx);\n      ro += 0.01 * rd;\n      dHit = HexVolRay (ro, rd);\n      ro += rd * dHit;\n      if (length (ro.xz - vec2 (8., 0.)) > 50.) dHit = dstFar;\n#if MULTI\n      if (dHit < dstFar) {\n        if (abs (EdgeDist (ro)) > 0.15) {\n          rd = reflect (rd, qnHit.yzx);\n          ro += 0.01 * rd;\n          dHit = HexVolRay (ro, rd);\n          ro += rd * dHit;\n          if (length (ro.xz - vec2 (8., 0.)) > 50.) dHit = dstFar;\n        }\n      }\n#endif\n    }\n  }\n  if (dHit < dstFar) col = BgCol (ro, reflect (rd, qnHit.yzx)) *\n     (0.4 + 0.6 * step (0.15, abs (EdgeDist (ro))));\n  else col = BgCol (ro, rd);\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  if (mPtr.z > 0.) {\n    az = 2.5 * pi * mPtr.x;\n    el = -0.3 * pi + 0.7 * pi * mPtr.y;\n  } else {\n    az = 1.2 * pi * sin (0.017 * pi * tCur);\n    el = -0.15 * pi + 0.1 * pi * sin (0.05 * pi * tCur);\n  }\n  el = clamp (el, -0.45 * pi, -0.02 * pi);\n  dstFar = 200.;\n  zmFac = 3.;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 0., -120.);\n  sunDir = normalize (vec3 (1., 1., -1.));\n  ro.y += 1.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}