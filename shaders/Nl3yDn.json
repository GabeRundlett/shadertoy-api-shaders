{
    "Shader": {
        "info": {
            "date": "1659529481",
            "description": "Simple sand-like cellular automaton",
            "flags": 32,
            "hasliked": 0,
            "id": "Nl3yDn",
            "likes": 6,
            "name": "Giza Cell Automaton",
            "published": 3,
            "tags": [
                "simulation",
                "cellular",
                "ca",
                "sand",
                "automaton"
            ],
            "usePreview": 0,
            "username": "Ni2Be",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "/*\n\n    Buffer A: Cell Automaton\n    Buffer B: Init + Draw\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*     Cell Automaton    */\n\nbool isSolid(vec4 cell)\n{\n    return cell != NONE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 tile = (1. / iResolution.xy);\n    vec4 cells[9]; \n    cells[0] = texture(iChannel0, uv + tile * offsets[0]);\n    cells[1] = texture(iChannel0, uv + tile * offsets[1]);\n    cells[2] = texture(iChannel0, uv + tile * offsets[2]);\n    cells[3] = texture(iChannel0, uv + tile * offsets[3]);\n    cells[4] = texture(iChannel0, uv + tile * offsets[4]);\n    cells[5] = texture(iChannel0, uv + tile * offsets[5]);\n    cells[6] = texture(iChannel0, uv + tile * offsets[6]);\n    cells[7] = texture(iChannel0, uv + tile * offsets[7]);\n    cells[8] = texture(iChannel0, uv + tile * offsets[8]);\n    \n    /*  \n    Cell indices:\n    6 7 8\n    3 4 5    \n    0 1 2\n    \n    N := None\n    S := Solid\n    o := undefined\n    \n    special cases:\n    \n     1.  2.  3.  4.  5.\n     ooo Soo ooo ooS ooo\n     oSo SNo SSo oNS oSS\n     SSS Soo SNo ooS oNS\n    \n     1. solid stays solid if it stands on 3 solid\n     2. NONE with solid on top-left that can't get another place will turn solid\n     3. case above, from viewpoint of cell 7 if it is solid (it will \"wait\")\n     4. NONE with solid on top-right that can't get another place will turn solid\n     5. case above from viewpoint of cell 7 if it is solid (it will \"wait\")\n     \n    */\n    \n    bool currentCellIsSolid = cells[4] != NONE;\n    \n    // ground stays ground and does not fall\n    if(cells[4] == GROUND || cells[7] == GROUND)\n        fragColor = cells[4];\n    // 1. solid stays solid if it stands on 3 solid\n    else if(currentCellIsSolid && isSolid(cells[0]) && isSolid(cells[1]) && isSolid(cells[2]))\n        fragColor = cells[4];\n    // 2. NONE with solid on top-left that can't get another place will turn solid\n    else if(!currentCellIsSolid && !isSolid(cells[7]) && isSolid(cells[0]) && isSolid(cells[3]) && isSolid(cells[6]))\n        fragColor = cells[6];\n    // 3. case above, from viewpoint of cell 7 if it is solid (it will \"wait\")\n    else if(currentCellIsSolid && !isSolid(cells[1]) && isSolid(cells[3]) && isSolid(cells[0]))\n        fragColor = cells[4];\n    // 4. NONE with solid on top-right that can't get another place will turn solid\n    else if(!currentCellIsSolid && !isSolid(cells[7]) && isSolid(cells[2]) && isSolid(cells[5]) && isSolid(cells[8]))\n        fragColor = cells[8];\n    // 5. case above from viewpoint of cell 7 if it is solid (it will \"wait\")\n    else if(currentCellIsSolid && !isSolid(cells[1]) && isSolid(cells[5]) && isSolid(cells[2]))\n        fragColor = cells[4];\n    // all other solid turn NONE\n    else if(currentCellIsSolid)\n        fragColor = NONE;\n    // all NONE may become solid or stay NONE\n    else\n        fragColor = cells[7];\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*      Initialize  +  Draw       */\n#define ANIMATE\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Init (restart on fullscreen)\n    if(texture(iChannel0, vec2(1. - 1. / iResolution.x, 1. / iResolution.y)) != GROUND)\n    {\n        if(fragCoord.y < 5. || fragCoord.y > iResolution.y - 5.)\n            fragColor = GROUND;\n        else\n            fragColor = NONE;\n        return;\n    }\n    \n#ifdef ANIMATE\n    float width = (iResolution.y / 40.) * rand(vec2(cos(iTime),sin(iTime)));\n    if (distance(vec2(iResolution.x / 2. + sin(iTime) * iResolution.x * 0.02,iResolution.y * .95), fragCoord.xy) < width)\n    {\n        if(texture(iChannel0, uv) == NONE)\n            fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.);\n        else\n            fragColor = texture(iChannel0, uv);\n        return;\n    }\n    if (distance(vec2(iResolution.x / 4. + cos(iTime) * iResolution.x * 0.02,iResolution.y * .35), fragCoord.xy) < width)\n    {\n        if(texture(iChannel0, uv) == NONE)\n            fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.);\n        else\n            fragColor = texture(iChannel0, uv);\n        return;\n    }\n    if (distance(vec2(3.5 * iResolution.x / 4. + cos(iTime) * iResolution.x * 0.02,iResolution.y * .8), fragCoord.xy) < width)\n    {\n        if(texture(iChannel0, uv) == NONE)\n            fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.);\n        else\n            fragColor = texture(iChannel0, uv);\n        return;\n    }\n#endif\n    \n    \n    // Draw\n    if (iMouse.z > 0.5)\n    {\n        float width = 15.0;\n        if (distance(iMouse.xy, fragCoord.xy) < width)\n        {\n            fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), 1.);\n        \treturn;\n        }\n    }   \n\n    // Just output\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nCell indices:\n678\n345\n012\n*/\nvec2 offsets[] = vec2[](\n    vec2(-1., -1.),\n    vec2( 0., -1.),\n    vec2( 1., -1.),\n    vec2(-1.,  0.),\n    vec2( 0.,  0.),\n    vec2( 1.,  0.),\n    vec2(-1.,  1.),\n    vec2( 0.,  1.),\n    vec2( 1.,  1.)\n    );\n    \n// Not used at the moment but could be fun\nvec2 offsetsReverse[] = vec2[](\n    vec2( 1., 1.),\n    vec2( 0., 1.),\n    vec2(-1., 1.),\n    vec2( 1.,  0.),\n    vec2( 0.,  0.),\n    vec2(-1.,  0.),\n    vec2( 1., -1.),\n    vec2( 0., -1.),\n    vec2(-1., -1.)\n);\n  \nconst vec4 NONE = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec4 GROUND = vec4(1.0, 1.0, 1.0, 1.0);\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}