{
    "Shader": {
        "info": {
            "date": "1577491460",
            "description": "Messing around with noise",
            "flags": 0,
            "hasliked": 0,
            "id": "wtt3WB",
            "likes": 12,
            "name": "Rainy City",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "rain",
                "city"
            ],
            "usePreview": 0,
            "username": "ndxbxrme",
            "viewed": 1004
        },
        "renderpass": [
            {
                "code": "// Noise (from iq)\nfloat noise (in vec3 p) {\n\tvec3 f = fract (p);\n\tp = floor (p);\n\tf = f * f * (3.0 - 2.0 * f);\n\tf.xy += p.xy + p.z * vec2 (37.0, 17.0);\n\tf.xy = texture (iChannel0, (f.xy + 0.5) / 256.0, -256.0).yx;\n\treturn mix (f.x, f.y, f.z);\n}\n\n// FBM\nfloat fbm (in vec3 p) {\n\treturn noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0;\n}\n\nfloat city (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    float buildingHeight = n;\n    buildingHeight = (n1 > .3) ? buildingHeight + fract(uv * grid).x * n1 * .1 : buildingHeight;\n\treturn (uv.y < buildingHeight) ? 1. : 0.;\n}\n\nfloat cityLights (in vec2 uv, in float offset)\n{\n    vec2 grid = vec2(20., 1.);\n    uv.x += offset;\n    float n1 = fbm((vec2(ivec2(uv * grid)) + .5).xxx);\n    uv.x *= n1 * 6.;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n = fbm(id.xxx);\n    vec2 lightGrid = vec2(79. * (n + .5), 200. * n);\n    float n2 = fbm((vec2(ivec2(uv * lightGrid + floor(iTime * .2) * .1)) + .5).xyx);\n    vec2 lPos = fract(uv * lightGrid);\n    n2 = (lPos.y < .2 || lPos.y > .7) ? 0. : n2;\n    n2 = (lPos.x < .5 || lPos.y > .7) ? 0. : n2;\n    n2 = smoothstep(.2 + .1 * cos(iTime * .1), .6, n2);\n\treturn (uv.y < n - 0.01) ? n2 : 0.;\n}\n\nfloat rainLayer (in vec2 uv, in float offset, in float rotate, in vec2 grid, in float density)\n{\n\tuv = rotateZ(uv.xyx, rotate).xy;\n    uv.x += offset;\n    vec2 id = vec2(ivec2(uv * grid)) + .5;\n    float n1 = fbm(id.xxx);\n    uv.y += iTime * (n1 + .5) * density;\n    id = vec2(ivec2(uv * grid)) + .5;\n    vec2 mid = abs(fract(uv * grid));\n    mid.x *= 2.;\n    float n = fbm(id.xyx);\n\treturn mid.x * (1. - mid.y) * smoothstep(.3, .4, n) * smoothstep(0., .5, mid.x)*smoothstep(1., .5, mid.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float r1 = rainLayer(uv, 23., .4, vec2(76., 6.), 2.1);\n    r1 += rainLayer(uv, 38., .38, vec2(96., 6.), 2.);\n    r1 += rainLayer(uv, 38.4, .38, vec2(96., 6.), 2.3) * .5;\n    vec3 f = mix(vec3(0.2, 0.4, .6) * .5, vec3(.2, .3, .6) * .2, uv.y);\n    f -= city(uv, 3.) * .1 ;\n    f -= city(uv, 2.);\n    f = clamp(f, vec3(0.), vec3(1.));\n    f += r1;\n    f += cityLights(uv, 2.);\n    f -= city(uv * vec2(1., 2.5) + vec2(0., .0), 64.);\n    fragColor = vec4(f,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 rotateX(vec3 p, float t)\n{\n\tfloat s = sin(t);\n\tfloat c = cos(t);\n\tmat3 m = mat3(\n\t\t1.0, 0.0, 0.0, \n\t\t0.0, c, -s, \n\t\t0.0, s, c\n\t\t);\n\treturn p * m;\n}\n\nvec3 rotateY(vec3 p, float t)\n{\n\tfloat s = sin(t);\n\tfloat c = cos(t);\n\tmat3 m = mat3(\n\t\tc, 0.0, s, \n\t\t0.0, 1, 0.0, \n\t\t-s, 0.0, c\n\t\t);\n\treturn p * m;\n}\n\nvec3 rotateZ(vec3 p, float t)\n{\n\tfloat s = sin(t);\n\tfloat c = cos(t);\n\tmat3 m = mat3(\n\t\tc, -s, 0.0, \n\t\ts, c, 0.0, \n\t\t0.0, 0.0, 1.0\n\t\t);\n\treturn p * m;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}