{
    "Shader": {
        "info": {
            "date": "1715228458",
            "description": "just a fun accident with some very messy code.",
            "flags": 0,
            "hasliked": 0,
            "id": "MfVXDD",
            "likes": 1,
            "name": "Folded Rainbow",
            "published": 3,
            "tags": [
                "experiment"
            ],
            "usePreview": 0,
            "username": "UnchartedSystems",
            "viewed": 121
        },
        "renderpass": [
            {
                "code": "// Fork of \"Bermuda Timespan\" by UnchartedSystems. https://shadertoy.com/view/lcKXD1\n// 2024-05-08 21:05:08\n\nfloat trigFn(float base, float div, int fn) {\n    float y;\n    if (fn==1) {\n        y=sin(base/div);\n    } else if (fn==2) {\n        y=sin((base/div)+180.0);\n    } else {\n        y=1.0;\n    }\n    return y;\n}\n\nfloat trigMod(float x, float xMult, float xAdd) {\n       return x*xMult+xAdd;\n}\n\nfloat fractSplit(float x, float e, float m)\n{\n    return fract(pow(x*m, e));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{        \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float d = length(uv);\n    \n    // Just getting into the right starting position!\n    float iTime = iTime+8.2;\n    \n    float tOffset = 500.0;\n    \n    // !!!   This is where the magic happens   !!!\n    // Set the tMult numerator from 1.0 -> 0.0 to see the original shader\n    // Change uv.y -> uv.x in the tMult divisor to change the orientation.\n    // wtf is an interesting variable to play with.\n    // Alternatively, replace tMult with: (1.0/(d+-26.0))*11.1 for something neat\n    float wtf = 29.0; // Still wrapping my brain around this.\n    float tMult = (1.0/(uv.y+wtf))*11.1;\n        \n    // 18.0 + 18.2\n    float t = ((iTime+.0)*2.8+tOffset*tMult)+18.0;\n\n    // This multiplier essentially acts as a zoom.\n    float m = 1.82;\n    \n    \n    // Gently animate each color fold\n    float oc = 0.72;\n    float rm = oc*1.+(sin(iTime*0.8+0.00)*0.21);\n    float gm = oc*2.+(sin(iTime*0.8+120.)*0.21);\n    float bm = oc*3.+(sin(iTime*0.8+240.)*0.21);\n    \n    float r;\n    float g;\n    float b;\n    \n    float div = 4.0;\n    \n    r = fractSplit(d, trigMod(trigFn(t+rm, div,  1), 1.2, 1.28), m);\n    g = fractSplit(d, trigMod(trigFn(t+gm, div,  1), 1.2, 1.28), m);\n    b = fractSplit(d, trigMod(trigFn(t+bm, div,  1), 1.2, 1.28), m);\n        \n    // Cycles the inversion of colors!\n    r = abs((sin(iTime*0.3+0.0)*0.5+0.5)-r);\n    g = abs((sin(iTime*0.3+180.0)*0.5+0.5)-g);\n    b = abs((sin(iTime*0.3+90.0)*0.5+0.5)-b);\n    fragColor = vec4(r, g, b, 1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}