{
    "Shader": {
        "info": {
            "date": "1625842286",
            "description": "started on a particle system thing, got texture schlorping.",
            "flags": 32,
            "hasliked": 0,
            "id": "NtSGDm",
            "likes": 3,
            "name": "texture schlorping",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    \n    RGBA = texelFetch(iChannel0, ivec2(XY), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    if (iFrame < 2) {\n        RGBA = texelFetch(iChannel1, ivec2(XY), 0);\n        return;\n    }\n    \n    ivec2 IJ = ivec2(XY);\n    \n    vec2 UV = XY/iResolution.xy;\n    \n    vec4 tnoise = texelFetch(iChannel0, IJ % ivec2(iChannelResolution[0].xy), 0);\n    vec3 noiseHSV = rgb2hsv(tnoise.rgb);\n    \n    float theta = noiseHSV.x * PI * 2.0;\n    theta += iTime * 0.5;\n    vec2 offsetDir = rot2(theta) * vec2(1.0, 0.0);\n    vec2 offset = offsetDir * (1.0 - noiseHSV.x);\n   // offset *= 2.0;\n\n    vec4 prev   = textureLod(iChannel1, UV + offset / iResolution.xy, 0.0);\n    \n    float mixAmt = (iFrame - 2) % 800 == 0 ? 1.0 : 0.0;\n    \n    RGBA  = mix(prev, tnoise, mixAmt);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//------------------------------------------------------\n\nconst float PI = 3.14159265359;\n\n//------------------------------------------------------\n\n// https://gist.github.com/983/e170a24ae8eba2cd174f\nvec3 rgb2hsv(in vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//------------------------------------------------------\n\n\nmat2 rot2(in float radians) {\n    float c = cos(radians);\n    float s = sin(radians);\n    return mat2(c, s, -s, c);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 c;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    const int cases = 3;\n    switch((iFrame / (cases * 100)) % cases) {\n        case 0: {\n            float minRes = min(iResolution.x, iResolution.y);\n\n            vec2 p = (fragCoord - iResolution.xy / 2.0) / minRes * 2.0;\n\n            float h = atan(p.y, p.x) / PI / 2.0 + 0.5;\n            float v = length(p);\n            float s = sin(v * 20.0) * 0.2 + 0.8;\n\n            c = hsv2rgb(vec3(h, s, v));\n            break;\n        }\n        case 1: {\n            c = textureLod(iChannel0, uv, 0.0).rgb;\n            break;\n        }\n        case 2: {\n            c = textureLod(iChannel1, uv, 0.0).rgb;\n            break;\n        }\n    }\n    \n    fragColor = vec4(c, 1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    if (iFrame < 5 || length(iMouse.xy) < length(iResolution.xy * 0.1)) {\n        RGBA = vec4(0.0);\n        return;\n    }\n\n    ivec2 IJ = ivec2(XY);\n    \n    vec3 dry = texelFetch(iChannel0, IJ, 0).rgb;\n   \n    vec2  vMouse = iMouse.xy - XY;\n    float dMouse = length(vMouse);\n    float aMouse = atan(vMouse.y, vMouse.x) / PI / 2.0 + 0.5;\n    \n    float h = aMouse - iTime * 0.1;\n    \n    vec3 wet = hsv2rgb(vec3(h, 1.0, 1.0));\n    \n    const float rad = 50.0;\n    const float eps =  4.0;\n    wet = mix(dry, wet, smoothstep(rad + eps, rad - eps, dMouse));\n    \n    \n    RGBA = vec4(wet, 1.0);    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}