{
    "Shader": {
        "info": {
            "date": "1675982211",
            "description": "rgb go brrr",
            "flags": 0,
            "hasliked": 0,
            "id": "mtBSDh",
            "likes": 2,
            "name": "Voronoi RGB",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Horriblebarry12",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "#define Color\n#define Round\n#define RoundAmount 0.1\n#define Scale 10.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.y; // Scaled normalized pixel coordinates (from 0 to Scale)\n    vec2 uvN = fragCoord/iResolution.y; // Normalized pixel coordinates (from 0 to 1)\n    uv*=Scale;\n\n    \n    #ifdef Color\n    vec3 col = 0.5 + 0.5*cos((iTime/2.5)+uvN.xyx+vec3(0,2,4)); // the rgb color\n    #endif\n    #ifndef Color\n    vec3 col = vec3(1);\n    #endif\n    float noise = voronoi3d(vec3(uv.x,uv.y,iTime/7.6)).w; // the noise\n    \n    #ifdef Round\n    \n    if (noise <= RoundAmount)\n    {\n        noise = 1.0;\n    }\n    else\n    {\n        noise = 0.0;\n    }\n    \n    #endif\n    \n    fragColor = vec4(noise * col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nconst mat2 myt = mat2(.12121212, .13131313, -.13131313, .12121212);\nconst vec2 mys = vec2(1e4, 1e6);\n\nvec2 rhash(vec2 uv) {\n  uv *= myt;\n  uv *= mys;\n  return fract(fract(uv / mys) * uv);\n}\n\nvec3 hash(vec3 p) {\n  return fract(\n      sin(vec3(dot(p, vec3(1.0, 57.0, 113.0)), dot(p, vec3(57.0, 113.0, 1.0)),\n               dot(p, vec3(113.0, 1.0, 57.0)))) *\n      43758.5453);\n}\n\nvec4 voronoi3d(const in vec3 x) {\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n\n  float id = 0.0;\n  vec2 res = vec2(100.0);\n  for (int k = -1; k <= 1; k++) {\n    for (int j = -1; j <= 1; j++) {\n      for (int i = -1; i <= 1; i++) {\n        vec3 b = vec3(float(i), float(j), float(k));\n        vec3 r = vec3(b) - f + hash(p + b);\n        float d = dot(r, r);\n\n        float cond = max(sign(res.x - d), 0.0);\n        float nCond = 1.0 - cond;\n\n        float cond2 = nCond * max(sign(res.y - d), 0.0);\n        float nCond2 = 1.0 - cond2;\n\n        id = (dot(p + b, vec3(1.0, 57.0, 113.0)) * cond) + (id * nCond);\n        res = vec2(d, res.x) * cond + res * nCond;\n\n        res.y = cond2 * d + nCond2 * res.y;\n      }\n    }\n  }\n    \n  return vec4(sqrt(res), abs(id), sqrt(res).y-sqrt(res).x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}