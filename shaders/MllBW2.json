{
    "Shader": {
        "info": {
            "date": "1513443290",
            "description": "Learning to walk",
            "flags": 0,
            "hasliked": 0,
            "id": "MllBW2",
            "likes": 1,
            "name": "FractalTown",
            "published": 3,
            "tags": [
                "raytracing",
                "fractal",
                "sin",
                "pavoreal"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 556
        },
        "renderpass": [
            {
                "code": "float hash( float i )\n\n{\n\n\treturn fract(sin(i) * 454665.4564);\n    \n}\n\nvec3 mapper( vec3 p )\n{\n    int maxiter = 10;\n    \n    int i = 0;\n\n   \tfloat horizon = .8;\n    \n\tif(p.x * p.x + p.y * p.y + p.z * p.z > horizon)\n    \n    {\n        for( i ; i < maxiter; ++i )\n        \n        {\n            \n            p.x = sin(p.x) * sin(p.y);\n            \n            p.y = sin(p.x) * cos(p.y);\n            \n            p.z = atan(p.x, p.y);\n            \n            if(p.x * p.x + p.y * p.y * p.z + p.z > 0.1)\n            \n            {\n        \n       \t    \treturn p;\n           \n            }\n        }\n    }\n    \n    else if(p.y < horizon)\n    \n    {\n        for( i; i < maxiter; ++i )\n        \n        {\n            \n        return p;\n        \n        }\n            \n    }\n}\n\nvec3 rayIntersect( vec3 ro, vec3 rd )\n{\n\n    vec3 t;\n    \n    int maxiter = 128;\n    \n    for(int i = 0; i < maxiter; ++i )\n    {\n    \n        vec3 hit = ro + rd * t;\n        \n    \tvec3 d = mapper( hit );\n        t += d * 10.0;\n        \n    }     \n\n    return t;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 mouser = iMouse.xy / iResolution.xy;\n    if( mouser.x == 0.0 ) mouser = vec2( 2.5, 2.5 );\n    vec3 ro = ( normalize( vec3( uv, sin( iTime * 0.2 ) ) ) );\n    vec3 rd = vec3( clamp( -mouser.x, -10.0, 10.0 ), clamp( -mouser.y, -10.0, 10.0 ), 1.0 );\n    vec3 fs = rayIntersect(ro, rd);\n    vec3 fogger = 1.0 / ( 1.0 + fs * fs * fs * 0.1 );\n    //vec3 colourer = vec3( 0.2, 0.1, 0.2 ) * fogger;\n    //vec3 colourerOne = vec3( 0.1, 0.1, 0.4 ) * fogger;\n\tvec3 fshader;\n   // fshader *= mix( colourer, colourerOne, uv.x );\n    if( fs.x > 1.0 )\n    \n    {\n        fshader *= sqrt(fshader);\n        fshader *= 1.85;\n        \n        if( fs.x > 0.1 ){\n            \n            for(float i = 0.0; i < 1.0; ++i){\n        \n        \t\tvec3 colourer = vec3( sin(iTime * 0.2), hash(i), 0.8 );\n        \n       \t\t\tfshader = mix(fogger, colourer, fogger.y);\n            }\n        }\n    \n    }\n    \n    else if( fs.x < 1.0 )\n    \n    {\n        \n        vec3 colourOne = vec3( 0.2, 0.2, 0.5 );\n            \n        vec3 colourTwo = vec3( 0.5, 0.81, sin(iTime * 0.2) );\n    \n    \tfshader = mix( colourOne, colourTwo, uv.y );\n        \n    }\n        \n\tfragColor = vec4( fshader, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}