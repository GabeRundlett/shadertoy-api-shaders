{
    "Shader": {
        "info": {
            "date": "1607901253",
            "description": "Effect of ~30 min Shader Livecoding session at https://warszawskiedniinformatyki.pl/, Thanks for stopping by and watching pixels bouncing to music",
            "flags": 64,
            "hasliked": 0,
            "id": "tdVfDG",
            "likes": 4,
            "name": "WDI 2020 Livecoding",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "music",
                "reflections",
                "livecoding",
                "klos"
            ],
            "usePreview": 0,
            "username": "spolsh",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "// #version 410 core\n\n#define f float \n#define v2 vec2\n#define v3 vec3\n\n// #define R v2Resolution\n// #define T fGlobalTime\n#define F gl_FragCoord\n#define R iResolution\n#define T iTime\n\n#define C(v) clamp(v, 0., 1.)\n#define N normalize\n#define H(v) fract(sin(100.0*v) * 43758.5453)\n\n// #define BI(v) (texture(texFFTIntegrated, v).x)\n// #define BS(v) (texture(texFFTSmoothed, v).x)\n// #define B(v) (texture(texFFT, v).x)\n// fake beat accumulation, next time I will save it in buffer\n#define BI(v) (0.05*T+0.02*texture(iChannel0, v2(v, 0.5)).x)\n#define BS(v) (0.01*texture(iChannel0, v2(v, 0.5)).x)\n#define B(v)  (0.01*texture(iChannel0, v2(v, 0.5)).x)\n\nuniform float fGlobalTime; // in seconds\nuniform vec2 v2Resolution; // viewport resolution (in pixels)\n\nf gB = 10e8;\n\nv3 colR = v3(1., 0, 0);\nv3 colA = v3(0.2, 0.5, 1.4);\nv3 colY = v3(1.0, 1.0, 0.0);\n\nmat2 rot(f a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nf plas( vec2 v, float time )\n{\n\tfloat c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  vec4 p = vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n\treturn dot(p, p);\n}\n\nf box(v3 p, v3 b) {\n  v3 q = abs(p) - b;\n  f r = length( max(q, v3(0.))) + min( max(max(q.x, q.y), q.z), 0.);\n  return r;\n}\n\nv3 cp;\n\nf map(v3 p) {\n    \n  v3 p0 = p;\n  p0.x = abs(p0.x);\n  p0.x -= 4.0;\n  f s = -p0.x + 0.05*plas(p.zy * 0.2 + 0.1*T, -1.+sin(T));\n  \n  p -= cp;\n  p -= v3(0, 0, 14);\n  s = min(s, length(p) -0.1 -200.0*BS(0.0));\n  \n  p0 -= v3(0, -1, 14.);\n  p0.yz = mod(p0.yz + 4.0, 8.0) - 4.0;  \n  s = min(s, box(p0, v3(100.0, 0.4, 1.0)));\n  \n  f sbl = box(p0, v3(0.01, 100.0, 0.01) - 0.01);\n  gB = min(gB, sbl);\n  s = min(s, sbl); \n  \n  for (f i = 0.; i < 3.; ++i) {\n    p -= v3(0.1, 0.2 + abs(sin(BS(0.0))), 0.5);\n    p.xy *= rot(  10.0*BI(0.0) ); \n    p.yz *= rot( -20.0*BI(0.2) ); \n    p = abs(p);\n  }\n  \n  f sl = box(p, v3(100.0, 0.01, 0.01));\n  gB = min(gB, sl);\n  s = min(s, sl);\n  \n  f bb = 0.1 +200.0*BS(0.0);\n  s = min(s, \n        mix(length(p) -bb,\n           box(p, v3(bb)),\n           abs(sin(T))\n      ));\n    \n  return s;\n}\n\nvoid mainImage( out vec4 out_color, in vec2 fragCoord )\n{\n    v2 q = (2. * F.xy - R.xy) / R.y;\n  \n  v3 c = v3(0);\n  out_color = vec4(c, 1);\n  if (abs(q.y) > 0.75) return;\n  // v3 c = v3(q, 0);\n  \n  f pph = H(F.x + H(F.y + H(T)));\n  \n  v3 ro = v3( 2.0*sin(20.0*BI(0.0)), 2. + 10.0*B(0.0), 20.0*B(0.0));\n  ro.y += sin(20.0*BI(0.0));\n  ro.z += 15.0*T;\n  cp = ro;\n  v3 rd = N(v3(q, 2.));\n  rd.xy *= rot (1.0 * sin(5.0*BI(0.0)) );\n  \n  f tt = 10e8;\n  for (f bi = 0.; bi < 3.; ++bi) {\n    f t = 0.1;\n    for (f i = 0.; i < 64.; ++i) {\n      f d = map(ro + rd * t);\n      if ( t < 0.0001 || t > 40.) break;\n      t += d;\n    }    \n    tt = bi == 0. ? t : tt;\n    if (t > 0.2 && t < 40.) {\n      v3 p = ro + rd * t;\n      // c = fract(p);\n      v2 e = 0.01 * v2(-1, 1);\n      v3 n = N( e.xxx * map(p + e.xxx)\n              + e.yxx * map(p + e.yxx)\n              + e.xyx * map(p + e.xyx)\n              + e.xxy * map(p + e.xxy));\n      f str = smoothstep(0.5, 0.51, fract(p.y));      \n      f str1 = smoothstep(0.5, 0.51, fract(0.13*p.y));      \n      f str0 = smoothstep(0.5, 0.51, texture(iChannel1, 0.1*floor(10.*p.xy)).x);\n      f str2 = smoothstep(0.98, 0.981, fract(0.01*p.z + 0.1*T));      \n      // c = n;      \n      c += 0.2*colR*(str+str1);\n      c += colA*str2;\n      \n      rd = N(reflect(rd, n) + 0.01 * pph);\n      ro = p;\n    }\n  }    \n  // c  = v3(1. - t / 32.);  \n  \n\n  \n  c = mix(c, 0.1*colR, 1.0 - exp(-0.005 * tt*tt));\n  c = mix(c, 0.1*colR, 1.0 - exp(-0.0001 * tt*tt*tt));\n  \n  tt += pph;\n  \n  f sb = 0.2 + 20.0*BS(0.0);\n  c += sb * colY * exp(gB * -20.0);\n  c += sb * colY * exp(gB * -10.0);\n  c += sb * colY * exp(gB *  -1.0);\n  c += colA * 20.0*B(0.0);\n\t    \n  c = c / (1. + c);\n  c = smoothstep(-0.01, 0.9, c);\n  c = pow(c, v3(0.4545));\n  out_color = vec4(c, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 24904,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/inzynier/transformator-contest-dj-set"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}