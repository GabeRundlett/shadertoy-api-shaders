{
    "Shader": {
        "info": {
            "date": "1591489334",
            "description": "third attempt! this one doesn't look as nice as a background, but still really neat\nmaking these is really fun actually",
            "flags": 0,
            "hasliked": 0,
            "id": "wlsczH",
            "likes": 6,
            "name": "earthbound bg 2",
            "published": 3,
            "tags": [
                "2d",
                "abstract",
                "snes",
                "earthbound"
            ],
            "usePreview": 0,
            "username": "thefox231",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "const float thickness = 0.02;\nconst vec3 mainColor = vec3(136./255., .6, .2);\n\nbool equals(float a, float b) {\n    return abs(a - b) < thickness;\n}\n\nfloat sum(vec2 a) {\n    return a.x + a.y;\n}\nfloat sum(vec3 a) {\n    return a.x + a.y + a.z;\n}\n\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(.0);\n    \n    // fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // pixelate\n    float pxAmt = 50.0;\n    \n    uv.x = floor(uv.x * pxAmt) / pxAmt;\n    uv.y = floor(uv.y * pxAmt) / pxAmt;\n    \n    vec2 uvOrig = uv;\n    \n    // unfix aspect ratio\n    uvOrig.x /= iResolution.x / iResolution.y;\n    \n    // interlacing .\n    float pixAmt = 2.;\n    if (mod(fragCoord.y, pixAmt) < pixAmt * 0.5) {\n        uv += 0.1 + tan(iTime * 0.2 + uv.y * 8.) * 0.05;\n    } else {\n        uv -= 0.1 + tan(iTime * 0.2 + uv.y * 8. + .5) * 0.05;\n    }\n    \n    // move ing...\n    uv.x += sin(iTime * 1.6) * 0.3;\n    uv.y += cos(iTime * .2) * 2.5;\n    \n    // rotate......\n    uv.xy *= rotate2d(iTime * 0.15);\n    \n    // bg waves\n    if (equals(sin(uvOrig.x * 90. + iTime) * 0.1 + 0.2, mod(uvOrig.y + sin(iTime * 0.4) * 0.2 + sin(uv.x) * 0.3, 0.3146))) {\n        color += mainColor * 0.2;\n    }\n    if (equals(sin(uvOrig.y * 50. + iTime) * 0.1 + 0.2, mod(uvOrig.x + sin(iTime * 0.7) * 0.2 + sin(uv.y) * 0.3, 0.3146))) {\n        color += mainColor * 0.2;\n    }\n    \n    // rotating squares\n    // repeat them\n    float repeatNum = 4.3;\n   \tuv = mod(uv, 1. / repeatNum) * repeatNum;\n    \n    // get a \"seed\" based on which one it is\n    vec2 seed = floor(uv);\n    \n    float brightness = 1.0;\n    \n    vec3 squareColor = vec3(.0);\n    vec2 squarePos = vec2(.5, .5);\n    squareColor = mainColor * brightness * sum(abs(uv - squarePos));\n    if (sum(abs(uv - squarePos)) < .6) {\n        squareColor -= 0.2;\n    }\n    \n    // glowy......\n    squareColor += sin(iTime) * 0.1;\n    \n    if (sum(squareColor) > .1) {\n    \tcolor = squareColor;\n    }\n    \n    // also add some circles, for good measure\n    uv = uvOrig;\n    \n    // move ing...\n    uv.x += sin(iTime * .6) * 0.7;\n    uv.y += cos(iTime * .9) * 1.5;\n    \n    // rotate......\n    uv.xy *= rotate2d(iTime * 0.18);\n    \n    // fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // interlacing .\n    if (mod(fragCoord.y, pixAmt) < pixAmt * 0.5) {\n        uv += 0.2 + sin(iTime * 0.2 + uv.y * 8.) * 0.05;\n    } else {\n        uv -= 0.2 + cos(iTime * 0.5 + uv.y * 8. + .5) * 0.05;\n    }\n    \n    repeatNum = 1.3;\n   \tuv = mod(uv, 1. / repeatNum) * repeatNum;\n    \n    vec2 circlePosition = vec2(.5, .5);\n    color += mainColor * 1.0 - length(circlePosition - uv);\n    \n    // color shortening\n    // gives it a kind of like snes-like palette\n    float shortAmt = 14.0;\n    color = ceil(color * shortAmt) / shortAmt;\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}