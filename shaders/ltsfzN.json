{
    "Shader": {
        "info": {
            "date": "1511629139",
            "description": "Truncated Icosahedron, aka soccer polyhedron or buckyball",
            "flags": 0,
            "hasliked": 0,
            "id": "ltsfzN",
            "likes": 28,
            "name": "Truncated Icosahedron",
            "published": 3,
            "tags": [
                "3d",
                "geometry",
                "buckyball"
            ],
            "usePreview": 0,
            "username": "marian42",
            "viewed": 948
        },
        "renderpass": [
            {
                "code": "const float focalLength = 4.0;\nconst float cameraDistance = 5.0;\nconst vec3 lightDir = vec3(-0.7, 0.7, -0.14);\n\nvec3 getNormal(int i) {\n\tint block = i / 4;\n    vec3 signs = sign(vec3(i & ivec3(4, 2, 1)) - 0.1);\n    \n    if (block > 5) {\n        return 0.5774 * signs;\n    }\n    \n    vec3 r = signs * (block < 3 ? vec3(0.0, 0.5257, 0.8507) : vec3(0.0, 0.9342, 0.3568));\n    return vec3(r[block % 3], r[(block + 2) % 3], r[(block + 1) % 3]);    \n}\n\nmat2 getRotationMatrix(float angle) {\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\treturn mat2(c, -s, s, c);\n}\n\nfloat fragment(vec3 L, vec3 N, vec3 V) {\n\tfloat ambient = 0.1;\n\tfloat diffuse = 0.5 + 0.5 * dot(L, N);\n\tvec3 R = reflect(-L, N);\n\tfloat specular = pow(max(0.0, dot(R, V)), 2.0);\n\treturn ambient + 0.8 * diffuse + 0.3 * specular;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec3 viewDir = normalize(vec3(uv.xy, focalLength));\n\tmat2 rotation = getRotationMatrix(iTime);\n\t\n\tfloat z_back = 1e8;\n\tfloat z_front = 0.0;\n\tvec3 result_normal;\n    \n\tfor (int i = 0; i < 32; i++) {\n\t\tvec3 normal = getNormal(i);\n        normal.xz = rotation * normal.xz;\n\t\tfloat dist = i < 12 ? 1.0 : 0.975;\n\t\t\n\t\tfloat viewDirDotNormal = dot(viewDir, normal);\n\t\tfloat z = (dist + normal.z * cameraDistance) / viewDirDotNormal;\n\t\tbool front = viewDirDotNormal < 0.0;\n\t\tif (front && z > z_front) {\n\t\t\tresult_normal = normal;\n\t\t\tz_front = z;\n\t\t}\n\t\tif (!front && z < z_back) {\n\t\t\tz_back = z;\n\t\t}\n\t}\n    \n\tfragColor = vec4(z_front > z_back ? 0.0 : fragment(lightDir, result_normal, -viewDir));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}