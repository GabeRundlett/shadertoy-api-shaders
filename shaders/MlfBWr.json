{
    "Shader": {
        "info": {
            "date": "1511607796",
            "description": "Rain drops, variation of https://www.shadertoy.com/view/ldSBWW without using a noise texture.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlfBWr",
            "likes": 55,
            "name": "Rain drops on screen - notexture",
            "published": 3,
            "tags": [
                "filter",
                "rain",
                "notexture"
            ],
            "usePreview": 1,
            "username": "eliemichel",
            "viewed": 3939
        },
        "renderpass": [
            {
                "code": "// Author: Ã‰lie Michel\n// License: CC BY 3.0\n// July 2017\n\nvec2 rand(vec2 c){\n    mat2 m = mat2(12.9898,.16180,78.233,.31415);\n\treturn fract(sin(m * c) * vec2(43758.5453, 14142.1));\n}\n\nvec2 noise(vec2 p){\n\tvec2 co = floor(p);\n\tvec2 mu = fract(p);\n\tmu = 3.*mu*mu-2.*mu*mu*mu;\n\tvec2 a = rand((co+vec2(0.,0.)));\n\tvec2 b = rand((co+vec2(1.,0.)));\n\tvec2 c = rand((co+vec2(0.,1.)));\n\tvec2 d = rand((co+vec2(1.,1.)));\n\treturn mix(mix(a, b, mu.x), mix(c, d, mu.x), mu.y);\n}\n\nvoid mainImage( out vec4 f, in vec2 c )\n{\n\tvec2 u = c / iResolution.xy,\n         v = (c*.1)/ iResolution.xy,\n         n = noise(v*200.); // Displacement\n    \n    f = textureLod(iChannel0, u, 2.5);\n    \n    // Loop through the different inverse sizes of drops\n    for (float r = 4. ; r > 0. ; r--) {\n        vec2 x = iResolution.xy * r * .015,  // Number of potential drops (in a grid)\n             p = 6.28 * u * x + (n - .5) * 2.,\n             s = sin(p);\n        \n        // Current drop properties. Coordinates are rounded to ensure a\n        // consistent value among the fragment of a given drop.\n        //vec4 d = texture(iChannel1, round(u * x - 0.25) / x);\n        vec2 v = round(u * x - 0.25) / x;\n        vec4 d = vec4(noise(v*200.), noise(v));\n        \n        // Drop shape and fading\n        float t = (s.x+s.y) * max(0., 1. - fract(iTime * (d.b + .1) + d.g) * 2.);;\n        \n        // d.r -> only x% of drops are kept on, with x depending on the size of drops\n        if (d.r < (5.-r)*.08 && t > .5) {\n            // Drop normal\n            vec3 v = normalize(-vec3(cos(p), mix(.2, 2., t-.5)));\n            // fragColor = vec4(v * 0.5 + 0.5, 1.0);  // show normals\n            \n            // Poor man's refraction (no visual need to do more)\n            f = texture(iChannel0, u - v.xy * .3);\n        }\n    }\n    \n    // Debug noise function\n    //f = vec4(n, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}