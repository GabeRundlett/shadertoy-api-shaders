{
    "Shader": {
        "info": {
            "date": "1722850758",
            "description": "CC0: Truchet pattern + golden ratio\n Thought @byt3_m3chanic could be interested so sharing\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2czt",
            "likes": 29,
            "name": "Truchet pattern + golden ratio",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "// CC0: Truchet pattern + golden ratio\n//  Thought @byt3_m3chanic could be interested so sharing\n\n#define VARIANT\n//#define DISTORT\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float\n  pi    = acos(-1.)\n, tau   = pi*2.\n, phi   = (1.+sqrt(5.))*0.5\n, phi2  = phi*phi\n, phi3  = phi*phi2\n, phi4  = phi2*phi2\n, iphi  = 1./phi\n, iphi2 = 1./phi2\n, iphi3 = 1./phi3\n, iphi4 = 1./phi4\n;\n\n\nfloat geometric(float a, float r) {\n  return a/(1.-r);\n}\n\nfloat igeometric(float a, float r, float x) {\n  return log2(1.-x*(1.-r)/a)/log2(r);\n}\n\nvec2 geometric2(float a, float r, float n) {\n  float rn = pow(r, n);\n  float rn1 = rn*r;\n  return (a/(1.-r))*(1.-vec2(rn, rn1));\n}\n\nfloat badSquare(vec2 p, float b) {\n  vec2 d = abs(p)-b;\n  return max(d.x,d.y);\n}\n\nvec4 boxySpiralCoord(vec2 p, float z, out float side) {\n  float px = p.x;\n  float ax = abs(px);\n  float sx = sign(px);\n  float a = px > 0. ? phi2 : 1.;\n  a *= z;\n  float gdx     = geometric(a, iphi4);\n  ax            -= gdx;\n  float x       = igeometric(a, iphi4, -ax);\n  float nx      = floor(x);\n  vec2  lx      = geometric2(a, iphi4, nx)-gdx;\n  float minx    = lx.x;\n  float maxx    = lx.y;\n  float radiusx = (maxx-minx)*0.5;\n  float meanx   = minx+radiusx;\n\n  p -= vec2(-1.,1./3.)*meanx*sx;\n  side = sx;\n  return vec4(p, radiusx, 2.*nx+(sx>0.?0.:1.));\n}\n\nvec2 toSmith(vec2 p)  {\n  // z = (p + 1)/(-p + 1)\n  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)\n  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;\n  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\nvec2 fromSmith(vec2 p)  {\n  // z = (p - 1)/(p + 1)\n  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)\n  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;\n  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;\n  float y = 2.0*p.y;\n  return vec2(x,y)/d;\n}\n\n\nvec2 transform(vec2 p) {\n#ifdef DISTORT\n  vec2 sp0 = toSmith(p-0.);\n  vec2 sp1 = toSmith(p+vec2(1.0)*ROT(0.12*TIME));\n  vec2 sp2 = toSmith(p-vec2(1.0)*ROT(0.23*TIME));\n  p = fromSmith(sp0+sp1-sp2);\n  p *= ROT(-TIME*0.125);\n#endif\n\n  return p;\n}\n\nvec3 effect(vec3 col, vec2 p) {\n  const float aas = 1.;\n  vec2 np = p + aas/RESOLUTION.y;\n  vec2 tp = transform(p);\n  vec2 ntp = transform(np);\n  float aa = sqrt(2.0)/aas*distance(tp, ntp);\n  p = tp;\n\n\n  float anim = TIME*0.125;\n\n  float pft = fract(anim);\n  float nft = floor(anim);\n  float piz = exp2(log2(phi4)*pft);\n  float sx;\n  float sy;\n  vec4 gcx = boxySpiralCoord(p, piz,sx);\n  vec4 gcy = boxySpiralCoord(vec2(p.y,-p.x), phi*piz,sy);\n\n  float dbx = badSquare(gcx.xy, gcx.z);\n  float dby = badSquare(gcy.xy, gcy.z);\n\n  float nx = 1.+2.*gcx.w+4.*nft;\n  float ny = 2.*gcy.w+4.*nft;\n\n  float db;\n  vec4 gc;\n  float n;\n  float s;\n  if (dbx < dby) {\n    db = dbx;\n    gc = gcx;\n    n = nx;\n    s = sx;\n  } else {\n    db = dby;\n    gc = gcy;\n    n = ny;\n    s = sy;\n  }\n\n  if (s == -1.) {\n    gc.xy = -gc.xy;\n  }\n\n  float l0 = length(gc.xy-gc.z*vec2(-1.,-1.+2.*(iphi+iphi4)));\n  float l1 = length(gc.xy-gc.z);\n  float l2 = length(gc.xy+gc.z);\n  float l3 = length(gc.xy-gc.z*vec2(1.,-1.));\n  float l4 = length(gc.xy+gc.z*vec2(1.,-1.));\n  float l5 = length(gc.xy-gc.z*vec2(-1.,-1.+2.*iphi));\n\n  float f = gc.z*iphi*0.7;\n  float ds0 = l0 - iphi3*f;\n  float ds1 = l1 - f*phi;\n  float ds2 = l2 - f;\n  float ds3 = l3 - f*phi3;\n  float ds4 = l4 - f;\n  float ds5 = l5 - f*iphi;\n\n  float dbkg, dfgd;\n\n#ifdef VARIANT\n  float w = 0.025*gc.z;\n\n\n  dbkg = abs(ds1)-w*phi3;\n  dbkg = min(dbkg, abs(ds2)-w*phi2);\n  dbkg = min(dbkg, abs(ds4)-w);\n  dbkg = min(dbkg, abs(ds5)-w*iphi);\n\n  float sw = w;\n  dfgd = abs(ds0)-w*iphi;\n  float dfgd_ = abs(ds3)-w*phi3;\n  if (dfgd_ < dfgd) {\n    dfgd = dfgd_;\n  } else {\n    sw *= iphi3;\n  }\n\n  const vec3 ocol = vec3(0.);\n  vec3 bcol = vec3(sqrt(0.5));\n  const vec3 fcol = vec3(sqrt(0.5));\n\n  bcol *= 1.-exp(-max(dfgd/sw,0.));\n\n  col = mix(col, bcol, smoothstep(aa, -aa, dbkg));\n  col = mix(col, fcol, smoothstep(aa, -aa, dfgd));\n#else\n  float w = 0.05*length(p);\n  dbkg = abs(ds1);\n  dbkg = min(dbkg, abs(ds2));\n  dbkg = min(dbkg, abs(ds4));\n  dbkg = min(dbkg, abs(ds5));\n\n  dfgd = abs(ds0);\n  dfgd = min(dfgd, abs(ds3));\n\n  dbkg -= w;\n  dfgd -= w;\n\n  const vec3 ocol = vec3(0.);\n  vec3 bcol = vec3(0.5-0.4*dbkg/w);\n  vec3 fcol = vec3(0.5-0.4*dfgd/w);\n\n  bcol *= 1.-exp(-1.5*max(dfgd/w-0.25,0.));\n\n  col = mix(col, ocol, smoothstep(aa, -aa, (dbkg-0.25*w)));\n  col = mix(col, bcol, smoothstep(aa, -aa, dbkg));\n\n\n  col = mix(col, ocol, smoothstep(aa, -aa, (dfgd-0.25*w)));\n  col = mix(col, fcol, smoothstep(aa, -aa, dfgd));\n#endif\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  p += 1E-3;\n\n  vec2 fc = fragCoord;\n  vec3 col = vec3(mod(fc.y,4.) < 2. ? 0.05: 0.0);\n  col = effect(col, p);\n\n  col = sqrt(col);\n\n  fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}