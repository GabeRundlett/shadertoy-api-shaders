{
    "Shader": {
        "info": {
            "date": "1563057279",
            "description": "Simplifying the number shader provided in https://www.shadertoy.com/view/MlfXz8, so that it is more readable/understandable. (Character compression is something I do not care for).",
            "flags": 0,
            "hasliked": 0,
            "id": "wtsSWN",
            "likes": 3,
            "name": "Simplifying Number Shader",
            "published": 3,
            "tags": [
                "number"
            ],
            "usePreview": 0,
            "username": "bzm3r",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "float opS(float d2, float d1)\n{ \n\treturn max(-d1, d2); \n}\n\nfloat sdr(vec2 uv, vec2 tl, vec2 br)\n{\n    vec2 d = max(tl - uv, uv - br);\n    return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n}\n\nvoid mainImage(out vec4 out_color, vec2 position)\n{\n    float d = 1e9;\n    float t = 12345.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 resolution = iResolution;\n    position = position/resolution.xy;\n\n    position.x = position.x * resolution.x/resolution.y;\n    position.y = 1.0 - position.y;\n    \n    out_color = vec4(0.0, 0.0, 0.0, 0.0);\n    vec2 digitSize = vec2(0.2, 0.3);\n    vec4 color = vec4(1, 1, 1, 1);\n\n    for(float z = 0.; z < 5.0; ++z)\n    {\n        float v = floor(mod(t, 10.0));\n        vec4 rect1 = vec4(0.0, 0.0, 0.0, 0.0);\n        vec4 rect2 = vec4(0.0, 0.0, 0.0, 0.0);\n        \n        if (v == 1.){\n            rect1 = vec4(0, 0, 1, 5); \n        \trect2 = vec4(2, 0, 1, 5);\n        }\n            \n        if (v == 2.) {\n\t\t\trect1 = vec4(0, 1, 2, 1); \n        \trect2 = vec4(1, 3, 2, 1);\n\t\t}\n        if (v == 3.) {\n\t\t\trect1 = vec4(0, 1, 2, 1); \n        \trect2 = vec4(0, 3, 2, 1);\n\t\t}\n        if (v == 4.) {\n\t\t\trect1 = vec4(1, 0, 1, 2); \n        \trect2 = vec4(0, 3, 2, 2);\n\t\t}\n            \n        if (v == 5.) {\n\t\t\trect1 = vec4(1, 1, 2, 1); \n        \trect2 = vec4(0, 3, 2, 1);\n\t\t}\n        if (v == 6.) {\n\t\t\trect1 = vec4(1, 1, 2, 1);\n        \trect2 = vec4(1, 3, 1, 1);\n\t\t}\n            \n        if (v == 7.) {\n\t\t\trect1 = vec4(0, 1, 2, 4);\n        \trect2 = vec4(0, 0, 0, 0);\n\t\t}\n            \n        if (v == 8.) {\n\t\t\trect1 = vec4(1, 1, 1, 1);\n        \trect2 = vec4(1, 3, 1, 1);\n\t\t}\n            \n        if (v == 9.) {\n\t\t\trect1 = vec4(1, 1, 1, 1); \n        \trect2 = vec4(0, 3, 2, 2);\n\t\t}\n            \n        if (v == 0.) {\n\t\t\trect1 = vec4(1, 1, 1, 3);\n\t\t\trect2 = vec4(0, 0, 0, 0);\n\t\t}\n\n        vec2 origin = vec2((digitSize.x + 0.05) * (5.0 - z), 0);\n        origin.y += 0.3;// offset on screen.\n        \n        rect1 *= vec4(digitSize, digitSize)/vec4(3,5,3,5);\n        rect2 *= vec4(digitSize, digitSize)/vec4(3,5,3,5);\n\n        rect1.zw += rect1.xy;\n        rect2.zw += rect2.xy;\n        rect1 += vec4(origin, origin);\n        rect2 += vec4(origin, origin);\n        \n        d = min(d, sdr(position, origin, origin + digitSize));\n        d = opS(d, sdr(position, rect1.xy,rect1.zw));\n        d = opS(d, sdr(position, rect2.xy,rect2.zw));\n\n        t = t/10.0;\n    }\n    \n\tout_color = mix(color, out_color, step(0.0, d));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}