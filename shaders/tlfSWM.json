{
    "Shader": {
        "info": {
            "date": "1563148362",
            "description": "Quick impression for planetary rings, based on simplex noise.\n\nNot happy with performance: the noise, and especially octavenoise are very slow. Not sure why.",
            "flags": 0,
            "hasliked": 0,
            "id": "tlfSWM",
            "likes": 1,
            "name": "Noisy planetary rings.",
            "published": 3,
            "tags": [
                "noise",
                "rings",
                "planet"
            ],
            "usePreview": 0,
            "username": "bram",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "\n\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v)\n{\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nfloat fouroctavenoise( vec2 uv )\n{\n    float v0 = 1.000 * snoise(uv*1.0);\n \tfloat v1 = 0.500 * snoise(uv*2.0);\n  \tfloat v2 = 0.250 * snoise(uv*4.0);\n   \tfloat v3 = 0.125 * snoise(uv*8.0);\n    return ( v0+v1+v2+v3 ) / 1.875;\n}\n\n\nfloat twooctavenoise( vec2 uv )\n{\n    float v0 = 1.000 * snoise(uv*1.0);\n    float v1 = 0.500 * snoise(uv*2.0);\n    return ( v0+v1 ) / 1.5f;\n}\n\n\nbool inring( float r )\n{\n    if ( r > 0.30 && r < 0.88 ) return true;\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2(-1,-1) + (fragCoord/iResolution.xy) * 2.0;\n    \n    // Calc radius, as distance from screen center.\n    float r = uv.x * uv.x + uv.y * uv.y;\n    \n    // Generate a simplex noise value.\n    float n = snoise( vec2(r*20.0, 0.0 ) );\n    \n    // Generate a noisy colour.\n    float v =  min( max( 2.0*n, 0.0 ), 1.0 );\n    vec4 col = inring(r) ? vec4(1.0*v, 0.9*v, 0.7*v, 1) : vec4(0,0,0,0);\n\n    // Output to screen\n    fragColor = col * abs(1.0+twooctavenoise(uv*30.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}