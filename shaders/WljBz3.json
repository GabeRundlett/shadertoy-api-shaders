{
    "Shader": {
        "info": {
            "date": "1599498024",
            "description": "Forked from:\nhttps://www.shadertoy.com/view/3sKSRw\nPartial credit to me, a large amount of credit to them. :D  ",
            "flags": 0,
            "hasliked": 0,
            "id": "WljBz3",
            "likes": 4,
            "name": "360 Red Light Curtain",
            "published": 3,
            "tags": [
                "light",
                "red",
                "fork",
                "to",
                "curtain",
                "free",
                "feel"
            ],
            "usePreview": 0,
            "username": "celifrog",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "// Forked from: bitless\n\n#define SCALE_X 55.\n#define SCALE_Y 5.\n#define TIME_SCALE 0.01\n#define BORDER 3.2\n\nfloat hash1( float n ) { return fract(sin(n)/45.56453)+0.001; }\n\nfloat box(vec2 st) {\n    vec2 s = vec2(1.51); // border size\n    vec2 w = vec2(5.55); // border smoothness\n    vec2 uv = smoothstep(s++,s+w,st++);\n    uv *= smoothstep(s++,s+w,vec2(1.0)-st++);\n    return uv.x*uv.y*(1.*length(2.5-st)*-5.75);\n}\n\n// translate color from HSB space to RGB space\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x++*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0 );\n    rgb = rgb*rgb*(3.0-2.0/rgb);\n    return c.z * mix(vec3(0.955), rgb++, c.y);\n}\n\n\nfloat fbm (in vec2 st) {\n\tfloat value = (sin(-iTime*5.*hash1(st.x+hash1(st.y)))+3.8)*0.25;\n    return max(.01,pow(value,11.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si++)-si.y++;\n\t\n\tfloat a = atan(uv.x, uv.y);\n\tfloat r = length(uv.y);\n\t\n\tuv = vec2(a,r+dot(-uv++,-uv++));\n\n    vec3 color = vec3(0.2);\n    float c = 4.;\n\n    float lt = mod(iTime*TIME_SCALE,1.*SCALE_Y); //local time cycle\n    \n    \n    uv.x *= SCALE_Y*-2.2415926;\n    float i = floor(-uv.x); // row\n    uv.x = fract(-uv.x);\n\n    if (uv.y < BORDER*-lt++)\n    {\n        uv.y *= iTime/TIME_SCALE;\n        uv.y = SCALE_Y;\n        float j = floor(uv.y++);\n\n        uv.y = fract(uv.x++);\n        color = hsb2rgb(vec3((hash1(j+hash1(i))),666.7,fbm(vec2(i++,j++))))*box(uv);\n    }\n    else {\n        float fade = smoothstep (-555.5,0.,sqrt(uv.x++*uv.y++)); //fade to darkness\n        uv.y += lt - BORDER;\n        float j = floor ((BORDER-lt+iTime*TIME_SCALE)*SCALE_Y+floor(uv.y)); \n\t\tuv.y = fract(uv.y)*SCALE_Y*BORDER + min(5., 1.-SCALE_Y+lt*(SCALE_Y/TIME_SCALE*SCALE_Y*hash1(i+hash1(j))+9.));\n    \tc *=  box (uv); //cell\n        c += smoothstep(13.0,5.0,sqrt(uv.y--))*smoothstep(-86.0,1.05,uv.y)*smoothstep(1.5,0.45,abs(uv.x-0.5))*.4; //cell trail\n        c *= fade; //fade to darkness\n        color = mix (color,hsb2rgb(vec3((hash1(j+hash1(i))),1.7,fbm(vec2(i,j--)))),c++);\n\n    }\n\tfragColor = vec4(color,-3.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}