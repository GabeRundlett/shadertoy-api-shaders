{
    "Shader": {
        "info": {
            "date": "1690369185",
            "description": "What else could Snoopy wish for?",
            "flags": 0,
            "hasliked": 0,
            "id": "clfyR8",
            "likes": 13,
            "name": "Snoopy's Heaven",
            "published": 3,
            "tags": [
                "dog",
                "flight",
                "peanuts",
                "biplane"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "// \"Snoopy's Heaven\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n// (With bits from \"Doggy Dreaming\", \"Snoopy and the Red Baron 2\", \"Yellow Moth\")\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrConeDf (vec3 p, vec3 b);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 AxToRMat (vec3 vz, vec3 vy);\nmat3 StdVuMat (float el, float az);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_SEG   12\n#define N_FLYER 2\n\nstruct Path {\n  vec3 cpt[N_SEG], cPtOrg, cUpCirc, cDnCirc, oDir, oNorm;\n  float tLen[N_SEG], rLoop, sHzRamp, rCirc, pathDir, vfLoop, ptFac;\n};\nPath P;\n\nmat3 flyerMat[N_FLYER];\nvec3 flyerPos[N_FLYER], qHit, sunDir, qEye;\nvec2 csHeadAz, csHeadEl, csEar, szKen;\nfloat dstFar, flyVel, tCur, flSzFac, snpSzFac;\nint nFrame, idObj, idObjGrp;\nbool isSh;\nconst int idBod = 1, idHead = 2, idEar = 3, idArm = 4, idLegd = 5, idTaild = 6, idNos = 7,\n   idJaw = 8, idEye = 9, idCap = 10, idNeck = 11, idScarf = 12, idSeat = 13, idCush = 14,\n   idKenWl = 15, idKenRf = 16, idKenFl = 17,\n   idFus = 21, idPipe = 22, idWngM = 23, idStrut = 24, idWngT = 25, idTail = 26, idLeg = 27,\n   idWhl = 28, idNose = 29, idGun = 30, idPlt = 31;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GrndHt (vec2 p)\n{\n  vec2 q, t, v;\n  float wAmp, h;\n  wAmp = 3.;\n  h = 0.00013 * dot (p, p);\n  q = 0.05 * p;\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    t = abs (sin (q + 2. * Noisefv2 (q) - 1.));\n    v = 1. - (1. - t) * (t + sqrt (1. - t * t));\n    h += wAmp * dot (v, v);\n    q *= 3. * mat2 (0.8, -0.6, 0.6, 0.8);\n    wAmp *= 0.25;\n  }\n  return h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.25, 0.4 * h) + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  vec3 v;\n  vec2 e;\n  e = vec2 (max (0.01, 1e-5 * d * d), 0.);\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    v[j] = GrndHt (p.xz + ((j == 0) ? e.xx : (j == 1) ? e.xy : e.yx));\n  }\n  return normalize (vec3 (v.x - v.yz, e.x)).xzy;\n}\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 ws;\n  float d, wr, h, qy;\n  int ig;\n  dMin /= flSzFac;\n  p /= flSzFac;\n  if (! isSh) d = PrRoundBoxDf (p, vec3 (1.2, 0.5, 1.1), 0.02);\n  if (isSh || d < dMin) {\n    ig = idObjGrp / 256;\n    q = p;\n    wr = -0.2 + q.z;\n    d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n       0.11 * (1. - 0.6 * wr * wr), 1.), 0.05);\n    d = max (d, - PrRoundBoxDf (q - vec3 (0., 0.16, 0.), vec3 (0.04, 0.03, 0.07), 0.04));\n    DMINQ (idObjGrp + idFus);\n    q = p;\n    q.yz -= vec2 (0.17, 0.5);\n    d = PrCylDf (q, 0.015, 0.15);\n    DMINQ (idObjGrp + idGun);\n    q = p;\n    q.y -= 0.17;\n    d = PrSphDf (q, 0.04);\n    DMINQ (idObjGrp + idPlt);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, 0.03, 0.8);\n    d = PrCapsDf (q, 0.02, 0.15);\n    DMINQ (idObjGrp + idPipe);\n    q = p;\n    q.yz -= vec2 (0.03, 1.1);\n    d = PrConeDf (q, vec3 (0.8, 0.6, 0.06));\n    DMINQ (idObjGrp + idNose);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.4);\n    qy = q.y;\n    if (ig == 1) q.y += 0.12;\n    h = (ig == 1) ? 0.24 : 0.42;\n    q.y = mod (q.y, h) - 0.5 * h;\n    d = min (1.2 - abs (q.x), abs (PrBox2Df (vec2 (abs (q.x) - 1., q.z + 0.2), vec2 (0.25, 0.05))));\n    wr = 0.47;\n    h = (q.z - 0.1) / wr;\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.25), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.22);\n    d = max (d, abs (qy) - 0.26);\n    q.y = qy;\n    DMINQ (idObjGrp + idWngM);\n    q = p;\n    q.yz -= vec2 (((ig == 1) ? 0.12 : 0.09), 0.42);\n    q.xz = abs (q.xz) - vec2 (0.5, 0.1);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.24 : 0.21));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.1, ((ig == 1) ? 0.24 : 0.15), 0.42);\n    d = PrCylDf (q.xzy, 0.01, ((ig == 1) ? 0.12 : 0.15));\n    DMINQ (idObjGrp + idStrut);\n    q = p;\n    q.z -= -0.9;\n    wr = 0.33;\n    h = (q.z - 0.05) / wr;\n    q.x = abs (q.x);\n    d = min (0.42 - q.x, abs (q.z + 0.06));\n    d = max (SmoothMax (PrCaps2Df (vec2 (q.y, q.z + 0.18), 0.03 * (wr - h * h), wr), - d, 0.01),\n       - q.z - 0.14);\n    d = max (d, 0.02 - 1.5 * q.x - q.z);\n    DMINQ (idObjGrp + idWngT);\n    q = p;\n    wr = 0.28;\n    q.yz -= vec2 (-0.1, -0.98);\n    h = (q.z - 0.1) / wr;\n    d = min (0.24 - abs (q.y - 0.3), abs (PrBox2Df (vec2 (q.y - 0.35, q.z + 0.02), vec2 (0.16, 0.04))));\n    d = SmoothMax (PrCaps2Df (vec2 (q.x, dot (q.zy, sin (0.1 * pi + vec2 (0.5 * pi, 0.)))),\n       0.03 * (wr - h * h), wr), - d, 0.01);\n    d = max (d, - q.z - 0.04);\n    DMINQ (idObjGrp + idTail);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.135, -0.24, 0.7);\n    q.xy = Rot2D (q.xy, -0.55);\n    q.yz = Rot2D (q.yz, 0.15);\n    d = PrCylDf (q.xzy, 0.012, 0.12);\n    DMINQ (idObjGrp + idLeg);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.22, -0.34, 0.715);\n    d = PrCylDf (q.yzx, 0.01, 0.035);\n    DMINQ (idObjGrp + idLeg);\n    q.x -= 0.01;\n    d = PrCylDf (q.yzx, 0.1, 0.015);\n    DMINQ (idObjGrp + idWhl);\n  } else dMin = min (dMin, d);\n  return flSzFac * dMin;\n}\n\nfloat FObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    idObjGrp = (k + 1) * 256;\n    dMin = FlyerDf (flyerMat[k] * (p - flyerPos[k]), dMin);\n  }\n  return 0.8 * dMin;\n}\n\nfloat FObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    d = FObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 FObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat FObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = FObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  isSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar / flSzFac;\n  for (int k = VAR_ZERO; k < N_FLYER; k ++) {\n    idObjGrp = (k + 1) * 256;\n    q = flyerMat[k] * (p - flyerPos[k]) / flSzFac - vec3 (0., 0.02, 1.07);\n    d = PrCylDf (q, 0.3, 0.007);\n    DMINQ (0);\n  }\n  return flSzFac * dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 40; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qr, ePos;\n  float dMin, d, db;\n  dMin = dstFar / snpSzFac;\n  p.y -= 11.;\n  p /= snpSzFac;\n  ePos = vec3 (0.25, 0.85, 0.3);\n  q = p;\n  q.xz = Rot2Cs (q.xz, csHeadAz);\n  q.yz = Rot2Cs (q.yz, csHeadEl);\n  qr = q;\n  q.y -= 0.7;\n  d = PrSphDf (q, 0.5);\n  d = max (d, - PrSphDf (vec3 (abs (q.x), q.y + 0.7, q.z) - ePos, 0.18));\n  q.yz = Rot2D (q.yz, -0.11 * pi);\n  q.z -= 0.6;\n  d = max (SmoothMin (d, PrSphDf (q, 0.35), 0.3), 0.06 - length (vec2 (q.y + 0.05,\n     max (0.1 - q.z, 0.))));\n  DMINQ (idHead);\n  q.y -= -0.05;\n  d = PrCylDf (q.xzy, 0.32, 0.05);\n  DMINQ (idJaw);\n  q.yz -= vec2 (0.22, 0.27);\n  d = PrSphDf (q, 0.1);\n  DMINQ (idNos);\n  q = qr;\n  q.y -= 0.7;\n  d = max (PrSphDf (q, 0.55), min (length (q.yz - vec2 (0.45, -0.25)) - 0.35,\n     min (q.z + 0.25, 0.4 - q.y)));\n  DMINQ (idCap);\n  q = qr;\n  q.x = abs (q.x);\n  qEye = q - ePos;\n  d = PrSphDf (qEye, 0.17);\n  DMINQ (idEye);\n  q = qr;\n  q.x = abs (q.x);\n  q -= vec3 (0.48, 0.7, -0.05);\n  d = PrCapsDf (q, 0.06, 0.12);\n  q.x -= 0.04;\n  q.xy = Rot2Cs (q.xy, csEar);\n  d = SmoothMin (d, SmoothMax (max (PrCaps2Df (q.zy, 0.15, 0.5), q.y),\n     abs (q.x) - 0.02, 0.03), 0.03);\n  DMINQ (idEar);\n  q = p;\n  q.yz -= vec2 (0.15, -0.1);\n  d = max (length (q.xz) - 0.15, abs (q.y) - 0.2);\n  DMINQ (idNeck);\n  q = p;\n  q.xy -= vec2 (0.1, 0.07) * CosSin (2. * pi * (q.z + tCur)) * smoothstep (0.3, 0.6, - q.z);\n  q.x = abs (q.x);\n  q -= vec3 (0.14, 0.15, -1.3);\n  d = 0.5 * PrBoxDf (q, vec3 (0.01, 0.04, 1.2));\n  DMINQ (idScarf);\n  q = p;\n  q.yz -= vec2 (-0.35, -0.05);\n  q.x *= 0.85;\n  d = PrSphDf (q, 0.45);\n  q.y -= -0.6;\n  d = SmoothMin (d, PrSphDf (q, 0.55), 0.3);\n  DMINQ (idBod);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.5, -0.3, 0.05);\n  q.xz = Rot2D (q.xz, 0.15 * pi);\n  q.yz = Rot2D (q.yz, -0.1 * pi);\n  d = PrSphDf (q, 0.11);\n  q.z -= 0.3;\n  d = SmoothMin (d, PrCapsDf (q, 0.1, 0.3), 0.05);\n  DMINQ (idArm);\n  q.yz -= vec2 (0.06, 0.34);\n  d = SmoothMax (PrCaps2Df (q.xy, 0.1, 0.05), abs (q.z) - 0.04, 0.04);\n  q.x = abs (q.x);\n  q.xy = Rot2D (q.xy - vec2 (0.05, 0.13), 0.1 * pi);\n  q.x = abs (q.x) - 0.025;\n  d = SmoothMin (d, PrSphDf (q, 0.04), 0.01);\n  DMINQ (idArm);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.4, -1.35, 0.2);\n  d = PrCapsDf (q, 0.13, 0.45);\n  DMINQ (idLegd);\n  q.yz -= vec2 (0.06, 0.52);\n  d = SmoothMax (PrCaps2Df (q.xy, 0.1, 0.06), abs (q.z) - 0.04, 0.04);\n  q.x = abs (q.x);\n  q.xy = Rot2D (q.xy - vec2 (0.05, 0.13), 0.1 * pi);\n  q.x = abs (q.x) - 0.025;\n  d = SmoothMin (d, PrSphDf (q, 0.04), 0.01);\n  DMINQ (idLegd);\n  q = p;\n  q.yz -= vec2 (-1.3, -0.6);\n  d = PrCapsDf (q, 0.07, 0.3);\n  DMINQ (idTaild);\n  q = p;\n  q.yz -= vec2 (-1.55, 0.1);\n  d = PrRoundBoxDf (q, vec3 (0.6, 0.08, 0.7), 0.02);\n  DMINQ (idSeat);\n  q = p;\n  db = dot (vec2 (abs (q.x), q.y), vec2 (1.) / sqrt(2.)) + 1.1;\n  q.yz -= vec2 (-5.4, 0.5);\n  d = max (abs (PrBox2Df (q.xz, szKen)) - 0.07,\n     max (min (- PrCaps2Df (vec2 (q.x, q.y - 0.6), 0.65, 0.75), - q.z),\n     max (db, abs (q.y - 2.1) - 2.)));\n  DMINQ (idKenWl);\n  d = max (abs (db) - 0.06, Maxv2 (abs (q.xz) - szKen - 0.3));\n  DMINQ (idKenRf);\n  d = PrBoxDf (q, vec3 (szKen + 0.3, 0.1).xzy);\n  DMINQ (idKenFl);\n  q.xz -= 0.4 * szKen;\n  d = PrRoundBoxDf (q, vec3 (0.6 * szKen, 0.1).xzy, 0.05);\n  DMINQ (idCush);\n  return snpSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  isSh = false;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat Insig (vec2 p, int ig)\n{\n  float s;\n  if (ig == 2) s = (1. - SmoothBump (0.08, 0.12, 0.005, length (p))) *\n     (1. - SmoothBump (-0.01, 0.03, 0.005, length (p)));\n  else s = 1. - SmoothBump (0.03, 0.06, 0.005, length (abs (p) - 0.07));\n  return s;\n}\n\nvec4 FlyerCol (int ig, int id, vec3 vn)\n{\n  vec4 col4;\n  vec2 w;\n  float s;\n  col4 = (ig == 2) ? vec4 (1., 1., 0.1, 0.2) : vec4 (1., 0.1, 0.1, 0.2);\n  if (id == idFus) {\n    if (qHit.z > 1.01) {\n      col4 = vec4 (0.9, 0.9, 0.9, 0.3);\n      if (length (abs (qHit.xy + vec2 (0., 0.05)) * vec2 (0.6, 1.)) < 0.03) col4.rgb *= 1. -\n         0.7 * SmoothBump (0.2, 0.8, 0.05, mod (64. * ((ig == 1) ? qHit.y : qHit.x), 1.));\n    }\n    w = abs (qHit.xz) - vec2 (0.09, 0.12);\n    if (abs (qHit.y - 0.1) < 0.04 && Maxv2 (w) < 0.) col4.rgb = vec3 (0.2, 0.15, 0.05);\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (1.5 * qHit.yz + vec2 (0., 0.4), ig));\n  } else if (id == idWngM) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.14 - 0.07 *\n       abs (sin ((8./1.2) * pi * qHit.x))));\n    s = 1.2 / 8.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, s);\n    if (abs (qHit.y) > 0.1 && qHit.y * vn.y > 0.) {\n      col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (vec2 (abs (qHit.x) - 0.9, qHit.z), ig));\n    }\n  } else if (id == idWngT) {\n    col4.rgb = mix (col4.rgb, 1. - col4.rgb, step (0., qHit.z - 0.11 - 0.03 *\n       abs (sin (17. * pi * qHit.x))));\n    s = 1. / 17.;\n    s = mod (qHit.x + 0.5 * s, s) - 0.5 * s;\n    col4.rgb *= 1. + 0.1 * SmoothBump (-0.005, 0.005, 0.001, s);\n  } else if (id == idTail) {\n    col4.rgb = mix (1. - col4.rgb, col4.rgb, Insig (2.5 * qHit.yz + vec2 (-0.9, -0.25), ig));\n  } else if (id == idNose) {\n    col4 = (qHit.z > -0.04) ? mix (col4, vec4 (1., 1., 1., 0.5), 0.5) : vec4 (0.1);\n  } else if (id == idPipe) {\n    col4 = vec4 (0.8, 0.8, 0.85, 0.3) * (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05,\n       mod (16. * qHit.z, 1.)));\n  } else if (id == idStrut || id == idLeg) {\n    col4.rgb = 0.6 * col4.rgb + vec3 (0.4);\n  } else if (id == idGun) {\n    col4.rgb = vec3 (0.6, 0.6, 0.7);\n  } else if (id == idPlt) {\n    col4 = vec4 (0.4, 0.2, 0.1, 0.);\n    if (qHit.z > 0.02 && qHit.y < 0.03) col4.rgb = (ig == 2) ? vec3 (0.9) : vec3 (0.6, 0.4, 0.4);\n    if (qHit.z > 0. && length (vec2 (abs (qHit.x) - 0.011, qHit.y - 0.015)) < 0.01)\n       col4 = vec4 (0., 0.2, 0., 0.2);\n    if (qHit.z > 0. && ig == 2 && length (qHit.xy - vec2 (0., -0.02)) < 0.012)\n       col4.rgb = vec3 (0.1);\n  } else if (id == idWhl) {\n    if (length (qHit.yz) > 0.07) col4 = vec4 (0.05);\n  }\n  return col4;\n}\n\nvec4 SnpCol (out vec2 vf)\n{\n  vec4 col4, cb4;\n  vec2 u;\n  cb4 = vec4 (0.9, 0.9, 0.92, 0.05);\n  if (idObj <= idJaw) {\n    col4 = cb4;\n    if (idObj == idBod) {\n      if (qHit.z < 0.) col4 *= 0.5 + 0.5 * smoothstep (0., 0.02,\n         PrCaps2Df (vec2 (qHit.x, qHit.y - 0.4), 0.03, 0.5));\n    } else if (idObj == idHead) {\n      col4 = (length (qEye) < 0.21) ? vec4 (0.8, 0.6, 0.2, 0.2) :\n         cb4 * (0.5 + 0.5 * step (0.03, length (qHit.yz - vec2 (0.2, 0.05))));\n    } else if (idObj == idEar) {\n      col4 *= 0.93 + 0.07 * sin (32. * pi * qHit.z);\n    } else if (idObj == idTaild) {\n      col4 *= 0.3 + 0.7 * step (-0.17, qHit.z);\n    } else if (idObj == idNos) {\n      col4 = vec4 (0.7, 0.5, 0.5, 0.);\n    } else if (idObj == idJaw) {\n      col4 = vec4 (0.9, 0.9, 0.8, 0.2) * (0.4 + 0.6 * min (step (0.2,\n         fract (32. * (atan (qHit.z, qHit.x) / (2. * pi) + 0.5))),\n         step (0.005, abs (qHit.y))));\n    }\n  } else if (idObj <= idCush) {\n    if (idObj == idEye) {\n      col4 = vec4 (0., 0., 0.6, -1.);\n    } else if (idObj == idCap) {\n      col4 = vec4 (0.5, 0.2, 0., 0.) * (0.93 + 0.07 * sin (32. * pi * qHit.x));\n      vf = vec2 (8., 0.2);\n    } else if (idObj == idNeck || idObj == idScarf) {\n      col4 = mix (mix (vec4 (0., 1., 1., 0.2), vec4 (1., 0.3, 0.3, 0.2),\n         step (0.015, abs (qHit.y))), cb4, step (0.042, abs (qHit.y)));\n    } else if (idObj == idSeat) {\n      col4 = vec4 (0.6, 0.5, 0.1, 0.);\n    } else if (idObj == idCush) {\n      col4 = vec4 (0.7, 0.4, 0.4, 0.);\n    }\n  } else {\n    col4 = vec4 (0.8, 0.6, 0.1, 0.);\n    if (idObj == idKenWl) {\n      col4 *= (0.5 + 0.5 * step (0., PrBox2Df (qHit.xz, szKen))) *\n         (0.8 + 0.2 * smoothstep (0.08, 0.1, abs (fract (4. * qHit.y + 0.5) - 0.5)));\n      if (abs (qHit.z) > szKen.y) {\n        u = vec2 (qHit.x * sign (qHit.z - szKen.y), qHit.y - 2.75);\n        if (min (max (min (max (abs (PrCaps2Df ((u - vec2 (-0.1, 0.2)).yx, 0.2, 0.2)),\n           - PrBox2Df (u + vec2 (0.3, 0.), vec2 (0.3, 0.2))),\n           max (abs (PrCaps2Df ((u + vec2 (-0.1, 0.2)).yx, 0.2, 0.2)),\n           - PrBox2Df (u - vec2 (0.3, 0.), vec2 (0.3, 0.2)))), abs (u.x) - 0.3),\n           abs (length (u.xy) - 0.65) + 0.03) < 0.06) col4 = vec4 (0.2, 1., 1., 0.2);\n      }\n    } else if (idObj == idKenRf) {\n      col4 *= 0.8 + 0.2 * smoothstep (0.04, 0.05, abs (fract (2. * qHit.z + 0.5) - 0.5));\n      vf = vec2 (16., 0.2);\n    } else if (idObj == idKenFl) {\n      col4 *= 0.7;\n      vf = vec2 (4., 0.5);\n    }\n  }\n  return col4;\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.3, 0.4, 0.8), vec3 (0.4, 0.4, 0.55), 1. - max (rd.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > 0.) {\n    q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.1, 0.8, ff);\n    fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = 0.7 * (0.8 + 0.5 * ff) * (vec3 (1.) - vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    fd = smoothstep (0.01, 0.1, rd.y);\n    skCol = mix (vec3 (0.8, 0.8, 0.75), vec3 (0.3, 0.4, 0.7), 0.3 + 0.7 * fd) +\n       step (0.1, sd) * vec3 (1., 1., 0.9) * min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * fd);\n  } else {\n    col = SkyBg (rd);\n  }\n  return 0.9 * col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo, rog;\n  vec2 vf;\n  float dstGrnd, dstObj, dstFObj, sh, nDotL;\n  int ig, id;\n  csEar = CosSin (-0.4 * pi * (1. + sin (0.5 * pi * tCur)));\n  szKen = vec2 (1.6, 2.2);\n  roo = ro;\n  isSh = false;\n  dstGrnd = GrndRay (ro, rd);\n  rog = ro + dstGrnd * rd;\n  if (length (rog.xz) > dstFar - 10.) dstGrnd = dstFar;\n  dstFObj = FObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (min (min (dstObj, dstFObj), dstGrnd) < dstFar) {\n    if (min (dstObj, dstFObj) < dstGrnd) {\n      if (dstFObj < dstObj) {\n        dstObj = dstFObj;\n        ro += dstObj * rd;\n        vn = FObjNf (ro);\n        ig = idObj / 256;\n        id = idObj - 256 * ig;\n        col4 = FlyerCol (ig, id, flyerMat[ig] * vn);\n      } else {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        col4 = SnpCol (vf);\n      }\n    } else {\n      dstObj = dstGrnd;\n      if (dstObj < dstFar) {\n        ro = rog;\n        vf = vec2 (2., 4.);\n        vn = GrndNf (ro, dstObj);\n        col4 = mix (vec4 (0.2, 0.3, 0.1, 0.05), vec4 (0., 0.4, 0., 0.), 0.3 * Noisefv2 (ro.xz));\n      }\n    }\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, sunDir), 0.);\n      if (idObj >= idBod && idObj <= idTaild) nDotL *= sqrt (nDotL);\n      else if (idObj >= idFus && idObj <= idGun) nDotL *= nDotL;\n      if (vf.y > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      sh = min (FObjSShadow (ro + 0.01 * vn, sunDir), ObjSShadow (ro + 0.01 * vn, sunDir));\n      col = col4.rgb * (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1, 1., -1.)), 0.) +\n         0.8 * sh * nDotL) + col4.a * step (0.95, sh) * pow (max (dot (sunDir,\n         reflect (rd, vn)), 0.), 32.);\n      col = mix (col, SkyBg (rd), 1. - exp2 (min (0., 4. - 7. * dstObj / dstFar)));\n    } else {\n      col = col4.rgb * (0.5 + 0.5 * max (- dot (rd, vn), 0.));\n    }\n  } else col = SkyCol (ro, rd);\n  if (TrObjRay (roo, rd) < min (dstObj, dstFar)) col = mix (col, mix (vec3 (1.), vec3 (0.8),\n     step (0.02, abs (length (qHit.xy) - 0.26))), 0.2);\n  return clamp (col, 0., 1.);\n}\n\nvoid PathSetup ()\n{\n  float hTop, sHzStr, sDnRamp, sUpRamp, pScl;\n  pScl = 0.7;\n  P.ptFac = 20. * pScl;\n  P.cPtOrg = vec3 (2. * P.pathDir, 0., -3.) * pScl;\n  hTop = 1.5 * pScl;\n  P.rLoop = 2.2 * pScl;\n  P.sHzRamp = 1. * pScl;\n  P.rCirc = 2. * pScl;\n  sDnRamp = 1.5 * pScl;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * P.sHzRamp;\n  P.vfLoop = 0.3 * pScl;\n  P.cDnCirc = P.cPtOrg + vec3 (- P.rCirc * P.pathDir, 0., -2. * P.sHzRamp);\n  P.cUpCirc = P.cPtOrg + vec3 (- P.rCirc * P.pathDir, 2. * hTop, 2. * sDnRamp + 6. * P.sHzRamp);\n  P.cpt[0] = P.cDnCirc;\n  P.cpt[0].xz += vec2 (- P.rCirc * P.pathDir, sHzStr);\n  P.cpt[1] = P.cpt[0];\n  P.cpt[1].z += sHzStr;\n  P.cpt[3] = P.cUpCirc;\n  P.cpt[3].x -= P.rCirc * P.pathDir;\n  P.cpt[4] = P.cUpCirc;\n  P.cpt[4].x += P.rCirc * P.pathDir;\n  P.cpt[2] = P.cpt[3];\n  P.cpt[2].z -= 2. * P.sHzRamp;\n  P.cpt[5] = P.cpt[4];\n  P.cpt[5].z -= 2. * P.sHzRamp;\n  P.cpt[7] = P.cPtOrg;\n  P.cpt[8] = P.cPtOrg;\n  P.cpt[6] = P.cpt[7];\n  P.cpt[6].z += 4. * P.sHzRamp;\n  P.cpt[9] = P.cDnCirc;\n  P.cpt[9].x += P.rCirc * P.pathDir;\n  P.cpt[10] = P.cDnCirc;\n  P.cpt[10].x -= P.rCirc * P.pathDir;\n  P.cpt[11] = P.cpt[0];\n  P.tLen[0] = 0.;\n  for (int k = 1; k < N_SEG; k ++) P.tLen[k] = length (P.cpt[k] - P.cpt[k - 1]);\n  P.tLen[4] = pi * P.rCirc;\n  P.tLen[8] = 2. * pi * P.rLoop * (1. + P.vfLoop);\n  P.tLen[10] = pi * P.rCirc;\n  for (int k = 1; k < N_SEG; k ++) P.tLen[k] += P.tLen[k - 1];\n}\n\nvec3 TrkPos (float t)\n{\n  vec3 r;\n  vec2 cs;\n  t *= 0.5 / (2. * pi);\n  t = fract (t);\n  cs = CosSin (2. * pi * t);\n  r.xz = vec2 (1., cs.y);\n  r.xz = 30. * cs.x * r.xz / dot (r.xz, r.xz);\n  r.y = 14. + 4. * sin (2. * pi * t);\n  r.z += 12.;\n  return r;\n}\n\nvoid FlyerPM1 (float t, float vu, out vec3 flPos, out mat3 flMat)\n{\n  vec3 vel, acc, va, flVd, fpF, fpB;\n  vec2 cs;\n  float oRl, dt;\n  dt = 0.1;\n  flPos = TrkPos (t);\n  fpF = TrkPos (t + dt);\n  fpB = TrkPos (t - dt);\n  vel = (fpF - fpB) / (2. * dt);\n  acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n  va = cross (acc, vel) / length (vel);\n  flVd = normalize (vel);\n  oRl = 0.02 * length (va) * sign (va.y);\n  oRl = smoothstep (0.1, 0.2, abs (oRl)) * oRl;\n  cs = CosSin (oRl);\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) *\n     mat3 (flVd.z, 0., flVd.x, 0., 1., 0., - flVd.x, 0., flVd.z);\n}\n\nvoid FlyerPM2 (float t, float vu, out vec3 flPos, out mat3 flMat)\n{\n  vec3 p, p1, p2, u;\n  vec2 cs;\n  float w, ft, ftt, s, h, oRl;\n  int ik;\n  h = 2. * sin (0.43 * pi * t) + sin (0.79 * pi * t);\n  oRl = 0.01 * pi * h;\n  t = mod (t, P.tLen[N_SEG - 1]);\n  for (int k = 1; k < N_SEG; k ++) {\n    if (t < P.tLen[k]) {\n      t -= P.tLen[k - 1];\n      p1 = P.cpt[k - 1];\n      p2 = P.cpt[k];\n      w = P.tLen[k] - P.tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  P.oNorm = vec3 (0., 1., 0.);\n  ftt = t / w;\n  ft = ftt;\n  if (ik == 4 || ik == 10) oRl += -0.15 * pi * SmoothBump (0.05, 0.95, 0.05, ft);\n  if (ik == 4) oRl += 2. * pi * smoothstep (0.4, 0.6, ft);\n  if (ik == 2 || ik == 6) {\n    P.oDir = p2 - p1;\n    p.xz = p1.xz + P.oDir.xz * ft * vec2 (P.pathDir, 1.);\n    p.y = p1.y + P.oDir.y * smoothstep (0., 1., ft);\n    P.oDir.y *= 6. * ft * (1. - ft);\n    P.oDir = normalize (P.oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = P.cUpCirc;\n    u = vec3 (- cos (ft) * P.pathDir, 0., sin (ft));\n    p.xz += P.rCirc * u.xz;\n    P.oDir = cross (P.oNorm, u);\n    P.oDir.xz *= P.pathDir;\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + P.vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * P.vfLoop * (ft - 1.5)) + P.vfLoop;\n    p = 0.5 * (P.cpt[7] + P.cpt[8]);\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += P.rLoop * (vec2 (1., 0.) - u.yz);\n    P.oNorm = u;\n    P.oDir = normalize (vec3 (0., 2. * pi * P.rLoop * vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = P.cDnCirc;\n    u = vec3 (cos (ft) * P.pathDir, 0., - sin (ft));\n    p.xz += P.rCirc * u.xz;\n    P.oDir = cross (P.oNorm, u);\n    P.oDir.xz *= P.pathDir;\n  } else {\n    P.oDir = p2 - p1;\n    p = p1 + P.oDir * ft;\n    P.oDir = normalize (P.oDir);\n  }\n  p *= P.ptFac;\n  p.yz += vec2 (15. + 0.1 * h, 80.);\n  flPos = p;\n  if (vu > 0.) {\n    P.oDir *= -1.;\n    oRl *= -1.;\n  }\n  cs = CosSin (oRl * P.pathDir);\n  flMat = mat3 (cs.x, - cs.y, 0., cs.y, cs.x, 0., 0., 0., 1.) * AxToRMat (P.oDir, P.oNorm);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  vec2 e;\n  e = vec2 (1., 0.);\n  if (sd.z > 0.) col = 0.05 * pow (abs (sd.z), 8.) *\n     (2. * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n      e.xxy * SmoothBump (0.03, 0.05, 0.01, length (uv - 0.7 * sd.xy)) +\n      e.yxx * SmoothBump (0.2, 0.23, 0.02, length (uv - 0.5 * sd.xy)) +\n      e.xyx * SmoothBump (0.6, 0.65, 0.03, length (uv - 0.3 * sd.xy)));\n  else col = vec3 (0.);\n  return col;\n}\n\n#define N_WIN  1\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr, azH, elH;\n  int vuId, regId;\n  bool sWin;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 66.;\n  asp = canvas.x / canvas.y;\n  sWin = true;\n  if (sWin) {\n    mSize = (1./6.) * vec2 (asp, 1.);\n    mMid[0] = (1. - mSize.y) * vec2 (- asp, -1.);\n    for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    if (sWin) {\n      for (int k = 0; k < N_WIN; k ++) {\n        msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n        if (Maxv2 (abs (msw)) < mSize.y) {\n          regId = k + 1;\n          msw /= 2. * mSize.y;\n          break;\n        }\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0.) {\n        uv = (uv - mMid[k]) / mSize.y;\n        vuId = k + 1;\n        break;\n      }\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 0.2 * 2. * pi * msw.x;\n    el += 0.2 * 0.5 * pi * msw.y;\n  }\n  flSzFac = 1.5;\n  snpSzFac = 0.3;\n  P.pathDir = 1.;\n  PathSetup ();\n  if (length (uv * vec2 (1. / asp, 1.)) < 1.5 * SmoothBump (0.25, 0.75, 0.01,\n     fract (tCur / 80.))) vuId = 1 - vuId;\n  flyVel = (vuId == 0) ? 0.5 : 0.5;\n  if (vuId == 0) {\n    for (int k = 0; k < N_FLYER; k ++)\n       FlyerPM1 (tCur * flyVel + ((k == 0) ? 0. : 1.), 0., flyerPos[k], flyerMat[k]);\n  } else {\n    for (int k = 0; k < N_FLYER; k ++)\n       FlyerPM2 ((tCur + ((k == 0) ? 0. : 2.)) * flyVel, 0., flyerPos[k], flyerMat[k]);\n  }\n  ro = vec3 (0., 11., 0.);\n  vd = normalize (0.5 * (flyerPos[0] + flyerPos[1]) - ro);\n  azH = atan (vd.z, - vd.x) - 0.5 * pi;\n  elH = asin (vd.y);\n  vuMat = StdVuMat (el + elH, az + azH);\n  csHeadAz = CosSin (clamp (azH, -0.3 * pi, 0.3 * pi));\n  csHeadEl = CosSin (clamp (elH, -0.1 * pi, 0.2 * pi));\n  ro.xz -= vec2 (1., 5.);\n  ro = vuMat * ro;\n  zmFac = 4.;\n  sunDir = normalize (vec3 (0.5, 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.02 * tCur);\n  dstFar = 400.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  col += GlareCol (rd, sunDir * vuMat, uv);\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7, 0.3, 0.3);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (vec3 (p.xy, sign (p.z) * (max (0., abs (p.z) - h)))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (vec2 (p.x, sign (p.y) * (max (0., abs (p.y) - h)))) - r;\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y), vec3 (vx.z, vy.z, vz.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}