{
    "Shader": {
        "info": {
            "date": "1574517574",
            "description": "deformation",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVXzV",
            "likes": 4,
            "name": "Sphere to octahedron",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define EPSILON 1e-4\n#define INFTY 1e6\nfloat wireBox(vec3 p) {\n    vec3 q = abs(p) - 0.5;\n    vec3 r = -1.0 * min(q, 0.0);\n    float minVal = min(r.x, min(r.y, r.z));\n    float maxVal = max(r.x, max(r.y, r.z));\n    float midVal = min(max(r.x, r.y), min(max(r.y, r.z), max(r.z, r.x)));\n    return sqrt(pow(length(max(q, 0.0)), 2.0) + pow(minVal, 2.0) + pow(midVal, 2.0));\n}\nfloat box(vec3 p) {\n    vec3 q = abs(p) - 0.5;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\nfloat oct(vec3 p) {\n    return abs(p.x) + abs(p.y) + abs(p.z) - 1.0;\n}\nfloat sphere(vec3 p) {\n    return length(p) - 0.5;\n}\nfloat sphereCloud(vec3 p) {\n    p = abs(p);\n    return length(mod(3.0 * p, 1.0) - 0.5) - 0.4 * (1.0 - max(max(p.x, p.y), p.z));\n}\nfloat surfaceSDF(vec3 p) {\n    float t = abs(mod(iTime * 0.3, 6.0) - 3.0);\n    float val;\n    if (t < 1.0)val = mix(sphereCloud(p), box(p), clamp(t, 0.0, 1.0));\n    else if (t < 2.0)val = mix(box(p), wireBox(p), clamp(t - 1.0, 0.0, 1.0));\n    else val = mix(wireBox(p), oct(p), clamp(t - 2.0, 0.0, 1.0));\n    return val;\n}\n\nfloat getAngle(vec3 p, vec3 q) {\n    return acos(dot(normalize(p), normalize(q)));\n}\nvec3 getNormal(vec3 p) {\n    float d = EPSILON;\n    return normalize(vec3(\n            surfaceSDF(p + vec3(d, 0.0, 0.0)) - surfaceSDF(p),\n            surfaceSDF(p + vec3(0.0, d, 0.0)) - surfaceSDF(p),\n            surfaceSDF(p + vec3(0.0, 0.0, d)) - surfaceSDF(p)\n    ));\n}\n    \nmat3 rotX(float t) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, sin(t), cos(t),\n        0.0, - cos(t), sin(t)\n    );\n}\nmat3 rotY(float t) {\n    return mat3(\n        sin(t), 0.0, cos(t),\n        0.0, 1.0, 0.0,\n        - cos(t), 0.0, sin(t)\n    );\n}\nmat3 scalar(float t) {\n    return mat3(\n        t, 0.0, 0.0,\n        0.0, t, 0.0,\n        0.0, 0.0, t\n    );\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 lightDir = vec3(0.0, 2.0, 2.0);\n    \n    // fragment position\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = vec3(0.0, - 0.0, - 1.0);\n    vec3 cUp = vec3(0.0, 1.0, 0.0);\n    float targetDepth = 1.0;\n    float t = iTime * 0.3;\n    mat3 g = rotX(t) * rotY(t);\n    cPos = g * cPos;\n    cDir = g * cDir;\n    cUp = g * cUp;\n    vec3 cSide = cross(cDir, cUp);\n    \n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    float ang = getAngle(ray, - normalize(cPos));\n    vec3 rPos = cPos + (1.0 / cos(ang)) * ray;\n    \n    // marching loop\n    for(int i = 0; i < 120; i ++ ) {\n        rPos += 0.015 * ray;\n        if (surfaceSDF(rPos) < 0.01) {\n            break;\n        }\n    }\n    vec3 normal = getNormal(rPos);\n    float diff = clamp(dot(normalize(lightDir - rPos), normal), 0.01, 1.0);\n    \n    // hit check\n    if (surfaceSDF(rPos) < 0.01) {\n        fragColor = vec4(diff * vec3(rPos.x, 1.0, rPos.p), 1.0);\n    } else {\n        fragColor = vec4(vec3(1.0, 1.0, 1.0), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}