{
    "Shader": {
        "info": {
            "date": "1641975150",
            "description": "Log Popol",
            "flags": 32,
            "hasliked": 0,
            "id": "7slyzM",
            "likes": 13,
            "name": "大龙猫 - Log Popol Room",
            "published": 3,
            "tags": [
                "logpolar"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "\n/******\nInspiration and copy code from\n\nhttps://www.osar.fr/notes/logspherical/\nGaz https://www.shadertoy.com/user/gaz\n\n--- \n/******\nThis work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n\n== Do not buy NFT ==\n== Do not make NFT with Creative-Commons artworks ==\n== If you respect the art and the artists, remember and apply this ==\n\n01000110011101010110001101101011 011011100110011001110100\n\n                                                                               \n _|_|_|_|                      _|            _|      _|  _|_|_|_|  _|_|_|_|_|  \n _|        _|    _|    _|_|_|  _|  _|        _|_|    _|  _|            _|      \n _|_|_|    _|    _|  _|        _|_|          _|  _|  _|  _|_|_|        _|      \n _|        _|    _|  _|        _|  _|        _|    _|_|  _|            _|      \n _|          _|_|_|    _|_|_|  _|    _|      _|      _|  _|            _|      \n                                                                          \n\n01000110011101010110001101101011 011011100110011001110100\n\n******/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n  vec4 pframe = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    // Output to screen\n    fragColor = vec4(min(pframe.xyz/pframe.a,vec3(1.,1.,1.)),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Gaz\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\nfloat box(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat diam(vec3 p,float s){\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*inversesqrt(3.);\n}\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n//https://www.osar.fr/notes/logspherical/\nfloat logpol(vec3 p,float scale){\n\n    vec2 p2d = p.xz;\n    \n    float r = length(p2d);\n    \n    p2d = vec2(log(r),atan(p2d.y,p2d.x));\n \n    p2d *=scale;\n    vec2 id = floor(p2d);\n    p2d = fract(p2d)-.5;\n    float m = r/scale;\n    vec3 pp = vec3(p2d, p.y/m);\n    \n    float h = diam(pp+vec3(0,0.,0.),1.2);\n    h = min(length(pp.xz)-.1,h);\n    return h * m;\n}\n\nvec2 sdf(vec3 p){\n    p.y = -(abs(p.y)-3.1);\n    vec2 h;\n    h.x = logpol(p,3.);\n    h.y = 1.;\n    \n    h.x = smin(h.x,length(p)-.5,1.4);\n    return h;\n}\nfloat rand(float n){return fract(sin(n) * 995897.48484);}\n\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p,float a){vec2 e =vec2(-a,a);return normalize(q(e.xyy)+q(e.yxy)+q(e.yyx)+q(e.xxx));}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy -.5*iResolution.xy)/iResolution.y;\n    uv += vec2(rand(iTime),rand(iTime+rand(iTime)))*.001;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.,2.*sin(iTime*.2),-3.)+1e-5;\n    ro.xz*=rot(iTime*.1);\n    vec3 rt = vec3(0.)+1e-5;\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z,vec3(0.,-1.,0.)));\n    vec3 y = normalize(cross(z,x));\n    \n    vec3 rd = mat3(x,y,z)*normalize(vec3(uv,1.-log(1.5+length(uv))));\n    vec3 rp = ro;\n    \n    vec3 light = vec3(0.,01.,-0.);\n    float dd = 0.;\n    for(float i=0.;i<=128.;i++){\n        vec2 d = sdf(rp);\n        dd +=d.x;\n        rp +=d.x*rd;\n        if(dd>50.) break;\n        if(d.x<.0001){\n            vec3 n = norm(rp,.001);\n            vec3 n2 = norm(rp,.01);\n            float dif = max(0.,dot(normalize(light-rp),n));\n            float spc = pow(max(0.,dot(rd,reflect(normalize(light-rp),n))),12.);;\n            col = min(1.,dif)*vec3(.1)+spc*H(spc)+smoothstep(0.3,.6,pow(length(n-n2),.125));\n            break;\n        }\n    }\n    vec3 pcol = vec3(0.);\n    // Yolo\n    for(int x=-1;x<=1;x++){\n      for(int y=-1;y<=1;y++){ \n      if(y==x && x==0) continue;\n      pcol += texelFetch(iChannel0,ivec2(fragCoord.xy)+ivec2(x,y),0).rgb;\n    }}\n    pcol /=8.;\n    col  = mix(col,pcol*.9,.86)*sqrt(col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}