{
    "Shader": {
        "info": {
            "date": "1709245177",
            "description": "First ever pathtracer!! it looks so real and ghfhdfbgjdfj\n\nthanks to https://youtu.be/Qz0KTGYJtUk",
            "flags": 48,
            "hasliked": 0,
            "id": "M3fXzH",
            "likes": 0,
            "name": "Ã¦ro's pathtracer",
            "published": 3,
            "tags": [
                "pathtracer",
                "sampling"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 84
        },
        "renderpass": [
            {
                "code": "// Renderer in Buffer B\n// Data storage in Buffer A\n// Scene data in Common\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor.xyz = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n\n    /*\n    vec3 dither = vec3(sqrt(texelFetch(iChannel1, ivec2(fragCoord) % ivec2(iChannelResolution[1].xy + 0.5), 0).xyz));\n    fragColor.x = float(fragColor.x > dither.x);\n    fragColor.y = float(fragColor.y > dither.x);\n    fragColor.z = float(fragColor.z > dither.x);\n    */\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float EPSILON = .0001;\nconst float PI = asin(1.0) * 2.0;\nconst float SQRT2 = sqrt(2.0);\n\nvoid rotate(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sdBox( vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n\nfloat sceneSDF(vec3 p, out int ID) {\n    // floor\n    ID = 3;\n    float dist = p.y;\n    // back\n    if (dist > EPSILON) ID = 1;\n    dist = min(dist, p.z + 2.0);\n    dist = min(dist, -p.z + 6.0);\n    \n    // left\n    if (dist > EPSILON) ID = 2;\n    dist = min(dist, p.x + 2.0);    \n    \n    // right\n    if (dist > EPSILON) ID = 4;\n    dist = min(dist, -p.x + 2.0);\n    \n    // ceiling\n    dist = max(dist, p.y - 4.0);\n    \n    \n    // sphere\n    if (dist > EPSILON) ID = 5;\n    dist = min(dist, length(p - vec3(0,1,0)) - 1.0);\n\n    if (dist > EPSILON) ID = 0;\n    return dist;\n}\n\nstruct Material {\n    vec3 albedo; // base color\n    float roughness; // how much the surface diffuses light\n    vec3 emission; // how much light is emmited\n};\n\nMaterial getMaterial(vec3 p, vec3 n, int ID) {\n    switch (ID) {\n        case 1: return Material(\n            vec3(0.9),\n            1.0,\n            vec3(0.0));\n        case 2: return Material(\n            vec3(1.0,0.2,0.2),\n            1.0,\n            vec3(0.0));\n        case 3: return Material(\n            vec3(0.2,1.0,0.2),\n            1.0,\n            vec3(0.0));\n        case 4: return Material(\n            vec3(0.2,0.2,1.0),\n            1.0,\n            vec3(0.0));\n        case 5: return Material(\n            vec3(1.0),\n            1.0,\n            vec3(0.0));\n        \n            \n    }\n}\n\n// idk how this one works, i stole it from iq >:)\nvec3 calcNormal(in vec3 pos) {\n    int a = 0;\n    vec2 e = vec2(1.0,-1.0)*EPSILON;\n    return normalize( e.xyy*sceneSDF(pos + e.xyy, a) + \n\t\t\t\t\t  e.yyx*sceneSDF(pos + e.yyx, a) + \n\t\t\t\t\t  e.yxy*sceneSDF(pos + e.yxy, a) + \n\t\t\t\t\t  e.xxx*sceneSDF(pos + e.xxx, a));\n}\n\n// hash functions\nuvec2 murmurHash21(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 2 outputs, 1 input\nvec2 hash21(float src) {\n    uvec2 h = murmurHash21(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n//------------------------------------------------------------------------------\n\nuint murmurHash13(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 1 output, 3 inputs\nfloat hash13(vec3 src) {\n    uint h = murmurHash13(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n//------------------------------------------------------------------------------\n\nuvec3 murmurHash31(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 1 input\nvec3 hash31(float src) {\n    uvec3 h = murmurHash31(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n//------------------------------------------------------------------------------\n\nuvec3 murmurHash33(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 3 inputs\nvec3 hash33(vec3 src) {\n    uvec3 h = murmurHash33(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n//------------------------------------------------------------------------------\n\nuvec3 murmurHash32(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 2 inputs\nvec3 hash32(vec2 src) {\n    uvec3 h = murmurHash32(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// camera controller\n\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nconst int KEY_SPACE = 32;\n\nint isPressed(int key) {\n    return int(texelFetch(iChannel1, ivec2(key, 0), 0).x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    \n    // ignore unused pixels\n    if (fragCoord.y > 1.0) return;\n    \n    // get data from previous frame\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    /* POSITION */\n    if (fragCoord.x == 0.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0.0,2.0,4.0,0);\n        \n        vec3 rotation = texelFetch(iChannel0, ivec2(1,0), 0).xyz;\n        vec3 velocity = vec3(\n            sin(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - cos(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D)),\n            sin(PI * rotation.x) * float(isPressed(KEY_S) - isPressed(KEY_W)),\n            cos(PI * rotation.z) * float(isPressed(KEY_S) - isPressed(KEY_W)) * cos(PI * rotation.x) - sin(PI * -rotation.z) * float(isPressed(KEY_A) - isPressed(KEY_D))\n        ) * 4.0;\n\n        fragColor.xyz += velocity * iTimeDelta;\n        return;\n    }\n    \n    /* DIRECTION */\n    if (fragCoord.x == 1.5) {\n    \n        // initial data\n        if (iFrame == 0) fragColor = vec4(0,0,0,0);\n        \n        // arrow keys\n        fragColor.x -= float(isPressed(KEY_UP) - isPressed(KEY_DOWN)) * iTimeDelta;\n        fragColor.z -= float(isPressed(KEY_RIGHT) - isPressed(KEY_LEFT)) * iTimeDelta;\n        \n        // clamp\n        if (fragColor.x > 0.5) fragColor.x = 0.5;\n        if (fragColor.x < -0.5) fragColor.x = -0.5;\n        \n        return;\n    }\n    \n    /* RENDER TIME */\n    if (fragCoord.x == 2.5) {\n        fragColor.x += 1.0;\n        \n        // initial data\n        if (bool(isPressed(32)) || iFrame == 0) fragColor = vec4(0);\n        \n        return;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define REFLECTIONS 16\n#define MAX_STEPS 4096\n#define MAX_DIST 100.0\n\n#define SUBPIXEL\n#define NOISE_STYLE 0\n\nvec3 sunDir = normalize(vec3(1,2,1));\n\nvec3 render(in vec2 fragCoord) {\n    // centered screen coords\n    vec2 q = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y\n        #ifdef SUBPIXEL\n        + (hash21(iTime) - 0.5) / iResolution.y\n        #endif\n        ;\n    \n    // camera to world transform\n    vec3 cameraPos = texelFetch(iChannel1, ivec2(0,0), 0).xyz;\n    vec3 rayDirection = normalize(vec3(q, 0.) - vec3(0,0,0.8));\n    vec3 camDir = texelFetch(iChannel1, ivec2(1,0), 0).xyz;\n    rotate(rayDirection.yz, camDir.x * PI);\n    rotate(rayDirection.xz, camDir.z * PI);\n    vec3 rayPos = cameraPos;\n    \n    int steps, ID = -1;\n    float dist, rayLength = 0.0;\n    \n    bool quick = texelFetch(iChannel1, ivec2(2,0), 0).x < 1.0;\n\n    /* MAIN RAYTRACING */\n    vec3 rayColor = vec3(1.0);\n    vec3 incomingLight = vec3(0.0);\n    \n    for (int reflectionDepth = 0; reflectionDepth < REFLECTIONS + 1; reflectionDepth++) {\n        ID = -1;\n        dist, rayLength = 0.0;\n        \n        // raymarch from camera\n        while (true) {\n            dist = sceneSDF(rayPos + rayDirection * rayLength, ID);\n            rayLength += dist * 0.5;\n            if (dist < EPSILON) break;\n            if (steps > MAX_STEPS) {ID = -1; break;} // max steps\n            if (rayLength > MAX_DIST) {ID = 0; break;} // render distance\n            steps++;\n        }\n        rayPos += rayDirection * (rayLength - EPSILON * 2.0);\n        \n\n                \n        // if hit\n        if (dist < EPSILON) {\n            // get the surface normal\n            vec3 normal = calcNormal(rayPos);\n            Material mat = getMaterial(rayPos, normal, ID);\n            incomingLight += mat.emission * rayColor;\n            rayColor *= mat.albedo;\n            \n            if (length(rayColor) == 0.0) break;\n            \n            // fast render preview\n            if (quick) {\n                incomingLight = rayColor * (1.0 - sqrt(float(steps) / float(MAX_STEPS)) * 0.5) * (dot(normal, vec3(0,1,0)) * 0.25 + 0.75) + incomingLight;\n                break;\n            }\n            \n            // random vector (cube)\n            #if NOISE_STYLE == 0\n            vec3 diffuse = hash33(vec3(iTime, q));\n            vec3 mystery = hash33(vec3(iTime * 528.7 - 438961.7, q));\n            #else\n            vec3 diffuse = hash31(iTime);\n            vec3 mystery = hash31(iTime * 528.7 - 438961.7);\n            #endif\n\n            // ???? wtf is this dark magic\n            vec3 theta = 2.0 * PI * diffuse;\n            vec3 rho = sqrt(-2.0 * log(mystery));\n            diffuse = rho * cos(theta);\n\n            // reverse ray if towards surface (don't use with cosine rays)\n            //diffuse *= sign(dot(normal, diffuse));\n            \n            // cosine weighted rays (also evil magic)\n            diffuse = normalize(diffuse + normal);\n            \n            // mix between specular and diffuse directions\n            rayDirection = normalize(mix(diffuse, reflect(rayDirection, normal), 1.0 - mat.roughness));\n            \n            // DEBUG: show diffuse normal\n            //incomingLight = rayDirection * 0.5 + 0.5; break;\n        }\n        \n        // sky\n        else if (ID == 0) {\n            vec3 skyColor = vec3(2.5);\n            //vec3 skyColor = texture(iChannel2, rayDirection).xyz * 2.0;\n            incomingLight += rayColor * skyColor;\n            break;\n        } \n        // max steps\n        else if (ID == -1) {\n            vec3 errorColor = vec3(1,0,1) * mod(fragCoord.x + fragCoord.y, 2.0) * 0.0;\n            incomingLight += rayColor * errorColor;\n            break;\n        }\n    }\n\n\n    // DEBUG: show steps (brighter = more steps)\n    //incomingLight = vec3(sqrt(float(steps) / (float(MAX_STEPS))));\n\n    return incomingLight;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (abs(fragCoord.x - iResolution.x * 0.5) > iResolution.y * 0.5) return;\n\n    //float pixelID = (fragCoord.x - 0.5) * iResolution.y + fragCoord.y - 0.5;\n    float renderFrame = texelFetch(iChannel1, ivec2(2,0), 0).x;\n    \n    if (renderFrame == 0.0) {\n        fragColor = vec4(render(fragCoord), 1);\n        return;\n    }\n    \n    // get previous frame\n    if (renderFrame == 1.0) {\n        fragColor = vec4(0.0);\n    } else {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    }\n    float weight = 1.0 / (renderFrame + 1.0);\n    \n    fragColor = fragColor * (1.0 - weight) + vec4(render(fragCoord), 1) * weight;\n    \n    // mix\n    //fragColor = (fragColor * (renderFrame - 1.0) + vec4(render(fragCoord), 1)) / (renderFrame + 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}