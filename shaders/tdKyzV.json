{
    "Shader": {
        "info": {
            "date": "1603286938",
            "description": "basic construction-v2",
            "flags": 8,
            "hasliked": 0,
            "id": "tdKyzV",
            "likes": 5,
            "name": "basic construction-v2",
            "published": 3,
            "tags": [
                "basicconstructionv2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\n// INFINITE BUILDINGS\nfloat obj_infiniteBuildings(in vec3 p)\n{\n\tvec3 c = vec3(12,10,20); // how close cubes are to each other\n\tvec3 f = vec3(8,10,7);\n\t\n\tvec3 q = p;\n\t//repetition in x and z direction\n\tq.x = mod(p.x,c.x)-0.5*c.x;\n\tq.x = mod(q.x,f.x)-0.5*f.x;\n\t\n\tq.z = mod(p.z,c.z)-0.5*c.z;\n\tq.z = mod(q.z,f.z)-0.5*f.z;\n\t\n\t//building height\n\tvec3 b1 = vec3(1.0, 3.0, 1.0);\n    vec3 b2 = vec3(2.0, 3.0, 2.0);\n    \n\tfloat s1= sdBox(q-vec3(0.0,5.0,0.0),b1);\t\n    float s2= sdBox(q,b2);\t\n    return unionSDF(s1, s2);\n    //return s2;\n}\n\n\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n   \n\t\n\tfloat planeDist1 = p.y+0.0;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n   \n    res =opU3(res, vec3(planeDist1,-1.0,2.0)); \n    res =opU3(res, vec3(planeDist2,27,MATERIAL_NO)); \n    \n    p.y=p.y-1.0;\n    \n    \n   \n   float ib1= obj_infiniteBuildings( p);\n   res =opU3(res, vec3(ib1,-1.0,5.0));\n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO));\n    //return (dist, id_color, id_material)\n    return res;\n}\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    return diffuse + specular;\n}\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n       \n        \n        if(dO>MAX_DIST )\n        {\t\n            mObj.dist = -1.0;\n    \t\tmObj.id_color = -1.0;\n    \t\tmObj.marchCount=marchCount;\n    \t\tmObj.id_material=-1.0;\n            break;\n            //return -1.0;\n        }\n        \n        if (abs(dS.x)<MIN_DIST) \n        { break;  }\n            \n            \n        dO += dS.x;\n        marchCount++;\n        \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 64.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    \n    \n    vec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n       \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n\n//Brick Color\nvec3 color_brick(in vec3 p)\n{\t\n\t//const vec3 brickColor = vec3(0.2,0.2,0.2);\n    vec3 brickColor = getColor(2);\n    \n        \n\tconst vec3 mortarColor = vec3(0.8);\n    \n    \n\tconst vec2 brickSize = vec2(0.3,0.15)*2.0;\n\tconst vec2 brickPct = vec2(0.9,0.85);\n\t\n\tvec2 position = (p.zy)/brickSize;\n\tvec2 useBrick = vec2(0);\n\t\n\tif(fract(position.y*0.5) > 0.5)\n\t\tposition.x += 0.5;\n\t\t\n\tposition = fract(position);\n\tuseBrick = step(position, brickPct);\n\t\n\tvec3 color =  mix(mortarColor, brickColor, useBrick.x*useBrick.y);\n\t\n\t\n\tposition = p.xy/brickSize;\n\tif(fract(position.y*0.5) > 0.5)\n\t\tposition.x += 0.5;\n\tposition = fract(position);\n\tuseBrick = step(position, brickPct);\n\tcolor = (color+mix(mortarColor, brickColor, useBrick.x*useBrick.y))/2.0;\n\t\n\treturn color;\n\t\n}\n\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\tif(id_material== 2.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n\tif(id_material== 3.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }\n    \n    \n    \n    if (id_material==5.0)\n    { \n     return color_brick(p);\n    }\n    \n   \n    \n     \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n//-------------------------------------------\n//referencia https://www.shadertoy.com/view/WsKyWW\nvec3 rotate(vec3 p, float angle, vec3 axis)\n{\n\tvec3 a = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat r = 1.0 - c;\n\tmat3 m = mat3(\n\t\ta.x * a.x * r + c,\n\t\ta.y * a.x * r + a.z * s,\n\t\ta.z * a.x * r - a.y * s,\n\t\ta.x * a.y * r - a.z * s,\n\t\ta.y * a.y * r + c,\n\t\ta.z * a.y * r + a.x * s,\n\t\ta.x * a.z * r + a.y * s,\n\t\ta.y * a.z * r - a.x * s,\n\t\ta.z * a.z * r + c\n\t);\n\treturn m * p;\n}\n\n\n///-----------------------------------\nmat3 camera(vec3 ro, vec3 ta) {\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(0.0, 1.0, 0.0);\n    vec3 cu = cross(cw, cp);\n    vec3 cv = cross(cu, cw);\n    return mat3(cu, cv, cw);\n}\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\tmObj.blnShadow=false;\n        \n \tlight_pos1= vec3(10.0, 6.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    ////referencia https://www.shadertoy.com/view/3dKyR1\n    // Camera\n    \n    float screenZ = 1.0;\n    vec3 rd = normalize(vec3(uv, screenZ));\n    vec3 ta = vec3(-1.5, 0.5, -1.);\n    vec3 ro = vec3(5.0, 2.5, 2.);\n    \n    float TimeMod=60.0;\n    \n   if (mod(iTime, TimeMod) < 10.)\n    {\n        ro *= mod(iTime, TimeMod);\n        \n    }\n    else if (mod(iTime, TimeMod) < 20.) \n    {\n        ro = vec3(-1., 1.5, 1.5);\n        \n        ro.x *= 0.5*mod(iTime, TimeMod)+2.0;\n        ro.y *= 0.5*mod(iTime, TimeMod)+2.0 ;\n        \n    }\n    else if (mod(iTime, TimeMod) < 30.) \n    {\n        ro = vec3(0.1, 5., 0.5);\n        ro.x += 2.;\n        ro.zy *= mod(iTime, TimeMod) - 18.;\n        ro.xy /= 2.;\n    }\n    else if (mod(iTime, TimeMod) < 40.) \n    {\n        ro = vec3(2., 0.5, 2.5);\n        ro.xy *= mod(iTime, TimeMod) - 30.;\n    }\n    else if (mod(iTime, TimeMod) < 50.) \n    {\n\n        ro = vec3(-5., 0.5, 2.5);\n    \n        ro.z *= mod(iTime, TimeMod) - 1.;\n    }\n    else if (mod(iTime, TimeMod) < 60.) \n    {\n  \n        ro = rotate(vec3(6., 6.5, 2.5), radians(iTime), vec3(1.0,0.0,0.0)) ;\n        ro.z *= mod(iTime, TimeMod) - 40.;\n    }\n    \n    \n    \n    \n    rd = camera(ro, ta) * normalize(vec3(uv, screenZ));\n\n\tlight_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n//referencia \n//https://www.shadertoy.com/view/llBSzK\n//https://www.shadertoy.com/view/tdVyRK....Creado por jt en 2020-10-21\n//modificado por Jorge2017a1\n\n\nconst float trt = 1.0594630943592952645;\nconst float bpm = 140.0;\n\n\n\n#define N 96\n\nconst int base[N] = int[N](\n    7, 7, 0, 0, 3, 5,\n    7, 7, 0, 0, 3, 5,\n    7, 7, 0, 0, 3, 5,\n    7, 7, 0, 0, 3, 5,\n    2, 2,-5,-5,-2, 0,\n    2, 2,-5,-5,-2, 0,\n    2, 2,-5,-5,-2, 0,\n    2, 2,-5,-5,-2, 0,\n    5, 5,-2,-2, 2, 3,\n    5, 5,-2,-2, 2, 3,\n    5, 5,-2,-2, 2, 3,\n    5, 5,-2,-2, 3, 2,\n    0, 0,-7,-7,-4,-2,\n    0, 0,-7,-7,-4,-2,\n    0, 0,-7,-7,-4,-2,\n    0, 0,-7,-7,-4,-2\n);\n\nconst int voice[N] = int[N](\n    7, 7, 7, 7, 7, 7,\n    0, 0, 0, 0, 0, 0,\n    3, 5, 7, 7, 7, 7,\n    0, 0, 0, 0, 3, 5,\n    2, 2, 2, 2, 2, 2,\n    2, 2, 2, 2, 2, 2,\n    2, 2, 2, 2, 2, 2,\n    2, 2, 2, 2, 2, 2,\n    5, 5, 5, 5, 5, 5,\n   -2,-2,-2,-2, 3, 2,\n    5, 5, 5, 5, 5, 5,\n   -2,-2,-2,-2, 3, 2,\n    0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0\n);\n\n\n\nfloat note2freq(float note) {\n    return 440.0 * pow(trt,note);\n}\n\nfloat sawWave(float time, float freq, float amp) {\n \t   return mod(time,1.0/freq)*freq*amp;\n}\n\n\n\n\n#define pi 3.1415926\n\nfloat wave(float t)\n{\n    return sin(2.0 * pi * t);\n}\n\nfloat saw(float t)\n{\n    return 2.0 * fract(t) - 1.0;\n}\n\n#define S 8.0\n\nivec2 note(float time)\n{\n    int n = int(floor(time * S)); // keep in sync with local\n    return ivec2(base[n % N] - 24, voice[n % N]);\n}\n\nfloat local(float time)\n{\n    return fract(time * S) / S; // keep in sync with note\n}\n\nfloat sound1(float freq, float time)\n{\n    float t = freq * time;\n    float h = clamp(1.0 - 4.0 * time, 0.0, 1.0); // linear\n    return mix(wave(t), saw(t), h) * h; // plucked string like sound\n}\n\nfloat sound2(float freq, float time)\n{\n    float t = freq * time;\n    float h = 0.5;\n    return mix(wave(t), saw(t), h);\n}\n\n\nvec2 bassSynth(float time, float tempo)\n{\t\n    \n     ivec2 n = note(time);\n    float t = local(time);\n    vec2 f = 0.5 * 440.0 * exp2(vec2(n) / 12.0);\n    //vec2 f = 0.5 *  exp2(vec2(n) / 12.0);\n    \n    float s1= sound2(f.y, t)*2.0;\n   \n    return vec2(s1+  sawWave(time, note2freq( float( n.x)), exp(-0.0*mod(tempo, 0.5))));\n\t\n    \n    \n}\n\n\nvec2 leadSynth(float time, float tempo) \n{\n    ivec2 n = note(time);\n    float t = local(time);\n    vec2 f = 0.5 * 440.0 * exp2(vec2(n) / 12.0);\n    //vec2 f = 0.5 *  exp2(vec2(n) / 12.0);\n\n    \n    float ampMask=1.0;\n    \n\t\n    return vec2(sawWave(time, note2freq(float(n.y)+0.01), ampMask * exp(-1.0*mod(tempo, 0.5))),\n                sawWave(time, note2freq(float( n.y)-0.01), ampMask * exp(-1.0*mod(tempo, 0.5))));\n\t\n    \n    \n}\n\nvec2 kickSynth(float time, float tempo) {\n    const float dist = 3.0;\n    tempo = mod(tempo,1.0); \n    return vec2(clamp(sin(pow((tempo+0.2)*0.0001,-0.5))*exp(-3.0*tempo),-(1.0/dist),(1.0/dist)) * dist);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 clapSynth(float time, float tempo) {\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number;\n    float b = floor(q/8.0);//bar number\n    float qb = mod(q,8.0); //quaver in bar;\n    float ampMask = float((qb >= 2.0 && qb < 4.0) || (qb >= 6.0 && qb < 7.0)\n                         || (b == 3.0 && (qb == 1.0 || qb >= 5.0))); \n    tempo = mod(tempo*4.0 ,2.0);\n    return vec2(rand(vec2(time+1.2,tempo+6.1)) * ampMask * exp(-1.5*tempo),\n                rand(vec2(time+2.1,tempo+1.6)) * ampMask * exp(-1.5*tempo));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float t = time;\n    float tempo = t * (bpm/60.0);\n    \n    vec2 bass = bassSynth(t,tempo) * 0.30; //mixing here\n    vec2 lead = leadSynth(t*1.005,tempo) * 0.333;\n    vec2 kick = kickSynth(t,tempo) * 0.333;\n    vec2 clap = clapSynth(t,tempo) * 0.333;\n    \n    vec2 synths = bass + lead; //sidechain\n    //vec2 synths =  lead; //sidechain\n    \n    synths *= min(mod(tempo,1.0)+0.4,1.0);\n    \n    return synths + kick + clap;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}