{
    "Shader": {
        "info": {
            "date": "1553466901",
            "description": "Generating a double spiral of hexagonally symmetric 'circles' (like a Doyle spiral, but not quite as I'm not sure the circles are exactly circular).\n\nMouse changes spiral angle.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws2XWz",
            "likes": 23,
            "name": "Complex Atanh Circle Spiral?",
            "published": 3,
            "tags": [
                "circle",
                "complex",
                "log",
                "atanh"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 768
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Complex atanh generating a spiral of hexagonally touching circles.\n// Almost.\n////////////////////////////////////////////////////////////////////////////////\n\nfloat A = 3.0, B = 2.0; // Rotation angle is atan(B,A)\n//float K = 1.0;          // Extra subdivisions, should be >= 1.0\nfloat scale = 1.5;\nfloat PI = 3.14159;\n\n// Complex functions\nvec2 cmul(vec2 z, vec2 w) {\n  return mat2(z,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  float t = dot(z,z);\n  return vec2(z.x,-z.y)/t;\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 clog(vec2 z) {\n  float r = length(z);\n  return vec2(log(r),atan(z.y,z.x));\n}\n\n// Inverse hyperbolic tangent \nvec2 catanh(vec2 z) {\n  return 0.5*clog(cdiv(vec2(1,0)+z,vec2(1,0)-z));\n}\n\n// Iq's hsv function, but just for hue.\nvec3 h2rgb(float h ) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float X = sqrt(3.0);\n  vec2 z = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  z *= scale;\n\n  if (iMouse.x > 0.0) {\n    // Get angle from mouse position\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    m *= 20.0;\n    A = floor(m.x), B = floor(m.y);\n  }\n  vec2 rot = vec2(X*A,B);\n  //z = clog(z);\n  z = 2.0*catanh(z)/PI;\n  float eps = length(rot)*fwidth(z.x);\n  z = cmul(rot,z);\n\n  z.y /= X;\n  z += iTime*vec2(0,1);\n  vec2 index = round(z);\n  z -= index;\n  z.y *= X;\n\n  if (mod(index.x + index.y, 2.0) == 0.0) z.x = -z.x;\n\n  float hx = index.x/(B==0.0 ? 1.0 : B); // Color for column\n  float hy = index.y/(A==0.0 ? 1.0 : A); // Color for row\n  vec3 col = 0.2+0.8*h2rgb(0.5*hy);\n  vec2 P = vec2(1,X);\n  float r = min(distance(-0.5*P,z),distance(0.5*P,z));\n  col = mix(col,vec3(0),smoothstep(-eps,eps,r-0.95));\n  col = mix(col,vec3(1,0,0),smoothstep(-eps,+eps,r-1.0));\n  z = 0.5*P-abs(z);\n  col *= smoothstep(-eps,eps,min(z.x,z.y)-0.05);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}