{
    "Shader": {
        "info": {
            "date": "1700706918",
            "description": "Conversions between control points.\n\nMitchell-Netravali in blue.\nBezier in red.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlycD3",
            "likes": 4,
            "name": "Mitchell-Netravali <-> Bezier",
            "published": 3,
            "tags": [
                "bezier",
                "mitchell"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// It is moderately well-known that there is a simple way to convert\n// the control points  between Bezier and Catmull-Rom cubic splines:\n//     Bezier3   (P0,P1,P2,P3,t)=CatmullRom(P3-6*(P1-P0),P0,P3,P0+6*(P3-P2),t)\n//     CatmullRom(P0,P1,P2,P3,t)=Bezier3   (P1,P1+(P2-P0)/6,P2-(P3-P1)/6,P2,t)\n// Here, this result is extended to arbitrary (provided (2*B-3)*(B+2*C)!=0)\n// Mitchell-Netravali splines.\n// Only uniform (equally-spaced) splines are considered. Extension to non-uniform\n// splines is left as an exercise to the reader.\n\n// NOTE: the example is 1-dimensional, and x-coordinate corresponds to the\n// interpolation parameter. As such, x-position of control points is somewhat arbitrary,\n// and can be misleading. The positions are:\n//     Control point    Mitchell-Netravali     Bezier\n//     P0                -1                     0\n//     P1                 0                     1/3\n//     P2                 1                     2/3\n//     P3                 2                     1\n\n// See also:\n//     https://splines.readthedocs.io/en/latest/euclidean/\n//         https://splines.readthedocs.io/en/latest/euclidean/catmull-rom-uniform.html#Using-B%C3%A9zier-Segments\n//         https://splines.readthedocs.io/en/latest/euclidean/bezier-de-casteljau.html#Cubic-B%C3%A9zier-to-Hermite-Segments\n//     https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf\n//     https://0xef.wordpress.com/2013/01/12/third-order-texture-filtering-using-linear-interpolation/\n\n#define Point float // 1D example, but can be any dimension.\n\nPoint spline3_Mitchell_Netravali(float B,float C,Point P[4],float t)\n{\n    // See https://www.shadertoy.com/view/Dlc3Rn\n    vec4 w=mat4( // NOTE: column-major.\n\t\tB/6.0      , 1.0-B/3.0   , B/6.0           , 0.0    ,\n\t\t-C-0.5*B   , 0.0         , C+0.5*B         , 0.0    ,\n\t\t2.0*C+0.5*B, C+2.0*B-3.0 , -2.0*C-2.5*B+3.0, -C     ,\n\t\t-C-B/6.0   , -C-1.5*B+2.0, C+1.5*B-2.0     , C+B/6.0)*vec4(1.0,t,t*t,t*t*t);\n    return\n        w[0]*P[0]+\n        w[1]*P[1]+\n        w[2]*P[2]+\n        w[3]*P[3];\n}\n\nPoint spline3_Bezier(Point P[4],float t)\n{\n    // See https://en.wikipedia.org/wiki/De_Casteljau%27s_algorithm\n    Point Q0=mix(P[0],P[1],t);\n    Point Q1=mix(P[1],P[2],t);\n    Point Q2=mix(P[2],P[3],t);\n    Point R0=mix(Q0,Q1,t);\n    Point R1=mix(Q1,Q2,t);\n    return mix(R0,R1,t);\n}\n\n// Bezier -> Catmull-Rom conversion.\n// NOTE: same as b2mn(0.0,0.5,P,Q).\nvoid b2cr(float B,float C,in Point P[4],out Point Q[4])\n{\n    Q[0]=P[3]-6.0*(P[1]-P[0]);\n    Q[1]=P[0];\n    Q[2]=P[3];\n    Q[3]=P[0]+6.0*(P[3]-P[2]);\n}\n\n// Catmull-Rom -> Bezier conversion.\n// NOTE: same as mn2b(0.0,0.5,P,Q).\nvoid cr2b(float B,float C,in Point P[4],out Point Q[4])\n{\n    Q[0]=P[1];\n    Q[1]=P[1]+(P[2]-P[0])/6.0;\n    Q[2]=P[2]-(P[3]-P[1])/6.0;\n    Q[3]=P[2];\n}\n\n// Bezier -> Mitchell-Netravali conversion.\n// NOTE: suffers from division by zero, when B=1.5, or C=-B/2,\n// both of which are uncommon.\nvoid b2mn(float B,float C,in Point P[4],out Point Q[4])\n{\n    float D=1.0/((2.0*B-3.0)*(B+2.0*C));\n    Q[0]=D*(B*(2.0*C*P[3]-3.0*P[2]-12.0*P[1])-6.0*C*P[3]+B*B*(P[2]+P[1])+18.0*P[1]+(B*(2.0*C+12.0)-18.0)*P[0]);\n    Q[1]=D*(B*(2.0*C*P[3]-3.0*P[1])+B*B*(P[2]+P[1])+(2.0*B*C-6.0*C)*P[0]);\n    Q[2]=D*(B*(2.0*C*P[3]-3.0*P[2])-6.0*C*P[3]+B*B*(P[2]+P[1])+2.0*B*C*P[0]);\n    Q[3]=D*(B*(2.0*C*P[3]+12.0*P[3]-12.0*P[2]-3.0*P[1])-18.0*P[3]+B*B*(P[2]+P[1])+18.0*P[2]+(2.0*B*C-6.0*C)*P[0]);\n}\n\n// Mitchell-Netravali -> Bezier conversion.\nvoid mn2b(float B,float C,in Point P[4],out Point Q[4])\n{\n    Q[0]=(B/6.0)*P[0]+(1.0-B/3.0)*P[1]+(B/6.0)*P[2];\n    Q[1]=(B/6.0)*P[0]+(1.0-B/3.0)*P[1]+(B/6.0)*P[2]+((B+2.0*C)/6.0)*(P[2]-P[0]);\n    Q[2]=(B/6.0)*P[1]+(1.0-B/3.0)*P[2]+(B/6.0)*P[3]-((B+2.0*C)/6.0)*(P[3]-P[1]);\n    Q[3]=(B/6.0)*P[1]+(1.0-B/3.0)*P[2]+(B/6.0)*P[3];\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float t=0.1*iTime;\n    float B=0.5+0.5*sin(0.1*t),C=0.5+0.5*cos(0.17*t);\n    Point P[4],Q[4],R[4];\n    P[0]=Point(0.25*sin(1.3*t+0.0));\n    P[1]=Point(0.25*sin(1.1*t+1.0));\n    P[2]=Point(0.25*sin(1.7*t+2.0));\n    P[3]=Point(0.25*sin(1.5*t+3.0));\n    // Convert to Bezier.\n    mn2b(B,C,P,Q);\n    /// And back.\n    b2mn(B,C,Q,R);\n    vec3 col=vec3(0.125);\n    // Show control points.\n    col+=vec3(0.25,0.5,0.25)*smoothstep(0.03,0.02,length(xy-vec2(-1.5,P[0])));\n    col+=vec3(0.25,0.5,0.25)*smoothstep(0.03,0.02,length(xy-vec2(-0.5,P[1])));\n    col+=vec3(0.25,0.5,0.25)*smoothstep(0.03,0.02,length(xy-vec2(+0.5,P[2])));\n    col+=vec3(0.25,0.5,0.25)*smoothstep(0.03,0.02,length(xy-vec2(+1.5,P[3])));\n    col+=vec3(0.5,0.25,0.25)*smoothstep(0.03,0.02,length(xy-vec2(-0.5,Q[0])));\n    col+=vec3(0.5,0.25,0.25)*smoothstep(0.03,0.02,length(xy-vec2(-1.0/6.0,Q[1])));\n    col+=vec3(0.5,0.25,0.25)*smoothstep(0.03,0.02,length(xy-vec2(+1.0/6.0,Q[2])));\n    col+=vec3(0.5,0.25,0.25)*smoothstep(0.03,0.02,length(xy-vec2(+0.5,Q[3])));\n    col+=vec3(0.25,0.25,0.5)*smoothstep(0.03,0.02,length(xy-vec2(-1.5,R[0])));\n    col+=vec3(0.25,0.25,0.5)*smoothstep(0.03,0.02,length(xy-vec2(-0.5,R[1])));\n    col+=vec3(0.25,0.25,0.5)*smoothstep(0.03,0.02,length(xy-vec2(+0.5,R[2])));\n    col+=vec3(0.25,0.25,0.5)*smoothstep(0.03,0.02,length(xy-vec2(+1.5,R[3])));\n    // Show splines.\n    float c=0.25+0.5*step(abs(xy.x),0.5);\n    float d=xy.y-spline3_Mitchell_Netravali(B,C,P,xy.x+0.5);\n    col+=c*vec3(0.25,0.5,0.25)*exp(-1e4*d*d);\n    d=xy.y-spline3_Bezier(Q,xy.x+0.5);\n    col+=c*vec3(0.5,0.25,0.25)*exp(-1e4*d*d);\n    d=xy.y-spline3_Mitchell_Netravali(B,C,R,xy.x+0.5);\n    col+=c*vec3(0.25,0.25,0.5)*exp(-1e4*d*d);\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}