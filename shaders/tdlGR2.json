{
    "Shader": {
        "info": {
            "date": "1546993787",
            "description": "Looking at [url]https://www.shadertoy.com/view/3sfGRj[/url] a little more, it's turned into something like tomkh's [url]https://www.shadertoy.com/view/llG3zy[/url]. Find closest point, then distance to all borders.",
            "flags": 16,
            "hasliked": 0,
            "id": "tdlGR2",
            "likes": 13,
            "name": "Voronoi Cell Boundaries 2",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "cell",
                "boundaries"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 915
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Created 2019 by Matthew Arcus\n//\n// Simple 2D Voronoi. Examine the 16 cells nearest to the nearest grid point.\n//\n// For drawing the lines, take the closest point and find minimum distance to\n// the bisector of that point and all the other grid points examined (we store\n// the point from the first pass in an array). This seems to give a correct\n// distance function to the cell borders. An approximate but satisfactory\n// solution is to just keep the closest N points.\n//\n// Mouse-x: zoom\n// Mouse-y: line width\n// 'g': show grid\n// 'i': show isolines\n// 'm': monochrome\n// 'p': show cell points\n// 'q': show glitches\n// 'v': show voronoi cells\n// 'w': wrap grid\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Determine how far outside the cell the cell point may go.\n// Too far and we get glitches where the computed nearest cell\n// boundary is not in fact the closest (see with 'q' key).\nconst float K = 0.6;  // Point offset limit. 0.5 = the cell itself\nconst float gridsize = 3.0;\n\nbool alert = false;\n\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\n// Wang Hash, used to seed RNG\nuint ihash(uint a) {\n  a = (a ^ 61U) ^ (a >> 16);\n  a *= 9U;\n  a = a ^ (a >> 4);\n  a = a * 0x27d4eb2dU;\n  a = a ^ (a >> 15);\n  return a;\n}\n\n// Note that we convert from float to integer to unsigned\nuint ihash(ivec2 p) {\n  uint i = uint(p.x), j = uint(p.y);\n  return ihash((i << 16) ^ j);\n}\n\n// xorshift from George Marsaglia, http://www.jstatsoft.org/v08/i14/paper,\n// via https://www.shadertoy.com/view/tsf3Dn from zeh.\nuint xorshift(uint value) {\n  // Xorshift*32\n  value ^= value << 13;\n  value ^= value >> 17;\n  value ^= value << 5;\n  return value;\n}\n\nuint seed = 1U;\nuint rng() {\n  //seed = lcg(seed);\n  seed = xorshift(seed);\n  return seed;\n}\n\n// Uniform random float in [0,1)\nfloat rand() {\n  return float(rng())/pow(2.0,32.0);\n}\n\nconst int CHAR_G = 71;\nconst int CHAR_I = 73;\nconst int CHAR_M = 77;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\nfloat bisectordistance(vec2 pos, vec2 a, vec2 b) {\n  vec2 centre = 0.5*(a+b);\n  return dot(pos-centre,normalize(a-b));\n}\n\n// Returns point for particular cell in the grid\n// Also seeds RNG for the cell.\nvec2 getcellpoint(vec2 grid, float i, float j) {\n  float speed = 0.5;\n  float t = speed*iTime;\n  vec2 cell = grid + vec2(i,j);\n  vec2 mcell = cell;\n  if (keypress(CHAR_W)) mcell = mod(mcell,2.0*gridsize);\n  seed = ihash(ivec2(mcell)); // Seed RNG for this cell\n  vec2 p = vec2(rand(),rand());\n  vec2 offset = K+t*p;\n  offset = mod(offset,4.0*K);\n  offset = min(offset,4.0*K-offset);\n  offset -= K;\n  return cell+vec2(0.5)+offset;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float scale = 1.0;\n  float lwidth = 0.05;\n  \n  if (iMouse.x != 0.0) {\n    scale *= 2.0*iMouse.x/iResolution.x;\n    lwidth *= 2.0*iMouse.y/iResolution.y;\n  }\n  vec2 pos  = (2.0*fragCoord - iResolution.xy)/ iResolution.y;\n  pos *= scale;\n  pos *= gridsize;\n  vec2 grid = floor(pos); // Nearest grid point\n  const int NPOINTS = 9;\n  vec4 points[NPOINTS];   // vec4(p.x,p.y,distance,color);\n  // And iterate through 16 cells around the grid point.\n  int pointindex = 0;\n  int closest = 0;\n  float mindist = 1e8;\n  for (float i = -1.0; i <= 1.0; i++) {\n    for (float j = -1.0; j <= 1.0; j++) {\n      vec2 cellpoint = getcellpoint(grid,i,j);\n      float d = distance(cellpoint,pos);\n      if (d < mindist) {\n        closest = pointindex;\n        mindist = d;\n      }\n      points[pointindex++] = vec4(cellpoint,d,rand()); // RNG seed set by getcellpoint()\n    }\n  }\n  vec3 basecolor = vec3(0.8);\n  if (!keypress(CHAR_V)) {\n    // Look through previously calculated points and find minimum distance\n    // from point to cell wall.\n    float mindist = 1e8;\n    for (int i = 0; i < NPOINTS; i++) {\n      if (i != closest) {\n        mindist = min(mindist,bisectordistance(pos,points[closest].xy,points[i].xy));\n      }\n    }\n    if (keypress(CHAR_M)) {\n      basecolor = vec3(points[closest].w);\n    } else {\n      basecolor = hsv2rgb(points[closest].w,1.0,1.0);\n    }\n    if (!keypress(CHAR_I)) basecolor *= 2.0*(mindist+0.1)*(0.5*sin(80.0*mindist)+0.5);\n    basecolor = mix(vec3(0.05),basecolor,smoothstep(lwidth,1.25*lwidth,mindist));\n\n    // Check things: for the next layer of cells out, check that the bisector\n    // distance isn't closer that the one we have calculated above.\n    if (keypress(CHAR_Q)) {\n      for (float i = -3.0; i <= 2.0; i++) {\n        for (float j = -3.0; j <= 2.0; j++) {\n          if (i >= -2.0 && i <= 1.0 && j >= -2.0 && j <= 1.0) continue;\n          vec2 cellpoint = getcellpoint(grid,i,j);\n          if (distance(cellpoint,points[closest].xy) > 1e-2) {\n            float d = bisectordistance(pos,points[closest].xy,cellpoint);\n            assert(d >= mindist);\n          }\n        }\n      }\n    }\n  }\n  \n  if (keypress(CHAR_G)) {\n    // Draw grid\n    vec2 gridpos = pos-floor(pos); // Distance to cell wall\n    gridpos = min(gridpos,1.0-gridpos);\n    basecolor *= 0.5+0.5*smoothstep(0.04,0.05,min(gridpos.x,gridpos.y));\n  }\n  if (keypress(CHAR_P)) {\n    basecolor *= 0.25+0.75*smoothstep(1.25*lwidth,1.5*lwidth,\n                                      distance(pos,points[closest].xy));\n  }\n  basecolor = sqrt(basecolor);\n  if (alert) basecolor.x = 1.0;\n  fragColor = vec4(basecolor,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}