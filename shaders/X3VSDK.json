{
    "Shader": {
        "info": {
            "date": "1720506928",
            "description": "originals sources  https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/ldBXDD",
            "flags": 1,
            "hasliked": 0,
            "id": "X3VSDK",
            "likes": 2,
            "name": "ripple cosmos",
            "published": 3,
            "tags": [
                "cosmos",
                "ripple"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 103
        },
        "renderpass": [
            {
                "code": "\n#define iterations 13\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    return mix(hash(i), hash(i + 1.0), smoothstep(0.,1.,f));\n}\n\nfloat flattened_sin(float x, float k) {\n    return atan(sin(x) * k) / atan(k);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05), -sin(iTime*0.05) ,cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\n\n\n\n\nuniform vec2 mouse;\n\n\nint fISequencer(void){\n\n\nfloat nTime =.1*iTime;\nvec4 VMouse =vec4((mouse -0.5) *2.0, 0, 0);\n\tint iCycle =100, iTimePerSQ =5;\n\tint iSQ =int(floor(mod(nTime, float(iCycle)) /float(iTimePerSQ)));\n\treturn iSQ;\n}\n\nfloat fNGoverner(void){\n\nfloat nTime =.1*iTime;\nvec4 VMouse =vec4((mouse -0.5) *2.0, 0, 0);\n\tint iCycle =120;\n\tfloat nGV =mod(nTime, float(iCycle)) /float(iCycle);\n\treturn nGV;\n}\n\nint iCounter;\nint fICounter(void){\n\treturn iCounter++;\n}\n\nvec4 fVLissajous(float nLJ){\n\tvec4 VCycle =vec4(19,17,13,11);\n\tVCycle *=VCycle.x +VCycle.y +VCycle.z +VCycle.w;\n\tVCycle *=acos(-1.0) *2.0;\n\tvec4 VLS =sin(VCycle *nLJ);\n\treturn VLS;\n}\n\nfloat fNRandom(float nIN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(VSeed.x *nIN +VSeed.y));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec2 V2IN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed.xy, V2IN) +VSeed.z));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec3 V3IN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed.xyz, V3IN) +VSeed.w));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec4 VIN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed, VIN)));\n\treturn nRandom;\n}\n\nfloat fNFractal(vec2 V2N, vec2 V2C){\n\tint iT;\n\tfor(int I =0; I <100; I++){\n\t\tif(V2N.x >10.0)\tbreak;\n\t\tV2N =vec2(V2N.x *V2N.x -V2N.y *V2N.y +V2C.x, 2.0 *V2N.x *V2N.y +V2C.y);\n\t\tiT++;\n\t}\n\treturn float(iT);\n}\n\nvec4 fVColor(vec4 VP){\n\tvec4 VC =vec4(1);\n\n\n\n\t{\n\t\tfloat nC;\n\t\tint iSQ =fISequencer();\n\n          // \tuncomment to mix them\t\n\t\t\n\t//\tnC +=sin(VP.x) *sin(VP.y) *sin(VP.w);\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\n\t\t\n\n\t\tnC =sin(nC *16.0);\n\t\tVC.rgb =vec3(1) *step(nC, 0.0);\n\t}\n\treturn VC;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    float t = -iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) +0.12)) * 1.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    uv*=-ma;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n       \n\tvec4 VColor =vec4(1), VP =vec4(uv, 0,iTime);\n\n\tVColor =fVColor(VP);\n\n\tfloat time=iTime*speed+.25;\n\n vec2 uv2 = fragCoord/iResolution.xy;\n    \n    // Generate noise for horizontal displacement\n    float noiseValue = noise(uv.y * 120.0 + iTime * 0.5) * 2.0 - 1.0;\n    \n     // Parameters for the sine wave\n    float frequency = 25.0;  // Number of waves vertically\n    float amplitude = 12.2; // Intensity of the displacement\n    float speed2 = 1.0;      // Speed of the animation\n    float displacementAmount = 0.005;\n    float flatness = 5.0;  // Controls how square-like the wave is\n\nvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t uv2 = (cPos/cLength)*cos(cLength*12.0+iTime*4.0) * 0.1;\n\t  uv2*=-ma;\n\n  \n\n    float x = uv2.x * frequency * 6.28318 + iTime * speed2;\n\n    float displacement = flattened_sin(x, flatness) * amplitude;\n       float y = uv2.y * frequency * 6.28318 + iTime * speed2;\n\n    float displacement2 = flattened_sin(y, flatness) * amplitude;\n\n\n  \n    // Apply horizontal displacement\n    vec2 displacedUV = vec2(uv2.x + displacement*displacementAmount, uv2.y);\n    \n       vec2 displacedUV2 = vec2(uv2.y + displacement2*displacementAmount, uv2.x);\n    \n\n\tvec3 from=vec3(1.,.5,0.5);\ndir.xy+=displacedUV2+displacedUV;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}