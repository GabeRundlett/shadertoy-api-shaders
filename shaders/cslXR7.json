{
    "Shader": {
        "info": {
            "date": "1668972731",
            "description": "Sliced Gyroid Fly Though 2 - Dream Flight & Neon Lights. ",
            "flags": 0,
            "hasliked": 0,
            "id": "cslXR7",
            "likes": 36,
            "name": "Neon Sliced Gyroid",
            "published": 3,
            "tags": [
                "raymarching",
                "gyroid",
                "sliced"
            ],
            "usePreview": 1,
            "username": "byt3_m3chanic",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Neon Sliced Gyroid - Dream Flight & Neon Lights\n    11/20/22 | @byt3_m3chanic\n\n    Somewhat abstract and organic field sliced into ribbons based\n    on @smjtyazdi formula listed below. Added an etra iteration to \n    clear up some backside artifacts in the sdf. \n\n    my original shader which has a polar warp and pretty forward\n    camera track > https://www.shadertoy.com/view/dssXzN both \n    about the same visually - but I like the cameara motion in this\n    version. Using a few sin/cos time based formulas to simulate \n    some wander/drag though the gyroid space.\n    \n    @smjtyazdi https://twitter.com/smjtyazdi/status/1484828390104485896\n\n*/\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n#define PI    3.14159265358\n#define PI2   6.28318530718\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 a){ return fract(sin(dot(a,vec2(22.34,35.34)))*483434.);}\n\nfloat box(vec2 p, vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\n//globals\nmat2 trot;\nfloat glo1=0.,slo1=0.,glo2=0.,slo2=0.;\nconst float ofx = 1.125;\n\nfloat gyroid(vec3 p, float s, float t, float b) {\n    p *= s;\n    return abs(dot(sin(p*ofx),cos(p.zxy))-b)/(s*ofx)-t;\n}\n\nvec2 map(vec3 p) {\n    vec2 res =vec2(1e5,1.);\n\n    p.xy *= trot;\n    p.yz += vec2(-1.25, -T);\n    \n    float m1 = 4.85+4.75*sin(T*.15);\n    float m2 = 5.85+5.75*cos(T*.35);\n    \n    float d = .65, mf = 1e5;\n    for(float j=-1.;j<2.;j++){\n        vec3 nf =p;\n        nf.z=round(nf.z/d+j)*d;\n \n        float idx = mod(nf.z+5.,10.);\n        float idy = mod(nf.z,12.);\n\n        float fd = gyroid(nf, .75, .0, .525);\n        fd=abs(fd)-.045;\n        nf.z=clamp(p.z,nf.z-d/3.5,nf.z+d/3.5);\n        fd=length(vec2(max(.0,fd), nf.z-p.z));\n\n        if(idx<m1+.15&&idx>m1) slo1+=.002/(.015+fd*fd);\n        if(idy<m2+.15&&idy>m2) slo2+=.002/(.015+fd*fd);\n   \n        mf=min(mf,fd);\n    }\n    if(mf<res.x) res=vec2(mf,3.);\n    return res;\n}\n\nvec3 normal(vec3 p, float t){\n    vec2 e=vec2(t*1e-4,0.);\n    float d = map(p).x;\n    vec3 n = d-vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\nvec3 topLayer(in vec3 C, in vec2 uv) {\n    float ft = floor(T);\n    uv*=rot(.05);\n \n    float d = box(uv-vec2(.075,.0),vec2(.85,.4))-.01;\n\n    vec2 pv = uv*2.;\n    \n    float md = floor((pv.y+.05)/.1);\n    float mf = mix(hash21(vec2(ft)+md),hash21(vec2(ft+1.)+md),pow(smoothstep(0.,1.,fract(T)), 22.))*.22;\n    \n    pv.y=mod(pv.y+.05,.1)-.05;\n    float ff=.075;\n    float e = box(pv+vec2(1.75-ff,.0),vec2(.15+ff,.025))-.01;\n    float ex = box(pv+vec2(1.89-mf,.0),vec2(mf,.015))-.005;\n    \n    float px = 4./R.x;\n    float ei = smoothstep(px,-px,abs(e)-.002);\n          ex = smoothstep(px,-px,ex);\n          e  = smoothstep(px,-px,e);\n          \n    px = 2./R.x;\n    float c = smoothstep(px,-px,d);\n          d = smoothstep(px,-px,abs(abs(d)-.005)-.00125);\n    \n    uv.x-=T*.05;\n    \n    vec2 f=fract(uv*25.*rot(-.78))-.5;\n    \n    C=mix(C,C.xxx*.15,1.-c);\n    if(mod(f.x,2.)<1.) C=mix(C,C+vec3(.015),1.-c);\n    C=mix(C,vec3(1),d);\n    if(abs(md)<6.5) C=mix(C,vec3(.001),e);\n    if(abs(md)<6.5) C=mix(C,mix(vec3(.0,.09,.3),vec3(.52,.09,.58),clamp((uv.y+.25)*2.,0.,1.)),ex);\n    if(abs(md)<6.5) C=mix(C,vec3(1),ei);\n\n    return C;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    //precal\n    trot = rot(T*.072);\n    \n    //set uv\n\tvec2 uv = (2.*F.xy - R.xy)/max(R.x,R.y);\n    vec2 vv=uv;\n\n\tvec3 C = vec3(0);\n    vec3 ro = vec3(0,0,.15),rd = normalize(vec3(uv, -1.0));\n\n    const float dof = .001;\n    const float dofdist = 1./15.;\n    vec2 off=vec2(0);\n    \n    //mouse\n    float x = M.xy == vec2(0) || M.z < 0. ? 0. : -(M.y/R.y * 1. - .5) * PI;\n    float y = M.xy == vec2(0) || M.z < 0. ? 0. : -(M.x/R.x * 1. - .5) * PI;\n\n    mat2 rx = rot(x),ry = rot(M.z < 1.?y+1.725*sin(PI*sin(T*.07)):y);\n\n    ro.yz *= rx;ro.xz *= ry;\n    rd.yz *= rx;rd.xz *= ry;\n   \n    //loop\n    float fa=0.;\n    for(int k=0;k<2;k++){\n    \n        vec3 p = ro;\n        float d = 0., m = 0.;\n        vec3 RC = vec3(0);\n        \n        for(int i=0;i<172;i++){\n            \n            //modified jitter/dof \n            //inspiration @Nusan https://www.shadertoy.com/view/3sXyRN\n            if(mod(float(i),2.)<1.){\n                off= texture(iChannel1,F.xy/1024.).rg*2.-1.;\n                vec2 focus = off*dof;\n                ro.xy+= focus*(d)*.01;\n                rd.xy+= focus*(d*d)*dofdist*.01;\n            }\n\n            p=ro+d*rd;\n            vec2 ray = map(p);\n            m=ray.y;\n            d+= i<82?ray.x*.4:ray.x*.8;\n            if(ray.x<d*1e-3||d>40.)break;\n        }\n\n        if(k==0) {fa=d;glo1=slo1;glo2=slo2;}\n        \n        if(d<40.) {\n            vec3 n = normal(p,d);\n            vec3 l = normalize(vec3(-2,15,-10)-p);\n            float spec = .45 * pow(max(dot(normalize(p-ro),reflect(l,n)),0.),24.);\n            RC += vec3(.0) +spec;  \n    \n            ro = p+n*.001;\n            rd = reflect(rd,n);\n        }\n\n        if(k>0) RC *=.3;\n        C += RC;\n\n    }\n    \n    float sp = .2+.2*sin(uv.x*4.2+T*.2);\n    vec3 fog = mix(vec3(.20,.52,.85),vec3(.69,.16,.77),clamp((uv.y+.5-sp),0.,1.));\n\n    C = mix(C,vec3(glo1*.125,glo1*.55,glo1),clamp(glo1,.0,.6));\n    C = mix(C,vec3(glo2,glo2*.125,glo2*.75),clamp(glo2,.0,.8));\n    C = mix(C,fog, 1.-exp(-.00015*fa*fa*fa));\n    \n    C = topLayer(C, uv);\n    C = clamp(C,vec3(0),vec3(1));\n    \n    //gamma + out\n    C = pow(C,vec3(.4545));\n\tfragColor = vec4(C,1.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}