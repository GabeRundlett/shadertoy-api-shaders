{
    "Shader": {
        "info": {
            "date": "1565292601",
            "description": "A simple stylized 2D diver",
            "flags": 0,
            "hasliked": 0,
            "id": "3t2SzW",
            "likes": 39,
            "name": "Diving",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "diver"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1342
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2019 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\nfloat sdStick( in vec2 p, in vec2 a, in vec2 b, in float ra, in float rb )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - (ra+(rb-ra)*h*h*(3.0-2.0*h));\n}\n\nfloat sdCircle( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c)-r;\n}\n\nfloat sdBox( vec2 p, in vec2 c, vec2 b )\n{\n    vec2 d = abs(p-c) - b;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//------------------------------------------------------------\n\nvoid legAnim( out vec2 ankle, out vec2 knee, out vec2 toes, in vec2 heap, in float t )\n{\n    float an1 =     - 0.3 + 0.3*cos(t-0.0);\n    float an2 = an1 + 0.6 + 0.6*sin(t-0.1);\n    float an3 = an2 - 0.4 - 0.6*cos(t-0.5);\n\n    knee  = heap  + 0.32*vec2(cos(an1),sin(an1)); \n    ankle = knee  + 0.30*vec2(cos(an2),sin(an2)); \n    toes  = ankle + 0.27*vec2(cos(an3),sin(an3)); \n}\n\nvec3 diver( in vec3 col, in vec2 p, in float px, float t)\n{\n    float vt = t - 0.5*cos(t);\n\n    //========================================\n    // animate\n    //========================================\n\n    // dive\n    {\n    //p += vec2(0.5,0.1)*vec2(cos(vt),sin(vt)) - vec2(-0.3,0.3);\n    p += vec2(-0.5,0.1)*vec2(cos(vt),sin(vt)) - vec2(0.0,0.3);\n    }\n    \n    // jump\n    {\n    float s = 1.6*exp(-10.0*t);\n    float an = s -0.25;\n    float co = cos(an), si = sin(an); \n    p = vec2(0.4,1.5) + mat2(co,-si,si,co)*(p-vec2(0.4,1.5));\n    }\n\n    // body\n    vec2 head = vec2(0.00, 0.10);\n    vec2 heap = vec2(0.56, 0.00);\n    vec2 shou = vec2(0.18,-0.02);\n    vec2 kneeL, ankleL, toesL;\n    vec2 kneeR, ankleR, toesR;\n    legAnim( ankleL, kneeL, toesL, heap, 10.0*vt );\n    legAnim( ankleR, kneeR, toesR, heap, 10.0*vt+3.14 );\n\n#if 0\n    vec2 elbowL = vec2( 0.05,-0.25);\n    vec2 handL  = vec2(-0.16,-0.30);\n    vec2 elbowR = vec2( 0.25,-0.25);\n    vec2 handR  = vec2( 0.14,-0.40);\n#else\n    vec2 elbowL = vec2( 0.40,-0.12);\n    vec2 handL  = vec2( 0.68,-0.18);\n    vec2 elbowR = vec2( 0.40,-0.11);\n    vec2 handR  = vec2( 0.68,-0.14);\n#endif    \n\n    \n    //========================================\n    // draw\n    //========================================\n    \n    vec2 q = p; // unbent coords\n    \n    // bend coords\n    {\n    float an = 0.25*(p.x - 0.5);\n    float co = cos(an), si = sin(an); \n    p = mat2(co,-si,si,co)*p;\n    }\n    \n    //-------------------\n    \n    {\n    // arm R\n    float d  = sdStick( p, shou,   elbowR, 0.06, 0.04 );\n    d = min(d, sdStick( p, elbowR, handR,  0.04, 0.02 ) );\n    // leg R\n    d = min(d, sdStick( p, heap, kneeR, 0.09, 0.07 ) );\n    d = min(d, sdStick( p, kneeR, ankleR, 0.07, 0.04 ) );\n    d = min(d, sdStick( p, ankleR, toesR, 0.04, 0.06 ) );\n    \n    col = mix( col, vec3(0.01,0.03,0.06), 1.0-smoothstep(-px,px,d) );\n    }\n    \n    //-------------------\n    {\n    // head\n    float d  = sdCircle( p, head, 0.11 );\n    // tank\n    d = min(d, sdBox(    q, vec2(0.48,0.18), vec2( 0.24,0.08) ) );\n    d = min(d, sdCircle( q, vec2(0.24,0.18), 0.08 ) );\n    // body\n    d = min(d, sdStick( p, vec2(0.2,0.0), vec2(0.56,0.0), 0.11, 0.091 ) );\n    // leg L\n    d = min(d, sdStick( p, heap,   kneeL,  0.09, 0.07 ) );\n    d = min(d, sdStick( p, kneeL,  ankleL, 0.07, 0.04 ) );\n    d = min(d, sdStick( p, ankleL, toesL,  0.04, 0.06 ) );\n    // arm L\n    d = min(d, sdStick( p, shou,   elbowL, 0.06, 0.04 ) );\n    d = min(d, sdStick( p, elbowL, handL,  0.04, 0.02 ) );\n \n    col = mix( col, vec3(0.005,0.015,0.03), 1.0-smoothstep(-px,px,d) );\n    }\n    \n    // bubbles\n    for( int i=0; i<10; i++ )\n    {\n        vec2 p0 = head + vec2(-0.15,0.0);\n        vec2 p1 = head + vec2( 0.4 + 0.20*sin(21.39*float(i)),0.7);\n        float h = fract( 0.85 + 0.5*(t+ 0.5*float(i)*0.12331) );\n        vec2 c = mix( p0, p1, h );\n        float d = sdCircle( p, c, 0.04*sqrt(h) );\n        \n        col += (1.0-0.8*sqrt(abs(d)/0.04)) * 0.35 * 4.0*h*(1.0-h)*(1.0-smoothstep(-px,px,d));\n    }\n    \n    return col;\n}\n\nvec3 seafloor( in vec3 col, in vec2 p, in float px, in float t )\n{\n    for( int i=0; i<4; i++ )\n    {\n        float h = float(i)/3.0;\n        float of = -0.4 - 0.4*h + (0.5+0.5*h)*0.1*sin((4.0-h*2.0)*p.x + 30.0*h - 2.5*t*(1.0+2.0*h));\n        float dof = 4.0 + 8.0*abs(float(i-2));\n        col = mix( col, vec3(0.05,0.3,0.5)*(1.0-0.9*h), 1.0-smoothstep(-px*dof, px*dof, p.y-of) );\n    }\n    return col;\n}\n\nvec3 background( in vec2 p )\n{\n    return vec3(0.05,0.3,0.5)*0.9 + p.y*0.15;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n    \n    float ani = iTime*0.2;\n\n    // draw\n    vec3 col = background( p );\n         col = seafloor( col, p, px, ani );\n         col = diver( col, p, px, ani );\n\n    // vignetting\n\tcol *= 1.0 - 0.1*dot(p,p);\n    \n    // gamma\n    col = sqrt(col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}