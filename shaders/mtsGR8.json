{
    "Shader": {
        "info": {
            "date": "1671309021",
            "description": "CC0: Seven Segment Display\nWanted to create a seven segment display to show digits\nI have seen versions of this on shadertoy before but gave it a go myself\nas a fun little challenge.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mtsGR8",
            "likes": 31,
            "name": "My SSD",
            "published": 3,
            "tags": [
                "2d",
                "ssd"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "// CC0: Seven Segment Display\n//  Wanted to create a seven segment display to show digits\n//  I have seen versions of this on shadertoy before but gave it a go myself\n//  as a fun little challenge.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat mod1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize, size) - halfsize;\n  return c;\n}\n\nfloat dsegmentx(vec2 p, vec2 dim) {\n  p.x = abs(p.x);\n  float o = 0.5*max(dim.x-dim.y, 0.0);\n  if (p.x < o) {\n    return abs(p.y) - dim.y;\n  }\n  return length(p-vec2(o, 0.0))-dim.y;\n}\n\nvec3 digit(vec3 col, vec2 p, float aa, float n) {\n  const int[16] digits = int[16](\n    0x7D // 0\n  , 0x50 // 1\n  , 0x4F // 2\n  , 0x57 // 3\n  , 0x72 // 4\n  , 0x37 // 5\n  , 0x3F // 2\n  , 0x51 // 7\n  , 0x7F // 8\n  , 0x77 // 9\n  , 0x7B // A\n  , 0x3E // B\n  , 0x2D // C\n  , 0x5E // D\n  , 0x2F // E\n  , 0x2B // F\n  ); \n  const vec2 dim = vec2(0.75, 0.075);\n  const float eps = 0.01;\n  vec2 ap = abs(p);\n  if (ap.x > (0.5+dim.y+eps)) return col;\n  if (ap.y > (1.0+dim.y+eps)) return col;\n  float m = mod(floor(n), 16.0);\n  int digit = digits[int(m)];\n\n  vec2 cp = (p-0.5);\n  vec2 cn = round(cp);\n\n  vec2 p0 = p;\n  p0.y -= 0.5;\n  p0.y = p0.y-0.5;\n  float n0 = round(p0.y);\n  p0.y -= n0;\n  float d0 = dsegmentx(p0, dim);\n\n  vec2 p1 = p;\n  vec2 n1 = sign(p1); \n  p1 = abs(p1);\n  p1 -= 0.5;\n  p1 = p1.yx;\n  float d1 = dsegmentx(p1, dim);\n  \n  vec2 p2 = p;\n  p2.y = abs(p.y);\n  p2.y -= 0.5;\n  p2 = abs(p2);\n  float d2 = dot(normalize(vec2(1.0, -1.0)), p2);\n\n  float d = d0;\n  d = min(d, d1);\n  const vec3 acol = vec3(1.0, 0., 0.25);\n  const vec3 icol = acol*0.1;\n\n  float sx = 0.5*(n1.x+1.0) + (n1.y+1.0);\n  float sy = -n0;\n  float s  = d2 > 0.0 ? (3.0+sx) : sy;\n  // Praying bit shift operations aren't TOO slow\n  vec3 scol = ((digit & (1 << int(s))) == 0) ? icol : acol;  \n\n  col = mix(col, scol, smoothstep(aa, -aa, d));\n  return col;\n}\nvec3 digit(vec3 col, vec2 p, float n) {\n  float aa = fwidth(p.y);\n  return digit(col, p, aa, n);\n}\n\nvec3 effect(vec2 p, vec2 cq) {\n  vec2 pp = p;\n  pp *= 0.33*(-length(cq)+5.0);\n  pp += 0.1*TIME;\n  pp *= 10.0;\n\n  float nx = mod1(pp.x, 1.5*3.0);\n  float hx = hash(nx+123.4);\n\n  pp.y += 8.0*(hx-0.25)*TIME;\n  float ny = mod1(pp.y, 3.0);  \n  float hy = hash(ny+456.7);\n  float n = TIME*(hx+hy)+16.0*fract(hx+hy);\n\n  vec3 col = vec3(0.025)*vec3(1.0, 0.0, 0.5);\n  col = digit(col, pp, n+1234.5);\n  col *= smoothstep(1.5, 0.5, length(cq));\n  col = sqrt(col.yxz);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, pp);  \n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}