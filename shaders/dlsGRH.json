{
    "Shader": {
        "info": {
            "date": "1672153921",
            "description": "See the \"Image\" tab for controls. Background: [url]https://viralzone.expasy.org/8577[/url].",
            "flags": 48,
            "hasliked": 0,
            "id": "dlsGRH",
            "likes": 10,
            "name": "protocapsid",
            "published": 3,
            "tags": [
                "raymarch",
                "model",
                "tiling",
                "icosahedron",
                "application",
                "construction",
                "virus",
                "schwarz",
                "wythoff",
                "capsid",
                "casparklug",
                "hkcage",
                "chimerax"
            ],
            "usePreview": 1,
            "username": "remaindeer",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "// MIT License\n// \n// Copyright (c) 2022, Daniel Antonio NegrÃ³n (@remaindeer)\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// [abstract]\n// Capsids house viral genetic material. Understanding their structure is\n// essential for developing antivirals, gene therapies, and vaccines. This is an\n// app for modeling based on Caspar-Klug theory and lattice geometry. The goal is\n// reimplementation of the democapsid app (https://github.com/dnanto/democapsid)\n// and to show that it's a cool effect for demoscene.\n\n// [acknowledgements]\n// @iq, @FabriceNeyret2, @inspirnathan, @mla\n\n// [controls]\n// * ctrl+1-3: icosahedron, facet, or plane view (default: ctrl+1)\n// * (shift+)1-7: tilings and their duals (default: 1)\n// * (shift+)h/k: decrement/increment plane step parameters (>= 0) (default: h=2, k=1)\n// * (shift+)t/f/z: decrement/increment edge thickness, fiber length, camera zoom\n// * l/p/c/r/s: outline, h/k-walk arrows, centroid point, random Wythoff, spin (default: off/off/on/off/off)\n\nfloat scene(vec3 p) {\n    // dynamic scene parameters\n    vec4 para_1 = texelFetch(iChannel1, IDX_PARA_1, 0);\n    vec4 para_2 = texelFetch(iChannel1, IDX_PARA_2, 0);\n    vec4 mode_1 = texelFetch(iChannel1, IDX_MODE_1, 0);\n    vec4 mode_2 = texelFetch(iChannel1, IDX_MODE_2, 0);\n    bool is_lines = mode_1.g == MODE_LINES;\n    bool is_paths = mode_1.b == MODE_PATHS;\n    bool is_point = mode_2.r == MODE_POINT;\n    bool[5] config = bool[5] (true, true, is_lines, is_paths, is_point);\n    //// Caspar-Klug\n    float h = para_1.r;\n    float k = para_1.g;\n    //// Wythoff\n    vec4 tiling = TILINGS[int(para_1.b)];\n    vec2 g = tiling.rg;                 // generator point\n    float m = tiling.b;                 // mirror toggles\n    float w = tiling.w;                 // wall toggles\n    float t = THICK_STEP * para_1.a;    // thickness\n    float f = FIBER_STEP * para_2.r;    // fiber length\n    if (mode_1.a == MODE_RANDO) {\n        ////// pick point within fundamental triangle\n        ////// https://mathworld.wolfram.com/TrianglePointPicking.html\n        ////// http://extremelearning.com.au/evenly-distributing-points-in-a-triangle/\n        float a1 = 0.5 + sin(1.25 * iTime / 1.25) / 2.0;\n        float a2 = 0.5 + cos(2.00 * iTime / 1.75) / 2.0;\n        ////// generator point\n        g = (((a1 + a2) < 1.0) ? (a1 * ft.zw + a2 * ft.xy) : ((1.0 - a1) * ft.zw + (1.0 - a2) * ft.xy));\n        ////// mirrors\n        m = mod(round((iTime - 2.0 / 1.5) / 2.0), 10.0);\n        ////// rotate\n    }\n    //// spin\n    p = mode_2.g == MODE_RSPIN ? rotmat3(vec3(iTime * 0.25)) * p : p;\n        \n    // distance\n    float d = 1.0;\n    //// scale to 1.0 / (h/k-facet side length)\n    float s = 1.0 / length(mat2(1.5, cos30, 0.0, 2.0 * cos30) * vec2(h, k));\n    /****/ if (mode_1.r == MODE_ICOSA) { \n        //// find nearest centroid facet\n        int argkey = 0;\n        float argval = distance(p, centroids[0]);\n        for (int i = 1; i < transforms.length(); i++) {\n            float result = distance(p, centroids[i]);\n            if (result < argval) {\n                argkey = i;\n                argval = result;\n            }\n        }\n        //// now calc\n        vec4 q = transforms[argkey] * vec4(p - centroids[argkey], 1);\n        config[0] = false;\n        d = sdCasparKlugFacet(q.xyz / s, h, k, g, m, w, t, config) * s;\n        vec3 vertex = normalize(vec3(1, 0, PHI));\n        vec3[4] dir = vec3[4] (vec3( 1, 0,  1), vec3(-1, 0,  1), vec3( 1, 0, -1), vec3(-1, 0, -1));\n        // vertex fibers\n        for (int i = 0; f > 0.0 && i < dir.length(); i++) {\n            vec3 u, v;\n            u = ICO_CIRCUMRADIUS * (vertex * dir[i]).xyz; v = u + f * u;\n            d = opUnion(d, sdCapsule(p.xyz, u, v, t / 4.0));\n            d = opUnion(d, sdSphere(p.xyz - v, t / 2.0));\n            u = ICO_CIRCUMRADIUS * (vertex * dir[i]).yzx, v = u + f * u;\n            d = opUnion(d, sdCapsule(p.xyz, u, v, t / 4.0));\n            d = opUnion(d, sdSphere(p.xyz - v, t / 2.0));\n            u = ICO_CIRCUMRADIUS * (vertex * dir[i]).zxy, v = u + f * u;\n            d = opUnion(d, sdCapsule(p.xyz, u, v, t / 4.0));\n            d = opUnion(d, sdSphere(p.xyz - v, t / 2.0));\n        }\n    } else if (mode_1.r == MODE_FACET) {\n        d = sdCasparKlugFacet(p.xyz / s, h, k, g, m, w, t, config) * s;\n    } else if (mode_1.r == MODE_PLANE) {\n        config[1] = false;\n        d = sdCasparKlugFacet(p.xyz / s, h, k, g, m, w, t, config) * s;\n    }\n        \n    return d;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float depth = MIN_DIST;\n    float d;\n\n    for (int i = 0; i < MAX_ITER; i++) {\n        vec3 p = ro + depth * rd;\n        d = scene(p);\n        depth += d;\n        if (d < PRECISION || depth > MAX_DIST) {\n            break;\n        }\n    }\n\n    d = depth;\n\n    return d;\n}\n\nvec3 normal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n        e.xyy * scene(p + e.xyy) +\n        e.yyx * scene(p + e.yyx) +\n        e.yxy * scene(p + e.yxy) +\n        e.xxx * scene(p + e.xxx)\n    );\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    if (m == vec2(0.0)) m = vec2(0.5);\n\n    vec3 col = vec3(0);\n    vec3 lp = vec3(0);\n    vec4 para_2 = texelFetch(iChannel1, IDX_PARA_2, 0);\n    vec3 ro = vec3(0, 0, para_2.g * ZOOM_STEP);\n\n    float camRadius = 1.0;\n    ro.yz = ro.yz * camRadius * rotmat2(mix(-PI / 2.0, PI / 2.0, m.y));\n    ro.xz = ro.xz * rotmat2(mix(-PI, PI, m.x)) + vec2(lp.x, lp.z);\n\n    vec3 rd = camera(ro, lp) * normalize(vec3(p, -1));\n\n    float d = march(ro, rd);\n\n    if (d > MAX_DIST) {\n        col = COLOR_BACKGROUND;\n    } else {\n        vec3 p = ro + rd * d;\n        vec3 norm = normal(p);\n\n        vec3 lightPos = vec3(0, 2, 2);\n        vec3 lightDir = normalize(lightPos - p) * 0.65;\n\n        float diff = clamp(dot(norm, lightDir), 0.0, 1.0) * 0.5 + 0.5;\n\n        vec3 rnd = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n        col = vec3(diff) + rnd;    \n    }\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// MIT License\n// \n// Copyright (c) 2022, Daniel Antonio NegrÃ³n (@remaindeer)\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\n// keyboard\n///// https://www.shadertoy.com/view/llySRh\n#define keyClick(ascii)   ( texelFetch(iChannel0, ivec2(ascii, 1), 0).x > 0. )\n#define keyDown(ascii)    ( texelFetch(iChannel0, ivec2(ascii, 0), 0).x > 0. )\n\n// buffer data/indexing\n#define IDX_PARA_1 ivec2(0, 0)\n#define IDX_PARA_2 ivec2(0, 1)\n#define IDX_MODE_1 ivec2(0, 2)  \n#define IDX_MODE_2 ivec2(0, 3)  \n#define MODE_ICOSA 1.0\n#define MODE_FACET 2.0\n#define MODE_PLANE 3.0\n#define MODE_LINES 4.0\n#define MODE_PATHS 5.0\n#define MODE_RANDO 6.0\n#define MODE_POINT 7.0\n#define MODE_RSPIN 8.0\n#define THICK_STEP 0.005\n#define FIBER_STEP 0.05\n#define ZOOM_STEP  0.25\n\n// ray marching\n#define MAX_ITER 255\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n#define PRECISION 0.001\n#define EPSILON 0.0005\n#define COLOR_BACKGROUND vec3(0, 0, 0)\n#define COLOR_AMBIENT vec3(0.42, 0.20, 0.1);\n\n// math\n//// constants\n#define PI 3.1415926535897932384626433\n#define PHI (1.0 + sqrt(5.0)) / 2.0\n#define ICO_CIRCUMRADIUS sin((2.0 * PI) / 5.0)\n#define cos30 cos(radians(30.0))\n#define sqrt3 sqrt(3.0)\n//// fundamental triangle\n#define ft vec4(0, cos30, 0.5, cos30)\n//// special generator points\n#define gq vec2(0.25, cos30)\n#define gc (ft.xy + cos30 * ft.zw) / (0.5 + cos30 + 1.0)\n#define gx vec2((3.0 - sqrt3) / 4.0, tan(radians(60.0)) * ((3.0 - sqrt3) / 4.0))\n//// Wythoff construction ===========================================================\nconst vec4[14] TILINGS = vec4[14] (\n    ////// Platonic and Archimedean tilings -----------------------------------------\n    vec4(ft.zw, 1.0, 0.0), // Hexagonal tiling (hextille)\n    vec4(ft.xy, 2.0, 0.0), // Trihexagonal tiling (hexadeltille)\n    vec4(gq   , 3.0, 0.0), // Truncated hexagonal tiling (truncated hextille)\n    vec4(ft.xx, 4.0, 0.0), // Triangular tiling (deltille) \n    vec4(gx   , 5.0, 0.0), // Rhombitrihexagonal tiling (rhombihexadeltille)\n    vec4(gc   , 7.0, 0.0), // Truncated trihexagonal tiling (truncated hexadeltille)\n    vec4(ft.xx, 8.0, 0.0), // Snub trihexagonal tiling (snub hextille)\n    ////// Dual Laves tilings -------------------------------------------------------\n    vec4(ft.xx, 4.0, 0.0), // Triangular tiling (deltille) \n    vec4(ft.xx, 0.0, 2.0), // Rhombille tiling (rhombille)\n    vec4(ft.xx, 0.0, 3.0), // Triakis triangular tiling (kisdeltille)\n    vec4(ft.zw, 1.0, 0.0), // Hexagonal tiling (hextille)\n    vec4(ft.xx, 0.0, 5.0), // Deltoidal trihexagonal tiling (tetrille)\n    vec4(ft.xx, 0.0, 7.0), // Kisrhombille tiling (kisrhombille)\n    vec4(ft.xx, 9.0, 0.0)  // Floret pentagonal tiling (6-fold pentille)\n); // ===============================================================================\n////// centroid vectors\nconst vec3[20] centroids = vec3[20] (\n\tvec3( 0. , -0.26967233, 0.70601133),\n\tvec3( 0.436339, -0.436339, 0.436339),\n\tvec3(0.70601133, 0. , 0.26967233),\n\tvec3(0.436339, 0.436339, 0.436339),\n\tvec3(0. , 0.26967233, 0.70601133),\n\tvec3( 0. , -0.26967233, -0.70601133),\n\tvec3(-0.436339, -0.436339, -0.436339),\n\tvec3(-0.70601133, 0. , -0.26967233),\n\tvec3(-0.436339, 0.436339, -0.436339),\n\tvec3( 0. , 0.26967233, -0.70601133),\n\tvec3(-0.70601133, 0. , 0.26967233),\n\tvec3(-0.436339, -0.436339, 0.436339),\n\tvec3(-0.26967233, -0.70601133, 0. ),\n\tvec3( 0.26967233, -0.70601133, 0. ),\n\tvec3( 0.436339, -0.436339, -0.436339),\n\tvec3( 0.70601133, 0. , -0.26967233),\n\tvec3( 0.436339, 0.436339, -0.436339),\n\tvec3(0.26967233, 0.70601133, 0. ),\n\tvec3(-0.26967233, 0.70601133, 0. ),\n\tvec3(-0.436339, 0.436339, 0.436339)\n);\n////// transformation matrices\nconst mat4[20] transforms = mat4[20] (\n\tmat4( 0.5 , 0.8660254 , 0. , 0. , -0.80901699, 0.46708618, -0.35682209, 0. , -0.30901699, 0.17841104, 0.93417236, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.80901699, 0.11026409, 0.57735027, 0. , 0.30901699, 0.75576131, -0.57735027, 0. , -0.5 , 0.64549722, 0.57735027, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0. , -0.35682209, 0.93417236, 0. , 1. , 0. , 0. , 0. , 0. , 0.93417236, 0.35682209, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.80901699, 0.11026409, 0.57735027, -0. , 0.30901699, -0.75576131, 0.57735027, 0. , 0.5 , 0.64549722, 0.57735027, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.5 , 0.8660254 , 0. , 0. , -0.80901699, -0.46708618, 0.35682209, 0. , 0.30901699, 0.17841104, 0.93417236, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.5 , -0.8660254 , 0. , 0. , -0.80901699, 0.46708618, 0.35682209, 0. , 0.30901699, -0.17841104, 0.93417236, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.80901699, -0.11026409, 0.57735027, 0. , 0.30901699, 0.75576131, 0.57735027, 0. , 0.5 , -0.64549722, 0.57735027, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0. , 0.35682209, 0.93417236, 0. , 1. , 0. , 0. , 0. , 0. , -0.93417236, 0.35682209, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.80901699, -0.11026409, 0.57735027, -0. , 0.30901699, -0.75576131, -0.57735027, 0. , -0.5 , -0.64549722, 0.57735027, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.5 , -0.8660254 , 0. , 0. , -0.80901699, -0.46708618, -0.35682209, 0. , -0.30901699, -0.17841104, 0.93417236, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0. , 0.35682209, -0.93417236, 0. , -1. , 0. , 0. , 0. , 0. , 0.93417236, 0.35682209, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.80901699, -0.11026409, -0.57735027, -0. , -0.30901699, 0.75576131, -0.57735027, 0. , 0.5 , 0.64549722, 0.57735027, -0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.80901699, 0.46708618, 0.35682209, -0. , -0.30901699, -0.17841104, 0.93417236, -0. , -0.5 , 0.8660254 , -0. , 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.80901699, -0.46708618, -0.35682209, 0. , 0.30901699, -0.17841104, 0.93417236, -0. , 0.5 , 0.8660254 , -0. , 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.5 , 0.64549722, -0.57735027, -0. , 0.80901699, -0.11026409, 0.57735027, 0. , -0.30901699, 0.75576131, 0.57735027, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.30901699, 0.17841104, -0.93417236, 0. , 0.5 , -0.8660254 , -0. , -0. , 0.80901699, 0.46708618, 0.35682209, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.5 , 0.64549722, -0.57735027, 0. , 0.80901699, 0.11026409, -0.57735027, 0. , 0.30901699, 0.75576131, 0.57735027, 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0. , 0.93417236, -0.35682209, 0. , 0. , -0.35682209, -0.93417236, 0. , 1. , 0. , 0. , 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4(-0.80901699, 0.46708618, 0.35682209, 0. , -0.30901699, 0.17841104, -0.93417236, -0. , 0.5 , 0.8660254 , -0. , 0.75576131, 0. , 0. , 0. , 1. ),\n\tmat4( 0.30901699, 0.75576131, -0.57735027, 0. , -0.5 , 0.64549722, 0.57735027, 0. , 0.80901699, 0.11026409, 0.57735027, -0.75576131, 0. , 0. , 0. , 1. )\n);\n\n// functions\n\n//// rotations\n\nmat2 rotmat2(float angle) {\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nmat3 rotmat3(vec3 angle) {\n    float sintht = sin(angle.x), sinpsi = sin(angle.y), sinphi = sin(angle.z);\n    float costht = cos(angle.x), cospsi = cos(angle.y), cosphi = cos(angle.z);\n    return mat3(\n        costht * cospsi, sintht * cospsi, -sinpsi, \n        costht * sinpsi * sinphi - sintht * cosphi, sintht * sinpsi * sinphi + costht * cosphi, cospsi * sinphi,\n        costht * sinpsi * cosphi + sintht * sinphi, sintht * sinpsi * cosphi - costht * sinphi, cospsi * cosphi\n    );\n}\n\n//// intersection\n\nvec2 intersection(vec2 p1, vec2 p2, vec2 p3, vec2 p4) {\n    // http://paulbourke.net/geometry/pointlineplane/\n    float d = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n    float ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / d;\n    // float ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / d;\n    return p1 + ua * (p2 - p1);\n}\n\n//// signed distance functions\n////// ------------------------------------------------\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nfloat opIntersection( float d1, float d2 ) { \n    // https://iquilezles.org/articles/distfunctions/\n    return max(d1, d2); \n}\n\n\nfloat opUnion(float d1, float d2) {\n    // https://iquilezles.org/articles/distfunctions/\n    return min(d1, d2); \n}\n\nfloat opOnion(in float sdf, in float thickness) {\n    // https://iquilezles.org/articles/distfunctions/\n    return abs(sdf) - thickness;\n}\n\nvec3 opRep(in vec3 p, in vec3 c) {\n    // https://iquilezles.org/articles/distfunctions/\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdCone(in vec3 p, in vec2 c, float h) {\n    // c is the sin/cos of the angle, h is height\n    // Alternatively pass q instead of (c,h),\n    // which is the point at the base in 2D\n    vec2 q = h * vec2(c.x / c.y, -1.0);\n\n    vec2 w = vec2(length(p.xz), p.y);\n    vec2 a = w - q * clamp(dot(w,q) / dot(q,q), 0.0, 1.0);\n    vec2 b = w - q * vec2(clamp(w.x / q.x, 0.0, 1.0 ), 1.0);\n    float k = sign(q.y);\n    float d = min(dot(a, a), dot(b, b));\n    float s = max(k * (w.x * q.y - w.y * q.x), k * (w.y - q.y));\n    return sqrt(d) * sign(s);\n}\n\nfloat sdTriangle(in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2) {\n    vec2 e0 = p1 - p0, e1 = p2 - p1, e2 = p0 - p2;\n    vec2 t0 = p  - p0, t1 = p  - p1, t2 = p  - p2;\n    vec2 pq0 = t0 - e0 * clamp(dot(t0, e0)/ dot(e0, e0), 0.0, 1.0);\n    vec2 pq1 = t1 - e1 * clamp(dot(t1, e1)/ dot(e1, e1), 0.0, 1.0);\n    vec2 pq2 = t2 - e2 * clamp(dot(t2, e2)/ dot(e2, e2), 0.0, 1.0);\n    float s = sign(e0.x * e2.y - e0.y * e2.x );\n    vec2 d = min(min(vec2(dot(pq0, pq0), s * (t0.x * e0.y - t0.y * e0.x)),\n                     vec2(dot(pq1, pq1), s * (t1.x * e1.y - t1.y * e1.x))),\n                     vec2(dot(pq2, pq2), s * (t2.x * e2.y - t2.y * e2.x)));\n    return -sqrt(d.x) * sign(d.y);\n}\n\nfloat sdEquilateralTriangle(in vec2 p, in float r) {\n    // r is half of the side\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r / k;\n    if (p.x + k * p.y > 0.0) p = vec2(p.x - k * p.y, -k * p.x - p.y) / 2.0;\n    p.x -= clamp(p.x, -2.0 * r, 0.0);\n    return -length(p) * sign(p.y);\n}\n\n////// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n////// https://iquilezles.org/articles/distfunctions/\n////// https://iquilezles.org/articles/distfunctions2d/\n////// ------------------------------------------------\n\n////// Wythoff Construction\n\nvec2 snub632() {\n    // fermat point\n    vec2 pf = intersection(vec2(-0.75, cos30 / 2.0), ft.zw, vec2(1, 0), ft.xy);\n    // reflect over side (y-axis)\n    vec2 q1 = vec2(-1.0 * pf.x, pf.y);\n    // vec2 q2 = vec2(pf.x, pf.y + 2.0 * (cos30 - pf.y));\n    // project to hypotenuse then double to obtain reflection\n    vec2 q3 = dot(pf, ft.zw) / dot(ft.zw, ft.zw) * ft.zw;\n    q3 = pf + 2.0 * (q3 - pf);\n    // snub point is at half the hypotenuse of the new right triangle (Thales's theorem)\n    return q1 + ((q3 - q1) / 2.0);\n}\n\nfloat sdSchwartz632Snub(vec3 p, float t) {\n    // p the uv\n    // t the thickness\n    // take advantage of symmetry\n    float a = atan(p.y, p.x);\n    float M = floor(mod(degrees(a) - 30.0, 360.0) / 60.0) * 60.0;\n    p.xy = rotmat2(radians(M)) * p.xy;\n    // snub point\n    vec3 g = vec3(snub632(), 0);\n    // rotate\n    vec3 G = vec3(rotmat2(radians(180.0)) * (g.xy - ft.xy) + ft.xy, 0);\n    // distance\n    float d = sdCapsule(p, g, G, t);\n    // fix by https://www.shadertoy.com/user/mla\n    d = opUnion(d, sdCapsule(vec3(rotmat2(radians(-60.0)) * p.xy, p.z), g, G, t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(-60.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+60.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+120.0)) * (G - g).xy + g.xy, 0), t));\n    d = opUnion(d, sdCapsule(p, g, vec3(rotmat2(radians(+180.0)) * (G - g).xy + g.xy, 0), t));\n    return d;\n}\n\nfloat sdSchwartz632DualSnub(vec3 p, float t) {\n    // p the uv\n    // t the thickness\n    // snub point\n    vec3 g = vec3(snub632(), 0);\n    // take advantage of symmetry\n    float a = atan(p.y, p.x) - (atan(g.y, g.x) - radians(60.0));\n    float M = floor(mod(degrees(a), 360.0) / 60.0) * 60.0;\n    p.xy = rotmat2(radians(M)) * p.xy;\n    float R3 = sqrt3 / 2.0 * length(g);\n    float r3 = sqrt3 / 6.0 * length(g); \n    vec2 n0 = normalize(rotmat2(radians(+30.0)) * g.xy);\n    vec3 n1 = vec3((R3 + r3) * n0, 0);\n    vec3 n2 = vec3(n1.xy + rotmat2(radians(-60.0)) * (2.0 * r3 * n0), 0);\n    vec3 n3 = vec3(n1.xy + rotmat2(radians(+60.0)) * (2.0 * r3 * n0), 0);\n    // distance\n    float d = sdCapsule(p, vec3(ft.xx, 0), n1, t);\n    d = opUnion(d, sdCapsule(p, n1, n2, t));\n    d = opUnion(d, sdCapsule(p, n1, n3, t));\n    d = opUnion(d, sdCapsule(p, n2, n1 + n2 + -n3, t));\n    d = opUnion(d, sdCapsule(p, n3, n1 + n3 + -n2, t));\n    return d;\n}\n\nfloat sdSchwartz632(vec3 p, vec2 g, float m, float w, float t, bool o) {\n    // snub case\n    if (m == 8.0) {\n        return sdSchwartz632Snub(p, t);\n    }\n    // dual snub case\n    else if (m == 9.0) {\n        return sdSchwartz632DualSnub(p, t);\n    }\n    p = abs(p);\n    if (p.y < 2.0 * cos30 * p.x) {\n        p.xy = rotmat2(radians(-60.0)) * p.xy;\n        p = abs(p);\n    }\n    // distance\n    float d = o ? sdSphere(p, t) : MAX_DIST;\n    vec3 g3 = vec3(g, 0);\n    d = bool(mod(m, 2.0)) ? opUnion(d, sdCapsule(p, g3, vec3(0, g3.y, 0), t)) : d;\n    vec3 v = vec3(ft.zw, 0);\n    d = bool(mod(floor(m / 2.0), 2.0)) ? opUnion(d, sdCapsule(p, g3, dot(g3, v) / dot(v, v) * v, t)) : d;\n    d = bool(mod(floor(m / 4.0), 2.0)) ? opUnion(d, sdCapsule(p, g3, vec3(g3.x, ft.y, 0), t)) : d;\n    d = bool(mod(w, 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xx, 0), vec3(ft.xy, 0), t)) : d;\n    d = bool(mod(floor(w / 2.0), 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xx, 0), vec3(ft.zw, 0), t)) : d;\n    d = bool(mod(floor(w / 4.0), 2.0)) ? opUnion(d, sdCapsule(p, vec3(ft.xy, 0), vec3(ft.zw, 0), t)) : d;\n    return d;\n}\n\nfloat sdSchwartz632Plane(vec3 p, vec2 g, float m, float w, float t, bool o) {\n    vec3 v = vec3(3.0, 2.0 * cos30, 0.0);\n    vec3 p1 = opRep(p, v);\n    vec3 p2 = opRep(p + v / 2.0, v);\n    return opUnion(\n        sdSchwartz632(p1, g, m, w, t, o),\n        sdSchwartz632(p2, g, m, w, t, o)\n    );\n}\n\n//// Caspar-Klug\n\nfloat sdCasparKlugFacet(vec3 p, float h, float k, vec2 g, float m, float w, float t, bool[5] x) {\n    // @p vec3 the uv\n    // @h float the h-parameter (steps on plane)\n    // @k float the k-parameter (steps on plane after 60-degree turn)\n    // @g vec2 the generator point for Wythoff construction\n    // @m float the bits representing the activated mirrors for Wythoff construction\n    // @w float the bits representing the fundamental triangle wall display\n    // @t float the edge thickness\n    // @x vec4 the config\n    \n    mat2 b = mat2(1.5, cos30, 0.0, 2.0 * cos30);           // basis\n    // vec2 v1 = vec2(0);                                  // vector 1\n    vec3 v2 = vec3(b * vec2(h, k), 0);                     // vector 2\n    vec3 v3 = vec3(rotmat2(radians(-60.0)) * v2.xy, 0);    // vector 3\n    float s = length(v2);                                  // side length\n    // vec2 c = (v1 + v2 + v3) / 3.0;                      // centroid\n    vec3 c = (v2 + v3) / 3.0;                              // also centroid...\n\n    vec3 q = vec3(rotmat2(-atan(v2.y, v2.x)) * p.xy, p.z); // map p to triangle sitting on side -> â\n    // tile the plane\n    float d = sdSchwartz632Plane(q + c, g, m, w, t, x[4]);\n    // carve-out facet\n    d = x[1] ? opIntersection(d, sdEquilateralTriangle(p.xy, s / (1.0 + float(x[0])))): d;\n    \n    // trace lines/paths of walk\n    // TODO: simplify...\n    if (x[2] || x[3]) {\n        vec3 h1 = h * vec3(1.5, cos30, 0);\n        mat2 h1_rot = (\n            rotmat2(-atan(h1.y, h1.x)) * \n            rotmat2(-acos(dot(h1, vec3(1, 0, 0)) / (length(h1) * length(vec3(1, 0, 0)))))\n        );\n        for(int i = 0; i < 3; i++) {\n            q.xy = rotmat2(radians(120.0)) * q.xy;\n            vec3 Q = q + c - h1;\n            Q.xy = h1_rot * Q.xy;\n            d = x[2] ? opUnion(d, sdCapsule(q + c, vec3(0), v2, t)) : d;\n            if (x[3]) {\n                d = opUnion(d, sdCapsule(q + c, vec3(0), h1, t));\n                d = opUnion(d, sdCapsule(q + c, h1, v2, t));\n                if (h > 0.0) d = opUnion(d, sdCone(Q, vec2(0.5, 1.0), 8.0 * t));\n                if (k > 0.0) d = opUnion(d, sdCone(q + c - v2, vec2(0.5, 1.0), 8.0 * t));\n            }\n        }\n    }\n    \n    return d;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// MIT License\n// \n// Copyright (c) 2022, Daniel Antonio NegrÃ³n (@remaindeer)\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2  uv = fragCoord;\n    ivec2 iv = ivec2(uv);\n    \n    vec4 data = texelFetch(iChannel1, iv, 0);\n    \n    bool is_shift = keyDown(16/* shift */);\n    bool is_ctrl  = keyDown(17/* ctrl  */);\n    \n    if (iFrame == 0) {\n        /**/ if (iv == IDX_PARA_1) data = vec4( 2,  1, 0, 8); // h, k, wythoff, thickness\n        else if (iv == IDX_PARA_2) data = vec4(5, 12, 0, 0); // fiber, zoom, _, _\n        else if (iv == IDX_MODE_1) data = vec4(MODE_ICOSA, -MODE_LINES, -MODE_PATHS, -MODE_RANDO);\n        else if (iv == IDX_MODE_2) data = vec4(MODE_POINT, -MODE_RSPIN, 0, 0);\n    } else {\n        /**/ if (iv == IDX_PARA_1 && !(is_ctrl)) {\n            // Caspar-Klug\n            /**/ if (keyClick(72/* h */)) data.r += 1.0 * (is_shift ? -1.0 : 1.0);\n            else if (keyClick(75/* k */)) data.g += 1.0 * (is_shift ? -1.0 : 1.0);\n            data.r = data.r < 0.0 ? 0.0 : data.r;\n            data.g = data.g < 0.0 ? 0.0 : data.g;\n            // Wythoff Construction\n            float offset = is_shift ? float(TILINGS.length() / 2) : 0.0;\n            for (int i = 0; i < TILINGS.length() / 2; i++) \n                if (keyClick(i + 49 /* 1 */))\n                    data.b = float(i) + offset;\n            // thickness\n            if (keyClick(84/* t */)) data.a += 1.0 * (is_shift ? -1.0 : 1.0);\n            data.a = data.a < 1.0 ? 1.0 : data.a;\n        }\n        else if (iv == IDX_PARA_2 && !(is_ctrl)) {\n            /**/ if (keyClick(70/* f */)) data.r += 1.0 * (is_shift ? -1.0 : 1.0); // fiber\n            else if (keyClick(90/* z */)) data.g += 1.0 * (is_shift ? -1.0 : 1.0); // zoom\n            data.r = data.r < 0.0 ? 0.0 : data.r;\n        }\n        else if (iv == IDX_MODE_1) {\n            if (is_ctrl) {\n                /**/ if (keyClick(49/* 1 */)) data.r = MODE_ICOSA;\n                else if (keyClick(50/* 2 */)) data.r = MODE_FACET;\n                else if (keyClick(51/* 3 */)) data.r = MODE_PLANE;\n            } else {\n                /**/ if (keyClick(76/* l */)) data.g *= -1.0; // lines\n                else if (keyClick(80/* p */)) data.b *= -1.0; // paths\n                else if (keyClick(82/* r */)) data.a *= -1.0; // rando\n            }\n        }\n        else if (iv == IDX_MODE_2) {\n            /**/ if (keyClick(67/* c */)) data.r *= -1.0; // point\n            else if (keyClick(83/* s */)) data.g *= -1.0; // rspin\n        }\n    }\n    \n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}