{
    "Shader": {
        "info": {
            "date": "1651069185",
            "description": "Playing about - really want to use this for procgen pixel art",
            "flags": 32,
            "hasliked": 0,
            "id": "NtlfRB",
            "likes": 15,
            "name": "Pixel Lines V4",
            "published": 3,
            "tags": [
                "copy",
                "thing"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scale factor to enlarge image by\n    float sf = dim.y / (iResolution.y - dim.y);\n\n    // Scale and centre image to screen\n    vec2 coord = ceil(sf * fragCoord) ;\n    coord -= ceil(sf * 0.5 * iResolution.xy - 0.5 * dim);\n\n    vec3 col = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float d = length(uv);\n\n    col += 0.4 * exp(-1. * d) * vec3(1,0.5,1);\n       \n    // Sloppy way of keeping it square-ish\n    // if (coord.x < - 11. || coord.x >= dim.x + 11.)\n    //     col = vec3(0.825);\n        \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define lineCol(x) ( .5 + .5 * thc(4., x+2. * pi / 3.*vec3(-1,0,1)) )\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat side(vec2 f, float a) {\n    f *= rot(a + pi/2.);    \n    return step(f.y, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center fragCoord + add a slight bend\n    fragCoord -= 0.5 * dim;\n    fragCoord.y += cos(fragCoord.x/dim.x * 10. + iTime);\n   \n    vec3 col = vec3(0);    \n    \n    // Use fl if you want to flick through patterns\n    float fl = floor(0. * iTime);\n    \n    // I'm not sure what value for n looks best\n    float n = 40.;\n    for (float i = 0.; i < n; i++) {\n        // Random values for line positions\n        float h = h21(vec2(i + fl + 11., 0.131 * i - 103.));\n        float h2 = h21(vec2((i+1.) + fl + 11., 0.131 * (i+1.) - 103.));    \n        \n        // Move stuff about a bit\n        float v = pi * (1. + thc(4., 0.125 * pi * i/n + 0.25 * iTime));\n        h *= v;\n        h += 2. * pi * i / n;\n        h2 *= v;       \n        h2 += 2. * pi * (1. - i / n);\n\n        // Line positions\n        float o = 0.5 * iTime;\n        vec2 p = 40. * vec2(cos(h + o), sin(h + o));\n        vec2 q = 40. * vec2(cos(h2 + o),sin(h2 - o));\n\n        // Center coords at p (side() cuts the plane through 0,0)\n        vec2 f = fragCoord - p;\n        vec2 pq = p - q;\n        float a = atan(pq.x, pq.y);\n        \n        // Center half (draw everything under the line)\n        float c = side(f, a);\n             \n        // Shifted halves for 1 pixel line\n        float t = side(f - vec2(0,1), a);\n        float b = side(f + vec2(0,1), a);\n        float l = side(f - vec2(1,0), a);\n        float r = side(f + vec2(1,0), a);\n        float mx = max(max(t,b), max(l,r));\n        float mn = min(min(t,b), min(l,r));\n        \n        // Line (not a line segment yet)\n        vec3 col2 = c * (mx - mn) * vec3(1);\n        \n        // Cut line into a line segment\n        float d = length(pq);\n        f *= rot(a + pi / 2.);\n        col2 *= step(abs(f.x - 0.5 * d), 0.5 * d);      \n       \n        // Darken\n        col2 *= smoothstep(0., 1., 1.-i/n);\n       \n        // Color\n        vec3 e = vec3(0.5);\n        col2 *= pal(3. * i/n + 0.25 * iTime, e, e, e, vec3(0,1,2)/3.);\n        \n        col = clamp(col + col2, 0., 1.);\n    }\n   \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// dimensions of sprite - has to be less than screen dimensions\nconst vec2 dim = vec2(81);\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}