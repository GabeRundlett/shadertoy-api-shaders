{
    "Shader": {
        "info": {
            "date": "1691074632",
            "description": "( easy extend to nD )\nleft to right :  cheap blue noise with 3x3 FD  ,  with 11x11 Lanczos filtering  (=49 coefs)  ,  ref blue noise\ncenter line: thresholding.\nbottom half: zoom\n→ Not much gain using the big filter. And still not so good for thresholding.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtlyzs",
            "likes": 13,
            "name": "cheap bluenoise: Lanczos filte",
            "published": 3,
            "tags": [
                "hash",
                "bluenoise",
                "lanczos"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "// https://en.wikipedia.org/wiki/Lanczos_resampling\n\nconst float a = 3., n = a-.5, N = 2., PI = 3.1415927;\n\n//#define L(i)    ( i==0. ? 1. : a* sin(PI*i)*sin(PI*i/a) / ( PI*PI*i*i ) )\n  #define L(i) float[]( 1., .60793, 0., -.13509, 0., .024317 )[abs(int(i+i))] // for a=3,N=2\n\n#define T(i,j)  ( 2.* texture( iChannel0, ( u +N*vec2(i,j) ) / 256. ) - 1. )\n\n#define blue() (  \\\n          (  H(-1,-1) +     H(0,-1)  + H(1,-1)  \\\n           + H(-1, 0) - 8.* H(0, 0)  + H(1, 0)  \\\n           + H(-1, 1) +     H(0, 1)  + H(1, 1)  \\\n          ) *.5/9. *2.1 +.5 )\n#define H(i,j) texture( iChannel0, ( u + vec2(i,j) ) /256. )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = u / R;\n    bool b = iMouse.z<=0.;\n    if ( b && int(u) % int(R/3.) == 0 ) { O = vec4(1,0,0,1); return; } // red separator\n    int  i = int( 3.*( b ? u : iMouse.xy ) / R );  // select noise via zone or mouse\n    \n    if ( b && U.y < .5 ) u = floor(u/2.)+.5;       // bottom: zoom\n    \n    if ( i==0 )                                    // left: cheap blue with 9 points FD\n        O = blue();\n    \n    else if (i==1) {                               // middle: blue with 11x11  Lanczos filtering\n        O *= 0.;                              \n        for( float y=-n; y<=n; y+= 1./N )\n            for( float x=-n; x<=n; x+= 1./N )\n                O +=   L(x)*L(y) * T(x,y);\n\n        O = .5 + .65*( T(0,0) - O/(N*N) );         // keep only high freqs\n                                                   // testing some histogram corrections\n     // O = .5 + .7*tanh((O*2.-1.)/(1.76*.8));     // would be valid for gaussian distrib\n     // O = (O-.5)*.6+.5;                          // fit to [0,1] interval → histo = /‾\\\n        // O = 2.*O-1.; O = .5+.5*(O + sin(1.57*O))/2.;\n        // O = (O + O*O*(3.-2.*O))/2.;\n        // float s = .242, x = abs(O.x-.5), k = 3.14/(.5-s); O = vec4(.5+.5*sign(O.x-.5)*.517*( x<s ? s*x : s*s+ .5*x+.5/k*sin(k*(x-s))));\n    }\n    else                                           // right: ref blue noise\n         O = texelFetch(iChannel1, ivec2(u)%1024,0);\n\n    if ( b && abs( U.y-.5) < .25 ) O = step(.8,O); // centerline: thresholding\n    O = O.xxxx;                                    // grey\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}