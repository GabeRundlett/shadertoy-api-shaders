{
    "Shader": {
        "info": {
            "date": "1488955861",
            "description": "This shader draws the logo of the Hungarian demogroup \"Conspiracy\".\n\nIt served as a prototype for a procedural texture during the creation of the 64kB intro \"H - Immersion\".\n\nMore logos: https://www.shadertoy.com/playlist/NX3yzf",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlczj",
            "likes": 1,
            "name": "Greetings, Conspiracy",
            "published": 3,
            "tags": [
                "demoscene",
                "logo"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "/*\n\nThis shader draws the logo of the Hungarian demoscene group \"Conspiracy\".\n\nIt served as a prototype for a procedural texture during the\ncreation of the 64kB intro \"H - Immersion\". The logo appeared,\nhidden in plain sight, as a nod to the group.\n\n\nH - Immersion, by Ctrl-Alt-Test:\n > http://www.ctrl-alt-test.fr/?page_id=444\n > https://www.youtube.com/watch?v=27PN1SsXbjM\n   (logo visible at 2mn30s)\n\n\nConspiracy:\n > http://conspiracy.hu/\n > https://www.youtube.com/watch?v=qRVTI2y0BBg\n\n-- \nZavie / Ctrl-Alt-Test\n\n*/\n\nfloat Plane(vec2 p, vec2 n, float t0)\n{\n    return dot(p, normalize(n)) - t0;\n}\n\nfloat Spike(vec2 p)\n{\n    return max(max(\n        Plane(p , vec2(1., 0.), 0.),\n        Plane(p , vec2(-1., -1.), -0.06)),\n        Plane(p , vec2(-5., 1.), 0.09));\n}\n\nfloat ConspiracyLogo(vec2 c)\n{\n    float halfSqrt2 = sqrt(2.)/2.;\n    vec2 c2 = vec2(c.y, -c.x);\n    vec2 c3 = halfSqrt2 * vec2(c.x + c.y, -c.x + c.y);\n    vec2 c4 = vec2(-c3.y, c3.x);\n\n    float d = length(c) - 0.05;\n    d = min(d, min(Spike(c), Spike(-c)));\n    d = min(d, min(Spike(c2), Spike(-c2)));\n    d = min(d, min(Spike(c3), Spike(-c3)));\n    d = min(d, min(Spike(c4), Spike(-c4)));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    float d = ConspiracyLogo(uv - vec2(0.9, 0.5));\n\n    fragColor = vec4(draw(iResolution, d), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DEBUG_DISTANCE 0\n\n// See: https://www.shadertoy.com/view/XcVGRR\nvec3 debugDistance(vec3 iResolution, float d, vec3 color)\n{\n    float refWidth = iResolution.y / 1080.;\n\n    float dd1 = fwidth(d);\n    float width1 = 2.5 * dd1 * refWidth;\n    float iso1 = smoothstep(1. - width1 - dd1, 1. - width1 + dd1, abs(fract(d) * 2. - 1.));\n\n    float dd5 = fwidth(5. * d);\n    float width5 = 0.75 * dd5 * refWidth;\n    float iso5 = smoothstep(1. - width5 - dd5, 1. - width5 + dd5, abs(fract(5.*d) * 2. - 1.));\n\n    float dd0 = fwidth(d);\n    float width0 = 3. * dd0 * refWidth;\n    float iso0 = smoothstep(1. - width0 - dd0, 1. - width0 + dd0, 1. - abs(d));\n\n    float isoLines = max(iso0, max(iso1, iso5));\n\n    vec3 background = (d > 0. ? vec3(1.) : mix(vec3(0.8), color, 0.1));\n    vec3 lineColor = mix(color * (d > 0. ? 1. : 0.8), vec3(0.), iso0);\n\n    return mix(background, lineColor, isoLines);\n}\n\nvec3 draw(vec3 iResolution, float d)\n{\n#if DEBUG_DISTANCE\n    return debugDistance(iResolution, 10.*d, vec3(0.8, 0.5, 1.));\n#else\n    float dd = fwidth(d);\n    return vec3(1. - smoothstep(-dd / 2., dd / 2., d));\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}