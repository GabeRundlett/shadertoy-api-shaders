{
    "Shader": {
        "info": {
            "date": "1675148039",
            "description": "perlin noise",
            "flags": 0,
            "hasliked": 0,
            "id": "dtsXzX",
            "likes": 0,
            "name": "fbmnoise test 02",
            "published": 3,
            "tags": [
                "fbmnoisetest02"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 154
        },
        "renderpass": [
            {
                "code": "\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec2 P)\n{\n\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n//Copied from the same book of shaders chapter\n#define NUM_OCTAVES 3\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * cnoise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\n\nconst vec2 target_resolution = vec2(938, 84);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    //color1/2/3均为可调参数\n    vec4 color1 = vec4(0.71373,0.85882,0.92157,1.0); \n    vec4 color2 = vec4(0.60000,0.67843,1.0,1.0);\n    vec4 color3 = vec4(0.200,0.200,1.000,1.0);\n    \n    float PI = 3.1415926;\n    float time = iTime * 0.1; \n    \n    //scale为可调参数\n    float scale = 3.0;\n    //colorStep1为可调参数\n    float colorStep1 = 0.33333;\n    //colorStep2为可调参数\n    float colorStep2 = 0.66666;\n\n    float ease[3];\n    ease[0] = -(cos(PI * fract(time/scale)) - 1.0)/2.0 * scale;  \n    ease[1] = fract(time/scale)*scale;\n    ease[2] = (1.0 - pow(1.0 - fract(time/scale),3.0))*scale;\n    \n    float easeChoice = mod(time/scale,4.0);\n    int i = int(easeChoice);\n    float offset  = ease[i] + floor(time/scale)*scale;\n    offset = uv.y - offset;\n    float y = mod(offset,scale);\n    \n    float step1 = scale * (colorStep1);\n    float step2 = scale * max(colorStep1+0.1, (colorStep2)); \n    \n    if (y < step1) {\n    float dist1 = smoothstep(0.0, step1, y);\n    fragColor = mix(color3, color1, dist1);\n    }\n    \n    //红到蓝 step1 - step2\n    else if (y > step1 && y < step2) {\n    float dist2 = smoothstep(step1, step2, y);\n    fragColor = vec4(dist2,dist2,dist2,1.0);\n    fragColor = mix(color1, color2, dist2);\n    }\n    \n    //蓝到绿 step2 - 1.0\n    else{\n    float dist3 = smoothstep(step2, 1.0 * scale, y);\n    fragColor = vec4 (dist3,dist3,dist3,1.0);\n    fragColor = mix(color2, color3, dist3);\n    }\n    \n    //fbm color\n    vec2 uv2 = uv;\n\tuv2.x *= 4.0;\n\tuv2.y *= 1.0; \n    uv2.x += time * 0.4;\n    uv2.y -= time;\n\tvec3 col = mix(vec3(0.0,0.0,0.), vec3(1.), fbm(uv2 - vec2(2.0*iTime)));\n\tvec3 color = vec3(0.0);\n  \n    //第一层基础fbm的流动 uv+time\n\tvec2 q = vec2(0.);\n    q.x = fbm(uv2 - .4 * iTime);\n    q.y = fbm(uv2 - vec2(1.0));\n\n    //在第一层fbm的基础上再进行一次fbm，uv+ r + time, time可以改变流速\n\tvec2 g = vec2(0.);\n    g.x = fbm( uv2 - 1.0*q + vec2(1.7,9.2) -  .5 * iTime );\n    g.y = fbm( uv2 - 1.0*q + vec2(8.3,2.8) -  .26 * iTime);\n\n    //得到基础的fbm\n\tfloat f = fbm(uv2+g);\n  \n    color = mix(vec3(0.0,0.0,0.0),\n                vec3(.2,.2,.2),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0.7,0.7,0.7),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(1.0,1.0,1.0),\n                clamp(length(g.x),0.0,1.0));\n\n    //提升黑白区的对比度\n    vec4 fbmColor = vec4((f*f*f+.6*f*f+.5*f)*vec3(1.),1.);\n\tfragColor = mix(fragColor,vec4(1.0,1.0,1.0,1.0),color.r);\n      \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}