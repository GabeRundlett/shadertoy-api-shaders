{
    "Shader": {
        "info": {
            "date": "1609889648",
            "description": "Chmutov surface again, using DE & dual numbers - an order 32 surface (for N = 5).\n\nMouse/<up>/<down> for navigation (move forward to go inside the surface).",
            "flags": 48,
            "hasliked": 0,
            "id": "3t3yD2",
            "likes": 7,
            "name": "Chmutov Surface II",
            "published": 3,
            "tags": [
                "de",
                "implicit",
                "surface",
                "chmutov",
                "dualnumber"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Chmutov implicit surface. My remix of Knighty's DE remix of my original\n// shader.\n//\n// Original non-DE: https://www.shadertoy.com/view/MtyfRK\n// Knighty's DE version: https://www.shadertoy.com/view/MlGfzK\n//\n// <mouse>,<up>,<down> for navigation\n// 'c' for less colour\n// 'm' for mirror look\n// 'p' for sensible perspective\n// 'r' for autorotation\n// 's' to slice at z = 0\n// 't' for cycle through different orders of surface\n//\n// Uses dual numbers for automatic differentiation & a nifty way of\n// computing Chebyshev polynomials for powers of two: T(2n,x) = T(n,x)^2 - 1\n// Also, the surface fits into the unit cube, so can use that as bounding box.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI =  3.141592654;\nint N = 5; // Order is 2^N\nfloat AA = 1.0;\n\nvec3 light = normalize(vec3(0,1,1));\n\n// (T)Chebyshev polynomials\n// Use T(2n,x) = T(n,x)*T(n,x)-1\n\n// Dual numbers, basically complex with very small imaginary\n// component, so multiplication can ignore the im*im part.\n#define T vec2\nT cfloat(float x) { return vec2(x,0); }\nT cmul(T z, T w) {\n  return vec2(z.x*w.x,z.x*w.y+z.y*w.x); // Dual numbers\n}\n\nT cmul(T z, T w, T v) {\n  return cmul(z,cmul(w,v));\n}\nT cmul(T z, T w, T u, T v) {\n  return cmul(cmul(z,w),cmul(u,v));\n}\n\nT csqr(T z) {\n  //return cmul(z,z);\n  return vec2(z.x*z.x,2.0*z.x*z.y);\n}\n\n// (T)Chebyshev polynomials\n// Use T(2n,x) = T(n,x)*T(n,x)-1\nT tcheb(T x, int n) {\n  for (int i = 0; i < n; i++) {\n    x = 2.0*csqr(x) - cfloat(1.0);\n  }\n  return x;\n}\n\nT chmutov(T x, T y, T z, int n) {\n  return tcheb(x,n)+tcheb(y,n)+tcheb(z,n)+cfloat(1.0);\n}\n\nT surface(T x, T y, T z) {\n  // Encourage compiler to unroll loops\n  // This can miscompile on Nvidia.\n  if (N == 6) return chmutov(x,y,z,6);\n  if (N == 5) return chmutov(x,y,z,5);\n  if (N == 4) return chmutov(x,y,z,4);\n  return chmutov(x,y,z,N);\n}\n\n// vec4 of gradient + function value\nvec4 gradval(vec3 p) {\n  float eps = 1e-10;\n  float x = p.x, y = p.y, z = p.z, w = 1.0;\n  vec2 tx = surface(vec2(x,eps),vec2(y,0),vec2(z,0));\n  vec2 ty = surface(vec2(x,0),vec2(y,eps),vec2(z,0));\n  vec2 tz = surface(vec2(x,0),vec2(y,0),vec2(z,eps));\n  return vec4(vec3(tx.y,ty.y,tz.y)/eps,tx.x);\n}\n\nfloat DE(vec3 p){\n  // DE for clipping cube\n  float deCube = max(abs(p.x),max(abs(p.y),abs(p.z)))-1.0;\n  vec4 v4 = gradval(p);\n  float dv = length(v4.xyz); // Magnitude of derivative\n  float v = v4.w;            // Implicit function value\n  v /= (1.0+2.0*v); // Attenuate for large v\n  v /= dv; // Scale by magnitude of gradient.\n  v = max(deCube,v);\n  if (key(CHAR_S)) v = max(v,p.z);\n  return v;\n}\n\nfloat maxdistance = 20.0;\nfloat eps = 0.00001;\n\nbool trace(vec3 p, vec3 r, out float k) {\n  k = 0.0;\n  for (int i = 0; i < 500; i++){\n    float d = DE(p+k*r);\n    k += d;\n    if (d < eps * k) return true;\n    if (d > maxdistance) return false;\n  }\n  return false;\n}\n\nvec3 selectColor(vec3 p, vec3 r, vec3 n) {\n  if (key(CHAR_M)) {\n    vec3 color = texture(iChannel0,reflect(r,n)).rgb;\n    return color;\n  } else {\n    vec3 color = !key(CHAR_C) ? abs(n) : vec3(0.8,1,1);\n    light = normalize(light);\n    n = normalize(n);\n    color *= 0.2+0.8*max(dot(n,light),0.0);\n    float spec = pow(max(dot(reflect(r,n),light),0.0),20.0);\n    color += 0.3*spec;\n    return color;\n  }\n}\n\nvec3 surface(vec3 p0, vec3 r) {\n    float k;\n    if (!trace(p0,r,k)) return vec3(0);\n    vec3 p = p0 + k*r;\n    vec3 n = normalize(gradval(p).xyz);\n    // Normals should be the right way around.\n    // so if they aren't, blank them out.\n    if (dot(r,n) > 0.0) n = vec3(0);\n    return selectColor(p,r,n);\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.15);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  if (key(CHAR_T)) N = 1+int(0.5*iTime)%6;  \n  float camera = 1.8;\n  float focal = 0.5;\n  if (key(CHAR_P)) {\n    camera = 6.0;\n    focal = 2.0;\n  }\n  camera *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  maxdistance = camera + 2.0;\n  \n  vec3 p0 = vec3(0,0,camera);\n  p0 = transform(p0);\n  light = transform(light);\n  vec3 aacol = vec3(0);\n  for (float i = 0.0; i < AA; i++) {\n   for (float j = 0.0; j < AA; j++) {\n     vec2 uv = (fragCoord + vec2(i,j)/AA - 0.5*iResolution.xy)/iResolution.y;\n     vec3 r = vec3(uv,-focal);\n     r = transform(r);\n     r = normalize(r);\n     aacol += surface(p0,r);\n   }\n  }\n  aacol /= AA*AA;\n  aacol = pow(aacol,vec3(0.4545));\n  if (alert) aacol.rg = vec2(1,0);\n  fragColor = vec4(aacol,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x);\n  int j = int(uv.y);\n  if ( iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (i == 0) {\n    float w1 = keystate(j,2).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      t.x++;\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool t) {\n  if (t) alert = true;\n}\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n// Macros for use in \"common\" blocks.\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}