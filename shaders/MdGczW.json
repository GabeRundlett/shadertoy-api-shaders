{
    "Shader": {
        "info": {
            "date": "1521163809",
            "description": "cross-section of power eight",
            "flags": 0,
            "hasliked": 0,
            "id": "MdGczW",
            "likes": 2,
            "name": "mandelbulb",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "xxyxxy",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "#define INFINITY 10.0\n#define MAX_ITERATIONS 128\n\n//http://www.skytopia.com/project/fractal/mandelbulb.html\nint mandel(float x0, float y0, float z0) {\n    float x;\n    float y;\n    float z;\n    float r;\n    float theta;\n    float phi;\n    float xnew;\n    float ynew;\n    float znew;\n    \n    x = x0; y = y0; z = z0;\n    \n    // play with this\n    float n = 8.0;\n\n    for (int i = 0; i < MAX_ITERATIONS; ++i) {\n        \n        r = sqrt(x*x + y*y + z*z);\n        theta = atan(sqrt(x*x + y*y), z);\n        phi = atan(y, x);\n        \n        xnew = x0 + pow(r, n) * sin(theta * n) * cos(phi * n);\n        ynew = y0 + pow(r, n) * sin(theta * n) * sin(phi * n);\n        znew = z0 + pow(r, n) * cos(theta * n);\n        \n        if (xnew*xnew + ynew*ynew + znew*znew > INFINITY) {\n            return i;\n        }\n        \n        x = xnew;\n        y = ynew;\n        z = znew;\n    }\n        \n    return MAX_ITERATIONS;\n}\n\n// https://iquilezles.org/articles/palettes\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float x = fragCoord.x / iResolution.x;\n    float y = fragCoord.y / iResolution.y;\n    x = 2.0*x - 1.0;\n    y = 2.0*y - 1.0;\n    float z;\n    float t;\n            \n    fragColor = vec4(0.0);\n    \n    // regular\n    z = sin(0.5 * iTime);\n    t = float(mandel(x, y, z)) / float(MAX_ITERATIONS);            \n    fragColor.rgb += palette(0.5+0.5*cos(iTime), vec3(0.8,0.5,0.4),vec3(0.4,0.2,0.4),vec3(1.0,2.0,1.0),vec3(0.0,0.25,0.25) );\n    if (t < 1.0) {\n        fragColor.rgb *= 0.8;\n    }\n    \n    \n    // upside down and backwards... ish\n\tz = cos(0.5 * iTime);\n    t = float(mandel(y, x, z)) / float(MAX_ITERATIONS);            \n  \tfragColor.rgb += palette(0.5+0.5*sin(iTime), vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    if (t < 1.0) {\n        fragColor.rgb *= 0.4;\n    }       \n\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}