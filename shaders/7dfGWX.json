{
    "Shader": {
        "info": {
            "date": "1616627448",
            "description": "just some lines, might make them more pog later",
            "flags": 0,
            "hasliked": 0,
            "id": "7dfGWX",
            "likes": 9,
            "name": "Liney",
            "published": 3,
            "tags": [
                "lines"
            ],
            "usePreview": 0,
            "username": "Daizuukee",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\nfloat PHI=1.61803398874989484820459;// Î¦ = Golden Ratio\n\nfloat random(in vec2 xy,in float seed){\n    float f=length(fract((cross((cross(fract(xy.yxy*PHI*seed)+seed,fract(xy.xyx/seed)+seed)*PHI),vec3(5./PHI,7./PHI,3./PHI)))));\n    return fract(f*seed);\n}\n\nfloat noise(vec2 st){\n    vec2 st0=floor(st);\n    vec2 st1=.5-cos((st-st0)*PI)*.5;\n    float a0=random(vec2(int(st0.x),int(st0.y)),1.);\n    float a1=random(vec2(int(st0.x)+1,int(st0.y)),1.);\n    \n    float a2=random(vec2(int(st0.x),int(st0.y)+1),1.);\n    float a3=random(vec2(int(st0.x)+1,int(st0.y)+1),1.);\n    \n    float b0=(a1-a0)*st1.x+a0;\n    \n    float b1=(a3-a2)*st1.x+a2;\n    return(b1-b0)*st1.y+b0;\n}\n\nfloat LineHeight(vec2 uv){\n    return noise(uv);\n}\n#define lines 20.\n#define height 0.5\n#define edges 0.1\n#define horizontalEdges 0.05\n\nbool HitsLines(vec2 uv,float vOffset){\n    if(uv.x < horizontalEdges || uv.x > 1.-horizontalEdges)\n        return false;\n    uv.x = uv.x * (1.-horizontalEdges*2.) + horizontalEdges;\n    for(float i=lines;i >= 0.;i--){\n        vec2 nuv = uv + vec2(0,((i + 0.5)/(lines)-1.) * (1.-edges*2.) - edges);\n        vec2 check = vec2(uv.x* 20. + iTime * (abs(lines/2.-i) * -0.25 + 1.125),i * 10.);\n        float h = (LineHeight(check + vec2(0,vOffset))-0.5) * height * (1.-pow(abs(2.*(uv.x - 0.5)) + 0.15,0.25));\n        if(h > nuv.y)\n            return false;\n        if(h < nuv.y && h > nuv.y - 0.004)\n            return true;\n    }\n    return false;\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    float r = (HitsLines(fragCoord/iResolution.xy, 0.25))?0.5:0.;\n    float g = (HitsLines(fragCoord/iResolution.xy, -0.25))?0.5:0.;\n    float b = (HitsLines(fragCoord/iResolution.xy, -0.5))?0.5:0.;\n    fragColor=(HitsLines(fragCoord/iResolution.xy,0.))?vec4(1,1,1,1):vec4(r,g,b,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}