{
    "Shader": {
        "info": {
            "date": "1618281809",
            "description": "Parabola parametrized by three control points.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdlSRn",
            "likes": 7,
            "name": "Parabola - Three-Point Control",
            "published": 3,
            "tags": [
                "control",
                "three",
                "point",
                "parabola",
                "systemofequations"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Solved by hand\n//vec3 getQuadraticCoeffs(in vec2 a, in vec2 b, in vec2 c) {\n//    float ax2 = a.x * a.x, bx2 = b.x * b.x, cx2 = c.x * c.x;\n//\n//    float p1 = ax2 * b.x - a.x * bx2, p2 = ax2 * c.x - a.x * cx2;\n//    float q1 = ax2 - bx2, q2 = ax2 - cx2;\n//    float r1 = a.y * bx2 - ax2 * b.y, r2 = a.y * cx2 - ax2 * c.y;\n//\n//    float qc = (p2 * r1 - p1 * r2) / (p1 * q2 - p2 * q1);\n//    float qb = (-q1 * qc - r1) / p1;\n//    float qa = (a.y - qc - qb * a.x) / (a.x * a.x);\n//\n//    return vec3(qa, qb, qc);\n//}\n\n// Matrix solving\nvec3 getQuadraticCoeffs(in vec2 a, in vec2 b, in vec2 c) {\n    return vec3(a.y, b.y, c.y) * inverse(mat3(a.x * a.x, a.x, 1.0, b.x * b.x, b.x, 1.0, c.x * c.x, c.x, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    float t = 0.25 * unit;\n    vec3 color = vec3(1.0);\n\n    // Load control points\n    vec2 p1 = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 p2 = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 p3 = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n\n    // Grid\n    draw(abs(mod(uv.x + 0.125, 0.25) - 0.125) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(mod(uv.y + 0.125, 0.25) - 0.125) + t, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Parabola\n    vec3 coeffs = getQuadraticCoeffs(p1, p2, p3);\n    float f = coeffs[0] * uv.x * uv.x + coeffs[1] * uv.x + coeffs[2];\n    float d = 2.0 * coeffs[0] * uv.x + coeffs[1];\n    draw(abs(uv.y - f) / sqrt(1.0 + d * d) - t, vec3(0.6, 0.0, 0.6));\n\n    // Draw control points\n    draw(length(uv - p1) - 0.075, vec3(0.0));\n    draw(length(uv - p2) - 0.075, vec3(0.0));\n    draw(length(uv - p3) - 0.075, vec3(0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SELECTION_RADIUS 0.2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor.xy = vec2(-2.0,  1.0);\n        if (iFragCoord == ivec2(1, 0)) fragColor.xy = vec2( 0.0, -1.0);\n        if (iFragCoord == ivec2(2, 0)) fragColor.xy = vec2( 2.0,  1.0);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.x < 3 && iFragCoord.y == 0) {\n            vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            if (length(mouse - fragColor.xy) < SELECTION_RADIUS) {\n                fragColor.xy = mouse;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}