{
    "Shader": {
        "info": {
            "date": "1699633525",
            "description": "Buitfull line combinations of random start, have hard thinking of ways to make it more performant",
            "flags": 0,
            "hasliked": 0,
            "id": "DldyRS",
            "likes": 14,
            "name": "LineShading-bouncy",
            "published": 3,
            "tags": [
                "lines",
                "colorful",
                "random",
                "bouncy"
            ],
            "usePreview": 0,
            "username": "MrNissenDK",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "precision lowp float;\n#define numOfPoints 50\n#define seed (653165)\n#define PointDist 0.4\n#define Thickness 0.003\n#define RandomPoints 1000\n\nvec2 posCache[numOfPoints];\nvec2 points[numOfPoints];\nvec3 colors[numOfPoints];\n\nfloat ConvertToFloat(uint n)\n{\n    uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask\n    uint ieeeOne = 0x3F800000u;      // 1.0 in IEEE binary32\n\n    n &= ieeeMantissa;\n    n |= ieeeOne;\n\n    float f = uintBitsToFloat(n);\n    return f - 1.0;\n}\n//pcg_hash https://stackoverflow.com/questions/70985360/how-to-create-a-3d-random-gradient-out-of-3-passed-values-in-a-fragment-shader\n//minor change to add a seed value\nfloat rand(uint i) {\n    uint state = i + (i * 747796405u + 2891336453u) ^ uint(seed);\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return ConvertToFloat((word >> 22u) ^ word);\n}\n\nfloat rand(float i) { return rand(floatBitsToUint(i)); }\n\nvec3 hash23(vec2 src) {\n    vec3 randV = vec3(rand(src.x), rand(src.y), rand(src.x * src.y + src.x + src.y + 8912.2793));\n    randV += dot(randV, randV+vec3(3799.6274,9567.3518,8575.2724));\n    \n    return fract(randV);\n}\nvec2 hash32(vec3 src) {\n    vec2 randV = vec2(rand(src.x), rand(src.y));\n    randV *= dot(randV, vec2(8183.0119, src.z));\n    \n    return fract(randV);\n}\nvec2 hash12(float i) {\n    vec2 randV = vec2(rand(i), rand(i + 6939.9375));\n    randV *= dot(randV, vec2(8183.0119,4912.9833));\n    \n    return fract(randV);\n}\nvec2 hash12(int i) {return hash12(intBitsToFloat(i));}\nvec2 pointPos(int pointId, float t) {\n    vec2 pos = posCache[pointId];\n    vec2 aceleration = hash32(vec3(pos, float(seed)));\n    vec2 A = vec2(\n        abs(mod(t * aceleration.x + pos.x, 2.0) - 1.0),\n        abs(mod(t * aceleration.y + pos.y, 2.0) - 1.0)\n    );\n    return A;\n}\n\nfloat dist2segment(vec2 p1, vec2 p2, vec2 p) {\n    vec2 ab = p2 - p1;\n    vec2 ap = p - p1;\n\n    float t = dot(ap, ab) / dot(ab, ab);\n\n    t = clamp(t, 0.0, 1.0);\n\n    vec2 closestPoint = p1 + t * ab;\n\n    return length(p - closestPoint);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    float time = iTime * 0.2;\n    vec3 col = vec3(0);\n    vec3 mixColor;\n    float dist, lineDist, t, dist2Pixel;\n    for (int i = numOfPoints - 1; i >= 0; --i) {\n        posCache[i] = hash12(i);\n        points[i] = (pointPos(i, time) - 0.5) * iResolution.xy / iResolution.y;\n        colors[i] = hash23(posCache[i]);\n        dist2Pixel = distance(points[i], uv);\n        if(dist2Pixel > PointDist) continue;\n        \n        for (int j = i + 1; j < numOfPoints; ++j) {\n            dist = distance(points[i], points[j]);\n            if (dist > PointDist) continue;\n            lineDist = dist2segment(points[i], points[j], uv);\n            if (lineDist >= Thickness) continue;\n            \n            vec2 ab = points[j] - points[i];\n            vec2 ap = uv - points[i];\n            t = dot(ap, ab) / dot(ab, ab);\n            mixColor = mix(colors[i], colors[j], clamp(t, 0.0, 1.0));\n            col += mixColor * (PointDist - dist) * 2.0;\n        }\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}