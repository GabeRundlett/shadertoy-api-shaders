{
    "Shader": {
        "info": {
            "date": "1578710055",
            "description": "Experimenting with a few things. ",
            "flags": 0,
            "hasliked": 0,
            "id": "wlVGDR",
            "likes": 24,
            "name": "The Path to Keyboard",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "piano"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 648
        },
        "renderpass": [
            {
                "code": "// Plento\nvec2 R;\n\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sdRbox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - .05;\n}\n\nfloat minDist = 999.;\nfloat mat = -1.;\n\nvoid cd(float tDist, float m, out float tmat){\n\tif(tDist <minDist){\n\t\tminDist = tDist;\n\t\tmat = m;\n\t\ttmat = m;\n\t}\n}\n\nvec2 map(vec3 rp){\n    float d = 999.;\n    float hmat = -1.;\n    \n    rp.xy *= rot(rp.z*.15);\n    rp.xz *= rot(rp.z*.17);\n    \n    rp.z += iTime;\n    \n    vec3 b = vec3(0., 0., .7);\n    vec3 rpr = mod(rp, b)-b*.5;\n   \n    d = min(d, sdRbox(rpr, vec3(1.25, .15, .3)));\n    cd(d, .0, hmat);\n    \n    rpr = mod(rp-vec3(.6, 0.07, .35), b)-b*0.5;\n    \n    if( ((int(round(rp.z/.7))%7)&3)!=0 )// Iq's fix\n    \td = min(d, sdRbox(rpr, vec3(.65, .2, .05)));\n    \n    cd(d, 1., hmat);\n    \n    rpr = mod(rp-vec3(1.9, 0., .0), b)-b*.5;\n    \n    return vec2(d, hmat);\n}\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy).x + \n        e.yyx * map(pos + e.yyx).x + \n        e.yxy * map(pos + e.yxy).x + \n        e.xxx * map(pos + e.xxx).x);\n}\n\nvec2 march(vec3 rd, vec3 ro){\n \tfloat t = 0.;   \n    vec2 d = vec2(0);\n    \n    for(int i = 0; i < 80; i++){\n    \td = map(ro + rd*t); \t   \n        if(abs(d.x) < .002 || t > 90.){\n            break;\n        }\n        t += d.x * .75;\n    }   \n    return vec2(t, d.y);\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n, vec2 u, float t, float m){\n    vec3 lp = vec3(0., 14., -5.);\n    vec3 ld = normalize(lp-p);\n    vec3 ref = reflect( rd, n );\n    \n    float lgd = length(lp - p);\n    float faloff = 1.-exp(-(4. / lgd));\n    \n    float fres = smoothstep(-.5, .5, dot(rd, n));\n    float spec = pow(max(dot(normalize(reflect(ld, n)), rd), 0.), 12.);\n    float dom = smoothstep(-.2, .2, ref.y);\n    float dif = max(dot(n, ld), .0);\n    \n    vec3 col = vec3(0);\n    \n    if(m == 0.)col = vec3(.9);\n    if(m == 1.)col = vec3(.03);   \n    \n    vec3 lig = vec3(0);\n    \n    lig += .4*fres*vec3(1);\n    lig += .25*dom*vec3(.2,.4,1.)*dom;\n    lig += 2.*dif*vec3(1., 1., 1.) * faloff;\n    col *= lig;\n    col += vec3(.75, .8, .8) * spec * .45;\n    \n    col *= smoothstep(.21, 0., t/100.);\n    \n\treturn col;   \n}\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - .5*R.xy)/R.y;\n    vec2 m = iMouse.xy / R.xy-.5; \n    m.x *= R.x/R.y;\n    \n    vec3 rd = normalize(vec3(uv, .6));\n    rd = normalize(vec3(uv, 1. - dot(uv, uv) * .5));\n    vec3 ro = vec3(-2.6, .65, -.55);\n    \n    rd.xz*= rot(-1.45);\n    rd.yz *= rot(.6);\n    \n    vec2 t = march(rd, ro);\n    \n    vec3 n = normal(ro + rd*t.x);\n    vec3 col = color(ro + rd*t.x, rd, n, u, t.x, t.y);\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}