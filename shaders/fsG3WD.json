{
    "Shader": {
        "info": {
            "date": "1631538272",
            "description": "My first GLSL",
            "flags": 0,
            "hasliked": 0,
            "id": "fsG3WD",
            "likes": 7,
            "name": " Macbeth Chart",
            "published": 3,
            "tags": [
                "2d",
                "static"
            ],
            "usePreview": 0,
            "username": "mosan_hoshi",
            "viewed": 304
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // color values for color chart \n  // https://www.nationalphoto.co.jp/2Fspot/tips_colorchart.htm\n  float[24] rs =\n    float[](0.450980392,0.760784314,0.384313725,0.341176471,0.521568627,0.403921569,\n            0.839215686,0.31372549,0.756862745,0.368627451,0.615686275,0.878431373,\n            0.219607843,0.274509804,0.68627451,0.905882353,0.733333333,0.031372549,\n            0.952941176,0.784313725,0.62745098,0.478431373,0.333333333,0.203921569);\n\n  float[24] gs =\n    float[](0.321568627,0.588235294,0.478431373,0.423529412,0.501960784,0.741176471,\n            0.494117647,0.356862745,0.352941176,0.235294118,0.737254902,0.639215686,\n            0.239215686,0.580392157,0.211764706,0.780392157,0.337254902,0.521568627,\n            0.952941176,0.784313725,0.62745098,0.478431373,0.333333333,0.203921569);\n\n  float[24] bs =\n    float[](0.266666667,0.509803922,0.615686275,0.262745098,0.694117647,0.666666667,\n            0.17254902,0.650980392,0.388235294,0.423529412,0.250980392,0.180392157,\n            0.588235294,0.28627451,0.235294118,0.121568627,0.584313725,0.631372549,\n            0.949019608,0.784313725,0.62745098,0.474509804,0.333333333,0.203921569);\n\n  //consts \n  int x_tile_num = 6;\n  int y_tile_num = 4;\n  float w = iResolution.x / min(iResolution.x, iResolution.y);\n  float h = iResolution.y / min(iResolution.x, iResolution.y);\n  float margin = 0.05;\n  float padding = 0.02;\n  float tile_length = min((w - 2. * margin - float(x_tile_num - 1) * padding) / float(x_tile_num), // x tile length\n                          (h - 2. * margin - float(y_tile_num - 1) * padding) / float(y_tile_num));// y tile length \n  float y_margin = (h - float(y_tile_num) * tile_length  - float(y_tile_num - 1) * padding) /  2.0;\n  float x_margin = (w - float(x_tile_num) * tile_length  - float(x_tile_num - 1) * padding) /  2.0;\n\n\n  // normalize position(y:.0~1.0)\n  vec2 uv=fragCoord.xy / min(iResolution.x, iResolution.y);\n  // flip y-axis (left-top is (x,y)=(0,0))\n  uv.y = h - uv.y;\n\n  // draw color tiles\n  for(int y=0;y<4;y=y+1){\n    for(int x=0;x<6;x=x+1){\n      float left_x = x_margin + float(x) * (tile_length + padding);\n      float top_y = y_margin + float(y) * (tile_length + padding);\n      int tile_idx = y * 6 + x;\n      if((uv.x >= left_x) && (uv.x < (left_x + tile_length))){\n        if((uv.y >= top_y) && (uv.y < (top_y + tile_length))){\n          fragColor=vec4(rs[tile_idx],gs[tile_idx],bs[tile_idx],0.);\n        }\n        }\n    }\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}