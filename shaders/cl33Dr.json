{
    "Shader": {
        "info": {
            "date": "1697696295",
            "description": "Hexagon tilings of the second kind, with four aspects of the base tile, two being mirror images.\nAnimation mode by default, press 'a' to turn off & use mouse to set control points.\n\n<mouse>,<up/down>,c,d,g,p,q,r,s,x,z also do things.",
            "flags": 48,
            "hasliked": 0,
            "id": "cl33Dr",
            "likes": 12,
            "name": "Type 2 Hexagonal Tilings",
            "published": 3,
            "tags": [
                "hexagon",
                "tilings"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "// Type 2 Hexagonal Tilings\n//\n// There are 3 types of convex monohedral hexagonal tilings, see:\n// https://en.wikipedia.org/wiki/Hexagonal_tiling#Monohedral_convex_hexagonal_tilings\n// or eg. Grunbaum and Shepard for details, and the same constructions\n// works for non-convex tiles as well (though there may be non-convex tilings\n// that are not constructible in this way).\n//\n// This shader constructs a Type 2 tiling based on a rectangular\n// repeating unit, and using two control points within the unit to\n// construct the tiling (zooming in and using 'g' to see the underlying grid\n// will probably be more useful than me trying to explain it). For\n// some positions of the control points, the tile boundary intersects\n// itself, or the tile is incompletely drawn (a limitation of doing this\n// in a fragment shader).\n//\n// The resulting tiling consists of translations and rotations of the\n// basic tile and its mirror image.\n//\n// Various subtypes of tiling are possible, eg. if one or more sides of the basic\n// tile has length zero, or a corner angle is 180Â°, then the tiling is in fact\n// of pentagons, quadrilaterals or triangles. Keys q,r,s show some possibilities.\n//\n// If the edges of the tile are replaced with curves with appropriate symmetry,\n// then we have tiling satisfying a criterion similar to the 'Conway criterion'\n// for Type 1 Tilings: https://en.wikipedia.org/wiki/Conway_criterion\n//\n// By varying the control point positions across the image we can do\n// 'parquet deformations' - currently just a displacement to the two\n// control points. Better ways are possible I'm sure.\n//\n// <mouse>: drag control points when not in animation mode\n// <up/down>: zoom in & out\n// a: animation\n// c: colouring\n// g: show grid\n// p: show grid parity\n// q,r,s: use special values for the control points\n// x: don't show control points\n// z: extra zoom out\n\n// Point reflect p in q\nvec2 pointreflect(vec2 p, vec2 q) {\n  return 2.0*q - p;\n}\n\n// Vertical glide reflection\nvec2 vglide(vec2 q, vec2 a) {\n  return vec2(a.x-q.x,a.y+q.y);\n}\n\nint wind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) return 1;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) return -1;\n  }\n  return 0;\n}\n\nfloat vmin(vec2 p) {\n  return min(p.x,p.y);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  setscale();\n  vec2 p = map(fragCoord);\n  float px = 1.4*2.0*scale/iResolution.y;\n  vec2 a = getselection(0); // rectangle corner\n  p /= a;\n  ivec2 ix = ivec2(floor(p));\n  p = mod(p+1.0,2.0)-1.0;\n  p *= a;\n  bool parity = p.x < 0.0 == p.y < 0.0;\n  ivec2 inc = ivec2(1);\n  if (p.y < 0.0) { \n    p = -p; inc = -inc;\n  }\n  if (p.x < 0.0) {\n    p.x = a.x+p.x;\n    p.y = a.y-p.y;  \n    inc.y = -inc.y;\n  }\n  // q0,q,r,r0\n  vec2 q = getselection(1);\n  vec2 r = getselection(2);\n  if (!key(CHAR_A)) {\n    // Keep control points within two rectangle units. \n    float t = 0.5*iTime;\n    q = mod(vec2(0.5,0.8)+0.618*t*vec2(1,0.618),2.0*a*vec2(1,2));\n    q = min(q,2.0*a*vec2(1,2)-q);\n    q.y -= a.y;\n    r = mod(vec2(0.8,0.2)+t*vec2(1,0.618),2.0*a*vec2(1,2));\n    r = min(r,2.0*a*vec2(1,2)-r);\n    r.y -= a.y;\n  }\n  if (!key(CHAR_D)) {\n    vec2 off = 0.1*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    q += off;\n    r += off.yx;\n  }\n  if (key(CHAR_Q)) q = vec2(0);\n  if (key(CHAR_R)) r = vec2(a.x,0);\n  if (key(CHAR_S)) r = q;\n  vec2 q0 = pointreflect(q,vec2(0));\n  vec2 r0 = pointreflect(r,vec2(a.x,0));\n  vec2 Q0 = vglide(q0,a), Q = vglide(q,a);\n  vec2 R = vglide(r,a), R0 = vglide(r0,a);\n  vec2 R1 = r + vec2(0,2.0*a.y);\n  vec2 q1 = Q - vec2(0,2.0*a.y);\n\n  float d = 1e8;\n  d = min(d,segment(p,q0,q));\n  d = min(d,segment(p,q,r));\n  d = min(d,segment(p,r,r0));\n  d = min(d,segment(p,Q0,Q));\n  d = min(d,segment(p,Q,R));\n  d = min(d,segment(p,R,R0));\n  d = min(d,segment(p,q,R));\n  d = min(d,segment(p,Q,R1));\n  d = min(d,segment(p,q1,r));\n  \n  // Next seven are just drawn as lines to fill in some\n  // gaps, we don't use these segments as boundaries.\n  d = min(d,segment(p,r0,Q0));\n  d = min(d,segment(p,r0,q0+vec2(2.0*a.x,0)));\n  d = min(d,segment(p,Q0,R0+vec2(2.0*a.x,0)));\n\n  d = min(d,segment(p,q0,R0-vec2(0,2.0*a.y)));\n  d = min(d,segment(p,q0,r0-vec2(2.0*a.x,0)));\n\n  d = min(d,segment(p,R0,q0+vec2(0,2.0*a.y)));\n  d = min(d,segment(p,R0,Q0-vec2(2.0*a.x,0)));\n  \n  // Check for which region p is in. There are\n  // some redundant calls to wind() here (since\n  // wind(p,q,r) = -wind(p,r,q), more or less).\n  int k = wind(p,r0,r)+wind(p,r,q1);\n  if (k > 0) ix += inc*ivec2(1,-1);\n  k = wind(p,q1,r)+wind(p,r,q)+wind(p,q,q0);\n  if (k > 0) ix.y -= inc.y;\n  k = wind(p,q0,q)+wind(p,q,R)+wind(p,R,R0);\n  if (k > 0) ix.x -= inc.x;\n  k = wind(p,R0,R)+wind(p,R,Q)+wind(p,Q,R1);\n  if (k > 0) ix.y += inc.y;\n  k = wind(p,R1,Q)+wind(p,Q,Q0);\n  if (k > 0) ix += inc;\n\n  vec3 col = vec3(1,1,0.8);\n  float h = rand(ix); // float(ix.x+ix.y)/32.0;\n  if (!key(CHAR_C)) col = hsv2rgb(h,0.4,1.0);\n\n  if (key(CHAR_P) && parity) col *= 0.9;\n  col *= smoothstep(0.0,px,d-0.01);\n  if (key(CHAR_G)) {\n    vec2 tmp = min(p,a-p);\n    col *= smoothstep(0.0,px,vmin(min(p,a-p)));\n  }\n  if (!key(CHAR_X)) {\n    // Show the control points\n    float d = 1e8;\n    vec2 p = map(fragCoord);\n    d = min(d,distance(p,a));\n    d = min(d,distance(p,q));\n    d = min(d,distance(p,r));\n    col *= smoothstep(0.0,px,d-0.06);\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat scale = 2.0;\n\nconst float PI = 3.1415927;\n\n#define map(screen) (scale*(2.0*screen-iResolution.xy)/iResolution.y)\n\nint nselections = 3;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(1.5,1);\n  if (i == 1) return vec2(1.0,0.5);\n  if (i == 2) return vec2(1.0,-0.4);\n  return vec2(0);\n}\n\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n//#define setscale() (scale *= !key(CHAR_Z) ? 1.0 : 2.0)\n#define setscale() \\\n  (scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))), \\\n   scale *= key(CHAR_Z) ? 2.0 : 4.0)\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);       \n  return v * mix(vec3(1.0),rgb,s);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nint idiv(int a,int b) {\n  return a >= 0 ? a/b : -((-a+b-1)/b);\n}\n\nint imod(int a, int b) {\n  int d = idiv(a,b);\n  return a-d*b;\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\nconst int CHAR_K = 75;\n// const int CHAR_L = 76;\nconst int CHAR_M = 77;\n// const int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.xyz = vec3(initselection(i-1),1234); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}