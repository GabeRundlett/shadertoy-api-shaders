{
    "Shader": {
        "info": {
            "date": "1727295105",
            "description": "eat the red pills, don't cross yourself.  \nleft/right key to turn\nmouse controls camera.  Tune speed in Common:slow",
            "flags": 48,
            "hasliked": 0,
            "id": "43jyDW",
            "likes": 26,
            "name": "First-person Snake on torus",
            "published": 3,
            "tags": [
                "game",
                "torus",
                "uv",
                "snake",
                "conformal",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "// First-Person variant of  https://shadertoy.com/view/XXSyz1\n\n//#define rot(a)  mat2( cos(a+vec4(0,11,33,0)) )              // rotation                  \n  #define rot(a)  mat2(cos(a),sin(a),-sin(a),cos(a))\n#define hue(v)  ( .6 + .6 * cos( v  + vec4(0,23,21,0)  ) )    // hue\n\nconst float R0 = 20.  , R1 = 10.,   // S = 40 x 23 tiles      // large and small radii\n            r  = R1/R0, ir = sqrt(1.-r*r);                    // conformal: antiderivative of 1/circonf(b)\n\n#define conf(b) ( .996*  2./ir* atan( (r-1.)/ir* tan(b/2.) )  /* NB: tan(b/2) = ( -d + sqrt(d*d+q.y*q.y) )/q.y ) */ \\\n                ) // ,b) to cancel\n\nvec3 pos(vec2 I, float e ) {                                  // --- pos on torus\n    I = ( I + vec2(.5,-.5) ) / S * 6.28;                      // torus angle coordinates\n    float a = I.x, b = I.y, l;\n // b = conf(b);  // not working: inverse needed              // conformal correction         \n    l = R0 + e*R1*cos(b);\n    return vec3( cos(a)*l , e*R1*sin(b) , sin(a)*l );         // torus 3D coordinates\n}\n\nvoid mainImage(out vec4 O, vec2 u) {    \n    float d, l, i, k = 2.,  // .9                             // tile multiplier\n          t = T(51).z/.17;                                    // sub-time\n    vec3  R = iResolution,  D, p, q, L,U;\n                                                              // --- camera\n    vec2  P = T(50).xy, \n          F = normalize( mix( dir(T(51).w), dir(T(50).z), t));// smooth angular direction\n    p = pos( P +(t-2.)*F , 1.5 );                             // pos cam: 2 cells after head, +50% radius above surface\n    D = normalize( pos( P + (t+2.)*F , 1. ) - p );            // lookat: 2 cells in front of head, on surface\n    L = normalize( cross(pos(P,1.1)-pos(P,1.) , D ));         // frame: left, up vector. pos(P,1.1)-pos(P,1.) = normal\n // p = 90./R, \n // D = normalize( pos( T(50).xy , 1. ) - p );                // lookat\n // L = normalize(cross(D,vec3(0,1,0)));                      // frame: left, up vector\n    U = cross(D,L);\n    u = ( u+u - R.xy ) / R.y;\n    D = normalize( u.x*L + u.y*U + 1.*D ); // 4.              // ray direction\n\n    O *= 0.; l-=l, t=9.;\n    if ( T(50).w < 0. ) O = hue(30.*iTime);                   // collision: fail display\n    for ( ; i++ < 1e2 ; ) {                                   // --- ray-marching\n        q = p,\n        l += t = abs( length(vec2(d=length(q.xz)-R0,q.y)) - R1); // abs for inside + outside\n        \n        float a = atan(q.z,q.x), b = atan(q.y,d);             // base torus parameterization\n     // b = conf(b);                                          // conformal correction\n        q = vec3( k*R0*a/6.283, round(k*R1*b/6.283), 0 );     // cell id\n        a = sin(k*R0*a/2.), b = cos(k*R1*b/2.);\n        d = sqrt( 1. - min(abs(a)*R.y/80.,1.) * min( abs(b)*R.y/80.,1.) )  / exp( (l-10.)/30. ); \n     // d = sqrt( 1. - min(abs(a)/fwidth(a),1.) * min( abs(b)/fwidth(b),1.) ) / exp( (l-10.)/30. ); // color: mesh * depth darkening\n        if ( t < .01 ) \n          { O += d;                                           // draw mesh\n            d = T(mod(q.xy,S)).x;                             // cell content\n            if ( d > 0. ) O.g ++;                             // snake cell\n            if ( d < 0. ) O.r ++;                             // pill cell\n            t = .2;                                           // traverse the layer and continue\n          }\n        p += t*D;                                             // step forward = dist to obj          \n    }\n // u = round(R.y*u/2.); if (u.x*u.y==0.) O.r++;              // debug: show center\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define key(a) (texelFetch(iChannel3,ivec2(a,1),0).x > 0.)      // LEFT:37  UP:38  RIGHT:39  DOWN:40 \n#define H(t)    fract(sin(mod( (t) *vec2(12.9898, 78.233 ), 6.28)) * 3758.5453)\n\nvec2 new() {                                                    // --- create a new pills\n    vec2 P;\n    for ( float i; i++ < 50.; ) {\n        P = floor( S* H(iTime - i*17.971) );\n        if ( T(P.xy).x == 0. && P != T(50).xy ) return P;       // ok if free cell\n    }\n    return vec2(-1);\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    O = T(U);                                                   // restore state\n    if (iFrame < 1 || T(50).w <  1. ) {                         // --- init\n        if  ( T(50).w < 0. ) {                                  // wait 2\" after loosing\n            if ( U == vec2(50) )  O.w += 1.;\n            return;\n        }\n        O *= 0.;\n        if ( U == vec2(50) )                                    // init snake pos,dir,length\n            O = vec4( floor(S*H(iTime)),  floor(4.*H(iTime+.5).x), 5 );\n        if ( U == new() ) O.x = -1.;                            // set a pills\n        return;\n    }\n    float c;                                                    // --- key events management\n    if ( U == vec2(51) ) c = key(37) ? 1. : key(39) ? 0. : -1., // push events key events during pause\n                         O.z > slow && O.y > 0. ? O.y-- : c,    // once accounted, eat event\n                         c >= 0. ? O.y++, O.x = float(int(c + 2.*O.x) & 0xfff) :c, // 0.x bits = FIFO, 0.y = next slot\n                         O.z += iTimeDelta;                     // to control the pause time\n                         \n    if (T(51).z <= slow ) return;                               // slow game\n    if ( U == vec2(51) ) O.w = T(50).z,                         // store previous direction (for smooth turn display)\n                         O.z = 0.;                              // event eaten, reset delay timer\n\n    else if ( U == vec2(50) ) {                                 // --- snake control\n        c = T(51).y; if (c > 0.) c = ((int(T(51))>>int(c-1.))&1) > 0 ? 1. : -1.; // c = pop bufferized action\n        O.z += c;                                               // user changes direction\n        O.xy = mod( O.xy + dir(O.z) , S );                      // pos += dir\n        if ( T(O.xy).x < 0. ) O.w++;                            // eat pills\n        if ( T(O.xy).x > 0. ) O.w = -120.;                      // cross itself: loose !\n    }\n    else if( U.x < S.x && U.y < S.y ) {                         // --- grid management\n        vec4 P = T(50);                                         // snake state\n        if (O.x > 0.) O.x--;                                    // snake trail\n        if ( U==P.xy ) O.x = P.w;                               // snake head: timer = length\n        if ( T(P.xy).x < 0. && U==new() ) O.x = -1.;            // pills eaten: new one            \n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float slow = .17;                                            // 1 / speed\nvec2 S = vec2(40,23);                                        // 40 x 23 tiles\n\n#define T(U)    texelFetch(iChannel0, ivec2(U), 0)\n#define dir(i)  mat4x2( 1,0, 0,1, -1,0, 0,-1 )[ int(i) % 4 ] // direction vector(angleId) on map\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}