{
    "Shader": {
        "info": {
            "date": "1675924259",
            "description": "testPattern",
            "flags": 0,
            "hasliked": 0,
            "id": "ctjXWR",
            "likes": 0,
            "name": "testPattern",
            "published": 3,
            "tags": [
                "testpattern"
            ],
            "usePreview": 0,
            "username": "yym28088",
            "viewed": 159
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n// in the GPU, don't try to be smart and use a triangle wave instead).\n\n// See https://iquilezles.org/articles/palettes for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float bands = 11.0;\n    \n    float curr = bands;\n\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    // animate\n    //p.x += 0.01*iTime;\n    \n    // Vec1 -> Brightness\n    // Vec2 -> Saturation\n    // Vec3 -> Size of interval (if all components equal)\n    // Vec4 -> Style of interval (components) \n    // \t\t\t& position on interval (if adding single float)\n    \n    // compute colors\n    vec3 col = vec3(0);\n    if( p.y>((curr -= 1.0)/bands) ) { // Rainbow (orig)\n        col=pal(p.x,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(0.8,0.8,0.8),vec3(0.0,0.33,0.67)+0.21);\n    } /*else if( p.y > ((curr -= 1.0)/bands) ) { // Rainbow (more yellow, narrower green, deeper red)\n        col=pal(p.x,vec3(0.55,0.4,0.3),vec3(0.50,0.51,0.35)+0.1,vec3(0.8,0.75,0.8),vec3(0.075,0.33,0.67)+0.21);\n    } else if( p.y > ((curr -= 1.0)/bands) ) { // Black -> Blue -> White (cooler)\n        col=pal(p.x,vec3(0.55),vec3(0.8),vec3(0.29),vec3(0.00,0.05,0.15) + 0.54 );\n    } else if( p.y > ((curr -= 1.0)/bands) ) { // Black -> Blue -> White (warmer)\n        col=pal(p.x,vec3(0.5),vec3(0.55),vec3(0.45),vec3(0.00,0.10,0.20) + 0.47 );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(0.9),vec3(0.3,0.20,0.20) + 0.31 );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(0.9),vec3(0.0,0.10,0.20) + 0.47 );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.5),vec3(0.5),vec3(1),vec3(0.0,0.33,0.67));\n    } else if( p.y > ((curr -= 1.0)/bands) ) {\n        col=pal(p.x,vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    }*/\n\n    // band\n    //float f = fract(p.y*bands);\n    // borders\n    //col *= smoothstep( 0.49, 0.47, abs(f-0.5) );\n    // shadowing\n    //col *= 0.5 + 0.5*sqrt(4.0*f*(1.0-f));\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}