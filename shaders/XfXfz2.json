{
    "Shader": {
        "info": {
            "date": "1724009154",
            "description": "pretty fast smoothsteps, i think",
            "flags": 0,
            "hasliked": 0,
            "id": "XfXfz2",
            "likes": 0,
            "name": "smoothstep experimentation",
            "published": 3,
            "tags": [
                "smoothstep",
                "sstep"
            ],
            "usePreview": 0,
            "username": "dottedboxguy",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "//thanks to rarebeeph on discord for the help!!\n\n//second order derivative is continous everywhere, but more costly\n//green line\nfloat sstep_4th_order(float init_x){\n    float sgn = sign(init_x);\n    float x = abs(init_x);\n    float x3 = x*x*x;\n    float x4 = x3*x;\n    return sgn*min(1., 2.*(x - x3) + x4); \n} \n\n//not the case for this one, but cheaper\n//blue line\nfloat sstep_2nd_order(float init_x){\n    float x = clamp(init_x,-1.,1.);\n    x = abs(x);\n    return sign(init_x)*(x*(2.-x));\n}\n\n//the least smooth smoothstep possible, it's a circle wave\nfloat circlestep(float init_x){\n    float x = clamp(init_x,-1.,1.);\n    return sign(x)*sqrt(2.*abs(x)-x*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv*=10.;\n    vec3 col =vec3(0.);\n    \n    float y_2nd = sstep_2nd_order(uv.x);\n    col += vec3(.0, .0, .7)*sstep_2nd_order(iResolution.y/30.*(uv.y-y_2nd)+1.)*sstep_2nd_order(iResolution.y/30.*(y_2nd-uv.y)+1.);\n    \n    float y_4th = sstep_4th_order(uv.x);\n    col += vec3(.0, .7, .0)*sstep_2nd_order(iResolution.y/30.*(uv.y-y_4th)+1.)*sstep_2nd_order(iResolution.y/30.*(y_4th-uv.y)+1.);\n    \n    float y_circle = circlestep(uv.x);\n    float y_circle_aa = abs(circlestep(uv.x+20./iResolution.y)-y_circle);\n    col += vec3(.7, .0, .0)*sstep_2nd_order(iResolution.y/30.*(uv.y-y_circle)+1.+y_circle_aa)*sstep_2nd_order(iResolution.y/30.*(y_circle-uv.y+y_circle_aa)+1.);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}