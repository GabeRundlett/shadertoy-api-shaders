{
    "Shader": {
        "info": {
            "date": "1642805669",
            "description": "I first learned of the super collider tutorials from athibaul in the comments of his featured sahder \"Techno Song (sound)\"\nhttps://www.shadertoy.com/view/sls3WM\nThe link to those tutorials is in those comments, and in the sound tab of this shader.",
            "flags": 8,
            "hasliked": 0,
            "id": "7dXyDf",
            "likes": 8,
            "name": "Super Collider #6 [Iters / Bass]",
            "published": 3,
            "tags": [
                "pulse",
                "wave",
                "super",
                "collider",
                "supercollider"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "\n#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./8.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\nvec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX += STEP_SIZE/2.3;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel0,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\nvoid addC(vec2 st, float char, inout float moveX, inout vec3 col){\nst -= vec2(moveX,0.45);\n\nst *= mat2(cos(iTime),-sin(iTime),sin(iTime),cos(iTime));\nst += vec2(moveX,0.45);\ncol = mix(col,vec3(1.),\n             C(st,vec2(moveX,0.45),moveX,FIRST_LETTER+char));\n    \n}\n\n\n/*\nThe sound Tab again for printing\n*/\n// Super Collider Tutorials\n// https://www.youtube.com/playlist?list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC\n\n/*\nThis isn't exactly what we get at the end of tutorial #3 because\nfor example reverb is something I don't know how to do yet. I \nmostly hack these functions together based on how the creator\nof the videos describes them (plus whatever I can find online \nquickly.)\n*/\n/*\n#define PI acos(-1.)\n\nfloat rnd(float a){return fract(sin(a*208.41)*4962.924);}\n\nfloat ExpRand(float a, float low, float high){\n    float seed = pow(rnd(a),2.);\n    float range = high-low;\n    return seed*range + low;\n}\n\n//random volume for each ear between 0 and 1\nvec2 Splay(float a){\n    return vec2(ExpRand(a,0.,1.),ExpRand(a+124.312,0.,1.) );\n}\n\n//volume of both eara always sums to 1\nvec2 Splay_2(float a){\n    float left = ExpRand(a+1.2,0.,1.);\n    return vec2(left,1.-left);\n}\n\nfloat LFNoise(float t, float freq, float low, float high){\n    float id = floor(t*freq);\n    float fID = fract(t*freq);\n    \n    float seed = mix(rnd(id),rnd(id+1.),smoothstep(0.2,0.5,fID));\n    float range = abs(high-low);\n    return floor(seed*range) + low;\n}\n\nfloat interpolateSins(float t, float freq, float i,\n                          float lowFreq, float highFreq){\n                          \n    float id = floor(t*freq);\n    float fID = fract(t*freq);\n    return  mix(sin(t*2.*PI*ExpRand(i+id,lowFreq,highFreq))*0.5+0.5,\n                sin(t*2.*PI*ExpRand(i+1.+id,lowFreq,highFreq))*0.5+0.5,\n                smoothstep(0.,0.95,fID));\n}\n\nfloat interpolatePartials(float t, float freq, float i,\n                          float lowFreq, float highFreq){\n                          \n    float id = floor(t*freq);\n    float fID = fract(t*freq);\n    return  mix(ExpRand(i+id,lowFreq,highFreq),\n                ExpRand(i+1.+id,lowFreq,highFreq),\n                smoothstep(0.6,0.0,fID));\n}\n\nvec2 dupSin(float t, float num, float lowAmp, float highAmp, \n             float lowFreq, float highFreq, inout vec3 col, vec2 uv){\n\n    vec2 sig = vec2(0.);\n    vec2 stereo = vec2(0.);\n    float amp = 0., ampNext = 0.;\n    float partial = 0.;\n    float partialFreq = 0.;\n    float noise = LFNoise(t,.2,20.,800.);\n    \n    for(float i = 0.; i < num; i++){\n        amp = sin(t*2.*PI*ExpRand(i+1.,lowAmp,highAmp))*0.5+0.5;\n        partialFreq = interpolatePartials(t, 0.2, i, lowFreq, highFreq);\n        partial = interpolateSins(t, 0.2, i, lowFreq, highFreq);\n        //interpolateSinssin(sin(t)*2.*PI*partialFreq)*0.5+0.5;\n        //interpolatePartials(t, 0.2, i, lowFreq, highFreq);\n        //sin(t*2.*PI*ExpRand(i+1.,lowFreq,highFreq))*0.5+0.5;\n        stereo = Splay(i+1.2);\n        sig += partial*amp*stereo;\n        col -= sig.x*smoothstep(0.01,0.0,abs(i - floor(uv.x*num)))/10.;\n    }\n    \n    return sig/7.;\n}\n\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = 0.5 + 0.5*cos(uv.xyy+vec3(0,2,4));\n  //  vec2 sig = dupSin(iTime,10.,0.2,22.,200.,1000., col, uv);\n    // Time varying pixel color\n    \n    vec2 st = uv;\n    \n    float moveX = 0.23;\n    \n    addC(st,_s,moveX,col);  \n    addC(st,_o,moveX,col);\n    addC(st,_u,moveX,col);  \n    addC(st,_n,moveX,col);\n    addC(st,_d,moveX,col);\n    addC(st,_z+32.+5.,moveX,col);\n    addC(st,_i,moveX,col);\n    addC(st,_n,moveX,col);\n   // Output to screen\n   //col = texture(iChannel0,uv).rgb;\n   \n   \n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Super Collider Tutorials\n// https://www.youtube.com/playlist?list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC\n\n/*\nThere are some functions I'm not yet familiar with in \nSuper Collider so this the base I could make with what\nI could figure out.\n*/\n\n#define PI acos(-1.)\n\nfloat rnd(float a){return fract(sin(a*238.41)*49625.924);}\n\nfloat ExpRand(float a, float low, float high){\n    float seed = pow(rnd(a),2.);\n    float range = high-low;\n    return seed*range + low;\n}\n\n//random volume for each ear between 0 and 1\nvec2 Splay(float a){\n    return vec2(ExpRand(a,0.,1.),ExpRand(a+124.312,0.,1.) );\n}\n\n//volume of both eara always sums to 1\nvec2 Splay_2(float a){\n    float left = ExpRand(a+1.2,0.,1.);\n    return vec2(left,1.-left);\n}\n\nfloat LFNoise(float t, float freq, float low, float high){\n    float id = floor(PI*t*freq);\n    float fid = fract(PI*t*freq);\n    float seed = mix(rnd(id),rnd(id+1.),fid);\n    float range = abs(high-low);\n    return seed*range+low;\n}\n\nfloat Saw(float t, float freq, float phase ){\n    return fract((t + phase)*freq);\n}\n\nfloat Sin(float t, float freq, float modulation, float phase){\n    return sin(2.*PI*(t+phase)*freq + modulation*1.);\n}\n\nvec2 TBMBass(float t, float freq, float num){\n\n    vec2 sig = vec2(0.);\n    vec2 stereo = vec2(0.);\n    float ampL = 0., ampR = 0.;\n    \n    for(float i = 1.; i <= num; i++){\n    \n      //amp = Saw(ExpRand(freq*(i+1.),0.99,1.02));\n        ampL = Sin(t, \n                   freq*i, \n                   LFNoise(t, rnd(i+47.)*0.2+0.01, 0.97,1.2), \n                   rnd(i)*PI*2.)\n                  *LFNoise(t, ExpRand(i+1.,.5, 8.), 0.01,1.0);\n                   \n        ampR = Sin(t, \n                   freq*i, \n                   LFNoise(t, rnd(i+13.)*0.2+0.01, 0.95,1.1),\n                   rnd(i+99.)*PI*2.)\n                  *LFNoise(t, ExpRand(i+9.5,.5, 8.), 0.01,1.0);          \n                 \n        //stereo = Splay_2(i);\n        float am = 1. - (i/num);\n        sig += vec2(ampL,ampR)*am*0.4; //*stereo;\n        \n    }\n    \n    return sig;\n}\n\n\nvec2 mainSound( int samp, float time )\n{\n    //return vec2(sin(time*440.*2.*PI+sin(time*10.)*4.));\n    //return vec2(sin((440.+sin(time*10.))*time*2.));//\n    float pluck = mod(time,5.)/5.;\n    float freq = mod(time,10.) < 5. ? 55. : 69.30;\n    return TBMBass(time,freq,10.)*.4*exp(pluck*1.4);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}