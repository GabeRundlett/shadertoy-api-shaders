{
    "Shader": {
        "info": {
            "date": "1492763511",
            "description": "Feel free to tell me how to improve my code ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "MsSyzK",
            "likes": 3,
            "name": "Rotational shader beginner",
            "published": 3,
            "tags": [
                "beginner",
                "smoothstep",
                "rotation"
            ],
            "usePreview": 0,
            "username": "Etilawin",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nvoid grid(vec2 r, vec3 color, inout vec3 pixel)\n{\n    // Grid\n \tpixel  = mix(pixel, color, smoothstep(0.008, 0.004, mod(r.x, 0.1)));\n    pixel  = mix(pixel, color, smoothstep(0.008, 0.004, mod(r.y, 0.1)));\n    // Axis\n    pixel  = mix(pixel, color, smoothstep(0.02,0.01,abs(r.x)));\n    pixel  = mix(pixel, color, smoothstep(0.02,0.01,abs(r.y)));\n}\n\nvec2 rotate(vec2 r, float a)\n{\n\treturn r*mat2(cos(a), -sin(a), sin(a), cos(a));   \n}\n\nvec2 scale(vec2 r, float scalingFactor)\n{\n    return r * (1./scalingFactor);\n}\n\nfloat rect(vec2 r, vec2 topLeft, vec2 bottomRight)\n{\n    float d = 0.005;\n    float ret  = smoothstep(topLeft.x - d,topLeft.x + d , r.x);\n    \t  ret *= smoothstep(topLeft.y - d,topLeft.y + d, r.y);\n    \t  ret *= 1. - smoothstep(bottomRight.x - d, bottomRight.y + d, r.x);\n          ret *= 1. - smoothstep(bottomRight.y -d, bottomRight.y + d, r.y);\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 r  = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    vec2 r2 = rotate(r, PI * iTime / 4.);\n    \t r2 = scale(r2, .5);\n    \n    vec3 pixel = vec3(0.);\n    vec3 col1 = vec3(.6,.6,.6);\n    vec3 col2 = vec3(.4,.4,.4);\n    vec3 col3 = vec3(.1,.5,.7);\n    \n    grid(r, col1, pixel);\n    grid(r2, col2, pixel);\n    \n    pixel = mix(pixel, col3, rect(r, vec2(0., 0.), vec2(0.2, 0.2)));\n    pixel = mix(pixel, col3, rect(r2, vec2(0., 0.), vec2(0.2, 0.2)));\n    \n    fragColor = vec4(pixel, 1.);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}