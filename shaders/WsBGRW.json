{
    "Shader": {
        "info": {
            "date": "1548386742",
            "description": "It's a broken TV :p \nThanks for this community ! comments are welcome :)\nDisable individual effect commenting the defines\nSee the original image holding the mouse button",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBGRW",
            "likes": 22,
            "name": "There's a bug in the TV ",
            "published": 3,
            "tags": [
                "postprocessing",
                "tv",
                "crt",
                "glitch",
                "monitor",
                "bug",
                "processing"
            ],
            "usePreview": 0,
            "username": "thiagoborn",
            "viewed": 2277
        },
        "renderpass": [
            {
                "code": "/*\nInspired by\nhttps://www.shadertoy.com/view/ldXGW4 by https://www.shadertoy.com/user/ehj1\nhttps://www.shadertoy.com/view/XtK3W3 by https://www.shadertoy.com/user/dyvoid\nhttps://www.shadertoy.com/view/Xdl3D8 by https://www.shadertoy.com/user/jmpep\nhttps://www.shadertoy.com/view/ldjGzV by https://www.shadertoy.com/user/ryk\n*/\n\n#define CURVE \n#define SCANS\n#define FLICKS\n#define GRAINS \n#define YBUG \n#define DIRTY\n#define STRIP\n#define COLOR\n#define BLINK\n#define VIG\n\nfloat FREQUENCY = 11.0;\n\nvec2 uv_curve(vec2 uv) {\n\tuv = (uv - 0.5) * 2.0;\n\tuv *= 1.2;\t\n\tuv.x *= 1.0 + pow((abs(uv.y) / 5.0), 2.0);\n\tuv.y *= 1.0 + pow((abs(uv.x) / 4.0), 2.0);\n    uv /= 1.15;\n\tuv  = (uv / 2.0) + 0.5;\n\treturn uv;\n}\n\nvec3 color(sampler2D tex, vec2 uv){        \n    vec3 color = texture(iChannel0,uv).rgb;\n    #ifdef COLOR\n    float bw = (color.r + color.g + color.b) / 3.0;\n    color = mix(color,vec3(bw,bw,bw),.95);\n    float p = 1.5;\n    color.r = pow(color.r,p);\n    color.g = pow(color.g,p-0.1);\n    color.b = pow(color.b,p);\n    #endif\n    return color;\n}\n\nvec3 ghost(sampler2D tex, vec2 uv){\n    #ifdef FLICKS\n    \n    float n1 = threshold(snoise(iTime*10.),.85);\n    float n2 = threshold(snoise(2000.0+iTime*10.),.85);\n    float n3 = threshold(snoise(3000.0+iTime*10.),.85);\n    \n    vec2 or = vec2(0.,0.);\n    vec2 og = vec2(0,0.);\n    vec2 ob = vec2(0.,0);\n\n    float os = .05;\n    or += vec2(n1*os,0.);\n    og += vec2(n2*os,0.);\n    ob += vec2(0.,n3*os);\n  \n    float r = color(iChannel0,uv + or).r;\n    float g = color(iChannel0,uv + og).g;\n    float b = color(iChannel0,uv + ob).b;\n    vec3 color = vec3(r,g,b);\n    return color;\n    #else \n    return texture(iChannel0,uv).rgb;\n    #endif\n}\n\nvec2 uv_ybug(vec2 uv){\n    float n4 = clamp(noise(200.0+iTime*2.)*14.,0.,2.);\n    uv.y += n4;\n    uv.y = mod(uv.y,1.);\n    return uv;\n}\n\nvec2 uv_hstrip(vec2 uv){\n    float vnoise = snoise(iTime*6.);\n    float hnoise = threshold(snoise(iTime*10.),.5);\n\n    float line = (sin(uv.y*10.+vnoise)+1.)/2.;\n    line = (clamp(line,.9,1.)-.9)*10.;\n    \n    uv.x += line * 0.03 * hnoise;\n    uv.x = mod(uv.x,1.);\n    return uv;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = float(int(iTime * FREQUENCY));\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if(iMouse.z>0.){\n        fragColor = texture(iChannel0,uv); \n        return;\n    }\n\n    #ifdef CURVE\n    uv = uv_curve(uv);\n    #endif\n\n    vec2 ouv = uv;\n    \n    #ifdef GRAINS\n    float xn = threshold(snoise(iTime*10.),.7) * 0.05;\n    float yn = threshold(snoise((500.0+iTime)*10.),.7) * 0.05;\n    \n    float r = rand2d(uv+(t+100.0)*.01);\n    uv = uv + vec2(xn,yn) * r;\n    #endif\n    \n     \n    #ifdef YBUG\n    uv = uv_ybug(uv);\n    #endif\n\n    #ifdef STRIP\n    uv = uv_hstrip(uv);\n    #endif\n    \n   \n    vec2 onePixel = vec2(0.0, 1.0) / iResolution.xy * 3.;\n    #ifdef BLUR\n    vec3 colorA = ghost(iChannel0,uv + onePixel,or,og,ob);\n    vec3 colorB = ghost(iChannel0,uv - onePixel,or,og,ob);\n    vec3 colorC = ghost(iChannel0,uv,or,og,ob);\n    vec3 color = (colorA+colorB+colorC)/3.0;\n    #else\n    vec3 color = ghost(iChannel0,uv);\n    #endif\n\n    //color = colorC;\n    \n    float scanA = (sin(uv.y*3.1415*iResolution.y/2.7)+1.)/2.;\n    float scanB = (sin(uv.y*3.1415*1.)+1.)/2.;\n    #ifdef SCANS\n    color *= .75 + scanA * .25;\n    //color *= .5 + scanC * .5;\n    //color *= scanB;    \n    #endif\n    \n    #ifdef BLINK\n    float blink = .96 + .04*(sin(iTime*100.)+1.)/2.;\n    color *= blink;\n    #endif\n    \n    #ifdef VIG\n    float vig = 44.0 * (ouv.x * (1.0-ouv.x) * ouv.y * (1.0-ouv.y));\n\tvig *= mix( 0.7, 1.0, rand(t + 0.5));\n    color *= .6 + .4*vig;\n    #endif\n     \n    #ifdef DIRTY\n    color *= 1.0 + rand2d(uv+t*.01) * 0.2;\t\n    #endif\n\n    vec3 backColor = vec3(.4,.4,.4);\n    if (ouv.x < 0.0 || ouv.x > 1.0)\n\t\tcolor = backColor;\n\tif (ouv.y < 0.0 || ouv.y > 1.0)\n\t\tcolor = backColor;\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand2d(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat noise(float p) {\n\tfloat fl = floor(p);\n  \tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nfloat map(float val, float amin, float amax, float bmin, float bmax) {\n    float n = (val - amin) / (amax-amin);\n    float m = bmin + n * (bmax-bmin);\n    return m;\n}\n\nfloat snoise(float p){\n    return map(noise(p),0.0,1.0,-1.0,1.0);\n}\n\nfloat threshold(float val,float cut){\n    float v = clamp(abs(val)-cut,0.0,1.0);\n    v = sign(val) * v;\n    float scale = 1.0 / (1.0 - cut);\n    return v * scale;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}