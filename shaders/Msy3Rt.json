{
    "Shader": {
        "info": {
            "date": "1455818233",
            "description": "A possible implementation of smooth internal gradient, while preserving (g == 0) on boundaries.",
            "flags": 0,
            "hasliked": 0,
            "id": "Msy3Rt",
            "likes": 2,
            "name": "SmoothInternalQuadGradient",
            "published": 3,
            "tags": [
                "distancefield"
            ],
            "usePreview": 0,
            "username": "Bers",
            "viewed": 723
        },
        "renderpass": [
            {
                "code": "//Simple utility function which returns the distance from point \"p\" to a given line segment defined by 2 points [a,b]\nfloat distanceToLineSeg(vec2 p, vec2 a, vec2 b)\n{\n    //e = capped [0,1] orthogonal projection of ap on ab\n    //       p\n    //      /\n    //     /\n    //    a--e-------b\n    vec2 ap = p-a;\n    vec2 ab = b-a;\n    vec2 e = a+clamp(dot(ap,ab)/dot(ab,ab),0.0,1.0)*ab;\n    return length(p-e);\n}\n\nbool isOutside(vec2 uv, vec2 c1, vec2 c2, vec2 c3, vec2 c4)\n{\n    return dot( (c1-c2).yx*vec2(-1,1), uv-c1) < 0.\n        || dot( (c2-c3).yx*vec2(-1,1), uv-c2) < 0.\n    \t|| dot( (c3-c4).yx*vec2(-1,1), uv-c3) < 0.\n    \t|| dot( (c4-c1).yx*vec2(-1,1), uv-c4) < 0.;\n}\n\nfloat smoothInternalQuadGrad(vec2 uv, vec2 c1, vec2 c2, vec2 c3, vec2 c4)\n{\n    float da = distanceToLineSeg(uv, c3, c2);\n    float db = distanceToLineSeg(uv, c2, c1);\n    float dc = distanceToLineSeg(uv, c1, c4);\n    float dd = distanceToLineSeg(uv, c4, c3);\n    \n    //Note : a parameter controls smoothness (and scales value)\n    float a = 0.01;\n    float NORMALIZATION_TERM = log((1.+a)/a);\n    da = log((da+a)/a)/NORMALIZATION_TERM;\n    db = log((db+a)/a)/NORMALIZATION_TERM;\n    dc = log((dc+a)/a)/NORMALIZATION_TERM;\n    dd = log((dd+a)/a)/NORMALIZATION_TERM;\n    return da*db*dc*dd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float h = iResolution.y/iResolution.x;\n\tvec2 uv = -vec2(0.5,0.3)+2.0*fragCoord.xy / iResolution.xx;\n   \n    vec2 c1 = vec2(1.+sin(iTime*0.120)*0.2,h +cos(iTime*0.143)*0.2);\n    vec2 c2 = vec2(1.+cos(iTime*0.102)*0.2,0.+cos(iTime*0.107)*0.2);\n    vec2 c3 = vec2(0.+sin(iTime*0.096)*0.2,0.+sin(iTime*0.112)*0.2);\n    vec2 c4 = vec2(0.+sin(iTime*0.134)*0.2,h +cos(iTime*0.123)*0.2);\n    float internalGradient = smoothInternalQuadGrad(uv, c1,c2,c3,c4);\n    \n    if(isOutside(uv,c1,c2,c3,c4))\n    {\n        fragColor = vec4(0.1,0.3,0.7,0);\n        return;\n    }\n        \n    float stripeHz = 20.0;//BW Stripe frequency\n    float stripeTh = 0.25; //Switchover value, in the [0.-0.5] range. (0.25 = right in the middle)\n    float aa = 0.001; //aa = transition width (pixel \"antialiazing\" or smoothness)\n    float stripeIntensity = smoothstep(stripeTh-aa*stripeHz,stripeTh+aa*stripeHz,abs(fract(iTime+internalGradient*stripeHz)-0.5));\n    \n    fragColor = vec4((uv.x>0.5+sin(iTime))?stripeIntensity:internalGradient*3.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}