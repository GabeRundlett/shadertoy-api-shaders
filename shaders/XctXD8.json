{
    "Shader": {
        "info": {
            "date": "1713871943",
            "description": "Description",
            "flags": 32,
            "hasliked": 0,
            "id": "XctXD8",
            "likes": 4,
            "name": "Fork cube",
            "published": 3,
            "tags": [
                "tag"
            ],
            "usePreview": 0,
            "username": "juk",
            "viewed": 129
        },
        "renderpass": [
            {
                "code": "// Bitmap to ASCII (not really) fragment shader by movAX13h, September 2013\n// This is the original shader that is now used in PixiJs, FL Studio and various other products.\n\n// Here's a little tool for new characters: thrill-project.com/archiv/coding/bitmap/\n\nfloat character(int n, vec2 p)\n{\n\tp = floor(p*vec2(-4.0, 4.0) + 2.5);\n    if (clamp(p.x, 0.0, 4.0) == p.x)\n\t{\n        if (clamp(p.y, 0.0, 4.0) == p.y)\t\n\t\t{\n        \tint a = int(round(p.x) + 5.0 * round(p.y));\n\t\t\tif (((n >> a) & 1) == 1) return 1.0;\n\t\t}\t\n    }\n\treturn 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pix = fragCoord.xy;\n\tvec3 col = texture(iChannel0, floor(pix/16.0)*16.0/iResolution.xy).rgb;\t\n\t\n\tfloat gray = 0.3 * col.r + 0.59 * col.g + 0.11 * col.b;\n\t    \n\tint n =  4096;\n    \n    // limited character set\n    /*\n    if (gray > 0.2) n = 65600;    // :\n\tif (gray > 0.3) n = 163153;   // *\n\tif (gray > 0.4) n = 15255086; // o \n\tif (gray > 0.5) n = 13121101; // &\n\tif (gray > 0.6) n = 15252014; // 8\n\tif (gray > 0.7) n = 13195790; // @\n\tif (gray > 0.8) n = 11512810; // #\n    */\n    \n    // full character set including A-Z and 0-9\n    \n    if (gray > 0.0233) n = 4096;\n    if (gray > 0.0465) n = 131200;\n    if (gray > 0.0698) n = 4329476;\n    if (gray > 0.0930) n = 459200;\n    if (gray > 0.1163) n = 4591748;\n    if (gray > 0.1395) n = 12652620;\n    if (gray > 0.1628) n = 14749828;\n    if (gray > 0.1860) n = 18393220;\n    if (gray > 0.2093) n = 15239300;\n    if (gray > 0.2326) n = 17318431;\n    if (gray > 0.2558) n = 32641156;\n    if (gray > 0.2791) n = 18393412;\n    if (gray > 0.3023) n = 18157905;\n    if (gray > 0.3256) n = 17463428;\n    if (gray > 0.3488) n = 14954572;\n    if (gray > 0.3721) n = 13177118;\n    if (gray > 0.3953) n = 6566222;\n    if (gray > 0.4186) n = 16269839;\n    if (gray > 0.4419) n = 18444881;\n    if (gray > 0.4651) n = 18400814;\n    if (gray > 0.4884) n = 33061392;\n    if (gray > 0.5116) n = 15255086;\n    if (gray > 0.5349) n = 32045584;\n    if (gray > 0.5581) n = 18405034;\n    if (gray > 0.5814) n = 15022158;\n    if (gray > 0.6047) n = 15018318;\n    if (gray > 0.6279) n = 16272942;\n    if (gray > 0.6512) n = 18415153;\n    if (gray > 0.6744) n = 32641183;\n    if (gray > 0.6977) n = 32540207;\n    if (gray > 0.7209) n = 18732593;\n    if (gray > 0.7442) n = 18667121;\n    if (gray > 0.7674) n = 16267326;\n    if (gray > 0.7907) n = 32575775;\n    if (gray > 0.8140) n = 15022414;\n    if (gray > 0.8372) n = 15255537;\n    if (gray > 0.8605) n = 32032318;\n    if (gray > 0.8837) n = 32045617;\n    if (gray > 0.9070) n = 33081316;\n    if (gray > 0.9302) n = 32045630;\n    if (gray > 0.9535) n = 33061407;\n    if (gray > 0.9767) n = 11512810;\n\t\n    \n\tvec2 p = mod(pix/8.0, 2.0) - vec2(1.0);\n    \n\tif (iMouse.z > 0.5)\tcol = vec3(character(n, p));\n\telse col = col*character(n, p);\n\t\n\tfragColor = vec4(col, 1.0);\n    \n    // fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI acos(-1.0)\n\n// LINE FUNCTION\nvec4 line(vec2 uv, vec2 A, vec2 B, vec3 col, float thic, float blur) {\n    \n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d;\n    \n    d = length(h - g * clamp(dot(g, h) / dot(g, g), 0.0, 1.0));\n    if(blur != 0.)\n        if((blur * thic) >= thic)\n            d = smoothstep(blur * thic, thic, d);\n        else\n            d = smoothstep(thic, blur * thic * length(0.05), d);\n    else\n        d = step(thic, d);\n    \n    return vec4(col, d);\n}\n\n// CUBE FUNCTION\nvec4 cube(\n    vec2 uv,\n    vec2 pos,\n    float rot,\n    float width,\n    float height,\n    float tilt,\n    float thic,\n    vec3 col\n) {\n    vec4 background, foreground;\n    background = vec4(0.);\n    \n    for (int i = 0; i <= 3; i++) {\n        float j = float(i);\n        \n        foreground = line(\n            uv, \n            vec2(\n                pos.x + sin(rot + PI/2. * j) * width * 1.5,\n                pos.y + height - cos(rot + PI/2. * j) * tilt/45. * 100.\n            ), \n            vec2(\n                pos.x + sin(rot + PI/2. * j) * width * 1.5,\n                pos.y - height - cos(rot + PI/2. * j) * tilt/45. * 100.\n            ), \n            col,\n            thic/10.,\n            1.01\n        );\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv, \n            vec2(\n                pos.x + sin(rot + PI/2. * j) * width * 1.5,\n                pos.y + height - cos(rot + PI/2. * j) * tilt/45. * 100.\n            ), \n            vec2(\n                pos.x + sin(rot + PI/2. * (j + 1.)) * width * 1.5,\n                pos.y + height - cos(rot + PI/2. * (j + 1.)) * tilt/45. * 100.\n            ), \n            col,\n            thic/10.,\n            1.01\n        );\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv, \n            vec2(\n                pos.x + sin(rot + PI/2. * j) * width * 1.5,\n                pos.y - height - cos(rot + PI/2. * j) * tilt/45. * 100.\n            ), \n            vec2(\n                pos.x + sin(rot + PI/2. * (j + 1.)) * width * 1.5,\n                pos.y - height - cos(rot + PI/2. * (j + 1.)) * tilt/45. * 100.\n            ), \n            col,\n            thic/10.,\n            1.01\n        );\n        background = mix(background, foreground, foreground.a);\n    }\n    return background;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 2.0;\n    \n    \n    vec4 background, foreground;\n    \n    background = vec4(0.);\n\n    // WHITE CUBE\n    foreground = cube(\n        uv,\n        vec2(0., 0.),\n        iTime,\n        0.5,\n        0.5,\n        0.1,\n        0.25,\n        vec3(1.0)\n    );\n    \n    background = mix(background, foreground, foreground.a);\n\n\n    fragColor = foreground;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}