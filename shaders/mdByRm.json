{
    "Shader": {
        "info": {
            "date": "1687513552",
            "description": " Update includes using path based on hexagonal Truchet tiles (mouseable).",
            "flags": 0,
            "hasliked": 0,
            "id": "mdByRm",
            "likes": 27,
            "name": "Canal Ruins 2",
            "published": 3,
            "tags": [
                "hexagon",
                "truchet",
                "path",
                "boat"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "// \"Canal Ruins 2\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/*\n  No. 9 in \"Truchet Path\" series; others listed in \"Truchet Path Journey\" (mdXyRB).\n*/\n\n#define AA  1   // (= 0/1) optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat HexEdgeDist (vec2 p, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Hashfv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define PLEN 17\n#define N_BOAT 3\n\nmat3 boatMat[N_BOAT];\nvec4 cPath[PLEN];\nvec3 boatPos[N_BOAT], qHit, sunDir, cHit, qnHit;\nvec2 cIdB, cMidB;\nfloat tCur, dstFar, tEnd[PLEN + 1], boatAng[N_BOAT], hgSizeB, vgSize, tLen, cDir, cType, watHt;\nint nFrame, idObj, idObjGrp;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * sign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * sign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * sign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = sign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxy;\n  bool cyo, offTrk;\n  cxy = cIdB.x - cIdB.y;\n  cyo = (mod (cIdB.y, 2.) == 1.);\n  wm = Rot2Cs (w, sin (- pi / 3. + vec2 (0.5 * pi, 0.))) - vec2 (0., 0.3);\n  wp = Rot2Cs (w, sin (pi / 3. + vec2 (0.5 * pi, 0.)));\n  offTrk = (cxy == -2. && wm.y > 0. ||\n     ! cyo && (cxy == -3. && w.y > -0.3 || cxy == -2. || cxy == -1. && wm.y > 0. ||\n     cxy == 1. && wm.y < 0. || (cxy == 2. || cxy == 3.) && w.x < 0. || cxy == 4. || cxy == 5.) ||\n     cyo && (cxy == -3. || cxy == 0. && wp.x > 0. || (cxy == 1. || cxy == 2.) && w.x > 0. ||\n     cxy == 3. || cxy == 4. && wm.x < 0. || cxy == 5. && wm.y < 0.));\n     return ! offTrk;\n}\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= sign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - sign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, sin (tt * a + vec2 (0.5 * pi, 0.)))) * hgSizeB;\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nbool HexCellOcc ()\n{\n  vec2 q;\n  float h, s;\n  bool hCut;\n  cIdB = PixToHex (cHit.xz / hgSizeB);\n  BConf ();\n  hCut = false;\n  q = (cHit.xz - cMidB) / hgSizeB;\n  if (hCut) s = hgSizeB * abs (TruchSDist (q).x) - 4.1;\n  else s = length (vec2 (hgSizeB * abs (TruchSDist (q).x), cHit.y) *\n      vec2 (0.8 - 0.5 * sin (0.05 * pi * cHit.z), 0.3)) - 4.1;\n  s = min (s, hgSizeB * HexEdgeDist (q) - 3.1);\n  if (s > 6.) {\n    h = - cHit.y;\n  } else {\n    if (hCut) h = min (s, 1. - cHit.y);\n    else h = SmoothMin (s, 15. + 6. * dot (sin (0.06 * pi * cHit - sin (0.01 * pi * cHit.yzx)),\n       vec3 (1.)) - cHit.y, 4.);\n  }\n  return (h > 0.);\n}\n\nvec2 PixToHexS (vec2 p)\n{\n  vec2 c, r, dr;\n  p.y *= 2./sqrt3;\n  c = p.yx;\n  r = floor (c);\n  r += 2. * fract (0.5 * vec2 (r.x, r.y + step (0.5, fract (0.25 * r.x + 0.25))));\n  dr = c - r;\n  r += step (2., dot (abs (dr), vec2 (sqrt3, 1.))) * sign (dr) * vec2 (2., 1.);\n  r.x *= sqrt3/2.;\n  return r;\n}\n\nfloat HexVolRay (vec3 ro, vec3 rd)\n{  // (based on \"Atlantis 2\")\n  vec3 ht, htt, w;\n  vec2 hv[3], ve;\n  float dHit, ty, sy;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  cHit = vec3 (PixToHexS (ro.xz).yx, vgSize * floor (ro.y / vgSize + 0.5)).xzy;\n  hv[0] = vec2 (1., 0.);\n  hv[1] = vec2 (0.5, 0.5 * sqrt3);\n  hv[2] = vec2 (-0.5, 0.5 * sqrt3);\n  for (int k = 0; k < 3; k ++) hv[k] *= sign (dot (hv[k], rd.xz));\n  sy = sign (rd.y);\n  qnHit = vec3 (0.);\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 320; j ++) {\n    w = ro - cHit;\n    ht.z = dstFar;\n    for (int k = 0; k < 3; k ++) {\n      htt = vec3 (hv[k].xy, (1. - dot (hv[k], w.xz)) / dot (hv[k], rd.xz));\n      if (htt.z < ht.z) ht = htt;\n    }\n    ty = (0.5 * sy * vgSize - w.y) / rd.y;\n    if (ht.z < ty) cHit.xz += 2. * ht.xy;\n    else cHit.y += sy * vgSize;\n    if (HexCellOcc ()) {\n      if (ht.z < ty) {\n        dHit = ht.z;\n        qnHit.xy = ht.xy;\n      } else {\n        dHit = ty;\n        qnHit.z = sy;\n      }\n      qnHit = - qnHit.xzy;\n      break;\n    }\n  }\n  return dHit;\n}\n\nfloat HexCellEdge (vec3 p)\n{\n  vec2 dh;\n  float d;\n  dh = p.xz - cHit.xz;\n  if (qnHit.y == 0.) {\n    d = min (abs (length (dh - dot (dh, qnHit.xz) * qnHit.xz) - 1./sqrt3),\n       abs (fract (p.y / vgSize) - 0.5) * vgSize);\n  } else {\n    dh = abs (dh);\n    d = max (dot (vec2 (0.5, sqrt3/2.), dh), dh.x) - 1.;\n  }\n  return d;\n}\n\nvec3 HexPrisCol (vec3 p, float dEdge)\n{\n  vec3 col;\n  vec2 cIdS, c;\n  float b;\n  col = vec3 (1.);\n  col *= 1. - 0.1 * smoothstep (0.01, 0.03, abs (dEdge));\n  if (abs (qnHit.y) < 0.9 && mod (floor (p.y / vgSize + 0.5), 2.) == 0.) col *= 0.9;\n  if (qnHit.y == 1. && p.y < 0.4) {\n    col *= vec3 (0.3, 0.5, 0.3);\n  } else {\n    cIdS = PixToHex (cHit.xz);\n    c = vec2 (1., 0.96);\n    b = mod (dot (mod (2. * cIdS + cIdS.yx, 3.), vec2 (1., 2.)), 3.);\n    col *= (b == 0.) ? c.xyy : ((b == 1.) ? c.yxy : c.yyx);\n    if (qnHit.y == 1.) col *= 0.8;\n  }\n  col *= 1. - 0.4 * smoothstep (10., 15., hgSizeB * abs (TruchSDist ((p.xz - cMidB) / hgSizeB).x));\n  col = mix (vec3 (0., 0.3, 0.), col, 0.6 + 0.4 * smoothstep (0., 0.15, p.y - watHt));\n  return col;\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y -= 0.9;\n  d = PrCylDf (p, 1.2, 3.5);\n  if (d < 0.1) {\n    q = p;\n    d = max (max (PrRoundCylDf (q, -0.8, 2., 1.5), - max (PrRoundCylDf (q - vec3 (0., 0.1, 0.),\n       -0.85, 2., 1.5), abs (q.y) - 0.1)), abs (q.y + 0.1) - 0.1);\n    q.y -= -0.2;\n    d = max (SmoothMin (d, max (PrRoundCylDf (q, -1., 2., 1.3 ), q.y), 0.1), q.z - 2.);\n    DMINQ (idObjGrp + 1);\n    q = p;\n    q.yz -= vec2 (-0.5, -0.2);\n    d = max (PrRoundCylDf (q, -0.1, 1.1, 1.2), max (0.4 - q.y, q.z - 1.2));\n    DMINQ (idObjGrp + 2);\n    q = p;\n    q.yz -= vec2 (0.8, 0.5);\n    d = PrCylDf (q.xzy, 0.04, 0.3);\n    DMINQ (idObjGrp + 3);\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.3, -0.9, 2.);\n    d = PrRoundBoxDf (q, vec3 (0.02, 0.2, 0.1), 0.03);\n    DMINQ (idObjGrp + 4);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, bScl;\n  bScl = 0.9;\n  dMin = dstFar / bScl;\n  for (int k = VAR_ZERO; k < N_BOAT; k ++) {\n    idObjGrp = (k + 1) * 256;\n    dMin = BoatDf (boatMat[k] * (p - boatPos[k]) / bScl, dMin);\n  }\n  return bScl * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (h, 0.01);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec4 BoatCol ()\n{\n  vec4 col4, c4;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  c4 = vec4 (1., 0.1, 0.1, 0.2);\n  c4.rgb = (ig == 1) ? c4.rgb : ((ig == 2) ? c4.grb : c4.rrg);\n  if (id == 1) col4 = (abs (qHit.y - 0.1) < 0.01) ? vec4 (0.7, 0.4, 0.2, 0.1) * (1. -\n     0.2 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.))) :\n     ((qHit.y > -0.3) ? c4 : vec4 (0.6, 0.6, 0.8, 0.1));\n  else if (id == 2) col4 = (abs (abs (qHit.x) - 0.4) < 0.36 && qHit.y > 0.45 &&\n     length (vec2 (abs (qHit.x) - 0.1, qHit.y - 0.2)) < 0.7 || abs (abs (qHit.z + 0.2) -\n     0.6) < 0.5 && abs (qHit.y - 0.65) < 0.2) ? vec4 (0.2, 0.2, 0.6, -2.) : c4;\n  else if (id == 3) col4 = (qHit.y > 0.25) ? vec4 (c4.rgb, -1.) : vec4 (0.6, 0.6, 0.8, 0.1);\n  else if (id == 4) col4 = vec4 (0.5, 0.6, 0.5, 0.1);\n  return col4;\n}\n\nfloat WakeFac (vec3 p)\n{\n  vec3 twa;\n  vec2 tw;\n  float twLen, twLenMin, wkFac;\n  twLenMin = 1e6;\n  for (int k = 0; k < N_BOAT; k ++) {\n    tw = p.xz - (boatPos[k].xz - Rot2D (vec2 (0., 2.), boatAng[k]));\n    twLen = length (tw);\n    if (twLen < twLenMin) {\n      twLenMin = twLen;\n      twa = vec3 (tw, boatAng[k]);\n    }\n  }\n  twa.xy = Rot2D (twa.xy, - twa.z);\n  wkFac = clamp (1. - 1.5 * abs (twa.x), 0., 1.) * clamp (1. - 2. * twa.y, 0., 0.2) *\n     smoothstep (-4.5, -1.5, twa.y) * (1. - smoothstep (-0.3, 0.2, twa.y));\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn, row;\n  float dstObj, dstWat, dstBlk, dEdge, sh, reflFac, wkFac;\n  reflFac = 1.;\n  if (rd.y == 0.) rd.y = 0.001;\n  bgCol = SkyCol (rd);\n  dstWat = - (ro.y - watHt) / rd.y;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstBlk = HexVolRay (ro, rd);\n    dstObj = ObjRay (ro, rd);\n    if (k == 0 && rd.y * (min (dstBlk, dstObj) - dstWat) < 0.) {\n      ro += dstWat * rd;\n      row = ro;\n      wkFac = WakeFac (row);\n      vn = vec3 (0., 1., 0.);\n      if (wkFac > 0.) vn = VaryNf (64. * ro, vn, 8. * wkFac);\n      else vn = VaryNf (2. * ro, vn, 0.2);\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      reflFac = 0.8;\n    } else break;\n  }\n  if (min (dstBlk, dstObj) < dstFar) {\n    if (dstBlk < dstObj) {\n      ro += dstBlk * rd;\n      dEdge = HexCellEdge (ro);\n      col4 = vec4 (HexPrisCol (ro, dEdge), 0.);\n      vn = qnHit;\n      vn = VaryNf (4. * ro, vn, ((abs (vn.y) < 0.95) ? 3. * (1. -\n         0.95 * smoothstep (40., 60., dstBlk)) : 0.5) * smoothstep (0.01, 0.03, abs (dEdge)));\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = BoatCol ();\n    }\n    sh = min (0.6 + 0.4 * smoothstep (12., 16., HexVolRay (ro + 0.01 * vn, sunDir)),\n       ObjSShadow (ro + 0.01 * vn, sunDir));\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.2 + 0.2 * max (dot (sunDir * vec3 (-1., 1., -1.), vn), 0.) +\n         0.8 * sh * max (dot (sunDir, vn), 0.)) + col4.a * step (0.95, sh) *\n         pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    } else if (col4.a == -1.) {\n      col = col4.rgb * (0.5 - 0.5 * dot (rd, vn));\n    } else {\n      col = (sh > 0.7) ? 0.6 * SkyCol (reflect (rd, vn)) : col4.rgb * (0.5 - 0.5 * dot (rd, vn));\n    }\n   } else col = SkyCol (rd);\n  col *= reflFac;\n  if (reflFac < 1. && wkFac > 0.) col = mix (col, vec3 (0.9),\n     8. * wkFac * clamp (0.1 + 0.5 * Fbm3 (8. * row), 0., 1.));\n  if (reflFac == 1.) dstWat = 0.;\n  col = mix (col, bgCol, smoothstep (0.8, 0.95, (dstWat + min (dstBlk, dstObj)) / dstFar));\n  return clamp (col, 0., 1.);\n}\n\nvoid BoatPM (float t, out vec3 bPos, out mat3 bMat, out float btAng)\n{\n  vec2 pc[3], cs, vd;\n  float bAz;\n  for (int j = VAR_ZERO; j < 3; j ++)\n     pc[j] = EvalPPos (t + ((j > 0) ? sign (float (j) - 1.5) * 0.2 : 0.));\n  bPos.xz = pc[0];\n  bPos.y = watHt + 0.1 * (Fbm1 (4. * t) - 0.4);\n  vd = pc[2] - pc[1];\n  bMat[2] = vec3 (Rot2D (vec2 (1., 0.), 0.4 * (Fbm1 (t) - 0.5)), 0.);\n  bMat[0] = normalize (vec3 (0., 0.1, 1.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  bAz = atan (vd.y, - vd.x);\n  btAng = 0.5 * pi - bAz;\n  cs = sin (bAz + vec2 (0.5 * pi, 0.));\n  bMat *= mat3 (cs.x, 0., cs.y, 0., 1., 0., - cs.y, 0., cs.x);\n}\n\n#define N_WIN  2\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col, pAv;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw;\n  float el, az, zmFac, asp, sr, trVel, bGap, nc, t;\n  int vuId, regId;\n  bool sWin;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 18000.) + 30. * floor (dateCur.w / 3600.);\n  asp = canvas.x / canvas.y;\n  sWin = true;\n  if (sWin) {\n    mSize = (1./5.) * vec2 (asp, 1.);\n    mMid[0] = (1. - mSize.y) * vec2 (asp, -1.);\n    mMid[1] = (1. - mSize.y) * vec2 (asp, 1.);\n    for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    if (sWin) {\n      for (int k = 0; k < N_WIN; k ++) {\n        msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n        if (Maxv2 (abs (msw)) < mSize.y) {\n          regId = k + 1;\n          msw /= 2. * mSize.y;\n          break;\n        }\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0.) {\n        uv = (uv - mMid[k]) / mSize.y;\n        vuId = k + 1;\n        break;\n      }\n    }\n    if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  }\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  hgSizeB = 48.;\n  vgSize = 0.75;\n  SetPath ();\n  watHt = -1.;\n  bGap = 0.65;\n  trVel = 0.4;\n  t = (tCur + 10.) * trVel;\n  for (int k = VAR_ZERO; k < N_BOAT; k ++) {\n    BoatPM (t + float (k) * bGap, boatPos[k], boatMat[k], boatAng[k]);\n    pAv += boatPos[k];\n  }\n  nc = float (N_BOAT);\n  pAv /= nc;\n  if (vuId == 0 || vuId == 1) {\n    if (uv.y > 1. - 2. * SmoothBump (0.25, 0.75, 0.01, fract (0.025 * tCur))) vuId = 1 - vuId;\n    if (vuId == 1) t += (nc + 0.1 + 0.4 * (1. + sin (0.05 * pi * tCur))) * bGap;\n    else t -= (1. + 0.4 * (1. + sin (0.05 * pi * tCur))) * bGap;\n    ro.xz = EvalPPos (t);\n    ro.y = 1.5;\n    vd = normalize (pAv - ro);\n    az += atan (vd.z, - vd.x) - 0.5 * pi;\n    el += asin (vd.y);\n    el += 0.05 * pi;\n    el = clamp (el, -0.45 * pi, 0.45 * pi);\n    dstFar = 200.;\n    zmFac = 2.2;\n  } else if (vuId == 2) {\n    ro = vec3 (0., 60., ((2. / tLen) * t) * hgSizeB);\n    ro.xz = Rot2D (ro.xz, - pi / 3.);\n    ro.x -= 1.5 * hgSizeB;\n    vd = normalize (pAv - ro);\n    az = 0.3 * az + atan (vd.z, - vd.x) - 0.5 * pi;\n    el = 0.3 * el + asin (vd.y);\n    el = clamp (el, -0.45 * pi, -0.15 * pi);\n    dstFar = 300.;\n    zmFac = 2.5;\n  }\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 2. * pi * sin (0.0005 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (sWin) {\n    for (int k = 0; k < N_WIN; k ++) {\n      if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7);\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat HexEdgeDist (vec2 p, float h)\n{\n  p = abs (p);\n  p -= vec2 (0.5, - sqrt3/2.) * min (p.x - sqrt3 * p.y, 0.);\n  p.x -= h * sqrt3/2.;\n  return sign (p.x) * max (abs (p.x), abs (p.y) - 0.5 * h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}