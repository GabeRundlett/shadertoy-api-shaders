{
    "Shader": {
        "info": {
            "date": "1634491064",
            "description": "[url]https://inktober.com/[/url]\n#inktober2021 themes: [img]https://i.imgur.com/QjhAdpd.png[/img]\n\nclick to reset.   set nÂ² = nb partics in Common.   try other B(U)  shapes.\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "7dyXDz",
            "likes": 22,
            "name": " Fab17 #inktober2021 \"collide\"",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "physics",
                "inktober2021"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "// reusing bits of https://shadertoy.com/view/sdtSRs\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O = T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- draw scene + gradient ( could be done just once )\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n     vec2  U = ( u+u - R ) / R.y;\n     float d = B(U);\n     U = abs( 2.*u/R-1. ); d -= 4.*max(0.,max(U.x,U.y)-.9); // band guard at screen borders.\n     O = vec4( d, normalize(vec2(dFdx(d), dFdy(d))), 0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R         iResolution.xy\n#define S(v)      smoothstep(5./R.y,0., v ) \n//#define H(p)    ( 2.*fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123) -1. )\n#define T(U)      texelFetch( iChannel0, ivec2(U), 0 )\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nint n = 12;       // n*n particles\n\n// --- custom scene SDF\n\n//float K = 32.;    // smooth min: https://iquilezles.org/articles/smin\n//#define B(U) ( .9 + log2(exp2(-K*length(U-vec2(.7,0)))+exp2(-K*length(U+vec2(.7,0))) )/K )\n  #define B(U) ( .9 - length(U/vec2(2,1)) + map(U).x-.4 ) \n\n#define map(U) texture(iChannel1, .5+.5*((U)*R.y/R) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- physics: simulate particles   .xy = pos, .zw = v.dt\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    if ( max(U.x,U.y) > float(n) ) return;                    // only 64 partics\n    \n    if (iFrame==0 || iMouse.w>0.) \n     // { O = vec4( H(U), .01*H(U+.1) ); return; }            // init\n        { U-=.5; float i = U.x+float(n)*U.y;\n          O = vec4( 0,0, .01*cos(3.1415*(2.*i/float(n*n)-1.)+vec2(0,-1.57)) ); return; } // init\n                      // variant: .7+.2*(\n    O = T(U);                                                 // recover previous state\n    O.xy += O.zw;                                             // move particle\n    \n    vec4 T = map(O.xy);                                       // scene SDF + gradient \n    if ( T.x < 0.)                                            // collision with border\n        O.zw = reflect( O.zw, T.yz ),                         // bounce\n        O.xy += 2.*O.zw; // decollision.  NB: can't be merged with previous line: GLSL bug !\n    if ( length(O.xy) > 2. ) O.xy *= 0.;                      // in case a particle escaped, relauch\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- draw particles with memory\n\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2  U = ( u+u - R ) / R.y;\n    float d = 9., l; int i, k=0;\n\n    for (; k <n*n; k++)                               // particle closest to pixel\n      l = length( T(vec2(k%n,k/n)).xy - U ),\n      l < d ? d = l, i = k : i;\n    \n    O = max(     S(d-.01) * hue(float(i)/float(n*n))  // draw particle\n               + S( map(U).x)                         // draw scene\n             , .99 *texture(iChannel2,u/R)            // blend past for trajectories\n           );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}