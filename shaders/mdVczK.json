{
    "Shader": {
        "info": {
            "date": "1698768759",
            "description": "Testing ways of keeping track of mouse position history",
            "flags": 32,
            "hasliked": 0,
            "id": "mdVczK",
            "likes": 2,
            "name": "Mouse memory test",
            "published": 3,
            "tags": [
                "development"
            ],
            "usePreview": 0,
            "username": "fingertwister",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "// Base calculation on point - line distance: \n// \n// (p - a) - dot((p - a), n) * n\n//\n// (https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line)\n//\n// The distance can never be longer than the segment length\n// The distance can never be shorter than minDist (avoids division by zero case) \n\nfloat dist2Segment2(vec2 a, vec2 b, vec2 p, float minDist) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float lAb = max(minDist, length(ab)); // ensure minDist\n    vec2 n = ab / lAb;\n    float l = clamp(dot(ap, n), 0., lAb); // clamp to segment length\n    return length(ap - (l * n)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n \tvec4 mo = texture(iChannel0,vec2(0));\n \t\n    if (mo.z > 0. && dist2Segment2(mo.zw, mo.xy, fragCoord, 1.) < 10.) {\n    //if (mo.z > 0. && ln(fragCoord, mo.xy, mo.zw) < 10.) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else {\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Store last mouse positions\n//\n// if lmb is down:\n//     xy - current xy\n//     zw - last xy (if no last xy then current xy)\n// else:\n//     xy - current xy\n//     zw - zero\n\n#define lmb (iMouse.z > 0.)\n#define previousLmb (p.z > 0.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = vec4(iMouse.xy, lmb \n        ? (previousLmb \n            ? p.xy \n            : iMouse.xy)\n        : vec2(0.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}