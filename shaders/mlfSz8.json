{
    "Shader": {
        "info": {
            "date": "1674259423",
            "description": "Different gamma encoding methods based on https://tomforsyth1000.github.io/blog.wiki.html#%5B%5BThe%20sRGB%20learning%20curve%5D%5D",
            "flags": 0,
            "hasliked": 0,
            "id": "mlfSz8",
            "likes": 0,
            "name": "Gamma experiment",
            "published": 3,
            "tags": [
                "experiment",
                "scroll",
                "gamma"
            ],
            "usePreview": 0,
            "username": "JB_0x0003",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "// Experiment with different gamma encoding methods\n// Each column in each color is a different gamma encoding\n// From left to right: linear, gamma=2.2, and srgb\n// Based on https://tomforsyth1000.github.io/blog.wiki.html#%5B%5BThe%20sRGB%20learning%20curve%5D%5D\n\nvec3 SRGBToLinear(vec3 inputCol){\n\n\n    for (int i=0; i<3; ++i){\n    \n        if( inputCol[i] < 0.04045 )\n            inputCol[i] /= 12.92;\n        else\n            inputCol[i] = pow((inputCol[i] + 0.055)/1.055,2.4);\n        \n    }\n    return inputCol;\n\n}\n\nvec3 panelColor(in vec2 uv, in vec3 hue){\n\n    float baseColor = abs(mod((uv.y + iTime),1.0) * 2.0 - 1.0);\n    vec3 linearColor;\n    \n    //initially linear\n    linearColor = vec3(baseColor) * hue;\n    \n    if ( uv.x > 0.3333){\n    \n        //Interpret as though stored as gamma 2.2\n        if (uv.x <= 0.6666){\n        \n            linearColor.x = pow(linearColor.x, 2.2);\n            linearColor.y = pow(linearColor.y, 2.2);\n            linearColor.z = pow(linearColor.z, 2.2);\n    \n        //Interpret as though stored as srgb\n        } else{\n        \n           linearColor = SRGBToLinear(linearColor);\n        \n        }\n    }\n    \n    \n\n    //Assume monitor is already gamma 2.2, so correct for that\n    linearColor.x = pow(linearColor.x, 1.0/2.2);\n    linearColor.y = pow(linearColor.y,1.0/2.2);\n    linearColor.z = pow(linearColor.z,1.0/2.2);\n\n\n    return linearColor;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //hues\n    vec3 hue1 = vec3(0.6,1.0,0.0);\n    vec3 hue2 = vec3(1.0,0.5,0.2);\n    vec3 hue3 = vec3(0.6,0.3,0.8);\n    vec3 hue4 = vec3(1.0,1.0,1.0);\n\n    \n\n    //different hue for each panel\n    vec3 color;\n    if (uv.y >= 0.5){\n    \n        if(uv.x <= 0.5)\n            //each panel is normalized to its own uv coordinates\n            //it'd be better to add borders but I'm laaaaazy\n            color = panelColor((mod(uv,0.5) * 2.0 ),hue1);\n        else\n            color = panelColor((mod(uv,0.5) * 2.0 ),hue2);\n    }else {\n        if(uv.x <=0.5)\n            color = panelColor((mod(uv,0.5) * 2.0 ),hue3);\n        else\n            color = panelColor((mod(uv,0.5) * 2.0 ),hue4);\n    \n    }\n\n    \n    //output :)\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}