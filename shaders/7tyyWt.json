{
    "Shader": {
        "info": {
            "date": "1662422870",
            "description": "I only coded it to do X and Y sobel for now, but it should be able to handle any kernel.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tyyWt",
            "likes": 3,
            "name": "Simple kernelConvoution",
            "published": 3,
            "tags": [
                "postprocessing"
            ],
            "usePreview": 0,
            "username": "LeifMessinger",
            "viewed": 213
        },
        "renderpass": [
            {
                "code": "float grayscale(vec4 color){\n    return (0.2126*color[0] + 0.7152*color[1] + 0.0722*color[2]);\n}\n\nmat3 sobelX = mat3(vec3(-1.0, 0.0, 1.0),\n                   vec3(-2.0, 0.0, 2.0),\n                   vec3(-1.0, 0.0, 1.0));\n                   \nmat3 sobelY = mat3(vec3(-1.0, -2.0, -1.0),\n                   vec3(0.0, 0.0, 0.0),\n                   vec3(1.0, 2.0, 1.0));\n\nvec4 kernelConvolution(vec2 xy, mat3 kernel){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = xy/iResolution.xy;\n    vec4 result = vec4(0.0, 0.0, 0.0, 0.0);\n    //Don't worry about out of bounds pixels for now\n    result += texture(iChannel0, (xy+vec2(-1, -1))/iResolution.xy) * kernel[0][0];\n    result += texture(iChannel0, (xy+vec2(0, -1))/iResolution.xy) * kernel[0][1];\n    result += texture(iChannel0, (xy+vec2(1, -1))/iResolution.xy) * kernel[0][2];\n    result += texture(iChannel0, (xy+vec2(-1, 0))/iResolution.xy) * kernel[1][0];\n    result += texture(iChannel0, (xy+vec2(0, 0))/iResolution.xy) * kernel[1][1];\n    result += texture(iChannel0, (xy+vec2(1, 0))/iResolution.xy) * kernel[1][2];\n    result += texture(iChannel0, (xy+vec2(-1, 1))/iResolution.xy) * kernel[2][0];\n    result += texture(iChannel0, (xy+vec2(0, 1))/iResolution.xy) * kernel[2][1];\n    result += texture(iChannel0, (xy+vec2(1, 1))/iResolution.xy) * kernel[2][2];\n    return abs(result);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(grayscale(kernelConvolution(fragCoord,sobelX)), grayscale(kernelConvolution(fragCoord,sobelY)), grayscale(texture(iChannel0, uv)), 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}