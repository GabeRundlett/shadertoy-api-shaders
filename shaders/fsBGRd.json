{
    "Shader": {
        "info": {
            "date": "1617824339",
            "description": "Not physically based.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsBGRd",
            "likes": 11,
            "name": "3D Raytracing Sandbox",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "ray",
                "sandbox",
                "rendering",
                "cg"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "// Constants\n#define EPSILON 0.001\n#define INFINITY 1000000000.0\n\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n// Settings\n#define LIGHT_BOUNCES 3\n#define ZOOM 1.0\n#define AA 2\n\n// Convenience structs\nstruct Ray {\n    vec3 pos;\n    vec3 dir;\n};\n\nstruct Light {\n    vec3 pos;\n    vec3 color;\n};\n\nstruct Mat {\n    vec3 color;\n    bool reflective;\n};\n\nstruct TraceInfo {\n    bool hit;\n    float dist;\n    vec3 pos;\n    vec3 nor;\n    Mat mat;\n};\n\n// Transformations\nmat2 Rotate2D(in float theta) {\n    float c = cos(theta), s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\nRay Translate(in Ray ray, in vec3 t) {\n    return Ray(ray.pos - t, ray.dir);\n}\n\nRay Rotate(in Ray ray, in vec2 r) {\n    mat2 yaw = Rotate2D(-r.x);\n    mat2 pitch = Rotate2D(-r.y);\n\n    ray.pos.yz *= pitch;\n    ray.pos.xz *= yaw;\n    ray.dir.yz *= pitch;\n    ray.dir.xz *= yaw;\n\n    return ray;\n}\n\nRay Scale(in Ray ray, in vec3 s) {\n    return Ray(ray.pos / s, ray.dir / s);\n}\n\n// Primitive intersectors (an unfortunate amount of kludging in some places)\nvoid addPlane(in vec3 pos, in vec3 nor, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    float d = dot(ray.dir, nor);\n    if (d != 0.0) {\n        float t = dot(pos - ray.pos, nor) / d;\n        if (t > 0.0 && (scene.hit ? t < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = t;\n            scene.pos = ray.pos + ray.dir * t;\n            scene.nor = nor;\n            scene.mat = mat;\n        }\n    }\n}\n\nvoid addTriangle(in vec3 a, in vec3 b, in vec3 c, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    ray.pos -= a; b -= a; c -= a;\n    vec3 ba = b, cb = c - b, ac = -c;\n\n    vec3 nor = cross(ba, -ac);\n    float denom = dot(ray.dir, nor);\n    if (denom != 0.0) {\n        float t = -dot(ray.pos, nor) / denom;\n        if (t > 0.0 && (scene.hit ? t < scene.dist : true)) {\n            vec3 pos = ray.pos + ray.dir * t;\n            vec3 pa = pos, pb = pos - b, pc = pos - c;\n\n            // Semibarycentric coordinates\n            float abc = length(nor);\n            float abp = length(cross( ba, pa));\n            float bcp = length(cross( cb, pb));\n            float cap = length(cross(-ac, pa));\n\n            if (abs(abp + bcp + cap - abc) < EPSILON) {\n                scene.hit = true;\n                scene.dist = t;\n                scene.pos = pos + a;\n                scene.nor = nor / abc;\n                scene.mat = mat;\n            }\n        }\n    }\n}\n\n// Box intersector adapted from https://www.shadertoy.com/view/ld23DV\nvoid addBox(in vec3 pos, in vec3 dims, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    ray.pos -= pos;\n\n    vec3 m = 1.0 / ray.dir;\n    vec3 n = m * ray.pos;\n    vec3 k = abs(m) * dims;\n    vec3 t1 = -(k + n);\n    vec3 t2 = +(k - n);\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n\n    if (tN > tF || tF < 0.0) tN = -1.0;\n    vec3 nor = -sign(ray.dir) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);\n\n    if (tN > 0.0 && (scene.hit ? tN < scene.dist : true)) {\n        scene.hit = true;\n        scene.dist = tN;\n        scene.pos = ray.pos + ray.dir * tN;\n        scene.nor = nor;\n        scene.mat = mat;\n        scene.pos += pos;\n    }\n}\n\nvoid addCone(in vec3 pos, in float height, in float radius, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    ray.pos -= pos;\n\n    // Reused values\n    float bb = radius * radius;\n    float bbh = bb / height;\n    float bbhh = bbh / height;\n    float bbhhy = bbhh * ray.pos.y;\n\n    // Quadratic coefficients\n    float a = dot(ray.dir.xz, ray.dir.xz) - bbhh * ray.dir.y * ray.dir.y;\n    float b = 2.0 * (dot(ray.pos.xz, ray.dir.xz) + (bbh - bbhhy) * ray.dir.y);\n    float c = dot(ray.pos.xz, ray.pos.xz) + (2.0 * bbh - bbhhy) * ray.pos.y - bb;\n\n    // Solve and include a plane for the base\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float tBase = -ray.pos.y / ray.dir.y;\n        vec3 roots = vec3(-(vec2(-1, 1) * sqrt(discr) + b) / a * 0.5, tBase);\n\n        float t = INFINITY;\n        vec3 hitPos, nor = vec3(0.0, -1.0, 0.0);\n        int nClosest;\n        for (int n=0; n < 3; n++) {\n            vec3 hitCandid = ray.pos + ray.dir * roots[n];\n            if (roots[n] > 0.0 && roots[n] < t && hitCandid.y < height && dot(hitCandid.xz, hitCandid.xz) < radius * radius) {\n                t = roots[n];\n                hitPos = hitCandid;\n                nClosest = n;\n            }\n        }\n\n        // Compute a different normal for the base\n        if (nClosest != 2) {\n            nor = normalize(vec3(hitPos.xz, radius / height * length(hitPos.xz))).xzy;\n        }\n\n        if (t > 0.0 && t < INFINITY && (scene.hit ? t < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = t;\n            scene.pos = hitPos + pos;\n            scene.nor = nor;\n            scene.mat = mat;\n        }\n    }\n}\n\nvoid addCylinder(in vec3 pos, in float height, in float radius, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    ray.pos -= pos;\n\n    // Quadratic coefficients\n    float a = dot(ray.dir.xz, ray.dir.xz);\n    float b = 2.0 * dot(ray.pos.xz, ray.dir.xz);\n    float c = dot(ray.pos.xz, ray.pos.xz) - radius * radius;\n\n    // Solve with a plane for the base and top\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float hh = 0.5 * height;\n        float tBase = +(hh - ray.pos.y) / ray.dir.y;\n        float tTop  = -(hh + ray.pos.y) / ray.dir.y;\n        vec4 roots = vec4(-(vec2(-1, 1) * sqrt(discr) + b) / a * 0.5, tBase, tTop);\n\n        float t = INFINITY;\n        vec3 hitPos, nor = vec3(0.0, -1.0, 0.0);\n        int nClosest;\n        for (int n=0; n < 4; n++) {\n            vec3 hitCandid = ray.pos + ray.dir * roots[n];\n            if (roots[n] > 0.0 && roots[n] < t  && abs(hitCandid.y) < hh + EPSILON && dot(hitCandid.xz, hitCandid.xz) < radius * radius + EPSILON) {\n                t = roots[n];\n                hitPos = hitCandid;\n                nClosest = n;\n            }\n        }\n\n        if (nClosest < 2) nor = vec3(hitPos.xz / radius, 0.0).xzy; // Sides\n        else nor.y = sign(2.5 - float(nClosest)); // Base and top\n        if (t > 0.0 && t < INFINITY && (scene.hit ? t < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = t;\n            scene.pos = hitPos + pos;\n            scene.nor = nor;\n            scene.mat = mat;\n        }\n    }\n}\n\nvoid addSphere(in vec3 pos, in float radius, in Mat mat, in Ray ray, inout TraceInfo scene) {\n    ray.pos -= pos;\n\n    // Quadratic coefficients\n    float a = dot(ray.dir, ray.dir);\n    float b = 2.0 * dot(ray.pos, ray.dir);\n    float c = dot(ray.pos, ray.pos) - radius * radius;\n\n    // Solve\n    float discr = b * b - 4.0 * a * c;\n    if (discr > 0.0) {\n        float t = -(b + sqrt(discr) * sign(dot(ray.pos, ray.pos) - radius * radius)) / a * 0.5;\n        if (t > 0.0 && (scene.hit ? t < scene.dist : true)) {\n            scene.hit = true;\n            scene.dist = t;\n            scene.pos = ray.pos + ray.dir * t;\n            scene.nor = scene.pos / radius;\n            scene.mat = mat;\n            scene.pos += pos;\n        }\n    }\n}\n\n// Main scene\nTraceInfo traceScene(in Ray ray) {\n    TraceInfo scene = TraceInfo(false, -1.0, vec3(0.0), vec3(0.0), Mat(vec3(0.0), false));\n\n    addPlane(vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0), Mat(vec3(1.0), false), ray, scene);\n\n    addSphere(vec3(1.0, 1.0, 1.0), 1.0, Mat(vec3(1.0, 0.0, 0.0), true), ray, scene);\n    addSphere(vec3(-1.0, 1.0, 1.0), 1.0, Mat(vec3(1.0, 1.0, 0.0), false), ray, scene);\n    addSphere(vec3(1.0, -1.0, 1.0), 1.0, Mat(vec3(1.0, 0.0, 1.0), false), ray, scene);\n    addSphere(vec3(-1.0, -1.0, 1.0), 1.0, Mat(vec3(1.0, 0.5, 0.6), false), ray, scene);\n    addSphere(vec3(1.0, 1.0, -1.0), 1.0, Mat(vec3(0.0, 1.0, 1.0), false), ray, scene);\n    addSphere(vec3(-1.0, 1.0, -1.0), 1.0, Mat(vec3(1.0, 0.8, 0.0), false), ray, scene);\n    addSphere(vec3(1.0, -1.0, -1.0), 1.0, Mat(vec3(0.0, 1.0, 0.0), false), ray, scene);\n    addSphere(vec3(-1.0, -1.0, -1.0), 1.0, Mat(vec3(0.0, 0.0, 1.0), true), ray, scene);\n\n    addTriangle(vec3(-4.0, -2.0, -0.5), vec3(-2.5, -2.0, 2.5), vec3(-1.85, 1.0, 1.5), Mat(vec3(1.0), false), ray, scene);\n    addCylinder(vec3(3.0, 0.0, -1.0), 4.0, 0.5, Mat(vec3(0.0, 0.5, 1.0), false), ray, scene);\n    addCone(vec3(4.0, -2.0, 1.0), 2.0, 1.0, Mat(vec3(1.0), true), ray, scene);\n    addBox(vec3(-4.0, -0.49, -1.5), vec3(0.75, 1.5, 0.75), Mat(vec3(1.0, 0.5, 0.0), false), ray, scene);\n\n    return scene;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = ivec2(iMouse.xy) == ivec2(0) ? vec2(0.0) : (iMouse.xy - center) / iResolution.y * PI;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    Light[] lights = Light[](Light(vec3(-10.0, 10.0, 10.0), vec3(0.8, 0.2, 0.2)),\n                             Light(vec3(10.0, 10.0, 10.0), vec3(0.2, 0.8, 0.2)),\n                             Light(vec3(0.0, 10.0, -10.0), vec3(0.2, 0.2, 0.8)));\n\n    // Mouse rotation\n    mat2 yaw = Rotate2D(-mouse.x);\n    mat2 pitch = Rotate2D(-mouse.y);\n\n    // Take multiple subsamples for antialiasing\n    float aaStep = 1.0 / float(AA);\n    for (float xOffs=0.0; xOffs < 1.0; xOffs += aaStep) {\n        for (float yOffs=0.0; yOffs < 1.0; yOffs += aaStep) {\n            vec2 uv = (fragCoord + vec2(xOffs, yOffs) - center) / iResolution.y;\n            vec3 color = vec3(0.0);\n\n            Ray camRay = Ray(vec3(0.0, 0.0, 8.0), normalize(vec3(uv, -ZOOM)));\n\n            // Rotate with mouse\n            camRay.pos.yz *= pitch;\n            camRay.pos.xz *= yaw;\n            camRay.dir.yz *= pitch;\n            camRay.dir.xz *= yaw;\n\n            // Bounce the ray around the scene\n            float weight = 1.0 / float(LIGHT_BOUNCES);\n            for (int b=0; b < LIGHT_BOUNCES; b++) {\n                TraceInfo scene = traceScene(camRay);\n                vec3 lightDir; Ray shadow;\n                bool stopBouncing = false;\n                if (scene.hit) {\n                    for (int n=0; n < lights.length(); n++) {\n                        lightDir = normalize(lights[n].pos - scene.pos);\n                        float shade = max(0.0, dot(scene.nor, lightDir));\n\n                        // Trace a shadow ray\n                        shadow = Ray(scene.pos + scene.nor * EPSILON, lightDir);\n                        TraceInfo shadowTrace = traceScene(shadow);\n                        if (shadowTrace.hit) {\n                            shade = 0.0;\n                        }\n\n                        // Shade and break out of the loop if the shape is not reflective\n                        vec3 diff = lights[n].color * scene.mat.color * shade;\n                        if (scene.mat.reflective) diff *= weight;\n                        color.rgb += diff;\n                        if (!scene.mat.reflective) stopBouncing = true;\n                    }\n                }\n\n                // Sample the cubemap instead on a miss\n                else {\n                    color.rgb += texture(iChannel0, camRay.dir).rgb;\n                    stopBouncing = true;\n                }\n\n                // Bounce\n                camRay = Ray(shadow.pos, reflect(camRay.dir, scene.nor));\n                if (stopBouncing) break;\n            }\n\n            // Tonemap\n            color.rgb = pow(color.rgb, vec3(0.75));\n\n            // Combine\n            fragColor.rgb += color;\n        }\n    }\n\n    // Average\n    fragColor.rgb /= float(AA * AA);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}