{
    "Shader": {
        "info": {
            "date": "1603098536",
            "description": "mouse carve caves.\nAttention: look is very resolution-dependent.\n[url]https://inktober.com/[/url]\n#inktober2020 themes: [img]https://i.imgur.com/b3gMiu0.png[/img]\nsee [url] https://shadertoy.com/view/3dsGDM[/url] for more description about DLA simulation",
            "flags": 32,
            "hasliked": 0,
            "id": "tdKyWm",
            "likes": 18,
            "name": "Fab20 #inktober2020 \"coral\"",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "tree",
                "automata",
                "maze",
                "dla",
                "branching",
                "growth",
                "aggregation",
                "inktober2020"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/3dsGDM\n// larger scale variant of https://shadertoy.com/view/Wds3RM\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T(0,0);                                                 // --- coral DLA simulation\n\n    if (O.w==0.) {                                              // --- water       \n        U /= R.y;     \n        O = vec4(.7,1,.9,1)*.3\n            * (.8+.2*sin(12.*(   U.y+.1*sin(3.*U.x+ 1.4*iTime))   )\n                 +.1*sin(11.*(.5*U.x+.1*sin(5.*U.y+ 1. *iTime))+2.)\n              );\n        \n        float t = float(iFrame)/R.x;                            // --- bubbles\n        vec2 r  = R/R.y;\n        U = mod(U-vec2(-t,t), r);                               // sync to scrool + raise\n        for (int k=0; k<20; k++) {\n            vec3 P = hash(float(k));\n            O += max(0., 1.5- R.y/2.* length( U - .05-.9*r*P.xy // random bubble location out of the wrap zone\n                                              - .005*sin(8.*iTime+6.3*P.z+vec2(0,11)) ) )\n                 * vec4(.7,1,.9,1)*.7;                          //  \\ small rotation\n        }\n    }\n    else  if ( O.w<1. ) O = vec4(.7,.5,0,1);                    // --- sand\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === coral growth: diffusion-limited aggregation (DLA) simulation ====================\n\nint N = 7;               // free neighborhood scale\n#define a 3.1416/2.      // authorized filled back-cone angle\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (  iFrame%2<1 ) { O = T(1,0); return;  } // scroll view\n    O = T(0,0) ;                           // restore previous state\n \n    float h = hash3(vec3(U,iTime));        // rand\n    \n    if ( U.x==R.x-.5 ) {                   // right column: create environment\n        vec2 V = 2.*U/R-1.; \n        if  ( V.y <  -.7 + .2* sin(.5*iTime+V.x) +.1*h ) // current sand column\n            O = texture(iChannel1,U/R),    // seed color\n            O = .6 + .6 * cos( 6.3*O.r + vec4(0,23,21,0)),  // hue https://www.shadertoy.com/view/ll2cDc\n            O.w = h;//step( .5, h );       // set matter, age := 1  ( fract = sand )\n        return;\n     }\n                                           // mouse eraser: carve caves\n    if ( iMouse.z > 0. && length(U-iMouse.xy) < .1*R.y ) O -= O; \n    \n    if ( h < .9) return;                   // random progression\n\n    int n=0, p;                            // --- grow coral\n    for (int k=0; k<3*3; k++)              // count matter in neighborhood\n        if ( T(k%3-1,k/3-1).w > 0. ) n++, p=k;\n    \n    if (n!=1) return;                      // not exactly one neighborh, so not at a coral tip\n                                           // p = previous coral tip location    \n    n = 0;                                 // now we verify the NxN neighborhood\n // N = int(15.*U.x/R.x);\n    vec2 P0 = vec2(p%3-1,p/3-1);           // axis of back-cone allowed to have content\n    for (int k=0; k<N*N; k++) {\n        vec2 P = vec2(k%N -N/2, k/N -N/2);\n        if ( // max(abs(P.x),abs(P.y)) > 1. && // forget 3x3 center\n             // length(P) <= float(N/2) && // clamp to disk\n             dot(P,P0) < length(P)*length(P0)*cos(a/2.) // check 3-quarter opposed to P0\n             && T(P.x,P.y).w > 0. ) n++;                // not empty\n    }                            // ( would just return be performant ? )\n        \n    if (n==0) O = textureLod(iChannel0,(U+P0)/R,0.),    // inherit previous tip color\n              O.w =  1.; // ceil(O.w)+1.;  // age++ ( but for fract = sand â†’ ceil )\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R        iResolution.xy\n#define T(x,y)   texelFetch(iChannel0, ivec2(U+vec2(x,y)), 0)\n#define hash3(p) fract( sin( dot( p  , vec3(127.1,311.7, 74.7) )  ) *43758.5453123) // https://www.shadertoy.com/view/llySRh\n#define hash(p)  fract( sin(     (p) * vec3(127.1,311.7, 74.7)    ) *43758.5453123)\n         ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}