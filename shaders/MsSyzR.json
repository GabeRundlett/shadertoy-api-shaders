{
    "Shader": {
        "info": {
            "date": "1490556984",
            "description": "#6 - Conchoid",
            "flags": 0,
            "hasliked": 0,
            "id": "MsSyzR",
            "likes": 2,
            "name": "[ Famous curves ] - #6",
            "published": 3,
            "tags": [
                "2d",
                "curve",
                "parametric",
                "conchoid"
            ],
            "usePreview": 0,
            "username": "Yrai",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\n   Conchoid facts:\n  ----------------\n\t- (a) These curves are also called the conchoids of Nicomedes, after the Greek scholar Nicomedes.\n\t\t  Called conchoids because the shape of their outer branches resembles a conch shell.\n    - (b) All of these curves (except a = 0) have two branches. Both branches approach the vertical\n\t\t  asymptote x = a as x → a from the left or right.\n    - (c) If a < −1, both branches are smooth. When a reaches −1, the right branch acquires a\n\t\t  sharp point, called a cusp.\n    - (d) For −1 < a < 0, the cusp turns into a loop, which becomes large as a → 0\n    - (e) If a = 0, both branches come together and form a circle.\n    - (f) For 0 < a < 1, the left branch has a loop, which shrinks to a cusp when a = 1. For a > 1,\n          the branches become smooth again.\n*/\n\n#define res_            iResolution\n#define time_           iTime\n#define trace_len_      64\n#define eps_            1.\n\nvec2  domain(vec2 uv, float s);\nvec2  parametric(float t);\nfloat trace(vec2 p, float t);\n\nvoid mainImage(out vec4 o, vec2 f) {\n\tvec2 p = domain(f, 8.);\n    \n    // t -> [0., 5.]\n    float t = time_*2.;\n    \n    // Conchoid traces\n    float dtrace = smoothstep(0.08, 0.001, trace(p, t));\n    float dtrace_s0 = smoothstep(0.16, 0.001, trace(p, t));\n    \n    // Axis\n    float ax = min(\n        smoothstep(0., 0.2, abs(p.x)),\n        smoothstep(0., 0.2, abs(p.y))\n    );\n    // Origin\n    float org = smoothstep(0.09, 0., length(p)-.01);\n    \n    // Palette \n    vec3 gray   = vec3(.2);\n    vec3 white  = vec3(5.);\n    \n    // Shading\n    vec3 c  = vec3(0.);\n    c = mix(c, gray, 1.-ax);\n    c = mix(c, white, org);\n    \n    c = mix(c, vec3(1., 11.0, 0.), dtrace_s0);\n    c = mix(c, white, dtrace);\n    //c.b += dtrace_s0/p.x;\n    c = mix(c, vec3(.1, .02, .1), p.x-dtrace);\n        \n    o = vec4(sqrt(c), 1.);\n}\n\nvec2 parametric(float t) {\n\tfloat a = sin(time_*.2)*4.;\n    return vec2(a + cos(t), a*tan(t) + sin(t));\n}\n\nfloat trace(vec2 p, float t) {\n    float d = 1e10;\n    float e = 0.;\n    for(int i = 0; i < trace_len_; i++) {\n    \td  = min(d, distance(p, parametric(t-e)));\n        e += eps_; \n    }\n    return d;\n}\n\nvec2 domain(vec2 uv, float s) {\n    return (2. * uv.xy - res_.xy) / res_.y * s;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}