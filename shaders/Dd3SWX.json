{
    "Shader": {
        "info": {
            "date": "1680470617",
            "description": "points",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd3SWX",
            "likes": 6,
            "name": "interpolating distance to points",
            "published": 3,
            "tags": [
                "points"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "#define n_tau 6.2831\n\nfloat f_n_rand(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc_nor = (fragCoord.xy - iResolution.xy*.5)/ iResolution.y;\n    o_fc_nor *= 2.;\n    float n_its = 6.;\n    float n_max = 0.8;\n    float n_rest = (1.-n_max) / (n_its-1.);\n    float n_per_it = 1./n_its;\n    float n = 0.;\n    float n_t = iTime * 1.;\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        float n_it_nor = n_it / n_its;\n        float n_radians = n_it_nor * n_tau;\n        float n_radius = 0.6;\n\n        vec2 o_p = vec2(\n            sin(n_radians)*n_radius,\n            cos(n_radians)*n_radius\n        );\n\n        float n_d = length(o_fc_nor - o_p);\n        // n_d = smoothstep(0.1, 0.090, n_d );\n        // n_d = 1.-n_d;\n        \n        // float n_factor = abs(fract(n_it_nor - n_t));\n        float b = float(int(n_it) == int(mod(n_t, n_its)));\n        float b2 = float(int(n_it) == int(mod(n_t+1., n_its)));//int(1.));//int(mod(iTime+1, n_its));\n        // float b2 = float(int(n_it) == int(fract(iTime+1.)*n_its)); \n\n        // b = float((n_it) == floor(f_n_rand(floor(iTime))*n_its)); \n        // b2 = float((n_it) == floor(f_n_rand(floor(iTime+1.))*n_its)); \n\n        // float n_factor = (sin(iTime)*.5+.5);\n        float n_factor = 1.- fract(n_t);\n\n        n += b * n_factor * n_d;\n        n += b2 * (1.-n_factor) * n_d;\n        // n = smoothstep(0.22, 0.02, n );\n\n        // n += n_d;\n        // n*= n_d;\n\n    }\n    n = smoothstep(0.33, 0.30, n);\n\n    // n = smoothstep(0.1, 0.090, n );\n\n    fragColor = vec4(sqrt(n));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}