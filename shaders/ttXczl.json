{
    "Shader": {
        "info": {
            "date": "1592765747",
            "description": "mdtjvm",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXczl",
            "likes": 10,
            "name": "Screenprinting [Day 184] ",
            "published": 3,
            "tags": [
                "halftone",
                "popart",
                "art",
                "pop",
                "mdtmjvm",
                "screenprint",
                "screenprinting"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "// Trying to reprudce the classic screenprinting style\n\n// Most of all of the look comes from the dots() function\n// You feed it the luminosity of the image, and then multiply image by the return value\n\n\n#define CELL_SZ 0.02\n#define COL_SEP 0.2\n#define STR 1.4\n\n#define LUM_EPS (6.0 )\n\n#define T(u) texture(iChannel0,(u)/iResolution.xy)\n\n#define Neighborhood \\\nvec3 n = getImg(U + vec2(0.,1.)*LUM_EPS);vec3 s = getImg(U - vec2(0.,1.)*LUM_EPS);vec3 e = getImg(U + vec2(1.,0.)*LUM_EPS);vec3 w = getImg(U - vec2(1.,0.)*LUM_EPS);\\\nvec3 se = getImg(U + vec2(1.,-1.)*LUM_EPS);vec3 sw = getImg(U - vec2(-1.,-1.)*LUM_EPS);vec3 ne = getImg(U + vec2(1.,1.)*LUM_EPS);vec3 nw = getImg(U + vec2(-1.,1.)*LUM_EPS);\n\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n#define pmod(p,j) mod(p,j) - 0.5*j\n#define pi acos(-1.)\n\n#define smoothness 0.004\n\n//#define noise(i) texture(iChannel0,vec2(mod((i),256.)/256.,floor(i/256.)/256.))\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat noise(vec2 p){\n\tvec2 fruv = fract(p);\n\tvec2 fluv = floor(p);\n    return mix( \n        mix(\n            hash22(fluv).x,\n            hash22(fluv + vec2(1,0)).x,\n        \tfruv.x\n        ), \n        mix(\n            hash22(fluv + vec2(0,1)).x,\n            hash22(fluv + vec2(1,1)).x,\n        \tfruv.x\n        ),\n        fruv.y\n    );\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdCoolBall(vec2 uv){\n\tfloat sdBall = length(uv) - 0.4; \n    sdBall = opSmoothUnion( sdBall, length(uv + 0.5 + vec2(sin(iTime)*0.1)) - 0.1,0.4 );\n    sdBall = opSmoothUnion( sdBall, length(uv - 0.5 + vec2(sin(iTime/2. + cos(iTime))*0.1)) - 0.1,0.4 );\n    sdBall = opSmoothUnion( sdBall, length(uv - vec2(-0.5,0.2) + vec2(sin(iTime/2.), cos(iTime+ 4.) )/14.) - 0.04,0.3 );\n    //sdBall = opSmoothUnion( sdBall, length(uv - vec2(0.5,-0.4) + vec2(sin(iTime/2. )*0.1,cos(iTime))*0.1) - 0.1,0.4 );\n    \n    return sdBall;\n}\n\nvec3 getImg(vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.,0.,0.);\n    \n    vec2 puv = vec2(atan(uv.y,uv.x)/pi + 1.,length(uv));\n    \n    \n    if(puv.x < 0.4)\n    \tcol = vec3(0.2,0.5,0.4)*1.55;\n    else if(puv.x < 1.)\n    \tcol = vec3(0.5,0.5,0.9);\n    else if(puv.x < 1.4)\n    \tcol = vec3(1.,0.716,0.7);\n    else \n    \tcol = vec3(0.9,0.6,0.6);\n    \n    //col *= smoothstep(1.,0.,length(uv)/3.);\n    \n    //uv *= rot(-0.7);\n    \n    col = mix(col,vec3(1,0.1,0.6),smoothstep(1.,0.,length(abs(uv.y) + 0.)*4. + 0.3));\n    \n    uv *= rot(-1.2);\n    col = mix(col,vec3(1,0.1,0.5),smoothstep(1.,0.,length(abs(uv.y) + 0.)*4. + 0.3));\n    \n    \n    uv *= rot(-1.4);\n    \n    \n    vec3 bc = vec3(1.,0.7,0.6) *mix(vec3(1.),vec3(0.1,0.,0.),smoothstep(0.,1.,uv.x + uv.y*1.5 -0.1 + length(uv)/1.5));\n    \n    \n    float dBalla = sdCoolBall(uv);\n        \n    float dBallb = sdCoolBall(uv-0.04);\n        \n    \n    col = mix(col,vec3(1,1.,0.9), smoothstep(smoothness,0.,dBallb));\n    \n    \n    col = mix(col,bc, smoothstep(smoothness,0.,dBalla));\n    \n    \n    col = mix(col,vec3(1,0.7,1.),smoothstep(1.,0.,length(uv + vec2(0.13,0.25))*18. + 0.3));\n    \n    col = mix(col,vec3(1,0.7,1.),smoothstep(1.,0.,length(uv + vec2(0.7,0.4))*14. + 0.3));\n    \n    \n    \n    return col;\n}\n\n\n// get avg lum\nvec3 getAvg(vec2 U){\n    \n    float l = 0.4;\n    Neighborhood;\n    \n    vec3 avg = (n + e + w + s + ne + sw + se + nw)/8.;\n    \n    return avg;\n\n}\n    \n\nfloat dots(vec2 p,float lum){\n\tfloat t = 0.;\n    vec2 q = p ;\n    \n    p *= rot(0.25*pi);\n    \n    \n    q /= CELL_SZ/pi;\n    // some distortion\n    p -= length(sin(q))*normalize(p)*CELL_SZ/6.;\n    \n    \n    p = pmod(p,CELL_SZ);\n    p -= length(sin(q))*normalize(p)*CELL_SZ/6.;\n    \n    float lsz = 0.;\n    \n    float n = noise(q*10.);\n    \n    n = pow(n,2.)*0.07;\n    lsz = pow(smoothstep(0.,1.,lum*(0.45 +n)),STR)*CELL_SZ*0.6;\n    \n    float col = smoothstep(0.003,0.,length(p) - lsz);\n    //col = mix(col,smoothstep(0.01,0.,sin(q.x)*sin(q.y)* lsz*1. ),0.1);\n\t\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 tex = getImg(fragCoord);\n    \n    tex = getAvg(fragCoord);\n    \n    float lum = length(tex);\n    \n    col = vec3(0.1,0.5,0.9)*0.1;\n    col = mix(col,floor(tex/COL_SEP)*COL_SEP,dots(uv,lum));\n    \n    col = smoothstep(0.,1.,col);\n    col = pow(col,vec3(0.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}