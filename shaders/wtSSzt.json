{
    "Shader": {
        "info": {
            "date": "1566749400",
            "description": "Raymarching Test3\n\nArt shader.Cineshader support\n[url] https://cineshader.com/view/wtSSzt",
            "flags": 0,
            "hasliked": 0,
            "id": "wtSSzt",
            "likes": 1,
            "name": "kojdj_RaymarchingTest3",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "kojdj0811",
            "viewed": 477
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846264338327950288\n#define SETP_MAX 100\n\n#define NEAR 0.01\n#define FAR 1000.0\n\n#define OFFSET_TO_NORMAL 0.001\n\n\n\nvec3 Background (vec2 uv) {\n    return vec3(0.0, 0.0, 0.0);\n    \n    uv.x -= iTime * 0.5 + sin(iTime * 0.2);\n    uv.y -= iTime * 0.1 + sin(iTime * 0.7);\n    \n\tfloat offsetR = sin(iTime * 2.0 + PI * 0.0);\n    float offsetG = sin(iTime * 2.0 + PI * 0.33333333) ;\n    float offsetB = sin(iTime * 2.0 + PI * 0.66666666) ;\n\n    vec3 col = vec3(abs(sin(uv.x * 50.0)) * offsetR,\n                    abs(sin(uv.x * 50.0 + PI * 0.33333333)) * offsetG,\n                    abs(sin(uv.x * 50.0 + PI * 0.66666666)) * offsetB) * 0.5 ;\n    \n    col += vec3(abs(sin(uv.y * 50.0)) ,\n                abs(sin(uv.y * 50.0 + PI * 0.33333333)),\n                abs(sin(uv.y * 50.0 + PI * 0.66666666))) * 0.5;\n    \n    return col;\n}\n\n\n\nfloat DstSphere (vec3 currentStep, vec3 origin, float radius) {\n\treturn length(origin - currentStep) - radius;\n}\n\n\nfloat DstPlane (vec3 currentStep, float height) {\n\treturn currentStep.y - height;\n}\n\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n\n\n\nfloat SmoothSubtraction (float a, float b, float u) {\n    float v = clamp(0.5 - 0.5 * (a + b) / u, 0.0, 1.0);\n\treturn mix(b, -a, v) + u * v * (1.0 - v);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    float m = h*h*h*0.5;\n    float s = m*k*(1.0/3.0); \n    return (a<b) ? vec2(a-s,m) : vec2(b-s,1.0-m);\n}\n\n\nfloat World (vec3 currentStep) {\n    \n    float world = 0.0;\n\n    \n    \n    \n    float sphere0 = DstSphere (currentStep , vec3(-0.6, 0.3, 1.2 + 0.4 * sin(iTime * 1.1)), 0.6);\n    float sphere1 = DstSphere (currentStep , vec3(-0.6, 0.3, 2.5), 1.8);\n\n    float plane = DstPlane(currentStep, -0.8);\n\n    \n\n\n    float brick0 = sdRoundBox(currentStep + vec3(-1.9 + sin(iTime * 1.5), -0.5, -0.5), vec3(0.5, 0.5, 0.01), 0.2);\n\n\n    \n    \n    \n    world = SmoothSubtraction(sphere0, sphere1, 0.5);\n    world = min(plane, world);\n\n    //world = min(brick0, world);\n    world = smin(brick0, world, 1.1);\n\n\n\n    world = min(world, 1.0);\n\n    return world;\n}\n\n\n\nvec3 raymarching (vec3 origin, vec3 dir) {\n\tfloat dist = 0.0;\n    int currentStepCount = 0;\n\n    while(true) {\n        float world = World(origin + dir * dist);\n        dist += world;\n        \n        \n        if(dist >  FAR)\n            return vec3(0.0, 0.0, 0.0);\n        \n        if(world < NEAR || currentStepCount > SETP_MAX)\n            break;\n        \n        currentStepCount++;\n    }\n    \n    return dir * dist;\n}\n\n\nfloat GetShadow (vec3 origin, vec3 lightPos) {\n    vec3 dir = normalize(origin - lightPos);\n    return distance(raymarching(lightPos, dir), origin) < NEAR ? 1.0 : 0.0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    \n    vec3 cameraPos = vec3(0.0, 0.0, -0.6);\n    vec3 cameraDir = vec3(0.0, 0.0, 0.0);\n    vec3 screen = vec3(uv, 0.0);\n    vec3 dir = normalize(screen - cameraPos);\n\n    \n    vec3 world0 = raymarching(cameraPos, dir);\n    vec3 depth = vec3(1.0, 1.0, 1.0) * distance(cameraPos, world0);\n\n    vec2 offsetToNormal = vec2(OFFSET_TO_NORMAL, 0);\n\tvec3 normal0 = normalize(\n        vec3(\n            World(world0 + offsetToNormal.xyy) - World(world0 - offsetToNormal.xyy),\n            World(world0 + offsetToNormal.yxy) - World(world0 - offsetToNormal.yxy),\n            World(world0 + offsetToNormal.yyx) - World(world0 - offsetToNormal.yyx)\n        )\n    );\n    \n    \n    \n    vec3 light0_pos = vec3(-2.0, 1.0, 2.0);\n    vec3 light0_color = vec3(1.0, 2.0, 1.0);\n\tfloat light0_intensity = 0.1;\n    \n    \n    \n    vec3 light1_pos = vec3(2.0, 1.0, 2.0);\n    vec3 light1_color = vec3(1.0, 1.0, 2.2);\n\tfloat light1_intensity = 0.3;\n\n    vec3 light2_pos = vec3(0.0, 1.0, 1.0);\n    vec3 light2_color = vec3(2.0, 1.0, 1.0);\n\tfloat light2_intensity = 0.3;\n    \n    \n    col = light0_intensity * light0_color * dot(normal0, normalize(light0_pos - world0));\n    col += light1_intensity * light1_color * dot(normal0, normalize(light1_pos - world0));\n    col += light2_intensity * light1_color * dot(normal0, normalize(light2_pos - world0));\n\n    //col = GetShadow(world0, light0_pos) == 0.0 ? col : vec3(0.0, 0.0, 0.0);\n    //col = clamp(col, 0.0, 1.0);\n\n    \n    \n    \n    //test\n    //col = vec3(world0);\n    col = depth / 6.0;\n    //col = vec3(normal0);\n\tfloat hight = (1.072 - length(world0)*0.408);\n    fragColor = vec4(col, hight);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Simple Spiral\",\n\t\"description\": \"\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}