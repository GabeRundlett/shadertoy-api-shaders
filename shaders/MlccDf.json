{
    "Shader": {
        "info": {
            "date": "1534449348",
            "description": "(Desert Planet) A simple sand dune render which got me thinking about my favorite book. Soon I'll learn how to make the dunes look more random. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MlccDf",
            "likes": 17,
            "name": " The spice trade",
            "published": 3,
            "tags": [
                "raymarch",
                "desert",
                "dune"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 1091
        },
        "renderpass": [
            {
                "code": "\n\n// My original dunes. simple \n/*\nfloat map(vec3 rp)\n{\n   float res;\n   \n   // this manipulates the space to make the simple shape of dunes\n   // its also phase shifting the wave by time to give illusion of movement\n   rp.y += sin(rp.z*2.0 + iTime * 1.5 ) * 0.3;\n   rp.y += sin(rp.x*2.0 ) * 0.2;\n    \n   // a simple plane whose position is the within this wavy space.\n   return vec3(rp - vec3(0.0, -1.0, 0.0)).y;\n}\n*/\n\n\nfloat map(vec3 p){\n    \n    p.z += iTime;\n    float h = dot(sin(p - cos(p.yzx*1.3)), vec3(.13));\n    h += dot(sin(p*2. - cos(p.yzx*1.3*2.)), vec3(.1/2.));\n    return p.y + 1. + h;     \n}\n\n\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0.0035, -0.0035); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\nvec3 col(vec3 ro, vec3 rd, vec3 norm, float md, float t)\n{   \n    // light direction\n    vec3 ld = ro + vec3(-1.0, -1.0, 1.21); \n    \n    // basic diffuse / specular \n    float diff = max(dot(norm, ld), 0.0);\n    float spec = pow(max( dot( reflect(-ld, norm), -rd ), 0.0 ), 7.0);\n    \n    vec3 objCol = vec3(0.3, 0.3,0.3);\n    vec3 glowCol = vec3(1.0, 0.4, 0.0); \n    vec3 sceneCol;\n    \n    //main color\n    sceneCol = (objCol*(diff - 0.015 * 0.5) + vec3(1.0, 0.6, 0.2)*spec*0.15) ;\n    \n    //fog\n    sceneCol =  mix( sceneCol, vec3(0.55,0.9,0.9), 1.0 - exp( -0.00026*t*t*t ) );\n    \n    // Kinda makes it look like theres alot of dust in the air. kinda \n    float sand = smoothstep(0.12, 1.15, 0.008 / md * t) * 0.3;\n    sceneCol += glowCol * sand;\n    \n    return sceneCol;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y; \n  \n    // ray origin and direction\n    vec3 ro = vec3(0.0, 0.0, 0.0); \n    vec3 rd = normalize(vec3(uv,2.0));\n    \n    float t = 0.0; \n   \n    float minDist = 999.0;\n    \n    // raymarch\n    for (int i = 0; i < 100; i++) \n    {\n        float d = map(ro + rd*t);\n        \n        minDist = min(minDist, d);\n        \n        if(abs(d)<0.01)\n        {\n            minDist = 0.1;\n            break;  \n        }\n        if(t>25.0) \n        {\n            minDist = min(minDist, d);\n            t = 80.0;\n            break;\n        }\n        \n        t += d * 0.7;\n    }\n    \n    \n    vec3 norm = getNormal(ro + rd * t);\n    \n    // color the scene\n    vec3 sceneColor = col(ro, rd, norm, minDist, t);\n    \n    // crappy sun \n    sceneColor += smoothstep(0.16, 0.001, length(uv - vec2(-1.0, 0.5)))*0.5;\n    \n    fragColor = vec4(sqrt(clamp(sceneColor, 0.0, 1.0)), 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}