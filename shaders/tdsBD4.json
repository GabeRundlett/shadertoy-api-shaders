{
    "Shader": {
        "info": {
            "date": "1588282514",
            "description": "The polar curve of the mouse position for a cardioid.\n\n[url]https://en.wikipedia.org/wiki/Polar_curve[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "tdsBD4",
            "likes": 9,
            "name": "Polar of a Cardioid",
            "published": 3,
            "tags": [
                "polar",
                "cardioid"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Polar of a Cardioid\n// Matthew Arcus, mla, 2020\n//\n// Given an implicit curve f(z) = 0, the polar curve for a point w is\n// polar(z) = p.x + p.y where p = grad(f,z)*(w-z)\n//\n// The intersection of the polar with the curve itself gives the points\n// on the curve whose tangents pass through p.\n//\n// Here we have a cardioid, drawn as a tangent envelope, and the polar of\n// the pointer position, drawn as an implicit curve - the tangents through the\n// pointer position meet the curve at its intersections with the polar.\n//\n// NEW FEATURE: (press 'g' to hide): a graph showing the distance of the\n// pointer position from tangent(t), where tangent(t) is the line between\n// (cos(t),sin(t)) and (cos(2t),sin(2t)) - zeros of this function are where\n// a line passes through the point. The vertical lines are at -PI and +PI\n// and there is a bogus zero at t = 0 in the middle (the two points\n// coincide).\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.1415927;\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = dot(pa, ba) / dot(ba, ba);\n  float d = length(pa - ba * h);\n  return d;\n}\n\nconst int N = 108;\nfloat card0(vec2 z) {\n  // Draw the envelope\n  float d = 1e8;\n  float k = 2.0*PI/float(N);\n  float t = 2.0;\n  for (int i = 0; i < N; i++) {\n    float theta = float(i)*k;\n    vec2 p = vec2(cos(theta),sin(theta));\n    vec2 q = vec2(cos(t*theta),sin(t*theta));\n    d = min(d,line(z,p,q));\n  }\n  return d;\n}\n\n// Maybe use dual numbers here?\n// I did the diff for card by hand, but it got tedious for the polar,\n// so it's numeric all the way (it's more generic anyway).\n// Some macrology instead of higher order functions.\n#define GRAD(F,Z,EPS)                      \\\n  (vec2(F(Z+vec2(EPS,0))-F(Z-vec2(EPS,0)), \\\n        F(Z+vec2(0,EPS))-F(Z-vec2(0,EPS)))/(2.0*EPS))\n\nfloat card(vec2 p) {\n  // Implicit function for cardioid\n  float a = 1.0/3.0; // Line up with the unit circle\n  p.x += a;\n  float x = p.x, y = p.y;\n  float t = x*x+y*y;\n  return t*t - 4.0*a*x*t - 4.0*a*a*y*y;\n}\n\nvec2 cardgrad(vec2 z) {\n#define F(Z) (card(Z))\n  return GRAD(F,z,0.01);\n#undef F\n}\n\nfloat carddist(vec2 z) {\n  float d = card(z);\n  vec2 ds = cardgrad(z);\n  d /= length(ds);\n  return d;\n}\n\nfloat polar(vec2 z, vec2 w) {\n  float eps = 0.01;\n  vec2 e = vec2(eps,0);\n  return dot(vec2(1),cardgrad(z)*(w-z));\n}\n\nvec2 polargrad(vec2 z, vec2 w) {\n#define F(Z) (polar(Z,w))\n  return GRAD(F,z,0.01);\n#undef F\n}\n\nfloat polardist(vec2 z, vec2 w) {\n  float d = polar(z,w);\n  vec2 ds = polargrad(z,w);\n  return d/length(ds);\n}\n\nfloat line(vec3 p, vec3 l) {\n  return abs(dot(p,l)/(p.z*length(l.xy)));\n}\n\nfloat graph(vec2 z, vec2 w) {\n  // Draw curve, y = f(x), ie. f(x)-y = 0\n  float t = PI*z.x;\n  float y = 6.0*z.y;\n  vec3 p0 = vec3(cos(t),sin(t),1);\n  vec3 p1 = vec3(cos(2.0*t),sin(2.0*t),1);\n  vec3 l = vec3(sin(t)-sin(2.0*t),\n                cos(2.0*t)-cos(t),\n                cos(t)*sin(2.0*t)-sin(t)*cos(2.0*t));\n  return dot(vec3(w,1),l) - y;\n}\n\nvec2 graphgrad(vec2 z, vec2 w) {\n#define F(Z) (graph(Z,w))\n  return GRAD(F,z,0.01);\n#undef F\n}\n\nfloat graphdist(vec2 z, vec2 w) {\n  return graph(z,w)/length(graphgrad(z,w));\n}\n\nbool key(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\n\nconst int CHAR_G = 71;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  int AA = 2;\n  vec3 col = vec3(0);\n  vec2 w;\n  if (iMouse.x > 0.0) w = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  else w = cos(0.5*iTime-vec2(0,0.4*PI));\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n      float ldist = graphdist(z,w);\n      float lmin = 0.002, lmax = max(0.003,fwidth(z.x));\n      float pmin = 0.015, pmax = max(0.02,2.0*fwidth(z.x));\n      vec3 c = vec3(0.75);\n      c.rg += 0.25*cos(2.0*PI*8.0*polardist(z,w));\n      c.b += 0.25*cos(2.0*PI*8.0*carddist(z));\n      c = mix(c,vec3(0.1),1.0-smoothstep(lmin,lmax,abs(card0(z))));\n      c = mix(c,vec3(0,0,1),1.0-smoothstep(lmin,lmax,abs(carddist(z))));\n      c = mix(c,vec3(1,0,0),1.0-smoothstep(lmin,lmax,abs(polardist(z,w))));\n      if (!key(CHAR_G)) {\n          c *= 0.8;\n          c = mix(c,vec3(1),1.0-smoothstep(lmin,lmax,abs(ldist)));\n          c = mix(c,vec3(1),1.0-smoothstep(lmin,lmax,line(z,vec2(-1,0),vec2(1,0))));\n          c = mix(c,vec3(1),1.0-smoothstep(lmin,lmax,line(z,vec2(-1,0),vec2(-1,1))));\n          c = mix(c,vec3(1),1.0-smoothstep(lmin,lmax,line(z,vec2(1,0),vec2(1,1))));\n      }\n      c = mix(c,vec3(0),1.0-smoothstep(pmin,pmax,distance(z,w)));\n      col += c;\n    }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}