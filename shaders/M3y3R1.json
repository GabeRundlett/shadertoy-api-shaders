{
    "Shader": {
        "info": {
            "date": "1717275344",
            "description": "made from following The Art of Code tutorial on starfields: https://www.youtube.com/watch?v=rvDo9LvfoVE\n\nalso allows the addition of a background video w/ bloom (code from another shader on this site)",
            "flags": 0,
            "hasliked": 0,
            "id": "M3y3R1",
            "likes": 5,
            "name": "starfield gleam",
            "published": 3,
            "tags": [
                "mouse",
                "starfield",
                "microphone"
            ],
            "usePreview": 0,
            "username": "technowizard",
            "viewed": 202
        },
        "renderpass": [
            {
                "code": "#define NUM_LAYERS 7.\n#define Threshold() 0.1\n//(0.0+iMouse.y/iResolution.y*1.0)\n#define Intensity() 1.5\n//(2.0-iMouse.x/iResolution.x*2.0)\n#define BlurSize() 3.0\n//(6.0-iMouse.x/iResolution.x*6.0)\n\nvec3 palette (float t){\n vec3 a = vec3(0.498, 0.588, 1.128);\n vec3 b = vec3(0.303, 0.388, 0.273);\n vec3 c = vec3(1.763, 0.938, 0.787);\n vec3 d = vec3(-2.982, 1.818, 1.948);\n \n return a + b * cos (6.28318*(c*t+d) );\n}\n\nmat2 Rot(float a){\n    float s= sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nfloat Star (vec2 uv, float size, float baseRotation) {\n    float d = length(uv);\n    float m = 0.\n    // inverted circle\n    +smoothstep(.12,0.15,d)/7. * (size)\n    // glow\n    +0.01/d *(size*.5 +.5);\n    // circle\n    // rotate 45 deg\n    uv *= Rot(baseRotation);\n    float rays = 0.;\n    rays += (max(0.,1.-abs(pow(abs(uv.x),1.8)*uv.y*30000.))) ;\n    \n    // rotate 45 deg\n    uv *= Rot(3.14159/4.);\n    rays += (max(0.,1.-abs(uv.x*uv.y* 3000.))) * .7 ;\n    m*= smoothstep(1.,0.2,d);\n    m+= rays* smoothstep(1.,0.2,d/(size));;\n    \n    return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n        vec3 col = vec3(0);\n\n        vec2 gv = fract(uv) -.5;\n        vec2 id = floor(uv);\n        for(int y=-1;y<=1;y++){\n            for(int x=-1;x<=1;x++){\n                vec2 offset = vec2(x,y);\n                float n = Hash21(id+offset); // random between 0 and 1\n                float size = fract (n*149.1)\n                * (sin(iTime*0.3 +n *48.123)*.5+1.);\n                float star = Star(-offset + gv-(vec2(n,fract(n*34.))-0.5),smoothstep(.4,1.,size),-3.14159/10.);\n                vec3 color = palette(star/3. +iTime * 0.3 + fract(n*9438.7));\n                col += star*color;\n            }\n        }\n        return col;\n    }\n\nvec4 Bloom (vec2 Coord, in sampler2D Tex, in float MipBias){\n\tvec2 TexelSize = MipBias/iChannelResolution[0].xy;\n    \n    vec4  Color = texture(Tex, Coord, MipBias);\n    Color += texture(Tex, Coord + vec2(TexelSize.x,0.0), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(-TexelSize.x,0.0), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(0.0,TexelSize.y), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(0.0,-TexelSize.y), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(TexelSize.x,TexelSize.y), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(-TexelSize.x,TexelSize.y), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(TexelSize.x,-TexelSize.y), MipBias);    \t\n    Color += texture(Tex, Coord + vec2(-TexelSize.x,-TexelSize.y), MipBias);    \n\n    return Color/9.0;\n\n}\n\nvec4 Blend(vec4 color, vec4 highlight){\n    return 1.0-(1.0-color)*(1.0-highlight*Intensity()); //Screen Blend Mode\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime *0.02;\n    \n    vec2 M = 4.*(iMouse.xy-iResolution.xy *.5)/iResolution.y + vec2(sin(iTime/4.),cos(iTime/4.));\n     uv += M*.4;\n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<1.; i+= 1./NUM_LAYERS){\n        float depth = fract (i+t);\n        float scale = mix(10.,1.,depth);\n        col+= StarLayer(uv*scale+i*400.3 -M-t)*\n        // fade\n        smoothstep(1.,.9,depth)*depth;\n    }\n    // Output to screen\n    //vec2 mappedUV = uv*vec2(0.5,1.)+0.5;\n    //vec4 inColor = texture(iChannel0,mappedUV);\n    //vec4 Highlight = clamp(Bloom(mappedUV,iChannel0, BlurSize())-Threshold(),0.0,1.0)*1.0/(1.0-Threshold());\n    \n    //col = col + inColor.xyz;\n    //col  = (col+ Blend(inColor, Highlight).xyz);\n    //(col+ Blend(inColor, Highlight).xyz)/2.;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}