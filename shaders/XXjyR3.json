{
    "Shader": {
        "info": {
            "date": "1727630859",
            "description": "2d hacks and approximations. The rest I'll blame on the firefly including the frog with 5 tongues.",
            "flags": 8,
            "hasliked": 0,
            "id": "XXjyR3",
            "likes": 5,
            "name": " Educated Firefly Nightmare +snd",
            "published": 3,
            "tags": [
                "2d",
                "triangle",
                "silly",
                "penrose"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "#define L(u) \\\n (u.x < -abs(.4-u.y) || u.y < -.4) \\\n           && abs(u.y-u.x+.6) < 1.4            \\\n           && u.y > -.6\n\nfloat h1(float i) {\n  float a = i * 25.76 - i * 17.55;\n  return fract(a*757.54);\n}\n\nfloat h2(float k,float r) {\n  r += floor(k);\n  k = fract(k);\n  k = k*k*(2.-3.*k);\n  return mix( h1(r), h1(r+1.), fract(k) );\n}\n\nfloat ramp(float i,float a,float b,float p, float q) {\n  return (i-a)*(q-p)/(b-a)+p;\n}\n\n\n/*\n// https://www.shadertoy.com/view/sljyWt\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n*/\n\nfloat sdSeg( in vec2 p, in vec2 a, in vec2 b, float w )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return max(0.,1.-w*length( pa - ba*h ));\n}\n\nfloat rnd3(float l,float h,float seed) {\n  return mod(sin(seed)*9.2+.5,12.33)*(h-l)/(12.33)+l;\n}\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    o.xyz = iResolution;\n    u = (u+u-o.xy)/o.y;  \n    vec2 rr = o.xy/-o.y;\n/*  \n  vec2 cam=vec2(sin(iTime*.6),cos(iTime));\n    float z=distance(u,cam);\n    u*=10./(10.+z);\n */\n  \n  vec2 uu=u;\n    u.x *= 1.7; // sqrt(3)\n    u.y += .2;  \n    u *= 1.3;\n    \no=vec4(0);\no+=min(   \nsmoothstep(.29,.3,distance(uu,vec2(.6,.67))),\nsmoothstep(.3,.29,distance(uu,vec2(.67)))\n);\n\no+=vec4(.8,.5,.2,0)*smoothstep(rr.x+1.5,rr.x,uu.x); // sunrise\no+=vec4(.2,.2,.7,0)*smoothstep(rr.x+1.,rr.x+2.,-uu.y+u.x/1.); // daylight\n\no+=max(0.,1.-1.5*distance(uu,vec2(rr.x,0)));  // sun\n\n#define DOT(X,Y,A,B) smoothstep(A,B,distance(uu,vec2(X,Y)))\n\no+=vec4(.2,.6,.2,0)*max(0., //smoothstep(.22,.2,distance(uu,vec2(-.2,1.1)))\n  DOT(-.2,1.1,.25,.15)\n  -DOT(-.1,1,.03,.02)\n  -DOT(-.3,1,.03,.02)\n  );  // frog\n\n#define STAR(X,Y) DOT(X,Y,.02,.005)\n#define SLIN(X1,Y1,X2,Y2) \\\n  STAR(X1,Y1) \\\n  + sdSeg(uu,vec2(X1,Y1),vec2(X2,Y2),100.)*.2\n\no += SLIN(.7,.7,.3,.8)\n   + SLIN(.3,.8,-.2,.7)\n   + SLIN(-.2,.7,-.3,.5)\n   + SLIN(-.3,.5,-.6,.5)\n   + SLIN(-.6,.5,-.7,.7)\n   + STAR(-.7,.7)\n   ;\n\n    vec3 li= \n      vec3( sin(iTime*1.5), cos(iTime*1.1), 3. );\n\n    float de=distance(li.xy,uu);\n    float cd=distance(li.xy/2.,uu);\n    float j=1.+1.*cd*cd*cd*cd;\n    // Reuse L shape. Rotate u in 3 orientations\n    mat2 M = -mat2(1,-3,1,1)/2.;\n    o += vec4(L((u*M*M))) * (-.4*(li.xy*M*M).y+.5)/j\n    + vec4( L((u*M)))* (-.4*(li.xy*M).y+.5)/j\n    + vec4( L((u))) * (-.4*li.y+.5) / j\n    + .01/de;\n    ;\n\n// grass\n  for ( float gr = -1.; gr < 1.; gr += .04 )\n    o = mix( o, vec4(0,.4,0,1), \n       sdSeg(uu,vec2(gr,-1.),vec2(gr+rnd3(-.1,.1,gr*123.),rnd3(-.95,-.8,gr*123.)),40.) );\n// tongues\n\n#define XTND clamp(sin(iTime)*60.-59.,0.,1.)\n\n#define LIN(x1,y1,x2,y2) \\\n  sdSeg(uu,vec2(x1,y1)+.02*vec2(x2,y2),mix(vec2(x1,y1),vec2(x2,y2),XTND),50.)\n\no = mix( o, vec4(.9,.5,.5,1)*XTND*.6, \n  LIN(-.2,.9,-.2,-.2)\n  +LIN(-.2,.9,.5,-.6)\n  +LIN(-.2,.9,-.5,-.9)\n  +LIN(-.2,.9,.8,-.3)\n  +LIN(-.2,.9,-.8,-.4)\n  );\n  \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PI 3.1415926535\n#define TAU (PI*2.)\n\n#define SIN(X) sin(mod(X,TAU))\n#define COS(X) cos(mod(X,TAU))\n\n#define SINC(X) (SIN(X)/(X))\n#define COSC(X) (COS(X)/(X))\n\nvec2 rot2d(vec2 inp,float ang) {\n  float s = sin(ang);\n  float c = cos(ang);\n  return vec2( inp.x * c + inp.y * s, inp.y * c - inp.x * s ); \n}\n\n#define SAW2(X) ( mod( (X)/PI , 2. ) - 1. )\n#define SQR3(FC,PW,VOL) ( SAW2(FC) > (PW) ? (VOL) : -(VOL) )\n\nvec2 mainSound( int samp, float time )\n{\n\n    vec3 li= \n      vec3( sin(time*1.5), cos(time*1.1), 3. );\n    float bz = \n      SQR3(TAU*105.*time*(1.-COSC(time*1.5*2.)*.03),.90,\n        SIN(time*1.1)-1.)\n      //+ SIN(TAU*66.*time)*.33\n        /* *(1.+fract(sin(6.2831*25.*time/1.1)/time*100.)*.0)*/\n      ;\n    return rot2d( vec2(bz,0), clamp(li.x*5.,-PI,PI)/2. ) * .1;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}