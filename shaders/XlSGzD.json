{
    "Shader": {
        "info": {
            "date": "1427149661",
            "description": "Playing with transitions between transformations.\n\nMixing ideas from\n- https://www.shadertoy.com/view/XlXGW2 and\n- https://www.shadertoy.com/view/XlfGDf",
            "flags": 0,
            "hasliked": 0,
            "id": "XlSGzD",
            "likes": 6,
            "name": "Acid Kaleidoscope",
            "published": 3,
            "tags": [
                "transformations"
            ],
            "usePreview": 0,
            "username": "mpcomplete",
            "viewed": 1650
        },
        "renderpass": [
            {
                "code": "//#define DEBUG 1\n\n#define time (iTime*.3)\n\nfloat _evaluateCubic(float a, float b, float m) {\n\treturn 3. * a * (1. - m) * (1. - m) * m +\n           3. * b * (1. - m) *            m * m +\n                                          m * m * m;\n}\n\nfloat _kCubicErrorBound = 0.001;\nfloat _transformCubic(float t, float a, float b, float c, float d) {\n    float start = 0.0;\n    float end = 1.0;\n    while (true) {\n        float midpoint = (start + end) / 2.;\n        float estimate = _evaluateCubic(a, c, midpoint);\n        if (abs(t - estimate) < _kCubicErrorBound)\n            return _evaluateCubic(b, d, midpoint);\n        if (estimate < t)\n            start = midpoint;\n        else\n            end = midpoint;\n    }\n}\n\n\n// A cubic animation curve that starts slowly and ends quickly.\nfloat easeIn(float t) {\n    return _transformCubic(t, 0.42, 0.0, 1.0, 1.0);\n}\n\n// A cubic animation curve that starts slowly, speeds up, and then and ends slowly.\nfloat easeInOut(float t) {\n    return _transformCubic(t, 0.42, 0.0, 0.58, 1.0);\n}\n\n// A curve that starts quickly and eases into its final position.\nfloat fastOutSlowIn(float t) {\n    return _transformCubic(t, 0.4, 0.0, 0.2, 1.0);\n}\n\n// 2D rotation matrix.\nmat2 rotate(float angle)\n{\n    return mat2(\n        vec2( cos(angle), sin(angle)),\n        vec2(-sin(angle), cos(angle)));\n}\n\n// Transform a point on square to a circle.\nvec2 mapSquare(in vec2 p)\n{\n    vec2 ap = abs(p);\n    float r = max(ap.x, ap.y);\n    float angle = atan(p.y, p.x);\n\n    return r*vec2(cos(angle), sin(angle));\n}\n\n// Make a pattern of squares in a repeating grid.\nvec2 dupSquares(in vec2 p)\n{\n    vec2 ap = abs(sin(p*3.));\n    float r = max(ap.x, ap.y);\n    float angle = atan(p.y, p.x);\n\n    return r*vec2(cos(angle), sin(angle));\n}\n\n// Duplicate pattern in dupSquaresConcentric squares.\nvec2 dupSquaresConcentric(in vec2 p)\n{\n    vec2 ap = abs(p);\n    float r = max(ap.x, ap.y);\n    float angle = atan(p.y, p.x);\n\n    return sin(3.*r)*vec2(cos(angle), sin(angle));\n}\n\n// Duplicate pattern in a repeating grid.\nvec2 dupGrid(in vec2 p)\n{\n    return abs(sin(p*4.));\n}\n\nfloat numPhases = 4.;\nvec2 getTransform(in vec2 p, float t)\n{\n    int which = int(mod(t, numPhases));\n\n    if (which == 0) {\n        p = rotate(time*.3)*p*.7;\n        p = dupSquares(p);\n    } else if (which == 1) {\n        p = dupSquares(p);\n        p = rotate(time*.2)*p;\n        p = dupSquares(p);\n    } else if (which == 2) {\n        p = dupSquares(p);\n        p = rotate(time*.3)*p;\n        p = dupSquaresConcentric(p);\n    } else {\n        p = dupSquaresConcentric(p*1.5);\n    }\n    return p;\n}\n\nvec2 applyTransform(in vec2 p)\n{\n    float t = time*.35;\n#ifdef DEBUG\n    if (iMouse.z > .001) t = iMouse.x/iResolution.x * numPhases;\n#endif\n    float pct = smoothstep(0., 1., mod(t, 1.));\n    pct = fastOutSlowIn(pct);\n    return mix(getTransform(p, t), getTransform(p, t+1.), pct);\n}\n\n\nmat3 rotation(float angle, vec3 axis)\n{\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * a.x * a.x + c,        oc * a.x * a.y - a.z * s,  oc * a.z * a.x + a.y * s,\n                oc * a.x * a.y + a.z * s,  oc * a.y * a.y + c,        oc * a.y * a.z - a.x * s,\n                oc * a.z * a.x - a.y * s,  oc * a.y * a.z + a.x * s,  oc * a.z * a.z + c);\n}\n\nvec4 gradient(float f)\n{\n    vec3 col1 = 0.5 + 0.5*sin(f*0.908 + vec3(0.941,1.000,0.271));\n\tvec3 col2 = 0.5 + 0.5*sin(f*7.240 + vec3(0.611,0.556,1.000));\n\tvec3 c = 1.888*pow(col1*col2, vec3(0.800,0.732,0.660));\n\n    vec3 axis = vec3(0.454,0.725,1.072);\n    c = rotation(2.0*length(axis)*sin(time), axis)*c;\n    \n    return vec4(c, 1.0);\n}\n\nfloat offset(float th)\n{\n    return .2*sin(25.*th)*sin(time);\n}\n\nvec4 tunnel(float th, float radius)\n{\n\treturn gradient(offset(th) + 2.*log(radius) - time);\n}\n\nvec4 applyColor(vec2 p)\n{\n\treturn tunnel(atan(p.y, p.x), 2.0 * length(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n    p *= 2.0;\n\n    p = applyTransform(p);\n\tfragColor = applyColor(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}