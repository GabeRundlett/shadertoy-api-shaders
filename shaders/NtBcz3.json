{
    "Shader": {
        "info": {
            "date": "1662092671",
            "description": "explains how the closest point on line segment to point and distance to line segment algorithms work\nclick a point on the screen to move the point",
            "flags": 0,
            "hasliked": 0,
            "id": "NtBcz3",
            "likes": 1,
            "name": "segment closest point & distance",
            "published": 3,
            "tags": [
                "sdf",
                "tutorial"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "//uses the algorithm explained below to get the signed distance to a line segment\n//a = line start, b = line end, r = radius of line, p = point to get distance\nfloat sdLine(vec2 a, vec2 b, float r, vec2 p){\n    vec2 ab = b - a;\n    float t = dot(p - a, ab) / dot(ab, ab);\n    vec2 p2 = a + clamp(t,0.0,1.0) * ab;\n    return length(p - p2) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalized uv coords\n    vec2 uv = fragCoord/iResolution.y;\n    //normalized mouse click coords\n    vec2 m = abs(iMouse.zw)/iResolution.y;\n    if (m == vec2(0,0)) {\n        m = vec2(0.7,0.4);\n    }\n    \n    vec2 a = vec2(0.5,0.5); //line segment start point\n    vec2 b = vec2(0.8,0.7); //line segment end point\n    vec2 p = m; //point to get distance of\n    \n    vec2 ab = b-a; //the vector from point a to point b\n    vec2 ap = p-a; //the vector from point a to point p\n    float t = dot(ap,ab)/dot(ab,ab); //vector ap projected onto vector ab\n    vec2 p2 = a + clamp(t, 0.0, 1.0)*ab; //the projected point on ab, with t clamped so that p2 stays on the segment\n    \n    float d = distance(p, p2); //the distance from the point to the line segment\n\n    //lines used to show example\n    vec3 col = sdLine(a, b, 0.01, uv) < 0.0 ? vec3(1) : vec3(0);\n    col = sdLine(a, p, 0.004, uv) < 0.0 ? vec3(0.8) : col;\n    col = sdLine(p, p2, 0.002, uv) < 0.0 ? vec3(0.6) : col;\n    col = sdLine(a, p2, 0.006, uv) < 0.0 ? vec3(0,1,0) : col;\n    col = distance(p,uv) < 0.015 ? vec3(0,0,1) : col;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}