{
    "Shader": {
        "info": {
            "date": "1520306024",
            "description": "Trying some reflections based on iq's Cubemaps, please help me get it right as it is not photoreal as it should",
            "flags": 0,
            "hasliked": 0,
            "id": "MsdyW2",
            "likes": 7,
            "name": "Reflect Learning",
            "published": 3,
            "tags": [
                "raymarch",
                "reflect",
                "signeddistancefunction"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 743
        },
        "renderpass": [
            {
                "code": "#define EPS 0.0001\n#define STEPS 1028\n#define FAR 1000.0\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\nfloat noise( in vec3 x )\n{\n\n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nfloat pla( vec3 p )\n{\n\n    return p.y + 1.0;\n    \n}\n\nfloat sph( vec3 p, float r )\n{\n\n    float wav = texture( iChannel1, vec2( 0.0, 0.25 ) ).x;\n    r += r * 0.15 * ( fbm( p * fbm( p + wav + iTime ) ) );\n    return length( p ) - r;\n    \n}\n\nvec2 map( vec3 p )\n{\n\n    vec2 sp = vec2( sph( p, 1.0 ), 0.0 );\n    vec2 pla = vec2( pla( p ), 1.0 );\n    /*if( sp.x < pla.x ) pla = sp;\n    return pla;*/\n    return sp;\n    \n}\n\nvec3 grad( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return vec3( map( p + e.xyy ).x -  map( p - e.xyy ).x,\n                 map( p + e.yxy ).x -  map( p - e.yxy ).x,\n                 map( p + e.yyx ).x -  map( p - e.yyx ).x \n                );\n    \n}\n\n/*float softShadows( in vec3 ro, in vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n    \n        float h = map( ro + rd * t ).x;\n        if( h < EPS ) return 0.0;\n        res = max( res, 8.0 * h / t );\n        \n    }\n    \n    return res;\n    \n}*/\n\nvec3 rend( vec3 ro, vec3 rd, float t )\n{\n\n    /*vec3 p = ro + rd * t;\n    vec3 n = normalize( grad( p ) );\n    vec3 col;\n    //vec3 lig = vec3( 1.0, 0.8, 0.6 );\n    vec3 lig = 2.0 * normalize( vec3( sin( iTime ), 0.6, cos( iTime ) ) );\n    vec3 ref = reflect( rd, p );\n    vec3 refN = reflect( rd, n );\n    vec3 con = vec3( 1.0 );\n    vec3 cub = texture( iChannel0, ref ).xyz;\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float dif = max( 0.0, dot( n, lig ) );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 6.0 );\n    float rim = pow( clamp( 1.0 + dot( n, rd ), 0.0, 1.0 ), 4.0 );\n    float fre = 0.3 + 0.7*pow( clamp( 1.0 + dot( rd, p ), 0.0, 1.0 ), 5.0 );\n    float sha = softShadows( p, lig );\n    \n    col = con * vec3( 1.0 );\n    col += vec3( 1.0 ) * amb;\n    //col += dif * vec3( 0.45 );\n    col += 0.5 * rim;\n    col += 0.3 * spe;\n    col += 0.1 * sha;\n    col += 2.0 * dot( cub, vec3( 3.0 ) ) * fre;\n    //col = sqrt( col );\n    col *= 0.1;\n    \n    \n    vec3 tex = texture( iChannel1, p.xz ).xyz;\n    \n    //if( map( p ).y == 0.0 ) col *= tex * 2.0;\n    \n    if( map( p ).y == 1.0 ) col *= vec3( 0.0, 0.5, 0.8 );\n    \n    return col;*/\n    \n    vec3 n = normalize( grad( ro + rd * t ) );\n    vec3 lig = normalize( vec3( sin( iTime ), 0.8, cos( iTime ) ) );\n    vec3 ref = reflect( rd, n );\n    vec3 col;\n    vec3 tex = texture( iChannel0, ref ).rgb;\n    \n    //float rim = pow( clamp( 1.0 + dot( rd, ref ), 0.0, 1.0 ), 4.0 );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    col += tex;\n    //col += 0.2 * rim;\n    col += 1.0 * spe;\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec3 ro = 2.0 * vec3( sin( iTime * 0.2 ), 0.0, cos( iTime * 0.2 ) );\n    //vec3 ro = vec3( 0.0, 0.0, 2.0 );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n\n    float t = 0.0, d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n    \td = map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        \n        t += d;\n        \n    \n    }\n    \n    // Time varying pixel color\n    \n    vec3 tex = texture( iChannel0, rd ).xyz;\n    \n    vec3 col = d < EPS ? rend( ro, rd, t ) : vec3( tex );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}