{
    "Shader": {
        "info": {
            "date": "1690286110",
            "description": "Playing around with noise to create random shapes",
            "flags": 0,
            "hasliked": 0,
            "id": "Dd2fDd",
            "likes": 3,
            "name": "Tidal screensaver",
            "published": 3,
            "tags": [
                "noise",
                "waves"
            ],
            "usePreview": 0,
            "username": "ChibiDenDen",
            "viewed": 175
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += vec2(noise(uv + vec2(0.2, 0.4)* iTime), noise(uv.yx + vec2(0.7, 0.1)* iTime))*2.2f;\n    if (fract(uv.x) > 0.2) {\n\n        // Time varying pixel color\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    } else {\n    \n        // Time varying pixel color\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.yyx+vec3(1,2,3));\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}