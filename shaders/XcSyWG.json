{
    "Shader": {
        "info": {
            "date": "1722878776",
            "description": "//4.6\n//Formas\n//Poligonos",
            "flags": 0,
            "hasliked": 0,
            "id": "XcSyWG",
            "likes": 2,
            "name": "Formas 4.6 - Poligono",
            "published": 3,
            "tags": [
                "mix",
                "tutorial",
                "sin",
                "color",
                "cos",
                "shaders",
                "shaders",
                "livecoding",
                "functions",
                "shape",
                "shaping",
                "taller",
                "formas",
                "tutoriales",
                "osciladores"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 56
        },
        "renderpass": [
            {
                "code": "//4.6\n//Formas\n//Poligonos\n\n//Taller de Livecoding con visuales en GLSL 4.0 \n#define PI 3.14159265359\n#define TWO_PI PI * 2.\n#define resolution iResolution\n#define time iTime\n//DECLARO UNA FUNCION. ESTA FUNCION ME SIRVE PARA GENERAR POLIGONOS.\n//Funcion sacada de : https://thebookofshaders.com/07/\n//aunque la transformaci칩n a funci칩n fue hecha por jp.\nfloat poly(vec2 uv,vec2 p, float s, float dif,int N,float a){\n    // Remap the space to -1. to 1.\n    vec2 st = p - uv ;\n    // Angle and radius from the current pixel\n    float a2 = atan(st.x,st.y)+a;\n    float r = TWO_PI/float(N);\n    float d = cos(floor(.5+a2/r)*r-a2)*length(st);\n    float e = 1.0 - smoothstep(s,s+dif,d);\n    return e;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / resolution.xy; // De esta manera obtenemos las coordenadas cartesianas\n    \n    //ESTO ES PARA ARREGLAR EL ASPECT RADIO. \n    //Es decir para que no importa la resoluci칩n que tenga, el circulo siempre sea un circulo perfecto.\n    float fix = resolution.x/resolution.y; //Creo la variable que me permite arreglar esto.\n    uv.x*=fix;\n    \n    //TAMBIEN PUEDO UTILIZAR UNA FUNCION PARA HACER POLIGONOS : \n    //los parametros que recibe la funcion son : \n    //-UV, \n    //-posicion(si le pongo el fix tengo que multiplicar el x por el fix),\n    //-El tama침o del poligono\n    //-El diffuse(osea la interpolacion entre el negro y el blanco.\n    //-Cantidad de puntas.\n    //-Angulo.\n    float e = poly(uv,vec2(0.25*fix,0.25), 0.1,0.05,3,time*0.5); \n          e+= poly(uv,vec2(0.75*fix,0.75), 0.1,0.01,4,-time); \n          e+= poly(uv,vec2(0.25*fix,0.75), 0.1,0.0,5,-time*0.5); \n          e+= poly(uv,vec2(0.75*fix,0.25), 0.0,0.5,5,time); \n          \n    fragColor = vec4(vec3(e),1.0); \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}