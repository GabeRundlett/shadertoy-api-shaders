{
    "Shader": {
        "info": {
            "date": "1593974896",
            "description": "Thought I'd have a go at a truchet pattern using octagons and squares seeing as they tessellate nicely.\nIt's looking a bit rough around the edges at the moment...\nLooks better full screen.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lByzm",
            "likes": 3,
            "name": "Octagon and Square Truchet",
            "published": 3,
            "tags": [
                "truchet"
            ],
            "usePreview": 0,
            "username": "Oggbog",
            "viewed": 288
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(144.34, 1051.74));\n    p += dot(p, p + 230.45);\n    return fract(p.x * p.y + p.y + p.x);\n}\n\n\nvec2 rot(vec2 st, float a){\n   return st * mat2(cos(a),-sin(a),sin(a),cos(a)); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 qv = uv - 0.5;\n    \n    float g = 5.; // has to be an odd number to work correctly\n    \n    vec2 id = floor(uv * g);\n    uv = fract(uv * g)-.5;\n    vec2 qd = floor(qv * g);\n    qv = fract(qv * g)-.5;\n    \n    float c = .71;\n    float m = 0.;\n\t\n    vec2 sv = uv;\n    \n    float t =(iTime*.5)*PI/4.;\n    float tq = (iTime * .5)*PI/2.;\n    float r = hash21(id);\n    float q = hash21(qd);\n    \n    uv = rot(uv,id.x*floor(t*r)*PI/4.);\n    qv = rot(qv,qd.x*floor(tq*q)*PI/2.);\n    \n    \n    // Octagon pattern\n    m+= uv.y < .05 && uv.y > -.05  && uv.x > -.5 && uv.x < -.3 ? 1.:0.;\n  \tm+= uv.y < .5 && uv.y > .3 && uv.x < .05 && uv.x > -.05 ? 1.:0.;\n    m+= uv.y < uv.x+.35 && uv.y > uv.x +.2  && uv.x < .05  && uv.y > -0.05 ? 1.:0.;\n\t\n    uv = rot(uv,PI);\n    m+= uv.y < .05 && uv.y > -.05  && uv.x > -.5 && uv.x < -.3 ? 1.:0.;\n  \tm+= uv.y < .5 && uv.y > .3 && uv.x < .05 && uv.x > -.05 ? 1.:0.;\n    m+= uv.y < uv.x+.35 && uv.y > uv.x +.2  && uv.x < .05  && uv.y > -0.05 ? 1.:0.;\n \t\n    m += uv.y >-uv.x - .071 && uv.y < -uv.x + .071 && uv.y > uv.x-c && uv.y < uv.x + c ? 1.:0.;\n    uv = rot(uv,PI/2.);\n    m += uv.y >-uv.x - .071 && uv.y < -uv.x + .071 && uv.y > uv.x-c && uv.y < uv.x + c ? 1.:0.;\n    \n    // Square pattern\n    m += qv.x>-.2 && qv.x<-.11 && qv.y<0.18 && qv.y > -0.18 ? 1.:0.;\n   \tm += qv.x<.2 && qv.x>.11 && qv.y<0.18 && qv.y > -0.18 ? 1.:0.;\n   \n    vec3 col =vec3(m);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}