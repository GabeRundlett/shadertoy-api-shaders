{
    "Shader": {
        "info": {
            "date": "1691839591",
            "description": "A gear made of spheres rendered with no for loop.",
            "flags": 0,
            "hasliked": 0,
            "id": "dlSyWm",
            "likes": 15,
            "name": "WIP - Loopless Sphere gear",
            "published": 3,
            "tags": [
                "3d",
                "wip",
                "realtime",
                "analytic",
                "gear",
                "loopless"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592653;\nvec3 getRay(in vec3 cameraDir, in vec2 uv) { //get camear ray direction\n    vec3 cameraPlaneU = vec3(normalize(vec2(cameraDir.y, -cameraDir.x)), 0);\n    vec3 cameraPlaneV = cross(cameraPlaneU, cameraDir) ;\n\treturn normalize(cameraDir*2.0 + uv.x * cameraPlaneU + uv.y * cameraPlaneV);\n}\nconst float inf = 10000.;\nvec2 sphere( in vec3 ro, in vec3 rd, float ra )\n{\n    float b = dot( ro, rd );\n    float c = dot( ro, ro ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(inf); \n    h = sqrt( h );\n    if (c < 0.0) return vec2(0, -b+h);\n    return vec2(-b-h, -b+h);\n}\nbool inCone(in vec3 o, in float k) {\n    return o.x*o.x+o.y*o.y+o.z*o.z*k < 0.0 && o.z < 0.0;\n}\nfloat cone(in vec3 o, in vec3 d, in float k) {\n    o.z *= k;\n    d.z *= k;\n    float a = (d.x*d.x + d.y*d.y + k*d.z*d.z)*2.0;\n    float b = 2.0*(o.x*d.x + o.y*d.y + k*o.z*d.z);\n    float c = o.x*o.x + o.y*o.y + k*o.z*o.z;\n    if (c < 0.0&&o.z>0.0) return 0.0;\n    float disc = b*b - 2.*a*c;\n    \n    if (disc < 0.0) return inf;\n    float dist = (-b - sqrt(disc))/a;\n    if (dist < 0.0 || o.z+d.z*dist < 0.0) return inf;\n    return dist;\n}\nfloat hit(in vec3 o, in vec3 d, in float kk, in float z, in float count, float an) {\n    float g = 0.5*(count/PI);\n    float f = 0.55;\n    float dist = cone(o, d, -kk);\n    if (dist >= inf) return inf;\n    vec3 p = o+d*dist;\n    if (p.z > 0.0) return inf;\n    float angle = atan(p.x, p.y)+an;\n    float fangle = floor(angle*g)/g;\n    float tangle = abs(g*(angle-fangle)-0.5)*2.0;\n    vec3 col;\n    vec3 oo = o;\n    o += d*dist;\n    if (tangle < f) {\n        fangle -= an;\n        float k = (PI/count);\n        float h = k*(1.-f);\n        vec2 dir = vec2(cos(-fangle-k*2.0+h), sin(-fangle-k*2.0+h));\n        float pz = -(dot(o.xy, dir))/dot(d.xy, dir);\n        if (pz < 0.0) pz = inf;\n        \n        dir = vec2(cos(-fangle-h), sin(-fangle-h));\n        float pzz = -(dot(o.xy, dir))/dot(d.xy, dir);\n        if (pzz < 0.0) pzz = inf;\n        float dd = (min(pz, pzz));\n        vec3 cp = o+d*(dd);\n        if (inCone(cp, -kk*kk*kk)) dist += dd;//return inf;\n        else dist = inf;\n        //dist += dd;\n    }\n    dist = min(dist, cone(oo, d, -kk*z));\n    vec3 pos = oo+d*dist;\n    return dist;\n}\n#define gear(ro, rd, size, teeth, time) d=min(d,hit(ro, rd, size, 0.8, teeth, time))\nconst float s2 = sqrt(2.);\nconst float s2i = 1./s2;\nfloat hitShape(in vec3 ro, in vec3 rd) {\nconst float teeth = 12.;\n    float m = 0.6;\n    vec3 xo = vec3(ro.x,ro.y*s2i+ro.z*s2i,ro.z*s2i-ro.y*s2i);\n    vec3 xd = vec3(rd.x,rd.y*s2i+rd.z*s2i,rd.z*s2i-rd.y*s2i);\n    vec3 yo = vec3(ro.x*s2i+ro.z*s2i,ro.y,ro.z*s2i-ro.x*s2i);\n    vec3 yd = vec3(rd.x*s2i+rd.z*s2i,rd.y,rd.z*s2i-rd.x*s2i);\n    vec3 zo = vec3(ro.x*s2i+ro.y*s2i,ro.y*s2i-ro.x*s2i,ro.z);\n    vec3 zd = vec3(rd.x*s2i+rd.y*s2i,rd.y*s2i-rd.x*s2i,rd.z);\n    \n    float d = inf;\n    float g = (PI*2.0)/teeth*0.5;\n    float time = iTime*0.5;\n    \n    gear(ro, rd, 0.6, teeth, time);\n    gear(-ro, -rd, 0.6, teeth, -time);\n    gear(-ro.yzx, -rd.yzx, 0.6, teeth, -time);\n    gear(ro.yzx, rd.yzx, 0.6, teeth, time);\n    gear(ro.zxy, rd.zxy, 0.6, teeth, time);\n    gear(-ro.zxy, -rd.zxy, 0.6, teeth, -time);\n    time += g;\n    gear(-xo, -xd, 0.6, teeth, time);\n    gear(xo, xd, 0.6, teeth, -time);\n    gear(-xo.zxy, -xd.zxy, 0.6, teeth, time);\n    gear(xo.zxy, xd.zxy, 0.6, teeth, -time);\n    \n    gear(-yo, -yd, 0.6, teeth, time);\n    gear(yo, yd, 0.6, teeth, -time);\n    gear(-yo.yzx, -yd.yzx, 0.6, teeth, time);\n    gear(yo.yzx, yd.yzx, 0.6, teeth, -time);\n    \n    gear(-zo.yzx, -zd.yzx, 0.6, teeth, time);\n    gear(zo.yzx, zd.yzx, 0.6, teeth, -time);\n    gear(-zo.zxy, -zd.zxy, 0.6, teeth, time);\n    gear(zo.zxy, zd.zxy, 0.6, teeth, -time);\n    return d;\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    vec2 bound = sphere(ro, rd, 1.0);\n    vec2 innerBound = sphere(ro, rd, 0.8);\n    if (bound.x >= inf) return vec3(0);\n    float d = hitShape(ro+rd*bound.x, rd)+bound.x;\n    \n    float dis = d;\n    if (dis >= bound.y) return vec3(0);\n    if (dis >= innerBound.x) {\n        d = hitShape(ro+rd*innerBound.y, rd)+innerBound.y;\n        if (d > bound.y) return vec3(0);\n    };\n    vec3 p = ro+rd*d;\n    return vec3(mix(vec3(0.6), vec3(1), 1.-1./(0.5+10.*(length(p)-0.8)))*exp(-d)*20.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    vec2 m = vec2(iTime*0.5, 0.75*sin(iTime*0.5)+PI*0.5);\n    if (iMouse.z > 0.0) m = ((iMouse.xy)/iResolution.xy) * vec2(6.28, 3.14159263);\n        \n    vec3 ro = vec3(sin(m.y) * cos(-m.x), sin(m.y) * sin(-m.x), cos(m.y))*4.25;\n    vec3 rd = getRay(-normalize(ro), uv);\n    vec3 color = getColor(ro, rd);\n\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}