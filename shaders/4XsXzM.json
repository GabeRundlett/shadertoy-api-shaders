{
    "Shader": {
        "info": {
            "date": "1709278076",
            "description": "A clone of Appleâ€™s Spectrum screensaver, all credits are to Apple inc.",
            "flags": 32,
            "hasliked": 0,
            "id": "4XsXzM",
            "likes": 2,
            "name": "MacOS Screensaver (Spectrum)",
            "published": 3,
            "tags": [
                "colorful",
                "screensaver",
                "macos"
            ],
            "usePreview": 0,
            "username": "cph101",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 oColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n\tfloat y = gl_FragCoord.y;\n\tfloat step1 = iResolution.y * 0.50;\n\n\tvec4 color1 = HSLToRGB(transformHSL(RGBToHSL(blue1), fract(iTime / 10.0), 1.0, 0.8));\n\tvec4 color2 = HSLToRGB(transformHSL(RGBToHSL(blue2), fract(iTime / 20.0), 1.0, 0.8));\n\tvec4 color3 = HSLToRGB(transformHSL(RGBToHSL(blue1), fract(iTime / 16.0), 1.0, 0.8));\n\n\tvec4 layer1 = mix(color1, color2, smoothstep(iResolution.y, step1, y));\n\tlayer1 = mix(layer1, color3, smoothstep(step1, 0.0, y));\n    \n\n\toColor = mix(texture(iChannel0, uv), layer1, 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float hueToRGB(float f1, float f2, float hue) {\n\tif (hue < 0.0) {\n\t\thue += 1.0;\n\t} else if (hue > 1.0) {\n\t\thue -= 1.0;\n\t}\n\n\tfloat res;\n\n\tif ((6.0 * hue) < 1.0) {\n\t\tres = f1 + (f2 - f1) * 6.0 * hue;\n\t} else if ((2.0 * hue) < 1.0) {\n\t\tres = f2;\n\t} else if ((3.0 * hue) < 2.0) {\n\t\tres = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n\t} else {\n\t\tres = f1;\n\t}\n\n\treturn res;\n}\n\nvec4 RGBToHSL(vec4 rgb) {\n\tvec4 hsl;\n\thsl.w = rgb.w;\n\n\tfloat fmin = min(min(rgb.r, rgb.g), rgb.b);\n\tfloat fmax = max(max(rgb.r, rgb.g), rgb.b);\n\tfloat delta = fmax - fmin;\n\n\thsl.z = (fmax + fmin) / 2.0;\n\n\tif (delta == 0.0) {\n\t\thsl.x = 0.0;\n\t\thsl.y = 0.0;\n\t} else {\n\t\tif (hsl.z < 0.5) {\n\t\t\thsl.y = delta / (fmax + fmin);\n\t\t} else {\n\t\t\thsl.y = delta / (2.0 - fmax - fmin);\n\t\t}\n\n\t\tfloat deltaR = (((fmax - rgb.r) / 6.0) + (delta / 2.0)) / delta;\n\t\tfloat deltaG = (((fmax - rgb.g) / 6.0) + (delta / 2.0)) / delta;\n\t\tfloat deltaB = (((fmax - rgb.b) / 6.0) + (delta / 2.0)) / delta;\n\n\t\tif (rgb.r == fmax) {\n\t\t\thsl.x = deltaB - deltaG;\n\t\t} else if (rgb.g == fmax) {\n\t\t\thsl.x = (1.0 / 3.0) + deltaR - deltaB;\n\t\t} else if (rgb.b == fmax) {\n\t\t\thsl.x = (2.0 / 3.0) + deltaG - deltaR;\n\t\t}\n\n\t\tif (hsl.x < 0.0) {\n\t\t\thsl.x += 1.0;\n\t\t} else if (hsl.x > 1.0) {\n\t\t\thsl.x -= 1.0;\n\t\t}\n\t}\n\n\treturn hsl;\n}\n\nvec4 HSLToRGB(vec4 hsl) {\n\tvec4 rgb;\n\n\tif (hsl.y == 0.0) {\n\t\trgb = vec4(hsl.z);\n\t} else {\n\t\tfloat f2;\n\n\t\tif (hsl.z < 0.5) {\n\t\t\tf2 = hsl.z * (1.0 + hsl.y);\n\t\t} else {\n\t\t\tf2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\n\t\t}\n\n\t\tfloat f1 = 2.0 * hsl.z - f2;\n\n\t\trgb.r = hueToRGB(f1, f2, hsl.x + (1.0/3.0));\n\t\trgb.g = hueToRGB(f1, f2, hsl.x);\n\t\trgb.b = hueToRGB(f1, f2, hsl.x - (1.0/3.0));\n\t\trgb.a = hsl.w;\n\t}\n\n\treturn rgb;\n}\n\nvec4 transformHSL(vec4 hsl, float h, float s, float v) {\n\treturn vec4(fract(hsl.x + h), hsl.y * s, hsl.z * v, hsl.w);\n}\n\nconst vec4 blue1 = vec4(0.588235294, 0.745098039, 0.929411765, 1.0);\nconst vec4 blue2 = vec4(0.635294118, 0.8, 1.0, 1.0);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = gl_FragCoord.x;\n    float step1 = iResolution.x * 0.50;\n\n    vec4 color1 = HSLToRGB(transformHSL(RGBToHSL(blue1), fract(iTime / 17.0), 1.0, 0.8));\n    vec4 color2 = HSLToRGB(transformHSL(RGBToHSL(blue2), fract(iTime / 22.0), 1.0, 0.8));\n    vec4 color3 = HSLToRGB(transformHSL(RGBToHSL(blue1), fract(iTime / 12.0), 1.0, 0.8));\n\n    vec4 color = mix(color1, color2, smoothstep(iResolution.x, step1, x));\n    fragColor = mix(color, color3, smoothstep(step1, 0.0, x));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}