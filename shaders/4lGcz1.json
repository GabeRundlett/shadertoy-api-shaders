{
    "Shader": {
        "info": {
            "date": "1535009715",
            "description": "#TokyoDemoFest #CEDEC2018",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGcz1",
            "likes": 58,
            "name": "Optical Stream",
            "published": 3,
            "tags": [
                "opticalstream",
                "tokyodemofest",
                "cedec2018"
            ],
            "usePreview": 0,
            "username": "notargs",
            "viewed": 4489
        },
        "renderpass": [
            {
                "code": "\nconst float PI = 3.1415926;\n\nvec3 rgb2hsv(vec3 hsv)\n{\n\tvec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(vec3(hsv.x) + t.xyz) * 6.0 - vec3(t.w));\n\treturn hsv.z * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), hsv.y);\n}\n\nmat2 rotate(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(\n\t\tc, -s,\n\t\ts, c\n\t);\n}\n\nfloat rand(vec4 co)\n{\n    return fract(sin(dot(co, vec4(12.9898, 78.233, 15.2358, 29.23851))) * 43758.5453);\n}\n\nfloat groundDist(vec3 pos)\n{\n\tpos.y += sin(pos.z * 0.2 + pos.x + iTime * 10.0) * 0.5;\n\tpos.x = mod(pos.x, 4.0) - 2.0;\n\treturn length(pos.yx);\n}\n\nfloat particleDist(vec3 pos)\n{\n    pos += cross(sin(pos * 0.05 + iTime), cos(pos * 0.05 + iTime)) * 3.0;\n    pos.z += iTime * 200.0;\n    vec3 id = floor(pos / 16.0);\n    pos = mod(pos, 16.0) - 8.0;\n    pos += vec3(rand(vec4(id, 0.0)), rand(vec4(id, 1.0)), rand(vec4(id, 2.0))) * 10.0 - 5.0;\n\treturn max(length(pos.yx), abs(pos.z) - 2.0);\n}\n\nfloat skyDist(vec3 pos)\n{\n\tpos.z += iTime * 50.0;\n    vec3 id = floor(pos / 50.0);\n    \n    vec3 t = iTime * vec3(0.0125, 0.25, 0.5);\n    vec3 a = vec3(rand(vec4(id, floor(t.x))), rand(vec4(id + 10.0, floor(t.y))), rand(vec4(id + 20.0, floor(t.z))));\n    vec3 b = vec3(rand(vec4(id, floor(t.x + 1.0))), rand(vec4(id + 10.0, floor(t.y + 1.0))), rand(vec4(id + 20.0, floor(t.z + 1.0))));\n    vec3 c = mix(a, b, pow(fract(t), vec3(1.0 / 4.0)));\n    \n    float s = sign(mod(id.x + id.y + id.z + 0.5, 2.0) - 1.0);\n    vec3 u = iTime / 3.0 + vec3(1.0, 2.0, 3.0) / 3.0;\n    vec3 d = floor(u);\n    vec3 e = floor(u + 1.0);\n    vec3 f = mix(d, e, pow(fract(u), vec3(1.0 / 8.0)));\n    \n\tpos = mod(pos, 50.0) - 25.0;\n\tfor (int i = 0; i < 3; ++i)\n\t{\n\t    pos.yz = rotate(f.x * PI / 2.0 * s) * pos.yz;\n\t    pos.xz = rotate(f.y * PI / 2.0 * s) * pos.xz;\n\t    pos.xy = rotate(f.z * PI / 2.0 * s) * pos.xy;\n\t\tpos = abs(pos);\n\t\tpos -= (c * 12.0);\n\t\tpos *= 2.0;\n\t\tif (pos.x > pos.z) pos.xz = pos.zx;\n\t\tif (pos.y > pos.z) pos.yz = pos.zy;\n\t\tif (pos.x < pos.y) pos.xy = pos.yx;\n\t}\n\treturn length(pos.xz) / 8.0;\n}\n\nfloat dist(vec3 pos)\n{\n\tfloat d = 3.402823466E+38;\n\td = min(d, groundDist(pos));\n\td = min(d, skyDist(pos));\n\treturn d;\n}\n\nvec3 calcNormal(vec3 pos)\n{\n\tvec2 ep = vec2(0.001, 0.0);\n\treturn normalize(vec3(\n\t\tdist(pos + ep.xyy) - dist(pos - ep.xyy),\n\t\tdist(pos + ep.yxy) - dist(pos - ep.yxy),\n\t\tdist(pos + ep.yyx) - dist(pos - ep.yyx)\n\t));\n}\n\nvec3 calcColor(vec3 pos)\n{\n\treturn rgb2hsv(vec3(pos.x * 0.04 + iTime, 1, 1));\n}\n\nvec3 march(vec3 pos, vec3 dir)\n{\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\tfor (int i = 0; i < 32; ++i)\n\t{\n\t\tfloat d = dist(pos);\n\t\tpos += dir * d * 0.9;\n\t\tcolor += max(vec3(0.0), 0.02 / d * calcColor(pos));\n\t}\n\t\n\treturn color;\n}\n\nvec3 marchParticle(vec3 pos, vec3 dir)\n{\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\tfor (int i = 0; i < 32; ++i)\n\t{\n\t\tfloat d = particleDist(pos);\n\t\tpos += dir * d * 0.9;\n\t\tcolor += max(vec3(0.0), 0.005 / d * vec3(1.0, 1.0, 1.0));\n\t}\n\t\n\treturn color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\t\n\tvec3 pos = vec3(0, 0.0, -10);\n\tvec3 dir = normalize(vec3(p, 1.0));\n\tdir.yz = rotate(-0.5) * dir.yz;\n\tpos.yz = rotate(-0.5) * pos.yz;\n\tdir.xz = rotate(sin(iTime) * 0.3) * dir.xz;\n\tpos.xz = rotate(sin(iTime) * 0.3) * pos.xz;\n\tdir.xy = rotate(0.1 + sin(iTime * 0.7) * 0.1) * dir.xy;\n\tpos.xy = rotate(0.1 + sin(iTime * 0.7) * 0.1) * pos.xy;\n\t\n\tvec3 color = vec3(0, 0, 0) * length(p.xy) * sin(iTime * 10.0);\n\t\n\tcolor += march(pos, dir);\n\tcolor += marchParticle(pos, dir);\n\t\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}