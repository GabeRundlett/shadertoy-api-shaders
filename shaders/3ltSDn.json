{
    "Shader": {
        "info": {
            "date": "1580752045",
            "description": "Stay away Superman",
            "flags": 0,
            "hasliked": 0,
            "id": "3ltSDn",
            "likes": 9,
            "name": "Caged Kryptonite",
            "published": 3,
            "tags": [
                "voronoi",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 750
        },
        "renderpass": [
            {
                "code": "// \"Caged Kryptonite\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Object shape based on varying Voronoi displacements.\n  Motivated by Shane's \"Geometric Cellular Surfaces\", but with a lot less work,\n  so no need for texture storage.\n*/\n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec3 Hashv3v3 (vec3 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\n\nvec3 ltDir;\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat VPoly (vec3 p)\n{\n  vec3 ip, fp, g, w, wm;\n  float s, sm, d, wo;\n  ip = floor (p);\n  fp = fract (p);\n  wo = 0.2 * sin (0.4 * tCur);\n  sm = 4.;\n  for (float gz = -1.; gz <= 1.; gz ++) {\n    for (float gy = -1.; gy <= 1.; gy ++) {\n      for (float gx = -1.; gx <= 1.; gx ++) {\n        g = vec3 (gx, gy, gz);\n        w = g + 0.5 * Hashv3v3 (ip + g) + wo - fp;\n        s = dot (w, w);\n        if (s < sm) {\n          sm = s;\n          wm = w;\n        }\n      }\n    }\n  }\n  d = 4.;\n  for (float gz = -1.; gz <= 1.; gz ++) {\n    for (float gy = -1.; gy <= 1.; gy ++) {\n      for (float gx = -1.; gx <= 1.; gx ++) {\n        g = vec3 (gx, gy, gz);\n        w = g + 0.5 * Hashv3v3 (ip + g) + wo - fp - wm;\n        s = dot (w, w);\n        if (s > 1e-3) d = SmoothMin (d, dot (0.5 * (w + 2. * wm), w / sqrt (s)), 0.15);\n      }\n    }\n  }\n  return d;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d, dh, w;\n  dMin = dstFar;\n  d = length (p) - 1.;\n  if (d < 0.5) {\n    w = (0.1 + 0.9 * SmoothBump (0.1, 0.9, 0.05, mod (0.05 * tCur, 1.))) *\n       VPoly (3. * normalize (p));\n    dh = SmoothMin (d + 0.1, SmoothMax (d - 0.2, 0.08 - w, 0.1) +\n       0.1 * (1. - 0.7 * smoothstep (0.1, 0.4, w)), 0.1);\n    d = SmoothMax (abs (d), w, 0.05) - 0.05;\n    DMIN (1);\n    d = dh + 0.01 * Noisefv3 (64. * p);\n    DMIN (2);\n  } else dMin = d;\n  return 0.5 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  vec2 f;\n  f = mod (16. * vec2 (atan (rd.z, - rd.x), asin (rd.y)) / pi, 1.);\n  return 0.5 * mix (vec3 (0.2, 0.3, 0.6), vec3 (0.7, 0.7, 0.4),\n     max (SmoothBump (0.47, 0.53, 0.01, f.x), SmoothBump (0.47, 0.53, 0.01, f.y))) *\n     (0.7 + 0.3 * rd.y);\n}\n\nfloat GlowCol (vec3 ro, vec3 rd, float dstObj)\n{\n  vec3 dirGlow;\n  float dstGlow, brGlow;\n  brGlow = 0.;\n  dirGlow = - ro;\n  dstGlow = length (ro);\n  dirGlow /= dstGlow;\n  if (dstGlow < dstObj) brGlow = 5. * pow (max (dot (rd, dirGlow), 0.), 128.) / dstGlow;\n  return clamp (brGlow * SmoothBump (0.1, 0.9, 0.05, mod (0.05 * tCur, 1.)), 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstObj, sh, vv;\n  roo = ro;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) col4 = vec4 (0.8, 0.4, 0.2, 0.2);\n    else if (idObj == 2) col4 = vec4 (mix (vec3 (0.1, 0.5, 0.2),\n       vec3 (0.5, 0.5, 0.1), 0.3 * step (0.5, Noisefv3 (4. * ro +\n       4. * Fbm1 (2. * tCur)))), -1.);\n    vv = max (dot (vn, ltDir), 0.);\n    sh = ObjSShadow (ro, ltDir);\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.2 + 0.8 * sh * vv * vv) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n      col = mix (col, BgCol (reflect (rd, vn)), 0.3);\n    } else {\n      vv = max (- dot (vn, rd), 0.);\n      col = (0.5 + 0.5 * sh) * col4.rgb * (0.8 + 0.3 * Fbm1 (6.5 * tCur)) *\n         (0.6 + 0.4 * vv * vv);\n    }\n  } else col = 0.3 * BgCol (rd);\n  col = mix (col, vec3 (0.3, 1., 0.8), GlowCol (roo, rd, dstObj));\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.002 * pi * tCur;\n    el -= 0.05 * pi * sin (0.001 * pi * tCur);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -8.);\n  zmFac = 6.;\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec3 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}