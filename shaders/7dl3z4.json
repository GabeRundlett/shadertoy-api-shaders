{
    "Shader": {
        "info": {
            "date": "1615615667",
            "description": "I can't wait to do this in 3D!",
            "flags": 32,
            "hasliked": 0,
            "id": "7dl3z4",
            "likes": 12,
            "name": "Emergent Boids",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "behavior",
                "flocking",
                "boids",
                "emergent"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BOIDS 250\n\n#define BOID_COLOR vec3(0.12, 0.56, 1.0)\n#define BOID_SIZE 0.005\n\n#define MOTION_BLUR 0.9\n\n#define VIEW_RADIUS 0.225\n\n#define SPEED_LIMIT 0.0175\n#define NUDGE 0.001\n#define MARGIN 0.0\n\n#define COHERENCE 0.0125\n#define SEPERATION 0.005\n#define ALIGNMENT 0.0001\n\n#define getBoidPos(id) texelFetch(iChannel0, ivec2(id, 0), 0).xy\n#define getBoidVel(id) texelFetch(iChannel0, ivec2(id, 1), 0).xy\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 initPos(in float seed) {\n    return Hash12(seed) - 0.5;\n}\n\nvec2 initVel(in float seed) {\n    return Hash12(seed * 487.583 + 35.847) * 0.01 - 0.005;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 corner = vec2(iResolution.x / iResolution.y * 0.5, 0.5);\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFragCoord.x < BOIDS) {\n        if (iFrame == 0) {\n            if (iFragCoord.y == 0) fragColor.xy = initPos(fragCoord.x);\n            if (iFragCoord.y == 1) fragColor.xy = initVel(fragCoord.x);\n        }\n\n        if (iFrame > 0) {\n            vec2 boidPos = getBoidPos(iFragCoord.x);\n            vec2 boidVel = getBoidVel(iFragCoord.x);\n\n            if (iFragCoord.y == 0) {\n                boidPos += boidVel;\n                fragColor.xy = boidPos;\n            }\n\n            if (iFragCoord.y == 1) {\n                vec2 center = vec2(0.0);\n                vec2 repel = vec2(0.0);\n                vec2 align = vec2(0.0);\n                float neighbors = 0.0;\n                for (int id=0; id < BOIDS; id++) {\n                    vec2 boidPos2 = getBoidPos(id);\n                    vec2 boidVel2 = getBoidVel(id);\n                    if (id != iFragCoord.x && length(boidPos - boidPos2) < VIEW_RADIUS) {\n                        center += boidPos2;\n                        repel += boidPos - boidPos2;\n                        align += boidVel2;\n                        neighbors++;\n                    }\n                }\n\n                if (neighbors > 0.0) {\n                    center /= neighbors;\n                    repel /= neighbors;\n                    align /= neighbors;\n\n                    boidVel += (center - boidPos) * COHERENCE;\n                    boidVel += repel * SEPERATION;\n                    boidVel += (align - boidVel) * ALIGNMENT;\n                }\n\n                if (boidPos.x > corner.x - MARGIN) boidVel.x -= NUDGE;\n                if (-boidPos.x > corner.x - MARGIN) boidVel.x += NUDGE;\n                if (boidPos.y > corner.y - MARGIN) boidVel.y -= NUDGE;\n                if (-boidPos.y > corner.y - MARGIN) boidVel.y += NUDGE;\n\n                fragColor.xy = normalize(boidVel) * min(length(boidVel), SPEED_LIMIT);\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy) * MOTION_BLUR;\n    float unit = 2.0 / iResolution.y;\n\n    for (int id=0; id < BOIDS; id++) {\n        vec2 boidPos = getBoidPos(id);\n        float d = length(uv - boidPos) - BOID_SIZE;\n        fragColor.rgb = mix(fragColor.rgb, BOID_COLOR, smoothstep(unit, 0.0, d));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}