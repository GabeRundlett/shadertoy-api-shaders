{
    "Shader": {
        "info": {
            "date": "1608645314",
            "description": "Inspired by: [url]https://www.shadertoy.com/view/wtcyz8[/url] and [url]https://www.shadertoy.com/view/wl3yR4[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "3l3yz7",
            "likes": 12,
            "name": "More Rosettes",
            "published": 3,
            "tags": [
                "loopless",
                "rosette"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 375
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// More Rosettes, Matthew Arcus, mla, 2020\n//\n// Draw rosette pattern looplessly, but also drawing each circle in the same\n// colour. Also clip pattern at some radius.\n//\n// 'c': clip pattern\n// 'd': moving dots\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat X = sqrt(3.0);\n\nfloat pwidth;\n\nvec3 docircle(vec3 col, vec2 p, vec2 index, vec2 s, vec2 cindex) {\n  index += s*cindex;\n  uint h = ihash(ivec2(index));\n  vec3 ccol = hsv2rgb(float(h)/pow(2.0,32.0),1.0,1.0);\n  vec2 ccentre = 0.5*vec2(1,X)*cindex;\n  col = mix(ccol,col,0.2+0.8*smoothstep(0.015,0.025+pwidth,circle(p,vec3(ccentre,1))));\n  if (!key(CHAR_D)) {\n    float t = iTime;\n    if (mod(index.x+index.y,4.0) < 2.0) t = -t;\n    vec2 dotpos = ccentre + s*vec2(sin(t),cos(t));\n    float dotdist = distance(p,dotpos);\n    col = mix(vec3(1),col,smoothstep(0.015,0.025+pwidth,dotdist));\n  }\n  return col;\n}\n\nbool checksegment(vec2 index, vec2 s, float r, vec2 offset) {\n  if (key(CHAR_C)) return true;\n  vec2 p = 0.5*vec2(1,X)*abs(index+s*offset);\n  return dot(p,p) < r*r;\n}\n\nvec3 diagram(vec2 p) {\n  float scale = 3.0;\n  p *= scale;\n  vec2 p0 = p;\n  pwidth = fwidth(p0.x);\n  p.y /= X;\n  vec2 index = round(p); // Coords of centre\n  p -= index;\n  index *= 2.0;\n  p.y *= X;\n  vec3 col = mod(index.x+index.y,4.0)< 2.0 ? vec3(1) : vec3(0.8);\n  vec2 s = ssign(p);\n  p = abs(p);\n  vec3 ccol = vec3(0);\n  float r = mod(iTime,6.0);\n  if (checksegment(index,s,r,vec2(1,1))) {\n    if (checksegment(index,s,r,vec2(-1,1))) {\n      col = docircle(col,p,index,s,vec2(0,2));\n    }\n    if (checksegment(index,s,r,vec2(2,0))) {\n      col = docircle(col,p,index,s,vec2(3,1));\n    }\n  }\n  if (checksegment(index,s,r,vec2(0,0))) {\n    if (checksegment(index,s,r,vec2(1,1))) {\n      col = docircle(col,p,index,s,vec2(2,0));\n      col = docircle(col,p,index,s,vec2(-1,1));\n    }\n    if (checksegment(index,s,r,vec2(-1,1))) {\n      col = docircle(col,p,index,s,vec2(-2,0));\n    }\n    if (checksegment(index,s,r,vec2(2,0))) {\n      col = docircle(col,p,index,s,vec2(1,-1));\n    }\n  }\n  if (!key(CHAR_C)) col = mix(vec3(0),col,smoothstep(0.0,pwidth,abs(length(p0)-r)));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = diagram(p);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  //rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nuint ihash(int x) {\n  return ihash(uint(x));\n}\n\n// Sensible sign function\nvec2 ssign(vec2 p) {\n  return vec2(p.x < 0.0 ? -1 : 1, p.y < 0.0 ? -1 : 1);\n}\n\nfloat circle(vec2 p, vec3 c) {\n  vec2 centre = c.xy;\n  float radius = c.z;\n  return abs(length(p-centre)-radius);\n}\n\nuint ihash(ivec2 index) {\n  return ihash(index.x ^ int(ihash(index.y)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}