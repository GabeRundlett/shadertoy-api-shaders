{
    "Shader": {
        "info": {
            "date": "1509641355",
            "description": "I made a heart, it's very simple but also pretty cute!",
            "flags": 0,
            "hasliked": 0,
            "id": "4tjcz3",
            "likes": 2,
            "name": "Pretty Heart",
            "published": 3,
            "tags": [
                "procedural",
                "cute",
                "simple",
                "sdf",
                "fun",
                "heart",
                "shader",
                "metal",
                "pretty",
                "polarcoords"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 658
        },
        "renderpass": [
            {
                "code": "struct Polar\n{\n\tfloat r;\n    float o;\n};\n\nfloat atan2(in float y, in float x)\n{\n    float s = step(abs(x), abs(y));\n    return mix(3.14159/2.0 - atan(x,y), atan(y,x), s);\n}\n\nPolar ToPolar(in vec2 pos)\n{\n\tPolar p;\n    p.o = atan2(pos.y, pos.x);\n\tp.r = length(pos);\n\treturn p;\n}\n\nfloat f(in float x)\n{\n\treturn x * x * x;\n}\n\nfloat po(in Polar p)\n{\n    return 1.7 - 2.0 * sin(p.o) + sin(p.o)*(sqrt(abs(cos(p.o)))/(sin(p.o) + 1.4));\n}\n\nvec3 proj(vec3 p, vec3 n)\n{\n    return dot(p, n) * n;\n}\n\nvec2 proj(vec2 p, vec2 n)\n{\n    return dot(p, n) * n;\n}\n\nstruct Spheric\n{\n    float rad;\n    float the;\n    float phi;\n};\n\nvec3 MathCoord(in vec3 p)\n{\n    vec3 n;\n    n.y = p.z;\n    n.x = p.x;\n    n.z = p.y;\n    return n;\n}\n    \nSpheric ToSpheric(in vec3 p)\n{\n    Spheric s;\n    s.rad = length(p);\n    s.the = atan(p.y / p.x);\n    s.phi = acos(p.z / s.rad);\n    return s;\n}\n\nvec3 FromSpheric(in Spheric s)\n{\n    return vec3(s.rad * cos(s.phi) * sin(s.phi), s.rad * sin(s.the) * sin(s.phi), s.rad * cos(s.phi));\n}\n\nvec2 FromPolar(in Polar p)\n{\n    return vec2(cos(p.o), sin(p.o)) * p.r;\n}\n\nfloat sdf(vec3 p)\n{\n    //p = MathCoord(p);\n    //Spheric s = ToSpheric(p);\n    \n    // float t = abs(cos(s.phi)*sin(s.phi)*sin(s.the));\n    // float t = abs(3.0 * pow(cos(s.phi),2.0) - 1.0);\n    \n    p.xy *= ((sin(iTime * 2.5) * 0.1 + 0.1) + 1.0) + sin(p.y + iTime) * 0.05;\n    \n    p.y -= 1.0;\n    Polar po = ToPolar(p.xy);\n    \n    float phi = po.o;\n    float t = 2.0 - 2.0 * sin(phi) + sin(phi)*(sqrt(abs(cos(phi)))/(sin(phi) + 1.4));\n    \n    p.y -= abs(p.x);\n    return max(po.r - t, 0.0) + abs(p.z);\n}\n\nvec3 Norm(vec3 p)\n{\n    const float cEps = 0.01;\n \n\treturn normalize\n\t(\tvec3\n\t\t(\tsdf(p + vec3(cEps, 0, 0)\t) - sdf(p - vec3(cEps, 0, 0)),\n\t\t\tsdf(p + vec3(0, cEps, 0)\t) - sdf(p - vec3(0, cEps, 0)),\n\t\t\tsdf(p + vec3(0, 0, cEps)\t) - sdf(p - vec3(0, 0, cEps))\n\t\t)\n\t);\n}\n\nvec3 lookAt(vec3 p, vec3 t)\n{\n    return normalize(t - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float aspect = iResolution.x / iResolution.y;\n    vec2 screenPos = uv * 2.0 - 1.0;\n    \n    float angle = iTime * 0.25+3.14/2.0;\n    vec2 forw = vec2(cos(angle), sin(angle)) * 5.0;\n    \n    vec3 o = vec3(forw.x,0.0,forw.y);\n    vec3 forward = lookAt(o, vec3(0));\n    vec3 up = vec3(0,1.0, 0);\n    vec3 right = vec3(forward.z, 0.0, -forward.x);\n    \n    vec3 dir = normalize(forward * 1.5 + right * screenPos.x * aspect + up * screenPos.y);\n    \n    float d = 0.0;\n    \n    vec4 fc = texture(iChannel0, dir);\n    vec4 dc = vec4(1.0, 0.1, 0.1, 1.0);\n    \n\n    for(int i = 0; i < 64; i++)\n    {\n        vec3 p = o + dir * d;\n        \n        float nd = sdf(p);\n        if(nd < 0.1)\n        {\n            vec3 n = Norm(p);\n            float l = dot(n, vec3(0.707, 0, 0.707)) * 0.5 + 0.7;\n            \n            vec3 r = reflect(-normalize(o - p), n);\n            vec4 rc = mix(vec4(1), texture(iChannel0, r), 0.7);\n            \n            vec4 b = dc * rc;\n        \tfc = pow(b * l, vec4(1.0/2.2));\n        \tbreak;\n        }\n        else if(d > 8.0f)\n        {\n            break;\n        }\n        \n        d += nd * (float(i) / 128.0);\n    }\n    \n\tfragColor = fc;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}