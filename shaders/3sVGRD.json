{
    "Shader": {
        "info": {
            "date": "1569835259",
            "description": "A simulation of the 2D wave equation, using leapfrog integration.\nAlso contains a simple light refraction effect.",
            "flags": 32,
            "hasliked": 0,
            "id": "3sVGRD",
            "likes": 16,
            "name": "Wave simulation w/ refraction",
            "published": 3,
            "tags": [
                "wave",
                "simulation",
                "interactive",
                "equation",
                "pde",
                "differential"
            ],
            "usePreview": 0,
            "username": "id523",
            "viewed": 827
        },
        "renderpass": [
            {
                "code": "\n\n// Specular reflection from surface\nconst float lightPower = 600.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pos = ivec2(fragCoord);\n\tfloat p = v(pos,0,0).x;\n    vec3 g = vec3(gradScale * (v(pos,1,0).x - p), gradScale * (v(pos,0,1).x - p), 1.0);\n    vec3 ng = normalize(g);\n    vec2 texPos = (fragCoord - k * ng.xy) / iResolution.xy;\n    fragColor = texture(iChannel1, texPos);\n    fragColor.rgb += vec3(pow(max(dot(ng, lightPos),0.0), lightPower));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Simulation step size\nconst float h = 0.3;\n\n// High-frequency damping parameter\nconst float d = 0.003;\n\nconst float gradScale = 40.0;\n\n// Direction of light source\nconst vec3 lightPos = normalize(vec3(-0.1, -0.18, 1.0));\n\n// Scale factor for ripple refraction\nconst float k = 120.0;\n\nvec4 readState(sampler2D tex, ivec2 pos, ivec2 bound) {\n    ivec2 posClamp = clamp(pos, ivec2(0), bound - 1);\n    vec4 nearestState = texelFetch(tex, posClamp, 0);\n    // Try to simulate an absorbing boundary\n    if (posClamp != pos) {\n    \tnearestState.x -= nearestState.y - 0.5 * h * nearestState.z;\n    }\n    return nearestState;\n}\n\n#define v(pos, dx, dy) readState(iChannel0, pos + ivec2(dx, dy), ivec2(iResolution.xy))\n\n#define UPDATE_WAVE \\\n\tivec2 pos = ivec2(fragCoord); \\\n    vec4 state = v(pos,0,0); \\\n    state.z = v(pos,1,0).x + v(pos,-1,0).x + v(pos,0,1).x + v(pos,0,-1).x - 4. * state.x; \\\n   \tstate.y += state.z * h; \\\n    state.x += (state.y + d * state.z) * h;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UPDATE_WAVE\n    fragColor = state;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UPDATE_WAVE\n    fragColor = state;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// hash22 from https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        for (int i = 0; i < 20; i++) {\n            vec2 circlePos = iResolution.xy * hash22(vec2(i, iDate.w));\n            vec2 circleProps = hash22(vec2(i + 100, iDate.w));\n        \tfloat circ = smoothstep(-4.0, 4.0, circleProps.x * 20.0 - length(fragCoord - circlePos));\n            circ *= circleProps.y - 0.5;\n            fragColor.x += circ;\n        }\n    } else {\n        \n        UPDATE_WAVE\n            \n        if (iMouse.z > 0.) {\n            state.x -= 0.05 * smoothstep(-2., 2., 5. - length(fragCoord - iMouse.xy));\n        }\n        \n        fragColor = state;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}