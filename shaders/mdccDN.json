{
    "Shader": {
        "info": {
            "date": "1695167320",
            "description": " todo: use domain repetition",
            "flags": 0,
            "hasliked": 0,
            "id": "mdccDN",
            "likes": 5,
            "name": "circular_sine",
            "published": 3,
            "tags": [
                "sdf",
                "sine",
                "polar"
            ],
            "usePreview": 0,
            "username": "Dolfun",
            "viewed": 97
        },
        "renderpass": [
            {
                "code": "#define NUM_ITERS 2\n#define PI 3.14159265359\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n\n    return a + b*cos(6.28318*(c*t + d));\n}\n\nfloat r(float r0, float a, float n, float phi, float theta) {\n    return r0*(1.0 + a*sin(n*theta + phi));\n}\n\nfloat r1(float r0, float a, float n, float phi, float theta) {\n    return r0*a*n*cos(n*theta + phi);\n}\n\nfloat r2(float r0, float a, float n, float phi, float theta) {\n    return -r0*a*n*n*sin(n*theta + phi);\n}\n\nfloat dist_sq(float r0, float a, float n, float phi, float theta, vec2 v) {\n    float rv = r(r0, a, n, phi, theta);\n    return dot(v, v) + rv*rv - 2.0*rv*(v.x*cos(theta)+v.y*sin(theta));\n}\n\nfloat dist1(float r0, float a, float n, float phi, float theta, vec2 v) {\n    float rv = r(r0, a, n, phi, theta);\n    float rv1 = r1(r0, a, n, phi, theta);\n    return rv*rv1 - rv1*(v.x*cos(theta)+v.y*sin(theta)) + rv*(v.x*sin(theta)-v.y*cos(theta));\n}\n\nfloat dist2(float r0, float a, float n, float phi, float theta, vec2 v) {\n    float rv = r(r0, a, n, phi, theta);\n    float rv1 = r1(r0, a, n, phi, theta);\n    float rv2 = r2(r0, a, n, phi, theta);\n    return rv1*rv1 + rv*rv2 + (rv-rv2)*(v.x*cos(theta)+v.y*sin(theta)) + 2.0*rv1*(v.x*sin(theta)-v.y*cos(theta));\n}\n\n#define NUM_TRIALS 2\nfloat sdf_csin(float r0, float a, float n, float phi, vec2 v) {\n    float ep = 0.001;\n    if (dist_sq(r0, a, n, phi, atan(v.y, v.x), v) <= ep * ep) return 0.0;\n    \n    float theta0 = (floor(n * atan(v.y, v.x) / PI)) * PI / n;\n    float d = 1e9;\n    for (int i = -NUM_TRIALS; i <= NUM_TRIALS; ++i) {\n        float theta = theta0 + float(i) * PI / (2.0 * n);\n        for (int j = 0; j < NUM_ITERS; ++j) {\n            theta -= dist1(r0, a, n, phi, theta, v) / dist2(r0, a, n, phi, theta, v);\n        }\n        d = min(d, dist_sq(r0, a, n, phi, theta, v));\n    }\n    \n    return sqrt(d);\n}\n\n#define N 18\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float ar = iResolution.z;\n    float t = iTime;\n    \n    float r0 = 0.25;\n    float rd = 0.1;\n    float a = 0.1;\n    float n = 10.0;\n        \n    vec3 color = vec3(0.0);\n    for (int i = 0; i < N; ++i) {\n        float phi = 0.2 * t * float(N - i);\n        if (i % 2 == 0) phi *= -1.0;\n        float n1 = n + float(i * 4);\n        float a1 = a * sin(2.5 * t + float(i) * 2.0 * PI / float(N)) / float(i + 1);\n        float sdf = sdf_csin(r0 + float(i) * rd, a1, n1, phi, uv);\n        float d = 0.003 / sdf;\n        color += vec3(d) * palette(length(uv) + 0.25 * t);\n    }\n    \n    float m = sqrt(1.0 + ar * ar) + 0.25;\n    color *= 2.0 - smoothstep(0.0, 0.25, abs(length(uv) - mod(0.25 * t, m)));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}