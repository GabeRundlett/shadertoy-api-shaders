{
    "Shader": {
        "info": {
            "date": "1603366975",
            "description": "Uses one buffer to perform a flood",
            "flags": 32,
            "hasliked": 0,
            "id": "tsycRc",
            "likes": 3,
            "name": "Shore Flood 2",
            "published": 3,
            "tags": [
                "buffer",
                "single"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord*dif.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Single buffer, because the states are limited for the pixels which means I could trace all possible combinations,\n//which resulted in me getting the same result on paper when I used 1 or 2 buffers. But the 2 buffer makes it possible to\n//have equal value after the simulation and before the simulation. Which the 1 buffer can not exceed.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*dif.xy;\n   //fragColor = vec4(max(fragColor.x-0.5,0.) + ((\n   //    \t\t\t\t  fragColor.x == 0. && \n   //    texture(iChannel0, uv + dif.xz).x != 0. &&\n   //    texture(iChannel0, uv - dif.xz).x != 0. &&\n   //    texture(iChannel0, uv + dif.zy).x != 0. &&\n   //    texture(iChannel0, uv - dif.zy).x != 0.) ? 1. : 0.)) + vec4((length(fragCoord-iMouse.xy) < 1.) ? 1. : 0.);\n    \n    float State = max(texture(iChannel0, uv).x-0.5,0.) + ((\n        texture(iChannel0, uv).x == 0. &&\n        (\n        \ttexture(iChannel0, uv + dif.xz).x != 0. ||\n        \ttexture(iChannel0, uv - dif.xz).x != 0. ||\n        \ttexture(iChannel0, uv + dif.zy).x != 0. ||\n        \ttexture(iChannel0, uv - dif.zy).x != 0.\n     \t)) ? 1. : 0.);\n    float Mouse = ((length(fragCoord-iMouse.xy) < 20. && iMouse.z > 0.) || (iTime < 0.1 && length(uv-vec2(0.5)) < 0.1 ) ? 1. : 0.);\n    \n    fragColor = vec4(min(State + Mouse, 1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define dif vec3(1./iResolution.xy,0.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}