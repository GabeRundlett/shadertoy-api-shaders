{
    "Shader": {
        "info": {
            "date": "1713971765",
            "description": "moire inspired by https://shadertoy.com/view/lc3SWN",
            "flags": 0,
            "hasliked": 0,
            "id": "4ccXWM",
            "likes": 9,
            "name": "3D Moire",
            "published": 3,
            "tags": [
                "moire"
            ],
            "usePreview": 0,
            "username": "JuliaPoo",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "// Fork of \"Shape Designing Sandbox\" by JuliaPoo. https://shadertoy.com/view/3sXyzf\n// 2024-04-24 14:34:33\n\n// ###############################\n// ### STRUCTS and other stuff ###\n// ###############################\n\n\n#define END 50.\n\nstruct CAM {\n    vec3 lookat;\n    vec3 ro;\n\n    vec3 forw;\n    vec3 up;\n    vec3 right;\n    \n    float field;\n};\n    \nstruct RAY {\n\tvec3 ro;       \n    vec3 rd;\n};\n    \nmat2 rot(float a)\n{\n    float c0 = cos(a);\n    float s0 = sin(a);\n    return mat2(\n        c0,-s0,\n        s0, c0\n    );\n}\n\n// #############\n// ### SCENE ###\n// #############\n\n// --- Useful Funcs ---\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat ssub( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat sint( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); \n}\n\nfloat onion( in float d, in float h )\n{\n    return abs(d)-h;\n}\n\n// --- PRIMITIVES ---    \n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// --- SCENE ---\n\nfloat sdScene(vec3 P)\n{\n    float d;\n    P.xy *= rot(iTime * .1 - 3.8);\n    P.yz *= rot(iTime * .21 + 5.6);\n    #define PERIOD_LINES 10.\n    #define PERIOD_CIRCLES 70.\n    #define THICK_LINES .4\n    \n    float modp1 = length(mod(P.xy*PERIOD_LINES, 1.) - .5) - THICK_LINES;\n    float modp2 = length(mod(P.yz*PERIOD_LINES, 1.) - .5) - THICK_LINES;\n    float modp3 = length(mod(P.zx*PERIOD_LINES, 1.) - .5) - THICK_LINES;\n    \n    float circles = mod(sqrt(length(P))*PERIOD_CIRCLES, 1.) - .05; \n    \n    d = min(min(modp1, modp2), modp3);\n    d = max(-d, circles);\n    d = max(d, sdBox(P, vec3(3.5)));\n    \n    return d*.05;\n}\n\n// #################\n// ### RENDERING ###\n// #################\n\n// --- Camera ---\n\nvoid InitCamera(inout CAM c)\n{\n    vec2 M = (iMouse.xy/iResolution.xy - 0.5) * 3.14;\n    \n    // x,y,z = right, up, forw\n    c.lookat = vec3(0);\n    \n    c.ro = vec3(0., 0., -10.);\n    c.ro.zy *= rot(M.y);\n    c.ro.xz *= rot(M.x);\n    \n    c.forw = normalize(c.lookat - c.ro);\n    c.right = normalize(cross(c.forw, vec3(0.0, 1.0, 0.0)));\n    c.up = normalize(cross(c.right, c.forw));\n    c.field = 2.;\n}\n\nvoid InitRay(inout RAY r, CAM c, vec2 uv)\n{\n    r.rd = normalize(uv.x*c.right + uv.y*c.up + c.field*c.forw);\n    r.ro = c.ro;\n}\n\n// --- Raytracing ---\n\nvec3 get_normal(vec3 p) {\n\tconst vec2 e = vec2(0.002, 0);\n\treturn normalize(vec3(sdScene(p + e.xyy)-sdScene(p - e.xyy), \n                          sdScene(p + e.yxy)-sdScene(p - e.yxy),\t\n                          sdScene(p + e.yyx)-sdScene(p - e.yyx)));\n}\n\nfloat Intersect(RAY r)\n{\n    float t = 0.01;\n    for( int i=0; i<512; i++ )\n    {\n        float c = sdScene(r.ro + r.rd*t);\n        if( c < 0.005 ) break;\n        t += c;\n        if( t>END ) return END;\n    }\n    return t;\n}\n\n// -- Shading --\n\nvec3 Render(vec2 uv)\n{\n    CAM camera;\n    RAY ray;\n    \n    InitCamera(camera);\n    InitRay(ray, camera, uv);\n    \n    float d = Intersect(ray);\n    vec3 p = d*ray.rd + ray.ro;\n    \n    vec3 n;\n    if (d < END) n = get_normal(p);\n    \n    return n;\n}\n\n// #######################\n// ### POST PROCESSING ###\n// #######################\n\nvoid PostProcessing(){}\n\n// ############\n// ### MAIN ###\n// ############\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = -1.0 + 2.0 * uv;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = Render(uv);\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}