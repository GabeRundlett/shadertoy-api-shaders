{
    "Shader": {
        "info": {
            "date": "1555546158",
            "description": "Some different circle parametrizations, and the math behind them to make them as constant speed as possible, without trigonometry. Maybe.",
            "flags": 0,
            "hasliked": 0,
            "id": "3slGWM",
            "likes": 17,
            "name": "Circle parametrizations",
            "published": 3,
            "tags": [
                "2d",
                "circle"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 812
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n\n Trying to parametrize a circle without using trigonometry. Two\n possible ways to do so are:\n\n * p(t) = sqrt( 1-t, t )\n * p(t) = ( 1-t², 2t ) / (1+t²)\n\n When plotted you'll see points equidistant in parameter space\n are not equidistant in the plane or across arcelength. The \n reason is the tangent to the curve, p'(t), has no constant\n length. Let's try to fix it.\n\n\n\n 1. Fixing p(t) = sqrt( 1-t, t );\n\n We compute the length (squared) of the tangent. We wish that\n was a constant, but it's not:\n\n |p'(t)|² = 1/[ 4·t·(1-t) ]\n\n We can try to fix it by introducing a reparametrization s(t),\n still to be determined, such that we now do\n\n p(s(t)) = sqrt( 1-s(t), s(t) )\n\n and\n\n |p'(t)|² = s'(t)² / [ 4·s(t)·(1-s(t)) ]\n\n Since we want the derivative to be constant, we need to\n choose s(t) such that its squared derivative is proportional\n to itself minus its square. That sounds a lot like the kind\n of thing trigonometric functioins do. And indeed, with some\n exploration you can quickly find that\n\n s(t) = 1/2 - 1/2·cos(PI·t)\n\n produces exactly a consant derivative! So, \n\n s(t) = 1/2 - 1/2·cos(PI·t)\n p(s(t)) = sqrt( 1-s(t), s(t) )\n\n will produce an perfect circle. However, the point was to\n avoid using trigonometrics. So here's an alternative: do\n s(t) = t²(3-2t), a cubic smoothstep, which is close to the\n cosine curve.\n\n This approximation only changes the position of the sampling\n points along the circle. The circle itself is still a perfect\n curcle, for |p(t)| is still 1 exactly.\n\n \n\n 2. Fixing p(t) = ( 1-t², 2t ) / (1+t²);\n\n We proceed similary. In this case,\n  \n |p'(t)| = 2/(1+t²)\n\n So we introduce a reparametrization\n\n p(s(t)) = p = ( 1-s²(t), 2s(t) ) / (1+s²(t));\n\n and by the chain rule |p'(s(t))| = |s'(t)|·|p'(s(t))|. Then\n\n s'(t) = (1+s²(t))·k/2\n\n Since we want s(0)=0 and s(1)=1, that means k=s'(1)\n \n s'(t) = (1+s²(t))·s'(1)/2\n\n which can be fulfilled by s(t) = tan(t*PI/4), so\n\n s(t) = tan(t*PI/4)\n p(t) = ( 1-t², 2t ) / (1+t²)\n\n is a perfect cicle. But we can approximate s(t) by  \n\n s(t) = t*(0.7612+t*t*0.2388) \t\t\t\t\t\t\t MSE=1.32e-5  ERR=5.4e-3\n s(t) = t*(0.787756+t*t*(0.145251+t*t*0.066993)) \t\t MSE=1.06e-7  ERR=4.9e-4\n s(t) = t*(0.7856+t*t*(0.1604+t*t*(0.0382+t*t*0.01578))) MSE=2.35e-9  ERR=8.1e-5\n \n in which case we still have a perfect circle with\n nearly-perfectly equidistant points. \n*/\n\n\n// 0 : p(t) = ( cos(t), sin(t) )\n// 1 : p(t) = sqrt( 1-t, t )\n// 2 : p(t) = ( 1-t², 2t ) / (1+t²)\n#define PARMATRIZATION 1\n\n// Make 16 to see more dramatic effets\n#define NUMPOINTS 50\n\n\n//----------------------------------------\nconst float pi = 3.1415926535;\n\nvec2 circle( in float t )\n{\n#if PARMATRIZATION==0\n    vec2 p = vec2( -sin(2.0*pi*t), cos(2.0*pi*t) );\n#endif\n    \n#if PARMATRIZATION==1\n    float s = fract(t*4.0);\n    \n  //s = 0.5-0.5*cos( s*pi ); // exact\n    s = s*s*(3.0-2.0*s);       // approximation\n    \n    vec2 p = sqrt( vec2(1.0-s,s) );\n         if( t<0.25 ) p = vec2(-p.y, p.x);\n    else if( t<0.50 ) p = vec2(-p.x,-p.y);\n    else if( t<0.75 ) p = vec2( p.y,-p.x);\n#endif\n        \n#if PARMATRIZATION==2\n    float s = fract(t*4.0);\n        \n    #if 0\n  \ts = tan(s*3.14159/4.0);     // exact\n    #else \n  \tfloat s2 = s*s; \t\t\t// approximation\n  //s = s*(0.7612+s2*0.2388);  \t\t\t\t\t\t\t// MSE=1.32e-5  ERR=5.4e-3\n    s = s*(0.787756+s2*(0.145251+s2*0.066993)); \t\t// MSE=1.06e-7  ERR=4.9e-4\n  //s = s*(0.7856+s2*(0.1604+s2*(0.0382+s2*0.01578))); \t// MSE=2.35e-9  ERR=8.1e-5\n    #endif\n\n           \n    vec2 p = vec2( 1.0-s*s, 2.0*s ) / (1.0+s*s);\n         if( t<0.25 ) p = vec2(-p.y, p.x);\n    else if( t<0.50 ) p = vec2(-p.x,-p.y);\n    else if( t<0.75 ) p = vec2( p.y,-p.x);\n#endif        \n        \n    return p;\n}\n        \n//----------------------------------------\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat animate( float t )\n{\n    return fract(t+iTime*0.05);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float sc = 1.2;\n\n    float px = sc*2.0/iResolution.y;\n\tvec2  p  = sc*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // compute distance to shape, brute force way\n    vec2 o = circle(animate(0.0));\n    vec2 d = vec2(length( p - o ));\n    for( int i=0; i<NUMPOINTS; i++ )\n    {\n        float t = animate(float(i+1)/float(NUMPOINTS));\n        vec2  c = circle(t);\n        float w = sdSegment( p, o, c );\n        d = min( d, vec2(w, length(p-c)-0.02) );\n        o = c;\n\t}\n    \n\t// colorize\n    vec3 col = vec3(0.25)*(1.0-0.1*length(p));\n    col = mix( col, vec3(1.0,1.0,1.0), 1.0 - smoothstep(0.0, 2.0*px, d.x ) );\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0 - smoothstep(0.0, 2.0*px, d.y ) );\n    \n    // dither\n    col += (1.0/128.0)*cos(31.1*dot(fragCoord,vec2(57.,13.)));\n\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}