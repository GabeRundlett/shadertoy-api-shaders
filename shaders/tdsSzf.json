{
    "Shader": {
        "info": {
            "date": "1551810814",
            "description": "The evening began with an attempt at doing a cave/tunnel and this came out... I guess I need to focus more next time. You can drag the ball around with the mouse (LMB pressed). It's a bit heavy due to the noise and small raymarch step-size.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdsSzf",
            "likes": 7,
            "name": "Carved out cube",
            "published": 3,
            "tags": [
                "3d",
                "noise",
                "sdf",
                "boolean",
                "pbr"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 805
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// It was meant to become a carved out tunnel. You can drag the ball around with\n// the mouse (LMB pressed). Technically it has a cave structure in the cube. It\n// is 'just' missing the corresponding camera-path to follow it ;)\n//\n// Copyright 2019 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX_ITER    = 64;\nconst float STEP_SIZE = .6;\nconst float EPSILON   = .001;\nconst float PI = 3.14159265359;\n\nmat2 r2d (in float a)\n{\n    float c = cos(a);\n    float s = sin (a);\n    return mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nstruct Result {\n\tfloat d;\n\tint id;\n};\n\nfloat sdSphere (in vec3 p, float r)\n{\n    return length (p) - r;\n}\n\nfloat sdBox (in vec3 p, in vec3 size, in float r)\n{\n  vec3 d = abs(p) - size;\n  return min (max (d.x, max (d.y,d.z)), .0) + length (max (d, .0)) - r;\n}\n\n// PBR toolbox\nfloat DistributionGGX (in vec3 N, in vec3 H, in float roughness)\n{\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat GeometrySchlickGGX (in float NdotV, in float roughness)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat GeometrySmith (in vec3 N, in vec3 V, in vec3 L, in float roughness)\n{\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = GeometrySchlickGGX (NdotV, roughness);\n    float ggx2 = GeometrySchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness)\n{\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nfloat opCombine (in float d1, in float d2, in float r)\n{\n    float h = clamp (.5 + .5 * (d2 - d1) / r, .0, 1.);\n    return mix (d2, d1, h) - r * h * (1. - h);\n}\n\nfloat hashn (vec3 p, float t)\n{\n    p = fract (p*.3183099 + .1);\n    p *= 17.;\n    return max (fract (p.x*p.y*p.z*(p.x + p.y + p.z)), 1. - t); \n}\n\nfloat noise (in vec3 x, in float t)\n{\n    vec3 p = floor (x);\n    vec3 f = fract (x);\n    f = f*f*(3. - 2.*f);\n    \n    return mix(mix(mix( hashn(p+vec3(0,0,0), t), \n                        hashn(p+vec3(1,0,0), t),f.x),\n                   mix( hashn(p+vec3(0,1,0), t), \n                        hashn(p+vec3(1,1,0), t),f.x),f.y),\n               mix(mix( hashn(p+vec3(0,0,1), t), \n                        hashn(p+vec3(1,0,1), t),f.x),\n                   mix( hashn(p+vec3(0,1,1), t), \n                        hashn(p+vec3(1,1,1), t),f.x),f.y),f.z);\n}\n\nvec2 mapToScreen (in vec2 p)\n{\n    vec2 res = p;\n    res = res * 2. - 1.;\n    res.x *= iResolution.x / iResolution.y;\n    \n    return res;\n}\n\nfloat dd = .0;\n\n// ray-marching stuff\nResult scene (in vec3 p)\n{\n    float ground = p.y + 1.;\n\n\tvec3 sphereCenter = p;\n\tvec3 boxCenter = p;\n\tfloat offsetX = -2. * (iMouse.x / iResolution.x * 2. - 1.);\n\tfloat offsetY = 2. * (iMouse.y / iResolution.y * 2. - 1.);\n\tsphereCenter -= vec3 (offsetX, .25, offsetY);\n\tboxCenter -= vec3 (.0, .0, 1.25);\n\tboxCenter.xz *= r2d (-iTime);\n\n\tfloat sphere = sdSphere (sphereCenter, .6);\n\tfloat box = sdBox (boxCenter, vec3 (.8), .15);\n\n    float variation = 4. + 6.*(.5 + .5*cos (4.));\n\tvec3 structureCenter = boxCenter;\n\tstructureCenter.xz *= r2d (1.25*iTime);\n\tstructureCenter.yz *= r2d (.75*iTime);\n    float f = 2. + 1.5*(.5 + .5*cos (2.5*iTime));\n    float structure = noise (f*structureCenter, variation) - .65 + (sin (iTime) + 1.)*.05;\n    float combined = opCombine (box, sphere, .25);\n    float combinedAndCut = max (combined, structure);\n\tdd = combinedAndCut;\n\n    Result res = Result (.0, 0);\n\tres.d = min (combinedAndCut, ground);\n    res.id = (res.d == ground ) ? 1 : 2;\n    return res;\n}\n\nResult raymarch (in vec3 ro, in vec3 rd)\n{\n    Result res = Result (.0, 0);\n\n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        vec3 p = ro + res.d * rd;\n        Result tmp = scene (p);\n        if (abs (tmp.d) < EPSILON*(1. + .125*tmp.d)) return res;\n        res.d += tmp.d * STEP_SIZE;\n        res.id = tmp.id;\n    }\n\n    return res;\n}\n\nvec3 normal (in vec3 p)\n{\n    vec2 e = vec2(.0001, .0);\n    float d = scene (p).d;\n    vec3 n = vec3 (scene (p + e.xyy).d - d,\n                   scene (p + e.yxy).d - d,\n                   scene (p + e.yyx).d - d);\n    return normalize(n);\n}\n\nfloat shadow (in vec3 ro, in vec3 rd)\n{\n    float result = 1.;\n    float t = .1;\n    for (int i = 0; i < MAX_ITER; i++) {\n        float h = scene (ro + t * rd).d;\n        if (h < 0.00001) return .0;\n        result = min (result, 8. * h/t);\n        t += h;\n    }\n\n    return result;\n}\n\nvec3 shadePBR (in vec3 ro, in vec3 rd, in float d, in int id)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p);\n\n    // \"material\" hard-coded for the moment\n    float mask1 = .5 + .5 * cos (20.* p.x * p.z);\n    float mask2 = 0.;\n\tfloat mask = (id == 1) ? mask1 : mask2;\n\tfloat f = fract (dd*2.);\n    vec3 albedo1 = vec3 (1. - smoothstep (.025, .0125, f));\n    vec3 albedo2 = vec3 (.05, .65, .05);\n    vec3 albedo = (id == 1) ? albedo1 : albedo2;\n    float metallic  = (id == 1) ? .1 : .9;\n    float roughness = (id == 1) ? .9 : .1;\n    float ao = 1.;\n\n    // lights hard-coded as well atm\n    vec3 lightColors[2];\n    lightColors[0] = vec3 (.8, .8, .9) * 20.;\n    lightColors[1] = vec3 (.9, .8, .8) * 20.;\n\n    vec3 lightPositions[2];\n    lightPositions[0] = p + vec3 (.5, .75, -1.5);\n    lightPositions[1] = p + vec3 (-.3, .25, -.5);\n\n\tvec3 N = normalize (nor);\n    vec3 V = normalize (ro - p);\n\n    vec3 F0 = vec3 (0.04); \n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3(.0);\n\t\t           \n    // reflectance equation\n    vec3 Lo = vec3 (.0);\n    for(int i = 0; i < 2; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - p);\n        vec3 H = normalize(V + L);\n        float distance    = length(lightPositions[i] - p);\n        float attenuation = 1. / (distance * distance);\n        vec3 radiance     = lightColors[i] * attenuation;\n\t        \n        // cook-torrance brdf\n        float aDirect = .125 * pow (roughness + 1., 2.);\n        float aIBL = .5 * roughness * roughness;\n        float NDF = DistributionGGX(N, H, roughness);        \n        float G   = GeometrySmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0, roughness);\n\t        \n        vec3 kS = F;\n        kD = vec3(1.) - kS;\n        kD *= 1. - metallic;\t  \n\t        \n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = nominator / max(denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL; \n\t    Lo *= shadow (p, L);\n    }\n\n    vec3 ambient = (kD * albedo) * ao;\n\n    return ambient + Lo;\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom)\n{\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 camRight = normalize (cross (camForward, worldUp));\n    vec3 camUp = normalize (cross (camRight, camForward));\n    vec3 camCenter = normalize (ro + camForward * zoom);\n\n    return normalize ((camCenter + uv.x*camRight + uv.y*camUp) - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalizing and aspect-correction\n\tvec2 uvRaw = fragCoord/iResolution.xy;\n\tvec2 uv = uvRaw;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // set up \"camera\", view origin (ro) and view direction (rd)\n    vec3 ro = vec3 (0.0, 2.0, -5.0);\n    vec3 aim = vec3 (0.0, 2.0, 0.0);\n    float zoom = 1.;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    // do the ray-march...\n    Result res = raymarch (ro, rd);\n    float fog = 1. / (1. + res.d * res.d * .1);\n    vec3 c = shadePBR (ro, rd, res.d, res.id);\n\n    // tonemapping, \"gamma-correction\", tint, vignette\n\tc *= fog;\n\tc = c / (1. + c);\n    c = .2 * c + .8 * sqrt (c);\n    c *= vec3 (.9, .8, .7);\n    c *= .2 + .8*pow(16.*uvRaw.x*uvRaw.y*(1. - uvRaw.x)*(1. - uvRaw.y), .3);\n\n\tfragColor = vec4(c, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}