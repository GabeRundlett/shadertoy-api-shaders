{
    "Shader": {
        "info": {
            "date": "1513871274",
            "description": "Simple example how Euclidean distance can be used for color palettization.",
            "flags": 0,
            "hasliked": 0,
            "id": "4llBDf",
            "likes": 7,
            "name": "Euclidean Palette",
            "published": 3,
            "tags": [
                "c64",
                "palette",
                "commodore",
                "euclid"
            ],
            "usePreview": 1,
            "username": "k_kondrak",
            "viewed": 1178
        },
        "renderpass": [
            {
                "code": "// ----------------------------------------------------\n//  \"Euclidean Palette\" by Krzysztof Kondrak @k_kondrak\n// ----------------------------------------------------\n\n#define RGB(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n// C64 palette: http://unusedino.de/ec64/technical/misc/vic656x/colors/\n#define NUM_COLORS 16\nvec3 palette[NUM_COLORS];\n\n// pre GLES3 GPUs don't support array constructors, so need to initialize array explicitly \nvoid InitPalette()\n{\n    palette[0]  = RGB(0, 0, 0);\n    palette[1]  = RGB(255, 255, 255);\n    palette[2]  = RGB(116, 67, 53);\n    palette[3]  = RGB(124, 172, 186);\n    palette[4]  = RGB(123, 72, 144);\n    palette[5]  = RGB(100, 151, 79);\n    palette[6]  = RGB(64, 50, 133);\n    palette[7]  = RGB(191, 205, 122);\n    palette[8]  = RGB(123, 91, 47);\n    palette[9]  = RGB(79, 69, 0);\n    palette[10] = RGB(163, 114, 101);\n    palette[11] = RGB(80, 80, 80);\n    palette[12] = RGB(120, 120, 120);\n    palette[13] = RGB(164, 215, 142);\n    palette[14] = RGB(120, 106, 189);\n    palette[15] = RGB(159, 159, 150);\n}\n\n// find nearest palette color using Euclidean distance\nvec4 EuclidDist(vec3 c, vec3[NUM_COLORS] pal)\n{\n    int idx = 0;\n    float nd = distance(c, pal[0]);\n\n    for(int i = 1; i < NUM_COLORS; i++)\n    {\n        float d = distance(c, pal[i]);\n        \n        if(d < nd)\n        {\n            nd = d;\n            idx = i;\n        }\n    }\n\n    // older GPUs/drivers require constant array indexing, so can't use idx directly\n    if(idx == 0)  return vec4(pal[0], 1.);\n    if(idx == 1)  return vec4(pal[1], 1.);\n    if(idx == 2)  return vec4(pal[2], 1.);\n    if(idx == 3)  return vec4(pal[3], 1.);\n    if(idx == 4)  return vec4(pal[4], 1.);\n    if(idx == 5)  return vec4(pal[5], 1.);\n    if(idx == 6)  return vec4(pal[6], 1.);\n    if(idx == 7)  return vec4(pal[7], 1.);\n    if(idx == 8)  return vec4(pal[8], 1.);\n    if(idx == 9)  return vec4(pal[9], 1.);\n    if(idx == 10) return vec4(pal[10], 1.);\n    if(idx == 11) return vec4(pal[11], 1.);\n    if(idx == 12) return vec4(pal[12], 1.);\n    if(idx == 13) return vec4(pal[13], 1.);\n    if(idx == 14) return vec4(pal[14], 1.);\n    return vec4(pal[15], 1.);\n\n    // sleek but not guaranteed to work on older GPUs!\n    //return vec4(pal[idx], 1.);\n}\n\nvoid mainImage(out vec4 o, in vec2 p)\n{\n    vec2 uv = vec2(floor(p.x * .25) * 4., floor(p.y * .5) * 2.) / iResolution.xy;\n    InitPalette();   \n\n    if(iResolution.y - p.y < iTime * 100.)\n\t\to = EuclidDist(texture(iChannel0, uv).rgb, palette);\n    else\n        o = vec4(RGB(120, 105, 189), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}