{
    "Shader": {
        "info": {
            "date": "1705053989",
            "description": "rayMarching",
            "flags": 0,
            "hasliked": 0,
            "id": "McfSR7",
            "likes": 1,
            "name": "ray Marching basic 02",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "kenshin",
            "viewed": 109
        },
        "renderpass": [
            {
                "code": "#define MAX_DEPTH 80\n#define MAX_DIST 100.\n#define MIN_DIST .001\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdSphere(vec3 p)\n{\n    vec3 center = vec3(3. * sin(iTime), .0, .0);\n    return length(p - center) - .5;\n}\n\nfloat sdPlane(vec3 p)\n{\n    return p.y + .5;\n}\n\nmat2 rotate2d(float radian)\n{\n    float c = cos(radian);\n    float s = sin(radian);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdScene(vec3 p)\n{\n    float sphere = sdSphere(p);\n    //float plane = sdPlane(p);\n    float octahedron = sdOctahedron(p, .7);\n    return smin(sphere, octahedron, 3.);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float t = .0;\n    for(int i = 0; i < MAX_DEPTH; i++)\n    {\n        vec3 p = ro + t * rd;\n        float dist = sdScene(p);\n        t += dist;\n        if(dist <= MIN_DIST || t >= MAX_DIST) break;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec2 mousePos = iMouse.xy;\n    \n    \n    \n    vec3 ro = vec3(0, 0, -2.);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float t = rayMarch(ro, rd);\n    \n    vec3 a = vec3(0.8, 0.5, 0.4);\n    vec3 b = vec3(0.2, 0.4, 0.2);\n    vec3 c = vec3(2.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.25, 0.25);\n    vec3 col = palette(t, a, b, c, d);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}