{
    "Shader": {
        "info": {
            "date": "1706737287",
            "description": "Simple mandelbrot with an opening animation",
            "flags": 0,
            "hasliked": 0,
            "id": "4cSSDy",
            "likes": 0,
            "name": "Mandelbrot with cool animation",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "underscore95",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "float lengthSquared(vec2 v) {\n    return v.x * v.x + v.y * v.y;\n}\n\nvec2 complexMultiplication(vec2 v1, vec2 v2) {\n    // new real = reals multiplied together - imaginaries multiplied together (i^2 = -1)\n    // new imaginary = imaginary multiplied by real + real multipleid by imaginary\n    return vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvoid mainImage( out vec4 col, in vec2 xy )\n{\n    vec2 res = iResolution.xy;\n    int maxIters = min(200, int(iTime * 50.0f));\n    const float left = -2.0f;\n    const float right = 1.0f;\n    const float top = 1.125f;\n    const float bottom = -1.125f;\n    \n    vec2 c = vec2(left + (xy.x * (right - left) / res.x), top + (xy.y * (bottom - top) / res.y));\n    vec2 z = vec2(0);\n    \n    int i = 0;\n    while (i < maxIters && lengthSquared(z) < 4.0f) {\n        z = complexMultiplication(z,z) + c;\n        ++i;\n    }\n    \n    col = vec4(1.0f * float(i >= maxIters), 0, 0, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}