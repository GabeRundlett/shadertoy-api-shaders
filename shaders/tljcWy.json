{
    "Shader": {
        "info": {
            "date": "1595453202",
            "description": "i'm learning shaders and read a blog on game-of-life-style automata (https://kylehovey.github.io/blog/automata-nebula) and figured i could do it pretty easy in a shader so i did and it was not that easy but i figured it out\n\n(configuration in \"Buffer A\")",
            "flags": 32,
            "hasliked": 0,
            "id": "tljcWy",
            "likes": 1,
            "name": "Life-Like Cellular Automata",
            "published": 3,
            "tags": [
                "game",
                "automata",
                "life",
                "cellular",
                "conway",
                "ca",
                "lifelike"
            ],
            "usePreview": 0,
            "username": "KaWiz",
            "viewed": 892
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* ============================\n\nthese two tables define the ruleset\nand are pre-set with Game of Life rules\n(create if 3 neighbors, survive if 2 or 3)\n\nother popular ones to try:\n\nDay and Night (c 3678  s 34678)\nAnneal \t\t  (c 4678  s 35678)\nMaze-Finder   (c 138   s 12357)\nDiamoeba      (c 35678 s 5678)\nMorley \t\t  (c 368   s 245)\n\n================================ */\n\n// creation table (create if ONE neighbor, TWO neighbors, etc...)\n#define cONE   0\n#define cTWO   0\n#define cTHREE 1\n#define cFOUR  0\n#define cFIVE  0\n#define cSIX   0\n#define cSEVEN 0\n#define cEIGHT 0\n\n\n// survival table (survive if ONE neighbor, TWO neighbors, etc...)\n#define sONE   0\n#define sTWO   1\n#define sTHREE 1\n#define sFOUR  0\n#define sFIVE  0\n#define sSIX   0\n#define sSEVEN 0\n#define sEIGHT 0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 tex = ivec2(fragCoord);\n    ivec2 res = ivec2(iResolution.xy);\n    \n    // let's parse the user defines every frame because why not\n    int createTable  = 0 | 1 & cONE * 1 | 2 & cTWO * 2 | 4 & cTHREE * 4 | 8 & cFOUR * 8 | 16 & cFIVE * 16 | 32 & cSIX * 32 | 64 & cSEVEN * 64 | 128 & cEIGHT * 128;\n    int surviveTable = 0 | 1 & sONE * 1 | 2 & sTWO * 2 | 4 & sTHREE * 4 | 8 & sFOUR * 8 | 16 & sFIVE * 16 | 32 & sSIX * 32 | 64 & sSEVEN * 64 | 128 & sEIGHT * 128;\n    \n    int neighborCount = 0;\n    for(int i=-1;i<2;++i)\n        for(int j=-1;j<2;++j)\n            neighborCount = texelFetch(iChannel0, ivec2((tex.x+i+res.x)%res.x,(tex.y+j+res.y)%res.y), 0).x > 0.5 ? neighborCount+1 : neighborCount;\n    \n    if( texelFetch(iChannel0, tex, 0).x > 0.5 )\n    {\n        neighborCount--; // if this cell is alive, we counted it during neighbor check, correct that now\n        bool survives = false;\n        for(int i=0;!survives && i<9;++i)\n            survives = ( surviveTable & int( pow(2.,float(i)) ) ) > 0 && (neighborCount == (i+1) );\n        \n        fragColor = survives ? vec4(1.) : vec4(0.);\n    }\n    else\n    {\n        bool creates = false;\n        for(int i=0;!creates && i<9;++i)\n            creates = ( createTable & int( pow(2.,float(i)) ) ) > 0 && (neighborCount == (i+1) );\n        \n        fragColor = creates ? vec4(1.) : vec4(0.);\n    }\n    \n    fragColor = iTime < 0.5 ? texelFetch(iChannel1, tex % 256, 0).xxxx : fragColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}