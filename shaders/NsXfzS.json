{
    "Shader": {
        "info": {
            "date": "1660176743",
            "description": "A study of waveforms from an imaginary synthesizer's oscillator circuit.\n\nVersion with sound: [url]https://www.shadertoy.com/view/stdcR2[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NsXfzS",
            "likes": 12,
            "name": "Oscillator Module",
            "published": 3,
            "tags": [
                "plot",
                "util",
                "macro"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "// copied from shadertoy.com/view/3t3XWf by ttg\n// see it for examples of PLOT_ macro modes and styles.\n\nconst float pi = 3.1415927;\nvec2 csin (float a) { return vec2(cos(a),sin(a)); }\nvec2 cexp (vec2 a) { return exp(a.x)*csin(a.y); }\nvec2 conj (vec2 a) { return vec2(a.x,-a.y); }\nvec2 cmul (vec2 a, vec2 b) { return a.x*b+a.y*conj(b).yx; }\nvec2 cinv (vec2 a) { return conj(a)/dot(a,a); }\n\nfloat wave (float x, float p, float w, int N, int Hsel, out vec2 ret_m) {\n  vec2 os=csin(2.*pi*(fract(x)));\n  vec2 o=os;\n  w=clamp(w,1e-4,1.-1e-4);\n  float v=0.;\n  float le1=log(w*(1.-w)*.5*pi*pi), lem=log(.5-.5*cos(2.*pi*w));\n  vec2 m0=csin(pi/2.*-p)/(pi*pi)*4./exp(.5*(lem+exp(1.5*(1.-p))*(le1-lem)));\n  float nb=0.;\n  vec2 m1s=csin(-pi*2.*w);\n  vec2 m1=m1s;\n  ret_m=vec2(0.);\n  for (int n=1;n<N;n++) {\n    float nf=float(n);\n    vec2 m=vec2(1,0)-m1;\n    m=cmul(m,m0);\n    m*=1./pow(nf,p);\n    if (n==Hsel) ret_m=m;\n    v+=cmul(o,m).x;\n    o=cmul(o,os);\n    m1=cmul(m1,m1s);\n  }\n  return v;\n}\n\nfloat wave (float x, float p, float w, int N) {\n  vec2 m;\n  return wave(x,p,w,N,0,m);\n}\n\nvec2 waveft (int Hsel, float p, float w, int N) {\n  vec2 m;\n  wave(0.,p,w,N,Hsel,m);\n  return m;\n}\n\nfloat square (vec2 x) {return dot(x,x);}\n\nvoid mainImage( out vec4 fragData, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    \n    float xmin,xmax,ymin,ymax;\n    mat2 domain;\n    mat2 window = mat2(0,0,1,1);\n\n    vec2 mouse=iMouse.xy/iResolution.xy;\n    mouse.x*=2.;\n    if (square(iMouse.xy)<100.) {\n      //demo\n      mouse=.5+.49*sin(.2*iTime*vec2(2.,1.618));\n    }\n    float p=mouse.y*4.;\n    float w=mouse.x;\n    int N=140;\n    \n    xmin = -1.;\n    xmax =  1.;\n    ymin = -4.;\n    ymax =  4.;\n    domain = mat2(xmin,ymin,xmax,ymax);\n    PLOT_CONTINUOUS(col,uv,window,domain,vec3(0,1,.3), 0, 1, 0.014, wave(x,p,w,N) );\n    \n    xmin =  0.;\n    xmax = 32.;\n    ymin =  0.;\n    ymax =  1.;\n    domain = mat2(xmin,ymin,xmax,ymax);\n    PLOT_CONTINUOUS(col,uv,window,domain,vec3(1,.6,0), 0, 1, 0.01, square(waveft(int(floor(x)),p,w,N)) );\n\n\n    col+= .4*(\n       lines(uv.y*4.,.0005)\n      +lines(uv.y*16.,.0001)\n      +lines(uv.x*4.,.0005)\n      +lines(uv.x*16.,.0001)\n      );\n\n    fragData = vec4(pow(col,vec3(1./2.2)),0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n/* \n\nExpression Plotter\n\nUsage: PLOT_CONTINUOUS( fragColor, uv, window, domain,\n                        linecolor, side, blend, linewidth, expression );\n\n  fragColor - output (linear RGB)\n  uv - coordinate system for window\n  window - mat2, first col: window corner, second col: window size\n  domain - mat2, first col: min x,y, second col: max x,y\n  linecolor - RGB\n  side - 0 = line, 1 = below, -1 = above (see demo)\n  blend - 0=paint, 1=light-trace, 2=ink (see demo)\n  linewidth - measured in units of uv.x; only for side=0\n  expression - uses x as the independent variable\n\nThis file may be used and copied under the terms of the ISC License;\nsee end of file.  As an exception, the full permission notice may be\nomitted where this file is copied within Shadertoy and the full URL,\n\"https://www.shadertoy.com/view/3t3XWf\", is displayed within the source.\n\n*/\n\n\n\n// https://www.shadertoy.com/view/3t3XWf by ttg\nvoid PLOT_CONTINUOUS_CHECK_ARGS(inout vec3 fcolor, vec2 fcoord, mat2 window,\n  mat2 domain, vec3 color, int side, int blend, float linewidth) {}\n#define PLOT_CONTINUOUS(_fcolor, _Afcoord, _Awindow, \\\n  _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth, _function) \\\n  { \\\n    PLOT_CONTINUOUS_CHECK_ARGS(_fcolor, _Afcoord, _Awindow, \\\n      _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth); \\\n    vec2 _fcoord = (_Afcoord); \\\n    mat2 _window = (_Awindow); \\\n    mat2 _domain = (_Adomain); \\\n    vec3 _color = (_Acolor); \\\n    int _side = (_Aside); \\\n    int _blend = (_Ablend); \\\n    float _alinewidth = (_Alinewidth); \\\n    vec2 _rcoord = _fcoord-_window[0]; \\\n    vec2 _res = _window[1]/(_domain[1]-_domain[0])/ \\\n        vec2(dFdx(_fcoord.x),dFdy(_fcoord.y)); \\\n    float _linerpa = min(10.,(_alinewidth*_res.x)*.5); \\\n    float _linerp = max(.5,_linerpa); \\\n    if (all(bvec4(greaterThan(_rcoord,vec2(0)), \\\n                  lessThan(_rcoord,_window[1])))) { \\\n      float _pixmixsum = 0.; \\\n      int _passes = 0; \\\n      if (_side==0) _passes = min(10,int(floor(_linerp))); \\\n      vec2 _x = _rcoord/_window[1]*(_domain[1]-_domain[0])+_domain[0]; \\\n      float _ylast; \\\n      for (int _i = -_passes-1; _i <= _passes; _i++) { \\\n        float offset = float(_i) ; \\\n        vec2 _x = _x + vec2(1,0)*offset/_res; \\\n        float _dx = .5/_res.x; \\\n        float _y1, _y2, _ddx; \\\n        float x = _x.x+_dx; _y1 = (_function); \\\n        _y2 = _ylast; _ylast = _y1; \\\n        if (_i==-_passes-1) continue; \\\n        _ddx = ((_y1-_y2)/(_dx*2.))*_res.y/_res.x; \\\n        float _y = (_y1+_y2)/2.; \\\n        float hdiff = (_y-_x.y) *_res.y; \\\n        if (_side==0) hdiff = \\\n          .7*(abs(hdiff)+.5-_linerp*sqrt(1.-pow(offset/_linerp,2.))); \\\n        float pixmix = hdiff/sqrt(1.+_ddx*_ddx); \\\n        if (_side!=0) pixmix = pixmix*sign(float(_side))+0.5; \\\n        if (_side==0) pixmix = 1.-pixmix; \\\n        pixmix = clamp(pixmix,0.,1.); \\\n        if (_blend==1 && _side==0) pixmix /= sqrt(1.+_ddx*_ddx); \\\n        if (_passes!=0 && abs(_i)==_passes) pixmix *= fract(_linerp); \\\n        if (_side==0) pixmix *= \\\n          1./(1.+max(0.,_linerp-2.)/pow(1.+_ddx*_ddx,2.0)); \\\n        _pixmixsum += pixmix; \\\n      } \\\n      if (_blend!=1) _pixmixsum = clamp(_pixmixsum,0.,1.); \\\n      if (_side==0 && _linerpa<.5) _pixmixsum*=max(0.,_linerpa*2.); \\\n      if (_blend==0) _fcolor = mix( _fcolor, _color, _pixmixsum ); \\\n      if (_blend==1) _fcolor = _fcolor + _color*_pixmixsum; \\\n      if (_blend==2) _fcolor = _fcolor * mix( vec3(1.), _color, _pixmixsum ); \\\n      _fcolor = max(vec3(0.), _fcolor); \\\n    } \\\n  }\n\n\n\n/*\nCopyright 2020 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n\n// End of Expression Plotter https://www.shadertoy.com/view/3t3XWf by ttg\n\n\n\n// Filtered line functions\n// Copyright 2021 Theron Tarigo, all rights reserved.\n\nfloat lines (float x, float dx, float w) {\n  if (dx>.2)dx+=(dx-.2)*1.;\n  dx*=1.2;\n  //dx=clamp(dx,0.,.5);\n  x = .5-abs(fract(x)-.5);\n  if (dx>1.) return w;\n  float edx = min(dx,.5);\n  float v;\n  if (w<edx) {\n    float ew=edx;\n    v = (clamp(.5-(x-ew/2.)/edx,0.,1.))*w/ew;\n  }\n  else if (1.-w<edx) {\n    float ew=edx;\n    v = 1.-(clamp(.5-(.5-x-ew/2.)/edx,0.,1.))*(1.-w)/ew;\n  }\n  else v = (clamp(.5-(x-w/2.)/edx,0.,1.));\n  if (dx>.5) {\n    return mix(v,w,clamp((dx-.5)*2.,0.,1.));\n  }\n  return v;\n}\n\nfloat lines (float x, float w) {\n  return lines(x, fwidth(x), w);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}