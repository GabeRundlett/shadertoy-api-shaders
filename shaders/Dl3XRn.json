{
    "Shader": {
        "info": {
            "date": "1684915264",
            "description": "mouse reactive. Assisted by GPT-4 AI. Change the zoomFactor to zoom in or out",
            "flags": 0,
            "hasliked": 0,
            "id": "Dl3XRn",
            "likes": 1,
            "name": "Cymatics Cascade v4",
            "published": 3,
            "tags": [
                "cymatics"
            ],
            "usePreview": 0,
            "username": "maxwellcoffee",
            "viewed": 147
        },
        "renderpass": [
            {
                "code": "// The main function of a fragment shader, which sets the color of each pixel.\nvoid mainImage( out vec4 color, vec2 UVcoords )\n{\n   // Calculate the center of the screen in both x and y directions\n   float d3 = iResolution.y*.5 ,\n         d4 =  iResolution.x*.5 ,\n         \n   // Use the time and mouse position to modulate a value (d2), which will be used to distort the UV coordinates\n   // and to define a sine-wave period.\n         d2 = 8.0 - 4.0 * sin(iTime*.07 )*1.,\n         \n   // Define a constant value (d1), which will be used as a sine-wave period\n         d1 = .5,\n         \n   // Define a zoom factor\n         zoomFactor = iMouse.y*0.2 - 10.;  \n\n   // Shift UVcoords to the center of the screen and scale them by zoom factor\n   UVcoords = .5*(UVcoords - vec2(d4,d3)) / zoomFactor;  \n\n   // Define a macro function S. It adds a sin-wave pattern to the color.\n#define S(X, Y, period)   color += vec4(sin(length(UVcoords + vec2(X,Y)*d2)*period));\n\n   // Initialize color with alpha 1\n    color = vec4(0.0, 0.0, 0.0, 1.0); \n\n    // Apply the sin-wave pattern to color using macro function S with different parameters.\n    S(0.0,0.0,((iMouse.x*0.1)*.01))\n    S(0,1.0*d2,d1)  \n    S(0,-1.0*d2,d1)  \n    S(-1.0*d2,-0.0,d1)  \n    S(1.0*d2,0.0,d1)\n}\n\n/*\nSUMMARY:\n\nThis shader creates a dynamically changing pattern based on UV coordinates and user input. \n\nFirstly, it calculates the center of the screen and adjusts the UV coordinates accordingly, also applying a zoom factor to these coordinates.\n\nThe primary color modulation is performed using the S macro, which uses a sinusoidal wave to generate the color pattern. This wave's period is influenced by time (creating an animation), mouse position (creating interactivity), and the adjusted UV coordinates (creating spatial variance).\n\nIn essence, this code creates an animated, zoomable, and interactive sin-wave color pattern that the user can manipulate through the mouse's position.\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}