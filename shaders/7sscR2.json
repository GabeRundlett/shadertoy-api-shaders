{
    "Shader": {
        "info": {
            "date": "1709974301",
            "description": "Line conic pencils. Use mouse to drag grey points which define base point conic. See code for more details and controls.",
            "flags": 48,
            "hasliked": 0,
            "id": "7sscR2",
            "likes": 14,
            "name": "Line Conic Pencils",
            "published": 3,
            "tags": [
                "pencil",
                "conic",
                "loopless",
                "lineconic"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Pencils of Line Conics, mla, 2024\n//\n// Linear sums of 2 conics gives a pencil of conics, which in this shader are\n// line conics, ie. a family of lines whose envelope is a point conic.\n// There are 0,1 or 2 conics passing through each point of the plane, depending\n// on a quadratic equation, and there are 4 lines (possibly coincident) tangent\n// to every conic.\n//\n// Pencil is defined by a fixed base conic (a circle, hyperbola or parabola -\n// choose with H,I,P keys) and a point pair conic, defined by the white points\n// (ie. the conics consists of all lines through either of the points).\n// The points may be coincident (choose this option with D key).\n//\n// D: use double point\n// H: use hyperbola as base conic\n// I: use a different hyperbola as base\n// P: use parabola as base\n// <up>/<down>: zoom in/out\n// t: just show one conic of pencil\n//\n////////////////////////////////////////////////////////////////////////////////\n\nfloat lwidth = 0.0015;\nfloat pwidth = 0.01;\nfloat K = 32.0;\n\n// Polarized conic\nfloat conic(vec3 p, mat3 S, vec3 q) {\n  return dot(p,S*q);\n}\n\nfloat conic(vec3 p, mat3 S) {\n  return conic(p,S,p);\n}\n\n// The gradient uses the same matrix.\nvec3 conicgrad(vec3 p, mat3 S) {\n  return 2.0*S*p;\n}\n\n// Distance to conic (approximation, good at short distances).\nfloat conicdist(vec3 p, mat3 m) {\n  float d = conic(p,m);\n  vec3 dd = conicgrad(p,m);\n  d = abs(d/(p.z*length(dd.xy))); // Normalize for Euclidean distance\n  return d;\n}\n\n// Distance to homogeneous line\nfloat line(vec3 p, vec3 q) {\n  return abs(dot(p,q)/(p.z*length(q.xy)));\n}\n\n// Distance to line as point pair\nfloat line(vec3 p, vec3 q, vec3 r) {\n  return line(p,cross(q,r));\n}\n\n// Distance to homogeneous point\nfloat point(vec3 p, vec3 q) {\n  float pz = p.z, qz = q.z;\n  p *= qz; q *= pz;\n  return distance(p,q)/abs(p.z);\n}\n\nbool intersect(vec3 p, mat3 s, out vec3 m0, out vec3 m1) {\n  // Find lines from p tangent to conic s, or (dually)\n  // find intersection points of line p with conic s.\n  // Three lines in pencil, select the two with the\n  // largest magnitude.\n  vec3 l0 = vec3(-p.y,p.x, 0);\n  vec3 l1 = vec3(p.z, 0,  -p.x);\n  vec3 l2 = vec3(0,  -p.z, p.y);\n  if (dot(l0,l0) > dot(l1,l1)) l1 = l0;\n  else if (dot(l0,l0) > dot(l2,l2)) l2 = l0;\n  // l1,l2 now the two largest (in particular, this is to avoid\n  // a zero-sized vector).\n  // Now want (l1 + k*l2)s(l1 + k*l2) = 0\n  // Ak²+2Bk+C = 0\n  float A = dot(l2,s*l2);\n  float B = dot(l1,s*l2);\n  float C = dot(l1,s*l1);\n  float D = B*B-A*C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  // If A = C = 0, then we have picked 2 lines on the conic already.\n  // Maybe should handle this case.\n  if (abs(A) > abs(C)) {\n    float k0 = (-B + D)/A;\n    float k1 = (-B - D)/A;\n    m0 = l1+k0*l2;\n    m1 = l1+k1*l2;\n  } else {\n    float k0 = (-B + D)/C;\n    float k1 = (-B - D)/C;\n    m0 = l2+k0*l1;\n    m1 = l2+k1*l1;\n  }\n  return true;\n}\n\n// Polarized cofactor matrix.\nmat3 cofactor(mat3 m, mat3 n) {\n  return mat3(cross(m[1],n[2]),\n              cross(m[2],n[0]),\n              cross(m[0],n[1]));\n}\n\n// Cofactor matrix of m, ie. the transpose of the adjugate\n// (determinant is dot(m[0],cross(m[1],m[2])) and matrix\n// multiplication is dot products of rows and columns).\n// This can be non-zero, even for singular matrices (ie. for\n// degenerate conics).\nmat3 cofactor(mat3 m) {\n  return cofactor(m,m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  lwidth *= scale;\n  pwidth *= scale;\n  //K /= scale;\n  vec3 pcol = vec3(0,0,1);\n  bool doubleline = key(CHAR_D);\n  vec3 p = vec3(map(fragCoord.xy),1);\n  float px = fwidth(p.x);\n  vec2 mouse = vec2(-2,2);\n  if (iMouse.x != 0.0) {\n    mouse = map(iMouse.xy).xy;\n  }\n  mat3 M = mat3(1,0,0,0,1,0,0,0,-1); // Just a circle\n  if (key(CHAR_M)) M /= determinant(M);\n  if (key(CHAR_H)) M = mat3(1,0,0,0,-1,0,0,0,-1); // Hyperbola\n  if (key(CHAR_I)) M = mat3(0,1,0,1,0,0,0,0,1);   // Hyperbola2\n  if (key(CHAR_P)) M = mat3(0,0,1,0,1,0,1,0,0);   // Parabola\n  vec3 P1 = vec3(getselection(0),1); //vec3(mouse,1);\n  vec3 P2 = vec3(getselection(1),1); //vec3(mouse*vec2(1,-1),1);\n  if (key(CHAR_0+1)) P1.z = 0.0;\n  if (key(CHAR_0+2)) P2.z = 0.0;\n  if (doubleline) P2 = P1;\n  if (key(CHAR_N)) {\n    P1 = normalize(P1); P2 = normalize(P2);\n  }\n  mat3 N = 0.5*(outerProduct(P1,P2)+outerProduct(P2,P1));\n\n  // Tangents from each point\n  vec3 T1,T2,T3,T4;\n  bool show1 = intersect(P1,M,T1,T2);\n  bool show2 = intersect(P2,M,T3,T4);\n\n  vec3 color = 0.1*vec3(1,1,0.8);\n\n  if (!key(CHAR_S)) {\n    // Show point pair locations\n    float d = min(point(p,P1), point(p,P2));\n    color = mix(vec3(0.5),color,smoothstep(0.0,px,d-2.0*pwidth));\n  }\n  {\n    mat3 M1 = cofactor(M), N1 = cofactor(N);\n    if (true) {\n      color = mix(vec3(0),color,smoothstep(0.0,px,conicdist(p,M1)-lwidth));\n      // The dual of a point pair is a double line, which is not so interesting\n      //if (!doubleline) color = mix(vec3(0),color,smoothstep(0.0,px,conicdist(p,N1)-lwidth));\n    }\n    if (show1) {\n      color = mix(vec3(1),color,smoothstep(0.0,px,line(p,T1)-lwidth));\n      color = mix(vec3(1),color,smoothstep(0.0,px,line(p,T2)-lwidth));\n    }\n    if (!doubleline && show2) {\n      color = mix(vec3(1),color,smoothstep(0.0,px,line(p,T3)-lwidth));\n      color = mix(vec3(1),color,smoothstep(0.0,px,line(p,T4)-lwidth));\n    }\n    if (true) {\n      // Find the conics of the pencil passing through the current point.\n      // There are 2 (or 0) and we need to solve a quadratic.\n      // If discriminant < 0, there is no solution, but put d = 0\n      // anyway, and we get the closest conic.\n      //\n      // We want k such that conic(p,cofactor(M+kN)) == 0\n      // M = (P,Q,R), N = (P',Q',R')\n      // cofactor(M+kN) = cofactor(P+kP',...)\n      // = (cross(Q+kQ',R+kR'),...)\n      // = (cross(Q,R)+k*[cross(Q,R')+cross(Q',R')]+k²*cross(Q',R'),...)\n      // = cofactor(M)+k*(cofactor(M,N)+cofactor(N,M)) + k²*cofactor(N);\n      mat3 PHI = 0.5*(cofactor(M,N)+cofactor(N,M));\n      float B = conic(p,PHI);\n      float C = conic(p,M1);\n      vec2 roots; int nroots;\n      if (doubleline) {\n        // N1 will be 0 matrix\n        roots = vec2(-0.5*C/B);\n        nroots = 1;\n      } else {\n        float A = conic(p,N1);\n        float D = B*B-A*C;\n        D = max(D,0.0);\n        D = sqrt(D);\n        roots = vec2(-B+D,-B-D)/A;\n        nroots = 2;\n      }\n      \n      for (int i = 0; i < nroots; i++) {\n        float t = atan(roots[i]);\n        float time = iTime+0.0001;\n        t /= PI;\n        t += 0.5;\n        t *= K;\n        t -= time;\n        t = round(t);\n        float t0 = t;\n        t += time;\n        t /= K;\n        t -= 0.5;\n        t *= PI;\n        if (key(CHAR_T)) t = iTime;\n        float cost = cos(t), sint = sin(t);\n        // Avoid tan here as we can get infinities\n        mat3 T = cost*cost*M1 + 2.0*cost*sint*PHI + sint*sint*N1;\n        vec3 lcol = 0.2+0.8*h2rgb(t0/K);\n        float d = smoothstep(0.0,px,conicdist(p,T)-lwidth);\n        color = mix(lcol,color,d);\n      }\n    }\n  }\n  color = pow(color,vec3(0.4545));\n  if (alert) color.r = 1.0-color.r;\n  fragColor = vec4(color,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  if ( iFrame == 0) {\n    t = vec4(0);\n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float y1 = keystate(i,0).x;\n    if (y1 != t.y) {\n      t.y = y1;\n      if (keystate(KEY_ALT,0).x == 0.0 && y1 != 0.0) {\n        t.x++;\n      }\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.w != 12345.0) {\n      t.xy = initselection(i-1); // Current coordinates\n      t.w = 12345.0;\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store((key),0).x))\n#define keystate(k,n) ( texelFetch(iChannel3,ivec2(k,n),0) )\n\n#define map(screenpos) (scale*(2.0*(screenpos)-iResolution.xy)/iResolution.y)\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n\nfloat scale = 3.0;\n\nbool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int nselections = 2;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(-1.5,1.5);\n  if (i == 1) return vec2(-1.5,-1.5);\n  return vec2(0);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI =  3.141592654;\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n  return rgb;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}