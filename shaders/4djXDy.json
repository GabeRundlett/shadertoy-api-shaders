{
    "Shader": {
        "info": {
            "date": "1415595000",
            "description": "Analytic ambient occlusion of a box. Left side of screen, sampled occlusion with 256 rays. Right side of the screen, analytic solution (no rays casted). Move the mouse to compare. Info: [url]https://iquilezles.org/articles/boxocclusion[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4djXDy",
            "likes": 28,
            "name": "Box - occlusion",
            "published": 3,
            "tags": [
                "3d",
                "box",
                "occlusion",
                "analytic"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 7150
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Analytical ambient occlusion of a box. Left side of screen, stochastically \n// sampled occlusion. Right side of the screen, analytical solution (no rays casted).\n//\n// If the box was intersecting the ground plane, we'd need to perform clipping\n// and use the resulting triangles for the analytic formula instead.\n//    \n// More info here: https://iquilezles.org/articles/boxocclusion\n//\n// Other shaders with analytical occlusion or approximations:\n// \n// Box:                        https://www.shadertoy.com/view/4djXDy\n// Box with horizon clipping:  https://www.shadertoy.com/view/4sSXDV\n// Triangle:                   https://www.shadertoy.com/view/XdjSDy\n// Sphere:                     https://www.shadertoy.com/view/4djSDy\n// Ellipsoid (approximation):  https://www.shadertoy.com/view/MlsSzn\n// Capsule (approximation):    https://www.shadertoy.com/view/llGyzG\n\n\n// Other Box functions (https://iquilezles.org/articles/boxfunctions)\n//\n// Intersection:     https://www.shadertoy.com/view/ld23DV\n// Occlusion:        https://www.shadertoy.com/view/4sSXDV\n// Occlusion:        https://www.shadertoy.com/view/4djXDy\n// Density:          https://www.shadertoy.com/view/Ml3GR8\n// Fake soft shadow: https://www.shadertoy.com/view/WslGz4\n// Gradient:         https://www.shadertoy.com/view/wlcXD2\n\n// 0  my original method, by iterating all 6 faces/12 edges/8 verts\n// 1  optimized method by clem494949 (https://www.shadertoy.com/view/ttlBWf)\n//    which iterates the solid angle hexagon (1 face/6 edges/6 verts)\n#define METHOD 1\n\n\n\n\n//=====================================================\n\n// returns t and normal\nvec4 boxIntersect( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec4( tN, nor );\n}\n\n#if METHOD==0\n// Box occlusion (if fully visible)\nfloat boxOcclusion( in vec3 pos, in vec3 nor, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n\tvec3 p = (txx*vec4(pos,1.0)).xyz;\n\tvec3 n = (txx*vec4(nor,0.0)).xyz;\n    \n    // 8 verts\n    vec3 v0 = normalize( vec3(-1.0,-1.0,-1.0)*rad - p);\n    vec3 v1 = normalize( vec3( 1.0,-1.0,-1.0)*rad - p);\n    vec3 v2 = normalize( vec3(-1.0, 1.0,-1.0)*rad - p);\n    vec3 v3 = normalize( vec3( 1.0, 1.0,-1.0)*rad - p);\n    vec3 v4 = normalize( vec3(-1.0,-1.0, 1.0)*rad - p);\n    vec3 v5 = normalize( vec3( 1.0,-1.0, 1.0)*rad - p);\n    vec3 v6 = normalize( vec3(-1.0, 1.0, 1.0)*rad - p);\n    vec3 v7 = normalize( vec3( 1.0, 1.0, 1.0)*rad - p);\n    \n    // 12 edges    \n    float k02 = dot( n, normalize( cross(v2,v0)) ) * acos( dot(v0,v2) );\n    float k23 = dot( n, normalize( cross(v3,v2)) ) * acos( dot(v2,v3) );\n    float k31 = dot( n, normalize( cross(v1,v3)) ) * acos( dot(v3,v1) );\n    float k10 = dot( n, normalize( cross(v0,v1)) ) * acos( dot(v1,v0) );\n    float k45 = dot( n, normalize( cross(v5,v4)) ) * acos( dot(v4,v5) );\n    float k57 = dot( n, normalize( cross(v7,v5)) ) * acos( dot(v5,v7) );\n    float k76 = dot( n, normalize( cross(v6,v7)) ) * acos( dot(v7,v6) );\n    float k37 = dot( n, normalize( cross(v7,v3)) ) * acos( dot(v3,v7) );\n    float k64 = dot( n, normalize( cross(v4,v6)) ) * acos( dot(v6,v4) );\n    float k51 = dot( n, normalize( cross(v1,v5)) ) * acos( dot(v5,v1) );\n    float k04 = dot( n, normalize( cross(v4,v0)) ) * acos( dot(v0,v4) );\n    float k62 = dot( n, normalize( cross(v2,v6)) ) * acos( dot(v6,v2) );\n    \n    // 6 faces    \n    float occ = 0.0;\n    occ += ( k02 + k23 + k31 + k10) * step( 0.0,  v0.z );\n    occ += ( k45 + k57 + k76 + k64) * step( 0.0, -v4.z );\n    occ += ( k51 - k31 + k37 - k57) * step( 0.0, -v5.x );\n    occ += ( k04 - k64 + k62 - k02) * step( 0.0,  v0.x );\n    occ += (-k76 - k37 - k23 - k62) * step( 0.0, -v6.y );\n    occ += (-k10 - k51 - k45 - k04) * step( 0.0,  v0.y );\n        \n    return occ / 6.283185;\n}\n#endif\n#if METHOD==1\n// Box occlusion (if fully visible)\nfloat boxOcclusion( in vec3 pos, in vec3 nor, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n\tvec3 p = (txx*vec4(pos,1.0)).xyz;\n\tvec3 n = (txx*vec4(nor,0.0)).xyz;\n    \n    // Orient the hexagon based on p\n    vec3 f = rad * sign(p);\n    \n    // Make sure the hexagon is always convex\n    vec3 s = sign(rad - abs(p));\n    \n    // 6 verts\n    vec3 v0 = normalize( vec3( 1.0, 1.0,-1.0)*f - p);\n    vec3 v1 = normalize( vec3( 1.0, s.x, s.x)*f - p);\n    vec3 v2 = normalize( vec3( 1.0,-1.0, 1.0)*f - p);\n    vec3 v3 = normalize( vec3( s.z, s.z, 1.0)*f - p);\n    vec3 v4 = normalize( vec3(-1.0, 1.0, 1.0)*f - p);\n    vec3 v5 = normalize( vec3( s.y, 1.0, s.y)*f - p);\n    \n    // 6 edges\n    return abs( dot( n, normalize( cross(v0,v1)) ) * acos( dot(v0,v1) ) +\n    \t    \tdot( n, normalize( cross(v1,v2)) ) * acos( dot(v1,v2) ) +\n    \t    \tdot( n, normalize( cross(v2,v3)) ) * acos( dot(v2,v3) ) +\n    \t    \tdot( n, normalize( cross(v3,v4)) ) * acos( dot(v3,v4) ) +\n    \t    \tdot( n, normalize( cross(v4,v5)) ) * acos( dot(v4,v5) ) +\n    \t    \tdot( n, normalize( cross(v5,v0)) ) * acos( dot(v5,v0) ))\n            \t/ 6.283185;\n}\n#endif\n//-----------------------------------------------------------------------------------------\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\n\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n}\n\n//-----------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// init randoms\n    srand( ivec2(fragCoord), iFrame );\n\n    // coordinates\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    float s = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    if( iMouse.z<0.001 ) s=0.0;\n\n\tvec3 ro = vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = normalize( vec3(p.x, p.y-0.3,-3.5) );\n\t\n    // box animation\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), iTime );\n\tmat4 tra = translate( 0.0, 0.0, 0.0 );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n\tvec3 box = vec3(0.2,0.5,0.6) ;\n\n    vec4 rrr = texture( iChannel0, (fragCoord.xy)/iChannelResolution[0].xy, -99.0  ).xzyw;\n\n    vec3 col = vec3(0.0);\n\n    float tmin = 1e10;\n    \n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + tmin*rd;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        float occ = 0.0;\n        \n        if( p.x > s )\n        {\n            occ = boxOcclusion( pos, nor, txx, txi, box );\n        }\n        else\n        {\n   \t\t    vec3  ru = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n\t\t    vec3  rv = normalize( cross( ru, nor ) );\n\n            occ = 0.0;\n            const int numRays = 256;\n            for( int i=0; i<numRays; i++ )\n            {\n                // cosine distribution\n                vec2  aa = vec2(frand(),frand());\n                float ra = sqrt(aa.y);\n                float rx = ra*cos(6.283185*aa.x); \n                float ry = ra*sin(6.283185*aa.x);\n                float rz = sqrt( 1.0-aa.y );\n                vec3  dir = vec3( rx*ru + ry*rv + rz*nor );\n                vec4 res = boxIntersect( pos+nor*0.001, dir, txx, txi, box );\n                occ += step(0.0,res.x);\n            }\n            occ /= float(numRays);\n        }\n\n        col = vec3(1.1);\n        col *= 1.0 - occ;\n    }\n\n    vec4 res = boxIntersect( ro, rd, txx, txi, box );\n    float t2 = res.x;\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        float t = t2;\n        vec3 pos = ro + t*rd;\n        vec3 nor = res.yzw;\n\t\tcol = vec3(0.8);\n\n\t\tvec3 opos = (txx*vec4(pos,1.0)).xyz;\n\t\tvec3 onor = (txx*vec4(nor,0.0)).xyz;\n//\t\tcol *= abs(onor.x)*texture( iChannel1, 0.5+0.5*opos.yz ).xyz + \n  //             abs(onor.y)*texture( iChannel1, 0.5+0.5*opos.zx ).xyz + \n    //           abs(onor.z)*texture( iChannel1, 0.5+0.5*opos.xy ).xyz;\n        col *= 1.7;\n        col *= 0.6 + 0.4*nor.y;\n\t}\n\n\tcol *= exp( -0.05*tmin );\n\n    float e = 2.0/iResolution.y;\n    col *= smoothstep( 0.0, 2.0*e, abs(p.x-s) );\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}