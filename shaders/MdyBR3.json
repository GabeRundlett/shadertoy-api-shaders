{
    "Shader": {
        "info": {
            "date": "1529711100",
            "description": "I was bored and played around with functions of polar-coordinates until this came out. More colors would be nice... but then I like the clean monochrome look of it somehow.",
            "flags": 0,
            "hasliked": 0,
            "id": "MdyBR3",
            "likes": 3,
            "name": "some trig, some polar",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "antialiasing",
                "polar"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "mat2 r2d (in float degree)\n{\n    float rad = radians (degree);\n    float c = cos (rad);\n    float s = sin (rad);\n\treturn mat2 (c, s, -s, c);\n}\n\nvec2 cart2polar (in vec2 cart)\n{\n    float r = length (cart);\n    float phi = atan (cart.x, cart.y);\n    return vec2 (phi, r);\n}\n\nvec2 polar2cart (in vec2 polar)\n{\n    float x = polar.x*cos (polar.y);\n    float y = polar.x*sin (polar.y);\n    return vec2 (y, x);\n}\n\nfloat graph (in vec2 p)\n{\n    vec2 polar = cart2polar (p);\n    polar.y = abs (4.*sin (.75*polar.y) * cos (2.*polar.x));\n    p = polar2cart (polar);\n\n\treturn length (p.x / p.y);\n}\n\nvec2 gradient (in vec2 p)\n{\n    //return vec2 (dFdx (graph (p)), dFdy (graph (p))) / fwidth (graph (p));\n    vec2 e = vec2 (.001, .0);\n    return vec2 (graph (p - e.xy) - graph (p + e.xy),\n                 graph (p - e.yx) - graph (p + e.yx)) / (.75*e.x);\n}\n\nvoid mainImage ( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 p = (5. + 10.*(.5 + .5*cos(3.*iTime)))*uv;\n    p *= r2d (34.*iTime);\n    p += vec2 (3.*cos (iTime), 3.*sin (iTime));\n    p.x += .5*cos (p.y + 2.*iTime);\n    p.y += .5*sin (p.x + 4.*iTime);\n\n    float d = abs (graph (p)) / length (gradient (p));\n    float thickness = 20. / iResolution.y;\n    vec3 col = vec3 (smoothstep (1.*thickness, 2.*thickness, d));\n\n\tvec3 c = vec3 (1., .95, .9);\n\tc *= .8 + .2*smoothstep (.0, 25.*(2./iResolution.y), d);\n\tcol = mix (c, col, 1. - smoothstep (.0, 12.*(1./iResolution.y), d));\n\n    col *= 1. - .4*length (fragCoord/iResolution.xy*2. - 1.);\n    col = col / (1. + col);\n    col = pow (col, vec3 (1./2.2));\n    fragColor = vec4 (col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}