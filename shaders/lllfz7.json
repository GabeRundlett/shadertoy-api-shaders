{
    "Shader": {
        "info": {
            "date": "1511515991",
            "description": "Play with #define TEST in BufA to test the optimizer (see comments).\nOn my nvidia, optimizer \n- factor cos(iTime) out of the loop,  \n- recognize v*0. as 0.\n- recognize O finally not used\n- don't recognize loop useless\n\nAuto adjust to your GPU power.",
            "flags": 32,
            "hasliked": 0,
            "id": "lllfz7",
            "likes": 1,
            "name": "testing optimizer (1)",
            "published": 3,
            "tags": [
                "fps",
                "gpu",
                "perfmeter",
                "compilation"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 582
        },
        "renderpass": [
            {
                "code": "// adapted from https://shadertoy.com/view/Xtsfz7\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tO =  texelFetch(iChannel0, ivec2(U), 0);\n    O += texelFetch(iChannel1, ivec2(U), 0); // * (O.r+O.b==0. ? 1. : .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Warp effects tester. Warps are 4x8 pixels (on nvidia), aligned with window coordinates\n// Divergence is costly only if occuring in the same warp.\n// In addition, blocks of 16x16 pixels ( = 8 warps ) are flushed in sync, which prevent savings for isolated empty warps.\n\n// see also https://www.shadertoy.com/view/ltsfz7 for nested loops, no uniform\n\n#define TEST 0\n//  0, >0:    cos(iTime) in loop, vs  out loop.\n//  1, 2, 3 : compare adding cos, adding cos*0, adding 1\n//  4, 5:     O useless, vs no loop\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    int N = int( texelFetch(iChannel0, ivec2(0),0).a );// N will adjust depending on your GPU power\n#   if TEST == 5\n      N = 1;\n#   endif\n    \n#  if TEST != 0   \n    float v = cos(iTime);\n   #endif\n    for (int i=0; i<N; i++) {\n#       if   TEST == 0        \n          float v = cos(iTime); // optimizer recognize it can be factored out of loop\n#       endif        \n#       if   TEST <= 1  \n          O += v;\n#       elif TEST == 2       \n          O += v*0.;  // optimizer recognize it is 0\n#       else //TEST==3\n          O += 1.;\n#       endif        \n    }\n    \n    O = .01*sign(O);\n#   if TEST >= 4\n      O -= O;\n#    endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// performance meter + GPU power qualibration\n\nvoid mainImage( out vec4 O, vec2 U )\n{                                                        // N will adjust depending on your GPU power\n    int N = iFrame==0 ? 30000 : int( texelFetch(iChannel0, ivec2(0),0).a );\n    float sTimeDelta = texelFetch(iChannel0, ivec2(1),0).a,\n          h = iResolution.y;   \n    U -= .5;                                                     \n    O = texelFetch(iChannel0, ivec2(U-vec2(1,0)), 0);    // scrool the perf display\n    \n    if (U.x==0. && U.y < h/(iTimeDelta*65.) ) O += .8;   // fps. top = 65 fps\n    if (U.x==0. && abs(U.y - h/(sTimeDelta*65.) ) < 1. ) O = vec4(0,1,0,0); // smoothed fps\n    if (mod(U.y,10.*iResolution.y/65.) < 1.) O = vec4(1,0,0,0);   // red line every 10 fps\n    \n    O.a = iFrame<30 && U==vec2(0) && h>200.              // use 30 frames to adjust to your computer\n        ? float(N) * (.9 + .1*(1./31.)/iTimeDelta )      // relaxation towards 30fps goal.\n        : float(N);\n\n    if (U==vec2(1)) O.a = .9*sTimeDelta + .1*iTimeDelta; // smoothed FPS;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}