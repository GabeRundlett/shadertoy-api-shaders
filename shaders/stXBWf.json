{
    "Shader": {
        "info": {
            "date": "1651562946",
            "description": "30 Minute timelapse:\nhttps://www.youtube.com/shorts/y8vtM-_zm00",
            "flags": 0,
            "hasliked": 0,
            "id": "stXBWf",
            "likes": 4,
            "name": "30 Minutes 4/29",
            "published": 3,
            "tags": [
                "3d",
                "kifs",
                "trippy",
                "symmetric"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 267
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////\n#define time iTime*0.1\n#define pi 3.14159265\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n}\n\nvec4 map(vec3 p) {\n    p.z -= 2.4;\n    p.yz *= r2d(iMouse.y/iResolution.y+0.);\n    p.xz *= r2d(iMouse.x/iResolution.x+0.);\n    p.yz *= r2d(sin(time/2.)*0.5);\n    p.xz *= r2d(time*0.5);\n    p = abs(p)-0.6;\n    p.yz *= r2d(time);\n    p.xz *= r2d(time);\n    p = abs(p)-0.01;\n    float di = 0.1;\n    float d2 = 0.01;\n    for(int i=0;i<3;i++) {\n        p = abs(p)-di;\n        p.yz *= r2d(time);\n        p.xz *= r2d(time);\n        p = abs(p)-d2;\n    }\n    //p.yz *= r2d(-time);\n    //p.xz *= r2d(-time);\n    float d = sdBox(vec3(p),vec3(0.1));\n    //p.xy *= r2d(90.*deg);\n    p.yz *= r2d(45.*deg);\n    \n    p.yz = abs(p.yz);\n    p.yz *= r2d(-45.*deg);\n    p.xz *= r2d(-45.*deg);\n    //p.yz *= r2d(45.*deg);\n    p.xz = abs(p.xz);\n    p.xz *= r2d(-45.*deg);\n    //p.yz *= r2d(45.*deg);\n    return vec4(p.xy,p.z,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<16;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w;\n        dO += dS;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.001) {\n            break;\n        }\n    }\n    return vec2(dO,ii);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    vec2 tv = uv;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    vec3 mp = map(p).xyz;\n    uv = mix(uv,mp.xy,1.);\n    float fs = 4.;\n    vec2 ov = uv;\n    uv *= r2d(deg*360./6.);\n    //uv.y -= uv.x/2.;\n    //uv.x -= uv.y;\n    //uv.y *= 1.155;\n    uv.y *= 1.155;\n    uv.x -= uv.y/2.;\n    vec2 t1v = uv;\n    vec3 trv = vec3(floor(uv.xy),floor(ov.y*fs*1.155));\n    uv.y += time*trv.x;\n    uv.x += time*trv.y;\n    uv.x = (fract(uv.x*fs)-0.5);\n    uv.y = (fract(uv.y*fs)-0.5);\n    col.rg = uv.xy;\n    col.b += (fract((t1v.x+t1v.y)*fs));\n    col.g += sin(trv.z*20.+time*2.);\n    col += sin(col*20.+d.x*0.1)*0.4;\n    col += sin(col*20.+p.x*210.+d.x)*0.4;\n    col = clamp(col,0.,1.);\n    col *= 1.-d.x*0.2;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}