{
    "Shader": {
        "info": {
            "date": "1453567578",
            "description": "Colliding elastic, frictionless disks",
            "flags": 32,
            "hasliked": 0,
            "id": "MsV3zW",
            "likes": 7,
            "name": "Puck Dynamics",
            "published": 3,
            "tags": [
                "raymarching",
                "dynamics",
                "multipass",
                "collisions"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "// \"Puck Dynamics\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\nColliding elastic, frictionless disks. Based on \"Molecular Dynamics\", but\nwith softer interactions and a larger integration time step.\n\nThe fastest puck is marked.\n\nMouse click restarts run.\n*/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\n\nvec3 ltDir;\nvec4 pDisk[nMol];\nvec2 pFast;\nfloat dstFar, hbLen;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  d = PrBoxDf (q, vec3 (hbLen, 0.1, hbLen));\n  if (d < dMin) {\n    for (int n = 0; n < nMol; n ++) {\n      q = p;\n      q.xz -= pDisk[n].xy;\n      d = PrRCylDf (q.xzy, 0.45, 0.04, 0.08);\n      if (d < dMin) { dMin = d;  idObj = 10 + n; }\n    }\n  }\n  q = p;\n  q.y -= -0.1;\n  d = PrBoxDf (q, vec3 (hbLen, 0.1, hbLen));\n  q.y -= -0.12;\n  d = max (PrBoxDf (q, vec3 (hbLen + 0.15, 0.2, hbLen + 0.15)), - d);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, vn;\n  float dstHit, spec, c;\n  int idObjT;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      objCol = vec3 (0.4, 0.25, 0.1);\n      spec = 0.1;\n    } else {\n      if (length (ro.xz - pFast) < 0.1) {\n        objCol = vec3 (0.4);\n        spec = 0.2;\n      } else {\n        c = float (idObj - 10);\n        objCol = HsvToRgb (vec3 (mod (1.7 * c / float (nMol), 1.),\n           1. - 0.3 * mod (c, 3.), 1. - 0.3 * mod (c, 2.)));\n        spec = 1.;\n      }\n    }\n    col = objCol * (0.2 +\n       0.1 * max (dot (vn, ltDir * vec3 (-1., 0., -1.)), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.));\n  } else col = vec3 (0., 0.2, 0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid GetMols ()\n{\n  float v, vMax;\n  vMax = 0.;\n  for (int n = 0; n < nMol; n ++) {\n    pDisk[n] = Loadv4 (n);\n    v = length (pDisk[n].zw);\n    if (v > vMax) {\n      vMax = v;\n      pFast = pDisk[n].xy;\n    }\n  }\n  hbLen = Loadv4 (nMol).y - 0.45;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 rd, ro;\n  vec2 ori, ca, sa;\n  float tCur;\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (1., 2., 1.));\n  ori = vec2 (0.8 + 0.3 * sin (2. * pi * 0.07 * tCur), 0.1 * tCur);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  rd = normalize (vec3 (uv, 5.5)) * vuMat;\n  ro = vec3 (0., 0., -30.) * vuMat;\n  GetMols ();\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// \"Puck Dynamics\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\nfloat hbLen, dt;\nconst float pi = 3.14159;\n\nvec4 Step (int mId)\n{\n  vec4 p, pp;\n  vec2 dr, f;\n  float fOvlap, rSep;\n  fOvlap = 100.;\n  f = vec2 (0.);\n  p = Loadv4 (mId);\n  for (int n = 0; n < nMol; n ++) {\n    pp = Loadv4 (n);\n    dr = p.xy - pp.xy;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. / rSep - 1.) * dr;\n  }\n  dr = hbLen - abs (p.xy);\n  f -= step (dr, vec2 (1.)) * fOvlap * sign (p.xy) * (1. / abs (dr) - 1.) * dr;\n  p.zw += dt * f;\n  p.xy += dt * p.zw;\n  return p;\n}\n\nvec4 Init (int mId)\n{\n  vec4 p;\n  float x, y, t;\n  y = float (mId / nMolEdge);\n  x = float (mId) - float (nMolEdge) * y;\n  t = 0.25 * (2. * mod (y, 2.) - 1.);\n  p.xy = 1.1 * (vec2 (x + t, y) - 0.5 * float (nMolEdge - 1));\n  t = 2. * pi * Hashff (float (mId));\n  p.zw = vec2 (cos (t), sin (t));\n  return p;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p;\n  int mId;\n  vec2 kv = floor (fragCoord);\n  bool doInit;\n  mId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || mId > nMol) discard;\n  doInit = false;\n  dt = 0.03;\n  if (iFrame <= 5) {\n    hbLen = 0.8 * float (nMolEdge) + 0.6;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    if (mId < nMol) p = Step (mId);\n    if (mPtr.z > 0. && stDat.x > 50.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) p = Init (mId);\n  Savev4 (mId, ((mId < nMol) ? p : stDat), fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}