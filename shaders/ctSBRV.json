{
    "Shader": {
        "info": {
            "date": "1694209811",
            "description": "Noise patterns research",
            "flags": 0,
            "hasliked": 0,
            "id": "ctSBRV",
            "likes": 21,
            "name": "Noise Fireflies",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "\n// Noise Fireflies\n// Leon Denise\n// 2023/09/08\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// gyroid pattern\nfloat gyroid (vec3 p)\n{\n    return dot(sin(p),cos(p.yzx));\n}\n\n// noise\nfloat fbm (vec2 p)\n{\n    vec3 q = vec3(p, 0.);\n    float result = 0., a = .5;\n    for (float i = 0.; i < 4.; ++i, a /= 2.)\n    {\n        q += (result-.5)*.5;\n        result += abs(gyroid(q/a)*a);\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.*(2.*fragCoord-iResolution.xy)/iResolution.y;\n    p += iTime * 0.1;\n    \n    // animate\n    vec2 q = p*.5;\n    vec2 cell = floor(q);\n    float t = iTime*(.5+pow(hash12(cell), 4.)*2.);\n    vec2 anim = vec2(fract(t), floor(t));\n    vec2 offset = mix(\n        hash23(vec3(cell, anim.y)),\n        hash23(vec3(cell, anim.y+1.)),\n        smoothstep(.0,1.,anim.x));\n    q += (offset-.5)*.1;\n    \n    // shape\n    vec2 e = vec2(.3,0);\n    float diff = abs(fbm(p+e.yx)-fbm(p-e.yx))/e.x;\n    float shape = smoothstep(.001,.0, diff-1.);\n    \n    // color\n    float circle = length(fract(q)-.5);\n    vec3 tint = .5+.5*cos(vec3(1,2,3)*5.5+floor(diff-circle*10.)*.5);\n    vec3 color = shape * tint;\n    color += (1.-circle) * .02 * tint / circle;\n    \n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}