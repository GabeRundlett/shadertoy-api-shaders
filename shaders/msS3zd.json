{
    "Shader": {
        "info": {
            "date": "1668661163",
            "description": "3d",
            "flags": 0,
            "hasliked": 0,
            "id": "msS3zd",
            "likes": 4,
            "name": "Shiny Boxes",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "FifthStateOfMatter",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "const vec3 lPos = vec3(0, 3, 0);\nconst float PI = 3.1415926535;\nconst float degreesToRadians = PI/180.0;\nconst float FOV = 70.0*degreesToRadians;\nconst float fogDensity = 3.0;\nconst vec3 fogColor = vec3(0.4, 0.7, 0.9);\n\nconst float f = 1.0/tan(FOV/2.0);\nconst float aperture = 0.015;\nconst float focalLength = 11.1;\n\nstruct material{\n    vec3 col;\n    float type;\n    float intensity;\n};\n\nstruct box{\n    vec3 pos;\n    vec3 size;\n    material mat;\n};\n\nstruct camera{\n    vec3 o;\n    vec3 d;\n};\n\nbox[] scene = box[](\n    box(vec3(0, 0, 0), vec3(500, 1, 500), material(vec3(1), 3.0, 0.8)),\n    box(vec3(-2, 1, 2), vec3(2, 1, 1), material(vec3(1, 1, 0), 3.0, 0.6)),\n    box(vec3(2, 1.5, 6), vec3(1, 2, 1), material(vec3(1, 0, 1), 3.0, 0.4)),\n    box(vec3(-3, 1.5, 0), vec3(2), material(vec3(0, 1, 0), 3.0, 0.9)),\n    box(vec3(4, 1.25, 1), vec3(1.5), material(vec3(0, 0, 1), 3.0, 0.7)),\n    box(vec3(0, 1, 2), vec3(1), material(vec3(1, 0, 0), 3.0, 0.5)),\n    box(vec3(-2.5, 3, 0), vec3(1), material(vec3(1, 0.5, 0), 3.0, 0.2)),\n    box(lPos, vec3(1, 1, 1), material(vec3(1), 0.0, 0.5))\n);\n\nbool raytraceBox(vec3 o, vec3 d, out float t, box b, out material mat){\n    vec3 tMin;\n    vec3 tMax;\n\n    vec3 halfSize = b.size/2.0;\n\n    vec3 lbf = b.pos - halfSize;\n    vec3 rtb = b.pos + halfSize;\n\n    tMin = (lbf - o)/d;\n    tMax = (rtb - o)/d;\n\n    if(tMin.x > tMax.x){\n        float tempT = tMin.x;\n        tMin.x = tMax.x;\n        tMax.x = tempT;\n    }\n\n    if(tMin.y > tMax.y){\n        float tempT = tMin.y;\n        tMin.y = tMax.y;\n        tMax.y = tempT;\n    }\n\n    if(tMin.z > tMax.z){\n        float tempT = tMin.z;\n        tMin.z = tMax.z;\n        tMax.z = tempT;\n    }\n\n    if((tMin.x > tMax.y) || (tMin.y > tMax.x)){\n        return false;\n    }\n\n    if(tMin.y > tMin.x){\n        tMin.x = tMin.y;\n    }\n\n    if(tMax.y < tMax.x){\n        tMax.x = tMax.y;\n    }\n\n    if((tMin.x > tMax.z) || (tMin.z > tMax.x)){\n        return false;\n    }\n\n    if(tMin.z > tMin.x){\n        tMin.x = tMin.z;\n    }\n\n    if(tMax.z < tMax.x){\n        tMax.x = tMax.z;\n    }\n\n    mat = b.mat;\n    t = tMin.x;\n\n    return true;\n}\n\nbool raytraceScene(vec3 o, vec3 d, out float t, out material mat, out int Index){\n    float initT = 1000000000.0;\n    bool r;\n    int index;\n    for(int i = 0; i < scene.length(); i++){\n        float testT;\n        bool rt = raytraceBox(o, d, testT, scene[i], mat);\n        if(rt && testT < initT && testT >= 0.0){\n            r = true;\n            initT = testT;\n            index = i;\n        }\n    }\n    t = initT;\n    Index = index;\n    mat = scene[Index].mat;\n    return r;\n}\n\nvec3 getBoxNormals(vec3 h, box b){\n    vec3 n;\n\n    vec3 p = h;\n\n    vec3 halfSize = (b.size*0.99999)/2.0;\n\n    vec3 lbf = (b.pos - halfSize);\n    vec3 rtb = (b.pos + halfSize);\n\n    if(p.x >= rtb.x){\n        n = vec3(1, 0, 0);\n    }\n    if(p.x <= lbf.x){\n        n = vec3(-1, 0, 0);\n    }\n    if(p.y >= rtb.y){\n        n = vec3(0, 1, 0);\n    }\n    if(p.y <= lbf.y){\n        n = vec3(0, -1, 0);\n    }\n    if(p.z >= rtb.z){\n        n = vec3(0, 0, 1);\n    }\n    if(p.z <= lbf.z){\n        n = vec3(0, 0, -1);\n    }\n\n    return normalize(n);\n}\n\nfloat getLighting(vec3 h, vec3 lpos, material inMat, int index){\n    float brightness = 1.0;\n\n    float lt;\n    material lmat;\n    int i;\n    vec3 lray = lpos - h;\n\n    bool rl;\n\n    if(inMat.type != 0.0){\n        rl = raytraceScene(h, lray, lt, lmat, i);\n    }else{\n        rl = false;\n    }\n\n    vec3 n = getBoxNormals(h, scene[index]);\n    //if(lmat.type != 0.0){\n        brightness = max(dot(normalize(lray), n), 0.1);\n    //}else{\n        //brightness = 1.0;\n    //}\n    \n    float spec = pow(max(dot(normalize(lray), n), 0.1), 15.0);\n    \n        if(rl && scene[index] != scene[i]){\n            if(lmat.type != 0.0){\n                spec = 0.0;\n                brightness *= 0.4;\n            }else if(lmat.type == 0.0){\n                brightness = max(dot(normalize(lray), n), 0.1);\n            }\n        }else{\n            if(lmat.type != 0.0){\n                spec = pow(max(dot(normalize(lray), n), 0.1), 15.0);\n                brightness = max(dot(normalize(lray), n), 0.1);\n            }else if(lmat.type == 0.0){\n                brightness = 1.0;\n            }\n        }\n\n    if(inMat.type == 2.0){\n        brightness += spec;\n    }\n\n    return brightness;\n}\n\nvec3 reflectRay(vec3 h, vec3 d, int index){\n    vec3 n = getBoxNormals(h, scene[index]);\n    return d - 2.0*n*dot(d, n);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec3 initCol = vec3(0);\n    vec3 col = fogColor;\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //scene[1].pos.x += sin(iTime*0.5)*3.0 + 4.0;\n    //scene[1].pos.z += sin(iTime*0.5)*3.0 - 2.0;\n    mat3 projection;\n    projection[0] = vec3(1, 0, 0);\n    projection[1] = vec3(0, 1, 0);\n    projection[2] = vec3(0, 0, f);\n\n    camera cam = camera(vec3(5, 5, -10), vec3(20, 20, 0));\n\n    mat3 xRotation;\n    xRotation[0] = vec3(1, 0, 0);\n    xRotation[1] = vec3(0, cos(cam.d.x*degreesToRadians), -sin(cam.d.x*degreesToRadians));\n    xRotation[2] = vec3(0, sin(cam.d.x*degreesToRadians), cos(cam.d.x*degreesToRadians));\n\n    mat3 yRotation;\n    yRotation[0] = vec3(cos(cam.d.y*degreesToRadians), 0, -sin(cam.d.y*degreesToRadians));\n    yRotation[1] = vec3(0, 1, 0);\n    yRotation[2] = vec3(sin(cam.d.y*degreesToRadians), 0, cos(cam.d.y*degreesToRadians));\n\n    vec3 camd = normalize(vec3(uv, 1.0)*projection*xRotation*yRotation);\n    vec3 o = cam.o;\n\n    float focusRes = 0.15;\n    \n    float iteration = 1.0;\n    \n    for(float originMoveX = -1.0; originMoveX < 1.0; originMoveX += focusRes){\n        for(float originMoveY = -1.0; originMoveY < 1.0; originMoveY += focusRes){\n            o.x += (originMoveX*aperture)/(0.5/focusRes);\n            o.y += originMoveY*aperture;\n            //if(length(o.xy - cam.o.xy) < aperture/1.0){\n            float t;\n            material mat;\n            int i;\n            vec3 focalPoint = cam.o + camd*focalLength;\n            vec3 d = normalize(focalPoint - o);\n            \n            bool r = raytraceScene(o, d, t, mat, i);\n            \n            vec3 n = getBoxNormals(o + d*t, scene[i]);\n\n            float c = getLighting(o + d*t, lPos, mat, i);\n\n            if(r){\n                if(mat.type != 3.0){\n                    col = mix(mat.col*c, fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                }else{\n                    float rt;\n                    int ri;\n                    material rmat;\n                    vec3 rd = normalize(reflectRay(o + d*t, d, i));\n\n                    bool reflectTrace = raytraceScene(o + d*t, rd, rt, rmat, ri);\n\n                    if(reflectTrace){\n                        float rc = getLighting((o + d*t) + rd*rt, lPos, rmat, ri);\n                        col = mix(mix(rmat.col*rc, mat.col, mat.intensity)*c, fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                    }else{\n                        col = mix(mix(fogColor, mat.col, mat.intensity)*c, fogColor, min(t/(1.0/(fogDensity*0.004)), 1.0));\n                    }\n                }\n            }\n            iteration++;\n            initCol = mix(initCol, col, 1.0/(iteration));\n        }\n    }\n    \n    fragColor = vec4(pow(initCol, vec3(1.0/2.2)), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}