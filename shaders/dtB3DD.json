{
    "Shader": {
        "info": {
            "date": "1673343087",
            "description": "it was supposed to be a calm snow walk, it ended up being a fly-through over the end of the world",
            "flags": 32,
            "hasliked": 0,
            "id": "dtB3DD",
            "likes": 44,
            "name": "Hellscape Airline",
            "published": 3,
            "tags": [
                "noise",
                "cloud",
                "mountain"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 680
        },
        "renderpass": [
            {
                "code": "\n\n// Hellscape Airline by Leon Denise\n// an abundance of noise patterns\n// using code from Inigo Quilez, Antoine Zanuttini, Dave Hoskins\n// and many more\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// globals\nfloat material;\n\n#define ss(a,b,t) smoothstep(a,b,t)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nfloat gyroid (vec3 s) { return dot(sin(s),cos(s.yzx)); }\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n// Hellscape Airline by Leon Denise\n// an abundance of noise patterns\n// using code from Inigo Quilez, Antoine Zanuttini, Dave Hoskins\n// and many more\n\n\n// gyroid flavoured FBMs\nfloat fbmCloud (vec3 p) {\n    p.z *= .3;\n    float result = 0., a = 0.5;\n    for (float i = 0.; i < 8.; ++i, a /= 2.) {\n        p.z -= iTime * .1;\n        result += abs(gyroid(p/a))*a; }\n    return result;\n}\n\nfloat fbmGround (vec3 p) {\n    float result = 0., a = 0.5;\n    for (float i = 0.; i < 8.; ++i, a /= 2.) {\n        p.z += result * .5 + iTime * .001;\n        result += gyroid(p/a)*a; }\n    return result;\n}\n\nfloat fbmHorizon (vec3 p) {\n    float result = 0., a = 0.5;\n    for (float i = 0.; i < 3.; ++i, a /= 2.) {\n        p.z += result * .5 - iTime*.2;\n        result += abs(gyroid(p/a))*a; }\n    return result;\n}\n\nfloat map(vec3 p)\n{\n    float d = 100.;\n    vec3 seed = p * .5;\n    \n    // traveling\n    seed.z -= iTime * .1;\n    \n    // shapes\n    float ground = p.y+1.-fbmGround(seed);\n    float cloud = -p.y+2.5-fbmCloud(seed*.5);\n    \n    material = ground < cloud ? 0. : 1.;\n    return min(ground, cloud);\n}\n\n// Inigo Quilez\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat getAO(vec3 p, vec3 n, float scale, float intensity)\n{\n    float ao = 0.;\n    for (float i = 1.; i <= 4.; ++i)\n        ao += (i*scale-map(p + n * i * scale));\n    return clamp(1.-ao*intensity, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // pixels positions\n    vec2 p = (fragCoord.xy-iResolution.xy/2.) / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // noises\n    vec3 seed = vec3(fragCoord.xy, iFrame);\n    float rng = hash13(seed);\n    vec3 blur = hash33(seed)*2.-1.;\n    \n    // coordinates\n    vec3 pos = vec3(-1,0,4);\n    float fov = .2 * sin(iTime*.2);\n    vec3 ray = normalize(vec3(p, -0.8+fov));\n    \n    // camera look\n    vec2 angle = vec2(\n        sin(-iTime*.05)*.4,\n        sin(-iTime*.1)*.15-.08);\n        \n    // mouse look\n    if (iMouse.z > 0.)\n        angle = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n        \n    ray.yz *= rot(angle.y);\n    ray.xz *= rot(angle.x);\n    \n    // start ahead\n    pos += ray * rng;\n    \n    // blur edge\n    pos += blur * ss(0.5,1.,length(p)) * .02;\n    \n    // raymarch\n    float shade = 0.;\n    float total = 0.;\n    float maxDist = 30.;\n    const float count = 60.;\n    for (float index = count; index > 0.; --index)\n    {\n        float dist = map(pos);\n        if (dist < .001 || total > maxDist)\n        {\n            shade = index/count;\n            break;\n        }\n        dist *= 0.9 + 0.1 * rng;\n        total += dist;\n        ray += blur*.0005;\n        pos += ray * dist;\n    }\n    \n    // coloring\n    if (shade > 0.1 && total < maxDist)\n    {\n        float mat = material;\n        \n        // NuSan\n        // https://www.shadertoy.com/view/3sBGzV\n        vec2 e = vec2(0.01,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-e.xyy),map(pos-e.yxy),map(pos-e.yyx)));\n        vec3 rf = reflect(ray, normal);\n        \n        // ground\n        if (mat == 0.)\n        {\n            // Inigo Quilez\n            // https://iquilezles.org/articles/palettes\n            color = .5+.5*cos(vec3(1,2,3)*5.8-pos.y*2.-4.+rf.z);\n            color.gb *= getAO(pos, normal, .05, 2.);\n            color *= shade;\n        }\n        // cloud\n        else\n        {\n            color = .5+.5*cos(vec3(1,2,3)*5.8+pos.y*2.-0.0-rf.y*1.);\n        }\n    }\n    // horizon\n    else if (total > maxDist)\n    {\n        float noise = fbmHorizon(vec3(pos)*0.4);\n        color = .5+.5*cos(vec3(1,2,3)*5.5-noise*2.+abs(ray.y)*12.);\n        color *= ss(.1,-.1,abs(ray.y));\n    }\n\n    // smooth frame\n    color = mix(color, texture(iChannel0, uv).rgb, .9);\n    \n    fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}