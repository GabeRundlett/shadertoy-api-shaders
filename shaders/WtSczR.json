{
    "Shader": {
        "info": {
            "date": "1593521189",
            "description": "Tried making this tiling. Then I remembered I don't know trigonometry haha.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtSczR",
            "likes": 15,
            "name": "Equithirds tiling",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "// This is a no-math, all number crunched, Equithirds tiling:\n// https://tilings.math.uni-bielefeld.de/substitution/equithirds/\n\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n#define pi acos(-1.)\n#define tau (2.*pi)\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    \n    vec3 col = vec3(0);\n    \n    float iters = 9.;\n    \n    float d = 10e5;\n    \n    // mafs\n    vec2 s = vec2(0.173,0.1);\n\n    \n    uv.y -= s.y*0.35;\n\n    uv += vec2(sin(iTime),cos(iTime))*0.1;    \n    uv *= 0.06;\n\n    \n    float id = 0.;\n    vec2 p = uv;\n    float sc = 1.;\n    \n    float id0cnt = 0.;\n    float id1cnt = 0.;\n    float palcnt = 0.;\n    \n    for(float i = 0.; i < iters; i++){\n        \n        if( id == 0. ){\n        \n        \tmat2 rb = rot(tau/3.*1.);\n        \tmat2 rc = rot(tau/3.*2.); \n        \n            float szsc = 1.*sc;\n            \n            float da = sdTriangleIsosceles( p   , s*szsc);\n            float db = sdTriangleIsosceles( p*rb, s*szsc);\n            float dc = sdTriangleIsosceles( p*rc, s*szsc);\n\n            if( da < 0. ){\n                palcnt++;\n            } else if( db < 0. ){\n\t\t\t\tp *= rb;\n                palcnt += 1.5;\n            } else if( dc < 0. ){\n                palcnt += 2.5;\n\t\t\t\tp *= rc;\n            } \n            p.y -= 0.5*s.y*szsc;\n            \n            d = min(d,abs(da));\n            d = min(d,abs(db));\n            d = min(d,abs(dc));\n            id = 1.;\n            \n            id0cnt ++;\n        \n        } else if (id == 1.) {\n            float ramt = tau/5.*2.0835;\n            mat2 ra = rot(-ramt);\n            mat2 rb = rot(ramt);\n            \n            vec2 transa = vec2(-0.075,0.0144);\n            vec2 transb = vec2(-transa.x,transa.y);\n            \n            float szsc = sc*0.579;\n            \n            vec2 pa = (p*ra + transa*sc );\n            vec2 pb = (p*rb + transb*sc );\n            \n            \n            float da = sdTriangleIsosceles( pa, s*szsc);\n            float db = sdTriangleIsosceles( pb, s*szsc);\n            \n            \n            if(da < 0.){\n                p = p*ra + transa*sc*vec2(1.,-1.);\n                sc = szsc;\n                id = 1.;\n                palcnt += 1.5;\n            } else if(db < 0.){\n                p = p*rb + transb*sc*vec2(1.,-1.);\n                col += 0.03;\n                sc = szsc;\n                id = 1.;\n                palcnt += 1.;\n            } else {\n                p.y -= s.y*szsc/3.5;\n                \n                sc *= 0.335;\n                id = 0.;\n                palcnt += .5;\n            }\n            \n            \n            id1cnt++;\n        \td = min(d,abs(da));\n        \td = min(d,abs(db));\n        }\n    }\n    \n    \n    #define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n    col = mix(col,pal(0.5,0.5,vec3(2.,0.7,0.2),1., id1cnt*7. +  id0cnt*5. + palcnt*7. + 4. + iTime/2. + uv.x*1. )/1.,smoothstep(dFdx(uv.x),0.,-d));\n    \n    d = abs(d);\n    \n    float w = 0.00006;\n    \n    col = mix(col,vec3(0.01),smoothstep(dFdx(uv.x) + w,w,d));\n    \n    \n    col = pow(col,vec3(0.454545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}