{
    "Shader": {
        "info": {
            "date": "1619843410",
            "description": "Barycentric coordinates within a tetrahedron. I'm planning to use this to make a planar marching cubes SDF operator.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsSXRm",
            "likes": 7,
            "name": "Tetrahedral Barycentric Coords",
            "published": 3,
            "tags": [
                "3d",
                "barycentric",
                "interpolation",
                "systemofequations",
                "tetrahedral"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "#define t1 iTime\n#define t2 iTime * 1.25\n#define t3 iTime * 1.5\n\n#define cs1 vec2(cos(t1), sin(t1))\n#define cs2 vec2(cos(t2), sin(t2))\n#define cs3 vec2(cos(t3), sin(t3))\n\n// Tetrahedron vertices\n#define tet1 vec3(-1.5, -1.5, -1.5) + vec3(cs1.x, cs2.y, cs3.y)\n#define tet2 vec3(1.5, -1.5, -1.5) + vec3(cs3.y, cs2.x, cs1.y)\n#define tet3 vec3(0.0, -1.5, 1.5) + vec3(cs1.y, cs2.x, cs2.x)\n#define tet4 vec3(0.0, 1.5, 0.0) + vec3(cs2.x, cs1.x, cs3.y)\n\n// https://iquilezles.org/articles/distfunctions\nfloat dot2(in vec3 v) { return dot(v, v); }\nfloat sdTriangle(in vec3 p, in vec3 a, in vec3 b, in vec3 c) {\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n        (sign(dot(cross(ba, nor), pa)) +\n         sign(dot(cross(cb, nor), pb)) +\n         sign(dot(cross(ac, nor), pc)) < 2.0)\n         ?\n         min(min(\n         dot2(ba * clamp(dot(ba, pa) / dot2(ba), 0.0, 1.0) - pa),\n         dot2(cb * clamp(dot(cb, pb) / dot2(cb), 0.0, 1.0) - pb)),\n         dot2(ac * clamp(dot(ac, pc) / dot2(ac), 0.0, 1.0) - pc))\n         :\n         dot(nor, pa) * dot(nor, pa) / dot2(nor));\n}\n\n// Solve 4x4 linear system by hand (some annoying edge cases)\n// a.xu + b.xv + c.xw + d.xk = p.x\n// a.yu + b.yv + c.yw + d.yk = p.y\n// a.zu + b.zv + c.zw + d.zk = p.z\n// u + v + w + k = 1\nvec4 bary4(in vec3 p, in vec3 v1, in vec3 v2, in vec3 v3, in vec3 v4) {\n    vec3 c11 = v1 - v4, c21 = v2 - v4, c31 = v3 - v4, c41 = v4 - p;\n\n    vec2 m1 = c31.yz / c31.x;\n    vec2 c12 = c11.yz - c11.x * m1, c22 = c21.yz - c21.x * m1, c32 = c41.yz - c41.x * m1;\n\n    vec4 uvwk = vec4(0.0);\n    float m2 = c22.y / c22.x;\n    uvwk.x = (c32.x * m2 - c32.y) / (c12.y - c12.x * m2);\n    uvwk.y = -(c32.x + c12.x * uvwk.x) / c22.x;\n    uvwk.z = -(c41.x + c21.x * uvwk.y + c11.x * uvwk.x) / c31.x;\n    uvwk.w = 1.0 - uvwk.z - uvwk.y - uvwk.x;\n\n    return uvwk;\n}\n\n// Lazy way\n//vec4 bary4(in vec3 p, in vec3 v1, in vec3 v2, in vec3 v3, in vec3 v4) {\n//    return vec4(p, 1.0) * inverse(mat4(v1.x, v2.x, v3.x, v4.x,\n//                                       v1.y, v2.y, v3.y, v4.y,\n//                                       v1.z, v2.z, v3.z, v4.z,\n//                                        1.0,  1.0,  1.0,  1.0));\n//}\n\n// Codegolfed\n//#define bary4(p, a, b, c, d) vec4(p, 1) * inverse(transpose(mat4(a, 1, b, 1, c, 1, d, 1)))\n\nfloat mapScene(in vec3 p) {\n    float scene = sdTriangle(p, tet4, tet1, tet2);\n    scene = min(scene, sdTriangle(p, tet4, tet2, tet3));\n    scene = min(scene, sdTriangle(p, tet4, tet3, tet1));\n    scene = min(scene, sdTriangle(p, tet1, tet2, tet3));\n    return scene - 0.05;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 6.28;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec4 bary = bary4(p, tet1, tet2, tet3, tet4);\n            fragColor.rgb = bary.xyz * (1.0 - bary.w) + bary.w;\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}