{
    "Shader": {
        "info": {
            "date": "1483549638",
            "description": "An audio visualiser inspired by the one visible when speaking to Siri. Each colour is a sine wave of different frequency, representing frequencies in the audio. Define symmetric to show the bottom of the waves and change colour using the comments. ",
            "flags": 0,
            "hasliked": 0,
            "id": "llySRm",
            "likes": 11,
            "name": "Siri-Inspired Audio Visualiser ",
            "published": 3,
            "tags": [
                "audio"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 1359
        },
        "renderpass": [
            {
                "code": "//#define SYMMETRIC\n\n#define WAVES 8.0\n\nvec4 sinWave(vec4 under, vec4 over, float amp, float freq, float x, float y){\n\tfloat sinx = sin(x * freq);\n    #ifdef SYMMETRIC\n    if(abs(y / amp) < abs(sinx) + 0.2){\n       \treturn under;\n    }\n    #else\n    if((y / amp) < sinx + 0.2){\n       \treturn under;\n    }\n    #endif\n    return over;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sampleFreq(float freq){\n    return texture(iChannel0, vec2(freq, 0.0)).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = uv.y * 10.0 - 5.0;\n    \n    vec4 col = vec4(0.0);\n    \n    for(float i = 0.0; i < WAVES; i += 1.0){\n        \n        //Red Colour Scheme\n        //vec4 wavecol = vec4(0.1 + 0.05 * i, 0.0, 0.0, 0.5);\n        \n        //Blue Colour Scheme\n        //vec4 wavecol = vec4(0.0, 0.0, 0.1 + 0.05 * i, 0.5);\n        \n        //HSV Colour Scheme\n        vec4 wavecol = vec4(hsv2rgb(vec3((1.0 / WAVES) * i, 1.0, 0.6)), 0.5);\n        \n    \tvec4 wave = sinWave(wavecol, vec4(0.0), sampleFreq((1.0 / WAVES) * i + 0.1) * 5.0, i * 3.0, uv.x + iTime / (1.0 + i), uv.y);\n        col += wave * wave.a;\n    }\n    \n    col = vec4(pow(col.xyz, vec3(0.4545)),col.a);\n        \n\tfragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}