{
    "Shader": {
        "info": {
            "date": "1546609324",
            "description": "This code is based on Iq's 2d distance functions. It's testing the UI drawing.",
            "flags": 0,
            "hasliked": 0,
            "id": "3sfGzB",
            "likes": 26,
            "name": "UI test",
            "published": 3,
            "tags": [
                "ui",
                "2ddistance"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 787
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define degToRad (PI * 2.0) / 360.0\n\nfloat c_0 = 31599.0;\nfloat c_1 = 9362.0;\nfloat c_2 = 29671.0;\nfloat c_3 = 29391.0;\nfloat c_4 = 23497.0;\nfloat c_5 = 31183.0;\nfloat c_6 = 31215.0;\nfloat c_7 = 29257.0;\nfloat c_8 = 31727.0;\nfloat c_9 = 31695.0;\nfloat c_colon = 1040.0;\n\n// 2d distance functions from https://iquilezles.org/articles/distfunctions2d\nfloat dBox2d(vec2 p, vec2 b) {\n\treturn max(abs(p.x) - b.x, abs(p.y) - b.y);\n}\n\nvec3 lineTex(vec2 uv)\n{\n    float stripeSize = 50.0;\n    float t = iTime*10.0;\n    return vec3(tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize,tan((uv.x+uv.y+(-t/stripeSize))*stripeSize)*stripeSize);\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec3 line( in vec3 buf, in vec2 a, in vec2 b, in vec2 p, in vec2 w, in vec4 col )\n{\n   float f = sdLine( p, a, b );\n   float g = fwidth(f)*w.y;\n   return mix( buf, col.xyz, col.w*(1.0-smoothstep(w.x-g, w.x+g, f)) );\n}\n\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\n// modified sdTriangle function\nfloat sdQuads( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p3 - p2;\n    vec2 e3 = p0 - p3;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n    vec2 v3 = p - p3;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    vec2 pq3 = v3 - e3*clamp( dot(v3,e3)/dot(e3,e3), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e3.y - e0.y*e3.x );\n    vec2 d = min( min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                 \t   vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) )),\n                       vec2( dot( pq3, pq3 ), s*(v3.x*e3.y-v3.y*e3.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdTriangleIsosceles( in vec2 q, in vec2 p )\n{\n    p.y -= 0.5;\n    p.x = abs(p.x);\n    \n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    \n    float s = -sign( q.y );\n\n    vec2 d = min( vec2( dot( a, a ), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot( b, b ), s*(p.y-q.y)  ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nvec3 animateCircle(vec2 uv, vec3 col,vec2 pos, float deg, float size, float thic, float speed) {\n\tfloat rad = ((iTime*speed)+deg)*degToRad;\n    float s = sin(rad);\n    float c = cos(rad);\n    \n    vec2 q = (uv+pos) * mat2(c, -s, s, c);\n    float r2 = (length( q )*size);\n    \n    if(r2 > 1.0-thic && r2 < 1.0 && q.y > 0.15){\n        vec3 ltex = lineTex(q);\n        col *= ltex/100.0;\n    }\n    \n    return col;\n}\n\nfloat getBit(float num,float bit)\n{\n\tnum = floor(num);\n\tbit = floor(bit);\n\t\n\treturn float(mod(floor(num/pow(2.,bit)),2.) == 1.0);\n}\n\nfloat Sprite3x5(float sprite,vec2 p)\n{\n\tfloat bounds = float(all(lessThan(p,vec2(3,5))) && all(greaterThanEqual(p,vec2(0,0))));\n\t\n\treturn getBit(sprite,(2.0 - p.x) + 3.0 * p.y) * bounds;\n}\n\nfloat Digit(float num,vec2 p)\n{\n\tnum = mod(floor(num),11.0);\n\t\n\tif(num == 0.0) return Sprite3x5(c_0,p);\n\tif(num == 1.0) return Sprite3x5(c_1,p);\n\tif(num == 2.0) return Sprite3x5(c_2,p);\n\tif(num == 3.0) return Sprite3x5(c_3,p);\n\tif(num == 4.0) return Sprite3x5(c_4,p);\n\tif(num == 5.0) return Sprite3x5(c_5,p);\n\tif(num == 6.0) return Sprite3x5(c_6,p);\n\tif(num == 7.0) return Sprite3x5(c_7,p);\n\tif(num == 8.0) return Sprite3x5(c_8,p);\n\tif(num == 9.0) return Sprite3x5(c_9,p);\n\tif(num == 10.0) return Sprite3x5(c_colon,p);\n\t\n\treturn 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n    vec2 uvRef = uv;\n    \n    // bg color\n    vec3 col = vec3(0.9,0.9,0.9);\n    vec3 bcol = vec3(0.3,0.75,0.7);\n    \n\tfloat r3 = length( uv+vec2(-0.5,0.75) )*3.0;\n    float r4 = length( uv+vec2(-0.5,0.75) )*3.5;\n    \n    col = mix( col, vec3(0.2,0.2,0.2), 1.0-smoothstep(0.98,1.0,r3) );\n    col = mix( col, bcol, 1.0-smoothstep(0.98,1.0,r4) );\n    \n\tif(uv.x >= 0.23 && uv.x<0.7){\n        uvRef = uv;\n        uvRef.x += iTime*0.25;\n        \n        uvRef.x = mod(uvRef.x,2.0)-1.0;\n        uvRef.y += 0.75;\n        col = line( col, vec2(0.0, 0.07), vec2(0.07, -0.07), uvRef, vec2(0.02,2.0), vec4(vec3(0.9),2.0) );\n        col = line( col, vec2(0.1-0.2, 0.07), vec2(0.17-0.2, -0.07), uvRef, vec2(0.02,2.0), vec4(vec3(0.9),2.0) );\n        col = line( col, vec2(0.2-0.4, 0.07), vec2(0.27-0.4, -0.07), uvRef, vec2(0.02,2.0), vec4(vec3(0.9),2.0) );\n        col = line( col, vec2(0.35-0.2, 0.07), vec2(0.27-0.2, -0.07), uvRef, vec2(0.02,2.0), vec4(vec3(0.9),2.0) );\n        col = line( col, vec2(0.45-0.2, 0.07), vec2(0.37-0.2, -0.07), uvRef, vec2(0.02,2.0), vec4(vec3(0.9),2.0) );\n    }   \n    \n    col = animateCircle(uv, col,vec2(-0.5,0.75), 45.0,3.5,0.25,-50.0); \n    \n    \n    float r = length( uv+vec2(-1.0,0.5) )*2.0;\n    float r2 = (length( uv+vec2(-1.0,0.5) )*2.3);\n    \n\tcol = mix( col, vec3(0.2,0.2,0.2), 1.0-smoothstep(0.98,1.0,r) );\n    col = mix( col, bcol, 1.0-smoothstep(0.98,1.0,r2) );\n    \n    col = animateCircle(uv, col,vec2(-1.0,0.5), 0.0,2.3,0.1,20.0);\n   \tcol = animateCircle(uv, col,vec2(-1.0,0.5), 180.0,2.3,0.1,20.0);\n    col = animateCircle(uv, col,vec2(-1.0,0.5), 240.0,2.7,0.2,-50.0);\n    \n    \n    float ax = cos(iTime*2.5)*0.03;\n    float ay = sin(iTime*1.7)*0.04;\n    float ax2 = cos(iTime*1.9)*0.05;\n    float ay2 = sin(iTime*2.1)*0.06;\n\tfloat ad = sdQuads(vec2(0.1+ax,0.1+ay2),vec2(-0.1+ax2,0.1+ay),vec2(-0.1+ax,-0.1+ay2),vec2(0.1+ax2,-0.1+ay),uv+vec2(-1.0,0.5));\n    col = mix( col, vec3(0.5,0.95,0.9), 1.0-smoothstep(0.006,0.01,abs(ad)) );\n    \n    col = line( col, vec2(0.6, 0.8), vec2(0.6, -0.05), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    col = line( col, vec2(-0.6, 0.8), vec2(-0.6, -0.05), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    \n    col = line( col, vec2(0.5, 0.6), vec2(0.5, 0.1), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    col = line( col, vec2(-0.5, 0.6), vec2(-0.5, 0.1), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    \n    if(uv.y >= -0.05 && uv.y<0.8){\n        uvRef = uv;\n\t\tuvRef.y += iTime*0.1;\n    \tuvRef.y = mod(uvRef.y,0.1)-0.05;\n    \tcol = line( col, vec2(-0.65, 0.0), vec2(-0.61, 0.0), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n        col = line( col, vec2(0.65, 0.0), vec2(0.61, 0.0), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n    }\n    \n    if(uv.y >= 0.1 && uv.y<0.6){\n    \tuvRef = uv;\n        uvRef.y -= iTime*0.1;\n    \tuvRef.y = mod(uvRef.y,0.2)-0.1;\n        col = line( col, vec2(-0.49, 0.0), vec2(-0.43, 0.0), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n        col = line( col, vec2(0.49, 0.0), vec2(0.43, 0.0), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n    }\n    \n    if(uv.x >= -0.5 && uv.x<0.5){\n    \tuvRef = uv;\n        uvRef.y -= 0.75;\n        uvRef.x -= iTime*0.1;\n    \tuvRef.x = mod(uvRef.x,0.2)-0.1;\n        col = line( col, vec2(0.0, -0.01), vec2(0.0, 0.01), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n     \n    }\n    \n    // map\n    col = line( col, vec2(0.85, 0.9), vec2(0.85, 0.5), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    col = line( col, vec2(1.45, 0.9), vec2(1.45, 0.5), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    col = line( col, vec2(0.85, 0.9), vec2(1.45, 0.9), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    col = line( col, vec2(0.85, 0.5), vec2(1.45, 0.5), uv, vec2(0.003,2.0), vec4(bcol,2.0) );\n    if(uv.y >= 0.5 && uv.y<0.9){\n        uvRef = uv;\n        uvRef.y -= iTime*0.1;\n    \tuvRef.y = mod(uvRef.y,0.08)-0.04;\n        col = line( col, vec2(0.86, 0.0), vec2(1.44, 0.0), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n    \tif(uv.x >= 0.85 && uv.x<1.45){\n            uvRef = uv;\n    \t\tuvRef.x = mod(uvRef.x,0.08)-0.04;\n        \tcol = line( col, vec2(0.0, 0.5), vec2(0.0, 0.9), uvRef, vec2(0.003,2.0), vec4(bcol,2.0) );\n        }\n    }\n    \n    vec2 tri = vec2(0.03,-0.06);\n\tfloat d = sdTriangleIsosceles( tri, uv+vec2(-1.15,-0.25) );\n    col = mix( col, vec3(0.7,0.0,0.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    \n    \n    // navi icon\n    vec2 triNavi = vec2(0.04,0.08);\n\tfloat navi = sdTriangleIsosceles( triNavi, uv+vec2(sin(iTime)*0.5,-0.3) );\n    col = mix( col, vec3(0.7,0.0,0.0), 1.0-smoothstep(0.0,0.005,abs(navi)) );\n    \n    // guage\n    float gd = sdQuads(vec2(0.7,-0.04),vec2(-0.3,0.07),vec2(-0.2,-0.07),vec2(0.8,-0.18),uv+vec2(1.15,0.5));\n    col = mix( col, bcol, 1.0-smoothstep(0.005,0.01,abs(gd)) );\n    float gd2 = sdQuads(vec2(0.8,-0.04),vec2(-0.1,0.05),vec2(-0.2,-0.09),vec2(0.7,-0.18),uv+vec2(1.15,0.637));\n    col = mix( col, bcol, 1.0-smoothstep(0.005,0.01,abs(gd2)) );\n    \n    float ganimate = mod(iTime*5.0,26.0);\n    float gx = -0.3-ganimate*0.1;\n    if(ganimate>=13.0){\n        gx = -1.4+( ganimate-13.0)*0.1;\n    }\n    \n    if(uv.x >= -1.5 && uv.x<gx){\n        float gd3 = sdQuads(vec2(0.665,-0.08),vec2(-0.21,0.02),vec2(-0.17,-0.03),vec2(0.7,-0.12),uv+vec2(1.15,0.5));\n    \tcol = mix( col, vec3(0.2,0.8,0.5), 1.0-smoothstep(0.02,0.04,abs(gd3)) );\n    }\n    \n    \n    float ganimate2 = mod(iTime*4.5,26.0);\n    float gx2 = -0.3-ganimate2*0.1;\n    if(ganimate2>=13.0){\n        gx2 = -1.4+( ganimate2-13.0)*0.1;\n    }\n    \n    if(uv.x >= -1.5 && uv.x<gx2){\n        float gd4 = sdQuads(vec2(0.72,-0.08),vec2(-0.08,0.0),vec2(-0.12,-0.05),vec2(0.675,-0.135),uv+vec2(1.15,0.637));\n        col = mix( col, vec3(0.9,0.6,0.0), 1.0-smoothstep(0.025,0.04,abs(gd4)) );\n    }\n    \n    // target\n    float targetD = sdRhombus(uv, vec2(0.16+sin(iTime*2.0)*0.01,0.1+sin(iTime*2.0)*0.01));\n    \n    col = mix( col, bcol, 1.0-smoothstep(0.002,0.01,abs(targetD)) );\n    \n    \n    float bar0 = dBox2d(uv+vec2(1.4,-0.3), vec2(0.01,0.1+(sin(iTime*3.0)*0.05)));\n    col = mix( col, bcol, 1.0-smoothstep(0.04,0.05,abs(bar0)) );                    \n    float bar1 = dBox2d(uv+vec2(1.28,-0.3), vec2(0.01,0.1+(sin(iTime*2.0)*0.06)));\n    col = mix( col, bcol, 1.0-smoothstep(0.04,0.05,abs(bar1)) );    \n    float bar2 = dBox2d(uv+vec2(1.16,-0.3), vec2(0.01,0.1+(sin(iTime*3.5)*0.08)));\n    col = mix( col, bcol, 1.0-smoothstep(0.04,0.05,abs(bar2)) );    \n    float bar3 = dBox2d(uv+vec2(1.04,-0.3), vec2(0.01,0.1+(sin(iTime*4.0)*0.07)));\n    col = mix( col, bcol, 1.0-smoothstep(0.04,0.05,abs(bar3)) );\n    \n    // digit\n    uv = ( fragCoord.xy /iResolution.xy ) * vec2(128,64);\n\tvec2 cpos = vec2(2.0,57.0);\n\tfloat dc = Digit(fract(iTime)*10.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*20.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(10.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*40.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*50.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(10.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*70.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*80.0,floor(uv-cpos));\n\tcpos.x += 3.5;\n\tdc += Digit(fract(iTime)*90.0,floor(uv-cpos));\n   \tcol = mix(col,bcol,dc );\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}