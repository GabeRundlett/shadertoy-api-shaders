{
    "Shader": {
        "info": {
            "date": "1724799920",
            "description": "left side is top-bottom view, right side is side to side. flickering is z change\na procedural brick texture using simple tilings that can be easily swapped for other ones. the tiling code is probably the most horrid thing i did in my entire life lmao",
            "flags": 0,
            "hasliked": 0,
            "id": "XfBBRm",
            "likes": 1,
            "name": "procedural brick texture",
            "published": 3,
            "tags": [
                "procedural",
                "texture",
                "brick"
            ],
            "usePreview": 0,
            "username": "dottedboxguy",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "float sdBox(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat scene(vec3 pos){\n    \n    vec3 p = pos;\n    \n    vec3 box = vec3(.3);\n    \n    float d = sdBox(p, box); \n\n    return d;\n}\n\n//tile : \n//     |\n//  |  |\n//  | ------\n\n//cut off to :\n//  |  |\n//  | ---\n\nfloat sdTile(vec3 p){\n    vec3 brick_ratio = vec3(.5, 1., .5);\n    float d = sdBox(p - brick_ratio, brick_ratio);\n    d = min(d, sdBox(p - brick_ratio*vec3(3., 2., 1.), brick_ratio));\n    d = min(d, sdBox(p - brick_ratio.yxz*vec3(2., 1., 1.), brick_ratio.yxz));\n    return d;\n}\n\n//space mangling happens here\nvec3 tilingPattern(vec3 initial_p){\n    float offset_amount = .75 + .25*cos(iTime); //offset amount, in brick length\n    const float pattern_repeat_z = 4.;  //amount of layers until the pattern repeats over the z axis\n\n    vec3 pos = initial_p;\n    pos.x += ceil(mod(pos.z*2., pattern_repeat_z))*offset_amount; //offset of tiling over z\n    \n    vec3 p = fract(vec3(pos.xy, mod(pos.z, .5)))*2.;  //tiling repetition over space\n    \n    p = ((mod(pos.x, 2.) >= 1.)^^(mod(pos.y, 2.) >= 1.)) ? //tile rotation in checkerboard\n        vec3(2.+fract(pos.yx)*-2., p.z):p;                 //pattern on the xy plane\n    \n    return p;\n}\n\nfloat sdTiling(vec3 pos){\n    vec3 p = tilingPattern(pos);\n    float d = sdTile(p);\n    return d;\n}\n\nvec3 tex_brick(in vec3 p){\n    \n    vec3 brick = vec3(.6588, .2824, .1725);\n    vec3 mortar = vec3(.6824, .5569, .4941);\n    \n    float mortar_amount = .1+.05*cos(iTime*2.);\n    \n    float d = sdTiling(p)+mortar_amount;\n    \n    vec3 color = (d>0.) ? mortar : brick;\n    \n    return color;\n    //return vec3(cos(d*60.));\n    //return vec3(tilingPattern(p).xyz);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //vec3 p = vec3(uv*10., iTime);\n    vec3 p = vec3(uv*10., .1);\n    \n    float d = scene(p);\n    \n    vec3 col = (fragCoord.x < iResolution.x*.5)? tex_brick(p):tex_brick(p.xzy);\n    \n    col = (abs(fragCoord.x-iResolution.x*.5)-3.>0.)?col:vec3(0.);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}