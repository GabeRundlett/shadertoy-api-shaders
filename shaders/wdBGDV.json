{
    "Shader": {
        "info": {
            "date": "1550106112",
            "description": "Just an in class activity for ray tracing",
            "flags": 0,
            "hasliked": 0,
            "id": "wdBGDV",
            "likes": 1,
            "name": "GPU ray trace activity",
            "published": 3,
            "tags": [
                "raytrace"
            ],
            "usePreview": 0,
            "username": "tmcgillicuddy",
            "viewed": 332
        },
        "renderpass": [
            {
                "code": "vec3 camPos = vec3(0,0,0);\nvec3 spherePos = vec3(0,0,10);\nvec3 nearClip = vec3(0,0,1);\nvec3 lightPos = vec3(5,5,0);\nfloat radius = 5.0;\nfloat radius2 = 25.0;\n\nfloat sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n vec3 rc = ray-center;\n float c = dot(rc, rc) - (radius*radius);\n float b = dot(dir, rc);\n float d = b*b - c;\n float t = -b - sqrt(abs(d));\n float st = step(0.0, min(t,d));\n return mix(-1.0, t, st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv = (uv*2.0) - 1.0; // Convert UV to -1 1 space\n    \n    uv.x *= iResolution.x/iResolution.y; //Correct UV for aspect ratio\n    \n    vec3 imagePlanePixel = vec3(uv.x,uv.y, camPos.z + nearClip.z); //Get position of pixel\n\n    vec3 rayDir = normalize(imagePlanePixel - camPos); // create ray from cam position to pixel\n\n       \n    float hit = sphereIntersect(camPos, //The camera's origin\n                                 rayDir,\n                                 spherePos, //Position of sphere\n                                 radius); //Radius of Sphere\n    clamp(hit,0.0,1.0);\n    \n    if(hit > 0.0) {\n\t\tvec3 col = vec3(1,0,0); //base color\n           \n        vec3 hitPoint = camPos + (rayDir*hit); //hit point along ray direction \n            \n    \tvec3 n = hitPoint - spherePos;\n    \tnormalize(n);\n    \tvec3 l = lightPos - hitPoint;\n    \tnormalize(l);\n    \tfloat diffuse = dot(n,l) * 0.01;\n        fragColor = vec4(col*hit* diffuse,1) ;\n\n    } else {\n    \tfragColor = vec4(0,1,0,1);\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}