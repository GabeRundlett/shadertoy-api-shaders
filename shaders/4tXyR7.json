{
    "Shader": {
        "info": {
            "date": "1504437559",
            "description": "An attempt to create somewhat realistic tree rings. A variation of this is used to render a wooden cube here: [url]https://www.shadertoy.com/view/4tK3DV[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXyR7",
            "likes": 4,
            "name": "Tree Rings",
            "published": 3,
            "tags": [
                "2d",
                "wood",
                "treerings"
            ],
            "usePreview": 0,
            "username": "glk7",
            "viewed": 775
        },
        "renderpass": [
            {
                "code": "// Created by genis sole - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n\n\n//From http://marc-b-reynolds.github.io/math/2016/03/29/weyl_hash.html\nuint hash(uvec2 x) {\n    x = uvec2(0x3504f333, 0xf1bbcdcb)*x; \n    return (x.x^x.y) * 741103597u;\n}\n\n//From https://iquilezles.org/articles/sfrand\nfloat uintBitsToFloat01(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x3f800000u) - 1.0;\n}\n\nfloat uintBitsToFloat11(uint x) {\n    return uintBitsToFloat((x >> 9u) | 0x40000000u) - 3.0;\n}\n\nvec2 hash2(vec2 p) {\n\tuvec2 x = floatBitsToUint(p);   \n\treturn vec2(uintBitsToFloat11(hash(x)),\n                uintBitsToFloat11(hash(x + 868867u))); \n}\n\nfloat hash(vec2 p) {\n    uvec2 x = floatBitsToUint(p);\n    return uintBitsToFloat01(hash(x));\n}\n\nfloat hash(float p) {\n\tuint x = floatBitsToUint(p);\n    return uintBitsToFloat01(hash(uvec2(x, 324034u)));\n}\n\nfloat vnoise(vec2 p) {\n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    \n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    \n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\t\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n   \treturn a + u.x*c1 + u.y*c2 + u.x*u.y*c3;\n}\n\nfloat vnoise(float p) {\n    float i = floor(p);\n\tfloat f = fract(p);\n    \n    float a = hash(i);\n    float b = hash(i + 1.0);\n    \n    float u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(a, b, u);\n}\n\nfloat fbm(vec2 p) {\n\treturn vnoise(p)*0.5 + vnoise(p*2.0)*0.25 + vnoise(p*4.0)*0.125;  \n}\n\nfloat fbm(float p) {\n\treturn vnoise(p)*0.5 + vnoise(p*2.0)*0.25 + vnoise(p*4.0)*0.125;  \n}\n\nfloat gnoise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float a = dot(hash2(i), f);\n\tfloat b = dot(hash2(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\n\tfloat c = dot(hash2(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\n\tfloat d = dot(hash2(i + vec2(1.0)), f - vec2(1.0));\n\n    float c1 = b - a;\n    float c2 = c - a;\n    float c3 = d - c - b + a;\n\n    vec2 q = f*f*f*(f*(f*6.0 - 15.0) + 10.0);\n    \n   \treturn a + q.x*c1 + q.y*c2 + q.x*q.y*c3;\n}\n\nfloat gnoise(float p) {\n    float i = floor(p);\n\tfloat f = fract(p);\n    \n    float a = dot(hash(i), f);\n    float b = dot(hash(i + 1.0), f - 1.0);\n    \n    float u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(a, b, u);\n}\n\n#define R iResolution\nvoid mainImage(out vec4 O, vec2 U) {\n    U = 90.*(U - R.xy*0.5) / R.x;\n    \n    //Main Rings\n    O.w = length(U);\n    O.w += fbm(O.w*.5);\n    O.w *= log(max(0.001, O.w*.25))*.1;\n    O.w += fbm(U *.05 + 500.);\n    O.y = floor(O.w);\n    O.z = fract(O.w);\n    O.x = O.z*smoothstep(0., 1., 1. - O.z)*3.;\n    \n    //Grain\n    O.y = gnoise(U.xy*12. + 100.)*.2 + \n          gnoise((O.z + O.y + 100. + fbm(U.xy + 200.)*0.06)*20.0 )*.3; \n    O.x = mix(O.x, O.y, .5);\n    \n    O.xyz = clamp((O.x*1.7 + .25) * vec3(1., .6, .4) * 1.4, 0., 1.);\n    O = vec4(pow(O.xyz, vec3(.4545)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}