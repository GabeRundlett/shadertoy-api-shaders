{
    "Shader": {
        "info": {
            "date": "1510304213",
            "description": "just a 100% harmless stick figure in pure black and white (... for now)",
            "flags": 0,
            "hasliked": 0,
            "id": "MlScW3",
            "likes": 15,
            "name": "Portal Stick Figure",
            "published": 3,
            "tags": [
                "time",
                "animation",
                "monochrome",
                "portal",
                "stickfigure",
                "weirdness"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 820
        },
        "renderpass": [
            {
                "code": "#define black vec4(0)\n#define white vec4(1)\n#define PI radians(180.0)\n\n#define sphere(p, r) (length(p)-r)\n\n// ellipsoid + box from\n// https://iquilezles.org/articles/distfunctions\nfloat ellipsoid(vec2 p, vec2 r)\n{\n    return (length(p/r) - 1.0) * min(r.x,r.y);\n}\n\nfloat box(vec2 p, vec2 b)\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat hash(float time, float offset)\n{\n    return sin(pow((2.0 + sin(floor(time) + offset)) * 7.5439, 3.153));\n}\n\nvec3 hash3(float time, vec3 offset)\n{\n    return vec3(\n        hash(time, offset.x),\n        hash(time+511.0, offset.y),\n        hash(time+1773.0, offset.z)\n    );\n}\n\nfloat bulge(float from, float to, float x)\n{\n    return 1.0-smoothstep(from, to, abs(x));\n}\n\nvec2 portalGuyGaze(vec2 xy, float gTime)\n{\n    float time = gTime / 5.187;\n    float base = floor(time);\n    \n    vec3 gaze = vec3(0);\n    for (int i=-3 ; i<=3 ; i++)\n    {\n        vec3 next_gaze = hash3(time, vec3(float(i)));\n        float next_at = base + float(i);\n        next_at += 2.0 * hash(time, float(i));\n        \n        gaze = mix(gaze, next_gaze, bulge(0.12, 0.2, time - next_at));\n    }\n    \n    gaze.xy = normalize(vec2(1.0, 0.0) + 0.2 * gaze.xy);\n    gaze.z = 1.0 + 0.12 * abs(gaze.z);\n    \n    xy.y *= gaze.z;\n    xy = vec2(dot(gaze.xy, xy), dot(gaze.yx*vec2(-1,1), xy));\n    xy.x *= 1.0 + abs(gaze.y);\n    \n    return xy;\n}\n\nfloat portalGuy(vec2 xy, float gTime, float walk, float bob)\n{\n    float time = mod(gTime * 2.0, 1.0);\n    float walk1 = 0.2*(0.0+smoothstep(0.0, 0.1, time)-smoothstep(0.5, 0.6, time));\n    float walk2 = 0.2*(1.0-smoothstep(0.0, 0.1, time)+smoothstep(0.5, 0.6, time));\n    float r = 100.0;\n    \n    float ang = time*PI*2.0;\n    xy.y -= (\n        abs(sin(ang))\n    )*0.05*walk;\n    \n    ang = sin(ang) * 0.05 * bob;\n    vec3 turn = vec3(cos(ang), sin(ang), -sin(ang));\n    xy = vec2(dot(turn.xy, xy), dot(turn.zx, xy));\n    \n    vec2 gazeOffset = vec2(0, 0.9);\n    xy = mix(xy, portalGuyGaze(xy-gazeOffset, gTime)+gazeOffset, max(0.0, xy.y-gazeOffset.y));\n    \n    r = min(r, sphere(xy-vec2(0,1.6), 0.3));\n    r = min(r, ellipsoid(xy-vec2(0.,1.0), vec2(0.35,0.25)));\n    r = min(r, box(xy-vec2(0,0.7),vec2(0.35,0.3)));\n    \n    r = min(r, box(xy-vec2(0.15,0.25+walk*walk1),vec2(0.12,0.25)));\n    r = min(r, box(xy-vec2(-0.15,0.25+walk*walk2),vec2(0.12,0.25)));\n    return r;\n}\n\nfloat world(vec2 xy, float gTime)\n{\n    float r = 100.0;\n    \n    float boredom = 5.0;\n    float restlessness = boredom/3.0;\n    \n    float sequence = gTime / boredom;\n    float pos1 = 1.0 * hash(sequence, 4.0);\n    float pos2 = 1.0 * hash(sequence, 5.0);\n    \n    float offset = restlessness * hash(sequence, 0.0);\n    float time = mod(gTime, boredom) - 0.5*boredom + offset;\n    float duration = abs(pos2 - pos1);\n    \n    duration *= 0.5;\n    vec2 pos = vec2(\n        pos1 + (pos2-pos1) * smoothstep(-0.05-duration, 0.05+duration, time),\n        0\n    );\n    float walk = smoothstep(-0.05, 0.05, time+duration)-smoothstep(-0.05, 0.05, time-duration);\n    float bob = smoothstep(-0.35, 0.15, time+duration)-smoothstep(-0.15, 0.15, time-duration);\n    \n    r = min(r, portalGuy(xy-pos, gTime, walk, bob));\n    \n    r = min(r, xy.y);\n    r = min(r, 2.5-xy.y);\n    return r;\n}\n\n#define TIME_TUNNEL\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord - iResolution.xy / 2.0;\n    float scale = 3.0 / iResolution.y;\n    uv *= scale;\n    \n    float gTime = iTime;\n    \n    vec2 cam = vec2(0, -1.2);\n\tfragColor = white - white * smoothstep(0.5, -0.5, world(uv-cam, gTime)/scale);\n    \n#ifdef TIME_TUNNEL\n    float dtime = mod(iDate.w / 120.0, 2.0);\n    float start = 0.0;\n    if (floor(dtime) == start)\n    {\n        dtime -= start;\n        \n        float fade = pow(smoothstep(0.0, 0.05, dtime) - smoothstep(0.95, 1.0, dtime), 3.0);\n        fade *= smoothstep(0.0, 120.0*0.05, iTime);\n        \n        vec3 depth = vec3(uv, 0);\n        float act = 1.0;\n        for (int i=0 ; i<100 ; i++)\n        {\n            if (world(uv-cam, gTime) < 0.0)\n                break;\n\n            depth.z += 0.5;\n            gTime -= 0.1*fade;\n\n            float ang = sin(iTime*0.1541)*0.2 * fade;\n            vec3 turn = vec3(cos(ang), sin(ang), -sin(ang));\n            ang = cos(iTime * 0.7785) * PI * fade;\n            vec2 offset = vec2(cos(ang), sin(ang)) * fade;\n            uv -= offset;\n            uv = vec2(dot(turn.xy, uv), dot(turn.zx, uv)) / pow(0.9, fade);\n            uv += offset;\n        }\n\n        fragColor = vec4(vec3(log(depth.z)+1.)*0.3, 0.0);\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}