{
    "Shader": {
        "info": {
            "date": "1567091234",
            "description": "split pass signed distance field generator. Output any source in buffer A. In this example the brightness of a video is used as a source. Mouse y controls threshold. D_MAX in the common tab controls the search distance in pixels.",
            "flags": 32,
            "hasliked": 0,
            "id": "ttSXDK",
            "likes": 30,
            "name": "signed distance field generator",
            "published": 3,
            "tags": [
                "distance",
                "field",
                "generator",
                "split",
                "pass"
            ],
            "usePreview": 0,
            "username": "johan2",
            "viewed": 1042
        },
        "renderpass": [
            {
                "code": "//finds distance to closest sign change by iterating over the vertical axis and sampling the horizontal axis. \n//the minimum distance (length(i, dx)) is output.\nfloat sd(vec2 uv)\n{\n\treturn texture(iChannel0, uv).x * D2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ir = 1./ iResolution.xy;\n    vec2 uv = fragCoord * ir;\n\n    //if(uv.x < 0.5){\n    //    fragColor = texture(iChannel1, uv);\n    //}else{\n    \n        float dx = sd(uv);\n        float dMin = abs(dx);\n        float dy = 0.;\n\n        for(int i= 0; i < D_MAX; i++){\n            dy += 1.;\n            vec2 offset =  vec2(0., dy * ir.y);\n\n            float dx1 = sd(uv + offset);\n\n            //sign switch\n            if(dx1 * dx < 0.){\n                dMin = dy;\n                break;\n            }\n\n            dMin = min(dMin, length (vec2(dx1, dy)));\n\n            float dx2 = sd(uv - offset);\n\n             //sign switch\n            if(dx2 * dx < 0.){\n                dMin = dy;\n                break;\n            }\n\n            dMin = min(dMin, length (vec2(dx2, dy)));\n\n            if(dy > dMin)break;\n        }\n\n        dMin *= sign(dx);\n\t\t//float d = dMin/D2;\n    \tfloat d = dMin * 0.004;\n    \n        //iq coloring\n        vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n        col *= 1.0 - exp(-4.0*abs(d));\n        col *= 0.8 + 0.2*cos(140.0*d);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n        fragColor = vec4(col,1);\n   // }\n}\n\n\t",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define D_MAX 255\nconst float D2 = float(D_MAX * 2 + 1);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//output a greyscale image source here \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c = dot(texture(iChannel0, fragCoord.xy/ iResolution.xy).xyz, vec3(0.3, 0.59, 0.11));\n    float threshold = iMouse.w > 0. ? iMouse.y/iResolution.y :  0.5;\n    fragColor = vec4(c - threshold);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//finds distance to closest sign change on the horizontal axis\nfloat source(vec2 uv)\n{\n    return texture(iChannel0, uv).x; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 ir = 1./ iResolution.xy;\n    vec2 uv = fragCoord * ir;\n    \n\tfloat s = sign(source(uv));\n\tfloat d = 0.;\t\n\t for(int i= 0; i < D_MAX; i++){\n         d ++;\n\t\tvec2 offset =  vec2((d) * ir.x, 0.);\n\n\t\tif(s * source(uv + offset) < 0.)break;\n\t\tif(s * source(uv - offset) < 0.)break; \n\t}\n\n\tfloat sd = -s * d / D2;\n    fragColor = vec4(sd);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}