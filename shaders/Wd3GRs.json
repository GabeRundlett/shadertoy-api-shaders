{
    "Shader": {
        "info": {
            "date": "1569073396",
            "description": "A second march inside the sphere finds the distance to internal lights, which I use to light the exterior, plus bonus fake glow that only works perpendicularly.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3GRs",
            "likes": 4,
            "name": "Shine Through",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "glow"
            ],
            "usePreview": 0,
            "username": "caeonosphere",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "#define M_PI 3.14159\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat hash21(vec2 p) {\n\tp = fract(p*vec2(1.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nfloat sphere(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    vec3 rayOrigin = vec3(0, 0, -1.75);\n    vec3 lens = vec3(0, 0, -1);\n    vec3 up = vec3(0, 1, 0);\n    vec3 cameraAngle = normalize(lens - rayOrigin);\n    vec3 right = cross(up, cameraAngle);\n    up = cross(cameraAngle, right);\n    vec3 planePosition = lens + uv.x * right + uv.y * up;\n    vec3 rayDirection = normalize(planePosition - rayOrigin);\n\n    // First march.\n    vec3 perpendicularPoint = rayOrigin + dot(-rayOrigin, rayDirection) * rayDirection;\n    float firstTotal = 0.;\n    for (int i = 0; i < 200; i++) {\n        float distance = sphere(rayOrigin, .8);\n        rayOrigin += rayDirection * distance;\n        firstTotal += distance;\n    }\n    vec3 minPoint = length(rayOrigin) - .8 < .001 ? rayOrigin : perpendicularPoint;\n    // Second march.\n    rayOrigin = minPoint;\n    rayDirection = normalize(-rayOrigin);\n    float secondTotal = 0.;\n    float time = iTime + 60.;\n    for (int i = 0; i < 16; i++) { // few iterations for a bit of blur\n        float distance = -1.;\n        for (float j = 0.; j < 12.; j++) {\n            float innerRadius = .45;\n            float xSpeed = .5 + .5 * hash21(vec2(.2, j * 34.23));\n            float x = innerRadius * cos(time * xSpeed);\n            float ySpeed = .5 + .5 * hash21(vec2(.4, j * 47.22));\n            float y = innerRadius * cos(time * ySpeed);\n            float zSpeed = .5 + .5 * hash21(vec2(.6, j * 21.11));\n            float z = innerRadius * cos(time * zSpeed);\n            vec3 innerSphere = vec3(x, y, z);\n            if (length(innerSphere) > .48) {\n                innerSphere = normalize(innerSphere) * .48;\n            }\n            float innerSphereDistance = sphere(rayOrigin - innerSphere, .1);\n            if (distance == -1.) {\n                distance = innerSphereDistance;\n            } else {\n            \tdistance = smin(distance, innerSphereDistance, .2);\n            }\n        }\n        rayOrigin += rayDirection * distance;\n        secondTotal += distance;\n    }\n    // Calculate lighting.\n    float d = max(2.5 - firstTotal, 0.) * .1f;\n    float firstMin = length(minPoint) - .8;\n    float glow = max(0., 1. - firstMin * 8.) * (1. - secondTotal) * 1.1;\n    glow = max(glow, 0.);\n    fragColor.xyz = vec3(d + glow);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}