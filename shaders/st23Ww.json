{
    "Shader": {
        "info": {
            "date": "1624042902",
            "description": "Clock hands rendered using subpixel antialiasing",
            "flags": 0,
            "hasliked": 0,
            "id": "st23Ww",
            "likes": 1,
            "name": "Clock hands",
            "published": 3,
            "tags": [
                "linesantialiasing"
            ],
            "usePreview": 0,
            "username": "nide",
            "viewed": 337
        },
        "renderpass": [
            {
                "code": "// Copied from https://www.shadertoy.com/view/ltcBzj\n\nfloat distance_to_line (vec2 p, vec2 p1, vec2 p2) {\n    vec2 p_p1 = p - p1;\n    vec2 p2_p1 = p2 - p1;\n    float h = clamp (dot (p_p1, p2_p1) / dot (p2_p1, p2_p1), 0.0, 1.0);\n    float d = length (p_p1 - p2_p1 * h);\n    return d;\n}\n\n\nvec2 circlePtAnimated(float lt) {\n    return vec2(sin(lt*3.1416*2.0), cos(lt*3.1416*2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    \n    float curTimeSeconds = iDate.w;\n    vec4 millisSecsMinsHours = vec4(\n        mod(curTimeSeconds,                      1.0), \n        mod(floor(curTimeSeconds)  /   60.0,     1.0), \n        mod(floor(curTimeSeconds / 60.0) / 60.0, 1.0), \n        mod((curTimeSeconds / 3600.0) / 12.0,    1.0)\n        );\n    vec4 lineLen = vec4(0.1, 0.8, 0.75, 0.6) * 0.5;\n\n    float lineThickness = 1.0;\n    \n    vec2 ptCenter = iResolution.xy/2.0;\n    vec3 color = vec3(0.0);\n    vec3 dbgCol = vec3(0.0);\n    for (int i = 0; i < 4; i++) {\n        if (millisSecsMinsHours[1] > 1.0) {\n            dbgCol.r = 1.0;\n        }\n        \n        vec2 ptEnd = ptCenter + lineLen[i] * circlePtAnimated(millisSecsMinsHours[i]) * iResolution.yy;\n        \n        \n        // rgb-subpixel antialiasing\n        float colCr = lineThickness - distance_to_line (fragCoord - vec2 (1./3., 0.), ptCenter, ptEnd);\n        float colCg = lineThickness - distance_to_line (fragCoord,                    ptCenter, ptEnd);\n        float colCb = lineThickness - distance_to_line (fragCoord + vec2 (1./3., 0.), ptCenter, ptEnd);\n        \n        color += max(vec3(0.0), vec3(colCr, colCg, colCb));\n\n        lineThickness *= 2.;\n    }\n    float distCt = length((ptCenter.xy - fragCoord.xy) / iResolution.yy);\n    float fadeLen = lineThickness / iResolution.y;\n#if 0\n    float circle = smoothstep(0.95-fadeLen*0.5, 0.95, distCt * 2.) * smoothstep(0.95+fadeLen*0.5, 0.95, distCt * 2.);\n    vec4 col = vec4((color+vec3(circle))*vec3(0.9, 0.8, 0.9)*0.1, 1.0);\n#else\n    vec4 col = vec4(color, 1.0);\n#endif\n    fragColor = pow(col,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}