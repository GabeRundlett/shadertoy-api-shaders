{
    "Shader": {
        "info": {
            "date": "1573268788",
            "description": "All possible quadratic equations can be mapped to the surface of a sphere. Blue: complex solutions. Yellow: real solutions with different signs. White: real negative solutions with same sign. See [url]https://www.youtube.com/watch?v=JJYVqviE2Uk[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKSRR",
            "likes": 17,
            "name": "All possible quadratics",
            "published": 3,
            "tags": [
                "3d",
                "sphere",
                "mapping",
                "quadratic",
                "polynomial"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1878
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Something I toyed with a decade ago was mapping all possible\n// quadratic polynomials to the surface of a sphere:\n//\n// https://iquilezles.org/blog/?p=1089\n//\n// See also this video: https://www.youtube.com/watch?v=JJYVqviE2Uk\n//\n// Basically, all possible quadratic equations (parabolas) can be\n// mapped to the surface of a sphere. p(x)=ax²+bx+c becomes a point\n// (a,b,c) in 3D space, and since all quadratics of the form\n// (k·a, k·b, k·c) has the same solutions, all space can be\n// collapsed into a unit sphere through vector normalization.\n//\n// In blue are complex solutions.\n// In yellow are real solutions with different signs\n// In white are real solutions with same signs\n//\n// Similar idea, but for cubic equations:\n// https://www.shadertoy.com/view/tsVSRR\n\n//-------------------------------------------------------\n\n// For a point in the sphere's surface p, return a color based on\n// the solutions of the associate quadratic polynomial\nvec3 getColor( in vec3 p )\n{\n    // rotate the solution space (the sphere mapping)\n    float an = 0.5*iTime;\n    float si = sin(an), co = cos(an);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    \n    vec3 col = vec3(0.0);\n    float m = 11.0;\n    \n    // solve quadratic\n    float h = p.y*p.y - 4.0*p.x*p.z;\n    if( h<0.0 )\n    {\n        // Complex solution. Make it blue\n        col = vec3(0.0,0.5,1.0);\n        //m = -h;\n        float f = sqrt(abs(p.z/p.x));\n        m = 1.0*min(f,1.0/f);\n    }\n    else\n    {\n        // Real solution. Yellow if same sign and white if not\n        float t1 = (-p.y-sqrt(h))*0.5/p.x;\n        float t2 = (-p.y+sqrt(h))*0.5/p.x;\n        col = (t1*t2>0.0) ? vec3(1.0,0.9,0.8) : vec3(1.0,0.5,0.1);        \n        \n        m = 16.0*abs(min(min(abs(    t1),abs(    t2)),\n                         min(abs(1.0/t1),abs(1.0/t2))));\n\t}\n    \n    \n    // shade\n    col *= clamp(log(1.0+m),0.0,1.0);\n\n    col *= clamp(log(1.0+16.0*abs(h)),0.0,1.0);\n    \n    // discriminant isolines\n    col *= 0.7 + 0.3*smoothstep(-0.1,0.1,sin(abs(24.0*h)));\n\n#if 0\n    //if( abs(p.x-p.z)<0.01 ) col = vec3(1,0,0);\n\n    //if( abs(h-2.0)<0.01 ) col = vec3(1,0,0);\n    if( abs(h+2.0)<0.01 ) col = vec3(1,0,0);\n    \n    if( abs(p.x-0.0)<0.01 ) col = vec3(1,0,0);\n    //if( abs(p.y-0.0)<0.01 ) col = vec3(0,1,0);\n    if( abs(p.z-0.0)<0.01 ) col = vec3(0,0,1);\n    \n    if( length(p-vec3( 1, 0, 1)/sqrt(2.0))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3(-1, 0,-1)/sqrt(2.0))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3( 1, 0, 0))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3(-1, 0, 0))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3( 0, 0, 1))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3( 0, 0,-1))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3(1, 2,1)/sqrt(6.0))<0.05 ) col = vec3(0,0,0);\n    if( length(p-vec3(1,-2,1)/sqrt(6.0))<0.05 ) col = vec3(0,0,0);\n    \n    \n#endif\n    \n    return col;\n}\n\n//-------------------------------------------------------\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph, in float k )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    return (b>0.0) ? step(-0.0001,c) : smoothstep( 0.0, 1.0, h*k/b );\n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    return dot(nor,r)*(sph.w*sph.w)/(l*l*l);\n}\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\n//=====================================================\n\nvec3 plot2D( in vec2 px )\n{\n    vec2 p = px/iResolution.xy;\n    \n#if 1\n    p.x -= 0.5;\n    vec2 a = p.yx*vec2(3.141593, 6.283185);\n        \n    vec3 q = vec3( cos(a.x),\n                   sin(a.x)*cos(a.y),\n                   sin(a.x)*sin(a.y) );\n#else\n    p.y = -0.5 + p.y;\n    vec2 a = p*vec2(6.283185,3.141593);\n        \n    vec3 q = vec3( cos(a.y)*cos(a.x),\n        \t\t   sin(a.y),\n                   cos(a.y)*sin(a.x) );\n#endif    \n    \n    //if( length(q-vec3(0,1,0))<0.1 ) return vec3(1,0,0);\n    \n    return getColor(q);    \n}\n\n//=====================================================\n\nvec3 plot3D( in vec2 px )\n{\n    vec2 p = (-iResolution.xy + 2.0*px)/iResolution.y;\n\n    // camera\n    vec3 ro = vec3(0.0, 0.0, 3.0 );\n    vec3 rd = normalize( vec3(p,-2.0) );\n\n    // sphere\n    vec4 sph = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n    vec3 col = vec3(0.0);\n\n    // intersect geometry\n    float tmin = 1e10;\n    vec3 nor;\n    float occ = 1.0;\n    vec3 mate = vec3(1.0);\n\n    // plane/floor\n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + t1*rd;\n        nor = vec3(0.0,1.0,0.0);\n        occ = 1.0-sphOcclusion( pos, nor, sph );\n        mate = vec3(0.2);\n    }\n\n    // sphere\n    float t2 = sphIntersect( ro, rd, sph );\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        vec3 pos = ro + t2*rd;\n        nor = sphNormal( pos, sph );\n        occ = 0.5 + 0.5*nor.y;\n        mate = getColor(nor);\n    }\n\n    // apply color and lighting\n    if( tmin<1000.0 )\n    {\n        vec3 pos = ro + tmin*rd;\n\n        vec3 lig = normalize( vec3(0.6,0.3,0.4) );\n        float sha = sphSoftShadow( pos, lig, sph, 2.0 );\n\n        vec3 lin = vec3(1.5)*clamp(dot(nor,lig),0.0,1.0)*sha;\n        lin += 0.5*occ;\n        lin += 0.5*occ*pow(clamp(1.0+dot(nor,rd),0.0,1.0),3.0);\n\n        col = mate*lin;\n        // fog\n        col *= exp( -0.05*tmin );\n    }\n    return col;\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 p = fragCoord + vec2(float(m),float(n))/float(AA)-0.5;\n        #else    \n        vec2 p = fragCoord;\n        #endif\n \n        // draw stuff\n        vec3 col = (sin(0.7*iTime)<-0.5) ? plot2D(p) : plot3D(p);\n\n        // gamma correction\n        col = pow(col,vec3(0.4545));\n        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    // output color\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}