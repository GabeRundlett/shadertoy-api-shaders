{
    "Shader": {
        "info": {
            "date": "1686277722",
            "description": "A pop art inspired metamorphisis",
            "flags": 0,
            "hasliked": 0,
            "id": "DlyXRd",
            "likes": 5,
            "name": "Metamorphisis",
            "published": 3,
            "tags": [
                "procedural",
                "popart",
                "art",
                "wind",
                "pop",
                "sway",
                "metamorphisis"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "float circle(vec2 p, vec2 t, float r)\n{\n    return distance(p,t)-r;\n}\n\nfloat slice(vec2 p, float h)\n{\n    return p.y - h;\n}\n\nfloat outline(float sdf, float t)\n{\n    return abs(sdf) > t ? 1.0 : 0.1; \n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nvec3 rgb(int hex)\n{\n    return vec3((hex >> 16) & 0xFF, (hex >> 8) & 0xFF, hex & 0xFF) / 255.0;\n}\n\nvec2 repeat(vec2 p, float rep)\n{\n    return mod(p+rep*0.5, rep)-rep*0.5;\n}\n\nvec2 rotate(vec2 p, float t)\n{\n    mat2 rot = mat2(\n        cos(t), -sin(t),\n        sin(t), cos(t));\n        \n    return rot * p;\n}\n\nfloat halftone(vec2 p, float t, float f)\n{\n    p = rotate(p, t);\n    p = repeat(p, 0.025);\n    float sdf = circle(p, vec2(0.0, 0.0), 0.006 * f);\n    return sdf < 0.0 ? 0.5 : 1.0;\n}\n\nvec3 scene(vec2 p)\n{\n    vec3 col = rgb(0xBF40BF) * halftone(p, 0.2, 1.0);\n\n    float sdf = 0.0;\n\n    // Cocoon\n    {\n        vec2 pi = vec2(0.0,0.24);\n        vec2 cp = p;\n        vec2 o=vec2(-0.3,0.06);\n        cp-=o;\n        \n        // Animation\n        cp = rotate(cp-pi, sin(iTime) * 0.1) + pi;\n\n        float s = circle(cp*vec2(4.0,1.0), vec2(0.0,0.16), 0.05);\n\n        float c = circle(cp, vec2(0.0,0.0), 0.2011);\n        c = smin(c, s, 0.1);\n        \n        float h0 = -0.03;\n        float c2 = circle(cp * vec2(1.0,0.5), vec2(-0.011,h0), 0.19);\n        c2 = max(c2, slice(cp, h0+0.05));\n        sdf = smin(c, c2, 0.01);\n        float c3 = circle(cp, vec2(0.05,-0.28), 0.12);\n        sdf=smin(c3, sdf,0.1);\n        if(sdf < 0.0)\n        {\n            float h = circle(rotate(cp,0.8)*vec2(2.0,1.0), vec2(0.27,0.0), 0.05);\n            if(h < 0.0)\n            {\n                col = vec3(1.0,1.0,1.0);\n            }\n            else\n            {\n                col = rgb(0xa4fa7a)\n                    * outline(sdf, 0.011);\n            }\n        \n            \n        }\n    }\n    \n    // Tree\n    {\n        vec2 o = vec2(0.0, 0.03);\n        vec2 tp = p-o;\n        float bc = (circle(tp*vec2(0.5,1.0), vec2(0.2,-1.0), 1.3));\n        float tc = (circle(tp*vec2(0.25,1.0), vec2(0.3,-0.68), 1.3));\n        \n        float sdf = max(tc,-bc);\n        col = mix(col,\n            rgb(0x4c2f73)\n            * outline(sdf, 0.016), sdf < 0.0 ? 1.0 : 0.0);   \n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Supersampling, we want smooth edges\n    vec3 accum = vec3(0.0, 0.0, 0.0);\n    for(int i = 0; i < 4; i++)\n    {\n        vec2 o[4];\n        o[0] = vec2(-0.25 / iResolution.x, -0.25 / iResolution.y);\n        o[1] = vec2( 0.25 / iResolution.x, -0.25 / iResolution.y);\n        o[2] = vec2( 0.25 / iResolution.x,  0.25 / iResolution.y);\n        o[3] = vec2(-0.25 / iResolution.x,  0.25 / iResolution.y);\n    \n        vec2 uv = fragCoord/iResolution.xy + o[i];\n        vec2 p = (uv * 2.0 - 1.0) * vec2(1.0,iResolution.y/iResolution.x);\n        accum += scene(p);\n    }\n    \n    fragColor = vec4(accum / 4.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}