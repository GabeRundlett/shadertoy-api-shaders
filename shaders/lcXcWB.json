{
    "Shader": {
        "info": {
            "date": "1721504155",
            "description": "got sidetracked making a 16-sided shape\n\nmess with #defines on lines 4-9 for funsies",
            "flags": 0,
            "hasliked": 0,
            "id": "lcXcWB",
            "likes": 11,
            "name": "16",
            "published": 3,
            "tags": [
                "yep"
            ],
            "usePreview": 0,
            "username": "ZephyrSnoww",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define sq2 sqrt(2.)\n\n#define show_intersecting false\n#define shape_delay 0.05\n#define shape_offset 0.01\n#define count 100.0\n#define shape_size 0.01\n#define line_size 0.002\n\nbool square(vec2 uv, float size, float width, float rotation) {\n    uv = vec2(\n        (uv.x * cos(rotation)) - (uv.y * sin(rotation)),\n        (uv.x * sin(rotation)) + (uv.y * cos(rotation))\n    );\n\n    return ((distance(uv.x, 0.0) > size &&\n        distance(uv.x, 0.0) < size + width &&\n        distance(uv.y, 0.0) < size + width)\n        ||\n        (distance(uv.y, 0.0) > size &&\n        distance(uv.y, 0.0) < size + width &&\n        distance(uv.x, 0.0) < size + width));\n}\n\nbool in_square(vec2 uv, float square_size, float square_rotation) {\n    uv = vec2(\n        (uv.x * cos(square_rotation)) - (uv.y * sin(square_rotation)),\n        (uv.x * sin(square_rotation)) + (uv.y * cos(square_rotation))\n    );\n\n    return (distance(uv.x, 0.0) < square_size &&\n        distance(uv.y, 0.0) < square_size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // the position of the input pixel\n\n    float aspect_ratio = 1920.0 / 1080.0;\n    uv -= 0.5;\n    uv.x *= aspect_ratio;\n\n    vec3 output_color = vec3(0.0, 0.0, 0.0);\n\n    for (float i = 0.0; i < count; i++) {\n        float square1_rotation = sin((time / 1.888) - (i * shape_delay));\n        float square2_rotation = cos((-time / 3.777) - (i * shape_delay));\n\n        if (\n            square(uv, (shape_size + (i * shape_offset)), line_size, square1_rotation) &&\n            (show_intersecting || !in_square(uv, (shape_size + (i * shape_offset)), square2_rotation))\n        ) {\n            output_color = vec3(1.0);\n        }\n\n        if (\n            square(uv, (shape_size + (i * shape_offset)), line_size, square2_rotation) &&\n            (show_intersecting || !in_square(uv, (shape_size + (i * shape_offset)), square1_rotation))\n        ) {\n            output_color = vec3(1.0);\n        }\n    }\n\n    fragColor = vec4(output_color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}