{
    "Shader": {
        "info": {
            "date": "1501587764",
            "description": "Test porting the Eagle filter to WebGL Shader.\n\nThe filter is here applied twice.\nClick and sweep on the canvas to compare the output with the input given to the filter.",
            "flags": 32,
            "hasliked": 0,
            "id": "XdSBzt",
            "likes": 0,
            "name": "Eagle filter",
            "published": 3,
            "tags": [
                "filter",
                "eagle"
            ],
            "usePreview": 0,
            "username": "Kchplr",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iMouse.w > 0. && iMouse.x > fragCoord.x) {\n        // this is just to allow the visualisation of the input\n        fragColor = texelFetch(iChannel1, ivec2(fragCoord.xy / 4.), 0);\n        return;\n    }\n    \n    ivec2 texPos = ivec2(fragCoord.xy / 2.);\n    int id = int(floor(mod(fragCoord.x, 2.)) + floor(mod(fragCoord.y, 2.)) * 2.); // 0-1 / 2-3\n    \n    vec4 A = texelFetch(iChannel0, texPos + ivec2(-1,-1), 0);\n    vec4 B = texelFetch(iChannel0, texPos + ivec2(0,-1), 0);\n    vec4 C = texelFetch(iChannel0, texPos + ivec2(1,-1), 0);\n    vec4 D = texelFetch(iChannel0, texPos + ivec2(-1,0), 0);\n    vec4 E = texelFetch(iChannel0, texPos, 0);\n    vec4 F = texelFetch(iChannel0, texPos + ivec2(1,0), 0);\n    vec4 G = texelFetch(iChannel0, texPos + ivec2(-1,1), 0);\n    vec4 H = texelFetch(iChannel0, texPos + ivec2(0,1), 0);\n    vec4 I = texelFetch(iChannel0, texPos + ivec2(1,1), 0);\n    \n    // could probably be optimized to only retrieve the sample necessary for the pixel\n    \n    vec4 result;\n    \n    if (id == 0) {\n        result = ( D == A ) && ( A == B ) ? A : E;\n    } else if (id == 1) {\n        result = ( B == C ) && ( C == F ) ? F : E;\n    } else if (id == 2) {\n        result = ( D == G ) && ( G == H ) ? G : E;\n    } else {\n        result = ( H == I ) && ( I == F ) ? I : E;\n    }\n    \n    fragColor = result;\n    \n    if (iMouse.w > 0. && abs(iMouse.x - fragCoord.x) < 2.) {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.,1.,0.33), 0.66);\n        return;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This filter only works on pixellized images, it was specifically implemented to enhance the output of console emulation\n// The original filter code by Derek Liauw Kie Fa is GNU-GPL, so consider this GNU-GPL too, I guess ?\n// This is specifically based on https://github.com/marcoc2/dpixel/blob/master/Filters/EagleFilter.cpp\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // take the input, reduce it to a 4th of the screen size and quantize it to 4 shades of grey\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 4.;\n    vec4 color = uv.x < 1. && uv.y < 1. && uv.y > 0. ? texture(iChannel0, uv) : vec4(0., 0., 0., 1.);\n    color = vec4(vec3(floor(pow((color.r + color.g + color.b + 0.1) / 3., 0.75) * 3.) / 3.), 1.);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 texPos = ivec2(fragCoord.xy / 2.);\n    int id = int(floor(mod(fragCoord.x, 2.)) + floor(mod(fragCoord.y, 2.)) * 2.); // 0-1 / 2-3\n    \n    vec4 A = texelFetch(iChannel0, texPos + ivec2(-1,-1), 0);\n    vec4 B = texelFetch(iChannel0, texPos + ivec2(0,-1), 0);\n    vec4 C = texelFetch(iChannel0, texPos + ivec2(1,-1), 0);\n    vec4 D = texelFetch(iChannel0, texPos + ivec2(-1,0), 0);\n    vec4 E = texelFetch(iChannel0, texPos, 0);\n    vec4 F = texelFetch(iChannel0, texPos + ivec2(1,0), 0);\n    vec4 G = texelFetch(iChannel0, texPos + ivec2(-1,1), 0);\n    vec4 H = texelFetch(iChannel0, texPos + ivec2(0,1), 0);\n    vec4 I = texelFetch(iChannel0, texPos + ivec2(1,1), 0);\n    \n    // could probably be optimized to only retrieve the sample necessary for the pixel\n    \n    vec4 result;\n    \n    if (id == 0) {\n        result = ( D == A ) && ( A == B ) ? A : E;\n    } else if (id == 1) {\n        result = ( B == C ) && ( C == F ) ? F : E;\n    } else if (id == 2) {\n        result = ( D == G ) && ( G == H ) ? G : E;\n    } else {\n        result = ( H == I ) && ( I == F ) ? I : E;\n    }\n    \n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}