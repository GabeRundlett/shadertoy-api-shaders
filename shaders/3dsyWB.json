{
    "Shader": {
        "info": {
            "date": "1585491371",
            "description": "Balloon time (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsyWB",
            "likes": 10,
            "name": "Love Is In The Air",
            "published": 3,
            "tags": [
                "fire",
                "heart",
                "balloon"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "// \"Love Is In The Air\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec3 Hashv3v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nvec3 obDisp, obRnd, sunDir, qHit;\nvec2 cId;\nfloat dstFar, tCur, bGrid, balRad, obRot, flmCylRad, flmCylLen;\nint idObj;\nbool cOcc, balFlm;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvoid ObjState ()\n{\n  float r, s;\n  r = length (cId);\n  obRnd = Hashv3v2 (cId + 17.17);\n  obDisp.xz = bGrid * (cId + 0.5);\n  if (r > 0.) obDisp.xz += Rot2D (vec2 ((0.45 * bGrid - balRad) * (0.2 + 0.8 * obRnd.x), 0.),\n     2. * pi * (0.2 * obRnd.z * tCur + obRnd.x));\n  else obDisp.xz += 0.45 * bGrid - balRad;\n  s = sin (2. * pi * (0.05 * obRnd.y * tCur + obRnd.x));\n  obDisp.y = 12. + 6. * s;\n  obRot = 0.1 * pi * (obRnd.z - 0.5) * tCur;\n  balFlm = (s < 0.);\n  cOcc = (r == 0. || obRnd.x > 0.7);\n}\n\nfloat FlmDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  if (cOcc) {\n    p -= obDisp;\n    q = p - vec3 (0., -0.8 * balRad, 0.);\n    d = PrCylDf (q.xzy, flmCylRad + 0.3 * q.y / flmCylLen, flmCylLen);\n    d = max (d, - q.y - 0.5 * flmCylLen);\n    DMINQ (0);\n  }\n  return dMin;\n}\n\nfloat FlmRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 cIdP, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi.xz = 1. / rd.xz;\n  cIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    d = FlmDf (p);\n    s = (bGrid * (cId + step (0., rd.xz)) - p.xz) * rdi.xz;\n    d = min (d, abs (min (s.x, s.y)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  if (cOcc) {\n    p -= obDisp;\n    p.xz = Rot2D (p.xz, obRot);\n    q = p;\n    d = max (PrSphDf (q, balRad), - PrSphDf (q, 0.98 * balRad));\n    d = max (d, - PrCylDf (q.xzy - vec3 (0., 0., - balRad), 0.3 * balRad, 0.1 * balRad));\n    DMINQ (1);\n    q = p;\n    d = PrCylDf (q.xzy - vec3 (0., 0., -1.42 * balRad), 0.05 * balRad, 0.13 * balRad);\n    d = max (d, - PrCylDf (q.xzy- vec3 (0., 0., 0.02 * balRad), 0.03 * balRad, 0.13 * balRad));\n    DMINQ (2);\n    q = p;\n    d = PrCylDf (q.xzy - vec3 (0., 0., -1.5 * balRad), 0.2 * balRad, 0.07 * balRad);\n    d = max (d, - PrCylDf (q.xzy - vec3 (0., 0., -1.48 * balRad), 0.18 * balRad, 0.07 * balRad));\n    DMINQ (3);\n    q = p;\n    q.xz = abs (q.xz) - 0.25 * balRad;\n    q.y -= -1.15 * balRad;\n    q.yz = Rot2D (q.yz, -0.35);\n    q.xy = Rot2D (q.xy, 0.35);\n    d = PrCylDf (q.xzy, 0.005 * balRad, 0.35 * balRad);\n    DMINQ (4);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 cIdP, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  rdi.xz = 1. / rd.xz;\n  cIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz / bGrid);\n    if (cId != cIdP) {\n      ObjState ();\n      cIdP = cId;\n    }\n    d = ObjDf (p);\n    s = (bGrid * (cId + step (0., rd.xz)) - p.xz) * rdi.xz;\n    d = min (d, abs (min (s.x, s.y)) + eps);\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 FlmCol (vec3 p, vec3 rd)\n{\n  vec3 q, qq;\n  float a, f, dr;\n  a = 0.;\n  p.y -= - flmCylLen;\n  dr = 0.05 / flmCylRad;\n  for (int j = 0; j < 20; j ++) {\n    p += dr * rd;\n    q = 15. * p / flmCylLen;\n    q.y -= 40. * tCur;\n    qq.y = Noisefv3 (q + 0.1 * vec3 (sin (tCur)));\n    qq.x = Noisefv3 (q + vec3 (qq.y));\n    qq.z = Noisefv3 (q + vec3 (qq.x));\n    q = p + 0.25 * (1. - 3. * p.y / flmCylLen) * (qq - 0.5);\n    f = 0.45 * q.y - 2.5 * length (q.xz);\n    f = clamp (sign (f) * f * f, 0., 1.) * (3. - 0.9 * q.y);\n    a += f;\n  }\n  return clamp (a * vec3 (1., 0.5, 0.3), 0., 1.);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, p, c1, c2;\n  float ds, fd, att, attSum, sd;\n  c1 = vec3 (0.3, 0.2, 0.1);\n  c2 = vec3 (0.1, 0.3, 0.);\n  if (rd.y > -0.003 && rd.y < 0.01 + 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = 0.5 * (c1 + c2);\n  } else if (rd.y < 0.) {\n    p = ro - (ro.y / rd.y) * rd;\n    p.xz -= 0.2 * tCur;\n    col = mix (c1, c2, Fbm2 (0.5 * p.xz)) * (1. - 0.1 * Noisefv2 (17. * p.xz));\n    col = mix (col, 0.5 * (c1 + c2), smoothstep (-0.1, 0., rd.y));\n  } else {\n    p = ((200. - ro.y) / rd.y) * rd;\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz = p.xz * fd + 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    for (float j = 0.; j < 4.; j ++) {\n      attSum += Fbm2 (p.xz + (1. + j * ds) * fd * sunDir.xz);\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    col = mix (vec3 (0.5, 0.75, 1.), mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1),\n       0.25 + 0.75 * sd), exp (-2. * (3. - sd) * max (rd.y - 0.1, 0.))) +\n       0.3 * (vec3 (1., 0.8, 0.7) * pow (sd, 1024.) + vec3 (1., 0.4, 0.2) * pow (sd, 256.));\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, colFlm, qHitFlm, u;\n  float dstObj, dstFlm, s, h;\n  bool inSun, inFlm;\n  dstFlm = FlmRay (ro, rd);\n  if (dstFlm >= dstFar) balFlm = false;\n  qHitFlm = qHit;\n  inFlm = balFlm;\n  dstObj = ObjRay (ro, rd);\n  inSun = true;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj != 1) balFlm = false;\n    if (idObj == 1) {\n      h = 0.1 + 0.8 * obRnd.z;\n      u = qHit / (0.3 * balRad);\n      col = mix (HsvToRgb (vec3 (h + 0.5, 0.8, 0.8)), HsvToRgb (vec3 (h, 0.7, 0.8)),\n         smoothstep (0., 0.02, abs (abs (u.y) - 1.7) - 0.07));\n      u.xz = Rot2D (u.xz, pi / 24.);\n      u.xz = Rot2D (u.xz, 2. * pi * (floor (6. * atan (u.x, u.z) / (2. * pi) + 0.5) / 6.));\n      col = mix (vec3 (1., 0., 0.), col, smoothstep (0., 0.01, length (Rot2D (vec2 (abs (u.x) - 0.3, u.y),\n          pi / 6.) * vec2 (2., 1.)) - 1.));\n      if (length (qHit) < 0.99 * balRad) {\n        col *= 0.2;\n        if (balFlm) col += 0.1 * vec3 (1., 0.5, 0.);\n        inSun = false;\n      } else {\n        if (length (qHit) > 0.99 * balRad) vn.xz = Rot2D (vn.xz, 0.1 * pi *\n           sin (pi * (0.5 - mod (24. * (atan (qHit.x, qHit.z) / (2. * pi) + 0.5), 1.))));\n      }\n    } else if (idObj == 2) {\n      vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (12. * (atan (qHit.x, qHit.z) /\n         (2. * pi) + 0.5), 1.))));\n      col = vec3 (0.6);\n    } else if (idObj == 3) {\n      vn.xz = Rot2D (vn.xz, 0.1 * pi * sin (pi * (0.5 - mod (32. * (atan (qHit.x, qHit.z) /\n         (2. * pi) + 0.5), 1.))));\n      col = vec3 (0.6, 0.3, 0.);\n    } else if (idObj == 4) {\n      col = vec3 (0.3);\n    }\n    if (inSun) col = col * (0.3 + 0.3 * max (- dot (vn, normalize (vec3 (sunDir.xz, 0.).xzy)), 0.) +\n       0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.)) +\n       0.05 * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  } else {\n    col = BgCol (ro, rd);\n    balFlm = false;\n  }\n  if (dstFlm < min (dstFar, dstObj)) {\n    if (inFlm) {\n      colFlm = FlmCol (qHitFlm, rd);\n      col = mix (col, colFlm, 0.6 * length (colFlm));\n    }\n  }\n  if (balFlm) {\n    qHit.xz = Rot2D (qHit.xz, - obRot);\n    qHit.y += 0.5 * balRad;\n    col = mix (col, vec3 (1., 0.5, 0.),\n       0.4 * pow (clamp (dot (normalize (qHit), - rd), 0., 1.), 4.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  float el, az, h;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 10.;\n  dstFar = 150.;\n  bGrid = 6.;\n  balRad = 2.;\n  flmCylRad = 0.4;\n  flmCylLen = 2.;\n  h = 12. + 4. * sin (2. * pi * 0.02 * tCur);\n  az = 0.3 * pi + 2. * pi * mod (0.003 * tCur, 1.);\n  el = -0.005 * pi * (h - 12.);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (vec2 (-0.49 * bGrid), h).xzy;\n  rd = vuMat * normalize (vec3 (uv, 4.5));\n  sunDir = normalize (vec3 (1., 0.2, -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec3 Hashv3v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec3 (0., cHashVA2.xy)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xyz)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}