{
    "Shader": {
        "info": {
            "date": "1565721406",
            "description": "Attempt at rose windows. Decided to animate it some :D\nNot sure if I can get rid of the aliasing...",
            "flags": 0,
            "hasliked": 0,
            "id": "WlBXW1",
            "likes": 6,
            "name": "Rose Window",
            "published": 3,
            "tags": [
                "radial",
                "rainbow",
                "rose",
                "window",
                "gothic",
                "stainedglass"
            ],
            "usePreview": 0,
            "username": "QuantumYeti",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "const float Scale = 0.2;\nconst float NumSegments = 12.0;\t// Odd numbers can get clipped... :\"(\nconst float PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062;\n\nfloat Effect1(vec2 coords, float numSegments, float r, float cutoffMax, float cutoffMin, float thickness)\n{\n    float s = abs(sin(r * numSegments * 0.5));\n    float dist = length(coords);\n    \n    if (dist <= cutoffMax && dist >= cutoffMin)\n    {\n        if (s < (dist * (dist * 0.5)) * thickness)\n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n    \n    //return smoothstep(0.12f, 0.08f, abs(s));\n}\n\nfloat Effect2(vec2 coords, float numSegments, float r, float cutoffMax, float cutoffMin, float thickness)\n{\n    float dist = length(coords);\n    float s = abs(sin(r * numSegments * 0.5));\n    \n    if (dist <= cutoffMax && dist >= cutoffMin)\n    {\n        if (s < sin(dist) * thickness) \n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n}\n\nfloat Effect3(vec2 coords, float numSegments, float r, float cutoffMax, float cutoffMin, float thickness)\n{\n    float dist = length(coords);\n    float s = abs(sin(r * numSegments * 0.5));\n    \n    if (dist <= cutoffMax && dist >= cutoffMin)\n    {\n        if (s < tan(tan(dist)) * thickness) \n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n}\n\nfloat Effect4(vec2 coords, float radius, float cutoffMax, float cutoffMin)\n{\n    float dist = length(coords);\n    if (dist <= cutoffMax && dist >= cutoffMin)\n    {\n        if (dist < radius)\n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n}\n\nfloat b2f(int b)\n{\n    return float(b) / 255.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float t = sin(iTime * 0.01);\n    float t2 = sin(iTime * 0.04);\n    float t4 = sin(iTime * 0.08);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectMax = max(iResolution.x, iResolution.y);\n    float aspectMin = min(iResolution.x, iResolution.y);\n    vec2 coords = (uv - 0.5) * vec2(aspectMax / aspectMin, 1.0) / (Scale + sin(t) * 0.2);\n    float r = atan(coords.y, coords.x) + 1.54;\n    vec4 color1 = vec4(0, 0, 0, 1);\n    vec4 color2 = vec4(b2f(247), b2f(2), 0, 1);\n    vec4 color3 = vec4(b2f(250), b2f(150), b2f(2), 1);\n    vec4 color4 = vec4(b2f(252), b2f(227), 0, 1);\n    vec4 color5 = vec4(b2f(185), b2f(246), b2f(5), 1);\n    vec4 color6 = vec4(b2f(1), b2f(223), b2f(2), 1);\n    vec4 color7 = vec4(b2f(0), b2f(216), b2f(255), 1);\n    //vec4 color7 = vec4(b2f(98), b2f(228), b2f(228), 1);\n    vec4 color8 = vec4(b2f(6), b2f(138), b2f(220), 1);\n    vec4 color9 = vec4(0, b2f(24), b2f(209), 1);\n    \n    vec4 final = vec4(b2f(66), b2f(55), b2f(98), 1);\n    \n    //Effect(vec2 coords, float numSegments, float r, float cutoffMax, float cutoffMin, float thickness)\n    vec4 l1 = color1 * Effect1(coords, NumSegments, r + t, 1.825, 0.0, mix(0.1, -0.1, t4));\n    vec4 l2 = color1 * Effect1(coords, NumSegments * 8.0, r - t, 3.4, 2.89, 0.025);\n    vec4 l3 = color1 * Effect3(coords * 4.0, NumSegments, r + t, 8.0, 0.0, mix(0.6, -0.6, t4));\n    vec4 l4 = color1 * Effect3(coords * 4.0, NumSegments * 3.0, r + t * 2.0, 18.0, 8.0, mix(2.8, -2.8, t2));\n    vec4 l5 = color1 * Effect1(coords, NumSegments * 0.5, r - t, 2.1, 1.8, mix(0.1, -0.1, sin(t2)));\n    vec4 l6 = color1 * Effect1(coords, NumSegments * 0.5, r + PI / 8.0 + t, 2.9, 2.1, mix(0.18, -0.18, t2));\n    vec4 c1 = color2 * Effect4(coords, 0.34, 20.0, 0.0);\n    vec4 c2 = color3 * Effect4(coords, 0.445, 20.0, 0.0);\n    vec4 c3 = color4 * Effect4(coords, 1.035, 20.0, 0.0);\n    vec4 c4 = color5 * Effect4(coords, 1.819, 20.0, 0.0);\n    vec4 c5 = color6 * Effect4(coords, 2.105, 20.0, 0.0);\n    vec4 c6 = color7 * Effect4(coords, 2.605, 20.0, 0.0);\n    vec4 c7 = color8 * Effect4(coords, 2.8, 50.0, 0.0);\n    vec4 c8 = color9 * Effect4(coords, 3.44, 20.0, 0.0);\n    vec4 c9 = vec4(0, 0, 0, 1) * (1.0 - Effect4(coords, 3.65, 20.0, 0.0));\n    \n    final = final * (1.0 - c9.a) + c9;\t\t// C9\n    final = final * (1.0 - c8.a) + c8;\t\t// C8\n    final = final * (1.0 - c7.a) + c7;\t\t// C7\n    final = final * (1.0 - c6.a) + c6;\t\t// C6\n    final = final * (1.0 - c5.a) + c5;\t\t// C5\n    final = final * (1.0 - c4.a) + c4;\t\t// C4\n    final = final * (1.0 - c3.a) + c3;\t\t// C3\n    final = final * (1.0 - c2.a) + c2;\t\t// C2\n    final = final * (1.0 - c1.a) + c1;\t\t// C1\n    final = final * (1.0 - l6.a) + l6;\t\t// L6\n    final = final * (1.0 - l5.a) + l5;\t\t// L5\n    final = final * (1.0 - l4.a) + l4;\t\t// L4\n    final = final * (1.0 - l3.a) + l3;\t\t// L3\n    final = final * (1.0 - l2.a) + l2;\t\t// L2\n    final = final * (1.0 - l1.a) + l1;\t\t// L1 (outline)\n    \n    float dist = length(coords);\n    vec4 vignette = vec4(1, 1, 1, 1) * clamp(1.4 - dist * 0.3, 0.0, 1.0);\n    \n    fragColor = final * vignette;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}