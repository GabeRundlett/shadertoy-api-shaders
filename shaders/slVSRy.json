{
    "Shader": {
        "info": {
            "date": "1641051619",
            "description": "Apparent motion illusion; see comments for details.",
            "flags": 0,
            "hasliked": 0,
            "id": "slVSRy",
            "likes": 10,
            "name": "Apparent motion illusion",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "illusion",
                "opticalillusion",
                "motion"
            ],
            "usePreview": 0,
            "username": "sheepmaster",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "// The apparent motion is created by having a foreground object\n// that is cycling through a series of colors\n// (either rainbow colors or black and white)\n// while shifting the phase forward or backwards\n// where the edges are orthogonal to the perceived motion\n// (see https://jake.vision/blog/motion-illusions\n// for a detailed explanation).\n// Using a signed distance function for the object\n// allows us to get the gradient of the SDF\n// and therefore the normal of the edge at the same time\n// (see https://iquilezles.org/articles/distgradfunctions2d),\n// so the phase shift is just the dot product of the negative gradient\n// with the apparent movement vector.\n// The object can be easily changed by picking a different SDF.\n\n// Width of the border area, in pixels.\nconst float BORDER_WIDTH = 1.;\n\n// How far the edges of the object are phase-shifted.\nconst float PHASE_SHIFT_SPEED = 7.;\n\n// Period of the foreground color cycle, in seconds.\nconst float PERIOD = 1.0;\n\n// Whether the colors are cycling through a rainbow\n// or between black and white.\nconst bool RAINBOW_COLORS = false;\n\n// Whether the apparent movement is in a circle\n// or growing / shrinking.\nconst bool CIRCULAR_MOVEMENT = true;\n\n// Period for the circular movement, in seconds.\nconst float CIRCULAR_MOVEMENT_PERIOD = 8.;\n\nconst vec3 BACKGROUND_COLOR = vec3(0.5, 0.5, 1.);\n\nconst float TAU = 8. * atan(1.);\n\nvec3 hue(float h) {\n    return clamp(abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n}\n\n// Returns a vector consisting of the signed distance function\n// of the desired object (an annulus, or ring) in the first component,\n// and the gradient of the SDF in the second and third component.\nvec3 sdgAnnulus(in vec2 p, in float r, in float w) {\n    float l = length(p);\n    return vec3(abs(l - r) - w * 0.5, sign(l - r) * p / l);\n}\n\nvec3 foregroundColor(float phase) {\n    if (RAINBOW_COLORS) {\n        return hue(phase);\n    } else {\n        return vec3((cos(phase * TAU) + 1.) * .5);\n    }\n}\n\nvec2 movement(vec2 p) {\n    if (CIRCULAR_MOVEMENT) {\n        float theta = fract(iTime / CIRCULAR_MOVEMENT_PERIOD) * TAU;\n        return vec2(sin(theta), cos(theta));\n    } else {\n        return p / length(p);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy * vec2(0.5, 1.);\n    float scale = 2. / min(res.x, res.y);\n\tvec2 p = (mod(fragCoord, res) - res * 0.5) * scale;\n    float tileSign = sign(fragCoord.x / res.x - 1.);\n\n\tvec3 sdg = sdgAnnulus(p, 0.5, 0.2);\n    \n    float phase = fract(iTime / PERIOD);\n    float maxPhaseShift = BORDER_WIDTH / (PHASE_SHIFT_SPEED * PERIOD);\n    float phaseShift = dot(movement(p), -sdg.yz) * maxPhaseShift * tileSign;\n    \n    vec3 col = foregroundColor(\n        mix(phase, phase + phaseShift, smoothstep(-BORDER_WIDTH * scale, 0., sdg.x))\n    );\n    col = mix(col, BACKGROUND_COLOR, smoothstep(0., scale, sdg.x));\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}