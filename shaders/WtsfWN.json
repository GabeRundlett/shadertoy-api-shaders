{
    "Shader": {
        "info": {
            "date": "1596767707",
            "description": "Based on : https://www.shadertoy.com/view/XtyGzh\nAnd iq's version: https://www.shadertoy.com/view/XtyGR1",
            "flags": 0,
            "hasliked": 0,
            "id": "WtsfWN",
            "likes": 15,
            "name": "Tree wallpaper",
            "published": 3,
            "tags": [
                "tree"
            ],
            "usePreview": 0,
            "username": "D3lphes",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "// Based on : https://www.shadertoy.com/view/XtyGzh\n// And iq's version: https://www.shadertoy.com/view/XtyGR1\n\n#define kDepth 7\n#define kBranches 3\n#define kMaxDepth 2187 // branches ^ depth\n\n//--------------------------------------------------------------------------\n\nmat3 matRotate( float angle ) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3( c, s, 0, -s, c, 0, 0, 0, 1);\n}\n\nmat3 matTranslate( float x, float y ) {\n    return mat3( 1, 0, 0, 0, 1, 0, -x, -y, 1 );\n}\n\nfloat sdBranch( vec2 p, float w1, float w2, float l ) {\n    float h = clamp( p.y/l, 0.0, 1.0 );\n\tfloat d = length( p - vec2(0.0,l*h) );\n    return d - mix( w1, w2, h );\n}\n\n//--------------------------------------------------------------------------\n\nfloat map( vec2 pos ) {\n    const float len = 6.2;\n    const float wid = 0.25;\n    float lenf = 0.55;\n    const float widf = 0.4;\n    float wind = iTime * 0.5;\n    \n    float d = sdBranch( pos, wid, wid*widf, len );\n    \n    int c = 0;\n    for( int count=0; count < kMaxDepth; count++ ) {\n        int off = kMaxDepth;\n    \tvec2 pt_n = pos;\n        \n        float l = len;\n        float w = wid;\n        \n      \tfor( int i=1; i<=kDepth; i++ ) {\n            l *= lenf;\n            w *= widf;\n\n            off /= kBranches; \n            int dec = c / off;\n        \tint path = dec - kBranches*(dec/kBranches); //  dec % kBranches\n          \n            mat3 mx;\n            \n            // Originals (references)\n\t    \t\n            //if( path == 0 ) {\n\t\t  \t//\tmx = matRotate(0.75 + 0.25*sin(wind-1.0)) * matTranslate( 0.0,0.4*l/lenf);\n\t    \t//} else if( path == 1 ) {\n          \t//\tmx = matRotate(-0.6 + 0.21*sin(wind)) * matTranslate(0.0,0.6*l/lenf);\n\t    \t//} else {\n          \t//\tmx = matRotate(0.23*sin(wind+1.)) * matTranslate(0.0,1.0*l/lenf);\n\t    \t//}\n            \n            float t = sin(iTime) - 0.1;\n            if( path == 0 ) {\n\t\t  \t\tmx = matRotate(0.75 + 0.15*t*sin(wind-1.0)) * matTranslate( 0.0,0.4*l/lenf);\n\t    \t} else if( path == 1 ) {\n          \t\tmx = matRotate(-0.6 + 0.11*t*sin(wind)) * matTranslate(0.0,0.6*l/lenf);\n\t    \t} else {\n          \t\tmx = matRotate(0.13*t*sin(wind+1.)) * matTranslate(0.0,1.0*l/lenf);\n\t    \t}\n            pt_n = (mx * vec3(pt_n,1)).xy;\n\n        \t// bounding sphere test\n            float y = length( pt_n - vec2(0.0, l) );\n       \t\tif( y-1.4*l > 0.0 ) { c += off-1; break; }\n            \n            d = min( d, sdBranch( pt_n, w, w*widf, l ) );\n     \t}\n        \n    \tc++;\n    \tif( c > kMaxDepth ) break;\n\t}\n    \n   \treturn d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // coordinate system\n    vec2  tree_uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    float px = 2.0 / iResolution.y;\n\n    // frame in screen\n    tree_uv = tree_uv * 25.0 + vec2(0.0,6.5);\n    px = px * 4.0;\n   \n    // compute\n    float d = map( tree_uv );\n    \n    vec2 ground_uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec2 ground_right_top = step(vec2(0.94, 1.265),1.0-ground_uv);\n    vec2 ground_left_bottom = step(vec2(-0.06, -0.272),ground_uv);\n    float ground = ground_left_bottom.x * ground_left_bottom.y * ground_right_top.x * ground_right_top.y;\n    d *= 1. - ground;\n    \n  \tfloat fuzziness = 9.0;\n    \n    // shape\n    vec3 col = vec3( smoothstep( 0.0, fuzziness * px, d ) );\n    \n    col = vec3(mix(1., 0.15, col.r));\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}