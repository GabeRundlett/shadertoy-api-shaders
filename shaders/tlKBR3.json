{
    "Shader": {
        "info": {
            "date": "1614793172",
            "description": "A quick Binary Clock i tossed together.\n\nBased on the tile render i'm using in my WIP game MollySpace:\nhttps://twitter.com/RedDashGames/status/1364181112994598913\n\nWould love to know what you think of this and my game. :3",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKBR3",
            "likes": 19,
            "name": "Binary Blend Clock.",
            "published": 3,
            "tags": [
                "binary",
                "clock",
                "distance",
                "tiles",
                "minimalistic"
            ],
            "usePreview": 0,
            "username": "foxic",
            "viewed": 791
        },
        "renderpass": [
            {
                "code": "float opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sdRoundedBox( in vec2 p, in float b, in float r ) {\n    vec2 q = abs(p)-b+r;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r;\n}\n\nfloat LED( in vec2 POS, in vec2 UV, in float time, in float size ){\n    \n    \n    //TIME\n    float mils  = fract(time);\n    float blend = sin(mod(  time,         1.0 )*1.57075);\n    \n    float secs1 = mod( (time),            60.0 );\n    float secs2 = mod( (time+1.),         60.0 );\n    \n\tfloat mins1 = mod( (time)   /60.0,    60.0 );\n\tfloat mins2 = mod( (time+1.)/60.0,    60.0 );\n    \n\tfloat hors1 = mod( (time)   /3600.0,  24.0 );\n\tfloat hors2 = mod( (time+1.)/3600.0,  24.0 );\n    \n    // draw LED\n    float d = 0.;\n    if        (POS.x == 2.){\n        d =      float( (int(secs2) >> int(POS.y)) &1 );\n        d = mix( float( (int(secs1) >> int(POS.y)) &1 ), d, blend );\n        \n    } else if (POS.x == 1.){\n        d =      float( (int(mins2) >> int(POS.y)) &1 );\n        d = mix( float( (int(mins1) >> int(POS.y)) &1 ), d, blend );\n        \n    } else if (POS.x == 0.){\n        d =      float( (int(hors2) >> int(POS.y)) &1 );\n        d = mix( float( (int(hors1) >> int(POS.y)) &1 ), d, blend );\n    }\n\n    // Output to screen\n    //d = (length(UV-0.5)) + (1.-d);// for round dots\n    //d = (length(UV-0.5)) + (1.-d);// for square dots\n    d = sdRoundedBox(UV-0.5, size, size-0.2) + (1.-d);\n    return d;\n}\n\nfloat LED_tiled( in vec2 UV, in float time ){\n    vec2 char_pos = vec2( floor(UV.x*5.), floor(UV.y*5.) );\n    vec2 char_uv  = vec2( mod(UV.x*5., 1.), mod(UV.y*5., 1.) );\n    \n    float fgr = 1.;\n    float bgr = 1.;\n    \n    for( int x=-1; x < 2; x++ ){\n        for( int y=-1; y < 2; y++ ){\n            vec2 offset = vec2(x,y);\n            fgr = opSmoothUnion( fgr, LED( char_pos+offset, char_uv-(offset), time, 0.1 ), 0.35 );\n            bgr = opSmoothUnion( bgr, LED( char_pos+offset, char_uv-(offset), time, 0.3 ), 0.35 );\n        }\n    }\n    \n    return 1.-max(1.-fgr, bgr);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    fragCoord *=2.;\n    fragCoord.x -= (iResolution.x);\n    vec2 uv = (fragCoord)/iResolution.y;\n    uv.x += 0.3333;\n    uv.y -= 0.3333;\n    \n    \n    float time  = iDate.w;\n    \n    float fg = LED_tiled( uv, time );\n    fg = smoothstep( 0.5, 0.55, fg );\n    \n    float bg = LED_tiled( uv+vec2(0.,0.05), time );\n    bg = smoothstep( 0.2, 0.85, bg )*0.5;\n    \n    \n    \n    vec3 col_bg = mix( vec3(1.,1.,1.), vec3(0.5,0.,0.), bg);\n    \n    vec3 col_fg = mix( col_bg, vec3(1.,0.,0.), fg);\n    \n    fragColor = vec4( mix( col_bg, col_fg, 0.5), 1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}