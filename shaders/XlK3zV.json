{
    "Shader": {
        "info": {
            "date": "1475588507",
            "description": "some simple halftoning experiment\nuse mouse to adjust granularity (y) and brighness (x).\nnumber of different line angles can be set by changing AngNum in code.\n...and maybe use your webcam instead of britney ;)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XlK3zV",
            "likes": 26,
            "name": "halftone lines",
            "published": 3,
            "tags": [
                "lines",
                "effect",
                "halftone"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 1328
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// halftone experiment\n\n#define Res  iResolution.xy\n#define Res0 iChannelResolution[0].xy\n#define Res1 iChannelResolution[1].xy\n\n#define PI 3.14159265358979\n\n#define AngNum 6\n//#define AngNum 2   /* only horizontal and vertical */\n//#define AngNum 4   /* horizontal, vertical, and 2 x diagonal */\n\nvec4 getCol(vec2 pos)\n{\n    vec2 uv=pos/Res0;\n    vec4 e=smoothstep(vec4(-0.05),vec4(-0.0),vec4(uv,vec2(1)-uv));\n    float mask=e.x*e.y*e.z*e.w;\n    return texture(iChannel0,uv)*mask;\n}\n\nvec4 getRand(vec2 pos)\n{\n    return texture(iChannel1,pos/Res1/iResolution.y*1080.);\n}\n\nfloat htPattern(vec2 pos)\n{\n    float p;\n    float s = .5+2.*iMouse.x/iResolution.x;\n    if (iMouse.x==0.) s=2.5;\n    float b=dot(getCol(pos).xyz*s,vec3(.333));\n    float b0=b;\n    b=floor(b*float(AngNum));\n    p=1.;\n    float d=1.-.5+iMouse.y/iResolution.y;\n    if (iMouse.y==0.) d=1.;\n    for(int i=0;i<AngNum;i++)\n    {\n        if(float(AngNum-i-1)<b) break;\n        float ang=-(float(i)+.0)/float(AngNum)*PI;\n        vec2 dir = vec2(cos(ang),sin(ang));\n        \n        float s=sin(dot(dir,pos+getRand(pos).xy*0.)*d/(1080./iResolution.y));\n        p-=.7*exp(-s*s*10.);\n        d*=1.2;\n    }\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos=((fragCoord-Res.xy*.5)/Res.y*Res0.y)+Res0.xy*.5;\n\tfragColor = vec4(htPattern(pos));\n\t//fragColor.xy = iChannelResolution[0].xy+vec2(.3);\n\t//fragColor = vec4(getCol(pos));\n\t//fragColor = texture(iChannel0,fragCoord/iResolution.xy)+vec4(0.3,0,0,1);\n\t//fragColor = vec4(0.3,0,0,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}