{
    "Shader": {
        "info": {
            "date": "1575219653",
            "description": "Diamond Plate derived from 2d.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsVXW3",
            "likes": 10,
            "name": "Disco Floor",
            "published": 3,
            "tags": [
                "normals"
            ],
            "usePreview": 0,
            "username": "andremichelle",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "float Hash(vec2 P) {\n\treturn fract(cos(dot(P,vec2(91.52,-74.27)))*939.24);\n}\n\nfloat Value(vec2 P) {\n\tvec2 F = floor(P);\n\tvec2 S = P-F;\n\tvec4 M = (S*S*(3.-S-S)).xyxy;\n    M = M*vec4(-1,-1,1,1)+vec4(1,1,0,0);\n\treturn (Hash(F+vec2(0,0))*M.x+Hash(F+vec2(1,0))*M.z)*M.y+\n\t\t   (Hash(F+vec2(0,1))*M.x+Hash(F+vec2(1,1))*M.z)*M.w;\n}\n\nfloat Noise(vec2 P) {\n\treturn \n        .6*Value(P*8.)+\n        .4*Value(P*16.)+\n        .3*Value(P*32.)+\n        .2*Value(P*64.);\n}\n\nfloat mat(vec2 uv, vec2 offset) {\n\treturn Noise(uv*vec2(6., 20.)+offset);\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) {\n    vec2 q = abs(p);\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat sdCircle( vec2 p, float r ) {\n  return length(p) - r;\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdDiamond(vec2 p) {\n    return opSmoothUnion(sdRhombus(p, vec2(.2, 1.)), sdCircle(p, .2), .1);\n}\n\nvec4 over( in vec4 a, in vec4 b ) {\n    return mix(a, b, 1.-a.w);\n}\n\nmat2 rot(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvec4 diamonds(vec2 uv, float angle) {\n    vec2 p = vec2(uv);\n    mat2 r = rot(angle);\n    p = fract(p)*2.-1.;\n    p *= r;\n    float d = sdDiamond(p);\n    float a = smoothstep(.01, .0, d);\n    float zp = smoothstep(.0, .1, -d);\n    float zh = smoothstep(.0, .1, -sdDiamond(p+vec2(.01, .0)));\n    float zv = smoothstep(.0, .1, -sdDiamond(p+vec2(.0, .01)));\n\treturn zp+zh+zv==0. \n        ? vec4(0,0,0,a)\n        : vec4(normalize( vec3(zp-zh, zp-zv, zp)), a);\t\n}\n\nvec3 light(vec3 lp, vec3 lc, vec3 n, vec2 uv) {\n    vec3 ld = vec3(lp.xy-uv, lp.z-n.z);\n    float l = length(ld);\n    return lc*pow(max(.0, dot(n, ld/l)), 4.)/l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y*2.;\n    \n    float n0 = mat(uv, vec2(.0));\n    float n1 = mat(uv, vec2(.001, .000));\n    float n2 = mat(uv, vec2(.000, .001));\n    \n    vec4 c = vec4(.0);\n\tvec4 d0 = diamonds(uv*3.+.0,  .78539);\n\tvec4 d1 = diamonds(uv*3.+.5, -.78539);\n\tfloat a = max(d0.w, d1.w);\n    vec3 n = (d0.xyz + d1.xyz)*a + vec3(n0-n1, n0-n2, n0)*.6*(1.-a*.6);\n    float t = iTime;\n    mat2 m0 = rot( t*1.4+.4)*sin(t*.4+.2);\n    mat2 m1 = rot(-t*1.4+.7)*sin(t*.6+.5);\n    mat2 m2 = rot( t*1.4+.9)*cos(t*.8+.9);\n\n    // light colors\n    vec3 l0c = vec3(1., .3, 1.);\n    vec3 l1c = vec3(.1, .3, 1.);\n    vec3 l2c = vec3(.1, 1., 1.);\n    // light positions\n    vec3 l0v = vec3(vec2(.99, 0.)* m0, 1.5);\n    vec3 l1v = vec3(vec2(.70, 0.)* m1, 1.5);\n    vec3 l2v = vec3(vec2(.00, 1.)* m2, 1.5);\n    // light intensity\n    float li0 = pow(distance(uv, l0v.xy), -1.4);\n    float li1 = pow(distance(uv, l1v.xy), -1.4);\n    float li2 = pow(distance(uv, l2v.xy), -1.4);\n\n    vec3 rc = vec3(.05+n0*n0*n0*n0*.1);\n    rc += pow(max(.0, n.z), 2.)*.12;\n    rc += light(l0v, l0c, n, uv);\n    rc += light(l1v, l1c, n, uv);\n    rc += light(l2v, l2c, n, uv);\n    c = over(vec4(rc, 1.), c);\n    \n    // light dots\n    c.rgb += l0c*li0*.004+li0*n0*.008;\n    c.rgb += l1c*li1*.004+li1*n0*.008;\n    c.rgb += l2c*li2*.004+li2*n0*.008;\n\n    fragColor = c;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}