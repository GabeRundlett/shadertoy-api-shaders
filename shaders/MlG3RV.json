{
    "Shader": {
        "info": {
            "date": "1475512053",
            "description": "Sierpiński triangle animation. Press space to reset.",
            "flags": 48,
            "hasliked": 0,
            "id": "MlG3RV",
            "likes": 2,
            "name": "Sierpiński triangle animation",
            "published": 3,
            "tags": [
                "2d",
                "sierpinski",
                "backbuffer",
                "sierpiski"
            ],
            "usePreview": 0,
            "username": "piotrekli",
            "viewed": 786
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define LERP(A,B,T) ((A)+((B)-(A))*(1.0-(T)))\n\n// function from http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\nfloat segmentDistance(vec2 v, vec2 w, vec2 p)\n{\n    float l2 = dot(w-v, w-v);\n    if (l2 == 0.0) return distance(p, v);\n    float t = max(0.0, min(1.0, dot(p-v, w-v)/l2));\n    vec2 projection = v + t*(w-v);\n    return distance(p, projection);\n}\n\nvec3 vertex(vec2 p, vec3 vxys)\n{\n   //if (dot(p-vxy, p-vxy)<0.00001) return vec3(1.0);\n   vec2 pos = LERP(p, vxys.xy, vxys.z);\n   if (pos.x < 0.0 || pos.y < 0.0 || pos.x > 1.0 || pos.y > 1.0) return vec3(0.0);\n   return texture(iChannel1, pos).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (texture(iChannel3, vec2(0.126953125, 0.5)).x > 0.5) {fragColor = vec4(0.0); return;}\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 oldCol = clamp(texture(iChannel0, uv).xyz, 0.0, 1.0);\n    vec3 newCol = vec3(0.0);\n    const vec3 v1 = vec3(0.1, 0.1, 2.0), v2 = vec3(0.9, 0.1, 2.0), v3 = vec3(0.5, 0.9, 2.0);\n    newCol += vertex(uv, v1)*vec3(1.5,0.5,0.5);\n    newCol += vertex(uv, v2)*vec3(0.5,1.5,0.5);\n    newCol += vertex(uv, v3)*vec3(0.5,0.5,1.5);\n    float md = 4.0/length(iResolution.xy);\n    if (segmentDistance(v1.xy, v2.xy, uv) < md) newCol = vec3(1.0);\n    if (segmentDistance(v2.xy, v3.xy, uv) < md) newCol = vec3(1.0);\n    if (segmentDistance(v3.xy, v1.xy, uv) < md) newCol = vec3(1.0);\n    fragColor = vec4(mix(newCol*2.0, oldCol, 0.99), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}