{
    "Shader": {
        "info": {
            "date": "1666086473",
            "description": "audio reactive fluid simulacre.\nyou may have to clic on pause/play on iChannel1 audio input in Buffer A for the music to start playing",
            "flags": 32,
            "hasliked": 0,
            "id": "msl3W8",
            "likes": 42,
            "name": "FFT (Fire For Techno)",
            "published": 3,
            "tags": [
                "fft",
                "fire",
                "fluid",
                "smoke"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1247
        },
        "renderpass": [
            {
                "code": "\n// FFT (Fire For Techno)\n// audio reactive fluid simulacre\n//\n// variation of \"Fire Fighter Fever\" https://shadertoy.com/view/msf3WH\n//\n// inspired by recent fft simulation by Etienne Jacob\n// https://twitter.com/etiennejcb/status/1581307953511964672\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n                                 \n    // grayscale\n    vec4 data = texture(iChannel0, uv);\n    \n    // Inigo Quilez iquilezles.org/www/articles/palettes/palettes.htm\n    vec3 color = .5+.5*cos(vec3(1,2,3)*5.5 + data.r*5.-4.*uv.y);\n    \n    // normal\n    float rng = hash13(vec3(fragCoord, iFrame));\n    vec3 unit = vec3(vec2(.05*rng), 0.);\n    vec3 normal = normalize(vec3(T(uv-unit.xz)-T(uv+unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 unit.y));\n    \n    // light\n    float light = dot(normal, N(vec3(0,4,1)))*.5+.5;\n    color += light;\n    \n    // shadow\n    color *= data.r;\n\n    fragColor = vec4(color, 1);\n    \n    // debug art\n    if (iMouse.z > 0. && iMouse.x/R.x < .2)\n    {\n        if (uv.x > .66) fragColor = vec4(normal*.5+.5, 1);\n        else if (uv.x > .33) fragColor = vec4(vec3(sin(data.r*6.28*2.)*.5+.5), 1);\n        else fragColor = vec4(data.yz*.5+.5,.5, 1);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define R iResolution.xy\n#define ss(a,b,t) smoothstep(a,b,t)\n#define N normalize\n#define T(uv) texture(iChannel0, uv).r\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// Martijn Steinrucken youtube.com/watch?v=b0AayhCO7s8\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n/////////// spicy noise\nfloat fbm (vec3 seed)\n{\n    // thebookofshaders.com/13\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 4; ++i)\n    {\n        // distort\n        seed += result / 2.;\n        \n        // animate\n        seed.y -= .1*iTime/a;\n        \n        // accumulate\n        result += gyroid(seed/a)*a;\n        \n        // granule\n        a /= 3.;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    /////////// coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-R)/R.y;\n    \n    // salt\n    float rng = hash13(vec3(fragCoord, iFrame));\n    \n    // music\n    float fft = texture(iChannel1, vec2(abs(uv.x-.5)*2., 0.0)).r;\n    fft = min(.7, fft * 2.);\n    fft += .1;\n    \n    // noise\n    vec3 seed = vec3(p, length(p) + iTime) * 2.;\n    float noise = fbm(seed);\n    float a = noise * 3.14;\n    \n    // normal\n    vec3 unit = vec3(vec2(rng*.005), 0.);\n    vec3 normal = normalize(vec3(T(uv-unit.xz)-T(uv+unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 unit.y));\n                                 \n    // mask\n    vec2 mask = vec2(1.-abs(uv.x-.5), uv.y);\n    \n    // mouse\n    vec2 mouse = iMouse.xy/R;\n    float clic = step(0., iMouse.z);\n    \n    \n    ////////// shape\n    float shape = 1.;\n    \n    // bottom line\n    shape *= ss(.01,.0,abs(uv.y));\n    \n    // salt\n    shape *= rng;\n    \n    // frequency\n    shape *= fft;\n    \n    \n    ////////// forces field\n    vec2 offset = vec2(0);\n            \n    // turbulence                     \n    offset -= vec2(cos(a),sin(a)) * fbm(seed+.195) * (1.-mask.y);\n\n    // slope\n    offset -= normal.xy * mask.y;\n    \n    // mouse\n    vec2 velocity = vec2(0);\n    p -= (2.*iMouse.xy-R)/R.y;\n    float mouseArea = ss(.3,.0,length(p)-.1);\n    offset -= clic * normalize(p) * mouseArea * 0.2;\n    velocity += (texture(iChannel0, vec2(0)).yz - mouse);\n    if (length(velocity) > .001) velocity = clic * normalize(velocity) * mouseArea;\n    \n    // inertia\n    velocity = clamp(texture(iChannel0, uv+velocity*.05).yz * .99 + velocity * .5,-1.,1.);\n    \n    // gravity\n    offset -= vec2(0,1) * (1.-mask.y);\n    \n    // inertia\n    offset += velocity;\n    \n    // apply\n    uv += .05 * offset * fft;\n    \n    \n    \n    ////////// frame buffer\n    vec4 frame = texture(iChannel0, uv);\n    \n    // fade out\n    float fade = iTimeDelta*(1.-fft)*.5;\n    shape = max(shape, frame.r - fade);\n    \n    // result\n    shape = clamp(shape, 0., 1.);\n    fragColor = vec4(shape, velocity, 1);\n    \n    // previous mouse\n    if (fragCoord.x < 1. && fragCoord.y < 1.) fragColor = vec4(0,mouse,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}