{
    "Shader": {
        "info": {
            "date": "1611009530",
            "description": "Debug visuals",
            "flags": 0,
            "hasliked": 0,
            "id": "wtKGz3",
            "likes": 0,
            "name": "Debug Visuals",
            "published": 3,
            "tags": [
                "fu"
            ],
            "usePreview": 0,
            "username": "blurryroots",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define MouseV (iMouse.y / iResolution.y)\n#define MouseU (iMouse.x / iResolution.x)\n\n\n//Inspired by https://www.shadertoy.com/view/4ljfRD\nfloat drawLine (vec2 p1, vec2 p2, vec2 uv, float a)\n{\n    float r = 0.;\n    float one_px = 1. / iResolution.x; //not really one px\n    \n    // get dist between points\n    float d = distance(p1, p2);\n    \n    // get dist between current pixel and p1\n    float duv = distance(p1, uv);\n\n    //if point is on line, according to dist, it should match current uv \n    r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n        \n    return r;\n}\n\nfloat drawCircle(vec2 uv, vec2 p, float r)\n{\n    return distance(uv, p) - r;\n}\n\nvec2 rightVector(vec2 a, vec2 b)\n{\n    vec2 aa = a;\n    vec2 ba = b;\n    \n    vec2 diff = ba - aa;\n    vec2 right = vec2(diff.y, -diff.x);\n    \n    return vec2(right.x, right.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = vec3(0);\n    vec2 aspect = vec2(1., iResolution.y / iResolution.x);\n    \n    vec2 a = vec2(MouseU, MouseV);\n    vec2 b = vec2(0.5,0.8);    \n    if(distance(uv*aspect, a*aspect) < 0.01) color+=vec3(1);\n    if(distance(uv*aspect, b*aspect) < 0.01) color+=vec3(1);\n\tcolor += vec3(drawLine(a, b, uv, 5.), 0, 0);\n    \n    \n    vec2 diff = b - a; \n    vec2 right = rightVector(a * iResolution.xy, b * iResolution.xy)/iResolution.xy;    \n    \n    vec2 rightPoint = (a + right);\n\tcolor += vec3(0, 0, drawLine(a, rightPoint, uv, 5.)); \n    \n    if(distance(uv*aspect, (a+right)*aspect) < 0.01) color+=vec3(1,1,0);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}