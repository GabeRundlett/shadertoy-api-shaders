{
    "Shader": {
        "info": {
            "date": "1606954168",
            "description": "More fun with buffers.",
            "flags": 32,
            "hasliked": 0,
            "id": "wsVfDz",
            "likes": 6,
            "name": "Bouncy Particles!",
            "published": 3,
            "tags": [
                "2d",
                "particles",
                "physics",
                "bouncy"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for (int p=0; p < PARTICLES; p++) {\n        vec2 particlePos = getParticlePos(p);\n        fragColor += smoothstep(unit, 0.0, length(uv - particlePos) - PARTICLE_RADIUS);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define getParticlePos(id) texelFetch(iChannel0, ivec2(id, 0), 0).xy\n#define getParticleVel(id) texelFetch(iChannel0, ivec2(id, 1), 0).xy\n\n#define PARTICLES 200\n#define PARTICLE_RADIUS 0.01\n\n#define GRAVITY 0.001\n#define DECAY 0.95\n\n// Hash from \"Rainier mood\" by Zavie (https://www.shadertoy.com/view/ldfyzl).\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Using hash12() for making a \"random\" 2D vector.\nvec2 randomPos(in float x) {\n    return vec2(hash12(vec2(x)), hash12(vec2(x + 0.1031))) - 0.5;\n}\n\nvec2 randomVel(in float x) {\n    vec2 hash = randomPos(hash12(vec2(x, 1.0) + 0.2) - 0.2);\n    return normalize(hash) * 0.0025 * (hash - 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 topRight = vec2(0.5 * (iResolution.x / iResolution.y), 0.5);\n    int row = int(fragCoord.y);\n    if (row == 0) {\n        fragColor = vec4(randomPos(fragCoord.x), 0.0, 1.0);\n    }\n\n    if (row == 1) {\n        fragColor = vec4(randomVel(fragCoord.x), 0.0, 1.0);\n    }\n\n    if (iFrame > 0) {\n        int particleID = int(fragCoord.x);\n        vec2 particlePos = getParticlePos(particleID);\n        vec2 particleVel = getParticleVel(particleID);\n\n        if (abs(topRight.x - abs(particlePos.x)) < PARTICLE_RADIUS) {\n            particleVel.x *= -1.0;\n            particleVel *= DECAY;\n        }\n\n        if (abs(topRight.y - abs(particlePos.y)) < PARTICLE_RADIUS) {\n            particleVel.y *= -1.0;\n            particleVel *= DECAY;\n        }\n\n        particleVel.y -= GRAVITY;\n\n        particlePos += particleVel;\n        particlePos.y = max(PARTICLE_RADIUS - 0.5, particlePos.y);\n        if (row == 0) {\n            fragColor = vec4(particlePos, 0.0, 1.0);\n        }\n\n        if (row == 1) {\n            fragColor = vec4(particleVel, 0.0, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}