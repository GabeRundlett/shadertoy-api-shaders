{
    "Shader": {
        "info": {
            "date": "1694604575",
            "description": "Radar",
            "flags": 0,
            "hasliked": 0,
            "id": "clBfWt",
            "likes": 0,
            "name": "Radar Circle",
            "published": 3,
            "tags": [
                "radar"
            ],
            "usePreview": 0,
            "username": "MaxShaders",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n\nfloat distToSegment( vec2 ps1, vec2 ps2, vec2 point)\n{\n    vec2 pa = point - ps1;\n    vec2 ba = ps2 - ps1;\n\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = fragCoord.xy;\n    vec2 midpoint = iResolution.xy / 2.0;\n    vec3 col = vec3(0);\n    const vec3 green = vec3(0.0, 1.0, 0.0);\n    const vec3 blue = vec3(0.35,0.76,0.83);\n    float lineThickness = 1.0;\n    float rayLen = sqrt(pow(iResolution.x, 2.0) + pow(iResolution.y, 2.0));\n    float radius = min(iResolution.x, iResolution.y) * 0.45;\n    \n    const float period = 5.0;\n    float angle = 0.0;\n    float rotPercent = mod(-iTime, period) / period;\n    angle = 2.0 * PI * rotPercent;\n    vec2 rayDir = vec2(cos(angle), sin(angle));\n    vec2 rayPerp = vec2(-sin(angle), cos(angle));\n    vec2 pixelDir = normalize(pixel - midpoint);\n    \n    //Trail\n    if(dot(rayDir, pixelDir) > 0.0 && dot(pixelDir, rayPerp) > 0.0)\n    {\n        col = green * pow(dot(rayDir, pixelDir), 1.0) * 0.4;\n        \n    }\n    \n    //Ray\n    float distToRay = distToSegment(midpoint, midpoint + rayDir * rayLen, pixel);\n    if(distToRay <= lineThickness)\n    {\n        col = green * (lineThickness / distToRay) ;//- 3.0 * ( distance(pixel, midpoint) / radius);\n    }\n    \n    //Circle\n    if(true)\n    {\n        float distToCircle = abs(distance(midpoint, pixel) - radius);\n        if(distToCircle <= lineThickness * 2.0)\n        {\n            col += green * (1.0 - (distToCircle / (lineThickness * 2.0)));\n        }\n    \n        if(distance(midpoint, pixel) > radius + 2.)\n        {\n            col = vec3(0.0);\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}