{
    "Shader": {
        "info": {
            "date": "1542436787",
            "description": "Attempt to improve distance estimation for ellipse by considering 2nd derivative\nThis is not an exact distance, but seems slightly better than the versions that only use 1st derivative",
            "flags": 0,
            "hasliked": 0,
            "id": "MlVBD1",
            "likes": 2,
            "name": "Ellipse 2nd Derivative Estimate",
            "published": 3,
            "tags": [
                "2d",
                "distance",
                "derivative",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "Dain",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "//Dain\n//Attempt to improve distance estimation for ellipse by considering 2nd derivative\n//This is not an exact distance, but seems slightly better than the versions that only use 1st derivative \n\n//The inside looks weird, but that is also true of the 1st derivative estimate\n\n//This paper:  http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.62.4283&rep=rep1&type=pdf\n//Talks about higher order distance estimates, so I gave it a try-- not 100% sure if this is correct though..\n//The paper has formula:  (abs(F)/df(N))^(1/N) with N being the degree of the derivative\n\n//#define SHOW_1ST  //enable to see 1st deriv instead of 2nd\nfloat Ellipse_2nd_Deriv_length(vec2 p, float a, float b){\n    float x = p.x;\n    float y = p.y;\n    \n    float d = a*a*y*y + b*b*x*x;\n    float denom = sqrt(d)*d;\n    \n    float dx = (y*y*a*b)/(denom);\n    float dy = (x*x*a*b)/(denom);\n    return  length(vec2(dx,dy));\n}\n\nfloat Ellipse_1st_Deriv_length(vec2 p, float a, float b){\n    float x = p.x;\n    float y = p.y;\n    float denom = sqrt(y*y/(b*b) + x*x/(a*a));\n    float dx = (x)/(a*a*denom);\n    float dy = (y) /(b*b*denom); \n    \n    return length(vec2(dx,dy));\n}\n\n//Uses 2nd deriv to improve estimate, not optimized\nfloat sdEllipse_2nd( vec2 p, in vec2 ab )\n{\n    vec2 abSqr = ab*ab;\n   \n\tfloat e =  sqrt(p.x*p.x/(abSqr.x) + p.y*p.y/(abSqr.y)) - 1.0; //ellipse distance which is very wrong\n    \n    float dr1 = Ellipse_1st_Deriv_length(p, ab.x, ab.y);\t//length of 1st deriv\n    float dr2 = Ellipse_2nd_Deriv_length(p, ab.x,ab.y);\t\t//length of 2nd deriv\n\n#if 0\n    //Halley's method(looks very bad)\n    float r =   2.0 * e*dr1/(2.0*dr1*dr1 - e*dr2);\n    r = abs(r);\n#else\n    float dist0 = abs(e)*max(abSqr.x, abSqr.y);\t\t//overestimate for base\n    float dist1 = abs(e)/dr1;\t\t\t\t\t\t//distance estimate using 1st deriv(same as IQ result)\n    float dist2 = pow(abs(e)/(dr2), 1.0/2.0); \t\t//distance estimate using 2nd deriv\n\n    float r = min(dist1,dist2);\n    r = min(r,dist0);//optional, doesn't do much\n #endif\n    return r* sign(e); \n}\n\n//IQ's version that uses 1st deritive to improve estimate\nfloat sdEllipse_1st( in vec2 p, in vec2 r ) // approx distance\n{\n    \n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n//Rest of code is by IQ\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n\t\n    vec2 s = vec2(0.3,0.3)*m + vec2(1.0,0.5)*0.5;\n    #ifdef SHOW_1ST\n    \tfloat d = sdEllipse_1st( uv,  s);\n    #else\n    \tfloat d = sdEllipse_2nd( uv,  s);\n    #endif\n\n\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4( col, 1.0 );;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}