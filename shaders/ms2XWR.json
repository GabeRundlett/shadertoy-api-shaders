{
    "Shader": {
        "info": {
            "date": "1670172307",
            "description": "Accidentally made this while working on a tic-tac-toe shader. Click to move camera :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ms2XWR",
            "likes": 25,
            "name": "Neon Scaffolding",
            "published": 3,
            "tags": [
                "noise",
                "sdf",
                "line",
                "cellular",
                "pattern",
                "cell",
                "pathfinding",
                "path",
                "neon",
                "scaffold",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 879
        },
        "renderpass": [
            {
                "code": "const float scale = 32.0;\nconst float lineWidth = 0.1;\n\n// Posterized noise\nfloat noise(vec2 p, float levels) {\n    return floor(fract(sin(dot(floor(p), vec2(1.989, 2.233))) * 43758.54) * levels) / levels;\n}\n\n// From https://www.shadertoy.com/view/3tdSDj, shortened by FabriceNeyret2\nfloat line(vec2 p, vec2 dir) {\n    return length(p - dir * max(0.0, dot(p, dir) / dot(dir, dir)));\n}\n\n// Modified from https://www.shadertoy.com/view/lsS3Wc\nvec3 hue2rgb(float hue) {\n    return clamp(abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 pos = (iMouse.z > 0.0 ? fragCoord - iMouse.xy : fragCoord + iTime * 60.0) / scale;\n    \n    // Number of color subdivisions, ideally a whole number\n    float colors = 3.0 + cos(iTime * 0.2);\n    \n    // Add nice rainbow colors\n    float self = noise(pos, colors);\n    vec3 bg = hue2rgb(self);\n    float bgMix = 1.0;\n    \n    // 3 x 3 kernel, checks all 8 neighbors\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n        \n            // Ignore self\n            if (x == 0 && y == 0) continue;\n            vec2 offset = vec2(x, y);\n            \n            // Check neighbor has matching color\n            if (self == noise(pos + offset, colors)) {\n                // Draw a line from the center to the neighbor\n                float dist = line(fract(pos) - 0.5, offset);\n                bgMix = min(bgMix, dist / lineWidth);\n            }\n        }\n    }\n    \n    // Combine background and lines, clip a little\n    fragColor = vec4(mix(0.8 + bg, bg * 0.2, bgMix), 1.0 - bgMix * 0.2);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}