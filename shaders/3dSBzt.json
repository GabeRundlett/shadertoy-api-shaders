{
    "Shader": {
        "info": {
            "date": "1590761895",
            "description": "An animated texture-mapped two-tiled Truchet arrangement, rendered in a faux 3D style.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dSBzt",
            "likes": 41,
            "name": "Animated Textured Truchet",
            "published": 3,
            "tags": [
                "texture",
                "abstract",
                "animation",
                "truchet",
                "mapping",
                "art"
            ],
            "usePreview": 1,
            "username": "Shane",
            "viewed": 1006
        },
        "renderpass": [
            {
                "code": "/*\n\n    Animated Textured Truchet\n    -------------------------\n\n\tHere's that animated texture-mapped two-tiled Truchet code that literally\n    no one asked for. :D Yeah, I don't imagine it'd be something many would \n\trequest, but there'd be some things contained within that I believe a few \n    people would find useful, so here it is.\n\n\tI've texture mapped and animated Truchet tiles and Wang tiles before, but \n    have never texture mapped this particular dual tile arrangement. A quick \n    look on the internet would suggest that little to no one else has either.\n\t\n    Actually, animating this wasn't as bad as I thought it'd be, but it did\n\trequire some logic and finesse. For the mapping part, you use the standard \n    texure mapping for the overlapping rectangular tles, and polar coordinates \n    for the arc tiles, then flip and rotate the texture coordinates where \n    necessary -- Rotate a tile, rotate coordinates, etc. For anyone who's \n    comfortable coding up repeat patterns, it shouldn't be too much of a \n    stretch.\n\n\tHowever, a few simple observations should help: Animating square grid \n    Truchet arc tiles on their own requires the flow directions to be reversed \n    on alternate checkered tiles. Furthermore, in order to work straight line \n    tiles in with them, both horizontal and vertical lines must span two grid \n    cells. In addition, adjacent horizontal line rows must flow in opposite \n    directions. The same applies to adjacent vertical line columns.\n\n\tAnyway, I have a raymarched extruded version coming up, so this was just a\n\tpractice run. By the way, I have a much simpler version of this that I'll \n\tput up soon, for anyone who just wants the pattern animation portion.\n\n\n\tOther examples:\n\n\t// Animation without the complication of texture mapping.\n\tAnimated Two-Tiled Truchet - Shane\n    https://www.shadertoy.com/view/tsSfWK\n\n\n*/\n\n\n// A jagged edge option: Aesthetically, it's interesting, but a little too busy\n// for me, but it's here as an option to show that it can be done.\n//#define JAGGED_EDGES\n\n// Displays each separate grid cell, which allows you to more easily discern\n// individual tiles.\n//#define SHOW_GRID\n\n// Serrated beveling.\n//#define SERRATED_EDGES\n\n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){  \n   \n    return fract(sin(dot(p, vec2(27.619, 57.583)))*43758.5453); \n}\n \n\n// vec2 to vec2 hash.\nvec2 hash22(vec2 p){ \n    \n    // Faster, but doesn't disperse things quite as nicely. However, when framerate\n    // is an issue, and it often is, this is a good one to use. Basically, it's a tweaked \n    // amalgamation I put together, based on a couple of other random algorithms I've \n    // seen around... so use it with caution, because I make a tonne of mistakes. :)\n    float n = sin(dot(p, vec2(27, 57)));\n    //return fract(vec2(262144, 32768)*n)*2. - 1.; \n    \n    // Animated.\n    p = fract(vec2(262144, 32768)*n);\n    return sin(p*6.2831853 + iTime*2.); \n    \n}\n\n// Based on IQ's gradient noise formula.\nfloat n2D3G( in vec2 p ){\n   \n    vec2 i = floor(p); p -= i;\n    \n    vec4 v;\n    v.x = dot(hash22(i), p);\n    v.y = dot(hash22(i + vec2(1, 0)), p - vec2(1, 0));\n    v.z = dot(hash22(i + vec2(0, 1)), p - vec2(0, 1));\n    v.w = dot(hash22(i + 1.), p - 1.);\n\n#if 0\n    // Quintic interpolation.\n    p = p*p*p*(p*(p*6. - 15.) + 10.);\n#else\n    // Cubic interpolation.\n    p = p*p*(3. - 2.*p);\n#endif\n\n    return mix(mix(v.x, v.y, p.x), mix(v.z, v.w, p.x), p.y);\n}\n\n\n/*\nfloat sBoxS(in vec2 p, in vec2 b, in float rf){\n  \n  vec2 d = abs(p) - b + rf;\n  return min(max(d.x, d.y), 0.) + length(max(d, 0.)) - rf;\n    \n}\n*/\n\n// IQ's vec2 to float hash.\nfloat hash21M(vec2 p, float scale){  \n    p.y = mod(p.y, scale); // Wrapping around the Truchet.\n    return fract(sin(dot(p, vec2(27.619, 57.583)))*43758.5453); \n}\n\n// A basic dot pattern, which returns the offset dot \n// value and its ID.\nvec3 dfDots(vec2 p, float scale){\n    \n    p *= scale;\n    vec2 oP = p;\n    \n    // Repeating along Y, which runs along the Truchet.\n    // The 2D hash function also needs to wrap with it.\n    vec2 ip = floor(p);\n    p -= ip + .5;\n    \n    // Row offsetting. It's hacky, but it works.\n    if(mod(ip.x, 2.)<.5){\n        \n        p = oP - vec2(0, .5);\n        ip = floor(p);\n        p -= ip + .5;\n    }\n    \n    \n    // Random size.\n    float rnd = hash21M(ip, scale);\n    // Random XY offset.\n    vec2 rndP = (vec2(rnd, hash21M(ip + .37, scale)) - .5)*.2;\n    \n    // Circular distance field.\n    float d = length(p - rndP) - .15 - rnd*.225;\n    \n    // Return the distance and ID.\n    return vec3(d, ip);\n}\n\n\n\n\n\n// Texture coordinates for each Truchet segment. Remember that there are\n// two segments per tile. Either two quarter arcs or overlaying lines.\n// Technically, the arcs overlay also, which I did for style purposes.\nvec2 tuv[2];\n\n// A hacky shadow container, which I threw in as an afterthough, because\n// I decided that I wanted fake shadows at the last minute. :)\nvec2 gShadow;\nconst vec2 gShOff = vec2(.07, -.07);\n\n\n// The Truchet distance field. A lot of this is standard stuff. The additional\n// code here involved texture mapping. That was just a case of \nvec2 df(vec2 p){\n    \n    \n    // Two by two cell random value.\n    vec2 ip2 = floor(p/2.);\n    float rnd2 = hash21(ip2 + .43);  \n    \n    // Cell ID and local coordinates.\n    vec2 ip = floor(p);\n    p -= ip + .5;\n    \n    // Random 1x1 numbers, for flipping and rotating.\n    float rnd = hash21(ip);\n    float rnd3 = hash21(ip + .57);\n    \n    // The distance field container. Each cell contains either two lines\n    // or two arcs, so this will hold each one.\n    vec2 d = vec2(1e5);\n    \n    // Shadow offset coordinate.\n    vec2 pShOff = p - gShOff;\n    \n    \n    // UV radial coordinate for each arc... and just to confuse matters, I'm \n    // using radius and angles to represent the UV straight line tiles also... \n    // Yes, that's bad name coding -- No Google apprentiship for me. :D\n    vec2 rad;\n    \n    // The angle is either the angle of the Truchet arcs, which have been \n    // normalized to the zero to one range, or the value of the straight line \n    // position on the straight edge tile arrangement, which also ranges from \n    // zero to one.\n    vec2 ang;\n  \n    \n    // When animating arc Truchet arrangements only, the trick is to \n    // reverse the animation flow on alternate checkered cells... \n    // I have a basic animated version on here somewhere, if you\n    // require more information.\n    //\n    // Anyway, working in the extra overlapping straight line tiles \n    // complicates things. However, after a while, you'll realise that \n    // either the horizontal or vertical line must span two cells for \n    // the animation to work, so that's what the following two-by-two \n    // checkered \"mod\" decision is all about.\n    //\n    // Every 2 by 2 alternate checker, put in the overlapped straight \n    // tiles. Otherwise, calculate the distance field for the double \n    // arc one.\n    //\n    if(mod(ip2.x + ip2.y, 2.)<.5){ // Alternate checkers.\n    //if(rnd2<.5){ // Random 2x2 coverings.\n    //if((mod(ip2.x, 2.)<.5 || mod(ip2.y, 2.)<.5) && rnd2<.5){ // Mixing.\n        \n        \n        \n        // Overlapping straight tile.\n\n        // Set the UV coordinates prior to folding the center over\n        // to form a vertical or horizontal line.\n        rad = p*vec2(-1, 1);\n\t\tang = p.yx; // I can't remember why I reversed these. :)\n        \n        // Horizontal and vertical line distance fields.\n        d = abs(p);\n        gShadow = abs(pShOff);\n        \n\n        // Reversing just the X-directions on every second column. It's \n        // common sense... but it still took me a while to figure out.. :)\n        if(mod(ip.x + 1., 2.)<.5){\n            ang.x *= -1.;\n            rad.x *= -1.;\n\n        }\n        \n        // Reversing just the Y-directions on every second row.\n        if(mod(ip.y + 1., 2.)>.5){\n            ang.y *= -1.;\n            rad.y *= -1.;\n        }  \n\n\n        // Randomly change the rendering order, which means\n        // switching everything else. I always forget this, then spend\n        // ages trying to figure out why things aren't working. :)\n        if(rnd3<.5) {\n            d = d.yx;\n            ang = ang.yx;\n            gShadow = gShadow.yx;\n            rad = rad.yx;\n        }\n\n        // This makes things line up.\n        ang += .5;\n        //ang *= 3.;\n\n    }\n    else {\n        \n        \n        // Double arc tile.\n        \n        // Randomly rotate.\n        if(rnd<.5) {\n        \tp = p.yx*vec2(1, -1);\n            pShOff = pShOff.yx*vec2(1, -1);\n    \t}\n        \n        // Individual arc distances. One in each corner.\n        d.x = length(p - .5) - .5;\n    \td.y = length(p + .5) - .5;\n        \n        // Shadows: Same as above, but with the offset coordinates.\n        gShadow.x = length(pShOff - .5) - .5;\n        gShadow.y = length(pShOff + .5) - .5;\n        \n        // The angles of the pixels subtended to the circle centers of each \n        // arc. Standard polar coordinate stuff... In a hurry, I threw some\n        // negative signs in and everything lined up, but you could rework \n        // everything to work without them.\n        ang.x = -atan(p.y - .5, p.x - .5);\n        ang.y = -atan(p.y + .5, p.x + .5);\n        \n        // Arcs have the distance field form: arc = abs(circle) - arcWidth/2.\n        // However, this folds things across the center, which you don't want\n        // for your UV coordinates, so set \"uv\" to the unfolded distance.\n        // This is one of the many things I've learned the hard way. :)\n        rad = d;\n        \n        // Turn the quarter circles into arcs. Do the same with the \n        // offset shadow distance field.\n        d = abs(d);\n        gShadow = abs(gShadow);\n        \n        // This comes up all the time when animating square Truchets.\n        // It's necessary to reverse the animation flow on alternate\n        // checker squares.\n        if(mod(ip.x + ip.y, 2.)<.5){\n            ang *= -1.;\n            rad *= -1.;\n        }\n        \n        // Reverse the flow on all randomly rotated tiles.\n        if(rnd<.5){\n            ang *= -1.;\n            rad *= -1.;\n        } \n        \n        // Randomly change the rendering order, which means\n        // switching everything else. I always forget this, then spend\n        // ages trying to figure out why things aren't working. :)\n        if(rnd3<.5) {\n             d = d.yx;\n             ang = ang.yx;\n             \n             gShadow = gShadow.yx;\n             \n             rad = rad.yx;\n         }\n        \n        // Normalizing the angle. Four arcs make up a circle, which\n        // means each needs to run from zero to one four times over\n        // for the texture to wrap... I'm pretty sure that's right...\n        // but I've been wrong before. :)\n        ang *= 4./6.2831853;\n        \n        //ang *= 2.;\n        \n        \n        \n    }\n    \n    // Adding some time-based movement... or animation, if you wish to \n    // call it that. :D By the way, if you take out the time component,\n    // I think the \"fract\" call still needs to be there.\n    ang = fract(ang + iTime/4.);\n\n    // UV coordinates. One set for each cell object.\n    tuv[0] = vec2(rad.x, ang.x);\n    tuv[1] = vec2(rad.y, ang.y);\n    \n    \n    return d;\n    \n}\n\n\n// The square grid boundaries.\nfloat gridField(vec2 p){\n    \n    vec2 ip = floor(p);\n    p -= ip + .5;\n    \n    p = abs(p);\n    \n    return abs(max(p.x, p.y) - .5) - .03;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    \n\n    // Aspect correct screen coordinates.\n    float iRes = min(iResolution.y, 800.);\n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iRes;\n    \n    // Subtle barrel distortion.\n    float r = dot(uv, uv);\n    uv *= 1. + .025*(r*r*.5 + r);\n    \n    // Scaling and translation.\n    const float gSc = 6.;\n    // Depending on perspective; Moving the oject toward the bottom left, \n    // or the camera in the north east (top right) direction. \n    vec2 p = uv*gSc - vec2(-1, -.25)*iTime/4.;\n    \n    // Smoothing factor, based on scale.\n    float sf = 2./iResolution.y*gSc;\n   \n    // Line scale, and line width... This relates back to a simpler example \n    // I made. I wouldn't pay it too much attention.\n    float lSc = 7.; \n    float lw = 1./lSc/gSc;\n    \n    // Calling the Truchet pattern distance field and giving it a bit of width.\n    // The width relates back to another example, but you could hard code figures\n    // in, if you wanted.\n    vec2 d = df(p) - 2.5/lSc;\n    \n    // Giving the shadow the same width.  You could add more to represent more \n    // depth, but it's not that important.\n    gShadow = gShadow - 2.5/lSc;\n    \n    // Setting the background to the texture.\n    vec3 bgTex = texture(iChannel0, p/gSc + .5).xyz; bgTex *= bgTex;\n    bgTex = smoothstep(.05, .5, bgTex); // Ramping up the color a bit.\n\tvec3 col = bgTex;\n    \n    // Applying some horizontal lines to give an industrial look, or something.\n    float pat = abs(fract(p.y*lSc*2. + .5)  - .5) - lw*lSc;\n    col = mix(col, vec3(0), 1. - smoothstep(0., sf, pat));\n   \n  \n\n    // Rendering the two Truchet layers. A lot of this was made up as I\n    // went along, so you could ignore the details.\n    //\n    for(int i = 0; i<2; i++){\n         \n        // The distance field value for the layer. I've bumped it up by a\n        // small portion for some reason. It looks untidy, but I'll leave\n        // it there, just in case. :)\n        float di = d[i] - lw/4.;\n\n        \n        // Using the Truchet texture coordinates to apply some texture color to \n        // the Truchet object. I'm using the trusty metallic texture, but the\n        // wood and blue noise textures look all right as well.        \n        vec3 tx = texture(iChannel0, tuv[i]).xyz; tx *= tx;\n        tx = smoothstep(.05, .5, tx);\n        vec3 tx2 = max(1. - tx.zyx, 0.);\n        \n     \n        // Putting a repeat random dot pattern onto the Truchet. I tried some \n        // fancier patterns, but went with something simple in the end.\n        vec3 tr3 = dfDots(tuv[i] + vec2(.0, 0), 4.); // The \"4\" is a wrap scale.\n        float tr = tr3.x;\n        float rnd = hash21M(tr3.yz + .67, 4.);\n        \n        float ns = n2D3G(p/gSc*1.5)*.66 + n2D3G(p/gSc*3.)*.34;\n        rnd = mix(rnd, 1. - rnd, smoothstep(-.125, .125, ns));\n        \n        \n        //rnd = smoothstep(.5, .85, rnd);\n        vec3 dotCol = .5 + .5*cos(rnd*6.2831 + vec3(2, 1, 0));\n        dotCol = mix(tx*3., dotCol, .9);\n        \n        \n        // Applying the dots to the texture object. I'm not sure why I took this\n        // route. You could apply the pattern directly to the Truchet object below,\n        // if you wanted... I'm sure I had my reasons. :)\n        tx = mix(tx, vec3(0), 1. - smoothstep(0., sf, tr - .1));\n        tx = mix(tx, dotCol*1.5, 1. - smoothstep(0., sf, tr + .05));\n         \n    \n        // Applying the shadows. Because there's two layers, you have to apply \n        // them in a different way. Combine the two shadows for the first (ground)\n        // layer, then apply the top shadow to the bottom object layer... Confused?\n        // That makes both of us. :D It's one of the reasons I find it easier to\n        // to render things in 3D.\n        //\n        // By the way, you could arrange for this to be outside the loop, but I \n        // think it's more readable here.\n        float diSh = i == 0? min(gShadow[0], gShadow[1]) : max(gShadow[1], d[0]);\n\n        // Jagged edge option... Not sure what I was thinking with this modification,\n        // but I've left it here as an option, just in case I decide to rework it. :)\n        #ifdef JAGGED_EDGES\n        float diO = max(di, -tr/4.);\n        diSh = max(diSh, -dfDots((tuv[i] - gShOff), 4.).x/4.);\n        #else\n        float diO = di;\n        #endif\n        \n        \n        // Self shadowing. Analogous to ambient occlusion, but not really. :)\n        // You could almost use just this and save yourself the hassle of rendering\n        // fake shadow layers, but the shadows are offset in the direction of the\n        // light which provides more of an air of authenticity.\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., diO))*.5);\n         \n        // Render the shadow layer. See the \"diSh\" comments above.  \n        col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., diSh))*.5);\n        \n        // Rendering the stroke layer... The black edge. \n        col = mix(col, vec3(0), 1. - smoothstep(0., sf, diO));\n        \n        float sh = max(.35 - di/lw/6., 0.);\n        tx2 *= sh;\n        \n        \n        \n        \n        // Outer Truchet layer.\n        float gap = 1. + lw;\n        col = mix(col, tx2, 1. - smoothstep(0., sf, diO + lw*2.));\n        \n        #ifdef SERRATED_EDGES\n        // Side decorations.\n        float lnd = (abs(fract(tuv[i].y*12. - .5) - .5) - lw/3.)/12.;\n        lnd = max(lnd, di);\n        col = mix(col, vec3(0), (1. - smoothstep(0., sf, lnd))*.85);\n        #endif\n\n        col = mix(col, vec3(0), 1. - smoothstep(0., sf, di + gap/lSc));\n        col = mix(col, tx, 1. - smoothstep(0., sf, di + gap/lSc + lw*1.5));\n\n        // Inner Truchet layer.\n        gap = .9;\n        di = max(di, -tr*4.);\n        col = mix(col, vec3(0), 1. - smoothstep(0., sf, di + 2.*gap/lSc));\n        col = mix(col, tx*sh, 1. - smoothstep(0., sf, di + 2.*gap/lSc + lw*1.5));\n        \n        #ifndef SERRATED_EDGES\n        // Another kind of side bevel.\n        col = mix(col, tx, (1. - smoothstep(0., sf, abs(di + gap/lSc*.9/2. + lw*1.5) - lw/3.))*.75);\n        #endif\n\n    }\n  \n    // Displaying the grid cells.\n    #ifdef SHOW_GRID\n    float grid = gridField(p);\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf*4., grid))*.5);\n    col = mix(col, vec3(0), (1. - smoothstep(0., sf, grid)));\n    col = mix(col, 1.25 - bgTex.zyx, (1. - smoothstep(0., sf, grid  + .03)));\n\t#endif\n    \n    // Toning things down.\n    //col = 1. - exp(-col*1.5);\n    \n     // Subtle vignette.\n    uv = fragCoord/iResolution.xy;\n    float vig = pow(16.*(1. - uv.x)*(1. - uv.y)*uv.x*uv.y, 1./6.);\n    col *= min(vig*1.25, 1.);\n    \n    // Output to screen\n    fragColor = vec4(sqrt(max(col, 0.)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}