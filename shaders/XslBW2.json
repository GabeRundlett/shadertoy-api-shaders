{
    "Shader": {
        "info": {
            "date": "1498166644",
            "description": "Endless vines",
            "flags": 0,
            "hasliked": 0,
            "id": "XslBW2",
            "likes": 17,
            "name": "Vinescape",
            "published": 3,
            "tags": [
                "raymarching",
                "helix",
                "vine",
                "botany"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 785
        },
        "renderpass": [
            {
                "code": "// \"Vinescape\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Endless vines - leon's \"Strangler Fig\" is too good an idea to pass up\n\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat dstFar;\nint idObj;\nconst float pi = 3.14159;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (4. * sin (0.08 * t) + 1.5 * sin (0.11 * t),\n     2. * sin (0.09 * t) + 0.4 * sin (0.13 * t), t);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 ip;\n  float dMin, hRad, hp, br, tw, d, r, s, a;\n  dMin = dstFar;\n  p.xy -= TrackPath (p.z).xy;\n  ip = floor (p.xz / 10. + 0.5);\n  p.xz = p.xz - ip * 10.;\n  r = Hashfv2 (vec2 (53., 71.) * ip);\n  p.xz = Rot2D (p.xz, 2. * pi * r);\n  hRad = 1.5 - 0.015 * p.y - 0.1 * sin (0.5 * pi * p.y);\n  hp = 20. + 2. * r;\n  a = 2. * pi * p.y / hp;\n  p.xz = Rot2D (p.xz, sign (r - 0.5) * (a + 0.1 * r * sin (5. * a)));\n  p.x -= 0.5 + 0.1 * r;\n  tw = 1.;\n  for (int k = 0; k < 8; k ++) {\n    tw = - tw;\n    s = float (k + 1) / 8.;\n    hp = tw * (16. - 10. * s) + r - 0.5;\n    br = 0.17 - 0.1 * s + 0.01 * (r - 0.5);\n    q = p;\n    q.y -= (0.7 * r + 1.3 * s) * hp;\n    a = 2. * pi * q.y / hp;\n    q.xz = Rot2D (q.xz, sign (r - 0.5) * a + (0.03 * r + 0.3 * s) * sin (3. * a));\n    q.x -= hRad + br;\n    dMin = SmoothMin (dMin, length (q.xz) - br, 0.2);\n  }\n  idObj = 1;\n  d = length (p.xz) - hRad;\n  if (d < dMin + 0.01) idObj = 2;\n  dMin = SmoothMin (dMin, d, 0.05);\n  dMin = max (dMin, abs (p.y) - dstFar);\n  return 0.5 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) / 16.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return 0.5 + 0.5 * clamp (1. - 0.2 * ao, 0., 1.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.05;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, bgCol, q;\n  vec2 ip;\n  int idObjT;\n  float dHit, vDotL, sh, ao, r, a;\n  bgCol = vec3 (0.2, 0.2, 0.3);\n  dHit = ObjRay (ro, rd);\n  if (dHit < dstFar) {\n    ro += rd * dHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    ao = ObjAO (ro, ltDir);\n    if (idObjT == 1) col = vec3 (0.5, 0.7, 0.3);\n    else {\n      q = ro;\n      q.xy -= TrackPath (q.z).xy;\n      ip = floor (q.xz / 10. + 0.5);\n      q.xz = q.xz - ip * 10.;\n      r = Hashfv2 (vec2 (23., 31.) * ip);\n      q.xz = Rot2D (q.xz, 2. * pi * (r +\n         0.02 * (1. + 0.3 * r) * sin (0.5 * pi * (1. - 0.2 * r) * q.y)));\n      a = mod (32. * (atan (q.z, - q.x) / (2. * pi)), 1.);\n      vn.xz = Rot2D (vn.xz, -0.7 * sin (pi * a * a));\n      vn = VaryNf (20. * ro, vn, 1.);\n      col = vec3 (0.7, 0.5, 0.3);\n    }\n    col *= 1. - 0.3 * smoothstep (0.2, 0.8, Noisefv3 (vec3 (80., 50., 80.) * ro));\n    vDotL = dot (ltDir, vn);\n    sh = ObjSShadow (ro, ltDir);\n    col = col * ao * (0.1 + 0.2 * max (- vDotL, 0.) + 0.8 * sh * max (vDotL, 0.)) +\n       0.1 * sh * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n    col = mix (col, vec3 (0.2, 0.2, 0.4), smoothstep (0.3, 1., dHit / dstFar));\n  } else col = vec3 (0.2, 0.2, 0.4);\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, pF, pB, u, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, tCur, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = 3. * pi * mPtr.x;\n    el = -0.1 * pi + pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = normalize (vec3 (uv, 1.3));\n  pF = TrackPath (2.5 * tCur + 0.1);\n  pB = TrackPath (2.5 * tCur - 0.1);\n  ro = 0.5 * (pF + pB);\n  ro.x += 5.;\n  vd = normalize (pF - pB);\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd) *\n     vuMat;\n  rd = vuMat * rd;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n  dstFar = 100.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) -\n     Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}