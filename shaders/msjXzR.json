{
    "Shader": {
        "info": {
            "date": "1669920440",
            "description": "1. / (1. + pow(abs(d*att), n)) really sums up this scene",
            "flags": 0,
            "hasliked": 0,
            "id": "msjXzR",
            "likes": 46,
            "name": "Neon Bridge",
            "published": 3,
            "tags": [
                "raymarching",
                "light",
                "bloom",
                "glow",
                "shiny",
                "bright",
                "glowing",
                "intensity",
                "neons"
            ],
            "usePreview": 0,
            "username": "kishimisu",
            "viewed": 966
        },
        "renderpass": [
            {
                "code": "/* \"Neon Bridge\" by @kishimisu (2022) - https://www.shadertoy.com/view/msjXzR\n                       \n   Playing around with neon lights and raymarching in 2022 chars =)\n   \n   The light is accumulated at each step of the raymarching\n   and uses this intensity falloff : 1. / (1. + pow(abs(d*att), n))\n   that allow to produce such shiny and glowing colors.\n   \n   The drawback is that I need a fixed number in the raymarching\n   loop as breaking early when hitting a surface don't produce nice\n   results.\n   Fortunately, with 40 steps it already looks really good and doesn't\n   require a top-tier graphic card.\n   \n   I could optimize it more but I currently have exams and not much \n   time so I'm happy with this result !\n*/\n\n// If you find color values that look better for  \n// this scene don't hesitate to share them!\n#define bridgeCol      vec3(.1,1,.8)\n#define bridgePillars  vec3(1,.7,.4)\n#define pillarsCol     vec3(1,.1,.1)\n#define patternsCol    vec3(.8,.6,.3)\n\nfloat box( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\n\nfloat rect( vec2 p, vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define rep(p,r) (mod(p+r/2.,r)-r/2.)\n#define lrep(p,c,l) (p-c*clamp(round(p/c),-l,l))\n#define rid(p,r) floor((p+r/2.)/r)\n\nfloat light(float d, float att, float n) {\n    return 1. / (1. + pow(abs(d*att), n));\n}\n\nfloat map(vec3 p, float t, inout vec3 lgt) {\n    float d, b1, b2, lb2, b3, b4, r;\n    vec2 id0, id1;\n    vec3 id3, q, c = cos(p)*.25+.75;\n\n    // Bridge\n    d = rect(p.xy + vec2(0,2), vec2(1.4, 1));\n    \n    // Floor & Ceiling\n    d = min(d, abs(abs(p.y) - 4.));\n    \n    if (abs(p.x) < 1.5) {\n        // Bridge steps\n        q   = p;\n        q.z = lrep(q.z, .7, floor(iTime*8. - 14.));\n        b1  = box(q - vec3(0, -1.1 ,0), vec3(1., .1, .08));\n        d   = min(d, b1);\n        lgt += c*bridgeCol * light(b1, 60., 2.);\n\n        // Bridge pillars\n        q = p;\n        q.x = abs(q.x);\n        q.z = rep(q.z, 1.5);\n        id3 = rid(p, 1.5);\n        b2  = rect(q.xz - vec2(1.2,0), vec2(.1));\n        q.z = lrep(p.z, 1.5, floor(iTime*8.));\n        lb2 = box(q - vec3(1.2,2. + sin(iTime + id3.z)*.5,0), vec3(.1,.3,.1));\n        d   = min(d, b2);        \n        lgt += c*bridgePillars * light(lb2, 80., 2.)*t*.5;\n    }\n    \n    // Ground/Ceiling pattern\n    if (abs(p.y) > 2.) {\n        const float br = 1.5;\n        q     = p;\n        id1   = rid(p.xz, br);\n        r     = fract(dot(sin(id1), (id1+41.21)*24.77));\n        q.xz  = rep(p.xz, br);\n        q.y   = abs(q.y)-4.;\n        q.xz *= rot(1.570796*(.5 + floor(r*2.)));\n        q.x   = abs(q.x)-br*.35;\n        b3    = box(q, vec3(.01,.2,br*.4));\n        d     = min(d, b3);\n        lgt  += c*patternsCol * light(b3, 20., 2.) * exp(-t*.1 - (cos(max(0., iTime - 8.)*.5)*.5+.5)*10.);\n    }  \n    \n    // Distant pillars\n    q    = p;\n    id0  = rid(p.xz, 7.);\n    q.xz = rep(p.xz, 7.);\n    b3   = rect(q.xz, vec2(.5));\n    b3   = max(b3, -abs(p.x) +2.);\n    q.y  = rep(q.y, .5);\n    b4   = box(q, vec3(.5,.04,.5));\n    b4   = max(b4, -abs(p.x) +2.);\n    d    = min(d, b3);\n    if (fract((id0.x+41.11)*sin(id0.y*44.7)) < smoothstep(5., 8., iTime))\n        lgt += c*pillarsCol * light(b4, 40., 2.) * (sin(iTime+p.y*(2.*fract(id0.x*id0.y*47.44))+id0.x*id0.y)*.5+.5);\n    \n    return d;\n}\n\nvoid mainImage( out vec4 O, vec2 F ) {\n    vec2 uv = (2.*F - iResolution.xy)/iResolution.y;\n    vec3 lgt = vec3(0);\n    vec3 ro = vec3(0,0,iTime);\n    vec3 rd = normalize(vec3(uv, 1.));\n    float t = 0.;\n    \n    for (int i = 0; i < 40; i++) {\n        vec3 p = ro + t*rd;\n        float d = map(p, t, lgt);\n        t += d;\n    }\n    \n    O = vec4(pow(lgt, vec3(.45)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}