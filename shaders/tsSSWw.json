{
    "Shader": {
        "info": {
            "date": "1554055091",
            "description": "3D fluid advects a distance field to make for fast rendering of up to iResolution.x*iResolution.y particles. \nThe depth (N^2) is adjustable in the common tab. ",
            "flags": 32,
            "hasliked": 0,
            "id": "tsSSWw",
            "likes": 43,
            "name": "Fluid 3D Test",
            "published": 3,
            "tags": [
                "3d",
                "fluid",
                "physics"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 2294
        },
        "renderpass": [
            {
                "code": "//Rendering\nmat2 ro (float a) {\n\tfloat s = sin(a),c = cos(a);\n    return mat2(c,-s,s,c);\n}\nfloat map (vec3 p) {\n\treturn dist(p, s3d(iChannel1,p));\n}\nvec3 norm (vec3 p) {\n    vec2 e = vec2 (.0001,0.);\n    return normalize(vec3(\n        map(p+e.xyy) - map(p-e.xyy),\n        map(p+e.yxy) - map(p-e.yxy),\n        map(p+e.yyx) - map(p-e.yyx)\n    ));\n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{ R = iResolution.xy;\n    \n   \tvec3 p = vec3(.5*R/N,-.5*R.x/N);\n \tvec3 d = normalize(vec3(2.*(U-0.5*R)/R.y,2));\n\t\n \tp.xz *= ro(.5*sin(.5*iTime));\n \td.xz *= ro(.5*sin(.5*iTime));\n \n \tfor (int i = 0; i < 50; i++) {\n        p += map(p)*d;\n \t}\n \tvec3 n = norm(p);\n \tQ = (0.5+0.5*dot(n,vec3(0,0,-1)))*(0.5+0.5*sin(log(1.+30.*length(s3d(iChannel0,s3d(iChannel1,p).xyz).xyz))*vec4(1,2,3,4)));\n \tif (length(p)>R.y)\n \tQ = 0.5+2.*texture(iChannel0,U/R).zzzz\n \t + vec4(.2)*smoothstep(1.,0.,dist(d3(U),texture(iChannel1,U/R)));\n    //Q.xyz = d3(U)/vec3(R/N,N*N);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Fluid\n#define s 0.16666666666\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n    vec3 o = d3(U);\n    Q = s3d1(iChannel0,o);\n    vec4\n        r = s3d1(iChannel0,o+vec3( 1,0,0)),\n        l = s3d1(iChannel0,o+vec3(-1,0,0)),\n        u = s3d1(iChannel0,o+vec3(0, 1,0)),\n        d = s3d1(iChannel0,o+vec3(0,-1,0)),\n        f = s3d1(iChannel0,o+vec3(0,0, 1)),\n        b = s3d1(iChannel0,o+vec3(0,0,-1)),\n        m = s*(u+d+l+r+f+b);\n   \t\n   Q.x += s*(r.w-l.w); \n   Q.y += s*(u.w-d.w); \n   Q.z += s*(f.w-b.w);\n   Q.w = m.w + s*(r.x-l.x+u.y-d.y+f.z-b.z);\n   Q.w -= .003*smoothstep(1.,0.,dist(o,s3d(iChannel1,o)));\n   if (length(o.xy-0.5*vec2(R/N)) < 2.) Q.xy = 0.3*vec2(cos(.1*iTime),sin(.1*iTime));\n     if (iFrame < 1){\n         Q = vec4(0);\n\n     }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 3D utilities \n#define N 7.\nvec2 R;\n//  [ [0,R/N]; [0,N*N]  ] < -- > [0,R]\nvec2 d2 (vec3 U) {\n    U = clamp(U,vec3(1),vec3(R/N,N*N));\n\treturn U.xy+vec2(mod(U.z,N),floor(U.z/N))*R/N;\n}\nvec3 d3 (vec2 u) {\n    vec2 o = floor(u/R*N);\n\treturn vec3(mod(u,R/N),o.x+o.y*N);\n}\nvec4 s3d (sampler2D T,vec3 U) {\n    vec3 U0 = vec3 (U.xy,floor(U.z)),\n         U1 = vec3 (U.xy, ceil(U.z));\n    vec4 o = mix(\n        texture(T,d2(U0)/R),\n        texture(T,d2(U1)/R),\n        fract(U.z)\n    );\n    return o;\n}\nvec4 s3d1 (sampler2D T, vec3 U) {\n    U=U-s3d(T,U).xyz;\n    vec4 s = s3d(T,U);\n    if (U.x < 4. || R.x/N-U.y < 4. ||\n        U.y < 4. || R.y/N-U.y < 4. ||\n       \tU.z < 1. || U.z > 1.+N*N) s.xyz*=0.5;\n    return s;\n}\nfloat dist (vec3 U, vec4 A) {\n\treturn length(U-A.xyz)-A.w;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Particles\nvoid swap (vec3 U, inout vec4 A, vec4 B) {if (dist(U,B) < dist(U,A)) A = B;}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n    Q = texture(iChannel1,U/R);\n    vec3 o = d3(U);\n    swap(o,Q,s3d(iChannel1,o+vec3(1,0,0)));\n    swap(o,Q,s3d(iChannel1,o-vec3(1,0,0)));\n    swap(o,Q,s3d(iChannel1,o+vec3(0,1,0)));\n    swap(o,Q,s3d(iChannel1,o-vec3(0,1,0)));\n    swap(o,Q,s3d(iChannel1,o+vec3(0,0,1)));\n    swap(o,Q,s3d(iChannel1,o-vec3(0,0,1)));\n /*\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,-1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,-1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,-1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,-1,-1)));\n  */\n \tQ.xyz += .5*s3d(iChannel0,Q.xyz).xyz;\n \tQ.xyz = clamp(Q.xyz,vec3(0),vec3(R/N,N*N));\n   if (iFrame < 1) {\n       Q = vec4(round(o/3.)*3.,.5);\n   }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Particles\nvoid swap (vec3 U, inout vec4 A, vec4 B) {if (dist(U,B) < dist(U,A)) A = B;}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n    Q = texture(iChannel1,U/R);\n    vec3 o = d3(U);\n    swap(o,Q,s3d(iChannel1,o+vec3(1,0,0)));\n    swap(o,Q,s3d(iChannel1,o-vec3(1,0,0)));\n    swap(o,Q,s3d(iChannel1,o+vec3(0,1,0)));\n    swap(o,Q,s3d(iChannel1,o-vec3(0,1,0)));\n    swap(o,Q,s3d(iChannel1,o+vec3(0,0,1)));\n    swap(o,Q,s3d(iChannel1,o-vec3(0,0,1)));\n /*\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,-1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(1,-1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,-1,1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,1,-1)));\n \tswap(o,Q,s3d(iChannel1,o+vec3(-1,-1,-1)));\n  */\n \tQ.xyz += .5*s3d(iChannel0,Q.xyz).xyz;\n \tQ.xyz = clamp(Q.xyz,vec3(0),vec3(R/N,N*N));\n   if (iFrame < 1) {\n       Q = vec4(round(o/3.)*3.,.5);\n   }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}