{
    "Shader": {
        "info": {
            "date": "1727106748",
            "description": "RayMarching from glslsandbox",
            "flags": 0,
            "hasliked": 0,
            "id": "l32yRw",
            "likes": 2,
            "name": "sdf RayMarching",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "#define ITER 100.\n#define PI 1.\n#define time iTime\n\n\nfloat random (vec2 st)\n{return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);}\n\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a), cos(a));}\n\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l= length(p);\n    a = mod(a-per/2., per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\n\nvoid mo (inout vec2 p, vec2 d)\n{\n  p = abs(p)-d;\n  if (p.y > p.x) p.xy = p.yx;\n}\n\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b+cos(2.*PI*(c*t+d));}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat stmin(float a, float b , float k , float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b) , 0.5*(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\n\nfloat box (vec3 p, vec3 c)\n{\n  vec3 q = abs(p)-c;\n  return min(0., max(q.x,max(q.y,q.z))) + length(max(q,0.));\n}\n\n\nfloat od (vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\n\nfloat g1 = 0.;\nfloat globe (vec3 p)\n{\n    float d = sphe(vec3(p.x, p.y-1.,p.z), 1.);\n    g1 += 0.1/(0.1+d*d);\n    return d;\n}\n\n\nfloat prim1 (vec3 p)\n{\n    float t1 = floor(time);\n    float t2 = fract(time);\n;\n\n \n\n \n    float b = box (p, vec3(1.,0.5,1.));\n    float o = od (p, 1.);\n    float s = globe(p);\n\n    p.y += 0.7;\n    p.xz = moda(p.xz, PI/2.);\n    p.x -= 1.5;\n    float c = cyl(p.yzx, 0.4-p.x*0.2, 2.);\n    return stmin(s,stmin(o,b,0.5, 5.), 0.2, 3.);\n}\n\n\nfloat prim2 (vec3 p)\n{\n    vec3 pp = p;\n    p.y += 2.;\n    float c = cyl(p.xzy, 0.4, 2.);\n\n    p = pp;\n    p.y += 1.5  ;\n\n    p.x -= 5.;\n    p.y += sin(p.x-time)*0.3;\n  p.yz *= rot(iTime);\n    float d = min(c,cyl (p.yzx, 0.1-p.x*0.1, 5.));\n    return d;\n}\n\n\nfloat prim3 (vec3 p)\n{\n  p.xz *= rot(iTime);\n\n    float p1 = prim1(p);\n    float p2 = prim2(p);\n    return min(p1,p2);\n}\n\n\nfloat g2 = 0.;\nfloat heart (vec3 p)\n{\n  p.xy *= rot(iTime);\n   p.zx *= rot(iTime);\n    float d = sphe(p, 0.8-sin(time)*0.5+0.5);\n    g2 += 0.1/(0.1+d*d);\n    return d;\n}\n\n\nfloat id = 0.;\nfloat prim4 (vec3 p)\n{\np.z+=3.;\n    p.x -= 15.*(floor(time*0.4) + smoothstep(0.,1.,smoothstep(0.1,0.3,fract(time*0.0))));\n    float per = 15.;\n    id = floor((p.x-per/2.)/per);\n    p.x = mod(p.x-per/2., per)-per/2.;\n      p.xy *= rot(iTime);\n    p.xz *= rot(PI/2.);\n    vec3 pp = p;\n    p.xz *= rot(time*0.6);\n    float s = min(heart(p),max(-od(p, 1.7),sphe(p, 2.)));\n    p = pp;\n    p.yz = moda(p.yz, 2.*PI/3.);\n    p.y -= 5.;\n    return smin(s,prim3(p), 0.5);\n}\n\n\nfloat g3 = 0.;\nfloat od_frame(vec3 p)\n{\n  p.xy *= rot(iTime);\n    float o = od (p, 1.);\n    g3 += 0.1/(0.1+o*o);\n    return o;\n}\n\n\nfloat frame (vec3 p)\n{\n    float per = 5.;\n\n    mo(p.xy, vec2(10., 7.));\n \n    p.y += sin(p.x*2.);\n    vec3 pp = p;\n    p.y = mod(p.y, per)-per/2.;\n    float o = od_frame(p);\n\n    p = pp;\n\n    p.xz *= rot(p.y*0.7);\n\n    p.x -= 0.6;\n    float c = cyl(p.xzy, 0.2, 1e9);\n    return smin(c,c, 0.2);\n}\n\n\nfloat SDF (vec3 p)\n{\n    float f = frame(p);\n    if (abs(p.x) < 5. && abs(p.y) < 7.) return min(f,prim4(vec3(p.x, p.y+0.3 , p.z-5.)));\n    else return f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n \n\n    float dither = random(uv);\n\n    vec3 ro = vec3(0.01,0.01, -15.); vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,1.));\n\n    float shad = 0.;\n\n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/ITER;\n            break;\n        }\n        d*= 0.7 + dither*0.1;\n        p+=d*rd;\n    }\n\n    vec3 pal = palette(id,\n                       vec3(0.5),\n                       vec3(0.5),\n                       vec3(0.1/3.),\n                       vec3(1.,0.3,0.7));\n\n    vec3 col = vec3(shad);\n    col += g1 * vec3(0.5,0.2,1.1)*0.2;\n    col += g2 *pal*0.03;\n    col += g3 * vec3(0.1,0.5,1.5)*0.06;\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}