{
    "Shader": {
        "info": {
            "date": "1583860889",
            "description": "Fast ways to count the number of bits set in an int.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlVXWt",
            "likes": 11,
            "name": "counting bits",
            "published": 3,
            "tags": [
                "binary",
                "bitcounter"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "#if 0\n// Brian Kernighanâ€™s Algorithm  cost = NB bits at 1 \n// https://www.geeksforgeeks.org/count-set-bits-in-an-integer/\n\nint nbBits(int n)  { \n    int c;\n    for( c = 0; n > 0; c++ )\n        n &= n - 1;\n    return c; \n} \n\n#else\n// mla pointed a more efficient one : https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\nint nbBits(int v)  { \n    v -= v >> 1   & 0x55555555;                    \n    v = (v & 0x33333333) + (v >> 2   & 0x33333333);     \n    return ( v + (v >> 4) & 0xF0F0F0F ) * 0x1010101   >> 24;\n}\n#endif\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 I = ivec2(U);\n    O = vec4( nbBits(I.x^I.y) ) / 8.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}