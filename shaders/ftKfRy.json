{
    "Shader": {
        "info": {
            "date": "1664755076",
            "description": "Using regular distance instead of squared distance creates sick looking patterns",
            "flags": 32,
            "hasliked": 0,
            "id": "ftKfRy",
            "likes": 8,
            "name": "Breaking Newton's Laws",
            "published": 3,
            "tags": [
                "2d",
                "physics",
                "newton",
                "particle",
                "attraction",
                "force"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "// Line SDF from Inigo Quilez\nfloat line(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    fragColor = vec4(0.0);\n\n    for (float i = 0.0; i < NUM_PARTICLES; i++) {\n    \n        // Read position and velocity data from buffer\n        vec4 posVel = fetch(i);\n        \n        // Draw lines based on position and velocity of each particle\n        float trail = mass(i) / line(fragCoord, posVel.xy, posVel.xy + posVel.zw * 256.0);\n        \n        // Make faster particles more yellow\n        fragColor = max(fragColor, vec4(trail, trail * length(posVel.zw) * 24.0, 0.0, 1.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float NUM_PARTICLES = 512.0;\n\n// To allow the entire buffer to be filled with particles\n#define fetch(id) texelFetch(iChannel0, ivec2(mod(id, iResolution.x), floor(id / iResolution.x)), 0)\n\n// Mass function swaps every 256 frames to get a different look\n#define mass(id) (4.0 + sin(id * (0.1 + floor(float(iFrame) / 256.0) * 0.1)) * 2.0)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Position and velocity buffer\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n    float id = fragCoord.x - 0.5 + (fragCoord.y - 0.5) * iResolution.x;\n    \n    // Don't calculate unused particles\n    if (id > NUM_PARTICLES) discard;\n    \n    if (iFrame % 256 == 0) {\n    \n        // Initialize variables\n        float x = iResolution.x * fragCoord.x / NUM_PARTICLES;\n        float y = iResolution.y * 0.5 + sin(fragCoord.x * 0.05) * iResolution.y * 0.25;\n        \n        // Store as position x, position y, velocity x, velocity y\n        fragColor = vec4(x, y, 0.0, 0.0);\n        \n    } else {\n        \n        // Read position and velocity data from previous frame\n        vec4 posVel = fetch(id);\n        vec2 pos = posVel.xy;\n        vec2 vel = posVel.zw;\n        float m = mass(id);\n        \n        for (float id2 = 0.0; id2 < NUM_PARTICLES; id2++) {\n            \n            // Ignore self\n            if (id == id2) continue;\n            \n            // Read position and velocity data from other particles\n            vec4 posVel2 = fetch(id2);\n            vec2 pos2 = posVel2.xy;\n            float m2 = mass(id2);\n            \n            // Really r should be squared as dot(dir, dir), but distance looks way cooler\n            vec2 dir = pos2 - pos;\n            float r = distance(pos, pos2); // Incorrect\n            \n            // Newton's law of attraction\n            const float G = 0.0000005;\n            float F = G * m * m2 / r;\n            \n            // Integrate position and velocity\n            vel += dir * F;\n            pos += vel;\n        }\n        \n        // Combine components again\n        fragColor = vec4(pos, vel);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}