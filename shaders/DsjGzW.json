{
    "Shader": {
        "info": {
            "date": "1667427823",
            "description": "methods to get random noise",
            "flags": 0,
            "hasliked": 0,
            "id": "DsjGzW",
            "likes": 0,
            "name": "ways to get random noise",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "const int N_FUNCTION_TYPE_SIN =  1;\nconst int N_FUNCTION_TYPE_COS =  2;\nconst int N_FUNCTION_TYPE_TAN =  3;\nconst int N_FUNCTION_TYPE_LOG =  4;\n\nfloat f_n_random(\n    float n_input,\n    int n_function_type\n){\n    float n_mouse_x_normalized = iMouse.x / iResolution.x;\n    float n_mouse_y_normalized = iMouse.y / iResolution.y;\n    float n_amplitude_max = 1111111.0;\n    float n_amplitude = n_amplitude_max * n_mouse_y_normalized;\n    float n = 1.0;\n    if(n_function_type == N_FUNCTION_TYPE_SIN){\n        n = sin(n_input)*n_amplitude* n_mouse_x_normalized;\n    }\n    if(n_function_type == N_FUNCTION_TYPE_COS){\n        n = cos(n_input)*n_amplitude* n_mouse_x_normalized;\n    }\n    if(n_function_type == N_FUNCTION_TYPE_TAN){\n        n = tan(n_input)*n_amplitude* n_mouse_x_normalized;\n    }\n    if(n_function_type == N_FUNCTION_TYPE_LOG){\n        n = log(n_input)*n_amplitude* n_mouse_x_normalized;\n    }\n\n    \n    return mod(n, 1.0);\n}\n\nvoid mainImage( out vec4 a_n_rgba_out, in vec2 fragCoord )\n{\n\n\n    vec2 a_n_normalized_frag = fragCoord.xy/iResolution.xy;\n\n    float a_n_rand[] = float[](\n       f_n_random(\n            fragCoord.x, \n            N_FUNCTION_TYPE_SIN\n       ), \n       f_n_random(\n            fragCoord.x, \n            N_FUNCTION_TYPE_COS\n       ), \n       f_n_random(\n            fragCoord.x, \n            N_FUNCTION_TYPE_TAN\n       ), \n       f_n_random(\n            fragCoord.x, \n            N_FUNCTION_TYPE_LOG\n       )\n    );\n    float n = 0.0;\n    int n_len_a_n_random = a_n_rand.length();\n    for(\n        int n_index_a_n_random = 0;\n        n_index_a_n_random < n_len_a_n_random;\n        n_index_a_n_random++\n      )\n    {\n        if(a_n_normalized_frag.y > (1.0/float(n_len_a_n_random)) * float(n_index_a_n_random)){\n            n = a_n_rand[n_index_a_n_random];\n        }\n    }\n\n\n    \n    a_n_rgba_out = vec4(\n        n, \n        n, \n        n, \n        1.0\n    );\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}