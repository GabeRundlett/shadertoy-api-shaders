{
    "Shader": {
        "info": {
            "date": "1695717363",
            "description": "MIX",
            "flags": 4,
            "hasliked": 0,
            "id": "msyczz",
            "likes": 4,
            "name": "COPY 1",
            "published": 3,
            "tags": [
                "edi"
            ],
            "usePreview": 0,
            "username": "dj_afroedi",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "\n\n#define SAMPLE_WIDTH 8.0\n\nvec3 yLine(vec2 uv,float y, float thickness){\n    float colwave = thickness /  abs(uv.y+y);\n    return vec3(colwave);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) { \n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 col = vec3(0.0);\n    \n    // Average together some of the lower samples to get the circle to pulse to the music.\n    float avgAmp = 0.0;\n    for (float i = 0.0; i < SAMPLE_WIDTH; ++i)\n    {\n        avgAmp += texelFetch(iChannel0, ivec2(8 + int(i), 1), 0).x * (1.0 / SAMPLE_WIDTH);\n    }\n    // Most times the average Amplitude is between [0.1, 0.9], so we map that range to 0, 1\n    // for a fuller pulsing effect.\n    avgAmp = (clamp(avgAmp, 0.1, 0.9) - 0.1) * 1.25;\n    \n    col += length(uv) / max(avgAmp, 0.1);\n    col += yLine(uv, sin(uv.x + iTime * 1.0) + sin(uv.y + iTime * 1.0), 0.01);\n    col += yLine(uv, sin(uv.x + iTime * 0.2) + cos(uv.y + iTime * 2.0), 0.01);\n    col += yLine(uv, sin(uv.x + iTime * 4.0) + sin(uv.y + iTime * 0.5), 0.01);\n    col += yLine(uv, cos(uv.x + iTime * 0.2) + sin(uv.y + iTime * 1.5), 0.01);\n    // In the original the color keeps increasing past the edge of the circle so the whole screen is white,\n    // this makes the color falloff back to zero the brighter it gets so we get a ring.\n    col = max(-abs(col - 2.0) + 2.0, 0.0);\n\n    // Change ivec2 x values to sample different frequencies.\n    float r = avgAmp * col.x;\n    float g = texelFetch(iChannel0, ivec2(250,0), 0).x * col.y;\n    float b = texelFetch(iChannel0, ivec2(500,0), 0).x * col.z;\n    \n    // Takes the lowest color value and reduces it by the min difference between the other two color channels.\n    // This is done to have colors pop more often and only be white when all frequencies are around the same\n    // amplitude.\n    if (r < g && r < b)\n    {\n        r *= 1.0 - max(g - r, b - r);\n    }\n    \n    if (g < r && g < b)\n    {\n        g *= 1.0 - max(r - g, b - g);\n    }\n    \n    if (b < r && b < g)\n    {\n        b *= 1.0 - max(r - b, g - b);\n    }\n    \n    vec3 finalColor = col * vec3(r,g,b);\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}