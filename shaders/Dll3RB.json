{
    "Shader": {
        "info": {
            "date": "1671964157",
            "description": "墨染熹微",
            "flags": 1,
            "hasliked": 0,
            "id": "Dll3RB",
            "likes": 3,
            "name": "Smudge of Dawn_vr",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "clouds",
                "rocks",
                "mountains",
                "vr",
                "inkpainting"
            ],
            "usePreview": 0,
            "username": "szuhanlu_karen",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "// distance functions\nfloat sdSphere(vec3 p){//sphere scene\n    vec4 sphere1 = vec4(50.,-70.,1.,28.); \n    vec4 sphere2 = vec4(8.,20.,2.,15.); \n    vec4 sphere3 = vec4(70.,20.,10.,10.); \n    //前後 / 左右 / 顏色\n\n    float dSphere1 = distance(p, sphere1.xyz)-sphere1.w;\n    float dSphere2 = distance(p, sphere2.xyz)-sphere2.w;\n    float dSphere3 = distance(p, sphere3.xyz)-sphere3.w;\n\n    return min(min(dSphere1, dSphere2),min(min(dSphere1, dSphere2),dSphere3));\n}\n\nfloat plasma(vec3 r) {\n\tfloat mx = r.x + iTime / 2.;\n\tmx += 60.0 * sin((r.y + mx) / 50.0 + iTime);\n\tfloat my = r.y + iTime / 5.;\n\tmy += 50.0 * cos(r.x / 20.0 + iTime);\n\t\n    return r.z - (sin(mx / 15.0) + sin(my / 5.0) + 5.);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\n//=== 3d noise functions ===\nfloat hash11(float p) {\n    return fract(sin(p * 727.1)*43758.5453123);\n}\nfloat hash12(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nvec3 hash31(float p) {\n\tvec3 h = vec3(1275.231,4461.7,7182.423) * p;\t\n    return fract(sin(h)*43758.543123);\n}\n\n// 3d noise\nfloat noise_3(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\t\n\tvec3 u = f*f*(3.0-2.0*f);\n    \n    vec2 ii = i.xy + i.z * vec2(5.0);\n    float a = hash12( ii + vec2(0.0,0.0) );\n\tfloat b = hash12( ii + vec2(1.0,0.0) );    \n    float c = hash12( ii + vec2(0.0,1.0) );\n\tfloat d = hash12( ii + vec2(1.0,1.0) ); \n    float v1 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n    \n    ii += vec2(5.0);\n    a = hash12( ii + vec2(0.0,0.0) );\n\tb = hash12( ii + vec2(1.0,0.0) );    \n    c = hash12( ii + vec2(0.0,1.0) );\n\td = hash12( ii + vec2(1.0,1.0) );\n    float v2 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n        \n    return max(mix(v1,v2,u.z),0.0);\n}\n\nmat3 fromEuler(vec3 ang) {\n    vec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    vec3 m0 = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n    vec3 m1 = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n    vec3 m2 = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n    return mat3(m0, m1, m2);\n}\n\n\nfloat map(in vec3 p)\n{\n    mat3 rot=fromEuler(vec3(0.0,0.0,iTime));\n\n    vec4 sphere1 = vec4(0.0, 0.0, 1.2, .2); \n    vec4 sphere2 = vec4(1.2, 0.0, 0.0, .4); \n    vec4 sphere3 = vec4(-1.2, 0.0, 1.0, .4); \n   \n    \n    float dSphere1 = distance(p, sphere1.xyz)-sphere1.w;\n    float dSphere2 = distance(p, sphere2.xyz)-sphere2.w;\n    float dSphere3 = distance(p, sphere3.xyz)-sphere3.w;\n  \n\n    float bump = noise_3(p)*.8;\n    vec3 p1 = p + bump;\n\n    bump = noise_3(p*.2)*5.;\n    vec3 p2 = p + bump;\n\n\n    return smin(plasma(p1), sdSphere(p2), 6.);//將石頭融入波紋\n}\n\n//=== gradient functions ===\nvec3 gradient( in vec3 p )\n{\n\tconst float d = 0.001;\n\tvec3 grad = vec3(map(p+vec3(d,0,0))-map(p-vec3(d,0,0)),\n                     map(p+vec3(0,d,0))-map(p-vec3(0,d,0)),\n                     map(p+vec3(0,0,d))-map(p-vec3(0,0,d)));\n\treturn grad;\n}\n\nfloat RayMarching(vec3 ro,vec3 rd){\n    float dO = 0.;\n\n    for(int i = 0 ; i < 64 ; i++){\n        vec3 p = ro+rd*dO;\n        float ds = map(p);\n        dO += ds;\n        if(ds<0.01 || dO>100.)\n            break;\n    }\n    \n    return dO;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvec4 render( in vec3 ro, in vec3 rd )\n{\n\tfloat c, s;\n\t//float vfov = 3.14159 / 5.;//2.3\n\n\tvec3 cam = ro + vec3(0.0, 0.0, 50.0);\n    \n    \n    vec2 fragCoord = gl_FragCoord.xy;\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - 0.5;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv.y *= -1.0;\n\n\tvec3 dir = vec3(0.0, 0.0, -1.0);\n    \n\n\tfloat xrot = length(uv)*.8;\n\n    c = cos(xrot);\n\ts = sin(xrot);\n\tdir = mat3(1.0, 0.0, 0.0,\n\t           0.0,   c,  -s,\n\t           0.0,   s,   c) * dir;\n\n\n\tc = normalize(uv).x;\n\ts = normalize(uv).y;\n\tdir = mat3(  c,  -s, 0.0,\n\t             s,   c, 0.0,\n\t           0.0, 0.0, 1.0) * dir;\n\n\tc = cos(0.8);\n\ts = sin(0.8);\n\tdir = mat3(  c, 0.0,   s,\n\t           0.0, 1.0, 0.0,\n\t            -s, 0.0,   c) * dir;\n\n  \n    float dist = RayMarching(cam, dir);\n    vec3 pos = cam + dist * dir;\n\n  \n    vec4 fragColor=vec4(1.);\n\tfragColor.rgb = mix(\n        vec3(55,60,56)/255.,\n        mix(\n\t\t\tvec3(0.0, 0.0, 0.0),\n\t\t\tvec3(1.0, 1.0, 1.0),\n\t\t\tpos.z / 15.0\n\t\t),\n\t\t1.0 / (dist / 25.0)\n\t);\n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;\n\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera\n    vec3 ro = 10.0*vec3(-6.28*m.y, -6.*m.x, m.y);\n\tvec3 ta = vec3(0.0, -1.0, 0.0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    // ray\n    vec3 rd = ca * normalize( vec3(p.xy,1.5));\n   \n    \n    fragColor = render( ro, rd );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragColor = render( fragRayOri, fragRayDir );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}