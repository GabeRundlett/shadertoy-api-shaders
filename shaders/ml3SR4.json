{
    "Shader": {
        "info": {
            "date": "1685072897",
            "description": "Integrating velocity and acceleration, with gravity",
            "flags": 32,
            "hasliked": 0,
            "id": "ml3SR4",
            "likes": 4,
            "name": "Rainbow Orbits",
            "published": 3,
            "tags": [
                "rainbow",
                "orbit",
                "gravity",
                "integration",
                "spirograph"
            ],
            "usePreview": 0,
            "username": "isaacchurchill",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec2 lastPenPos = texelFetch(iChannel1, ivec2(1,0), 0).xy;\n    float circleSDF = abs(length(p - lastPenPos) - 0.05) - 0.003;\n    float circleStrength = smoothstep(-0.005, 0.005, -circleSDF);\n    vec3 penCol = 0.5 + 0.5 * sin(float(iFrame) * 0.1 + vec3(0,2,4));\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    col = mix(col, penCol, circleStrength);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n\n#define PEN_THICKNESS 0.005\n#define FADE_RATE 0.002\n\n\n// Line segment SDF by iq\n// https://iquilezles.org/articles/distfunctions2d/\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n///////////////////////////////////////////////////\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.0 * fragCoord - iResolution.xy ) / iResolution.y;\n            \n    vec2 penPos = texelFetch(iChannel1, ivec2(0), 0).xy;\n    vec2 lastPenPos = penPos;\n    if (iFrame > 1) {\n        lastPenPos = texelFetch(iChannel1, ivec2(1,0), 0).xy;\n    }\n    float penSDF = sdSegment(p, lastPenPos, penPos) - PEN_THICKNESS;\n    float penStrength = smoothstep(-0.005, 0.005, -penSDF);\n    vec3 penCol = 0.5 + 0.5 * sin(float(iFrame) * 0.1 + vec3(0,2,4));\n    \n    vec3 background = vec3(smoothstep(0.0, 0.07, 1.5 - length(p)));\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    if (iFrame > 0) {\n        col = mix(col, background, FADE_RATE);\n        col = mix(col, penCol, penStrength);\n    } else {\n        col = background;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 path(vec4 p)\n{\n    float dt = 0.05;\n    \n    p.xy += p.zw * dt;\n    p.zw -= normalize(p.xy) / max(length(p.xy), 0.01) * dt;\n    \n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 lastState = vec4(1.0, 0.0, -0.5, 0.5); // xy = position, zw = velocity\n    if (iFrame > 0) {\n        lastState = texelFetch(iChannel0, ivec2(0), 0);\n    }\n    if (fragCoord.y < 1.0 && fragCoord.x > 1.0 && fragCoord.x < 2.0) {\n        fragColor = lastState;\n    } else if (fragCoord.x < 1.0 && fragCoord.y < 1.0) {\n        fragColor = path(lastState);\n    } else {\n        discard;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}