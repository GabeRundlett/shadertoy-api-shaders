{
    "Shader": {
        "info": {
            "date": "1711092828",
            "description": "there must be a better way to selectively increase r g or b value according to distance",
            "flags": 0,
            "hasliked": 0,
            "id": "4X2SWK",
            "likes": 4,
            "name": "Synchroseed",
            "published": 3,
            "tags": [
                "circles",
                "sacredgeometry",
                "trigonometry",
                "seedofllife"
            ],
            "usePreview": 0,
            "username": "Lilloz",
            "viewed": 221
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a + vec4(0,33,11,0)))\n#define CS(a)  cos(a + vec2(0,11) )\n#define D(r)   abs( sin(2.*length(p + r* CS( radians(360./7.) * i ) ) - cos(t*2.)/2.) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         p =  ( u -.5* R ) / R.y\n            * rot( 6.28*sin(iTime*.2) );\n    O *= 0.;\n\n    float d1, d2, s,\n          r1 = .14*sin(iTime*.5),\n          r2 = r1 + 1. + sin(iTime*.5),\n          t = .495;\n\n    for (float i; i<7.; i++ )\n    {     \n        d1 = D(r1);\n        d2 = D(r2);      \n        s = smoothstep( d2-.01, .04, d2);\n\n        O += .0015/d1 + .0025/d2;\n        O[ int(s/.4) ] += s*.5;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}