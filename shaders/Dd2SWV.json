{
    "Shader": {
        "info": {
            "date": "1670919341",
            "description": "A twitter user asked of how this was made all from triangles. I thought, it'd be cool to show and animate the whole creation process of the \"Universe\"\n\nWatch at least until 90 sec - enjoy! \n\nbased on: https://www.shadertoy.com/view/dslSRf\n",
            "flags": 96,
            "hasliked": 0,
            "id": "Dd2SWV",
            "likes": 19,
            "name": "[phreax] creation process",
            "published": 3,
            "tags": [
                "fft",
                "spiral",
                "multipass",
                "zucconi"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2022\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2022\n   \n   Based on: https://www.shadertoy.com/view/dslSRf\n*/\n\n#define PI 3.141592\n#define TAU 2.*PI\n#define SIN(x) (sin(x)*.5+.5)\n#define BEND .8     \n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define COUNT 100.\n#define S(a, b) smoothstep(a, b, TIME)\n\n//#define WATERCOLOR\n\nfloat tt, bass;\nfloat TIME;\n\n\nfloat bassFFT() {\n    int bandLimit = 5;\n    \n    float avg = 0.;\n    for(int i=0; i<bandLimit; i++) {\n        avg += texelFetch(iChannel1, ivec2(i, 0), 0).x;\n    }\n    return avg/float(bandLimit);\n}\n\n// zucconis spectral palette https://www.alanzucconi.com/2017/07/15/improving-the-rainbow-2/\nvec3 bump3y (vec3 x, vec3 yoffset)\n{\n    vec3 y = 1. - x * x;\n    y = clamp((y-yoffset), vec3(0), vec3(1));\n    return y;\n}\n\nvec3 spectral_zucconi6(float x) {\n    x = fract(x);\n    const vec3 c1 = vec3(3.54585104, 2.93225262, 2.41593945);\n    const vec3 x1 = vec3(0.69549072, 0.49228336, 0.27699880);\n    const vec3 y1 = vec3(0.02312639, 0.15225084, 0.52607955);\n    const vec3 c2 = vec3(3.90307140, 3.21182957, 3.96587128);\n    const vec3 x2 = vec3(0.11748627, 0.86755042, 0.66077860);\n    const vec3 y2 = vec3(0.84897130, 0.88445281, 0.73949448);\n    return bump3y(c1 * (x - x1), y1) + bump3y(c2 * (x - x2), y2) ;\n}\n\n\nfloat triangle(vec2 uv, float w, float blur) {   \n  int N = 3;\n\n  // Angle and radius from the current pixel\n  float a = atan(uv.x,uv.y)+PI;\n  float r = TAU/float(N);\n\n  // Shaping function that modulate the distance\n  float d = 1.-cos(floor(.5+a/r)*r-a)*length(uv);\n  return smoothstep(blur, .0, abs(d)-w)*(0.3/blur);\n}\n\nvec3 spiral(vec2 uv, float z) {  \n\n    float spiralAmp = (3.*SIN(.5*PI+iMouse.y/360.*2.*PI)); \n    spiralAmp = 3.*S(9.5, 15.)+.3*S(52., 53.);\n    \n    uv *= rot((z*TAU-.2*tt)*spiralAmp);\n    \n    uv += vec2(1.7*sin(.4*z+2.4*tt), -.9*sin(.3*z+1.8*tt))*S(83., 83.3);\n\n    float soundMod = bass*(3.*sqrt(z)+.2);\n    \n    float dist = 2.5*S(35., 42.) -.5*S(52., 52.3);\n    dist += sin(soundMod);\n    uv += dist*sin(vec2(5)*uv.yx+.2*tt);//.3*pow(sin(.2*tt+z+uv.x), 2.);\n\n    float blur = exp(-19.*z);\n    float luma = exp(-19.5*z);\n    vec3 col = spectral_zucconi6(fract(2.*z+.2*tt+uv.x*.2+bass*sqrt(z)*2.))*.8;\n    \n    col = mix(vec3(1), col, S(61.2, 61.2));\n    \n    float size = mix(.02, .05, S(61.2, 61.2)) +.08*S(8., 2.);\n    luma *= 1.+5.*S(8., 2.);\n    blur = mix(0.01, blur, S(25., 35.))+.015*(1.-blur);\n    return triangle(uv, size, blur)*luma*col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    //uv *= rot(-.5*PI);\n    vec3 col = vec3(0);\n    vec4 tex = texture(iChannel0, fragCoord/iResolution.xy);\n    if (tex.a != iResolution.x) tex = vec4(0);\n    tt = iTime*.2;\n    TIME = iChannelTime[1];\n    \n    if(iResolution.y <= 400.) TIME = iTime+90.;  // preview\n    \n    bass = bassFFT()*S(83., 83.3);\n\n    uv *= 100.;\n    \n    float count = 4.+S(5.4, 10.)*COUNT;\n    float s = 1./count; \n    \n    for(float i=0.; i<1.; i+=s) {   \n        float z = fract(i-.1*tt);\n        float fade = smoothstep(1., .9, z);\n        vec2 UV = uv;\n        col += spiral(UV*z, z)*fade;\n        \n    }\n    col = pow(col, vec3(0.5));\n    #ifdef WATERCOLOR\n    col = 1.05-col;\n    col = pow(col, vec3(2.2));\n    col = clamp(col, vec3(0), vec3(1));\n    #endif\n    \n    col *= S(82., 80.)+S(83., 83.3);;\n    \n    float feedback = S(42., 42.5);\n    col = mix(col, tex.rgb, 0.98*feedback);\n    \n\n    //col = vec3(1);\n    // Output to screen\n    fragColor = vec4(col, iResolution.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 35697,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/tycho/into-the-woods"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}