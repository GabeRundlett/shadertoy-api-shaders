{
    "Shader": {
        "info": {
            "date": "1679521201",
            "description": "simple resize button ",
            "flags": 0,
            "hasliked": 0,
            "id": "cdcXR7",
            "likes": 2,
            "name": "resize button",
            "published": 3,
            "tags": [
                "button",
                "arrow",
                "resize"
            ],
            "usePreview": 0,
            "username": "nati070",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\n\nfloat createShape(float N,vec2 st,float size , float angleDir,vec2 location){\n    st = st * 2.-1. + location;\n    float a = atan(st.x,st.y) + angleDir;\n    float r = 3.14159265*2./N;\n    // Shaping function that modulate the distance\n\n    float d = cos(floor(.5+a/r)*r-a)*length(st);\n    return 1.0-smoothstep(size+-0.01,size+0.01,d);\n}\n\nvec2 rotateLine(vec2 st,float angle){\n   float s = sin(angle);\n   float c = cos(angle);\n  float xnew = st.x * c - st.y * s;\n  float ynew = st.x * s + st.y * c;\n    return vec2(xnew,ynew);\n}\n\n//Function to draw a line, taken from the watch shader\nfloat line(vec2 st, vec2 a, vec2 b, float thickness,vec2 location,float angle)\n{\n    st = st * 2.-1.-location;\n    st = rotateLine(st,angle);\n\tvec2 pa = st - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn 1.0 - smoothstep(thickness * 0.8, thickness * 1.1, length(pa - ba * h));\n}\t\n\nfloat createArrowTopRight(vec2 st,float movement){\n\n    return createShape(3.,st,.12,3.*PI/4.,vec2(-.8)+movement) + line(st,vec2(0.1),vec2(.3),0.06,vec2(.4)-movement,0.);\n}\nfloat createArrowLeftBottom(vec2 st,float movement){\n    return  createShape(3.,st,.12,-PI/4.,vec2(+.8)-movement) + line(st,vec2(0.1),vec2(.3),0.06,vec2(-.8)+movement,0.);\n}\n\nfloat linesTopLeft(vec2 st){\n    return line(st,vec2(0.1),vec2(.6),0.06,vec2(-.8,.9),3.*PI/4.) + line(st,vec2(0.1),vec2(.6),0.06,vec2(-.94,.8),1.*PI/4.);\n}\nfloat linesRightBottom(vec2 st){\n    return line(st,vec2(0.1),vec2(.6),0.06,vec2(.8,0.),3.*PI/4.) +line(st,vec2(0.1),vec2(.6),0.06,vec2(-.05,-.89),1.*PI/4.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5*cos(iTime+st.xyx+vec3(0,2,4));\n    color += createArrowTopRight(st,abs(sin(iTime*2.)/6.));\n    color += createArrowLeftBottom(st,abs(sin(iTime*2.)/6.));\n\tcolor += linesTopLeft(st);\n\tcolor += linesRightBottom(st);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}