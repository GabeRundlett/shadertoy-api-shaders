{
    "Shader": {
        "info": {
            "date": "1649516319",
            "description": "magic carpet",
            "flags": 0,
            "hasliked": 0,
            "id": "fl2cDz",
            "likes": 7,
            "name": "magic carpet",
            "published": 3,
            "tags": [
                "carpet"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL 0\n#define MATERIAL1 1\n\n#define ZERO (min(iFrame,0))\n\nvec2 combine(vec2 val1, vec2 val2 ){\n    return (val1.x < val2.x)?val1:val2;\n}\n\nvec2 hash22(vec2 p) {\n    p = p*mat2(127.1,311.7,269.5,183.3);\n    p = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n    return sin(p*6.283);\n}\n\nfloat perlin_noise(vec2 p) {\n    vec2 pi = floor(p);\n    vec2 pf = p - pi;\n    \n    // interpolation\n    vec2 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    float f00 = dot(hash22(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0));\n    float f01 = dot(hash22(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0));\n    float f10 = dot(hash22(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0));\n    float f11 = dot(hash22(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0));\n    \n    // mixing top & bottom edges\n    float xm1 = mix(f00, f10, w.x);\n    float xm2 = mix(f01, f11, w.x);\n    \n    // mixing to point\n    float ym = mix(xm1, xm2, w.y); \n    \n    return ym;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 GetDist(vec3 p) {\n    p*=0.8;\n    vec3 prevP = p;\n    \n    p = prevP;\n    p.x+=iTime*2.1;\n    \n    float n = perlin_noise(p.xz*0.3)*3.0;\n    \n    p = prevP;\n    \n    p.y+=n-0.5;\n    p.x+=sin(n*0.1)*0.6;\n    float d = length(p)-0.5;\n    d = sdBox(p,vec3(1.2,0.01,0.9));\n    p = prevP;\n    float f = (p.y+n)+0.5;\n    p = prevP;\n    vec2 model = vec2(f*0.6,MATERIAL);\n    vec2 model1 = vec2(d*0.6,MATERIAL1);\n    \n    return combine(model,model1);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.3,0.3,0.3)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nfloat pattern(vec2 p, float rot) {\n    p*=Rot(radians(rot));\n    float size = 0.1;\n\n    float d = B(p,vec2(size));\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n\n        d = min(d,  B(q,vec2(size)));\n    }\n    return abs(d)-0.02;\n}\n\nfloat pattern2(vec2 p, float rot) {\n    p*=Rot(radians(rot));\n    float size = 0.1;\n    \n    p.x*=2.0;\n    float d = B(p,vec2(size));\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        q.x*=2.0;\n        d = min(d,  B(q,vec2(size)));\n    }\n    return abs(d)-0.05;\n}\n\nfloat pattern3(vec2 p, float rot) {\n    p*=Rot(radians(rot));\n    float size = 0.1;\n    \n    float d = length(p)-size;\n    for (int i = 0; i < 3; i++) {\n        vec2 q = abs(p);\n        q-=0.15;\n        d = min(d,  length(p)-size);\n    }\n    return abs(d)-0.02;\n}\n\nvec3 magicCarpetTex(vec3 p){\n    vec2 uv = p.xz;\n    uv.x*=0.85;\n    uv.y*=0.8;\n    vec2 prevUV = uv;\n\n    vec3 col = vec3(0.5,0.0,0.1);\n    \n    uv = abs(uv)-0.15;\n    uv = abs(uv)-0.15;\n    float d =pattern(uv,35.0);\n    \n    float d2 = pattern3(uv,40.0);\n    d = min(d,d2);\n    \n    uv.x = abs(uv.x)-0.6;\n    d2 = pattern2(uv,-30.0);\n    d = min(d,d2);\n    \n    \n    uv = prevUV;\n    \n    col = mix(col,vec3(0.2,0.5,0.8),S(d,0.0));\n    \n    \n    d = B(uv,vec2(1.2,0.8));\n    d = abs(d)-0.02;\n    col = mix(col,vec3(0.9,0.5,0.2),S(d,0.0));\n    \n    return col;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL){\n\n        col = diffuseMaterial(n,rd,p,vec3(0.9,0.9,0.3));\n    } else if(mat == MATERIAL1){\n        col = diffuseMaterial(n,rd,p,magicCarpetTex(p));\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 6, -3.)*.6;\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.y = max(-0.9,ro.y);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-30.0));\n    ro.xz *= Rot(radians(-5.0+iTime*20.0));\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(0.6);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n\n        col *= exp( 0.001*d.x*d.x );//fog\n    } else {\n \n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n    \n    uv.x+=iTime*2.0;\n    col.x+=hash22(uv).x*3.0*hash22(uv).y*3.0;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}