{
    "Shader": {
        "info": {
            "date": "1726068983",
            "description": "Custom Flower Shader\nCreated by Jill Rayca and Clara Nolan",
            "flags": 0,
            "hasliked": 0,
            "id": "l3lyDr",
            "likes": 0,
            "name": "Custom CIS566 LAB 1: Team Yippee",
            "published": 3,
            "tags": [
                "flower",
                "cis566",
                "yippee"
            ],
            "usePreview": 0,
            "username": "jrayca973",
            "viewed": 49
        },
        "renderpass": [
            {
                "code": "/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nvec4 circlesecond(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n  /* Change radius as function of time for pulsing. Maybe for spinning and flower use parabola because smooth transition?*/\n\nfloat parabola(float x, float k) {\n    return pow(4.0f*x*(1.0f-x), k);\n    \n}\n\n\n\nfloat sawtooth_wave(float x, float freq, float amplitude) {\n\treturn (x * freq - floor(x * freq)) * amplitude;\n}\n\nfloat triangle_wave(float x, float per, float amp) {\n     return 2.* abs(x / per - floor(x / per + 0.5)) * amp;\n}\n\nfloat ease_in_quadratic(float t){\nreturn t*t;}\n\nfloat ease_in_out_quadratic(float t) {\n    if (t<0.5f)\n        return ease_in_quadratic(t*2.0)/2.0;\n    else\n        return 1.0-ease_in_quadratic((1.0-t)*2.0)/2.0;\n}\n\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    // Get pixel angle around the center\n   uvCenter = rotatePoint2d(uvCenter, vec2(0.0,0.0), iTime);\n   \n   float a = atan(uvCenter.x,uvCenter.y);\n   \n   radius += sawtooth_wave(a,0.8*3.1415, 100.0 * tan(iTime * 50.0));\n   return radius;\n   \n}\n\nfloat computesecondRadius(vec2 uv)\n{\n    float secondradius = 0.5 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    // Get pixel angle around the center\n   uvCenter = rotatePoint2d(uvCenter, vec2(0.0,0.0), iTime);\n   \n   float a = atan(uvCenter.x,uvCenter.y);\n   \n   secondradius += ease_in_quadratic(triangle_wave(a, 0.4*3.1415, 100.0*cos(iTime * 3.0)));\n   return secondradius;\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\nvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    float secondradius = computesecondRadius(uv);\n    // Background layer\n\tvec4 layer1 = vec4(rgb(19.0, 13.0, 171.0), 1.0);\n    vec3 circlecolorsecond = rgb(195.0, 56.0, 234.0); \n\tvec4 layerbetween = circlesecond(uv, center, secondradius*0.7f, circlecolorsecond);\n\t// Circle\n\tvec3 circlecolor = rgb(248.0, 83.0, 0.0);\n\tvec4 layer2 = circle(uv, center, radius, circlecolor);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layerbetween, layerbetween.a);\n    fragColor = mix(fragColor, layer2, layer2.a);\n\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\n \n\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}