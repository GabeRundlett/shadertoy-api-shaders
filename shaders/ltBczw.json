{
    "Shader": {
        "info": {
            "date": "1507881254",
            "description": "Mirrors are micro-mountains! Descartes reflection results from interferences. Huygens:\"any point scatters in every directions\". \nMouse: incident direction. SPACE: show energy vs wavefronts NB: we are monofrequency (i.e. laser), thus sparkle",
            "flags": 0,
            "hasliked": 0,
            "id": "ltBczw",
            "likes": 5,
            "name": "reflection & sparkling 3",
            "published": 3,
            "tags": [
                "physics",
                "optic",
                "quantumphysics",
                "huygens",
                "interferrence"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 1419
        },
        "renderpass": [
            {
                "code": "//parent: https://www.shadertoy.com/view/4sSBRd\n//single pass buffer variant\n//supersampling distance to a surface is a lazy approach.\n\n//uses 2 cos() octaves instead of a noise buffer\n// --- simulating reflection on a micro-relief + sparkling (due to mono-frequency)\n// optimized version of https://www.shadertoy.com/view/4dBBRc\n// relief and phases on it are now precomputed in BufA\n\n// report constants in all buffers\nfloat k = 150.,                                       // wavenumber\n      iterS = 200.; // R.x                                // sampling \n// report constants in all buffers\nfloat z = .03;                                    // relief amplitude\n\n\n#define u5(a) ((a)*.2+.2)\n//#define TT(x)        .1 + z * textureLod(iChannel0,vec2(.5*x,.75),0.).g     // relief\n#define TT(x)      u5(sin(x*7.)+sin(x*13.))*.3+.1\n#define W(P)         k*( dot(P,D) - .1*iTime )                             // incident phase\n\nvec4 mainImage2 (vec2 U ){\n    U*=iResolution.xy;\n    if (U.y >= 1.) return vec4(0);                        // we precompute only a 1D function.\nvec4 O=vec4(0);\n    vec2 D = normalize(vec2(1,-5)), d=vec2(0),\n         R = iResolution.xy,\n         C = vec2(R.x/R.y/2.,.1);                 // pivot for in-out rays\n     \n    if (length(iMouse.xy)>10.) D = -normalize(iMouse.xy-C*R.y); // tune incident direction\n   \n \n    U = -1. + 3.5 *U/R.x; // match exploration loop  for (float x=-1.; x< 2.5;)\n    vec2 P = vec2( U.x, TT(U.x) );\n    O.x = P.y;      // terrain height \n    O.y = W( P );   // phase at each terrain point\n    return O;\n}\n\nvec4 T(float x,float y){ \n    vec2 ass=fract(vec2( (x+1.)/3.5, .5/y) );\n    return mainImage2(ass);\n//texture(iChannel0, fract(vec2( (x+1.)/3.5, .5/y) )) ;\n}\n                          \n\n// precomputed relief+phase\n\n#define W(P)         k*( dot(P,D) - .1*iTime )                             // incident phase\n#define M(P)       ( .7 + .3* cos(k*cross2(U-C,D)) )                       // dashing\n#define cross2(a,b) ( (a).x*(b).y - (b).x*(a).y )\n#define draw(v)      clamp(1.* (v) -0., 0., 1.)                            // draw wave\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.) // keyboard\n\n// --- precompute relief and phases on it ( on a range larger than the window )\n\n\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 d = vec2(0),\n         R = iResolution.xy,\n         C = vec2(R.x/R.y/2.,.1),                     // pivot for in-out rays\n         D = length(iMouse.xy)<10. ? normalize(vec2(1,-5))  // incident direction\n                                   : -normalize(iMouse.xy-C*R.y); // mouse tuning\n\tU /= R.y;\n    O -= O;\n    \n\n    if (U.y < T(U.x,R.y).x) { O ++; return; }             // relief\n    \n    O.g = draw( .7 * cos(W(U)) * M(U) )               // incident wavefronts\n        + smoothstep(2./R.y,.0,abs(cross2(U-C,D)));   // incident direction\n   \n    for (float x=-1.; x< 2.5; x+=1./iterS) {              // sum scattering from each terrain point\n        vec2 P = vec2( x, T(x,R.y).x);\n        float W = T(x,P.y).y,\n              l = length(U-P);\n        d += cos( k*l + W +vec2(0,1.5708) ) * 2.5 / l / iterS; //  * M(P) \n    }\n    O.r =   draw( !keyToggle(32)                      // diffracted wavefronts\n                 ? max(d.x,0.) : length(d));          // wavefront vs amplitude   \n    O.rb += smoothstep(4./R.y,.0,abs(cross2(vec2(2.*C.x-U.x,U.y)-C,D))); // reflected direction\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}