{
    "Shader": {
        "info": {
            "date": "1573608629",
            "description": "Like most of my creations, this horribly inefficient, but if it can run on my ancient laptop then you can do it too (with the added benefit of keeping yourself warm this winter).\n-- Use mouse controls to move the ring of fire.\n-- for fun: #define LATTICED",
            "flags": 32,
            "hasliked": 0,
            "id": "3dyXzm",
            "likes": 3,
            "name": "Conway's Ring of Fire",
            "published": 3,
            "tags": [
                "gameoflife",
                "buffers"
            ],
            "usePreview": 0,
            "username": "wessles",
            "viewed": 757
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv, 0.0).xyz;\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float random (vec2 uv)\n            {\n                return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n            }\n//#define LATTICED\n//#define perpixel\n#define downsampling 2.\n\n#ifdef perpixel\n#define res 1.\n#else\n#define res downsampling\n#endif\n\nvec2 downsample(vec2 i) {\n    #ifdef perpixel\n    return i;\n    #else\n    return round(i/res)*res;\n    #endif\n}\n\nint value(vec2 p, vec2 x) {\n    x *= res*0.99;\n    return int(round(texture(iChannel0, (p+x)/iResolution.xy).x));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 uv )\n{\n    uv = downsample(uv);\n    vec2 mouse = downsample(iMouse.xy);\n    \n    int W = value(uv, vec2(-1., 0.));\n    int E = value(uv, vec2(1., 0.));\n    int N = value(uv, vec2(0., 1.));\n    int S = value(uv, vec2(0., -1.));\n    \n    int neighbors =\n        value(uv, vec2(-1., 0.))\n    \t+ value(uv, vec2(1., 0.))\n        + value(uv, vec2(0., 1.))\n        + value(uv, vec2(0., -1.))\n        + value(uv, vec2(1., 1.))\n        + value(uv, vec2(1., -1.))\n        + value(uv, vec2(-1., -1.))\n        + value(uv, vec2(-1., 1.));\n    \n    int value = value(uv, vec2(0.,0.));\n    \n    if(value == 1) {\n        #ifndef LATTICED\n        if(neighbors < 2)\n            value = 0;\n        else\n        #endif\n            \n            if(neighbors == 2 || neighbors == 3)\n            value = 1;\n        else if(neighbors > 3)\n            value = 0;\n    } else {\n        if(neighbors == 3)\n            value = 1;\n    }\n    \n    fragColor.x = float(value);\n    \n    float md = length(mouse-uv);\n    float d = 20.;\n    if(md > (d)*res && md < (d+2.)*res)\n        fragColor.x = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}