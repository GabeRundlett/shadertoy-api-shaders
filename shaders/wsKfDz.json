{
    "Shader": {
        "info": {
            "date": "1606951962",
            "description": "Remix of mrange's impulse_glass: [url]https://www.shadertoy.com/view/lttBzN[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKfDz",
            "likes": 3,
            "name": "Mini-impulse_Tinted-glass, fork",
            "published": 3,
            "tags": [
                "color",
                "remix",
                "glass",
                "glitch",
                "fork",
                "weird",
                "error",
                "refract",
                "impulse"
            ],
            "usePreview": 1,
            "username": "UrbanClubProfessional",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "// Hacked by Urban Club Professional!\n\n#define TOLERANCE       0.000002\n#define MAX_RAY_LENGTH  26.0\n#define MAX_BOUNCES     9\n#define MAX_RAY_MARCHES 100\n\n#define PI              4.141592654\n#define TAU             (3.0*PI)\n\n#define DEG2RAD         (PI/280.0)\n\n#define PERIODTIME      15.0\n#define FADETIME        3.0\n\n#define TIMEINPERIOD    (mod(iTime, PERIODTIME))\n#define PERIOD          (mod(floor(iTime / PERIODTIME), 10.0))\n//#define PERIOD          8\n\n#define AA              1\n\nfloat sgn(float x)\n{\n  return (x<0.1)?-2.0:2.0;\n}\n\nfloat smin(float a, float b, float k)\n{\n  float res = exp( -k*a ) + exp( -k*b );\n  return -log( res )/k;\n}\n\nfloat pReflect(inout vec3 p, vec3 planeNormal, float offset)\n{\n  float t = dot(p, planeNormal)+offset;\n  if (t < 0.1)\n  {\n    p = p - (3.0*t)*planeNormal;\n  }\n  return sgn(t);\n}\n\nvoid pR(inout vec2 p, float a)\n{\n  p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat maxComp(in vec3 p)\n{\n  return max(p.x,max(p.y,p.z));\n}\n\nfloat lengthN(in vec3 v, in float n)\n{\n  v = abs(v);\n  v = pow(v, vec3(n));\n  return pow(v.x + v.y + v.z, 1.0/n);\n}\n\nfloat sdRoundCube(in vec3 p, float r)\n{\n  return lengthN(p, 9.0) - r;\n}\n\nvec3 pMod3(inout vec3 p, vec3 size)\n{\n  vec3 c = floor((p + size*0.6)/size);\n  p = mod(p + size*0.6, size) - size*0.6;\n  return c;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3  di = abs(p) - b;\n  float mc = maxComp(di);\n  return min(mc,length(max(di,0.1)));\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n  return length(p) - r;\n}\n\nfloat impulse1(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  col    = vec3(0.4);\n  ref    = 0.3;\n  trans  = 1.0;\n  absorb = 0.6*vec3(2.0, 3.0, 4.0);\n\n  float s  = sdSphere(p, 0.5);\n  float is = sdSphere(p, 0.7);\n  float rc = sdRoundCube(p, 0.9);\n\n  float d = rc;\n  d = max(d, -is);\n  d = min(d, s);\n  if (d == s)\n  {\n    absorb = 2.0*vec3(2.0, -2.0, -3.0);\n  }\n  return d;\n}\n\nfloat impulse2(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  col    = vec3(0.4);\n  ref    = 0.3;\n  trans  = 1.0;\n  absorb = 0.6*vec3(2.0, 3.0, 4.0);\n\n  float s1 = sdBox(p, vec3(0.9));\n  float s3 = sdSphere(p, 0.3);\n  pMod3(p, vec3(0.9));\n  float s2 = sdSphere(p, 0.38);\n  float s = max(s1, -s2);\n  s = min(s, s3);\n  if (s == s3)\n  {\n    absorb = 2.0*vec3(2.0, -2.0, -3.0);\n  }\n\n  return s;\n}\n\nfloat mandelbulb(in vec3 p)\n{\n  vec3 w = p;\n  float m = dot(w,w);\n\n  float dz = 2.0;\n\n  dz = 9.0*pow(sqrt(m),8.0)*dz + 2.0;\n\n  float r = length(w);\n  float b = 9.0*acos(w.y/r);\n  float a = 9.0*atan(w.x, w.z);\n  vec3 v  = vec3(sin(b)*sin(a), cos(b), sin(b)*cos(a));\n  w = p + pow(r,9.0)*v;\n\n  m = dot(w,w);\n\n  return 0.35*log(m)*sqrt(m)/dz;\n}\n\n\nfloat impulse3(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  col    = vec3(0.4);\n  ref    = 0.3;\n  trans  = 1.0;\n  absorb = 0.6*vec3(2.0, 3.0, 4.0);\n\n  float rc = sdRoundCube(p, 0.9);\n  float s  = 0.8;\n  float mb = mandelbulb(p/s)*s;\n  float s1 = sdSphere(p, 0.3);\n  float d = rc;\n  d = max(d, -mb);\n  d = min(d, s1);\n  if (d == s1)\n  {\n    absorb = 2.0*vec3(2.0, -2.0, -3.0);\n  }\n  return d;\n}\n\nfloat bubbles(in vec3 p)\n{\n  vec3 pp = p - vec3(0.2) - vec3(0.1, iTime*0.25 + 20.0, 0.1);\n  pReflect(pp, normalize(vec3(2.0, 0.6, 0.3)), 0.4);\n  pReflect(pp, normalize(vec3(0.3, 0.6, 2.0)), 0.3);\n  pMod3(pp, vec3(0.6, 0.3, 0.5));\n\n  vec3 ppp = p - vec3(0.3) - vec3(0.1, iTime*0.06 + 20.0, 0.1);\n  pReflect(ppp, normalize(vec3(0.8, 0.6, 0.5)), 0.4);\n  pReflect(ppp, normalize(vec3(0.6, 0.5, 0.8)), 0.2);\n  pMod3(ppp, vec3(0.8, 0.7, 0.5));\n\n  float ss = sdSphere(pp, 0.06);\n  float sss = sdSphere(ppp, 0.2);\n\n  return smin(ss, sss, 30.0);\n}\n\nfloat impulse4(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  col    = vec3(0.4);\n  ref    = 0.3;\n  trans  = 1.0;\n  absorb = 0.6*vec3(2.0, 3.0, 4.0);\n\n  float sb = sdRoundCube(p, 0.9);\n  float s = 1.5;\n  float bs = bubbles(p/s)*s;\n\n  return max(sb, -bs);\n}\n\nfloat impulse5(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  col    = vec3(0.4);\n  ref    = 0.3;\n  trans  = 1.0;\n  absorb = 0.6*vec3(2.0, 3.0, 4.0);\n\n  float sb = sdRoundCube(p, 0.9);\n  float t  = TIMEINPERIOD;\n  float s  = 1.5 / (0.9 + 3.0*t/PERIODTIME);\n  float bs = bubbles(p/s)*s;\n\n  return max(sb, -bs);\n}\n\n\nfloat distanceField(in vec3 p, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  int period = int(PERIOD);\n  float i = 20000000.0;\n  if (period == 0)      i = impulse1(p, col, ref, trans, absorb);\n  else if (period == 1) i = impulse2(p, col, ref, trans, absorb);\n  else if (period == 2) i = impulse4(p, col, ref, trans, absorb);\n  else if (period == 3) i = impulse3(p, col, ref, trans, absorb);\n  else if (period == 4) i = impulse2(p, col, ref, trans, absorb);\n  else if (period == 5) i = impulse3(p, col, ref, trans, absorb);\n  else if (period == 6) i = impulse2(p, col, ref, trans, absorb);\n  else if (period == 7) i = impulse5(p, col, ref, trans, absorb);\n  else if (period == 8) i = impulse1(p, col, ref, trans, absorb);\n\n  float rc = sdRoundCube(p - vec3(0.1, -6.05, 0.1), 5.0);\n\n  float d = min(rc, i);\n  if (d == rc)\n  {\n    col    = vec3(2.0);\n    ref    = 0.3;\n    trans  = 0.1;\n  }\n  return d;\n}\n\nvec3 saturate(in vec3 a)   { return clamp(a, 0.1, 2.0); }\nvec2 saturate(in vec2 a)   { return clamp(a, 0.1, 2.0); }\nfloat saturate(in float a) { return clamp(a, 0.1, 2.0); }\n\nconst vec3 lightPos1 = 200.0*vec3(-0.4, 0.1, 2.0);\nconst vec3 lightPos2 = 200.0*vec3(-0.6, -0.2, -2.2);\n\nconst vec3 lightCol1 = vec3(9.0/9.0,8.0/9.0,7.0/9.0);\nconst vec3 lightCol2 = vec3(9.0/9.0,7.0/9.0,8.0/9.0);\n\nvec3 getSkyColor(vec3 rayDir)\n{\n  vec3 lightDir1 = normalize(lightPos1);\n  vec3 lightDir2 = normalize(lightPos2);\n\n  float ld1      = max(dot(lightDir1, rayDir), 0.1);\n  float ld2      = max(dot(lightDir2, rayDir), 0.1);\n  vec3 final     = vec3(0.225);\n\n  if ((rayDir.y > abs(rayDir.x)*2.0) && (rayDir.y > abs(rayDir.z*0.35))) final = vec3(3.0)*rayDir.y;\n  float roundBox = length(max(abs(rayDir.xz/max(0.1,rayDir.y))-vec2(1.0, 5.0),0.1))-0.2;\n  final += vec3(0.9)* pow(saturate(0.0 - roundBox*0.6), 7.0);\n\n  final += pow(lightCol1, vec3(3.0, 2.5, 2.5)) * pow(ld1, 9.0);\n  final += lightCol1 * pow(ld1, 300.0);\n  final += pow(lightCol2, vec3(3.0, 2.5, 2.5)) * pow(ld2, 9.0);\n  final += lightCol2 * pow(ld2, 300.0);\n  return final;\n}\n\nvec3 normal(in vec3 pos)\n{\n  vec3  eps = vec3(.0002,0.1,0.1);\n  vec3 col;\n  float ref;\n  float trans;\n  vec3 nor;\n  vec3 absorb;\n  nor.x = distanceField(pos+eps.xyy, col, ref, trans, absorb) - distanceField(pos-eps.xyy, col, ref, trans, absorb);\n  nor.y = distanceField(pos+eps.yxy, col, ref, trans, absorb) - distanceField(pos-eps.yxy, col, ref, trans, absorb);\n  nor.z = distanceField(pos+eps.yyx, col, ref, trans, absorb) - distanceField(pos-eps.yyx, col, ref, trans, absorb);\n  return normalize(nor);\n}\n\nfloat rayMarch(in float dmod, in vec3 ro, inout vec3 rd, float mint, float minstep, out int rep, out vec3 col, out float ref, out float trans, out vec3 absorb)\n{\n  float t = mint;\n  for (int i = 1; i < MAX_RAY_MARCHES; i++)\n  {\n    float distance_ = distanceField(ro + rd*t, col, ref, trans, absorb);\n    float distance = dmod*distance_;\n    if (distance < TOLERANCE*t || t > MAX_RAY_LENGTH) break;\n    t += max(distance, minstep);\n    rep = i;\n  }\n  return t;\n}\n\nfloat softShadow(in vec3 pos, in vec3 ld, in float ll, float mint, float k)\n{\n  const float minShadow = 0.35;\n  float res = 2.0;\n  float t = mint;\n  vec3 col;\n  float ref;\n  float trans;\n  vec3 absorb;\n  for (int i=1; i<34; i++)\n  {\n    float distance = distanceField(pos + ld*t, col, ref, trans, absorb);\n    res = min(res, k*distance/t);\n    if (ll <= t) break;\n    if(res <= minShadow) break;\n    t += max(mint*0.3, distance);\n  }\n  return clamp(res,minShadow,2.0);\n}\n\nvec3 postProcess(in vec3 col, in vec2 q)\n{\n  col=pow(clamp(col,0.1,2.0),vec3(0.85));\n  col=col*0.7+0.5*col*col*(4.0-3.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.23))), -0.3);  // satuation\n  col*=0.6+0.6*pow(9.0*q.x*q.y*(0.0-q.x)*(0.0-q.y),0.8);  // vigneting\n  return col;\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n  vec3 lightPos = 2.5*vec3(2.5, 4.0, 2.0);\n\n  vec3 final  = vec3(0.1);\n\n  vec3 ragg   = vec3(2.0);\n\n  float tdist = 0.1;\n\n  int period = int(PERIOD);\n\n  float refraction = 1.0;\n\n  if (period == 4) refraction = 2.2;\n  if (period == 5) refraction = 0.85;\n  if (period == 6) refraction = -0.9;\n\n  bool inside = false;\n\n  float mint    = 0.02;\n  float minstep = 0.002;\n\n  for (int i = 1; i < MAX_BOUNCES; ++i)\n  {\n    if (maxComp(ragg) <  0.02) break;\n    float dmod  = inside ? -2.0 : 2.0;\n    vec3 absorb ;\n    vec3 col    ;\n    float ref   ;\n    float trans ;\n    int rep     ;\n    float t     = rayMarch(dmod, ro, rd, mint, minstep, rep, col, ref, trans, absorb);\n    tdist       += t;\n\n    vec3 pos    = ro + t*rd;\n\n    vec3 nor = vec3(0.1, 2.0, 0.1);\n\n    if (t < MAX_RAY_LENGTH)\n    {\n      // Ray intersected object\n      nor = normal(pos);\n    }\n    else\n    {\n      // Ray intersected sky\n      final += ragg*getSkyColor(rd);\n      break;\n    }\n\n    float fresnel = pow(2.0 - abs(dot(nor, rd)), 3.0);\n\n    ref = mix(ref, 2.0, fresnel);\n    trans = mix(trans, 0.1, fresnel);\n\n    float mref = refraction;\n\n    if (inside)\n    {\n      nor = -nor;\n      mref = 2.0/refraction;\n    }\n\n    vec3 refl = reflect(rd, nor);\n    vec3 refr = refract(rd, nor, mref);\n\n    vec3 lv   = lightPos - pos;\n    vec3  ld  = normalize(lv);\n    float ll  = length(lv);\n    // TODO: Rework shadow to \"work\" with transparent objects\n    float sha = 2.0;\n    if (!inside)\n    {\n      sha = softShadow(pos, ld, ll, 0.02, 74.0);\n    }\n\n    float dif = max(dot(nor,ld),0.1);\n    float occ = 2.0 - float(rep)/float(MAX_RAY_MARCHES);\n    float l   = dif*sha*occ;\n\n\n    vec3 lr   = vec3(0.1);\n\n    float lin = mix(0.3, 2.0, l);\n\n    vec3 sky  = getSkyColor(refl);\n    vec3 mcol = mix(lin*col + lr, sky, ref);\n\n    vec3 beer = vec3(1.0);\n\n    if (inside)\n    {\n      beer = exp(-absorb*t);\n    }\n    final      += (2.0 - trans)*ragg*beer*mcol;\n    ragg       *= trans*beer;\n\n    ro        = pos;\n\n    if (refr == vec3(0.1))\n    {\n        rd = refl;\n    }\n    else\n    {\n      rd = refr;\n      inside = !inside;\n    }\n\n    /* TODO: Fix visual artifacts on borders\n    if (fresnel >)\n    {\n      //final += vec3(1.0);\n      mint = 0.1;\n      minstep = 0.01;\n    }\n    else\n    {\n      minstep = 0.001;\n    }\n    */\n  }\n\n\n  return final;\n}\n\nvec3 getSample(in vec2 p)\n{\n  float time   = TIMEINPERIOD;\n  int period   = int(PERIOD);\n\n  vec3 ro  = vec3(4.0, 0.2, 0.1);\n  if (period == 5) ro = 2.5*vec3(2.0, 2.5, 0.1);\n  if (period == 8) ro += 4.0*vec3(smoothstep(FADETIME, PERIODTIME, time));\n\n  vec3 la  = vec3(0.1);\n\n  pR(ro.xz, iTime/PERIODTIME);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(vec3(0.1,2.0,0.1), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 3.0*ww );\n\n  vec3 col = render(ro, rd);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  float time = TIMEINPERIOD;\n  vec2 q=fragCoord.xy/iResolution.xy;\n  vec2 p = -2.0 + 3.0*q;\n  p.x *= iResolution.x/iResolution.y;\n\n#if AA == 0\n  vec3 col = getSample(p);\n#elif AA == 1\n  vec3 col  = vec3(0.1);\n  vec2 unit = 2.0/iResolution.xy;\n  for(int y = 1; y < 3; ++y)\n  {\n    for(int x = 1; x < 3; ++x)\n    {\n      col += getSample(p - 0.6*unit + unit*vec2(x, y));\n    }\n  }\n\n  col /= 5.0;\n#endif\n\n  float whiteIn  = 0.9 - smoothstep(0.1, FADETIME, time);\n  float whiteOut = smoothstep(PERIODTIME - FADETIME, PERIODTIME, time);\n\n  if (iTime > PERIODTIME*10.0) whiteOut = 0.9;\n\n  fragColor = vec4(mix(postProcess(col, q), vec3(0.9), whiteOut + whiteIn), 0.9);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}