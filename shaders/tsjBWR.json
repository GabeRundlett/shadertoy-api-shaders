{
    "Shader": {
        "info": {
            "date": "1589856822",
            "description": "Image shattering effect, with parameters to animate construction/destruction",
            "flags": 0,
            "hasliked": 0,
            "id": "tsjBWR",
            "likes": 2,
            "name": "Shattering",
            "published": 3,
            "tags": [
                "2d",
                "wip",
                "bitmap"
            ],
            "usePreview": 0,
            "username": "luchong",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "#define DEBUG\n#define ANIM\n\nconst int numOfHorizontal = 8;\nconst int numOfVertical = 8;\nconst int diagSpacing = 50;\nconst int diagOffset = -5;\nint displacement = 50;\n\n/*\n\n2D array representing square positions.\nOriginal image indexes:\n\n    56,57,58,59,60,61,62,63,\n    48,49,50,51,52,53,54,55,\n    40,41,42,43,44,45,46,47,\n    32,33,34,35,36,37,38,39,\n    24,25,26,27,28,29,30,31,\n    16,17,18,19,20,21,22,23,\n     8, 9,10,11,12,13,14,15,\n     0, 1, 2, 3, 4, 5, 6, 7\n\nShuffle this for shattering effect\n\n*/\n\nint grid[numOfHorizontal*numOfVertical] = int[numOfHorizontal*numOfVertical](\n\t14,52,45, 4, 2, 8,44,21,\n\t55,23, 6,28,29,61,35,17,\n   \t57,56,12,13,59,41,49,18,\n     7,22,58,20,43, 1,32, 5,\n   \t11,51,62,34,60,39,38,10,\n   \t24,54,33,36,63,48,19,30,\n   \t16,40,42, 3,25,15,31,26,\n   \t46,37, 9,47, 0,50,27,53\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef ANIM    \n    displacement = int(cos(iTime * 2.5) * float(displacement/2) + float(displacement/2));\n#endif\n    \n    ivec2 pixelCoord = ivec2(fragCoord);\n    \n    \n    //Find out which diagonal segment the pixel belongs to\n    \n    int i = int(floor(float(pixelCoord.y - pixelCoord.x - diagOffset) / float(diagSpacing)));\n    \n#ifdef DEBUG\n    //Draw diagonal bounds\n    \n    if(pixelCoord.y == pixelCoord.x + i * diagSpacing + diagOffset) {\n        fragColor = vec4(0,0,1,1);\n    \treturn;\n    }\n#endif\n    \n    //Displace pixel diagonally\n    \n    int dir = (2 * (abs(i) % 2) - 1);\n    pixelCoord += displacement * dir * ivec2(1,1);\n    \n    //If out of viewport render transparent\n    \n    if(lessThan(pixelCoord, ivec2(0,0)) != bvec2(false, false)\n       || greaterThan(pixelCoord, ivec2(iResolution)) != bvec2(false, false)) {\n        fragColor = vec4(0,0,0,0);\n        return;\n    }\n    \n    int rectHeight = int(iResolution.y) / numOfHorizontal;\n    int rectWidth = int(iResolution.x) / numOfVertical;\n    \n#ifdef DEBUG\n    //Draw horizontal and vertical bounds\n    \n    if(pixelCoord.y > 0 && pixelCoord.y % rectHeight == 0) {\n        fragColor = vec4(1,0,0,1);\n        return;\n    }\n    \n    if(pixelCoord.x > 0 && pixelCoord.x % rectWidth == 0) {\n        fragColor = vec4(1,0,0,1);\n        return;\n    }\n#endif\n    \n    //Find out position in grid for displaced pixel\n    \n    int gridX = pixelCoord.x / rectWidth;\n    int gridY = pixelCoord.y / rectHeight;\n    int remainX = pixelCoord.x % rectWidth;\n    int remainY = pixelCoord.y % rectHeight;\n    \n    // If grid does not fit perfectly in resolution, render borders transparent\n    \n    if(gridX >= numOfHorizontal || gridY >= numOfVertical) {\n        fragColor = vec4(0,0,0,0);\n        return;\n    }\n    \n    // Get texture coordinates for corresponding square\n    vec2 tex = vec2(\n        grid[numOfHorizontal*(numOfVertical-gridY-1)+gridX] % numOfHorizontal * rectWidth + remainX,\n       \tgrid[numOfHorizontal*(numOfVertical-gridY-1)+gridX] / numOfVertical * rectHeight + remainY\n    );\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = tex/iResolution.xy;\n\n    // Sample from texture\n    \n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}