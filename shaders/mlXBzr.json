{
    "Shader": {
        "info": {
            "date": "1692525920",
            "description": "zoomy",
            "flags": 0,
            "hasliked": 0,
            "id": "mlXBzr",
            "likes": 29,
            "name": "Noise Curl Zoom",
            "published": 3,
            "tags": [
                "zoom"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "\n// Noise Curl Zoom\n// by Leon Denise\n// 2023/08/20\n\n#define R iResolution.xy\n#define ss(a,b,t) smoothstep(a,b,t)\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec2 pos)\n{\n    vec3 p = vec3(pos, 0.);\n    float result = 0., a = .5;\n    for (int i = 0; i < 5; ++i, a /= 2.) {\n        p.z += result*.5;\n        result += gyroid(p/a)*a;\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord-R/2.)/R.y;\n    \n    // polar coordinates with scrolling log radius\n    p = vec2(atan(p.y, p.x), log(length(p))-iTime*.3);\n    \n    // curl noise\n    vec2 e = vec2(.001,0);\n    float x = (fbm(p+e.yx)-fbm(p-e.yx))/(2.*e.x);\n    float y = (fbm(p+e.xy)-fbm(p-e.xy))/(2.*e.x);\n    vec2 curl = vec2(x,-y);\n    \n    // shape from curl noise magnitude\n    float d = length(curl);\n    float px = fwidth(d); // AA by Fabrice Neyret\n    fragColor = vec4(ss(-px,px,d-2.5));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}