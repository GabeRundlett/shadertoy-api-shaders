{
    "Shader": {
        "info": {
            "date": "1718364355",
            "description": "like stars",
            "flags": 0,
            "hasliked": 0,
            "id": "4XG3Wt",
            "likes": 6,
            "name": "waving from star",
            "published": 3,
            "tags": [
                "fractal",
                "star",
                "cosmos",
                "universe",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 399
        },
        "renderpass": [
            {
                "code": "\n/*waving from star*/\n\n/*originals https://glslsandbox.com/e#43775.0 https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/ldBXDD*/\n\n\n\n#define resolution iResolution.xy\n#define time iTime\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n    \tvec3 dir=vec3(uv*zoom,1.);\n    \n\t\n\t\t\n        \n        vec2 position = ( gl_FragCoord.xy * 2.0 -  resolution.xy) / resolution.x;\n\tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\nvec3 light_color = vec3(2,2,2);\n\t\n\tfloat t = time * 1.0;\n\t\n\t position =(cPos/cLength)*cos(cLength*1.0-iTime*0.5) * 0.03;\n\t// 256 angle steps\n\tfloat angle = atan(position.y, position.x) / (3.14159265359);\n\tangle -= floor(angle);\n\tfloat rad = length(position);\n\n\tfloat color = 0.0;\n\n\t\n\tfloat angleFract = fract(angle*205.);\n\tfloat angleRnd = floor(angle*200.)+1.;\n\tfloat angleRnd1 = fract(angleRnd*fract(angleRnd*.07235)*10.1);\n\tfloat angleRnd2 = fract(angleRnd*fract(angleRnd*.0082657)*13.724);\n\tfloat t2 = t + angleRnd1*10.0;\n\tfloat radDist = sqrt(angleRnd2);\n\t\n\tfloat adist = radDist / rad * 0.1;\n\tfloat dist = (t2*.1+adist);\n\tdist = abs(fract(dist) - 1.0);\n\tcolor +=  (1.5 / dist) * cos(sin(t)) * adist / radDist / 30.0;  // cos(sin(t)) make endless.\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n    vec3 from=vec3(5.,.5,0.5)*color;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.15;\n        \n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.015),sin(iTime*0.015),-sin(iTime*0.015),cos(iTime*0.015) );// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\t\t\n\n\t\n\n\n\n\t\n\t  vec2 uv2 = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n\n     fragColor = vec4(v*.03,1.);\n    float anim = sin(iTime * 1.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv2, anim) * vec3(0.15,0.2,0.75)*0.18, 1.0);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}