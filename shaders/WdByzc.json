{
    "Shader": {
        "info": {
            "date": "1587038656",
            "description": "mandelbrot on sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "WdByzc",
            "likes": 3,
            "name": "Mandelbrot on sphere",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "elle",
            "viewed": 324
        },
        "renderpass": [
            {
                "code": "vec4 sphere = vec4(0.0, 0.0, 1.0, 0.4);\nvec3 lightPos = vec3(-9.0, 8.0, -8.0);\nvec3 lightCol = vec3(0.8, 0.9, 1.0);\n\nfloat sphereDist1(vec3 ro, vec3 rd)\n{\n\tfloat R = sphere.w;\n\tvec3 d1 = sphere.xyz - ro;\n\tfloat b = dot(rd, d1);\n\tfloat d2 = dot(d1, d1) - b * b;\n\tfloat h2 = R * R - d2;\n    if (h2 <= 0.0)\n        return (-1.0);\n    return (b - sqrt(h2));\n}\n\nfloat sphereDist(vec3 p)\n{\n return (length(p - sphere.xyz) - sphere.w);   \n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat getShadow(vec3 ro, vec3 rd, float tmin, float tmax, const float k)\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i = 0; i < 50; i++)\n    {\n\t\tfloat h = sphereDist(ro + rd * t);\n        res = min(res, k * h / t);\n        t += clamp(h, 0.02, 0.20);\n        if(res < 0.005 || t > tmax)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 getNormal(vec3 pos)\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    return normalize( e.xyy*sphereDist(pos + e.xyy*ep) + \n\t\t\t\t\t  e.yyx*sphereDist(pos + e.yyx*ep) + \n\t\t\t\t\t  e.yxy*sphereDist(pos + e.yxy*ep) + \n\t\t\t\t\t  e.xxx*sphereDist(pos + e.xxx*ep));\n}\n\n//smooth color gradient - https://www.shadertoy.com/view/4df3Rn\nfloat mandelbrot(vec2 c)\n{\n    vec2 z = vec2(0.0);\n    const float B = 256.0;\n    float l = 0.0;\n    for (int i = 0; i < 512; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (dot(z, z) > (B * B))\n            break;\n        l += 1.0;\n    }\n    if (l > 511.0)\n        return (0.0); \n    //float l = l - log(log(length(z))/log(B))/log(2.0);\n    l = l - log2(log2(dot(z, z))) + 4.0;\n    return (l);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 aspectRatio = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = aspectRatio * (fragCoord.xy / iResolution.xy - 0.5);\n    vec2 mouse = 7.0 * (iMouse.xy / iResolution.xy - 0.5);  \n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n\tfloat rot = iTime * 0.2;\n    mat3 rotX = mat3(\n        vec3(cos(mouse.x - rot), 0.0, sin(mouse.x - rot)),\n        vec3(0.0, 1.0, 0.0),\n        vec3(-sin(mouse.x - rot), 0.0, cos(mouse.x - rot)));  \n\tmat3 rotY = mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(mouse.y), sin(mouse.y)),\n        vec3(0.0, -sin(mouse.y), cos(mouse.y)));\n\t\n    vec3 color = vec3(0.09 - uv.x, 0.38, uv.x + 0.4) * (0.9 - uv.x);\n    \n    float dSphere = sphereDist1(ro, rd);\n    if (dSphere < 0.0)\n    {\n\t\tfragColor = vec4(color, 1.0);\n\t\treturn;\n    }\n\tvec3 pos = ro + dSphere * rd;\n\tvec3 normal = getNormal(pos);\n\tvec3 v3 = rotX * rotY * normal;\n    vec2 v2 = 1.5 * v3.xy / abs(v3.z);\n    float dMb = mandelbrot(v2);\n        \n    vec3 material = 0.44 + 0.5 * cos(3.0 + dMb * 0.11 + vec3(0.0, 0.5, 1.0)); \n    vec3 lightDir = normalize(vec3(lightPos - pos));\n    vec3 reflectDir = normalize(reflect(lightDir, normal));\n    float shadow = getShadow(pos, lightDir, 0.001, 1.0, 8.0);\n        \n    float diffuse = clamp(dot(normal, lightDir), 0.0, 1.0) * shadow * 2.0;\n    float ambient = 0.6 + 0.6 * normal.y;\n\tfloat specular = pow(clamp(dot(reflectDir, rd), 0.0, 1.0), 16.0) * 2.2 * shadow;\n        \n\tcolor = lightCol * material * (diffuse + specular + ambient);\n    color = sqrt(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}