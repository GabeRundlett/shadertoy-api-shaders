{
    "Shader": {
        "info": {
            "date": "1682785717",
            "description": "Focus your eyes on the middle circle. You will see the white circle with some green.\n\nThis is caused by eyes cones fatigue by looking at the red color, by seeing the white your eyes substracts the red color from the white, making it greenish.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtd3z2",
            "likes": 0,
            "name": "Color Stud - After Image PVIII-1",
            "published": 3,
            "tags": [
                "interactionofcolor"
            ],
            "usePreview": 0,
            "username": "Slals",
            "viewed": 125
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TAU 6.2831853071\n#define REMANENCE_SECONDS 60.0\n\nfloat circleSDF(vec2 uv, vec2 c, float r) {\n    return length(uv - c) * r;\n}\n\nfloat fillAA(float x, float s) {\n    return smoothstep(x - 0.002, x + 0.002, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0.0);\n    \n    float r = iResolution.x / iResolution.y;\n    vec2 center = vec2(r * 0.5, 0.5);\n    \n    vec2 workingEyesOffset = vec2(0.0, 0.0);\n    vec2 remanenceOffset = vec2(0.50, 0.0);\n    \n    vec3 red = vec3(0.89, 0.137, 0.227), white = vec3(1.0);\n    vec3 observedColor = red;\n    \n    if (mod(iTime, REMANENCE_SECONDS) > REMANENCE_SECONDS * 0.5) { // remanence\n        observedColor = white;\n        \n        // transition\n        float t = fract(iTime);\n        workingEyesOffset.x = 0.5;\n        remanenceOffset.x = 0.0;\n    } else { // working eyes cones\n        observedColor = red;\n    }\n    \n    float circleA = fillAA(circleSDF((uv + workingEyesOffset) * vec2(r, 1.0), center, 0.5), 0.16);\n    float circleB = fillAA(circleSDF((uv - remanenceOffset) * vec2(r, 1.0), center, 0.5), 0.16);\n\n    float unit = min(iResolution.x, iResolution.y) * 0.5;\n    vec2 bounds = vec2(0.43 * unit, 0.55 * unit) * 1.2;\n    vec2 dir = (iResolution.xy / 2.0) - fragCoord;\n    float rot = (1.0 - iTime / REMANENCE_SECONDS * 2.0) * TAU;\n    float clockA = mod(atan(dir.x, dir.y) + radians(180.0) + rot, TAU);\n    clockA *= float(clockA <= TAU);\n    float intsy = clockA / TAU;\n\n    float clock = dot(step(length(dir), bounds), vec2(0.0, 1.0));\n    \n    color += circleA * red;\n    color += circleB * white;\n    color = mix(color, observedColor, fillAA(clock, 0.1) * intsy);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}