{
    "Shader": {
        "info": {
            "date": "1701473238",
            "description": "https://maps.app.goo.gl/BowjuLFbas8QUeTR8\n\nInercia 2023 Shader Jam ",
            "flags": 0,
            "hasliked": 0,
            "id": "ctdBRl",
            "likes": 3,
            "name": "Estonia",
            "published": 3,
            "tags": [
                "bollard"
            ],
            "usePreview": 0,
            "username": "sp4ghet",
            "viewed": 186
        },
        "renderpass": [
            {
                "code": "const float PI = acos(-1.);\nconst float TAU = PI*2.;\nvec3 up = vec3(0,1,0);\nmat2 r2d(float t){\n  float s = sin(t), c = cos(t);\n  return mat2(c,s,-s,c);\n}\n\nfloat sdb(vec3 p, float radius, float roundness, float height){\n  vec2 d = vec2(length(p.xz) - 2.*radius + roundness, abs(p.y) - height);\n  return min(max(d.x,d.y), 0.0) + length(max(d,0.0)) - roundness;\n}\n\nvec4 mapp(vec3 q){\n  vec3 p = q;\n  float d = 10000.0;\n  vec3 mat = vec3(1);\n  \n  float sp = sdb(p, 0.05, 0.02, 1.);\n  mat2 rot = r2d(PI * .15);\n  p.xy *= rot;\n  vec3 upslant = up;\n  upslant.xy *= rot;\n  float sub = sdb(p-upslant*.7, 0.1, 0.01, 0.15);\n  sp = max(sp, -sub);\n  d = min(sp, d);\n  \n  p = q;\n  float bl = sdb(p-up*.7, 0.04, 0.02, 0.25);\n  vec3 blk = vec3(0.01);\n  if(abs(dot(normalize(p.xz), vec2(0,1))) > 0.9 && abs(p.y - .7) < .14){\n    blk = vec3(.8, .8, .01);\n  }\n  mat = bl < d ? blk : mat;\n  d = min(d,bl);\n  \n  return vec4(d, mat);\n}\n\nvec4 mapt(vec3 p){\n  float t = iTime;\n  float x = length(p.xz) - .25;\n  float y = p.y;\n  float th = atan(y,x);\n  float ph = atan(p.z, p.x);\n  float r = length(vec2(x,y)) - 1.5;\n  p = vec3(r, th+t, ph);\n  p = p.yzx;\n  p.y = mod(p.y, 2.) - 1.;\n  p.x = mod(p.x, .25) - .125;\n  \n  return mapp(p);\n}\n\nvec4 map(vec3 q){\n  vec3 p = q;\n  float time = iTime;\n  float t = fract(time * .03);\n  p -= vec3(-.1, 0., -.2);\n  p.xy *= r2d(TAU * .1);\n  \n  for(int i=0; i<10; i++){\n    p.zy *= r2d(TAU * t + .01);\n    p.xz *= r2d(-TAU * .5 * t);\n    p.z -= .1;\n    p = abs(p);\n  }\n  float bpm = 135.;\n  float beat = time * bpm / 60.;\n  \n  if(mod(floor(beat * .5),3.) < 1.){\n    return mapt(q);\n  }\n  if(mod(floor(beat * .5),3.) < 2.){\n    return mapp(q);\n  }\n  \n  return mapp(p);\n}\n\nvec3 normal(vec3 p){\n  vec2 d = vec2(0.001, 0.);\n  return normalize(vec3(\n    map(p + d.xyy).x - map(p-d.xyy).x,\n    map(p + d.yxy).x - map(p-d.yxy).x,\n    map(p + d.yyx).x - map(p-d.yyx).x\n  ));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = iTime;\n\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = fragCoord/iResolution.xy;\n    \n  vec2 pt = uv - 0.5;\n  pt /= vec2(iResolution.y / iResolution.x, 1);\n  \n  vec3 f = vec3(0);\n  f = uv.y < 1./3. ? vec3(1) : f;\n  f = uv.y > 2./3. ? vec3(0,114./255., 206./255.) : f;\n  \n  vec3 c = vec3(uv,0.);\n  \n  vec3 ro = vec3(0,1,-4);\n  ro.xz *= r2d(time);\n  vec3 fo = vec3(0);\n  vec3 rov = normalize(fo-ro);\n  vec3 cu = normalize(cross(rov,up));\n  vec3 cv = cross(cu,rov);\n  vec3 rd = mat3(cu,cv,rov) * normalize(vec3(pt,1.));\n  vec3 p = ro;\n  vec4 d = vec4(0.);\n  float t = 0.;\n  float th = 0.001;\n  for(int i=0; i<128; i++){\n    p = ro + rd*t;\n    d = map(p);\n    t += d.x * .7;\n    if(abs(d.x) < th){break;}\n  }\n  \n  vec3 l = normalize(vec3(1.));\n  vec3 l2 = normalize(vec3(1.,1.,-1.));\n  if(abs(d.x) < th) {\n    vec3 n = normal(p);\n    c = d.gba * max(dot(n,l),0.01);\n    c += d.gba * max(dot(n,l2),0.01);\n    c = pow(c, vec3(.4545));\n  }else{\n    c = f;\n  }\n  \n  \n  fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}