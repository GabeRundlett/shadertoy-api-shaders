{
    "Shader": {
        "info": {
            "date": "1578851509",
            "description": "I was not sure how to name it so, here it goes. Was supposed to look like a crystal, but it looked bad, so I made it glow :D . ",
            "flags": 32,
            "hasliked": 0,
            "id": "tlK3Wh",
            "likes": 11,
            "name": "Day 24 - Esphaxis",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iTime (iTime + 12.)\nfloat r11(float i) {return fract(sin(i*2124.522)*214.124);}\n\n#define mx (200.*iMouse.x/iResolution.x)\nfloat sdBox(vec3 p, vec3 r){\n    p = abs(p);\n\tp -= r;\n    return max(p.x, max(p.y, p.z));\n}\n#define rot(x) mat2(cos(x),-sin(x),sin(x), cos(x))\n//#define sdmin\n#define pi acos(-1.)\n#define pmod(p, x) mod(p, x) - x*0.5\nvec2 map(vec3 p){\n    \n    float modDist = 8.;\n    float id = floor(p.z/modDist);\n    p.z = pmod(p.z, modDist);\n\tvec2 d = vec2(10e5);\n\n    \n    /*\n    const int iters = 6;\n    for (int i = 0; i < iters; i++){\n    \tp = abs(p);\n\n        p.x -= 1.25;\n        p.y -= 0.9;\n        p.z -= 1.;\n        p.xy *= rot(0.5 + sin(t)*0.1);\n        p.yz *= rot(0.1);\n        if (i == iters - 1){\n            p.z += 0.6;\n            p.y -= 0.1;\n        \tp.yz *= rot(0.2);\n        }\n    \n    }*/\n    \n    float t = iTime + id*2.3;\n    const int iters = 4;\n    for (int i = 0; i < iters; i++){\n    \tp = abs(p);\n        \n        p.x -= 1. + sin(id*1.5)*0.4;\n        p.xy *= rot(0.5 + sin(id)*0.3);\n        p.y -= 1.4;\n        p.z -= .5;\n        if (i == 2){\n        \tp.yz*=rot(0.4 + sin(id)*.2);\n            p.y -= 0.2 + sin(id*421.12)*0.2;\n        \n        }\n        \n        //p.zy *= rot(0.7 - float(i)*0.2);\n        //p.zy *= rot(1.2 - float(i)*0.2);\n    \n    }\n    \n  \td.x = min(d.x, sdBox(p,vec3(0.6)));  \n    //d.x = min(d.x, length(p) - 0.1);  \n   \n    d.x *= 0.5;\n\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.01, 0);\n    return normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return dir + right*uv.x + up*uv.y;\n}\n#define pal(x,t) (0.5 + 0.5*sin(vec3(1.4,1.1,1.9)*t + x))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0. + sin(iTime*0.5)*0.7,0. + sin(iTime*0.8)*0.2,-4);\n    //vec3 ro = vec3(0. + 1.5,0. + sin(iTime*0.8)*0.2,-4);\n    \n\tro.z += iTime*10. + mx;\n    vec3 lookAt = ro + vec3(0,0,5);;\n    lookAt +=  vec3(0. + sin(iTime*0.4),0. + sin(iTime*0.4)*0.5,1);\n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    float bounce = 0.;\n    vec3 attenuation = vec3(1.);\n    float side = 1.;\n    float t = 0.; vec3 p = ro;\n    float tO = 0.;\n    vec3 pO = p;\n    for (int i = 0; i < 300; i++){\n    \tvec2 d = map(p);\n        d.x *= side;\n        \n        if (d.x < 0.001){\n            vec3 n = getNormal(p)*side;\n            \n            vec3 lD = normalize(vec3(-1,-2,1));\n            vec3 h = normalize(lD - rd);\n            \n            float diff = max(dot(n,lD), 0.); \n            float fres = pow(1. - max(dot(-rd, n), 0.), 8.);\n            float spec = pow(max(dot(n, h), 0.), 2.);\n            vec3 albedo = vec3(0.2,0.5,0.9)*0.1;\n            col += mix(albedo*diff, vec3(pal(fres*4. + 5.,0.9 + fres)*attenuation*(spec*fres)*9.54), 0.7)*attenuation;\n            \n            //col += pow( fres, 5.)*pal(1. - fres*10.,10.5)*attenuation*0.5;\n            //col += pow(1. -fres*spec*200., 5.)*pal(fres*9.,9.5)*attenuation*0.1;\n            \n            \n            \n            if (bounce == 0.){\n                tO = t;\n                pO = p;\n            }\n            attenuation *= vec3(0.6,0.7,0.9)*0.6;\n            //side = -side;\n            bounce++;\n            //rd = refract(rd,n, 1. + n.x*0.4 + n.y*0.3);\n            rd = reflect(rd,n );\n            ro = p;\n            t = 0.;\n            d.x = 0.1;\n        \t//break;\n        }\n        if (t > 100.){\n            if (bounce == 0.){\n            \ttO = t;\n                pO = p;\n            }\n        \tbreak;\n        }\n        \n        t += d.x;\n\t\tp = ro + rd*t;\n    }\n    \n    float T = iTime*4.;\n    if(bounce > 0.){\n        float tInterval = 4.;\n        float tId = floor(iTime/tInterval);\n        float tM = mod(iTime,tInterval);\n        float rC = r11(tId);\n        float rN = r11(tId + 1.);\n        \n        vec3 modeA = pow(0.6 + sin(\n            sin(pO.z*5.4 + T)\n        )*0.5, 50.)*vec3(1.)*pal(5.5 ,9.8 + sin(iTime)*0.1);\n        vec3 modeB = pow(0.6 + sin(\n            sin(pO.x*0.2 + T + pO.y*0.4*sin(iTime )*pO.x*2. + sin(iTime))\n        )*0.5, 100.)*vec3(1.)*pal(2.5 ,6.8 + sin(iTime)*0.1);\n        vec3 modeC = pow(0.6 + sin(\n            sin(pO.y*0.01 + T*1. + pO.z*0.2)\n        )*0.48, 100.)*vec3(1.)*pal(5.5 ,6.8 + sin(iTime)*0.1);\n        vec3 currMode, nextMode = vec3(0);\n        float currId = floor(rC*2.99), nextId = floor(rN*2.99);\n        \n        currId == 0. ? currMode = modeA : currId == 1. ? currMode = modeB : currId == 2. ? currMode = modeC : currMode;\n        nextId == 0. ? nextMode = modeA : nextId == 1. ? nextMode = modeB : nextId == 2. ? nextMode = modeC :  nextMode;\n        \n        col += mix(currMode,nextMode, pow(tM/tInterval, 3.));\n    \n    }\n    //col = mix(col,smoothstep(0.,0.95, col), 0.5);\n    col.g *= 0.98;\n    col = mix(col, vec3(0.,0,0.),pow((tO - 5.2)*0.02, 2.));\n    col = pow(col, vec3(0.45));\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "ivec2 offsets[8] = ivec2[8]( ivec2(-1,-1), ivec2(-1, 1), \n\tivec2(1, -1), ivec2(1, 1), \n\tivec2(1, 0), ivec2(0, -1), \n\tivec2(0, 1), ivec2(-1, 0));\n\nvec3 RGBToYCoCg( vec3 RGB )\n{\n\tfloat Y = dot(RGB, vec3(  1, 2,  1 )) * 0.25;\n\tfloat Co= dot(RGB, vec3(  2, 0, -2 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\tfloat Cg= dot(RGB, vec3( -1, 2, -1 )) * 0.25 + ( 0.5 * 256.0/255.0 );\n\treturn vec3(Y, Co, Cg);\n}\n\nvec3 YCoCgToRGB( vec3 YCoCg )\n{\n\tfloat Y= YCoCg.x;\n\tfloat Co= YCoCg.y - ( 0.5 * 256.0 / 255.0 );\n\tfloat Cg= YCoCg.z - ( 0.5 * 256.0 / 255.0 );\n\tfloat R= Y + Co-Cg;\n\tfloat G= Y + Cg;\n\tfloat B= Y - Co-Cg;\n\treturn vec3(R,G,B);\n}\n\n//#define NO_AA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;    \n    vec3 new = RGBToYCoCg(textureLod(iChannel0, q, 0.0).xyz);\n    vec3 history = RGBToYCoCg(textureLod(iChannel1, q, 0.0).xyz);\n    \n    vec3 colorAvg = new;\n    vec3 colorVar = new*new;\n    \n    // Marco Salvi's Implementation (by Chris Wyman)\n    for(int i = 0; i < 8; i++)\n    {\n        vec3 fetch = RGBToYCoCg(texture(iChannel0, ((fragCoord.xy+float(offsets[i])*0.2 )/iResolution.xy)).xyz);\n        colorAvg += fetch;\n        colorVar += fetch*fetch;\n    }\n    colorAvg /= 9.0;\n    colorVar /= 9.0;\n    float gColorBoxSigma = 0.75;\n\tvec3 sigma = sqrt(max(vec3(0.0), colorVar - colorAvg*colorAvg));\n\tvec3 colorMin = colorAvg - gColorBoxSigma * sigma;\n\tvec3 colorMax = colorAvg + gColorBoxSigma * sigma;\n    \n    history = clamp(history, colorMin, colorMax);\n  \n\tfragColor = vec4(YCoCgToRGB(mix(new, history, 0.95)), 1.0);\n#ifdef NO_AA\n    fragColor = vec4(YCoCgToRGB(new), 1.0);\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}