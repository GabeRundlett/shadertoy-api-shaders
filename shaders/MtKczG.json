{
    "Shader": {
        "info": {
            "date": "1536815246",
            "description": "Just fooling around with IQ's hexagon function",
            "flags": 0,
            "hasliked": 0,
            "id": "MtKczG",
            "likes": 38,
            "name": "hextacy",
            "published": 3,
            "tags": [
                "hexagaons"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 949
        },
        "renderpass": [
            {
                "code": "// Just fooling around with IQ's hexagon function\n// Orion Elenzil 2018\n\n#define PI    (3.14159265359)\n#define TWOPI (2.0 * PI)\n\n// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// { 2d cell id, distance to border, distnace to center )\nvec4 hexagon( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n    // distance to borders\n\tfloat e = dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) );\n\n\t// distance to center\t\n\tp = vec2( q.x + floor(0.5+p.y/1.5), 4.0*p.y/3.0 )*0.5 + 0.5;\n\tfloat f = length( (fract(p) - 0.5)*vec2(1.0,0.85) );\t\t\n\t\n\treturn vec4( pi + ca - cb*ma, e, f );\n}\n\n// 2d cell ID, distance to border, distance to center\nvec4 square(vec2 p) {\n    p = p * 0.71;\n    \n\tvec2 pi = floor(p + vec2(0.5));\n\tvec2 pf = fract(p);\n    \n    \n    float e = 2.0 * min(abs(pf.x - 0.5), abs(pf.y - 0.5));\n    // i've clearly chosen the wrong coordinate system somewhere\n    float f = 1.0 * length(fract(p - vec2(0.5)) - vec2(0.5));\n    return vec4(pi, e, f);   \n}\n\nvec4 shape(vec2 p) {\n//    if (int(iTime / 5.0) % 2 == 0) {\n        return hexagon(p);\n//    }\n//    else {\n//        return square(p);\n//    }\n}\n\nmat2 rot(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv.x /= iResolution.y / iResolution.x;\n    vec2 uvPlain = uv;\n    float t = iTime * 0.01;\n    uv.x += cos(t) * 20.0;\n    uv.y += sin(t) * 20.0;\n    uv *= 4.0;\n    \n    vec4 h = shape(uv);\n    float q0 = float(abs(int(h.y * h.x)) % 5 - 1);\n    q0 += q0 >= 0.0 ? 1.0 : 0.0;\n    \n    uv = h.xy + uv * q0 * 0.7;\n    h = shape(uv);\n    \n\n    // Time varying pixel color\n    vec3 col = vec3(1.0);\n    float q1 = float(int(h.y * h.x) % 10 - 3);\n    float q2 = smoothstep(-0.5, 0.5, sin((h.z * 25.0 + (q1 * 2.0 - 1.0) * -iTime * 0.7)));\n    q2 = q1 == 0.0 ? q2 : 1.0 - q2;\n    q2 = q2 * 0.25 + 0.5;\n    col *= q2;\n    if (h.z > 0.3) {\n\t    col.x *= h.w * 5.0 - q1 * 0.2;\n    }\n    \n    for (int n = 2; n >= 0; --n) {\n        vec2 uvVignette = uvPlain * vec2(2.0, 2.0);\n        uvVignette *= 1.0 - (float(n) / 7.6);\n        uvVignette *= rot(iTime * 0.1 * (n % 2 == 0 ? -1.0 : 1.0));\n        h = shape(uvVignette);\n        if (h.x == h.y && h.x == 0.0) {\n            if (n == 0) {\n\t            col *= smoothstep(0.0, 0.2, h.z);\n            }\n            float fn = float(n);\n            col += smoothstep(0.02 / (fn + 1.0), 0.0, abs(h.z - 0.03)) * \n                (vec3(0.3) + 0.4 *\n                 vec3(sin(iTime + float(n) + TWOPI * 0.0 / 3.0),\n                      sin(iTime + float(n) + TWOPI * 1.0 / 3.0),\n                      sin(iTime + float(n) + TWOPI * 2.0 / 3.0)));\n        }\n        else {\n            col *= 0.6;\n            vec3 grad = vec3(dFdx(h.z), dFdy(h.z), 0.0);\n            grad.z = (grad.x + grad.y) * 0.5;\n            col.zyx += grad * 10.0;\n        }\n    }\n    \n    if (h.x == h.y && h.x == 0.0) {\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}