{
    "Shader": {
        "info": {
            "date": "1623339348",
            "description": "A fluidly subdividing reaction/diffusion field. Use the mouse to control the zoom.",
            "flags": 32,
            "hasliked": 0,
            "id": "7tBGz1",
            "likes": 35,
            "name": "Byzantine Buffering",
            "published": 3,
            "tags": [
                "scaling",
                "cellularautomaton"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 670
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 C = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord / iChannelResolution[0].xy;\n    float m = float(iFrame % R) / float(R);  \n    uv -= C;\n    uv.x *= iResolution.x / iResolution.y;\n    uv = uv / (1.0 + 0.1*dot(uv,uv));\n    uv.x /= iResolution.x / iResolution.y;\n    uv *= exp(mix(log(1.0),log(0.5),m));\n    float f = 0.004;\n    vec2 uv3 = uv * exp(0.0) + C;\n    vec2 uv2 = uv * exp(-f) + C;\n    vec2 uv1 = uv * exp(-f*2.0) + C;\n    float r = texture(iChannel0, uv1).r*0.5+0.5;\n    float g = texture(iChannel0, uv2).r*0.5+0.5;\n    float b = texture(iChannel0, uv3).r*0.5+0.5;    \n    fragColor = vec4(pow(vec3(r,g,b), vec3(0.5)),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec4 process(vec2 c) {\n    vec2 sz = iChannelResolution[0].xy;\n    vec4 v0 = texture(iChannel0, (c + vec2(-1,0)) / sz);\n    vec4 v1 = texture(iChannel0, (c + vec2( 1,0)) / sz);\n    vec4 v2 = texture(iChannel0, (c + vec2(0,-1)) / sz);\n    vec4 v3 = texture(iChannel0, (c + vec2(0, 1)) / sz);    \n    vec4 v4 = texture(iChannel0, c / sz);\n    float w = ((iFrame % 2) == 0)?0.367879:3.0;\n    float k = (1.0 - w) / 4.0;    \n    return w * v4 + k * (v0 + v1 + v2 + v3); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 C = iMouse.xy / iResolution.xy;\n    if (iFrame == 0) {\n        vec2 uv = (fragCoord / iResolution.xy) * 2.0 - 1.0;        \n        uv.x *= iResolution.x / iResolution.y;\n        float c0 = length(uv) - 0.5;\n        float c1 = length(uv - vec2(0.0,0.25));\n        float c2 = length(uv - vec2(0.0,-0.25));\n        float d = max(min(max(c0, -uv.x),c1-0.25),-c2+0.25);        \n        d = max(d, -c1+0.07);\n        d = min(d, c2-0.07);\n        d = min(d, abs(c0)-0.01);\n        float w = sign(d) * sin(c0*80.0);\n        fragColor = vec4(w);\n    } else if ((iFrame % R) == 0) {\n        vec2 c = vec2(fragCoord / iResolution.xy);\n        fragColor = texture(iChannel0, (c - C) / 2.0 + C);\n    } else {\n        vec4 s = process(fragCoord);\n        fragColor = clamp(s, -1.0, 1.0);\n    }    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int R = 360;\n\n//const vec2 C = vec2(0.5, 0.0);\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}