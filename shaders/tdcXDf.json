{
    "Shader": {
        "info": {
            "date": "1572999514",
            "description": "Curl noise implemented using a perlin noise fbm vector field, and then used to distort the uv to advect a worley noise fbm. ",
            "flags": 0,
            "hasliked": 0,
            "id": "tdcXDf",
            "likes": 19,
            "name": "Psychedelic Curl Noise",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "fluid",
                "random",
                "curl",
                "worley"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 1682
        },
        "renderpass": [
            {
                "code": "// Remap function to perform an affine transformation on a float\nfloat remap(float x, float a, float b, float c, float d)\n{\n    return (((x - a) / (b - a)) * (d - c)) + c;\n}\n\n// Hash functions by Dave_Hoskins\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * (1.0 / float(0xffffffffU));\n}\n\nvec2 hash22(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p))*uvec2(1597334673U, 3812015801U);\n\tq = (q.x ^ q.y) * uvec2(1597334673U, 3812015801U);\n\treturn vec2(q) * (1.0 / float(0xffffffffU));\n}\n\nfloat perlin (vec2 uv) {\n    vec2 id = floor(uv);\n    vec2 gv = fract(uv);\n\n    // Four corners in 2D of a tile\n    float a = hash12(id);\n    float b = hash12(id + vec2(1.0, 0.0));\n    float c = hash12(id + vec2(0.0, 1.0));\n    float d = hash12(id + vec2(1.0, 1.0));\n\n    vec2 u = gv * gv * (3.0 - 2.0 * gv);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvec2 curl (vec2 uv)\n{\n    vec2 eps = vec2(0., 1.);\n    \n    float n1, n2, a, b;\n    n1 = perlin(uv+eps);\n    n2 = perlin(uv-eps);\n    a = (n1-n2)/(2.*eps.y); // ∂x1/∂y\n    \n    n1 = perlin(uv+eps.yx);\n    n2 = perlin(uv-eps.yx);\n    b = (n1-n2)/(2.*eps.y); // ∂y1/∂x\n    \n    return vec2(a, -b);\n}\n\n\nfloat worley(vec2 uv, float freq, float t)\n{\n    uv *= freq;\n    uv += t;\n    \n    vec2 id = floor(uv);\n    vec2 gv = fract(uv);\n    \n    float minDist = 100.;\n    for (float y = -1.; y <= 1.; ++y)\n    {\n        for(float x = -1.; x <= 1.; ++x)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 h = hash22(id + offset) * .8 + .1; // .1 - .9\n    \t\th += offset;\n            vec2 d = gv - h;\n           \tminDist = min(minDist, dot(d, d));\n        }\n    }\n    \n    return minDist + .4;\n}\n\n// Worley noise fbm using uvs offset by curl noise\nvec3 fbmCurlWorley(vec2 uv, float freq, float t)\n{\n    float worley1 = 1. - worley(uv, freq * 2., t * 2.);\n    float worley2 = 1. - worley(uv, freq * 4., t * 4.);\n    float worley3 = 1. - worley(uv, freq * 8., t * 8.);\n    float worley4 = 1. - worley(uv, freq * 16., t * 16.);\n    \n    float fbm1 = worley1 * .625 + worley2 * .25 + worley3 * .125;\n    float fbm2 = worley2 * .625 + worley3 * .25 + worley4 * .125;\n    float fbm3 = worley3 * .75 + worley4 * .25;\n    return vec3(fbm1, fbm2, fbm3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= aspectRatio;\n    uv += curl(uv * 7.); // offset uvs for advection\n    \n    float t = iTime * .3;\n    \n    vec3 curlWorleyFbm = fbmCurlWorley(uv, 4., t);\n    float curlWorley = curlWorleyFbm.r * .625 + curlWorleyFbm.g * .25 + \n        curlWorleyFbm.b * .125;\n    \n    vec3 col = vec3(0.);\n    col += remap(curlWorley, 0., 1., .25, 1.);\n    col = mix(sin(t * 3.0 + uv.xyx + vec3(0, 2, 4)), cos(t * 3.0 + uv.yxy + vec3(4, 2, 0)), col.x * col.x) * 0.5 + 0.5;\n    fragColor = vec4(pow(col, vec3(0.625)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}