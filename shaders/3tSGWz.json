{
    "Shader": {
        "info": {
            "date": "1559001827",
            "description": "happy cactus! - made some changes / improvements - use mouse to look around.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tSGWz",
            "likes": 14,
            "name": "Happy Cactus",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "sdf",
                "animation",
                "trippy",
                "happy",
                "cactus"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 890
        },
        "renderpass": [
            {
                "code": "// Happy Cactus - Del - 27/05/2019\n// mouthblend / eye / arm updates 03/06/2019\n\n#define PI 3.14159\n#define\tTAU 6.28318\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    vec2 mouse2 = vec2(0.0);\n    \n    mouse2.y = 0.25;\n    mouse2.x = sin(time*0.75)*0.05;\n    if (iMouse.z > 0.5)\n    {\n        mouse2 = mouse;\n        mouse2.y -= 0.1;\n    }\n    float an = 10.0*mouse2.x;\n\tcamPos = vec3(7.5*sin(an),0.0+mouse2.y*8.0,7.5*cos(an));\n    camTar = vec3(0.0,sin(iTime*0.85),0.0);\n}\n    \n//------------------------------------------------------------------------\n// Modelling \n//------------------------------------------------------------------------\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdEllipsoid(const in  vec3 p, const in vec3 r)\n{\n  return (length(p / r) - 1.0) * min(min(r.x, r.y), r.z);\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat dot2( in vec2 v )\n{\n    return dot(v,v);\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 opUnionRound(const in vec2 a, const in vec2 b, const in float r)\n{\n    vec2 res = vec2(smin(a.x,b.x,r),(a.x<b.x) ? a.y : b.y);\n    return res;\n}\n\nvec2 opS( vec2 d1, vec2 d2 )\n{ \n    return (-d1.x>d2.x) ? vec2(-d1.x, d1.y): d2;\n}\n\nfloat TimerInOut(vec4 v)\n{\n    return smoothstep(v.y,v.y+v.w,v.x) - smoothstep(v.z-v.w,v.z,v.x);\n}\n\nfloat onion( in float d, in float h )\n{\n    return abs(d)-h;\n}\n\n// model\nvec2 pot(vec2 res, vec3 p)\n{\n    float rimh = 0.05;\n    float poth = 1.7;\n   \tfloat d2 = sdCappedCylinder(p+vec3(0.0,rimh,0.0),vec2(2.1,rimh))-0.05;\n   \tfloat d3 = sdCappedCone(p+vec3(0.0,poth,0.0), poth, 1.6,2.1);\n    d2 = onion(d2-0.8,0.02);\n    d3 = onion(d3-0.8,0.02);\n    d2 = smin(d2,d3,0.15);\n    d2 = max( d2, p.y+0.05 );\n\tvec2 res1 = vec2(d2,3.0);\n    // dirt\n   \tfloat d4 = sdCappedCylinder(p+vec3(0.0,0.4,0.0),vec2(2.65,0.02));\n    vec2 res2 = vec2(d4,1.0);\n\tres1 = opUnionRound(res1,res2,0.6);     \n \tres = opUnionRound(res,res1,0.15);  \n    return res;\n}\n\nfloat mouthblend = 0.0;\nfloat blink = 0.0;\n\nvec2 sdCactusXZ(vec3 p, float w, float h, float offset)\n{\n    float d1 = sdEllipsoid(p,vec3(w,h,w));\n\td1+=abs(sin(atan(p.x/p.z)*8.0)*(offset*(h-abs(p.y))));\n    return vec2(d1,2.0);\n}\nvec2 sdCactusXY(vec3 p, float w, float h, float offset)\n{\n    float d1 = sdEllipsoid(p,vec3(h,w,w));\n\td1+=abs(sin(atan(p.z/p.y)*8.0)*(offset*(h-abs(p.x))));\n    return vec2(d1,2.0);\n}\n\nvec2 Arm(vec3 p)\n{\n\tvec2 a1 = sdCactusXY(p-vec3(1.4,0.2,0.0),0.35,1.0,0.0125);\n\tvec2 a2 = sdCactusXZ(p-vec3(2.1,1.0,0.0),0.35,1.0,0.0125);\n    return opUnionRound(a1,a2, 0.15);\n}\n\n\nvec2 doModel( vec3 p )\n{\n    p-=vec3(0.0,0.7,0.0);\n    \n    // body\n\tvec2 res = sdCactusXZ(p,1.3,2.6, 0.0225);\n    // arms\n \tres = opUnionRound(Arm(p),res, 0.15);    \n    vec3 p2 = p;\n    p2.x = -p2.x;\n \tres = opUnionRound(Arm(p2-vec3(0.0,0.7,0.0)),res, 0.15);\n    \n    // mouth\n    vec3 q = p;\n    q.x = abs(q.x);\n    q.yz *= rot(-pow(q.x, 2.8));\n    q.z -= 1.25;\n    vec2 mouth1 = vec2(sdCapsule(q, vec3(0.35, 0.0, 0.0), vec3(-0.35, 0.0, 0.0), .025)-0.115, 4.0);\n\n    mouth1.x = mix(sdSphere(q,0.25),mouth1.x,mouthblend);\n    res = opS(mouth1,res);\n        \n\t// eyes    \n    p.x = abs(p.x);\n    float d2 = sdSphere(p+vec3(-0.3,-1.0,-1.1),0.2);\n    res = opUnionRound(vec2(d2,5.0),res, 0.025);\n    // pot\n\tres = pot(res,p+vec3(0.0,1.1,0.0));\n    return res;\n}\n\n\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal.\n//------------------------------------------------------------------------\n// c = colour index (added by del for some materials)\n// c.a == specular val fudged in...\n\nvec4 EyeTest(vec3 n)\n{\n    n = normalize( n );\n    n.zy *= rot(sin(iTime*1.15)*0.3);\n    vec2 uv = vec2(atan(n.z,n.x) / TAU, asin(n.y) / TAU);\n    uv.x -= 0.25;\n    float d1 = length(uv)-0.02;\t\n    float d2 = smoothstep(0.0,0.02, d1-0.05);\n    d1 = smoothstep(0.0,0.02, d1);\n    vec3 col = vec3(0.05,0.15,0.4)*d1;\n    col = mix(col,vec3(0.24,0.24,0.24),d2);\n    return blink > 0.0 ? vec4(col.xyz,2.0) : vec4(0.03,0.2,0.05,0.25);\n}\n\nfloat hash(vec3 p)\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(p+vec3(0,0,0)), \n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)), \n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)), \n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)), \n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n\nvec4 doMaterial( in vec3 pos, in vec3 nor,float c )\n{\n    if (c<=2.0)\n    {\n\t\tvec3 q = pos*12.0;\n\t\tfloat f  = 0.5*noise( q ); q = m*q;\n\t\tf += 0.2500*noise( q ); q = m*q;\n\t\tf += 0.1250*noise( q ); q = m*q;\n\t\tf += 0.0625*noise( q ); q = m*q;        \n        if (c<=1.0)\n\t\t\treturn vec4(0.08, 0.05, 0.03,0.1)*f;\t// dirt\n        f=0.5+(f*0.4);\n        return vec4(0.03,0.2,0.05,0.5)*f;\t\t\t// cactus\n    }\n    else if (c<=3.0)\n    {\n\t\treturn vec4(0.2, 0.06, 0.03,0.4);\t// pot\n    }\n    else if (c<=4.0)\n    {\n\t\treturn vec4(0.1, 0.08, 0.03, 0.8);\t// mouth\n    }\n    \n    return EyeTest(nor);\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mat )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(0.7,0.875,0.89));\t\t// dir\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0;\n    if( dif>0.01 )\n        sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n\tfloat spec = pow(dif, 160.0) *mat.a;\n    \n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mat.xyz*lin;\n    col+=spec;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.002*dis*dis);\n\n    return col;\n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n    vec2 res = vec2(-1.0,0.0);\n    float c = 0.0;\n    \n    for( int i=0; i<60; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n        vec2 res2 = doModel( ro+rd*t );\n\t    h = res2.x;\n        c = res2.y;\n        \n        t += h*0.95;\n    }\n\n    if( t<maxd )\n    {\n        res.x = t;\n        res.y = c;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 background(vec2 pos)\n{\n    pos.x = abs(pos.x);\n    float d = length(pos*pos);\n    pos+=vec2(0.5);\n\tfloat vv = pos.y*pos.y;\n\tvv+=sin(exp(1.0-pos.x));\n\tfloat v = sin(sin(pos.x*16.0)+(vv+iTime*.1) * 42.0)+0.95;\n    v*=0.9-d*d;\n    \n    v = clamp(v,0.1,1.0);\n    \n\treturn vec3( v*1.1,0.05+v*.6, 0.2+v*0.45);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    // anims\n    blink = step(sin(iTime * 2.8 + cos(iTime * 2.0) * 2.0), 0.98);\n\tmouthblend = TimerInOut(vec4(mod(iTime,4.5),0.0,3.7,0.3));\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, sin(iTime)*0.25 );\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n  \t//vec3 col = mix( vec3(0.2, 0.2, 0.5), vec3(0.5, 0.7, 1.0), fragCoord.y / iResolution.y );\n    vec3 col = background((fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y);\n\n\t// raymarch\n    vec2 res = calcIntersection( ro, rd ); \n    float t = res.x;\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec4 mat = doMaterial( pos, nor, res.y );\n\n        col = doLighting( pos, nor, rd, t, mat );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}