{
    "Shader": {
        "info": {
            "date": "1692397070",
            "description": "Circles tangent to a heart shape",
            "flags": 0,
            "hasliked": 0,
            "id": "dljyDc",
            "likes": 91,
            "name": "Just touching the heart",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "sdf",
                "heart"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2045
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2023 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n\n// heart shape: https://www.shadertoy.com/view/3tyBzV\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdHeart( in vec2 p )\n{\n    p.y += 0.6;\n    p.x = abs(p.x);\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75)))-sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))); //*sign(p.x-p.y); // don't need sign really for this shader\n}\n\n// oldschool rand() from Visual Studio\nint seed=666; float frand(void) {seed=seed*0x343fd+0x269ec3;return float((seed>>16)&32767)/32767.0;}\n\n// for each pixel, do math\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2  p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    // add circles over time (loop every 15 seconds)\n    float time = mod( iTime, 15.0 );\n    const int kMaxNum = 1536;\n    float fnum = 16.0*(time/10.0) + (float(kMaxNum)-16.0)*pow(time/10.0,3.0);\n    int   inum = min(1+int(floor(fnum)),kMaxNum);\n\n    // gradually make brush softer\n    float brush = 0.3 + 0.3*pow(max(0.0,1.0-float(inum)/float(kMaxNum)),4.0);\n\n    // draw circles\n    float col = 1.0;\n    for( int i=0; i<inum-1; i++ )\n    {\n        // pick random positions\n        vec2  q = vec2(1.3,0.9)*(-1.0+2.0*vec2(frand(),frand()));\n\n        // compute the distance to the art\n        float r = sdHeart(q/1.15)*1.15;\n\n        // and make a circle of size equal to that distance\n        float d = abs(length(p-q)-abs(r))-0.001;\n\n        // put black inc for this circle\n        col *= 1.0 - brush*smoothstep(2.0*px, -2.0*px, d);\n    }\n\n    // only last cicle needs angular animation\n    {\n        vec2  q  = vec2(1.3,0.9)*(-1.0+2.0*vec2(frand(),frand()));\n        vec2  w  = p - q;\n        float ra = atan(w.y,w.x)/6.283185; if(ra<0.0) ra += 1.0;\n        float da = fnum-float(inum-1);\n        float al = smoothstep( 0.0, 0.1, 1.1*da - ra );\n        float r  = sdHeart(q/1.15)*1.15;\n        float d  = abs(length(w)-abs(r))-0.001;\n        col *= 1.0 - al*brush*smoothstep(2.0*px, -2.0*px, d);\n    }\n    \n    // gradually introduce vignetting\n    col *= 1.0 - 0.1*length(p) * (float(inum)/float(kMaxNum));\n\n    // fade to white\n    col = mix( col, 1.0, smoothstep(12.0,15.0f,time) );\n    \n    fragColor = vec4(col,col,col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}