{
    "Shader": {
        "info": {
            "date": "1586167041",
            "description": "Implémentation très simple du jeux de la vie. Very simple Game Of Life implementation.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dd3RB",
            "likes": 0,
            "name": "Jeux de la Vie (John Conway)",
            "published": 3,
            "tags": [
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "pascalballet",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz; // Lecture du buffer\n    fragColor = vec4(col,1.0); // Ecriture dans l'image courante (ViewPort)\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Génération d'un nombre aléatoire\n// en fonction de la position dans le buffer\n// Pour plus d'info voir https://www.shadertoy.com/view/XtX3D4\n// Thanks to Michael Pohoreski https://www.shadertoy.com/user/MichaelPohoreski\nfloat random( vec2 p )\n{\n    vec2 K1 = vec2(23.14069263277926, 2.665144142690225); // 23.14=e^pi (Gelfond's constant) et 2.66=2^sqrt(2) (Gelfond–Schneider constant)\n    return fract( cos( dot(p,K1) ) * 12345.6789 );\n}\n\n// Fonction principale\n// du Jeux de la Vie\n// par John Conway vers l'année 1965\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    if( iFrame == 0 ) { // Initialisation\n        if(random(fragCoord) < 0.5) {\n    \t\tcol = vec3(0.0, 0.0, 0.0);\n        } else {\n            col = vec3(1.0, 1.0, 1.0);\n        }\n    } else { // Execution\n     \tcol = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz;\n        vec3 col_g = texelFetch( iChannel0, ivec2(fragCoord + vec2(-1.0, 0.0) ), 0 ).xyz;\n        vec3 col_d = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0, 0.0) ), 0 ).xyz;\n        vec3 col_h = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0, 1.0) ), 0 ).xyz;\n        vec3 col_b = texelFetch( iChannel0, ivec2(fragCoord + vec2( 0.0,-1.0) ), 0 ).xyz;\n        vec3 col_gb = texelFetch( iChannel0, ivec2(fragCoord + vec2(-1.0,-1.0) ), 0 ).xyz;\n        vec3 col_db = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0,-1.0) ), 0 ).xyz;\n        vec3 col_gh = texelFetch( iChannel0, ivec2(fragCoord + vec2(-1.0, 1.0) ), 0 ).xyz;\n        vec3 col_dh = texelFetch( iChannel0, ivec2(fragCoord + vec2( 1.0, 1.0) ), 0 ).xyz;\n        \n        int nbVivants = 0;\n        if( col_g == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_d == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_h == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_b == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_gb == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_db == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_gh == vec3(1.0,1.0,1.0)) nbVivants++;\n        if( col_dh == vec3(1.0,1.0,1.0)) nbVivants++;\n        \n        if(col == vec3(0.0, 0.0, 0.0) ) { // MORT\n            if( nbVivants == 3) col = vec3(1.0, 1.0, 1.0); // NAISSANCE\n        } else { // VIVANT\n   \t\t\tif( nbVivants < 2) col = vec3(0.0, 0.0, 0.0); // MORT PAR ISOLEMENT\n            if( nbVivants == 2 || nbVivants == 3) col = vec3(1.0, 1.0, 1.0);\n            if( nbVivants > 3) col = vec3(0.0, 0.0, 0.0); // MORT PAR SURPOPULATION\n        }\n    }    \n    fragColor = vec4(col, 1.0); // Ecriture de la nouvelle cellule dans le buffer de sortie\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}