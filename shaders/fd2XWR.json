{
    "Shader": {
        "info": {
            "date": "1620018806",
            "description": "Utilities for automatic differentiation. Demo shows how constant width graphs can be made using derivatives. Maybe I can differentiate my cubic solver now! Suggestions for other functions are welcome.",
            "flags": 0,
            "hasliked": 0,
            "id": "fd2XWR",
            "likes": 10,
            "name": "Autodiff Utilities",
            "published": 3,
            "tags": [
                "1d",
                "derivatives",
                "autodiff",
                "utilities"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// Everything is done with vec2s\n// x component contains the output value\n// y component contains the derivative\n#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\n// Differentiating noise?!? :D\nvec2 noise(in vec2 x) {\n    return fFract(fMul(const2dual(367.436), fCos(fMul(const2dual(439.573), x))));\n}\n\nvec2 smoothNoise(in vec2 x) {\n    return fMix(noise(fFloor(x)), noise(fCeil(x)), fSmoothstep(const2dual(0.0), const2dual(1.0), fFract(x)));\n}\n\nvec2 rollingFbm(in vec2 x) {\n    vec2 value = const2dual(0.0);\n    float tscale = 0.0;\n    float nscale = 1.0;\n    for (int o=0; o < 10; o++) {\n        value = fAdd(value, smoothNoise(fSub(x, const2dual(iTime))) * nscale);\n        tscale += nscale;\n        nscale *= 0.5;\n        x *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nvec2 f(in vec2 x) {\n    return fMix(fCos(x), rollingFbm(x), const2dual(0.5 + 0.5 * cos(iTime)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Draw the function\n    vec2 y = f(var2dual(uv.x));\n    draw(abs(uv.y - y.x) / sqrt(1.0 + y.y * y.y), vec3(0.8, 0.0, 0.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Copy-paste this entire line to include in your shader\nvec2 const2dual(float x){return vec2(x,0);}vec2 var2dual(float x){return vec2(x,1);}vec2 fAdd(vec2 a,vec2 b){return a+b;}vec2 fSub(vec2 a,vec2 b){return a-b;}vec2 fMul(vec2 a,vec2 b){return vec2(a.x*b.x,a.x*b.y+a.y*b.x);}vec2 fDiv(vec2 a,vec2 b){return vec2(a.x/b.x,(b.x*a.y-a.x*b.y)/(b.x*b.x));}vec2 fInv(vec2 z){float q=1./z.x;return vec2(q,-z.y*q/z.x);}vec2 fPow(vec2 a,vec2 b){float q=pow(a.x,b.x);return vec2(q,q*(b.x*a.y/a.x+b.y*log(a.x)));}vec2 fConstPow(vec2 z,float power){float q=pow(z.x,power);return vec2(q,power*z.y*q/z.x);}vec2 fIntPow(vec2 z,int power){float res=1.;for(int n=0;n<abs(power);n++){res*=z.x;}if(power<0)res=1./res;return vec2(res,float(power)*res/z.x*z.y);}vec2 fSquare(vec2 z){return vec2(z.x*z.x,2.*z.x*z.y);}vec2 fSqrt(vec2 z){float q=sqrt(z.x);return vec2(q,.5*z.y/q);}vec2 fExp(vec2 z,float base){float q=pow(base,z.x);return vec2(q,q*z.y);}vec2 fLn(vec2 z){return vec2(log(z.x),z.y/z.x);}vec2 fSin(vec2 z){return vec2(sin(z.x),cos(z.x)*z.y);}vec2 fCos(vec2 z){return vec2(cos(z.x),-sin(z.x)*z.y);}vec2 fTan(vec2 z){float q=cos(z.x);return vec2(tan(z.x),z.y/(q*q));}vec2 fAsin(vec2 z){return vec2(asin(z.x),z.y/sqrt(1.-z.x*z.x));}vec2 fAcos(vec2 z){return vec2(acos(z.x),-z.y/sqrt(1.-z.x*z.x));}vec2 fAtan(vec2 z){return vec2(atan(z.x),z.y/(1.+z.x*z.x));}vec2 fSinh(vec2 z){return vec2(sinh(z.x),cosh(z.x)*z.y);}vec2 fCosh(vec2 z){return vec2(cosh(z.x),sinh(z.x)*z.y);}vec2 fTanh(vec2 z){float q=cosh(z.x);return vec2(tanh(z.x),z.y/(q*q));}vec2 fAsinh(vec2 z){return vec2(asinh(z.x),z.y/sqrt(z.x*z.x+1.));}vec2 fAcosh(vec2 z){return vec2(acosh(z.x),z.y/sqrt(z.x*z.x-1.));}vec2 fAtanh(vec2 z){return vec2(atanh(z.x),z.y/(1.-z.x*z.x));}vec2 fMin(vec2 a,vec2 b){return a.x<b.x?a:b;}vec2 fMax(vec2 a,vec2 b){return a.x>b.x?a:b;}vec2 fFloor(vec2 z){return vec2(floor(z.x),0);}vec2 fCeil(vec2 z){return vec2(ceil(z.x),0);}vec2 fAbs(vec2 z){return vec2(abs(z.x),z.y*sign(z.x));}vec2 fSign(vec2 z){return vec2(sign(z.x),0);}vec2 fMod(vec2 a,vec2 b){return vec2(mod(a.x,b.x),a.y);}vec2 fFract(vec2 z){return vec2(fract(z.x),z.y);}vec2 fClamp(vec2 z,vec2 edge0,vec2 edge1){return fMax(edge0,fMin(edge1,z));}vec2 fSmoothstep(vec2 edge0,vec2 edge1,vec2 z){z=fClamp(fDiv(z-edge0,edge1-edge0),vec2(0),vec2(1,0));vec2 sq=fSquare(z);return 3.*sq-2.*fMul(sq,z);}vec2 fMix(vec2 a,vec2 b,vec2 t){return a+fMul(b-a,t);}\n\n/*\n// FOR DEVELOPEMENT\n\n// Conversion to dual numbers\n// Variables are what you are differentiating with respect to\n// Constants are everything else\nvec2 const2dual(in float x) {\n    return vec2(x, 0.0);\n}\n\nvec2 var2dual(in float x) {\n    return vec2(x, 1.0);\n}\n\n// Elementary operations (+/-,\nvec2 fAdd(in vec2 a, in vec2 b) {\n    return a + b;\n}\n\nvec2 fSub(in vec2 a, in vec2 b) {\n    return a - b;\n}\n\n// Multiply or divide by a constant (as well as +/-) can be done\n// as though x were an ordinary number without extra overhead\nvec2 fMul(in vec2 a, in vec2 b) {\n    return vec2(a.x * b.x, a.x * b.y + a.y * b.x);\n}\n\nvec2 fDiv(in vec2 a, in vec2 b) {\n    return vec2(a.x / b.x, (b.x * a.y - a.x * b.y) / (b.x * b.x));\n}\n\n// 1/z\nvec2 fInv(in vec2 z) {\n    float q = 1.0 / z.x;\n    return vec2(q, -z.y * q / z.x);\n}\n\n// a^b\nvec2 fPow(in vec2 a, in vec2 b) {\n    float q = pow(a.x, b.x);\n    return vec2(q, q * (b.x * a.y / a.x + b.y * log(a.x)));\n}\n\n// Less expensive cases of fPow()\nvec2 fConstPow(in vec2 z, in float power) {\n    float q = pow(z.x, power);\n    return vec2(q, power * z.y * q / z.x);\n}\n\n// For integer powers (0 and negative powers supported)\nvec2 fIntPow(in vec2 z, in int power) {\n    float res = 1.0;\n    for (int n=0; n < abs(power); n++) { res *= z.x; }\n    if (power < 0) res = 1.0 / res;\n    return vec2(res, float(power) * res / z.x * z.y);\n}\n\n// z^2\nvec2 fSquare(in vec2 z) {\n    return vec2(z.x * z.x, 2.0 * z.x * z.y);\n}\n\n// sqrt(z)\nvec2 fSqrt(in vec2 z) {\n    float q = sqrt(z.x);\n    return vec2(q, 0.5 * z.y / q);\n}\n\n// base^z\nvec2 fExp(in vec2 z, in float base) {\n     float q = pow(base, z.x);\n     return vec2(q, q * z.y);\n}\n\n// ln(z)\nvec2 fLn(in vec2 z) {\n    return vec2(log(z.x), z.y / z.x);\n}\n\n// Trig\nvec2 fSin(in vec2 z) {\n    return vec2(sin(z.x), cos(z.x) * z.y);\n}\n\nvec2 fCos(in vec2 z) {\n    return vec2(cos(z.x), -sin(z.x) * z.y);\n}\n\nvec2 fTan(in vec2 z) {\n    float q = cos(z.x);\n    return vec2(tan(z.x), z.y / (q * q));\n}\n\n// Inverse trig\nvec2 fAsin(in vec2 z) {\n    return vec2(asin(z.x), z.y / sqrt(1.0 - z.x * z.x));\n}\n\nvec2 fAcos(in vec2 z) {\n    return vec2(acos(z.x), -z.y / sqrt(1.0 - z.x * z.x));\n}\n\nvec2 fAtan(in vec2 z) {\n    return vec2(atan(z.x), z.y / (1.0 + z.x * z.x));\n}\n\n// Hyperbolic trig\nvec2 fSinh(in vec2 z) {\n    return vec2(sinh(z.x), cosh(z.x) * z.y);\n}\n\nvec2 fCosh(in vec2 z) {\n    return vec2(cosh(z.x), sinh(z.x) * z.y);\n}\n\nvec2 fTanh(in vec2 z) {\n    float q = cosh(z.x);\n    return vec2(tanh(z.x), z.y / (q * q));\n}\n\n// Inverse hyperbolic trig\nvec2 fAsinh(in vec2 z) {\n    return vec2(asinh(z.x), z.y / sqrt(z.x * z.x + 1.0));\n}\n\nvec2 fAcosh(in vec2 z) {\n    return vec2(acosh(z.x), z.y / sqrt(z.x * z.x - 1.0));\n}\n\nvec2 fAtanh(in vec2 z) {\n    return vec2(atanh(z.x), z.y / (1.0 - z.x * z.x));\n}\n\n// Miscellaneous\nvec2 fMin(in vec2 a, in vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nvec2 fMax(in vec2 a, in vec2 b) {\n    return a.x > b.x ? a : b;\n}\n\nvec2 fFloor(in vec2 z) {\n    return vec2(floor(z.x), 0.0);\n}\n\nvec2 fCeil(in vec2 z) {\n    return vec2(ceil(z.x), 0.0);\n}\n\nvec2 fAbs(in vec2 z) {\n    return vec2(abs(z.x), z.y * sign(z.x));\n}\n\nvec2 fSign(in vec2 z) {\n    return vec2(sign(z.x), 0.0);\n}\n\nvec2 fMod(in vec2 a, in vec2 b) {\n     return vec2(mod(a.x, b.x), a.y);\n}\n\nvec2 fFract(in vec2 z) {\n     return vec2(fract(z.x), z.y);\n}\n\nvec2 fClamp(in vec2 z, in vec2 edge0, in vec2 edge1) {\n    return fMax(edge0, fMin(edge1, z));\n}\n\nvec2 fSmoothstep(in vec2 edge0, in vec2 edge1, in vec2 z) {\n    z = fClamp(fDiv(z - edge0, edge1 - edge0), vec2(0.0), vec2(1.0, 0.0));\n    vec2 sq = fSquare(z);\n    return 3.0 * sq - 2.0 * fMul(sq, z);\n}\n\nvec2 fMix(in vec2 a, in vec2 b, in vec2 t) {\n    return a + fMul(b - a, t);\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}