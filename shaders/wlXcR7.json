{
    "Shader": {
        "info": {
            "date": "1591668674",
            "description": "Path traced version of https://www.shadertoy.com/view/tls3WB. Use the mouse to change the shape of the fractal.",
            "flags": 32,
            "hasliked": 0,
            "id": "wlXcR7",
            "likes": 13,
            "name": "Recursive Donut Path Traced",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "torus",
                "pathtracing",
                "mouseable"
            ],
            "usePreview": 0,
            "username": "ShnitzelKiller",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    \n    \n    fragColor = vec4(pow(col, vec3(0.5)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//camera, path tracing, material parameters\n#define FOV 1.9\n#define FOCAL_DIST 2.\n#define APERTURE 0.01\n#define MAXSTEP 100\n#define TOL 0.005\n#define MAXDIST 100.\n#define EPS 0.01\n#define BOUNCES 8\n#define SCATTER_FACTOR 0.15\n#define PI 3.1415926\n#define RENDERS_PER_FRAME 1\n#define SKYCOL vec3(0.0, 0.0, 0.0)\n#define ATMOSPHERE_TRANSMISSION 0.9\n\n//donut parameters\n#define min_rings 3.\n#define max_rings 10.\n#define levels 6\n#define ratio 0.4\n#define ring_offset 1.5\n#define offsetdiff 0.8\n#define indent 0.2\n#define base_radius 2.    \n#define plane_height -2.\n#define laplace_factor 0.7\n\nvec2 sdTorus( vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    float d = length(q)-t.y;\n    \n    float theta = atan(-p.z, p.x); //outer angle\n    return vec2(d, theta);\n}\n\nvec2 map(vec3 p) {\n    float final_offset;\n    if (iMouse.y < 1.)\n        final_offset = offsetdiff*1.9 + ring_offset;\n    else\n        final_offset = (iMouse.y/iResolution.y-0.5)*3.+2.;\n    float final_ratio = ratio/final_offset;\n    \n    float ringdiff = (max_rings-min_rings)*0.5;\n    float ring_count = (max_rings+min_rings)*0.5;\n    float final_ringcount;\n    if (iMouse.x < 1.)\n    \tfinal_ringcount = ringdiff*-0.2 + ring_count;\n    else\n    \tfinal_ringcount = ringdiff*(iMouse.x/iResolution.x-0.5)*2. + ring_count;\n    float sector = 2.*PI/(final_ringcount);\n    float outerrad = base_radius;\n    float innerrad = outerrad*final_ratio;\n    vec2 h = sdTorus(p, vec2(outerrad, innerrad));\n    int i;\n    float currindent = indent;\n    vec2 minh = h;\n    \n    for (i=0; i<levels; i++) {\n        \n        //mod polar coordinates\n        float theta = mod(abs(h.y), sector)-sector/2.;\n        \n        //new cartesian coords\n        float s = length(p.zx);\n        p.z = cos(theta)*s - outerrad;\n        p.x = sin(theta)*s;\n        p = p.zxy;\n        \n        //new torus\n        outerrad = innerrad*final_offset;        \n        innerrad = outerrad*final_ratio;\n        h = sdTorus(p, vec2(outerrad, innerrad));\n        \n        minh.x = max(minh.x, currindent-h.x);\n        if (h.x < minh.x) {\n            minh = h;\n        }\n        \n        currindent = currindent * final_ratio * final_offset;\n    }\n    return vec2(minh.x, 2.0);\n}\n\nvec4 getnormal(vec3 pos) {\n    //if on the ground, use preset value (it's not part of the SDF)\n    if (pos.y < plane_height + TOL) return vec4(0., 1., 0., 0.);\n    vec2 offset = vec2(TOL, 0.0);\n    float dx0 = map(pos-offset.xyy).x;\n    float dxf = map(pos+offset.xyy).x;\n    float dy0 = map(pos-offset.yxy).x;\n    float dyf = map(pos+offset.yxy).x;\n    float dz0 = map(pos-offset.yyx).x;\n    float dzf = map(pos+offset.yyx).x;\n    float ddd = map(pos).x;\n    return vec4(normalize(vec3(dxf - dx0, dyf - dy0, dzf - dz0)), (dx0+dxf+dy0+dyf+dz0+dzf-6.*ddd)/TOL);\n}\n\nvec2 raymarch(in vec3 eye, in vec3 rd) {\n    \n    float t = 0.0;\n    for (int i=0; i<MAXSTEP; i++) {\n        vec3 pos = eye + rd*t;\n        vec2 dist = map(pos);\n        t += dist.x;\n        if (abs(dist.x) < TOL) {\n            return vec2(t, dist.y);\n        } else if (t > MAXDIST) break;\n    }\n    //raytrace ground plane\n    t = (plane_height-eye.y) / rd.y;\n    return vec2(t, step(-t, 0.)*step(length((eye+t*rd).zx), 50.));\n}\n\nuint seed;\nuint wang_hash()\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nuint pcg_hash()\n{\n    uint word = ((seed >> ((seed >> 28u) + 4u)) ^ seed) * 277803737u;\n    seed = seed * 747796405u + 2891336453u;\n    return (word >> 22u) ^ word;\n}\n\nfloat GetRandom()\n{\n    return float(pcg_hash()) / 4294967296.0;\n}\nvec2 GetRandom2(){return vec2(GetRandom(), GetRandom());}\n\nvec3 randnorm() {\n    vec2 utheta = GetRandom2() * 2. - 1.;\n    utheta.y *= PI;\n    float rho = sqrt(1.-utheta.x * utheta.x);\n    return vec3(cos(utheta.y)*rho, sin(utheta.y)*rho, utheta.x);\n}\n\nvec3 pathtrace(in vec3 eye, in vec3 rd) {\n    vec3 col = vec3(0.);\n    vec3 thru = vec3(1.);\n    for (int i=0; i<BOUNCES; i++) {\n        vec2 d = raymarch(eye, rd);\n        thru *= pow(ATMOSPHERE_TRANSMISSION, d.x);\n        if (d.y < 0.5) {\n            col += thru * SKYCOL;\n            break;\n        }\n        eye = eye + d.x * rd;\n        vec4 n = getnormal(eye);\n        vec3 nr = randnorm();\n        vec3 nref = reflect(rd, n.xyz);\n        //materials\n        vec3 albedo = vec3(1.);\n        vec3 emissive = vec3(0.);\n        float scatter_factor = 1.0;\n        if (d.y < 1.5) {\n            //checker ground\n            vec2 uv = eye.zx;\n            uv = abs(mod(uv, 2.)-1.);\n            float checker = abs(step(uv.x, .5) - step(uv.y, .5));\n            albedo = mix(vec3(0.8, 0.8, 0.9), vec3(0.1), checker);\n            emissive = (1.-checker) * vec3(0.3, 0.7, 0.9);\n            scatter_factor = mix(0.05, 0.004, checker);\n        } else if (d.y < 2.5) {\n            //glowy donut\n            float edgefac = abs(n.w*laplace_factor);\n            albedo = vec3(1., 0.7, 0.6);\n            float emissfac = edgefac * edgefac;\n            emissive = vec3(1., 0.9, 0.6) * emissfac;\n            scatter_factor = smoothstep(0., 1., emissfac * 30.);\n        }\n        nr = mix(nref, normalize(n.xyz + nr), scatter_factor);\n        col += thru * emissive;\n        thru *= albedo;\n        \n        float maxthru = max(thru.x, max(thru.y, thru.z));\n        if (GetRandom() > maxthru) {\n            break;\n        }\n        thru *= 1.0/maxthru;\n        \n        rd = nr;\n        eye += EPS * rd;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    seed = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    //camera position\n\t//float mouseY = iMouse.y < 1. ? 0.5 : (1.0-1.15*iMouse.y/iResolution.y) * 0.5 * PI;\n    //float mouseX = iMouse.x < 1. ? 0.25 : -(iMouse.x/iResolution.x) * 2. * PI;\n    float mouseY = 0.5;\n    float mouseX = 0.25;\n    vec3 eyeo = 4.*vec3(cos(mouseX) * cos(mouseY), sin(mouseX) * cos(mouseY), sin(mouseY));\n    \n    vec4 oldCol = texture(iChannel0, fragCoord/iResolution.xy);\n    bool dirty = iMouse.z > 1. || iMouse.w > 1. || iFrame == 0;\n    float oldWeight = oldCol.w;\n    vec3 w = normalize(vec3(0., -.5, 0.) - eyeo);\n    vec3 u = normalize(cross(w, vec3(0., 1., 0.)));\n    vec3 v = cross(u, w);\n    \n    //if (dirty) {\n    //    fragColor = vec4(pathtrace(eye, rd, 0.), 1.);\n    //} else {\n    if (dirty) oldWeight = 0.0;\n        for (int i=0; i<RENDERS_PER_FRAME; i++) {\n            fragCoord += GetRandom2() - 0.5;\n    \n            vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.x * FOV;\n            vec2 c = cos(uv);\n            vec2 s = sin(uv);\n            vec3 rd = normalize(s.x * c.y * u + s.y * v + c.x * c.y * w);\n            vec3 focalPt = eyeo + rd * FOCAL_DIST;\n            vec2 rtheta = GetRandom2();\n            float sampledist = sqrt(rtheta.x);\n            vec2 xy = APERTURE * sampledist * vec2(sin(rtheta.y), cos(rtheta.y));\n            vec3 eye = eyeo + rd + u * xy.x + v * xy.y;\n            rd = normalize(focalPt - eye);\n            \n            vec3 col = pathtrace(eye, rd);\n            float newWeight = oldWeight + 1.0;\n            oldCol.xyz = (oldCol.xyz * oldWeight + col) / newWeight;\n            oldWeight = newWeight;\n        }\n        fragColor = vec4(oldCol.xyz,oldWeight);\n    //}\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}