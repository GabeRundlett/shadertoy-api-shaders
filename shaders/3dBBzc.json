{
    "Shader": {
        "info": {
            "date": "1590488667",
            "description": "Circle Color",
            "flags": 8,
            "hasliked": 0,
            "id": "3dBBzc",
            "likes": 5,
            "name": "Circle Color",
            "published": 3,
            "tags": [
                "circlecolor"
            ],
            "usePreview": 0,
            "username": "ylan_go",
            "viewed": 424
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793\n\n#define NOTE(start, note, dura) if(time > start && cur_note == note) u += smoothstep(0.,0.25, time - start) - clamp(time - start - dura, 0.,1.);\n\n// adapted from <https://www.shadertoy.com/view/XdlSDs> by @dynamite\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = (2.*fragCoord.xy - iResolution.xy) / iResolution.y;\n    float a = atan(p.x,p.y);\n    float r = length(p)*0.75;\n    vec2 uv = vec2(a/(2.*PI),r);\n\t\n\t// get the color\n\tfloat xCol = 3. * mod(uv.x, 1.);\n\tvec3 horColour = vec3(0.25, 0.25, 0.25);\n\t\n\tif (xCol < 1.0) {\n\t\thorColour.r += 1. - fract(xCol);\n\t\thorColour.g += fract(xCol);\n\t} else if (xCol < 2.0) {\n\t\thorColour.g += 1. - fract(xCol);\n\t\thorColour.b += fract(xCol);\n\t} else {\n\t\thorColour.b += 1. - fract(xCol);\n\t\thorColour.r += fract(xCol);\n\t}\n\n\t// draw color beam\n\tuv = 2.*uv - 1.;\n\tfloat beamWidth = 1./abs(150.*uv.y);\n    \n    float time = iTime - 0.5;\n    int cur_note = int(2.5*uv.x + 5.);\n    \n    float u = 0.;\n    \n    NOTE(0., 2, .75);\n    NOTE(1., 4, .75);\n    NOTE(2., 3, .75);\n    NOTE(3., 0, .75);\n    NOTE(4., 1, .75);\n    \n    NOTE(7.0, 2, .15);\n    NOTE(7.2, 4, .15);\n    NOTE(7.4, 3, .15);\n    NOTE(7.6, 0, .15);\n    NOTE(7.8, 1, .15);\n    \n    NOTE(10.0, 2, .15);\n    NOTE(10.2, 4, .15);\n    NOTE(10.4, 3, .15);\n    NOTE(10.6, 0, .15);\n    NOTE(10.8, 1, .15);\n    NOTE(11.0, 2, .15);\n    NOTE(11.2, 4, .15);\n    NOTE(11.4, 3, .15);\n    NOTE(11.6, 0, .15);\n    NOTE(11.8, 1, .15);\n    NOTE(12.0, 2, .15);\n    NOTE(12.2, 4, .15);\n    NOTE(12.4, 3, .15);\n    NOTE(12.6, 0, .15);\n    NOTE(12.8, 1, .15);\n    NOTE(13.0, 2, .15);\n    NOTE(13.2, 4, .15);\n    NOTE(13.4, 3, .15);\n    NOTE(13.6, 0, .15);\n    NOTE(13.8, 1, .15);\n    \n    NOTE(16., 2, 1.5);\n    NOTE(18., 4, 1.5);\n    NOTE(20., 3, 1.5);\n    NOTE(22., 0, 1.5);\n    NOTE(24., 1, 2.5);\n    \n    if(time > 16.) u *= 2.;\n    \n    beamWidth *= 1. + 2.5*u*(1. - cos(5.*PI*uv.x));\n\tfragColor.xyz = beamWidth * horColour;\n    fragColor.w = 1.;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n#define PI 3.141592653589793\n\nfloat midi_freq(int m) {\n    // converts a MIDI note number to a frequency\n    // <http://en.wikipedia.org/wiki/MIDI_Tuning_Standard>\n    return 440. * pow(2., float(m-69)/12.);\n}\n\nfloat wav(float hz, float dB, float time) {\n    return 20. * pow(10., dB/10.) * (pow(sin(PI*hz*time), 2.) - 0.5);\n}\n\nfloat bombarde(float freq, float dura, float time) {\n    // magic numbers eyeballed from spectrogram of\n    // <http://www.organstops.org/b/Bombarde.html>\n    float u = 0.;\n    u += wav(freq*1., -36., time);\n    u += wav(freq*2., -26., time);\n    u += wav(freq*3., -37., time);\n    u += wav(freq*4., -41., time);\n    u += wav(freq*5., -38., time);\n    u += wav(freq*6., -29., time);\n    u += wav(freq*7., -23., time);\n    u += wav(freq*8., -21., time);\n    u += wav(freq*9., -24.5, time);\n    u += wav(freq*10., -19., time);\n    u += wav(freq*11., -28., time);\n    u += wav(freq*12., -26., time);\n    u += wav(freq*13., -27., time);\n    u += wav(freq*14., -33., time);\n    u += wav(freq*15., -32., time);\n    u += wav(freq*16., -35., time);\n    u += wav(freq*17., -34., time);\n    u += wav(freq*18., -37., time);\n    u += wav(freq*19., -26., time);\n    u += wav(freq*20., -31.5, time);\n    u += wav(freq*21., -31., time);\n    u += wav(freq*22., -32., time);\n    u += wav(freq*23., -35., time);\n    u += wav(freq*24., -35., time);\n    u += wav(freq*25., -36.5, time);\n    u += wav(freq*26., -42., time);\n    u += wav(freq*27., -46., time);\n    u += wav(freq*28., -46., time);\n    u += wav(freq*29., -42., time);\n    u += wav(freq*30., -49., time);\n    u += wav(freq*31., -41., time);\n    u += wav(freq*32., -43., time);\n    u += wav(freq*33., -54., time);\n    u += wav(freq*34., -60., time);\n    u += wav(freq*35., -55., time);\n    u += wav(freq*36., -55.5, time);\n    u += wav(freq*37., -54., time);\n    u += wav(freq*38., -56., time);\n    u += wav(freq*39., -56., time);\n    u += wav(freq*40., -60., time);\n    u *= smoothstep(0.,0.25, time) - clamp(time - dura, 0.,1.);\n    return u;\n}\n\n#define NOTE(start, midi, dura) if(time > start) u += bombarde(midi_freq(midi), dura, time - start);\n\nvec2 mainSound( in int samp, float time ) {\n    float u = 0.;\n    \n    NOTE(0., 38+12, .75);\n    NOTE(1., 40+12, .75);\n    NOTE(2., 36+12, .75);\n    NOTE(3., 24+12, .75);\n    NOTE(4., 31+12, .75);\n    \n    NOTE(7.0, 38+12, .15);\n    NOTE(7.2, 40+12, .15);\n    NOTE(7.4, 36+12, .15);\n    NOTE(7.6, 24+12, .15);\n    NOTE(7.8, 31+12, .15);\n    \n    NOTE(10.0, 38+12, .15);\n    NOTE(10.2, 40+12, .15);\n    NOTE(10.4, 36+12, .15);\n    NOTE(10.6, 24+12, .15);\n    NOTE(10.8, 31+12, .15);\n    NOTE(11.0, 38+12, .15);\n    NOTE(11.2, 40+12, .15);\n    NOTE(11.4, 36+12, .15);\n    NOTE(11.6, 24+12, .15);\n    NOTE(11.8, 31+12, .15);\n    NOTE(12.0, 38+12, .15);\n    NOTE(12.2, 40+12, .15);\n    NOTE(12.4, 36+12, .15);\n    NOTE(12.6, 24+12, .15);\n    NOTE(12.8, 31+12, .15);\n    NOTE(13.0, 38+12, .15);\n    NOTE(13.2, 40+12, .15);\n    NOTE(13.4, 36+12, .15);\n    NOTE(13.6, 24+12, .15);\n    NOTE(13.8, 31+12, .15);\n    \n    NOTE(16., 38, 1.5);\n    NOTE(18., 40, 1.5);\n    NOTE(20., 36, 1.5);\n    NOTE(22., 24, 1.5);\n    NOTE(24., 31, 2.5);\n    \n    if(time >= 16.) u *= 2.;\n    return vec2(u);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}