{
    "Shader": {
        "info": {
            "date": "1703400631",
            "description": "Please offer suggestions before I lose my mind ",
            "flags": 0,
            "hasliked": 0,
            "id": "MfsGRs",
            "likes": 12,
            "name": "spqr alpha 4",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "spqr",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "vec3 r;\n\nfloat sph (vec3 p, float r) {\n    return length(p) - r;\n}\nfloat box(vec3 p, vec3 d) {\n    p = abs(p) - d;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat aabb(vec3 p, vec3 d) {\n  \n    vec3 neg = -(d / 2. - p)/r;\n    vec3 pos =  (d / 2. - p)/r;\n\n    vec3 bot = min(neg, pos);\n \n    float top = max(max(bot.x, bot.y), bot.z);\n\n    return max(0.0, top); // Ensure we don't return a negative value\n}\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash21(vec2 p){\n    p = fract(p*vec2(234.34,435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\nfloat field (vec3 p, float scale) {\n  \n   p *= scale;\n   vec3 id = floor(p)-.5; \n   p = fract(p) -.5;\n   \n   float f1 = hash31(id);\n \n  \n   float shape = box(p, vec3(f1 * .46));\n\n   float bound = aabb(p, vec3(scale*1.01));\n   \n   return min(bound , shape)/scale;\n}\nfloat hash (float t) {\n    return fract(sin(t*5425.232)*9931.335);\n}\nfloat rnd(float t) { return fract(sin(t*758.655)*352.741); }\nfloat curve(float t, float d) { \n    t/=d; \n    \n    return mix(rnd(floor(t)), rnd(floor(t)+1.0), pow(smoothstep(0.0,1.0,fract(t)),50.));}\nfloat map(vec3 p) {\n    vec3 q = p;\n    float pos = p.y + 1.;\n\n    float f1 = curve(iTime,5.);\n    for (float i = 1.; i < 9.; i++) {\n            \n      \n            pos = max(pos, -field(q,pow(1.4 + f1/2.,i)/16.));\n     \n    }\n    \n    return pos;\n}\n\nvec3 norm(vec3 p) {\n  vec2 off=vec2(0.01,0.0);\n  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx)));\n}\n\nfloat occ ( vec3 p, vec3 n, float ni, float L) {\n    float occ = 1.;\n    for (float i =1.; i < ni; i++) {\n        float l = i * L / ni;\n        float d = map(p + n * l);\n        occ -= max(0., l -d ) / l / ni;\n    \n    }\n    return max(0.,occ);\n\n\n}\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n\nfloat rand(float t) {\n  return fract( sin(t * 7361.994) * 4518.442);\n}\n\nfloat tick ( float t ) {\n    float i = floor(t);\n    float r = fract(t);\n    r = smoothstep(0.,1.,r);\n    return i + r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    \n    \n    float tt = iTime ;\n    float ttt = tick(iTime/3.);\n    // nav \n    vec3 s = vec3(0,2,-15);\n    vec3 arm = vec3(0,0,1);\n    vec3 fwd = vec3(.1,0,5)*tt;\n    s += fwd;\n    arm.xz *= rot((cos(ttt)));\n    arm.yz *= rot((sin(ttt))/3. - .8);\n    \n    \n    s.y += sin(iTime)+ cos(iTime*3.1)/2.1;\n    s.x += sin(iTime/1.3)+ cos(iTime*2.1)/2.1;\n   \n    vec3 t = s + arm;\n    \n\n    \n    \n    vec3 z = normalize(t-s);\n    vec3 x = normalize(cross(vec3(0,-1,0),z));\n    vec3 y = cross(x,z);  \n    r = mat3(x,y,z) * normalize(vec3(uv,1));\n    vec3 p = s;\n    float l;\n    \n    float L = 100.;\n    \n\n    for (float i = 0.; i < 100.; i++) {\n        float d = map(p)*.7 ;\n        \n        if ( d < .0001) {\n        \n            break;\n        }\n        if ( l > L) {\n            break;\n        }\n        p += r * d;\n        l += d;\n    }\n    \n    vec3 col = vec3(0);\n   \n    //col += l/L;\n    \n    vec3 n = norm(p);\n    \n    vec3 light = normalize(vec3(1,1,0));\n \n\n \n    col += occ(p, n , 10., 3.);\n    col *=( dot(n,normalize(light))*.5+.5 ) ;\n    \n\n    //col=mix(col,vec3(1),l/L);\n    \n    \n    \n    col *= vec3(.3,.7,.94);\n    col=mix(vec3(1),col,exp(-.00006 *l*l*l));\n    \n    \n\n   // col = sqrt(col);\n \n\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}