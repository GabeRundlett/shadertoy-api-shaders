{
    "Shader": {
        "info": {
            "date": "1687098843",
            "description": "I made my own naive implementation of a simple quiver plot to visualize vector fields. It should be pretty competetive with the other implementations since it does not use ifs and it appears to be more robust and harder to breake. Feel free to use it. ",
            "flags": 0,
            "hasliked": 0,
            "id": "dssyzf",
            "likes": 5,
            "name": "Quiver Plot",
            "published": 3,
            "tags": [
                "flow",
                "arrow",
                "quiverplot",
                "vectorfield"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2023 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/* \nMy Own Quiver Plot Implementation\nA simple and performant quiver plot to visualize vector fields.\nFeel free to use it and enjoy the power of vector visualization! :D\n*/\n\n// Rotate coordinates in vector direction\nvec2 rotateUV(vec2 uv, vec2 direction) {\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2( direction.y, direction.x,\n                                -direction.x, direction.y );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\n// Generates a grid of arrows that point in the direction\nfloat quiverPlot(vec2 uv, vec2 direction, float gridSize) {\n    float lineThickness = 0.03;    // Thickness of the arrow line\n    float tipSteepness = 3.0;      // Controls the angle of the arrow tip\n\n    float maxSize = 0.9;           // Maximum arrow length (1 should be the max)\n    float minSize = 0.2;           // Minimum arrow length\n\n    // Calculate the square of the length of the vector\n    float lenSq = dot(direction, direction);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n    \n        // break UV coordinates into grid sections\n        uv = fract(uv * gridSize) - 0.5;\n\n        // caculate the direction vector length    \n        float vectorLen = sqrt(lenSq); \n\n        // Scale uv by vector size\n        float size = mix(minSize, maxSize, clamp(vectorLen, 0.,1.)); \n        uv /= size;\n\n        // Rotate UV coordinates based on the normalized direction vector\n        uv = rotateUV(uv, direction / vectorLen);\n\n        // absolute position\n        float absV = abs(uv.x);\n\n        // Calculate center line of the arrow shape\n        float lineOffset = tipSteepness * lineThickness; // offset so lines doesn't go over the tip\n        float line = max(absV, abs(uv.y + lineOffset) - 0.5 + lineOffset);\n\n        // Caculation of the Arror Tip\n        float tip = max(abs((uv.y / tipSteepness) + absV - (0.5 / tipSteepness) + lineThickness), -uv.y + 0.1);\n\n        // Combine line and tip to create the arrow shape\n        float arrowDist = min(tip, line) - lineThickness;\n\n        // Create a mask based on the arrow shape\n        //return step(arrowDist, 0.0); // no AA\n        float blur = (gridSize * 1.0)/(size * iResolution.y);\n        return  smoothstep(blur, -blur, arrowDist) ; // cheap AA\n        \n    } else {\n        // if the direction length is 0. then no arrows\n        return 0.;\n    }    \n}\n\n// loads noise texture and turns it into flowmap\nvec2 flowTex(vec2 uv) {\n    //a random spot in the noise map, normally you use an actual flowmap\n    vec4 tex = texture(iChannel1, (uv + vec2(0.8,1.0))*0.05); \n    vec2 flowMap = tex.xy;\n    float mask = clamp(2.2-pow(length(uv),2.0), 0.0, 1.0);\n    return (flowMap-.5)*2. * mask; // constant bias scale for -1 to 1 range\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Center screen coords \n    vec2 uv = (fragCoord.xy-(0.5*iResolution.xy))/iResolution.y; \n    \n    float myTime = iTime * 0.1; // slowed down time\n    vec2 flowUV = uv + vec2(cos(myTime),sin(myTime)); //rotating center\n    float spread = mix(4.0, 3.0, sin(0.25*iTime)); //changing donut size\n    \n    // Making flowmap\n    vec2 flowMap = flowTex(flowUV);\n    \n    // Making quiverplot\n    // number of subdivisions for the sampling of the flowmap\n    float gridSize = 15.0; \n    float arrows = 1.0 - quiverPlot(uv, flowMap, gridSize);\n    \n    // Shift flowmap into visible range\n    vec4 viewFlowMap = vec4(flowMap*0.5+0.5,0.5,1.0);\n\n    // Output to screen\n    fragColor = vec4(viewFlowMap * arrows);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}