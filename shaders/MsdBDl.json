{
    "Shader": {
        "info": {
            "date": "1527278045",
            "description": "An experiment with the cell-index obtained from domain-repetition... applied to material-index and morph/animation-phase.",
            "flags": 0,
            "hasliked": 0,
            "id": "MsdBDl",
            "likes": 10,
            "name": "Weird torus",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "reflection",
                "phong",
                "torus",
                "shadow",
                "materials",
                "spheretracing",
                "blinn",
                "fresnel"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 728
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// weird torus - experiment with cell-index from domain-repetition\n//\n// Copyright 2018 Mirco Müller\n//\n// Author(s):\n//   Mirco \"MacSlow\" Müller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int MAX_ITER = 48;\nconst float EPSILON = .001;\nconst float STEP_BIAS = .75;\n\nfloat saturate (in float v) { return clamp (v, .0, 1.); }\n\nmat2 r2d (in float a) {\n\tfloat c = cos (radians (a));\n    float s = sin (radians (a));\n    return mat2 (c, s, -s, c);\n}\n\nfloat sdSphere (in vec3 p, in float r) {\n    return length (p) - r;\n}\n\nfloat sdBox (in vec3 p, in vec3 size, in float r)\n{\n  vec3 d = abs(p) - size;\n  return min (max (d.x, max (d.y,d.z)), .0) + length (max (d, .0)) - r;\n}\n\nfloat sdTerrain (in vec3 p, in float height)\n{\n    float h = .5*texture (iChannel0, .1*p.xz).r;\n    h += .25*texture (iChannel0, .2*p.xz).r;\n    h += .125*texture (iChannel0, .4*p.xz).r;\n    h += .0625*texture (iChannel0, .8*p.xz).r;\n    h /= (.5 + .25 + .125 + .0625);\n    h += height;\n    return p.y - .0625*h*.25;\n}\n\nfloat sdTorus (in vec3 p, in vec2 t)\n{\n    vec2 q = vec2 (length (p.xz) - t.x, p.y);\n    return length (q) - t.y;\n}\n\nfloat sdBoxSphere (in vec3 p, in float size, in float phase)\n{\n\tfloat box = sdBox (p, vec3 (size), size*.1);\n    float factor = mix (.0, 1.85, phase);\n\tfloat sphere = sdSphere (p, size*factor);\n\treturn max (box, sphere);\n}\n\nvec3 opRepeat (inout vec3 p, in float size)\n{\n\tfloat hsize = .5*size;\n\tvec3 cell = floor ((p + hsize)/vec3(size));\n\tp = mod (p + hsize, vec3 (size)) - hsize;\n\treturn cell;\n}\n\nstruct HitResult {\n\tfloat dist;\n\tint id;\n};\n\nHitResult sceneOld (in vec3 p) {\n    vec3 boxSphereCenter = p + vec3 (.0, -1., .0);\n    vec3 torusCutterCenter = boxSphereCenter;\n\n    boxSphereCenter.xy *= r2d (20.*iTime);\n    boxSphereCenter.yz *= r2d (-35.*iTime);\n    boxSphereCenter.zx *= r2d (50.*iTime);\n\n    float repeatSizePhase = .4;// + .1*(.5 + .5*sin (iTime));\n    vec3 cell = opRepeat (boxSphereCenter, repeatSizePhase);\n    float boxSpherePhase = .5 + .5*cos (.75*(cell.x + cell.y + cell.z) + iTime);\n\tfloat boxSphere = sdBoxSphere (boxSphereCenter, .15, boxSpherePhase);\n\n\ttorusCutterCenter.xy *= r2d (-30.*iTime);\n    torusCutterCenter.yz *= r2d (40.*iTime);\n    torusCutterCenter.zx *= r2d (20.*iTime);\n\n\tfloat torusCutter = sdTorus (torusCutterCenter, vec2 (1.25, .6));\n\tboxSphere = max (torusCutter, boxSphere);\n\tint id = int (floor (mod (cell.x+cell.y+cell.z, 4.)));\n\n    float ground = sdTerrain (p, -100.0);\n\n\tHitResult result = HitResult (.0, -1);\n\tresult.dist = min (ground, boxSphere);\n\tresult.id = result.dist == ground ? 1 : ( result.dist == boxSphere ? id : -1);\n\n    return result;\n}\n\nHitResult scene (in vec3 p) {\n    vec3 boxSphereCenter = p + vec3 (.0, -1., .0);\n    vec3 torusCutterCenter = boxSphereCenter;\n\n\ttorusCutterCenter.xy *= r2d (-30.*iTime);\n    torusCutterCenter.yz *= r2d (40.*iTime);\n    torusCutterCenter.zx *= r2d (20.*iTime);\n    float torusCutter = sdTorus (torusCutterCenter, vec2 (1.25, .6));\n\n    float repeatSizePhase = .4;\n    vec3 cell = opRepeat (boxSphereCenter, repeatSizePhase);\n    float boxSphere = sdBox (boxSphereCenter, vec3(.15), .0);\n    float d = distance (torusCutter, boxSphere);\n    float boxSpherePhase = torusCutter < boxSphere ? sqrt (d) : .0;\n    boxSpherePhase *= .5 + .5*cos (.75*(cell.x + cell.y + cell.z) + 2.*iTime);\n    \n\tboxSphere = sdBoxSphere (boxSphereCenter, .15, boxSpherePhase);\n\n\tboxSphere = max (torusCutter, boxSphere);\n\tint id = int (floor (mod (cell.x+cell.y+cell.z, 4.)));\n\n    float ground = sdTerrain (p, -100.0);\n\n\tHitResult result = HitResult (.0, -1);\n\tresult.dist = min (ground, boxSphere);\n\tresult.id = result.dist == ground ? 1 : ( result.dist == boxSphere ? id : -1);\n\n    return result;\n}\n\nHitResult raymarch (in vec3 ro, in vec3 rd) {\n    float d = .0;\n\tfloat t = .0;\n\tHitResult result;\n    for (int i = 0; i < MAX_ITER; ++i) {\n        result = scene (ro + t*rd);\n        d = result.dist;\n        if (abs (d) < EPSILON * (1. + .125*d)) break;\n        t += d*STEP_BIAS;\n    }\n\n\tresult.dist = t;\n    return result;\n}\n\nvec3 normal (in vec3 p, in float epsilon) {\n    float d = scene (p).dist;\n    vec2 e = vec2 (epsilon, .0);\n    return normalize (vec3 (scene (p + e.xyy).dist,\n                            scene (p + e.yxy).dist,\n                            scene (p + e.yyx).dist) - d);\n}\n\n// uses improved shadow-version by Sebastian Aaltonen as\n// demonstrated by iq here https://www.shadertoy.com/view/lsKcDD\nfloat shadow (in vec3 p, in vec3 n, in vec3 lPos) {\n    vec3 rd = normalize (lPos - p);\n    float result = 1.;\n    float t = .1;\n    float ph = 1e10;\n    for (int i = 0; i < 64; i++) {\n        float h = scene (p + .01*n + t * rd).dist;\n        if (h < .00001) return .0;\n        float y = h*h/(2.*ph);\n        float d = sqrt (h*h - y*y);\n        result = min (result, 10.*d/max (.0, t - y));\n        ph = h;\n        t += h*.5;\n    }\n\n    return result;\n}\n\nvec3 diffSpecTerm (in vec3 ro,\n                   in vec3 rd,\n                   in float d,\n                   in vec3 lPos,\n                   in vec3 diffColor,\n                   in float attenuationDamping,\n                   in vec3 specColor,\n\t\t\t\t   in float shininess) {\n    vec3  p = ro + d*rd;\n    vec3  n = normal (p, d*EPSILON);\n    vec3  lDir = normalize (lPos - p);\n    float lDist = distance (lPos, p);\n    float diff = max (dot (lDir, n), .0);\n    float sha = shadow (p, n, lPos);\n    float attenuation = attenuationDamping / (lDist*lDist);\n    vec3  diffTerm = sha*attenuation*diff*diffColor;\n    vec3  h = normalize (lDir - rd);\n    float spec = pow (max (dot (n, h), .0), shininess);\n    vec3  specTerm = (sha > .1) ? attenuation*spec*specColor : vec3 (.0);\n\n    return diffTerm + specTerm;\n}\n\nstruct Material {\n\tvec3 color;\n\tfloat shininess;\n};\n\nMaterial[4] materials = Material[4] (Material (vec3 (1., .5, .2), 10.),\n\t\t\t\t\t\t\t         Material (vec3 (.5, 1., .2), 50.),\n\t\t\t\t\t\t\t         Material (vec3 (.2, .5, 1.), 150.),\n\t\t\t\t\t\t\t         Material (vec3 (.3, .8, .4), 30.));\n\nvec3 shade (in vec3 ro, in vec3 rd, in float d, in int matId) {\n    vec3 p = ro + d*rd;\n    vec3 n = normal (p, d*EPSILON);\n    vec3 amb = vec3 (.2);\n\tvec3 color = matId == 1 ? mix (vec3 (.9),\n\t\t\t\t\t\t\t\t   vec3 (1., .1, .1),\n\t\t\t\t\t\t\t\t   smoothstep (.475, .5, cos(p.x)*cos (p.z))) :\n\t\t\t\t\t\t\t  materials[matId].color;\n\t\n\tfloat mask = mix (1., .0, smoothstep (.3, .5, (.5+.5*sin (60.*p.x))*(.5+.5*sin(60.*p.y))));\n\tfloat shininess = matId == 0 ? mix (20., 60., mask) : materials[matId].shininess;\n    vec3 term1 = diffSpecTerm (ro, rd, d,\n                              vec3 (2.*cos (2.*iTime), 3., -1. + 2.*sin (1.5*iTime)),\n                              color, 8., vec3 (1.), shininess);\n\n    vec3 term2 = diffSpecTerm (ro, rd, d,\n                              vec3 (1. + 2.*cos (2.*iTime), 3., -1. + 2.*sin (2.*iTime)),\n                              color, 10., vec3 (1.), shininess);\n\n    return amb + term1 + term2;\n\n}\n\nvec3 camera (in vec2 uv, in vec3 ro, in vec3 aim, in float zoom) {\n    vec3 camForward = normalize (vec3 (aim - ro));\n    vec3 worldUp = vec3 (.0, 1., .0);\n    vec3 camRight = normalize (cross (worldUp, camForward));\n    vec3 camUp = normalize (cross (camForward, camRight));\n    vec3 camCenter = ro + camForward * zoom;\n\n    return normalize (camCenter + uv.x * camRight + uv.y * camUp - ro);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvRaw = uv;\n\tuv = uv * 2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3 (.0 + 3.*cos (.5*iTime), 3., .5 + 3.*sin (.5*iTime));\n    vec3 aim = vec3 (.0, .75, .0);\n    float zoom = 1.125;\n    vec3 rd = camera (uv, ro, aim, zoom);\n\n    HitResult result = raymarch (ro, rd);\n    float d = result.dist;\n    float fog = 1. / (1. + d*.05);\n    vec3 p = ro + d*rd;\n    vec3 n = normal (p, d*EPSILON);\n    vec3 col = shade (ro, rd, d, result.id);\n\n    vec3 refl = normalize (reflect (rd, n));\n    result = raymarch (p + .01*n, refl);\n    float refd = result.dist;\n    vec3 refp = p + refd*refl;\n\tvec3 refn = normal (refp, refd*EPSILON);\n    vec3 refcol = shade (p, refl, refd, result.id);\n\n    vec3 refl2 = normalize (reflect (refl, refn));\n    result = raymarch (refp + .01*refn, refl2);\n    float refd2 = result.dist;;\n    vec3 refp2 = refp + refd2*refl2;\n    vec3 refcol2 = shade (refp, refl2, refd2, result.id);\n\n\tfloat fakeFresnel = pow (1. - max (dot (n, -rd), .0), 1.25);\n    col += fakeFresnel*.85*refcol;\n    col += fakeFresnel*.85*refcol2;\n\n    col *= fog;\n    col = mix (col, vec3 (.65, .75, .85), pow (1. - 1. / d, 30.));\n    col *= vec3 (.9, .8, .7);\n    col = col / (1. + col);\n    col = .3 * col + .7 * sqrt (col);\n    col *= .3 + .7 * pow (16. * uvRaw.x * uvRaw.y * (1. - uvRaw.x) * (1. - uvRaw.y), .2);\n\n    fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}