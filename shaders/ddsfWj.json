{
    "Shader": {
        "info": {
            "date": "1689192128",
            "description": "Human Readable Version of: https://www.shadertoy.com/view/cs2cWz\nThanks to @FabriceNeyret2 for the original code!\n\nComments and suggestions are welcomed!",
            "flags": 0,
            "hasliked": 0,
            "id": "ddsfWj",
            "likes": 8,
            "name": "Human Readable Zeppelin",
            "published": 3,
            "tags": [
                "raymarchingtutorial",
                "reproduction",
                "zeppelin",
                "humancode",
                "readablecode"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "// Rotation matrix \nmat2 rotateMatrix(float angle) {\n  return mat2(cos(angle + vec4(0,11,33,0))); \n}\n\n// Convert to ring coordinates\nvec3 toRingCoords(vec3 point, float radius) {\n  return 4.0 * vec3(length(point.xz) - radius, point.y, radius * atan(point.x, point.z));\n} \n\n// Truss structure distance field\nfloat trussGeometry(vec3 position) {\n\n  position.xy = length(position.xy) * \n    cos(mod(atan(position.y, position.x) + 1.05, 2.1) - 1.05 + vec2(0,11));\n  \n  position.z = mod(position.z, 2.0) - 1.0;\n\n  position.x -= 0.5;\n\n  return min(\n      length(vec2(position.x, abs(position.y) - 0.87)) - 0.1,\n      max(\n        length(vec2(position.x, 0.87 * abs(position.z) + 0.5 * position.y - 0.5)) - 0.1,\n        abs(position.y) - 0.9\n      )\n  );\n}\n\nvoid mainImage(out vec4 outColor, vec2 fragCoord) {\n  \n  float rayDistance = 9.0;\n  float radius;\n  \n  vec3 resolution = iResolution;\n  vec3 rayDirection = normalize(vec3(fragCoord, -2.0 * resolution.y) - resolution);\n  vec3 rayOrigin = vec3(10, 6, 25);\n\n  vec3 cameraPos = mix(\n    3.0 * cos(0.3 * iTime + vec3(0, 11, 0)), // Camera position - demo mode\n    6.0 * iMouse.xyz / resolution - vec3(0, 3, 0), // Camera position - interactive\n    step(0.0, iMouse.z) // Mix factor\n  );\n   \n  // Ray march\n  for(outColor = vec4(1); outColor.x > 0.0 && rayDistance > 0.01; outColor -= 0.01) {\n\n    vec3 position = rayOrigin;\n    \n    // Rotate in YZ plane\n    position.yz *= rotateMatrix(-cameraPos.y);\n\n    // Rotate in XZ plane\n    position.xz *= rotateMatrix(-cameraPos.x); \n\n    vec3 beamPosition = position;\n    \n    // Longitudinal beams\n    beamPosition.xy = length(beamPosition.xy) * \n      cos(mod(atan(beamPosition.y, beamPosition.x) + 0.314, 0.628) - 0.314 + vec2(0, 11));\n    beamPosition.x += 5.0;\n    beamPosition = toRingCoords(beamPosition, 10.0);\n    rayDistance = trussGeometry(beamPosition);\n\n    // Latitudinal beams\n    radius = sqrt(1.0e2 - position.z * position.z) - 5.0;\n    position.z = mod(position.z, 3.0) - 1.5; \n    beamPosition = toRingCoords(position.xzy, radius);\n    rayDistance = min(rayDistance, trussGeometry(beamPosition));\n    \n      \n    rayOrigin += 0.1 * rayDistance * rayDirection; // March ray\n  }\n\n  outColor *= outColor*outColor*outColor*2.0; // Color scheme\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}