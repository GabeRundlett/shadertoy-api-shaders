{
    "Shader": {
        "info": {
            "date": "1637614794",
            "description": "Menger sponge & Rubik's cube at the same time :-)\n\nMouse controls, camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "NlKGWh",
            "likes": 40,
            "name": "Menger-Rubik's cube",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "menger",
                "rubik",
                "sierpinski",
                "short"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 615
        },
        "renderpass": [
            {
                "code": "\n#define rot(a)          mat2(cos(a+vec4(0,11,33,0)))  // rotation\n#define H(t)            fract(1e4*sin((t)*1e4))       // hash\n#define B(x,y,z,r1,r2)  max( max(a.x,a.z)-r1, a.y-r2) // box\n               // manage one slice, remember closest to pixel\n#define S(k)   r = q - Y* .67 *float(k-1),                     \\\n               i%3==k ? r.xz *= rot(s*fract(T)*1.57) : U,      \\\n               a = abs(r), v = B(x,y,z,1.,.33),                \\\n               v < t ? t=v, q0 = r + Y* .67 *float(k-1) : r\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., s, v,T=iTime; \n    int n, i = int(18.*H(floor(T)));                  // choose the random rotation+dir\n    s = i%2==0 ? 1. : -1.; i/=2;                      // direction\n    \n    vec3  R = iResolution, Y = vec3(0,1,0),\n          D = normalize(vec3((U+U-R.xy)/R.y, -3.)),   // ray direction\n          p = vec3(0,0,6), q,q0,r,a,                  // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(10,12,0)/1e2*cos(iTime+vec3(0,11,0))+vec3(0,.12,0); \n\n    for ( O=vec4(1); O.x > 0. && t > .005; O-=.01 ) {\n        q = p,\n        q.yz *= rot(.5-6.3*M.y),                      // rotations\n        q.xz *= rot(-6.3*M.x), t = 9.,\n        q = i/3==1 ? q.xzy : i/3==2 ? q.yxz : q,      // choose rotation axis\n        S(0), S(1), S(2),                             // draw slices + rot one\n        q = q0;\n        for( n=0; n<3; n++ )                          // Menger fractal recursion\n            a = abs(q),\n            t = max(t, -B(x,y,z,.33,3.)),             // holes in 3 directions\n            t = max(t, -B(y,z,x,.33,3.)),\n            t = max(t, -B(z,x,y,.33,3.)),\n            q = fract( 1.5*(q+1.) )*2. - 1.;          // recursion to smaller scale\n\n        p += .25*t*D;                                 // step forward = dist to obj\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}