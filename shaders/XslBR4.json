{
    "Shader": {
        "info": {
            "date": "1495134164",
            "description": " Philox is a counter based  pseudorandom number generator.\nIt is introduced in \"Parallel Random Numbers: As Easy as 1, 2, 3\".\nIt should generate same numbers on any platform which calculate 32bit integer correctly.",
            "flags": 0,
            "hasliked": 0,
            "id": "XslBR4",
            "likes": 6,
            "name": "Philox4x32_7 test",
            "published": 3,
            "tags": [
                "2d",
                "randomnumber",
                "random123",
                "philox"
            ],
            "usePreview": 0,
            "username": "tomohiro",
            "viewed": 702
        },
        "renderpass": [
            {
                "code": "/*\nCounter based pseudorandom number generator Philox\n\nIt is introduced in this paper:\nParallel Random Numbers: As Easy as 1, 2, 3\nby John K. Salmon, Mark A. Moraes, Ron O. Dror, and David E. Shaw\n\nPhilox is a modification of Threefish.\nIt is explained in 2.2 and 3.3 in this paper:\nThe Skein Hash Function Family\nby Niels Ferguson, Stefan Lucks, Bruce Schneier, Doug Whiting, Mihir Bellare, Tadayoshi Kohno, Jon Callas, Jesse Walker\n\nYou can download original Random123 source code from here:\nhttp://www.thesalmons.org/john/random123/\n\nHow to use:\nuvec4 counter;\nuvec2 key;\nuintToFloat(philox4x32_7(counter, key))\nreturns pseudorandom float4 value where each components are [0, 1).\n*/\n\n//umulExtended is not available in\n//umulExtended was added GLSL ES 3.1\n//This function is based on _mulhilo_c99_tpl macro in Random123-1.09/include/Random123/philox.h in Random123 source code.\nvoid umulExtended_(uint a, uint b, out uint hi, out uint lo) {\n    const uint WHALF = 16u;\n    const uint LOMASK = (1u<<WHALF)-1u;\n    lo = a*b;               /* full low multiply */\n    uint ahi = a>>WHALF;\n    uint alo = a& LOMASK;\n    uint bhi = b>>WHALF;\n    uint blo = b& LOMASK;\n\n    uint ahbl = ahi*blo;\n    uint albh = alo*bhi;\n\n    uint ahbl_albh = ((ahbl&LOMASK) + (albh&LOMASK));\n    hi = ahi*bhi + (ahbl>>WHALF) +  (albh>>WHALF);\n    hi += ahbl_albh >> WHALF; /* carry from the sum of lo(ahbl) + lo(albh) ) */\n    /* carry from the sum with alo*blo */\n    hi += ((lo >> WHALF) < (ahbl_albh&LOMASK)) ? 1u : 0u;\n}\n\nuvec2 philox4x32Bumpkey(uvec2 key) {\n    uvec2 ret = key;\n    ret.x += 0x9E3779B9u;\n    ret.y += 0xBB67AE85u;\n    return ret;\n}\n\nuvec4 philox4x32Round(uvec4 state, uvec2 key) {\n    const uint M0 = 0xD2511F53u, M1 = 0xCD9E8D57u;\n    uint hi0, lo0, hi1, lo1;\n//    umulExtended(M0, state.x, hi0, lo0);\n//    umulExtended(M1, state.z, hi1, lo1);\n    umulExtended_(M0, state.x, hi0, lo0);\n    umulExtended_(M1, state.z, hi1, lo1);\n\n    return uvec4(\n        hi1^state.y^key.x, lo1,\n        hi0^state.w^key.y, lo0);\n}\n\nuvec4 philox4x32_7(uvec4 plain, uvec2 key) {\n    uvec4 state = plain;\n    uvec2 round_key = key;\n\n    for(int i=0; i<7; ++i) {\n        state = philox4x32Round(state, round_key);\n        round_key = philox4x32Bumpkey(round_key);\n    }\n\n    return state;\n}\n\nfloat uintToFloat(uint src) {\n    return uintBitsToFloat(0x3f800000u | (src & 0x7fffffu))-1.0;\n}\n\nvec4 uintToFloat(uvec4 src) {\n    return vec4(uintToFloat(src.x), uintToFloat(src.y), uintToFloat(src.z), uintToFloat(src.w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//\tvec2 uv = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n    uvec2 seed = uvec2(fragCoord.xy)>>uvec2(2u);\n    uint tseed = uint(iTime)>>1u;\n    vec4 rand = uintToFloat(philox4x32_7(uvec4(seed, tseed, 2), uvec2(1)));\n//\tfragColor = rand*0.5 + vec4(uv,0.5+0.5*sin(iTime),1.0)*0.5;\n    fragColor = rand;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}