{
    "Shader": {
        "info": {
            "date": "1678345031",
            "description": "Another zellij tile pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "csK3zm",
            "likes": 6,
            "name": "Zellij pattern 2",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "zellige"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "float binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n\nvec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a-fract(a*4.)/2.)\n        //fract(a-.5*sign(.5-mod(floor(a.x),2.))+mod(floor(a.x*2.),2.)/2.)\n        //abs(fract(a)-fract(a/8.)/8.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n    ;\n    return abs(f1((a+a2)*(a2.x+a2.y))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.y += iTime/t1/16.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 4; k++){\n        //k += int(uv.y<uv.x);\n        //if(uv.y<uv.x)\n        uv =\n            abs(-sign(uv)*.5+uv+t2)/1.5-.5\n            //abs(-sign(uv)*.5+uv/1.5+t2)-.5\n            //abs(-sign(uv)*.5+uv+t2/1.5)-.5\n            //abs(-sign(uv)*.5+uv+t2*(1.+mod(floor(uv.y),2.)/2.))/1.5-.5\n        ;\n        \n        //More cool patterns!\n        //uv += float((k+int(iTime))/2);\n        \n        if(uv.y>uv.x) {\n            uv = uv.yx;\n            //k -= 1;\n        }\n        t2 = -triangle_wave(uv-.5);\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2-triangle_wave(uv.yx)+length(t2)\n            //t2-triangle_wave(uv.yx+floor(.5+t2.y+t2.x)))\n        ;\n        //if(t2.x>t2.y)\n        col =\n            vec3(col.zx,max(abs(uv.x-uv.y)*sign(t2.x-t2.y),0.))\n            //vec3(col.zx,max((uv.x+uv.y+1.),0.))\n            //vec3(col.zx,max(uv.y-uv.x,col.y))\n        ;\n        //if(t2.y>t2.x) col = col.yzx;\n        //if(uv.x<uv.y) uv.x -= .5;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat prime_rhythm(float time){\n    return time + floor(time/5.)+floor(time/3.)+floor(time/2.)+floor(time/7.)+floor(time/11.);\n}\n\nfloat fmod2(float a, float b){\n    return b*mod(floor(a),b);\n}\n\nfloat fmod(float x,float y,float z){\n    //x = prime_rhythm(x);\n    //x -= fmod2(x*2.,7.);\n    \n    //x += floor((x/8.+y)/8.);\n    //x /= (1. + floor(mod(x/8.*y,2.)));\n    //x += floor(hash11(floor(x/8.))*8.);\n    /*\n    for(int i = 0; i < 3; i++){\n      x += floor(x/8.)*y/8.;\n    }\n    */\n    //x += floor(x/y*4.);\n    //x += pow(2.,mod(floor(x),8.));\n    //x += pow(2.,mod(floor(x)*floor(x/4.),4.));\n    \n    //x += floor(z/4.);\n    //x += pow(2.,mod(floor(z*4.),3.));\n    \n    \n    return\n        floor(max(mod(floor(x)*3.,y),mod(floor(-x)*4.,y)))\n        //floor(max(mod(floor(x)*3.,y*2.),mod(floor(-x)*4.,y*2.))/2.)\n        //floor(abs(mod(floor(x*8.),y*y))/y)\n        //floor(max(mod(floor(x+y/4.)*3.,y),mod(floor(-x+y/4.)*4.,y)))\n        //max(mod(floor(x*8./y),y),mod(floor(x/y),y))\n        //floor(max(mod(floor(-(x))*4.,y),mod(floor(x+pow(2.,(mod(y,2.))))*3.,y)))\n        //floor(max(mod(floor(-x)*3.,y),mod(floor(x)*2.,y)))\n    ;\n}\n\nfloat fmod1(float x,float y){\n    //x = prime_rhythm(x);\n    //x += floor(hash11(floor(x/8.))*8.);\n    return\n        floor(min(mod(floor((x))*3.,y),mod(floor(-x)*4.,y)))\n        //floor(min(mod(floor((x))*3.,y*2.),mod(floor(-x)*4.,y*2.))/2.)\n        //floor(abs(mod(floor(x*4.),y*y))/y)\n        //floor(min(mod(floor(floor(x)*y)/3.,y),mod(floor(-floor(x)*y)/4.,y)))\n        //floor(min(mod(floor(-(x))*5.,y),mod(floor(x)*3.,y)))\n    ;\n}\n\nfloat fract1(float a){\n    return\n        //fract(a)\n        //fract(a)*fract(a)\n        abs(fract(a)+.25)/1.25\n        //fract(a/(1.+fmod(a*8.,2.,a)))\n        //fract(a+fract(a/2.)/2.)\n    ;\n}\n\nvec2 mainSound(int samp, float time){  \n  float\n  tempo = 1.;\n  float t1=\n      1.\n      //pow(2.,fmod(time,3.))\n  ;\n  /*\n  for(int i = 0; i < 3;i++){\n      time += fmod(time*2.,2.);\n  }\n  */\n  //time /= tempo;\n  float\n  s1 =\n      pow(2.,1.+fmod(time/8.,3.,time))\n      //pow(2.,1.+fmod((time)/8.+fmod(time*pow(2.,2.+fmod(time/2./8.,2.)),3.),3.))\n  ,\n  s2 = pow(2.,1.+fmod1(time/8.,3.)),\n  m1 = s1*(1.+fmod(time/s2/s1+1.,2.,time)),\n  t =\n      time\n      //time + floor(t*s1)*s2\n      //time/(1.+fmod(time*8.,2.))\n      //(time + floor(time*s1)/s2)/2.\n      //(time-floor(time*s1)/s2+floor(time*s2)/s1)/2.\n  ;\n  //t += pow(2.,mod(floor(t*2.),8.));\n  //t += fmod(t*8.,2.,t);\n\n  /*\n  for(int i = 0; i < 3; i++){\n      t += mod(floor(t*4.),2.)/2.;\n  }\n  */\n  float m4 = fmod1(t*s1/(1.+fmod(t/s1,2.,time)),s2),\n  m3 = fmod((t*t1+m4)*s1/m1,s2,time);\n  t *= s1*s1/(1.+fmod(t/s1,2.,time));\n  float m2 =\n      1. + fmod(t/s1,s1,time)\n      //1. + floor(fmod(t/s1,s1*2.,time)/2.)\n  ,\n  a =\n      //128.*pow((1.-sqrt(fract1(t/s1)/m1))/4.,2.)\n      pow(log(fract1(t/s1)/4.),2.)\n      //pow(2.,fract(t/s1))\n      //128.*pow((1.-sqrt(fract(abs(t+sin(t/2.*radians(180.)))/s1)/m1))/4.,2.)\n  ,\n  nb = time*tempo*pow(2.,(m3+m2)/5.+6.5);\n  return\n      abs(.5-1.5*vec2(fract(nb*.998),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //log(1.-vec2(sin(nb*4.),cos(nb*4.)))*a\n      //abs(.5-1.5*vec2(fract(nb*.998),fract(nb)))*a\n      //abs(1./16.-abs(.5-1.5*vec2(fract(nb*.998),fract(nb))))*a\n      //abs(1./8.-abs(.5-vec2(fract(nb*.998),fract(nb))))*a\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}