{
    "Shader": {
        "info": {
            "date": "1594725752",
            "description": "License CC0: Overlapping hextiles\nThere are many examples on Shadertoy of overlapping rectangular tiling. Thought ST could need (another?) an example of how to do overlapping hex tiles.",
            "flags": 0,
            "hasliked": 0,
            "id": "tljyRG",
            "likes": 8,
            "name": "Overlapping hextiles",
            "published": 3,
            "tags": [
                "2d",
                "hextiling"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 493
        },
        "renderpass": [
            {
                "code": "// License CC0: Overlapping hextiles\n//  There are many examples on Shadertoy of overlapping rectangular tiling. \n//  Thought ST could need (another?) an example of how to do overlapping hex tiles.\n    \n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define MROT(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst mat2 rot60    = MROT(TAU/6.0);\nconst vec2 sz       = vec2(1.0, sqrt(3.0));\nconst vec2 hsz      = 0.5*sz;\nconst vec2 off1     = normalize(vec2(0.5, 0.0));\nconst vec2 off2     = rot60*off1;\nconst vec2 off3     = rot60*off2;\nconst vec2 off4     = rot60*off3;\nconst vec2 off5     = rot60*off4;\nconst vec2 off6     = rot60*off5;\nconst vec2 idx1     = vec2(+2.0, +0.0);\nconst vec2 idx2     = vec2(+1.0, +1.0);\nconst vec2 idx3     = vec2(-1.0, +1.0);\nconst vec2 idx4     = vec2(-2.0, +0.0);\nconst vec2 idx5     = vec2(-1.0, -1.0);\nconst vec2 idx6     = vec2(+1.0, -1.0);\n\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat psin(float a) {\n  return 0.5 + 0.5*sin(a);\n}\n\nfloat pcos(float a) {\n  return 0.5 + 0.5*cos(a);\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz, sz)-hsz;\n  vec2 p3 = mix(p2, p1, vec2(dot(p1, p1) < dot(p2, p2)));\n  vec2 n = round((p3 - p + hsz)/hsz);\n  p = p3;\n\n  return round(n);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n// Single cell distance field\nfloat cell(vec2 p, vec2 n) {\n  float a = hash(n+sqrt(3.0));\n  rot(p, TAU*a+TIME);\n  float d0 = box(p, vec2(0.5, 0.25)*mix(0.25, 1.25, psin(TAU*a+TIME)));\n  return d0;\n}\n\nfloat df(vec2 p) {\n  // Close to origo seems the cell index is computed incorrectly\n  p += 100.0;\n  vec2 hp = p;\n  vec2 hn = hextile(hp);\n  \n  float d = 1E6;\n  // The current cell\n  d = min(d, cell(hp, hn));\n  // Take union with all surrounding cells to support overlapping distance fields\n  d = min(d, cell(hp - off1, hn - idx1));\n  d = min(d, cell(hp - off2, hn - idx2));\n  d = min(d, cell(hp - off3, hn - idx3));\n  d = min(d, cell(hp - off4, hn - idx4));\n  d = min(d, cell(hp - off5, hn - idx5));\n  d = min(d, cell(hp - off6, hn - idx6));\n    \n  return d;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float s = 0.25;\n  float d = df(p/s)*s;\n  \n  float aa = 4.0/RESOLUTION.y;\n  \n  vec3 col = vec3(0.0);\n  \n  col = mix(col, vec3(1.0), smoothstep(-aa, 0.0, -d));\n  col += vec3(0.5)*pcos(300.0*d);\n\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}