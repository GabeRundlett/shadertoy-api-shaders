{
    "Shader": {
        "info": {
            "date": "1711600359",
            "description": "sparks",
            "flags": 0,
            "hasliked": 0,
            "id": "4fcGWH",
            "likes": 10,
            "name": "sparkz",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "quantumphantom",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "float hash21(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nvec2 hash22(vec2 uv) {\n    uv = vec2(dot(uv, vec2(1.1,3.7)),\n              dot(uv, vec2(26.5,183.3)));\n    return 2.0 * fract(sin(uv) * 4.5) - 1.0;\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 blur = smoothstep(.0, 1., fuv);\n    vec2 bl = vec2(.0, .0);\n    vec2 br = vec2(1., .0);\n    vec2 tl = vec2(.0, 1.);\n    vec2 tr = vec2(1., 1.);\n    vec2 bln = hash22(iuv + bl);\n    vec2 brn = hash22(iuv + br);\n    vec2 tln = hash22(iuv + tl);\n    vec2 trn = hash22(iuv + tr);\n    float b  = mix(dot(bln, fuv - bl), dot(brn, fuv - br), blur.x);\n    float t  = mix(dot(tln, fuv - tl), dot(trn, fuv - tr), blur.x);\n    float c = mix(b, t, blur.y);\n    return c;\n}\n\nfloat fbm(vec2 uv, int octaves)\n{\n    float value = .0;\n    float ampitude  = 2.5;\n    float freq = 2.;\n    for(int i = 0; i < octaves; i++)\n    {\n        value += perlinNoise(uv) * ampitude;\n        uv *= freq;\n        ampitude *= .5;\n    }\n    return value;\n}\n\nvec3 neonGreen = vec3(0.0, 1.0, 0.0);\nvec3 neonPurple = vec3(0.5, 0.0, 1.0);\n\nvec3 customMix(vec3 a, vec3 b, float t) {\n    float r = mix(a.r, b.r, t);\n    float g = mix(a.g, b.g, t);\n    float bValue = mix(a.b, b.b, t);\n    return vec3(r, g, bValue);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    vec3 col = vec3(.0);\n    \n    vec2 uvTopLeft = uv - vec2(-.2, 0.5);\n    vec2 uvBottomRight = uv - vec2(0.2, -0.5);\n    \n    uvTopLeft += fbm(uvTopLeft + iTime * .5, 20);\n    uvBottomRight += fbm(uvBottomRight + iTime * .5, 20);\n    \n    float distTopLeft = length(uvTopLeft);\n    float distBottomRight = length(uvBottomRight);\n    \n    float t = fract(iTime * 0.2);\n    vec3 baseColor = customMix(neonPurple, neonGreen, t);\n    \n    col += baseColor * mix(.0, .05, hash21(vec2(iTime))) / distTopLeft;\n    col += baseColor * mix(.0, .05, hash21(vec2(iTime))) / distBottomRight;\n    \n    // Intersection in the middle\n    float intersectDist = min(distTopLeft, distBottomRight);\n    col += baseColor * mix(-0.3, .2, hash21(vec2(iTime))) / intersectDist;\n\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}