{
    "Shader": {
        "info": {
            "date": "1617548043",
            "description": "Another version of [url]https://www.shadertoy.com/view/tstfzs[/url], with colour.\n\nSee [url]https://twitter.com/MatthewArcus/status/1378683514795790340[/url]\n\nBest viewed full screen. Mouse zooms in.",
            "flags": 0,
            "hasliked": 0,
            "id": "fsBGRy",
            "likes": 8,
            "name": "Complete Graph in Colour II",
            "published": 3,
            "tags": [
                "graph",
                "complete"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Triangular numbers & complete graphs\n// Matthew Arcus, mla, 2021\n//\n// Colour a complete graph with n nodes with n-1 colours, with i edges being\n// coloured by the ith colour.\n//\n// https://twitter.com/MatthewArcus/status/1378683514795790340\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 diagram(vec2 p) {\n  float N = 5.0+floor(0.5*iTime)+max(0.0,2.0*fract(0.5*iTime)-1.0);\n  p = rotate(p,0.01); // Rotate slightly to reduce artefacts\n  float lwidth = 1.2*fwidth(p.x);\n  vec3 col = vec3(0); //1.0-vec3(1,1,0.8);\n  if (dot(p,p) > 1.0+lwidth) return col;\n  float d2min = 1e8, rmin;\n  float offset = 0.5*(N-1.0);\n  for (float i = 0.0, j = 1.0; j < N; ) {\n    float ii = 2.0*PI/N*(i-offset);\n    float ij = 2.0*PI/N*(j-offset);\n    vec2 q = vec2(sin(ii),cos(ii));\n    vec2 r = vec2(sin(ij),cos(ij));\n    float d2 = segment2(p,q,r);\n    if (d2 < d2min) {\n      d2min = d2;\n      rmin = (abs(i-j)-1.0)/(N-1.0);\n    }\n    vec2 n = r-q;\n    if (dot(p-q,vec2(-n.y,n.x)) > 0.0) i++;\n    else j++;\n  }\n  col = mix(hsv2rgb(rmin,1.0,1.0),col,smoothstep(0.0,lwidth,sqrt(d2min)));\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  if (false && iMouse.z > 0.0) {\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    p -= mouse; // Centre on mouse\n    p *= 0.55*iResolution.y/iResolution.x; // And zoom\n  }\n  vec3 col = diagram(p);\n  fragColor = vec4(pow(col,vec3(0.4545)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\nfloat PI = 3.14159265;\n\n// Distance squared of p from line segment qr.\nfloat segment2(vec2 p, vec2 q, vec2 r) {\n  p -= q; r -= q;\n  float h = dot(p,r)/dot(r,r);\n  h = clamp(h,0.0,1.0);\n  p -= h*r;\n  return dot(p,p);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}