{
    "Shader": {
        "info": {
            "date": "1612537124",
            "description": "Creating a trippy kaleidoscopic effect. ",
            "flags": 0,
            "hasliked": 0,
            "id": "3ttfWr",
            "likes": 3,
            "name": "pandora",
            "published": 3,
            "tags": [
                "fractal",
                "texture",
                "rotate",
                "kaleidoscopic",
                "kifs",
                "trippy",
                "function",
                "smoothstep",
                "angle",
                "snowflake",
                "koch",
                "layering",
                "system",
                "iterated"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// tutorial https://www.youtube.com/watch?v=il_Qg9AqQkE&t=863s \n\n\nvec2 N(float angle){\nreturn vec2(sin(angle),cos(angle));\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    uv.x=abs(uv.x);\n    uv.y+= tan((5./6.)*3.1415)*.5;  // tan(a)=y/0.5 -> y = tan(a)*.5 - how far we need to shift things up \n    vec2 n = N((5./6.)*3.1415);\n\n    float d =dot(uv-vec2(.5,0.),n);\n    uv -=n*max(0.,d)*2.;// only one side is reflected \n    \n    //abs(sin(iTime*0.3)*2.)/abs(sin(iTime*0.3)*8.)\n    n = N(abs(sin(iTime*0.3)*2.)/abs(sin(iTime*0.3)*8.)*iTime*0.01*3.1415)*rotate2d(3.14*iTime*0.05);\n    float scale = 1.;\n    uv.x+=0.5;\n    // col+=smoothstep(.01,.0,abs(d));\n\n    for(int i=0; i<8; i++){\n    float val = 3.;\n      uv *=val;\n      scale *=val;\n      uv.x -=val/2.;\n        \n      uv.x=abs(uv.x);\n      uv.x-=0.5;\n      uv -=n*max(0.,dot(uv,n))*2.;// folding the space - only one side is reflected   \n    }\n    \n \n\n\n    d = length (uv-vec2(clamp(uv.x,-1.,1.),0));\n    col+=smoothstep(1./iResolution.y,.0,d/scale);\n    uv/=scale;\n    uv*=rotate2d(3.14*iTime*0.05);\n    col+= texture(iChannel0, uv*2.+iTime*0.05).ggg;\n    col/= texture(iChannel2, uv*3.+iTime*0.005).rbb;\n    col-= texture(iChannel1, uv*3.+iTime*0.05).gbr;\n    col-= texture(iChannel3, uv*3.+iTime*0.05).grb;\n  \n  \n    fragColor = vec4(col,1.0);\n}   \n\n/**\n    float d = dot(uv,n); //uv.x*n.x+uv.y*n*y; // same as uv.x*0+uv.y*1=uv.y;\n    \n    uv -=n*min(0.,dot(uv,n))*2.;// only one side is reflected \n    col.rg+=uv;\n    col+=smoothstep(.01,.0,abs(d));\n    **/\n    \n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}