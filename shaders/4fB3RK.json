{
    "Shader": {
        "info": {
            "date": "1704390945",
            "description": "Explicitly solving 2D wave equation for \"droplets on water surface\" setup.",
            "flags": 0,
            "hasliked": 0,
            "id": "4fB3RK",
            "likes": 8,
            "name": "Stateless waves",
            "published": 3,
            "tags": [
                "wave",
                "equation"
            ],
            "usePreview": 1,
            "username": "FordPerfect",
            "viewed": 224
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Stateless waves simulation.\n// NOTE: not 100% sure there are no mistakes in calculations.\n// Feel free to check for yourself. The result looks plausible\n// for wide variety of other definitions of f(...).\n\n/*\n1D wave equation\n    Utt-Uxx=0\nwith boundary conditions\n    U(x,0)=g\n    Ut(x,0)=h\nhas the solution (see https://en.wikipedia.org/wiki/D%27Alembert%27s_formula):\n    U(x,t)=(g(x+t)+g(x-t))/2+(H(x+t)-H(x-t))/2\nwhere H(x) is antiderivative of h(x).\n\nThis can be converted to solution for\na radially-symmetric 2D wave equation (see https://math.stackexchange.com/questions/3776068/2d-wave-equation-with-radial-symmetry).\nSpecifically, if\n    Utt-Uxx=0\n    U(r,0)=r*g(2*r)\n    Ut(r,0)=2*r*h(2*r)\nis a (solution to) 1D wave equation, then\n    u(r,t)=2*U(r/2,t/2)/r\nis a solution to a 2D wave equation.\n\nConsider a wave from droplet impact on a previously\nstatic water surface. Then g(r)=0. It would make sense to\ndemand h(r) to have finite support, but let's not do\nthat and simply use h(r)=exp(-(r/a)^2), which trails off\npretty fast anyway. Then:\n    Utt-Uxx=0\n    U(r,0)=0\n    Ut(r,0)=2*r*exp(-(4/a^2)*r^2)\nso\n    U(r,t)=(a^2/8)*(exp(-(4/a^2)*(r-t)^2)-exp(-(4/a^2)*(r+t)^2))\nand\n    u(r,t)=(a^2/4)*(exp(-(r-t)^2/a^2)-exp(-(r+t)^2/a^2))/r\nFor refraction calculations, we actually need a (spatial) derivative\nof that, so\n    u'(r,t)=(((r+t)/r+a^2/(4*r^2))*exp(-(r+t)^2/a^2)-((r-t)/r+a^2/(4*r^2))*exp(-(r-t)^2/a^2))/2\n*/\n\nfloat f(float r,float t,float a)\n{\n    return ((r+t)/r+a*a/(4.0*r*r))*exp(-(r+t)*(r+t)/(a*a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 d=vec2(0); // Derivatives.\n    const int K=5;\n    // Process K most recent droplets,\n    // and collect combined derivatives.\n    for(int k=0;k<K;++k)\n    {\n        float s=1.25; // Scale.\n        float a=0.0625; // Droplet size.\n        float id=floor(iTime)-float(k); // Droplet id.\n        id=float(int(id)*int(id)%1337);\n        vec2 c=vec2(cos(37.1*id),sin(17.3*id)); // Droplet center.\n        float t=s*(float(k)+fract(iTime)); // Elapsed time.\n        vec2 p=xy-c;\n        float r=s*length(p);\n        d+=normalize(p)*(f(r,+t,a)-f(r,-t,a))/2.0;\n    }\n    vec3 I=vec3(0,0,-1),N=normalize(vec3(-d,1.0));\n    float depth=7.0;\n    d=refract(I,N,1.0/1.33).xy; // Snell's law.\n    vec3 col=texture(iChannel0,0.5*xy+depth*d).xyz;\n    float R=0.02+0.98*pow(1.0-dot(-I,N),5.0); // Schlick's approximation.\n    col=mix(col,vec3(0.8),R); // Should be in linear colorspace, but whatever.\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}