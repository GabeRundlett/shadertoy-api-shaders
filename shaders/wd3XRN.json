{
    "Shader": {
        "info": {
            "date": "1571635259",
            "description": "Parameterization of space surrounding rounded box, such that we can position and align other SDFs around its boundary. You can see it as a generalization of polar coordinates. Or \"rounded box coordinates\"?",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3XRN",
            "likes": 56,
            "name": "Rounded Box Parametrization",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "coordinates",
                "parametrization"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2696
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Parameterization of space surrounding rounded box, such that we can\n// position and align other SDFs around its boundary. You can see it as\n// a generalization of polar coordinates. Or \"rounded box coordinates\"?\n\n\nfloat msign( in float x ) { return (x<0.0)?-1.0:1.0; }\n\n// parametrization of a round box. u=tangential distance, v=radial distance\nvec2 paBox( in vec2 p, in vec2 b, in float r )\n{\n    vec2 q = abs(p)-b;\n    \n    return vec2( \n        \n        // u = distance along perimeter\n        (3.0+msign(p.x))*(b.x+b.y+1.570796*r) + msign(p.y*p.x)*\n        (b.y + ((q.y>0.0)?r*((q.x>0.0)?atan(q.y,q.x):1.570796)+max(-q.x,0.0):q.y)),\n        \n\t    // v = distance to box\n    \tmin(max(q.x,q.y),0.0) + length(max(q,0.0)) - r );\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdStar(in vec2 p, in float r, in int n, in float m, in float a)\n{\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en));\n    float bn = mod(atan(p.x,p.y)+a,2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec2  size = vec2(0.45,0.1); // dimensions of the base box\n    const float radius = 0.28;         // radius of corners\n    const int   numStars = 17;         // number of stars\n    \n    // pixel coordinates    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.x;\n\n    // parametrize space in rounded-box coordinates\n    vec2 uv = paBox( p, size, radius );\n\n    \n    // draw rounded box\n    vec3 col = vec3(0.40,0.32,0.32) + sign(uv.y)*vec3(0.15,-0.02,-0.08);\n    \n    col *= 0.7+0.3*smoothstep(0.0,1.0,sqrt(abs(uv.y)/0.04));\n    col *= smoothstep(0.0,0.006,abs(uv.y));\n    col *= 1.2-0.2*smoothstep(0.4,0.5,abs(fract(uv.y*14.0)-0.5));\n    \n        \n    // draw starts\n    float perimeter = 4.0*(size.x+size.y+1.570796*radius);\n    float ds = float(numStars)/perimeter;\n    uv = uv*ds + vec2(iTime,0.0);\n    float i = floor(uv.x);\n    float f = fract(uv.x);\n    float n = 7.0+3.0*sin(37.0*i*6.283185/float(numStars)); // num points\n    float d = sdStar(vec2(f-0.5,uv.y), 0.35, int(n), 1.5+0.25*n, 2.0*iTime)/ds;\n    col *= 0.7 + 0.3*smoothstep(0.0,1.0,sqrt(d/0.04));\n    if( d<0.0 ) col = vec3(0.85,0.75,0.4);\n    col *= smoothstep(0.0,0.006,abs(d));\n\n    // vignetting\n    col *= 1.3 - 0.3*dot(p,p);\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}