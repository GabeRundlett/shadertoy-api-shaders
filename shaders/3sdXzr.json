{
    "Shader": {
        "info": {
            "date": "1571336589",
            "description": "I like glass bricks",
            "flags": 0,
            "hasliked": 0,
            "id": "3sdXzr",
            "likes": 13,
            "name": "Glass bricks",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "glass",
                "bricks"
            ],
            "usePreview": 0,
            "username": "Simplyfire",
            "viewed": 577
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\nprecision mediump int;\n#endif\n\nuniform vec2 resolution;\nuniform float time;\n\n#define pi 3.14159265359\n\nvec4 permute(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\nfloat permute(float x){ return floor(mod(((x*34.0)+1.0)*x, 289.0)); }\nvec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\nfloat taylorInvSqrt(float r){ return 1.79284291400159 - 0.85373472095314 * r; }\nvec4 grad4(float j, vec4 ip){\n    const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n    vec4 p, s;\n\n    p.xyz = floor(fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n    p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n    s = vec4(lessThan(p, vec4(0.0)));\n    p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n    return p;\n}\nfloat snoise(vec4 v){\n    const vec2  C = vec2(0.138196601125010504, // (5 - sqrt(5))/20  G4\n    0.309016994374947451);// (sqrt(5) - 1)/4   F4\n    // First corner\n    vec4 i  = floor(v + dot(v, C.yyyy));\n    vec4 x0 = v -   i + dot(i, C.xxxx);\n\n    // Other corners\n\n    // Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n    vec4 i0;\n\n    vec3 isX = step(x0.yzw, x0.xxx);\n    vec3 isYZ = step(x0.zww, x0.yyz);\n    //  i0.x = dot( isX, vec3( 1.0 ) );\n    i0.x = isX.x + isX.y + isX.z;\n    i0.yzw = 1.0 - isX;\n\n    //  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n    i0.y += isYZ.x + isYZ.y;\n    i0.zw += 1.0 - isYZ.xy;\n\n    i0.z += isYZ.z;\n    i0.w += 1.0 - isYZ.z;\n\n    // i0 now contains the unique values 0,1,2,3 in each channel\n    vec4 i3 = clamp(i0, 0.0, 1.0);\n    vec4 i2 = clamp(i0-1.0, 0.0, 1.0);\n    vec4 i1 = clamp(i0-2.0, 0.0, 1.0);\n\n    //  x0 = x0 - 0.0 + 0.0 * C\n    vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n    vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n    vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n    vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n    // Permutations\n    i = mod(i, 289.0);\n    float j0 = permute(permute(permute(permute(i.w) + i.z) + i.y) + i.x);\n    vec4 j1 = permute(permute(permute(permute (\n    i.w + vec4(i1.w, i2.w, i3.w, 1.0))\n    + i.z + vec4(i1.z, i2.z, i3.z, 1.0))\n    + i.y + vec4(i1.y, i2.y, i3.y, 1.0))\n    + i.x + vec4(i1.x, i2.x, i3.x, 1.0));\n    // Gradients\n    // ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n    // 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n    vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0);\n\n    vec4 p0 = grad4(j0, ip);\n    vec4 p1 = grad4(j1.x, ip);\n    vec4 p2 = grad4(j1.y, ip);\n    vec4 p3 = grad4(j1.z, ip);\n    vec4 p4 = grad4(j1.w, ip);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n    p4 *= taylorInvSqrt(dot(p4, p4));\n\n    // Mix contributions from the five corners\n    vec3 m0 = max(0.6 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2)), 0.0);\n    vec2 m1 = max(0.6 - vec2(dot(x3, x3), dot(x4, x4)), 0.0);\n    m0 = m0 * m0;\n    m1 = m1 * m1;\n    return 49.0 * (dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))\n    + dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));\n}\nconst int OCTAVES = 6;\nfloat fbm(float x, float y, float z, float w){\n    vec4 v = vec4(x, y, z, w);\n    float freq = 1.;\n    float amp = 1.0;\n    float sum = 0.;\n    for (int i = 0; i < OCTAVES; i++){\n        float n = snoise(vec4(v.x*freq, v.y*freq, v.z*freq, v.w*freq));\n        sum += n*amp;\n        amp *= .3;\n        freq *= 3.0;\n        v.xy += vec2(3.212, 12.312);\n    }\n    return sum;\n}\nfloat fbm(float x){\n    return fbm(x, 0., 0., 0.);\n}\nfloat fbm(float x, float y){\n    return fbm(x, y, 0., 0.);\n}\nfloat fbm(float x, float y, float z){\n    return fbm(x, y, z, 0.);\n}\nvec3 rgb(float h, float s, float b){\n    vec3 c = vec3(h, s, b);\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0, 4.0, 2.0), 6.0)-3.0)-1.0, 0.0, 1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);  return c.z * mix(vec3(1.0), rgb, c.y);\n}\nmat2 rotate2d(float angle){\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\nfloat angularDiameter(float r, float size) {\n    return atan(2. * (size / (2. * r)));\n}\nfloat cubicPulse(float c, float w, float x){\n    x = abs(x - c);\n    if (x>w) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\nfloat map(float value, float start1, float stop1, float start2, float stop2){\n    return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));\n}\nfloat norm(float value, float start, float stop){\n    return map(value, start, stop, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = iTime*.15;\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    vec2 ov = fragCoord.xy / iResolution.xy;\n    vec2 gv = fract(uv*3.02)-.5;\n    float grid = cubicPulse(.0, .25, min(abs(gv.x), abs(gv.y)));\n    uv *= vec2(1.0,0.5);\n    vec2 distortUv = vec2(fbm(uv.y,uv.x, grid), fbm(grid, uv.x, uv.y));\n    distortUv *= 0.5;\n    float n = fbm(distortUv.y+cos(t),distortUv.x+sin(t), grid);\n    n = pow(n, 1.5);\n    vec3 color = vec3(n);\n    fragColor = vec4(color, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}