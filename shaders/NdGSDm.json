{
    "Shader": {
        "info": {
            "date": "1634715140",
            "description": "Pseudo-Banksyan endlessly self-shredding art (unsigned)",
            "flags": 0,
            "hasliked": 0,
            "id": "NdGSDm",
            "likes": 13,
            "name": "Shredded Art",
            "published": 3,
            "tags": [
                "mandelbrot",
                "banksy",
                "modernism"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "// \"Shredded Art\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat SmoothMax (float a, float b, float r);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashff (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, pWid, hMax, hFrac, hCur, nCyc;\nint idObj;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, sWid, fx;\n  dMin = dstFar;\n  q = p;\n  q.y -= hFrac - hCur;\n  d = PrRoundBoxDf (q, vec3 (pWid, hMax - hCur, 0.), 0.005);\n  DMINQ (1);\n  sWid = 0.1;\n  q = p;\n  d = abs (q.x) - pWid;\n  q.y -= - hMax + hFrac - hCur;\n  fx = floor (q.x / sWid);\n  q.x -= sWid * (fx + 0.5);\n  q.xz = Rot2D (q.xz, 0.2 * pi * (Hashff (fx + 17.33 * nCyc) - 0.5) * (q.y - hCur));\n  d = max (d, PrRoundBoxDf (q, vec3 (0.5 * sWid - 0.008, hCur, 0.), 0.005));\n  DMINQ (1);\n  q = p;\n  q.y -= hFrac;\n  d = SmoothMax (PrRoundBoxDf (q, vec3 (pWid + 0.15, hMax + 0.15, 0.02), 0.02),\n     - PrBox2Df (q.xy, vec2 (pWid, hMax)), 0.02);\n  DMINQ (2);\n  q.z -= 0.01;\n  d = PrBoxDf (q, vec3 (pWid, hMax, 0.01));\n  DMINQ (3);\n  q = p;\n  q.z -= 10.;\n  d = - q.z;\n  DMINQ (4);\n  return 0.8 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 MandCol (vec2 p)\n{\n  vec2 v, w;\n  float h;\n  p.x -= 0.85;\n  v = p;\n  h = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    w = v * v;\n    if (w.x + w.y > 4.) {\n      h = float (j + 1);\n      break;\n    } else v = p + vec2 (w.x - w.y, 2. * v.x * v.y);\n  }\n  return (h > 0.) ? HsvToRgb (vec3 (mod (h / 60. + 0.01 * nCyc, 1.), 1., 1.)) : vec3 (0.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 q;\n  float dstObj, t;\n  pWid = 1.;\n  hMax = 1.3;\n  hFrac = 0.7 * hMax;\n  t = fract (tCur / 15.);\n  nCyc = floor (tCur / 15.);\n  hCur = hMax * (0.1 + 0.8 * (1. - smoothstep (0.75, 0.8, t)) * smoothstep (0.1, 0.4, t)) - 0.15;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      col4 = vec4 (1., 1., 1., 0.);\n      if (qHit.z < 0.) {\n        q = ro.xy;\n        q.y -= hFrac - 2. * hCur;\n        if (PrBox2Df (q, vec2 (pWid)) < -0.05) col4 = vec4 (MandCol (2. * q), 0.1);\n      }\n    } else if (idObj == 2) {\n      col4 = vec4 (0.4, 0.3, 0., 0.2);\n    } else if (idObj == 3) {\n      col4 = vec4 (0.8, 0.5, 0.1, 0.) * (0.8 + 0.2 * Fbm2 (64. * ro.xy));\n    } else if (idObj == 4) {\n      col4 = vec4 (0., 0.4, 0., 0.);\n      vn= VaryNf (32. * ro, vn, 1.);\n    }\n    col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       col4.a * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n    col *= 1. - smoothstep (0.2, 0.6, dstObj / dstFar);\n  } else {\n    col = vec3 (0., 0., 0.);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  az = clamp (az, -0.6 * pi, 0.6 * pi);\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -12.);\n  zmFac = 4.5;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (0.5, 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}