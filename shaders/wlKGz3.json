{
    "Shader": {
        "info": {
            "date": "1581081191",
            "description": "creating the von kock snowflake fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "wlKGz3",
            "likes": 3,
            "name": "von kock fractal",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "DolfinShark",
            "viewed": 334
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float angle = (iTime * 0.2) / 3.1416;\n    angle = (angle - round(angle)) * 3.1416;\n    angle = 3.1416 / -6.;\n    \n    uv.x += .5;\n    float scale = 1.;\n    for(int i = 0; i < 25; i++) {\n        scale *= 3.;\n        uv *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        \n        //angle += cos(iTime * 0.05) * 6.2832;\n        //angle *= 2. * sin(iTime * 0.1);\n   \n        vec2 n = vec2(cos(angle), sin(angle));\n        uv -= 2. * n * min(0., dot(uv, n));\n    }\n    \n    float d = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n    \n    \n    \n    d = smoothstep(1. / iResolution.y, 0., d / scale);\n    fragColor = vec4(d, d, d, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}