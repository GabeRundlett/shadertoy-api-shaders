{
    "Shader": {
        "info": {
            "date": "1677774666",
            "description": "scrolling texture",
            "flags": 0,
            "hasliked": 0,
            "id": "Ddt3DB",
            "likes": 1,
            "name": "scroller.GPT",
            "published": 3,
            "tags": [
                "texture"
            ],
            "usePreview": 0,
            "username": "mpusch88",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime * 0.5;\n\n    // Scale the texture to fit the screen\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Diamond grid pattern\n    float f = 13.0;  // frequency\n    float a = 0.1;   // amplitude\n    float d = 0.33;   // density\n    float r = 0.18;   // roundness\n    float dx = abs(mod(uv.x - (time/6.6), d) - d * 0.05);\n    float dy = abs(mod(uv.y - (time/6.6), d) - d * 0.05);\n    float k = pow(pow(dx, r) + pow(dy, r), 1.0 / r);\n    float grid = a * (sin(k * f) + 5.0) * 0.5;\n\n    // Waves\n    float wave1 = sin(uv.x * 10.0 + time * 0.5) * 0.06;\n    float wave2 = sin(uv.x * 7.0 + uv.y * 2.0 + time * 2.0) * 0.05;\n    float wave3 = sin(uv.y * 15.0 + time * 1.0) * 0.05;\n    float waves = wave1 + wave2 + wave3;\n\n    // Final color\n    vec3 color = vec3(sin(time * .2), 0.4, cos(time * .2)) + vec3(waves) + vec3(grid);\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}