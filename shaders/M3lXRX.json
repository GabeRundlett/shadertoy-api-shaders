{
    "Shader": {
        "info": {
            "date": "1709791662",
            "description": "Show how rayMarching and SDF works.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3lXRX",
            "likes": 0,
            "name": "ShaderToy_10_RayMarching",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 156
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n#define COUNT 20.0\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return max(xline, yline);\n}\n\nfloat sphere(vec2 coord, vec2 pos, float radius)\n{\n    float d = distance(coord, pos);\n    return 1.0 - smoothstep(radius - 1e-2, radius, d);\n}\n\nfloat distanceLine(vec2 uv, vec2 p1, vec2 p2, float width)\n{\n    vec2 dir0 = p2 - p1;\n    vec2 dir1 = uv - p1;\n    \n    float h = clamp(dot(dir1, dir0)/dot(dir0, dir0), 0.0, 1.0);\n    float d = length(dir1 - dir0 * h) - width * 0.5;\n    \n    float w = fwidth(0.5 * d) * 2.0;\n    \n    //float o = 1.0 - smoothstep(-w, w, d - 0.01);\n    float i = 1.0 - smoothstep(-w, w, d);\n    \n    return i;\n}\n\nfloat sphereLine(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d = abs(d - radius);\n    return 1e-3 / d;\n}\n\nfloat distanceSphere(vec3 sphere, vec2 p)\n{\n    return length(p - sphere.xy) - sphere.z;\n}\n\nfloat distanceScene(vec2 p)\n{\n    vec3 sphere_1 = vec3(0.0, -0.5, 0.3);\n    vec3 sphere_2 = vec3(0.5, sin(iTime) * 0.5 + 0.0, 0.2);\n    vec3 sphere_3 = vec3(1.5 + sin(iTime) * 0.1, -0.5, 0.4);\n    \n    float d = distanceSphere(sphere_1, p);\n    d = min(d, distanceSphere(sphere_2, p));\n    d = min(d, distanceSphere(sphere_3, p));\n    return d;\n}\n\nfloat rayMarch(vec2 aspCoord)\n{\n    float pointSize = 0.02;\n    vec2 startPos = vec2(-1.5, 0.5);\n    \n    float result = 0.0;\n    \n    result += sphere(aspCoord, startPos, pointSize);\n    \n    vec2 dir = normalize(vec2(0.0, 0.0) - startPos);\n    \n    float ro = 0.1;\n    \n    int maxStepCount = 100;\n    \n    float maxLength = 10.0;\n    float minLength = 1e-2;\n    \n    vec2 lastPos = startPos;\n    \n    while(maxStepCount-->0)\n    {\n        vec2 p = startPos + dir * ro;\n        // sdf\n        float d = distanceScene(p);\n        \n        // show the moving point;\n        result += sphere(aspCoord, p, pointSize);\n        // show the moving distance;\n        result += distanceLine(aspCoord, lastPos, p, 1e-2);\n        // show why the distance;\n        result += sphereLine(aspCoord, p, d);\n        \n        lastPos = p;\n        \n        // moving forward;\n        ro += d;\n        // hit or out of range;\n        if(d > maxLength || d < minLength)\n        {\n            break;\n        }\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    \n    vec3 col = vec3(0.0);\n    \n    col += net(aspCoord) * 0.125;\n    \n    col += drawCoord(aspCoord);\n    \n    vec3 sphere_1 = vec3(0.0, -0.5, 0.3);\n    vec3 sphere_2 = vec3(0.5, sin(iTime) * 0.5 + 0.0, 0.2);\n    vec3 sphere_3 = vec3(1.5 + sin(iTime) * 0.1, -0.5, 0.4);\n    \n    col += sphere(aspCoord, sphere_1.xy, sphere_1.z);\n    col += sphere(aspCoord, sphere_2.xy, sphere_2.z);\n    col += sphere(aspCoord, sphere_3.xy, sphere_3.z);\n    \n    col += rayMarch(aspCoord);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}