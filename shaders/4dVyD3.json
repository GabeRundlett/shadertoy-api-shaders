{
    "Shader": {
        "info": {
            "date": "1523565016",
            "description": "'forked' from sunpy's https://www.shadertoy.com/view/MdVyRK\nthis is the first time I'm writing shader code so I tried lots of things which ended up in this wall of code",
            "flags": 0,
            "hasliked": 0,
            "id": "4dVyD3",
            "likes": 2,
            "name": "osu! logo",
            "published": 3,
            "tags": [
                "fft",
                "osu"
            ],
            "usePreview": 0,
            "username": "robin_be",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "// based off https://www.shadertoy.com/view/MdVyRK\n\n#define SEED 0.12345679\n\n#define TRI 64.0\n#define SP 0.5\n#define COLOR vec3(0.9411764705882353,0.4274509803921569,0.6549019607843137)\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define HALFPI 1.5707963268\n\nfloat rand (vec2 p) {\n    return fract(sin(dot(p.xy,\n                         vec2(6.8245,7.1248)))*\n        9.1283);\n}\n\nfloat tri(vec2 uv, vec2 p, float s){\n    vec2 v = uv;\n    v -= p;\n    v /= max(s, 0.01);\n    \n\tfloat a = atan(v.x, v.y) + PI;\n    float r = TWO_PI / 3.0;\n    \n    float t = cos(floor(0.5 + a / r) * r - a) * length(v);\n    \n    return smoothstep(0.4, 0.41, t);\n}\n\nfloat yPos(float i){\n    vec2 p = vec2(SEED, i);\n    \n    float r = rand(p);\n    return fract(iTime * SP + r);\n}\n\nfloat xPos(float i, float t){\n    vec2 p = vec2(i, t - iTime * SP);\n    return rand(p) + .375;\n}\n\nvec3 triCol(float i, float t){\n    vec3 col = COLOR;\n    float r = xPos(i + 1.0, t);\n    col *= mix(0.9, 1.1, r);\n    return col;\n}\n\nfloat atan2(float y, float x) {\n \tif(x>0.)return atan(y/x);\n    if(x==0.)if(y>0.)return HALFPI;else return -HALFPI;\n    if(y<0.)return atan(y/x)-PI;return atan(y/x)+PI;\n}\nfloat atan2(vec2 v){return atan2(v.y,v.x);}\nfloat steq(float x,float a,float b){return step(a,x)*step(x,b);}\nvec2 cub_(float t,vec2 a,vec2 b){\n    float ct=1.-t;\n    return 3.*ct*ct*t*a+3.*ct*t*t*b+t*t*t;\n}\nfloat cub(float x,vec2 a,vec2 b){\n    vec2 it=vec2(0.,1.);\n    for (int i=0;i<7;i++) {\n        float pos=(it.x+it.y)/2.;\n        vec2 r=cub_(pos,a,b);\n        if (r.x>x){\n            it.y=pos;\n        }else{\n            it.x=pos;\n        }\n    }\n    return cub_((it.x+it.y)/2.,a,b).y;\n}\nfloat isine(float t){return -1.*cos(t*HALFPI)+1.;}\nfloat osine(float t){return sin(t*HALFPI);}\nfloat iquad(float t){return t*t;}\nfloat oc(float t){t=t-1.;return t*t*t+1.;}\nvec2 oc(vec2 v){return vec2(oc(v.x),oc(v.y));}\nfloat icirc(float t){return -1.*(sqrt(1.-t*t)-1.);}\nvec3 spin(vec3 col_,vec2 fc) {\n    vec3 col=col_;\n    float a=mod(degrees(atan2(fc-iResolution.xy/2.-.5)),360.);\n    float b=mod(iTime*100.,360.);\n    float s=25.;\n    float mi=mod(b-s,360.);\n    float ma=mod(b+s,360.);\n    float d=abs(b-a);\n    if(d>180.)d=a<b?a-b+360.:b+360.-a;\n    if((a>mi||(mi>ma&&a<ma))&&(a<ma||mi>ma))col+=1.-iquad(d/s);\n    return col;\n}\nfloat mb(){\n    return clamp(texture(iChannel0,vec2(0.02,0.2)),0.,1.).x;\n}\nvec3 barz(float d,vec2 fc,float off,float sp) {\n    float a=degrees(atan2(fc-iResolution.xy/2.-.5))/180.+1.;\n    a=mod(a+iTime/sp+off+mb()/3.,2.);\n    a-=1.;\n    if(a<0.)a=-a+0.01;\n    float m=mod(a,.025);\n    if(m<0.01*(1.+d*.6))return vec3(0.);\n    a-=m;\n    float v=clamp(texture(iChannel0,vec2(a,0.1)).x,0.,1.);\n    if (v>d) return vec3(1.);\n    return vec3(0.);\n}\nfloat osu_excdot(vec2 uv) {\n    const float ds=.07;\n    vec2 exc=oc((ds*2.-abs(uv))/ds/2.)*.04;\n    return steq(uv.x,-ds-exc.y,ds+exc.y)*steq(uv.y,-ds-exc.x,ds+exc.x);\n}\nfloat osu_excbody(vec2 uv) {\n    float e=oc((.2-abs(uv.x))/.2)*.04;\n    float ew=(uv.y+.15)*.01;\n    return steq(uv.x,-.1-ew,.1+ew)*steq(uv.y,-.2-e,.2+e);\n}\nfloat osu_u(vec2 uv) {\n    float r=1.18181818;\n    uv+=vec2(.5/r,.5);\n    uv.x*=r;\n    uv.y=1.-uv.y;\n    float c=1.;\n    c-=steq(uv.x,.31,.69)*steq(uv.y,.0,.765-.245*cub(1.-(uv.x-.31)/.38,vec2(.4,-.116),vec2(.994,-.27)));\n    float b=.48*cub(1.-uv.x,vec2(.252,-.164),vec2(1.038,-.52));\n    return c*steq(uv.x,0.,1.)*steq(uv.y,.02*isine(abs(mod(uv.x,.69)-.155)/.31),.933-b);\n}\nfloat osu_sunpy(vec2 uv) {\n    float r=1.397928994;\n    uv+=vec2(.5/r,.5);\n    uv.x*=r;\n    if (steq(uv.x,0.,1.)*steq(uv.y,0.,1.)==0.) {\n        return 0.;\n    }\n    uv.y=1.-uv.y;\n    float c=1.;\n    c-=steq(uv.x,.0,.035+.515*icirc((.3-uv.y)/.3))*steq(uv.y,.0,.3);\n    c-=steq(uv.x,.55,1.)*steq(uv.y,.0,.055*isine(clamp((uv.x-.55)/.4,.0,1.)));\n    c-=steq(uv.x,.95-.07*isine(clamp((uv.y-.055)/.192/*.195*/,.0,1.)),1.)*steq(uv.y,.055,.28);\n    c-=steq(uv.x,.59,.88)*steq(uv.y,.2+.045*isine((uv.x-.59)/.29),.28);\n    c-=steq(uv.x,.4+.19*icirc(1.-(uv.y-.2)/.08),.59)*steq(uv.y,.2,.28);\n    c-=steq(uv.x,.4+.6*cub((uv.y-.28)/.395,vec2(.408,.011),vec2(.104,1.014)),1.)*steq(uv.y,.28,.675);\n    c-=steq(uv.x,1.-.585*icirc((uv.y-.675)/.325),1.)*steq(uv.y,.675,1.);\n    c-=steq(uv.x,.0,.415)*steq(uv.y,.94+.06*osine(uv.x/.415),1.);\n    c-=steq(uv.x,.0,.085*isine(1.-(uv.y-.75)/.19))*steq(uv.y,.75,.94);\n    c-=steq(uv.x,.0,.4)*steq(uv.y,.69,.75+.045*osine(clamp((uv.x-.085)/.315,0.,1.)));\n    c-=steq(uv.x,.4,.645)*steq(uv.y,.69,.795-.105*icirc((uv.x-.4)/.245));\n    c-=steq(uv.x,.0,.035+.61*cub((uv.y-.3)/.39,vec2(.891,-.042),vec2(.592,.977)))*steq(uv.y,.3,.69);\n    return c;\n}\nfloat osu_o(vec2 uv) {\n    float r=1.091666;\n    uv.x*=r;\n    uv.y=1.-abs(uv.y);\n    uv.x=abs(uv.x);\n    float te=cub(uv.x,vec2(.667,.013),vec2(.988,.366));\n    float be=1.-cub(clamp(uv.x/.402,0.,1.),vec2(.783,.035),vec2(.915,.241));\n    return steq(uv.x,0.,1.)*steq(uv.y,0.+te,1.-.595*be);\n}\nfloat osu(vec2 uv) {\n    float col=0.;\n    col+=osu_excdot((uv-vec2(.806,-.192))*1.4);\n    col+=osu_excbody((uv-vec2(.806,.23))*vec2(1.35,.9));\n    col+=osu_u((uv-vec2(.379,.0))*1.7);\n    col+=osu_sunpy((uv-vec2(-.134,.0))*1.7);\n    col+=osu_o((uv-vec2(-.667,.0))*3.4);\n    return col;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float s = 1.2-texture(iChannel0, vec2(0.52,0.2)).x*.4;\n    vec2 uv = fragCoord/iResolution.xy * s-(s-1.)*.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = COLOR;\n    \n    // Generate all dem triangles\n    for (float i = TRI; i > 0.0; i--){\n        float id = i / TRI;\n        float y = yPos(id);\n        float x = xPos(id, y);\n        float s = min(0.89, max(0.071, id * 0.5));\n        float shad = tri(\n            uv,\n            vec2(x, mix(-s, 1.0 + s / 2.0, y)),\n            s\n        );\n        \n        if (shad < 0.1)\n        \tcol = triCol(id, y) * (1.0 - shad);\n    }\n    \n    // Set background mask\n    vec2 mid=vec2(.5*iResolution.x/iResolution.y,.5);\n    float dist = distance(uv,mid);\n    if (dist > 0.4) {\n        col = vec3(0.0);\n        if (dist<0.65){\n            float sp=3.;\n            float el=.1+.2*mb();\n            float d=(dist-.4)/.25;\n          \tcol+=barz(d,fragCoord,0.,sp);\n          \tcol+=barz(d,fragCoord,.5,sp);\n          \tcol+=barz(d,fragCoord,1.,sp);\n          \tcol+=barz(d,fragCoord,1.5,sp);\n            col*=el;\n            col.x*=.75;\n            col.y*=.75;\n        }\n    } else\n        if(dist>0.32&&dist<0.37)col=spin(col,fragCoord);\n    \n    // Make circle logo shadow\n    float dist_shad = distance(uv, vec2(0.5 * iResolution.x / iResolution.y, 0.49));\n    float l_shad = abs(dist_shad - 0.4);\n    col *= mix(0.3, 1.0, min(1.0, l_shad * 30.0));\n    \n    // Make circle logo\n    float l = abs(dist - 0.4);\n    col += vec3(smoothstep(0.96, 0.97, 1.0 - l));\n    \n    if(dist<0.3) //for perf\n    col+=vec3(osu((uv-mid)/.3));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}