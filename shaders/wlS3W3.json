{
    "Shader": {
        "info": {
            "date": "1582818802",
            "description": "Gray Scott Reaction Diffusion",
            "flags": 32,
            "hasliked": 0,
            "id": "wlS3W3",
            "likes": 1,
            "name": "Reacty Diffusy",
            "published": 3,
            "tags": [
                "reactiondiffusiongrayscott"
            ],
            "usePreview": 0,
            "username": "sixstring982",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "// If defined, only renders normals.\n// #define VIEW_NORMALS\n\n// Intensity of specular lighting.\n#define SHININESS 20.\n\n// How tall each RD cell appears to be.\n#define HEIGHT_COEFF 3.\n\n\nvec2 uvFromPx(in vec2 px) {\n    return px / iResolution.xy;\n}\n\nvec3 normal(in vec2 px) {\n    vec2 p1 = vec2(px.x     , px.y - 1.);\n    vec2 p2 = vec2(px.x - 1., px.y + 1.);\n    vec2 p3 = vec2(px.x + 1., px.y + 1.);\n    \n    float h1 = texture(iChannel0, uvFromPx(p1)).y * HEIGHT_COEFF;\n    float h2 = texture(iChannel0, uvFromPx(p2)).y * HEIGHT_COEFF;\n    float h3 = texture(iChannel0, uvFromPx(p3)).y * HEIGHT_COEFF;\n    \n    vec3 a = normalize(vec3(normalize(p1 - p2), h2 - h1));\n    vec3 b = normalize(vec3(normalize(p3 - p2), h2 - h3));\n    \n    return cross(a, b);\n}\n\nvec3 lighting(in vec3 ro, in vec3 normal, vec2 ab) {\n    vec3 light = vec3(10.5, 10.5, -40.5);\n    vec3 N = normal;\n    vec3 L = normalize(light - ro);\n    vec3 V = vec3(0., 0., -1.);\n    vec3 R = normalize(reflect(-L, N));\n\n    vec3 ambient = \n        vec3(0.1, 0.0, 0.2) * ab.y +\n        vec3(0.9, 0.9, 0.9) * ab.x;\n\tfloat diffuse = max(0.0, dot(N, L));\n    float spec = pow(max(0.0, dot(R, V)), 0.3 * SHININESS);\n    \n    return ambient * vec3(diffuse + spec);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 ab = texture(iChannel0, uv).xy;\n    \n    #ifdef VIEW_NORMALS\n    fragColor = vec4(normal(fragCoord), 1.);\n    #else\n    fragColor = vec4(\n        lighting(vec3(uv, ab.y), normal(fragCoord), ab),\n        1.0); \n    #endif\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DA  1.\n#define DB   .5\n#define DT  1.\n#define FEED .055\n#define KILL .062\n\n#define DRES vec2(1.0) / iResolution\n\n#define OZ vec2(1.0, 0.0)\n\n\nvec2 uvFromPx(in vec2 px) {\n    return px / iResolution.xy;\n}\n\nfloat feed(in vec2 px) {\n    // return 0.01;\n    // return uvFromPx(px).y * 0.09 + 0.01;\n    return uvFromPx(iMouse.xy).y * 0.09 + 0.01;\n}\n\nfloat kill(in vec2 px) {\n    // return 0.03;\n    // return uvFromPx(px).x * 0.025 + 0.045;\n    return uvFromPx(iMouse.xy).x * 0.025 + 0.045;\n}\n\nvec2 laplacian(in vec2 p) {\n    return \n        texture(iChannel0, uvFromPx(vec2(p.x - 1., p.y - 1.))).xy * vec2(0.05) +\n        texture(iChannel0, uvFromPx(vec2(p.x     , p.y - 1.))).xy * vec2(0.2 ) +\n        texture(iChannel0, uvFromPx(vec2(p.x + 1., p.y - 1.))).xy * vec2(0.05) +\n        \n        texture(iChannel0, uvFromPx(vec2(p.x - 1., p.y     ))).xy * vec2(0.2 ) +\n        texture(iChannel0, uvFromPx(vec2(p.x     , p.y     ))).xy * vec2(-1. ) +\n        texture(iChannel0, uvFromPx(vec2(p.x + 1., p.y     ))).xy * vec2(0.2 ) +\n        \n        texture(iChannel0, uvFromPx(vec2(p.x - 1., p.y + 1.))).xy * vec2(0.05) +\n        texture(iChannel0, uvFromPx(vec2(p.x     , p.y + 1.))).xy * vec2(0.2 ) +\n        texture(iChannel0, uvFromPx(vec2(p.x + 1., p.y + 1.))).xy * vec2(0.05);\n}\n\nvec2 initialState(in vec2 p) {\n    vec2 uv = (p / iResolution.xy) - vec2(0.5);\n    return mix(OZ, OZ.yx, step(0.2, length(uv)));\n}\n\nvec2 nextState(in vec2 p) {\n    vec2 oldState = texture(iChannel0, uvFromPx(p)).xy;\n    float a = oldState.x;\n    float b = oldState.y;\n    vec2 lp = laplacian(p);\n    return vec2(\n        a + (DA * lp.x - a * b * b + feed(p) * (1. - a)) * DT,\n        b + (DB * lp.y + a * b * b - (kill(p) + feed(p)) * b) * DT);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float initMix = step(0.1, iTime);\n    // fragColor = vec4(initialState(fragCoord), 0.0, 0.0);\n    fragColor = vec4(mix(initialState(fragCoord), nextState(fragCoord), initMix), 0.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}