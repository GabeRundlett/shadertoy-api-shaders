{
    "Shader": {
        "info": {
            "date": "1701512076",
            "description": "just some simple pathtracing with a very straightforward material model.",
            "flags": 32,
            "hasliked": 0,
            "id": "Dl3BWB",
            "likes": 3,
            "name": "litte pathtracing reflections",
            "published": 3,
            "tags": [
                "pathtracingreflectionsmirrordiffuse"
            ],
            "usePreview": 0,
            "username": "ich",
            "viewed": 205
        },
        "renderpass": [
            {
                "code": "#define pi 3.141\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n\tvec4 c = texture(iChannel0, uv);\n    \n    c.rgb = pow(c.rgb, vec3(1./3.));\n    fragColor = c;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.141\n\nfloat n31(vec3 n)\n{\n\treturn fract(sin(dot(n, vec3(12.9898,78.233,12.5429))) * 43758.5453);\n}\n\nfloat n11(float n)\n{\n\treturn n31(vec3(n + 259.753, n * 87.231, (n - 2.97) * 754.234));\n}\n\nvec3 n33(vec3 n)\n{\n\t\tfloat r0 = n31(n);\n\t\tfloat r1 = n31(n + r0);\n\t\tfloat r2 = n31(n + r1);\n\t\treturn vec3(sin(r0), sin(r1), sin(r2));\n}\n\nfloat sphere(vec3 ro, vec3 rd, vec3 c, float r)\n{   \n    vec3 a = rd * (ro - c);\n    float b = dot(rd, rd);\n    float p = dot(a, vec3(2)) / b;\n    a = ro - c;\n    float q = (dot(a, ro - c) - r * r) / b;\n    p = p / 2.;\n    q = p * p - q;\n    \n    if (q < 0.)\n        return 0.;\n    \n    q = sqrt(q);\n    float l1 = -p + q;\n    float l2 = -p - q;\n    \n    if (l1 > 0. && l2 > 0.)\n        return min(l1, l2);\n    else\n        return max(l1, l2);\n}\n\nfloat plane(vec3 ro, vec3 rd, vec3 o, vec3 n)\n{\n\treturn (dot(n, o) - dot(n, ro)) / dot(n, rd);\n}\n\nstruct material_t {\n\tbool light;\n\tbool metal;\n\tfloat roughness;\n\tvec3 color;\n};\n\nbool scene(vec3 ro, vec3 rd, out vec3 p, out vec3 n, out material_t m)\n{\n\tint si = -1;\n\tfloat lmin;\n\n\tconst int sz = 9;\n\tvec3 sc[sz] = vec3[sz] (\n\t\t\tvec3(0, 0, 5),\n\t\t\tvec3(-1, 0, 5),\n\t\t\tvec3(1, 0, 5),\n\t\t\tvec3(1, 1, 5),\n\t\t\tvec3(1, -1, 5),\n\t\t\tvec3(0, -1, 5),\n\t\t\tvec3(0, 1, 5),\n\t\t\tvec3(-1, 1, 5),\n\t\t\tvec3(-1, -1, 5)\n\t);\n\n\tfor (int i = 0; i < sz; ++i) {\n\t\tfloat l = sphere(ro, rd, sc[i], .5);\n\t\tif (l > 0. && (si == -1 || l < lmin)) {\n\t\t\tlmin = l;\n\t\t\tsi = i;\n\t\t}\n\t}\n\n\tconst int pz = 6;\n\tvec3 pc[pz] = vec3[pz] (\n\t\tvec3(0, 0, 6.5),\n\t\tvec3(0, 0, -1), \n\t\tvec3(-1.5, 0, 0),\n\t\tvec3(1.5, 0, 0),\n\t\tvec3(0, -1.5, 0),\n\t\tvec3(0, 1.5, 0)\n\t);\n\tvec3 pn[pz] = vec3[pz] (\n\t\tvec3(0, 0, -1),\n\t\tvec3(0, 0, 1),\n\t\tvec3(1, 0, 0),\n\t\tvec3(-1, 0, 0),\n\t\tvec3(0, 1, 0),\n\t\tvec3(0, -1, 0)\n\t);\n\tbool b = false;\n\tfor (int i = 0; i < pz; ++i) {\n\t\tfloat l = plane(ro, rd, pc[i], pn[i]);\n\t\tif (l > 0. && (si == -1 || l < lmin)) {\n\t\t\tlmin = l;\n\t\t\tsi = sz + i;\n\t\t\tb = true;\n\t\t}\n\t}\n\n\tif (si == -1)\n\t\treturn false;\n\n\tp = ro + rd * lmin;\n\tm.color = mix(n33(vec3(si + 1)), vec3(1), .5);\n\tm.metal = false;\n\t/* m.metal = n11(floor(iTime * .2) + si + 5) < .2; */\n\tm.roughness = n11(floor(iTime * .2) + float(si) + 10.);\n\tm.light = n11(floor((iTime) * .2 + 1.) + float(si) + 2.) < .13;\n\n\tif (si < sz)\n\t\tn = normalize(p - sc[si]);\n\telse\n\t\tn = pn[si - sz];\n\n\treturn true;\n}\n\nvec3 rotate(vec3 v, float r, vec3 n)\n{\n\tvec3 v0 = ((v * n) / (v * n)) * n;\n\tvec3 v1 = v - v0;\n\tvec3 w = cross(n, v1);\n\tfloat x0 = cos(r) / length(v1);\n\tfloat x1 = sin(r) / length(w);\n\treturn length(v1) * (x0 * v1 + x1 * w);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 dims = iResolution.xy;\n    vec2 pixel_coord = fragCoord;\n\n\t//float t = iTime * pi * 2.;\n\tvec2 uv = (pixel_coord - dims * .5) / dims.y;\n\tvec3 c = vec3(0);\n\n\tvec3 ro = vec3(0);\n\tvec3 rd = normalize(vec3(vec2(-uv.x, uv.y), 1));\n\t/* vec3 rd = normalize(vec3(uv, 1)); */\n\n\t//vec3 b = vec3(cos(t) * 3., 3, sin(t) * 1.83);\n\n\tbool hl = false;\n\tvec3 rc = vec3(1, 1, 1);\n\tfloat rl = 0.;\n\tvec3 p = ro;\n\tvec3 n;\n\tmaterial_t m;\n\n\tfor (int i = 0; i < 10; ++i) {\n\t\tif (scene(ro, rd, p, n, m)) {\n\t\t\tif (m.light) {\n\t\t\t\thl = true;\n\t\t\t\trc *= m.color;\n\t\t\t\trc /= pow((rl * .05 + 1.), 2.);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!m.metal)\n\t\t\t\trc *= m.color;\n\n\t\t\trl += length(p - ro);\n\t\t\tro = p;\n\n\t\t\tvec3 rr = normalize(reflect(rd, n));\n\t\t\tvec3 rn = normalize(n + n33(p + mod(iTime, 1.)) - .5);\n\n\t\t\trd = normalize(mix(rr, rn, m.roughness));\n\t\t\tro += rd * .001;\n\n\t\t} else {\n\t\t\trc = vec3(0);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* rc += n; */\n\n\tif (!hl)\n\t\trc = vec3(0, 0, 0);\n\n\t/* c += mix(rc, imageLoad(img_output, ivec2(pixel_coord)).rgb, max(0., 1. - delta_time)); */\n\tc = rc;\n\n    {\n        vec2 uv = fragCoord / iResolution.xy;\n        vec3 storedC = texture(iChannel0, uv).rgb;\n        c = mix(storedC, c, vec3(.05));\n    }\n    \n    fragColor = vec4(c, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}