{
    "Shader": {
        "info": {
            "date": "1670768387",
            "description": "The result of me playing through several iterations of buffer feedback effects as a learning exercise to get acquainted with shadertoy ",
            "flags": 36,
            "hasliked": 0,
            "id": "mdjSzd",
            "likes": 7,
            "name": "Reaction Diffusion Visualizer",
            "published": 3,
            "tags": [
                "visualizer",
                "reactiondiffusion",
                "microphone"
            ],
            "usePreview": 0,
            "username": "DigitalShadow",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI2 6.28318530718\n#define M1 1597334677U\n#define M2 3812015801U\n\n//blur quality (lower is faster, higher looks better)\nconst int samples = 6;\n\n//determines blob shape\nconst float blurSize1 = 0.5;\nconst float blurSize2 = 25.0;\n\n//\nconst float clampWindow = 1.0;\n\nconst float sigma = float(samples) * 0.25;\n\n\n//Fast Hash\nfloat hash( uvec2 q )\n{\n    q *= uvec2(M1, M2); \n    \n    uint n = (q.x ^ q.y) * M1;\n    \n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n\n\n//Gaussian Function\nfloat gaussian(vec2 i){\n    return exp(-0.5 * dot(i /= sigma, i)) / (PI2 * sigma * sigma);\n}\n\n\n\n//Gaussian Blur w/ alpha channel\nvec4 gaussBlur(sampler2D channel, vec2 uv, vec2 scale){\n    vec4 result = vec4(0.0);\n    vec2 d;\n    for(int i=0; i < samples * samples; i++){\n        d = vec2(i%samples, i/samples) - float(samples) / 2.0;\n        result += gaussian (d) * texture(channel, uv + scale * d);\n    }\n    return result / result.a;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //generate noise layer\n    vec3 noise = vec3(1.0,1.0,1.0) * hash(uvec2(fragCoord*iTime));\n\n    //get fft, mirrored version, and composite across the X dimension\n    float fft = texture(iChannel1,vec2(uv.x, 0.25)).r;\n    float fft2 = texture(iChannel1,vec2(1.0 - uv.x, 0.25)).r;\n    float fft3 = (fft+fft2)/2.0;\n    \n    //get waveform across the Y dimension\n    float wave = texture(iChannel1, vec2(uv.y, 0.75)).r;\n    \n    //alternate uv coordinates used to zoom and warp buffer feedback \n    vec2 uv2 = (uv - 0.5);\n    uv2 *= 0.995 * (1.0+(length(uv2/2.0) / 200.0));\n    uv2.x += 0.0001 * cos(fft3 * 100.);\n    uv2.y += 0.0001 * sin(wave * 100.);\n    uv2 = uv2 + 0.5;\n    \n    //get feedback layer\n    vec3 prev = texture(iChannel0, uv2).rgb;\n   \n    //dymamic blur radius, does most of the work for the desired reaction to sound\n    float vB = (blurSize2 / 4.0) + (2.0 * wave * wave * blurSize2) + (2.0 * fft3 * -blurSize2 * noise.r);\n    \n    //get two versions of blurred image\n    vec3 blur1 = gaussBlur(iChannel0, uv, blurSize1 / iChannelResolution[0].xy).rrr;\n    vec3 blur2 = gaussBlur(iChannel0, uv, vB / iChannelResolution[0].xy).rrr;\n    \n    //reaction diffusion acheived by subtracting heavily blurred version from lightly blurred copy\n    vec3 col = prev - (blur2 - blur1)*.5;\n    \n    //prevent value runaway\n    col = clamp(col, -clampWindow, 1.0 + clampWindow);\n    \n    //seed new noise\n    col = mix(col, noise * (fft*wave), 0.20).rrr;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}