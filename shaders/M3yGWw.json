{
    "Shader": {
        "info": {
            "date": "1718909887",
            "description": "Some physically based cloud shading. Could improve the sampling of this.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3yGWw",
            "likes": 8,
            "name": "PBR volumetric cloud rendering",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "clouds",
                "volumetric"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "#define STEPS 32\n#define NUM_FBM 5\n#define MAX_DIST 3.0\n\nfloat calculateSkyDepth(vec3 rd) {\n    float horizon = rd.y;\n    \n    return 1.0 / max(horizon, 0.0001);\n}\n\nvec3 calculateSkyTransmittance(float od) {\n    return exp(-mieScatteringColor * od);\n}\n\nvec3 calculateSkylight(vec3 rd, vec3 ld) {\n    float depthView = calculateSkyDepth(rd);\n    float depthSun = calculateSkyDepth(ld);\n    \n    vec3 scatterView = depthView * mieScatteringColor;\n    vec3 scatterSun = depthSun * mieScatteringColor;\n    \n    vec3 transmittanceSun = calculateSkyTransmittance(depthSun);\n    vec3 transmittanceView = calculateSkyTransmittance(depthView);\n    \n    vec3 totalTransmittance = abs(transmittanceSun - transmittanceView) / max(abs(scatterSun - scatterView), 1e-6);\n    \n    float rayleighPhase = rayLeigh(dot(rd, ld));\n    \n    return totalTransmittance * scatterView * rayleighPhase * sunColor;\n}\n\nfloat fbm(vec3 p) {\n    float freq = 1.0;\n    float atten = 0.5;\n    \n    float result = 1.0;\n    \n    for (int i = 0; i < NUM_FBM; i++) {\n    \n        result -= texture(iChannel0, p * freq).r * atten;\n        \n        freq *= 2.0;\n        atten *= 0.5;\n    }\n    \n    return result;\n}\n\nfloat density(vec3 p) {\n    float dist = length(p.xz);\n    float relativeHeight = p.y;\n    \n    float bottomRange = clampedMap(relativeHeight, cloudMinHeight, cloudCenterHeight, 0.0, 1.0);\n    float topRange = clampedMap(relativeHeight, cloudCenterHeight, cloudMaxHeight, 1.0, 0.0);\n    \n    float hDensity = topRange * bottomRange;\n    \n    float topDensityAdd = ((1.0 - topRange) * 12. + 1.0);\n    \n    float noise = fbm(p * 0.2);\n    float d = clamp(((((1.0 - dist) + noise) * hDensity) * 2. - 0.5) * topDensityAdd, 0.0, 1.0);\n    // Bottom taper\n    d = d * bottomRange;\n    \n    return d;\n}\n\nfloat calculateLightOd(vec3 ro, vec3 rd) {\n    const int steps = 32;\n    \n    float rayLength = 0.01;\n    float totalDepth = 0.0;\n    \n    vec3 rayPosition = ro;\n    float rayDepth = 0.0;\n    \n    for (int i = 0; i < steps; i++) {\n        float od = density(rayPosition) * rayLength;\n        \n        rayPosition += rd * rayLength;\n        rayLength *= 1.15;\n        totalDepth += od;\n        \n        rayDepth += 1.0;\n    }\n    \n    return totalDepth;\n}\n\nvoid evalulateScattering(inout vec3 scattering, vec3 rayPos, float trans, float cosTheta, float sunOd, float downOd, float contribution_a, float sigma_b, float phase) {  \n    float scatterHeight = max((cloudMaxHeight+cloudMinHeight)*0.5-rayPos.y, 0.0);\n    \n    scattering.x += exp(-sunOd * sigma_b) * phase * contribution_a;\n    scattering.y += exp(-scatterHeight * sigma_b) * contribution_a;\n    scattering.z += exp(-downOd * sigma_b) * contribution_a;\n}\n\nvec3 calculateLighting(vec3 lightDir, vec3 rayPos, float integral, float transmittance, float totalOd, float cosTheta, float phases[multi_scattering_steps]) {\n    float sunOd = calculateLightOd(rayPos, lightDir);\n    float downOd = calculateLightOd(rayPos, vec3(0.0, -1.0, 0.0));\n    \n    float powder = (1.0 - exp(-sunOd * scatteringCoefficient * 2.));\n    float powderAmbientDown = (1.0 - exp(-downOd * scatteringCoefficient * 2.));\n    float multiScatterPowder = (1.0 - exp(-totalOd * scatteringCoefficient * 2. / (powder + 1e-6)));\n    float ambientPowder = (1.0 - exp(-totalOd * scatteringCoefficient * 2.));\n    \n    vec3 scattering = vec3(0.0);\n    float contribution_a = 1.0;\n    float contribution_b = 1.0;\n    \n    for (int i = 0; i < multi_scattering_steps; i++) {\n        float sigma_b = contribution_b * extinctionCoefficient;\n    \n        float phase = phases[i];\n        evalulateScattering(scattering, rayPos, transmittance, cosTheta, sunOd, downOd, contribution_a, sigma_b, phase);\n        \n        contribution_a *= m_a;\n        contribution_b *= m_b;\n    }\n    \n    scattering.x *= powder * multiScatterPowder;\n    scattering.y *= ambientPowder;\n    scattering.z *= ambientPowder * powderAmbientDown;\n\n    return scattering * integral * transmittance;\n}\n\nvec3 march(vec3 color, vec3 ro, vec3 rd, vec3 lightDir, float dither) {\n\n    vec3 start = ro;\n    vec3 end = ro + rd * MAX_DIST;\n    \n    vec3 increment = (end - start) / float(STEPS);\n    float rayLength = length(increment);\n    \n    float scatteringSun = 0.0;\n    float scatteringAmbientUp = 0.0;\n    float scatteringAmbientDown = 0.0;\n    float transmittance = 1.0;\n    float totalOd = 0.0;\n    float downBeer = 0.0;\n    \n    vec3 rayPosition = start + increment * dither;\n    \n    float cosTheta = dot(rd, lightDir);\n    \n    float[multi_scattering_steps] phases;\n    calculateMultiscatterPhases(cosTheta, phases);\n    \n    for (int i = 0; i < STEPS; i++, rayPosition += increment) {\n        float od = density(rayPosition) * rayLength;\n        \n        if (od <= 0.0) {\n            continue;\n        }\n        totalOd += od;\n        \n        float stepTransmittance = exp(-od * extinctionCoefficient);\n        float integral = scatteringIntegral(stepTransmittance);\n        \n        vec3 lightingValues = calculateLighting(lightDir, rayPosition, integral, transmittance, totalOd, cosTheta, phases);\n        \n        scatteringSun += lightingValues.x;\n        scatteringAmbientUp += lightingValues.y;\n        scatteringAmbientDown += lightingValues.z; // Simulate ground lighting\n        \n        transmittance *= stepTransmittance;\n        \n        if (transmittance < 0.01) {\n            transmittance = 0.0;\n            break;\n        }\n    }\n    \n    vec3 skyUp = calculateSkylight(vec3(0.0, 1.0, 0.0), lightDir);\n    vec3 skyDown = calculateSkylight(vec3(0.0, -1.0, 0.0), lightDir);\n    vec3 ambientLighting = (\n        scatteringAmbientUp * skyUp +\n        scatteringAmbientDown * skyDown * rPI\n        );\n    \n    vec3 sunTint = calculateSkyTransmittance(calculateSkyDepth(lightDir));\n\n    vec3 scattering = vec3(0.0);\n    scattering += scatteringSun * sunColor * sunTint;\n    scattering += ambientLighting * 0.25 * PI;\n\n    return color * transmittance + scattering;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 wuv = (uv * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);\n    vec3 rd = normalize(vec3(wuv, 1.0));\n    vec3 ro = vec3(0.0, 0.1, -2.0);\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    vec3 lightDir = normalize(vec3(cos(-mouse.x * 2.0 * PI), tan((mouse.y - 0.01) * PI * 0.5) + 0.04, sin(-mouse.x * 2.0 * PI)));\n    \n    float dither = bayer64(fragCoord);\n    \n    vec3 color = calculateSkylight(rd, lightDir);\n    \n    vec3 marchedVolume = march(color, ro, rd, lightDir, dither);\n    \n    color = vec3(marchedVolume);\n    \n    color = color / (color + 1.0);\n    color = pow(color, vec3(1.0 / 2.2));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define multi_scattering_steps 8\n\n#define m_a 0.5\n#define m_b 0.5\n\n#define phase_g_forward 0.8\n#define phase_g_backward 0.5\n\nconst vec3 mieScatteringColor = vec3(0.2, 0.45, 1.0) * 0.125;\nconst vec3 sunColor = vec3(1.0, 1.0, 1.0) * 10.0;\n\nconst float scatteringCoefficient = 8.0;\nconst float absorptionCoefficient = 0.0;\nconst float extinctionCoefficient = scatteringCoefficient + absorptionCoefficient;\n\nconst float cloudMaxHeight = 1.3;\nconst float cloudMinHeight = -0.2;\nconst float cloudCenterHeight = 0.0;\n\nconst float PI = acos(-1.0);\nconst float rPI = 1.0 / PI;\n\nfloat bayer2(vec2 a) {\n    a = floor(a);\n\n    return fract(dot(a, vec2(0.5, a.y * 0.75)));\n}\n\n\nfloat bayer4(const vec2 a)   { return bayer2 (0.5   * a) * 0.25     + bayer2(a); }\nfloat bayer8(const vec2 a)   { return bayer4 (0.5   * a) * 0.25     + bayer2(a); }\nfloat bayer16(const vec2 a)  { return bayer4 (0.25  * a) * 0.0625   + bayer4(a); }\nfloat bayer32(const vec2 a)  { return bayer8 (0.25  * a) * 0.0625   + bayer4(a); }\nfloat bayer64(const vec2 a)  { return bayer8 (0.125 * a) * 0.015625 + bayer8(a); }\nfloat bayer128(const vec2 a) { return bayer16(0.125 * a) * 0.015625 + bayer8(a); }\n\n\nfloat henyeyGreenstein(float g, float cosTheta) {\n    float g2 = g * g;\n\n    return 0.25 * rPI * (1.0 - g2) * (pow(1.0 + g2 - 2.0 * g * cosTheta, -1.5));\n}\n\nfloat rayLeigh(float cosTheta) {\n    return rPI * (3.0 / 16.0) * (cosTheta * cosTheta + 1.0);\n}\n\nfloat dualLobeHG(float cosTheta, float g0, float g1, float m) {\n    float h0 = henyeyGreenstein(g0, cosTheta);\n    float h1 = henyeyGreenstein(-g1, cosTheta);\n    \n    return mix(h1, h0, m);\n}\n\nfloat scatteringIntegral(float stepTransmittance) {\n    return (1.0 - stepTransmittance) * scatteringCoefficient / extinctionCoefficient;\n}\n\nvoid calculateMultiscatterPhases(float cosTheta, inout float phases[multi_scattering_steps]) {\n    float c_f = 1.0;\n    float c_b = 1.0;\n    \n    for (int i = 0; i < multi_scattering_steps; i++) {\n        phases[i] = dualLobeHG(cosTheta, phase_g_forward * c_f, phase_g_backward * c_b, 0.5);\n        \n        c_f *= phase_g_forward;\n        c_b *= phase_g_backward;\n    }\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n     return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat clampedMap(float value, float min1, float max1, float min2, float max2) {\n    return clamp(map(value, min1, max1, min2, max2), 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}