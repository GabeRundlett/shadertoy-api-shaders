{
    "Shader": {
        "info": {
            "date": "1633716493",
            "description": "iMouse to paint some dumb dots.\n\niChannel0 only once sets the texture of most pixels.\nbottom left pixels store previous resolutions.\nit notices changes in resolution and remaps uv to the size of the previous backbuffer.\nbut it crops too soon.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdtSRl",
            "likes": 5,
            "name": "resolution change buffer",
            "published": 3,
            "tags": [
                "branchless",
                "tonemap",
                "isinside",
                "remap",
                "caseless"
            ],
            "usePreview": 1,
            "username": "ollj",
            "viewed": 1865
        },
        "renderpass": [
            {
                "code": "\nvoid frameSort(inout vec2 a,inout vec2 b//bottomLeft,topRight (as they SHOULD become)\n){vec2 c=vec2(min(a.x,b.x),min(a.y,b.y))\n      ;b=vec2(max(a.x,b.x),max(a.y,b.y));a=c;}\n\n\nfloat dither(vec2 u){return mod(u.x+u.y,2.);}\n\nvoid mainImage( out vec4 o,vec2 u \n){\n //;if (length(iMouse.xy/iR.xy-u/iR.xy)<.2)   o=vec4(0)\n //;else o=vec4(1)\n o=texture(iChannel0,u/iResolution.xy)\n ;}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iM iMouse\n#define iR iResolution\n\n#define vec1 float\n\nfloat ma(vec2 u){return max(u.x,u.y);}\n\n//vec2 i12v1(ivec2 a){return vec2(intBitsToFloat(a));}\n\n//code of this shader merges map()==remap() and tonemap() by calling a shared subroutine mapu()\n//without using or showing ANY of that.\n//the remap() function is not used by this shader.\n//the toemap() function is not used by this shader.\n//i just wanted to store this memo-code in a tiny unrelated shader to load fast.\n//\n//map() use case:\n//whenever a shader buffers screenspace coords\n//, and you want to translate between different resolutions\n//, you may need map()=remap()\n//\n//this shader shows more in terms of simplicity\n\n/*\n//for example:\n//Ýou buffer [previous] resolution=get(BufferAddressOfPreviousResolution)\n//You want to rescale to a current iResolution.xy (for incremental Averaging (within TemporalReprojection))\n//And You want to rescale from and to a normalized Uv coord.\n//\n//for example, you want to pixelate the resolution of your scene by any percentage, by remapping to a lower resolution.\n\n//We have 3  different domains, and a var with the same RELATIVE point in them.\nfragCoordNow___domain=[    vec2( 0),iResolution.xy]\nfragCoordPrev__domain=[    vec2( 0),   previous.xy] previous.xy=iResolution.xy, but buffered in prefious frame, and read 1 frame later.\n       uv______domain=[-aspectRatio,aspectRatio.xy] aspectRatio.xy=vec2(1,iResolution.y/iResolution.x) (or was it its inverse?)\n\n//\n//We can use map() translate between these 3 domains:\nvec2 uv           =map(fragCoordNow  ,        vec2( 0),iResolution.xy , -aspectRatio.xy,aspectRatio.xy) //==frame(uvNow)\nvec2 uv           =map(fragCoordPrev ,        vec2( 0),    revious.xy , -aspectRatio.xy,aspectRatio.xy)\n//\nvec2 fragCoordNow =map(fragCoordPrev ,        vec2( 0),   previous.xy , vec2(0),iResolution.xy)\nvec2 fragCoordNow =map(uv            , -aspectRatio.xy,aspectRatio.xy , vec2(0),iResolution.xy)\n//\nvec2 fragCoordPrev=map(uv            , -aspectRatio.xy,aspectRatio.xy , vec2(0),previous.xy)\nvec2 fragCoordPrev=map(fragCoordNow  ,        vec2( 0),iResolution.xy , vec2(0),previous.xy)\n*/\n\n//defines are used to do vec2 vec3 vec4 inputs in parallel (and also, because a special case is a subroutine here (kinda strange))\n//(unholy core) union of tonemap() and remap() \n#define mapu(a,b,c,d,e) (a)*(b)/(c+(d)*(e))\n//return [x] of domain[a,b] remap()ped to domain [c,d], as if a=c && b=d;transform [a,b]->[c,d]\n#define map(x,a,b,c,d) mapu(x,1.,0.,a+d-(b)-(c),1.)+(c)\n\n//common special vases of the above general cases are:\n\n//common quadratic gamma correction tonemap:\nvec3 tonemap(vec3 x){return mapu(x,2.51*x+.06,.14,x,.59+2.43*x);}\n\n//common special case remap() \n//return [x] of domain[a,b] remap()ped to domain [0,1], as if a=0 && b=1;transform [a,b]->[0,1] == remap(x,a,b,0.,1.) \n//as in smoothstep(a,b,x) https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/smoothstep.xhtml\n#define maps(x,a,b) (x-(a))/(b-(a))\n//#define map(x,a,b,c,d) (maps(x,a,b)*(d-(c))+c) //convoluted alternative\n\n//map(), but [ d == -c ] \n//to translate from Min&&maxBoundaries to Center&&width\n#define mapm(x,a,b,d) (maps(x,a,b)*(d+d)-(d))\n//map(), but [ b == -a ] \n//to translate from Center&&width to Min&&maxBoundaries\n#define mapc(x,b,c,d) mapu(x,1.,0.,a+a+d-(c))+(c)\n\n\n//remap u.x and u.y (==fragCoord.xy) to [-1,1]*s (also unsquashing aspectRatio)\nvec2 frame(vec2 u,vec2 r,vec2  s){s*=vec2(r.x/r.y,1);return mapm(u,vec2(0),r,s);}\nvec2 frame(vec2 u,vec2 r,float s){return frame(u,r,vec2(s));} // [0,iR.xy] -> [-1,1]\nvec2 frame(vec2 u,vec2 r        ){return frame(u,r,1.);}//default zoom is 1.\n//frame(u) is identical to: {u=u/iR.xy;u=u*2.-1.;u.x*=iR.x/iR.y;return u;}\n\nfloat mi(vec2 a){return min(a.x,a.y);}\nfloat mi(vec4 a){return min(mi(a.xy),mi(a.zw));}\n//#define ma(a) (-(mi(-(a))))\n\n//float box(vec2 u,vec2 w,vec2 v){return ma(abs(u-w)-v);}\n//i can use box() within outsideOpen(), but its too convoluted and only half as precise.\n/*\nfloat box(vec2 u,vec2 w){return ma(abs(u-w));}\n//extended box function, to use within outsideOpen()\nfloat outsideOpen  (vec2 u,vec4 l){\n ;vec2 w=((l.zw-l.xy)*.5)//halfWidth\n ;return -sign(min(box(l.xy+w,u,w),0.))\n ;return ceil(mi((l-u.xyxy)*S.xxzz))//this line is identical to all of ther above\n ;}\n */\n\nconst vec4 S=vec4(-1,0,1,2);\n//isInside  is a  CLOSED interval 2d box\n//isOutside is an OPEN   interval 2d box\nfloat outsideOpen  (vec2 u,vec4 l){return ceil( mi((l-u.xyxy)*S.xxzz));}\nfloat  insideClosed(vec2 u,vec4 l){return ceil(-mi((l-u.xyxy)*S.xxzz));}\nfloat outsideOpen  (vec2 u,vec2 bl,vec2 tr){return  outsideOpen(u,vec4(bl,tr));}\nfloat  insideClosed(vec2 u,vec2 bl,vec2 tr){return insideClosed(u,vec4(bl,tr));}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 o,in vec2 u\n){o-=o\n ;if (ma(u)<2.) o=vec4(iR.xy,0,1)//backbuffer of previous iR\n ;else{\n  ;if (iFrame<10){o=texture(iChannel1,frame(u,iR.xy,1./4.));return//set image once\n  ;}else{\n   ;vec2 iRp=texture(iChannel0,vec2(0)).xy\n  ;if (iR.xy!=iRp.xy\n  )o=texture(  iChannel0,\n  vec2(u.x/iR.x*iRp.x/iR.x\n      ,u.y/iR.y*iRp.y/iR.y) )       //remap u to old resolution.\n  ;else o=texture(iChannel0,u/iR.xy)//no resolution change.\n  ;if(iMouse.z>0.){//paint mode\n   ;float l=length(iMouse.xy/iR.xy-u/iR.xy)\n   ;if (l<.05)   o=vec4(sin(l*31.*4.)*.5+.5);\n  }\n  ;}\n ;}}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}