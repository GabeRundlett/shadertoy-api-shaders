{
    "Shader": {
        "info": {
            "date": "1492730552",
            "description": "simplifying \nhttps://www.shadertoy.com/view/XdSyzK\ni noticed it has some bad cases when the ray is EXACTLY on the border of a hex.\nwhich seems to not happen on \nhttps://www.shadertoy.com/view/XdSyzK",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSyRK",
            "likes": 6,
            "name": "hex traversal solved",
            "published": 3,
            "tags": [
                "hex",
                "error",
                "solution",
                "traversal"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 939
        },
        "renderpass": [
            {
                "code": "//title is less messy than shadertoys login server.\n/*\ndamn these 6 rd cases are tricky if you round too good and have lines on hex borders:\n  ro=vec2(0,0);//debug overwrite\n  //debug overwrite //debug the \"line exactly on hex border\" cases\n  rd=vec2(1,0);\n  rd=vec2(-1,0);\n  rd=vec2(sqrt(3.)  /3.,1);\n  rd=vec2(-sqrt(3.) /3.,1);\n  rd=vec2( sqrt(3.) /3.,-1);\n  rd=vec2(-sqrt(3.) /3.,-1);\n\n\nhttps://www.shadertoy.com/view/XdSyzK\nlikely just doesnt round as well as my==THIS version of it, so for \nhttps://www.shadertoy.com/view/XdSyzK\nit is just harder to intentionally get the line exactly on a hex border.\n\nfis the case combinations at lines 90 to 100\nand lines 120 to 125 (order of min(f,g,h) evaluation also does matter!\naswell as wether to use ifb() or mix() within rayMin();\n\nor maybe i made a typo somewhere (less likely)\nor maybe ifb() can not be trusted, which also keeps confusing me in other shaders.\n*/\n\n//https://www.shadertoy.com/view/XdSyzK\n/* Hex grid marching, by mattz\n   License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n   Click and drag to set ray direction.\n   Much of the code below could be simplified/optimized. \n\n*/\n\n#define scl (25.5/iResolution.y)\n\nconst float s3=sqrt(3.);\nconst float s3h=s3*.5;//0.8660254037844386;\nconst vec2 s3v=vec2(s3h,1);\n\n//return ifb(a,b,c); is identical to if(a<0.){return b;}else{return c;} but branchless:\n//#define ifb(a,b,c) mix(b,c,step(a,0.));\n#define ifb(a,b,c) ((b-b*step(a,0.))+(c*step(a,0.)))\n//#define ifb(a,b,c) (b+(c-b)*step(a,0.))\n\n//return center of nearest hexagon\nvec2 nearestHexCenter(in vec2 p){\n vec2 i=floor(vec2(p.x/s3h, p.y));\n i+=mod(vec2(i.x,i.y-step(2.,mod(i.x+1.,4.))),2.);\n vec2 h=i*vec2(s3h,1.);p-=h;//cartesian hexagonCenter\n float c=dot(abs(p),s3v*.5)-1.;\n vec2 h2=(i+(sign(p)*vec2(2,1)))*s3v;\n return ifb(c,h2,h);}\n\n// Flip [n]normal if necessary to have positive dot product with d\n//#define an(n,d) (n*sign(dot(n,d)))\nvec2 an(vec2 n, vec2 d){return n*sign(dot(n, d));}\n//return intersection of 2dRay.[o]origin.[d]direction with hex-wall of normal [n]\n//#define ih(o,d,n) vec3(n,(1.-dot(n,o))/dot(n,d))\n\n//intersection of ray with hex.\nvec3 ih(vec2 o, vec2 d, vec2 n){float u=(1.0-dot(n,o));\n if(dot(n,d)==0.)return vec3(n,u*1e6);//1e7 is already too large\n                 return vec3(n,u/dot(n,d));}\n\n//return vec3 with the smaller .z\nvec3 rayMin(vec3 a,vec3 b){\n  //return mix(a,b,step(b.z,a.z));\n  //mix() seems to avoid the 6 \"on-hex-border-cases)\n  //not sure if it avoids due to lack of precision or due to being more precise.\n  return ifb(a.z-b.z,b,a);\n  //here ifB() is either not precise enough \n  //or actually TOO PRECISE (???)\n  //for the 6 cases where ray is EACTLY on a hexBorder\n}\n\n// Used only for visualization\nfloat hexDist(vec2 p){return max(dot(abs(p),vec2(s3h,.5)),abs(p.y))-1.;}\n\nvoid mainImage(out vec4 Out,in vec2 In){\n float ray_width     =scl*.31;\n float dot_size      =scl*2.;\n float gridline_width=scl*.01;\n float outline_dist  =scl*.3;\n vec2 p=(In+.5-.5*iResolution.xy)*scl;\n float t=iTime;\n vec2 m=iMouse.xy;\n if(iMouse.x==0.){m=.5*iResolution.xy;}\n //framing.end\n //ray.start\n vec2 o=vec2(sin(t),cos(t))*.2/scl;//ray.Origin\n vec2 d=(m-0.5*iResolution.xy)*scl-o;//ray.Direction\n  o=vec2(0,0);//debug overwrite\n  //debug overwrite //debug the \"line exactly on hex border\" cases\n  d=vec2(1,0);\n  d=vec2(-1,0);\n  //the 2 above cases are circumvented by the branch within ih() that avoids division by 0.\n  //these 4 cases below are most prone to errors;\n  //resolved by using #define ifb(a,b,c) ((b-b*step(a,0.))+(c*step(a,0.)))\n  \n  d=vec2(s3 /3.,1);\n  //d=vec2(-s3/3.,1);\n  //d=vec2( s3/3.,-1);\n  //d=vec2(-s3/3.,-1);\n  //d=vec2(1,0);  \n  //d=vec2(-1,0);  \n\n  \n //set up ray hex grid traversal\n float rdd=length(p-o);\n vec2 f=an(vec2(0.,1.),d),g=an(vec2(s3h,.5),d),h=an(vec2(s3h,-.5),d);   \n //get nearest hex center to ray origin\n vec2 ro_hex_pos=nearestHexCenter(o);//is needed later.\n //instead of moving the hexagon center as we traverse the hex grid,\n //we will translate the ray origin in the opposite direction\n vec2 od=o-nearestHexCenter(o);//ro_hex_pos;//accumulates in the coming loop:\n // march along ray, one iteration per cell\n vec2 rdelta=ro_hex_pos;\n\n //march along ray, one iteration per cell\n for(int i=0;i<20;++i) {\n  vec2 e=o-rdelta; // after three tests,\n     \n  //different orders of  f,g,h result in different errors \n  //for above the 6 cases were ra is ON border of hexes.\n     \n  vec3     m=ih(e,d,f);\n  m=rayMin(m,ih(e,d,g));\n  m=rayMin(m,ih(e,d,h));//m.xy=normal //m.z=distance\n  rdelta+=2.*m.xy;\n  rdd=min(rdd,length(p-o-d*m.z));}\n    \n //visualization    \n vec3 c=vec3(.5);//background color\n c*=smoothstep(0.,scl,abs(hexDist(p-nearestHexCenter(p)))-gridline_width); // grid lines\n const vec3 rc=vec3(1,1,0);\n\n //render ray\n float ray_line_dist=length(p-o-max(0.0, dot(p-o,d)/dot(d, d))*d);\n c=mix(c,rc,smoothstep(scl,0.,ray_line_dist-ray_width));//line \n c=mix(rc,c,smoothstep(0.,scl,rdd-dot_size));//dot\n Out=vec4(c,1);           \n}//v7\n\n/*\nsimplifying \nhttps://www.shadertoy.com/view/XdSyzK\ni noticed it has some bad cases when the ray is EXACTLY on the border of a hex.\nwhich seems to not happen on \nhttps://www.shadertoy.com/view/XdSyzK\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}