{
    "Shader": {
        "info": {
            "date": "1567733296",
            "description": "experimenting with an effect inspired by the oil-slick VFX in Control (an extremely good game)\n\nunfortunately the backing video has sound and I don’t know how to turn it off—if anyone knows of a trick for that it’d be much appreciated",
            "flags": 32,
            "hasliked": 0,
            "id": "tdc3Rn",
            "likes": 11,
            "name": "oils",
            "published": 3,
            "tags": [
                "fluid",
                "chromatic",
                "oil",
                "feedback"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1082
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 hash3(vec2 p) {\n\tvec3 q = vec3(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)), dot(p, vec2(419.2, 371.9)));\n\treturn fract(sin(q) * 43758.5453);\n}\n\n// extremely questionable implementation of iq’s Voronoise\nfloat voronoise(vec2 x) {\n\tvec2 cell = floor(x);\n\tvec2 cellCoordinate = fract(x);\n\t\n\tfloat accum = 0.;\n\tfloat weight = 0.;\n\tfor(int x = -2; x <= 2; x++) {\n\t\tfor(int y = -2; y <= 2; y++) {\n\t\t\tvec2 cellOffset = vec2(y, x);\n\t\t\tvec3 noiseValue = hash3(cell + cellOffset); // for Perlin noise, ditch the first two components\n\t\t\tfloat cellDistance = length(cellOffset - cellCoordinate + noiseValue.xy);\n\t\t\tfloat smoothedDistance = (1.0 - smoothstep(0., 1.414 /* sqrt(2) */, cellDistance));\n\t\t\taccum += noiseValue.z * smoothedDistance;\n\t\t\tweight += smoothedDistance;\n\t\t}\n\t}\n\treturn accum / weight;\n}\n\nfloat noise(vec2 position) {\n    return (voronoise(position + iTime * vec2(0.1,0.8)) + voronoise((position + iTime * vec2(0.07, 0.93)) * 2.3) * 0.5 + voronoise((position + iTime * vec2(-0.13,0.7)) * 4.1) * 0.25) / 1.75;\n}\n\nvec2 curl(vec2 position) {\n    const vec2 eps = vec2(0.01, 0);\n    float dx = (noise(position + eps) - noise(position - eps)) / (2. * eps.x);\n    float dy = (noise(position + eps.yx) - noise(position - eps.yx)) / (2. * eps.x);\n    return vec2(-dy, dx);\n}\n\nvec3 chromaticSample(sampler2D s, vec2 position, vec2 warp) {\n    return vec3(texture(s, position + 0.8 * warp).r, texture(s, position + warp).g, texture(s, position + 1.2 * warp).b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 onePixel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * onePixel;\n    \n    vec2 warp = curl(uv * 2.3) * 0.012;\n    \n    float newDensity = max(0., texture(iChannel0, uv + warp).a - 0.003);\n    \n    vec3 baseColor = texture(iChannel1, uv).rgb;\n    vec3 newColor = mix(baseColor, chromaticSample(iChannel0, uv, warp), pow(newDensity, 0.05));\n    \n    float centerDistance = length((uv - 0.5) * vec2(1., iResolution.y / iResolution.x));\n    newDensity = max(newDensity, smoothstep(0.005,0.0,centerDistance - (0.1 + 0.05 * sin(iTime))));\n    \n    fragColor = vec4(newColor, newDensity);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}