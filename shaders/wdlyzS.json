{
    "Shader": {
        "info": {
            "date": "1585067961",
            "description": "added a petri dish",
            "flags": 0,
            "hasliked": 0,
            "id": "wdlyzS",
            "likes": 2,
            "name": "Cellular 0.3",
            "published": 3,
            "tags": [
                "distancefield"
            ],
            "usePreview": 0,
            "username": "etch4sketch",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 st = fragCoord/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Scale\n    st *= 30.0;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    \n    \n    vec2 point = random(i_st);\n    \n          \n    float m_dist = 0.80;  // minimum distance\n   \n    //loop over neighbour for nearest\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random(i_st + neighbor);\n\n\t\t\t// Animate the point\n            point = 0.5 + 0.5*sin(iTime/1.5 + 6.99999 * point);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff);\n\n            // Keep the closer distance\n            m_dist = min(m_dist, sqrt(dist));\n        }\n    }\n    \n    //tweak lighting\n    \n    m_dist += 0.1;\n    \n    //urgh at this hard coding\n      \n    float circ = smoothstep(0.675, 0.695, 1.0 - circle(uv, aspect));\n    \n    float circ2 = smoothstep(0.69, 0.695, 1.0 - circle(uv, aspect)) - smoothstep(0.70, 0.7050, 1.0 - circle(uv, aspect));\n      \n    float circ3 = smoothstep(1.0 - 0.68,1.0 - 0.67,circle(uv, aspect));\n\n    \n    vec3 color = vec3(m_dist + 0.05,m_dist, m_dist);\n    \n    \n    color *= circ;\n    color -= 0.2 * circ2;\n    \n    color += circ3;   \n        \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 random (in vec2 _st) {\n    _st = vec2(dot(_st, vec2(12.9898,78.233)), dot(_st, vec2(13.9898,124.233)));\n    return fract(sin(_st)* 43758.5453123);\n}\n\n\n\nfloat circle(in vec2 _uv, in float _aspect){\n    float dist = length(vec2(_uv.x * _aspect, _uv.y) - vec2(0.5 * _aspect, 0.5));\n\treturn dist;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}