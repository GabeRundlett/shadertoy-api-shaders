{
    "Shader": {
        "info": {
            "date": "1619168683",
            "description": "Daily shader exercises / practice - Trying to use some other shading (phong) methods - Not sure if its a robotic arm in a crazy lab or alight bulb factory.. I <3 Truchets",
            "flags": 32,
            "hasliked": 0,
            "id": "NslXWS",
            "likes": 23,
            "name": "Truchet Path / Robot Arm",
            "published": 3,
            "tags": [
                "raymarching",
                "truchet",
                "motion",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 561
        },
        "renderpass": [
            {
                "code": "/**daily shader | 004 4/22/2021 @byt3_m3chanic*/\n#define COLOR(COORD) texture(iChannel0,(COORD))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\n\tvec2 uv = fragCoord.xy/iResolution.xy;    \n    vec3 color = COLOR(uv).rgb;\n    // effect sammple\n    vec3 fgclr = vec3(0.);\n    float f = length(uv  - 1.75);\n    fgclr.x = COLOR(uv - vec2(f*0.001,0.)).x;\n    fgclr.y = COLOR(uv + vec2(f*0.001,.001)).y;\n    fgclr.z = COLOR(uv + vec2(f*0.002,.001)).z;\n \n    // mask for effect and mixdown \n    float dt = distance(uv.xy,vec2(.5))*2.15;\n    dt = smoothstep(0.,.8,1.-dt);\n    vec3 C = mix(fgclr,color,dt);\n    // output -gamma correct\n    fragColor = vec4(pow(C, vec3(0.4545)),1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**daily shader | 004 4/22/2012 @byt3_m3chanic*/\n\n#define R   iResolution\n#define M   iMouse\n#define T   iTime\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define MAX_DIST    100.\n#define MIN_DIST    .001\n//2 to 1 hash\nfloat hash21(vec2 p){\n    return fract(sin(dot(p,vec2(27.609,57.583)))*43.5453); \n}\n// rotation\nmat2 rot(float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvoid getMouse(inout vec3 p)\n{\n    float x =-.61;\n    //M.xy==vec2(0) ? -.65:-(M.y/R.y*.5-.25)*PI;\n    float y = M.xy==vec2(0) ? 0.:-(M.x/R.x*1.-.5)*PI;\n    p.zy*=rot(x);\n    p.xz*=rot(y);\n}\n\n//http://mercury.sexy/hg_sdf/\nfloat vmax(vec3 v) \n{\n    return max(max(v.x, v.y), v.z);\n}\nfloat fBox(vec3 p, vec3 b, float r) \n{\n    vec3 d = abs(p) - b;\n    return length(max(d, vec3(0))) + vmax(min(d, vec3(0)))-r;\n}\n//@iq\nfloat sdCap( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdCyl( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nvec3 hit,hitPoint;\nfloat hitId,objId;\nfloat time=0., moveTime=0., glow=0.;\nmat2 r180,r90;\n\nconst vec2 sc = vec2(.25), hsc = .5/sc; \nconst float amt = 6.;\nconst float dbl = amt*2.;\n\nvec2 map(vec3 p, float sg)\n{\n    p.zx+=vec2(moveTime,-moveTime);\n        \n    vec2 res = vec2(1e5,0.);\n    vec3 op = p;\n    vec2 id = floor(p.xz*sc) + .5;    \n    vec2 q = p.xz - id/sc;\n    vec3 pd = vec3(q.x,op.y,q.y);\n    \n    // Flip random cells\n    float rnd = hash21(id);\n    if(rnd<.5) q.y = -q.y;\n\n    // create truchet curves\n    vec2 d2 = vec2(length(q-hsc), length(q+hsc));  \n    float crv = abs(min(d2.x,d2.y)-hsc.x);\n    float dir = mod(id.x+id.y,2.)<.5? -1. : 1.;\n\n    vec2 pp = d2.x<d2.y? vec2(q - hsc) : vec2(q + hsc);\n    pp *= rot(time*dir);\n    \n    float a = atan(pp.y, pp.x);\n    float ai = floor(dir*a/PI*amt);\n\n    a = (floor(a/PI2*dbl) + .5)/dbl;\n\n    float ws = mod(ai,amt);\n\n    vec2 qr = rot(-a*PI2)*pp; \n    qr.x -= hsc.x;\n\n    vec3 npos = vec3(qr.x, op.y, qr.y);\n    vec3 nnos = vec3(qr.x, op.y-.2, qr.y);\n\n    float swn = 1.+(.15*cos(ws+time*5. ))*dir;\n    float dwn = 1.-(1.15*cos(ws+time*5. ))*dir;\n    \n    mat2 dir1 = rot(PI2-swn*PI2);\n    mat2 dir2 = rot(PI2+swn*PI2);\n    mat2 bdir = rnd>.5 ? dir1 : dir2;\n    mat2 adir = rnd>.5 ? rot(PI-dwn*PI) : rot(PI+dwn*PI);\n    \n    if(mod(ws,2.)<1.) nnos.xz *=(rnd<.5 ^^ dir<0.)? dir1 : dir2;\n\n    nnos.xy *= bdir;\n    vec3 ngos = nnos-vec3(0,.2,0);\n    ngos.xy *= adir;\n\n    float blox = fBox(npos,vec3(.15,.05,.05),.0)-.005;\n    float cl = sdCap(npos,.2,.01);\n\n    nnos.xz=abs(nnos.xz)-.01;\n    float c2 = sdCap(nnos,.195,.005);\n    float c3 = sdCap(ngos,.1,.0075);\n    float c4 = length(npos-vec3(0,.05,0))-.035;\n      c4 = min(length(npos-vec3(0,.2,0))-.015,c4);\n      \n    vec3 fpos = ngos-vec3(0,.08,0);\n    fpos.yz*=r90;\n    if(dir>.0) fpos.xy*=r180;\n    vec3 tpos = fpos-vec3(0,-.05,0);\n    vec2 c = vec2(sin(2.55),cos(2.55));\n    fpos.z=abs(fpos.z)-.015;\n    float hand = sdTorus(fpos-vec3(0,-.05,0), c, .035, .005);\n    \n    float tube = sdCap(tpos.yzx+vec3(0,.1,0),.2,.025);\n    if(tube<res.x) {\n        res = vec2(tube,5.);\n        hit= tpos-vec3(0,-.05,0);\n        hitId=sin(abs(ws-amt))*5.;\n    }\n    if(sg==1. && ws==1.) glow += .001/(.005+tube*tube);\n    if(sg==1. && (ws==5.||ws==3.)) glow += .001/(.005+tube*tube); \n    blox = min(blox,cl);\n    blox = min(blox,c2); \n    blox = min(blox,c3);\n    blox = min(blox,c4);\n    \n    blox = min(blox,hand);\n    if(blox<res.x) {\n        res = vec2(blox,4.);\n        hit= nnos;\n    }\n\n    //truchet track\n    vec3 tp = vec3(abs(abs(crv)-.145)-.075,op.y,crv);\n    float bx = fBox(tp, vec3(.0325, .015,1.), .0015)-.0025;\n    if(bx<res.x) {\n        res = vec2(bx, 3.);\n        hit=tp;\n    }\n\n    if(dir<.0){\n        vec3 pt = vec3(q.x,pd.y,q.y);\n        if(rnd>.5) pt.x *=-1.;\n        float cyl = sdCyl(pt-vec3(1.25,0,1.25),.5,.15);\n        cyl = min(sdCyl(pt+vec3(1.25,0,1.25),.5,.10),cyl);\n        if(cyl<res.x) {\n            res = vec2(cyl,6.);\n            hit= pt;\n        }\n\n    }\n    \n    float ground = p.y+.05;\n    if(ground<res.x) {\n        res = vec2(ground,1.);\n        hit=p;\n    }   \n    \n    return res;\n}\n// normal - tetrahedron method\nvec3 normal(vec3 p, float t)\n{\n    float e = MIN_DIST*t;\n    vec2 h =vec2(1,-1)*.5773;\n    vec3 n = h.xyy * map(p+h.xyy*e, 0.).x+\n             h.yyx * map(p+h.yyx*e, 0.).x+\n             h.yxy * map(p+h.yxy*e, 0.).x+\n             h.xxx * map(p+h.xxx*e, 0.).x;\n    return normalize(n);\n}\n//good marcher\nvec2 marcher(vec3 ro, vec3 rd, int maxsteps, float sg)\n{\n\tfloat d = 0.;\n    float m = 0.;\n    for(int i=0;i<maxsteps;i++){\n    \tvec2 ray = map(ro + rd * d, sg);\n        if(ray.x<MIN_DIST*d) break;\n        d += i>100 ? ray.x*.35 : ray.x * .75;\n        m  = ray.y;\n        if(d>MAX_DIST) break;\n       \n    }\n\treturn vec2(d,m);\n}\n//diffused shadow\nfloat softshadow( vec3 ro, vec3 rd, float mint, float maxt)\n{\n    float k = 17.5;\n    float res = 1.0;\n    for( float t=mint; t < maxt; ){\n        float h = map(ro + rd*t,0.).x;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n        if( res<0.0001 || t>maxt ) break;\n    }\n    return res;\n}\n//compact phong\nvec3 phong(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 ro, vec3 lpos, vec3 n) \n{\n    vec3 l = normalize(lpos - p);\n    vec3 v = normalize(ro - p);\n    vec3 r = normalize(reflect(-l, n));\n    \n    float ln = dot(l, n);\n    float rv = dot(r, v);\n    float shadow = softshadow(p, l, 0.01, 12.0);\n    \n    if (ln < 0.0) return vec3(0.0);\n    if (rv < 0.0) return (k_d * ln) * shadow;\n \n    return (k_d * ln * shadow + k_s * pow(rv, alpha));\n}\n\nconst vec3 c = vec3(.985,.98,.99),\n           d = vec3(.25,.68,.89);\nvec3 hue(float t){ \n    return .50 + .45*cos(13.+PI2*t*(c*d)); \n}\n//materials\nvec3 getColor(vec3 p, float m)\n{\n    vec3 h = vec3(.9);\n        \n    if(m==1.)\n    {   //ground patterns\n        float s = sc.x*.5;\n        vec3 f  = fract(hitPoint*s)-.5;\n\n        float chk = (f.x*f.z);\n        float cir = length(f.xz)-.354;\n        cir=abs(abs(cir)-.03)-.005;\n        cir=smoothstep(.011,.01,cir);\n        \n        float cix = length(abs(f.xz)-vec2(.5))- .15;\n        if(chk>0.) cix=abs(cix)-.025;\n        cix=abs(cix)-.005;\n        cix=smoothstep(.011,.01,cix);\n\n        h = chk>0. ? vec3(cix) : vec3(1.-cir); \n    }\n    if(m==2.) h =vec3(.6,0,0);\n    if(m==3.) h =vec3(.05);\n    if(m==4.) h =vec3(.8,.8,.9);\n    if(m==5.) h = hue(hash21(vec2(objId,iDate.z)));\n    return h;\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    time = T*.3;\n    moveTime = time*.75;\n    r90 = rot(90. *PI/180.);\n    r180= rot(180.*PI/180.);\n    //set base vars\n    vec3 C =vec3(0);\n    vec3 FC = vec3(.1);\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    \n    //cheap camera rig\n    vec3 ro = vec3(0,0,3.55);\n    vec3 rd = normalize(vec3(uv,-1));\n    //to pan and turn\n    getMouse(ro);\n    getMouse(rd);\n    \n    // ray marcher\n    vec2 ray = marcher(ro,rd,192,1.);\n    float d = ray.x;\n    float m = ray.y;\n    vec3 h;\n    // save hitpoint  \n    hitPoint=hit;\n    objId=hitId;\n    \n    if(d<MAX_DIST)\n    {\n        vec3 p = ro+rd*d;\n        vec3 n = normal(p,d);\n        vec3 lpos = vec3(5,5,-6);\n        // shade\n        float shininess = 15.0;\n        vec3 phng =  phong(vec3(0.3), vec3(1.0), shininess, p, ro,lpos, n) * 2.;\n       \n        // coloring\n        h = getColor(hitPoint,m);\n        C += phng * h;\n    } else {\n        C = FC;\n    }\n\n    // standard fog based on distance\n    float glowMask = clamp(glow,.0,1.);\n    C = mix( C, vec3(.85,.27,.37)*(glow*.6)+C,glowMask); \n    C = mix( C, FC, 1.-exp(-.00095*d*d*d)); \n\n    O = vec4(C,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}