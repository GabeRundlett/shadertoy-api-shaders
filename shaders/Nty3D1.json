{
    "Shader": {
        "info": {
            "date": "1637591707",
            "description": "move iMouse.xy to scroll through a database of 141 small costas arrays of lengths [7,11,13,17,19,23,29,31] ==pattern-free-sequences\nimouse.y=size (primes only)\niMouse.x=seed (nth costas attay of size)\ndarker area is just repeating the brighter area",
            "flags": 0,
            "hasliked": 0,
            "id": "Nty3D1",
            "likes": 4,
            "name": "DBcostas1= 141 Costas Arrays",
            "published": 3,
            "tags": [
                "dither",
                "primes",
                "costas",
                "costasarray",
                "patternfree"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "#define speed 15.\n\nvoid mainImage(out vec4 O, vec2 u\n){\n ;int l=int(8.*iMouse.y/iResolution.y)\n ;int seed=int(float(getSeedNums(l))*iMouse.x/iResolution.x)\n ;int period=getPeriod(l)\n ;float fleriod=float(period+1)\n ;if(true//u.x+iResolution.y*.1<iResolution.y\n ){\n  ;u.x*=2.\n  ;u=floor(u*(fleriod-1.)/iResolution.xy)\n  ;float c=costas(u.x,u.y,period,seed)\n  ;if(c==0.&&int(u.x)<period)c=.3\n  ;O=vec4(c,c,c,1.0)\n ;}else O=vec4(.5,0,1,1)//purple border\n ;}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//parent: https://www.shadertoy.com/view/tdjfzR\n/*\ncostas array is pattern free\nIn theory ideal for dithering\nThe greyscaling gradient is BASIC, and can easily be more distorted\n,by adding any ;u.x+=u.y*b; b!=0 offset\n*/\n\n\n//above is for costas3() (small arrays, manually calculated with mod)\n//but this dies not cover all knoen costas arrays of their size.\n//below is for small prime costas arrays, and it is known that these are all of them:\n\nint rema(int v,int d//return longDivisionRemainder of max(v,0)/abs(d)\n){//d=abs(d)           //because mod(v,d) is ambiguous for negative inputs. (d is always >0 in this shader)\n ;if(v<0)return 0    //v=max(v,0) because mod() is ambiguous for negative inputs.\n ;if(v>d-1)return v%d //slowest part, we want this case to be rare. (ensures that v>d-1)\n ;return v;}\n\nint costas7(int p,int s){p=rema(p,7);s=rema(s,31);switch(s){\ncase  0:{int[7] a=int[7](1,2,6,4,7,3,5);return a[p];}break;\ncase  1:{int[7] a=int[7](1,2,6,4,7,3,5);return a[p];}break;\ncase  2:{int[7] a=int[7](1,2,7,4,6,5,3);return a[p];}break;\ncase  3:{int[7] a=int[7](1,2,7,5,4,6,3);return a[p];}break;\ncase  4:{int[7] a=int[7](1,3,6,2,7,4,5);return a[p];}break;\ncase  5:{int[7] a=int[7](1,3,6,2,7,5,4);return a[p];}break;\ncase  6:{int[7] a=int[7](1,3,7,6,4,5,2);return a[p];}break;\ncase  7:{int[7] a=int[7](1,4,5,3,7,6,2);return a[p];}break;\ncase  8:{int[7] a=int[7](1,4,5,7,2,6,3);return a[p];}break;\ncase  9:{int[7] a=int[7](1,4,6,5,3,7,2);return a[p];}break;\ncase 10:{int[7] a=int[7](1,5,3,6,7,2,4);return a[p];}break;\ncase 11:{int[7] a=int[7](1,5,7,6,3,4,2);return a[p];}break;\ncase 12:{int[7] a=int[7](1,6,5,7,3,4,2);return a[p];}break;\ncase 13:{int[7] a=int[7](1,7,3,4,6,5,2);return a[p];}break;\ncase 14:{int[7] a=int[7](2,1,5,7,3,6,4);return a[p];}break;\ncase 15:{int[7] a=int[7](2,1,6,4,7,3,5);return a[p];}break;\ncase 16:{int[7] a=int[7](2,3,5,1,7,6,4);return a[p];}break;\ncase 17:{int[7] a=int[7](2,4,3,6,7,1,5);return a[p];}break;\ncase 18:{int[7] a=int[7](2,4,5,1,7,6,3);return a[p];}break;\ncase 19:{int[7] a=int[7](2,4,7,3,1,6,5);return a[p];}break;\ncase 20:{int[7] a=int[7](2,5,1,6,7,4,3);return a[p];}break;\ncase 21:{int[7] a=int[7](2,5,1,7,6,3,4);return a[p];}break;\ncase 22:{int[7] a=int[7](2,5,6,1,3,7,4);return a[p];}break;\ncase 23:{int[7] a=int[7](2,5,6,4,1,7,3);return a[p];}break;\ncase 24:{int[7] a=int[7](2,5,7,1,6,3,4);return a[p];}break;\ncase 25:{int[7] a=int[7](2,5,7,1,6,4,3);return a[p];}break;\ncase 26:{int[7] a=int[7](2,6,1,3,4,7,5);return a[p];}break;\ncase 27:{int[7] a=int[7](2,6,7,1,4,3,5);return a[p];}break;\ncase 28:{int[7] a=int[7](3,2,5,7,1,6,4);return a[p];}break;\ncase 29:{int[7] a=int[7](3,4,1,7,6,2,5);return a[p];}break;\ncase 30:{int[7] a=int[7](3,6,1,7,5,2,4);return a[p];}break;}return 0;}\nint costas11(int p,int s){p=rema(p,11);s=rema(s,32);switch(s){\ncase  0:{int[11] a=int[11](1,3,7,2,5,11,10,8,4,9,6);return a[p];}break;\ncase  1:{int[11] a=int[11](1,4,3,9,7,8,10,5,2,6,11);return a[p];}break;\ncase  2:{int[11] a=int[11](1,4,11,6,5,3,9,2,7,8,10);return a[p];}break;\ncase  3:{int[11] a=int[11](1,5,4,7,9,3,10,11,8,6,2);return a[p];}break;\ncase  4:{int[11] a=int[11](1,5,6,9,4,11,10,8,2,7,3);return a[p];}break;\ncase  5:{int[11] a=int[11](1,5,6,11,4,10,8,7,2,9,3);return a[p];}break;\ncase  6:{int[11] a=int[11](1,5,7,10,9,2,8,6,3,4,11);return a[p];}break;\ncase  7:{int[11] a=int[11](1,6,4,10,3,2,11,7,8,5,9);return a[p];}break;\ncase  8:{int[11] a=int[11](1,6,8,9,4,10,3,7,5,2,11);return a[p];}break;\ncase  9:{int[11] a=int[11](1,7,5,8,10,4,9,6,2,3,11);return a[p];}break;\ncase 10:{int[11] a=int[11](1,7,6,9,5,3,8,10,4,11,2);return a[p];}break;\ncase 11:{int[11] a=int[11](1,7,8,5,9,11,4,3,6,2,10);return a[p];}break;\ncase 12:{int[11] a=int[11](1,7,8,10,3,11,5,4,2,9,6);return a[p];}break;\ncase 13:{int[11] a=int[11](1,7,8,10,6,11,5,3,2,9,4);return a[p];}break;\ncase 14:{int[11] a=int[11](1,7,11,6,8,4,2,5,10,9,3);return a[p];}break;\ncase 15:{int[11] a=int[11](1,8,7,10,6,4,9,11,5,2,3);return a[p];}break;\ncase 16:{int[11] a=int[11](1,8,10,11,6,9,5,3,2,7,4);return a[p];}break;\ncase 17:{int[11] a=int[11](1,9,6,11,10,8,4,7,2,3,5);return a[p];}break;\ncase 18:{int[11] a=int[11](1,9,10,7,5,11,4,3,6,8,2);return a[p];}break;\ncase 19:{int[11] a=int[11](1,10,4,3,8,11,9,5,7,2,6);return a[p];}break;\ncase 20:{int[11] a=int[11](2,4,11,7,5,6,9,1,10,3,8);return a[p];}break;\ncase 21:{int[11] a=int[11](2,5,9,6,1,11,7,8,10,4,3);return a[p];}break;\ncase 22:{int[11] a=int[11](2,6,5,8,10,4,11,1,9,7,3);return a[p];}break;\ncase 23:{int[11] a=int[11](2,7,9,3,10,11,8,6,1,5,4);return a[p];}break;\ncase 24:{int[11] a=int[11](2,9,8,10,6,1,11,4,5,3,7);return a[p];}break;\ncase 25:{int[11] a=int[11](3,2,5,9,6,1,11,7,8,10,4);return a[p];}break;\ncase 26:{int[11] a=int[11](3,4,1,9,8,11,7,5,10,2,6);return a[p];}break;\ncase 27:{int[11] a=int[11](3,6,5,1,10,11,8,2,4,9,7);return a[p];}break;\ncase 28:{int[11] a=int[11](3,7,2,8,10,1,4,11,9,6,5);return a[p];}break;\ncase 29:{int[11] a=int[11](3,7,2,11,8,9,5,10,1,4,6);return a[p];}break;\ncase 30:{int[11] a=int[11](3,10,1,9,6,5,7,11,4,2,8);return a[p];}break;\ncase 31:{int[11] a=int[11](4,6,7,10,1,5,2,11,9,3,8);return a[p];}break;}return 0;}\nint costas13(int p,int s){p=rema(p,13);s=rema(s,14);switch(s){\ncase  0:{int[13] a=int[13](1,2,9,6,11,7,5,4,10,13,8,12,3);return a[p];}break;\ncase  1:{int[13] a=int[13](1,4,8,13,3,10,9,11,7,2,12,5,6);return a[p];}break;\ncase  2:{int[13] a=int[13](1,5,12,9,7,8,4,10,2,13,3,6,11);return a[p];}break;\ncase  3:{int[13] a=int[13](1,8,5,10,6,4,3,9,12,7,11,13,2);return a[p];}break;\ncase  4:{int[13] a=int[13](1,8,9,12,10,5,13,7,11,4,6,3,2);return a[p];}break;\ncase  5:{int[13] a=int[13](1,8,11,6,10,12,13,7,4,9,5,3,2);return a[p];}break;\ncase  6:{int[13] a=int[13](1,10,3,9,6,5,7,12,4,2,13,8,11);return a[p];}break;\ncase  7:{int[13] a=int[13](1,12,5,6,4,8,13,3,10,9,11,7,2);return a[p];}break;\ncase  8:{int[13] a=int[13](2,1,8,9,12,10,5,13,7,11,4,6,3);return a[p];}break;\ncase  9:{int[13] a=int[13](2,5,12,11,13,9,4,1,7,8,6,10,3);return a[p];}break;\ncase 10:{int[13] a=int[13](2,9,6,11,7,5,4,10,13,8,12,1,3);return a[p];}break;\ncase 11:{int[13] a=int[13](2,11,10,12,8,3,13,6,7,5,9,1,4);return a[p];}break;\ncase 12:{int[13] a=int[13](2,12,10,11,4,1,9,5,7,6,13,3,8);return a[p];}break;\ncase 13:{int[13] a=int[13](3,11,6,4,7,8,13,2,1,10,12,5,9);return a[p];}break;;}return 0;}\nint costas17(int p,int s){p=rema(p,17);s=rema(s,24);switch(s){\ncase  0:{int[17] a=int[17](1,3,7,15,12,6,13,8,17,16,14,10,2,5,11,4,9);return a[p];}break;\ncase  1:{int[17] a=int[17](1,5,11,9,4,17,7,16,13,14,8,10,15,2,12,3,6);return a[p];}break;\ncase  2:{int[17] a=int[17](1,7,15,11,8,10,2,5,17,6,4,13,12,16,3,14,9);return a[p];}break;\ncase  3:{int[17] a=int[17](1,10,11,14,6,16,12,17,15,9,8,5,13,3,7,2,4);return a[p];}break;\ncase  4:{int[17] a=int[17](1,10,12,9,14,5,11,15,16,8,7,3,13,6,17,4,2);return a[p];}break;\ncase  5:{int[17] a=int[17](1,10,13,17,11,3,15,14,7,9,6,2,8,16,4,5,12);return a[p];}break;\ncase  6:{int[17] a=int[17](1,11,15,7,12,13,16,6,3,5,14,10,8,2,9,4,17);return a[p];}break;\ncase  7:{int[17] a=int[17](1,12,14,15,6,16,11,4,7,3,9,13,2,10,8,5,17);return a[p];}break;\ncase  8:{int[17] a=int[17](2,1,15,7,5,11,4,16,13,17,6,14,9,12,3,8,10);return a[p];}break;\ncase  9:{int[17] a=int[17](2,6,3,13,14,1,9,5,11,4,7,16,10,8,15,17,12);return a[p];}break;\ncase 10:{int[17] a=int[17](2,8,7,4,14,6,1,5,17,15,9,10,13,3,11,16,12);return a[p];}break;\ncase 11:{int[17] a=int[17](2,11,8,6,16,17,12,3,14,10,13,15,5,4,9,1,7);return a[p];}break;\ncase 12:{int[17] a=int[17](2,12,8,13,11,5,4,1,9,16,3,15,17,6,7,10,14);return a[p];}break;\ncase 13:{int[17] a=int[17](2,13,3,16,11,9,15,14,17,8,1,5,10,12,6,7,4);return a[p];}break;\ncase 14:{int[17] a=int[17](2,13,4,16,17,10,8,5,9,15,7,12,11,1,3,6,14);return a[p];}break;\ncase 15:{int[17] a=int[17](2,15,13,10,14,3,12,17,16,6,8,11,7,1,9,4,5);return a[p];}break;\ncase 16:{int[17] a=int[17](2,16,15,6,9,10,12,7,17,14,8,13,1,5,3,11,4);return a[p];}break;\ncase 17:{int[17] a=int[17](3,7,13,11,6,2,9,1,15,16,10,12,17,4,14,5,8);return a[p];}break;\ncase 18:{int[17] a=int[17](3,12,6,2,17,9,10,14,4,11,16,13,15,1,7,5,8);return a[p];}break;\ncase 19:{int[17] a=int[17](3,12,9,7,17,1,13,4,15,11,14,16,6,5,10,2,8);return a[p];}break;\ncase 20:{int[17] a=int[17](4,3,7,10,17,8,6,14,1,15,16,12,9,2,11,13,5);return a[p];}break;\ncase 21:{int[17] a=int[17](4,5,15,17,7,13,12,3,16,2,14,9,1,6,10,8,11);return a[p];}break;\ncase 22:{int[17] a=int[17](4,12,15,17,10,11,9,1,13,8,5,14,2,16,3,7,6);return a[p];}break;\ncase 23:{int[17] a=int[17](6,13,3,4,14,8,17,2,1,7,9,5,16,11,15,12,10);return a[p];}break;;}return 0;}\nint costas19(int p,int s){p=rema(p,19);s=rema(s,2);switch(s){\ncase 0:{int[19] a=int[19](1,12,16,18,19,10,15,8,14,17,9,5,3,2,11,6,13,7,4);return a[p];}break;\ncase 1:{int[19] a=int[19](1,13,12,18,11,15,17,7,10,5,14,19,16,8,6,2,9,3,4);return a[p];}break;}return 0;}\n\nint costas23(int p,int s){p=rema(p,23);s=rema(s,14);switch(s){\ncase  0:{int[23] a=int[23](1,3,2,14,8,11,21,16,7,23,15,19,17,18,6,12,9,22,4,13,20,5,10);return a[p];}break;\ncase  1:{int[23] a=int[23](1,10,18,7,21,12,14,13,8,11,4,20,16,6,23,17,5,9,15,22,19,2,3);return a[p];}break;\ncase  2:{int[23] a=int[23](1,11,22,21,13,18,15,10,16,6,19,5,12,14,17,4,2,20,8,9,3,7,23);return a[p];}break;\ncase  3:{int[23] a=int[23](1,14,12,20,10,13,18,17,8,4,11,5,16,22,15,19,6,7,2,21,9,23,3);return a[p];}break;\ncase  4:{int[23] a=int[23](1,15,10,4,5,12,21,23,11,3,9,6,14,13,2,19,22,18,16,20,7,17,8);return a[p];}break;\ncase  5:{int[23] a=int[23](1,16,13,11,17,8,19,22,12,7,21,15,20,5,9,18,14,2,10,3,4,6,23);return a[p];}break;\ncase  6:{int[23] a=int[23](1,17,15,23,13,16,21,20,11,7,14,8,19,3,18,22,9,10,5,2,12,4,6);return a[p];}break;\ncase  7:{int[23] a=int[23](2,8,6,11,12,3,10,18,15,5,16,4,7,21,14,23,22,17,19,13,9,1,20);return a[p];}break;\ncase  8:{int[23] a=int[23](2,9,14,4,10,12,16,17,1,21,8,18,7,19,22,13,11,6,3,20,5,23,15);return a[p];}break;\ncase  9:{int[23] a=int[23](2,19,20,17,3,22,11,21,14,12,18,23,8,7,10,1,5,16,6,13,15,9,4);return a[p];}break;\ncase 10:{int[23] a=int[23](2,21,14,4,10,12,16,5,13,9,8,18,19,7,22,1,23,6,15,20,17,11,3);return a[p];}break;\ncase 11:{int[23] a=int[23](3,19,1,4,15,6,7,17,14,23,11,18,16,9,5,13,8,12,2,20,22,21,10);return a[p];}break;\ncase 12:{int[23] a=int[23](5,3,2,20,1,12,9,19,7,15,21,6,22,17,10,23,14,18,8,4,11,13,16);return a[p];}break;\ncase 13:{int[23] a=int[23](8,5,19,20,16,18,22,7,2,1,14,6,21,15,23,11,9,12,17,4,10,3,13);return a[p];}break;;}return 0;}\nint costas29(int p,int s){p=rema(p,29);s=rema(s,23);switch(s){\ncase  0:{int[29] a=int[29](1,6,3,28,13,9,7,14,26,25,27,10,19,5,15,18,29,4,22,12,20,2,24,17,21,16,8,23,11);return a[p];}break;\ncase  1:{int[29] a=int[29](1,10,3,22,21,23,7,28,14,17,12,9,16,24,15,20,26,11,29,8,4,27,25,5,19,13,2,6,18);return a[p];}break;\ncase  2:{int[29] a=int[29](1,11,3,25,23,4,7,21,20,22,16,29,9,6,15,5,12,17,10,26,14,18,2,8,28,24,19,27,13);return a[p];}break;\ncase  3:{int[29] a=int[29](1,12,29,3,25,14,26,19,28,27,18,24,7,4,6,11,21,15,16,2,10,8,22,17,5,20,23,13,9);return a[p];}break;\ncase  4:{int[29] a=int[29](1,17,22,13,19,23,24,27,11,8,25,15,28,7,18,6,26,12,21,3,5,20,16,14,9,2,10,4,29);return a[p];}break;\ncase  5:{int[29] a=int[29](1,20,14,16,25,22,23,13,26,12,7,28,21,4,29,11,17,15,6,9,8,18,5,19,24,3,10,27,2);return a[p];}break;\ncase  6:{int[29] a=int[29](1,22,21,17,20,28,16,10,19,12,27,25,15,4,9,23,18,29,11,13,26,5,24,2,14,6,3,7,8);return a[p];}break;\ncase  7:{int[29] a=int[29](1,25,22,23,13,26,12,7,28,21,4,29,11,17,15,6,9,8,18,5,19,24,3,10,27,2,20,14,16);return a[p];}break;\ncase  8:{int[29] a=int[29](2,1,8,12,25,15,18,3,13,22,17,4,9,28,6,29,11,7,21,27,19,10,26,24,5,23,20,14,16);return a[p];}break;\ncase  9:{int[29] a=int[29](2,8,26,18,25,15,16,19,28,24,12,7,23,9,29,27,21,3,11,4,14,13,10,1,5,17,22,6,20);return a[p];}break;\ncase 10:{int[29] a=int[29](2,23,1,7,5,19,29,24,20,9,3,15,22,10,12,21,14,18,17,4,26,11,27,28,25,8,13,16,6);return a[p];}break;\ncase 11:{int[29] a=int[29](2,28,10,1,25,18,22,20,23,9,27,29,7,13,12,26,3,8,19,14,11,21,6,15,5,24,16,17,4);return a[p];}break;\ncase 12:{int[29] a=int[29](3,9,20,17,25,12,27,13,7,16,28,1,24,29,18,6,8,22,26,21,19,2,23,15,5,4,14,10,11);return a[p];}break;\ncase 13:{int[29] a=int[29](3,11,1,10,25,19,14,16,20,4,2,15,27,7,12,8,29,18,6,9,26,23,22,28,5,21,13,24,17);return a[p];}break;\ncase 14:{int[29] a=int[29](3,21,23,22,8,15,26,6,16,11,28,5,2,18,10,14,12,13,27,20,9,29,19,24,7,1,4,17,25);return a[p];}break;\ncase 15:{int[29] a=int[29](4,12,25,28,22,5,10,29,20,9,2,16,17,15,19,11,27,24,1,18,13,23,3,14,21,7,6,8,26);return a[p];}break;\ncase 16:{int[29] a=int[29](4,26,20,17,5,6,14,10,1,3,9,13,29,11,24,22,21,16,23,28,7,27,12,15,25,18,2,19,8);return a[p];}break;\ncase 17:{int[29] a=int[29](6,19,12,20,25,22,18,8,26,17,1,29,28,9,24,13,14,16,2,11,23,3,7,10,5,27,4,21,15);return a[p];}break;\ncase 18:{int[29] a=int[29](6,26,23,28,5,8,27,1,16,14,7,18,4,21,12,20,2,15,3,9,10,24,19,29,25,17,11,13,22);return a[p];}break;\ncase 19:{int[29] a=int[29](7,13,2,17,5,27,28,21,8,6,20,15,19,22,1,24,18,29,14,26,4,3,10,23,25,11,16,12,9);return a[p];}break;\ncase 20:{int[29] a=int[29](7,20,28,8,25,15,1,4,23,27,22,14,16,12,6,13,18,17,26,2,29,11,9,24,5,19,10,3,21);return a[p];}break;\ncase 21:{int[29] a=int[29](8,22,10,19,25,12,28,20,17,21,3,11,13,7,18,14,27,2,1,26,29,9,24,15,5,6,4,23,16);return a[p];}break;\ncase 22:{int[29] a=int[29](10,27,28,8,5,3,12,18,22,4,23,15,20,13,29,19,2,1,21,24,26,17,11,7,25,6,14,9,16);return a[p];}break;;}return 0;}\n//costas31 is almost useless, because opengl fails at a%31, and because \n//only 1 costas array of length 31 exists\nint costas31(int p,int s){p=rema(p,29);\n;int[29] a=int[29](10,27,28,8,5,3,12,18,22,4,23,15,20,13,29,19,2,1,21,24,26,17,11,7,25,6,14,9,16);return a[p];}\n\nint getPeriod(int l){\n ;l=rema(l,8)\n ;int[8] a=int[8](7,11,13,17,19,23,29,31);//small primes\n ;return a[l];}\n//there are 31 costas arrays of length 7\n//there are 32 costas arrays of length 11\n//there are 14 costas arrays of length 13\n//there are 24 costas arrays of length 17\n//there are  2 costas arrays of length 19\n//there are 18 costas arrays of length 23\n//there are 23 costas arrays of length 29\n//there are  1 costas arrays of length 31\nint getSeedNums(int l){\n ;l=rema(l,8)\n ;int[8] a=int[8](31,32,14,24,2,18,23,1);//small primes\n ;return a[l];}\n\n//return value at position p of static costas array number s of length l\n//p=Position(0..l-1),s=Seed, Length[short..long]\nint costasP(int p,int s,int l\n){switch(l\n ){case 7:return costas7 (p,s);break;//works\n  case 11:return costas11(p,s);break;//works\n  case 13:return costas13(p,s);break;//works\n  case 17:return costas17(p,s);break;//fails\n  case 19:return costas19(p,s);break;//\n  case 23:return costas23(p,s);break;//\n  case 29:return costas29(p,s);break;//\n  case 31:return costas31(p,s);break;}//works\n  //return 0;//should never happen\n ;}\n\n \nfloat costas(float x,float y,int l,int seed\n){\n ;int a=costasP(int(x),seed,l)\n ;if (a==int(y)+1)return 1.;return 0.;\n ;}\n \n /*\n #define speed 15.\n\nvoid mainImage(out vec4 O, vec2 u\n){\n ;int l=int(8.*iMouse.y/iResolution.y)\n ;int seed=int(float(getSeedNums(l))*iMouse.x/iResolution.x)\n ;int period=getPeriod(l)\n ;float fleriod=float(period+1)\n ;if(true//u.x+iResolution.y*.1<iResolution.y\n ){\n  ;u.x*=2.\n  ;u=floor(u*(fleriod-1.)/iResolution.xy)\n  ;float c=costas(u.x,u.y,period,seed)\n  ;if(c==0.&&int(u.x)<period)c=.3\n  ;O=vec4(c,c,c,1.0)\n ;}else O=vec4(.5,0,1,1)//purple border\n ;}\n */",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}