{
    "Shader": {
        "info": {
            "date": "1618604890",
            "description": "Beautiful random noise caused by mutations in growing cells.\n\nclick+drag: punch holes",
            "flags": 48,
            "hasliked": 0,
            "id": "wsdXDM",
            "likes": 17,
            "name": "Random Population",
            "published": 3,
            "tags": [
                "mouse",
                "random",
                "cellular",
                "automaton"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if (iMouse.z >= .0)\n    \tif (length(fragCoord - abs(iMouse.zw)) < length(iMouse.xy - abs(iMouse.zw)))\n    \t\tfragColor = mix(fragColor, vec4(.3), .5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nvoid test(inout vec4 id, ivec2 x)\n{\n    if (x == ivec2(0))\n        return;\n    if (id.w != 0.)\n        return;\n    vec4 next = texelFetch(iChannel0, x, 0);\n    if (next.w == 0.)\n        return;\n    vec3 pos = vec3(x,iTime);\n    vec4 blob = hash43(pos);\n    if (blob.w > 3e-1)\n        return;\n    vec3 delta = .1 * (blob.xyz - .5);\n    id = vec4(clamp(next.xyz + delta, vec3(0), vec3(1)), 1.);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame == 0 || texelFetch(iChannel1, ivec2(82, 1), 0).x>0.)\n    {\n        ivec2 xy = ivec2(fragCoord.xy) - ivec2(iResolution.xy/2.);\n        fragColor = vec4(0);\n        if (xy == ivec2(0,0))\n            fragColor = vec4(.5, .5, .5, 1);\n        return;\n    }\n    ivec2 x = ivec2(fragCoord);\n    if (x == ivec2(0))\n    {\n        fragColor = iMouse;\n        return;\n    }\n    vec4 id = texelFetch(iChannel0, x, 0);\n    test(id, x+ivec2(0, 1));\n    test(id, x+ivec2(1, 0));\n    test(id, x-ivec2(0, 1));\n    test(id, x-ivec2(1, 0));\n    fragColor = id;\n    vec4 lastMouse = texelFetch(iChannel0, ivec2(0), 0);\n    if (lastMouse.z >= .0 && iMouse.z < .0)\n        if (length(fragCoord - abs(lastMouse.zw)) < length(lastMouse.xy - abs(lastMouse.zw)))\n            fragColor = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}