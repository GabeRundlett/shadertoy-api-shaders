{
    "Shader": {
        "info": {
            "date": "1573515701",
            "description": "made during a twitch livestream: https://www.twitch.tv/videos/504141187",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyXRW",
            "likes": 3,
            "name": "Twitch: Santa Lives in Hell",
            "published": 3,
            "tags": [
                "twitch",
                "pentagram",
                "liveshader"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 409
        },
        "renderpass": [
            {
                "code": "float linedist(vec2 p, vec2 a, vec2 b) {\n  float k = dot(p-a, b-a)/dot(b-a,b-a);\n  return distance(p, mix(a,b,clamp(k,0.,1.)));\n}\n\nvec2 rot(float ang) {\n  return vec2(sin(ang), cos(ang));\n}\n\nfloat scene(vec3 p ) {\n  float scale = 8.;\n  vec3 id = floor(p/scale);\n  p = (fract(p/scale)-0.5)*scale;\n  float rott = iTime + length(id);\n  p *= mat3(cos(rott), -sin(rott),0,sin(rott),cos(rott),0,0,0,1);\n  p.z += sin(id.x)*2.;\n  float dist = 10000.;\n  for (int i =0; i < 5; i ++) {\n    float ang = 2.*3.1415/5. * float(i);\n    float off = 3.1415/5.*4.;\n    float s = 2.;\n    vec2 a = rot(ang)*s;\n    vec2 b = rot(ang+off)*s;\n    dist = min(linedist(p.yz, a, b), dist);\n  }\n  dist = linedist(vec2(dist, p.x), vec2(0,-0.2), vec2(0,0.2));\n  return dist-0.1;//linedist(p, vec3(0,0,1), vec3(0,0,-1))-0.1;\n}\n\nfloat light(vec3 p, vec3 l) {\n  return pow(max(0.,scene(p) - scene(p+l*0.01))/0.01,2.);\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 p) {\n  int x = FK(p.x); int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)-y)/2.14e9;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 cam = normalize(vec3(1, uv));\n  vec3 init = vec3(-50.-iTime*4., acos(cos(iTime*0.7))*4.,asin(sin(iTime))*4.);\n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i < 90; i++ ) {\n    float dist = scene(p);\n    if (abs(dist) < 0.001) {\n      hit = true;\n      break;\n    }\n    if (distance(p, init) > 40.) break;\n    p += cam*dist*0.5;\n  }\n  vec3 id = floor(p/8.);\n  float crash = hash(vec2(hash(id.xy), hash(id.yz)));\n  vec3 col = vec3(0.9,0.95,1);\n  if (crash < 0.1) {\n    col = vec3(0.6,0,0);\n    \n    if (crash < -0.5) {\n    col = vec3(0.0,0.3,0);\n    }\n  }\n  fragColor.xyz = (hit ? col*max(light(p, vec3(1,0,0)),0.02) : vec3(0.02)) + hash(uv*(iTime+0.1))*0.05;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}