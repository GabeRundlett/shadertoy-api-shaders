{
    "Shader": {
        "info": {
            "date": "1624780144",
            "description": "AU SAUMON, MON PRÉFÉRÉ ! \nAs usual, slightly different looking compare to Bonzo version.  Couldn't integrate Blackle technique for better repetition sdf.\nAnyway was a great evening thanks everybody ! ",
            "flags": 64,
            "hasliked": 0,
            "id": "st23DK",
            "likes": 15,
            "name": "[Livecode RP Jam] Apericube",
            "published": 3,
            "tags": [
                "cube",
                "jam",
                "livecode"
            ],
            "usePreview": 1,
            "username": "totetmatt",
            "viewed": 498
        },
        "renderpass": [
            {
                "code": "/*\n  /!\\ SOUND REACTIVE                             /!\\\n  /!\\ IF MUSIC DOESNT START, JUST PAUSE AND PLAY /!\\\n  \n  Concept heavily inspired by Shader from Anat @ Cookie Demoparty 2019  \n  https://livecode.demozoo.org/performers/3848.html\n  \n\n  Also massive influence from United Force & Digital Dynamite / Rainbow Clash. \n  Thanks folks ! Golden Path makes me arrive here today :D  \n  \n  \n*/\n#define fGlobalTime iTime\n\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat box(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    \n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nfloat diam(vec3 p,float s){\n   p = abs(p);\n   return (p.x+p.y+p.z-s)*0.57735027;\n}\n//http://glslsandbox.com/e#48230.4\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(233.34, 851.74));\n    p += dot(p, p + 23.45);\n    return fract(p.x * p.y);\n}\n//http://mercury.sexy/hg_sdf/\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\nvec2 iid ;\n\nvec2 sdf(vec3 p){\n  vec3 pppp=p;\n  vec3 ppp = p;\n  \np.z +=mod(fGlobalTime ,10000.);\n  vec2 h;\n  p.xy*=rot(p.z*.01);\n  p.y = -abs(p.y);\n  p.x +=fGlobalTime*10.;\n  p.y +=5.;\n  vec3 pp = p;\n  vec2 id = pMod2(pp.xz,vec2(3.));\n  iid = id;\n  float tt = texture(iChannel1,fract(vec2((abs(id.y)/10.+abs(id.x)/3.)*.5))*.8).r*1.;\n  tt =sqrt(tt);\n  float dd = hash21(id);\n  h.x = box(pp,vec3(1.,1.+sqrt(dd)*2.,1.));\n  h.y = 1.-tt;\n  \n  vec2 t;\n  t.x = dot(p,vec3(0.,1.,0.));\n  t.y = 2.;\n  h = t.x < h.x ? t:h;\n  \n  t.x = diam(pp+vec3(.0,-2.,.0),.5+dd);\n  t.y = 2.;\n  h = t.x < h.x ? t:h;\n  \n    float scale = 2.-texture(iChannel1,vec2(.33)).r*1.;\n   pppp*=scale;\n   pppp.xz *=rot(fGlobalTime);\n     pppp.xy *=rot(fGlobalTime);\n   t.x = (1./scale)*mix(box(pppp,vec3(.5)) ,diam(pppp,1.) ,1.5);\n   t.y = 3.;\n   h = t.x < h.x ? t:h;\n  \n  return h;\n }\n#define q(s) s*sdf(p+s).x\n vec2 nv=vec2(-.01,.01);\n vec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.3,.7)));}\n\nbool inside=false;\nfloat IOR =1.45;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    \tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n \n  vec3 ro=vec3(0.,0.,-5.);\n\n  vec3 rt = vec3(sin(fGlobalTime)*2.,0.,(cos(fGlobalTime)*.5+.5)*2.);\n  vec3 z = normalize(rt-ro);\n  vec3 x = cross(z,vec3(0.,-1.,0.));\n  vec3 y = cross(z,x);\n  vec3 rd=normalize(mat3(x,y,z)*vec3(uv,1.));\n   \n  //rd=normalize(vec3(uv,1.));\n  //rd = \n  vec3 rp=ro;\n  vec3 light= vec3(1.,2.,-3.);\t\n\n\tvec3 col = vec3(.0);\n  float i=0.;\n  vec3 acc = vec3(0.);\n  for(i=0.;i<=100.;i++){\n      vec2 d = sdf(rp);\n      rp += rd*d.x;\n    \n    if(d.y <= .19){\n          \n           acc += pal(d.y*33.5)*exp(.05*-abs(d.x))/40.;\n       d.x = max(.001,abs(d.x));\n    }\n      if(d.x <=0.001){\n          vec3 n = norm(rp);\n          if(d.y <= 1.){\n       \n            col = vec3(.001)*max(0.,dot(light-rp,n));\n            \n          break;\n          } else if(d.y ==2.){\n              //rd = reflect(rd,n+texture(texNoise,texture(iChannel1,vec2(.3)).r*0+rp.xz*.1).r);\n              rd = reflect(rd,n+texture(iChannel1,vec2(.3)).r*2.);\n              rp+=rd*.01;\n          }else if (d.y==4.)\n          {\n            \n              col = vec3(1.)*max(0.,dot(normalize(light-rp),n));\n            \n          } else if (d.y == 3.){\n             col +=vec3(.1,.2,.1)/3.;\n              if(!inside){\n               \n                rd = refract(rd,n,1./IOR);\n                rp-=0.005*n;\n                inside = true;\n            } else {\n                n = -n;\n                vec3 _rd = refract(rd,n,IOR);\n                if(dot(_rd,_rd)==0.){\n                    rd = reflect(rd,n);\n                    rp+=0.002*n;\n                    \n                } else {\n                 \n                    rd = _rd;\n                    rp -= 0.005*n;\n                    inside=false;\n                  \n                }\n            }\n          }\n      }\n  }\n  col +=acc*1.5;\n\n\t//col*=1.5;\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(.75)),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 27691,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/subsquaremusic/subsquare-broken-lug00ber"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}