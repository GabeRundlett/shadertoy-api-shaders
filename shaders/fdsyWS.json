{
    "Shader": {
        "info": {
            "date": "1642620921",
            "description": "Even flying cars have to find parking spots.",
            "flags": 8,
            "hasliked": 0,
            "id": "fdsyWS",
            "likes": 21,
            "name": "Flying Car Blues",
            "published": 3,
            "tags": [
                "music",
                "blues"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define rez iResolution\n//taxicab trig\n#define Pi (2.0*sqrt(2.0))\nfloat Cos(float a){return 2.0*abs(mod(a,2.0*Pi)-Pi)/Pi-1.0;}   \nfloat Sin(float a){return Cos(a-Pi/2.0);}   \nvec2 CosSin(float a){return vec2(Cos(a),Sin(a));}\nfloat Length(vec2 p){return abs(p.x)+abs(p.y);}\nvec3 taxi(float t){vec2 p=vec2(2.*Cos(t/2.),Sin(t));return vec3(p.x+p.y,0,p.x-p.y);}\nvec3 mcol=vec3(0.0);  \nfloat DE(in vec3 p){\n vec3 z=p; \n z.xz = abs(mod(z.xz,6.)-3.);\n z.xz=clamp(z.xz, -1.0, 1.0) *2.0-z.xz;\n if(z.x>z.z)z.xz=z.zx;\n float dg=z.y,t=sin((z.x+z.z)*3.)*.1,ds=length(z.xz+sin(p.zx)*.2)-.4+t;\n float dt=dg-1.5+t+sin((p.x-p.z)*.3)*.5;\n p.xz=abs(mod(p.xz+3.,12.)-6.)-3.;\n z.x+=.5;z.z=fract(z.z)-.5;\n float dc=max(length(z)-.15,abs(z.z)-0.09),n=6.;\n for(int i=0;i<5;i++){\n   vec3 c=taxi(iTime+float(2*i));\n   float dw=length(p-c)-.15;\n   if(dw<.1){//refine\n     vec3 rt=cross(vec3(0,1,0),normalize(c-taxi(iTime+float(2*i)+.3)));\n     float w=abs(dot(p-c,rt))-0.09;\n     dw=max(dw,w);\n   }\n   if(dw<dc){dc=dw;n=float(i);}\n }\n dc=max(dc,p.y-0.125);\n float d=min(min(dc,dg),max(ds*.7,dt));\n if(mcol.x>0.0){\n   if(d==dc){\n     mcol+=step(0.,abs(p.y-0.09)-.02)*(vec3(0.25)+0.25*vec3(sin(n),sin(n+1.),sin(n+2.5)));\n   }else if(d!=dg){\n     p=abs(sin(p*vec3(40.,20.,40.)));\n     mcol+=mix(vec3(0),vec3(.5)+sin(z.xyz*3.)*0.5,pow(min(p.y,min(p.x,p.z)),.2));\n   }else {\n     mcol+=vec3(ds)*.2;\n   }\n }\n return d;\n}\n\nvec3 normal(vec3 p, float d){//from dr2\n  vec2 e=vec2(d,-d);vec4 v=vec4(DE(p+e.xxx),DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx));\n  return normalize(2.*v.yzw+vec3(v.x-v.y-v.z-v.w));\n}\nfloat bounce=1.;\nvec3 sky(vec3 rd, vec3 L){\n  vec3 c= abs(rd)*.2+0.3*dot(rd,L)+0.3;\n  for(float i=0.;i<5.;i+=1.){\n    vec2 p=vec2(sin(i*.1+iTime),sin(i*.1+1.+iTime*.7));\n    c+=bounce*5.*vec3(0,1,0)*exp(-abs(dot(p,rd.xz))*1000.);\n  }\n  return clamp(c,0.,1.);\n}\nfloat rnd;\nvoid randomize(in vec2 p){rnd=fract(float(time)+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);}\n\nfloat ShadAO(in vec3 ro, in vec3 rd,in float dL){\n float t=0.01*rnd,s=1.0,d,mn=0.01;\n for(int i=0;i<12;i++){\n  d=max(DE(ro+rd*t)*1.5,mn);\n  s=min(s,d/t+t*0.5);\n  t+=d;\n  if(d>dL)break;\n }\n return s;\n}\nvec3 scene(vec3 ro, vec3 rd){\n  float t=DE(ro)*rnd,d,pd,os,px=1./rez.y;\n  vec3 L=normalize(vec3(0.4,0.5,0.5)),C=vec3(0);\n  float refl=1.;\n  for(int j=0;j<4;j++){\n    mcol=vec3(0);d=1.0,pd=10.0,os=0.0; //estimated,prev distance, overstep\n    for(int i=0;i<30;i++){\n      d=DE(ro+rd*t);\n      if(d>os){  //we have NOT stepped over anything \n        os=0.5*d*d/pd;//calc overstep based on ratio of this step to last \n        t+=d+os; //add in the overstep \n        pd=d; //save this step length for next calc \n      }else{  //we MAY have stepped over something \n        os*=0.5; //bisect overstep \n        t-=os; //back up \n        if(os>0.001)d=px*t*2.; //don't bail unless the overstep was small (and d of course) \n        else t+=d+os;//we are going to bail so add in this last distance \n      }\n      if(t>70.0 || d<px*t)break;\n    }\n    if(d<px*t && t<70.){\n      mcol.x=0.001;\n      vec3 so=ro+rd*t;\n      vec3 N=normal(so,d);\n      mcol*=.25;\n      refl*=mcol.x;\n      vec3 scol=mcol;mcol.x=0.;\n      float dif=0.75+0.25*dot(N,L);\n      float vis=clamp(dot(N,-rd),0.05,1.0);\n      float fr=pow(1.-vis,5.0);\n      float shad=0.5+0.5*ShadAO(so,L,1.);\n      bounce*=bounce*bounce*bounce+8.;\n      scol=(scol*dif+fr*sky(reflect(rd,N),L))*shad;\n      C=clamp(C+scol*refl,0.,1.);\n      ro+=rd*(t-px*t);rd=reflect(rd,N);t=px*t*2.;\n    }\n  }\n  return C+sky(rd,L)*refl;\n}\nvec3 path(float t){t*=.2;return vec3(2.75*sin(t),.75+sin(t*1.3)*.1,2.*cos(t)-.2);}\nmat3 lookat(vec3 fw){vec3 up=vec3(0.0,1.0,0.0),rt=-normalize(cross(fw,up));return mat3(rt,normalize(cross(rt,fw)),fw);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n randomize(fragCoord);\n vec3 ro=path(iTime),fw=normalize(-vec3(0,0.001,0.)-ro);\n //vec3 ro=vec3(1,2,0),fw=vec3(0,0,1);\n vec3 rd=lookat(fw)*normalize(vec3((iResolution.xy-2.0*fragCoord)/iResolution.y,3.0));\n fragColor=vec4(scene(ro,rd),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define bps 6.0 \nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);} \nvec2 nofs(float n){//the song's \"random\" ring \n  float r=0.5+0.5*rnd(floor(n));//random volume as well \n  n=mod(n,8.0); \n  if(n<1.0)n= 5.0; \n  else if(n<2.0)n= -5.0; \n  else if(n<3.0)n= -2.0; \n  else if(n<4.0)n= 0.0; \n  else if(n<5.0)n= 3.0; \n  else if(n<6.0)n= -6.0; \n  else if(n<7.0)n= -1.0; \n  else n=0.0;\n  return vec2(n,r); \n}\n\nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.); \n //if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//major \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//minor \n //if((n2==1.)||(n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100;//pentatonic minor\n if((n2==1.)||(n2==2.)||(n2==4.)||(n2==8.)||(n2==9.)||(n2==11.))note=-100.;//blues  \n //if((n2==1.)||(n2==2.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//country \n //if((n2==1.)||(n2==4.)||(n2==7.)||(n2==10.))note=-100.;//diminished whole/half \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==6.)||(n2==8.)||(n2==10.)||(n2==11.))note=-100.;//pentatonic major \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//harmonic minor \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//melodic minor ascending \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//whole tone \n //if((n2==2.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//diminished half/whole \n //if((n2==1.)||(n2==3.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//mixolydian   \n //if((n2==1.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==11.))note=-100.;//dorian \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==10.))note=-100.;//lydian   \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian \n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian Major \n //if((n2==1.)||(n2==3.)||(n2==5.)||(n2==8.)||(n2==11.))note=-100.;//locrian \n //if((n2==2.)||(n2==4.)||(n2==7.)||(n2==9.)||(n2==11.))note=-100.;//lydian dominant \n //if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//double harmonic \n //if((n2==2.)||(n2==3.)||(n2==5.)||(n2==7.)||(n2==9.))note=-100.;//enigmatic \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==8.)||(n2==10.))note=-100.;//neapolitan  \n //if((n2==2.)||(n2==4.)||(n2==6.)||(n2==9.)||(n2==10.))note=-100.;//neapolitan minor \n //if((n2==1.)||(n2==4.)||(n2==5.)||(n2==9.)||(n2==10.))note=-100.;//hungarian minor \n return note; \n} \n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2 \nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;} \nconst float PI=3.14159; \nfloat Cos(float a){return cos(mod(a,PI*2.));} \nfloat Sin(float a){return Cos(a+PI/2.);} \nstruct instr{float att,fo,vibe,vphas,phas,dtun;}; \nvec2 I(float n,float t,float bt,instr i){//note,time,bt 0-8,instrument \n float f=ntof(scale(n));if(f<12.)return vec2(0.0);f-=bt*i.dtun;f*=t*PI*2.; \n f=exp(-bt*i.fo)*(1.0-exp(-bt*i.att))*Sin(f+Cos(bt*i.vibe*PI/8.+i.vphas*PI/2.)*Sin(f*i.phas))*(1.0-bt*0.125); \n n+=t;return vec2(f*Sin(n),f*Cos(n));\n} \nvec2 mainSound(int samp, float time){//att,fo,vibe,vphs,phs,dtun\n instr epiano=instr(50.0,0.05,1.5,0.1,1.5,0.001);//silly fm synth instruments \n instr sitar=instr(30.0,1.,8.0,0.0,0.12525,0.0025); \n instr bassdrum=instr(300.0,1.0,4.0,0.76,1.0,0.5); \n instr stick=instr(100.0,30.0,10.5,0.0,2.3131,1000.0); \n //instr pluckbass=instr(500.0,2.0,1.5,0.0,0.125,0.005); \n instr bass=instr(20.0,0.2,2.0,0.0,0.5,0.005); \n float tim=time*bps,b0,b1,b2,t0,t1,t2; \n vec2 a=vec2(0.0);//accumulator \n for(float i=0.;i<8.;i+=1.){//go back 8 beats and add note tails \n   b0=floor(tim);b1=floor(tim*0.5);b2=floor(tim*0.25); \n   vec2 n2=nofs(b2*0.125)+nofs(b2*0.25)+nofs(b2*0.5)+nofs(b2);//build notes on top of notes like fbm \n   vec2 n1=n2+nofs(b1),n0=n1+nofs(b0); \n   t0=fract(tim)+i; \n   if(mod(tim,512.)<256.)a+=I(n0.x+72.0,t0/bps+0.00008*sin(t0*7.),t0,sitar)*n0.y*.4;\n   if(mod(i,1.)<1.)a+=I(n0.x+93.0,time+Sin(t0*272.0),t0,stick)*n0.y;  \n   if(mod(i,2.)<1.){//notes that play every 2 beats \n     t1=fract(tim*0.5)*2.0+i;\n     //a+=I(n1.x+67.0,time,t1,epiano)*n1.y;\n     a+=I(n1.x+63.0,time,t1,epiano)*n1.y*.25; \n     a+=I(n1.x+60.0,time,t1,epiano)*n1.y*.25; \n     //a+=I(n1.x+36.0,time,t1,pluckbass)*n1.y*4.0;\n     a+=I(n2.x+32.0,t1/bps+0.008*sin(t2*5.0),t1,bassdrum)*8.0;\n     a+=I(n2.x+31.0,t1/bps+0.008*sin(t2*6.0),t1,bassdrum)*8.0;\n     if(mod(i,4.)<1.){//every 4 \n       t2=fract(tim*0.25)*4.0+i;\n       a+=I(n2.x+48.0,time,t2,bass)*n2.y*2.; \n       //a+=I(n2.x+32.0,t2/bps+0.008*sin(t2*5.0),t2,bassdrum)*12.0;\n       //a+=I(n2.x+31.0,t2/bps+0.008*sin(t2*6.0),t2,bassdrum)*12.0;\n     } \n   } \n   tim-=1.;//go back in time to find old notes still decaying \n } \n return clamp(a/48.0,-1.,1.); \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}