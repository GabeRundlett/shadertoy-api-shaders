{
    "Shader": {
        "info": {
            "date": "1529145081",
            "description": "A base tool for games and simulation:\nthe current position (here, mouse) is drawing + pacing a timer, that is propagated to all connected part.\n-> can be used to detect if a block is connected, if the drawing touches itself again, or to propagate a flow.\n",
            "flags": 48,
            "hasliked": 0,
            "id": "lsVBWw",
            "likes": 7,
            "name": "hexa propagate/connect  util",
            "published": 3,
            "tags": [
                "util",
                "short",
                "propagation",
                "closure"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 664
        },
        "renderpass": [
            {
                "code": "// hexagonal version of https://shadertoy.com/view/lsyfDD\n// 2 possible strategies: \n// - offseting odd lines of grid. issue: complicates tests.\n// - global slant of the grid, as here. issue: negative domain top-left. modulo needed.\n\n// --- read map T.y and color cycle timer T.x\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    float d;\n    U = Hcoords(U/PIX,d);                              // hexa cell center and distance\n      \n    if (U.x<0.) { O = vec4(.3); return; }              // negative domain\n    \n    O = T( U );                                        // cell content\n    O = ( .5+.5*sin(O.x*vec4(1,2,4,8)) ) * O.y;        // coloring scheme\n    O = mix( vec4(.5), O, smoothstep(0., 3./PIX, d) ); // hexa cells border\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- paint and propagate timer\n\nfloat id = 1.;          // if you want to test mixing several tracks\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy/PIX,        \n         M = iMouse.xy/PIX,\n         P = U/R; P.x += .5*P.y*R.y/R.x;\n    float d; M = Hcoords(M,d);                // hexa cell under Mouse\n    \n    if (iFrame==0) {                          // init drawing\n        if ( abs( length( P - vec2(.5,.7) ) -.5 ) < .7/R.y ) O.y = 2.;\n        if ( abs( length( P - vec2(.5,0 ) ) -.5 ) < .7/R.y ) O.y = 1.;\n    }\n    else O = T(U);\n    \n    if ( U-.5 == floor(M) )                   // on mouse:\n        O.x = float(iFrame),                  //   draw (or erase if SPACE)\n        O.y = id-keyClick(32);                //   and pace timer\n    else \n      if (O.y==id)                            // in painted area:\n        for(int k =1; k<8; k++) {\n            vec4 T = T(U+vec2(k%3-1,k/3-1));  //   propagate max neighbor time\n                if (T.y==id) O.x = max(O.x,T.x);\n         }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PIX 16. // pixel size (i.e. zoom )\n\n#define SQR3S2 0.866\n    \n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n#define keyToggle(c) (texture(iChannel3,vec2((.5+float(c))/256.,0.75)).x > 0.)\n#define keyClick(c)   texture(iChannel3,vec2((.5+float(c))/256.,0.25)).x\n\n// --- return hexa cell center + dist to center\n\nvec2 Hcoords( vec2 U, out float d ) {\n    U.y /= SQR3S2;\n    //if (mod(floor(U.y),2.)==0.) U.x += .5; // offset odd lines\n    U.x -= .5*U.y;                           // global slant\n\n    vec2 F = fract(U);                       // triangular barycentric coordinates\n    bool u = F.x+F.y > 1.;       \n    vec3 q = vec3(F, fract(1.-F.x-F.y));\n    if (u) q = 1.-q;\n    vec3   r = q - q.zxy;\n\n    U = floor(U);                            // hexagonal center, d = dist to border\n    if      ( r.x>0. && r.y<0. ) U += vec2(!u,u), d = min(r.x,-r.y);\n    else if ( r.y>0. && r.z<0. ) U += vec2(u,!u), d = min(r.y,-r.z);\n    else                         U += vec2(u)   , d = min(r.z,-r.x);\n        \n    return U;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}