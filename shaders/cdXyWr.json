{
    "Shader": {
        "info": {
            "date": "1688315223",
            "description": "this is just \"sorted array compression with dictionary\"\n168Kb of original data 28476 elements 6x8-bit char per element to:\ntotal - 28.5Kb\nCompressed without saving original order of elements.\n\nThis compression is - 1.37 bits per ASCII character in token.",
            "flags": 48,
            "hasliked": 0,
            "id": "cdXyWr",
            "likes": 20,
            "name": "Shadertoy ID database in 28Kb",
            "published": 3,
            "tags": [
                "compression",
                "database"
            ],
            "usePreview": 1,
            "username": "morimea",
            "viewed": 550
        },
        "renderpass": [
            {
                "code": "// Created by Danil (2023+) https://github.com/danilw\n\n// self https://www.shadertoy.com/view/cdXyWr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// NOTE:\n// Shaders IDs from shadertoy public API\n// Get all shaders - https://www.shadertoy.com/howto\n\n\n// USE/CONTROL:\n// 1. type \"shaderID\" on keyboard to test if it in DB - cdXyWr - for example\n// 2. use * char/key as any character, example - **XyWr\n// 3. Input text will be highlighted green/red when its found/not found\n// 4. Enter - find next, if there no next index will not move\n// 5. Delete/Backspace to clean input\n\n\n// COLORS:\n// Green - search result\n// Red - tokens with red-number of connections, less than orange, first smallest, most rare\n// Orange - second rare tokens, number of connections under color\n// Yellow - third rare tokens, number of connections under color\n// ... Ren-Orange-Yellow is tokens with fewer connections of all tokens\n// ... right side tokens is 10+ connections, this why left only\n\n// Purple - my shaders\n// White - this shader\n\n\n// This DB version from July 2, 2023\n// im updating this DB sometime\n// previous versions:\n// https://www.shadertoy.com/view/csScDd\n// alternative version - https://www.shadertoy.com/view/mdSyDd - to test AMD Angle Cubemap performance bug\n\n\n// RESULT:\n\n// Original data - 168Kb of original data - not compressed\n\n// Sorted\n// 45Kb - 7z compression\n// 37Kb - 7z compression left+right side as separate files\n// 28.5Kb - This Shadertoy shader all data\n\n// TEST to see data is correct:\n// 1. define TEST_debug below\n// 2. make screenshot of region, rename screenshot to db_scr.png\n// 3. download this python script to compare to original data, put screenshot there to test\n// TEST LINK https://danilw.github.io/GLSL-howto/shadertoy_db_shader/test_jul0223.zip\n//#define TEST_debug\n\n// for more - read description in CubeA\n\n// Possible Shadertoy chars in tokens, order from left to right\n// 1. ['3' '4' '7' 'D' 'M' 'N' 'W' 'X' 'c' 'd' 'f' 'l' 'm' 's' 't' 'w']\n// 2. ['d' 'l' 's' 't']\n// 3. ['2' '3' 'B' 'G' 'K' 'S' 'V' 'X' 'c' 'd' 'f' 'j' 'l' 's' 't' 'y']\n// 4. ['3' 'B' 'G' 'S' 'X' 'c' 'f' 'y']\n// 5. ['D' 'R' 'W' 'z']\n// 6. ['1' '2' '3' '4' '7' '8' 'B' 'D' 'G' 'H' 'K' 'M' 'N' 'R' 'S' 'V' 'W' 'X'\n//     'c' 'd' 'f' 'h' 'j' 'l' 'm' 'n' 'r' 's' 't' 'w' 'y' 'z']\n\nconst int conet[] = int[](3,4,5);\nconst int vtxt[] = int[](74, 117, 108, 121, 32, 50, 44, 32, 50, 48, 50, 51 );\n\nconst vec3 white = vec3(0xa4, 0xc4, 0xd8) / float(0xff);\nconst vec3 whitel = vec3(0xdc, 0xe0, 0xd1) / float(0xff);\nconst vec3 dark = vec3(0x1d, 0x1d, 0x2b) / float(0xff);\nconst vec3 darkb = vec3(0x20, 0x40, 0x89) / float(0xff);\nconst vec3 redd = vec3(0xe1, 0x46, 0x14) / float(0xff);\nconst vec3 blue = vec3(0x05, 0x86, 0xb3) / float(0xff);\nconst vec3 green = vec3(0x05, 0xb3, 0x86) / float(0xff);\nconst vec3 orange = vec3(0xcb, 0x73, 0x3b) / float(0xff);\n\nconst vec3 col_red = vec3(0xFF, 0x28, 0x24) / float(0xff);\nconst vec3 col_ora = vec3(0xFB, 0x90, 0x39) / float(0xff);\nconst vec3 col_yel = vec3(0xFA, 0xCD, 0x3D) / float(0xff);\nconst vec3 col_p = vec3(0xA0, 0x40, 0xB0) / float(0xff);\n\nconst ivec2 tables_size = ivec2(cube_num_elems_use_sz,cube_num_elems_use_sz);\nconst float top_panel = 0.05;\nconst float borders = 0.1;\nconst vec2 text_len = vec2(3.5,1.);\n\nconst float blines = 0.065;\nconst float cell_border = 0.25;\n\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat lines(vec2 p, vec2 bsz, float px, float a, float b) {\n    float d = 0.;\n    d = max(d, smoothstep(px, -px, abs(sdBox(p, bsz / 2.) - a) - b));\n    return d;\n}\n\nfloat lines1d(vec2 p, vec2 bsz, float px, float a, float b) {\n    float d = 0.;\n    d = max(d, smoothstep(px, -px, (sdBox(p, bsz / 2.) - a) - b));\n    return d;\n}\n\n\n\n//using https://www.shadertoy.com/view/llyXRW\nvoid C(sampler2D tex, inout vec2 U, inout vec4 T, in int c, bool dir, float loc_scale){\n    loc_scale = clamp(loc_scale*2.,0.05*1024./iResolution.y,1.);\n    U.x+=dir?.5:-0.5;\n    vec2 tu=U/16. + fract( vec2(float(c), float(15-c/16)) / 16.);\n    tu.y=1.-tu.y;\n    vec4 tr = textureGrad(tex, tu, dFdx(tu/(16.*loc_scale)),dFdy(tu/(16.*loc_scale)));\n    if(U.x<.0||U.x>1.||U.y<0.||U.y>1. ){\n        tr*=0.;\n    }\n    T+=tr;\n}\n\nfloat print_text(sampler2D tex, vec2 U, ivec3 text){\n    vec4 T=vec4(0.);\n    for(int i=0;i<3;i++){\n        C(tex,U,T,text[i],false,scale);\n    }\n    if(length(T.yz)==0.)\n        return 0.;\n    return T.x;\n}\n\nfloat print_text2d(sampler2D tex, vec2 U, ivec3 text, vec3 pw){\n    mat4 T=mat4(0.);\n    for(int i=0;i<3;i++){\n        C(tex,U,T[i],text[i],false,scale);\n        T[i].x+=T[i].x*pw[i];\n    }\n    vec4 Tr = T[0]+T[1]+T[2];\n    if(length(Tr.yz)==0.)\n        return 0.;\n    return Tr.x;\n}\n\nmat3 get_int(int cval, out int nlen) {\n    mat3 ret=mat3(0.);\n    nlen=0;\n    if(cval==0){\n        ret[0][0]=float(48);\n        nlen+=1;\n        return ret;\n    }\n    int neg = 0;\n    if(cval<0){\n        neg=45;\n        cval = abs(cval);\n    }\n    for(int i=0;i<9;i++){\n        if(cval>0){\n            int tv=cval%10;\n            ret[i/3][i%3]=float(48+tv);\n            cval=cval/10;\n            nlen+=1;\n        }\n        else{\n            break;\n        }\n    }\n    if(neg!=0){\n        ret[nlen/3][nlen%3]=float(neg);\n        nlen+=1;\n    }\n    return ret;\n}\n\nfloat print_int(sampler2D tex, vec2 U, int val, float loc_scale) {\n    int num_length;\n    mat3 str = get_int(val, num_length);\n    vec4 T=vec4(0.);\n    for(int i=0;i<num_length;i++){\n        C(tex, U,T,int(str[i/3][i%3]), true, loc_scale);\n    }\n    if(length(T.yz)==0.)\n        return 0.;\n    return T.x;\n}\n\n\nconst ivec4 bar_xy =   ivec4(0,0+cube_num_elems_use_sz+10,1,0+cube_num_elems_use_sz+10);\nconst ivec4 im_xy =    ivec4(0,1+cube_num_elems_use_sz+10,1,1+cube_num_elems_use_sz+10);\nconst ivec4 click_xy = ivec4(0,2+cube_num_elems_use_sz+10,1,2+cube_num_elems_use_sz+10);\nconst ivec4 click_pm = ivec4(0,3+cube_num_elems_use_sz+10,1,3+cube_num_elems_use_sz+10);\nconst ivec2 inp_buf1 = ivec2(0,4+cube_num_elems_use_sz+10);\nconst ivec2 inp_buf2 = ivec2(1,4+cube_num_elems_use_sz+10);\n\nconst ivec2 unp_reg = ivec2(cube_num_elems_use_sz*2, cube_num_elems_use_sz);\nconst ivec2 unp_buf = ivec2(0,7+cube_num_elems_use_sz+10);\nconst ivec2 sest_idx_res = ivec2(0,8+cube_num_elems_use_sz+10+unp_reg.y);\nconst ivec2 is_toka = ivec2(0,5+cube_num_elems_use_sz+10);\nconst ivec2 is_tokb = ivec2(1,5+cube_num_elems_use_sz+10);\n\n\nconst vec4 bar_xy_sc = vec4(vec2(10.),vec2(10.));\nconst vec4 im_xy_sc = vec4(vec2(1.),vec2(1.));\nconst vec4 click_xy_sc = vec4(vec2(cube_num_elems_use_sz+1,cube_num_elems_use_sz+1),vec2(10.));\nconst vec4 click_pm_sc = vec4(vec2(1.),vec2(10.));\n\nvec4 loadval16(ivec2 ipx) {\n    ivec2 side_sz = textureSize(iChannel0,0).xy;\n    return read_cubem(iChannel0, ipx, cube_side, side_sz);\n}\n\nconst ivec2 resetx = ivec2(2,2+cube_num_elems_use_sz+10);\nbool is_reset(){\n    return loadval16(resetx).w<0.5;\n}\n\nvec4 loadval2x16(ivec4 ipx, vec4 scale) {\n    if(is_reset())return vec4(0.);\n    ivec4 a = ivec4(loadval16(ipx.xy)+float(0x7ff/2));\n    ivec4 b = ivec4(loadval16(ipx.zw)+float(0x7ff/2));\n    return scale*2.*(vec4((a<<11)+b)/float(0x3FFFFF)-0.5);\n}\nvec3 print_tk(vec2 sop, vec2 res, vec2 im, vec2 p, ivec2 idx, vec3 col, bool rbrd, float panel, float nidx, float px, vec3 clc){\n    float d = 0.;\n    int l_idx = idx.x+idx.y*cube_num_elems_use_sz;\n    \n    float fm = 1.;\n    vec3 bcol = darkb;\n    vec3 embcol = darkb;\n    vec3 tacol = dark;\n    vec3 tbcol = dark;\n    \n    vec4 ta = loadval16(unp_buf+idx*ivec2(2,1));\n    vec4 tb = loadval16(unp_buf+idx*ivec2(2,1)+ivec2(1,0));\n    ivec3 taa = ivec3(32,32,32);\n    ivec3 tbb = ivec3(32,32,32);\n    if(int(ta.x)>0){\n        taa=ivec3(ta.xyz);\n        tbb=ivec3(tb.xyz);\n    }\n    \n    int tfo = int(ta.w);\n    int tfob = int(tb.w);\n    bool tfio = tfo>50&&tfob>50;\n    if(tfo>50)tfo=tfo-100;\n    bool fo = tfo>0;\n    \n    switch(tfo/10){\n        case 1:bcol = col_red;tacol = -col_red*0.5;fm = 0.95;break;\n        case 2:bcol = col_ora;tacol = -col_ora*0.5;fm = 0.95;break;\n        case 3:bcol = col_yel;tacol = -col_yel*0.5;fm = 0.75;break;\n    }\n   \n    switch(tfo-(tfo/10)*10){\n        case 1:{vec3 tc = col_p;if(bcol==darkb){bcol = tc;fm = 0.5;}else{embcol = tc;tacol = tc;tbcol = tc;}}break;\n        case 2:{vec3 tc = whitel;if(bcol==darkb){bcol = tc;fm = 0.85;}else{embcol = tc;tacol = tc;tbcol = tc;}}break;\n    }\n    \n    if(fo){\n        d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n        col = mix(col, bcol, fm*d*panel*nidx);\n    }\n    \n    if(tfio){\n        d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n        col = mix(col, green, 0.55*d*panel*nidx);\n    }\n    \n    \n    \n    if(idx==ivec2(clc.xy)){\n        d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n        col = mix(col, whitel, clamp(1.-clc.z,0.,1.)*0.45*d*panel*nidx);\n    }\n    \n    d = lines(p, text_len-cell_border, 1.*px*1./scale, 0.051, 0.005);\n    col = mix(col, embcol, d*panel*nidx);\n    d = 0.;\n    \n    vec3 tma = vec3(0.);\n    vec3 tmb = vec3(0.);\n    if(tfio){\n        vec4 tv = loadval16(inp_buf1);\n        vec4 tv2 = loadval16(inp_buf2);\n        ivec3 tsa = ivec3(abs(tv.xyz));\n        ivec3 tsb = ivec3(abs(tv2.xyz));\n        const int ka_mul = 42;\n        bvec3 tsta = bvec3(tsa.x>0&&tsa.x!=95&&tsa.x!=ka_mul,tsa.y>0&&tsa.y!=95&&tsa.y!=ka_mul,tsa.z>0&&tsa.z!=95&&tsa.z!=ka_mul);\n        bvec3 tstb = bvec3(tsb.x>0&&tsb.x!=95&&tsb.x!=ka_mul,tsb.y>0&&tsb.y!=95&&tsb.y!=ka_mul,tsb.z>0&&tsb.z!=95&&tsb.z!=ka_mul);\n        tma+=vec3(tsta);\n        tmb+=vec3(tstb);\n    }\n    vec4 tv = loadval16(sest_idx_res);\n    vec4 lsta = loadval16(is_toka);\n    int flgsa = int(abs(lsta.w));\n    vec4 lstb = loadval16(is_tokb);\n    int flgsb = int(abs(lstb.w));\n    ivec2 sid = ivec2(-1);\n    if(tv.w>0.&&(flgsa!=20&&flgsb!=20)){\n        sid = ivec2((int(abs(tv).x)<<8)+int(abs(tv).y),(int(abs(tv).z)<<8)+int(abs(tv).w));;\n                    \n        if(sid==idx){\n            d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n            col = mix(col, green*green, 0.55*d*panel*nidx);\n        }\n    }\n    d = print_text2d(iChannel3, p*1.25+vec2(2.25,0.5), taa, tma);\n    if(rbrd) d = clamp(d,0.,1.)*0.;// text dfd fix, it still confused on cells\n    col = mix(col, tacol, d*.47*panel*nidx);\n    d = print_text2d(iChannel3, p*1.25+vec2(0.75,0.5), tbb, tmb);\n    if(rbrd) d = clamp(d,0.,1.)*0.;// text dfd fix, it still confused on cells\n    col = mix(col, tbcol, d*.47*panel*nidx);\n    \n    \n    if(tv.w>0.&&(flgsa!=20&&flgsb!=20)){\n        vec2 tpi = vec2(sid)*(text_len);\n\n        vec2 tp = -tpi+(im)/scale-0.5*text_len;\n        vec2 szi = vec2(borders,borders+top_panel);\n        tp = clamp(tp,(-res+szi)/scale,vec2(0.));\n        d = 1.-smoothstep(0.75,0.75+px/scale,length(tp+sop/scale));\n        d = min(d,smoothstep(text_len.y*.25,text_len.y*.25+px/scale,abs(tp+sop/scale).y));\n        col = mix(col, green*green*0.85, 0.75*d);\n    }\n    return col;\n}\n\n\nvec3 print_st(vec2 p, vec3 col);\nvec4 draw(vec2 p, float px, vec2 ires){\n    vec2 res=ires.xy/ires.y;\n    \n    vec2 im = ((loadval2x16(bar_xy,bar_xy_sc).xy*ires.xy)/ires.y);\n    vec3 clc = loadval2x16(click_xy,click_xy_sc).xyz;\n    \n    vec4 bp = vec4(0.2, 0.045, vec2(0.,-res.y*0.5+0.045));\n    \n    vec3 col = white;\n    \n    vec2 sop = p;\n    \n    p+=0.5*res-vec2(borders*0.5);\n    vec2 local_sc = (vec2(tables_size)-(res-vec2(borders,borders+top_panel))/(scale*text_len))*scale*text_len;\n    p+=(im/res)*local_sc;\n    \n    vec2 op = p;\n    float a = 0.;\n    float d = 0.;\n    \n    vec2 tp = sop+vec2(0.,0.5*top_panel);\n    d = lines(tp, res-vec2(borders,borders+top_panel), px, 0.01, 0.001);\n    col = mix(col, dark, d);\n    \n    // not bool to avoid dfd bugs with texture font\n    float panel = lines1d(tp, res-vec2(borders,borders+top_panel), px, 0.01, 0.001); \n    \n    p=sop+vec2(0.,-0.5+0.5*top_panel+0.5*borders);\n    if(p.y>0.&&p.x<0.){\n        d = lines1d(p+2.*vec2(0.0151)*vec2(1.,-1.), vec2(0.0151), px, 0.01, 0.001);\n        col = mix(col, whitel, 0.75*d);\n        d = lines1d(p+2.*vec2(0.0151)*vec2(2.75,-1.), vec2(0.0151), px, 0.01, 0.001);\n        col = mix(col, col_p, 0.5*d);\n        d = lines1d(p+2.*vec2(0.0151)*vec2(5.5,-1.), vec2(0.0151), px, 0.01, 0.001);\n        col = mix(col, col_yel, 0.65*d);\n        d = lines1d(p+2.*vec2(0.0151)*vec2(7.25,-1.), vec2(0.0151), px, 0.01, 0.001);\n        col = mix(col, col_ora, 0.65*d);\n        d = lines1d(p+2.*vec2(0.0151)*vec2(9.,-1.), vec2(0.0151), px, 0.01, 0.001);\n        col = mix(col, col_red, 0.65*d);\n        float td = lines(p+2.*vec2(0.0151)*vec2(1.,-1.), vec2(0.0151), px, 0.01, 0.001);\n        td = max(td,lines(p+2.*vec2(0.0151)*vec2(2.75,-1.), vec2(0.0151), px, 0.01, 0.001));\n        td = max(td,lines(p+2.*vec2(0.0151)*vec2(5.5,-1.), vec2(0.0151), px, 0.01, 0.001));\n        td = max(td,lines(p+2.*vec2(0.0151)*vec2(7.25,-1.), vec2(0.0151), px, 0.01, 0.001));\n        td = max(td,lines(p+2.*vec2(0.0151)*vec2(9.,-1.), vec2(0.0151), px, 0.01, 0.001));\n        col = mix(col, dark, td);\n    }\n    \n    d = print_int(iChannel3, 35.*(p+vec2(0.025+0.246,0.015)),conet[0], 1.);\n    d = max(d,print_int(iChannel3, 35.*(p+vec2(0.025+0.195,0.015)),conet[1], 1.));\n    d = max(d,print_int(iChannel3, 35.*(p+vec2(0.025+0.14,0.015)),conet[2], 1.));\n    col = mix(col, dark, 0.75*d);\n    \n    ivec2 idx = ivec2(op/(text_len*scale));\n    float nidx = ((op.x<0.||op.y<0.)||(idx.x>=tables_size.x||idx.y>=tables_size.y))?0.:1.;\n    \n    p = fract(op/(text_len*scale))-0.5;\n    p=p*text_len;\n    \n    bool rbrd = lines1d(p, text_len-cell_border, 1.*px*1./scale, 2.*0.051, 2.*0.005)<0.99;\n    \n    if(((idx.x)%4)==0){\n        //d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n        //col = mix(col, whitel, 0.123*d*panel*nidx);\n    }else\n    if(((idx.y*2)%3)==0){\n        d = lines1d(p, text_len-cell_border, px*1./scale, 0.051, 0.005);\n        col = mix(col, darkb, 0.073*d*panel*nidx);\n    }\n    \n    col = print_tk(sop+0.5*res-vec2(borders*0.5), res, (im/res)*local_sc, p, idx, col, rbrd, panel, nidx, px, clc);\n    \n    im*=(1.-0.5*2.*blines);\n    if(step(res.x*0.5-sop.x,blines*0.5)>0.5){\n        col = mix(col, dark, 0.5*step(abs(sop.y-im.y+0.5*res.y-0.5*blines),blines));\n    }\n    if(step(res.y*0.5+sop.y,blines*0.5)>0.5){\n        col = mix(col, dark, 0.5*step(abs(sop.x-im.x+0.5*res.x-0.5*blines*res.x),blines));\n    }\n    \n    col = print_st(sop, col);\n    \n    \n    \n    float vignetteAmt = 1. - dot(sop * 0.65, sop * 0.65);\n    col *= max(vignetteAmt,0.6);\n    col = col / 2. + col*col;\n    col += (hash12(sop*ires*2.33) - .5)*.07;\n    col = clamp(col, vec3(0.), vec3(1.));\n    \n    return vec4(col,a);\n}\n\n#ifdef TEST_debug\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx=ivec2(fragCoord);\n    if(ipx.x>=cube_num_elems_use_sz*2||ipx.y>=cube_num_elems_use_sz){\n        fragColor=vec4(0.);\n        return;\n    }\n    \n    // v1\n    vec4 tval = loadval16(ipx+unp_buf);\n    ivec3 chrs = ivec3(abs(tval.xyz));\n    fragColor = vec4(vec3(chrs)/255.,1.0);\n    \n    // v2\n    // equal but from token id\n/*\n    ivec2 new_db_reg = ivec2(0,cube_num_elems_use_sz);\n    ivec2 ta_reg = ivec2(new_db_reg.x+new_db_reg.y,0);\n    ivec2 tb_reg = ivec2(ta_reg.x+cube_tokens_use_sz,0);\n    \n    ivec2 lipx = ipx/ivec2(2,1);\n    \n    vec4 t_idx = loadval16(lipx);\n    ivec3 taa = ivec3(0);\n    ivec3 tbb = ivec3(0);\n    if(t_idx.x>0.){\n        int a_idx = (int(t_idx.x)<<8)+int(t_idx.y);\n        ivec2 aidx = ivec2(a_idx%32,a_idx/32);\n        vec4 ta = loadval16(ivec2(ta_reg) + aidx);\n        int b_idx = (int(t_idx.z)<<8)+int(t_idx.w);\n        ivec2 bidx = ivec2(b_idx%32,b_idx/32);\n        vec4 tb = loadval16(ivec2(tb_reg) + bidx);\n        taa = ivec3(ta.xyz);\n        tbb = ivec3(tb.xyz);\n    }\n    if(ipx.x%2==0) fragColor = vec4(vec3(taa)/255.,1.0);\n    else fragColor = vec4(vec3(tbb)/255.,1.0);\n*/\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float px=1.5/iResolution.y;\n    vec2 res=iResolution.xy/iResolution.y;\n    vec2 uv=fragCoord/iResolution.y-0.5*res;\n    vec4 c=draw(uv, px, iResolution.xy);\n    \n    fragColor = vec4(c.rgb,1.0);\n}\n#endif\n\n\n\n\n\n\n\n\n\n\nint text_l[] = int[](87, 97, 105, 116, 105, 110, 103, 46, 46, 46) ;\nint text_i[] = int[](73, 110, 112, 117, 116, 58) ;\nint text_e[] = int[](69, 114, 114, 111, 114, 44, 32, 116, 114, 121, 32, 116, 111, 32, \n                    114, 101, 102, 114, 101, 115, 104, 32, 112, 97, 103, 101 ) ;\n\n\nvec3 print_st(vec2 p, vec3 col){\n    float d = 0.;\n    vec4 T=vec4(0.);\n    p.y+=-0.5+0.09;\n    p*=10.;\n    vec2 tp = p;\n    /*tp.x+=7.;\n    for(int i=0;i<text_l.length();i++){\n        C(iChannel3,tp,T,text_l[i],false,1.);\n    }\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    */\n    T=vec4(0.);\n    tp = p;\n    for(int i=0;i<text_i.length();i++){\n        C(iChannel3,tp,T,text_i[i],false,1.);\n    }\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    col = mix(col, darkb, d*0.47);\n    T=vec4(0.);\n    tp = p+vec2(.9,-0.0035)*10.;tp*=1.27;d = 0.;\n    for(int i=0;i<vtxt.length();i++){\n        C(iChannel3,tp,T,vtxt[i],false,1.);\n    }\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    col = mix(col, darkb, d*0.27);\n    T=vec4(0.);\n    tp = p;d = 0.;\n    tp.y-=(-0.5+0.09)*10.;tp.x+=0.65*10.;\n#ifdef NO_COMPILE\n    int text_tmpe1[] = int[](100, 111, 101, 115, 32, 78, 79, 84, 32, 119, 111, 114, 107, 32 ,105, 110, 32, 65, 78, 71, 76, 69, 32, 33, 33, 33) ;\n    int text_tmpe2[] = int[](84, 111, 32, 99, 111, 109, 112, 105, 108, 101, 32, 45, 32, 114, 101, 97, 100, 32, 67, 111, 109, 109, 111, 110 ) ;\n    for(int i=0;i<text_tmpe1.length();i++){\n        C(iChannel3,tp,T,text_tmpe1[i],false,1.);\n    }\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    col = mix(col, redd, d);\n    tp = p;d = 0.;\n    tp.y-=(-0.65+0.09)*10.;tp.x+=0.65*10.;\n    for(int i=0;i<text_tmpe2.length();i++){\n        C(iChannel3,tp,T,text_tmpe2[i],false,1.);\n    }\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    col = mix(col, redd, d);\n#else\n    if(iFrame>120&&(loadval16(ivec2(0,0)).x<0.5||loadval16(ivec2(1,0)).x<0.5||loadval16(ivec2(0,1)).x<0.5||loadval16(ivec2(10,10)).x<0.5||abs(loadval16(ivec2(unp_buf))).x<0.5||abs(loadval16(ivec2(unp_buf+5))).x<0.5)){\n        for(int i=0;i<text_e.length();i++){\n            C(iChannel3,tp,T,text_e[i],false,1.);\n        }\n        if(length(T.yz)!=0.) d = max(d, T.x);\n        col = mix(col, redd, d);\n    }\n#endif\n    T=vec4(0.);\n    tp = p;\n    tp.x+=-3.;\n    int text_b[] = int[](95, 95, 95, 95, 95, 95) ;\n    vec3 tcol = darkb;\n    float tca = 0.47;\n    if(p.x>0.&&p.y>0.){\n        if(!is_reset()){\n            vec4 tv = loadval16(inp_buf1);\n            text_b[0] = int(tv[0]);text_b[1] = int(tv[1]);text_b[2] = int(tv[2]);\n            tv = loadval16(inp_buf2);\n            text_b[3] = int(tv[0]);text_b[4] = int(tv[1]);text_b[5] = int(tv[2]);\n        }\n\n        vec4 lsta = loadval16(is_toka);\n        int flgsa = int(abs(lsta.w));\n        vec4 lstb = loadval16(is_tokb);\n        int flgsb = int(abs(lstb.w));\n        if(flgsa==20||flgsb==20){\n            tcol = redd;\n            tca = 0.87;\n        }else{\n            vec4 lsta = loadval16(sest_idx_res);\n            if(lsta.w>0.){\n                tcol = green;\n                tca = 0.87;\n            }else{\n                if(lsta.z>0.){\n                    tcol = redd;\n                    tca = 0.87;\n                }\n            }\n        }\n    }\n    T=vec4(0.);d = 0.;\n    for(int i=0;i<text_b.length();i++){\n        C(iChannel3,tp,T,text_b[i],false,1.);\n    }\n    \n\n    if(length(T.yz)!=0.) d = max(d, T.x);\n    \n    // debug\n/*\n    ivec4 tva = ivec4(1.*loadval16(inp_buf1));\n    //tva.y=int(texelFetch(iChannel1,ivec2(0+33*2+3,0),0).x);\n    //ivec4 tva = ivec4(1.*sign(loadval16(inp_buf1)));\n    //const ivec2 sest_idx_reg = ivec2(0,9+cube_num_elems_use_sz+10+unp_reg.y);\n    //ivec4 tva = ivec4((loadval16(sest_idx_reg+ivec2(0,0))));\n\n    d+= print_int(iChannel3, 1.35*(tp+0.5)-vec2(-17.5,0.5),tva.x,1.);\n    d+= print_int(iChannel3, 1.35*(tp+0.5)-vec2(-16.0,0.5),tva.y,1.);\n    d+= print_int(iChannel3, 1.35*(tp+0.5)-vec2(-14.5,0.5),tva.z,1.);\n    d+= print_int(iChannel3, 1.35*(tp+0.5)-vec2(-13.0,0.5),tva.w,1.);\n*/\n    \n    col = mix(col, tcol, d*tca);\n    return col;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// map of connections 1 and 2\n\nuint map_uint_0[] = uint[](\n0x64A16929u, 0x48BF0DC5u, 0xD56029B3u, 0xFC6D27A8u, 0xEEF9049Cu, 0x7841DA73u, \n0xAD62E349u, 0x23E931BBu, 0x2959F5BDu, 0x62129734u, 0x53315299u, 0xB2199DFBu, \n0x50F06153u, 0xE463590Au, 0x940895F9u, 0xB4D69285u, 0xCD7DDBDBu, 0x61347532u, \n0x0F612077u, 0x7B1C9459u, 0x9E35E8ECu, 0xCD8788BCu, 0xB1487CFDu, 0x635072EBu, \n0xB08E82C4u, 0x726C3446u, 0x4EEEC0ABu, 0x25E0AE92u, 0x9B0BB4B7u, 0x22C650BBu, \n0x20953FAEu, 0x3F1CB076u, 0x07326414u, 0x50CE3DE5u, 0xC630CA05u, 0xC6535857u, \n0x6EDB0CB4u, 0x5B5A3833u, 0x028F7EA9u, 0x751F7A71u, 0xAC531A28u, 0x59C5EBF9u, \n0x12FC7EA9u, 0x0F3A884Fu, 0x82849022u, 0x4246078Bu, 0xED3FCCC9u, 0xB8DFA03Au, \n0xAF800AD5u, 0x310BF40Du, 0xBF33D3A4u, 0x40F234B1u, 0x14EC583Bu, 0xBA34BB81u, \n0xE520F554u, 0x2EB85BFAu, 0x0624A65Cu, 0x2D8F13B9u, 0x2318BD63u, 0x0CA060F7u, \n0x9CD1E4E5u, 0x4D948B3Fu, 0x310F0915u, 0x5021F779u, 0x8E7B7A16u, 0xB1BD6361u, \n0x50AC7238u, 0x293F316Bu, 0x84C7E670u, 0x4F2C6329u, 0x83B77CD5u, 0xAF890A7Au, \n0x1D7C3D8Au, 0x58ACEF39u, 0xC92042ACu, 0x7D954EFAu, 0x2D4349B3u, 0xB0799402u, \n0x5B6C42FAu, 0xBCE287BBu, 0xE3E75F61u, 0x334CC068u, 0xDB766C5Cu, 0x19C5F269u, \n0x37185E15u, 0x376068FCu, 0x92C8B986u, 0x576B07EFu, 0xB216C252u, 0x6318242Du, \n0x4E59DF58u, 0xFEB1C962u, 0x8C5D36D8u, 0x03F88BC7u, 0x0940B89Fu, 0xC425A7CEu, \n0x32D1FD7Bu, 0xEA5F36F8u, 0xE6E50BBBu, 0x2115CEDCu, 0xB2B29A25u, 0x9C868F8Fu, \n0xCA96310Du, 0x517311B3u, 0x8A7D46F0u, 0xD0C13A80u, 0x34626CCEu, 0xAA7BD51Bu, \n0x6F10DFA1u, 0x6F2AAF8Eu, 0x8F457F05u, 0x884F43B8u, 0x25431726u, 0x1083DF8Eu, \n0x8DA45162u, 0x52F7E918u, 0x8D45D690u, 0xD7AC6ACFu, 0xAEC5824Eu, 0xC72EB715u, \n0x616649AEu, 0xB8F70578u, 0xE086136Eu, 0x626EEA77u, 0x5929061Au, 0x3B752250u, \n0x3DE195F0u, 0xFA06A221u, 0xAFB0E7F4u, 0xEAA08EB4u, 0xE13DFF0Cu, 0x533D0A2Du, \n0x9C85A1A1u, 0x13242FADu, 0xC671A92Eu, 0x2CA82BE4u, 0xB9C2B38Fu, 0x666D9273u, \n0x372EED13u, 0x2AAF7E75u, 0x01ABC7A2u, 0x947FAD9Au, 0x4A9F35F2u, 0xA415A61Fu, \n0x878B908Du, 0xF6A3078Fu, 0xAB2A5C83u, 0x7A4F10F7u, 0x89362307u, 0x1AA31833u, \n0x208C0D57u, 0xF8F0FF68u, 0x7E765258u, 0xE3DAAEF3u, 0xCE2800D8u, 0xEF4C1E1Eu, \n0xAA3A7738u, 0x618B35DBu, 0x32EC96D3u, 0x232D46B6u, 0x5FA72F10u, 0x35DF271Au, \n0x9104807Du, 0x8854D452u, 0x28C7C4F0u, 0xC7020A94u, 0x53207814u, 0x82663530u, \n0xD8593594u, 0x6EA21756u, 0x5933635Eu, 0x462BE3DEu, 0x58DBF004u, 0x6239E18Du, \n0x4082F73Au, 0x8D68A416u, 0x259468E4u, 0xAB115FDBu, 0xBD9D4136u, 0x43FD5577u, \n0xF81B547Eu, 0x07842674u, 0x6FAE2175u, 0x896DB7AFu, 0x304A8AA4u, 0x20F93752u, \n0x30B481AEu, 0x507D410Fu, 0x1F73E438u, 0x3D3CF2D1u, 0xF7E19BEDu, 0xE4B391DEu, \n0x6D9BDDC4u, 0xA45235B4u, 0xF370D403u, 0xFF0E5301u, 0x8D25725Cu, 0x6DE0842Cu, \n0x6F190F13u, 0x76E2A740u, 0x2AC4748Au, 0x98D473A9u, 0x304E07EFu, 0x40804360u, \n0x86F1B792u, 0xA5266A19u, 0xC8557313u, 0xB451D272u, 0xC5161A3Fu, 0x59E0094Au, \n0xDEBB2062u, 0xE077FF3Eu, 0xC25123AFu, 0x880FE53Cu, 0x9DE91F36u, 0x6B6F14BCu, \n0x3B526B65u, 0x68A7B71Eu, 0x021FE08Fu, 0x3ABE1F5Au, 0x5D71B326u, 0x0F6D2D69u, \n0xDDD17FF8u, 0x071D0B2Cu, 0x3AC8AE2Au, 0x62AF1DAAu, 0xA9E12617u, 0x09A27F7Eu, \n0xAD394EBDu, 0x6C19A674u, 0x94AEDA46u, 0xF5ACC9A5u, 0x99CEA9B7u, 0x86261B49u, \n0x42FB2E6Cu, 0xB021477Fu, 0xAD60487Du, 0xFFD3C802u, 0x38C55C5Bu, 0x8897CAFBu, \n0x23AA2F17u, 0xF52F31F3u, 0x7806A41Eu, 0x7F411ED5u, 0x6B6D020Eu, 0xEFE62B91u, \n0x858DD4EEu, 0x511CB9FBu, 0x4ED555CAu, 0x1C69D99Au, 0x41CAA6B8u, 0x6B211ECFu, \n0xE5F5F58Fu, 0x118B2399u, 0x34FD0159u, 0xC01EA1BEu, 0xE3EA74A1u, 0x4D554342u, \n0xFDA619FDu, 0xE1E80C9Au, 0xC2F2E6D8u, 0x25CCC8D4u, 0x464112B3u, 0xCFB926B1u, \n0x99B59EE3u, 0xA92E7329u, 0xD7A6A253u, 0x412D030Cu, 0xC53C7152u, 0x0C22FA71u, \n0xE4AFE610u, 0x3811A2A9u, 0xCB2678FAu, 0x62A28554u, 0x5E06FEDAu, 0x7F900A54u, \n0x0F07CFFDu, 0xC5E80B5Fu, 0x1D8E2CB8u, 0x91945896u, 0x4C0F4811u, 0x91832E75u, \n0x2F0DB89Au, 0xF08880E3u, 0x1A14DE86u, 0x57082E4Du, 0x974C71F7u, 0x8A57055Eu, \n0xB0A91DDAu, 0x73966F66u, 0xA3B2BAFFu, 0xAEAC5FB8u, 0x582B4193u, 0x32B1D256u, \n0xEE304A9Au, 0x90D5991Du, 0x90225021u, 0x8CEB58A2u, 0xC12DB738u, 0xF437E6A0u, \n0x61DBB629u, 0x566775BAu, 0xF90BC9D6u, 0x3CEFC513u, 0xDE9ED92Fu, 0x49783519u, \n0x3FB8D6C7u, 0xE7C75E4Du, 0x64F8ED29u, 0xAA8E5F95u, 0x43C0E68Bu, 0x8D792992u, \n0x889CBAE6u, 0xAAB063C1u, 0xD9925B54u, 0x0C17C947u, 0xF7A3E0C1u, 0x0992FDBCu, \n0xAFCFAAA4u, 0x8EA7C4E7u, 0xF515B4E3u, 0xDBED695Du, 0xE0A430BAu, 0xF15CD663u, \n0xE5621136u, 0xF5916363u, 0x68E2F463u, 0x03ECA44Au, 0x32278393u, 0x4E4A6BEFu, \n0x52576C28u, 0x9E53E8FAu, 0x87AAB8CAu, 0xE907CE13u, 0xF32B4FF3u, 0x04FF7F27u, \n0xDFA27FAEu, 0xF59B6308u, 0x93B65765u, 0x03219D67u, 0x73B23555u, 0x30B4855Eu, \n0xE1CB0D3Au, 0xB001F4A9u, 0xB71E60B2u, 0x6831D904u, 0xBE1F3FF3u, 0x9D8B081Eu, \n0xDF45CAB0u, 0x3CBDF8C9u, 0x08644C42u, 0x9588B7F7u, 0x2DB779C1u, 0x6CCDF022u, \n0x1432D93Au, 0x2BB2DE71u, 0xA8B478D7u, 0x72D1BD14u, 0xCAC2409Eu, 0x8A42C5CCu, \n0x356727A3u, 0x532DECD6u, 0xC29F1C95u, 0x30F0A970u, 0xB25AD140u, 0x3AEB19D7u, \n0xD009ACC5u, 0xACE558E8u, 0xAB2C5BC3u, 0xA228B84Du, 0x70797217u, 0x8CB070B4u, \n0xAFBE554Fu, 0xF3432FD3u, 0x75C40D4Au, 0xF3E05FFFu, 0x6F807247u, 0x3042A793u, \n0xA649F8F5u, 0xE4C07FE0u, 0xF57B7DC6u, 0xE1A4DD65u, 0xBA3566A2u, 0xEB9238B7u, \n0x75267D6Eu, 0x03D7F184u, 0xE9AD4CF5u, 0x97377E2Bu, 0x3C852915u, 0x305E3384u, \n0x0D500B04u, 0xA5E8AA69u, 0xDDD3BDC5u, 0xA9C17CD4u, 0x701004EFu, 0x0AB28436u, \n0x53EC40BEu, 0x429B1822u, 0x50AD1594u, 0xC685B57Cu, 0xBDC23BA4u, 0xFFFD3B0Du, \n0xCCA3F60Du, 0x08689907u, 0x438CE6BEu, 0x3969670Eu, 0x391F79F2u, 0x589015EAu, \n0x6DA4E125u, 0x29735B23u, 0xECDF1FCAu, 0xFEA0F2C0u, 0x8252A155u, 0x06E7676Bu, \n0x4C52D9B5u, 0x6D6065D0u, 0x42443753u, 0x326738C7u, 0x0F38D518u, 0xBD8EB586u, \n0x06150E18u, 0x8E2AAD3Au, 0x1EF4DE5Bu, 0x59690847u, 0x2F7575EFu, 0x9DA6F257u, \n0x020BCFEFu, 0xFACC69DBu, 0x01F7C039u, 0x1D907F86u, 0x1A9EDABFu, 0xC0DB0B9Au, \n0x0903E4C9u, 0x6CD0C5D6u, 0xB793B855u, 0xD5BA7B0Cu, 0xD416DE22u, 0xEB3AB330u, \n0x0E1492E6u, 0x7416652Cu, 0x3088C7ADu, 0xDBC0A29Bu, 0x23A35B62u, 0x8C2AEA58u, \n0x1992912Bu, 0x9308FF01u, 0x4244B59Eu, 0x74E487B3u, 0x4E7C526Cu, 0xA18D39ECu, \n0x8F08628Du, 0x1DC4735Au, 0xD71726A3u, 0x69E3E4BBu, 0x70BD248Eu, 0x1268B71Au, \n0x2B9CCEA9u, 0xF49B89AFu, 0x56E27BE3u, 0x900B22CAu, 0x090DDCC4u, 0x70F2AE38u, \n0x10FBFC25u, 0x07DE6060u, 0x4985FD04u, 0x2C1E7487u, 0x0D1EE2C2u, 0x01176C8Bu, \n0x94C3270Eu, 0x4610BD47u, 0x5E572622u, 0x43A06239u, 0x267992DBu, 0x0A608666u, \n0x71B31A5Fu, 0x2FD7F9EAu, 0x7077148Du, 0xE23D834Au, 0x9F0472B8u, 0xB382DE60u, \n0x832D17B2u, 0x14529B89u, 0xD50AB497u, 0x08E49FC6u, 0xB73ADDA4u, 0x11281962u, \n0x412AE41Cu, 0xE2D1F9FEu, 0xDD152A80u, 0x87F1D9DEu, 0x951CAE7Eu, 0xF5A581E2u, \n0x47A52BF7u, 0x69EF46DBu, 0xD3662B32u, 0x6B68B741u, 0xE5BC2815u, 0x21F801F3u, \n0xA9CE6FCFu, 0x08FF8E14u, 0xEE8676BAu, 0xDE6E38F7u, 0x14EE0FD4u, 0x66FF2447u, \n0x2AF87774u, 0x29548543u, 0xDF8F6584u, 0xBFF526BEu, 0x3B99960Eu, 0x1591F886u, \n0xAFBC8A9Fu, 0xDF79591Eu, 0x8DDD3B6Fu, 0x19774CBAu, 0xF27BD5E2u, 0xC0D838CCu, \n0x8183D309u, 0x1452AE47u, 0xE9852B19u, 0x29B7BDEBu, 0x3F42AFCFu, 0x97CDD0B7u, \n0x13F6A290u, 0x125F1A4Cu, 0xC482DBFBu, 0xF6ED59B6u, 0xD29822BDu, 0x71C79D99u, \n0x98A35711u, 0xDA4571EEu, 0x3C43C3E4u, 0xA3C77A8Au, 0x4579FA29u, 0x14E4DA59u, \n0xBABF7B49u, 0x073B4650u, 0x2793A4CFu, 0x0A957AD6u, 0x5ACAF4DAu, 0x62D00DAFu, \n0x7F7C7385u, 0x7817361Cu, 0x1DC458A9u, 0x438607FEu, 0xD32B2B92u, 0xFE47432Eu, \n0xF6EEA744u, 0x993B2BE3u, 0x5A115269u, 0x75ACC394u, 0x2343A57Fu, 0xB24597D0u, \n0xD0F88E53u, 0x6BB74783u, 0xB4EFFE1Eu, 0x414449C5u, 0x85CBC785u, 0x0ABB65EFu, \n0x5CBE68DBu, 0x76DD8D01u, 0xB43ABD19u, 0x4CD16D27u, 0x43C8CC3Du, 0x73924E7Bu, \n0x3EF201D3u, 0xADBA2883u, 0x0707555Cu, 0x39EACDB0u, 0xB59A06A9u, 0x66D79AFAu, \n0xFDF102E5u, 0x7B0AC932u, 0xF9B7E88Cu, 0x9AE31B76u, 0x734728E9u, 0x1CC82865u, \n0x8BE12152u, 0x993CCA33u, 0x58375EEAu, 0x00D41D55u, 0xCDEF07FEu, 0xE5F907EFu, \n0x80A6A73Cu, 0x237BBD31u, 0x623977C6u, 0x2F92358Au, 0x23C21723u, 0x17458BB6u, \n0xB09D54DAu, 0x091B2ED3u, 0xB9377B45u, 0x3246AD6Cu, 0x43FABFAFu, 0xEFE5ADD2u, \n0x3C75BE62u, 0xB91F6C7Eu, 0x6FBEA778u, 0xFA39E2B9u, 0xB8EB8B2Eu, 0x19472866u, \n0x19F5BAA3u, 0x64D462AEu, 0x6A61F634u, 0x3980C502u, 0x25BCE3CAu, 0x150A64F6u, \n0x2D629504u, 0x1861B5E8u, 0x0BFFDE40u, 0xFDF3A87Cu, 0x07B56278u, 0x4C663E23u, \n0xAC81DDDAu, 0x2D616E6Au, 0x7123A574u, 0xF368DCD7u, 0xAE9329B4u, 0x746B4C26u, \n0x3DEB17FCu, 0x8A8085BDu, 0x99DAAC07u, 0xE7E4CE47u, 0x5B94EE7Au, 0xB7B90BA3u, \n0x25B66922u, 0x6BD14723u, 0x149A3157u, 0x445D9DFCu, 0x8E2F865Cu, 0x38DE98D7u, \n0x321561AEu, 0xF155AE01u, 0xE085CAB2u, 0xACEC8A6Du, 0x5C0D1CA8u, 0x7E4FA9F1u, \n0xFBA60F4Du, 0xB9FFE3E5u, 0x5CE87FF0u, 0xF681D78Fu, 0x7D7BCD06u, 0xB25D26F2u, \n0xF6075872u, 0xC8D66BBFu, 0xDF78ECF8u, 0x04BBCB0Bu, 0xA567B366u, 0xAA648707u, \n0xDF62CB1Cu, 0x88E01D11u, 0x2FE6351Eu, 0x19C6B349u, 0x99F682A7u, 0xF2162F0Fu, \n0x183531BEu, 0x99C64839u, 0x523F4CFCu, 0x31325D1Bu, 0x12D01ACAu, 0x25C37A1Du, \n0xD81C9F41u, 0x382982E6u, 0xC94F5EC3u, 0x14E88D23u, 0x9826A4F5u, 0xDA81AFD5u, \n0x100E756Bu, 0x81514B43u, 0x35D9EF9Du, 0x51DA7FF6u, 0x95700B55u, 0x8441E3E7u, \n0xF0FDC58Fu, 0xF579A8CEu, 0xFDC683A2u, 0xFA11F6A6u, 0xD43489ACu, 0xACAF2D26u, \n0x12916097u, 0x8327B702u, 0x50BAC0BBu, 0x9EA852C1u, 0xA2F9B20Eu, 0x89B6917Au, \n0x3189B9DFu, 0x2B088E0Au, 0x3DE8A0E6u, 0xBBEF985Fu, 0x61980919u, 0xC79DA462u, \n0x4A673EA6u, 0x4E07D10Fu, 0x021428A9u, 0x22682056u, 0xFC506071u, 0x35E417B8u, \n0x1FA73A7Cu, 0x3E2CE3C9u, 0xC750BEE0u, 0xC6892BA6u, 0xCD68CD6Eu, 0xDEEDB74Du, \n0x4EFF463Du, 0xBB340395u, 0x0C064743u, 0xA704C285u, 0x827E58CAu, 0xDF56C007u, \n0xCBF9EFB0u, 0x3594C865u, 0xCD41F291u, 0x7742CDA4u, 0x8637DEB8u, 0x22A89680u, \n0x8B996170u, 0x69B0E244u, 0x0A6C80A2u, 0x5D7F21E3u, 0xF2A0FF5Au, 0xAFC4369Au, \n0x9995D303u, 0x43692418u, 0x852D7748u, 0x94F62D44u, 0xC4024C94u, 0x36B4DD36u, \n0x17ACA465u, 0xAAED1603u, 0x925BA7DDu, 0xB62FC75Eu, 0xC365A42Du, 0xA7730F80u, \n0x0557A809u, 0x5EEBF23Du, 0x8DE02AC1u, 0x0A8D61AEu, 0xC0565885u, 0x48907F8Bu, \n0x20CEC32Eu, 0x8ABCD47Bu, 0xD63690BBu, 0x9E26A759u, 0x6680F2F1u, 0xF2B20329u, \n0x45F123BAu, 0x8ADEBECDu, 0x44D7F3F7u, 0xC8ABBDFAu, 0x6F5448E4u, 0xE3E734B2u, \n0xE1177726u, 0xB50240CBu, 0x24B76D2Cu, 0xDFB6FACBu, 0xE52C44C1u, 0xFCEDF336u, \n0x3862853Bu, 0x90803C1Au, 0x729FCA03u, 0xFAED3EF0u, 0x0DA8C64Cu, 0xDAEC94D3u, \n0xA0DA48A1u, 0xA454F7FCu, 0xFA61D68Au, 0x948B6F36u, 0xE2C97B4Du, 0x44D6A2B0u, \n0x5D5BD6E6u, 0xE68302D6u, 0x6603EC0Bu, 0xAFA870C0u, 0x09AC2CEBu, 0x6EFEA63Bu, \n0x726B647Cu, 0xAE289B74u, 0x9B2A74F6u, 0x2C12728Bu, 0x19DECEC7u, 0x9470B575u, \n0x1D2EAE6Au, 0xDD406590u, 0x785491BEu, 0xFC5719BDu, 0x708397E2u, 0x44C818A0u, \n0xCCFEF101u, 0xD50D797Eu, 0x55CBB600u, 0xB492E628u, 0xE732616Du, 0xBF8E2BA4u, \n0xD985DB99u, 0x64A2CEDAu, 0xDD70D574u, 0x6B3BEE15u, 0x0A017753u, 0x92EAE677u, \n0x6FA904D5u, 0xF3492A67u, 0x5699CE0Fu, 0xEF7D7F4Eu, 0x231F6EA6u, 0x4E739228u, \n0x6D727BC3u, 0x5DE4C910u, 0xCB2276D2u, 0xECA318BFu, 0xBA5A06AEu, 0x32B63EE8u, \n0xFA2E6EB2u, 0x11789138u, 0x85375024u, 0xFC2FF3BAu, 0x1C711426u, 0x5DBF31A0u, \n0xAAF04CE6u, 0xFC840946u, 0xD664A98Cu, 0xD9D2297Du, 0x6C5BCE73u, 0xD18E967Cu, \n0xC70BADDEu, 0x31A6E94Bu, 0x11B3563Du, 0x05B4255Du, 0x5F4D5549u, 0x7462355Eu, \n0xB793F248u, 0x250D26F1u, 0x11EB8559u, 0x4FEAF86Au, 0x78072393u, 0xC1042442u, \n0xC1774B09u, 0xDF30E4C6u, 0x8B0D7D8Cu, 0x6646D2C5u, 0x81AF6D61u, 0x723AD5A5u, \n0xE3390B82u, 0x4FA95CE7u, 0xDCD24639u, 0x84995442u, 0xA82F1359u, 0xEF2B1D07u, \n0x4C6DEDC9u, 0xE3307444u, 0x8D3267B1u, 0x4AFECD70u, 0x4B796174u, 0x14D54817u, \n0xF8B66D0Au, 0x7D0FD812u, 0x6734C508u, 0x47AE0825u, 0x11094AE8u, 0x6621A299u, \n0xD298B2F7u, 0xDD242968u, 0x07EC0BE1u, 0x190ED0B6u, 0x27885204u, 0x1D86724Du, \n0xC60E02F1u, 0xF827ACDAu, 0xE2D5703Eu, 0x0C4893DFu, 0x2454458Au, 0xB2936CD2u, \n0x664B649Au, 0x789700B4u, 0x0AE9CAF4u, 0xE68A9BA4u, 0x1B0F1155u, 0x01798505u, \n0x9860DA42u, 0x6DFA7F88u, 0x87F0FB89u, 0x94F844BAu, 0x827021FFu, 0x085CFFADu, \n0x409FE90Cu, 0xD13196C2u, 0x2FA03E35u, 0x8DD4F6ACu, 0x31443332u, 0xBE50CF54u, \n0x31696CB6u, 0x56A40DACu, 0x3454C668u, 0x848986BFu, 0x69000000u); // array len 893\n\nuint map_uint_1[] = uint[](\n0xBE7E0529u, 0x915CB6FFu, 0xAB94ABE2u, 0x3F70AA3Du, 0xAFCBE48Au, 0xC7944F9Cu, \n0x5F7E574Cu, 0x03460853u, 0x2AF5D635u, 0x2421672Eu, 0xE215C124u, 0xB03A3302u, \n0x79EEEA8Au, 0x49679067u, 0xFA3E11D1u, 0x5F77C845u, 0x38B48E62u, 0x2C002A61u, \n0x12F00804u, 0x40FD4C90u, 0x02818096u, 0x065E369Bu, 0x5BB37BD7u, 0x328A5999u, \n0x45898BE6u, 0xE0064820u, 0x35EA3472u, 0x5AC68D8Eu, 0x02EFD1B0u, 0xB58D3BEEu, \n0x964BC917u, 0xFE4F9FBFu, 0xFD5A0042u, 0x5AF310D0u, 0x61992093u, 0x1EF74181u, \n0xF7EE223Eu, 0xFEC13503u, 0xF44227D4u, 0xEA6F6E92u, 0x1A89EEDBu, 0xB8C3A1C1u, \n0xD735C352u, 0xED12AE28u, 0x27259E62u, 0x1995947Fu, 0x7AFBBD98u, 0x8189188Fu, \n0xB214D455u, 0x9F70F8F2u, 0x5F7ACA71u, 0x8106FD0Au, 0x11679CB1u, 0xD2E97A7Bu, \n0x646FB9C9u, 0x1695874Bu, 0x356DBBBEu, 0x2BAD5BF6u, 0x2D34494Eu, 0x5D373491u, \n0x34999877u, 0x90BFF400u, 0xD80FDC1Eu, 0x922F3079u, 0xACB7C0A5u, 0xAA41CBD7u, \n0x5C5390FCu, 0xE6270CD9u, 0x40A4367Bu, 0x0DEC9040u, 0x26A88415u, 0x25DA7607u, \n0x25651E30u, 0x5DB1D766u, 0xA4C732C3u, 0x651A41C2u, 0x8254CCD7u, 0x2CDE0A47u, \n0x78FB19A9u, 0x5DBE6752u, 0x42FB27B6u, 0x7CA844BAu, 0xF34C17DEu, 0x47048EDDu, \n0x5B3C6D88u, 0xFE379FBBu, 0x0B3C0835u, 0xACA14A86u, 0xBE6CB1A4u, 0xF6746DF5u, \n0x3787C2ABu, 0x6E5049A4u, 0x26BB4C36u, 0xAF668443u, 0xC840154Cu, 0x04D6BFE0u, \n0x78789D22u, 0x58C2AA8Du, 0xBCF313E1u, 0xF367E200u, 0x4B96A4F4u, 0x1C426734u, \n0xF8A7F4E3u, 0xDEC4FEE7u, 0xA0316641u, 0x28EC8978u, 0x8DF25B0Au, 0x670A48B6u, \n0x5D259DEAu, 0xCC5EC210u, 0x6A03E818u, 0xB9DE5DABu, 0xADEBB9C3u, 0x10A9F5DEu, \n0xF2143BA2u, 0x83E89A74u, 0x42F26F31u, 0x75FD0AF1u, 0x27028853u, 0x3B60FB5Eu, \n0xBF4FF53Bu, 0x82D3B535u, 0xFCFBA865u, 0xDAB9353Cu, 0xB44B84DBu, 0xF2BD59C9u, \n0xCA6DBC63u, 0x41365602u, 0x0E581690u, 0x53585F56u, 0xC48DF549u, 0xC25EDFF9u, \n0x2502B382u, 0x3903982Bu, 0xE78792B8u, 0x9809B82Eu, 0xDB19AE68u, 0xB6831E28u, \n0x7D68EE24u, 0x14894CABu, 0x075DCACCu, 0x4E2E35FFu, 0x565AB0C9u, 0xC958BB1Du, \n0x57C05030u, 0x67C15519u, 0xAC7EAD06u, 0x2D6405B4u, 0xA2CBF774u, 0xE80A97B4u, \n0x8510E101u, 0x138C3B17u, 0xD8D5C07Du, 0xEFDF451Fu, 0x05B6AD2Fu, 0x03FE1067u, \n0xAA957E36u, 0xC1C11D06u, 0x3B803C72u, 0x568BEDD8u, 0x9E09DAB3u, 0x30FF6B88u, \n0x17327BF5u, 0x104852F9u, 0xB22E6314u, 0x61A4FB4Bu, 0xCC332E2Au, 0xBD36585Fu, \n0xE14316FEu, 0x557244D5u, 0x223DFD06u, 0x257FB8CEu, 0x91E793C1u, 0x325EF098u, \n0x280FA50Au, 0x043DE05Fu, 0x39BB6EAEu, 0xEF365599u, 0x0D59636Du, 0x211EE523u, \n0x3B5885F5u, 0xFB079544u, 0xC8174C6Cu, 0x2C6284B2u, 0x174A54C6u, 0x497D1121u, \n0x14D5581Cu, 0x1F9A0BDBu, 0x6A76140Du, 0x9F238723u, 0xE3452D25u, 0x4C0358BDu, \n0x32E32CEFu, 0xD89B568Cu, 0xC9F021EFu, 0xC57510BAu, 0x99DB48CCu, 0xC5A0DB06u, \n0x66B6C47Au, 0x60E4CC3Bu, 0x1BB18CE5u, 0x2AD0C352u, 0x0791C562u, 0x718A9D2Du, \n0x1BF62168u, 0xA7DB831Eu, 0x07D57E00u, 0x87D0EBC4u, 0x306B36F7u, 0x21B4F81Fu, \n0x2403BB18u, 0x69A3034Bu, 0x1418B325u, 0xF8DB8AAFu, 0x36BD3C53u, 0x8D9473A7u, \n0x7C8191FBu, 0xAC658E39u, 0x36D1A4E1u, 0xF24729ACu, 0x212D2D05u, 0x754BAB6Fu, \n0x2760C0E5u, 0x3BBA8920u, 0xBD9F968Bu, 0xBA1ECDF8u, 0x0993FEE5u, 0x0744AC46u, \n0xC8C17EDDu, 0x86778764u, 0xB683233Au, 0xAED6FBF7u, 0x17B79288u, 0x6CB258ACu, \n0x62A96FD3u, 0xCD156BB2u, 0xAC09547Eu, 0x740DDDB2u, 0xA6BFAFEBu, 0xB92A0CE8u, \n0x877236DEu, 0x4D971C3Eu, 0xE7FA12F7u, 0x34AC6720u, 0xC01A19CDu, 0x90695D99u, \n0x86D1523Cu, 0x8A9ED852u, 0x1F8A8582u, 0xF60E11FFu, 0xEE32EDA0u, 0x9726D756u, \n0x6D15C771u, 0xDAEB79D8u, 0xEC34EB11u, 0xEE1908A6u, 0x8555A4CEu, 0x98ABF2AFu, \n0x6332FCE5u, 0xD7189105u, 0x88E09162u, 0x2EC8EB44u, 0x76E826C8u, 0x00D66BEAu, \n0xFCCF4E52u, 0x903C4D34u, 0xB790D50Eu, 0x2D0DC68Au, 0xA52C711Bu, 0x7F1D5968u, \n0x2566F8A1u, 0x674588EDu, 0xC64A33C8u, 0x204F6C7Bu, 0xDCD7938Eu, 0x2A7C2158u, \n0x09C3A8EBu, 0xA69AC1BDu, 0x262D2C21u, 0x6D3C0FCDu, 0x8A240EEBu, 0x3E64EB74u, \n0xB9238C17u, 0x46CF7491u, 0x2F742A40u, 0xAEDE0317u, 0x3E408072u, 0xE19C3FDBu, \n0xB8111DE4u, 0x71E6D1E7u, 0x69FFB052u, 0x2B903302u, 0x7A820F36u, 0x9ECEC452u, \n0x718A7918u, 0x786D41F6u, 0x5B585F28u, 0xB973B0F6u, 0x03CE46EDu, 0xF4DDA508u, \n0x1088853Du, 0xEAC29331u, 0x04B85890u, 0x4F44D7F4u, 0xC7B2EA81u, 0x3F0E4541u, \n0x47EFB818u, 0x4CDEF203u, 0xF4DF49B0u, 0x66835A29u, 0x961B0501u, 0xE0223923u, \n0x914C3861u, 0xD9480E2Cu, 0x1D886F67u, 0xA7490479u, 0x4347A189u, 0x5B36B00Cu, \n0xBF404F7Cu, 0x3E2B1483u, 0xB894FE80u, 0x240A3554u, 0x6FD3D71Eu, 0xED975687u, \n0x878BAE9Bu, 0xDFC0B439u, 0x4F4128FBu, 0xBA6FB867u, 0xC5FC8C3Du, 0xFB62F9C7u, \n0x0FF841F3u, 0x2774CC7Eu, 0x841F6AB6u, 0x82720607u, 0xD0393CEDu, 0xD26A387Cu, \n0xB1B69FCCu, 0x53548917u, 0xD0A26CA5u, 0xDDD4230Fu, 0xDB6DD5F8u, 0x830B674Fu, \n0x693DF779u, 0xB921F151u, 0xA88ECA1Fu, 0xF55F183Eu, 0x9099C6C4u, 0x8F612928u, \n0xDAACDD0Cu, 0x9D267679u, 0xB3D7FB29u, 0x51E9C03Du, 0x75E2306Du, 0x86C85A1Cu, \n0x46F384AEu, 0x1EE4C86Au, 0x27AC3062u, 0x3FE087C4u, 0x53CF4055u, 0x1C0D6EF6u, \n0xE77A6C90u, 0xB37D3EABu, 0x5957DACAu, 0x40310BC2u, 0x6A8890AFu, 0x9BEF976Cu, \n0x04A16DC7u, 0x8E88FCCAu, 0x6D5F1F3Du, 0xAC7B3599u, 0x8057CE6Au, 0x10A1553Bu, \n0x98A7FC15u, 0x82FF2F04u, 0x9C0D3FB7u, 0x15580288u, 0xE9A3252Au, 0x9B7E9B21u, \n0x8A52D05Cu, 0x72CB098Du, 0x64DC3DC6u, 0x283C4128u, 0x04DFABA8u, 0xC14A5D1Bu, \n0x4E3A4D34u, 0xADE63644u, 0x39889AB2u, 0x4854A514u, 0xC43D14CCu, 0x30BE2E76u, \n0xFEDB706Cu, 0x8A05797Fu, 0x0E2B02A2u, 0x63DE81D8u, 0xE7D8B93Bu, 0x08C61291u, \n0x5ECC7522u, 0x1D0E0957u, 0x32C6EB2Eu, 0xC2EEBC4Au, 0x29A086B2u, 0xC4756A03u, \n0xDC753D2Eu, 0xA26EF886u, 0x987CF4ECu, 0x9B3EC0AEu, 0x178FB7B1u, 0x996EC7EAu, \n0x37D456FEu, 0xDB7D0FE3u, 0x82B1BE2Eu, 0xFD1E77C1u, 0xC0EF79E6u, 0xCA0F23A3u, \n0x699DCEF2u, 0x2D0C3A52u, 0x98360953u, 0xCE64FF04u, 0x6D45D53Cu, 0x96A1C050u, \n0x5BF6E359u, 0xBA8C203Du, 0x7F2FA8CEu, 0xB21BD616u, 0x8E1B0481u, 0x389C3AA4u, \n0x1699E388u, 0xC8E7C4F6u, 0xAC1EB83Eu, 0x4EDC5771u, 0x55EEA857u, 0x46E06B02u, \n0x8688CCC5u, 0xE4F419BCu, 0x3D7F58E2u, 0x80DCC9C8u, 0x60E95208u, 0x1E706089u, \n0x98A5EF1Cu, 0x1C3C0A87u, 0xF1F027A2u, 0x5B994E93u, 0x6DA31917u, 0x16CF1B6Au, \n0x5D8303EFu, 0x5A353F20u, 0x3E7A546Au, 0xFEAB1585u, 0xA8C728C7u, 0x2AF2D774u, \n0xA621983Eu, 0x2698449Eu, 0xFEDE77EAu, 0x7A44FEF6u, 0x0DFCC178u, 0x26BC3D57u, \n0x87C4A9B2u, 0x0CCC11D1u, 0xB234EF07u, 0xF9EBFE06u, 0xB5FA295Bu, 0x9B296734u, \n0x1C9237BFu, 0x41880FF1u, 0xFA6BEC0Au, 0x1E7E2470u, 0x4C1F45ECu, 0xA69D796Eu, \n0xF6502430u, 0xB034ADD1u, 0x460A933Bu, 0x496D55F7u, 0x9F157177u, 0xB060A915u, \n0xC3689B88u, 0x11292DA6u, 0x77EF1B94u, 0xE7A450C1u, 0x7B95FC9Du, 0xC8EED25Bu, \n0x29B17E98u, 0xC9065FCAu, 0x444CB3AFu, 0xBE1CF731u, 0x00B44196u, 0xC7D90F1Au, \n0xB7BF404Du, 0x9BF79A07u, 0xD27960E8u, 0x8C81728Cu, 0x82D86393u, 0x7B31D6B5u, \n0xAF617E8Du, 0xA25691FDu, 0xFAA8B3BDu, 0xFA89B036u, 0x117B9FDFu, 0xB02A42FAu, \n0xA3C9D4B1u, 0xE39826B0u, 0xAA8A6477u, 0x952AA341u, 0x1F25E3D9u, 0xBB7EC736u, \n0x76BFF8A9u, 0x592D8996u, 0x654B49C2u, 0x885C7EB6u, 0xACFC80D5u, 0xDB244CABu, \n0x5FC76470u, 0xA1CD9B5Fu, 0x0496E29Fu, 0x8622ECB0u, 0x6D811639u, 0x4508EC50u, \n0xBA394D05u, 0xF7A48AB5u, 0x79F72A3Du, 0x39081285u, 0xA83D254Fu, 0xF982C154u, \n0xE7F80FDCu, 0x121AF18Cu, 0x16D3A296u, 0x296F77DFu, 0xEE3F1632u, 0xBAADCA02u, \n0x99B0D5FBu, 0x9D50F79Au, 0x88F800FEu, 0x2A47405Cu, 0x75523364u, 0x7A436BC9u, \n0xEDB0EA7Cu, 0x3597931Bu, 0xD094101Au, 0xBD3B0912u, 0x2B0B4CC8u, 0x10723E72u, \n0x6CB9E281u, 0x4AE5E554u, 0xAEF204F6u, 0x2B42F670u, 0xD108ADA1u, 0xB462F0A4u, \n0x12520C6Eu, 0x881F68FDu, 0x62515D29u, 0x1765C618u, 0x1F4F6D1Cu, 0x972C6A23u, \n0xC2A613CFu, 0x9521FCA4u, 0x61ADD9DDu, 0x2557C672u, 0xA042D44Bu, 0xC53B0887u, \n0xDDF8CAEAu, 0x711F3A87u, 0x45554386u, 0x79F22587u, 0x8577792Eu, 0x7BA982EBu, \n0xA6117DC6u, 0x6BDC3889u, 0x963EBBB6u, 0xBD7C7874u, 0x76E5BA87u, 0x2FDEEE9Eu, \n0x5D11EDB8u, 0x345E7FA8u, 0x5F10D7C0u, 0x9A18B69Du, 0x45803FCBu, 0xE7F478B8u, \n0x8B9907B4u, 0xB56ED6B8u, 0x67BCCEB0u, 0xE512681Au, 0xB57461D9u, 0x6DFE69E6u, \n0x7102544Au, 0x4633AF49u, 0x5D246636u, 0xAE85EAB8u, 0x5354FF0Au, 0xE53EB289u, \n0x6EEACDFFu, 0x9FD51C5Au, 0xBCABE3C4u, 0xF38F1136u, 0x44DB9BE0u, 0x22E77F69u, \n0xD7894DCEu, 0xDC6DDB19u, 0x238259CDu, 0xDBBE9DD6u, 0xFB1137E8u, 0x4EE08A3Fu, \n0xEF908B2Bu, 0x4755E0BAu, 0x745BD718u, 0x18092884u, 0x629E1EF0u, 0x8F73C162u, \n0x05551A04u, 0x125B83ABu, 0x8104D9AAu, 0xF7DCDE30u, 0x368BE959u, 0xB98AB758u, \n0xC8C3CD6Fu, 0xCE6EC67Du, 0x56C4CA3Fu, 0x343D2B4Eu, 0xC68E3611u, 0x9448AF01u, \n0x2BAFD6A6u, 0x291C9EBDu, 0x9EAFDE97u, 0x5E8155F4u, 0x87176567u, 0x103F9CFCu, \n0xF638554Fu, 0xBFCB732Du, 0x37057633u, 0x8CE1121Cu, 0xDB979774u, 0x187134E1u, \n0x9695B372u, 0xEC6C1C67u, 0x3CEDF153u, 0xD8475FD1u, 0xDC71F364u, 0x08DE9E9Au, \n0xD2B82F40u, 0x391C9F59u, 0x1F305CE6u, 0xA904E691u, 0x6DE3EF25u, 0x36ECB2E0u, \n0xA1482436u, 0x5B438107u, 0x13DF8D4Au, 0x2D32FBC3u, 0x6FE981FDu, 0x57D295C9u, \n0x51890C44u, 0xFB847703u, 0x3D5F1F5Fu, 0x0ECC6E2Du, 0xB76008ABu, 0xB7A9C4F4u, \n0xF53DBD29u, 0x7A36D86Du, 0xB4A80663u, 0xAE8530EAu, 0x81B43934u, 0xBE5CD497u, \n0x5F5EE221u, 0x1D6B9915u, 0x6EAA4000u); // array len 663\n\nuint map_map_uint_0[] = uint[](\n0xA1134422u, 0x26355613u, 0x21446222u, 0x97565443u, 0x65751534u, 0x54634563u, \n0x76674274u, 0x22555313u, 0x15087144u, 0x36315356u, 0x48695473u, 0x58346764u, \n0x18267543u, 0x63314246u, 0x34695587u, 0x9B6236A6u, 0x43213267u, 0x42364155u, \n0x43431261u, 0x32455433u, 0x44242624u, 0xB1043312u, 0x51144624u, 0x08772464u, \n0x32323524u, 0x53134223u, 0x13411125u, 0x25562842u, 0x53232522u, 0x12443432u, \n0x55207345u, 0x14453544u, 0x43555244u, 0x34524449u, 0x53583424u, 0x55468225u, \n0x24165395u, 0x8652564Au, 0x85292654u, 0x87335467u, 0x33163332u, 0x95356585u, \n0x26362552u, 0x43262154u, 0x92412252u, 0x64422353u, 0x45536666u, 0x56132243u, \n0x53324338u, 0x45442991u, 0x32443444u, 0x44669223u, 0x63286552u, 0x67745933u, \n0x5522B342u, 0x44556767u, 0x25074345u, 0x69332365u, 0x575A6464u, 0x45736753u, \n0x1A1B5246u, 0x55508276u, 0x56275267u, 0x86418637u, 0x43422142u, 0x21031213u, \n0x45551562u, 0x21253423u, 0x50911122u, 0x35452453u, 0x32351314u, 0x23544042u, \n0x26216645u, 0x22362530u, 0x31243224u, 0x44265423u, 0x63420431u, 0x43433131u, \n0x42412723u, 0x23335332u, 0x43443361u, 0x16924668u, 0x47633624u, 0x85451571u, \n0x65443134u, 0x35734232u, 0x44534444u, 0x94014171u, 0x21457215u, 0x4533A562u, \n0x45476645u, 0x37277469u, 0x05296324u, 0x66314486u, 0x66584567u, 0x38484A23u, \n0x33441412u, 0x41232243u, 0x21602616u, 0x23323321u, 0x92322324u, 0x43554030u, \n0x53244202u, 0x55364A55u, 0x25206711u, 0x05268473u, 0x34324533u, 0x35236542u, \n0x13444244u, 0x52352452u, 0x95372323u, 0x83444561u, 0x223A4643u, 0x21235546u, \n0x6635144Au, 0x56614748u, 0x55262334u, 0x52225423u, 0x74584547u, 0x03424954u, \n0x27030535u, 0x23241044u, 0x43342232u, 0x32683223u, 0x54445445u, 0x12223702u, \n0x66684446u, 0x16644574u); // array len 128\n\nuint map_map_uint_1[] = uint[](\n0x44424453u, 0x62922737u, 0x52913222u, 0x94785485u, 0x5A455336u, 0x01733145u, \n0x47455515u, 0x96813246u, 0x43852B69u, 0x32767834u, 0x44522612u, 0x34547428u, \n0x73539762u, 0x7C534524u, 0x41679444u, 0x35546463u, 0x71324422u, 0x24253543u, \n0x33315223u, 0x31111535u, 0x32365432u, 0x21221612u, 0x00204025u, 0x24322153u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x52177577u, 0x55655557u, 0x52410654u, 0x3234E47Bu, \n0x65922555u, 0x18646534u, 0x44523777u, 0x45576743u, 0x12032102u, 0x42442413u, \n0x25154342u, 0x23414233u, 0x03132120u, 0x31324420u, 0x20314122u, 0x11411333u, \n0x254A5256u, 0x32333263u, 0x28673722u, 0x52453344u, 0x48496534u, 0x66382274u, \n0x55363523u, 0x44333445u, 0x7762484Bu, 0x546A8877u, 0x33555A37u, 0x73483303u, \n0x62665586u, 0x26987585u, 0x44173245u, 0x26353492u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x34021121u, 0x23541312u, 0x21112522u, 0x43431224u, \n0x31222442u, 0x41342211u, 0x22013222u, 0x30221234u, 0x5783571Au, 0x51486916u, \n0x32322253u, 0x04588047u, 0x57917355u, 0x34687635u, 0x64603355u, 0x62743255u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x41172441u, 0x32141433u, 0x44352161u, 0x03530215u, \n0x54544432u, 0x13341114u, 0x30146223u, 0x42325107u, 0x31176328u, 0x44374656u, \n0x36457666u, 0x76745565u, 0x2121A248u, 0x53244436u, 0x49546654u, 0x85753343u, \n0x42304486u, 0x39644346u, 0x82913333u, 0x06127636u, 0x52575436u, 0x45426316u, \n0x53626944u, 0x24256533u); // array len 128\n\n\n#define self_buf iChannel0\n#define map1 map_uint_0\n#define map2 map_uint_1\n\n#define mapmap1 map_map_uint_0\n#define mapmap2 map_map_uint_1\nconst ivec2 mapmap_reg = ivec2(0,34);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx==ivec2(32,32)){\n        fragColor = vec4(1.,map1.length(),map2.length(),0.);\n        return;\n    }\n    \n    if(ipx.x>=32||ipx.y>=32){\n        if(ipx.y!=mapmap_reg.y||((ipx.y==mapmap_reg.y)&&ipx.x>=mapmap1.length())){\n            fragColor = vec4(0.,0.,0.,0.);\n            return;\n        }\n    }\n    \n    bool reset = texelFetch(self_buf, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(self_buf, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    if((ipx.y==mapmap_reg.y)&&ipx.x<mapmap1.length()){\n        fragColor = vec4(0.);\n        fragColor.x = uintBitsToFloat(mapmap1[ipx.x]);\n        fragColor.y = uintBitsToFloat(mapmap2[ipx.x]);\n    }else{\n        int idx_x = ipx.x+ipx.y*int(32);\n        fragColor = vec4(0.);\n        if(idx_x<map1.length())\n            fragColor.x = uintBitsToFloat(map1[idx_x]);\n        if(idx_x<map2.length())\n            fragColor.y = uintBitsToFloat(map2[idx_x]);\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// map of connections 3 and 4\n\nuint map_uint_2[] = uint[](\n0x0ED5EB74u, 0xDBBE07BCu, 0x4D9F83CAu, 0xA7A74123u, 0x962FD195u, 0xCB59E622u, \n0x18917DF0u, 0xDFF2E495u, 0x7C48EC96u, 0x2F724990u, 0xFC844A0Du, 0x314307D6u, \n0x8D7E1171u, 0xBAE626CAu, 0x7FB58384u, 0x0F016D15u, 0x83FD5A77u, 0xCF08FA99u, \n0x1E9292C1u, 0x8162B90Du, 0xBD2C4CF6u, 0x728D305Au, 0x9879F1D2u, 0x1271AB49u, \n0xADD607DDu, 0xB1A0ACDEu, 0x156076EAu, 0x260834F9u, 0x06F28783u, 0x14B3C7EBu, \n0xFAF607E7u, 0xFEDC7F79u, 0x6A745F33u, 0xCFCBDE5Au, 0xC2F0DB91u, 0xECB3091Cu, \n0xC15B21B5u, 0x3A3571D6u, 0x0AA99DA6u, 0x5BA0BD2Bu, 0x86D7E5A4u, 0x66F5D497u, \n0xFEF2FFDAu, 0x1C26B338u, 0x9CF4A641u, 0xA4D7EA1Fu, 0xEE231F25u, 0x1005353Cu, \n0x08FBCF5Eu, 0x5A7EF9C1u, 0xF4B11584u, 0x86C9B0C8u, 0xCC9B6C90u, 0xDF996DB1u, \n0xC5475FB2u, 0x32BF5FB3u, 0xC739D43Du, 0xD06D9786u, 0xD924688Eu, 0xDBEB0AFEu, \n0xEB2F33A2u, 0x3ADC3642u, 0x0C17312Au, 0xD19CFC8Bu, 0x0F102F80u, 0x7987D5BCu, \n0xEE919CE7u, 0xC996304Au, 0x391DE8C8u, 0x682940D4u, 0xD3D2CF1Fu, 0x7E71B935u, \n0x0E64D6A3u, 0x023982EAu, 0x2D934E5Du, 0x99971ABBu, 0x080C2C32u, 0x102D8B91u, \n0xCD48728Fu, 0x7EE3D3BFu, 0xEC283963u, 0xEA2EAB5Fu, 0x729B74F1u, 0xDB123737u, \n0x2F6A4D98u, 0x61B18669u, 0x9858C99Du, 0xDD5AB601u, 0xA938188Fu, 0x7F9624BDu, \n0x6233318Eu, 0x290DD86Du, 0xA807CD6Au, 0x756EAE03u, 0xE09B0DACu, 0x01E04B45u, \n0x6F903D42u, 0x0044EFDCu, 0x37E5CB11u, 0x23389AC3u, 0x584D4893u, 0x0DCC0BEEu, \n0x886DCE52u, 0x004EB468u, 0x3C727CD9u, 0x96D14B93u, 0x530CF963u, 0xC7651ED6u, \n0x40C66F2Bu, 0xF40FA4C8u, 0x514D1B63u, 0x8273E073u, 0xF962ED06u, 0x6A83CF7Au, \n0xE29BF9BAu, 0xAEBFFC67u, 0xA145C24Bu, 0x3A0D465Bu, 0x498C6DD4u, 0x6E16D57Fu, \n0x4AC3415Cu, 0xD606844Eu, 0x37EE3604u, 0xD311797Au, 0x041CDD75u, 0xB8944289u, \n0x970F67A8u, 0xC2A17031u, 0x9EFF3AE1u, 0x55C2012Bu, 0xE1C95A3Eu, 0xCA9A4F02u, \n0xD41F2910u, 0x67182D1Cu, 0xD8576E4Au, 0x500D1ACDu, 0xB3315BD5u, 0x38769990u, \n0xA54D9736u, 0xC6E427FEu, 0xBD367A21u, 0xC856C2D1u, 0x1D9AF7BCu, 0xBEDF9E8Bu, \n0x68A3DE3Au, 0xE7514256u, 0xCA8AD70Eu, 0x74528D9Eu, 0xF580B40Bu, 0xDF6C7D4Bu, \n0xC5064DEFu, 0xB015297Bu, 0x977F89E1u, 0xF808A6D2u, 0x29276EA2u, 0x483AD0A6u, \n0x9EF3390Fu, 0xA1505F20u, 0x87F1EAA3u, 0x92B00246u, 0x86667A2Bu, 0x96B9D56Au, \n0x986DDA75u, 0x1FEBD52Eu, 0x774476DAu, 0x1B6E3B10u, 0xFB414293u, 0xC3D63AFDu, \n0xC8EA8E02u, 0x67946AC4u, 0x42FB241Au, 0x88600FE0u, 0xF7DD155Du, 0xD68D45A5u, \n0x12304D66u, 0xF50CD81Du, 0xC6621E2Au, 0x43BF1C86u, 0x9344CD69u, 0x099479A0u, \n0x58BF4EA2u, 0x38500F8Du, 0xABF83C74u, 0x48115922u, 0xC4DC1E94u, 0xFE852DB8u, \n0xA4C0317Bu, 0x873A80E5u, 0x8BCD4522u, 0x8A151138u, 0x04D96D54u, 0xC8E3D397u, \n0xB03B53B8u, 0x30974B07u, 0x1B9252CBu, 0x7E346641u, 0x1F827263u, 0x4FF87E0Fu, \n0xA29EA7C9u, 0xC7DDF85Cu, 0xB6613D94u, 0xCB74502Eu, 0x9A2B23DDu, 0xF9C20524u, \n0x484D9968u, 0x0489A2BBu, 0x7DD0613Eu, 0x402667CCu, 0x725E3EE6u, 0x09F7B6F5u, \n0x8F81BF45u, 0x22EBC319u, 0x3BC91A76u, 0x1AF814A2u, 0x1757431Du, 0xAEE88EDCu, \n0x5E81B678u, 0xE50369E9u, 0xA8F8D413u, 0xAF40A91Bu, 0x53C27BC3u, 0x448F941Fu, \n0xBCDF48C3u, 0x261626B5u, 0x14426B2Au, 0xA55E7E3Eu, 0x3E0E3F53u, 0xBB576EBBu, \n0xA4198942u, 0x2E6365D3u, 0x9126BD2Bu, 0x4136279Cu, 0x62FB7A5Cu, 0x2DB814DDu, \n0xB1D5DA7Du, 0x8484FF45u, 0x3DBC3747u, 0xC41493E5u, 0xB6948D70u, 0x2E64FA95u, \n0xFEC35BF8u, 0xA1622A76u, 0x00A84625u, 0x277E2080u, 0x7E7B6390u, 0xB0D5E2D5u, \n0x52FA1992u, 0xDD48428Du, 0x0BD9EF59u, 0xB979DE78u, 0xA3564670u, 0x598CDC53u, \n0x630661B9u, 0xCDC74B29u, 0xAEBCC765u, 0xBDCDF1B6u, 0xFD5269E3u, 0xFF314FC1u, \n0x21C53701u, 0xB02807DBu, 0xD7A6FD60u, 0x3F13C7CEu, 0x002890F9u, 0xE5A69ACBu, \n0x63CBE8CCu, 0xE983BD94u, 0xEF87C813u, 0x7935BAF4u, 0xE5E250B6u, 0x61C1F38Eu, \n0x4A4B5B3Eu, 0x8F3EF639u, 0xF384299Eu, 0xC306B792u, 0xE04725CAu, 0xF13D01B2u, \n0xAAD23E0Au, 0xACACE1E6u, 0xBD45C145u, 0xC4E2A9C8u, 0x7A70AA77u, 0x19F68BA9u, \n0xEDD8929Du, 0xB597D36Fu, 0xD99428E5u, 0x9917E598u, 0xFC41E5B9u, 0x4339DC9Fu, \n0x20F36334u, 0xDB614DF2u, 0xBF07DA3Cu, 0xE5D5B828u, 0x7EA7F574u, 0x916B3A8Du, \n0x44415023u, 0xFD6A9D81u, 0x21F8FC47u, 0x086FBED6u, 0x0012CEB7u, 0x2EADAE2Eu, \n0x9F2BB24Cu, 0x5239CEBBu, 0x46055F1Fu, 0xEE726733u, 0xB0B1A4FEu, 0xE27BDF74u, \n0x8598EF0Cu, 0x128563E2u, 0x44790225u, 0xFA8F7C95u, 0x55E7D50Cu, 0x95383D88u, \n0x55022904u, 0x9697EA8Au, 0xE295FD9Au, 0x75B37115u, 0xC813D362u, 0x93B97B56u, \n0xD8BFA7E3u, 0x12BB3F91u, 0x27459EF2u, 0x01FCEAE0u, 0xA5203B1Cu, 0xA8525417u, \n0x5C88C6DEu, 0xFCB498A0u, 0x12C9D5A3u, 0x092C2FA1u, 0xB1FF2807u, 0xDB349B0Bu, \n0xC624CC97u, 0x3AD69458u, 0x89E8B172u, 0x3C754CA5u, 0x4825FBE1u, 0x841E311Au, \n0x181173A8u, 0x9B24A6AEu, 0x19897C86u, 0xC4AC9D27u, 0xB84B7595u, 0x84613D11u, \n0xFDE43FFCu, 0xDBAF1834u, 0xCEE898E5u, 0x35F8081Cu, 0xC7D50E22u, 0xC5EF97F0u, \n0x33B8A96Eu, 0xDF97A47Cu, 0x95C90364u, 0xBDCB3A07u, 0x522E5724u, 0x60C45F09u, \n0xA5175DD3u, 0x0E99E429u, 0xB07A5291u, 0xEF526740u, 0xBA437E9Bu, 0x4E38FC0Fu, \n0xF95EA03Eu, 0x8AB2FC51u, 0xEF5ABFE2u, 0xAAB3580Du, 0x787207E1u, 0x4FCC0867u, \n0x8B6B0D5Fu, 0x59AF4BAEu, 0x8896CB10u, 0xCB9251BEu, 0xEED579D9u, 0x73EC22B2u, \n0xF8C701D8u, 0x902A3AD3u, 0x71423ACFu, 0xE3B89B98u, 0x3E7FA8C4u, 0x2E6B73A0u, \n0x79229EF7u, 0xE1E7DEF9u, 0x80C671E6u, 0xD20957D0u, 0x2C9CA25Cu, 0x8557EEB3u, \n0x1C6B24D7u, 0x66FD6CD7u, 0x95F1ECDDu, 0xACD1B3AAu, 0x879C507Eu, 0x5359071Fu, \n0xFF18BADEu, 0x33E0394Du, 0x1408EDD3u, 0x108E983Cu, 0x3C169AD0u, 0xC0B662BAu, \n0xCE3F446Cu, 0xC9531170u, 0x6D9DCF3Du, 0xDC1A7611u, 0x89AD7ACDu, 0x0DD29B21u, \n0x77F8FF89u, 0x16D84B7Eu, 0x032F65A6u, 0xBD86F993u, 0xF023AFDFu, 0xB1D51E2Bu, \n0x02E273C4u, 0xB0674F15u, 0x30EF3697u, 0x4EA9EA8Eu, 0x6D7A7C86u, 0x59592947u, \n0x3E4D3B37u, 0xEB4F9E21u, 0xADC93485u, 0xD7ABB731u, 0x32B1D94Eu, 0x11C682E2u, \n0xF1CBEFEEu, 0xB4812F71u, 0x74F8A302u, 0x2EFF2521u, 0x6CD459D1u, 0x3F7BFAEDu, \n0x48214A6Eu, 0xAFE62067u, 0x3680D418u, 0x2E2C9E3Au, 0x5194CD47u, 0xD051678Fu, \n0xA240DC4Fu, 0x79669CB7u, 0x362660E5u, 0x910D3168u, 0xAC8331E6u, 0x099DB1AAu, \n0x0F499AD5u, 0xD9AC3C95u, 0xD38F5C3Fu, 0x61A9FF8Au, 0x5A2C126Bu, 0xFCECDD0Bu, \n0xBC8B28E6u, 0xBDB88452u, 0x8B0DC7D9u, 0x9720C769u, 0xF25CD6B8u, 0xC719BD74u, \n0x6BBAEF21u, 0x1CE56EEDu, 0x8D434A5Au, 0x544A3ACBu, 0x7D98CA30u, 0xFE4B3CA9u, \n0x1B592771u, 0xFEB2BE26u, 0x37EAD17Au, 0xEB8848ACu, 0x0A0E2942u, 0xFB80243Cu, \n0x7FF4812Cu, 0xEB6C5D6Cu, 0xAE896B22u, 0xE08E2E5Cu, 0x0FBF4A43u, 0x7948EF35u, \n0xA6252A6Cu, 0xE95DB931u, 0x28766E74u, 0x2DBA1699u, 0x24AB2844u, 0x1EF8FC90u, \n0x5C1B2801u, 0xF51ABDC4u, 0xF1F5F603u, 0x043E33BFu, 0xBFF3F21Cu, 0xEC3C8EE2u, \n0xA99486BAu, 0x7B19D266u, 0x4F6ED369u, 0xE2DF3FD5u, 0xB7A510A4u, 0xDFA3976Du, \n0xB27B633Fu, 0xF9D805C5u, 0xC4637438u, 0x27D37FC0u, 0x954C79FAu, 0xA9CEB563u, \n0xC41F4563u, 0x8A760AEEu, 0x2E153DFCu, 0x9C5E4BD4u, 0x64D87A37u, 0xB35D0A2Cu, \n0x175C2929u, 0x62E4DAAEu, 0x1167441Fu, 0xE64DD6CBu, 0xD1E370C1u, 0x38402EC0u, \n0x17D364E5u, 0x6D34BB42u, 0x7D9FF147u, 0x20C98C6Du, 0x3F3267EFu, 0x58817D86u, \n0x895556CFu, 0xD429A85Au, 0x2D0306F6u, 0x50BAA41Eu, 0x289BEF8Du, 0xA74020FDu, \n0x37526E3Du, 0xFA4FA842u, 0x73E3428Eu, 0x7731105Eu, 0xF49EFF10u, 0x3301E914u, \n0xB91D9191u, 0xAE88B8F6u, 0x95CC476Cu, 0xC6192E67u, 0xE7E97304u, 0xFE191648u, \n0xAFD34002u, 0x43E5FCAFu, 0x47B01E95u, 0x5201C577u, 0x595A4CB8u, 0x2594ECCCu, \n0x5E8A3AE1u, 0x9D4EBE0Bu, 0x807A1043u, 0x766E520Au, 0x94D6A323u, 0xFFF4F676u, \n0x07F165B6u, 0xE1AF0847u, 0x57D805F7u, 0xE6AF0C84u, 0x3E9D6F1Cu, 0x1932F266u, \n0x6DEE4F67u, 0x39DF8279u, 0x1772197Au, 0x7634C35Au, 0x74C0FCB9u, 0x2F2ACCBEu, \n0x617BA4F5u, 0xBAFF5330u, 0xFB445544u, 0xD6440A10u, 0xEB0608EAu, 0x597E3171u, \n0xAC87DCBDu, 0x66E12C95u, 0x65BDCF40u, 0x26572BB5u, 0x5AE2A7A1u, 0xEE05C87Fu, \n0x9908E9C3u, 0x9E397AE9u, 0xD7DF345Eu, 0x2540B942u, 0x845B6153u, 0x9171BF31u, \n0x52F14907u, 0xD8E0DEB7u, 0x69CA11A6u, 0x18A70462u, 0x4FD49A20u, 0xDB8D6387u, \n0x281733DFu, 0x2E92BC88u, 0xF6D64A05u, 0x0A20F3C5u, 0xCE54200Du, 0x2452234Bu, \n0x4E788683u, 0x95DD45DCu, 0x531A5866u, 0x2F380412u, 0x3A35504Bu, 0x409E5744u, \n0xD2399BFAu, 0x01F39DE1u, 0x559908ECu, 0xB1BE2ACEu, 0x44D7C22Fu, 0x503CB799u, \n0xDB95275Au, 0x1385083Au, 0x92CC862Eu, 0x8FDC43C4u, 0x0981E917u, 0xA240C330u, \n0x810476F4u, 0x7E4A279Fu, 0x4EAFDA4Cu, 0xB60E0A0Fu, 0x1EC7EBFBu, 0xFC1FB974u, \n0xF7820D5Du, 0xBAD36426u, 0x5B7E9B26u, 0x29B2D699u, 0x3127BCACu, 0x24C975C5u, \n0x2364938Fu, 0x5AEA31F5u, 0x3030CF3Bu, 0xFDB868DAu, 0xF6451D02u, 0x45711C51u, \n0x776A7396u, 0x357526B5u, 0x56AA121Fu, 0x6D60726Du, 0x2C482E6Au, 0x7837E3F8u, \n0x6698EC33u, 0xEAB8E975u, 0xCB216D2Cu, 0x7260D643u, 0x01AF48EAu, 0x45C92CD6u, \n0x8368D580u, 0xFC1E8281u, 0x796F51F4u, 0xB52BB311u, 0x36575DF0u, 0x40FF8BACu, \n0x09AB6932u, 0xE4609802u, 0xAE38105Au, 0xC86ADFA8u, 0xD8D49804u, 0x18E3638Au, \n0x4E86B1D1u, 0xA6D93C8Bu, 0x06D91986u, 0x7F8BC943u, 0x5A8C5C71u, 0x220357EBu, \n0xA4158DF3u, 0x250DB6ACu, 0x7794A70Bu, 0x5C6AD32Bu, 0xC887CF61u, 0x8A47C78Cu, \n0x9FF51B89u, 0x99591AA9u, 0xE038F34Eu, 0x5E9AFD01u, 0x355FCE3Cu, 0xC58B3B92u, \n0x2574629Du, 0x037A7432u, 0x22FEE643u, 0x2B2DE621u, 0x93699DF1u, 0x090903FFu, \n0xA4FE2F38u, 0x78ACFA4Du, 0xA3631916u, 0x19BE42B4u, 0x5F31CB3Cu, 0x77EC9EC2u, \n0xFF2154F8u, 0x10DB4EB3u, 0x0566C16Du, 0xF67B07B8u, 0xB57E953Du, 0x9726FC07u, \n0x051CC433u, 0x1817A769u, 0x2C71D907u, 0xB0CBAF32u, 0xDCFB4EBDu, 0xF476A1EFu, \n0x3C61CA99u, 0x58CE48A1u, 0xD25C3F56u, 0x7CEAAFD5u, 0xFEA82E79u, 0xD94870D2u, \n0xBA19CD35u, 0xB67646E1u, 0x25A2BC54u, 0x46473C85u, 0xBC8FA298u, 0x87A178B3u, \n0xD060A7B6u, 0xF33849F9u, 0x1E81C039u, 0xEBDEF641u, 0xC3D3BA45u, 0x704CA80Eu, \n0x49F66D3Eu, 0xD3044772u, 0x44F843E6u, 0xE96C68A6u, 0x6F3BBC5Du, 0xDB9E4586u, \n0xBCC07331u, 0xB4E98654u, 0x38686BFFu, 0x93188BA5u, 0x9117F7FCu, 0x79AC65F9u, \n0x695AA217u, 0x05C75AADu, 0xDD01FEA7u, 0x66D83AC2u, 0x39CF9E31u, 0x307C87D7u, \n0xAEE6ECACu, 0x57440979u, 0x397583BFu, 0x75814F5Du, 0xACCB4B14u, 0x32623456u, \n0x25928DBDu, 0xEBEAA475u, 0x8EE26BE8u, 0x42324755u, 0x2BE0D1A4u, 0xB15C4F0Au, \n0x7BD31547u, 0xEA66813Du, 0x0C9158C9u, 0x8C992D48u, 0x95AD64CDu, 0x4696DB07u, \n0x13CD986Au, 0xCD9ED511u, 0x1EBEC881u, 0x345691CEu, 0xB346AE76u, 0xB7C3DD7Au, \n0xA37B3C03u, 0xE6A7273Fu, 0x40C53643u, 0x54639118u, 0xB5D44A14u, 0x83EED6C0u, \n0x68CDBBBEu, 0x7B3C0434u, 0x489B6DB9u, 0xA1619018u, 0x7E6AE0FDu, 0x2E18212Au, \n0x51533D31u, 0x0B6EADA7u, 0xD5850B0Fu, 0x4C4820ACu, 0x31468452u, 0xC9C7AD8Du, \n0x747B10CBu, 0x1650EDE7u, 0xB563719Du, 0xE75ABF9Du, 0x59BE6480u, 0xDBA493B5u, \n0xFB4DBBC2u, 0xF314EAD2u, 0xFE735189u, 0x44B41F5Eu, 0xC143D2AFu, 0xB7FF2B51u, \n0x72417254u, 0x94C6DE67u, 0x4B6D0616u, 0x4D67D19Cu, 0x6BBCC74Fu, 0x48793FC5u, \n0x3B89B2D9u, 0xBE6D892Au, 0x064D6F76u, 0x68D673FCu, 0x71D7958Bu, 0x86C0CE92u, \n0xF50309F0u, 0x07D32A83u, 0x100DE80Eu, 0x5DFFE245u, 0xAD2A5C8Cu, 0x996CA097u, \n0x7D1886F6u, 0x271B7790u, 0xAFA1F315u, 0x186A3386u, 0x2B4AC5B4u, 0xA808981Du, \n0xBF07D20Bu, 0xBE36D55Bu, 0x22F95CFCu, 0x196DE6FEu, 0xF1C25809u, 0xB7A3C520u, \n0x34D06D85u, 0x07D02631u, 0xCC4BCC6Du, 0x217FF075u, 0x80A4C2E6u, 0xCC6426C0u, \n0xC94B5BB7u, 0x483521B2u, 0x25ECBA34u, 0x9C6E8745u, 0x73E00DEFu, 0x46A2EB8Bu, \n0x7AA67FFEu, 0x0BC7D24Au, 0x92E982B1u, 0x576E185Cu, 0x25BBE6D2u, 0x4D107619u, \n0xDC5FC96Au, 0xDC918C5Bu, 0xC5E36EB4u, 0x9C320028u, 0x6648C323u, 0xEBF56259u, \n0x053F294Au, 0x0F92BF9Cu, 0xE5D5A299u, 0x67AB3479u, 0x581FE4DAu, 0x99E51D40u, \n0xBEAB59D2u, 0xEEDC4E31u, 0x50AC8D5Fu, 0x4E6EC313u, 0x5C474508u, 0x3E28E614u, \n0x2F993444u, 0x72F8528Fu, 0x8AAC2A50u, 0x1ACB9825u, 0x21BE31A3u, 0x9585B482u, \n0x0BE3D688u, 0xA454F723u, 0x18A87E6Au, 0x0901A532u, 0x6DC99D6Bu, 0x1CBED92Bu, \n0x7AD2AD8Fu, 0x90C0D950u, 0x807D664Bu, 0x73B1E659u, 0xEECA9931u, 0x0B587837u, \n0x7BFFCA2Eu, 0x554FC6B1u, 0x46824410u, 0x67CA45D2u, 0x49DC42B0u, 0x88E62BC7u, \n0x4ABFFEC1u, 0xF985E365u, 0x324F8940u, 0x6A213A66u, 0xCD0CDC5Au, 0xC14209CDu, \n0x66C7ADD9u, 0x9A113794u, 0xB99081A6u, 0x2E9DAF75u, 0xB6EFFF35u, 0x81809C7Eu, \n0x47026537u, 0x4F69D797u, 0xDE4D31D6u, 0x047FBFA7u, 0xB8114DFAu, 0x7C4F7410u, \n0x24FEE7C9u, 0xD2D65153u, 0x101C32F1u, 0xA671923Bu, 0x71935A6Bu, 0x3B2E2A84u, \n0x8854B22Bu, 0xF6BA3234u, 0x827E1350u, 0xD510F4EAu, 0x881F2654u, 0xF4FADBB6u, \n0xA7247607u, 0x3C4CB838u, 0xBDFE50DEu, 0x04F142DDu, 0xC5B8BB45u, 0x9B66530Cu, \n0xDD746967u, 0x4B37F0EFu, 0xEC173110u, 0x520D8DBBu, 0x3DE5A15Cu, 0xE6643F5Eu, \n0x692DBF79u, 0x38000000u); // array len 908\n\nuint map_uint_3[] = uint[](\n0xF0D5EA85u, 0xC181C29Eu, 0xCEF5F7D7u, 0x0C4DDA09u, 0xE129A9DFu, 0x5F1A4296u, \n0x2DC0CDB1u, 0x0CAC0E57u, 0x6519879Au, 0x09E18FBEu, 0xE219296Cu, 0x3049997Cu, \n0xB6AE2E4Eu, 0x124606A7u, 0x1A4FE6BFu, 0x5B13EA81u, 0xCAE22708u, 0xB1081F54u, \n0x113104AEu, 0x60BA709Bu, 0x988DF2FBu, 0x62DA0A57u, 0x25165458u, 0x19226296u, \n0x665E1FE2u, 0xB74D93B2u, 0xF443BB09u, 0x7C707599u, 0xDD6E5F95u, 0x9C07AF45u, \n0xF8AD297Bu, 0x0CABB22Eu, 0x94761789u, 0xD0BEA117u, 0x23142402u, 0x3D00680Fu, \n0x8F87D802u, 0xC7BC51CEu, 0x574E17ACu, 0x48A71E1Bu, 0xAC92D25Fu, 0x9490E0A3u, \n0x1C96CC6Fu, 0x5B2BAAFDu, 0x72C6D61Cu, 0x298389B2u, 0xEF244883u, 0xCDAA37C1u, \n0x0553DF7Eu, 0x39F61730u, 0xEE1AC750u, 0x78146C25u, 0x92392DC6u, 0x656E8908u, \n0xEBEC776Eu, 0x9582F59Au, 0x97EA881Cu, 0x7C61AEAEu, 0x196E296Eu, 0x9623ED6Cu, \n0x8B7AEA8Eu, 0x0D9B09E6u, 0x26BB47C8u, 0x2662E288u, 0x13EE6A21u, 0x37C81C6Cu, \n0x4D2C6C25u, 0xA66523BDu, 0xD4F266BDu, 0xB376D81Eu, 0x04910A43u, 0x7A759A7Bu, \n0x09AE7F14u, 0x897361A7u, 0x0A375478u, 0x380E08EFu, 0xECFFE87Du, 0x91A8F3E7u, \n0x1CDFEA24u, 0x88A5746Eu, 0x748528B3u, 0x281478D6u, 0x4662508Eu, 0xE87EEB99u, \n0x08AFA6B0u, 0x7E56C094u, 0xCAA19DC1u, 0x4771ED1Bu, 0x0AE8A320u, 0x9B9D0CBCu, \n0xCFD4EE1Fu, 0xEA36840Fu, 0xF89603D9u, 0x6E8CE5E4u, 0xF93CC108u, 0x035B07B3u, \n0xE861F16Du, 0xF9ECCC7Fu, 0x90D53D33u, 0xE152C3B3u, 0x99CA9D3Bu, 0x2BA480F2u, \n0xA4CECDD8u, 0xDB58D12Cu, 0xE8C6F254u, 0x15F69287u, 0x1B6870D9u, 0xD8217854u, \n0xCF2D4FC3u, 0xF7F3E29Au, 0xFCA748C3u, 0xC41B7F8Du, 0x28B15E1Bu, 0x68CBA359u, \n0x68896991u, 0x4339DC5Bu, 0x0D1F284Eu, 0x55790890u, 0xDAFDED4Eu, 0x499BDD7Bu, \n0x691B6EA8u, 0x2DB2CAE1u, 0x94909473u, 0x0071A224u, 0x0E2F18A6u, 0x3713D13Du, \n0xB96141F5u, 0xF0011D6Bu, 0x60497C95u, 0xFDCE88C4u, 0xD5116110u, 0xF9835E35u, \n0x7F266D9Au, 0x1BABE7A4u, 0x924A1732u, 0xF5968FFAu, 0x0C91B6A8u, 0x148853E8u, \n0x4AB0D414u, 0x70E54502u, 0x37B84C1Bu, 0x2870E9AFu, 0xE9768DE1u, 0x47573659u, \n0xB242EB8Fu, 0xAAAAFF17u, 0xD67BEE3Fu, 0xE9C6B94Fu, 0x6FFACD91u, 0x499C2D17u, \n0x77BCE6D4u, 0x98F7B619u, 0x88C7941Au, 0x4D652D8Eu, 0xD95CD616u, 0x91653CA0u, \n0xD470BC8Eu, 0xFBDA0795u, 0x1D6E9B32u, 0xD4EED031u, 0x3DF88450u, 0xE5BC6CD8u, \n0xA5037658u, 0x817FE71Eu, 0x2E7C0F61u, 0x395BA7B2u, 0xAE330C19u, 0x1725F36Bu, \n0xB5B3D157u, 0xCCD1107Fu, 0xC0329869u, 0x919BAEB8u, 0x089B9367u, 0xB5AAF27Bu, \n0xFF181C29u, 0xA2F19028u, 0x1B6B3669u, 0x161AE2FDu, 0x9D6D7BA8u, 0x440F01B8u, \n0xF6B46B72u, 0xECDA4A23u, 0xE0C9FD82u, 0x0AAA9C9Au, 0x1359D264u, 0x39DF84F0u, \n0xAFDBE4B0u, 0x477111D9u, 0x776BA37Au, 0x75455A6Fu, 0x5453DD25u, 0x73460A91u, \n0xBB7F3A61u, 0xC3F3D7B7u, 0xFDF0CC7Bu, 0xEE62FA34u, 0x3599DE1Au, 0xDB1D26A1u, \n0xC8FD8F0Eu, 0x1DE45D86u, 0x1F4ED192u, 0xB8FD344Bu, 0x67739D5Du, 0x6B4A995Du, \n0xA409A8E1u, 0x6347E05Bu, 0xD5FB4A53u, 0x5E6A3E44u, 0xA6B4DDDDu, 0x5A6FE137u, \n0xAF563EA4u, 0x448F8E22u, 0x9F17CF97u, 0x9F5FB17Fu, 0x68F4E80Fu, 0x15DB829Du, \n0xE4167771u, 0xF3178F67u, 0x6D9D054Cu, 0xEE0B7A3Eu, 0x44C47771u, 0x59198ED5u, \n0x83F2DEA1u, 0xA84B6F07u, 0x9F58194Cu, 0xB98779A0u, 0x436B866Fu, 0x8C02E18Au, \n0x02D8E81Cu, 0x6DA1E1F2u, 0x0D0B67F2u, 0x7C3C6A70u, 0x48B07DA4u, 0x41ED1378u, \n0xD2E1F392u, 0x731726D1u, 0xCCCBEA2Eu, 0x94A0C8DAu, 0x59928C34u, 0xF81F739Bu, \n0x79E71EC4u, 0x5216AFDFu, 0x5F4F3B84u, 0x8506E661u, 0xBA7C0875u, 0x4ED4E80Au, \n0x1BF33A93u, 0x6A0AE425u, 0xF48984CDu, 0x6889F70Fu, 0xFCA6D7C8u, 0x608EAB99u, \n0xF35DBB61u, 0x76BCC912u, 0x2C283835u, 0x255FBB03u, 0x46DE179Au, 0xA0F54737u, \n0x3103DF30u, 0xA57DC75Du, 0x4A190DDAu, 0x4F127BA2u, 0x07A8C4FBu, 0x7046C5EDu, \n0x45493B1Du, 0xB5739CB1u, 0xB36862BCu, 0xB99A2CB4u, 0x8F8E592Au, 0xDEF2D135u, \n0x056E2AF5u, 0xB4DC24DCu, 0xB924408Fu, 0x3D4FFE0Eu, 0x745C92C1u, 0xE3F427E6u, \n0x28550E23u, 0x9CF3AF91u, 0x28BE807Du, 0x2E637A54u, 0xCB67CEBBu, 0x7DFDB962u, \n0x5E63A4E1u, 0x788649B8u, 0x703F2AFBu, 0x817614B4u, 0x804557A2u, 0x64F7390Fu, \n0x1A0E2A5Bu, 0x6CBA6ED3u, 0x6F7DBFF6u, 0x9EF90F10u, 0x1FFDA1EFu, 0xD10BDF22u, \n0x65C39803u, 0xE4010E63u, 0xD159AB72u, 0x53364913u, 0xD6B880E6u, 0x162EAC61u, \n0x6F2AD4E2u, 0x7A4B7E8Eu, 0x0A913D59u, 0xA19BFF90u, 0x841085C0u, 0xAAA60B6Cu, \n0x00DB7683u, 0xDBDFD736u, 0xF3868C19u, 0x99BB5B13u, 0xB2D94AD0u, 0xD2A6A8F9u, \n0xCABC91A2u, 0xC1E898DDu, 0x4330424Cu, 0x065C35B0u, 0x5FE43E65u, 0xCBC0FFB4u, \n0x02A675C6u, 0xFE2DAD5Fu, 0xB0C57F53u, 0x5D440140u, 0xFC36AA3Eu, 0xED258357u, \n0x2C256332u, 0x708EE7A2u, 0x11BCB2FAu, 0x39F5E566u, 0x6749AC2Fu, 0xDE827AAEu, \n0xA73E4A22u, 0x19BE36C2u, 0xE687A681u, 0x522304FFu, 0xF2818B3Du, 0x07C3595Fu, \n0x3F71E536u, 0x641D44F3u, 0x5A605126u, 0xACEB0B8Cu, 0xD168806Cu, 0x2A0F7DF6u, \n0xA675DBCCu, 0xF4252190u, 0xD2E0BA8Bu, 0x07E9854Cu, 0x2452249Cu, 0x5BAE7086u, \n0xBD78CC07u, 0xD6B4BFE7u, 0xEBE0E18Du, 0xB89820F3u, 0x660C3680u, 0x71B96D47u, \n0x23BACADDu, 0xE109BAFAu, 0x0FA2D5FBu, 0xF2870890u, 0x3A4BC11Cu, 0xA4B2609Bu, \n0x25A43554u, 0xE12CFFA4u, 0x75A4D550u, 0xF15FD717u, 0xEFB9F6D7u, 0x037E2838u, \n0xF15129B2u, 0x17172D92u, 0x2F62FB85u, 0xE657AE0Eu, 0xE290C271u, 0x937CE67Eu, \n0x48203828u, 0x5922DCE4u, 0x80420543u, 0x5201134Fu, 0x2AE7F1FCu, 0x7D0629FEu, \n0xDBE16E23u, 0x8BE7E449u, 0x921F7ED2u, 0x58A92DE7u, 0xB211D66Eu, 0x0F7FF65Au, \n0x4031B085u, 0xAD844CCFu, 0x4180F6E3u, 0xB0A6BF2Bu, 0x91C265BFu, 0x568B1CCDu, \n0xD132E95Fu, 0x305A268Du, 0xA4F21270u, 0x54C7AF27u, 0xB6032909u, 0x66693668u, \n0x62B9CA60u, 0xB1D2B2CCu, 0x64CE4357u, 0x3645B057u, 0xB9CF0806u, 0x91D2C48Eu, \n0x44CC93DEu, 0xB9145095u, 0x3C719D6Bu, 0x3510B369u, 0x7E429FE0u, 0x4C36FD01u, \n0x75048E1Du, 0x7530DECEu, 0xAA07E4BAu, 0x61F2DB0Du, 0x946E9A21u, 0x369630E0u, \n0x95C1D69Cu, 0x5FB58550u, 0xBF0DA9EDu, 0x66ED62F1u, 0xE1F28FB5u, 0x668DE4F1u, \n0x32C36FCCu, 0x1F76F607u, 0x1978D70Bu, 0xCFAD619Eu, 0x87081237u, 0x92CEFB1Cu, \n0xC2FEBB61u, 0x88390DB8u, 0xD10083D9u, 0xCB7BB491u, 0x0631D8C6u, 0x8F61C580u, \n0x9005486Cu, 0x21E49AA8u, 0xE35DDF6Cu, 0x77AFCD90u, 0x036EA4F4u, 0x2AFE8E60u, \n0x41F8EABCu, 0x0FCF299Eu, 0x06A4AD91u, 0x72EE581Fu, 0x2118D1A3u, 0x114B632Eu, \n0x70F9E838u, 0xD0A70A0Au, 0xED8EBCC0u, 0x4E293719u, 0xB7A6B493u, 0x7861B68Au, \n0xACF1FDB7u, 0x9C67542Au, 0x8A7DFA15u, 0x5094F641u, 0xFACE5A24u, 0x632D0A45u, \n0x2EF1CBEEu, 0x175D1A8Eu, 0xB078244Du, 0xBD42F04Du, 0x3486394Eu, 0x57370840u, \n0x71C226BFu, 0x1CCFFD9Fu, 0x63EBC153u, 0x46FFA090u, 0xBE437395u, 0xA67A4BBBu, \n0x9978E4ACu, 0xF3A4719Au, 0xEDB638E6u, 0x80E7831Au, 0xC37DBE03u, 0x848A54A9u, \n0xBFDDE9A6u, 0x3C7DF0F9u, 0x74B362E4u, 0x8E69802Bu, 0xA83B8C4Eu, 0x98E9F314u, \n0x5A134ED2u, 0xCC93FBADu, 0x841F66F7u, 0x48B6E129u, 0xBF4415A0u, 0x4312FD03u, \n0xD3A58604u, 0xDCEB6B9Bu, 0xEDD61573u, 0xA5D46E93u, 0xAA573BD6u, 0x6C932C65u, \n0x76F33157u, 0xA3AA70A0u, 0xC137CE9Au, 0x46ACE95Eu, 0x4C1C33C0u, 0x7149EB9Eu, \n0x2DFB4C6Cu, 0xEFDEC8DFu, 0xFE489409u, 0x13AD846Fu, 0x27BAFC00u, 0xF1455C5Eu, \n0x1E8ACD48u, 0xD96BFA75u, 0x8C594AC8u, 0xE2318696u, 0xDA45CC8Eu, 0xBDDB9F4Fu, \n0xDA1D4918u, 0xB8549BF3u, 0xC0D4D493u, 0xE62AB40Fu, 0x453F1C8Du, 0xA0CA3841u, \n0xD437B850u, 0x0D50139Cu, 0x78B4A7B7u, 0xE757BEB1u, 0x3F0271ACu, 0x06BF1F82u, \n0xC50FA7FAu, 0x9DE568A7u, 0xB7297CB9u, 0xF7331AE7u, 0x74191E67u, 0x254FB690u, \n0x632C74B6u, 0x51E5AD3Bu, 0xAC19A5CCu, 0x1C343C3Fu, 0x1182E100u, 0x18843F90u, \n0x376878F8u, 0x1E5F113Cu, 0x1E12366Du, 0x64CDB24Au, 0xC47C7DF7u, 0xA88C4B67u, \n0x794F301Au, 0x5CCAE73Du, 0xDD16E8DDu, 0xCCBA9576u, 0x95A1E07Au, 0x8C5A23B3u, \n0x183BE9E6u, 0x14F7AF14u, 0x79C4FCFCu, 0x8F3F7889u, 0x3A87993Du, 0x894907D6u, \n0x19CA534Eu, 0xC893BA9Eu, 0x7E3785B2u, 0xADA65AFDu, 0x2754B39Au, 0xA47417AFu, \n0xB8AC5D70u, 0x453B163Eu, 0xA7BFF47Fu, 0xA1DFE8B9u, 0xF687E9B3u, 0xF9CC77ECu, \n0xD6393E42u, 0xE9520F5Eu, 0xCDD66DF0u, 0x3FEED4C7u, 0x61B0DBB2u, 0xC5BBBB00u, \n0x89C8E54Eu, 0xE387A57Fu, 0x7A0D4C91u, 0x51FCAFBCu, 0x9A4EF98Fu, 0xC71FA75Bu, \n0x766FDA44u, 0xC82E83C4u, 0x297096DBu, 0xCE352D1Cu, 0xE8A13BF1u, 0x926D355Eu, \n0x77999106u, 0x2CA5BF46u, 0x67234A67u, 0x6B201618u, 0x3CE1A9D1u, 0x7F63B257u, \n0x66099028u, 0xE2099826u, 0x55E1DDB7u, 0x106F7101u, 0x6860A196u, 0x05CD6A29u, \n0x9D85BB97u, 0x4306BDBBu, 0x5C767942u, 0xE91B7EE6u, 0xD4CF11C3u, 0x6FC7D4E8u, \n0x3F155D8Cu, 0xE1811C9Fu, 0xA42BE870u, 0x42911F10u, 0xF7F22DB4u, 0x238FFC9Du, \n0xC2A3FD75u, 0x007D6A0Fu, 0x60AE964Cu, 0x47334AB5u, 0x86709E79u, 0x799FE268u, \n0x775A48ACu, 0xA64F39BBu, 0x495694C8u, 0x36ABEAF5u, 0x71483C28u, 0xFEB1BA28u, \n0x16A185B2u, 0x99F2109Cu, 0x5539A7DEu, 0x18DA9FFCu, 0xF6048ADFu, 0x7E2A4004u, \n0x1E7BF92Cu, 0xBB7172C4u, 0x5CB6144Du, 0xCB692B95u, 0xCCC7539Du, 0xDFA1FF2Fu, \n0x414A398Du, 0x179E129Bu, 0xA674575Fu, 0x1F0FDFCAu, 0x052A11F6u, 0xE7D0FD47u, \n0xEC4CB160u, 0x1ECCAAF1u, 0x0A9C50C4u, 0x7C97D0C4u, 0x5D4CA85Cu, 0x4F7B5934u, \n0x9A5D522Du, 0xBEF1AC97u, 0x74B2D43Du, 0x73D398E0u, 0xBC7D46EDu, 0xBDF789E4u, \n0xCD7F3C48u, 0x9A79D794u, 0xAE7E8663u, 0xB3B18757u, 0xA9F52FBDu, 0x92BD46C1u, \n0xA281488Eu, 0xA76B624Fu, 0xB2E6F516u, 0x02B33236u, 0xA8100F75u, 0xC65205BCu, \n0x9ABA32F4u, 0xAF00DF74u, 0xC301ABE6u, 0x2BED1ADBu, 0xACB3C80Eu, 0x6947B494u, \n0xB5E07C85u, 0xCD64AA72u, 0xB9A14DE7u, 0xDB95D2D2u, 0x432E5BDCu, 0x595A3C43u, \n0x77B98F65u, 0x3242CEB3u, 0xD1C0C758u, 0x8E9570C1u, 0xE2A1BC13u, 0xD8245543u, \n0x33CA8A09u, 0x35E8224Du, 0x3603DE09u, 0x942EA3DFu, 0x2AD09948u, 0x80F3FCA6u, \n0xFC014C9Du, 0x3DF2391Cu, 0xFEA995CBu, 0xCE1A2BCCu, 0xE62E1896u, 0x48B4B753u, \n0x2FAB2F13u, 0x93E035BFu, 0xB2F5D086u, 0x0AEF099Fu, 0x722AF811u, 0xA3DB9F5Du, \n0x27F2BA3Du, 0x10D4EF2Fu, 0xFCC463F7u, 0x5F81DF66u, 0x82ADA365u, 0xC2DBB649u, \n0x314F31C5u, 0xDB6CA39Bu, 0x4A936964u, 0xA1DD3C16u, 0xF4E3FC20u, 0xD1B5FE58u, \n0x9EB4FD55u, 0xFCAFD302u, 0x9A9F1FCAu, 0x92A5A4DAu, 0xAF31F243u, 0x266A9BBBu, \n0x3206CA38u, 0x366A4C2Fu, 0x4628F38Fu, 0x52A498C7u, 0x8CED7580u, 0xC4493A08u, \n0xF3C0B7C0u, 0x2BA8043Bu, 0xA3F90AF1u, 0x41EA267Fu, 0x2EC61398u, 0xDD703072u, \n0xA516B0A4u, 0x35CD260Cu, 0x737CADDAu, 0xAF851C51u, 0x3E1EBA81u, 0x5B1913E8u, \n0x36E8952Fu, 0x9238C1F6u, 0x83F6BB51u, 0x1364CC50u, 0x6166EF5Fu, 0xF998FBABu, \n0x5FBDF0FAu, 0xEEF38A3Eu, 0x53C0BAA1u, 0xBC764CA4u, 0xA8C7A16Cu, 0x36D19148u, \n0x7669E14Eu, 0x6B6483D1u, 0x3174B5BDu, 0xC070F916u, 0x4CAEB9EDu, 0x7FAA3B0Cu, \n0x57B79F1Fu, 0xCA3B0F28u, 0x622C4BEFu, 0x4C553524u, 0xB6E9C71Du, 0x9D81B2CBu, \n0xC97C7CFDu, 0x4E1456F3u, 0xDC29B4DDu, 0x80FAAC6Du, 0xD5B8BACCu, 0xA6F03F6Bu, \n0xF8FE0B3Bu, 0xE86AA933u, 0xFD57F238u, 0x4BEAA70Fu, 0xAC35BB3Eu, 0xEF0D4565u, \n0x185B0A42u, 0x0FBFC4E5u, 0xF38E7641u, 0x266A44F3u, 0x11A76836u, 0xA76319A0u, \n0x398C847Cu, 0xDA9C5C60u, 0x49368C9Bu, 0xE80B9B5Fu, 0xF37A8A30u, 0x82314E8Fu, \n0x295DE4A0u, 0x3FC9B0A7u, 0xA2312A11u, 0x018E7751u, 0x0BE81AB4u, 0x21B2BA98u, \n0xB1237752u, 0xD140DBF4u, 0x45E50B4Bu, 0xA1740FD0u, 0x90BDBA6Bu, 0x13EE599Du, \n0xDFFE6244u, 0xCFC3F3D9u, 0xF9029F34u, 0x5043311Cu, 0x325F2807u, 0x2A7F1C5Du, \n0x5576A9E3u, 0x163F1201u, 0x64DB9C75u, 0x22F9D38Fu, 0xA69163BBu, 0xDA531447u, \n0xFE083AF9u, 0x87AD8DB9u, 0xC5825406u, 0x8E1A98B2u, 0x2C3E7873u, 0x6A2DFED1u, \n0xFC1EF296u, 0x0847A7BEu, 0xBD20E021u, 0x58B004F4u, 0x8DB65A92u, 0x6D6643A4u, \n0x8C6A2126u, 0x612AFDEBu, 0xA5C8CDCCu, 0x0B5C0FB8u, 0x7B9719B3u, 0xA64BCA46u, \n0x238AEFC6u, 0xA392F817u, 0xD3812252u, 0x88FCB473u, 0x7D4A6A72u, 0x6AB95000u, \n0xDDA6B8D0u, 0x61B7E21Au, 0xA57C6323u, 0xC03829D6u, 0x4065C216u, 0x09245E09u, \n0x05543030u, 0xB7F0F7DAu, 0x9F10EB8Bu, 0x856C68DBu, 0xB67374F0u, 0xAF8F745Eu, \n0x101DC482u, 0x6A1EE7A1u, 0xFF9D2300u, 0x951FF1ABu, 0x9EB49165u, 0xEC29274Au, \n0x5E36F4EEu, 0x5C5884FEu, 0xF6720462u, 0x3234C56Bu, 0xA8C76A4Cu); // array len 851\n\nuint map_map_uint_2[] = uint[](\n0x33632402u, 0x22444852u, 0x34235737u, 0x48215634u, 0x53636352u, 0x64928637u, \n0x63437656u, 0x37345753u, 0x05384256u, 0x69728332u, 0x44555283u, 0x59272469u, \n0x14315149u, 0x6354C284u, 0x24345555u, 0x37967965u, 0x23323192u, 0x43642073u, \n0x42571353u, 0x65154235u, 0x32644943u, 0x24333452u, 0x63535332u, 0x28535433u, \n0x12220523u, 0x01223231u, 0x82323145u, 0x42202112u, 0x03412321u, 0x71473220u, \n0x21526333u, 0x23280742u, 0x4533A5B3u, 0x56825359u, 0x79777446u, 0x8463366Au, \n0x34149238u, 0x56413174u, 0x69628864u, 0x55545458u, 0x64427531u, 0x77342322u, \n0x47657325u, 0x46233133u, 0x12114265u, 0x33322435u, 0x56344534u, 0x36004624u, \n0x56856454u, 0x4232A565u, 0x65254863u, 0x44224554u, 0x23623573u, 0x55655114u, \n0x84403264u, 0x24928424u, 0x57654226u, 0xA3504433u, 0x26565755u, 0x84946748u, \n0x07435443u, 0x47A37797u, 0x433814B9u, 0x77416638u, 0x32313755u, 0x03773412u, \n0x24423333u, 0x33635043u, 0x12212144u, 0x02073242u, 0x34351352u, 0x23132733u, \n0x31243313u, 0x43216032u, 0x42623447u, 0x43354614u, 0x32311731u, 0x46244522u, \n0x45143426u, 0x43535032u, 0x32506332u, 0x72605324u, 0x35752372u, 0x96133547u, \n0x51365001u, 0x52732435u, 0x44433343u, 0x65222566u, 0x26587496u, 0x38421344u, \n0x87383548u, 0x65338563u, 0x25037496u, 0x68513554u, 0x87414267u, 0x32786465u, \n0x76123634u, 0x21250302u, 0x45534315u, 0x11345012u, 0x47832622u, 0x11242321u, \n0x05243512u, 0x33735564u, 0x71524372u, 0x44461232u, 0x55145255u, 0x73644056u, \n0x61433415u, 0x36341321u, 0x58564444u, 0x3A564674u, 0x34314287u, 0x33437414u, \n0x22444445u, 0x55334962u, 0x05732236u, 0x32773828u, 0x32444447u, 0x66614556u, \n0x37862324u, 0x44743556u, 0x45464695u, 0x34317476u, 0x33555849u, 0x31852338u, \n0x62133657u, 0x42475545u); // array len 128\n\nuint map_map_uint_3[] = uint[](\n0x43844320u, 0x23574653u, 0x43715267u, 0x54435682u, 0x56852616u, 0x22134676u, \n0x23383562u, 0x26423392u, 0x09275343u, 0x88131244u, 0x55463163u, 0x68B45499u, \n0x160B4281u, 0x63123385u, 0x34324567u, 0x26767574u, 0x45234326u, 0x56532133u, \n0x23231543u, 0x43123334u, 0x65546223u, 0x33543775u, 0x45412511u, 0x43573614u, \n0x72112012u, 0x12466143u, 0x62413423u, 0x10104222u, 0x43432234u, 0x20565221u, \n0x25531423u, 0x13641014u, 0x22346163u, 0x85413343u, 0x27865B54u, 0x98478547u, \n0x3A121151u, 0x66000345u, 0x53565437u, 0x4A754623u, 0x32436554u, 0x25314645u, \n0x94474657u, 0x45401034u, 0x51114967u, 0x543135A6u, 0x44542242u, 0x34432546u, \n0x46755344u, 0x35473733u, 0x52225834u, 0x3743767Bu, 0x24333304u, 0x36104016u, \n0x13598242u, 0x72447867u, 0x05474122u, 0x8C143276u, 0x42527444u, 0x68354675u, \n0x13213374u, 0x45224265u, 0x45456733u, 0x43B85557u, 0x11211415u, 0x15745332u, \n0x32222342u, 0x20323554u, 0x22231304u, 0x32578312u, 0x42631223u, 0x12214204u, \n0x42131532u, 0x02374243u, 0x33324211u, 0x42307110u, 0x51151300u, 0x20545414u, \n0x42631653u, 0x31544043u, 0x18424567u, 0x63434444u, 0x72471344u, 0x53336333u, \n0x27221565u, 0x42524256u, 0x52357527u, 0x35546327u, 0x16348222u, 0xC2201185u, \n0x56357567u, 0x11565739u, 0x06546291u, 0x62220356u, 0x94539689u, 0x45765443u, \n0x25101144u, 0x52274520u, 0x14402030u, 0x12424212u, 0x21110204u, 0x41435241u, \n0x02421731u, 0x12331112u, 0x31645245u, 0x52356143u, 0x24423351u, 0x53319225u, \n0x54346554u, 0x21634364u, 0x41203429u, 0x24392371u, 0x69346427u, 0x51343253u, \n0x13208313u, 0x76566653u, 0x34583665u, 0x54536435u, 0x43463114u, 0x92384653u, \n0xB3375134u, 0x63453564u, 0x42234434u, 0x26534753u, 0x25236454u, 0x7024234Bu, \n0x56757434u, 0x43424433u); // array len 128\n\n\n#define self_buf iChannel0\n#define map1 map_uint_2\n#define map2 map_uint_3\n\n#define mapmap1 map_map_uint_2\n#define mapmap2 map_map_uint_3\nconst ivec2 mapmap_reg = ivec2(0,34);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx==ivec2(32,32)){\n        fragColor = vec4(1.,map1.length(),map2.length(),0.);\n        return;\n    }\n    \n    if(ipx.x>=32||ipx.y>=32){\n        if(ipx.y!=mapmap_reg.y||((ipx.y==mapmap_reg.y)&&ipx.x>=mapmap1.length())){\n            fragColor = vec4(0.,0.,0.,0.);\n            return;\n        }\n    }\n    \n    bool reset = texelFetch(self_buf, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(self_buf, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    if((ipx.y==mapmap_reg.y)&&ipx.x<mapmap1.length()){\n        fragColor = vec4(0.);\n        fragColor.x = uintBitsToFloat(mapmap1[ipx.x]);\n        fragColor.y = uintBitsToFloat(mapmap2[ipx.x]);\n    }else{\n        int idx_x = ipx.x+ipx.y*int(32);\n        fragColor = vec4(0.);\n        if(idx_x<map1.length())\n            fragColor.x = uintBitsToFloat(map1[idx_x]);\n        if(idx_x<map2.length())\n            fragColor.y = uintBitsToFloat(map2[idx_x]);\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// map of connections 5 and 6\n\nuint map_uint_4[] = uint[](\n0xB1CF6B20u, 0x15E2B065u, 0x7184D380u, 0x345FFCF9u, 0xC183EC09u, 0x426DEA77u, \n0xBAC07291u, 0xF3531AC8u, 0xD5F71622u, 0x57AC7411u, 0x7CB6A80Eu, 0xA0EADE82u, \n0x6BCEFCF7u, 0x894E3C3Du, 0xCE6BA765u, 0x94A78765u, 0x4247C50Au, 0x0C3DC143u, \n0x14241443u, 0x444A16CEu, 0xEEF591E6u, 0x03B0BD48u, 0xBD171395u, 0x79F68478u, \n0x6217E81Bu, 0xB7A4BEB3u, 0x673FFD11u, 0xC9F367E7u, 0xC50D75A7u, 0x341C3531u, \n0x9C04A7D2u, 0x057EE109u, 0x53FFC709u, 0x5C5B806Cu, 0xABFFD585u, 0x23192C66u, \n0x3E94C523u, 0xEAF94771u, 0x8B248C94u, 0xD261C32Bu, 0x6623B3E0u, 0x7A4BD53Fu, \n0xDE0BF707u, 0xA6AA44E7u, 0x036F2FF4u, 0x816265C1u, 0xF28B0A2Cu, 0x7D39F997u, \n0x24F7E572u, 0x61C75AEEu, 0x85C591A2u, 0x2DD512F5u, 0x9B0CCD4Du, 0x03D9C9ADu, \n0xDA520F88u, 0x6D7D8B4Cu, 0x88E873CAu, 0xAFC8089Fu, 0xF7902745u, 0xD4E226FEu, \n0x6A021F8Fu, 0x22C4289Du, 0xC9BB4E5Eu, 0xBF02AED0u, 0x2EB65B1Du, 0xD162B8A6u, \n0xC8D687FCu, 0xF35472F6u, 0x59DC8DCCu, 0xC87C4DD4u, 0x8FF691CAu, 0xB2885D71u, \n0xDDCAD5E3u, 0x4947D020u, 0xE1FE7718u, 0x7500636Au, 0x254E2E8Du, 0x39344B4Du, \n0x22E4C447u, 0xD3B179A8u, 0x016F9508u, 0x257DC320u, 0xF613275Du, 0xB6FD8927u, \n0x653F872Du, 0x9DED0142u, 0x9849635Eu, 0x483D1E2Bu, 0xFAD7B417u, 0xDF91FAE0u, \n0xF6A2269Fu, 0x848A9DD5u, 0x893CC6C3u, 0x3B2E4344u, 0x4B83A22Du, 0xBE86BE91u, \n0x84B2C60Bu, 0x7B293CAFu, 0x4EA8E0A5u, 0xBFFE4ACBu, 0xDECB7402u, 0x89D084BEu, \n0x69EDFFFCu, 0x2FBA9C6Bu, 0xF6B71C52u, 0x613E9AF4u, 0x1BC51CB8u, 0xE75C3F3Au, \n0x5D17188Fu, 0xA2B96AF0u, 0xF71915B8u, 0x93E3D823u, 0xD35F5FABu, 0x3995F65Du, \n0xE88A9088u, 0xCA541AC0u, 0x988C0296u, 0x9227D63Bu, 0x462172F3u, 0xDE77F82Fu, \n0x9A9E1F1Au, 0x4017D31Fu, 0x8E7D719Fu, 0x9ED0E481u, 0x8CB38CC8u, 0x66D538FAu, \n0x07151E94u, 0x3E7D4B08u, 0xBB35B375u, 0x38AE6C64u, 0xF1F21F1Fu, 0x989BCE0Fu, \n0xB433A855u, 0x0F746F81u, 0xFFE93250u, 0xF0F4A2A4u, 0xB57DE547u, 0x34909E8Du, \n0x97295DA2u, 0x54D70068u, 0xFA74B6CCu, 0xA87B575Du, 0x1832B77Au, 0xE8A4ACE6u, \n0xFC2D5834u, 0x336041E1u, 0x27FDC5D0u, 0x100356D1u, 0xE217BF85u, 0xFD94A9B4u, \n0xA3C05F9Cu, 0x17D82C4Bu, 0x5482070Au, 0x95D93DF1u, 0x33D1D236u, 0x914203DBu, \n0x86B8C93Au, 0x7B9EBECBu, 0xEEF1E4EEu, 0xE5F49331u, 0x5E6F6075u, 0x3FA29A22u, \n0x778878F9u, 0xCB43C3B4u, 0x90129A06u, 0x5B96DACBu, 0x513683ADu, 0x38EF33D4u, \n0xF28D2AE3u, 0x58623996u, 0x767D2FA8u, 0xB9B85C72u, 0xEF095C07u, 0xDFA5B330u, \n0xB6DB15C5u, 0x86ABC383u, 0x2DBD0582u, 0xAF8E27F1u, 0xDF6009E5u, 0x25B73028u, \n0x0A05F817u, 0xD25CFAFCu, 0x41CE413Fu, 0x10BF13BFu, 0x20058252u, 0x956FC887u, \n0x62BE9104u, 0xD7F36C8Bu, 0x49DDD182u, 0x47E61D4Eu, 0x3E5D3928u, 0x6A4B3958u, \n0x99AFF0E3u, 0xE83C0E29u, 0x87BC7886u, 0x8E17E99Du, 0xD583423Eu, 0xE8C0B14Bu, \n0x1433A022u, 0x9AB8F105u, 0x20487460u, 0xB768B01Bu, 0xB2328556u, 0x47E0C483u, \n0xC70FFF7Fu, 0x8BF1D444u, 0xAEC26A3Eu, 0x7D265A9Fu, 0x085C98D3u, 0x1C798308u, \n0x201CE786u, 0xF2EA0943u, 0xDA03E016u, 0x62C19651u, 0x1559029Fu, 0x2A0EE19Fu, \n0x20460395u, 0xB94DAFFDu, 0x0C2F8FFCu, 0xD56F5BA8u, 0xFC9BCA91u, 0xBF7D88E9u, \n0x0F79941Du, 0xA352531Au, 0xA3EE5F98u, 0x6DCA28BAu, 0x9CE30B94u, 0xD0C9F1FCu, \n0xE381EC31u, 0x583BA8FFu, 0xF30BD9D3u, 0xB0B547E9u, 0xF779E745u, 0x0142D0DAu, \n0x4A0B7418u, 0xB446F468u, 0xAE598F65u, 0x788B8EFFu, 0xBD209899u, 0x793B1934u, \n0x51605C36u, 0xEA65D745u, 0xB8F2B790u, 0x40CEF264u, 0x3D7E5575u, 0x1075ADDEu, \n0xB40E38E4u, 0xB79DD892u, 0x5D69F2A4u, 0x26E28665u, 0xD1025B4Du, 0x9EC51A39u, \n0xD6CCFE50u, 0xA66759D9u, 0x920A8607u, 0x4788249Cu, 0xF4593A76u, 0x2EAE2C0Fu, \n0x7D129AF2u, 0x8E49E9F7u, 0x08386081u, 0xC83F000Fu, 0xF94744D3u, 0x1A6F45D4u, \n0xB73786D3u, 0x44C12DFAu, 0x862D72CFu, 0x430BAF54u, 0x8EB0E57Du, 0xFA314AB0u, \n0x18BECDD8u, 0x2D64AB9Au, 0x9D68B7B8u, 0x7B543A23u, 0x161C4895u, 0x4EE5C3FBu, \n0xEF1DBF25u, 0xB762E6A2u, 0x8E8B5ADBu, 0x1885D226u, 0xA357E877u, 0xB9FD910Cu, \n0xB9DA6EF0u, 0x46452C50u, 0x2A5022EBu, 0x9C26F203u, 0x370C2C4Au, 0x27C3105Au, \n0x20DD3463u, 0x36508E5Fu, 0xD820A442u, 0xE1EFE497u, 0xC26681FBu, 0x3F730B1Au, \n0x4AEA0B44u, 0xB1AA0B98u, 0x2454A00Fu, 0x9431E88Du, 0x274B251Bu, 0xCF6AC8C2u, \n0xAA5D4E02u, 0x25511F41u, 0xD5F4220Eu, 0xCCF9E5AFu, 0x6C525488u, 0x6CA91F9Cu, \n0x0FA6B1B4u, 0xCC32F5A5u, 0x6FA51ABAu, 0x815A5BB2u, 0x7C3E0D42u, 0xE7699610u, \n0x0FBCD5D8u, 0xD4682FFDu, 0xCBB1C478u, 0x5E2CD4F2u, 0x0F840F64u, 0x41F753B3u, \n0x6C3821D4u, 0xEBC129A6u, 0x56AE5DCCu, 0x916EABD9u, 0xD7E7AC0Du, 0x567A09CDu, \n0x45A21575u, 0xD757C04Du, 0x867DA680u, 0xCFA65446u, 0x86521453u, 0x6072F629u, \n0x53EFDCE4u, 0xFAF6771Bu, 0x70EE872Eu, 0x3246E5F0u, 0xC44B0D6Du, 0x31072EC4u, \n0x8A38B348u, 0x6E676CF7u, 0x86DAB59Bu, 0x139D411Fu, 0x84FD5B40u, 0xFA579739u, \n0x0807153Cu, 0xFF7B13F2u, 0x520C4F5Au, 0xC0C307D2u, 0x8C0FB9A8u, 0xF9099112u, \n0x4546BB63u, 0x7528FA64u, 0x170D6717u, 0x5BBD81B1u, 0xFA9662F2u, 0xE3361731u, \n0x2E672902u, 0xAA9FB6FFu, 0x8555FD36u, 0xE572C53Fu, 0xD36C1E2Bu, 0x549B37DFu, \n0x2FFF250Au, 0x6B46D6A0u, 0xF12C5D20u, 0x69CEE27Bu, 0x88D550ACu, 0x161EF5B4u, \n0x33D6E825u, 0x870C16DCu, 0x8CE84375u, 0x6AA6698Eu, 0x459B92E5u, 0x88E55FDDu, \n0x1FE387B0u, 0xC9EBC91Du, 0x681D7E0Bu, 0xFDD7A489u, 0x90E6C9CBu, 0x602582D1u, \n0x22953566u, 0x28C8EB9Cu, 0x53376D89u, 0x38AED179u, 0x78A9CB9Bu, 0xEC68EC73u, \n0xA87EE0FAu, 0x42DE8E87u, 0xD63E736Bu, 0x70D4EC2Eu, 0xAB82C5E0u, 0xE7E6A4B1u, \n0x75AB71ADu, 0x23E8A9F5u, 0xFDA31AEBu, 0x3E4629D2u, 0x3A2546C9u, 0x6C8B9C64u, \n0x34E59A66u, 0x2694CCD5u, 0x186531D9u, 0x2846B828u, 0x4D643020u, 0xA354B460u, \n0x6ED2E73Eu, 0x03F5BFC0u, 0x421A1C96u, 0x790FC112u, 0xE67FACD6u, 0x14EB1BD2u, \n0x475ACD26u, 0xE29747ACu, 0x5D48C694u, 0x22FF8B7Fu, 0x0EB8210Fu, 0xF9CD9CC6u, \n0x9AC28C0Cu, 0xAF61472Eu, 0xAA4C6E6Eu, 0x70A54F28u, 0x6786EF67u, 0x70C5EE2Fu, \n0x253498FFu, 0x9A900AE4u, 0xD4F62D1Fu, 0x879E0121u, 0xA9EE17FFu, 0x0F3227CBu, \n0xB6E46C96u, 0x6EAE29A0u, 0x3B107C83u, 0x650818CDu, 0xB27B7447u, 0xEAA2BBFFu, \n0xD5E056C1u, 0x02409E69u, 0xEFE421F3u, 0xB09C670Fu, 0x29570C1Cu, 0xAFDC2A08u, \n0x7CFDF765u, 0x7204A466u, 0x946B1D97u, 0x28EA6668u, 0xA33639AEu, 0xA74908F8u, \n0xA1272484u, 0x5A60AADDu, 0xF92EC5CDu, 0x1031A0E3u, 0x588C0F08u, 0x1F7E5FCFu, \n0x816F5552u, 0xAE2FFD7Fu, 0xED870869u, 0x30FC2AF0u, 0xFFAB598Fu, 0xFC4C44C4u, \n0xCBBA6E48u, 0xC627ABBEu, 0x1138FA26u, 0xD7782C64u, 0xA6F6B127u, 0xF63D3E98u, \n0x9F097F5Fu, 0xB4AE1841u, 0xD0331689u, 0x2D6BA93Fu, 0x3C3D85A5u, 0xECD72294u, \n0x7C57A3B8u, 0xF098A212u, 0xB7B01E65u, 0xB6EBD61Bu, 0xF575DB19u, 0xCC5D9117u, \n0x192A8BE3u, 0x8F1F5DA4u, 0x12DE0A95u, 0x659F2F77u, 0xBCE0A2B0u, 0x9C18C442u, \n0x975B2878u, 0xA552D8D5u, 0xB6CEF5A3u, 0x3936D6C0u, 0xCC6D147Fu, 0x0A44D7D0u, \n0xB1D08482u, 0xF6FDAA1Au, 0xD50522AAu, 0x061C0150u, 0x10F5C64Cu, 0xD318D6D7u, \n0x905A2B13u, 0x468E070Cu, 0xDE6232DAu, 0x038786BBu, 0x142D5440u, 0x8962AE80u, \n0x09C85F5Au, 0x4997476Eu, 0x91CB4991u, 0xCD47F795u, 0x3713978Au, 0x49297585u, \n0x13E55737u, 0x99E74D41u, 0x1E11C50Cu, 0xF14F26A9u, 0xAA983A7Du, 0xD1186CD8u, \n0xC3260BC3u, 0x49B3337Fu, 0x7C42CC15u, 0x036E726Bu, 0x7E672E67u, 0x5A4AA4A0u, \n0x2DFAD6C4u, 0x8582FC97u, 0xA82E5508u, 0x1E124358u, 0x9AD7A03Cu, 0x73F53DF5u, \n0x51280826u, 0xAEAC05BFu, 0xEC4B6ED0u, 0x547BFB24u, 0x4B4C73BDu, 0x70135BAEu, \n0x29236287u, 0xB868A667u, 0x49096E64u, 0x4A853BD7u, 0xA53F3877u, 0xB0718669u, \n0x44D37890u, 0x7FCA8420u, 0x6937075Fu, 0x18E7D4B0u, 0xEF4D3995u, 0x64E3158Fu, \n0xC8A3EADAu, 0xF6AAAD07u, 0xD85BCC96u, 0x1A96E5DCu, 0xCE5284CFu, 0x413723C2u, \n0x6BFB5774u, 0x2DCDA96Eu, 0x16EE76A0u, 0xA1131619u, 0x40725CA4u, 0x68B90369u, \n0x811887CDu, 0xF0B70670u, 0x4C8C48FDu, 0xC64E1B5Bu, 0x8A1A8B1Au, 0x8D6C9DA5u, \n0x81EC6934u, 0x8E74F54Eu, 0x09DB637Au, 0x394EDEBBu, 0xA0FD5FE2u, 0x35E32E2Fu, \n0x62593F21u, 0x6FFE80C1u, 0xFD07078Du, 0x71299487u, 0x073167BFu, 0x44A6E2E1u, \n0x860B6890u, 0x23772918u, 0xC64E4E2Cu, 0x633675C1u, 0xB7942F95u, 0x95BB2900u, \n0x7DD4CB5Eu, 0x4C3CA541u, 0xFC8F173Eu, 0x0878FC11u, 0x82D16337u, 0x56B377B2u, \n0x9BBC96CCu, 0x0940C974u, 0x70C92C94u, 0x2AE28F49u, 0xB8BBF183u, 0x0413FA39u, \n0xC96D1A7Eu, 0x449C0DDAu, 0x42AF56B7u, 0xCE7255A8u, 0x9BF6741Au, 0xF35BC31Au, \n0x50711BD1u, 0x96B828CEu, 0xD117345Du, 0xB15C80FFu, 0xB05CC769u, 0xDA163133u, \n0x5A0AEBA4u, 0x40385BE5u, 0x73D87D56u, 0x0D56EFF2u, 0xDE599751u, 0x6310CE02u, \n0x54840F61u, 0x5351FB16u, 0x714773B5u, 0xB902FBD7u, 0xE8006CCAu, 0x24CB9A30u, \n0x6D940215u, 0xCEB3292Du, 0x77938CB9u, 0x284162B6u, 0xC3382E16u, 0xF1677B4Au, \n0x4452A00Au, 0x13D30B91u, 0x5832662Fu, 0x523D2153u, 0xE111CE7Fu, 0x7F7EE73Cu, \n0x4FC41EF4u, 0x3332E863u, 0xB1FB1939u, 0xD2E486D2u, 0xE5173AD0u, 0x15790DE9u, \n0x194F9CDFu, 0x943B9A63u, 0xBA22EC8Au, 0xFBA53284u, 0x8B9EC801u, 0x386BF66Fu, \n0x8617CABAu, 0x13570401u, 0x0F3E9841u, 0x2C256C78u, 0x7DE62C04u, 0x64358CF9u, \n0x13CEE091u, 0xFD55C761u, 0xF26E21E4u, 0xE889DCE2u, 0x1950DD02u, 0x0F2F1157u, \n0x82A9A2EBu, 0x31B7A4B8u, 0x37FA0FE7u, 0x6D970A52u, 0xC310F4B3u, 0x7604DA6Du, \n0x3189263Eu, 0x50AFD013u, 0x877B1D97u, 0xF1BCB58Eu, 0x13C4CF9Du, 0x7A5DB9E2u, \n0xEF6C7EACu, 0xEF4BCAACu, 0xA61A36DBu, 0x498B8517u, 0xC26889BDu, 0xAD548485u, \n0x12842071u, 0xB417FE8Eu, 0x666C125Du, 0x2B906162u, 0x7BD17CDBu, 0x15DB37EFu, \n0xABB9496Au, 0x2120DC79u, 0x613C7FDBu, 0xF98DE5A8u, 0xC67F8546u, 0x9D5F28C3u, \n0x3BA6C5C6u, 0xCCB2CD4Fu, 0x5058F499u, 0x9AEBE6C9u, 0x3DF4B550u, 0x66CB7B9Au, \n0x66989A0Bu, 0x4F65FB6Eu, 0x0C2F1FCAu, 0x1557BE44u, 0x70C07BAEu, 0x4DD28FF5u, \n0x4531E0A6u, 0xB0BABEC5u, 0x3DE5593Fu, 0x409E003Eu, 0xF15B4EECu, 0x05BF7D22u, \n0x4F8DFCFCu, 0xB6572B34u, 0xA956B21Bu, 0x7A26E97Du, 0x318BAF6Au, 0x331C7851u, \n0x4C413014u, 0x014765F6u, 0x95C7956Eu, 0x1304FAE1u, 0x8FBD6C7Cu, 0xAB4EAC83u, \n0x01E90E99u, 0x6CB616D6u, 0x4DCBF56Du, 0xDB1CC5D4u, 0xA6B1AA7Cu, 0x8E207625u, \n0x8BE52633u, 0xACDF805Du, 0x983E7446u, 0x351D1A79u, 0x00851BC6u, 0x954EC99Eu, \n0x7EEEECCBu, 0xF21127BDu, 0x3B8DE41Du, 0x642A12C1u, 0x570C7636u, 0x79D2AAB5u, \n0xEC4610BFu, 0x98BBBD8Du, 0xC11D9479u, 0x7C62C1A8u, 0xC3ADD256u, 0x3AEA7DBCu, \n0x11DFFBC4u, 0x28E4CA03u, 0xC85D57CFu, 0x3E0212BEu, 0xFE4A41D2u, 0xE78A3839u, \n0x8A77B4EDu, 0x59A6A4E9u, 0x55150FDCu, 0x608ADB31u, 0x7446A696u, 0xF50DEA70u, \n0x019F53FAu, 0x14680EB2u, 0xCB6566CBu, 0x4598EC37u, 0x3944F6D2u, 0x7F22807Du, \n0xFA8FDDD5u, 0xE0AA27FAu, 0x1F824599u, 0x7178C142u, 0x2B594525u, 0x9CD2505Eu, \n0xB9F2787Cu, 0xECFB4C58u, 0x8C64B11Au, 0x0E92A623u, 0x12D391EAu, 0x16D309ABu, \n0x0B14B458u, 0x7C233F54u, 0x5CCAB3E1u, 0xFB51239Du, 0x4175DAADu, 0xB0C48958u, \n0x94C26724u, 0x593C4D86u, 0x8DC68B14u, 0x7B0B8FCEu, 0x0146F2BEu, 0x289AAF96u, \n0xA36C66A4u, 0xA452D586u, 0xF9FFB40Fu, 0xBAAA9E23u, 0x290A2635u, 0x91AB8503u, \n0x47FCFD83u, 0x6F2B84BFu, 0x0A0FCAE6u, 0x71E8BA05u, 0x9831D032u, 0xDB00D1E2u, \n0xD0297421u, 0xBB6CA286u, 0x5D18DB45u, 0x53C101A7u, 0x64D5A1C4u, 0xD6197054u, \n0xC96A012Fu, 0xF09BD7CBu, 0x53E25925u, 0xB4168932u, 0xB0043EEEu, 0xDDE779BDu, \n0x5B20EED7u, 0xFAA078DFu, 0xF3A8F30Bu, 0xF3E22675u, 0x7F2DF062u, 0x196C682Au, \n0xC29381CBu, 0x368FD54Au, 0x27653EFCu, 0x28D391D8u, 0x6B4537A6u, 0xBF41C916u, \n0x74F35824u, 0xE825F9CAu, 0x7C0BE2E4u, 0xA1A55F04u, 0x9FFD0D14u, 0xB7F5E7F7u, \n0x152910AFu, 0x935F79CAu, 0xE75DB374u, 0x6D241815u, 0xCDED4696u, 0x9966C077u, \n0x8FB59F01u, 0x75B16382u, 0xC60AED28u, 0xBF8F1EB5u, 0x4ED56906u, 0x868B85C3u, \n0xA4E12414u, 0x93BFAA02u, 0x9155B609u, 0xCAFB7D53u, 0x22A217F2u, 0xFE7392F7u, \n0xEB6FE7B2u, 0x4558C472u, 0xC5971D8Du, 0xCA3F552Au, 0x9C25837Au, 0x2376BD57u, \n0x97042A3Cu, 0xA2E6EA60u, 0x8B7DFF1Cu, 0x913F465Au, 0x1A908D2Au, 0xFC9E1D17u, \n0x8E4F4E73u, 0x9E413ED3u, 0xC779221Fu, 0x88922840u, 0x4BE507ADu, 0xCC1938E8u, \n0xA4760CB4u, 0xBC6EB4C1u, 0x075DC961u, 0x9E6E3D53u, 0x68277AD9u, 0x74C3CA5Cu, \n0x5835CE84u, 0xCFF04990u); // array len 860\n\nuint map_uint_5[] = uint[](\n0x5FA0DF18u, 0xEBE0627Fu, 0xAB7E7014u, 0x99536575u, 0x56AA8875u, 0x972E8F60u, \n0x983848A5u, 0xE728F302u, 0xB417D7B4u, 0xE84B62E9u, 0x764E5D53u, 0xA06C8E96u, \n0x7948AF14u, 0x02BBE418u, 0x5F490E42u, 0x231D94BCu, 0xCEFEF7F0u, 0x2F47601Fu, \n0xFAD51377u, 0xF3D0FC9Au, 0x88BB3D74u, 0xCD9425ADu, 0xD6FBB908u, 0x944816B7u, \n0xBF157A7Eu, 0xE926C652u, 0xD98630BAu, 0x9D2BA2FAu, 0xB76BB47Fu, 0xF4996A44u, \n0x29C5ACB6u, 0x4B62F854u, 0x13E3C09Fu, 0xB3E473ECu, 0xD6B297B7u, 0xD21474CFu, \n0x6A763759u, 0xD10996D9u, 0x660C1F63u, 0x419F750Bu, 0x69B631A2u, 0x9314AEF5u, \n0x1482EEA3u, 0x049ABAF7u, 0xF2C486ACu, 0xAE5DA6AAu, 0x3FF54B69u, 0xC224F354u, \n0xD3F3CAF6u, 0x8AEFCD4Cu, 0x68EA39F5u, 0x0ED562DEu, 0x532E0AE8u, 0x27BB3E31u, \n0x609E62ECu, 0x5C6B128Eu, 0xC96A0E9Eu, 0x33FAB3E5u, 0xCD3D0BBFu, 0x0F472C3Cu, \n0x55EF8CDFu, 0xF32BF43Du, 0x39460F7Eu, 0x79496A85u, 0xA6106A64u, 0xAAD0B748u, \n0xEB3ACBEBu, 0x739595DBu, 0x54930666u, 0x3331618Bu, 0x389F6F8Fu, 0xA7B4A94Cu, \n0xC7B63DD6u, 0xFA21CC0Eu, 0x75A5E41Fu, 0x02614206u, 0xA3F3B2C4u, 0x19DDC02Du, \n0xACF02FA4u, 0x83E4A0EFu, 0x7902BEF8u, 0xEBDBDACBu, 0x964D9274u, 0x6DD86634u, \n0x8669BA96u, 0x89337CFCu, 0x8ECD66E2u, 0x574E335Bu, 0x2C108E5Bu, 0xD1EC93B3u, \n0x9DC0F24Au, 0x152B5589u, 0xFB5E50E4u, 0xC17F5753u, 0x2A82B8BEu, 0x9AABEC2Fu, \n0x08FF9FE2u, 0x23D09E82u, 0x66BF56FCu, 0x423C1319u, 0xB2D36A3Du, 0x86631C16u, \n0x617EFB30u, 0xF6EE6D48u, 0x5C1E1986u, 0x5D04C8ECu, 0x2EB27B56u, 0x9E07570Au, \n0x8020901Cu, 0xC6ABA417u, 0xB0C40735u, 0x98B7F17Eu, 0xC0BE3F2Cu, 0xFFC3B20Eu, \n0x093D815Eu, 0x184240DCu, 0xBEB52921u, 0xEE9D6777u, 0x78A0F604u, 0x5331B61Cu, \n0x7DDA2E2Eu, 0xF66AFC4Au, 0xAB1ACB91u, 0xC9716946u, 0x2BEF30C8u, 0x3BCFE9EFu, \n0x9B3CFAEFu, 0x103F009Bu, 0xD650DA9Du, 0xE2C42891u, 0xD7988D98u, 0xC4E736E6u, \n0xA415226Eu, 0x5685B411u, 0xEA9FA306u, 0x1575E9F6u, 0x0F488FFBu, 0x3FD1A4E8u, \n0x38917912u, 0x03A0E2C1u, 0x083B60E5u, 0x8A6CD1B4u, 0x302205A7u, 0x7EDBE947u, \n0xB8C8BBCFu, 0x15BD48F8u, 0x3965451Fu, 0x1B8106ABu, 0xD28ED571u, 0xCD5D942Eu, \n0xE24448D8u, 0x8E3D6134u, 0x6A9B758Du, 0x6E30F211u, 0x478855F4u, 0x8E381E9Bu, \n0xA97BF117u, 0x9C6AB920u, 0x51031C24u, 0x50913AD2u, 0x422DA59Du, 0xCA5ADDBAu, \n0xE583CDBEu, 0x7957890Au, 0x97A0A5FFu, 0xB25B79A4u, 0xB4E9A146u, 0xD9B56C2Au, \n0xEAB6CC34u, 0xF1E325B3u, 0x293AF67Au, 0x3C4CAD09u, 0xE12A0C00u, 0x70914869u, \n0x27C29533u, 0x9BFAE019u, 0x3D0754B5u, 0xE5586C96u, 0xFA6C5CEDu, 0x8B6EE4FEu, \n0xC90C385Fu, 0x6726E0D9u, 0x33AC7D51u, 0x4A894830u, 0x82AD8B73u, 0x07065211u, \n0x7A201820u, 0x1E3EFF44u, 0x73A1EFA0u, 0x794B9B58u, 0x5B41533Eu, 0x7143CCE4u, \n0xFE03873Au, 0xCF418518u, 0xFB080F5Au, 0x59CAD0E9u, 0x19B02434u, 0xB64CF4D5u, \n0x8A975520u, 0x51E6E906u, 0x8D9C896Du, 0x06C23922u, 0xB33AC60Bu, 0xB409F3C6u, \n0x534FB3BFu, 0xC51FA54Au, 0x3F12BFCAu, 0x552719E9u, 0x9C6B7E91u, 0xC4FD4C32u, \n0xBE7099F9u, 0x1C37F2EBu, 0xCED6E075u, 0x8279C965u, 0x2EE76682u, 0xF8E52893u, \n0x33E981F1u, 0x07C5CF9Bu, 0x613DCAABu, 0x234183BAu, 0xBA2EA9C7u, 0x622FBFD0u, \n0x52C562AEu, 0xA1141968u, 0xA7431608u, 0x1B73DC9Bu, 0xBFCF46F1u, 0x9D643305u, \n0x254D2655u, 0xEB990D7Eu, 0x8B84E8E9u, 0x3366BE15u, 0x68FDECD3u, 0xBAD310E4u, \n0x045CC4CEu, 0x2E1AD919u, 0xDFBA4F78u, 0x7E51D15Eu, 0xF1369A54u, 0x7118CC35u, \n0xD91F6D8Eu, 0xCDCC0E72u, 0x558E82EAu, 0x14370581u, 0xF45AD9C0u, 0x3DC1C4A9u, \n0xA7003E3Fu, 0x54F2103Eu, 0xAA3AE9EAu, 0xA612DA72u, 0x2392AEBEu, 0xB0CAFB54u, \n0xB4DDA60Au, 0x7668CF0Eu, 0x609E861Fu, 0xAC6231A2u, 0xFDC1FFB8u, 0x295D1266u, \n0x12F17A6Eu, 0x5C974D6Au, 0x82CAE804u, 0x10CE6D8Fu, 0x97C8267Cu, 0x1F3FB8AAu, \n0xFC3C9FE9u, 0x85020435u, 0x018315FEu, 0x46BDC10Du, 0x330F6358u, 0xD19A8C54u, \n0x4325F76Au, 0x2617044Fu, 0xBC9EBB4Au, 0x2AA103AFu, 0x25C7F2FAu, 0xBCE00F07u, \n0xB83C2182u, 0x982CF77Fu, 0x3211D6E8u, 0x0E0F6390u, 0x7E9F4E65u, 0xC5A24652u, \n0xAC5A1D30u, 0x7D812708u, 0x462F041Bu, 0x4B22D31Fu, 0x96ED1DCCu, 0x36C6CA66u, \n0xDB9EB565u, 0x0295CCE7u, 0x1E535CADu, 0x27935A2Eu, 0x956609C1u, 0xC3F5755Fu, \n0x54A205FDu, 0x57A3CDEBu, 0x79870660u, 0x3FCABDFDu, 0xADCD2B0Bu, 0x3A56EF8Fu, \n0x94A5ABB4u, 0x89EEA6EDu, 0x639CC5A9u, 0x5B737ECAu, 0x0EFD25AAu, 0xB7636B85u, \n0xD602EFD3u, 0x6B5E5496u, 0x7356EA2Bu, 0x8A9AC0FCu, 0xC9802AD9u, 0x61D7493Cu, \n0x687A47B9u, 0x380F4F92u, 0xAF80B80Au, 0xEB9CC02Eu, 0x6CAC3381u, 0x353D90D2u, \n0x60A1C8B8u, 0xA4E735A2u, 0xC40CBE19u, 0x6F2C532Cu, 0x5393D1E8u, 0xFFD81DB1u, \n0x3506DD62u, 0x7A083FF1u, 0x9C03B293u, 0xD3EB8AEDu, 0xEE4C2C2Fu, 0x39E1C6DDu, \n0x054FDF01u, 0xD7E708D5u, 0xA0DBA224u, 0x20672513u, 0x2CA991BFu, 0x48332CE9u, \n0x338F6C0Fu, 0xB44B1AEFu, 0x0D771081u, 0x6D094BD9u, 0x36E7F40Eu, 0x1FC1D6E2u, \n0x84A9AA4Bu, 0x67A153E4u, 0xFF47BD10u, 0x7FC0078Bu, 0x4430FCF5u, 0xC2656DC7u, \n0x2C3766CBu, 0xA9D5DCFBu, 0x1696BA14u, 0xF4B3F026u, 0x7E877A96u, 0x92F9CC24u, \n0xB235C307u, 0x2BCD23FDu, 0x87E79689u, 0x976F73BFu, 0x7197A8E1u, 0x563A7DA0u, \n0x397C7973u, 0x81F7B799u, 0x436C2D8Fu, 0x6F593B6Bu, 0x5DD9D0B3u, 0x330609CBu, \n0xDB035D59u, 0x38896E91u, 0x0CC8DDC1u, 0xD57B4D02u, 0x7D5F981Fu, 0x393D472Du, \n0xF78955FFu, 0x9C162FA8u, 0x13BF707Au, 0x95E013CFu, 0x10E1E34Cu, 0xE88DF8FBu, \n0xEFDCD7AFu, 0x659D85CDu, 0xA191CB20u, 0x78C54817u, 0xAB027BF0u, 0x5F6AF4E5u, \n0xEF80AED7u, 0x9D981559u, 0x44D0225Fu, 0xAAEBD31Eu, 0x2ADCDFF9u, 0x86F2B4C7u, \n0x5BD90FA6u, 0x3ED6588Bu, 0x9C924A6Du, 0x8C476B88u, 0xAE17D5F7u, 0x6403E344u, \n0xBC6B591Bu, 0xD9EEDBCDu, 0x9C3BA599u, 0x1C0C0205u, 0x5D699DBDu, 0xF83F8A59u, \n0x52850887u, 0xBAB83165u, 0x9AC3E63Du, 0xF3D7AE49u, 0x9CCE676Bu, 0x60FA466Eu, \n0x7580A712u, 0x3BEBA956u, 0x4387AEDDu, 0x0BE2FA81u, 0x241FE7EDu, 0x6C24BEE5u, \n0xB95B13BEu, 0xF5336250u, 0x93987F4Cu, 0xED3BBF07u, 0xAD268341u, 0x7228E223u, \n0x4A194FA8u, 0xA6EC381Eu, 0xF39B1525u, 0x86614858u, 0x0F748029u, 0xC83E70B9u, \n0x6A460F22u, 0xBD7DE0F3u, 0xA09AF83Fu, 0x370E40DDu, 0x2BFA2CC6u, 0xB236D647u, \n0x48D04FDDu, 0x1B4D25A5u, 0x600B428Au, 0x40894792u, 0x2069F917u, 0x798F7B83u, \n0x6E35C056u, 0x1A88D1BFu, 0x1523320Bu, 0x628FFEDFu, 0xA3D40E4Bu, 0xD84C4A86u, \n0xC8D474A7u, 0x27525A89u, 0xE095D291u, 0xE051DC55u, 0x50BC7E81u, 0x573E3DA7u, \n0xF817303Au, 0x6BBA8CACu, 0x896A3EF8u, 0xFA714816u, 0x7FC6AA64u, 0x86E71C44u, \n0xAAEE5DFFu, 0xF66566C1u, 0x8E7815ABu, 0x15F5028Au, 0xDD78707Bu, 0x87EA893Cu, \n0xE6113661u, 0x30EB44CCu, 0x4428E35Bu, 0x9704D76Fu, 0x98210D0Cu, 0xD10B27A0u, \n0xB4DA6B03u, 0xE33A08BCu, 0x8E55429Fu, 0xC39CD944u, 0xC908AAB5u, 0x32359CBEu, \n0x9D807CC1u, 0x0DF77FA2u, 0x5A619024u, 0x177EFF64u, 0x7D473CE2u, 0xC2F4490Du, \n0x294F411Cu, 0xAE8CC5BEu, 0x9B6388A5u, 0xFE80C4A8u, 0x6DC8E1CBu, 0x24657629u, \n0x23AD1E1Fu, 0x15039B6Au, 0xA3DD2659u, 0xAECA8E5Fu, 0xB9627F39u, 0x5D43B5E5u, \n0x4E90AC1Du, 0x6C08A4BFu, 0x7D879CEDu, 0xCE53DD2Fu, 0xA0D06D84u, 0x08C57759u, \n0xE9F57DA5u, 0x4DC894C3u, 0xA4AB8612u, 0xA3703EF3u, 0x50E00142u, 0xD141EAE7u, \n0xC8384FA2u, 0x3C990231u, 0xF4EB05AFu, 0xEAA0BE71u, 0x470709E8u, 0x273156E7u, \n0x69869D19u, 0x6E138CCCu, 0xD1125173u, 0xAC243996u, 0x48EACBDFu, 0x1C3CB656u, \n0x0308DB2Cu, 0x3E8E1FFFu, 0xDE0B112Cu, 0xEFE01782u, 0x5A2017ABu, 0x58A9A189u, \n0xE4D0D2F0u, 0xFAF2E578u, 0x2A3CE133u, 0xF70D5963u, 0xBABC0ACEu, 0xB6508D4Fu, \n0x4FF5BF73u, 0x7CFE0345u, 0x7A895CB3u, 0x47713D58u, 0xD000E968u, 0xB45DBA63u, \n0xB9D95FCDu, 0x64FBDB20u, 0xF7C39FDAu, 0xDF3CFE42u, 0x38C5B20Eu, 0xF659CE67u, \n0x45BD1DA0u, 0x4A928534u, 0x40818B59u, 0x5F418D11u, 0xC0E67417u, 0xFC4FEC0Au, \n0x56E81F8Eu, 0x0B43BD9Fu, 0x7E9E01A7u, 0x2FFD4F57u, 0x3C422186u, 0x2349100Au, \n0x358865AEu, 0x4FCA13B0u, 0x616CC46Cu, 0x5C6FCE7Au, 0x879A6302u, 0xF48254E7u, \n0xD0413ABCu, 0x669878D4u, 0x98FED56Du, 0x82F4C6A2u, 0x708133C8u, 0xE128FBB7u, \n0x3EFF1CDAu, 0xC8F8F0C7u, 0x50403EB2u, 0x7D35F4B5u, 0x2960834Du, 0x5FA175C9u, \n0x2FF598B1u, 0x2045DAE3u, 0x4175871Cu, 0x98D85ACFu, 0x4F6396FDu, 0x46D4BAFDu, \n0x4DFDE005u, 0x583DE78Au, 0x1078E291u, 0x153E4DC7u, 0x85557147u, 0xEAFC1471u, \n0xB11C9A47u, 0x33B9B62Au, 0x43015C65u, 0x0A5EF642u, 0x0E61799Au, 0x1236DD25u, \n0x88ED1AB5u, 0xCC5B77EDu, 0x9E00F156u, 0x1F35BA13u, 0x2A614CFEu, 0x4F01D7F9u, \n0x8AB7D508u, 0x5174E484u, 0x1BEE1F39u, 0x9D53F9A8u, 0x58C656DBu, 0xD2C0B476u, \n0x541C69B0u, 0x6AF31FB2u, 0x5474143Du, 0x92CD1436u, 0x9B706984u, 0x42506463u, \n0x0704025Du, 0xE589617Cu, 0xDAA56175u, 0x217BC283u, 0xEC386001u, 0x9FEEFE5Cu, \n0x34606BA2u, 0xEBC8F7A1u, 0x06EE0F73u, 0x6F387A29u, 0x2316BAE0u, 0x25C1A196u, \n0xAD8EE2F5u, 0xD9334E6Cu, 0x1BA722FAu, 0x59ECB3BDu, 0x7A359B66u, 0xA17214F0u, \n0x056C1C11u, 0xD797BF2Cu, 0x5ECDD1C1u, 0x55231D4Eu, 0x9CFBFBF4u, 0xFDF7C6CDu, \n0xBB700584u, 0xF9CE3EE6u, 0xBF279E38u, 0xFCC48387u, 0xB8C93850u, 0xA9C6E06Cu, \n0xCD3988D9u, 0xD6651F67u, 0x77A0187Cu, 0xF2420D65u, 0xA1CE5C2Du, 0xB84F397Fu, \n0x0F5B2005u, 0xE3FCE838u, 0xA579047Du, 0xAF477448u, 0xED5B6F4Bu, 0x34A1135Bu, \n0x20683695u, 0x8342E789u, 0x37EF78B6u, 0x6FB166B6u, 0x9454E958u, 0xD1BF95D1u, \n0x08ADF8BDu, 0x7BC9B5CBu, 0x71031CE3u, 0x0D1A3FD8u, 0xA77255D5u, 0x0E2E7FA1u, \n0xC37D330Au, 0xBEBD0F98u, 0x481691BCu, 0x9B35DD73u, 0x1D997BEFu, 0xA1A0A541u, \n0xD9633977u, 0x6F321639u, 0x255C011Cu, 0x553C0F3Au, 0xF85B36AEu, 0x3691BD44u, \n0xB7ED19ADu, 0x721858BEu, 0xF6992058u, 0x97BF81E3u, 0x7B565427u, 0xC801D6FFu, \n0xD3AFC7A3u, 0x82E7761Eu, 0x88E36486u, 0xB80C9758u, 0x76F561B9u, 0x2A199987u, \n0x175D9764u, 0xBA339614u, 0x0DAC3EF9u, 0x128ABC1Fu, 0xF4000000u); // array len 689\n\nuint map_map_uint_4[] = uint[](\n0x52353422u, 0x57345335u, 0x44352338u, 0x25354436u, 0x44455562u, 0x35215736u, \n0x53767235u, 0x34435465u, 0x43254463u, 0x35233364u, 0x52453653u, 0x34063815u, \n0x1A066552u, 0x76024337u, 0x24359665u, 0x62635398u, 0x34353485u, 0x24404364u, \n0x44253183u, 0x23453765u, 0x62246363u, 0x36811146u, 0x24463361u, 0x33167123u, \n0x41300413u, 0x22132321u, 0x45483844u, 0x62314523u, 0x51413431u, 0x32445430u, \n0x22873413u, 0x20254113u, 0x05278281u, 0x43135272u, 0x52246A65u, 0x54455476u, \n0x14124074u, 0x95322155u, 0x39026769u, 0x54424364u, 0x12437336u, 0x13654495u, \n0x76454426u, 0x44052515u, 0x55815326u, 0x61343553u, 0x42344334u, 0x22634613u, \n0x22574341u, 0x34454564u, 0x444A3364u, 0x46632282u, 0x43633526u, 0x33274533u, \n0x2A483174u, 0x39645916u, 0x15046183u, 0x58623244u, 0x43495153u, 0x256D4844u, \n0x16467272u, 0x35422086u, 0x74743354u, 0x5366873Bu, 0x71233323u, 0x40252530u, \n0x12321142u, 0x42024024u, 0x43321431u, 0x02463501u, 0x11321325u, 0x12424023u, \n0x31543710u, 0x11646532u, 0x11322213u, 0x22234341u, 0x31432035u, 0x20312625u, \n0x34203211u, 0x31143502u, 0x74644157u, 0x35252524u, 0x84136613u, 0x53363135u, \n0x12354654u, 0x54542322u, 0x67072474u, 0x44324552u, 0x04134151u, 0x35423256u, \n0x35444563u, 0x82454776u, 0x07438183u, 0x77324364u, 0x24345177u, 0x36956458u, \n0x22002331u, 0x42584204u, 0x12312322u, 0x50044501u, 0x33521153u, 0x43253443u, \n0x31320334u, 0x31422111u, 0x26434563u, 0x23524B85u, 0x52424552u, 0x32445343u, \n0x23594963u, 0x83343053u, 0x12245615u, 0x65552433u, 0x25475643u, 0x55454827u, \n0x3A565334u, 0x34281325u, 0x53656525u, 0x95373265u, 0x66436349u, 0x28455464u, \n0x37436A73u, 0x45457673u, 0x23345449u, 0x36156135u, 0x36886350u, 0x35662356u, \n0x46555358u, 0x54822674u); // array len 128\n\nuint map_map_uint_5[] = uint[](\n0x22017352u, 0x22677573u, 0x56523464u, 0x36388436u, 0x24533325u, 0x05731443u, \n0x82553637u, 0x27663439u, 0x21652663u, 0x67665543u, 0x65462522u, 0x28627A52u, \n0xB2683452u, 0x47733346u, 0xA4552355u, 0x2A757253u, 0x41312115u, 0x32252322u, \n0x14434345u, 0x35141414u, 0x22124515u, 0x23243313u, 0x01572421u, 0x21213212u, \n0x50100402u, 0x00202100u, 0x00000000u, 0x00000000u, 0x20400301u, 0x00121200u, \n0x00000000u, 0x00000000u, 0x62253351u, 0x38627225u, 0x56656574u, 0x56A465A6u, \n0x23574A42u, 0x32663342u, 0x55725366u, 0x44245455u, 0x14523213u, 0x23543301u, \n0x21324405u, 0x53303320u, 0x22543223u, 0x33632111u, 0x41722524u, 0x33253421u, \n0x3344A552u, 0x23765563u, 0x75847758u, 0x65652855u, 0x65644665u, 0x31512344u, \n0x53944846u, 0x55634745u, 0x34442545u, 0x27379325u, 0x17332456u, 0x46332353u, \n0x80943444u, 0x36232318u, 0x53823435u, 0x54655778u, 0x30000003u, 0x00503200u, \n0x00000000u, 0x00000000u, 0x40000100u, 0x00213400u, 0x00000000u, 0x00000000u, \n0x10300102u, 0x00143100u, 0x00000000u, 0x00000000u, 0x30100303u, 0x00111100u, \n0x00000000u, 0x00000000u, 0x32313444u, 0x32254422u, 0x32351325u, 0x42232135u, \n0x31224118u, 0x34057412u, 0x41273155u, 0x32251352u, 0x24224744u, 0x43634768u, \n0x43546542u, 0x38646134u, 0x56366463u, 0x61374454u, 0x55634455u, 0x56411754u, \n0x10200302u, 0x00321100u, 0x00000000u, 0x00000000u, 0x30000104u, 0x00221000u, \n0x00000000u, 0x00000000u, 0x34645222u, 0x02444311u, 0x22203602u, 0x32553624u, \n0x53552313u, 0x42433133u, 0x22331011u, 0x13311421u, 0x31843424u, 0x04327435u, \n0x23975356u, 0x15735274u, 0x43361872u, 0x15954352u, 0x44946568u, 0x67236456u, \n0x53484574u, 0x25422354u, 0x3A343426u, 0x86137733u, 0x34463562u, 0x35438318u, \n0x5A755455u, 0x43338458u); // array len 128\n\n#define self_buf iChannel0\n#define map1 map_uint_4\n#define map2 map_uint_5\n\n#define mapmap1 map_map_uint_4\n#define mapmap2 map_map_uint_5\nconst ivec2 mapmap_reg = ivec2(0,34);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx==ivec2(32,32)){\n        fragColor = vec4(1.,map1.length(),map2.length(),0.);\n        return;\n    }\n    \n    if(ipx.x>=32||ipx.y>=32){\n        if(ipx.y!=mapmap_reg.y||((ipx.y==mapmap_reg.y)&&ipx.x>=mapmap1.length())){\n            fragColor = vec4(0.,0.,0.,0.);\n            return;\n        }\n    }\n    \n    bool reset = texelFetch(self_buf, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(self_buf, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    if((ipx.y==mapmap_reg.y)&&ipx.x<mapmap1.length()){\n        fragColor = vec4(0.);\n        fragColor.x = uintBitsToFloat(mapmap1[ipx.x]);\n        fragColor.y = uintBitsToFloat(mapmap2[ipx.x]);\n    }else{\n        int idx_x = ipx.x+ipx.y*int(32);\n        fragColor = vec4(0.);\n        if(idx_x<map1.length())\n            fragColor.x = uintBitsToFloat(map1[idx_x]);\n        if(idx_x<map2.length())\n            fragColor.y = uintBitsToFloat(map2[idx_x]);\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// map of connections 7 and 8\n\nuint map_uint_6[] = uint[](\n0xD475C261u, 0xC19D2BC5u, 0xA802DBA9u, 0xEC2A25D7u, 0xE1311C8Fu, 0xC226300Au, \n0x1635B306u, 0x3358B6B9u, 0x293D0E22u, 0x5BC92A01u, 0xE7C93764u, 0x4D7F7DDDu, \n0x9A0DE098u, 0xF25833CFu, 0xC471AFDEu, 0x863FD04Fu, 0x3F7F33BCu, 0xB020EBE0u, \n0x7DDA0F97u, 0xA2257FACu, 0xF7BE94C4u, 0xAD045A5Du, 0x96664602u, 0xB825A590u, \n0xF583DCABu, 0x7A0504C7u, 0xC79BE1BAu, 0xE8A12229u, 0x4611CE41u, 0x9075E3A8u, \n0xDFE98400u, 0x943CE619u, 0x7511B008u, 0x525B6090u, 0xFFA70F9Eu, 0x5F4CC10Bu, \n0x17B7B236u, 0xA42762D4u, 0x633B0C5Bu, 0x0502F2DDu, 0xC1B3EF0Eu, 0x3F2EC5B6u, \n0x0BDBFA29u, 0x4F051413u, 0x1B32B10Fu, 0x7822E4A8u, 0x3D5DA29Cu, 0x4061F47Eu, \n0xA5BC912Fu, 0xDBB31C16u, 0x3EE6145Du, 0x534D6879u, 0x80B1B425u, 0x6298FD65u, \n0x7221FA7Bu, 0xB1839281u, 0x28118F42u, 0x96ADEF90u, 0xF2792CE0u, 0x022B0641u, \n0x520CF2AAu, 0xCFF0BD98u, 0xFF135967u, 0xF8CE6C75u, 0xA8A9CA8Eu, 0x099C0C80u, \n0xE2A4F514u, 0x8C9B56BDu, 0xE38AA763u, 0xB46D84C9u, 0x5D7210DAu, 0x0C99FDD0u, \n0x93B54CC5u, 0xFA691CE5u, 0xA1B7766Du, 0x648B34FBu, 0x2F863979u, 0x4EE356D2u, \n0x0F810727u, 0x73502250u, 0x19CA9079u, 0x96A9F28Cu, 0x0D39D4AFu, 0x38483CC6u, \n0x6E5A4BB3u, 0x45DDA392u, 0x69D5BE99u, 0xBDB63543u, 0xEEF1420Fu, 0x8E4797B7u, \n0x4350DB04u, 0x77F498D8u, 0x427BC585u, 0xF5E5F21Au, 0x1EE05B54u, 0x13025A94u, \n0x626436C4u, 0xA008AECDu, 0xC075973Eu, 0x11CAAA95u, 0x70B11EC8u, 0x5BA12831u, \n0x20EF290Bu, 0xAEDDE0C5u, 0x0BF08460u, 0xE654E325u, 0x3140D7D3u, 0xE7B6B2D1u, \n0x54B1B565u, 0xEB21F2AEu, 0xBFBB0107u, 0xCDE3325Bu, 0x9935A80Cu, 0x5E2F6A66u, \n0x1E7F51EAu, 0x06942FA5u, 0x2C5E26E4u, 0x8E465860u, 0x51C99BD3u, 0x869B679Au, \n0xD98D166Cu, 0x40AD2687u, 0x3EF87174u, 0x3BDCFC0Fu, 0x5CDBF4EFu, 0xEE456533u, \n0x1A24A264u, 0xD1BCE5C5u, 0x427B88B6u, 0x77746864u, 0xB112ED19u, 0x70A0F97Eu, \n0xFE5FE758u, 0x6570F9EAu, 0x1736DDEBu, 0xCB56A90Cu, 0xF886C96Cu, 0x0EEEEA30u, \n0x831D1E6Bu, 0xDBFF9C07u, 0x5E6D6073u, 0x0CB7F026u, 0xA37ED01Cu, 0xAEE75162u, \n0x53812912u, 0xAC06331Cu, 0xB8B62F7Eu, 0x940A3CFAu, 0x2A58CCF6u, 0x470D9BF2u, \n0x1547F7A5u, 0x282FF78Fu, 0xC239CDC6u, 0x05FD67EFu, 0xB03D6C8Cu, 0xD5B20F02u, \n0x8C1A6372u, 0xC4EB28ADu, 0x4A6D3A94u, 0x6FAB7FC3u, 0xCDC165AAu, 0x41FFC1CEu, \n0xA7C93ECFu, 0x365159E4u, 0xBF336B2Au, 0x7FCB14B3u, 0xB33A4215u, 0xEBB20689u, \n0x866E7160u, 0xC3B0DAD9u, 0x253090ADu, 0xE2A4AC39u, 0x71934DFAu, 0xCA81C396u, \n0x06EDA499u, 0x57B9B047u, 0x590A7712u, 0xB030BE23u, 0x0BCC0C05u, 0x5A31FCD7u, \n0xDF54F796u, 0x23003AF8u, 0x91592694u, 0x269B41B2u, 0xBF45F11Eu, 0x0F08FEB5u, \n0x9DC1BA3Fu, 0x5CC424A3u, 0x70C64259u, 0x76462AC3u, 0x706EFED5u, 0xBD991E9Eu, \n0xA623F6C4u, 0xB56E9304u, 0xBE5456A9u, 0xCC17D138u, 0x631B2544u, 0x009C783Du, \n0xFCE00A44u, 0xF00894F7u, 0x4471BC3Eu, 0xF2AB4811u, 0x39A3F030u, 0xFDBE963Eu, \n0xC13D4C0Du, 0x178B6972u, 0x573A3416u, 0xA596F5CBu, 0x74CDE7DFu, 0x6B36B23Bu, \n0x14CDC3F2u, 0x8E6B59EFu, 0x5DBC5085u, 0x0249758Eu, 0xBF983A68u, 0xF62FE464u, \n0x2718079Cu, 0xB9AB3ED3u, 0x84D7B392u, 0xDF2A9C30u, 0x6EADDAFEu, 0x55E554F6u, \n0x824F7EF2u, 0xDBEE217Cu, 0x2D662F6Bu, 0x3524A4B7u, 0x5EB661C5u, 0x02221030u, \n0xB2BAD33Bu, 0x4152DE09u, 0x634871AAu, 0x61F0C7E4u, 0x04CEA442u, 0xD201ED1Fu, \n0xD38D610Bu, 0x14010F9Au, 0xEAE135C6u, 0xBB66559Bu, 0x3591BCCEu, 0xD239D46Cu, \n0x38DC3485u, 0x0B51ACFEu, 0xF48AEC5Fu, 0x7EDF737Au, 0x0BC7FC07u, 0x5028223Du, \n0xC98749B3u, 0xC518923Bu, 0xFE354ECCu, 0x91F162E6u, 0x6B5384DEu, 0xB208BF68u, \n0x8051A1F8u, 0x17E87FB9u, 0x28E52FD7u, 0xEF4B5DBBu, 0x4F4EF048u, 0xEB57300Du, \n0x68DA0FBEu, 0x6A76C0B8u, 0xC0EB6397u, 0x93967D0Fu, 0x3FDD4C46u, 0xFDD2BF3Fu, \n0x32BA579Fu, 0x12264A7Du, 0xCC99B46Bu, 0x20F7630Cu, 0xC9E2D41Bu, 0xD4730A26u, \n0x6047D709u, 0x136B1F15u, 0xD3FC0153u, 0x277F3DF3u, 0xC704326Au, 0xCD7E09A0u, \n0xBBB936EDu, 0x6310768Cu, 0x96B6962Du, 0x92D6C288u, 0xC5F127B7u, 0x68F33708u, \n0xD219948Du, 0x979824C0u, 0x6DE3D0AAu, 0x8D79B75Au, 0xBA2074B4u, 0x079E6C8Cu, \n0xE2B130A1u, 0x49C477A6u, 0x2452314Fu, 0xDC49CD17u, 0x16930E31u, 0x9A399D9Fu, \n0xA648514Cu, 0xDDC20C2Cu, 0x105EBC96u, 0x9F60FBBFu, 0x4250D06Bu, 0x5C8F4984u, \n0x204D5853u, 0xA03D06A3u, 0x842ABC3Du, 0x9C9A9AD9u, 0x0CB79CB9u, 0xB0E8BEBBu, \n0x2EEF124Eu, 0x18C7394Fu, 0x87D026EDu, 0x3DF76C48u, 0x05B3AD81u, 0x0281DAD7u, \n0x575DEA86u, 0xF83BB736u, 0x5C2636BDu, 0x4100AE80u, 0xFF013805u, 0xA26DD94Fu, \n0x8932DAFAu, 0x40F4FCCDu, 0xDB43C71Du, 0xAD33B1ACu, 0x282436C9u, 0x2470CBF4u, \n0xC6D461CAu, 0xF351DCF6u, 0xA9CB888Eu, 0x9416275Cu, 0xCDDA5A56u, 0x498DC856u, \n0x282E58DAu, 0x026C01AAu, 0xA3E07C92u, 0x66AE0BFCu, 0x58BE36EAu, 0x25A40132u, \n0xB98B3F3Cu, 0x57EF224Fu, 0xC9C13E74u, 0xB65B86DEu, 0x5BA28912u, 0x976F124Au, \n0x98D1589Bu, 0x6EB11E64u, 0x3DF07E7Eu, 0x00B836F1u, 0x6A0E03A7u, 0x8C34C6F4u, \n0xE40ABA2Bu, 0xE95F5EF2u, 0x55739BDDu, 0xF5036146u, 0x9FF35402u, 0x969D4461u, \n0xC2A9BC3Fu, 0xF8D581A9u, 0xB03854BBu, 0xDC6A8811u, 0x304771A3u, 0x8608BECEu, \n0x7A5A65F6u, 0x42FDFDC8u, 0xC9ED8FBFu, 0x992501F1u, 0xECDC719Eu, 0x47B510A6u, \n0x5638D3A8u, 0xD3161CC0u, 0xE101B3F5u, 0x539E1CAAu, 0x7A7D6F88u, 0x5B4A04D1u, \n0xBBEFA29Fu, 0x76FC23F3u, 0x54E10845u, 0x183AD9A0u, 0x975C6560u, 0x96386B6Eu, \n0x76EA0D71u, 0x120FF281u, 0x5D08C6FDu, 0x0B34E398u, 0xD0508262u, 0xD98C09F1u, \n0xCBB2BAEFu, 0xD61BA519u, 0x3FF04DBEu, 0x2397D50Cu, 0x310D80BDu, 0x7D0A5F43u, \n0x9E67287Bu, 0x0911CF93u, 0x1D668ABDu, 0xC6D4F7ECu, 0xE7A64836u, 0xABC5E3D1u, \n0x61E05D5Eu, 0x6F6664DBu, 0x7C346DABu, 0xCB39DA69u, 0xD9160510u, 0x0198724Cu, \n0x91721500u, 0x01D25FB2u, 0x0C00F853u, 0xFC10115Du, 0x9A74E52Au, 0xA9C913ABu, \n0x92356464u, 0x5B597386u, 0xB8E36509u, 0x3F79F67Du, 0x00696DD9u, 0x4D518C12u, \n0x62000ABBu, 0xEA734F00u, 0x1128BC77u, 0xAE83AA25u, 0x1C8F22E7u, 0xB713696Bu, \n0xB3B91ECDu, 0x3A997C41u, 0x1E9791B7u, 0x7140FD8Au, 0xE1CE0A1Cu, 0x2A9AFE67u, \n0xA691A2A9u, 0x863A1832u, 0xCA46DD16u, 0x32B2B393u, 0xE50B8D46u, 0xC133A283u, \n0xEF9E4A83u, 0xE3D3E838u, 0x5C52283Eu, 0xE2C8C553u, 0x5ACCC294u, 0x2E14B3E4u, \n0xA7922C4Cu, 0xD6F94CC6u, 0xFFB7CDE9u, 0x2F2FA1A7u, 0x235072B9u, 0x83FDF7F7u, \n0x006F1F4Bu, 0x102BC770u, 0x289E43C7u, 0x2043EC68u, 0xB074F36Eu, 0xD6DB9BC3u, \n0x240AE49Eu, 0x709B6E5Eu, 0x4861C526u, 0x5B9C1F98u, 0xDDA57C01u, 0x5725BD90u, \n0xCBA6698Cu, 0x102E5496u, 0x470C368Du, 0x0DBE4231u, 0x4AF93E46u, 0x07EC2563u, \n0x235DB6DFu, 0xA205425Fu, 0xC1C48617u, 0x494A79F7u, 0xAD270E92u, 0xB776D2A4u, \n0x4AE975C9u, 0x48685DB2u, 0x9053C0E7u, 0xC178EED9u, 0x1B21F55Eu, 0x08E77902u, \n0x366A34FCu, 0x881A86A8u, 0xA580004Eu, 0xCC9EFE8Fu, 0x033DFA63u, 0xE118BD80u, \n0xFCFF81F1u, 0x5F8EC99Eu, 0xA81F0FB4u, 0x62D823A5u, 0xDE64AC35u, 0x642812F4u, \n0x45A5E35Eu, 0xDFB88518u, 0x83EDBAF3u, 0xDF0E299Cu, 0x2AB12592u, 0x83B5BB6Eu, \n0x8789B876u, 0x7B812D8Eu, 0x8AC49DC0u, 0x8EE23E95u, 0xEA67001Eu, 0x0EFFE2A1u, \n0xD16B0BECu, 0x9F99366Cu, 0xB920DEA3u, 0xFDE10805u, 0x4250E8BBu, 0x7F459CE1u, \n0x1938CC90u, 0x3C634BDDu, 0xDC8E68A8u, 0x15B983C5u, 0xBB409941u, 0xEE37B322u, \n0x6C6960B1u, 0x34630276u, 0x17DF20ABu, 0x39371165u, 0x41337A49u, 0xEC8FD776u, \n0x82ED191Cu, 0xC46C03B6u, 0x6E255A58u, 0x9A46AA7Du, 0x0943F364u, 0x63CDC11Eu, \n0x16A65753u, 0xD29ACBE4u, 0x2A6ABC7Fu, 0x01C8F75Au, 0x26E4FAD7u, 0x92D831C4u, \n0x47178C10u, 0x38E8D11Du, 0xBBAC2E76u, 0x4784910Au, 0xBE885C38u, 0x98BAD3F0u, \n0x75A932A8u, 0x29F07B76u, 0xABFDA37Eu, 0x9244BD68u, 0x082C74B6u, 0xD607CB41u, \n0x11F40044u, 0xE3229736u, 0x67572DAEu, 0xB4A45815u, 0x1C68B1F9u, 0xD3D7692Du, \n0x41BCB4E4u, 0x807CABD6u, 0x95B434ADu, 0xF279788Du, 0x231F43B1u, 0xD3009D68u, \n0xF3C73256u, 0x21E3F73Fu, 0xF8294DE5u, 0x02ED07CAu, 0x199C6423u, 0x3F8762C3u, \n0x6BF2B129u, 0x9AC6848Cu, 0xF36A18DDu, 0xB499A3D3u, 0x46705C29u, 0x6BF41C6Au, \n0xD8EE8DD6u, 0xD315717Cu, 0x7A11C967u, 0x90A15421u, 0xB074AEB6u, 0x5F0222B7u, \n0xCE6F7888u, 0x5302ACF5u, 0x7F1F0B78u, 0xA7EA8E32u, 0x1171F809u, 0xCA5286A2u, \n0x998E6562u, 0x5C860B31u, 0xD56DC463u, 0x3CBBC397u, 0x7E8B9094u, 0x9293A774u, \n0x79970574u, 0x12A19070u, 0x71D499D8u, 0x7FC389D7u, 0xC219B139u, 0x378CC06Fu, \n0x78CA79E9u, 0x4A09DE54u, 0xA0447F1Cu, 0xD5114AEBu, 0x49A8A512u, 0x6B68845Bu, \n0x92AD5EE7u, 0x4E72DEB6u, 0xD0627B07u, 0xD321E5B7u, 0x49987BA3u, 0x7DE6224Cu, \n0xBA58D8B2u, 0x22A4B06Du, 0x4062E28Du, 0x4C36AA3Eu, 0x4B6C814Bu, 0x797E17BAu, \n0x49A52133u, 0x4477D0A0u, 0x65C9B727u, 0x7F74E2BEu, 0x95A5B4F6u, 0x16CAB525u, \n0x90AC5D0Du, 0xA21F527Bu, 0xB4CC783Cu, 0x7968798Au, 0x3B024530u, 0x4CF3DE80u, \n0xF639C274u, 0xBED895C1u, 0xFEAB84BAu, 0xF867F055u, 0x5BC8B65Bu, 0xCB384FA9u, \n0x798B0E17u, 0xAC186471u, 0x52712CD3u, 0x17514F2Bu, 0x6312454Cu, 0xE13B3251u, \n0x0AB17165u, 0xD440EB16u, 0x1BDEC0E2u, 0x8FC01EFFu, 0xF344826Du, 0x4C198787u, \n0x864BF918u, 0xF8706A09u, 0x5026DCE0u, 0x1DC2D9FFu, 0x27695205u, 0x7444310Bu, \n0x540D16D7u, 0x6B614379u, 0x5876FFFEu, 0x6C93ED47u, 0x1B336685u, 0x01B977C6u, \n0x20EF326Au, 0x61BA23EFu, 0xF9F1FF92u, 0x2189539Du, 0x47F87FE6u, 0x0A68091Fu, \n0xCFFECFCBu, 0x99F5939Du, 0x19430CD7u, 0x16FEEBCBu, 0x32D0CA14u, 0xE4B83305u, \n0x73AF1D79u, 0x136C2E12u, 0x8DAAC0D1u, 0xC32D9939u, 0x23F7EE87u, 0xE54FF801u, \n0x3C4CC5F4u, 0x16D385ECu, 0x9F5D7970u, 0x3D2BA028u, 0x473B486Eu, 0xA94BE6E7u, \n0xF8A58863u, 0x6BB5D7A3u, 0xE876517Du, 0x979E679Fu, 0x7A247241u, 0xAE172CD0u, \n0x3D86F596u, 0x62F7FC2Bu, 0x80000000u); // array len 681\n\nuint map_uint_7[] = uint[](\n0xBD5550AEu, 0x96E2A04Fu, 0xA9992BDCu, 0x8555B0C1u, 0x44F5FD74u, 0x7C041F17u, \n0x2BFB2B51u, 0xE3151EE8u, 0x259A761Cu, 0xE94F7F55u, 0x9D31A123u, 0xE07C17BFu, \n0x6A0ADE33u, 0x1160F1A9u, 0xF489F52Cu, 0xE654FAC8u, 0x1151E71Du, 0x46F8AACFu, \n0x9121A489u, 0xC22BCB82u, 0xD5E23FB5u, 0xC0760506u, 0x61D900C5u, 0xB790F421u, \n0x9A694944u, 0x0E10C692u, 0xE346B83Du, 0xC21DF4FBu, 0x56875E14u, 0xDEA2D947u, \n0x6D0CE4DCu, 0x7952B1BEu, 0xAB1B2040u, 0x6844CB99u, 0xDE574F27u, 0xFA71C32Bu, \n0xE746A080u, 0xB76CA7FCu, 0xB31AC792u, 0x7011C650u, 0x99CAD00Au, 0x31DE54C1u, \n0x08B40311u, 0x9E6A6452u, 0x6ED07BB4u, 0x212702DFu, 0xD46479A9u, 0xFD66D507u, \n0x50FBD3BCu, 0xD1001429u, 0xE4A04FE5u, 0x03B2B1C1u, 0x34F7C6E5u, 0x32E0B94Cu, \n0xB66326F4u, 0xA1AA913Au, 0x5305B77Eu, 0xF5EA7687u, 0x2FCE66EEu, 0xDB4E3FC8u, \n0xED8FCF00u, 0x38E0CEC1u, 0x48C67970u, 0x7ACCC3CDu, 0xA71FA7BAu, 0x4CC0D668u, \n0xAE2A2700u, 0xEF204B9Bu, 0xC3E3AC0Eu, 0x9A82C899u, 0x4AD829ABu, 0x7A9E7E05u, \n0x4E910A31u, 0x85D71D97u, 0xBC5492C2u, 0xA0F078A8u, 0x7A01158Eu, 0x979F54A8u, \n0x18A692B1u, 0x4B9D514Eu, 0x0C78D5A3u, 0xAEDA0366u, 0x7656A459u, 0x4A217CA6u, \n0x0316D454u, 0xA0662162u, 0x938DB18Cu, 0x93D25490u, 0x1FAD612Cu, 0xB9175B1Eu, \n0xBB551672u, 0xF9D56C03u, 0xD75EC0BFu, 0x4B9E71F5u, 0x538969B9u, 0x0DF0FBC6u, \n0xBCB8B498u, 0xF3D55573u, 0xE09DC7CCu, 0x08AF2027u, 0x80800947u, 0x2AE01186u, \n0x21AD897Bu, 0x9696331Au, 0x6EDBA305u, 0x9CEBF33Eu, 0x0424C5C6u, 0x9ADF6428u, \n0xEEC24E1Cu, 0xF4DEC6F1u, 0x38B87FC6u, 0xDC0F492Au, 0x9A03932Fu, 0xCFF3A88Eu, \n0xC2E93316u, 0xE6092EB1u, 0x26C886C8u, 0xFA595C48u, 0xE99D0F88u, 0xD41EDA3Eu, \n0x9E670589u, 0xE5B5BF63u, 0x0C607A9Eu, 0x72B83F5Eu, 0x08317A3Eu, 0xF1BF76BCu, \n0xF2ECA041u, 0x365D3136u, 0x5BD79299u, 0x2A23539Au, 0x654007A8u, 0x0725B224u, \n0x11CDC184u, 0xA2F9FD83u, 0x936AE3E3u, 0x69339177u, 0x057D1E03u, 0xF5D1E4B0u, \n0x0F3C22EEu, 0x2962F2E6u, 0xF2511945u, 0x31133BB2u, 0xD8896C91u, 0x1FCA15CDu, \n0xB318E9CAu, 0xBFDE7622u, 0xE6BD6AF3u, 0xE1B4C5F5u, 0x85CCD702u, 0x5F751A30u, \n0x6B790714u, 0x3276DAD2u, 0x8413EB60u, 0x55D5A712u, 0x1E3596A2u, 0x5B22B93Cu, \n0x22542911u, 0xDE9E6B7Au, 0x96DC4CEFu, 0x410D9BD3u, 0x7F65DD44u, 0x6FCB1693u, \n0x6ECD8B42u, 0xD0240A57u, 0x08727808u, 0x87545918u, 0x994C914Au, 0x675D585Eu, \n0xB1A39D50u, 0x59F7F210u, 0x692C65BFu, 0xC2C408D2u, 0x68D2622Eu, 0xBDB09A65u, \n0x769A4587u, 0xB8AB818Au, 0x7289207Bu, 0x4241EBC2u, 0x0F801178u, 0x78D31C52u, \n0xE4CCEF34u, 0xE9346491u, 0xEE95C686u, 0x19E12D1Fu, 0xE0DA162Du, 0x9CC64C47u, \n0x357B5DB4u, 0x67797255u, 0x21AA811Eu, 0x0F0DD42Du, 0xBA83D8A0u, 0x286B2E17u, \n0x99D0540Bu, 0xF6DEA34Bu, 0xD1DC9AA2u, 0x5359448Cu, 0xB2C70CC9u, 0xDE599C19u, \n0x8D8EB989u, 0x1DF026CAu, 0xE0A41F53u, 0xA91DD993u, 0x0942340Au, 0xF0899471u, \n0xA21F9EBEu, 0x7E56ADB3u, 0xFE48D995u, 0x58BE2A70u, 0xB4F40EDCu, 0x172D2168u, \n0x9AAAC3F1u, 0x813A45AFu, 0x27205C23u, 0x97579108u, 0x3FF65AB1u, 0x852C51AAu, \n0x730FD958u, 0xFB373F21u, 0x4FC97570u, 0x55F53652u, 0xB961DD04u, 0x2C5E9EEBu, \n0x668BB123u, 0x1D7DE1FBu, 0x067278ADu, 0x5636D550u, 0x96CA9E8Du, 0x1B57C20Du, \n0x2410BC79u, 0x907FE3C3u, 0x121CCE8Du, 0x5E9DA933u, 0xCA997FE0u, 0xC2ED6893u, \n0x12B756A7u, 0x1F798A62u, 0x385B79ACu, 0xFA0161B6u, 0x02687435u, 0x64615E51u, \n0x1CF08F81u, 0xEC15334Cu, 0xF3DE18AFu, 0x3526BF9Fu, 0x0A403030u, 0xB822A444u, \n0x9D35B62Eu, 0x27239866u, 0x6BD5BB51u, 0x6216D84Du, 0x711D4437u, 0xB595498Fu, \n0x004B01EBu, 0x6BA61931u, 0x29E02502u, 0x07E766F4u, 0xF2257106u, 0x0E99D11Du, \n0x6ED58DA9u, 0x2970175Bu, 0x205A2635u, 0x1AB85884u, 0x28426778u, 0x49B192D8u, \n0x96E0AB40u, 0x76A28A92u, 0xF14E8522u, 0x503AC907u, 0x6C66B376u, 0xA286332Fu, \n0xD166D38Du, 0x57757411u, 0xC4F47BF9u, 0x1DEB1A1Bu, 0x604E585Bu, 0x56E3CBA7u, \n0xBC305F73u, 0xE7BC8987u, 0xBF60CF51u, 0xFE4F8ECDu, 0xBC63E12Eu, 0x0CA7EDD4u, \n0xF999065Au, 0x0B659C07u, 0xCD453EF7u, 0x45ECEFD1u, 0x7F1B478Cu, 0x776648BFu, \n0x6E6B495Du, 0xEFD3B8A9u, 0x37214680u, 0x95314F2Cu, 0x5D211635u, 0x6A8C3F70u, \n0xD4094350u, 0x1B6E3C0Fu, 0xD7470844u, 0xD7FCC489u, 0x0E158642u, 0x1999D833u, \n0x683EC586u, 0x329BBC57u, 0x76ADFA5Eu, 0xFFBDB93Cu, 0x50A58784u, 0x1C1752FCu, \n0x96866F32u, 0x4DDC588Cu, 0x2A1DEC3Du, 0x3640FA52u, 0xEEBB6D50u, 0x101E154Bu, \n0x4353F7DEu, 0x6F2157EBu, 0xD39AB953u, 0x7D9F6237u, 0x2BA24357u, 0x87A05569u, \n0xB23643C4u, 0x4E3F3614u, 0x3FE25E1Cu, 0xECC908CEu, 0xD798BF7Au, 0xC8B40FBEu, \n0xF6AC5CD3u, 0x14EF1A54u, 0x86DFB019u, 0xA79EF86Fu, 0xE7BB4822u, 0xBCF37C89u, \n0xF0E0A658u, 0x31C8B631u, 0x136CEE5Au, 0x25636ED7u, 0x460A876Cu, 0xF3F56E5Bu, \n0x2C8E76BBu, 0x4A421B59u, 0x45B3B42Au, 0x8C000ECCu, 0x6D18DF81u, 0x7264296Cu, \n0x0D5CB042u, 0x96DCD0C8u, 0xA2DA1742u, 0x180CB883u, 0xA72686E2u, 0x39D04F69u, \n0xB3DD5237u, 0x1598ED59u, 0xC269DB98u, 0xC3C9F8BBu, 0xF485D316u, 0x17EA01BFu, \n0xFB7D6621u, 0x68FECF15u, 0xD7B78FCFu, 0x509FC3F4u, 0xDDA5A549u, 0x302A1621u, \n0x0D9717D3u, 0x5D7D8EA3u, 0x2D8B3A27u, 0x4A2324FAu, 0x0AD1345Au, 0x21DF125Bu, \n0x0B809D93u, 0x376AF1CCu, 0x83CE055Cu, 0x525B72F7u, 0x2DED46ADu, 0xB83CE95Cu, \n0x0F793F02u, 0x5C614026u, 0xCB6E185Fu, 0x18EAC0C3u, 0x24745F48u, 0xBA2E2970u, \n0x612084A0u, 0x4494812Fu, 0xDFA77C21u, 0xF570B1F3u, 0x987E508Eu, 0x8E03AE74u, \n0xBB2C17A2u, 0x38F6A8D2u, 0x709EA7D0u, 0xC93D0EBFu, 0xDFEF047Du, 0x7FF7E661u, \n0xF718A489u, 0x4F50F1C4u, 0x8224CD69u, 0xC6ACCC5Cu, 0x46DF7577u, 0xDE550FDCu, \n0xC97B69A8u, 0xC374E5D9u, 0xA991465Au, 0xA21D85D2u, 0x4CDA872Fu, 0xDAD1B43Du, \n0x63826FAFu, 0x1D1D17CCu, 0x200E6721u, 0xE128D47Du, 0x3E80F675u, 0xC182097Au, \n0xA23C1E9Bu, 0x8624AA89u, 0xB74A850Eu, 0xF937A477u, 0x410350C5u, 0xC17114DAu, \n0x17E995DAu, 0x3D8C4F7Eu, 0xBDCC0664u, 0x4EC18EEBu, 0x465331DCu, 0x45FFAE4Bu, \n0x9CC530B0u, 0xA24B5162u, 0xDF622A5Au, 0x282D7C75u, 0xBC6F20EBu, 0xF8FCE09Fu, \n0x8A49DE58u, 0x39BD542Bu, 0xFE06E0ABu, 0xF37FE5CDu, 0xC62482DAu, 0x0CBC915Bu, \n0xB9F5C4BAu, 0xA76DA88Bu, 0x39798081u, 0x6DCA596Du, 0xD4F88144u, 0x8F8A3F48u, \n0x8722D448u, 0x860B104Au, 0xE47642F6u, 0x8692A1A8u, 0x88839287u, 0x32DF7C85u, \n0x0DD6D29Bu, 0xB274F490u, 0xD91748A8u, 0x730F93F8u, 0x1ECAE52Eu, 0xB7740134u, \n0xC6DF997Eu, 0xA1C58D31u, 0x5A35C39Du, 0x8ADFB63Au, 0x0E8168F4u, 0x5915A6B4u, \n0xB8667DC5u, 0x54F87E6Eu, 0x536E2AA8u, 0xE8F79738u, 0x5C9FB406u, 0xF67A9508u, \n0x00AAE087u, 0x2651E30Du, 0xEB5C18DDu, 0xEDB98217u, 0x95D5581Eu, 0xB20224B8u, \n0x4C6E4085u, 0x7163915Au, 0xA7BF12F9u, 0x5BB1B689u, 0x38526603u, 0xF33D183Eu, \n0x9C7BD401u, 0x5FE9D6EAu, 0xDBF19504u, 0x7665E388u, 0xE808C179u, 0x2354D712u, \n0x23633526u, 0xD3AB6144u, 0x5F533881u, 0x4850CEEAu, 0xE2D276E2u, 0xCC43F454u, \n0xFE8AD2E1u, 0x47CD473Cu, 0x50EB2A7Eu, 0x0BEF4F98u, 0x67C313E3u, 0x0A974CE2u, \n0x5C277871u, 0x7EED1AE6u, 0xD0593074u, 0x99D91A4Du, 0x7B45F928u, 0xFD88F096u, \n0x985750FBu, 0x497E07F0u, 0xAFA0519Du, 0xE9F25714u, 0x326755FFu, 0xDEA77703u, \n0xB412094Au, 0xCADB9618u, 0x3A896086u, 0xBB43AFB2u, 0xA5132E36u, 0xCD9E3456u, \n0x328A7D6Cu, 0xAFDDD1BAu, 0xE85B248Bu, 0x6EFB27F5u, 0x5C47A025u, 0x304CB291u, \n0x74B22EA3u, 0xD9AF5422u, 0x13DDD417u, 0xFD58A33Bu, 0xFA845821u, 0x676FEABDu, \n0x16D8F22Cu, 0x10DA2317u, 0xC9521FBEu, 0xA54AE558u, 0x8C5334F6u, 0x131E4ACBu, \n0x1B21F63Bu, 0x61BC60FAu, 0x6E5E7479u, 0x19997BC3u, 0xFBA213C5u, 0x7B223920u, \n0x79E82112u, 0x2E7E3ABDu, 0x9FF107D9u, 0x94EDE9CAu, 0x5AD98CA9u, 0x34E47103u, \n0x4DD58C99u, 0x8F248A5Cu, 0x09D31114u, 0x4BD1EFE0u, 0x5E15C885u, 0xF4E780CCu, \n0xCDC44ECFu, 0x366CA34Du, 0x5A199E34u, 0x84753DA2u, 0x60669DC2u, 0x4C3251B6u, \n0xB82543A8u, 0x143703D2u, 0x2930E0E6u, 0x2247CB03u, 0xEE33CEC1u, 0x11ED08A4u, \n0x1C2A8AD3u, 0x9C95E2E3u, 0x4CB98BA2u, 0x2A5CD17Au, 0xB5D71561u, 0x6CA1883Eu, \n0x38D25576u, 0xAD1CB3D8u, 0x445CFFBCu, 0xAACAC15Fu, 0xBBF8223Fu, 0x0C6295C8u, \n0x45E6B75Eu, 0x2764CA62u, 0x9A6E0537u, 0xF7FA085Au, 0x77E5D434u, 0x398B3487u, \n0x0759BED0u, 0x6D17E475u, 0xE7E7022Cu, 0x1F9BB318u, 0x49C0566Du, 0x3B806B83u, \n0xAC2E9FDEu, 0xFFAD5A07u, 0xFD49C80Du, 0x4DA52DADu, 0x214C2474u, 0xCD9B96A8u, \n0xB14B3ABAu, 0x904DE4A2u, 0x050AE53Eu, 0xCBC67287u, 0xB74E6767u, 0xCAD4819Fu, \n0xD0865631u, 0x30E3E206u, 0x708F5070u, 0x9FE18904u, 0x3927FACCu, 0x022A5236u, \n0xBEF874E7u, 0x2CB15497u, 0xB697A219u, 0x7DA3266Du, 0x6E36F106u, 0x314FFFF4u, \n0xD2653A6Au, 0x0E82AC25u, 0x0CF2A83Fu, 0xDB3D4A19u, 0x70D63470u, 0x75390D0Cu, \n0x247550B5u, 0xAC23077Au, 0xB385F594u, 0xE1D1171Bu, 0x5919B976u, 0xC5DDFBCBu, \n0x523512C0u, 0xDD9DDA36u, 0x3C6A858Au, 0x2973658Eu, 0xBCC1AA7Bu, 0x8B67A017u, \n0x26EC9BCDu, 0xC8147B8Eu, 0x3FDD50B3u, 0xB877A82Fu, 0xA0EAF557u, 0xEE49C470u, \n0x609F9DD0u, 0x4BCAFDB0u, 0x74F22A50u, 0xB4C39CBAu, 0x0ACE8674u, 0xEC2DEA7Du, \n0x5E076B11u, 0xDC584EBFu, 0x3B2B0B22u, 0x9695F5A3u, 0xDAFC4EE0u, 0x91C7A400u, \n0x51AC6D18u, 0xC5B4983Fu, 0x7A81F1E8u, 0xF209BFE6u, 0xB6EC8BE6u, 0x08F64C06u, \n0x5B623D1Bu, 0x6B83B32Cu, 0x6ED2EDE0u, 0x9A376394u, 0x20D0A558u, 0x10BBA8F0u, \n0x0F53279Du, 0x84A79C8Au, 0xB5BEB137u, 0x49FD6FFCu, 0x2BF743E3u, 0xF4240D71u, \n0x4D910DB1u, 0xFE4FA1E3u, 0x3F87BBC2u, 0xDB83AE1Bu, 0x9A9DB22Bu, 0x03A631B0u, \n0x3C6E0FD2u, 0x5B711C95u, 0xFBA67974u, 0xF3DEABD9u, 0x7DC0CB80u, 0x2388CE75u, \n0x0460EEA5u, 0xBCBEDC30u, 0x82FADB0Fu, 0x953C1BD4u, 0x84A84C0Fu, 0xA8AB9F1Cu, \n0xC8C12D25u, 0x586C3349u, 0xCEBBC183u, 0xEE330BDCu, 0xB4CBE8EFu, 0x61B72878u, \n0x8B6833DCu, 0xC5CE42A9u, 0x8C454A64u, 0x99638AC4u); // array len 688\n\nuint map_map_uint_6[] = uint[](\n0x35235255u, 0x45444427u, 0x41645545u, 0x66394752u, 0x53456232u, 0x43127610u, \n0x55255816u, 0x73375253u, 0x43634775u, 0x44884570u, 0x61794467u, 0x33663252u, \n0x234459C5u, 0x433B5635u, 0x64340346u, 0x42413240u, 0x31493222u, 0x12246312u, \n0x61237121u, 0x41113004u, 0x42418401u, 0x42273502u, 0x23263332u, 0x01013642u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x5356795Au, 0x44566999u, 0x48313452u, 0x24554441u, \n0x84A35858u, 0x68749A46u, 0x76417244u, 0x22725454u, 0x43136252u, 0x35024421u, \n0x22034325u, 0x32171522u, 0x32440314u, 0x42464120u, 0x62133022u, 0x20015314u, \n0x34455577u, 0x34336337u, 0x57361524u, 0x31545244u, 0x14553254u, 0x26636553u, \n0x73294377u, 0x96562753u, 0x92953646u, 0x48645487u, 0x34642334u, 0x55755646u, \n0x34764847u, 0x45651784u, 0x35674556u, 0x54469428u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x62580043u, 0x14561343u, 0x23243420u, 0x00135100u, \n0x61531322u, 0x23520223u, 0x03271134u, 0x16223423u, 0x37747846u, 0x65568764u, \n0x74274324u, 0x63453822u, 0x92435955u, 0x54D79A58u, 0x35603434u, 0x5741B445u, \n0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, 0x00000000u, \n0x00000000u, 0x00000000u, 0x34401242u, 0x02123224u, 0x22277152u, 0x53411354u, \n0x23453921u, 0x32265221u, 0x42120144u, 0x42411411u, 0x62452455u, 0x15444747u, \n0x85627564u, 0x84347973u, 0x32424563u, 0x34363155u, 0x47334473u, 0x61546A61u, \n0x22879714u, 0x65546794u, 0x37407276u, 0x35577636u, 0x51533145u, 0x35375463u, \n0x77336555u, 0x42264454u); // array len 128\n\nuint map_map_uint_7[] = uint[](\n0x43525466u, 0x56281443u, 0x15739962u, 0x43537825u, 0x034A2268u, 0x54225032u, \n0x36526433u, 0x52655755u, 0x63453653u, 0x73377223u, 0x34335557u, 0x55641588u, \n0x84678546u, 0x33542332u, 0x42725639u, 0x43142551u, 0x33411415u, 0x56453414u, \n0x26343322u, 0x56540111u, 0x52102323u, 0x51615424u, 0x23502355u, 0x22123414u, \n0x20100301u, 0x00403000u, 0x00000000u, 0x00000000u, 0x30500400u, 0x00323100u, \n0x00000000u, 0x00000000u, 0x76456434u, 0x44186518u, 0x32633347u, 0x14423134u, \n0x43255736u, 0x33265345u, 0x14623643u, 0x29487424u, 0x11204452u, 0x25363336u, \n0x41432533u, 0x26225164u, 0x34325202u, 0x34434232u, 0x36542319u, 0x42343245u, \n0x83862444u, 0x36136575u, 0x34853144u, 0x75629853u, 0x09754246u, 0x29235531u, \n0x54627254u, 0x62954374u, 0x22322224u, 0x43675535u, 0x92523326u, 0x45413644u, \n0x24635564u, 0x84595114u, 0x66562657u, 0x48544754u, 0x20000103u, 0x00230400u, \n0x00000000u, 0x00000000u, 0x20200101u, 0x00112000u, 0x00000000u, 0x00000000u, \n0x40100102u, 0x00232300u, 0x00000000u, 0x00000000u, 0x10100002u, 0x00211400u, \n0x00000000u, 0x00000000u, 0x22031513u, 0x73531562u, 0x55355444u, 0x16412202u, \n0x25213416u, 0x53336411u, 0x23343227u, 0x72052543u, 0x33623542u, 0x34563325u, \n0x45445816u, 0x44453832u, 0x51456244u, 0x10332563u, 0x24445464u, 0x97365462u, \n0x20300003u, 0x00122200u, 0x00000000u, 0x00000000u, 0x10200203u, 0x00121100u, \n0x00000000u, 0x00000000u, 0x34234936u, 0x24830322u, 0x24641224u, 0x32311155u, \n0x12414117u, 0x11655515u, 0x23453433u, 0x54221514u, 0x34228107u, 0x17345754u, \n0x56503436u, 0x34359532u, 0x64577726u, 0x14475313u, 0x46365233u, 0x75548B34u, \n0x42455763u, 0x43244355u, 0x85235441u, 0x72733617u, 0x63773547u, 0x42323238u, \n0x51544874u, 0x7333B763u); // array len 128\n\n// moved here because ANGLE in AMD GPU broke on arrays in cubemap shader\nuint map_ta2[] = uint[](\n0x3364336Cu, 0x33733374u, 0x3464346Cu, 0x34733474u, 0x3764376Cu, 0x37733774u, \n0x4464446Cu, 0x44734474u, 0x4D644D6Cu, 0x4D734D74u, 0x4E644E6Cu, 0x4E734E74u, \n0x5764576Cu, 0x57735774u, 0x5864586Cu, 0x58735874u, 0x6364636Cu, 0x63736374u, \n0x6464646Cu, 0x64736474u, 0x6664666Cu, 0x66736674u, 0x6C646C6Cu, 0x6C736C74u, \n0x6D646D6Cu, 0x6D736D74u, 0x7364736Cu, 0x73737374u, 0x7464746Cu, 0x74737474u, \n0x7764776Cu, 0x77737774u); // array len 32\nuint map_ta1[] = uint[](\n0x32334247u, 0x4B535658u, 0x6364666Au, 0x6C737479u); // array len 4\nuint map_tb2[] = uint[](\n0x33443352u, 0x3357337Au, 0x42444252u, 0x4257427Au, 0x47444752u, 0x4757477Au, \n0x53445352u, 0x5357537Au, 0x58445852u, 0x5857587Au, 0x63446352u, 0x6357637Au, \n0x66446652u, 0x6657667Au, 0x79447952u, 0x7957797Au); // array len 16\nuint map_tb1[] = uint[](\n0x31323334u, 0x37384244u, 0x47484B4Du, 0x4E525356u, 0x57586364u, 0x66686A6Cu, \n0x6D6E7273u, 0x7477797Au); // array len 8\n\n\nconst int et_a1[] = int[](239);\nconst int et_a2[] = int[](564, 612, 787, 798);\nconst int et_a3[] = int[](195, 196, 233, 548, 804, 815);\n\nconst int et_am[] = int[](364, 857, 12, 347, 938, 985, 84, 47, 965, 386, 1008, 766, 67, 105, 341, 519);\nconst int et_bm[] = int[](300, 276, 507, 879, 323, 705, 647, 519, 2, 370, 861, 805, 222, 153, 671, 986);\n\n\n#define self_buf iChannel0\n#define map1 map_uint_6\n#define map2 map_uint_7\n\n#define mapmap1 map_map_uint_6\n#define mapmap2 map_map_uint_7\nconst ivec2 mapmap_reg = ivec2(0,34);\n\nvoid mainImage_self_m1( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx==ivec2(32,32)){\n        fragColor = vec4(1.,map1.length(),map2.length(),0.);\n        return;\n    }\n    \n    if(ipx.x>=32||ipx.y>=32){\n        fragColor = vec4(0.,0.,0.,0.);\n        return;\n    }\n    \n    bool reset = texelFetch(self_buf, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(self_buf, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    int idx_x = ipx.x+ipx.y*int(32);\n    fragColor = vec4(0.);\n    if(idx_x<map1.length())\n        fragColor.x = uintBitsToFloat(map1[idx_x]);\n    if(idx_x<map2.length())\n        fragColor.y = uintBitsToFloat(map2[idx_x]);\n    \n}\n\nvoid mainImage_self_m2( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx.y!=mapmap_reg.y||((ipx.y==mapmap_reg.y)&&ipx.x>=mapmap1.length())){\n        fragColor = vec4(0.,0.,0.,0.);\n        return;\n    }\n    \n    bool reset = texelFetch(self_buf, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(self_buf, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    fragColor = vec4(0.);\n    fragColor.x = uintBitsToFloat(mapmap1[ipx.x]);\n    fragColor.y = uintBitsToFloat(mapmap2[ipx.x]);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord);\n    \n    ivec2 local_ipx = ipx%33;\n    ivec2 lid = ipx/33;\n    \n    if((lid.x>1||lid.y>1)&&!(ipx.y>=33*2+3&&ipx.y<33*2+3+4&&ipx.x<128)&&!(ipx.x>=33*2+3&&ipx.x<33*2+3+32&&ipx.y<9)){\n        fragColor = vec4(0.,0.,0.,0.);\n        return;\n    }\n    \n    bool reset = texelFetch(iChannel3, ivec2(32,32),0).x<0.5;\n    vec4 self_col = texelFetch(iChannel3, ipx,0);\n    \n    if(iFrame>0&&!reset) {\n        fragColor = self_col;\n        return;\n    }\n    \n    if(ipx.y>=33*2+3&&ipx.y<33*2+3+4&&ipx.x<128){\n        local_ipx = ivec2(ipx.x,ipx.y-(33*2+3));\n        if(local_ipx.y==3){\n            mainImage_self_m2(fragColor, vec2(local_ipx.x,mapmap_reg.y)+0.5);\n            return;\n        }else{\n        if(local_ipx.y==0){\n            fragColor = texelFetch(iChannel0, ivec2(local_ipx.x,mapmap_reg.y),0);\n            return;\n        }else{\n        if(local_ipx.y==1){\n            fragColor = texelFetch(iChannel1, ivec2(local_ipx.x,mapmap_reg.y),0);\n            return;\n        }else{\n        if(local_ipx.y==2){\n            fragColor = texelFetch(iChannel2, ivec2(local_ipx.x,mapmap_reg.y),0);\n            return;\n        }}}}\n        \n    }else{\n    if(ipx.x>=33*2+3&&ipx.x<33*2+3+32&&ipx.y<9){\n        ivec2 lipx = ivec2(ipx.x-(33*2+3),ipx.y);\n        fragColor = vec4(0.,0.,0.,0.);\n        if(lipx.x<map_ta2.length()&&ipx.y==0){\n            fragColor.x = uintBitsToFloat(map_ta2[lipx.x]);\n            return;\n        }else{\n            if(lipx.x<map_ta1.length()&&ipx.y==1){\n                fragColor.x = uintBitsToFloat(map_ta1[lipx.x]);\n                return;\n            }else{\n            if(lipx.x<map_tb2.length()&&ipx.y==2){\n                fragColor.x = uintBitsToFloat(map_tb2[lipx.x]);\n                return;\n            }else{\n            if(lipx.x<map_tb1.length()&&ipx.y==3){\n                fragColor.x = uintBitsToFloat(map_tb1[lipx.x]);\n                return;\n            }else{\n            if(lipx.x<et_a1.length()&&ipx.y==4){\n                fragColor.x = float(et_a1[lipx.x])+0.5;\n                return;\n            }else{\n            if(lipx.x<et_a2.length()&&ipx.y==5){\n                fragColor.x = float(et_a2[lipx.x])+0.5;\n                return;\n            }else{\n            if(lipx.x<et_a3.length()&&ipx.y==6){\n                fragColor.x = float(et_a3[lipx.x])+0.5;\n                return;\n            }else{\n            if(lipx.x<et_am.length()&&ipx.y==7){\n                fragColor.x = float(et_am[lipx.x])+0.5;\n                return;\n            }else{\n            if(lipx.x<et_bm.length()&&ipx.y==8){\n                fragColor.x = float(et_bm[lipx.x])+0.5;\n                return;\n            }}}}}}}}\n        }\n    }else{\n        if(lid.x==0&&lid.y==0){\n            mainImage_self_m1(fragColor, vec2(local_ipx)+0.5);\n            return;\n        } else{\n        if(lid.x==1&&lid.y==0){\n            fragColor = texelFetch(iChannel0, local_ipx,0);\n            return;\n        } else{\n        if(lid.x==0&&lid.y==1){\n            fragColor = texelFetch(iChannel1, local_ipx,0);\n            return;\n        } else{\n        if(lid.x==1&&lid.y==1){\n            fragColor = texelFetch(iChannel2, local_ipx,0);\n            return;\n        }}}}\n    }}\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// map of arrays \n// and UI control\n// UI-control:\n// CubeA is 16-bit - so I have to use two 16 bit pixels per one value to have better UI control\n// but there nothing complex - its cheap in performance\n\n\n\n// Descrioption:\n\n// Idea: \n// compress all Shadertoy website shader IDs to shader with less than 4096 bytes per shader\n// All shader IDs - only that returnde by Shadertoy API\n// 4096*6=24576 bytes, x6 because 4 buffers + Image shader and CubeA shader\n// Get all shaders - https://www.shadertoy.com/howto\n\n// But... :\n// I have not found way to do \"exact 4096 bytes per shader\" as I wanted\n// in this my version - compressed to:\n// uint-per-shader\n// 893+663 +128*2 in BufA\n// 908+851 +128*2 in BufB\n// 860+689 +128*2 in BufC\n// 681+688 +128*2 + 32+4+16+8 in BufD\n// =7317 uint *4 byte per uint = 29268 bytes\n\n// This my compression is 4692 bytes larger than \"I wanted to make\"\n// maybe there some other way to do it - this is my best result\n\n\n// Note - data 128x2x4 supposed to be in Cubemap\n// and this data is Not compressed, it can be compressed saving about 1Kb\n// but for \"ideal\" I need to remove 4692 bytes - more than entire CubeA data size\n// I mean - even if there is way to generalize entire CubeA data to single superformula\n// it stil will be not enough to fit \"ideal conditions\" - 4096 bytes per shader\n\n\n// Shadertoy token:\n//               6 characters length\n//     3 characters -> |___|___| <- 3 characters\n// 1024 unique tokens left | 1024 unique tokens right\n\n// Compression - simple \"tokens\" and \"connections\" and \"compression of connections\"\n// compression of connections - distribution of connections is not even\n// so it possible to \"collapse regions\" - by separating on multiple regions\n// example connections [1, 2, 4, 18, 25, 27, 48] - 6 bits per element\n// compresed to 8x4bits regions [1,2,4][18-8*2][25-8*3,27-8*3][48-8*6]\n// result [1,2,4,2,1,3,0] with map [3,1,2,0,0,1]\n// and map of \"regions\" is compression - because distribution of tokens is not even\n\n\n// Result:\n\n// Original data - 27981 elements 6x8-bit ASCII char per element\n// 167886 bytes=168Kb of original data - not compressed\n\n// SORTED - this is sorted result, order of original data is not saved\n// 73Kb - zip compression\n// 45Kb - 7z compression\n// 37Kb - 7z compression left+right side as separate files\n// 28.5Kb - This Shadertoy shader all data\n\n// this shader restore exact sorted data\n// I think this why comparison of \"Sorted\" compressed data is fair\n\n\n// This compression is:\n// 28792*8/27981 = 8.232 bits per token that 6-ASCII character\n// 8.232/6 = 1.37 bits per ASCII character in token\n\n\n// Possible Shadertoy chars in tokens, order from left to right\n// 1. ['3' '4' '7' 'D' 'M' 'N' 'W' 'X' 'c' 'd' 'f' 'l' 'm' 's' 't' 'w']\n// 2. ['d' 'l' 's' 't']\n// 3. ['2' '3' 'B' 'G' 'K' 'S' 'V' 'X' 'c' 'd' 'f' 'j' 'l' 's' 't' 'y']\n// 4. ['3' 'B' 'G' 'S' 'X' 'c' 'f' 'y']\n// 5. ['D' 'R' 'W' 'z']\n// 6. ['1' '2' '3' '4' '7' '8' 'B' 'D' 'G' 'H' 'K' 'M' 'N' 'R' 'S' 'V' 'W' 'X'\n//     'c' 'd' 'f' 'h' 'j' 'l' 'm' 'n' 'r' 's' 't' 'w' 'y' 'z']\n\n\n// Update:\n// Originally map of arrays map_map_uint_ were located in CubeA shader\n// But because \"AMD in ANGLE\" have very bad performance when arrays in CubeA shader\n// all arrays moved to BufA-D\n// This change MAY broke OpenGL compatibility \n// because BufA-D use more than 4Kb const data per shader\n// Previous version, that 100% work/tested in OpenGL \n// https://www.shadertoy.com/view/mdSyDd - there\n\n\nint map_ta2_len = 32;\nint map_ta1_len = 4;\nint map_tb2_len = 16;\nint map_tb1_len = 8;\n\nint et_a1_len = 1;\nint et_a2_len = 4;\nint et_a3_len = 6;\n\nint et_am_len = 16;\nint et_bm_len = 16;\n\n\nint getside_idx(vec3 rd);\nvec4 read_cubem(samplerCube textr, ivec2 px, int side_idx, vec2 side_res);\nvec4 restore_db(int idx);\nivec3 get_token_left(int idx);\nivec3 get_token_right(int idx);\nvec4 mapabuf(ivec2 ipx);\nvoid process_UI( inout vec4 fragColor, in vec2 fragCoord );\n\n// from my observation - number of frames till Cubemap initialization in Shadertoy/webgl\n// depends on \"how fast webbrowser allocating memory-RAM for web page\"\n// on webbrowser \"cold start\" while webbrower loading 50 other tabs - it sometime even 5 sec or 300 frames\n// so I mean - making it 300 frames to wait will be too annoying\n// better ask user to reload/restart shader if it does not load after few sec, so 15 frames is enough\n// https://www.shadertoy.com/view/mt33RH\nconst int wfr = 15; \n\nivec2 side_sz;\n\n#ifdef NO_COMPILE\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    discard;\n}\n#else\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    side_sz = textureSize(iChannel0,0).xy; // 1024 here\n    int side_idx = getside_idx(rayDir);\n    vec4 self = textureLod(iChannel0, rayDir, 0.);\n    fragColor = self;\n    if(iFrame<wfr) return; // dodge cubemap bugs https://www.shadertoy.com/view/mt33RH\n    \n    vec4 status = read_cubem(iChannel0, side_sz-1, cube_side, side_sz);\n    int load_state = int(status.y); //1 - load ta/tb and tidx_new, 2 load map\n    bool map_done = status.x>2.5;\n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(side_idx!=cube_side){\n        if(side_idx==cube_side+1&&load_state==0){\n            fragColor = mapabuf(ipx);\n            //fragColor = self;\n        }\n        return;\n    }\n    \n    \n    if(ipx==side_sz-1)\n    {\n        fragColor = vec4(1.+clamp(self.x,0.,3.), 1.+clamp(self.y,0.,3.), 0., 1.); // (map_status, state, 0., reset)\n        return;\n    }\n    \n    process_UI(fragColor, fragCoord);\n    \n    ivec2 new_db_reg = ivec2(0,cube_num_elems_use_sz);\n    ivec2 ta_reg = ivec2(new_db_reg.x+new_db_reg.y,cube_tokens_use_sz);\n    ivec2 tb_reg = ivec2(ta_reg.x+ta_reg.y,cube_tokens_use_sz);\n    ivec2 tidx_new_reg = ivec2(tb_reg.x+tb_reg.y,cube_num_elems_use_sz);\n    \n    \n    if(load_state==1)\n    {\n        \n        ivec2 reg = ivec2(0.);\n        \n        reg = ivec2(ta_reg.x,ta_reg.x+ta_reg.y);\n        if((ipx.x<reg.y&&ipx.y<(reg.y-reg.x))&&(ipx.x>=reg.x&&ipx.y>=0))\n        {\n            ivec2 local_ipx = ivec2(ipx.x-reg.x,ipx.y);\n            int local_idx = local_ipx.x+local_ipx.y*(reg.y-reg.x);\n            ivec3 ta = get_token_left(local_idx);\n            fragColor = vec4(float(ta.x)+0.5,float(ta.y)+0.5,float(ta.z)+0.5,0.);\n        } else {\n            reg = ivec2(tb_reg.x,tb_reg.x+tb_reg.y);\n            if((ipx.x<reg.y&&ipx.y<(reg.y-reg.x))&&(ipx.x>=reg.x&&ipx.y>=0))\n            {\n                ivec2 local_ipx = ivec2(ipx.x-reg.x,ipx.y);\n                int local_idx = local_ipx.x+local_ipx.y*(reg.y-reg.x);\n                ivec3 tb = get_token_right(local_idx);\n                fragColor = vec4(float(tb.x)+0.5,float(tb.y)+0.5,float(tb.z)+0.5,0.);\n            } else{\n                // nop\n            }\n        }\n        \n    } else\n    if(load_state==2&&!map_done)\n    {\n        if((ipx.x<cube_num_elems_use_sz&&ipx.y<cube_num_elems_use_sz))\n        {\n            ivec2 local_ipx = ipx%cube_num_elems_use_sz;\n            int l_idx = local_ipx.x+local_ipx.y*cube_num_elems_use_sz;\n            fragColor = restore_db(l_idx);\n        }\n    }\n    \n}\n#endif\n\n\n// scrollbars control\n\nconst ivec4 bar_xy =   ivec4(0,0+cube_num_elems_use_sz+10,1,0+cube_num_elems_use_sz+10);\nconst ivec4 im_xy =    ivec4(0,1+cube_num_elems_use_sz+10,1,1+cube_num_elems_use_sz+10);\nconst ivec4 click_xy = ivec4(0,2+cube_num_elems_use_sz+10,1,2+cube_num_elems_use_sz+10);\nconst ivec4 click_pm = ivec4(0,3+cube_num_elems_use_sz+10,1,3+cube_num_elems_use_sz+10);\n\nconst ivec2 inp_buf1 = ivec2(0,4+cube_num_elems_use_sz+10);\nconst ivec2 inp_buf2 = ivec2(1,4+cube_num_elems_use_sz+10);\nconst ivec2 is_toka =  ivec2(0,5+cube_num_elems_use_sz+10);\nconst ivec2 is_tokb =  ivec2(1,5+cube_num_elems_use_sz+10);\n\nconst ivec2 unp_reg = ivec2(cube_num_elems_use_sz*2, cube_num_elems_use_sz);\nconst ivec2 unp_buf = ivec2(0,7+cube_num_elems_use_sz+10);\n\nconst ivec2 sest_idx_res = ivec2(0,8+cube_num_elems_use_sz+10+unp_reg.y);\n\nconst ivec2 sest_reg_sz = ivec2(4,20);\nconst ivec2 sest_idx_reg = ivec2(0,9+cube_num_elems_use_sz+10+unp_reg.y);\n\nconst ivec2 resetx = ivec2(2,2+cube_num_elems_use_sz+10);\n\nconst vec4 bar_xy_sc = vec4(vec2(10.),vec2(10.));\nconst vec4 im_xy_sc = vec4(vec2(1.),vec2(1.));\nconst vec4 click_xy_sc = vec4(vec2(cube_num_elems_use_sz+1,cube_num_elems_use_sz+1),vec2(10.));\nconst vec4 click_pm_sc = vec4(vec2(1.),vec2(10.));\n\nconst ivec2 tables_size = ivec2(cube_num_elems_use_sz,cube_num_elems_use_sz);\nconst float top_panel = 0.05;\nconst float borders = 0.1;\nconst vec2 text_len = vec2(3.5,1.); // X x2 and include boreder\nconst float blines = 0.065;\n\nvec4 loadval16(ivec2 ipx) {\n    //ivec2 side_sz = textureSize(iChannel0,0).xy;\n    return read_cubem(iChannel0, ipx, cube_side, side_sz);\n}\nvec4 loadval16_s2(ivec2 ipx) {\n    //ivec2 side_sz = textureSize(iChannel0,0).xy;\n    return read_cubem(iChannel0, ipx, cube_side+1, side_sz);\n}\n\n// 16bit 2x16 save\n// scale max 0xfffff\n// val min/max= +-scale\n// loss <0.000001 on scale=1\nvec4 save2x16(vec4 val, ivec2 tpx, ivec4 ipx, vec4 scale) {\n    vec4 tv = clamp((val/scale+1.)*0.5,0.,1.);\n    ivec4 itv=ivec4(tv*float(0x3fffff));\n    ivec4 ret =ivec4(0);\n    if(tpx==ipx.xy)ret = (itv>>11);\n    else ret = (itv)&0x7ff;\n    return vec4(ret-0x7ff/2);\n}\n\nbool is_reset(){\n    return loadval16(resetx).w<0.5;\n}\n\nvec4 loadval2x16(ivec4 ipx, vec4 scale) {\n    if(is_reset())return vec4(0.);\n    ivec4 a = ivec4(loadval16(ipx.xy)+float(0x7ff/2));\n    ivec4 b = ivec4(loadval16(ipx.zw)+float(0x7ff/2));\n    vec4 ret = scale*2.*(vec4((a<<11)+b)/float(0x3FFFFF)-0.5);\n    if(abs(ret.x)<0.000035)ret.x=0.; // 16-bit scale for loadval2x16\n    if(abs(ret.y)<0.000035)ret.y=0.;\n    if(abs(ret.z)<0.000035)ret.z=0.;\n    if(abs(ret.w)<0.000035)ret.w=0.;\n    return ret;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat lines1d(vec2 p, vec2 bsz, float px, float a, float b) {\n    float d = 0.;\n    d = max(d, smoothstep(px, -px, (sdBox(p, bsz / 2.) - a) - b));\n    return d;\n}\n\nvec2 postmove_bar(vec2 mzw) {\n    float fps = clamp(1./max(iTimeDelta,0.001),1.,9999.);\n    vec2 pm = loadval2x16(click_pm,click_pm_sc).xy;\n    for(int i = 0; i<2; i++){\n        if(mzw[i]<0.){\n            mzw[i]+= max((-1.5*(mzw[i])/fps+0.00001),0.00001);\n            if(mzw[i]>0.)mzw[i]=0.;\n        }else{\n            if(mzw[i]>1.){\n                mzw[i]-= max((1.5*(mzw[i]-1.)/fps+0.00001),0.00001);\n                if(mzw[i]<1.)mzw[i]=1.;\n            }else{\n                \n            }\n        }\n        mzw[i]+=pm[i];\n    }\n    return mzw;\n}\n\nvec4 process_bar(out ivec2 cidx, out float mtimer, out bool dx_bar, out bool dy_bar, out bool panel) {\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    panel = false;dx_bar=false;dy_bar=false;\n    if(reset){\n        cidx = ivec2(-1000.);\n        mtimer = 0.;\n        return vec4(0.);\n    }\n    vec4 self = loadval2x16(bar_xy,bar_xy_sc);\n    vec4 ret = self;\n    vec2 screen_ires = vec2(textureSize(iChannel3,0).xy);\n    vec2 res=screen_ires.xy/screen_ires.y;\n    vec2 im=iMouse.xy/screen_ires.y-0.5*res;\n    vec2 im_local=iMouse.xy/screen_ires.xy;\n    \n    vec4 tclc = loadval2x16(click_xy,click_xy_sc);\n    cidx = ivec2(tclc.xy);\n    mtimer = tclc.z;\n    if(iMouse.z<=0.)mtimer+=iTimeDelta;\n    \n    if(iMouse.z>0.){\n        vec2 lc_local = self.zw;\n        if(lc_local.x<=0.)lc_local.xy = iMouse.zw/screen_ires.xy;\n        \n        vec2 lc = (lc_local.xy*screen_ires.xy)/screen_ires.y-0.5*res;\n        \n        panel = lines1d(lc+vec2(0.,0.5*top_panel), res-vec2(borders,borders+top_panel), 0.0001, 0.01, 0.001)>0.00001; \n        dx_bar = step(res.x*0.5-lc.x,blines*0.5)>0.5;\n        dy_bar = step(res.y*0.5+lc.y,blines*0.5)>0.5;\n        \n        if(dx_bar||dy_bar){\n            if(dx_bar)ret.y=(im_local.y)*(1.+0.5*2.*blines)-0.5*blines;\n            if(dy_bar)ret.x=(im_local.x)*(1.+0.5*2.*blines)-0.5*blines;\n        }else{\n            if(panel){\n                vec2 tp = lc;\n                tp+= 0.5*res-vec2(borders*0.5);\n                vec2 t_im = ((ret.xy*screen_ires.xy)/screen_ires.y);\n                \n                vec2 local_sc = (vec2(tables_size)-(res-vec2(borders,borders+top_panel))/(scale*text_len))*scale*text_len;\n                tp+= t_im*vec2(local_sc/res);\n                \n                if(self.z<=0.){\n                    ivec2 idx = ivec2(tp/(text_len*scale));\n                    mtimer=0.;\n                    cidx = idx;\n                }\n                vec4 limm = loadval2x16(im_xy,im_xy_sc);\n                vec2 imov = vec2(0.);\n                if(self.z>0.)imov = (im_local-limm.xy)*1.;\n                if(abs(imov.x)<0.000035)imov.x=0.; // 16-bit scale for 2x16\n                if(abs(imov.y)<0.000035)imov.y=0.; // 16-bit scale for 2x16\n                \n                ret.xy+=-(imov.xy)*1./(local_sc/res);\n            }\n        }\n        ret.zw = lc_local;\n        \n    }else{\n        ret.zw = iMouse.zw/screen_ires.xy;\n    }\n    return ret;\n    \n}\n\nvec4 postmove_im() {\n    vec4 self = loadval2x16(click_pm,click_pm_sc);\n    vec4 last_m = loadval2x16(click_xy,click_xy_sc);\n    vec4 bar = loadval2x16(bar_xy,bar_xy_sc);\n    vec4 ret = self;\n    float fps = clamp(1./max(iTimeDelta,0.001),1.,9999.);\n    ivec2 tp; float tm; bool dx; bool dy; bool pa;\n    vec4 tc = process_bar(tp, tm, dx, dy, pa);\n    if(iMouse.z<=0.){\n        vec2 sdir = self.xy;\n        if(bar.z>0.){\n            sdir = (bar.xy-self.zw);\n            sdir = 10.*scale*(sdir);\n        }else {\n            sdir = sdir*(0.999-0.169*clamp(25./fps,0.01,1.));\n            if(bar.x<0.||bar.x>1.)sdir.x*=(0.999-0.499*clamp(25./fps,0.01,1.));\n            if(bar.y<0.||bar.y>1.)sdir.y*=(0.999-0.499*clamp(25./fps,0.01,1.));\n        }\n        ret.xy = sdir;\n    }else{\n        if(!(pa||dx||dy)){\n            vec2 sdir = self.xy;\n            vec4 tim = loadval2x16(im_xy,im_xy_sc);\n            if(bar.z>0.&&tim.z<=0.){\n                sdir = (bar.xy-self.zw);\n            }else {\n                sdir = sdir*(0.999-0.169*clamp(25./fps,0.01,1.));\n                if(bar.x<0.||bar.x>1.)sdir.x*=(0.999-0.499*clamp(25./fps,0.01,1.));\n                if(bar.y<0.||bar.y>1.)sdir.y*=(0.999-0.499*clamp(25./fps,0.01,1.));\n            }\n            ret.xy = sdir;\n        }else{\n            ret.xy = vec2(0.);\n        }\n        ret.zw = bar.xy;\n    }\n    if(abs(ret.x)<0.000035)ret.x=0.; // 16-bit scale for 2x16\n    if(abs(ret.y)<0.000035)ret.y=0.; // 16-bit scale for 2x16\n    return ret;\n}\n\n#define keyboard_texture iChannel2\n\nconst int Key_Backspace = 8, Key_Enter = 13, Key_Shift = 16, Key_Delete = 46, \nKey_0 = 48, Key_1 = 49, Key_2 = 50, Key_3 = 51, Key_4 = 52,\nKey_5 = 53, Key_6 = 54, Key_7 = 55, Key_8 = 56, Key_9 = 57, \nKey_A = 65, Key_B = 66, \nKey_C = 67, Key_D = 68, Key_E = 69, Key_F = 70, Key_G = 71, Key_H = 72,Key_I = 73, \nKey_J = 74, Key_K = 75, Key_L = 76, Key_M = 77, Key_N = 78, Key_O = 79, Key_P = 80,\nKey_Q = 81, Key_R = 82, Key_S = 83, Key_T = 84, Key_U = 85,Key_V = 86, Key_W = 87, \nKey_X = 88, Key_Y = 89, Key_Z = 90,\nKey_Numpad0 = 96, Key_Numpad1 = 97, Key_Numpad2 = 98, Key_Numpad3 = 99,\nKey_Numpad4 = 100, Key_Numpad5 = 101, Key_Numpad6 = 102, Key_Numpad7 = 103, \nKey_Numpad8 = 104, Key_Numpad9 = 105, Key_NumpadMultiply = 106;\n\nconst int ka_mul = 42;\nbool key(int K){return step(0.5, texelFetch(keyboard_texture, ivec2(K, 0), 0).x)>0.5;}\nint get_key(){\n    if(key(Key_Backspace))return -1;\n    if(key(Key_Delete))return -1;\n    if(key(Key_NumpadMultiply))return ka_mul;\n    bool sft = key(Key_Shift);\n    int kf = 0;\n    for(int i=Key_0;i<=Key_9+ANGLE_loops;i++){\n        if(key(i)||key(i-Key_0+Key_Numpad0)){\n            kf=i;\n            break;\n        }\n    }\n    if(kf>0){\n        if(sft&&kf==Key_8)return ka_mul;\n        else return kf;\n    }\n    for(int i=Key_A;i<=Key_Z+ANGLE_loops;i++){\n        if(key(i)){\n            kf=i;\n            break;\n        }\n    }\n    if(kf>0){\n        if(!sft){\n            kf+=32;\n            return kf;\n        }\n    }\n    return kf;\n    \n}\n\nvec4 proinp_left()\n{\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    reset=reset||key(Key_Backspace)||key(Key_Delete);\n    if(reset){\n        return vec4(95.,95.,95.,0.005);\n    }\n    vec4 self = loadval16(inp_buf1);\n    int tk = get_key();\n    if(self.w<0.&&tk>0){\n        return self;\n    }\n    self.w=abs(self.w);\n    ivec3 skey = ivec3(self.xyz);\n    bvec3 st = bvec3(fract(self.w/1000.)*10.>0.5,fract(self.w/100.)*10.>0.5,fract(self.w/10.)*10.>0.5);\n    bvec3 ost = st;\n    if(tk<0){\n        skey = ivec3(95,95,95);\n        st = bvec3(false);\n    }else{\n        if(tk>0){\n            if(!st.x){skey[0]=tk;st.x = true;}\n            else{\n                if(!st.y){skey[1]=tk;st.y = true;}\n                else{\n                    if(!st.z){skey[2]=tk;st.z = true;}\n                }\n            }\n        }\n    }\n    \n    float est = 0.;\n    est+=100.*float(st.x);\n    est+=10.*float(st.y);\n    est+=1.*float(st.z);\n    float sig = 1.;\n    if(tk!=0&&(!ost.x||!ost.y||!ost.z))sig=-1.;\n    return vec4(vec3(skey)+0.5,sig*(est+0.005));\n}\n\nvec4 proinp_right()\n{\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    reset=reset||key(Key_Backspace)||key(Key_Delete);\n    if(reset){\n        return vec4(95.,95.,95.,0.005);\n    }\n    vec4 self = loadval16(inp_buf2);\n    vec4 pbs = loadval16(inp_buf1);\n    bvec3 st0 = bvec3(fract(abs(pbs.w)/1000.)*10.>0.5,fract(abs(pbs.w)/100.)*10.>0.5,fract(abs(pbs.w)/10.)*10.>0.5);\n    \n    int tk = get_key();\n    if(self.w<0.&&tk>0||pbs.w<0.||!st0.x||!st0.y||!st0.z){\n        return self;\n    }\n    self.w=abs(self.w);\n    ivec3 skey = ivec3(self.xyz);\n    bvec3 st = bvec3(fract(self.w/1000.)*10.>0.5,fract(self.w/100.)*10.>0.5,fract(self.w/10.)*10.>0.5);\n    bvec3 ost = st;\n    if(tk<0){\n        skey = ivec3(95,95,95);\n        st = bvec3(false);\n    }else{\n        if(tk>0){\n            if(!st.x){skey[0]=tk;st.x = true;}\n            else{\n                if(!st.y){skey[1]=tk;st.y = true;}\n                else{\n                    if(!st.z){skey[2]=tk;st.z = true;}\n                }\n            }\n        }\n    }\n    \n    float est = 0.;\n    est+=100.*float(st.x);\n    est+=10.*float(st.y);\n    est+=1.*float(st.z);\n    float sig = 1.;\n    if(tk!=0&&(!ost.x||!ost.y||!ost.z))sig=-1.;\n    return vec4(vec3(skey)+0.5,sig*(est+0.005));\n}\n\nuint get_map_ta2(int idx){\n    return floatBitsToUint(texelFetch(iChannel3,ivec2(idx+33*2+3,0),0).x);\n}\nuint get_map_ta1(int idx){\n    return floatBitsToUint(texelFetch(iChannel3,ivec2(idx+33*2+3,1),0).x);\n}\nuint get_map_tb2(int idx){\n    return floatBitsToUint(texelFetch(iChannel3,ivec2(idx+33*2+3,2),0).x);\n}\nuint get_map_tb1(int idx){\n    return floatBitsToUint(texelFetch(iChannel3,ivec2(idx+33*2+3,3),0).x);\n}\nint get_et_a1(int idx){\n    return int(texelFetch(iChannel3,ivec2(idx+33*2+3,4),0).x);\n}\nint get_et_a2(int idx){\n    return int(texelFetch(iChannel3,ivec2(idx+33*2+3,5),0).x);\n}\nint get_et_a3(int idx){\n    return int(texelFetch(iChannel3,ivec2(idx+33*2+3,6),0).x);\n}\nint get_et_am(int idx){\n    return int(texelFetch(iChannel3,ivec2(idx+33*2+3,7),0).x);\n}\nint get_et_bm(int idx){\n    return int(texelFetch(iChannel3,ivec2(idx+33*2+3,8),0).x);\n}\n\nvec4 unp_reg_fn(ivec2 ipx){\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    if(reset){\n        return vec4(0.,0.,0.,0.);\n    }\n    vec4 self = loadval16(ipx);\n    ipx = ipx - unp_buf;\n    if(ipx.x>=unp_reg.x||ipx.y>=unp_reg.y){\n        return vec4(0.);\n    }\n    \n    ivec2 new_db_reg = ivec2(0,cube_num_elems_use_sz);\n    ivec2 ta_reg = ivec2(new_db_reg.x+new_db_reg.y,0);\n    ivec2 tb_reg = ivec2(ta_reg.x+cube_tokens_use_sz,0);\n    \n    ivec2 lipx = ipx/ivec2(2,1);\n    \n    if(lipx.x+lipx.y*cube_num_elems_use_sz>=num_elems){\n        return vec4(0.,0.,0.,0.);\n    }\n    \n    ivec2 side_sz = textureSize(iChannel0,0).xy;\n    vec4 status = read_cubem(iChannel0, side_sz-1, cube_side, side_sz);\n    bool map_done = status.x>2.5;\n    \n    if(self.x==0.&&map_done)\n    {\n        vec4 t_idx = loadval16(lipx);\n        ivec3 taa = ivec3(0);\n        ivec3 tbb = ivec3(0);\n        int cidx = -1;\n        if(t_idx.x>0.){\n            int a_idx = (int(t_idx.x)<<8)+int(t_idx.y);\n            ivec2 aidx = ivec2(a_idx%32,a_idx/32);\n            vec4 ta = loadval16(ivec2(ta_reg) + aidx);\n            int b_idx = (int(t_idx.z)<<8)+int(t_idx.w);\n            ivec2 bidx = ivec2(b_idx%32,b_idx/32);\n            vec4 tb = loadval16(ivec2(tb_reg) + bidx);\n            taa = ivec3(ta.xyz);\n            tbb = ivec3(tb.xyz);\n            bool fo = false;\n            for(int i = 0;i<et_a1_len+ANGLE_loops&&!fo;i++){\n                if(a_idx==get_et_a1(i)){\n                    fo = true;\n                    cidx = 10;\n                }\n            }\n            for(int i = 0;i<et_a2_len+ANGLE_loops&&!fo;i++){\n                if(a_idx==get_et_a2(i)){\n                    fo = true;\n                    cidx = 20;\n                }\n            }\n            for(int i = 0;i<et_a3_len+ANGLE_loops&&!fo;i++){\n                if(a_idx==get_et_a3(i)){\n                    fo = true;\n                    cidx = 30;\n                }\n            }\n            bool tfo = false;\n            for(int i = 0;i<et_am_len+ANGLE_loops&&!tfo;i++){\n                if(a_idx==get_et_am(i)&&b_idx==get_et_bm(i)){\n                    if(cidx<0)cidx=0;\n                    if(i==et_am_len-1)cidx+=2;else cidx+=1;\n                    tfo = true;\n                }\n            }\n        }\n        \n        if(ipx.x%2==0) return vec4(vec3(taa)+0.5,sign(float(cidx))*(float(abs(cidx))+0.5));\n        else return vec4(vec3(tbb)+0.5,sign(float(cidx))*(float(abs(cidx))+0.5));\n   }else{\n       if(self.x!=0.&&map_done){\n            vec4 lsta = loadval16(is_toka);\n            int flgsa = int(abs(lsta.w));\n            vec4 lstb = loadval16(is_tokb);\n            int flgsb = int(abs(lstb.w));\n            ivec3 st = ivec3(self.xyz);\n            int cidx = int(self.w);\n\n            if((flgsa==1&&(flgsb==1||flgsb==2||flgsb==3||flgsb==4||flgsb==5||flgsb==6||flgsb==30||flgsb==0))||\n                (flgsb==1&&(flgsa==1||flgsa==2||flgsa==3||flgsa==4||flgsa==5||flgsa==6||flgsa==30))){\n                ivec3 ttt = ivec3(0);\n                if(ipx.x%2==0) ttt = ivec3(lsta.xyz); else ttt = ivec3(lstb.xyz);\n                bvec3 tst = not(bvec3(ttt.x>0&&ttt.x!=95&&ttt.x!=ka_mul,ttt.y>0&&ttt.y!=95&&ttt.y!=ka_mul,ttt.z>0&&ttt.z!=95&&ttt.z!=ka_mul));\n                \n                bvec3 tst_t = bvec3(ttt.x==st.x||tst.x,ttt.y==st.y||tst.y,ttt.z==st.z||tst.z);\n                if(all(tst_t)){\n                    if(cidx>50)cidx=cidx-100;\n                    cidx+=100;\n                }else {\n                    if(cidx>50)cidx=cidx-100;\n                }\n            }else{\n                if(flgsa==20||flgsb==20){\n                    if(cidx>50)cidx=cidx-100;\n                }\n            }\n            bool kd = key(Key_Backspace)||key(Key_Delete);\n            if(cidx>50&&kd)cidx=cidx-100;\n            \n            return vec4(vec3(st)+0.5,sign(float(cidx))*(float(abs(cidx))+0.5));\n       }else return vec4(0.,0.,0.,0.);\n   }\n   \n   return vec4(0.,0.,0.,0.);\n    \n}\n\nvec4 is_token(int ti){\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    reset=reset||key(Key_Backspace)||key(Key_Delete);\n    if(reset){\n        return vec4(0.,0.,0.,0.);\n    }\n    \n    ivec2 new_db_reg = ivec2(0,cube_num_elems_use_sz);\n    ivec2 ta_reg = ivec2(new_db_reg.x+new_db_reg.y,0);\n    ivec2 tb_reg = ivec2(ta_reg.x+cube_tokens_use_sz,0);\n    \n    ivec2 sidx = is_toka;\n    ivec2 inp = inp_buf1;\n    ivec2 tt_reg = ta_reg;\n    if(ti==1){\n        sidx = is_tokb;\n        inp = inp_buf2;\n        tt_reg = tb_reg;\n    }\n    vec4 self = loadval16(sidx);\n    ivec3 st = ivec3(self.xyz);\n    int flgs = int(abs(self.w));\n    if(flgs>=1&&flgs<6)flgs+=1;\n    bool tkey = key(Key_Enter);\n    if(flgs>=4){\n        if(!(self.w>0.)&&tkey){\n            flgs=4;\n        }\n    }\n    vec4 pbs = loadval16(inp);\n    ivec3 ch = ivec3(abs(pbs.xyz));\n    bvec3 tst = not(bvec3(ch.x>0&&ch.x!=95&&ch.x!=ka_mul,ch.y>0&&ch.y!=95&&ch.y!=ka_mul,ch.z>0&&ch.z!=95&&ch.z!=ka_mul));\n    if(ch!=st&&!all(tst)){\n        st = ch;\n        int fidx = 0;\n        bool fbd = false;\n        for(int i=0;i<tokens+ANGLE_loops&&!fbd;i++){\n            ivec2 ttidx = ivec2(i%32,i/32); \n            vec4 tt = loadval16(ivec2(tt_reg) + ttidx);\n            ivec3 ttt = ivec3(tt.xyz);\n            bvec3 tst_t = bvec3(ttt.x==st.x||tst.x,ttt.y==st.y||tst.y,ttt.z==st.z||tst.z);\n            if(all(tst_t)){\n                fbd = true;\n                fidx = i;\n                break;\n            }\n        }\n        if(fbd){\n            flgs=1;\n        }else{\n            flgs=20;\n        }\n    }else{\n        if(ch==ivec3(ka_mul,95,95)||ch==ivec3(ka_mul,ka_mul,95)||ch==ivec3(ka_mul)){\n            flgs=30;\n        }\n    }\n    return vec4(vec3(st)+0.5,(float(tkey)*2.-1.)*(float(flgs)+0.5));\n}\n\nvec4 sest_idx_reg_fn(ivec2 ipx){\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    reset=reset||key(Key_Backspace)||key(Key_Delete);\n    if(reset){\n        return vec4(0.,0.,0.,0.);\n    }\n    \n    vec4 self = loadval16(ipx);\n    ivec2 nfidx = ivec2((int(abs(self).x)<<8)+int(abs(self).y),(int(abs(self).z)<<8)+int(abs(self).w));;\n    vec4 ls = loadval16(sest_idx_res);\n    ivec2 lfidx = ivec2((int(abs(ls).x)<<8)+int(abs(ls).y),(int(abs(ls).z)<<8)+int(abs(ls).w));;\n    bvec4 ft = greaterThan(self,vec4(0.));\n    ivec2 onfidx = lfidx;\n    int oix = onfidx.x+onfidx.y*cube_num_elems_use_sz;\n    \n    ivec2 lipx = ipx-sest_idx_reg;\n    int l_idx = lipx.x+lipx.y*sest_reg_sz.x;\n    \n    vec4 lsta = loadval16(is_toka);\n    int flgsa = int(abs(lsta.w));\n    vec4 lstb = loadval16(is_tokb);\n    int flgsb = int(abs(lstb.w));\n    \n    ivec2 fidx = ivec2(0);\n    \n    bool ra = (flgsa==2&&(flgsb==2||flgsb==3||flgsb==4||flgsb==5||flgsb==6||flgsb==30||flgsb==0))||(flgsb==2&&(flgsa==2||flgsa==3||flgsa==4||flgsa==5||flgsa==6||flgsa==30));\n    bool rb = (flgsa==4&&(flgsb==4||flgsb==30||flgsb==0))||(flgsb==4&&(flgsa==4||flgsa==30));\n    bool lke = ft.x;\n    bool tkey = key(Key_Enter);\n    if(rb)ft.x = false;else if(!ft.x)ft.x = tkey;\n    rb = rb&&(tkey||lke)&&ls.w>0.;\n    \n    if(ra||rb){\n        ft.zw = bvec2(false);\n        int rsz = sest_reg_sz.x*sest_reg_sz.y;\n        int lfst = num_elems/rsz;\n        int olfst = lfst;\n        if(l_idx==rsz-1)lfst+=num_elems-lfst*rsz;\n        bool fndt = false;\n        for(int i=0;i<lfst+ANGLE_loops;i++){\n            int ti = i+l_idx*olfst;\n            ivec2 tidx = ivec2(ti%cube_num_elems_use_sz, ti/cube_num_elems_use_sz);\n            vec4 ta = loadval16(unp_buf+tidx*ivec2(2,1));\n            vec4 tb = loadval16(unp_buf+tidx*ivec2(2,1)+ivec2(1,0));\n            if(!(ta.x>0.)||!(tb.x>0.))break;\n            int tfo = int(ta.w);\n            int tfob = int(tb.w);\n            bool tfio = tfo>50&&tfob>50;\n            if(tfio){\n                if(rb){\n                    int nix = tidx.x+tidx.y*cube_num_elems_use_sz;\n                    if(nix<=oix){\n                        fidx=tidx;\n                        fndt=true;\n                        continue;\n                    }else{\n                        fidx=tidx;\n                        fndt=true;\n                        break;\n                    }\n                }else{\n                    fidx=tidx;\n                    fndt=true;\n                    break;\n                }\n            }\n        }\n        ft.w=fndt;\n        \n    }\n    nfidx=fidx;\n    \n    vec4 tft = vec4(ft)*2.-1.;\n    return tft*vec4(float(nfidx.x>>8)+0.5,float(nfidx.x&0xff)+0.5,float(nfidx.y>>8)+0.5,float(nfidx.y&0xff)+0.5);\n}\n\nvec4 sest_idx_res_fn(){\n    bool reset = (iFrame-wfr)<=0||is_reset();\n    reset=reset||key(Key_Backspace)||key(Key_Delete);\n    if(reset){\n        return vec4(0.,0.,0.,0.);\n    }\n    \n    vec4 self = loadval16(sest_idx_res);\n    ivec2 nfidx = ivec2((int(abs(self).x)<<8)+int(abs(self).y),(int(abs(self).z)<<8)+int(abs(self).w));;\n    ivec2 onfidx = nfidx;\n    int oix = onfidx.x+onfidx.y*cube_num_elems_use_sz;\n    bvec4 ft = greaterThan(self,vec4(0.));\n    \n    vec4 lsta = loadval16(is_toka);\n    int flgsa = int(abs(lsta.w));\n    vec4 lstb = loadval16(is_tokb);\n    int flgsb = int(abs(lstb.w));\n    \n    bool ra = (flgsa==3&&(flgsb==3||flgsb==4||flgsb==5||flgsb==6||flgsb==30||flgsb==0))||(flgsb==3&&(flgsa==3||flgsa==4||flgsa==5||flgsa==6||flgsa==30));\n    bool rb = (flgsa==5&&(flgsb==5||flgsb==30||flgsb==0))||(flgsb==5&&(flgsa==5||flgsa==30));\n    bool lke = ft.x;\n    bool tkey = key(Key_Enter);\n    if(rb)ft.x = false;else if(!ft.x)ft.x = tkey;\n    rb = rb&&(tkey||lke);\n    \n    if(ra||rb){\n        ft.zw = bvec2(false);\n        bool brk = false;\n        for(int j=0;j<sest_reg_sz.y+ANGLE_loops&&!brk;j++){\n            for(int i=0;i<sest_reg_sz.x+ANGLE_loops&&!brk;i++){ \n                vec4 tv = loadval16(sest_idx_reg+ivec2(i,j));\n                \n                if(tv.w>0.){\n                    ivec2 nw = ivec2((int(abs(tv).x)<<8)+int(abs(tv).y),(int(abs(tv).z)<<8)+int(abs(tv).w));;\n                    if(rb){\n                        int nix = nw.x+nw.y*cube_num_elems_use_sz;\n                        if(nix<=oix){\n                            ft.w = true;\n                            continue;\n                        }else{\n                            nfidx=nw;\n                            ft.w = true;\n                            brk = true;\n                        }\n                    }else{\n                        nfidx=nw;\n                        ft.w = true;\n                        brk = true;\n                    }\n                }\n            }\n        }\n        if(!ft.w){ft.z=true;}\n    }\n    \n    vec4 tft = vec4(ft)*2.-1.;\n    return tft*vec4(float(nfidx.x>>8)+0.5,float(nfidx.x&0xff)+0.5,float(nfidx.y>>8)+0.5,float(nfidx.y&0xff)+0.5);\n}\n\n\nvoid process_UI( inout vec4 fragColor, in vec2 fragCoord )\n{\n    \n    ivec2 ipx = ivec2(fragCoord);\n    \n    if(ipx==resetx){\n        fragColor = vec4(0.,0.,0.,1.);\n        return;\n    }\n    \n    if(ipx==bar_xy.xy||ipx==bar_xy.zw){\n        ivec2 tp; float tm; bool dx; bool dy; bool pa;\n        fragColor = process_bar(tp,tm, dx, dy, pa);\n        if(iMouse.z>0.&&dx){\n            fragColor.x = postmove_bar(fragColor.xy).x;\n        }else if(iMouse.z>0.&&dy){\n            fragColor.y = postmove_bar(fragColor.xy).y;\n        }else if(iMouse.z>0.&&!pa&&!dx&&!dy){\n            fragColor.xy = postmove_bar(fragColor.xy);\n        }else if(iMouse.z<=0.){\n            fragColor.xy = postmove_bar(fragColor.xy);\n        }\n        fragColor = save2x16(fragColor, ipx, bar_xy, bar_xy_sc);\n        return;\n    }\n    \n    if(ipx==click_xy.xy||ipx==click_xy.zw){\n        ivec2 tp; float tm; bool dx; bool dy; bool pa;\n        vec4 tc = process_bar(tp,tm, dx, dy, pa);\n        fragColor = vec4(vec2(tp)+0.5,tm,0.);\n        fragColor = save2x16(fragColor, ipx, click_xy, click_xy_sc);\n        return;\n    }\n    \n    if(ipx==im_xy.xy||ipx==im_xy.zw){\n        vec2 screen_ires = vec2(textureSize(iChannel3,0).xy);\n        fragColor = vec4(iMouse.xyzw/screen_ires.xyxy);\n        fragColor = save2x16(fragColor, ipx, im_xy, im_xy_sc);\n        return;\n    }\n    \n    if(ipx==click_pm.xy||ipx==click_pm.zw){\n        fragColor = postmove_im();\n        fragColor = save2x16(fragColor, ipx, click_pm, click_pm_sc);\n        return;\n    }\n    \n    if(ipx==inp_buf1){\n        fragColor = proinp_left();\n        return;\n    }\n    if(ipx==inp_buf2){\n        fragColor = proinp_right();\n        return;\n    }\n    \n    if(ipx.x>=unp_buf.x&&ipx.x<unp_buf.x+unp_reg.x&&ipx.y>=unp_buf.y&&ipx.y<unp_buf.y+unp_reg.y){\n        fragColor = unp_reg_fn(ipx);\n        return;\n    }\n    if(ipx==is_toka){\n        fragColor = is_token(0);\n        return;\n    }\n    if(ipx==is_tokb){\n        fragColor = is_token(1);\n        return;\n    }\n    if(ipx.x>=sest_idx_reg.x&&ipx.x<sest_idx_reg.x+sest_reg_sz.x&&ipx.y>=sest_idx_reg.y&&ipx.y<sest_idx_reg.y+sest_reg_sz.y){\n        fragColor = sest_idx_reg_fn(ipx);\n        return;\n    }\n    if(ipx==sest_idx_res){\n        fragColor = sest_idx_res_fn();\n        return;\n    }\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// DO NOT REUSE/COPY ANY OF THIS\n// this is made only for this exact case\n// HALF OF THIS CODE IS HARD-CODED, parameters may be not what you think it is\n// for example 32 is bits region size of uint but also size of array side, and bits reading is 8bit max\n// you will waste more time debugging/adopting/fixing this my code than do it from scratch\n// this code is \"reading bits by index from arrays\" - basically reading bits from linear list\n// and code around is just indexing with shifts\n\nint get_8bits_byidx_map_ta2(int idx);\nint get_8bits_byidx_map_ta1(int idx);\nint get_8bits_byidx_map_tb2(int idx);\nint get_8bits_byidx_map_tb1(int idx);\nivec3 get_token_left(int idx){\n    int ida2 = idx/(map_ta1_len*4);\n    int ida1 = idx%(map_ta1_len*4);\n    \n    int a = get_8bits_byidx_map_ta2(ida2*2);\n    int b = get_8bits_byidx_map_ta2(ida2*2+1);\n    int c = get_8bits_byidx_map_ta1(ida1);\n    return ivec3(a,b,c);\n}\n\nivec3 get_token_right(int idx){\n    int ida2 = idx/(map_tb1_len*4);\n    int ida1 = idx%(map_tb1_len*4);\n    \n    int a = get_8bits_byidx_map_tb2(ida2*2);\n    int b = get_8bits_byidx_map_tb2(ida2*2+1);\n    int c = get_8bits_byidx_map_tb1(ida1);\n    return ivec3(a,b,c);\n}\n\nint get_8bits_byidx_map_map_uint_angle(int idx, int jdx);\n\nint get_by_idx(int idx, int slf, int nsfl, int bits){\n  int local_idx = idx*bits/8;\n  int local_ndx = idx*bits-local_idx*8;\n  int to_read = 8-local_ndx;\n\n  int tval = slf;\n  to_read+=-bits;\n  to_read=max(to_read, 0);\n  int lbs = min(8-local_ndx, bits);\n  int m = (1 << lbs) - 1;\n  int v = (tval >> to_read) & m;\n  if(8-local_ndx<bits)\n  {\n    local_idx = (idx*bits+lbs)/8;\n    tval = nsfl;\n    to_read = 8-(bits-(8-local_ndx));\n    m = (1 << (8-to_read)) - 1;\n    v = (v<<(8-to_read))+((tval >> (to_read)) & m);\n  }\n  return v;\n}\n\n\nivec3 get_mxz(int idx){\n    int fpos = 0;\n    int floc[] = int[](0,0,0,0,0,0,0,0);\n    for(int i=0;i<1024+ANGLE_loops;i++){\n        for(int j=0;j<8+ANGLE_loops;j++)\n        {\n            int tval = -1;\n            int ntval = -1;\n            tval=get_8bits_byidx_map_map_uint_angle(((i+0)*size_map_bits_size)/8,j);\n            if((i+1)<1024){\n                ntval=get_8bits_byidx_map_map_uint_angle(((i+1)*size_map_bits_size)/8,j);\n            }else {ntval = 0;}\n            int tsz=get_by_idx(i, tval, ntval, size_map_bits_size);\n            fpos+=tsz;\n            if(idx<fpos){\n                return ivec3(j,floc[j]+idx-(fpos-tsz),i);\n            }\n            floc[j]+=tsz;\n        }\n    }\n    return ivec3(-1,-1,-1);\n}\n\nivec4 to8bitsa(uint val){\n  ivec4 ret = ivec4(0);\n  for(int i=0;i<4+ANGLE_loops;i++){\n    ret[i] = int(val>>((3-i)*8))&0xFF;\n  }\n  return ret;\n}\n\nint get_map_by_idx(int midx, int lidx){\n    \n    ivec2 m1p[] = ivec2[](ivec2(1,0), ivec2(0,1), ivec2(1,1), ivec2(0,0));\n    \n    int xidx = lidx*map_bits_rnge;\n    int xidx2 = (lidx+1)*map_bits_rnge;\n    int xidx4 = xidx/32;\n    ivec2 tidx = ivec2(xidx4%32, (xidx4/32));\n    \n    int xidx42 = xidx2/32;\n    ivec2 tidx2 = ivec2(xidx42%32, (xidx42/32));\n    \n    float tval=texelFetch(iChannel3, m1p[midx/2]*ivec2(33,33)+tidx, 0)[midx%2];\n    float ntval=texelFetch(iChannel3, m1p[midx/2]*ivec2(33,33)+tidx2, 0)[midx%2];\n    \n    int rde = xidx4*32;\n    int tsft = xidx-rde;\n    int ldxi = tsft/8;\n    int ldxi2 = (tsft+map_bits_rnge)/8;\n    \n    ivec4 a1 = to8bitsa(floatBitsToUint(tval));\n    ivec4 a2 = to8bitsa(floatBitsToUint(ntval));\n    \n    int tarr[] = int[](a1[0],a1[1],a1[2],a1[3],a2[0],a2[1],a2[2],a2[3]);\n    int tval8 = tarr[ldxi];\n    int ntval8 = tarr[ldxi2];\n    \n    return get_by_idx(lidx, tval8, ntval8, map_bits_rnge);\n    \n    \n}\n\nvec4 restore_db(int idx){\n    if(idx>=num_elems){\n        return vec4(-1.);;\n    }\n    \n    ivec3 fi = get_mxz(idx);\n    int tv = get_map_by_idx(fi.x, fi.y);\n    int tvf = (fi.x*dvdr+tv);\n    \n    // return token left, token right ID\n    vec4 tret = vec4(vec2(fi.z>>8,fi.z&0xff)+0.5,vec2(tvf>>8,tvf&0xff)+0.5);\n    return tret;\n    \n}\n\n\nvec4 mapabuf(ivec2 ipx){\n\n    vec4 ret = vec4(0.);\n    int lidx = ipx.x+ipx.y*side_sz.x;\n    int jdx = lidx/128;\n    if(jdx>7)return ret;\n    float tret = texelFetch(iChannel3,ivec2(lidx%128,33*2+3+jdx/2),0)[jdx%2];\n    ret = vec4(to8bitsa(floatBitsToUint(tret)))+0.5;\n    return ret;\n}\n\n//-----------------------------------------\n\nint get_8bits_byidx_map_ta2(int idx){\n    int local_idx = idx/4;\n    uint val = get_map_ta2(local_idx);\n    val = (val>>((3-(idx%4))*8))&0xFFu;\n    return int(val);\n}\n\nint get_8bits_byidx_map_ta1(int idx){\n    int local_idx = idx/4;\n    uint val = get_map_ta1(local_idx);\n    val = (val>>((3-(idx%4))*8))&0xFFu;\n    return int(val);\n}\n\nint get_8bits_byidx_map_tb2(int idx){\n    int local_idx = idx/4;\n    uint val = get_map_tb2(local_idx);\n    val = (val>>((3-(idx%4))*8))&0xFFu;\n    return int(val);\n}\n\nint get_8bits_byidx_map_tb1(int idx){\n    int local_idx = idx/4;\n    uint val = get_map_tb1(local_idx);\n    val = (val>>((3-(idx%4))*8))&0xFFu;\n    return int(val);\n}\n\nint get_8bits_byidx_map_map_uint_angle(int idx, int jdx){\n    int local_idx = idx/4;\n    int tidx = local_idx+jdx*128;\n    ivec2 ipx = ivec2(tidx%side_sz.x,tidx/side_sz.x);\n    vec4 tval = loadval16_s2(ipx);\n    return int(tval[idx%4]);\n}\n\n//-----------------------------------------\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "\n// this shader works better with Vulkan\n// chrome.exe --use-angle=vulkan\n\nconst float scale = .051;\n\nconst int num_elems = 28476;\nconst int cube_num_elems_use_sz = 169; // sqrt(num_elems)\n\nconst int tokens = 1024;\nconst int cube_tokens_use_sz = 32; // sqrt(tokens)\n\nconst int map_bits_rnge = 7;\nconst int size_map_bits_size = 4;\nconst int dvdr = (1<<map_bits_rnge);\n\nconst int cube_side = 0;\n\n#define ANGLE_loops min(iFrame,0)\n\nvoid convert_cube_uv_to_xyz(in int index, in vec2 uv, out vec3 rd);\nvec4 read_cubem(samplerCube textr, ivec2 px, int side_idx, ivec2 side_res){\n    px.y = (side_res.y-1) - px.y; //vflip\n    vec2 tuv = (vec2(px)+0.5)/vec2(side_res);\n    vec3 trd;\n    convert_cube_uv_to_xyz(side_idx, tuv, trd);\n    return textureLod(textr, trd, 0.);\n}\n\n// https://www.shadertoy.com/view/NttGWr\nint getside_idx(vec3 rd){\n    int Front_side = 0;\n    int Back_side = 1;\n    int Up_side = 2;\n    int Down_side = 3;\n    int Left_side = 4;\n    int Right_side = 5;\n    \n    if(length(rd)<0.0001)return -1;\n    \n    vec3 a = abs(rd);\n    bvec3 ip = greaterThan(rd,vec3(0.));\n    if (ip.x && a.x >= a.y && a.x >= a.z) {return Front_side;}else\n    if (!ip.x && a.x >= a.y && a.x >= a.z) {return Back_side;}else\n    if (ip.y && a.y >= a.x && a.y >= a.z) {return Up_side;}else\n    if (!ip.y && a.y >= a.x && a.y >= a.z) {return Down_side;}else\n    if (ip.z && a.z >= a.x && a.z >= a.y) {return Left_side;}else\n    if (!ip.z && a.z >= a.x && a.z >= a.y) {return Right_side;}\n}\n\nvoid convert_cube_uv_to_xyz(in int index, in vec2 uv, out vec3 rd)\n{\n  float uc = 2.0 * uv.x - 1.0;\n  float vc = 2.0 * uv.y - 1.0;\n  rd=vec3(0.0001,0.9999,0.0001);\n  if(index==0){rd=normalize(vec3(1.0, vc, -uc));return;}\n  if(index==1){rd=normalize(vec3(-1.0, vc, uc));return;}\n  if(index==2){rd=normalize(vec3(uc, 1.0, -vc));return;}\n  if(index==3){rd=normalize(vec3(uc,-1.0, vc));return;}\n  if(index==4){rd=normalize(vec3(uc, vc, 1.0));return;}\n  if(index==5){rd=normalize(vec3(-uc, vc, -1.0));return;}\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}