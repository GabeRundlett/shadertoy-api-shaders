{
    "Shader": {
        "info": {
            "date": "1501509488",
            "description": "I thought I'd code anisotropic filtering from scratch. Texture is generated in BufferA, then sampled 16 times to display it. Mouse does things.",
            "flags": 32,
            "hasliked": 0,
            "id": "MsSfzc",
            "likes": 18,
            "name": "[SH17C] Anisotropic Filtering",
            "published": 3,
            "tags": [
                "filter",
                "mipmap",
                "anisotropy",
                "sh17c"
            ],
            "usePreview": 0,
            "username": "Klems",
            "viewed": 1938
        },
        "renderpass": [
            {
                "code": "\n// this work is licenced under a CC0 1.0 Universal License\n// https://creativecommons.org/publicdomain/zero/1.0/\n\n#define LEVELS (floor(log2(min(iResolution.x, iResolution.y)))-1.0)\n\n// sample\nvec4 myTexture( sampler2D channel, ivec2 uv, ivec2 level ) {\n    // clamp level\n    level = clamp(level, ivec2(0), ivec2(LEVELS));\n    // figure out the resolution\n\tivec2 res = ivec2(1) << (ivec2(LEVELS)-level);\n    // texture wrapping\n    uv = uv % res;\n    return texelFetch(channel, res+uv-1, 0);\n}\n\n// bilinear interpolation\nvec4 myTexture( sampler2D channel, vec2 uv, ivec2 level ) {\n\t// find the texels\n    vec2 res = exp2(LEVELS-vec2(level));\n    uv = uv*res - 0.5;\n    ivec2 a = ivec2(uv - step(uv, vec2(0)));\n    vec2 x = uv - vec2(a);\n    // lerp\n    const ivec2 d = ivec2(1, 0);\n    vec4 left  = mix(myTexture(channel, a+d.yy, level), myTexture(channel, a+d.yx, level), x.y);\n    vec4 right = mix(myTexture(channel, a+d.xy, level), myTexture(channel, a+d.xx, level), x.y);\n    return mix(left, right, x.x);\n}\n\n// trilinear interpolation\nvec4 myTexture( sampler2D channel, vec2 uv, vec2 level ) {\n    // find the correct level\n    ivec2 a = ivec2(level);\n    vec2 x = level - vec2(a);\n    // lerp\n    const ivec2 d = ivec2(1, 0);\n    vec4 left  = mix(myTexture(channel, uv, a+d.yy), myTexture(channel, uv, a+d.yx), x.y);\n    vec4 right = mix(myTexture(channel, uv, a+d.xy), myTexture(channel, uv, a+d.xx), x.y);\n    return mix(left, right, x.x);\n}\n\n// filtered texture lookup, analogous to textureGrad(channel, uv, dx, dy)\nvec4 myTextureGrad( sampler2D channel, vec2 uv, vec2 dx, vec2 dy ) {\n    vec2 box = max(abs(dx), abs(dy)) * exp2(LEVELS) * 2.0;\n    box = clamp(log2(box), vec2(0.0), vec2(16.0));\n    return myTexture(channel, uv, max(vec2(0.0), box));\n}\n\n// analogous to texture(channel, uv)\nvec4 myTexture( sampler2D channel, vec2 uv ) {\n    return myTextureGrad(channel, uv, dFdx(uv), dFdy(uv));\n}\n\n/////////////////////////////\n// TEXTURE FILTERING ABOVE //\n/////////////////////////////\n\n#define PI 3.14159265359\n#define rot(a) mat2(cos(a + PI*0.25*vec4(0,6,2,0)))\n\n// strings\nconst ivec2[] text0 = ivec2[]( \n\tivec2(7,9),  ivec2(12,9), ivec2(7,11), ivec2(5,9),  ivec2(14,9), \n\tivec2(5,9),  ivec2(2,8),  ivec2(1,9),  ivec2(4,8),  ivec2(5,9),  \n\tivec2(13,11),ivec2(9,9),  ivec2(0,8),  ivec2(13,9), ivec2(1,9),  \n\tivec2(0,8),  ivec2(8,13), ivec2(9,13));\nconst ivec2[] text1 = ivec2[]( \n\tivec2(0,13), ivec2(0,13), ivec2(4,8),  ivec2(5,9),  ivec2(8,8),  \n\tivec2(4,8),  ivec2(5,8),  ivec2(2,8),  ivec2(5,9),  ivec2(7,11), \n\tivec2(2,8),  ivec2(1,9),  ivec2(4,9),  ivec2(8,13), ivec2(9,13), \n\tivec2(0,13), ivec2(0,13), ivec2(0,13));\nconst ivec2[] text2 = ivec2[]( \n\tivec2(0,13), ivec2(0,13), ivec2(0,13), ivec2(0,13), ivec2(4,8),  \n\tivec2(5,9),  ivec2(8,8),  ivec2(4,8),  ivec2(5,8),  ivec2(2,8),  \n\tivec2(5,9),  ivec2(8,13), ivec2(9,13), ivec2(0,13), ivec2(0,13), \n\tivec2(0,13), ivec2(0,13), ivec2(0,13));\n\nvec4 text( vec2 uv, int id ) {\n    ivec2 string[] = text0;\n    if (id == 1) string = text1;\n    if (id == 2) string = text2;\n    uv *= 20.0;\n    float alias = length(fwidth(uv))*0.5;\n    uv += vec2(float(string.length())*0.5, 0.5);\n    float letter = 0.0;\n    ivec2 iuv = ivec2(floor(uv));\n    vec2 fuv = fract(uv);\n    vec3 col = vec3(0);\n    if ( iuv.x>=0 && iuv.x<=string.length()-1 && iuv.y==0 ) {\n        float te = texture( iChannel1, ( vec2(string[iuv.x]*64) + fuv*64.0 )/1024.0 ).w;\n        letter = smoothstep( alias, -alias, te-0.551 );\n        col += smoothstep( alias, -alias, te-0.5 );\n    }\n    return vec4(col, letter);\n}\n\n\n// trace to a plane\nfloat plane( vec4 pl, vec3 ro, vec3 rd ) {\n    return -(dot(pl.xyz,ro)+pl.w)/dot(pl.xyz,rd);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n    \n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x;\n    \n    if (iTime < 5.0) {\n\n        // display the mip map construction\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        vec4 string = text(uv, 0);\n        fragColor.rgb = mix(fragColor.rgb, string.rgb, string.a);\n        \n    } else if (iTime < 15.0) {\n        \n        // display textureGrad behavior\n        vec2 box = vec2(cos(iTime*vec2(0.752, 0.834)))*0.03+0.03;\n        if (iMouse.z > 0.0) {\n            box = abs(iMouse.xy - iResolution.xy * 0.5)/iResolution.x;\n        }\n        \n        vec2 inBox = abs(uv)-box;\n        float dBox = max(inBox.x, inBox.y);\n        float border = smoothstep(0.0, 0.005, abs(dBox));\n        \n        //box *= step(dBox, 0.0);\n        \n        fragColor = myTextureGrad(iChannel0, uv, vec2(box.x, 0), vec2(0, box.y));\n        fragColor.rgb = mix(vec3(0, 1, 0), fragColor.rgb, border);\n        \n        vec4 string = text(uv, 1);\n        fragColor.rgb = mix(fragColor.rgb, string.rgb, string.a);\n        \n    } else {\n    \t\n        // display a raytraced plane\n        vec3 from = vec3(0, 2.0+iMouse.y*0.05, iTime*10.0);\n        vec3 dir = normalize(vec3(uv, 0.4));\n        dir.xz *= rot(iTime*0.1);\n        dir.y = dir.y;\n\t\t\n        float dist = plane( vec4(0, 1, 0, 0), from, dir );\n\t\t\n        vec3 p = from+dir*dist;\n        fragColor = myTexture(iChannel0, p.xz*0.1);\n        \n        if (dist < 0.0) fragColor = vec4(0,0,0,1);\n        \n        vec4 string = text(uv, 2);\n        fragColor.rgb = mix(fragColor.rgb, string.rgb, string.a*smoothstep(18.0, 17.0, iTime));\n        \n    }\n    \n    // gamma correction\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0/2.2));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// this work is licenced under a CC0 1.0 Universal License\n// https://creativecommons.org/publicdomain/zero/1.0/\n\n#define LEVELS (floor(log2(min(iResolution.x, iResolution.y)))-1.0)\n\n// procedural texture to be filtered\nvec4 map( vec2 p ) {\n    \n    // repeat 3 times\n    vec2 inTile = fract(p*1.0)-0.5;\n    \n    // squares in the corner\n    vec2 centSquare = (step(vec2(0.0), inTile)*2.0-1.0)*0.5;\n    vec2 inSquare = abs(inTile-centSquare);\n    float dist = (inSquare.x+inSquare.y)-0.15;\n    \n    // add a border between tiles\n    inTile = abs(inTile);\n    float m = 0.5-max(inTile.x, inTile.y);\n\tm = max(m, -dist);\n    \n    // add a circle\n    vec2 inCirc = inTile + inTile.yx*vec2(1, -1);\n    vec2 centCirc = (step(vec2(0.0), inCirc.xy)*2.0-1.0)*0.5;\n    inCirc = inCirc-centCirc;\n    dist = min(dist, length(inCirc)-0.35);\n    \n    // tweak the border\n    m = min(m, abs(dist));\n    \n    vec4 color = mix(vec4(0.4, 0.37, 0.35, 1), vec4(0.8, 0.75, 0.65, 1),  smoothstep(0.0, -0.03, dist));\n    color = mix(color, vec4(0.1, 0.09, 0.08, 1), smoothstep(0.10, 0.13, dist));\n    color *= smoothstep(-0.02, 0.02, m);\n    \n    // add some noise\n   \tvec3 p3 = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx+19.19);\n    vec2 rnd = fract((p3.xx+p3.yz)*p3.zy);\n    color *= 1.0+(rnd.x+rnd.y)*0.1;\n    \n    return color;\n    \n}\n\n// use bufferA as storage for the procedural texture mip-maps\nvoid mainImage( out vec4 fragColor, vec2 fragCoord ) {\n\n    fragColor = vec4(0);\n    \n    // delay the generation, you can comment this\n    if (iFrame % 20 != 0) {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        return;\n    }\n\n    // current level\n    vec2 level = floor(log2(floor(fragCoord) + 1.0));\n    if (level.x == LEVELS && level.y == LEVELS) {\n        // insert texture data\n        fragColor = map( (fragCoord + 1.0) / exp2(LEVELS) );\n    } else if (level.x <= LEVELS && level.y <= LEVELS) {\n        vec2 delta = min(vec2(1.0), vec2(LEVELS)-level);\n        for (int x = 0 ; x < 2 ; x++)\n        for (int y = 0 ; y < 2 ; y++) {\n            vec2 uv = floor(fragCoord * (1.0+delta)) + vec2(x, y)*delta + 0.5;\n            fragColor += texelFetch(iChannel0, ivec2(uv), 0);\n        }\n        fragColor *= 0.25;\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}