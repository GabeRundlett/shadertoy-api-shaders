{
    "Shader": {
        "info": {
            "date": "1656972175",
            "description": "Just some sliding tiles. Picture reassembles after 840n+1 seconds, though the colouring is different.\n\n'g': show grid.",
            "flags": 16,
            "hasliked": 0,
            "id": "Nd3BRl",
            "likes": 10,
            "name": "Sliding Tiles",
            "published": 3,
            "tags": [
                "tiles",
                "sliding"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Sliding Tiles, mla 2022\n//\n// Checking the tile indexing works properly.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool even(int n) { return (n&1) == 0; }\nbool odd(int n) { return !even(n); }\n\nivec2 getindex(int t, vec2 uv) {\n  // Calculate which tile appears at point uv at time t.\n  // Other patterns should be possible.\n  ivec2 ix = ivec2(floor(uv));\n  if (odd(ix.x) && odd(ix.y)) return ix; // Stationary tiles\n  ix -= t/6*2; // Tiles move 2 every 6 cycles\n  t %= 6;\n  for ( ; t != 0; t--) {\n    // A neat recurrence. Maybe this could be simplified.\n    if (even(t)) {\n      if (even(ix.x)) ix.y--;\n    } else {\n      if (even(ix.y)) ix.x--;\n    }\n  }\n  return ix;\n}\n\nvec3 slider(vec2 uv) {\n  float scale = 4.0;\n  uv *= scale;\n  vec2 uv0 = uv;\n  float px = fwidth(uv.x);\n  float t = 0.5*max(0.0,iTime-1.0);\n  int cycle = int(t);\n  t = fract(t);\n  if (even(cycle)) {\n    if (mod(uv.y,2.0) < 1.0) {\n      uv.x -= t;\n    }\n  } else {\n    if (mod(uv.x,2.0) < 1.0) {\n      uv.y -= t;\n    }\n  }\n  ivec2 ix = getindex(cycle, uv);\n  float tscale = 0.5/scale;\n  vec2 tuv = tscale*(vec2(ix)+fract(uv));\n  tuv.x /= 1.5; // Fix aspect ratio for \"London\" scene\n  tuv += 0.5;\n  tuv = mod(tuv,2.0);\n  tuv = min(tuv,2.0-tuv);\n  vec3 col = textureGrad(iChannel0,tuv,tscale*dFdx(uv0),tscale*dFdy(uv0)).rgb;\n  col = pow(col,vec3(2.2));\n  uint h = ihash(uint(ix.x*1024+ix.y));\n  col *= 0.5+0.5*h2rgb(float(h)/exp2(32.0));\n  if (!key(CHAR_G)) {\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    float d = min(uv.x,uv.y);\n    col = mix(vec3(0),col,smoothstep(0.0,px,d-0.015));\n  }\n  col = 2.0*col/(1.0+col);\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = slider(uv);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = smoothstep(0.0,1.0,rgb);\n  return rgb;\n}\n\n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\nconst int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\n// const int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\n// const int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}