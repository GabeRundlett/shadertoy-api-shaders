{
    "Shader": {
        "info": {
            "date": "1715560298",
            "description": "version 2",
            "flags": 32,
            "hasliked": 0,
            "id": "McVSz3",
            "likes": 17,
            "name": "Streamlines #2",
            "published": 3,
            "tags": [
                "streamlines",
                "flowlines"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   // vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec3 col = texture(iChannel0,fragCoord.xy/iResolution.xy).rgb;\n    // Output to screen\n    fragColor = vec4(col,.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat2 rot(float a){\n    float s = sin(a), c = cos(a);\n    return mat2(c,s,-s,c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0){\n        fragColor = vec4(hash22(fragCoord),1.0,1.0);\n    }\n    else{\n        vec4 txt = texelFetch(iChannel0,ivec2(fragCoord),0);\n        vec2 p = txt.rg;\n        float n = noise(vec3(p*NOISE_FACTOR, iTime*TIME_FRACTOR));\n        float angle = n*PI*2.;\n        vec2 vel = vec2(1.,0.);// hash22(fragCoord);\n        vel *= rot(angle);\n        //vel = normalize(vel);\n        vel*=VEL_FACTOR;\n        p += vel;\n        fragColor = vec4(p,angle,1.0);\n        \n        \n        if(abs(p.x) > ASP || abs(p.y) > 1.){\n            vec2 p = hash22(fragCoord+floor(iTime));\n            p.x *= ASP;\n            fragColor = vec4(p,0.0,1.0);\n        }\n    }\n    }\n    \n    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define ASP iResolution.x/iResolution.y\n#define PI 3.1415926535\n#define TIME_FRACTOR 0.1\n#define VEL_FACTOR 0.008\n#define NUMBER 400\n#define MIX_FACTOR 0.99\n#define SIZE 0.007\n#define NOISE_FACTOR 2.\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy)*2.-1.;\n}\n\n//  1 out, 3 in...\nfloat hash(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = vec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nfloat drawPoint(vec2 uv, vec2 p){\n    return smoothstep(SIZE,SIZE*0.5, length(uv-p));\n    //return smoothstep(0.25/iResolution.y,0., length(uv-p) - SIZE);\n}\n\nvec3 drawAllPoints(vec2 uv,vec3 col){\n    \n    for(int i = 0; i < NUMBER; i++){\n        vec4 txt = texelFetch(iChannel0,ivec2(0,i),0);\n        vec2 p = txt.rg;\n        float angle = txt.b;\n        vec3 palette = 0.5+0.5*cos(vec3(1.,2.,4.)/1. + angle*1.5);\n        col = mix(col, palette, drawPoint(uv, p)*float(angle > 0.));\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec2 p = vec2(0.5,0.5);\n    \n    vec4 txt = texelFetch(iChannel0,ivec2(fragCoord),0);\n    //txt = texture(iChannel0,fragCoord.xy/iResolution.xy); \n    // Time varying pixel color\n    //p = txt.rg;\n    vec3 col = vec3(0.);\n    col = drawAllPoints(uv,col);//txt.rgb;//vec3(drawPoint(uv,p));\n    vec3 prev = texture(iChannel1,fragCoord.xy/iResolution.xy).rgb;\n    col = max(col,prev*MIX_FACTOR);\n    //col = mix(col, prev, 0.99);\n    //float noise = noise(vec3(uv,iTime*0.2));\n    // Output to screen\n    fragColor = vec4(col,.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}