{
    "Shader": {
        "info": {
            "date": "1712051387",
            "description": "shader shader",
            "flags": 0,
            "hasliked": 0,
            "id": "4cc3WS",
            "likes": 1,
            "name": "Shader228",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "kashircevpetr",
            "viewed": 118
        },
        "renderpass": [
            {
                "code": "void c1(in vec2 uv, in vec3 col1, out vec3 col){\n\n    float q;\n\n    float x1 = -0.4 * abs(sin(iTime / 2.3)) + 0.945;\n\n    float y1 = -0.8 * abs(cos(iTime / 2.3)) + 0.9;\n\n    float r = 0.1;\n\n    \n\n    if ((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1) <= r * r){\n\n        col = vec3(55.0 * abs(sin(0.02*iTime + (sqrt((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1))))), 55.0*abs(sin(0.07*iTime + 53.7 + sqrt((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1)))), 255.0*abs(sin(0.03*iTime + 216.52 + sqrt((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1)) )));\n\n    } else {col = col1;}\n\n}\n\n\nvoid c2(in vec2 uv, in vec3 col1, out vec3 col){\n    float q;\n    float x1 = 0.1 + 0.78 * abs(sin(iTime));\n    float y1 = 0.2 + 0.6 * abs(sin(iTime));\n    float r = 0.2;\n    \n    if ((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1) <= r * r && sin(iTime) >= 0.0 && cos(iTime) >= 0.0){\n        col = vec3(0, 255, 255);\n    } else {col = col1;}\n}\n\n\nvoid c3(in vec2 uv, in vec3 col1, out vec3 col){\n    float q;\n    float x1 = 0.3 - 0.1 * abs(sin(1.7 * iTime));\n    float x2 = 0.5 + 0.1 * abs(sin(1.7 * iTime));\n    float y1 = 0.2 - 0.1 * abs(sin(1.7 * iTime + 0.9));\n    float y2 = 0.7 + 0.1 * abs(sin(1.7 * iTime + 0.9));\n    \n    if (x1 <= uv.x && uv.x <= x2 && y1 <= uv.y && uv.y <= y2){\n        col = vec3(255, 255, 0);\n    } else {col = col1;}\n}\n\n\n\nvoid c4(in vec2 uv, in vec3 col1, out vec3 col){\n\n    float q;\n\n    float x1 = 0.1 + 0.78 * abs(sin(iTime));\n\n    float y1 = 0.2 + 0.6 * abs(sin(iTime));\n\n    float r = 0.2;\n\n    \n\n    if ((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1) <= r * r && sin(iTime) <= 0.0 && cos(iTime) <= 0.0){\n\n        col = vec3(0, 255, 255);\n\n    } else {col = col1;}\n\n}\n\n\nvoid c5(in vec2 uv, in vec3 col1, out vec3 col){\n\n    float q;\n\n    float x1 = 0.1 + 0.78 * abs(sin(iTime));\n\n    float y1 = 0.2 + 0.6 * abs(sin(iTime));\n\n    float r = 0.2;\n\n    \n\n    if ((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1) <= r * r && sin(iTime) <= 0.0 && cos(iTime) >= 0.0){\n\n        col = vec3(0, 255, 255);\n\n    } else {col = col1;}\n\n}\n\n\nvoid c6(in vec2 uv, in vec3 col1, out vec3 col){\n\n    float q;\n\n    float x1 = 0.1 + 0.78 * abs(sin(iTime));\n\n    float y1 = 0.2 + 0.6 * abs(sin(iTime));\n\n    float r = 0.2;\n\n    \n\n    if ((uv.x - x1) * (uv.x - x1) * 3.0 + (uv.y - y1) * (uv.y - y1) <= r * r && sin(iTime) >= 0.0 && cos(iTime) <= 0.0){\n\n        col = vec3(0, 255, 255);\n\n    } else {col = col1;}\n\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col;\n    col = cos(4.7 * iTime+uv.yyy * uv.yyy + uv.xxx * uv.xxx + vec3(0, 30, 60)) * cos(4.7*iTime+uv.yyy * uv.yyy + uv.xxx * uv.xxx + vec3(0, 30, 60));\n\n    c5(uv, col, col);\n    c6(uv, col, col);\n    c3(uv, col, col);\n    c2(uv, col, col);\n    c4(uv, col, col);\n    c1(uv, col, col);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}