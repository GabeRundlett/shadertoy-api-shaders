{
    "Shader": {
        "info": {
            "date": "1523424153",
            "description": "Variation of [https://www.shadertoy.com/view/ldKcDK]2018-04-10[/url]",
            "flags": 40,
            "hasliked": 0,
            "id": "lsKcDK",
            "likes": 3,
            "name": "Sound Experiment 2018-04-10var1",
            "published": 3,
            "tags": [
                "sound",
                "music"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 577
        },
        "renderpass": [
            {
                "code": "// Sound Source in Common\n\n\n\n// Passthrough to Channel 0\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2018 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat sincstep(float x) {\n    return ( x<0.001 ? 0. : 1.0-sin(pi*x)/(pi*x) );\n}\n\nfloat pulse1(float freq, float decay, float time) {\n  return sincstep(time*freq*2.)*exp(-time*decay)*cos(time*freq*2.*pi);\n}\n\nfloat synth2(float freq, float time, float maxtime) {\n  float v = 0.;\n  for (float n=1.0; n<18.; n+=1.0) {\n    v += pulse1(freq*n, pow(n,2.)*1., time)*exp(-n*0.3);\n  }\n  if (time < 0. || time > maxtime) return 0.;\n  v*=1.-exp((time/maxtime-1.)*8.);\n  return v;\n}\n\nfloat synth3(float freq, float time, float maxtime) {\n  float v = 0.;\n  for (float n=1.0; n<18.; n+=1.0) {\n    v += pulse1(freq*n, pow(n,1.)*0.8*freq/400., time)*exp(-n*0.2)*(1.-exp(-0.1*pow(n,2.)));\n  }\n  if (time < 0. || time > maxtime) return 0.;\n  v*=1.-exp((time/maxtime-1.)*8.);\n  //v*=1.-exp(-time*80.);\n  return v;\n}\n\nfloat seqf(int n) {\n  int k = n^(n>>1)^(n>>2)^(n>>3);\n  float f = 1.;\n  for (int i = 0; i < 3; i++) {\n    if ((k&(1<<i))!=0) {\n      f*=float(i+2)/float(i+1);\n    }\n  }\n  return f;\n}\n\nfloat seqa (float t, float e) { \n    \n    return max(pow(wave(t/2.),e), 0.);\n}\n\nvoid seq0(float time, out float ampl, out float freq, int j) {\n    int n = int(time);\n    ampl = seqa(time, 2.);\n    float fprod = 1.;\n    for (int i = 1; i < 8; i*=2) {\n        fprod *= seqf(n/i);\n        if (fprod>2.) fprod/=2.;\n        if (fprod>2.) fprod/=2.;\n    }\n    freq = 256. * 0.5 / fprod;\n    freq /= seqf(j%4+(j/n*4));\n}\n\nvec2 smoothclip(vec2 f) {\n    float p = 3.;\n    f.x = pow(atan(pow(abs(f.x),p)*1.571)/1.571,1./p)*sign(f.x);\n    f.y = pow(atan(pow(abs(f.y),p)*1.571)/1.571,1./p)*sign(f.y);\n    return f;\n}\n\nvec2 mainSound( in int samp, float timein ) {\n  float time = timein + 180.*0. - 2.;\n  float br;\n  vec2 v = vec2(0.);\n  for (int i = -2; i < 3; i++) {\n    float ampl;\n    float freq;\n    float td = 0.0001;\n    br = 2.*float(1<<i);\n    for (int j=0; j<20; j++) {\n      float br2 = br;\n      float rtime = time-float(j)/br2;\n      if (rtime<0.) continue;\n      float syntime = mod(timein,1./br2)+float(j)/br2;\n      seq0(rtime*br2, ampl, freq, int(rtime*2.));\n      ampl = 0.0625;\n      ampl *= pow(.9, 1.-float(i))*0.6;\n      freq*=2.;\n      float pos = float[](-0.5,-0.25,0.25,0.5)[int(rtime*br2)%4]*2.;\n      v.x += ampl*synth3(freq, syntime+td*sin(pos)-td, 20./br2)*pow(cos(pos/2.-pi/4.),2.);\n      v.y += ampl*synth3(freq, syntime-td*sin(pos)-td, 20./br2)*pow(cos(pos/2.+pi/4.),2.);\n    }\n    {\n      float syntime = mod(timein,1./br);\n      seq0(time*br, ampl, freq, int(time*2.));\n      freq*=2.;\n      ampl = 0.5;\n      ampl *= pow(.9, 1.-float(i))*0.6;\n      float pos = float[](-0.5,-0.25,0.25,0.5)[int(time*br)%4];\n      v.x += ampl*synth2(freq, syntime+td*sin(pos)-td, 1./br)*pow(cos(pos/2.-pi/4.),2.);\n      v.y += ampl*synth2(freq, syntime-td*sin(pos)-td, 1./br)*pow(cos(pos/2.+pi/4.),2.);\n    }\n  }\n  v *= max(1.-exp(-0.5*(time+2.)),0.)*min(1.,exp(0.5*time));\n  v *= max(1.-exp(-10.*(178.-timein)),0.);\n  v*=0.6;\n  v = smoothclip(v);\n  return vec2(v);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Source in Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\nfloat windowmax = 0.5;\n\nvec4 encode(int i) { return vec4((uvec4(i)>>ivec4(0,8,16,24))&0xFFu)/255.; }\nint decode(vec4 f) { uvec4 d = uvec4(f*255.)<<ivec4(0,8,16,24); return int(d.x|d.y|d.z|d.w); }\n\nvoid mainImage( out vec4 f, in vec2 pixf )\n{\n    f = vec4(0.);\n    ivec2 pix = ivec2(pixf);\n    ivec2 res = ivec2(iChannelResolution[0].xy);\n    int center = res.x*res.y/2;\n    int offset = int(iTime*iSampleRate) - center;\n    int index = res.x*pix.y+pix.x;\n    if (index==0) { f = encode(offset); return; }\n    int offsetlast = decode(texelFetch(iChannel0, ivec2(0), 0));\n    int cutoff = int(windowmax*iSampleRate);\n    if (abs(index-center) > cutoff) return;\n    int samp = index+offset;\n    int samplast = center+cutoff+offsetlast;\n    float time = (float(samp)-0.5)/iSampleRate;\n    \n    //#define TESTING\n    #ifdef TESTING\n    /* TESTING: ensure reuse of previously computed samples is valid.  No blue pixels should appear! */\n    vec2 newsamp = mainSound( in int samp,time);\n    vec2 oldsamp = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    f.xy = newsamp;\n    if (bool(newsamp != oldsamp) == bool(samp <= offsetlast + center + cutoff)) f.z = 1.;\n    #else\n    if (samp <= offsetlast + center + cutoff) {\n        f.xy = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    } else {\n        f.xy = mainSound(0,time);\n        //int nmod = int(iSampleRate/6000.);\n        //f.xy = vec2(sin(float(samp%nmod)/float(nmod)*2.*pi));\n    }\n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Config\n\nconst float timescale = 1./4.; // Screens per second\nconst float freqscale = 2000.;\n//const float aspect = 0.9;\nconst vec2 stereomix = vec2(1.,1.)*10.;\n\n\n\n/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\n//const float pi = 3.141592653589793;\n\nvec2 readsound( int isamp )\n{\n    ivec2 res = ivec2(iResolution.xy);\n    int offset = int(iTime*iSampleRate) - res.x*res.y/2;\n    //time += 4.;\n    int samp = isamp - offset;\n    ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n    return texelFetch(iChannel1, pix, 0).xy;\n}\n\nvec2 spectrogram(float windowtime, int isamp, float freq) {\n    vec2 sum = vec2(0.);\n    int iwindow = int(windowtime*iSampleRate);\n    float window = float(iwindow)/iSampleRate;\n    for (int irel = -iwindow; irel <= iwindow; irel+=1) {\n        // Cosine window\n        float w = (0.5+0.5*cos(float(irel)/float(iwindow)*pi));\n        float samp = dot(stereomix,readsound(isamp+irel));\n        float a = fract(float(irel)*freq/iSampleRate)*2.*pi;\n        sum += w*vec2(cos(a),sin(a))*samp;\n    }\n    return sum/iSampleRate/window;\n}\n\nvoid panImage( out vec4 f, int isamp, float y ) {\n    float freq = freqscale * y / iResolution.y;\n    float nparam = 58.5;\n    float aparam = 950.;\n    float windowtime = freq/nparam + exp(-freq/aparam)*aparam/nparam;\n    vec2 s = spectrogram(1./windowtime, isamp, freq);\n    f.rgb = vec3(10.,3.2,1.)*dot(s,s)*4.;\n}\n\n//#define FRAMEDEBUGVIS\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, int(time*iSampleRate), df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}