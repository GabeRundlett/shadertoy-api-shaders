{
    "Shader": {
        "info": {
            "date": "1578332642",
            "description": "Useful symmetric parameterised map from 0-1 to 0-1\n\n* zero at 0 and 1\n* 2nd parameter s controls curviness\n* transition between saw, sine-ish and reverse saw when s = 1\n\n\nDerived from https://iquilezles.org/articles/functions/functions.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "3lyGRW",
            "likes": 1,
            "name": "parameteric kcurve",
            "published": 3,
            "tags": [
                "kcurve"
            ],
            "usePreview": 0,
            "username": "weepy",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "float kcurve( float x, float k, float s )\n{\t\n    float p = (1.-x)/(1.-k);\n    float v = 4.-6.*abs(k-0.5);\n    float h = pow( x/(k*p), k ) * p;\n    \n    return pow( h, v*s*s );\n   \n}\n\nfloat scurve( float x, float k, float s )\n{\t\n   float x1= 1.-fract((x-k)/(1.-k));\n   float x2=fract(x/k);\n \t\n   \n return x < k ? x2 : x1;//*k+x2*(1.-k);\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    float p = kcurve(uv.x, mouse.x, mouse.y*5.);\n    \n\n      fragColor = mix(vec4(0.),  vec4(col,1.0), smoothstep( 0.,0.005, p-uv.y));   \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}