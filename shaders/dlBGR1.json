{
    "Shader": {
        "info": {
            "date": "1672844087",
            "description": "https://genuary.art/ Made in 10 minutes",
            "flags": 0,
            "hasliked": 0,
            "id": "dlBGR1",
            "likes": 1,
            "name": "Genuary2023 jan.2",
            "published": 3,
            "tags": [
                "genuary"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat _seed;\nfloat hash11(float seed)\n{\n    return fract(sin(seed*123.456)*123.456);\n}\nfloat rand()\n{\n    return hash11(_seed++);\n}\nvec3 gradient(float i)\n{\nvec3 grad[4];\n        grad[0] = vec3(0.765,0.376,0.314);\n        grad[1] = vec3(0.349,0.871,0.910);\n        grad[2] = vec3(0.765,0.376,0.314);\n        grad[3] = vec3(0.137,0.122,0.937)*2.;\n    float idx = sat(i)*3.0;\n    int prevIdx = int(idx);\n    int nextIdx = min(prevIdx+1, 3);\n    vec3 prev = grad[prevIdx];\n    vec3 next = grad[nextIdx];\n    float lrp = idx - float(prevIdx);\n    return mix(prev, next, smoothstep(0.,1.,lrp));\n}\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.05);\n    \n    vec2 uv2 = uv;\n    float rep = .1;\n       uv2.y += sin(uv2.x*3.)*.1+.2*sin(uv2.y*5.+uv.x*5.+iTime*.2);\n    float lines = sin(uv2.y*280.)+.9999;\n    \n    float mask = length(uv)-.25;\n    float sharp = iResolution.x*.5;\n    col = mix(col, gradient(length(uv2)*2.), (1.-sat(lines))*(1.-sat(mask*sharp)));\n    col = mix(col, gradient(length(-uv2)*2.).zxy, 1.-sat((abs(mask)-.001)*sharp));\n    col += gradient(length(uv2)*2.)*(1.-sat(lines*.5))*.5*(1.-sat(length(uv)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.xx;\n    float stp = .007;\n    uv = floor((uv/stp))*stp;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec3 col = rdr(uv);\n    col += pow(rand(),.5)*.1;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}