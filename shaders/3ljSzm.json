{
    "Shader": {
        "info": {
            "date": "1565431832",
            "description": "slightly nauseating ",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljSzm",
            "likes": 4,
            "name": "dither + raymarch experiment",
            "published": 3,
            "tags": [
                "sdf",
                "dither",
                "lowfi"
            ],
            "usePreview": 0,
            "username": "spac",
            "viewed": 435
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n\n/* --- */\n// try hacking around with some of these\n\n#define RENDER_PIXEL_WIDTH 2\n#define RENDER_PIXEL_HEIGHT 2\n\n#define DITHER_PIXEL_WIDTH 2\n#define DITHER_PIXEL_HEIGHT 2\n#define DITHER_CHANNEL_DEPTH 4\n\n#define SKY_TOP vec3(0.8, 0.0, 0.3)\n#define SKY_MID vec3(0.0, 0.0, 0.2)\n#define SKY_BOT vec3(0.0, 0.7, 0.5)\n\n#define MAX_ITERATIONS 200\n#define EPSILON 0.005\n/* --- */\n\nvec3 cameraPos = vec3(0.0, -5.0, 0.75);\nvec3 cameraDir = vec3(0.0, 1.0, 0.0);\nvec3 cameraUp = vec3(0.0, 0.0, 1.0);\nfloat cameraFovX = TAU * 0.28;\n\nvec3 getCameraRay(vec2 fragCoord)\n{\n    vec2 normalizedCoord = fragCoord * 2.0 / iResolution.xy - 1.0;\n    normalizedCoord.y *= iResolution.y / iResolution.x;\n    \n    float cameraDepth = 1.0 / tan(cameraFovX / 2.0);\n    \n    vec3 cameraX = normalize(cross(cameraDir, cameraUp));\n    vec3 cameraY = cross(cameraX, cameraDir);\n    \n    return normalize(cameraDepth*cameraDir + normalizedCoord.x*cameraX + normalizedCoord.y*cameraY);\n}\n\nvec4 sdUnion(vec4 sd1, vec4 sd2)\n{\n    if (sd1.w <= sd2.w) return sd1;\n    else               return sd2;\n}\n\nvec4 sdSphere(vec3 s, float r)\n{\n    return vec4(normalize(s), length(s) - r);\n}\n\nvec4 sdHalfspace(vec3 p, vec3 n, float k)\n{\n    return vec4(n, dot(p, n) - k);\n}\n\nvec4 sdWorld(vec3 p)\n{\n    vec4 sd = vec4(10000000.0);\n    float breathe = 1.0 + 0.15 * (1.0 + cos(iTime));\n    sd = sdUnion(sd, sdSphere(p - breathe*vec3(-2.5, 0.0, 0.0), 1.0));\n    sd = sdUnion(sd, sdSphere(p - breathe*vec3(-2.5, 1.5, 3.0), 1.5));\n    sd = sdUnion(sd, sdSphere(p - breathe*vec3(5.0, 12.0, -1.0), 5.0));\n    sd = sdUnion(sd, sdSphere(p - breathe*vec3(-2.0, 36.0, -10.0), 10.0));\n    sd = sdUnion(sd, sdHalfspace(p - vec3(0.0, 10.0, -20.0), normalize(vec3(sin(iTime), 0.2*cos(iTime), 1.5)), -5.0));\n    return sd;\n}\n\nfloat getRayHit(inout vec3 p, inout vec3 v)\n{\n    for (int i = 0; i < MAX_ITERATIONS; i++)\n    {\n        vec4 sd = sdWorld(p);\n        p += sd.w * v;\n        if (sd.w <= EPSILON) \n        {\n            v = reflect(v, vec3(sd));\n            p += v * 0.01;\n            return 1.0;\n        }\n    }\n    return 0.0;\n}\n\nvec3 getSkyColor(vec3 v)\n{\n    if (v.z > 0.0) {\n        return mix(SKY_TOP, SKY_MID, 1.0-v.z*2.5);\n    } else {\n        return mix(SKY_BOT, SKY_MID, 1.0+v.z*2.5);\n    }\n}\n\nvec3 getRayColor(vec3 p, vec3 v)\n{\n    vec3 skyColor;\n    float factor = 1.0;\n    int reflections;\n    for (reflections = 0; reflections < 5; reflections++)\n    {\n        skyColor = getSkyColor(v - vec3(0.0, 0.0, 0.3 - 0.15*cos(1.1*iTime)));\n        if (getRayHit(p, v) > 0.0) {\n            factor *= 0.6;\n        } else {\n            break;\n        }\n    }\n    return skyColor * factor;\n}\n\nmat4 dither4Bayer = mat4(\n\t0.0, 12.0, 3.0, 15.0,\n    8.0, 4.0, 11.0, 7.0,\n    2.0, 14.0, 1.0, 13.0,\n   \t10.0, 6.0, 9.0, 5.0\n) / 16.0;\n\nfloat dither4Scalar(vec2 position, float value)\n{\n\tfloat bias = dither4Bayer[(int(position.x)/DITHER_PIXEL_WIDTH)%4]\n                             [(int(position.y)/DITHER_PIXEL_HEIGHT)%4];\n    return floor(bias + value*float(DITHER_CHANNEL_DEPTH-1)) / float(DITHER_CHANNEL_DEPTH-1);\n}\n\nvec3 dither4(vec2 position, vec3 color)\n{\n    return vec3(dither4Scalar(position, color.r),\n                dither4Scalar(position, color.g), \n                dither4Scalar(position, color.b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //cameraDir = vec3(sin(iTime), cos(iTime), 0.0);\n    ivec2 pixelation = ivec2(RENDER_PIXEL_WIDTH, RENDER_PIXEL_HEIGHT);\n    vec2 pixelatedCoord = vec2((ivec2(fragCoord) / pixelation) * pixelation);\n    pixelatedCoord += vec2(pixelation) / 2.0;\n    cameraPos.y = -7.0 + cos(0.9*iTime)*3.0;\n    cameraPos.x = sin(0.13*iTime)*5.0;\n    fragColor.rgb = getRayColor(cameraPos, getCameraRay(pixelatedCoord));\n    fragColor.rgb = dither4(fragCoord, fragColor.rgb);\n    fragColor.a = 1.0;\n    //fragColor = vec4(getCameraRay(fragCoord),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}