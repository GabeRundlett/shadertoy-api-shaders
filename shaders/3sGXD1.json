{
    "Shader": {
        "info": {
            "date": "1573853221",
            "description": "Naive Planet Factory",
            "flags": 0,
            "hasliked": 0,
            "id": "3sGXD1",
            "likes": 6,
            "name": "Happy Planet",
            "published": 3,
            "tags": [
                "planet"
            ],
            "usePreview": 0,
            "username": "andremichelle",
            "viewed": 605
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n#define s(a,b,c) smoothstep(a,b,c)\n\nfloat Hash(in vec2 p, in float scale) {\n\treturn fract(sin(dot(mod(p, scale), vec2(27.16898, 38.90563))) * 1.5473453);\n}\n\nfloat Noise(in vec2 p, in float scale ) {\n\tvec2 f;\n\tp *= scale;\n\tf = fract(p);\n    p = floor(p);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(Hash(p, scale),\n\t\t\tHash(p + vec2(1.0, 0.0), scale), f.x),\n\t\t\tmix(Hash(p + vec2(0.0, 1.0), scale),\n\t\t\tHash(p + vec2(1.0, 1.0), scale), f.x), f.y);\n}\n\nfloat fbm(in vec2 p) {\n\tfloat f = 0.0;\n\tfloat scale = 10.;\n    p = mod(p, scale);\n\tfloat amp   = .6;\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += Noise(p, scale) * amp;\n\t\tamp *= .5;\n\t\tscale *= 2.;\n\t}\n\treturn min(f, 1.0);\n}\n\nvec3 check(vec2 uv) {\n    const float s = 20.;\n    return vec3(.12+0.06*mod(floor(s*uv.x)+floor(s*uv.y),2.0));\n}\n\nvec4 over( in vec4 a, in vec4 b ) {\n    return mix(a, b, 1.-a.w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y*2.;\n    \n\tfloat len = length(uv);\n    float time = iTime + 33.;\n    \n    float size = .8;\n    vec2 sc = fract(uv*asin(len/size)/(len*PI*2.));\n    sc.x += time*.006;\n\n    vec4 c = vec4(.0);\n\n    float alpha = smoothstep(.0, .01, size-len);\n    float value = pow(fbm(sc), 0.75);\n\n    c = over(vec4(vec3(.00,.00,.20), s(.99, .80, value) * alpha), c);\n    c = over(vec4(vec3(.02,.14,.47), s(.80, .63, value) * alpha), c);\n\tc = over(vec4(vec3(.82,.68,.56), s(.63, .60, value) * alpha), c); // sand\n    c = over(vec4(vec3(.25,.41,.13), s(.61, .52, value) * alpha), c); // green coast\n    c = over(vec4(vec3(.35,.28,.20), s(.52, .50, value) * alpha), c);\n    c = over(vec4(vec3(.62,.48,.36), s(.50, .40, value) * alpha), c);\n    c = over(vec4(vec3(.38,.34,.26), s(.40, .30, value) * alpha), c);\n    c = over(vec4(vec3(.38,.31,.20), s(.21, .10, value) * alpha), c);\n    c = over(vec4(vec3(1.0,1.0,1.0), s(.20, .00, value) * alpha), c);\n\n    sc.x += time*.0014;\n    value = fbm(sc*3.);\n    c = over(vec4(vec3(0.), s(.21, .10, pow(value, 2.)) * alpha * 0.50), c);\n    c = over(vec4(vec3(1.), s(.20, .00, pow(value, 3.)) * alpha * 0.75), c);\n    c.rgb *= smoothstep(1., .7, len);\n    c = over(vec4(vec3(.0, .3, .6), s(.9, .00, pow(abs(size-len), .2))), c);\n    \n\tc = over(vec4(vec3(1.), pow(distance(uv, vec2( .98, .3)), -0.4+sin(time)*.04)*.040), c);\n\tc = over(vec4(vec3(1.), pow(distance(uv, vec2(-.9, -.6)), -1.2+sin(time)*.04)*.001), c);\n    \n\tfragColor = c;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}