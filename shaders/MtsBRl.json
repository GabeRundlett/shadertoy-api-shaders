{
    "Shader": {
        "info": {
            "date": "1513045396",
            "description": "An exercise in PBR, reflections (although a hack) and modeling diligence :) I wanted to go for the real SGI-logo as an homage, but the boolean ops with the tori gave me nothing but headaches. Happy with the result. Added bloom and FXAA (but disabled atm).",
            "flags": 32,
            "hasliked": 0,
            "id": "MtsBRl",
            "likes": 14,
            "name": "wire cube",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "postprocessing",
                "materials",
                "bloom",
                "fxaa",
                "pbr"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 1328
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// raymarched and PBR-shaded SGI-logo-like wire cube \n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// Don't look at the code yet, if you want to learn anything... it's not\n// stripped of superfluous stuff yet and will change as I'm still doing FXAA,\n// which is the last ToDo-item on the list I set myself for this. PBR and\n// modeling where the hardest part on this one.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// all passes are put together\n\nconst bool SHOW_BUFFERS = false;\nconst float FXAA_SPAN_MAX = 8.;\nconst float FXAA_REDUCE_MIN = 1. / 128.;\nconst float FXAA_REDUCE_MUL = 1. / 8.;\n\nvec3 getBaseFXAA (vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iChannelResolution[0].xy;\n    vec2 offset = 1. / iChannelResolution[0].xy;\n\n    vec3 lum = vec3 (.299, .587, .114);\n    float lumTL = dot (lum, texture (iChannel0, (uv + vec2 (-1., -1.))*offset).rgb);\n    float lumBL = dot (lum, texture (iChannel0, (uv + vec2 (-1., 1.))*offset).rgb);\n    float lumC  = dot (lum, texture (iChannel0, uv).rgb);\n    float lumTR = dot (lum, texture (iChannel0, (uv + vec2 (1., -1.))*offset).rgb);\n    float lumBR = dot (lum, texture (iChannel0, (uv + vec2 (1., 1.))*offset).rgb);\n\n    vec2 blurDir;\n    float blurReduce = max((lumTR + lumTL + lumBR + lumBL) * (FXAA_REDUCE_MUL * .25),\n                           FXAA_REDUCE_MIN);\n    blurDir.x = ((lumTR + lumTL) - (lumBR + lumBL));\n    blurDir.y = ((lumTL + lumBL) - (lumTR + lumBR));\n    float inverseDirAdjustment = 1. / (min (abs (blurDir.x), abs (blurDir.y)) + blurReduce);\n    \n    blurDir = min (vec2 (FXAA_SPAN_MAX), max (vec2 (-FXAA_SPAN_MAX),\n                                              blurDir * inverseDirAdjustment));\n    blurDir *= offset;\n\n    vec3 result1 = .5 * (texture (iChannel0, uv + blurDir * vec2 (1. / .3 - .5)).rgb +\n                         texture (iChannel0, uv + blurDir * vec2 (2. / .3 - .5)).rgb);\n    vec3 result2 = result1 * .5 +\n                   .25 * (texture (iChannel0, uv + blurDir * vec2 (0. / .3 - .5)).rgb +\n                          texture (iChannel0, uv + blurDir * vec2 (3. / .3 - .5)).rgb);\n\n    float lumMin = min (lumC, min (min (lumTL, lumTR), min (lumBL, lumBR)));\n    float lumMax = max (lumC, max (max (lumTL, lumTR), max (lumBL, lumBR)));\n    float lumResult2 = dot (lum, result2);\n    vec3 color = vec3 (.0);\n\n    if (lumResult2 > lumMax || lumResult2 < lumMin) {\n        color = result1;\n    } else {\n        color = result2;\n    }\n\n    return color;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 uvRaw = uv;\n    uv = uv * 2. - 1.;\n\n    //vec3 base = getBaseFXAA (fragCoord);\n    vec3 base = texture (iChannel0, fragCoord / iChannelResolution[0].xy).rgb;\n    vec3 intensity = texture (iChannel1, fragCoord / iChannelResolution[1].xy).rgb;\n    vec3 bloomFirst = texture (iChannel2, fragCoord / iChannelResolution[2].xy).rgb;\n    vec3 bloomSecond = texture (iChannel3, fragCoord / iChannelResolution[3].xy).rgb;\n\n    vec3 col = base + 2.5 * bloomSecond;\n    col = col / (1. + col);\n    col = .2 * col + .8 * sqrt (col);\n    col *= vec3 (.95, .9, .85);\n    col *= .2 + .8 * pow (16. * uvRaw.x * uvRaw.y * (1. - uvRaw.x) * (1. - uvRaw.y), .3);\n\n    if (SHOW_BUFFERS) {\n        if (uv.y < -.5) {\n            fragColor = vec4 (base, 1.);\n        } else if (uv.y < .0) {\n            fragColor = vec4 (intensity, 1.);\n        } else if (uv.y < .5){\n            fragColor = vec4 (col, 1.);\n    \t} else {\n    \t\tfragColor = vec4 (bloomSecond, 1.);\n    \t}\n    } else {\n\t\tfragColor = vec4 (col, 1.);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// raymarched and PBR-shaded SGI-logo-like wire cube \n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// here the base image is generated\n\n// fast machines can do (64, true, true) - the setting (32, false, true) works ok for IGPs\n#define MAX_ITER 64\n#define DO_SHADOWS true\n#define DO_REFLECTIONS true\n\n#define EPSILON .001\n#define STEP_SIZE .975\n#define PI 3.14159265359\n\nstruct Result {\n    float d;\n    int id;\n};\n\n// PBR toolbox\nfloat DistributionGGX (in vec3 N, in vec3 H, in float roughness)\n{\n    float a2     = roughness * roughness;\n    float NdotH  = max (dot (N, H), .0);\n    float NdotH2 = NdotH * NdotH;\n\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.) + 1.);\n    denom        = PI * denom * denom;\n\n    return nom / denom;\n}\n\nfloat GeometrySchlickGGX (in float NdotV, in float roughness)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1. - roughness) + roughness;\n\n    return nom / denom;\n}\n\nfloat GeometrySmith (in vec3 N, in vec3 V, in vec3 L, in float roughness)\n{\n    float NdotV = max (dot (N, V), .0);\n    float NdotL = max (dot (N, L), .0);\n    float ggx1 = GeometrySchlickGGX (NdotV, roughness);\n    float ggx2 = GeometrySchlickGGX (NdotL, roughness);\n\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick (in float cosTheta, in vec3 F0, float roughness)\n{\n\treturn F0 + (max (F0, vec3(1. - roughness)) - F0) * pow (1. - cosTheta, 5.);\n}\n\nfloat saturate (float v)\n{\n    return clamp (v, .0, 1.);\n}\n\nmat2 r2d (in float a)\n{\n    float r = radians (a);\n    float c = cos (r);\n    float s = sin (r);\n    return mat2 (vec2 (c, s), vec2 (-s, c));\n}\n\nfloat sdTorus (in vec3 p, in vec2 t)\n{\n    vec2 q = vec2 (length (p.xz) - t.x, p.y);\n    return length (q) - t.y;\n}\n\nfloat sdPlane (in vec3 p, in float h)\n{\n    return length (vec3 (.0, p.y + h, .0));\n}\n\nfloat sdCylinder (in vec3 p, float h, float r)\n{\n    float d = length (p.xz) - r;\n    d = max (d, abs(p.y) - h);\n    return d;\n}\n\nResult scene (in vec3 p)\n{\n\tResult res = Result(.0, 0);\n\n    float floor = sdPlane (p, .7);\n\n    float r = .025 + .01 * cos (iTime);\n    float a = 10. * r;\n    float b = 2. * r;\n\n    // for construction/debugging\n    //p.xz *= r2d (iMouse.x);\n    //p.yz *= r2d (iMouse.y);\n\n    // for presenting\n    p.xy *= r2d (55. + 12. * iTime);\n    p.yz *= r2d (30. + 17. * iTime);\n    p.zx *= r2d (65. + 23. * iTime);\n    \n    p += vec3 (a);\n\n    float torus = sdTorus (p + vec3 (.0, b, .0), vec2 (b, r));\n    float bars = sdCylinder (p.yxz + vec3 (b, -a, b), a, r);\n    bars = min (bars, sdCylinder (p.yzx + vec3 (b, -a, b), a, r));\n    torus = min (bars, torus);\n    torus = min (torus, sdTorus (p.zyx + vec3 (.0, b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.xzy + vec3 (-2.*a-b, -a+r, b), a-r, r));\n    torus = min (torus, sdTorus (p.xyz + vec3 (.0, b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.yxz + vec3 (2.*r, -a+r, -2.*a-b), a-r, r));\n\n    torus = min (torus, sdTorus (p.xzy + vec3 (-2.*a+b, -2.*a-b, .0), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.xyz + vec3 (-2.*a, -a-b+2.*r, -2.*a-b), a, r));\n    torus = min (torus, sdTorus (p.xzy + vec3 (-2.*a+b, -2.*a-b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.yxz + vec3 (-2.*a-b, -a+b, -2.*a-b), a, r));\n    torus = min (torus, sdTorus (p.xzy + vec3 (b, -2.*a-b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.xyz + vec3 (2.*b, -a-r, -2.*a-b), a-r, r));\n\n    torus = min (torus, sdTorus (p.zxy + vec3 (-2.*a+b, -2.*a-b, .0), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zyx + vec3 (-2.*a, -a, -2.*a-b), a, r));\n    torus = min (torus, sdTorus (p.zxy + vec3 (-2.*a+b, -2.*a-b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.yzx + vec3 (-2.*a-b, -a+b, -2.*a-b), a, r));\n    torus = min (torus, sdTorus (p.zxy + vec3 (b, -2.*a-b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zyx + vec3 (2.*b, -a-b+r, -2.*a-b), a-r, r));\n\n    torus = min (torus, sdTorus (p.yxz + vec3 (-b, 2.*b, -2.*a), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.yzx + vec3 (.0, -a, 2.*b), a, r));\n    torus = min (torus, sdTorus (p.yxz + vec3 (-b, 2.*b, .0), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zyx + vec3 (b, -a-b, 2.*b), a, r));\n    torus = min (torus, sdTorus (p.yxz + vec3 (-2.*a-b, 2.*b, .0), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.yzx + vec3 (-2.*a-2.*b, -a+r, 2.*b), a-r, r));\n\n    torus = min (torus, sdTorus (p.xyz + vec3 (b, -2.*a-2.*b, -2.*a+2.*r), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zxy + vec3 (-2.*a, -a+b, -2.*a-2.*b), a, r));\n    torus = min (torus, sdTorus (p.zyx + vec3 (2.*-a+b, -2.*a-2.*b, -2.*a+b), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.xzy + vec3 (-2.*a, -a+b, -2.*a-2.*b), a, r));\n    torus = min (torus, sdTorus (p.xzy + vec3 (-2.*a, 2.*b, -b), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zxy + vec3 (2.*b, -a, .0), a, r));\n\n    torus = min (torus, sdTorus (p.xzy + vec3 (.0, 2.*b, -b), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zyx + vec3 (2.*b, -a-b, b), a, r));\n    torus = min (torus, sdTorus (p.zyx + vec3 (b, -2.*a-2.*b, -2.*a+b), vec2 (b, r)));\n    torus = min (torus, sdCylinder (p.zxy + vec3 (2.*b, -a+r, -2.*a-2.*b), a-r, r));\n    torus = min (torus, sdTorus (p.xzy + vec3 (.0, 2.*b, -2.*a-b), vec2 (b, r)));\n\n    res.d = min (torus, floor);\n    res.id = (res.d == torus) ? 1 : 2;\n\n    return res;\n}\n\nvec3 normal (in vec3 p, in float epsilon)\n{\n    float d = scene (p).d;\n    vec3 e = vec3 (epsilon, .0, .0);\n    return normalize (vec3 (scene (p + e.xyy).d - d,\n                            scene (p + e.yxy).d - d,\n                            scene (p + e.yyx).d - d));\n}\n\nResult march (in vec3 ro, in vec3 rd, out int iter)\n{\n    Result res = Result (.0, 0);\n    for (int i = 0; i < MAX_ITER; ++i) {\n        iter = i;\n        vec3 p = ro + res.d * rd;\n        Result tmp = scene (p);\n        //if (tmp.d < EPSILON) return res;\n        if (abs (tmp.d) < EPSILON * (1. + .125*tmp.d)) return res;\n        res.d += tmp.d * STEP_SIZE;\n        res.id = tmp.id;\n    }\n\n    return res;\n}\n\nfloat shadow (in vec3 ro, in vec3 rd)\n{\n    float result = 1.;\n    float t = .1;\n    for (int i = 0; i < MAX_ITER; i++) {\n        float h = scene (ro + t * rd).d;\n        if (h < .00001) return .0;\n        result = min (result, 8. * h/t);\n        t += h;\n    }\n\n    return result;\n}\n\nvec3 shadePBR (in vec3 ro, in vec3 rd, in float d, in int id)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p, d*EPSILON);\n\n    // \"material\" hard-coded for the moment\n    vec3 albedo =     (id == 1) ? vec3(.7,.55,.45) : (id == 2) ? vec3 (.9) : (id == 3) ? vec3 (.2, .4, .9) : vec3 (.9, .4, .1);\n    float metallic =  (id == 1) ? .9 : (id == 2) ? 0.0 : (id == 3) ? .0 : .0; \n    float roughness = (id == 1) ? .125 : (id == 2) ? .5 : (id == 3) ? .5 : .2;\n    float ao = 1.;\n\n    // lights hard-coded as well atm\n    vec3 lightColors[4];\n    lightColors[0] = vec3 (.9, .9, .9) * 120.;\n    lightColors[1] = vec3 (.9, .25, .9) * 275.;\n    lightColors[2] = vec3 (.25, .9, .9) * 275.;\n    lightColors[3] = vec3 (.25, .9, .25) * 275.;\n\n    vec3 lightPositions[4];\n    lightPositions[0] = vec3 (.0, .0, .0);\n    lightPositions[1] = vec3 (-1.1, 1.5, -2.);\n    lightPositions[2] = vec3 (-1., .75, -2.2);\n    lightPositions[3] = vec3 (.0, 2.75, -2.2);\n\n\tvec3 N = normalize (nor);\n    vec3 V = normalize (ro - p);\n\n    vec3 F0 = vec3 (0.04); \n    F0 = mix (F0, albedo, metallic);\n    vec3 kD = vec3(.0);\n\t           \n    // reflectance equation - cutting down on the light boost preformance of course\n    vec3 Lo = vec3 (.0);\n    for(int i = 0; i < 4; ++i) \n    {\n        // calculate per-light radiance\n        vec3 L = normalize(lightPositions[i] - p);\n        vec3 H = normalize(V + L);\n        float distance    = length(lightPositions[i] - p);\n        float attenuation = 2.5 / (distance * distance);\n        vec3 radiance     = lightColors[i] * attenuation;        \n        \n        // cook-torrance brdf\n        float aDirect = .125 * pow (roughness + 1., 2.);\n        float aIBL = .5 * roughness * roughness;\n        float NDF = DistributionGGX(N, H, roughness);        \n        float G   = GeometrySmith(N, V, L, roughness);      \n        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0, roughness);       \n        \n        vec3 kS = F;\n        kD = vec3(1.) - kS;\n        kD *= 1. - metallic;\t  \n        \n        vec3 nominator    = NDF * G * F;\n        float denominator = 4. * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        vec3 specular     = nominator / max(denominator, .001);  \n\n        // add to outgoing radiance Lo\n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL;\n\n        if (DO_SHADOWS) {\n\t    \tLo *= shadow (p, L);\n        }\n    }\n\n    vec3 irradiance = texture (iChannel0, N).rgb;\n    vec3 diffuse    = irradiance * albedo;\n    vec3 ambient    = (kD * diffuse) * ao;\n\n    return ambient + Lo;\n}\n\nfloat reflection (in vec3 ro, in vec3 rd, in float d)\n{\n    vec3 p = ro + d * rd;\n    vec3 nor = normal (p, d*EPSILON);\n    vec3 ref = normalize (reflect (rd, nor));\n    float iter = .001;\n    float r = 1.;\n    for (int i = 0; i < MAX_ITER; ++i) {\n    \tfloat d = scene (p + nor *.01 + ref * iter).d;\n        if (d <=.0) break;\n        r *= saturate (d * 50.);\n        iter += max (.0, d);\n    }\n\n    return saturate (r);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvRaw = uv;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3 (.0, .0, -2.75);\n    vec3 rd = normalize (vec3 (uv, 1.) - ro);\n    int iter = 0;\n    Result res = march (ro, rd, iter);\n\n    float fog = 1. / pow(1. + res.d * res.d * .1, 3.0);\n    vec3 color = fog * shadePBR (ro, rd, res.d, res.id);\n\n    if (DO_REFLECTIONS) {\n    \tfloat refl = reflection (ro, rd, res.d);\n    \tcolor += refl * .0625;\n    }\n    color *= fog;\n\n    fragColor = vec4 (color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// raymarched and PBR-shaded SGI-logo-like wire cube \n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// here the intensity/greyscale threshold image is generated\n\nconst float FXAA_SPAN_MAX = 8.;\nconst float FXAA_REDUCE_MIN = 1. / 128.;\nconst float FXAA_REDUCE_MUL = 1. / 8.;\n\nvec3 getBaseFXAA (vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iChannelResolution[0].xy;\n    vec2 offset = 1. / iChannelResolution[0].xy;\n\n    vec3 lum = vec3 (.299, .587, .114);\n    float lumTL = dot (lum, texture (iChannel0, (uv + vec2 (-1., -1.))*offset).rgb);\n    float lumBL = dot (lum, texture (iChannel0, (uv + vec2 (-1., 1.))*offset).rgb);\n    float lumC  = dot (lum, texture (iChannel0, uv).rgb);\n    float lumTR = dot (lum, texture (iChannel0, (uv + vec2 (1., -1.))*offset).rgb);\n    float lumBR = dot (lum, texture (iChannel0, (uv + vec2 (1., 1.))*offset).rgb);\n\n    vec2 blurDir;\n    float blurReduce = max((lumTR + lumTL + lumBR + lumBL) * (FXAA_REDUCE_MUL * .25),\n                           FXAA_REDUCE_MIN);\n    blurDir.x = ((lumTR + lumTL) - (lumBR + lumBL));\n    blurDir.y = ((lumTL + lumBL) - (lumTR + lumBR));\n    float inverseDirAdjustment = 1. / (min (abs (blurDir.x), abs (blurDir.y)) + blurReduce);\n    \n    blurDir = min (vec2 (FXAA_SPAN_MAX), max (vec2 (-FXAA_SPAN_MAX),\n                                              blurDir * inverseDirAdjustment));\n    blurDir *= offset;\n\n    vec3 result1 = .5 * (texture (iChannel0, uv + blurDir * vec2 (1. / .3 - .5)).rgb +\n                         texture (iChannel0, uv + blurDir * vec2 (2. / .3 - .5)).rgb);\n    vec3 result2 = result1 * .5 +\n                   .25 * (texture (iChannel0, uv + blurDir * vec2 (0. / .3 - .5)).rgb +\n                          texture (iChannel0, uv + blurDir * vec2 (3. / .3 - .5)).rgb);\n\n    float lumMin = min (lumC, min (min (lumTL, lumTR), min (lumBL, lumBR)));\n    float lumMax = max (lumC, max (max (lumTL, lumTR), max (lumBL, lumBR)));\n    float lumResult2 = dot (lum, result2);\n    vec3 color = vec3 (.0);\n\n    if (lumResult2 > lumMax || lumResult2 < lumMin) {\n        color = result1;\n    } else {\n        color = result2;\n    }\n\n    return color;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    //vec3 col = getBaseFXAA (fragCoord);\n    vec3 col = texture (iChannel0, fragCoord / iChannelResolution[0].xy).rgb;\n    float greyscale = dot (col, vec3 (.29, .59, .12));\n    col = (greyscale > .75) ? vec3 (1.) : vec3 (.0);\n\n    fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// raymarched and PBR-shaded SGI-logo-like wire cube \n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// first blur-pass (of the intensity-image in buffer B) for the bloom\n// blur-method by anastadunbar, https://www.shadertoy.com/view/4lXXWn\n\nconst float MAX_ITER = 30.;\n\nvec3 draw(vec2 uv) {\n    return texture(iChannel0,vec2(uv.x,1.-uv.y)).rgb;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    float bluramount = .01;\n    vec3 firstPass = vec3(0.);\n    for (float i = 0.; i < MAX_ITER; i++) {\n        vec2 q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                      sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i,uv.x+uv.y))+bluramount); \n        vec2 uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                 sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n        uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n    }\n    firstPass /= MAX_ITER;\n\n    fragColor = vec4 (firstPass, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// raymarched and PBR-shaded SGI-logo-like wire cube \n//\n// Copyright 2017 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// second blur-pass (of the first bloom pass from buffer C) for the bloom\n// blur-method by anastadunbar, https://www.shadertoy.com/view/4lXXWn\n\nconst float MAX_ITER = 30.;\n\nvec3 draw(vec2 uv) {\n    return texture(iChannel0,vec2(uv.x,1.-uv.y)).rgb;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    float bluramount = .01;\n    vec3 firstPass = vec3(0.);\n    for (float i = 0.; i < MAX_ITER; i++) {\n        vec2 q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                      sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i,uv.x+uv.y))+bluramount); \n        vec2 uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n\n        q = vec2(cos(degrees((i/MAX_ITER)*360.)),\n                 sin(degrees((i/MAX_ITER)*360.))) *  (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n        uv2 = uv+(q*bluramount);\n        firstPass += draw(uv2)/2.;\n    }\n    firstPass /= MAX_ITER;\n\n    fragColor = vec4 (firstPass, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}