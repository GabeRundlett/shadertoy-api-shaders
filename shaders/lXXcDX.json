{
    "Shader": {
        "info": {
            "date": "1726717043",
            "description": "HaloLight",
            "flags": 4,
            "hasliked": 0,
            "id": "lXXcDX",
            "likes": 2,
            "name": "sep182024v3 (audio reactive)",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 62
        },
        "renderpass": [
            {
                "code": "// Fork of \"sep182024v2 (audio reactive)\" by brendanluu. https://shadertoy.com/view/MXXyWX\n// 2024-09-19 03:18:50\n\n// Audio-reactive 3D Tunnel Shader with straight-on view\n// Inspired by \"sep162024\" by brendanluu, transformed into a 3D tunnel\n#define MAX_STEPS 10\n#define MAX_DIST 1.0\n#define SURF_DIST 0.01\n#define NUM_RECTANGLES 40\n\n// Audio reactivity functions\nfloat getLowFreq() {\n    return texture(iChannel0, vec2(0.1, 0.0)).x;\n}\nfloat getMidFreq() {\n    return texture(iChannel0, vec2(0.5, 0.0)).x;\n}\nfloat getHighFreq() {\n    return texture(iChannel0, vec2(0.9, 0.0)).x;\n}\nfloat getAudioIntensity() {\n    return (getMidFreq() * 0.6 + getHighFreq() * 0.4) * 2.0; // Increased emphasis on mid and high frequencies\n}\n\n// Cosine based palette, 4 vec3 params\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat map(vec3 p) {\n    float tunnel = -length(p.xy) + 3.0 + sin(p.z * 0.2 + iTime) * 0.1;\n    \n    // Audio-reactive box parameters\n    float boxWidth = 80.8 + getAudioIntensity() * 0.4;\n    float boxHeight = 100.2 + getAudioIntensity() * 0.6;\n    float boxDepth = .1 + getHighFreq() * 0.2;\n    float boxSpacing = 20.5 - getAudioIntensity() * 1.0;\n    \n    float boxes = MAX_DIST;\n    for (int i = 0; i < NUM_RECTANGLES; i++) {\n        float zOffset = mod(p.z + float(i) * boxSpacing, 40.0) - 20.0;\n        float xOffset = sin(float(i) * 0.1 + iTime * 0.5) * 1.5;\n        float yOffset = cos(float(i) * 0.1 + iTime * 0.5) * 1.5;\n        vec3 q = vec3(p.x - xOffset, p.y - yOffset, zOffset);\n        float box = sdBox(q, vec3(boxWidth, boxHeight, boxDepth));\n        boxes = min(boxes, box);\n    }\n    \n    return max(tunnel, -boxes);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for(int i = 8; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = map(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = map(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n         r = normalize(cross(vec3(0,1,0), f)),\n         u = cross(f,r),\n         c = f*z,\n         i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord-.00*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, iTime * 2.0);  // Camera moves straight through the tunnel\n    vec3 rd = getRayDir(uv, ro, ro + vec3(0, 0, 0.5), 1.);\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    vec3 n = getNormal(p);\n    \n    // Modified color palette parameters for more rapid changes\n    vec3 a = vec3(1.698, 0.500, 0.500);\n    vec3 b = vec3(-3.142, 0.500, 0.500);\n    vec3 c = vec3(0.335, 0.990, 0.990);\n    vec3 d_color = vec3(-1.012, 0.333, 0.667);\n    \n    // Generate color with faster time scale and audio reactivity\n    float t = iTime * 0.5 + getAudioIntensity() * 1.0;\n    vec3 color = palette(t + p.z * 0.1, -a, -b, -c, d_color);\n    \n    // Apply lighting\n    vec3 lightPos = ro + vec3(0.0, 0.0, -5.0);  // Light moves with the camera\n    vec3 l = normalize(lightPos - p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float amb = 0.5 + 0.5 * dot(n, vec3(0, 1, 0));\n    \n    // Fresnel effect\n    float fresnel = pow(1.0 + dot(rd, n), 1.0);\n    \n    // Final color\n    color = color * (dif * 0.4 - amb * 07.2) + fresnel * vec3(0.2, 0.4, 0.6);\n    \n    // Fog\n    color = mix(color, vec3(0.0), 1.0 - exp(-0.01 / d / d));\n    \n    // Enhanced audio-reactive color boost\n    color *= 1.5 + getAudioIntensity() / 5.5;\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}