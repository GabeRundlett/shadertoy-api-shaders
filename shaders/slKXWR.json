{
    "Shader": {
        "info": {
            "date": "1640530644",
            "description": "2d landscape variation",
            "flags": 8,
            "hasliked": 0,
            "id": "slKXWR",
            "likes": 9,
            "name": "2d landscape variation",
            "published": 3,
            "tags": [
                "2dlandscapevariation"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.01,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj-0.05,0.0)); return colOut;}\n\nvec3 DrawFigSolo(vec3 pColObj, vec3 colOut, float distObj ) \n{  colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut; }\n\nvec3 DrawFigRB(vec3 pColObj, vec3 colOut, float distObj, float r )\n{  colOut = mix(colOut,pColObj ,S2( distObj-r,0.0)); return colOut; }\n\nvec3 DrawFigDelgado(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj-0.001,0.0)); return colOut; }\n\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\n\nfloat sdTrapezoid( in vec2 p, in float r1, float r2, float he )\n{\n    vec2 k1 = vec2(r2,he);\n    vec2 k2 = vec2(r2-r1,2.0*he);\n    p.x = abs(p.x);\n    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);\n    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\nfloat sdParallelogram( in vec2 p, float wi, float he, float sk )\n{\n    vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\nfloat sdHorseshoe( in vec2 p, in vec2 c, in float r, in vec2 w )\n{\n    p.x = abs(p.x);\n    float l = length(p);\n    p = mat2(-c.x, c.y, \n              c.y, c.x)*p;\n    p = vec2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),\n             (p.x>0.0)?p.y:l );\n    p = vec2(p.x,abs(p.y-r))-w;\n    return length(max(p,0.0)) + min(0.0,max(p.x,p.y));\n}\n\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\nvec3 nubes(vec2 p, vec3 colOut)\n{    \n    vec2 centro=vec2(0.0,0.0);\n    float c1= sdCircle(p-vec2(0.01,0.05), 0.105);\n    float c2= sdCircle(p-vec2(0.15,0.02), 0.065);\n    float c3= sdCircle(p-vec2(-0.12,0.02), 0.065);\n    float b1=sdBox(p-vec2(0.0,-0.04), vec2(0.3,0.05 ) );\n    \n    float res=unionSDF(c1, c2);\n    res=unionSDF(res, c3);\n    res=differenceSDF(res,b1 );\n    colOut=DrawFigBordeR(vec3(1.0), colOut, res,0.001 );    \n\treturn colOut;\n    \n}\n\nvec3 HacerCasa(vec2 p, vec3 col)\n{\n ///casa 1\n    float d3a=sdBox(p-vec2(-1.25,-0.33), vec2(0.15,0.27) );\n    float wip,hep,skp;\n    wip=0.26;hep=0.22;skp=0.38;\n    float d3b= sdParallelogram(p.yx-vec2(0.05,-0.88), wip,hep,skp );\n    wip=0.14;hep=0.2;skp=0.13;\n    float d3c= sdParallelogram(p-vec2(-1.125,0.15), wip,hep,skp );\n    float d3d= sdParallelogram(p-vec2(-0.91,0.49), wip,hep,skp );\n    d3c= unionSDF(d3c, d3d);\n    \n    wip=0.15;hep=0.07;skp=0.1;\n    float d3e= sdParallelogram(p.yx-vec2(-0.05,-0.88), wip,hep,skp ); //puerta\n    col= DrawFigBorde(vec3(0.92),col,d3a);\n    col= DrawFigBorde(vec3(0.72),col,d3b);\n    col= DrawFigBorde(vec3(0.62),col,d3c);\n    col= DrawFigBorde(vec3(0.22),col,d3e);\n    return col;\n}\n\nvec3 HacerCactus(vec2 p, vec3 col)\n{\n    float d1= sdBox(p-vec2(-0.5,1.1),vec2(0.025,0.1) );\n    // animation\n    float tt=4.7;\n    float t =            3.14* (0.5+0.5*cos(tt));\n    vec2  w = vec2(0.20,0.15)*(0.5+0.5*cos(11.7*vec2(0.37,0.7)+vec2(0.0,2.0)));\n    float d2 = sdHorseshoe(p-vec2(-0.5,1.15),vec2(cos(t),sin(t)), 0.065, w);\n    d1= unionSDF(d1, d2);\n    col= DrawFigBorde(vec3(1.0,0.8,0.8), col, d1 );\n    return col;\n}\n\n\nvec3 casa3(vec2 p, vec3 col)\n{  \n    float d1= sdBox(p, vec2(3.5,2.5) );\n    float d2=sdTriangleIsosceles(vec2(p.x,-p.y)-vec2(4.5,-5.3), vec2(1.2,3.2) );\n    float d3=sdBox(p-vec2(-1.5,-0.4), vec2(0.8,0.8) ); //ventana\n    float d4=sdBox(p-vec2(1.5,-1.0), vec2(0.8,1.5) ); //puerta\n    float d5= sdParallelogram(p-vec2(0.0,3.6), 4.0, 1.9, 0.5 ); //techo\n    float d6= sdParallelogram(p.yx-vec2(0.6,4.3), 2.5, 0.75, 0.5 ); //lateral\n    \n    float d7=sdBox(p-vec2(1.7,3.5), vec2(0.8,0.8));\n    float d8=sdBox(p-vec2(-1.7,3.5), vec2(0.8,0.8));\n    float d7a=sdTriangleIsosceles(vec2(p.x,p.y)-vec2(-0.8,2.8), vec2(1.0,1.5) );\n    float d8a=sdTriangleIsosceles(vec2(p.x,p.y)-vec2( 2.5,2.8), vec2(1.0,1.5) );\n    \n    col= DrawFigBorde(vec3(1.0,0.8,0.1),col, d1 );// frente\n    col= DrawFigBorde(vec3(0.1),col, d6 );\n    col= DrawFigBorde(vec3(0.0),col, d2 );\n    col= DrawFigBorde(vec3(0.0,0.5,0.5),col, d3 );\n    col= DrawFigBorde(vec3(0.2,0.2,1.0),col, d4 ); //puerta\n    col= DrawFigBorde(vec3(1.0,0.0,0.0),col, d5 );\n    col= DrawFigBorde(vec3(0.0),col, d7a );\n    col= DrawFigBorde(vec3(0.0),col, d8a );\n    col= DrawFigBorde(vec3(0.0,0.0,1.0),col, d7 );\n    col= DrawFigBorde(vec3(0.0,0.0,1.0),col, d8 );\n    return col;\n}\n\nvec3 HacerCalle(vec2 p, vec3 col)\n{   vec2 p0=p;\n    ///hacer pasto\n    float d0= sdBox(p-vec2(0.0,-0.5),vec2(4.0,1.5) );\n    col= DrawFigBorde(vec3(0.25,0.7,0.3),col,d0);\n    \n    col= casa3(p*8.0-vec2(-14.0,6.0), col);\n    \n    float r1,r2,he;\n    r2=0.1; r1=1.0; he=1.0;\n    \n    float d1a= sdTrapezoid(p,r1,r2,he); //calle a\n    r2=0.15; r1=1.3; he=1.0;\n    float d1b= sdTrapezoid(p,r1,r2,he); //calle b\n    \n    p.y=opRep1D(p.y, 0.2 );\n    float d2=sdSegment(p,vec2(0.0),vec2(0.0,0.1) ); //linea\n    d2=intersectSDF(d2, d1a);\n    \n    p=p0;\n    \n    col= HacerCasa(p-vec2(0.0,0.0), col);\n    col= HacerCasa(vec2(-p.x, p.y)-vec2(0.0,0.0), col);\n    col= DrawFigBorde(vec3(0.85),col,d1b);\n    col= DrawFigBorde(vec3(0.75),col,d1a);\n    col= DrawFigBorde(vec3(0.0),col,d2);\n    col= HacerCactus(p,col);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=1.3;\n    uv*=esc;\n\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.125;\n    col=HacerCalle(uv-vec2(0.0,0.1), col);\n    \n    vec2 uv2=uv*0.5;\n        uv2.x+= opRep1D(iTime*0.5, 4.0 );\n        col= nubes(uv2*1.5-vec2(0.0,0.4), col);\n        col= nubes(uv2*1.5-vec2(0.5,0.6), col);\n        col= nubes(uv2*2.5-vec2(-1.5,0.7), col);\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///fork sound\n//referencia\n//https://www.shadertoy.com/view/NljXWW\n///olvide la otra referencia :(\n\n\n// common constants, functions, etc...\n\n// keyboard code. (sharp key is fractional.)\nconst float _RA = 2.0;\nconst float _RASP = 2.5;\nconst float _SI = 3.0;\nconst float DO = 4.0;\nconst float DOSP = 4.5;\nconst float RE = 5.0;\nconst float RESP = 5.5;\nconst float MI = 6.0;\nconst float FA = 7.0;\nconst float FASP = 7.5;\nconst float SO = 8.0;\nconst float SOSP = 8.5;\nconst float RA = 9.0;\nconst float RASP = 9.5;\nconst float SI = 10.0;\nconst float DO_ = 11.0;\nconst float DOSP_ = 11.5;\nconst float RE_ = 12.0;\nconst float RESP_ = 12.5;\nconst float MI_ = 13.0;\n\n// song data\n\nconst int note_count = 145;\nconst float BPM = 240.0;\nconst float unit = 60.0 / BPM;\n\n// terminal time of each segment.\nconst float term[note_count] =\n        float[note_count](2.5, 3.0, 4.0, 4.5, 5.5, 6.0, 9.0, 12.0,\n                          14.5, 15.0, 16.5, 18.0, 24.0,\n                          26.5, 27.0, 28.0, 28.5, 29.5, 30.0, 33.0, 36.0,\n                          38.5, 39.0, 40.5, 42.0, 48.0,\n                          50.5, 51.0, 52.0, 52.5, 53.5, 54.0, 57.0, 60.0,\n                          62.5, 63.0, 64.5, 66.0, 72.0,\n                          74.5, 75.0, 76.0, 76.5, 77.5, 78.0, 81.0, 84.0,\n                          86.5, 87.0, 88.5, 90.0, 96.0,\n                          97.0, 97.5, 98.5, 99.0, 101.5, 102.0,\n                          103.0, 103.5, 104.5, 105.0, 107.5, 108.0,\n                          109.0, 109.5, 110.5, 111.0,\n                          112.5, 114.0, 115.5, 117.0, 120.0,\n                          121.0, 121.5, 122.5, 123.0, 125.5, 126.0,\n                          127.0, 127.5, 128.5, 129.0, 131.5, 132.0,\n                          133.0, 133.5, 134.5, 135.0,\n                          136.5, 138.0, 139.5, 141.0, 144.0,\n                          145.0, 145.5, 146.5, 147.0, 148.0, 148.5, 149.5, 150.0,\n                          151.0, 151.5, 152.5, 153.0, 156.0,\n                          157.0, 157.5, 158.5, 159.0, 160.0, 160.5, 162.0,\n                          163.0, 163.5, 164.5, 165.0, 168.0,\n                          169.0, 169.5, 170.5, 171.0, 172.0, 172.5, 173.5, 174.0,\n                          175.0, 175.5, 176.5, 177.0, 180.0,\n                          181.0, 181.5, 182.5, 183.0, 184.0, 184.5, 185.5, 186.0,\n                          187.0, 187.5, 188.5, 189.0, 192.0);\n\nconst float sus[note_count] =\n        float[note_count](2.5, 0.5, 1.0, 0.5, 1.0, 0.5, 2.5, 2.5,\n                          2.5, 0.5, 1.5, 1.5, 3.0,\n                          2.5, 0.5, 1.0, 0.5, 1.0, 0.5, 2.5, 2.5,\n                          2.5, 0.5, 1.5, 1.5, 3.0,\n                          2.5, 0.5, 1.0, 0.5, 1.0, 0.5, 2.5, 2.5,\n                          2.5, 0.5, 1.5, 1.5, 3.0,\n                          2.5, 0.5, 1.0, 0.5, 1.0, 0.5, 2.5, 2.5,\n                          2.5, 0.5, 1.5, 1.5, 3.0,\n                          1.0, 0.5, 1.0, 0.5, 2.5, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 1.5, 1.5, 1.5, 1.5, 2.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 1.5, 1.5, 1.5, 1.5, 2.5,\n                          1.0, 0.5, 1.0, 0.5, 1.0, 0.5, 1.0, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5,\n                          1.0, 0.5, 1.0, 0.5, 1.0, 0.5, 1.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5,\n                          1.0, 0.5, 1.0, 0.5, 1.0, 0.5, 1.0, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5,\n                          1.0, 0.5, 1.0, 0.5, 1.0, 0.5, 1.0, 0.5,\n                          1.0, 0.5, 1.0, 0.5, 2.5);\n\n\nconst float notes[note_count] =\n        float[note_count](FA, DO, FA, DO, FA, SO, RA, FA,\n                          RASP, RASP, FA, SO, RA,\n                          FA, DO, FA, DO, FA, SO, RA, FA,\n                          SO, SO, SO, RA, SO,\n                          SO, SO, FASP, SO, RA, SO, FA, DO,\n                          RASP, RASP, FA, SO, RA,\n                          RE, MI, FA, MI, FA, RE, DO, FA,\n                          RA, RASP, RA, SO, FA,\n                          DO, DO, DO, DO, FA, MI,\n                          RE, RE, RE, RE, SO, FA,\n                          MI, MI, MI, MI, RE, MI, FA, SO, RA,\n                          DO, DO, DO, DO, FA, MI,\n                          RE, RE, RE, RE, SO, FA,\n                          MI, MI, MI, MI, RE, MI, FA, RA, FA,\n                          SO, SO, SO, RA, SI, SI, SI, RA,\n                          SO, SO, SO, MI, RE,\n                          MI, MI, RE, RE, SO, SO, SI,\n                          RA, RA, SO, RA, SI,\n                          RE_, RE_, RE_, RE_, RE_, RE_, MI_, RE_,\n                          SI, SO, RA, SI, RA,\n                          SO, RA, SI, SI, RA, RA, RE_, RE_,\n                          SI, SI, RA, RA, SO);\n\n// 鍵盤の番号からオクターブの指数を出すための若干美しくない処理\nconst float array_w[7] = float[7](-4.0, -2.0, 0.0, 2.0, 3.0, 5.0, 7.0);\nconst float array_b[7] = float[7](0.0, -3.0, -1.0, 1.0, 0.0, 4.0, 6.0); //0:dummy.\n\n// get exponent. 0:white key, 1:black key.\n// これを440.0に掛ける\nfloat getExponent(float index){\n    float r, q;\n    int diffType = 0;\n    if(fract(index) > 0.25){ index += 0.5; diffType = 1; }\n    for(int i = 0; i < 7; i++){\n        r = mod(index, 7.0);\n        q = floor(index / 7.0);\n        if(float(i) == r){\n            return 12.0 * q - 12.0 + (diffType == 0 ? array_w[i] : array_b[i]);\n        }\n    }\n    return 0.0;\n}\n\n\n/////------------------------------------\nfloat PI = 3.14159265358979323846;\n\nfloat saw(float x) {\n    return asin(sin(x)) * sign(cos(x));\n}\n\n\nvec2 synthSaw(float time, float amp, float freq, float timeOffset, float decay, float timeLimit) {\n    \n    time = time - timeOffset;\n    if (time < 0. || time > timeLimit) return vec2(0.0);\n    \n    return amp * vec2( saw(2.0 * PI * freq * time)*exp(-decay * time) );\n}\n\nfloat impostorSaw(float time, float amp, float freq, float timeOffset, float decay, float timeLimit, float dummy) {\n\n    time = time - timeOffset;\n    if (time < 0. || time > timeLimit) return 0.0;\n\n    return amp * exp(-decay * time);\n\n}\n\nvec2 synthSuSaw(float time, float amp, float freq, float timeOffset, float decay, float timeLimit, float distr) {\n    \n    distr = 1.0 + distr;\n    \n    float d = distr;\n    float d2 = d * d;\n    float d3 = d2 * d;\n    \n    float a1, a2, a3, a4, a5, a6, a7;\n    \n    a1 = 0.1;\n    a2 = 0.2;\n    a3 = 0.3;\n    a4 = 1.0;\n    a5 = 0.3;\n    a6 = 0.2;\n    a7 = 0.1;\n    \n    vec2 sum = a1 * synthSaw(time, amp, freq / d3, timeOffset, decay, timeLimit) +\n        a2 * synthSaw(time, amp, freq / d2, timeOffset, decay, timeLimit) +\n        a3 * synthSaw(time, amp, freq / d, timeOffset, decay, timeLimit) +\n        a4 * synthSaw(time, amp, freq, timeOffset, decay, timeLimit) +\n        a3 * synthSaw(time, amp, freq * d, timeOffset, decay, timeLimit) +\n        a2 * synthSaw(time, amp, freq * d2, timeOffset, decay, timeLimit) +\n        a1 * synthSaw(time, amp, freq * d3, timeOffset, decay, timeLimit);\n        \n    sum = sum / (a1 + a2 + a3 + a4 + a5 + a6 + a7);\n    \n    return sum;\n}\n\nfloat impostorMusic(float time)\n{\n\n    float sixteen = 0.10;\n    \n    float div = sixteen * 64.0;\n    \n    time = time - floor(time / div) * div;\n    float suma ;\n    \n    float prop=1.0/23.0;\n    suma= impostorSaw(time, 0.1, 110.0, 0.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 130.81, 4.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 7.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 9.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 146.83, 10.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 12.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 98.0, 14.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        \n        + impostorSaw(time, 0.1, 110.0, 16.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 164.81, 20.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 23.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 25.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 174.61, 26.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 164.810, 28.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 130.81, 30.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        \n        + impostorSaw(time, 0.1, 110.0, 32.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 164.810, 34.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 220.0, 36.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 38.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 98.00, 39.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 98.00, 41.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 82.41, 42.0 * sixteen, 3.0, 3.0, 0.01)*prop\n        \n        + impostorSaw(time, 0.1, 130.81, 44.0 * sixteen, 2.5, 3.0, 0.01)*prop\n        + impostorSaw(time, 0.1, 110.0, 46.0 * sixteen, 2.5, 5.0, 0.01)*prop;\n        return sin(suma*20.0);\n}\n\n\n//float t, float freq, float span\nvec2 music(float time , float freq, float span)\n{\n\n    float sixteen = 0.10;\n    \n    float div = sixteen * 64.0;\n    \n    time = time - floor(time / div) * div;\n    float prop=1.0/23.0;\n    \n    vec2 suma= synthSuSaw(time, 0.1, freq, 0.0 * sixteen, 3.0, 3.0, 0.01);\n\n    return suma*20.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "///fork sound\n//https://www.shadertoy.com/view/NljXWW\n///olvide la otra referencia :(\n\n#define TAU 6.2831\n\nfloat squ(float x){\n    x = fract(x);\n    return smoothstep(0.48, 0.52, x) * 2.0 - 1.0;\n}\n\nvec2 squWave(float time, float freq, float m){\n  return vec2(squ(freq * time)) * exp(-m * time);\n}\n\nvec2 sound(float t, float freq, float span){\n    vec2 v1= squWave(t, freq, 1.6 / span);\n    vec2 v2= music(t , freq, 1.6/ span);\n    return v1+v2;\n}\n\nvec2 mainSound( in int samp,float time){\n    vec2 wv = vec2(0.0);\n    float prevTerm = 0.0;\n    float frequency;\n    \n    for(int i = 0; i < note_count; i++){\n        if(time < term[i] * unit){\n            frequency = 440.0 * pow(2.0, getExponent(notes[i]) / 12.0);\n            wv += sound(time - prevTerm, frequency, sus[i] * unit);\n            break;\n        }\n        prevTerm = term[i] * unit;\n    }\n    return wv*0.35;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}