{
    "Shader": {
        "info": {
            "date": "1606054039",
            "description": "a thing",
            "flags": 0,
            "hasliked": 0,
            "id": "WstfD2",
            "likes": 4,
            "name": "holoblobbob",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Sebbert",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "float t;\n\nvec3 gradient[] = vec3[](\n    vec3(255, 190, 11),\n    vec3(251, 86, 7),\n    vec3(255, 0, 110),\n    vec3(131, 56, 236),\n    vec3(58, 134, 255)\n);\nfloat scene(vec2 p)\n{\n    vec2 p1 = vec2(cos(-t), sin(t*3.7))*.4;\n    vec2 p2 = vec2(cos(t+2.), sin(t*1.7))*.4;\n\n    float c1 = length(p - p1)-(sin(t)*.3+.35);\n    float c2 = length(p - p2)-(sin(t*1.5)*.4+.5);\n    \n    \n    c2 = abs(c2-.01)-.01;\n    c1 = abs(c1-.01)-.01;\n\n    float m = opSmoothUnion(c1, c2, .5);\n    \n    return m;\n}\n\nfloat renderSDF(float d) {\n   return max(0.0, min(1.0, -d/fwidth(d))); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime;\n    \n    t -= mod(t*2.1, 8.5);\n    t -= mod(t*.7, 1.6);\n    t -= mod(t*1.5, 1.65);\n    \n    vec2 res = iResolution.xy;\n    vec2 aspectUV = (fragCoord - res/2.) / min(res.x, res.y);\n    \n    \n    float d = scene(aspectUV);\n    float aad = renderSDF(d);\n    vec3 color = vec3( gradient[4]/255. ) * .12;\n    \n    for (int i = 0; i < gradient.length(); ++i) {\n    \tvec3 gradientColor = gradient[i % gradient.length()]/255.;\n        float dOutline = scene(aspectUV + float(i)*.08 * vec2(cos(-t), sin(t*3.9)));\n        \n\t\tdOutline = abs(dOutline-.01)-.0024;\n        \n        dOutline = sin(dOutline*2.);\n        color = mix(color, gradientColor, renderSDF(dOutline)*.8 );\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}