{
    "Shader": {
        "info": {
            "date": "1602594480",
            "description": "Here is one of my first big shaders! Enjoy!",
            "flags": 0,
            "hasliked": 0,
            "id": "wsKcRm",
            "likes": 14,
            "name": "Peaceful Sunset",
            "published": 3,
            "tags": [
                "2d",
                "simple",
                "sunset",
                "parallaxscrolling"
            ],
            "usePreview": 0,
            "username": "Tech_",
            "viewed": 547
        },
        "renderpass": [
            {
                "code": "\n/////////////////////////////////////////////////////////////////////////////\n//\n//\t PEACEFUL SUNSET\n//\n//\t by Tech_\n//\n/////////////////////////////////////////////////////////////////////////////\n\nfloat getCloudNoiseWaves(in vec2 uv, float scale, float speed) \n{\n    float waveColor;\n    vec2 uvVar1 = uv * scale / 8.;\n    vec2 uvVar2 = uv * scale / 0.25;\n    \n    float waves1;\n    waves1 += cos(uvVar1.x * 30. + sin(iTime * speed + uvVar1.y * 10. + cos(uvVar1.x * 60.0 + iTime * speed)));\n    waves1 *= waves1;\n    waves1 *= 0.3;\n    \n    float waves2;\n    waves2 += cos(uvVar2.x / 6. * 5.0 + sin(iTime * speed + uvVar2.y + cos(uvVar2.x + iTime * 2. * speed)));\n    waves2 *= waves2 * 0.2;\n    \n    waveColor = waves1 + waves2 * 2.;\n    \n    return waveColor;\n}\n\nfloat getClouds(in vec2 uv, float cloudOpacity, float cloudHeight, float cloudScale, float cloudAmount) \n{\n    cloudAmount -= 1.0;\n    float fog;\n    vec2 st = uv;\n    uv.y *= 4.;\n    uv.x *= 0.4;\n    uv.x += iTime / 1270. / cloudScale;\n    uv.y += sin((uv.x + iTime / 100.) * 30.) * 0.02;\n    fog += getCloudNoiseWaves(uv * cloudScale, 3.4, 0.1);\n    fog -= getCloudNoiseWaves(uv * cloudScale + vec2(2.), 2.4, 0.2);\n    fog = clamp(fog, 0., 1.);\n    float mask;\n    mask = 1. - distance(st.y - (0.35 + cloudHeight), 0.5 + cloudHeight) * 2.;\n    fog *= mask;\n    fog = smoothstep(0.15 - cloudAmount, 0.6 - cloudAmount, fog);\n    return mix(0., clamp(fog, 0., 1.), cloudOpacity);\n}\n\nfloat getWave(in vec2 uv, float waveHeight, float waveSpeed, float waveFrequency, float waveAmplitude, float depth) \n{\n    uv.y -= sin(iTime + depth * 12.) / 60. * waveAmplitude;\n    waveSpeed = iTime / 4. * waveSpeed;\n\tfloat wave = smoothstep(0.0 + waveHeight, 0.003 + waveHeight * (depth + 1.), uv.y + sin((uv.x + waveSpeed) * waveFrequency * 10. + sin(uv.x * 3.)) * 0.03 * waveAmplitude);\n    float result = 1. - wave;\n    return result;\n}\n\nvec4 getOcean(in vec2 uv, float waveHeight, float waveSpeed, float waveFrequency, float waveAmplitude) \n{\n    vec3 waves;\n    waveHeight -= 1.;\n    waveFrequency -= 1.;\n    waves += getWave(uv, 0.325 + waveHeight, 0.025 * waveSpeed, 8. + waveFrequency, 0.06 * waveAmplitude, 0.0) * vec3(0.2);\n    waves += getWave(uv, 0.3 + waveHeight, 0.05 * waveSpeed, 6. + waveFrequency, 0.1 * waveAmplitude, 0.0005) * vec3(0.2);\n    waves += getWave(uv, 0.26 + waveHeight, 0.1 * waveSpeed, 4. + waveFrequency, 0.2 * waveAmplitude, 0.01) * vec3(0.2);\n    waves += getWave(uv, 0.20 + waveHeight, 0.2 * waveSpeed, 2. + waveFrequency, 0.4 * waveAmplitude, 0.05) * vec3(0.2);\n    waves += getWave(uv, 0.11 + waveHeight, 0.35 * waveSpeed, 1.5 + waveFrequency, 0.77 * waveAmplitude, 0.2) * vec3(0.2);\n    waves = pow(waves, vec3(1.)) / 1.6;\n    \n    float oceanOpacity = 1. - getWave(uv, 0.325 + waveHeight, 0.025 * waveSpeed, 8. + waveFrequency, 0.06 * waveAmplitude, 0.0);\n    \n    return vec4(waves, oceanOpacity);\n}\n\nvec3 getSun(in vec2 uv, float oceanOpacity) \n{\n    vec2 st = uv;\n    uv -= .5;\n \tuv.x *= iResolution.x / iResolution.y;\n    \n    uv.y += 0.05;\n    \n    float radius = 0.1;\n    float uvLength = 1. - length(uv);\n    vec3 sun;\n    float sunOpacity = 1.;\n    \n    for(int i = 0; i < 10; i++) \n    {\n        sunOpacity *= 0.6;\n    \tsun += vec3(smoothstep(0.95 - radius, 0.953 - radius, uvLength) * sunOpacity) * vec3(1., 0.6, 0.);\n        sun = clamp(sun, 0., 1.);\n        radius *= 1.3 + sin(iTime) / 100.;\n    }\n\t\n    sun *= oceanOpacity;\n    sun.g *= 0.9;\n    \n    vec3 sunGlow = clamp(1. - vec3(length(uv * 2.)), 0., 1.) * oceanOpacity;\n    sunGlow *= smoothstep(0.1 - sin(iTime) / 10., 1. - sin(iTime) / 10., sunGlow);\n    \n    vec3 flare = 1. - vec3(distance(vec2(st.x * 1.5 - 0.25, st.y * 2. - 0.5), vec2(0.5))) * 2. + sin(iTime) / 40.;\n    flare = clamp(flare * vec3(1., 0.8, 0.), 0., 1.);\n    \n    return sun + (sunGlow + flare) / 4.;\n}\n\nvec3 getSkyGradient(in vec2 uv) \n{\n    float mid = smoothstep(0.2, 0.5, uv.y);\n    \n    vec3 midColLit = vec3(1., 0.341 * 2., 0.09 * 2.2);\n    vec3 midColUnlit = vec3(1., 0.341, 0.09);\n    vec3 midCol = mix(midColUnlit, midColLit, 1. - clamp(distance(uv.x, 0.5) * 1.5, 0., 1.));\n    vec3 upperCol = vec3(0.5, 0.156, 0.225);\n    \n\tvec3 skyColorTop = mix(midCol, upperCol, uv.y);\n    vec3 skyColorBottom = mix(vec3(1., 0.6, 0.1), vec3(1., 0.7, 0.1), 1. - clamp(distance(uv.x, 0.5) * 3., 0., 1.));\n    \n    vec3 skyColor = mix(skyColorBottom, skyColorTop, mid);\n    \n    return skyColor;\n}\n\nfloat luma(vec3 color)\n{\n    return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvec3 changeLuminance(vec3 colorIn, float lumaOut)\n{\n    float lumaIn = luma(colorIn);\n    return colorIn * (lumaOut / lumaIn);\n}\n\nvec3 reinhardExtended(vec3 color, float maxWhiteLuma)\n{\n    float lumaOld = luma(color);\n    float numerator = lumaOld * (1.0 + (lumaOld / (maxWhiteLuma * maxWhiteLuma)));\n    float lumaNew = numerator / (1.0 + lumaOld);\n    return changeLuminance(color, lumaNew);\n}\n\nvec3 tonemapping(in vec3 color)\n{\n    color -= 0.06;\n    color *= 1.62;\n    color = reinhardExtended(color, 2.);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color;\n    \n    vec3 waveColor = vec3(0.19, 0.21, 0.45); \n    vec3 waves = getOcean(uv, 1.05, 1.2, 1.1, 1.0).rgb;\n    waves *= waveColor;\n    \n    vec3 sun = vec3(getSun(uv, getOcean(uv, 1.05, 1.2, 1.1, 1.0).a));\n    \n    vec3 skyColor = getSkyGradient(uv);\n    vec3 sky = pow(1. - getOcean(uv, 1.05, 1.2, 1.1, 1.0).rgb, vec3(1.5)) * skyColor;\n    \n    float clouds = getClouds(uv, 0.5, 0.01, 1., 0.8);\n    clouds += getClouds(uv, 0.4, 0.015, 2., 0.75);\n    clouds += getClouds(uv, 0.3, 0.02, 2.3, 0.75);\n    \n    color = waves + sky + sun + clouds;\n    \n    color = tonemapping(color);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}