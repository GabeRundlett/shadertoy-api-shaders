{
    "Shader": {
        "info": {
            "date": "1708534455",
            "description": "Variants of sierpinski's triangles on vertices of cube",
            "flags": 0,
            "hasliked": 0,
            "id": "XX2GDm",
            "likes": 10,
            "name": "Sierpinski's triangles",
            "published": 3,
            "tags": [
                "3d",
                "triangle",
                "voxel",
                "octree",
                "sierpinskistriangle"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "vec3 getRay(in vec3 cameraDir, in vec2 uv) { //get camear ray direction\n    vec3 cameraPlaneU = vec3(normalize(vec2(cameraDir.y, -cameraDir.x)), 0);\n    vec3 cameraPlaneV = cross(cameraPlaneU, cameraDir) ;\n\treturn normalize(cameraDir + uv.x * cameraPlaneU + uv.y * cameraPlaneV);\n}\nstruct Layer {\n    int id;\n    vec3 offset;\n    float size;\n};\nvec3 offsets[8] = vec3[8](\n    vec3(-1, -1, -1),\n    vec3(1, -1, -1),\n    vec3(-1, 1, -1),\n    vec3(1, 1, -1),\n    vec3(-1, -1, 1),\n    vec3(1, -1, 1),\n    vec3(-1, 1, 1),\n    vec3(1, 1, 1)\n);\nLayer[8] stack;\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    rd = -rd;\n    vec3 srd = sign(rd);\n    vec3 rdi = 1./rd;\n    ivec3 s = ivec3(srd)<<ivec3(0, 1, 2);\n    stack[0] = Layer(0, vec3(0), 1.0);\n    int stackPointer = 1;\n    int itr;\n    int kernal = int(iTime)+42;\n    int id;\n    while(stackPointer > 0) {\n        itr++;\n        Layer self = stack[--stackPointer];\n        if (self.size < 0.01) return sin(self.offset*10.)*0.5+0.5;\n        vec3 origin = ro-self.offset;\n\n        bool insideBox =  max(max(abs(origin.x), abs(origin.y)), abs(origin.z)) < self.size;\n        vec3 nearPlains = -(origin+srd*self.size)*rdi;\n        float near = max(max(nearPlains.x, nearPlains.y), nearPlains.z);\n        vec3 farPlains = -(origin-srd*self.size)*rdi;\n        origin += rd*near;\n        if (max(max(abs(origin.x), abs(origin.y)), abs(origin.z)) >= self.size+0.00001) continue;\n        ivec3 sides = ivec3(sign(origin)+1.0);\n        id = (sides.x>>1)+sides.y+(sides.z<<1);\n        vec3 plains = -origin*rdi;\n        \n        plains += (sign(-plains)+1.)*(1000.-plains);\n        nearPlains = plains;\n        plains.xy = vec2(max(plains.x, plains.y), min(plains.x, plains.y));\n        plains.xz = vec2(max(plains.x, plains.z), min(plains.x, plains.z));\n        plains.yz = vec2(max(plains.y, plains.z), min(plains.y, plains.z));\n        self.size *= .5;\n        float depth = insideBox?-near:(min(min(farPlains.x, farPlains.y), farPlains.z)-near);\n        if ((kernal&(1<<id))!=0) stack[stackPointer++] = Layer(id, self.offset+offsets[id]*self.size, self.size);\n        id += plains.z==nearPlains.x?s.x:plains.z==nearPlains.y?s.y:s.z;\n        if (plains.z > depth) continue;\n        if ((kernal&(1<<id))!=0) stack[stackPointer++] = Layer(id, self.offset+offsets[id]*self.size, self.size);\n        id += plains.y==nearPlains.x?s.x:plains.y==nearPlains.y?s.y:s.z;\n        if (plains.y > depth) continue;\n        if ((kernal&(1<<id))!=0) stack[stackPointer++] = Layer(id, self.offset+offsets[id]*self.size, self.size);\n        id += plains.x==nearPlains.x?s.x:plains.x==nearPlains.y?s.y:s.z;\n        if (plains.x > depth) continue;\n        if ((kernal&(1<<id))!=0) stack[stackPointer++] = Layer(id, self.offset+offsets[id]*self.size, self.size);\n    }\n    return vec3(itr)*0.1;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    //camera\n    vec2 m = vec2(iTime, 1.57079633+sin(iTime*0.5));\n    if (iMouse.z > 0.0) m = ((iMouse.xy)/iResolution.xy) * vec2(6.28, 3.14159263);\n        \n    vec3 ro = vec3(sin(m.y) * cos(-m.x), sin(m.y) * sin(-m.x), cos(m.y))*3.3;\n    vec3 rd = getRay(-normalize(ro), uv);\n    \n    //render\n    vec3 color = getColor(ro, rd);\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}