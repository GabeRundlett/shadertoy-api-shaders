{
    "Shader": {
        "info": {
            "date": "1456624419",
            "description": "LED screen simulation and Hilbert curve audio visualization.\nFeaturing Ashley Wallbridge (Darkmelo edit) track.",
            "flags": 96,
            "hasliked": 0,
            "id": "XdG3Wc",
            "likes": 223,
            "name": "pixelScreen",
            "published": 3,
            "tags": [
                "visualization",
                "audio",
                "postprocess",
                "bloom",
                "glow",
                "hdr",
                "hilbert"
            ],
            "usePreview": 1,
            "username": "and",
            "viewed": 10767
        },
        "renderpass": [
            {
                "code": "// pixelScreen - Image\n//\n// Final compositing: aberrations, fringing, bloom, coloration and tone mapping.\n//\n// Created by Dmitry Andreev - and'2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat drawLogo(in vec2 fragCoord)\n{\n    float val = 0.0;\n    float res = max(iResolution.x, iResolution.y) * 0.75;\n    vec2  pos = vec2(floor((fragCoord.xy / res) * 128.0));\n\n    // AND'16 bitmap\n    val = pos.y == 2.0 ? 4873775.5 : val;\n    val = pos.y == 3.0 ? 8049193.5 : val;\n    val = pos.y == 4.0 ? 2839727.5 : val;\n    val = pos.y == 5.0 ? 1726632.5 : val;\n    val = pos.x >168.0 ? 0.0 : val;\n\n    float bit = floor(val * exp2(pos.x - 168.0));\n\n    return bit != floor(bit / 2.0) * 2.0 ? 1.0 : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Read base mask and slightly offset one for fringing and aberrations.\n    vec4 base_clr = texture(iChannel0, fragCoord / iChannelResolution[0].xy);\n    vec4 offs_clr = texture(iChannel0,\n        (fragCoord + (1.5 * iChannelResolution[0].y / 1600.0)) / iChannelResolution[0].xy);\n\n    fragColor.rgb = base_clr.ggg;\n\n    // Offset green channel.\n    fragColor.g = mix(fragColor.g, offs_clr.g, 0.5);\n    fragColor *= 1.6;\n\n    // Add base level noise.\n    fragColor.rgb += 0.007 * vec3(base_clr.a, offs_clr.a, base_clr.a);\n\n    // Apply bloom.\n    float level1 = texture(iChannel1, (fragCoord +  1.5) / ( 4.0 * iChannelResolution[1].xy)).y;\n    float level2 = texture(iChannel2, (fragCoord +  7.5) / (16.0 * iChannelResolution[2].xy)).y;\n    float level3 = texture(iChannel3, (fragCoord + 31.5) / (64.0 * iChannelResolution[3].xy)).y;\n\n    fragColor.rgb += 0.2 * vec3(level1 + level2 + level3);\n\n    // Add some foggy medium.\n    fragColor.rgb = mix(fragColor.rgb, vec3(level3 * 4.0), 0.07);\n    fragColor.rgb = mix(fragColor.rgb, vec3(level2 * 4.0), 0.03);\n    fragColor *= 0.5;\n\n    // Colorize image by cycling rgb gammas.\n    float t = 4.0 + iTime * 0.15;\n    vec3  gamma = 2.4 + vec3(1.3 * sin(t), 1.0 * sin(t * 2.0 + 0.75), 1.3 * sin(t + 3.0));\n\n    fragColor.r = pow(fragColor.r, gamma.r);\n    fragColor.g = pow(fragColor.g, gamma.g);\n    fragColor.b = pow(fragColor.b, gamma.b);\n\n    // Normalize luminance.\n    vec3  mag = vec3(pow(0.25, gamma.r), pow(0.25, gamma.g), pow(0.25, gamma.b));\n    float luma = dot(mag, vec3(0.333));\n    fragColor.rgb /= 10.0 * luma;\n\n    // Darken the edges for aesthetics.\n    vec2 mtc = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    mtc *= vec2(2.0, 0.2);\n    mtc.xy -= 0.04 * normalize(mtc) * pow(length(mtc), 3.0);\n    mtc /= vec2(2.0, 0.2);\n    \n    vec2  ouv = 1.01 * 1.25 * mtc;\n    float wx = max(0.0, 1.5 - 2.0 * clamp(abs(ouv.x) - 0.5, 0.0, 1.0));\n    float wy = max(0.0, 1.0 - 3.0 * clamp(abs(ouv.y) - 0.5, 0.0, 1.0));\n\n    fragColor.rgb *= wx * wy;\n\n    // Add logo when side screen are on.\n    fragColor.rgb += 0.1 * mag * drawLogo(fragCoord) *\n        (1.0 - clamp((sin((iTime + 10.0) / 9.6) - 0.5) * 10.0, 0.0, 1.0));\n\n    // Apply anamorphic flare.\n    float flare = base_clr.z;\n    flare += texture(iChannel1, fragCoord / (vec2( 4, 1) * iChannelResolution[1].xy)).z;\n    flare += texture(iChannel2, fragCoord / (vec2(16, 1) * iChannelResolution[2].xy)).z;\n    flare += texture(iChannel3, fragCoord / (vec2(64, 1) * iChannelResolution[3].xy)).z;\n    fragColor.rgb += flare * vec3(0.05, 0.2, 5.0) * 8e-4;\n\n    // Compress dynamic range.\n    fragColor.rgb *= 5.0;\n    fragColor.rgb = 1.5 * fragColor.rgb / (1.0 + fragColor.rgb);\n\n    // Linear to sRGB.\n    fragColor.rgb = sqrt(fragColor.rgb);\n\n    // Add additional nonlinearities to shadows and highlights.\n    vec3 sclr = smoothstep(0.0, 1.0, fragColor.rgb);\n\n    fragColor.r = mix(fragColor.r, sclr.r, 0.6);\n    fragColor.g = mix(fragColor.g, sclr.g, 0.8);\n    fragColor.b = mix(fragColor.b, sclr.b, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// pixelScreen - Buf A\n//\n// Audio filtering and shaping, frame rate calculation and mask generation.\n//\n// Created by Dmitry Andreev - and'2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define DO_CUSTOM_FRAMETIME 1\n#define DEBUG_FRAMETIME     0\n\n//\n\nfloat hilbertCurve(vec2 p)\n{\n    const int n = 6;\n\n    float d = 0.0;\n    float s = exp2(float(n - 1));\n\n    p = floor(p * exp2(float(n)));\n\n    for (int i = 0; i < n; i++)\n    {\n        vec2 r = floor(p / s);\n        r -= 2.0 * floor(r * 0.5);\n\n        d += s * s * (r.y == 0.0 ? (r.x == 0.0 ? 0.0 : 3.0) : (r.x == 0.0 ? 1.0 : 2.0));\n\n        p = r == vec2(1, 0) ? s - 1.0 - p : p;\n        p = r.y == 0.0 ? p.yx : p;\n        s *= 0.5;\n    }\n\n    return d * exp2(-float(n * 2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Bend UVs to get fake 3D perspective.\n    vec2 mtc = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    mtc *= vec2(2.0, 0.2);\n    mtc.xy -= 0.04 * normalize(mtc) * pow(length(mtc), 3.0);\n    mtc /= vec2(2.0, 0.2);\n\n    vec2 uv = 1.25 * mtc;\n    vec2 ouv = uv;\n    uv = fract(uv + 0.5) - 0.5;\n\n    // Mirror side screens and reflections.\n    if (ouv.x > 0.5) uv.x =  1.0 - ouv.x;\n    if (ouv.x <-0.5) uv.x = -1.0 - ouv.x;\n    if (ouv.y > 0.5) uv.y =  1.0 - ouv.y;\n    if (ouv.y <-0.5) uv.y = -1.0 - ouv.y;\n\n    uv *= 1.01;\n\n    // Construct screen separating edge mask.\n    vec2  edge_uv = clamp(abs(uv * 2.0 / 1.01) * 128.0 - 126.0, 0.0, 1.0);\n    float edge_mask = (1.0 - edge_uv.x) * (1.0 - edge_uv.y);\n\n    fragColor = vec4(0.0);\n    uv = clamp(0.5 - uv, 0.0, 0.9999);\n\n    if (fragCoord.x < 64.0 && fragCoord.y < 64.0)\n    {\n        // Map pixel screen coordinates to Hilbert curve.\n        float l = hilbertCurve(clamp(floor(fragCoord) / 64.0, 0.0, 1.0));\n\n        // Snap curve linear coordinate just in case.\n        l = floor(l * 4096.0) / 4096.0;\n\n        // Wrap it three times for aesthetics.\n        l = fract(l * 3.0);\n\n        // Read source wave and apply high-pass filter.\n        float f = 3.0 * texture(iChannel0, vec2(l, 0.75)).x\n            - texture(iChannel0, vec2(l - 1.0 / iChannelResolution[0].x, 0.75)).x\n            - texture(iChannel0, vec2(l + 1.0 / iChannelResolution[0].x, 0.75)).x;\n\n        fragColor.x = f;\n    }\n\n    vec4 last = texture(iChannel1, fragCoord / iChannelResolution[1].xy);\n\n    float last_res_x = floor(texture(iChannel1, (vec2(0.5, 70.5) / iChannelResolution[1].xy)).x);\n    float last_res_y = floor(texture(iChannel1, (vec2(1.5, 70.5) / iChannelResolution[1].xy)).x);\n\n    if (last_res_x != iResolution.x || last_res_y != iResolution.y)\n    {\n        // Force feedback value to current one when resolution changes.\n        fragColor.x *= 0.8;\n        last = fragColor;\n    }\n\n    if (iFrame == 0)\n    {\n        // Clear the buffer.\n        fragColor = vec4(0.0);\n        last = fragColor;\n    }\n\n#if DO_CUSTOM_FRAMETIME\n    // iTimeDelta was locked to 1/60 at the time of writing this shader.\n\n    float last_time = texture(iChannel1, (vec2(2.5, 70.5) / iChannelResolution[1].xy)).x;\n    float curr_time = fract(iTime);\n    float delta_time = min(fract(curr_time - last_time), fract(last_time - curr_time));\n#else\n    float delta_time = iTimeDelta;\n#endif\n\n    // Adjust exponential smoothing with respect to frame rate.\n    float exp_n_at_60fps = 27.57142;\n    float exp_n = exp_n_at_60fps * (1.0 / 60.0) / delta_time;\n    float exp_alpha = 2.0 / (1.0 + exp_n);\n    float exp_scale = (2.0 / (1.0 + exp_n_at_60fps)) / exp_alpha;\n\n    // Exponential smoothing.\n    fragColor = mix(last, fragColor, exp_alpha);\n    fragColor.y = last.x * exp_scale;\n\n    // Sample accumulated data with modified bilinear interpolation.\n    vec2 xt = uv * 64.0 - 0.5;\n    vec2 ft = fract(xt);\n    ft = smoothstep(0.0, 1.0, ft);\n    ft = smoothstep(0.0, 1.0, ft);\n    ft = smoothstep(0.0, 1.0, ft);\n    ft = smoothstep(0.0, 1.0, ft);\n    ft = smoothstep(0.0, 1.0, ft);\n\n    fragColor.y = texture(iChannel1,\n        clamp(floor(xt) + ft + 0.5, 0.0, 63.5) / iChannelResolution[1].xy).x;\n    \n    float side_screen_fade = mix(1.0, 0.0,\n        clamp((sin((iTime + 10.0) / 9.6) - 0.5) * 2.5, 0.0, 1.0)\n        * (1.0 - clamp(1.0 - 256.0 * (abs(ouv.x) - 0.5), 0.0, 1.0)));\n\n    fragColor.y *= side_screen_fade;\n\n    // Build single pixel vignette mask.\n    vec2  pixel_uv = sqrt(1.0 - abs(fract(uv * 64.0) - 0.5) * 2.0);\n    float pixel_mask = smoothstep(0.0, 1.0, pow(pixel_uv.x * pixel_uv.y, 0.5));\n\n    fragColor.y *= 0.98 + 0.02 * pixel_mask;\n    fragColor.w = pixel_mask * clamp(0.5 - 1.3 * pow(length(uv - 0.5), 3.0), 0.0, 1.0) * 2.0;\n\n    // Extreme contrast adjustment for purely aesthetic reasons.\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = smoothstep(0.0, 1.0, fragColor.y);\n    fragColor.y = pow(fragColor.y, 3.0);\n\n    // Highlight mask for anamorphic flares.\n    fragColor.z = pow(fragColor.y, 12.0) * 14.0;\n\n    // Add screen edges.\n    fragColor.y *= 0.5 * smoothstep(0.0, 1.0, edge_mask);\n\n    // Add screen vignette.\n    fragColor.y *= clamp(0.5 - 1.0 * pow(length(uv - 0.5), 3.0), 0.0, 1.0) * 2.2;\n\n    // Darken reflections.\n    fragColor.yzw *= mix(0.8, 1.0, clamp(1.0 - 256.0 * (abs(ouv.x) - 0.5), 0.0, 1.0));\n    fragColor.yzw *= mix(0.5, 1.0, clamp(1.0 - 256.0 * (abs(ouv.y) - 0.5), 0.0, 1.0));\n\n    // Add noise to black level.\n    float noise = texture(iChannel2, (vec2(1.6, 2.0) * fragCoord.xy / iResolution.yy)\n        + vec2(sin(iTime * 9.7) * 11.234, 17.11 * cos(iTime))).x;\n\n    fragColor.w += 1.5 * noise;\n\n    // Keep track of resolution changes so we can reset feedback buffer.\n    if (floor(fragCoord.xy) == vec2(0, 70)) fragColor.x = iResolution.x;\n    if (floor(fragCoord.xy) == vec2(1, 70)) fragColor.x = iResolution.y;\n\n#if DO_CUSTOM_FRAMETIME\n    if (floor(fragCoord.xy) == vec2(2, 70)) fragColor.x = curr_time;\n#endif\n\n#if DEBUG_FRAMETIME\n    if (fragCoord.y / iResolution.y > 0.99)\n    {\n        fragColor.y *= 0.5;\n        fragColor.y += (fragCoord.x / iResolution.x) < delta_time * 10.0 ? 0.15 : 0.0;\n        fragColor.y += pow(fract((fragCoord.x / iResolution.x) * 10.0), 32.0) * 0.15;\n    }\n#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 2255,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/ulquiorra-ben-hafsa/ashley-walbridge-africadarkmelo-edit"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// pixelScreen - Buf B\n//\n// First 4x reduction pass for bloom and anamorphic flare.\n//\n// Created by Dmitry Andreev - and'2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    vec2  res = iChannelResolution[0].xy;\n    float s = res.y / 450.0;\n\n    // Discard pixels outside of working area for performance.\n    if (fragCoord.x > (res.x + 3.0) / 4.0) discard;\n\n    // Horizontal reduction for anamorphic flare.\n    for (int x = 0; x < 8; x++)\n    {\n        fragColor.z += 0.25 * texture(iChannel0, min(vec2(1.0, 1.0),\n            vec2(4.0, 1.0) * (fragCoord + 0.5 * s * vec2(float(x) - 3.5, 0)) / res)).z;\n    }\n\n    if (fragCoord.y <= (iChannelResolution[0].y + 3.0) / 4.0)\n    {\n        // Horizontal and vertical reduction for regular bloom.\n\n        for (int y = 0; y < 5; y++)\n        for (int x = 0; x < 5; x++)\n        {\n            fragColor.y += 0.04 * texture(iChannel0, min(vec2(1.0),\n                (4.0 * (floor(fragCoord) + s * (vec2(x,y) - 2.0))) / res)).y;\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// pixelScreen - Buf C\n//\n// Second 4x reduction pass for bloom and anamorphic flare.\n//\n// Created by Dmitry Andreev - and'2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    vec2  res = iChannelResolution[0].xy;\n    float s = res.y / 450.0;\n\n    // Discard pixels outside of working area for performance.\n    if (fragCoord.x > (res.x + 31.0) / 16.0) discard;\n\n    // Horizontal reduction for anamorphic flare.\n    for (int x = 0; x < 8; x++)\n    {\n        fragColor.z += 0.25 * texture(iChannel0, min(vec2(1.0 / 4.0, 1.0),\n            vec2(4.0, 1.0) * (fragCoord + 0.5 * s * vec2(float(x) - 3.5, 0)) / res)).z;\n    }\n\n    if (fragCoord.y <= (iChannelResolution[0].y + 31.0) / 16.0)\n    {\n        // Horizontal and vertical reduction for regular bloom.\n\n        for (int y = 0; y < 5; y++)\n        for (int x = 0; x < 5; x++)\n        {\n            fragColor.y += 0.04 * texture(iChannel0, min(vec2(1.0 / 4.0),\n                (4.0 * (floor(fragCoord) + s * (vec2(x,y) - 2.0))) / res)).y;\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// pixelScreen - Buf D\n//\n// Third 4x reduction pass for bloom and anamorphic flare.\n//\n// Created by Dmitry Andreev - and'2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0);\n    vec2  res = iChannelResolution[0].xy;\n    float s = res.y / 450.0;\n\n    // Discard pixels outside of working area for performance.\n    if (fragCoord.x > (res.x + 127.0) / 64.0) discard;\n\n    // Horizontal reduction for anamorphic flare.\n    for (int x = 0; x < 8; x++)\n    {\n        fragColor.z += 0.25 * texture(iChannel0, min(vec2(1.0 / 16.0, 1.0),\n            vec2(4.0, 1.0) * (fragCoord + 0.5 * s * vec2(float(x) - 3.5, 0)) / res)).z;\n    }\n\n    if (fragCoord.y <= (iChannelResolution[0].y + 127.0) / 64.0)\n    {\n        // Horizontal and vertical reduction for regular bloom.\n\n        for (int y = 0; y < 5; y++)\n        for (int x = 0; x < 5; x++)\n        {\n            fragColor.y += 0.04 * texture(iChannel0, min(vec2(1.0 / 16.0),\n                (4.0 * (floor(fragCoord) + s * (vec2(x,y) - 2.0))) / res)).y;\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}