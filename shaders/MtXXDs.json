{
    "Shader": {
        "info": {
            "date": "1440591083",
            "description": "Started as a refraction experiment, ended up as a cool glassy ball. Move the sphere with your mouse. Change fresnel strength on line 3",
            "flags": 0,
            "hasliked": 0,
            "id": "MtXXDs",
            "likes": 3,
            "name": "Glassy Ball",
            "published": 3,
            "tags": [
                "raytracer",
                "sphere",
                "shading",
                "rendering",
                "refract",
                "object"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 728
        },
        "renderpass": [
            {
                "code": "#define EPSILON .1\n#define REFRACT_INDICIES .33\n#define FRESNEL_STRENGTH .8\n\nstruct Ray {\n  \n    vec3 origin;\n    vec3 direction;\n    \n};\n    \nstruct RaycastHit {\n      \n    vec3 point;\n    vec3 normal;\n    float det;\n    int type;\n        \n};\n    \nconst vec3 light = vec3(2., 3., 0.);\n\nRaycastHit intersectSphere(vec3 position, float radius, const Ray ray) {\n    \n\tfloat a = dot(ray.direction, ray.direction);\n    float b = 2. * dot(ray.direction, ray.origin - position);\n    float c = dot(ray.origin - position, ray.origin - position) -(radius * radius);\n    float det = (b * b) - 4. * a * c;\n\n\tfloat lambda = (-b -sqrt(det)) / (2. * a);\n\tvec3 p = ray.origin + lambda * ray.direction;\n\tvec3 n = p - position;\n    \n    RaycastHit hit;\n    hit.point = p;\n    hit.normal = normalize(n);\n    hit.det = det;\n    hit.type = (det >= 0. && lambda >= 0.) ? 0 : -1;\n    \n    return hit;\n        \n}\n\nRaycastHit intersectPlane(vec3 position, vec3 normal, const Ray ray) {\n \n    //float num = position.y - dot(normal, ray.origin);\n\tfloat num = -dot(normal,ray.origin-position);\n    float denom = dot(normal, ray.direction);\n\tfloat t = num / denom;\n\t\t\t\n\tvec3 p = ray.origin + ray.direction * t;\t\t\n    \n    RaycastHit hit;\n    hit.point = p;\n    hit.normal = normal;\n    hit.det = t;\n    hit.type = t > 0. ? 1 : -1;\n    \n    return hit;\n    \n}\n\nRaycastHit intersect(Ray ray) {\n \n    vec3 spherePos = vec3(0.,0.,4.);\n    \n    if(iMouse.z > 0.) {\n     \n        vec2 m = iMouse.xy / iResolution.xy;\n        spherePos = vec3(-3. + (m.x * 6.), -1.5 + (m.y * 3.), 4.);\n        \n    }\n    \n    RaycastHit sphere = intersectSphere(spherePos, .6, ray);\n    RaycastHit plane = intersectPlane(vec3(0., -2., 0.), vec3(0., 1., 0.), ray);\n    \n    if(sphere.type == 0) {\n     \n        return sphere;\n        \n    }\n    \n    return plane;\n    \n}\n\nfloat diffuse(RaycastHit hit, Ray ray) {\n    \n \tfloat dif = .2;\n    const float shadowBias = .0001;\n    \n    vec3 l = normalize(light - hit.point);\n    Ray shadowRay = Ray(hit.point + (l * shadowBias), l);\n    RaycastHit shadow = intersect(shadowRay);\n    \n    if(shadow.type < 0) {\n     \n        dif += max(dot(l, hit.normal), 0.);\n        dif /= shadow.type == 0 ? 5. : 1.;\n        \n    }\n    \n    return dif;\n    \n}\n\nvec4 shadePlane(Ray ray, RaycastHit hit) {\n    \n \tvec3 l = light - hit.point;\n        \n    return vec4(1., 1., 0., 1.) * diffuse(hit, ray);\n    \n}\n\nvec4 shade(Ray ray) {\n    \n    RaycastHit hit = intersect(ray);\n    \n    if(hit.type == 0) {\n     \n        // refraction\n       \tvec3 refractDir = refract(ray.direction, hit.normal, REFRACT_INDICIES);\n        Ray refr = Ray(hit.point + (refractDir * EPSILON), refractDir);\n        \n        // reflection\n        vec3 reflectDir = reflect(ray.direction, hit.normal);\n        Ray refl = Ray(hit.point + (reflectDir * EPSILON), reflectDir);\n        \n        // cubemap sampling\n        RaycastHit reflH = intersect(refl);\n        RaycastHit refrH = intersect(refr);\n        \n        vec3 refractCol = refrH.type == 1 ? shadePlane(refr, refrH).xyz : texture(iChannel0, refr.direction).xyz;\n        vec3 reflectCol = reflH.type == 1 ? shadePlane(refl, reflH).xyz : texture(iChannel0, refl.direction).xyz;\n        \n        vec3 l = light - hit.point;\n        \n        // diffuse calculation\n        float dif = diffuse(hit, ray);\n        \n        float spec = 0.;\n        spec += pow(max(dot(normalize(refl.direction), normalize(l)), 0.), 15.);\n        \n        // fresnel calculation\n        // borrowed from TekF's Bouy shader\n        // source: https://www.shadertoy.com/view/XdsGDB\n        float ndotr = dot(hit.normal,ray.direction);\n\t    float fresnel = pow(1. - abs(ndotr), FRESNEL_STRENGTH);\n\t    fresnel = mix( .001, 1.0, fresnel );\n        \n        // color calculation\n        vec3 ambient = vec3(.2);\n        vec3 diffuse = vec3(.2, 0., 0.) * dif;\n        vec3 specular = vec3(1.) * spec;\n        vec3 ref = mix(refractCol, reflectCol, fresnel);\n        \n        // blending\n        vec3 final = ambient + diffuse + spec + ref;\n        return vec4(final.xyz, 1.);\n        \n    } else if(hit.type == 1) {\n     \n        return shadePlane(ray, hit);\n        \n    }\n    \n    return texture(iChannel0, ray.direction);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy / 2.) / iResolution.y;\n    \n    vec3 pos = vec3(0., 0., 0.);\n    vec3 dir = vec3(uv.x, uv.y, 1.);\n    Ray ray = Ray(pos, dir);\n    \n\tfragColor = shade(ray);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}