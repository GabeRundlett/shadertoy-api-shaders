{
    "Shader": {
        "info": {
            "date": "1608311733",
            "description": "Sizing a grid of spheres based on where they lie inside a volume. The volume is layered using sin() and the layers get offset by iTime. The extremely tiny spheres on the outside unintentionally created a cool starry effect :)",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3yzr",
            "likes": 31,
            "name": "Universal Waves",
            "published": 3,
            "tags": [
                "raymarching",
                "fakevolumetric",
                "spheregrid"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 383
        },
        "renderpass": [
            {
                "code": "// Hue to RGB conversion from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(h) 0.6 + 0.6 * cos(6.3 * h + vec3(0.0, 23.0, 21.0))\n\nfloat mapVolume(in vec3 p) {\n    float volume = dot(sin(0.5 * p), vec3(1.0));\n    float layers = sin(3.0 * volume - 2.0 * iTime);\n    return max(layers, volume);\n}\n\nfloat mapScene(in vec3 p) {\n    p /= 0.75;\n    vec3 cell = floor(p) * 0.75;\n    vec3 local = fract(p) * 0.75;\n    return (length(local - 0.325) + 0.3 * min(0.0, mapVolume(cell + 0.325))) * 0.6;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    float time = 0.25 * iTime;\n    float c = cos(time), s = sin(time);\n\n    vec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float dt = 0.0;\n    for (int iter=0; iter < 150; iter++) {\n        vec3 p = ro + rd * dt;\n\n        p.yz *= mat2(c, s, -s, c);\n        p.xz *= mat2(c, s, -s, c);\n\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n\n            n.xz *= mat2(c, -s, s, c);\n            n.yz *= mat2(c, -s, s, c);\n\n            fragColor.rgb += hue2rgb(0.2 * length(p) + time);\n            fragColor.rgb *= max(0.3, dot(n, l));\n            break;\n        }\n\n        if (dt > 20.0) {\n            break;\n        }\n\n        dt += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}