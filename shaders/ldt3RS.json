{
    "Shader": {
        "info": {
            "date": "1450840519",
            "description": "Dynamic fractal nexus.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldt3RS",
            "likes": 4,
            "name": "Dynamic fractal nexus",
            "published": 3,
            "tags": [
                "ray",
                "distance",
                "march"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 482
        },
        "renderpass": [
            {
                "code": "//Ethan Shulman/public_int_i 2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//thanks to iq for the great tutorials, code and information\n//thanks to XT95 for the ambient occlusion function\n\n\n//Click and move mouse to control camera direction\n\n\n\n#define FOV_SCALE 2.\n#define ITERATIONS 86\n#define EPSILON .01\n#define NORMAL_EPSILON .012\n\n#define VIEW_DISTANCE 64.\n\n//#define REFLECTIONS\n\n#define pi 3.141592\n\nvec3 cameraLocation;\nvec2 cameraRotation;\n\n\nstruct material {\n    vec3 diffuse,specular,emissive;\n    float metallic,roughness;\n};\nstruct light {\n    vec3 position, color;\n    float size;\n};\n    \n\n//#define global_illumination 1\n#define gi_background 1\n#define gi_trace_iter 16\nconst float global_illumination_strength = .3,\n    \t\tglobal_illumination_reach = 16.;\n\nconst vec3 ambient = vec3(1.);\n\n\n#define nLights 0\n\n#if nLights != 0\nlight lights[nLights];\n#endif    \n\nvoid initLights() {\n    #if nLights != 0\n    lights[0] = light(vec3(100.,-400.,300.),\n                      vec3(1.),\n                      1000.);\n\t#endif\n}\n\n//distance functions from iq's site\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n    \nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\n\n\nfloat df(in vec3 rp) {\n    vec3 p = rp+vec3(0.,4.,0.);\n    \n    for (int i = 0; i < 4; i++) {\n        float t = iTime*.003+float(i)*.14;\n        p.xy = rot(abs(p.xy),t+float(i)*.24);\n        p.zx = abs(rot(p.zx,t+float(i)*.194));\n    }\n    \n    vec3 lp = p;\n    lp.xy = rot(lp.xy, iTime*.04);\n    lp = mod(abs(lp),20.)-10.;\n    vec3 lp2 = abs(mod(abs(p),5.)-2.5)-1.;\n    for (int i = 0; i < 4; i++) {\n        float t = .24+iTime*.024+float(i)*.14;\n        lp2.xy = rot(abs(lp2.xy),t+float(i)*.24);\n        lp2.zx = abs(rot(lp2.zx,t+float(i)*.194));\n    }\n    return max( -sdBox(lp, vec3(8.)),\n        \tmin(sdTorus(lp2,vec2(1.,.2)), udBox(lp2, vec3(.3,.6,.9))));\n}\nfloat df_hq(in vec3 rp) {\n\treturn df(rp);\n}\n\n\n\nconst vec3 ne = vec3(NORMAL_EPSILON,0.,0.);\nvec3 normal2(in vec3 rp) {\n    return normalize(vec3(df(rp+ne)-df(rp-ne),\n                          df(rp+ne.yxz)-df(rp-ne.yxz),\n                          df(rp+ne.yzx)-df(rp-ne.yzx)));\n}\n\n\nvec3 normal(in vec3 rp) {\n    return normalize(vec3(df_hq(rp+ne)-df_hq(rp-ne),\n                          df_hq(rp+ne.yxz)-df_hq(rp-ne.yxz),\n                          df_hq(rp+ne.yzx)-df_hq(rp-ne.yzx)));\n}\n\n\nmaterial mat(vec3 rp) {\n    material m;\n    \n    if (df(rp) < EPSILON) {\n\t\tm = material(vec3(.74,.54,.65), //diffuse\n                     vec3(.74,.54,.65), //specular\n                  \t vec3(0.), //emissive\n                    0.0,//metallic\n                     0.9);//roughness\n    }\n    \n    return m;\n}\n\n\n\n//rp = ray pos\n//rd = ray dir\n//maxDist = max trace distance\n//returns -1 if nothing is hit\nfloat trace(in vec3 rp, inout vec3 rd, float maxDist) {\n    \n    float d,s = 0.;\n    for (int i = 0; i < ITERATIONS; i++) {\n        d = df(rp+rd*s);\n        if (d < EPSILON || s > maxDist) break;\n        s += d;\n        \n        //rd = normalize(rd+vec3(.01,-.001,0.)*d);\n    }\n    \n    if (d < EPSILON) return s;\n    \n    return -1.0;\n}\n\nvec3 randomHemiRay(in vec3 d, in vec3 p, in float amount) {\n    return normalize(d+cos(p*245.245-d*cos(p*9954.345)*3532.423)*amount);\n}\n//ambient occlusion function is XT95's from https://www.shadertoy.com/view/4sdGWN\nfloat ambientOcclusion(in vec3 rp, in vec3 norm) {\n    float sum = 0., s = 0.;\n    vec3 lastp;\n    \n    for (int i = 0; i < 32; i++) {\n        vec3 p = rp+randomHemiRay(norm,lastp,.4)*s;\n        sum += max(0., (s-df(p))/(s*s));//randomHemiRay(norm,rp,.5)*s);\n        lastp = p;\n        s += .2;\n    }\n    \n    return clamp(1.-sum*.05, 0., 1.);\n}\n\nfloat softShadowTrace(in vec3 rp, in vec3 rd, in float maxDist, in float penumbraSize, in float penumbraIntensity) {\n    vec3 p = rp;\n    float sh = 0.;\n    float d,s = 0.;\n    for (int i = 0; i < ITERATIONS; i++) {\n        d = df(rp+rd*s);\n        sh += max(0., penumbraSize-d)*float(s>penumbraSize*4.);\n        s += d;\n        if (d < EPSILON || s > maxDist) break;\n    }\n    \n    if (d < EPSILON) return 0.;\n    \n    return max(0.,1.-sh/penumbraIntensity);\n}\n\nvec3 background(in vec3 rd) {\n\tvec3 c = vec3(0.);\n    #if nLights != 0\n    for (int i = 0; i < nLights; i++) {\n        c += lights[i].color*max(0., dot(rd, normalize(lights[i].position)))*.6;\n    }\n    #endif\n    return vec3(0.);\n}\nvec3 background_gi(in vec3 rd) {\n    return background(rd);\n}\n\nvec3 locateSurface(in vec3 rp) {    \n    vec3 sp = rp;\n    for (int i = 0; i < 3; i++) {\n        float sd = abs(df(rp));\n        if (sd < EPSILON) return sp;\n        sp += normal2(sp)*sd*.5;\n    }\n    return sp;\n}\nvoid lighting(in vec3 td, in vec3 sd, in vec3 norm, in vec3 reflDir, in material m, inout vec3 dif, inout vec3 spec) {\n    float ao = ambientOcclusion(td,norm);\n    dif = ambient*ao;\n    spec = vec3(0.);\n        \n    #if nLights != 0\n    for (int i = 0; i < nLights; i++) {\n        vec3 lightVec = lights[i].position-td;\n        float lightAtten = length(lightVec);\n        lightVec = normalize(lightVec);\n        float shadow = softShadowTrace(sd, lightVec, lightAtten, 0.3, 1.5);\n        lightAtten = max(0., 1.-lightAtten/lights[i].size)*shadow;\n        \n    \tdif += max(0., dot(lightVec,norm))*lights[i].color*lightAtten;\n        spec += pow(max(0., dot(reflDir, lightVec)), 4.+(1.-m.roughness)*78.)*shadow*lights[i].color;\n    }\n\t#endif\n    \n    //dif *= .5+ao*.5;\n}\n\n//copy of shade without reflection trace\nvec3 shadeNoReflection(in vec3 rp, in vec3 rd, in vec3 norm, in material m) {\n    vec3 sd = rp+norm*EPSILON*10.;//locateSurface(rp)-rd*EPSILON*2.;\n    \n    //lighting\n    vec3 reflDir = reflect(rd,norm);\n\n    vec3 lightDif,lightSpec;\n    lighting(rp,sd,norm,reflDir,m,lightDif,lightSpec);\n\n    return (1.-m.metallic)*lightDif*m.diffuse +\n        \t(.5+m.metallic*.5)*lightSpec*m.specular +\n        \tm.emissive ;\n}\nvec3 giTrace(in vec3 rp, in vec3 rd) {\n    float s = 0., d;\n    for (int k = 0; k < gi_trace_iter; k++) {\n        d = df(rp+rd*s);\n        if (d < EPSILON) break;\n        s += d;\n    }\n    if (d < EPSILON) {\n        vec3 hp = rp+rd*s;\n        return shadeNoReflection(hp, rd, normal(hp), mat(hp))*max(0.,1.-s/global_illumination_reach);\n    }\n    #ifdef gi_background\n    return background_gi(rd);\n    #endif\n    return vec3(0.);\n}\nvec3 shade(in vec3 rp, in vec3 rd, in vec3 norm, material m) {\n    vec3 sd = rp+norm*EPSILON*10.;//locateSurface(rp)-rd*EPSILON*2.;\n    \n    //lighting\n    vec3 dlc = vec3(0.);\n    \n    #ifdef global_illumination\n    vec3 ray = norm;\n    vec3 majorAxis = abs(ray);\n    if (majorAxis.x > majorAxis.y) {\n        if (majorAxis.x > majorAxis.z) {\n            majorAxis = vec3(1.,0.,0.);\n            if (ray.x == 1.) ray = vec3(0.999,0.001,0.0);\n        } else {\n            majorAxis = vec3(0.,0.,1.);\n            if (ray.z == 1.) ray = vec3(0.,0.001,0.999);\n        }\n    } else {\n        if (majorAxis.y > majorAxis.z) {\n            majorAxis = vec3(0.,1.,0.);\n            if (ray.y == 1.) ray = vec3(0.,0.999,0.001);\n        } else {\n            majorAxis = vec3(0.,0.,1.);\n            if (ray.z == 1.) ray = vec3(0.,0.001,0.999);\n        }\n    }\n    \n    vec3 rayRight = normalize(cross(majorAxis,ray))*.5;\n    vec3 rayUp = normalize(cross(ray,rayRight))*.5;\n\n    vec3 gi = giTrace(sd, norm);\n    gi += giTrace(sd, normalize(norm+rayRight));\n    gi += giTrace(sd, normalize(norm-rayRight));\n    gi += giTrace(sd, normalize(norm+rayUp));\n    gi += giTrace(sd, normalize(norm-rayUp));\n    dlc += gi*global_illumination_strength;\n    #endif\n    \n    vec3 slc = vec3(0.);\n    vec3 reflDir = reflect(rd,norm);\n    vec3 tReflDir = normalize(reflDir+cos(rp*245.245-rd*cos(rp*9954.345)*3532.423)*m.roughness*0.25);\n    tReflDir *= sign(dot(tReflDir,reflDir));\n    \n    #ifdef REFLECTIONS\n    float rtd = trace(sd,tReflDir,VIEW_DISTANCE);\n    if (rtd < 0.) {\n        slc = background(tReflDir);\n    } else {\n        vec3 rhp = sd+tReflDir*rtd;\n        slc = shadeNoReflection(rhp,reflDir,normal(rhp),mat(rhp));\n    }\n    #endif\n    \n    vec3 lightDif,lightSpec;\n    lighting(rp,sd,norm,reflDir,m,lightDif,lightSpec);\n    dlc += lightDif;\n    slc += lightSpec;\n    \n    float fres = 1.-max(0., dot(-rd,norm));\n    \n    return (1.-m.metallic)*dlc*m.diffuse +\n        \tslc*m.specular*((.5-m.metallic*.5)*fres+m.metallic*(.5+m.metallic*.5)) +\n        \tm.emissive ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n\tvec2 uv = (fragCoord.xy - R*.5)/R.x;\n\n    initLights();\n    \n  \n    vec2 mxy = (iMouse.xy/iResolution.xy);\n    mxy.y -= 1.;\n    mxy *= 6.28;\n    if (iMouse.w < 1.) {\n        mxy = vec2(iTime*.1-2.4,-2.9);\n    }\n    cameraRotation = vec2(-mxy.x-1.71,mxy.y/4.+2.4);//x = yaw ,   y = pitch\n    cameraLocation = vec3(sin(iTime*.001-.084)*100.,\n                          0.,\n                          cos(iTime*.001397)*100.);\n\n    \n    vec3 rp = cameraLocation;\n    vec3 rd = normalize(vec3(uv*vec2(1.,-1.)*FOV_SCALE,1.));\n\n    rd.yz = rot(rd.yz,cameraRotation.y);\n    rd.xz = rot(rd.xz,cameraRotation.x);\n    \n    rp += rd*3.;\n    \n\tfloat itd = trace(rp,rd,VIEW_DISTANCE);\n    if (itd < 0.) {\n        fragColor = vec4(background(rd),1.);\n        return;\n    }\n    \n\n    vec3 hp = rp+itd*rd;\n    #ifndef PATH_TRACE\n    fragColor = vec4(mix(shade(hp,\n                      rd,\n                      normal(hp),\n                      mat(hp)), background(rd), max(0.,itd/VIEW_DISTANCE)),1.);\n\t#else\n    \n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}