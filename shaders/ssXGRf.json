{
    "Shader": {
        "info": {
            "date": "1616359119",
            "description": "A family of conics constructed on oblique axes, following Apollonius. Mouse moves axes, key 'f' controls display of field vectors.",
            "flags": 16,
            "hasliked": 0,
            "id": "ssXGRf",
            "likes": 8,
            "name": "Apollonian Conics",
            "published": 3,
            "tags": [
                "conic",
                "loopless",
                "apollonius",
                "sections"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Apollonian Conics, Matthew Arcus, mla, 2021. Creative Commons Licence, etc.\n//\n// Around 200 BC Apollonius of Perga showed that any section through a oblique\n// cone could be represented, in modern terms, as a curve y² = kx² + x, with x\n// and y coordinates referred to generally oblique axes. This equation represents\n// a conic that i) passes through the origin ii) is tangent to the y axis and\n// iii) the x axis is a diameter that passes through the centre of the conic\n// and bisects all chords parallel to the y-axis.\n//\n// Mouse rotates axes. The red conic is the parabola in the family, so the\n// curves inside are ellipses, the ones outside are hyperbolas\n//\n// Loopy and loopless methods implemented. The loopless method does something\n// strange around the origin which I'm not sure how to fix.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.1415927;\nconst float HALFPI = 0.5*PI;\n\n// Distance to conic with parameter -1 < k < 1\n// k = 0 is straight line\n// else k = 1 or -1 is parabola\n// else k < 0 is ellipse\n// else k > 0 is hyperbola\nfloat conic(vec2 z,float k,mat2 m) {\n  k = 1.0/tan(k*HALFPI);\n  float x = z.x, y = z.y;\n  if (abs(k) > 1e4) return abs(x);\n  float t = k*x*x+x-y*y;\n  vec2 grad = vec2(2.0*k*x+1.0,-2.0*y);\n  grad = m*grad;\n  return abs(t)/length(grad);\n}\n\nfloat K = 10.0; // Show 2K conics\n// Loopless.\nvec2 conicdist0(vec2 z, mat2 m) {\n  float T = 1.0;\n  float x = z.x, y = z.y;\n  float k = atan(x*x/(y*y-x))/HALFPI;\n  float t = iTime;\n  k -= T/K*t;\n  float k0 = k;\n  k *= K; \n  k = round(k);\n  k += T*t;\n  k /= K; \n  float d = conic(z,k,m);\n  return vec2(k0,d);\n}\n\n// Loopy. Not too slow & a nicer image.\nvec2 conicdist1(vec2 z, mat2 m) {\n  float x = z.x, y = z.y;\n  float k0 = atan(x*x/(y*y-x))/HALFPI;\n  float t = iTime;\n  k0 -= t/K;\n  float d = 1e8;\n  for (float i = -K; i < K; i++) {\n    float k = (i+t)/K;\n    d = min(d,conic(z,k,m));\n  }\n  return vec2(k0,d);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return 0.75*rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\nconst int CHAR_F = 70;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  int AA = 1; // This doesn't really need AA, but just in case.\n  vec3 col = vec3(0);\n  vec2 w = iTime*vec2(-0.123,0.1);\n  if (iMouse.z > 0.0) w = PI*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  mat2 m = mat2(rotate(vec2(1,0),w.x), rotate(vec2(0,1),w.y)); // Rotated axes\n  for (int i = 0; i < AA; i++) {\n    for (int j = 0; j < AA; j++) {\n      vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n      z *= 2.0;\n      vec2 z0 = z; // Untransformed coordinate\n      z *= m; // Transform to oblique coordinates (postmultiply = transpose multiply)\n      vec2 ldist = fragCoord.y < 0.5*iResolution.y ? conicdist0(z,m) : conicdist1(z,m);\n      float lmin = 0.0, lmax = max(0.02,fwidth(length(z)));\n      float h = fract(0.5*ldist.x);\n      vec3 c = 0.2+0.8*h2rgb(min(h,1.0-h)); // Field value to colour\n      // Draw axes & grid\n      vec2 uv = abs(z);\n      float d = min(uv.x,uv.y); // Show axes\n      c = mix(c,vec3(0),1.0-smoothstep(lmin,lmax,d));\n      d = abs(conic(z,1.0,m)); // Show parabola\n      c = mix(c,vec3(1,0,0),1.0-smoothstep(lmin,lmax,d));\n      if (!key(CHAR_F)) {\n        // Draw the local orthogonal vectors\n        vec2 z1 = z0-round(z0*10.0)/10.0; // Local base point\n        ivec2 ix = ivec2(round(z0*10.0));\n        if (((ix.x^ix.y)&1) == 0) c *= 0.8;\n        float x = z.x, y = z.y;\n        vec2 a = vec2(1,-2.0*x*y/(2.0*y*y-x)); // Tangent vector at local point, in oblique coords\n        a = m*a; // Tangent vector to screen space\n        a = normalize(a);\n        //a = vec2(-a.y,a.x); // Rotate 90°\n        float d = segment(z1,0.03*a,-0.03*a); //abs(dot(z1,a)/length(a)); // And find the length\n        c = mix(c,vec3(0.2),1.0-smoothstep(0.4*lmin,0.4*lmax,d));\n      }\n      // Now draw grid lines\n      uv *= 4.0;\n      uv = fract(uv);\n      uv = min(uv,1.0-uv);\n      d = min(uv.x,uv.y);\n      d /= 4.0;\n      c = mix(c,vec3(0),1.0-smoothstep(0.5*lmin,0.5*lmax,d));\n      // And finally draw conics\n      c = mix(c,vec3(1),1.0-smoothstep(lmin,0.8*lmax,abs(ldist.y)));\n      col += c;\n    }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}