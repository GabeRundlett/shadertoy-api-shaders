{
    "Shader": {
        "info": {
            "date": "1651099566",
            "description": "Not very interesting, since it's almost identical to the previous one, but the next one will be more interesting...",
            "flags": 0,
            "hasliked": 0,
            "id": "stfBRj",
            "likes": 32,
            "name": "Cylinder Slicing",
            "published": 3,
            "tags": [
                "loop",
                "gif",
                "seamless",
                "satisfying",
                "original"
            ],
            "usePreview": 0,
            "username": "shyshokayu",
            "viewed": 382
        },
        "renderpass": [
            {
                "code": "/*\n    MIT License\n\n    Copyright (c) 2022 shyshokayu\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the Software), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, andor sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n*/\n\n#define RAY_MAX_ITERATIONS 100\n#define RAY_MAX_DISTANCE 100.0\n#define RAY_SURF_DISTANCE 0.0001\n\n#define PI 3.1415926535897932384626433832795\n#define TAU (PI * 2.0)\n\nfloat sine(float t) { return sin(t * PI); }\nfloat cose(float t) { return cos(t * PI); }\n\nmat2 rot(float r) {\n    float s = sin(r), c = cos(r);\n    return mat2(c, -s, s, c);\n}\n\nmat2 rote(float r) {\n    return rot(r * PI);\n}\n\nmat3 rotX(float r) {\n    float s = sin(r), c = cos(r);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c  , -s ,\n        0.0, s  , c\n    );\n}\n\nmat3 rotY(float r) {\n    float s = sin(r), c = cos(r);\n    return mat3(\n        c  , 0.0, -s ,\n        0.0, 1.0, 0.0,\n        s  , 0.0, c\n    );\n}\n\nmat3 rotZ(float r) {\n    float s = sin(r), c = cos(r);\n    return mat3(\n        c  , -s , 0.0,\n        s  , c  , 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nmat3 roteX(float r) {\n    return rotX(r * PI);\n}\n\nmat3 roteY(float r) {\n    return rotY(r * PI);\n}\n\nmat3 roteZ(float r) {\n    return rotZ(r * PI);\n}\n\n#define range(a, b, x) (((x) - (a)) / ((b) - (a)))\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define linearstep(a, b, x) saturate(range(a, b, x))\n#define cmix(a, b, x) mix(a, b, saturate(x))\n\n#define steprange(a, b, t) (step(a, t) * step(t, b))\n\n#define distanceSqr(v) dot(v, v)\n\nfloat easeIn(float x) {\n    return x * x;\n}\n\nfloat easeOut(float x) {\n    return 1.0 - easeIn(1.0 - x);\n}\n\nfloat easeInOut(float x) {\n    return mix(easeIn(x), easeOut(x), x);\n}\n\nfloat easeIn(float a, float b, float x) {\n    return easeIn(linearstep(a, b, x));\n}\n\nfloat easeOut(float a, float b, float x) {\n    return easeOut(linearstep(a, b, x));\n}\n\nfloat easeInOut(float a, float b, float x) {\n    return easeInOut(linearstep(a, b, x));\n}\n\nfloat noise1random(float p) {\n    return fract(cos(p * 12.9898) * 43758.5453123);\n}\n\nfloat noise1random(vec2 p) {\n    return noise1random(p.x + noise1random(p.y));\n}\n\nfloat sdPlane(vec3 p, float y) {\n    return p.y - y;\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdTorus(vec3 p, float t, float r) {\n  return length(vec2(length(p.xz) - t, p.y)) - r;\n}\n\nfloat sdCappedCylinder(vec3 p, float h, float r) {\n    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nstruct mapresult {\n    float d;\n    int m;\n};\n\nmapresult map(vec3 p, float time) {\n    float d = RAY_MAX_DISTANCE;\n    int m = 0;\n    \n    float sd;\n    \n    // Time loop control\n    float tx = time * 0.5;\n    float ti = floor(tx);\n    float tf = tx - ti;\n    \n    float slicedFactor = step(tf, 1.0 - 0.25); // 1.0 if slicing is complete, 0.0 otherwise.\n    float slicingFactor = step(tf, 1.0 - 0.6); // 1.0 if slicing is in process, 0.0 otherwise.\n\n    // Cylinder\n    {\n        vec3 p2 = vec3(p.x, p.y, abs(p.z));\n    \n        vec3 o = vec3(0.0);\n\n        o.x = -1.0;\n        o.x += 1.0 * easeOut(0.0, 0.5, tf);\n        o.x += 1.0 * easeOut(0.75, 1.0, tf);\n\n        o.y = 0.0;\n        o.y += -8.0 * easeIn(0.75, 1.0, tf);\n        \n        o.z = 2.0;\n\n        vec3 po = p2 - o;\n\n        po.xy *= rote(0.5 + ((tf - 0.75) * (1.0 - slicedFactor)));\n        sd = sdCappedCylinder(po - vec3(0.0, 0.5, 0.0), 0.5, 1.0);\n        if(sd < d) {\n            d = sd;\n            m = 2;\n        }\n        \n        // Keep the sliced detail\n        sd = -sdBox(po, vec3(4.0, 0.0625, 4.0));\n        sd = mix(sd, 0.0, slicedFactor);\n        if(sd >= d) {\n            d = sd;\n            m = 2;\n        }\n        \n        sd = sdCappedCylinder(p2.yxz - vec3(0.0, -8.0, 2.0), 8.0, 1.0);\n        if(sd < d) {\n            d = sd;\n            m = 2;\n        }\n    }\n    \n    // Slicer\n    {\n        vec3 originp = p;\n        originp -= vec3(0.0, 0.0, 0.0);\n        originp.yz *= rote(tf - 0.125 + 0.05);\n    \n        // Cut out cylinders\n        sd = -sdBox(originp - vec3(0.0625, 3.0, 4.0), vec3(0.0625, 3.0, 4.0));\n        sd = max(sd, -sdBox(originp - vec3(0.0625, -3.0, -4.0), vec3(0.0625, 3.0, 4.0)));\n        sd = mix(sd, 0.0, slicingFactor);\n        sd = mix(0.0, sd, slicedFactor);\n        if(sd >= d) {\n            d = sd;\n            m = 2;\n        }\n        \n        sd = sdCappedCylinder(originp - vec3(0.0625, 0.0, 0.0), 4.0, 0.0625);\n        sd = min(sd, sdCappedCylinder(originp.yxz - vec3(0.0, -16.0 + 0.125 + 0.0625, 0.0), 16.0, 0.09375));\n        if(sd < d) {\n            d = sd;\n            m = 3;\n        }\n    }\n    \n    // Path\n    {\n        sd = sdBox(p - vec3(-8.0, -10.125, 0.0), vec3(8.0, 10.0, 16.0) - 0.0625);\n        sd -= 0.0625;\n        sd = max(sd, -sdCappedCylinder(p.yxz - vec3(0.0, -8.0, 2.0), 9.0, 1.0));\n        sd = max(sd, -sdCappedCylinder(p.yxz - vec3(0.0, -8.0, -2.0), 9.0, 1.0));\n        if(sd < d) {\n            d = sd;\n            m = 1;\n        }\n    }\n    \n    return mapresult(d, m);\n}\n\nmapresult march(vec3 ro, vec3 rd, float time) {\n    float d = 0.0;\n    int m = 0;\n    for(int i = 0; i < RAY_MAX_ITERATIONS; i++) {\n        mapresult mr = map(ro + (rd * d), time);\n        float sd = mr.d;\n        d += sd;\n        m = mr.m;\n        if(d > RAY_MAX_DISTANCE) return mapresult(RAY_MAX_DISTANCE, 0);\n        if(abs(sd) < RAY_SURF_DISTANCE) break;\n    }\n    return mapresult(d, m);\n}\n\nvec3 normal(vec3 p, float time) {\n    vec2 e = vec2(RAY_SURF_DISTANCE * 2.0, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy, time).d - map(p - e.xyy, time).d,\n        map(p + e.yxy, time).d - map(p - e.yxy, time).d,\n        map(p + e.yyx, time).d - map(p - e.yyx, time).d\n    ));\n}\n\nfloat shadow(vec3 origin, vec3 dir, float time) {\n    return step(RAY_MAX_DISTANCE, march(origin, dir, time).d);\n}\n\nfloat directionalLightShaded(vec3 origin, vec3 direction, vec3 normal, float time) {\n    return max(0.0, dot(normal, direction)) * shadow(origin + ((normal * RAY_SURF_DISTANCE) * 2.0), direction, time);\n}\n\nvec3 sky(vec3 rd, vec3 sunDir) {\n    float sun = dot(rd, sunDir);\n    float sunk = (sun * 0.5) + 0.5;\n    float suna = pow(sunk, 4.0);\n    float sunb = pow(suna, 32.0);\n\n    vec3 skyColorOut = mix(vec3(0.6, 0.6, 0.7), vec3(3.0, 1.5, 0.7), suna);\n    skyColorOut = mix(skyColorOut, vec3(5.0, 4.0, 2.5), sunb);\n    skyColorOut = mix(skyColorOut, vec3(8.0, 6.0, 4.0), smoothstep(0.9997, 0.9998, sunk));\n\n    float m = 1.0 - pow(1.0 - max(rd.y, 0.0), 4.0);\n\n    return skyColorOut;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * ((2.51 * x) + 0.03)) / (x * ((2.43 * x) + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float aspect = max(iResolution.x / iResolution.y, iResolution.y / iResolution.x);\n    vec2 uv = (fragCoord / iResolution.xy) - 0.5;\n    uv.x *= aspect;\n    uv *= 2.0;\n    \n    float time = (iTime + ((1.0 / 60.0) * noise1random(iTime + uv)));\n    \n    vec3 ro = vec3(0.0, 0.0, -10.0);\n    vec3 rd = normalize(vec3(0.0, 0.0, 1.0));\n    ro.xy += uv * 4.0; // Ortho projection\n\n    mat3 rotation =\n        roteX(0.125) *\n        roteY(0.25);\n    \n    ro *= rotation;\n    rd *= rotation;\n\n    mapresult mr = march(ro, rd, time);\n    float d = mr.d;\n    int m = mr.m;\n    vec3 p = ro + (rd * d);\n    vec3 n = normal(p, time);\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    float skyFactor = d / RAY_MAX_DISTANCE;\n    \n    vec3 sunDir = normalize(vec3(0.5, 0.9, 0.5));\n    \n    vec3 skyColor = sky(rd, sunDir);\n    \n    vec3 surfaceColor = vec3(0.0);\n\n    // Path\n    if(m == 1) {\n        surfaceColor = vec3(0.0);\n    }\n    // Ball\n    else if(m == 2) {\n        surfaceColor = vec3(0.3);\n    }\n    // Other stuff\n    else if(m == 3) {\n        surfaceColor = vec3(-0.25);\n    }\n    \n    vec3 surfaceReflColor = vec3(0.0);\n    for(int i = 0; i < 30; i++) {\n        float seed = texture(iChannel3, vec2(time, float(i) * 0.62842)).x;\n        vec3 rdRefl = reflect(rd, n);\n        rdRefl = normalize(rdRefl + ((texture(iChannel3, vec2(p.x + p.z, p.y + p.z) + seed).xyz - 0.5) * 2.0) * 2.0);\n        surfaceReflColor += sky(rdRefl, sunDir);\n    }\n    surfaceReflColor /= 30.0;\n    surfaceColor += surfaceReflColor;\n\n    surfaceColor *= mix(directionalLightShaded(p, sunDir, n, time), 1.0, 0.5);\n    \n    col = mix(\n        surfaceColor,\n        skyColor,\n        skyFactor\n    );\n    \n    col = aces(col);\n    \n    col *= steprange(-1.0, 1.0, uv.x);\n    col *= steprange(-1.0, 1.0, uv.y);\n    \n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}