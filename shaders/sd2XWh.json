{
    "Shader": {
        "info": {
            "date": "1620157738",
            "description": "Optical Illusion inspired by https://twitter.com/NovickProf/status/1389225250437615619",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2XWh",
            "likes": 1,
            "name": "Color Illusion Demo",
            "published": 3,
            "tags": [
                "illusion"
            ],
            "usePreview": 0,
            "username": "drayde",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "float circle( in vec2 uv, in float size, in vec2 position)\n{\n    return step(distance(uv, position), size);\n}\nvec3 circles3( in vec2 uv )\n{\n    vec3 intensity = vec3(0.0);\n    float size = 0.1;\n    \n    intensity.xy += vec2(circle(uv, size, vec2(0.2, 0.3)));\n    intensity.xz += vec2(circle(uv, size, vec2(0.8, 0.3)));\n    intensity.zy += vec2(circle(uv, size, vec2(0.5, 0.3)));\n\n    intensity.yz += vec2(circle(uv, size, vec2(0.2, 0.7)));\n    intensity.yx += vec2(circle(uv, size, vec2(0.8, 0.7)));\n    intensity.zx += vec2(circle(uv, size, vec2(0.5, 0.8)));\n    \n    return min(vec3(1.0), intensity);\n}\nvec3 colorize( in vec3 gridColor, in vec3 otherColor )\n{\n    gridColor *= 1.0 - step(vec3(0.2), otherColor);\n    if (gridColor.x == gridColor.y && gridColor.y == gridColor.z)\n    {\n        gridColor += 0.8;\n    }\n    return gridColor;\n}\nfloat raster( in float x, in float height, in float size )\n{\n    return step(fract(x / height), size);\n}\nvec3 raster( in vec3 x, in vec3 height, in vec3 size )\n{\n    return vec3(\n        raster(x.x, height.x, size.x),\n        raster(x.y, height.y, size.y),\n        raster(x.z, height.z, size.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 markSize = vec2(0.2, 0.04);\n    vec2 markSpeed = vec2(0.5, 0.0);\n    vec2 markPos = (0.5 * (1.0-markSize)) + (0.5 * (0.8-markSize)) * sin(iTime * markSpeed);\n    markPos.y -= 0.2;\n    vec2 mark = step(markPos, uv) * step(uv, markPos + markSize);\n\n\n    float gridHeight = 0.04;\n    vec3 grid = raster(\n        vec3(uv.y, uv.y + gridHeight/3., uv.y + gridHeight * 2.0/3.),\n        vec3(gridHeight),\n        vec3(1.0/3.0)\n        );\n\n\n    vec3 col = colorize( grid, circles3(uv));\n    float markIntensity = mark.x * mark.y;\n    col = col * (1.0-markIntensity) + markIntensity * 0.8;\n\n\n    col = min (vec3(1.0), col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}