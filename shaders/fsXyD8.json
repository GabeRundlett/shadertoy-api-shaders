{
    "Shader": {
        "info": {
            "date": "1642009577",
            "description": "My participation to genuary 2022\nPacking (squares, circles, any shapeâ€¦)",
            "flags": 0,
            "hasliked": 0,
            "id": "fsXyD8",
            "likes": 13,
            "name": "Genuary 2022 - Day12",
            "published": 3,
            "tags": [
                "packing",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x<b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    float th = 0.01;\n    vec3 bSz = vec3(1.);\n    float box = abs(_cube(p, bSz))-th;\n    box = max(box, -_cube(p-vec3(0.,-th*3.,0.), bSz));\n    acc = _min(acc, vec2(box,0.));\n    \n    float flapH = bSz.z/2.;\n    vec3 pFlap =p;\n    pFlap.z = -abs(pFlap.z);\n    pFlap -= vec3(0.,-bSz.y+.1,-bSz.z - flapH);\n    pFlap.yz *= r2d(-.25);\n    float flap = _cube(pFlap, vec3(bSz.x, th, flapH));\n    //flap = max(flap, abs(uv.x)-.1*uv.z);\n    acc = _min(acc, vec2(flap,0.));\n    \n    for (int i = 0; i < 16; ++i)\n    {\n        float fi = float(i);\n        vec2 dir = vec2(sin(fi), cos(fi));\n        float fCube = mod(fi*.1+iTime,1.5);\n        float spread = pow(fCube, 0.25f);\n        vec3 pos = p-vec3(mod(fi*.1,.5), fCube*fCube-2.5, 0.0)\n        +vec3(dir.x, 0.0f, dir.y)*spread*.25;\n        pos.xy *= r2d(fi);\n        pos.xz *= r2d(fi);\n        acc = _min(acc, vec2(_cube(pos, vec3(.1)), 1.));\n    }\n    \n    return acc;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x< 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.941,0.337,0.600)*pow(1.-sat(length(uv)-.2),.5);\n    float d= 10.;\n    float t=iTime*.5;\n    vec3 ro = vec3(sin(t)*d,-5.,cos(t)*d);\n    vec3 ta = vec3(0.,-1.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        vec3 lpos = vec3(8.,-5.,5.);\n        vec3 ldir = normalize(lpos-p);\n        float ndotl = dot(n,ldir);\n        if (res.z == 0.)\n        {\n            vec2 coords = p.xy*sat(abs(dot(n, vec3(0.,0.,1.))))\n            +p.zy*sat(abs(dot(n, vec3(1.,0.,0.))));\n            col = pow(texture(iChannel0, coords*.2).x,.025)*\n            vec3(0.831,0.545,0.306)+vec3(.2)*sat(ndotl);\n        }\n        if (res.z == 1.0)\n        {\n            col = vec3(.75)+vec3(.5)*sat(ndotl);\n        }\n        \n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}