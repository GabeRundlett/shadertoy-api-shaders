{
    "Shader": {
        "info": {
            "date": "1656343181",
            "description": "shader that draw dicks in 3d",
            "flags": 0,
            "hasliked": 0,
            "id": "wl2yD1",
            "likes": 0,
            "name": "3d dick",
            "published": 3,
            "tags": [
                "3ddick"
            ],
            "usePreview": 0,
            "username": "maxim",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define a .12\n\nmat3 rotX(float angle){\n    return mat3(1., 0., 0.,0., cos(angle), -sin(angle),0., sin(angle), cos(angle));\n}\n\nmat3 rotY(float angle){\n    return mat3(cos(angle), 0., sin(angle), 0., 1., 0. ,-sin(angle), 0., cos(angle));\n}\n\nmat3 rotZ(float angle){\n    return mat3(cos(angle), -sin(angle), 0., sin(angle), cos(angle), 0. ,0., 0., 1.);\n}\n\n\nfloat N11(float p){\n\treturn fract(sin(p*123.230+p*p*2345.36)*256.753);\n}\n\nvec3 N13(float p){\n    float t = iTime*2.5;\n    vec3 r = vec3(sin(N11(p+.255)*235.235+t*2.),sin(N11(p-.12432)*123.234+t*1.12423),sin(N11(p*2.)*546.36+t*3.));\n    return (0.7 - (r*.5 + .5) * 0.5);\n}\n\nfloat GetDist(vec3 p){\n    \n    float id = floor(p.x*.015/a);\n    \n    p.x = fract((p.x+a)*a)/a-4.3;\n    \n    p.y += 2.;\n    //p.y = (p.y - fract((p.y+iTime*4.)/20.));\n    \n    \n    float dist = 21.;\n\n    \n    p -= vec3(0.,0.,dist);\n    p *= rotX(3.141592653589793238464*0.5);\n    //p *= rotZ(iTime*4.23);\n    //p *= rotX(iTime*3.9786);\n    p += vec3(0.,2.,dist);\n    \n    \n    float dS1 = length(p-vec3(1,0,dist))-1.;\n    float dS2 = length(p-vec3(-1,0,dist))-1.;\n    float y2 = min(max(p.y,1.),4.);\n    float dC = length(p-vec3(0,y2,dist))-1.;\n\treturn(min(min(dS1,dS2),dC));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n\tfloat dO = 0.;\n    for(int i = 0; i <= MAX_STEPS; i++){\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS < SURF_DIST || dO > MAX_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 0);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col;\n    \n    vec3 ro = vec3(0,2,0);\n    \n    ro.x += 20.*sin(iTime*1.);\n    \n    ro.z += 4.*sin(iTime*10.);\n    \n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd * d;\n    \n    float id = floor(p.x*.015/a);\n    \n    float dif = dot(GetNormal(p),vec3(0,1,-1));\n    col = vec3(dif)*N13(id);\n    \n    col = pow(col, vec3(.4545));\n    \n    //col.r = N11(id);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}