{
    "Shader": {
        "info": {
            "date": "1609857571",
            "description": "Remix of [url]https://www.shadertoy.com/view/wtcyDB[/url]",
            "flags": 40,
            "hasliked": 0,
            "id": "tldyDS",
            "likes": 2,
            "name": "Red Can It Cold Vveb, a fork",
            "published": 3,
            "tags": [
                "fractal",
                "remix",
                "glitch",
                "fork",
                "weird",
                "error",
                "edit",
                "web",
                "mechanical"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "//Remixer:404Glaciergargamel\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    int iters = 2;\n    float eps = EPSILON*5.0;\n    for (int i = 1; i < MAX_MARCHING_STEPS/9; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection,iters);\n        if (dist < eps*(2.0+depth)) {\n\t\t\tif(iters < 4){\n                iters += 2;\n                eps /= 3.0;\n            }\n            else\n            return depth-dist;\n        }\n        depth += dist;\n        //eps *= 1.01;\n        if (depth >= end) {\n            return depth;\n        }\n    }\n    return depth;\n}\nvec3 depth_map(vec2 coord){\n    return texture(iChannel0, vec2((coord.x-image_scale/3.0)/iResolution.x/image_scale, (coord.y-image_scale/3.0)/iResolution.y/image_scale)).xyz;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 eye = vec3(iTime*20.0,1,1);\n\tvec3 p = depth_map(fragCoord);\n    vec3 worldDir = normalize(p-eye);\n    float dist = shortestDistanceToSurface(eye, worldDir, length(eye-p), MAX_DIST);\n    p = eye+dist*worldDir;\n    // Use the surface normal as the ambient color of the material\n    vec3 K_a = surface_color((p));\n    vec3 K_d = K_a;\n    vec3 K_s = vec3(2.0, 2.0, 2.0);\n    float shininess = 20.0;\n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    fragColor = vec4(color, 2.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 mainSound(in int samp, float time )\n{\n    int t = int(time * 9000.0);\n    int t1 = (t/2024)%4+4;\n    t = (t>>t1|t*(t1%4)&t/2024)-2;\n    return vec2(float(t & 0xee - 228) / 228.);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//Remixer:404Glaciergargamel\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    int iters = 2;\n    float eps = EPSILON*5.0;\n    for (int i = 1; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection,iters);\n        if (dist < eps*(2.0+depth)*image_scale/3.0) {\n\t\t\tif(iters < 4){\n                iters += 2;\n                eps /= 3.0;\n            }\n            else\n            return depth-dist;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x*image_scale<iResolution.x && fragCoord.y*image_scale<iResolution.y){\n    fragCoord *= image_scale;\n    fragCoord += vec2(image_scale/3.0);\n    vec3 viewDir = rayDirection(55.0, iResolution.xy, fragCoord);\n    viewDir.xz *= rot(iTime/9.0);\n    if (length(iMouse.xy) > 50.0) {\n        viewDir.yz *= rot(4.14*0.6-iMouse.y/iResolution.y*4.14);\n        viewDir.xz *= rot(4.14-iMouse.x/iResolution.x*4.14*3.0);\n    }\n    float speed = 20.0;\n\tvec3 eye = vec3(iTime*20.0,1,1);\n    mat3 viewToWorld = -viewMatrix(eye, vec3(0.1, 0.1, 0.1), vec3(0.1, 2.0, 0.1));\n    vec3 worldDir = viewToWorld * viewDir;\n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    if (dist > MAX_DIST - EPSILON) {\n        //Didn't hit anything\n        fragColor = vec4(0.1, 0.1, 0.1, 0.1);\n\t\treturn;\n    }\n    //The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    fragColor = vec4(p, 2.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SHADOW_ITER 30\n#define image_scale 9.0\n//change Z-buffer resolution\n#define rot(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\nconst int MAX_MARCHING_STEPS = 2000;\nconst float MIN_DIST = 0.1;\nconst float MAX_DIST = 20000.0;\nconst float EPSILON = 0.002;\nconst float size = 2000.0;\nconst float scale = EPSILON*20.0; //to prevent rendering artifacts\nfloat planet_surface(vec3 p,float i){\n    vec3 p1 = p/size;\n    p = (sin(sin(p1.yzx+p1)+p1.yzx+p1))*size;\n    return length(p) - size;\n}\nfloat sceneSDF(vec3 p,float anim,int iters) {\n    p /= scale*3.0;\n    float result = 0.1;\n    float i = 2.0;\n    for(int i1 = 1; i1 < 5; i1++){\n    \tresult = max(result, result-planet_surface(p*i,i)/(i));\n        if(i1 > iters) break;\n        i *= 4.0;\n    }\n    //float result = sceneSDF1(p/1000.0+sceneSDF1(p/1000.0));\n    return result*scale/2.5;\n}\nfloat sceneSDF(vec3 p,int iters){\n\treturn sceneSDF(p,2.0,iters);\n}\nfloat sceneSDF(vec3 p,float anim){\n\treturn sceneSDF(p,anim,5);\n}\nfloat sceneSDF(vec3 p){\n\treturn sceneSDF(p,2.0,5);\n}\nvec3 surface_color(vec3 p)\n{\n    p /= scale;\n    p /= 300.0;\n    return sin(vec3(sceneSDF(p/6.0,0.1),sceneSDF(p*4.0,0.1),sceneSDF(p*3.0,0.1)))/4.0+vec3(.4);\n}\n//Return the normalized direction to march in from the eye point for a single pixel\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 3.0;\n    float z = size.y / tan(radians(fieldOfView) / 3.0);\n    return normalize(vec3(xy, -z));\n}\n//Using the gradient of the SDF, estimate the normal on the surface at point p\nvec3 estimateNormal(vec3 p) {\n    //surface color for bump mapping\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n//Lighting contribution of a single point light source via Phong illumination\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    lightPos = eye;\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.1) {\n        //Light not visible from this point on the surface\n        return vec3(0.1, 0.1, 0.1);\n    } \n    \n    if (dotRV < 0.1) {\n        //Light reflection in opposite direction as viewer, apply only diffuse component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n//Lighting via Phong illumination\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.6 * vec3(2.0, 2.0, 2.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(5.0,\n                          3.0,\n                          5.0);\n    vec3 light1Intensity = vec3(0.9);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);   \n    return color;\n}\n//Return a transform matrix that will transform a ray from view space to world coordinates, given the eye point, the camera target, and an up vector\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    //Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}