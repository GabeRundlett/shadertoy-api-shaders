{
    "Shader": {
        "info": {
            "date": "1503908920",
            "description": "work in progress...experimenting with growing images with feedback and some simple rules. Somewhat hindered by the difficulty of doing frame differencing on shadertoy\n\nImage resets every 1000 frames",
            "flags": 32,
            "hasliked": 0,
            "id": "4lXyRM",
            "likes": 16,
            "name": "crystaline growth",
            "published": 3,
            "tags": [
                "cells",
                "gameoflife",
                "cellularautomata",
                "crystal",
                "growth",
                "seeds"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 1488
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\t\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float punch = 0.1;\nconst float odds = 0.4;\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n    float fl = floor(p);\n    float fc = fract(p);\n    return mix(rand(fl), rand(fl + 1.0), fc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tc = fragCoord.xy / iResolution.xy;\n    \n    vec2 res = iResolution.xy;\n    float time = iTime*50.0;\n    vec2 offs = 1.0 / res;\n    \n    vec4 tex = texture(iChannel0, tc);\n    vec4 n = texture(iChannel0, tc + vec2(0.0,-offs.y) );\n    vec4 e = texture(iChannel0, tc + vec2(offs.x, 0.0) );\n    vec4 s = texture(iChannel0, tc + vec2(0.0, offs.y) );\n    vec4 w = texture(iChannel0, tc + vec2(-offs.x, 0.0) );\n    \n    vec4 ne = texture(iChannel0, tc + vec2(offs.x,-offs.y) );\n    vec4 nw = texture(iChannel0, tc + vec2(-offs.x, -offs.y) );\n    vec4 se = texture(iChannel0, tc + vec2(offs.x, offs.y) );\n    vec4 sw = texture(iChannel0, tc + vec2(-offs.x, offs.y) );\n\n\n    vec2 pos = tc * res;\n    float p = pos.y * res.x + pos.x;\n    p /= (res.x*res.y);\n\n    n = mix(vec4(0.0), n, floor(noise(1000.0+time*0.05 + tc.x*res.x*punch)+odds));\n    e = mix(vec4(0.0), e, floor(noise(123.0+time*0.05 + tc.y*res.y*punch)+odds));\n    s = mix(vec4(0.0), s, floor(noise(-78.0+time*0.05 + tc.x*res.x*punch)+odds));\n    w = mix(vec4(0.0), w, floor(noise(42.0+time*0.05 + tc.y*res.y*punch)+odds));\n    \n//    n = mix(vec4(0.0), n, floor(noise(1000.0+time*0.05 + p*punch)+odds));\n//    e = mix(vec4(0.0), e, floor(noise(123.0+time*0.05 + p*punch)+odds));\n//    s = mix(vec4(0.0), s, floor(noise(-78.0+time*0.05 + p*punch)+odds));\n//    w = mix(vec4(0.0), w, floor(noise(42.0+time*0.05 + p*punch)+odds));\n\n    ne = mix(vec4(0.0), ne, floor(noise(1000.0+time*0.05 + tc.x*res.x*punch+tc.y)+odds));\n    nw = mix(vec4(0.0), nw, floor(noise(123.0+time*0.05 + tc.y*res.y*punch+tc.x)+odds));\n    se = mix(vec4(0.0), se, floor(noise(-78.0+time*0.05 + tc.x*res.x*punch+tc.y)+odds));\n    sw = mix(vec4(0.0), sw, floor(noise(42.0+time*0.05 + tc.y*res.y*punch+tc.x)+odds));\n\n    \n    tex += (n + e + s + w);\n    tex += (ne + nw + se + sw);\n\n    if(iFrame < 1 || iFrame % 1500 == 0){\n        if(tc.x >0.49 && tc.x < 0.5 && tc.y > 0.49 && tc.y <0.5){\n            tex = vec4(1.0);\n        } else {\n            tex = vec4(0.0,0.0,0.0,1.0);\n        }\n    }\n    \n    fragColor = tex;\n    fragColor.a =1.0;\n  \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tc = fragCoord.xy / iResolution.xy;\n    \n    vec4 tex = texture(iChannel0, tc);\n    vec4 past = texture(iChannel1, tc);\n    \n    if(iFrame < 1 || iFrame % 1500 == 0){\n         if(tc.x >0.49 && tc.x < 0.5 && tc.y > 0.49 && tc.y <0.5){\n            fragColor = vec4(1.0);\n        } else {\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n        }\n    } else {\n        fragColor = abs(tex - past);\n    }\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float timeMod = 0.01;\nconst float amp = 0.8;\n\nfloat rand(vec2 co){\n     float a = 12.9898;\n     float b = 78.233;\n     float c = 43758.5453;\n     float dt= dot(co.xy ,vec2(a,b));\n     float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 tc = fragCoord.xy / iResolution.xy;\n\tvec2 res = iResolution.xy;\n    float time = iTime*20.0;\n    \n    vec4 diff = texture(iChannel0, tc);\n    vec4 draw = texture(iChannel1, tc);\n\n    if(diff.r >= 0.75){\n\n        vec2 offs = 1.0 / res;\n\n        vec4 n = texture(iChannel1, tc + vec2(0.0,-offs.y) )*amp;\n        vec4 e = texture(iChannel1, tc + vec2(offs.x, 0.0) )*amp;\n        vec4 s = texture(iChannel1, tc + vec2(0.0, offs.y) )*amp;\n        vec4 w = texture(iChannel1, tc + vec2(-offs.x, 0.0) )*amp;\n        \n\n        vec2 pos = tc * res;\n        float p = pos.y * res.x + pos.x;\n        p /= (res.x*res.y);\n\n        draw.r = sin(n.r + w.r + e.r + s.r + (noise(402.0 + tc *p  + time*timeMod*1.01)));\n        draw.g = sin(e.r + w.r + s.r + n.r + (noise(10.4 + tc *p  + time*timeMod*2.1)));\n        draw.b = sin(s.r + w.r + n.r + e.r + (noise(32.0 + tc *p  + time*timeMod)));\n    }\n    \n    //float mask = smoothstep(0.15,0.151,dot(draw.rgb, vec3(0.3333)));//, 1.0);//vec4(smoothstep(vec2(0.1),vec2(0.9),draw.rg), 0.5, 1.0) ;//*0.1;//vec4(abs(angle), 0.0, 1.0);\n    if(iFrame < 1 || iFrame % 1500 == 0){\n             if(tc.x >0.49 && tc.x < 0.5 && tc.y > 0.49 && tc.y <0.5){\n                fragColor = vec4(1.0);\n            } else {\n                fragColor = vec4(0.0,0.0,0.0,1.0);\n            }\n        } else {\n        fragColor = draw;\n        fragColor.a = 1.0;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}