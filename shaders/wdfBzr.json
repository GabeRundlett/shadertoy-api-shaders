{
    "Shader": {
        "info": {
            "date": "1587595334",
            "description": "Use noise functions to generate height fields and textures, based on the built Cornell Box scene: https://www.shadertoy.com/view/tdXfzn",
            "flags": 0,
            "hasliked": 0,
            "id": "wdfBzr",
            "likes": 1,
            "name": "Noise and UV Mapping Practice",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "giaosame",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "const vec4 FLOOR_VEC       = vec4(0.0, 1.0, 0.0, 2.5);\nconst vec4 LEFT_WALL_VEC   = vec4(1.0, 0.0, 0.0, 5.0);\nconst vec4 RIGHT_WALL_VEC  = vec4(-1.0, 0.0, 0.0, 5.0);\nconst vec4 BACK_WALL_VEC   = vec4(0.0, 0.0, -1.0, 5.0);\nconst vec4 CEILING_VEC     = vec4(0.0, -1.0, 0.0, 7.5);\nconst vec3 LONG_BOX_POS    = vec3(2.1, -0.5, -2);\nconst vec3 LONG_BOX_SCALE  = vec3(1.5, 3.0, 1.5);\nconst vec3 SPHERE_POS   = vec3(2.0, -1.0, -0.25);\n\nconst vec3 EYE_POS         = vec3(0.0, 5, -18.0);\nconst vec3 REF_POS         = vec3(0.0, 2.5, 0.0);\n\nconst int RAY_STEPS     = 256;\nconst int FLOOR_ID      = 0;\nconst int LEFT_WALL_ID  = 1;\nconst int RIGHT_WALL_ID = 2;\nconst int BACK_WALL_ID  = 3;\nconst int CEILING_ID    = 4;\nconst int LONG_BOX_ID   = 5;\nconst int SPHERE_ID  = 6;\nconst float PI_OVER_180 = 3.1415926 / 180.0;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nfloat plane(vec3 p, vec4 n)\n{\n  // n must be normalized\n  return dot(p, n.xyz) + n.w;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) \n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvec3 rotateX(vec3 p, float amt) \n{\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n\nvec2 sphereUV(vec3 center, float r, vec3 p)\n{\n    vec3 pDir = normalize(p - center);\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    float theta = acos(dot(pDir, worldUp));\n    \n    // If p is located at the positive part of z axis, then phi is 0-180.\n    // If p is located at the negative part of z axis, then phi is 180-360.\n    vec3 xzDir = normalize(vec3(pDir.x, 0.0, pDir.z));\n    float phi = acos(dot(xzDir, vec3(1.0, 0.0, 0.0)));\n    \n    if(pDir.z < 0.0)\n    {\n        phi = phi + 3.14159;\n    }\n    \n    return vec2(theta / 3.14159, phi / (2.0 * 3.14159));\n}\n\nvoid planeUVAxis(in vec3 p, in vec3 n, out vec3 u, out vec3 v)\n{\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    u = normalize(cross(worldUp, n));\n    v = normalize(cross(n, u));\n}\n\nvec2 planeUV(vec3 origin, vec3 n, vec3 p)\n{\n    vec3 uAxis;\n    vec3 vAxis;\n    planeUVAxis(origin, n, uAxis, vAxis);\n    \n    vec3 diff = p - origin;\n    float uVal = dot(diff, uAxis);\n    float vVal = dot(diff, vAxis);\n    \n    return vec2(uVal, vVal);\n}\n\nfloat hash(float x)\n{\n    return fract(sin(x * 97.79) * 653.767);\n}\n\nvec2 hash2(vec2 p)\n{\n    return vec2(hash(p.x * 27.79 - 300.0 + p.y * 34.35), hash(p.x * 56.3 + 256.0 + p.y * 89.37));\n}\n\n// Modify color to the burning fire color\nvec3 cosinePalette2(float t)\n{\n    const vec3 a = vec3(0.5, 0.5, 0.5);\n\tconst vec3 b = vec3(0.5, 0.5, 0.5);\n\tconst vec3 c = vec3(1.0, 1.0, 1.0);\n\tconst vec3 d = vec3(0.0, 0.33, 0.67);\n    return clamp(a + b * cos(2.0 * 3.14159 * (c * t + d)), 0.0, 1.0);\n}\n\nvec3 cosinePalette(float t)\n{\n    const vec3 a = vec3(0.5, 0.5, 0.4);\n\tconst vec3 b = vec3(0.5, 0.5, 0.43);\n\tconst vec3 c = vec3(0.46, 0.57, 0.4);\n\tconst vec3 d = vec3(0.63, 0.4233, -1.573);\n    return clamp(a + b * cos(2.0 * 3.14159 * (c * t + d)), 0.0, 1.0);\n}\n\nfloat random1(vec3 p) \n{\n    return fract(sin(dot(p, vec3(127.1, 311.7, 191.999))) * 43758.5453);\n}\n\nfloat random1(vec2 p)\n{\n  \treturn fract(sin(dot(p, vec2(456.789, 20487145.123))) * 842478.5453);\n}\n\nvec2 random2(vec2 p)\n{\n    return fract(sin(vec2(dot(p, vec2(271.11, 717.7)),\n                          dot(p, vec2(692.5, 83.31))))\n                 * 35789.537);\n}\n\nvec3 random3( vec3 p )\n{\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n// Worley-noise function to make the Mario twisted and warped\nfloat worley(float x, float y, float multiple)\n{\n    vec2 uv = vec2(x, y);\n    uv *= multiple;\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n\n    float minDist = 1.0;\n    for(int y = -1; y <= 1; ++y)\n    {\n        for(int x = -1; x <= 1; ++x)\n        {\n            vec2 neighbor = vec2(float(x), float(y));\n            vec2 point = (vec2(1.0) + cos(random2(uvInt + neighbor) * 7.987 + iTime / 180.0)) / 2.0;\n            vec2 diff = neighbor + point - uvFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist / multiple;\n}\n\n// Worley-noise function to generate the burning fire effect\nfloat worleyFire1(vec2 c, float time)\n{\n    float dis = 1.0;\n    for(int x = -1; x <= 1; x++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            vec2 p = floor(c) + vec2(x, y);\n            vec2 a = hash2(p) * time;\n            vec2 rnd = 0.5 + sin(a) * 0.5;\n            float d = length(rnd + vec2(x, y) - fract(c));\n            dis = min(dis, d);\n        }\n    }\n\n    return dis;\n}\n\n// Worley-noise function to generate the burning fire effect\nfloat worleyFire2(vec2 c, float time)\n{\n    float w = 0.0;\n    float a = 0.5;\n    for (int i = 0; i<5; i++)\n    {\n        w += worleyFire1(c, time) * a;\n        c *= 2.0;\n        time *= 2.0;\n        a *= 0.5;\n    }\n    return w;\n}\n\n// from https://www.shadertoy.com/view/3sjGz3\nfloat mySmootherStep(float a, float b, float t)\n{\n  \tt = t * t * t * (t * (t * 6.18 - 18.0) + 12.0);\n  \treturn mix(a, b, t);\n}\n\n// from https://www.shadertoy.com/view/3sjGz3\nfloat interpNoise2D(vec2 uv) \n{\n    vec2 uvFract = fract(uv);\n    float ll = random1(floor(uv));\n    float lr = random1(floor(uv) + vec2(1,0));\n    float ul = random1(floor(uv) + vec2(0,1));\n    float ur = random1(floor(uv) + vec2(1,1));\n\n    float lerpXL = mySmootherStep(ll, lr, uvFract.x);\n    float lerpXU = mySmootherStep(ul, ur, uvFract.x);\n\n    return mySmootherStep(lerpXL, lerpXU, uvFract.y);\n}\n\nfloat fbm(vec2 uv) \n{\n    float amp = 0.5;\n    float freq = 8.0;\n    float sum = 0.0;\n    for(int i = 0; i < 4; i++) \n    {\n        sum += interpNoise2D(uv * freq) * amp;\n        amp *= 0.5;\n        freq *= 2.0;\n    }\n    \n    return sum;\n}\n\nfloat surflet3D(vec3 p, vec3 gridPoint)\n{\n    vec3 t3 = abs(p - gridPoint);\n    \n    float tX = 1.f - 6.f * pow(t3.x, 5.f) - 15.f * pow(t3.x, 4.f) + 10.f * pow(t3.x, 3.f);\n    float tY = 1.f - 6.f * pow(t3.y, 5.f) - 15.f * pow(t3.y, 4.f) + 10.f * pow(t3.y, 3.f);\n    float tZ = 1.f - 6.f * pow(t3.z, 5.f) - 15.f * pow(t3.z, 4.f) + 10.f * pow(t3.z, 3.f);\n    \n    vec3 t = vec3(tX, tY, tZ);\n    \n    vec3 gradient = random3(gridPoint);\n    vec3 diff = p - gridPoint;\n    float height = dot(diff, gradient);\n    return height * t.x * t.y * t.z;\n}\n\nfloat PerlinNoise3D(vec3 p)\n{\n    float surfletSum = 0.0;\n    vec3 pXLYLZL = floor(p);\n    \n    for(int dx = 0; dx <= 1; ++dx)\n    {\n        for(int dy = 0; dy <= 1; ++dy)\n        {\n            for(int dz = 0; dz <= 1; ++dz)\n            {\n                surfletSum += surflet3D(p, pXLYLZL + vec3(dx, dy, dz));\n            }\n        }\n    }\n    \n    return surfletSum;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int objId, vec3 lightPos)\n{\n    // floor\n    t = plane(pos, FLOOR_VEC);  \n    objId = FLOOR_ID;  \n\n    float t2;\n    if((t2 = plane(pos, LEFT_WALL_VEC)) < t)  \n    {\n        t= t2;\n        objId = LEFT_WALL_ID;\n    } \n    if((t2 = plane(pos, RIGHT_WALL_VEC)) < t)  \n    {\n        t= t2;\n        objId = RIGHT_WALL_ID;\n    }\n    if((t2 = plane(pos, BACK_WALL_VEC)) < t)\n    {\n        t= t2;\n        objId = BACK_WALL_ID;\n    }\n    if((t2 = plane(pos, CEILING_VEC)) < t)\n    {\n        t= t2;\n        objId = CEILING_ID;\n    }\n    if((t2 = box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE)) < t)  // long bix\n    {\n        t= t2;\n        objId = LONG_BOX_ID;\n    }\n    if((t2 = sphere(pos, 1.5, SPHERE_POS)) < t)\n    {\n        t= t2;\n        objId = SPHERE_ID;\n    }\n}\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = plane(pos, FLOOR_VEC);\n    t = min(t, plane(pos, LEFT_WALL_VEC));\n    t = min(t, plane(pos, RIGHT_WALL_VEC));\n    t = min(t, plane(pos, BACK_WALL_VEC));\n    t = min(t, plane(pos, CEILING_VEC));\n    t = min(t, box(rotateY(pos + LONG_BOX_POS, 27.5 * PI_OVER_180), LONG_BOX_SCALE));\n    t = min(t, sphere(pos, 1.5, SPHERE_POS));\n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int objId, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, objId, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n\n    t = -1.0;\n    objId = -1;\n}\n\nvec3 computeMaterial(int objId, vec3 p, vec3 n, vec3 light, vec3 view)\n{\n    float lambert = dot(light, n);\n\n    switch(objId) \n    {\n    case FLOOR_ID:  // floor\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case LEFT_WALL_ID:  // Left wall, which is a large red plane\n        return vec3(0.63, 0.065, 0.05) * lambert;\n        break;\n    case RIGHT_WALL_ID:  // Right wall, which is a large green plane\n        return vec3(0.14, 0.45, 0.091) * lambert;\n        break;\n    case BACK_WALL_ID:  // Back wall, which is a large white plane\n    {\n        vec3 normal = vec3(0.0, 0.0, 1.0);\n        vec2 backUV = planeUV(normal * 5.0, normal, p);\n        \n        float m = 5.0;\n    \tfloat x = backUV.x;\n    \tfloat y = backUV.y;\n        vec2 gradient = vec2(0.0);\n        float delta = 1.0;\n    \tgradient.x = worley(x + delta, y, m) - worley(x - delta, y, m);\n    \tgradient.y = worley(x, y + delta, m) - worley(x, y - delta, m);\n        \n        backUV += gradient;\n        float r = 0.48;\n        float dis = worleyFire2(backUV * iResolution.xy / 160.0, iTime * 5.0);\n        vec3 fire = mix(vec3(1.0, 0.95, 0.5), vec3(0.8, 0.0, 0.0), dis);\n           \n        vec3 color = cosinePalette(r) * 0.618 + fire * 0.75;\n        return color * lambert;\n        break;\n    }\n    case CEILING_ID:  // Ceiling, which is a large white plane\n        return vec3(1.0, 1.0, 1.0) * lambert;\n        break;\n    case LONG_BOX_ID:  // Cuboid, the long box\n    {\n        vec3 noisePos = vec3(p.x + sin(iTime), p.y + cos(iTime), p.z + cos(iTime));\n        float perlin = PerlinNoise3D(noisePos);\n        return 1.8 * cosinePalette(perlin) * lambert;\n        break;\n    }\n    case SPHERE_ID:  // Sphere\n    {\n        vec2 sphereUV = sphereUV(vec3(2.0, 0.0, 1.0), 1.0, p);        \n        sphereUV.x = (sphereUV.x + cos(iTime * 0.5) + 4.25) / 2.97;\n        sphereUV.y = (sphereUV.y + sin(iTime * 0.14) + 1.25) / 1.48;      \n        \n        float fbmCol = fbm(sphereUV);\n        vec3 color = cosinePalette2(fbmCol) * 1.2 + vec3(0.12);\n        return color * lambert;\n        break;\n    }        \n    default:\n        return vec3(0.0);\n        break;\n    }\n\n    return vec3(1.0);\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                          sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                          sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int objId;\n    march(eye, dir, t, objId, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(objId, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, objId);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    eye = EYE_POS;\n    ref = REF_POS;\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * float(iResolution.x) / float(iResolution.y);\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3(0.0, 7.3, -1.0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n\n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    Intersection intersection = sdf3D(dir, eye, lightPos);\n\n    // Output to screen\n    fragColor = vec4(intersection.color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}