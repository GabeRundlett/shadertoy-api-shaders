{
    "Shader": {
        "info": {
            "date": "1672688112",
            "description": "Fills triangles with textures. Depth corrected.",
            "flags": 0,
            "hasliked": 0,
            "id": "mts3Wl",
            "likes": 0,
            "name": "Triangle filler 2d",
            "published": 3,
            "tags": [
                "triangles"
            ],
            "usePreview": 0,
            "username": "raymarchingenthusiast",
            "viewed": 171
        },
        "renderpass": [
            {
                "code": "struct Triangle {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};\n\nvec3 CalcUv(vec2 p, Triangle tpo, Triangle tuv) {\n    Triangle tp = Triangle(tpo.a/tpo.a.z,tpo.b/tpo.b.z,tpo.c/tpo.c.z);\n    float w1p1 = (tp.b.y-tp.c.y)*(p.x-tp.c.x)+(tp.c.x-tp.b.x)*(p.y-tp.c.y);\n    float w1p2 = (tp.b.y-tp.c.y)*(tp.a.x-tp.c.x)+(tp.c.x-tp.b.x)*(tp.a.y-tp.c.y);\n    float w1 = w1p1/w1p2;\n    \n    float w2p1 = (tp.c.y-tp.a.y)*(p.x-tp.c.x)+(tp.a.x-tp.c.x)*(p.y-tp.c.y);\n    float w2p2 = (tp.b.y-tp.c.y)*(tp.a.x-tp.c.x)+(tp.c.x-tp.b.x)*(tp.a.y-tp.c.y);\n    float w2 = w2p1/w2p2;\n    \n    float w3 = 1. - w1 - w2;\n    \n    vec3 perspUv = w1*tuv.a/tp.a.z + w2*tuv.b/tp.b.z + w3*tuv.c/tp.c.z;\n    float pz = (w1*tp.a.z + w2*tp.b.z + w3*tp.c.z);\n    return perspUv * pz;\n}\n\nbool isInside(vec2 p, Triangle triO) {\n    Triangle tri = Triangle(triO.a/triO.a.z,triO.b/triO.b.z,triO.c/triO.c.z);\n    float s = (tri.a.x-tri.c.x)*(p.y-tri.c.y)-(tri.a.y-tri.c.y)*(p.x-tri.c.x);\n    float t = (tri.b.x-tri.a.x)*(p.y-tri.a.y)-(tri.b.y-tri.a.y)*(p.x-tri.a.x);\n    \n    if((s<0.) != (t<0.) && s != 0. && t  != 0.) return false;\n    \n    float d = (tri.c.x-tri.b.x) * (p.y - tri.b.y) - (tri.c.y - tri.b.y) * (p.x - tri.b.x);\n    return d == 0. || (d<0.) == (s+t <= 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord + (iMouse.xy-iResolution.xy/2.)) / iResolution.xy;\n    if(iMouse.xy == vec2(0.)) uv = fragCoord / iResolution.xy;\n    \n    Triangle ts[2];\n    Triangle uvs[2];\n    \n    ts[0] = Triangle(vec3(0.,0.,1.),vec3(0.,1.,1.),vec3(1.,0.,1.));\n    uvs[0] = Triangle(vec3(0.,0.,1.),vec3(0.,1.,1.),vec3(1.,0.,1.));\n    ts[1] = Triangle(.5+.45*vec3(cos(iTime*.5),sin(iTime*2.),1.25),vec3(1.),vec3(0.,1.,1.));\n    uvs[1] = Triangle(vec3(1.,0.,1.),vec3(1.),vec3(0.,1.,1.));\n    \n    fragColor = vec4(0.,0.,.3,1.);\n    for(int i = 0; i < ts.length(); i++) {\n        if(isInside(uv,ts[i])) {\n            vec3 textureUv = CalcUv(uv,ts[i],uvs[i]);\n            \n            vec3 col = texelFetch(iChannel0,ivec2(textureUv.xy*iChannelResolution[0].xy)/2,1).xyz;\n        \n            fragColor = vec4(col,1.);\n            if(textureUv.x>1.||textureUv.x<0.||textureUv.y>1.||textureUv.y<0.) fragColor = vec4(.15,.15,3.,1.);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}