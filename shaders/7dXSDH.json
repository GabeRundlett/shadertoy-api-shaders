{
    "Shader": {
        "info": {
            "date": "1618564660",
            "description": "Loosely based on 1:8 scale model and simplified (since the original has almost 2400 parts)",
            "flags": 32,
            "hasliked": 0,
            "id": "7dXSDH",
            "likes": 16,
            "name": "Mercedes 500K",
            "published": 3,
            "tags": [
                "car",
                "classic"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 373
        },
        "renderpass": [
            {
                "code": "// \"Mercedes 500K\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (=0/1) optional antialiasing (can be slow)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCaps2Df (vec2 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrFlatCapsDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec3 sunDir, qHit, qTrHit, wlBase, carPos;\nvec2 wlRot;\nfloat tCur, dstFar, wlRad, strRot, carRot, dInt, dWarch, colCode;\nint idObj, idTrObj;\nbool isSh;\nconst int idBod = 1, idTyr = 2, idHub = 3, idDash = 4, idWarch = 5, idBase = 6, idExR = 7,\n   idExF = 8, idWscrn = 9, idSeat = 10, idStWhl = 11, idPlat = 12, idMLit = 13, idCLit = 14,\n   idSLit = 15, idRLit = 16, idAx = 17, idShin = 18, idLtSil = 19, idDkSil = 20;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = (id); }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = (id);  qHit = q;}\n#define DMINQTR(id) if (d < dMin) { dMin = d;  idTrObj = (id);  qTrHit = q;}\n\nfloat WheelDf (vec3 q, float dMin)\n{\n  float d;\n  d = max (PrRoundCylDf (q, wlRad - 0.05, 0.05, 0.15), 0.5 - length (q.xy));\n  DMINQ (idTyr);\n  d = min (PrCylDf (q, 0.5, 0.13), PrCylDf (q, 0.2, 0.17));\n  DMINQ (idHub);\n  return dMin;\n}\n\nfloat CarExDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  vec2 s;\n  float d, r, h, dw, t;\n  q = p;\n  d = PrCylDf (vec3 (q.x, abs (q.y) - 0.07, q.z - 2.7).yzx, 0.04, 1.55);\n  DMIN (idAx);\n  d = PrCylDf (vec3 (abs (abs (q.x) - 1.11) - 0.19, q.y, q.z - 2.7).xzy, 0.06, 0.11);\n  DMIN (idAx);\n  d = PrCylDf (vec3 (q.xy, q.z + 2.7).yzx, 0.1, 1.55);\n  DMIN (idAx);\n  q = p;\n  q.xz = abs (q.xz) - wlBase.xz;\n  qq = q;\n  qq.xz = (p.z > 0.) ? Rot2D (qq.xz, - strRot * sign (p.x)) : qq.xz;\n  qq.yz = Rot2D (qq.yz, - ((p.x < 0.) ? wlRot.x : wlRot.y) * sign (p.z));\n  dMin = WheelDf (qq.zyx, dMin);\n  q.x -= -0.1;\n  r = 0.8;\n  r *= (1. + 0.5 * smoothstep (0., 0.3 * r, q.z) * smoothstep (r, -0.2 * r, q.y));\n  h = (p.z > 0.) ? 0.1 * (q.z + 0.4) : 0.;\n  dWarch = PrFlatCapsDf (vec3 (q.x + h, q.yz).yzx, r, 0.35 * (1. - 0.2 * q.z) + 1.1 * h);\n  d = max (max (abs (dWarch) - 0.02, -0.21 - q.y), min (0.9 - length (q.yz), q.x));\n  if (p.z > 0.) d = SmoothMax (d, - max (0.52 - length (vec2 (q.x + 0.15, 0.5 - q.z)), 0.4 - q.z), 0.02);\n  d *= 0.7;\n  DMINQ (idWarch);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (0.7, -3.5), 0.68 * pi);\n  dw = PrCylDf (q, wlRad + 0.01, 0.15);\n  dMin = WheelDf (q, dMin);\n  q.z -= 0.18;\n  d = min (PrSphDf (q, 0.08), PrCylDf ((q - vec3 (0., 0.12, 0.04)).xzy, 0.03, 0.12));\n  DMIN (idDkSil);\n  q = p;\n  qq = q;\n  qq.z -= -0.5;\n  dInt = PrRoundBoxDf (vec3 (qq.x, qq.y - 0.8, qq.z), vec3 (vec2 (0.85, 1.2) -\n     vec2 (0.03, 0.05) * qq.zx * qq.zx, 0.8).xzy, 0.1);\n  qq.z -= -0.1;\n  h = 0.8 * (1. - smoothstep (0.4, 1.4, - qq.z / 3.5));\n  qq.y -= -0.2 + h;\n  r = 0.3 * (1. + 0.3 * (qq.z - 2.) * (qq.z - 2.) * step (2., qq.z));\n  d = PrRoundBoxDf (qq, vec3 (1.1 - ((qq.z > 0.) ? 0.035 : 0.005) * qq.z * qq.z - r, h - r, 3.5), r);\n  d = SmoothMax (max (d, qq.z - 3.8 + 0.4 * qq.x * qq.x), - dInt, 0.05);\n  qq.y -= -0.8;\n  d = min (d, max (max (length (qq.xy) - 0.15, - qq.y), dInt));\n  d = 0.7 * SmoothMax (max (d, - dWarch), - dw, 0.05);\n  DMINQ (idBod);\n  q = p;\n  q.yz -= vec2 (-0.18, -0.2);\n  d = PrRoundBoxDf (q, vec3 (1.4, 0.01, 3.71), 0.02);\n  d = max (SmoothMin (d, max (PrCylDf (vec3 (q.x, q.y + 0.2, q.z - 2.9).yzx, 0.5, 1.4), 0.03 -\n     q.y), 0.03), - dWarch);\n  DMINQ (idBase);\n  q = p;\n  q -= vec3 (-0.8, 0.4, 1.4);\n  s = sin (-0.1 * pi + vec2 (0.5 * pi, 0.));\n  q.yz = Rot2Cs (q.yz, s);\n  s = Rot2Cs (vec2 (0., 0.15), s);\n  d = PrTorusBxDf (vec3 (q.x, q.y - s.x * sign (q.z), abs (q.z) - s.y), vec3 (0.1, 0.25, 0.2), 0.08);\n  DMINQ (idExF);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (1.6, 0.8), 0.15 * pi);\n  q.z -= -0.05 * abs (q.x);\n  d = PrRoundBoxDf (q, vec3 (0.95, 0.4, 0.005), 0.015);\n  d = 0.9 * max (d, - PrRoundBox2Df (vec2 (abs (q.x), q.y) - vec2 (0.45, 0.1), vec2 (0.4, 0.24), 0.02));\n  DMIN (idWscrn);\n  q.x = abs (q.x);\n  d = PrCylDf ((q - vec3 (0.3, -0.18, 0.03)).yzx, 0.02, 0.2);\n  DMIN (idLtSil);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.7, -0.25, -3.);\n  d = max (abs (PrCapsDf (q, 0.06, 1.4)) - 0.02, -1.4 - q.z);\n  DMINQ (idExR);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (1., 1.05, 0.3);\n  d = PrTorusBxDf (q.xzy, vec3 (0.08, 0.1, 0.03), 0.02);\n  DMIN (idShin);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (1.05, 1.4, 0.85);\n  d = max (PrSphDf (q, 0.1), q.z - 0.05);\n  DMINQ (idSLit);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (1.3, 1.2, 2.9);\n  d = max (max (PrSphDf (q, 0.1), q.z - 0.05), - dWarch);\n  DMINQ (idSLit);\n  q = p;\n  q.yz -= vec2 (0.6, 3.4);\n  d = max (PrCylDf (q.yzx, 0.02, 1.2), - dWarch);\n  DMIN (idShin);\n  q.y -= 0.14;\n  d = max (PrSphDf (q, 0.14), q.z - 0.04);\n  DMINQ (idCLit);\n  q.x = abs (q.x);\n  q.xy -= vec2 (0.55, 0.11);\n  d = SmoothMax (abs (PrSphDf (q, 0.24)) - 0.01, q.z - 0.08, 0.01);\n  DMINQ (idMLit);\n  q.xy -= vec2 (-0.3, -0.3);\n  t = q.z + 0.2;\n  d = PrCylAnDf (q, 0.03 * (1. + 10. * t * t), 0.01, 0.2);\n  q.z -= -0.18;\n  d = min (d, PrCylDf (q, 0.08, 0.015));\n  DMIN (idShin);\n  q = p;\n  q.x = abs (q.x);\n  q.xz -= vec2 (0.5, -4.37);\n  d = PrCylDf (q, 0.07, 0.03);\n  DMINQ (idRLit);\n  q = p;\n  q.yz -= vec2 (1.5, 2.95);\n  d = PrSphDf (q, 0.11);\n  if (d < 0.05) {\n    d = PrTorusDf (q, 0.016, 0.1);\n    q.xy = Rot2D (q.xy, - pi / 6.);\n    q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n    q.x += 0.05;\n    d = min (d, PrCylDf (q.yzx, 0.016, 0.05));\n    DMIN (idShin);\n  } else dMin = min (dMin, d);\n  q = p;\n  q.z = abs (q.z + 0.41);\n  q.yz -= vec2 (((p.z > 0.) ? -0.25 : -0.1), 3.96);\n  d = PrRoundBoxDf (q, vec3 (0.3, 0.13, 0.01), 0.01);\n  DMINQ (idPlat);\n  return dMin;\n}\n\nfloat CarInDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 s;\n  float d, t;\n  q = p;\n  q.yz -= vec2 (0.3, -0.1);\n  d = PrRoundBoxDf (q, vec3 (0.85, 0.07, 0.3), 0.05);\n  q.yz = Rot2D (q.yz - vec2 (0.5, -0.4), 0.57 * pi);\n  d = min (d, PrRoundBoxDf (q, vec3 (0.85, 0.07, 0.5), 0.05));\n  d = SmoothMax (d, 0.03 - abs (q.x + 0.05), 0.05);\n  DMINQ (idSeat);\n  q = p;\n  q.yz -= vec2 (0.3, -1.15);\n  d = PrRoundBoxDf (q, vec3 (0.8, 0.07, 0.3), 0.05);\n  q.yz = Rot2D (q.yz - vec2 (0.5, -0.4), 0.57 * pi);\n  d = min (d, PrRoundBoxDf (q, vec3 (0.8, 0.07, 0.5), 0.05));\n  DMINQ (idSeat);\n  q = p;\n  t = 0.05 * q.x * q.x;\n  q.yz -= vec2 (1.1 - t, 0.8);\n  d = 0.7 * max (max (PrRoundBox2Df (q.yz, vec2 (0.25 * (1. - t), 0.12), 0.02),\n     - PrCylDf (vec3 (abs (q.x - 0.42) - 0.25, q.y, q.z + 0.12), 0.17, 0.03)), dInt);\n  DMINQ (idDash);\n  q = p;\n  q -= vec3 (0.42, 1.1, 0.35);\n  q.yz = Rot2D (q.yz, -0.15 * pi);\n  d = PrTorusDf (q, 0.02, 0.33);\n  DMIN (idLtSil);\n  d = PrCylDf (q, 0.1, 0.02);\n  DMINQ (idStWhl);\n  s = q.xy;\n  q.xy = Rot2D (q.xy, 0.25 * pi - 8. * strRot);\n  q.xy = (abs (q.x) < abs (q.y)) ? q.xy : q.yx;\n  q.y = abs (q.y) - 0.17;\n  d = PrCylDf (q.xzy, 0.015, 0.17);\n  q.xy = s;\n  q.z -= 0.5;\n  d = min (d, PrCylDf (q, 0.03, 0.5));\n  DMIN (idDkSil);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (0.2, 0.45), 0.1 * pi);\n  d = PrCylDf (q.xzy, 0.025, 0.4);\n  DMIN (idDkSil);\n  q.y -= 0.4;\n  d = PrSphDf (q, 0.06);\n  DMIN (idLtSil);\n  q = p;\n  q -= vec3 (0.42, 0., 0.65);\n  q.x = (q.x > 0.) ? abs (q.x - 0.25) - 0.08 : q.x + 0.2;\n  q.yz = Rot2D (q.yz, 0.1 * pi);\n  d = PrRoundBoxDf (q, vec3 (0.03, 0.02, 0.1), 0.02);\n  DMIN (idDkSil);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z);\n  d = PrRoundBoxDf (p - vec3 (0., 0.6, 0.), vec3 (2., 1.4, 4.5), 0.01);\n  if (isSh || d < 0.1) {\n    dMin = CarExDf (p, dstFar);\n    if (dInt < 0.1) dMin = CarInDf (p, dMin);\n    else dMin = min (dMin, dInt);\n  } else dMin = d;\n  return dMin;\n}\n\nfloat ObjDfShEx (vec3 p)\n{\n  float dMin;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z);\n  dMin = CarExDf (p, dstFar);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  p.xz = Rot2D (p.xz, carRot);\n  p.yz -= vec2 (carPos.y, wlBase.z);\n  q = p;\n  q.yz = Rot2D (q.yz - vec2 (1.6, 0.8), 0.15 * pi);\n  q.z -= -0.05 * abs (q.x);\n  d = 0.9 * PrBoxDf (q, vec3 (0.95, 0.4, 0.01));\n  DMINQTR (idWscrn);\n  q = p;\n  q.x = abs (q.x);\n  q -= vec3 (0.55, 0.83, 3.42);\n  d = PrCylDf (q, 0.24, 0.02);\n  DMINQTR (idMLit);\n  return dMin;\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    p = ro + dHit * rd;\n    d = TrObjDf (p);\n    if (d < 0.0002 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjSShadowEx (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDfShEx (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat PlateCol (vec2 s)\n{\n  float d;\n  if (s.x < -0.55) {\n    s.x += 1.3;\n    d = min (PrBox2Df (s, vec2 (0.06, 0.6)), max (abs (PrCaps2Df (s.yx, 0.55, 0.1)) - 0.06, - s.x));\n  } else if (s.x < 0.65) {\n    d = min (PrBox2Df (s, vec2 (0.06, 0.6)), max (abs (PrCaps2Df ((s - vec2 (0.07, 0.3)).yx,\n       0.25, 0.2)) - 0.06, - s.x));\n    s -= vec2 (0.3, -0.3);\n    d = min (d, max (PrBox2Df (Rot2D (s, - pi / 5.), vec2 (0.06, 0.4)), -0.3 - s.y));\n  } else {\n    d = PrBox2Df (vec2 (abs (s.x - 1.4) - 0.2, s.y), vec2 (0.06, 0.6));\n  }\n  return d;\n}\n\nfloat MSymCol (vec2 s)\n{\n  return min (abs (length (s) - 0.1) - 0.02, PrBox2Df (Rot2D (s, 2. * pi *\n     floor (3. * atan (s.y, - s.x) / (2. * pi) + 0.5) / 3.) + vec2 (0.05, 0.), vec2 (0.05, 0.02)));\n}\n\nvec4 CarCol (out vec2 vf, out float refFac)\n{\n  vec4 col4, col4B, col4Ls, col4Ds, col4Uh, col4Ly, col4HiRf;\n  vec2 s;\n  float t;\n  bool loRf;\n  col4B = vec4 (0.5, 0., 0., 0.2);\n  if (colCode > 0.) col4B.rgb = (colCode == 2.) ? col4B.grb : col4B.bgr;\n  col4Ls = vec4 (0.9, 0.9, 0.9, 0.2);\n  col4Ds = vec4 (0.4, 0.4, 0.4, 0.2);\n  col4Uh = vec4 (0.5, 0.3, 0.1, 0.05);\n  col4Ly = vec4 (0.9, 0.9, 0.8, 0.2);\n  col4HiRf = vec4 (0.9, 0.9, 0.9, 0.);\n  vf = vec2 (0.);\n  loRf = false;\n  if (idObj <= idDash) {\n    if (idObj == idBod) {\n      if (dInt < 0.03) {\n        col4 = 0.7 * col4Uh;\n        loRf = false;\n        vf = vec2 (64., 0.5);\n      } else {\n        col4 = col4B;\n        loRf = true;\n      }\n      if (qHit.z > 2.905) {\n        col4 = col4HiRf;\n        if (PrRoundBox2Df (vec2 (abs (qHit.x) - 0.28, qHit.y - 0.6), vec2 (0.05, 0.4), 0.15) < 0.) {\n          col4 *= 0.7;\n          vf = vec2 (64., 0.5);\n        }\n        if (length (qHit.xy + vec2 (0., 0.07)) < 0.04) col4 *= 0.3;\n      } else if (abs (qHit.z + 0.1 * qHit.y - 2.) < 0.8 && abs (abs (qHit.y - 0.7) - 0.15) < 0.07) {\n        col4 = col4Ds;\n        loRf = false;\n        vf = vec2 (64., 0.5);\n      } else if (qHit.y > 0.) {\n        t = (0.4 + 0.6 * smoothstep (0.005, 0.015, abs (PrRoundBox2Df (vec2 (qHit.y - 1.,\n           qHit.z + 0.07 * qHit.y + 0.35), vec2 (0.7, 0.9 - 0.07 * qHit.y), 0.2)))) *\n           (0.7 + 0.3 * smoothstep (0.005, 0.015, abs (PrRoundBox2Df (vec2 (qHit.y - 1.1,\n           qHit.z - 1.95), vec2 (0.85, 0.92), 0.02))));\n        if (abs (qHit.z - 1.95) < 0.93) t *= 0.7 + 0.3 * smoothstep (0.005, 0.015, abs (qHit.x));\n        col4 *= t;\n        if (t < 1.) loRf = false;\n        if (abs (qHit.x) > 0.95) {\n          t = PrRoundBox2Df (vec2 (abs (qHit.y - 0.7) - 0.25, qHit.z + 1.45), vec2 (0.1, 0.01), 0.01);\n          col4 = mix (col4Ds, col4, smoothstep (0., 0.01, t));\n          if (t < 0.) loRf = false;\n        }\n      }\n      if (qHit.z < -1.8) col4 = mix (col4HiRf, col4, smoothstep (0., 0.02,\n         PrRoundBox2Df (vec2 (abs (qHit.x) - 0.8, qHit.z + 2.5), vec2 (0.01, 0.6), 0.02)));\n    } else if (idObj == idTyr) {\n      t = length (qHit.xy);\n      if (t < 0.53) {\n        col4 = col4Ls * (0.5 + 0.5 * step (0., qHit.z));\n      } else {\n        col4 = vec4 (0.15, 0.15, 0.15, 0.);\n        if (t > 0.75) col4 *= 0.5 + 0.5 * abs (step (0., cos (32. * pi * qHit.z)) -\n           step (0.5, mod (64. * atan (qHit.y, - qHit.x) / (2. * pi) + 0.5, 1.)));\n      }\n    } else if (idObj == idHub) {\n      t = length (qHit.xy);\n      col4 = mix (col4Ds, col4HiRf, smoothstep (0., 0.002, abs (t - 0.17) - 0.01));\n      if (qHit.z > 0.) {\n        if (t < 0.15) col4 = mix (col4Ds, col4, smoothstep (0., 0.005, MSymCol (qHit.xy)));\n      } else col4 *= 0.3;\n      if (abs (t - 0.36) < 0.15) {\n        t = 1.;\n        for (float f = -1.; f <= 1.; f += 2.) {\n          s = Rot2D (qHit.xy, f * pi / 24.);\n          t = min (t, smoothstep (0.008, 0.01, abs (abs (dot (s, sin (2. * pi *\n             floor (12. * atan (s.y, - s.x) / (2. * pi) + 0.5) / 12. +\n             vec2 (0., 0.5 * pi)))) - 0.04)));\n        }\n        col4 = mix (col4Ls, 0.5 * col4B, t) * (0.5 + 0.5 * step (0., qHit.z));\n      }\n    } else if (idObj == idDash) {\n      col4 = mix (col4B, 0.8 * col4Uh, smoothstep (0.015, 0.02, abs (abs (qHit.y) - 0.2)));\n      col4 = mix (col4B, col4, smoothstep (0.015, 0.02, abs (PrRoundBox2Df (vec2 (qHit.x + 0.4,\n         qHit.y), vec2 (0.2, 0.1), 0.03))));\n      if (qHit.y > 0.22) {\n        vf = vec2 (64., 0.5);\n      } else {\n        s = vec2 (abs (qHit.x - 0.42) - 0.25, qHit.y);\n        t = length (s);\n        if (t < 0.15) {\n          col4 = vec4 (1., 1., 1., 0.1);\n          if (t > 0.13) col4 *= 0.2;\n          else {\n            if (t > 0.08) col4 *= 0.2 + 0.8 * smoothstep (0.2, 0.25,\n               mod (8. * atan (s.y, - s.x) / (2. * pi), 1.));\n            if (s.y > -0.02) col4 *= 0.2 + 0.8 * smoothstep (0.012, 0.015, abs (s.x));\n          }\n        }\n      }\n    }\n  } else if (idObj <= idPlat) {\n    if (idObj == idWarch) {\n      col4 = col4B * (0.5 + 0.5 * step (0., dWarch));\n      loRf = (dWarch > 0. && (qHit.x > -0.3 || qHit.y > 0.5));\n    } else if (idObj == idBase) {\n      col4 = col4B * (0.9 + 0.1 * step (0., qHit.y) * (cos (64. * qHit.x) - 1.) *\n         step (abs (qHit.z), 2.));\n    } else if (idObj == idExR) {\n      col4 = (qHit.z < - 1.2) ? col4HiRf : col4Ds;\n      if (qHit.z < 1.3) col4 *= 0.1 + 0.9 * step (0.07, length (qHit.xy));\n    } else if (idObj == idExF) {\n      col4 = mix (col4Ds, col4HiRf, step (-0.4, sin (48. * atan (qHit.y, - qHit.x))));\n    } else if (idObj == idWscrn) {\n      col4 = col4HiRf;\n    } else if (idObj == idSeat) {\n      col4 = col4Uh * (0.95 + 0.05 * cos (64. * qHit.x));\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idStWhl) {\n      col4 = mix (col4Ds, col4Ls, smoothstep (0., 0.004, MSymCol (Rot2D (1.5 * qHit.xy,\n         - pi / 6. - 8. * strRot))));\n    } else if (idObj == idPlat) {\n      col4 = mix (0.5 * col4B, vec4 (0.7, 0.7, 0.2, 0.2), step (0., qHit.z) * \n         (1. - smoothstep (0.02, 0.03, PlateCol (7. * qHit.xy))));\n    }\n  } else {\n    if (idObj == idMLit) {\n      col4 = mix (col4Ds, col4HiRf, smoothstep (0.01, 0.02, abs (qHit.z - 0.05)));\n      if (length (qHit) < 0.24 && qHit.z < -0.22) col4 = col4Ds;\n    } else if (idObj == idCLit) {\n      col4 = col4HiRf;\n      t = length (qHit.xy);\n      if (qHit.z > 0. && t < 0.12) {\n        col4 = col4Ly * (0.9 + 0.1 * cos (256. * t));\n        loRf = true;\n      }\n    } else if (idObj == idSLit) {\n      col4 = (qHit.z > 0. && length (qHit.xy) < 0.08) ? col4Ly : col4HiRf;\n    } else if (idObj == idRLit) {\n      col4 = (qHit.z < 0. && length (qHit.xy) < 0.05) ? vec4 (1., 0., 0., 0.2) : col4HiRf;\n    } else if (idObj == idAx) {\n      col4 = 0.7 * col4Ds;\n    } else if (idObj == idShin) {\n      col4 = col4HiRf;\n    } else if (idObj == idLtSil) {\n      col4 = col4Ls;\n    } else if (idObj == idDkSil) {\n      col4 = col4Ds;\n    }\n  }\n  refFac = 0.;\n  if (col4 == col4HiRf) refFac = 0.9;\n  else if (loRf) refFac = 0.15;\n  return col4;\n}\n\nfloat RippleHt (vec2 p)\n{\n  vec2 q;\n  float s1, s2;\n  q = Rot2D (p, -0.02 * pi) * vec2 (0.5, 1.);\n  s1 = abs (sin (4. * pi * abs (q.y + 1.5 * Fbm2 (0.7 * q))));\n  s1 = (1. - s1) * (s1 + sqrt (1. - s1 * s1));\n  q = Rot2D (p, 0.01 * pi) * vec2 (0.5, 1.);\n  s2 = abs (sin (3.1 * pi * abs (q.y + 1.9 * Fbm2 (0.5 * q))));\n  s2 = (1. - s2) * (s2 + sqrt (1. - s2 * s2));\n  return 1.2 * mix (s1, s2, 0.1 + 0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * p)));\n}\n\nvec3 RippleNorm (vec2 p, vec3 vn, float f)\n{\n  vec2 e;\n  float h;\n  e = vec2 (0.002, 0.);\n  h = RippleHt (p);\n  vn.xy = Rot2D (vn.xy, f * (RippleHt (p + e) - h));\n  vn.zy = Rot2D (vn.zy, f * (RippleHt (p + e.yx) - h));\n  return vn;\n}\n\nvec3 GrndCol (vec3 ro, vec3 rd, float dstGrnd, float sh)\n{\n  vec3 col, vn;\n  vec2 vf;\n  float f, ff;\n  vn = vec3 (0., 1., 0.);\n  vf = vec2 (0.);\n  ff = 1. - smoothstep (0.3, 0.6, dstGrnd / dstFar);\n  ro.x += 4.;\n  if (abs (ro.x) < 8.) {\n    f = smoothstep (0.395, 0.4, mod (0.2 * ro.z, 1.) * (1. - smoothstep (0.13, 0.15,\n       abs (abs (ro.x) - 7.6))));\n    vf = vec2 (16., 2. * (1. - 0.9 * f));\n    col = mix (vec3 (0.2) * (0.5 + 0.5 * Fbm2 (64. * ro.xz)), vec3 (0.8), f);\n  } else {\n    vn = RippleNorm (ro.zx, vn, 4. * ff);\n    vf = vec2 (4., 1.);\n    col = 0.6 * mix (vec3 (1., 0.8, 0.5), vec3 (0.9, 0.7, 0.5), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (4. * ro.xz)));\n  }\n  if (vf.x > 0. && ff > 0.) vn = VaryNf (vf.x * ro, vn, vf.y * ff);\n  col *= 0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.);\n  return col;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, col, colR, vn;\n  vec2 vf;\n  float dstObj, dstTrObj, dstGrnd, refFac, sh;\n  isSh = false;\n  dstObj = ObjRay (ro, rd);\n  dstTrObj = TrObjRay (ro, rd);\n  roo = ro;\n  rdo = rd;\n  sh = 1.;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idPlat) qHit.x *= - sign (ro.z);\n    col4 = CarCol (vf, refFac);\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    isSh = true;\n    sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n    col = col4.rgb * (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., 1.)), 0.) +\n       0.8 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    if (refFac > 0.) rd = reflect (rd, vn);\n  }\n  if (dstObj >= dstFar || refFac > 0.) {\n    if (rd.y < 0.) {\n      dstGrnd = - ro.y / rd.y;\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      sh = (dstGrnd < dstFar) ? ObjSShadowEx (ro + 0.01 * vn, sunDir) : 1.;\n      colR = GrndCol (vec3 (ro.xz + carPos.xz, 0.).xzy, rd, dstGrnd, sh);\n      colR = mix (colR, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n    } else {\n      colR = SkyBgCol (ro, rd);\n    }\n    col = (refFac > 0.) ? mix (col, 0.9 * colR, refFac) : colR;\n  }\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro = roo + dstTrObj * rdo;\n    vn = TrObjNf (ro);\n    if (idTrObj == idWscrn) col *= vec3 (1., 1., 0.8);\n    else if (idTrObj == idMLit) col *= vec3 (1., 1., 0.8) * (0.9 + 0.1 * cos (128. * qTrHit.x)); \n    rd = reflect (rdo, vn);\n    rd.y = abs (rd.y);\n    col = mix (col, SkyBgCol (ro, rd), 0.1 + 0.8 * pow (1. - abs (dot (vn, rdo)), 5.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr, t, todCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  stDat = Loadv4 (0);\n  carPos = stDat.xyz;\n  carRot = stDat.w;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  wlRad = wlBase.y;\n  stDat = Loadv4 (2);\n  strRot = stDat.y;\n  wlRot = stDat.zw;\n  carPos.y += wlRad;\n  az = pi;\n  el = -0.12 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2.2 * pi * mPtr.x;\n    el -= 0.9 * pi * mPtr.y;\n  } else {\n    t = mod (0.007 * tCur, 2.);\n    az += 1.5 * pi * SmoothBump (0.25, 0.75, 0.25, mod (t, 1.)) * sign (t - 1.);\n    el += 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.45 * pi, -0.04 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -16.);\n  ro.xz += Rot2D (vec2 (0., wlBase.z), - carRot);\n  ro.y += carPos.y;\n  zmFac = 5.5;\n  dstFar = 100.;\n  colCode = floor (mod (todCur / 200., 3.));\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCaps2Df (vec2 p, float r, float h)\n{\n  return length (p - vec2 (0., clamp (p.y, - h, h))) - r;\n}\n\nfloat PrFlatCapsDf (vec3 p, float r, float h)\n{\n  return length (vec2 (max (length (p.xy) - r, 0.), p.z)) - h;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Mercedes 500K\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float pi = 3.1415927;\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 carPos, wlBase;\n  vec2 iFrag, wlRot, w;\n  float carRot, cRotN, strRot, wlRad, rTurn, spd, tc, nStep;\n  int pxId;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= 3) discard;\n  init = (iFrame <= 5);\n  if (init) {\n    carPos = vec3 (0.);\n    carRot = 0.;\n    strRot = 0.;\n    wlBase = vec3 (1.45, 0.8, 2.7);\n    wlRot = vec2 (0.);\n    nStep = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    carPos = stDat.xyz;\n    carRot = stDat.w;\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    stDat = Loadv4 (2);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    wlRot = stDat.zw;\n  }\n  wlRad = wlBase.y;\n  ++ nStep;\n  tc = mod (0.002 * nStep, 4.);\n  strRot = 0.07 * pi * SmoothBump (0.3, 0.7, 0.15, mod (tc, 1.)) * sign (mod (tc, 2.) - 1.) *\n     sign (tc - 2.);\n  spd = 0.03;\n  w = vec2 (1.);\n  if (abs (strRot) > 1e-4) {\n    cRotN = carRot - strRot * spd / pi;\n    rTurn = wlBase.z / asin (0.5 * strRot);\n    carPos.xz += rTurn * (sin (carRot - vec2 (0.5 * pi, 0.)) - sin (cRotN - vec2 (0.5 * pi, 0.)));\n    carRot = cRotN;\n    w += vec2 (-1., 1.) * wlBase.x / rTurn;\n  } else {\n    carPos.xz += spd * sin (carRot + vec2 (0., 0.5 * pi));\n  }\n  wlRot += w * spd / wlRad;\n  if      (pxId == 0) stDat = vec4 (carPos, carRot);\n  else if (pxId == 1) stDat = vec4 (wlBase, 0.);\n  else if (pxId == 2) stDat = vec4 (nStep, strRot, wlRot);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}