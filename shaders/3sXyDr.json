{
    "Shader": {
        "info": {
            "date": "1584525621",
            "description": "bandcamp: [url]https://tolka-nabroski.bandcamp.com/track/axb[/url]",
            "flags": 8,
            "hasliked": 0,
            "id": "3sXyDr",
            "likes": 31,
            "name": "#riff180320",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "// -----------------------------------------------------\n// #riff180320 by nabr\n// https://www.shadertoy.com/view/3sXyDr\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n// -----------------------------------------------------\n// bandcamp:\n// name your price, type ZER0$ for free download\n// https://tolka-nabroski.bandcamp.com/track/axb\n// -----------------------------------------------------\n\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 R = iResolution.xy;\n    vec3 col = vec3(1), d = vec3((U - .5 * R) / min(R.x, R.y), .5);\n    vec3 p = d.z / dot(vec3(0, -3, 4), -d) * d, n = p;\n    for (float t = 0.; t < 7.; ++t){\n        n = 80. * p - vec3(cos(.5 * iTime - t - n.x) + cos(t + n.y),\n                           iTime + sin(.5 * iTime + t - n.y) + cos(t - n.x), iTime);\n        n.xy = floor(cos(t) * n.xy + sin(t) * vec2(n.y, -n.x));\n    }\n    if(abs(d.x)<.45)\n    col = cos(vec3(0, 1, 1.57) + dot(vec3(-3, 6, 18), .05 * n)) * .35 + .5;\n    O.xyz = .2 * float(int(U) & 2 - int(U.y) & 2)\n            * smoothstep(10. / min(R.x, R.y), 0., .25 - length(d.xy * d.xy)) \n        \t+ (dot(vec3(.435, .25, .74), col) * vec3(col));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// -----------------------------------------------------\n// #riff180320 by nabr\n// https://www.shadertoy.com/view/3sXyDr\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n// -----------------------------------------------------\n// bandcamp:\n// name your price, type ZER0$ for free download\n// https://tolka-nabroski.bandcamp.com/track/axb\n// -----------------------------------------------------\n\n\n#define tau 4.*acos(0.)\n#define dB(_x) pow(10.,float(_x)/20.)\nfloat intfract(int s,float n);\n\nfloat rnd(float t)\n{\n    float x = t * 5623.123456;\n    return fract(x * fract(t + x));\n}\n\nvec2 drums(float t)\n{\n    // kick\n    float ft = fract(2. * t);\n    float dr = .2 * sin(471. * ft * exp(-ft * 5.))\n             + .6 * sin(691. * ft * exp(-ft * 2.));\n    // avoid click quadratic envelope\n    float a = min(sqrt(sqrt(1. - ft)), 25. * ft);\n    dr *= (a*a*a*a); //pow(a, 4.);\n\n    dr *= float(int[](1, 0, 0, 1, 1, 0, 0, 0)[int(2. * t) % 8]);\n\n    // snare\n    float s = rnd(t) +\n              (.5 * sin(tau * t * 240.)\n                         + sin(tau * t * 300.)) * exp(-ft * 3.);\n    s *= float(int[](0, 0, 1, 0)[int(2. * t) % 4]);\n    // attack decay\n    s *= atan(1. - ft, 100. * ft);\n\n    return .4 * vec2(s, .8 * s) + .5 * dr;\n}\n\nfloat eflute(float t)\n{\n    t = mod(t, 4.);\n    float m0 = 0., m1 = 0.;\n    float p[] = float[](554., 834., 834., 693.);\n\n    float ap = p[int(t) % 4];\n\n    m0 = abs(.125 - cos(.25 * sin(2. * ap * t * tau) + sin(ap * t * tau)));\n    m0 *= min(1., 25. * fract(4. * t)) * max(0., 1. - fract(4. * t));\n\n    m1 = .5 * (sin(ap * t * tau) + sin(2. * ap * t * tau));\n    return m1 + m0;\n}\n\nfloat synth(float hz, int samp)\n{\n    float y = 0., w = 0., a = 0., b = 0., s0 = 0., s1 = 0.;\n\n    s0 = sin(tau * intfract(samp, iSampleRate / hz));\n\n    s1 = s0 * sin(tau * intfract(samp, iSampleRate / (2. * hz)));\n\n    // playing around with one pole filter\n    w = tau * clamp(.5 * s1 + sin(s0 * 12. ), -.1, .4);\n    a = (1. - sin(w)) / cos(w);\n    b = (1. + a) * .5;\n    y = (b * s0 + a * s0);\n\n    return y;\n}\n\nvec2 mSound(int samp)\n{\n\n    //drums and melody work w/ usual float precision err, it's ok.\n    float t = (float(samp) / iSampleRate);\n\n    // -------- MELODY\n    float mld = eflute(t);\n    vec2 rev=vec2(1);\n    /*float sum=0.,amp=1.,ivR=0.008376;\n    for(float _ii=0.;(_ii<=1.);_ii+=ivR){ //120\n        float rvrnd=fract(120.*sin(_ii*1000.));\n        amp=exp2(-_ii*((ivR+_ii)+rvrnd));\n        rev+=(vec2(eflute(t+6.225*amp),eflute(t+3.5*amp)));\n        sum+=amp;\n    };rev/=sum;*/\n    //song works with less delay on the instrument\n    //updated on 12.05.2020 in favor of size&speed\n    float[12]ha=float[](.99926,.95837,1.00841,.82124,.86099,1.04333,.71246,.53604,.98669,.43196,.44877,.74675);\n    for(int j=0;j<2;++j)\n    for(int i=0;i<12;++i)\n    rev+=vec2(eflute(t+6.225*ha[i]),eflute(t+3.5*ha[i]));\n    rev*=.042;\n    // -------- DRUMS\n    vec2 dr = drums(t);\n    if(samp > 44100*45)\n        dr += drums(.25 + t);\n\n    // -------- SYNTH\n    vec2 v = vec2(0);\n    int nd = 0, nl = 0;\n\n    int x[] = int[](0, 0, 0, 138, 0, 0,0, 78, 0, 0, 175, 0,0, 0, 0, 0, 174, 0,261, 279, 0, 0, 554,0, 0, 0, 313, 69, 0,0, 349, 0, 0, 0, 234, 0, 415, 0, 0, 207, 0,0, 0, 0, 0, 0, 558);\n    x[0] = int[](349, 311)[int(t*.125) % 2];\n    x[12] = int[](92, 116, 138, 58)[int(t*.25) % 4];\n    x[45] = 2*x[12];\n\n    // delay time\n    int dt[]= int[](2971, 823, 607, 523, 457);\n\n    for (int i = 1; i <=x.length(); ++i)\n    {\n        if(samp > 44100*40)\n            nd =  abs(int(t*4.)%8-i/10);\n\n        nl = (i-nd)%x.length();\n\n        v.x += (synth(float(x[nl]), (dt[i%4]*2 ) + samp));\n        v.y += (synth(float(x[nl]), (dt[i%3]/2 ) + samp));\n\n    };\n    v*= (1./float(x.length()));\n\n    // fade in\n    v *= min(1., t/20.);\n\n    // stereo image l/r pan\n    const float angle = .436332;\n    const float sqh2 =  .707106;\n    vec2 r = vec2(cos(angle) + sin(angle), cos(angle) - sin(angle)) * v.x * sqh2;\n    vec2 l = vec2(cos(angle) - sin(angle), cos(angle) + sin(angle)) * v.y * sqh2;\n\n    // -------- out\n    if (samp > 44100 * 60)\n    return dB(-5) * vec2(r.x + l.x, l.y + r.y)\n         + dB(-5.) * dr\n         + dB(-12) * (dB(-5) * rev + dB(-8) * mld);\n\n    return dB(-4.6) * vec2(r.x + l.x, l.y + r.y)\n         + dB(-3) * dr;\n}\n\nfloat intfract(int s,float n)\n{\n    //Explanation and copyright : shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    // see ttg comment 2020-12-10\n    //int block = int((iBlockOffset+0.5)*iSampleRate/(512.*512.));\n    //int s = 512*512*block + 512*int(gl_FragCoord.y) + int(gl_FragCoord.x);\n    return mSound(samp);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}