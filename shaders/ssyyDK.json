{
    "Shader": {
        "info": {
            "date": "1655613575",
            "description": "I see everybody's doing these ray* things to do their 3D. Some of them are only like 200 chars even, so it can't be too hard... Gotta figure 'em out if I want to gain the power of creating 3D worlds out of nothing but functions!",
            "flags": 0,
            "hasliked": 0,
            "id": "ssyyDK",
            "likes": 3,
            "name": "CLOUDY PILLARS [shader-a-day #1]",
            "published": 3,
            "tags": [
                "raycaster",
                "rayshooter",
                "rayblaster"
            ],
            "usePreview": 0,
            "username": "NEAR_DREAM_UNITY",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "/*\n    CLOUDY PILLARS [shader-a-day #1]\n        by NEAR DREAM UNITY\n            2022/06/18\n*/\n\n\nfloat  Cloud  (vec3 q) {\n    vec2 plane = q.xz * mat2x2(15., 8., -8., 15.);\n    float thicc = dot(q, vec3(0.3, 1., 0.7));\n    float value = pow(\n        0.5 + 0.5 * dot(sin(plane), cos(plane)),\n        4. + cos(20. * thicc) + sin(100. * thicc)\n    );\n    return clamp(-.25 + 1.25 * value, 0., 1.);\n}\n\n\nvec3  HotColour  (float value) {\n    return 0.5 + 0.5 * cos(3.141 * (\n        vec3(1.5, 1., 0.) + value\n    ));\n}\n\n\nvec3  CoolColour  (float value) {\n    return vec3(\n        1.,\n        0.5 * value,\n        0.375 + 0.625 * value\n    );\n}\n\n\nvec3  TestColours2DImage  (vec2 p) {\n    //return HotColour(fract(p.y));\n    return CoolColour(fract(p.y));\n}\n\n\nvec3  TestPillars2DImage  (vec2 p) {\n    vec3 d3 = vec3(p.x, iTime, p.y);\n    return HotColour(Cloud(d3));\n}\n\n\nvec2  Rotate  (vec2 a, float r) {\n    float s = sin(r);\n    float c = cos(r);\n    return vec2(a.x * c - a.y * s, a.x * s + a.y * c);\n}\n\n\nvec3  Rayshoot3DImage  (vec2 p) {\n    vec3 direction = normalize(vec3(p * 2., -1.));\n    direction.yz = Rotate(direction.yz, 0.25 + 0.25 * cos(iTime * 0.5));\n    direction.xz = Rotate(direction.xz, sin(iTime * 0.4));\n    vec3 origin = vec3(iTime * 0.125, 0., 0.);\n\n    float capacity = 5.;\n    vec3 colour = vec3(0.);\n    for (float progress = 0.; progress < 1.; progress += 0.001953125) {\n        vec3 ray = origin + progress * direction * 3.;  // Terrible I'm sure. This is my first try.\n\n        float density = Cloud(ray);\n\n        colour += clamp(capacity, 0., 1.) * (1. - progress) * CoolColour(density) * density * 0.175;\n        capacity -= density * 0.3;\n    }\n    return colour;\n}\n\n\nvoid  mainImage  (out vec4 o, vec2 p) {\n    p = (p * 2. - iResolution.xy) / iResolution.y;\n    //o = vec4(TestColours2DImage(p), 1.);\n    //o = vec4(TestPillars2DImage(p), 1.);\n    o = vec4(Rayshoot3DImage(p), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}