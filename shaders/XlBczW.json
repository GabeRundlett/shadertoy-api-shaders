{
    "Shader": {
        "info": {
            "date": "1507579889",
            "description": "Cellular automaton sandbox, quite literally. Click to add sand. Press (and hold) keys 1-4 for different materials. Spacebar resets the scene.",
            "flags": 48,
            "hasliked": 0,
            "id": "XlBczW",
            "likes": 7,
            "name": "Cellular Sandbox",
            "published": 3,
            "tags": [
                "cellularautomaton"
            ],
            "usePreview": 0,
            "username": "FTPlus",
            "viewed": 883
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 color, in vec2 coord)\n{\n\tvec2 uv = coord.xy / iResolution.xy;\n\tcolor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cellular Sandbox\n// by FTPlus, October 2017\n// License: MIT\n// Thanks for the suggestions Ultraviolet and TimoKinnunen\n// Enjoy!\n\n// Uncomment for piling behavior\n//#define PILING\n\nconst vec4 NONE = vec4(0.0, 0.0, 0.0, 0.0);\nconst vec4 SKY = vec4(0.0, 0.65, 1.0, 1.0);\nconst vec4 GROUND = vec4(0.65, 0.2, 0.0, 1.0);\nconst vec4 SAND = vec4(1.0, 1.0, 0.65, 1.0);\nconst vec4 GRAVEL = vec4(0.65, 0.5, 0.5, 1.0);\n\nconst vec4 palette[4] = vec4[](SAND, GRAVEL, SKY, GROUND);\n\nbool falling(vec4 color)\n{\n    return color != SKY && color != GROUND;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    // Cell neighborhood, reference: see numpad\n\tvec4 c1 = texture(iChannel0, (coord.xy + vec2(-1.,-1.)) / iResolution.xy);\n    vec4 c2 = texture(iChannel0, (coord.xy + vec2( 0.,-1.)) / iResolution.xy);\n    vec4 c3 = texture(iChannel0, (coord.xy + vec2( 1.,-1.)) / iResolution.xy);\n    vec4 c4 = texture(iChannel0, (coord.xy + vec2(-1., 0.)) / iResolution.xy);\n    vec4 c5 = texture(iChannel0, (coord.xy + vec2( 0., 0.)) / iResolution.xy);\n    vec4 c6 = texture(iChannel0, (coord.xy + vec2( 1., 0.)) / iResolution.xy);\n    vec4 c7 = texture(iChannel0, (coord.xy + vec2(-1., 1.)) / iResolution.xy);\n    vec4 c8 = texture(iChannel0, (coord.xy + vec2( 0., 1.)) / iResolution.xy);\n    vec4 c9 = texture(iChannel0, (coord.xy + vec2( 1., 1.)) / iResolution.xy);\n    \n    vec4 c44 = texture(iChannel0, (coord.xy + vec2(-2., 0.)) / iResolution.xy);\n    vec4 c66 = texture(iChannel0, (coord.xy + vec2( 2., 0.)) / iResolution.xy);\n    \n    // Spacebar resets scene\n    if (texelFetch(iChannel1, ivec2(32, 0), 0).x > 0.5)\n        c5 = NONE;\n    \n    // Keys 1-4 select a different material (when held down)\n    vec4 selection = SAND;\n    for (int i = 0; i < palette.length(); ++i)\n    {\n        if (texelFetch(iChannel1, ivec2(49 + i, 0), 0).x > 0.5)\n        {\n            selection = palette[i];\n            break;\n        }\n    }\n    \n    // Mouse clicks add material\n    if (iMouse.z > 0.5)\n    {\n        float width = selection == GROUND ? 5.0 : 15.0;\n        if (distance(iMouse.xy, coord.xy) < width)\n        {\n            // A very crude pseudo random value\n    \t\tfloat random = float(((int(coord.x) * 31) ^ (int(coord.y) * 155)\n                         ^ (int(iTime * 111.0))) & 0xff) / 255.0;\n            \n            if (selection == SAND)\n        \t\tcolor = selection * (0.95 + random * 0.05);\t\n            else if (selection == GRAVEL)\n                color = selection * (0.8 + random * 0.2);\n            else\n                color = selection;\n        \treturn;\n        }\n    }    \n    \n    // The rules of the automaton\n    if (falling(c8) && c5 == SKY)\n        color = c8;\n    else if (falling(c5) && c2 == SKY)\n        color = SKY;\n        \n    #ifdef PILING\n    else if (falling(c6) && falling(c9) && c3 != SKY && c5 == SKY && c8 == SKY && c4 == SKY)\n        color = c6;\n    else if (falling(c4) && falling(c7) && c1 != SKY && c5 == SKY && c8 == SKY && c6 == SKY)\n        color = c4;\n    else if (falling(c5) && falling(c8) && c2 != SKY && c4 == SKY && c7 == SKY && c44 == SKY)\n        color = SKY;\n    else if (falling(c5) && falling(c8) && c2 != SKY && c6 == SKY && c9 == SKY && c66 == SKY)\n        color = SKY;\n    #endif\n        \n    else if (c5 == NONE)\n        color = SKY;\n    else if (coord.y < 10.0)\n\t\tcolor = GROUND;\n    else\n        color = c5;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}