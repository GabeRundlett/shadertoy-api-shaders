{
    "Shader": {
        "info": {
            "date": "1619527976",
            "description": "Just trying to recreate a beautiful animation I found on Twitter: [url]https://twitter.com/loackme_/status/1385336764865384448[/url]\n\nI don't know yet how to properly animate 2D transformations, so the code is a mess.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssSSRR",
            "likes": 15,
            "name": "Dancing squares animation",
            "published": 3,
            "tags": [
                "2d",
                "animation",
                "aberration",
                "minimalistic"
            ],
            "usePreview": 0,
            "username": "demicuz",
            "viewed": 458
        },
        "renderpass": [
            {
                "code": "// Inspired by: https://twitter.com/loackme_/status/1385336764865384448\n\n#define ABERRATION\n\n#define BLUR 2. / min(iResolution.x, iResolution.y)\n#define SS(edge, x) smoothstep(-BLUR, BLUR, x - edge)\n\n#define PI 3.14159265359\n#define iR(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define iS(s) mat2(1./s, .0, .0, 1./s)\n\nfloat ease(float x) {\n    return x < 0.5 ? 4. * x * x * x : 1. - pow(-2. * x + 2., 3.) / 2.;\n}\n\nfloat square(vec2 p, float size) {\n    return SS(abs(p.x), size) * SS(abs(p.y), size);\n}\n\nfloat hollow_square(vec2 p, float max_size, float border_width) {\n    return square(p, max_size) - square(p, max_size - border_width);\n}\n\nfloat square_anim_transform(vec2 p, float initial_scale, float angle,\n                            float scale, vec2 offset, float t) {\n    angle *= t;\n    scale = mix(initial_scale, scale, t);\n    offset *= t;\n    p = iR(angle) * iS(scale) * (p - offset);\n    \n    return hollow_square(p, .5, .03 / scale);\n}\n\nfloat full_animation(vec2 p, float t) {\n    // Initial positions and scales\n    vec2 p1 = p;\n    float s1 = .8;\n    vec2 p2 = p - vec2(-.2, .2);\n    float s2 = .19;\n    vec2 p3 = iR(PI*.25) * (p - vec2(.09, -.09));\n    float s3 = .36;\n    \n    float square_color = square_anim_transform(p1, s1, PI/2., s2, vec2(-.2, .2), t);\n    square_color += square_anim_transform(p2, s2, PI/4., s3, vec2(.29, -.29), t);\n    square_color += square_anim_transform(p3, s3, -3.*PI/4., s1, iR(PI*.25)*vec2(-.09, .09), t);\n    \n    return clamp(square_color, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord / iResolution.xy - vec2(.5);\n    p.x *= iResolution.x / iResolution.y;\n    \n    //vec2 m = iMouse.xy/iResolution.xy;\n    //float t = m.x;\n    \n    float t = iTime;\n    float t_speed = 1.;\n    \n    #ifdef ABERRATION\n    float t_offset = .015;\n    float t0 = ease(fract(t * t_speed));\n    float t1 = ease(fract((t - t_offset) * t_speed));\n    float t2 = ease(fract((t - 2.*t_offset) * t_speed));\n    vec3 color = vec3(full_animation(p, t0),\n                      full_animation(p, t1),\n                      full_animation(p, t2));\n    #else\n    vec3 color = vec3(full_animation(p, ease(fract(t * t_speed))));\n    #endif\n    \n    \n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}