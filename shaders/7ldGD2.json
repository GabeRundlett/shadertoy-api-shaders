{
    "Shader": {
        "info": {
            "date": "1636786369",
            "description": "Based on [url=https://www.shadertoy.com/view/Xdj3Wh]Xmas Fractal 2Tweets[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "7ldGD2",
            "likes": 10,
            "name": "Stained Glass Window",
            "published": 3,
            "tags": [
                "fractals",
                "glass",
                "kaleidoscope",
                "windows",
                "window",
                "cathedral",
                "stainedglass",
                "church",
                "pane",
                "panes",
                "mosque",
                "shattered"
            ],
            "usePreview": 0,
            "username": "1j01",
            "viewed": 553
        },
        "renderpass": [
            {
                "code": "// based on Xmas Fractal 2Tweets by mplanck https://www.shadertoy.com/view/Xdj3Wh\n\nvoid imageSample( out vec4 f, in vec2 w )\n{\n\tfloat t = .001 * iTime + .3;\n\tvec4 p = abs(4.-8.*w.xyxx / iResolution.x), c=p*.0;\n\tp.yx *= 60. * t * 0.3;\n    t *= 0.9; // not just affecting time\n\tfor (float d=.2;d<3.;d+=.3) {\n\t\tp -= .5*d;\n\t\tfor (int i=0;i<8;i++) p.xy=mat2(\n            cos(t),sin(t),-sin(t),cos(t))*(p.xy+sign(p.yx)*vec2(-.2,1.6)\n        );\n        //p = mod(p+c, 10.);\n\t\tc += .1*p;\n        c = mod(c, 4.);\n        //c.xz = c.zx;\n        c *= w.y/1000.; // gradient\n\t}\n\t\n\tf = c;\n}\n\nvoid mainImage( out vec4 f, in vec2 w )\n{\n    // I'm doing some sort of naive edge detection,\n    // in order to make the border of the imagined stained glass panes.\n    vec4 s1, s2, s3, s4;\n    float d = 1.2;\n\timageSample(s1, w+vec2(-d, 0.));\n\timageSample(s2, w+vec2(+d, 0.));\n\timageSample(s3, w+vec2(0., -d));\n\timageSample(s4, w+vec2(0., +d));\n    \n    // color components -> single value (not weighted perceptually or anything)\n    s1.xyzw = vec4(s1.x + s1.y + s1.z);\n    s2.xyzw = vec4(s2.x + s2.y + s2.z);\n    \n    // take main sample\n\timageSample(f, w);\n    \n    // apply black borders\n    f -= abs(s1 - s2) * 20.;\n    f -= abs(s3 - s3) * 20.;\n    \n    //f -= 0.2;\n    //f = pow(f, vec4(0.2));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}