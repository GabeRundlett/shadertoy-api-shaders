{
    "Shader": {
        "info": {
            "date": "1624438100",
            "description": "A procedural generation of Voronoi noise.\n\neval generates 2 values\nx: distance of uv to point (without the square root)\ny: hash value of closest point (the z calculated in rehash3())\n\nthe y can be used in rehash3() to generate a random color",
            "flags": 0,
            "hasliked": 0,
            "id": "flSGRt",
            "likes": 1,
            "name": "Procedural Voronoi noise",
            "published": 3,
            "tags": [
                "voronoi",
                "proceduralnoise"
            ],
            "usePreview": 0,
            "username": "Zyphery",
            "viewed": 130
        },
        "renderpass": [
            {
                "code": "float hash(float x) {\n    return fract(x + 7.3215f * 1.8152f);\n}\n\nfloat hash2(vec2 a) {\n    return fract((hash(a.y * 67.6417f) + hash(a.x * 54.3815f)) * 347.1158f);\n}\n\nfloat sqr(float x) {return x*x;}\nfloat fastdist(vec2 a, vec2 b) {\n    return sqr(b.x - a.x) + sqr(b.y - a.y);\n}\n\nvec3 rehash3(float x) {\n    return vec3(fract((x + 0.583f * 59.3829f) * 394.3485f), fract((x + 0.892f * 83.6621f) * 145.3871f), fract((x + 0.763f * 47.9397f) * 957.9732f));\n}\n\n// x : distance (w/o sqrt) / y : hash\nvec2 eval(float x, float y, int seed) {\n    vec3 p[9];\n    for (int _x = -1; _x < 2; _x++) for (int _y = -1; _y < 2; _y++) {\n        vec2 _p = vec2(floor(x), floor(y)) + vec2(_x, _y);\n        float h = hash2(_p + float(seed));\n        p[_x + 1 + (_y + 1) * 3] = rehash3(h + float(seed)) + vec3(_p,0);\n    }\n    float m = 999999.9999f, z = 0.0f;\n    for (int i = 0; i < 9; i++) {\n        float d = fastdist(vec2(x, y), p[i].xy);\n        if (d < m) { m = d; z = p[i].z; }\n    }\n    return vec2(m, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y * 5.0;\n    \n    vec2 n = eval(uv.x,uv.y,0);\n    vec3 col = (1.0 - sqrt(n.x)) * rehash3(n.y);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}