{
    "Shader": {
        "info": {
            "date": "1635848702",
            "description": "A simple raymarcher with multiple materials, each of which is dithered in a different way.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntc3R7",
            "likes": 14,
            "name": "Raymarching with Dithering",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "shader",
                "dithering",
                "signeddistance",
                "onebit"
            ],
            "usePreview": 0,
            "username": "AJFarmar",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "/* This defines what stage of the process we show.\n * Uncomment/recomment different ones to see different parts.\n */\n//#define SHOW_ID\n//#define SHOW_DEPTH\n//#define SHOW_NORMAL\n//#define SHOW_BRIGHTNESS\n#define SHOW_DITHER\n//#define PIXELLATE\n\n// Determines the size of the dither \"pixels\".\n#define SQUARE_SIZE (2)\n\n// Firstly, we define all the usual raymarching necessities.\nconst int   MAX_MARCH = 1024; // The number of steps after which we stop marching.\nconst int   MAX_LIGHT_MARCH = 256; // The number of steps after which we stop calculating shadows.\nconst float CLOSE     = 0.00005; // \"Close enough\" distance. Arbitrary here.\nconst float FAR       = 5.0; // \"Far enough\" distance. Arbitrary here.\nconst float PI = 3.1415926535897; // Just useful.\n\n// Sunlight. We'll change this eventually.\nconst vec3 SUNLIGHT = vec3(0.4, -1.0, 1.3)/1.6881943;\n\n/* We track the maximum number of objects in the scene.\n * We could do way more than 16, but it really doesn't matter.\n * This will just be used to keep track of the IDs of objects.\n */\n#define MAX_OBJECTS (4)\n\n// Now we define some signed distance functions, with ADDITIONAL PARAMETERS!\nstruct SDFData\n{\n    float dist;\n    int id;\n    vec3 normal;\n};\n/* These parameters will become important in future layers, since we will use\n * the same scene definition multiple times.\n */\n#define SPHERE(center, radius, id, v) (SDFData( distance(v,center) - radius, id, normalize(v-center) ))\n#define SOLIDPLANE(point, normal, id, v) (SDFData( dot(v-point, normal), id, normal ))\nSDFData UNION(SDFData sdf1, SDFData sdf2)\n{\n    if (sdf1.dist <= sdf2.dist)\n        return sdf1;\n    return sdf2;\n}\nSDFData INTERSECTION(SDFData sdf1, SDFData sdf2)\n{\n    if (sdf1.dist <= sdf2.dist)\n        return sdf2;\n    return sdf1;\n}\n\n// Objects' information in the scene.\nstruct ObjectInfo {\n    int ditherer;\n};\n\n// We record the object information for each object.\nconst ObjectInfo objectList[MAX_OBJECTS] = ObjectInfo[MAX_OBJECTS](\n    ObjectInfo(2),\n    ObjectInfo(0),\n    ObjectInfo(2),\n    ObjectInfo(0)\n);\n\n// The scene. Outputs the object ID as well as the distance and the normal.\nSDFData sceneSDF(vec3 v)\n{\n    // We will have a sphere and a cube lying on a flat plane, each a different object.\n    return UNION(UNION(UNION(\n    // First object: the plane.\n        SOLIDPLANE(vec3(0.0), vec3(0.0, 1.0, 0.0), 1, v)\n    ,\n    // Second object: the sphere.\n        SPHERE(vec3(1.2, 0.4, -0.1), 0.4, 2, v)\n    ),\n    // Third object: the smaller sphere.\n        SPHERE(vec3(0.1, 0.2, -0.75), 0.2, 3, v)\n    ),\n    // Fourth object: the cube with rounded corners.\n        // To build a cube, we intersect 6 solid planes. This will get a bit messy!\n        INTERSECTION(INTERSECTION(INTERSECTION(\n        // X sides\n            INTERSECTION(\n                SOLIDPLANE(vec3(0.5, 0.0, 0.0), vec3(1.0, 0.0, 0.0), 4, v),\n                SOLIDPLANE(vec3(-0.5, 0.0, 0.0), vec3(-1.0, 0.0, 0.0), 4, v)\n            )\n        ,\n        // Y sides\n            INTERSECTION(\n                SOLIDPLANE(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), 4, v),\n                SOLIDPLANE(vec3(0.0, 0.0, 0.0), vec3(0.0, -1.0, 0.0), 4, v)\n            )\n        ),\n        // Z sides\n            INTERSECTION(\n                SOLIDPLANE(vec3(0.0, 0.0, 0.5), vec3(0.0, 0.0, 1.0), 4, v),\n                SOLIDPLANE(vec3(0.0, 0.0, -0.5), vec3(0.0, 0.0, -1.0), 4, v)\n            )\n        ),\n        // We intersect a cube with a sphere to round the corners.\n            SPHERE(vec3(0.0, 0.5, 0.0), 0.75, 4, v)\n        )\n    );\n}\n\n// Different dithering methods\nfloat calculateDither(vec2 coord, float brightness, int dithererID) {\n    float ditherTexture;\n    if (dithererID == 1) {\n        ditherTexture = texture(iChannel1, coord/256.0).x;\n    } else if (dithererID == 2) {\n        ditherTexture = texture(iChannel2, coord/1024.0).x;\n    } else if (dithererID == 3) {\n        ditherTexture = texture(iChannel2, coord/1024.0).z;\n    } else {\n        ditherTexture = texture(iChannel0, coord/8.0).x;\n    }\n\n    return step(ditherTexture+0.001, brightness);\n}\n\n// The result of raymarching\nstruct RayMarch {\n    float depth; // How far away from the camera are we?\n    int id;      // Which object have we hit?\n    vec3 normal; // What's the normal to this surface?\n    float light; // Does this object recieve direct light?\n};\n\n// The raymarching algorithm!\nRayMarch raymarch(mat4 camera, vec2 relCoord)\n{\n\n    // Calculate the position of the eye.\n    vec4 eye_homog = camera * vec4(0.0, 0.0, 0.0, 1.0);\n    vec3 eye = eye_homog.xyz / eye_homog.w;\n    \n    // Calculate the direction that we'll be looking in.\n    vec4 offsetRay_homog = camera * vec4(relCoord, 1.0, 1.0);\n    vec3 ray = normalize((offsetRay_homog.xyz/offsetRay_homog.w) - eye);\n    \n    // We begin raymarching -- yippee!\n    int steps = 0;\n    vec3 v = eye;\n    float totalDist = 0.0;\n    bool shouldContinue = true;\n    SDFData depthInfo;\n    do {\n        depthInfo = sceneSDF(v);\n        v += depthInfo.dist * ray;\n        totalDist += depthInfo.dist;\n        steps += 1;\n        shouldContinue =\n            abs(depthInfo.dist) >= CLOSE\n         && depthInfo.dist <= FAR\n         && steps <= MAX_MARCH;\n    } while (shouldContinue);\n    \n    // What if we're just looking at the sky?\n    if (steps >= MAX_MARCH || depthInfo.dist >= FAR)\n        // For now, ignore the normal vector for the sky.\n         return RayMarch(0.0, 0, vec3(0.0), 0.0);\n         \n    // Now, we do reflection by raymarching AGAIN.\n    // TODO: make this dependent on the material of the object.\n    ray = -SUNLIGHT;\n    v += (1.001)*CLOSE*depthInfo.normal;\n    steps = 0;\n    shouldContinue = true;\n    float dist;\n    do {\n        dist = sceneSDF(v).dist;\n        v += dist * ray;\n        steps += 1;\n        shouldContinue =\n            dist >= CLOSE\n         && dist <= FAR\n         && steps <= MAX_LIGHT_MARCH;\n    } while (shouldContinue);\n    \n    \n    // If we're really looking at an object.\n    return RayMarch(totalDist, depthInfo.id, depthInfo.normal, step(CLOSE, dist));\n}\n\n// Calculates the brightness of a point.\nfloat calculateBrightness(RayMarch info, vec3 gaze)\n{\n    float diffusion = dot(-SUNLIGHT, info.normal);\n    const float diffuse = 0.7;\n    \n    float speculation = abs(dot(SUNLIGHT, reflect(normalize(gaze), info.normal)));\n    speculation = clamp(speculation, 0.0, 1.0);\n    speculation = pow(speculation, 6.0);\n    const float specular = 0.7;\n    \n    float brightness = diffusion*diffuse + speculation*specular;\n    brightness = clamp(brightness, 0.0, 1.0);\n    brightness *= info.light;\n    return brightness;\n}\n\n// View matrix calculation.\nmat4 viewMatrix(vec3 eye, vec3 gaze, vec3 up)\n{\n    // By Jamie Wong, based on the gluLookAt man page.\n    // Lightly edited.\n    vec3 f = normalize(gaze);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(f, 0.0),\n        vec4(eye, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord;\n    #if defined(PIXELLATE) || defined(SHOW_DITHER)\n        vec2 sqCoord = floor(fragCoord/float(SQUARE_SIZE));\n        coord = float(SQUARE_SIZE)*sqCoord;\n    #else\n        coord = fragCoord;\n    #endif\n\n    // We get the signed distance info.\n    vec2 relCoord = (coord - 0.5*iResolution.xy)/iResolution.y;\n    vec3 eye = vec3(2.1 + 0.5*cos(iTime/1.5), 0.8 + 0.4*cos(iTime/1.5), -1.8+0.8*cos(iTime/1.5));\n    mat4 view = viewMatrix(\n        eye,\n        vec3(0.3 + 0.1*sin(iTime/2.0), 0.5 + 0.1*cos(iTime/2.0), 0.0) - eye,\n        vec3(0.0, 1.0, 0.0));\n    RayMarch distinfo = raymarch(view, relCoord);\n    ObjectInfo objinfo = objectList[distinfo.id-1];\n    \n    // Brightness\n    float brightness = calculateBrightness(distinfo, eye);\n    \n    // The various different layers of information\n    #if defined(SHOW_ID)\n        float colorAngle = 2.0 * PI * float(distinfo.id) / float(MAX_OBJECTS);\n        vec2 colorVector = vec2(cos(colorAngle), sin(colorAngle));\n        vec2 rV, gV, bV;\n        rV = vec2(1.0, 0.0);\n        gV = vec2(cos(2.0*PI/3.0), sin(2.0*PI/3.0));\n        bV = vec2(cos(-2.0*PI/3.0), sin(-2.0*PI/3.0));\n        vec3 idColor =\n              dot(colorVector, rV)*vec3(1.0,0.0,0.0)\n            + dot(colorVector, gV)*vec3(0.0,1.0,0.0)\n            + dot(colorVector, bV)*vec3(1.0,0.0,1.0);\n        if (distinfo.id == 0)\n             fragColor = vec4(0.0);\n        else fragColor = vec4(vec3(0.5) + 0.5*idColor, 1.0);\n    #elif defined(SHOW_DEPTH)\n        if (distinfo.id == 0)\n             fragColor = vec4(0.0);\n        else fragColor = vec4(vec3(1.0 - distinfo.dist/FAR), 1.0);\n    #elif defined(SHOW_NORMAL)\n        if (distinfo.id == 0)\n             fragColor = vec4(0.0);\n        else fragColor = vec4(0.5 + 0.5*distinfo.normal, 1.0);\n    #elif defined(SHOW_BRIGHTNESS)\n        if (distinfo.id == 0)\n             fragColor = vec4(0.0);\n        else fragColor = vec4(vec3(brightness), 1.0);\n    #elif defined(SHOW_DITHER)\n        float dither = calculateDither(sqCoord, brightness, objinfo.ditherer);\n        if (distinfo.id == 0)\n             fragColor = vec4(0.0);\n        else fragColor = vec4(vec3(dither), 1.0);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}