{
    "Shader": {
        "info": {
            "date": "1681792170",
            "description": "converted from svg with https://gist.github.com/Ninja-Koala/74fa7652fb4de248949ce1e27b989c14",
            "flags": 0,
            "hasliked": 0,
            "id": "msyXDd",
            "likes": 3,
            "name": "airpods-icon",
            "published": 3,
            "tags": [
                "icon"
            ],
            "usePreview": 0,
            "username": "dreness",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "#define ZERO min(0,iFrame)\n\nfloat border;\n\n// Modified from http://tog.acm.org/resources/GraphicsGems/gems/Roots3And4.c\n// Credits to Doublefresh for hinting there\nint solve_quadric(vec2 coeffs, inout vec2 roots){\n\n\t// normal form: x^2 + px + q = 0\n\tfloat p = coeffs[1] / 2.;\n\tfloat q = coeffs[0];\n\n\tfloat D = p * p - q;\n\n\tif (D < 0.){\n\t\treturn 0;\n\t}\n\telse{\n\t\troots[0] = -sqrt(D) - p;\n\t\troots[1] = sqrt(D) - p;\n\n\t\treturn 2;\n\t}\n}\n\n//From Trisomie21\n//But instead of his cancellation fix i'm using a newton iteration\nint solve_cubic(vec3 coeffs, inout vec3 r){\n\n\tfloat a = coeffs[2];\n\tfloat b = coeffs[1];\n\tfloat c = coeffs[0];\n\n\tfloat p = b - a*a / 3.0;\n\tfloat q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n\tfloat p3 = p*p*p;\n\tfloat d = q*q + 4.0*p3 / 27.0;\n\tfloat offset = -a / 3.0;\n\tif(d >= 0.0) { // Single solution\n\t\tfloat z = sqrt(d);\n\t\tfloat u = (-q + z) / 2.0;\n\t\tfloat v = (-q - z) / 2.0;\n\t\tu = sign(u)*pow(abs(u),1.0/3.0);\n\t\tv = sign(v)*pow(abs(v),1.0/3.0);\n\t\tr[0] = offset + u + v;\t\n\n\t\t//Single newton iteration to account for cancellation\n\t\tfloat f = ((r[0] + a) * r[0] + b) * r[0] + c;\n\t\tfloat f1 = (3. * r[0] + 2. * a) * r[0] + b;\n\n\t\tr[0] -= f / f1;\n\n\t\treturn 1;\n\t}\n\tfloat u = sqrt(-p / 3.0);\n\tfloat v = acos(-sqrt( -27.0 / p3) * q / 2.0) / 3.0;\n\tfloat m = cos(v), n = sin(v)*1.732050808;\n\n\t//Single newton iteration to account for cancellation\n\t//(once for every root)\n\tr[0] = offset + u * (m + m);\n\tr[1] = offset - u * (n + m);\n\tr[2] = offset + u * (n - m);\n\n\tvec3 f = ((r + a) * r + b) * r + c;\n\tvec3 f1 = (3. * r + 2. * a) * r + b;\n\n\tr -= f / f1;\n\t\n\treturn 3;\n}\n\nfloat quadratic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2){\n\t//horner's method\n\tvec2 a_1=a1+t*a2;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*a2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat quadratic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2){\n\tvec2 a2 = p0 - 2. * p1 + p2;\n\tvec2 a1 = -2. * p0 + 2. * p1;\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\t\n\tif(all(lessThan(uv,max(max(p0,p1),p2)+border)) && all(greaterThan(uv,min(min(p0,p1),p2)-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tt=params[i];\n\t\t\tfor(int j=ZERO;j<3;j++){\n\t\t\t\tt=quadratic_bezier_normal_iteration(t,a0,a1,a2);\n\t\t\t}\n\t\t\tt=clamp(t,0.,1.);\n\t\t\tvec2 uv_to_p=(a2*t+a1)*t+a0;\n\t\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t\t}\n\t}\n\n\treturn d0;\n}\n\nfloat cubic_bezier_normal_iteration(float t, vec2 a0, vec2 a1, vec2 a2, vec2 a3){\n\t//horner's method\n\tvec2 a_2=a2+t*a3;\n\tvec2 a_1=a1+t*a_2;\n\tvec2 b_2=a_2+t*a3;\n\n\tvec2 uv_to_p=a0+t*a_1;\n\tvec2 tang=a_1+t*b_2;\n\n\tfloat l_tang=dot(tang,tang);\n\treturn t-dot(tang,uv_to_p)/l_tang;\n}\n\nfloat cubic_bezier_dis_approx_sq(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\tvec2 a3 = (-p0 + 3. * p1 - 3. * p2 + p3);\n\tvec2 a2 = (3. * p0 - 6. * p1 + 3. * p2);\n\tvec2 a1 = (-3. * p0 + 3. * p1);\n\tvec2 a0 = p0 - uv;\n\n\tfloat d0 = 1e38;\n\n\tfloat t;\n\tvec3 params=vec3(0,.5,1);\n\n\tif(all(lessThan(uv,max(max(p0,p1),max(p2,p3))+border)) && all(greaterThan(uv,min(min(p0,p1),min(p2,p3))-border))){\n\t\tfor(int i=ZERO;i<3;i++){\n\t\t\tt=params[i];\n\t\t\tfor(int j=ZERO;j<3;j++){\n\t\t\t\tt=cubic_bezier_normal_iteration(t,a0,a1,a2,a3);\n\t\t\t}\n\t\t\tt=clamp(t,0.,1.);\n\t\t\tvec2 uv_to_p=((a3*t+a2)*t+a1)*t+a0;\n\t\t\td0=min(d0,dot(uv_to_p,uv_to_p));\n\t\t}\n\t}\n\n\treturn d0;\n}\n\n//segment_dis_sq by iq\nfloat length2( vec2 v ) { return dot(v,v); }\n\nfloat segment_dis_sq( vec2 p, vec2 a, vec2 b ){\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length2( pa - ba*h );\n}\n\nint segment_int_test(vec2 uv, vec2 p0, vec2 p1){\n\tp0-=uv;\n\tp1-=uv;\n\n\tint ret;\n\t\n\tif(p0.y*p1.y<0.){\n\t\tvec2 nor=p0-p1;\n\t\tnor=vec2(nor.y,-nor.x);\n\t\t\n\t\tfloat sgn;\n\t\t\n\t\tif(p0.y>p1.y){\n\t\t\tsgn=1.;\n\t\t}\n\t\telse{\n\t\t\tsgn=-1.;\n\t\t}\n\n\t\tif(dot(nor,p0)*sgn<0.){\n\t\t\tret=0;\n\t\t}\n\t\telse{\n\t\t\tret=1;\n\t\t}\n\t}\n\telse{\n\t\tret=0;\n\t}\n\n\treturn ret;\n}\n\nint quadratic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2){\n\n\tfloat qu = (p0.y - 2. * p1.y + p2.y);\n\tfloat li = (-2. * p0.y + 2. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec2 roots = vec2(1e38);\n\tint n_roots = solve_quadric(vec2(co/qu,li/qu),roots);\n\n\tint n_ints = 0;\n\n\tfor(int i=ZERO;i<n_roots;i++){\n\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\tfloat x_pos = p0.x - 2. * p1.x + p2.x;\n\t\t\tx_pos = x_pos * roots[i] + -2. * p0.x + 2. * p1.x;\n\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\tif(x_pos > uv.x){\n\t\t\t\tn_ints++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nint cubic_bezier_int_test(vec2 uv, vec2 p0, vec2 p1, vec2 p2, vec2 p3){\n\n\tfloat cu = (-p0.y + 3. * p1.y - 3. * p2.y + p3.y);\n\tfloat qu = (3. * p0.y - 6. * p1.y + 3. * p2.y);\n\tfloat li = (-3. * p0.y + 3. * p1.y);\n\tfloat co = p0.y - uv.y;\n\n\tvec3 roots = vec3(1e38);\n\tint n_roots;\n\t\n\tint n_ints=0;\n\n\tif(uv.x<min(min(p0.x,p1.x),min(p2.x,p3.x))){\n\t\tif(uv.y>=min(p0.y,p3.y) && uv.y<=max(p0.y,p3.y)){\n\t\t\tn_ints=1;\n\t\t}\n\t}\n    \telse{\n\t\tif(abs(cu) < .0001){\n\t\t\tn_roots = solve_quadric(vec2(co/qu,li/qu),roots.xy);\n\t\t}\n\t\telse{\n\t\t\tn_roots = solve_cubic(vec3(co/cu,li/cu,qu/cu),roots);\n\t\t}\n\n\t\tfor(int i=ZERO;i<n_roots;i++){\n\t\t\tif(roots[i] >= 0. && roots[i] <= 1.){\n\t\t\t\tfloat x_pos = -p0.x + 3. * p1.x - 3. * p2.x + p3.x;\n\t\t\t\tx_pos = x_pos * roots[i] + 3. * p0.x - 6. * p1.x + 3. * p2.x;\n\t\t\t\tx_pos = x_pos * roots[i] + -3. * p0.x + 3. * p1.x;\n\t\t\t\tx_pos = x_pos * roots[i] + p0.x;\n\n\t\t\t\tif(x_pos > uv.x){\n\t\t\t\t\tn_ints++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn n_ints;\n}\n\nfloat path0_dis_sq(vec2 uv){\n\tfloat dis_sq=1e38;\n\n\tint num_its=0;\n\n\tvec2[98] p=vec2[](vec2(-0.109735,0.0382438),\n\t                  vec2(-0.0625072,0.0379592),\n\t                  vec2(-0.0237381,0.0750297),\n\t                  vec2(-0.0239248,0.119455),\n\t                  vec2(-0.0239517,0.163214),\n\t                  vec2(-0.0625072,0.2),\n\t                  vec2(-0.109735,0.2),\n\t                  vec2(-0.145373,0.2),\n\t                  vec2(-0.174403,0.180993),\n\t                  vec2(-0.192094,0.154231),\n\t                  vec2(-0.195962,0.148237),\n\t                  vec2(-0.197804,0.141895),\n\t                  vec2(-0.197804,0.134664),\n\t                  vec2(-0.197804,0.10358),\n\t                  vec2(-0.197804,0.0961886),\n\t                  vec2(-0.19606,0.0898471),\n\t                  vec2(-0.192094,0.0838526),\n\t                  vec2(-0.174528,0.0572511),\n\t                  vec2(-0.145373,0.0389109),\n\t                  vec2(-0.163739,0.0899628),\n\t                  vec2(-0.16808,0.0899628),\n\t                  vec2(-0.171308,0.0931914),\n\t                  vec2(-0.171308,0.0979141),\n\t                  vec2(-0.171308,0.140873),\n\t                  vec2(-0.171308,0.145435),\n\t                  vec2(-0.16808,0.148664),\n\t                  vec2(-0.163739,0.148664),\n\t                  vec2(-0.159114,0.148664),\n\t                  vec2(-0.155948,0.145435),\n\t                  vec2(-0.155948,0.140873),\n\t                  vec2(-0.155948,0.0979141),\n\t                  vec2(-0.155948,0.0931914),\n\t                  vec2(-0.159114,0.0899628),\n\t                  vec2(-0.0948728,-0.137991),\n\t                  vec2(-0.0441766,-0.137991),\n\t                  vec2(-0.0441766,0.0422197),\n\t                  vec2(-0.0583806,0.0312179),\n\t                  vec2(-0.0760086,0.0237643),\n\t                  vec2(-0.0948728,0.0213454),\n\t                  vec2(-0.0785254,-0.2),\n\t                  vec2(-0.0607463,-0.2),\n\t                  vec2(-0.0497445,-0.2),\n\t                  vec2(-0.0441766,-0.19493),\n\t                  vec2(-0.0441766,-0.185494),\n\t                  vec2(-0.0441766,-0.156063),\n\t                  vec2(-0.0948728,-0.156063),\n\t                  vec2(-0.0948728,-0.185494),\n\t                  vec2(-0.0948728,-0.19493),\n\t                  vec2(-0.0889229,-0.2),\n\t                  vec2(0.109735,0.0382438),\n\t                  vec2(0.145374,0.0389109),\n\t                  vec2(0.17459,0.0572511),\n\t                  vec2(0.192094,0.0838526),\n\t                  vec2(0.1959,0.0898471),\n\t                  vec2(0.197804,0.0961886),\n\t                  vec2(0.197804,0.10358),\n\t                  vec2(0.197804,0.134664),\n\t                  vec2(0.197804,0.141895),\n\t                  vec2(0.195962,0.148237),\n\t                  vec2(0.192094,0.154231),\n\t                  vec2(0.174466,0.180993),\n\t                  vec2(0.145374,0.2),\n\t                  vec2(0.109735,0.2),\n\t                  vec2(0.0625072,0.2),\n\t                  vec2(0.0239517,0.163214),\n\t                  vec2(0.0239248,0.119455),\n\t                  vec2(0.0237381,0.0750297),\n\t                  vec2(0.0625072,0.0379592),\n\t                  vec2(0.163739,0.0899628),\n\t                  vec2(0.159114,0.0899628),\n\t                  vec2(0.155948,0.0931914),\n\t                  vec2(0.155948,0.0979141),\n\t                  vec2(0.155948,0.140873),\n\t                  vec2(0.155948,0.145435),\n\t                  vec2(0.159114,0.148664),\n\t                  vec2(0.163739,0.148664),\n\t                  vec2(0.168079,0.148664),\n\t                  vec2(0.171308,0.145435),\n\t                  vec2(0.171308,0.140873),\n\t                  vec2(0.171308,0.0979141),\n\t                  vec2(0.171308,0.0931914),\n\t                  vec2(0.168079,0.0899628),\n\t                  vec2(0.0948728,-0.137991),\n\t                  vec2(0.0948728,0.0213454),\n\t                  vec2(0.0760086,0.0237643),\n\t                  vec2(0.0583806,0.0312179),\n\t                  vec2(0.0441766,0.0422197),\n\t                  vec2(0.0441766,-0.137991),\n\t                  vec2(0.0785259,-0.2),\n\t                  vec2(0.0889229,-0.2),\n\t                  vec2(0.0948728,-0.19493),\n\t                  vec2(0.0948728,-0.185494),\n\t                  vec2(0.0948728,-0.156063),\n\t                  vec2(0.0441766,-0.156063),\n\t                  vec2(0.0441766,-0.185494),\n\t                  vec2(0.0441766,-0.19493),\n\t                  vec2(0.0497445,-0.2),\n\t                  vec2(0.0607463,-0.2));\n\n\tivec2[20] seg=ivec2[](ivec2(12,13),\n\t                      ivec2(22,23),\n\t                      ivec2(29,30),\n\t                      ivec2(33,34),\n\t                      ivec2(34,35),\n\t                      ivec2(38,33),\n\t                      ivec2(39,40),\n\t                      ivec2(43,44),\n\t                      ivec2(44,45),\n\t                      ivec2(45,46),\n\t                      ivec2(55,56),\n\t                      ivec2(71,72),\n\t                      ivec2(78,79),\n\t                      ivec2(82,83),\n\t                      ivec2(86,87),\n\t                      ivec2(87,82),\n\t                      ivec2(91,92),\n\t                      ivec2(92,93),\n\t                      ivec2(93,94),\n\t                      ivec2(97,88));\n\n\tivec4[26] c_bez=ivec4[](ivec4(0,1,2,3),\n\t                        ivec4(3,4,5,6),\n\t                        ivec4(6,7,8,9),\n\t                        ivec4(9,10,11,12),\n\t                        ivec4(13,14,15,16),\n\t                        ivec4(16,17,18,0),\n\t                        ivec4(19,20,21,22),\n\t                        ivec4(23,24,25,26),\n\t                        ivec4(26,27,28,29),\n\t                        ivec4(30,31,32,19),\n\t                        ivec4(35,36,37,38),\n\t                        ivec4(40,41,42,43),\n\t                        ivec4(46,47,48,39),\n\t                        ivec4(49,50,51,52),\n\t                        ivec4(52,53,54,55),\n\t                        ivec4(56,57,58,59),\n\t                        ivec4(59,60,61,62),\n\t                        ivec4(62,63,64,65),\n\t                        ivec4(65,66,67,49),\n\t                        ivec4(68,69,70,71),\n\t                        ivec4(72,73,74,75),\n\t                        ivec4(75,76,77,78),\n\t                        ivec4(79,80,81,68),\n\t                        ivec4(83,84,85,86),\n\t                        ivec4(88,89,90,91),\n\t                        ivec4(94,95,96,97));\n\n\tif(all(lessThan(uv,vec2(0.197804,0.2)+border)) && all(greaterThan(uv,vec2(-0.197804,-0.2)-border))){\n\t\tfor(int i=ZERO;i<20;i++){\n\t\t\tdis_sq=min(dis_sq,segment_dis_sq(uv,p[seg[i][0]],p[seg[i][1]]));\n\t\t\tnum_its+=segment_int_test(uv,p[seg[i][0]],p[seg[i][1]]);\n\t\t}\n\t\tfor(int i=ZERO;i<26;i++){\n\t\t\tdis_sq=min(dis_sq,cubic_bezier_dis_approx_sq(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]));\n\t\t\tnum_its+=cubic_bezier_int_test(uv,p[c_bez[i][0]],p[c_bez[i][1]],p[c_bez[i][2]],p[c_bez[i][3]]);\n\t\t}\n\t}\n\n\tfloat sgn=1.;\n\n\tif(num_its%2==1){\n\t\tsgn=-1.;\n\t}\n\n\treturn sgn*dis_sq;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tborder=1./iResolution.x;\n\n\tvec2 uv=fragCoord.xy/iResolution.xy;\n\tuv-=.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\n    vec2 mouse=vec2(0);\n\n\tif(iMouse.x>0.0){\n\t\tmouse = iMouse.xy / iResolution.y;\n\t\tmouse.x -= .5 * iResolution.x / iResolution.y;\n\t\tmouse.y -= .75;\n\t}\n\t\n\tconst float pi=3.14159265358979;\n\n\tfloat t0=smoothstep(0.,0.,iTime);\n\tfloat t1=t0*6.*pi;\n\n\tmat2 rot=mat2(cos(t1),sin(t1),-sin(t1),cos(t1));\n\n    border*=exp(4.*mouse.y)*exp(1.-1.*t0);\n\tuv*=exp(4.*mouse.y)*exp(1.-1.*t0);\n\tuv*=rot;\n\n\tuv.x+=mouse.x;\n\n\tfloat dis_sq=1e38;\n\n\tif(all(lessThan(uv,vec2(0.197804,0.2)+border)) && all(greaterThan(uv,vec2(-0.197804,-0.2)-border))){\n\t\tdis_sq=min(dis_sq,path0_dis_sq(uv));\n\t}\n\n\tfloat dis=sign(dis_sq)*sqrt(abs(dis_sq));\n\n\tfragColor=vec4(smoothstep(-border, border, dis));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}