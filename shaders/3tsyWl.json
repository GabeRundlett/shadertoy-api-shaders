{
    "Shader": {
        "info": {
            "date": "1593875479",
            "description": "Recreating [url]https://thebookofshaders.com/05/kynd.png[/url]\nTODO:\n- add little movement indicators like https://easings.net/\n- fix proportions, plot tiles should be squares.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tsyWl",
            "likes": 13,
            "name": "BoS - Shaping Functions Table",
            "published": 3,
            "tags": [
                "2d",
                "bookofshaders",
                "shapingfunctions"
            ],
            "usePreview": 0,
            "username": "zeta",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "// Fork of \"BoS - Shaping Functions Exercise\" by zeta. https://shadertoy.com/view/3lfyR4\n// 2020-06-29 11:30:30\n\n\n#define plot_thickness 3.0\n\n// Thanks FabriceNeyret2 for suggesting these (see comments).\n#define plot_var(uv, pct, n, var)     smoothstep(plot_thickness*(n_tiles/R).var, 0., abs(uv.var-(pct)))\n#define plot_y(uv, pct, n)            plot_var(uv, pct, n, y)\n#define plot_x(uv, pct, n)            plot_var(uv, pct, n, x)\n#define tiles(uv, n_tiles)            fract(uv * n_tiles)\n#define put(shape, color, bg)         mix(bg, color, shape)\n\n\nconst float PI = 3.14159265359;\n\nconst float[] prms = float[](0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5);\n\n\nconst vec3\n    paper_color = vec3(215,210,154) / 255.,\n    axes_color = vec3(.7);\n\n\n// https://stackoverflow.com/a/17897228\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage(out vec4 O, in vec2 fc)\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = fc / R.xy;\n    vec3 color = paper_color;\n\n    // Number of functions we want to plot.\n    // Make sure to update this number when adding or removing functions.\n\tfloat n_funs = 5.0;\n    // Number of parametrizations to plot for each function.\n    float n_prms = float(prms.length());\n    \n    // Fit variations of the same function horizontally and different functions vertically.\n    vec2 n_tiles = vec2(n_prms, n_funs);\n    vec2 tile_size = R.xy / n_tiles.xy;\n    \n    // Create a tiled space for function plots.\n    vec2 ts = tiles(uv, n_tiles);\n    \n    // Plot functions on range x = [-1, 1] and y = [0, 1] as in the original image,\n    // plus some margin space.\n    float a = 2.7;\n    ts.x = a * ts.x - a / 2.0;\n    ts.y = a * ts.y - a / 3.0;\n        \n    // Find out which tile this pixel belongs to.\n    vec2 tile_id = floor(fc.xy / tile_size.xy);\n    // Get the param to plot in this tile.\n    float p = prms[int(tile_id.x)];\n\n    // Plot the function belonging to this row of tiles.\n    float shape;\n    float i_fun = 0.0;\n    \n    if (tile_id.y >= (n_funs - ++i_fun)) {\n        \n    \tshape = 1.0 - pow(abs(ts.x), p);\n        \n    } else if (tile_id.y >= (n_funs - (++i_fun))) {\n        \n         shape = pow(cos(PI * ts.x / 2.0), p);\n        \n    } else if (tile_id.y >= (n_funs - ++i_fun)) {\n        \n        shape = 1.0 - pow(min(abs(sin(PI * ts.x / 2.0)), 1.0), p);\n        \n    } else if (tile_id.y >= (n_funs - ++i_fun)) {\n        \n        shape = pow(min(cos(PI * ts.x / 2.0), 1.0 - abs(ts.x)), p);\n        \n    } else if (tile_id.y >= (n_funs - ++i_fun)) {\n        \n        shape = 1.0 - pow(max(0.0, abs(ts.x) * 2.0 - 1.0), p);\n    \n    }\n\n    // Plot the function shape in the x = [-1, 1] interval\n    // (thanks FabriceNeyret2 for the step(abs) trick).\n    float pct = plot_y(ts, shape, n_tiles)\n        * step(abs(ts.x), 1.0); \n\n    // Assign a different hue to each row.\n    vec3 pct_col = hsv2rgb(vec3(\n        tile_id.y / n_tiles.y,\n        1.,\n        .7\n    ));\n\n    // Draw axes at (0, 0), plus some margin.\n    float axes = max(plot_y(ts, 0., n_tiles), plot_x(ts, 0., n_tiles))\n        * step(abs(ts.x), 1.2)\n        * step(-0.2, ts.y)\n        * step(ts.y, 1.2);\n\n    color = put(axes, axes_color, color);\n    color = put(pct, pct_col, color);\n    \n    O = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}