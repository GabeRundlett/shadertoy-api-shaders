{
    "Shader": {
        "info": {
            "date": "1506981155",
            "description": "use mouse to control the cam",
            "flags": 32,
            "hasliked": 0,
            "id": "4tlcDl",
            "likes": 2,
            "name": "Ray Marching Experiment 72",
            "published": 3,
            "tags": [
                "ray",
                "experiment",
                "marching",
                "72"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat dispSize;\n\nvec3 effect(vec2 p) \n{\n    return texture(iChannel1, mod(p*0.03,1.)).bgb;\n}\n\nvec4 displacement(vec3 p)\n{\n    vec2 g = p.xz;\n    vec3 col = 1.-clamp(effect(g*5.),0.,1.);\n    float dist = dot(col,vec3(0.15));\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 disp = displacement(p);\n    float sp = length(p) - 4.;\n    return vec4(max(-sp+0.41, sp - disp.x), disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.03, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec)\n{\n    float s = rmPrec;\n    float d = 0.;\n    for(int i=0;i<180;i++)\n    {      \n        if (d/s>1e5||d>maxd) break;\n        s = map(ro+rd*d).x;\n        d += s*0.2;\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    dispSize = 0.15;\n    \n    float time = iTime*0.25;\n    float cam_a = time; \n    \n    float cam_e = 5.52; \n    float cam_d = 1.88; \n    \n  \tvec2 s = iResolution.xy;\n    vec2 uv = (g+g-s)/s.y;\n    \n    if (iMouse.z > 0.)\n    {\n        cam_d = 1.88 * iMouse.x / s.x;\n    \tcam_e = 5.52 * iMouse.y / s.y;\n    }\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(-ro);\n    vec3 u = normalize(cross(vec3(0,1,0),rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = .35;\n    \n    float d = march(ro, rd, 1e-5, 50., .5);\n    \n    if (d<50.)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 refrRay = refract(rd, n, .7);\n        \n        vec3 cubeRefl = texture(iChannel0, reflRay).rgb * .5;\n        vec3 cubeRefr = texture(iChannel0, refrRay).rgb * .8;\n        \n        col = cubeRefl + cubeRefr + pow(b, 15.);\n        \n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float spe = pow(clamp( dot( reflRay, lig ), 0.0, 1.0 ),16.0);\n\n\t\tvec3 brdf = vec3(0);\n        brdf += 1.2*dif*vec3(1);\n\t\tbrdf += .5*spe*vec3(1,.8,.2)*dif;\n\t\t\n    \tcol = mix(brdf, map(p).yzw, 0.5);\n    }\n    else\n    {\n        col = texture(iChannel0, rd).rgb;\n    }\n    \n\tf.rgb = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// based on the tuto here : http://www.karlsims.com/rd.html\n\nvec2 cell(vec2 fragCoord, vec2 pixel)\n{\n    // remove screen border of domain\n    if (fragCoord.x + pixel.x > iResolution.x) fragCoord.x = 0.;\n    if (fragCoord.y + pixel.y > iResolution.y) fragCoord.y = 0.;\n    if (fragCoord.x + pixel.x < 0.0) fragCoord.x = iResolution.x;\n    if (fragCoord.y + pixel.y < 0.0) fragCoord.y = iResolution.y;\n    \n\tvec2 uv = (fragCoord + pixel) / iResolution.xy;\n    return texture(iChannel0, uv).rg;\n}\n\nvec2 laplacian2D(vec2 fragCoord) \n{\n    float st = 1.;\n    return \n        cell(fragCoord, vec2(0., -st)) * .2 +\n        cell(fragCoord, vec2(0., st)) * .2 +\n        cell(fragCoord, vec2(st, 0.)) * .2 +\n        cell(fragCoord, vec2(-st, 0.)) * .2 +\n        cell(fragCoord, vec2(-st, -st)) * .05 +\n        cell(fragCoord, vec2(-st, st)) * .05 +\n        cell(fragCoord, vec2(st, -st)) * .05 +\n        cell(fragCoord, vec2(st, st)) * .05 -\n        cell(fragCoord, vec2(0., 0.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = vec4(0,0,0,0);\n\t\n    if (iFrame < 10)\n    {\n        fragColor = texture(iChannel1, uv).rgrg;\n    }\n    else\n    {\n        vec2 diffusionCoef = vec2(1,.5);\n        float feedCoef = 0.055;\n        float killCoef = 0.061;\n        \n        vec2 ab = cell(fragCoord, vec2(0,0));\n        vec2 lp = laplacian2D(fragCoord);\n        \n        float reaction = ab.x * ab.y * ab.y;\n        vec2 diffusion = diffusionCoef * lp;\n        float feed = feedCoef * (1. - ab.x);\n        float kill = (feedCoef + killCoef) * ab.y;\n        \n        ab += diffusion + vec2(feed - reaction, reaction - kill);\n        \n    \tfragColor = vec4(clamp(ab,0.,1e4),0.0,1.0);\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}