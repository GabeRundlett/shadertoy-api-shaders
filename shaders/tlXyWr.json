{
    "Shader": {
        "info": {
            "date": "1591807301",
            "description": "With density",
            "flags": 0,
            "hasliked": 0,
            "id": "tlXyWr",
            "likes": 1,
            "name": "Transparency Test 2",
            "published": 3,
            "tags": [
                "transparency",
                "color",
                "blending",
                "density",
                "opacity"
            ],
            "usePreview": 0,
            "username": "Leria",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "#define RADIUS 10.\n\n#define PI 3.14\n\nfloat current_transparency(vec3 p, float l, float material_coef)\n{\n   vec4 dens = texture(iChannel0, p);\n   return exp(-l*material_coef*dens.r); \n}\n\nfloat current_opacity(float t)\n{\n \treturn 1.-t;   \n}\n\nvec3 current_opacity(vec3 rgb_o)\n{\n \treturn 1.-rgb_o;   \n}\n\n#define transp current_transparency\n\nfloat sdf_sphere(vec3 pXp0, float radius)\n{\n \treturn length((pXp0)) - radius;   \n}\n\nconst vec3 cam = vec3(0., 0., 20.);\nfloat uniform_step = .1;\n\nvoid draw(vec3 dir, vec3 center, vec3 normal, float radius, inout vec3 c)\n{\n    float antialiasing = 1.;\n    //antialiasing = fract(1e4*sin(1e4*dot(dir, vec3(1., 7.1, 13.3)))); //Comment to see it without antialiasing/jittering\n    vec3 p = cam+dir*antialiasing;\n    int s = 0;\n    \n    vec3 h_col = vec3(1., .1, .8);\n    \n    float t = 1.;\n    float dist_acc = 0.;\n    \n    float r_t = transp(p, uniform_step, .1);\n    float g_t = transp(p, uniform_step, .9);\n    float b_t = transp(p, uniform_step, .1);\n    \n    vec3 rgb_t = vec3(r_t, g_t, b_t);\n    \n    float r_t2 = transp(p, uniform_step, .9);\n    float g_t2 = transp(p, uniform_step, .1);\n    float b_t2 = transp(p, uniform_step, .1);\n    \n    vec3 rgb_t2 = vec3(r_t2, g_t2, b_t2);\n\n    vec3 t_acc = vec3(1.);\t// accumulated transparency\n    vec3 t_acc2 = vec3(1.); //accumulated transparency\n    \n    for(s; s < 150; s++)\n    {               \n        \n        float k_step = uniform_step;\n        \n        float dist_dist = dot(p-cam, p-cam);\n        float dist_center = length(center-cam);\n        \n        //if too far, then big step        \n        if(sqrt(dist_dist)-(dist_center-radius) < 0.)\n        {\n        \tk_step = dist_center-(radius);\n        }\n\n        //if in the shape, draw\n        if( sdf_sphere(p-center, RADIUS) <= 0.)\n        {\n            \n           \t//blending\n        \tc += t_acc*vec3(1.)*(1.-rgb_t);\n\t\t\tt_acc *= rgb_t;  \n        }   \n        \n        if( sdf_sphere(p-vec3(2., -3., -2.), RADIUS-1.) <= 0.)\n        {\n            c += t_acc*vec3(1., 1., 0.)*(1.-rgb_t2);\n\t\t\tt_acc *= rgb_t2;\n        }   \n        \n        //if it will never be in the shape anymore, return;\n        if(length(p-cam) > max((dist_center+radius), (length(vec3(2., -3., -2.)-cam)+(radius-1.))))\n        {\n         \tbreak;\n        }\n        \n        p += dir*k_step;       \n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    \n    vec3 color = vec3(0.);\n    \n    draw(normalize(vec3(uv, -1.)), vec3(0., 0., 0.), vec3(0., 1., 0.), RADIUS, color);\n    \n    fragColor = vec4(color, 1.);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}