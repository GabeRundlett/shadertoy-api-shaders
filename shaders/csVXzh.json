{
    "Shader": {
        "info": {
            "date": "1681085138",
            "description": "Inspired by a fantastic wallpaper I saw on the catppuccin discord. Includes all cpt themes inbuilt, as well as several pride flag colors. Still needs anti aliasing (I did try already lol), but other than that it's pretty good looking!",
            "flags": 0,
            "hasliked": 0,
            "id": "csVXzh",
            "likes": 8,
            "name": "N-gon rotation with colors",
            "published": 3,
            "tags": [
                "colors",
                "rotation",
                "polygon",
                "ngon",
                "geometric",
                "pride"
            ],
            "usePreview": 0,
            "username": "Oman395",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "// Take a wild guess\n#define SIDES 6\n// Number of shapes to display. If REPEAT is true, this just scales distance between polygons.\n#define NUM_SHAPES 10\n// If true, shapes won't end after NUM_SHAPES shapes\n#define REPEAT true\n// Gee, I wonder\n// Seriously though, if you change this, things will break\n#define PI 3.14159265\n#define TAU PI * 2.0\n\n// Offset in radians per second between polyhons\n#define ROT_OFFSET -0.1\n// Radians per second for the first polygon\n#define START_ROT 0.5\n// Time scale\n#define ROT_SCALE 0.4\n// Width of individual lines\n// This goes inwards from the shape, so set this however high you want\n#define SHAPE_WIDTH 0.01\n// If this is defined, shape rotation will not offset until 1 cycle of colors are complete\n// This is mostly good for pride flags\n// #define MULTICOLOR_SHAPES\n// Themes\n// Catppuccin themes\n// #define MOCHA\n#define MACCHIATO\n// #define FRAPPE\n// #define LATTE\n\n// Pride themes\n// Feel free to add to this, add an elif to the colors definition and bg definition and comment here\n// Or dm it to me, AutisticMOFO#0521\n// #define TRANS\n// #define GAY\n// #define BI\n// If defined, this will limit time to +- TIME_BOUNDS / 2.0, and use a sin curve to make it not juddery.\n// #define TIME_BOUNDS 8.0\n\n// If defined, distance between shapes will pulse with music\n// #define USE_MUSIC\n\n// If defined, antialiasing will be enabled-- this will make lines much smoother, but also significantly thicker (by ~3px).\n#define AA\n\nconst vec4 colors[] = vec4[](\n    #if defined(MACCHIATO)\n    vec4(138, 173, 244, 255) / 255.0, // Blue\n    vec4(139, 213, 202, 255) / 255.0, // Teal\n    vec4(166, 218, 149, 255) / 255.0, // Green\n    vec4(245, 169, 127, 255) / 255.0, // Peach\n    vec4(237, 135, 150, 255) / 255.0, // Red\n    vec4(198, 160, 246, 255) / 255.0  // Mauve\n    #elif defined(MOCHA)\n    vec4(137, 180, 250, 255) / 255.0,\n    vec4(148, 226, 213, 255) / 255.0,\n    vec4(166, 227, 161, 255) / 255.0,\n    vec4(250, 179, 135, 255) / 255.0,\n    vec4(243, 139, 168, 255) / 255.0,\n    vec4(203, 166, 247, 255) / 255.0\n    #elif defined(FRAPPE)\n    vec4(140, 170, 238, 255) / 255.0, // Blue\n    vec4(129, 200, 190, 255) / 255.0, // Teal\n    vec4(166, 209, 137, 255) / 255.0, // Green\n    vec4(239, 159, 118, 255) / 255.0, // Peach\n    vec4(231, 130, 132, 255) / 255.0, // Red\n    vec4(202, 158, 230, 255) / 255.0  // Mauve\n    #elif defined(LATTE)\n    vec4(30, 102, 245, 255) / 255.0, // Blue\n    vec4(23, 146, 153, 255) / 255.0, // Teal\n    vec4(64, 160, 43, 255) / 255.0, // Green\n    vec4(254, 100, 11, 255) / 255.0, // Peach\n    vec4(210, 15, 57, 255) / 255.0, // Red\n    vec4(136, 57, 239, 255) / 255.0  // Mauve\n    #elif defined(GAY)\n    vec4(228, 3, 3, 255) / 255.0,\n    vec4(255, 140, 0, 255) / 255.0,\n    vec4(255, 237, 0, 255) / 255.0,\n    vec4(0, 128, 38, 255) / 255.0,\n    vec4(0, 77, 255, 255) / 255.0,\n    vec4(117, 7, 135, 255) / 255.0\n    #elif defined(TRANS)\n    vec4(91, 206, 250, 255) / 255.0,\n    vec4(245, 169, 184, 255) / 255.0,\n    vec4(1),\n    vec4(245, 169, 184, 255) / 255.0,\n    vec4(91, 206, 250, 255) / 255.0\n    #elif defined(BI)\n    vec4(214, 2, 112, 255) / 255.0,\n    vec4(214, 2, 112, 255) / 255.0,\n    vec4(155, 79, 150, 255) / 255.0,\n    vec4(0, 56, 168, 255) / 255.0,\n    vec4(0, 56, 168, 255) / 255.0\n    #endif\n);\n\nconst vec4 bg = vec4(\n    #if defined(MACCHIATO)\n    36, 39, 58\n    #elif defined(MOCHA)\n    30, 30, 46\n    #elif defined(FRAPPE)\n    48, 52, 70\n    #elif defined(LATTE)\n    239, 241, 245\n    #else\n    0,0,0\n    #endif\n    ,255\n) / 255.0;\n\n// https://math.stackexchange.com/questions/1641859/distance-function-for-n-prism\nfloat nGon(in int n, in vec2 p, in float r) {\n    // these 2 lines can be precomputed\n    float an = TAU / float(n);\n    float he = r * tan(0.5 * an);\n\n    // rotate to first sector\n    p = -p.yx; // if you want the corner to be up\n    float bn = an * floor((atan(p.y, p.x) + 0.5 * an) / an);\n    vec2 cs = vec2(cos(bn), sin(bn));\n    p = mat2(cs.x, -cs.y, cs.y, cs.x) * p;\n\n    // side of polygon\n    return length(p - vec2(r, clamp(p.y, -he, he))) * sign(p.x-r);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 ouv = uv;\n    float mr = max(iResolution.x / iResolution.y, iResolution.y / iResolution.x);\n    fragColor = bg;\n    float mult = 1.0;\n    for(int i = 0; i < (REPEAT ? NUM_SHAPES * 2 : NUM_SHAPES); i++) {\n        float percent = float(i + 1) / float(NUM_SHAPES);\n        // Ideally we would start i at the minimum possible radius that the pixel could be intersecting with, but quite frankly I have no idea how to do that.\n        // I would probably either need to assume that every polygon has an internal radius of a triangle, or implement a seperate function to calculate the inner radius\n        // of an ngon-- I really don't feel like doing that. I might come back to this later and fix it, but for now this runs at ~60fps on my slow laptop @ 1440p, so\n        // I'm happy :D\n        #ifndef MUSIC\n        // Because of the variable radius' from MUSIC, it's easier to just skip this optimization if music is turned on\n        if(distance(ouv, vec2(0)) < percent * mr - SHAPE_WIDTH - 3.0 / iResolution.y * 2.0) continue;\n        #endif\n        float offset = float(ROT_OFFSET) * float(i);\n        #ifdef MULTICOLOR_SHAPES\n        offset = float(ROT_OFFSET) * floor(float(i) / float(colors.length()));\n        #endif\n        #ifdef TIME_BOUNDS\n        uv = rotate(ouv, (sin((mod(iTime, TIME_BOUNDS * 2.0) - TIME_BOUNDS) / TIME_BOUNDS * PI) * ROT_SCALE * (offset + START_ROT)));\n        #else\n        uv = rotate(ouv, (iTime * ROT_SCALE * (offset + START_ROT)));\n        #endif\n        float r = percent * mr;\n        float r2 = percent * mr;\n        #ifdef USE_MUSIC\n        float xp = float(i % NUM_SHAPES) / float(NUM_SHAPES);\n        r -= 0.5 * (1.0 / float(SIDES / 2));\n        r2 -= 0.5 * (1.0 / float(SIDES / 2));\n        r += texture(iChannel1, vec2(xp, 0)).r * (1.0 / float(NUM_SHAPES)) * float(SIDES / 2);\n        r2 += texture(iChannel1, vec2(xp, 0)).r * (1.0 / float(NUM_SHAPES)) * float(SIDES / 2);\n        #endif\n        r2 -= SHAPE_WIDTH;\n        float avgR = r2 + SHAPE_WIDTH / 2.0;\n        #ifdef AA\n        float pm = mult;\n        float m = smoothstep(SHAPE_WIDTH / 2.0 + 3.0 / iResolution.y, SHAPE_WIDTH / 2.0, abs(nGon(SIDES, uv, avgR)));\n        if(m >= 0.0) {\n            fragColor = (1.0 - mult * m) * fragColor + colors[((i) % colors.length())] * mult * m;\n            mult -= m;\n        }\n        if(mult <= 0.0) return;\n        #else\n        if(abs(nGon(SIDES, uv, avgR)) <= SHAPE_WIDTH / 2.0) {\n            fragColor = colors[((i) % colors.length())];\n            return;\n        }\n        #endif\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}