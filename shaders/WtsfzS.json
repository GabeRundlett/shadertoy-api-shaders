{
    "Shader": {
        "info": {
            "date": "1597043740",
            "description": "https://www.twitch.tv/videos/705843458 :)\nBuilt in KodeLife",
            "flags": 32,
            "hasliked": 0,
            "id": "WtsfzS",
            "likes": 4,
            "name": "[Twitch] Rainbow Trip",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "trippy",
                "feedback",
                "stream",
                "twitch"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define time iTime*0.5\nmat2 r2d(float a) {\n    return mat2(sin(a),cos(a),-cos(a),sin(a));\n}\n\n//https://iquilezles.org/articles/distfunctions\n//vec3 opRepLim( in vec3 p, in float c, in vec3 l, in sdf3d primitive )\nvec3 opRepLim(vec3 p, float c, vec3 l)\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return q;\n}\n\nfloat map(vec3 p) {\n    float s = 2.+sin(time*0.1);\n    s = 0.9;\n    p = opRepLim(p,-9.9,vec3(3.));\n    float d = length(p)-s;\n    //d = opRepLim(p, d, p);\n    return d;\n}\n\nvec2 RM(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<210;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p);\n        if (dS < 0.) {\n            dS += 1.5;\n        }\n        dO += dS;\n        ii += 0.3;\n        if (dO > 1000. || dS< 0.001) {\n            break;\n        }\n    }\n    return vec2(dO,ii);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tv = fragCoord.xy/iResolution.xy;\n    //tv.x *= iResolution.x/iResolution.y;\n    //tv.x -= (iResolution.x/iResolution.y)*0.5;\n    vec2 uv = -1. + 2. * tv;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 vuv = vec2(uv.x, tv.y*2.);\n    //uv = vuv;\n    uv = abs(uv);\n    float c = length(uv);\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.5,0.5,-5.*(sin(time*0.3)*0.5+0.45));\n    //ro = vec3(0,0,-15.);\n    \n    vec3 rd = normalize(vec3(uv,0.5));\n    vec2 M = iMouse.xy*4.;\n    M += vec2(time*2.5,time*(sin(time*0.01)*0.5));\n    //M *= 2.;\n    //M = vec2(3.14*0.5);\n    //M = mouse.xy*4.;\n    ro.xy *= r2d(M.x);\n    rd.xy *= r2d(M.x);\n    ro.yz *= r2d(M.y);\n    rd.yz *= r2d(M.y);\n    //ro.yz += (vec2(sin(time),cos(time))*0.5+0.5)-2.;\n    //ro.xy += (vec2(sin(time),cos(time))*0.5+0.5)*2.;\n    vec2 d = RM(ro,rd);\n    vec3 p = ro+rd*d.x;\n    uv = p.xy;\n    c = length(uv);\n    //vec2 tv = inData.v_texcoord;\n    tv += sin(uv)*0.0005;\n    tv -= 0.5;\n    vec2 rtv = tv *r2d(3.14159*0.5 + sin((uv.x*0.00005 + uv.y*0.00005)-c*0.001+time));\n    tv = mix(tv,rtv,0.015);\n    tv *= 0.99+(sin(time)*0.5+0.5)*0.03;\n    tv *= 0.88+((1.+(d.y*0.1))*0.79)*0.1;\n    tv *= 0.995;\n    tv += 0.5;\n    vec3 bak = texture(iChannel0, tv).rgb;\n    //col += sin(c*20+time*5.+spectrum.x*50*sin(uv.x*20.*uv.y*2.));\n    //col += bak*1.99;\n    if (d.x > 1000.) {\n        col = bak;\n        col = fract(col+0.0001);\n    }else {\n        col -= sin(p*0.05);\n    }\n    //col -= d.y*0.01;\n    //col = rgb2hsv(vec3(col));\n    //col = hsv2rgb(vec3(col)+0.005);\n    col = rgb2hsv(vec3(col.r,col.g,col.b));\n    col = hsv2rgb(vec3(col.r,col.g,col.g)+0.001+d.y*0.001);\n    //col = hsv2rgb(vec3((col.r+col.b+col.g)*.9,0.5,1.));\n    col = fract(col);\n    //col += 1.-(d.y*0.49);\n    fragColor = vec4(col,1.);\n    //fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}