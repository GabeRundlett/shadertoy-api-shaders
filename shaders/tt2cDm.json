{
    "Shader": {
        "info": {
            "date": "1595790688",
            "description": "Raymarched Interactive Mandelbulb\n\nControls: \nZ - Zoom In\nX - Zoom Out\nLeft/Right/Down/Up Arrow - Rotate\n",
            "flags": 48,
            "hasliked": 0,
            "id": "tt2cDm",
            "likes": 6,
            "name": "Mandelbulb - Interactive",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "AmarnathMurugan",
            "viewed": 566
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/mandelbulb\n//http://blog.hvidtfeldts.net/index.php/2011/06/distance-estimated-3d-fractals-part-i/\n#define MAX_STEPS 25\n#define THRESHOLD 0.1\n#define MAX_DIST 10.0\n#define MAX_ITR 15\n#define ESCAPE_THRESHOLD 10.0\n#define PI 3.1415926538\n#define StartPoint vec4(0.0,0.0,-4.0,0.0);\nconst float Width = 2.0;\nconst float  FocalDistance = 1.0;\nconst float power = 8.0;\nvec3 Origin;\nfloat SphereSdf(vec3 p, vec4 sph)\n{\n\tfloat d = length(sph.xyz - p)-sph.w;\n    return d;\n}\n\nvec3 GetCartesianCoords(float len, float theta,float phi)\n{\n\treturn (len * vec3(sin(theta)*cos(phi),sin(theta)*sin(phi),cos(theta)));    \n}\n\nvec2 MandelbulbSdf(const in vec3 p)\n{\n    vec3 z = p;\n    float len = 0.0;\n    float derivative_len = 1.0;\n    float theta,phi;\n    int i;\n    for(i=0;i<MAX_ITR;i++)\n    {\n    \tlen = length(z);\n        if(len > ESCAPE_THRESHOLD) break;\n        theta = acos(z.z/len)+(iTime/10.0);\n        phi = atan(z.x/z.y);\n        derivative_len =  power * pow(len,power-1.0) * derivative_len + 1.0;\n        len = pow(len,power);\n        z = GetCartesianCoords(len,power*theta,power*phi) + p;        \n    }\n    return vec2(0.5 * log(len) * (len/derivative_len),i);\n}\n\nvec3 Raymarch(const in vec3 dir)\n{\n    float d=0.0;\n    vec3 p;\n    vec3 finalParams;\n    int i;\n\tfor(int i=0;i<MAX_STEPS;i++)\n    {\n        p = Origin + d * dir;\n        finalParams.xy = MandelbulbSdf(p);\n        d += finalParams.x;\n        if(d<=THRESHOLD || d>=MAX_DIST)\n            break;\n    }\n    finalParams.z = float(i);\n    return finalParams;\n}\n\nvec3 GetSkyColor(const in vec3 RayDirection)\n{\t\n    float t = 0.5 * (RayDirection.y + 1.0);\n    vec3 col = vec3(0.1)*(1.0 - t) + vec3(0.0) * t;\n    return col;\n}\n\n//source : https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 GetColorAtPoint(const in vec3 RayDirection)\n{\n    vec3 hitInfo = Raymarch(RayDirection);\n    float outline = hitInfo.x*20.0;\n    float col = (hitInfo.y/float(MAX_ITR));\n\tif(hitInfo.x*180.0 < MAX_DIST)\n    return pal( col, vec3(0.7,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) )+outline*vec3(1.0,2.0,3.5);\n   \n    return GetSkyColor(RayDirection);\n   \n}\n\nmat4 RotateY(float theta)\n{\n    float Cos = cos(theta);\n    float Sin = sin(theta);\n\treturn mat4(Cos,0.0,-Sin,0.0,\n                0.0,1.0,0.0,0.0,\n                Sin,0.0,Cos,0.0,\n                0.0,0.0,0.0,1.0);\n}\n\nmat4 RotateX(float theta)\n{\n    float Cos = cos(theta);\n    float Sin = sin(theta);\n\treturn mat4(1.0,0.0,0.0,0.0,\n                0.0,Cos,Sin,0.0,\n                0.0,-Sin,Cos,0.0,\n                0.0,0.0,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n     vec2 uv = fragCoord/iResolution.xy-0.5;\n\tuv.x*= iResolution.x/iResolution.y;\n    vec4 PrevState = texelFetch(iChannel0,ivec2(0,0),0);     \n    vec4 ro1 = RotateY(-PrevState.x) * RotateX(-PrevState.y) * StartPoint;\n    Origin = ro1.xyz;\n \tvec3 lp = vec3(0.0);\n    vec3 forward = normalize(lp-Origin);\n    vec3 GlobalUp = vec3(0.0,1.0,0.0);\n    vec3 right = normalize(cross(forward,GlobalUp));\n    vec3 localUp = cross(right,forward);\n    vec3 rd = (Origin+forward*PrevState.z) + uv.x * right + uv.y * localUp - Origin;\n\tvec3 col = GetColorAtPoint(normalize(rd));\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926538\nconst int KEY_Z  = 90;\nconst int KEY_X  = 88;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nvec3 offset = vec3(0.0,0.0,1.0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    offset = texelFetch(iChannel0,ivec2(0,0),0).xyz; \n    offset.x+= (texelFetch(iChannel1,ivec2(KEY_RIGHT,0),0).x - texelFetch(iChannel1,ivec2(KEY_LEFT,0),0).x)*0.02 ;\n    offset.y+= (texelFetch(iChannel1,ivec2(KEY_UP,0),0).x - texelFetch(iChannel1,ivec2(KEY_DOWN,0),0).x)*0.02 ; \n    offset.z+= (texelFetch(iChannel1,ivec2(KEY_Z,0),0).x - texelFetch(iChannel1,ivec2(KEY_X,0),0).x)*0.01*offset.z ;\n    offset.xy%=2.0*PI;\n    float limit = PI/2.0-0.001;\n    offset.y = clamp(offset.y,-limit,limit);\n    offset.z = clamp(offset.z,1.0,15.0);    \n    fragColor = vec4(offset,1.0);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}