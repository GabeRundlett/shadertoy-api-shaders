{
    "Shader": {
        "info": {
            "date": "1587661872",
            "description": "Run a CPPN in real time. In this case, x, y, a radial function, and low-frequency noise are the inputs.\n\nRandom weights and biases are generated in a Buffer A and then read in the Image function.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dXBzn",
            "likes": 4,
            "name": "CPPN Random Buffer Texture",
            "published": 3,
            "tags": [
                "cppn"
            ],
            "usePreview": 0,
            "username": "darknoon",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "\n\n// j= sub component, for 8x8 matrix there are 4 sub 4x4 matrices\nmat4 getWeightSubMatrix(int layer, int j) {\n    mat4 m;\n    for (int i=0; i<N_HIDDEN; i++) {\n\t    m[i] = 2.0 * texelFetch(iChannel0, ivec2(layer, j * (N_HIDDEN / 4) + i), 0) - 1.0;\n    }\n\treturn m;\n}\n\n// j= sub component, for 8x1 bias there are 2 sub 4x1 vectors\nvec4 getSubBias(int layer, int j) {\n    vec4 b;\n    b = 2.0 * texelFetch(iChannel0, ivec2(layer, WEIGHTS_END_Y + j), 0) - 1.0;\n\treturn b;\n}\n\nvec4 hash4( vec3 p )\n{\n    vec4 q = vec4( dot(p,vec3(127.1,311.7,256.8)), \n\t\t\t\t   dot(p,vec3(269.5,183.3,012.5)), \n\t\t\t\t   dot(p,vec3(419.2,371.9,167.1)),\n                   dot(p,vec3(269.5,183.3,918.1))\n                 );\n\treturn fract(sin(q)*43758.5453);\n}\n\nvec4 noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\t\n\tvec4 color = vec4(0.0);\n\tfloat wt = 0.0;\n    // Sum contributions from neighboring pixels\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2(float(i), float(j));\n\t\tvec4 value = hash4( vec3(p + g, 0.0) );\n\t\tvec2 r = g - f;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = 1.0-smoothstep(0.0,1.414,sqrt(d));\n\t\tcolor += value*ww;\n\t\twt += ww;\n    }\n    //return color;\n\t// Normalize weight\n    return 2.0*color/wt -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2. * uv - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 fr = fract(uv * 8.);\n\n    // Input features\n    vec4 v0 = 0.3*vec4(\n        uv.x,\n        uv.y,\n        2.0 - 4.*length(uv + vec2(0.0, 0.0)),\n        sin(3.14159*uv.x)\n    );\n    float scale = 3.;\n    vec4 v1 = 1.0*noise(scale * uv + vec2(1.0*iTime, 0.0));\n    \n    // Weight and bias factors\n    float k_w = 1.8;\n    float k_b = 0.45;\n    for (int layer=0; layer<N_LAYERS; layer++) {\n        \n        vec4 v00 = getWeightSubMatrix(layer, 0) * v0;\n        vec4 v11 = getWeightSubMatrix(layer, 1) * v1;\n        vec4 v10 = getWeightSubMatrix(layer, 2) * v0;\n        vec4 v01 = getWeightSubMatrix(layer, 3) * v1;\n        \n        v0 = k_w * (v00 + v01) + k_b * getSubBias(layer, 0);\n        v1 = k_w * (v10 + v11) + k_b * getSubBias(layer, 1);\n        \n        if (layer == N_LAYERS - 1) {\n            v0 *= 0.5;\n            v1 *= 0.5;\n        }\n\n        // Apply activation\n        v0 = tanh(v0);\n        v1 = tanh(v1);\n    }\n    \n    fragColor.rgb = 0.5 + 0.5 * (v0 + v1).rgb;\n    \n    // Debug visualization\n    if (fragCoord.x <= float(DATA_WIDTH) * DEBUG_SCALE && fragCoord.y <= float(DATA_HEIGHT) * DEBUG_SCALE) {\n\t    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy / DEBUG_SCALE);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nBuffer A is responsible for generating a number of random weight matrices and bias vectors.\n\nThey are stored packed in the 4 channels of this output texture.\nSince only some pixels are used, discard on other pixels (may not be any more efficient tho)\n*/\n\n// Standard shader RNG\nvec4 hash4( vec3 p )\n{\n    vec4 q = vec4( dot(p,vec3(127.1,311.7,256.8)), \n\t\t\t\t   dot(p,vec3(269.5,183.3,012.5)), \n\t\t\t\t   dot(p,vec3(419.2,371.9,167.1)),\n                   dot(p,vec3(269.5,183.3,918.1))\n                 );\n\treturn fract(sin(q)*43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool weight = int(fragCoord.x) < DATA_WIDTH && int(fragCoord.y) < WEIGHTS_END_Y;\n    bool bias = int(fragCoord.x) < DATA_WIDTH \n        && int(fragCoord.y) >= BIAS_START_Y\n        && int(fragCoord.y) < BIAS_END_Y;\n\n    // This pixel is unused\n    if (!weight && !bias) {\n        fragColor = vec4(0.0);\n        discard;\n    }\n    \n    // Interpolate between each weight breakpoint here\n    float t = iTime * 0.25;\n    vec4 a = hash4(vec3(fragCoord, floor(t)));\n    vec4 b = hash4(vec3(fragCoord, ceil(t)));\n    float k = fract(t);\n    fragColor = mix(a, b, smoothstep(0.0, 1.0, k));\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define N_HIDDEN 8\n#define N_LAYERS 10\n\n#define DATA_WIDTH N_LAYERS\n#define BIAS_HEIGHT (N_HIDDEN / 4)\n#define WEIGHTS_START_Y 0\n#define WEIGHTS_END_Y (N_HIDDEN * N_HIDDEN / 4)\n#define BIAS_START_Y (WEIGHTS_END_Y + 1)\n#define BIAS_END_Y (BIAS_START_Y + N_HIDDEN / 4)\n\n#define DATA_HEIGHT BIAS_END_Y\n\n#define DEBUG_SCALE 4.\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}