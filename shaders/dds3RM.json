{
    "Shader": {
        "info": {
            "date": "1665920122",
            "description": "now intersecting with a circle :)\ni am looking for a way to include a bounding sphere to my cone-marching program, with min and max values for the ray.\nthis might be usable, or too heavy, i'm not sure yet.",
            "flags": 0,
            "hasliked": 0,
            "id": "dds3RM",
            "likes": 9,
            "name": "cone - circle intersection",
            "published": 3,
            "tags": [
                "cone"
            ],
            "usePreview": 0,
            "username": "sympou",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define coneWidth    .25\n#define camPos       vec2(0.1,0.2)\n#define circlePos    vec2(0.5,0.5)\n#define circleRadius 0.06\n\n#define lineWidth 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    //rendered color\n    vec3 col = vec3(1.);\n    \n    //distance between pixel and shapes outlines\n    float d = 99999.;\n    \n    \n    ////finding the values/////\n    \n    //initial values\n    vec2 p = fragCoord;\n    vec2 m = iMouse.xy;\n    if ( m == vec2(0.) ) m = vec2( 0.5, 0.5 + cos(iTime)*0.1 ) * iResolution.xy;\n    vec2 ro         = camPos       * iResolution.xy;\n    vec2 pos        = circlePos    * iResolution.xy;\n    float circleRad = circleRadius * iResolution.y;\n    \n    //direction between mouse and origin\n    vec2  rd   = normalize(m - ro);\n    \n    //some values used to find the \"hidden\" circle\n    //(invert offset2 to intersect from inside)\n    float cw2     = coneWidth * coneWidth;\n    vec2  offset2 = rd * circleRad / coneWidth;\n    vec2  sr      = pos - ro + offset2;\n    float len2    = length(sr);\n    vec2  rd2     = sr / len2;\n    float dist    = len2 / (1. - cw2);\n    \n    //coordinates of the hidden circle,\n    //on which the collision actually occurs\n    float rad  = dist * coneWidth;\n    vec2 pos2  = ro + rd2 * dist - offset2;\n\n    //ray-circle intersection\n    //https://www.shadertoy.com/view/4d2XWV\n    vec2 oc = ro - pos2;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - rad*rad;\n    float h = sqrt(b*b - c);\n    float tN = - b - h;\n    float tF = - b + h;\n    \n    ////drawing the shapes/////\n \n    //drawing the starting point\n    d = min(d, circleFillDist(p, ro, 2.5));\n    \n    //drawing the target circle\n    d = min(d, circleFillDist(p, pos, 2.5));\n    d = min(d, circleDist(p, pos, circleRad));\n\n    //drawing the edges of the cone\n    vec2 offset = vec2(rd.y,-rd.x) * coneWidth / sqrt(1.-cw2);\n    d = min(d, segLineDist(p, ro, ro + rd + offset));\n    d = min(d, segLineDist(p, ro, ro + rd - offset));\n\n    //drawing the two resulting circles\n    if ( tN > 0. ) {\n        d = min(d, circleDist(p, ro + rd * tN, coneWidth * tN));\n        d = min(d, circleDist(p, ro + rd * tF, coneWidth * tF));\n        d = min(d, circleFillDist(p, ro + rd * tN, 2.5));\n        d = min(d, circleFillDist(p, ro + rd * tF, 2.5));\n    }\n \n    //distance to color\n    d = smoothLine( d / lineWidth );\n    col = min(col, vec3( d ) );\n \n    //showing \"hidden\" circle and line\n    float d2 = circleDist(p, pos2, rad);\n    d2 = min(d2, segLineDist(p, ro, ro + rd));\n    d2 = smoothLine( d2 / lineWidth );\n    col = min(col, vec3( mix(d2,1.,0.9) ) );\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float circleDist(vec2 pos, vec2 pt, float radius) {\n    return abs(length(pos-pt) - radius);\n}\nfloat circleFillDist(vec2 pos, vec2 pt, float radius) {\n    return max(length(pos-pt) - radius, 0.);\n}\nfloat segLineDist(vec2 pos, vec2 a, vec2 b) {\n    vec2 pa = pos-a, ba = b-a;\n    float h = max( dot(pa,ba) / dot(ba,ba), 0.0);\n    return length( pa - ba*h );\n}\nfloat smoothLine( in float x) {\n    float t = clamp(x , 0.0, 1.0);\n    return t * t * (3.0 - 2.0 * t);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}